; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/27] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $1000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	SQRT						; FUNCTION | OVERLOAD
.local	@010185000

; optimize OK (SYSTEM), line = 801

	lda X+3
	bmi @+
	ora X+2
	ora X+1
	ora X
	jne l_0042
@
	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0042

; optimize OK (SYSTEM), line = 803

	lda <C
	sta SP
	lda >C
	sta SP+1

; optimize OK (SYSTEM), line = 805

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta C
	lda :FPMAN1
	sta C+1
	lda :FPMAN2
	sta C+2
	lda :FPMAN3
	sta C+3

; optimize OK (SYSTEM), line = 807

	cmp #$3F
	bne @+
	lda C+2
	cmp #$80
	bne @+
	lda C+1
	cmp #$00
	bne @+
	lda C
	cmp #$01
@
	jcc l_0061
	lda C
	sta :STACKORIGIN+9
	lda C+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda C+2
	sub #$80
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda C+3
	sbc #$3F
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$80
	sta C+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$3F
	sta C+3
	lda :STACKORIGIN+9
	sta C
	lda :STACKORIGIN+STACKWIDTH+9
	sta C+1
l_0061

; optimize OK (SYSTEM), line = 809

	mwy SP :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3

; optimize OK (SYSTEM), line = 811

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 812

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 813

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
SP	= DATAORIGIN+$0013
C	= DATAORIGIN+$0015

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 904

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 905

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 906

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 908

	lda VALUE+3
	bne @+
	lda VALUE+2
	bne @+
	lda VALUE+1
	bne @+
	lda VALUE
@
	jne l_00CB

; optimize OK (SYSTEM), line = 909

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_00CB

; optimize OK (SYSTEM), line = 912

	lda X+3
	jpl l_00E9

; optimize OK (SYSTEM), line = 913

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 914

	lda X+3
	eor #$80
	sta X+3
l_00E9
l_00D9

; optimize OK (SYSTEM), line = 917

	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 918

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta Y
	lda :FPMAN1
	sta Y+1
	lda :FPMAN2
	sta Y+2
	lda :FPMAN3
	sta Y+3

; optimize OK (SYSTEM), line = 919

	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	lda #$4A
	sta :FP1MAN0
	lda #$D7
	sta :FP1MAN1
	lda #$3B
	sta :FP1MAN2
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$02
	sta :FP2MAN0
	lda #$6E
	sta :FP2MAN1
	lda #$84
	sta :FP2MAN2
	lda #$3C
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$FE
	sta :FP2MAN0
	lda #$C1
	sta :FP2MAN1
	lda #$2F
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$74
	sta :FP2MAN0
	lda #$31
	sta :FP2MAN1
	lda #$9A
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$83
	sta :FP2MAN0
	lda #$3D
	sta :FP2MAN1
	lda #$DA
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$C7
	sta :FP2MAN0
	lda #$7F
	sta :FP2MAN1
	lda #$11
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$E5
	sta :FP2MAN0
	lda #$BB
	sta :FP2MAN1
	lda #$4C
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$6C
	sta :FP2MAN0
	lda #$AA
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 922

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 924

	lda SIGN
	jeq l_016B

; optimize OK (SYSTEM), line = 925

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
	eor #$80
	jmp l_017C
l_016B

; optimize OK (SYSTEM), line = 927

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_017C
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$001D
X	= DATAORIGIN+$0021
Y	= DATAORIGIN+$0025
SIGN	= DATAORIGIN+$0029

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000025  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000033  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	FSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_01D2
l_01D3

; optimize OK (SYSTEM), line = 1909

	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$C9
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_01D2
	lda #$DB
	sta @FCMPL.A
	lda #$0F
	sta @FCMPL.A+1
	lda #$C9
	sta @FCMPL.A+2
	lda #$40
	sta @FCMPL.A+3
	lda X
	sta @FCMPL.B
	lda X+1
	sta @FCMPL.B+1
	lda X+2
	sta @FCMPL.B+2
	lda X+3
	sta @FCMPL.B+3
	jsr @FCMPL
	smi
	jne l_01D3

; --- WhileProlog
	jmp l_01E7
l_01E8

; optimize OK (SYSTEM), line = 1910

	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$C9
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_01E7
	lda X+3
	jmi l_01E8

; optimize OK (SYSTEM), line = 1913

	lda #$83
	sta :FP2MAN0
	lda #$F9
	sta :FP2MAN1
	lda #$22
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1916

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta I

; optimize OK (SYSTEM), line = 1919

	lda X+3
	jpl l_0216
	dec I
l_0216

; optimize OK (SYSTEM), line = 1922

	ldy #$00
	lda I
	spl
	dey
	sta :FPMAN0
	sty :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1925

	lda SC
	jeq l_0233
	inc I
l_0233

; optimize OK (SYSTEM), line = 1928

	lda I
	and #$01
	jne l_0250
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_0250

; optimize OK (SYSTEM), line = 1931

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1932

	lda #$42
	sta :FP2MAN0
	lda #$01
	sta :FP2MAN1
	lda #$5E
	sta :FP2MAN2
	lda #$3A
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda #$D3
	sta :FP1MAN0
	lda #$59
	sta :FP1MAN1
	lda #$A3
	sta :FP1MAN2
	lda #$3C
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$DE
	sta :FP2MAN0
	lda #$4D
	sta :FP2MAN1
	lda #$6F
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 1935

	lda I
	and #$02
	cmp #$02
	jne l_029D
	lda RESULT+3
	eor #$80
	sta RESULT+3
l_029D
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$002A
SC	= DATAORIGIN+$002E
RESULT	= DATAORIGIN+$002F
I	= DATAORIGIN+$0033

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 1949

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$00
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0034
RESULT	= DATAORIGIN+$0038

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 1963

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$01
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$003C
RESULT	= DATAORIGIN+$0040

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000043  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000045  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0044
RESULT	= DATAORIGIN+$0045

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_02DD

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_02EB
l_02DD

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_02EB
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0046
RESULT	= DATAORIGIN+$0048

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$004A
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$004B
GETCOLOR	= DATAORIGIN+$004C
VIDEORAM	= DATAORIGIN+$004D
adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$004F
LASTARCCOORDS.Y	= DATAORIGIN+$0051
LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
LASTARCCOORDS.XEND	= DATAORIGIN+$0057
LASTARCCOORDS.YEND	= DATAORIGIN+$0059
WIN_LEFT	= DATAORIGIN+$005B
WIN_RIGHT	= DATAORIGIN+$005D
WIN_TOP	= DATAORIGIN+$005F
WIN_BOTTOM	= DATAORIGIN+$0061
SCANLINE_WIDTH	= DATAORIGIN+$0063
CURRENTX	= DATAORIGIN+$0064
CURRENTY	= DATAORIGIN+$0066

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000100  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000101  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
	sta B

; -------------------  ASM Block 00000113  -------------------

	fxs FX_MEMS b

; ------------------------------------------------------------

B	= DATAORIGIN+$007C

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READVBXEMEMORYBYTE				; FUNCTION

; optimize OK (vbxe_memorystream.inc), line = 20

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 21

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 23

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 25

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda (:bp),y
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 27

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
@exit

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$007D
RESULT	= DATAORIGIN+$007F
BNK	= DATAORIGIN+$0080
ADR	= DATAORIGIN+$0081

@VarData	= POSITION
@VarDataSize	= 5

	rts						; ret
.endl

.local	WRITEVBXEMEMORYBYTE				; PROCEDURE

; optimize OK (vbxe_memorystream.inc), line = 39

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 40

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 42

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 44

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda A
	sta (:bp),y

; optimize OK (vbxe_memorystream.inc), line = 46

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$0083
A	= DATAORIGIN+$0085
BNK	= DATAORIGIN+$0086
ADR	= DATAORIGIN+$0087

@VarData	= POSITION
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 124

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 125

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 127

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 129

	lda BUFFER
	sta SRC
	lda BUFFER+1
	sta SRC+1

; optimize OK (vbxe_memorystream.inc), line = 131

	lda #$00
	sta I
	sta I+1
	lda COUNT
	sub #$01
	sta @FORTMP_040C_0
	lda COUNT+1
	sbc #$00
	sta @FORTMP_040C_1

l_040F
; --- ForToDoCondition
	lda @FORTMP_040C_1::#$00
	cmp I+1
	bne @+
	lda @FORTMP_040C_0::#$00
	cmp I
@
	jcc l_041B

; optimize OK (vbxe_memorystream.inc), line = 133

	mwy SRC :bp2
	ldy #$00
	lda (:bp2),y
	ldy ADR+1
	sty :bp+1
	ldy ADR
	sta (:bp),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 135

	inc ADR
	sne
	inc ADR+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 136

	inc SRC
	sne
	inc SRC+1

; optimize OK (vbxe_memorystream.inc), line = 138

	lda ADR+1
	cmp #$C0
	jcc l_043A
	bne @+
	lda ADR
	jcc l_043A
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 139

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 140

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 141

	lda #$00
	sta ADR
	lda #$B0
	sta ADR+1
l_043A

; --- ForToDoEpilog
	inc I
	jne l_040F
	inc I+1
	jne l_040F
l_041B

; optimize OK (vbxe_memorystream.inc), line = 146

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 148

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
BUFFER	= DATAORIGIN+$0097
COUNT	= DATAORIGIN+$0099
POSITION	= DATAORIGIN+$009B
SIZE	= DATAORIGIN+$009D
BNK	= DATAORIGIN+$009F
ADR	= DATAORIGIN+$00A0
I	= DATAORIGIN+$00A2
SRC	= DATAORIGIN+$00A4

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 17

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 158

	lda POSITION
	sta READVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta READVBXEMEMORYBYTE.POSITION+1
	jsr READVBXEMEMORYBYTE
	lda READVBXEMEMORYBYTE.RESULT
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 160

	lda #$00
	jsr VBXEMEMORYBANK
@exit

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
RESULT	= DATAORIGIN+$00AA
POSITION	= DATAORIGIN+$00AB
SIZE	= DATAORIGIN+$00AD

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 6

	rts						; ret
.endl

.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 198

	lda POSITION
	sta WRITEVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta WRITEVBXEMEMORYBYTE.POSITION+1
	lda B
	sta WRITEVBXEMEMORYBYTE.A
	jsr WRITEVBXEMEMORYBYTE

; optimize OK (vbxe_memorystream.inc), line = 200

	lda #$00
	jsr VBXEMEMORYBANK

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
B	= DATAORIGIN+$00B9
POSITION	= DATAORIGIN+$00BA
SIZE	= DATAORIGIN+$00BC

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 239

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 240

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000114  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 292

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 293

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
POSITION	= DATAORIGIN+$00C8
SIZE	= DATAORIGIN+$00CA
ADR	= DATAORIGIN+$00CC
SIZ	= DATAORIGIN+$00D0

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000123  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_04B1
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_04B1
	cmp #$1F
	jne l_04C0

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_04C0
	cmp #$18
	jne l_04CF

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_04CF

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000124  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$00D4
S	= DATAORIGIN+$00D5
@CASETMP_0005	= DATAORIGIN+$00D7

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$00D8

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000126  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$00D9
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000130  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$00DD

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0074
VRAM.SIZE	= DATAORIGIN+$0078
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00F3

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00F5
B	= DATAORIGIN+$00F7

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSERESET					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 80

	lda #$01
	sta RESULT

; optimize OK (arkanoid_vbxe.pas), line = 82

	sta MOUS.FIRE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00F9

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 90

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 92

	sta @CASETMP_0007
	cmp #$0B
	jne l_052D
@

; optimize OK (arkanoid_vbxe.pas), line = 93

	lda MOUS.LEFT
	cmp MOUS.X
	lda MOUS.LEFT+1
	sbc MOUS.X+1
	svc
	eor #$80
	jpl l_053F
	lda MOUS.X
	sub #$04
	sta MOUS.X
	scs
	dec MOUS.X+1
l_053F
	jmp a_0007
l_052D
	cmp #$07
	jne l_054A

; optimize OK (arkanoid_vbxe.pas), line = 94

	lda MOUS.X
	cmp MOUS.RIGHT
	lda MOUS.X+1
	sbc MOUS.RIGHT+1
	svc
	eor #$80
	jpl l_055C
	lda MOUS.X
	add #$04
	sta MOUS.X
	scc
	inc MOUS.X+1
l_055C
l_054A
a_0007

; optimize OK (arkanoid_vbxe.pas), line = 97

	mwy X :bp2
	ldy #$00
	lda MOUS.X
	sta (:bp2),y
	iny
	lda MOUS.X+1
	sta (:bp2),y

; ------------------------------------------------------------

X	= DATAORIGIN+$00FA
Y	= DATAORIGIN+$00FC
A	= DATAORIGIN+$00FE
@CASETMP_0007	= DATAORIGIN+$00FF

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSE_X_LIMIT					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 104

	lda MN
	sta MOUS.LEFT
	lda MN+1
	sta MOUS.LEFT+1

; optimize OK (arkanoid_vbxe.pas), line = 105

	lda MX
	sta MOUS.RIGHT
	lda MX+1
	sta MOUS.RIGHT+1

; ------------------------------------------------------------

MN	= DATAORIGIN+$0100
MX	= DATAORIGIN+$0102

@VarData	= MN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSEMOVE					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 120

	lda X
	sta MOUS.X
	lda X+1
	sta MOUS.X+1

; optimize OK (arkanoid_vbxe.pas), line = 121

	lda Y
	sta MOUS.Y
	lda Y+1
	sta MOUS.Y+1

; ------------------------------------------------------------

X	= DATAORIGIN+$0104
Y	= DATAORIGIN+$0106

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000141  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 301

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 302

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 303

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 305

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 306

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 307

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 309

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 310

	lda W
	sub #$01
	sta BLT.SRC_STEP_Y
	lda W+1
	sbc #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 312

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 313

	lda W
	sub #$01
	sta BLT.DST_STEP_Y
	lda W+1
	sbc #$00
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 315

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 316

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 318

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 320

	lda #$00
	sta BLT.BLT_ZOOM

; optimize OK (service.pas), line = 322

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000142  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 328

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$050D
DST	= DATAORIGIN+$0511
W	= DATAORIGIN+$0515
H	= DATAORIGIN+$0517

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000143  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 344

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 345

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 346

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 348

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 349

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 350

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 352

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 353

	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 355

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 356

	sta BLT.DST_STEP_Y
	lda #$00
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 358

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 359

	lda #$00
	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 361

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 362

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000144  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 369

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0518
DST	= DATAORIGIN+$051C
SIZE	= DATAORIGIN+$0520
I	= DATAORIGIN+$0522

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTMP						; PROCEDURE

; optimize OK (service.pas), line = 381

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 383

	lda TMP
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda TMP+1
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda SIZE
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER

; ------------------------------------------------------------

DST	= DATAORIGIN+$0524
SIZE	= DATAORIGIN+$0528
X	= DATAORIGIN+$0529

@VarData	= DST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000145  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 399

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 400

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 401

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 403

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 404

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 405

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 407

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 408

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 410

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 411

	lda #$00
	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 413

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 414

	lda #$00
	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 416

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 418

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000146  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 424

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$052A
DST	= DATAORIGIN+$052E
SIZE	= DATAORIGIN+$0532
X	= DATAORIGIN+$0534

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBYTE					; PROCEDURE

; optimize OK (service.pas), line = 435

	lda SRC
	sta VBXE_RAM.POSITION
	lda SRC+1
	sta VBXE_RAM.POSITION+1
	lda SRC+2
	sta VBXE_RAM.POSITION+2
	lda SRC+3
	sta VBXE_RAM.POSITION+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 436

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
	lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
	sta A

; optimize OK (service.pas), line = 438

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 439

	lda A
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0536
DST	= DATAORIGIN+$053A
A	= DATAORIGIN+$053E

@VarData	= SRC
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (service.pas), line = 449

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 450

	lda V
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

DST	= DATAORIGIN+$053F
V	= DATAORIGIN+$0543

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (service.pas), line = 460

	lda SRC
	sta VBXE_RAM.POSITION
	lda SRC+1
	sta VBXE_RAM.POSITION+1
	lda SRC+2
	sta VBXE_RAM.POSITION+2
	lda SRC+3
	sta VBXE_RAM.POSITION+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 461

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
	lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0544
RESULT	= DATAORIGIN+$0548

@VarData	= SRC
@VarDataSize	= 4

	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0549

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 587

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_06ED
	lda A
	sta RESULT
	lda A+1
	jmp l_06FC
l_06ED

; optimize OK (service.pas), line = 588

	lda B
	sta RESULT
	lda B+1
l_06FC
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$054B
B	= DATAORIGIN+$054D
RESULT	= DATAORIGIN+$054F

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 594

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_0717
	lda A
	sta RESULT
	lda A+1
	jmp l_0726
l_0717

; optimize OK (service.pas), line = 595

	lda B
	sta RESULT
	lda B+1
l_0726
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0551
B	= DATAORIGIN+$0553
RESULT	= DATAORIGIN+$0555

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 604

	sta STATUS

; -------------------  ASM Block 00000147  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$0557

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 652

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 654

	sta Y

l_0746
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_0766

; optimize OK (service.pas), line = 657

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_0777
l_0766

; optimize OK (service.pas), line = 659

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_0777
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 661

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_0746
l_0754

; ------------------------------------------------------------

Y	= DATAORIGIN+$0558

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 677

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_079B

; optimize FAIL ('@print', service.pas), line = 678

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_079B

; optimize OK (service.pas), line = 682

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 683

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 685

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 687

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 688

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 690

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 691

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 692

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 694

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 700

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 744

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 745

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 747

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 749

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_07EE

; optimize OK (service.pas), line = 751

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 752

	lda adr.WALL,y
	cmp #$0A
	jeq l_080E
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_080E

; optimize OK (service.pas), line = 754

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 755

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 756

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 758

	lda #$00
	sta Y

l_083E
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_084C

; optimize OK (service.pas), line = 760

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 763

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_083E
l_084C
l_07EE

; optimize FAIL (0, service.pas), line = 767

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 768

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0893
	lda #$00
	sta SHINEREC.ACTIVE
l_0893

; ------------------------------------------------------------

XB	= DATAORIGIN+$0559
YB	= DATAORIGIN+$055B
FRAME	= DATAORIGIN+$055D
XF	= DATAORIGIN+$055F
YF	= DATAORIGIN+$0561
FR	= DATAORIGIN+$0563
OG	= DATAORIGIN+$0565
Y	= DATAORIGIN+$0567
I	= DATAORIGIN+$0568

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 777

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 778

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 785

	lda SHINEREC.ACTIVE
	jeq l_08B3
	jsr UNSHINE_BLOCK
l_08B3

; optimize OK (service.pas), line = 787

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 788

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 789

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 790

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 791

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0569
YB	= DATAORIGIN+$056A

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 797

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_08F4
	jsr SHINE_BLOCK
l_08F4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_08FD

; optimize OK (service.pas), line = 805

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 806

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 807

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_090B

; optimize FAIL (0, service.pas), line = 812

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 813

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 816

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_090B

; optimize OK (service.pas), line = 820

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.LAST
	sta :STACKORIGIN+10
	ldy #$00
	lda LETT.LAST+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp :STACKORIGIN+STACKWIDTH*3+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
@
	jeq l_08FD

; optimize OK (service.pas), line = 822

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$056B
RN	= DATAORIGIN+$056D
SUM	= DATAORIGIN+$056F
LETTER	= DATAORIGIN+$0571

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 831

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 833

	lda #$00
	sta YL

l_095B
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_0969

; optimize OK (service.pas), line = 835

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FW+1
	lda :STACKORIGIN+9
	sta FW

; optimize OK (service.pas), line = 837

	lda LETT.Y
	add YL
	tay
	lda LETT.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda LETTERS.OFS
	add FW
	sta :STACKORIGIN+11
	lda LETTERS.OFS+1
	adc FW+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda LETTERS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda LETTERS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add FL
	sta BLITZERO.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc FL+1
	sta BLITZERO.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITZERO.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITZERO.SRC+3
	lda #$10
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YL
	jne l_095B
l_0969

; ------------------------------------------------------------

FL	= DATAORIGIN+$0573
FW	= DATAORIGIN+$0575
YL	= DATAORIGIN+$0577

@VarData	= FL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 849

	lda #$00
	sta YL

l_09A7
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_09B5

; optimize OK (service.pas), line = 851

	lda LETT.Y
	adc YL
	tay
	lda LETT.X
	add adr.ROW,y
	sta AD
	lda #$00
	adc adr.ROW+256,y
	sta AD+1

; optimize OK (service.pas), line = 852

	cmp #$FA
	jcs l_09DA

; optimize OK (service.pas), line = 855

	lda AD
	sta BLITROW.DST
	lda #$50
	add AD+1
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add AD
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc AD+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_09DA

; --- ForToDoEpilog
	inc YL
	jne l_09A7
l_09B5

; ------------------------------------------------------------

AD	= DATAORIGIN+$0578
YL	= DATAORIGIN+$057A

@VarData	= AD
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 863

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 864

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 870

	lda LETT.ACTIVE
	jeq l_0A09
	jsr DISABLE_LETTER
l_0A09

; optimize OK (service.pas), line = 872

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 873

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 874

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 875

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 876

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 877

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$057B
YL	= DATAORIGIN+$057D
LETTER	= DATAORIGIN+$057F

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 883

	lda LETT.ACTIVE
	jeq l_0A38

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 885

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 886

	inc LETT.Y

; optimize OK (service.pas), line = 887

	lda LETT.Y
	cmp #$C8
	jcc l_0A50
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 888
	jmp l_0A5B
l_0A50

; optimize FAIL ('PUT_LETTER', service.pas), line = 890

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 891

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 892

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0A72

; optimize OK (service.pas), line = 894

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 895

	inc LETT.FRAME
l_0A72

; optimize OK (service.pas), line = 898

	lda LETT.FRAME
	cmp #$08
	jne l_0A8F
	lda #$00
	sta LETT.FRAME
l_0A8F

; optimize OK (service.pas), line = 900

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0AE8
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0AE8
	jeq l_0AE8
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0AE8
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0AE8
	jeq l_0AE8
@

; optimize OK (service.pas), line = 903

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 904

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 905

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0A5B

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 906

	jsr DISABLE_LETTER
l_0AE8

; optimize OK (service.pas), line = 910

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0B09
l_0A38

; optimize OK (service.pas), line = 912

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0B1A

; optimize OK (service.pas), line = 913

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0B09
l_0B1A

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 923

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0581	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0581
BTM.HEIGHT	= DATAORIGIN+$0583
BTM.OFS	= DATAORIGIN+$0585
X	= DATAORIGIN+$0589
Y	= DATAORIGIN+$058B
OFST	= DATAORIGIN+$058D

@VarData	= BTM.WIDTH
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPALETTE					; PROCEDURE

; ------------------------------------------------------------

BTM	= DATAORIGIN+$058F
BTM.WIDTH	= DATAORIGIN+$0000
BTM.HEIGHT	= DATAORIGIN+$0002
BTM.OFS	= DATAORIGIN+$0004

@VarData	= BTM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1018

	lda #$00
	sta YP

l_0B43
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0B51

; optimize OK (service.pas), line = 1020

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+10
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta ADR
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta ADR+1

; optimize OK (service.pas), line = 1023

	lda ADR
	sta BLITZERO.DST
	lda #$50
	add ADR+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda YP
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add YP
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda BALLDATA.OFS
	add :STACKORIGIN+12
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YP
	jne l_0B43
l_0B51

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0593
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$0597
ADR	= DATAORIGIN+$0598

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1037

	lda #$00
	sta YP

l_0B90
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0B9E

; optimize OK (service.pas), line = 1039

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+10
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta TEMP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta TEMP+1

; optimize OK (service.pas), line = 1041

	ora TEMP
	jeq l_0BD4
	lda TEMP+1
	cmp #$FA
	jcs l_0BD4

; optimize OK (service.pas), line = 1044

	lda TEMP
	sta BLITROW.DST
	lda #$50
	add TEMP+1
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add TEMP
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc TEMP+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$05
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_0BD4

; --- ForToDoEpilog
	inc YP
	jne l_0B90
l_0B9E

; ------------------------------------------------------------

BALL	= DATAORIGIN+$059A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$059E
TEMP	= DATAORIGIN+$059F

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1067

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1077

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+9
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	bne @+
	dey
@
	sty :STACKORIGIN+10
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+12
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+12
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+11
	cmp :STACKORIGIN+STACKWIDTH+12
	bne @+
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+12
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_0C27

; optimize OK (service.pas), line = 1079

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0C27

; optimize OK (service.pas), line = 1081

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1083

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1084

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05A1
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1094

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1095

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize FAIL (1, service.pas), line = 1097

	inx
	mva SPEED :STACKORIGIN,x
	mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
	lda SX
	sta :ecx
	sta :ztmp8
	lda SX+1
	sta :ecx+1
	sta :ztmp9
	lda SX
	sta :eax
	sta :ztmp10
	lda SX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda SY
	sta :ecx
	sta :ztmp8
	lda SY+1
	sta :ecx+1
	sta :ztmp9
	lda SY
	sta :eax
	sta :ztmp10
	lda SY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
	mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH,x
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3
	dex

; optimize OK (service.pas), line = 1102

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1103

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05A5
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
SPEED	= DATAORIGIN+$05A9
SX	= DATAORIGIN+$05AB
SY	= DATAORIGIN+$05AD
VM	= DATAORIGIN+$05AF

@VarData	= BALL
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1110

	lda ANGLE
	sta :FPMAN0
	ldy #$00
	lda ANGLE+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$C3
	sta :FP2MAN0
	lda #$F5
	sta :FP2MAN1
	lda #$48
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1
	lda :FPMAN2
	sta W+2
	lda :FPMAN3
	sta W+3

; optimize FAIL (1, service.pas), line = 1112

	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.COS.@01018F000.X
	lda W+1
	sta SYSTEM.COS.@01018F000.X+1
	lda W+2
	sta SYSTEM.COS.@01018F000.X+2
	lda W+3
	sta SYSTEM.COS.@01018F000.X+3
	jsr SYSTEM.COS.@01018F000
	inx
	mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH,x
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FMUL
	dex
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	lda :FPMAN0
	sta :STACKORIGIN,x
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y

; optimize FAIL (1, service.pas), line = 1113

	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.SIN.@01018F000.X
	lda W+1
	sta SYSTEM.SIN.@01018F000.X+1
	lda W+2
	sta SYSTEM.SIN.@01018F000.X+2
	lda W+3
	sta SYSTEM.SIN.@01018F000.X+3
	jsr SYSTEM.SIN.@01018F000
	inx
	mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH,x
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FMUL
	dex
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	lda :FPMAN0
	sta :STACKORIGIN,x
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05B3
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
ANGLE	= DATAORIGIN+$05B7
W	= DATAORIGIN+$05B9

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1121

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0CAF
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0CCB
l_0CAF

; optimize OK (service.pas), line = 1127

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1129

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.VALUE
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.VALUE+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.VALUE+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$C3
	sta :FP2MAN0
	lda #$F5
	sta :FP2MAN1
	lda #$48
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1131

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1133

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0CFA
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0CFA

; optimize OK (service.pas), line = 1135

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01
	sta W+1

; optimize OK (service.pas), line = 1136

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda W
	sta @SMALLINT.MOD.A
	lda W+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta W
	lda @SMALLINT.MOD.RESULT+1
	sta W+1
l_0CCB

; optimize OK (service.pas), line = 1139

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05BD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
RESULT	= DATAORIGIN+$05C1
W	= DATAORIGIN+$05C3

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1148

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	ldy #BALL.X-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1154

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1159

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1160

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1162

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1164

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1165

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05C5
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1A
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1175

	lda BALL.SPEEDX
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDX+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDX
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda BALL.SPEEDY
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDY+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDY
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta I+3

; optimize OK (service.pas), line = 1177

	lda I
	sta SYSTEM.SQRT.@010185000.X
	lda I+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda I+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda I+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	lda SYSTEM.SQRT.@010185000.RESULT
	sta F_HLP
	lda SYSTEM.SQRT.@010185000.RESULT+1
	sta F_HLP+1
	lda SYSTEM.SQRT.@010185000.RESULT+2
	sta F_HLP+2
	lda SYSTEM.SQRT.@010185000.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 1179

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$05C9	; [27] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$05C9
BALL.Y	= DATAORIGIN+$05CB
BALL.FINEX	= DATAORIGIN+$05CD
BALL.FINEY	= DATAORIGIN+$05CF
BALL.OLDX	= DATAORIGIN+$05D1
BALL.OLDY	= DATAORIGIN+$05D3
BALL.SPEED	= DATAORIGIN+$05D5
BALL.FINESPEED	= DATAORIGIN+$05D7
BALL.SPEEDX	= DATAORIGIN+$05D9
BALL.SPEEDY	= DATAORIGIN+$05DB
BALL.SBD	= DATAORIGIN+$05DD
BALL.BRWHIT	= DATAORIGIN+$05DF
BALL.INPLAY	= DATAORIGIN+$05E0
BALL.LAUNCH	= DATAORIGIN+$05E1
BALL.ONVAUS	= DATAORIGIN+$05E2
BALL.STM	= DATAORIGIN+$05E3
RESULT	= DATAORIGIN+$05E4
I	= DATAORIGIN+$05E6

@VarData	= BALL.X
@VarDataSize	= 31

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1194

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1195

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1197

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1198

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1200

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1201

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1207

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0DBE

; optimize OK (service.pas), line = 1209

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1210

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1211

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1212

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0DBE

; optimize OK (service.pas), line = 1217

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0DF3

; optimize OK (service.pas), line = 1219

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1220

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1221

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1222

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0DF3

; optimize OK (service.pas), line = 1227

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0E28

; optimize OK (service.pas), line = 1229

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1230

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1231

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1232

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0E28

; optimize OK (service.pas), line = 1240

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0E77

; optimize OK (service.pas), line = 1244

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0EA6
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jcs l_0EA6
@

; optimize OK (service.pas), line = 1247

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1249

	lda VAUS.LETTER
	cmp #$06
	jne l_0ECA
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0ECA

; optimize OK (service.pas), line = 1251

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1252

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1253

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sub VAUS.X
	ldy #BALL.ONVAUS-DATAORIGIN
	sta (:bp2),y
l_0ECA

; optimize OK (service.pas), line = 1256

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1260

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0EFA

; optimize OK (service.pas), line = 1263

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1267

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1275

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1280

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0EFA

; optimize OK (service.pas), line = 1286

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0F3B
	jeq l_0F3B

; optimize OK (service.pas), line = 1288

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1289

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1290

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1291

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F3B
l_0EA6
l_0E77

; optimize OK (service.pas), line = 1303

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0F8A

; optimize OK (service.pas), line = 1305

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1307

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0F8A

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05EA
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$05EE
Y	= DATAORIGIN+$05F0
ANGLE	= DATAORIGIN+$05F2

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1314

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1315

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1316

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1321

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1322

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1324

	lda #$FF
	sta VAUS.OLDX
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1325

	sta VAUS.OLDY
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1326

	lda #$00
	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1330

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1334

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1335

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1336

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1337

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1344

	lda #$D8
	sub VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda #$0A
	sta MOUSE_X_LIMIT.MN
	lda #$00
	sta MOUSE_X_LIMIT.MN+1
	lda :STACKORIGIN+9
	sta MOUSE_X_LIMIT.MX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MOUSE_X_LIMIT.MX+1
	jsr MOUSE_X_LIMIT

; optimize OK (service.pas), line = 1345

	lda #$BE
	sta MOUSEMOVE.X
	lda #$00
	sta MOUSEMOVE.X+1
	lda #$B8
	sta MOUSEMOVE.Y
	lda #$00
	sta MOUSEMOVE.Y+1
	jsr MOUSEMOVE

; optimize OK (service.pas), line = 1346

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1347

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1361

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1363

	lda VAUS.HEIGHT
	sta Y
	jmp l_1013f
l_1013
; --- ForToDoCondition
	dec Y
l_1013f
	lda HLP
	sta BLITROW.DST
	lda #$50
	add HLP+1
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda VAUS.OLDLEN
	sta BLITROW.SIZE
	lda VAUS.OLDLEN+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; optimize OK (service.pas), line = 1366

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	lda Y
	jne l_1013
l_1021

; optimize OK (service.pas), line = 1369

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; ------------------------------------------------------------

Y	= DATAORIGIN+$05F4

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1378

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1380

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_1056

; optimize FAIL (0, service.pas), line = 1382

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1383

	lda #$00
	sta VAUS.IFLASH
l_1056

; optimize OK (service.pas), line = 1386

	lda VAUS.FLASH
	cmp #$0B
	jcc l_1073
	lda #$00
	sta VAUS.FLASH
l_1073

; optimize OK (service.pas), line = 1396

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 1398

	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_108A_0

l_108D
; --- ForToDoCondition
	lda @FORTMP_108A_0::#$00
	cmp Y
	jcc l_109B

; optimize OK (service.pas), line = 1404

	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	add HLP
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	adc HLP+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; optimize OK (service.pas), line = 1406

	lda Y
	cmp #$02
	jcc l_10DE
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_10DE

; optimize OK (service.pas), line = 1409

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (service.pas), line = 1412

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$50
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add VAUS.Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_10DE

; optimize OK (service.pas), line = 1415

	lda HLP
	add VAUS.WIDTH
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_108D
l_109B

; ------------------------------------------------------------

Y	= DATAORIGIN+$05F5

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1425

	ldy #1
	lda VAUS.OLDX+1
	cmp #$FF
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_115A

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1426

	jsr REMOVE_VAUS
l_115A

; optimize OK (service.pas), line = 1428

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1429

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1436

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1437

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1439

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$05F7
Y	= DATAORIGIN+$05F9

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1453

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1454

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1456

	lda #$00
	sta Y

l_11B2
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_11C0

; optimize OK (service.pas), line = 1458

	lda YS
	adc Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (service.pas), line = 1466

	lda #$00
	sta X

l_11DC
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_11EA

; optimize OK (service.pas), line = 1467

	adc XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_1201

; optimize OK (service.pas), line = 1473

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add XS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1477

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$C4
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda PATTERN.OFS
	add (:bp),y
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YH
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YH+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex

; optimize OK (service.pas), line = 1481

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$50
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1486

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add XS
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1201

; --- ForToDoEpilog
	inc X
	jne l_11DC
l_11EA

; --- ForToDoEpilog
	inc Y
	jne l_11B2
l_11C0

; optimize OK (service.pas), line = 1496

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_129B_0

l_129E
; --- ForToDoCondition
	lda @FORTMP_129B_0::#$00
	cmp Y
	jcc l_12AC

; optimize OK (service.pas), line = 1497

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_12BC_0

l_12BF
; --- ForToDoCondition
	lda @FORTMP_12BC_0::#$00
	cmp X
	jcc l_12CD

; optimize OK (service.pas), line = 1513

	lda X
	cmp #$D8
	jcs l_12DF

; optimize OK (service.pas), line = 1517

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy Y
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	ora #$80
	sta CL

; optimize OK (service.pas), line = 1521

	ldy Y
	lda X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1526

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_12DF

; --- ForToDoEpilog
	inc X
	jne l_12BF
l_12CD

; --- ForToDoEpilog
	inc Y
	jne l_129E
l_12AC

; ------------------------------------------------------------

XA	= DATAORIGIN+$05FB
YA	= DATAORIGIN+$05FC
X	= DATAORIGIN+$05FD
Y	= DATAORIGIN+$05FE
XS	= DATAORIGIN+$05FF
YS	= DATAORIGIN+$0601
YH	= DATAORIGIN+$0603
CL	= DATAORIGIN+$0605
SHADOW	= DATAORIGIN+$0606

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1541

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1542

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1544

	lda #$00
	sta Y

l_1352
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_1360

; optimize OK (service.pas), line = 1545

	lda #$00
	sta X

l_1369
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_1377

; optimize OK (service.pas), line = 1550

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS
	add Y
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1552

	lda Y
	cmp #$07
	jcs l_13B6
	lda X
	cmp #$0F
	jcs l_13B6

; optimize OK (service.pas), line = 1557

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1560

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1563

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	jmp l_1415
l_13B6

; optimize OK (service.pas), line = 1571

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1574

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
l_1415
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_1369
l_1377

; --- ForToDoEpilog
	inc Y
	jne l_1352
l_1360

; optimize OK (service.pas), line = 1579

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1469_0

l_146C
; --- ForToDoCondition
	lda @FORTMP_1469_0::#$00
	cmp Y
	jcc l_147A

; optimize OK (service.pas), line = 1580

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_148A_0

l_148D
; --- ForToDoCondition
	lda @FORTMP_148A_0::#$00
	cmp X
	jcc l_149B

; optimize OK (service.pas), line = 1581

	lda X
	cmp #$D8
	jcs l_14AD

; optimize OK (service.pas), line = 1588

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy Y
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$7F
	sta CL

; optimize OK (service.pas), line = 1592

	ldy Y
	lda X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1596

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_14AD

; --- ForToDoEpilog
	inc X
	jne l_148D
l_149B

; --- ForToDoEpilog
	inc Y
	jne l_146C
l_147A

; optimize OK (service.pas), line = 1599

	lda BLOCK
	cmp #$09
	jcc l_1509

; optimize OK (service.pas), line = 1601

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1602

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_1524

; optimize OK (service.pas), line = 1604

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1605

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_1543
l_1524

; optimize OK (service.pas), line = 1611

	lda BLOCK
	cmp #$0A
	jne l_1555
	lda #$C9
	sta CL2
l_1543
l_1555

; optimize OK (service.pas), line = 1615

	lda #$00
	sta Y

l_1565
; --- ForToDoCondition
	lda Y
	cmp #$07
	jcs l_1573

; optimize OK (service.pas), line = 1621

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1623

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1627

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1631

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_1565
l_1573

; optimize OK (service.pas), line = 1635

	lda #$00
	sta X

l_15DA
; --- ForToDoCondition
	lda X
	cmp #$0F
	jcs l_15E8

; optimize OK (service.pas), line = 1639

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy YS
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1641

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1644

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YS
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1647

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YS
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_15DA
l_15E8
l_1509

; ------------------------------------------------------------

XA	= DATAORIGIN+$0609
YA	= DATAORIGIN+$060A
BLOCK	= DATAORIGIN+$060B
X	= DATAORIGIN+$060C
Y	= DATAORIGIN+$060D
XS	= DATAORIGIN+$060E
YS	= DATAORIGIN+$0610
CL	= DATAORIGIN+$0612
CL2	= DATAORIGIN+$0613
SHADOW	= DATAORIGIN+$0614

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1657

	lda #$00
	sta Y

l_1655
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_1663

; optimize OK (service.pas), line = 1658

	lda #$00
	sta X

l_166C
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_167A

; optimize OK (service.pas), line = 1659

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1699
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_1699

; --- ForToDoEpilog
	inc X
	jne l_166C
l_167A

; --- ForToDoEpilog
	inc Y
	jne l_1655
l_1663

; ------------------------------------------------------------

X	= DATAORIGIN+$0617
Y	= DATAORIGIN+$0618

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1668

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1669

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1672

	lda #$00
	sta Y

l_16D7
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_16E5

; optimize OK (service.pas), line = 1673

	lda #$00
	sta X

l_16EE
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_16FC

; optimize OK (service.pas), line = 1676

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1734
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_1734
	inc REMAIN_BLK
l_1734

; --- ForToDoEpilog
	inc X
	jne l_16EE
l_16FC

; --- ForToDoEpilog
	inc Y
	jne l_16D7
l_16E5

; optimize OK (service.pas), line = 1678

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1680

	sta @CASETMP_0008
	cmp #$00
	jne l_175E
@

; optimize OK (service.pas), line = 1681

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_175E
	cmp #$01
	jne l_1767

; optimize OK (service.pas), line = 1682

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_1767
	cmp #$02
	jne l_1770

; optimize OK (service.pas), line = 1683

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_1770
	cmp #$03
	jne l_1779

; optimize OK (service.pas), line = 1684

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1779
	cmp #$04
	jne l_1782

; optimize OK (service.pas), line = 1685

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_1782
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$0619
Y	= DATAORIGIN+$061A
WL	= DATAORIGIN+$061B
@CASETMP_0008	= DATAORIGIN+$061C

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1724

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1725

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1726

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1727

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1729

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1731

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1732

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1733

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1734

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1736

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1737

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1738

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1739

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1741

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1742

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1743

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1744

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1751

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_180B

; optimize OK (service.pas), line = 1752

	lda #$01
	jsr FATAL_ERROR
l_180B

; optimize OK (service.pas), line = 1755

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_182Ex
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_182E
l_182Ex

; optimize OK (service.pas), line = 1757

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_1841

; optimize OK (service.pas), line = 1759

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_184E
l_184F

; optimize OK (service.pas), line = 1763

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1764

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1766

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1768

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_1886

; optimize OK (service.pas), line = 1770

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1771

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_1886

; optimize OK (service.pas), line = 1774

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_18A5

; optimize OK (service.pas), line = 1776

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1777

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_18A5
l_184E

; optimize OK (service.pas), line = 1761

	lda YN
	and #$07
	jeq l_184Fw
	lda YN
	and #$07
	cmp #$07
	jne l_184F
l_184Fw
l_1841

; optimize OK (service.pas), line = 1783

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_18E4

; optimize OK (service.pas), line = 1785

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_18F1
l_18F2

; optimize OK (service.pas), line = 1789

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1790

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1792

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1794

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_1929

; optimize OK (service.pas), line = 1796

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1797

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_1929

; optimize OK (service.pas), line = 1800

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_1948

; optimize OK (service.pas), line = 1802

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1803

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_1948
l_18F1

; optimize OK (service.pas), line = 1787

	lda XJ
	and #$0F
	jeq l_18F2w
	lda XJ
	and #$0F
	cmp #$0F
	jne l_18F2
l_18F2w
l_18E4

; optimize OK (service.pas), line = 1814

	lda COLLISION
	cmp #$01
	jne l_1987
; optimize OK (service.pas), line = 1816
; optimize OK (service.pas), line = 1817
	jmp l_199B
l_1987

; optimize OK (service.pas), line = 1819

	lda COLLISION
	cmp #$02
	jne l_19AD

; optimize OK (service.pas), line = 1821

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1822

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_19C1
l_19AD

; optimize OK (service.pas), line = 1824

	lda COLLISION
	cmp #$03
	jne l_19D3

; optimize OK (service.pas), line = 1826

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1827

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_199B

; optimize OK (service.pas), line = 1828

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1829

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_19C1
	sta (:bp2),y
l_19D3
	jmp l_19F3
l_182E

; optimize OK (service.pas), line = 1834

	lda #$02
	jsr FATAL_ERROR
l_19F3

; optimize OK (service.pas), line = 1837

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1838

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1839

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1840

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1843

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1844

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1851

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$061D
Y1	= DATAORIGIN+$061F
X2	= DATAORIGIN+$0621
Y2	= DATAORIGIN+$0623
RESULT	= DATAORIGIN+$0625
X	= DATAORIGIN+$0626
Y	= DATAORIGIN+$0628
XK	= DATAORIGIN+$062A
YK	= DATAORIGIN+$062C
XJ	= DATAORIGIN+$062E
YJ	= DATAORIGIN+$0630
XH	= DATAORIGIN+$0632
YH	= DATAORIGIN+$0634
XN	= DATAORIGIN+$0636
YN	= DATAORIGIN+$0638
XP1	= DATAORIGIN+$063A
YP1	= DATAORIGIN+$063C
XP2	= DATAORIGIN+$063E
YP2	= DATAORIGIN+$0640
XP	= DATAORIGIN+$0642
YP	= DATAORIGIN+$0644
COLLISION	= DATAORIGIN+$0646

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1862

	lda XB+1
	jmi l_1A47
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1A47
	lda YB+1
	jmi l_1A47
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1A47

; optimize OK (service.pas), line = 1865

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1867

	tay
	lda adr.WALL,y
	jeq l_1A6B

; optimize OK (service.pas), line = 1869

	cmp #$0A
	jcs l_1A81

; optimize OK (service.pas), line = 1871

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1872

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1876

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1878

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1880

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1881

	lda YB
	sta :STACKORIGIN+9
	ldy #$00
	lda YB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1882

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1884

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1885

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1886

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1887

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1AD5
l_1A81

; optimize OK (service.pas), line = 1892

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1AEE

; optimize OK (service.pas), line = 1894

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1895

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1897

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1898

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1B08
l_1AEE

; optimize OK (service.pas), line = 1902

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1903

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1905

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1B08
l_1AD5
l_1A6B
l_1A47

; ------------------------------------------------------------

XB	= DATAORIGIN+$0647
YB	= DATAORIGIN+$0649
BALL	= DATAORIGIN+$064B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
I	= DATAORIGIN+$064F

@VarData	= XB
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1916

	lda XB+1
	jmi l_1B4B
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1B4B
	lda YB+1
	jmi l_1B4B
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1B4B

; optimize OK (service.pas), line = 1919

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1921

	tay
	lda adr.WALL,y
	jeq l_1B6F

; optimize OK (service.pas), line = 1923

	cmp #$0A
	jcs l_1B85

; optimize OK (service.pas), line = 1925

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1926

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1927

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1928

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1929

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1BAD
l_1B85

; optimize OK (service.pas), line = 1934

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1BC6

; optimize OK (service.pas), line = 1936

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1937

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1938

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1BDC
l_1BC6

; optimize OK (service.pas), line = 1942

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1943

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1BAD
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1BDC
l_1B6F
l_1B4B

; ------------------------------------------------------------

XB	= DATAORIGIN+$0650
YB	= DATAORIGIN+$0652
I	= DATAORIGIN+$0654

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1975

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 1977

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 1978

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 1981

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 1982

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 1984

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 1985

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 1989

	lda #$10
	sta :ecx
	sta :ztmp8
	lda YB
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	bit :ztmp10
	bpl @+
	sub :ztmp8
@
	bit :ztmp8
	bpl @+
	sub :ztmp10
@
	sta :eax+1
	lda :eax
	add XB
	tay
	lda adr.WALL,y
	jeq l_1C45

; optimize OK (service.pas), line = 1991

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 1997

	cmp #$03
	jne l_1C60

; optimize OK (service.pas), line = 1999

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	iny
	sub OX
	sub #$09
	sta LX

; optimize OK (service.pas), line = 2000

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	iny
	sub OY
	sub #$16
	sta LY

; optimize OK (service.pas), line = 2002

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2003

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2005

	lda LX
	sta :ecx
	sta :ztmp8
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	bit :ztmp10
	bpl @+
	sub :ztmp8
@
	bit :ztmp8
	bpl @+
	sub :ztmp10
@
	sta :eax+1
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LY
	sta :ecx
	sta :ztmp8
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	bit :ztmp10
	bpl @+
	sub :ztmp8
@
	bit :ztmp8
	bpl @+
	sub :ztmp10
@
	sta :eax+1
	lda :STACKORIGIN+9
	add :eax
	sta F1
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta F1+1

; optimize OK (service.pas), line = 2006

	lda MX
	sta :ecx
	sta :eax
	lda MX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MY
	sta :ecx
	sta :eax
	lda MY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (service.pas), line = 2008

	lda F1
	cmp F2
	lda F1+1
	sbc F2+1
	svc
	eor #$80
	jpl l_1CD7

; optimize OK (service.pas), line = 2014

	lda OX
	sta :STACKORIGIN+10
	ldy #$00
	lda OX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda :STACKORIGIN+10
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2015

	lda OY
	sta :STACKORIGIN+9
	ldy #$00
	lda OY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2018

	lda #$10
	sta :ecx
	sta :ztmp8
	lda YB
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	bit :ztmp10
	bpl @+
	sub :ztmp8
@
	bit :ztmp8
	bpl @+
	sub :ztmp10
@
	sta :eax+1
	lda :eax
	add XB
	tay
	lda adr.WALL,y
	jne l_1D15

; optimize OK (service.pas), line = 2020

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2021

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	jmp l_1D3D
l_1D15

; optimize OK (service.pas), line = 2025

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2026

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1D3D
	jmp l_1D50
l_1CD7

; optimize OK (service.pas), line = 2036

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2037

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2039

	lda #$10
	sta :ecx
	sta :ztmp8
	lda YB
	sta :eax
	sta :ztmp10
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	bit :ztmp10
	bpl @+
	sub :ztmp8
@
	bit :ztmp8
	bpl @+
	sub :ztmp10
@
	sta :eax+1
	lda :eax
	add XB
	tay
	lda adr.WALL,y
	jne l_1D8D

; optimize OK (service.pas), line = 2041

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2042

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2044

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2045

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
l_1D8D
l_1D50
l_1C60

; optimize OK (service.pas), line = 2051

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2052

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2056

	ldy #$00
	lda YB
	spl
	dey
	sty SHOOT_BLOCK.YB+1
	sta SHOOT_BLOCK.YB
	ldy #$00
	lda XB
	spl
	dey
	sty SHOOT_BLOCK.XB+1
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2058

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2059

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2071

	lda X
	jeq l_1E21
	cmp #$07
	jeq l_1E21
	lda Y
	jeq l_1E21
	cmp #$07
	jeq l_1E21

; optimize OK (service.pas), line = 2072

	lda #$03
	jsr FATAL_ERROR
l_1E21

; optimize OK (service.pas), line = 2087

	lda Y
	sub X
	svc
	eor #$80
	jpl l_1E4C
	ldy #$00
	lda Y
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #$00
	lda X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+10
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_1E4C

; optimize OK (service.pas), line = 2089

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2090

	lda #$01
	sta EMERGENCY
l_1E4C

; optimize OK (service.pas), line = 2094

	ldy #$00
	lda Y
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jpl l_1E81
	lda X
	sub Y
	svc
	eor #$80
	jpl l_1E81

; optimize OK (service.pas), line = 2096

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2097

	lda #$03
	sta EMERGENCY
l_1E81

; optimize OK (service.pas), line = 2101

	lda X
	sub Y
	svc
	eor #$80
	jpl l_1EB6
	ldy #$00
	lda X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #$00
	lda Y
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+10
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_1EB6

; optimize OK (service.pas), line = 2103

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2104

	lda #$02
	sta EMERGENCY
l_1EB6

; optimize OK (service.pas), line = 2108

	ldy #$00
	lda X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda Y
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jpl l_1EEB
	lda Y
	sub X
	svc
	eor #$80
	jpl l_1EEB

; optimize OK (service.pas), line = 2110

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2111

	lda #$04
	sta EMERGENCY
l_1EEB

; optimize OK (service.pas), line = 2115

	lda X
	cmp Y
	jeq l_1F20x
	ldy #$00
	lda Y
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #$00
	lda X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jne l_1F20
l_1F20x

; optimize OK (service.pas), line = 2117

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2118

	sta TOUCH

; optimize OK (service.pas), line = 2126

	lda X
	sub #$05
	svc
	eor #$80
	jmi l_1F3B
	lda TOUCH
	ora #$01
	sta TOUCH
l_1F3B

; optimize OK (service.pas), line = 2127

	lda Y
	sub #$05
	svc
	eor #$80
	jmi l_1F5A
	lda TOUCH
	ora #$02
	sta TOUCH
l_1F5A

; optimize OK (service.pas), line = 2137

	lda #$FF
	sta LX

l_1F70
; --- ForToDoCondition
	lda LX
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1F7E

; optimize OK (service.pas), line = 2138

	lda #$FF
	sta LY

l_1F87
; --- ForToDoCondition
	lda LY
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1F95

; optimize FAIL (1, service.pas), line = 2140

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva XB :STACKORIGIN,x
	inx
	mva LX :STACKORIGIN,x
	jsr @expandSHORT2SMALL1
	jsr @expandSHORT2SMALL
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta MIN.A
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.A+1
	dex
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2141

	ldy #$00
	lda YB
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	ldy #$00
	lda LY
	spl
	dey
	add :STACKORIGIN+9
	sta MY
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta MY+1

; optimize OK (service.pas), line = 2145

	ldy #$00
	lda XB
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	ldy #$00
	lda LX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	add :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	jmi l_1FF2x
	ldy #$00
	lda XB
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	ldy #$00
	lda LX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$0D
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_1FF2x
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda MY
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	asl @
	asl @
	add MX
	tay
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.WALL,y
	jeq l_1FF2
l_1FF2x

; optimize OK (service.pas), line = 2148

	ldy #$00
	lda LX
	spl
	dey
	add #$01
	sta :eax
	scc
	iny
	sty :eax+1
	lda #$03
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	ldy :eax
	lda #$01
	jmp l_2015
l_1FF2

; optimize OK (service.pas), line = 2150

	ldy #$00
	lda LX
	spl
	dey
	add #$01
	sta :eax
	scc
	iny
	sty :eax+1
	lda #$03
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	ldy :eax
	lda #$00
l_2015
	sta adr.ADJW+$01,y

; --- ForToDoEpilog
	inc LY
	lda LY
	cmp #$80
	jne l_1F87
l_1F95

; --- ForToDoEpilog
	inc LX
	lda LX
	cmp #$80
	jne l_1F70
l_1F7E

; optimize OK (service.pas), line = 2169

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+$03
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$06
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$07
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$08
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$05
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$02
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$01
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta AROUND

; optimize OK (service.pas), line = 2200

	lda TOUCH
	jne l_20BE

; optimize OK (service.pas), line = 2202

	lda AROUND
	and #$83
	jne l_20D5
	lda #$11
	sta DEFLECT
l_20D5

; optimize OK (service.pas), line = 2203

	lda AROUND
	and #$83
	cmp #$01
	jne l_20F2
	lda #$33
	sta DEFLECT
l_20F2

; optimize OK (service.pas), line = 2204

	lda AROUND
	and #$83
	cmp #$02
	jne l_210F
	lda #$10
	sta DEFLECT
l_210F

; optimize OK (service.pas), line = 2205

	lda AROUND
	and #$83
	cmp #$03
	jne l_212C
	lda #$12
	sta DEFLECT
l_212C

; optimize OK (service.pas), line = 2206

	lda AROUND
	and #$83
	cmp #$80
	jne l_2149
	lda #$01
	sta DEFLECT
l_2149

; optimize OK (service.pas), line = 2207

	lda AROUND
	and #$83
	cmp #$81
	jne l_2166
	lda #$21
	sta DEFLECT
l_2166

; optimize OK (service.pas), line = 2208

	lda AROUND
	and #$83
	cmp #$82
	jne l_2183
	lda #$11
	sta DEFLECT
l_2183

; optimize OK (service.pas), line = 2210

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2211

	ldy #$00
	lda YB
	spl
	dey
	sub #$01
	sta SHOOT_BLOCK.YB
	tya
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	ldy #$00
	lda XB
	spl
	dey
	sub #$01
	sta SHOOT_BLOCK.XB
	tya
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_20BE

; optimize OK (service.pas), line = 2216

	lda TOUCH
	cmp #$01
	jne l_21B3

; optimize OK (service.pas), line = 2218

	lda AROUND
	and #$0E
	jne l_21CA
	lda #$21
	sta DEFLECT
l_21CA

; optimize OK (service.pas), line = 2219

	lda AROUND
	and #$0E
	cmp #$02
	jne l_21E7
	lda #$20
	sta DEFLECT
l_21E7

; optimize OK (service.pas), line = 2220

	lda AROUND
	and #$0E
	cmp #$04
	jne l_2204
	lda #$33
	sta DEFLECT
l_2204

; optimize OK (service.pas), line = 2221

	lda AROUND
	and #$0E
	cmp #$06
	jne l_2221
	lda #$22
	sta DEFLECT
l_2221

; optimize OK (service.pas), line = 2222

	lda AROUND
	and #$0E
	cmp #$08
	jne l_223E
	lda #$01
	sta DEFLECT
l_223E

; optimize OK (service.pas), line = 2223

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_225B
	lda #$21
	sta DEFLECT
l_225B

; optimize OK (service.pas), line = 2224

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_2278
	lda #$11
	sta DEFLECT
l_2278

; optimize OK (service.pas), line = 2226

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2227

	ldy #$00
	lda YB
	spl
	dey
	sub #$01
	sta SHOOT_BLOCK.YB
	tya
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	ldy #$00
	lda XB
	spl
	dey
	add #$01
	sta SHOOT_BLOCK.XB
	scc
	iny
	sty SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_21B3

; optimize OK (service.pas), line = 2230

	lda TOUCH
	cmp #$02
	jne l_22A8

; optimize OK (service.pas), line = 2232

	lda AROUND
	and #$E0
	jne l_22BF
	lda #$12
	sta DEFLECT
l_22BF

; optimize OK (service.pas), line = 2233

	lda AROUND
	and #$E0
	cmp #$20
	jne l_22DC
	lda #$10
	sta DEFLECT
l_22DC

; optimize OK (service.pas), line = 2234

	lda AROUND
	and #$E0
	cmp #$40
	jne l_22F9
	lda #$33
	sta DEFLECT
l_22F9

; optimize OK (service.pas), line = 2235

	lda AROUND
	and #$E0
	cmp #$60
	jne l_2316
	lda #$11
	sta DEFLECT
l_2316

; optimize OK (service.pas), line = 2236

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2333
	lda #$02
	sta DEFLECT
l_2333

; optimize OK (service.pas), line = 2237

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2350
	lda #$12
	sta DEFLECT
l_2350

; optimize OK (service.pas), line = 2238

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_236D
	lda #$22
	sta DEFLECT
l_236D

; optimize OK (service.pas), line = 2240

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2241

	ldy #$00
	lda YB
	spl
	dey
	add #$01
	sta SHOOT_BLOCK.YB
	scc
	iny
	sty SHOOT_BLOCK.YB+1
	ldy #$00
	lda XB
	spl
	dey
	sub #$01
	sta SHOOT_BLOCK.XB
	tya
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_22A8

; optimize OK (service.pas), line = 2244

	lda TOUCH
	cmp #$03
	jne l_239D

; optimize OK (service.pas), line = 2246

	lda AROUND
	and #$38
	jne l_23B4
	lda #$22
	sta DEFLECT
l_23B4

; optimize OK (service.pas), line = 2247

	lda AROUND
	and #$38
	cmp #$08
	jne l_23D1
	lda #$02
	sta DEFLECT
l_23D1

; optimize OK (service.pas), line = 2248

	lda AROUND
	and #$38
	cmp #$10
	jne l_23EE
	lda #$33
	sta DEFLECT
l_23EE

; optimize OK (service.pas), line = 2249

	lda AROUND
	and #$38
	cmp #$18
	jne l_240B
	lda #$12
	sta DEFLECT
l_240B

; optimize OK (service.pas), line = 2250

	lda AROUND
	and #$38
	cmp #$20
	jne l_2428
	lda #$20
	sta DEFLECT
l_2428

; optimize OK (service.pas), line = 2251

	lda AROUND
	and #$38
	cmp #$28
	jne l_2445
	lda #$22
	sta DEFLECT
l_2445

; optimize OK (service.pas), line = 2252

	lda AROUND
	and #$38
	cmp #$30
	jne l_2462
	lda #$21
	sta DEFLECT
l_2462

; optimize OK (service.pas), line = 2254

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2255

	ldy #$00
	lda YB
	spl
	dey
	add #$01
	sta SHOOT_BLOCK.YB
	scc
	iny
	sty SHOOT_BLOCK.YB+1
	ldy #$00
	lda XB
	spl
	dey
	add #$01
	sta SHOOT_BLOCK.XB
	scc
	iny
	sty SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_239D

; optimize OK (service.pas), line = 2261

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2262

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2264

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_24A5
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_24A5

; optimize OK (service.pas), line = 2265

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_24C2
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_24C2

; optimize OK (service.pas), line = 2266

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_24DC
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_24DC

; optimize OK (service.pas), line = 2268

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_24F8
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_24F8

; optimize OK (service.pas), line = 2269

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2515
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2515

; optimize OK (service.pas), line = 2270

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_252F
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_252F
l_1F20
l_1C45

; optimize OK (service.pas), line = 2280

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_2550

; optimize OK (service.pas), line = 2283

	lda EMERGENCY
	cmp #$FF
	jne l_2563
	lda #$04
	jsr FATAL_ERROR
l_2563

; optimize OK (service.pas), line = 2285

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2311

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_257C
@

; optimize OK (service.pas), line = 2314

	lda adr.ADJW+$03
	jne l_2593
	lda MIMAX
	and #$0F
	sta MIMAX
l_2593

; optimize OK (service.pas), line = 2315

	lda adr.ADJW+$01
	jne l_25BB
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_25BB
	jmp a_0009
l_257C
	cmp #$06
	jne l_25D3

; optimize OK (service.pas), line = 2319

	lda adr.ADJW+$01
	jne l_25EA
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_25EA

; optimize OK (service.pas), line = 2320

	lda adr.ADJW+$05
	jne l_2612
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_2612
	jmp a_0009
l_25D3
	cmp #$07
	jne l_262A

; optimize OK (service.pas), line = 2324

	lda adr.ADJW+$05
	jne l_2641
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_2641

; optimize OK (service.pas), line = 2325

	lda adr.ADJW+$07
	jne l_2669
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_2669
	jmp a_0009
l_262A
	cmp #$08
	jne l_2681

; optimize OK (service.pas), line = 2329

	lda adr.ADJW+$07
	jne l_2698
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_2698

; optimize OK (service.pas), line = 2330

	lda adr.ADJW+$03
	jne l_26C0
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_26C0
l_2681
a_0009

; --- RepeatUntilProlog
l_26D8

; optimize OK (service.pas), line = 2337

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta LX

; optimize OK (service.pas), line = 2338

	lda MIMAX
	and #$0F
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta MX+1
	lda :eax
	sta MX

; optimize OK (service.pas), line = 2340

	ldy #$00
	lda LX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda MX
	sub :STACKORIGIN+10
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	inx
	mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LX :STACKORIGIN,x
	jsr @expandSHORT2SMALL
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 2345

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_26D8
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_26D8

; optimize OK (service.pas), line = 2349

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda @SMALLINT.MOD.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2350

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2352

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_2550

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0655
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0659
Y	= DATAORIGIN+$065A
LX	= DATAORIGIN+$065B
LY	= DATAORIGIN+$065C
XB	= DATAORIGIN+$065D
YB	= DATAORIGIN+$065E
OX	= DATAORIGIN+$065F
OY	= DATAORIGIN+$0661
NX	= DATAORIGIN+$0663
NY	= DATAORIGIN+$0665
MX	= DATAORIGIN+$0667
MY	= DATAORIGIN+$0669
F1	= DATAORIGIN+$066B
F2	= DATAORIGIN+$066D
ANGLE	= DATAORIGIN+$066F
MYX	= DATAORIGIN+$0671
MYY	= DATAORIGIN+$0673
EMERGENCY	= DATAORIGIN+$0675
MIMAX	= DATAORIGIN+$0676
DEFLECT	= DATAORIGIN+$0677
AROUND	= DATAORIGIN+$0678
COLLISION	= DATAORIGIN+$0679
TOUCH	= DATAORIGIN+$067A
adr.ADJW	= [DATAORIGIN+$067B] .array [3] [3]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$0684

@VarData	= BALL
@VarDataSize	= 40

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2367

	lda #$00
	sta K
	sta K+1

l_2746
; --- ForToDoCondition
	lda K+1
	cmp #$01
	bcc @+
	jne l_2752
	lda K
	cmp #$3F
	bcc @+
	jne l_2752
@

; optimize OK (service.pas), line = 2368

	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda K
	sta @WORD.MOD.A
	lda K+1
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	sta :STACKORIGIN+10
	ldy K
	lda #$C4
	add K+1
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; --- ForToDoEpilog
	inc K
	jne l_2746
	inc K+1
	jne l_2746
l_2752

; optimize OK (service.pas), line = 2372

	lda #$00
	sta Y

l_276C
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_277A

; optimize OK (service.pas), line = 2373

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_276C
l_277A

; optimize OK (service.pas), line = 2378

	lda #$0A
	sta Y

l_2796
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_27A4

; optimize OK (service.pas), line = 2380

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2381

	lda #$00
	sta K
	sta K+1

; optimize OK (service.pas), line = 2382

	lda #$09
	sta X

l_27BF
; --- ForToDoCondition
	lda X
	cmp #$D8
	jcs l_27CD

; optimize OK (service.pas), line = 2385

	mwy PATT :bp2
	ldy #PATT.OFS-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy X
	lda :STACKORIGIN+9
	add $C400,y
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YB
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YB+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL

; optimize OK (service.pas), line = 2387

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2392

	lda Y
	cmp #$10
	jcc l_2802x
	lda X
	cmp #$12
	jcs l_2802
l_2802x
	lda #$00
	sta SHADOW
l_2802

; optimize OK (service.pas), line = 2397

	lda CL
	and #$7F
	ora SHADOW
	ldy K
	sta adr.TMP,y

; optimize FAIL (0, service.pas), line = 2398

	inc K
	sne
	inc K+1

; --- ForToDoEpilog
	inc X
	jne l_27BF
l_27CD

; optimize OK (service.pas), line = 2401

	lda PLAYSCREEN.OFS
	add #$09
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITTMP.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITTMP.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITTMP.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITTMP.DST+3
	lda K
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_2796
l_27A4

; ------------------------------------------------------------

PATT	= DATAORIGIN+$0685
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$0689
K	= DATAORIGIN+$068B
X	= DATAORIGIN+$068D
Y	= DATAORIGIN+$068E
CL	= DATAORIGIN+$068F
SHADOW	= DATAORIGIN+$0690

@VarData	= PATT
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0691
Y	= DATAORIGIN+$0693

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2516

	lda #$81
	sta Y

l_284E
; --- ForToDoCondition
	ldy Y
	cpy #$A1
	jcs l_285C

; optimize OK (service.pas), line = 2519

	lda #$48
	adc adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$48
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$58
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_284E
l_285C

; ------------------------------------------------------------

Y	= DATAORIGIN+$0695

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0696
Y	= DATAORIGIN+$0698
adr.SC	= [DATAORIGIN+$069A] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2563

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2564

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2566

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2568

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2569

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; optimize OK (service.pas), line = 2572

	lda #$00
	sta W

l_28AC
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_28BA

; optimize OK (service.pas), line = 2574

	lda #$00
	sta Y

l_28C3
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_28D1

; optimize OK (service.pas), line = 2576

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2577

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_28F6_0

l_28F9
; --- ForToDoCondition
	lda @FORTMP_28F6_0::#$00
	cmp X
	jcc l_2907

; optimize FAIL (1, service.pas), line = 2581

	inx
	ldy #1
	lda W
	cmp #$06
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+9
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_292F

; optimize OK (service.pas), line = 2583

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	jmp l_296C
l_292F

; optimize OK (service.pas), line = 2586

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+10
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_296C
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_28F9
l_2907

; --- ForToDoEpilog
	inc Y
	jne l_28C3
l_28D1

; optimize OK (service.pas), line = 2590

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_28AC
l_28BA

; optimize OK (service.pas), line = 2594

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2595

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2596

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$06AF
A	= DATAORIGIN+$06B1
B	= DATAORIGIN+$06B3
W	= DATAORIGIN+$06B5
X	= DATAORIGIN+$06B6
Y	= DATAORIGIN+$06B7

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2607

	jsr NOSOUND

; optimize OK (service.pas), line = 2608

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2609

	lda #$B3
	sta B
	lda #$00
	sta B+1

; optimize OK (service.pas), line = 2611

	lda #$0B
	sta W

l_29C0
; --- ForToDoCondition
	lda #$00
	sta Y

l_29D7
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_29E5

; optimize OK (service.pas), line = 2615

	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2616

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2A0A_0

l_2A0D
; --- ForToDoCondition
	lda @FORTMP_2A0A_0::#$00
	cmp X
	jcc l_2A1B

; optimize OK (service.pas), line = 2618

	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	jne l_2A37

; optimize OK (service.pas), line = 2620

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	jmp l_2A74
l_2A37

; optimize OK (service.pas), line = 2623

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+10
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_2A74
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_2A0D
l_2A1B

; --- ForToDoEpilog
	inc Y
	jne l_29D7
l_29E5

; optimize OK (service.pas), line = 2627

	lda #$01
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; --- ForToDoEpilog
	dec W
	jpl l_29C0
l_29CE

; ------------------------------------------------------------

X	= DATAORIGIN+$06B9
Y	= DATAORIGIN+$06BA
W	= DATAORIGIN+$06BB
Z	= DATAORIGIN+$06BC
A	= DATAORIGIN+$06BE
B	= DATAORIGIN+$06C0

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (service.pas), line = 2637

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2661

	ldy NUM
	lda adr.DIGITS,y
	and #$01
	cmp #$01
	jne l_2ACB
	lda #$DF
	sta A
l_2ACB

; optimize OK (service.pas), line = 2662

	lda #$01
	sta X

l_2ADB
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2AE9

; optimize OK (service.pas), line = 2664

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2ADB
l_2AE9

; optimize OK (service.pas), line = 2668

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2669

	ldy NUM
	lda adr.DIGITS,y
	and #$02
	cmp #$02
	jne l_2B21
	lda #$DF
	sta A
l_2B21

; optimize OK (service.pas), line = 2670

	lda #$01
	sta X

l_2B31
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2B3F

; optimize OK (service.pas), line = 2672

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2B31
l_2B3F

; optimize OK (service.pas), line = 2676

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2677

	ldy NUM
	lda adr.DIGITS,y
	and #$04
	cmp #$04
	jne l_2B7B
	lda #$DF
	sta A
l_2B7B

; optimize OK (service.pas), line = 2678

	lda #$01
	sta X

l_2B8B
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2B99

; optimize OK (service.pas), line = 2680

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$0A,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$0A,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2B8B
l_2B99

; optimize OK (service.pas), line = 2683

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2684

	ldy NUM
	lda adr.DIGITS,y
	and #$08
	cmp #$08
	jne l_2BD5
	lda #$DF
	sta A
l_2BD5

; optimize OK (service.pas), line = 2685

	lda #$01
	sta Y

l_2BE5
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2BF3

; optimize OK (service.pas), line = 2687

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2BE5
l_2BF3

; optimize OK (service.pas), line = 2690

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2691

	ldy NUM
	lda adr.DIGITS,y
	and #$10
	cmp #$10
	jne l_2C2B
	lda #$DF
	sta A
l_2C2B

; optimize OK (service.pas), line = 2692

	lda #$01
	sta Y

l_2C3B
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2C49

; optimize OK (service.pas), line = 2694

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2C3B
l_2C49

; optimize OK (service.pas), line = 2697

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2698

	ldy NUM
	lda adr.DIGITS,y
	and #$20
	cmp #$20
	jne l_2C85
	lda #$DF
	sta A
l_2C85

; optimize OK (service.pas), line = 2699

	lda #$01
	sta Y

l_2C95
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2CA3

; optimize OK (service.pas), line = 2701

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2C95
l_2CA3

; optimize OK (service.pas), line = 2704

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2705

	ldy NUM
	lda adr.DIGITS,y
	and #$40
	cmp #$40
	jne l_2CDF
	lda #$DF
	sta A
l_2CDF

; optimize OK (service.pas), line = 2706

	lda #$01
	sta Y

l_2CEF
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2CFD

; optimize OK (service.pas), line = 2708

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2CEF
l_2CFD

; ------------------------------------------------------------

PX	= DATAORIGIN+$06C3
PY	= DATAORIGIN+$06C5
NUM	= DATAORIGIN+$06C7
X	= DATAORIGIN+$06C9
Y	= DATAORIGIN+$06CA
A	= DATAORIGIN+$06CB

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (service.pas), line = 2719

	lda #$00
	sta F

; optimize OK (service.pas), line = 2724

	lda #$A0
	sta @INTEGER.DIV.B
	lda #$86
	sta @INTEGER.DIV.B+1
	lda #$01
	sta @INTEGER.DIV.B+2
	lda #$00
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2725

	jmi l_2D45
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2D45
	lda #$01
	sta F
l_2D45

; optimize OK (service.pas), line = 2726

	lda F
	jeq l_2D58
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2D68
l_2D58

; optimize OK (service.pas), line = 2727

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2D68
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2730

	lda #$10
	sta @INTEGER.DIV.B
	lda #$27
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2731

	jmi l_2D8A
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2D8A
	lda #$01
	sta F
l_2D8A

; optimize OK (service.pas), line = 2732

	lda F
	jeq l_2D9D
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2DB1
l_2D9D

; optimize OK (service.pas), line = 2733

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2DB1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2736

	lda #$E8
	sta @INTEGER.DIV.B
	lda #$03
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2737

	jmi l_2DD7
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2DD7
	lda #$01
	sta F
l_2DD7

; optimize OK (service.pas), line = 2738

	lda F
	jeq l_2DEA
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2DFE
l_2DEA

; optimize OK (service.pas), line = 2739

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2DFE
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2742

	lda #$64
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2743

	jmi l_2E24
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2E24
	lda #$01
	sta F
l_2E24

; optimize OK (service.pas), line = 2744

	lda F
	jeq l_2E37
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2E4B
l_2E37

; optimize OK (service.pas), line = 2745

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2E4B
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2748

	lda #$0A
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2749

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2753

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$00
	sta PUT_DIGIT.NUM
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; ------------------------------------------------------------

PX	= DATAORIGIN+$06CC
PY	= DATAORIGIN+$06CE
SC	= DATAORIGIN+$06D0
N1	= DATAORIGIN+$06D4
F	= DATAORIGIN+$06D8

@VarData	= PX
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, service.pas), line = 2799

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; optimize OK (service.pas), line = 2802

	lda #$00
	sta CN

l_2E8A
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2E98

; optimize OK (service.pas), line = 2803

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_2EA3_0

l_2EA6
; --- ForToDoCondition
	lda @FORTMP_2EA3_0::#$00
	cmp Y
	jcc l_2EB4

; optimize OK (service.pas), line = 2804

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2EBF_0

l_2EC2
; --- ForToDoCondition
	lda @FORTMP_2EBF_0::#$00
	cmp X
	jcc l_2ED0

; optimize OK (service.pas), line = 2806

	lda X
	add #$0B
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta XL
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta XL+1

; optimize OK (service.pas), line = 2807

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (service.pas), line = 2809

	ldy XL
	lda #$C4
	add XL+1
	sta :bp+1
	lda (:bp),y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 2810

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize FAIL (1, service.pas), line = 2814

	inx
	ldy #1
	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	bmi @+
	dey
@
	sty :STACKORIGIN,x
	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	bne @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2F33

; optimize OK (service.pas), line = 2817

	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL
; optimize OK (service.pas), line = 2820
; optimize OK (service.pas), line = 2823
	jmp l_2F75
l_2F33

; optimize OK (service.pas), line = 2832

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy YL
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 2835

	lda PATTERN.OFS
	add XP
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc XP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YP
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YP+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex
l_2F75

; optimize OK (service.pas), line = 2838

	lda XL
	sta :STACKORIGIN+10
	lda #$50
	add XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YL
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 2841

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YL
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2EC2
l_2ED0

; --- ForToDoEpilog
	inc Y
	jne l_2EA6
l_2EB4

; --- ForToDoEpilog
	inc CN
	jne l_2E8A
l_2E98

; ------------------------------------------------------------

LIVES	= DATAORIGIN+$06D9
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$06DB
Y	= DATAORIGIN+$06DC
CN	= DATAORIGIN+$06DD
XP	= DATAORIGIN+$06DE
YP	= DATAORIGIN+$06E0
XL	= DATAORIGIN+$06E2
YL	= DATAORIGIN+$06E4
SHADOW	= DATAORIGIN+$06E6
CL	= DATAORIGIN+$06E7

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2850

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2FE3_0

l_2FE6
; --- ForToDoCondition
	lda @FORTMP_2FE3_0::#$00
	cmp Y
	jcc l_2FF4

; optimize OK (service.pas), line = 2852

	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	lda SHOOTS.WIDTH
	sta :ecx
	lda SHOOTS.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta FW
	lda :eax+1
	sta FW+1

; optimize OK (service.pas), line = 2854

	lda Y
	add FIRE.Y
	tay
	lda FIRE.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	add FW
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	adc FW+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc Y
	jne l_2FE6
l_2FF4

; ------------------------------------------------------------

FW	= DATAORIGIN+$06EA
Y	= DATAORIGIN+$06EC

@VarData	= FW
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2862

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_3031_0

l_3034
; --- ForToDoCondition
	lda @FORTMP_3031_0::#$00
	cmp Y
	jcc l_3042

; optimize OK (service.pas), line = 2866

	lda Y
	add FIRE.Y
	tay
	lda FIRE.X
	add adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add FIRE.X
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda SHOOTS.WIDTH
	sta BLITROW.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_3034
l_3042

; ------------------------------------------------------------

Y	= DATAORIGIN+$06EE

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2873

	lda FIRE.AVL
	jeq l_3084

; optimize FAIL ('MOUSECLICK', service.pas), line = 2875

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_30A4

; optimize OK (service.pas), line = 2877

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	sbc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda VAUS.X
	add :STACKORIGIN+10
	sta FIRE.X

; optimize OK (service.pas), line = 2878

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 2879

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2880

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 2881

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_30A4

; optimize OK (service.pas), line = 2884

	lda FIRE.SHOT
	jeq l_30DE

; optimize OK (service.pas), line = 2886

	lda FIRE.NW
	jeq l_30EB
	jsr REMOVE_FIRE
l_30EB

; optimize OK (service.pas), line = 2887

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 2889

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 2890

	cmp #$16
	jcs l_3106
	lda #$00
	sta FIRE.SHOT
	jmp l_3114
l_3106

; optimize FAIL ('PLACE_FIRE', service.pas), line = 2893

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 2895

	lda FIRE.Y
	sub #$16
	jmi l_313B
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_313B

; optimize OK (service.pas), line = 2897

	lda FIRE.X
	sub #$09
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X1
	lda :STACKORIGIN+STACKWIDTH+9
	sta X1+1

; optimize OK (service.pas), line = 2898

	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y1
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y1+1

; optimize OK (service.pas), line = 2900

	lda FIRE.X
	add SHOOTS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$09
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X2
	lda :STACKORIGIN+STACKWIDTH+9
	sta X2+1

; optimize OK (service.pas), line = 2901

	lda Y1
	sta Y2
	lda Y1+1
	sta Y2+1

; optimize OK (service.pas), line = 2903

	lda Y1
	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_31A4x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_31A4
l_31A4x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2905

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 2906

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2908

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X1+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y1+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 2909

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X2+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y2+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE
l_3114
l_31A4
l_313B
l_30DE
l_3084

; ------------------------------------------------------------

X1	= DATAORIGIN+$06F0
X2	= DATAORIGIN+$06F2
Y1	= DATAORIGIN+$06F4
Y2	= DATAORIGIN+$06F6

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2921

	lda #$00
	sta Y

l_31C9
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_31D7

; optimize OK (service.pas), line = 2923

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$D9
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW+$B0,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256+$B0,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_31C9
l_31D7

; ------------------------------------------------------------

Y	= DATAORIGIN+$06F8

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2931

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 2932

	lda SCRFLUX
	jeq l_3216

; optimize OK (service.pas), line = 2934

	lda #$00
	sta Y

l_3220
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_322E

; optimize OK (service.pas), line = 2936

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_3220
l_322E

; optimize FAIL (0, service.pas), line = 2938

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 2939

	lda SCRFLUXCNT
	cmp #$15
	jcc l_326D
	lda #$00
	sta SCRFLUXCNT
l_326D
l_3216

; ------------------------------------------------------------

Y	= DATAORIGIN+$06F9
FX	= DATAORIGIN+$06FA

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2947

	jsr NOSOUND

; optimize OK (service.pas), line = 2949

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2950

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 2952

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', service.pas), line = 2954

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2955

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2956

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2958

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_3298_0
	lda Z+1
	adc #$00
	sta @FORTMP_3298_1

l_329B
; --- ForToDoCondition
	lda @FORTMP_3298_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_3298_0::#$00
	cmp X
@
	jcc l_32A7

; optimize FAIL ('WAIT_VBL', service.pas), line = 2960

	jsr WAIT_VBL

; optimize OK (service.pas), line = 2962

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 2963

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2964

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 2965

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2966

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2968

	lda VAUS.Y
	sta Y
	lda #$00
	sta Y+1
	lda VAUS.Y
	add VAUS.HEIGHT
	sta @FORTMP_32C6_0
	lda #$00
	adc #$00
	sta @FORTMP_32C6_1

l_32C9
; --- ForToDoCondition
	lda @FORTMP_32C6_1::#$00
	cmp Y+1
	bne @+
	lda @FORTMP_32C6_0::#$00
	cmp Y
@
	jcc l_32D5

; optimize OK (service.pas), line = 2970

	ldy Y
	lda #$E1
	add adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$E1
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$28
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_32C9
	inc Y+1
	jne l_32C9
l_32D5

; --- ForToDoEpilog
	inc X
	jne l_329B
	inc X+1
	jne l_329B
l_32A7

; ------------------------------------------------------------

X	= DATAORIGIN+$06FB
Y	= DATAORIGIN+$06FD
Z	= DATAORIGIN+$06FF

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 2980

	lda VAUS.LETTER
	jmi l_330F
	jeq l_330F

; optimize OK (service.pas), line = 2982

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 2983

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3326
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3326

; optimize OK (service.pas), line = 2984

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3338
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3338

; optimize OK (service.pas), line = 2985

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2986

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2987

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 2988

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 2990

	lda VAUS.LETTER
	cmp #$06
	jeq l_335D

; optimize OK (service.pas), line = 2992

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2993

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2994

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_335D
l_330F

; optimize OK (service.pas), line = 2998

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_3379
@

; optimize OK (service.pas), line = 3001

	lda FIRE.SHOT
	jeq l_3385
	jsr REMOVE_FIRE
l_3385

; optimize OK (service.pas), line = 3002

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3003

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3004

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3005

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3006

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_3379
	cmp #$02
	jne l_339F

; optimize OK (service.pas), line = 3010

	lda FIRE.SHOT
	jeq l_33AB
	jsr REMOVE_FIRE
l_33AB

; optimize OK (service.pas), line = 3011

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3012

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3013

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3014

	sta FIRE.AVL
	jmp a_000A
l_339F
	cmp #$03
	jne l_33C1

; optimize OK (service.pas), line = 3018

	lda FIRE.SHOT
	jeq l_33CD
	jsr REMOVE_FIRE
l_33CD

; optimize OK (service.pas), line = 3019

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3020

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3021

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3022

	sta FIRE.AVL

; optimize OK (service.pas), line = 3023

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_33C1
	cmp #$04
	jne l_33E7

; optimize OK (service.pas), line = 3027

	lda FIRE.SHOT
	jeq l_33F3
	jsr REMOVE_FIRE
l_33F3

; optimize OK (service.pas), line = 3028

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3029

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3030
	jmp s_3430
l_33E7
	cmp #$05
	jne l_3405

; optimize OK (service.pas), line = 3034

	lda FIRE.SHOT
	jeq l_3411
	jsr REMOVE_FIRE
l_3411

; optimize OK (service.pas), line = 3035

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3036

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3037

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3038

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3039

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3430
; optimize OK (service.pas), line = 3040
	jmp s_344E
l_3405
	cmp #$06
	jne l_3437

; optimize OK (service.pas), line = 3044

	lda FIRE.SHOT
	jeq l_3443
	jsr REMOVE_FIRE
l_3443

; optimize OK (service.pas), line = 3045

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3046

	jsr MODIFY_VAUS
s_344E
; optimize OK (service.pas), line = 3047
	jmp s_347E
l_3437
	cmp #$07
	jne l_3455

; optimize OK (service.pas), line = 3051

	lda FIRE.SHOT
	jeq l_3461
	jsr REMOVE_FIRE
l_3461

; optimize OK (service.pas), line = 3052

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3053

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3054

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3055

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3056

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3057

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_347E

; optimize OK (service.pas), line = 3058

	lda #$00
	sta FIRE.AVL
l_3455
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$0705
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001A
B2	= DATAORIGIN+$0709
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001A
B3	= DATAORIGIN+$070D
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0711
@CASETMP_000A	= DATAORIGIN+$0713

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_348C

; optimize OK (service.pas), line = 3071

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3072

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_348C
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_348C

; optimize OK (service.pas), line = 3074

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3075

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3076

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0714
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
TEMP	= DATAORIGIN+$0718

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_34CC

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3106

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_34DB

; optimize OK (service.pas), line = 3109

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_34F8
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_34F8

; optimize OK (service.pas), line = 3110

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_34F8

; optimize OK (service.pas), line = 3112

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3113

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_34DB

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0779
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3121

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3519

; optimize OK (service.pas), line = 3123

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3125

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_352F
	jeq l_352F

; optimize OK (service.pas), line = 3127

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3130

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_3545

; optimize OK (service.pas), line = 3132

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3133

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_3545
l_352F

; optimize OK (service.pas), line = 3137

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3141

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_356D
@
	ldy #$00
	lda (:bp2),y
	jpl l_356D
@

; optimize OK (service.pas), line = 3142

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_356D
l_3519

; ------------------------------------------------------------

BALL	= DATAORIGIN+$077D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_34CC

; optimize OK (service.pas), line = 3150

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3151

	sta SCRFLUX

; optimize OK (service.pas), line = 3153

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3155

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3156

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3158

	lda #$FF
	sta LETT.LAST
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3159

	lda #$00
	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3162

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3165

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3169

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3172

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3175

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3176

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3177

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3180

	jsr PUT_WALL

; optimize FAIL ('MOUSERESET', service.pas), line = 3184

	jsr MOUSERESET

; optimize OK (service.pas), line = 3187

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3188

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3191

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3192

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3195

	lda #$FF
	sta BALL0.OLDX
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3196

	sta BALL0.OLDY
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3199

	lda #$00
	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3203

	lda #$10
	sta BALL0.ONVAUS

; optimize OK (service.pas), line = 3208

	lda #$00
	sta BALL0.STM

; optimize OK (service.pas), line = 3212

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3215

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3218

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3220

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3221

	jsr START_VAUS

; optimize OK (service.pas), line = 3222

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3223

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3224

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3225

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3226

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3233

	lda RND
	and #$0F
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda #$00
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3235

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3238

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3240

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3241

	sta BALL2.INPLAY

; --- WhileProlog
	jmp l_3608
l_3609

; optimize FAIL ('WAIT_VBL', service.pas), line = 3245

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3256

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	lda <Y
	sta MOUSECOORDS.Y
	lda >Y
	sta MOUSECOORDS.Y+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3261

	lda TRAINER
	jne l_361F
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_362D
l_361F

; optimize OK (service.pas), line = 3267

	lda TRAINER
	cmp #$01
	jne l_363F

; optimize FAIL (1, service.pas), line = 3268

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc #$00
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_362D
	jsr MOVE_VAUS
l_363F

; optimize OK (service.pas), line = 3273

	lda BALL0.LAUNCH
	cmp #$01
	jne l_3662

; optimize FAIL (0, service.pas), line = 3275

	inc BALL0.STM

; optimize OK (service.pas), line = 3280

	lda BALL0.STM
	cmp #$FA
	jne l_3679
	lda #$00
	sta BALL0.LAUNCH
l_3679

; optimize OK (service.pas), line = 3283

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3286

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_3693
	lda #$00
	sta BALL0.LAUNCH
l_3693
	jmp l_36A3
l_3662

; optimize OK (service.pas), line = 3294

	lda BALL0.INPLAY
	jeq l_36AF
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_36AF
l_36A3

; optimize OK (service.pas), line = 3295

	lda BALL1.INPLAY
	jeq l_36C1
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_36C1

; optimize OK (service.pas), line = 3296

	lda BALL2.INPLAY
	jeq l_36D3
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_36D3

; optimize OK (service.pas), line = 3302

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3303

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3304

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3319

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3320

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3321

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3322

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3323

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3325

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_370B
	jsr VAUS_OUT
l_370B

; optimize OK (service.pas), line = 3327

	lda VAUS.LETTER
	cmp #$04
	jne l_3721

; optimize OK (service.pas), line = 3329

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3331

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3332

	mwy BALL2 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3334

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3336

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3343

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (service.pas), line = 3345

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3346

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3347

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3351

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3352

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3353

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3356

	lda #$00
	sta VAUS.LETTER
l_3721

; optimize OK (service.pas), line = 3360

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_3784
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_3784

; optimize OK (service.pas), line = 3363

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1,y
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2,y
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3,y
	sta WRITE_SCORE.SC+3
	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3366

	lda CUR_PLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.SCORE.PLAYER+3,y
	sub SCORE.HISCORE+3
	bne L4
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne L1
	lda adr.SCORE.PLAYER+1,y
	cmp SCORE.HISCORE+1
	bne L1
	lda adr.SCORE.PLAYER,y
	cmp SCORE.HISCORE
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_37AA
	jeq l_37AA

; optimize OK (service.pas), line = 3369

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3371

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_37AA

; optimize OK (service.pas), line = 3378

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3379

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3380

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3421

	lda BALL0.INPLAY
	jne l_37D0

; optimize OK (service.pas), line = 3423

	mwy BALL0 :bp2
	ldy #$1A
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3424

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3425

	sta BALL2.INPLAY
l_37D0

; optimize OK (service.pas), line = 3428

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3430

	lda BALL0.INPLAY
	jeq l_37EB
	inc BALLS_IN_PLAY
l_37EB

; optimize OK (service.pas), line = 3431

	lda BALL1.INPLAY
	jeq l_37FE
	inc BALLS_IN_PLAY
l_37FE

; optimize OK (service.pas), line = 3432

	lda BALL2.INPLAY
	jeq l_3811
	inc BALLS_IN_PLAY
l_3811

; optimize OK (service.pas), line = 3435

	lda BALL0.INPLAY
	jne l_3827

; optimize OK (service.pas), line = 3437

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3438

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3439

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3440

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3441

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3449

	jsr NOSOUND
l_3827
l_3608

; optimize OK (service.pas), line = 3243

	lda REMAIN_BLK
	jeq l_3609w
	lda BALL0.INPLAY
	jeq l_3609w
	lda SCORE.ABORTPLAY
	jeq l_3609
l_3609w

; optimize OK (service.pas), line = 3505

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3506

	lda REMAIN_BLK
	jne l_3875
	lda #$01
	sta RESULT
l_3875
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$071A
X	= DATAORIGIN+$071B
Y	= DATAORIGIN+$071D
KEY	= DATAORIGIN+$071F
T1	= DATAORIGIN+$0721
T2	= DATAORIGIN+$0723
HLP	= DATAORIGIN+$0725
CN	= DATAORIGIN+$0727
adr.BALL0	= DATAORIGIN+$0728	; [27] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$0728
BALL0.Y	= DATAORIGIN+$072A
BALL0.FINEX	= DATAORIGIN+$072C
BALL0.FINEY	= DATAORIGIN+$072E
BALL0.OLDX	= DATAORIGIN+$0730
BALL0.OLDY	= DATAORIGIN+$0732
BALL0.SPEED	= DATAORIGIN+$0734
BALL0.FINESPEED	= DATAORIGIN+$0736
BALL0.SPEEDX	= DATAORIGIN+$0738
BALL0.SPEEDY	= DATAORIGIN+$073A
BALL0.SBD	= DATAORIGIN+$073C
BALL0.BRWHIT	= DATAORIGIN+$073E
BALL0.INPLAY	= DATAORIGIN+$073F
BALL0.LAUNCH	= DATAORIGIN+$0740
BALL0.ONVAUS	= DATAORIGIN+$0741
BALL0.STM	= DATAORIGIN+$0742
adr.BALL1	= DATAORIGIN+$0743	; [27] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0743
BALL1.Y	= DATAORIGIN+$0745
BALL1.FINEX	= DATAORIGIN+$0747
BALL1.FINEY	= DATAORIGIN+$0749
BALL1.OLDX	= DATAORIGIN+$074B
BALL1.OLDY	= DATAORIGIN+$074D
BALL1.SPEED	= DATAORIGIN+$074F
BALL1.FINESPEED	= DATAORIGIN+$0751
BALL1.SPEEDX	= DATAORIGIN+$0753
BALL1.SPEEDY	= DATAORIGIN+$0755
BALL1.SBD	= DATAORIGIN+$0757
BALL1.BRWHIT	= DATAORIGIN+$0759
BALL1.INPLAY	= DATAORIGIN+$075A
BALL1.LAUNCH	= DATAORIGIN+$075B
BALL1.ONVAUS	= DATAORIGIN+$075C
BALL1.STM	= DATAORIGIN+$075D
adr.BALL2	= DATAORIGIN+$075E	; [27] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$075E
BALL2.Y	= DATAORIGIN+$0760
BALL2.FINEX	= DATAORIGIN+$0762
BALL2.FINEY	= DATAORIGIN+$0764
BALL2.OLDX	= DATAORIGIN+$0766
BALL2.OLDY	= DATAORIGIN+$0768
BALL2.SPEED	= DATAORIGIN+$076A
BALL2.FINESPEED	= DATAORIGIN+$076C
BALL2.SPEEDX	= DATAORIGIN+$076E
BALL2.SPEEDY	= DATAORIGIN+$0770
BALL2.SBD	= DATAORIGIN+$0772
BALL2.BRWHIT	= DATAORIGIN+$0774
BALL2.INPLAY	= DATAORIGIN+$0775
BALL2.LAUNCH	= DATAORIGIN+$0776
BALL2.ONVAUS	= DATAORIGIN+$0777
BALL2.STM	= DATAORIGIN+$0778

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3529

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3587

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0781
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0783
Y	= DATAORIGIN+$0785
ST	= DATAORIGIN+$0787
OLDX	= DATAORIGIN+$0789
OLDY	= DATAORIGIN+$078B
NEWX	= DATAORIGIN+$078D
NEWY	= DATAORIGIN+$078F

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3596

	lda #$01
	sta X

l_3896
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_38A4

; optimize OK (service.pas), line = 3598

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3599

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3600

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3601

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3603

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_3896
l_38A4

; optimize OK (service.pas), line = 3606

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0791

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3666

	jsr NOSOUND

; optimize OK (service.pas), line = 3667

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3672

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3678

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3716

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0792
X	= DATAORIGIN+$0794
Y	= DATAORIGIN+$0796
Z	= DATAORIGIN+$0798
K	= DATAORIGIN+$079A
IK	= DATAORIGIN+$079C

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3724

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3725

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3906
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3906

; optimize OK (service.pas), line = 3728

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3729

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3733

	jsr SET_WALL

; optimize OK (service.pas), line = 3735

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3736

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3739

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3743

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3744

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3745

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_3938

; --- RepeatUntilProlog
l_3939

; optimize OK (service.pas), line = 3755

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_394B

; optimize FAIL (1, service.pas), line = 3757

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 3760

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3764

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_394B

; optimize OK (service.pas), line = 3768

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3769

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 3774

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 3777

	jeq l_3999

; optimize OK (service.pas), line = 3780

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3783

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_39B5

; optimize OK (service.pas), line = 3784

	lda #$01
	sta adr.SCORE.WALL_N,y
l_39B5

; optimize OK (service.pas), line = 3787

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_39E7
l_3999

; optimize OK (service.pas), line = 3793

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_39FC
	jsr GAME_OVER
l_39E7
l_39FC

; optimize OK (service.pas), line = 3798

	lda NWALL
	jne l_3939

; optimize FAIL (0, service.pas), line = 3801

	inc CUR_PLAYER

; optimize OK (service.pas), line = 3802

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_3A24
	lda #$01
	sta CUR_PLAYER
l_3A24

; optimize OK (service.pas), line = 3808

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3A40
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_3A40

; optimize OK (service.pas), line = 3813

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_3938

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$079E
NWALL	= DATAORIGIN+$07A0

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 134

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 136

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 137

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$4A
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$44
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$3E
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$50
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SOUNDFX.OFS
	lda #$6F
	sta SOUNDFX.OFS+1
	lda #$03
	sta SOUNDFX.OFS+2
	lda #$00
	sta SOUNDFX.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta SOUNDFX.WIDTH
	lda #$00
	sta SOUNDFX.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$26
	sta SOUNDFX.HEIGHT
	lda #$00
	sta SOUNDFX.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$BB
	sta SHINEWALL.OFS
	lda #$72
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$BB
	sta MINIVAUS.OFS
	lda #$77
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$1F
	sta LEVELSEL.OFS
	lda #$78
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$EA
	sta LETTERS.OFS
	lda #$7F
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$EA
	sta NORMAL.OFS
	lda #$9B
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$CA
	sta LASERS.OFS
	lda #$9C
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$AA
	sta ENLARGED.OFS
	lda #$9D
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$6A
	sta SHOOTS.OFS
	lda #$9F
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$D2
	sta FLUX.OFS
	lda #$9F
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$1A
	sta BALLDATA.OFS
	lda #$A1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$33
	sta PATTERN.OFS
	lda #$A1
	sta PATTERN.OFS+1
	lda #$03
	sta PATTERN.OFS+2
	lda #$00
	sta PATTERN.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1A
	sta PATTERN.WIDTH
	lda #$00
	sta PATTERN.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$18
	sta PATTERN.HEIGHT
	lda #$00
	sta PATTERN.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$A3
	sta PATTERN0.OFS
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$13
	sta PATTERN1.OFS
	lda #$A6
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$D7
	sta PATTERN2.OFS
	lda #$A6
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 77

	lda #$09
	sta PATTERN3.OFS
	lda #$AC
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 78

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 79

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 81

	lda #$35
	sta PATTERN4.OFS
	lda #$AF
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 82

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 83

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 144

	lda #$01
	sta MOUS.FIRE

; optimize OK (arkanoid_vbxe.pas), line = 146

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 148

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 151

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 152

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3B86

; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 156

	jsr MOUSERESET

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 159

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 161

	jeq l_3B9D
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_3B9D

; optimize OK (arkanoid_vbxe.pas), line = 163

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3B86

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 171

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $14A00
adr.MOUS	= DATAORIGIN+$00DE	; [13] RECORD
.var MOUS	= adr.MOUS .word
MOUS.X	= DATAORIGIN+$00DE
MOUS.Y	= DATAORIGIN+$00E0
MOUS.LEFT	= DATAORIGIN+$00E2
MOUS.RIGHT	= DATAORIGIN+$00E4
MOUS.TOP	= DATAORIGIN+$00E6
MOUS.BOTTOM	= DATAORIGIN+$00E8
MOUS.FIRE	= DATAORIGIN+$00EA
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.VBXE_RAM	= DATAORIGIN+$00EB	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$00EB
VBXE_RAM.SIZE	= DATAORIGIN+$00EF
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$008E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0099
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$00AF
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$00B8
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$00C2
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$00C6
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00D1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00DD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$0108	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$0108
BALLDATA.HEIGHT	= DATAORIGIN+$010A
BALLDATA.OFS	= DATAORIGIN+$010C
adr.PLAYSCREEN	= DATAORIGIN+$0110	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$0110
PLAYSCREEN.HEIGHT	= DATAORIGIN+$0112
PLAYSCREEN.OFS	= DATAORIGIN+$0114
adr.PLAYVAUS	= DATAORIGIN+$0118	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$0118
PLAYVAUS.HEIGHT	= DATAORIGIN+$011A
PLAYVAUS.OFS	= DATAORIGIN+$011C
adr.NORMAL	= DATAORIGIN+$0120	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$0120
NORMAL.HEIGHT	= DATAORIGIN+$0122
NORMAL.OFS	= DATAORIGIN+$0124
adr.ENLARGED	= DATAORIGIN+$0128	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$0128
ENLARGED.HEIGHT	= DATAORIGIN+$012A
ENLARGED.OFS	= DATAORIGIN+$012C
adr.LASERS	= DATAORIGIN+$0130	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$0130
LASERS.HEIGHT	= DATAORIGIN+$0132
LASERS.OFS	= DATAORIGIN+$0134
adr.EXPLOSION	= DATAORIGIN+$0138	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$0138
EXPLOSION.HEIGHT	= DATAORIGIN+$013A
EXPLOSION.OFS	= DATAORIGIN+$013C
adr.NEWVAUS	= DATAORIGIN+$0140	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$0140
NEWVAUS.HEIGHT	= DATAORIGIN+$0142
NEWVAUS.OFS	= DATAORIGIN+$0144
adr.PRESENTS	= DATAORIGIN+$0148	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0148
PRESENTS.HEIGHT	= DATAORIGIN+$014A
PRESENTS.OFS	= DATAORIGIN+$014C
adr.SOUNDFX	= DATAORIGIN+$0150	; [8] RECORD
.var SOUNDFX	= adr.SOUNDFX .word
SOUNDFX.WIDTH	= DATAORIGIN+$0150
SOUNDFX.HEIGHT	= DATAORIGIN+$0152
SOUNDFX.OFS	= DATAORIGIN+$0154
adr.SHINEWALL	= DATAORIGIN+$0158	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$0158
SHINEWALL.HEIGHT	= DATAORIGIN+$015A
SHINEWALL.OFS	= DATAORIGIN+$015C
adr.MINIVAUS	= DATAORIGIN+$0160	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0160
MINIVAUS.HEIGHT	= DATAORIGIN+$0162
MINIVAUS.OFS	= DATAORIGIN+$0164
adr.LEVELSEL	= DATAORIGIN+$0168	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0168
LEVELSEL.HEIGHT	= DATAORIGIN+$016A
LEVELSEL.OFS	= DATAORIGIN+$016C
adr.LETTERS	= DATAORIGIN+$0170	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0170
LETTERS.HEIGHT	= DATAORIGIN+$0172
LETTERS.OFS	= DATAORIGIN+$0174
adr.SHOOTS	= DATAORIGIN+$0178	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0178
SHOOTS.HEIGHT	= DATAORIGIN+$017A
SHOOTS.OFS	= DATAORIGIN+$017C
adr.FLUX	= DATAORIGIN+$0180	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0180
FLUX.HEIGHT	= DATAORIGIN+$0182
FLUX.OFS	= DATAORIGIN+$0184
adr.VAUS	= DATAORIGIN+$0188	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0188
VAUS.Y	= DATAORIGIN+$0189
VAUS.OLDX	= DATAORIGIN+$018A
VAUS.OLDY	= DATAORIGIN+$018C
VAUS.OLDLEN	= DATAORIGIN+$018E
VAUS.WIDTH	= DATAORIGIN+$0190
VAUS.HEIGHT	= DATAORIGIN+$0191
VAUS.FLASH	= DATAORIGIN+$0192
VAUS.IFLASH	= DATAORIGIN+$0193
VAUS.LETTER	= DATAORIGIN+$0194
adr.PATTERN	= DATAORIGIN+$0195	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0195
PATTERN.HEIGHT	= DATAORIGIN+$0197
PATTERN.OFS	= DATAORIGIN+$0199
adr.PATTERN0	= DATAORIGIN+$019D	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$019D
PATTERN0.HEIGHT	= DATAORIGIN+$019F
PATTERN0.OFS	= DATAORIGIN+$01A1
adr.PATTERN1	= DATAORIGIN+$01A5	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$01A5
PATTERN1.HEIGHT	= DATAORIGIN+$01A7
PATTERN1.OFS	= DATAORIGIN+$01A9
adr.PATTERN2	= DATAORIGIN+$01AD	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$01AD
PATTERN2.HEIGHT	= DATAORIGIN+$01AF
PATTERN2.OFS	= DATAORIGIN+$01B1
adr.PATTERN3	= DATAORIGIN+$01B5	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$01B5
PATTERN3.HEIGHT	= DATAORIGIN+$01B7
PATTERN3.OFS	= DATAORIGIN+$01B9
adr.PATTERN4	= DATAORIGIN+$01BD	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$01BD
PATTERN4.HEIGHT	= DATAORIGIN+$01BF
PATTERN4.OFS	= DATAORIGIN+$01C1
STATUS	= DATAORIGIN+$01C5
SUCCESS	= DATAORIGIN+$01C6
REMAIN_BLK	= DATAORIGIN+$01C7
TOTALWALL	= DATAORIGIN+$01C8
adr.SCORE	= DATAORIGIN+$01C9	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$01C9] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$01D5] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$01D8] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$01DB
SCORE.PL_NUMB	= DATAORIGIN+$01DF
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01E0] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$01E3
CUR_PLAYER	= DATAORIGIN+$01E4
adr.SHINEREC	= DATAORIGIN+$01E5	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$01E5
SHINEREC.YB	= DATAORIGIN+$01E6
SHINEREC.FRAME	= DATAORIGIN+$01E7
SHINEREC.BLOCK	= DATAORIGIN+$01E8
SHINEREC.ACTIVE	= DATAORIGIN+$01E9
LV	= DATAORIGIN+$01EA
TRAINER	= DATAORIGIN+$01EC
adr.LETT	= DATAORIGIN+$01ED	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01ED
LETT.Y	= DATAORIGIN+$01EE
LETT.TYP	= DATAORIGIN+$01EF
LETT.FRAME	= DATAORIGIN+$01F1
LETT.SUBFRAME	= DATAORIGIN+$01F2
LETT.ACTIVE	= DATAORIGIN+$01F3
LETT.INCOMING	= DATAORIGIN+$01F4
LETT.NEXTX	= DATAORIGIN+$01F6
LETT.NEXTY	= DATAORIGIN+$01F8
LETT.NEXTTYPE	= DATAORIGIN+$01FA
LETT.LAST	= DATAORIGIN+$01FC
adr.FIRE	= DATAORIGIN+$01FE	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01FE
FIRE.Y	= DATAORIGIN+$01FF
FIRE.SHOT	= DATAORIGIN+$0200
FIRE.AVL	= DATAORIGIN+$0201
FIRE.NW	= DATAORIGIN+$0202
BALLS_IN_PLAY	= DATAORIGIN+$0203
SCRFLUX	= DATAORIGIN+$0204
SCRFLUXCNT	= DATAORIGIN+$0205
SOUND_ON	= DATAORIGIN+$0206
HLP	= DATAORIGIN+$0207
F_HLP	= DATAORIGIN+$0209
adr.DEF_PAL	= [DATAORIGIN+$020D] .array [768]
.var DEF_PAL	= adr.DEF_PAL .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.TMP	= $C200
.var TMP	= adr.TMP .word
adr.MODY	= $C300
.var MODY	= adr.MODY .word
adr.MODX	= $C400
.var MODX	= adr.MODX .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
RND	= $D20A
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
.by  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1953

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
.endm

	end
