; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/09/20] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	RCDATA 'atan_tab2.dat' adr.ATAN_TAB 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'flux2.bmp' FLUX2_OFS 0 1 0 0 0 0 0 0
	XBMP 'title.bmp' PRESENTS_OFS 0 1 0 0 0 0 0 0
	XBMP 'playscreen.bmp' PLAYSCREEN_OFS 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010183000
	sta X

; -------------------  ASM Block 00000007  -------------------

	lda :edx
	bpl @+

	eor #$ff
	add #1
@
	sta Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$000C
GETCOLOR	= DATAORIGIN+$000D
VIDEORAM	= DATAORIGIN+$000E
adr.LASTARCCOORDS	= DATAORIGIN+$0010	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0010
LASTARCCOORDS.Y	= DATAORIGIN+$0012
LASTARCCOORDS.XSTART	= DATAORIGIN+$0014
LASTARCCOORDS.YSTART	= DATAORIGIN+$0016
LASTARCCOORDS.XEND	= DATAORIGIN+$0018
LASTARCCOORDS.YEND	= DATAORIGIN+$001A
WIN_LEFT	= DATAORIGIN+$001C
WIN_RIGHT	= DATAORIGIN+$001E
WIN_TOP	= DATAORIGIN+$0020
WIN_BOTTOM	= DATAORIGIN+$0022
SCANLINE_WIDTH	= DATAORIGIN+$0024
CURRENTX	= DATAORIGIN+$0025
CURRENTY	= DATAORIGIN+$0027

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0065
POSITION	= DATAORIGIN+$0067
SIZE	= DATAORIGIN+$0069
ADR	= DATAORIGIN+$006B
SIZ	= DATAORIGIN+$006F

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_0169
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_0169
	cmp #$1F
	jne l_0178

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0178
	cmp #$18
	jne l_0187

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_0187

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0073
S	= DATAORIGIN+$0074
@CASETMP_0005	= DATAORIGIN+$0076

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0077

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0078

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0079
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETOVERLAYADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000125  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+6
	lda a+1
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+7
	lda a+2
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+8

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= DATAORIGIN+$007D

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$0081

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0035	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0035
VRAM.SIZE	= DATAORIGIN+$0039
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0082

	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	XSFX						; UNIT

.local	SFX_CHANNEL_OFF					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000147  -------------------

	txa
	asl @
	tay
	lda #$ff
	sta adr.SFX_CNT,x
	lda #$00
	sta adr.SFX_NO,x
	sta adr.SFX_TIME,x
	sta adr.SFX_REPEAT,x
	sta adr.SFX_RTS,x
	sta VPOKEY,y
	sta VPOKEY+1,y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SFX_PROCEED					; PROCEDURE | ASSEMBLER | KEEP

; -------------------  ASM Block 00000148  -------------------


; ================================================ LEVEL 2
; === SFX ENGINE ====
;xSFX_ENGINE - jump here 1 per frame at least
;
;xSFX_ENGINE+3  in:  A=sfx, X=channel, C=1 (force)
;                    A=sfx, C=0 (find free channel)
;               out: C=1 no free channel
;                    C=0 ok
;
;xSFX_ENGINE+6  in:  X=channel - will immediately terminate SFX on the specified channel
; ===
;
; Command:
;
;1. TIME,AUDF,AUDC          ; graj TIME ilość ramek, zapisz rejestry AUDF, AUDC
;2. REPF,TIME,COUNT,AUDC    ; powtórz COUNT razy: graj TIME ilosc ramek, zainicjuj AUDC, wpisuj AUDF COUNT razy
;3. REPC,TIME,COUNT,AUDF    ; powtórz COUNT razy: graj TIME ilosc ramek, zainicjuj AUDF, wpisuj AUDC COUNT razy
;4. LOOP                    ; powtórz ten sam dźwięk od komendy na pozycji loop
;5. RTS                     ; koniec opisu dźwięku
;6. JSR nnnnn               ; wywołaj SFX nr. nn i po jego zakończeniu wróć kontynuuj odtwarzanie obecnego
;7. JMP nnnnn               ; skocz do SFX nr.
;
; Code:
;
; TIME = $01..$0f
; REPF = $c0
; REPC = $80
; LOOP = $00,NUM
; RTS  = $00,$ff
; JSR  = $a0,SFX
; JMP  = $e0,SFX


xSFX_ENGINE     jmp xSFX_PROCEED         ; xSFX_ENGINE
;xSFX_START      jmp SFX_INSERT           ; xSFX_ENGINE+3
;xSFX_STOP       jmp SFX_CHANNEL_OFF      ; xSFX_ENGINE+6


SFX_ENDRTS	jsr GET_BYTE

		tay
                dey
                cmp #$ff
                beq SFX_RTSEND
                jmp SFX_RELOAD

SFX_RTSEND      lda adr.SFX_RTS,x
                bne SFX_DORTS
                jsr SFX_CHANNEL_OFF
                jmp SFX_NXTCH

SFX_DORTS       pha
                lda #$00
                sta adr.SFX_RTS,x
                lda adr.SFX_RCNT,x
                sta adr.SFX_CNT,x
                jmp SFX_DORTSF

SFX_REP         dec adr.SFX_REPEAT,x
                lda adr.SFX_RTIME,x
                sta adr.SFX_TIME,x
                lda #$00
                lda adr.SFX_FLAG,x
                asl @
                bcs SFX_DF
                bcc SFX_DC

xSFX_PROCEED    ldx #3
SFX_CONTCH      lda adr.SFX_NO,x
                bne SFX_PROCED
SFX_NXTCH       dex
                bpl SFX_CONTCH
                rts

SFX_PROCED      ldy adr.SFX_TIME,x
                bne SFX_CONTTONE
SFX_CONTCHJ     tay
                lda adr.SFX_ADR_TAB-1,y
		beq SFX_NXTCH

                sta SFXZP+1

                lda adr.SFX_ADR_TAB-2,y
                sta SFXZP

                ldy adr.SFX_CNT,x
                lda adr.SFX_REPEAT,x
                bne SFX_REP
SFX_RELOAD
		jsr GET_BYTE

                beq SFX_ENDRTS
SFX_TOKEN       asl @
                bcc SFX_TIM
                asl @
                ror adr.SFX_FLAG,x
                asl @
                bcs SFX_JUMP

		jsr GET_BYTE

                sta adr.SFX_RTIME,x

		jsr GET_BYTE

                sta adr.SFX_REPEAT,x
                lda adr.SFX_FLAG,x
                asl @

		jsr GET_BYTE

                bcs SFX_C0C
                sta adr.SFX_AUDF,x
                bcc SFX_REP
SFX_C0C         sta adr.SFX_AUDC,x
                bcs SFX_REP

SFX_TIM         lsr @
                sta adr.SFX_TIME,x
SFX_DF
		jsr GET_BYTE

                sta adr.SFX_AUDF,x
                bcs SFX_N3
SFX_DC
		jsr GET_BYTE

                sta adr.SFX_AUDC,x
SFX_N3          tya
                sta adr.SFX_CNT,x
SFX_CONTTONE    txa
                asl @
                tay
                lda adr.SFX_AUDF,x
                sta VPOKEY,y
                lda adr.SFX_AUDC,x
                sta VPOKEY+1,y
                dec adr.SFX_TIME,x
                jmp SFX_NXTCH

SFX_JUMP        lsr @
                lsr @
                pha
                lda adr.SFX_FLAG,x
                bmi SFX_JMP
                lda adr.SFX_NO,x
                sta adr.SFX_RTS,x
                tya
                sta adr.SFX_RCNT,x
SFX_JMP         lda #$ff
                sta adr.SFX_CNT,x
SFX_DORTSF      pla
                sta adr.SFX_NO,x
                jmp SFX_CONTCHJ


GET_BYTE	iny
		lda SFXZP: $1000,y
		rts

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TSFX.INIT					; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@010180000
	sta TSFX
	sty TSFX+1

; -------------------  ASM Block 00000149  -------------------

		txa:pha

		lda sfx

                ldx #$03
SFX_FIND        ldy adr.SFX_NO,x
                beq SFX_SETNO
                dex
                bpl SFX_FIND
                sec
                bcs quit

SFX_SETNO       asl @
                sta adr.SFX_NO,x
                clc

quit		pla:tax

; ------------------------------------------------------------

TSFX	= DATAORIGIN+$00EC
SFX	= DATAORIGIN+$00EE

@VarData	= TSFX
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	TSFX.PLAY					; PROCEDURE | ASSEMBLER
	sta TSFX
	sty TSFX+1

; -------------------  ASM Block 00000151  -------------------

	txa:pha

	asl ntsc		; =0 PAL, =4 NTSC
	bcc skp

	lda #%00000100
	sta ntsc

	bne quit
skp
	jsr SFX_PROCEED

quit	pla:tax

; ------------------------------------------------------------

TSFX	= DATAORIGIN+$00EF

@VarData	= TSFX
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TSFX.CLEAR					; PROCEDURE | ASSEMBLER
	sta TSFX
	sty TSFX+1

; -------------------  ASM Block 00000152  -------------------

	ldy #$3f
	lda #0
	sta:rpl adr.SFX_ADR_TAB,y-

; ------------------------------------------------------------

TSFX	= DATAORIGIN+$00F1

@VarData	= TSFX
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TSFX.ADD					; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@010188000
	sta TSFX
	sty TSFX+1

; -------------------  ASM Block 00000153  -------------------

	ldy #2
loop	lda adr.SFX_ADR_TAB-1,y
	beq empty

	iny
	iny
	cpy #66
	bne loop

	sec
	jmp @exit

empty	lda asfx
	sta adr.SFX_ADR_TAB-2,y
	lda asfx+1
	sta adr.SFX_ADR_TAB-1,y

	clc

; ------------------------------------------------------------

TSFX	= DATAORIGIN+$00F3
ASFX	= DATAORIGIN+$00F5

@VarData	= TSFX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTANTIC', XSFX), line = 417

	jsr MISC.DETECTANTIC
	lda MISC.DETECTANTIC.RESULT
	jeq l_01C5

; optimize OK (XSFX), line = 418

	lda #$00
	jmp l_01D3
l_01C5

; optimize OK (XSFX), line = 420

	lda #$04
l_01D3
	sta NTSC

	rts

; ------------------------------------------------------------

VPOKEY	= $D200
adr.SFX_CNT	= [DATAORIGIN+$0083] .array [4]
.var SFX_CNT	= adr.SFX_CNT .word
adr.SFX_NO	= [DATAORIGIN+$0087] .array [4]
.var SFX_NO	= adr.SFX_NO .word
adr.SFX_TIME	= [DATAORIGIN+$008B] .array [4]
.var SFX_TIME	= adr.SFX_TIME .word
adr.SFX_AUDC	= [DATAORIGIN+$008F] .array [4]
.var SFX_AUDC	= adr.SFX_AUDC .word
adr.SFX_AUDF	= [DATAORIGIN+$0093] .array [4]
.var SFX_AUDF	= adr.SFX_AUDF .word
adr.SFX_FLAG	= [DATAORIGIN+$0097] .array [4]
.var SFX_FLAG	= adr.SFX_FLAG .word
adr.SFX_REPEAT	= [DATAORIGIN+$009B] .array [4]
.var SFX_REPEAT	= adr.SFX_REPEAT .word
adr.SFX_RTIME	= [DATAORIGIN+$009F] .array [4]
.var SFX_RTIME	= adr.SFX_RTIME .word
adr.SFX_RTS	= [DATAORIGIN+$00A3] .array [4]
.var SFX_RTS	= adr.SFX_RTS .word
adr.SFX_RCNT	= [DATAORIGIN+$00A7] .array [4]
.var SFX_RCNT	= adr.SFX_RCNT .word
adr.SFX_ADR_TAB	= [DATAORIGIN+$00AB] .array [32] .word
.var SFX_ADR_TAB	= adr.SFX_ADR_TAB .word
NTSC	= DATAORIGIN+$00EB

.endl							; UNIT XSFX

.local	NMI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000156  -------------------


 sta nmist

 sta regA
 stx regX
 sty regY

	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.PLAY


 lda regA: #$00
 ldx regX: #$00
 ldy regY: #$00


	rti						; ret
.endl

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000157  -------------------


seed = MAIN.SYSTEM.RndSeed

Random16:
	lda seed+1
	tay 		; store copy of high byte
	; compute seed+1 ($39>>1 = %11100)
	lsr @		; shift to consume zeroes on left...
	lsr @
	lsr @
	sta seed+1	; now recreate the remaining bits in reverse order... %111
	lsr @
	eor seed+1
	lsr @
	eor seed+1
	eor seed+0	; recombine with original low byte
	sta seed+1
	; compute seed+0 ($39 = %111001)
	tya		; original high byte
	sta seed+0
	asl @
	eor seed+0
	asl @
	eor seed+0
	asl @
	asl @
	asl @
	eor seed+0
	sta seed+0

	lda seed+1
	and #$03
	sta Result+1
	lda seed
	sta Result

loop	cpw Result range
	bcc @exit

	lsr Result+1
	ror Result

	jmp loop

@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$01DE
RESULT	= DATAORIGIN+$01E0

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000158  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod90Table,Y	; tablica: (X*256) mod 90
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda #0
    adc #0
    sta Result+1

    cpw Result #90
    BCC done
    SBW Result #90

    cpw Result #90
    BCC done
    SBW Result #90

    cpw Result #90
    BCC done
    SBW Result #90

done

    lda a+1
    bpl @exit

    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01E2
RESULT	= DATAORIGIN+$01E4

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD360						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000159  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod360Table,Y	; tablica: (X*256) mod 360
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda adr.Mod360Table+256,Y
    adc #0
    sta Result+1

    cpw Result #360
    BCC done
    SBW Result #360

    cpw Result #360
    BCC done
    SBW Result #360

    cpw Result #360
    BCC done
    SBW Result #360

done

    lda a+1
    bpl @exit

    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01E6
RESULT	= DATAORIGIN+$01E8

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	SINDEG						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 763

	lda A
	sta MOD360.A
	lda A+1
	sta MOD360.A+1
	jsr MOD360
	lda MOD360.RESULT
	sta A
	lda MOD360.RESULT+1
	sta A+1

; optimize OK (arkanoid_vbxe.pas), line = 765

	jpl l_01F9

; optimize OK (arkanoid_vbxe.pas), line = 766

	lda A
	add #$68
	sta A
	lda A+1
	adc #$01
	sta A+1
l_01F9

; optimize OK (arkanoid_vbxe.pas), line = 768

	lda A
	cmp #$5B
	lda A+1
	sbc #$00
	svc
	eor #$80
	jpl l_0216

; optimize OK (arkanoid_vbxe.pas), line = 769

	ldy A
	lda adr.SINTABLE,y
	sta RESULT
	lda adr.SINTABLE+90,y
	jmp l_0227
l_0216

; optimize OK (arkanoid_vbxe.pas), line = 770

	lda A
	cmp #$B5
	lda A+1
	sbc #$00
	svc
	eor #$80
	jpl l_0238

; optimize OK (arkanoid_vbxe.pas), line = 771

	lda #$B4
	sub A
	tay
	lda adr.SINTABLE,y
	sta RESULT
	lda adr.SINTABLE+90,y
	jmp l_024D
l_0238

; optimize OK (arkanoid_vbxe.pas), line = 772

	lda A
	cmp #$0F
	lda A+1
	sbc #$01
	svc
	eor #$80
	jpl l_025E

; optimize OK (arkanoid_vbxe.pas), line = 773

	ldy A
	lda #$00
	sub adr.SINTABLE-$B4,y
	sta RESULT
	lda #$00
	sbc adr.SINTABLE+90-$B4,y
	jmp l_0276
l_025E

; optimize OK (arkanoid_vbxe.pas), line = 775

	lda #$68
	sub A
	tay
	lda #$00
	sub adr.SINTABLE,y
	sta RESULT
	lda #$00
	sbc adr.SINTABLE+90,y
l_0227
l_024D
l_0276
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01EA
RESULT	= DATAORIGIN+$01EC

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	FASTSQRT					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 784

	lda I
	sta :STACKORIGIN+9
	lda I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda I+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda I+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$C0
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$1F
	sta I+3
	lda :STACKORIGIN+9
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	sta I+1

; optimize OK (arkanoid_vbxe.pas), line = 786

	lda I
	sta RESULT
	lda I+1
	sta RESULT+1
	lda I+2
	sta RESULT+2
	lda I+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$01EE
RESULT	= DATAORIGIN+$01F2
I	= DATAORIGIN+$01EE

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	ATAN2						; FUNCTION | REGISTER

; optimize OK (arkanoid_vbxe.pas), line = 943

	lda X+1
	jpl l_02AD

; optimize OK (arkanoid_vbxe.pas), line = 944

	lda #$00
	sub X
	sta SX
	lda #$00
	sbc X+1
	jmp l_02BF
l_02AD

; optimize OK (arkanoid_vbxe.pas), line = 946

	lda X
	sta SX
	lda X+1
l_02BF
	sta SX+1

; optimize OK (arkanoid_vbxe.pas), line = 948

	lda Y+1
	jpl l_02D5

; optimize OK (arkanoid_vbxe.pas), line = 949

	lda #$00
	sub Y
	sta SY
	lda #$00
	sbc Y+1
	jmp l_02E7
l_02D5

; optimize OK (arkanoid_vbxe.pas), line = 951

	lda Y
	sta SY
	lda Y+1
l_02E7
	sta SY+1

; --- WhileProlog
	jmp l_02EE
l_02EF

; optimize OK (arkanoid_vbxe.pas), line = 956

	lsr SX+1
	ror SX

; optimize OK (arkanoid_vbxe.pas), line = 957

	lsr SY+1
	ror SY
l_02EE

; optimize OK (arkanoid_vbxe.pas), line = 954

	lda SX+1
	jne l_02EF
	lda SX
	jmi l_02EF
	lda SY+1
	cmp #$00
	bne @+
	lda SY
	cmp #$80
@
	jcs l_02EF

; optimize OK (arkanoid_vbxe.pas), line = 960

	lda X+1
	jpl l_0328

; optimize OK (arkanoid_vbxe.pas), line = 961

	lda #$00
	sub SX
	sta X
	lda #$00
	sbc SX+1
	jmp l_033A
l_0328

; optimize OK (arkanoid_vbxe.pas), line = 963

	lda SX
	sta X
	lda SX+1
l_033A
	sta X+1

; optimize OK (arkanoid_vbxe.pas), line = 966

	lda Y+1
	jpl l_0350

; optimize OK (arkanoid_vbxe.pas), line = 967

	lda #$00
	sub SY
	sta Y
	lda #$00
	sbc SY+1
	jmp l_0362
l_0350

; optimize OK (arkanoid_vbxe.pas), line = 969

	lda SY
	sta Y
	lda SY+1
l_0362
	sta Y+1

; -------------------  ASM Block 00000160  -------------------

	txa:pha

octant	= :TMP			// temporary zeropage variable

	lda #$00
	sta octant

atan2		clc
		lda x
		bpl @+

		eor #$ff
		sec
@
		tax
		rol octant

		clc
		lda y
		bpl @+

		sec
		eor #$ff
@
		tay
		rol octant

		lda adr.log2_tab,x
		sbc adr.log2_tab,y
		scc
		eor #$ff
		tax

		lda octant
		rol @
		and #%111
		tay

		lda adr.atan_tab,x
		eor adr.octant_adjust,y

		sta Result

	pla:tax

@exit

; ------------------------------------------------------------

Y	= :EDX
X	= :ECX
RESULT	= :STACKORIGIN-4
adr.OCTANT_ADJUST	= CODEORIGIN+$02C5
.var OCTANT_ADJUST	= adr.OCTANT_ADJUST .word
SX	= :STACKORIGIN-2
SY	= :STACKORIGIN-4

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 21

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 23

	sta @CASETMP_0007
	cmp #$0B
	jne l_0380
@

; optimize OK (service.pas), line = 24

	mvy X+1 :bp+1
	ldy X
	lda (:bp),y
	cmp #$0B
	jcc l_0392

; optimize OK (service.pas), line = 25

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y

; optimize OK (service.pas), line = 27

	mvy X+1 :bp+1
	ldy X
	lda (:bp),y
	cmp #$0A
	jcs l_03A6
	ldy #$00
	lda #$0A
	sta (:bp2),y
l_03A6
l_0392
	jmp a_0007
l_0380
	cmp #$07
	jne l_03B6

; optimize OK (service.pas), line = 30

	mwy X :bp2
	ldy #$00
	lda #$D8
	sub VAUS.WIDTH
	sta :STACKORIGIN+10
	lda (:bp2),y
	cmp :STACKORIGIN+10
	jcs l_03CE

; optimize OK (service.pas), line = 31

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y

; optimize OK (service.pas), line = 33

	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_03E8
	lda #$D8
	sub VAUS.WIDTH
	sta (:bp2),y
l_03E8
l_03CE
l_03B6
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$01F6
A	= DATAORIGIN+$01F8
@CASETMP_0007	= DATAORIGIN+$01F9

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 45

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01FA

	rts						; ret
.endl

.local	BLITZERO					; PROCEDURE | REGISTER

; -------------------  ASM Block 00000161  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 60

	lda SRC+2
	sta BLT_ZERO.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 61

	lda SRC+1
	sta BLT_ZERO.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 62

	lda SRC
	sta BLT_ZERO.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 64

	lda HLP+1
	sta BLT_ZERO.DST_ADR.BYTE1

; optimize OK (service.pas), line = 65

	lda HLP
	sta BLT_ZERO.DST_ADR.BYTE0

; optimize OK (service.pas), line = 67

	lda W
	sta BLT_ZERO.SRC_STEP_Y
	lda W+1
	sta BLT_ZERO.SRC_STEP_Y+1

; optimize OK (service.pas), line = 69

	ldy H
	dey
	sty BLT_ZERO.BLT_HEIGHT

; optimize OK (service.pas), line = 71

	lda W
	sub #$01
	sta BLT_ZERO.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_ZERO.BLT_WIDTH+1

; -------------------  ASM Block 00000162  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 77

	lda BLT_ZERO
	sta VBXE.RUNBCB.A
	lda BLT_ZERO+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_044D

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 78

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_044D

; ------------------------------------------------------------

SRC	= :EDX
W	= :ECX
H	= :EAX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@0201810000181000

; optimize OK (service.pas), line = 86

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 87

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 95

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 96

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 97

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 99

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 100

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 101

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 103

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 105

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 107

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_04A4

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 108

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_04A4

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$01FB

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP2TEMP					; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 116

	lda #$02
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 117

	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 119

	lda HLP+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 120

	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 121

	lda HLP
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 122

	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 124

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 126

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda #$00
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 128

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_04EA

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 129

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_04EA

; optimize OK (service.pas), line = 131

	lda #$03
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 132

	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 134

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_04FC

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 135

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_04FC

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITCLR						; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 143

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 144

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 146

	lda #$04
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 148

	lda HLP+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 149

	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 150

	lda HLP
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 151

	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 153

	lda #$02
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 155

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 157

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 159

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0549

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 160

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0549

; optimize OK (service.pas), line = 162

	lda #$03
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 164

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0557

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 165

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0557

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITSCR						; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 173

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 174

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 176

	lda #$02
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 178

	lda #$00
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 179

	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 181

	lda #$02
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 182

	lda HLP+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 183

	lda HLP
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 185

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 187

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 189

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_05A1

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 190

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_05A1

; optimize OK (service.pas), line = 192

	lda #$03
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 194

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_05AF

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 195

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_05AF

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX
W	= :EAX
H	= DATAORIGIN+$01FC

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE | REGISTER

; -------------------  ASM Block 00000163  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 241

	lda HLP+1
	sta BLT_BOX.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 242

	sta BLT_BOX.DST_ADR.BYTE1

; optimize OK (service.pas), line = 244

	lda HLP
	sta BLT_BOX.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 245

	sta BLT_BOX.DST_ADR.BYTE0

; optimize OK (service.pas), line = 247

	lda W
	sub #$01
	sta BLT_BOX.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_BOX.BLT_WIDTH+1

; optimize OK (service.pas), line = 248

	ldy H
	dey
	sty BLT_BOX.BLT_HEIGHT

; -------------------  ASM Block 00000164  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 254

	lda BLT_BOX
	sta VBXE.RUNBCB.A
	lda BLT_BOX+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_05F2

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 255

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_05F2

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01FD

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 323

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_0614
	lda A
	sta RESULT
	lda A+1
	jmp l_0623
l_0614

; optimize OK (service.pas), line = 324

	lda B
	sta RESULT
	lda B+1
l_0623
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01FF
B	= DATAORIGIN+$0201
RESULT	= DATAORIGIN+$0203

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 330

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_063E
	lda A
	sta RESULT
	lda A+1
	jmp l_064D
l_063E

; optimize OK (service.pas), line = 331

	lda B
	sta RESULT
	lda B+1
l_064D
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0205
B	= DATAORIGIN+$0207
RESULT	= DATAORIGIN+$0209

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 340

	sta STATUS

; -------------------  ASM Block 00000165  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$020B

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 388

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 390

	tay

l_066D
; --- ForToDoCondition
	cpy #$10
	jcs l_067B

; optimize OK (service.pas), line = 392

	lda HLP
	sta adr.MUL90_16,y
	lda HLP+1
	sta adr.MUL90_16+16,y

; optimize OK (service.pas), line = 394

	lda HLP
	add #$5A
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	iny
	jne l_066D
l_067B
	sty Y

; optimize OK (service.pas), line = 399

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 401

	sta Y

l_0696
; --- ForToDoCondition
	lda #$0A
	sta @BYTE.MOD.B
	lda Y
	sta @BYTE.MOD.A
	jsr @BYTE.MOD
	lda @BYTE.MOD.RESULT
	ldy Y
	sta adr.MOD10TABLE,y

; optimize OK (service.pas), line = 404

	lda #$00
	sta @WORD.MOD.A
	lda Y
	sta @WORD.MOD.A+1
	lda #$5A
	sta @WORD.MOD.B
	lda #$00
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MOD90TABLE,y

; optimize OK (service.pas), line = 405

	lda #$00
	sta @WORD.MOD.A
	lda Y
	sta @WORD.MOD.A+1
	lda #$68
	sta @WORD.MOD.B
	lda #$01
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	ldy Y
	lda @WORD.MOD.RESULT
	sta adr.MOD360TABLE,y
	lda @WORD.MOD.RESULT+1
	sta adr.MOD360TABLE+256,y

; optimize OK (service.pas), line = 407

	ldy Y
	cpy #$C8
	jcc l_06E5

; optimize OK (service.pas), line = 408

	lda #$00
	sta adr.ROW,y
	lda #$FA
	sta adr.ROW+256,y
	jmp l_06F6
l_06E5

; optimize OK (service.pas), line = 410

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 412

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1
l_06F6

; --- ForToDoEpilog
	inc Y
	jne l_0696
l_06A4

; ------------------------------------------------------------

Y	= DATAORIGIN+$020C

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 428

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_071A

; optimize FAIL ('@print', service.pas), line = 429

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_071A

; optimize OK (service.pas), line = 433

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 434

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 436

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 438

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 439

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 441

	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A
	sta VBXE.SETOVERLAYADDRESS.A+1
	lda #$03
	sta VBXE.SETOVERLAYADDRESS.A+2
	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A+3
	jsr VBXE.SETOVERLAYADDRESS

; optimize OK (service.pas), line = 443

	lda #$00
	sta VBXE_RAM.POSITION
	sta VBXE_RAM.POSITION+1
	lda #$03
	sta VBXE_RAM.POSITION+2
	lda #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 444

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$03
	sta VBXE_RAM.SIZE+2
	lda #$00
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 445

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 447

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000166  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 453

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 454

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 455

	lda BLT_BOX
	sta :bp2
	lda BLT_BOX+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 456

	lda BLT_ZERO
	sta :bp2
	lda BLT_ZERO+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 459

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 460

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 464

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 468

	lda #$03
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 470

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 471

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 473

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 475

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 476

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 478

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 480

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 482

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; optimize OK (service.pas), line = 486

	lda #$02
	sta BLT_BOX.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 488

	lda #$03
	sta BLT_BOX.DST_ADR.BYTE2

; optimize OK (service.pas), line = 490

	lda #$40
	sta BLT_BOX.DST_STEP_Y
	lda #$01
	sta BLT_BOX.DST_STEP_Y+1

; optimize OK (service.pas), line = 491

	lda #$40
	sta BLT_BOX.SRC_STEP_Y
	lda #$01
	sta BLT_BOX.SRC_STEP_Y+1

; optimize OK (service.pas), line = 493

	sta BLT_BOX.SRC_STEP_X

; optimize OK (service.pas), line = 494

	sta BLT_BOX.DST_STEP_X

; optimize OK (service.pas), line = 498

	lda #$FF
	sta BLT_BOX.BLT_AND_MASK

; optimize OK (service.pas), line = 502

	lda #$03
	sta BLT_ZERO.DST_ADR.BYTE2

; optimize OK (service.pas), line = 504

	lda #$40
	sta BLT_ZERO.DST_STEP_Y
	lda #$01
	sta BLT_ZERO.DST_STEP_Y+1

; optimize OK (service.pas), line = 506

	sta BLT_ZERO.SRC_STEP_X

; optimize OK (service.pas), line = 507

	sta BLT_ZERO.DST_STEP_X

; optimize OK (service.pas), line = 509

	sta BLT_ZERO.BLT_CONTROL

; optimize OK (service.pas), line = 511

	lda #$FF
	sta BLT_ZERO.BLT_AND_MASK

; -------------------  ASM Block 00000167  -------------------

	  fxs FX_MEMS #$00
	
; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 518

	jsr SYSTEM.PAUSE.@00

; -------------------  ASM Block 00000168  -------------------

  sei
  lda #0
  sta nmien
  sta irqen
  
  lda #$fe
  sta portb
  
  mwa #NMI $fffa
 
  mva #$40 nmien
 
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 550

	lda SHINEREC.XB
	sta XB

; optimize OK (service.pas), line = 551

	lda SHINEREC.YB
	sta YB

; optimize OK (service.pas), line = 553

	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; -------------------  ASM Block 00000169  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 560

	ldy I
	lda adr.WALL,y
	cmp #$09
	jcc l_07E5

; optimize OK (service.pas), line = 562

	lda SHINEREC.FRAME
	lsr @
	sta FRAME

; optimize OK (service.pas), line = 563

	lda adr.WALL,y
	cmp #$0A
	jeq l_0805
	lda FRAME
	add #$05
	sta FRAME
l_0805

; optimize OK (service.pas), line = 565

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XF

; optimize OK (service.pas), line = 566

	lda YB
	asl @
	asl @
	asl @
	add #$16
	sta YF

; optimize OK (service.pas), line = 567

	lda FRAME
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 570

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 572

	lda YF
	add Y
	tay
	lda XF
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$00
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	add FR
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$91
	adc FR+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000
l_07E5

; -------------------  ASM Block 00000170  -------------------

	  fxs FX_MEMS #$00
       
; optimize FAIL (0, service.pas), line = 591

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 592

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0868
	lda #$00
	sta SHINEREC.ACTIVE
l_0868

; ------------------------------------------------------------

XB	= DATAORIGIN+$020D
YB	= DATAORIGIN+$020E
FRAME	= DATAORIGIN+$020F
XF	= DATAORIGIN+$0210
YF	= DATAORIGIN+$0211
FR	= DATAORIGIN+$0212
Y	= DATAORIGIN+$0214
I	= DATAORIGIN+$0215

@VarData	= XB
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 602

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 603

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 611

	lda SHINEREC.ACTIVE
	jeq l_0888
	jsr UNSHINE_BLOCK
l_0888

; optimize OK (service.pas), line = 613

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 614

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 615

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 616

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 617

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0216
YB	= DATAORIGIN+$0217

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 624

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_08C9
	jsr SHINE_BLOCK
l_08C9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_08D2

; optimize OK (service.pas), line = 633

	lda #$64
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda RAND.RESULT+1
	sta RN+1

; optimize OK (service.pas), line = 634

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 635

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_08E0

; optimize FAIL (0, service.pas), line = 640

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 641

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 644

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_08E0

; optimize OK (service.pas), line = 648

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_08D2

; optimize OK (service.pas), line = 650

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0218
RN	= DATAORIGIN+$021A
SUM	= DATAORIGIN+$021C
LETTER	= DATAORIGIN+$021E

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 658

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$9E
	add :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$CC
	add :STACKORIGIN+10
	sta SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta SRC+3

; -------------------  ASM Block 00000171  -------------------

       fxs FX_MEMS #$80
     
; optimize OK (service.pas), line = 664

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 665

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 666

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 668

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 670

	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 671

	lda HLP
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000172  -------------------

       fxs FX_MEMS #$00
     
; optimize OK (service.pas), line = 677

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0220

@VarData	= SRC
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 685

	ldy LETT.Y
	cpy #$C8
	jcs l_0974

; optimize OK (service.pas), line = 687

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 689

	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_0974

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 698

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 699

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 705

	lda LETT.ACTIVE
	jeq l_09A1
	jsr DISABLE_LETTER
l_09A1

; optimize OK (service.pas), line = 707

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 708

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 709

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 710

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 711

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 712

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0224
YL	= DATAORIGIN+$0225
LETTER	= DATAORIGIN+$0226

@VarData	= XL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 718

	lda LETT.ACTIVE
	jeq l_09D2

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 720

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 721

	inc LETT.Y

; optimize OK (service.pas), line = 722

	lda LETT.Y
	cmp #$C8
	jcc l_09EA
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 723
	jmp l_09F5
l_09EA

; optimize FAIL ('PUT_LETTER', service.pas), line = 725

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 726

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 727

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0A0C

; optimize OK (service.pas), line = 729

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 730

	inc LETT.FRAME
l_0A0C

; optimize OK (service.pas), line = 733

	lda LETT.FRAME
	cmp #$08
	jne l_0A29
	lda #$00
	sta LETT.FRAME
l_0A29

; optimize OK (service.pas), line = 735

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0A82
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0A82
	jeq l_0A82
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0A82
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0A82
	jeq l_0A82
@

; optimize OK (service.pas), line = 742

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 743

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_09F5

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 744

	jsr DISABLE_LETTER
l_0A82

; optimize OK (service.pas), line = 748

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0AA0
l_09D2

; optimize OK (service.pas), line = 750

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0AB1

; optimize OK (service.pas), line = 751

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0AA0
l_0AB1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 761

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 763

	lda #$B4
	sta BLITZERO.SRC
	lda #$BE
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0228
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 773

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 775

	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$022C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 796

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 807

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0B13s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0B13s
	lda:sne #$01
l_0B13s	lda #$00
	sta B0

; optimize OK (service.pas), line = 808

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.X-DATAORIGIN
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0B2Bs
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.Y-DATAORIGIN
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0B2Bs
	lda:seq #$00
l_0B2Bs	lda #$01
	sta B1

; optimize OK (service.pas), line = 810

	lda B0
	and B1
	jeq l_0B3D

; optimize OK (service.pas), line = 811

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0B3D

; optimize OK (service.pas), line = 813

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 815

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 816

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0230
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$0234
B1	= DATAORIGIN+$0235

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 828

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 829

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 831

	lda SX+1
	jpl l_0B6F

; optimize OK (service.pas), line = 832

	lda #$00
	sub SX
	sta A
	lda #$00
	sbc SX+1
	jmp l_0B81
l_0B6F

; optimize OK (service.pas), line = 834

	lda SX
	sta A
	lda SX+1
l_0B81
	sta A+1

; optimize OK (service.pas), line = 836

	lda SY+1
	jpl l_0B97

; optimize OK (service.pas), line = 837

	lda #$00
	sub SY
	sta B
	lda #$00
	sbc SY+1
	jmp l_0BA9
l_0B97

; optimize OK (service.pas), line = 839

	lda SY
	sta B
	lda SY+1
l_0BA9
	sta B+1

; optimize OK (service.pas), line = 841

	lda A+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 842

	lda B+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 844

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta I
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+3

; optimize OK (service.pas), line = 846

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	inx
	lda FASTSQRT.RESULT
	sta :FPMAN0
	lda FASTSQRT.RESULT+1
	sta :FPMAN1
	lda FASTSQRT.RESULT+2
	sta :FPMAN2
	lda FASTSQRT.RESULT+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta LEN
	lda :FPMAN1
	sta LEN+1
	dex

; optimize OK (service.pas), line = 848

	lda LEN+1
	ora LEN
	jeq @exit
l_0BE2

; optimize OK (service.pas), line = 852

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda A
	sta :eax
	lda A+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1

; optimize OK (service.pas), line = 854

	ora X
	jeq @exit
l_0C05

; optimize OK (service.pas), line = 856

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda B
	sta :eax
	lda B+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1

; optimize OK (service.pas), line = 858

	ora Y
	jeq @exit
l_0C28

; optimize OK (service.pas), line = 860

	lda X
	cmp #$00
	lda X+1
	sbc #$04
	svc
	eor #$80
	jmi l_0C3C
	lda #$FF
	sta X
	lda #$03
	sta X+1
l_0C3C

; optimize OK (service.pas), line = 861

	lda Y
	cmp #$00
	lda Y+1
	sbc #$04
	svc
	eor #$80
	jmi l_0C54
	lda #$FF
	sta Y
	lda #$03
	sta Y+1
l_0C54

; optimize OK (service.pas), line = 863

	lda SX+1
	jpl l_0C6C
	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
l_0C6C

; optimize OK (service.pas), line = 864

	lda SY+1
	jpl l_0C88
	lda #$00
	sub Y
	sta Y
	lda #$00
	sbc Y+1
	sta Y+1
l_0C88

; optimize OK (service.pas), line = 866

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda X+1
	sta (:bp2),y

; optimize OK (service.pas), line = 867

	ldy #BALL.SPEEDY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda Y+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0236
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
SPEED	= DATAORIGIN+$023A
SX	= DATAORIGIN+$023C
SY	= DATAORIGIN+$023E
X	= DATAORIGIN+$0240
Y	= DATAORIGIN+$0242
A	= DATAORIGIN+$0244
B	= DATAORIGIN+$0246
LEN	= DATAORIGIN+$0248
I	= DATAORIGIN+$024A

@VarData	= BALL
@VarDataSize	= 22

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 913

	lda ANGLE
	add #$5A
	sta SINDEG.A
	lda ANGLE+1
	adc #$00
	sta SINDEG.A+1
	jsr SINDEG
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SINDEG.RESULT
	sta (:bp2),y
	iny
	lda SINDEG.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 914

	lda ANGLE
	sta SINDEG.A
	lda ANGLE+1
	sta SINDEG.A+1
	jsr SINDEG
	inx
	mva SINDEG.RESULT :STACKORIGIN,x
	mva SINDEG.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$024E
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
ANGLE	= DATAORIGIN+$0252

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 957

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta ATAN2.X
	iny
	lda (:bp2),y
	sta ATAN2.X+1
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta ATAN2.Y
	iny
	lda #$00
	sbc (:bp2),y
	sta ATAN2.Y+1
	jsr ATAN2
	ldy ATAN2.RESULT
	lda adr.SCALE360,y
	sta RESULT
	lda adr.SCALE360+256,y
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0254
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$0258

@VarData	= BALL
@VarDataSize	= 2

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 967

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 973

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 978

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 979

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 981

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 983

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 984

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$025A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$19
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 996

	lda BALL.SPEEDX+1
	jpl l_0D0A

; optimize OK (service.pas), line = 997

	lda #$00
	sub BALL.SPEEDX
	sta A
	lda #$00
	sbc BALL.SPEEDX+1
	jmp l_0D1C
l_0D0A

; optimize OK (service.pas), line = 999

	lda BALL.SPEEDX
	sta A
	lda BALL.SPEEDX+1
l_0D1C
	sta A+1

; optimize OK (service.pas), line = 1001

	lda BALL.SPEEDY+1
	jpl l_0D32

; optimize OK (service.pas), line = 1002

	lda #$00
	sub BALL.SPEEDY
	sta B
	lda #$00
	sbc BALL.SPEEDY+1
	jmp l_0D44
l_0D32

; optimize OK (service.pas), line = 1004

	lda BALL.SPEEDY
	sta B
	lda BALL.SPEEDY+1
l_0D44
	sta B+1

; optimize OK (service.pas), line = 1006

	lda A
	sta :STACKORIGIN+9
	lda A+1
	and #$03
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	sta :bp2
	lda #$A0
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B
	sta :STACKORIGIN+10
	lda B+1
	and #$03
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	sta :bp2
	lda #$A0
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta I
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta I+1
	iny
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y
	sta I+2
	iny
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1008

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	inx
	lda FASTSQRT.RESULT
	sta :FPMAN0
	lda FASTSQRT.RESULT+1
	sta :FPMAN1
	lda FASTSQRT.RESULT+2
	sta :FPMAN2
	lda FASTSQRT.RESULT+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	dex
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$025E	; [26] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$025E
BALL.Y	= DATAORIGIN+$0260
BALL.FINEX	= DATAORIGIN+$0262
BALL.FINEY	= DATAORIGIN+$0263
BALL.OLDX	= DATAORIGIN+$0264
BALL.OLDY	= DATAORIGIN+$0266
BALL.SPEED	= DATAORIGIN+$0268
BALL.FINESPEED	= DATAORIGIN+$026A
BALL.SPEEDX	= DATAORIGIN+$026C
BALL.SPEEDY	= DATAORIGIN+$026E
BALL.SBD	= DATAORIGIN+$0270
BALL.BRWHIT	= DATAORIGIN+$0272
BALL.INPLAY	= DATAORIGIN+$0273
BALL.LAUNCH	= DATAORIGIN+$0274
BALL.ONVAUS	= DATAORIGIN+$0275
BALL.STM	= DATAORIGIN+$0277
RESULT	= DATAORIGIN+$0278
I	= DATAORIGIN+$027A
A	= DATAORIGIN+$027E
B	= DATAORIGIN+$0280

@VarData	= BALL.X
@VarDataSize	= 34

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1024

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDX-DATAORIGIN
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1025

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDY-DATAORIGIN
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1027

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1028

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1030

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y

; optimize OK (service.pas), line = 1031

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y

; optimize OK (service.pas), line = 1036

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0DC3

; optimize OK (service.pas), line = 1038

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1039

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$01
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1040

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y
l_0DC3

; optimize OK (service.pas), line = 1046

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0DF6

; optimize OK (service.pas), line = 1048

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1049

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1050

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y
l_0DF6

; optimize OK (service.pas), line = 1056

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0E29

; optimize OK (service.pas), line = 1058

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1059

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1060

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y
l_0E29

; optimize OK (service.pas), line = 1069

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1070

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1071

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 1074

	lda B0
	and B1
	and B2
	jeq l_0E88

; optimize OK (service.pas), line = 1078

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0EB7
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0EB7

; optimize OK (service.pas), line = 1081

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1083

	lda VAUS.LETTER
	cmp #$06
	jne l_0EDB
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0EDB

; optimize OK (service.pas), line = 1085

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1086

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1087

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0EDB

; optimize OK (service.pas), line = 1091

	lda #$06
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 1095

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1096

	ldy #BALL.SBD-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1099

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0F12

; optimize OK (service.pas), line = 1102

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1106

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1114

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1119

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F12

; optimize OK (service.pas), line = 1125

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0F53

; optimize OK (service.pas), line = 1127

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1128

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1129

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1130

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F53
l_0EB7
l_0E88

; optimize OK (service.pas), line = 1141

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0FA2

; optimize OK (service.pas), line = 1143

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1144

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0FA2

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0282
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$0286
B1	= DATAORIGIN+$0287
B2	= DATAORIGIN+$0288
X	= DATAORIGIN+$0289
Y	= DATAORIGIN+$028B
ANGLE	= DATAORIGIN+$028D

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1152

	lda VAUS.WIDTH
	sta VAUS.OLDLEN

; optimize OK (service.pas), line = 1153

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1154

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1160

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1161

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1168

	lda #$FF
	sta VAUS.OLDX

; optimize OK (service.pas), line = 1169

	sta VAUS.OLDY

; optimize OK (service.pas), line = 1170

	lda #$00
	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1174

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1178

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1179

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1180

	lda VAUS.WIDTH
	sta VAUS.OLDLEN

; optimize OK (service.pas), line = 1181

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1208

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1210

	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1212

	lda VAUS.WIDTH
	sta VAUS.OLDLEN

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1224

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1226

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_102B

; optimize FAIL (0, service.pas), line = 1228

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1229

	lda #$00
	sta VAUS.IFLASH
l_102B

; optimize OK (service.pas), line = 1232

	lda VAUS.FLASH
	cmp #$0B
	jcc l_1048
	lda #$00
	sta VAUS.FLASH
l_1048

; optimize OK (service.pas), line = 1242

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1244

	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000173  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1250

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1252

	lda HLP
	sta VIDEO
	lda HLP+1
	sta VIDEO+1
	lda #$03
	sta VIDEO+2
	lda #$00
	sta VIDEO+3

; optimize OK (service.pas), line = 1254

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1256

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1258

	lda #$00
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1259

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1261

	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1263

	ldy VAUS.WIDTH
	dey
	sty I

; optimize OK (service.pas), line = 1265

	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1267

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1268

	lda #$00
	sta BLT.BLT_XOR_MASK

; -------------------  ASM Block 00000174  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$028F
Y	= DATAORIGIN+$0290
VIDEO	= DATAORIGIN+$0291

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1307

	ldy #1
	lda VAUS.OLDX
	cmp #$FF
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX
	cmp VAUS.X
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_10F8
	jsr REMOVE_VAUS
l_10F8

; optimize OK (service.pas), line = 1309

	lda VAUS.X
	sta VAUS.OLDX

; optimize OK (service.pas), line = 1310

	lda VAUS.Y
	sta VAUS.OLDY

; optimize OK (service.pas), line = 1318

	lda X
	sta VAUS.X

; optimize OK (service.pas), line = 1319

	lda Y
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1321

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0295
Y	= DATAORIGIN+$0296

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1337

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1338

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1340

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000175  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1347

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1348

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1350

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1351

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1395

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1396

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1398

	lda #$03
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1400

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1404

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1405

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1407

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1413

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$10
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$08
	sta BLITSCR.H
	jsr BLITSCR

; optimize OK (service.pas), line = 1423

	lda XS
	add #$08
	sta XS

; optimize OK (service.pas), line = 1424

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1427

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1428

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1430

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1432

	lda XS
	add #$11
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_11B3

; optimize OK (service.pas), line = 1433

	lda #$08
	jmp l_11C1
l_11B3

; optimize OK (service.pas), line = 1435

	lda #$11
l_11C1
	sta I

; optimize OK (service.pas), line = 1440

	sta BLITTEMP2TEMP.W
	lda #$09
	sta BLITTEMP2TEMP.H
	jsr BLITTEMP2TEMP

; optimize OK (service.pas), line = 1490

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1491

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1493

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000176  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$0297
YA	= DATAORIGIN+$0298
I	= DATAORIGIN+$0299
XS	= DATAORIGIN+$029A
YS	= DATAORIGIN+$029B

@VarData	= XA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1515

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1516

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1518

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000177  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1525

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1526

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1527

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1531

	lda #$10
	sta BLITTEMP2TEMP.W
	lda #$08
	sta BLITTEMP2TEMP.H
	jsr BLITTEMP2TEMP

; optimize OK (service.pas), line = 1534

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1535

	lda BLOCK
	sub #$01
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1539

	lda #$0F
	sta BLITTEMP2TEMP.W
	lda #$07
	sta BLITTEMP2TEMP.H
	jsr BLITTEMP2TEMP

; optimize OK (service.pas), line = 1541

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1542

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1590

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1598

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1600

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1601

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1603

	lda XS
	add #$19
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_1271

; optimize OK (service.pas), line = 1604

	lda #$08
	jmp l_127F
l_1271

; optimize OK (service.pas), line = 1606

	lda #$11
l_127F
	sta I

; optimize OK (service.pas), line = 1611

	sta BLITTEMP2TEMP.W
	lda #$09
	sta BLITTEMP2TEMP.H
	jsr BLITTEMP2TEMP

; optimize OK (service.pas), line = 1613

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1614

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1650

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1652

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1653

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1656

	lda BLOCK
	cmp #$09
	jcc l_12BD

; optimize OK (service.pas), line = 1658

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1659

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_12D8

; optimize OK (service.pas), line = 1661

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1662

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_12F7
l_12D8

; optimize OK (service.pas), line = 1668

	lda BLOCK
	cmp #$0A
	jne l_1309
	lda #$C9
	sta CL2
l_12F7
l_1309

; optimize OK (service.pas), line = 1672

	lda #$00
	sta I

; optimize OK (service.pas), line = 1675

	lda #$06
	sta Y

l_131D
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+9
	ldy I
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+9
	sta CL2

; optimize OK (service.pas), line = 1692

	sta adr.SCR,y

; optimize OK (service.pas), line = 1694

	lda I
	add #$10
	sta I

; --- ForToDoEpilog
	dec Y
	jpl l_131D
l_132B

; optimize OK (service.pas), line = 1700

	lda #$0E
	sta X

l_135A
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+10
	ldy X
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+10
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_135A
l_1368
l_12BD

; optimize OK (service.pas), line = 1718

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$0F
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$07
	sta BLITSCR.H
	jsr BLITSCR

; -------------------  ASM Block 00000178  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$029C
YA	= DATAORIGIN+$029D
BLOCK	= DATAORIGIN+$029E
XS	= DATAORIGIN+$029F
YS	= DATAORIGIN+$02A0
X	= DATAORIGIN+$02A1
Y	= DATAORIGIN+$02A2
I	= DATAORIGIN+$02A3
CL	= DATAORIGIN+$02A4
CL2	= DATAORIGIN+$02A5

@VarData	= XA
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1734

	lda #$00
	sta Y

l_139B
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13A9

; optimize OK (service.pas), line = 1736

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1738

	lda #$00
	sta X

l_13BC
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_13CA

; optimize OK (service.pas), line = 1739

	adc I
	tay
	lda adr.WALL,y
	jeq l_13E5
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_13E5

; --- ForToDoEpilog
	inc X
	jne l_13BC
l_13CA

; --- ForToDoEpilog
	inc Y
	jne l_139B
l_13A9

; ------------------------------------------------------------

X	= DATAORIGIN+$02A6
Y	= DATAORIGIN+$02A7
I	= DATAORIGIN+$02A8

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1765

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1766

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1769

	lda #$00
	sta Y

l_141F
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_142D

; optimize OK (service.pas), line = 1770

	lda #$00
	sta X

l_1436
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1444

; optimize OK (service.pas), line = 1773

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_147C
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_147C
	inc REMAIN_BLK
l_147C

; --- ForToDoEpilog
	inc X
	jne l_1436
l_1444

; --- ForToDoEpilog
	inc Y
	jne l_141F
l_142D

; optimize OK (service.pas), line = 1775

	lda WL
	sub #$01
	and #$03
	sta WL

; optimize OK (service.pas), line = 1777

	sta @CASETMP_0008
	cmp #$00
	jne l_14A6
@

; optimize OK (service.pas), line = 1778

	:7 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_14A6
	cmp #$01
	jne l_14AF

; optimize OK (service.pas), line = 1779

	:7 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_14AF
	cmp #$02
	jne l_14B8

; optimize OK (service.pas), line = 1780

	:7 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_14B8
	cmp #$03
	jne l_14C1

; optimize OK (service.pas), line = 1781

	:7 mva adr.PATTERN3+# adr.PATTERN+#
l_14C1
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$02A9
Y	= DATAORIGIN+$02AA
WL	= DATAORIGIN+$02AB
@CASETMP_0008	= DATAORIGIN+$02AC

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1810

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1811

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1812

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1813

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1815

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1817

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP1

; optimize OK (service.pas), line = 1818

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP1

; optimize OK (service.pas), line = 1819

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP2

; optimize OK (service.pas), line = 1820

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP2

; optimize OK (service.pas), line = 1822

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XK

; optimize OK (service.pas), line = 1823

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YK

; optimize OK (service.pas), line = 1824

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XJ

; optimize OK (service.pas), line = 1825

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YJ

; optimize OK (service.pas), line = 1827

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XH

; optimize OK (service.pas), line = 1828

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YH

; optimize OK (service.pas), line = 1829

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XN

; optimize OK (service.pas), line = 1830

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YN

; optimize OK (service.pas), line = 1840

	ldy #1
	lda XP1
	cmp XP2
	bne @+
	dey
@
	tya
	sta TX

; optimize OK (service.pas), line = 1841

	ldy #1
	lda YP1
	cmp YP2
	bne @+
	dey
@
	tya
	sta TY

; optimize OK (service.pas), line = 1844

	lda TX
	ora TY
	jeq l_154F

; optimize OK (service.pas), line = 1847

	lda TY
	jeq l_155C

; optimize OK (service.pas), line = 1849

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_1569
l_156A

; optimize OK (service.pas), line = 1853

	lda XH
	add XN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1854

	lda YH
	add YN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1856

	lsr @
	lsr @
	lsr @
	sta YP

; optimize OK (service.pas), line = 1858

	cmp YP1
	jne l_15A8

; optimize OK (service.pas), line = 1860

	lda X
	sta XH

; optimize OK (service.pas), line = 1861

	lda Y
	sta YH
l_15A8

; optimize OK (service.pas), line = 1864

	lda YP
	cmp YP2
	jne l_15CB

; optimize OK (service.pas), line = 1866

	lda X
	sta XN

; optimize OK (service.pas), line = 1867

	lda Y
	sta YN
l_15CB
l_1569

; optimize OK (service.pas), line = 1851

	lda YN
	and #$07
	jeq l_156Aw
	lda YN
	and #$07
	cmp #$07
	jne l_156A
l_156Aw
l_155C

; optimize OK (service.pas), line = 1873

	lda TX
	jeq l_1608

; optimize OK (service.pas), line = 1875

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1615
l_1616

; optimize OK (service.pas), line = 1879

	lda XK
	add XJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1880

	lda YK
	add YJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1882

	lda X
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP

; optimize OK (service.pas), line = 1884

	cmp XP1
	jne l_1654

; optimize OK (service.pas), line = 1886

	lda X
	sta XK

; optimize OK (service.pas), line = 1887

	lda Y
	sta YK
l_1654

; optimize OK (service.pas), line = 1890

	lda XP
	cmp XP2
	jne l_1677

; optimize OK (service.pas), line = 1892

	lda X
	sta XJ

; optimize OK (service.pas), line = 1893

	lda Y
	sta YJ
l_1677
l_1615

; optimize OK (service.pas), line = 1877

	lda XJ
	and #$0F
	jeq l_1616w
	lda XJ
	and #$0F
	cmp #$0F
	jne l_1616
l_1616w
l_1608

; optimize OK (service.pas), line = 1904

	lda COLLISION
	cmp #$01
	jne l_16BA
; optimize OK (service.pas), line = 1906
; optimize OK (service.pas), line = 1907
	jmp l_16D0
l_16BA

; optimize OK (service.pas), line = 1909

	lda COLLISION
	cmp #$02
	jne l_16E2

; optimize OK (service.pas), line = 1911

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1912

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	jmp l_16F8
l_16E2

; optimize OK (service.pas), line = 1914

	lda COLLISION
	cmp #$03
	jne l_170A

; optimize OK (service.pas), line = 1916

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1917

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_16D0

; optimize OK (service.pas), line = 1918

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1919

	mwy Y2 :bp2
	ldy #$00
	lda YN
l_16F8
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_170A
	jmp l_172E
l_154F

; optimize OK (service.pas), line = 1924

	lda #$00
	sta RESULT
	jmp @exit
l_172E

; optimize OK (service.pas), line = 1927

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1928

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1929

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1930

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1934

	mwy X1 :bp2
	ldy #$01
	lda (:bp2),y
	jpl l_1747
	dey
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
l_1747

; optimize OK (service.pas), line = 1935

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_175F
	dey
	lda #$CF
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_175F

; optimize OK (service.pas), line = 1938

	mwy X2 :bp2
	ldy #$01
	lda (:bp2),y
	jpl l_1777
	dey
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
l_1777

; optimize OK (service.pas), line = 1939

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_178F
	dey
	lda #$CF
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_178F

; optimize OK (service.pas), line = 1946

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$02AD
Y1	= DATAORIGIN+$02AF
X2	= DATAORIGIN+$02B1
Y2	= DATAORIGIN+$02B3
RESULT	= DATAORIGIN+$02B5
X	= DATAORIGIN+$02B6
Y	= DATAORIGIN+$02B7
XK	= DATAORIGIN+$02B8
YK	= DATAORIGIN+$02B9
XJ	= DATAORIGIN+$02BA
YJ	= DATAORIGIN+$02BB
XH	= DATAORIGIN+$02BC
YH	= DATAORIGIN+$02BD
XN	= DATAORIGIN+$02BE
YN	= DATAORIGIN+$02BF
XP1	= DATAORIGIN+$02C0
YP1	= DATAORIGIN+$02C1
XP2	= DATAORIGIN+$02C2
YP2	= DATAORIGIN+$02C3
XP	= DATAORIGIN+$02C4
YP	= DATAORIGIN+$02C5
COLLISION	= DATAORIGIN+$02C6
TX	= DATAORIGIN+$02C7
TY	= DATAORIGIN+$02C8

@VarData	= X1
@VarDataSize	= 27

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1958

	lda #$0C
	cmp XB
	jcc l_17BE
	lda #$0E
	cmp YB
	jcc l_17BE

; optimize OK (service.pas), line = 1961

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1963

	tay
	lda adr.WALL,y
	jeq l_17E4

; optimize OK (service.pas), line = 1965

	cmp #$0A
	jcs l_17FA

; optimize OK (service.pas), line = 1967

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1968

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1972

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1974

	lda #$2C
	sta RAND.RANGE
	lda #$01
	sta RAND.RANGE+1
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1976

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta LETT.NEXTX

; optimize OK (service.pas), line = 1977

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1978

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1980

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1982

	lda #$07
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 1984

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1985

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1851
l_17FA

; optimize OK (service.pas), line = 1991

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_186A

; optimize OK (service.pas), line = 1993

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1994

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1997

	lda #$08
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 1999

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1885
l_186A

; optimize OK (service.pas), line = 2003

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 2004

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2007

	lda #$09
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000
l_1885
l_1851
l_17E4
l_17BE

; ------------------------------------------------------------

XB	= DATAORIGIN+$02C9
YB	= DATAORIGIN+$02CA
BALL	= DATAORIGIN+$02CB
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
I	= DATAORIGIN+$02CF

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 2020

	lda #$0C
	cmp XB
	jcc l_18B5
	lda #$0E
	cmp YB
	jcc l_18B5

; optimize OK (service.pas), line = 2023

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2025

	tay
	lda adr.WALL,y
	jeq l_18DB

; optimize OK (service.pas), line = 2027

	cmp #$0A
	jcs l_18F1

; optimize OK (service.pas), line = 2029

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2030

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2031

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2032

	ldy I
	lda #$00
	sta adr.WALL,y
	jmp l_1918
l_18F1

; optimize OK (service.pas), line = 2040

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1931

; optimize OK (service.pas), line = 2042

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2045

	lda #$08
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 2047

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1948
l_1931

; optimize OK (service.pas), line = 2051

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2054

	lda #$09
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000
l_1948
l_1918
l_18DB
l_18B5

; ------------------------------------------------------------

XB	= DATAORIGIN+$02D0
YB	= DATAORIGIN+$02D1
I	= DATAORIGIN+$02D2

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2090

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2092

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2093

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2096

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2097

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2099

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2100

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2103

	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2108

	cmp #$11
	jcc l_19CD
	lda XB
	jeq l_19CD
	cmp #$0C
	jcs l_19CD

; optimize OK (service.pas), line = 2109

	ldy I
	lda adr.WALL,y
	jne l_19E3

; optimize OK (service.pas), line = 2111

	lda NX
	and #$0F
	lsr @
	sta X

; optimize OK (service.pas), line = 2112

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2115

	lda X
	cmp Y
	jeq l_1A20x
	lda #$07
	sub Y
	cmp X
	jne l_1A20
l_1A20x

; optimize OK (service.pas), line = 2118

	lda #$00
	sta AROUND

; optimize OK (service.pas), line = 2120

	sta DEFLECT

; optimize OK (service.pas), line = 2121

	sta TOUCH

; optimize OK (service.pas), line = 2127

	lda X
	cmp #$07
	jne l_1A3F
	lda TOUCH
	ora #$01
	sta TOUCH
l_1A3F

; optimize OK (service.pas), line = 2128

	lda Y
	cmp #$07
	jne l_1A5E
	lda TOUCH
	ora #$02
	sta TOUCH
l_1A5E

; optimize OK (service.pas), line = 2139

	ldy I
	dey
	lda adr.WALL,y
	jeq l_1A84
	lda AROUND
	ora #$80
	sta AROUND
l_1A84

; optimize OK (service.pas), line = 2140

	ldy I
	iny
	lda adr.WALL,y
	jeq l_1AAA
	lda AROUND
	ora #$08
	sta AROUND
l_1AAA

; optimize OK (service.pas), line = 2141

	lda I
	sub #$10
	tay
	lda adr.WALL,y
	jeq l_1AD0
	lda AROUND
	ora #$02
	sta AROUND
l_1AD0

; optimize OK (service.pas), line = 2142

	lda I
	add #$10
	tay
	lda adr.WALL,y
	jeq l_1AF6
	lda AROUND
	ora #$20
	sta AROUND
l_1AF6

; optimize OK (service.pas), line = 2144

	lda I
	sub #$11
	tay
	lda adr.WALL,y
	jeq l_1B20
	lda AROUND
	ora #$01
	sta AROUND
l_1B20

; optimize OK (service.pas), line = 2145

	lda I
	add #$F1
	tay
	lda adr.WALL,y
	jeq l_1B4A
	lda AROUND
	ora #$04
	sta AROUND
l_1B4A

; optimize OK (service.pas), line = 2146

	lda I
	add #$0F
	tay
	lda adr.WALL,y
	jeq l_1B74
	lda AROUND
	ora #$40
	sta AROUND
l_1B74

; optimize OK (service.pas), line = 2147

	lda I
	add #$11
	tay
	lda adr.WALL,y
	jeq l_1B9E
	lda AROUND
	ora #$10
	sta AROUND
l_1B9E

; optimize OK (service.pas), line = 2150

	lda TOUCH
	sta @CASETMP_0009
	jne l_1BB6
@

; optimize OK (service.pas), line = 2152

	lda AROUND
	and #$83
	cmp #$82
	jne l_1BCC

; optimize OK (service.pas), line = 2154

	lda #$11
	sta DEFLECT

; optimize OK (service.pas), line = 2156

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2157

	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1BCC
	jmp a_0009
l_1BB6
	cmp #$01
	jne l_1BF4

; optimize OK (service.pas), line = 2161

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1C0A

; optimize OK (service.pas), line = 2163

	lda #$21
	sta DEFLECT

; optimize OK (service.pas), line = 2165

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2166

	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1C0A
	jmp a_0009
l_1BF4
	cmp #$02
	jne l_1C32

; optimize OK (service.pas), line = 2170

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_1C48

; optimize OK (service.pas), line = 2172

	lda #$12
	sta DEFLECT

; optimize OK (service.pas), line = 2174

	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2175

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1C48
	jmp a_0009
l_1C32
	cmp #$03
	jne l_1C70

; optimize OK (service.pas), line = 2179

	lda AROUND
	and #$38
	cmp #$28
	jne l_1C86

; optimize OK (service.pas), line = 2181

	lda #$22
	sta DEFLECT

; optimize OK (service.pas), line = 2183

	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2184

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1C86
l_1C70
a_0009

; optimize OK (service.pas), line = 2191

	lda DEFLECT
	jeq l_1CBF

; optimize OK (service.pas), line = 2193

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2194

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
	jmp @exit
l_1CBF
l_1A20
l_19E3
l_19CD

; optimize OK (service.pas), line = 2206

	ldy I
	lda adr.WALL,y
	jeq l_1CED

; optimize OK (service.pas), line = 2209

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2215

	jne l_1D08
	lda #$FF
	jsr FATAL_ERROR
l_1D08

; optimize OK (service.pas), line = 2218

	lda COLLISION
	cmp #$03
	jne l_1D1F

; optimize OK (service.pas), line = 2220

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	iny
	sub OX
	sub #$09
	sta LX

; optimize OK (service.pas), line = 2221

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	iny
	sub OY
	sub #$16
	sta LY

; optimize OK (service.pas), line = 2223

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	iny
	sub NX
	sub #$09
	sta MX

; optimize OK (service.pas), line = 2224

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	iny
	sub NY
	sub #$16
	sta MY

; optimize OK (service.pas), line = 2226

	lda LX
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta A
	lda LY
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta B

; optimize OK (service.pas), line = 2228

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	iny
	iny
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta F1
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta F1+1

; optimize OK (service.pas), line = 2230

	lda MX
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta A
	lda MY
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta B

; optimize OK (service.pas), line = 2232

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	iny
	iny
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta F2
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta F2+1

; optimize OK (service.pas), line = 2234

	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_1DAA

; optimize OK (service.pas), line = 2240

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2242

	cmp #$0D
	jcc l_1DC6
	lda #$0C
	sta XB
l_1DC6

; optimize OK (service.pas), line = 2243

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2246

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1DFD

; optimize OK (service.pas), line = 2248

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2250

	cmp #$0D
	jcc l_1E19
	lda #$0C
	sta XB
l_1E19

; optimize OK (service.pas), line = 2251

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1E3A
l_1DFD

; optimize OK (service.pas), line = 2255

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2256

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1E3A
	jmp l_1E4D
l_1DAA

; optimize OK (service.pas), line = 2265

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2267

	cmp #$0D
	jcc l_1E68
	lda #$0C
	sta XB
l_1E68

; optimize OK (service.pas), line = 2268

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2270

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1E9F

; optimize OK (service.pas), line = 2272

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2273

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2275

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2277

	cmp #$0D
	jcc l_1EC5
	lda #$0C
	sta XB
l_1EC5

; optimize OK (service.pas), line = 2278

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1E9F
l_1E4D
l_1D1F

; optimize OK (service.pas), line = 2284

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2285

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2290

	lda NX
	and #$0F
	lsr @
	sta X

; optimize OK (service.pas), line = 2291

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2318

	cmp X
	jcs l_1F2F
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1F2F

; optimize OK (service.pas), line = 2320

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2321

	lda #$01
	sta EMERGENCY
l_1F2F

; optimize OK (service.pas), line = 2325

	lda #$07
	sub Y
	cmp X
	jcs l_1F64
	lda X
	cmp Y
	jcs l_1F64

; optimize OK (service.pas), line = 2327

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2328

	lda #$03
	sta EMERGENCY
l_1F64

; optimize OK (service.pas), line = 2332

	lda X
	cmp Y
	jcs l_1F99
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1F99

; optimize OK (service.pas), line = 2334

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2335

	lda #$02
	sta EMERGENCY
l_1F99

; optimize OK (service.pas), line = 2339

	lda #$07
	sub X
	cmp Y
	jcs l_1FCE
	lda Y
	cmp X
	jcs l_1FCE

; optimize OK (service.pas), line = 2341

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2342

	lda #$04
	sta EMERGENCY
l_1FCE

; optimize OK (service.pas), line = 2346

	lda EMERGENCY
	cmp #$05
	jcs l_1FEF
	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1FEF

; optimize OK (service.pas), line = 2350

	lda X
	cmp Y
	jeq l_2021x
	lda #$07
	sub Y
	cmp X
	jne l_2021
l_2021x

; optimize OK (service.pas), line = 2352

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2353

	sta TOUCH

; optimize OK (service.pas), line = 2361

	lda X
	cmp #$05
	jcc l_203C
	lda TOUCH
	ora #$01
	sta TOUCH
l_203C

; optimize OK (service.pas), line = 2362

	lda Y
	cmp #$05
	jcc l_205B
	lda TOUCH
	ora #$02
	sta TOUCH
l_205B

; optimize OK (service.pas), line = 2371

	lda #$FF
	sta LX

l_2071
; --- ForToDoCondition
	lda LX
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_207F

; optimize OK (service.pas), line = 2372

	lda #$FF
	sta LY

l_2088
; --- ForToDoCondition
	lda LY
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_2096

; optimize OK (service.pas), line = 2376

	lda XB
	add LX
	sta MX

; optimize OK (service.pas), line = 2380

	lda YB
	add LY
	sta MY

; optimize OK (service.pas), line = 2382

	lda MX
	jmi l_20E5x
	sub #$0D
	svc
	eor #$80
	jpl l_20E5x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_20E5
l_20E5x

; optimize OK (service.pas), line = 2385

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$0A
	jmp l_2108
l_20E5

; optimize OK (service.pas), line = 2387

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$14
l_2108
	sta adr.ADJW,y

; --- ForToDoEpilog
	inc LY
	lda LY
	cmp #$80
	jne l_2088
l_2096

; --- ForToDoEpilog
	inc LX
	lda LX
	cmp #$80
	jne l_2071
l_207F

; -------------------  ASM Block 00000179  -------------------

	lda #0
	sta around

	lda #10

	cmp adr.ADJW
	ror around
	cmp adr.ADJW+$04
	ror around
	cmp adr.ADJW+$08
	ror around	
	cmp adr.ADJW+$09
	ror around
	cmp adr.ADJW+$0A
	ror around
	cmp adr.ADJW+$06
	ror around
	cmp adr.ADJW+$02
	ror around
	cmp adr.ADJW+$01
	ror around
	
; optimize OK (service.pas), line = 2468

	lda TOUCH
	jne l_213D

; optimize OK (service.pas), line = 2470

	lda AROUND
	and #$83
	sta A

; optimize OK (service.pas), line = 2472

	jne l_215A
	lda #$11
	sta DEFLECT
l_215A

; optimize OK (service.pas), line = 2473

	lda A
	cmp #$01
	jne l_2173
	lda #$33
	sta DEFLECT
l_2173

; optimize OK (service.pas), line = 2474

	lda A
	cmp #$02
	jne l_218C
	lda #$10
	sta DEFLECT
l_218C

; optimize OK (service.pas), line = 2475

	lda A
	cmp #$03
	jne l_21A5
	lda #$12
	sta DEFLECT
l_21A5

; optimize OK (service.pas), line = 2476

	lda A
	cmp #$80
	jne l_21BE
	lda #$01
	sta DEFLECT
l_21BE

; optimize OK (service.pas), line = 2477

	lda A
	cmp #$81
	jne l_21D7
	lda #$21
	sta DEFLECT
l_21D7

; optimize OK (service.pas), line = 2478

	lda A
	cmp #$82
	jne l_21F0
	lda #$11
	sta DEFLECT
l_21F0

; optimize OK (service.pas), line = 2480

	lda A
	cmp #$82
	jne l_2209

; optimize OK (service.pas), line = 2481

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2482

	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	jmp l_222D
l_2209

; optimize OK (service.pas), line = 2484

	lda XB
	sta SHOOT_BLOCK.XB
l_222D
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2486

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2487

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_213D

; optimize OK (service.pas), line = 2492

	lda TOUCH
	cmp #$01
	jne l_225F

; optimize OK (service.pas), line = 2494

	lda AROUND
	and #$0E
	sta A

; optimize OK (service.pas), line = 2496

	jne l_227C
	lda #$21
	sta DEFLECT
l_227C

; optimize OK (service.pas), line = 2497

	lda A
	cmp #$02
	jne l_2295
	lda #$20
	sta DEFLECT
l_2295

; optimize OK (service.pas), line = 2498

	lda A
	cmp #$04
	jne l_22AE
	lda #$33
	sta DEFLECT
l_22AE

; optimize OK (service.pas), line = 2499

	lda A
	cmp #$06
	jne l_22C7
	lda #$22
	sta DEFLECT
l_22C7

; optimize OK (service.pas), line = 2500

	lda A
	cmp #$08
	jne l_22E0
	lda #$01
	sta DEFLECT
l_22E0

; optimize OK (service.pas), line = 2501

	lda A
	cmp #$0A
	jne l_22F9
	lda #$21
	sta DEFLECT
l_22F9

; optimize OK (service.pas), line = 2502

	lda A
	cmp #$0C
	jne l_2312
	lda #$11
	sta DEFLECT
l_2312

; optimize OK (service.pas), line = 2504

	lda A
	cmp #$0A
	jne l_232B

; optimize OK (service.pas), line = 2505

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2506

	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	jmp l_234F
l_232B

; optimize OK (service.pas), line = 2508

	lda XB
	sta SHOOT_BLOCK.XB
l_234F
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2510

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2511

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_225F

; optimize OK (service.pas), line = 2514

	lda TOUCH
	cmp #$02
	jne l_2381

; optimize OK (service.pas), line = 2516

	lda AROUND
	and #$E0
	sta A

; optimize OK (service.pas), line = 2518

	jne l_239E
	lda #$12
	sta DEFLECT
l_239E

; optimize OK (service.pas), line = 2519

	lda A
	cmp #$20
	jne l_23B7
	lda #$10
	sta DEFLECT
l_23B7

; optimize OK (service.pas), line = 2520

	lda A
	cmp #$40
	jne l_23D0
	lda #$33
	sta DEFLECT
l_23D0

; optimize OK (service.pas), line = 2521

	lda A
	cmp #$60
	jne l_23E9
	lda #$11
	sta DEFLECT
l_23E9

; optimize OK (service.pas), line = 2522

	lda A
	cmp #$80
	jne l_2402
	lda #$02
	sta DEFLECT
l_2402

; optimize OK (service.pas), line = 2523

	lda A
	cmp #$A0
	jne l_241B
	lda #$12
	sta DEFLECT
l_241B

; optimize OK (service.pas), line = 2524

	lda A
	cmp #$C0
	jne l_2434
	lda #$22
	sta DEFLECT
l_2434

; optimize OK (service.pas), line = 2526

	lda A
	cmp #$A0
	jne l_244D

; optimize OK (service.pas), line = 2527

	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2528

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	jmp l_2471
l_244D

; optimize OK (service.pas), line = 2530

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
l_2471
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2532

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2533

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2381

; optimize OK (service.pas), line = 2536

	lda TOUCH
	cmp #$03
	jne l_24A3

; optimize OK (service.pas), line = 2538

	lda AROUND
	and #$38
	sta A

; optimize OK (service.pas), line = 2540

	jne l_24C0
	lda #$22
	sta DEFLECT
l_24C0

; optimize OK (service.pas), line = 2541

	lda A
	cmp #$08
	jne l_24D9
	lda #$02
	sta DEFLECT
l_24D9

; optimize OK (service.pas), line = 2542

	lda A
	cmp #$10
	jne l_24F2
	lda #$33
	sta DEFLECT
l_24F2

; optimize OK (service.pas), line = 2543

	lda A
	cmp #$18
	jne l_250B
	lda #$12
	sta DEFLECT
l_250B

; optimize OK (service.pas), line = 2544

	lda A
	cmp #$20
	jne l_2524
	lda #$20
	sta DEFLECT
l_2524

; optimize OK (service.pas), line = 2545

	lda A
	cmp #$28
	jne l_253D
	lda #$22
	sta DEFLECT
l_253D

; optimize OK (service.pas), line = 2546

	lda A
	cmp #$30
	jne l_2556
	lda #$21
	sta DEFLECT
l_2556

; optimize OK (service.pas), line = 2548

	lda A
	cmp #$28
	jne l_256F

; optimize OK (service.pas), line = 2549

	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2550

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	lda XB
	sta SHOOT_BLOCK.XB
	jmp l_2593
l_256F

; optimize OK (service.pas), line = 2552

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
l_2593
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2554

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2555

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_24A3

; optimize OK (service.pas), line = 2561

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX

; optimize OK (service.pas), line = 2562

	lda DEFLECT
	and #$0F
	sta MYY

; optimize OK (service.pas), line = 2564

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_25D8

; optimize OK (service.pas), line = 2565

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta SP
	iny
	lda #$00
	sbc (:bp2),y
	jmp l_25EA
l_25D8

; optimize OK (service.pas), line = 2567

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SP
	iny
	lda (:bp2),y
l_25EA
	sta SP+1

; optimize OK (service.pas), line = 2569

	lda MYX
	cmp #$01
	jne l_2601
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_2601

; optimize OK (service.pas), line = 2570

	lda MYX
	cmp #$02
	jne l_261E
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_261E

; optimize OK (service.pas), line = 2571

	lda MYX
	cmp #$03
	jne l_2638
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_2638

; optimize OK (service.pas), line = 2573

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_2654

; optimize OK (service.pas), line = 2574

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta SP
	iny
	lda #$00
	sbc (:bp2),y
	jmp l_2666
l_2654

; optimize OK (service.pas), line = 2576

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SP
	iny
	lda (:bp2),y
l_2666
	sta SP+1

; optimize OK (service.pas), line = 2578

	lda MYY
	cmp #$01
	jne l_267D
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_267D

; optimize OK (service.pas), line = 2579

	lda MYY
	cmp #$02
	jne l_269A
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_269A

; optimize OK (service.pas), line = 2580

	lda MYY
	cmp #$03
	jne l_26B4
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_26B4
l_2021
l_1CED

; optimize OK (service.pas), line = 2590

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_26D5

; optimize OK (service.pas), line = 2593

	lda EMERGENCY
	cmp #$FF
	jne l_26E8
	lda #$04
	jsr FATAL_ERROR
l_26E8

; optimize OK (service.pas), line = 2595

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2634

	tya
	sta @CASETMP_000A
	cmp #$05
	jne l_2701
@

; optimize OK (service.pas), line = 2637

	lda AROUND
	and #$02
	jne l_2717
	lda MIMAX
	and #$0F
	sta MIMAX
l_2717

; optimize OK (service.pas), line = 2638

	lda AROUND
	jmi l_273E
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_273E
	jmp a_000A
l_2701
	cmp #$06
	jne l_2756

; optimize OK (service.pas), line = 2642

	lda AROUND
	jmi l_276C
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_276C

; optimize OK (service.pas), line = 2643

	lda AROUND
	and #$20
	jne l_2793
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_2793
	jmp a_000A
l_2756
	cmp #$07
	jne l_27AB

; optimize OK (service.pas), line = 2647

	lda AROUND
	and #$20
	jne l_27C1
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_27C1

; optimize OK (service.pas), line = 2648

	lda AROUND
	and #$08
	jne l_27E8
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_27E8
	jmp a_000A
l_27AB
	cmp #$08
	jne l_2800

; optimize OK (service.pas), line = 2652

	lda AROUND
	and #$08
	jne l_2816
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_2816

; optimize OK (service.pas), line = 2653

	lda AROUND
	and #$02
	jne l_283D
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_283D
l_2800
a_000A

; --- RepeatUntilProlog
l_2855

; optimize OK (service.pas), line = 2661

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	tay
	lda adr.MUL90_16,y
	sta OX
	lda adr.MUL90_16+16,y
	sta OX+1

; optimize OK (service.pas), line = 2662

	lda MIMAX
	and #$0F
	tay
	lda adr.MUL90_16,y
	sta OY
	lda adr.MUL90_16+16,y
	sta OY+1

; optimize OK (service.pas), line = 2664

	lda OY
	sub OX
	sta RAND.RANGE
	lda OY+1
	sbc OX+1
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	add OX
	sta ANGLE
	lda RAND.RESULT+1
	adc OX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2666

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2855

; optimize OK (service.pas), line = 2670

	lda ANGLE
	sta MOD360.A
	lda ANGLE+1
	sta MOD360.A+1
	jsr MOD360
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MOD360.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MOD360.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2671

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2673

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_26D5

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02D3
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$02D7
Y	= DATAORIGIN+$02D8
I	= DATAORIGIN+$02D9
XB	= DATAORIGIN+$02DA
YB	= DATAORIGIN+$02DB
SP	= DATAORIGIN+$02DC
ANGLE	= DATAORIGIN+$02DE
OX	= DATAORIGIN+$02E0
OY	= DATAORIGIN+$02E2
NX	= DATAORIGIN+$02E4
NY	= DATAORIGIN+$02E6
LX	= DATAORIGIN+$02E8
LY	= DATAORIGIN+$02E9
MX	= DATAORIGIN+$02EA
MY	= DATAORIGIN+$02EB
MYX	= DATAORIGIN+$02EC
MYY	= DATAORIGIN+$02ED
F1	= DATAORIGIN+$02EE
F2	= DATAORIGIN+$02F0
A	= DATAORIGIN+$02F2
B	= DATAORIGIN+$02F3
EMERGENCY	= DATAORIGIN+$02F4
MIMAX	= DATAORIGIN+$02F5
DEFLECT	= DATAORIGIN+$02F6
AROUND	= DATAORIGIN+$02F7
COLLISION	= DATAORIGIN+$02F8
TOUCH	= DATAORIGIN+$02F9
adr.ADJW	= [DATAORIGIN+$02FA] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$030A
@CASETMP_000A	= DATAORIGIN+$030B

@VarData	= BALL
@VarDataSize	= 43

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; -------------------  ASM Block 00000180  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2697

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2699

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2700

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 2702

	lda PATTERN.WIDTH
	sub #$01
	ora #$80
	sta BLT.PATTERN_FEATURE

; optimize OK (service.pas), line = 2704

	lda adr.ROW+$0A
	add #$09
	sta HLP
	lda adr.ROW+256+$0A
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2707

	lda #$00
	sta YB
	sta YB+1

; optimize OK (service.pas), line = 2708

	sta I

; optimize OK (service.pas), line = 2710

	lda #$0A
	sta Y

l_28E3
; --- ForToDoCondition
	lda Y
	cmp #$C7
	jcs l_28F1

; optimize OK (service.pas), line = 2712

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.OFS
	add YB
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	adc YB+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$CF
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2714

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; optimize OK (service.pas), line = 2716

	lda YB
	add PATTERN.WIDTH
	sta YB
	lda YB+1
	adc PATTERN.WIDTH+1
	sta YB+1

; optimize FAIL (0, service.pas), line = 2718

	inc I

; optimize OK (service.pas), line = 2719

	lda I
	cmp PATTERN.HEIGHT
	jne l_291B

; optimize OK (service.pas), line = 2720

	lda #$00
	sta YB
	sta YB+1

; optimize OK (service.pas), line = 2721

	sta I
l_291B

; --- ForToDoEpilog
	inc Y
	jne l_28E3
l_28F1

; optimize OK (service.pas), line = 2726

	lda #$00
	sta BLT.PATTERN_FEATURE

; optimize OK (service.pas), line = 2731

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2733

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2734

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 2736

	sta BLITTEMP.@040180000018100001820000182000.SRC
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2742

	lda #$D7
	sta I

; optimize OK (service.pas), line = 2744

	lda #$0A
	sta Y

l_294C
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_295A

; optimize OK (service.pas), line = 2749

	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2752

	lda Y
	cmp #$10
	jcc l_2979
	lda #$11
	sta I
l_2979

; optimize OK (service.pas), line = 2755

	lda #$09
	sta X

l_298B
; --- ForToDoCondition
	lda X
	cmp I
	scc
	jne l_2999

; optimize OK (service.pas), line = 2766

	cmp #$12
	jcc l_29B7x
	lda Y
	cmp #$10
	jcs l_29B7
l_29B7x

; optimize OK (service.pas), line = 2767

	ldy X
	lda adr.SCR,y
	and #$7F
	sta adr.SCR,y
l_29B7

; --- ForToDoEpilog
	inc X
	jne l_298B
l_2999

; optimize OK (service.pas), line = 2778

	ldy Y
	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_294C
l_295A

; -------------------  ASM Block 00000181  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

YB	= DATAORIGIN+$030C
X	= DATAORIGIN+$030E
Y	= DATAORIGIN+$030F
I	= DATAORIGIN+$0310

@VarData	= YB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0311
Y	= DATAORIGIN+$0313

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2831

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2833

	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0315
Y	= DATAORIGIN+$0317
adr.SC	= [DATAORIGIN+$0319] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2879

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2880

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2882

	lda VAUS.X
	sta MOVE_VAUS.X
	lda VAUS.Y
	sta MOVE_VAUS.Y
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2884

	lda VAUS.X
	sub #$04
	sta A

; optimize OK (service.pas), line = 2885

	lda VAUS.Y
	sub #$05
	sta B

; optimize OK (service.pas), line = 2888

	lda #$0B
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; -------------------  ASM Block 00000182  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2894

	lda #$2A
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$2A
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2896

	lda #$00
	sta VM
	sta VM+1

; optimize OK (service.pas), line = 2898

	sta W

l_2A2E
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_2A3C

; optimize OK (service.pas), line = 2901

	lda VM
	sta Z
	lda VM+1
	sta Z+1

; optimize OK (service.pas), line = 2903

	lda #$00
	sta Y

l_2A4A
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2A58

; optimize OK (service.pas), line = 2908

	lda Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$60
	add Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2910

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2912

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2914

	lda #$00
	sta X

l_2A89
; --- ForToDoCondition
	lda X
	cmp #$2A
	jcs l_2A97

; optimize OK (service.pas), line = 2918

	lda W
	cmp #$06
	jeq l_2AB8x
	ldy X
	lda adr.POM,y
	jne l_2AB8
l_2AB8x
	jmp l_2AC2
l_2AB8

; optimize OK (service.pas), line = 2927

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2AC2

; --- ForToDoEpilog
	inc X
	jne l_2A89
l_2A97

; optimize OK (service.pas), line = 2930

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2932

	lda Z
	add #$2A
	sta Z
	scc
	inc Z+1

; --- ForToDoEpilog
	inc Y
	jne l_2A4A
l_2A58

; optimize OK (service.pas), line = 2935

	lda VM
	add #$A0
	sta VM
	lda VM+1
	adc #$02
	sta VM+1

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2937

	jsr SYSTEM.PAUSE.@00

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2938

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	inc W
	jne l_2A2E
l_2A3C

; -------------------  ASM Block 00000183  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2947

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2948

	jsr DISABLE_LETTER

; ------------------------------------------------------------

A	= DATAORIGIN+$032E
B	= DATAORIGIN+$032F
W	= DATAORIGIN+$0330
X	= DATAORIGIN+$0331
Y	= DATAORIGIN+$0332
Z	= DATAORIGIN+$0333
VM	= DATAORIGIN+$0335

@VarData	= A
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2962

	jsr NOSOUND

; optimize OK (service.pas), line = 2964

	lda #$5A
	sta A

; optimize OK (service.pas), line = 2965

	lda #$B3
	sta B

; -------------------  ASM Block 00000184  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2971

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2973

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.WIDTH
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta MW
	lda :STACKORIGIN+STACKWIDTH+9
	sta MW+1

; optimize OK (service.pas), line = 2975

	lda #$00
	sta J
	sta J+1

; optimize OK (service.pas), line = 2977

	lda #$0B
	sta W

l_2B16
; --- ForToDoCondition
	lda J
	sta Z
	lda J+1
	sta Z+1

; optimize OK (service.pas), line = 2981

	lda #$00
	sta Y

l_2B32
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2B40

; optimize OK (service.pas), line = 2986

	adc B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2988

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2990

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2992

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2B75_0

l_2B78
; --- ForToDoCondition
	lda @FORTMP_2B75_0::#$00
	cmp X
	jcc l_2B86

; optimize OK (service.pas), line = 2994

	ldy X
	lda adr.POM,y
	jne l_2B9B
	jmp l_2BA5
l_2B9B

; optimize OK (service.pas), line = 3005

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2BA5

; --- ForToDoEpilog
	inc X
	jne l_2B78
l_2B86

; optimize OK (service.pas), line = 3008

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3010

	lda Z
	add NEWVAUS.WIDTH
	sta Z
	lda Z+1
	adc NEWVAUS.WIDTH+1
	sta Z+1

; --- ForToDoEpilog
	inc Y
	jne l_2B32
l_2B40

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 3013

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 3015

	lda J
	add MW
	sta J
	lda J+1
	adc MW+1
	sta J+1

; --- ForToDoEpilog
	dec W
	jpl l_2B16
l_2B24

; -------------------  ASM Block 00000185  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$0337
Y	= DATAORIGIN+$0338
W	= DATAORIGIN+$0339
Z	= DATAORIGIN+$033A
J	= DATAORIGIN+$033C
MW	= DATAORIGIN+$033E
A	= DATAORIGIN+$0340
B	= DATAORIGIN+$0341

@VarData	= X
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_2BD4

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 3121

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$50
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3123

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$034A

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2BD4

; optimize OK (service.pas), line = 3130

	lda #$00
	sta F

; -------------------  ASM Block 00000186  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 3138

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3140

	ldy PY
	lda adr.ROW,y
	add #$FD
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3145

	lda SC_
	sta SC
	lda SC_+1
	sta SC+1
	lda SC_+2
	sta SC+2
	lda SC_+3
	sta SC+3

; optimize OK (service.pas), line = 3147

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2C09
l_2C0A

; optimize OK (service.pas), line = 3149

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 3150

	inc N1
l_2C09

; optimize OK (service.pas), line = 3148

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_2C0A

; optimize OK (service.pas), line = 3152

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 3153

	tya
	jeq l_2C34
	lda #$01
	sta F
l_2C34

; optimize OK (service.pas), line = 3154

	lda F
	jeq l_2C47
	lda N1
	jmp l_2C55
l_2C47

; optimize OK (service.pas), line = 3155

	lda #$0A
l_2C55
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 3158

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2C5D
l_2C5E

; optimize OK (service.pas), line = 3160

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 3161

	inc N1
l_2C5D

; optimize OK (service.pas), line = 3159

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_2C5E

; optimize OK (service.pas), line = 3163

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 3164

	tya
	jeq l_2C88
	lda #$01
	sta F
l_2C88

; optimize OK (service.pas), line = 3165

	lda F
	jeq l_2C9B
	lda N1
	jmp l_2CA9
l_2C9B

; optimize OK (service.pas), line = 3166

	lda #$0A
l_2CA9
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 3169

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2CB1
l_2CB2

; optimize OK (service.pas), line = 3171

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 3172

	inc N1
l_2CB1

; optimize OK (service.pas), line = 3170

	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_2CB2

; optimize OK (service.pas), line = 3174

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 3175

	tya
	jeq l_2CDC
	lda #$01
	sta F
l_2CDC

; optimize OK (service.pas), line = 3176

	lda F
	jeq l_2CEF
	lda N1
	jmp l_2CFD
l_2CEF

; optimize OK (service.pas), line = 3177

	lda #$0A
l_2CFD
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 3180

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2D05
l_2D06

; optimize OK (service.pas), line = 3182

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 3183

	inc N1
l_2D05

; optimize OK (service.pas), line = 3181

	lda SC+1
	jne l_2D06
	lda SC
	cmp #$64
	jcs l_2D06

; optimize OK (service.pas), line = 3185

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 3186

	tya
	jeq l_2D30
	lda #$01
	sta F
l_2D30

; optimize OK (service.pas), line = 3187

	lda F
	jeq l_2D43
	lda N1
	jmp l_2D51
l_2D43

; optimize OK (service.pas), line = 3188

	lda #$0A
l_2D51
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 3191

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2D59
l_2D5A

; optimize OK (service.pas), line = 3193

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 3194

	inc N1
l_2D59

; optimize OK (service.pas), line = 3192

	lda SC
	cmp #$0A
	jcs l_2D5A

; optimize OK (service.pas), line = 3197

	ldy N1
	lda adr.MOD10TABLE,y
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 3201

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000187  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PY	= DATAORIGIN+$0343
SC_	= DATAORIGIN+$0344
adr.MUL_6	= CODEORIGIN+$02CD
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$0348
F	= DATAORIGIN+$0349
SC	= :STACKORIGIN-4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 3254

	dec LIVES

; -------------------  ASM Block 00000188  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 3261

	lda adr.ROW+$C0
	add #$0B
	sta HLP
	lda adr.ROW+256+$C0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3265

	lda #$A0
	sta BLITCLR.W
	lda #$00
	sta BLITCLR.W+1
	lda #$05
	sta BLITCLR.H
	jsr BLITCLR

; optimize OK (service.pas), line = 3268

	lda LIVES
	jeq l_2D9D

; optimize OK (service.pas), line = 3271

	cmp #$08
	jcc l_2DB0

; optimize OK (service.pas), line = 3272

	lda #$07
	sta I
	jmp l_2DBE
l_2DB0

; optimize OK (service.pas), line = 3274

	ldy LIVES
	dey
	sty I
l_2DBE

; optimize OK (service.pas), line = 3276

	lda #$14
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3278

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 3281

	lda #$00
	sta CN

l_2DDA
; --- ForToDoCondition
	lda CN
	cmp I
	scc
	jne l_2DE8

; optimize OK (service.pas), line = 3285

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3286

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3288

	lda HLP
	add #$14
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	inc CN
	jne l_2DDA
l_2DE8

; optimize OK (service.pas), line = 3291

	lda #$00
	sta BLT.BLT_CONTROL
l_2D9D

; -------------------  ASM Block 00000189  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$034B
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$034C
Y	= DATAORIGIN+$034D
XL	= DATAORIGIN+$034E
YL	= DATAORIGIN+$034F
CN	= DATAORIGIN+$0350
XP	= DATAORIGIN+$0351
YP	= DATAORIGIN+$0353
SHADOW	= DATAORIGIN+$0355
CL	= DATAORIGIN+$0356
I	= DATAORIGIN+$0357

@VarData	= LIVES
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3381

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3383

	lda #$4C
	sta BLITZERO.SRC
	lda #$BE
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$0D
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$08
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3391

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3393

	lda #$0D
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3401

	lda FIRE.AVL
	jeq l_2E43

; optimize FAIL ('MOUSECLICK', service.pas), line = 3403

	jsr MOUSECLICK
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN+1,x
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2E63

; optimize OK (service.pas), line = 3405

	lda VAUS.WIDTH
	sub #$0D
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3406

	lda VAUS.Y
	sub #$08
	sta FIRE.Y

; optimize OK (service.pas), line = 3407

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3408

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3410

	lda #$05
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000
l_2E63

; optimize OK (service.pas), line = 3413

	lda FIRE.SHOT
	jeq l_2E9A

; optimize OK (service.pas), line = 3415

	lda FIRE.NW
	jeq l_2EA7
	jsr REMOVE_FIRE
l_2EA7

; optimize OK (service.pas), line = 3416

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3418

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3419

	cmp #$16
	jcs l_2EC2
	lda #$00
	sta FIRE.SHOT
	jmp l_2ED0
l_2EC2

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3422

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3424

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_2EF7
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_2EF7

; optimize OK (service.pas), line = 3426

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3427

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3429

	lda FIRE.X
	add #$04
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3430

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3432

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2F64x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2F64
l_2F64x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3434

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3435

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3437

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3438

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2ED0
l_2F64
l_2EF7
l_2E9A
l_2E43

; ------------------------------------------------------------

X1	= DATAORIGIN+$0358
X2	= DATAORIGIN+$0359
Y1	= DATAORIGIN+$035A
Y2	= DATAORIGIN+$035B

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3450

	lda adr.ROW+$B1
	add #$D9
	sta HLP
	lda adr.ROW+256+$B1
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3452

	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3463

	lda SCRFLUX
	jeq l_2FA1

; optimize OK (service.pas), line = 3466

	lda SCRFLUXCNT
	lsr @
	lsr @
	sta :STACKORIGIN+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta FX

; -------------------  ASM Block 00000190  -------------------

	fxs FX_MEMS #$80
      
; optimize OK (service.pas), line = 3474

	lda #$18
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3477

	lda #$D9
	add adr.ROW+$B1
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$00
	adc adr.ROW+256+$B1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$80
	add FX
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$CA
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$01
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$15
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000191  -------------------

	fxs FX_MEMS #$00
      
; optimize FAIL (0, service.pas), line = 3485

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3486

	lda SCRFLUXCNT
	cmp #$0C
	jcc l_2FDE
	lda #$00
	sta SCRFLUXCNT
l_2FDE
l_2FA1

; ------------------------------------------------------------

Y	= DATAORIGIN+$035C
FX	= DATAORIGIN+$035D

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3497

	lda #$0C
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 3499

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3500

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3502

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3504

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3505

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3506

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3508

	lda Z
	sta X
	add #$2C
	sta @FORTMP_300C_0

l_300F
; --- ForToDoCondition
	lda @FORTMP_300C_0::#$00
	cmp X
	jcc l_301D

; optimize FAIL ('WAIT_VBL', service.pas), line = 3510

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3512

	lda VAUS.X
	sta VAUS.OLDX

; optimize OK (service.pas), line = 3513

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3514

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3515

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3516

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3518

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3520

	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_300F
l_301D

; ------------------------------------------------------------

X	= DATAORIGIN+$035E
Z	= DATAORIGIN+$035F

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3531

	lda VAUS.LETTER
	cmp #$FF
	jeq l_3059

; optimize OK (service.pas), line = 3532

	lda VAUS.LETTER
	jeq l_306C

; optimize OK (service.pas), line = 3534

	sub #$01
	sta LETT.LAST
	lda #$00
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3535

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3083
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3083

; optimize OK (service.pas), line = 3536

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3095
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3095

; optimize OK (service.pas), line = 3537

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3538

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3539

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3540

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3542

	lda VAUS.LETTER
	cmp #$06
	jeq l_30BA

; optimize OK (service.pas), line = 3544

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3545

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3546

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_30BA
l_306C
l_3059

; optimize OK (service.pas), line = 3550

	lda VAUS.LETTER
	sta @CASETMP_000B
	cmp #$01
	jne l_30D8
@

; optimize OK (service.pas), line = 3553

	lda FIRE.SHOT
	jeq l_30E4
	jsr REMOVE_FIRE
l_30E4

; optimize OK (service.pas), line = 3554

	:7 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3555

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3556

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3557

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3558

	lda #$00
	sta FIRE.SHOT
	jmp a_000B
l_30D8
	cmp #$02
	jne l_30FE

; optimize OK (service.pas), line = 3562

	lda FIRE.SHOT
	jeq l_310A
	jsr REMOVE_FIRE
l_310A

; optimize OK (service.pas), line = 3563

	:7 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3564

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3565

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3567

	lda #$03
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000

; optimize OK (service.pas), line = 3569

	lda #$00
	sta FIRE.AVL
	jmp a_000B
l_30FE
	cmp #$03
	jne l_3122

; optimize OK (service.pas), line = 3573

	lda FIRE.SHOT
	jeq l_312E
	jsr REMOVE_FIRE
l_312E

; optimize OK (service.pas), line = 3574

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3575

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3576

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3577

	sta FIRE.AVL

; optimize OK (service.pas), line = 3578

	lda #$01
	sta SCRFLUX
	jmp a_000B
l_3122
	cmp #$04
	jne l_3148

; optimize OK (service.pas), line = 3582

	lda FIRE.SHOT
	jeq l_3154
	jsr REMOVE_FIRE
l_3154

; optimize OK (service.pas), line = 3583

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3584

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3585
	jmp s_3191
l_3148
	cmp #$05
	jne l_3166

; optimize OK (service.pas), line = 3589

	lda FIRE.SHOT
	jeq l_3172
	jsr REMOVE_FIRE
l_3172

; optimize OK (service.pas), line = 3590

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3591

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3592

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3593

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$4B
	sta MAX.B
	lda #$02
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3594

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3191
; optimize OK (service.pas), line = 3595
	jmp s_31AF
l_3166
	cmp #$06
	jne l_3198

; optimize OK (service.pas), line = 3599

	lda FIRE.SHOT
	jeq l_31A4
	jsr REMOVE_FIRE
l_31A4

; optimize OK (service.pas), line = 3600

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3601

	jsr MODIFY_VAUS
s_31AF
; optimize OK (service.pas), line = 3602
	jmp s_31DE
l_3198
	cmp #$07
	jne l_31B6

; optimize OK (service.pas), line = 3606

	lda FIRE.SHOT
	jeq l_31C2
	jsr REMOVE_FIRE
l_31C2

; optimize OK (service.pas), line = 3607

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3608

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3609

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3610

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3611

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3614

	lda #$02
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000
s_31DE

; optimize OK (service.pas), line = 3616

	lda #$00
	sta FIRE.AVL
l_31B6
a_000B

; ------------------------------------------------------------

B1	= DATAORIGIN+$0361
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0005
B1.OLDX	= DATAORIGIN+$0006
B1.OLDY	= DATAORIGIN+$0008
B1.SPEED	= DATAORIGIN+$000A
B1.FINESPEED	= DATAORIGIN+$000C
B1.SPEEDX	= DATAORIGIN+$000E
B1.SPEEDY	= DATAORIGIN+$0010
B1.SBD	= DATAORIGIN+$0012
B1.BRWHIT	= DATAORIGIN+$0014
B1.INPLAY	= DATAORIGIN+$0015
B1.LAUNCH	= DATAORIGIN+$0016
B1.ONVAUS	= DATAORIGIN+$0017
B1.STM	= DATAORIGIN+$0019
B2	= DATAORIGIN+$0365
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0005
B2.OLDX	= DATAORIGIN+$0006
B2.OLDY	= DATAORIGIN+$0008
B2.SPEED	= DATAORIGIN+$000A
B2.FINESPEED	= DATAORIGIN+$000C
B2.SPEEDX	= DATAORIGIN+$000E
B2.SPEEDY	= DATAORIGIN+$0010
B2.SBD	= DATAORIGIN+$0012
B2.BRWHIT	= DATAORIGIN+$0014
B2.INPLAY	= DATAORIGIN+$0015
B2.LAUNCH	= DATAORIGIN+$0016
B2.ONVAUS	= DATAORIGIN+$0017
B2.STM	= DATAORIGIN+$0019
B3	= DATAORIGIN+$0369
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0005
B3.OLDX	= DATAORIGIN+$0006
B3.OLDY	= DATAORIGIN+$0008
B3.SPEED	= DATAORIGIN+$000A
B3.FINESPEED	= DATAORIGIN+$000C
B3.SPEEDX	= DATAORIGIN+$000E
B3.SPEEDY	= DATAORIGIN+$0010
B3.SBD	= DATAORIGIN+$0012
B3.BRWHIT	= DATAORIGIN+$0014
B3.INPLAY	= DATAORIGIN+$0015
B3.LAUNCH	= DATAORIGIN+$0016
B3.ONVAUS	= DATAORIGIN+$0017
B3.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$036D
@CASETMP_000B	= DATAORIGIN+$036F

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3627

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	lda GET_BALL_DIRECTION.RESULT
	sta DIR
	lda GET_BALL_DIRECTION.RESULT+1
	sta DIR+1

; --- RepeatUntilProlog
l_31F2

; optimize FAIL (1, service.pas), line = 3630

	inx
	mva DIR :STACKORIGIN,x
	mva DIR+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva RAND.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex

; optimize OK (service.pas), line = 3631

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_31F2

; optimize OK (service.pas), line = 3633

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3634

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3636

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0370
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
TEMP	= DATAORIGIN+$0374
DIR	= DATAORIGIN+$0376

@VarData	= BALL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_322B

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3669

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_324A
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_324A

; optimize OK (service.pas), line = 3670

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_324A

; optimize OK (service.pas), line = 3672

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3673

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03D2
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3683

	mwy BALL :bp2
	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3685

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL+1,y
	cmp :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda adr.LEVEL,y
	cmp :STACKORIGIN+9
@
	jcs l_3272

; optimize OK (service.pas), line = 3687

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3690

	ldy #BALL.SPEED-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$03
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jcs l_3288

; optimize OK (service.pas), line = 3692

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	adc #$11
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3693

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_3288
l_3272

; optimize OK (service.pas), line = 3697

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3701

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_32B0
@
	ldy #$00
	lda (:bp2),y
	jpl l_32B0
@

; optimize OK (service.pas), line = 3702

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_32B0

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03D6
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_322B

; optimize OK (service.pas), line = 3710

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3711

	sta SCRFLUX

; optimize OK (service.pas), line = 3713

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3715

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3716

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3718

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3719

	sta LETT.ACTIVE

; optimize FAIL ('FILL_PICTURE_WITH_PATTERN', service.pas), line = 3722

	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 3725

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 3726

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3730

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3736

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC_+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3737

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC_+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3738

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3741

	jsr PUT_WALL

; optimize OK (service.pas), line = 3748

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3749

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3752

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3753

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3756

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3757

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3760

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3764

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3769

	sta BALL0.STM

; optimize OK (service.pas), line = 3773

	lda #$E8
	sta RAND.RANGE
	lda #$03
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3776

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3779

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3781

	jsr SET_VAUS

; optimize OK (service.pas), line = 3782

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$B8
	sta MOVE_VAUS.Y
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3783

	jsr START_LEVEL

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3784

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3785

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3792

	lda #$0F
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda RAND.RESULT+1
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3794

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$4B
	sta SET_BALL_SPEED.SPEED
	lda #$02
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3797

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3799

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3800

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3802

	lda VAUS.X
	sta X

; --- WhileProlog
	jmp l_3343
l_3344

; -------------------  ASM Block 00000192  -------------------

      mva #$00 $d01a
      @: lda vcount
      cmp #110
      bne @-
      mva #$0f $d01a       
     
; optimize OK (service.pas), line = 3826

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3828

	lda X
	sta MOVE_VAUS.X
	lda #$B8
	sta MOVE_VAUS.Y
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 3834

	lda BALL0.LAUNCH
	cmp #$01
	jne l_335D

; optimize FAIL (0, service.pas), line = 3836

	inc BALL0.STM

; optimize OK (service.pas), line = 3841

	lda BALL0.STM
	cmp #$FA
	jne l_3374
	lda #$00
	sta BALL0.LAUNCH
l_3374

; optimize OK (service.pas), line = 3844

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3847

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_338E
	lda #$00
	sta BALL0.LAUNCH
l_338E

; optimize OK (service.pas), line = 3849

	lda BALL0.LAUNCH
	jne l_33A7
	lda #$06
	sta XSFX.TSFX.INIT.@010180000.SFX
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.INIT.@010180000
l_33A7
	jmp l_33B5
l_335D

; optimize OK (service.pas), line = 3857

	lda BALL0.INPLAY
	jeq l_33C1
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33C1

; optimize OK (service.pas), line = 3858

	lda BALL1.INPLAY
	jeq l_33D3
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33D3

; optimize OK (service.pas), line = 3859

	lda BALL2.INPLAY
	jeq l_33E5
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33E5
l_33B5

; optimize OK (service.pas), line = 3867

	lda BALL0.INPLAY
	jeq l_33F7
	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_33F7

; optimize OK (service.pas), line = 3868

	lda BALL1.INPLAY
	jeq l_3409
	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_3409

; optimize OK (service.pas), line = 3869

	lda BALL2.INPLAY
	jeq l_341B
	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_341B

; optimize FAIL ('CHECKSHINE', service.pas), line = 3886

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3887

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3888

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3889

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3890

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3892

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_344A
	jsr VAUS_OUT
l_344A

; optimize OK (service.pas), line = 3894

	lda VAUS.LETTER
	cmp #$04
	jne l_3460

; optimize OK (service.pas), line = 3896

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3898

	lda #$00
	sta BALL0.BRWHIT

; optimize OK (service.pas), line = 3900

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3901

	mwy BALL2 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3903

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	lda GET_BALL_DIRECTION.RESULT
	sta TMP
	lda GET_BALL_DIRECTION.RESULT+1
	sta TMP+1

; optimize OK (service.pas), line = 3905

	lda #$00
	sta T1
	sta T1+1

; --- WhileProlog
	jmp l_3479
l_347A

; optimize OK (service.pas), line = 3907

	lda TMP
	sub #$5A
	sta TMP
	scs
	dec TMP+1

; optimize FAIL (0, service.pas), line = 3908

	inc T1
	sne
	inc T1+1
l_3479

; optimize OK (service.pas), line = 3906

	lda TMP
	cmp #$5A
	lda TMP+1
	sbc #$00
	svc
	eor #$80
	jpl l_347A

; optimize OK (service.pas), line = 3914

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3921

	ldy T1
	lda adr.MUL90_16,y
	sta T1
	lda adr.MUL90_16+16,y
	sta T1+1

; optimize OK (service.pas), line = 3923

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3924

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3925

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3929

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3930

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3931

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3933

	lda #$00
	sta VAUS.LETTER
l_3460

; optimize OK (service.pas), line = 3937

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_34D8
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_34D8

; optimize OK (service.pas), line = 3941

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3943

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_34F6

; optimize OK (service.pas), line = 3945

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda SCORES
	sta WRITE_SCORE.SC_
	lda SCORES+1
	sta WRITE_SCORE.SC_+1
	lda SCORES+2
	sta WRITE_SCORE.SC_+2
	lda SCORES+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3947

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_34F6

; optimize OK (service.pas), line = 3953

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_3518
	jeq l_3518

; optimize OK (service.pas), line = 3956

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3958

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE
l_3518

; optimize OK (service.pas), line = 3965

	lda BALL0.LAUNCH
	jne l_353D
	lda BALL0.INPLAY
	jeq l_353D
	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_353D

; optimize OK (service.pas), line = 3966

	lda BALL1.INPLAY
	jeq l_354F
	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_354F

; optimize OK (service.pas), line = 3967

	lda BALL2.INPLAY
	jeq l_3561
	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_3561

; optimize OK (service.pas), line = 4017

	lda BALL0.INPLAY
	jne l_3576

; optimize OK (service.pas), line = 4018

	lda BALL1.INPLAY
	jeq l_3583

; optimize OK (service.pas), line = 4019

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 4020

	lda #$00
	sta BALL1.INPLAY
	jmp l_3593
l_3583

; optimize OK (service.pas), line = 4022

	lda BALL2.INPLAY
	jeq l_359F

; optimize OK (service.pas), line = 4023

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 4024

	lda #$00
	sta BALL2.INPLAY
l_3593
l_359F
l_3576

; optimize OK (service.pas), line = 4028

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 4030

	lda BALL0.INPLAY
	jeq l_35BA
	inc BALLS_IN_PLAY
l_35BA

; optimize OK (service.pas), line = 4031

	lda BALL1.INPLAY
	jeq l_35CD
	inc BALLS_IN_PLAY
l_35CD

; optimize OK (service.pas), line = 4032

	lda BALL2.INPLAY
	jeq l_35E0
	inc BALLS_IN_PLAY
l_35E0

; optimize OK (service.pas), line = 4035

	lda BALL0.INPLAY
	jne l_35F6

; optimize OK (service.pas), line = 4037

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 4038

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 4039

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 4040

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 4041

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 4049

	jsr NOSOUND
l_35F6
l_3343

; optimize OK (service.pas), line = 3812

	lda REMAIN_BLK
	jeq l_3344w
	lda BALL0.INPLAY
	jeq l_3344w
	lda SCORE.ABORTPLAY
	jeq l_3344
l_3344w

; optimize OK (service.pas), line = 4105

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 4106

	lda REMAIN_BLK
	jne l_3644
	lda #$01
	sta RESULT
l_3644
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0378
X	= DATAORIGIN+$0379
TMP	= DATAORIGIN+$037A
T1	= DATAORIGIN+$037C
T2	= DATAORIGIN+$037E
adr.BALL0	= DATAORIGIN+$0380	; [26] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$0380
BALL0.Y	= DATAORIGIN+$0382
BALL0.FINEX	= DATAORIGIN+$0384
BALL0.FINEY	= DATAORIGIN+$0385
BALL0.OLDX	= DATAORIGIN+$0386
BALL0.OLDY	= DATAORIGIN+$0388
BALL0.SPEED	= DATAORIGIN+$038A
BALL0.FINESPEED	= DATAORIGIN+$038C
BALL0.SPEEDX	= DATAORIGIN+$038E
BALL0.SPEEDY	= DATAORIGIN+$0390
BALL0.SBD	= DATAORIGIN+$0392
BALL0.BRWHIT	= DATAORIGIN+$0394
BALL0.INPLAY	= DATAORIGIN+$0395
BALL0.LAUNCH	= DATAORIGIN+$0396
BALL0.ONVAUS	= DATAORIGIN+$0397
BALL0.STM	= DATAORIGIN+$0399
adr.BALL1	= DATAORIGIN+$039A	; [26] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$039A
BALL1.Y	= DATAORIGIN+$039C
BALL1.FINEX	= DATAORIGIN+$039E
BALL1.FINEY	= DATAORIGIN+$039F
BALL1.OLDX	= DATAORIGIN+$03A0
BALL1.OLDY	= DATAORIGIN+$03A2
BALL1.SPEED	= DATAORIGIN+$03A4
BALL1.FINESPEED	= DATAORIGIN+$03A6
BALL1.SPEEDX	= DATAORIGIN+$03A8
BALL1.SPEEDY	= DATAORIGIN+$03AA
BALL1.SBD	= DATAORIGIN+$03AC
BALL1.BRWHIT	= DATAORIGIN+$03AE
BALL1.INPLAY	= DATAORIGIN+$03AF
BALL1.LAUNCH	= DATAORIGIN+$03B0
BALL1.ONVAUS	= DATAORIGIN+$03B1
BALL1.STM	= DATAORIGIN+$03B3
adr.BALL2	= DATAORIGIN+$03B4	; [26] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$03B4
BALL2.Y	= DATAORIGIN+$03B6
BALL2.FINEX	= DATAORIGIN+$03B8
BALL2.FINEY	= DATAORIGIN+$03B9
BALL2.OLDX	= DATAORIGIN+$03BA
BALL2.OLDY	= DATAORIGIN+$03BC
BALL2.SPEED	= DATAORIGIN+$03BE
BALL2.FINESPEED	= DATAORIGIN+$03C0
BALL2.SPEEDX	= DATAORIGIN+$03C2
BALL2.SPEEDY	= DATAORIGIN+$03C4
BALL2.SBD	= DATAORIGIN+$03C6
BALL2.BRWHIT	= DATAORIGIN+$03C8
BALL2.INPLAY	= DATAORIGIN+$03C9
BALL2.LAUNCH	= DATAORIGIN+$03CA
BALL2.ONVAUS	= DATAORIGIN+$03CB
BALL2.STM	= DATAORIGIN+$03CD
SCORES	= DATAORIGIN+$03CE

@VarData	= X
@VarDataSize	= 89

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 4129

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 4187

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03DA
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$03DC
Y	= DATAORIGIN+$03DE
ST	= DATAORIGIN+$03E0
OLDX	= DATAORIGIN+$03E2
OLDY	= DATAORIGIN+$03E4
NEWX	= DATAORIGIN+$03E6
NEWY	= DATAORIGIN+$03E8

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 4196

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 4198

	lda #$01
	sta X

l_3669
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_3677

; optimize OK (service.pas), line = 4200

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 4201

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 4202

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4203

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 4205

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_3669
l_3677

; optimize OK (service.pas), line = 4208

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$03EA

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 4268

	jsr NOSOUND

; optimize OK (service.pas), line = 4269

	lda #$00
	sta SCORE.ABORTPLAY

; -------------------  ASM Block 00000193  -------------------

      fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 4286

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 4287

	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$D0
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000194  -------------------

      fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 4330

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03EB
X	= DATAORIGIN+$03ED
Y	= DATAORIGIN+$03EF
Z	= DATAORIGIN+$03F1
K	= DATAORIGIN+$03F3
IK	= DATAORIGIN+$03F5

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 4338

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 4339

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_36D9
	lda #$00
	sta adr.SCORE.LIVES+$02
l_36D9

; optimize OK (service.pas), line = 4342

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 4343

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4347

	jsr SET_WALL

; optimize FAIL ('FILL_PICTURE_WITH_PATTERN', service.pas), line = 4349

	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 4351

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 4352

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 4359

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC_+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4360

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC_+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4361

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_3707

; --- RepeatUntilProlog
l_3708

; optimize OK (service.pas), line = 4371

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_371A

; optimize FAIL (1, service.pas), line = 4373

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 4376

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 4380

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_371A

; optimize OK (service.pas), line = 4384

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4385

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4390

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4393

	jeq l_3768

; optimize OK (service.pas), line = 4396

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4399

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_3784

; optimize OK (service.pas), line = 4400

	lda #$01
	sta adr.SCORE.WALL_N,y
l_3784

; optimize OK (service.pas), line = 4403

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_37B6
l_3768

; optimize OK (service.pas), line = 4409

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_37CB
	jsr GAME_OVER
l_37B6
l_37CB

; optimize OK (service.pas), line = 4414

	lda NWALL
	jne l_3708

; optimize FAIL (0, service.pas), line = 4417

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4418

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_37F3
	lda #$01
	sta CUR_PLAYER
l_37F3

; optimize OK (service.pas), line = 4424

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_380F
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_380F

; optimize OK (service.pas), line = 4429

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_3707

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$03F7
NWALL	= DATAORIGIN+$03F9

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('NOSOUND', arkanoid_vbxe.pas), line = 1029

	jsr NOSOUND

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 1031

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('XSFX.TSFX.CLEAR', arkanoid_vbxe.pas), line = 1033

	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.CLEAR

; optimize OK (arkanoid_vbxe.pas), line = 1035

	lda #$E5
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$20
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1036

	lda #$08
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1037

	lda #$19
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1038

	lda #$2A
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1039

	lda #$3B
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1040

	lda #$4F
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1041

	lda #$72
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1042

	lda #$95
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1043

	lda #$B8
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1044

	lda #$DB
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$21
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1045

	lda #$7C
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$22
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize OK (arkanoid_vbxe.pas), line = 1046

	lda #$AB
	sta XSFX.TSFX.ADD.@010188000.ASFX
	lda #$22
	sta XSFX.TSFX.ADD.@010188000.ASFX+1
	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.ADD.@010188000

; optimize FAIL ('XSFX.TSFX.PLAY', arkanoid_vbxe.pas), line = 1048

	lda SFX
	ldy SFX+1
	jsr XSFX.TSFX.PLAY

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 1051

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 1052

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta EXPLOSION.OFS
	lda #$60
	sta EXPLOSION.OFS+1
	lda #$00
	sta EXPLOSION.OFS+2
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$72
	sta EXPLOSION.HEIGHT

; optimize OK (btm.inc), line = 5

	lda #$B4
	sta NEWVAUS.OFS
	lda #$72
	sta NEWVAUS.OFS+1
	lda #$00
	sta NEWVAUS.OFS+2
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C1
	sta NEWVAUS.HEIGHT

; optimize OK (btm.inc), line = 9

	lda #$9D
	sta SHINEWALL.OFS
	lda #$91
	sta SHINEWALL.OFS+1
	lda #$00
	sta SHINEWALL.OFS+2
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$50
	sta SHINEWALL.HEIGHT

; optimize OK (btm.inc), line = 13

	lda #$9D
	sta MINIVAUS.OFS
	lda #$96
	sta MINIVAUS.OFS+1
	lda #$00
	sta MINIVAUS.OFS+2
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$05
	sta MINIVAUS.HEIGHT

; optimize OK (btm.inc), line = 17

	lda #$01
	sta LEVELSEL.OFS
	lda #$97
	sta LEVELSEL.OFS+1
	lda #$00
	sta LEVELSEL.OFS+2
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$5F
	sta LEVELSEL.HEIGHT

; optimize OK (btm.inc), line = 21

	lda #$CC
	sta LETTERS.OFS
	lda #$9E
	sta LETTERS.OFS+1
	lda #$00
	sta LETTERS.OFS+2
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$38
	sta LETTERS.HEIGHT

; optimize OK (btm.inc), line = 25

	lda #$CC
	sta NORMAL.OFS
	lda #$BA
	sta NORMAL.OFS+1
	lda #$00
	sta NORMAL.OFS+2
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$07
	sta NORMAL.HEIGHT

; optimize OK (btm.inc), line = 29

	lda #$AC
	sta LASERS.OFS
	lda #$BB
	sta LASERS.OFS+1
	lda #$00
	sta LASERS.OFS+2
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$07
	sta LASERS.HEIGHT

; optimize OK (btm.inc), line = 33

	lda #$8C
	sta ENLARGED.OFS
	lda #$BC
	sta ENLARGED.OFS+1
	lda #$00
	sta ENLARGED.OFS+2
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta ENLARGED.HEIGHT

; optimize OK (btm.inc), line = 37

	lda #$4C
	sta SHOOTS.OFS
	lda #$BE
	sta SHOOTS.OFS+1
	lda #$00
	sta SHOOTS.OFS+2
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$08
	sta SHOOTS.HEIGHT

; optimize OK (btm.inc), line = 41

	lda #$B4
	sta BALLDATA.OFS
	lda #$BE
	sta BALLDATA.OFS+1
	lda #$00
	sta BALLDATA.OFS+2
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$05
	sta BALLDATA.HEIGHT

; optimize OK (btm.inc), line = 45

	lda #$CD
	sta PATTERN0.OFS
	lda #$BE
	sta PATTERN0.OFS+1
	lda #$00
	sta PATTERN0.OFS+2
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$18
	sta PATTERN0.HEIGHT

; optimize OK (btm.inc), line = 49

	lda #$3D
	sta PATTERN1.OFS
	lda #$C1
	sta PATTERN1.OFS+1
	lda #$00
	sta PATTERN1.OFS+2
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$0E
	sta PATTERN1.HEIGHT

; optimize OK (btm.inc), line = 53

	lda #$01
	sta PATTERN2.OFS
	lda #$C2
	sta PATTERN2.OFS+1
	lda #$00
	sta PATTERN2.OFS+2
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$23
	sta PATTERN2.HEIGHT

; optimize OK (btm.inc), line = 57

	lda #$33
	sta PATTERN3.OFS
	lda #$C7
	sta PATTERN3.OFS+1
	lda #$00
	sta PATTERN3.OFS+2
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$1D
	sta PATTERN3.HEIGHT

; optimize OK (btm.inc), line = 61

	lda #$5F
	sta PATTERN4.OFS
	lda #$CA
	sta PATTERN4.OFS+1
	lda #$00
	sta PATTERN4.OFS+2
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$1E
	sta PATTERN4.HEIGHT

; optimize OK (arkanoid_vbxe.pas), line = 1059

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 1061

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 1064

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 1065

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3930

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 1072

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 1074

	jeq l_3946
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_3946

; optimize OK (arkanoid_vbxe.pas), line = 1077

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3930

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 1085

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DIGIT	= $5000
VBXE_DATA	= $6000
PLAYSCREEN_OFS	= $20000
VRAM	= $30000
PATTERN_TEMP	= $40000
EXPLOSION_OFS	= $6000
SHINEWALL_OFS	= $919D
LETTERS_OFS	= $9ECC
MINIVAUS_OFS	= $969D
SHOOTS_OFS	= $BE4C
BALLDATA_OFS	= $BEB4
PRESENTS_OFS	= $D080
FLUX2_OFS	= $1CA80
MINIVAUS_WIDTH	= $14
MINIVAUS_HEIGHT	= $05
EXPLOSION_WIDTH	= $2A
SHOOTS_WIDTH	= $0D
SHOOTS_HEIGHT	= $08
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$008E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0099
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$00AF
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$00B8
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $024B
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$00C2
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$00C6
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00D1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00DD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B1
adr.SFX1	= CODEORIGIN+$00E5
.var SFX1	= adr.SFX1 .word
adr.SFX2	= CODEORIGIN+$0108
.var SFX2	= adr.SFX2 .word
adr.SFX3	= CODEORIGIN+$0119
.var SFX3	= adr.SFX3 .word
adr.SFX4	= CODEORIGIN+$012A
.var SFX4	= adr.SFX4 .word
adr.SFX5	= CODEORIGIN+$013B
.var SFX5	= adr.SFX5 .word
adr.SFX6	= CODEORIGIN+$014F
.var SFX6	= adr.SFX6 .word
adr.SFX7	= CODEORIGIN+$0172
.var SFX7	= adr.SFX7 .word
adr.SFX8	= CODEORIGIN+$0195
.var SFX8	= adr.SFX8 .word
adr.SFX9	= CODEORIGIN+$01B8
.var SFX9	= adr.SFX9 .word
adr.SFX10	= CODEORIGIN+$01DB
.var SFX10	= adr.SFX10 .word
adr.SFX11	= CODEORIGIN+$027C
.var SFX11	= adr.SFX11 .word
adr.SFX12	= CODEORIGIN+$02AB
.var SFX12	= adr.SFX12 .word
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.BLT_BOX	= $B12A
.var BLT_BOX	= adr.BLT_BOX .word
adr.BLT_BOX.SRC_ADR	= $B12A
.var BLT_BOX.SRC_ADR	= adr.BLT_BOX.SRC_ADR .word
BLT_BOX.SRC_ADR.BYTE0	= $B12A
BLT_BOX.SRC_ADR.BYTE1	= $B12B
BLT_BOX.SRC_ADR.BYTE2	= $B12C
BLT_BOX.SRC_STEP_Y	= $B12D
BLT_BOX.SRC_STEP_X	= $B12F
adr.BLT_BOX.DST_ADR	= $B130
.var BLT_BOX.DST_ADR	= adr.BLT_BOX.DST_ADR .word
BLT_BOX.DST_ADR.BYTE0	= $B130
BLT_BOX.DST_ADR.BYTE1	= $B131
BLT_BOX.DST_ADR.BYTE2	= $B132
BLT_BOX.DST_STEP_Y	= $B133
BLT_BOX.DST_STEP_X	= $B135
BLT_BOX.BLT_WIDTH	= $B136
BLT_BOX.BLT_HEIGHT	= $B138
BLT_BOX.BLT_AND_MASK	= $B139
BLT_BOX.BLT_XOR_MASK	= $B13A
BLT_BOX.BLT_COLLISION_MASK	= $B13B
BLT_BOX.BLT_ZOOM	= $B13C
BLT_BOX.PATTERN_FEATURE	= $B13D
BLT_BOX.BLT_CONTROL	= $B13E
adr.BLT_ZERO	= $B13F
.var BLT_ZERO	= adr.BLT_ZERO .word
adr.BLT_ZERO.SRC_ADR	= $B13F
.var BLT_ZERO.SRC_ADR	= adr.BLT_ZERO.SRC_ADR .word
BLT_ZERO.SRC_ADR.BYTE0	= $B13F
BLT_ZERO.SRC_ADR.BYTE1	= $B140
BLT_ZERO.SRC_ADR.BYTE2	= $B141
BLT_ZERO.SRC_STEP_Y	= $B142
BLT_ZERO.SRC_STEP_X	= $B144
adr.BLT_ZERO.DST_ADR	= $B145
.var BLT_ZERO.DST_ADR	= adr.BLT_ZERO.DST_ADR .word
BLT_ZERO.DST_ADR.BYTE0	= $B145
BLT_ZERO.DST_ADR.BYTE1	= $B146
BLT_ZERO.DST_ADR.BYTE2	= $B147
BLT_ZERO.DST_STEP_Y	= $B148
BLT_ZERO.DST_STEP_X	= $B14A
BLT_ZERO.BLT_WIDTH	= $B14B
BLT_ZERO.BLT_HEIGHT	= $B14D
BLT_ZERO.BLT_AND_MASK	= $B14E
BLT_ZERO.BLT_XOR_MASK	= $B14F
BLT_ZERO.BLT_COLLISION_MASK	= $B150
BLT_ZERO.BLT_ZOOM	= $B151
BLT_ZERO.PATTERN_FEATURE	= $B152
BLT_ZERO.BLT_CONTROL	= $B153
adr.VBXE_RAM	= DATAORIGIN+$00F7	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$00F7
VBXE_RAM.SIZE	= DATAORIGIN+$00FB
adr.SFX	= DATAORIGIN+$00FF	; [0] OBJECT
.var SFX	= adr.SFX .word
adr.BALLDATA	= DATAORIGIN+$00FF	; [7] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00FF
BALLDATA.HEIGHT	= DATAORIGIN+$0101
BALLDATA.OFS	= DATAORIGIN+$0102
adr.PLAYSCREEN	= DATAORIGIN+$0106	; [7] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$0106
PLAYSCREEN.HEIGHT	= DATAORIGIN+$0108
PLAYSCREEN.OFS	= DATAORIGIN+$0109
adr.PLAYVAUS	= DATAORIGIN+$010D	; [7] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$010D
PLAYVAUS.HEIGHT	= DATAORIGIN+$010F
PLAYVAUS.OFS	= DATAORIGIN+$0110
adr.NORMAL	= DATAORIGIN+$0114	; [7] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$0114
NORMAL.HEIGHT	= DATAORIGIN+$0116
NORMAL.OFS	= DATAORIGIN+$0117
adr.ENLARGED	= DATAORIGIN+$011B	; [7] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$011B
ENLARGED.HEIGHT	= DATAORIGIN+$011D
ENLARGED.OFS	= DATAORIGIN+$011E
adr.LASERS	= DATAORIGIN+$0122	; [7] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$0122
LASERS.HEIGHT	= DATAORIGIN+$0124
LASERS.OFS	= DATAORIGIN+$0125
adr.EXPLOSION	= DATAORIGIN+$0129	; [7] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$0129
EXPLOSION.HEIGHT	= DATAORIGIN+$012B
EXPLOSION.OFS	= DATAORIGIN+$012C
adr.NEWVAUS	= DATAORIGIN+$0130	; [7] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$0130
NEWVAUS.HEIGHT	= DATAORIGIN+$0132
NEWVAUS.OFS	= DATAORIGIN+$0133
adr.PRESENTS	= DATAORIGIN+$0137	; [7] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0137
PRESENTS.HEIGHT	= DATAORIGIN+$0139
PRESENTS.OFS	= DATAORIGIN+$013A
adr.SHINEWALL	= DATAORIGIN+$013E	; [7] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$013E
SHINEWALL.HEIGHT	= DATAORIGIN+$0140
SHINEWALL.OFS	= DATAORIGIN+$0141
adr.MINIVAUS	= DATAORIGIN+$0145	; [7] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0145
MINIVAUS.HEIGHT	= DATAORIGIN+$0147
MINIVAUS.OFS	= DATAORIGIN+$0148
adr.LEVELSEL	= DATAORIGIN+$014C	; [7] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$014C
LEVELSEL.HEIGHT	= DATAORIGIN+$014E
LEVELSEL.OFS	= DATAORIGIN+$014F
adr.LETTERS	= DATAORIGIN+$0153	; [7] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0153
LETTERS.HEIGHT	= DATAORIGIN+$0155
LETTERS.OFS	= DATAORIGIN+$0156
adr.SHOOTS	= DATAORIGIN+$015A	; [7] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$015A
SHOOTS.HEIGHT	= DATAORIGIN+$015C
SHOOTS.OFS	= DATAORIGIN+$015D
adr.VAUS	= DATAORIGIN+$0161	; [10] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0161
VAUS.Y	= DATAORIGIN+$0162
VAUS.OLDX	= DATAORIGIN+$0163
VAUS.OLDY	= DATAORIGIN+$0164
VAUS.OLDLEN	= DATAORIGIN+$0165
VAUS.WIDTH	= DATAORIGIN+$0166
VAUS.HEIGHT	= DATAORIGIN+$0167
VAUS.FLASH	= DATAORIGIN+$0168
VAUS.IFLASH	= DATAORIGIN+$0169
VAUS.LETTER	= DATAORIGIN+$016A
adr.PATTERN	= DATAORIGIN+$016B	; [7] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$016B
PATTERN.HEIGHT	= DATAORIGIN+$016D
PATTERN.OFS	= DATAORIGIN+$016E
adr.PATTERN0	= DATAORIGIN+$0172	; [7] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0172
PATTERN0.HEIGHT	= DATAORIGIN+$0174
PATTERN0.OFS	= DATAORIGIN+$0175
adr.PATTERN1	= DATAORIGIN+$0179	; [7] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$0179
PATTERN1.HEIGHT	= DATAORIGIN+$017B
PATTERN1.OFS	= DATAORIGIN+$017C
adr.PATTERN2	= DATAORIGIN+$0180	; [7] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0180
PATTERN2.HEIGHT	= DATAORIGIN+$0182
PATTERN2.OFS	= DATAORIGIN+$0183
adr.PATTERN3	= DATAORIGIN+$0187	; [7] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$0187
PATTERN3.HEIGHT	= DATAORIGIN+$0189
PATTERN3.OFS	= DATAORIGIN+$018A
adr.PATTERN4	= DATAORIGIN+$018E	; [7] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$018E
PATTERN4.HEIGHT	= DATAORIGIN+$0190
PATTERN4.OFS	= DATAORIGIN+$0191
STATUS	= DATAORIGIN+$0195
REMAIN_BLK	= DATAORIGIN+$0196
TOTALWALL	= DATAORIGIN+$0197
adr.SCORE	= DATAORIGIN+$0198	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$0198] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$01A4] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$01A7] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$01AA
SCORE.PL_NUMB	= DATAORIGIN+$01AE
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01AF] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$01B2
CUR_PLAYER	= DATAORIGIN+$01B3
adr.SHINEREC	= DATAORIGIN+$01B4	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$01B4
SHINEREC.YB	= DATAORIGIN+$01B5
SHINEREC.FRAME	= DATAORIGIN+$01B6
SHINEREC.BLOCK	= DATAORIGIN+$01B7
SHINEREC.ACTIVE	= DATAORIGIN+$01B8
LV	= DATAORIGIN+$01B9
TRAINER	= DATAORIGIN+$01BB
adr.LETT	= DATAORIGIN+$01BC	; [15] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01BC
LETT.Y	= DATAORIGIN+$01BD
LETT.TYP	= DATAORIGIN+$01BE
LETT.FRAME	= DATAORIGIN+$01C0
LETT.SUBFRAME	= DATAORIGIN+$01C1
LETT.ACTIVE	= DATAORIGIN+$01C2
LETT.INCOMING	= DATAORIGIN+$01C3
LETT.NEXTX	= DATAORIGIN+$01C5
LETT.NEXTY	= DATAORIGIN+$01C6
LETT.NEXTTYPE	= DATAORIGIN+$01C7
LETT.LAST	= DATAORIGIN+$01C9
adr.FIRE	= DATAORIGIN+$01CB	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01CB
FIRE.Y	= DATAORIGIN+$01CC
FIRE.SHOT	= DATAORIGIN+$01CD
FIRE.AVL	= DATAORIGIN+$01CE
FIRE.NW	= DATAORIGIN+$01CF
BALLS_IN_PLAY	= DATAORIGIN+$01D0
SCRFLUX	= DATAORIGIN+$01D1
SCRFLUXCNT	= DATAORIGIN+$01D2
SOUND_ON	= DATAORIGIN+$01D3
OLD_SCORES	= DATAORIGIN+$01D4
HLP	= DATAORIGIN+$01D8
F_HLP	= DATAORIGIN+$01DA
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD10TABLE	= $C200
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.MOD90TABLE	= $C300
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD360TABLE	= $C400
.var MOD360TABLE	= adr.MOD360TABLE .word
adr.ATAN_TAB	= $C600
.var ATAN_TAB	= adr.ATAN_TAB .word
adr.LOG2_TAB	= $C700
.var LOG2_TAB	= adr.LOG2_TAB .word
adr.SCALE360	= $C800
.var SCALE360	= adr.SCALE360 .word
adr.SINTABLE	= $CA00
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.MUL90_16	= $DC00
.var MUL90_16	= adr.MUL90_16 .word
adr.ALL_WALLS	= $DD00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.XSFX.@UnitInit
	jsr MAIN.XSFX.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.XSFX) > 0
	.print 'XSFX: ',MAIN.XSFX,'..',MAIN.XSFX+.SIZEOF(MAIN.XSFX)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $FF $FF $FF $FF

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1018

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $01 $00 $00  $01 $13 $AF $01 $12 $AD $01 $12
.by  $A7 $01 $13 $A5 $01 $12 $A5 $01  $12 $A4 $01 $12 $A3 $01 $12 $A1  $01 $12 $A0 $01 $12 $A1 $00 $FF
.by  $01 $00 $00 $02 $2F $AC $02 $33  $AC $03 $2F $AE $03 $33 $AE $00  $FF $01 $00 $00 $03 $FF $AC $03
.by  $F5 $AD $02 $EB $AE $02 $E1 $AF  $00 $FF $01 $00 $00 $04 $1E $8A  $01 $20 $88 $01 $24 $85 $01 $2C
.by  $84 $00 $FF $01 $00 $00 $01 $01  $27 $01 $02 $29 $01 $04 $2A $01  $05 $28 $01 $04 $25 $00 $FF $01
.by  $00 $00 $01 $3C $AF $01 $3B $AD  $01 $3B $A7 $01 $3C $A5 $01 $3B  $A5 $01 $3C $A4 $01 $3C $A3 $01
.by  $3C $A1 $01 $3C $A0 $01 $3C $A1  $00 $FF $01 $00 $00 $01 $32 $AF  $01 $31 $AD $01 $31 $A7 $01 $32
.by  $A5 $01 $31 $A5 $01 $32 $A4 $01  $32 $A3 $01 $32 $A1 $01 $32 $A0  $01 $32 $A1 $00 $FF $01 $00 $00
.by  $01 $19 $AF $01 $18 $AD $01 $18  $A7 $01 $19 $A5 $01 $18 $A5 $01  $19 $A4 $01 $19 $A3 $01 $19 $A1
.by  $01 $19 $A0 $01 $19 $A1 $00 $FF  $01 $00 $00 $01 $13 $AF $01 $12  $AD $01 $12 $A7 $01 $13 $A5 $01
.by  $12 $A5 $01 $12 $A4 $01 $12 $A3  $01 $12 $A1 $01 $12 $A0 $01 $12  $A1 $00 $FF $01 $00 $00 $03 $03
.by  $22 $03 $05 $22 $03 $04 $22 $03  $03 $22 $03 $03 $24 $03 $05 $24  $03 $04 $24 $03 $03 $24 $03 $03
.by  $26 $03 $05 $26 $03 $04 $26 $03  $03 $26 $03 $03 $28 $03 $05 $28  $03 $04 $28 $03 $03 $28 $03 $03
.by  $2A $03 $05 $2A $03 $04 $2A $03  $03 $2A $03 $03 $2C $03 $05 $2C  $03 $04 $2C $03 $03 $2C $03 $03
.by  $2E $03 $05 $2E $03 $04 $2E $03  $03 $2E $03 $03 $2C $03 $05 $2C  $03 $04 $2C $03 $03 $2C $03 $03
.by  $2A $03 $05 $2A $03 $04 $2A $03  $03 $2A $03 $03 $28 $03 $05 $28  $03 $04 $28 $03 $03 $28 $03 $03
.by  $26 $03 $05 $26 $03 $04 $26 $03  $03 $26 $03 $03 $24 $03 $05 $24  $03 $04 $24 $03 $03 $24 $03 $03
.by  $22 $03 $05 $22 $03 $04 $22 $03  $03 $22 $00 $FF $03 $14 $29 $04  $10 $2C $02 $12 $2B $03 $14 $27
.by  $04 $10 $2A $02 $12 $29 $03 $14  $25 $04 $10 $28 $02 $12 $27 $03  $14 $23 $04 $10 $26 $02 $12 $25
.by  $03 $14 $22 $04 $10 $25 $02 $12  $24 $00 $FF $01 $00 $00 $07 $1F  $2F $07 $21 $2D $07 $23 $2B $07
.by  $25 $29 $06 $27 $27 $06 $29 $25  $06 $2B $23 $00 $FF $3F $00 $C0  $FF $40 $7F $BF $80 $00 $06 $0C
.by  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
