; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/09/10] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	RCDATA 'atan_tab.dat' adr.ATAN_TAB 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'title.bmp' PRESENTS_OFS 0 1 0 0 0 0 0 0
	XBMP 'playscreen.bmp' PLAYSCREEN_OFS 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$000C
GETCOLOR	= DATAORIGIN+$000D
VIDEORAM	= DATAORIGIN+$000E
adr.LASTARCCOORDS	= DATAORIGIN+$0010	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0010
LASTARCCOORDS.Y	= DATAORIGIN+$0012
LASTARCCOORDS.XSTART	= DATAORIGIN+$0014
LASTARCCOORDS.YSTART	= DATAORIGIN+$0016
LASTARCCOORDS.XEND	= DATAORIGIN+$0018
LASTARCCOORDS.YEND	= DATAORIGIN+$001A
WIN_LEFT	= DATAORIGIN+$001C
WIN_RIGHT	= DATAORIGIN+$001E
WIN_TOP	= DATAORIGIN+$0020
WIN_BOTTOM	= DATAORIGIN+$0022
SCANLINE_WIDTH	= DATAORIGIN+$0024
CURRENTX	= DATAORIGIN+$0025
CURRENTY	= DATAORIGIN+$0027

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0065
POSITION	= DATAORIGIN+$0067
SIZE	= DATAORIGIN+$0069
ADR	= DATAORIGIN+$006B
SIZ	= DATAORIGIN+$006F

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_0168
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_0168
	cmp #$1F
	jne l_0177

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0177
	cmp #$18
	jne l_0186

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_0186

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0073
S	= DATAORIGIN+$0074
@CASETMP_0005	= DATAORIGIN+$0076

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0077

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0078

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0079
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETOVERLAYADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000125  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+6
	lda a+1
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+7
	lda a+2
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+8

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= DATAORIGIN+$007D

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$0081

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0035	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0035
VRAM.SIZE	= DATAORIGIN+$0039
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0173

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0175
B	= DATAORIGIN+$0177

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------


seed = MAIN.SYSTEM.RndSeed

Random16:
	lda seed+1
	tay 		; store copy of high byte
	; compute seed+1 ($39>>1 = %11100)
	lsr @		; shift to consume zeroes on left...
	lsr @
	lsr @
	sta seed+1	; now recreate the remaining bits in reverse order... %111
	lsr @
	eor seed+1
	lsr @
	eor seed+1
	eor seed+0	; recombine with original low byte
	sta seed+1
	; compute seed+0 ($39 = %111001)
	tya		; original high byte
	sta seed+0
	asl @
	eor seed+0
	asl @
	eor seed+0
	asl @
	asl @
	asl @
	eor seed+0
	sta seed+0

	lda seed+1
	and #$03
	sta Result+1
	lda seed
	sta Result

loop	cpw Result range
	bcc @exit

	lsr Result+1
	ror Result

	jmp loop

@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0179
RESULT	= DATAORIGIN+$017B

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000138  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod90Table,Y	; tablica: (X*256) mod 90
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda #0
    adc #0
    sta Result+1

    cpw Result #90
    BCC done
    SBW Result #90
    
    cpw Result #90
    BCC done
    SBW Result #90

    cpw Result #90
    BCC done
    SBW Result #90

done

    lda a+1
    bpl @exit
   
    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$017D
RESULT	= DATAORIGIN+$017F

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD360						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000139  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod360Table,Y	; tablica: (X*256) mod 360
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda adr.Mod360Table+256,Y
    adc #0
    sta Result+1

    cpw Result #360
    BCC done
    SBW Result #360
    
    cpw Result #360
    BCC done
    SBW Result #360

    cpw Result #360
    BCC done
    SBW Result #360

done

    lda a+1
    bpl @exit
   
    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0181
RESULT	= DATAORIGIN+$0183

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	FASTSQRT					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 517

	lda I
	sta :STACKORIGIN+9
	lda I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda I+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda I+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$C0
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$1F
	sta I+3
	lda :STACKORIGIN+9
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	sta I+1

; optimize OK (arkanoid_vbxe.pas), line = 519

	lda <I
	sta :bp2
	lda >I
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0185
RESULT	= DATAORIGIN+$0189
I	= DATAORIGIN+$0185

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	Q0						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 529

	ldy X
	lda adr.LOG2_TAB,y
	sta LX

; optimize OK (arkanoid_vbxe.pas), line = 530

	ldy Y
	lda adr.LOG2_TAB,y
	sta LY

; optimize OK (arkanoid_vbxe.pas), line = 532

	lda LX
	cmp LY
	jcc l_01FE

; optimize OK (arkanoid_vbxe.pas), line = 533

	sbc LY
	tay
	lda #$00
	sub adr.ATAN_TAB,y
	and #$3F
	jmp l_021E
l_01FE

; optimize OK (arkanoid_vbxe.pas), line = 535

	lda LY
	sub LX
	tay
	lda adr.ATAN_TAB,y
l_021E
	sta RESULT
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$018D
Y	= DATAORIGIN+$018E
RESULT	= DATAORIGIN+$018F
LX	= DATAORIGIN+$0190
LY	= DATAORIGIN+$0191

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	ATAN2						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 568

	lda X+1
	jpl l_0242

; optimize OK (arkanoid_vbxe.pas), line = 569

	lda #$00
	sub X
	sta SX
	lda #$00
	sbc X+1
	jmp l_0254
l_0242

; optimize OK (arkanoid_vbxe.pas), line = 571

	lda X
	sta SX
	lda X+1
l_0254
	sta SX+1

; optimize OK (arkanoid_vbxe.pas), line = 573

	lda Y+1
	jpl l_026A

; optimize OK (arkanoid_vbxe.pas), line = 574

	lda #$00
	sub Y
	sta SY
	lda #$00
	sbc Y+1
	jmp l_027C
l_026A

; optimize OK (arkanoid_vbxe.pas), line = 576

	lda Y
	sta SY
	lda Y+1
l_027C
	sta SY+1

; --- WhileProlog
	jmp l_0283
l_0284

; optimize OK (arkanoid_vbxe.pas), line = 581

	lsr SX+1
	ror SX

; optimize OK (arkanoid_vbxe.pas), line = 582

	lsr SY+1
	ror SY
l_0283

; optimize OK (arkanoid_vbxe.pas), line = 579

	lda SX+1
	jne l_0284
	lda SX
	jmi l_0284
	lda SY+1
	cmp #$00
	bne @+
	lda SY
	cmp #$80
@
	jcs l_0284

; optimize OK (arkanoid_vbxe.pas), line = 585

	lda X+1
	jpl l_02BD

; optimize OK (arkanoid_vbxe.pas), line = 586

	lda #$00
	sub SX
	sta X
	lda #$00
	sbc SX+1
	jmp l_02CF
l_02BD

; optimize OK (arkanoid_vbxe.pas), line = 588

	lda SX
	sta X
	lda SX+1
l_02CF
	sta X+1

; optimize OK (arkanoid_vbxe.pas), line = 591

	lda Y+1
	jpl l_02E5

; optimize OK (arkanoid_vbxe.pas), line = 592

	lda #$00
	sub SY
	sta Y
	lda #$00
	sbc SY+1
	jmp l_02F7
l_02E5

; optimize OK (arkanoid_vbxe.pas), line = 594

	lda SY
	sta Y
	lda SY+1
l_02F7
	sta Y+1

; optimize OK (arkanoid_vbxe.pas), line = 597

	lda #$00
	sta E

; optimize OK (arkanoid_vbxe.pas), line = 600

	lda Y+1
	jpl l_0311
	lda E
	ora #$02
	sta E
l_0311

; optimize OK (arkanoid_vbxe.pas), line = 601

	lda X+1
	jpl l_032F
	lda E
	ora #$01
	sta E
l_032F

; optimize OK (arkanoid_vbxe.pas), line = 604

	lda E
	cmp #$01
	jne l_034E

; optimize OK (arkanoid_vbxe.pas), line = 608

	lda #$00
	sub X
	sta Q0.X
	lda Y
	sta Q0.Y
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 609

	lda #$00
	sub A
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 610

	and #$7F
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 611

	sta RESULT
	jmp @exit
l_034E

; optimize OK (arkanoid_vbxe.pas), line = 614

	lda E
	cmp #$02
	jne l_0387

; optimize OK (arkanoid_vbxe.pas), line = 618

	lda #$00
	sub Y
	sta Q0.Y
	lda X
	sta Q0.X
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 619

	lda #$00
	sub A
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 620

	sta RESULT
	jmp @exit
l_0387

; optimize OK (arkanoid_vbxe.pas), line = 623

	lda E
	cmp #$03
	jne l_03B6

; optimize OK (arkanoid_vbxe.pas), line = 628

	lda #$00
	sub Y
	sta Q0.Y
	lda #$00
	sub X
	sta Q0.X
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 629

	add #$80
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 630

	sta RESULT
	jmp @exit
l_03B6

; optimize OK (arkanoid_vbxe.pas), line = 634

	lda X
	sta Q0.X
	lda Y
	sta Q0.Y
	jsr Q0
	lda Q0.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

Y	= DATAORIGIN+$0192
X	= DATAORIGIN+$0194
RESULT	= DATAORIGIN+$0196
A	= DATAORIGIN+$0197
E	= DATAORIGIN+$0198
SX	= :STACKORIGIN-2
SY	= :STACKORIGIN-4

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 21

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 23

	sta @CASETMP_0007
	cmp #$0B
	jne l_03F8
@

; optimize OK (service.pas), line = 24

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0409
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_0409
	jmp a_0007
l_03F8
	cmp #$07
	jne l_0414

; optimize OK (service.pas), line = 25

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0425
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_0425
l_0414
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0199
A	= DATAORIGIN+$019B
@CASETMP_0007	= DATAORIGIN+$019C

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 34

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$019D

	rts						; ret
.endl

.local	BLITZERO					; PROCEDURE | REGISTER

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 49

	lda SRC+2
	sta BLT_ZERO.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 50

	lda SRC+1
	sta BLT_ZERO.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 51

	lda SRC
	sta BLT_ZERO.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 53

	lda HLP+1
	sta BLT_ZERO.DST_ADR.BYTE1

; optimize OK (service.pas), line = 54

	lda HLP
	sta BLT_ZERO.DST_ADR.BYTE0

; optimize OK (service.pas), line = 56

	lda W
	sta BLT_ZERO.SRC_STEP_Y
	lda W+1
	sta BLT_ZERO.SRC_STEP_Y+1

; optimize OK (service.pas), line = 58

	ldy H
	dey
	sty BLT_ZERO.BLT_HEIGHT

; optimize OK (service.pas), line = 60

	lda W
	sub #$01
	sta BLT_ZERO.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_ZERO.BLT_WIDTH+1

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 66

	lda BLT_ZERO
	sta VBXE.RUNBCB.A
	lda BLT_ZERO+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
W	= :ECX
H	= :EAX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@0201810000181000

; --- WhileProlog
l_0483

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 74

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0483

; optimize OK (service.pas), line = 76

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 77

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 85

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 86

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 87

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 89

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 90

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 91

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 93

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 95

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 97

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$019E

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITSCR						; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 105

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 106

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 108

	lda #$02
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 110

	lda #$00
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 111

	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 113

	lda #$02
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 114

	lda HLP+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 115

	lda HLP
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 117

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 119

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 121

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; optimize OK (service.pas), line = 124

	lda #$03
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 126

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX
W	= :EAX
H	= DATAORIGIN+$019F

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE | REGISTER

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 171

	lda HLP+1
	sta BLT_BOX.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 172

	sta BLT_BOX.DST_ADR.BYTE1

; optimize OK (service.pas), line = 174

	lda HLP
	sta BLT_BOX.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 175

	sta BLT_BOX.DST_ADR.BYTE0

; optimize OK (service.pas), line = 177

	lda W
	sub #$01
	sta BLT_BOX.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_BOX.BLT_WIDTH+1

; optimize OK (service.pas), line = 178

	ldy H
	dey
	sty BLT_BOX.BLT_HEIGHT

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 184

	lda BLT_BOX
	sta VBXE.RUNBCB.A
	lda BLT_BOX+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01A0

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 252

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_0571
	lda A
	sta RESULT
	lda A+1
	jmp l_0580
l_0571

; optimize OK (service.pas), line = 253

	lda B
	sta RESULT
	lda B+1
l_0580
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01A2
B	= DATAORIGIN+$01A4
RESULT	= DATAORIGIN+$01A6

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 259

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_059B
	lda A
	sta RESULT
	lda A+1
	jmp l_05AA
l_059B

; optimize OK (service.pas), line = 260

	lda B
	sta RESULT
	lda B+1
l_05AA
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01A8
B	= DATAORIGIN+$01AA
RESULT	= DATAORIGIN+$01AC

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 269

	sta STATUS

; -------------------  ASM Block 00000144  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$01AE

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 317

	lda #$00
	sta Y

l_05C6
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_05D4

; optimize OK (service.pas), line = 318

	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	ldy Y
	lda :eax
	sta adr.MUL90_16,y
	lda :eax+1
	sta adr.MUL90_16+16,y

; --- ForToDoEpilog
	inc Y
	jne l_05C6
l_05D4

; optimize OK (service.pas), line = 320

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 322

	sta Y

l_05F3
; --- ForToDoCondition
	lda #$0A
	sta @BYTE.MOD.B
	lda Y
	sta @BYTE.MOD.A
	jsr @BYTE.MOD
	lda @BYTE.MOD.RESULT
	ldy Y
	sta adr.MOD10TABLE,y

; optimize OK (service.pas), line = 325

	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda #$5A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	ldy Y
	sta adr.MOD90TABLE,y

; optimize OK (service.pas), line = 326

	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda #$68
	sta @CARDINAL.MOD.B
	lda #$01
	sta @CARDINAL.MOD.B+1
	lda #$00
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	ldy Y
	lda @CARDINAL.MOD.RESULT
	sta adr.MOD360TABLE,y
	lda @CARDINAL.MOD.RESULT+1
	sta adr.MOD360TABLE+256,y

; optimize OK (service.pas), line = 328

	ldy Y
	cpy #$C8
	jcc l_0642

; optimize OK (service.pas), line = 329

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_0653
l_0642

; optimize OK (service.pas), line = 331

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_0653
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 333

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_05F3
l_0601

; ------------------------------------------------------------

Y	= DATAORIGIN+$01AF

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 348

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_0677

; optimize FAIL ('@print', service.pas), line = 349

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_0677

; optimize OK (service.pas), line = 353

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 354

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 356

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 358

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 359

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 361

	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A
	sta VBXE.SETOVERLAYADDRESS.A+1
	lda #$03
	sta VBXE.SETOVERLAYADDRESS.A+2
	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A+3
	jsr VBXE.SETOVERLAYADDRESS

; optimize OK (service.pas), line = 363

	lda #$00
	sta VBXE_RAM.POSITION
	sta VBXE_RAM.POSITION+1
	lda #$03
	sta VBXE_RAM.POSITION+2
	lda #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 364

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$03
	sta VBXE_RAM.SIZE+2
	lda #$00
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 365

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 367

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000145  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 373

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 374

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 375

	lda BLT_BOX
	sta :bp2
	lda BLT_BOX+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 376

	lda BLT_ZERO
	sta :bp2
	lda BLT_ZERO+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 379

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 380

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 384

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 388

	lda #$03
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 390

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 391

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 393

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 395

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 396

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 398

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 400

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 402

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; optimize OK (service.pas), line = 406

	lda #$02
	sta BLT_BOX.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 408

	lda #$03
	sta BLT_BOX.DST_ADR.BYTE2

; optimize OK (service.pas), line = 410

	lda #$40
	sta BLT_BOX.DST_STEP_Y
	lda #$01
	sta BLT_BOX.DST_STEP_Y+1

; optimize OK (service.pas), line = 411

	lda #$40
	sta BLT_BOX.SRC_STEP_Y
	lda #$01
	sta BLT_BOX.SRC_STEP_Y+1

; optimize OK (service.pas), line = 413

	sta BLT_BOX.SRC_STEP_X

; optimize OK (service.pas), line = 414

	sta BLT_BOX.DST_STEP_X

; optimize OK (service.pas), line = 418

	lda #$FF
	sta BLT_BOX.BLT_AND_MASK

; optimize OK (service.pas), line = 422

	lda #$03
	sta BLT_ZERO.DST_ADR.BYTE2

; optimize OK (service.pas), line = 424

	lda #$40
	sta BLT_ZERO.DST_STEP_Y
	lda #$01
	sta BLT_ZERO.DST_STEP_Y+1

; optimize OK (service.pas), line = 426

	sta BLT_ZERO.SRC_STEP_X

; optimize OK (service.pas), line = 427

	sta BLT_ZERO.DST_STEP_X

; optimize OK (service.pas), line = 429

	sta BLT_ZERO.BLT_CONTROL

; optimize OK (service.pas), line = 431

	lda #$FF
	sta BLT_ZERO.BLT_AND_MASK

; -------------------  ASM Block 00000146  -------------------

	  fxs FX_MEMS #$00
	
; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 438

	jsr SYSTEM.PAUSE.@00

; -------------------  ASM Block 00000147  -------------------

  sei
  lda #0
  sta nmien
  sta irqen
  
  lda #$fe
  sta portb
 
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 465

	lda SHINEREC.XB
	sta XB

; optimize OK (service.pas), line = 466

	lda SHINEREC.YB
	sta YB

; optimize OK (service.pas), line = 468

	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; -------------------  ASM Block 00000148  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 475

	ldy I
	lda adr.WALL,y
	cmp #$09
	jcc l_0742

; optimize OK (service.pas), line = 477

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 478

	lda adr.WALL,y
	cmp #$0A
	jeq l_0762
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_0762

; optimize OK (service.pas), line = 480

	lda XB
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 481

	lda YB
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 482

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 485

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 487

	lda YF
	add Y
	tay
	lda XF
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda XF+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	add FR
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$91
	adc FR+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000
l_0742

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
       
; optimize FAIL (0, service.pas), line = 506

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 507

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_07C2
	lda #$00
	sta SHINEREC.ACTIVE
l_07C2

; ------------------------------------------------------------

XB	= DATAORIGIN+$01B0
YB	= DATAORIGIN+$01B1
FRAME	= DATAORIGIN+$01B2
XF	= DATAORIGIN+$01B4
YF	= DATAORIGIN+$01B6
FR	= DATAORIGIN+$01B8
Y	= DATAORIGIN+$01BA
I	= DATAORIGIN+$01BB

@VarData	= XB
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 517

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 518

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 526

	lda SHINEREC.ACTIVE
	jeq l_07E2
	jsr UNSHINE_BLOCK
l_07E2

; optimize OK (service.pas), line = 528

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 529

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 530

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 531

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 532

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$01BC
YB	= DATAORIGIN+$01BD

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 539

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_0823
	jsr SHINE_BLOCK
l_0823

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_082C

; optimize OK (service.pas), line = 548

	lda #$64
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda RAND.RESULT+1
	sta RN+1

; optimize OK (service.pas), line = 549

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 550

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_083A

; optimize FAIL (0, service.pas), line = 555

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 556

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 559

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_083A

; optimize OK (service.pas), line = 563

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_082C

; optimize OK (service.pas), line = 565

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BE
RN	= DATAORIGIN+$01C0
SUM	= DATAORIGIN+$01C2
LETTER	= DATAORIGIN+$01C4

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 573

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$9E
	add :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$CC
	add :STACKORIGIN+10
	sta SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta SRC+3

; -------------------  ASM Block 00000150  -------------------

       fxs FX_MEMS #$80
     
; optimize OK (service.pas), line = 579

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 580

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 581

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 583

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 585

	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 586

	lda HLP
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000151  -------------------

       fxs FX_MEMS #$00
     
; optimize OK (service.pas), line = 592

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01C6

@VarData	= SRC
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 600

	ldy LETT.Y
	cpy #$C8
	jcs l_08CE

; optimize OK (service.pas), line = 602

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 604

	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_08CE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 613

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 614

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 620

	lda LETT.ACTIVE
	jeq l_08FB
	jsr DISABLE_LETTER
l_08FB

; optimize OK (service.pas), line = 622

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 623

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 624

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 625

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 626

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 627

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$01CA
YL	= DATAORIGIN+$01CB
LETTER	= DATAORIGIN+$01CC

@VarData	= XL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 633

	lda LETT.ACTIVE
	jeq l_092C

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 635

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 636

	inc LETT.Y

; optimize OK (service.pas), line = 637

	lda LETT.Y
	cmp #$C8
	jcc l_0944
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 638
	jmp l_094F
l_0944

; optimize FAIL ('PUT_LETTER', service.pas), line = 640

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 641

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 642

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0966

; optimize OK (service.pas), line = 644

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 645

	inc LETT.FRAME
l_0966

; optimize OK (service.pas), line = 648

	lda LETT.FRAME
	cmp #$08
	jne l_0983
	lda #$00
	sta LETT.FRAME
l_0983

; optimize OK (service.pas), line = 650

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_09DC
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_09DC
	jeq l_09DC
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_09DC
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_09DC
	jeq l_09DC
@

; optimize OK (service.pas), line = 653

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 654

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 655

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_094F

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 656

	jsr DISABLE_LETTER
l_09DC

; optimize OK (service.pas), line = 660

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_09FD
l_092C

; optimize OK (service.pas), line = 662

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0A0E

; optimize OK (service.pas), line = 663

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_09FD
l_0A0E

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 673

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 675

	lda #$FC
	sta BLITZERO.SRC
	lda #$BF
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01CE
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 685

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 687

	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01D2
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 708

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 719

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0A70s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0A70s
	lda:sne #$01
l_0A70s	lda #$00
	sta B0

; optimize OK (service.pas), line = 720

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0A88s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0A88s
	lda:seq #$00
l_0A88s	lda #$01
	sta B1

; optimize OK (service.pas), line = 722

	lda B0
	and B1
	jeq l_0A9A

; optimize OK (service.pas), line = 723

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0A9A

; optimize OK (service.pas), line = 725

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 727

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 728

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01D6
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$01DA
B1	= DATAORIGIN+$01DB

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 740

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 741

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 743

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 744

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 746

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta I
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+3

; optimize OK (service.pas), line = 748

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	inx
	lda FASTSQRT.RESULT
	sta :FPMAN0
	lda FASTSQRT.RESULT+1
	sta :FPMAN1
	lda FASTSQRT.RESULT+2
	sta :FPMAN2
	lda FASTSQRT.RESULT+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta LEN
	lda :FPMAN1
	sta LEN+1
	dex

; optimize OK (service.pas), line = 750

	lda LEN+1
	ora LEN
	jeq @exit
l_0AF1

; optimize OK (service.pas), line = 754

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda A
	sta :eax
	lda A+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1

; optimize OK (service.pas), line = 756

	ora X
	jeq @exit
l_0B14

; optimize OK (service.pas), line = 758

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda B
	sta :eax
	lda B+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1

; optimize OK (service.pas), line = 760

	ora Y
	jeq @exit
l_0B37

; optimize OK (service.pas), line = 762

	lda X
	cmp #$00
	lda X+1
	sbc #$04
	svc
	eor #$80
	jmi l_0B4B
	lda #$FF
	sta X
	lda #$03
	sta X+1
l_0B4B

; optimize OK (service.pas), line = 763

	lda Y
	cmp #$00
	lda Y+1
	sbc #$04
	svc
	eor #$80
	jmi l_0B63
	lda #$FF
	sta Y
	lda #$03
	sta Y+1
l_0B63

; optimize OK (service.pas), line = 765

	lda SX+1
	jpl l_0B7B
	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
l_0B7B

; optimize OK (service.pas), line = 766

	lda SY+1
	jpl l_0B97
	lda #$00
	sub Y
	sta Y
	lda #$00
	sbc Y+1
	sta Y+1
l_0B97

; optimize OK (service.pas), line = 768

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda X+1
	sta (:bp2),y

; optimize OK (service.pas), line = 769

	ldy #BALL.SPEEDY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda Y+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01DC
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
SPEED	= DATAORIGIN+$01E0
SX	= DATAORIGIN+$01E2
SY	= DATAORIGIN+$01E4
X	= DATAORIGIN+$01E6
Y	= DATAORIGIN+$01E8
A	= DATAORIGIN+$01EA
B	= DATAORIGIN+$01EC
LEN	= DATAORIGIN+$01EE
I	= DATAORIGIN+$01F0

@VarData	= BALL
@VarDataSize	= 22

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 814

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add #$B4
	sta :bp2
	lda #$CA
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 815

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$CA
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01F4
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
ANGLE	= DATAORIGIN+$01F8

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 858

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta ATAN2.X
	iny
	lda (:bp2),y
	sta ATAN2.X+1
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta ATAN2.Y
	iny
	lda #$00
	sbc (:bp2),y
	sta ATAN2.Y+1
	jsr ATAN2
	inx
	ldy ATAN2.RESULT
	lda adr.SCALE360,y
	sta W
	lda adr.SCALE360+256,y
	sta W+1
	dex

; optimize OK (service.pas), line = 861

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01FA
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$01FE
W	= DATAORIGIN+$0200

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 870

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 876

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 881

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 882

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 884

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 886

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 887

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0202
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$19
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 899

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 900

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 902

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta I
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+3

; optimize OK (service.pas), line = 904

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	lda FASTSQRT.RESULT
	sta F_HLP
	lda FASTSQRT.RESULT+1
	sta F_HLP+1
	lda FASTSQRT.RESULT+2
	sta F_HLP+2
	lda FASTSQRT.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 906

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0206	; [26] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0206
BALL.Y	= DATAORIGIN+$0208
BALL.FINEX	= DATAORIGIN+$020A
BALL.FINEY	= DATAORIGIN+$020B
BALL.OLDX	= DATAORIGIN+$020C
BALL.OLDY	= DATAORIGIN+$020E
BALL.SPEED	= DATAORIGIN+$0210
BALL.FINESPEED	= DATAORIGIN+$0212
BALL.SPEEDX	= DATAORIGIN+$0214
BALL.SPEEDY	= DATAORIGIN+$0216
BALL.SBD	= DATAORIGIN+$0218
BALL.BRWHIT	= DATAORIGIN+$021A
BALL.INPLAY	= DATAORIGIN+$021B
BALL.LAUNCH	= DATAORIGIN+$021C
BALL.ONVAUS	= DATAORIGIN+$021D
BALL.STM	= DATAORIGIN+$021F
RESULT	= DATAORIGIN+$0220
I	= DATAORIGIN+$0222
A	= DATAORIGIN+$0226
B	= DATAORIGIN+$0228

@VarData	= BALL.X
@VarDataSize	= 34

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 922

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDX-DATAORIGIN
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 923

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDY-DATAORIGIN
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 925

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 926

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 928

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y

; optimize OK (service.pas), line = 929

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y

; optimize OK (service.pas), line = 934

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0C99

; optimize OK (service.pas), line = 936

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 937

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$01
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 938

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 939

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0C99

; optimize OK (service.pas), line = 944

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0CCF

; optimize OK (service.pas), line = 946

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 947

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 948

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 949

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0CCF

; optimize OK (service.pas), line = 954

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0D05

; optimize OK (service.pas), line = 956

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 957

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 958

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 959

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0D05

; optimize OK (service.pas), line = 967

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 968

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 969

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 972

	lda B0
	and B1
	and B2
	jeq l_0D67

; optimize OK (service.pas), line = 976

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0D96
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0D96

; optimize OK (service.pas), line = 979

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 981

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 983

	lda VAUS.LETTER
	cmp #$06
	jne l_0DBE
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0DBE

; optimize OK (service.pas), line = 985

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 986

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 987

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0DBE

; optimize OK (service.pas), line = 990

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 994

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0DEE

; optimize OK (service.pas), line = 997

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1001

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1009

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1014

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0DEE

; optimize OK (service.pas), line = 1020

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0E2F

; optimize OK (service.pas), line = 1022

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1023

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1024

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1025

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0E2F
l_0D96
l_0D67

; optimize OK (service.pas), line = 1036

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0E7E

; optimize OK (service.pas), line = 1038

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1039

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0E7E

; ------------------------------------------------------------

BALL	= DATAORIGIN+$022A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$022E
B1	= DATAORIGIN+$022F
B2	= DATAORIGIN+$0230
X	= DATAORIGIN+$0231
Y	= DATAORIGIN+$0233
ANGLE	= DATAORIGIN+$0235

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1047

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1048

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1049

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1055

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1056

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1058

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1059

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1060

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1064

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1068

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1069

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1070

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1071

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1081

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1082

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1096

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1098

	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1100

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1110

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1112

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0F10

; optimize FAIL (0, service.pas), line = 1114

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1115

	lda #$00
	sta VAUS.IFLASH
l_0F10

; optimize OK (service.pas), line = 1118

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0F2D
	lda #$00
	sta VAUS.FLASH
l_0F2D

; optimize OK (service.pas), line = 1128

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1130

	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000152  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1136

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1138

	lda HLP
	sta VIDEO
	lda HLP+1
	sta VIDEO+1
	lda #$03
	sta VIDEO+2
	lda #$00
	sta VIDEO+3

; optimize OK (service.pas), line = 1140

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1142

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1143

	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1169

	lda Y
	sta I
	jmp l_0F84f
l_0F84
; --- ForToDoCondition
	dec I
l_0F84f
	ldy VAUS.FLASH
	lda adr.FLASH,y
	ldy I
	sta adr.SCR,y

; --- ForToDoEpilog
	lda I
	jne l_0F84
l_0F92

; optimize OK (service.pas), line = 1171

	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1172

	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1174

	ldy VAUS.WIDTH
	dey
	sty I

; optimize OK (service.pas), line = 1175

	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000153  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$0237
Y	= DATAORIGIN+$0238
VIDEO	= DATAORIGIN+$0239

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1190

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0FF3

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1191

	jsr REMOVE_VAUS
l_0FF3

; optimize OK (service.pas), line = 1193

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1194

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1202

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1203

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1205

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$023D
Y	= DATAORIGIN+$023F

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1220

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1221

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1223

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000154  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1230

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1231

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1233

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1234

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1278

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1279

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1281

	lda #$03
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1283

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1287

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1288

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1290

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1296

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$10
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$08
	sta BLITSCR.H
	jsr BLITSCR

; optimize OK (service.pas), line = 1306

	lda XS
	add #$08
	sta XS

; optimize OK (service.pas), line = 1307

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1310

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1311

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1313

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1315

	lda XS
	add #$11
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_10C0

; optimize OK (service.pas), line = 1316

	lda XS
	add #$39
	jmp l_10D8
l_10C0

; optimize OK (service.pas), line = 1318

	lda #$11
l_10D8
	sta I

; optimize OK (service.pas), line = 1321

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1323

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1373

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1374

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1376

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$0241
YA	= DATAORIGIN+$0242
I	= DATAORIGIN+$0243
XS	= DATAORIGIN+$0244
YS	= DATAORIGIN+$0245

@VarData	= XA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1398

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1399

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1401

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000156  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1408

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1409

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1410

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1412

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1413

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1416

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1417

	lda BLOCK
	sub #$01
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1419

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1420

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1422

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1423

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1471

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1479

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1481

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1482

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1484

	lda XS
	add #$19
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_11DB

; optimize OK (service.pas), line = 1485

	lda XS
	add #$41
	jmp l_11F7
l_11DB

; optimize OK (service.pas), line = 1487

	lda #$11
l_11F7
	sta I

; optimize OK (service.pas), line = 1490

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1492

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1495

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1496

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1532

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1534

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1535

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1538

	lda BLOCK
	cmp #$09
	jcc l_1252

; optimize OK (service.pas), line = 1540

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1541

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_126D

; optimize OK (service.pas), line = 1543

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1544

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_128C
l_126D

; optimize OK (service.pas), line = 1550

	lda BLOCK
	cmp #$0A
	jne l_129E
	lda #$C9
	sta CL2
l_128C
l_129E

; optimize OK (service.pas), line = 1554

	lda #$00
	sta I

; optimize OK (service.pas), line = 1557

	lda #$06
	sta Y

l_12B2
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+9
	ldy I
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+9
	sta CL2

; optimize OK (service.pas), line = 1574

	sta adr.SCR,y

; optimize OK (service.pas), line = 1576

	lda I
	add #$10
	sta I

; --- ForToDoEpilog
	dec Y
	jpl l_12B2
l_12C0

; optimize OK (service.pas), line = 1582

	lda #$0E
	sta X

l_12EF
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+10
	ldy X
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+10
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_12EF
l_12FD
l_1252

; optimize OK (service.pas), line = 1600

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$0F
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$07
	sta BLITSCR.H
	jsr BLITSCR

; -------------------  ASM Block 00000157  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$0246
YA	= DATAORIGIN+$0247
BLOCK	= DATAORIGIN+$0248
XS	= DATAORIGIN+$0249
YS	= DATAORIGIN+$024A
X	= DATAORIGIN+$024B
Y	= DATAORIGIN+$024C
I	= DATAORIGIN+$024D
CL	= DATAORIGIN+$024E
CL2	= DATAORIGIN+$024F

@VarData	= XA
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1616

	lda #$00
	sta Y

l_1330
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_133E

; optimize OK (service.pas), line = 1618

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1620

	lda #$00
	sta X

l_1351
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_135F

; optimize OK (service.pas), line = 1621

	adc I
	tay
	lda adr.WALL,y
	jeq l_137A
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_137A

; --- ForToDoEpilog
	inc X
	jne l_1351
l_135F

; --- ForToDoEpilog
	inc Y
	jne l_1330
l_133E

; ------------------------------------------------------------

X	= DATAORIGIN+$0250
Y	= DATAORIGIN+$0251
I	= DATAORIGIN+$0252

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1647

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1648

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1651

	lda #$00
	sta Y

l_13B4
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13C2

; optimize OK (service.pas), line = 1652

	lda #$00
	sta X

l_13CB
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_13D9

; optimize OK (service.pas), line = 1655

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1411
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_1411
	inc REMAIN_BLK
l_1411

; --- ForToDoEpilog
	inc X
	jne l_13CB
l_13D9

; --- ForToDoEpilog
	inc Y
	jne l_13B4
l_13C2

; optimize OK (service.pas), line = 1657

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1659

	sta @CASETMP_0008
	cmp #$00
	jne l_143B
@

; optimize OK (service.pas), line = 1660

	:7 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_143B
	cmp #$01
	jne l_1444

; optimize OK (service.pas), line = 1661

	:7 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_1444
	cmp #$02
	jne l_144D

; optimize OK (service.pas), line = 1662

	:7 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_144D
	cmp #$03
	jne l_1456

; optimize OK (service.pas), line = 1663

	:7 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1456
	cmp #$04
	jne l_145F

; optimize OK (service.pas), line = 1664

	:7 mva adr.PATTERN4+# adr.PATTERN+#
l_145F
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$0253
Y	= DATAORIGIN+$0254
WL	= DATAORIGIN+$0255
@CASETMP_0008	= DATAORIGIN+$0256

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1690

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1691

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1692

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1693

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1695

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1697

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP1

; optimize OK (service.pas), line = 1698

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP1

; optimize OK (service.pas), line = 1699

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP2

; optimize OK (service.pas), line = 1700

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP2

; optimize OK (service.pas), line = 1702

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XK

; optimize OK (service.pas), line = 1703

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YK

; optimize OK (service.pas), line = 1704

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XJ

; optimize OK (service.pas), line = 1705

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YJ

; optimize OK (service.pas), line = 1707

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XH

; optimize OK (service.pas), line = 1708

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YH

; optimize OK (service.pas), line = 1709

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XN

; optimize OK (service.pas), line = 1710

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YN

; optimize OK (service.pas), line = 1721

	lda XP1
	cmp XP2
	jne l_14E2x
	lda YP1
	cmp YP2
	jeq l_14E2
l_14E2x

; optimize OK (service.pas), line = 1723

	lda YP1
	cmp YP2
	jeq l_14F7

; optimize OK (service.pas), line = 1725

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_1504
l_1505

; optimize OK (service.pas), line = 1729

	lda XH
	add XN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1730

	lda YH
	add YN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1732

	lsr @
	lsr @
	lsr @
	sta YP

; optimize OK (service.pas), line = 1734

	cmp YP1
	jne l_1543

; optimize OK (service.pas), line = 1736

	lda X
	sta XH

; optimize OK (service.pas), line = 1737

	lda Y
	sta YH
l_1543

; optimize OK (service.pas), line = 1740

	lda YP
	cmp YP2
	jne l_1566

; optimize OK (service.pas), line = 1742

	lda X
	sta XN

; optimize OK (service.pas), line = 1743

	lda Y
	sta YN
l_1566
l_1504

; optimize OK (service.pas), line = 1727

	lda YN
	and #$07
	jeq l_1505w
	lda YN
	and #$07
	cmp #$07
	jne l_1505
l_1505w
l_14F7

; optimize OK (service.pas), line = 1749

	lda XP1
	cmp XP2
	jeq l_15AB

; optimize OK (service.pas), line = 1751

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_15B8
l_15B9

; optimize OK (service.pas), line = 1755

	lda XK
	add XJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1756

	lda YK
	add YJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1758

	lda X
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP

; optimize OK (service.pas), line = 1760

	cmp XP1
	jne l_15F7

; optimize OK (service.pas), line = 1762

	lda X
	sta XK

; optimize OK (service.pas), line = 1763

	lda Y
	sta YK
l_15F7

; optimize OK (service.pas), line = 1766

	lda XP
	cmp XP2
	jne l_161A

; optimize OK (service.pas), line = 1768

	lda X
	sta XJ

; optimize OK (service.pas), line = 1769

	lda Y
	sta YJ
l_161A
l_15B8

; optimize OK (service.pas), line = 1753

	lda XJ
	and #$0F
	jeq l_15B9w
	lda XJ
	and #$0F
	cmp #$0F
	jne l_15B9
l_15B9w
l_15AB

; optimize OK (service.pas), line = 1780

	lda COLLISION
	cmp #$01
	jne l_165D
; optimize OK (service.pas), line = 1782
; optimize OK (service.pas), line = 1783
	jmp l_1673
l_165D

; optimize OK (service.pas), line = 1785

	lda COLLISION
	cmp #$02
	jne l_1685

; optimize OK (service.pas), line = 1787

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1788

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	jmp l_169B
l_1685

; optimize OK (service.pas), line = 1790

	lda COLLISION
	cmp #$03
	jne l_16AD

; optimize OK (service.pas), line = 1792

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1793

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_1673

; optimize OK (service.pas), line = 1794

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1795

	mwy Y2 :bp2
	ldy #$00
	lda YN
l_169B
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_16AD
	jmp l_16D1
l_14E2

; optimize OK (service.pas), line = 1800

	lda #$02
	jsr FATAL_ERROR
l_16D1

; optimize OK (service.pas), line = 1803

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1804

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1805

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1806

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1809

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1810

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1817

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0257
Y1	= DATAORIGIN+$0259
X2	= DATAORIGIN+$025B
Y2	= DATAORIGIN+$025D
RESULT	= DATAORIGIN+$025F
X	= DATAORIGIN+$0260
Y	= DATAORIGIN+$0261
XK	= DATAORIGIN+$0262
YK	= DATAORIGIN+$0263
XJ	= DATAORIGIN+$0264
YJ	= DATAORIGIN+$0265
XH	= DATAORIGIN+$0266
YH	= DATAORIGIN+$0267
XN	= DATAORIGIN+$0268
YN	= DATAORIGIN+$0269
XP1	= DATAORIGIN+$026A
YP1	= DATAORIGIN+$026B
XP2	= DATAORIGIN+$026C
YP2	= DATAORIGIN+$026D
XP	= DATAORIGIN+$026E
YP	= DATAORIGIN+$026F
COLLISION	= DATAORIGIN+$0270

@VarData	= X1
@VarDataSize	= 25

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1828

	lda #$0C
	cmp XB
	jcc l_1711
	lda #$0E
	cmp YB
	jcc l_1711

; optimize OK (service.pas), line = 1831

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1833

	tay
	lda adr.WALL,y
	jeq l_1737

; optimize OK (service.pas), line = 1835

	cmp #$0A
	jcs l_174D

; optimize OK (service.pas), line = 1837

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1838

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1842

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1844

	lda #$2C
	sta RAND.RANGE
	lda #$01
	sta RAND.RANGE+1
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1846

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta LETT.NEXTX

; optimize OK (service.pas), line = 1847

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1848

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1850

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1851

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1852

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1853

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_17A5
l_174D

; optimize OK (service.pas), line = 1858

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_17BE

; optimize OK (service.pas), line = 1860

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1861

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1863

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1864

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_17DA
l_17BE

; optimize OK (service.pas), line = 1868

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1869

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1871

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_17DA
l_17A5
l_1737
l_1711

; ------------------------------------------------------------

XB	= DATAORIGIN+$0271
YB	= DATAORIGIN+$0272
BALL	= DATAORIGIN+$0273
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
I	= DATAORIGIN+$0277

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1882

	lda #$0C
	cmp XB
	jcc l_180B
	lda #$0E
	cmp YB
	jcc l_180B

; optimize OK (service.pas), line = 1885

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1887

	tay
	lda adr.WALL,y
	jeq l_1831

; optimize OK (service.pas), line = 1889

	cmp #$0A
	jcs l_1847

; optimize OK (service.pas), line = 1891

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1892

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1893

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1894

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1895

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1871
l_1847

; optimize OK (service.pas), line = 1900

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_188A

; optimize OK (service.pas), line = 1902

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1903

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1904

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18A2
l_188A

; optimize OK (service.pas), line = 1908

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1909

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1871
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_18A2
l_1831
l_180B

; ------------------------------------------------------------

XB	= DATAORIGIN+$0278
YB	= DATAORIGIN+$0279
I	= DATAORIGIN+$027A

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1943

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 1945

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 1946

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 1949

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 1950

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 1952

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 1953

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 1957

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_190D

; optimize OK (service.pas), line = 1959

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 1965

	cmp #$03
	jne l_1928

; optimize OK (service.pas), line = 1967

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 1968

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 1970

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 1971

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 1973

	lda LX
	sta SYSTEM.ABS.@010184000.X
	lda LX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1
	lda LY
	sta SYSTEM.ABS.@010184000.X
	lda LY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 1975

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta F1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+3

; optimize OK (service.pas), line = 1977

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 1979

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta F2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+3

; optimize OK (service.pas), line = 1981

	lda F1+3
	cmp F2+3
	bne @+
	lda F1+2
	cmp F2+2
	bne @+
	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_19B1

; optimize OK (service.pas), line = 1987

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 1988

	sta MAX.A
	lda #$00
	sta MAX.A+1
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 1989

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 1992

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_19F5

; optimize OK (service.pas), line = 1994

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 1995

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 1996

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1A23
l_19F5

; optimize OK (service.pas), line = 2000

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2001

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1A23
	jmp l_1A36
l_19B1

; optimize OK (service.pas), line = 2011

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2012

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2013

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2015

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1A79

; optimize OK (service.pas), line = 2017

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2018

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2020

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2021

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2022

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1A79
l_1A36
l_1928

; optimize OK (service.pas), line = 2028

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2029

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2032

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2034

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2035

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2062

	cmp X
	jcs l_1B03
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1B03

; optimize OK (service.pas), line = 2064

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2065

	lda #$01
	sta EMERGENCY
l_1B03

; optimize OK (service.pas), line = 2069

	lda #$07
	sub Y
	cmp X
	jcs l_1B38
	lda X
	cmp Y
	jcs l_1B38

; optimize OK (service.pas), line = 2071

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2072

	lda #$03
	sta EMERGENCY
l_1B38

; optimize OK (service.pas), line = 2076

	lda X
	cmp Y
	jcs l_1B6D
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1B6D

; optimize OK (service.pas), line = 2078

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2079

	lda #$02
	sta EMERGENCY
l_1B6D

; optimize OK (service.pas), line = 2083

	lda #$07
	sub X
	cmp Y
	jcs l_1BA2
	lda Y
	cmp X
	jcs l_1BA2

; optimize OK (service.pas), line = 2085

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2086

	lda #$04
	sta EMERGENCY
l_1BA2

; optimize OK (service.pas), line = 2090

	lda X
	cmp Y
	jeq l_1BD7x
	lda #$07
	sub Y
	cmp X
	jne l_1BD7
l_1BD7x

; optimize OK (service.pas), line = 2092

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2093

	sta TOUCH

; optimize OK (service.pas), line = 2101

	lda X
	cmp #$05
	jcc l_1BF2
	lda TOUCH
	ora #$01
	sta TOUCH
l_1BF2

; optimize OK (service.pas), line = 2102

	lda Y
	cmp #$05
	jcc l_1C11
	lda TOUCH
	ora #$02
	sta TOUCH
l_1C11

; optimize OK (service.pas), line = 2111

	lda #$FF
	sta LX
	sta LX+1

l_1C27
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C33

; optimize OK (service.pas), line = 2112

	lda #$FF
	sta LY
	sta LY+1

l_1C3C
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C48

; optimize FAIL (1, service.pas), line = 2114

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc LX+1
	sta MIN.A+1
	lda #$0C
	sta MIN.B
	lda #$00
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2115

	lda YB
	add LY
	sta MY
	lda #$00
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2117

	lda XB
	add LX
	jmi l_1CA1x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1CA1x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1CA1
l_1CA1x

; optimize OK (service.pas), line = 2120

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$0A
	jmp l_1CC2
l_1CA1

; optimize OK (service.pas), line = 2122

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$14
l_1CC2
	sta adr.ADJW+$01,y

; --- ForToDoEpilog
	inc LY
	jne l_1C3C
	inc LY+1
	jmp l_1C3C
l_1C48

; --- ForToDoEpilog
	inc LX
	jne l_1C27
	inc LX+1
	jmp l_1C27
l_1C33

; -------------------  ASM Block 00000158  -------------------

	lda #0
	sta around

	lda #10

	cmp adr.ADJW
	ror around
	cmp adr.ADJW+$04
	ror around
	cmp adr.ADJW+$08
	ror around	
	cmp adr.ADJW+$09
	ror around
	cmp adr.ADJW+$0A
	ror around
	cmp adr.ADJW+$06
	ror around
	cmp adr.ADJW+$02
	ror around
	cmp adr.ADJW+$01
	ror around
	
; optimize OK (service.pas), line = 2203

	lda TOUCH
	jne l_1CF5

; optimize OK (service.pas), line = 2205

	lda AROUND
	and #$83
	jne l_1D0C
	lda #$11
	sta DEFLECT
l_1D0C

; optimize OK (service.pas), line = 2206

	lda AROUND
	and #$83
	cmp #$01
	jne l_1D29
	lda #$33
	sta DEFLECT
l_1D29

; optimize OK (service.pas), line = 2207

	lda AROUND
	and #$83
	cmp #$02
	jne l_1D46
	lda #$10
	sta DEFLECT
l_1D46

; optimize OK (service.pas), line = 2208

	lda AROUND
	and #$83
	cmp #$03
	jne l_1D63
	lda #$12
	sta DEFLECT
l_1D63

; optimize OK (service.pas), line = 2209

	lda AROUND
	and #$83
	cmp #$80
	jne l_1D80
	lda #$01
	sta DEFLECT
l_1D80

; optimize OK (service.pas), line = 2210

	lda AROUND
	and #$83
	cmp #$81
	jne l_1D9D
	lda #$21
	sta DEFLECT
l_1D9D

; optimize OK (service.pas), line = 2211

	lda AROUND
	and #$83
	cmp #$82
	jne l_1DBA
	lda #$11
	sta DEFLECT
l_1DBA

; optimize OK (service.pas), line = 2213

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2214

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1CF5

; optimize OK (service.pas), line = 2219

	lda TOUCH
	cmp #$01
	jne l_1DEA

; optimize OK (service.pas), line = 2221

	lda AROUND
	and #$0E
	jne l_1E01
	lda #$21
	sta DEFLECT
l_1E01

; optimize OK (service.pas), line = 2222

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1E1E
	lda #$20
	sta DEFLECT
l_1E1E

; optimize OK (service.pas), line = 2223

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1E3B
	lda #$33
	sta DEFLECT
l_1E3B

; optimize OK (service.pas), line = 2224

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1E58
	lda #$22
	sta DEFLECT
l_1E58

; optimize OK (service.pas), line = 2225

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1E75
	lda #$01
	sta DEFLECT
l_1E75

; optimize OK (service.pas), line = 2226

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1E92
	lda #$21
	sta DEFLECT
l_1E92

; optimize OK (service.pas), line = 2227

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1EAF
	lda #$11
	sta DEFLECT
l_1EAF

; optimize OK (service.pas), line = 2229

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2230

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1DEA

; optimize OK (service.pas), line = 2233

	lda TOUCH
	cmp #$02
	jne l_1EDF

; optimize OK (service.pas), line = 2235

	lda AROUND
	and #$E0
	jne l_1EF6
	lda #$12
	sta DEFLECT
l_1EF6

; optimize OK (service.pas), line = 2236

	lda AROUND
	and #$E0
	cmp #$20
	jne l_1F13
	lda #$10
	sta DEFLECT
l_1F13

; optimize OK (service.pas), line = 2237

	lda AROUND
	and #$E0
	cmp #$40
	jne l_1F30
	lda #$33
	sta DEFLECT
l_1F30

; optimize OK (service.pas), line = 2238

	lda AROUND
	and #$E0
	cmp #$60
	jne l_1F4D
	lda #$11
	sta DEFLECT
l_1F4D

; optimize OK (service.pas), line = 2239

	lda AROUND
	and #$E0
	cmp #$80
	jne l_1F6A
	lda #$02
	sta DEFLECT
l_1F6A

; optimize OK (service.pas), line = 2240

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_1F87
	lda #$12
	sta DEFLECT
l_1F87

; optimize OK (service.pas), line = 2241

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_1FA4
	lda #$22
	sta DEFLECT
l_1FA4

; optimize OK (service.pas), line = 2243

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2244

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1EDF

; optimize OK (service.pas), line = 2247

	lda TOUCH
	cmp #$03
	jne l_1FD4

; optimize OK (service.pas), line = 2249

	lda AROUND
	and #$38
	jne l_1FEB
	lda #$22
	sta DEFLECT
l_1FEB

; optimize OK (service.pas), line = 2250

	lda AROUND
	and #$38
	cmp #$08
	jne l_2008
	lda #$02
	sta DEFLECT
l_2008

; optimize OK (service.pas), line = 2251

	lda AROUND
	and #$38
	cmp #$10
	jne l_2025
	lda #$33
	sta DEFLECT
l_2025

; optimize OK (service.pas), line = 2252

	lda AROUND
	and #$38
	cmp #$18
	jne l_2042
	lda #$12
	sta DEFLECT
l_2042

; optimize OK (service.pas), line = 2253

	lda AROUND
	and #$38
	cmp #$20
	jne l_205F
	lda #$20
	sta DEFLECT
l_205F

; optimize OK (service.pas), line = 2254

	lda AROUND
	and #$38
	cmp #$28
	jne l_207C
	lda #$22
	sta DEFLECT
l_207C

; optimize OK (service.pas), line = 2255

	lda AROUND
	and #$38
	cmp #$30
	jne l_2099
	lda #$21
	sta DEFLECT
l_2099

; optimize OK (service.pas), line = 2257

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2258

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1FD4

; optimize OK (service.pas), line = 2264

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2265

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2267

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2269

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_20E2
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_20E2

; optimize OK (service.pas), line = 2270

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_20FE
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_20FE

; optimize OK (service.pas), line = 2271

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_2117
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_2117

; optimize OK (service.pas), line = 2273

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2275

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_2139
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_2139

; optimize OK (service.pas), line = 2276

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2155
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_2155

; optimize OK (service.pas), line = 2277

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_216E
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_216E
l_1BD7
l_190D

; optimize OK (service.pas), line = 2287

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_218F

; optimize OK (service.pas), line = 2290

	lda EMERGENCY
	cmp #$FF
	jne l_21A2
	lda #$04
	jsr FATAL_ERROR
l_21A2

; optimize OK (service.pas), line = 2292

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2319

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_21BB
@

; optimize OK (service.pas), line = 2322

	lda adr.ADJW+$04
	jne l_21D2
	lda MIMAX
	and #$0F
	sta MIMAX
l_21D2

; optimize OK (service.pas), line = 2323

	lda adr.ADJW+$01
	jne l_21FA
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_21FA
	jmp a_0009
l_21BB
	cmp #$06
	jne l_2212

; optimize OK (service.pas), line = 2327

	lda adr.ADJW+$01
	jne l_2229
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_2229

; optimize OK (service.pas), line = 2328

	lda adr.ADJW+$06
	jne l_2251
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_2251
	jmp a_0009
l_2212
	cmp #$07
	jne l_2269

; optimize OK (service.pas), line = 2332

	lda adr.ADJW+$06
	jne l_2280
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_2280

; optimize OK (service.pas), line = 2333

	lda adr.ADJW+$09
	jne l_22A8
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_22A8
	jmp a_0009
l_2269
	cmp #$08
	jne l_22C0

; optimize OK (service.pas), line = 2337

	lda adr.ADJW+$09
	jne l_22D7
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_22D7

; optimize OK (service.pas), line = 2338

	lda adr.ADJW+$04
	jne l_22FF
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_22FF
l_22C0
a_0009

; --- RepeatUntilProlog
l_2317

; optimize OK (service.pas), line = 2346

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	tay
	lda adr.MUL90_16,y
	sta LX
	lda adr.MUL90_16+16,y
	sta LX+1

; optimize OK (service.pas), line = 2347

	lda MIMAX
	and #$0F
	tay
	lda adr.MUL90_16,y
	sta MX
	lda adr.MUL90_16+16,y
	sta MX+1

; optimize OK (service.pas), line = 2349

	lda MX
	sub LX
	sta RAND.RANGE
	lda MX+1
	sbc LX+1
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	add LX
	sta ANGLE
	lda RAND.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2351

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2317

; optimize OK (service.pas), line = 2355

	lda ANGLE
	sta MOD360.A
	lda ANGLE+1
	sta MOD360.A+1
	jsr MOD360
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MOD360.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MOD360.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2356

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2358

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_218F

; ------------------------------------------------------------

BALL	= DATAORIGIN+$027B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$027F
Y	= DATAORIGIN+$0280
I	= DATAORIGIN+$0281
XB	= DATAORIGIN+$0282
YB	= DATAORIGIN+$0283
OX	= DATAORIGIN+$0284
OY	= DATAORIGIN+$0286
SP	= DATAORIGIN+$0288
NX	= DATAORIGIN+$028A
NY	= DATAORIGIN+$028C
LX	= DATAORIGIN+$028E
LY	= DATAORIGIN+$0290
MX	= DATAORIGIN+$0292
MY	= DATAORIGIN+$0294
ANGLE	= DATAORIGIN+$0296
MYX	= DATAORIGIN+$0298
MYY	= DATAORIGIN+$029A
F1	= DATAORIGIN+$029C
F2	= DATAORIGIN+$02A0
A	= DATAORIGIN+$02A4
B	= DATAORIGIN+$02A6
EMERGENCY	= DATAORIGIN+$02A8
MIMAX	= DATAORIGIN+$02A9
DEFLECT	= DATAORIGIN+$02AA
AROUND	= DATAORIGIN+$02AB
COLLISION	= DATAORIGIN+$02AC
TOUCH	= DATAORIGIN+$02AD
adr.ADJW	= [DATAORIGIN+$02AE] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$02BE

@VarData	= BALL
@VarDataSize	= 54

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2373

	lda #$FF
	sta Y
	jmp l_2376f
l_2376
; --- ForToDoCondition
	dec Y
l_2376f
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2379

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @BYTE.MOD.B
	lda Y
	sta @BYTE.MOD.A
	jsr @BYTE.MOD
	lda @BYTE.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	lda Y
	jne l_2376
l_2384

; -------------------  ASM Block 00000159  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2391

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2392

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2395

	lda #$0A
	sta Y

l_23BC
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_23CA

; optimize OK (service.pas), line = 2398

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2400

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$D8
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2401

	ldy Y
	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2403

	lda #$09
	sta X

l_23F1
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_23FF

; optimize OK (service.pas), line = 2407

	lda adr.MODX,y
	adc YB
	sta :STACKORIGIN+9
	lda #$00
	adc YB+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	sta CL

; optimize OK (service.pas), line = 2409

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2414

	lda Y
	cmp #$10
	jcc l_2432x
	lda X
	cmp #$12
	jcs l_2432
l_2432x
	lda #$00
	sta SHADOW
l_2432

; optimize OK (service.pas), line = 2419

	lda CL
	and #$7F
	ora SHADOW
	ldy X
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_23F1
l_23FF

; optimize OK (service.pas), line = 2423

	lda #$D8
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2424

	ldy Y
	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_23BC
l_23CA

; optimize OK (service.pas), line = 2428

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2430

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2431

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 2433

	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- WhileProlog
l_2479

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 2434

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_2479

; optimize OK (service.pas), line = 2437

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2438

	lda #$00
	sta BLT.BLT_XOR_MASK

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PATT	= DATAORIGIN+$02BF
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0003
YB	= DATAORIGIN+$02C3
X	= DATAORIGIN+$02C5
Y	= DATAORIGIN+$02C6
CL	= DATAORIGIN+$02C7
SHADOW	= DATAORIGIN+$02C8

@VarData	= PATT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02C9
Y	= DATAORIGIN+$02CB

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2488

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2490

	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02CD
Y	= DATAORIGIN+$02CF
adr.SC	= [DATAORIGIN+$02D1] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2535

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2536

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2538

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2540

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2541

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2548

	lda #$2A
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$2A
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2551

	lda #$00
	sta W

l_24CC
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_24DA

; optimize OK (service.pas), line = 2554

	lda #$00
	sta Y

l_24E3
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_24F1

; optimize OK (service.pas), line = 2557

	sta :ecx
	lda #$2A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$A0
	sta :ecx
	lda #$02
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2559

	lda Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$60
	add Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2561

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2563

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2565

	lda #$00
	sta X

l_2534
; --- ForToDoCondition
	lda X
	cmp #$2A
	jcs l_2542

; optimize OK (service.pas), line = 2569

	lda W
	cmp #$06
	jeq l_2563x
	ldy X
	lda adr.POM,y
	jne l_2563
l_2563x
	jmp l_256D
l_2563

; optimize OK (service.pas), line = 2578

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_256D

; --- ForToDoEpilog
	inc X
	jne l_2534
l_2542

; optimize OK (service.pas), line = 2581

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_24E3
l_24F1

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2584

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 2585

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_24CC
l_24DA

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2594

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2595

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2596

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$02E6
A	= DATAORIGIN+$02E8
B	= DATAORIGIN+$02EA
W	= DATAORIGIN+$02EC
X	= DATAORIGIN+$02ED
Y	= DATAORIGIN+$02EE

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2608

	jsr NOSOUND

; optimize OK (service.pas), line = 2609

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2610

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000163  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2616

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2619

	lda #$0B
	sta W

l_25B7
; --- ForToDoCondition
	lda #$0F
	sta Y

l_25CE
; --- ForToDoCondition
	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2626

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2628

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2630

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2632

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2629_0

l_262C
; --- ForToDoCondition
	lda @FORTMP_2629_0::#$00
	cmp X
	jcc l_263A

; optimize OK (service.pas), line = 2634

	ldy X
	lda adr.POM,y
	jne l_264F
	jmp l_2659
l_264F

; optimize OK (service.pas), line = 2645

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2659

; --- ForToDoEpilog
	inc X
	jne l_262C
l_263A

; optimize OK (service.pas), line = 2648

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	dec Y
	jpl l_25CE
l_25DC

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2651

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	dec W
	jpl l_25B7
l_25C5

; -------------------  ASM Block 00000164  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$02EF
Y	= DATAORIGIN+$02F0
W	= DATAORIGIN+$02F1
Z	= DATAORIGIN+$02F2
A	= DATAORIGIN+$02F4
B	= DATAORIGIN+$02F6

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_2684

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 2755

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$50
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2757

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0300

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2684

; optimize OK (service.pas), line = 2764

	lda #$00
	sta F

; -------------------  ASM Block 00000165  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2772

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2774

	ldy PY
	lda adr.ROW,y
	add #$FD
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2778

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_26B5
l_26B6

; optimize OK (service.pas), line = 2780

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2781

	inc N1
l_26B5

; optimize OK (service.pas), line = 2779

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_26B6

; optimize OK (service.pas), line = 2783

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2784

	tya
	jeq l_26E0
	lda #$01
	sta F
l_26E0

; optimize OK (service.pas), line = 2785

	lda F
	jeq l_26F3
	lda N1
	jmp l_2701
l_26F3

; optimize OK (service.pas), line = 2786

	lda #$0A
l_2701
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2789

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2709
l_270A

; optimize OK (service.pas), line = 2791

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2792

	inc N1
l_2709

; optimize OK (service.pas), line = 2790

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_270A

; optimize OK (service.pas), line = 2794

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2795

	tya
	jeq l_2734
	lda #$01
	sta F
l_2734

; optimize OK (service.pas), line = 2796

	lda F
	jeq l_2747
	lda N1
	jmp l_2755
l_2747

; optimize OK (service.pas), line = 2797

	lda #$0A
l_2755
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2800

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_275D
l_275E

; optimize OK (service.pas), line = 2802

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2803

	inc N1
l_275D

; optimize OK (service.pas), line = 2801

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_275E

; optimize OK (service.pas), line = 2805

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2806

	tya
	jeq l_2788
	lda #$01
	sta F
l_2788

; optimize OK (service.pas), line = 2807

	lda F
	jeq l_279B
	lda N1
	jmp l_27A9
l_279B

; optimize OK (service.pas), line = 2808

	lda #$0A
l_27A9
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2811

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27B1
l_27B2

; optimize OK (service.pas), line = 2813

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2814

	inc N1
l_27B1

; optimize OK (service.pas), line = 2812

	lda SC+3
	jne l_27B2
	lda SC+2
	jne l_27B2
	lda SC+1
	jne l_27B2
	lda SC
	cmp #$64
	jcs l_27B2

; optimize OK (service.pas), line = 2816

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2817

	tya
	jeq l_27DC
	lda #$01
	sta F
l_27DC

; optimize OK (service.pas), line = 2818

	lda F
	jeq l_27EF
	lda N1
	jmp l_27FD
l_27EF

; optimize OK (service.pas), line = 2819

	lda #$0A
l_27FD
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2822

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2805
l_2806

; optimize OK (service.pas), line = 2824

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2825

	inc N1
l_2805

; optimize OK (service.pas), line = 2823

	lda SC+3
	jne l_2806
	lda SC+2
	jne l_2806
	lda SC+1
	jne l_2806
	lda SC
	cmp #$0A
	jcs l_2806

; optimize OK (service.pas), line = 2827

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2828

	tya
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2832

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000166  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PY	= DATAORIGIN+$02F9
SC	= DATAORIGIN+$02FA
adr.MUL_6	= CODEORIGIN+$00E5
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$02FE
F	= DATAORIGIN+$02FF

@VarData	= PY
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 2885

	dec LIVES

; -------------------  ASM Block 00000167  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2892

	lda adr.ROW+$C0
	add #$0B
	sta HLP
	lda adr.ROW+256+$C0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2894

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2895

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$A0
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2896

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$A0
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2899

	lda LIVES
	jeq l_286D

; optimize OK (service.pas), line = 2902

	cmp #$08
	jcc l_2880

; optimize OK (service.pas), line = 2903

	lda #$07
	sta I
	jmp l_288E
l_2880

; optimize OK (service.pas), line = 2905

	ldy LIVES
	dey
	sty I
l_288E

; optimize OK (service.pas), line = 2907

	lda #$14
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2909

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 2912

	lda #$00
	sta CN

l_28AA
; --- ForToDoCondition
	lda CN
	cmp I
	scc
	jne l_28B8

; --- WhileProlog
l_28BB

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 2916

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_28BB

; optimize OK (service.pas), line = 2918

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2919

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2921

	lda HLP
	add #$14
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	inc CN
	jne l_28AA
l_28B8

; optimize OK (service.pas), line = 2924

	lda #$00
	sta BLT.BLT_CONTROL
l_286D

; -------------------  ASM Block 00000168  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$0301
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$0302
Y	= DATAORIGIN+$0303
XL	= DATAORIGIN+$0304
YL	= DATAORIGIN+$0305
CN	= DATAORIGIN+$0306
XP	= DATAORIGIN+$0307
YP	= DATAORIGIN+$0309
SHADOW	= DATAORIGIN+$030B
CL	= DATAORIGIN+$030C
I	= DATAORIGIN+$030D

@VarData	= LIVES
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3014

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3016

	lda #$4C
	sta BLITZERO.SRC
	lda #$BE
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$0D
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$08
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3024

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3026

	lda #$0D
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3034

	lda FIRE.AVL
	jeq l_291A

; optimize FAIL ('MOUSECLICK', service.pas), line = 3036

	jsr MOUSECLICK
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN+1,x
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_293A

; optimize OK (service.pas), line = 3038

	lda VAUS.WIDTH
	sub #$0D
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3039

	lda VAUS.Y
	sub #$08
	sta FIRE.Y

; optimize OK (service.pas), line = 3040

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3041

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3042

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_293A

; optimize OK (service.pas), line = 3045

	lda FIRE.SHOT
	jeq l_2972

; optimize OK (service.pas), line = 3047

	lda FIRE.NW
	jeq l_297F
	jsr REMOVE_FIRE
l_297F

; optimize OK (service.pas), line = 3048

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3050

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3051

	cmp #$16
	jcs l_299A
	lda #$00
	sta FIRE.SHOT
	jmp l_29A8
l_299A

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3054

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3056

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_29CF
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_29CF

; optimize OK (service.pas), line = 3058

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3059

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3061

	lda FIRE.X
	add #$04
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3062

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3064

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2A3Cx
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2A3C
l_2A3Cx

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3066

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3067

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3069

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3070

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_29A8
l_2A3C
l_29CF
l_2972
l_291A

; ------------------------------------------------------------

X1	= DATAORIGIN+$030E
X2	= DATAORIGIN+$030F
Y1	= DATAORIGIN+$0310
Y2	= DATAORIGIN+$0311

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3082

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3084

	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3094

	lda SCRFLUX
	jeq l_2A79

; optimize OK (service.pas), line = 3097

	lda SCRFLUXCNT
	asl @
	asl @
	asl @
	sta FX

; -------------------  ASM Block 00000169  -------------------

	fxs FX_MEMS #$80
      
; optimize OK (service.pas), line = 3105

	lda #$08
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3106

	lda #$D9
	add adr.ROW+$B0
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$00
	adc adr.ROW+256+$B0
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$B4
	add FX
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$BE
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000170  -------------------

	fxs FX_MEMS #$00
      
; optimize FAIL (0, service.pas), line = 3114

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3115

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2AB2
	lda #$00
	sta SCRFLUXCNT
l_2AB2
l_2A79

; ------------------------------------------------------------

Y	= DATAORIGIN+$0312
FX	= DATAORIGIN+$0313

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3126

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3127

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3129

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3131

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3132

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3133

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3135

	lda Z
	sta X
	add #$2C
	sta @FORTMP_2ADE_0

l_2AE1
; --- ForToDoCondition
	lda @FORTMP_2ADE_0::#$00
	cmp X
	jcc l_2AEF

; optimize FAIL ('WAIT_VBL', service.pas), line = 3137

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3139

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3140

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3141

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3142

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3143

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3145

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3147

	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2AE1
l_2AEF

; ------------------------------------------------------------

X	= DATAORIGIN+$0314
Z	= DATAORIGIN+$0315

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3158

	lda VAUS.LETTER
	cmp #$FF
	jeq l_2B2B

; optimize OK (service.pas), line = 3159

	lda VAUS.LETTER
	jeq l_2B3E

; optimize OK (service.pas), line = 3161

	sub #$01
	sta LETT.LAST
	lda #$00
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3162

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2B55
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2B55

; optimize OK (service.pas), line = 3163

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2B67
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2B67

; optimize OK (service.pas), line = 3164

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3165

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3166

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3167

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3169

	lda VAUS.LETTER
	cmp #$06
	jeq l_2B8C

; optimize OK (service.pas), line = 3171

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3172

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3173

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2B8C
l_2B3E
l_2B2B

; optimize OK (service.pas), line = 3177

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2BAA
@

; optimize OK (service.pas), line = 3180

	lda FIRE.SHOT
	jeq l_2BB6
	jsr REMOVE_FIRE
l_2BB6

; optimize OK (service.pas), line = 3181

	:7 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3182

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3183

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3184

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3185

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2BAA
	cmp #$02
	jne l_2BD0

; optimize OK (service.pas), line = 3189

	lda FIRE.SHOT
	jeq l_2BDC
	jsr REMOVE_FIRE
l_2BDC

; optimize OK (service.pas), line = 3190

	:7 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3191

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3192

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3193

	sta FIRE.AVL
	jmp a_000A
l_2BD0
	cmp #$03
	jne l_2BF2

; optimize OK (service.pas), line = 3197

	lda FIRE.SHOT
	jeq l_2BFE
	jsr REMOVE_FIRE
l_2BFE

; optimize OK (service.pas), line = 3198

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3199

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3200

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3201

	sta FIRE.AVL

; optimize OK (service.pas), line = 3202

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2BF2
	cmp #$04
	jne l_2C18

; optimize OK (service.pas), line = 3206

	lda FIRE.SHOT
	jeq l_2C24
	jsr REMOVE_FIRE
l_2C24

; optimize OK (service.pas), line = 3207

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3208

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3209
	jmp s_2C61
l_2C18
	cmp #$05
	jne l_2C36

; optimize OK (service.pas), line = 3213

	lda FIRE.SHOT
	jeq l_2C42
	jsr REMOVE_FIRE
l_2C42

; optimize OK (service.pas), line = 3214

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3215

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3216

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3217

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$26
	sta MAX.B
	lda #$02
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3218

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2C61
; optimize OK (service.pas), line = 3219
	jmp s_2C7F
l_2C36
	cmp #$06
	jne l_2C68

; optimize OK (service.pas), line = 3223

	lda FIRE.SHOT
	jeq l_2C74
	jsr REMOVE_FIRE
l_2C74

; optimize OK (service.pas), line = 3224

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3225

	jsr MODIFY_VAUS
s_2C7F
; optimize OK (service.pas), line = 3226
	jmp s_2CAF
l_2C68
	cmp #$07
	jne l_2C86

; optimize OK (service.pas), line = 3230

	lda FIRE.SHOT
	jeq l_2C92
	jsr REMOVE_FIRE
l_2C92

; optimize OK (service.pas), line = 3231

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3232

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3233

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3234

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3235

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3236

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_2CAF

; optimize OK (service.pas), line = 3237

	lda #$00
	sta FIRE.AVL
l_2C86
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$0317
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0005
B1.OLDX	= DATAORIGIN+$0006
B1.OLDY	= DATAORIGIN+$0008
B1.SPEED	= DATAORIGIN+$000A
B1.FINESPEED	= DATAORIGIN+$000C
B1.SPEEDX	= DATAORIGIN+$000E
B1.SPEEDY	= DATAORIGIN+$0010
B1.SBD	= DATAORIGIN+$0012
B1.BRWHIT	= DATAORIGIN+$0014
B1.INPLAY	= DATAORIGIN+$0015
B1.LAUNCH	= DATAORIGIN+$0016
B1.ONVAUS	= DATAORIGIN+$0017
B1.STM	= DATAORIGIN+$0019
B2	= DATAORIGIN+$031B
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0005
B2.OLDX	= DATAORIGIN+$0006
B2.OLDY	= DATAORIGIN+$0008
B2.SPEED	= DATAORIGIN+$000A
B2.FINESPEED	= DATAORIGIN+$000C
B2.SPEEDX	= DATAORIGIN+$000E
B2.SPEEDY	= DATAORIGIN+$0010
B2.SBD	= DATAORIGIN+$0012
B2.BRWHIT	= DATAORIGIN+$0014
B2.INPLAY	= DATAORIGIN+$0015
B2.LAUNCH	= DATAORIGIN+$0016
B2.ONVAUS	= DATAORIGIN+$0017
B2.STM	= DATAORIGIN+$0019
B3	= DATAORIGIN+$031F
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0005
B3.OLDX	= DATAORIGIN+$0006
B3.OLDY	= DATAORIGIN+$0008
B3.SPEED	= DATAORIGIN+$000A
B3.FINESPEED	= DATAORIGIN+$000C
B3.SPEEDX	= DATAORIGIN+$000E
B3.SPEEDY	= DATAORIGIN+$0010
B3.SBD	= DATAORIGIN+$0012
B3.BRWHIT	= DATAORIGIN+$0014
B3.INPLAY	= DATAORIGIN+$0015
B3.LAUNCH	= DATAORIGIN+$0016
B3.ONVAUS	= DATAORIGIN+$0017
B3.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$0323
@CASETMP_000A	= DATAORIGIN+$0325

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2CBD

; optimize OK (service.pas), line = 3250

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva RAND.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3251

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2CBD

; optimize OK (service.pas), line = 3253

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3254

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3256

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0326
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
TEMP	= DATAORIGIN+$032A

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2CF7

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3289

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2D16
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2D16

; optimize OK (service.pas), line = 3290

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2D16

; optimize OK (service.pas), line = 3292

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3293

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0389
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3303

	mwy BALL :bp2
	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3305

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL+1,y
	cmp :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda adr.LEVEL,y
	cmp :STACKORIGIN+9
@
	jcs l_2D3E

; optimize OK (service.pas), line = 3307

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3310

	ldy #BALL.SPEED-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$03
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jcs l_2D54

; optimize OK (service.pas), line = 3312

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	adc #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3313

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2D54
l_2D3E

; optimize OK (service.pas), line = 3317

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3321

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2D7C
@
	ldy #$00
	lda (:bp2),y
	jpl l_2D7C
@

; optimize OK (service.pas), line = 3322

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2D7C

; ------------------------------------------------------------

BALL	= DATAORIGIN+$038D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2CF7

; optimize OK (service.pas), line = 3330

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3331

	sta SCRFLUX

; optimize OK (service.pas), line = 3333

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3335

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3336

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3338

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3339

	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3342

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 3345

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 3346

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3350

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3356

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3357

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3358

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3361

	jsr PUT_WALL

; optimize OK (service.pas), line = 3368

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3369

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3372

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3373

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3376

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3377

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3380

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3384

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3389

	sta BALL0.STM

; optimize OK (service.pas), line = 3393

	lda #$E8
	sta RAND.RANGE
	lda #$03
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3396

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3399

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3401

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3402

	jsr START_VAUS

; optimize OK (service.pas), line = 3403

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3404

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3405

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3406

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3407

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3414

	lda #$0F
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda RAND.RESULT+1
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3416

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$26
	sta SET_BALL_SPEED.SPEED
	lda #$02
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3419

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3421

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3422

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3424

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_2E13
l_2E14

; -------------------  ASM Block 00000171  -------------------

      mva #$00 $d01a
      @: lda vcount
      cmp #110
      bne @-
      mva #$0f $d01a       
     
; optimize OK (service.pas), line = 3441

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3447

	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 3459

	lda BALL0.LAUNCH
	cmp #$01
	jne l_2E2C

; optimize FAIL (0, service.pas), line = 3461

	inc BALL0.STM

; optimize OK (service.pas), line = 3466

	lda BALL0.STM
	cmp #$FA
	jne l_2E43
	lda #$00
	sta BALL0.LAUNCH
l_2E43

; optimize OK (service.pas), line = 3469

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3472

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_2E5D
	lda #$00
	sta BALL0.LAUNCH
l_2E5D
	jmp l_2E6D
l_2E2C

; optimize OK (service.pas), line = 3480

	lda BALL0.INPLAY
	jeq l_2E79
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2E79

; optimize OK (service.pas), line = 3481

	lda BALL1.INPLAY
	jeq l_2E8B
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2E8B

; optimize OK (service.pas), line = 3482

	lda BALL2.INPLAY
	jeq l_2E9D
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2E9D
l_2E6D

; optimize OK (service.pas), line = 3490

	lda BALL0.INPLAY
	jeq l_2EAF
	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2EAF

; optimize OK (service.pas), line = 3491

	lda BALL1.INPLAY
	jeq l_2EC1
	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2EC1

; optimize OK (service.pas), line = 3492

	lda BALL2.INPLAY
	jeq l_2ED3
	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2ED3

; optimize FAIL ('CHECKSHINE', service.pas), line = 3507

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3508

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3509

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3510

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3511

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3513

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_2F02
	jsr VAUS_OUT
l_2F02

; optimize OK (service.pas), line = 3515

	lda VAUS.LETTER
	cmp #$04
	jne l_2F18

; optimize OK (service.pas), line = 3517

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3519

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3520

	mwy BALL2 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3522

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3524

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3531

	ldy T1
	lda adr.MUL90_16,y
	sta T1
	lda adr.MUL90_16+16,y
	sta T1+1

; optimize OK (service.pas), line = 3533

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3534

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3535

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3539

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3540

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3541

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3543

	lda #$00
	sta VAUS.LETTER
l_2F18

; optimize OK (service.pas), line = 3547

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_2F79
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_2F79

; optimize OK (service.pas), line = 3551

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3553

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_2F97

; optimize OK (service.pas), line = 3555

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3557

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_2F97

; optimize OK (service.pas), line = 3563

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_2FB9
	jeq l_2FB9

; optimize OK (service.pas), line = 3566

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3568

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_2FB9

; optimize OK (service.pas), line = 3575

	lda BALL0.INPLAY
	jeq l_2FD2
	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_2FD2

; optimize OK (service.pas), line = 3576

	lda BALL1.INPLAY
	jeq l_2FE4
	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_2FE4

; optimize OK (service.pas), line = 3577

	lda BALL2.INPLAY
	jeq l_2FF6
	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_2FF6

; optimize OK (service.pas), line = 3627

	lda BALL0.INPLAY
	jne l_300B

; optimize OK (service.pas), line = 3628

	lda BALL1.INPLAY
	jeq l_3018

; optimize OK (service.pas), line = 3629

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3630

	lda #$00
	sta BALL1.INPLAY
	jmp l_3028
l_3018

; optimize OK (service.pas), line = 3632

	lda BALL2.INPLAY
	jeq l_3034

; optimize OK (service.pas), line = 3633

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3634

	lda #$00
	sta BALL2.INPLAY
l_3028
l_3034
l_300B

; optimize OK (service.pas), line = 3638

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3640

	lda BALL0.INPLAY
	jeq l_304F
	inc BALLS_IN_PLAY
l_304F

; optimize OK (service.pas), line = 3641

	lda BALL1.INPLAY
	jeq l_3062
	inc BALLS_IN_PLAY
l_3062

; optimize OK (service.pas), line = 3642

	lda BALL2.INPLAY
	jeq l_3075
	inc BALLS_IN_PLAY
l_3075

; optimize OK (service.pas), line = 3645

	lda BALL0.INPLAY
	jne l_308B

; optimize OK (service.pas), line = 3647

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3648

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3649

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3650

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3651

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3659

	jsr NOSOUND
l_308B
l_2E13

; optimize OK (service.pas), line = 3427

	lda REMAIN_BLK
	jeq l_2E14w
	lda BALL0.INPLAY
	jeq l_2E14w
	lda SCORE.ABORTPLAY
	jeq l_2E14
l_2E14w

; optimize OK (service.pas), line = 3715

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3716

	lda REMAIN_BLK
	jne l_30D9
	lda #$01
	sta RESULT
l_30D9
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$032C
X	= DATAORIGIN+$032D
Y	= DATAORIGIN+$032F
KEY	= DATAORIGIN+$0331
T1	= DATAORIGIN+$0333
T2	= DATAORIGIN+$0335
adr.BALL0	= DATAORIGIN+$0337	; [26] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$0337
BALL0.Y	= DATAORIGIN+$0339
BALL0.FINEX	= DATAORIGIN+$033B
BALL0.FINEY	= DATAORIGIN+$033C
BALL0.OLDX	= DATAORIGIN+$033D
BALL0.OLDY	= DATAORIGIN+$033F
BALL0.SPEED	= DATAORIGIN+$0341
BALL0.FINESPEED	= DATAORIGIN+$0343
BALL0.SPEEDX	= DATAORIGIN+$0345
BALL0.SPEEDY	= DATAORIGIN+$0347
BALL0.SBD	= DATAORIGIN+$0349
BALL0.BRWHIT	= DATAORIGIN+$034B
BALL0.INPLAY	= DATAORIGIN+$034C
BALL0.LAUNCH	= DATAORIGIN+$034D
BALL0.ONVAUS	= DATAORIGIN+$034E
BALL0.STM	= DATAORIGIN+$0350
adr.BALL1	= DATAORIGIN+$0351	; [26] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0351
BALL1.Y	= DATAORIGIN+$0353
BALL1.FINEX	= DATAORIGIN+$0355
BALL1.FINEY	= DATAORIGIN+$0356
BALL1.OLDX	= DATAORIGIN+$0357
BALL1.OLDY	= DATAORIGIN+$0359
BALL1.SPEED	= DATAORIGIN+$035B
BALL1.FINESPEED	= DATAORIGIN+$035D
BALL1.SPEEDX	= DATAORIGIN+$035F
BALL1.SPEEDY	= DATAORIGIN+$0361
BALL1.SBD	= DATAORIGIN+$0363
BALL1.BRWHIT	= DATAORIGIN+$0365
BALL1.INPLAY	= DATAORIGIN+$0366
BALL1.LAUNCH	= DATAORIGIN+$0367
BALL1.ONVAUS	= DATAORIGIN+$0368
BALL1.STM	= DATAORIGIN+$036A
adr.BALL2	= DATAORIGIN+$036B	; [26] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$036B
BALL2.Y	= DATAORIGIN+$036D
BALL2.FINEX	= DATAORIGIN+$036F
BALL2.FINEY	= DATAORIGIN+$0370
BALL2.OLDX	= DATAORIGIN+$0371
BALL2.OLDY	= DATAORIGIN+$0373
BALL2.SPEED	= DATAORIGIN+$0375
BALL2.FINESPEED	= DATAORIGIN+$0377
BALL2.SPEEDX	= DATAORIGIN+$0379
BALL2.SPEEDY	= DATAORIGIN+$037B
BALL2.SBD	= DATAORIGIN+$037D
BALL2.BRWHIT	= DATAORIGIN+$037F
BALL2.INPLAY	= DATAORIGIN+$0380
BALL2.LAUNCH	= DATAORIGIN+$0381
BALL2.ONVAUS	= DATAORIGIN+$0382
BALL2.STM	= DATAORIGIN+$0384
SCORES	= DATAORIGIN+$0385

@VarData	= X
@VarDataSize	= 92

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3739

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3797

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0391
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0393
Y	= DATAORIGIN+$0395
ST	= DATAORIGIN+$0397
OLDX	= DATAORIGIN+$0399
OLDY	= DATAORIGIN+$039B
NEWX	= DATAORIGIN+$039D
NEWY	= DATAORIGIN+$039F

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3806

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3808

	lda #$01
	sta X

l_30FE
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_310C

; optimize OK (service.pas), line = 3810

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3811

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3812

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3813

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3815

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_30FE
l_310C

; optimize OK (service.pas), line = 3818

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$03A1

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3878

	jsr NOSOUND

; optimize OK (service.pas), line = 3879

	lda #$00
	sta SCORE.ABORTPLAY

; -------------------  ASM Block 00000172  -------------------

      fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 3896

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3897

	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$D0
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000173  -------------------

      fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 3940

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03A2
X	= DATAORIGIN+$03A4
Y	= DATAORIGIN+$03A6
Z	= DATAORIGIN+$03A8
K	= DATAORIGIN+$03AA
IK	= DATAORIGIN+$03AC

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3948

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3949

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_316E
	lda #$00
	sta adr.SCORE.LIVES+$02
l_316E

; optimize OK (service.pas), line = 3952

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3953

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3957

	jsr SET_WALL

; optimize OK (service.pas), line = 3959

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 3961

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 3962

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3969

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3970

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3971

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_319E

; --- RepeatUntilProlog
l_319F

; optimize OK (service.pas), line = 3981

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_31B1

; optimize FAIL (1, service.pas), line = 3983

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 3986

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3990

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_31B1

; optimize OK (service.pas), line = 3994

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3995

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4000

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4003

	jeq l_31FF

; optimize OK (service.pas), line = 4006

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4009

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_321B

; optimize OK (service.pas), line = 4010

	lda #$01
	sta adr.SCORE.WALL_N,y
l_321B

; optimize OK (service.pas), line = 4013

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_324D
l_31FF

; optimize OK (service.pas), line = 4019

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3262
	jsr GAME_OVER
l_324D
l_3262

; optimize OK (service.pas), line = 4024

	lda NWALL
	jne l_319F

; optimize FAIL (0, service.pas), line = 4027

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4028

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_328A
	lda #$01
	sta CUR_PLAYER
l_328A

; optimize OK (service.pas), line = 4034

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_32A6
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_32A6

; optimize OK (service.pas), line = 4039

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_319E

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$03AE
NWALL	= DATAORIGIN+$03B0

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 646

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 648

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 649

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta EXPLOSION.OFS
	lda #$60
	sta EXPLOSION.OFS+1
	lda #$00
	sta EXPLOSION.OFS+2
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$72
	sta EXPLOSION.HEIGHT

; optimize OK (btm.inc), line = 5

	lda #$B4
	sta NEWVAUS.OFS
	lda #$72
	sta NEWVAUS.OFS+1
	lda #$00
	sta NEWVAUS.OFS+2
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C1
	sta NEWVAUS.HEIGHT

; optimize OK (btm.inc), line = 9

	lda #$9D
	sta SHINEWALL.OFS
	lda #$91
	sta SHINEWALL.OFS+1
	lda #$00
	sta SHINEWALL.OFS+2
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$50
	sta SHINEWALL.HEIGHT

; optimize OK (btm.inc), line = 13

	lda #$9D
	sta MINIVAUS.OFS
	lda #$96
	sta MINIVAUS.OFS+1
	lda #$00
	sta MINIVAUS.OFS+2
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$05
	sta MINIVAUS.HEIGHT

; optimize OK (btm.inc), line = 17

	lda #$01
	sta LEVELSEL.OFS
	lda #$97
	sta LEVELSEL.OFS+1
	lda #$00
	sta LEVELSEL.OFS+2
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$5F
	sta LEVELSEL.HEIGHT

; optimize OK (btm.inc), line = 21

	lda #$CC
	sta LETTERS.OFS
	lda #$9E
	sta LETTERS.OFS+1
	lda #$00
	sta LETTERS.OFS+2
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$38
	sta LETTERS.HEIGHT

; optimize OK (btm.inc), line = 25

	lda #$CC
	sta NORMAL.OFS
	lda #$BA
	sta NORMAL.OFS+1
	lda #$00
	sta NORMAL.OFS+2
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$07
	sta NORMAL.HEIGHT

; optimize OK (btm.inc), line = 29

	lda #$AC
	sta LASERS.OFS
	lda #$BB
	sta LASERS.OFS+1
	lda #$00
	sta LASERS.OFS+2
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$07
	sta LASERS.HEIGHT

; optimize OK (btm.inc), line = 33

	lda #$8C
	sta ENLARGED.OFS
	lda #$BC
	sta ENLARGED.OFS+1
	lda #$00
	sta ENLARGED.OFS+2
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta ENLARGED.HEIGHT

; optimize OK (btm.inc), line = 37

	lda #$4C
	sta SHOOTS.OFS
	lda #$BE
	sta SHOOTS.OFS+1
	lda #$00
	sta SHOOTS.OFS+2
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$08
	sta SHOOTS.HEIGHT

; optimize OK (btm.inc), line = 41

	lda #$B4
	sta FLUX.OFS
	lda #$BE
	sta FLUX.OFS+1
	lda #$00
	sta FLUX.OFS+2
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$29
	sta FLUX.HEIGHT

; optimize OK (btm.inc), line = 45

	lda #$FC
	sta BALLDATA.OFS
	lda #$BF
	sta BALLDATA.OFS+1
	lda #$00
	sta BALLDATA.OFS+2
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$05
	sta BALLDATA.HEIGHT

; optimize OK (btm.inc), line = 49

	lda #$15
	sta PATTERN0.OFS
	lda #$C0
	sta PATTERN0.OFS+1
	lda #$00
	sta PATTERN0.OFS+2
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$18
	sta PATTERN0.HEIGHT

; optimize OK (btm.inc), line = 53

	lda #$85
	sta PATTERN1.OFS
	lda #$C2
	sta PATTERN1.OFS+1
	lda #$00
	sta PATTERN1.OFS+2
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$0E
	sta PATTERN1.HEIGHT

; optimize OK (btm.inc), line = 57

	lda #$49
	sta PATTERN2.OFS
	lda #$C3
	sta PATTERN2.OFS+1
	lda #$00
	sta PATTERN2.OFS+2
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$23
	sta PATTERN2.HEIGHT

; optimize OK (btm.inc), line = 61

	lda #$7B
	sta PATTERN3.OFS
	lda #$C8
	sta PATTERN3.OFS+1
	lda #$00
	sta PATTERN3.OFS+2
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$1D
	sta PATTERN3.HEIGHT

; optimize OK (btm.inc), line = 65

	lda #$A7
	sta PATTERN4.OFS
	lda #$CB
	sta PATTERN4.OFS+1
	lda #$00
	sta PATTERN4.OFS+2
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$1E
	sta PATTERN4.HEIGHT

; optimize OK (arkanoid_vbxe.pas), line = 656

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 658

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 661

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 662

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_33B8

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 669

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 671

	jeq l_33CE
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_33CE

; optimize OK (arkanoid_vbxe.pas), line = 674

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_33B8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 682

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DIGIT	= $5000
VBXE_DATA	= $6000
PLAYSCREEN_OFS	= $20000
VRAM	= $30000
PATTERN_TEMP	= $40000
EXPLOSION_OFS	= $6000
SHINEWALL_OFS	= $919D
LETTERS_OFS	= $9ECC
MINIVAUS_OFS	= $969D
SHOOTS_OFS	= $BE4C
FLUX_OFS	= $BEB4
BALLDATA_OFS	= $BFFC
PRESENTS_OFS	= $D080
MINIVAUS_WIDTH	= $14
MINIVAUS_HEIGHT	= $05
EXPLOSION_WIDTH	= $2A
SHOOTS_WIDTH	= $0D
SHOOTS_HEIGHT	= $08
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$008E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0099
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$00AF
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$00B8
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $0226
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$00C2
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$00C6
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00D1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00DD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.BLT_BOX	= $B12A
.var BLT_BOX	= adr.BLT_BOX .word
adr.BLT_BOX.SRC_ADR	= $B12A
.var BLT_BOX.SRC_ADR	= adr.BLT_BOX.SRC_ADR .word
BLT_BOX.SRC_ADR.BYTE0	= $B12A
BLT_BOX.SRC_ADR.BYTE1	= $B12B
BLT_BOX.SRC_ADR.BYTE2	= $B12C
BLT_BOX.SRC_STEP_Y	= $B12D
BLT_BOX.SRC_STEP_X	= $B12F
adr.BLT_BOX.DST_ADR	= $B130
.var BLT_BOX.DST_ADR	= adr.BLT_BOX.DST_ADR .word
BLT_BOX.DST_ADR.BYTE0	= $B130
BLT_BOX.DST_ADR.BYTE1	= $B131
BLT_BOX.DST_ADR.BYTE2	= $B132
BLT_BOX.DST_STEP_Y	= $B133
BLT_BOX.DST_STEP_X	= $B135
BLT_BOX.BLT_WIDTH	= $B136
BLT_BOX.BLT_HEIGHT	= $B138
BLT_BOX.BLT_AND_MASK	= $B139
BLT_BOX.BLT_XOR_MASK	= $B13A
BLT_BOX.BLT_COLLISION_MASK	= $B13B
BLT_BOX.BLT_ZOOM	= $B13C
BLT_BOX.PATTERN_FEATURE	= $B13D
BLT_BOX.BLT_CONTROL	= $B13E
adr.BLT_ZERO	= $B13F
.var BLT_ZERO	= adr.BLT_ZERO .word
adr.BLT_ZERO.SRC_ADR	= $B13F
.var BLT_ZERO.SRC_ADR	= adr.BLT_ZERO.SRC_ADR .word
BLT_ZERO.SRC_ADR.BYTE0	= $B13F
BLT_ZERO.SRC_ADR.BYTE1	= $B140
BLT_ZERO.SRC_ADR.BYTE2	= $B141
BLT_ZERO.SRC_STEP_Y	= $B142
BLT_ZERO.SRC_STEP_X	= $B144
adr.BLT_ZERO.DST_ADR	= $B145
.var BLT_ZERO.DST_ADR	= adr.BLT_ZERO.DST_ADR .word
BLT_ZERO.DST_ADR.BYTE0	= $B145
BLT_ZERO.DST_ADR.BYTE1	= $B146
BLT_ZERO.DST_ADR.BYTE2	= $B147
BLT_ZERO.DST_STEP_Y	= $B148
BLT_ZERO.DST_STEP_X	= $B14A
BLT_ZERO.BLT_WIDTH	= $B14B
BLT_ZERO.BLT_HEIGHT	= $B14D
BLT_ZERO.BLT_AND_MASK	= $B14E
BLT_ZERO.BLT_XOR_MASK	= $B14F
BLT_ZERO.BLT_COLLISION_MASK	= $B150
BLT_ZERO.BLT_ZOOM	= $B151
BLT_ZERO.PATTERN_FEATURE	= $B152
BLT_ZERO.BLT_CONTROL	= $B153
adr.VBXE_RAM	= DATAORIGIN+$0082	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$0082
VBXE_RAM.SIZE	= DATAORIGIN+$0086
adr.BALLDATA	= DATAORIGIN+$008A	; [7] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$008A
BALLDATA.HEIGHT	= DATAORIGIN+$008C
BALLDATA.OFS	= DATAORIGIN+$008D
adr.PLAYSCREEN	= DATAORIGIN+$0091	; [7] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$0091
PLAYSCREEN.HEIGHT	= DATAORIGIN+$0093
PLAYSCREEN.OFS	= DATAORIGIN+$0094
adr.PLAYVAUS	= DATAORIGIN+$0098	; [7] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$0098
PLAYVAUS.HEIGHT	= DATAORIGIN+$009A
PLAYVAUS.OFS	= DATAORIGIN+$009B
adr.NORMAL	= DATAORIGIN+$009F	; [7] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$009F
NORMAL.HEIGHT	= DATAORIGIN+$00A1
NORMAL.OFS	= DATAORIGIN+$00A2
adr.ENLARGED	= DATAORIGIN+$00A6	; [7] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00A6
ENLARGED.HEIGHT	= DATAORIGIN+$00A8
ENLARGED.OFS	= DATAORIGIN+$00A9
adr.LASERS	= DATAORIGIN+$00AD	; [7] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00AD
LASERS.HEIGHT	= DATAORIGIN+$00AF
LASERS.OFS	= DATAORIGIN+$00B0
adr.EXPLOSION	= DATAORIGIN+$00B4	; [7] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00B4
EXPLOSION.HEIGHT	= DATAORIGIN+$00B6
EXPLOSION.OFS	= DATAORIGIN+$00B7
adr.NEWVAUS	= DATAORIGIN+$00BB	; [7] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00BB
NEWVAUS.HEIGHT	= DATAORIGIN+$00BD
NEWVAUS.OFS	= DATAORIGIN+$00BE
adr.PRESENTS	= DATAORIGIN+$00C2	; [7] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$00C2
PRESENTS.HEIGHT	= DATAORIGIN+$00C4
PRESENTS.OFS	= DATAORIGIN+$00C5
adr.SHINEWALL	= DATAORIGIN+$00C9	; [7] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$00C9
SHINEWALL.HEIGHT	= DATAORIGIN+$00CB
SHINEWALL.OFS	= DATAORIGIN+$00CC
adr.MINIVAUS	= DATAORIGIN+$00D0	; [7] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$00D0
MINIVAUS.HEIGHT	= DATAORIGIN+$00D2
MINIVAUS.OFS	= DATAORIGIN+$00D3
adr.LEVELSEL	= DATAORIGIN+$00D7	; [7] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$00D7
LEVELSEL.HEIGHT	= DATAORIGIN+$00D9
LEVELSEL.OFS	= DATAORIGIN+$00DA
adr.LETTERS	= DATAORIGIN+$00DE	; [7] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$00DE
LETTERS.HEIGHT	= DATAORIGIN+$00E0
LETTERS.OFS	= DATAORIGIN+$00E1
adr.SHOOTS	= DATAORIGIN+$00E5	; [7] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$00E5
SHOOTS.HEIGHT	= DATAORIGIN+$00E7
SHOOTS.OFS	= DATAORIGIN+$00E8
adr.FLUX	= DATAORIGIN+$00EC	; [7] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$00EC
FLUX.HEIGHT	= DATAORIGIN+$00EE
FLUX.OFS	= DATAORIGIN+$00EF
adr.VAUS	= DATAORIGIN+$00F3	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$00F3
VAUS.Y	= DATAORIGIN+$00F4
VAUS.OLDX	= DATAORIGIN+$00F5
VAUS.OLDY	= DATAORIGIN+$00F7
VAUS.OLDLEN	= DATAORIGIN+$00F9
VAUS.WIDTH	= DATAORIGIN+$00FB
VAUS.HEIGHT	= DATAORIGIN+$00FC
VAUS.FLASH	= DATAORIGIN+$00FD
VAUS.IFLASH	= DATAORIGIN+$00FE
VAUS.LETTER	= DATAORIGIN+$00FF
adr.PATTERN	= DATAORIGIN+$0100	; [7] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0100
PATTERN.HEIGHT	= DATAORIGIN+$0102
PATTERN.OFS	= DATAORIGIN+$0103
adr.PATTERN0	= DATAORIGIN+$0107	; [7] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0107
PATTERN0.HEIGHT	= DATAORIGIN+$0109
PATTERN0.OFS	= DATAORIGIN+$010A
adr.PATTERN1	= DATAORIGIN+$010E	; [7] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$010E
PATTERN1.HEIGHT	= DATAORIGIN+$0110
PATTERN1.OFS	= DATAORIGIN+$0111
adr.PATTERN2	= DATAORIGIN+$0115	; [7] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0115
PATTERN2.HEIGHT	= DATAORIGIN+$0117
PATTERN2.OFS	= DATAORIGIN+$0118
adr.PATTERN3	= DATAORIGIN+$011C	; [7] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$011C
PATTERN3.HEIGHT	= DATAORIGIN+$011E
PATTERN3.OFS	= DATAORIGIN+$011F
adr.PATTERN4	= DATAORIGIN+$0123	; [7] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0123
PATTERN4.HEIGHT	= DATAORIGIN+$0125
PATTERN4.OFS	= DATAORIGIN+$0126
STATUS	= DATAORIGIN+$012A
REMAIN_BLK	= DATAORIGIN+$012B
TOTALWALL	= DATAORIGIN+$012C
adr.SCORE	= DATAORIGIN+$012D	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$012D] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$0139] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$013C] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$013F
SCORE.PL_NUMB	= DATAORIGIN+$0143
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0144] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$0147
CUR_PLAYER	= DATAORIGIN+$0148
adr.SHINEREC	= DATAORIGIN+$0149	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$0149
SHINEREC.YB	= DATAORIGIN+$014A
SHINEREC.FRAME	= DATAORIGIN+$014B
SHINEREC.BLOCK	= DATAORIGIN+$014C
SHINEREC.ACTIVE	= DATAORIGIN+$014D
LV	= DATAORIGIN+$014E
TRAINER	= DATAORIGIN+$0150
adr.LETT	= DATAORIGIN+$0151	; [15] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$0151
LETT.Y	= DATAORIGIN+$0152
LETT.TYP	= DATAORIGIN+$0153
LETT.FRAME	= DATAORIGIN+$0155
LETT.SUBFRAME	= DATAORIGIN+$0156
LETT.ACTIVE	= DATAORIGIN+$0157
LETT.INCOMING	= DATAORIGIN+$0158
LETT.NEXTX	= DATAORIGIN+$015A
LETT.NEXTY	= DATAORIGIN+$015B
LETT.NEXTTYPE	= DATAORIGIN+$015C
LETT.LAST	= DATAORIGIN+$015E
adr.FIRE	= DATAORIGIN+$0160	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$0160
FIRE.Y	= DATAORIGIN+$0161
FIRE.SHOT	= DATAORIGIN+$0162
FIRE.AVL	= DATAORIGIN+$0163
FIRE.NW	= DATAORIGIN+$0164
BALLS_IN_PLAY	= DATAORIGIN+$0165
SCRFLUX	= DATAORIGIN+$0166
SCRFLUXCNT	= DATAORIGIN+$0167
SOUND_ON	= DATAORIGIN+$0168
OLD_SCORES	= DATAORIGIN+$0169
HLP	= DATAORIGIN+$016D
F_HLP	= DATAORIGIN+$016F
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.MODY	= $0500
.var MODY	= adr.MODY .word
adr.MODX	= $0600
.var MODX	= adr.MODX .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD10TABLE	= $C200
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.MOD90TABLE	= $C300
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD360TABLE	= $C400
.var MOD360TABLE	= adr.MOD360TABLE .word
adr.ATAN_TAB	= $C600
.var ATAN_TAB	= adr.ATAN_TAB .word
adr.LOG2_TAB	= $C700
.var LOG2_TAB	= adr.LOG2_TAB .word
adr.SCALE360	= $C800
.var SCALE360	= adr.SCALE360 .word
adr.SINTABLE	= $CA00
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.MUL90_16	= $DC00
.var MUL90_16	= adr.MUL90_16 .word
adr.ALL_WALLS	= $DD00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 945

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $06 $0C  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
