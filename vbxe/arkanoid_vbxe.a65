; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/31] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'mod90table.obx' adr.MOD90TABLE 0 0 0 0 0 0 0 0
	RCDATA 'mod10table.obx' adr.MOD10TABLE 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 935

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 936

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 937

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 939

	lda VALUE+3
	bne @+
	lda VALUE+2
	bne @+
	lda VALUE+1
	bne @+
	lda VALUE
@
	jne l_0051

; optimize OK (SYSTEM), line = 940

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0051

; optimize OK (SYSTEM), line = 943

	lda X+3
	jpl l_006F

; optimize OK (SYSTEM), line = 944

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 945

	lda X+3
	eor #$80
	sta X+3
l_006F
l_005F

; optimize OK (SYSTEM), line = 948

	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 949

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta Y
	lda :FPMAN1
	sta Y+1
	lda :FPMAN2
	sta Y+2
	lda :FPMAN3
	sta Y+3

; optimize OK (SYSTEM), line = 950

	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	lda #$4A
	sta :FP1MAN0
	lda #$D7
	sta :FP1MAN1
	lda #$3B
	sta :FP1MAN2
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$02
	sta :FP2MAN0
	lda #$6E
	sta :FP2MAN1
	lda #$84
	sta :FP2MAN2
	lda #$3C
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$FE
	sta :FP2MAN0
	lda #$C1
	sta :FP2MAN1
	lda #$2F
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$74
	sta :FP2MAN0
	lda #$31
	sta :FP2MAN1
	lda #$9A
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$83
	sta :FP2MAN0
	lda #$3D
	sta :FP2MAN1
	lda #$DA
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$C7
	sta :FP2MAN0
	lda #$7F
	sta :FP2MAN1
	lda #$11
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$E5
	sta :FP2MAN0
	lda #$BB
	sta :FP2MAN1
	lda #$4C
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$6C
	sta :FP2MAN0
	lda #$AA
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 953

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 955

	lda SIGN
	jeq l_00F1

; optimize OK (SYSTEM), line = 956

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
	eor #$80
	jmp l_0102
l_00F1

; optimize OK (SYSTEM), line = 958

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0102
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
X	= DATAORIGIN+$0013
Y	= DATAORIGIN+$0017
SIGN	= DATAORIGIN+$001B

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$001C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$001D
GETCOLOR	= DATAORIGIN+$001E
VIDEORAM	= DATAORIGIN+$001F
adr.LASTARCCOORDS	= DATAORIGIN+$0021	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0021
LASTARCCOORDS.Y	= DATAORIGIN+$0023
LASTARCCOORDS.XSTART	= DATAORIGIN+$0025
LASTARCCOORDS.YSTART	= DATAORIGIN+$0027
LASTARCCOORDS.XEND	= DATAORIGIN+$0029
LASTARCCOORDS.YEND	= DATAORIGIN+$002B
WIN_LEFT	= DATAORIGIN+$002D
WIN_RIGHT	= DATAORIGIN+$002F
WIN_TOP	= DATAORIGIN+$0031
WIN_BOTTOM	= DATAORIGIN+$0033
SCANLINE_WIDTH	= DATAORIGIN+$0035
CURRENTX	= DATAORIGIN+$0036
CURRENTY	= DATAORIGIN+$0038

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0076
POSITION	= DATAORIGIN+$0078
SIZE	= DATAORIGIN+$007A
ADR	= DATAORIGIN+$007C
SIZ	= DATAORIGIN+$0080

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_023A
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_023A
	cmp #$1F
	jne l_0249

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0249
	cmp #$18
	jne l_0258

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_0258

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0084
S	= DATAORIGIN+$0085
@CASETMP_0005	= DATAORIGIN+$0087

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0088

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0089

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$008A
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$008E

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0046	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0046
VRAM.SIZE	= DATAORIGIN+$004A
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0097

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0099
B	= DATAORIGIN+$009B

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER
	sta A

; -------------------  ASM Block 00000137  -------------------

// https://www.romhacking.net/forum/index.php?msg=401374

	lda a
random_in_range:
	sta scratch
	clc
	sbc #1
	ora #1
	ldy #$FF
	;determine which mask to use by counting leading zeroes
count	iny
	rol @
	bcc count
	;loop until random <= range-1
try	lda $d20a
	and mask_bytes,y
	cmp scratch: #$00
	bcs try
 
	sta Result
  
	jmp @exit

mask_bytes
	dta $FF, $7F, $3F, $1F, $0F, $07, $03, $01


@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$009D
RESULT	= DATAORIGIN+$009E

@VarData	= A
@VarDataSize	= 1

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000138  -------------------

; N = hi:lo (16-bit)
; N mod 90 -> A

    LDY a+1
    LDA Mod90Table,Y   ; tablica: (X*256) mod 90
    CLC
    ADC a              ; dodaj młodszy bajt
    CMP #90
    BCC done
    SBC #90
    CMP #90
    BCC done
    SBC #90            ; max 2 odejmowania bo 256 < 3*90
done:
    ; A = reszta mod 90

    sta Result

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$009F
RESULT	= DATAORIGIN+$00A1

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	SQRT32						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 137

	lda #$00
	sta Q
	sta Q+1
	sta Q+2
	sta Q+3

; optimize OK (arkanoid_vbxe.pas), line = 138

	sta B
	sta B+1
	sta B+2
	lda #$40

; --- WhileProlog
	jmp l_029E
l_029F

; optimize OK (arkanoid_vbxe.pas), line = 140

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
l_029E
	sta B+3
	cmp R+3
	bne @+
	lda B+2
	cmp R+2
	bne @+
	lda B+1
	cmp R+1
	bne @+
	lda B
	cmp R
@
	beq @+
	jcs l_029F
@

; --- WhileProlog
	jmp l_02B3
l_02B4

; optimize OK (arkanoid_vbxe.pas), line = 143

	lda Q
	add B
	sta T
	lda Q+1
	adc B+1
	sta T+1
	lda Q+2
	adc B+2
	sta T+2
	lda Q+3
	adc B+3
	sta T+3

; optimize OK (arkanoid_vbxe.pas), line = 145

	lsr Q+3
	ror Q+2
	ror Q+1
	ror Q

; optimize OK (arkanoid_vbxe.pas), line = 147

	lda R+3
	cmp T+3
	bne @+
	lda R+2
	cmp T+2
	bne @+
	lda R+1
	cmp T+1
	bne @+
	lda R
	cmp T
@
	jcc l_02D4

; optimize OK (arkanoid_vbxe.pas), line = 148

	lda R
	sbc T
	sta R
	lda R+1
	sbc T+1
	sta R+1
	lda R+2
	sbc T+2
	sta R+2
	lda R+3
	sbc T+3
	sta R+3

; optimize OK (arkanoid_vbxe.pas), line = 149

	lda Q
	add B
	sta Q
	lda Q+1
	adc B+1
	sta Q+1
	lda Q+2
	adc B+2
	sta Q+2
	lda Q+3
	adc B+3
	sta Q+3
l_02D4

; optimize OK (arkanoid_vbxe.pas), line = 152

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta B+3
l_02B3

; optimize OK (arkanoid_vbxe.pas), line = 142

	lda B+3
	cmp #$00
	bne @+
	lda B+2
	cmp #$00
	bne @+
	lda B+1
	cmp #$00
	bne @+
	lda B
	cmp #$00
@
	beq @+
	jcs l_02B4
@

; optimize OK (arkanoid_vbxe.pas), line = 156

	lda Q
	sta RESULT
	lda Q+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

R	= DATAORIGIN+$00A2
RESULT	= DATAORIGIN+$00A6
B	= DATAORIGIN+$00A8
Q	= DATAORIGIN+$00AC
T	= DATAORIGIN+$00B0

@VarData	= R
@VarDataSize	= 16

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 307

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 309

	sta @CASETMP_0007
	cmp #$0B
	jne l_0316
@

; optimize OK (service.pas), line = 310

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0327
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_0327
	jmp a_0007
l_0316
	cmp #$07
	jne l_0332

; optimize OK (service.pas), line = 311

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0343
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_0343
l_0332
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$01B5
A	= DATAORIGIN+$01B7
@CASETMP_0007	= DATAORIGIN+$01B8

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 320

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01B9

	rts						; ret
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@0201810000181000

; --- WhileProlog
l_0360

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 328

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0360

; optimize OK (service.pas), line = 330

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 331

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= DATAORIGIN+$01BA
DWIDTH	= DATAORIGIN+$01BC

@VarData	= SWIDTH
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 340

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 341

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 342

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 344

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 345

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 346

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 348

	lda #$00
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 350

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 352

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 354

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01BE
DST	= DATAORIGIN+$01C2
W	= DATAORIGIN+$01C6
H	= DATAORIGIN+$01C8

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITLETTER					; PROCEDURE

; -------------------  ASM Block 00000139  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 366

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 367

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 368

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 370

	lda DST+2
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 371

	lda DST+1
	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 372

	lda DST
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 378

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01C9
DST	= DATAORIGIN+$01CD

@VarData	= SRC
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 390

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 391

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 392

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 394

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 395

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 396

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 398

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 399

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 401

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 402

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 404

	lda #$00
	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 410

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01D1
DST	= DATAORIGIN+$01D5
W	= DATAORIGIN+$01D9
H	= DATAORIGIN+$01DB

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 422

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 423

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 424

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 426

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 427

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 428

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 430

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 432

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 433

	lda W
	sta BLT.SRC_STEP_Y
	lda W+1
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 435

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 437

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000144  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 443

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01DC
DST	= DATAORIGIN+$01E0
W	= DATAORIGIN+$01E4
H	= DATAORIGIN+$01E6

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000145  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 455

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 456

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 457

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 459

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 460

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 461

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 463

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 464

	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 466

	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 467

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 469

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000146  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 475

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01E7
DST	= DATAORIGIN+$01EB
SIZE	= DATAORIGIN+$01EF

@VarData	= SRC
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01F1

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 601

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_04E6
	lda A
	sta RESULT
	lda A+1
	jmp l_04F5
l_04E6

; optimize OK (service.pas), line = 602

	lda B
	sta RESULT
	lda B+1
l_04F5
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01F3
B	= DATAORIGIN+$01F5
RESULT	= DATAORIGIN+$01F7

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 608

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_0510
	lda A
	sta RESULT
	lda A+1
	jmp l_051F
l_0510

; optimize OK (service.pas), line = 609

	lda B
	sta RESULT
	lda B+1
l_051F
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01F9
B	= DATAORIGIN+$01FB
RESULT	= DATAORIGIN+$01FD

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 618

	sta STATUS

; -------------------  ASM Block 00000147  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$01FF

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 666

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 668

	sta Y

l_053F
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_055F

; optimize OK (service.pas), line = 671

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_0570
l_055F

; optimize OK (service.pas), line = 673

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_0570
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 675

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_053F
l_054D

; ------------------------------------------------------------

Y	= DATAORIGIN+$0200

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 691

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_0594

; optimize FAIL ('@print', service.pas), line = 692

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_0594

; optimize OK (service.pas), line = 696

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 697

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 699

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 701

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 702

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 704

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 705

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 706

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 708

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 714

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 716

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 719

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 720

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 722

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 726

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 727

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 729

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 731

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 732

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 734

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 736

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 738

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 760

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 761

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 763

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 765

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_0618

; optimize OK (service.pas), line = 767

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 768

	lda adr.WALL,y
	cmp #$0A
	jeq l_0638
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_0638

; optimize OK (service.pas), line = 770

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 771

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 772

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 774

	lda #$00
	sta Y

l_0668
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_0676

; optimize OK (service.pas), line = 776

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 779

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_0668
l_0676
l_0618

; optimize FAIL (0, service.pas), line = 783

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 784

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_06BD
	lda #$00
	sta SHINEREC.ACTIVE
l_06BD

; ------------------------------------------------------------

XB	= DATAORIGIN+$0201
YB	= DATAORIGIN+$0203
FRAME	= DATAORIGIN+$0205
XF	= DATAORIGIN+$0207
YF	= DATAORIGIN+$0209
FR	= DATAORIGIN+$020B
OG	= DATAORIGIN+$020D
Y	= DATAORIGIN+$020F
I	= DATAORIGIN+$0210

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 793

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 794

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 801

	lda SHINEREC.ACTIVE
	jeq l_06DD
	jsr UNSHINE_BLOCK
l_06DD

; optimize OK (service.pas), line = 803

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 804

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 805

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 806

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 807

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0211
YB	= DATAORIGIN+$0212

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 813

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_071E
	jsr SHINE_BLOCK
l_071E

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_0727

; optimize OK (service.pas), line = 821

	lda #$64
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 822

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 823

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_0735

; optimize FAIL (0, service.pas), line = 828

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 829

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 832

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_0735

; optimize OK (service.pas), line = 836

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_0727

; optimize OK (service.pas), line = 838

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0213
RN	= DATAORIGIN+$0215
SUM	= DATAORIGIN+$0217
LETTER	= DATAORIGIN+$0219

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 845

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 847

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta BLITLETTER.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITLETTER.DST+1
	lda #$00
	adc #$00
	sta BLITLETTER.DST+2
	lda #$00
	adc #$00
	sta BLITLETTER.DST+3
	lda LETTERS.OFS
	add FL
	sta BLITLETTER.SRC
	lda LETTERS.OFS+1
	adc FL+1
	sta BLITLETTER.SRC+1
	lda LETTERS.OFS+2
	adc #$00
	sta BLITLETTER.SRC+2
	lda LETTERS.OFS+3
	adc #$00
	sta BLITLETTER.SRC+3
	jsr BLITLETTER

; ------------------------------------------------------------

FL	= DATAORIGIN+$021B
FW	= DATAORIGIN+$021D

@VarData	= FL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 854

	ldy LETT.Y
	cpy #$C8
	jcs l_07A8

; optimize OK (service.pas), line = 856

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 858

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_07A8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 867

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 868

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 874

	lda LETT.ACTIVE
	jeq l_07E1
	jsr DISABLE_LETTER
l_07E1

; optimize OK (service.pas), line = 876

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 877

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 878

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 879

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 880

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 881

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$021F
YL	= DATAORIGIN+$0221
LETTER	= DATAORIGIN+$0223

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 887

	lda LETT.ACTIVE
	jeq l_0810

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 889

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 890

	inc LETT.Y

; optimize OK (service.pas), line = 891

	lda LETT.Y
	cmp #$C8
	jcc l_0828
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 892
	jmp l_0833
l_0828

; optimize FAIL ('PUT_LETTER', service.pas), line = 894

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 895

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 896

	lda LETT.SUBFRAME
	cmp #$05
	jne l_084A

; optimize OK (service.pas), line = 898

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 899

	inc LETT.FRAME
l_084A

; optimize OK (service.pas), line = 902

	lda LETT.FRAME
	cmp #$08
	jne l_0867
	lda #$00
	sta LETT.FRAME
l_0867

; optimize OK (service.pas), line = 904

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_08C0
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_08C0
	jeq l_08C0
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_08C0
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_08C0
	jeq l_08C0
@

; optimize OK (service.pas), line = 907

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 908

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 909

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0833

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 910

	jsr DISABLE_LETTER
l_08C0

; optimize OK (service.pas), line = 914

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_08E1
l_0810

; optimize OK (service.pas), line = 916

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_08F2

; optimize OK (service.pas), line = 917

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_08E1
l_08F2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 927

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0225	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0225
BTM.HEIGHT	= DATAORIGIN+$0227
BTM.OFS	= DATAORIGIN+$0229

@VarData	= BTM.WIDTH
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 947

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 949

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda BALLDATA.OFS
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$022D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 959

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 961

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0231
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 984

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 996

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0972s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0972s
	lda:sne #$01
l_0972s	lda #$00
	sta B0

; optimize OK (service.pas), line = 997

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_098As
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_098As
	lda:seq #$00
l_098As	lda #$01
	sta B1

; optimize OK (service.pas), line = 999

	lda B0
	and B1
	jeq l_099C

; optimize OK (service.pas), line = 1000

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_099C

; optimize OK (service.pas), line = 1002

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1004

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1005

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0235
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$0239
B1	= DATAORIGIN+$023A

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1018

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1019

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 1021

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex

; optimize OK (service.pas), line = 1022

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 1024

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1026

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta HLP
	lda SQRT32.RESULT+1
	sta HLP+1

; optimize OK (service.pas), line = 1028

	lda HLP
	sta :FPMAN0
	lda HLP+1
	sta :FPMAN1
	lda #$00
	sta :FPMAN2
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda SPEED
	sta :FPMAN0
	ldy #$00
	lda SPEED+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3

; optimize OK (service.pas), line = 1033

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1034

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1036

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0A0F
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_0A0F

; optimize OK (service.pas), line = 1037

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0A27
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_0A27

; ------------------------------------------------------------

BALL	= DATAORIGIN+$023B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
SPEED	= DATAORIGIN+$023F
SX	= DATAORIGIN+$0241
SY	= DATAORIGIN+$0243
VM	= DATAORIGIN+$0245
I	= DATAORIGIN+$0249
A	= DATAORIGIN+$024D
B	= DATAORIGIN+$024F

@VarData	= BALL
@VarDataSize	= 20

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1045

	lda ANGLE+1
	jpl l_0A43
	lda ANGLE
	add #$68
	sta ANGLE
	lda ANGLE+1
	adc #$01
	sta ANGLE+1
l_0A43

; --- WhileProlog
	jmp l_0A49
l_0A4A

; optimize OK (service.pas), line = 1047

	lda ANGLE
	sub #$68
	sta ANGLE
	lda ANGLE+1
	sbc #$01
	sta ANGLE+1
l_0A49
	lda ANGLE
	cmp #$68
	lda ANGLE+1
	sbc #$01
	svc
	eor #$80
	jpl l_0A4A

; optimize OK (service.pas), line = 1049

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add #$B4
	sta :bp2
	lda #$C4
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1050

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$C4
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0251
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
ANGLE	= DATAORIGIN+$0255

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1065

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0A80

; optimize OK (service.pas), line = 1067

	ldy #$00
	lda (:bp2),y
	jmi l_0A92

; optimize OK (service.pas), line = 1068

	lda #$A6
	sta W
	lda #$FF
	jmp l_0AA0
l_0A92

; optimize OK (service.pas), line = 1070

	lda #$5A
	sta W
	lda #$00
l_0AA0
	sta W+1
	jmp l_0AAD
l_0A80

; optimize OK (service.pas), line = 1078

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1080

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.VALUE
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.VALUE+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.VALUE+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$49
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1082

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1084

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0ADC
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0ADC

; optimize OK (service.pas), line = 1086

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01

; --- WhileProlog
	jmp l_0AE3
l_0AE4

; optimize OK (service.pas), line = 1089

	lda W
	sub #$68
	sta W
	lda W+1
	sbc #$01
l_0AE3
	sta W+1
	lda W
	cmp #$68
	lda W+1
	sbc #$01
	svc
	eor #$80
	jpl l_0AE4
l_0AAD

; optimize OK (service.pas), line = 1092

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0257
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
RESULT	= DATAORIGIN+$025B
W	= DATAORIGIN+$025D

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1101

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1107

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1112

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1113

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1115

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1117

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1118

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$025F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1B
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1130

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex

; optimize OK (service.pas), line = 1131

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 1133

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1135

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta RESULT
	lda SQRT32.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0263	; [28] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0263
BALL.Y	= DATAORIGIN+$0265
BALL.FINEX	= DATAORIGIN+$0267
BALL.FINEY	= DATAORIGIN+$0269
BALL.OLDX	= DATAORIGIN+$026B
BALL.OLDY	= DATAORIGIN+$026D
BALL.SPEED	= DATAORIGIN+$026F
BALL.FINESPEED	= DATAORIGIN+$0271
BALL.SPEEDX	= DATAORIGIN+$0273
BALL.SPEEDY	= DATAORIGIN+$0275
BALL.SBD	= DATAORIGIN+$0277
BALL.BRWHIT	= DATAORIGIN+$0279
BALL.INPLAY	= DATAORIGIN+$027A
BALL.LAUNCH	= DATAORIGIN+$027B
BALL.ONVAUS	= DATAORIGIN+$027C
BALL.STM	= DATAORIGIN+$027E
RESULT	= DATAORIGIN+$027F
I	= DATAORIGIN+$0281
A	= DATAORIGIN+$0285
B	= DATAORIGIN+$0287

@VarData	= BALL.X
@VarDataSize	= 36

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1153

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1154

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1156

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1157

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1159

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1160

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1165

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0BAD

; optimize OK (service.pas), line = 1167

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1168

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1169

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1170

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BAD

; optimize OK (service.pas), line = 1175

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0BE2

; optimize OK (service.pas), line = 1177

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1178

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1179

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1180

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BE2

; optimize OK (service.pas), line = 1185

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0C17

; optimize OK (service.pas), line = 1187

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1188

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1189

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1190

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0C17

; optimize OK (service.pas), line = 1198

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1199

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1200

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 1203

	lda B0
	and B1
	and B2
	jeq l_0C78

; optimize OK (service.pas), line = 1207

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0CA7
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0CA7

; optimize OK (service.pas), line = 1210

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1212

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1214

	lda VAUS.LETTER
	cmp #$06
	jne l_0CCF
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0CCF

; optimize OK (service.pas), line = 1216

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1217

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1218

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0CCF

; optimize OK (service.pas), line = 1221

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1225

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0CFF

; optimize OK (service.pas), line = 1228

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1232

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1240

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1245

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0CFF

; optimize OK (service.pas), line = 1251

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0D40

; optimize OK (service.pas), line = 1253

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1254

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1255

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1256

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0D40
l_0CA7
l_0C78

; optimize OK (service.pas), line = 1267

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0D8F

; optimize OK (service.pas), line = 1269

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1270

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0D8F

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0289
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$028D
B1	= DATAORIGIN+$028E
B2	= DATAORIGIN+$028F
X	= DATAORIGIN+$0290
Y	= DATAORIGIN+$0292
ANGLE	= DATAORIGIN+$0294

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1277

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1278

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1279

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1284

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1285

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1287

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1288

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1289

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1293

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1297

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1298

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1299

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1300

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1309

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1310

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1323

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1325

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1327

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1336

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1338

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0E2B

; optimize FAIL (0, service.pas), line = 1340

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1341

	lda #$00
	sta VAUS.IFLASH
l_0E2B

; optimize OK (service.pas), line = 1344

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0E48
	lda #$00
	sta VAUS.FLASH
l_0E48

; optimize OK (service.pas), line = 1354

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000150  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1360

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1362

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1364

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1365

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1391

	lda #$00
	sta I

l_0E9C
; --- ForToDoCondition
	lda I
	cmp Y
	scc
	jne l_0EAA
	ldy VAUS.FLASH
	lda adr.FLASH,y
	ldy I
	sta adr.SCR,y

; --- ForToDoEpilog
	inc I
	jne l_0E9C
l_0EAA

; optimize OK (service.pas), line = 1393

	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1394

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1395

	lda HLP
	sta :STACKORIGIN+11
	lda #$50
	add HLP+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	sub #$01
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda :STACKORIGIN+STACKWIDTH+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000151  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$0296
Y	= DATAORIGIN+$0297

@VarData	= I
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1410

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0F0F

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1411

	jsr REMOVE_VAUS
l_0F0F

; optimize OK (service.pas), line = 1413

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1414

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1421

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1422

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1424

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0298
Y	= DATAORIGIN+$029A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1439

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1440

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1442

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000152  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1448

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1449

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1451

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1452

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1455

	lda #$07
	sta Y

l_0F8E
; --- ForToDoCondition
	lda YS
	add Y
	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YH+1
	lda :eax
	sta YH

; optimize OK (service.pas), line = 1467

	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1469

	lda #$0F
	sta X

l_0FC3
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0FE9

; optimize OK (service.pas), line = 1476

	lda X
	adc I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1480

	lda X
	add XS
	tay
	lda adr.MODX,y
	add YH
	sta :STACKORIGIN+9
	lda #$00
	adc YH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1482

	lda X
	add I
	tay
	lda CL
	sta adr.SCR,y
l_0FE9

; --- ForToDoEpilog
	dec X
	jpl l_0FC3
l_0FD1

; --- ForToDoEpilog
	dec Y
	jpl l_0F8E
l_0F9C

; optimize OK (service.pas), line = 1494

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1496

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1497

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1506

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1508

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1509

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1511

	lda #$00
	sta I

; optimize OK (service.pas), line = 1514

	sta Y

l_1080
; --- ForToDoCondition
	lda Y
	cmp #$09
	jcs l_108E

; optimize OK (service.pas), line = 1517

	lda #$10
	sta X

l_1097
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_10C1

; optimize OK (service.pas), line = 1538

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	ora #$80
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_10C1

; --- ForToDoEpilog
	dec X
	jpl l_1097
l_10A5

; optimize OK (service.pas), line = 1548

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	inc Y
	jne l_1080
l_108E

; optimize OK (service.pas), line = 1552

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1554

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1555

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000153  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$029C
YA	= DATAORIGIN+$029D
X	= DATAORIGIN+$029E
Y	= DATAORIGIN+$029F
I	= DATAORIGIN+$02A0
XS	= DATAORIGIN+$02A1
YS	= DATAORIGIN+$02A2
YH	= DATAORIGIN+$02A3
CL	= DATAORIGIN+$02A5
SHADOW	= DATAORIGIN+$02A6

@VarData	= XA
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1575

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1576

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1578

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; -------------------  ASM Block 00000154  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1585

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1586

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1589

	lda #$07
	sta Y

l_1144
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1593

	lda #$0F
	sta X

l_1165
; --- ForToDoCondition
	lda X
	add I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1600

	lda Y
	cmp #$07
	jcs l_11A4
	lda X
	cmp #$0F
	jcs l_11A4

; optimize OK (service.pas), line = 1605

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1607

	lda X
	add I
	tay
	lda CL
	jmp l_11D8
l_11A4

; optimize OK (service.pas), line = 1618

	lda X
	add I
	tay
	lda SHADOW
l_11D8
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_1165
l_1173

; --- ForToDoEpilog
	dec Y
	jpl l_1144
l_1152

; optimize OK (service.pas), line = 1630

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1632

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1633

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1636

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1638

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1639

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1641

	lda #$00
	sta I

; optimize OK (service.pas), line = 1645

	sta Y

l_1236
; --- ForToDoCondition
	lda Y
	cmp #$09
	jcs l_1244

; optimize OK (service.pas), line = 1648

	lda #$10
	sta X

l_124D
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$08
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	jne l_1276
	lda :STACKORIGIN+STACKWIDTH*2+9
	jne l_1276
	lda :STACKORIGIN+STACKWIDTH+9
	jne l_1276
	lda :STACKORIGIN+9
	cmp #$D8
	jcs l_1276

; optimize OK (service.pas), line = 1658

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	and #$7F
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_1276

; --- ForToDoEpilog
	dec X
	jpl l_124D
l_125B

; optimize OK (service.pas), line = 1667

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	inc Y
	jne l_1236
l_1244

; optimize OK (service.pas), line = 1670

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1672

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1673

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1676

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; optimize OK (service.pas), line = 1678

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1679

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1682

	lda BLOCK
	cmp #$09
	jcc l_12E2

; optimize OK (service.pas), line = 1684

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1685

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_12FD

; optimize OK (service.pas), line = 1687

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1688

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_131C
l_12FD

; optimize OK (service.pas), line = 1694

	lda BLOCK
	cmp #$0A
	jne l_132E
	lda #$C9
	sta CL2
l_131C
l_132E

; optimize OK (service.pas), line = 1698

	lda #$06
	sta Y

l_133E
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1706

	tay
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1708

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1715

	sta adr.SCR,y

; --- ForToDoEpilog
	dec Y
	jpl l_133E
l_134C

; optimize OK (service.pas), line = 1721

	lda #$0E
	tay

l_138A
; --- ForToDoCondition
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1728

	lda CL2
	and #$7F
	ora CL
	sta adr.SCR,y

; --- ForToDoEpilog
	dey
	jpl l_138A
	sty X
l_12E2

; optimize OK (service.pas), line = 1739

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1741

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1742

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$02A7
YA	= DATAORIGIN+$02A8
BLOCK	= DATAORIGIN+$02A9
X	= DATAORIGIN+$02AA
Y	= DATAORIGIN+$02AB
I	= DATAORIGIN+$02AC
XS	= DATAORIGIN+$02AD
YS	= DATAORIGIN+$02AF
YH	= DATAORIGIN+$02B1
CL	= DATAORIGIN+$02B3
CL2	= DATAORIGIN+$02B4
SHADOW	= DATAORIGIN+$02B5

@VarData	= XA
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1757

	lda #$00
	sta Y

l_13E3
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13F1

; optimize OK (service.pas), line = 1759

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1761

	lda #$00
	sta X

l_1404
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1412

; optimize OK (service.pas), line = 1762

	adc I
	tay
	lda adr.WALL,y
	jeq l_142D
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_142D

; --- ForToDoEpilog
	inc X
	jne l_1404
l_1412

; --- ForToDoEpilog
	inc Y
	jne l_13E3
l_13F1

; ------------------------------------------------------------

X	= DATAORIGIN+$02B6
Y	= DATAORIGIN+$02B7
I	= DATAORIGIN+$02B8

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1773

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1774

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1777

	lda #$00
	sta Y

l_1467
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_1475

; optimize OK (service.pas), line = 1778

	lda #$00
	sta X

l_147E
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_148C

; optimize OK (service.pas), line = 1781

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_14C4
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_14C4
	inc REMAIN_BLK
l_14C4

; --- ForToDoEpilog
	inc X
	jne l_147E
l_148C

; --- ForToDoEpilog
	inc Y
	jne l_1467
l_1475

; optimize OK (service.pas), line = 1783

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1785

	sta @CASETMP_0008
	cmp #$00
	jne l_14EE
@

; optimize OK (service.pas), line = 1786

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_14EE
	cmp #$01
	jne l_14F7

; optimize OK (service.pas), line = 1787

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_14F7
	cmp #$02
	jne l_1500

; optimize OK (service.pas), line = 1788

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_1500
	cmp #$03
	jne l_1509

; optimize OK (service.pas), line = 1789

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1509
	cmp #$04
	jne l_1512

; optimize OK (service.pas), line = 1790

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_1512
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$02B9
Y	= DATAORIGIN+$02BA
WL	= DATAORIGIN+$02BB
@CASETMP_0008	= DATAORIGIN+$02BC

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1816

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1817

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1818

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1819

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1821

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1823

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1824

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1825

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1826

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1828

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1829

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1830

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1831

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1833

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1834

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1835

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1836

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1843

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_159B

; optimize OK (service.pas), line = 1844

	lda #$01
	jsr FATAL_ERROR
l_159B

; optimize OK (service.pas), line = 1847

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_15BEx
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15BE
l_15BEx

; optimize OK (service.pas), line = 1849

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15D1

; optimize OK (service.pas), line = 1851

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_15DE
l_15DF

; optimize OK (service.pas), line = 1855

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1856

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1858

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1860

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_1616

; optimize OK (service.pas), line = 1862

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1863

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_1616

; optimize OK (service.pas), line = 1866

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_1635

; optimize OK (service.pas), line = 1868

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1869

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_1635
l_15DE

; optimize OK (service.pas), line = 1853

	lda YN
	and #$07
	jeq l_15DFw
	lda YN
	and #$07
	cmp #$07
	jne l_15DF
l_15DFw
l_15D1

; optimize OK (service.pas), line = 1875

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_1674

; optimize OK (service.pas), line = 1877

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1681
l_1682

; optimize OK (service.pas), line = 1881

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1882

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1884

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1886

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_16B9

; optimize OK (service.pas), line = 1888

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1889

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_16B9

; optimize OK (service.pas), line = 1892

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_16D8

; optimize OK (service.pas), line = 1894

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1895

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_16D8
l_1681

; optimize OK (service.pas), line = 1879

	lda XJ
	and #$0F
	jeq l_1682w
	lda XJ
	and #$0F
	cmp #$0F
	jne l_1682
l_1682w
l_1674

; optimize OK (service.pas), line = 1906

	lda COLLISION
	cmp #$01
	jne l_1717
; optimize OK (service.pas), line = 1908
; optimize OK (service.pas), line = 1909
	jmp l_172B
l_1717

; optimize OK (service.pas), line = 1911

	lda COLLISION
	cmp #$02
	jne l_173D

; optimize OK (service.pas), line = 1913

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1914

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_1751
l_173D

; optimize OK (service.pas), line = 1916

	lda COLLISION
	cmp #$03
	jne l_1763

; optimize OK (service.pas), line = 1918

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1919

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_172B

; optimize OK (service.pas), line = 1920

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1921

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_1751
	sta (:bp2),y
l_1763
	jmp l_1783
l_15BE

; optimize OK (service.pas), line = 1926

	lda #$02
	jsr FATAL_ERROR
l_1783

; optimize OK (service.pas), line = 1929

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1930

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1931

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1932

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1935

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1936

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1943

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$02BD
Y1	= DATAORIGIN+$02BF
X2	= DATAORIGIN+$02C1
Y2	= DATAORIGIN+$02C3
RESULT	= DATAORIGIN+$02C5
X	= DATAORIGIN+$02C6
Y	= DATAORIGIN+$02C8
XK	= DATAORIGIN+$02CA
YK	= DATAORIGIN+$02CC
XJ	= DATAORIGIN+$02CE
YJ	= DATAORIGIN+$02D0
XH	= DATAORIGIN+$02D2
YH	= DATAORIGIN+$02D4
XN	= DATAORIGIN+$02D6
YN	= DATAORIGIN+$02D8
XP1	= DATAORIGIN+$02DA
YP1	= DATAORIGIN+$02DC
XP2	= DATAORIGIN+$02DE
YP2	= DATAORIGIN+$02E0
XP	= DATAORIGIN+$02E2
YP	= DATAORIGIN+$02E4
COLLISION	= DATAORIGIN+$02E6

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1954

	lda #$0C
	cmp XB
	jcc l_17C3
	lda #$0E
	cmp YB
	jcc l_17C3

; optimize OK (service.pas), line = 1957

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1959

	tay
	lda adr.WALL,y
	jeq l_17E9

; optimize OK (service.pas), line = 1961

	cmp #$0A
	jcs l_17FF

; optimize OK (service.pas), line = 1963

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1964

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1968

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1970

	lda #$2C
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc #$00
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1972

	lda XB
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1973

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1974

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1976

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1977

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1978

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1979

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1857
l_17FF

; optimize OK (service.pas), line = 1984

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1870

; optimize OK (service.pas), line = 1986

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1987

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1989

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1990

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_188C
l_1870

; optimize OK (service.pas), line = 1994

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1995

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1997

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_188C
l_1857
l_17E9
l_17C3

; ------------------------------------------------------------

XB	= DATAORIGIN+$02E7
YB	= DATAORIGIN+$02E8
BALL	= DATAORIGIN+$02E9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
I	= DATAORIGIN+$02ED

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 2008

	lda #$0C
	cmp XB
	jcc l_18BD
	lda #$0E
	cmp YB
	jcc l_18BD

; optimize OK (service.pas), line = 2011

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2013

	tay
	lda adr.WALL,y
	jeq l_18E3

; optimize OK (service.pas), line = 2015

	cmp #$0A
	jcs l_18F9

; optimize OK (service.pas), line = 2017

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2018

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2019

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2020

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2021

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1923
l_18F9

; optimize OK (service.pas), line = 2026

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_193C

; optimize OK (service.pas), line = 2028

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2029

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2030

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1954
l_193C

; optimize OK (service.pas), line = 2034

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2035

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1923
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1954
l_18E3
l_18BD

; ------------------------------------------------------------

XB	= DATAORIGIN+$02EE
YB	= DATAORIGIN+$02EF
I	= DATAORIGIN+$02F0

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2073

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2075

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2076

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2079

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2080

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2082

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2083

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2087

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_19BF

; optimize OK (service.pas), line = 2089

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2095

	cmp #$03
	jne l_19DA

; optimize OK (service.pas), line = 2097

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 2098

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 2100

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2101

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2103

	lda LX
	sta SYSTEM.ABS.@010184000.X
	lda LX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex
	lda LY
	sta SYSTEM.ABS.@010184000.X
	lda LY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 2105

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F1
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F1+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F1+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F1+3

; optimize OK (service.pas), line = 2107

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 2109

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F2
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F2+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F2+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F2+3

; optimize OK (service.pas), line = 2111

	lda F1+3
	cmp F2+3
	bne @+
	lda F1+2
	cmp F2+2
	bne @+
	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_1A63

; optimize OK (service.pas), line = 2117

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2118

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2121

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1AA1

; optimize OK (service.pas), line = 2123

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2124

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1AC9
l_1AA1

; optimize OK (service.pas), line = 2128

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2129

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1AC9
	jmp l_1ADC
l_1A63

; optimize OK (service.pas), line = 2139

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2140

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2142

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1B19

; optimize OK (service.pas), line = 2144

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2145

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2147

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2148

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1B19
l_1ADC
l_19DA

; optimize OK (service.pas), line = 2154

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2155

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2159

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2161

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2162

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2174

	lda X
	jeq l_1BAD
	cmp #$07
	jeq l_1BAD
	lda Y
	jeq l_1BAD
	cmp #$07
	jeq l_1BAD

; optimize OK (service.pas), line = 2175

	lda #$03
	jsr FATAL_ERROR
l_1BAD

; optimize OK (service.pas), line = 2190

	lda Y
	cmp X
	jcs l_1BD8
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1BD8

; optimize OK (service.pas), line = 2192

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2193

	lda #$01
	sta EMERGENCY
l_1BD8

; optimize OK (service.pas), line = 2197

	lda #$07
	sub Y
	cmp X
	jcs l_1C0D
	lda X
	cmp Y
	jcs l_1C0D

; optimize OK (service.pas), line = 2199

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2200

	lda #$03
	sta EMERGENCY
l_1C0D

; optimize OK (service.pas), line = 2204

	lda X
	cmp Y
	jcs l_1C42
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1C42

; optimize OK (service.pas), line = 2206

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2207

	lda #$02
	sta EMERGENCY
l_1C42

; optimize OK (service.pas), line = 2211

	lda #$07
	sub X
	cmp Y
	jcs l_1C77
	lda Y
	cmp X
	jcs l_1C77

; optimize OK (service.pas), line = 2213

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2214

	lda #$04
	sta EMERGENCY
l_1C77

; optimize OK (service.pas), line = 2218

	lda X
	cmp Y
	jeq l_1CACx
	lda #$07
	sub Y
	cmp X
	jne l_1CAC
l_1CACx

; optimize OK (service.pas), line = 2220

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2221

	sta TOUCH

; optimize OK (service.pas), line = 2229

	lda X
	cmp #$05
	jcc l_1CC7
	lda TOUCH
	ora #$01
	sta TOUCH
l_1CC7

; optimize OK (service.pas), line = 2230

	lda Y
	cmp #$05
	jcc l_1CE6
	lda TOUCH
	ora #$02
	sta TOUCH
l_1CE6

; optimize OK (service.pas), line = 2239

	lda #$FF
	sta LX
	sta LX+1

l_1CFC
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D08

; optimize OK (service.pas), line = 2240

	lda #$FF
	sta LY
	sta LY+1

l_1D11
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D1D

; optimize FAIL (1, service.pas), line = 2242

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva XB :STACKORIGIN,x
	inx
	mva LX :STACKORIGIN,x
	mva LX+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta MIN.A
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.A+1
	dex
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2243

	lda YB
	add LY
	sta MY
	lda #$00
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2247

	lda XB
	add LX
	jmi l_1D76x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1D76x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1D76
l_1D76x

; optimize OK (service.pas), line = 2250

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$01
	jmp l_1D97
l_1D76

; optimize OK (service.pas), line = 2252

	lda LX
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add LY
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
l_1D97
	sta adr.ADJW,y

; --- ForToDoEpilog
	inc LY
	jne l_1D11
	inc LY+1
	jmp l_1D11
l_1D1D

; --- ForToDoEpilog
	inc LX
	jne l_1CFC
	inc LX+1
	jmp l_1CFC
l_1D08

; optimize OK (service.pas), line = 2271

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+$04
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$08
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$09
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$0A
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$06
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$02
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$01
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta AROUND

; optimize OK (service.pas), line = 2302

	lda TOUCH
	jne l_1E3E

; optimize OK (service.pas), line = 2304

	lda AROUND
	and #$83
	jne l_1E55
	lda #$11
	sta DEFLECT
l_1E55

; optimize OK (service.pas), line = 2305

	lda AROUND
	and #$83
	cmp #$01
	jne l_1E72
	lda #$33
	sta DEFLECT
l_1E72

; optimize OK (service.pas), line = 2306

	lda AROUND
	and #$83
	cmp #$02
	jne l_1E8F
	lda #$10
	sta DEFLECT
l_1E8F

; optimize OK (service.pas), line = 2307

	lda AROUND
	and #$83
	cmp #$03
	jne l_1EAC
	lda #$12
	sta DEFLECT
l_1EAC

; optimize OK (service.pas), line = 2308

	lda AROUND
	and #$83
	cmp #$80
	jne l_1EC9
	lda #$01
	sta DEFLECT
l_1EC9

; optimize OK (service.pas), line = 2309

	lda AROUND
	and #$83
	cmp #$81
	jne l_1EE6
	lda #$21
	sta DEFLECT
l_1EE6

; optimize OK (service.pas), line = 2310

	lda AROUND
	and #$83
	cmp #$82
	jne l_1F03
	lda #$11
	sta DEFLECT
l_1F03

; optimize OK (service.pas), line = 2312

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2313

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1E3E

; optimize OK (service.pas), line = 2318

	lda TOUCH
	cmp #$01
	jne l_1F33

; optimize OK (service.pas), line = 2320

	lda AROUND
	and #$0E
	jne l_1F4A
	lda #$21
	sta DEFLECT
l_1F4A

; optimize OK (service.pas), line = 2321

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1F67
	lda #$20
	sta DEFLECT
l_1F67

; optimize OK (service.pas), line = 2322

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1F84
	lda #$33
	sta DEFLECT
l_1F84

; optimize OK (service.pas), line = 2323

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1FA1
	lda #$22
	sta DEFLECT
l_1FA1

; optimize OK (service.pas), line = 2324

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1FBE
	lda #$01
	sta DEFLECT
l_1FBE

; optimize OK (service.pas), line = 2325

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1FDB
	lda #$21
	sta DEFLECT
l_1FDB

; optimize OK (service.pas), line = 2326

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1FF8
	lda #$11
	sta DEFLECT
l_1FF8

; optimize OK (service.pas), line = 2328

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2329

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1F33

; optimize OK (service.pas), line = 2332

	lda TOUCH
	cmp #$02
	jne l_2028

; optimize OK (service.pas), line = 2334

	lda AROUND
	and #$E0
	jne l_203F
	lda #$12
	sta DEFLECT
l_203F

; optimize OK (service.pas), line = 2335

	lda AROUND
	and #$E0
	cmp #$20
	jne l_205C
	lda #$10
	sta DEFLECT
l_205C

; optimize OK (service.pas), line = 2336

	lda AROUND
	and #$E0
	cmp #$40
	jne l_2079
	lda #$33
	sta DEFLECT
l_2079

; optimize OK (service.pas), line = 2337

	lda AROUND
	and #$E0
	cmp #$60
	jne l_2096
	lda #$11
	sta DEFLECT
l_2096

; optimize OK (service.pas), line = 2338

	lda AROUND
	and #$E0
	cmp #$80
	jne l_20B3
	lda #$02
	sta DEFLECT
l_20B3

; optimize OK (service.pas), line = 2339

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_20D0
	lda #$12
	sta DEFLECT
l_20D0

; optimize OK (service.pas), line = 2340

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_20ED
	lda #$22
	sta DEFLECT
l_20ED

; optimize OK (service.pas), line = 2342

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2343

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2028

; optimize OK (service.pas), line = 2346

	lda TOUCH
	cmp #$03
	jne l_211D

; optimize OK (service.pas), line = 2348

	lda AROUND
	and #$38
	jne l_2134
	lda #$22
	sta DEFLECT
l_2134

; optimize OK (service.pas), line = 2349

	lda AROUND
	and #$38
	cmp #$08
	jne l_2151
	lda #$02
	sta DEFLECT
l_2151

; optimize OK (service.pas), line = 2350

	lda AROUND
	and #$38
	cmp #$10
	jne l_216E
	lda #$33
	sta DEFLECT
l_216E

; optimize OK (service.pas), line = 2351

	lda AROUND
	and #$38
	cmp #$18
	jne l_218B
	lda #$12
	sta DEFLECT
l_218B

; optimize OK (service.pas), line = 2352

	lda AROUND
	and #$38
	cmp #$20
	jne l_21A8
	lda #$20
	sta DEFLECT
l_21A8

; optimize OK (service.pas), line = 2353

	lda AROUND
	and #$38
	cmp #$28
	jne l_21C5
	lda #$22
	sta DEFLECT
l_21C5

; optimize OK (service.pas), line = 2354

	lda AROUND
	and #$38
	cmp #$30
	jne l_21E2
	lda #$21
	sta DEFLECT
l_21E2

; optimize OK (service.pas), line = 2356

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2357

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_211D

; optimize OK (service.pas), line = 2363

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2364

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2366

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_2225
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_2225

; optimize OK (service.pas), line = 2367

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_2242
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2242

; optimize OK (service.pas), line = 2368

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_225C
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_225C

; optimize OK (service.pas), line = 2370

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_2278
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_2278

; optimize OK (service.pas), line = 2371

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2295
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2295

; optimize OK (service.pas), line = 2372

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_22AF
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_22AF
l_1CAC
l_19BF

; optimize OK (service.pas), line = 2382

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_22D0

; optimize OK (service.pas), line = 2385

	lda EMERGENCY
	cmp #$FF
	jne l_22E3
	lda #$04
	jsr FATAL_ERROR
l_22E3

; optimize OK (service.pas), line = 2387

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2413

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_22FC
@

; optimize OK (service.pas), line = 2416

	lda adr.ADJW+$04
	jne l_2313
	lda MIMAX
	and #$0F
	sta MIMAX
l_2313

; optimize OK (service.pas), line = 2417

	lda adr.ADJW+$01
	jne l_233B
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_233B
	jmp a_0009
l_22FC
	cmp #$06
	jne l_2353

; optimize OK (service.pas), line = 2421

	lda adr.ADJW+$01
	jne l_236A
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_236A

; optimize OK (service.pas), line = 2422

	lda adr.ADJW+$06
	jne l_2392
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_2392
	jmp a_0009
l_2353
	cmp #$07
	jne l_23AA

; optimize OK (service.pas), line = 2426

	lda adr.ADJW+$06
	jne l_23C1
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_23C1

; optimize OK (service.pas), line = 2427

	lda adr.ADJW+$09
	jne l_23E9
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_23E9
	jmp a_0009
l_23AA
	cmp #$08
	jne l_2401

; optimize OK (service.pas), line = 2431

	lda adr.ADJW+$09
	jne l_2418
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_2418

; optimize OK (service.pas), line = 2432

	lda adr.ADJW+$04
	jne l_2440
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_2440
l_2401
a_0009

; --- RepeatUntilProlog
l_2458

; optimize OK (service.pas), line = 2440

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	asl @
	tay
	lda adr.MUL90_16,y
	sta LX
	lda adr.MUL90_16+1,y
	sta LX+1

; optimize OK (service.pas), line = 2441

	lda MIMAX
	and #$0F
	asl @
	tay
	lda adr.MUL90_16,y
	sta MX
	lda adr.MUL90_16+1,y
	sta MX+1

; optimize OK (service.pas), line = 2443

	lda MX
	sub LX
	jsr RAND
	lda RAND.RESULT
	add LX
	sta ANGLE
	lda #$00
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2446

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2458

; optimize OK (service.pas), line = 2450

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda ANGLE
	sta SET_BALL_DIRECTION.ANGLE
	lda ANGLE+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2451

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2453

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_22D0

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02F1
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
adr.MUL90_16	= CODEORIGIN+$00B5
.var MUL90_16	= adr.MUL90_16 .word
X	= DATAORIGIN+$02F5
Y	= DATAORIGIN+$02F6
XB	= DATAORIGIN+$02F7
YB	= DATAORIGIN+$02F8
OX	= DATAORIGIN+$02F9
OY	= DATAORIGIN+$02FB
NX	= DATAORIGIN+$02FD
NY	= DATAORIGIN+$02FF
LX	= DATAORIGIN+$0301
LY	= DATAORIGIN+$0303
MX	= DATAORIGIN+$0305
MY	= DATAORIGIN+$0307
ANGLE	= DATAORIGIN+$0309
MYX	= DATAORIGIN+$030B
MYY	= DATAORIGIN+$030D
F1	= DATAORIGIN+$030F
F2	= DATAORIGIN+$0313
A	= DATAORIGIN+$0317
B	= DATAORIGIN+$0319
EMERGENCY	= DATAORIGIN+$031B
MIMAX	= DATAORIGIN+$031C
DEFLECT	= DATAORIGIN+$031D
AROUND	= DATAORIGIN+$031E
COLLISION	= DATAORIGIN+$031F
TOUCH	= DATAORIGIN+$0320
adr.ADJW	= [DATAORIGIN+$0321] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$0331

@VarData	= BALL
@VarDataSize	= 51

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2468

	lda #$00
	sta Y

l_24B6
; --- ForToDoCondition
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2474

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_24B6
l_24C4

; -------------------  ASM Block 00000156  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2486

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2487

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2490

	lda #$0A
	sta Y

l_24FA
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_2508

; optimize OK (service.pas), line = 2493

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2495

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$D8
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2496

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2498

	lda #$09
	sta X

l_252F
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_253D

; optimize OK (service.pas), line = 2502

	lda adr.MODX,y
	adc YB
	sta :STACKORIGIN+9
	lda #$00
	adc YB+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	sta CL

; optimize OK (service.pas), line = 2504

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2509

	lda Y
	cmp #$10
	jcc l_2570x
	lda X
	cmp #$12
	jcs l_2570
l_2570x
	lda #$00
	sta SHADOW
l_2570

; optimize OK (service.pas), line = 2514

	lda CL
	and #$7F
	ora SHADOW
	ldy X
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_252F
l_253D

; optimize OK (service.pas), line = 2518

	lda #$D8
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2519

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_24FA
l_2508

; -------------------  ASM Block 00000157  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PATT	= DATAORIGIN+$0332
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$0336
X	= DATAORIGIN+$0338
Y	= DATAORIGIN+$0339
CL	= DATAORIGIN+$033A
SHADOW	= DATAORIGIN+$033B

@VarData	= PATT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$033C
Y	= DATAORIGIN+$033E

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2570

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2572

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0340
Y	= DATAORIGIN+$0342
adr.SC	= [DATAORIGIN+$0344] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2617

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2618

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2620

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2622

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2623

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; -------------------  ASM Block 00000158  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2630

	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2633

	lda #$00
	sta W

l_25F9
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_2607

; optimize OK (service.pas), line = 2636

	lda #$00
	sta Y

l_2610
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_261E

; optimize OK (service.pas), line = 2639

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2641

	lda EXPLOSION.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda EXPLOSION.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda EXPLOSION.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda EXPLOSION.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2643

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2645

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2647

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_266B_0

l_266E
; --- ForToDoCondition
	lda @FORTMP_266B_0::#$00
	cmp X
	jcc l_267C

; optimize OK (service.pas), line = 2651

	lda W
	cmp #$06
	jeq l_269Dx
	ldy X
	lda adr.POM,y
	jne l_269D
l_269Dx
	jmp l_26A7
l_269D

; optimize OK (service.pas), line = 2660

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_26A7

; --- ForToDoEpilog
	inc X
	jne l_266E
l_267C

; optimize OK (service.pas), line = 2663

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_2610
l_261E

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2666

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 2667

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_25F9
l_2607

; -------------------  ASM Block 00000159  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2676

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2677

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2678

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$0359
A	= DATAORIGIN+$035B
B	= DATAORIGIN+$035D
W	= DATAORIGIN+$035F
X	= DATAORIGIN+$0360
Y	= DATAORIGIN+$0361

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2690

	jsr NOSOUND

; optimize OK (service.pas), line = 2691

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2692

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2698

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2701

	lda #$0B
	sta W

l_26F2
; --- ForToDoCondition
	lda #$0F
	sta Y

l_2709
; --- ForToDoCondition
	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2708

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2710

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2712

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2714

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2764_0

l_2767
; --- ForToDoCondition
	lda @FORTMP_2764_0::#$00
	cmp X
	jcc l_2775

; optimize OK (service.pas), line = 2716

	ldy X
	lda adr.POM,y
	jne l_278A
	jmp l_2794
l_278A

; optimize OK (service.pas), line = 2727

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2794

; --- ForToDoEpilog
	inc X
	jne l_2767
l_2775

; optimize OK (service.pas), line = 2730

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	dec Y
	jpl l_2709
l_2717

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2733

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	dec W
	jpl l_26F2
l_2700

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$0363
Y	= DATAORIGIN+$0364
W	= DATAORIGIN+$0365
Z	= DATAORIGIN+$0366
A	= DATAORIGIN+$0368
B	= DATAORIGIN+$036A

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_27BF

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 2837

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$C2
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2839

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0376

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_27BF

; optimize OK (service.pas), line = 2846

	lda #$00
	sta F

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2854

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2856

	ldy PY
	lda adr.ROW,y
	add PX
	sta HLP
	lda adr.ROW+256,y
	adc PX+1
	sta HLP+1

; optimize OK (service.pas), line = 2860

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27F1
l_27F2

; optimize OK (service.pas), line = 2862

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2863

	inc N1
l_27F1

; optimize OK (service.pas), line = 2861

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_27F2

; optimize OK (service.pas), line = 2865

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2866

	tya
	jeq l_281C
	lda #$01
	sta F
l_281C

; optimize OK (service.pas), line = 2867

	lda F
	jeq l_282F
	lda N1
	jmp l_283D
l_282F

; optimize OK (service.pas), line = 2868

	lda #$0A
l_283D
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2871

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2845
l_2846

; optimize OK (service.pas), line = 2873

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2874

	inc N1
l_2845

; optimize OK (service.pas), line = 2872

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_2846

; optimize OK (service.pas), line = 2876

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2877

	tya
	jeq l_2870
	lda #$01
	sta F
l_2870

; optimize OK (service.pas), line = 2878

	lda F
	jeq l_2883
	lda N1
	jmp l_2891
l_2883

; optimize OK (service.pas), line = 2879

	lda #$0A
l_2891
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2882

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2899
l_289A

; optimize OK (service.pas), line = 2884

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2885

	inc N1
l_2899

; optimize OK (service.pas), line = 2883

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_289A

; optimize OK (service.pas), line = 2887

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2888

	tya
	jeq l_28C4
	lda #$01
	sta F
l_28C4

; optimize OK (service.pas), line = 2889

	lda F
	jeq l_28D7
	lda N1
	jmp l_28E5
l_28D7

; optimize OK (service.pas), line = 2890

	lda #$0A
l_28E5
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2893

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_28ED
l_28EE

; optimize OK (service.pas), line = 2895

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2896

	inc N1
l_28ED

; optimize OK (service.pas), line = 2894

	lda SC+3
	jne l_28EE
	lda SC+2
	jne l_28EE
	lda SC+1
	jne l_28EE
	lda SC
	cmp #$64
	jcs l_28EE

; optimize OK (service.pas), line = 2898

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2899

	tya
	jeq l_2918
	lda #$01
	sta F
l_2918

; optimize OK (service.pas), line = 2900

	lda F
	jeq l_292B
	lda N1
	jmp l_2939
l_292B

; optimize OK (service.pas), line = 2901

	lda #$0A
l_2939
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2904

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2941
l_2942

; optimize OK (service.pas), line = 2906

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2907

	inc N1
l_2941

; optimize OK (service.pas), line = 2905

	lda SC+3
	jne l_2942
	lda SC+2
	jne l_2942
	lda SC+1
	jne l_2942
	lda SC
	cmp #$0A
	jcs l_2942

; optimize OK (service.pas), line = 2909

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2910

	tya
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2914

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000163  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PX	= DATAORIGIN+$036D
PY	= DATAORIGIN+$036F
SC	= DATAORIGIN+$0370
adr.MUL_6	= CODEORIGIN+$00D5
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$0374
F	= DATAORIGIN+$0375

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 2967

	dec LIVES

; -------------------  ASM Block 00000164  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2974

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2975

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2977

	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2980

	lda #$00
	sta CN

l_2986
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2994

; optimize OK (service.pas), line = 2982

	sta :ecx
	lda MINIVAUS.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda #$0B
	add :eax
	sta XL

; optimize OK (service.pas), line = 2984

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_29AE_0

l_29B1
; --- ForToDoCondition
	lda @FORTMP_29AE_0::#$00
	cmp Y
	jcc l_29BF

; optimize OK (service.pas), line = 2986

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda MINIVAUS.OFS
	add :eax
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda MINIVAUS.OFS+1
	adc :eax+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda MINIVAUS.OFS+2
	adc :eax+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda MINIVAUS.OFS+3
	adc :eax+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2988

	lda Y
	add #$C0
	sta YL

; optimize OK (service.pas), line = 2990

	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YP+1
	lda :eax
	sta YP

; optimize OK (service.pas), line = 2992

	ldy YL
	lda adr.ROW,y
	add XL
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2994

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2997

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2A0C_0

l_2A0F
; --- ForToDoCondition
	lda @FORTMP_2A0C_0::#$00
	cmp X
	jcc l_2A1D

; optimize OK (service.pas), line = 3000

	lda XL
	add X
	tay
	lda adr.MODX,y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 3004

	lda CN
	cmp LIVES
	jcs l_2A4F
	ldy X
	lda adr.POM,y
	jeq l_2A4F

; optimize OK (service.pas), line = 3012

	jmp l_2A65
l_2A4F

; optimize OK (service.pas), line = 3021

	ldy X
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 3024

	lda XP
	add YP
	sta :STACKORIGIN+9
	lda XP+1
	adc YP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 3030

	ldy X
l_2A65
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_2A0F
l_2A1D

; optimize OK (service.pas), line = 3034

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3035

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_29B1
l_29BF

; --- ForToDoEpilog
	inc CN
	jne l_2986
l_2994

; -------------------  ASM Block 00000165  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$0377
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$0378
Y	= DATAORIGIN+$0379
XL	= DATAORIGIN+$037A
YL	= DATAORIGIN+$037B
CN	= DATAORIGIN+$037C
XP	= DATAORIGIN+$037D
YP	= DATAORIGIN+$037F
SHADOW	= DATAORIGIN+$0381
CL	= DATAORIGIN+$0382

@VarData	= LIVES
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3052

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3054

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.W
	lda SHOOTS.WIDTH+1
	sta BLITZERO.W+1
	lda SHOOTS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3062

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3064

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda SHOOTS.WIDTH
	sta BLITBOX.W
	lda SHOOTS.WIDTH+1
	sta BLITBOX.W+1
	lda SHOOTS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3072

	lda FIRE.AVL
	jeq l_2B08

; optimize FAIL ('MOUSECLICK', service.pas), line = 3074

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2B28

; optimize OK (service.pas), line = 3076

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3077

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 3078

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3079

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3080

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2B28

; optimize OK (service.pas), line = 3083

	lda FIRE.SHOT
	jeq l_2B62

; optimize OK (service.pas), line = 3085

	lda FIRE.NW
	jeq l_2B6F
	jsr REMOVE_FIRE
l_2B6F

; optimize OK (service.pas), line = 3086

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3088

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3089

	cmp #$16
	jcs l_2B8A
	lda #$00
	sta FIRE.SHOT
	jmp l_2B98
l_2B8A

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3092

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3094

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_2BBF
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_2BBF

; optimize OK (service.pas), line = 3096

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3097

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3099

	lda FIRE.X
	add SHOOTS.WIDTH
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3100

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3102

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2C2Dx
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2C2D
l_2C2Dx

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3104

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3105

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3107

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3108

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2B98
l_2C2D
l_2BBF
l_2B62
l_2B08

; ------------------------------------------------------------

X1	= DATAORIGIN+$0385
X2	= DATAORIGIN+$0386
Y1	= DATAORIGIN+$0387
Y2	= DATAORIGIN+$0388

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3120

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3122

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3131

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 3133

	lda SCRFLUX
	jeq l_2C7C

; optimize OK (service.pas), line = 3136

	lda #$00
	sta Y

l_2C86
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_2C94

; optimize OK (service.pas), line = 3138

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2C86
l_2C94

; optimize FAIL (0, service.pas), line = 3140

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3141

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2CD3
	lda #$00
	sta SCRFLUXCNT
l_2CD3
l_2C7C

; ------------------------------------------------------------

Y	= DATAORIGIN+$0389
FX	= DATAORIGIN+$038A

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3152

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3153

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3155

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3157

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3158

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3159

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3161

	lda Z
	sta X
	add #$2C
	sta @FORTMP_2CFF_0

l_2D02
; --- ForToDoCondition
	lda @FORTMP_2CFF_0::#$00
	cmp X
	jcc l_2D10

; optimize FAIL ('WAIT_VBL', service.pas), line = 3163

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3165

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3166

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3167

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3168

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3169

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3171

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3173

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2D02
l_2D10

; ------------------------------------------------------------

X	= DATAORIGIN+$038B
Z	= DATAORIGIN+$038C

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3184

	lda VAUS.LETTER
	jmi l_2D58
	jeq l_2D58

; optimize OK (service.pas), line = 3186

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3187

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2D6F
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2D6F

; optimize OK (service.pas), line = 3188

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2D81
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2D81

; optimize OK (service.pas), line = 3189

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3190

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3191

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3192

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3194

	lda VAUS.LETTER
	cmp #$06
	jeq l_2DA6

; optimize OK (service.pas), line = 3196

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3197

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3198

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2DA6
l_2D58

; optimize OK (service.pas), line = 3202

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2DC2
@

; optimize OK (service.pas), line = 3205

	lda FIRE.SHOT
	jeq l_2DCE
	jsr REMOVE_FIRE
l_2DCE

; optimize OK (service.pas), line = 3206

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3207

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3208

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3209

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3210

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2DC2
	cmp #$02
	jne l_2DE8

; optimize OK (service.pas), line = 3214

	lda FIRE.SHOT
	jeq l_2DF4
	jsr REMOVE_FIRE
l_2DF4

; optimize OK (service.pas), line = 3215

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3216

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3217

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3218

	sta FIRE.AVL
	jmp a_000A
l_2DE8
	cmp #$03
	jne l_2E0A

; optimize OK (service.pas), line = 3222

	lda FIRE.SHOT
	jeq l_2E16
	jsr REMOVE_FIRE
l_2E16

; optimize OK (service.pas), line = 3223

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3224

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3225

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3226

	sta FIRE.AVL

; optimize OK (service.pas), line = 3227

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2E0A
	cmp #$04
	jne l_2E30

; optimize OK (service.pas), line = 3231

	lda FIRE.SHOT
	jeq l_2E3C
	jsr REMOVE_FIRE
l_2E3C

; optimize OK (service.pas), line = 3232

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3233

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3234
	jmp s_2E79
l_2E30
	cmp #$05
	jne l_2E4E

; optimize OK (service.pas), line = 3238

	lda FIRE.SHOT
	jeq l_2E5A
	jsr REMOVE_FIRE
l_2E5A

; optimize OK (service.pas), line = 3239

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3240

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3241

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3242

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3243

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2E79
; optimize OK (service.pas), line = 3244
	jmp s_2E97
l_2E4E
	cmp #$06
	jne l_2E80

; optimize OK (service.pas), line = 3248

	lda FIRE.SHOT
	jeq l_2E8C
	jsr REMOVE_FIRE
l_2E8C

; optimize OK (service.pas), line = 3249

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3250

	jsr MODIFY_VAUS
s_2E97
; optimize OK (service.pas), line = 3251
	jmp s_2EC7
l_2E80
	cmp #$07
	jne l_2E9E

; optimize OK (service.pas), line = 3255

	lda FIRE.SHOT
	jeq l_2EAA
	jsr REMOVE_FIRE
l_2EAA

; optimize OK (service.pas), line = 3256

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3257

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3258

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3259

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3260

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3261

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_2EC7

; optimize OK (service.pas), line = 3262

	lda #$00
	sta FIRE.AVL
l_2E9E
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$038E
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001B
B2	= DATAORIGIN+$0392
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001B
B3	= DATAORIGIN+$0396
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001B
X	= DATAORIGIN+$039A
@CASETMP_000A	= DATAORIGIN+$039C

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2ED5

; optimize OK (service.pas), line = 3275

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3276

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2ED5

; optimize OK (service.pas), line = 3278

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3279

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3281

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$039D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
TEMP	= DATAORIGIN+$03A1

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2F0F

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3313

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2F1E

; optimize OK (service.pas), line = 3316

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2F3B
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2F3B

; optimize OK (service.pas), line = 3317

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2F3B

; optimize OK (service.pas), line = 3319

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3320

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_2F1E

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0408
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3328

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2F5C

; optimize OK (service.pas), line = 3330

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3332

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_2F72
	jeq l_2F72

; optimize OK (service.pas), line = 3334

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3337

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$FF
	lda (:bp2),y
	sbc #$03
	svc
	eor #$80
	jpl l_2F88

; optimize OK (service.pas), line = 3339

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3340

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2F88
l_2F72

; optimize OK (service.pas), line = 3344

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3348

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2FB0
@
	ldy #$00
	lda (:bp2),y
	jpl l_2FB0
@

; optimize OK (service.pas), line = 3349

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2FB0
l_2F5C

; ------------------------------------------------------------

BALL	= DATAORIGIN+$040C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2F0F

; optimize OK (service.pas), line = 3357

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3358

	sta SCRFLUX

; optimize OK (service.pas), line = 3360

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3362

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3363

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3365

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3366

	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3369

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3372

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3376

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3382

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3383

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3384

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3387

	jsr PUT_WALL

; optimize OK (service.pas), line = 3394

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3395

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3398

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3399

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3402

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3403

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3406

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3410

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3415

	sta BALL0.STM

; optimize OK (service.pas), line = 3419

	lda #$E8
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda #$00
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3422

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3425

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3427

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3428

	jsr START_VAUS

; optimize OK (service.pas), line = 3429

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3430

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3431

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3432

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3433

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3440

	lda #$0F
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3442

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3445

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3447

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3448

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3450

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_3048
l_3049

; optimize FAIL ('WAIT_VBL', service.pas), line = 3454

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3463

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3468

	lda TRAINER
	jne l_305E
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_306C
l_305E

; optimize OK (service.pas), line = 3474

	lda TRAINER
	cmp #$01
	jne l_307E

; optimize FAIL (1, service.pas), line = 3475

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc BALL0.ONVAUS+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_306C
	jsr MOVE_VAUS
l_307E

; optimize OK (service.pas), line = 3480

	lda BALL0.LAUNCH
	cmp #$01
	jne l_30A0

; optimize FAIL (0, service.pas), line = 3482

	inc BALL0.STM

; optimize OK (service.pas), line = 3487

	lda BALL0.STM
	cmp #$FA
	jne l_30B7
	lda #$00
	sta BALL0.LAUNCH
l_30B7

; optimize OK (service.pas), line = 3490

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3493

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_30D1
	lda #$00
	sta BALL0.LAUNCH
l_30D1
	jmp l_30E1
l_30A0

; optimize OK (service.pas), line = 3501

	lda BALL0.INPLAY
	jeq l_30ED
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_30ED

; optimize OK (service.pas), line = 3502

	lda BALL1.INPLAY
	jeq l_30FF
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_30FF

; optimize OK (service.pas), line = 3503

	lda BALL2.INPLAY
	jeq l_3111
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3111
l_30E1

; optimize OK (service.pas), line = 3511

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3512

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3513

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3528

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3529

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3530

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3531

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3532

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3534

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_3149
	jsr VAUS_OUT
l_3149

; optimize OK (service.pas), line = 3536

	lda VAUS.LETTER
	cmp #$04
	jne l_315F

; optimize OK (service.pas), line = 3538

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3540

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3541

	mwy BALL2 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3543

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	lda GET_BALL_DIRECTION.RESULT
	sta T1
	lda GET_BALL_DIRECTION.RESULT+1
	sta T1+1

; optimize OK (service.pas), line = 3545

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3554

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3555

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3556

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3560

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3561

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3562

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3564

	lda #$00
	sta VAUS.LETTER
l_315F

; optimize OK (service.pas), line = 3568

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_31B5
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_31B5

; optimize OK (service.pas), line = 3572

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3574

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_31D3

; optimize OK (service.pas), line = 3576

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3578

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_31D3

; optimize OK (service.pas), line = 3584

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_31F6
	jeq l_31F6

; optimize OK (service.pas), line = 3587

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3589

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_31F6

; optimize OK (service.pas), line = 3596

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3597

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3598

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3639

	lda BALL0.INPLAY
	jne l_321C

; optimize OK (service.pas), line = 3641

	mwy BALL0 :bp2
	ldy #$1B
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3642

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3643

	sta BALL2.INPLAY
l_321C

; optimize OK (service.pas), line = 3647

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3649

	lda BALL0.INPLAY
	jeq l_3237
	inc BALLS_IN_PLAY
l_3237

; optimize OK (service.pas), line = 3650

	lda BALL1.INPLAY
	jeq l_324A
	inc BALLS_IN_PLAY
l_324A

; optimize OK (service.pas), line = 3651

	lda BALL2.INPLAY
	jeq l_325D
	inc BALLS_IN_PLAY
l_325D

; optimize OK (service.pas), line = 3654

	lda BALL0.INPLAY
	jne l_3273

; optimize OK (service.pas), line = 3656

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3657

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3658

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3659

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3660

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3668

	jsr NOSOUND
l_3273
l_3048

; optimize OK (service.pas), line = 3452

	lda REMAIN_BLK
	jeq l_3049w
	lda BALL0.INPLAY
	jeq l_3049w
	lda SCORE.ABORTPLAY
	jeq l_3049
l_3049w

; optimize OK (service.pas), line = 3724

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3725

	lda REMAIN_BLK
	jne l_32C1
	lda #$01
	sta RESULT
l_32C1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03A3
X	= DATAORIGIN+$03A4
Y	= DATAORIGIN+$03A6
KEY	= DATAORIGIN+$03A8
T1	= DATAORIGIN+$03AA
T2	= DATAORIGIN+$03AC
HLP	= DATAORIGIN+$03AE
adr.BALL0	= DATAORIGIN+$03B0	; [28] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$03B0
BALL0.Y	= DATAORIGIN+$03B2
BALL0.FINEX	= DATAORIGIN+$03B4
BALL0.FINEY	= DATAORIGIN+$03B6
BALL0.OLDX	= DATAORIGIN+$03B8
BALL0.OLDY	= DATAORIGIN+$03BA
BALL0.SPEED	= DATAORIGIN+$03BC
BALL0.FINESPEED	= DATAORIGIN+$03BE
BALL0.SPEEDX	= DATAORIGIN+$03C0
BALL0.SPEEDY	= DATAORIGIN+$03C2
BALL0.SBD	= DATAORIGIN+$03C4
BALL0.BRWHIT	= DATAORIGIN+$03C6
BALL0.INPLAY	= DATAORIGIN+$03C7
BALL0.LAUNCH	= DATAORIGIN+$03C8
BALL0.ONVAUS	= DATAORIGIN+$03C9
BALL0.STM	= DATAORIGIN+$03CB
adr.BALL1	= DATAORIGIN+$03CC	; [28] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$03CC
BALL1.Y	= DATAORIGIN+$03CE
BALL1.FINEX	= DATAORIGIN+$03D0
BALL1.FINEY	= DATAORIGIN+$03D2
BALL1.OLDX	= DATAORIGIN+$03D4
BALL1.OLDY	= DATAORIGIN+$03D6
BALL1.SPEED	= DATAORIGIN+$03D8
BALL1.FINESPEED	= DATAORIGIN+$03DA
BALL1.SPEEDX	= DATAORIGIN+$03DC
BALL1.SPEEDY	= DATAORIGIN+$03DE
BALL1.SBD	= DATAORIGIN+$03E0
BALL1.BRWHIT	= DATAORIGIN+$03E2
BALL1.INPLAY	= DATAORIGIN+$03E3
BALL1.LAUNCH	= DATAORIGIN+$03E4
BALL1.ONVAUS	= DATAORIGIN+$03E5
BALL1.STM	= DATAORIGIN+$03E7
adr.BALL2	= DATAORIGIN+$03E8	; [28] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$03E8
BALL2.Y	= DATAORIGIN+$03EA
BALL2.FINEX	= DATAORIGIN+$03EC
BALL2.FINEY	= DATAORIGIN+$03EE
BALL2.OLDX	= DATAORIGIN+$03F0
BALL2.OLDY	= DATAORIGIN+$03F2
BALL2.SPEED	= DATAORIGIN+$03F4
BALL2.FINESPEED	= DATAORIGIN+$03F6
BALL2.SPEEDX	= DATAORIGIN+$03F8
BALL2.SPEEDY	= DATAORIGIN+$03FA
BALL2.SBD	= DATAORIGIN+$03FC
BALL2.BRWHIT	= DATAORIGIN+$03FE
BALL2.INPLAY	= DATAORIGIN+$03FF
BALL2.LAUNCH	= DATAORIGIN+$0400
BALL2.ONVAUS	= DATAORIGIN+$0401
BALL2.STM	= DATAORIGIN+$0403
SCORES	= DATAORIGIN+$0404

@VarData	= X
@VarDataSize	= 100

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3748

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3806

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0410
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0412
Y	= DATAORIGIN+$0414
ST	= DATAORIGIN+$0416
OLDX	= DATAORIGIN+$0418
OLDY	= DATAORIGIN+$041A
NEWX	= DATAORIGIN+$041C
NEWY	= DATAORIGIN+$041E

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3815

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3817

	lda #$01
	sta X

l_32E6
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_32F4

; optimize OK (service.pas), line = 3819

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3820

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3821

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3822

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3824

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_32E6
l_32F4

; optimize OK (service.pas), line = 3827

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0420

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3887

	jsr NOSOUND

; optimize OK (service.pas), line = 3888

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3899

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3937

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0421
X	= DATAORIGIN+$0423
Y	= DATAORIGIN+$0425
Z	= DATAORIGIN+$0427
K	= DATAORIGIN+$0429
IK	= DATAORIGIN+$042B

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3945

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3946

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3353
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3353

; optimize OK (service.pas), line = 3949

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3950

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3954

	jsr SET_WALL

; optimize OK (service.pas), line = 3956

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3957

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3964

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3965

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3966

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_3382

; --- RepeatUntilProlog
l_3383

; optimize OK (service.pas), line = 3976

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_3395

; optimize FAIL (1, service.pas), line = 3978

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 3981

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3985

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_3395

; optimize OK (service.pas), line = 3989

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3990

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 3995

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 3998

	jeq l_33E3

; optimize OK (service.pas), line = 4001

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4004

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_33FF

; optimize OK (service.pas), line = 4005

	lda #$01
	sta adr.SCORE.WALL_N,y
l_33FF

; optimize OK (service.pas), line = 4008

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_3431
l_33E3

; optimize OK (service.pas), line = 4014

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3446
	jsr GAME_OVER
l_3431
l_3446

; optimize OK (service.pas), line = 4019

	lda NWALL
	jne l_3383

; optimize FAIL (0, service.pas), line = 4022

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4023

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_346E
	lda #$01
	sta CUR_PLAYER
l_346E

; optimize OK (service.pas), line = 4029

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_348A
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_348A

; optimize OK (service.pas), line = 4034

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_3382

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$042D
NWALL	= DATAORIGIN+$042F

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 167

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 169

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 170

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$5E
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$58
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$52
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$64
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SHINEWALL.OFS
	lda #$83
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$9D
	sta MINIVAUS.OFS
	lda #$88
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$01
	sta LEVELSEL.OFS
	lda #$89
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$CC
	sta LETTERS.OFS
	lda #$90
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$CC
	sta NORMAL.OFS
	lda #$AC
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$AC
	sta LASERS.OFS
	lda #$AD
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$8C
	sta ENLARGED.OFS
	lda #$AE
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$4C
	sta SHOOTS.OFS
	lda #$B0
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$B4
	sta FLUX.OFS
	lda #$B0
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$FC
	sta BALLDATA.OFS
	lda #$B1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$15
	sta PATTERN0.OFS
	lda #$B2
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$85
	sta PATTERN1.OFS
	lda #$B4
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$49
	sta PATTERN2.OFS
	lda #$B5
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$7B
	sta PATTERN3.OFS
	lda #$BA
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$A7
	sta PATTERN4.OFS
	lda #$BD
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 177

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 179

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 182

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 183

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_35B4

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 190

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 192

	jeq l_35CA
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_35CA

; optimize OK (arkanoid_vbxe.pas), line = 195

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_35B4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 203

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $15E00
VBXE_DIGIT	= $3C200
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.VBXE_RAM	= DATAORIGIN+$008F	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$008F
VBXE_RAM.SIZE	= DATAORIGIN+$0093
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$005E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0069
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$007F
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0088
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0092
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0096
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00A1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00AD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00B4	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00B4
BALLDATA.HEIGHT	= DATAORIGIN+$00B6
BALLDATA.OFS	= DATAORIGIN+$00B8
adr.PLAYSCREEN	= DATAORIGIN+$00BC	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00BC
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00BE
PLAYSCREEN.OFS	= DATAORIGIN+$00C0
adr.PLAYVAUS	= DATAORIGIN+$00C4	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00C4
PLAYVAUS.HEIGHT	= DATAORIGIN+$00C6
PLAYVAUS.OFS	= DATAORIGIN+$00C8
adr.NORMAL	= DATAORIGIN+$00CC	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00CC
NORMAL.HEIGHT	= DATAORIGIN+$00CE
NORMAL.OFS	= DATAORIGIN+$00D0
adr.ENLARGED	= DATAORIGIN+$00D4	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00D4
ENLARGED.HEIGHT	= DATAORIGIN+$00D6
ENLARGED.OFS	= DATAORIGIN+$00D8
adr.LASERS	= DATAORIGIN+$00DC	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00DC
LASERS.HEIGHT	= DATAORIGIN+$00DE
LASERS.OFS	= DATAORIGIN+$00E0
adr.EXPLOSION	= DATAORIGIN+$00E4	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00E4
EXPLOSION.HEIGHT	= DATAORIGIN+$00E6
EXPLOSION.OFS	= DATAORIGIN+$00E8
adr.NEWVAUS	= DATAORIGIN+$00EC	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00EC
NEWVAUS.HEIGHT	= DATAORIGIN+$00EE
NEWVAUS.OFS	= DATAORIGIN+$00F0
adr.PRESENTS	= DATAORIGIN+$00F4	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$00F4
PRESENTS.HEIGHT	= DATAORIGIN+$00F6
PRESENTS.OFS	= DATAORIGIN+$00F8
adr.SHINEWALL	= DATAORIGIN+$00FC	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$00FC
SHINEWALL.HEIGHT	= DATAORIGIN+$00FE
SHINEWALL.OFS	= DATAORIGIN+$0100
adr.MINIVAUS	= DATAORIGIN+$0104	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0104
MINIVAUS.HEIGHT	= DATAORIGIN+$0106
MINIVAUS.OFS	= DATAORIGIN+$0108
adr.LEVELSEL	= DATAORIGIN+$010C	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$010C
LEVELSEL.HEIGHT	= DATAORIGIN+$010E
LEVELSEL.OFS	= DATAORIGIN+$0110
adr.LETTERS	= DATAORIGIN+$0114	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0114
LETTERS.HEIGHT	= DATAORIGIN+$0116
LETTERS.OFS	= DATAORIGIN+$0118
adr.SHOOTS	= DATAORIGIN+$011C	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$011C
SHOOTS.HEIGHT	= DATAORIGIN+$011E
SHOOTS.OFS	= DATAORIGIN+$0120
adr.FLUX	= DATAORIGIN+$0124	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0124
FLUX.HEIGHT	= DATAORIGIN+$0126
FLUX.OFS	= DATAORIGIN+$0128
adr.VAUS	= DATAORIGIN+$012C	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$012C
VAUS.Y	= DATAORIGIN+$012D
VAUS.OLDX	= DATAORIGIN+$012E
VAUS.OLDY	= DATAORIGIN+$0130
VAUS.OLDLEN	= DATAORIGIN+$0132
VAUS.WIDTH	= DATAORIGIN+$0134
VAUS.HEIGHT	= DATAORIGIN+$0135
VAUS.FLASH	= DATAORIGIN+$0136
VAUS.IFLASH	= DATAORIGIN+$0137
VAUS.LETTER	= DATAORIGIN+$0138
adr.PATTERN	= DATAORIGIN+$0139	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0139
PATTERN.HEIGHT	= DATAORIGIN+$013B
PATTERN.OFS	= DATAORIGIN+$013D
adr.PATTERN0	= DATAORIGIN+$0141	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0141
PATTERN0.HEIGHT	= DATAORIGIN+$0143
PATTERN0.OFS	= DATAORIGIN+$0145
adr.PATTERN1	= DATAORIGIN+$0149	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$0149
PATTERN1.HEIGHT	= DATAORIGIN+$014B
PATTERN1.OFS	= DATAORIGIN+$014D
adr.PATTERN2	= DATAORIGIN+$0151	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0151
PATTERN2.HEIGHT	= DATAORIGIN+$0153
PATTERN2.OFS	= DATAORIGIN+$0155
adr.PATTERN3	= DATAORIGIN+$0159	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$0159
PATTERN3.HEIGHT	= DATAORIGIN+$015B
PATTERN3.OFS	= DATAORIGIN+$015D
adr.PATTERN4	= DATAORIGIN+$0161	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0161
PATTERN4.HEIGHT	= DATAORIGIN+$0163
PATTERN4.OFS	= DATAORIGIN+$0165
STATUS	= DATAORIGIN+$0169
SUCCESS	= DATAORIGIN+$016A
REMAIN_BLK	= DATAORIGIN+$016B
TOTALWALL	= DATAORIGIN+$016C
adr.SCORE	= DATAORIGIN+$016D	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$016D] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$0179] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$017C] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$017F
SCORE.PL_NUMB	= DATAORIGIN+$0183
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0184] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$0187
CUR_PLAYER	= DATAORIGIN+$0188
adr.SHINEREC	= DATAORIGIN+$0189	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$0189
SHINEREC.YB	= DATAORIGIN+$018A
SHINEREC.FRAME	= DATAORIGIN+$018B
SHINEREC.BLOCK	= DATAORIGIN+$018C
SHINEREC.ACTIVE	= DATAORIGIN+$018D
LV	= DATAORIGIN+$018E
TRAINER	= DATAORIGIN+$0190
adr.LETT	= DATAORIGIN+$0191	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$0191
LETT.Y	= DATAORIGIN+$0192
LETT.TYP	= DATAORIGIN+$0193
LETT.FRAME	= DATAORIGIN+$0195
LETT.SUBFRAME	= DATAORIGIN+$0196
LETT.ACTIVE	= DATAORIGIN+$0197
LETT.INCOMING	= DATAORIGIN+$0198
LETT.NEXTX	= DATAORIGIN+$019A
LETT.NEXTY	= DATAORIGIN+$019C
LETT.NEXTTYPE	= DATAORIGIN+$019E
LETT.LAST	= DATAORIGIN+$01A0
adr.FIRE	= DATAORIGIN+$01A2	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01A2
FIRE.Y	= DATAORIGIN+$01A3
FIRE.SHOT	= DATAORIGIN+$01A4
FIRE.AVL	= DATAORIGIN+$01A5
FIRE.NW	= DATAORIGIN+$01A6
BALLS_IN_PLAY	= DATAORIGIN+$01A7
SCRFLUX	= DATAORIGIN+$01A8
SCRFLUXCNT	= DATAORIGIN+$01A9
SOUND_ON	= DATAORIGIN+$01AA
OLD_SCORES	= DATAORIGIN+$01AB
HLP	= DATAORIGIN+$01AF
F_HLP	= DATAORIGIN+$01B1
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.MODY	= $0500
.var MODY	= adr.MODY .word
adr.MODX	= $0600
.var MODX	= adr.MODX .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD90TABLE	= $C200
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD10TABLE	= $C300
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.SINTABLE	= $C400
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $27
.by  $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1072

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $00 $5A  $00 $B4 $00 $0E $01 $68 $01 $C2
.by  $01 $1C $02 $76 $02 $D0 $02 $2A  $03 $84 $03 $DE $03 $38 $04 $92  $04 $EC $04 $46 $05 $00 $06 $0C
.by  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
