; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/30] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'mod90table.obx' adr.MOD90TABLE 0 0 0 0 0 0 0 0
	RCDATA 'mod10table.obx' adr.MOD10TABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010183000
	sta X

; -------------------  ASM Block 00000007  -------------------

	lda :edx
	bpl @+

	eor #$ff
	add #1
@
	sta Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 935

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 936

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 937

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 939

	lda VALUE+3
	bne @+
	lda VALUE+2
	bne @+
	lda VALUE+1
	bne @+
	lda VALUE
@
	jne l_0052

; optimize OK (SYSTEM), line = 940

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0052

; optimize OK (SYSTEM), line = 943

	lda X+3
	jpl l_0070

; optimize OK (SYSTEM), line = 944

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 945

	lda X+3
	eor #$80
	sta X+3
l_0070
l_0060

; optimize OK (SYSTEM), line = 948

	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 949

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta Y
	lda :FPMAN1
	sta Y+1
	lda :FPMAN2
	sta Y+2
	lda :FPMAN3
	sta Y+3

; optimize OK (SYSTEM), line = 950

	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	lda #$4A
	sta :FP1MAN0
	lda #$D7
	sta :FP1MAN1
	lda #$3B
	sta :FP1MAN2
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$02
	sta :FP2MAN0
	lda #$6E
	sta :FP2MAN1
	lda #$84
	sta :FP2MAN2
	lda #$3C
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$FE
	sta :FP2MAN0
	lda #$C1
	sta :FP2MAN1
	lda #$2F
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$74
	sta :FP2MAN0
	lda #$31
	sta :FP2MAN1
	lda #$9A
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$83
	sta :FP2MAN0
	lda #$3D
	sta :FP2MAN1
	lda #$DA
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$C7
	sta :FP2MAN0
	lda #$7F
	sta :FP2MAN1
	lda #$11
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$E5
	sta :FP2MAN0
	lda #$BB
	sta :FP2MAN1
	lda #$4C
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$6C
	sta :FP2MAN0
	lda #$AA
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 953

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 955

	lda SIGN
	jeq l_00F2

; optimize OK (SYSTEM), line = 956

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
	eor #$80
	jmp l_0103
l_00F2

; optimize OK (SYSTEM), line = 958

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0103
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
X	= DATAORIGIN+$0013
Y	= DATAORIGIN+$0017
SIGN	= DATAORIGIN+$001B

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000021  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000045  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$001C
RESULT	= DATAORIGIN+$001D

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_017F

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_018D
l_017F

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000046  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_018D
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$001E
RESULT	= DATAORIGIN+$0020

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0022
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$0023
GETCOLOR	= DATAORIGIN+$0024
VIDEORAM	= DATAORIGIN+$0025
adr.LASTARCCOORDS	= DATAORIGIN+$0027	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0027
LASTARCCOORDS.Y	= DATAORIGIN+$0029
LASTARCCOORDS.XSTART	= DATAORIGIN+$002B
LASTARCCOORDS.YSTART	= DATAORIGIN+$002D
LASTARCCOORDS.XEND	= DATAORIGIN+$002F
LASTARCCOORDS.YEND	= DATAORIGIN+$0031
WIN_LEFT	= DATAORIGIN+$0033
WIN_RIGHT	= DATAORIGIN+$0035
WIN_TOP	= DATAORIGIN+$0037
WIN_BOTTOM	= DATAORIGIN+$0039
SCANLINE_WIDTH	= DATAORIGIN+$003B
CURRENTX	= DATAORIGIN+$003C
CURRENTY	= DATAORIGIN+$003E

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
	sta B

; -------------------  ASM Block 00000109  -------------------

	fxs FX_MEMS b

; ------------------------------------------------------------

B	= DATAORIGIN+$0054

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITEVBXEMEMORYBYTE				; PROCEDURE

; optimize OK (vbxe_memorystream.inc), line = 39

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 40

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 42

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 44

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda A
	sta (:bp),y

; optimize OK (vbxe_memorystream.inc), line = 46

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$0055
A	= DATAORIGIN+$0057
BNK	= DATAORIGIN+$0058
ADR	= DATAORIGIN+$0059

@VarData	= POSITION
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 200

	lda POSITION
	sta WRITEVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta WRITEVBXEMEMORYBYTE.POSITION+1
	lda B
	sta WRITEVBXEMEMORYBYTE.A
	jsr WRITEVBXEMEMORYBYTE

; optimize OK (vbxe_memorystream.inc), line = 202

	lda #$00
	jsr VBXEMEMORYBANK

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0077
B	= DATAORIGIN+$0079
POSITION	= DATAORIGIN+$007A
SIZE	= DATAORIGIN+$007C

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0086
POSITION	= DATAORIGIN+$0088
SIZE	= DATAORIGIN+$008A
ADR	= DATAORIGIN+$008C
SIZ	= DATAORIGIN+$0090

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_02AC
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_02AC
	cmp #$1F
	jne l_02BB

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_02BB
	cmp #$18
	jne l_02CA

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_02CA

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0094
S	= DATAORIGIN+$0095
@CASETMP_0005	= DATAORIGIN+$0097

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0098

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0099
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$009D

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$004C	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$004C
VRAM.SIZE	= DATAORIGIN+$0050
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00A6

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00A8
B	= DATAORIGIN+$00AA

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------

; N = hi:lo (16-bit)
; N mod 90 -> A

    LDY a+1
    LDA Mod90Table,Y   ; tablica: (X*256) mod 90
    CLC
    ADC a              ; dodaj młodszy bajt
    CMP #90
    BCC done
    SBC #90
    CMP #90
    BCC done
    SBC #90            ; max 2 odejmowania bo 256 < 3*90
done:
    ; A = reszta mod 90

    sta Result

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$00AC
RESULT	= DATAORIGIN+$00AE

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	SQRT32						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 103

	lda #$00
	sta Q
	sta Q+1
	sta Q+2
	sta Q+3

; optimize OK (arkanoid_vbxe.pas), line = 104

	sta B
	sta B+1
	sta B+2
	lda #$40

; --- WhileProlog
	jmp l_030E
l_030F

; optimize OK (arkanoid_vbxe.pas), line = 106

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
l_030E
	sta B+3
	cmp R+3
	bne @+
	lda B+2
	cmp R+2
	bne @+
	lda B+1
	cmp R+1
	bne @+
	lda B
	cmp R
@
	beq @+
	jcs l_030F
@

; --- WhileProlog
	jmp l_0323
l_0324

; optimize OK (arkanoid_vbxe.pas), line = 109

	lda Q
	add B
	sta T
	lda Q+1
	adc B+1
	sta T+1
	lda Q+2
	adc B+2
	sta T+2
	lda Q+3
	adc B+3
	sta T+3

; optimize OK (arkanoid_vbxe.pas), line = 111

	lsr Q+3
	ror Q+2
	ror Q+1
	ror Q

; optimize OK (arkanoid_vbxe.pas), line = 113

	lda R+3
	cmp T+3
	bne @+
	lda R+2
	cmp T+2
	bne @+
	lda R+1
	cmp T+1
	bne @+
	lda R
	cmp T
@
	jcc l_0344

; optimize OK (arkanoid_vbxe.pas), line = 114

	lda R
	sbc T
	sta R
	lda R+1
	sbc T+1
	sta R+1
	lda R+2
	sbc T+2
	sta R+2
	lda R+3
	sbc T+3
	sta R+3

; optimize OK (arkanoid_vbxe.pas), line = 115

	lda Q
	add B
	sta Q
	lda Q+1
	adc B+1
	sta Q+1
	lda Q+2
	adc B+2
	sta Q+2
	lda Q+3
	adc B+3
	sta Q+3
l_0344

; optimize OK (arkanoid_vbxe.pas), line = 118

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta B+3
l_0323

; optimize OK (arkanoid_vbxe.pas), line = 108

	lda B+3
	cmp #$00
	bne @+
	lda B+2
	cmp #$00
	bne @+
	lda B+1
	cmp #$00
	bne @+
	lda B
	cmp #$00
@
	beq @+
	jcs l_0324
@

; optimize OK (arkanoid_vbxe.pas), line = 122

	lda Q
	sta RESULT
	lda Q+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

R	= DATAORIGIN+$00AF
RESULT	= DATAORIGIN+$00B3
B	= DATAORIGIN+$00B5
Q	= DATAORIGIN+$00B9
T	= DATAORIGIN+$00BD

@VarData	= R
@VarDataSize	= 16

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 306

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 308

	sta @CASETMP_0007
	cmp #$0B
	jne l_0386
@

; optimize OK (service.pas), line = 309

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0397
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_0397
	jmp a_0007
l_0386
	cmp #$07
	jne l_03A2

; optimize OK (service.pas), line = 310

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_03B3
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_03B3
l_03A2
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$01C2
A	= DATAORIGIN+$01C4
@CASETMP_0007	= DATAORIGIN+$01C5

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 319

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01C6

	rts						; ret
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@0201810000181000

; optimize OK (service.pas), line = 327

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 328

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= DATAORIGIN+$01C7
DWIDTH	= DATAORIGIN+$01C9

@VarData	= SWIDTH
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 337

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 338

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 339

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 341

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 342

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 343

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 345

	lda #$00
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 347

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 349

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 351

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01CB
DST	= DATAORIGIN+$01CF
W	= DATAORIGIN+$01D3
H	= DATAORIGIN+$01D5

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITLETTER					; PROCEDURE

; -------------------  ASM Block 00000138  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 363

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 364

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 365

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 367

	lda DST+2
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 368

	lda DST+1
	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 369

	lda DST
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000139  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 375

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01D6
DST	= DATAORIGIN+$01DA

@VarData	= SRC
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 387

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 388

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 389

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 391

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 392

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 393

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 395

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 396

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 398

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 399

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 401

	lda #$00
	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 407

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01DE
DST	= DATAORIGIN+$01E2
W	= DATAORIGIN+$01E6
H	= DATAORIGIN+$01E8

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 419

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 420

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 421

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 423

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 424

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 425

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 427

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 429

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 430

	lda W
	sta BLT.SRC_STEP_Y
	lda W+1
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 432

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 434

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 440

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01E9
DST	= DATAORIGIN+$01ED
W	= DATAORIGIN+$01F1
H	= DATAORIGIN+$01F3

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000144  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 452

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 453

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 454

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 456

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 457

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 458

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 460

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 461

	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 463

	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 464

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 466

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000145  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 472

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01F4
DST	= DATAORIGIN+$01F8
SIZE	= DATAORIGIN+$01FC

@VarData	= SRC
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (service.pas), line = 480

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 481

	lda V
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

DST	= DATAORIGIN+$01FE
V	= DATAORIGIN+$0202

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0203

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 607

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_055B
	lda A
	sta RESULT
	lda A+1
	jmp l_056A
l_055B

; optimize OK (service.pas), line = 608

	lda B
	sta RESULT
	lda B+1
l_056A
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0205
B	= DATAORIGIN+$0207
RESULT	= DATAORIGIN+$0209

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 614

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_0585
	lda A
	sta RESULT
	lda A+1
	jmp l_0594
l_0585

; optimize OK (service.pas), line = 615

	lda B
	sta RESULT
	lda B+1
l_0594
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$020B
B	= DATAORIGIN+$020D
RESULT	= DATAORIGIN+$020F

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 624

	sta STATUS

; -------------------  ASM Block 00000146  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$0211

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 672

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 674

	sta Y

l_05B4
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_05D4

; optimize OK (service.pas), line = 677

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_05E5
l_05D4

; optimize OK (service.pas), line = 679

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_05E5
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 681

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_05B4
l_05C2

; ------------------------------------------------------------

Y	= DATAORIGIN+$0212

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 697

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_0609

; optimize FAIL ('@print', service.pas), line = 698

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_0609

; optimize OK (service.pas), line = 702

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 703

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 705

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 707

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 708

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 710

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 711

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 712

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 714

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000147  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 720

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 722

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 725

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 726

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 728

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 732

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 733

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 735

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 737

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 738

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 740

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 742

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 744

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$00
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 766

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 767

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 769

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 771

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_068D

; optimize OK (service.pas), line = 773

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 774

	lda adr.WALL,y
	cmp #$0A
	jeq l_06AD
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_06AD

; optimize OK (service.pas), line = 776

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 777

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 778

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 780

	lda #$00
	sta Y

l_06DD
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_06EB

; optimize OK (service.pas), line = 782

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 785

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_06DD
l_06EB
l_068D

; optimize FAIL (0, service.pas), line = 789

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 790

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0732
	lda #$00
	sta SHINEREC.ACTIVE
l_0732

; ------------------------------------------------------------

XB	= DATAORIGIN+$0213
YB	= DATAORIGIN+$0215
FRAME	= DATAORIGIN+$0217
XF	= DATAORIGIN+$0219
YF	= DATAORIGIN+$021B
FR	= DATAORIGIN+$021D
OG	= DATAORIGIN+$021F
Y	= DATAORIGIN+$0221
I	= DATAORIGIN+$0222

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 799

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 800

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 807

	lda SHINEREC.ACTIVE
	jeq l_0752
	jsr UNSHINE_BLOCK
l_0752

; optimize OK (service.pas), line = 809

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 810

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 811

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 812

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 813

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0223
YB	= DATAORIGIN+$0224

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 819

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_0793
	jsr SHINE_BLOCK
l_0793

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_079C

; optimize OK (service.pas), line = 827

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 828

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 829

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_07AA

; optimize FAIL (0, service.pas), line = 834

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 835

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 838

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_07AA

; optimize OK (service.pas), line = 842

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_079C

; optimize OK (service.pas), line = 844

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0225
RN	= DATAORIGIN+$0227
SUM	= DATAORIGIN+$0229
LETTER	= DATAORIGIN+$022B

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 851

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 853

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta BLITLETTER.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITLETTER.DST+1
	lda #$00
	adc #$00
	sta BLITLETTER.DST+2
	lda #$00
	adc #$00
	sta BLITLETTER.DST+3
	lda LETTERS.OFS
	add FL
	sta BLITLETTER.SRC
	lda LETTERS.OFS+1
	adc FL+1
	sta BLITLETTER.SRC+1
	lda LETTERS.OFS+2
	adc #$00
	sta BLITLETTER.SRC+2
	lda LETTERS.OFS+3
	adc #$00
	sta BLITLETTER.SRC+3
	jsr BLITLETTER

; ------------------------------------------------------------

FL	= DATAORIGIN+$022D
FW	= DATAORIGIN+$022F

@VarData	= FL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 860

	ldy LETT.Y
	cpy #$C8
	jcs l_081D

; optimize OK (service.pas), line = 862

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 864

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_081D

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 873

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 874

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 880

	lda LETT.ACTIVE
	jeq l_0856
	jsr DISABLE_LETTER
l_0856

; optimize OK (service.pas), line = 882

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 883

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 884

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 885

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 886

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 887

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0231
YL	= DATAORIGIN+$0233
LETTER	= DATAORIGIN+$0235

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 893

	lda LETT.ACTIVE
	jeq l_0885

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 895

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 896

	inc LETT.Y

; optimize OK (service.pas), line = 897

	lda LETT.Y
	cmp #$C8
	jcc l_089D
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 898
	jmp l_08A8
l_089D

; optimize FAIL ('PUT_LETTER', service.pas), line = 900

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 901

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 902

	lda LETT.SUBFRAME
	cmp #$05
	jne l_08BF

; optimize OK (service.pas), line = 904

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 905

	inc LETT.FRAME
l_08BF

; optimize OK (service.pas), line = 908

	lda LETT.FRAME
	cmp #$08
	jne l_08DC
	lda #$00
	sta LETT.FRAME
l_08DC

; optimize OK (service.pas), line = 910

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0935
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0935
	jeq l_0935
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0935
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0935
	jeq l_0935
@

; optimize OK (service.pas), line = 913

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 914

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 915

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_08A8

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 916

	jsr DISABLE_LETTER
l_0935

; optimize OK (service.pas), line = 920

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0956
l_0885

; optimize OK (service.pas), line = 922

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0967

; optimize OK (service.pas), line = 923

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0956
l_0967

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 933

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0237	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0237
BTM.HEIGHT	= DATAORIGIN+$0239
BTM.OFS	= DATAORIGIN+$023B

@VarData	= BTM.WIDTH
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 954

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 956

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda BALLDATA.OFS
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$023F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 980

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 982

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0243
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1005

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1017

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$00
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jeq l_09E7s
	ldy #BALL.OLDY-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$00
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jeq l_09E7s
	lda:sne #$01
l_09E7s	lda #$00
	sta B0

; optimize OK (service.pas), line = 1018

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #BALL.X-DATAORIGIN+$01
	cmp (:bp2),y
	bne @+
	dey
	lda :STACKORIGIN+9
	cmp (:bp2),y
@
	bne @+
	jmp *+6
@\	jmp l_09FFs
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #BALL.Y-DATAORIGIN+$01
	cmp (:bp2),y
	bne @+
	dey
	lda :STACKORIGIN+10
	cmp (:bp2),y
@
	bne @+
	jmp *+6
@\	jmp l_09FFs
	lda:seq #$00
l_09FFs	lda #$01
	sta B1

; optimize OK (service.pas), line = 1020

	lda B0
	and B1
	jeq l_0A11

; optimize OK (service.pas), line = 1021

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0A11

; optimize OK (service.pas), line = 1023

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1025

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1026

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0247
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$024B
B1	= DATAORIGIN+$024C

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1039

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1040

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 1042

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta A+1

; optimize OK (service.pas), line = 1043

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta B+1

; optimize OK (service.pas), line = 1045

	lda A
	sta :ecx
	sta :eax
	lda A+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B
	sta :ecx
	sta :eax
	lda B+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta I+3

; optimize OK (service.pas), line = 1047

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta HLP
	lda SQRT32.RESULT+1
	sta HLP+1

; optimize OK (service.pas), line = 1049

	lda HLP
	sta :FPMAN0
	lda HLP+1
	sta :FPMAN1
	lda #$00
	sta :FPMAN2
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda SPEED
	sta :FPMAN0
	ldy #$00
	lda SPEED+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3

; optimize OK (service.pas), line = 1054

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1055

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$024D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
SPEED	= DATAORIGIN+$0251
SX	= DATAORIGIN+$0253
SY	= DATAORIGIN+$0255
VM	= DATAORIGIN+$0257
I	= DATAORIGIN+$025B
A	= DATAORIGIN+$025F
B	= DATAORIGIN+$0261

@VarData	= BALL
@VarDataSize	= 20

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1063

	lda ANGLE
	add #$5A
	tay
	lda #$C6
	adc ANGLE+1
	sta :bp+1
	lda (:bp),y
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1064

	ldy ANGLE
	lda #$C6
	add ANGLE+1
	sta :bp+1
	lda (:bp),y
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0263
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
ANGLE	= DATAORIGIN+$0267

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1079

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0AA3
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0ABF
l_0AA3

; optimize OK (service.pas), line = 1085

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1087

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.VALUE
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.VALUE+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.VALUE+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$49
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1089

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1091

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0AEE
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0AEE

; optimize OK (service.pas), line = 1093

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01

; --- WhileProlog
	jmp l_0AF5
l_0AF6

; optimize OK (service.pas), line = 1096

	lda W
	sub #$68
	sta W
	lda W+1
	sbc #$01
l_0AF5
	sta W+1
	lda W
	cmp #$68
	lda W+1
	sbc #$01
	svc
	eor #$80
	jpl l_0AF6
l_0ABF

; optimize OK (service.pas), line = 1099

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0269
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
RESULT	= DATAORIGIN+$026D
W	= DATAORIGIN+$026F

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1108

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1114

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1119

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1120

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1122

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1124

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1125

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0271
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1B
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1137

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta A+1

; optimize OK (service.pas), line = 1138

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta B+1

; optimize OK (service.pas), line = 1140

	lda A
	sta :ecx
	sta :eax
	lda A+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B
	sta :ecx
	sta :eax
	lda B+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta I+3

; optimize OK (service.pas), line = 1142

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta RESULT
	lda SQRT32.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0275	; [28] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0275
BALL.Y	= DATAORIGIN+$0277
BALL.FINEX	= DATAORIGIN+$0279
BALL.FINEY	= DATAORIGIN+$027B
BALL.OLDX	= DATAORIGIN+$027D
BALL.OLDY	= DATAORIGIN+$027F
BALL.SPEED	= DATAORIGIN+$0281
BALL.FINESPEED	= DATAORIGIN+$0283
BALL.SPEEDX	= DATAORIGIN+$0285
BALL.SPEEDY	= DATAORIGIN+$0287
BALL.SBD	= DATAORIGIN+$0289
BALL.BRWHIT	= DATAORIGIN+$028B
BALL.INPLAY	= DATAORIGIN+$028C
BALL.LAUNCH	= DATAORIGIN+$028D
BALL.ONVAUS	= DATAORIGIN+$028E
BALL.STM	= DATAORIGIN+$0290
RESULT	= DATAORIGIN+$0291
I	= DATAORIGIN+$0293
A	= DATAORIGIN+$0297
B	= DATAORIGIN+$0299

@VarData	= BALL.X
@VarDataSize	= 36

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1160

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1161

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1163

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1164

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1166

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1167

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1172

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0BBF

; optimize OK (service.pas), line = 1174

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1175

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1176

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1177

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BBF

; optimize OK (service.pas), line = 1182

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0BF4

; optimize OK (service.pas), line = 1184

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1185

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1186

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1187

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BF4

; optimize OK (service.pas), line = 1192

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0C29

; optimize OK (service.pas), line = 1194

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1195

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1196

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1197

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0C29

; optimize OK (service.pas), line = 1205

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1206

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1207

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	sta B2

; optimize OK (service.pas), line = 1210

	lda B0
	and B1
	and B2
	jeq l_0C8A

; optimize OK (service.pas), line = 1214

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0CB9
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	lda (:bp2),y
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_0CB9

; optimize OK (service.pas), line = 1217

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1219

	lda VAUS.LETTER
	cmp #$06
	jne l_0CDD
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0CDD

; optimize OK (service.pas), line = 1221

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1222

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1223

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0CDD

; optimize OK (service.pas), line = 1226

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1230

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jpl l_0D0D

; optimize OK (service.pas), line = 1233

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1237

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1245

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1250

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0D0D

; optimize OK (service.pas), line = 1256

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0D4E

; optimize OK (service.pas), line = 1258

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1259

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1260

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1261

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0D4E
l_0CB9
l_0C8A

; optimize OK (service.pas), line = 1273

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0D9D

; optimize OK (service.pas), line = 1275

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1277

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0D9D

; ------------------------------------------------------------

BALL	= DATAORIGIN+$029B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$029F
B1	= DATAORIGIN+$02A0
B2	= DATAORIGIN+$02A1
X	= DATAORIGIN+$02A2
Y	= DATAORIGIN+$02A4
ANGLE	= DATAORIGIN+$02A6

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1284

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1285

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1286

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1291

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1292

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1294

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1295

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1296

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1300

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1304

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1305

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1306

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1307

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1316

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1317

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1330

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1332

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1334

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1343

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1345

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0E39

; optimize FAIL (0, service.pas), line = 1347

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1348

	lda #$00
	sta VAUS.IFLASH
l_0E39

; optimize OK (service.pas), line = 1351

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0E56
	lda #$00
	sta VAUS.FLASH
l_0E56

; optimize OK (service.pas), line = 1361

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; optimize OK (service.pas), line = 1363

	lda #$00
	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_0E80_0

l_0E83
; --- ForToDoCondition
	lda @FORTMP_0E80_0::#$00
	cmp Y
	jcc l_0E91

; optimize OK (service.pas), line = 1371

	lda Y
	cmp #$02
	jcc l_0EB5
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_0EB5

; optimize OK (service.pas), line = 1375

	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1377

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda HLP
	sta PUTBYTE.DST
	lda #$50
	add HLP+1
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (service.pas), line = 1380

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda HLP
	sta :STACKORIGIN+10
	lda #$50
	add HLP+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_0EB5

; --- ForToDoEpilog
	inc Y
	jne l_0E83
l_0E91

; ------------------------------------------------------------

Y	= DATAORIGIN+$02A8

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1393

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0F24

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1394

	jsr REMOVE_VAUS
l_0F24

; optimize OK (service.pas), line = 1396

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1397

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1404

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1405

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1407

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$02AA
Y	= DATAORIGIN+$02AC

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1422

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1423

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1425

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000149  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1431

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1432

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1434

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1435

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1438

	lda #$07
	sta Y

l_0FA3
; --- ForToDoCondition
	lda YS
	add Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (service.pas), line = 1450

	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1452

	lda #$0F
	sta X

l_0FD8
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0FFE

; optimize OK (service.pas), line = 1459

	lda X
	adc I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1463

	lda X
	add XS
	tay
	lda adr.MODX,y
	add YH
	sta :STACKORIGIN+9
	lda #$00
	adc YH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1465

	lda X
	add I
	tay
	lda CL
	sta adr.SCR,y
l_0FFE

; --- ForToDoEpilog
	dec X
	jpl l_0FD8
l_0FE6

; --- ForToDoEpilog
	dec Y
	jpl l_0FA3
l_0FB1

; optimize OK (service.pas), line = 1477

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1479

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1480

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1489

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1491

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$20
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1492

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1495

	lda #$08
	sta Y

l_108D
; --- ForToDoCondition
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta YH
	lda :STACKORIGIN+STACKWIDTH+9
	sta YH+1

; optimize OK (service.pas), line = 1501

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_10B7_0

l_10BA
; --- ForToDoCondition
	lda @FORTMP_10B7_0::#$00
	cmp X
	jcc l_10C8

; optimize OK (service.pas), line = 1517

	lda X
	cmp #$D8
	jcs l_10DA

; optimize OK (service.pas), line = 1522

	sub XS
	sta I

; optimize OK (service.pas), line = 1524

	lda YH
	add I
	sta :STACKORIGIN+9
	lda YH+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YH
	add I
	tay
	lda #$B3
	adc YH+1
	sta :bp+1
	lda (:bp),y
	ora #$80
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_10DA

; --- ForToDoEpilog
	inc X
	jne l_10BA
l_10C8

; --- ForToDoEpilog
	dec Y
	jpl l_108D
l_109B

; optimize OK (service.pas), line = 1536

	lda #$20
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1538

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1539

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000150  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$02AE
YA	= DATAORIGIN+$02AF
X	= DATAORIGIN+$02B0
Y	= DATAORIGIN+$02B1
I	= DATAORIGIN+$02B2
XS	= DATAORIGIN+$02B3
YS	= DATAORIGIN+$02B4
YH	= DATAORIGIN+$02B5
CL	= DATAORIGIN+$02B7
SHADOW	= DATAORIGIN+$02B8

@VarData	= XA
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1559

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1560

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1562

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; -------------------  ASM Block 00000151  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1569

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1570

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1573

	lda #$07
	sta Y

l_1166
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1577

	lda #$0F
	sta X

l_1187
; --- ForToDoCondition
	lda X
	add I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1584

	lda Y
	cmp #$07
	jcs l_11C6
	lda X
	cmp #$0F
	jcs l_11C6

; optimize OK (service.pas), line = 1589

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1591

	lda X
	add I
	tay
	lda CL
	jmp l_11FA
l_11C6

; optimize OK (service.pas), line = 1602

	lda X
	add I
	tay
	lda SHADOW
l_11FA
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_1187
l_1195

; --- ForToDoEpilog
	dec Y
	jpl l_1166
l_1174

; optimize OK (service.pas), line = 1614

	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1616

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1617

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1620

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc XS+1
	sta HLP+1

; optimize OK (service.pas), line = 1622

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$20
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1623

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1627

	lda #$08
	sta Y

l_1250
; --- ForToDoCondition
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta YH
	lda :STACKORIGIN+STACKWIDTH+9
	sta YH+1

; optimize OK (service.pas), line = 1633

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1278_0

l_127B
; --- ForToDoCondition
	lda @FORTMP_1278_0::#$00
	cmp X
	jcc l_1289

; optimize OK (service.pas), line = 1634

	lda X
	cmp #$D8
	jcs l_129B

; optimize OK (service.pas), line = 1643

	sub XS
	sta I

; optimize OK (service.pas), line = 1645

	lda YH
	add I
	sta :STACKORIGIN+9
	lda YH+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YH
	add I
	tay
	lda #$B3
	adc YH+1
	sta :bp+1
	lda (:bp),y
	and #$7F
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_129B

; --- ForToDoEpilog
	inc X
	jne l_127B
l_1289

; --- ForToDoEpilog
	dec Y
	jpl l_1250
l_125E

; optimize OK (service.pas), line = 1656

	lda #$20
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1658

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1659

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$20
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1662

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; optimize OK (service.pas), line = 1664

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1665

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1668

	lda BLOCK
	cmp #$09
	jcc l_130F

; optimize OK (service.pas), line = 1670

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1671

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_132A

; optimize OK (service.pas), line = 1673

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1674

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_1349
l_132A

; optimize OK (service.pas), line = 1680

	lda BLOCK
	cmp #$0A
	jne l_135B
	lda #$C9
	sta CL2
l_1349
l_135B

; optimize OK (service.pas), line = 1684

	lda #$06
	sta Y

l_136B
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1692

	tay
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1694

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1701

	sta adr.SCR,y

; --- ForToDoEpilog
	dec Y
	jpl l_136B
l_1379

; optimize OK (service.pas), line = 1707

	lda #$0E
	tay

l_13B7
; --- ForToDoCondition
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1714

	lda CL2
	and #$7F
	ora CL
	sta adr.SCR,y

; --- ForToDoEpilog
	dey
	jpl l_13B7
	sty X
l_130F

; optimize OK (service.pas), line = 1725

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1727

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1728

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000152  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$02BA
YA	= DATAORIGIN+$02BB
BLOCK	= DATAORIGIN+$02BC
X	= DATAORIGIN+$02BD
Y	= DATAORIGIN+$02BE
I	= DATAORIGIN+$02BF
XS	= DATAORIGIN+$02C0
YS	= DATAORIGIN+$02C2
YH	= DATAORIGIN+$02C4
CL	= DATAORIGIN+$02C6
CL2	= DATAORIGIN+$02C7
SHADOW	= DATAORIGIN+$02C8

@VarData	= XA
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1742

	lda #$00
	sta Y

l_1410
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_141E

; optimize OK (service.pas), line = 1744

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1746

	lda #$00
	sta X

l_1431
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_143F

; optimize OK (service.pas), line = 1747

	adc I
	tay
	lda adr.WALL,y
	jeq l_145A
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_145A

; --- ForToDoEpilog
	inc X
	jne l_1431
l_143F

; --- ForToDoEpilog
	inc Y
	jne l_1410
l_141E

; ------------------------------------------------------------

X	= DATAORIGIN+$02CA
Y	= DATAORIGIN+$02CB
I	= DATAORIGIN+$02CC

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1758

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1759

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1762

	lda #$00
	sta Y

l_1494
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_14A2

; optimize OK (service.pas), line = 1763

	lda #$00
	sta X

l_14AB
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_14B9

; optimize OK (service.pas), line = 1766

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_14F1
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_14F1
	inc REMAIN_BLK
l_14F1

; --- ForToDoEpilog
	inc X
	jne l_14AB
l_14B9

; --- ForToDoEpilog
	inc Y
	jne l_1494
l_14A2

; optimize OK (service.pas), line = 1768

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1770

	sta @CASETMP_0008
	cmp #$00
	jne l_151B
@

; optimize OK (service.pas), line = 1771

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_151B
	cmp #$01
	jne l_1524

; optimize OK (service.pas), line = 1772

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_1524
	cmp #$02
	jne l_152D

; optimize OK (service.pas), line = 1773

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_152D
	cmp #$03
	jne l_1536

; optimize OK (service.pas), line = 1774

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1536
	cmp #$04
	jne l_153F

; optimize OK (service.pas), line = 1775

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_153F
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$02CD
Y	= DATAORIGIN+$02CE
WL	= DATAORIGIN+$02CF
@CASETMP_0008	= DATAORIGIN+$02D0

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1801

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1802

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1803

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1804

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1806

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1808

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1809

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1810

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1811

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1813

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1814

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1815

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1816

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1818

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1819

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1820

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1821

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1828

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_15C8

; optimize OK (service.pas), line = 1829

	lda #$01
	jsr FATAL_ERROR
l_15C8

; optimize OK (service.pas), line = 1832

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_15EBx
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15EB
l_15EBx

; optimize OK (service.pas), line = 1834

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15FE

; optimize OK (service.pas), line = 1836

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_160B
l_160C

; optimize OK (service.pas), line = 1840

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1841

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1843

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1845

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_1643

; optimize OK (service.pas), line = 1847

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1848

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_1643

; optimize OK (service.pas), line = 1851

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_1662

; optimize OK (service.pas), line = 1853

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1854

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_1662
l_160B

; optimize OK (service.pas), line = 1838

	lda YN
	and #$07
	jeq l_160Cw
	lda YN
	and #$07
	cmp #$07
	jne l_160C
l_160Cw
l_15FE

; optimize OK (service.pas), line = 1860

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_16A1

; optimize OK (service.pas), line = 1862

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_16AE
l_16AF

; optimize OK (service.pas), line = 1866

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1867

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1869

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1871

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_16E6

; optimize OK (service.pas), line = 1873

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1874

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_16E6

; optimize OK (service.pas), line = 1877

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_1705

; optimize OK (service.pas), line = 1879

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1880

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_1705
l_16AE

; optimize OK (service.pas), line = 1864

	lda XJ
	and #$0F
	jeq l_16AFw
	lda XJ
	and #$0F
	cmp #$0F
	jne l_16AF
l_16AFw
l_16A1

; optimize OK (service.pas), line = 1891

	lda COLLISION
	cmp #$01
	jne l_1744
; optimize OK (service.pas), line = 1893
; optimize OK (service.pas), line = 1894
	jmp l_1758
l_1744

; optimize OK (service.pas), line = 1896

	lda COLLISION
	cmp #$02
	jne l_176A

; optimize OK (service.pas), line = 1898

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1899

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_177E
l_176A

; optimize OK (service.pas), line = 1901

	lda COLLISION
	cmp #$03
	jne l_1790

; optimize OK (service.pas), line = 1903

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1904

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1758

; optimize OK (service.pas), line = 1905

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1906

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_177E
	sta (:bp2),y
l_1790
	jmp l_17B0
l_15EB

; optimize OK (service.pas), line = 1911

	lda #$02
	jsr FATAL_ERROR
l_17B0

; optimize OK (service.pas), line = 1914

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1915

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1916

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1917

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1920

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1921

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1928

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$02D1
Y1	= DATAORIGIN+$02D3
X2	= DATAORIGIN+$02D5
Y2	= DATAORIGIN+$02D7
RESULT	= DATAORIGIN+$02D9
X	= DATAORIGIN+$02DA
Y	= DATAORIGIN+$02DC
XK	= DATAORIGIN+$02DE
YK	= DATAORIGIN+$02E0
XJ	= DATAORIGIN+$02E2
YJ	= DATAORIGIN+$02E4
XH	= DATAORIGIN+$02E6
YH	= DATAORIGIN+$02E8
XN	= DATAORIGIN+$02EA
YN	= DATAORIGIN+$02EC
XP1	= DATAORIGIN+$02EE
YP1	= DATAORIGIN+$02F0
XP2	= DATAORIGIN+$02F2
YP2	= DATAORIGIN+$02F4
XP	= DATAORIGIN+$02F6
YP	= DATAORIGIN+$02F8
COLLISION	= DATAORIGIN+$02FA

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1939

	lda #$0C
	cmp XB
	jcc l_17F0
	lda #$0E
	cmp YB
	jcc l_17F0

; optimize OK (service.pas), line = 1942

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1944

	tay
	lda adr.WALL,y
	jeq l_1816

; optimize OK (service.pas), line = 1946

	cmp #$0A
	jcs l_182C

; optimize OK (service.pas), line = 1948

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1949

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1953

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1955

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1957

	lda XB
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1958

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1959

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1961

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1962

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1963

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1964

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1884
l_182C

; optimize OK (service.pas), line = 1969

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_189D

; optimize OK (service.pas), line = 1971

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1972

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1974

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1975

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18B9
l_189D

; optimize OK (service.pas), line = 1979

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1980

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1982

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_18B9
l_1884
l_1816
l_17F0

; ------------------------------------------------------------

XB	= DATAORIGIN+$02FB
YB	= DATAORIGIN+$02FC
BALL	= DATAORIGIN+$02FD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
I	= DATAORIGIN+$0301

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1993

	lda #$0C
	cmp XB
	jcc l_18EA
	lda #$0E
	cmp YB
	jcc l_18EA

; optimize OK (service.pas), line = 1996

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1998

	tay
	lda adr.WALL,y
	jeq l_1910

; optimize OK (service.pas), line = 2000

	cmp #$0A
	jcs l_1926

; optimize OK (service.pas), line = 2002

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2003

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2004

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2005

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2006

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1950
l_1926

; optimize OK (service.pas), line = 2011

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1969

; optimize OK (service.pas), line = 2013

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2014

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2015

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1981
l_1969

; optimize OK (service.pas), line = 2019

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2020

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1950
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1981
l_1910
l_18EA

; ------------------------------------------------------------

XB	= DATAORIGIN+$0302
YB	= DATAORIGIN+$0303
I	= DATAORIGIN+$0304

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2055

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2057

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2058

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2061

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2062

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2064

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2065

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2069

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_19EC

; optimize OK (service.pas), line = 2071

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2077

	cmp #$03
	jne l_1A07

; optimize OK (service.pas), line = 2079

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	iny
	sub OX
	sub #$09
	sta LX

; optimize OK (service.pas), line = 2080

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	iny
	sub OY
	sub #$16
	sta LY

; optimize OK (service.pas), line = 2082

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2083

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2085

	lda LX
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta A
	lda LY
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta B

; optimize OK (service.pas), line = 2087

	lda A
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F1
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F1+1

; optimize OK (service.pas), line = 2089

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B

; optimize OK (service.pas), line = 2091

	lda A
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (service.pas), line = 2093

	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_1A9C

; optimize OK (service.pas), line = 2099

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2100

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2103

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1ADA

; optimize OK (service.pas), line = 2105

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2106

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1B02
l_1ADA

; optimize OK (service.pas), line = 2110

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2111

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1B02
	jmp l_1B15
l_1A9C

; optimize OK (service.pas), line = 2121

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2122

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2124

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1B52

; optimize OK (service.pas), line = 2126

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2127

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2129

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2130

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1B52
l_1B15
l_1A07

; optimize OK (service.pas), line = 2136

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2137

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2141

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2143

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2144

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2156

	lda X
	jeq l_1BE6
	cmp #$07
	jeq l_1BE6
	lda Y
	jeq l_1BE6
	cmp #$07
	jeq l_1BE6

; optimize OK (service.pas), line = 2157

	lda #$03
	jsr FATAL_ERROR
l_1BE6

; optimize OK (service.pas), line = 2172

	lda Y
	cmp X
	jcs l_1C11
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1C11

; optimize OK (service.pas), line = 2174

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2175

	lda #$01
	sta EMERGENCY
l_1C11

; optimize OK (service.pas), line = 2179

	lda #$07
	sub Y
	cmp X
	jcs l_1C46
	lda X
	cmp Y
	jcs l_1C46

; optimize OK (service.pas), line = 2181

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2182

	lda #$03
	sta EMERGENCY
l_1C46

; optimize OK (service.pas), line = 2186

	lda X
	cmp Y
	jcs l_1C7B
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1C7B

; optimize OK (service.pas), line = 2188

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2189

	lda #$02
	sta EMERGENCY
l_1C7B

; optimize OK (service.pas), line = 2193

	lda #$07
	sub X
	cmp Y
	jcs l_1CB0
	lda Y
	cmp X
	jcs l_1CB0

; optimize OK (service.pas), line = 2195

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2196

	lda #$04
	sta EMERGENCY
l_1CB0

; optimize OK (service.pas), line = 2200

	lda X
	cmp Y
	jeq l_1CE5x
	lda #$07
	sub Y
	cmp X
	jne l_1CE5
l_1CE5x

; optimize OK (service.pas), line = 2202

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2203

	sta TOUCH

; optimize OK (service.pas), line = 2211

	lda X
	cmp #$05
	jcc l_1D00
	lda TOUCH
	ora #$01
	sta TOUCH
l_1D00

; optimize OK (service.pas), line = 2212

	lda Y
	cmp #$05
	jcc l_1D1F
	lda TOUCH
	ora #$02
	sta TOUCH
l_1D1F

; optimize OK (service.pas), line = 2221

	lda #$FF
	sta LX

l_1D35
; --- ForToDoCondition
	lda LX
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1D43

; optimize OK (service.pas), line = 2222

	lda #$FF
	sta LY

l_1D4C
; --- ForToDoCondition
	lda LY
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1D5A

; optimize FAIL (1, service.pas), line = 2224

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc #$00
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2225

	ldy #$00
	lda YB
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	ldy #$00
	lda LY
	spl
	dey
	add :STACKORIGIN+9
	sta MY
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta MY+1

; optimize OK (service.pas), line = 2229

	lda XB
	add LX
	jmi l_1DB7x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1DB7x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1DB7
l_1DB7x

; optimize OK (service.pas), line = 2232

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$01
	jmp l_1DDA
l_1DB7

; optimize OK (service.pas), line = 2234

	lda LX
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add LY
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
l_1DDA
	sta adr.ADJW,y

; --- ForToDoEpilog
	inc LY
	lda LY
	cmp #$80
	jne l_1D4C
l_1D5A

; --- ForToDoEpilog
	inc LX
	lda LX
	cmp #$80
	jne l_1D35
l_1D43

; optimize OK (service.pas), line = 2253

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+$04
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$08
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$09
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$0A
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$06
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$02
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$01
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta AROUND

; optimize OK (service.pas), line = 2284

	lda TOUCH
	jne l_1E83

; optimize OK (service.pas), line = 2286

	lda AROUND
	and #$83
	jne l_1E9A
	lda #$11
	sta DEFLECT
l_1E9A

; optimize OK (service.pas), line = 2287

	lda AROUND
	and #$83
	cmp #$01
	jne l_1EB7
	lda #$33
	sta DEFLECT
l_1EB7

; optimize OK (service.pas), line = 2288

	lda AROUND
	and #$83
	cmp #$02
	jne l_1ED4
	lda #$10
	sta DEFLECT
l_1ED4

; optimize OK (service.pas), line = 2289

	lda AROUND
	and #$83
	cmp #$03
	jne l_1EF1
	lda #$12
	sta DEFLECT
l_1EF1

; optimize OK (service.pas), line = 2290

	lda AROUND
	and #$83
	cmp #$80
	jne l_1F0E
	lda #$01
	sta DEFLECT
l_1F0E

; optimize OK (service.pas), line = 2291

	lda AROUND
	and #$83
	cmp #$81
	jne l_1F2B
	lda #$21
	sta DEFLECT
l_1F2B

; optimize OK (service.pas), line = 2292

	lda AROUND
	and #$83
	cmp #$82
	jne l_1F48
	lda #$11
	sta DEFLECT
l_1F48

; optimize OK (service.pas), line = 2294

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2295

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1E83

; optimize OK (service.pas), line = 2300

	lda TOUCH
	cmp #$01
	jne l_1F78

; optimize OK (service.pas), line = 2302

	lda AROUND
	and #$0E
	jne l_1F8F
	lda #$21
	sta DEFLECT
l_1F8F

; optimize OK (service.pas), line = 2303

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1FAC
	lda #$20
	sta DEFLECT
l_1FAC

; optimize OK (service.pas), line = 2304

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1FC9
	lda #$33
	sta DEFLECT
l_1FC9

; optimize OK (service.pas), line = 2305

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1FE6
	lda #$22
	sta DEFLECT
l_1FE6

; optimize OK (service.pas), line = 2306

	lda AROUND
	and #$0E
	cmp #$08
	jne l_2003
	lda #$01
	sta DEFLECT
l_2003

; optimize OK (service.pas), line = 2307

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_2020
	lda #$21
	sta DEFLECT
l_2020

; optimize OK (service.pas), line = 2308

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_203D
	lda #$11
	sta DEFLECT
l_203D

; optimize OK (service.pas), line = 2310

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2311

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1F78

; optimize OK (service.pas), line = 2314

	lda TOUCH
	cmp #$02
	jne l_206D

; optimize OK (service.pas), line = 2316

	lda AROUND
	and #$E0
	jne l_2084
	lda #$12
	sta DEFLECT
l_2084

; optimize OK (service.pas), line = 2317

	lda AROUND
	and #$E0
	cmp #$20
	jne l_20A1
	lda #$10
	sta DEFLECT
l_20A1

; optimize OK (service.pas), line = 2318

	lda AROUND
	and #$E0
	cmp #$40
	jne l_20BE
	lda #$33
	sta DEFLECT
l_20BE

; optimize OK (service.pas), line = 2319

	lda AROUND
	and #$E0
	cmp #$60
	jne l_20DB
	lda #$11
	sta DEFLECT
l_20DB

; optimize OK (service.pas), line = 2320

	lda AROUND
	and #$E0
	cmp #$80
	jne l_20F8
	lda #$02
	sta DEFLECT
l_20F8

; optimize OK (service.pas), line = 2321

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2115
	lda #$12
	sta DEFLECT
l_2115

; optimize OK (service.pas), line = 2322

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_2132
	lda #$22
	sta DEFLECT
l_2132

; optimize OK (service.pas), line = 2324

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2325

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_206D

; optimize OK (service.pas), line = 2328

	lda TOUCH
	cmp #$03
	jne l_2162

; optimize OK (service.pas), line = 2330

	lda AROUND
	and #$38
	jne l_2179
	lda #$22
	sta DEFLECT
l_2179

; optimize OK (service.pas), line = 2331

	lda AROUND
	and #$38
	cmp #$08
	jne l_2196
	lda #$02
	sta DEFLECT
l_2196

; optimize OK (service.pas), line = 2332

	lda AROUND
	and #$38
	cmp #$10
	jne l_21B3
	lda #$33
	sta DEFLECT
l_21B3

; optimize OK (service.pas), line = 2333

	lda AROUND
	and #$38
	cmp #$18
	jne l_21D0
	lda #$12
	sta DEFLECT
l_21D0

; optimize OK (service.pas), line = 2334

	lda AROUND
	and #$38
	cmp #$20
	jne l_21ED
	lda #$20
	sta DEFLECT
l_21ED

; optimize OK (service.pas), line = 2335

	lda AROUND
	and #$38
	cmp #$28
	jne l_220A
	lda #$22
	sta DEFLECT
l_220A

; optimize OK (service.pas), line = 2336

	lda AROUND
	and #$38
	cmp #$30
	jne l_2227
	lda #$21
	sta DEFLECT
l_2227

; optimize OK (service.pas), line = 2338

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2339

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2162

; optimize OK (service.pas), line = 2345

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2346

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2348

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_226A
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_226A

; optimize OK (service.pas), line = 2349

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_2287
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2287

; optimize OK (service.pas), line = 2350

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_22A1
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_22A1

; optimize OK (service.pas), line = 2352

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_22BD
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_22BD

; optimize OK (service.pas), line = 2353

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_22DA
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_22DA

; optimize OK (service.pas), line = 2354

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_22F4
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_22F4
l_1CE5
l_19EC

; optimize OK (service.pas), line = 2364

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_2315

; optimize OK (service.pas), line = 2367

	lda EMERGENCY
	cmp #$FF
	jne l_2328
	lda #$04
	jsr FATAL_ERROR
l_2328

; optimize OK (service.pas), line = 2369

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2395

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_2341
@

; optimize OK (service.pas), line = 2398

	lda adr.ADJW+$04
	jne l_2358
	lda MIMAX
	and #$0F
	sta MIMAX
l_2358

; optimize OK (service.pas), line = 2399

	lda adr.ADJW+$01
	jne l_2380
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_2380
	jmp a_0009
l_2341
	cmp #$06
	jne l_2398

; optimize OK (service.pas), line = 2403

	lda adr.ADJW+$01
	jne l_23AF
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_23AF

; optimize OK (service.pas), line = 2404

	lda adr.ADJW+$06
	jne l_23D7
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_23D7
	jmp a_0009
l_2398
	cmp #$07
	jne l_23EF

; optimize OK (service.pas), line = 2408

	lda adr.ADJW+$06
	jne l_2406
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_2406

; optimize OK (service.pas), line = 2409

	lda adr.ADJW+$09
	jne l_242E
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_242E
	jmp a_0009
l_23EF
	cmp #$08
	jne l_2446

; optimize OK (service.pas), line = 2413

	lda adr.ADJW+$09
	jne l_245D
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_245D

; optimize OK (service.pas), line = 2414

	lda adr.ADJW+$04
	jne l_2485
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_2485
l_2446
a_0009

; --- RepeatUntilProlog
l_249D

; optimize OK (service.pas), line = 2422

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta LX

; optimize OK (service.pas), line = 2423

	lda MIMAX
	and #$0F
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta MX+1
	lda :eax
	sta MX

; optimize OK (service.pas), line = 2425

	ldy #$00
	lda LX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda MX
	sub :STACKORIGIN+10
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	inx
	mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LX :STACKORIGIN,x
	jsr @expandSHORT2SMALL
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 2428

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_249D

; --- WhileProlog
	jmp l_24E6
l_24E7

; optimize OK (service.pas), line = 2432

	lda ANGLE
	sub #$68
	sta ANGLE
	lda ANGLE+1
	sbc #$01
	sta ANGLE+1
l_24E6
	lda ANGLE
	cmp #$68
	lda ANGLE+1
	sbc #$01
	svc
	eor #$80
	jpl l_24E7

; optimize OK (service.pas), line = 2434

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda ANGLE
	sta SET_BALL_DIRECTION.ANGLE
	lda ANGLE+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2435

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2437

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_2315

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0305
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
X	= DATAORIGIN+$0309
Y	= DATAORIGIN+$030A
LX	= DATAORIGIN+$030B
LY	= DATAORIGIN+$030C
XB	= DATAORIGIN+$030D
YB	= DATAORIGIN+$030E
OX	= DATAORIGIN+$030F
OY	= DATAORIGIN+$0311
NX	= DATAORIGIN+$0313
NY	= DATAORIGIN+$0315
MX	= DATAORIGIN+$0317
MY	= DATAORIGIN+$0319
ANGLE	= DATAORIGIN+$031B
MYX	= DATAORIGIN+$031D
MYY	= DATAORIGIN+$031F
F1	= DATAORIGIN+$0321
F2	= DATAORIGIN+$0323
A	= DATAORIGIN+$0325
B	= DATAORIGIN+$0326
EMERGENCY	= DATAORIGIN+$0327
MIMAX	= DATAORIGIN+$0328
DEFLECT	= DATAORIGIN+$0329
AROUND	= DATAORIGIN+$032A
COLLISION	= DATAORIGIN+$032B
TOUCH	= DATAORIGIN+$032C
adr.ADJW	= [DATAORIGIN+$032D] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$033D

@VarData	= BALL
@VarDataSize	= 43

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2452

	lda #$00
	sta Y

l_2510
; --- ForToDoCondition
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2458

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_2510
l_251E

; -------------------  ASM Block 00000153  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2470

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2471

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2474

	lda #$0A
	sta Y

l_2554
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_2562

; optimize OK (service.pas), line = 2477

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2479

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$D8
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2480

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2482

	lda #$09
	sta X

l_2589
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_2597

; optimize OK (service.pas), line = 2486

	lda adr.MODX,y
	adc YB
	sta :STACKORIGIN+9
	lda #$00
	adc YB+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	sta CL

; optimize OK (service.pas), line = 2488

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2493

	lda Y
	cmp #$10
	jcc l_25CAx
	lda X
	cmp #$12
	jcs l_25CA
l_25CAx
	lda #$00
	sta SHADOW
l_25CA

; optimize OK (service.pas), line = 2498

	lda CL
	and #$7F
	ora SHADOW
	ldy X
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_2589
l_2597

; optimize OK (service.pas), line = 2502

	lda #$D8
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2503

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_2554
l_2562

; -------------------  ASM Block 00000154  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PATT	= DATAORIGIN+$033E
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$0342
X	= DATAORIGIN+$0344
Y	= DATAORIGIN+$0345
CL	= DATAORIGIN+$0346
SHADOW	= DATAORIGIN+$0347

@VarData	= PATT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0348
Y	= DATAORIGIN+$034A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2554

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2556

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$034C
Y	= DATAORIGIN+$034E
adr.SC	= [DATAORIGIN+$0350] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2601

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2602

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2604

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2606

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2607

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2614

	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2617

	lda #$00
	sta W

l_2653
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_2661

; optimize OK (service.pas), line = 2620

	lda #$00
	sta Y

l_266A
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2678

; optimize OK (service.pas), line = 2623

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2625

	lda EXPLOSION.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda EXPLOSION.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda EXPLOSION.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda EXPLOSION.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2627

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2629

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2631

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_26C5_0

l_26C8
; --- ForToDoCondition
	lda @FORTMP_26C5_0::#$00
	cmp X
	jcc l_26D6

; optimize OK (service.pas), line = 2635

	lda W
	cmp #$06
	jeq l_26F7x
	ldy X
	lda adr.POM,y
	jne l_26F7
l_26F7x
	jmp l_2701
l_26F7

; optimize OK (service.pas), line = 2644

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2701

; --- ForToDoEpilog
	inc X
	jne l_26C8
l_26D6

; optimize OK (service.pas), line = 2647

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_266A
l_2678

; optimize OK (service.pas), line = 2650

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_2653
l_2661

; -------------------  ASM Block 00000156  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2659

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2660

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2661

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$0365
A	= DATAORIGIN+$0367
B	= DATAORIGIN+$0369
W	= DATAORIGIN+$036B
X	= DATAORIGIN+$036C
Y	= DATAORIGIN+$036D

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2673

	jsr NOSOUND

; optimize OK (service.pas), line = 2674

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2675

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000157  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2681

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2684

	lda #$0B
	sta W

l_274B
; --- ForToDoCondition
	lda #$0F
	sta Y

l_2762
; --- ForToDoCondition
	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2691

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2693

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2695

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2697

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_27BD_0

l_27C0
; --- ForToDoCondition
	lda @FORTMP_27BD_0::#$00
	cmp X
	jcc l_27CE

; optimize OK (service.pas), line = 2699

	ldy X
	lda adr.POM,y
	jne l_27E3
	jmp l_27ED
l_27E3

; optimize OK (service.pas), line = 2710

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_27ED

; --- ForToDoEpilog
	inc X
	jne l_27C0
l_27CE

; optimize OK (service.pas), line = 2713

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	dec Y
	jpl l_2762
l_2770

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2716

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	dec W
	jpl l_274B
l_2759

; -------------------  ASM Block 00000158  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$036F
Y	= DATAORIGIN+$0370
W	= DATAORIGIN+$0371
Z	= DATAORIGIN+$0372
A	= DATAORIGIN+$0374
B	= DATAORIGIN+$0376

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (service.pas), line = 2735

	lda PX
	sta :STACKORIGIN+11
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy PY
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$C2
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; ------------------------------------------------------------

PX	= DATAORIGIN+$0379
PY	= DATAORIGIN+$037B
NUM	= DATAORIGIN+$037C
adr.MUL_6	= CODEORIGIN+$00E5
.var MUL_6	= adr.MUL_6 .word

@VarData	= PX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (service.pas), line = 2820

	lda #$00
	sta F

; -------------------  ASM Block 00000159  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2828

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2831

	lda #$A0
	sta @CARDINAL.DIV.B
	lda #$86
	sta @CARDINAL.DIV.B+1
	lda #$01
	sta @CARDINAL.DIV.B+2
	lda #$00
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	ldy :eax
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2832

	jeq l_285B
	lda #$01
	sta F
l_285B

; optimize OK (service.pas), line = 2833

	lda F
	jeq l_286E
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2881
l_286E

; optimize OK (service.pas), line = 2834

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2881
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2837

	lda #$10
	sta @CARDINAL.DIV.B
	lda #$27
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	ldy :eax
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2838

	jeq l_28A5
	lda #$01
	sta F
l_28A5

; optimize OK (service.pas), line = 2839

	lda F
	jeq l_28B8
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_28CF
l_28B8

; optimize OK (service.pas), line = 2840

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_28CF
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2843

	lda #$E8
	sta @CARDINAL.DIV.B
	lda #$03
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	ldy :eax
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2844

	jeq l_28F7
	lda #$01
	sta F
l_28F7

; optimize OK (service.pas), line = 2845

	lda F
	jeq l_290A
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2921
l_290A

; optimize OK (service.pas), line = 2846

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2921
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2849

	lda #$64
	sta @CARDINAL.DIV.B
	lda #$00
	sta @CARDINAL.DIV.B+1
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	ldy :eax
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2850

	jeq l_2949
	lda #$01
	sta F
l_2949

; optimize OK (service.pas), line = 2851

	lda F
	jeq l_295C
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2973
l_295C

; optimize OK (service.pas), line = 2852

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2973
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2855

	lda #$0A
	sta @CARDINAL.DIV.B
	lda #$00
	sta @CARDINAL.DIV.B+1
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	ldy :eax
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2856

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2860

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$00
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PX	= DATAORIGIN+$037D
PY	= DATAORIGIN+$037F
SC	= DATAORIGIN+$0380
N1	= DATAORIGIN+$0384
F	= DATAORIGIN+$0385

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, service.pas), line = 2913

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2920

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2921

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2923

	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2926

	lda #$00
	sta CN

l_29C7
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_29D5

; optimize OK (service.pas), line = 2927

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_29E0_0

l_29E3
; --- ForToDoCondition
	lda @FORTMP_29E0_0::#$00
	cmp Y
	jcc l_29F1

; optimize OK (service.pas), line = 2929

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda MINIVAUS.OFS
	add :eax
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda MINIVAUS.OFS+1
	adc :eax+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda MINIVAUS.OFS+2
	adc :eax+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda MINIVAUS.OFS+3
	adc :eax+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2931

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (service.pas), line = 2933

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add #$0B
	sta HLP
	lda :eax+1
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2935

	lda PLAYSCREEN.OFS
	add HLP
	sta :STACKORIGIN+12
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+12
	ldy YL
	lda :STACKORIGIN+12
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda :STACKORIGIN+STACKWIDTH+12
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+12
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+12
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2938

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2A38_0

l_2A3B
; --- ForToDoCondition
	lda @FORTMP_2A38_0::#$00
	cmp X
	jcc l_2A49

; optimize OK (service.pas), line = 2940

	lda X
	add HLP
	sta XL
	lda #$00
	adc HLP+1
	sta XL+1

; optimize OK (service.pas), line = 2942

	ldy XL
	lda adr.MODX,y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 2943

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize OK (service.pas), line = 2947

	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	jpl l_2A8B
	ldy X
	lda adr.POM,y
	jeq l_2A8B

; optimize OK (service.pas), line = 2955

	jmp l_2AA1
l_2A8B

; optimize OK (service.pas), line = 2964

	ldy X
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 2967

	lda XP
	add YP
	sta :STACKORIGIN+9
	lda XP+1
	adc YP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 2973

	ldy X
l_2AA1
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_2A3B
l_2A49

; optimize OK (service.pas), line = 2977

	ldy YL
	lda HLP
	add adr.ROW,y
	sta HLP
	lda HLP+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2979

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2980

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_29E3
l_29F1

; --- ForToDoEpilog
	inc CN
	jne l_29C7
l_29D5

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$0386
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$0388
Y	= DATAORIGIN+$0389
CN	= DATAORIGIN+$038A
XP	= DATAORIGIN+$038B
YP	= DATAORIGIN+$038D
XL	= DATAORIGIN+$038F
YL	= DATAORIGIN+$0391
SHADOW	= DATAORIGIN+$0393
CL	= DATAORIGIN+$0394

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2994

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2996

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.W
	lda SHOOTS.WIDTH+1
	sta BLITZERO.W+1
	lda SHOOTS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3004

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3006

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda SHOOTS.WIDTH
	sta BLITBOX.W
	lda SHOOTS.WIDTH+1
	sta BLITBOX.W+1
	lda SHOOTS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3014

	lda FIRE.AVL
	jeq l_2B50

; optimize FAIL ('MOUSECLICK', service.pas), line = 3016

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2B70

; optimize OK (service.pas), line = 3018

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3019

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 3020

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3021

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3022

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2B70

; optimize OK (service.pas), line = 3025

	lda FIRE.SHOT
	jeq l_2BAA

; optimize OK (service.pas), line = 3027

	lda FIRE.NW
	jeq l_2BB7
	jsr REMOVE_FIRE
l_2BB7

; optimize OK (service.pas), line = 3028

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3030

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3031

	cmp #$16
	jcs l_2BD2
	lda #$00
	sta FIRE.SHOT
	jmp l_2BE0
l_2BD2

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3034

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3036

	lda FIRE.Y
	sub #$16
	jmi l_2C07
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_2C07

; optimize OK (service.pas), line = 3038

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3039

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3041

	lda FIRE.X
	add SHOOTS.WIDTH
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3042

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3044

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2C75x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2C75
l_2C75x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3046

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3047

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3049

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3050

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2BE0
l_2C75
l_2C07
l_2BAA
l_2B50

; ------------------------------------------------------------

X1	= DATAORIGIN+$0397
X2	= DATAORIGIN+$0398
Y1	= DATAORIGIN+$0399
Y2	= DATAORIGIN+$039A

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3062

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3064

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3073

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 3075

	lda SCRFLUX
	jeq l_2CC4

; optimize OK (service.pas), line = 3078

	lda #$00
	sta Y

l_2CCE
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_2CDC

; optimize OK (service.pas), line = 3080

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2CCE
l_2CDC

; optimize FAIL (0, service.pas), line = 3082

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3083

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2D1B
	lda #$00
	sta SCRFLUXCNT
l_2D1B
l_2CC4

; ------------------------------------------------------------

Y	= DATAORIGIN+$039B
FX	= DATAORIGIN+$039C

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 3091

	jsr NOSOUND

; optimize OK (service.pas), line = 3093

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3094

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3096

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', service.pas), line = 3098

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3099

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3100

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3102

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_2D46_0
	lda Z+1
	adc #$00
	sta @FORTMP_2D46_1

l_2D49
; --- ForToDoCondition
	lda @FORTMP_2D46_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_2D46_0::#$00
	cmp X
@
	jcc l_2D55

; optimize FAIL ('WAIT_VBL', service.pas), line = 3104

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3106

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3107

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3108

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3109

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3110

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3112

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3114

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2D49
	inc X+1
	jne l_2D49
l_2D55

; ------------------------------------------------------------

X	= DATAORIGIN+$039D
Y	= DATAORIGIN+$039F
Z	= DATAORIGIN+$03A1

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3125

	lda VAUS.LETTER
	jmi l_2D9C
	jeq l_2D9C

; optimize OK (service.pas), line = 3127

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3128

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2DB3
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2DB3

; optimize OK (service.pas), line = 3129

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2DC5
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2DC5

; optimize OK (service.pas), line = 3130

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3131

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3132

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3133

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3135

	lda VAUS.LETTER
	cmp #$06
	jeq l_2DEA

; optimize OK (service.pas), line = 3137

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3138

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3139

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2DEA
l_2D9C

; optimize OK (service.pas), line = 3143

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2E06
@

; optimize OK (service.pas), line = 3146

	lda FIRE.SHOT
	jeq l_2E12
	jsr REMOVE_FIRE
l_2E12

; optimize OK (service.pas), line = 3147

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3148

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3149

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3150

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3151

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2E06
	cmp #$02
	jne l_2E2C

; optimize OK (service.pas), line = 3155

	lda FIRE.SHOT
	jeq l_2E38
	jsr REMOVE_FIRE
l_2E38

; optimize OK (service.pas), line = 3156

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3157

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3158

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3159

	sta FIRE.AVL
	jmp a_000A
l_2E2C
	cmp #$03
	jne l_2E4E

; optimize OK (service.pas), line = 3163

	lda FIRE.SHOT
	jeq l_2E5A
	jsr REMOVE_FIRE
l_2E5A

; optimize OK (service.pas), line = 3164

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3165

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3166

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3167

	sta FIRE.AVL

; optimize OK (service.pas), line = 3168

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2E4E
	cmp #$04
	jne l_2E74

; optimize OK (service.pas), line = 3172

	lda FIRE.SHOT
	jeq l_2E80
	jsr REMOVE_FIRE
l_2E80

; optimize OK (service.pas), line = 3173

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3174

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3175
	jmp s_2EBD
l_2E74
	cmp #$05
	jne l_2E92

; optimize OK (service.pas), line = 3179

	lda FIRE.SHOT
	jeq l_2E9E
	jsr REMOVE_FIRE
l_2E9E

; optimize OK (service.pas), line = 3180

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3181

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3182

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3183

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3184

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2EBD
; optimize OK (service.pas), line = 3185
	jmp s_2EDB
l_2E92
	cmp #$06
	jne l_2EC4

; optimize OK (service.pas), line = 3189

	lda FIRE.SHOT
	jeq l_2ED0
	jsr REMOVE_FIRE
l_2ED0

; optimize OK (service.pas), line = 3190

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3191

	jsr MODIFY_VAUS
s_2EDB
; optimize OK (service.pas), line = 3192
	jmp s_2F0B
l_2EC4
	cmp #$07
	jne l_2EE2

; optimize OK (service.pas), line = 3196

	lda FIRE.SHOT
	jeq l_2EEE
	jsr REMOVE_FIRE
l_2EEE

; optimize OK (service.pas), line = 3197

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3198

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3199

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3200

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3201

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3202

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_2F0B

; optimize OK (service.pas), line = 3203

	lda #$00
	sta FIRE.AVL
l_2EE2
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$03A5
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001B
B2	= DATAORIGIN+$03A9
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001B
B3	= DATAORIGIN+$03AD
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001B
X	= DATAORIGIN+$03B1
@CASETMP_000A	= DATAORIGIN+$03B3

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2F19

; optimize OK (service.pas), line = 3216

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3217

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2F19

; optimize OK (service.pas), line = 3219

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3220

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3222

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03B4
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
TEMP	= DATAORIGIN+$03B8

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2F53

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3254

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2F62

; optimize OK (service.pas), line = 3257

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2F7F
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2F7F

; optimize OK (service.pas), line = 3258

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2F7F

; optimize OK (service.pas), line = 3260

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3261

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_2F62

; ------------------------------------------------------------

BALL	= DATAORIGIN+$041F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3269

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2FA0

; optimize OK (service.pas), line = 3271

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3273

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_2FB6
	jeq l_2FB6

; optimize OK (service.pas), line = 3275

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3278

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_2FCC

; optimize OK (service.pas), line = 3280

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3281

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2FCC
l_2FB6

; optimize OK (service.pas), line = 3285

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3289

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2FF4
@
	ldy #$00
	lda (:bp2),y
	jpl l_2FF4
@

; optimize OK (service.pas), line = 3290

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2FF4
l_2FA0

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0423
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2F53

; optimize OK (service.pas), line = 3298

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3299

	sta SCRFLUX

; optimize OK (service.pas), line = 3301

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3303

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3304

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3306

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3307

	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3310

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3313

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3317

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3323

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3324

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3325

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3328

	jsr PUT_WALL

; optimize OK (service.pas), line = 3335

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3336

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3339

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3340

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3343

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3344

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3347

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3351

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3356

	sta BALL0.STM

; optimize OK (service.pas), line = 3360

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3363

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3366

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3368

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3369

	jsr START_VAUS

; optimize OK (service.pas), line = 3370

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3371

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3372

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3373

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3374

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3381

	lda #$0F
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3383

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3386

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3388

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3389

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3391

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_308C
l_308D

; optimize FAIL ('WAIT_VBL', service.pas), line = 3395

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3404

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3409

	lda TRAINER
	jne l_30A2
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_30B0
l_30A2

; optimize OK (service.pas), line = 3415

	lda TRAINER
	cmp #$01
	jne l_30C2

; optimize FAIL (1, service.pas), line = 3416

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc BALL0.ONVAUS+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_30B0
	jsr MOVE_VAUS
l_30C2

; optimize OK (service.pas), line = 3421

	lda BALL0.LAUNCH
	cmp #$01
	jne l_30E4

; optimize FAIL (0, service.pas), line = 3423

	inc BALL0.STM

; optimize OK (service.pas), line = 3428

	lda BALL0.STM
	cmp #$FA
	jne l_30FB
	lda #$00
	sta BALL0.LAUNCH
l_30FB

; optimize OK (service.pas), line = 3431

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3434

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_3115
	lda #$00
	sta BALL0.LAUNCH
l_3115
	jmp l_3125
l_30E4

; optimize OK (service.pas), line = 3442

	lda BALL0.INPLAY
	jeq l_3131
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3131

; optimize OK (service.pas), line = 3443

	lda BALL1.INPLAY
	jeq l_3143
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3143

; optimize OK (service.pas), line = 3444

	lda BALL2.INPLAY
	jeq l_3155
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3155
l_3125

; optimize OK (service.pas), line = 3452

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3453

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3454

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3469

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3470

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3471

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3472

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3473

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3475

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_318D
	jsr VAUS_OUT
l_318D

; optimize OK (service.pas), line = 3477

	lda VAUS.LETTER
	cmp #$04
	jne l_31A3

; optimize OK (service.pas), line = 3479

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3481

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3482

	mwy BALL2 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3484

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3486

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3493

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (service.pas), line = 3495

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3496

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3497

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3501

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3502

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3503

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3505

	lda #$00
	sta VAUS.LETTER
l_31A3

; optimize OK (service.pas), line = 3509

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_3206
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_3206

; optimize OK (service.pas), line = 3513

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3515

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_3224

; optimize OK (service.pas), line = 3517

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3519

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_3224

; optimize OK (service.pas), line = 3525

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_3247
	jeq l_3247

; optimize OK (service.pas), line = 3528

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3530

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_3247

; optimize OK (service.pas), line = 3537

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3538

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3539

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3580

	lda BALL0.INPLAY
	jne l_326D

; optimize OK (service.pas), line = 3582

	mwy BALL0 :bp2
	ldy #$1B
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3583

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3584

	sta BALL2.INPLAY
l_326D

; optimize OK (service.pas), line = 3588

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3590

	lda BALL0.INPLAY
	jeq l_3288
	inc BALLS_IN_PLAY
l_3288

; optimize OK (service.pas), line = 3591

	lda BALL1.INPLAY
	jeq l_329B
	inc BALLS_IN_PLAY
l_329B

; optimize OK (service.pas), line = 3592

	lda BALL2.INPLAY
	jeq l_32AE
	inc BALLS_IN_PLAY
l_32AE

; optimize OK (service.pas), line = 3595

	lda BALL0.INPLAY
	jne l_32C4

; optimize OK (service.pas), line = 3597

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3598

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3599

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3600

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3601

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3609

	jsr NOSOUND
l_32C4
l_308C

; optimize OK (service.pas), line = 3393

	lda REMAIN_BLK
	jeq l_308Dw
	lda BALL0.INPLAY
	jeq l_308Dw
	lda SCORE.ABORTPLAY
	jeq l_308D
l_308Dw

; optimize OK (service.pas), line = 3665

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3666

	lda REMAIN_BLK
	jne l_3312
	lda #$01
	sta RESULT
l_3312
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03BA
X	= DATAORIGIN+$03BB
Y	= DATAORIGIN+$03BD
KEY	= DATAORIGIN+$03BF
T1	= DATAORIGIN+$03C1
T2	= DATAORIGIN+$03C3
HLP	= DATAORIGIN+$03C5
adr.BALL0	= DATAORIGIN+$03C7	; [28] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$03C7
BALL0.Y	= DATAORIGIN+$03C9
BALL0.FINEX	= DATAORIGIN+$03CB
BALL0.FINEY	= DATAORIGIN+$03CD
BALL0.OLDX	= DATAORIGIN+$03CF
BALL0.OLDY	= DATAORIGIN+$03D1
BALL0.SPEED	= DATAORIGIN+$03D3
BALL0.FINESPEED	= DATAORIGIN+$03D5
BALL0.SPEEDX	= DATAORIGIN+$03D7
BALL0.SPEEDY	= DATAORIGIN+$03D9
BALL0.SBD	= DATAORIGIN+$03DB
BALL0.BRWHIT	= DATAORIGIN+$03DD
BALL0.INPLAY	= DATAORIGIN+$03DE
BALL0.LAUNCH	= DATAORIGIN+$03DF
BALL0.ONVAUS	= DATAORIGIN+$03E0
BALL0.STM	= DATAORIGIN+$03E2
adr.BALL1	= DATAORIGIN+$03E3	; [28] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$03E3
BALL1.Y	= DATAORIGIN+$03E5
BALL1.FINEX	= DATAORIGIN+$03E7
BALL1.FINEY	= DATAORIGIN+$03E9
BALL1.OLDX	= DATAORIGIN+$03EB
BALL1.OLDY	= DATAORIGIN+$03ED
BALL1.SPEED	= DATAORIGIN+$03EF
BALL1.FINESPEED	= DATAORIGIN+$03F1
BALL1.SPEEDX	= DATAORIGIN+$03F3
BALL1.SPEEDY	= DATAORIGIN+$03F5
BALL1.SBD	= DATAORIGIN+$03F7
BALL1.BRWHIT	= DATAORIGIN+$03F9
BALL1.INPLAY	= DATAORIGIN+$03FA
BALL1.LAUNCH	= DATAORIGIN+$03FB
BALL1.ONVAUS	= DATAORIGIN+$03FC
BALL1.STM	= DATAORIGIN+$03FE
adr.BALL2	= DATAORIGIN+$03FF	; [28] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$03FF
BALL2.Y	= DATAORIGIN+$0401
BALL2.FINEX	= DATAORIGIN+$0403
BALL2.FINEY	= DATAORIGIN+$0405
BALL2.OLDX	= DATAORIGIN+$0407
BALL2.OLDY	= DATAORIGIN+$0409
BALL2.SPEED	= DATAORIGIN+$040B
BALL2.FINESPEED	= DATAORIGIN+$040D
BALL2.SPEEDX	= DATAORIGIN+$040F
BALL2.SPEEDY	= DATAORIGIN+$0411
BALL2.SBD	= DATAORIGIN+$0413
BALL2.BRWHIT	= DATAORIGIN+$0415
BALL2.INPLAY	= DATAORIGIN+$0416
BALL2.LAUNCH	= DATAORIGIN+$0417
BALL2.ONVAUS	= DATAORIGIN+$0418
BALL2.STM	= DATAORIGIN+$041A
SCORES	= DATAORIGIN+$041B

@VarData	= X
@VarDataSize	= 100

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3689

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3747

	lda ST
	add #$01
	sta RESULT
	lda ST+1
	adc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0427
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0429
Y	= DATAORIGIN+$042B
ST	= DATAORIGIN+$042D
OLDX	= DATAORIGIN+$042F
OLDY	= DATAORIGIN+$0431
NEWX	= DATAORIGIN+$0433
NEWY	= DATAORIGIN+$0435

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3756

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3758

	lda #$01
	sta X

l_333B
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_3349

; optimize OK (service.pas), line = 3760

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3761

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3762

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3763

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3765

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_333B
l_3349

; optimize OK (service.pas), line = 3768

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0437

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3828

	jsr NOSOUND

; optimize OK (service.pas), line = 3829

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3840

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3878

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0438
X	= DATAORIGIN+$043A
Y	= DATAORIGIN+$043C
Z	= DATAORIGIN+$043E
K	= DATAORIGIN+$0440
IK	= DATAORIGIN+$0442

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3886

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3887

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_33A8
	lda #$00
	sta adr.SCORE.LIVES+$02
l_33A8

; optimize OK (service.pas), line = 3890

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3891

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3895

	jsr SET_WALL

; optimize OK (service.pas), line = 3897

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3898

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3905

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3906

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3907

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_33D7

; --- RepeatUntilProlog
l_33D8

; optimize OK (service.pas), line = 3917

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_33EA

; optimize FAIL (1, service.pas), line = 3919

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 3922

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3926

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_33EA

; optimize OK (service.pas), line = 3930

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3931

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 3936

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 3939

	jeq l_3438

; optimize OK (service.pas), line = 3942

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3945

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_3454

; optimize OK (service.pas), line = 3946

	lda #$01
	sta adr.SCORE.WALL_N,y
l_3454

; optimize OK (service.pas), line = 3949

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_3486
l_3438

; optimize OK (service.pas), line = 3955

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_349B
	jsr GAME_OVER
l_3486
l_349B

; optimize OK (service.pas), line = 3960

	lda NWALL
	jne l_33D8

; optimize FAIL (0, service.pas), line = 3963

	inc CUR_PLAYER

; optimize OK (service.pas), line = 3964

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_34C3
	lda #$01
	sta CUR_PLAYER
l_34C3

; optimize OK (service.pas), line = 3970

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_34DF
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_34DF

; optimize OK (service.pas), line = 3975

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_33D7

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$0444
NWALL	= DATAORIGIN+$0446

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 133

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 135

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 136

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$5E
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$58
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$52
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$64
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SHINEWALL.OFS
	lda #$83
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$9D
	sta MINIVAUS.OFS
	lda #$88
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$01
	sta LEVELSEL.OFS
	lda #$89
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$CC
	sta LETTERS.OFS
	lda #$90
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$CC
	sta NORMAL.OFS
	lda #$AC
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$AC
	sta LASERS.OFS
	lda #$AD
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$8C
	sta ENLARGED.OFS
	lda #$AE
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$4C
	sta SHOOTS.OFS
	lda #$B0
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$B4
	sta FLUX.OFS
	lda #$B0
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$FC
	sta BALLDATA.OFS
	lda #$B1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$15
	sta PATTERN0.OFS
	lda #$B2
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$85
	sta PATTERN1.OFS
	lda #$B4
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$49
	sta PATTERN2.OFS
	lda #$B5
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$7B
	sta PATTERN3.OFS
	lda #$BA
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$A7
	sta PATTERN4.OFS
	lda #$BD
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 143

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 145

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 148

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 149

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3609

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 156

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 158

	jeq l_361F
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_361F

; optimize OK (arkanoid_vbxe.pas), line = 161

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3609

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 169

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $15E00
VBXE_DIGIT	= $3C200
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.VBXE_RAM	= DATAORIGIN+$009E	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$009E
VBXE_RAM.SIZE	= DATAORIGIN+$00A2
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$008E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0099
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$00AF
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$00B8
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$00C2
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$00C6
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00D1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00DD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00C1	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00C1
BALLDATA.HEIGHT	= DATAORIGIN+$00C3
BALLDATA.OFS	= DATAORIGIN+$00C5
adr.PLAYSCREEN	= DATAORIGIN+$00C9	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00C9
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00CB
PLAYSCREEN.OFS	= DATAORIGIN+$00CD
adr.PLAYVAUS	= DATAORIGIN+$00D1	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00D1
PLAYVAUS.HEIGHT	= DATAORIGIN+$00D3
PLAYVAUS.OFS	= DATAORIGIN+$00D5
adr.NORMAL	= DATAORIGIN+$00D9	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00D9
NORMAL.HEIGHT	= DATAORIGIN+$00DB
NORMAL.OFS	= DATAORIGIN+$00DD
adr.ENLARGED	= DATAORIGIN+$00E1	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00E1
ENLARGED.HEIGHT	= DATAORIGIN+$00E3
ENLARGED.OFS	= DATAORIGIN+$00E5
adr.LASERS	= DATAORIGIN+$00E9	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00E9
LASERS.HEIGHT	= DATAORIGIN+$00EB
LASERS.OFS	= DATAORIGIN+$00ED
adr.EXPLOSION	= DATAORIGIN+$00F1	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00F1
EXPLOSION.HEIGHT	= DATAORIGIN+$00F3
EXPLOSION.OFS	= DATAORIGIN+$00F5
adr.NEWVAUS	= DATAORIGIN+$00F9	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00F9
NEWVAUS.HEIGHT	= DATAORIGIN+$00FB
NEWVAUS.OFS	= DATAORIGIN+$00FD
adr.PRESENTS	= DATAORIGIN+$0101	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0101
PRESENTS.HEIGHT	= DATAORIGIN+$0103
PRESENTS.OFS	= DATAORIGIN+$0105
adr.SHINEWALL	= DATAORIGIN+$0109	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$0109
SHINEWALL.HEIGHT	= DATAORIGIN+$010B
SHINEWALL.OFS	= DATAORIGIN+$010D
adr.MINIVAUS	= DATAORIGIN+$0111	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0111
MINIVAUS.HEIGHT	= DATAORIGIN+$0113
MINIVAUS.OFS	= DATAORIGIN+$0115
adr.LEVELSEL	= DATAORIGIN+$0119	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0119
LEVELSEL.HEIGHT	= DATAORIGIN+$011B
LEVELSEL.OFS	= DATAORIGIN+$011D
adr.LETTERS	= DATAORIGIN+$0121	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0121
LETTERS.HEIGHT	= DATAORIGIN+$0123
LETTERS.OFS	= DATAORIGIN+$0125
adr.SHOOTS	= DATAORIGIN+$0129	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0129
SHOOTS.HEIGHT	= DATAORIGIN+$012B
SHOOTS.OFS	= DATAORIGIN+$012D
adr.FLUX	= DATAORIGIN+$0131	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0131
FLUX.HEIGHT	= DATAORIGIN+$0133
FLUX.OFS	= DATAORIGIN+$0135
adr.VAUS	= DATAORIGIN+$0139	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0139
VAUS.Y	= DATAORIGIN+$013A
VAUS.OLDX	= DATAORIGIN+$013B
VAUS.OLDY	= DATAORIGIN+$013D
VAUS.OLDLEN	= DATAORIGIN+$013F
VAUS.WIDTH	= DATAORIGIN+$0141
VAUS.HEIGHT	= DATAORIGIN+$0142
VAUS.FLASH	= DATAORIGIN+$0143
VAUS.IFLASH	= DATAORIGIN+$0144
VAUS.LETTER	= DATAORIGIN+$0145
adr.PATTERN	= DATAORIGIN+$0146	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0146
PATTERN.HEIGHT	= DATAORIGIN+$0148
PATTERN.OFS	= DATAORIGIN+$014A
adr.PATTERN0	= DATAORIGIN+$014E	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$014E
PATTERN0.HEIGHT	= DATAORIGIN+$0150
PATTERN0.OFS	= DATAORIGIN+$0152
adr.PATTERN1	= DATAORIGIN+$0156	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$0156
PATTERN1.HEIGHT	= DATAORIGIN+$0158
PATTERN1.OFS	= DATAORIGIN+$015A
adr.PATTERN2	= DATAORIGIN+$015E	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$015E
PATTERN2.HEIGHT	= DATAORIGIN+$0160
PATTERN2.OFS	= DATAORIGIN+$0162
adr.PATTERN3	= DATAORIGIN+$0166	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$0166
PATTERN3.HEIGHT	= DATAORIGIN+$0168
PATTERN3.OFS	= DATAORIGIN+$016A
adr.PATTERN4	= DATAORIGIN+$016E	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$016E
PATTERN4.HEIGHT	= DATAORIGIN+$0170
PATTERN4.OFS	= DATAORIGIN+$0172
STATUS	= DATAORIGIN+$0176
SUCCESS	= DATAORIGIN+$0177
REMAIN_BLK	= DATAORIGIN+$0178
TOTALWALL	= DATAORIGIN+$0179
adr.SCORE	= DATAORIGIN+$017A	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$017A] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$0186] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$0189] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$018C
SCORE.PL_NUMB	= DATAORIGIN+$0190
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0191] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$0194
CUR_PLAYER	= DATAORIGIN+$0195
adr.SHINEREC	= DATAORIGIN+$0196	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$0196
SHINEREC.YB	= DATAORIGIN+$0197
SHINEREC.FRAME	= DATAORIGIN+$0198
SHINEREC.BLOCK	= DATAORIGIN+$0199
SHINEREC.ACTIVE	= DATAORIGIN+$019A
LV	= DATAORIGIN+$019B
TRAINER	= DATAORIGIN+$019D
adr.LETT	= DATAORIGIN+$019E	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$019E
LETT.Y	= DATAORIGIN+$019F
LETT.TYP	= DATAORIGIN+$01A0
LETT.FRAME	= DATAORIGIN+$01A2
LETT.SUBFRAME	= DATAORIGIN+$01A3
LETT.ACTIVE	= DATAORIGIN+$01A4
LETT.INCOMING	= DATAORIGIN+$01A5
LETT.NEXTX	= DATAORIGIN+$01A7
LETT.NEXTY	= DATAORIGIN+$01A9
LETT.NEXTTYPE	= DATAORIGIN+$01AB
LETT.LAST	= DATAORIGIN+$01AD
adr.FIRE	= DATAORIGIN+$01AF	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01AF
FIRE.Y	= DATAORIGIN+$01B0
FIRE.SHOT	= DATAORIGIN+$01B1
FIRE.AVL	= DATAORIGIN+$01B2
FIRE.NW	= DATAORIGIN+$01B3
BALLS_IN_PLAY	= DATAORIGIN+$01B4
SCRFLUX	= DATAORIGIN+$01B5
SCRFLUXCNT	= DATAORIGIN+$01B6
SOUND_ON	= DATAORIGIN+$01B7
OLD_SCORES	= DATAORIGIN+$01B8
HLP	= DATAORIGIN+$01BC
F_HLP	= DATAORIGIN+$01BE
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MODY	= $C200
.var MODY	= adr.MODY .word
adr.MODX	= $C300
.var MODX	= adr.MODX .word
adr.MOD90TABLE	= $C400
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD10TABLE	= $C500
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.SINTABLE	= $C600
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $27 $00 $00  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1095

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $06 $0C  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
