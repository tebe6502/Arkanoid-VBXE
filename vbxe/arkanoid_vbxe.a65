; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/30] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010183000
	sta X

; -------------------  ASM Block 00000007  -------------------

	lda :edx
	bpl @+

	eor #$ff
	add #1
@
	sta Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 902

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 903

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 904

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 906

	lda VALUE+3
	bne @+
	lda VALUE+2
	bne @+
	lda VALUE+1
	bne @+
	lda VALUE
@
	jne l_0054

; optimize OK (SYSTEM), line = 907

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0054

; optimize OK (SYSTEM), line = 910

	lda X+3
	jpl l_0072

; optimize OK (SYSTEM), line = 911

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 912

	lda X+3
	eor #$80
	sta X+3
l_0072
l_0062

; optimize OK (SYSTEM), line = 915

	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 916

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta Y
	lda :FPMAN1
	sta Y+1
	lda :FPMAN2
	sta Y+2
	lda :FPMAN3
	sta Y+3

; optimize OK (SYSTEM), line = 917

	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	lda #$4A
	sta :FP1MAN0
	lda #$D7
	sta :FP1MAN1
	lda #$3B
	sta :FP1MAN2
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$02
	sta :FP2MAN0
	lda #$6E
	sta :FP2MAN1
	lda #$84
	sta :FP2MAN2
	lda #$3C
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$FE
	sta :FP2MAN0
	lda #$C1
	sta :FP2MAN1
	lda #$2F
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$74
	sta :FP2MAN0
	lda #$31
	sta :FP2MAN1
	lda #$9A
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$83
	sta :FP2MAN0
	lda #$3D
	sta :FP2MAN1
	lda #$DA
	sta :FP2MAN2
	lda #$3D
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$C7
	sta :FP2MAN0
	lda #$7F
	sta :FP2MAN1
	lda #$11
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$E5
	sta :FP2MAN0
	lda #$BB
	sta :FP2MAN1
	lda #$4C
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$6C
	sta :FP2MAN0
	lda #$AA
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda Y
	sta :FP2MAN0
	lda Y+1
	sta :FP2MAN1
	lda Y+2
	sta :FP2MAN2
	lda Y+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 920

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 922

	lda SIGN
	jeq l_00F4

; optimize OK (SYSTEM), line = 923

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
	eor #$80
	jmp l_0105
l_00F4

; optimize OK (SYSTEM), line = 925

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0105
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
X	= DATAORIGIN+$0013
Y	= DATAORIGIN+$0017
SIGN	= DATAORIGIN+$001B

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000025  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000033  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	FSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_015B
l_015C

; optimize OK (SYSTEM), line = 1907

	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$C9
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_015B
	lda #$DB
	sta @FCMPL.A
	lda #$0F
	sta @FCMPL.A+1
	lda #$C9
	sta @FCMPL.A+2
	lda #$40
	sta @FCMPL.A+3
	lda X
	sta @FCMPL.B
	lda X+1
	sta @FCMPL.B+1
	lda X+2
	sta @FCMPL.B+2
	lda X+3
	sta @FCMPL.B+3
	jsr @FCMPL
	smi
	jne l_015C

; --- WhileProlog
	jmp l_0170
l_0171

; optimize OK (SYSTEM), line = 1908

	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$C9
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_0170
	lda X+3
	jmi l_0171

; optimize OK (SYSTEM), line = 1911

	lda #$83
	sta :FP2MAN0
	lda #$F9
	sta :FP2MAN1
	lda #$22
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1914

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta I

; optimize OK (SYSTEM), line = 1917

	lda X+3
	jpl l_019F
	dec I
l_019F

; optimize OK (SYSTEM), line = 1920

	ldy #$00
	lda I
	spl
	dey
	sta :FPMAN0
	sty :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1923

	lda SC
	jeq l_01BC
	inc I
l_01BC

; optimize OK (SYSTEM), line = 1926

	lda I
	and #$01
	jne l_01D9
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3
l_01D9

; optimize OK (SYSTEM), line = 1929

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta X
	lda :FPMAN1
	sta X+1
	lda :FPMAN2
	sta X+2
	lda :FPMAN3
	sta X+3

; optimize OK (SYSTEM), line = 1930

	lda #$42
	sta :FP2MAN0
	lda #$01
	sta :FP2MAN1
	lda #$5E
	sta :FP2MAN2
	lda #$3A
	sta :FP2MAN3
	lda X
	sta :FP1MAN0
	lda X+1
	sta :FP1MAN1
	lda X+2
	sta :FP1MAN2
	lda X+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda #$D3
	sta :FP1MAN0
	lda #$59
	sta :FP1MAN1
	lda #$A3
	sta :FP1MAN2
	lda #$3C
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$DE
	sta :FP2MAN0
	lda #$4D
	sta :FP2MAN1
	lda #$6F
	sta :FP2MAN2
	lda #$3E
	sta :FP2MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FADD
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 1933

	lda I
	and #$02
	cmp #$02
	jne l_0226
	lda RESULT+3
	eor #$80
	sta RESULT+3
l_0226
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$001C
SC	= DATAORIGIN+$0020
RESULT	= DATAORIGIN+$0021
I	= DATAORIGIN+$0025

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 1947

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$00
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0026
RESULT	= DATAORIGIN+$002A

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 1961

	lda X
	sta FSINCOS.X
	lda X+1
	sta FSINCOS.X+1
	lda X+2
	sta FSINCOS.X+2
	lda X+3
	sta FSINCOS.X+3
	lda #$01
	sta FSINCOS.SC
	jsr FSINCOS
	lda FSINCOS.RESULT
	sta RESULT
	lda FSINCOS.RESULT+1
	sta RESULT+1
	lda FSINCOS.RESULT+2
	sta RESULT+2
	lda FSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$002E
RESULT	= DATAORIGIN+$0032

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000043  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000045  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0036
RESULT	= DATAORIGIN+$0037

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_0266

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_0274
l_0266

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_0274
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0038
RESULT	= DATAORIGIN+$003A

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$003C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$003D
GETCOLOR	= DATAORIGIN+$003E
VIDEORAM	= DATAORIGIN+$003F
adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0041
LASTARCCOORDS.Y	= DATAORIGIN+$0043
LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
LASTARCCOORDS.XEND	= DATAORIGIN+$0049
LASTARCCOORDS.YEND	= DATAORIGIN+$004B
WIN_LEFT	= DATAORIGIN+$004D
WIN_RIGHT	= DATAORIGIN+$004F
WIN_TOP	= DATAORIGIN+$0051
WIN_BOTTOM	= DATAORIGIN+$0053
SCANLINE_WIDTH	= DATAORIGIN+$0055
CURRENTX	= DATAORIGIN+$0056
CURRENTY	= DATAORIGIN+$0058

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000100  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000101  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
	sta B

; -------------------  ASM Block 00000113  -------------------

	fxs FX_MEMS b

; ------------------------------------------------------------

B	= DATAORIGIN+$006E

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READVBXEMEMORYBYTE				; FUNCTION

; optimize OK (vbxe_memorystream.inc), line = 20

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 21

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 23

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 25

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda (:bp),y
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 27

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
@exit

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$006F
RESULT	= DATAORIGIN+$0071
BNK	= DATAORIGIN+$0072
ADR	= DATAORIGIN+$0073

@VarData	= POSITION
@VarDataSize	= 5

	rts						; ret
.endl

.local	WRITEVBXEMEMORYBYTE				; PROCEDURE

; optimize OK (vbxe_memorystream.inc), line = 39

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 40

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 42

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 44

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda A
	sta (:bp),y

; optimize OK (vbxe_memorystream.inc), line = 46

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$0075
A	= DATAORIGIN+$0077
BNK	= DATAORIGIN+$0078
ADR	= DATAORIGIN+$0079

@VarData	= POSITION
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.READBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 88

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 89

	dey
	lda (:bp2),y
	sta SRC
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta SRC+1

; optimize OK (vbxe_memorystream.inc), line = 91

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 93

	lda BUFFER
	sta DST
	lda BUFFER+1
	sta DST+1

; optimize OK (vbxe_memorystream.inc), line = 95

	lda COUNT
	sub #$01
	sta I
	lda COUNT+1
	sbc #$00
	sta I+1

l_0396
; --- ForToDoCondition
	ldy #$00
	lda (SRC),y
	sta (DST),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 99

	inc SRC
	sne
	inc SRC+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 100

	inc DST
	sne
	inc DST+1

; optimize OK (vbxe_memorystream.inc), line = 102

	lda SRC+1
	cmp #$C0
	jcc l_03C3
	bne @+
	lda SRC
	jcc l_03C3
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 103

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 104

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 105

	lda #$00
	sta SRC
	lda #$B0
	sta SRC+1
l_03C3

; --- ForToDoEpilog
	lda I
	bne @+
	lda I+1
	beq l_03A2
	dec I+1
@
	dec I
	jmp l_0396
l_03A2

; optimize OK (vbxe_memorystream.inc), line = 110

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 112

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0083
BUFFER	= DATAORIGIN+$0085
COUNT	= DATAORIGIN+$0087
POSITION	= DATAORIGIN+$0089
SIZE	= DATAORIGIN+$008B
BNK	= DATAORIGIN+$008D
I	= DATAORIGIN+$008E
SRC	= :STACKORIGIN-2
DST	= :STACKORIGIN-4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 126

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 127

	dey
	lda (:bp2),y
	sta DST
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta DST+1

; optimize OK (vbxe_memorystream.inc), line = 129

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 131

	lda BUFFER
	sta SRC
	lda BUFFER+1
	sta SRC+1

; optimize OK (vbxe_memorystream.inc), line = 133

	lda COUNT
	sub #$01
	sta I
	lda COUNT+1
	sbc #$00
	sta I+1

l_040E
; --- ForToDoCondition
	ldy #$00
	lda (SRC),y
	sta (DST),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 137

	inc DST
	sne
	inc DST+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 138

	inc SRC
	sne
	inc SRC+1

; optimize OK (vbxe_memorystream.inc), line = 140

	lda DST+1
	cmp #$C0
	jcc l_043B
	bne @+
	lda DST
	jcc l_043B
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 141

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 142

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 143

	lda #$00
	sta DST
	lda #$B0
	sta DST+1
l_043B

; --- ForToDoEpilog
	lda I
	bne @+
	lda I+1
	beq l_041A
	dec I+1
@
	dec I
	jmp l_040E
l_041A

; optimize OK (vbxe_memorystream.inc), line = 148

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 150

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0090
BUFFER	= DATAORIGIN+$0092
COUNT	= DATAORIGIN+$0094
POSITION	= DATAORIGIN+$0096
SIZE	= DATAORIGIN+$0098
BNK	= DATAORIGIN+$009A
I	= DATAORIGIN+$009B
DST	= :STACKORIGIN-2
SRC	= :STACKORIGIN-4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 160

	lda POSITION
	sta READVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta READVBXEMEMORYBYTE.POSITION+1
	jsr READVBXEMEMORYBYTE
	lda READVBXEMEMORYBYTE.RESULT
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 162

	lda #$00
	jsr VBXEMEMORYBANK
@exit

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$009D
RESULT	= DATAORIGIN+$009F
POSITION	= DATAORIGIN+$00A0
SIZE	= DATAORIGIN+$00A2

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 6

	rts						; ret
.endl

.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 200

	lda POSITION
	sta WRITEVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta WRITEVBXEMEMORYBYTE.POSITION+1
	lda B
	sta WRITEVBXEMEMORYBYTE.A
	jsr WRITEVBXEMEMORYBYTE

; optimize OK (vbxe_memorystream.inc), line = 202

	lda #$00
	jsr VBXEMEMORYBANK

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00AC
B	= DATAORIGIN+$00AE
POSITION	= DATAORIGIN+$00AF
SIZE	= DATAORIGIN+$00B1

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000114  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00BB
POSITION	= DATAORIGIN+$00BD
SIZE	= DATAORIGIN+$00BF
ADR	= DATAORIGIN+$00C1
SIZ	= DATAORIGIN+$00C5

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000123  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_04B2
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_04B2
	cmp #$1F
	jne l_04C1

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_04C1
	cmp #$18
	jne l_04D0

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_04D0

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000124  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$00C9
S	= DATAORIGIN+$00CA
@CASETMP_0005	= DATAORIGIN+$00CC

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$00CD

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000126  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$00CE
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000130  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$00D2

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0066
VRAM.SIZE	= DATAORIGIN+$006A
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00DB

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00DD
B	= DATAORIGIN+$00DF

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SQRT32						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 90

	lda #$00
	sta Q
	sta Q+1
	sta Q+2
	sta Q+3

; optimize OK (arkanoid_vbxe.pas), line = 91

	sta B
	sta B+1
	sta B+2
	lda #$40

; --- WhileProlog
	jmp l_0513
l_0514

; optimize OK (arkanoid_vbxe.pas), line = 93

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
l_0513
	sta B+3
	cmp R+3
	bne @+
	lda B+2
	cmp R+2
	bne @+
	lda B+1
	cmp R+1
	bne @+
	lda B
	cmp R
@
	beq @+
	jcs l_0514
@

; --- WhileProlog
	jmp l_0528
l_0529

; optimize OK (arkanoid_vbxe.pas), line = 96

	lda Q
	add B
	sta T
	lda Q+1
	adc B+1
	sta T+1
	lda Q+2
	adc B+2
	sta T+2
	lda Q+3
	adc B+3
	sta T+3

; optimize OK (arkanoid_vbxe.pas), line = 98

	lsr Q+3
	ror Q+2
	ror Q+1
	ror Q

; optimize OK (arkanoid_vbxe.pas), line = 100

	lda R+3
	cmp T+3
	bne @+
	lda R+2
	cmp T+2
	bne @+
	lda R+1
	cmp T+1
	bne @+
	lda R
	cmp T
@
	jcc l_0549

; optimize OK (arkanoid_vbxe.pas), line = 101

	lda R
	sbc T
	sta R
	lda R+1
	sbc T+1
	sta R+1
	lda R+2
	sbc T+2
	sta R+2
	lda R+3
	sbc T+3
	sta R+3

; optimize OK (arkanoid_vbxe.pas), line = 102

	lda Q
	add B
	sta Q
	lda Q+1
	adc B+1
	sta Q+1
	lda Q+2
	adc B+2
	sta Q+2
	lda Q+3
	adc B+3
	sta Q+3
l_0549

; optimize OK (arkanoid_vbxe.pas), line = 105

	lda B
	sta :STACKORIGIN+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda B+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta B
	lda :STACKORIGIN+STACKWIDTH+9
	sta B+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta B+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta B+3
l_0528

; optimize OK (arkanoid_vbxe.pas), line = 95

	lda B+3
	cmp #$00
	bne @+
	lda B+2
	cmp #$00
	bne @+
	lda B+1
	cmp #$00
	bne @+
	lda B
	cmp #$00
@
	beq @+
	jcs l_0529
@

; optimize OK (arkanoid_vbxe.pas), line = 109

	lda Q
	sta RESULT
	lda Q+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

R	= DATAORIGIN+$00E1
RESULT	= DATAORIGIN+$00E5
B	= DATAORIGIN+$00E7
Q	= DATAORIGIN+$00EB
T	= DATAORIGIN+$00EF

@VarData	= R
@VarDataSize	= 16

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 301

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 303

	sta @CASETMP_0007
	cmp #$0B
	jne l_058B
@

; optimize OK (service.pas), line = 304

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_059C
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_059C
	jmp a_0007
l_058B
	cmp #$07
	jne l_05A7

; optimize OK (service.pas), line = 305

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_05B8
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_05B8
l_05A7
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$01FC
A	= DATAORIGIN+$01FE
@CASETMP_0007	= DATAORIGIN+$01FF

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 315

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0200

	rts						; ret
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000141  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 328

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 329

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 330

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 332

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 333

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 334

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 336

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 337

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 339

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 340

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 342

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 343

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 345

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 347

	lda #$00
	sta BLT.BLT_ZOOM

; optimize OK (service.pas), line = 349

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000142  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 355

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0201
DST	= DATAORIGIN+$0205
W	= DATAORIGIN+$0209
H	= DATAORIGIN+$020B

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000143  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 371

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 372

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 373

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 375

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 376

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 377

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 379

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 380

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 382

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 384

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 385

	lda W
	sta BLT.SRC_STEP_Y
	lda W+1
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 387

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 389

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 391

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000144  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 398

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$020C
DST	= DATAORIGIN+$0210
W	= DATAORIGIN+$0214
H	= DATAORIGIN+$0216

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTMP						; PROCEDURE

; optimize OK (service.pas), line = 410

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 412

	lda TMP
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda TMP+1
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda SIZE
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER

; ------------------------------------------------------------

DST	= DATAORIGIN+$0217
SIZE	= DATAORIGIN+$021B

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000145  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 428

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 429

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 430

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 432

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 433

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 434

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 436

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 437

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 439

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 440

	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 442

	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 443

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 445

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 447

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000146  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 453

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$021C
DST	= DATAORIGIN+$0220
SIZE	= DATAORIGIN+$0224

@VarData	= SRC
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (service.pas), line = 480

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 481

	lda V
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

DST	= DATAORIGIN+$0226
V	= DATAORIGIN+$022A

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (service.pas), line = 491

	lda SRC
	sta VBXE_RAM.POSITION
	lda SRC+1
	sta VBXE_RAM.POSITION+1
	lda SRC+2
	sta VBXE_RAM.POSITION+2
	lda SRC+3
	sta VBXE_RAM.POSITION+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 492

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
	lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

SRC	= DATAORIGIN+$022B
RESULT	= DATAORIGIN+$022F

@VarData	= SRC
@VarDataSize	= 4

	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0230

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 618

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_071F
	lda A
	sta RESULT
	lda A+1
	jmp l_072E
l_071F

; optimize OK (service.pas), line = 619

	lda B
	sta RESULT
	lda B+1
l_072E
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0232
B	= DATAORIGIN+$0234
RESULT	= DATAORIGIN+$0236

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 625

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_0749
	lda A
	sta RESULT
	lda A+1
	jmp l_0758
l_0749

; optimize OK (service.pas), line = 626

	lda B
	sta RESULT
	lda B+1
l_0758
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0238
B	= DATAORIGIN+$023A
RESULT	= DATAORIGIN+$023C

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 635

	sta STATUS

; -------------------  ASM Block 00000147  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$023E

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 683

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 685

	sta Y

l_0778
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_0798

; optimize OK (service.pas), line = 688

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_07A9
l_0798

; optimize OK (service.pas), line = 690

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_07A9
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 692

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_0778
l_0786

; ------------------------------------------------------------

Y	= DATAORIGIN+$023F

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 708

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_07CD

; optimize FAIL ('@print', service.pas), line = 709

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_07CD

; optimize OK (service.pas), line = 713

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 714

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 716

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 718

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 719

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 721

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 722

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 723

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 725

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 731

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 775

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 776

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 778

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 780

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_0820

; optimize OK (service.pas), line = 782

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 783

	lda adr.WALL,y
	cmp #$0A
	jeq l_0840
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_0840

; optimize OK (service.pas), line = 785

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 786

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 787

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 789

	lda #$00
	sta Y

l_0870
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_087E

; optimize OK (service.pas), line = 791

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 794

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_0870
l_087E
l_0820

; optimize FAIL (0, service.pas), line = 798

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 799

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_08C5
	lda #$00
	sta SHINEREC.ACTIVE
l_08C5

; ------------------------------------------------------------

XB	= DATAORIGIN+$0240
YB	= DATAORIGIN+$0242
FRAME	= DATAORIGIN+$0244
XF	= DATAORIGIN+$0246
YF	= DATAORIGIN+$0248
FR	= DATAORIGIN+$024A
OG	= DATAORIGIN+$024C
Y	= DATAORIGIN+$024E
I	= DATAORIGIN+$024F

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 808

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 809

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 816

	lda SHINEREC.ACTIVE
	jeq l_08E5
	jsr UNSHINE_BLOCK
l_08E5

; optimize OK (service.pas), line = 818

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 819

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 820

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 821

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 822

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0250
YB	= DATAORIGIN+$0251

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 828

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_0926
	jsr SHINE_BLOCK
l_0926

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_092F

; optimize OK (service.pas), line = 836

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 837

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 838

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_093D

; optimize FAIL (0, service.pas), line = 843

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 844

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 847

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_093D

; optimize OK (service.pas), line = 851

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_092F

; optimize OK (service.pas), line = 853

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0252
RN	= DATAORIGIN+$0254
SUM	= DATAORIGIN+$0256
LETTER	= DATAORIGIN+$0258

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

	jmp l_0971

.local	BLITLETTER					; PROCEDURE

; -------------------  ASM Block 00000150  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 870

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 871

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 872

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 874

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 875

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 876

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 878

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 879

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 881

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 883

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 884

	lda #$80
	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 886

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 888

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 890

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000151  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 897

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$025F
DST	= DATAORIGIN+$0263
W	= DATAORIGIN+$0267
H	= DATAORIGIN+$0269

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0971

; optimize OK (service.pas), line = 904

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 906

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta BLITLETTER.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITLETTER.DST+1
	lda #$00
	adc #$00
	sta BLITLETTER.DST+2
	lda #$00
	adc #$00
	sta BLITLETTER.DST+3
	lda LETTERS.OFS
	add FL
	sta BLITLETTER.SRC
	lda LETTERS.OFS+1
	adc FL+1
	sta BLITLETTER.SRC+1
	lda LETTERS.OFS+2
	adc #$00
	sta BLITLETTER.SRC+2
	lda LETTERS.OFS+3
	adc #$00
	sta BLITLETTER.SRC+3
	lda #$10
	sta BLITLETTER.W
	lda #$00
	sta BLITLETTER.W+1
	lda #$08
	sta BLITLETTER.H
	jsr BLITLETTER

; ------------------------------------------------------------

FL	= DATAORIGIN+$025A
FW	= DATAORIGIN+$025C
YL	= DATAORIGIN+$025E

@VarData	= FL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 926

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 928

	lda LETT.Y
	cmp #$C8
	jcs l_0A1A

; optimize OK (service.pas), line = 929

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_0A1A

; ------------------------------------------------------------

YL	= DATAORIGIN+$026A

@VarData	= YL
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 947

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 948

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 954

	lda LETT.ACTIVE
	jeq l_0A45
	jsr DISABLE_LETTER
l_0A45

; optimize OK (service.pas), line = 956

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 957

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 958

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 959

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 960

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 961

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$026B
YL	= DATAORIGIN+$026D
LETTER	= DATAORIGIN+$026F

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 967

	lda LETT.ACTIVE
	jeq l_0A74

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 969

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 970

	inc LETT.Y

; optimize OK (service.pas), line = 971

	lda LETT.Y
	cmp #$C8
	jcc l_0A8C
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 972
	jmp l_0A97
l_0A8C

; optimize FAIL ('PUT_LETTER', service.pas), line = 974

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 975

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 976

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0AAE

; optimize OK (service.pas), line = 978

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 979

	inc LETT.FRAME
l_0AAE

; optimize OK (service.pas), line = 982

	lda LETT.FRAME
	cmp #$08
	jne l_0ACB
	lda #$00
	sta LETT.FRAME
l_0ACB

; optimize OK (service.pas), line = 984

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0B24
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0B24
	jeq l_0B24
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0B24
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0B24
	jeq l_0B24
@

; optimize OK (service.pas), line = 987

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 988

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 989

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0A97

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 990

	jsr DISABLE_LETTER
l_0B24

; optimize OK (service.pas), line = 994

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0B45
l_0A74

; optimize OK (service.pas), line = 996

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0B56

; optimize OK (service.pas), line = 997

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0B45
l_0B56

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 1007

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0271	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0271
BTM.HEIGHT	= DATAORIGIN+$0273
BTM.OFS	= DATAORIGIN+$0275

@VarData	= BTM.WIDTH
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1028

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1030

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda BALLDATA.OFS
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0279
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1057

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1059

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$027D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1093

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1105

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$FF
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jeq l_0BD6s
	ldy #BALL.OLDY-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$FF
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jeq l_0BD6s
	lda:sne #$01
l_0BD6s	lda #$00
	sta B0

; optimize OK (service.pas), line = 1106

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #BALL.X-DATAORIGIN+$01
	cmp (:bp2),y
	bne @+
	dey
	lda :STACKORIGIN+9
	cmp (:bp2),y
@
	bne @+
	jmp *+6
@\	jmp l_0BEEs
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #BALL.Y-DATAORIGIN+$01
	cmp (:bp2),y
	bne @+
	dey
	lda :STACKORIGIN+10
	cmp (:bp2),y
@
	bne @+
	jmp *+6
@\	jmp l_0BEEs
	lda:seq #$00
l_0BEEs	lda #$01
	sta B1

; optimize OK (service.pas), line = 1108

	lda B0
	and B1
	jeq l_0C00

; optimize OK (service.pas), line = 1109

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0C00

; optimize OK (service.pas), line = 1111

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1113

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1114

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0281
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$0285
B1	= DATAORIGIN+$0286

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1127

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1128

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 1130

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta A+1

; optimize OK (service.pas), line = 1131

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta B+1

; optimize OK (service.pas), line = 1133

	lda A
	sta :ecx
	sta :eax
	lda A+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B
	sta :ecx
	sta :eax
	lda B+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta I+3

; optimize OK (service.pas), line = 1135

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta HLP
	lda SQRT32.RESULT+1
	sta HLP+1

; optimize OK (service.pas), line = 1137

	lda HLP
	sta :FPMAN0
	lda HLP+1
	sta :FPMAN1
	lda #$00
	sta :FPMAN2
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda SPEED
	sta :FPMAN0
	ldy #$00
	lda SPEED+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3

; optimize OK (service.pas), line = 1142

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1143

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0287
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
SPEED	= DATAORIGIN+$028B
SX	= DATAORIGIN+$028D
SY	= DATAORIGIN+$028F
VM	= DATAORIGIN+$0291
I	= DATAORIGIN+$0295
A	= DATAORIGIN+$0299
B	= DATAORIGIN+$029B

@VarData	= BALL
@VarDataSize	= 20

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1151

	lda ANGLE
	sta :FPMAN0
	ldy #$00
	lda ANGLE+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$35
	sta :FP2MAN0
	lda #$FA
	sta :FP2MAN1
	lda #$8E
	sta :FP2MAN2
	lda #$3C
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1
	lda :FPMAN2
	sta W+2
	lda :FPMAN3
	sta W+3

; optimize FAIL (1, service.pas), line = 1153

	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.COS.@01018F000.X
	lda W+1
	sta SYSTEM.COS.@01018F000.X+1
	lda W+2
	sta SYSTEM.COS.@01018F000.X+2
	lda W+3
	sta SYSTEM.COS.@01018F000.X+3
	jsr SYSTEM.COS.@01018F000
	inx
	mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH,x
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FMUL
	dex
	lda :FPMAN0
	sta :FPMAN0
	lda :FPMAN1
	sta :FPMAN1
	lda :FPMAN2
	sta :FPMAN2
	lda :FPMAN3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta :STACKORIGIN,x
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y

; optimize FAIL (1, service.pas), line = 1154

	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.SIN.@01018F000.X
	lda W+1
	sta SYSTEM.SIN.@01018F000.X+1
	lda W+2
	sta SYSTEM.SIN.@01018F000.X+2
	lda W+3
	sta SYSTEM.SIN.@01018F000.X+3
	jsr SYSTEM.SIN.@01018F000
	inx
	mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH,x
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FMUL
	dex
	lda :FPMAN0
	sta :FPMAN0
	lda :FPMAN1
	sta :FPMAN1
	lda :FPMAN2
	sta :FPMAN2
	lda :FPMAN3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta :STACKORIGIN,x
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$029D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
ANGLE	= DATAORIGIN+$02A1
W	= DATAORIGIN+$02A3

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1162

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0C99
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0CB5
l_0C99

; optimize OK (service.pas), line = 1168

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1170

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.VALUE
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.VALUE+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.VALUE+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$49
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1172

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1174

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0CE4
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0CE4

; optimize OK (service.pas), line = 1176

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01
	sta W+1

; optimize OK (service.pas), line = 1177

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda W
	sta @SMALLINT.MOD.A
	lda W+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta W
	lda @SMALLINT.MOD.RESULT+1
	sta W+1
l_0CB5

; optimize OK (service.pas), line = 1180

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02A7
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
RESULT	= DATAORIGIN+$02AB
W	= DATAORIGIN+$02AD

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1189

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1195

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1200

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1201

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1203

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1205

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1206

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02AF
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1B
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1218

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta A+1

; optimize OK (service.pas), line = 1219

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta B+1

; optimize OK (service.pas), line = 1221

	lda A
	sta :ecx
	sta :eax
	lda A+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B
	sta :ecx
	sta :eax
	lda B+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta I+3

; optimize OK (service.pas), line = 1223

	lda I
	sta SQRT32.R
	lda I+1
	sta SQRT32.R+1
	lda I+2
	sta SQRT32.R+2
	lda I+3
	sta SQRT32.R+3
	jsr SQRT32
	lda SQRT32.RESULT
	sta RESULT
	lda SQRT32.RESULT+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$02B3	; [28] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$02B3
BALL.Y	= DATAORIGIN+$02B5
BALL.FINEX	= DATAORIGIN+$02B7
BALL.FINEY	= DATAORIGIN+$02B9
BALL.OLDX	= DATAORIGIN+$02BB
BALL.OLDY	= DATAORIGIN+$02BD
BALL.SPEED	= DATAORIGIN+$02BF
BALL.FINESPEED	= DATAORIGIN+$02C1
BALL.SPEEDX	= DATAORIGIN+$02C3
BALL.SPEEDY	= DATAORIGIN+$02C5
BALL.SBD	= DATAORIGIN+$02C7
BALL.BRWHIT	= DATAORIGIN+$02C9
BALL.INPLAY	= DATAORIGIN+$02CA
BALL.LAUNCH	= DATAORIGIN+$02CB
BALL.ONVAUS	= DATAORIGIN+$02CC
BALL.STM	= DATAORIGIN+$02CE
RESULT	= DATAORIGIN+$02CF
I	= DATAORIGIN+$02D1
A	= DATAORIGIN+$02D5
B	= DATAORIGIN+$02D7

@VarData	= BALL.X
@VarDataSize	= 36

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1241

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1242

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1244

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1245

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1247

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1248

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1253

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0DAF

; optimize OK (service.pas), line = 1255

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1256

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1257

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1258

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0DAF

; optimize OK (service.pas), line = 1263

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0DE4

; optimize OK (service.pas), line = 1265

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1266

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1267

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1268

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0DE4

; optimize OK (service.pas), line = 1273

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0E19

; optimize OK (service.pas), line = 1275

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1276

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1277

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1278

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0E19

; optimize OK (service.pas), line = 1286

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1287

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1288

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	sta B2

; optimize OK (service.pas), line = 1291

	lda B0
	and B1
	and B2
	jeq l_0E7A

; optimize OK (service.pas), line = 1295

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0EA9
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	lda (:bp2),y
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_0EA9

; optimize OK (service.pas), line = 1298

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1300

	lda VAUS.LETTER
	cmp #$06
	jne l_0ECD
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0ECD

; optimize OK (service.pas), line = 1302

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1303

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1304

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0ECD

; optimize OK (service.pas), line = 1307

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1311

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc :STACKORIGIN+STACKWIDTH+10
	svc
	eor #$80
	jpl l_0EFD

; optimize OK (service.pas), line = 1314

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1318

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1326

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1331

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0EFD

; optimize OK (service.pas), line = 1337

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0F3E

; optimize OK (service.pas), line = 1339

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1340

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1341

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1342

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F3E
l_0EA9
l_0E7A

; optimize OK (service.pas), line = 1354

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0F8D

; optimize OK (service.pas), line = 1356

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1358

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0F8D

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02D9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
B0	= DATAORIGIN+$02DD
B1	= DATAORIGIN+$02DE
B2	= DATAORIGIN+$02DF
X	= DATAORIGIN+$02E0
Y	= DATAORIGIN+$02E2
ANGLE	= DATAORIGIN+$02E4

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1365

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1366

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1367

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1372

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1373

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1375

	lda #$FF
	sta VAUS.OLDX
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1376

	sta VAUS.OLDY
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1377

	lda #$00
	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1381

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1385

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1386

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1387

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1388

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1397

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1398

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1412

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1414

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1422

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1431

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1433

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_1029

; optimize FAIL (0, service.pas), line = 1435

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1436

	lda #$00
	sta VAUS.IFLASH
l_1029

; optimize OK (service.pas), line = 1439

	lda VAUS.FLASH
	cmp #$0B
	jcc l_1046
	lda #$00
	sta VAUS.FLASH
l_1046

; optimize OK (service.pas), line = 1449

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 1451

	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_105D_0

l_1060
; --- ForToDoCondition
	lda @FORTMP_105D_0::#$00
	cmp Y
	jcc l_106E

; optimize OK (service.pas), line = 1457

	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	add HLP
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	adc HLP+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$01
	sta BLITZERO.H
	jsr BLITZERO

; optimize OK (service.pas), line = 1459

	lda Y
	cmp #$02
	jcc l_10B2
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_10B2

; optimize OK (service.pas), line = 1462

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (service.pas), line = 1465

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$50
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add VAUS.Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_10B2

; optimize OK (service.pas), line = 1468

	lda HLP
	add VAUS.WIDTH
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_1060
l_106E

; ------------------------------------------------------------

Y	= DATAORIGIN+$02E6

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1479

	ldy #1
	lda VAUS.OLDX+1
	cmp #$FF
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_112E

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1480

	jsr REMOVE_VAUS
l_112E

; optimize OK (service.pas), line = 1482

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1483

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1490

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1491

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1493

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$02E8
Y	= DATAORIGIN+$02EA

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1508

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1509

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1511

	lda #$00
	sta Y

l_1186
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_1194

; optimize OK (service.pas), line = 1513

	lda YS
	adc Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (service.pas), line = 1521

	lda Y
	add YS
	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1523

	lda #$00
	sta I

; optimize OK (service.pas), line = 1525

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1526

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$10
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1528

	lda PATTERN.OFS
	add YH
	sta VBXE_RAM.POSITION
	lda PATTERN.OFS+1
	adc YH+1
	sta VBXE_RAM.POSITION+1
	lda PATTERN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PATTERN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1529

	lda SCANLINE2
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE2+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$28
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1531

	lda #$00
	sta X

l_11E3
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_11F1

; optimize OK (service.pas), line = 1532

	adc XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_1209

; optimize OK (service.pas), line = 1539

	ldy X
	lda adr.SCANLINE,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1544

	lda X
	add XS
	tay
	lda adr.MODX,y
	tay
	lda adr.SCANLINE2,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1546

	ldy I
	sta adr.TMP,y

; optimize FAIL (0, service.pas), line = 1547

	inc I
l_1209

; --- ForToDoEpilog
	inc X
	jne l_11E3
l_11F1

; optimize OK (service.pas), line = 1559

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda I
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 1561

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda I
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_1186
l_1194

; optimize OK (service.pas), line = 1571

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1278_0

l_127B
; --- ForToDoCondition
	lda @FORTMP_1278_0::#$00
	cmp Y
	jcc l_1289

; optimize OK (service.pas), line = 1573

	ldy Y
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1575

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1576

	lda TMP
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda TMP+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$20
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1578

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_12B6_0

l_12B9
; --- ForToDoCondition
	lda @FORTMP_12B6_0::#$00
	cmp X
	jcc l_12C7

; optimize OK (service.pas), line = 1594

	lda X
	cmp #$D8
	jcs l_12D9

; optimize OK (service.pas), line = 1599

	sub XS
	sta :STACKORIGIN+9
	lda X
	sub XS
	tay
	lda adr.TMP,y
	ora #$80
	ldy :STACKORIGIN+9
	sta adr.TMP,y
l_12D9

; --- ForToDoEpilog
	inc X
	jne l_12B9
l_12C7

; optimize OK (service.pas), line = 1616

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda #$20
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 1618

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda #$20
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_127B
l_1289

; ------------------------------------------------------------

XA	= DATAORIGIN+$02EC
YA	= DATAORIGIN+$02ED
X	= DATAORIGIN+$02EE
Y	= DATAORIGIN+$02EF
I	= DATAORIGIN+$02F0
XS	= DATAORIGIN+$02F1
YS	= DATAORIGIN+$02F2
YH	= DATAORIGIN+$02F3
CL	= DATAORIGIN+$02F5
SHADOW	= DATAORIGIN+$02F6

@VarData	= XA
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1635

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1636

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1638

	lda #$00
	sta Y

l_1341
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_134F

; optimize OK (service.pas), line = 1640

	lda YS
	adc Y
	tay
	lda XS
	add adr.ROW,y
	sta HLP
	lda XS+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1642

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1643

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$10
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1645

	lda #$00
	sta X

l_1377
; --- ForToDoCondition
	ldy X
	cpy #$10
	jcs l_1385

; optimize OK (service.pas), line = 1651

	lda adr.SCANLINE,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1653

	lda Y
	cmp #$07
	jcs l_13B0
	lda X
	cmp #$0F
	jcs l_13B0

; optimize OK (service.pas), line = 1658

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1660

	ldy X
	jmp l_13DE
l_13B0

; optimize OK (service.pas), line = 1673

	ldy X
	lda SHADOW
l_13DE
	sta adr.TMP,y

; --- ForToDoEpilog
	inc X
	jne l_1377
l_1385

; optimize OK (service.pas), line = 1684

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda #$10
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 1686

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_1341
l_134F

; optimize OK (service.pas), line = 1692

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1417_0

l_141A
; --- ForToDoCondition
	lda @FORTMP_1417_0::#$00
	cmp Y
	jcc l_1428

; optimize OK (service.pas), line = 1696

	ldy Y
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; optimize OK (service.pas), line = 1698

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1699

	lda TMP
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda TMP+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$20
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1701

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1452_0

l_1455
; --- ForToDoCondition
	lda @FORTMP_1452_0::#$00
	cmp X
	jcc l_1463

; optimize OK (service.pas), line = 1702

	lda X
	cmp #$D8
	jcs l_1475

; optimize OK (service.pas), line = 1711

	sub XS
	sta :STACKORIGIN+9
	lda X
	sub XS
	tay
	lda adr.TMP,y
	and #$7F
	ldy :STACKORIGIN+9
	sta adr.TMP,y
l_1475

; --- ForToDoEpilog
	inc X
	jne l_1455
l_1463

; optimize OK (service.pas), line = 1727

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda #$20
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 1729

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda #$20
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_141A
l_1428

; optimize OK (service.pas), line = 1734

	lda BLOCK
	cmp #$09
	jcc l_14C4

; optimize OK (service.pas), line = 1736

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1737

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_14DF

; optimize OK (service.pas), line = 1739

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1740

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_14FE
l_14DF

; optimize OK (service.pas), line = 1746

	lda BLOCK
	cmp #$0A
	jne l_1510
	lda #$C9
	sta CL2
l_14FE
l_1510

; optimize OK (service.pas), line = 1750

	lda #$00
	sta Y

l_1520
; --- ForToDoCondition
	lda Y
	cmp #$07
	jcs l_152E

; optimize OK (service.pas), line = 1753

	adc YS
	tay
	lda XS
	add adr.ROW,y
	sta HLP
	lda XS+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1758

	lda PLAYSCREEN.OFS
	add HLP
	sta GETBYTE.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta GETBYTE.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta GETBYTE.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1760

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1764

	lda HLP
	sta PUTBYTE.DST
	lda #$50
	add HLP+1
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1768

	lda PLAYSCREEN.OFS
	add HLP
	sta PUTBYTE.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta PUTBYTE.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta PUTBYTE.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_1520
l_152E

; optimize OK (service.pas), line = 1771

	ldy YS
	lda XS
	add adr.ROW,y
	sta HLP
	lda XS+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1773

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 1774

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$0F
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 1777

	lda #$00
	tay

l_1599
; --- ForToDoCondition
	cpy #$0F
	jcs l_15A7

; optimize OK (service.pas), line = 1783

	lda adr.SCANLINE,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1785

	lda CL2
	and #$7F
	ora CL
	sta adr.TMP,y

; --- ForToDoEpilog
	iny
	jne l_1599
l_15A7
	sty X

; optimize OK (service.pas), line = 1794

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda #$0F
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 1796

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda #$0F
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_14C4

; ------------------------------------------------------------

XA	= DATAORIGIN+$02F9
YA	= DATAORIGIN+$02FA
BLOCK	= DATAORIGIN+$02FB
X	= DATAORIGIN+$02FC
Y	= DATAORIGIN+$02FD
I	= DATAORIGIN+$02FE
XS	= DATAORIGIN+$02FF
YS	= DATAORIGIN+$0301
CL	= DATAORIGIN+$0303
CL2	= DATAORIGIN+$0304
SHADOW	= DATAORIGIN+$0305

@VarData	= XA
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1808

	lda #$00
	sta Y

l_15F1
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_15FF

; optimize OK (service.pas), line = 1809

	lda #$00
	sta X

l_1608
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1616

; optimize OK (service.pas), line = 1810

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1635
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_1635

; --- ForToDoEpilog
	inc X
	jne l_1608
l_1616

; --- ForToDoEpilog
	inc Y
	jne l_15F1
l_15FF

; ------------------------------------------------------------

X	= DATAORIGIN+$0308
Y	= DATAORIGIN+$0309

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1819

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1820

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1823

	lda #$00
	sta Y

l_1673
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_1681

; optimize OK (service.pas), line = 1824

	lda #$00
	sta X

l_168A
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1698

; optimize OK (service.pas), line = 1827

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_16D0
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_16D0
	inc REMAIN_BLK
l_16D0

; --- ForToDoEpilog
	inc X
	jne l_168A
l_1698

; --- ForToDoEpilog
	inc Y
	jne l_1673
l_1681

; optimize OK (service.pas), line = 1829

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1831

	sta @CASETMP_0008
	cmp #$00
	jne l_16FA
@

; optimize OK (service.pas), line = 1832

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_16FA
	cmp #$01
	jne l_1703

; optimize OK (service.pas), line = 1833

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_1703
	cmp #$02
	jne l_170C

; optimize OK (service.pas), line = 1834

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_170C
	cmp #$03
	jne l_1715

; optimize OK (service.pas), line = 1835

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1715
	cmp #$04
	jne l_171E

; optimize OK (service.pas), line = 1836

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_171E
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$030A
Y	= DATAORIGIN+$030B
WL	= DATAORIGIN+$030C
@CASETMP_0008	= DATAORIGIN+$030D

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1875

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1876

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1877

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1878

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1880

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1882

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1883

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1884

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1885

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1887

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1888

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1889

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1890

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1892

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1893

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1894

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1895

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1902

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_17A7

; optimize OK (service.pas), line = 1903

	lda #$01
	jsr FATAL_ERROR
l_17A7

; optimize OK (service.pas), line = 1906

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_17CAx
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_17CA
l_17CAx

; optimize OK (service.pas), line = 1908

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_17DD

; optimize OK (service.pas), line = 1910

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_17EA
l_17EB

; optimize OK (service.pas), line = 1914

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1915

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1917

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1919

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_1822

; optimize OK (service.pas), line = 1921

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1922

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_1822

; optimize OK (service.pas), line = 1925

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_1841

; optimize OK (service.pas), line = 1927

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1928

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_1841
l_17EA

; optimize OK (service.pas), line = 1912

	lda YN
	and #$07
	jeq l_17EBw
	lda YN
	and #$07
	cmp #$07
	jne l_17EB
l_17EBw
l_17DD

; optimize OK (service.pas), line = 1934

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_1880

; optimize OK (service.pas), line = 1936

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_188D
l_188E

; optimize OK (service.pas), line = 1940

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1941

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1943

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1945

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_18C5

; optimize OK (service.pas), line = 1947

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1948

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_18C5

; optimize OK (service.pas), line = 1951

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_18E4

; optimize OK (service.pas), line = 1953

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1954

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_18E4
l_188D

; optimize OK (service.pas), line = 1938

	lda XJ
	and #$0F
	jeq l_188Ew
	lda XJ
	and #$0F
	cmp #$0F
	jne l_188E
l_188Ew
l_1880

; optimize OK (service.pas), line = 1965

	lda COLLISION
	cmp #$01
	jne l_1923
; optimize OK (service.pas), line = 1967
; optimize OK (service.pas), line = 1968
	jmp l_1937
l_1923

; optimize OK (service.pas), line = 1970

	lda COLLISION
	cmp #$02
	jne l_1949

; optimize OK (service.pas), line = 1972

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1973

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_195D
l_1949

; optimize OK (service.pas), line = 1975

	lda COLLISION
	cmp #$03
	jne l_196F

; optimize OK (service.pas), line = 1977

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1978

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1937

; optimize OK (service.pas), line = 1979

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1980

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_195D
	sta (:bp2),y
l_196F
	jmp l_198F
l_17CA

; optimize OK (service.pas), line = 1985

	lda #$02
	jsr FATAL_ERROR
l_198F

; optimize OK (service.pas), line = 1988

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1989

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1990

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1991

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1994

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1995

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 2002

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$030E
Y1	= DATAORIGIN+$0310
X2	= DATAORIGIN+$0312
Y2	= DATAORIGIN+$0314
RESULT	= DATAORIGIN+$0316
X	= DATAORIGIN+$0317
Y	= DATAORIGIN+$0319
XK	= DATAORIGIN+$031B
YK	= DATAORIGIN+$031D
XJ	= DATAORIGIN+$031F
YJ	= DATAORIGIN+$0321
XH	= DATAORIGIN+$0323
YH	= DATAORIGIN+$0325
XN	= DATAORIGIN+$0327
YN	= DATAORIGIN+$0329
XP1	= DATAORIGIN+$032B
YP1	= DATAORIGIN+$032D
XP2	= DATAORIGIN+$032F
YP2	= DATAORIGIN+$0331
XP	= DATAORIGIN+$0333
YP	= DATAORIGIN+$0335
COLLISION	= DATAORIGIN+$0337

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2013

	lda #$0C
	cmp XB
	jcc l_19E7
	lda YB
	cmp #$00
	jcc l_19E7
	lda #$0E
	cmp YB
	jcc l_19E7

; optimize OK (service.pas), line = 2016

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2018

	tay
	lda adr.WALL,y
	jeq l_1A0D

; optimize OK (service.pas), line = 2020

	cmp #$0A
	jcs l_1A23

; optimize OK (service.pas), line = 2022

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2023

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2027

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2029

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 2031

	lda XB
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 2032

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 2033

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 2035

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2036

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2037

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 2038

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1A7B
l_1A23

; optimize OK (service.pas), line = 2043

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1A94

; optimize OK (service.pas), line = 2045

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2046

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2048

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2049

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1AB0
l_1A94

; optimize OK (service.pas), line = 2053

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 2054

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2056

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1AB0
l_1A7B
l_1A0D
l_19E7

; ------------------------------------------------------------

XB	= DATAORIGIN+$0338
YB	= DATAORIGIN+$0339
BALL	= DATAORIGIN+$033A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
I	= DATAORIGIN+$033E

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 2067

	lda #$0C
	cmp XB
	jcc l_1AF9
	lda YB
	cmp #$00
	jcc l_1AF9
	lda #$0E
	cmp YB
	jcc l_1AF9

; optimize OK (service.pas), line = 2070

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2072

	tay
	lda adr.WALL,y
	jeq l_1B1F

; optimize OK (service.pas), line = 2074

	cmp #$0A
	jcs l_1B35

; optimize OK (service.pas), line = 2076

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2077

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2078

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2079

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2080

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1B5F
l_1B35

; optimize OK (service.pas), line = 2085

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1B78

; optimize OK (service.pas), line = 2087

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2088

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2089

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1B90
l_1B78

; optimize OK (service.pas), line = 2093

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2094

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1B5F
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1B90
l_1B1F
l_1AF9

; ------------------------------------------------------------

XB	= DATAORIGIN+$033F
YB	= DATAORIGIN+$0340
I	= DATAORIGIN+$0341

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2129

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2131

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2132

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2135

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2136

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2138

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2139

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2143

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_1BFB

; optimize OK (service.pas), line = 2145

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2151

	cmp #$03
	jne l_1C16

; optimize OK (service.pas), line = 2153

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	iny
	sub OX
	sub #$09
	sta LX

; optimize OK (service.pas), line = 2154

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	iny
	sub OY
	sub #$16
	sta LY

; optimize OK (service.pas), line = 2156

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2157

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2159

	lda LX
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta A
	lda LY
	jsr SYSTEM.ABS.@010183000
	lda SYSTEM.ABS.@010183000.RESULT
	sta B

; optimize OK (service.pas), line = 2161

	lda A
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F1
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F1+1

; optimize OK (service.pas), line = 2163

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B

; optimize OK (service.pas), line = 2165

	lda A
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda B
	sta :ecx
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (service.pas), line = 2167

	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_1CAB

; optimize OK (service.pas), line = 2173

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	lsr :STACKORIGIN+STACKWIDTH+10
	ror @
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2174

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2177

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1CE9

; optimize OK (service.pas), line = 2179

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2180

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1D11
l_1CE9

; optimize OK (service.pas), line = 2184

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2185

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1D11
	jmp l_1D24
l_1CAB

; optimize OK (service.pas), line = 2195

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2196

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2198

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1D61

; optimize OK (service.pas), line = 2200

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2201

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2203

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta MAX.B
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2204

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1D61
l_1D24
l_1C16

; optimize OK (service.pas), line = 2210

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2211

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2215

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2217

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2218

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2230

	lda X
	jeq l_1DF5
	cmp #$07
	jeq l_1DF5
	lda Y
	jeq l_1DF5
	cmp #$07
	jeq l_1DF5

; optimize OK (service.pas), line = 2231

	lda #$03
	jsr FATAL_ERROR
l_1DF5

; optimize OK (service.pas), line = 2246

	lda Y
	cmp X
	jcs l_1E20
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1E20

; optimize OK (service.pas), line = 2248

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2249

	lda #$01
	sta EMERGENCY
l_1E20

; optimize OK (service.pas), line = 2253

	lda #$07
	sub Y
	cmp X
	jcs l_1E55
	lda X
	cmp Y
	jcs l_1E55

; optimize OK (service.pas), line = 2255

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2256

	lda #$03
	sta EMERGENCY
l_1E55

; optimize OK (service.pas), line = 2260

	lda X
	cmp Y
	jcs l_1E8A
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1E8A

; optimize OK (service.pas), line = 2262

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2263

	lda #$02
	sta EMERGENCY
l_1E8A

; optimize OK (service.pas), line = 2267

	lda #$07
	sub X
	cmp Y
	jcs l_1EBF
	lda Y
	cmp X
	jcs l_1EBF

; optimize OK (service.pas), line = 2269

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2270

	lda #$04
	sta EMERGENCY
l_1EBF

; optimize OK (service.pas), line = 2274

	lda X
	cmp Y
	jeq l_1EF4x
	lda #$07
	sub Y
	cmp X
	jne l_1EF4
l_1EF4x

; optimize OK (service.pas), line = 2276

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2277

	sta TOUCH

; optimize OK (service.pas), line = 2285

	lda X
	cmp #$05
	jcc l_1F0F
	lda TOUCH
	ora #$01
	sta TOUCH
l_1F0F

; optimize OK (service.pas), line = 2286

	lda Y
	cmp #$05
	jcc l_1F2E
	lda TOUCH
	ora #$02
	sta TOUCH
l_1F2E

; optimize OK (service.pas), line = 2295

	lda #$FF
	sta LX

l_1F44
; --- ForToDoCondition
	lda LX
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1F52

; optimize OK (service.pas), line = 2296

	lda #$FF
	sta LY

l_1F5B
; --- ForToDoCondition
	lda LY
	sub #$02
	svc
	eor #$80
	asl @
	jcc l_1F69

; optimize FAIL (1, service.pas), line = 2298

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc #$00
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2299

	ldy #$00
	lda YB
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+9
	ldy #$00
	lda LY
	spl
	dey
	add :STACKORIGIN+9
	sta MY
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta MY+1

; optimize OK (service.pas), line = 2303

	lda XB
	add LX
	jmi l_1FC6x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1FC6x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1FC6
l_1FC6x

; optimize OK (service.pas), line = 2306

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$01
	jmp l_1FE9
l_1FC6

; optimize OK (service.pas), line = 2308

	lda LX
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add LY
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
l_1FE9
	sta adr.ADJW,y

; --- ForToDoEpilog
	inc LY
	lda LY
	cmp #$80
	jne l_1F5B
l_1F69

; --- ForToDoEpilog
	inc LX
	lda LX
	cmp #$80
	jne l_1F44
l_1F52

; optimize OK (service.pas), line = 2327

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+$04
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$08
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$09
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$0A
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$06
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$02
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$01
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	ora :STACKORIGIN+9
	sta AROUND

; optimize OK (service.pas), line = 2358

	lda TOUCH
	jne l_2092

; optimize OK (service.pas), line = 2360

	lda AROUND
	and #$83
	jne l_20A9
	lda #$11
	sta DEFLECT
l_20A9

; optimize OK (service.pas), line = 2361

	lda AROUND
	and #$83
	cmp #$01
	jne l_20C6
	lda #$33
	sta DEFLECT
l_20C6

; optimize OK (service.pas), line = 2362

	lda AROUND
	and #$83
	cmp #$02
	jne l_20E3
	lda #$10
	sta DEFLECT
l_20E3

; optimize OK (service.pas), line = 2363

	lda AROUND
	and #$83
	cmp #$03
	jne l_2100
	lda #$12
	sta DEFLECT
l_2100

; optimize OK (service.pas), line = 2364

	lda AROUND
	and #$83
	cmp #$80
	jne l_211D
	lda #$01
	sta DEFLECT
l_211D

; optimize OK (service.pas), line = 2365

	lda AROUND
	and #$83
	cmp #$81
	jne l_213A
	lda #$21
	sta DEFLECT
l_213A

; optimize OK (service.pas), line = 2366

	lda AROUND
	and #$83
	cmp #$82
	jne l_2157
	lda #$11
	sta DEFLECT
l_2157

; optimize OK (service.pas), line = 2368

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2369

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2092

; optimize OK (service.pas), line = 2374

	lda TOUCH
	cmp #$01
	jne l_2187

; optimize OK (service.pas), line = 2376

	lda AROUND
	and #$0E
	jne l_219E
	lda #$21
	sta DEFLECT
l_219E

; optimize OK (service.pas), line = 2377

	lda AROUND
	and #$0E
	cmp #$02
	jne l_21BB
	lda #$20
	sta DEFLECT
l_21BB

; optimize OK (service.pas), line = 2378

	lda AROUND
	and #$0E
	cmp #$04
	jne l_21D8
	lda #$33
	sta DEFLECT
l_21D8

; optimize OK (service.pas), line = 2379

	lda AROUND
	and #$0E
	cmp #$06
	jne l_21F5
	lda #$22
	sta DEFLECT
l_21F5

; optimize OK (service.pas), line = 2380

	lda AROUND
	and #$0E
	cmp #$08
	jne l_2212
	lda #$01
	sta DEFLECT
l_2212

; optimize OK (service.pas), line = 2381

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_222F
	lda #$21
	sta DEFLECT
l_222F

; optimize OK (service.pas), line = 2382

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_224C
	lda #$11
	sta DEFLECT
l_224C

; optimize OK (service.pas), line = 2384

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2385

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2187

; optimize OK (service.pas), line = 2388

	lda TOUCH
	cmp #$02
	jne l_227C

; optimize OK (service.pas), line = 2390

	lda AROUND
	and #$E0
	jne l_2293
	lda #$12
	sta DEFLECT
l_2293

; optimize OK (service.pas), line = 2391

	lda AROUND
	and #$E0
	cmp #$20
	jne l_22B0
	lda #$10
	sta DEFLECT
l_22B0

; optimize OK (service.pas), line = 2392

	lda AROUND
	and #$E0
	cmp #$40
	jne l_22CD
	lda #$33
	sta DEFLECT
l_22CD

; optimize OK (service.pas), line = 2393

	lda AROUND
	and #$E0
	cmp #$60
	jne l_22EA
	lda #$11
	sta DEFLECT
l_22EA

; optimize OK (service.pas), line = 2394

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2307
	lda #$02
	sta DEFLECT
l_2307

; optimize OK (service.pas), line = 2395

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2324
	lda #$12
	sta DEFLECT
l_2324

; optimize OK (service.pas), line = 2396

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_2341
	lda #$22
	sta DEFLECT
l_2341

; optimize OK (service.pas), line = 2398

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2399

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_227C

; optimize OK (service.pas), line = 2402

	lda TOUCH
	cmp #$03
	jne l_2371

; optimize OK (service.pas), line = 2404

	lda AROUND
	and #$38
	jne l_2388
	lda #$22
	sta DEFLECT
l_2388

; optimize OK (service.pas), line = 2405

	lda AROUND
	and #$38
	cmp #$08
	jne l_23A5
	lda #$02
	sta DEFLECT
l_23A5

; optimize OK (service.pas), line = 2406

	lda AROUND
	and #$38
	cmp #$10
	jne l_23C2
	lda #$33
	sta DEFLECT
l_23C2

; optimize OK (service.pas), line = 2407

	lda AROUND
	and #$38
	cmp #$18
	jne l_23DF
	lda #$12
	sta DEFLECT
l_23DF

; optimize OK (service.pas), line = 2408

	lda AROUND
	and #$38
	cmp #$20
	jne l_23FC
	lda #$20
	sta DEFLECT
l_23FC

; optimize OK (service.pas), line = 2409

	lda AROUND
	and #$38
	cmp #$28
	jne l_2419
	lda #$22
	sta DEFLECT
l_2419

; optimize OK (service.pas), line = 2410

	lda AROUND
	and #$38
	cmp #$30
	jne l_2436
	lda #$21
	sta DEFLECT
l_2436

; optimize OK (service.pas), line = 2412

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2413

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2371

; optimize OK (service.pas), line = 2419

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2420

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2422

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_2479
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_2479

; optimize OK (service.pas), line = 2423

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_2496
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2496

; optimize OK (service.pas), line = 2424

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_24B0
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_24B0

; optimize OK (service.pas), line = 2426

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_24CC
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_24CC

; optimize OK (service.pas), line = 2427

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_24E9
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_24E9

; optimize OK (service.pas), line = 2428

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_2503
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_2503
l_1EF4
l_1BFB

; optimize OK (service.pas), line = 2438

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_2524

; optimize OK (service.pas), line = 2441

	lda EMERGENCY
	cmp #$FF
	jne l_2537
	lda #$04
	jsr FATAL_ERROR
l_2537

; optimize OK (service.pas), line = 2443

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2469

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_2550
@

; optimize OK (service.pas), line = 2472

	lda adr.ADJW+$04
	jne l_2567
	lda MIMAX
	and #$0F
	sta MIMAX
l_2567

; optimize OK (service.pas), line = 2473

	lda adr.ADJW+$01
	jne l_258F
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_258F
	jmp a_0009
l_2550
	cmp #$06
	jne l_25A7

; optimize OK (service.pas), line = 2477

	lda adr.ADJW+$01
	jne l_25BE
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_25BE

; optimize OK (service.pas), line = 2478

	lda adr.ADJW+$06
	jne l_25E6
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_25E6
	jmp a_0009
l_25A7
	cmp #$07
	jne l_25FE

; optimize OK (service.pas), line = 2482

	lda adr.ADJW+$06
	jne l_2615
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_2615

; optimize OK (service.pas), line = 2483

	lda adr.ADJW+$09
	jne l_263D
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_263D
	jmp a_0009
l_25FE
	cmp #$08
	jne l_2655

; optimize OK (service.pas), line = 2487

	lda adr.ADJW+$09
	jne l_266C
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_266C

; optimize OK (service.pas), line = 2488

	lda adr.ADJW+$04
	jne l_2694
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_2694
l_2655
a_0009

; --- RepeatUntilProlog
l_26AC

; optimize OK (service.pas), line = 2496

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta LX

; optimize OK (service.pas), line = 2497

	lda MIMAX
	and #$0F
	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta MX+1
	lda :eax
	sta MX

; optimize OK (service.pas), line = 2499

	ldy #$00
	lda LX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda MX
	sub :STACKORIGIN+10
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	inx
	mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva LX :STACKORIGIN,x
	jsr @expandSHORT2SMALL
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 2502

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_26AC
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_26AC

; optimize OK (service.pas), line = 2506

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda @SMALLINT.MOD.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2507

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2509

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_2524

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0342
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
X	= DATAORIGIN+$0346
Y	= DATAORIGIN+$0347
LX	= DATAORIGIN+$0348
LY	= DATAORIGIN+$0349
XB	= DATAORIGIN+$034A
YB	= DATAORIGIN+$034B
OX	= DATAORIGIN+$034C
OY	= DATAORIGIN+$034E
NX	= DATAORIGIN+$0350
NY	= DATAORIGIN+$0352
MX	= DATAORIGIN+$0354
MY	= DATAORIGIN+$0356
ANGLE	= DATAORIGIN+$0358
MYX	= DATAORIGIN+$035A
MYY	= DATAORIGIN+$035C
F1	= DATAORIGIN+$035E
F2	= DATAORIGIN+$0360
A	= DATAORIGIN+$0362
B	= DATAORIGIN+$0363
EMERGENCY	= DATAORIGIN+$0364
MIMAX	= DATAORIGIN+$0365
DEFLECT	= DATAORIGIN+$0366
AROUND	= DATAORIGIN+$0367
COLLISION	= DATAORIGIN+$0368
TOUCH	= DATAORIGIN+$0369
adr.ADJW	= [DATAORIGIN+$036A] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$037A

@VarData	= BALL
@VarDataSize	= 43

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2524

	lda #$00
	sta Y

l_271A
; --- ForToDoCondition
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2530

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_271A
l_2728

; optimize OK (service.pas), line = 2536

	lda #$0A
	sta Y

l_2752
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_2760

; optimize OK (service.pas), line = 2539

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2541

	ldy #PATT.OFS-DATAORIGIN
	lda (:bp2),y
	add YB
	sta VBXE_RAM.POSITION
	iny
	lda (:bp2),y
	adc YB+1
	sta VBXE_RAM.POSITION+1
	iny
	lda (:bp2),y
	adc #$00
	sta VBXE_RAM.POSITION+2
	iny
	lda (:bp2),y
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 2542

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda #$28
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 2544

	lda #$00
	sta K

; optimize OK (service.pas), line = 2545

	lda #$09
	sta X

l_2788
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_2796

; optimize OK (service.pas), line = 2550

	lda adr.MODX,y
	tay
	lda adr.SCANLINE,y
	sta CL

; optimize OK (service.pas), line = 2552

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2557

	lda Y
	cmp #$10
	jcc l_27C4x
	lda X
	cmp #$12
	jcs l_27C4
l_27C4x
	lda #$00
	sta SHADOW
l_27C4

; optimize OK (service.pas), line = 2562

	lda CL
	and #$7F
	ora SHADOW
	ldy K
	sta adr.TMP,y

; optimize FAIL (0, service.pas), line = 2564

	inc K

; --- ForToDoEpilog
	inc X
	jne l_2788
l_2796

; optimize OK (service.pas), line = 2567

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add #$09
	sta BLITTMP.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta BLITTMP.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITTMP.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITTMP.DST+3
	lda K
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_2752
l_2760

; ------------------------------------------------------------

PATT	= DATAORIGIN+$037B
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$037F
X	= DATAORIGIN+$0381
Y	= DATAORIGIN+$0382
CL	= DATAORIGIN+$0383
SHADOW	= DATAORIGIN+$0384
K	= DATAORIGIN+$0385

@VarData	= PATT
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0386
Y	= DATAORIGIN+$0388

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2683

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2685

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$038A
Y	= DATAORIGIN+$038C
adr.SC	= [DATAORIGIN+$038E] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2739

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2740

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2742

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2744

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2745

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; optimize OK (service.pas), line = 2748

	lda #$00
	sta W

l_2851
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_285F

; optimize OK (service.pas), line = 2750

	lda #$00
	sta Y

l_2868
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2876

; optimize OK (service.pas), line = 2753

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2755

	lda EXPLOSION.OFS
	add Z
	sta VBXE_RAM.POSITION
	lda EXPLOSION.OFS+1
	adc Z+1
	sta VBXE_RAM.POSITION+1
	lda EXPLOSION.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda EXPLOSION.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 2756

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda EXPLOSION.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda EXPLOSION.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 2758

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2760

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 2761

	lda SCANLINE2
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE2+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda EXPLOSION.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda EXPLOSION.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 2763

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_28C9_0

l_28CC
; --- ForToDoCondition
	lda @FORTMP_28C9_0::#$00
	cmp X
	jcc l_28DA

; optimize OK (service.pas), line = 2767

	lda W
	cmp #$06
	jeq l_28FBx
	ldy X
	lda adr.SCANLINE,y
	jne l_28FB
l_28FBx

; optimize OK (service.pas), line = 2772

	ldy X
	lda adr.SCANLINE2,y
	jmp l_2911
l_28FB

; optimize OK (service.pas), line = 2778

	ldy X
	lda adr.SCANLINE,y
l_2911
	sta adr.TMP,y

; --- ForToDoEpilog
	inc X
	jne l_28CC
l_28DA

; optimize OK (service.pas), line = 2781

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_2868
l_2876

; optimize OK (service.pas), line = 2784

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_2851
l_285F

; optimize OK (service.pas), line = 2788

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2789

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2790

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$03A3
A	= DATAORIGIN+$03A5
B	= DATAORIGIN+$03A7
W	= DATAORIGIN+$03A9
X	= DATAORIGIN+$03AA
Y	= DATAORIGIN+$03AB

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2802

	jsr NOSOUND

; optimize OK (service.pas), line = 2803

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2804

	lda #$B3
	sta B
	lda #$00
	sta B+1

; optimize OK (service.pas), line = 2806

	lda #$0B
	sta W

l_2954
; --- ForToDoCondition
	lda #$00
	sta Y

l_296B
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2979

; optimize OK (service.pas), line = 2811

	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2813

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2815

	lda NEWVAUS.OFS
	add Z
	sta VBXE_RAM.POSITION
	lda NEWVAUS.OFS+1
	adc Z+1
	sta VBXE_RAM.POSITION+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 2816

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda NEWVAUS.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda NEWVAUS.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 2818

	lda PLAYSCREEN.OFS
	add HLP
	sta VBXE_RAM.POSITION
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta VBXE_RAM.POSITION+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 2819

	lda SCANLINE2
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE2+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda NEWVAUS.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda NEWVAUS.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 2821

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_29CC_0

l_29CF
; --- ForToDoCondition
	lda @FORTMP_29CC_0::#$00
	cmp X
	jcc l_29DD

; optimize OK (service.pas), line = 2824

	ldy X
	lda adr.SCANLINE,y
	jne l_29F2

; optimize OK (service.pas), line = 2830

	lda adr.SCANLINE2,y
	jmp l_2A08
l_29F2

; optimize OK (service.pas), line = 2837

	ldy X
	lda adr.SCANLINE,y
l_2A08
	sta adr.TMP,y

; --- ForToDoEpilog
	inc X
	jne l_29CF
l_29DD

; optimize OK (service.pas), line = 2840

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_296B
l_2979

; optimize OK (service.pas), line = 2843

	lda #$01
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; --- ForToDoEpilog
	dec W
	jpl l_2954
l_2962

; ------------------------------------------------------------

X	= DATAORIGIN+$03AD
Y	= DATAORIGIN+$03AE
W	= DATAORIGIN+$03AF
Z	= DATAORIGIN+$03B0
A	= DATAORIGIN+$03B2
B	= DATAORIGIN+$03B4

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (service.pas), line = 2853

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2875

	ldy NUM
	lda adr.DIGITS,y
	and #$01
	cmp #$01
	jne l_2A4F
	lda #$DF
	sta A
l_2A4F

; optimize OK (service.pas), line = 2876

	lda #$01
	sta X

l_2A5F
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2A6D

; optimize OK (service.pas), line = 2878

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2A5F
l_2A6D

; optimize OK (service.pas), line = 2882

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2883

	ldy NUM
	lda adr.DIGITS,y
	and #$02
	cmp #$02
	jne l_2AA7
	lda #$DF
	sta A
l_2AA7

; optimize OK (service.pas), line = 2884

	lda #$01
	sta X

l_2AB7
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2AC5

; optimize OK (service.pas), line = 2886

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2AB7
l_2AC5

; optimize OK (service.pas), line = 2890

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2891

	ldy NUM
	lda adr.DIGITS,y
	and #$04
	cmp #$04
	jne l_2B03
	lda #$DF
	sta A
l_2B03

; optimize OK (service.pas), line = 2892

	lda #$01
	sta X

l_2B13
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2B21

; optimize OK (service.pas), line = 2894

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$0A,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$0A,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2B13
l_2B21

; optimize OK (service.pas), line = 2897

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2898

	ldy NUM
	lda adr.DIGITS,y
	and #$08
	cmp #$08
	jne l_2B5F
	lda #$DF
	sta A
l_2B5F

; optimize OK (service.pas), line = 2899

	lda #$01
	sta Y

l_2B6F
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2B7D

; optimize OK (service.pas), line = 2901

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2B6F
l_2B7D

; optimize OK (service.pas), line = 2904

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2905

	ldy NUM
	lda adr.DIGITS,y
	and #$10
	cmp #$10
	jne l_2BB7
	lda #$DF
	sta A
l_2BB7

; optimize OK (service.pas), line = 2906

	lda #$01
	sta Y

l_2BC7
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2BD5

; optimize OK (service.pas), line = 2908

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2BC7
l_2BD5

; optimize OK (service.pas), line = 2911

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2912

	ldy NUM
	lda adr.DIGITS,y
	and #$20
	cmp #$20
	jne l_2C13
	lda #$DF
	sta A
l_2C13

; optimize OK (service.pas), line = 2913

	lda #$01
	sta Y

l_2C23
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2C31

; optimize OK (service.pas), line = 2915

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2C23
l_2C31

; optimize OK (service.pas), line = 2918

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2919

	ldy NUM
	lda adr.DIGITS,y
	and #$40
	cmp #$40
	jne l_2C6F
	lda #$DF
	sta A
l_2C6F

; optimize OK (service.pas), line = 2920

	lda #$01
	sta Y

l_2C7F
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2C8D

; optimize OK (service.pas), line = 2922

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2C7F
l_2C8D

; ------------------------------------------------------------

PX	= DATAORIGIN+$03B7
PY	= DATAORIGIN+$03B9
NUM	= DATAORIGIN+$03BA
X	= DATAORIGIN+$03BB
Y	= DATAORIGIN+$03BC
A	= DATAORIGIN+$03BD

@VarData	= PX
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (service.pas), line = 2933

	lda #$00
	sta F

; optimize OK (service.pas), line = 2938

	lda #$A0
	sta @CARDINAL.DIV.B
	lda #$86
	sta @CARDINAL.DIV.B+1
	lda #$01
	sta @CARDINAL.DIV.B+2
	lda #$00
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	lda #$0A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	sta N1

; optimize OK (service.pas), line = 2939

	jeq l_2CD8
	lda #$01
	sta F
l_2CD8

; optimize OK (service.pas), line = 2940

	lda F
	jeq l_2CEB
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2CFE
l_2CEB

; optimize OK (service.pas), line = 2941

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2CFE
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2944

	lda #$10
	sta @CARDINAL.DIV.B
	lda #$27
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	lda #$0A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	sta N1

; optimize OK (service.pas), line = 2945

	jeq l_2D23
	lda #$01
	sta F
l_2D23

; optimize OK (service.pas), line = 2946

	lda F
	jeq l_2D36
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2D4D
l_2D36

; optimize OK (service.pas), line = 2947

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2D4D
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2950

	lda #$E8
	sta @CARDINAL.DIV.B
	lda #$03
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	lda #$0A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	sta N1

; optimize OK (service.pas), line = 2951

	jeq l_2D76
	lda #$01
	sta F
l_2D76

; optimize OK (service.pas), line = 2952

	lda F
	jeq l_2D89
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2DA0
l_2D89

; optimize OK (service.pas), line = 2953

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2DA0
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2956

	lda #$64
	sta @CARDINAL.DIV.B
	lda #$00
	sta @CARDINAL.DIV.B+1
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	lda #$0A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	sta N1

; optimize OK (service.pas), line = 2957

	jeq l_2DC9
	lda #$01
	sta F
l_2DC9

; optimize OK (service.pas), line = 2958

	lda F
	jeq l_2DDC
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	jmp l_2DF3
l_2DDC

; optimize OK (service.pas), line = 2959

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$0A
l_2DF3
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2962

	lda #$0A
	sta @CARDINAL.DIV.B
	lda #$00
	sta @CARDINAL.DIV.B+1
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	lda SC
	sta @CARDINAL.DIV.A
	lda SC+1
	sta @CARDINAL.DIV.A+1
	lda SC+2
	sta @CARDINAL.DIV.A+2
	lda SC+3
	sta @CARDINAL.DIV.A+3
	jsr @CARDINAL.DIV
	lda #$0A
	sta @CARDINAL.MOD.B
	lda #$00
	sta @CARDINAL.MOD.B+1
	sta @CARDINAL.MOD.B+2
	sta @CARDINAL.MOD.B+3
	jsr @CARDINAL.MOD
	lda @CARDINAL.MOD.RESULT
	sta N1

; optimize OK (service.pas), line = 2963

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda N1
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2967

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda #$00
	sta PUT_DIGIT.NUM
	jsr PUT_DIGIT

; ------------------------------------------------------------

PX	= DATAORIGIN+$03BE
PY	= DATAORIGIN+$03C0
SC	= DATAORIGIN+$03C1
N1	= DATAORIGIN+$03C5
F	= DATAORIGIN+$03C6

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, service.pas), line = 3014

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; optimize OK (service.pas), line = 3017

	lda #$00
	sta CN

l_2E37
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2E45

; optimize OK (service.pas), line = 3018

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_2E50_0

l_2E53
; --- ForToDoCondition
	lda @FORTMP_2E50_0::#$00
	cmp Y
	jcc l_2E61

; optimize OK (service.pas), line = 3020

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda MINIVAUS.OFS
	add :eax
	sta VBXE_RAM.POSITION
	lda MINIVAUS.OFS+1
	adc :eax+1
	sta VBXE_RAM.POSITION+1
	lda MINIVAUS.OFS+2
	adc :eax+2
	sta VBXE_RAM.POSITION+2
	lda MINIVAUS.OFS+3
	adc :eax+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 3021

	lda SCANLINE
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda MINIVAUS.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda MINIVAUS.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 3023

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (service.pas), line = 3025

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add #$0B
	sta HLP
	lda :eax+1
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3028

	lda PLAYSCREEN.OFS
	add HLP
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy YL
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta VBXE_RAM.POSITION
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta VBXE_RAM.POSITION+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta VBXE_RAM.POSITION+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 3029

	lda SCANLINE2
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
	lda SCANLINE2+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
	lda MINIVAUS.WIDTH
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
	lda MINIVAUS.WIDTH+1
	sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER

; optimize OK (service.pas), line = 3032

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2EAE_0

l_2EB1
; --- ForToDoCondition
	lda @FORTMP_2EAE_0::#$00
	cmp X
	jcc l_2EBF

; optimize OK (service.pas), line = 3034

	lda X
	add HLP
	sta XL
	lda #$00
	adc HLP+1
	sta XL+1

; optimize OK (service.pas), line = 3036

	ldy XL
	lda adr.MODX,y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 3037

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize OK (service.pas), line = 3041

	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	jpl l_2F01
	ldy X
	lda adr.SCANLINE,y
	jeq l_2F01

; optimize OK (service.pas), line = 3045

	sta CL

; optimize OK (service.pas), line = 3053

	jmp l_2F1D
l_2F01

; optimize OK (service.pas), line = 3063

	ldy X
	lda adr.SCANLINE2,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 3066

	lda PATTERN.OFS
	add XP
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc XP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YP
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YP+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex

; optimize OK (service.pas), line = 3074

	ldy X
l_2F1D
	lda CL
	sta adr.TMP,y

; --- ForToDoEpilog
	inc X
	jne l_2EB1
l_2EBF

; optimize OK (service.pas), line = 3078

	ldy YL
	lda HLP
	add adr.ROW,y
	sta HLP
	lda HLP+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3079

	lda HLP
	sta BLITTMP.DST
	lda #$50
	add HLP+1
	sta BLITTMP.DST+1
	lda #$00
	adc #$00
	sta BLITTMP.DST+2
	lda #$00
	adc #$00
	sta BLITTMP.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTMP.SIZE
	jsr BLITTMP

; optimize OK (service.pas), line = 3081

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITROW.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITROW.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.DST+3
	lda HLP
	sta BLITROW.SRC
	lda #$50
	add HLP+1
	sta BLITROW.SRC+1
	lda #$00
	adc #$00
	sta BLITROW.SRC+2
	lda #$00
	adc #$00
	sta BLITROW.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITROW.SIZE
	lda MINIVAUS.WIDTH+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2E53
l_2E61

; --- ForToDoEpilog
	inc CN
	jne l_2E37
l_2E45

; ------------------------------------------------------------

LIVES	= DATAORIGIN+$03C7
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$03C9
Y	= DATAORIGIN+$03CA
CN	= DATAORIGIN+$03CB
XP	= DATAORIGIN+$03CC
YP	= DATAORIGIN+$03CE
XL	= DATAORIGIN+$03D0
YL	= DATAORIGIN+$03D2
SHADOW	= DATAORIGIN+$03D4
CL	= DATAORIGIN+$03D5

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3093

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3095

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.W
	lda SHOOTS.WIDTH+1
	sta BLITZERO.W+1
	lda SHOOTS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3113

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3115

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda SHOOTS.WIDTH
	sta BLITBOX.W
	lda SHOOTS.WIDTH+1
	sta BLITBOX.W+1
	lda SHOOTS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3131

	lda FIRE.AVL
	jeq l_2FD0

; optimize FAIL ('MOUSECLICK', service.pas), line = 3133

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2FF0

; optimize OK (service.pas), line = 3135

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3136

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 3137

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3138

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3139

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2FF0

; optimize OK (service.pas), line = 3142

	lda FIRE.SHOT
	jeq l_302A

; optimize OK (service.pas), line = 3144

	lda FIRE.NW
	jeq l_3037
	jsr REMOVE_FIRE
l_3037

; optimize OK (service.pas), line = 3145

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3147

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3148

	cmp #$16
	jcs l_3052
	lda #$00
	sta FIRE.SHOT
	jmp l_3060
l_3052

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3151

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3153

	lda FIRE.Y
	sub #$16
	jmi l_3087
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_3087

; optimize OK (service.pas), line = 3155

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1
	lda #$00
	sta X1+1

; optimize OK (service.pas), line = 3156

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1
	lda #$00
	sta Y1+1

; optimize OK (service.pas), line = 3158

	lda FIRE.X
	add SHOOTS.WIDTH
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2
	lda #$00
	sta X2+1

; optimize OK (service.pas), line = 3159

	lda Y1
	sta Y2
	lda Y1+1
	sta Y2+1

; optimize OK (service.pas), line = 3161

	lda Y1
	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_30F0x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_30F0
l_30F0x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3163

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3164

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3166

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3167

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_3060
l_30F0
l_3087
l_302A
l_2FD0

; ------------------------------------------------------------

X1	= DATAORIGIN+$03D8
X2	= DATAORIGIN+$03DA
Y1	= DATAORIGIN+$03DC
Y2	= DATAORIGIN+$03DE

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3179

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3181

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3195

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 3197

	lda SCRFLUX
	jeq l_313B

; optimize OK (service.pas), line = 3200

	lda #$00
	sta Y

l_3145
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_3153

; optimize OK (service.pas), line = 3202

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_3145
l_3153

; optimize FAIL (0, service.pas), line = 3204

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3205

	lda SCRFLUXCNT
	cmp #$15
	jcc l_3192
	lda #$00
	sta SCRFLUXCNT
l_3192
l_313B

; ------------------------------------------------------------

Y	= DATAORIGIN+$03E0
FX	= DATAORIGIN+$03E1

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 3213

	jsr NOSOUND

; optimize OK (service.pas), line = 3215

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3216

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3218

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', service.pas), line = 3220

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3221

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3222

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3224

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_31BD_0
	lda Z+1
	adc #$00
	sta @FORTMP_31BD_1

l_31C0
; --- ForToDoCondition
	lda @FORTMP_31BD_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_31BD_0::#$00
	cmp X
@
	jcc l_31CC

; optimize FAIL ('WAIT_VBL', service.pas), line = 3226

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3228

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3229

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3230

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3231

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3232

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3234

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3236

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_31C0
	inc X+1
	jne l_31C0
l_31CC

; ------------------------------------------------------------

X	= DATAORIGIN+$03E2
Y	= DATAORIGIN+$03E4
Z	= DATAORIGIN+$03E6

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3251

	lda VAUS.LETTER
	jmi l_3213
	jeq l_3213

; optimize OK (service.pas), line = 3253

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3254

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_322A
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_322A

; optimize OK (service.pas), line = 3255

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_323C
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_323C

; optimize OK (service.pas), line = 3256

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3257

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3258

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3259

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3261

	lda VAUS.LETTER
	cmp #$06
	jeq l_3261

; optimize OK (service.pas), line = 3263

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3264

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3265

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_3261
l_3213

; optimize OK (service.pas), line = 3269

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_327D
@

; optimize OK (service.pas), line = 3272

	lda FIRE.SHOT
	jeq l_3289
	jsr REMOVE_FIRE
l_3289

; optimize OK (service.pas), line = 3273

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3274

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3275

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3276

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3277

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_327D
	cmp #$02
	jne l_32A3

; optimize OK (service.pas), line = 3281

	lda FIRE.SHOT
	jeq l_32AF
	jsr REMOVE_FIRE
l_32AF

; optimize OK (service.pas), line = 3282

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3283

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3284

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3285

	sta FIRE.AVL
	jmp a_000A
l_32A3
	cmp #$03
	jne l_32C5

; optimize OK (service.pas), line = 3289

	lda FIRE.SHOT
	jeq l_32D1
	jsr REMOVE_FIRE
l_32D1

; optimize OK (service.pas), line = 3290

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3291

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3292

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3293

	sta FIRE.AVL

; optimize OK (service.pas), line = 3294

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_32C5
	cmp #$04
	jne l_32EB

; optimize OK (service.pas), line = 3298

	lda FIRE.SHOT
	jeq l_32F7
	jsr REMOVE_FIRE
l_32F7

; optimize OK (service.pas), line = 3299

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3300

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3301
	jmp s_3334
l_32EB
	cmp #$05
	jne l_3309

; optimize OK (service.pas), line = 3305

	lda FIRE.SHOT
	jeq l_3315
	jsr REMOVE_FIRE
l_3315

; optimize OK (service.pas), line = 3306

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3307

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3308

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3309

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3310

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3334
; optimize OK (service.pas), line = 3311
	jmp s_3352
l_3309
	cmp #$06
	jne l_333B

; optimize OK (service.pas), line = 3315

	lda FIRE.SHOT
	jeq l_3347
	jsr REMOVE_FIRE
l_3347

; optimize OK (service.pas), line = 3316

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3317

	jsr MODIFY_VAUS
s_3352
; optimize OK (service.pas), line = 3318
	jmp s_3382
l_333B
	cmp #$07
	jne l_3359

; optimize OK (service.pas), line = 3322

	lda FIRE.SHOT
	jeq l_3365
	jsr REMOVE_FIRE
l_3365

; optimize OK (service.pas), line = 3323

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3324

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3325

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3326

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3327

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3328

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_3382

; optimize OK (service.pas), line = 3329

	lda #$00
	sta FIRE.AVL
l_3359
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$03EA
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001B
B2	= DATAORIGIN+$03EE
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001B
B3	= DATAORIGIN+$03F2
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001B
X	= DATAORIGIN+$03F6
@CASETMP_000A	= DATAORIGIN+$03F8

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_3390

; optimize OK (service.pas), line = 3342

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3343

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_3390
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_3390

; optimize OK (service.pas), line = 3345

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3346

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3348

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03F9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B
TEMP	= DATAORIGIN+$03FD

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_33D0

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3380

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_33DF

; optimize OK (service.pas), line = 3383

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_33FC
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_33FC

; optimize OK (service.pas), line = 3384

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_33FC

; optimize OK (service.pas), line = 3386

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3387

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_33DF

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0464
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3395

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_341D

; optimize OK (service.pas), line = 3397

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3399

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_3433
	jeq l_3433

; optimize OK (service.pas), line = 3401

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3404

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_3449

; optimize OK (service.pas), line = 3406

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3407

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_3449
l_3433

; optimize OK (service.pas), line = 3411

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3415

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_3471
@
	ldy #$00
	lda (:bp2),y
	jpl l_3471
@

; optimize OK (service.pas), line = 3416

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_3471
l_341D

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0468
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001B

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_33D0

; optimize OK (service.pas), line = 3424

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3425

	sta SCRFLUX

; optimize OK (service.pas), line = 3427

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3429

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3430

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3432

	lda #$FF
	sta LETT.LAST
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3433

	lda #$00
	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3436

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3439

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3443

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3449

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3450

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3451

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3454

	jsr PUT_WALL

; optimize OK (service.pas), line = 3461

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3462

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3465

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3466

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3469

	lda #$FF
	sta BALL0.OLDX
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3470

	sta BALL0.OLDY
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3473

	lda #$00
	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3477

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3482

	sta BALL0.STM

; optimize OK (service.pas), line = 3486

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3489

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3492

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3494

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3495

	jsr START_VAUS

; optimize OK (service.pas), line = 3496

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3497

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3498

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3499

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3500

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3507

	lda #$0F
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3509

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3512

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3514

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3515

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3517

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_3509
l_350A

; optimize FAIL ('WAIT_VBL', service.pas), line = 3521

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3530

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3535

	lda TRAINER
	jne l_351F
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_352D
l_351F

; optimize OK (service.pas), line = 3541

	lda TRAINER
	cmp #$01
	jne l_353F

; optimize FAIL (1, service.pas), line = 3542

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc BALL0.ONVAUS+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_352D
	jsr MOVE_VAUS
l_353F

; optimize OK (service.pas), line = 3547

	lda BALL0.LAUNCH
	cmp #$01
	jne l_3561

; optimize FAIL (0, service.pas), line = 3549

	inc BALL0.STM

; optimize OK (service.pas), line = 3554

	lda BALL0.STM
	cmp #$FA
	jne l_3578
	lda #$00
	sta BALL0.LAUNCH
l_3578

; optimize OK (service.pas), line = 3557

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3560

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_3592
	lda #$00
	sta BALL0.LAUNCH
l_3592
	jmp l_35A2
l_3561

; optimize OK (service.pas), line = 3568

	lda BALL0.INPLAY
	jeq l_35AE
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_35AE

; optimize OK (service.pas), line = 3569

	lda BALL1.INPLAY
	jeq l_35C0
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_35C0

; optimize OK (service.pas), line = 3570

	lda BALL2.INPLAY
	jeq l_35D2
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_35D2
l_35A2

; optimize OK (service.pas), line = 3578

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3579

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3580

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3595

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3596

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3597

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3598

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3599

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3601

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_360A
	jsr VAUS_OUT
l_360A

; optimize OK (service.pas), line = 3603

	lda VAUS.LETTER
	cmp #$04
	jne l_3620

; optimize OK (service.pas), line = 3605

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3607

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3608

	mwy BALL2 :bp2
	ldy #$1B
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3610

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3612

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3619

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (service.pas), line = 3621

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3622

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3623

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3627

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3628

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3629

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3631

	lda #$00
	sta VAUS.LETTER
l_3620

; optimize OK (service.pas), line = 3635

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_3683
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_3683

; optimize OK (service.pas), line = 3639

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3641

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_36A1

; optimize OK (service.pas), line = 3643

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3645

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_36A1

; optimize OK (service.pas), line = 3651

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_36C4
	jeq l_36C4

; optimize OK (service.pas), line = 3654

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3656

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_36C4

; optimize OK (service.pas), line = 3663

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3664

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3665

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3707

	lda BALL0.LAUNCH
	jne l_36ED

; optimize OK (service.pas), line = 3709

	lda BALL0.INPLAY
	jne l_36FD

; optimize OK (service.pas), line = 3711

	mwy BALL0 :bp2
	ldy #$1B
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3712

	mwy BALL1 :bp2
	ldy #$1B
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3713

	sta BALL2.INPLAY
l_36FD
l_36ED

; optimize OK (service.pas), line = 3717

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3719

	lda BALL0.INPLAY
	jeq l_371A
	inc BALLS_IN_PLAY
l_371A

; optimize OK (service.pas), line = 3720

	lda BALL1.INPLAY
	jeq l_372D
	inc BALLS_IN_PLAY
l_372D

; optimize OK (service.pas), line = 3721

	lda BALL2.INPLAY
	jeq l_3740
	inc BALLS_IN_PLAY
l_3740

; optimize OK (service.pas), line = 3724

	lda BALL0.INPLAY
	jne l_3756

; optimize OK (service.pas), line = 3726

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3727

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3728

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3729

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3730

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3738

	jsr NOSOUND
l_3756
l_3509

; optimize OK (service.pas), line = 3519

	lda REMAIN_BLK
	jeq l_350Aw
	lda BALL0.INPLAY
	jeq l_350Aw
	lda SCORE.ABORTPLAY
	jeq l_350A
l_350Aw

; optimize OK (service.pas), line = 3794

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3795

	lda REMAIN_BLK
	jne l_37A4
	lda #$01
	sta RESULT
l_37A4
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03FF
X	= DATAORIGIN+$0400
Y	= DATAORIGIN+$0402
KEY	= DATAORIGIN+$0404
T1	= DATAORIGIN+$0406
T2	= DATAORIGIN+$0408
HLP	= DATAORIGIN+$040A
adr.BALL0	= DATAORIGIN+$040C	; [28] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$040C
BALL0.Y	= DATAORIGIN+$040E
BALL0.FINEX	= DATAORIGIN+$0410
BALL0.FINEY	= DATAORIGIN+$0412
BALL0.OLDX	= DATAORIGIN+$0414
BALL0.OLDY	= DATAORIGIN+$0416
BALL0.SPEED	= DATAORIGIN+$0418
BALL0.FINESPEED	= DATAORIGIN+$041A
BALL0.SPEEDX	= DATAORIGIN+$041C
BALL0.SPEEDY	= DATAORIGIN+$041E
BALL0.SBD	= DATAORIGIN+$0420
BALL0.BRWHIT	= DATAORIGIN+$0422
BALL0.INPLAY	= DATAORIGIN+$0423
BALL0.LAUNCH	= DATAORIGIN+$0424
BALL0.ONVAUS	= DATAORIGIN+$0425
BALL0.STM	= DATAORIGIN+$0427
adr.BALL1	= DATAORIGIN+$0428	; [28] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0428
BALL1.Y	= DATAORIGIN+$042A
BALL1.FINEX	= DATAORIGIN+$042C
BALL1.FINEY	= DATAORIGIN+$042E
BALL1.OLDX	= DATAORIGIN+$0430
BALL1.OLDY	= DATAORIGIN+$0432
BALL1.SPEED	= DATAORIGIN+$0434
BALL1.FINESPEED	= DATAORIGIN+$0436
BALL1.SPEEDX	= DATAORIGIN+$0438
BALL1.SPEEDY	= DATAORIGIN+$043A
BALL1.SBD	= DATAORIGIN+$043C
BALL1.BRWHIT	= DATAORIGIN+$043E
BALL1.INPLAY	= DATAORIGIN+$043F
BALL1.LAUNCH	= DATAORIGIN+$0440
BALL1.ONVAUS	= DATAORIGIN+$0441
BALL1.STM	= DATAORIGIN+$0443
adr.BALL2	= DATAORIGIN+$0444	; [28] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$0444
BALL2.Y	= DATAORIGIN+$0446
BALL2.FINEX	= DATAORIGIN+$0448
BALL2.FINEY	= DATAORIGIN+$044A
BALL2.OLDX	= DATAORIGIN+$044C
BALL2.OLDY	= DATAORIGIN+$044E
BALL2.SPEED	= DATAORIGIN+$0450
BALL2.FINESPEED	= DATAORIGIN+$0452
BALL2.SPEEDX	= DATAORIGIN+$0454
BALL2.SPEEDY	= DATAORIGIN+$0456
BALL2.SBD	= DATAORIGIN+$0458
BALL2.BRWHIT	= DATAORIGIN+$045A
BALL2.INPLAY	= DATAORIGIN+$045B
BALL2.LAUNCH	= DATAORIGIN+$045C
BALL2.ONVAUS	= DATAORIGIN+$045D
BALL2.STM	= DATAORIGIN+$045F
SCORES	= DATAORIGIN+$0460

@VarData	= X
@VarDataSize	= 100

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3818

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3876

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$046C
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$046E
Y	= DATAORIGIN+$0470
ST	= DATAORIGIN+$0472
OLDX	= DATAORIGIN+$0474
OLDY	= DATAORIGIN+$0476
NEWX	= DATAORIGIN+$0478
NEWY	= DATAORIGIN+$047A

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3885

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3887

	lda #$01
	sta X

l_37C9
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_37D7

; optimize OK (service.pas), line = 3889

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3890

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3891

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3892

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3894

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_37C9
l_37D7

; optimize OK (service.pas), line = 3897

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$047C

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3957

	jsr NOSOUND

; optimize OK (service.pas), line = 3958

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3969

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 4007

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$047D
X	= DATAORIGIN+$047F
Y	= DATAORIGIN+$0481
Z	= DATAORIGIN+$0483
K	= DATAORIGIN+$0485
IK	= DATAORIGIN+$0487

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 4015

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 4016

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3836
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3836

; optimize OK (service.pas), line = 4019

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 4020

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4024

	jsr SET_WALL

; optimize OK (service.pas), line = 4026

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 4027

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 4034

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4035

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4036

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_3865

; --- RepeatUntilProlog
l_3866

; optimize OK (service.pas), line = 4046

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_3878

; optimize FAIL (1, service.pas), line = 4048

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 4051

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 4055

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_3878

; optimize OK (service.pas), line = 4059

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4060

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4065

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4068

	jeq l_38C6

; optimize OK (service.pas), line = 4071

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4074

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_38E2

; optimize OK (service.pas), line = 4075

	lda #$01
	sta adr.SCORE.WALL_N,y
l_38E2

; optimize OK (service.pas), line = 4078

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_3914
l_38C6

; optimize OK (service.pas), line = 4084

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3929
	jsr GAME_OVER
l_3914
l_3929

; optimize OK (service.pas), line = 4089

	lda NWALL
	jne l_3866

; optimize FAIL (0, service.pas), line = 4092

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4093

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_3951
	lda #$01
	sta CUR_PLAYER
l_3951

; optimize OK (service.pas), line = 4099

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_396D
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_396D

; optimize OK (service.pas), line = 4104

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_3865

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$0489
NWALL	= DATAORIGIN+$048B

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 122

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 124

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 125

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$5E
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$58
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$52
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$64
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SOUNDFX.OFS
	lda #$83
	sta SOUNDFX.OFS+1
	lda #$03
	sta SOUNDFX.OFS+2
	lda #$00
	sta SOUNDFX.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta SOUNDFX.WIDTH
	lda #$00
	sta SOUNDFX.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$26
	sta SOUNDFX.HEIGHT
	lda #$00
	sta SOUNDFX.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$BB
	sta SHINEWALL.OFS
	lda #$86
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$BB
	sta MINIVAUS.OFS
	lda #$8B
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$1F
	sta LEVELSEL.OFS
	lda #$8C
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$EA
	sta LETTERS.OFS
	lda #$93
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$EA
	sta NORMAL.OFS
	lda #$AF
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$CA
	sta LASERS.OFS
	lda #$B0
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$AA
	sta ENLARGED.OFS
	lda #$B1
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$6A
	sta SHOOTS.OFS
	lda #$B3
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$D2
	sta FLUX.OFS
	lda #$B3
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$1A
	sta BALLDATA.OFS
	lda #$B5
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$33
	sta PATTERN.OFS
	lda #$B5
	sta PATTERN.OFS+1
	lda #$03
	sta PATTERN.OFS+2
	lda #$00
	sta PATTERN.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1A
	sta PATTERN.WIDTH
	lda #$00
	sta PATTERN.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$18
	sta PATTERN.HEIGHT
	lda #$00
	sta PATTERN.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$A3
	sta PATTERN0.OFS
	lda #$B7
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$13
	sta PATTERN1.OFS
	lda #$BA
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$D7
	sta PATTERN2.OFS
	lda #$BA
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 77

	lda #$09
	sta PATTERN3.OFS
	lda #$C0
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 78

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 79

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 81

	lda #$35
	sta PATTERN4.OFS
	lda #$C3
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 82

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 83

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 132

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 134

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 137

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 138

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3AAF

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 145

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 147

	jeq l_3AC5
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_3AC5

; optimize OK (arkanoid_vbxe.pas), line = 150

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3AAF

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 158

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $15E00
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.VBXE_RAM	= DATAORIGIN+$00D3	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$00D3
VBXE_RAM.SIZE	= DATAORIGIN+$00D7
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$005E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0069
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$007F
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0088
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0092
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0096
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00A1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00AD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00F3	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00F3
BALLDATA.HEIGHT	= DATAORIGIN+$00F5
BALLDATA.OFS	= DATAORIGIN+$00F7
adr.PLAYSCREEN	= DATAORIGIN+$00FB	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00FB
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00FD
PLAYSCREEN.OFS	= DATAORIGIN+$00FF
adr.PLAYVAUS	= DATAORIGIN+$0103	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$0103
PLAYVAUS.HEIGHT	= DATAORIGIN+$0105
PLAYVAUS.OFS	= DATAORIGIN+$0107
adr.NORMAL	= DATAORIGIN+$010B	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$010B
NORMAL.HEIGHT	= DATAORIGIN+$010D
NORMAL.OFS	= DATAORIGIN+$010F
adr.ENLARGED	= DATAORIGIN+$0113	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$0113
ENLARGED.HEIGHT	= DATAORIGIN+$0115
ENLARGED.OFS	= DATAORIGIN+$0117
adr.LASERS	= DATAORIGIN+$011B	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$011B
LASERS.HEIGHT	= DATAORIGIN+$011D
LASERS.OFS	= DATAORIGIN+$011F
adr.EXPLOSION	= DATAORIGIN+$0123	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$0123
EXPLOSION.HEIGHT	= DATAORIGIN+$0125
EXPLOSION.OFS	= DATAORIGIN+$0127
adr.NEWVAUS	= DATAORIGIN+$012B	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$012B
NEWVAUS.HEIGHT	= DATAORIGIN+$012D
NEWVAUS.OFS	= DATAORIGIN+$012F
adr.PRESENTS	= DATAORIGIN+$0133	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0133
PRESENTS.HEIGHT	= DATAORIGIN+$0135
PRESENTS.OFS	= DATAORIGIN+$0137
adr.SOUNDFX	= DATAORIGIN+$013B	; [8] RECORD
.var SOUNDFX	= adr.SOUNDFX .word
SOUNDFX.WIDTH	= DATAORIGIN+$013B
SOUNDFX.HEIGHT	= DATAORIGIN+$013D
SOUNDFX.OFS	= DATAORIGIN+$013F
adr.SHINEWALL	= DATAORIGIN+$0143	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$0143
SHINEWALL.HEIGHT	= DATAORIGIN+$0145
SHINEWALL.OFS	= DATAORIGIN+$0147
adr.MINIVAUS	= DATAORIGIN+$014B	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$014B
MINIVAUS.HEIGHT	= DATAORIGIN+$014D
MINIVAUS.OFS	= DATAORIGIN+$014F
adr.LEVELSEL	= DATAORIGIN+$0153	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0153
LEVELSEL.HEIGHT	= DATAORIGIN+$0155
LEVELSEL.OFS	= DATAORIGIN+$0157
adr.LETTERS	= DATAORIGIN+$015B	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$015B
LETTERS.HEIGHT	= DATAORIGIN+$015D
LETTERS.OFS	= DATAORIGIN+$015F
adr.SHOOTS	= DATAORIGIN+$0163	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0163
SHOOTS.HEIGHT	= DATAORIGIN+$0165
SHOOTS.OFS	= DATAORIGIN+$0167
adr.FLUX	= DATAORIGIN+$016B	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$016B
FLUX.HEIGHT	= DATAORIGIN+$016D
FLUX.OFS	= DATAORIGIN+$016F
adr.VAUS	= DATAORIGIN+$0173	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0173
VAUS.Y	= DATAORIGIN+$0174
VAUS.OLDX	= DATAORIGIN+$0175
VAUS.OLDY	= DATAORIGIN+$0177
VAUS.OLDLEN	= DATAORIGIN+$0179
VAUS.WIDTH	= DATAORIGIN+$017B
VAUS.HEIGHT	= DATAORIGIN+$017C
VAUS.FLASH	= DATAORIGIN+$017D
VAUS.IFLASH	= DATAORIGIN+$017E
VAUS.LETTER	= DATAORIGIN+$017F
adr.PATTERN	= DATAORIGIN+$0180	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0180
PATTERN.HEIGHT	= DATAORIGIN+$0182
PATTERN.OFS	= DATAORIGIN+$0184
adr.PATTERN0	= DATAORIGIN+$0188	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0188
PATTERN0.HEIGHT	= DATAORIGIN+$018A
PATTERN0.OFS	= DATAORIGIN+$018C
adr.PATTERN1	= DATAORIGIN+$0190	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$0190
PATTERN1.HEIGHT	= DATAORIGIN+$0192
PATTERN1.OFS	= DATAORIGIN+$0194
adr.PATTERN2	= DATAORIGIN+$0198	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0198
PATTERN2.HEIGHT	= DATAORIGIN+$019A
PATTERN2.OFS	= DATAORIGIN+$019C
adr.PATTERN3	= DATAORIGIN+$01A0	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$01A0
PATTERN3.HEIGHT	= DATAORIGIN+$01A2
PATTERN3.OFS	= DATAORIGIN+$01A4
adr.PATTERN4	= DATAORIGIN+$01A8	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$01A8
PATTERN4.HEIGHT	= DATAORIGIN+$01AA
PATTERN4.OFS	= DATAORIGIN+$01AC
STATUS	= DATAORIGIN+$01B0
SUCCESS	= DATAORIGIN+$01B1
REMAIN_BLK	= DATAORIGIN+$01B2
TOTALWALL	= DATAORIGIN+$01B3
adr.SCORE	= DATAORIGIN+$01B4	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$01B4] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$01C0] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$01C3] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$01C6
SCORE.PL_NUMB	= DATAORIGIN+$01CA
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01CB] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$01CE
CUR_PLAYER	= DATAORIGIN+$01CF
adr.SHINEREC	= DATAORIGIN+$01D0	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$01D0
SHINEREC.YB	= DATAORIGIN+$01D1
SHINEREC.FRAME	= DATAORIGIN+$01D2
SHINEREC.BLOCK	= DATAORIGIN+$01D3
SHINEREC.ACTIVE	= DATAORIGIN+$01D4
LV	= DATAORIGIN+$01D5
TRAINER	= DATAORIGIN+$01D7
adr.LETT	= DATAORIGIN+$01D8	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01D8
LETT.Y	= DATAORIGIN+$01D9
LETT.TYP	= DATAORIGIN+$01DA
LETT.FRAME	= DATAORIGIN+$01DC
LETT.SUBFRAME	= DATAORIGIN+$01DD
LETT.ACTIVE	= DATAORIGIN+$01DE
LETT.INCOMING	= DATAORIGIN+$01DF
LETT.NEXTX	= DATAORIGIN+$01E1
LETT.NEXTY	= DATAORIGIN+$01E3
LETT.NEXTTYPE	= DATAORIGIN+$01E5
LETT.LAST	= DATAORIGIN+$01E7
adr.FIRE	= DATAORIGIN+$01E9	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01E9
FIRE.Y	= DATAORIGIN+$01EA
FIRE.SHOT	= DATAORIGIN+$01EB
FIRE.AVL	= DATAORIGIN+$01EC
FIRE.NW	= DATAORIGIN+$01ED
BALLS_IN_PLAY	= DATAORIGIN+$01EE
SCRFLUX	= DATAORIGIN+$01EF
SCRFLUXCNT	= DATAORIGIN+$01F0
SOUND_ON	= DATAORIGIN+$01F1
OLD_SCORES	= DATAORIGIN+$01F2
HLP	= DATAORIGIN+$01F6
F_HLP	= DATAORIGIN+$01F8
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.TMP	= $C200
.var TMP	= adr.TMP .word
adr.MODY	= $C300
.var MODY	= adr.MODY .word
adr.MODX	= $C400
.var MODX	= adr.MODX .word
adr.SCANLINE	= $C500
.var SCANLINE	= adr.SCANLINE .word
adr.SCANLINE2	= $C580
.var SCANLINE2	= adr.SCANLINE2 .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1164

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
.endm

	end
