; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.3 [2025/08/03] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $1000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0010

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	SQRT						; FUNCTION | OVERLOAD
.local	@010185000

; optimize OK (SYSTEM), line = 801

	lda X+3
	bmi @+
	ora X+2
	ora X+1
	ora X
	jne l_0029
@
	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0029

; optimize OK (SYSTEM), line = 803

	lda <C
	sta SP
	lda >C
	sta SP+1

; optimize OK (SYSTEM), line = 805

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta C
	lda :FPMAN1
	sta C+1
	lda :FPMAN2
	sta C+2
	lda :FPMAN3
	sta C+3

; optimize OK (SYSTEM), line = 807

	cmp #$3F
	bne @+
	lda C+2
	cmp #$80
	bne @+
	lda C+1
	cmp #$00
	bne @+
	lda C
	cmp #$01
@
	jcc l_0048
	lda C
	sta :STACKORIGIN+9
	lda C+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda C+2
	sub #$80
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda C+3
	sbc #$3F
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$80
	sta C+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$3F
	sta C+3
	lda :STACKORIGIN+9
	sta C
	lda :STACKORIGIN+STACKWIDTH+9
	sta C+1
l_0048

; optimize OK (SYSTEM), line = 809

	mwy SP :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3

; optimize OK (SYSTEM), line = 811

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 812

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 813

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
SP	= DATAORIGIN+$0013
C	= DATAORIGIN+$0015

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 862

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 863

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 864

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 866

	lda VALUE+3
	ora VALUE+2
	ora VALUE+1
	ora VALUE
	jne l_00AF

; optimize OK (SYSTEM), line = 867

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_00AF

; optimize OK (SYSTEM), line = 870

	lda X+3
	jpl l_00CD

; optimize OK (SYSTEM), line = 871

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 872

	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_00CD
l_00BD

; optimize OK (SYSTEM), line = 875

	lda X
	sta @REAL_DIV.A
	lda X+1
	sub #$01
	sta @REAL_DIV.A+1
	lda X+2
	sbc #$00
	sta @REAL_DIV.A+2
	lda X+3
	sbc #$00
	sta @REAL_DIV.A+3
	lda X
	sta @REAL_DIV.B
	lda X+1
	add #$01
	sta @REAL_DIV.B+1
	lda X+2
	adc #$00
	sta @REAL_DIV.B+2
	lda X+3
	adc #$00
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 876

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1
	lda :eax+2
	sta Y+2
	lda :eax+3
	sta Y+3

; optimize OK (SYSTEM), line = 877

	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	lda #$01
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$04
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$0B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$13
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$1B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$24
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$33
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$55
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 880

	lda #$C9
	add X
	sta X
	lda #$00
	adc X+1
	sta X+1
	lda #$00
	adc X+2
	sta X+2
	lda #$00
	adc X+3
	sta X+3

; optimize OK (SYSTEM), line = 882

	lda SIGN
	jeq l_014F

; optimize OK (SYSTEM), line = 883

	lda #$00
	sub X
	sta RESULT
	lda #$00
	sbc X+1
	sta RESULT+1
	lda #$00
	sbc X+2
	sta RESULT+2
	lda #$00
	sbc X+3
	jmp l_0160
l_014F

; optimize OK (SYSTEM), line = 885

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0160
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$001D
X	= DATAORIGIN+$0021
Y	= DATAORIGIN+$0025
SIGN	= DATAORIGIN+$0029

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	RSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_019D
l_019E

; optimize OK (SYSTEM), line = 1776

	lda X
	sub #$48
	sta X
	lda X+1
	sbc #$06
	sta X+1
	lda X+2
	sbc #$00
	sta X+2
	lda X+3
	sbc #$00
	sta X+3
l_019D
	.LOCAL
	lda X+3
	sub #$00
	bne L4
	lda X+2
	cmp #$00
	bne L1
	lda X+1
	cmp #$06
	bne L1
	lda X
	cmp #$48
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_019E

; --- WhileProlog
	jmp l_01B2
l_01B3

; optimize OK (SYSTEM), line = 1777

	lda X
	add #$48
	sta X
	lda X+1
	adc #$06
	sta X+1
	lda X+2
	adc #$00
	sta X+2
	lda X+3
	adc #$00
	sta X+3
l_01B2
	lda X+3
	jmi l_01B3

; optimize OK (SYSTEM), line = 1780

	lda #$A3
	sta @REAL_MUL.B
	lda #$00
	sta @REAL_MUL.B+1
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1783

	lda X
	sta @REAL_TRUNC.A
	lda X+1
	sta @REAL_TRUNC.A+1
	lda X+2
	sta @REAL_TRUNC.A+2
	lda X+3
	sta @REAL_TRUNC.A+3
	jsr @REAL_TRUNC
	lda :eax
	sta I

; optimize OK (SYSTEM), line = 1786

	lda X+3
	jpl l_01E1
	dec I
l_01E1

; optimize OK (SYSTEM), line = 1789

	ldy #$00
	lda I
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda X+1
	sub :STACKORIGIN+STACKWIDTH+10
	sta X+1
	lda X+2
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta X+2
	lda X+3
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta X+3

; optimize OK (SYSTEM), line = 1792

	lda SC
	jeq l_01FE
	inc I
l_01FE

; optimize OK (SYSTEM), line = 1795

	lda I
	and #$01
	jne l_021B
	lda #$00
	sub X
	sta X
	lda #$01
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_021B

; optimize OK (SYSTEM), line = 1798

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1799

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda #$05
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$3C
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda #$00
	sub X
	sta @REAL_MUL.B
	lda #$01
	sbc X+1
	sta @REAL_MUL.B+1
	lda #$00
	sbc X+2
	sta @REAL_MUL.B+2
	lda #$00
	sbc X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta RESULT
	lda :eax+1
	sta RESULT+1
	lda :eax+2
	sta RESULT+2
	lda :eax+3
	sta RESULT+3

; optimize OK (SYSTEM), line = 1802

	lda I
	and #$02
	cmp #$02
	jne l_0260
	lda #$00
	sub RESULT
	sta RESULT
	lda #$00
	sbc RESULT+1
	sta RESULT+1
	lda #$00
	sbc RESULT+2
	sta RESULT+2
	lda #$00
	sbc RESULT+3
	sta RESULT+3
l_0260
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$002A
SC	= DATAORIGIN+$002E
RESULT	= DATAORIGIN+$002F
I	= DATAORIGIN+$0033

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1817

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$00
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0034
RESULT	= DATAORIGIN+$0038

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1831

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$01
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$003C
RESULT	= DATAORIGIN+$0040

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0044
RESULT	= DATAORIGIN+$0045

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_02B2

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_02C0
l_02B2

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_02C0
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0046
RESULT	= DATAORIGIN+$0048

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$004A
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$004B
GETCOLOR	= DATAORIGIN+$004C
VIDEORAM	= DATAORIGIN+$004D
adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$004F
LASTARCCOORDS.Y	= DATAORIGIN+$0051
LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
LASTARCCOORDS.XEND	= DATAORIGIN+$0057
LASTARCCOORDS.YEND	= DATAORIGIN+$0059
WIN_LEFT	= DATAORIGIN+$005B
WIN_RIGHT	= DATAORIGIN+$005D
WIN_TOP	= DATAORIGIN+$005F
WIN_BOTTOM	= DATAORIGIN+$0061
SCANLINE_WIDTH	= DATAORIGIN+$0063
CURRENTX	= DATAORIGIN+$0064
CURRENTY	= DATAORIGIN+$0066

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0074
VRAM.SIZE	= DATAORIGIN+$0078
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00AD

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00AF
B	= DATAORIGIN+$00B1

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSERESET					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 70

	lda MOUS.FIRE
	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (arkanoid_vbxe.pas), line = 72

	ldy #1
	lda MOUS.FIRE
	beq @+
	dey
@
	tya
	sta MOUS.FIRE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00B3

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 85

	mwy X :bp2
	ldy #$00
	lda MOUS.X
	sta (:bp2),y
	iny
	lda MOUS.X+1
	sta (:bp2),y

; optimize OK (arkanoid_vbxe.pas), line = 86

	mwy Y :bp2
	ldy #$00
	lda #$BE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

X	= DATAORIGIN+$00B5
Y	= DATAORIGIN+$00B7

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSE_X_LIMIT					; PROCEDURE

; ------------------------------------------------------------

MN	= DATAORIGIN+$00B9
MX	= DATAORIGIN+$00BB

@VarData	= MN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSEMOVE					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$00BD
Y	= DATAORIGIN+$00BF

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; optimize OK (vservice.pas), line = 275

	lda #$00
	sta I
	sta I+1
	lda SIZE
	sub #$01
	sta @FORTMP_03C7_0
	lda SIZE+1
	sbc #$00
	sta @FORTMP_03C7_1

l_03CA
; --- ForToDoCondition
	lda @FORTMP_03C7_1::#$00
	cmp I+1
	bne @+
	lda @FORTMP_03C7_0::#$00
	cmp I
@
	jcc l_03D6

; optimize OK (vservice.pas), line = 276

	lda SRC
	add I
	tay
	lda adr.SCREEN,y
	jeq l_03EE
	lda DST
	add I
	sta :STACKORIGIN+9
	lda adr.SCREEN,y
	ldy :STACKORIGIN+9
	sta adr.SCREEN,y
l_03EE

; --- ForToDoEpilog
	inc I
	jne l_03CA
	inc I+1
	jne l_03CA
l_03D6

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0EBE
DST	= DATAORIGIN+$0EC2
SIZE	= DATAORIGIN+$0EC6
I	= DATAORIGIN+$0EC8

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTMP						; PROCEDURE

; optimize OK (vservice.pas), line = 285

	lda #$00
	sta X
	ldy SIZE
	dey
	sty @FORTMP_0418_0

l_041B
; --- ForToDoCondition
	lda @FORTMP_0418_0::#$00
	cmp X
	jcc l_0429

; optimize OK (vservice.pas), line = 286

	lda DST
	add X
	sta :STACKORIGIN+9
	ldy X
	lda adr.TMP,y
	ldy :STACKORIGIN+9
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc X
	jne l_041B
l_0429

; ------------------------------------------------------------

DST	= DATAORIGIN+$0ECC
SIZE	= DATAORIGIN+$0ED0
X	= DATAORIGIN+$0ED1

@VarData	= DST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; optimize OK (vservice.pas), line = 295

	lda #$00
	sta X
	sta X+1
	lda SIZE
	sub #$01
	sta @FORTMP_044D_0
	lda SIZE+1
	sbc #$00
	sta @FORTMP_044D_1

l_0450
; --- ForToDoCondition
	lda @FORTMP_044D_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_044D_0::#$00
	cmp X
@
	jcc l_045C

; optimize OK (vservice.pas), line = 296

	lda DST
	add X
	sta :STACKORIGIN+9
	lda SRC
	add X
	tay
	lda adr.SCREEN,y
	ldy :STACKORIGIN+9
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc X
	jne l_0450
	inc X+1
	jne l_0450
l_045C

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0ED3
DST	= DATAORIGIN+$0ED7
SIZE	= DATAORIGIN+$0EDB
X	= DATAORIGIN+$0EDD

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBYTE					; PROCEDURE

; optimize OK (vservice.pas), line = 304

	ldy SRC
	lda adr.SCREEN,y
	ldy DST
	sta adr.SCREEN,y

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0EE1
DST	= DATAORIGIN+$0EE5

@VarData	= SRC
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (vservice.pas), line = 312

	ldy DST
	lda V
	sta adr.SCREEN,y

; ------------------------------------------------------------

DST	= DATAORIGIN+$0EE9
V	= DATAORIGIN+$0EED

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (vservice.pas), line = 320

	ldy SRC
	lda adr.SCREEN,y
	sta RESULT
@exit

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0EEE
RESULT	= DATAORIGIN+$0EF2

@VarData	= SRC
@VarDataSize	= 4

	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0EF3

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (vservice.pas), line = 387

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_04B3
	lda A
	sta RESULT
	lda A+1
	jmp l_04C2
l_04B3

; optimize OK (vservice.pas), line = 388

	lda B
	sta RESULT
	lda B+1
l_04C2
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0EF5
B	= DATAORIGIN+$0EF7
RESULT	= DATAORIGIN+$0EF9

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (vservice.pas), line = 394

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_04DD
	lda A
	sta RESULT
	lda A+1
	jmp l_04EC
l_04DD

; optimize OK (vservice.pas), line = 395

	lda B
	sta RESULT
	lda B+1
l_04EC
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0EFB
B	= DATAORIGIN+$0EFD
RESULT	= DATAORIGIN+$0EFF

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (vservice.pas), line = 404

	sta STATUS

; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$0F01

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (vservice.pas), line = 442

	lda #$00
	sta Y

l_0508
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_0516

; optimize OK (vservice.pas), line = 443

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	lda ROW
	add :STACKORIGIN+9
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda :eax
	sta (:bp2),y
	iny
	lda :eax+1
	sta (:bp2),y

; --- ForToDoEpilog
	inc Y
	jne l_0508
l_0516

; optimize OK (vservice.pas), line = 445

	lda #$C8
	sta Y

l_0531
; --- ForToDoCondition
	lda Y
	cmp #$FB
	jcs l_053F

; optimize OK (vservice.pas), line = 446

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda #$FA
	sta (:bp2),y

; --- ForToDoEpilog
	inc Y
	jne l_0531
l_053F

; ------------------------------------------------------------

Y	= DATAORIGIN+$0F02

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 501

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (vservice.pas), line = 502

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (vservice.pas), line = 504

	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda YB
	sta :eax
	lda YB+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add XB
	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_057C

; optimize OK (vservice.pas), line = 506

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (vservice.pas), line = 507

	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda YB
	sta :eax
	lda YB+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add XB
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_05A4
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_05A4

; optimize OK (vservice.pas), line = 509

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (vservice.pas), line = 510

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (vservice.pas), line = 511

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (vservice.pas), line = 513

	lda #$00
	sta Y

l_05D4
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_05E2

; optimize OK (vservice.pas), line = 515

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (vservice.pas), line = 518

	lda YF
	add Y
	sta :STACKORIGIN+11
	lda YF+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XF
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda XF+1
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_05D4
l_05E2
l_057C

; optimize FAIL (0, vservice.pas), line = 522

	inc SHINEREC.FRAME

; optimize OK (vservice.pas), line = 523

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0629
	lda #$00
	sta SHINEREC.ACTIVE
l_0629

; ------------------------------------------------------------

XB	= DATAORIGIN+$0F03
YB	= DATAORIGIN+$0F05
FRAME	= DATAORIGIN+$0F07
XF	= DATAORIGIN+$0F09
YF	= DATAORIGIN+$0F0B
FR	= DATAORIGIN+$0F0D
OG	= DATAORIGIN+$0F0F
Y	= DATAORIGIN+$0F11

@VarData	= XB
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 532

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', vservice.pas), line = 533

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (vservice.pas), line = 540

	lda SHINEREC.ACTIVE
	jeq l_0649
	jsr UNSHINE_BLOCK
l_0649

; optimize OK (vservice.pas), line = 542

	lda XB
	sta SHINEREC.XB

; optimize OK (vservice.pas), line = 543

	lda YB
	sta SHINEREC.YB

; optimize OK (vservice.pas), line = 544

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (vservice.pas), line = 545

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (vservice.pas), line = 546

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0F12
YB	= DATAORIGIN+$0F13

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (vservice.pas), line = 552

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_068A
	jsr SHINE_BLOCK
l_068A

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_0693

; optimize OK (vservice.pas), line = 560

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (vservice.pas), line = 561

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (vservice.pas), line = 562

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_06A1

; optimize FAIL (0, vservice.pas), line = 567

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (vservice.pas), line = 568

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (vservice.pas), line = 571

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_06A1

; optimize OK (vservice.pas), line = 575

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.LAST
	sta :STACKORIGIN+10
	ldy #$00
	lda LETT.LAST+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp :STACKORIGIN+STACKWIDTH*3+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
@
	jeq l_0693

; optimize OK (vservice.pas), line = 577

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0F14
RN	= DATAORIGIN+$0F16
SUM	= DATAORIGIN+$0F18
LETTER	= DATAORIGIN+$0F1A

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (vservice.pas), line = 586

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (vservice.pas), line = 588

	lda #$00
	sta YL

l_06F1
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_06FF

; optimize OK (vservice.pas), line = 590

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FW+1
	lda :STACKORIGIN+9
	sta FW

; optimize OK (vservice.pas), line = 592

	lda LETT.Y
	add YL
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda LETT.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda LETTERS.OFS
	add FW
	sta :STACKORIGIN+11
	lda LETTERS.OFS+1
	adc FW+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda LETTERS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda LETTERS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add FL
	sta BLITZERO.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc FL+1
	sta BLITZERO.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITZERO.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITZERO.SRC+3
	lda #$10
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YL
	jne l_06F1
l_06FF

; ------------------------------------------------------------

FL	= DATAORIGIN+$0F1C
FW	= DATAORIGIN+$0F1E
YL	= DATAORIGIN+$0F20

@VarData	= FL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (vservice.pas), line = 604

	lda #$00
	sta YL

l_073D
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_074B

; optimize OK (vservice.pas), line = 606

	lda LETT.Y
	adc YL
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda LETT.X
	add (:bp2),y
	sta AD
	iny
	lda #$00
	adc (:bp2),y
	sta AD+1

; optimize OK (vservice.pas), line = 607

	cmp #$FA
	jcs l_0770

; optimize OK (vservice.pas), line = 610

	lda AD
	sta BLITROW.DST
	lda AD+1
	sta BLITROW.DST+1
	lda #$00
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add AD
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc AD+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_0770

; --- ForToDoEpilog
	inc YL
	jne l_073D
l_074B

; ------------------------------------------------------------

AD	= DATAORIGIN+$0F21
YL	= DATAORIGIN+$0F23

@VarData	= AD
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', vservice.pas), line = 618

	jsr REMOVE_LETTER

; optimize OK (vservice.pas), line = 619

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (vservice.pas), line = 625

	lda LETT.ACTIVE
	jeq l_079F
	jsr DISABLE_LETTER
l_079F

; optimize OK (vservice.pas), line = 627

	lda XL
	sta LETT.X

; optimize OK (vservice.pas), line = 628

	lda YL
	sta LETT.Y

; optimize OK (vservice.pas), line = 629

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (vservice.pas), line = 630

	lda #$00
	sta LETT.FRAME

; optimize OK (vservice.pas), line = 631

	sta LETT.SUBFRAME

; optimize OK (vservice.pas), line = 632

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0F24
YL	= DATAORIGIN+$0F26
LETTER	= DATAORIGIN+$0F28

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (vservice.pas), line = 638

	lda LETT.ACTIVE
	jeq l_07CE

; optimize FAIL ('REMOVE_LETTER', vservice.pas), line = 640

	jsr REMOVE_LETTER

; optimize FAIL (0, vservice.pas), line = 641

	inc LETT.Y

; optimize OK (vservice.pas), line = 642

	lda LETT.Y
	cmp #$C8
	jcc l_07E6
; optimize FAIL ('DISABLE_LETTER', vservice.pas), line = 643
	jmp l_07F1
l_07E6

; optimize FAIL ('PUT_LETTER', vservice.pas), line = 645

	jsr PUT_LETTER

; optimize FAIL (0, vservice.pas), line = 646

	inc LETT.SUBFRAME

; optimize OK (vservice.pas), line = 647

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0808

; optimize OK (vservice.pas), line = 649

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, vservice.pas), line = 650

	inc LETT.FRAME
l_0808

; optimize OK (vservice.pas), line = 653

	lda LETT.FRAME
	cmp #$08
	jne l_0825
	lda #$00
	sta LETT.FRAME
l_0825

; optimize OK (vservice.pas), line = 655

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_087E
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_087E
	jeq l_087E
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_087E
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_087E
	jeq l_087E
@

; optimize OK (vservice.pas), line = 658

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (vservice.pas), line = 659

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (vservice.pas), line = 660

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_07F1

; optimize FAIL ('DISABLE_LETTER', vservice.pas), line = 661

	jsr DISABLE_LETTER
l_087E

; optimize OK (vservice.pas), line = 665

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_089F
l_07CE

; optimize OK (vservice.pas), line = 667

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_08B0

; optimize OK (vservice.pas), line = 668

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_089F
l_08B0

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (vservice.pas), line = 678

	lda BTM.HEIGHT
	sta :ecx
	lda BTM.HEIGHT+1
	sta :ecx+1
	lda BTM.WIDTH
	sta :eax
	lda BTM.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta BLITROW.SIZE
	lda :eax+1
	sta BLITROW.SIZE+1
	lda BTM.OFS
	sta BLITROW.SRC
	lda BTM.OFS+1
	sta BLITROW.SRC+1
	lda BTM.OFS+2
	sta BLITROW.SRC+2
	lda BTM.OFS+3
	sta BLITROW.SRC+3
	lda #$00
	sta BLITROW.DST
	sta BLITROW.DST+1
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	jsr BLITROW

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0F2A	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0F2A
BTM.HEIGHT	= DATAORIGIN+$0F2C
BTM.OFS	= DATAORIGIN+$0F2E
X	= DATAORIGIN+$0F32
Y	= DATAORIGIN+$0F34
OFST	= DATAORIGIN+$0F36

@VarData	= BTM.WIDTH
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPALETTE					; PROCEDURE

; ------------------------------------------------------------

BTM	= DATAORIGIN+$0F38
BTM.WIDTH	= DATAORIGIN+$0000
BTM.HEIGHT	= DATAORIGIN+$0002
BTM.OFS	= DATAORIGIN+$0004

@VarData	= BTM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 773

	lda #$00
	sta YP

l_08DC
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_08EA

; optimize OK (vservice.pas), line = 775

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta ADR
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta ADR+1

; optimize OK (vservice.pas), line = 778

	lda ADR
	sta BLITZERO.DST
	lda ADR+1
	sta BLITZERO.DST+1
	lda #$00
	sta BLITZERO.DST+2
	sta BLITZERO.DST+3
	sta :STACKORIGIN+STACKWIDTH+12
	lda YP
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add YP
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda BALLDATA.OFS
	add :STACKORIGIN+12
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YP
	jne l_08DC
l_08EA

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F3C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$0F40
ADR	= DATAORIGIN+$0F41

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 792

	lda #$00
	sta YP

l_0929
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0937

; optimize OK (vservice.pas), line = 794

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta TEMP
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta TEMP+1

; optimize OK (vservice.pas), line = 796

	ora TEMP
	jeq l_096D
	lda TEMP+1
	cmp #$FA
	jcs l_096D

; optimize OK (vservice.pas), line = 799

	lda TEMP
	sta BLITROW.DST
	lda TEMP+1
	sta BLITROW.DST+1
	lda #$00
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add TEMP
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc TEMP+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$05
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_096D

; --- ForToDoEpilog
	inc YP
	jne l_0929
l_0937

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F43
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$0F47
TEMP	= DATAORIGIN+$0F48

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 839

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+9
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	bne @+
	dey
@
	sty :STACKORIGIN+10
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+12
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+12
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+11
	cmp :STACKORIGIN+STACKWIDTH+12
	bne @+
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+12
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_09BF

; optimize OK (vservice.pas), line = 841

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_09BF

; optimize OK (vservice.pas), line = 843

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (vservice.pas), line = 845

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 846

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F4A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (vservice.pas), line = 856

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (vservice.pas), line = 857

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize FAIL (1, vservice.pas), line = 859

	inx
	mva SPEED :STACKORIGIN,x
	mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
	lda SX
	sta :ecx
	sta :ztmp8
	lda SX+1
	sta :ecx+1
	sta :ztmp9
	lda SX
	sta :eax
	sta :ztmp10
	lda SX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda SY
	sta :ecx
	sta :ztmp8
	lda SY+1
	sta :ecx+1
	sta :ztmp9
	lda SY
	sta :eax
	sta :ztmp10
	lda SY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
	mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3
	dex

; optimize OK (vservice.pas), line = 864

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 865

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F4E
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
SPEED	= DATAORIGIN+$0F52
SX	= DATAORIGIN+$0F54
SY	= DATAORIGIN+$0F56
VM	= DATAORIGIN+$0F58

@VarData	= BALL
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (vservice.pas), line = 872

	lda ANGLE
	sta :STACKORIGIN+9
	ldy #$00
	lda ANGLE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+2
	sty @REAL_MUL.A+3
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sta @REAL_MUL.A
	lda #$24
	sta @REAL_MUL.B
	lda #$03
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+1
	jsr @REAL_MUL
	lda #$00
	sta @REAL_DIV.B
	lda #$B4
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	lda :eax+2
	sta W+2
	lda :eax+3
	sta W+3

; optimize FAIL (1, vservice.pas), line = 874

	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.COS.@01018E000.X
	lda W+1
	sta SYSTEM.COS.@01018E000.X+1
	lda W+2
	sta SYSTEM.COS.@01018E000.X+2
	lda W+3
	sta SYSTEM.COS.@01018E000.X+3
	jsr SYSTEM.COS.@01018E000
	inx
	mva SYSTEM.COS.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y

; optimize FAIL (1, vservice.pas), line = 875

	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.SIN.@01018E000.X
	lda W+1
	sta SYSTEM.SIN.@01018E000.X+1
	lda W+2
	sta SYSTEM.SIN.@01018E000.X+2
	lda W+3
	sta SYSTEM.SIN.@01018E000.X+3
	jsr SYSTEM.SIN.@01018E000
	inx
	mva SYSTEM.SIN.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F5C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
ANGLE	= DATAORIGIN+$0F60
W	= DATAORIGIN+$0F62

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (vservice.pas), line = 882

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0A47
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0A63
l_0A47

; optimize OK (vservice.pas), line = 888

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta @REAL_DIV.A+1
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+2
	sty @REAL_DIV.B+3
	lda :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sta @REAL_DIV.B
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_DIV.A+2
	sty @REAL_DIV.A+3
	lda #$00
	sta @REAL_DIV.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+1
	jsr @REAL_DIV
	lda #$00
	sub :eax
	sta SYSTEM.ARCTAN.@01018E000.VALUE
	lda #$00
	sbc :eax+1
	sta SYSTEM.ARCTAN.@01018E000.VALUE+1
	lda #$00
	sbc :eax+2
	sta SYSTEM.ARCTAN.@01018E000.VALUE+2
	lda #$00
	sbc :eax+3
	sta SYSTEM.ARCTAN.@01018E000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018E000
	inx
	inx
	lda #$00
	sta @REAL_MUL.B
	lda #$B4
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	lda #$00
	sta @REAL_MUL.B+3
	lda SYSTEM.ARCTAN.@01018E000.RESULT
	sta @REAL_MUL.A
	lda SYSTEM.ARCTAN.@01018E000.RESULT+1
	sta @REAL_MUL.A+1
	lda SYSTEM.ARCTAN.@01018E000.RESULT+2
	sta @REAL_MUL.A+2
	lda SYSTEM.ARCTAN.@01018E000.RESULT+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$24
	sta @REAL_DIV.B
	lda #$03
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	lda #$00
	sta @REAL_DIV.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_DIV.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_DIV.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_DIV.A+3
	jsr @REAL_DIV
	dex
	jsr @REAL_ROUND
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	dex

; optimize OK (vservice.pas), line = 890

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0A8A
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0A8A

; optimize OK (vservice.pas), line = 891

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01
	sta W+1

; optimize OK (vservice.pas), line = 892

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda W
	sta @SMALLINT.MOD.A
	lda W+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta W
	lda @SMALLINT.MOD.RESULT+1
	sta W+1
l_0A63

; optimize OK (vservice.pas), line = 895

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F66
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
RESULT	= DATAORIGIN+$0F6A
W	= DATAORIGIN+$0F6C

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 903

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	ldy #BALL.X-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 909

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 914

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vservice.pas), line = 915

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vservice.pas), line = 917

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (vservice.pas), line = 919

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vservice.pas), line = 920

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F6E
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1A
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (vservice.pas), line = 928

	lda BALL.SPEEDX
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDX+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDX
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda BALL.SPEEDY
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDY+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDY
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	lda SYSTEM.SQRT.@010185000.RESULT
	sta :FP2MAN0
	lda SYSTEM.SQRT.@010185000.RESULT+1
	sta :FP2MAN1
	lda SYSTEM.SQRT.@010185000.RESULT+2
	sta :FP2MAN2
	lda SYSTEM.SQRT.@010185000.RESULT+3
	sta :FP2MAN3
	jsr @FROUND
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	dex
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0F72	; [27] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0F72
BALL.Y	= DATAORIGIN+$0F74
BALL.FINEX	= DATAORIGIN+$0F76
BALL.FINEY	= DATAORIGIN+$0F78
BALL.OLDX	= DATAORIGIN+$0F7A
BALL.OLDY	= DATAORIGIN+$0F7C
BALL.SPEED	= DATAORIGIN+$0F7E
BALL.FINESPEED	= DATAORIGIN+$0F80
BALL.SPEEDX	= DATAORIGIN+$0F82
BALL.SPEEDY	= DATAORIGIN+$0F84
BALL.SBD	= DATAORIGIN+$0F86
BALL.BRWHIT	= DATAORIGIN+$0F88
BALL.INPLAY	= DATAORIGIN+$0F89
BALL.LAUNCH	= DATAORIGIN+$0F8A
BALL.ONVAUS	= DATAORIGIN+$0F8B
BALL.STM	= DATAORIGIN+$0F8C
RESULT	= DATAORIGIN+$0F8D

@VarData	= BALL.X
@VarDataSize	= 27

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 942

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (vservice.pas), line = 943

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (vservice.pas), line = 945

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 946

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 948

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 949

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 954

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0B46

; optimize OK (vservice.pas), line = 956

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 957

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 958

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 959

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B46

; optimize OK (vservice.pas), line = 964

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0B7B

; optimize OK (vservice.pas), line = 966

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 967

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 968

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 969

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B7B

; optimize OK (vservice.pas), line = 974

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0BB0

; optimize OK (vservice.pas), line = 976

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 977

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 978

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 979

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BB0

; optimize OK (vservice.pas), line = 987

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0BFF

; optimize OK (vservice.pas), line = 991

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0C2E
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jcs l_0C2E
@

; optimize OK (vservice.pas), line = 994

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 996

	lda VAUS.LETTER
	cmp #$06
	jne l_0C52
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0C52

; optimize OK (vservice.pas), line = 998

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (vservice.pas), line = 999

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1000

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sub VAUS.X
	ldy #BALL.ONVAUS-DATAORIGIN
	sta (:bp2),y
l_0C52

; optimize OK (vservice.pas), line = 1003

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (vservice.pas), line = 1007

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0C82

; optimize OK (vservice.pas), line = 1010

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1014

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (vservice.pas), line = 1022

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 1027

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0C82

; optimize OK (vservice.pas), line = 1033

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0CC3
	jeq l_0CC3

; optimize OK (vservice.pas), line = 1035

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1036

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (vservice.pas), line = 1037

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 1038

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0CC3
l_0C2E
l_0BFF

; optimize OK (vservice.pas), line = 1050

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0D12

; optimize OK (vservice.pas), line = 1052

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1054

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0D12

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0F8F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0F93
Y	= DATAORIGIN+$0F95
ANGLE	= DATAORIGIN+$0F97

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 1061

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (vservice.pas), line = 1062

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (vservice.pas), line = 1063

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 1068

	lda #$5F
	sta VAUS.X

; optimize OK (vservice.pas), line = 1069

	lda #$B8
	sta VAUS.Y

; optimize OK (vservice.pas), line = 1071

	lda #$FF
	sta VAUS.OLDX
	sta VAUS.OLDX+1

; optimize OK (vservice.pas), line = 1072

	sta VAUS.OLDY
	sta VAUS.OLDY+1

; optimize OK (vservice.pas), line = 1073

	lda #$00
	sta VAUS.IFLASH

; optimize OK (vservice.pas), line = 1077

	sta VAUS.FLASH

; optimize OK (vservice.pas), line = 1081

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (vservice.pas), line = 1082

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (vservice.pas), line = 1083

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (vservice.pas), line = 1084

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 1091

	lda #$D8
	sub VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda #$14
	sta MOUSE_X_LIMIT.MN
	lda #$00
	sta MOUSE_X_LIMIT.MN+1
	lda :STACKORIGIN+9
	sta MOUSE_X_LIMIT.MX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MOUSE_X_LIMIT.MX+1
	jsr MOUSE_X_LIMIT

; optimize OK (vservice.pas), line = 1092

	lda #$BE
	sta MOUSEMOVE.X
	lda #$00
	sta MOUSEMOVE.X+1
	lda #$B8
	sta MOUSEMOVE.Y
	lda #$00
	sta MOUSEMOVE.Y+1
	jsr MOUSEMOVE

; optimize OK (vservice.pas), line = 1093

	lda #$5F
	sta VAUS.X

; optimize OK (vservice.pas), line = 1094

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 1108

	lda VAUS.OLDY
	sta Y
	add VAUS.HEIGHT
	sta @FORTMP_0D92_0

l_0D95
; --- ForToDoCondition
	lda @FORTMP_0D92_0::#$00
	cmp Y
	jcc l_0DA3

; optimize OK (vservice.pas), line = 1111

	lda VAUS.OLDX
	sta :STACKORIGIN+10
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda VAUS.OLDX
	sta :STACKORIGIN+12
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda PLAYSCREEN.OFS
	add :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda VAUS.OLDLEN
	sta BLITROW.SIZE
	lda VAUS.OLDLEN+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_0D95
l_0DA3

; optimize OK (vservice.pas), line = 1113

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; ------------------------------------------------------------

Y	= DATAORIGIN+$0F99

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, vservice.pas), line = 1123

	inc VAUS.IFLASH

; optimize OK (vservice.pas), line = 1125

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0DE7

; optimize FAIL (0, vservice.pas), line = 1127

	inc VAUS.FLASH

; optimize OK (vservice.pas), line = 1128

	lda #$00
	sta VAUS.IFLASH
l_0DE7

; optimize OK (vservice.pas), line = 1131

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0E04
	lda #$00
	sta VAUS.FLASH
l_0E04

; optimize OK (vservice.pas), line = 1141

	lda #$00
	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_0E17_0

l_0E1A
; --- ForToDoCondition
	lda @FORTMP_0E17_0::#$00
	cmp Y
	jcc l_0E28

; optimize OK (vservice.pas), line = 1145

	lda VAUS.WIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CNT+1
	lda :eax
	sta CNT

; optimize OK (vservice.pas), line = 1147

	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda VAUS.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	add CNT
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	adc CNT+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; optimize OK (vservice.pas), line = 1149

	lda Y
	cmp #$02
	jcc l_0E77
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_0E77

; optimize OK (vservice.pas), line = 1152

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda VAUS.X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1155

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_0E77

; --- ForToDoEpilog
	inc Y
	jne l_0E1A
l_0E28

; ------------------------------------------------------------

Y	= DATAORIGIN+$0F9B
CNT	= DATAORIGIN+$0F9C

@VarData	= Y
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 1166

	ldy #1
	lda VAUS.OLDX+1
	cmp #$FF
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0EF0

; optimize FAIL ('REMOVE_VAUS', vservice.pas), line = 1167

	jsr REMOVE_VAUS
l_0EF0

; optimize OK (vservice.pas), line = 1169

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (vservice.pas), line = 1170

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (vservice.pas), line = 1177

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (vservice.pas), line = 1178

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', vservice.pas), line = 1180

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0F9F
Y	= DATAORIGIN+$0FA1

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 1194

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (vservice.pas), line = 1195

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (vservice.pas), line = 1197

	lda #$00
	sta Y

l_0F48
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_0F56

; optimize OK (vservice.pas), line = 1199

	lda YS
	adc Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (vservice.pas), line = 1207

	lda #$00
	sta X

l_0F72
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_0F80

; optimize OK (vservice.pas), line = 1208

	adc XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0F97

; optimize OK (vservice.pas), line = 1214

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add XS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	sta :STACKORIGIN+10
	lda #$00
	adc YS+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (vservice.pas), line = 1218

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda MODX
	add :STACKORIGIN+10
	tay
	lda MODX+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda PATTERN.OFS
	add (:bp),y
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YH
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YH+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex

; optimize OK (vservice.pas), line = 1222

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	sta :STACKORIGIN+11
	lda #$00
	adc YS+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1227

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add XS
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	sta :STACKORIGIN+11
	lda #$00
	adc YS+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_0F97

; --- ForToDoEpilog
	inc X
	jne l_0F72
l_0F80

; --- ForToDoEpilog
	inc Y
	jne l_0F48
l_0F56

; optimize OK (vservice.pas), line = 1237

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1031_0

l_1034
; --- ForToDoCondition
	lda @FORTMP_1031_0::#$00
	cmp Y
	jcc l_1042

; optimize OK (vservice.pas), line = 1238

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1052_0

l_1055
; --- ForToDoCondition
	lda @FORTMP_1052_0::#$00
	cmp X
	jcc l_1063

; optimize OK (vservice.pas), line = 1254

	lda X
	cmp #$D8
	jcs l_1075

; optimize OK (vservice.pas), line = 1258

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	ora #$80
	sta CL

; optimize OK (vservice.pas), line = 1262

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1267

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1075

; --- ForToDoEpilog
	inc X
	jne l_1055
l_1063

; --- ForToDoEpilog
	inc Y
	jne l_1034
l_1042

; ------------------------------------------------------------

XA	= DATAORIGIN+$0FA3
YA	= DATAORIGIN+$0FA4
X	= DATAORIGIN+$0FA5
Y	= DATAORIGIN+$0FA6
XS	= DATAORIGIN+$0FA7
YS	= DATAORIGIN+$0FA9
YH	= DATAORIGIN+$0FAB
CL	= DATAORIGIN+$0FAD
SHADOW	= DATAORIGIN+$0FAE

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 1282

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (vservice.pas), line = 1283

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (vservice.pas), line = 1285

	lda #$00
	sta Y

l_10E8
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_10F6

; optimize OK (vservice.pas), line = 1286

	lda #$00
	sta X

l_10FF
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_110D

; optimize OK (vservice.pas), line = 1291

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS
	add Y
	sta :STACKORIGIN+10
	lda YS+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (vservice.pas), line = 1293

	lda Y
	cmp #$07
	jcs l_114C
	lda X
	cmp #$0F
	jcs l_114C

; optimize OK (vservice.pas), line = 1298

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (vservice.pas), line = 1301

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1304

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	jmp l_11AB
l_114C

; optimize OK (vservice.pas), line = 1312

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1315

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
l_11AB
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_10FF
l_110D

; --- ForToDoEpilog
	inc Y
	jne l_10E8
l_10F6

; optimize OK (vservice.pas), line = 1320

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_11FF_0

l_1202
; --- ForToDoCondition
	lda @FORTMP_11FF_0::#$00
	cmp Y
	jcc l_1210

; optimize OK (vservice.pas), line = 1321

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1220_0

l_1223
; --- ForToDoCondition
	lda @FORTMP_1220_0::#$00
	cmp X
	jcc l_1231

; optimize OK (vservice.pas), line = 1322

	lda X
	cmp #$D8
	jcs l_1243

; optimize OK (vservice.pas), line = 1329

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$7F
	sta CL

; optimize OK (vservice.pas), line = 1333

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1337

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1243

; --- ForToDoEpilog
	inc X
	jne l_1223
l_1231

; --- ForToDoEpilog
	inc Y
	jne l_1202
l_1210

; optimize OK (vservice.pas), line = 1340

	lda BLOCK
	cmp #$09
	jcc l_129F

; optimize OK (vservice.pas), line = 1342

	lda #$00
	sta CL2

; optimize OK (vservice.pas), line = 1343

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_12BA

; optimize OK (vservice.pas), line = 1345

	lda #$CA
	sta CL2

; optimize OK (vservice.pas), line = 1346

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_12D9
l_12BA

; optimize OK (vservice.pas), line = 1352

	lda BLOCK
	cmp #$0A
	jne l_12EB
	lda #$C9
	sta CL2
l_12D9
l_12EB

; optimize OK (vservice.pas), line = 1356

	lda #$00
	sta Y

l_12FB
; --- ForToDoCondition
	lda Y
	cmp #$07
	jcs l_1309

; optimize OK (vservice.pas), line = 1362

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	sta :STACKORIGIN+10
	lda #$00
	adc YS+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (vservice.pas), line = 1364

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (vservice.pas), line = 1368

	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XS
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda XS+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1372

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_12FB
l_1309

; optimize OK (vservice.pas), line = 1376

	lda #$00
	sta X

l_1370
; --- ForToDoCondition
	lda X
	cmp #$0F
	jcs l_137E

; optimize OK (vservice.pas), line = 1380

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (vservice.pas), line = 1382

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (vservice.pas), line = 1385

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 1388

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_1370
l_137E
l_129F

; ------------------------------------------------------------

XA	= DATAORIGIN+$0FB1
YA	= DATAORIGIN+$0FB2
BLOCK	= DATAORIGIN+$0FB3
X	= DATAORIGIN+$0FB4
Y	= DATAORIGIN+$0FB5
XS	= DATAORIGIN+$0FB6
YS	= DATAORIGIN+$0FB8
CL	= DATAORIGIN+$0FBA
CL2	= DATAORIGIN+$0FBB
SHADOW	= DATAORIGIN+$0FBC

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (vservice.pas), line = 1398

	lda #$00
	sta Y

l_13EB
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13F9

; optimize OK (vservice.pas), line = 1399

	lda #$00
	sta X

l_1402
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1410

; optimize OK (vservice.pas), line = 1400

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_142F
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_142F

; --- ForToDoEpilog
	inc X
	jne l_1402
l_1410

; --- ForToDoEpilog
	inc Y
	jne l_13EB
l_13F9

; ------------------------------------------------------------

X	= DATAORIGIN+$0FBF
Y	= DATAORIGIN+$0FC0

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (vservice.pas), line = 1409

	lda #$00
	sta REMAIN_BLK

; optimize OK (vservice.pas), line = 1410

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (vservice.pas), line = 1413

	lda #$00
	sta Y

l_146D
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_147B

; optimize OK (vservice.pas), line = 1414

	lda #$00
	sta X

l_1484
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1492

; optimize OK (vservice.pas), line = 1417

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_14CA
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_14CA
	inc REMAIN_BLK
l_14CA

; --- ForToDoEpilog
	inc X
	jne l_1484
l_1492

; --- ForToDoEpilog
	inc Y
	jne l_146D
l_147B

; optimize OK (vservice.pas), line = 1419

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (vservice.pas), line = 1421

	sta @CASETMP_0007
	cmp #$00
	jne l_14F4
@

; optimize OK (vservice.pas), line = 1422

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0007
l_14F4
	cmp #$01
	jne l_14FD

; optimize OK (vservice.pas), line = 1423

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0007
l_14FD
	cmp #$02
	jne l_1506

; optimize OK (vservice.pas), line = 1424

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0007
l_1506
	cmp #$03
	jne l_150F

; optimize OK (vservice.pas), line = 1425

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0007
l_150F
	cmp #$04
	jne l_1518

; optimize OK (vservice.pas), line = 1426

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_1518
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0FC1
Y	= DATAORIGIN+$0FC2
WL	= DATAORIGIN+$0FC3
@CASETMP_0007	= DATAORIGIN+$0FC4

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (vservice.pas), line = 1465

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1466

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1467

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1468

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1470

	lda #$00
	sta COLLISION

; optimize OK (vservice.pas), line = 1472

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (vservice.pas), line = 1473

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (vservice.pas), line = 1474

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (vservice.pas), line = 1475

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (vservice.pas), line = 1477

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (vservice.pas), line = 1478

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (vservice.pas), line = 1479

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (vservice.pas), line = 1480

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (vservice.pas), line = 1482

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (vservice.pas), line = 1483

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (vservice.pas), line = 1484

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (vservice.pas), line = 1485

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (vservice.pas), line = 1492

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_15A1

; optimize OK (vservice.pas), line = 1493

	lda #$01
	jsr FATAL_ERROR
l_15A1

; optimize OK (vservice.pas), line = 1496

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_15C4x
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15C4
l_15C4x

; optimize OK (vservice.pas), line = 1498

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15D7

; optimize OK (vservice.pas), line = 1500

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_15E4
l_15E5

; optimize OK (vservice.pas), line = 1504

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (vservice.pas), line = 1505

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (vservice.pas), line = 1507

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (vservice.pas), line = 1509

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_161C

; optimize OK (vservice.pas), line = 1511

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (vservice.pas), line = 1512

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_161C

; optimize OK (vservice.pas), line = 1515

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_163B

; optimize OK (vservice.pas), line = 1517

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (vservice.pas), line = 1518

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_163B
l_15E4

; optimize OK (vservice.pas), line = 1502

	lda YN
	and #$07
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	ora :STACKORIGIN+9
	bne @+
	dey
@
	sty :STACKORIGIN+9
	lda YN
	ldy #1
	and #$07
	cmp #$07
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	jne l_15E5
l_15D7

; optimize OK (vservice.pas), line = 1524

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_167A

; optimize OK (vservice.pas), line = 1526

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1687
l_1688

; optimize OK (vservice.pas), line = 1530

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (vservice.pas), line = 1531

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (vservice.pas), line = 1533

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (vservice.pas), line = 1535

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_16BF

; optimize OK (vservice.pas), line = 1537

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (vservice.pas), line = 1538

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_16BF

; optimize OK (vservice.pas), line = 1541

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_16DE

; optimize OK (vservice.pas), line = 1543

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (vservice.pas), line = 1544

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_16DE
l_1687

; optimize OK (vservice.pas), line = 1528

	lda XJ
	and #$0F
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	ora :STACKORIGIN+9
	bne @+
	dey
@
	sty :STACKORIGIN+9
	lda XJ
	ldy #1
	and #$0F
	cmp #$0F
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	jne l_1688
l_167A

; optimize OK (vservice.pas), line = 1555

	lda COLLISION
	cmp #$01
	jne l_171D
; optimize OK (vservice.pas), line = 1557
; optimize OK (vservice.pas), line = 1558
	jmp l_1731
l_171D

; optimize OK (vservice.pas), line = 1560

	lda COLLISION
	cmp #$02
	jne l_1743

; optimize OK (vservice.pas), line = 1562

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1563

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_1757
l_1743

; optimize OK (vservice.pas), line = 1565

	lda COLLISION
	cmp #$03
	jne l_1769

; optimize OK (vservice.pas), line = 1567

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1568

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1731

; optimize OK (vservice.pas), line = 1569

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1570

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_1757
	sta (:bp2),y
l_1769
	jmp l_1789
l_15C4

; optimize OK (vservice.pas), line = 1575

	lda #$02
	jsr FATAL_ERROR
l_1789

; optimize OK (vservice.pas), line = 1578

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1579

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1580

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1581

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1584

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1585

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1592

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0FC5
Y1	= DATAORIGIN+$0FC7
X2	= DATAORIGIN+$0FC9
Y2	= DATAORIGIN+$0FCB
RESULT	= DATAORIGIN+$0FCD
X	= DATAORIGIN+$0FCE
Y	= DATAORIGIN+$0FD0
XK	= DATAORIGIN+$0FD2
YK	= DATAORIGIN+$0FD4
XJ	= DATAORIGIN+$0FD6
YJ	= DATAORIGIN+$0FD8
XH	= DATAORIGIN+$0FDA
YH	= DATAORIGIN+$0FDC
XN	= DATAORIGIN+$0FDE
YN	= DATAORIGIN+$0FE0
XP1	= DATAORIGIN+$0FE2
YP1	= DATAORIGIN+$0FE4
XP2	= DATAORIGIN+$0FE6
YP2	= DATAORIGIN+$0FE8
XP	= DATAORIGIN+$0FEA
YP	= DATAORIGIN+$0FEC
COLLISION	= DATAORIGIN+$0FEE

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 1603

	lda XB+1
	jmi l_17DD
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_17DD
	lda YB+1
	jmi l_17DD
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_17DD

; optimize OK (vservice.pas), line = 1605

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	jeq l_17FB

; optimize OK (vservice.pas), line = 1607

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	cmp #$0A
	jcs l_1819

; optimize OK (vservice.pas), line = 1609

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, vservice.pas), line = 1610

	dec REMAIN_BLK

; optimize OK (vservice.pas), line = 1614

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (vservice.pas), line = 1616

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (vservice.pas), line = 1618

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (vservice.pas), line = 1619

	lda YB
	sta :STACKORIGIN+9
	ldy #$00
	lda YB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', vservice.pas), line = 1620

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (vservice.pas), line = 1622

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda #$00
	sta adr.WALL,y

; optimize OK (vservice.pas), line = 1623

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (vservice.pas), line = 1624

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1625

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_187D
l_1819

; optimize OK (vservice.pas), line = 1630

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_189E

; optimize OK (vservice.pas), line = 1632

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1633

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (vservice.pas), line = 1635

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (vservice.pas), line = 1636

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18C0
l_189E

; optimize OK (vservice.pas), line = 1640

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1641

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (vservice.pas), line = 1643

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_18C0
l_187D
l_17FB
l_17DD

; ------------------------------------------------------------

XB	= DATAORIGIN+$0FEF
YB	= DATAORIGIN+$0FF1
BALL	= DATAORIGIN+$0FF3
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= XB
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (vservice.pas), line = 1654

	lda XB+1
	jmi l_1903
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1903
	lda YB+1
	jmi l_1903
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1903

; optimize OK (vservice.pas), line = 1656

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	jeq l_1921

; optimize OK (vservice.pas), line = 1658

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	cmp #$0A
	jcs l_193F

; optimize OK (vservice.pas), line = 1660

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, vservice.pas), line = 1661

	dec REMAIN_BLK

; optimize OK (vservice.pas), line = 1662

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (vservice.pas), line = 1663

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda #$00
	sta adr.WALL,y

; optimize OK (vservice.pas), line = 1664

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1977
l_193F

; optimize OK (vservice.pas), line = 1669

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1998

; optimize OK (vservice.pas), line = 1671

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (vservice.pas), line = 1672

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (vservice.pas), line = 1673

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_19B6
l_1998

; optimize OK (vservice.pas), line = 1677

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (vservice.pas), line = 1678

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1977
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_19B6
l_1921
l_1903

; ------------------------------------------------------------

XB	= DATAORIGIN+$0FF7
YB	= DATAORIGIN+$0FF9

@VarData	= XB
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (vservice.pas), line = 1710

	lda #$FF
	sta EMERGENCY

; optimize OK (vservice.pas), line = 1712

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (vservice.pas), line = 1713

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (vservice.pas), line = 1716

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (vservice.pas), line = 1717

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (vservice.pas), line = 1719

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XB
	lda :STACKORIGIN+STACKWIDTH+9
	sta XB+1

; optimize OK (vservice.pas), line = 1720

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sta YB+1

; optimize OK (vservice.pas), line = 1724

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	jeq l_1A1D

; optimize OK (vservice.pas), line = 1726

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (vservice.pas), line = 1732

	cmp #$03
	jne l_1A38

; optimize OK (vservice.pas), line = 1734

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (vservice.pas), line = 1735

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (vservice.pas), line = 1737

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (vservice.pas), line = 1738

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (vservice.pas), line = 1740

	lda LX
	sta :ecx
	sta :eax
	lda LX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LY
	sta :ecx
	sta :eax
	lda LY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F1
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F1+1

; optimize OK (vservice.pas), line = 1741

	lda MX
	sta :ecx
	sta :eax
	lda MX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MY
	sta :ecx
	sta :eax
	lda MY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (vservice.pas), line = 1743

	lda F1
	cmp F2
	lda F1+1
	sbc F2+1
	svc
	eor #$80
	jpl l_1AAB

; optimize OK (vservice.pas), line = 1749

	lda OX
	sta :STACKORIGIN+10
	ldy #$00
	lda OX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda :STACKORIGIN+10
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (vservice.pas), line = 1750

	lda OY
	sta :STACKORIGIN+9
	ldy #$00
	lda OY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (vservice.pas), line = 1753

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	jne l_1AE7

; optimize OK (vservice.pas), line = 1755

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (vservice.pas), line = 1756

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
	jmp l_1B0F
l_1AE7

; optimize OK (vservice.pas), line = 1760

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (vservice.pas), line = 1761

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1B0F
	jmp l_1B22
l_1AAB

; optimize OK (vservice.pas), line = 1771

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (vservice.pas), line = 1772

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (vservice.pas), line = 1774

	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda YB
	sta :eax
	sta :ztmp10
	lda YB+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda XB
	add :eax
	tay
	lda adr.WALL,y
	jne l_1B5D

; optimize OK (vservice.pas), line = 1776

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (vservice.pas), line = 1777

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (vservice.pas), line = 1779

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (vservice.pas), line = 1780

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
l_1B5D
l_1B22
l_1A38

; optimize OK (vservice.pas), line = 1786

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1787

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1791

	lda XB
	sta SHOOT_BLOCK.XB
	lda XB+1
	sta SHOOT_BLOCK.XB+1
	lda YB
	sta SHOOT_BLOCK.YB
	lda YB+1
	sta SHOOT_BLOCK.YB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (vservice.pas), line = 1793

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (vservice.pas), line = 1794

	lda NY
	and #$07
	sta Y
	lda #$00
	sta Y+1

; optimize OK (vservice.pas), line = 1806

	lda X+1
	ora X
	jeq l_1BEB
	lda X+1
	bne @+
	lda X
	cmp #$07
@
	jeq l_1BEB
	lda Y+1
	ora Y
	jeq l_1BEB
@
	lda Y+1
	bne @+
	lda Y
	cmp #$07
@
	jeq l_1BEB

; optimize OK (vservice.pas), line = 1807

	lda #$03
	jsr FATAL_ERROR
l_1BEB

; optimize OK (vservice.pas), line = 1822

	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1C12
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1C12

; optimize OK (vservice.pas), line = 1824

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1825

	lda #$01
	sta EMERGENCY
l_1C12

; optimize OK (vservice.pas), line = 1829

	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1C43
	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1C43

; optimize OK (vservice.pas), line = 1831

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1832

	lda #$03
	sta EMERGENCY
l_1C43

; optimize OK (vservice.pas), line = 1836

	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1C74
	lda X
	sta :STACKORIGIN+12
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1C74

; optimize OK (vservice.pas), line = 1838

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1839

	lda #$02
	sta EMERGENCY
l_1C74

; optimize OK (vservice.pas), line = 1843

	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1CA5
	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1CA5

; optimize OK (vservice.pas), line = 1845

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (vservice.pas), line = 1846

	lda #$04
	sta EMERGENCY
l_1CA5

; optimize OK (vservice.pas), line = 1850

	lda X+1
	cmp Y+1
	bne @+
	lda X
	cmp Y
@
	jeq l_1CD6x
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jne l_1CD6
l_1CD6x

; optimize OK (vservice.pas), line = 1852

	lda #$00
	sta DEFLECT
	sta DEFLECT+1

; optimize OK (vservice.pas), line = 1853

	sta TOUCH

; optimize OK (vservice.pas), line = 1861

	lda X
	cmp #$05
	lda X+1
	sbc #$00
	svc
	eor #$80
	jmi l_1CF0
	lda TOUCH
	ora #$01
	sta TOUCH
l_1CF0

; optimize OK (vservice.pas), line = 1862

	lda Y
	cmp #$05
	lda Y+1
	sbc #$00
	svc
	eor #$80
	jmi l_1D0E
	lda TOUCH
	ora #$02
	sta TOUCH
l_1D0E

; optimize OK (vservice.pas), line = 1872

	lda #$FF
	sta LX
	sta LX+1

l_1D24
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D30

; optimize OK (vservice.pas), line = 1873

	lda #$FF
	sta LY
	sta LY+1

l_1D39
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D45

; optimize FAIL (1, vservice.pas), line = 1875

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda XB+1
	adc LX+1
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (vservice.pas), line = 1876

	lda YB
	add LY
	sta MY
	lda YB+1
	adc LY+1
	sta MY+1

; optimize OK (vservice.pas), line = 1880

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda LX
	sta :STACKORIGIN+10
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	jne l_1D9Ax
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	jmi l_1D9Ax
	lda XB
	sta :STACKORIGIN+10
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda LX
	sta :STACKORIGIN+11
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+11
	sty :STACKORIGIN+STACKWIDTH*2+11
	sty :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+10
	cmp #$0C
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	jmp *+6
@	jmp l_1D9Ax
	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda MY
	sta :eax
	sta :ztmp10
	lda MY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+11
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda MX
	sta :STACKORIGIN+10
	ldy #$00
	lda MX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.WALL,y
	jeq l_1D9A
@
l_1D9Ax

; optimize OK (vservice.pas), line = 1883

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$01
	sta adr.ADJW,y
	lda #$00
	jmp l_1DBB
l_1D9A

; optimize OK (vservice.pas), line = 1885

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
	sta adr.ADJW,y
l_1DBB
	sta adr.ADJW+1,y

; --- ForToDoEpilog
	inc LY
	jne l_1D39
	inc LY+1
	jmp l_1D39
l_1D45

; --- ForToDoEpilog
	inc LX
	jne l_1D24
	inc LX+1
	jmp l_1D24
l_1D30

; optimize OK (vservice.pas), line = 1904

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$06
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$06
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0C
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0C
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0E
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0E
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$10
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$10
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0A
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0A
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$04
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$04
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$02
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$02
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta AROUND
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta AROUND+1

; optimize OK (vservice.pas), line = 1935

	lda TOUCH
	jne l_1E5A

; optimize OK (vservice.pas), line = 1937

	lda AROUND
	and #$83
	jne l_1E70
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E70

; optimize OK (vservice.pas), line = 1938

	lda AROUND
	and #$83
	cmp #$01
	jne l_1E8C
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E8C

; optimize OK (vservice.pas), line = 1939

	lda AROUND
	and #$83
	cmp #$02
	jne l_1EA8
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1EA8

; optimize OK (vservice.pas), line = 1940

	lda AROUND
	and #$83
	cmp #$03
	jne l_1EC4
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1EC4

; optimize OK (vservice.pas), line = 1941

	lda AROUND
	and #$83
	cmp #$80
	jne l_1EE0
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1EE0

; optimize OK (vservice.pas), line = 1942

	lda AROUND
	and #$83
	cmp #$81
	jne l_1EFC
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1EFC

; optimize OK (vservice.pas), line = 1943

	lda AROUND
	and #$83
	cmp #$82
	jne l_1F18
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F18

; optimize OK (vservice.pas), line = 1945

	lda #$05
	sta EMERGENCY

; optimize OK (vservice.pas), line = 1946

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1E5A

; optimize OK (vservice.pas), line = 1951

	lda TOUCH
	cmp #$01
	jne l_1F46

; optimize OK (vservice.pas), line = 1953

	lda AROUND
	and #$0E
	jne l_1F5C
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F5C

; optimize OK (vservice.pas), line = 1954

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1F78
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F78

; optimize OK (vservice.pas), line = 1955

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1F94
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F94

; optimize OK (vservice.pas), line = 1956

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1FB0
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1FB0

; optimize OK (vservice.pas), line = 1957

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1FCC
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1FCC

; optimize OK (vservice.pas), line = 1958

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1FE8
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1FE8

; optimize OK (vservice.pas), line = 1959

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_2004
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2004

; optimize OK (vservice.pas), line = 1961

	lda #$08
	sta EMERGENCY

; optimize OK (vservice.pas), line = 1962

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1F46

; optimize OK (vservice.pas), line = 1965

	lda TOUCH
	cmp #$02
	jne l_2032

; optimize OK (vservice.pas), line = 1967

	lda AROUND
	and #$E0
	jne l_2048
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2048

; optimize OK (vservice.pas), line = 1968

	lda AROUND
	and #$E0
	cmp #$20
	jne l_2064
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2064

; optimize OK (vservice.pas), line = 1969

	lda AROUND
	and #$E0
	cmp #$40
	jne l_2080
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2080

; optimize OK (vservice.pas), line = 1970

	lda AROUND
	and #$E0
	cmp #$60
	jne l_209C
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_209C

; optimize OK (vservice.pas), line = 1971

	lda AROUND
	and #$E0
	cmp #$80
	jne l_20B8
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20B8

; optimize OK (vservice.pas), line = 1972

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_20D4
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20D4

; optimize OK (vservice.pas), line = 1973

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_20F0
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20F0

; optimize OK (vservice.pas), line = 1975

	lda #$06
	sta EMERGENCY

; optimize OK (vservice.pas), line = 1976

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2032

; optimize OK (vservice.pas), line = 1979

	lda TOUCH
	cmp #$03
	jne l_211E

; optimize OK (vservice.pas), line = 1981

	lda AROUND
	and #$38
	jne l_2134
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2134

; optimize OK (vservice.pas), line = 1982

	lda AROUND
	and #$38
	cmp #$08
	jne l_2150
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2150

; optimize OK (vservice.pas), line = 1983

	lda AROUND
	and #$38
	cmp #$10
	jne l_216C
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_216C

; optimize OK (vservice.pas), line = 1984

	lda AROUND
	and #$38
	cmp #$18
	jne l_2188
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2188

; optimize OK (vservice.pas), line = 1985

	lda AROUND
	and #$38
	cmp #$20
	jne l_21A4
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_21A4

; optimize OK (vservice.pas), line = 1986

	lda AROUND
	and #$38
	cmp #$28
	jne l_21C0
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_21C0

; optimize OK (vservice.pas), line = 1987

	lda AROUND
	and #$38
	cmp #$30
	jne l_21DC
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_21DC

; optimize OK (vservice.pas), line = 1989

	lda #$07
	sta EMERGENCY

; optimize OK (vservice.pas), line = 1990

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_211E

; optimize OK (vservice.pas), line = 1996

	lda DEFLECT
	sta :STACKORIGIN+9
	ldy #$00
	lda DEFLECT+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta MYX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MYX+1

; optimize OK (vservice.pas), line = 1997

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (vservice.pas), line = 1999

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_221B
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_221B

; optimize OK (vservice.pas), line = 2000

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_2238
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2238

; optimize OK (vservice.pas), line = 2001

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_2252
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_2252

; optimize OK (vservice.pas), line = 2003

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_226E
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_226E

; optimize OK (vservice.pas), line = 2004

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_228B
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_228B

; optimize OK (vservice.pas), line = 2005

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_22A5
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_22A5
l_1CD6
l_1A1D

; optimize OK (vservice.pas), line = 2015

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_22C6

; optimize OK (vservice.pas), line = 2018

	lda EMERGENCY
	cmp #$FF
	jne l_22D9
	lda #$04
	jsr FATAL_ERROR
l_22D9

; optimize OK (vservice.pas), line = 2020

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX
	lda #$00
	sta MIMAX+1

; optimize OK (vservice.pas), line = 2046

	lda EMERGENCY
	sta @CASETMP_0008
	cmp #$05
	jne l_22F2
@

; optimize OK (vservice.pas), line = 2049

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_2308
	lda MIMAX
	and #$0F
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2308

; optimize OK (vservice.pas), line = 2050

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_232E
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_232E
	jmp a_0008
l_22F2
	cmp #$06
	jne l_2345

; optimize OK (vservice.pas), line = 2054

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_235B
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_235B

; optimize OK (vservice.pas), line = 2055

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_2381
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2381
	jmp a_0008
l_2345
	cmp #$07
	jne l_2398

; optimize OK (vservice.pas), line = 2059

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_23AE
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_23AE

; optimize OK (vservice.pas), line = 2060

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_23D4
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_23D4
	jmp a_0008
l_2398
	cmp #$08
	jne l_23EB

; optimize OK (vservice.pas), line = 2064

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_2401
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2401

; optimize OK (vservice.pas), line = 2065

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_2427
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2427
l_23EB
a_0008

; --- RepeatUntilProlog
l_243E

; optimize OK (vservice.pas), line = 2072

	lda MIMAX
	sta :STACKORIGIN+10
	lda MIMAX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda :STACKORIGIN+10
	sta :eax
	lda :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta LX
	lda :eax+1
	sta LX+1

; optimize OK (vservice.pas), line = 2073

	lda MIMAX
	and #$0F
	sta :eax
	lda #$00
	sta :eax+1
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta MX
	lda :eax+1
	sta MX+1

; optimize OK (vservice.pas), line = 2074

	lda MX
	sub LX
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc LX+1
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	add LX
	sta ANGLE
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (vservice.pas), line = 2077

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_243E
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_243E

; optimize OK (vservice.pas), line = 2081

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda @SMALLINT.MOD.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 2082

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 2084

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_22C6

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0FFB
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0FFF
Y	= DATAORIGIN+$1001
XB	= DATAORIGIN+$1003
YB	= DATAORIGIN+$1005
OX	= DATAORIGIN+$1007
OY	= DATAORIGIN+$1009
LX	= DATAORIGIN+$100B
LY	= DATAORIGIN+$100D
MX	= DATAORIGIN+$100F
MY	= DATAORIGIN+$1011
NX	= DATAORIGIN+$1013
NY	= DATAORIGIN+$1015
F1	= DATAORIGIN+$1017
F2	= DATAORIGIN+$1019
DEFLECT	= DATAORIGIN+$101B
AROUND	= DATAORIGIN+$101D
MIMAX	= DATAORIGIN+$101F
ANGLE	= DATAORIGIN+$1021
MYX	= DATAORIGIN+$1023
MYY	= DATAORIGIN+$1025
EMERGENCY	= DATAORIGIN+$1027
COLLISION	= DATAORIGIN+$1028
TOUCH	= DATAORIGIN+$1029
adr.ADJW	= [DATAORIGIN+$102A] .array [3] [3] .word
.var ADJW	= adr.ADJW .word
@CASETMP_0008	= DATAORIGIN+$103C

@VarData	= BALL
@VarDataSize	= 52

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (vservice.pas), line = 2099

	lda #$00
	sta K
	sta K+1

l_24A8
; --- ForToDoCondition
	lda K+1
	cmp #$01
	bcc @+
	jne l_24B4
	lda K
	cmp #$3F
	bcc @+
	jne l_24B4
@

; optimize OK (vservice.pas), line = 2100

	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda K
	sta @WORD.MOD.A
	lda K+1
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda MODX
	add K
	tay
	lda MODX+1
	adc K+1
	sta :bp+1
	lda @WORD.MOD.RESULT
	sta (:bp),y

; --- ForToDoEpilog
	inc K
	jne l_24A8
	inc K+1
	jne l_24A8
l_24B4

; optimize OK (vservice.pas), line = 2104

	lda #$00
	sta Y

l_24CE
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_24DC

; optimize OK (vservice.pas), line = 2105

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_24CE
l_24DC

; optimize OK (vservice.pas), line = 2110

	lda #$0A
	sta Y

l_24F8
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_2506

; optimize OK (vservice.pas), line = 2112

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (vservice.pas), line = 2113

	lda #$00
	sta K
	sta K+1

; optimize OK (vservice.pas), line = 2114

	lda #$09
	sta X

l_2521
; --- ForToDoCondition
	lda X
	cmp #$D8
	jcs l_252F

; optimize OK (vservice.pas), line = 2117

	mwy PATT :bp2
	ldy #PATT.OFS-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	mwy MODX :bp2
	ldy X
	lda :STACKORIGIN+9
	add (:bp2),y
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YB
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YB+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL

; optimize OK (vservice.pas), line = 2119

	lda #$80
	sta SHADOW

; optimize OK (vservice.pas), line = 2124

	lda Y
	cmp #$10
	jcc l_2564x
	lda X
	cmp #$12
	jcs l_2564
l_2564x
	lda #$00
	sta SHADOW
l_2564

; optimize OK (vservice.pas), line = 2129

	lda CL
	and #$7F
	ora SHADOW
	ldy K
	sta adr.TMP,y

; optimize FAIL (0, vservice.pas), line = 2130

	inc K
	sne
	inc K+1

; --- ForToDoEpilog
	inc X
	jne l_2521
l_252F

; optimize OK (vservice.pas), line = 2133

	lda PLAYSCREEN.OFS
	add #$09
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	lda :STACKORIGIN+10
	add :eax
	sta BLITTMP.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta BLITTMP.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :eax+2
	sta BLITTMP.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :eax+3
	sta BLITTMP.DST+3
	lda K
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_24F8
l_2506

; ------------------------------------------------------------

PATT	= DATAORIGIN+$103D
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$1041
K	= DATAORIGIN+$1043
X	= DATAORIGIN+$1045
Y	= DATAORIGIN+$1046
CL	= DATAORIGIN+$1047
SHADOW	= DATAORIGIN+$1048

@VarData	= PATT
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$1049
Y	= DATAORIGIN+$104B

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (vservice.pas), line = 2248

	lda #$81
	sta Y

l_25B2
; --- ForToDoCondition
	lda Y
	cmp #$A1
	jcs l_25C0

; optimize OK (vservice.pas), line = 2251

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$48
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$48
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$58
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_25B2
l_25C0

; ------------------------------------------------------------

Y	= DATAORIGIN+$104D

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$104E
Y	= DATAORIGIN+$1050
adr.SC	= [DATAORIGIN+$1052] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (vservice.pas), line = 2295

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2296

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2298

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (vservice.pas), line = 2300

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (vservice.pas), line = 2301

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; optimize OK (vservice.pas), line = 2304

	lda #$00
	sta W

l_2610
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_261E

; optimize OK (vservice.pas), line = 2306

	lda #$00
	sta Y

l_2627
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2635

; optimize OK (vservice.pas), line = 2308

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (vservice.pas), line = 2309

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_265A_0

l_265D
; --- ForToDoCondition
	lda @FORTMP_265A_0::#$00
	cmp X
	jcc l_266B

; optimize FAIL (1, vservice.pas), line = 2313

	inx
	ldy #1
	lda W
	cmp #$06
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+9
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_2693

; optimize OK (vservice.pas), line = 2315

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add B
	sta :STACKORIGIN+11
	lda #$00
	adc B+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	dey
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	jmp l_26D0
l_2693

; optimize OK (vservice.pas), line = 2318

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+10
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_26D0
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_265D
l_266B

; --- ForToDoEpilog
	inc Y
	jne l_2627
l_2635

; optimize OK (vservice.pas), line = 2322

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_2610
l_261E

; optimize OK (vservice.pas), line = 2326

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (vservice.pas), line = 2327

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', vservice.pas), line = 2328

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$1067
A	= DATAORIGIN+$1069
B	= DATAORIGIN+$106B
W	= DATAORIGIN+$106D
X	= DATAORIGIN+$106E
Y	= DATAORIGIN+$106F

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', vservice.pas), line = 2339

	jsr NOSOUND

; optimize OK (vservice.pas), line = 2340

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (vservice.pas), line = 2341

	lda #$B3
	sta B
	lda #$00
	sta B+1

; optimize OK (vservice.pas), line = 2343

	lda #$0B
	sta W

l_2724
; --- ForToDoCondition
	lda #$00
	sta Y

l_273B
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2749

; optimize OK (vservice.pas), line = 2347

	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (vservice.pas), line = 2348

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_276E_0

l_2771
; --- ForToDoCondition
	lda @FORTMP_276E_0::#$00
	cmp X
	jcc l_277F

; optimize OK (vservice.pas), line = 2350

	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	jne l_279B

; optimize OK (vservice.pas), line = 2352

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add B
	sta :STACKORIGIN+11
	lda #$00
	adc B+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	dey
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	jmp l_27D8
l_279B

; optimize OK (vservice.pas), line = 2355

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+10
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_27D8
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_2771
l_277F

; --- ForToDoEpilog
	inc Y
	jne l_273B
l_2749

; optimize OK (vservice.pas), line = 2359

	lda #$01
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; --- ForToDoEpilog
	dec W
	jpl l_2724
l_2732

; ------------------------------------------------------------

X	= DATAORIGIN+$1071
Y	= DATAORIGIN+$1072
W	= DATAORIGIN+$1073
Z	= DATAORIGIN+$1074
A	= DATAORIGIN+$1076
B	= DATAORIGIN+$1078

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (vservice.pas), line = 2369

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2393

	ldy NUM
	lda adr.DIGITS,y
	and #$01
	cmp #$01
	jne l_282F
	lda #$DF
	sta A
l_282F

; optimize OK (vservice.pas), line = 2394

	lda #$01
	sta X

l_283F
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_284D

; optimize OK (vservice.pas), line = 2395

	lda PX
	adc X
	sta :STACKORIGIN+9
	lda PX+1
	adc #$00
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc X
	jne l_283F
l_284D

; optimize OK (vservice.pas), line = 2399

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2400

	ldy NUM
	lda adr.DIGITS,y
	and #$02
	cmp #$02
	jne l_2883
	lda #$DF
	sta A
l_2883

; optimize OK (vservice.pas), line = 2401

	lda #$01
	sta X

l_2893
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_28A1

; optimize OK (vservice.pas), line = 2402

	lda PX
	adc X
	sta :STACKORIGIN+9
	lda PX+1
	adc #$00
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$0A
	lda :STACKORIGIN+9
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc X
	jne l_2893
l_28A1

; optimize OK (vservice.pas), line = 2406

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2407

	ldy NUM
	lda adr.DIGITS,y
	and #$04
	cmp #$04
	jne l_28DB
	lda #$DF
	sta A
l_28DB

; optimize OK (vservice.pas), line = 2408

	lda #$01
	sta X

l_28EB
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_28F9

; optimize OK (vservice.pas), line = 2409

	lda PX
	adc X
	sta :STACKORIGIN+9
	lda PX+1
	adc #$00
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$14
	lda :STACKORIGIN+9
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc X
	jne l_28EB
l_28F9

; optimize OK (vservice.pas), line = 2412

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2413

	ldy NUM
	lda adr.DIGITS,y
	and #$08
	cmp #$08
	jne l_2933
	lda #$DF
	sta A
l_2933

; optimize OK (vservice.pas), line = 2414

	lda #$01
	sta Y

l_2943
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2951

; optimize OK (vservice.pas), line = 2415

	lda PY
	adc Y
	sta :STACKORIGIN+10
	lda PY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda PX
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc Y
	jne l_2943
l_2951

; optimize OK (vservice.pas), line = 2418

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2419

	ldy NUM
	lda adr.DIGITS,y
	and #$10
	cmp #$10
	jne l_2987
	lda #$DF
	sta A
l_2987

; optimize OK (vservice.pas), line = 2420

	lda #$01
	sta Y

l_2997
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_29A5

; optimize OK (vservice.pas), line = 2421

	lda PY
	adc Y
	sta :STACKORIGIN+10
	lda PY+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$05
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda PX
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc Y
	jne l_2997
l_29A5

; optimize OK (vservice.pas), line = 2424

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2425

	ldy NUM
	lda adr.DIGITS,y
	and #$20
	cmp #$20
	jne l_29DF
	lda #$DF
	sta A
l_29DF

; optimize OK (vservice.pas), line = 2426

	lda #$01
	sta Y

l_29EF
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_29FD

; optimize OK (vservice.pas), line = 2427

	lda PX
	adc #$05
	sta :STACKORIGIN+9
	lda PY
	add Y
	sta :STACKORIGIN+10
	lda PY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc Y
	jne l_29EF
l_29FD

; optimize OK (vservice.pas), line = 2430

	lda #$DE
	sta A

; optimize OK (vservice.pas), line = 2431

	ldy NUM
	lda adr.DIGITS,y
	and #$40
	cmp #$40
	jne l_2A37
	lda #$DF
	sta A
l_2A37

; optimize OK (vservice.pas), line = 2432

	lda #$01
	sta Y

l_2A47
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2A55

; optimize OK (vservice.pas), line = 2433

	lda PX
	adc #$05
	sta :STACKORIGIN+9
	lda PY
	add Y
	sta :STACKORIGIN+10
	lda PY+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$05
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	tay
	lda A
	sta adr.SCREEN,y

; --- ForToDoEpilog
	inc Y
	jne l_2A47
l_2A55

; ------------------------------------------------------------

PX	= DATAORIGIN+$107B
PY	= DATAORIGIN+$107D
NUM	= DATAORIGIN+$107F
X	= DATAORIGIN+$1081
Y	= DATAORIGIN+$1082
A	= DATAORIGIN+$1083

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (vservice.pas), line = 2444

	lda #$00
	sta F

; optimize OK (vservice.pas), line = 2449

	lda #$A0
	sta @INTEGER.DIV.B
	lda #$86
	sta @INTEGER.DIV.B+1
	lda #$01
	sta @INTEGER.DIV.B+2
	lda #$00
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (vservice.pas), line = 2450

	jmi l_2A9B
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2A9B
	lda #$01
	sta F
l_2A9B

; optimize OK (vservice.pas), line = 2451

	lda F
	jeq l_2AAE
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2ABE
l_2AAE

; optimize OK (vservice.pas), line = 2452

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2ABE
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (vservice.pas), line = 2455

	lda #$10
	sta @INTEGER.DIV.B
	lda #$27
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (vservice.pas), line = 2456

	jmi l_2AE0
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2AE0
	lda #$01
	sta F
l_2AE0

; optimize OK (vservice.pas), line = 2457

	lda F
	jeq l_2AF3
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2B07
l_2AF3

; optimize OK (vservice.pas), line = 2458

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2B07
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (vservice.pas), line = 2461

	lda #$E8
	sta @INTEGER.DIV.B
	lda #$03
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (vservice.pas), line = 2462

	jmi l_2B2D
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2B2D
	lda #$01
	sta F
l_2B2D

; optimize OK (vservice.pas), line = 2463

	lda F
	jeq l_2B40
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2B54
l_2B40

; optimize OK (vservice.pas), line = 2464

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2B54
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (vservice.pas), line = 2467

	lda #$64
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (vservice.pas), line = 2468

	jmi l_2B7A
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2B7A
	lda #$01
	sta F
l_2B7A

; optimize OK (vservice.pas), line = 2469

	lda F
	jeq l_2B8D
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2BA1
l_2B8D

; optimize OK (vservice.pas), line = 2470

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2BA1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (vservice.pas), line = 2473

	lda #$0A
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (vservice.pas), line = 2474

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (vservice.pas), line = 2478

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$00
	sta PUT_DIGIT.NUM
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; ------------------------------------------------------------

PX	= DATAORIGIN+$1084
PY	= DATAORIGIN+$1086
SC	= DATAORIGIN+$1088
N1	= DATAORIGIN+$108C
F	= DATAORIGIN+$1090

@VarData	= PX
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, vservice.pas), line = 2524

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; optimize OK (vservice.pas), line = 2527

	lda #$00
	sta CN

l_2BE0
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2BEE

; optimize OK (vservice.pas), line = 2528

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_2BF9_0

l_2BFC
; --- ForToDoCondition
	lda @FORTMP_2BF9_0::#$00
	cmp Y
	jcc l_2C0A

; optimize OK (vservice.pas), line = 2529

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2C15_0

l_2C18
; --- ForToDoCondition
	lda @FORTMP_2C15_0::#$00
	cmp X
	jcc l_2C26

; optimize OK (vservice.pas), line = 2531

	lda X
	add #$0B
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta XL
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta XL+1

; optimize OK (vservice.pas), line = 2532

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (vservice.pas), line = 2534

	lda MODX
	add XL
	tay
	lda MODX+1
	adc XL+1
	sta :bp+1
	lda (:bp),y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (vservice.pas), line = 2535

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize FAIL (1, vservice.pas), line = 2539

	inx
	ldy #1
	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	bmi @+
	dey
@
	sty :STACKORIGIN,x
	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	bne @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2C89

; optimize OK (vservice.pas), line = 2542

	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL
; optimize OK (vservice.pas), line = 2545
; optimize OK (vservice.pas), line = 2548
	jmp l_2CCB
l_2C89

; optimize OK (vservice.pas), line = 2557

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (vservice.pas), line = 2560

	lda PATTERN.OFS
	add XP
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc XP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YP
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YP+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex
l_2CCB

; optimize OK (vservice.pas), line = 2563

	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XL
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda XL+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (vservice.pas), line = 2566

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2C18
l_2C26

; --- ForToDoEpilog
	inc Y
	jne l_2BFC
l_2C0A

; --- ForToDoEpilog
	inc CN
	jne l_2BE0
l_2BEE

; ------------------------------------------------------------

LIVES	= DATAORIGIN+$1091
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$1093
Y	= DATAORIGIN+$1094
CN	= DATAORIGIN+$1095
XP	= DATAORIGIN+$1096
YP	= DATAORIGIN+$1098
XL	= DATAORIGIN+$109A
YL	= DATAORIGIN+$109C
SHADOW	= DATAORIGIN+$109E
CL	= DATAORIGIN+$109F

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (vservice.pas), line = 2575

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2D39_0

l_2D3C
; --- ForToDoCondition
	lda @FORTMP_2D39_0::#$00
	cmp Y
	jcc l_2D4A

; optimize OK (vservice.pas), line = 2577

	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	lda SHOOTS.WIDTH
	sta :ecx
	lda SHOOTS.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta FW
	lda :eax+1
	sta FW+1

; optimize OK (vservice.pas), line = 2579

	lda Y
	add FIRE.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda FIRE.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	add FW
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	adc FW+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc Y
	jne l_2D3C
l_2D4A

; ------------------------------------------------------------

FW	= DATAORIGIN+$10A2
Y	= DATAORIGIN+$10A4

@VarData	= FW
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (vservice.pas), line = 2587

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2D87_0

l_2D8A
; --- ForToDoCondition
	lda @FORTMP_2D87_0::#$00
	cmp Y
	jcc l_2D98

; optimize OK (vservice.pas), line = 2591

	lda Y
	add FIRE.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda FIRE.X
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add FIRE.X
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	add FIRE.Y
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	asl :STACKORIGIN+12
	rol @
	sta :STACKORIGIN+STACKWIDTH+12
	lda ROW
	add :STACKORIGIN+12
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	dey
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda SHOOTS.WIDTH
	sta BLITROW.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2D8A
l_2D98

; ------------------------------------------------------------

Y	= DATAORIGIN+$10A6

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (vservice.pas), line = 2598

	lda FIRE.AVL
	jeq l_2DDA

; optimize FAIL ('MOUSECLICK', vservice.pas), line = 2600

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT+1
	cmp #$00
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2DFA

; optimize OK (vservice.pas), line = 2602

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	sbc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda VAUS.X
	add :STACKORIGIN+10
	sta FIRE.X

; optimize OK (vservice.pas), line = 2603

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (vservice.pas), line = 2604

	lda #$01
	sta FIRE.SHOT

; optimize OK (vservice.pas), line = 2605

	lda #$00
	sta FIRE.NW

; optimize OK (vservice.pas), line = 2606

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2DFA

; optimize OK (vservice.pas), line = 2609

	lda FIRE.SHOT
	jeq l_2E34

; optimize OK (vservice.pas), line = 2611

	lda FIRE.NW
	jeq l_2E41
	jsr REMOVE_FIRE
l_2E41

; optimize OK (vservice.pas), line = 2612

	lda #$01
	sta FIRE.NW

; optimize OK (vservice.pas), line = 2614

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (vservice.pas), line = 2615

	cmp #$16
	jcs l_2E5C
	lda #$00
	sta FIRE.SHOT
	jmp l_2E6A
l_2E5C

; optimize FAIL ('PLACE_FIRE', vservice.pas), line = 2618

	jsr PLACE_FIRE

; optimize OK (vservice.pas), line = 2620

	lda FIRE.Y
	sub #$16
	jeq l_2E91
	bpl @+
	jmp l_2E91
@
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_2E91
@

; optimize OK (vservice.pas), line = 2622

	lda FIRE.X
	sub #$09
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X1
	lda :STACKORIGIN+STACKWIDTH+9
	sta X1+1

; optimize OK (vservice.pas), line = 2623

	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y1
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y1+1

; optimize OK (vservice.pas), line = 2625

	lda FIRE.X
	add SHOOTS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$09
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X2
	lda :STACKORIGIN+STACKWIDTH+9
	sta X2+1

; optimize OK (vservice.pas), line = 2626

	lda Y1
	sta Y2
	lda Y1+1
	sta Y2+1

; optimize OK (vservice.pas), line = 2628

	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda Y1
	sta :eax
	lda Y1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add X1
	tay
	lda adr.WALL,y
	jne l_2EFAx
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda Y2
	sta :eax
	lda Y2+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add X2
	tay
	lda adr.WALL,y
	jeq l_2EFA
l_2EFAx

; optimize FAIL ('REMOVE_FIRE', vservice.pas), line = 2630

	jsr REMOVE_FIRE

; optimize OK (vservice.pas), line = 2631

	lda #$00
	sta FIRE.SHOT

; optimize OK (vservice.pas), line = 2633

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X1+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y1+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (vservice.pas), line = 2634

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X2+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y2+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE
l_2E6A
l_2EFA
l_2E91
l_2E34
l_2DDA

; ------------------------------------------------------------

X1	= DATAORIGIN+$10A8
X2	= DATAORIGIN+$10AA
Y1	= DATAORIGIN+$10AC
Y2	= DATAORIGIN+$10AE

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (vservice.pas), line = 2646

	lda #$00
	sta Y

l_2F1F
; --- ForToDoCondition
	lda Y
	cmp #$14
	jcs l_2F2D

; optimize OK (vservice.pas), line = 2648

	adc #$B0
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$D9
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$D9
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	add #$B0
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	asl :STACKORIGIN+12
	rol @
	sta :STACKORIGIN+STACKWIDTH+12
	lda ROW
	add :STACKORIGIN+12
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2F1F
l_2F2D

; ------------------------------------------------------------

Y	= DATAORIGIN+$10B0

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (vservice.pas), line = 2656

	lda SCRFLUXCNT
	sta FX

; optimize OK (vservice.pas), line = 2657

	lda SCRFLUX
	jeq l_2F6C

; optimize OK (vservice.pas), line = 2659

	lda #$00
	sta Y

l_2F76
; --- ForToDoCondition
	lda Y
	cmp #$14
	jcs l_2F84

; optimize OK (vservice.pas), line = 2661

	adc #$B0
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$D9
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2F76
l_2F84

; optimize FAIL (0, vservice.pas), line = 2663

	inc SCRFLUXCNT

; optimize OK (vservice.pas), line = 2664

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2FC3
	lda #$00
	sta SCRFLUXCNT
l_2FC3
l_2F6C

; ------------------------------------------------------------

Y	= DATAORIGIN+$10B1
FX	= DATAORIGIN+$10B2

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', vservice.pas), line = 2672

	jsr NOSOUND

; optimize OK (vservice.pas), line = 2674

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (vservice.pas), line = 2675

	lda #$00
	sta REMAIN_BLK

; optimize OK (vservice.pas), line = 2677

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', vservice.pas), line = 2679

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', vservice.pas), line = 2680

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', vservice.pas), line = 2681

	jsr PLACE_VAUS

; optimize OK (vservice.pas), line = 2683

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_2FEE_0
	lda Z+1
	adc #$00
	sta @FORTMP_2FEE_1

l_2FF1
; --- ForToDoCondition
	lda @FORTMP_2FEE_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_2FEE_0::#$00
	cmp X
@
	jcc l_2FFD

; optimize FAIL ('WAIT_VBL', vservice.pas), line = 2685

	jsr WAIT_VBL

; optimize OK (vservice.pas), line = 2687

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (vservice.pas), line = 2688

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', vservice.pas), line = 2689

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', vservice.pas), line = 2690

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', vservice.pas), line = 2691

	jsr PLACE_VAUS

; optimize OK (vservice.pas), line = 2693

	lda VAUS.Y
	sta Y
	lda #$00
	sta Y+1
	lda VAUS.Y
	add VAUS.HEIGHT
	sta @FORTMP_301C_0
	lda #$00
	adc #$00
	sta @FORTMP_301C_1

l_301F
; --- ForToDoCondition
	lda @FORTMP_301C_1::#$00
	cmp Y+1
	bne @+
	lda @FORTMP_301C_0::#$00
	cmp Y
@
	jcc l_302B

; optimize OK (vservice.pas), line = 2695

	lda Y+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$E1
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$E1
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$28
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_301F
	inc Y+1
	jne l_301F
l_302B

; --- ForToDoEpilog
	inc X
	jne l_2FF1
	inc X+1
	jne l_2FF1
l_2FFD

; ------------------------------------------------------------

X	= DATAORIGIN+$10B3
Y	= DATAORIGIN+$10B5
Z	= DATAORIGIN+$10B7

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (vservice.pas), line = 2705

	lda VAUS.LETTER
	jmi l_3065
	jeq l_3065

; optimize OK (vservice.pas), line = 2707

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (vservice.pas), line = 2708

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_307C
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_307C

; optimize OK (vservice.pas), line = 2709

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_308E
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_308E

; optimize OK (vservice.pas), line = 2710

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2711

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2712

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', vservice.pas), line = 2713

	jsr REMOVE_FLUX

; optimize OK (vservice.pas), line = 2715

	lda VAUS.LETTER
	cmp #$06
	jeq l_30B3

; optimize OK (vservice.pas), line = 2717

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2718

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2719

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_30B3
l_3065

; optimize OK (vservice.pas), line = 2723

	lda VAUS.LETTER
	sta @CASETMP_0009
	cmp #$01
	jne l_30CF
@

; optimize OK (vservice.pas), line = 2726

	lda FIRE.SHOT
	jeq l_30DB
	jsr REMOVE_FIRE
l_30DB

; optimize OK (vservice.pas), line = 2727

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2728

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2729

	lda #$00
	sta VAUS.LETTER

; optimize OK (vservice.pas), line = 2730

	lda #$01
	sta FIRE.AVL

; optimize OK (vservice.pas), line = 2731

	lda #$00
	sta FIRE.SHOT
	jmp a_0009
l_30CF
	cmp #$02
	jne l_30F5

; optimize OK (vservice.pas), line = 2735

	lda FIRE.SHOT
	jeq l_3101
	jsr REMOVE_FIRE
l_3101

; optimize OK (vservice.pas), line = 2736

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2737

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2738

	lda #$00
	sta VAUS.LETTER

; optimize OK (vservice.pas), line = 2739

	sta FIRE.AVL
	jmp a_0009
l_30F5
	cmp #$03
	jne l_3117

; optimize OK (vservice.pas), line = 2743

	lda FIRE.SHOT
	jeq l_3123
	jsr REMOVE_FIRE
l_3123

; optimize OK (vservice.pas), line = 2744

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2745

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2746

	lda #$00
	sta VAUS.LETTER

; optimize OK (vservice.pas), line = 2747

	sta FIRE.AVL

; optimize OK (vservice.pas), line = 2748

	lda #$01
	sta SCRFLUX
	jmp a_0009
l_3117
	cmp #$04
	jne l_313D

; optimize OK (vservice.pas), line = 2752

	lda FIRE.SHOT
	jeq l_3149
	jsr REMOVE_FIRE
l_3149

; optimize OK (vservice.pas), line = 2753

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2754

	jsr MODIFY_VAUS
; optimize OK (vservice.pas), line = 2755
	jmp s_3186
l_313D
	cmp #$05
	jne l_315B

; optimize OK (vservice.pas), line = 2759

	lda FIRE.SHOT
	jeq l_3167
	jsr REMOVE_FIRE
l_3167

; optimize OK (vservice.pas), line = 2760

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2761

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2762

	lda #$00
	sta VAUS.LETTER

; optimize OK (vservice.pas), line = 2763

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (vservice.pas), line = 2764

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3186
; optimize OK (vservice.pas), line = 2765
	jmp s_31A4
l_315B
	cmp #$06
	jne l_318D

; optimize OK (vservice.pas), line = 2769

	lda FIRE.SHOT
	jeq l_3199
	jsr REMOVE_FIRE
l_3199

; optimize OK (vservice.pas), line = 2770

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2771

	jsr MODIFY_VAUS
s_31A4
; optimize OK (vservice.pas), line = 2772
	jmp s_31D4
l_318D
	cmp #$07
	jne l_31AB

; optimize OK (vservice.pas), line = 2776

	lda FIRE.SHOT
	jeq l_31B7
	jsr REMOVE_FIRE
l_31B7

; optimize OK (vservice.pas), line = 2777

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', vservice.pas), line = 2778

	jsr MODIFY_VAUS

; optimize OK (vservice.pas), line = 2779

	lda #$00
	sta VAUS.LETTER

; optimize OK (vservice.pas), line = 2780

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (vservice.pas), line = 2781

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (vservice.pas), line = 2782

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_31D4

; optimize OK (vservice.pas), line = 2783

	lda #$00
	sta FIRE.AVL
l_31AB
a_0009

; ------------------------------------------------------------

B1	= DATAORIGIN+$10BD
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001A
B2	= DATAORIGIN+$10C1
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001A
B3	= DATAORIGIN+$10C5
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$10C9
@CASETMP_0009	= DATAORIGIN+$10CB

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_31E2

; optimize OK (vservice.pas), line = 2796

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (vservice.pas), line = 2797

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_31E2
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_31E2

; optimize OK (vservice.pas), line = 2799

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 2800

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 2801

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$10CC
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
TEMP	= DATAORIGIN+$10D0

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_3222

.local	CHECK_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 2831

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3231

; optimize OK (vservice.pas), line = 2834

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_324E
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_324E

; optimize OK (vservice.pas), line = 2835

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_324E

; optimize OK (vservice.pas), line = 2837

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', vservice.pas), line = 2838

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_3231

; ------------------------------------------------------------

BALL	= DATAORIGIN+$1131
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (vservice.pas), line = 2846

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_326F

; optimize OK (vservice.pas), line = 2848

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2850

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_3285
	jeq l_3285

; optimize OK (vservice.pas), line = 2852

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2855

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_329B

; optimize OK (vservice.pas), line = 2857

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2858

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_329B
l_3285

; optimize OK (vservice.pas), line = 2862

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (vservice.pas), line = 2866

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_32C3
@
	ldy #$00
	lda (:bp2),y
	jpl l_32C3
@

; optimize OK (vservice.pas), line = 2867

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_32C3
l_326F

; ------------------------------------------------------------

BALL	= DATAORIGIN+$1135
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_3222

; optimize OK (vservice.pas), line = 2875

	lda #$00
	sta SCRFLUXCNT

; optimize OK (vservice.pas), line = 2876

	sta SCRFLUX

; optimize OK (vservice.pas), line = 2878

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (vservice.pas), line = 2880

	lda #$00
	sta FIRE.AVL

; optimize OK (vservice.pas), line = 2881

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (vservice.pas), line = 2883

	lda #$FF
	sta LETT.LAST
	sta LETT.LAST+1

; optimize OK (vservice.pas), line = 2884

	lda #$00
	sta LETT.ACTIVE

; optimize OK (vservice.pas), line = 2887

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', vservice.pas), line = 2890

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (vservice.pas), line = 2894

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (vservice.pas), line = 2897

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (vservice.pas), line = 2900

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (vservice.pas), line = 2901

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (vservice.pas), line = 2902

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', vservice.pas), line = 2905

	jsr PUT_WALL

; optimize FAIL ('MOUSERESET', vservice.pas), line = 2909

	jsr MOUSERESET

; optimize OK (vservice.pas), line = 2912

	lda #$01
	sta BALL0.INPLAY

; optimize OK (vservice.pas), line = 2913

	sta BALL0.LAUNCH

; optimize OK (vservice.pas), line = 2916

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (vservice.pas), line = 2917

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (vservice.pas), line = 2920

	lda #$FF
	sta BALL0.OLDX
	sta BALL0.OLDX+1

; optimize OK (vservice.pas), line = 2921

	sta BALL0.OLDY
	sta BALL0.OLDY+1

; optimize OK (vservice.pas), line = 2924

	lda #$00
	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (vservice.pas), line = 2928

	lda #$10
	sta BALL0.ONVAUS

; optimize OK (vservice.pas), line = 2933

	lda #$00
	sta BALL0.STM

; optimize OK (vservice.pas), line = 2937

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', vservice.pas), line = 2940

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', vservice.pas), line = 2943

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', vservice.pas), line = 2945

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', vservice.pas), line = 2946

	jsr START_VAUS

; optimize OK (vservice.pas), line = 2947

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', vservice.pas), line = 2948

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', vservice.pas), line = 2949

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', vservice.pas), line = 2950

	jsr REMOVE_ROUND_LEVEL

; optimize OK (vservice.pas), line = 2951

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (vservice.pas), line = 2958

	lda #$0F
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 2960

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 2963

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (vservice.pas), line = 2965

	sta BALL1.INPLAY

; optimize OK (vservice.pas), line = 2966

	sta BALL2.INPLAY

; --- WhileProlog
	jmp l_3359
l_335A

; optimize FAIL ('WAIT_VBL', vservice.pas), line = 2970

	jsr WAIT_VBL

; optimize OK (vservice.pas), line = 2974

	lda BALL0.X
	sta MOUS.X
	lda BALL0.X+1
	sta MOUS.X+1

; optimize OK (vservice.pas), line = 2976

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	lda <Y
	sta MOUSECOORDS.Y
	lda >Y
	sta MOUSECOORDS.Y+1
	jsr MOUSECOORDS

; optimize OK (vservice.pas), line = 2981

	lda TRAINER
	jne l_3375
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_3383
l_3375

; optimize OK (vservice.pas), line = 2987

	lda TRAINER
	cmp #$01
	jne l_3395

; optimize FAIL (1, vservice.pas), line = 2988

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc #$00
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_3383
	jsr MOVE_VAUS
l_3395

; optimize OK (vservice.pas), line = 2993

	lda BALL0.LAUNCH
	cmp #$01
	jne l_33B8

; optimize FAIL (0, vservice.pas), line = 2995

	inc BALL0.STM

; optimize OK (vservice.pas), line = 3000

	lda BALL0.STM
	cmp #$FA
	jne l_33CF
	lda #$00
	sta BALL0.LAUNCH
l_33CF

; optimize OK (vservice.pas), line = 3003

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', vservice.pas), line = 3006

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT+1
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	jne l_33E9
	lda #$00
	sta BALL0.LAUNCH
l_33E9
	jmp l_33F9
l_33B8

; optimize OK (vservice.pas), line = 3014

	lda BALL0.INPLAY
	jeq l_3405
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3405
l_33F9

; optimize OK (vservice.pas), line = 3015

	lda BALL1.INPLAY
	jeq l_3417
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3417

; optimize OK (vservice.pas), line = 3016

	lda BALL2.INPLAY
	jeq l_3429
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3429

; optimize OK (vservice.pas), line = 3022

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (vservice.pas), line = 3023

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (vservice.pas), line = 3024

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', vservice.pas), line = 3039

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', vservice.pas), line = 3040

	jsr CHECK_LETTER

; optimize OK (vservice.pas), line = 3041

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', vservice.pas), line = 3042

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', vservice.pas), line = 3043

	jsr CHECK_FLUX

; optimize OK (vservice.pas), line = 3045

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_3461
	jsr VAUS_OUT
l_3461

; optimize OK (vservice.pas), line = 3047

	lda VAUS.LETTER
	cmp #$04
	jne l_3477

; optimize OK (vservice.pas), line = 3049

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (vservice.pas), line = 3051

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (vservice.pas), line = 3052

	mwy BALL2 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (vservice.pas), line = 3054

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (vservice.pas), line = 3056

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (vservice.pas), line = 3063

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (vservice.pas), line = 3065

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 3066

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 3067

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (vservice.pas), line = 3071

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 3072

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 3073

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (vservice.pas), line = 3075

	lda #$00
	sta VAUS.LETTER
l_3477

; optimize OK (vservice.pas), line = 3079

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_34DA
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_34DA

; optimize OK (vservice.pas), line = 3082

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1,y
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2,y
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3,y
	sta WRITE_SCORE.SC+3
	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (vservice.pas), line = 3085

	lda CUR_PLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.SCORE.PLAYER+3,y
	sub SCORE.HISCORE+3
	bne L4
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne L1
	lda adr.SCORE.PLAYER+1,y
	cmp SCORE.HISCORE+1
	bne L1
	lda adr.SCORE.PLAYER,y
	cmp SCORE.HISCORE
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_3500
	jeq l_3500

; optimize OK (vservice.pas), line = 3088

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (vservice.pas), line = 3090

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_3500

; optimize OK (vservice.pas), line = 3097

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (vservice.pas), line = 3098

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (vservice.pas), line = 3099

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (vservice.pas), line = 3140

	lda BALL0.INPLAY
	jne l_3526

; optimize OK (vservice.pas), line = 3142

	mwy BALL0 :bp2
	ldy #$1A
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (vservice.pas), line = 3143

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (vservice.pas), line = 3144

	sta BALL2.INPLAY
l_3526

; optimize OK (vservice.pas), line = 3147

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (vservice.pas), line = 3149

	lda BALL0.INPLAY
	jeq l_3541
	inc BALLS_IN_PLAY
l_3541

; optimize OK (vservice.pas), line = 3150

	lda BALL1.INPLAY
	jeq l_3554
	inc BALLS_IN_PLAY
l_3554

; optimize OK (vservice.pas), line = 3151

	lda BALL2.INPLAY
	jeq l_3567
	inc BALLS_IN_PLAY
l_3567

; optimize OK (vservice.pas), line = 3154

	lda BALL0.INPLAY
	jne l_357D

; optimize OK (vservice.pas), line = 3156

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (vservice.pas), line = 3157

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', vservice.pas), line = 3158

	jsr DESTROY_VAUS

; optimize OK (vservice.pas), line = 3159

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (vservice.pas), line = 3160

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', vservice.pas), line = 3168

	jsr NOSOUND
l_357D
l_3359

; optimize OK (vservice.pas), line = 2968

	lda REMAIN_BLK
	jeq l_335Aw
	lda BALL0.INPLAY
	jeq l_335Aw
	lda SCORE.ABORTPLAY
	jeq l_335A
l_335Aw

; optimize OK (vservice.pas), line = 3224

	lda #$00
	sta RESULT

; optimize OK (vservice.pas), line = 3225

	lda REMAIN_BLK
	jne l_35C7
	lda #$01
	sta RESULT
l_35C7
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$10D2
X	= DATAORIGIN+$10D3
Y	= DATAORIGIN+$10D5
KEY	= DATAORIGIN+$10D7
T1	= DATAORIGIN+$10D9
T2	= DATAORIGIN+$10DB
HLP	= DATAORIGIN+$10DD
CN	= DATAORIGIN+$10DF
adr.BALL0	= DATAORIGIN+$10E0	; [27] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$10E0
BALL0.Y	= DATAORIGIN+$10E2
BALL0.FINEX	= DATAORIGIN+$10E4
BALL0.FINEY	= DATAORIGIN+$10E6
BALL0.OLDX	= DATAORIGIN+$10E8
BALL0.OLDY	= DATAORIGIN+$10EA
BALL0.SPEED	= DATAORIGIN+$10EC
BALL0.FINESPEED	= DATAORIGIN+$10EE
BALL0.SPEEDX	= DATAORIGIN+$10F0
BALL0.SPEEDY	= DATAORIGIN+$10F2
BALL0.SBD	= DATAORIGIN+$10F4
BALL0.BRWHIT	= DATAORIGIN+$10F6
BALL0.INPLAY	= DATAORIGIN+$10F7
BALL0.LAUNCH	= DATAORIGIN+$10F8
BALL0.ONVAUS	= DATAORIGIN+$10F9
BALL0.STM	= DATAORIGIN+$10FA
adr.BALL1	= DATAORIGIN+$10FB	; [27] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$10FB
BALL1.Y	= DATAORIGIN+$10FD
BALL1.FINEX	= DATAORIGIN+$10FF
BALL1.FINEY	= DATAORIGIN+$1101
BALL1.OLDX	= DATAORIGIN+$1103
BALL1.OLDY	= DATAORIGIN+$1105
BALL1.SPEED	= DATAORIGIN+$1107
BALL1.FINESPEED	= DATAORIGIN+$1109
BALL1.SPEEDX	= DATAORIGIN+$110B
BALL1.SPEEDY	= DATAORIGIN+$110D
BALL1.SBD	= DATAORIGIN+$110F
BALL1.BRWHIT	= DATAORIGIN+$1111
BALL1.INPLAY	= DATAORIGIN+$1112
BALL1.LAUNCH	= DATAORIGIN+$1113
BALL1.ONVAUS	= DATAORIGIN+$1114
BALL1.STM	= DATAORIGIN+$1115
adr.BALL2	= DATAORIGIN+$1116	; [27] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$1116
BALL2.Y	= DATAORIGIN+$1118
BALL2.FINEX	= DATAORIGIN+$111A
BALL2.FINEY	= DATAORIGIN+$111C
BALL2.OLDX	= DATAORIGIN+$111E
BALL2.OLDY	= DATAORIGIN+$1120
BALL2.SPEED	= DATAORIGIN+$1122
BALL2.FINESPEED	= DATAORIGIN+$1124
BALL2.SPEEDX	= DATAORIGIN+$1126
BALL2.SPEEDY	= DATAORIGIN+$1128
BALL2.SBD	= DATAORIGIN+$112A
BALL2.BRWHIT	= DATAORIGIN+$112C
BALL2.INPLAY	= DATAORIGIN+$112D
BALL2.LAUNCH	= DATAORIGIN+$112E
BALL2.ONVAUS	= DATAORIGIN+$112F
BALL2.STM	= DATAORIGIN+$1130

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (vservice.pas), line = 3248

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (vservice.pas), line = 3306

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1139
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$113B
Y	= DATAORIGIN+$113D
ST	= DATAORIGIN+$113F
OLDX	= DATAORIGIN+$1141
OLDY	= DATAORIGIN+$1143
NEWX	= DATAORIGIN+$1145
NEWY	= DATAORIGIN+$1147
adr.SC	= [DATAORIGIN+$1149] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 35

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (vservice.pas), line = 3315

	lda #$01
	sta X

l_35E8
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_35F6

; optimize OK (vservice.pas), line = 3317

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (vservice.pas), line = 3318

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (vservice.pas), line = 3319

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize FAIL (1, vservice.pas), line = 3320

	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda ALL_WALLS
	add :STACKORIGIN-1,x
	sta @move.src
	lda ALL_WALLS+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.src+1
	lda WALL_P
	sta @move.dst
	lda WALL_P+1
	sta @move.dst+1
	dex
	dex
	lda <768
	sta @move.cnt
	lda >768
	sta @move.cnt+1
	jsr @move

; optimize OK (vservice.pas), line = 3322

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_35E8
l_35F6

; optimize OK (vservice.pas), line = 3325

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$115E

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', vservice.pas), line = 3442

	jsr SET_START_PARAMETERS

; optimize OK (vservice.pas), line = 3443

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_363B
	lda #$00
	sta adr.SCORE.LIVES+$02
l_363B

; optimize OK (vservice.pas), line = 3446

	lda #$00
	sta TRAINER

; optimize OK (vservice.pas), line = 3447

	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', vservice.pas), line = 3449

	jsr SET_WALL

; optimize OK (vservice.pas), line = 3451

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', vservice.pas), line = 3452

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (vservice.pas), line = 3455

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (vservice.pas), line = 3458

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (vservice.pas), line = 3459

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (vservice.pas), line = 3460

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', vservice.pas), line = 3463

	jsr PUT_WALL

; --- RepeatUntilProlog
l_366A

; --- RepeatUntilProlog
l_366B

; optimize OK (vservice.pas), line = 3470

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_367D

; optimize FAIL (1, vservice.pas), line = 3472

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex

; optimize FAIL (1, vservice.pas), line = 3475

	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda ALL_WALLS
	add :STACKORIGIN-1,x
	sta @move.src
	lda ALL_WALLS+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.src+1
	lda WALL_P
	sta @move.dst
	lda WALL_P+1
	sta @move.dst+1
	dex
	dex
	lda <768
	sta @move.cnt
	lda >768
	sta @move.cnt+1
	jsr @move

; optimize OK (vservice.pas), line = 3479

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_367D

; optimize OK (vservice.pas), line = 3483

	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', vservice.pas), line = 3484

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', vservice.pas), line = 3489

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (vservice.pas), line = 3493

	jeq l_36BF

; optimize OK (vservice.pas), line = 3496

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (vservice.pas), line = 3499

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_36DB

; optimize OK (vservice.pas), line = 3500

	lda #$01
	sta adr.SCORE.WALL_N,y
l_36DB

; optimize FAIL (1, vservice.pas), line = 3503

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda ALL_WALLS
	add :STACKORIGIN-1,x
	sta @move.src
	lda ALL_WALLS+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.src+1
	lda WALL_P
	sta @move.dst
	lda WALL_P+1
	sta @move.dst+1
	dex
	dex
	lda <768
	sta @move.cnt
	lda >768
	sta @move.cnt+1
	jsr @move
	jmp l_3705
l_36BF

; optimize OK (vservice.pas), line = 3509

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_371A
	jsr GAME_OVER
l_3705
l_371A

; optimize OK (vservice.pas), line = 3514

	lda NWALL
	jne l_366B

; optimize FAIL (0, vservice.pas), line = 3517

	inc CUR_PLAYER

; optimize OK (vservice.pas), line = 3518

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_3742
	lda #$01
	sta CUR_PLAYER
l_3742

; optimize OK (vservice.pas), line = 3524

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_375E
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_375E

; optimize OK (vservice.pas), line = 3529

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_366A

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$115F
NWALL	= DATAORIGIN+$1161

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 132

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 133

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$4A
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$44
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$3E
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$50
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SOUNDFX.OFS
	lda #$6F
	sta SOUNDFX.OFS+1
	lda #$03
	sta SOUNDFX.OFS+2
	lda #$00
	sta SOUNDFX.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta SOUNDFX.WIDTH
	lda #$00
	sta SOUNDFX.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$26
	sta SOUNDFX.HEIGHT
	lda #$00
	sta SOUNDFX.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$BB
	sta SHINEWALL.OFS
	lda #$72
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$BB
	sta MINIVAUS.OFS
	lda #$77
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$1F
	sta LEVELSEL.OFS
	lda #$78
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$EA
	sta LETTERS.OFS
	lda #$7F
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$EA
	sta NORMAL.OFS
	lda #$9B
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$CA
	sta LASERS.OFS
	lda #$9C
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$AA
	sta ENLARGED.OFS
	lda #$9D
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$6A
	sta SHOOTS.OFS
	lda #$9F
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$D2
	sta FLUX.OFS
	lda #$9F
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$1A
	sta BALLDATA.OFS
	lda #$A1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$33
	sta PATTERN.OFS
	lda #$A1
	sta PATTERN.OFS+1
	lda #$03
	sta PATTERN.OFS+2
	lda #$00
	sta PATTERN.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1A
	sta PATTERN.WIDTH
	lda #$00
	sta PATTERN.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$18
	sta PATTERN.HEIGHT
	lda #$00
	sta PATTERN.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$A3
	sta PATTERN0.OFS
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$13
	sta PATTERN1.OFS
	lda #$A6
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$D7
	sta PATTERN2.OFS
	lda #$A6
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 77

	lda #$09
	sta PATTERN3.OFS
	lda #$AC
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 78

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 79

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 81

	lda #$35
	sta PATTERN4.OFS
	lda #$AF
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 82

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 83

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 140

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 143

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 144

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_389B

; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 148

	jsr MOUSERESET

; optimize OK (arkanoid_vbxe.pas), line = 152

	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME

; optimize OK (arkanoid_vbxe.pas), line = 154

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_389B

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0010

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 162

	jsr INIT_GAME

; ------------------------------------------------------------

adr.MOUS	= DATAORIGIN+$00A8	; [5] RECORD
.var MOUS	= adr.MOUS .word
MOUS.X	= DATAORIGIN+$00A8
MOUS.Y	= DATAORIGIN+$00AA
MOUS.FIRE	= DATAORIGIN+$00AC
VBXE_OVRADR	= $5000
VBXE_DATA	= $14A00
VRAM	= $00
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$004C
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0057
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$006D
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0076
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0080
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0084
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$008F
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$009B
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00C1	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00C1
BALLDATA.HEIGHT	= DATAORIGIN+$00C3
BALLDATA.OFS	= DATAORIGIN+$00C5
adr.PLAYSCREEN	= DATAORIGIN+$00C9	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00C9
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00CB
PLAYSCREEN.OFS	= DATAORIGIN+$00CD
adr.PLAYVAUS	= DATAORIGIN+$00D1	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00D1
PLAYVAUS.HEIGHT	= DATAORIGIN+$00D3
PLAYVAUS.OFS	= DATAORIGIN+$00D5
adr.NORMAL	= DATAORIGIN+$00D9	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00D9
NORMAL.HEIGHT	= DATAORIGIN+$00DB
NORMAL.OFS	= DATAORIGIN+$00DD
adr.ENLARGED	= DATAORIGIN+$00E1	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00E1
ENLARGED.HEIGHT	= DATAORIGIN+$00E3
ENLARGED.OFS	= DATAORIGIN+$00E5
adr.LASERS	= DATAORIGIN+$00E9	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00E9
LASERS.HEIGHT	= DATAORIGIN+$00EB
LASERS.OFS	= DATAORIGIN+$00ED
adr.EXPLOSION	= DATAORIGIN+$00F1	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00F1
EXPLOSION.HEIGHT	= DATAORIGIN+$00F3
EXPLOSION.OFS	= DATAORIGIN+$00F5
adr.NEWVAUS	= DATAORIGIN+$00F9	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00F9
NEWVAUS.HEIGHT	= DATAORIGIN+$00FB
NEWVAUS.OFS	= DATAORIGIN+$00FD
adr.PRESENTS	= DATAORIGIN+$0101	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0101
PRESENTS.HEIGHT	= DATAORIGIN+$0103
PRESENTS.OFS	= DATAORIGIN+$0105
adr.SOUNDFX	= DATAORIGIN+$0109	; [8] RECORD
.var SOUNDFX	= adr.SOUNDFX .word
SOUNDFX.WIDTH	= DATAORIGIN+$0109
SOUNDFX.HEIGHT	= DATAORIGIN+$010B
SOUNDFX.OFS	= DATAORIGIN+$010D
adr.SHINEWALL	= DATAORIGIN+$0111	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$0111
SHINEWALL.HEIGHT	= DATAORIGIN+$0113
SHINEWALL.OFS	= DATAORIGIN+$0115
adr.MINIVAUS	= DATAORIGIN+$0119	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0119
MINIVAUS.HEIGHT	= DATAORIGIN+$011B
MINIVAUS.OFS	= DATAORIGIN+$011D
adr.LEVELSEL	= DATAORIGIN+$0121	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0121
LEVELSEL.HEIGHT	= DATAORIGIN+$0123
LEVELSEL.OFS	= DATAORIGIN+$0125
adr.LETTERS	= DATAORIGIN+$0129	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0129
LETTERS.HEIGHT	= DATAORIGIN+$012B
LETTERS.OFS	= DATAORIGIN+$012D
adr.SHOOTS	= DATAORIGIN+$0131	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0131
SHOOTS.HEIGHT	= DATAORIGIN+$0133
SHOOTS.OFS	= DATAORIGIN+$0135
adr.FLUX	= DATAORIGIN+$0139	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0139
FLUX.HEIGHT	= DATAORIGIN+$013B
FLUX.OFS	= DATAORIGIN+$013D
adr.VAUS	= DATAORIGIN+$0141	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0141
VAUS.Y	= DATAORIGIN+$0142
VAUS.OLDX	= DATAORIGIN+$0143
VAUS.OLDY	= DATAORIGIN+$0145
VAUS.OLDLEN	= DATAORIGIN+$0147
VAUS.WIDTH	= DATAORIGIN+$0149
VAUS.HEIGHT	= DATAORIGIN+$014A
VAUS.FLASH	= DATAORIGIN+$014B
VAUS.IFLASH	= DATAORIGIN+$014C
VAUS.LETTER	= DATAORIGIN+$014D
adr.PATTERN	= DATAORIGIN+$014E	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$014E
PATTERN.HEIGHT	= DATAORIGIN+$0150
PATTERN.OFS	= DATAORIGIN+$0152
adr.PATTERN0	= DATAORIGIN+$0156	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0156
PATTERN0.HEIGHT	= DATAORIGIN+$0158
PATTERN0.OFS	= DATAORIGIN+$015A
adr.PATTERN1	= DATAORIGIN+$015E	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$015E
PATTERN1.HEIGHT	= DATAORIGIN+$0160
PATTERN1.OFS	= DATAORIGIN+$0162
adr.PATTERN2	= DATAORIGIN+$0166	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0166
PATTERN2.HEIGHT	= DATAORIGIN+$0168
PATTERN2.OFS	= DATAORIGIN+$016A
adr.PATTERN3	= DATAORIGIN+$016E	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$016E
PATTERN3.HEIGHT	= DATAORIGIN+$0170
PATTERN3.OFS	= DATAORIGIN+$0172
adr.PATTERN4	= DATAORIGIN+$0176	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0176
PATTERN4.HEIGHT	= DATAORIGIN+$0178
PATTERN4.OFS	= DATAORIGIN+$017A
STATUS	= DATAORIGIN+$017E
SUCCESS	= DATAORIGIN+$017F
REMAIN_BLK	= DATAORIGIN+$0180
TOTALWALL	= DATAORIGIN+$0181
adr.SCORE	= DATAORIGIN+$0182	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$0182] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$018E] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$0191] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$0194
SCORE.PL_NUMB	= DATAORIGIN+$0198
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0199] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$019C
CUR_PLAYER	= DATAORIGIN+$019D
adr.SHINEREC	= DATAORIGIN+$019E	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$019E
SHINEREC.YB	= DATAORIGIN+$019F
SHINEREC.FRAME	= DATAORIGIN+$01A0
SHINEREC.BLOCK	= DATAORIGIN+$01A1
SHINEREC.ACTIVE	= DATAORIGIN+$01A2
LV	= DATAORIGIN+$01A3
TRAINER	= DATAORIGIN+$01A5
adr.LETT	= DATAORIGIN+$01A6	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01A6
LETT.Y	= DATAORIGIN+$01A7
LETT.TYP	= DATAORIGIN+$01A8
LETT.FRAME	= DATAORIGIN+$01AA
LETT.SUBFRAME	= DATAORIGIN+$01AB
LETT.ACTIVE	= DATAORIGIN+$01AC
LETT.INCOMING	= DATAORIGIN+$01AD
LETT.NEXTX	= DATAORIGIN+$01AF
LETT.NEXTY	= DATAORIGIN+$01B1
LETT.NEXTTYPE	= DATAORIGIN+$01B3
LETT.LAST	= DATAORIGIN+$01B5
adr.FIRE	= DATAORIGIN+$01B7	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01B7
FIRE.Y	= DATAORIGIN+$01B8
FIRE.SHOT	= DATAORIGIN+$01B9
FIRE.AVL	= DATAORIGIN+$01BA
FIRE.NW	= DATAORIGIN+$01BB
BALLS_IN_PLAY	= DATAORIGIN+$01BC
SCRFLUX	= DATAORIGIN+$01BD
SCRFLUXCNT	= DATAORIGIN+$01BE
SOUND_ON	= DATAORIGIN+$01BF
adr.DEF_PAL	= [DATAORIGIN+$01C0] .array [768]
.var DEF_PAL	= adr.DEF_PAL .word
adr.ALL_WALLS	= $D800
.var ALL_WALLS	= adr.ALL_WALLS .word
adr.WALL_P	= [DATAORIGIN+$04C0] .array [3] [256]
.var WALL_P	= adr.WALL_P .word
adr.WALL	= [DATAORIGIN+$07C0] .array [256]
.var WALL	= adr.WALL .word
adr.TMP	= [DATAORIGIN+$08C0] .array [256]
.var TMP	= adr.TMP .word
adr.ROW	= [DATAORIGIN+$09C0] .array [251] .word
.var ROW	= adr.ROW .word
adr.MODX	= [DATAORIGIN+$0BB6] .array [320]
.var MODX	= adr.MODX .word
adr.MODY	= [DATAORIGIN+$0CF6] .array [200]
.var MODY	= adr.MODY .word
adr.SCREEN	= [DATAORIGIN+$0DBE] .array [256]
.var SCREEN	= adr.SCREEN .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
.by  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 4450

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0B $47 $61 $6D $65 $20 $50 $61  $75 $73 $65 $64 $00 $00 $00 $00  $00 $00 $AA $00 $00 $AA $00 $00
.by  $00 $55 $AA $00 $AA $00 $00 $00  $AA $00 $AA $00 $AA $AA $00 $00  $AA $AA $AA $00 $55 $55 $55 $00
.by  $55 $55 $FF $00 $55 $FF $55 $00  $55 $FF $FF $00 $FF $55 $55 $00  $FF $55 $FF $00 $FF $FF $55 $00
.by  $FF $FF $FF $00 $FF $D4 $D3 $D2  $D1 $D0 $CF $CE $CD $CC $CB $00  $00 $0A $00 $14 $00 $1E $00 $28
.by  $00 $32 $00 $64 $00 $C8 $00 $FA  $00 $F4 $01 $E8 $03 $00 $02 $13  $24 $35 $12 $23 $34 $45 $D4 $D3
.by  $D2 $D1 $D0 $CF $CE $CD $CC $CB  $00 $3C $5D $80 $7D $60 $37 $67  $6A $4F $5F $61 $7F $6F $00 $00
.by  $00 $E8 $03 $2C $01 $64 $00 $3C  $00 $23 $00 $00 $10 $14 $03 $12  $14 $14 $03
.endm

	end
