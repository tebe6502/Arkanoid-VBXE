; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.3 [2025/08/06] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $1000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0010

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	SQRT						; FUNCTION | OVERLOAD
.local	@010185000

; optimize OK (SYSTEM), line = 801

	lda X+3
	bmi @+
	ora X+2
	ora X+1
	ora X
	jne l_0029
@
	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0029

; optimize OK (SYSTEM), line = 803

	lda <C
	sta SP
	lda >C
	sta SP+1

; optimize OK (SYSTEM), line = 805

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta C
	lda :FPMAN1
	sta C+1
	lda :FPMAN2
	sta C+2
	lda :FPMAN3
	sta C+3

; optimize OK (SYSTEM), line = 807

	cmp #$3F
	bne @+
	lda C+2
	cmp #$80
	bne @+
	lda C+1
	cmp #$00
	bne @+
	lda C
	cmp #$01
@
	jcc l_0048
	lda C
	sta :STACKORIGIN+9
	lda C+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda C+2
	sub #$80
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda C+3
	sbc #$3F
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$80
	sta C+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$3F
	sta C+3
	lda :STACKORIGIN+9
	sta C
	lda :STACKORIGIN+STACKWIDTH+9
	sta C+1
l_0048

; optimize OK (SYSTEM), line = 809

	mwy SP :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3

; optimize OK (SYSTEM), line = 811

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 812

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 813

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
SP	= DATAORIGIN+$0013
C	= DATAORIGIN+$0015

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 862

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 863

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 864

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 866

	lda VALUE+3
	ora VALUE+2
	ora VALUE+1
	ora VALUE
	jne l_00AF

; optimize OK (SYSTEM), line = 867

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_00AF

; optimize OK (SYSTEM), line = 870

	lda X+3
	jpl l_00CD

; optimize OK (SYSTEM), line = 871

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 872

	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_00CD
l_00BD

; optimize OK (SYSTEM), line = 875

	lda X
	sta @REAL_DIV.A
	lda X+1
	sub #$01
	sta @REAL_DIV.A+1
	lda X+2
	sbc #$00
	sta @REAL_DIV.A+2
	lda X+3
	sbc #$00
	sta @REAL_DIV.A+3
	lda X
	sta @REAL_DIV.B
	lda X+1
	add #$01
	sta @REAL_DIV.B+1
	lda X+2
	adc #$00
	sta @REAL_DIV.B+2
	lda X+3
	adc #$00
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 876

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1
	lda :eax+2
	sta Y+2
	lda :eax+3
	sta Y+3

; optimize OK (SYSTEM), line = 877

	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	lda #$01
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$04
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$0B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$13
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$1B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$24
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$33
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$55
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 880

	lda #$C9
	add X
	sta X
	lda #$00
	adc X+1
	sta X+1
	lda #$00
	adc X+2
	sta X+2
	lda #$00
	adc X+3
	sta X+3

; optimize OK (SYSTEM), line = 882

	lda SIGN
	jeq l_014F

; optimize OK (SYSTEM), line = 883

	lda #$00
	sub X
	sta RESULT
	lda #$00
	sbc X+1
	sta RESULT+1
	lda #$00
	sbc X+2
	sta RESULT+2
	lda #$00
	sbc X+3
	jmp l_0160
l_014F

; optimize OK (SYSTEM), line = 885

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0160
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$001D
X	= DATAORIGIN+$0021
Y	= DATAORIGIN+$0025
SIGN	= DATAORIGIN+$0029

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	RSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_019D
l_019E

; optimize OK (SYSTEM), line = 1776

	lda X
	sub #$48
	sta X
	lda X+1
	sbc #$06
	sta X+1
	lda X+2
	sbc #$00
	sta X+2
	lda X+3
	sbc #$00
	sta X+3
l_019D
	.LOCAL
	lda X+3
	sub #$00
	bne L4
	lda X+2
	cmp #$00
	bne L1
	lda X+1
	cmp #$06
	bne L1
	lda X
	cmp #$48
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_019E

; --- WhileProlog
	jmp l_01B2
l_01B3

; optimize OK (SYSTEM), line = 1777

	lda X
	add #$48
	sta X
	lda X+1
	adc #$06
	sta X+1
	lda X+2
	adc #$00
	sta X+2
	lda X+3
	adc #$00
	sta X+3
l_01B2
	lda X+3
	jmi l_01B3

; optimize OK (SYSTEM), line = 1780

	lda #$A3
	sta @REAL_MUL.B
	lda #$00
	sta @REAL_MUL.B+1
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1783

	lda X
	sta @REAL_TRUNC.A
	lda X+1
	sta @REAL_TRUNC.A+1
	lda X+2
	sta @REAL_TRUNC.A+2
	lda X+3
	sta @REAL_TRUNC.A+3
	jsr @REAL_TRUNC
	lda :eax
	sta I

; optimize OK (SYSTEM), line = 1786

	lda X+3
	jpl l_01E1
	dec I
l_01E1

; optimize OK (SYSTEM), line = 1789

	ldy #$00
	lda I
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda X+1
	sub :STACKORIGIN+STACKWIDTH+10
	sta X+1
	lda X+2
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta X+2
	lda X+3
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta X+3

; optimize OK (SYSTEM), line = 1792

	lda SC
	jeq l_01FE
	inc I
l_01FE

; optimize OK (SYSTEM), line = 1795

	lda I
	and #$01
	jne l_021B
	lda #$00
	sub X
	sta X
	lda #$01
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_021B

; optimize OK (SYSTEM), line = 1798

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1799

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda #$05
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$3C
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda #$00
	sub X
	sta @REAL_MUL.B
	lda #$01
	sbc X+1
	sta @REAL_MUL.B+1
	lda #$00
	sbc X+2
	sta @REAL_MUL.B+2
	lda #$00
	sbc X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta RESULT
	lda :eax+1
	sta RESULT+1
	lda :eax+2
	sta RESULT+2
	lda :eax+3
	sta RESULT+3

; optimize OK (SYSTEM), line = 1802

	lda I
	and #$02
	cmp #$02
	jne l_0260
	lda #$00
	sub RESULT
	sta RESULT
	lda #$00
	sbc RESULT+1
	sta RESULT+1
	lda #$00
	sbc RESULT+2
	sta RESULT+2
	lda #$00
	sbc RESULT+3
	sta RESULT+3
l_0260
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$002A
SC	= DATAORIGIN+$002E
RESULT	= DATAORIGIN+$002F
I	= DATAORIGIN+$0033

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1817

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$00
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0034
RESULT	= DATAORIGIN+$0038

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1831

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$01
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$003C
RESULT	= DATAORIGIN+$0040

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000043  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0044
RESULT	= DATAORIGIN+$0045

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_02B3

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_02C1
l_02B3

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_02C1
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0046
RESULT	= DATAORIGIN+$0048

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$004A
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$004B
GETCOLOR	= DATAORIGIN+$004C
VIDEORAM	= DATAORIGIN+$004D
adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$004F
LASTARCCOORDS.Y	= DATAORIGIN+$0051
LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
LASTARCCOORDS.XEND	= DATAORIGIN+$0057
LASTARCCOORDS.YEND	= DATAORIGIN+$0059
WIN_LEFT	= DATAORIGIN+$005B
WIN_RIGHT	= DATAORIGIN+$005D
WIN_TOP	= DATAORIGIN+$005F
WIN_BOTTOM	= DATAORIGIN+$0061
SCANLINE_WIDTH	= DATAORIGIN+$0063
CURRENTX	= DATAORIGIN+$0064
CURRENTY	= DATAORIGIN+$0066

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0074
VRAM.SIZE	= DATAORIGIN+$0078
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00AD

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00AF
B	= DATAORIGIN+$00B1

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSERESET					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 89

	lda MOUS.FIRE
	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (arkanoid_vbxe.pas), line = 91

	ldy #1
	lda MOUS.FIRE
	beq @+
	dey
@
	tya
	sta MOUS.FIRE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00B3

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 104

	mwy X :bp2
	ldy #$00
	lda MOUS.X
	sta (:bp2),y
	iny
	lda MOUS.X+1
	sta (:bp2),y

; optimize OK (arkanoid_vbxe.pas), line = 105

	mwy Y :bp2
	ldy #$00
	lda #$BE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

X	= DATAORIGIN+$00B5
Y	= DATAORIGIN+$00B7

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSE_X_LIMIT					; PROCEDURE

; ------------------------------------------------------------

MN	= DATAORIGIN+$00B9
MX	= DATAORIGIN+$00BB

@VarData	= MN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSEMOVE					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$00BD
Y	= DATAORIGIN+$00BF

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; optimize OK (service.pas), line = 283

	lda #$00
	sta I
	sta I+1
	lda SIZE
	sub #$01
	sta @FORTMP_03C8_0
	lda SIZE+1
	sbc #$00
	sta @FORTMP_03C8_1

l_03CB
; --- ForToDoCondition
	lda @FORTMP_03C8_1::#$00
	cmp I+1
	bne @+
	lda @FORTMP_03C8_0::#$00
	cmp I
@
	jcc l_03D7

; optimize OK (service.pas), line = 284

	lda SRC
	add I
	sta :STACKORIGIN+9
	lda SRC+1
	adc I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda SCREEN
	add :STACKORIGIN+9
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	jeq l_03EF
	lda DST
	add I
	sta :STACKORIGIN+9
	lda DST+1
	adc I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda SRC
	add I
	sta :STACKORIGIN+10
	lda SRC+1
	adc I+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda SCREEN
	add :STACKORIGIN+10
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	sta :STACKORIGIN+10
	lda SCREEN
	add :STACKORIGIN+9
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_03EF

; --- ForToDoEpilog
	inc I
	jne l_03CB
	inc I+1
	jne l_03CB
l_03D7

; ------------------------------------------------------------

SRC	= DATAORIGIN+$09BE
DST	= DATAORIGIN+$09C2
SIZE	= DATAORIGIN+$09C6
I	= DATAORIGIN+$09C8

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTMP						; PROCEDURE

; optimize OK (service.pas), line = 293

	lda #$00
	sta X
	ldy SIZE
	dey
	sty @FORTMP_0419_0

l_041C
; --- ForToDoCondition
	lda @FORTMP_0419_0::#$00
	cmp X
	jcc l_042A

; optimize OK (service.pas), line = 294

	lda DST
	add X
	sta :STACKORIGIN+9
	lda DST+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy X
	lda adr.TMP,y
	sta :STACKORIGIN+10
	lda SCREEN
	add :STACKORIGIN+9
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; --- ForToDoEpilog
	inc X
	jne l_041C
l_042A

; ------------------------------------------------------------

DST	= DATAORIGIN+$09CC
SIZE	= DATAORIGIN+$09D0
X	= DATAORIGIN+$09D1

@VarData	= DST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; optimize OK (service.pas), line = 303

	lda #$00
	sta X
	sta X+1
	lda SIZE
	sub #$01
	sta @FORTMP_044E_0
	lda SIZE+1
	sbc #$00
	sta @FORTMP_044E_1

l_0451
; --- ForToDoCondition
	lda @FORTMP_044E_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_044E_0::#$00
	cmp X
@
	jcc l_045D

; optimize OK (service.pas), line = 304

	lda DST
	add X
	sta :STACKORIGIN+9
	lda DST+1
	adc X+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda SRC
	add X
	sta :STACKORIGIN+10
	lda SRC+1
	adc X+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda SCREEN
	add :STACKORIGIN+10
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	sta :STACKORIGIN+10
	lda SCREEN
	add :STACKORIGIN+9
	tay
	lda SCREEN+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; --- ForToDoEpilog
	inc X
	jne l_0451
	inc X+1
	jne l_0451
l_045D

; ------------------------------------------------------------

SRC	= DATAORIGIN+$09D3
DST	= DATAORIGIN+$09D7
SIZE	= DATAORIGIN+$09DB
X	= DATAORIGIN+$09DD

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBYTE					; PROCEDURE

; optimize OK (service.pas), line = 312

	lda SCREEN
	add SRC
	tay
	lda SCREEN+1
	adc SRC+1
	sta :bp+1
	lda (:bp),y
	sta :STACKORIGIN+10
	lda SCREEN
	add DST
	tay
	lda SCREEN+1
	adc DST+1
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; ------------------------------------------------------------

SRC	= DATAORIGIN+$09E1
DST	= DATAORIGIN+$09E5

@VarData	= SRC
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (service.pas), line = 320

	lda SCREEN
	add DST
	tay
	lda SCREEN+1
	adc DST+1
	sta :bp+1
	lda V
	sta (:bp),y

; ------------------------------------------------------------

DST	= DATAORIGIN+$09E9
V	= DATAORIGIN+$09ED

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (service.pas), line = 328

	lda SCREEN
	add SRC
	tay
	lda SCREEN+1
	adc SRC+1
	sta :bp+1
	lda (:bp),y
	sta RESULT
@exit

; ------------------------------------------------------------

SRC	= DATAORIGIN+$09EE
RESULT	= DATAORIGIN+$09F2

@VarData	= SRC
@VarDataSize	= 4

	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$09F3

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 395

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_04B4
	lda A
	sta RESULT
	lda A+1
	jmp l_04C3
l_04B4

; optimize OK (service.pas), line = 396

	lda B
	sta RESULT
	lda B+1
l_04C3
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$09F5
B	= DATAORIGIN+$09F7
RESULT	= DATAORIGIN+$09F9

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 402

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_04DE
	lda A
	sta RESULT
	lda A+1
	jmp l_04ED
l_04DE

; optimize OK (service.pas), line = 403

	lda B
	sta RESULT
	lda B+1
l_04ED
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$09FB
B	= DATAORIGIN+$09FD
RESULT	= DATAORIGIN+$09FF

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 412

	sta STATUS

; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$0A01

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 450

	lda #$00
	sta Y

l_0509
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_0517

; optimize OK (service.pas), line = 451

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	lda ROW
	add :STACKORIGIN+9
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda :eax
	sta (:bp2),y
	iny
	lda :eax+1
	sta (:bp2),y

; --- ForToDoEpilog
	inc Y
	jne l_0509
l_0517

; optimize OK (service.pas), line = 453

	lda #$C8
	sta Y

l_0532
; --- ForToDoCondition
	lda Y
	cmp #$FB
	jcs l_0540

; optimize OK (service.pas), line = 454

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	tya
	sta (:bp2),y
	iny
	lda #$FA
	sta (:bp2),y

; --- ForToDoEpilog
	inc Y
	jne l_0532
l_0540

; ------------------------------------------------------------

Y	= DATAORIGIN+$0A02

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 509

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 510

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 512

	sta :STACKORIGIN+STACKWIDTH+10
	lda YB
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 514

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_0583

; optimize OK (service.pas), line = 516

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 517

	lda adr.WALL,y
	cmp #$0A
	jeq l_05A3
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_05A3

; optimize OK (service.pas), line = 519

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 520

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 521

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 523

	lda #$00
	sta Y

l_05D3
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_05E1

; optimize OK (service.pas), line = 525

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 528

	lda YF
	add Y
	sta :STACKORIGIN+11
	lda YF+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XF
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda XF+1
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_05D3
l_05E1
l_0583

; optimize FAIL (0, service.pas), line = 532

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 533

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0628
	lda #$00
	sta SHINEREC.ACTIVE
l_0628

; ------------------------------------------------------------

XB	= DATAORIGIN+$0A03
YB	= DATAORIGIN+$0A05
FRAME	= DATAORIGIN+$0A07
XF	= DATAORIGIN+$0A09
YF	= DATAORIGIN+$0A0B
FR	= DATAORIGIN+$0A0D
OG	= DATAORIGIN+$0A0F
Y	= DATAORIGIN+$0A11
I	= DATAORIGIN+$0A12

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 542

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 543

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 550

	lda SHINEREC.ACTIVE
	jeq l_0648
	jsr UNSHINE_BLOCK
l_0648

; optimize OK (service.pas), line = 552

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 553

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 554

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 555

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 556

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0A13
YB	= DATAORIGIN+$0A14

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 562

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_0689
	jsr SHINE_BLOCK
l_0689

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_0692

; optimize OK (service.pas), line = 570

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 571

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 572

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_06A0

; optimize FAIL (0, service.pas), line = 577

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 578

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 581

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_06A0

; optimize OK (service.pas), line = 585

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.LAST
	sta :STACKORIGIN+10
	ldy #$00
	lda LETT.LAST+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp :STACKORIGIN+STACKWIDTH*3+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
@
	jeq l_0692

; optimize OK (service.pas), line = 587

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0A15
RN	= DATAORIGIN+$0A17
SUM	= DATAORIGIN+$0A19
LETTER	= DATAORIGIN+$0A1B

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 596

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 598

	lda #$00
	sta YL

l_06F0
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_06FE

; optimize OK (service.pas), line = 600

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FW+1
	lda :STACKORIGIN+9
	sta FW

; optimize OK (service.pas), line = 602

	lda LETT.Y
	add YL
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda LETT.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda LETTERS.OFS
	add FW
	sta :STACKORIGIN+11
	lda LETTERS.OFS+1
	adc FW+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda LETTERS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda LETTERS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add FL
	sta BLITZERO.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc FL+1
	sta BLITZERO.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITZERO.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITZERO.SRC+3
	lda #$10
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YL
	jne l_06F0
l_06FE

; ------------------------------------------------------------

FL	= DATAORIGIN+$0A1D
FW	= DATAORIGIN+$0A1F
YL	= DATAORIGIN+$0A21

@VarData	= FL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 614

	lda #$00
	sta YL

l_073C
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_074A

; optimize OK (service.pas), line = 616

	lda LETT.Y
	adc YL
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda LETT.X
	add (:bp2),y
	sta AD
	iny
	lda #$00
	adc (:bp2),y
	sta AD+1

; optimize OK (service.pas), line = 617

	cmp #$FA
	jcs l_076F

; optimize OK (service.pas), line = 620

	lda AD
	sta BLITROW.DST
	lda AD+1
	sta BLITROW.DST+1
	lda #$00
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add AD
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc AD+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_076F

; --- ForToDoEpilog
	inc YL
	jne l_073C
l_074A

; ------------------------------------------------------------

AD	= DATAORIGIN+$0A22
YL	= DATAORIGIN+$0A24

@VarData	= AD
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 628

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 629

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 635

	lda LETT.ACTIVE
	jeq l_079E
	jsr DISABLE_LETTER
l_079E

; optimize OK (service.pas), line = 637

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 638

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 639

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 640

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 641

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 642

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0A25
YL	= DATAORIGIN+$0A27
LETTER	= DATAORIGIN+$0A29

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 648

	lda LETT.ACTIVE
	jeq l_07CD

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 650

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 651

	inc LETT.Y

; optimize OK (service.pas), line = 652

	lda LETT.Y
	cmp #$C8
	jcc l_07E5
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 653
	jmp l_07F0
l_07E5

; optimize FAIL ('PUT_LETTER', service.pas), line = 655

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 656

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 657

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0807

; optimize OK (service.pas), line = 659

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 660

	inc LETT.FRAME
l_0807

; optimize OK (service.pas), line = 663

	lda LETT.FRAME
	cmp #$08
	jne l_0824
	lda #$00
	sta LETT.FRAME
l_0824

; optimize OK (service.pas), line = 665

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_087D
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_087D
	jeq l_087D
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_087D
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_087D
	jeq l_087D
@

; optimize OK (service.pas), line = 668

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 669

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 670

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_07F0

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 671

	jsr DISABLE_LETTER
l_087D

; optimize OK (service.pas), line = 675

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_089E
l_07CD

; optimize OK (service.pas), line = 677

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_08AF

; optimize OK (service.pas), line = 678

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_089E
l_08AF

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 688

	lda BTM.HEIGHT
	sta :ecx
	lda BTM.HEIGHT+1
	sta :ecx+1
	lda BTM.WIDTH
	sta :eax
	lda BTM.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta BLITROW.SIZE
	lda :eax+1
	sta BLITROW.SIZE+1
	lda BTM.OFS
	sta BLITROW.SRC
	lda BTM.OFS+1
	sta BLITROW.SRC+1
	lda BTM.OFS+2
	sta BLITROW.SRC+2
	lda BTM.OFS+3
	sta BLITROW.SRC+3
	lda #$00
	sta BLITROW.DST
	sta BLITROW.DST+1
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	jsr BLITROW

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0A2B	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0A2B
BTM.HEIGHT	= DATAORIGIN+$0A2D
BTM.OFS	= DATAORIGIN+$0A2F
X	= DATAORIGIN+$0A33
Y	= DATAORIGIN+$0A35
OFST	= DATAORIGIN+$0A37

@VarData	= BTM.WIDTH
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPALETTE					; PROCEDURE

; ------------------------------------------------------------

BTM	= DATAORIGIN+$0A39
BTM.WIDTH	= DATAORIGIN+$0000
BTM.HEIGHT	= DATAORIGIN+$0002
BTM.OFS	= DATAORIGIN+$0004

@VarData	= BTM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 783

	lda #$00
	sta YP

l_08DB
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_08E9

; optimize OK (service.pas), line = 785

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta ADR
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta ADR+1

; optimize OK (service.pas), line = 788

	lda ADR
	sta BLITZERO.DST
	lda ADR+1
	sta BLITZERO.DST+1
	lda #$00
	sta BLITZERO.DST+2
	sta BLITZERO.DST+3
	sta :STACKORIGIN+STACKWIDTH+12
	lda YP
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add YP
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda BALLDATA.OFS
	add :STACKORIGIN+12
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YP
	jne l_08DB
l_08E9

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A3D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$0A41
ADR	= DATAORIGIN+$0A42

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 802

	lda #$00
	sta YP

l_0928
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0936

; optimize OK (service.pas), line = 804

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta TEMP
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta TEMP+1

; optimize OK (service.pas), line = 806

	ora TEMP
	jeq l_096C
	lda TEMP+1
	cmp #$FA
	jcs l_096C

; optimize OK (service.pas), line = 809

	lda TEMP
	sta BLITROW.DST
	lda TEMP+1
	sta BLITROW.DST+1
	lda #$00
	sta BLITROW.DST+2
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add TEMP
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc TEMP+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$05
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_096C

; --- ForToDoEpilog
	inc YP
	jne l_0928
l_0936

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A44
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$0A48
TEMP	= DATAORIGIN+$0A49

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 845

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 856

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+9
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	bne @+
	dey
@
	sty :STACKORIGIN+10
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+12
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+12
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+11
	cmp :STACKORIGIN+STACKWIDTH+12
	bne @+
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+12
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_09BF

; optimize OK (service.pas), line = 858

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_09BF

; optimize OK (service.pas), line = 860

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 862

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 863

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A4B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 873

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 874

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize FAIL (1, service.pas), line = 876

	inx
	mva SPEED :STACKORIGIN,x
	mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
	lda SX
	sta :ecx
	sta :ztmp8
	lda SX+1
	sta :ecx+1
	sta :ztmp9
	lda SX
	sta :eax
	sta :ztmp10
	lda SX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda SY
	sta :ecx
	sta :ztmp8
	lda SY+1
	sta :ecx+1
	sta :ztmp9
	lda SY
	sta :eax
	sta :ztmp10
	lda SY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
	mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3
	dex

; optimize OK (service.pas), line = 881

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 882

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A4F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
SPEED	= DATAORIGIN+$0A53
SX	= DATAORIGIN+$0A55
SY	= DATAORIGIN+$0A57
VM	= DATAORIGIN+$0A59

@VarData	= BALL
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 889

	lda ANGLE
	sta :STACKORIGIN+9
	ldy #$00
	lda ANGLE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+2
	sty @REAL_MUL.A+3
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sta @REAL_MUL.A
	lda #$24
	sta @REAL_MUL.B
	lda #$03
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+1
	jsr @REAL_MUL
	lda #$00
	sta @REAL_DIV.B
	lda #$B4
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	lda :eax+2
	sta W+2
	lda :eax+3
	sta W+3

; optimize FAIL (1, service.pas), line = 891

	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.COS.@01018E000.X
	lda W+1
	sta SYSTEM.COS.@01018E000.X+1
	lda W+2
	sta SYSTEM.COS.@01018E000.X+2
	lda W+3
	sta SYSTEM.COS.@01018E000.X+3
	jsr SYSTEM.COS.@01018E000
	inx
	mva SYSTEM.COS.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y

; optimize FAIL (1, service.pas), line = 892

	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.SIN.@01018E000.X
	lda W+1
	sta SYSTEM.SIN.@01018E000.X+1
	lda W+2
	sta SYSTEM.SIN.@01018E000.X+2
	lda W+3
	sta SYSTEM.SIN.@01018E000.X+3
	jsr SYSTEM.SIN.@01018E000
	inx
	mva SYSTEM.SIN.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A5D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
ANGLE	= DATAORIGIN+$0A61
W	= DATAORIGIN+$0A63

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 900

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0A47
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0A63
l_0A47

; optimize OK (service.pas), line = 906

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta @REAL_DIV.A+1
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+2
	sty @REAL_DIV.B+3
	lda :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sta @REAL_DIV.B
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_DIV.A+2
	sty @REAL_DIV.A+3
	lda #$00
	sta @REAL_DIV.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+1
	jsr @REAL_DIV
	lda #$00
	sub :eax
	sta SYSTEM.ARCTAN.@01018E000.VALUE
	lda #$00
	sbc :eax+1
	sta SYSTEM.ARCTAN.@01018E000.VALUE+1
	lda #$00
	sbc :eax+2
	sta SYSTEM.ARCTAN.@01018E000.VALUE+2
	lda #$00
	sbc :eax+3
	sta SYSTEM.ARCTAN.@01018E000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018E000
	inx
	inx
	lda #$00
	sta @REAL_MUL.B
	lda #$B4
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	lda #$00
	sta @REAL_MUL.B+3
	lda SYSTEM.ARCTAN.@01018E000.RESULT
	sta @REAL_MUL.A
	lda SYSTEM.ARCTAN.@01018E000.RESULT+1
	sta @REAL_MUL.A+1
	lda SYSTEM.ARCTAN.@01018E000.RESULT+2
	sta @REAL_MUL.A+2
	lda SYSTEM.ARCTAN.@01018E000.RESULT+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$24
	sta @REAL_DIV.B
	lda #$03
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	lda #$00
	sta @REAL_DIV.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_DIV.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_DIV.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_DIV.A+3
	jsr @REAL_DIV
	dex
	jsr @REAL_ROUND
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	dex

; optimize OK (service.pas), line = 908

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0A8A
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0A8A

; optimize OK (service.pas), line = 910

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01
	sta W+1

; optimize OK (service.pas), line = 911

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda W
	sta @SMALLINT.MOD.A
	lda W+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta W
	lda @SMALLINT.MOD.RESULT+1
	sta W+1
l_0A63

; optimize OK (service.pas), line = 914

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A67
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
RESULT	= DATAORIGIN+$0A6B
W	= DATAORIGIN+$0A6D

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 922

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	ldy #BALL.X-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 928

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 933

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 934

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 936

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 938

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 939

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A6F
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1A
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 947

	lda BALL.SPEEDX
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDX+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDX
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda BALL.SPEEDY
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDY+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDY
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	lda SYSTEM.SQRT.@010185000.RESULT
	sta :FP2MAN0
	lda SYSTEM.SQRT.@010185000.RESULT+1
	sta :FP2MAN1
	lda SYSTEM.SQRT.@010185000.RESULT+2
	sta :FP2MAN2
	lda SYSTEM.SQRT.@010185000.RESULT+3
	sta :FP2MAN3
	jsr @FROUND
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	dex
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0A73	; [27] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0A73
BALL.Y	= DATAORIGIN+$0A75
BALL.FINEX	= DATAORIGIN+$0A77
BALL.FINEY	= DATAORIGIN+$0A79
BALL.OLDX	= DATAORIGIN+$0A7B
BALL.OLDY	= DATAORIGIN+$0A7D
BALL.SPEED	= DATAORIGIN+$0A7F
BALL.FINESPEED	= DATAORIGIN+$0A81
BALL.SPEEDX	= DATAORIGIN+$0A83
BALL.SPEEDY	= DATAORIGIN+$0A85
BALL.SBD	= DATAORIGIN+$0A87
BALL.BRWHIT	= DATAORIGIN+$0A89
BALL.INPLAY	= DATAORIGIN+$0A8A
BALL.LAUNCH	= DATAORIGIN+$0A8B
BALL.ONVAUS	= DATAORIGIN+$0A8C
BALL.STM	= DATAORIGIN+$0A8D
RESULT	= DATAORIGIN+$0A8E

@VarData	= BALL.X
@VarDataSize	= 27

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 961

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 962

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 964

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 965

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 967

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 968

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 973

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0B46

; optimize OK (service.pas), line = 975

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 976

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 977

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 978

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B46

; optimize OK (service.pas), line = 983

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0B7B

; optimize OK (service.pas), line = 985

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 986

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 987

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 988

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B7B

; optimize OK (service.pas), line = 993

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0BB0

; optimize OK (service.pas), line = 995

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 996

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 997

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 998

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0BB0

; optimize OK (service.pas), line = 1006

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0BFF

; optimize OK (service.pas), line = 1010

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0C2E
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jcs l_0C2E
@

; optimize OK (service.pas), line = 1013

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1015

	lda VAUS.LETTER
	cmp #$06
	jne l_0C52
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0C52

; optimize OK (service.pas), line = 1017

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1018

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1019

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sub VAUS.X
	ldy #BALL.ONVAUS-DATAORIGIN
	sta (:bp2),y
l_0C52

; optimize OK (service.pas), line = 1022

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1026

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0C82

; optimize OK (service.pas), line = 1029

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1033

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1041

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1046

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0C82

; optimize OK (service.pas), line = 1052

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0CC3
	jeq l_0CC3

; optimize OK (service.pas), line = 1054

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1055

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1056

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1057

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0CC3
l_0C2E
l_0BFF

; optimize OK (service.pas), line = 1069

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0D12

; optimize OK (service.pas), line = 1071

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1073

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0D12

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0A90
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0A94
Y	= DATAORIGIN+$0A96
ANGLE	= DATAORIGIN+$0A98

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1080

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1081

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1082

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1087

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1088

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1090

	lda #$FF
	sta VAUS.OLDX
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1091

	sta VAUS.OLDY
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1092

	lda #$00
	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1096

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1100

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1101

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1102

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1103

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1110

	lda #$D8
	sub VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda #$14
	sta MOUSE_X_LIMIT.MN
	lda #$00
	sta MOUSE_X_LIMIT.MN+1
	lda :STACKORIGIN+9
	sta MOUSE_X_LIMIT.MX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MOUSE_X_LIMIT.MX+1
	jsr MOUSE_X_LIMIT

; optimize OK (service.pas), line = 1111

	lda #$BE
	sta MOUSEMOVE.X
	lda #$00
	sta MOUSEMOVE.X+1
	lda #$B8
	sta MOUSEMOVE.Y
	lda #$00
	sta MOUSEMOVE.Y+1
	jsr MOUSEMOVE

; optimize OK (service.pas), line = 1112

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1113

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1127

	lda VAUS.OLDY
	sta Y
	add VAUS.HEIGHT
	sta @FORTMP_0D92_0

l_0D95
; --- ForToDoCondition
	lda @FORTMP_0D92_0::#$00
	cmp Y
	jcc l_0DA3

; optimize OK (service.pas), line = 1130

	lda VAUS.OLDX
	sta :STACKORIGIN+10
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda VAUS.OLDX
	sta :STACKORIGIN+12
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda PLAYSCREEN.OFS
	add :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda VAUS.OLDLEN
	sta BLITROW.SIZE
	lda VAUS.OLDLEN+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_0D95
l_0DA3

; optimize OK (service.pas), line = 1132

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; ------------------------------------------------------------

Y	= DATAORIGIN+$0A9A

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1142

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1144

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0DE7

; optimize FAIL (0, service.pas), line = 1146

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1147

	lda #$00
	sta VAUS.IFLASH
l_0DE7

; optimize OK (service.pas), line = 1150

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0E04
	lda #$00
	sta VAUS.FLASH
l_0E04

; optimize OK (service.pas), line = 1160

	lda #$00
	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_0E17_0

l_0E1A
; --- ForToDoCondition
	lda @FORTMP_0E17_0::#$00
	cmp Y
	jcc l_0E28

; optimize OK (service.pas), line = 1164

	lda VAUS.WIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CNT+1
	lda :eax
	sta CNT

; optimize OK (service.pas), line = 1166

	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda VAUS.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	add CNT
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	adc CNT+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; optimize OK (service.pas), line = 1168

	lda Y
	cmp #$02
	jcc l_0E77
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_0E77

; optimize OK (service.pas), line = 1171

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda VAUS.X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (service.pas), line = 1174

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add VAUS.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_0E77

; --- ForToDoEpilog
	inc Y
	jne l_0E1A
l_0E28

; ------------------------------------------------------------

Y	= DATAORIGIN+$0A9C
CNT	= DATAORIGIN+$0A9D

@VarData	= Y
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1185

	ldy #1
	lda VAUS.OLDX+1
	cmp #$FF
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0EF0

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1186

	jsr REMOVE_VAUS
l_0EF0

; optimize OK (service.pas), line = 1188

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1189

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1196

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1197

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1199

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0AA0
Y	= DATAORIGIN+$0AA2

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1213

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1214

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1216

	lda #$00
	sta Y

l_0F48
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_0F56

; optimize OK (service.pas), line = 1218

	lda YS
	adc Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (service.pas), line = 1226

	lda #$00
	sta X

l_0F72
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_0F80

; optimize OK (service.pas), line = 1227

	adc XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0F97

; optimize OK (service.pas), line = 1233

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add XS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	sta :STACKORIGIN+10
	lda #$00
	adc YS+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1237

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda MODX
	add :STACKORIGIN+10
	tay
	lda MODX+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda PATTERN.OFS
	add (:bp),y
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YH
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YH+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex

; optimize OK (service.pas), line = 1241

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	sta :STACKORIGIN+11
	lda #$00
	adc YS+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1246

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add XS
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	sta :STACKORIGIN+11
	lda #$00
	adc YS+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_0F97

; --- ForToDoEpilog
	inc X
	jne l_0F72
l_0F80

; --- ForToDoEpilog
	inc Y
	jne l_0F48
l_0F56

; optimize OK (service.pas), line = 1256

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1031_0

l_1034
; --- ForToDoCondition
	lda @FORTMP_1031_0::#$00
	cmp Y
	jcc l_1042

; optimize OK (service.pas), line = 1257

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1052_0

l_1055
; --- ForToDoCondition
	lda @FORTMP_1052_0::#$00
	cmp X
	jcc l_1063

; optimize OK (service.pas), line = 1273

	lda X
	cmp #$D8
	jcs l_1075

; optimize OK (service.pas), line = 1277

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	ora #$80
	sta CL

; optimize OK (service.pas), line = 1281

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1286

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1075

; --- ForToDoEpilog
	inc X
	jne l_1055
l_1063

; --- ForToDoEpilog
	inc Y
	jne l_1034
l_1042

; ------------------------------------------------------------

XA	= DATAORIGIN+$0AA4
YA	= DATAORIGIN+$0AA5
X	= DATAORIGIN+$0AA6
Y	= DATAORIGIN+$0AA7
XS	= DATAORIGIN+$0AA8
YS	= DATAORIGIN+$0AAA
YH	= DATAORIGIN+$0AAC
CL	= DATAORIGIN+$0AAE
SHADOW	= DATAORIGIN+$0AAF

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1301

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1302

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1304

	lda #$00
	sta Y

l_10E8
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_10F6

; optimize OK (service.pas), line = 1305

	lda #$00
	sta X

l_10FF
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_110D

; optimize OK (service.pas), line = 1310

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS
	add Y
	sta :STACKORIGIN+10
	lda YS+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1312

	lda Y
	cmp #$07
	jcs l_114C
	lda X
	cmp #$0F
	jcs l_114C

; optimize OK (service.pas), line = 1317

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1320

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1323

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	jmp l_11AB
l_114C

; optimize OK (service.pas), line = 1331

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1334

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
l_11AB
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_10FF
l_110D

; --- ForToDoEpilog
	inc Y
	jne l_10E8
l_10F6

; optimize OK (service.pas), line = 1339

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_11FF_0

l_1202
; --- ForToDoCondition
	lda @FORTMP_11FF_0::#$00
	cmp Y
	jcc l_1210

; optimize OK (service.pas), line = 1340

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1220_0

l_1223
; --- ForToDoCondition
	lda @FORTMP_1220_0::#$00
	cmp X
	jcc l_1231

; optimize OK (service.pas), line = 1341

	lda X
	cmp #$D8
	jcs l_1243

; optimize OK (service.pas), line = 1348

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$7F
	sta CL

; optimize OK (service.pas), line = 1352

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda X
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda #$00
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1356

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1243

; --- ForToDoEpilog
	inc X
	jne l_1223
l_1231

; --- ForToDoEpilog
	inc Y
	jne l_1202
l_1210

; optimize OK (service.pas), line = 1359

	lda BLOCK
	cmp #$09
	jcc l_129F

; optimize OK (service.pas), line = 1361

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1362

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_12BA

; optimize OK (service.pas), line = 1364

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1365

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_12D9
l_12BA

; optimize OK (service.pas), line = 1371

	lda BLOCK
	cmp #$0A
	jne l_12EB
	lda #$C9
	sta CL2
l_12D9
l_12EB

; optimize OK (service.pas), line = 1375

	lda #$00
	sta Y

l_12FB
; --- ForToDoCondition
	lda Y
	cmp #$07
	jcs l_1309

; optimize OK (service.pas), line = 1381

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	sta :STACKORIGIN+10
	lda #$00
	adc YS+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1383

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1387

	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XS
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda XS+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1391

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	sta :STACKORIGIN+11
	lda YS+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_12FB
l_1309

; optimize OK (service.pas), line = 1395

	lda #$00
	sta X

l_1370
; --- ForToDoCondition
	lda X
	cmp #$0F
	jcs l_137E

; optimize OK (service.pas), line = 1399

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1401

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1404

	lda XS
	add X
	sta :STACKORIGIN+10
	lda XS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1407

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YS
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_1370
l_137E
l_129F

; ------------------------------------------------------------

XA	= DATAORIGIN+$0AB2
YA	= DATAORIGIN+$0AB3
BLOCK	= DATAORIGIN+$0AB4
X	= DATAORIGIN+$0AB5
Y	= DATAORIGIN+$0AB6
XS	= DATAORIGIN+$0AB7
YS	= DATAORIGIN+$0AB9
CL	= DATAORIGIN+$0ABB
CL2	= DATAORIGIN+$0ABC
SHADOW	= DATAORIGIN+$0ABD

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1417

	lda #$00
	sta Y

l_13EB
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13F9

; optimize OK (service.pas), line = 1418

	lda #$00
	sta X

l_1402
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1410

; optimize OK (service.pas), line = 1419

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_142F
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_142F

; --- ForToDoEpilog
	inc X
	jne l_1402
l_1410

; --- ForToDoEpilog
	inc Y
	jne l_13EB
l_13F9

; ------------------------------------------------------------

X	= DATAORIGIN+$0AC0
Y	= DATAORIGIN+$0AC1

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1428

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1429

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1432

	lda #$00
	sta Y

l_146D
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_147B

; optimize OK (service.pas), line = 1433

	lda #$00
	sta X

l_1484
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1492

; optimize OK (service.pas), line = 1436

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_14CA
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_14CA
	inc REMAIN_BLK
l_14CA

; --- ForToDoEpilog
	inc X
	jne l_1484
l_1492

; --- ForToDoEpilog
	inc Y
	jne l_146D
l_147B

; optimize OK (service.pas), line = 1438

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1440

	sta @CASETMP_0007
	cmp #$00
	jne l_14F4
@

; optimize OK (service.pas), line = 1441

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0007
l_14F4
	cmp #$01
	jne l_14FD

; optimize OK (service.pas), line = 1442

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0007
l_14FD
	cmp #$02
	jne l_1506

; optimize OK (service.pas), line = 1443

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0007
l_1506
	cmp #$03
	jne l_150F

; optimize OK (service.pas), line = 1444

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0007
l_150F
	cmp #$04
	jne l_1518

; optimize OK (service.pas), line = 1445

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_1518
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0AC2
Y	= DATAORIGIN+$0AC3
WL	= DATAORIGIN+$0AC4
@CASETMP_0007	= DATAORIGIN+$0AC5

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1484

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1485

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1486

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1487

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1489

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1491

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1492

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1493

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1494

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1496

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1497

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1498

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1499

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1501

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1502

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1503

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1504

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1511

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_15A1

; optimize OK (service.pas), line = 1512

	lda #$01
	jsr FATAL_ERROR
l_15A1

; optimize OK (service.pas), line = 1515

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_15C4x
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15C4
l_15C4x

; optimize OK (service.pas), line = 1517

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_15D7

; optimize OK (service.pas), line = 1519

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_15E4
l_15E5

; optimize OK (service.pas), line = 1523

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1524

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1526

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1528

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_161C

; optimize OK (service.pas), line = 1530

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1531

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_161C

; optimize OK (service.pas), line = 1534

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_163B

; optimize OK (service.pas), line = 1536

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1537

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_163B
l_15E4

; optimize OK (service.pas), line = 1521

	lda YN
	and #$07
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	ora :STACKORIGIN+9
	bne @+
	dey
@
	sty :STACKORIGIN+9
	lda YN
	ldy #1
	and #$07
	cmp #$07
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	jne l_15E5
l_15D7

; optimize OK (service.pas), line = 1543

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_167A

; optimize OK (service.pas), line = 1545

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1687
l_1688

; optimize OK (service.pas), line = 1549

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1550

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1552

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1554

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_16BF

; optimize OK (service.pas), line = 1556

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1557

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_16BF

; optimize OK (service.pas), line = 1560

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_16DE

; optimize OK (service.pas), line = 1562

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1563

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_16DE
l_1687

; optimize OK (service.pas), line = 1547

	lda XJ
	and #$0F
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	ora :STACKORIGIN+9
	bne @+
	dey
@
	sty :STACKORIGIN+9
	lda XJ
	ldy #1
	and #$0F
	cmp #$0F
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	jne l_1688
l_167A

; optimize OK (service.pas), line = 1574

	lda COLLISION
	cmp #$01
	jne l_171D
; optimize OK (service.pas), line = 1576
; optimize OK (service.pas), line = 1577
	jmp l_1731
l_171D

; optimize OK (service.pas), line = 1579

	lda COLLISION
	cmp #$02
	jne l_1743

; optimize OK (service.pas), line = 1581

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1582

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_1757
l_1743

; optimize OK (service.pas), line = 1584

	lda COLLISION
	cmp #$03
	jne l_1769

; optimize OK (service.pas), line = 1586

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1587

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1731

; optimize OK (service.pas), line = 1588

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1589

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_1757
	sta (:bp2),y
l_1769
	jmp l_1789
l_15C4

; optimize OK (service.pas), line = 1594

	lda #$02
	jsr FATAL_ERROR
l_1789

; optimize OK (service.pas), line = 1597

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1598

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1599

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1600

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1603

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1604

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1611

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0AC6
Y1	= DATAORIGIN+$0AC8
X2	= DATAORIGIN+$0ACA
Y2	= DATAORIGIN+$0ACC
RESULT	= DATAORIGIN+$0ACE
X	= DATAORIGIN+$0ACF
Y	= DATAORIGIN+$0AD1
XK	= DATAORIGIN+$0AD3
YK	= DATAORIGIN+$0AD5
XJ	= DATAORIGIN+$0AD7
YJ	= DATAORIGIN+$0AD9
XH	= DATAORIGIN+$0ADB
YH	= DATAORIGIN+$0ADD
XN	= DATAORIGIN+$0ADF
YN	= DATAORIGIN+$0AE1
XP1	= DATAORIGIN+$0AE3
YP1	= DATAORIGIN+$0AE5
XP2	= DATAORIGIN+$0AE7
YP2	= DATAORIGIN+$0AE9
XP	= DATAORIGIN+$0AEB
YP	= DATAORIGIN+$0AED
COLLISION	= DATAORIGIN+$0AEF

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1622

	lda XB+1
	jmi l_17DD
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_17DD
	lda YB+1
	jmi l_17DD
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_17DD

; optimize OK (service.pas), line = 1625

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda YB
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1627

	tay
	lda adr.WALL,y
	jeq l_1801

; optimize OK (service.pas), line = 1629

	cmp #$0A
	jcs l_1817

; optimize OK (service.pas), line = 1631

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1632

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1636

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1638

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1640

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1641

	lda YB
	sta :STACKORIGIN+9
	ldy #$00
	lda YB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1642

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1644

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1645

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1646

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1647

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_186B
l_1817

; optimize OK (service.pas), line = 1652

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1884

; optimize OK (service.pas), line = 1654

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1655

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1657

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1658

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_189E
l_1884

; optimize OK (service.pas), line = 1662

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1663

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1665

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_189E
l_186B
l_1801
l_17DD

; ------------------------------------------------------------

XB	= DATAORIGIN+$0AF0
YB	= DATAORIGIN+$0AF2
BALL	= DATAORIGIN+$0AF4
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
I	= DATAORIGIN+$0AF8

@VarData	= XB
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1676

	lda XB+1
	jmi l_18E1
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_18E1
	lda YB+1
	jmi l_18E1
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_18E1

; optimize OK (service.pas), line = 1679

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda YB
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1681

	tay
	lda adr.WALL,y
	jeq l_1905

; optimize OK (service.pas), line = 1683

	cmp #$0A
	jcs l_191B

; optimize OK (service.pas), line = 1685

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1686

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1687

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1688

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1689

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1943
l_191B

; optimize OK (service.pas), line = 1694

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_195C

; optimize OK (service.pas), line = 1696

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1697

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1698

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1972
l_195C

; optimize OK (service.pas), line = 1702

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1703

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1943
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1972
l_1905
l_18E1

; ------------------------------------------------------------

XB	= DATAORIGIN+$0AF9
YB	= DATAORIGIN+$0AFB
I	= DATAORIGIN+$0AFD

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1735

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 1737

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 1738

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 1741

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 1742

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 1744

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XB
	lda :STACKORIGIN+STACKWIDTH+9
	sta XB+1

; optimize OK (service.pas), line = 1745

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sta YB+1

; optimize OK (service.pas), line = 1749

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_19D9

; optimize OK (service.pas), line = 1751

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 1757

	cmp #$03
	jne l_19F4

; optimize OK (service.pas), line = 1759

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 1760

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 1762

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 1763

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 1765

	lda LX
	sta :ecx
	sta :eax
	lda LX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LY
	sta :ecx
	sta :eax
	lda LY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F1
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F1+1

; optimize OK (service.pas), line = 1766

	lda MX
	sta :ecx
	sta :eax
	lda MX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MY
	sta :ecx
	sta :eax
	lda MY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (service.pas), line = 1768

	lda F1
	cmp F2
	lda F1+1
	sbc F2+1
	svc
	eor #$80
	jpl l_1A67

; optimize OK (service.pas), line = 1774

	lda OX
	sta :STACKORIGIN+10
	ldy #$00
	lda OX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda :STACKORIGIN+10
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 1775

	lda OY
	sta :STACKORIGIN+9
	ldy #$00
	lda OY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (service.pas), line = 1778

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1AA3

; optimize OK (service.pas), line = 1780

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 1781

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
	jmp l_1ACB
l_1AA3

; optimize OK (service.pas), line = 1785

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 1786

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1ACB
	jmp l_1ADE
l_1A67

; optimize OK (service.pas), line = 1796

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 1797

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (service.pas), line = 1799

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1B19

; optimize OK (service.pas), line = 1801

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 1802

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 1804

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 1805

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
l_1B19
l_1ADE
l_19F4

; optimize OK (service.pas), line = 1811

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1812

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1816

	lda XB
	sta SHOOT_BLOCK.XB
	lda XB+1
	sta SHOOT_BLOCK.XB+1
	lda YB
	sta SHOOT_BLOCK.YB
	lda YB+1
	sta SHOOT_BLOCK.YB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 1818

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1819

	lda NY
	and #$07
	sta Y
	lda #$00
	sta Y+1

; optimize OK (service.pas), line = 1831

	lda X+1
	ora X
	jeq l_1BA7
	lda X+1
	bne @+
	lda X
	cmp #$07
@
	jeq l_1BA7
	lda Y+1
	ora Y
	jeq l_1BA7
@
	lda Y+1
	bne @+
	lda Y
	cmp #$07
@
	jeq l_1BA7

; optimize OK (service.pas), line = 1832

	lda #$03
	jsr FATAL_ERROR
l_1BA7

; optimize OK (service.pas), line = 1847

	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1BCE
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1BCE

; optimize OK (service.pas), line = 1849

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1850

	lda #$01
	sta EMERGENCY
l_1BCE

; optimize OK (service.pas), line = 1854

	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1BFF
	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1BFF

; optimize OK (service.pas), line = 1856

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1857

	lda #$03
	sta EMERGENCY
l_1BFF

; optimize OK (service.pas), line = 1861

	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1C30
	lda X
	sta :STACKORIGIN+12
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1C30

; optimize OK (service.pas), line = 1863

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1864

	lda #$02
	sta EMERGENCY
l_1C30

; optimize OK (service.pas), line = 1868

	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1C61
	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1C61

; optimize OK (service.pas), line = 1870

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1871

	lda #$04
	sta EMERGENCY
l_1C61

; optimize OK (service.pas), line = 1875

	lda X+1
	cmp Y+1
	bne @+
	lda X
	cmp Y
@
	jeq l_1C92x
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jne l_1C92
l_1C92x

; optimize OK (service.pas), line = 1877

	lda #$00
	sta DEFLECT
	sta DEFLECT+1

; optimize OK (service.pas), line = 1878

	sta TOUCH

; optimize OK (service.pas), line = 1886

	lda X
	cmp #$05
	lda X+1
	sbc #$00
	svc
	eor #$80
	jmi l_1CAC
	lda TOUCH
	ora #$01
	sta TOUCH
l_1CAC

; optimize OK (service.pas), line = 1887

	lda Y
	cmp #$05
	lda Y+1
	sbc #$00
	svc
	eor #$80
	jmi l_1CCA
	lda TOUCH
	ora #$02
	sta TOUCH
l_1CCA

; optimize OK (service.pas), line = 1897

	lda #$FF
	sta LX
	sta LX+1

l_1CE0
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1CEC

; optimize OK (service.pas), line = 1898

	lda #$FF
	sta LY
	sta LY+1

l_1CF5
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D01

; optimize FAIL (1, service.pas), line = 1900

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda XB+1
	adc LX+1
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 1901

	lda YB
	add LY
	sta MY
	lda YB+1
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 1905

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda LX
	sta :STACKORIGIN+10
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	jne l_1D56x
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	jmi l_1D56x
	lda XB
	sta :STACKORIGIN+10
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda LX
	sta :STACKORIGIN+11
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+11
	sty :STACKORIGIN+STACKWIDTH*2+11
	sty :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+10
	cmp #$0C
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	jmp *+6
@	jmp l_1D56x
	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda MY
	sta :eax
	sta :ztmp10
	lda MY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+11
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda MX
	sta :STACKORIGIN+10
	ldy #$00
	lda MX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.WALL,y
	jeq l_1D56
@
l_1D56x

; optimize OK (service.pas), line = 1908

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$01
	sta adr.ADJW,y
	lda #$00
	jmp l_1D77
l_1D56

; optimize OK (service.pas), line = 1910

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
	sta adr.ADJW,y
l_1D77
	sta adr.ADJW+1,y

; --- ForToDoEpilog
	inc LY
	jne l_1CF5
	inc LY+1
	jmp l_1CF5
l_1D01

; --- ForToDoEpilog
	inc LX
	jne l_1CE0
	inc LX+1
	jmp l_1CE0
l_1CEC

; optimize OK (service.pas), line = 1929

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$06
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$06
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0C
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0C
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0E
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0E
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$10
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$10
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0A
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0A
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$04
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$04
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$02
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$02
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta AROUND
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta AROUND+1

; optimize OK (service.pas), line = 1960

	lda TOUCH
	jne l_1E16

; optimize OK (service.pas), line = 1962

	lda AROUND
	and #$83
	jne l_1E2C
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E2C

; optimize OK (service.pas), line = 1963

	lda AROUND
	and #$83
	cmp #$01
	jne l_1E48
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E48

; optimize OK (service.pas), line = 1964

	lda AROUND
	and #$83
	cmp #$02
	jne l_1E64
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E64

; optimize OK (service.pas), line = 1965

	lda AROUND
	and #$83
	cmp #$03
	jne l_1E80
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E80

; optimize OK (service.pas), line = 1966

	lda AROUND
	and #$83
	cmp #$80
	jne l_1E9C
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1E9C

; optimize OK (service.pas), line = 1967

	lda AROUND
	and #$83
	cmp #$81
	jne l_1EB8
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1EB8

; optimize OK (service.pas), line = 1968

	lda AROUND
	and #$83
	cmp #$82
	jne l_1ED4
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1ED4

; optimize OK (service.pas), line = 1970

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 1971

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1E16

; optimize OK (service.pas), line = 1976

	lda TOUCH
	cmp #$01
	jne l_1F02

; optimize OK (service.pas), line = 1978

	lda AROUND
	and #$0E
	jne l_1F18
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F18

; optimize OK (service.pas), line = 1979

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1F34
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F34

; optimize OK (service.pas), line = 1980

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1F50
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F50

; optimize OK (service.pas), line = 1981

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1F6C
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F6C

; optimize OK (service.pas), line = 1982

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1F88
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1F88

; optimize OK (service.pas), line = 1983

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1FA4
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1FA4

; optimize OK (service.pas), line = 1984

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1FC0
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_1FC0

; optimize OK (service.pas), line = 1986

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 1987

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1F02

; optimize OK (service.pas), line = 1990

	lda TOUCH
	cmp #$02
	jne l_1FEE

; optimize OK (service.pas), line = 1992

	lda AROUND
	and #$E0
	jne l_2004
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2004

; optimize OK (service.pas), line = 1993

	lda AROUND
	and #$E0
	cmp #$20
	jne l_2020
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2020

; optimize OK (service.pas), line = 1994

	lda AROUND
	and #$E0
	cmp #$40
	jne l_203C
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_203C

; optimize OK (service.pas), line = 1995

	lda AROUND
	and #$E0
	cmp #$60
	jne l_2058
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2058

; optimize OK (service.pas), line = 1996

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2074
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2074

; optimize OK (service.pas), line = 1997

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2090
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2090

; optimize OK (service.pas), line = 1998

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_20AC
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20AC

; optimize OK (service.pas), line = 2000

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2001

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1FEE

; optimize OK (service.pas), line = 2004

	lda TOUCH
	cmp #$03
	jne l_20DA

; optimize OK (service.pas), line = 2006

	lda AROUND
	and #$38
	jne l_20F0
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20F0

; optimize OK (service.pas), line = 2007

	lda AROUND
	and #$38
	cmp #$08
	jne l_210C
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_210C

; optimize OK (service.pas), line = 2008

	lda AROUND
	and #$38
	cmp #$10
	jne l_2128
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2128

; optimize OK (service.pas), line = 2009

	lda AROUND
	and #$38
	cmp #$18
	jne l_2144
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2144

; optimize OK (service.pas), line = 2010

	lda AROUND
	and #$38
	cmp #$20
	jne l_2160
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2160

; optimize OK (service.pas), line = 2011

	lda AROUND
	and #$38
	cmp #$28
	jne l_217C
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_217C

; optimize OK (service.pas), line = 2012

	lda AROUND
	and #$38
	cmp #$30
	jne l_2198
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2198

; optimize OK (service.pas), line = 2014

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2015

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_20DA

; optimize OK (service.pas), line = 2021

	lda DEFLECT
	sta :STACKORIGIN+9
	ldy #$00
	lda DEFLECT+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta MYX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MYX+1

; optimize OK (service.pas), line = 2022

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2024

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_21D7
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_21D7

; optimize OK (service.pas), line = 2025

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_21F4
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_21F4

; optimize OK (service.pas), line = 2026

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_220E
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_220E

; optimize OK (service.pas), line = 2028

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_222A
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_222A

; optimize OK (service.pas), line = 2029

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2247
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2247

; optimize OK (service.pas), line = 2030

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_2261
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_2261
l_1C92
l_19D9

; optimize OK (service.pas), line = 2040

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_2282

; optimize OK (service.pas), line = 2043

	lda EMERGENCY
	cmp #$FF
	jne l_2295
	lda #$04
	jsr FATAL_ERROR
l_2295

; optimize OK (service.pas), line = 2045

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX
	lda #$00
	sta MIMAX+1

; optimize OK (service.pas), line = 2071

	lda EMERGENCY
	sta @CASETMP_0008
	cmp #$05
	jne l_22AE
@

; optimize OK (service.pas), line = 2074

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_22C4
	lda MIMAX
	and #$0F
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_22C4

; optimize OK (service.pas), line = 2075

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_22EA
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_22EA
	jmp a_0008
l_22AE
	cmp #$06
	jne l_2301

; optimize OK (service.pas), line = 2079

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_2317
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2317

; optimize OK (service.pas), line = 2080

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_233D
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_233D
	jmp a_0008
l_2301
	cmp #$07
	jne l_2354

; optimize OK (service.pas), line = 2084

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_236A
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_236A

; optimize OK (service.pas), line = 2085

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_2390
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2390
	jmp a_0008
l_2354
	cmp #$08
	jne l_23A7

; optimize OK (service.pas), line = 2089

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_23BD
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_23BD

; optimize OK (service.pas), line = 2090

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_23E3
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_23E3
l_23A7
a_0008

; --- RepeatUntilProlog
l_23FA

; optimize OK (service.pas), line = 2097

	lda MIMAX
	sta :STACKORIGIN+10
	lda MIMAX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda :STACKORIGIN+10
	sta :eax
	lda :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta LX
	lda :eax+1
	sta LX+1

; optimize OK (service.pas), line = 2098

	lda MIMAX
	and #$0F
	sta :eax
	lda #$00
	sta :eax+1
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta MX
	lda :eax+1
	sta MX+1

; optimize OK (service.pas), line = 2099

	lda MX
	sub LX
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc LX+1
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	add LX
	sta ANGLE
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2102

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_23FA
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_23FA

; optimize OK (service.pas), line = 2106

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda @SMALLINT.MOD.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2107

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2109

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_2282

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0AFE
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0B02
Y	= DATAORIGIN+$0B04
XB	= DATAORIGIN+$0B06
YB	= DATAORIGIN+$0B08
OX	= DATAORIGIN+$0B0A
OY	= DATAORIGIN+$0B0C
LX	= DATAORIGIN+$0B0E
LY	= DATAORIGIN+$0B10
MX	= DATAORIGIN+$0B12
MY	= DATAORIGIN+$0B14
NX	= DATAORIGIN+$0B16
NY	= DATAORIGIN+$0B18
F1	= DATAORIGIN+$0B1A
F2	= DATAORIGIN+$0B1C
DEFLECT	= DATAORIGIN+$0B1E
AROUND	= DATAORIGIN+$0B20
MIMAX	= DATAORIGIN+$0B22
ANGLE	= DATAORIGIN+$0B24
MYX	= DATAORIGIN+$0B26
MYY	= DATAORIGIN+$0B28
EMERGENCY	= DATAORIGIN+$0B2A
COLLISION	= DATAORIGIN+$0B2B
TOUCH	= DATAORIGIN+$0B2C
adr.ADJW	= [DATAORIGIN+$0B2D] .array [3] [3] .word
.var ADJW	= adr.ADJW .word
@CASETMP_0008	= DATAORIGIN+$0B3F

@VarData	= BALL
@VarDataSize	= 52

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2124

	lda #$00
	sta K
	sta K+1

l_2464
; --- ForToDoCondition
	lda K+1
	cmp #$01
	bcc @+
	jne l_2470
	lda K
	cmp #$3F
	bcc @+
	jne l_2470
@

; optimize OK (service.pas), line = 2125

	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda K
	sta @WORD.MOD.A
	lda K+1
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda MODX
	add K
	tay
	lda MODX+1
	adc K+1
	sta :bp+1
	lda @WORD.MOD.RESULT
	sta (:bp),y

; --- ForToDoEpilog
	inc K
	jne l_2464
	inc K+1
	jne l_2464
l_2470

; optimize OK (service.pas), line = 2129

	lda #$00
	sta Y

l_248A
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_2498

; optimize OK (service.pas), line = 2130

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_248A
l_2498

; optimize OK (service.pas), line = 2135

	lda #$0A
	sta Y

l_24B4
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_24C2

; optimize OK (service.pas), line = 2137

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2138

	lda #$00
	sta K
	sta K+1

; optimize OK (service.pas), line = 2139

	lda #$09
	sta X

l_24DD
; --- ForToDoCondition
	lda X
	cmp #$D8
	jcs l_24EB

; optimize OK (service.pas), line = 2142

	mwy PATT :bp2
	ldy #PATT.OFS-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	mwy MODX :bp2
	ldy X
	lda :STACKORIGIN+9
	add (:bp2),y
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YB
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YB+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL

; optimize OK (service.pas), line = 2144

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2149

	lda Y
	cmp #$10
	jcc l_2520x
	lda X
	cmp #$12
	jcs l_2520
l_2520x
	lda #$00
	sta SHADOW
l_2520

; optimize OK (service.pas), line = 2154

	lda CL
	and #$7F
	ora SHADOW
	ldy K
	sta adr.TMP,y

; optimize FAIL (0, service.pas), line = 2155

	inc K
	sne
	inc K+1

; --- ForToDoEpilog
	inc X
	jne l_24DD
l_24EB

; optimize OK (service.pas), line = 2158

	lda PLAYSCREEN.OFS
	add #$09
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	lda :STACKORIGIN+10
	add :eax
	sta BLITTMP.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta BLITTMP.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :eax+2
	sta BLITTMP.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :eax+3
	sta BLITTMP.DST+3
	lda K
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_24B4
l_24C2

; ------------------------------------------------------------

PATT	= DATAORIGIN+$0B40
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$0B44
K	= DATAORIGIN+$0B46
X	= DATAORIGIN+$0B48
Y	= DATAORIGIN+$0B49
CL	= DATAORIGIN+$0B4A
SHADOW	= DATAORIGIN+$0B4B

@VarData	= PATT
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0B4C
Y	= DATAORIGIN+$0B4E

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2273

	lda #$81
	sta Y

l_256E
; --- ForToDoCondition
	lda Y
	cmp #$A1
	jcs l_257C

; optimize OK (service.pas), line = 2276

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$48
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$48
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$58
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_256E
l_257C

; ------------------------------------------------------------

Y	= DATAORIGIN+$0B50

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0B51
Y	= DATAORIGIN+$0B53
adr.SC	= [DATAORIGIN+$0B55] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2320

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2321

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2323

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2325

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2326

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; optimize OK (service.pas), line = 2329

	lda #$00
	sta W

l_25CC
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_25DA

; optimize OK (service.pas), line = 2331

	lda #$00
	sta Y

l_25E3
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_25F1

; optimize OK (service.pas), line = 2333

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2334

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_2616_0

l_2619
; --- ForToDoCondition
	lda @FORTMP_2616_0::#$00
	cmp X
	jcc l_2627

; optimize FAIL (1, service.pas), line = 2338

	inx
	ldy #1
	lda W
	cmp #$06
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+9
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_264F

; optimize OK (service.pas), line = 2340

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add B
	sta :STACKORIGIN+11
	lda #$00
	adc B+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	dey
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	jmp l_268C
l_264F

; optimize OK (service.pas), line = 2343

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+10
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_268C
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_2619
l_2627

; --- ForToDoEpilog
	inc Y
	jne l_25E3
l_25F1

; optimize OK (service.pas), line = 2347

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_25CC
l_25DA

; optimize OK (service.pas), line = 2351

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2352

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2353

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$0B6A
A	= DATAORIGIN+$0B6C
B	= DATAORIGIN+$0B6E
W	= DATAORIGIN+$0B70
X	= DATAORIGIN+$0B71
Y	= DATAORIGIN+$0B72

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2364

	jsr NOSOUND

; optimize OK (service.pas), line = 2365

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2366

	lda #$B3
	sta B
	lda #$00
	sta B+1

; optimize OK (service.pas), line = 2368

	lda #$0B
	sta W

l_26E0
; --- ForToDoCondition
	lda #$00
	sta Y

l_26F7
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2705

; optimize OK (service.pas), line = 2372

	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2373

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_272A_0

l_272D
; --- ForToDoCondition
	lda @FORTMP_272A_0::#$00
	cmp X
	jcc l_273B

; optimize OK (service.pas), line = 2375

	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	jne l_2757

; optimize OK (service.pas), line = 2377

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add B
	sta :STACKORIGIN+11
	lda #$00
	adc B+1
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	dey
	lda :STACKORIGIN+10
	add (:bp2),y
	sta BLITBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	jmp l_2794
l_2757

; optimize OK (service.pas), line = 2380

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$00
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	sta :STACKORIGIN+10
	lda #$00
	adc B+1
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda ROW
	add :STACKORIGIN+10
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta BLITBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+10
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_2794
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_272D
l_273B

; --- ForToDoEpilog
	inc Y
	jne l_26F7
l_2705

; optimize OK (service.pas), line = 2384

	lda #$01
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; --- ForToDoEpilog
	dec W
	jpl l_26E0
l_26EE

; ------------------------------------------------------------

X	= DATAORIGIN+$0B74
Y	= DATAORIGIN+$0B75
W	= DATAORIGIN+$0B76
Z	= DATAORIGIN+$0B77
A	= DATAORIGIN+$0B79
B	= DATAORIGIN+$0B7B

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (service.pas), line = 2394

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2418

	ldy NUM
	lda adr.DIGITS,y
	and #$01
	cmp #$01
	jne l_27EB
	lda #$DF
	sta A
l_27EB

; optimize OK (service.pas), line = 2419

	lda #$01
	sta X

l_27FB
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2809

; optimize OK (service.pas), line = 2421

	lda PX
	adc X
	sta :STACKORIGIN+10
	lda PX+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_27FB
l_2809

; optimize OK (service.pas), line = 2425

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2426

	ldy NUM
	lda adr.DIGITS,y
	and #$02
	cmp #$02
	jne l_2841
	lda #$DF
	sta A
l_2841

; optimize OK (service.pas), line = 2427

	lda #$01
	sta X

l_2851
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_285F

; optimize OK (service.pas), line = 2429

	lda PX
	adc X
	sta :STACKORIGIN+10
	lda PX+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$0A
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2851
l_285F

; optimize OK (service.pas), line = 2433

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2434

	ldy NUM
	lda adr.DIGITS,y
	and #$04
	cmp #$04
	jne l_289B
	lda #$DF
	sta A
l_289B

; optimize OK (service.pas), line = 2435

	lda #$01
	sta X

l_28AB
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_28B9

; optimize OK (service.pas), line = 2437

	lda PX
	adc X
	sta :STACKORIGIN+10
	lda PX+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda PY
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$14
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_28AB
l_28B9

; optimize OK (service.pas), line = 2440

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2441

	ldy NUM
	lda adr.DIGITS,y
	and #$08
	cmp #$08
	jne l_28F5
	lda #$DF
	sta A
l_28F5

; optimize OK (service.pas), line = 2442

	lda #$01
	sta Y

l_2905
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2913

; optimize OK (service.pas), line = 2444

	lda PY
	adc Y
	sta :STACKORIGIN+11
	lda PY+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda PX
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda PX+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2905
l_2913

; optimize OK (service.pas), line = 2447

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2448

	ldy NUM
	lda adr.DIGITS,y
	and #$10
	cmp #$10
	jne l_294B
	lda #$DF
	sta A
l_294B

; optimize OK (service.pas), line = 2449

	lda #$01
	sta Y

l_295B
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2969

; optimize OK (service.pas), line = 2451

	lda PY
	adc Y
	sta :STACKORIGIN+11
	lda PY+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$05
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda PX
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda PX+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_295B
l_2969

; optimize OK (service.pas), line = 2454

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2455

	ldy NUM
	lda adr.DIGITS,y
	and #$20
	cmp #$20
	jne l_29A5
	lda #$DF
	sta A
l_29A5

; optimize OK (service.pas), line = 2456

	lda #$01
	sta Y

l_29B5
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_29C3

; optimize OK (service.pas), line = 2458

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$00
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	sta :STACKORIGIN+11
	lda PY+1
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_29B5
l_29C3

; optimize OK (service.pas), line = 2461

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2462

	ldy NUM
	lda adr.DIGITS,y
	and #$40
	cmp #$40
	jne l_29FF
	lda #$DF
	sta A
l_29FF

; optimize OK (service.pas), line = 2463

	lda #$01
	sta Y

l_2A0F
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2A1D

; optimize OK (service.pas), line = 2465

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$00
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	sta :STACKORIGIN+11
	lda PY+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$05
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2A0F
l_2A1D

; ------------------------------------------------------------

PX	= DATAORIGIN+$0B7E
PY	= DATAORIGIN+$0B80
NUM	= DATAORIGIN+$0B82
X	= DATAORIGIN+$0B84
Y	= DATAORIGIN+$0B85
A	= DATAORIGIN+$0B86

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (service.pas), line = 2476

	lda #$00
	sta F

; optimize OK (service.pas), line = 2481

	lda #$A0
	sta @INTEGER.DIV.B
	lda #$86
	sta @INTEGER.DIV.B+1
	lda #$01
	sta @INTEGER.DIV.B+2
	lda #$00
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2482

	jmi l_2A65
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2A65
	lda #$01
	sta F
l_2A65

; optimize OK (service.pas), line = 2483

	lda F
	jeq l_2A78
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2A88
l_2A78

; optimize OK (service.pas), line = 2484

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2A88
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2487

	lda #$10
	sta @INTEGER.DIV.B
	lda #$27
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2488

	jmi l_2AAA
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2AAA
	lda #$01
	sta F
l_2AAA

; optimize OK (service.pas), line = 2489

	lda F
	jeq l_2ABD
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2AD1
l_2ABD

; optimize OK (service.pas), line = 2490

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2AD1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2493

	lda #$E8
	sta @INTEGER.DIV.B
	lda #$03
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2494

	jmi l_2AF7
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2AF7
	lda #$01
	sta F
l_2AF7

; optimize OK (service.pas), line = 2495

	lda F
	jeq l_2B0A
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2B1E
l_2B0A

; optimize OK (service.pas), line = 2496

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2B1E
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2499

	lda #$64
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2500

	jmi l_2B44
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2B44
	lda #$01
	sta F
l_2B44

; optimize OK (service.pas), line = 2501

	lda F
	jeq l_2B57
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2B6B
l_2B57

; optimize OK (service.pas), line = 2502

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2B6B
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2505

	lda #$0A
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2506

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2510

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$00
	sta PUT_DIGIT.NUM
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; ------------------------------------------------------------

PX	= DATAORIGIN+$0B87
PY	= DATAORIGIN+$0B89
SC	= DATAORIGIN+$0B8B
N1	= DATAORIGIN+$0B8F
F	= DATAORIGIN+$0B93

@VarData	= PX
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, service.pas), line = 2556

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; optimize OK (service.pas), line = 2559

	lda #$00
	sta CN

l_2BAA
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2BB8

; optimize OK (service.pas), line = 2560

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_2BC3_0

l_2BC6
; --- ForToDoCondition
	lda @FORTMP_2BC3_0::#$00
	cmp Y
	jcc l_2BD4

; optimize OK (service.pas), line = 2561

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2BDF_0

l_2BE2
; --- ForToDoCondition
	lda @FORTMP_2BDF_0::#$00
	cmp X
	jcc l_2BF0

; optimize OK (service.pas), line = 2563

	lda X
	add #$0B
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta XL
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta XL+1

; optimize OK (service.pas), line = 2564

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (service.pas), line = 2566

	lda MODX
	add XL
	tay
	lda MODX+1
	adc XL+1
	sta :bp+1
	lda (:bp),y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 2567

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize FAIL (1, service.pas), line = 2571

	inx
	ldy #1
	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	bmi @+
	dey
@
	sty :STACKORIGIN,x
	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	bne @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2C53

; optimize OK (service.pas), line = 2574

	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL
; optimize OK (service.pas), line = 2577
; optimize OK (service.pas), line = 2580
	jmp l_2C95
l_2C53

; optimize OK (service.pas), line = 2589

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y
	sta GETBYTE.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 2592

	lda PATTERN.OFS
	add XP
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc XP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YP
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YP+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex
l_2C95

; optimize OK (service.pas), line = 2595

	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda XL
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda XL+1
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 2598

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YL+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda YL
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+10
	add (:bp2),y
	sta PUTBYTE.DST
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2BE2
l_2BF0

; --- ForToDoEpilog
	inc Y
	jne l_2BC6
l_2BD4

; --- ForToDoEpilog
	inc CN
	jne l_2BAA
l_2BB8

; ------------------------------------------------------------

LIVES	= DATAORIGIN+$0B94
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$0B96
Y	= DATAORIGIN+$0B97
CN	= DATAORIGIN+$0B98
XP	= DATAORIGIN+$0B99
YP	= DATAORIGIN+$0B9B
XL	= DATAORIGIN+$0B9D
YL	= DATAORIGIN+$0B9F
SHADOW	= DATAORIGIN+$0BA1
CL	= DATAORIGIN+$0BA2

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2607

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2D03_0

l_2D06
; --- ForToDoCondition
	lda @FORTMP_2D03_0::#$00
	cmp Y
	jcc l_2D14

; optimize OK (service.pas), line = 2609

	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	lda SHOOTS.WIDTH
	sta :ecx
	lda SHOOTS.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta FW
	lda :eax+1
	sta FW+1

; optimize OK (service.pas), line = 2611

	lda Y
	add FIRE.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda FIRE.X
	add (:bp2),y
	sta BLITZERO.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	add FW
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	adc FW+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc Y
	jne l_2D06
l_2D14

; ------------------------------------------------------------

FW	= DATAORIGIN+$0BA5
Y	= DATAORIGIN+$0BA7

@VarData	= FW
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2619

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2D51_0

l_2D54
; --- ForToDoCondition
	lda @FORTMP_2D51_0::#$00
	cmp Y
	jcc l_2D62

; optimize OK (service.pas), line = 2623

	lda Y
	add FIRE.Y
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda FIRE.X
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add FIRE.X
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	add FIRE.Y
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	asl :STACKORIGIN+12
	rol @
	sta :STACKORIGIN+STACKWIDTH+12
	lda ROW
	add :STACKORIGIN+12
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	dey
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda SHOOTS.WIDTH
	sta BLITROW.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2D54
l_2D62

; ------------------------------------------------------------

Y	= DATAORIGIN+$0BA9

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2630

	lda FIRE.AVL
	jeq l_2DA4

; optimize FAIL ('MOUSECLICK', service.pas), line = 2632

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT+1
	cmp #$00
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2DC4

; optimize OK (service.pas), line = 2634

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	sbc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda VAUS.X
	add :STACKORIGIN+10
	sta FIRE.X

; optimize OK (service.pas), line = 2635

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 2636

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2637

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 2638

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2DC4

; optimize OK (service.pas), line = 2641

	lda FIRE.SHOT
	jeq l_2DFE

; optimize OK (service.pas), line = 2643

	lda FIRE.NW
	jeq l_2E0B
	jsr REMOVE_FIRE
l_2E0B

; optimize OK (service.pas), line = 2644

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 2646

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 2647

	cmp #$16
	jcs l_2E26
	lda #$00
	sta FIRE.SHOT
	jmp l_2E34
l_2E26

; optimize FAIL ('PLACE_FIRE', service.pas), line = 2650

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 2652

	lda FIRE.Y
	sub #$16
	jeq l_2E5B
	bpl @+
	jmp l_2E5B
@
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_2E5B
@

; optimize OK (service.pas), line = 2654

	lda FIRE.X
	sub #$09
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X1
	lda :STACKORIGIN+STACKWIDTH+9
	sta X1+1

; optimize OK (service.pas), line = 2655

	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y1
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y1+1

; optimize OK (service.pas), line = 2657

	lda FIRE.X
	add SHOOTS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$09
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X2
	lda :STACKORIGIN+STACKWIDTH+9
	sta X2+1

; optimize OK (service.pas), line = 2658

	lda Y1
	sta Y2
	lda Y1+1
	sta Y2+1

; optimize OK (service.pas), line = 2660

	lda Y1
	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2EC4x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2EC4
l_2EC4x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2662

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 2663

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2665

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X1+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y1+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 2666

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X2+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y2+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE
l_2E34
l_2EC4
l_2E5B
l_2DFE
l_2DA4

; ------------------------------------------------------------

X1	= DATAORIGIN+$0BAB
X2	= DATAORIGIN+$0BAD
Y1	= DATAORIGIN+$0BAF
Y2	= DATAORIGIN+$0BB1

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2678

	lda #$00
	sta Y

l_2EE9
; --- ForToDoCondition
	lda Y
	cmp #$14
	jcs l_2EF7

; optimize OK (service.pas), line = 2680

	adc #$B0
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$D9
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$D9
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	add #$B0
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	asl :STACKORIGIN+12
	rol @
	sta :STACKORIGIN+STACKWIDTH+12
	lda ROW
	add :STACKORIGIN+12
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2EE9
l_2EF7

; ------------------------------------------------------------

Y	= DATAORIGIN+$0BB3

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2688

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 2689

	lda SCRFLUX
	jeq l_2F36

; optimize OK (service.pas), line = 2691

	lda #$00
	sta Y

l_2F40
; --- ForToDoCondition
	lda Y
	cmp #$14
	jcs l_2F4E

; optimize OK (service.pas), line = 2693

	adc #$B0
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda ROW
	add :STACKORIGIN+11
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$D9
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2F40
l_2F4E

; optimize FAIL (0, service.pas), line = 2695

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 2696

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2F8D
	lda #$00
	sta SCRFLUXCNT
l_2F8D
l_2F36

; ------------------------------------------------------------

Y	= DATAORIGIN+$0BB4
FX	= DATAORIGIN+$0BB5

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2704

	jsr NOSOUND

; optimize OK (service.pas), line = 2706

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2707

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 2709

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', service.pas), line = 2711

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2712

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2713

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2715

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_2FB8_0
	lda Z+1
	adc #$00
	sta @FORTMP_2FB8_1

l_2FBB
; --- ForToDoCondition
	lda @FORTMP_2FB8_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_2FB8_0::#$00
	cmp X
@
	jcc l_2FC7

; optimize FAIL ('WAIT_VBL', service.pas), line = 2717

	jsr WAIT_VBL

; optimize OK (service.pas), line = 2719

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 2720

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2721

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 2722

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2723

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2725

	lda VAUS.Y
	sta Y
	lda #$00
	sta Y+1
	lda VAUS.Y
	add VAUS.HEIGHT
	sta @FORTMP_2FE6_0
	lda #$00
	adc #$00
	sta @FORTMP_2FE6_1

l_2FE9
; --- ForToDoCondition
	lda @FORTMP_2FE6_1::#$00
	cmp Y+1
	bne @+
	lda @FORTMP_2FE6_0::#$00
	cmp Y
@
	jcc l_2FF5

; optimize OK (service.pas), line = 2727

	lda Y+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add ROW
	sta :bp2
	lda ROW+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp2+1
	ldy #$00
	lda #$E1
	add (:bp2),y
	sta BLITROW.DST
	iny
	lda #$00
	adc (:bp2),y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$E1
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+11
	add (:bp2),y
	sta BLITROW.SRC
	iny
	lda :STACKORIGIN+STACKWIDTH+11
	adc (:bp2),y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$28
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2FE9
	inc Y+1
	jne l_2FE9
l_2FF5

; --- ForToDoEpilog
	inc X
	jne l_2FBB
	inc X+1
	jne l_2FBB
l_2FC7

; ------------------------------------------------------------

X	= DATAORIGIN+$0BB6
Y	= DATAORIGIN+$0BB8
Z	= DATAORIGIN+$0BBA

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 2737

	lda VAUS.LETTER
	jmi l_302F
	jeq l_302F

; optimize OK (service.pas), line = 2739

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 2740

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3046
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3046

; optimize OK (service.pas), line = 2741

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3058
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3058

; optimize OK (service.pas), line = 2742

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2743

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2744

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 2745

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 2747

	lda VAUS.LETTER
	cmp #$06
	jeq l_307D

; optimize OK (service.pas), line = 2749

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2750

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2751

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_307D
l_302F

; optimize OK (service.pas), line = 2755

	lda VAUS.LETTER
	sta @CASETMP_0009
	cmp #$01
	jne l_3099
@

; optimize OK (service.pas), line = 2758

	lda FIRE.SHOT
	jeq l_30A5
	jsr REMOVE_FIRE
l_30A5

; optimize OK (service.pas), line = 2759

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2760

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2761

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2762

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 2763

	lda #$00
	sta FIRE.SHOT
	jmp a_0009
l_3099
	cmp #$02
	jne l_30BF

; optimize OK (service.pas), line = 2767

	lda FIRE.SHOT
	jeq l_30CB
	jsr REMOVE_FIRE
l_30CB

; optimize OK (service.pas), line = 2768

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2769

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2770

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2771

	sta FIRE.AVL
	jmp a_0009
l_30BF
	cmp #$03
	jne l_30E1

; optimize OK (service.pas), line = 2775

	lda FIRE.SHOT
	jeq l_30ED
	jsr REMOVE_FIRE
l_30ED

; optimize OK (service.pas), line = 2776

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2777

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2778

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2779

	sta FIRE.AVL

; optimize OK (service.pas), line = 2780

	lda #$01
	sta SCRFLUX
	jmp a_0009
l_30E1
	cmp #$04
	jne l_3107

; optimize OK (service.pas), line = 2784

	lda FIRE.SHOT
	jeq l_3113
	jsr REMOVE_FIRE
l_3113

; optimize OK (service.pas), line = 2785

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2786

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 2787
	jmp s_3150
l_3107
	cmp #$05
	jne l_3125

; optimize OK (service.pas), line = 2791

	lda FIRE.SHOT
	jeq l_3131
	jsr REMOVE_FIRE
l_3131

; optimize OK (service.pas), line = 2792

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2793

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2794

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2795

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 2796

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3150
; optimize OK (service.pas), line = 2797
	jmp s_316E
l_3125
	cmp #$06
	jne l_3157

; optimize OK (service.pas), line = 2801

	lda FIRE.SHOT
	jeq l_3163
	jsr REMOVE_FIRE
l_3163

; optimize OK (service.pas), line = 2802

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2803

	jsr MODIFY_VAUS
s_316E
; optimize OK (service.pas), line = 2804
	jmp s_319E
l_3157
	cmp #$07
	jne l_3175

; optimize OK (service.pas), line = 2808

	lda FIRE.SHOT
	jeq l_3181
	jsr REMOVE_FIRE
l_3181

; optimize OK (service.pas), line = 2809

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2810

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2811

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2812

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 2813

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 2814

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_319E

; optimize OK (service.pas), line = 2815

	lda #$00
	sta FIRE.AVL
l_3175
a_0009

; ------------------------------------------------------------

B1	= DATAORIGIN+$0BC0
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001A
B2	= DATAORIGIN+$0BC4
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001A
B3	= DATAORIGIN+$0BC8
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0BCC
@CASETMP_0009	= DATAORIGIN+$0BCE

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_31AC

; optimize OK (service.pas), line = 2828

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 2829

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_31AC
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_31AC

; optimize OK (service.pas), line = 2831

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2832

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2833

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0BCF
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
TEMP	= DATAORIGIN+$0BD3

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_31EC

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 2863

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_31FB

; optimize OK (service.pas), line = 2866

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_3218
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_3218

; optimize OK (service.pas), line = 2867

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_3218

; optimize OK (service.pas), line = 2869

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 2870

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_31FB

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0C34
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 2878

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3239

; optimize OK (service.pas), line = 2880

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2882

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_324F
	jeq l_324F

; optimize OK (service.pas), line = 2884

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 2887

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_3265

; optimize OK (service.pas), line = 2889

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2890

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_3265
l_324F

; optimize OK (service.pas), line = 2894

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2898

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_328D
@
	ldy #$00
	lda (:bp2),y
	jpl l_328D
@

; optimize OK (service.pas), line = 2899

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_328D
l_3239

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0C38
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_31EC

; optimize OK (service.pas), line = 2907

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 2908

	sta SCRFLUX

; optimize OK (service.pas), line = 2910

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 2912

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 2913

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 2915

	lda #$FF
	sta LETT.LAST
	sta LETT.LAST+1

; optimize OK (service.pas), line = 2916

	lda #$00
	sta LETT.ACTIVE

; optimize OK (service.pas), line = 2919

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 2922

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 2926

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 2929

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 2932

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 2933

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 2934

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 2937

	jsr PUT_WALL

; optimize FAIL ('MOUSERESET', service.pas), line = 2941

	jsr MOUSERESET

; optimize OK (service.pas), line = 2944

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 2945

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 2948

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 2949

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 2952

	lda #$FF
	sta BALL0.OLDX
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 2953

	sta BALL0.OLDY
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 2956

	lda #$00
	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 2960

	lda #$10
	sta BALL0.ONVAUS

; optimize OK (service.pas), line = 2965

	lda #$00
	sta BALL0.STM

; optimize OK (service.pas), line = 2969

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 2972

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 2975

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 2977

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 2978

	jsr START_VAUS

; optimize OK (service.pas), line = 2979

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 2980

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 2981

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 2982

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 2983

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 2990

	lda #$0F
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2992

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2995

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 2997

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 2998

	sta BALL2.INPLAY

; --- WhileProlog
	jmp l_3323
l_3324

; optimize FAIL ('WAIT_VBL', service.pas), line = 3002

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3011

	lda BALL0.X
	sta MOUS.X
	lda BALL0.X+1
	sta MOUS.X+1

; optimize OK (service.pas), line = 3013

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	lda <Y
	sta MOUSECOORDS.Y
	lda >Y
	sta MOUSECOORDS.Y+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3018

	lda TRAINER
	jne l_333F
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_334D
l_333F

; optimize OK (service.pas), line = 3024

	lda TRAINER
	cmp #$01
	jne l_335F

; optimize FAIL (1, service.pas), line = 3025

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc #$00
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_334D
	jsr MOVE_VAUS
l_335F

; optimize OK (service.pas), line = 3030

	lda BALL0.LAUNCH
	cmp #$01
	jne l_3382

; optimize FAIL (0, service.pas), line = 3032

	inc BALL0.STM

; optimize OK (service.pas), line = 3037

	lda BALL0.STM
	cmp #$FA
	jne l_3399
	lda #$00
	sta BALL0.LAUNCH
l_3399

; optimize OK (service.pas), line = 3040

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3043

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT+1
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	jne l_33B3
	lda #$00
	sta BALL0.LAUNCH
l_33B3
	jmp l_33C3
l_3382

; optimize OK (service.pas), line = 3051

	lda BALL0.INPLAY
	jeq l_33CF
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33CF
l_33C3

; optimize OK (service.pas), line = 3052

	lda BALL1.INPLAY
	jeq l_33E1
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33E1

; optimize OK (service.pas), line = 3053

	lda BALL2.INPLAY
	jeq l_33F3
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_33F3

; optimize OK (service.pas), line = 3059

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3060

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3061

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3076

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3077

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3078

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3079

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3080

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3082

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_342B
	jsr VAUS_OUT
l_342B

; optimize OK (service.pas), line = 3084

	lda VAUS.LETTER
	cmp #$04
	jne l_3441

; optimize OK (service.pas), line = 3086

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3088

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3089

	mwy BALL2 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3091

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3093

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3100

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (service.pas), line = 3102

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3103

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3104

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3108

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3109

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3110

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3112

	lda #$00
	sta VAUS.LETTER
l_3441

; optimize OK (service.pas), line = 3116

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_34A4
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_34A4

; optimize OK (service.pas), line = 3119

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1,y
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2,y
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3,y
	sta WRITE_SCORE.SC+3
	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3122

	lda CUR_PLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.SCORE.PLAYER+3,y
	sub SCORE.HISCORE+3
	bne L4
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne L1
	lda adr.SCORE.PLAYER+1,y
	cmp SCORE.HISCORE+1
	bne L1
	lda adr.SCORE.PLAYER,y
	cmp SCORE.HISCORE
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_34CA
	jeq l_34CA

; optimize OK (service.pas), line = 3125

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3127

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_34CA

; optimize OK (service.pas), line = 3134

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3135

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3136

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3177

	lda BALL0.INPLAY
	jne l_34F0

; optimize OK (service.pas), line = 3179

	mwy BALL0 :bp2
	ldy #$1A
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3180

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3181

	sta BALL2.INPLAY
l_34F0

; optimize OK (service.pas), line = 3184

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3186

	lda BALL0.INPLAY
	jeq l_350B
	inc BALLS_IN_PLAY
l_350B

; optimize OK (service.pas), line = 3187

	lda BALL1.INPLAY
	jeq l_351E
	inc BALLS_IN_PLAY
l_351E

; optimize OK (service.pas), line = 3188

	lda BALL2.INPLAY
	jeq l_3531
	inc BALLS_IN_PLAY
l_3531

; optimize OK (service.pas), line = 3191

	lda BALL0.INPLAY
	jne l_3547

; optimize OK (service.pas), line = 3193

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3194

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3195

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3196

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3197

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3205

	jsr NOSOUND
l_3547
l_3323

; optimize OK (service.pas), line = 3000

	lda REMAIN_BLK
	jeq l_3324w
	lda BALL0.INPLAY
	jeq l_3324w
	lda SCORE.ABORTPLAY
	jeq l_3324
l_3324w

; optimize OK (service.pas), line = 3261

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3262

	lda REMAIN_BLK
	jne l_3591
	lda #$01
	sta RESULT
l_3591
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0BD5
X	= DATAORIGIN+$0BD6
Y	= DATAORIGIN+$0BD8
KEY	= DATAORIGIN+$0BDA
T1	= DATAORIGIN+$0BDC
T2	= DATAORIGIN+$0BDE
HLP	= DATAORIGIN+$0BE0
CN	= DATAORIGIN+$0BE2
adr.BALL0	= DATAORIGIN+$0BE3	; [27] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$0BE3
BALL0.Y	= DATAORIGIN+$0BE5
BALL0.FINEX	= DATAORIGIN+$0BE7
BALL0.FINEY	= DATAORIGIN+$0BE9
BALL0.OLDX	= DATAORIGIN+$0BEB
BALL0.OLDY	= DATAORIGIN+$0BED
BALL0.SPEED	= DATAORIGIN+$0BEF
BALL0.FINESPEED	= DATAORIGIN+$0BF1
BALL0.SPEEDX	= DATAORIGIN+$0BF3
BALL0.SPEEDY	= DATAORIGIN+$0BF5
BALL0.SBD	= DATAORIGIN+$0BF7
BALL0.BRWHIT	= DATAORIGIN+$0BF9
BALL0.INPLAY	= DATAORIGIN+$0BFA
BALL0.LAUNCH	= DATAORIGIN+$0BFB
BALL0.ONVAUS	= DATAORIGIN+$0BFC
BALL0.STM	= DATAORIGIN+$0BFD
adr.BALL1	= DATAORIGIN+$0BFE	; [27] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0BFE
BALL1.Y	= DATAORIGIN+$0C00
BALL1.FINEX	= DATAORIGIN+$0C02
BALL1.FINEY	= DATAORIGIN+$0C04
BALL1.OLDX	= DATAORIGIN+$0C06
BALL1.OLDY	= DATAORIGIN+$0C08
BALL1.SPEED	= DATAORIGIN+$0C0A
BALL1.FINESPEED	= DATAORIGIN+$0C0C
BALL1.SPEEDX	= DATAORIGIN+$0C0E
BALL1.SPEEDY	= DATAORIGIN+$0C10
BALL1.SBD	= DATAORIGIN+$0C12
BALL1.BRWHIT	= DATAORIGIN+$0C14
BALL1.INPLAY	= DATAORIGIN+$0C15
BALL1.LAUNCH	= DATAORIGIN+$0C16
BALL1.ONVAUS	= DATAORIGIN+$0C17
BALL1.STM	= DATAORIGIN+$0C18
adr.BALL2	= DATAORIGIN+$0C19	; [27] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$0C19
BALL2.Y	= DATAORIGIN+$0C1B
BALL2.FINEX	= DATAORIGIN+$0C1D
BALL2.FINEY	= DATAORIGIN+$0C1F
BALL2.OLDX	= DATAORIGIN+$0C21
BALL2.OLDY	= DATAORIGIN+$0C23
BALL2.SPEED	= DATAORIGIN+$0C25
BALL2.FINESPEED	= DATAORIGIN+$0C27
BALL2.SPEEDX	= DATAORIGIN+$0C29
BALL2.SPEEDY	= DATAORIGIN+$0C2B
BALL2.SBD	= DATAORIGIN+$0C2D
BALL2.BRWHIT	= DATAORIGIN+$0C2F
BALL2.INPLAY	= DATAORIGIN+$0C30
BALL2.LAUNCH	= DATAORIGIN+$0C31
BALL2.ONVAUS	= DATAORIGIN+$0C32
BALL2.STM	= DATAORIGIN+$0C33

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3285

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3343

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0C3C
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0C3E
Y	= DATAORIGIN+$0C40
ST	= DATAORIGIN+$0C42
OLDX	= DATAORIGIN+$0C44
OLDY	= DATAORIGIN+$0C46
NEWX	= DATAORIGIN+$0C48
NEWY	= DATAORIGIN+$0C4A

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3352

	lda #$01
	sta X

l_35B2
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_35C0

; optimize OK (service.pas), line = 3354

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3355

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3356

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize FAIL (1, service.pas), line = 3357

	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda WALL_P
	add :STACKORIGIN-1,x
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3359

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_35B2
l_35C0

; optimize OK (service.pas), line = 3362

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0C4C

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3479

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3480

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3605
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3605

; optimize OK (service.pas), line = 3483

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3484

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3486

	jsr SET_WALL

; optimize OK (service.pas), line = 3488

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3489

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3492

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3495

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3496

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3497

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_3633

; --- RepeatUntilProlog
l_3634

; optimize OK (service.pas), line = 3507

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_3646

; optimize FAIL (1, service.pas), line = 3509

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex

; optimize FAIL (1, service.pas), line = 3512

	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda WALL_P
	add :STACKORIGIN-1,x
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3516

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_3646

; optimize OK (service.pas), line = 3520

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3521

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 3526

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 3529

	jeq l_3688

; optimize OK (service.pas), line = 3532

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3535

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_36A4

; optimize OK (service.pas), line = 3536

	lda #$01
	sta adr.SCORE.WALL_N,y
l_36A4

; optimize FAIL (1, service.pas), line = 3539

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda WALL_P
	add :STACKORIGIN-1,x
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN-1+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_36CE
l_3688

; optimize OK (service.pas), line = 3545

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_36E3
	jsr GAME_OVER
l_36CE
l_36E3

; optimize OK (service.pas), line = 3550

	lda NWALL
	jne l_3634

; optimize FAIL (0, service.pas), line = 3553

	inc CUR_PLAYER

; optimize OK (service.pas), line = 3554

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_370B
	lda #$01
	sta CUR_PLAYER
l_370B

; optimize OK (service.pas), line = 3560

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3727
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_3727

; optimize OK (service.pas), line = 3565

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_3633

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$0C4D
NWALL	= DATAORIGIN+$0C4F

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 150

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 151

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$4A
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$44
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$3E
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$50
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SOUNDFX.OFS
	lda #$6F
	sta SOUNDFX.OFS+1
	lda #$03
	sta SOUNDFX.OFS+2
	lda #$00
	sta SOUNDFX.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta SOUNDFX.WIDTH
	lda #$00
	sta SOUNDFX.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$26
	sta SOUNDFX.HEIGHT
	lda #$00
	sta SOUNDFX.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$BB
	sta SHINEWALL.OFS
	lda #$72
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$BB
	sta MINIVAUS.OFS
	lda #$77
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$1F
	sta LEVELSEL.OFS
	lda #$78
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$EA
	sta LETTERS.OFS
	lda #$7F
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$EA
	sta NORMAL.OFS
	lda #$9B
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$CA
	sta LASERS.OFS
	lda #$9C
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$AA
	sta ENLARGED.OFS
	lda #$9D
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$6A
	sta SHOOTS.OFS
	lda #$9F
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$D2
	sta FLUX.OFS
	lda #$9F
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$1A
	sta BALLDATA.OFS
	lda #$A1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$33
	sta PATTERN.OFS
	lda #$A1
	sta PATTERN.OFS+1
	lda #$03
	sta PATTERN.OFS+2
	lda #$00
	sta PATTERN.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1A
	sta PATTERN.WIDTH
	lda #$00
	sta PATTERN.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$18
	sta PATTERN.HEIGHT
	lda #$00
	sta PATTERN.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$A3
	sta PATTERN0.OFS
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$13
	sta PATTERN1.OFS
	lda #$A6
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$D7
	sta PATTERN2.OFS
	lda #$A6
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 77

	lda #$09
	sta PATTERN3.OFS
	lda #$AC
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 78

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 79

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 81

	lda #$35
	sta PATTERN4.OFS
	lda #$AF
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 82

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 83

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 158

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 161

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 162

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3864

; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 166

	jsr MOUSERESET

; optimize OK (arkanoid_vbxe.pas), line = 170

	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME

; optimize OK (arkanoid_vbxe.pas), line = 172

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3864

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0010

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 180

	jsr INIT_GAME

; ------------------------------------------------------------

adr.MOUS	= DATAORIGIN+$00A8	; [5] RECORD
.var MOUS	= adr.MOUS .word
MOUS.X	= DATAORIGIN+$00A8
MOUS.Y	= DATAORIGIN+$00AA
MOUS.FIRE	= DATAORIGIN+$00AC
VBXE_OVRADR	= $5000
VBXE_DATA	= $14A00
VRAM	= $00
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$004C
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0057
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$006D
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0076
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0080
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0084
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$008F
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$009B
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00C1	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00C1
BALLDATA.HEIGHT	= DATAORIGIN+$00C3
BALLDATA.OFS	= DATAORIGIN+$00C5
adr.PLAYSCREEN	= DATAORIGIN+$00C9	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00C9
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00CB
PLAYSCREEN.OFS	= DATAORIGIN+$00CD
adr.PLAYVAUS	= DATAORIGIN+$00D1	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00D1
PLAYVAUS.HEIGHT	= DATAORIGIN+$00D3
PLAYVAUS.OFS	= DATAORIGIN+$00D5
adr.NORMAL	= DATAORIGIN+$00D9	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00D9
NORMAL.HEIGHT	= DATAORIGIN+$00DB
NORMAL.OFS	= DATAORIGIN+$00DD
adr.ENLARGED	= DATAORIGIN+$00E1	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00E1
ENLARGED.HEIGHT	= DATAORIGIN+$00E3
ENLARGED.OFS	= DATAORIGIN+$00E5
adr.LASERS	= DATAORIGIN+$00E9	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00E9
LASERS.HEIGHT	= DATAORIGIN+$00EB
LASERS.OFS	= DATAORIGIN+$00ED
adr.EXPLOSION	= DATAORIGIN+$00F1	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00F1
EXPLOSION.HEIGHT	= DATAORIGIN+$00F3
EXPLOSION.OFS	= DATAORIGIN+$00F5
adr.NEWVAUS	= DATAORIGIN+$00F9	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00F9
NEWVAUS.HEIGHT	= DATAORIGIN+$00FB
NEWVAUS.OFS	= DATAORIGIN+$00FD
adr.PRESENTS	= DATAORIGIN+$0101	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$0101
PRESENTS.HEIGHT	= DATAORIGIN+$0103
PRESENTS.OFS	= DATAORIGIN+$0105
adr.SOUNDFX	= DATAORIGIN+$0109	; [8] RECORD
.var SOUNDFX	= adr.SOUNDFX .word
SOUNDFX.WIDTH	= DATAORIGIN+$0109
SOUNDFX.HEIGHT	= DATAORIGIN+$010B
SOUNDFX.OFS	= DATAORIGIN+$010D
adr.SHINEWALL	= DATAORIGIN+$0111	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$0111
SHINEWALL.HEIGHT	= DATAORIGIN+$0113
SHINEWALL.OFS	= DATAORIGIN+$0115
adr.MINIVAUS	= DATAORIGIN+$0119	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0119
MINIVAUS.HEIGHT	= DATAORIGIN+$011B
MINIVAUS.OFS	= DATAORIGIN+$011D
adr.LEVELSEL	= DATAORIGIN+$0121	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0121
LEVELSEL.HEIGHT	= DATAORIGIN+$0123
LEVELSEL.OFS	= DATAORIGIN+$0125
adr.LETTERS	= DATAORIGIN+$0129	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0129
LETTERS.HEIGHT	= DATAORIGIN+$012B
LETTERS.OFS	= DATAORIGIN+$012D
adr.SHOOTS	= DATAORIGIN+$0131	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0131
SHOOTS.HEIGHT	= DATAORIGIN+$0133
SHOOTS.OFS	= DATAORIGIN+$0135
adr.FLUX	= DATAORIGIN+$0139	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0139
FLUX.HEIGHT	= DATAORIGIN+$013B
FLUX.OFS	= DATAORIGIN+$013D
adr.VAUS	= DATAORIGIN+$0141	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0141
VAUS.Y	= DATAORIGIN+$0142
VAUS.OLDX	= DATAORIGIN+$0143
VAUS.OLDY	= DATAORIGIN+$0145
VAUS.OLDLEN	= DATAORIGIN+$0147
VAUS.WIDTH	= DATAORIGIN+$0149
VAUS.HEIGHT	= DATAORIGIN+$014A
VAUS.FLASH	= DATAORIGIN+$014B
VAUS.IFLASH	= DATAORIGIN+$014C
VAUS.LETTER	= DATAORIGIN+$014D
adr.PATTERN	= DATAORIGIN+$014E	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$014E
PATTERN.HEIGHT	= DATAORIGIN+$0150
PATTERN.OFS	= DATAORIGIN+$0152
adr.PATTERN0	= DATAORIGIN+$0156	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0156
PATTERN0.HEIGHT	= DATAORIGIN+$0158
PATTERN0.OFS	= DATAORIGIN+$015A
adr.PATTERN1	= DATAORIGIN+$015E	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$015E
PATTERN1.HEIGHT	= DATAORIGIN+$0160
PATTERN1.OFS	= DATAORIGIN+$0162
adr.PATTERN2	= DATAORIGIN+$0166	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0166
PATTERN2.HEIGHT	= DATAORIGIN+$0168
PATTERN2.OFS	= DATAORIGIN+$016A
adr.PATTERN3	= DATAORIGIN+$016E	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$016E
PATTERN3.HEIGHT	= DATAORIGIN+$0170
PATTERN3.OFS	= DATAORIGIN+$0172
adr.PATTERN4	= DATAORIGIN+$0176	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0176
PATTERN4.HEIGHT	= DATAORIGIN+$0178
PATTERN4.OFS	= DATAORIGIN+$017A
STATUS	= DATAORIGIN+$017E
SUCCESS	= DATAORIGIN+$017F
REMAIN_BLK	= DATAORIGIN+$0180
TOTALWALL	= DATAORIGIN+$0181
adr.SCORE	= DATAORIGIN+$0182	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$0182] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$018E] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$0191] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$0194
SCORE.PL_NUMB	= DATAORIGIN+$0198
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0199] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$019C
CUR_PLAYER	= DATAORIGIN+$019D
adr.SHINEREC	= DATAORIGIN+$019E	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$019E
SHINEREC.YB	= DATAORIGIN+$019F
SHINEREC.FRAME	= DATAORIGIN+$01A0
SHINEREC.BLOCK	= DATAORIGIN+$01A1
SHINEREC.ACTIVE	= DATAORIGIN+$01A2
LV	= DATAORIGIN+$01A3
TRAINER	= DATAORIGIN+$01A5
adr.LETT	= DATAORIGIN+$01A6	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01A6
LETT.Y	= DATAORIGIN+$01A7
LETT.TYP	= DATAORIGIN+$01A8
LETT.FRAME	= DATAORIGIN+$01AA
LETT.SUBFRAME	= DATAORIGIN+$01AB
LETT.ACTIVE	= DATAORIGIN+$01AC
LETT.INCOMING	= DATAORIGIN+$01AD
LETT.NEXTX	= DATAORIGIN+$01AF
LETT.NEXTY	= DATAORIGIN+$01B1
LETT.NEXTTYPE	= DATAORIGIN+$01B3
LETT.LAST	= DATAORIGIN+$01B5
adr.FIRE	= DATAORIGIN+$01B7	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01B7
FIRE.Y	= DATAORIGIN+$01B8
FIRE.SHOT	= DATAORIGIN+$01B9
FIRE.AVL	= DATAORIGIN+$01BA
FIRE.NW	= DATAORIGIN+$01BB
BALLS_IN_PLAY	= DATAORIGIN+$01BC
SCRFLUX	= DATAORIGIN+$01BD
SCRFLUXCNT	= DATAORIGIN+$01BE
SOUND_ON	= DATAORIGIN+$01BF
adr.DEF_PAL	= [DATAORIGIN+$01C0] .array [768]
.var DEF_PAL	= adr.DEF_PAL .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
adr.TMP	= [DATAORIGIN+$04C0] .array [256]
.var TMP	= adr.TMP .word
adr.ROW	= [DATAORIGIN+$05C0] .array [251] .word
.var ROW	= adr.ROW .word
adr.MODX	= [DATAORIGIN+$07B6] .array [320]
.var MODX	= adr.MODX .word
adr.MODY	= [DATAORIGIN+$08F6] .array [200]
.var MODY	= adr.MODY .word
adr.SCREEN	= [DATAORIGIN+$09BE] .array [1]
.var SCREEN	= adr.SCREEN .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
.by  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 3152

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0B $47 $61 $6D $65 $20 $50 $61  $75 $73 $65 $64 $00 $00 $00 $00  $00 $00 $AA $00 $00 $AA $00 $00
.by  $00 $55 $AA $00 $AA $00 $00 $00  $AA $00 $AA $00 $AA $AA $00 $00  $AA $AA $AA $00 $55 $55 $55 $00
.by  $55 $55 $FF $00 $55 $FF $55 $00  $55 $FF $FF $00 $FF $55 $55 $00  $FF $55 $FF $00 $FF $FF $55 $00
.by  $FF $FF $FF $00 $FF $D4 $D3 $D2  $D1 $D0 $CF $CE $CD $CC $CB $00  $00 $0A $00 $14 $00 $1E $00 $28
.by  $00 $32 $00 $64 $00 $C8 $00 $FA  $00 $F4 $01 $E8 $03 $00 $02 $13  $24 $35 $12 $23 $34 $45 $D4 $D3
.by  $D2 $D1 $D0 $CF $CE $CD $CC $CB  $00 $3C $5D $80 $7D $60 $37 $67  $6A $4F $5F $61 $7F $6F $00 $00
.by  $00 $E8 $03 $2C $01 $64 $00 $3C  $00 $23 $00 $00 $10 $14 $03 $12  $14 $14 $03
.endm

	end
