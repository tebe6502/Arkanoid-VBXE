; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/09/13] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	RCDATA 'atan_tab.dat' adr.ATAN_TAB 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'title.bmp' PRESENTS_OFS 0 1 0 0 0 0 0 0
	XBMP 'playscreen.bmp' PLAYSCREEN_OFS 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$000C
GETCOLOR	= DATAORIGIN+$000D
VIDEORAM	= DATAORIGIN+$000E
adr.LASTARCCOORDS	= DATAORIGIN+$0010	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0010
LASTARCCOORDS.Y	= DATAORIGIN+$0012
LASTARCCOORDS.XSTART	= DATAORIGIN+$0014
LASTARCCOORDS.YSTART	= DATAORIGIN+$0016
LASTARCCOORDS.XEND	= DATAORIGIN+$0018
LASTARCCOORDS.YEND	= DATAORIGIN+$001A
WIN_LEFT	= DATAORIGIN+$001C
WIN_RIGHT	= DATAORIGIN+$001E
WIN_TOP	= DATAORIGIN+$0020
WIN_BOTTOM	= DATAORIGIN+$0022
SCANLINE_WIDTH	= DATAORIGIN+$0024
CURRENTX	= DATAORIGIN+$0025
CURRENTY	= DATAORIGIN+$0027

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0065
POSITION	= DATAORIGIN+$0067
SIZE	= DATAORIGIN+$0069
ADR	= DATAORIGIN+$006B
SIZ	= DATAORIGIN+$006F

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_0169
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_0169
	cmp #$1F
	jne l_0178

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0178
	cmp #$18
	jne l_0187

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_0187

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0073
S	= DATAORIGIN+$0074
@CASETMP_0005	= DATAORIGIN+$0076

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0077

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0078

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0079
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETOVERLAYADDRESS				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000125  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+6
	lda a+1
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+7
	lda a+2
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW+8

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= DATAORIGIN+$007D

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$0081

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0035	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0035
VRAM.SIZE	= DATAORIGIN+$0039
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0173
B	= DATAORIGIN+$0174

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------


seed = MAIN.SYSTEM.RndSeed

Random16:
	lda seed+1
	tay 		; store copy of high byte
	; compute seed+1 ($39>>1 = %11100)
	lsr @		; shift to consume zeroes on left...
	lsr @
	lsr @
	sta seed+1	; now recreate the remaining bits in reverse order... %111
	lsr @
	eor seed+1
	lsr @
	eor seed+1
	eor seed+0	; recombine with original low byte
	sta seed+1
	; compute seed+0 ($39 = %111001)
	tya		; original high byte
	sta seed+0
	asl @
	eor seed+0
	asl @
	eor seed+0
	asl @
	asl @
	asl @
	eor seed+0
	sta seed+0

	lda seed+1
	and #$03
	sta Result+1
	lda seed
	sta Result

loop	cpw Result range
	bcc @exit

	lsr Result+1
	ror Result

	jmp loop

@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0175
RESULT	= DATAORIGIN+$0177

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000138  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod90Table,Y	; tablica: (X*256) mod 90
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda #0
    adc #0
    sta Result+1

    cpw Result #90
    BCC done
    SBW Result #90
    
    cpw Result #90
    BCC done
    SBW Result #90

    cpw Result #90
    BCC done
    SBW Result #90

done

    lda a+1
    bpl @exit
   
    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0179
RESULT	= DATAORIGIN+$017B

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD360						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000139  -------------------

    ldy a+1
    bpl @+

    lda #0
    sub a
    sta a
    lda #0
    sbc a+1
    tay
@
    LDA adr.Mod360Table,Y	; tablica: (X*256) mod 360
    CLC
    ADC a			; dodaj młodszy bajt
    sta Result
    lda adr.Mod360Table+256,Y
    adc #0
    sta Result+1

    cpw Result #360
    BCC done
    SBW Result #360
    
    cpw Result #360
    BCC done
    SBW Result #360

    cpw Result #360
    BCC done
    SBW Result #360

done

    lda a+1
    bpl @exit
   
    lda #0
    sub Result
    sta Result
    lda #0
    sbc Result+1
    sta Result+1

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$017D
RESULT	= DATAORIGIN+$017F

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	SINDEG						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 518

	lda A
	sta MOD360.A
	lda A+1
	sta MOD360.A+1
	jsr MOD360
	lda MOD360.RESULT
	sta A
	lda MOD360.RESULT+1
	sta A+1

; optimize OK (arkanoid_vbxe.pas), line = 520

	jpl l_01DC

; optimize OK (arkanoid_vbxe.pas), line = 521

	lda A
	add #$68
	sta A
	lda A+1
	adc #$01
	sta A+1
l_01DC

; optimize OK (arkanoid_vbxe.pas), line = 523

	lda A
	cmp #$5B
	lda A+1
	sbc #$00
	svc
	eor #$80
	jpl l_01F9

; optimize OK (arkanoid_vbxe.pas), line = 524

	ldy A
	lda adr.SINTABLE,y
	sta RESULT
	lda adr.SINTABLE+90,y
	jmp l_020A
l_01F9

; optimize OK (arkanoid_vbxe.pas), line = 525

	lda A
	cmp #$B5
	lda A+1
	sbc #$00
	svc
	eor #$80
	jpl l_021B

; optimize OK (arkanoid_vbxe.pas), line = 526

	lda #$B4
	sub A
	tay
	lda adr.SINTABLE,y
	sta RESULT
	lda adr.SINTABLE+90,y
	jmp l_0230
l_021B

; optimize OK (arkanoid_vbxe.pas), line = 527

	lda A
	cmp #$0F
	lda A+1
	sbc #$01
	svc
	eor #$80
	jpl l_0241

; optimize OK (arkanoid_vbxe.pas), line = 528

	ldy A
	lda #$00
	sub adr.SINTABLE-$B4,y
	sta RESULT
	lda #$00
	sbc adr.SINTABLE+90-$B4,y
	jmp l_0259
l_0241

; optimize OK (arkanoid_vbxe.pas), line = 530

	lda #$68
	sub A
	tay
	lda #$00
	sub adr.SINTABLE,y
	sta RESULT
	lda #$00
	sbc adr.SINTABLE+90,y
l_020A
l_0230
l_0259
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0181
RESULT	= DATAORIGIN+$0183

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	FASTSQRT					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 539

	lda I
	sta :STACKORIGIN+9
	lda I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda I+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda I+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$C0
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$1F
	sta I+3
	lda :STACKORIGIN+9
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	sta I+1

; optimize OK (arkanoid_vbxe.pas), line = 541

	lda I
	sta RESULT
	lda I+1
	sta RESULT+1
	lda I+2
	sta RESULT+2
	lda I+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0185
RESULT	= DATAORIGIN+$0189
I	= DATAORIGIN+$0185

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	Q0						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 551

	ldy X
	lda adr.LOG2_TAB,y
	sta LX

; optimize OK (arkanoid_vbxe.pas), line = 552

	ldy Y
	lda adr.LOG2_TAB,y
	sta LY

; optimize OK (arkanoid_vbxe.pas), line = 554

	lda LX
	cmp LY
	jcc l_02A5

; optimize OK (arkanoid_vbxe.pas), line = 555

	sbc LY
	tay
	lda #$00
	sub adr.ATAN_TAB,y
	and #$3F
	jmp l_02C5
l_02A5

; optimize OK (arkanoid_vbxe.pas), line = 557

	lda LY
	sub LX
	tay
	lda adr.ATAN_TAB,y
l_02C5
	sta RESULT
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$018D
Y	= DATAORIGIN+$018E
RESULT	= DATAORIGIN+$018F
LX	= DATAORIGIN+$0190
LY	= DATAORIGIN+$0191

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	ATAN2						; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 590

	lda X+1
	jpl l_02E9

; optimize OK (arkanoid_vbxe.pas), line = 591

	lda #$00
	sub X
	sta SX
	lda #$00
	sbc X+1
	jmp l_02FB
l_02E9

; optimize OK (arkanoid_vbxe.pas), line = 593

	lda X
	sta SX
	lda X+1
l_02FB
	sta SX+1

; optimize OK (arkanoid_vbxe.pas), line = 595

	lda Y+1
	jpl l_0311

; optimize OK (arkanoid_vbxe.pas), line = 596

	lda #$00
	sub Y
	sta SY
	lda #$00
	sbc Y+1
	jmp l_0323
l_0311

; optimize OK (arkanoid_vbxe.pas), line = 598

	lda Y
	sta SY
	lda Y+1
l_0323
	sta SY+1

; --- WhileProlog
	jmp l_032A
l_032B

; optimize OK (arkanoid_vbxe.pas), line = 603

	lsr SX+1
	ror SX

; optimize OK (arkanoid_vbxe.pas), line = 604

	lsr SY+1
	ror SY
l_032A

; optimize OK (arkanoid_vbxe.pas), line = 601

	lda SX+1
	jne l_032B
	lda SX
	jmi l_032B
	lda SY+1
	cmp #$00
	bne @+
	lda SY
	cmp #$80
@
	jcs l_032B

; optimize OK (arkanoid_vbxe.pas), line = 607

	lda X+1
	jpl l_0364

; optimize OK (arkanoid_vbxe.pas), line = 608

	lda #$00
	sub SX
	sta X
	lda #$00
	sbc SX+1
	jmp l_0376
l_0364

; optimize OK (arkanoid_vbxe.pas), line = 610

	lda SX
	sta X
	lda SX+1
l_0376
	sta X+1

; optimize OK (arkanoid_vbxe.pas), line = 613

	lda Y+1
	jpl l_038C

; optimize OK (arkanoid_vbxe.pas), line = 614

	lda #$00
	sub SY
	sta Y
	lda #$00
	sbc SY+1
	jmp l_039E
l_038C

; optimize OK (arkanoid_vbxe.pas), line = 616

	lda SY
	sta Y
	lda SY+1
l_039E
	sta Y+1

; optimize OK (arkanoid_vbxe.pas), line = 619

	lda #$00
	sta E

; optimize OK (arkanoid_vbxe.pas), line = 622

	lda Y+1
	jpl l_03B8
	lda E
	ora #$02
	sta E
l_03B8

; optimize OK (arkanoid_vbxe.pas), line = 623

	lda X+1
	jpl l_03D6
	lda E
	ora #$01
	sta E
l_03D6

; optimize OK (arkanoid_vbxe.pas), line = 626

	lda E
	cmp #$01
	jne l_03F5

; optimize OK (arkanoid_vbxe.pas), line = 630

	lda #$00
	sub X
	sta Q0.X
	lda Y
	sta Q0.Y
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 631

	lda #$00
	sub A
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 632

	and #$7F
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 633

	sta RESULT
	jmp @exit
l_03F5

; optimize OK (arkanoid_vbxe.pas), line = 636

	lda E
	cmp #$02
	jne l_042E

; optimize OK (arkanoid_vbxe.pas), line = 640

	lda #$00
	sub Y
	sta Q0.Y
	lda X
	sta Q0.X
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 641

	lda #$00
	sub A
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 642

	sta RESULT
	jmp @exit
l_042E

; optimize OK (arkanoid_vbxe.pas), line = 645

	lda E
	cmp #$03
	jne l_045D

; optimize OK (arkanoid_vbxe.pas), line = 650

	lda #$00
	sub Y
	sta Q0.Y
	lda #$00
	sub X
	sta Q0.X
	jsr Q0
	lda Q0.RESULT
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 651

	add #$80
	sta A

; optimize OK (arkanoid_vbxe.pas), line = 652

	sta RESULT
	jmp @exit
l_045D

; optimize OK (arkanoid_vbxe.pas), line = 656

	lda X
	sta Q0.X
	lda Y
	sta Q0.Y
	jsr Q0
	lda Q0.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

Y	= DATAORIGIN+$0192
X	= DATAORIGIN+$0194
RESULT	= DATAORIGIN+$0196
A	= DATAORIGIN+$0197
E	= DATAORIGIN+$0198
SX	= :STACKORIGIN-2
SY	= :STACKORIGIN-4

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 21

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 23

	sta @CASETMP_0007
	cmp #$0B
	jne l_049F
@

; optimize OK (service.pas), line = 24

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_04B0
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_04B0
	jmp a_0007
l_049F
	cmp #$07
	jne l_04BB

; optimize OK (service.pas), line = 25

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_04CC
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_04CC
l_04BB
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0199
A	= DATAORIGIN+$019B
@CASETMP_0007	= DATAORIGIN+$019C

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 34

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$019D

	rts						; ret
.endl

.local	BLITZERO					; PROCEDURE | REGISTER

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 49

	lda SRC+2
	sta BLT_ZERO.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 50

	lda SRC+1
	sta BLT_ZERO.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 51

	lda SRC
	sta BLT_ZERO.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 53

	lda HLP+1
	sta BLT_ZERO.DST_ADR.BYTE1

; optimize OK (service.pas), line = 54

	lda HLP
	sta BLT_ZERO.DST_ADR.BYTE0

; optimize OK (service.pas), line = 56

	lda W
	sta BLT_ZERO.SRC_STEP_Y
	lda W+1
	sta BLT_ZERO.SRC_STEP_Y+1

; optimize OK (service.pas), line = 58

	ldy H
	dey
	sty BLT_ZERO.BLT_HEIGHT

; optimize OK (service.pas), line = 60

	lda W
	sub #$01
	sta BLT_ZERO.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_ZERO.BLT_WIDTH+1

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 66

	lda BLT_ZERO
	sta VBXE.RUNBCB.A
	lda BLT_ZERO+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0526

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 67

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0526

; ------------------------------------------------------------

SRC	= :EDX
W	= :ECX
H	= :EAX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@0201810000181000

; optimize OK (service.pas), line = 75

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 76

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 84

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 85

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 86

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 88

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 89

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 90

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 92

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 94

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 96

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_057D

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 97

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_057D

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$019E

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITCLR						; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 105

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 106

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 108

	lda #$04
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 110

	lda HLP+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 111

	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 112

	lda HLP
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 113

	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 115

	lda #$02
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 117

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 119

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 121

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_05CA

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 122

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_05CA

; optimize OK (service.pas), line = 124

	lda #$03
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 126

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_05D8

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 127

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_05D8

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITSCR						; PROCEDURE | REGISTER

; optimize OK (service.pas), line = 135

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 136

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 138

	lda #$02
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 140

	lda #$00
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 141

	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 143

	lda #$02
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 144

	lda HLP+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 145

	lda HLP
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 147

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 149

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 151

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0622

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 152

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0622

; optimize OK (service.pas), line = 154

	lda #$03
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 156

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0630

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 157

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0630

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX
W	= :EAX
H	= DATAORIGIN+$019F

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE | REGISTER

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 203

	lda HLP+1
	sta BLT_BOX.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 204

	sta BLT_BOX.DST_ADR.BYTE1

; optimize OK (service.pas), line = 206

	lda HLP
	sta BLT_BOX.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 207

	sta BLT_BOX.DST_ADR.BYTE0

; optimize OK (service.pas), line = 209

	lda W
	sub #$01
	sta BLT_BOX.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT_BOX.BLT_WIDTH+1

; optimize OK (service.pas), line = 210

	ldy H
	dey
	sty BLT_BOX.BLT_HEIGHT

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 216

	lda BLT_BOX
	sta VBXE.RUNBCB.A
	lda BLT_BOX+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; --- WhileProlog
l_0673

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 217

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_0673

; ------------------------------------------------------------

W	= :EDX
H	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01A0

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 285

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_0695
	lda A
	sta RESULT
	lda A+1
	jmp l_06A4
l_0695

; optimize OK (service.pas), line = 286

	lda B
	sta RESULT
	lda B+1
l_06A4
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01A2
B	= DATAORIGIN+$01A4
RESULT	= DATAORIGIN+$01A6

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 292

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_06BF
	lda A
	sta RESULT
	lda A+1
	jmp l_06CE
l_06BF

; optimize OK (service.pas), line = 293

	lda B
	sta RESULT
	lda B+1
l_06CE
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01A8
B	= DATAORIGIN+$01AA
RESULT	= DATAORIGIN+$01AC

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 302

	sta STATUS

; -------------------  ASM Block 00000144  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$01AE

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 350

	lda #$00
	sta Y

l_06EA
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_06F8

; optimize OK (service.pas), line = 351

	sta :ecx
	lda #$5A
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	ldy Y
	lda :eax
	sta adr.MUL90_16,y
	lda :eax+1
	sta adr.MUL90_16+16,y

; --- ForToDoEpilog
	inc Y
	jne l_06EA
l_06F8

; optimize OK (service.pas), line = 353

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 355

	sta Y

l_0717
; --- ForToDoCondition
	lda #$0A
	sta @BYTE.MOD.B
	lda Y
	sta @BYTE.MOD.A
	jsr @BYTE.MOD
	lda @BYTE.MOD.RESULT
	ldy Y
	sta adr.MOD10TABLE,y

; optimize OK (service.pas), line = 358

	lda #$00
	sta @WORD.MOD.A
	lda Y
	sta @WORD.MOD.A+1
	lda #$5A
	sta @WORD.MOD.B
	lda #$00
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MOD90TABLE,y

; optimize OK (service.pas), line = 359

	lda #$00
	sta @WORD.MOD.A
	lda Y
	sta @WORD.MOD.A+1
	lda #$68
	sta @WORD.MOD.B
	lda #$01
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	ldy Y
	lda @WORD.MOD.RESULT
	sta adr.MOD360TABLE,y
	lda @WORD.MOD.RESULT+1
	sta adr.MOD360TABLE+256,y

; optimize OK (service.pas), line = 361

	ldy Y
	cpy #$C8
	jcc l_0766

; optimize OK (service.pas), line = 362

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_0777
l_0766

; optimize OK (service.pas), line = 364

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_0777
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 366

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_0717
l_0725

; ------------------------------------------------------------

Y	= DATAORIGIN+$01AF

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 381

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_079B

; optimize FAIL ('@print', service.pas), line = 382

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_079B

; optimize OK (service.pas), line = 386

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 387

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 389

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 391

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 392

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 394

	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A
	sta VBXE.SETOVERLAYADDRESS.A+1
	lda #$03
	sta VBXE.SETOVERLAYADDRESS.A+2
	lda #$00
	sta VBXE.SETOVERLAYADDRESS.A+3
	jsr VBXE.SETOVERLAYADDRESS

; optimize OK (service.pas), line = 396

	lda #$00
	sta VBXE_RAM.POSITION
	sta VBXE_RAM.POSITION+1
	lda #$03
	sta VBXE_RAM.POSITION+2
	lda #$00
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 397

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$03
	sta VBXE_RAM.SIZE+2
	lda #$00
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 398

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 400

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000145  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 406

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 407

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 408

	lda BLT_BOX
	sta :bp2
	lda BLT_BOX+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 409

	lda BLT_ZERO
	sta :bp2
	lda BLT_ZERO+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 412

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 413

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 417

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 421

	lda #$03
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 423

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 424

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 426

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 428

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 429

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 431

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 433

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 435

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; optimize OK (service.pas), line = 439

	lda #$02
	sta BLT_BOX.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 441

	lda #$03
	sta BLT_BOX.DST_ADR.BYTE2

; optimize OK (service.pas), line = 443

	lda #$40
	sta BLT_BOX.DST_STEP_Y
	lda #$01
	sta BLT_BOX.DST_STEP_Y+1

; optimize OK (service.pas), line = 444

	lda #$40
	sta BLT_BOX.SRC_STEP_Y
	lda #$01
	sta BLT_BOX.SRC_STEP_Y+1

; optimize OK (service.pas), line = 446

	sta BLT_BOX.SRC_STEP_X

; optimize OK (service.pas), line = 447

	sta BLT_BOX.DST_STEP_X

; optimize OK (service.pas), line = 451

	lda #$FF
	sta BLT_BOX.BLT_AND_MASK

; optimize OK (service.pas), line = 455

	lda #$03
	sta BLT_ZERO.DST_ADR.BYTE2

; optimize OK (service.pas), line = 457

	lda #$40
	sta BLT_ZERO.DST_STEP_Y
	lda #$01
	sta BLT_ZERO.DST_STEP_Y+1

; optimize OK (service.pas), line = 459

	sta BLT_ZERO.SRC_STEP_X

; optimize OK (service.pas), line = 460

	sta BLT_ZERO.DST_STEP_X

; optimize OK (service.pas), line = 462

	sta BLT_ZERO.BLT_CONTROL

; optimize OK (service.pas), line = 464

	lda #$FF
	sta BLT_ZERO.BLT_AND_MASK

; -------------------  ASM Block 00000146  -------------------

	  fxs FX_MEMS #$00
	
; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 471

	jsr SYSTEM.PAUSE.@00

; -------------------  ASM Block 00000147  -------------------

  sei
  lda #0
  sta nmien
  sta irqen
  
  lda #$fe
  sta portb
 
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 499

	lda SHINEREC.XB
	sta XB

; optimize OK (service.pas), line = 500

	lda SHINEREC.YB
	sta YB

; optimize OK (service.pas), line = 502

	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; -------------------  ASM Block 00000148  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 509

	ldy I
	lda adr.WALL,y
	cmp #$09
	jcc l_0866

; optimize OK (service.pas), line = 511

	lda SHINEREC.FRAME
	lsr @
	sta FRAME

; optimize OK (service.pas), line = 512

	lda adr.WALL,y
	cmp #$0A
	jeq l_0886
	lda FRAME
	add #$05
	sta FRAME
l_0886

; optimize OK (service.pas), line = 514

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XF

; optimize OK (service.pas), line = 515

	lda YB
	asl @
	asl @
	asl @
	add #$16
	sta YF

; optimize OK (service.pas), line = 516

	lda FRAME
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 519

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 521

	lda YF
	add Y
	tay
	lda XF
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$00
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	add FR
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$91
	adc FR+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000
l_0866

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
       
; optimize FAIL (0, service.pas), line = 540

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 541

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_08E9
	lda #$00
	sta SHINEREC.ACTIVE
l_08E9

; ------------------------------------------------------------

XB	= DATAORIGIN+$01B0
YB	= DATAORIGIN+$01B1
FRAME	= DATAORIGIN+$01B2
XF	= DATAORIGIN+$01B3
YF	= DATAORIGIN+$01B4
FR	= DATAORIGIN+$01B5
Y	= DATAORIGIN+$01B7
I	= DATAORIGIN+$01B8

@VarData	= XB
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 551

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 552

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 560

	lda SHINEREC.ACTIVE
	jeq l_0909
	jsr UNSHINE_BLOCK
l_0909

; optimize OK (service.pas), line = 562

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 563

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 564

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 565

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 566

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$01B9
YB	= DATAORIGIN+$01BA

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 573

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_094A
	jsr SHINE_BLOCK
l_094A

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_0953

; optimize OK (service.pas), line = 582

	lda #$64
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda RAND.RESULT+1
	sta RN+1

; optimize OK (service.pas), line = 583

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 584

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_0961

; optimize FAIL (0, service.pas), line = 589

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 590

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 593

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_0961

; optimize OK (service.pas), line = 597

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_0953

; optimize OK (service.pas), line = 599

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01BB
RN	= DATAORIGIN+$01BD
SUM	= DATAORIGIN+$01BF
LETTER	= DATAORIGIN+$01C1

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 607

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$9E
	add :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$CC
	add :STACKORIGIN+10
	sta SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta SRC+3

; -------------------  ASM Block 00000150  -------------------

       fxs FX_MEMS #$80
     
; optimize OK (service.pas), line = 613

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 614

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 615

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 617

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 619

	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 620

	lda HLP
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000151  -------------------

       fxs FX_MEMS #$00
     
; optimize OK (service.pas), line = 626

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01C3

@VarData	= SRC
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 634

	ldy LETT.Y
	cpy #$C8
	jcs l_09F5

; optimize OK (service.pas), line = 636

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 638

	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_09F5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 647

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 648

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 654

	lda LETT.ACTIVE
	jeq l_0A22
	jsr DISABLE_LETTER
l_0A22

; optimize OK (service.pas), line = 656

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 657

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 658

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 659

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 660

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 661

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$01C7
YL	= DATAORIGIN+$01C8
LETTER	= DATAORIGIN+$01C9

@VarData	= XL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 667

	lda LETT.ACTIVE
	jeq l_0A53

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 669

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 670

	inc LETT.Y

; optimize OK (service.pas), line = 671

	lda LETT.Y
	cmp #$C8
	jcc l_0A6B
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 672
	jmp l_0A76
l_0A6B

; optimize FAIL ('PUT_LETTER', service.pas), line = 674

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 675

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 676

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0A8D

; optimize OK (service.pas), line = 678

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 679

	inc LETT.FRAME
l_0A8D

; optimize OK (service.pas), line = 682

	lda LETT.FRAME
	cmp #$08
	jne l_0AAA
	lda #$00
	sta LETT.FRAME
l_0AAA

; optimize OK (service.pas), line = 684

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0B03
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0B03
	jeq l_0B03
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0B03
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0B03
	jeq l_0B03
@

; optimize OK (service.pas), line = 687

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 688

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 689

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0A76

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 690

	jsr DISABLE_LETTER
l_0B03

; optimize OK (service.pas), line = 694

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0B24
l_0A53

; optimize OK (service.pas), line = 696

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0B35

; optimize OK (service.pas), line = 697

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0B24
l_0B35

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 707

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 709

	lda #$FC
	sta BLITZERO.SRC
	lda #$BF
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01CB
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 719

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 721

	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01CF
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 742

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 753

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0B97s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_0B97s
	lda:sne #$01
l_0B97s	lda #$00
	sta B0

; optimize OK (service.pas), line = 754

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.X-DATAORIGIN
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0BAFs
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.Y-DATAORIGIN
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0BAFs
	lda:seq #$00
l_0BAFs	lda #$01
	sta B1

; optimize OK (service.pas), line = 756

	lda B0
	and B1
	jeq l_0BC1

; optimize OK (service.pas), line = 757

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0BC1

; optimize OK (service.pas), line = 759

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 761

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 762

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01D3
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$01D7
B1	= DATAORIGIN+$01D8

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 774

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 775

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 777

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 778

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 780

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta I
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+3

; optimize OK (service.pas), line = 782

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	inx
	lda FASTSQRT.RESULT
	sta :FPMAN0
	lda FASTSQRT.RESULT+1
	sta :FPMAN1
	lda FASTSQRT.RESULT+2
	sta :FPMAN2
	lda FASTSQRT.RESULT+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta LEN
	lda :FPMAN1
	sta LEN+1
	dex

; optimize OK (service.pas), line = 784

	lda LEN+1
	ora LEN
	jeq @exit
l_0C18

; optimize OK (service.pas), line = 788

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda A
	sta :eax
	lda A+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1

; optimize OK (service.pas), line = 790

	ora X
	jeq @exit
l_0C3B

; optimize OK (service.pas), line = 792

	lda SPEED
	sta :ecx
	lda SPEED+1
	sta :ecx+1
	lda B
	sta :eax
	lda B+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LEN
	sta @CARDINAL.DIV.B
	lda LEN+1
	sta @CARDINAL.DIV.B+1
	lda #$00
	sta @CARDINAL.DIV.B+2
	sta @CARDINAL.DIV.B+3
	jsr @CARDINAL.DIV
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1

; optimize OK (service.pas), line = 794

	ora Y
	jeq @exit
l_0C5E

; optimize OK (service.pas), line = 796

	lda X
	cmp #$00
	lda X+1
	sbc #$04
	svc
	eor #$80
	jmi l_0C72
	lda #$FF
	sta X
	lda #$03
	sta X+1
l_0C72

; optimize OK (service.pas), line = 797

	lda Y
	cmp #$00
	lda Y+1
	sbc #$04
	svc
	eor #$80
	jmi l_0C8A
	lda #$FF
	sta Y
	lda #$03
	sta Y+1
l_0C8A

; optimize OK (service.pas), line = 799

	lda SX+1
	jpl l_0CA2
	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
l_0CA2

; optimize OK (service.pas), line = 800

	lda SY+1
	jpl l_0CBE
	lda #$00
	sub Y
	sta Y
	lda #$00
	sbc Y+1
	sta Y+1
l_0CBE

; optimize OK (service.pas), line = 802

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda X+1
	sta (:bp2),y

; optimize OK (service.pas), line = 803

	ldy #BALL.SPEEDY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda Y+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01D9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
SPEED	= DATAORIGIN+$01DD
SX	= DATAORIGIN+$01DF
SY	= DATAORIGIN+$01E1
X	= DATAORIGIN+$01E3
Y	= DATAORIGIN+$01E5
A	= DATAORIGIN+$01E7
B	= DATAORIGIN+$01E9
LEN	= DATAORIGIN+$01EB
I	= DATAORIGIN+$01ED

@VarData	= BALL
@VarDataSize	= 22

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 849

	lda ANGLE
	add #$5A
	sta SINDEG.A
	lda ANGLE+1
	adc #$00
	sta SINDEG.A+1
	jsr SINDEG
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SINDEG.RESULT
	sta (:bp2),y
	iny
	lda SINDEG.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 850

	lda ANGLE
	sta SINDEG.A
	lda ANGLE+1
	sta SINDEG.A+1
	jsr SINDEG
	inx
	mva SINDEG.RESULT :STACKORIGIN,x
	mva SINDEG.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01F1
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
ANGLE	= DATAORIGIN+$01F5

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 893

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta ATAN2.X
	iny
	lda (:bp2),y
	sta ATAN2.X+1
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta ATAN2.Y
	iny
	lda #$00
	sbc (:bp2),y
	sta ATAN2.Y+1
	jsr ATAN2
	ldy ATAN2.RESULT
	lda adr.SCALE360,y
	sta RESULT
	lda adr.SCALE360+256,y
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01F7
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$01FB

@VarData	= BALL
@VarDataSize	= 2

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 903

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 909

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 914

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 915

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 917

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 919

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 920

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01FD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$19
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 932

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 933

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 935

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta I
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta I+3

; optimize OK (service.pas), line = 937

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	inx
	lda FASTSQRT.RESULT
	sta :FPMAN0
	lda FASTSQRT.RESULT+1
	sta :FPMAN1
	lda FASTSQRT.RESULT+2
	sta :FPMAN2
	lda FASTSQRT.RESULT+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	dex
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0201	; [26] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0201
BALL.Y	= DATAORIGIN+$0203
BALL.FINEX	= DATAORIGIN+$0205
BALL.FINEY	= DATAORIGIN+$0206
BALL.OLDX	= DATAORIGIN+$0207
BALL.OLDY	= DATAORIGIN+$0209
BALL.SPEED	= DATAORIGIN+$020B
BALL.FINESPEED	= DATAORIGIN+$020D
BALL.SPEEDX	= DATAORIGIN+$020F
BALL.SPEEDY	= DATAORIGIN+$0211
BALL.SBD	= DATAORIGIN+$0213
BALL.BRWHIT	= DATAORIGIN+$0215
BALL.INPLAY	= DATAORIGIN+$0216
BALL.LAUNCH	= DATAORIGIN+$0217
BALL.ONVAUS	= DATAORIGIN+$0218
BALL.STM	= DATAORIGIN+$021A
RESULT	= DATAORIGIN+$021B
I	= DATAORIGIN+$021D
A	= DATAORIGIN+$0221
B	= DATAORIGIN+$0223

@VarData	= BALL.X
@VarDataSize	= 34

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 953

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDX-DATAORIGIN
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 954

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDY-DATAORIGIN
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 956

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 957

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 959

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y

; optimize OK (service.pas), line = 960

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y

; optimize OK (service.pas), line = 965

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0DB5

; optimize OK (service.pas), line = 967

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 968

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$01
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 969

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 970

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$05
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_0DB5

; optimize OK (service.pas), line = 975

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0DEB

; optimize OK (service.pas), line = 977

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 978

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 979

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 980

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$05
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_0DEB

; optimize OK (service.pas), line = 985

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0E21

; optimize OK (service.pas), line = 987

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 988

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 989

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 990

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$05
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_0E21

; optimize OK (service.pas), line = 998

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 999

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1000

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 1003

	lda B0
	and B1
	and B2
	jeq l_0E83

; optimize OK (service.pas), line = 1007

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0EB2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0EB2

; optimize OK (service.pas), line = 1010

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1012

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1014

	lda VAUS.LETTER
	cmp #$06
	jne l_0EDA
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0EDA

; optimize OK (service.pas), line = 1016

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1017

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1018

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0EDA

; optimize OK (service.pas), line = 1021

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$06
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1025

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0F0A

; optimize OK (service.pas), line = 1028

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1032

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1040

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1045

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F0A

; optimize OK (service.pas), line = 1051

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0F4B

; optimize OK (service.pas), line = 1053

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1054

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1055

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1056

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0F4B
l_0EB2
l_0E83

; optimize OK (service.pas), line = 1067

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0F9A

; optimize OK (service.pas), line = 1069

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1070

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0F9A

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0225
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$0229
B1	= DATAORIGIN+$022A
B2	= DATAORIGIN+$022B
X	= DATAORIGIN+$022C
Y	= DATAORIGIN+$022E
ANGLE	= DATAORIGIN+$0230

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1078

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1079

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1080

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1086

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1087

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1089

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1090

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1091

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1095

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1099

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1100

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1101

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1102

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1112

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1113

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1127

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1129

	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1131

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1141

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1143

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_102C

; optimize FAIL (0, service.pas), line = 1145

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1146

	lda #$00
	sta VAUS.IFLASH
l_102C

; optimize OK (service.pas), line = 1149

	lda VAUS.FLASH
	cmp #$0B
	jcc l_1049
	lda #$00
	sta VAUS.FLASH
l_1049

; optimize OK (service.pas), line = 1159

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1161

	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000152  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1167

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1169

	lda HLP
	sta VIDEO
	lda HLP+1
	sta VIDEO+1
	lda #$03
	sta VIDEO+2
	lda #$00
	sta VIDEO+3

; optimize OK (service.pas), line = 1171

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1173

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1175

	lda #$00
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1176

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1178

	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1180

	ldy VAUS.WIDTH
	dey
	sty I

; optimize OK (service.pas), line = 1182

	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1184

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1185

	lda #$00
	sta BLT.BLT_XOR_MASK

; -------------------  ASM Block 00000153  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$0232
Y	= DATAORIGIN+$0233
VIDEO	= DATAORIGIN+$0234

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1224

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_10F6

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1225

	jsr REMOVE_VAUS
l_10F6

; optimize OK (service.pas), line = 1227

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1228

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1236

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1237

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1239

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0238
Y	= DATAORIGIN+$023A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1254

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1255

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1257

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000154  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1264

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1265

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1267

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1268

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1312

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1313

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1315

	lda #$03
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1317

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1321

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1322

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1324

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 1330

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$10
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$08
	sta BLITSCR.H
	jsr BLITSCR

; optimize OK (service.pas), line = 1340

	lda XS
	add #$08
	sta XS

; optimize OK (service.pas), line = 1341

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1344

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1345

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1347

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1349

	lda XS
	add #$11
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_11C3

; optimize OK (service.pas), line = 1350

	lda #$08
	jmp l_11D1
l_11C3

; optimize OK (service.pas), line = 1352

	lda #$11
l_11D1
	sta I

; optimize OK (service.pas), line = 1355

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1357

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1407

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1408

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1410

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$023C
YA	= DATAORIGIN+$023D
I	= DATAORIGIN+$023E
XS	= DATAORIGIN+$023F
YS	= DATAORIGIN+$0240

@VarData	= XA
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1432

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1433

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1435

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000156  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1442

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1443

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1444

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1446

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1447

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1450

	lda #$80
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1451

	lda BLOCK
	sub #$01
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1453

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1454

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1456

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1457

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1505

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1513

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1515

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1516

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1518

	lda XS
	add #$19
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D9
@
	jcc l_12D4

; optimize OK (service.pas), line = 1519

	lda #$08
	jmp l_12E2
l_12D4

; optimize OK (service.pas), line = 1521

	lda #$11
l_12E2
	sta I

; optimize OK (service.pas), line = 1524

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1526

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda I
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1529

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 1530

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 1566

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1568

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1569

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1572

	lda BLOCK
	cmp #$09
	jcc l_133D

; optimize OK (service.pas), line = 1574

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1575

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_1358

; optimize OK (service.pas), line = 1577

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1578

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_1377
l_1358

; optimize OK (service.pas), line = 1584

	lda BLOCK
	cmp #$0A
	jne l_1389
	lda #$C9
	sta CL2
l_1377
l_1389

; optimize OK (service.pas), line = 1588

	lda #$00
	sta I

; optimize OK (service.pas), line = 1591

	lda #$06
	sta Y

l_139D
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+9
	ldy I
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+9
	sta CL2

; optimize OK (service.pas), line = 1608

	sta adr.SCR,y

; optimize OK (service.pas), line = 1610

	lda I
	add #$10
	sta I

; --- ForToDoEpilog
	dec Y
	jpl l_139D
l_13AB

; optimize OK (service.pas), line = 1616

	lda #$0E
	sta X

l_13DA
; --- ForToDoCondition
	lda CL2
	and #$7F
	sta :STACKORIGIN+10
	ldy X
	lda adr.SCR,y
	and #$80
	ora :STACKORIGIN+10
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_13DA
l_13E8
l_133D

; optimize OK (service.pas), line = 1634

	lda #$10
	sta BLITSCR.SWIDTH
	lda #$40
	sta BLITSCR.DWIDTH
	lda #$01
	sta BLITSCR.DWIDTH+1
	lda #$0F
	sta BLITSCR.W
	lda #$00
	sta BLITSCR.W+1
	lda #$07
	sta BLITSCR.H
	jsr BLITSCR

; -------------------  ASM Block 00000157  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$0241
YA	= DATAORIGIN+$0242
BLOCK	= DATAORIGIN+$0243
XS	= DATAORIGIN+$0244
YS	= DATAORIGIN+$0245
X	= DATAORIGIN+$0246
Y	= DATAORIGIN+$0247
I	= DATAORIGIN+$0248
CL	= DATAORIGIN+$0249
CL2	= DATAORIGIN+$024A

@VarData	= XA
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1650

	lda #$00
	sta Y

l_141B
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_1429

; optimize OK (service.pas), line = 1652

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1654

	lda #$00
	sta X

l_143C
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_144A

; optimize OK (service.pas), line = 1655

	adc I
	tay
	lda adr.WALL,y
	jeq l_1465
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_1465

; --- ForToDoEpilog
	inc X
	jne l_143C
l_144A

; --- ForToDoEpilog
	inc Y
	jne l_141B
l_1429

; ------------------------------------------------------------

X	= DATAORIGIN+$024B
Y	= DATAORIGIN+$024C
I	= DATAORIGIN+$024D

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1681

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1682

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1685

	lda #$00
	sta Y

l_149F
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_14AD

; optimize OK (service.pas), line = 1686

	lda #$00
	sta X

l_14B6
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_14C4

; optimize OK (service.pas), line = 1689

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_14FC
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_14FC
	inc REMAIN_BLK
l_14FC

; --- ForToDoEpilog
	inc X
	jne l_14B6
l_14C4

; --- ForToDoEpilog
	inc Y
	jne l_149F
l_14AD

; optimize OK (service.pas), line = 1691

	lda WL
	sub #$01
	and #$03
	sta WL

; optimize OK (service.pas), line = 1693

	sta @CASETMP_0008
	cmp #$00
	jne l_1526
@

; optimize OK (service.pas), line = 1694

	:7 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_1526
	cmp #$01
	jne l_152F

; optimize OK (service.pas), line = 1695

	:7 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_152F
	cmp #$02
	jne l_1538

; optimize OK (service.pas), line = 1696

	:7 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_1538
	cmp #$03
	jne l_1541

; optimize OK (service.pas), line = 1697

	:7 mva adr.PATTERN3+# adr.PATTERN+#
l_1541
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$024E
Y	= DATAORIGIN+$024F
WL	= DATAORIGIN+$0250
@CASETMP_0008	= DATAORIGIN+$0251

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1724

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1725

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1726

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1727

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1729

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1731

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP1

; optimize OK (service.pas), line = 1732

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP1

; optimize OK (service.pas), line = 1733

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP2

; optimize OK (service.pas), line = 1734

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP2

; optimize OK (service.pas), line = 1736

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XK

; optimize OK (service.pas), line = 1737

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YK

; optimize OK (service.pas), line = 1738

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XJ

; optimize OK (service.pas), line = 1739

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YJ

; optimize OK (service.pas), line = 1741

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XH

; optimize OK (service.pas), line = 1742

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YH

; optimize OK (service.pas), line = 1743

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XN

; optimize OK (service.pas), line = 1744

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YN

; optimize OK (service.pas), line = 1755

	lda XP1
	cmp XP2
	jne l_15C3x
	lda YP1
	cmp YP2
	jeq l_15C3
l_15C3x

; optimize OK (service.pas), line = 1757

	lda YP1
	cmp YP2
	jeq l_15D8

; optimize OK (service.pas), line = 1759

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_15E5
l_15E6

; optimize OK (service.pas), line = 1763

	lda XH
	add XN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1764

	lda YH
	add YN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1766

	lsr @
	lsr @
	lsr @
	sta YP

; optimize OK (service.pas), line = 1768

	cmp YP1
	jne l_1624

; optimize OK (service.pas), line = 1770

	lda X
	sta XH

; optimize OK (service.pas), line = 1771

	lda Y
	sta YH
l_1624

; optimize OK (service.pas), line = 1774

	lda YP
	cmp YP2
	jne l_1647

; optimize OK (service.pas), line = 1776

	lda X
	sta XN

; optimize OK (service.pas), line = 1777

	lda Y
	sta YN
l_1647
l_15E5

; optimize OK (service.pas), line = 1761

	lda YN
	and #$07
	jeq l_15E6w
	lda YN
	and #$07
	cmp #$07
	jne l_15E6
l_15E6w
l_15D8

; optimize OK (service.pas), line = 1783

	lda XP1
	cmp XP2
	jeq l_168C

; optimize OK (service.pas), line = 1785

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1699
l_169A

; optimize OK (service.pas), line = 1789

	lda XK
	add XJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1790

	lda YK
	add YJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1792

	lda X
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP

; optimize OK (service.pas), line = 1794

	cmp XP1
	jne l_16D8

; optimize OK (service.pas), line = 1796

	lda X
	sta XK

; optimize OK (service.pas), line = 1797

	lda Y
	sta YK
l_16D8

; optimize OK (service.pas), line = 1800

	lda XP
	cmp XP2
	jne l_16FB

; optimize OK (service.pas), line = 1802

	lda X
	sta XJ

; optimize OK (service.pas), line = 1803

	lda Y
	sta YJ
l_16FB
l_1699

; optimize OK (service.pas), line = 1787

	lda XJ
	and #$0F
	jeq l_169Aw
	lda XJ
	and #$0F
	cmp #$0F
	jne l_169A
l_169Aw
l_168C

; optimize OK (service.pas), line = 1814

	lda COLLISION
	cmp #$01
	jne l_173E
; optimize OK (service.pas), line = 1816
; optimize OK (service.pas), line = 1817
	jmp l_1754
l_173E

; optimize OK (service.pas), line = 1819

	lda COLLISION
	cmp #$02
	jne l_1766

; optimize OK (service.pas), line = 1821

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1822

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	jmp l_177C
l_1766

; optimize OK (service.pas), line = 1824

	lda COLLISION
	cmp #$03
	jne l_178E

; optimize OK (service.pas), line = 1826

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1827

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_1754

; optimize OK (service.pas), line = 1828

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1829

	mwy Y2 :bp2
	ldy #$00
	lda YN
l_177C
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_178E
	jmp l_17B2
l_15C3

; optimize OK (service.pas), line = 1834

	lda #$02
	jsr FATAL_ERROR
l_17B2

; optimize OK (service.pas), line = 1837

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1838

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1839

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1840

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1843

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1844

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1851

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0252
Y1	= DATAORIGIN+$0254
X2	= DATAORIGIN+$0256
Y2	= DATAORIGIN+$0258
RESULT	= DATAORIGIN+$025A
X	= DATAORIGIN+$025B
Y	= DATAORIGIN+$025C
XK	= DATAORIGIN+$025D
YK	= DATAORIGIN+$025E
XJ	= DATAORIGIN+$025F
YJ	= DATAORIGIN+$0260
XH	= DATAORIGIN+$0261
YH	= DATAORIGIN+$0262
XN	= DATAORIGIN+$0263
YN	= DATAORIGIN+$0264
XP1	= DATAORIGIN+$0265
YP1	= DATAORIGIN+$0266
XP2	= DATAORIGIN+$0267
YP2	= DATAORIGIN+$0268
XP	= DATAORIGIN+$0269
YP	= DATAORIGIN+$026A
COLLISION	= DATAORIGIN+$026B

@VarData	= X1
@VarDataSize	= 25

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1862

	lda #$0C
	cmp XB
	jcc l_17F2
	lda #$0E
	cmp YB
	jcc l_17F2

; optimize OK (service.pas), line = 1865

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1867

	tay
	lda adr.WALL,y
	jeq l_1818

; optimize OK (service.pas), line = 1869

	cmp #$0A
	jcs l_182E

; optimize OK (service.pas), line = 1871

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1872

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1876

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1878

	lda #$2C
	sta RAND.RANGE
	lda #$01
	sta RAND.RANGE+1
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1880

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta LETT.NEXTX

; optimize OK (service.pas), line = 1881

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1882

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1884

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1885

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$03
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1886

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1887

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1886
l_182E

; optimize OK (service.pas), line = 1892

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_189F

; optimize OK (service.pas), line = 1894

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1895

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1897

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$04
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1898

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18BB
l_189F

; optimize OK (service.pas), line = 1902

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1903

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1905

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_18BB
l_1886
l_1818
l_17F2

; ------------------------------------------------------------

XB	= DATAORIGIN+$026C
YB	= DATAORIGIN+$026D
BALL	= DATAORIGIN+$026E
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
I	= DATAORIGIN+$0272

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1916

	lda #$0C
	cmp XB
	jcc l_18EC
	lda #$0E
	cmp YB
	jcc l_18EC

; optimize OK (service.pas), line = 1919

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1921

	tay
	lda adr.WALL,y
	jeq l_1912

; optimize OK (service.pas), line = 1923

	cmp #$0A
	jcs l_1928

; optimize OK (service.pas), line = 1925

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1926

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1927

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1928

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1929

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$03
	jmp l_1952
l_1928

; optimize OK (service.pas), line = 1934

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_196B

; optimize OK (service.pas), line = 1936

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1937

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$04
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1938

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1983
l_196B

; optimize OK (service.pas), line = 1942

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1943

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$07
l_1952
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_1983
l_1912
l_18EC

; ------------------------------------------------------------

XB	= DATAORIGIN+$0273
YB	= DATAORIGIN+$0274
I	= DATAORIGIN+$0275

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1977

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 1979

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 1980

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 1983

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 1984

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 1986

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 1987

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 1991

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_19EE

; optimize OK (service.pas), line = 1993

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 1999

	cmp #$03
	jne l_1A09

; optimize OK (service.pas), line = 2001

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 2002

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 2004

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2005

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2007

	lda LX
	sta SYSTEM.ABS.@010184000.X
	lda LX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda LY
	sta SYSTEM.ABS.@010184000.X
	lda LY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B

; optimize OK (service.pas), line = 2009

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta F1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F1+3

; optimize OK (service.pas), line = 2011

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta A
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta B

; optimize OK (service.pas), line = 2013

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :TMP
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :TMP+1
	ldy #$00
	lda (:bp2),y
	add (:TMP),y
	sta F2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+1
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+2
	iny
	lda (:bp2),y
	adc (:TMP),y
	sta F2+3

; optimize OK (service.pas), line = 2015

	lda F1+2
	cmp F2+2
	bne @+
	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_1A8E

; optimize OK (service.pas), line = 2021

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2022

	sta MAX.A
	lda #$00
	sta MAX.A+1
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2023

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2026

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1AD2

; optimize OK (service.pas), line = 2028

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2029

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2030

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1B00
l_1AD2

; optimize OK (service.pas), line = 2034

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2035

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1B00
	jmp l_1B13
l_1A8E

; optimize OK (service.pas), line = 2045

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2046

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2047

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2049

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1B56

; optimize OK (service.pas), line = 2051

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2052

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2054

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2055

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2056

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1B56
l_1B13
l_1A09

; optimize OK (service.pas), line = 2062

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2063

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2066

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2068

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2069

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2096

	cmp X
	jcs l_1BE0
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1BE0

; optimize OK (service.pas), line = 2098

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2099

	lda #$01
	sta EMERGENCY
l_1BE0

; optimize OK (service.pas), line = 2103

	lda #$07
	sub Y
	cmp X
	jcs l_1C15
	lda X
	cmp Y
	jcs l_1C15

; optimize OK (service.pas), line = 2105

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2106

	lda #$03
	sta EMERGENCY
l_1C15

; optimize OK (service.pas), line = 2110

	lda X
	cmp Y
	jcs l_1C4A
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1C4A

; optimize OK (service.pas), line = 2112

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2113

	lda #$02
	sta EMERGENCY
l_1C4A

; optimize OK (service.pas), line = 2117

	lda #$07
	sub X
	cmp Y
	jcs l_1C7F
	lda Y
	cmp X
	jcs l_1C7F

; optimize OK (service.pas), line = 2119

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2120

	lda #$04
	sta EMERGENCY
l_1C7F

; optimize OK (service.pas), line = 2124

	lda X
	cmp Y
	jeq l_1CB4x
	lda #$07
	sub Y
	cmp X
	jne l_1CB4
l_1CB4x

; optimize OK (service.pas), line = 2126

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2127

	sta TOUCH

; optimize OK (service.pas), line = 2135

	lda X
	cmp #$05
	jcc l_1CCF
	lda TOUCH
	ora #$01
	sta TOUCH
l_1CCF

; optimize OK (service.pas), line = 2136

	lda Y
	cmp #$05
	jcc l_1CEE
	lda TOUCH
	ora #$02
	sta TOUCH
l_1CEE

; optimize OK (service.pas), line = 2145

	lda #$FF
	sta LX
	sta LX+1

l_1D04
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D10

; optimize OK (service.pas), line = 2146

	lda #$FF
	sta LY
	sta LY+1

l_1D19
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1D25

; optimize FAIL (1, service.pas), line = 2148

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc LX+1
	sta MIN.A+1
	lda #$0C
	sta MIN.B
	lda #$00
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2149

	lda YB
	add LY
	sta MY
	lda #$00
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2151

	lda XB
	add LX
	jmi l_1D7Ex
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1D7Ex
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1D7E
l_1D7Ex

; optimize OK (service.pas), line = 2154

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$0A
	jmp l_1D9F
l_1D7E

; optimize OK (service.pas), line = 2156

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$14
l_1D9F
	sta adr.ADJW+$01,y

; --- ForToDoEpilog
	inc LY
	jne l_1D19
	inc LY+1
	jmp l_1D19
l_1D25

; --- ForToDoEpilog
	inc LX
	jne l_1D04
	inc LX+1
	jmp l_1D04
l_1D10

; -------------------  ASM Block 00000158  -------------------

	lda #0
	sta around

	lda #10

	cmp adr.ADJW
	ror around
	cmp adr.ADJW+$04
	ror around
	cmp adr.ADJW+$08
	ror around	
	cmp adr.ADJW+$09
	ror around
	cmp adr.ADJW+$0A
	ror around
	cmp adr.ADJW+$06
	ror around
	cmp adr.ADJW+$02
	ror around
	cmp adr.ADJW+$01
	ror around
	
; optimize OK (service.pas), line = 2237

	lda TOUCH
	jne l_1DD2

; optimize OK (service.pas), line = 2239

	lda AROUND
	and #$83
	jne l_1DE9
	lda #$11
	sta DEFLECT
l_1DE9

; optimize OK (service.pas), line = 2240

	lda AROUND
	and #$83
	cmp #$01
	jne l_1E06
	lda #$33
	sta DEFLECT
l_1E06

; optimize OK (service.pas), line = 2241

	lda AROUND
	and #$83
	cmp #$02
	jne l_1E23
	lda #$10
	sta DEFLECT
l_1E23

; optimize OK (service.pas), line = 2242

	lda AROUND
	and #$83
	cmp #$03
	jne l_1E40
	lda #$12
	sta DEFLECT
l_1E40

; optimize OK (service.pas), line = 2243

	lda AROUND
	and #$83
	cmp #$80
	jne l_1E5D
	lda #$01
	sta DEFLECT
l_1E5D

; optimize OK (service.pas), line = 2244

	lda AROUND
	and #$83
	cmp #$81
	jne l_1E7A
	lda #$21
	sta DEFLECT
l_1E7A

; optimize OK (service.pas), line = 2245

	lda AROUND
	and #$83
	cmp #$82
	jne l_1E97
	lda #$11
	sta DEFLECT
l_1E97

; optimize OK (service.pas), line = 2247

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2248

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1DD2

; optimize OK (service.pas), line = 2253

	lda TOUCH
	cmp #$01
	jne l_1EC7

; optimize OK (service.pas), line = 2255

	lda AROUND
	and #$0E
	jne l_1EDE
	lda #$21
	sta DEFLECT
l_1EDE

; optimize OK (service.pas), line = 2256

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1EFB
	lda #$20
	sta DEFLECT
l_1EFB

; optimize OK (service.pas), line = 2257

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1F18
	lda #$33
	sta DEFLECT
l_1F18

; optimize OK (service.pas), line = 2258

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1F35
	lda #$22
	sta DEFLECT
l_1F35

; optimize OK (service.pas), line = 2259

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1F52
	lda #$01
	sta DEFLECT
l_1F52

; optimize OK (service.pas), line = 2260

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1F6F
	lda #$21
	sta DEFLECT
l_1F6F

; optimize OK (service.pas), line = 2261

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1F8C
	lda #$11
	sta DEFLECT
l_1F8C

; optimize OK (service.pas), line = 2263

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2264

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1EC7

; optimize OK (service.pas), line = 2267

	lda TOUCH
	cmp #$02
	jne l_1FBC

; optimize OK (service.pas), line = 2269

	lda AROUND
	and #$E0
	jne l_1FD3
	lda #$12
	sta DEFLECT
l_1FD3

; optimize OK (service.pas), line = 2270

	lda AROUND
	and #$E0
	cmp #$20
	jne l_1FF0
	lda #$10
	sta DEFLECT
l_1FF0

; optimize OK (service.pas), line = 2271

	lda AROUND
	and #$E0
	cmp #$40
	jne l_200D
	lda #$33
	sta DEFLECT
l_200D

; optimize OK (service.pas), line = 2272

	lda AROUND
	and #$E0
	cmp #$60
	jne l_202A
	lda #$11
	sta DEFLECT
l_202A

; optimize OK (service.pas), line = 2273

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2047
	lda #$02
	sta DEFLECT
l_2047

; optimize OK (service.pas), line = 2274

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2064
	lda #$12
	sta DEFLECT
l_2064

; optimize OK (service.pas), line = 2275

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_2081
	lda #$22
	sta DEFLECT
l_2081

; optimize OK (service.pas), line = 2277

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2278

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1FBC

; optimize OK (service.pas), line = 2281

	lda TOUCH
	cmp #$03
	jne l_20B1

; optimize OK (service.pas), line = 2283

	lda AROUND
	and #$38
	jne l_20C8
	lda #$22
	sta DEFLECT
l_20C8

; optimize OK (service.pas), line = 2284

	lda AROUND
	and #$38
	cmp #$08
	jne l_20E5
	lda #$02
	sta DEFLECT
l_20E5

; optimize OK (service.pas), line = 2285

	lda AROUND
	and #$38
	cmp #$10
	jne l_2102
	lda #$33
	sta DEFLECT
l_2102

; optimize OK (service.pas), line = 2286

	lda AROUND
	and #$38
	cmp #$18
	jne l_211F
	lda #$12
	sta DEFLECT
l_211F

; optimize OK (service.pas), line = 2287

	lda AROUND
	and #$38
	cmp #$20
	jne l_213C
	lda #$20
	sta DEFLECT
l_213C

; optimize OK (service.pas), line = 2288

	lda AROUND
	and #$38
	cmp #$28
	jne l_2159
	lda #$22
	sta DEFLECT
l_2159

; optimize OK (service.pas), line = 2289

	lda AROUND
	and #$38
	cmp #$30
	jne l_2176
	lda #$21
	sta DEFLECT
l_2176

; optimize OK (service.pas), line = 2291

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2292

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_20B1

; optimize OK (service.pas), line = 2298

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2299

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2301

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2303

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_21BF
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_21BF

; optimize OK (service.pas), line = 2304

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_21DB
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_21DB

; optimize OK (service.pas), line = 2305

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_21F4
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_21F4

; optimize OK (service.pas), line = 2307

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2309

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_2216
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_2216

; optimize OK (service.pas), line = 2310

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2232
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_2232

; optimize OK (service.pas), line = 2311

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_224B
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_224B
l_1CB4
l_19EE

; optimize OK (service.pas), line = 2321

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_226C

; optimize OK (service.pas), line = 2324

	lda EMERGENCY
	cmp #$FF
	jne l_227F
	lda #$04
	jsr FATAL_ERROR
l_227F

; optimize OK (service.pas), line = 2326

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2353

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_2298
@

; optimize OK (service.pas), line = 2356

	lda adr.ADJW+$04
	jne l_22AF
	lda MIMAX
	and #$0F
	sta MIMAX
l_22AF

; optimize OK (service.pas), line = 2357

	lda adr.ADJW+$01
	jne l_22D7
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_22D7
	jmp a_0009
l_2298
	cmp #$06
	jne l_22EF

; optimize OK (service.pas), line = 2361

	lda adr.ADJW+$01
	jne l_2306
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_2306

; optimize OK (service.pas), line = 2362

	lda adr.ADJW+$06
	jne l_232E
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_232E
	jmp a_0009
l_22EF
	cmp #$07
	jne l_2346

; optimize OK (service.pas), line = 2366

	lda adr.ADJW+$06
	jne l_235D
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_235D

; optimize OK (service.pas), line = 2367

	lda adr.ADJW+$09
	jne l_2385
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_2385
	jmp a_0009
l_2346
	cmp #$08
	jne l_239D

; optimize OK (service.pas), line = 2371

	lda adr.ADJW+$09
	jne l_23B4
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_23B4

; optimize OK (service.pas), line = 2372

	lda adr.ADJW+$04
	jne l_23DC
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_23DC
l_239D
a_0009

; --- RepeatUntilProlog
l_23F4

; optimize OK (service.pas), line = 2380

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	tay
	lda adr.MUL90_16,y
	sta LX
	lda adr.MUL90_16+16,y
	sta LX+1

; optimize OK (service.pas), line = 2381

	lda MIMAX
	and #$0F
	tay
	lda adr.MUL90_16,y
	sta MX
	lda adr.MUL90_16+16,y
	sta MX+1

; optimize OK (service.pas), line = 2383

	lda MX
	sub LX
	sta RAND.RANGE
	lda MX+1
	sbc LX+1
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	add LX
	sta ANGLE
	lda RAND.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2385

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_23F4

; optimize OK (service.pas), line = 2389

	lda ANGLE
	sta MOD360.A
	lda ANGLE+1
	sta MOD360.A+1
	jsr MOD360
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MOD360.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MOD360.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2390

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2392

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_226C

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0276
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$027A
Y	= DATAORIGIN+$027B
I	= DATAORIGIN+$027C
XB	= DATAORIGIN+$027D
YB	= DATAORIGIN+$027E
OX	= DATAORIGIN+$027F
OY	= DATAORIGIN+$0281
SP	= DATAORIGIN+$0283
NX	= DATAORIGIN+$0285
NY	= DATAORIGIN+$0287
LX	= DATAORIGIN+$0289
LY	= DATAORIGIN+$028B
MX	= DATAORIGIN+$028D
MY	= DATAORIGIN+$028F
ANGLE	= DATAORIGIN+$0291
MYX	= DATAORIGIN+$0293
MYY	= DATAORIGIN+$0295
F1	= DATAORIGIN+$0297
F2	= DATAORIGIN+$029B
A	= DATAORIGIN+$029F
B	= DATAORIGIN+$02A0
EMERGENCY	= DATAORIGIN+$02A1
MIMAX	= DATAORIGIN+$02A2
DEFLECT	= DATAORIGIN+$02A3
AROUND	= DATAORIGIN+$02A4
COLLISION	= DATAORIGIN+$02A5
TOUCH	= DATAORIGIN+$02A6
adr.ADJW	= [DATAORIGIN+$02A7] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$02B7

@VarData	= BALL
@VarDataSize	= 52

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; -------------------  ASM Block 00000159  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2416

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2418

	lda #$7F
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2419

	lda #$80
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 2421

	lda PATTERN.WIDTH
	sub #$01
	ora #$80
	sta BLT.PATTERN_FEATURE

; optimize OK (service.pas), line = 2423

	lda adr.ROW+$0A
	add #$09
	sta HLP
	lda adr.ROW+256+$0A
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2426

	lda #$00
	sta YB
	sta YB+1

; optimize OK (service.pas), line = 2427

	sta I

; optimize OK (service.pas), line = 2429

	lda #$0A
	sta Y

l_2482
; --- ForToDoCondition
	lda Y
	cmp #$C7
	jcs l_2490

; optimize OK (service.pas), line = 2431

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.OFS
	add YB
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	adc YB+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$CF
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2433

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; optimize OK (service.pas), line = 2435

	lda YB
	add PATTERN.WIDTH
	sta YB
	lda YB+1
	adc PATTERN.WIDTH+1
	sta YB+1

; optimize FAIL (0, service.pas), line = 2437

	inc I

; optimize OK (service.pas), line = 2438

	lda I
	cmp PATTERN.HEIGHT
	jne l_24BA

; optimize OK (service.pas), line = 2439

	lda #$00
	sta YB
	sta YB+1

; optimize OK (service.pas), line = 2440

	sta I
l_24BA

; --- ForToDoEpilog
	inc Y
	jne l_2482
l_2490

; optimize OK (service.pas), line = 2445

	lda #$00
	sta BLT.PATTERN_FEATURE

; optimize OK (service.pas), line = 2450

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2452

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 2453

	lda #$00
	sta BLT.BLT_XOR_MASK

; optimize OK (service.pas), line = 2455

	sta BLITTEMP.@040180000018100001820000182000.SRC
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$04
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2461

	lda #$D7
	sta I

; optimize OK (service.pas), line = 2463

	lda #$0A
	sta Y

l_24EB
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_24F9

; optimize OK (service.pas), line = 2468

	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2471

	lda Y
	cmp #$10
	jcc l_2518
	lda #$11
	sta I
l_2518

; optimize OK (service.pas), line = 2474

	lda #$09
	sta X

l_252A
; --- ForToDoCondition
	lda X
	cmp I
	scc
	jne l_2538

; optimize OK (service.pas), line = 2485

	cmp #$12
	jcc l_2556x
	lda Y
	cmp #$10
	jcs l_2556
l_2556x

; optimize OK (service.pas), line = 2486

	ldy X
	lda adr.SCR,y
	and #$7F
	sta adr.SCR,y
l_2556

; --- ForToDoEpilog
	inc X
	jne l_252A
l_2538

; optimize OK (service.pas), line = 2497

	ldy Y
	lda adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_24EB
l_24F9

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

YB	= DATAORIGIN+$02B8
X	= DATAORIGIN+$02BA
Y	= DATAORIGIN+$02BB
I	= DATAORIGIN+$02BC

@VarData	= YB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02BD
Y	= DATAORIGIN+$02BF

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2550

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2552

	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02C1
Y	= DATAORIGIN+$02C3
adr.SC	= [DATAORIGIN+$02C5] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2598

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2599

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2601

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2603

	lda VAUS.X
	sub #$04
	sta A

; optimize OK (service.pas), line = 2604

	lda VAUS.Y
	sub #$05
	sta B

; optimize FAIL ('DEATH_SOUND', service.pas), line = 2607

	jsr DEATH_SOUND

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2613

	lda #$2A
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$2A
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2615

	lda #$00
	sta VM
	sta VM+1

; optimize OK (service.pas), line = 2617

	sta W

l_25CC
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_25DA

; optimize OK (service.pas), line = 2620

	lda VM
	sta Z
	lda VM+1
	sta Z+1

; optimize OK (service.pas), line = 2622

	lda #$00
	sta Y

l_25E8
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_25F6

; optimize OK (service.pas), line = 2627

	lda Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$60
	add Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2629

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2631

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2633

	lda #$00
	sta X

l_2627
; --- ForToDoCondition
	lda X
	cmp #$2A
	jcs l_2635

; optimize OK (service.pas), line = 2637

	lda W
	cmp #$06
	jeq l_2656x
	ldy X
	lda adr.POM,y
	jne l_2656
l_2656x
	jmp l_2660
l_2656

; optimize OK (service.pas), line = 2646

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2660

; --- ForToDoEpilog
	inc X
	jne l_2627
l_2635

; optimize OK (service.pas), line = 2649

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$2A
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2651

	lda Z
	add #$2A
	sta Z
	scc
	inc Z+1

; --- ForToDoEpilog
	inc Y
	jne l_25E8
l_25F6

; optimize OK (service.pas), line = 2654

	lda VM
	add #$A0
	sta VM
	lda VM+1
	adc #$02
	sta VM+1

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2656

	jsr SYSTEM.PAUSE.@00

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2657

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	inc W
	jne l_25CC
l_25DA

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2666

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2667

	jsr DISABLE_LETTER

; ------------------------------------------------------------

A	= DATAORIGIN+$02DA
B	= DATAORIGIN+$02DB
W	= DATAORIGIN+$02DC
X	= DATAORIGIN+$02DD
Y	= DATAORIGIN+$02DE
Z	= DATAORIGIN+$02DF
VM	= DATAORIGIN+$02E1

@VarData	= A
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2679

	jsr NOSOUND

; optimize OK (service.pas), line = 2681

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2682

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000163  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2688

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2690

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.WIDTH
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta MW
	lda :STACKORIGIN+STACKWIDTH+9
	sta MW+1

; optimize OK (service.pas), line = 2692

	lda #$00
	sta J
	sta J+1

; optimize OK (service.pas), line = 2694

	lda #$0B
	sta W

l_26B4
; --- ForToDoCondition
	lda J
	sta Z
	lda J+1
	sta Z+1

; optimize OK (service.pas), line = 2698

	lda #$00
	sta Y

l_26D0
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_26DE

; optimize OK (service.pas), line = 2703

	adc B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2705

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2707

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2709

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2711_0

l_2714
; --- ForToDoCondition
	lda @FORTMP_2711_0::#$00
	cmp X
	jcc l_2722

; optimize OK (service.pas), line = 2711

	ldy X
	lda adr.POM,y
	jne l_2737
	jmp l_2741
l_2737

; optimize OK (service.pas), line = 2722

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2741

; --- ForToDoEpilog
	inc X
	jne l_2714
l_2722

; optimize OK (service.pas), line = 2725

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2727

	lda Z
	add NEWVAUS.WIDTH
	sta Z
	lda Z+1
	adc NEWVAUS.WIDTH+1
	sta Z+1

; --- ForToDoEpilog
	inc Y
	jne l_26D0
l_26DE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2730

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 2732

	lda J
	add MW
	sta J
	lda J+1
	adc MW+1
	sta J+1

; --- ForToDoEpilog
	dec W
	jpl l_26B4
l_26C2

; -------------------  ASM Block 00000164  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$02E3
Y	= DATAORIGIN+$02E4
W	= DATAORIGIN+$02E5
Z	= DATAORIGIN+$02E6
A	= DATAORIGIN+$02E8
B	= DATAORIGIN+$02EA
J	= DATAORIGIN+$02EC
MW	= DATAORIGIN+$02EE

@VarData	= X
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_2770

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 2838

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$50
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2840

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$02F8

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2770

; optimize OK (service.pas), line = 2847

	lda #$00
	sta F

; -------------------  ASM Block 00000165  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2855

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2857

	ldy PY
	lda adr.ROW,y
	add #$FD
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2862

	lda SC_
	sta SC
	lda SC_+1
	sta SC+1
	lda SC_+2
	sta SC+2
	lda SC_+3
	sta SC+3

; optimize OK (service.pas), line = 2864

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27A5
l_27A6

; optimize OK (service.pas), line = 2866

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2867

	inc N1
l_27A5

; optimize OK (service.pas), line = 2865

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_27A6

; optimize OK (service.pas), line = 2869

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2870

	tya
	jeq l_27D0
	lda #$01
	sta F
l_27D0

; optimize OK (service.pas), line = 2871

	lda F
	jeq l_27E3
	lda N1
	jmp l_27F1
l_27E3

; optimize OK (service.pas), line = 2872

	lda #$0A
l_27F1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2875

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27F9
l_27FA

; optimize OK (service.pas), line = 2877

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2878

	inc N1
l_27F9

; optimize OK (service.pas), line = 2876

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_27FA

; optimize OK (service.pas), line = 2880

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2881

	tya
	jeq l_2824
	lda #$01
	sta F
l_2824

; optimize OK (service.pas), line = 2882

	lda F
	jeq l_2837
	lda N1
	jmp l_2845
l_2837

; optimize OK (service.pas), line = 2883

	lda #$0A
l_2845
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2886

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_284D
l_284E

; optimize OK (service.pas), line = 2888

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2889

	inc N1
l_284D

; optimize OK (service.pas), line = 2887

	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_284E

; optimize OK (service.pas), line = 2891

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2892

	tya
	jeq l_2878
	lda #$01
	sta F
l_2878

; optimize OK (service.pas), line = 2893

	lda F
	jeq l_288B
	lda N1
	jmp l_2899
l_288B

; optimize OK (service.pas), line = 2894

	lda #$0A
l_2899
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2897

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_28A1
l_28A2

; optimize OK (service.pas), line = 2899

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2900

	inc N1
l_28A1

; optimize OK (service.pas), line = 2898

	lda SC+1
	jne l_28A2
	lda SC
	cmp #$64
	jcs l_28A2

; optimize OK (service.pas), line = 2902

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2903

	tya
	jeq l_28CC
	lda #$01
	sta F
l_28CC

; optimize OK (service.pas), line = 2904

	lda F
	jeq l_28DF
	lda N1
	jmp l_28ED
l_28DF

; optimize OK (service.pas), line = 2905

	lda #$0A
l_28ED
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2908

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_28F5
l_28F6

; optimize OK (service.pas), line = 2910

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2911

	inc N1
l_28F5

; optimize OK (service.pas), line = 2909

	lda SC
	cmp #$0A
	jcs l_28F6

; optimize OK (service.pas), line = 2914

	ldy N1
	lda adr.MOD10TABLE,y
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2918

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000166  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PY	= DATAORIGIN+$02F1
SC_	= DATAORIGIN+$02F2
adr.MUL_6	= CODEORIGIN+$00B5
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$02F6
F	= DATAORIGIN+$02F7
SC	= :STACKORIGIN-4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 2971

	dec LIVES

; -------------------  ASM Block 00000167  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2978

	lda adr.ROW+$C0
	add #$0B
	sta HLP
	lda adr.ROW+256+$C0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2982

	lda #$A0
	sta BLITCLR.W
	lda #$00
	sta BLITCLR.W+1
	lda #$05
	sta BLITCLR.H
	jsr BLITCLR

; optimize OK (service.pas), line = 2985

	lda LIVES
	jeq l_2939

; optimize OK (service.pas), line = 2988

	cmp #$08
	jcc l_294C

; optimize OK (service.pas), line = 2989

	lda #$07
	sta I
	jmp l_295A
l_294C

; optimize OK (service.pas), line = 2991

	ldy LIVES
	dey
	sty I
l_295A

; optimize OK (service.pas), line = 2993

	lda #$14
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2995

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 2998

	lda #$00
	sta CN

l_2976
; --- ForToDoCondition
	lda CN
	cmp I
	scc
	jne l_2984

; optimize OK (service.pas), line = 3002

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3003

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$9D
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$96
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$05
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3005

	lda HLP
	add #$14
	sta HLP
	scc
	inc HLP+1

; --- ForToDoEpilog
	inc CN
	jne l_2976
l_2984

; optimize OK (service.pas), line = 3008

	lda #$00
	sta BLT.BLT_CONTROL
l_2939

; -------------------  ASM Block 00000168  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$02F9
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$02FA
Y	= DATAORIGIN+$02FB
XL	= DATAORIGIN+$02FC
YL	= DATAORIGIN+$02FD
CN	= DATAORIGIN+$02FE
XP	= DATAORIGIN+$02FF
YP	= DATAORIGIN+$0301
SHADOW	= DATAORIGIN+$0303
CL	= DATAORIGIN+$0304
I	= DATAORIGIN+$0305

@VarData	= LIVES
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3098

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3100

	lda #$4C
	sta BLITZERO.SRC
	lda #$BE
	sta BLITZERO.SRC+1
	lda #$00
	sta BLITZERO.SRC+2
	sta BLITZERO.SRC+3
	lda #$0D
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$08
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3108

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3110

	lda #$0D
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3118

	lda FIRE.AVL
	jeq l_29DF

; optimize FAIL ('MOUSECLICK', service.pas), line = 3120

	jsr MOUSECLICK
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN+1,x
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_29FF

; optimize OK (service.pas), line = 3122

	lda VAUS.WIDTH
	sub #$0D
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3123

	lda VAUS.Y
	sub #$08
	sta FIRE.Y

; optimize OK (service.pas), line = 3124

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3125

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3126

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$05
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
l_29FF

; optimize OK (service.pas), line = 3129

	lda FIRE.SHOT
	jeq l_2A37

; optimize OK (service.pas), line = 3131

	lda FIRE.NW
	jeq l_2A44
	jsr REMOVE_FIRE
l_2A44

; optimize OK (service.pas), line = 3132

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3134

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3135

	cmp #$16
	jcs l_2A5F
	lda #$00
	sta FIRE.SHOT
	jmp l_2A6D
l_2A5F

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3138

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3140

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_2A94
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_2A94

; optimize OK (service.pas), line = 3142

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3143

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3145

	lda FIRE.X
	add #$04
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3146

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3148

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2B01x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2B01
l_2B01x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3150

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3151

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3153

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3154

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2A6D
l_2B01
l_2A94
l_2A37
l_29DF

; ------------------------------------------------------------

X1	= DATAORIGIN+$0306
X2	= DATAORIGIN+$0307
Y1	= DATAORIGIN+$0308
Y2	= DATAORIGIN+$0309

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3166

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3168

	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3178

	lda SCRFLUX
	jeq l_2B3E

; optimize OK (service.pas), line = 3181

	lda SCRFLUXCNT
	asl @
	asl @
	asl @
	sta FX

; -------------------  ASM Block 00000169  -------------------

	fxs FX_MEMS #$80
      
; optimize OK (service.pas), line = 3189

	lda #$08
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3190

	lda #$D9
	add adr.ROW+$B0
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$00
	adc adr.ROW+256+$B0
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$B4
	add FX
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$BE
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$14
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000170  -------------------

	fxs FX_MEMS #$00
      
; optimize FAIL (0, service.pas), line = 3198

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3199

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2B77
	lda #$00
	sta SCRFLUXCNT
l_2B77
l_2B3E

; ------------------------------------------------------------

Y	= DATAORIGIN+$030A
FX	= DATAORIGIN+$030B

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3210

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3211

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3213

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3215

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3216

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3217

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3219

	lda Z
	sta X
	add #$2C
	sta @FORTMP_2BA3_0

l_2BA6
; --- ForToDoCondition
	lda @FORTMP_2BA3_0::#$00
	cmp X
	jcc l_2BB4

; optimize FAIL ('WAIT_VBL', service.pas), line = 3221

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3223

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3224

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3225

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3226

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3227

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3229

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3231

	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2BA6
l_2BB4

; ------------------------------------------------------------

X	= DATAORIGIN+$030C
Z	= DATAORIGIN+$030D

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3242

	lda VAUS.LETTER
	cmp #$FF
	jeq l_2BF0

; optimize OK (service.pas), line = 3243

	lda VAUS.LETTER
	jeq l_2C03

; optimize OK (service.pas), line = 3245

	sub #$01
	sta LETT.LAST
	lda #$00
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3246

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2C1A
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2C1A

; optimize OK (service.pas), line = 3247

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2C2C
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2C2C

; optimize OK (service.pas), line = 3248

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3249

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3250

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3251

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3253

	lda VAUS.LETTER
	cmp #$06
	jeq l_2C51

; optimize OK (service.pas), line = 3255

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3256

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3257

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2C51
l_2C03
l_2BF0

; optimize OK (service.pas), line = 3261

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2C6F
@

; optimize OK (service.pas), line = 3264

	lda FIRE.SHOT
	jeq l_2C7B
	jsr REMOVE_FIRE
l_2C7B

; optimize OK (service.pas), line = 3265

	:7 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3266

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3267

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3268

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3269

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2C6F
	cmp #$02
	jne l_2C95

; optimize OK (service.pas), line = 3273

	lda FIRE.SHOT
	jeq l_2CA1
	jsr REMOVE_FIRE
l_2CA1

; optimize OK (service.pas), line = 3274

	:7 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3275

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3276

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3277

	sta FIRE.AVL
	jmp a_000A
l_2C95
	cmp #$03
	jne l_2CB7

; optimize OK (service.pas), line = 3281

	lda FIRE.SHOT
	jeq l_2CC3
	jsr REMOVE_FIRE
l_2CC3

; optimize OK (service.pas), line = 3282

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3283

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3284

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3285

	sta FIRE.AVL

; optimize OK (service.pas), line = 3286

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2CB7
	cmp #$04
	jne l_2CDD

; optimize OK (service.pas), line = 3290

	lda FIRE.SHOT
	jeq l_2CE9
	jsr REMOVE_FIRE
l_2CE9

; optimize OK (service.pas), line = 3291

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3292

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3293
	jmp s_2D26
l_2CDD
	cmp #$05
	jne l_2CFB

; optimize OK (service.pas), line = 3297

	lda FIRE.SHOT
	jeq l_2D07
	jsr REMOVE_FIRE
l_2D07

; optimize OK (service.pas), line = 3298

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3299

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3300

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3301

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$26
	sta MAX.B
	lda #$02
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3302

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2D26
; optimize OK (service.pas), line = 3303
	jmp s_2D44
l_2CFB
	cmp #$06
	jne l_2D2D

; optimize OK (service.pas), line = 3307

	lda FIRE.SHOT
	jeq l_2D39
	jsr REMOVE_FIRE
l_2D39

; optimize OK (service.pas), line = 3308

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3309

	jsr MODIFY_VAUS
s_2D44
; optimize OK (service.pas), line = 3310
	jmp s_2D74
l_2D2D
	cmp #$07
	jne l_2D4B

; optimize OK (service.pas), line = 3314

	lda FIRE.SHOT
	jeq l_2D57
	jsr REMOVE_FIRE
l_2D57

; optimize OK (service.pas), line = 3315

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3316

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3317

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3318

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3319

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3320

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	jsr BALL_BLOCK_SOUND
s_2D74

; optimize OK (service.pas), line = 3321

	lda #$00
	sta FIRE.AVL
l_2D4B
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$030F
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0005
B1.OLDX	= DATAORIGIN+$0006
B1.OLDY	= DATAORIGIN+$0008
B1.SPEED	= DATAORIGIN+$000A
B1.FINESPEED	= DATAORIGIN+$000C
B1.SPEEDX	= DATAORIGIN+$000E
B1.SPEEDY	= DATAORIGIN+$0010
B1.SBD	= DATAORIGIN+$0012
B1.BRWHIT	= DATAORIGIN+$0014
B1.INPLAY	= DATAORIGIN+$0015
B1.LAUNCH	= DATAORIGIN+$0016
B1.ONVAUS	= DATAORIGIN+$0017
B1.STM	= DATAORIGIN+$0019
B2	= DATAORIGIN+$0313
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0005
B2.OLDX	= DATAORIGIN+$0006
B2.OLDY	= DATAORIGIN+$0008
B2.SPEED	= DATAORIGIN+$000A
B2.FINESPEED	= DATAORIGIN+$000C
B2.SPEEDX	= DATAORIGIN+$000E
B2.SPEEDY	= DATAORIGIN+$0010
B2.SBD	= DATAORIGIN+$0012
B2.BRWHIT	= DATAORIGIN+$0014
B2.INPLAY	= DATAORIGIN+$0015
B2.LAUNCH	= DATAORIGIN+$0016
B2.ONVAUS	= DATAORIGIN+$0017
B2.STM	= DATAORIGIN+$0019
B3	= DATAORIGIN+$0317
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0005
B3.OLDX	= DATAORIGIN+$0006
B3.OLDY	= DATAORIGIN+$0008
B3.SPEED	= DATAORIGIN+$000A
B3.FINESPEED	= DATAORIGIN+$000C
B3.SPEEDX	= DATAORIGIN+$000E
B3.SPEEDY	= DATAORIGIN+$0010
B3.SBD	= DATAORIGIN+$0012
B3.BRWHIT	= DATAORIGIN+$0014
B3.INPLAY	= DATAORIGIN+$0015
B3.LAUNCH	= DATAORIGIN+$0016
B3.ONVAUS	= DATAORIGIN+$0017
B3.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$031B
@CASETMP_000A	= DATAORIGIN+$031D

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2D82

; optimize OK (service.pas), line = 3334

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva RAND.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex

; optimize OK (service.pas), line = 3335

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	lda MOD90.RESULT+1
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2D82

; optimize OK (service.pas), line = 3337

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3338

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3340

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$031E
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
TEMP	= DATAORIGIN+$0322

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2DBC

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3373

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2DDB
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2DDB

; optimize OK (service.pas), line = 3374

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2DDB

; optimize OK (service.pas), line = 3376

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3377

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0381
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3387

	mwy BALL :bp2
	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3389

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL+1,y
	cmp :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda adr.LEVEL,y
	cmp :STACKORIGIN+9
@
	jcs l_2E03

; optimize OK (service.pas), line = 3391

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3394

	ldy #BALL.SPEED-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$03
	bne @+
	dey
	lda (:bp2),y
	cmp #$FF
@
	jcs l_2E19

; optimize OK (service.pas), line = 3396

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	adc #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3397

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2E19
l_2E03

; optimize OK (service.pas), line = 3401

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3405

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2E41
@
	ldy #$00
	lda (:bp2),y
	jpl l_2E41
@

; optimize OK (service.pas), line = 3406

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2E41

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0385
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2DBC

; optimize OK (service.pas), line = 3414

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3415

	sta SCRFLUX

; optimize OK (service.pas), line = 3417

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3419

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3420

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3422

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3423

	sta LETT.ACTIVE

; optimize FAIL ('FILL_PICTURE_WITH_PATTERN', service.pas), line = 3426

	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 3429

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 3430

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3434

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3440

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC_+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3441

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC_+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3442

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3445

	jsr PUT_WALL

; optimize OK (service.pas), line = 3452

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3453

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3456

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3457

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3460

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3461

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3464

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3468

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3473

	sta BALL0.STM

; optimize OK (service.pas), line = 3477

	lda #$E8
	sta RAND.RANGE
	lda #$03
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3480

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3483

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3485

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3486

	jsr START_VAUS

; optimize OK (service.pas), line = 3487

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3488

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3489

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3490

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3491

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3498

	lda #$0F
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda RAND.RESULT+1
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3500

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$26
	sta SET_BALL_SPEED.SPEED
	lda #$02
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3503

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3505

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3506

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3508

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_2ED6
l_2ED7

; -------------------  ASM Block 00000171  -------------------

      mva #$00 $d01a
      @: lda vcount
      cmp #110
      bne @-
      mva #$0f $d01a       
     
; optimize OK (service.pas), line = 3525

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3531

	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 3543

	lda BALL0.LAUNCH
	cmp #$01
	jne l_2EEF

; optimize FAIL (0, service.pas), line = 3545

	inc BALL0.STM

; optimize OK (service.pas), line = 3550

	lda BALL0.STM
	cmp #$FA
	jne l_2F06
	lda #$00
	sta BALL0.LAUNCH
l_2F06

; optimize OK (service.pas), line = 3553

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3556

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_2F20
	lda #$00
	sta BALL0.LAUNCH
l_2F20
	jmp l_2F30
l_2EEF

; optimize OK (service.pas), line = 3564

	lda BALL0.INPLAY
	jeq l_2F3C
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2F3C

; optimize OK (service.pas), line = 3565

	lda BALL1.INPLAY
	jeq l_2F4E
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2F4E

; optimize OK (service.pas), line = 3566

	lda BALL2.INPLAY
	jeq l_2F60
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2F60
l_2F30

; optimize OK (service.pas), line = 3574

	lda BALL0.INPLAY
	jeq l_2F72
	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2F72

; optimize OK (service.pas), line = 3575

	lda BALL1.INPLAY
	jeq l_2F84
	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2F84

; optimize OK (service.pas), line = 3576

	lda BALL2.INPLAY
	jeq l_2F96
	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL
l_2F96

; optimize FAIL ('CHECKSHINE', service.pas), line = 3591

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3592

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3593

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3594

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3595

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3597

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_2FC5
	jsr VAUS_OUT
l_2FC5

; optimize OK (service.pas), line = 3599

	lda VAUS.LETTER
	cmp #$04
	jne l_2FDB

; optimize OK (service.pas), line = 3601

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3603

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3604

	mwy BALL2 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3606

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3608

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3615

	ldy T1
	lda adr.MUL90_16,y
	sta T1
	lda adr.MUL90_16+16,y
	sta T1+1

; optimize OK (service.pas), line = 3617

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3618

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3619

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3623

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3624

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3625

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3627

	lda #$00
	sta VAUS.LETTER
l_2FDB

; optimize OK (service.pas), line = 3631

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_303C
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_303C

; optimize OK (service.pas), line = 3635

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3637

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_305A

; optimize OK (service.pas), line = 3639

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda SCORES
	sta WRITE_SCORE.SC_
	lda SCORES+1
	sta WRITE_SCORE.SC_+1
	lda SCORES+2
	sta WRITE_SCORE.SC_+2
	lda SCORES+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3641

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_305A

; optimize OK (service.pas), line = 3647

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_307C
	jeq l_307C

; optimize OK (service.pas), line = 3650

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3652

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE
l_307C

; optimize OK (service.pas), line = 3659

	lda BALL0.INPLAY
	jeq l_3095
	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_3095

; optimize OK (service.pas), line = 3660

	lda BALL1.INPLAY
	jeq l_30A7
	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_30A7

; optimize OK (service.pas), line = 3661

	lda BALL2.INPLAY
	jeq l_30B9
	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL
l_30B9

; optimize OK (service.pas), line = 3711

	lda BALL0.INPLAY
	jne l_30CE

; optimize OK (service.pas), line = 3712

	lda BALL1.INPLAY
	jeq l_30DB

; optimize OK (service.pas), line = 3713

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3714

	lda #$00
	sta BALL1.INPLAY
	jmp l_30EB
l_30DB

; optimize OK (service.pas), line = 3716

	lda BALL2.INPLAY
	jeq l_30F7

; optimize OK (service.pas), line = 3717

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3718

	lda #$00
	sta BALL2.INPLAY
l_30EB
l_30F7
l_30CE

; optimize OK (service.pas), line = 3722

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3724

	lda BALL0.INPLAY
	jeq l_3112
	inc BALLS_IN_PLAY
l_3112

; optimize OK (service.pas), line = 3725

	lda BALL1.INPLAY
	jeq l_3125
	inc BALLS_IN_PLAY
l_3125

; optimize OK (service.pas), line = 3726

	lda BALL2.INPLAY
	jeq l_3138
	inc BALLS_IN_PLAY
l_3138

; optimize OK (service.pas), line = 3729

	lda BALL0.INPLAY
	jne l_314E

; optimize OK (service.pas), line = 3731

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3732

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3733

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3734

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3735

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3743

	jsr NOSOUND
l_314E
l_2ED6

; optimize OK (service.pas), line = 3511

	lda REMAIN_BLK
	jeq l_2ED7w
	lda BALL0.INPLAY
	jeq l_2ED7w
	lda SCORE.ABORTPLAY
	jeq l_2ED7
l_2ED7w

; optimize OK (service.pas), line = 3799

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3800

	lda REMAIN_BLK
	jne l_319C
	lda #$01
	sta RESULT
l_319C
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0324
X	= DATAORIGIN+$0325
Y	= DATAORIGIN+$0327
KEY	= DATAORIGIN+$0329
T1	= DATAORIGIN+$032B
T2	= DATAORIGIN+$032D
adr.BALL0	= DATAORIGIN+$032F	; [26] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$032F
BALL0.Y	= DATAORIGIN+$0331
BALL0.FINEX	= DATAORIGIN+$0333
BALL0.FINEY	= DATAORIGIN+$0334
BALL0.OLDX	= DATAORIGIN+$0335
BALL0.OLDY	= DATAORIGIN+$0337
BALL0.SPEED	= DATAORIGIN+$0339
BALL0.FINESPEED	= DATAORIGIN+$033B
BALL0.SPEEDX	= DATAORIGIN+$033D
BALL0.SPEEDY	= DATAORIGIN+$033F
BALL0.SBD	= DATAORIGIN+$0341
BALL0.BRWHIT	= DATAORIGIN+$0343
BALL0.INPLAY	= DATAORIGIN+$0344
BALL0.LAUNCH	= DATAORIGIN+$0345
BALL0.ONVAUS	= DATAORIGIN+$0346
BALL0.STM	= DATAORIGIN+$0348
adr.BALL1	= DATAORIGIN+$0349	; [26] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0349
BALL1.Y	= DATAORIGIN+$034B
BALL1.FINEX	= DATAORIGIN+$034D
BALL1.FINEY	= DATAORIGIN+$034E
BALL1.OLDX	= DATAORIGIN+$034F
BALL1.OLDY	= DATAORIGIN+$0351
BALL1.SPEED	= DATAORIGIN+$0353
BALL1.FINESPEED	= DATAORIGIN+$0355
BALL1.SPEEDX	= DATAORIGIN+$0357
BALL1.SPEEDY	= DATAORIGIN+$0359
BALL1.SBD	= DATAORIGIN+$035B
BALL1.BRWHIT	= DATAORIGIN+$035D
BALL1.INPLAY	= DATAORIGIN+$035E
BALL1.LAUNCH	= DATAORIGIN+$035F
BALL1.ONVAUS	= DATAORIGIN+$0360
BALL1.STM	= DATAORIGIN+$0362
adr.BALL2	= DATAORIGIN+$0363	; [26] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$0363
BALL2.Y	= DATAORIGIN+$0365
BALL2.FINEX	= DATAORIGIN+$0367
BALL2.FINEY	= DATAORIGIN+$0368
BALL2.OLDX	= DATAORIGIN+$0369
BALL2.OLDY	= DATAORIGIN+$036B
BALL2.SPEED	= DATAORIGIN+$036D
BALL2.FINESPEED	= DATAORIGIN+$036F
BALL2.SPEEDX	= DATAORIGIN+$0371
BALL2.SPEEDY	= DATAORIGIN+$0373
BALL2.SBD	= DATAORIGIN+$0375
BALL2.BRWHIT	= DATAORIGIN+$0377
BALL2.INPLAY	= DATAORIGIN+$0378
BALL2.LAUNCH	= DATAORIGIN+$0379
BALL2.ONVAUS	= DATAORIGIN+$037A
BALL2.STM	= DATAORIGIN+$037C
SCORES	= DATAORIGIN+$037D

@VarData	= X
@VarDataSize	= 92

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3823

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3881

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0389
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$038B
Y	= DATAORIGIN+$038D
ST	= DATAORIGIN+$038F
OLDX	= DATAORIGIN+$0391
OLDY	= DATAORIGIN+$0393
NEWX	= DATAORIGIN+$0395
NEWY	= DATAORIGIN+$0397

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3890

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3892

	lda #$01
	sta X

l_31C1
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_31CF

; optimize OK (service.pas), line = 3894

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3895

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3896

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3897

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3899

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_31C1
l_31CF

; optimize OK (service.pas), line = 3902

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0399

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3962

	jsr NOSOUND

; optimize OK (service.pas), line = 3963

	lda #$00
	sta SCORE.ABORTPLAY

; -------------------  ASM Block 00000172  -------------------

      fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 3980

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3981

	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$D0
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	sta BLITTEMP.@040180000018100001820000182000.DST
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$40
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$C8
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000173  -------------------

      fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 4024

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$039A
X	= DATAORIGIN+$039C
Y	= DATAORIGIN+$039E
Z	= DATAORIGIN+$03A0
K	= DATAORIGIN+$03A2
IK	= DATAORIGIN+$03A4

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 4032

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 4033

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3231
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3231

; optimize OK (service.pas), line = 4036

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 4037

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4041

	jsr SET_WALL

; optimize FAIL ('FILL_PICTURE_WITH_PATTERN', service.pas), line = 4043

	jsr FILL_PICTURE_WITH_PATTERN

; optimize OK (service.pas), line = 4045

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 4046

	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 4053

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC_+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4054

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC_
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC_+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC_+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC_+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4055

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC_
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC_+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC_+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC_+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_325F

; --- RepeatUntilProlog
l_3260

; optimize OK (service.pas), line = 4065

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_3272

; optimize FAIL (1, service.pas), line = 4067

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 4070

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 4074

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_3272

; optimize OK (service.pas), line = 4078

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4079

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4084

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4087

	jeq l_32C0

; optimize OK (service.pas), line = 4090

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4093

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_32DC

; optimize OK (service.pas), line = 4094

	lda #$01
	sta adr.SCORE.WALL_N,y
l_32DC

; optimize OK (service.pas), line = 4097

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_330E
l_32C0

; optimize OK (service.pas), line = 4103

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3323
	jsr GAME_OVER
l_330E
l_3323

; optimize OK (service.pas), line = 4108

	lda NWALL
	jne l_3260

; optimize FAIL (0, service.pas), line = 4111

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4112

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_334B
	lda #$01
	sta CUR_PLAYER
l_334B

; optimize OK (service.pas), line = 4118

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3367
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_3367

; optimize OK (service.pas), line = 4123

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_325F

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$03A6
NWALL	= DATAORIGIN+$03A8

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 668

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 670

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 671

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta EXPLOSION.OFS
	lda #$60
	sta EXPLOSION.OFS+1
	lda #$00
	sta EXPLOSION.OFS+2
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$72
	sta EXPLOSION.HEIGHT

; optimize OK (btm.inc), line = 5

	lda #$B4
	sta NEWVAUS.OFS
	lda #$72
	sta NEWVAUS.OFS+1
	lda #$00
	sta NEWVAUS.OFS+2
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C1
	sta NEWVAUS.HEIGHT

; optimize OK (btm.inc), line = 9

	lda #$9D
	sta SHINEWALL.OFS
	lda #$91
	sta SHINEWALL.OFS+1
	lda #$00
	sta SHINEWALL.OFS+2
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$50
	sta SHINEWALL.HEIGHT

; optimize OK (btm.inc), line = 13

	lda #$9D
	sta MINIVAUS.OFS
	lda #$96
	sta MINIVAUS.OFS+1
	lda #$00
	sta MINIVAUS.OFS+2
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$05
	sta MINIVAUS.HEIGHT

; optimize OK (btm.inc), line = 17

	lda #$01
	sta LEVELSEL.OFS
	lda #$97
	sta LEVELSEL.OFS+1
	lda #$00
	sta LEVELSEL.OFS+2
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$5F
	sta LEVELSEL.HEIGHT

; optimize OK (btm.inc), line = 21

	lda #$CC
	sta LETTERS.OFS
	lda #$9E
	sta LETTERS.OFS+1
	lda #$00
	sta LETTERS.OFS+2
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$38
	sta LETTERS.HEIGHT

; optimize OK (btm.inc), line = 25

	lda #$CC
	sta NORMAL.OFS
	lda #$BA
	sta NORMAL.OFS+1
	lda #$00
	sta NORMAL.OFS+2
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$07
	sta NORMAL.HEIGHT

; optimize OK (btm.inc), line = 29

	lda #$AC
	sta LASERS.OFS
	lda #$BB
	sta LASERS.OFS+1
	lda #$00
	sta LASERS.OFS+2
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$07
	sta LASERS.HEIGHT

; optimize OK (btm.inc), line = 33

	lda #$8C
	sta ENLARGED.OFS
	lda #$BC
	sta ENLARGED.OFS+1
	lda #$00
	sta ENLARGED.OFS+2
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta ENLARGED.HEIGHT

; optimize OK (btm.inc), line = 37

	lda #$4C
	sta SHOOTS.OFS
	lda #$BE
	sta SHOOTS.OFS+1
	lda #$00
	sta SHOOTS.OFS+2
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$08
	sta SHOOTS.HEIGHT

; optimize OK (btm.inc), line = 41

	lda #$B4
	sta FLUX.OFS
	lda #$BE
	sta FLUX.OFS+1
	lda #$00
	sta FLUX.OFS+2
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$29
	sta FLUX.HEIGHT

; optimize OK (btm.inc), line = 45

	lda #$FC
	sta BALLDATA.OFS
	lda #$BF
	sta BALLDATA.OFS+1
	lda #$00
	sta BALLDATA.OFS+2
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$05
	sta BALLDATA.HEIGHT

; optimize OK (btm.inc), line = 49

	lda #$15
	sta PATTERN0.OFS
	lda #$C0
	sta PATTERN0.OFS+1
	lda #$00
	sta PATTERN0.OFS+2
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$18
	sta PATTERN0.HEIGHT

; optimize OK (btm.inc), line = 53

	lda #$85
	sta PATTERN1.OFS
	lda #$C2
	sta PATTERN1.OFS+1
	lda #$00
	sta PATTERN1.OFS+2
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$0E
	sta PATTERN1.HEIGHT

; optimize OK (btm.inc), line = 57

	lda #$49
	sta PATTERN2.OFS
	lda #$C3
	sta PATTERN2.OFS+1
	lda #$00
	sta PATTERN2.OFS+2
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$23
	sta PATTERN2.HEIGHT

; optimize OK (btm.inc), line = 61

	lda #$7B
	sta PATTERN3.OFS
	lda #$C8
	sta PATTERN3.OFS+1
	lda #$00
	sta PATTERN3.OFS+2
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$1D
	sta PATTERN3.HEIGHT

; optimize OK (btm.inc), line = 65

	lda #$A7
	sta PATTERN4.OFS
	lda #$CB
	sta PATTERN4.OFS+1
	lda #$00
	sta PATTERN4.OFS+2
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$1E
	sta PATTERN4.HEIGHT

; optimize OK (arkanoid_vbxe.pas), line = 678

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 680

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 683

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 684

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3479

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 691

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 693

	jeq l_348F
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_348F

; optimize OK (arkanoid_vbxe.pas), line = 696

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3479

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 704

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DIGIT	= $5000
VBXE_DATA	= $6000
PLAYSCREEN_OFS	= $20000
VRAM	= $30000
PATTERN_TEMP	= $40000
EXPLOSION_OFS	= $6000
SHINEWALL_OFS	= $919D
LETTERS_OFS	= $9ECC
MINIVAUS_OFS	= $969D
SHOOTS_OFS	= $BE4C
FLUX_OFS	= $BEB4
BALLDATA_OFS	= $BFFC
PRESENTS_OFS	= $D080
MINIVAUS_WIDTH	= $14
MINIVAUS_HEIGHT	= $05
EXPLOSION_WIDTH	= $2A
SHOOTS_WIDTH	= $0D
SHOOTS_HEIGHT	= $08
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$005E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0069
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$007F
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0088
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $0226
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0092
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0096
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00A1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00AD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.BLT_BOX	= $B12A
.var BLT_BOX	= adr.BLT_BOX .word
adr.BLT_BOX.SRC_ADR	= $B12A
.var BLT_BOX.SRC_ADR	= adr.BLT_BOX.SRC_ADR .word
BLT_BOX.SRC_ADR.BYTE0	= $B12A
BLT_BOX.SRC_ADR.BYTE1	= $B12B
BLT_BOX.SRC_ADR.BYTE2	= $B12C
BLT_BOX.SRC_STEP_Y	= $B12D
BLT_BOX.SRC_STEP_X	= $B12F
adr.BLT_BOX.DST_ADR	= $B130
.var BLT_BOX.DST_ADR	= adr.BLT_BOX.DST_ADR .word
BLT_BOX.DST_ADR.BYTE0	= $B130
BLT_BOX.DST_ADR.BYTE1	= $B131
BLT_BOX.DST_ADR.BYTE2	= $B132
BLT_BOX.DST_STEP_Y	= $B133
BLT_BOX.DST_STEP_X	= $B135
BLT_BOX.BLT_WIDTH	= $B136
BLT_BOX.BLT_HEIGHT	= $B138
BLT_BOX.BLT_AND_MASK	= $B139
BLT_BOX.BLT_XOR_MASK	= $B13A
BLT_BOX.BLT_COLLISION_MASK	= $B13B
BLT_BOX.BLT_ZOOM	= $B13C
BLT_BOX.PATTERN_FEATURE	= $B13D
BLT_BOX.BLT_CONTROL	= $B13E
adr.BLT_ZERO	= $B13F
.var BLT_ZERO	= adr.BLT_ZERO .word
adr.BLT_ZERO.SRC_ADR	= $B13F
.var BLT_ZERO.SRC_ADR	= adr.BLT_ZERO.SRC_ADR .word
BLT_ZERO.SRC_ADR.BYTE0	= $B13F
BLT_ZERO.SRC_ADR.BYTE1	= $B140
BLT_ZERO.SRC_ADR.BYTE2	= $B141
BLT_ZERO.SRC_STEP_Y	= $B142
BLT_ZERO.SRC_STEP_X	= $B144
adr.BLT_ZERO.DST_ADR	= $B145
.var BLT_ZERO.DST_ADR	= adr.BLT_ZERO.DST_ADR .word
BLT_ZERO.DST_ADR.BYTE0	= $B145
BLT_ZERO.DST_ADR.BYTE1	= $B146
BLT_ZERO.DST_ADR.BYTE2	= $B147
BLT_ZERO.DST_STEP_Y	= $B148
BLT_ZERO.DST_STEP_X	= $B14A
BLT_ZERO.BLT_WIDTH	= $B14B
BLT_ZERO.BLT_HEIGHT	= $B14D
BLT_ZERO.BLT_AND_MASK	= $B14E
BLT_ZERO.BLT_XOR_MASK	= $B14F
BLT_ZERO.BLT_COLLISION_MASK	= $B150
BLT_ZERO.BLT_ZOOM	= $B151
BLT_ZERO.PATTERN_FEATURE	= $B152
BLT_ZERO.BLT_CONTROL	= $B153
adr.VBXE_RAM	= DATAORIGIN+$0082	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$0082
VBXE_RAM.SIZE	= DATAORIGIN+$0086
adr.BALLDATA	= DATAORIGIN+$008A	; [7] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$008A
BALLDATA.HEIGHT	= DATAORIGIN+$008C
BALLDATA.OFS	= DATAORIGIN+$008D
adr.PLAYSCREEN	= DATAORIGIN+$0091	; [7] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$0091
PLAYSCREEN.HEIGHT	= DATAORIGIN+$0093
PLAYSCREEN.OFS	= DATAORIGIN+$0094
adr.PLAYVAUS	= DATAORIGIN+$0098	; [7] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$0098
PLAYVAUS.HEIGHT	= DATAORIGIN+$009A
PLAYVAUS.OFS	= DATAORIGIN+$009B
adr.NORMAL	= DATAORIGIN+$009F	; [7] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$009F
NORMAL.HEIGHT	= DATAORIGIN+$00A1
NORMAL.OFS	= DATAORIGIN+$00A2
adr.ENLARGED	= DATAORIGIN+$00A6	; [7] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00A6
ENLARGED.HEIGHT	= DATAORIGIN+$00A8
ENLARGED.OFS	= DATAORIGIN+$00A9
adr.LASERS	= DATAORIGIN+$00AD	; [7] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00AD
LASERS.HEIGHT	= DATAORIGIN+$00AF
LASERS.OFS	= DATAORIGIN+$00B0
adr.EXPLOSION	= DATAORIGIN+$00B4	; [7] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00B4
EXPLOSION.HEIGHT	= DATAORIGIN+$00B6
EXPLOSION.OFS	= DATAORIGIN+$00B7
adr.NEWVAUS	= DATAORIGIN+$00BB	; [7] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00BB
NEWVAUS.HEIGHT	= DATAORIGIN+$00BD
NEWVAUS.OFS	= DATAORIGIN+$00BE
adr.PRESENTS	= DATAORIGIN+$00C2	; [7] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$00C2
PRESENTS.HEIGHT	= DATAORIGIN+$00C4
PRESENTS.OFS	= DATAORIGIN+$00C5
adr.SHINEWALL	= DATAORIGIN+$00C9	; [7] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$00C9
SHINEWALL.HEIGHT	= DATAORIGIN+$00CB
SHINEWALL.OFS	= DATAORIGIN+$00CC
adr.MINIVAUS	= DATAORIGIN+$00D0	; [7] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$00D0
MINIVAUS.HEIGHT	= DATAORIGIN+$00D2
MINIVAUS.OFS	= DATAORIGIN+$00D3
adr.LEVELSEL	= DATAORIGIN+$00D7	; [7] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$00D7
LEVELSEL.HEIGHT	= DATAORIGIN+$00D9
LEVELSEL.OFS	= DATAORIGIN+$00DA
adr.LETTERS	= DATAORIGIN+$00DE	; [7] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$00DE
LETTERS.HEIGHT	= DATAORIGIN+$00E0
LETTERS.OFS	= DATAORIGIN+$00E1
adr.SHOOTS	= DATAORIGIN+$00E5	; [7] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$00E5
SHOOTS.HEIGHT	= DATAORIGIN+$00E7
SHOOTS.OFS	= DATAORIGIN+$00E8
adr.FLUX	= DATAORIGIN+$00EC	; [7] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$00EC
FLUX.HEIGHT	= DATAORIGIN+$00EE
FLUX.OFS	= DATAORIGIN+$00EF
adr.VAUS	= DATAORIGIN+$00F3	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$00F3
VAUS.Y	= DATAORIGIN+$00F4
VAUS.OLDX	= DATAORIGIN+$00F5
VAUS.OLDY	= DATAORIGIN+$00F7
VAUS.OLDLEN	= DATAORIGIN+$00F9
VAUS.WIDTH	= DATAORIGIN+$00FB
VAUS.HEIGHT	= DATAORIGIN+$00FC
VAUS.FLASH	= DATAORIGIN+$00FD
VAUS.IFLASH	= DATAORIGIN+$00FE
VAUS.LETTER	= DATAORIGIN+$00FF
adr.PATTERN	= DATAORIGIN+$0100	; [7] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$0100
PATTERN.HEIGHT	= DATAORIGIN+$0102
PATTERN.OFS	= DATAORIGIN+$0103
adr.PATTERN0	= DATAORIGIN+$0107	; [7] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0107
PATTERN0.HEIGHT	= DATAORIGIN+$0109
PATTERN0.OFS	= DATAORIGIN+$010A
adr.PATTERN1	= DATAORIGIN+$010E	; [7] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$010E
PATTERN1.HEIGHT	= DATAORIGIN+$0110
PATTERN1.OFS	= DATAORIGIN+$0111
adr.PATTERN2	= DATAORIGIN+$0115	; [7] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0115
PATTERN2.HEIGHT	= DATAORIGIN+$0117
PATTERN2.OFS	= DATAORIGIN+$0118
adr.PATTERN3	= DATAORIGIN+$011C	; [7] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$011C
PATTERN3.HEIGHT	= DATAORIGIN+$011E
PATTERN3.OFS	= DATAORIGIN+$011F
adr.PATTERN4	= DATAORIGIN+$0123	; [7] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0123
PATTERN4.HEIGHT	= DATAORIGIN+$0125
PATTERN4.OFS	= DATAORIGIN+$0126
STATUS	= DATAORIGIN+$012A
REMAIN_BLK	= DATAORIGIN+$012B
TOTALWALL	= DATAORIGIN+$012C
adr.SCORE	= DATAORIGIN+$012D	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$012D] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$0139] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$013C] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$013F
SCORE.PL_NUMB	= DATAORIGIN+$0143
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0144] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$0147
CUR_PLAYER	= DATAORIGIN+$0148
adr.SHINEREC	= DATAORIGIN+$0149	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$0149
SHINEREC.YB	= DATAORIGIN+$014A
SHINEREC.FRAME	= DATAORIGIN+$014B
SHINEREC.BLOCK	= DATAORIGIN+$014C
SHINEREC.ACTIVE	= DATAORIGIN+$014D
LV	= DATAORIGIN+$014E
TRAINER	= DATAORIGIN+$0150
adr.LETT	= DATAORIGIN+$0151	; [15] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$0151
LETT.Y	= DATAORIGIN+$0152
LETT.TYP	= DATAORIGIN+$0153
LETT.FRAME	= DATAORIGIN+$0155
LETT.SUBFRAME	= DATAORIGIN+$0156
LETT.ACTIVE	= DATAORIGIN+$0157
LETT.INCOMING	= DATAORIGIN+$0158
LETT.NEXTX	= DATAORIGIN+$015A
LETT.NEXTY	= DATAORIGIN+$015B
LETT.NEXTTYPE	= DATAORIGIN+$015C
LETT.LAST	= DATAORIGIN+$015E
adr.FIRE	= DATAORIGIN+$0160	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$0160
FIRE.Y	= DATAORIGIN+$0161
FIRE.SHOT	= DATAORIGIN+$0162
FIRE.AVL	= DATAORIGIN+$0163
FIRE.NW	= DATAORIGIN+$0164
BALLS_IN_PLAY	= DATAORIGIN+$0165
SCRFLUX	= DATAORIGIN+$0166
SCRFLUXCNT	= DATAORIGIN+$0167
SOUND_ON	= DATAORIGIN+$0168
OLD_SCORES	= DATAORIGIN+$0169
HLP	= DATAORIGIN+$016D
F_HLP	= DATAORIGIN+$016F
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD10TABLE	= $C200
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.MOD90TABLE	= $C300
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD360TABLE	= $C400
.var MOD360TABLE	= adr.MOD360TABLE .word
adr.ATAN_TAB	= $C600
.var ATAN_TAB	= adr.ATAN_TAB .word
adr.LOG2_TAB	= $C700
.var LOG2_TAB	= adr.LOG2_TAB .word
adr.SCALE360	= $C800
.var SCALE360	= adr.SCALE360 .word
adr.SINTABLE	= $CA00
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.MUL90_16	= $DC00
.var MUL90_16	= adr.MUL90_16 .word
adr.ALL_WALLS	= $DD00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $27 $00  $00 $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 937

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $06 $0C  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
