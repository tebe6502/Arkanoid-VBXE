; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/30] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'mod90table.obx' adr.MOD90TABLE 0 0 0 0 0 0 0 0
	RCDATA 'mod10table.obx' adr.MOD10TABLE 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 950

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	sta @FCMPL.A+2
	sta @FCMPL.A+3
	lda A
	sta @FCMPL.B
	lda A+1
	sta @FCMPL.B+1
	lda A+2
	sta @FCMPL.B+2
	lda A+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jpl l_0045

; optimize OK (SYSTEM), line = 951

	lda A
	sta X
	lda A+1
	sta X+1
	lda A+2
	sta X+2
	lda A+3
	eor #$80
	sta X+3

; optimize OK (SYSTEM), line = 952

	lda #$01
	jmp l_005A
l_0045

; optimize OK (SYSTEM), line = 954

	lda A
	sta X
	lda A+1
	sta X+1
	lda A+2
	sta X+2
	lda A+3
	sta X+3

; optimize OK (SYSTEM), line = 955

	lda #$00
l_005A
	sta SIGN

; optimize OK (SYSTEM), line = 958

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	lda #$80
	sta @FCMPL.A+2
	lda #$3F
	sta @FCMPL.A+3
	lda X
	sta @FCMPL.B
	lda X+1
	sta @FCMPL.B+1
	lda X+2
	sta @FCMPL.B+2
	lda X+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jmi l_0072
	jeq l_0072

; optimize OK (SYSTEM), line = 959

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta A
	lda :FPMAN1
	sta A+1
	lda :FPMAN2
	sta A+2
	lda :FPMAN3
	sta A+3

; optimize OK (SYSTEM), line = 960

	lda #$01
	jmp l_0088
l_0072

; optimize OK (SYSTEM), line = 962

	lda X
	sta A
	lda X+1
	sta A+1
	lda X+2
	sta A+2
	lda X+3
	sta A+3

; optimize OK (SYSTEM), line = 963

	lda #$00
l_0088
	sta YES

; optimize OK (SYSTEM), line = 966

	lda A
	sta :FP2MAN0
	lda A+1
	sta :FP2MAN1
	lda A+2
	sta :FP2MAN2
	lda A+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda A
	sta :FP1MAN0
	lda A+1
	sta :FP1MAN1
	lda A+2
	sta :FP1MAN2
	lda A+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda A
	sta :FP1MAN0
	lda A+1
	sta :FP1MAN1
	lda A+2
	sta :FP1MAN2
	lda A+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda A
	sta :FP2MAN0
	lda A+1
	sta :FP2MAN1
	lda A+2
	sta :FP2MAN2
	lda A+3
	sta :FP2MAN3
	lda #$4B
	sta :FP1MAN0
	lda #$C8
	sta :FP1MAN1
	lda #$87
	sta :FP1MAN2
	lda #$3D
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda #$A3
	sta :FP1MAN0
	lda #$92
	sta :FP1MAN1
	lda #$7A
	sta :FP1MAN2
	lda #$3E
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+10
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 968

	lda YES
	jeq l_00BC
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$C9
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
l_00BC

; optimize OK (SYSTEM), line = 970

	lda SIGN
	jeq l_00D3
	lda RESULT+3
	eor #$80
	sta RESULT+3
l_00D3
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
C1	= $3E7A92A3
C2	= $3D87C84B
PI_2	= $3FC90FDB
PI_4	= $3F490FDB
SIGN	= DATAORIGIN+$0013
YES	= DATAORIGIN+$0014
X	= DATAORIGIN+$0015

@VarData	= A
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0019
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$001A
GETCOLOR	= DATAORIGIN+$001B
VIDEORAM	= DATAORIGIN+$001C
adr.LASTARCCOORDS	= DATAORIGIN+$001E	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$001E
LASTARCCOORDS.Y	= DATAORIGIN+$0020
LASTARCCOORDS.XSTART	= DATAORIGIN+$0022
LASTARCCOORDS.YSTART	= DATAORIGIN+$0024
LASTARCCOORDS.XEND	= DATAORIGIN+$0026
LASTARCCOORDS.YEND	= DATAORIGIN+$0028
WIN_LEFT	= DATAORIGIN+$002A
WIN_RIGHT	= DATAORIGIN+$002C
WIN_TOP	= DATAORIGIN+$002E
WIN_BOTTOM	= DATAORIGIN+$0030
SCANLINE_WIDTH	= DATAORIGIN+$0032
CURRENTX	= DATAORIGIN+$0033
CURRENTY	= DATAORIGIN+$0035

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0073
POSITION	= DATAORIGIN+$0075
SIZE	= DATAORIGIN+$0077
ADR	= DATAORIGIN+$0079
SIZ	= DATAORIGIN+$007D

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_0211
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_0211
	cmp #$1F
	jne l_0220

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0220
	cmp #$18
	jne l_022F

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_022F

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0081
S	= DATAORIGIN+$0082
@CASETMP_0005	= DATAORIGIN+$0084

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0085

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0086

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0087
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$008B

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0043	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0043
VRAM.SIZE	= DATAORIGIN+$0047
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0094

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0096
B	= DATAORIGIN+$0098

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------


seed = MAIN.SYSTEM.RndSeed

	jsr random16

	lda seed+1
	and #$03
	sta Result+1
	lda seed
	sta Result

loop	cpw Result range
	bcc @exit

	lsr Result+1
	ror Result

	jmp loop

Random16:
	lda seed+1
	tay ; store copy of high byte
	; compute seed+1 ($39>>1 = %11100)
	lsr ; shift to consume zeroes on left...
	lsr
	lsr
	sta seed+1 ; now recreate the remaining bits in reverse order... %111
	lsr
	eor seed+1
	lsr
	eor seed+1
	eor seed+0 ; recombine with original low byte
	sta seed+1
	; compute seed+0 ($39 = %111001)
	tya ; original high byte
	sta seed+0
	asl
	eor seed+0
	asl
	eor seed+0
	asl
	asl
	asl
	eor seed+0
	sta seed+0
	rts

@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$009A
RESULT	= DATAORIGIN+$009C

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000138  -------------------

; N = hi:lo (16-bit)
; N mod 90 -> A

    LDY a+1
    LDA Mod90Table,Y   ; tablica: (X*256) mod 90
    CLC
    ADC a              ; dodaj młodszy bajt
    CMP #90
    BCC done
    SBC #90
    CMP #90
    BCC done
    SBC #90            ; max 2 odejmowania bo 256 < 3*90
done:
    ; A = reszta mod 90

    sta Result

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$009E
RESULT	= DATAORIGIN+$00A0

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	FASTSQRT					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 212

	lda I
	sta :STACKORIGIN+9
	lda I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda I+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda I+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$C0
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$1F
	sta I+3
	lda :STACKORIGIN+9
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	sta I+1

; optimize OK (arkanoid_vbxe.pas), line = 213

	lda <I
	sta :bp2
	lda >I
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$00A1
RESULT	= DATAORIGIN+$00A5
I	= DATAORIGIN+$00A1

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 307

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 309

	sta @CASETMP_0007
	cmp #$0B
	jne l_0294
@

; optimize OK (service.pas), line = 310

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_02A5
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_02A5
	jmp a_0007
l_0294
	cmp #$07
	jne l_02B0

; optimize OK (service.pas), line = 311

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_02C1
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_02C1
l_02B0
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$01AA
A	= DATAORIGIN+$01AC
@CASETMP_0007	= DATAORIGIN+$01AD

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 320

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01AE

	rts						; ret
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@0201810000181000

; --- WhileProlog
l_02DE

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 328

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_02DE

; optimize OK (service.pas), line = 330

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 331

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= DATAORIGIN+$01AF
DWIDTH	= DATAORIGIN+$01B1

@VarData	= SWIDTH
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 340

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 341

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 342

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 344

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 345

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 346

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 348

	lda #$00
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 350

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 352

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 354

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01B3
DST	= DATAORIGIN+$01B7
W	= DATAORIGIN+$01BB
H	= DATAORIGIN+$01BD

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITLETTER					; PROCEDURE

; -------------------  ASM Block 00000139  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 366

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 367

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 368

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 370

	lda DST+2
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 371

	lda DST+1
	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 372

	lda DST
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 378

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01BE
DST	= DATAORIGIN+$01C2

@VarData	= SRC
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 390

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 391

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 392

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 394

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 395

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 396

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 398

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 399

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 401

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 402

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 404

	lda #$00
	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 410

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01C6
DST	= DATAORIGIN+$01CA
W	= DATAORIGIN+$01CE
H	= DATAORIGIN+$01D0

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 422

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 423

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 424

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 426

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 427

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 428

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 430

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 432

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 433

	lda W
	sta BLT.SRC_STEP_Y
	lda W+1
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 435

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 437

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000144  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 443

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01D1
DST	= DATAORIGIN+$01D5
W	= DATAORIGIN+$01D9
H	= DATAORIGIN+$01DB

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000145  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 455

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 456

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 457

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 459

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 460

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 461

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 463

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 464

	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 466

	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 467

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 469

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000146  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 475

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$01DC
DST	= DATAORIGIN+$01E0
SIZE	= DATAORIGIN+$01E4

@VarData	= SRC
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01E6

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 601

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_0464
	lda A
	sta RESULT
	lda A+1
	jmp l_0473
l_0464

; optimize OK (service.pas), line = 602

	lda B
	sta RESULT
	lda B+1
l_0473
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01E8
B	= DATAORIGIN+$01EA
RESULT	= DATAORIGIN+$01EC

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 608

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_048E
	lda A
	sta RESULT
	lda A+1
	jmp l_049D
l_048E

; optimize OK (service.pas), line = 609

	lda B
	sta RESULT
	lda B+1
l_049D
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01EE
B	= DATAORIGIN+$01F0
RESULT	= DATAORIGIN+$01F2

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 618

	sta STATUS

; -------------------  ASM Block 00000147  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$01F4

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 666

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 668

	sta Y

l_04BD
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_04DD

; optimize OK (service.pas), line = 671

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_04EE
l_04DD

; optimize OK (service.pas), line = 673

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_04EE
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 675

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_04BD
l_04CB

; ------------------------------------------------------------

Y	= DATAORIGIN+$01F5

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 691

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_0512

; optimize FAIL ('@print', service.pas), line = 692

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_0512

; optimize OK (service.pas), line = 696

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 697

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 699

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 701

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 702

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 704

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 705

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 706

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 708

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 714

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 716

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 719

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 720

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 722

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 726

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 727

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 729

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 731

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 732

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 734

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 736

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 738

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
	
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 760

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 761

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 763

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 765

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_0596

; optimize OK (service.pas), line = 767

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 768

	lda adr.WALL,y
	cmp #$0A
	jeq l_05B6
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_05B6

; optimize OK (service.pas), line = 770

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 771

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 772

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 774

	lda #$00
	sta Y

l_05E6
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_05F4

; optimize OK (service.pas), line = 776

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 779

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+256,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_05E6
l_05F4
l_0596

; optimize FAIL (0, service.pas), line = 783

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 784

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_063B
	lda #$00
	sta SHINEREC.ACTIVE
l_063B

; ------------------------------------------------------------

XB	= DATAORIGIN+$01F6
YB	= DATAORIGIN+$01F8
FRAME	= DATAORIGIN+$01FA
XF	= DATAORIGIN+$01FC
YF	= DATAORIGIN+$01FE
FR	= DATAORIGIN+$0200
OG	= DATAORIGIN+$0202
Y	= DATAORIGIN+$0204
I	= DATAORIGIN+$0205

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 793

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 794

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 801

	lda SHINEREC.ACTIVE
	jeq l_065B
	jsr UNSHINE_BLOCK
l_065B

; optimize OK (service.pas), line = 803

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 804

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 805

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 806

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 807

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0206
YB	= DATAORIGIN+$0207

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 813

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_069C
	jsr SHINE_BLOCK
l_069C

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_06A5

; optimize OK (service.pas), line = 821

	lda #$64
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda RAND.RESULT+1
	sta RN+1

; optimize OK (service.pas), line = 822

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 823

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_06B3

; optimize FAIL (0, service.pas), line = 828

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 829

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 832

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_06B3

; optimize OK (service.pas), line = 836

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_06A5

; optimize OK (service.pas), line = 838

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0208
RN	= DATAORIGIN+$020A
SUM	= DATAORIGIN+$020C
LETTER	= DATAORIGIN+$020E

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 845

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 847

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta BLITLETTER.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITLETTER.DST+1
	lda #$00
	adc #$00
	sta BLITLETTER.DST+2
	lda #$00
	adc #$00
	sta BLITLETTER.DST+3
	lda LETTERS.OFS
	add FL
	sta BLITLETTER.SRC
	lda LETTERS.OFS+1
	adc FL+1
	sta BLITLETTER.SRC+1
	lda LETTERS.OFS+2
	adc #$00
	sta BLITLETTER.SRC+2
	lda LETTERS.OFS+3
	adc #$00
	sta BLITLETTER.SRC+3
	jsr BLITLETTER

; ------------------------------------------------------------

FL	= DATAORIGIN+$0210
FW	= DATAORIGIN+$0212

@VarData	= FL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 854

	ldy LETT.Y
	cpy #$C8
	jcs l_0726

; optimize OK (service.pas), line = 856

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 858

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_0726

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 867

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 868

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 874

	lda LETT.ACTIVE
	jeq l_075F
	jsr DISABLE_LETTER
l_075F

; optimize OK (service.pas), line = 876

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 877

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 878

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 879

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 880

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 881

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0214
YL	= DATAORIGIN+$0216
LETTER	= DATAORIGIN+$0218

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 887

	lda LETT.ACTIVE
	jeq l_078E

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 889

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 890

	inc LETT.Y

; optimize OK (service.pas), line = 891

	lda LETT.Y
	cmp #$C8
	jcc l_07A6
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 892
	jmp l_07B1
l_07A6

; optimize FAIL ('PUT_LETTER', service.pas), line = 894

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 895

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 896

	lda LETT.SUBFRAME
	cmp #$05
	jne l_07C8

; optimize OK (service.pas), line = 898

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 899

	inc LETT.FRAME
l_07C8

; optimize OK (service.pas), line = 902

	lda LETT.FRAME
	cmp #$08
	jne l_07E5
	lda #$00
	sta LETT.FRAME
l_07E5

; optimize OK (service.pas), line = 904

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_083E
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_083E
	jeq l_083E
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_083E
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_083E
	jeq l_083E
@

; optimize OK (service.pas), line = 907

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 908

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 909

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_07B1

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 910

	jsr DISABLE_LETTER
l_083E

; optimize OK (service.pas), line = 914

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_085F
l_078E

; optimize OK (service.pas), line = 916

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0870

; optimize OK (service.pas), line = 917

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_085F
l_0870

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 927

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$021A	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$021A
BTM.HEIGHT	= DATAORIGIN+$021C
BTM.OFS	= DATAORIGIN+$021E

@VarData	= BTM.WIDTH
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 947

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 949

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda BALLDATA.OFS
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0222
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 959

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 961

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0226
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 984

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 996

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_08F0s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_08F0s
	lda:sne #$01
l_08F0s	lda #$00
	sta B0

; optimize OK (service.pas), line = 997

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0908s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_0908s
	lda:seq #$00
l_0908s	lda #$01
	sta B1

; optimize OK (service.pas), line = 999

	lda B0
	and B1
	jeq l_091A

; optimize OK (service.pas), line = 1000

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_091A

; optimize OK (service.pas), line = 1002

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1004

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1005

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$022A
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$022E
B1	= DATAORIGIN+$022F

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1018

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1019

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 1021

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex

; optimize OK (service.pas), line = 1022

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 1024

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1026

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	lda FASTSQRT.RESULT
	sta F_HLP
	lda FASTSQRT.RESULT+1
	sta F_HLP+1
	lda FASTSQRT.RESULT+2
	sta F_HLP+2
	lda FASTSQRT.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 1028

	lda SPEED
	sta :FPMAN0
	ldy #$00
	lda SPEED+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda F_HLP
	sta :FP2MAN0
	lda F_HLP+1
	sta :FP2MAN1
	lda F_HLP+2
	sta :FP2MAN2
	lda F_HLP+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3

; optimize OK (service.pas), line = 1033

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1034

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1036

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_098C
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_098C

; optimize OK (service.pas), line = 1037

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_09A4
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_09A4

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0230
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
SPEED	= DATAORIGIN+$0234
SX	= DATAORIGIN+$0236
SY	= DATAORIGIN+$0238
VM	= DATAORIGIN+$023A
I	= DATAORIGIN+$023E
A	= DATAORIGIN+$0242
B	= DATAORIGIN+$0244

@VarData	= BALL
@VarDataSize	= 20

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1045

	lda ANGLE+1
	jpl l_09C0
	lda ANGLE
	add #$68
	sta ANGLE
	lda ANGLE+1
	adc #$01
	sta ANGLE+1
l_09C0

; --- WhileProlog
	jmp l_09C6
l_09C7

; optimize OK (service.pas), line = 1047

	lda ANGLE
	sub #$68
	sta ANGLE
	lda ANGLE+1
	sbc #$01
	sta ANGLE+1
l_09C6
	lda ANGLE
	cmp #$68
	lda ANGLE+1
	sbc #$01
	svc
	eor #$80
	jpl l_09C7

; optimize OK (service.pas), line = 1049

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add #$B4
	sta :bp2
	lda #$C4
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1050

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$C4
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0246
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
ANGLE	= DATAORIGIN+$024A

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1065

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_09FD

; optimize OK (service.pas), line = 1067

	ldy #$00
	lda (:bp2),y
	jmi l_0A0F

; optimize OK (service.pas), line = 1068

	lda #$A6
	sta W
	lda #$FF
	jmp l_0A1D
l_0A0F

; optimize OK (service.pas), line = 1070

	lda #$5A
	sta W
	lda #$00
l_0A1D
	sta W+1
	jmp l_0A2A
l_09FD

; optimize OK (service.pas), line = 1078

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1080

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.A
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.A+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.A+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.A+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$49
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1082

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1084

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0A59
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0A59

; optimize OK (service.pas), line = 1086

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01

; --- WhileProlog
	jmp l_0A60
l_0A61

; optimize OK (service.pas), line = 1089

	lda W
	sub #$68
	sta W
	lda W+1
	sbc #$01
l_0A60
	sta W+1
	lda W
	cmp #$68
	lda W+1
	sbc #$01
	svc
	eor #$80
	jpl l_0A61
l_0A2A

; optimize OK (service.pas), line = 1092

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$024C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$0250
W	= DATAORIGIN+$0252

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1101

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1107

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1112

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1113

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1115

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1117

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1118

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0254
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$19
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1130

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex

; optimize OK (service.pas), line = 1131

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 1133

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1135

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	lda FASTSQRT.RESULT
	sta F_HLP
	lda FASTSQRT.RESULT+1
	sta F_HLP+1
	lda FASTSQRT.RESULT+2
	sta F_HLP+2
	lda FASTSQRT.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 1137

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$0258	; [26] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$0258
BALL.Y	= DATAORIGIN+$025A
BALL.FINEX	= DATAORIGIN+$025C
BALL.FINEY	= DATAORIGIN+$025D
BALL.OLDX	= DATAORIGIN+$025E
BALL.OLDY	= DATAORIGIN+$0260
BALL.SPEED	= DATAORIGIN+$0262
BALL.FINESPEED	= DATAORIGIN+$0264
BALL.SPEEDX	= DATAORIGIN+$0266
BALL.SPEEDY	= DATAORIGIN+$0268
BALL.SBD	= DATAORIGIN+$026A
BALL.BRWHIT	= DATAORIGIN+$026C
BALL.INPLAY	= DATAORIGIN+$026D
BALL.LAUNCH	= DATAORIGIN+$026E
BALL.ONVAUS	= DATAORIGIN+$026F
BALL.STM	= DATAORIGIN+$0271
RESULT	= DATAORIGIN+$0272
I	= DATAORIGIN+$0274
A	= DATAORIGIN+$0278
B	= DATAORIGIN+$027A

@VarData	= BALL.X
@VarDataSize	= 34

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1153

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDX-DATAORIGIN
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1154

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDY-DATAORIGIN
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1156

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1157

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1159

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y

; optimize OK (service.pas), line = 1160

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y

; optimize OK (service.pas), line = 1165

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0B30

; optimize OK (service.pas), line = 1167

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1168

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1169

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1170

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B30

; optimize OK (service.pas), line = 1175

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0B66

; optimize OK (service.pas), line = 1177

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1178

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1179

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1180

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B66

; optimize OK (service.pas), line = 1185

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0B9C

; optimize OK (service.pas), line = 1187

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1188

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1189

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1190

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B9C

; optimize OK (service.pas), line = 1198

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1199

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1200

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 1203

	lda B0
	and B1
	and B2
	jeq l_0BFE

; optimize OK (service.pas), line = 1207

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0C2D
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0C2D

; optimize OK (service.pas), line = 1210

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1212

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1214

	lda VAUS.LETTER
	cmp #$06
	jne l_0C55
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0C55

; optimize OK (service.pas), line = 1216

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1217

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1218

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0C55

; optimize OK (service.pas), line = 1221

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1225

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0C85

; optimize OK (service.pas), line = 1228

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1232

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1240

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1245

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0C85

; optimize OK (service.pas), line = 1251

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0CC6

; optimize OK (service.pas), line = 1253

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1254

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1255

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1256

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0CC6
l_0C2D
l_0BFE

; optimize OK (service.pas), line = 1267

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0D15

; optimize OK (service.pas), line = 1269

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1270

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0D15

; ------------------------------------------------------------

BALL	= DATAORIGIN+$027C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$0280
B1	= DATAORIGIN+$0281
B2	= DATAORIGIN+$0282
X	= DATAORIGIN+$0283
Y	= DATAORIGIN+$0285
ANGLE	= DATAORIGIN+$0287

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1277

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1278

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1279

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1284

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1285

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1287

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1288

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1289

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1293

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1297

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1298

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1299

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1300

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1309

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1310

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1323

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1325

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1327

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1336

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1338

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0DB1

; optimize FAIL (0, service.pas), line = 1340

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1341

	lda #$00
	sta VAUS.IFLASH
l_0DB1

; optimize OK (service.pas), line = 1344

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0DCE
	lda #$00
	sta VAUS.FLASH
l_0DCE

; optimize OK (service.pas), line = 1354

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000150  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1360

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1362

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1364

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1365

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1391

	lda #$00
	sta I

l_0E22
; --- ForToDoCondition
	lda I
	cmp Y
	scc
	jne l_0E30
	ldy VAUS.FLASH
	lda adr.FLASH,y
	ldy I
	sta adr.SCR,y

; --- ForToDoEpilog
	inc I
	jne l_0E22
l_0E30

; optimize OK (service.pas), line = 1393

	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1394

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1395

	lda HLP
	sta :STACKORIGIN+11
	lda #$50
	add HLP+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	sub #$01
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda :STACKORIGIN+STACKWIDTH+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	sbc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000151  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$0289
Y	= DATAORIGIN+$028A

@VarData	= I
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1410

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0E95

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1411

	jsr REMOVE_VAUS
l_0E95

; optimize OK (service.pas), line = 1413

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1414

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1421

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1422

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1424

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$028B
Y	= DATAORIGIN+$028D

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1439

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1440

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1442

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000152  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1448

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1449

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1451

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1452

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1455

	lda #$07
	sta Y

l_0F14
; --- ForToDoCondition
	lda YS
	add Y
	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YH+1
	lda :eax
	sta YH

; optimize OK (service.pas), line = 1467

	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1469

	lda #$0F
	sta X

l_0F49
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0F6F

; optimize OK (service.pas), line = 1476

	lda X
	adc I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1480

	lda X
	add XS
	tay
	lda adr.MODX,y
	add YH
	sta :STACKORIGIN+9
	lda #$00
	adc YH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1482

	lda X
	add I
	tay
	lda CL
	sta adr.SCR,y
l_0F6F

; --- ForToDoEpilog
	dec X
	jpl l_0F49
l_0F57

; --- ForToDoEpilog
	dec Y
	jpl l_0F14
l_0F22

; optimize OK (service.pas), line = 1494

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1496

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1497

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1506

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1508

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1509

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1511

	lda #$00
	sta I

; optimize OK (service.pas), line = 1514

	sta Y

l_1006
; --- ForToDoCondition
	lda Y
	cmp #$09
	jcs l_1014

; optimize OK (service.pas), line = 1517

	lda #$10
	sta X

l_101D
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_1047

; optimize OK (service.pas), line = 1538

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	ora #$80
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_1047

; --- ForToDoEpilog
	dec X
	jpl l_101D
l_102B

; optimize OK (service.pas), line = 1548

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	inc Y
	jne l_1006
l_1014

; optimize OK (service.pas), line = 1552

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1554

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1555

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000153  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$028F
YA	= DATAORIGIN+$0290
X	= DATAORIGIN+$0291
Y	= DATAORIGIN+$0292
I	= DATAORIGIN+$0293
XS	= DATAORIGIN+$0294
YS	= DATAORIGIN+$0295
YH	= DATAORIGIN+$0296
CL	= DATAORIGIN+$0298
SHADOW	= DATAORIGIN+$0299

@VarData	= XA
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1575

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1576

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1578

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; -------------------  ASM Block 00000154  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1585

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1586

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1589

	lda #$07
	sta Y

l_10CA
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1593

	lda #$0F
	sta X

l_10EB
; --- ForToDoCondition
	lda X
	add I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1600

	lda Y
	cmp #$07
	jcs l_112A
	lda X
	cmp #$0F
	jcs l_112A

; optimize OK (service.pas), line = 1605

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1607

	lda X
	add I
	tay
	lda CL
	jmp l_115E
l_112A

; optimize OK (service.pas), line = 1618

	lda X
	add I
	tay
	lda SHADOW
l_115E
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_10EB
l_10F9

; --- ForToDoEpilog
	dec Y
	jpl l_10CA
l_10D8

; optimize OK (service.pas), line = 1630

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1632

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1633

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1636

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1638

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1639

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1641

	lda #$00
	sta I

; optimize OK (service.pas), line = 1645

	sta Y

l_11BC
; --- ForToDoCondition
	lda Y
	cmp #$09
	jcs l_11CA

; optimize OK (service.pas), line = 1648

	lda #$10
	sta X

l_11D3
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$08
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	jne l_11FC
	lda :STACKORIGIN+STACKWIDTH*2+9
	jne l_11FC
	lda :STACKORIGIN+STACKWIDTH+9
	jne l_11FC
	lda :STACKORIGIN+9
	cmp #$D8
	jcs l_11FC

; optimize OK (service.pas), line = 1658

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	and #$7F
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_11FC

; --- ForToDoEpilog
	dec X
	jpl l_11D3
l_11E1

; optimize OK (service.pas), line = 1667

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	inc Y
	jne l_11BC
l_11CA

; optimize OK (service.pas), line = 1670

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1672

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1673

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1676

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc XS+1
	sta HLP+1

; optimize OK (service.pas), line = 1678

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1679

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1682

	lda BLOCK
	cmp #$09
	jcc l_1268

; optimize OK (service.pas), line = 1684

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1685

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_1283

; optimize OK (service.pas), line = 1687

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1688

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_12A2
l_1283

; optimize OK (service.pas), line = 1694

	lda BLOCK
	cmp #$0A
	jne l_12B4
	lda #$C9
	sta CL2
l_12A2
l_12B4

; optimize OK (service.pas), line = 1698

	lda #$06
	sta Y

l_12C4
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1706

	tay
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1708

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1715

	sta adr.SCR,y

; --- ForToDoEpilog
	dec Y
	jpl l_12C4
l_12D2

; optimize OK (service.pas), line = 1721

	lda #$0E
	tay

l_1310
; --- ForToDoCondition
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1728

	lda CL2
	and #$7F
	ora CL
	sta adr.SCR,y

; --- ForToDoEpilog
	dey
	jpl l_1310
	sty X
l_1268

; optimize OK (service.pas), line = 1739

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1741

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1742

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$029A
YA	= DATAORIGIN+$029B
BLOCK	= DATAORIGIN+$029C
X	= DATAORIGIN+$029D
Y	= DATAORIGIN+$029E
I	= DATAORIGIN+$029F
XS	= DATAORIGIN+$02A0
YS	= DATAORIGIN+$02A2
YH	= DATAORIGIN+$02A4
CL	= DATAORIGIN+$02A6
CL2	= DATAORIGIN+$02A7
SHADOW	= DATAORIGIN+$02A8

@VarData	= XA
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1757

	lda #$00
	sta Y

l_1369
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_1377

; optimize OK (service.pas), line = 1759

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1761

	lda #$00
	sta X

l_138A
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1398

; optimize OK (service.pas), line = 1762

	adc I
	tay
	lda adr.WALL,y
	jeq l_13B3
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_13B3

; --- ForToDoEpilog
	inc X
	jne l_138A
l_1398

; --- ForToDoEpilog
	inc Y
	jne l_1369
l_1377

; ------------------------------------------------------------

X	= DATAORIGIN+$02A9
Y	= DATAORIGIN+$02AA
I	= DATAORIGIN+$02AB

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1773

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1774

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1777

	lda #$00
	sta Y

l_13ED
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13FB

; optimize OK (service.pas), line = 1778

	lda #$00
	sta X

l_1404
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1412

; optimize OK (service.pas), line = 1781

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_144A
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_144A
	inc REMAIN_BLK
l_144A

; --- ForToDoEpilog
	inc X
	jne l_1404
l_1412

; --- ForToDoEpilog
	inc Y
	jne l_13ED
l_13FB

; optimize OK (service.pas), line = 1783

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1785

	sta @CASETMP_0008
	cmp #$00
	jne l_1474
@

; optimize OK (service.pas), line = 1786

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_1474
	cmp #$01
	jne l_147D

; optimize OK (service.pas), line = 1787

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_147D
	cmp #$02
	jne l_1486

; optimize OK (service.pas), line = 1788

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_1486
	cmp #$03
	jne l_148F

; optimize OK (service.pas), line = 1789

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_148F
	cmp #$04
	jne l_1498

; optimize OK (service.pas), line = 1790

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_1498
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$02AC
Y	= DATAORIGIN+$02AD
WL	= DATAORIGIN+$02AE
@CASETMP_0008	= DATAORIGIN+$02AF

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1816

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1817

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1818

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1819

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1821

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1823

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1824

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1825

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1826

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1828

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1829

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1830

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1831

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1833

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1834

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1835

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1836

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1847

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_1517x
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_1517
l_1517x

; optimize OK (service.pas), line = 1849

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_152A

; optimize OK (service.pas), line = 1851

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_1537
l_1538

; optimize OK (service.pas), line = 1855

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1856

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1858

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1860

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_156F

; optimize OK (service.pas), line = 1862

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1863

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_156F

; optimize OK (service.pas), line = 1866

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_158E

; optimize OK (service.pas), line = 1868

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1869

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_158E
l_1537

; optimize OK (service.pas), line = 1853

	lda YN
	and #$07
	jeq l_1538w
	lda YN
	and #$07
	cmp #$07
	jne l_1538
l_1538w
l_152A

; optimize OK (service.pas), line = 1875

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_15CD

; optimize OK (service.pas), line = 1877

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_15DA
l_15DB

; optimize OK (service.pas), line = 1881

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1882

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1884

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1886

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_1612

; optimize OK (service.pas), line = 1888

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1889

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_1612

; optimize OK (service.pas), line = 1892

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_1631

; optimize OK (service.pas), line = 1894

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1895

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_1631
l_15DA

; optimize OK (service.pas), line = 1879

	lda XJ
	and #$0F
	jeq l_15DBw
	lda XJ
	and #$0F
	cmp #$0F
	jne l_15DB
l_15DBw
l_15CD

; optimize OK (service.pas), line = 1906

	lda COLLISION
	cmp #$01
	jne l_1670
; optimize OK (service.pas), line = 1908
; optimize OK (service.pas), line = 1909
	jmp l_1684
l_1670

; optimize OK (service.pas), line = 1911

	lda COLLISION
	cmp #$02
	jne l_1696

; optimize OK (service.pas), line = 1913

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1914

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_16AA
l_1696

; optimize OK (service.pas), line = 1916

	lda COLLISION
	cmp #$03
	jne l_16BC

; optimize OK (service.pas), line = 1918

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1919

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1684

; optimize OK (service.pas), line = 1920

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1921

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_16AA
	sta (:bp2),y
l_16BC
	jmp l_16DC
l_1517

; optimize OK (service.pas), line = 1926

	lda #$02
	jsr FATAL_ERROR
l_16DC

; optimize OK (service.pas), line = 1929

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1930

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1931

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1932

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1935

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1936

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1943

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$02B0
Y1	= DATAORIGIN+$02B2
X2	= DATAORIGIN+$02B4
Y2	= DATAORIGIN+$02B6
RESULT	= DATAORIGIN+$02B8
X	= DATAORIGIN+$02B9
Y	= DATAORIGIN+$02BB
XK	= DATAORIGIN+$02BD
YK	= DATAORIGIN+$02BF
XJ	= DATAORIGIN+$02C1
YJ	= DATAORIGIN+$02C3
XH	= DATAORIGIN+$02C5
YH	= DATAORIGIN+$02C7
XN	= DATAORIGIN+$02C9
YN	= DATAORIGIN+$02CB
XP1	= DATAORIGIN+$02CD
YP1	= DATAORIGIN+$02CF
XP2	= DATAORIGIN+$02D1
YP2	= DATAORIGIN+$02D3
XP	= DATAORIGIN+$02D5
YP	= DATAORIGIN+$02D7
COLLISION	= DATAORIGIN+$02D9

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1954

	lda #$0C
	cmp XB
	jcc l_171C
	lda #$0E
	cmp YB
	jcc l_171C

; optimize OK (service.pas), line = 1957

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1959

	tay
	lda adr.WALL,y
	jeq l_1742

; optimize OK (service.pas), line = 1961

	cmp #$0A
	jcs l_1758

; optimize OK (service.pas), line = 1963

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1964

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1968

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1970

	lda #$2C
	sta RAND.RANGE
	lda #$01
	sta RAND.RANGE+1
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1972

	lda XB
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1973

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1974

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1976

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1977

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1978

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1979

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_17B0
l_1758

; optimize OK (service.pas), line = 1984

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_17C9

; optimize OK (service.pas), line = 1986

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1987

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1989

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1990

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_17E5
l_17C9

; optimize OK (service.pas), line = 1994

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1995

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1997

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_17E5
l_17B0
l_1742
l_171C

; ------------------------------------------------------------

XB	= DATAORIGIN+$02DA
YB	= DATAORIGIN+$02DB
BALL	= DATAORIGIN+$02DC
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
I	= DATAORIGIN+$02E0

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 2008

	lda #$0C
	cmp XB
	jcc l_1816
	lda #$0E
	cmp YB
	jcc l_1816

; optimize OK (service.pas), line = 2011

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2013

	tay
	lda adr.WALL,y
	jeq l_183C

; optimize OK (service.pas), line = 2015

	cmp #$0A
	jcs l_1852

; optimize OK (service.pas), line = 2017

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2018

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2019

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2020

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2021

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_187C
l_1852

; optimize OK (service.pas), line = 2026

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1895

; optimize OK (service.pas), line = 2028

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2029

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2030

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18AD
l_1895

; optimize OK (service.pas), line = 2034

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2035

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_187C
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_18AD
l_183C
l_1816

; ------------------------------------------------------------

XB	= DATAORIGIN+$02E1
YB	= DATAORIGIN+$02E2
I	= DATAORIGIN+$02E3

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2073

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2075

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2076

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2079

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2080

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2082

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2083

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2087

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_1918

; optimize OK (service.pas), line = 2089

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2095

	cmp #$03
	jne l_1933

; optimize OK (service.pas), line = 2097

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 2098

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 2100

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2101

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2103

	lda LX
	sta SYSTEM.ABS.@010184000.X
	lda LX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex
	lda LY
	sta SYSTEM.ABS.@010184000.X
	lda LY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 2105

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F1
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F1+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F1+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F1+3

; optimize OK (service.pas), line = 2107

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta A+1
	dex
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	and #$FF
	sta B
	lda :STACKORIGIN+STACKWIDTH,x
	and #$03
	sta B+1
	dex

; optimize OK (service.pas), line = 2109

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F2
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F2+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F2+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F2+3

; optimize OK (service.pas), line = 2111

	lda F1+3
	cmp F2+3
	bne @+
	lda F1+2
	cmp F2+2
	bne @+
	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_19BC

; optimize OK (service.pas), line = 2117

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2118

	sta MAX.A
	lda #$00
	sta MAX.A+1
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2119

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2122

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1A00

; optimize OK (service.pas), line = 2124

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2125

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2126

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1A2E
l_1A00

; optimize OK (service.pas), line = 2130

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2131

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1A2E
	jmp l_1A41
l_19BC

; optimize OK (service.pas), line = 2141

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2142

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2143

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2145

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1A84

; optimize OK (service.pas), line = 2147

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2148

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2150

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2151

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2152

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1A84
l_1A41
l_1933

; optimize OK (service.pas), line = 2158

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2159

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2162

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2164

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2165

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2177

	lda X
	jeq l_1B1E
	cmp #$07
	jeq l_1B1E
	lda Y
	jeq l_1B1E
	cmp #$07
	jeq l_1B1E

; optimize OK (service.pas), line = 2178

	lda #$03
	jsr FATAL_ERROR
l_1B1E

; optimize OK (service.pas), line = 2191

	lda Y
	cmp X
	jcs l_1B49
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1B49

; optimize OK (service.pas), line = 2193

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2194

	lda #$01
	sta EMERGENCY
l_1B49

; optimize OK (service.pas), line = 2198

	lda #$07
	sub Y
	cmp X
	jcs l_1B7E
	lda X
	cmp Y
	jcs l_1B7E

; optimize OK (service.pas), line = 2200

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2201

	lda #$03
	sta EMERGENCY
l_1B7E

; optimize OK (service.pas), line = 2205

	lda X
	cmp Y
	jcs l_1BB3
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1BB3

; optimize OK (service.pas), line = 2207

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2208

	lda #$02
	sta EMERGENCY
l_1BB3

; optimize OK (service.pas), line = 2212

	lda #$07
	sub X
	cmp Y
	jcs l_1BE8
	lda Y
	cmp X
	jcs l_1BE8

; optimize OK (service.pas), line = 2214

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2215

	lda #$04
	sta EMERGENCY
l_1BE8

; optimize OK (service.pas), line = 2219

	lda X
	cmp Y
	jeq l_1C1Dx
	lda #$07
	sub Y
	cmp X
	jne l_1C1D
l_1C1Dx

; optimize OK (service.pas), line = 2221

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2222

	sta TOUCH

; optimize OK (service.pas), line = 2230

	lda X
	cmp #$05
	jcc l_1C38
	lda TOUCH
	ora #$01
	sta TOUCH
l_1C38

; optimize OK (service.pas), line = 2231

	lda Y
	cmp #$05
	jcc l_1C57
	lda TOUCH
	ora #$02
	sta TOUCH
l_1C57

; optimize OK (service.pas), line = 2240

	lda #$FF
	sta LX
	sta LX+1

l_1C6D
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C79

; optimize OK (service.pas), line = 2241

	lda #$FF
	sta LY
	sta LY+1

l_1C82
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C8E

; optimize FAIL (1, service.pas), line = 2243

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc LX+1
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2244

	lda YB
	add LY
	sta MY
	lda #$00
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2246

	lda XB
	add LX
	jmi l_1CE7x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1CE7x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1CE7
l_1CE7x

; optimize OK (service.pas), line = 2249

	lda LX
	add #$01
	asl @
	asl @
	add LY
	add #$01
	tay
	lda #$FF
	jmp l_1D08
l_1CE7

; optimize OK (service.pas), line = 2251

	lda LX
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add LY
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
l_1D08
	sta adr.ADJW,y

; --- ForToDoEpilog
	inc LY
	jne l_1C82
	inc LY+1
	jmp l_1C82
l_1C8E

; --- ForToDoEpilog
	inc LX
	jne l_1C6D
	inc LX+1
	jmp l_1C6D
l_1C79

; optimize OK (service.pas), line = 2270

	lda adr.ADJW
	and #$01
	sta :STACKORIGIN+9
	lda adr.ADJW+$04
	and #$02
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$08
	and #$04
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$09
	and #$08
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$0A
	and #$10
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$06
	and #$20
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$02
	and #$40
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	lda adr.ADJW+$01
	and #$80
	ora :STACKORIGIN+9
	sta AROUND

; optimize OK (service.pas), line = 2305

	lda TOUCH
	jne l_1DB3

; optimize OK (service.pas), line = 2307

	lda AROUND
	and #$83
	jne l_1DCA
	lda #$11
	sta DEFLECT
l_1DCA

; optimize OK (service.pas), line = 2308

	lda AROUND
	and #$83
	cmp #$01
	jne l_1DE7
	lda #$33
	sta DEFLECT
l_1DE7

; optimize OK (service.pas), line = 2309

	lda AROUND
	and #$83
	cmp #$02
	jne l_1E04
	lda #$10
	sta DEFLECT
l_1E04

; optimize OK (service.pas), line = 2310

	lda AROUND
	and #$83
	cmp #$03
	jne l_1E21
	lda #$12
	sta DEFLECT
l_1E21

; optimize OK (service.pas), line = 2311

	lda AROUND
	and #$83
	cmp #$80
	jne l_1E3E
	lda #$01
	sta DEFLECT
l_1E3E

; optimize OK (service.pas), line = 2312

	lda AROUND
	and #$83
	cmp #$81
	jne l_1E5B
	lda #$21
	sta DEFLECT
l_1E5B

; optimize OK (service.pas), line = 2313

	lda AROUND
	and #$83
	cmp #$82
	jne l_1E78
	lda #$11
	sta DEFLECT
l_1E78

; optimize OK (service.pas), line = 2315

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2316

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1DB3

; optimize OK (service.pas), line = 2321

	lda TOUCH
	cmp #$01
	jne l_1EA8

; optimize OK (service.pas), line = 2323

	lda AROUND
	and #$0E
	jne l_1EBF
	lda #$21
	sta DEFLECT
l_1EBF

; optimize OK (service.pas), line = 2324

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1EDC
	lda #$20
	sta DEFLECT
l_1EDC

; optimize OK (service.pas), line = 2325

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1EF9
	lda #$33
	sta DEFLECT
l_1EF9

; optimize OK (service.pas), line = 2326

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1F16
	lda #$22
	sta DEFLECT
l_1F16

; optimize OK (service.pas), line = 2327

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1F33
	lda #$01
	sta DEFLECT
l_1F33

; optimize OK (service.pas), line = 2328

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1F50
	lda #$21
	sta DEFLECT
l_1F50

; optimize OK (service.pas), line = 2329

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1F6D
	lda #$11
	sta DEFLECT
l_1F6D

; optimize OK (service.pas), line = 2331

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2332

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1EA8

; optimize OK (service.pas), line = 2335

	lda TOUCH
	cmp #$02
	jne l_1F9D

; optimize OK (service.pas), line = 2337

	lda AROUND
	and #$E0
	jne l_1FB4
	lda #$12
	sta DEFLECT
l_1FB4

; optimize OK (service.pas), line = 2338

	lda AROUND
	and #$E0
	cmp #$20
	jne l_1FD1
	lda #$10
	sta DEFLECT
l_1FD1

; optimize OK (service.pas), line = 2339

	lda AROUND
	and #$E0
	cmp #$40
	jne l_1FEE
	lda #$33
	sta DEFLECT
l_1FEE

; optimize OK (service.pas), line = 2340

	lda AROUND
	and #$E0
	cmp #$60
	jne l_200B
	lda #$11
	sta DEFLECT
l_200B

; optimize OK (service.pas), line = 2341

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2028
	lda #$02
	sta DEFLECT
l_2028

; optimize OK (service.pas), line = 2342

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_2045
	lda #$12
	sta DEFLECT
l_2045

; optimize OK (service.pas), line = 2343

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_2062
	lda #$22
	sta DEFLECT
l_2062

; optimize OK (service.pas), line = 2345

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2346

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1F9D

; optimize OK (service.pas), line = 2349

	lda TOUCH
	cmp #$03
	jne l_2092

; optimize OK (service.pas), line = 2351

	lda AROUND
	and #$38
	jne l_20A9
	lda #$22
	sta DEFLECT
l_20A9

; optimize OK (service.pas), line = 2352

	lda AROUND
	and #$38
	cmp #$08
	jne l_20C6
	lda #$02
	sta DEFLECT
l_20C6

; optimize OK (service.pas), line = 2353

	lda AROUND
	and #$38
	cmp #$10
	jne l_20E3
	lda #$33
	sta DEFLECT
l_20E3

; optimize OK (service.pas), line = 2354

	lda AROUND
	and #$38
	cmp #$18
	jne l_2100
	lda #$12
	sta DEFLECT
l_2100

; optimize OK (service.pas), line = 2355

	lda AROUND
	and #$38
	cmp #$20
	jne l_211D
	lda #$20
	sta DEFLECT
l_211D

; optimize OK (service.pas), line = 2356

	lda AROUND
	and #$38
	cmp #$28
	jne l_213A
	lda #$22
	sta DEFLECT
l_213A

; optimize OK (service.pas), line = 2357

	lda AROUND
	and #$38
	cmp #$30
	jne l_2157
	lda #$21
	sta DEFLECT
l_2157

; optimize OK (service.pas), line = 2359

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2360

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2092

; optimize OK (service.pas), line = 2366

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2367

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2369

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2371

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_21A0
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_21A0

; optimize OK (service.pas), line = 2372

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_21BC
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_21BC

; optimize OK (service.pas), line = 2373

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_21D5
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_21D5

; optimize OK (service.pas), line = 2375

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2377

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_21F7
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_21F7

; optimize OK (service.pas), line = 2378

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2213
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_2213

; optimize OK (service.pas), line = 2379

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_222C
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_222C
l_1C1D
l_1918

; optimize OK (service.pas), line = 2389

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_224D

; optimize OK (service.pas), line = 2392

	lda EMERGENCY
	cmp #$FF
	jne l_2260
	lda #$04
	jsr FATAL_ERROR
l_2260

; optimize OK (service.pas), line = 2394

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2421

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_2279
@

; optimize OK (service.pas), line = 2424

	lda adr.ADJW+$04
	jne l_2290
	lda MIMAX
	and #$0F
	sta MIMAX
l_2290

; optimize OK (service.pas), line = 2425

	lda adr.ADJW+$01
	jne l_22B8
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_22B8
	jmp a_0009
l_2279
	cmp #$06
	jne l_22D0

; optimize OK (service.pas), line = 2429

	lda adr.ADJW+$01
	jne l_22E7
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_22E7

; optimize OK (service.pas), line = 2430

	lda adr.ADJW+$06
	jne l_230F
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_230F
	jmp a_0009
l_22D0
	cmp #$07
	jne l_2327

; optimize OK (service.pas), line = 2434

	lda adr.ADJW+$06
	jne l_233E
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_233E

; optimize OK (service.pas), line = 2435

	lda adr.ADJW+$09
	jne l_2366
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_2366
	jmp a_0009
l_2327
	cmp #$08
	jne l_237E

; optimize OK (service.pas), line = 2439

	lda adr.ADJW+$09
	jne l_2395
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_2395

; optimize OK (service.pas), line = 2440

	lda adr.ADJW+$04
	jne l_23BD
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_23BD
l_237E
a_0009

; --- RepeatUntilProlog
l_23D5

; optimize OK (service.pas), line = 2448

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	asl @
	tay
	lda adr.MUL90_16,y
	sta LX
	lda adr.MUL90_16+1,y
	sta LX+1

; optimize OK (service.pas), line = 2449

	lda MIMAX
	and #$0F
	asl @
	tay
	lda adr.MUL90_16,y
	sta MX
	lda adr.MUL90_16+1,y
	sta MX+1

; optimize OK (service.pas), line = 2451

	lda MX
	sub LX
	sta RAND.RANGE
	lda MX+1
	sbc LX+1
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	add LX
	sta ANGLE
	lda RAND.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2453

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_23D5

; optimize OK (service.pas), line = 2457

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda ANGLE
	sta SET_BALL_DIRECTION.ANGLE
	lda ANGLE+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2458

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2460

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_224D

; ------------------------------------------------------------

BALL	= DATAORIGIN+$02E4
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
adr.MUL90_16	= CODEORIGIN+$00E5
.var MUL90_16	= adr.MUL90_16 .word
X	= DATAORIGIN+$02E8
Y	= DATAORIGIN+$02E9
I	= DATAORIGIN+$02EA
XB	= DATAORIGIN+$02EB
YB	= DATAORIGIN+$02EC
OX	= DATAORIGIN+$02ED
OY	= DATAORIGIN+$02EF
SP	= DATAORIGIN+$02F1
NX	= DATAORIGIN+$02F3
NY	= DATAORIGIN+$02F5
LX	= DATAORIGIN+$02F7
LY	= DATAORIGIN+$02F9
MX	= DATAORIGIN+$02FB
MY	= DATAORIGIN+$02FD
ANGLE	= DATAORIGIN+$02FF
MYX	= DATAORIGIN+$0301
MYY	= DATAORIGIN+$0303
F1	= DATAORIGIN+$0305
F2	= DATAORIGIN+$0309
A	= DATAORIGIN+$030D
B	= DATAORIGIN+$030F
EMERGENCY	= DATAORIGIN+$0311
MIMAX	= DATAORIGIN+$0312
DEFLECT	= DATAORIGIN+$0313
AROUND	= DATAORIGIN+$0314
COLLISION	= DATAORIGIN+$0315
TOUCH	= DATAORIGIN+$0316
adr.ADJW	= [DATAORIGIN+$0317] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$0327

@VarData	= BALL
@VarDataSize	= 54

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2475

	lda #$00
	sta Y

l_2433
; --- ForToDoCondition
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2481

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_2433
l_2441

; -------------------  ASM Block 00000156  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2493

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2494

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2497

	lda #$0A
	sta Y

l_2477
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_2485

; optimize OK (service.pas), line = 2500

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2502

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$D8
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2503

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2505

	lda #$09
	sta X

l_24AC
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_24BA

; optimize OK (service.pas), line = 2509

	lda adr.MODX,y
	adc YB
	sta :STACKORIGIN+9
	lda #$00
	adc YB+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	sta CL

; optimize OK (service.pas), line = 2511

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2516

	lda Y
	cmp #$10
	jcc l_24EDx
	lda X
	cmp #$12
	jcs l_24ED
l_24EDx
	lda #$00
	sta SHADOW
l_24ED

; optimize OK (service.pas), line = 2521

	lda CL
	and #$7F
	ora SHADOW
	ldy X
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_24AC
l_24BA

; optimize OK (service.pas), line = 2525

	lda #$D8
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2526

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_2477
l_2485

; -------------------  ASM Block 00000157  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PATT	= DATAORIGIN+$0328
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$032C
X	= DATAORIGIN+$032E
Y	= DATAORIGIN+$032F
CL	= DATAORIGIN+$0330
SHADOW	= DATAORIGIN+$0331

@VarData	= PATT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0332
Y	= DATAORIGIN+$0334

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2577

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2579

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$0336
Y	= DATAORIGIN+$0338
adr.SC	= [DATAORIGIN+$033A] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2624

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2625

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2627

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2629

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2630

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; -------------------  ASM Block 00000158  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2637

	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2640

	lda #$00
	sta W

l_2576
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_2584

; optimize OK (service.pas), line = 2643

	lda #$00
	sta Y

l_258D
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_259B

; optimize OK (service.pas), line = 2646

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2648

	lda EXPLOSION.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda EXPLOSION.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda EXPLOSION.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda EXPLOSION.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2650

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2652

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2654

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_25E8_0

l_25EB
; --- ForToDoCondition
	lda @FORTMP_25E8_0::#$00
	cmp X
	jcc l_25F9

; optimize OK (service.pas), line = 2658

	lda W
	cmp #$06
	jeq l_261Ax
	ldy X
	lda adr.POM,y
	jne l_261A
l_261Ax
	jmp l_2624
l_261A

; optimize OK (service.pas), line = 2667

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2624

; --- ForToDoEpilog
	inc X
	jne l_25EB
l_25F9

; optimize OK (service.pas), line = 2670

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_258D
l_259B

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2673

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 2674

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_2576
l_2584

; -------------------  ASM Block 00000159  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2683

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2684

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2685

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$034F
A	= DATAORIGIN+$0351
B	= DATAORIGIN+$0353
W	= DATAORIGIN+$0355
X	= DATAORIGIN+$0356
Y	= DATAORIGIN+$0357

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2697

	jsr NOSOUND

; optimize OK (service.pas), line = 2698

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2699

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2705

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2708

	lda #$0B
	sta W

l_266F
; --- ForToDoCondition
	lda #$0F
	sta Y

l_2686
; --- ForToDoCondition
	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2715

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2717

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2719

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2721

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_26E1_0

l_26E4
; --- ForToDoCondition
	lda @FORTMP_26E1_0::#$00
	cmp X
	jcc l_26F2

; optimize OK (service.pas), line = 2723

	ldy X
	lda adr.POM,y
	jne l_2707
	jmp l_2711
l_2707

; optimize OK (service.pas), line = 2734

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2711

; --- ForToDoEpilog
	inc X
	jne l_26E4
l_26F2

; optimize OK (service.pas), line = 2737

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	dec Y
	jpl l_2686
l_2694

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2740

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	dec W
	jpl l_266F
l_267D

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$0359
Y	= DATAORIGIN+$035A
W	= DATAORIGIN+$035B
Z	= DATAORIGIN+$035C
A	= DATAORIGIN+$035E
B	= DATAORIGIN+$0360

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_273C

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 2844

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$C2
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2846

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$036C

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_273C

; optimize OK (service.pas), line = 2853

	lda #$00
	sta F

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2861

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2863

	ldy PY
	lda adr.ROW,y
	add PX
	sta HLP
	lda adr.ROW+256,y
	adc PX+1
	sta HLP+1

; optimize OK (service.pas), line = 2867

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_276E
l_276F

; optimize OK (service.pas), line = 2869

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2870

	inc N1
l_276E

; optimize OK (service.pas), line = 2868

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_276F

; optimize OK (service.pas), line = 2872

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2873

	tya
	jeq l_2799
	lda #$01
	sta F
l_2799

; optimize OK (service.pas), line = 2874

	lda F
	jeq l_27AC
	lda N1
	jmp l_27BA
l_27AC

; optimize OK (service.pas), line = 2875

	lda #$0A
l_27BA
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2878

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27C2
l_27C3

; optimize OK (service.pas), line = 2880

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2881

	inc N1
l_27C2

; optimize OK (service.pas), line = 2879

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_27C3

; optimize OK (service.pas), line = 2883

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2884

	tya
	jeq l_27ED
	lda #$01
	sta F
l_27ED

; optimize OK (service.pas), line = 2885

	lda F
	jeq l_2800
	lda N1
	jmp l_280E
l_2800

; optimize OK (service.pas), line = 2886

	lda #$0A
l_280E
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2889

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2816
l_2817

; optimize OK (service.pas), line = 2891

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2892

	inc N1
l_2816

; optimize OK (service.pas), line = 2890

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_2817

; optimize OK (service.pas), line = 2894

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2895

	tya
	jeq l_2841
	lda #$01
	sta F
l_2841

; optimize OK (service.pas), line = 2896

	lda F
	jeq l_2854
	lda N1
	jmp l_2862
l_2854

; optimize OK (service.pas), line = 2897

	lda #$0A
l_2862
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2900

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_286A
l_286B

; optimize OK (service.pas), line = 2902

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2903

	inc N1
l_286A

; optimize OK (service.pas), line = 2901

	lda SC+3
	jne l_286B
	lda SC+2
	jne l_286B
	lda SC+1
	jne l_286B
	lda SC
	cmp #$64
	jcs l_286B

; optimize OK (service.pas), line = 2905

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2906

	tya
	jeq l_2895
	lda #$01
	sta F
l_2895

; optimize OK (service.pas), line = 2907

	lda F
	jeq l_28A8
	lda N1
	jmp l_28B6
l_28A8

; optimize OK (service.pas), line = 2908

	lda #$0A
l_28B6
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2911

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_28BE
l_28BF

; optimize OK (service.pas), line = 2913

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2914

	inc N1
l_28BE

; optimize OK (service.pas), line = 2912

	lda SC+3
	jne l_28BF
	lda SC+2
	jne l_28BF
	lda SC+1
	jne l_28BF
	lda SC
	cmp #$0A
	jcs l_28BF

; optimize OK (service.pas), line = 2916

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2917

	tya
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2921

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000163  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PX	= DATAORIGIN+$0363
PY	= DATAORIGIN+$0365
SC	= DATAORIGIN+$0366
adr.MUL_6	= CODEORIGIN+$0105
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$036A
F	= DATAORIGIN+$036B

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 2974

	dec LIVES

; -------------------  ASM Block 00000164  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2981

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2982

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2984

	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2987

	lda #$00
	sta CN

l_2903
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2911

; optimize OK (service.pas), line = 2989

	sta :ecx
	lda MINIVAUS.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda #$0B
	add :eax
	sta XL

; optimize OK (service.pas), line = 2991

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_292B_0

l_292E
; --- ForToDoCondition
	lda @FORTMP_292B_0::#$00
	cmp Y
	jcc l_293C

; optimize OK (service.pas), line = 2993

	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda MINIVAUS.OFS
	add :eax
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda MINIVAUS.OFS+1
	adc :eax+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda MINIVAUS.OFS+2
	adc :eax+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda MINIVAUS.OFS+3
	adc :eax+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2995

	lda Y
	add #$C0
	sta YL

; optimize OK (service.pas), line = 2997

	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YP+1
	lda :eax
	sta YP

; optimize OK (service.pas), line = 2999

	ldy YL
	lda adr.ROW,y
	add XL
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3001

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3004

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2989_0

l_298C
; --- ForToDoCondition
	lda @FORTMP_2989_0::#$00
	cmp X
	jcc l_299A

; optimize OK (service.pas), line = 3007

	lda XL
	add X
	tay
	lda adr.MODX,y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 3011

	lda CN
	cmp LIVES
	jcs l_29CC
	ldy X
	lda adr.POM,y
	jeq l_29CC

; optimize OK (service.pas), line = 3019

	jmp l_29E2
l_29CC

; optimize OK (service.pas), line = 3028

	ldy X
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 3031

	lda XP
	add YP
	sta :STACKORIGIN+9
	lda XP+1
	adc YP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 3037

	ldy X
l_29E2
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_298C
l_299A

; optimize OK (service.pas), line = 3041

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3042

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_292E
l_293C

; --- ForToDoEpilog
	inc CN
	jne l_2903
l_2911

; -------------------  ASM Block 00000165  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$036D
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$036E
Y	= DATAORIGIN+$036F
XL	= DATAORIGIN+$0370
YL	= DATAORIGIN+$0371
CN	= DATAORIGIN+$0372
XP	= DATAORIGIN+$0373
YP	= DATAORIGIN+$0375
SHADOW	= DATAORIGIN+$0377
CL	= DATAORIGIN+$0378

@VarData	= LIVES
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3059

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3061

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.W
	lda SHOOTS.WIDTH+1
	sta BLITZERO.W+1
	lda SHOOTS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3069

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3071

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda SHOOTS.WIDTH
	sta BLITBOX.W
	lda SHOOTS.WIDTH+1
	sta BLITBOX.W+1
	lda SHOOTS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3079

	lda FIRE.AVL
	jeq l_2A85

; optimize FAIL ('MOUSECLICK', service.pas), line = 3081

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2AA5

; optimize OK (service.pas), line = 3083

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3084

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 3085

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3086

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3087

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2AA5

; optimize OK (service.pas), line = 3090

	lda FIRE.SHOT
	jeq l_2ADF

; optimize OK (service.pas), line = 3092

	lda FIRE.NW
	jeq l_2AEC
	jsr REMOVE_FIRE
l_2AEC

; optimize OK (service.pas), line = 3093

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3095

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3096

	cmp #$16
	jcs l_2B07
	lda #$00
	sta FIRE.SHOT
	jmp l_2B15
l_2B07

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3099

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3101

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_2B3C
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_2B3C

; optimize OK (service.pas), line = 3103

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3104

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3106

	lda FIRE.X
	add SHOOTS.WIDTH
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3107

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3109

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2BAAx
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2BAA
l_2BAAx

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3111

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3112

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3114

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3115

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2B15
l_2BAA
l_2B3C
l_2ADF
l_2A85

; ------------------------------------------------------------

X1	= DATAORIGIN+$037B
X2	= DATAORIGIN+$037C
Y1	= DATAORIGIN+$037D
Y2	= DATAORIGIN+$037E

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3127

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3129

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3138

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 3140

	lda SCRFLUX
	jeq l_2BF9

; optimize OK (service.pas), line = 3143

	lda #$00
	sta Y

l_2C03
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_2C11

; optimize OK (service.pas), line = 3145

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2C03
l_2C11

; optimize FAIL (0, service.pas), line = 3147

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3148

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2C50
	lda #$00
	sta SCRFLUXCNT
l_2C50
l_2BF9

; ------------------------------------------------------------

Y	= DATAORIGIN+$037F
FX	= DATAORIGIN+$0380

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3159

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3160

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3162

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3164

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3165

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3166

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3168

	lda Z
	sta X
	add #$2C
	sta @FORTMP_2C7C_0

l_2C7F
; --- ForToDoCondition
	lda @FORTMP_2C7C_0::#$00
	cmp X
	jcc l_2C8D

; optimize FAIL ('WAIT_VBL', service.pas), line = 3170

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3172

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3173

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3174

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3175

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3176

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3178

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3180

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2C7F
l_2C8D

; ------------------------------------------------------------

X	= DATAORIGIN+$0381
Z	= DATAORIGIN+$0382

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3191

	lda VAUS.LETTER
	jmi l_2CD5
	jeq l_2CD5

; optimize OK (service.pas), line = 3193

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3194

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2CEC
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2CEC

; optimize OK (service.pas), line = 3195

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2CFE
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2CFE

; optimize OK (service.pas), line = 3196

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3197

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3198

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3199

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3201

	lda VAUS.LETTER
	cmp #$06
	jeq l_2D23

; optimize OK (service.pas), line = 3203

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3204

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3205

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2D23
l_2CD5

; optimize OK (service.pas), line = 3209

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2D3F
@

; optimize OK (service.pas), line = 3212

	lda FIRE.SHOT
	jeq l_2D4B
	jsr REMOVE_FIRE
l_2D4B

; optimize OK (service.pas), line = 3213

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3214

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3215

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3216

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3217

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2D3F
	cmp #$02
	jne l_2D65

; optimize OK (service.pas), line = 3221

	lda FIRE.SHOT
	jeq l_2D71
	jsr REMOVE_FIRE
l_2D71

; optimize OK (service.pas), line = 3222

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3223

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3224

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3225

	sta FIRE.AVL
	jmp a_000A
l_2D65
	cmp #$03
	jne l_2D87

; optimize OK (service.pas), line = 3229

	lda FIRE.SHOT
	jeq l_2D93
	jsr REMOVE_FIRE
l_2D93

; optimize OK (service.pas), line = 3230

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3231

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3232

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3233

	sta FIRE.AVL

; optimize OK (service.pas), line = 3234

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2D87
	cmp #$04
	jne l_2DAD

; optimize OK (service.pas), line = 3238

	lda FIRE.SHOT
	jeq l_2DB9
	jsr REMOVE_FIRE
l_2DB9

; optimize OK (service.pas), line = 3239

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3240

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3241
	jmp s_2DF6
l_2DAD
	cmp #$05
	jne l_2DCB

; optimize OK (service.pas), line = 3245

	lda FIRE.SHOT
	jeq l_2DD7
	jsr REMOVE_FIRE
l_2DD7

; optimize OK (service.pas), line = 3246

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3247

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3248

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3249

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3250

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2DF6
; optimize OK (service.pas), line = 3251
	jmp s_2E14
l_2DCB
	cmp #$06
	jne l_2DFD

; optimize OK (service.pas), line = 3255

	lda FIRE.SHOT
	jeq l_2E09
	jsr REMOVE_FIRE
l_2E09

; optimize OK (service.pas), line = 3256

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3257

	jsr MODIFY_VAUS
s_2E14
; optimize OK (service.pas), line = 3258
	jmp s_2E44
l_2DFD
	cmp #$07
	jne l_2E1B

; optimize OK (service.pas), line = 3262

	lda FIRE.SHOT
	jeq l_2E27
	jsr REMOVE_FIRE
l_2E27

; optimize OK (service.pas), line = 3263

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3264

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3265

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3266

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3267

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3268

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_2E44

; optimize OK (service.pas), line = 3269

	lda #$00
	sta FIRE.AVL
l_2E1B
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$0384
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0005
B1.OLDX	= DATAORIGIN+$0006
B1.OLDY	= DATAORIGIN+$0008
B1.SPEED	= DATAORIGIN+$000A
B1.FINESPEED	= DATAORIGIN+$000C
B1.SPEEDX	= DATAORIGIN+$000E
B1.SPEEDY	= DATAORIGIN+$0010
B1.SBD	= DATAORIGIN+$0012
B1.BRWHIT	= DATAORIGIN+$0014
B1.INPLAY	= DATAORIGIN+$0015
B1.LAUNCH	= DATAORIGIN+$0016
B1.ONVAUS	= DATAORIGIN+$0017
B1.STM	= DATAORIGIN+$0019
B2	= DATAORIGIN+$0388
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0005
B2.OLDX	= DATAORIGIN+$0006
B2.OLDY	= DATAORIGIN+$0008
B2.SPEED	= DATAORIGIN+$000A
B2.FINESPEED	= DATAORIGIN+$000C
B2.SPEEDX	= DATAORIGIN+$000E
B2.SPEEDY	= DATAORIGIN+$0010
B2.SBD	= DATAORIGIN+$0012
B2.BRWHIT	= DATAORIGIN+$0014
B2.INPLAY	= DATAORIGIN+$0015
B2.LAUNCH	= DATAORIGIN+$0016
B2.ONVAUS	= DATAORIGIN+$0017
B2.STM	= DATAORIGIN+$0019
B3	= DATAORIGIN+$038C
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0005
B3.OLDX	= DATAORIGIN+$0006
B3.OLDY	= DATAORIGIN+$0008
B3.SPEED	= DATAORIGIN+$000A
B3.FINESPEED	= DATAORIGIN+$000C
B3.SPEEDX	= DATAORIGIN+$000E
B3.SPEEDY	= DATAORIGIN+$0010
B3.SBD	= DATAORIGIN+$0012
B3.BRWHIT	= DATAORIGIN+$0014
B3.INPLAY	= DATAORIGIN+$0015
B3.LAUNCH	= DATAORIGIN+$0016
B3.ONVAUS	= DATAORIGIN+$0017
B3.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$0390
@CASETMP_000A	= DATAORIGIN+$0392

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2E52

; optimize OK (service.pas), line = 3282

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva RAND.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3283

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2E52

; optimize OK (service.pas), line = 3285

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3286

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3288

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0393
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
TEMP	= DATAORIGIN+$0397

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2E8C

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3320

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2E9B

; optimize OK (service.pas), line = 3323

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2EB8
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2EB8

; optimize OK (service.pas), line = 3324

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2EB8

; optimize OK (service.pas), line = 3326

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3327

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_2E9B

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03F8
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3335

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2ED9

; optimize OK (service.pas), line = 3337

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3339

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL+1,y
	cmp :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda adr.LEVEL,y
	cmp :STACKORIGIN+9
@
	jcs l_2EEF

; optimize OK (service.pas), line = 3341

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3344

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$FF
	lda (:bp2),y
	sbc #$03
	svc
	eor #$80
	jpl l_2F05

; optimize OK (service.pas), line = 3346

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3347

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2F05
l_2EEF

; optimize OK (service.pas), line = 3351

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3355

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2F2D
@
	ldy #$00
	lda (:bp2),y
	jpl l_2F2D
@

; optimize OK (service.pas), line = 3356

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2F2D
l_2ED9

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03FC
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2E8C

; optimize OK (service.pas), line = 3364

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3365

	sta SCRFLUX

; optimize OK (service.pas), line = 3367

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3369

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3370

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3372

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3373

	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3376

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3379

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3383

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3389

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3390

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3391

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3394

	jsr PUT_WALL

; optimize OK (service.pas), line = 3401

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3402

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3405

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3406

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3409

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3410

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3413

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3417

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3422

	sta BALL0.STM

; optimize OK (service.pas), line = 3426

	lda #$E8
	sta RAND.RANGE
	lda #$03
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3429

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3432

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3434

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3435

	jsr START_VAUS

; optimize OK (service.pas), line = 3436

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3437

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3438

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3439

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3440

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3447

	lda #$0F
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda RAND.RESULT+1
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3449

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3452

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3454

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3455

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3457

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_2FC5
l_2FC6

; optimize FAIL ('WAIT_VBL', service.pas), line = 3461

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3470

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3475

	lda TRAINER
	jne l_2FDB
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_2FE9
l_2FDB

; optimize OK (service.pas), line = 3481

	lda TRAINER
	cmp #$01
	jne l_2FFB

; optimize FAIL (1, service.pas), line = 3482

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc BALL0.ONVAUS+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_2FE9
	jsr MOVE_VAUS
l_2FFB

; optimize OK (service.pas), line = 3487

	lda BALL0.LAUNCH
	cmp #$01
	jne l_301D

; optimize FAIL (0, service.pas), line = 3489

	inc BALL0.STM

; optimize OK (service.pas), line = 3494

	lda BALL0.STM
	cmp #$FA
	jne l_3034
	lda #$00
	sta BALL0.LAUNCH
l_3034

; optimize OK (service.pas), line = 3497

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3500

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_304E
	lda #$00
	sta BALL0.LAUNCH
l_304E
	jmp l_305E
l_301D

; optimize OK (service.pas), line = 3508

	lda BALL0.INPLAY
	jeq l_306A
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_306A

; optimize OK (service.pas), line = 3509

	lda BALL1.INPLAY
	jeq l_307C
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_307C

; optimize OK (service.pas), line = 3510

	lda BALL2.INPLAY
	jeq l_308E
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_308E
l_305E

; optimize OK (service.pas), line = 3518

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3519

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3520

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3535

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3536

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3537

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3538

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3539

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3541

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_30C6
	jsr VAUS_OUT
l_30C6

; optimize OK (service.pas), line = 3543

	lda VAUS.LETTER
	cmp #$04
	jne l_30DC

; optimize OK (service.pas), line = 3545

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3547

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3548

	mwy BALL2 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3550

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	lda GET_BALL_DIRECTION.RESULT
	sta T1
	lda GET_BALL_DIRECTION.RESULT+1
	sta T1+1

; optimize OK (service.pas), line = 3552

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3561

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3562

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3563

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3567

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3568

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3569

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3571

	lda #$00
	sta VAUS.LETTER
l_30DC

; optimize OK (service.pas), line = 3575

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_3132
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_3132

; optimize OK (service.pas), line = 3579

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3581

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_3150

; optimize OK (service.pas), line = 3583

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3585

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_3150

; optimize OK (service.pas), line = 3591

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_3173
	jeq l_3173

; optimize OK (service.pas), line = 3594

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3596

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_3173

; optimize OK (service.pas), line = 3603

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3604

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3605

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3646

	lda BALL0.INPLAY
	jne l_3199

; optimize OK (service.pas), line = 3648

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3649

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3650

	sta BALL2.INPLAY
l_3199

; optimize OK (service.pas), line = 3654

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3656

	lda BALL0.INPLAY
	jeq l_31B4
	inc BALLS_IN_PLAY
l_31B4

; optimize OK (service.pas), line = 3657

	lda BALL1.INPLAY
	jeq l_31C7
	inc BALLS_IN_PLAY
l_31C7

; optimize OK (service.pas), line = 3658

	lda BALL2.INPLAY
	jeq l_31DA
	inc BALLS_IN_PLAY
l_31DA

; optimize OK (service.pas), line = 3661

	lda BALL0.INPLAY
	jne l_31F0

; optimize OK (service.pas), line = 3663

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3664

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3665

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3666

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3667

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3675

	jsr NOSOUND
l_31F0
l_2FC5

; optimize OK (service.pas), line = 3459

	lda REMAIN_BLK
	jeq l_2FC6w
	lda BALL0.INPLAY
	jeq l_2FC6w
	lda SCORE.ABORTPLAY
	jeq l_2FC6
l_2FC6w

; optimize OK (service.pas), line = 3731

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3732

	lda REMAIN_BLK
	jne l_323E
	lda #$01
	sta RESULT
l_323E
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0399
X	= DATAORIGIN+$039A
Y	= DATAORIGIN+$039C
KEY	= DATAORIGIN+$039E
T1	= DATAORIGIN+$03A0
T2	= DATAORIGIN+$03A2
HLP	= DATAORIGIN+$03A4
adr.BALL0	= DATAORIGIN+$03A6	; [26] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$03A6
BALL0.Y	= DATAORIGIN+$03A8
BALL0.FINEX	= DATAORIGIN+$03AA
BALL0.FINEY	= DATAORIGIN+$03AB
BALL0.OLDX	= DATAORIGIN+$03AC
BALL0.OLDY	= DATAORIGIN+$03AE
BALL0.SPEED	= DATAORIGIN+$03B0
BALL0.FINESPEED	= DATAORIGIN+$03B2
BALL0.SPEEDX	= DATAORIGIN+$03B4
BALL0.SPEEDY	= DATAORIGIN+$03B6
BALL0.SBD	= DATAORIGIN+$03B8
BALL0.BRWHIT	= DATAORIGIN+$03BA
BALL0.INPLAY	= DATAORIGIN+$03BB
BALL0.LAUNCH	= DATAORIGIN+$03BC
BALL0.ONVAUS	= DATAORIGIN+$03BD
BALL0.STM	= DATAORIGIN+$03BF
adr.BALL1	= DATAORIGIN+$03C0	; [26] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$03C0
BALL1.Y	= DATAORIGIN+$03C2
BALL1.FINEX	= DATAORIGIN+$03C4
BALL1.FINEY	= DATAORIGIN+$03C5
BALL1.OLDX	= DATAORIGIN+$03C6
BALL1.OLDY	= DATAORIGIN+$03C8
BALL1.SPEED	= DATAORIGIN+$03CA
BALL1.FINESPEED	= DATAORIGIN+$03CC
BALL1.SPEEDX	= DATAORIGIN+$03CE
BALL1.SPEEDY	= DATAORIGIN+$03D0
BALL1.SBD	= DATAORIGIN+$03D2
BALL1.BRWHIT	= DATAORIGIN+$03D4
BALL1.INPLAY	= DATAORIGIN+$03D5
BALL1.LAUNCH	= DATAORIGIN+$03D6
BALL1.ONVAUS	= DATAORIGIN+$03D7
BALL1.STM	= DATAORIGIN+$03D9
adr.BALL2	= DATAORIGIN+$03DA	; [26] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$03DA
BALL2.Y	= DATAORIGIN+$03DC
BALL2.FINEX	= DATAORIGIN+$03DE
BALL2.FINEY	= DATAORIGIN+$03DF
BALL2.OLDX	= DATAORIGIN+$03E0
BALL2.OLDY	= DATAORIGIN+$03E2
BALL2.SPEED	= DATAORIGIN+$03E4
BALL2.FINESPEED	= DATAORIGIN+$03E6
BALL2.SPEEDX	= DATAORIGIN+$03E8
BALL2.SPEEDY	= DATAORIGIN+$03EA
BALL2.SBD	= DATAORIGIN+$03EC
BALL2.BRWHIT	= DATAORIGIN+$03EE
BALL2.INPLAY	= DATAORIGIN+$03EF
BALL2.LAUNCH	= DATAORIGIN+$03F0
BALL2.ONVAUS	= DATAORIGIN+$03F1
BALL2.STM	= DATAORIGIN+$03F3
SCORES	= DATAORIGIN+$03F4

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3755

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3813

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0400
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$0402
Y	= DATAORIGIN+$0404
ST	= DATAORIGIN+$0406
OLDX	= DATAORIGIN+$0408
OLDY	= DATAORIGIN+$040A
NEWX	= DATAORIGIN+$040C
NEWY	= DATAORIGIN+$040E

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3822

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3824

	lda #$01
	sta X

l_3263
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_3271

; optimize OK (service.pas), line = 3826

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3827

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3828

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3829

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3831

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_3263
l_3271

; optimize OK (service.pas), line = 3834

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$0410

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3894

	jsr NOSOUND

; optimize OK (service.pas), line = 3895

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3906

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3944

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0411
X	= DATAORIGIN+$0413
Y	= DATAORIGIN+$0415
Z	= DATAORIGIN+$0417
K	= DATAORIGIN+$0419
IK	= DATAORIGIN+$041B

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3952

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3953

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_32D0
	lda #$00
	sta adr.SCORE.LIVES+$02
l_32D0

; optimize OK (service.pas), line = 3956

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3957

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3961

	jsr SET_WALL

; optimize OK (service.pas), line = 3963

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3964

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3971

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3972

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3973

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_32FF

; --- RepeatUntilProlog
l_3300

; optimize OK (service.pas), line = 3983

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_3312

; optimize FAIL (1, service.pas), line = 3985

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 3988

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3992

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_3312

; optimize OK (service.pas), line = 3996

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3997

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4002

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4005

	jeq l_3360

; optimize OK (service.pas), line = 4008

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4011

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_337C

; optimize OK (service.pas), line = 4012

	lda #$01
	sta adr.SCORE.WALL_N,y
l_337C

; optimize OK (service.pas), line = 4015

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_33AE
l_3360

; optimize OK (service.pas), line = 4021

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_33C3
	jsr GAME_OVER
l_33AE
l_33C3

; optimize OK (service.pas), line = 4026

	lda NWALL
	jne l_3300

; optimize FAIL (0, service.pas), line = 4029

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4030

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_33EB
	lda #$01
	sta CUR_PLAYER
l_33EB

; optimize OK (service.pas), line = 4036

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3407
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_3407

; optimize OK (service.pas), line = 4041

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_32FF

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$041D
NWALL	= DATAORIGIN+$041F

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 223

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 225

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 226

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$5E
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$58
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$52
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$64
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SHINEWALL.OFS
	lda #$83
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$9D
	sta MINIVAUS.OFS
	lda #$88
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$01
	sta LEVELSEL.OFS
	lda #$89
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$CC
	sta LETTERS.OFS
	lda #$90
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$CC
	sta NORMAL.OFS
	lda #$AC
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$AC
	sta LASERS.OFS
	lda #$AD
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$8C
	sta ENLARGED.OFS
	lda #$AE
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$4C
	sta SHOOTS.OFS
	lda #$B0
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$B4
	sta FLUX.OFS
	lda #$B0
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$FC
	sta BALLDATA.OFS
	lda #$B1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$15
	sta PATTERN0.OFS
	lda #$B2
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$85
	sta PATTERN1.OFS
	lda #$B4
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$49
	sta PATTERN2.OFS
	lda #$B5
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$7B
	sta PATTERN3.OFS
	lda #$BA
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$A7
	sta PATTERN4.OFS
	lda #$BD
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 233

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 235

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 238

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 239

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3531

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 246

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 248

	jeq l_3547
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_3547

; optimize OK (arkanoid_vbxe.pas), line = 251

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3531

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 259

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $15E00
VBXE_DIGIT	= $3C200
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.VBXE_RAM	= DATAORIGIN+$008C	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$008C
VBXE_RAM.SIZE	= DATAORIGIN+$0090
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$008E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0099
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$00AF
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$00B8
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$00C2
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$00C6
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00D1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00DD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00A9	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00A9
BALLDATA.HEIGHT	= DATAORIGIN+$00AB
BALLDATA.OFS	= DATAORIGIN+$00AD
adr.PLAYSCREEN	= DATAORIGIN+$00B1	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00B1
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00B3
PLAYSCREEN.OFS	= DATAORIGIN+$00B5
adr.PLAYVAUS	= DATAORIGIN+$00B9	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00B9
PLAYVAUS.HEIGHT	= DATAORIGIN+$00BB
PLAYVAUS.OFS	= DATAORIGIN+$00BD
adr.NORMAL	= DATAORIGIN+$00C1	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00C1
NORMAL.HEIGHT	= DATAORIGIN+$00C3
NORMAL.OFS	= DATAORIGIN+$00C5
adr.ENLARGED	= DATAORIGIN+$00C9	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00C9
ENLARGED.HEIGHT	= DATAORIGIN+$00CB
ENLARGED.OFS	= DATAORIGIN+$00CD
adr.LASERS	= DATAORIGIN+$00D1	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00D1
LASERS.HEIGHT	= DATAORIGIN+$00D3
LASERS.OFS	= DATAORIGIN+$00D5
adr.EXPLOSION	= DATAORIGIN+$00D9	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00D9
EXPLOSION.HEIGHT	= DATAORIGIN+$00DB
EXPLOSION.OFS	= DATAORIGIN+$00DD
adr.NEWVAUS	= DATAORIGIN+$00E1	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00E1
NEWVAUS.HEIGHT	= DATAORIGIN+$00E3
NEWVAUS.OFS	= DATAORIGIN+$00E5
adr.PRESENTS	= DATAORIGIN+$00E9	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$00E9
PRESENTS.HEIGHT	= DATAORIGIN+$00EB
PRESENTS.OFS	= DATAORIGIN+$00ED
adr.SHINEWALL	= DATAORIGIN+$00F1	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$00F1
SHINEWALL.HEIGHT	= DATAORIGIN+$00F3
SHINEWALL.OFS	= DATAORIGIN+$00F5
adr.MINIVAUS	= DATAORIGIN+$00F9	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$00F9
MINIVAUS.HEIGHT	= DATAORIGIN+$00FB
MINIVAUS.OFS	= DATAORIGIN+$00FD
adr.LEVELSEL	= DATAORIGIN+$0101	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$0101
LEVELSEL.HEIGHT	= DATAORIGIN+$0103
LEVELSEL.OFS	= DATAORIGIN+$0105
adr.LETTERS	= DATAORIGIN+$0109	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0109
LETTERS.HEIGHT	= DATAORIGIN+$010B
LETTERS.OFS	= DATAORIGIN+$010D
adr.SHOOTS	= DATAORIGIN+$0111	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0111
SHOOTS.HEIGHT	= DATAORIGIN+$0113
SHOOTS.OFS	= DATAORIGIN+$0115
adr.FLUX	= DATAORIGIN+$0119	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0119
FLUX.HEIGHT	= DATAORIGIN+$011B
FLUX.OFS	= DATAORIGIN+$011D
adr.VAUS	= DATAORIGIN+$0121	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0121
VAUS.Y	= DATAORIGIN+$0122
VAUS.OLDX	= DATAORIGIN+$0123
VAUS.OLDY	= DATAORIGIN+$0125
VAUS.OLDLEN	= DATAORIGIN+$0127
VAUS.WIDTH	= DATAORIGIN+$0129
VAUS.HEIGHT	= DATAORIGIN+$012A
VAUS.FLASH	= DATAORIGIN+$012B
VAUS.IFLASH	= DATAORIGIN+$012C
VAUS.LETTER	= DATAORIGIN+$012D
adr.PATTERN	= DATAORIGIN+$012E	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$012E
PATTERN.HEIGHT	= DATAORIGIN+$0130
PATTERN.OFS	= DATAORIGIN+$0132
adr.PATTERN0	= DATAORIGIN+$0136	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0136
PATTERN0.HEIGHT	= DATAORIGIN+$0138
PATTERN0.OFS	= DATAORIGIN+$013A
adr.PATTERN1	= DATAORIGIN+$013E	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$013E
PATTERN1.HEIGHT	= DATAORIGIN+$0140
PATTERN1.OFS	= DATAORIGIN+$0142
adr.PATTERN2	= DATAORIGIN+$0146	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0146
PATTERN2.HEIGHT	= DATAORIGIN+$0148
PATTERN2.OFS	= DATAORIGIN+$014A
adr.PATTERN3	= DATAORIGIN+$014E	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$014E
PATTERN3.HEIGHT	= DATAORIGIN+$0150
PATTERN3.OFS	= DATAORIGIN+$0152
adr.PATTERN4	= DATAORIGIN+$0156	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0156
PATTERN4.HEIGHT	= DATAORIGIN+$0158
PATTERN4.OFS	= DATAORIGIN+$015A
STATUS	= DATAORIGIN+$015E
SUCCESS	= DATAORIGIN+$015F
REMAIN_BLK	= DATAORIGIN+$0160
TOTALWALL	= DATAORIGIN+$0161
adr.SCORE	= DATAORIGIN+$0162	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$0162] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$016E] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$0171] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$0174
SCORE.PL_NUMB	= DATAORIGIN+$0178
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0179] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$017C
CUR_PLAYER	= DATAORIGIN+$017D
adr.SHINEREC	= DATAORIGIN+$017E	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$017E
SHINEREC.YB	= DATAORIGIN+$017F
SHINEREC.FRAME	= DATAORIGIN+$0180
SHINEREC.BLOCK	= DATAORIGIN+$0181
SHINEREC.ACTIVE	= DATAORIGIN+$0182
LV	= DATAORIGIN+$0183
TRAINER	= DATAORIGIN+$0185
adr.LETT	= DATAORIGIN+$0186	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$0186
LETT.Y	= DATAORIGIN+$0187
LETT.TYP	= DATAORIGIN+$0188
LETT.FRAME	= DATAORIGIN+$018A
LETT.SUBFRAME	= DATAORIGIN+$018B
LETT.ACTIVE	= DATAORIGIN+$018C
LETT.INCOMING	= DATAORIGIN+$018D
LETT.NEXTX	= DATAORIGIN+$018F
LETT.NEXTY	= DATAORIGIN+$0191
LETT.NEXTTYPE	= DATAORIGIN+$0193
LETT.LAST	= DATAORIGIN+$0195
adr.FIRE	= DATAORIGIN+$0197	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$0197
FIRE.Y	= DATAORIGIN+$0198
FIRE.SHOT	= DATAORIGIN+$0199
FIRE.AVL	= DATAORIGIN+$019A
FIRE.NW	= DATAORIGIN+$019B
BALLS_IN_PLAY	= DATAORIGIN+$019C
SCRFLUX	= DATAORIGIN+$019D
SCRFLUXCNT	= DATAORIGIN+$019E
SOUND_ON	= DATAORIGIN+$019F
OLD_SCORES	= DATAORIGIN+$01A0
HLP	= DATAORIGIN+$01A4
F_HLP	= DATAORIGIN+$01A6
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.MODY	= $0500
.var MODY	= adr.MODY .word
adr.MODX	= $0600
.var MODX	= adr.MODX .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD90TABLE	= $C200
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD10TABLE	= $C300
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.SINTABLE	= $C400
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $27 $00 $00 $00
.by  $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1056

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $00 $5A  $00 $B4 $00 $0E $01 $68 $01 $C2
.by  $01 $1C $02 $76 $02 $D0 $02 $2A  $03 $84 $03 $DE $03 $38 $04 $92  $04 $EC $04 $46 $05 $00 $06 $0C
.by  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
