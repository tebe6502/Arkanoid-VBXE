; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/08/25] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $1000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' LEVELS_WALL 0 0 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010185000

; -------------------  ASM Block 00000009  -------------------

	lda :edx+3
	spl
	jsr @negEDX

	sta Result+3

	mva :edx Result
	mva :edx+1 Result+1
	mva :edx+2 Result+2

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	SQRT						; FUNCTION | OVERLOAD
.local	@010185000

; optimize OK (SYSTEM), line = 801

	lda X+3
	bmi @+
	ora X+2
	ora X+1
	ora X
	jne l_0042
@
	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_0042

; optimize OK (SYSTEM), line = 803

	lda <C
	sta SP
	lda >C
	sta SP+1

; optimize OK (SYSTEM), line = 805

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta C
	lda :FPMAN1
	sta C+1
	lda :FPMAN2
	sta C+2
	lda :FPMAN3
	sta C+3

; optimize OK (SYSTEM), line = 807

	cmp #$3F
	bne @+
	lda C+2
	cmp #$80
	bne @+
	lda C+1
	cmp #$00
	bne @+
	lda C
	cmp #$01
@
	jcc l_0061
	lda C
	sta :STACKORIGIN+9
	lda C+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda C+2
	sub #$80
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda C+3
	sbc #$3F
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$80
	sta C+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$3F
	sta C+3
	lda :STACKORIGIN+9
	sta C
	lda :STACKORIGIN+STACKWIDTH+9
	sta C+1
l_0061

; optimize OK (SYSTEM), line = 809

	mwy SP :bp2
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3

; optimize OK (SYSTEM), line = 811

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 812

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 813

	lda X
	sta :FPMAN0
	lda X+1
	sta :FPMAN1
	lda X+2
	sta :FPMAN2
	lda X+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda RESULT
	sta :FP1MAN0
	lda RESULT+1
	sta :FP1MAN1
	lda RESULT+2
	sta :FP1MAN2
	lda RESULT+3
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
SP	= DATAORIGIN+$0013
C	= DATAORIGIN+$0015

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 862

	lda #$00
	sta SIGN

; optimize OK (SYSTEM), line = 863

	lda VALUE
	sta X
	lda VALUE+1
	sta X+1
	lda VALUE+2
	sta X+2
	lda VALUE+3
	sta X+3

; optimize OK (SYSTEM), line = 864

	lda #$00
	sta Y
	sta Y+1
	sta Y+2
	sta Y+3

; optimize OK (SYSTEM), line = 866

	lda VALUE+3
	ora VALUE+2
	ora VALUE+1
	ora VALUE
	jne l_00C8

; optimize OK (SYSTEM), line = 867

	lda #$00
	sta RESULT
	sta RESULT+1
	sta RESULT+2
	sta RESULT+3
	jmp @exit
l_00C8

; optimize OK (SYSTEM), line = 870

	lda X+3
	jpl l_00E6

; optimize OK (SYSTEM), line = 871

	lda #$01
	sta SIGN

; optimize OK (SYSTEM), line = 872

	lda #$00
	sub X
	sta X
	lda #$00
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_00E6
l_00D6

; optimize OK (SYSTEM), line = 875

	lda X
	sta @REAL_DIV.A
	lda X+1
	sub #$01
	sta @REAL_DIV.A+1
	lda X+2
	sbc #$00
	sta @REAL_DIV.A+2
	lda X+3
	sbc #$00
	sta @REAL_DIV.A+3
	lda X
	sta @REAL_DIV.B
	lda X+1
	add #$01
	sta @REAL_DIV.B+1
	lda X+2
	adc #$00
	sta @REAL_DIV.B+2
	lda X+3
	adc #$00
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 876

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta Y
	lda :eax+1
	sta Y+1
	lda :eax+2
	sta Y+2
	lda :eax+3
	sta Y+3

; optimize OK (SYSTEM), line = 877

	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	lda #$01
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$04
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$0B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$13
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$1B
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$24
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	add #$33
	sta @REAL_MUL.A
	lda :eax+1
	adc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sub #$55
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda Y
	sta @REAL_MUL.B
	lda Y+1
	sta @REAL_MUL.B+1
	lda Y+2
	sta @REAL_MUL.B+2
	lda Y+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 880

	lda #$C9
	add X
	sta X
	lda #$00
	adc X+1
	sta X+1
	lda #$00
	adc X+2
	sta X+2
	lda #$00
	adc X+3
	sta X+3

; optimize OK (SYSTEM), line = 882

	lda SIGN
	jeq l_0168

; optimize OK (SYSTEM), line = 883

	lda #$00
	sub X
	sta RESULT
	lda #$00
	sbc X+1
	sta RESULT+1
	lda #$00
	sbc X+2
	sta RESULT+2
	lda #$00
	sbc X+3
	jmp l_0179
l_0168

; optimize OK (SYSTEM), line = 885

	lda X
	sta RESULT
	lda X+1
	sta RESULT+1
	lda X+2
	sta RESULT+2
	lda X+3
l_0179
	sta RESULT+3
@exit

; ------------------------------------------------------------

VALUE	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$001D
X	= DATAORIGIN+$0021
Y	= DATAORIGIN+$0025
SIGN	= DATAORIGIN+$0029

@VarData	= VALUE
@VarDataSize	= 13

	rts						; ret
.endl
.endl							; overload

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000025  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000033  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	RSINCOS						; FUNCTION

; --- WhileProlog
	jmp l_01BE
l_01BF

; optimize OK (SYSTEM), line = 1776

	lda X
	sub #$48
	sta X
	lda X+1
	sbc #$06
	sta X+1
	lda X+2
	sbc #$00
	sta X+2
	lda X+3
	sbc #$00
	sta X+3
l_01BE
	.LOCAL
	lda X+3
	sub #$00
	bne L4
	lda X+2
	cmp #$00
	bne L1
	lda X+1
	cmp #$06
	bne L1
	lda X
	cmp #$48
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	smi
	jne l_01BF

; --- WhileProlog
	jmp l_01D3
l_01D4

; optimize OK (SYSTEM), line = 1777

	lda X
	add #$48
	sta X
	lda X+1
	adc #$06
	sta X+1
	lda X+2
	adc #$00
	sta X+2
	lda X+3
	adc #$00
	sta X+3
l_01D3
	lda X+3
	jmi l_01D4

; optimize OK (SYSTEM), line = 1780

	lda #$A3
	sta @REAL_MUL.B
	lda #$00
	sta @REAL_MUL.B+1
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1783

	lda X
	sta @REAL_TRUNC.A
	lda X+1
	sta @REAL_TRUNC.A+1
	lda X+2
	sta @REAL_TRUNC.A+2
	lda X+3
	sta @REAL_TRUNC.A+3
	jsr @REAL_TRUNC
	lda :eax
	sta I

; optimize OK (SYSTEM), line = 1786

	lda X+3
	jpl l_0202
	dec I
l_0202

; optimize OK (SYSTEM), line = 1789

	ldy #$00
	lda I
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda X+1
	sub :STACKORIGIN+STACKWIDTH+10
	sta X+1
	lda X+2
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta X+2
	lda X+3
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta X+3

; optimize OK (SYSTEM), line = 1792

	lda SC
	jeq l_021F
	inc I
l_021F

; optimize OK (SYSTEM), line = 1795

	lda I
	and #$01
	jne l_023C
	lda #$00
	sub X
	sta X
	lda #$01
	sbc X+1
	sta X+1
	lda #$00
	sbc X+2
	sta X+2
	lda #$00
	sbc X+3
	sta X+3
l_023C

; optimize OK (SYSTEM), line = 1798

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda X
	sta @REAL_MUL.A
	lda X+1
	sta @REAL_MUL.A+1
	lda X+2
	sta @REAL_MUL.A+2
	lda X+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta X
	lda :eax+1
	sta X+1
	lda :eax+2
	sta X+2
	lda :eax+3
	sta X+3

; optimize OK (SYSTEM), line = 1799

	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	lda #$05
	sta @REAL_MUL.A
	lda #$00
	sta @REAL_MUL.A+1
	sta @REAL_MUL.A+2
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sub #$3C
	sta @REAL_MUL.A
	lda :eax+1
	sbc #$00
	sta @REAL_MUL.A+1
	lda :eax+2
	sbc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	sbc #$00
	sta @REAL_MUL.A+3
	lda X
	sta @REAL_MUL.B
	lda X+1
	sta @REAL_MUL.B+1
	lda X+2
	sta @REAL_MUL.B+2
	lda X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax+1
	add #$01
	sta @REAL_MUL.A+1
	lda :eax+2
	adc #$00
	sta @REAL_MUL.A+2
	lda :eax+3
	adc #$00
	sta @REAL_MUL.A+3
	lda #$00
	sub X
	sta @REAL_MUL.B
	lda #$01
	sbc X+1
	sta @REAL_MUL.B+1
	lda #$00
	sbc X+2
	sta @REAL_MUL.B+2
	lda #$00
	sbc X+3
	sta @REAL_MUL.B+3
	jsr @REAL_MUL
	lda :eax
	sta RESULT
	lda :eax+1
	sta RESULT+1
	lda :eax+2
	sta RESULT+2
	lda :eax+3
	sta RESULT+3

; optimize OK (SYSTEM), line = 1802

	lda I
	and #$02
	cmp #$02
	jne l_0281
	lda #$00
	sub RESULT
	sta RESULT
	lda #$00
	sbc RESULT+1
	sta RESULT+1
	lda #$00
	sbc RESULT+2
	sta RESULT+2
	lda #$00
	sbc RESULT+3
	sta RESULT+3
l_0281
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$002A
SC	= DATAORIGIN+$002E
RESULT	= DATAORIGIN+$002F
I	= DATAORIGIN+$0033

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	SIN						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1817

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$00
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0034
RESULT	= DATAORIGIN+$0038

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	COS						; FUNCTION | OVERLOAD
.local	@01018E000

; optimize OK (SYSTEM), line = 1831

	lda X
	sta RSINCOS.X
	lda X+1
	sta RSINCOS.X+1
	lda X+2
	sta RSINCOS.X+2
	lda X+3
	sta RSINCOS.X+3
	lda #$01
	sta RSINCOS.SC
	jsr RSINCOS
	lda RSINCOS.RESULT
	sta RESULT
	lda RSINCOS.RESULT+1
	sta RESULT+1
	lda RSINCOS.RESULT+2
	sta RESULT+2
	lda RSINCOS.RESULT+3
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$003C
RESULT	= DATAORIGIN+$0040

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
.local	@010180000
	sta RANGE

; -------------------  ASM Block 00000049  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0044
RESULT	= DATAORIGIN+$0045

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl
.endl							; overload

.local	RANDOM						; FUNCTION | OVERLOAD
.local	@010184000

; optimize OK (system_atari.inc), line = 179

	lda RANGE+1
	ora RANGE
	jne l_02D3

; optimize OK (system_atari.inc), line = 180

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_02E1
l_02D3

; optimize OK (system_atari.inc), line = 183

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 184

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000050  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_02E1
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$0046
RESULT	= DATAORIGIN+$0048

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl
.endl							; overload

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000060  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$004A
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$004B
GETCOLOR	= DATAORIGIN+$004C
VIDEORAM	= DATAORIGIN+$004D
adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$004F
LASTARCCOORDS.Y	= DATAORIGIN+$0051
LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
LASTARCCOORDS.XEND	= DATAORIGIN+$0057
LASTARCCOORDS.YEND	= DATAORIGIN+$0059
WIN_LEFT	= DATAORIGIN+$005B
WIN_RIGHT	= DATAORIGIN+$005D
WIN_TOP	= DATAORIGIN+$005F
WIN_BOTTOM	= DATAORIGIN+$0061
SCANLINE_WIDTH	= DATAORIGIN+$0063
CURRENTX	= DATAORIGIN+$0064
CURRENTY	= DATAORIGIN+$0066

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
	sta B

; -------------------  ASM Block 00000113  -------------------

	fxs FX_MEMS b

; ------------------------------------------------------------

B	= DATAORIGIN+$007C

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READVBXEMEMORYBYTE				; FUNCTION

; optimize OK (vbxe_memorystream.inc), line = 20

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 21

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 23

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 25

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda (:bp),y
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 27

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
@exit

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$007D
RESULT	= DATAORIGIN+$007F
BNK	= DATAORIGIN+$0080
ADR	= DATAORIGIN+$0081

@VarData	= POSITION
@VarDataSize	= 5

	rts						; ret
.endl

.local	WRITEVBXEMEMORYBYTE				; PROCEDURE

; optimize OK (vbxe_memorystream.inc), line = 39

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 40

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 42

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 44

	ldy ADR+1
	sty :bp+1
	ldy ADR
	lda A
	sta (:bp),y

; optimize OK (vbxe_memorystream.inc), line = 46

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

POSITION	= DATAORIGIN+$0083
A	= DATAORIGIN+$0085
BNK	= DATAORIGIN+$0086
ADR	= DATAORIGIN+$0087

@VarData	= POSITION
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 124

	mwy POSITION :bp2
	ldy #$02
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	dey
	lda (:bp2),y
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	ora #$80
	sta BNK

; optimize OK (vbxe_memorystream.inc), line = 125

	dey
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	and #$0F
	ora #$B0
	sta ADR+1

; optimize OK (vbxe_memorystream.inc), line = 127

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 129

	lda BUFFER
	sta SRC
	lda BUFFER+1
	sta SRC+1

; optimize OK (vbxe_memorystream.inc), line = 131

	lda #$00
	sta I
	sta I+1
	lda COUNT
	sub #$01
	sta @FORTMP_0400_0
	lda COUNT+1
	sbc #$00
	sta @FORTMP_0400_1

l_0403
; --- ForToDoCondition
	lda @FORTMP_0400_1::#$00
	cmp I+1
	bne @+
	lda @FORTMP_0400_0::#$00
	cmp I
@
	jcc l_040F

; optimize OK (vbxe_memorystream.inc), line = 133

	mwy SRC :bp2
	ldy #$00
	lda (:bp2),y
	ldy ADR+1
	sty :bp+1
	ldy ADR
	sta (:bp),y

; optimize FAIL (0, vbxe_memorystream.inc), line = 135

	inc ADR
	sne
	inc ADR+1

; optimize FAIL (0, vbxe_memorystream.inc), line = 136

	inc SRC
	sne
	inc SRC+1

; optimize OK (vbxe_memorystream.inc), line = 138

	lda ADR+1
	cmp #$C0
	jcc l_042E
	bne @+
	lda ADR
	jcc l_042E
@

; optimize FAIL (0, vbxe_memorystream.inc), line = 139

	inc BNK

; optimize OK (vbxe_memorystream.inc), line = 140

	lda BNK
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 141

	lda #$00
	sta ADR
	lda #$B0
	sta ADR+1
l_042E

; --- ForToDoEpilog
	inc I
	jne l_0403
	inc I+1
	jne l_0403
l_040F

; optimize OK (vbxe_memorystream.inc), line = 146

	lda #$00
	jsr VBXEMEMORYBANK

; optimize OK (vbxe_memorystream.inc), line = 148

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	add COUNT
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc COUNT+1
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
BUFFER	= DATAORIGIN+$0097
COUNT	= DATAORIGIN+$0099
POSITION	= DATAORIGIN+$009B
SIZE	= DATAORIGIN+$009D
BNK	= DATAORIGIN+$009F
ADR	= DATAORIGIN+$00A0
I	= DATAORIGIN+$00A2
SRC	= DATAORIGIN+$00A4

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 17

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 158

	lda POSITION
	sta READVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta READVBXEMEMORYBYTE.POSITION+1
	jsr READVBXEMEMORYBYTE
	lda READVBXEMEMORYBYTE.RESULT
	sta RESULT

; optimize OK (vbxe_memorystream.inc), line = 160

	lda #$00
	jsr VBXEMEMORYBANK
@exit

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
RESULT	= DATAORIGIN+$00AA
POSITION	= DATAORIGIN+$00AB
SIZE	= DATAORIGIN+$00AD

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 6

	rts						; ret
.endl

.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 198

	lda POSITION
	sta WRITEVBXEMEMORYBYTE.POSITION
	lda POSITION+1
	sta WRITEVBXEMEMORYBYTE.POSITION+1
	lda B
	sta WRITEVBXEMEMORYBYTE.A
	jsr WRITEVBXEMEMORYBYTE

; optimize OK (vbxe_memorystream.inc), line = 200

	lda #$00
	jsr VBXEMEMORYBANK

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
B	= DATAORIGIN+$00B9
POSITION	= DATAORIGIN+$00BA
SIZE	= DATAORIGIN+$00BC

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 239

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 240

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000114  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 292

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 293

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
POSITION	= DATAORIGIN+$00C8
SIZE	= DATAORIGIN+$00CA
ADR	= DATAORIGIN+$00CC
SIZ	= DATAORIGIN+$00D0

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000123  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_04A5
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_04A5
	cmp #$1F
	jne l_04B4

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_04B4
	cmp #$18
	jne l_04C3

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_04C3

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000124  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$00D4
S	= DATAORIGIN+$00D5
@CASETMP_0005	= DATAORIGIN+$00D7

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$00D8

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000126  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$00D9
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETXDL						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000127  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #.sizeof(s@xdl)-1

lp	lda MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
	sta (a),y
	dey
	bpl lp

	fxs FX_MEMS #0

; ------------------------------------------------------------

A	= :EDX
A.XDLC_	= DATAORIGIN+$0000
A.RPTL_	= DATAORIGIN+$0002
A.XDLC	= DATAORIGIN+$0003
A.RPTL	= DATAORIGIN+$0005
A.OV_ADR	= DATAORIGIN+$0006
A.OV_ADR.BYTE0	= DATAORIGIN+$0006
A.OV_ADR.BYTE1	= DATAORIGIN+$0007
A.OV_ADR.BYTE2	= DATAORIGIN+$0008
A.OV_STEP	= DATAORIGIN+$0009
A.OV_CHBASE	= DATAORIGIN+$000B
A.MP_ADR	= DATAORIGIN+$000C
A.MP_ADR.BYTE0	= DATAORIGIN+$000C
A.MP_ADR.BYTE1	= DATAORIGIN+$000D
A.MP_ADR.BYTE2	= DATAORIGIN+$000E
A.MP_STEP	= DATAORIGIN+$000F
A.MP_HSCROL	= DATAORIGIN+$0011
A.MP_VSCROL	= DATAORIGIN+$0012
A.MP_WIDTH	= DATAORIGIN+$0013
A.MP_HEIGHT	= DATAORIGIN+$0014
A.OV_WIDTH	= DATAORIGIN+$0015
A.OV_PRIOR	= DATAORIGIN+$0016

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDL						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000128  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #.sizeof(s@xdl)-1

lp	lda (a),y
	sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
	dey
	bpl lp

	fxs FX_MEMS #0

; ------------------------------------------------------------

A	= :EDX
A.XDLC_	= DATAORIGIN+$0000
A.RPTL_	= DATAORIGIN+$0002
A.XDLC	= DATAORIGIN+$0003
A.RPTL	= DATAORIGIN+$0005
A.OV_ADR	= DATAORIGIN+$0006
A.OV_ADR.BYTE0	= DATAORIGIN+$0006
A.OV_ADR.BYTE1	= DATAORIGIN+$0007
A.OV_ADR.BYTE2	= DATAORIGIN+$0008
A.OV_STEP	= DATAORIGIN+$0009
A.OV_CHBASE	= DATAORIGIN+$000B
A.MP_ADR	= DATAORIGIN+$000C
A.MP_ADR.BYTE0	= DATAORIGIN+$000C
A.MP_ADR.BYTE1	= DATAORIGIN+$000D
A.MP_ADR.BYTE2	= DATAORIGIN+$000E
A.MP_STEP	= DATAORIGIN+$000F
A.MP_HSCROL	= DATAORIGIN+$0011
A.MP_VSCROL	= DATAORIGIN+$0012
A.MP_WIDTH	= DATAORIGIN+$0013
A.MP_HEIGHT	= DATAORIGIN+$0014
A.OV_WIDTH	= DATAORIGIN+$0015
A.OV_PRIOR	= DATAORIGIN+$0016

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000130  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$00DD

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0074
VRAM.SIZE	= DATAORIGIN+$0078
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00EB

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$00ED
B	= DATAORIGIN+$00EF

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSERESET					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 105

	lda MOUS.FIRE
	sta RESULT
	lda #$00
	sta RESULT+1

; optimize OK (arkanoid_vbxe.pas), line = 107

	ldy #1
	lda MOUS.FIRE
	beq @+
	dey
@
	tya
	sta MOUS.FIRE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$00F1

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (arkanoid_vbxe.pas), line = 120

	mwy X :bp2
	ldy #$00
	lda MOUS.X
	sta (:bp2),y
	iny
	lda MOUS.X+1
	sta (:bp2),y

; optimize OK (arkanoid_vbxe.pas), line = 121

	mwy Y :bp2
	ldy #$00
	lda #$BE
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

X	= DATAORIGIN+$00F3
Y	= DATAORIGIN+$00F5

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSE_X_LIMIT					; PROCEDURE

; ------------------------------------------------------------

MN	= DATAORIGIN+$00F7
MX	= DATAORIGIN+$00F9

@VarData	= MN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSEMOVE					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$00FB
Y	= DATAORIGIN+$00FD

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE

; -------------------  ASM Block 00000139  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 299

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 300

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 301

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 303

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 304

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 305

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 307

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 308

	lda W
	sub #$01
	sta BLT.SRC_STEP_Y
	lda W+1
	sbc #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 310

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 311

	lda W
	sub #$01
	sta BLT.DST_STEP_Y
	lda W+1
	sbc #$00
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 313

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 314

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 316

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 318

	lda #$00
	sta BLT.BLT_ZOOM

; optimize OK (service.pas), line = 320

	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000140  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 326

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$04FE
DST	= DATAORIGIN+$0502
W	= DATAORIGIN+$0506
H	= DATAORIGIN+$0508

@VarData	= SRC
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE

; -------------------  ASM Block 00000141  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 342

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 343

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 344

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 346

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 347

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 348

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 350

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 351

	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 353

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 354

	sta BLT.DST_STEP_Y
	lda #$00
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 356

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 357

	lda #$00
	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 359

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 360

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000142  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 367

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0509
DST	= DATAORIGIN+$050D
SIZE	= DATAORIGIN+$0511
I	= DATAORIGIN+$0513

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITTMP						; PROCEDURE

; optimize OK (service.pas), line = 379

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 381

	lda TMP
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
	lda TMP+1
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
	lda SIZE
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
	lda #$00
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER

; ------------------------------------------------------------

DST	= DATAORIGIN+$0515
SIZE	= DATAORIGIN+$0519
X	= DATAORIGIN+$051A

@VarData	= DST
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000143  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 397

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 398

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 399

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 401

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 402

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 403

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 405

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 406

	sta BLT.SRC_STEP_Y
	lda #$00
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 408

	lda #$01
	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 409

	sta BLT.DST_STEP_Y
	lda #$00
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 411

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 412

	lda #$00
	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 414

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 415

	lda #$FF
	sta BLT.BLT_AND_MASK

; -------------------  ASM Block 00000144  -------------------

	  fxs FX_MEMS #$00
	
; optimize OK (service.pas), line = 421

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$051B
DST	= DATAORIGIN+$051F
SIZE	= DATAORIGIN+$0523
X	= DATAORIGIN+$0525

@VarData	= SRC
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBYTE					; PROCEDURE

; optimize OK (service.pas), line = 432

	lda SRC
	sta VBXE_RAM.POSITION
	lda SRC+1
	sta VBXE_RAM.POSITION+1
	lda SRC+2
	sta VBXE_RAM.POSITION+2
	lda SRC+3
	sta VBXE_RAM.POSITION+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 433

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
	lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
	sta A

; optimize OK (service.pas), line = 435

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 436

	lda A
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0527
DST	= DATAORIGIN+$052B
A	= DATAORIGIN+$052F

@VarData	= SRC
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUTBYTE						; PROCEDURE

; optimize OK (service.pas), line = 446

	lda DST
	sta VBXE_RAM.POSITION
	lda DST+1
	sta VBXE_RAM.POSITION+1
	lda DST+2
	sta VBXE_RAM.POSITION+2
	lda DST+3
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 447

	lda V
	sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE

; ------------------------------------------------------------

DST	= DATAORIGIN+$0530
V	= DATAORIGIN+$0534

@VarData	= DST
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETBYTE						; FUNCTION

; optimize OK (service.pas), line = 457

	lda SRC
	sta VBXE_RAM.POSITION
	lda SRC+1
	sta VBXE_RAM.POSITION+1
	lda SRC+2
	sta VBXE_RAM.POSITION+2
	lda SRC+3
	sta VBXE_RAM.POSITION+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 458

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
	lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0535
RESULT	= DATAORIGIN+$0539

@VarData	= SRC
@VarDataSize	= 4

	rts						; ret
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$053A

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 583

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_068E
	lda A
	sta RESULT
	lda A+1
	jmp l_069D
l_068E

; optimize OK (service.pas), line = 584

	lda B
	sta RESULT
	lda B+1
l_069D
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$053C
B	= DATAORIGIN+$053E
RESULT	= DATAORIGIN+$0540

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 590

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_06B8
	lda A
	sta RESULT
	lda A+1
	jmp l_06C7
l_06B8

; optimize OK (service.pas), line = 591

	lda B
	sta RESULT
	lda B+1
l_06C7
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0542
B	= DATAORIGIN+$0544
RESULT	= DATAORIGIN+$0546

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 600

	sta STATUS

; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$0548

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 638

	lda #$00
	sta Y

l_06E3
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_06F1

; optimize OK (service.pas), line = 639

	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	ldy Y
	lda :eax
	sta adr.ROW,y
	lda :eax+1
	sta adr.ROW+251,y

; --- ForToDoEpilog
	inc Y
	jne l_06E3
l_06F1

; optimize OK (service.pas), line = 641

	lda #$C8
	tay

l_070C
; --- ForToDoCondition
	cpy #$FB
	jcs l_071A

; optimize OK (service.pas), line = 642

	lda #$00
	sta adr.ROW,y
	lda #$FA
	sta adr.ROW+251,y

; --- ForToDoEpilog
	iny
	jne l_070C
l_071A
	sty Y

; ------------------------------------------------------------

Y	= DATAORIGIN+$0549

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 667

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_073C

; optimize FAIL ('@print', service.pas), line = 668

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_073C

; optimize OK (service.pas), line = 672

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 673

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 675

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 677

	lda XDL
	sta VBXE.GETXDL.A
	lda XDL+1
	sta VBXE.GETXDL.A+1
	jsr VBXE.GETXDL

; optimize OK (service.pas), line = 678

	lda #$13
	sta XDL.RPTL_

; optimize OK (service.pas), line = 679

	lda #$C6
	sta XDL.RPTL

; optimize OK (service.pas), line = 680

	lda XDL
	sta VBXE.SETXDL.A
	lda XDL+1
	sta VBXE.SETXDL.A+1
	jsr VBXE.SETXDL

; optimize OK (service.pas), line = 682

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 683

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 684

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 686

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000145  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 692

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; -------------------  ASM Block 00000146  -------------------

	  fxs FX_MEMS #$00
	
; ------------------------------------------------------------

adr.XDL	= DATAORIGIN+$054A	; [23] RECORD
.var XDL	= adr.XDL .word
XDL.XDLC_	= DATAORIGIN+$054A
XDL.RPTL_	= DATAORIGIN+$054C
XDL.XDLC	= DATAORIGIN+$054D
XDL.RPTL	= DATAORIGIN+$054F
adr.XDL.OV_ADR	= DATAORIGIN+$0550	; [3] RECORD
.var XDL.OV_ADR	= adr.XDL.OV_ADR .word
XDL.OV_ADR.BYTE0	= DATAORIGIN+$0550
XDL.OV_ADR.BYTE1	= DATAORIGIN+$0551
XDL.OV_ADR.BYTE2	= DATAORIGIN+$0552
XDL.OV_STEP	= DATAORIGIN+$0553
XDL.OV_CHBASE	= DATAORIGIN+$0555
adr.XDL.MP_ADR	= DATAORIGIN+$0556	; [3] RECORD
.var XDL.MP_ADR	= adr.XDL.MP_ADR .word
XDL.MP_ADR.BYTE0	= DATAORIGIN+$0556
XDL.MP_ADR.BYTE1	= DATAORIGIN+$0557
XDL.MP_ADR.BYTE2	= DATAORIGIN+$0558
XDL.MP_STEP	= DATAORIGIN+$0559
XDL.MP_HSCROL	= DATAORIGIN+$055B
XDL.MP_VSCROL	= DATAORIGIN+$055C
XDL.MP_WIDTH	= DATAORIGIN+$055D
XDL.MP_HEIGHT	= DATAORIGIN+$055E
XDL.OV_WIDTH	= DATAORIGIN+$055F
XDL.OV_PRIOR	= DATAORIGIN+$0560

@VarData	= XDL.XDLC_
@VarDataSize	= 23

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 736

	lda SHINEREC.XB
	sta XB
	lda #$00
	sta XB+1

; optimize OK (service.pas), line = 737

	lda SHINEREC.YB
	sta YB
	lda #$00
	sta YB+1

; optimize OK (service.pas), line = 739

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 741

	tay
	lda adr.WALL,y
	cmp #$09
	jcc l_0799

; optimize OK (service.pas), line = 743

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 744

	lda adr.WALL,y
	cmp #$0A
	jeq l_07B9
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_07B9

; optimize OK (service.pas), line = 746

	lda XB
	sta :STACKORIGIN+10
	lda XB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 747

	lda YB
	sta :STACKORIGIN+10
	lda YB+1
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 748

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 750

	lda #$00
	sta Y

l_07E9
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_07F7

; optimize OK (service.pas), line = 752

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta OG+1
	lda :STACKORIGIN+9
	sta OG

; optimize OK (service.pas), line = 755

	lda XF
	sta :STACKORIGIN+10
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YF
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda SHINEWALL.OFS
	add FR
	sta :STACKORIGIN+11
	lda SHINEWALL.OFS+1
	adc FR+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda SHINEWALL.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda SHINEWALL.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add OG
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc OG+1
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_07E9
l_07F7
l_0799

; optimize FAIL (0, service.pas), line = 759

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 760

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_083E
	lda #$00
	sta SHINEREC.ACTIVE
l_083E

; ------------------------------------------------------------

XB	= DATAORIGIN+$0561
YB	= DATAORIGIN+$0563
FRAME	= DATAORIGIN+$0565
XF	= DATAORIGIN+$0567
YF	= DATAORIGIN+$0569
FR	= DATAORIGIN+$056B
OG	= DATAORIGIN+$056D
Y	= DATAORIGIN+$056F
I	= DATAORIGIN+$0570

@VarData	= XB
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 769

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 770

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 777

	lda SHINEREC.ACTIVE
	jeq l_085E
	jsr UNSHINE_BLOCK
l_085E

; optimize OK (service.pas), line = 779

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 780

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 781

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 782

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 783

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$0571
YB	= DATAORIGIN+$0572

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 789

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_089F
	jsr SHINE_BLOCK
l_089F

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_08A8

; optimize OK (service.pas), line = 797

	lda #$64
	jsr SYSTEM.RANDOM.@010180000
	lda SYSTEM.RANDOM.@010180000.RESULT
	sta RN
	lda #$00
	sta RN+1

; optimize OK (service.pas), line = 798

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 799

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_08B6

; optimize FAIL (0, service.pas), line = 804

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 805

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 808

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_08B6

; optimize OK (service.pas), line = 812

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda LETT.LAST
	sta :STACKORIGIN+10
	ldy #$00
	lda LETT.LAST+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+9
	cmp :STACKORIGIN+STACKWIDTH*3+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
@
	jeq l_08A8

; optimize OK (service.pas), line = 814

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0573
RN	= DATAORIGIN+$0575
SUM	= DATAORIGIN+$0577
LETTER	= DATAORIGIN+$0579

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 823

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 825

	lda #$00
	sta YL

l_0906
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_0914

; optimize OK (service.pas), line = 827

	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FW+1
	lda :STACKORIGIN+9
	sta FW

; optimize OK (service.pas), line = 829

	lda LETT.Y
	add YL
	tay
	lda LETT.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda LETTERS.OFS
	add FW
	sta :STACKORIGIN+11
	lda LETTERS.OFS+1
	adc FW+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda LETTERS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda LETTERS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add FL
	sta BLITZERO.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc FL+1
	sta BLITZERO.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITZERO.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITZERO.SRC+3
	lda #$10
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YL
	jne l_0906
l_0914

; ------------------------------------------------------------

FL	= DATAORIGIN+$057B
FW	= DATAORIGIN+$057D
YL	= DATAORIGIN+$057F

@VarData	= FL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 841

	lda #$00
	sta YL

l_0952
; --- ForToDoCondition
	lda YL
	cmp #$08
	jcs l_0960

; optimize OK (service.pas), line = 843

	lda LETT.Y
	adc YL
	tay
	lda LETT.X
	add adr.ROW,y
	sta AD
	lda #$00
	adc adr.ROW+251,y
	sta AD+1

; optimize OK (service.pas), line = 844

	cmp #$FA
	jcs l_0985

; optimize OK (service.pas), line = 847

	lda AD
	sta BLITROW.DST
	lda #$50
	add AD+1
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add AD
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc AD+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$10
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_0985

; --- ForToDoEpilog
	inc YL
	jne l_0952
l_0960

; ------------------------------------------------------------

AD	= DATAORIGIN+$0580
YL	= DATAORIGIN+$0582

@VarData	= AD
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 855

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 856

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 862

	lda LETT.ACTIVE
	jeq l_09B4
	jsr DISABLE_LETTER
l_09B4

; optimize OK (service.pas), line = 864

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 865

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 866

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 867

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 868

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 869

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$0583
YL	= DATAORIGIN+$0585
LETTER	= DATAORIGIN+$0587

@VarData	= XL
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 875

	lda LETT.ACTIVE
	jeq l_09E3

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 877

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 878

	inc LETT.Y

; optimize OK (service.pas), line = 879

	lda LETT.Y
	cmp #$C8
	jcc l_09FB
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 880
	jmp l_0A06
l_09FB

; optimize FAIL ('PUT_LETTER', service.pas), line = 882

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 883

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 884

	lda LETT.SUBFRAME
	cmp #$05
	jne l_0A1D

; optimize OK (service.pas), line = 886

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 887

	inc LETT.FRAME
l_0A1D

; optimize OK (service.pas), line = 890

	lda LETT.FRAME
	cmp #$08
	jne l_0A3A
	lda #$00
	sta LETT.FRAME
l_0A3A

; optimize OK (service.pas), line = 892

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_0A93
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_0A93
	jeq l_0A93
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_0A93
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_0A93
	jeq l_0A93
@

; optimize OK (service.pas), line = 895

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 896

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 897

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0A06

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 898

	jsr DISABLE_LETTER
l_0A93

; optimize OK (service.pas), line = 902

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_0AB4
l_09E3

; optimize OK (service.pas), line = 904

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0AC5

; optimize OK (service.pas), line = 905

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTX+1
	sta START_LETTER.XL+1
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTY+1
	sta START_LETTER.YL+1
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_0AB4
l_0AC5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$07
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 915

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$0589	; [8] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$0589
BTM.HEIGHT	= DATAORIGIN+$058B
BTM.OFS	= DATAORIGIN+$058D
X	= DATAORIGIN+$0591
Y	= DATAORIGIN+$0593
OFST	= DATAORIGIN+$0595

@VarData	= BTM.WIDTH
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETPALETTE					; PROCEDURE

; ------------------------------------------------------------

BTM	= DATAORIGIN+$0597
BTM.WIDTH	= DATAORIGIN+$0000
BTM.HEIGHT	= DATAORIGIN+$0002
BTM.OFS	= DATAORIGIN+$0004

@VarData	= BTM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1010

	lda #$00
	sta YP

l_0AEE
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0AFC

; optimize OK (service.pas), line = 1012

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+10
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta ADR
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta ADR+1

; optimize OK (service.pas), line = 1015

	lda ADR
	sta BLITZERO.DST
	lda #$50
	add ADR+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda YP
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add YP
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda BALLDATA.OFS
	add :STACKORIGIN+12
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc YP
	jne l_0AEE
l_0AFC

; ------------------------------------------------------------

BALL	= DATAORIGIN+$059B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$059F
ADR	= DATAORIGIN+$05A0

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1029

	lda #$00
	sta YP

l_0B3B
; --- ForToDoCondition
	lda YP
	cmp #$05
	jcs l_0B49

; optimize OK (service.pas), line = 1031

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda YP
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+10
	add (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda :STACKORIGIN+STACKWIDTH+10
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+10
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta TEMP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta TEMP+1

; optimize OK (service.pas), line = 1033

	ora TEMP
	jeq l_0B7F
	lda TEMP+1
	cmp #$FA
	jcs l_0B7F

; optimize OK (service.pas), line = 1036

	lda TEMP
	sta BLITROW.DST
	lda #$50
	add TEMP+1
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add TEMP
	sta BLITROW.SRC
	lda PLAYSCREEN.OFS+1
	adc TEMP+1
	sta BLITROW.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$05
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW
l_0B7F

; --- ForToDoEpilog
	inc YP
	jne l_0B3B
l_0B49

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05A2
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
YP	= DATAORIGIN+$05A6
TEMP	= DATAORIGIN+$05A7

@VarData	= BALL
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1083

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+9
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	ldy #1
	cmp #$FF
	bne @+
	lda :STACKORIGIN+10
	cmp #$FF
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	bne @+
	dey
@
	sty :STACKORIGIN+10
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+11
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+11
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+12
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+12
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+11
	cmp :STACKORIGIN+STACKWIDTH+12
	bne @+
	lda :STACKORIGIN+11
	cmp :STACKORIGIN+12
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_0BD1

; optimize OK (service.pas), line = 1085

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0BD1

; optimize OK (service.pas), line = 1087

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1089

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1090

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05A9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1100

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1101

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize FAIL (1, service.pas), line = 1103

	inx
	mva SPEED :STACKORIGIN,x
	mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
	lda SX
	sta :ecx
	sta :ztmp8
	lda SX+1
	sta :ecx+1
	sta :ztmp9
	lda SX
	sta :eax
	sta :ztmp10
	lda SX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda SY
	sta :ecx
	sta :ztmp8
	lda SY+1
	sta :ecx+1
	sta :ztmp9
	lda SY
	sta :eax
	sta :ztmp10
	lda SY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
	mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToCARD1.SMALL
	lda :STACKORIGIN-1,x
	sta :FPMAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FPMAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FPMAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3
	dex

; optimize OK (service.pas), line = 1108

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1109

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	jsr @FROUND
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05AD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
SPEED	= DATAORIGIN+$05B1
SX	= DATAORIGIN+$05B3
SY	= DATAORIGIN+$05B5
VM	= DATAORIGIN+$05B7

@VarData	= BALL
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1116

	lda ANGLE
	sta :STACKORIGIN+9
	ldy #$00
	lda ANGLE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+2
	sty @REAL_MUL.A+3
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sta @REAL_MUL.A
	lda #$24
	sta @REAL_MUL.B
	lda #$03
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	sta @REAL_MUL.B+3
	lda :STACKORIGIN+STACKWIDTH+9
	sta @REAL_MUL.A+1
	jsr @REAL_MUL
	lda #$00
	sta @REAL_DIV.B
	lda #$B4
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	sta @REAL_DIV.B+3
	jsr @REAL_DIV
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	lda :eax+2
	sta W+2
	lda :eax+3
	sta W+3

; optimize FAIL (1, service.pas), line = 1118

	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.COS.@01018E000.X
	lda W+1
	sta SYSTEM.COS.@01018E000.X+1
	lda W+2
	sta SYSTEM.COS.@01018E000.X+2
	lda W+3
	sta SYSTEM.COS.@01018E000.X+3
	jsr SYSTEM.COS.@01018E000
	inx
	mva SYSTEM.COS.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.COS.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.COS.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.COS.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y

; optimize FAIL (1, service.pas), line = 1119

	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda W
	sta SYSTEM.SIN.@01018E000.X
	lda W+1
	sta SYSTEM.SIN.@01018E000.X+1
	lda W+2
	sta SYSTEM.SIN.@01018E000.X+2
	lda W+3
	sta SYSTEM.SIN.@01018E000.X+3
	jsr SYSTEM.SIN.@01018E000
	inx
	mva SYSTEM.SIN.@01018E000.RESULT :STACKORIGIN,x
	mva SYSTEM.SIN.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva SYSTEM.SIN.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva SYSTEM.SIN.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr @expandToREAL1
	lda :STACKORIGIN,x
	sta @REAL_MUL.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta @REAL_MUL.B+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta @REAL_MUL.B+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	jsr @REAL_ROUND
	lda :eax
	sta :STACKORIGIN,x
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05BB
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
ANGLE	= DATAORIGIN+$05BF
W	= DATAORIGIN+$05C1

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1127

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0C59
	inx
	mva #$5A :STACKORIGIN,x
	inx
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	mva (:bp2),y :STACKORIGIN,x
	iny
	mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	lda SYSTEM.ABS.@010184000.RESULT
	sta @SMALLINT.DIV.B
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta @SMALLINT.DIV.B+1
	lda :STACKORIGIN-1,x
	sta @SMALLINT.DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr mulSMALLINT
	dex
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	lda :STACKORIGIN,x
	sta W
	lda :STACKORIGIN+STACKWIDTH,x
	sta W+1
	dex
	jmp l_0C75
l_0C59

; optimize OK (service.pas), line = 1133

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta @REAL_DIV.A+1
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+2
	sty @REAL_DIV.B+3
	lda :STACKORIGIN+10
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sta @REAL_DIV.B
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sta @REAL_DIV.A+2
	sty @REAL_DIV.A+3
	lda #$00
	sta @REAL_DIV.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta @REAL_DIV.B+1
	jsr @REAL_DIV
	lda #$00
	sub :eax
	sta SYSTEM.ARCTAN.@01018E000.VALUE
	lda #$00
	sbc :eax+1
	sta SYSTEM.ARCTAN.@01018E000.VALUE+1
	lda #$00
	sbc :eax+2
	sta SYSTEM.ARCTAN.@01018E000.VALUE+2
	lda #$00
	sbc :eax+3
	sta SYSTEM.ARCTAN.@01018E000.VALUE+3
	jsr SYSTEM.ARCTAN.@01018E000
	inx
	inx
	lda #$00
	sta @REAL_MUL.B
	lda #$B4
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	lda #$00
	sta @REAL_MUL.B+3
	lda SYSTEM.ARCTAN.@01018E000.RESULT
	sta @REAL_MUL.A
	lda SYSTEM.ARCTAN.@01018E000.RESULT+1
	sta @REAL_MUL.A+1
	lda SYSTEM.ARCTAN.@01018E000.RESULT+2
	sta @REAL_MUL.A+2
	lda SYSTEM.ARCTAN.@01018E000.RESULT+3
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$24
	sta @REAL_DIV.B
	lda #$03
	sta @REAL_DIV.B+1
	lda #$00
	sta @REAL_DIV.B+2
	lda #$00
	sta @REAL_DIV.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_DIV.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_DIV.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_DIV.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_DIV.A+3
	jsr @REAL_DIV
	dex
	jsr @REAL_ROUND
	lda :eax
	sta W
	lda :eax+1
	sta W+1
	dex

; optimize OK (service.pas), line = 1136

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0C9C
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0C9C

; optimize OK (service.pas), line = 1138

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01
	sta W+1

; optimize OK (service.pas), line = 1139

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda W
	sta @SMALLINT.MOD.A
	lda W+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta W
	lda @SMALLINT.MOD.RESULT+1
	sta W+1
l_0C75

; optimize OK (service.pas), line = 1142

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05C5
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
RESULT	= DATAORIGIN+$05C9
W	= DATAORIGIN+$05CB

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1150

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	ldy #BALL.X-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1156

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1161

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1162

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1164

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1166

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1167

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05CD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$1A
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1175

	lda BALL.SPEEDX
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDX+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDX
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDX+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda BALL.SPEEDY
	sta :ecx
	sta :ztmp8
	lda BALL.SPEEDY+1
	sta :ecx+1
	sta :ztmp9
	lda BALL.SPEEDY
	sta :eax
	sta :ztmp10
	lda BALL.SPEEDY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :STACKORIGIN+9
	add :eax
	sta SYSTEM.SQRT.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta SYSTEM.SQRT.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta SYSTEM.SQRT.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta SYSTEM.SQRT.@010185000.X+3
	jsr SYSTEM.SQRT.@010185000
	inx
	lda SYSTEM.SQRT.@010185000.RESULT
	sta :FP2MAN0
	lda SYSTEM.SQRT.@010185000.RESULT+1
	sta :FP2MAN1
	lda SYSTEM.SQRT.@010185000.RESULT+2
	sta :FP2MAN2
	lda SYSTEM.SQRT.@010185000.RESULT+3
	sta :FP2MAN3
	jsr @FROUND
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	dex
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$05D1	; [27] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$05D1
BALL.Y	= DATAORIGIN+$05D3
BALL.FINEX	= DATAORIGIN+$05D5
BALL.FINEY	= DATAORIGIN+$05D7
BALL.OLDX	= DATAORIGIN+$05D9
BALL.OLDY	= DATAORIGIN+$05DB
BALL.SPEED	= DATAORIGIN+$05DD
BALL.FINESPEED	= DATAORIGIN+$05DF
BALL.SPEEDX	= DATAORIGIN+$05E1
BALL.SPEEDY	= DATAORIGIN+$05E3
BALL.SBD	= DATAORIGIN+$05E5
BALL.BRWHIT	= DATAORIGIN+$05E7
BALL.INPLAY	= DATAORIGIN+$05E8
BALL.LAUNCH	= DATAORIGIN+$05E9
BALL.ONVAUS	= DATAORIGIN+$05EA
BALL.STM	= DATAORIGIN+$05EB
RESULT	= DATAORIGIN+$05EC

@VarData	= BALL.X
@VarDataSize	= 27

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1189

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEX-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1190

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	ldy #BALL.FINEY-DATAORIGIN
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1192

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1193

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1195

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1196

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1202

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D9
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_0D58

; optimize OK (service.pas), line = 1204

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1205

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$01
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1206

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1207

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0D58

; optimize OK (service.pas), line = 1212

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0A
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0D8D

; optimize OK (service.pas), line = 1214

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1215

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1216

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1217

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0D8D

; optimize OK (service.pas), line = 1222

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$0C
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0DC2

; optimize OK (service.pas), line = 1224

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1225

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1226

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1227

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0DC2

; optimize OK (service.pas), line = 1235

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	add #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bmi @+
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0E11

; optimize OK (service.pas), line = 1239

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc (:bp2),y
	svc
	eor #$80
	jpl l_0E40
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+STACKWIDTH+11
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jcs l_0E40
@

; optimize OK (service.pas), line = 1242

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1244

	lda VAUS.LETTER
	cmp #$06
	jne l_0E64
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0E64

; optimize OK (service.pas), line = 1246

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1247

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1248

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	iny
	sub VAUS.X
	ldy #BALL.ONVAUS-DATAORIGIN
	sta (:bp2),y
l_0E64

; optimize OK (service.pas), line = 1251

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1255

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0E94

; optimize OK (service.pas), line = 1258

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1262

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1270

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1275

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0E94

; optimize OK (service.pas), line = 1281

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	sub #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_0ED5
	jeq l_0ED5

; optimize OK (service.pas), line = 1283

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1284

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM.@010180000.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc #$00
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1285

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1286

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0ED5
l_0E40
l_0E11

; optimize OK (service.pas), line = 1298

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+9
	cmp #$B9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+10
	cmp #$C9
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0F24

; optimize OK (service.pas), line = 1300

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1302

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0F24

; ------------------------------------------------------------

BALL	= DATAORIGIN+$05EE
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$05F2
Y	= DATAORIGIN+$05F4
ANGLE	= DATAORIGIN+$05F6

@VarData	= BALL
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1309

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1310

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1311

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1316

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1317

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1319

	lda #$FF
	sta VAUS.OLDX
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1320

	sta VAUS.OLDY
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1321

	lda #$00
	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1325

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1329

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1330

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1331

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1332

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1339

	lda #$D8
	sub VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	lda #$14
	sta MOUSE_X_LIMIT.MN
	lda #$00
	sta MOUSE_X_LIMIT.MN+1
	lda :STACKORIGIN+9
	sta MOUSE_X_LIMIT.MX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MOUSE_X_LIMIT.MX+1
	jsr MOUSE_X_LIMIT

; optimize OK (service.pas), line = 1340

	lda #$BE
	sta MOUSEMOVE.X
	lda #$00
	sta MOUSEMOVE.X+1
	lda #$B8
	sta MOUSEMOVE.Y
	lda #$00
	sta MOUSEMOVE.Y+1
	jsr MOUSEMOVE

; optimize OK (service.pas), line = 1341

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1342

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1356

	lda VAUS.OLDY
	sta Y
	add VAUS.HEIGHT
	sta @FORTMP_0FA4_0

l_0FA7
; --- ForToDoCondition
	lda @FORTMP_0FA4_0::#$00
	cmp Y
	jcc l_0FB5

; optimize OK (service.pas), line = 1359

	lda VAUS.OLDX
	sta :STACKORIGIN+10
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+11
	sty :STACKORIGIN+STACKWIDTH*2+11
	sty :STACKORIGIN+STACKWIDTH*3+11
	lda #$50
	add :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITROW.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta BLITROW.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITROW.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITROW.DST+3
	lda VAUS.OLDX
	sta :STACKORIGIN+12
	ldy #$00
	lda VAUS.OLDX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda PLAYSCREEN.OFS
	add :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	ldy Y
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+251,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda VAUS.OLDLEN
	sta BLITROW.SIZE
	lda VAUS.OLDLEN+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_0FA7
l_0FB5

; optimize OK (service.pas), line = 1361

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; ------------------------------------------------------------

Y	= DATAORIGIN+$05F8

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1371

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1373

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0FF9

; optimize FAIL (0, service.pas), line = 1375

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1376

	lda #$00
	sta VAUS.IFLASH
l_0FF9

; optimize OK (service.pas), line = 1379

	lda VAUS.FLASH
	cmp #$0B
	jcc l_1016
	lda #$00
	sta VAUS.FLASH
l_1016

; optimize OK (service.pas), line = 1389

	lda #$00
	sta Y
	ldy VAUS.HEIGHT
	dey
	sty @FORTMP_1029_0

l_102C
; --- ForToDoCondition
	lda @FORTMP_1029_0::#$00
	cmp Y
	jcc l_103A

; optimize OK (service.pas), line = 1393

	lda VAUS.WIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CNT+1
	lda :eax
	sta CNT

; optimize OK (service.pas), line = 1395

	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	add CNT
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	adc CNT+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.SIZE
	lda #$00
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; optimize OK (service.pas), line = 1397

	lda Y
	cmp #$02
	jcc l_1089
	lda VAUS.HEIGHT
	sbc #$02
	sta :STACKORIGIN+11
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda Y
	cmp :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	svc
	eor #$80
	jpl l_1089

; optimize OK (service.pas), line = 1400

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda Y
	add VAUS.Y
	tay
	lda VAUS.X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE

; optimize OK (service.pas), line = 1403

	ldy VAUS.FLASH
	lda adr.FLASH,y
	sta PUTBYTE.V
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$50
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sub #$01
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add VAUS.Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	jsr PUTBYTE
l_1089

; --- ForToDoEpilog
	inc Y
	jne l_102C
l_103A

; ------------------------------------------------------------

Y	= DATAORIGIN+$05FA
CNT	= DATAORIGIN+$05FB

@VarData	= Y
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1414

	ldy #1
	lda VAUS.OLDX+1
	cmp #$FF
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_1102

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1415

	jsr REMOVE_VAUS
l_1102

; optimize OK (service.pas), line = 1417

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1418

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1425

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1426

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1428

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$05FE
Y	= DATAORIGIN+$0600

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1442

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1443

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1445

	lda #$00
	sta Y

l_115A
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_1168

; optimize OK (service.pas), line = 1447

	lda YS
	adc Y
	tay
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YH
	lda :eax+1
	sta YH+1

; optimize OK (service.pas), line = 1455

	lda #$00
	sta X

l_1184
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_1192

; optimize OK (service.pas), line = 1456

	adc XS
	sta :STACKORIGIN+9
	lda #$00
	adc XS+1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_11A9

; optimize OK (service.pas), line = 1462

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add XS
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1466

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$00
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$C4
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda PATTERN.OFS
	add (:bp),y
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YH
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YH+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex

; optimize OK (service.pas), line = 1470

	lda X
	add XS
	sta :STACKORIGIN+10
	lda #$50
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1475

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add XS
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	add YS
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_11A9

; --- ForToDoEpilog
	inc X
	jne l_1184
l_1192

; --- ForToDoEpilog
	inc Y
	jne l_115A
l_1168

; optimize OK (service.pas), line = 1485

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1243_0

l_1246
; --- ForToDoCondition
	lda @FORTMP_1243_0::#$00
	cmp Y
	jcc l_1254

; optimize OK (service.pas), line = 1486

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1264_0

l_1267
; --- ForToDoCondition
	lda @FORTMP_1264_0::#$00
	cmp X
	jcc l_1275

; optimize OK (service.pas), line = 1502

	lda X
	cmp #$D8
	jcs l_1287

; optimize OK (service.pas), line = 1506

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy Y
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	ora #$80
	sta CL

; optimize OK (service.pas), line = 1510

	ldy Y
	lda X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1515

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1287

; --- ForToDoEpilog
	inc X
	jne l_1267
l_1275

; --- ForToDoEpilog
	inc Y
	jne l_1246
l_1254

; ------------------------------------------------------------

XA	= DATAORIGIN+$0602
YA	= DATAORIGIN+$0603
X	= DATAORIGIN+$0604
Y	= DATAORIGIN+$0605
XS	= DATAORIGIN+$0606
YS	= DATAORIGIN+$0608
YH	= DATAORIGIN+$060A
CL	= DATAORIGIN+$060C
SHADOW	= DATAORIGIN+$060D

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1530

	lda XA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta XS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta XS+1

; optimize OK (service.pas), line = 1531

	lda YA
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta YS
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta YS+1

; optimize OK (service.pas), line = 1533

	lda #$00
	sta Y

l_12FA
; --- ForToDoCondition
	lda Y
	cmp #$08
	jcs l_1308

; optimize OK (service.pas), line = 1534

	lda #$00
	sta X

l_1311
; --- ForToDoCondition
	lda X
	cmp #$10
	jcs l_131F

; optimize OK (service.pas), line = 1539

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda YS
	add Y
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1541

	lda Y
	cmp #$07
	jcs l_135E
	lda X
	cmp #$0F
	jcs l_135E

; optimize OK (service.pas), line = 1546

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1549

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1552

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	jmp l_13BD
l_135E

; optimize OK (service.pas), line = 1560

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1563

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda SHADOW
l_13BD
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_1311
l_131F

; --- ForToDoEpilog
	inc Y
	jne l_12FA
l_1308

; optimize OK (service.pas), line = 1568

	lda YS
	add #$04
	sta Y
	lda YS
	add #$0C
	sta @FORTMP_1411_0

l_1414
; --- ForToDoCondition
	lda @FORTMP_1411_0::#$00
	cmp Y
	jcc l_1422

; optimize OK (service.pas), line = 1569

	lda XS
	add #$08
	sta X
	lda XS
	add #$18
	sta @FORTMP_1432_0

l_1435
; --- ForToDoCondition
	lda @FORTMP_1432_0::#$00
	cmp X
	jcc l_1443

; optimize OK (service.pas), line = 1570

	lda X
	cmp #$D8
	jcs l_1455

; optimize OK (service.pas), line = 1577

	lda PLAYSCREEN.OFS
	adc X
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy Y
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$7F
	sta CL

; optimize OK (service.pas), line = 1581

	ldy Y
	lda X
	add adr.ROW,y
	sta PUTBYTE.DST
	lda #$50
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda #$00
	adc #$00
	sta PUTBYTE.DST+2
	lda #$00
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1585

	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy Y
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE
l_1455

; --- ForToDoEpilog
	inc X
	jne l_1435
l_1443

; --- ForToDoEpilog
	inc Y
	jne l_1414
l_1422

; optimize OK (service.pas), line = 1588

	lda BLOCK
	cmp #$09
	jcc l_14B1

; optimize OK (service.pas), line = 1590

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1591

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_14CC

; optimize OK (service.pas), line = 1593

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1594

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_14EB
l_14CC

; optimize OK (service.pas), line = 1600

	lda BLOCK
	cmp #$0A
	jne l_14FD
	lda #$C9
	sta CL2
l_14EB
l_14FD

; optimize OK (service.pas), line = 1604

	lda #$00
	sta Y

l_150D
; --- ForToDoCondition
	lda Y
	cmp #$07
	jcs l_151B

; optimize OK (service.pas), line = 1610

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add YS
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1612

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1616

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1620

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda YS
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_150D
l_151B

; optimize OK (service.pas), line = 1624

	lda #$00
	sta X

l_1582
; --- ForToDoCondition
	lda X
	cmp #$0F
	jcs l_1590

; optimize OK (service.pas), line = 1628

	lda PLAYSCREEN.OFS
	adc XS
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add X
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy YS
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta CL

; optimize OK (service.pas), line = 1630

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1633

	lda XS
	sta :STACKORIGIN+10
	lda #$50
	add XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YS
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 1636

	lda PLAYSCREEN.OFS
	add XS
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XS+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YS
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL2
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_1582
l_1590
l_14B1

; ------------------------------------------------------------

XA	= DATAORIGIN+$0610
YA	= DATAORIGIN+$0611
BLOCK	= DATAORIGIN+$0612
X	= DATAORIGIN+$0613
Y	= DATAORIGIN+$0614
XS	= DATAORIGIN+$0615
YS	= DATAORIGIN+$0617
CL	= DATAORIGIN+$0619
CL2	= DATAORIGIN+$061A
SHADOW	= DATAORIGIN+$061B

@VarData	= XA
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1646

	lda #$00
	sta Y

l_15FD
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_160B

; optimize OK (service.pas), line = 1647

	lda #$00
	sta X

l_1614
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_1622

; optimize OK (service.pas), line = 1648

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1641
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_1641

; --- ForToDoEpilog
	inc X
	jne l_1614
l_1622

; --- ForToDoEpilog
	inc Y
	jne l_15FD
l_160B

; ------------------------------------------------------------

X	= DATAORIGIN+$061E
Y	= DATAORIGIN+$061F

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1657

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1658

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1661

	lda #$00
	sta Y

l_167F
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_168D

; optimize OK (service.pas), line = 1662

	lda #$00
	sta X

l_1696
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_16A4

; optimize OK (service.pas), line = 1665

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_16DC
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_16DC
	inc REMAIN_BLK
l_16DC

; --- ForToDoEpilog
	inc X
	jne l_1696
l_16A4

; --- ForToDoEpilog
	inc Y
	jne l_167F
l_168D

; optimize OK (service.pas), line = 1667

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1669

	sta @CASETMP_0007
	cmp #$00
	jne l_1706
@

; optimize OK (service.pas), line = 1670

	:8 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0007
l_1706
	cmp #$01
	jne l_170F

; optimize OK (service.pas), line = 1671

	:8 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0007
l_170F
	cmp #$02
	jne l_1718

; optimize OK (service.pas), line = 1672

	:8 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0007
l_1718
	cmp #$03
	jne l_1721

; optimize OK (service.pas), line = 1673

	:8 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0007
l_1721
	cmp #$04
	jne l_172A

; optimize OK (service.pas), line = 1674

	:8 mva adr.PATTERN4+# adr.PATTERN+#
l_172A
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0620
Y	= DATAORIGIN+$0621
WL	= DATAORIGIN+$0622
@CASETMP_0007	= DATAORIGIN+$0623

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1713

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1714

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1715

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1716

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1718

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1720

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP1+1

; optimize OK (service.pas), line = 1721

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP1
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP1+1

; optimize OK (service.pas), line = 1722

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP2+1

; optimize OK (service.pas), line = 1723

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP2
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP2+1

; optimize OK (service.pas), line = 1725

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XK
	iny
	lda (:bp2),y
	sta XK+1

; optimize OK (service.pas), line = 1726

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YK
	iny
	lda (:bp2),y
	sta YK+1

; optimize OK (service.pas), line = 1727

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XJ
	iny
	lda (:bp2),y
	sta XJ+1

; optimize OK (service.pas), line = 1728

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YJ
	iny
	lda (:bp2),y
	sta YJ+1

; optimize OK (service.pas), line = 1730

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta XH
	iny
	lda (:bp2),y
	sta XH+1

; optimize OK (service.pas), line = 1731

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta YH
	iny
	lda (:bp2),y
	sta YH+1

; optimize OK (service.pas), line = 1732

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta XN
	iny
	lda (:bp2),y
	sta XN+1

; optimize OK (service.pas), line = 1733

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta YN
	iny
	lda (:bp2),y
	sta YN+1

; optimize OK (service.pas), line = 1740

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	inx
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	sty :STACKORIGIN,x
	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sta SYSTEM.ABS.@010185000.X
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta SYSTEM.ABS.@010185000.X+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta SYSTEM.ABS.@010185000.X+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta SYSTEM.ABS.@010185000.X+3
	jsr SYSTEM.ABS.@010185000
	dex
	ldy #1
	.LOCAL
	lda SYSTEM.ABS.@010185000.RESULT+3
	sub #$00
	bne L4
	lda SYSTEM.ABS.@010185000.RESULT+2
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT+1
	cmp #$00
	bne L1
	lda SYSTEM.ABS.@010185000.RESULT
	cmp #$08
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_17B3

; optimize OK (service.pas), line = 1741

	lda #$01
	jsr FATAL_ERROR
l_17B3

; optimize OK (service.pas), line = 1744

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jne l_17D6x
	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_17D6
l_17D6x

; optimize OK (service.pas), line = 1746

	lda YP1+1
	cmp YP2+1
	bne @+
	lda YP1
	cmp YP2
@
	jeq l_17E9

; optimize OK (service.pas), line = 1748

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_17F6
l_17F7

; optimize OK (service.pas), line = 1752

	lda XH
	sta :STACKORIGIN+9
	ldy #$00
	lda XH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XN
	sta :STACKORIGIN+10
	ldy #$00
	lda XN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1753

	lda YH
	sta :STACKORIGIN+9
	ldy #$00
	lda YH+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YN
	sta :STACKORIGIN+10
	ldy #$00
	lda YN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1755

	lda Y
	sta :STACKORIGIN+9
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YP
	lda :STACKORIGIN+STACKWIDTH+9
	sta YP+1

; optimize OK (service.pas), line = 1757

	cmp YP1+1
	bne @+
	lda YP
	cmp YP1
@
	jne l_182E

; optimize OK (service.pas), line = 1759

	lda X
	sta XH
	lda X+1
	sta XH+1

; optimize OK (service.pas), line = 1760

	lda Y
	sta YH
	lda Y+1
	sta YH+1
l_182E

; optimize OK (service.pas), line = 1763

	lda YP+1
	cmp YP2+1
	bne @+
	lda YP
	cmp YP2
@
	jne l_184D

; optimize OK (service.pas), line = 1765

	lda X
	sta XN
	lda X+1
	sta XN+1

; optimize OK (service.pas), line = 1766

	lda Y
	sta YN
	lda Y+1
	sta YN+1
l_184D
l_17F6

; optimize OK (service.pas), line = 1750

	lda YN
	and #$07
	jeq l_17F7w
	lda YN
	and #$07
	cmp #$07
	jne l_17F7
l_17F7w
l_17E9

; optimize OK (service.pas), line = 1772

	lda XP1+1
	cmp XP2+1
	bne @+
	lda XP1
	cmp XP2
@
	jeq l_188C

; optimize OK (service.pas), line = 1774

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_1899
l_189A

; optimize OK (service.pas), line = 1778

	lda XK
	sta :STACKORIGIN+9
	ldy #$00
	lda XK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda XJ
	sta :STACKORIGIN+10
	ldy #$00
	lda XJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 1779

	lda YK
	sta :STACKORIGIN+9
	ldy #$00
	lda YK+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda YJ
	sta :STACKORIGIN+10
	ldy #$00
	lda YJ+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y+1

; optimize OK (service.pas), line = 1781

	lda X
	sta :STACKORIGIN+9
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XP
	lda :STACKORIGIN+STACKWIDTH+9
	sta XP+1

; optimize OK (service.pas), line = 1783

	cmp XP1+1
	bne @+
	lda XP
	cmp XP1
@
	jne l_18D1

; optimize OK (service.pas), line = 1785

	lda X
	sta XK
	lda X+1
	sta XK+1

; optimize OK (service.pas), line = 1786

	lda Y
	sta YK
	lda Y+1
	sta YK+1
l_18D1

; optimize OK (service.pas), line = 1789

	lda XP+1
	cmp XP2+1
	bne @+
	lda XP
	cmp XP2
@
	jne l_18F0

; optimize OK (service.pas), line = 1791

	lda X
	sta XJ
	lda X+1
	sta XJ+1

; optimize OK (service.pas), line = 1792

	lda Y
	sta YJ
	lda Y+1
	sta YJ+1
l_18F0
l_1899

; optimize OK (service.pas), line = 1776

	lda XJ
	and #$0F
	jeq l_189Aw
	lda XJ
	and #$0F
	cmp #$0F
	jne l_189A
l_189Aw
l_188C

; optimize OK (service.pas), line = 1803

	lda COLLISION
	cmp #$01
	jne l_192F
; optimize OK (service.pas), line = 1805
; optimize OK (service.pas), line = 1806
	jmp l_1943
l_192F

; optimize OK (service.pas), line = 1808

	lda COLLISION
	cmp #$02
	jne l_1955

; optimize OK (service.pas), line = 1810

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1811

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	jmp l_1969
l_1955

; optimize OK (service.pas), line = 1813

	lda COLLISION
	cmp #$03
	jne l_197B

; optimize OK (service.pas), line = 1815

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda XJ+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1816

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda YJ+1
	sta (:bp2),y
l_1943

; optimize OK (service.pas), line = 1817

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda XN+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1818

	mwy Y2 :bp2
	ldy #$00
	lda YN
	sta (:bp2),y
	iny
	lda YN+1
l_1969
	sta (:bp2),y
l_197B
	jmp l_199B
l_17D6

; optimize OK (service.pas), line = 1823

	lda #$02
	jsr FATAL_ERROR
l_199B

; optimize OK (service.pas), line = 1826

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1827

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1828

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1829

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1832

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1833

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1840

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0624
Y1	= DATAORIGIN+$0626
X2	= DATAORIGIN+$0628
Y2	= DATAORIGIN+$062A
RESULT	= DATAORIGIN+$062C
X	= DATAORIGIN+$062D
Y	= DATAORIGIN+$062F
XK	= DATAORIGIN+$0631
YK	= DATAORIGIN+$0633
XJ	= DATAORIGIN+$0635
YJ	= DATAORIGIN+$0637
XH	= DATAORIGIN+$0639
YH	= DATAORIGIN+$063B
XN	= DATAORIGIN+$063D
YN	= DATAORIGIN+$063F
XP1	= DATAORIGIN+$0641
YP1	= DATAORIGIN+$0643
XP2	= DATAORIGIN+$0645
YP2	= DATAORIGIN+$0647
XP	= DATAORIGIN+$0649
YP	= DATAORIGIN+$064B
COLLISION	= DATAORIGIN+$064D

@VarData	= X1
@VarDataSize	= 41

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1851

	lda XB+1
	jmi l_19EF
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_19EF
	lda YB+1
	jmi l_19EF
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_19EF

; optimize OK (service.pas), line = 1854

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1856

	tay
	lda adr.WALL,y
	jeq l_1A13

; optimize OK (service.pas), line = 1858

	cmp #$0A
	jcs l_1A29

; optimize OK (service.pas), line = 1860

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1861

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1865

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1867

	lda #$2C
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$01
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda LETT.INCOMING
	add SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 1869

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	rol :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$09
	sta LETT.NEXTX
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTX+1

; optimize OK (service.pas), line = 1870

	lda YB
	sta :STACKORIGIN+9
	ldy #$00
	lda YB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$01
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta LETT.NEXTY+1

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1871

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 1873

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1874

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1875

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1876

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_1A7D
l_1A29

; optimize OK (service.pas), line = 1881

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1A96

; optimize OK (service.pas), line = 1883

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1884

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1886

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1887

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1AB0
l_1A96

; optimize OK (service.pas), line = 1891

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1892

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1894

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1AB0
l_1A7D
l_1A13
l_19EF

; ------------------------------------------------------------

XB	= DATAORIGIN+$064E
YB	= DATAORIGIN+$0650
BALL	= DATAORIGIN+$0652
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
I	= DATAORIGIN+$0656

@VarData	= XB
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 1905

	lda XB+1
	jmi l_1AF3
	lda XB
	cmp #$0D
	lda XB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1AF3
	lda YB+1
	jmi l_1AF3
	lda YB
	cmp #$0F
	lda YB+1
	sbc #$00
	svc
	eor #$80
	jpl l_1AF3

; optimize OK (service.pas), line = 1908

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1910

	tay
	lda adr.WALL,y
	jeq l_1B17

; optimize OK (service.pas), line = 1912

	cmp #$0A
	jcs l_1B2D

; optimize OK (service.pas), line = 1914

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 1915

	dec REMAIN_BLK

; optimize OK (service.pas), line = 1916

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 1917

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 1918

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1B55
l_1B2D

; optimize OK (service.pas), line = 1923

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_1B6E

; optimize OK (service.pas), line = 1925

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 1926

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1927

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_1B84
l_1B6E

; optimize OK (service.pas), line = 1931

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 1932

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1B55
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_1B84
l_1B17
l_1AF3

; ------------------------------------------------------------

XB	= DATAORIGIN+$0657
YB	= DATAORIGIN+$0659
I	= DATAORIGIN+$065B

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1964

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 1966

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 1967

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 1970

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 1971

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 1973

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta XB
	lda :STACKORIGIN+STACKWIDTH+9
	sta XB+1

; optimize OK (service.pas), line = 1974

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sta YB+1

; optimize OK (service.pas), line = 1978

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_1BEB

; optimize OK (service.pas), line = 1980

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 1986

	cmp #$03
	jne l_1C06

; optimize OK (service.pas), line = 1988

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 1989

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 1991

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 1992

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 1994

	lda LX
	sta :ecx
	sta :eax
	lda LX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LY
	sta :ecx
	sta :eax
	lda LY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F1
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F1+1

; optimize OK (service.pas), line = 1995

	lda MX
	sta :ecx
	sta :eax
	lda MX+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MY
	sta :ecx
	sta :eax
	lda MY+1
	sta :ecx+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta F2
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta F2+1

; optimize OK (service.pas), line = 1997

	lda F1
	cmp F2
	lda F1+1
	sbc F2+1
	svc
	eor #$80
	jpl l_1C79

; optimize OK (service.pas), line = 2003

	lda OX
	sta :STACKORIGIN+10
	ldy #$00
	lda OX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda :STACKORIGIN+10
	sta MAX.A
	lda :STACKORIGIN+STACKWIDTH+10
	sta MAX.A+1
	lda #$00
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 2004

	lda OY
	sta :STACKORIGIN+9
	ldy #$00
	lda OY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (service.pas), line = 2007

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1CB5

; optimize OK (service.pas), line = 2009

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 2010

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
	jmp l_1CDD
l_1CB5

; optimize OK (service.pas), line = 2014

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2015

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1CDD
	jmp l_1CF0
l_1C79

; optimize OK (service.pas), line = 2025

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 2026

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1

; optimize OK (service.pas), line = 2028

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1D2B

; optimize OK (service.pas), line = 2030

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2031

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2033

	lda NX
	sta :STACKORIGIN+9
	ldy #$00
	lda NX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda :STACKORIGIN+9
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH+9
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB
	lda MIN.RESULT+1
	sta XB+1

; optimize OK (service.pas), line = 2034

	lda NY
	sta :STACKORIGIN+9
	ldy #$00
	lda NY+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add #$18
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sub #$03
	sta YB
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta YB+1
l_1D2B
l_1CF0
l_1C06

; optimize OK (service.pas), line = 2040

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2041

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2045

	lda XB
	sta SHOOT_BLOCK.XB
	lda XB+1
	sta SHOOT_BLOCK.XB+1
	lda YB
	sta SHOOT_BLOCK.YB
	lda YB+1
	sta SHOOT_BLOCK.YB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2047

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X
	lda :STACKORIGIN+STACKWIDTH+9
	sta X+1

; optimize OK (service.pas), line = 2048

	lda NY
	and #$07
	sta Y
	lda #$00
	sta Y+1

; optimize OK (service.pas), line = 2060

	lda X+1
	ora X
	jeq l_1DB9
	lda X+1
	bne @+
	lda X
	cmp #$07
@
	jeq l_1DB9
	lda Y+1
	ora Y
	jeq l_1DB9
@
	lda Y+1
	bne @+
	lda Y
	cmp #$07
@
	jeq l_1DB9

; optimize OK (service.pas), line = 2061

	lda #$03
	jsr FATAL_ERROR
l_1DB9

; optimize OK (service.pas), line = 2076

	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1DE0
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1DE0

; optimize OK (service.pas), line = 2078

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2079

	lda #$01
	sta EMERGENCY
l_1DE0

; optimize OK (service.pas), line = 2083

	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1E11
	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1E11

; optimize OK (service.pas), line = 2085

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2086

	lda #$03
	sta EMERGENCY
l_1E11

; optimize OK (service.pas), line = 2090

	lda X
	cmp Y
	lda X+1
	sbc Y+1
	svc
	eor #$80
	jpl l_1E42
	lda X
	sta :STACKORIGIN+12
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub :STACKORIGIN+STACKWIDTH*3+11
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne L1
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1E42

; optimize OK (service.pas), line = 2092

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2093

	lda #$02
	sta EMERGENCY
l_1E42

; optimize OK (service.pas), line = 2097

	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda #$07
	sub :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	sta :STACKORIGIN+10
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_1E73
	lda Y
	cmp X
	lda Y+1
	sbc X+1
	svc
	eor #$80
	jpl l_1E73

; optimize OK (service.pas), line = 2099

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 2100

	lda #$04
	sta EMERGENCY
l_1E73

; optimize OK (service.pas), line = 2104

	lda X+1
	cmp Y+1
	bne @+
	lda X
	cmp Y
@
	jeq l_1EA4x
	lda Y
	sta :STACKORIGIN+12
	ldy #$00
	lda Y+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+12
	sty :STACKORIGIN+STACKWIDTH*2+12
	sty :STACKORIGIN+STACKWIDTH*3+12
	lda #$07
	sub :STACKORIGIN+12
	sta :STACKORIGIN+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+12
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+12
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda X
	sta :STACKORIGIN+10
	ldy #$00
	lda X+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	cmp :STACKORIGIN+STACKWIDTH*3+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp :STACKORIGIN+STACKWIDTH*2+11
	bne @+
	lda :STACKORIGIN+STACKWIDTH+10
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
@
	jne l_1EA4
l_1EA4x

; optimize OK (service.pas), line = 2106

	lda #$00
	sta DEFLECT
	sta DEFLECT+1

; optimize OK (service.pas), line = 2107

	sta TOUCH

; optimize OK (service.pas), line = 2115

	lda X
	cmp #$05
	lda X+1
	sbc #$00
	svc
	eor #$80
	jmi l_1EBE
	lda TOUCH
	ora #$01
	sta TOUCH
l_1EBE

; optimize OK (service.pas), line = 2116

	lda Y
	cmp #$05
	lda Y+1
	sbc #$00
	svc
	eor #$80
	jmi l_1EDC
	lda TOUCH
	ora #$02
	sta TOUCH
l_1EDC

; optimize OK (service.pas), line = 2126

	lda #$FF
	sta LX
	sta LX+1

l_1EF2
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1EFE

; optimize OK (service.pas), line = 2127

	lda #$FF
	sta LY
	sta LY+1

l_1F07
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1F13

; optimize FAIL (1, service.pas), line = 2129

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda XB
	add LX
	sta MIN.A
	lda XB+1
	adc LX+1
	sta MIN.A+1
	lda :STACKORIGIN,x
	sta MIN.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2130

	lda YB
	add LY
	sta MY
	lda YB+1
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2134

	lda XB
	sta :STACKORIGIN+9
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	lda LX
	sta :STACKORIGIN+10
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	jne l_1F68x
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*3+9
	jmi l_1F68x
	lda XB
	sta :STACKORIGIN+10
	ldy #$00
	lda XB+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda LX
	sta :STACKORIGIN+11
	ldy #$00
	lda LX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+11
	sty :STACKORIGIN+STACKWIDTH*2+11
	sty :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+10
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+10
	cmp #$00
	bne L1
	lda :STACKORIGIN+10
	cmp #$0C
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	seq
	bpl @+
	jmp *+6
@	jmp l_1F68x
	lda #$10
	sta :ecx
	sta :ztmp8
	lda #$00
	sta :ecx+1
	sta :ztmp9
	lda MY
	sta :eax
	sta :ztmp10
	lda MY+1
	sta :eax+1
	sta :ztmp11
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :ztmp11
	bpl @+
	lda :eax+2
	sub :ztmp8
	sta :eax+2
	lda :eax+3
	sbc :ztmp9
	sta :eax+3
@
	lda :ztmp9
	bpl @+
	lda :eax+2
	sub :ztmp10
	sta :eax+2
	lda :eax+3
	sbc :ztmp11
	sta :eax+3
@
	lda :eax
	sta :STACKORIGIN+11
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda MX
	sta :STACKORIGIN+10
	ldy #$00
	lda MX+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.WALL,y
	jeq l_1F68
@
l_1F68x

; optimize OK (service.pas), line = 2137

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$01
	sta adr.ADJW,y
	lda #$00
	jmp l_1F89
l_1F68

; optimize OK (service.pas), line = 2139

	lda LX
	add #$01
	sta :eax
	lda LX+1
	adc #$00
	sta :eax+1
	lda #$06
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda LY
	add #$01
	sta :STACKORIGIN+10
	lda LY+1
	adc #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :eax
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	lda #$00
	sta adr.ADJW,y
l_1F89
	sta adr.ADJW+1,y

; --- ForToDoEpilog
	inc LY
	jne l_1F07
	inc LY+1
	jmp l_1F07
l_1F13

; --- ForToDoEpilog
	inc LX
	jne l_1EF2
	inc LX+1
	jmp l_1EF2
l_1EFE

; optimize OK (service.pas), line = 2158

	lda adr.ADJW
	sta :STACKORIGIN+9
	lda adr.ADJW+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$06
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$06
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0C
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0C
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0E
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0E
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$10
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$10
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$0A
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$0A
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$04
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$04
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.ADJW+$02
	sta :STACKORIGIN+10
	lda adr.ADJW+1+$02
	sta :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	asl :STACKORIGIN+10
	rol :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta AROUND
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta AROUND+1

; optimize OK (service.pas), line = 2189

	lda TOUCH
	jne l_2028

; optimize OK (service.pas), line = 2191

	lda AROUND
	and #$83
	jne l_203E
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_203E

; optimize OK (service.pas), line = 2192

	lda AROUND
	and #$83
	cmp #$01
	jne l_205A
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_205A

; optimize OK (service.pas), line = 2193

	lda AROUND
	and #$83
	cmp #$02
	jne l_2076
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2076

; optimize OK (service.pas), line = 2194

	lda AROUND
	and #$83
	cmp #$03
	jne l_2092
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2092

; optimize OK (service.pas), line = 2195

	lda AROUND
	and #$83
	cmp #$80
	jne l_20AE
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20AE

; optimize OK (service.pas), line = 2196

	lda AROUND
	and #$83
	cmp #$81
	jne l_20CA
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20CA

; optimize OK (service.pas), line = 2197

	lda AROUND
	and #$83
	cmp #$82
	jne l_20E6
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_20E6

; optimize OK (service.pas), line = 2199

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2200

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2028

; optimize OK (service.pas), line = 2205

	lda TOUCH
	cmp #$01
	jne l_2114

; optimize OK (service.pas), line = 2207

	lda AROUND
	and #$0E
	jne l_212A
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_212A

; optimize OK (service.pas), line = 2208

	lda AROUND
	and #$0E
	cmp #$02
	jne l_2146
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2146

; optimize OK (service.pas), line = 2209

	lda AROUND
	and #$0E
	cmp #$04
	jne l_2162
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2162

; optimize OK (service.pas), line = 2210

	lda AROUND
	and #$0E
	cmp #$06
	jne l_217E
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_217E

; optimize OK (service.pas), line = 2211

	lda AROUND
	and #$0E
	cmp #$08
	jne l_219A
	lda #$01
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_219A

; optimize OK (service.pas), line = 2212

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_21B6
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_21B6

; optimize OK (service.pas), line = 2213

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_21D2
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_21D2

; optimize OK (service.pas), line = 2215

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2216

	lda YB
	sub #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	sbc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2114

; optimize OK (service.pas), line = 2219

	lda TOUCH
	cmp #$02
	jne l_2200

; optimize OK (service.pas), line = 2221

	lda AROUND
	and #$E0
	jne l_2216
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2216

; optimize OK (service.pas), line = 2222

	lda AROUND
	and #$E0
	cmp #$20
	jne l_2232
	lda #$10
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2232

; optimize OK (service.pas), line = 2223

	lda AROUND
	and #$E0
	cmp #$40
	jne l_224E
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_224E

; optimize OK (service.pas), line = 2224

	lda AROUND
	and #$E0
	cmp #$60
	jne l_226A
	lda #$11
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_226A

; optimize OK (service.pas), line = 2225

	lda AROUND
	and #$E0
	cmp #$80
	jne l_2286
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2286

; optimize OK (service.pas), line = 2226

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_22A2
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_22A2

; optimize OK (service.pas), line = 2227

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_22BE
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_22BE

; optimize OK (service.pas), line = 2229

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2230

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	sub #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	sbc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_2200

; optimize OK (service.pas), line = 2233

	lda TOUCH
	cmp #$03
	jne l_22EC

; optimize OK (service.pas), line = 2235

	lda AROUND
	and #$38
	jne l_2302
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2302

; optimize OK (service.pas), line = 2236

	lda AROUND
	and #$38
	cmp #$08
	jne l_231E
	lda #$02
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_231E

; optimize OK (service.pas), line = 2237

	lda AROUND
	and #$38
	cmp #$10
	jne l_233A
	lda #$33
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_233A

; optimize OK (service.pas), line = 2238

	lda AROUND
	and #$38
	cmp #$18
	jne l_2356
	lda #$12
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2356

; optimize OK (service.pas), line = 2239

	lda AROUND
	and #$38
	cmp #$20
	jne l_2372
	lda #$20
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_2372

; optimize OK (service.pas), line = 2240

	lda AROUND
	and #$38
	cmp #$28
	jne l_238E
	lda #$22
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_238E

; optimize OK (service.pas), line = 2241

	lda AROUND
	and #$38
	cmp #$30
	jne l_23AA
	lda #$21
	sta DEFLECT
	lda #$00
	sta DEFLECT+1
l_23AA

; optimize OK (service.pas), line = 2243

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2244

	lda YB
	add #$01
	sta SHOOT_BLOCK.YB
	lda YB+1
	adc #$00
	sta SHOOT_BLOCK.YB+1
	lda XB
	add #$01
	sta SHOOT_BLOCK.XB
	lda XB+1
	adc #$00
	sta SHOOT_BLOCK.XB+1
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_22EC

; optimize OK (service.pas), line = 2250

	lda DEFLECT
	sta :STACKORIGIN+9
	ldy #$00
	lda DEFLECT+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta MYX
	lda :STACKORIGIN+STACKWIDTH+9
	sta MYX+1

; optimize OK (service.pas), line = 2251

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2253

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_23E9
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_23E9

; optimize OK (service.pas), line = 2254

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_2406
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2406

; optimize OK (service.pas), line = 2255

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_2420
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_2420

; optimize OK (service.pas), line = 2257

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_243C
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	inx
	mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
	mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sub :STACKORIGIN,x
	sta :STACKORIGIN,x
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2,x
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3,x
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN,x
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH,x
	sta (:bp2),y
	dex
l_243C

; optimize OK (service.pas), line = 2258

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2459
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SYSTEM.ABS.@010184000.RESULT
	sta (:bp2),y
	iny
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta (:bp2),y
l_2459

; optimize OK (service.pas), line = 2259

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_2473
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_2473
l_1EA4
l_1BEB

; optimize OK (service.pas), line = 2269

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_2494

; optimize OK (service.pas), line = 2272

	lda EMERGENCY
	cmp #$FF
	jne l_24A7
	lda #$04
	jsr FATAL_ERROR
l_24A7

; optimize OK (service.pas), line = 2274

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX
	lda #$00
	sta MIMAX+1

; optimize OK (service.pas), line = 2300

	lda EMERGENCY
	sta @CASETMP_0008
	cmp #$05
	jne l_24C0
@

; optimize OK (service.pas), line = 2303

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_24D6
	lda MIMAX
	and #$0F
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_24D6

; optimize OK (service.pas), line = 2304

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_24FC
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_24FC
	jmp a_0008
l_24C0
	cmp #$06
	jne l_2513

; optimize OK (service.pas), line = 2308

	lda adr.ADJW+$02
	ora adr.ADJW+1+$02
	jne l_2529
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_2529

; optimize OK (service.pas), line = 2309

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_254F
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_254F
	jmp a_0008
l_2513
	cmp #$07
	jne l_2566

; optimize OK (service.pas), line = 2313

	lda adr.ADJW+$0A
	ora adr.ADJW+1+$0A
	jne l_257C
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_257C

; optimize OK (service.pas), line = 2314

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_25A2
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_25A2
	jmp a_0008
l_2566
	cmp #$08
	jne l_25B9

; optimize OK (service.pas), line = 2318

	lda adr.ADJW+$0E
	ora adr.ADJW+1+$0E
	jne l_25CF
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_25CF

; optimize OK (service.pas), line = 2319

	lda adr.ADJW+$06
	ora adr.ADJW+1+$06
	jne l_25F5
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
	lda #$00
	sta MIMAX+1
l_25F5
l_25B9
a_0008

; --- RepeatUntilProlog
l_260C

; optimize OK (service.pas), line = 2326

	lda MIMAX
	sta :STACKORIGIN+10
	lda MIMAX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda :STACKORIGIN+10
	sta :eax
	lda :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta LX
	lda :eax+1
	sta LX+1

; optimize OK (service.pas), line = 2327

	lda MIMAX
	and #$0F
	sta :eax
	lda #$00
	sta :eax+1
	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta MX
	lda :eax+1
	sta MX+1

; optimize OK (service.pas), line = 2328

	lda MX
	sub LX
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda MX+1
	sbc LX+1
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	add LX
	sta ANGLE
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2331

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_260C
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_260C

; optimize OK (service.pas), line = 2335

	lda #$68
	sta @SMALLINT.MOD.B
	lda #$01
	sta @SMALLINT.MOD.B+1
	lda ANGLE
	sta @SMALLINT.MOD.A
	lda ANGLE+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda @SMALLINT.MOD.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2336

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2338

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_2494

; ------------------------------------------------------------

BALL	= DATAORIGIN+$065C
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$0660
Y	= DATAORIGIN+$0662
XB	= DATAORIGIN+$0664
YB	= DATAORIGIN+$0666
OX	= DATAORIGIN+$0668
OY	= DATAORIGIN+$066A
LX	= DATAORIGIN+$066C
LY	= DATAORIGIN+$066E
MX	= DATAORIGIN+$0670
MY	= DATAORIGIN+$0672
NX	= DATAORIGIN+$0674
NY	= DATAORIGIN+$0676
F1	= DATAORIGIN+$0678
F2	= DATAORIGIN+$067A
DEFLECT	= DATAORIGIN+$067C
AROUND	= DATAORIGIN+$067E
MIMAX	= DATAORIGIN+$0680
ANGLE	= DATAORIGIN+$0682
MYX	= DATAORIGIN+$0684
MYY	= DATAORIGIN+$0686
EMERGENCY	= DATAORIGIN+$0688
COLLISION	= DATAORIGIN+$0689
TOUCH	= DATAORIGIN+$068A
adr.ADJW	= [DATAORIGIN+$068B] .array [3] [3] .word
.var ADJW	= adr.ADJW .word
@CASETMP_0008	= DATAORIGIN+$069D

@VarData	= BALL
@VarDataSize	= 52

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2353

	lda #$00
	sta K
	sta K+1

l_2676
; --- ForToDoCondition
	lda K+1
	cmp #$01
	bcc @+
	jne l_2682
	lda K
	cmp #$3F
	bcc @+
	jne l_2682
@

; optimize OK (service.pas), line = 2354

	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda K
	sta @WORD.MOD.A
	lda K+1
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	sta :STACKORIGIN+10
	ldy K
	lda #$C4
	add K+1
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y

; --- ForToDoEpilog
	inc K
	jne l_2676
	inc K+1
	jne l_2676
l_2682

; optimize OK (service.pas), line = 2358

	lda #$00
	sta Y

l_269C
; --- ForToDoCondition
	lda Y
	cmp #$C8
	jcs l_26AA

; optimize OK (service.pas), line = 2359

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	inc Y
	jne l_269C
l_26AA

; optimize OK (service.pas), line = 2364

	lda #$0A
	sta Y

l_26C6
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_26D4

; optimize OK (service.pas), line = 2366

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2367

	lda #$00
	sta K
	sta K+1

; optimize OK (service.pas), line = 2368

	lda #$09
	sta X

l_26EF
; --- ForToDoCondition
	lda X
	cmp #$D8
	jcs l_26FD

; optimize OK (service.pas), line = 2371

	mwy PATT :bp2
	ldy #PATT.OFS-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy X
	lda :STACKORIGIN+9
	add $C400,y
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YB
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YB+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL

; optimize OK (service.pas), line = 2373

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2378

	lda Y
	cmp #$10
	jcc l_2732x
	lda X
	cmp #$12
	jcs l_2732
l_2732x
	lda #$00
	sta SHADOW
l_2732

; optimize OK (service.pas), line = 2383

	lda CL
	and #$7F
	ora SHADOW
	ldy K
	sta adr.TMP,y

; optimize FAIL (0, service.pas), line = 2384

	inc K
	sne
	inc K+1

; --- ForToDoEpilog
	inc X
	jne l_26EF
l_26FD

; optimize OK (service.pas), line = 2387

	lda PLAYSCREEN.OFS
	add #$09
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	jsr @mul320
	lda :STACKORIGIN+10
	add :eax
	sta BLITTMP.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc :eax+1
	sta BLITTMP.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc :eax+2
	sta BLITTMP.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc :eax+3
	sta BLITTMP.DST+3
	lda K
	sta BLITTMP.SIZE
	jsr BLITTMP

; --- ForToDoEpilog
	inc Y
	jne l_26C6
l_26D4

; ------------------------------------------------------------

PATT	= DATAORIGIN+$069E
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0004
YB	= DATAORIGIN+$06A2
K	= DATAORIGIN+$06A4
X	= DATAORIGIN+$06A6
Y	= DATAORIGIN+$06A7
CL	= DATAORIGIN+$06A8
SHADOW	= DATAORIGIN+$06A9

@VarData	= PATT
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$06AA
Y	= DATAORIGIN+$06AC

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2502

	lda #$81
	sta Y

l_2780
; --- ForToDoCondition
	ldy Y
	cpy #$A1
	jcs l_278E

; optimize OK (service.pas), line = 2505

	lda #$48
	adc adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$48
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+251,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$58
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2780
l_278E

; ------------------------------------------------------------

Y	= DATAORIGIN+$06AE

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$06AF
Y	= DATAORIGIN+$06B1
adr.SC	= [DATAORIGIN+$06B3] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2549

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2550

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2552

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2554

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2555

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; optimize OK (service.pas), line = 2558

	lda #$00
	sta W

l_27DE
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_27EC

; optimize OK (service.pas), line = 2560

	lda #$00
	sta Y

l_27F5
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2803

; optimize OK (service.pas), line = 2562

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2563

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_2828_0

l_282B
; --- ForToDoCondition
	lda @FORTMP_2828_0::#$00
	cmp X
	jcc l_2839

; optimize FAIL (1, service.pas), line = 2567

	inx
	ldy #1
	lda W
	cmp #$06
	beq @+
	dey
@
	sty :STACKORIGIN,x
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+9
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_2861

; optimize OK (service.pas), line = 2569

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	jmp l_289E
l_2861

; optimize OK (service.pas), line = 2572

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda EXPLOSION.OFS
	add X
	sta :STACKORIGIN+10
	lda EXPLOSION.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda EXPLOSION.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda EXPLOSION.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_289E
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_282B
l_2839

; --- ForToDoEpilog
	inc Y
	jne l_27F5
l_2803

; optimize OK (service.pas), line = 2576

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_27DE
l_27EC

; optimize OK (service.pas), line = 2580

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2581

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2582

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$06C8
A	= DATAORIGIN+$06CA
B	= DATAORIGIN+$06CC
W	= DATAORIGIN+$06CE
X	= DATAORIGIN+$06CF
Y	= DATAORIGIN+$06D0

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2593

	jsr NOSOUND

; optimize OK (service.pas), line = 2594

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2595

	lda #$B3
	sta B
	lda #$00
	sta B+1

; optimize OK (service.pas), line = 2597

	lda #$0B
	sta W

l_28F2
; --- ForToDoCondition
	lda #$00
	sta Y

l_2909
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_2917

; optimize OK (service.pas), line = 2601

	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2602

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_293C_0

l_293F
; --- ForToDoCondition
	lda @FORTMP_293C_0::#$00
	cmp X
	jcc l_294D

; optimize OK (service.pas), line = 2604

	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add Z
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc Z+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	jne l_2969

; optimize OK (service.pas), line = 2606

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda PLAYSCREEN.OFS
	add X
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	jmp l_29A6
l_2969

; optimize OK (service.pas), line = 2609

	lda X
	add A
	sta :STACKORIGIN+9
	lda #$50
	adc A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda Y
	add B
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta BLITBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta BLITBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta BLITBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta BLITBYTE.DST+3
	lda NEWVAUS.OFS
	add X
	sta :STACKORIGIN+10
	lda NEWVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda NEWVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda NEWVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add Z
	sta BLITBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+10
	adc Z+1
l_29A6
	sta BLITBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta BLITBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta BLITBYTE.SRC+3
	jsr BLITBYTE

; --- ForToDoEpilog
	inc X
	jne l_293F
l_294D

; --- ForToDoEpilog
	inc Y
	jne l_2909
l_2917

; optimize OK (service.pas), line = 2613

	lda #$01
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; --- ForToDoEpilog
	dec W
	jpl l_28F2
l_2900

; ------------------------------------------------------------

X	= DATAORIGIN+$06D2
Y	= DATAORIGIN+$06D3
W	= DATAORIGIN+$06D4
Z	= DATAORIGIN+$06D5
A	= DATAORIGIN+$06D7
B	= DATAORIGIN+$06D9

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_DIGIT					; PROCEDURE

; optimize OK (service.pas), line = 2623

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2647

	ldy NUM
	lda adr.DIGITS,y
	and #$01
	cmp #$01
	jne l_29FD
	lda #$DF
	sta A
l_29FD

; optimize OK (service.pas), line = 2648

	lda #$01
	sta X

l_2A0D
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2A1B

; optimize OK (service.pas), line = 2650

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2A0D
l_2A1B

; optimize OK (service.pas), line = 2654

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2655

	ldy NUM
	lda adr.DIGITS,y
	and #$02
	cmp #$02
	jne l_2A53
	lda #$DF
	sta A
l_2A53

; optimize OK (service.pas), line = 2656

	lda #$01
	sta X

l_2A63
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2A71

; optimize OK (service.pas), line = 2658

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2A63
l_2A71

; optimize OK (service.pas), line = 2662

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2663

	ldy NUM
	lda adr.DIGITS,y
	and #$04
	cmp #$04
	jne l_2AAD
	lda #$DF
	sta A
l_2AAD

; optimize OK (service.pas), line = 2664

	lda #$01
	sta X

l_2ABD
; --- ForToDoCondition
	lda X
	cmp #$05
	jcs l_2ACB

; optimize OK (service.pas), line = 2666

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	add X
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy PY
	lda :STACKORIGIN+10
	add adr.ROW+$0A,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251+$0A,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2ABD
l_2ACB

; optimize OK (service.pas), line = 2669

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2670

	ldy NUM
	lda adr.DIGITS,y
	and #$08
	cmp #$08
	jne l_2B07
	lda #$DF
	sta A
l_2B07

; optimize OK (service.pas), line = 2671

	lda #$01
	sta Y

l_2B17
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2B25

; optimize OK (service.pas), line = 2673

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2B17
l_2B25

; optimize OK (service.pas), line = 2676

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2677

	ldy NUM
	lda adr.DIGITS,y
	and #$10
	cmp #$10
	jne l_2B5D
	lda #$DF
	sta A
l_2B5D

; optimize OK (service.pas), line = 2678

	lda #$01
	sta Y

l_2B6D
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2B7B

; optimize OK (service.pas), line = 2680

	lda PX
	sta :STACKORIGIN+10
	lda #$50
	add PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2B6D
l_2B7B

; optimize OK (service.pas), line = 2683

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2684

	ldy NUM
	lda adr.DIGITS,y
	and #$20
	cmp #$20
	jne l_2BB7
	lda #$DF
	sta A
l_2BB7

; optimize OK (service.pas), line = 2685

	lda #$01
	sta Y

l_2BC7
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2BD5

; optimize OK (service.pas), line = 2687

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2BC7
l_2BD5

; optimize OK (service.pas), line = 2690

	lda #$DE
	sta A

; optimize OK (service.pas), line = 2691

	ldy NUM
	lda adr.DIGITS,y
	and #$40
	cmp #$40
	jne l_2C11
	lda #$DF
	sta A
l_2C11

; optimize OK (service.pas), line = 2692

	lda #$01
	sta Y

l_2C21
; --- ForToDoCondition
	lda Y
	cmp #$05
	jcs l_2C2F

; optimize OK (service.pas), line = 2694

	lda #$05
	adc PX
	sta :STACKORIGIN+10
	lda #$50
	adc PX+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda PY
	add Y
	tay
	lda :STACKORIGIN+10
	add adr.ROW+$05,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251+$05,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda A
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc Y
	jne l_2C21
l_2C2F

; ------------------------------------------------------------

PX	= DATAORIGIN+$06DC
PY	= DATAORIGIN+$06DE
NUM	= DATAORIGIN+$06E0
X	= DATAORIGIN+$06E2
Y	= DATAORIGIN+$06E3
A	= DATAORIGIN+$06E4

@VarData	= PX
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

; optimize OK (service.pas), line = 2705

	lda #$00
	sta F

; optimize OK (service.pas), line = 2710

	lda #$A0
	sta @INTEGER.DIV.B
	lda #$86
	sta @INTEGER.DIV.B+1
	lda #$01
	sta @INTEGER.DIV.B+2
	lda #$00
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2711

	jmi l_2C77
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2C77
	lda #$01
	sta F
l_2C77

; optimize OK (service.pas), line = 2712

	lda F
	jeq l_2C8A
	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2C9A
l_2C8A

; optimize OK (service.pas), line = 2713

	lda PX
	sta PUT_DIGIT.PX
	lda PX+1
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2C9A
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2716

	lda #$10
	sta @INTEGER.DIV.B
	lda #$27
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2717

	jmi l_2CBC
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2CBC
	lda #$01
	sta F
l_2CBC

; optimize OK (service.pas), line = 2718

	lda F
	jeq l_2CCF
	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2CE3
l_2CCF

; optimize OK (service.pas), line = 2719

	lda PX
	add #$07
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2CE3
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2722

	lda #$E8
	sta @INTEGER.DIV.B
	lda #$03
	sta @INTEGER.DIV.B+1
	lda #$00
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2723

	jmi l_2D09
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2D09
	lda #$01
	sta F
l_2D09

; optimize OK (service.pas), line = 2724

	lda F
	jeq l_2D1C
	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2D30
l_2D1C

; optimize OK (service.pas), line = 2725

	lda PX
	add #$0E
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2D30
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2728

	lda #$64
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2729

	jmi l_2D56
	ora N1+2
	ora N1+1
	ora N1
	jeq l_2D56
	lda #$01
	sta F
l_2D56

; optimize OK (service.pas), line = 2730

	lda F
	jeq l_2D69
	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	jmp l_2D7D
l_2D69

; optimize OK (service.pas), line = 2731

	lda PX
	add #$15
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$0A
	sta PUT_DIGIT.NUM
	lda #$00
l_2D7D
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2734

	lda #$0A
	sta @INTEGER.DIV.B
	lda #$00
	sta @INTEGER.DIV.B+1
	sta @INTEGER.DIV.B+2
	sta @INTEGER.DIV.B+3
	lda SC
	sta @INTEGER.DIV.A
	lda SC+1
	sta @INTEGER.DIV.A+1
	lda SC+2
	sta @INTEGER.DIV.A+2
	lda SC+3
	sta @INTEGER.DIV.A+3
	jsr @INTEGER.DIV
	lda #$0A
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta N1
	lda @INTEGER.MOD.RESULT+1
	sta N1+1
	lda @INTEGER.MOD.RESULT+2
	sta N1+2
	lda @INTEGER.MOD.RESULT+3
	sta N1+3

; optimize OK (service.pas), line = 2735

	lda PX
	add #$1C
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda N1
	sta PUT_DIGIT.NUM
	lda N1+1
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2739

	lda PX
	add #$23
	sta PUT_DIGIT.PX
	lda PX+1
	adc #$00
	sta PUT_DIGIT.PX+1
	lda PY
	sta PUT_DIGIT.PY
	lda PY+1
	sta PUT_DIGIT.PY+1
	lda #$00
	sta PUT_DIGIT.NUM
	sta PUT_DIGIT.NUM+1
	jsr PUT_DIGIT

; ------------------------------------------------------------

PX	= DATAORIGIN+$06E5
PY	= DATAORIGIN+$06E7
SC	= DATAORIGIN+$06E9
N1	= DATAORIGIN+$06ED
F	= DATAORIGIN+$06F1

@VarData	= PX
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE

; optimize FAIL (0, service.pas), line = 2785

	lda LIVES
	bne @+
	dec LIVES+1
@
	dec LIVES

; optimize OK (service.pas), line = 2788

	lda #$00
	sta CN

l_2DBC
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_2DCA

; optimize OK (service.pas), line = 2789

	lda #$00
	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_2DD5_0

l_2DD8
; --- ForToDoCondition
	lda @FORTMP_2DD5_0::#$00
	cmp Y
	jcc l_2DE6

; optimize OK (service.pas), line = 2790

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_2DF1_0

l_2DF4
; --- ForToDoCondition
	lda @FORTMP_2DF1_0::#$00
	cmp X
	jcc l_2E02

; optimize OK (service.pas), line = 2792

	lda X
	add #$0B
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda CN
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta XL
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta XL+1

; optimize OK (service.pas), line = 2793

	lda Y
	add #$C0
	sta YL
	lda #$00
	adc #$00
	sta YL+1

; optimize OK (service.pas), line = 2795

	ldy XL
	lda #$C4
	add XL+1
	sta :bp+1
	lda (:bp),y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 2796

	ldy YL
	lda adr.MODY,y
	sta :eax
	lda #$00
	sta :eax+1
	lda PATTERN.WIDTH
	sta :ecx
	lda PATTERN.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta YP
	lda :eax+1
	sta YP+1

; optimize FAIL (1, service.pas), line = 2800

	inx
	ldy #1
	lda CN
	cmp LIVES
	lda #$00
	sbc LIVES+1
	svc
	eor #$80
	bmi @+
	dey
@
	sty :STACKORIGIN,x
	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	dex
	ldy #1
	lda GETBYTE.RESULT
	bne @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2E65

; optimize OK (service.pas), line = 2803

	lda MINIVAUS.OFS
	add X
	sta :STACKORIGIN+9
	lda MINIVAUS.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda MINIVAUS.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda MINIVAUS.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda MINIVAUS.WIDTH
	sta :ecx
	lda MINIVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :STACKORIGIN+9
	add :eax
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc :eax+2
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc :eax+3
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	sta CL
; optimize OK (service.pas), line = 2806
; optimize OK (service.pas), line = 2809
	jmp l_2EA7
l_2E65

; optimize OK (service.pas), line = 2818

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+9
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	ldy YL
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+251,y
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	lda GETBYTE.RESULT
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 2821

	lda PATTERN.OFS
	add XP
	sta :STACKORIGIN+9
	lda PATTERN.OFS+1
	adc XP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda PATTERN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda PATTERN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	add YP
	sta GETBYTE.SRC
	lda :STACKORIGIN+STACKWIDTH+9
	adc YP+1
	sta GETBYTE.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc #$00
	sta GETBYTE.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$00
	sta GETBYTE.SRC+3
	jsr GETBYTE
	inx
	lda GETBYTE.RESULT
	and #$7F
	ora SHADOW
	sta CL
	dex
l_2EA7

; optimize OK (service.pas), line = 2824

	lda XL
	sta :STACKORIGIN+10
	lda #$50
	add XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YL
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; optimize OK (service.pas), line = 2827

	lda PLAYSCREEN.OFS
	add XL
	sta :STACKORIGIN+10
	lda PLAYSCREEN.OFS+1
	adc XL+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy YL
	lda :STACKORIGIN+10
	add adr.ROW,y
	sta PUTBYTE.DST
	lda :STACKORIGIN+STACKWIDTH+10
	adc adr.ROW+251,y
	sta PUTBYTE.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+10
	adc #$00
	sta PUTBYTE.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+10
	adc #$00
	sta PUTBYTE.DST+3
	lda CL
	sta PUTBYTE.V
	jsr PUTBYTE

; --- ForToDoEpilog
	inc X
	jne l_2DF4
l_2E02

; --- ForToDoEpilog
	inc Y
	jne l_2DD8
l_2DE6

; --- ForToDoEpilog
	inc CN
	jne l_2DBC
l_2DCA

; ------------------------------------------------------------

LIVES	= DATAORIGIN+$06F2
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$06F4
Y	= DATAORIGIN+$06F5
CN	= DATAORIGIN+$06F6
XP	= DATAORIGIN+$06F7
YP	= DATAORIGIN+$06F9
XL	= DATAORIGIN+$06FB
YL	= DATAORIGIN+$06FD
SHADOW	= DATAORIGIN+$06FF
CL	= DATAORIGIN+$0700

@VarData	= LIVES
@VarDataSize	= 15

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2836

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2F15_0

l_2F18
; --- ForToDoCondition
	lda @FORTMP_2F15_0::#$00
	cmp Y
	jcc l_2F26

; optimize OK (service.pas), line = 2838

	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	lda SHOOTS.WIDTH
	sta :ecx
	lda SHOOTS.WIDTH+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta FW
	lda :eax+1
	sta FW+1

; optimize OK (service.pas), line = 2840

	lda Y
	add FIRE.Y
	tay
	lda FIRE.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	add FW
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	adc FW+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	adc #$00
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	adc #$00
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITZERO.SIZE+1
	jsr BLITZERO

; --- ForToDoEpilog
	inc Y
	jne l_2F18
l_2F26

; ------------------------------------------------------------

FW	= DATAORIGIN+$0703
Y	= DATAORIGIN+$0705

@VarData	= FW
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2848

	lda #$00
	sta Y
	ldy SHOOTS.HEIGHT
	dey
	sty @FORTMP_2F63_0

l_2F66
; --- ForToDoCondition
	lda @FORTMP_2F63_0::#$00
	cmp Y
	jcc l_2F74

; optimize OK (service.pas), line = 2852

	lda Y
	add FIRE.Y
	tay
	lda FIRE.X
	add adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add FIRE.X
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+251,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda SHOOTS.WIDTH
	sta BLITROW.SIZE
	lda SHOOTS.WIDTH+1
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_2F66
l_2F74

; ------------------------------------------------------------

Y	= DATAORIGIN+$0707

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 2859

	lda FIRE.AVL
	jeq l_2FB6

; optimize FAIL ('MOUSECLICK', service.pas), line = 2861

	jsr MOUSECLICK
	inx
	inx
	ldy #1
	lda MOUSECLICK.RESULT+1
	cmp #$00
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN-1,x
	dex
	dex
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2FD6

; optimize OK (service.pas), line = 2863

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	sbc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda VAUS.X
	add :STACKORIGIN+10
	sta FIRE.X

; optimize OK (service.pas), line = 2864

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 2865

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2866

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 2867

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2FD6

; optimize OK (service.pas), line = 2870

	lda FIRE.SHOT
	jeq l_3010

; optimize OK (service.pas), line = 2872

	lda FIRE.NW
	jeq l_301D
	jsr REMOVE_FIRE
l_301D

; optimize OK (service.pas), line = 2873

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 2875

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 2876

	cmp #$16
	jcs l_3038
	lda #$00
	sta FIRE.SHOT
	jmp l_3046
l_3038

; optimize FAIL ('PLACE_FIRE', service.pas), line = 2879

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 2881

	lda FIRE.Y
	sub #$16
	jeq l_306D
	bpl @+
	jmp l_306D
@
	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp #$78
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_306D
@

; optimize OK (service.pas), line = 2883

	lda FIRE.X
	sub #$09
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X1
	lda :STACKORIGIN+STACKWIDTH+9
	sta X1+1

; optimize OK (service.pas), line = 2884

	lda FIRE.Y
	sub #$16
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Y1
	lda :STACKORIGIN+STACKWIDTH+9
	sta Y1+1

; optimize OK (service.pas), line = 2886

	lda FIRE.X
	add SHOOTS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc SHOOTS.WIDTH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda :STACKORIGIN+9
	sub #$09
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+STACKWIDTH*3+9
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X2
	lda :STACKORIGIN+STACKWIDTH+9
	sta X2+1

; optimize OK (service.pas), line = 2887

	lda Y1
	sta Y2
	lda Y1+1
	sta Y2+1

; optimize OK (service.pas), line = 2889

	lda Y1
	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_30D6x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_30D6
l_30D6x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2891

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 2892

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 2894

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X1+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y1+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 2895

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda X2+1
	sta SHOOT_BLOCK_WITH_FIRE.XB+1
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	lda Y2+1
	sta SHOOT_BLOCK_WITH_FIRE.YB+1
	jsr SHOOT_BLOCK_WITH_FIRE
l_3046
l_30D6
l_306D
l_3010
l_2FB6

; ------------------------------------------------------------

X1	= DATAORIGIN+$0709
X2	= DATAORIGIN+$070B
Y1	= DATAORIGIN+$070D
Y2	= DATAORIGIN+$070F

@VarData	= X1
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2907

	lda #$00
	sta Y

l_30FB
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_3109

; optimize OK (service.pas), line = 2909

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+251+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$D9
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW+$B0,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+251+$B0,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_30FB
l_3109

; ------------------------------------------------------------

Y	= DATAORIGIN+$0711

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 2917

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 2918

	lda SCRFLUX
	jeq l_3148

; optimize OK (service.pas), line = 2920

	lda #$00
	sta Y

l_3152
; --- ForToDoCondition
	ldy Y
	cpy #$14
	jcs l_3160

; optimize OK (service.pas), line = 2922

	lda #$D9
	adc adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+251+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda Y
	add FX
	sta :STACKORIGIN+12
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda #$00
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	asl :STACKORIGIN+12
	rol :STACKORIGIN+STACKWIDTH+12
	rol @
	sta :STACKORIGIN+STACKWIDTH*2+12
	lda FLUX.OFS
	add :STACKORIGIN+12
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc :STACKORIGIN+STACKWIDTH+12
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc :STACKORIGIN+STACKWIDTH*2+12
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_3152
l_3160

; optimize FAIL (0, service.pas), line = 2924

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 2925

	lda SCRFLUXCNT
	cmp #$15
	jcc l_319F
	lda #$00
	sta SCRFLUXCNT
l_319F
l_3148

; ------------------------------------------------------------

Y	= DATAORIGIN+$0712
FX	= DATAORIGIN+$0713

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2933

	jsr NOSOUND

; optimize OK (service.pas), line = 2935

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2936

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 2938

	lda VAUS.X
	sta Z
	lda #$00
	sta Z+1

; optimize FAIL ('WAIT_VBL', service.pas), line = 2940

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2941

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2942

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2944

	lda Z
	sta X
	lda Z+1
	sta X+1
	lda Z
	add #$2C
	sta @FORTMP_31CA_0
	lda Z+1
	adc #$00
	sta @FORTMP_31CA_1

l_31CD
; --- ForToDoCondition
	lda @FORTMP_31CA_1::#$00
	cmp X+1
	bne @+
	lda @FORTMP_31CA_0::#$00
	cmp X
@
	jcc l_31D9

; optimize FAIL ('WAIT_VBL', service.pas), line = 2946

	jsr WAIT_VBL

; optimize OK (service.pas), line = 2948

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 2949

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2950

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 2951

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 2952

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 2954

	lda VAUS.Y
	sta Y
	lda #$00
	sta Y+1
	lda VAUS.Y
	add VAUS.HEIGHT
	sta @FORTMP_31F8_0
	lda #$00
	adc #$00
	sta @FORTMP_31F8_1

l_31FB
; --- ForToDoCondition
	lda @FORTMP_31F8_1::#$00
	cmp Y+1
	bne @+
	lda @FORTMP_31F8_0::#$00
	cmp Y
@
	jcc l_3207

; optimize OK (service.pas), line = 2956

	ldy Y
	lda #$E1
	add adr.ROW,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+251,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda PLAYSCREEN.OFS
	add #$E1
	sta :STACKORIGIN+11
	lda PLAYSCREEN.OFS+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITROW.SRC
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+251,y
	sta BLITROW.SRC+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITROW.SRC+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITROW.SRC+3
	lda #$28
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	inc Y
	jne l_31FB
	inc Y+1
	jne l_31FB
l_3207

; --- ForToDoEpilog
	inc X
	jne l_31CD
	inc X+1
	jne l_31CD
l_31D9

; ------------------------------------------------------------

X	= DATAORIGIN+$0714
Y	= DATAORIGIN+$0716
Z	= DATAORIGIN+$0718

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 2966

	lda VAUS.LETTER
	jmi l_3241
	jeq l_3241

; optimize OK (service.pas), line = 2968

	ldy #$00
	lda VAUS.LETTER
	spl
	dey
	sub #$01
	sta LETT.LAST
	tya
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 2969

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_3258
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_3258

; optimize OK (service.pas), line = 2970

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_326A
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_326A

; optimize OK (service.pas), line = 2971

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2972

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2973

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 2974

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 2976

	lda VAUS.LETTER
	cmp #$06
	jeq l_328F

; optimize OK (service.pas), line = 2978

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2979

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 2980

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_328F
l_3241

; optimize OK (service.pas), line = 2984

	lda VAUS.LETTER
	sta @CASETMP_0009
	cmp #$01
	jne l_32AB
@

; optimize OK (service.pas), line = 2987

	lda FIRE.SHOT
	jeq l_32B7
	jsr REMOVE_FIRE
l_32B7

; optimize OK (service.pas), line = 2988

	:8 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2989

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2990

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 2991

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 2992

	lda #$00
	sta FIRE.SHOT
	jmp a_0009
l_32AB
	cmp #$02
	jne l_32D1

; optimize OK (service.pas), line = 2996

	lda FIRE.SHOT
	jeq l_32DD
	jsr REMOVE_FIRE
l_32DD

; optimize OK (service.pas), line = 2997

	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2998

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2999

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3000

	sta FIRE.AVL
	jmp a_0009
l_32D1
	cmp #$03
	jne l_32F3

; optimize OK (service.pas), line = 3004

	lda FIRE.SHOT
	jeq l_32FF
	jsr REMOVE_FIRE
l_32FF

; optimize OK (service.pas), line = 3005

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3006

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3007

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3008

	sta FIRE.AVL

; optimize OK (service.pas), line = 3009

	lda #$01
	sta SCRFLUX
	jmp a_0009
l_32F3
	cmp #$04
	jne l_3319

; optimize OK (service.pas), line = 3013

	lda FIRE.SHOT
	jeq l_3325
	jsr REMOVE_FIRE
l_3325

; optimize OK (service.pas), line = 3014

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3015

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3016
	jmp s_3362
l_3319
	cmp #$05
	jne l_3337

; optimize OK (service.pas), line = 3020

	lda FIRE.SHOT
	jeq l_3343
	jsr REMOVE_FIRE
l_3343

; optimize OK (service.pas), line = 3021

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3022

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3023

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3024

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$F4
	sta MAX.B
	lda #$01
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3025

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_3362
; optimize OK (service.pas), line = 3026
	jmp s_3380
l_3337
	cmp #$06
	jne l_3369

; optimize OK (service.pas), line = 3030

	lda FIRE.SHOT
	jeq l_3375
	jsr REMOVE_FIRE
l_3375

; optimize OK (service.pas), line = 3031

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3032

	jsr MODIFY_VAUS
s_3380
; optimize OK (service.pas), line = 3033
	jmp s_33B0
l_3369
	cmp #$07
	jne l_3387

; optimize OK (service.pas), line = 3037

	lda FIRE.SHOT
	jeq l_3393
	jsr REMOVE_FIRE
l_3393

; optimize OK (service.pas), line = 3038

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3039

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3040

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3041

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3042

	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3043

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_33B0

; optimize OK (service.pas), line = 3044

	lda #$00
	sta FIRE.AVL
l_3387
a_0009

; ------------------------------------------------------------

B1	= DATAORIGIN+$071E
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0006
B1.OLDX	= DATAORIGIN+$0008
B1.OLDY	= DATAORIGIN+$000A
B1.SPEED	= DATAORIGIN+$000C
B1.FINESPEED	= DATAORIGIN+$000E
B1.SPEEDX	= DATAORIGIN+$0010
B1.SPEEDY	= DATAORIGIN+$0012
B1.SBD	= DATAORIGIN+$0014
B1.BRWHIT	= DATAORIGIN+$0016
B1.INPLAY	= DATAORIGIN+$0017
B1.LAUNCH	= DATAORIGIN+$0018
B1.ONVAUS	= DATAORIGIN+$0019
B1.STM	= DATAORIGIN+$001A
B2	= DATAORIGIN+$0722
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0006
B2.OLDX	= DATAORIGIN+$0008
B2.OLDY	= DATAORIGIN+$000A
B2.SPEED	= DATAORIGIN+$000C
B2.FINESPEED	= DATAORIGIN+$000E
B2.SPEEDX	= DATAORIGIN+$0010
B2.SPEEDY	= DATAORIGIN+$0012
B2.SBD	= DATAORIGIN+$0014
B2.BRWHIT	= DATAORIGIN+$0016
B2.INPLAY	= DATAORIGIN+$0017
B2.LAUNCH	= DATAORIGIN+$0018
B2.ONVAUS	= DATAORIGIN+$0019
B2.STM	= DATAORIGIN+$001A
B3	= DATAORIGIN+$0726
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0006
B3.OLDX	= DATAORIGIN+$0008
B3.OLDY	= DATAORIGIN+$000A
B3.SPEED	= DATAORIGIN+$000C
B3.FINESPEED	= DATAORIGIN+$000E
B3.SPEEDX	= DATAORIGIN+$0010
B3.SPEEDY	= DATAORIGIN+$0012
B3.SBD	= DATAORIGIN+$0014
B3.BRWHIT	= DATAORIGIN+$0016
B3.INPLAY	= DATAORIGIN+$0017
B3.LAUNCH	= DATAORIGIN+$0018
B3.ONVAUS	= DATAORIGIN+$0019
B3.STM	= DATAORIGIN+$001A
X	= DATAORIGIN+$072A
@CASETMP_0009	= DATAORIGIN+$072C

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_33BE

; optimize OK (service.pas), line = 3057

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	jsr SYSTEM.RANDOM.@010180000
	inx
	mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3058

	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$1F
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jmi l_33BE
	lda #$5A
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda TEMP
	sta @SMALLINT.MOD.A
	lda TEMP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	cmp #$3C
	lda @SMALLINT.MOD.RESULT+1
	sbc #$00
	svc
	eor #$80
	jpl l_33BE

; optimize OK (service.pas), line = 3060

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3061

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3062

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$072D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A
TEMP	= DATAORIGIN+$0731

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_33FE

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3092

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_340D

; optimize OK (service.pas), line = 3095

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_342A
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_342A

; optimize OK (service.pas), line = 3096

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_342A

; optimize OK (service.pas), line = 3098

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3099

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_340D

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0792
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3107

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_344B

; optimize OK (service.pas), line = 3109

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3111

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL,y
	sta :STACKORIGIN+10
	lda adr.LEVEL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+9
	sty :STACKORIGIN+STACKWIDTH*2+9
	sty :STACKORIGIN+STACKWIDTH*3+9
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub #$00
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp #$00
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_3461
	jeq l_3461

; optimize OK (service.pas), line = 3113

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3116

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$D0
	lda (:bp2),y
	sbc #$07
	svc
	eor #$80
	jpl l_3477

; optimize OK (service.pas), line = 3118

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3119

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_3477
l_3461

; optimize OK (service.pas), line = 3123

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3127

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_349F
@
	ldy #$00
	lda (:bp2),y
	jpl l_349F
@

; optimize OK (service.pas), line = 3128

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_349F
l_344B

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0796
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0006
BALL.OLDX	= DATAORIGIN+$0008
BALL.OLDY	= DATAORIGIN+$000A
BALL.SPEED	= DATAORIGIN+$000C
BALL.FINESPEED	= DATAORIGIN+$000E
BALL.SPEEDX	= DATAORIGIN+$0010
BALL.SPEEDY	= DATAORIGIN+$0012
BALL.SBD	= DATAORIGIN+$0014
BALL.BRWHIT	= DATAORIGIN+$0016
BALL.INPLAY	= DATAORIGIN+$0017
BALL.LAUNCH	= DATAORIGIN+$0018
BALL.ONVAUS	= DATAORIGIN+$0019
BALL.STM	= DATAORIGIN+$001A

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_33FE

; optimize OK (service.pas), line = 3136

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3137

	sta SCRFLUX

; optimize OK (service.pas), line = 3139

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3141

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3142

	:8 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3144

	lda #$FF
	sta LETT.LAST
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3145

	lda #$00
	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3148

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3151

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3155

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sta PLOT_LIVES.LIVES
	lda #$00
	sta PLOT_LIVES.LIVES+1
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3158

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3161

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3162

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3163

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3166

	jsr PUT_WALL

; optimize FAIL ('MOUSERESET', service.pas), line = 3170

	jsr MOUSERESET

; optimize OK (service.pas), line = 3173

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3174

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3177

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3178

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3181

	lda #$FF
	sta BALL0.OLDX
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3182

	sta BALL0.OLDY
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3185

	lda #$00
	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3189

	lda #$10
	sta BALL0.ONVAUS

; optimize OK (service.pas), line = 3194

	lda #$00
	sta BALL0.STM

; optimize OK (service.pas), line = 3198

	lda #$E8
	sta SYSTEM.RANDOM.@010184000.RANGE
	lda #$03
	sta SYSTEM.RANDOM.@010184000.RANGE+1
	jsr SYSTEM.RANDOM.@010184000
	lda SYSTEM.RANDOM.@010184000.RESULT
	sta LETT.INCOMING
	lda SYSTEM.RANDOM.@010184000.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3201

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3204

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3206

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3207

	jsr START_VAUS

; optimize OK (service.pas), line = 3208

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3209

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3210

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3211

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3212

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3219

	lda #$0F
	jsr SYSTEM.RANDOM.@010180000
	inx
	inx
	lda SYSTEM.RANDOM.@010180000.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda #$00
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3221

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$F4
	sta SET_BALL_SPEED.SPEED
	lda #$01
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3224

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3226

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3227

	sta BALL2.INPLAY

; --- WhileProlog
	jmp l_3535
l_3536

; optimize FAIL ('WAIT_VBL', service.pas), line = 3231

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3240

	lda BALL0.X
	sta MOUS.X
	lda BALL0.X+1
	sta MOUS.X+1

; optimize OK (service.pas), line = 3242

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	lda <Y
	sta MOUSECOORDS.Y
	lda >Y
	sta MOUSECOORDS.Y+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3247

	lda TRAINER
	jne l_3551
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_355F
l_3551

; optimize OK (service.pas), line = 3253

	lda TRAINER
	cmp #$01
	jne l_3571

; optimize FAIL (1, service.pas), line = 3254

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0A :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc #$00
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_355F
	jsr MOVE_VAUS
l_3571

; optimize OK (service.pas), line = 3259

	lda BALL0.LAUNCH
	cmp #$01
	jne l_3594

; optimize FAIL (0, service.pas), line = 3261

	inc BALL0.STM

; optimize OK (service.pas), line = 3266

	lda BALL0.STM
	cmp #$FA
	jne l_35AB
	lda #$00
	sta BALL0.LAUNCH
l_35AB

; optimize OK (service.pas), line = 3269

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3272

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT+1
	bne @+
	lda MOUSECLICK.RESULT
	cmp #$01
@
	jne l_35C5
	lda #$00
	sta BALL0.LAUNCH
l_35C5
	jmp l_35D5
l_3594

; optimize OK (service.pas), line = 3280

	lda BALL0.INPLAY
	jeq l_35E1
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_35E1
l_35D5

; optimize OK (service.pas), line = 3281

	lda BALL1.INPLAY
	jeq l_35F3
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_35F3

; optimize OK (service.pas), line = 3282

	lda BALL2.INPLAY
	jeq l_3605
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_3605

; optimize OK (service.pas), line = 3288

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3289

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3290

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3305

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3306

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3307

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3308

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3309

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3311

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_363D
	jsr VAUS_OUT
l_363D

; optimize OK (service.pas), line = 3313

	lda VAUS.LETTER
	cmp #$04
	jne l_3653

; optimize OK (service.pas), line = 3315

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3317

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3318

	mwy BALL2 :bp2
	ldy #$1A
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3320

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	inx
	lda #$5A
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda GET_BALL_DIRECTION.RESULT
	sta @SMALLINT.DIV.A
	lda GET_BALL_DIRECTION.RESULT+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	dex
	lda :eax
	sta T1
	lda :eax+1
	sta T1+1
	dex

; optimize OK (service.pas), line = 3322

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3329

	lda #$5A
	sta :ecx
	lda #$00
	sta :ecx+1
	lda T1
	sta :eax
	lda T1+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta HLP
	lda :eax+1
	sta HLP+1

; optimize OK (service.pas), line = 3331

	lda HLP
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3332

	lda HLP
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3333

	lda HLP
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda HLP+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3337

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3338

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3339

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3342

	lda #$00
	sta VAUS.LETTER
l_3653

; optimize OK (service.pas), line = 3346

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_36B6
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_36B6

; optimize OK (service.pas), line = 3349

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1,y
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2,y
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3,y
	sta WRITE_SCORE.SC+3
	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3352

	lda CUR_PLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.SCORE.PLAYER+3,y
	sub SCORE.HISCORE+3
	bne L4
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne L1
	lda adr.SCORE.PLAYER+1,y
	cmp SCORE.HISCORE+1
	bne L1
	lda adr.SCORE.PLAYER,y
	cmp SCORE.HISCORE
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jmi l_36DC
	jeq l_36DC

; optimize OK (service.pas), line = 3355

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3357

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_36DC

; optimize OK (service.pas), line = 3364

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3365

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3366

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3407

	lda BALL0.INPLAY
	jne l_3702

; optimize OK (service.pas), line = 3409

	mwy BALL0 :bp2
	ldy #$1A
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3410

	mwy BALL1 :bp2
	ldy #$1A
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3411

	sta BALL2.INPLAY
l_3702

; optimize OK (service.pas), line = 3414

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3416

	lda BALL0.INPLAY
	jeq l_371D
	inc BALLS_IN_PLAY
l_371D

; optimize OK (service.pas), line = 3417

	lda BALL1.INPLAY
	jeq l_3730
	inc BALLS_IN_PLAY
l_3730

; optimize OK (service.pas), line = 3418

	lda BALL2.INPLAY
	jeq l_3743
	inc BALLS_IN_PLAY
l_3743

; optimize OK (service.pas), line = 3421

	lda BALL0.INPLAY
	jne l_3759

; optimize OK (service.pas), line = 3423

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3424

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3425

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3426

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3427

	lda <adr.WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add >adr.WALL_P
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3435

	jsr NOSOUND
l_3759
l_3535

; optimize OK (service.pas), line = 3229

	lda REMAIN_BLK
	jeq l_3536w
	lda BALL0.INPLAY
	jeq l_3536w
	lda SCORE.ABORTPLAY
	jeq l_3536
l_3536w

; optimize OK (service.pas), line = 3491

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3492

	lda REMAIN_BLK
	jne l_37A3
	lda #$01
	sta RESULT
l_37A3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0733
X	= DATAORIGIN+$0734
Y	= DATAORIGIN+$0736
KEY	= DATAORIGIN+$0738
T1	= DATAORIGIN+$073A
T2	= DATAORIGIN+$073C
HLP	= DATAORIGIN+$073E
CN	= DATAORIGIN+$0740
adr.BALL0	= DATAORIGIN+$0741	; [27] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$0741
BALL0.Y	= DATAORIGIN+$0743
BALL0.FINEX	= DATAORIGIN+$0745
BALL0.FINEY	= DATAORIGIN+$0747
BALL0.OLDX	= DATAORIGIN+$0749
BALL0.OLDY	= DATAORIGIN+$074B
BALL0.SPEED	= DATAORIGIN+$074D
BALL0.FINESPEED	= DATAORIGIN+$074F
BALL0.SPEEDX	= DATAORIGIN+$0751
BALL0.SPEEDY	= DATAORIGIN+$0753
BALL0.SBD	= DATAORIGIN+$0755
BALL0.BRWHIT	= DATAORIGIN+$0757
BALL0.INPLAY	= DATAORIGIN+$0758
BALL0.LAUNCH	= DATAORIGIN+$0759
BALL0.ONVAUS	= DATAORIGIN+$075A
BALL0.STM	= DATAORIGIN+$075B
adr.BALL1	= DATAORIGIN+$075C	; [27] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$075C
BALL1.Y	= DATAORIGIN+$075E
BALL1.FINEX	= DATAORIGIN+$0760
BALL1.FINEY	= DATAORIGIN+$0762
BALL1.OLDX	= DATAORIGIN+$0764
BALL1.OLDY	= DATAORIGIN+$0766
BALL1.SPEED	= DATAORIGIN+$0768
BALL1.FINESPEED	= DATAORIGIN+$076A
BALL1.SPEEDX	= DATAORIGIN+$076C
BALL1.SPEEDY	= DATAORIGIN+$076E
BALL1.SBD	= DATAORIGIN+$0770
BALL1.BRWHIT	= DATAORIGIN+$0772
BALL1.INPLAY	= DATAORIGIN+$0773
BALL1.LAUNCH	= DATAORIGIN+$0774
BALL1.ONVAUS	= DATAORIGIN+$0775
BALL1.STM	= DATAORIGIN+$0776
adr.BALL2	= DATAORIGIN+$0777	; [27] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$0777
BALL2.Y	= DATAORIGIN+$0779
BALL2.FINEX	= DATAORIGIN+$077B
BALL2.FINEY	= DATAORIGIN+$077D
BALL2.OLDX	= DATAORIGIN+$077F
BALL2.OLDY	= DATAORIGIN+$0781
BALL2.SPEED	= DATAORIGIN+$0783
BALL2.FINESPEED	= DATAORIGIN+$0785
BALL2.SPEEDX	= DATAORIGIN+$0787
BALL2.SPEEDY	= DATAORIGIN+$0789
BALL2.SBD	= DATAORIGIN+$078B
BALL2.BRWHIT	= DATAORIGIN+$078D
BALL2.INPLAY	= DATAORIGIN+$078E
BALL2.LAUNCH	= DATAORIGIN+$078F
BALL2.ONVAUS	= DATAORIGIN+$0790
BALL2.STM	= DATAORIGIN+$0791

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3515

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3573

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$079A
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$079C
Y	= DATAORIGIN+$079E
ST	= DATAORIGIN+$07A0
OLDX	= DATAORIGIN+$07A2
OLDY	= DATAORIGIN+$07A4
NEWX	= DATAORIGIN+$07A6
NEWY	= DATAORIGIN+$07A8

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3582

	lda #$01
	sta X

l_37C4
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_37D2

; optimize OK (service.pas), line = 3584

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3585

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3586

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize FAIL (1, service.pas), line = 3587

	inx
	mva X :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda <adr.WALL_P
	add :STACKORIGIN-2,x
	sta @move.dst
	lda >adr.WALL_P
	adc :STACKORIGIN-2+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3589

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_37C4
l_37D2

; optimize OK (service.pas), line = 3592

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$07AA

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3652

	jsr NOSOUND

; optimize OK (service.pas), line = 3653

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3658

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3664

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 3702

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$07AB
X	= DATAORIGIN+$07AD
Y	= DATAORIGIN+$07AF
Z	= DATAORIGIN+$07B1
K	= DATAORIGIN+$07B3
IK	= DATAORIGIN+$07B5

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3710

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 3711

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_382C
	lda #$00
	sta adr.SCORE.LIVES+$02
l_382C

; optimize OK (service.pas), line = 3714

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 3715

	lda <adr.WALL
	sta @move.dst
	lda >adr.WALL
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3719

	jsr SET_WALL

; optimize OK (service.pas), line = 3721

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3722

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3725

	lda PLAYSCREEN
	sta SETPALETTE.BTM
	lda PLAYSCREEN+1
	sta SETPALETTE.BTM+1
	jsr SETPALETTE

; optimize OK (service.pas), line = 3729

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$3C
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3730

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$5D
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3731

	lda #$FD
	sta WRITE_SCORE.PX
	lda #$00
	sta WRITE_SCORE.PX+1
	lda #$80
	sta WRITE_SCORE.PY
	lda #$00
	sta WRITE_SCORE.PY+1
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_385A

; --- RepeatUntilProlog
l_385B

; optimize OK (service.pas), line = 3749

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_386D

; optimize FAIL (1, service.pas), line = 3751

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex

; optimize FAIL (1, service.pas), line = 3754

	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda <adr.WALL_P
	add :STACKORIGIN-2,x
	sta @move.dst
	lda >adr.WALL_P
	adc :STACKORIGIN-2+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3758

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_386D

; optimize OK (service.pas), line = 3762

	lda <adr.WALL
	sta @move.dst
	lda >adr.WALL
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 3763

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 3768

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 3771

	jeq l_38AF

; optimize OK (service.pas), line = 3774

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3777

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_38CB

; optimize OK (service.pas), line = 3778

	lda #$01
	sta adr.SCORE.WALL_N,y
l_38CB

; optimize FAIL (1, service.pas), line = 3781

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr subAX_CX
	mva #$00 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :eax+2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :eax+3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	mva ALL_WALLS :STACKORIGIN,x
	mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
	lda <adr.WALL_P
	add :STACKORIGIN-2,x
	sta @move.dst
	lda >adr.WALL_P
	adc :STACKORIGIN-2+STACKWIDTH,x
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	dex
	dex
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_38F5
l_38AF

; optimize OK (service.pas), line = 3787

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_390A
	jsr GAME_OVER
l_38F5
l_390A

; optimize OK (service.pas), line = 3792

	lda NWALL
	jne l_385B

; optimize FAIL (0, service.pas), line = 3795

	inc CUR_PLAYER

; optimize OK (service.pas), line = 3796

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_3932
	lda #$01
	sta CUR_PLAYER
l_3932

; optimize OK (service.pas), line = 3802

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_394E
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_394E

; optimize OK (service.pas), line = 3807

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_385A

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$07B7
NWALL	= DATAORIGIN+$07B9

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 166

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 167

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$4A
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT
	lda #$00
	sta PLAYSCREEN.HEIGHT+1

; optimize OK (btm.inc), line = 5

	sta PRESENTS.OFS
	lda #$44
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT
	lda #$00
	sta PRESENTS.HEIGHT+1

; optimize OK (btm.inc), line = 9

	sta EXPLOSION.OFS
	lda #$3E
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT
	lda #$00
	sta EXPLOSION.HEIGHT+1

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$50
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT
	lda #$00
	sta NEWVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SOUNDFX.OFS
	lda #$6F
	sta SOUNDFX.OFS+1
	lda #$03
	sta SOUNDFX.OFS+2
	lda #$00
	sta SOUNDFX.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$15
	sta SOUNDFX.WIDTH
	lda #$00
	sta SOUNDFX.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$26
	sta SOUNDFX.HEIGHT
	lda #$00
	sta SOUNDFX.HEIGHT+1

; optimize OK (btm.inc), line = 21

	lda #$BB
	sta SHINEWALL.OFS
	lda #$72
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$50
	sta SHINEWALL.HEIGHT
	lda #$00
	sta SHINEWALL.HEIGHT+1

; optimize OK (btm.inc), line = 25

	lda #$BB
	sta MINIVAUS.OFS
	lda #$77
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$05
	sta MINIVAUS.HEIGHT
	lda #$00
	sta MINIVAUS.HEIGHT+1

; optimize OK (btm.inc), line = 29

	lda #$1F
	sta LEVELSEL.OFS
	lda #$78
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$5F
	sta LEVELSEL.HEIGHT
	lda #$00
	sta LEVELSEL.HEIGHT+1

; optimize OK (btm.inc), line = 33

	lda #$EA
	sta LETTERS.OFS
	lda #$7F
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$38
	sta LETTERS.HEIGHT
	lda #$00
	sta LETTERS.HEIGHT+1

; optimize OK (btm.inc), line = 37

	lda #$EA
	sta NORMAL.OFS
	lda #$9B
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta NORMAL.HEIGHT
	lda #$00
	sta NORMAL.HEIGHT+1

; optimize OK (btm.inc), line = 41

	lda #$CA
	sta LASERS.OFS
	lda #$9C
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta LASERS.HEIGHT
	lda #$00
	sta LASERS.HEIGHT+1

; optimize OK (btm.inc), line = 45

	lda #$AA
	sta ENLARGED.OFS
	lda #$9D
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$07
	sta ENLARGED.HEIGHT
	lda #$00
	sta ENLARGED.HEIGHT+1

; optimize OK (btm.inc), line = 49

	lda #$6A
	sta SHOOTS.OFS
	lda #$9F
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$08
	sta SHOOTS.HEIGHT
	lda #$00
	sta SHOOTS.HEIGHT+1

; optimize OK (btm.inc), line = 53

	lda #$D2
	sta FLUX.OFS
	lda #$9F
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$29
	sta FLUX.HEIGHT
	lda #$00
	sta FLUX.HEIGHT+1

; optimize OK (btm.inc), line = 57

	lda #$1A
	sta BALLDATA.OFS
	lda #$A1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$05
	sta BALLDATA.HEIGHT
	lda #$00
	sta BALLDATA.HEIGHT+1

; optimize OK (btm.inc), line = 61

	lda #$33
	sta PATTERN.OFS
	lda #$A1
	sta PATTERN.OFS+1
	lda #$03
	sta PATTERN.OFS+2
	lda #$00
	sta PATTERN.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$1A
	sta PATTERN.WIDTH
	lda #$00
	sta PATTERN.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$18
	sta PATTERN.HEIGHT
	lda #$00
	sta PATTERN.HEIGHT+1

; optimize OK (btm.inc), line = 65

	lda #$A3
	sta PATTERN0.OFS
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$18
	sta PATTERN0.HEIGHT
	lda #$00
	sta PATTERN0.HEIGHT+1

; optimize OK (btm.inc), line = 69

	lda #$13
	sta PATTERN1.OFS
	lda #$A6
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$0E
	sta PATTERN1.HEIGHT
	lda #$00
	sta PATTERN1.HEIGHT+1

; optimize OK (btm.inc), line = 73

	lda #$D7
	sta PATTERN2.OFS
	lda #$A6
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$23
	sta PATTERN2.HEIGHT
	lda #$00
	sta PATTERN2.HEIGHT+1

; optimize OK (btm.inc), line = 77

	lda #$09
	sta PATTERN3.OFS
	lda #$AC
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 78

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 79

	lda #$1D
	sta PATTERN3.HEIGHT
	lda #$00
	sta PATTERN3.HEIGHT+1

; optimize OK (btm.inc), line = 81

	lda #$35
	sta PATTERN4.OFS
	lda #$AF
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 82

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 83

	lda #$1E
	sta PATTERN4.HEIGHT
	lda #$00
	sta PATTERN4.HEIGHT+1

; optimize OK (arkanoid_vbxe.pas), line = 174

	lda #$01
	sta MOUS.FIRE

; optimize OK (arkanoid_vbxe.pas), line = 176

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 178

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 181

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 182

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_3A93

; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 186

	jsr MOUSERESET

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 189

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 191

	jeq l_3AAA
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_3AAA

; optimize OK (arkanoid_vbxe.pas), line = 193

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_3A93

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 201

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_OVRADR	= $5000
VBXE_DATA	= $14A00
LEVELS_WALL	= $DC00
adr.MOUS	= DATAORIGIN+$00DE	; [5] RECORD
.var MOUS	= adr.MOUS .word
MOUS.X	= DATAORIGIN+$00DE
MOUS.Y	= DATAORIGIN+$00E0
MOUS.FIRE	= DATAORIGIN+$00E2
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.VBXE_RAM	= DATAORIGIN+$00E3	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$00E3
VBXE_RAM.SIZE	= DATAORIGIN+$00E7
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$005E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0069
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$007F
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0088
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $01F4
MAXSPEED	= $07D0
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0092
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0096
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00A1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00AD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00FF	; [8] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00FF
BALLDATA.HEIGHT	= DATAORIGIN+$0101
BALLDATA.OFS	= DATAORIGIN+$0103
adr.PLAYSCREEN	= DATAORIGIN+$0107	; [8] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$0107
PLAYSCREEN.HEIGHT	= DATAORIGIN+$0109
PLAYSCREEN.OFS	= DATAORIGIN+$010B
adr.PLAYVAUS	= DATAORIGIN+$010F	; [8] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$010F
PLAYVAUS.HEIGHT	= DATAORIGIN+$0111
PLAYVAUS.OFS	= DATAORIGIN+$0113
adr.NORMAL	= DATAORIGIN+$0117	; [8] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$0117
NORMAL.HEIGHT	= DATAORIGIN+$0119
NORMAL.OFS	= DATAORIGIN+$011B
adr.ENLARGED	= DATAORIGIN+$011F	; [8] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$011F
ENLARGED.HEIGHT	= DATAORIGIN+$0121
ENLARGED.OFS	= DATAORIGIN+$0123
adr.LASERS	= DATAORIGIN+$0127	; [8] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$0127
LASERS.HEIGHT	= DATAORIGIN+$0129
LASERS.OFS	= DATAORIGIN+$012B
adr.EXPLOSION	= DATAORIGIN+$012F	; [8] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$012F
EXPLOSION.HEIGHT	= DATAORIGIN+$0131
EXPLOSION.OFS	= DATAORIGIN+$0133
adr.NEWVAUS	= DATAORIGIN+$0137	; [8] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$0137
NEWVAUS.HEIGHT	= DATAORIGIN+$0139
NEWVAUS.OFS	= DATAORIGIN+$013B
adr.PRESENTS	= DATAORIGIN+$013F	; [8] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$013F
PRESENTS.HEIGHT	= DATAORIGIN+$0141
PRESENTS.OFS	= DATAORIGIN+$0143
adr.SOUNDFX	= DATAORIGIN+$0147	; [8] RECORD
.var SOUNDFX	= adr.SOUNDFX .word
SOUNDFX.WIDTH	= DATAORIGIN+$0147
SOUNDFX.HEIGHT	= DATAORIGIN+$0149
SOUNDFX.OFS	= DATAORIGIN+$014B
adr.SHINEWALL	= DATAORIGIN+$014F	; [8] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$014F
SHINEWALL.HEIGHT	= DATAORIGIN+$0151
SHINEWALL.OFS	= DATAORIGIN+$0153
adr.MINIVAUS	= DATAORIGIN+$0157	; [8] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$0157
MINIVAUS.HEIGHT	= DATAORIGIN+$0159
MINIVAUS.OFS	= DATAORIGIN+$015B
adr.LEVELSEL	= DATAORIGIN+$015F	; [8] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$015F
LEVELSEL.HEIGHT	= DATAORIGIN+$0161
LEVELSEL.OFS	= DATAORIGIN+$0163
adr.LETTERS	= DATAORIGIN+$0167	; [8] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$0167
LETTERS.HEIGHT	= DATAORIGIN+$0169
LETTERS.OFS	= DATAORIGIN+$016B
adr.SHOOTS	= DATAORIGIN+$016F	; [8] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$016F
SHOOTS.HEIGHT	= DATAORIGIN+$0171
SHOOTS.OFS	= DATAORIGIN+$0173
adr.FLUX	= DATAORIGIN+$0177	; [8] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$0177
FLUX.HEIGHT	= DATAORIGIN+$0179
FLUX.OFS	= DATAORIGIN+$017B
adr.VAUS	= DATAORIGIN+$017F	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$017F
VAUS.Y	= DATAORIGIN+$0180
VAUS.OLDX	= DATAORIGIN+$0181
VAUS.OLDY	= DATAORIGIN+$0183
VAUS.OLDLEN	= DATAORIGIN+$0185
VAUS.WIDTH	= DATAORIGIN+$0187
VAUS.HEIGHT	= DATAORIGIN+$0188
VAUS.FLASH	= DATAORIGIN+$0189
VAUS.IFLASH	= DATAORIGIN+$018A
VAUS.LETTER	= DATAORIGIN+$018B
adr.PATTERN	= DATAORIGIN+$018C	; [8] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$018C
PATTERN.HEIGHT	= DATAORIGIN+$018E
PATTERN.OFS	= DATAORIGIN+$0190
adr.PATTERN0	= DATAORIGIN+$0194	; [8] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0194
PATTERN0.HEIGHT	= DATAORIGIN+$0196
PATTERN0.OFS	= DATAORIGIN+$0198
adr.PATTERN1	= DATAORIGIN+$019C	; [8] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$019C
PATTERN1.HEIGHT	= DATAORIGIN+$019E
PATTERN1.OFS	= DATAORIGIN+$01A0
adr.PATTERN2	= DATAORIGIN+$01A4	; [8] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$01A4
PATTERN2.HEIGHT	= DATAORIGIN+$01A6
PATTERN2.OFS	= DATAORIGIN+$01A8
adr.PATTERN3	= DATAORIGIN+$01AC	; [8] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$01AC
PATTERN3.HEIGHT	= DATAORIGIN+$01AE
PATTERN3.OFS	= DATAORIGIN+$01B0
adr.PATTERN4	= DATAORIGIN+$01B4	; [8] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$01B4
PATTERN4.HEIGHT	= DATAORIGIN+$01B6
PATTERN4.OFS	= DATAORIGIN+$01B8
STATUS	= DATAORIGIN+$01BC
SUCCESS	= DATAORIGIN+$01BD
REMAIN_BLK	= DATAORIGIN+$01BE
TOTALWALL	= DATAORIGIN+$01BF
adr.SCORE	= DATAORIGIN+$01C0	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$01C0] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$01CC] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$01CF] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$01D2
SCORE.PL_NUMB	= DATAORIGIN+$01D6
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01D7] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$01DA
CUR_PLAYER	= DATAORIGIN+$01DB
adr.SHINEREC	= DATAORIGIN+$01DC	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$01DC
SHINEREC.YB	= DATAORIGIN+$01DD
SHINEREC.FRAME	= DATAORIGIN+$01DE
SHINEREC.BLOCK	= DATAORIGIN+$01DF
SHINEREC.ACTIVE	= DATAORIGIN+$01E0
LV	= DATAORIGIN+$01E1
TRAINER	= DATAORIGIN+$01E3
adr.LETT	= DATAORIGIN+$01E4	; [17] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$01E4
LETT.Y	= DATAORIGIN+$01E5
LETT.TYP	= DATAORIGIN+$01E6
LETT.FRAME	= DATAORIGIN+$01E8
LETT.SUBFRAME	= DATAORIGIN+$01E9
LETT.ACTIVE	= DATAORIGIN+$01EA
LETT.INCOMING	= DATAORIGIN+$01EB
LETT.NEXTX	= DATAORIGIN+$01ED
LETT.NEXTY	= DATAORIGIN+$01EF
LETT.NEXTTYPE	= DATAORIGIN+$01F1
LETT.LAST	= DATAORIGIN+$01F3
adr.FIRE	= DATAORIGIN+$01F5	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$01F5
FIRE.Y	= DATAORIGIN+$01F6
FIRE.SHOT	= DATAORIGIN+$01F7
FIRE.AVL	= DATAORIGIN+$01F8
FIRE.NW	= DATAORIGIN+$01F9
BALLS_IN_PLAY	= DATAORIGIN+$01FA
SCRFLUX	= DATAORIGIN+$01FB
SCRFLUXCNT	= DATAORIGIN+$01FC
SOUND_ON	= DATAORIGIN+$01FD
adr.DEF_PAL	= [DATAORIGIN+$01FE] .array [768]
.var DEF_PAL	= adr.DEF_PAL .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.TMP	= $C200
.var TMP	= adr.TMP .word
adr.MODY	= $C300
.var MODY	= adr.MODY .word
adr.MODX	= $C400
.var MODX	= adr.MODX .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
ROMOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
.by  $00 $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 1978

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
.endm

	end
