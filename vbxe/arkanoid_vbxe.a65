; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.5 [2025/09/06] for MOS 6502 CPU
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0
EOL		= $9B
__BUFFER	= $0400
@BUF		= __BUFFER

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2
bp3	= bp+1

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
	RCDATA 'mod90table.obx' adr.MOD90TABLE 0 0 0 0 0 0 0 0
	RCDATA 'mod10table.obx' adr.MOD10TABLE 0 0 0 0 0 0 0 0
	RCDATA 'sqrtable.dat' adr.SQRTABLE 0 0 0 0 0 0 0 0
	RCDATA 'sintable.dat' adr.SINTABLE 0 0 0 0 0 0 0 0
	XBMP 'arkanoid_digit.bmp' VBXE_DIGIT 0 1 0 0 0 0 0 0
	XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
	ert 'Invalid memory address range ',VADR
	eif

	ift (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$00					; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0022

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
.local	@010184000

; -------------------  ASM Block 00000008  -------------------

	lda :edx+1
	bpl @+

	lda #$00
	sub :edx
	sta :edx
	lda #$00
	sbc :edx+1
	sta :edx+1
@
	sta Result+1

	mva :edx Result

@exit

; ------------------------------------------------------------

X	= :EDX
RESULT	= :STACKORIGIN-4

	rts						; ret
.endl
.endl							; overload

.local	ARCTAN						; FUNCTION | OVERLOAD
.local	@01018F000

; optimize OK (SYSTEM), line = 950

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	sta @FCMPL.A+2
	sta @FCMPL.A+3
	lda A
	sta @FCMPL.B
	lda A+1
	sta @FCMPL.B+1
	lda A+2
	sta @FCMPL.B+2
	lda A+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jpl l_0045

; optimize OK (SYSTEM), line = 951

	lda A
	sta X
	lda A+1
	sta X+1
	lda A+2
	sta X+2
	lda A+3
	eor #$80
	sta X+3

; optimize OK (SYSTEM), line = 952

	lda #$01
	jmp l_005A
l_0045

; optimize OK (SYSTEM), line = 954

	lda A
	sta X
	lda A+1
	sta X+1
	lda A+2
	sta X+2
	lda A+3
	sta X+3

; optimize OK (SYSTEM), line = 955

	lda #$00
l_005A
	sta SIGN

; optimize OK (SYSTEM), line = 958

	lda #$00
	sta @FCMPL.A
	sta @FCMPL.A+1
	lda #$80
	sta @FCMPL.A+2
	lda #$3F
	sta @FCMPL.A+3
	lda X
	sta @FCMPL.B
	lda X+1
	sta @FCMPL.B+1
	lda X+2
	sta @FCMPL.B+2
	lda X+3
	sta @FCMPL.B+3
	jsr @FCMPL
	jmi l_0072
	jeq l_0072

; optimize OK (SYSTEM), line = 959

	lda X
	sta :FP2MAN0
	lda X+1
	sta :FP2MAN1
	lda X+2
	sta :FP2MAN2
	lda X+3
	sta :FP2MAN3
	lda #$00
	sta :FP1MAN0
	sta :FP1MAN1
	lda #$80
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FDIV
	lda :FPMAN0
	sta A
	lda :FPMAN1
	sta A+1
	lda :FPMAN2
	sta A+2
	lda :FPMAN3
	sta A+3

; optimize OK (SYSTEM), line = 960

	lda #$01
	jmp l_0088
l_0072

; optimize OK (SYSTEM), line = 962

	lda X
	sta A
	lda X+1
	sta A+1
	lda X+2
	sta A+2
	lda X+3
	sta A+3

; optimize OK (SYSTEM), line = 963

	lda #$00
l_0088
	sta YES

; optimize OK (SYSTEM), line = 966

	lda A
	sta :FP2MAN0
	lda A+1
	sta :FP2MAN1
	lda A+2
	sta :FP2MAN2
	lda A+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$49
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN+9
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda #$00
	sta :FP2MAN0
	sta :FP2MAN1
	lda #$80
	sta :FP2MAN2
	lda #$3F
	sta :FP2MAN3
	lda A
	sta :FP1MAN0
	lda A+1
	sta :FP1MAN1
	lda A+2
	sta :FP1MAN2
	lda A+3
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda A
	sta :FP1MAN0
	lda A+1
	sta :FP1MAN1
	lda A+2
	sta :FP1MAN2
	lda A+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda A
	sta :FP2MAN0
	lda A+1
	sta :FP2MAN1
	lda A+2
	sta :FP2MAN2
	lda A+3
	sta :FP2MAN3
	lda #$4B
	sta :FP1MAN0
	lda #$C8
	sta :FP1MAN1
	lda #$87
	sta :FP1MAN2
	lda #$3D
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda #$A3
	sta :FP1MAN0
	lda #$92
	sta :FP1MAN1
	lda #$7A
	sta :FP1MAN2
	lda #$3E
	sta :FP1MAN3
	jsr @FADD
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+10
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :FP2MAN0
	lda :FPMAN1
	sta :FP2MAN1
	lda :FPMAN2
	sta :FP2MAN2
	lda :FPMAN3
	sta :FP2MAN3
	lda :STACKORIGIN+9
	sta :FP1MAN0
	lda :STACKORIGIN+STACKWIDTH+9
	sta :FP1MAN1
	lda :STACKORIGIN+STACKWIDTH*2+9
	sta :FP1MAN2
	lda :STACKORIGIN+STACKWIDTH*3+9
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3

; optimize OK (SYSTEM), line = 968

	lda YES
	jeq l_00BC
	lda RESULT
	sta :FP2MAN0
	lda RESULT+1
	sta :FP2MAN1
	lda RESULT+2
	sta :FP2MAN2
	lda RESULT+3
	sta :FP2MAN3
	lda #$DB
	sta :FP1MAN0
	lda #$0F
	sta :FP1MAN1
	lda #$C9
	sta :FP1MAN2
	lda #$3F
	sta :FP1MAN3
	jsr @FSUB
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
	lda :FPMAN2
	sta RESULT+2
	lda :FPMAN3
	sta RESULT+3
l_00BC

; optimize OK (SYSTEM), line = 970

	lda SIGN
	jeq l_00D3
	lda RESULT+3
	eor #$80
	sta RESULT+3
l_00D3
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000F
C1	= $3E7A92A3
C2	= $3D87C84B
PI_2	= $3FC90FDB
PI_4	= $3F490FDB
SIGN	= DATAORIGIN+$0013
YES	= DATAORIGIN+$0014
X	= DATAORIGIN+$0015

@VarData	= A
@VarDataSize	= 10

	rts						; ret
.endl
.endl							; overload

.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
.local	@03018000001810000300000

	.MACRO m@INLINE

; -------------------  ASM Block 00000029  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX

@exit
.endl
.endl							; overload

.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
.local	@00

; -------------------  ASM Block 00000039  -------------------

	bit VCOUNT
	bmi *-3
	bit VCOUNT
	bpl *-3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000041  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000056  -------------------

	.ifdef @CmdLine

	ldx #$0F
	mva:rpl $340,x IOCB@COPY,x-
	rts

IOCB@COPY	:16 brk
	eif


	rts

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
__PORTB_BANKS	= $0101
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
DATESEPARATOR	= DATAORIGIN+$0000
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0001
GRAPHMODE	= DATAORIGIN+$0002
IORESULT	= DATAORIGIN+$0003
EOLN	= DATAORIGIN+$0004
SCREENWIDTH	= DATAORIGIN+$0005
SCREENHEIGHT	= DATAORIGIN+$0007
adr.MEM	= $00
.var MEM	= adr.MEM .word
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

DL_BLANK1	= $00
DL_BLANK2	= $10
DL_BLANK3	= $20
DL_BLANK4	= $30
DL_BLANK5	= $40
DL_BLANK6	= $50
DL_BLANK7	= $60
DL_BLANK8	= $70
DL_DLI	= $80
DL_LMS	= $40
DL_VSCROLL	= $20
DL_HSCROLL	= $10
DL_JMP	= $01
DL_JVB	= $41
DL_MODE_2	= $02
DL_MODE_3	= $03
DL_MODE_4	= $04
DL_MODE_5	= $05
DL_MODE_E	= $0E
DL_MODE_F	= $0F
IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBAK	= $D01A
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
PMCNTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0019
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
GRAPHRESULT	= DATAORIGIN+$001A
GETCOLOR	= DATAORIGIN+$001B
VIDEORAM	= DATAORIGIN+$001C
adr.LASTARCCOORDS	= DATAORIGIN+$001E	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$001E
LASTARCCOORDS.Y	= DATAORIGIN+$0020
LASTARCCOORDS.XSTART	= DATAORIGIN+$0022
LASTARCCOORDS.YSTART	= DATAORIGIN+$0024
LASTARCCOORDS.XEND	= DATAORIGIN+$0026
LASTARCCOORDS.YEND	= DATAORIGIN+$0028
WIN_LEFT	= DATAORIGIN+$002A
WIN_RIGHT	= DATAORIGIN+$002C
WIN_TOP	= DATAORIGIN+$002E
WIN_BOTTOM	= DATAORIGIN+$0030
SCANLINE_WIDTH	= DATAORIGIN+$0032
CURRENTX	= DATAORIGIN+$0033
CURRENTY	= DATAORIGIN+$0035

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	VBXE						; UNIT

.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000096  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL_
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
	sta A

; -------------------  ASM Block 00000097  -------------------

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	lda a
	sub #1

	ldy #s@xdl.RPTL
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	fxs FX_MEMS #$00

; ------------------------------------------------------------

A	= :EDX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
	sta TVBXEMEMORYSTREAM
	sty TVBXEMEMORYSTREAM+1
	sta POSITION
	sty POSITION+1
	add #4
	scc
	iny
	sta SIZE
	sty SIZE+1

; optimize OK (vbxe_memorystream.inc), line = 241

	mwy POSITION :bp2
	ldy #$00
	lda (:bp2),y
	sta ADR
	iny
	lda (:bp2),y
	sta ADR+1
	iny
	lda (:bp2),y
	sta ADR+2
	iny
	lda (:bp2),y
	sta ADR+3

; optimize OK (vbxe_memorystream.inc), line = 242

	mwy SIZE :bp2
	ldy #$00
	lda (:bp2),y
	sta SIZ
	iny
	lda (:bp2),y
	sta SIZ+1
	iny
	lda (:bp2),y
	sta SIZ+2
	iny
	lda (:bp2),y
	sta SIZ+3

; -------------------  ASM Block 00000110  -------------------

	txa:pha

	mva adr _adr
	mva adr+1 _adr+1
	mva adr+2 _adr+2

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

loop	cpw _adr+1 siz+1
	bcs skp

	ldy #20
	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-

	fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
	fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
	fxsa FX_BL_ADR2

	fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!

wait	fxla FX_BLITTER_BUSY
	bne wait

	lda #$00
	sta _adr
	inw _adr+1

	jmp loop

skp	fxs FX_MEMS #$00		; disable VBXE bank

	jmp stop

bltClr	.long 0x00	; source address
	.word 0x00	; source step y
	.byte 0x00	; source step x
_adr	.long 0x00	; destination address
	.word 0x0100	; destination step y
	.byte 0x01	; destination step x
_siz	.word 0xff	; width
	.byte 0x00	; height
	dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
	dta 0x00	; xor mask
	dta 0x00	; collision and mask
	dta 0x00	; zoom
	dta 0x00	; pattern feature
	dta 0x00	; control

stop	pla:tax

; optimize OK (vbxe_memorystream.inc), line = 294

	mwy POSITION :bp2
	ldy #$00
	tya
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (vbxe_memorystream.inc), line = 295

	mwy SIZE :bp2
	ldy #$00
	sta (:bp2),y
	iny
	sta (:bp2),y
	iny
	lda #$08
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; ------------------------------------------------------------

TVBXEMEMORYSTREAM	= DATAORIGIN+$0073
POSITION	= DATAORIGIN+$0075
SIZE	= DATAORIGIN+$0077
ADR	= DATAORIGIN+$0079
SIZ	= DATAORIGIN+$007D

@VarData	= TVBXEMEMORYSTREAM
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000119  -------------------

	@setxdl #e@xdl.mapoff

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@0201810000180000

; optimize OK (VBXE), line = 643

	lda A
	sta SYSTEM.GRAPHMODE

; optimize OK (VBXE), line = 645

	lda #$C0
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 647

	lda A
	sta @CASETMP_0005
	cmp #$0A
	jne l_0211
@

; optimize OK (VBXE), line = 648

	lda #$A0
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1
	lda #$01
	sta A
	jmp a_0005
l_0211
	cmp #$1F
	jne l_0220

; optimize OK (VBXE), line = 649

	lda #$40
	sta SYSTEM.SCREENWIDTH
	lda #$01
	sta SYSTEM.SCREENWIDTH+1
	lda #$02
	sta A
	jmp a_0005
l_0220
	cmp #$18
	jne l_022F

; optimize OK (VBXE), line = 650

	lda #$80
	sta SYSTEM.SCREENWIDTH
	lda #$02
	sta SYSTEM.SCREENWIDTH+1
	lda #$03
	sta A
	jmp a_0005
l_022F

; optimize OK (VBXE), line = 654

	lda #$50
	sta SYSTEM.SCREENWIDTH
	lda #$00
	sta SYSTEM.SCREENWIDTH+1

; optimize OK (VBXE), line = 655

	lda #$18
	sta SYSTEM.SCREENHEIGHT
	lda #$00
	sta SYSTEM.SCREENHEIGHT+1

; optimize OK (VBXE), line = 656

	lda #$02
	sta A
a_0005

; -------------------  ASM Block 00000120  -------------------

	txa:pha

	lda MAIN.SYSTEM.ScreenWidth
	ldx MAIN.SYSTEM.ScreenWidth+1

	ldy MAIN.SYSTEM.ScreenHeight

	@SCREENSIZE

	@setxdl a

	fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000

	ldy #s@xdl.ovstep

	lda s
	sta MAIN.SYSTEM.VBXE_WINDOW,y

	lda s+1
	sta MAIN.SYSTEM.VBXE_WINDOW+1,y

	fxs FX_MEMS #$00

	pla:tax

; ------------------------------------------------------------

A	= DATAORIGIN+$0081
S	= DATAORIGIN+$0082
@CASETMP_0005	= DATAORIGIN+$0084

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
.local	@010180000
	sta A

; optimize OK (VBXE), line = 698

	sta SETHORIZONTALRES.@0201810000180000.A
	lda #$40
	sta SETHORIZONTALRES.@0201810000180000.S
	lda #$01
	sta SETHORIZONTALRES.@0201810000180000.S+1
	jsr SETHORIZONTALRES.@0201810000180000

; ------------------------------------------------------------

A	= DATAORIGIN+$0085

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTERBUSY					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000121  -------------------

	ldy #FX_BLITTER_BUSY
	lda (fxptr),y
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0086

	rts						; ret
.endl

.local	RUNBCB						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000122  -------------------

	fxs	FX_BL_ADR0	a
	lda	a+1
	and	#$0f
	fxsa	FX_BL_ADR1
	fxs	FX_BL_ADR2	#$00

	fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!

;wait	fxla	FX_BLITTER_BUSY
;	bne	wait

; ------------------------------------------------------------

A	= DATAORIGIN+$0087
A.SRC_ADR	= DATAORIGIN+$0000
A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
A.SRC_STEP_Y	= DATAORIGIN+$0003
A.SRC_STEP_X	= DATAORIGIN+$0005
A.DST_ADR	= DATAORIGIN+$0006
A.DST_ADR.BYTE0	= DATAORIGIN+$0006
A.DST_ADR.BYTE1	= DATAORIGIN+$0007
A.DST_ADR.BYTE2	= DATAORIGIN+$0008
A.DST_STEP_Y	= DATAORIGIN+$0009
A.DST_STEP_X	= DATAORIGIN+$000B
A.BLT_WIDTH	= DATAORIGIN+$000C
A.BLT_HEIGHT	= DATAORIGIN+$000E
A.BLT_AND_MASK	= DATAORIGIN+$000F
A.BLT_XOR_MASK	= DATAORIGIN+$0010
A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
A.BLT_ZOOM	= DATAORIGIN+$0012
A.PATTERN_FEATURE	= DATAORIGIN+$0013
A.BLT_CONTROL	= DATAORIGIN+$0014

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
	sta A

; -------------------  ASM Block 00000126  -------------------

	fxs FX_VIDEO_CONTROL a

; ------------------------------------------------------------

A	= DATAORIGIN+$008B

@VarData	= A
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; -------------------  ASM Block 00000134  -------------------

	txa:pha

	jsr @vbxe_detect
	bcc ok

	ldx #MAIN.GRAPH.grNoInitGraph
	bne status

ok	jsr @vbxe_init

	ldx #MAIN.GRAPH.grOK
status	stx MAIN.GRAPH.GraphResult

	pla:tax

	rts

; ------------------------------------------------------------

VC_XDL	= $01
VC_XCOLOR	= $02
VC_NO_TRANS	= $04
VC_TRANS15	= $08
TCBLACK	= $00
TCRED	= $01
TCGREEN	= $02
TCYELLOW	= $03
TCBLUE	= $04
TCMAGENTA	= $05
TCCYAN	= $06
TCWHITE	= $07
TCBRIGHTBLACK	= $08
TCBRIGHTRED	= $09
TCBRIGHTGREEN	= $0A
TCBRIGHTYELLOW	= $0B
TCBRIGHTBLUE	= $0C
TCBRIGHTMAGENTA	= $0D
TCBRIGHTCYAN	= $0E
TCBRIGHTWHITE	= $0F
TBBLACK	= $80
TBRED	= $90
TBGREEN	= $A0
TBYELLOW	= $B0
TBBLUE	= $C0
TBMAGENTA	= $D0
TBCYAN	= $E0
TBWHITE	= $F0
adr.VRAM	= DATAORIGIN+$0043	; [8] OBJECT
.var VRAM	= adr.VRAM .word
VRAM.POSITION	= DATAORIGIN+$0043
VRAM.SIZE	= DATAORIGIN+$0047
SCROLLBACK_FILL	= $63
COLORMAPCONTROL = @VBXE_CMAP.CONFIG
adr.SCROLLBACK_BUFFER	= $0400
.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
FILDAT	= $02FD
ROWCRS	= $54
COLCRS	= $55
CRSADR	= $68

.endl							; UNIT VBXE

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

.local	START_LEVEL					; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEATH_SOUND					; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0094

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_BLOCK_SOUND				; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$0096
B	= DATAORIGIN+$0098

@VarData	= A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RAND						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000137  -------------------


seed = MAIN.SYSTEM.RndSeed

	jsr random16

	lda seed+1
	and #$03
	sta Result+1
	lda seed
	sta Result

loop	cpw Result range
	bcc @exit

	lsr Result+1
	ror Result

	jmp loop

Random16:
	lda seed+1
	tay ; store copy of high byte
	; compute seed+1 ($39>>1 = %11100)
	lsr ; shift to consume zeroes on left...
	lsr
	lsr
	sta seed+1 ; now recreate the remaining bits in reverse order... %111
	lsr
	eor seed+1
	lsr
	eor seed+1
	eor seed+0 ; recombine with original low byte
	sta seed+1
	; compute seed+0 ($39 = %111001)
	tya ; original high byte
	sta seed+0
	asl
	eor seed+0
	asl
	eor seed+0
	asl
	asl
	asl
	eor seed+0
	sta seed+0
	rts

@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$009A
RESULT	= DATAORIGIN+$009C

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	MOD90						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000138  -------------------

; N = hi:lo (16-bit)
; N mod 90 -> A

    LDY a+1
    LDA Mod90Table,Y   ; tablica: (X*256) mod 90
    CLC
    ADC a              ; dodaj młodszy bajt
    CMP #90
    BCC done
    SBC #90
    CMP #90
    BCC done
    SBC #90            ; max 2 odejmowania bo 256 < 3*90
done:
    ; A = reszta mod 90

    sta Result

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$009E
RESULT	= DATAORIGIN+$00A0

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	FASTSQRT					; FUNCTION

; optimize OK (arkanoid_vbxe.pas), line = 186

	lda I
	sta :STACKORIGIN+9
	lda I+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda I+2
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda I+3
	sta :STACKORIGIN+STACKWIDTH*3+9
	lsr :STACKORIGIN+STACKWIDTH*3+9
	ror :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH*2+9
	add #$C0
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc #$1F
	sta I+3
	lda :STACKORIGIN+9
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	sta I+1

; optimize OK (arkanoid_vbxe.pas), line = 187

	lda <I
	sta :bp2
	lda >I
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta RESULT
	iny
	lda (:bp2),y
	sta RESULT+1
	iny
	lda (:bp2),y
	sta RESULT+2
	iny
	lda (:bp2),y
	sta RESULT+3
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$00A1
RESULT	= DATAORIGIN+$00A5
I	= DATAORIGIN+$00A1

@VarData	= X
@VarDataSize	= 4

	rts						; ret
.endl

.local	MOUSECOORDS					; PROCEDURE

; optimize OK (service.pas), line = 293

	lda ATARI.PORTA
	and #$0F
	sta A

; optimize OK (service.pas), line = 295

	sta @CASETMP_0007
	cmp #$0B
	jne l_0294
@

; optimize OK (service.pas), line = 296

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$0B
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_02A5
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	sub #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y
l_02A5
	jmp a_0007
l_0294
	cmp #$07
	jne l_02B0

; optimize OK (service.pas), line = 297

	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	iny
	cmp #$D8
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_02C1
	mwy X :bp2
	ldy #$00
	lda (:bp2),y
	add #$04
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y
l_02C1
l_02B0
a_0007

; ------------------------------------------------------------

X	= DATAORIGIN+$0192
A	= DATAORIGIN+$0194
@CASETMP_0007	= DATAORIGIN+$0195

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOUSECLICK					; FUNCTION

; optimize OK (service.pas), line = 306

?volatile:
	lda JOYSTICK.TRIG0
	eor #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0196

	rts						; ret
.endl

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@0201810000181000

; --- WhileProlog
l_02DE

; optimize FAIL ('VBXE.BLITTERBUSY', service.pas), line = 314

	jsr VBXE.BLITTERBUSY
	lda VBXE.BLITTERBUSY.RESULT
	jne l_02DE

; optimize OK (service.pas), line = 316

	lda DWIDTH
	sta BLT.DST_STEP_Y
	lda DWIDTH+1
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 317

	lda SWIDTH
	sta BLT.SRC_STEP_Y
	lda SWIDTH+1
	sta BLT.SRC_STEP_Y+1

; ------------------------------------------------------------

SWIDTH	= :EDX
DWIDTH	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITTEMP					; PROCEDURE | OVERLOAD | REGISTER
.local	@040180000018100001820000182000

; optimize OK (service.pas), line = 326

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 327

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 328

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 330

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 331

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 332

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 334

	lda #$00
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 336

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 338

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 340

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$0197

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
.endl							; overload

.local	BLITLETTER					; PROCEDURE | REGISTER

; -------------------  ASM Block 00000139  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 352

	lda SRC+2
	sta BLT_LETTER.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 353

	lda SRC+1
	sta BLT_LETTER.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 354

	lda SRC
	sta BLT_LETTER.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 356

	lda DST+2
	sta BLT_LETTER.DST_ADR.BYTE2

; optimize OK (service.pas), line = 357

	lda DST+1
	sta BLT_LETTER.DST_ADR.BYTE1

; optimize OK (service.pas), line = 358

	lda DST
	sta BLT_LETTER.DST_ADR.BYTE0

; -------------------  ASM Block 00000140  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 364

	lda BLT_LETTER
	sta VBXE.RUNBCB.A
	lda BLT_LETTER+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITBOX						; PROCEDURE | REGISTER

; -------------------  ASM Block 00000141  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 376

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 377

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 378

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 380

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 381

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 382

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 384

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 385

	lda #$40
	sta BLT.SRC_STEP_Y
	lda #$01
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 387

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; optimize OK (service.pas), line = 388

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 390

	lda #$00
	sta BLT.BLT_CONTROL

; -------------------  ASM Block 00000142  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 396

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$0198

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITZERO					; PROCEDURE | REGISTER

; -------------------  ASM Block 00000143  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 408

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 409

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 410

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 412

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 413

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 414

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 416

	lda #$01
	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 418

	lda #$40
	sta BLT.DST_STEP_Y
	lda #$01
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 419

	lda W
	sta BLT.SRC_STEP_Y
	lda W+1
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 421

	ldy H
	dey
	sty BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 423

	lda W
	sub #$01
	sta BLT.BLT_WIDTH
	lda W+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000144  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 429

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= :EDX
DST	= :ECX
W	= :EAX
H	= DATAORIGIN+$0199

@VarData	= H
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLITROW						; PROCEDURE

; -------------------  ASM Block 00000145  -------------------

   fxs FX_MEMS #$80
 
; optimize OK (service.pas), line = 441

	lda SRC+2
	sta BLT.SRC_ADR.BYTE2

; optimize OK (service.pas), line = 442

	lda SRC+1
	sta BLT.SRC_ADR.BYTE1

; optimize OK (service.pas), line = 443

	lda SRC
	sta BLT.SRC_ADR.BYTE0

; optimize OK (service.pas), line = 445

	lda DST+2
	sta BLT.DST_ADR.BYTE2

; optimize OK (service.pas), line = 446

	lda DST+1
	sta BLT.DST_ADR.BYTE1

; optimize OK (service.pas), line = 447

	lda DST
	sta BLT.DST_ADR.BYTE0

; optimize OK (service.pas), line = 449

	lda #$00
	sta BLT.SRC_STEP_Y
	sta BLT.SRC_STEP_Y+1

; optimize OK (service.pas), line = 450

	sta BLT.DST_STEP_Y
	sta BLT.DST_STEP_Y+1

; optimize OK (service.pas), line = 452

	sta BLT.BLT_HEIGHT

; optimize OK (service.pas), line = 453

	sta BLT.BLT_CONTROL

; optimize OK (service.pas), line = 455

	lda SIZE
	sub #$01
	sta BLT.BLT_WIDTH
	lda SIZE+1
	sbc #$00
	sta BLT.BLT_WIDTH+1

; -------------------  ASM Block 00000146  -------------------

   fxs FX_MEMS #$00
 
; optimize OK (service.pas), line = 461

	lda BLT
	sta VBXE.RUNBCB.A
	lda BLT+1
	sta VBXE.RUNBCB.A+1
	jsr VBXE.RUNBCB

; ------------------------------------------------------------

SRC	= DATAORIGIN+$019A
DST	= DATAORIGIN+$019E
SIZE	= DATAORIGIN+$01A2

@VarData	= SRC
@VarDataSize	= 10

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NOSOUND						; PROCEDURE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MYDELAY						; PROCEDURE

; ------------------------------------------------------------

A	= DATAORIGIN+$01A4

@VarData	= A
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAX						; FUNCTION

; optimize OK (service.pas), line = 587

	lda B
	cmp A
	lda B+1
	sbc A+1
	svc
	eor #$80
	jpl l_0464
	lda A
	sta RESULT
	lda A+1
	jmp l_0473
l_0464

; optimize OK (service.pas), line = 588

	lda B
	sta RESULT
	lda B+1
l_0473
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01A6
B	= DATAORIGIN+$01A8
RESULT	= DATAORIGIN+$01AA

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	MIN						; FUNCTION

; optimize OK (service.pas), line = 594

	lda A
	cmp B
	lda A+1
	sbc B+1
	svc
	eor #$80
	jpl l_048E
	lda A
	sta RESULT
	lda A+1
	jmp l_049D
l_048E

; optimize OK (service.pas), line = 595

	lda B
	sta RESULT
	lda B+1
l_049D
	sta RESULT+1
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$01AC
B	= DATAORIGIN+$01AE
RESULT	= DATAORIGIN+$01B0

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	FATAL_ERROR					; PROCEDURE
	sta ERR_TYPE

; optimize OK (service.pas), line = 604

	sta STATUS

; -------------------  ASM Block 00000147  -------------------

      sta $100
      
      kk: lda $d20a
      sta $d01a
      jmp kk
    
    
; ------------------------------------------------------------

ERR_TYPE	= DATAORIGIN+$01B2

@VarData	= ERR_TYPE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITROWARRAY					; PROCEDURE

; optimize OK (service.pas), line = 652

	lda #$00
	sta HLP
	sta HLP+1

; optimize OK (service.pas), line = 654

	sta Y

l_04BD
; --- ForToDoCondition
	ldy Y
	cpy #$C8
	jcc l_04DD

; optimize OK (service.pas), line = 657

	lda #$00
	sta adr.ROW,y
	lda #$FA
	jmp l_04EE
l_04DD

; optimize OK (service.pas), line = 659

	ldy Y
	lda HLP
	sta adr.ROW,y
	lda HLP+1
l_04EE
	sta adr.ROW+256,y

; optimize OK (service.pas), line = 661

	lda HLP
	add #$40
	sta HLP
	lda HLP+1
	adc #$01
	sta HLP+1

; --- ForToDoEpilog
	inc Y
	jne l_04BD
l_04CB

; ------------------------------------------------------------

Y	= DATAORIGIN+$01B3

@VarData	= Y
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSVGA					; PROCEDURE

; optimize OK (service.pas), line = 677

	lda GRAPH.GRAPHRESULT
	cmp #$01
	jeq l_0512

; optimize FAIL ('@print', service.pas), line = 678

	@printSTRING #CODEORIGIN+$0000
	@printEOL
	lda #$00
	jmp @halt
l_0512

; optimize OK (service.pas), line = 682

	lda #$1F
	jsr VBXE.SETHORIZONTALRES.@010180000

; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 683

	jsr VBXE.COLORMAPOFF

; optimize OK (service.pas), line = 685

	lda #$07
	jsr VBXE.VBXECONTROL

; optimize OK (service.pas), line = 687

	lda #$14
	jsr VBXE.SETTOPBORDER

; optimize OK (service.pas), line = 688

	lda #$C8
	jsr VBXE.SETXDLHEIGHT

; optimize OK (service.pas), line = 690

	lda #$00
	sta VBXE_RAM.POSITION
	lda #$50
	sta VBXE_RAM.POSITION+1
	lda #$00
	sta VBXE_RAM.POSITION+2
	sta VBXE_RAM.POSITION+3

; optimize OK (service.pas), line = 691

	sta VBXE_RAM.SIZE
	lda #$FA
	sta VBXE_RAM.SIZE+1
	lda #$00
	sta VBXE_RAM.SIZE+2
	sta VBXE_RAM.SIZE+3

; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 692

	lda VBXE_RAM
	ldy VBXE_RAM+1
	jsr VBXE.TVBXEMEMORYSTREAM.CLEAR

; optimize OK (service.pas), line = 694

	lda #$00
	sta ATARI.DMACTL

; -------------------  ASM Block 00000148  -------------------

	  fxs FX_MEMS #$80
	
; optimize OK (service.pas), line = 700

	lda BLT
	sta :bp2
	lda BLT+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 702

	lda BLT_LETTER
	sta :bp2
	lda BLT_LETTER+1
	sta :bp2+1
	lda #$00
	ldy #$14
	sta:rpl (:bp2),y-

; optimize OK (service.pas), line = 705

	lda #$01
	sta BLT.SRC_STEP_X

; optimize OK (service.pas), line = 706

	sta BLT.DST_STEP_X

; optimize OK (service.pas), line = 708

	lda #$FF
	sta BLT.BLT_AND_MASK

; optimize OK (service.pas), line = 712

	lda #$01
	sta BLT_LETTER.SRC_STEP_X

; optimize OK (service.pas), line = 713

	sta BLT_LETTER.DST_STEP_X

; optimize OK (service.pas), line = 715

	sta BLT_LETTER.BLT_CONTROL

; optimize OK (service.pas), line = 717

	lda #$40
	sta BLT_LETTER.DST_STEP_Y
	lda #$01
	sta BLT_LETTER.DST_STEP_Y+1

; optimize OK (service.pas), line = 718

	lda #$80
	sta BLT_LETTER.SRC_STEP_Y
	lda #$00
	sta BLT_LETTER.SRC_STEP_Y+1

; optimize OK (service.pas), line = 720

	lda #$07
	sta BLT_LETTER.BLT_HEIGHT

; optimize OK (service.pas), line = 722

	lda #$0F
	sta BLT_LETTER.BLT_WIDTH
	lda #$00
	sta BLT_LETTER.BLT_WIDTH+1

; optimize OK (service.pas), line = 724

	lda #$FF
	sta BLT_LETTER.BLT_AND_MASK

; -------------------  ASM Block 00000149  -------------------

	  fxs FX_MEMS #$00
	
; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 730

	jsr SYSTEM.PAUSE.@00

; -------------------  ASM Block 00000150  -------------------

  sei
  lda #0
  sta nmien
  sta irqen
  
  lda #$fe
  sta portb
 
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 759

	lda SHINEREC.XB
	sta XB

; optimize OK (service.pas), line = 760

	lda SHINEREC.YB
	sta YB

; optimize OK (service.pas), line = 762

	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; -------------------  ASM Block 00000151  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 769

	ldy I
	lda adr.WALL,y
	cmp #$09
	jcc l_0599

; optimize OK (service.pas), line = 771

	lda SHINEREC.FRAME
	lsr @
	sta FRAME
	lda #$00
	sta FRAME+1

; optimize OK (service.pas), line = 772

	lda adr.WALL,y
	cmp #$0A
	jeq l_05B9
	lda FRAME
	add #$05
	sta FRAME
	scc
	inc FRAME+1
l_05B9

; optimize OK (service.pas), line = 774

	lda XB
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$09
	add :STACKORIGIN+10
	sta XF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta XF+1

; optimize OK (service.pas), line = 775

	lda YB
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$16
	add :STACKORIGIN+10
	sta YF
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta YF+1

; optimize OK (service.pas), line = 776

	lda FRAME
	sta :STACKORIGIN+9
	lda FRAME+1
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta FR+1
	lda :STACKORIGIN+9
	sta FR

; optimize OK (service.pas), line = 779

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 781

	lda XF
	sta :STACKORIGIN+11
	lda #$50
	add XF+1
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda YF
	add Y
	tay
	lda :STACKORIGIN+11
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda :STACKORIGIN+STACKWIDTH+11
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda :STACKORIGIN+STACKWIDTH*2+11
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda :STACKORIGIN+STACKWIDTH*3+11
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda SHINEWALL.OFS
	add FR
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda SHINEWALL.OFS+1
	adc FR+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda SHINEWALL.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda SHINEWALL.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000
l_0599

; -------------------  ASM Block 00000152  -------------------

	  fxs FX_MEMS #$00
       
; optimize FAIL (0, service.pas), line = 800

	inc SHINEREC.FRAME

; optimize OK (service.pas), line = 801

	lda SHINEREC.FRAME
	cmp #$0A
	jne l_0619
	lda #$00
	sta SHINEREC.ACTIVE
l_0619

; ------------------------------------------------------------

XB	= DATAORIGIN+$01B4
YB	= DATAORIGIN+$01B5
FRAME	= DATAORIGIN+$01B6
XF	= DATAORIGIN+$01B8
YF	= DATAORIGIN+$01BA
FR	= DATAORIGIN+$01BC
Y	= DATAORIGIN+$01BE
I	= DATAORIGIN+$01BF

@VarData	= XB
@VarDataSize	= 12

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UNSHINE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 811

	lda #$09
	sta SHINEREC.FRAME

; optimize FAIL ('SHINE_BLOCK', service.pas), line = 812

	jsr SHINE_BLOCK

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHINE						; PROCEDURE

; optimize OK (service.pas), line = 820

	lda SHINEREC.ACTIVE
	jeq l_0639
	jsr UNSHINE_BLOCK
l_0639

; optimize OK (service.pas), line = 822

	lda XB
	sta SHINEREC.XB

; optimize OK (service.pas), line = 823

	lda YB
	sta SHINEREC.YB

; optimize OK (service.pas), line = 824

	lda #$00
	sta SHINEREC.FRAME

; optimize OK (service.pas), line = 825

	lda #$01
	sta SHINEREC.ACTIVE

; optimize OK (service.pas), line = 826

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	sta SHINEREC.BLOCK

; ------------------------------------------------------------

XB	= DATAORIGIN+$01C0
YB	= DATAORIGIN+$01C1

@VarData	= XB
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKSHINE					; PROCEDURE

; optimize OK (service.pas), line = 833

	lda SHINEREC.ACTIVE
	cmp #$01
	jne l_067A
	jsr SHINE_BLOCK
l_067A

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_LETTER_DROP				; FUNCTION

; --- RepeatUntilProlog
l_0683

; optimize OK (service.pas), line = 842

	lda #$64
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta RN
	lda RAND.RESULT+1
	sta RN+1

; optimize OK (service.pas), line = 843

	lda #$00
	sta SUM
	sta SUM+1

; optimize OK (service.pas), line = 844

	sta LETTER
	sta LETTER+1

; --- RepeatUntilProlog
l_0691

; optimize FAIL (0, service.pas), line = 849

	inc LETTER
	sne
	inc LETTER+1

; optimize OK (service.pas), line = 850

	ldy LETTER
	lda adr.LETTER_DIS,y
	add SUM
	sta SUM
	lda SUM+1
	adc #$00
	sta SUM+1

; optimize OK (service.pas), line = 853

	lda RN+1
	cmp SUM+1
	bne @+
	lda RN
	cmp SUM
@
	jcs l_0691

; optimize OK (service.pas), line = 857

	lda LETTER
	sub #$01
	sta :STACKORIGIN+9
	lda LETTER+1
	sbc #$00
	cmp LETT.LAST+1
	bne @+
	lda :STACKORIGIN+9
	cmp LETT.LAST
@
	jeq l_0683

; optimize OK (service.pas), line = 859

	lda LETTER
	sub #$01
	sta RESULT
	lda LETTER+1
	sbc #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01C2
RN	= DATAORIGIN+$01C4
SUM	= DATAORIGIN+$01C6
LETTER	= DATAORIGIN+$01C8

@VarData	= RN
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUT_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 866

	lda #$00
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda LETT.TYP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.TYP
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	rol :STACKORIGIN+STACKWIDTH*2+9
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda :STACKORIGIN+9
	sta :STACKORIGIN+STACKWIDTH+9
	lda LETT.FRAME
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	add :STACKORIGIN+STACKWIDTH+9
	sta FL+1
	lda :STACKORIGIN+10
	sta FL

; optimize OK (service.pas), line = 868

	ldy LETT.Y
	lda LETT.X
	add adr.ROW,y
	sta BLITLETTER.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITLETTER.DST+1
	lda #$00
	adc #$00
	sta BLITLETTER.DST+2
	lda #$00
	adc #$00
	sta BLITLETTER.DST+3
	lda LETTERS.OFS
	add FL
	sta BLITLETTER.SRC
	lda LETTERS.OFS+1
	adc FL+1
	sta BLITLETTER.SRC+1
	lda LETTERS.OFS+2
	adc #$00
	sta BLITLETTER.SRC+2
	lda LETTERS.OFS+3
	adc #$00
	sta BLITLETTER.SRC+3
	jsr BLITLETTER

; ------------------------------------------------------------

FL	= DATAORIGIN+$01CA
FW	= DATAORIGIN+$01CC

@VarData	= FL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 875

	ldy LETT.Y
	cpy #$C8
	jcs l_0704

; optimize OK (service.pas), line = 877

	lda LETT.X
	adc adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 879

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$10
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$08
	sta BLITBOX.H
	jsr BLITBOX
l_0704

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLE_LETTER					; PROCEDURE

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 888

	jsr REMOVE_LETTER

; optimize OK (service.pas), line = 889

	lda #$00
	sta LETT.ACTIVE

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 895

	lda LETT.ACTIVE
	jeq l_073D
	jsr DISABLE_LETTER
l_073D

; optimize OK (service.pas), line = 897

	lda XL
	sta LETT.X

; optimize OK (service.pas), line = 898

	lda YL
	sta LETT.Y

; optimize OK (service.pas), line = 899

	lda LETTER
	sta LETT.TYP
	lda LETTER+1
	sta LETT.TYP+1

; optimize OK (service.pas), line = 900

	lda #$00
	sta LETT.FRAME

; optimize OK (service.pas), line = 901

	sta LETT.SUBFRAME

; optimize OK (service.pas), line = 902

	lda #$01
	sta LETT.ACTIVE

; ------------------------------------------------------------

XL	= DATAORIGIN+$01CE
YL	= DATAORIGIN+$01CF
LETTER	= DATAORIGIN+$01D0

@VarData	= XL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_LETTER					; PROCEDURE

; optimize OK (service.pas), line = 908

	lda LETT.ACTIVE
	jeq l_076E

; optimize FAIL ('REMOVE_LETTER', service.pas), line = 910

	jsr REMOVE_LETTER

; optimize FAIL (0, service.pas), line = 911

	inc LETT.Y

; optimize OK (service.pas), line = 912

	lda LETT.Y
	cmp #$C8
	jcc l_0786
; optimize FAIL ('DISABLE_LETTER', service.pas), line = 913
	jmp l_0791
l_0786

; optimize FAIL ('PUT_LETTER', service.pas), line = 915

	jsr PUT_LETTER

; optimize FAIL (0, service.pas), line = 916

	inc LETT.SUBFRAME

; optimize OK (service.pas), line = 917

	lda LETT.SUBFRAME
	cmp #$05
	jne l_07A8

; optimize OK (service.pas), line = 919

	lda #$00
	sta LETT.SUBFRAME

; optimize FAIL (0, service.pas), line = 920

	inc LETT.FRAME
l_07A8

; optimize OK (service.pas), line = 923

	lda LETT.FRAME
	cmp #$08
	jne l_07C5
	lda #$00
	sta LETT.FRAME
l_07C5

; optimize OK (service.pas), line = 925

	lda LETT.X
	add #$10
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+10
	bne @+
	lda VAUS.X
	cmp :STACKORIGIN+10
@
	jcs l_081E
@
	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.X
@
	jcc l_081E
	jeq l_081E
@
	lda LETT.Y
	add #$08
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda VAUS.Y
	cmp :STACKORIGIN+11
@
	jcs l_081E
@
	lda VAUS.Y
	add VAUS.HEIGHT
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+10
	cmp LETT.Y
@
	jcc l_081E
	jeq l_081E
@

; optimize OK (service.pas), line = 928

	lda #$64
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 929

	ldy LETT.TYP
	iny
	sty VAUS.LETTER

; optimize OK (service.pas), line = 930

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$E8
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$03
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y
l_0791

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 931

	jsr DISABLE_LETTER
l_081E

; optimize OK (service.pas), line = 935

	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
	jmp l_083F
l_076E

; optimize OK (service.pas), line = 937

	lda LETT.INCOMING
	cmp #$E9
	lda LETT.INCOMING+1
	sbc #$03
	svc
	eor #$80
	jmi l_0850

; optimize OK (service.pas), line = 938

	lda LETT.NEXTX
	sta START_LETTER.XL
	lda LETT.NEXTY
	sta START_LETTER.YL
	lda LETT.NEXTTYPE
	sta START_LETTER.LETTER
	lda LETT.NEXTTYPE+1
	sta START_LETTER.LETTER+1
	jsr START_LETTER
l_083F
l_0850

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWBTMPICTURE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$06
	mva:rpl (:bp2),y adr.BTM,y-
	dex
@main

; optimize OK (service.pas), line = 946

	lda BTM.OFS
	sta BLITBOX.SRC
	lda BTM.OFS+1
	sta BLITBOX.SRC+1
	lda BTM.OFS+2
	sta BLITBOX.SRC+2
	lda BTM.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda BTM.WIDTH
	sta BLITBOX.W
	lda BTM.WIDTH+1
	sta BLITBOX.W+1
	lda BTM.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

adr.BTM	= DATAORIGIN+$01D2	; [7] RECORD
.var BTM	= adr.BTM .word
BTM.WIDTH	= DATAORIGIN+$01D2
BTM.HEIGHT	= DATAORIGIN+$01D4
BTM.OFS	= DATAORIGIN+$01D5

@VarData	= BTM.WIDTH
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 957

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 959

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda BALLDATA.OFS
	sta BLITZERO.SRC
	lda BALLDATA.OFS+1
	sta BLITZERO.SRC+1
	lda BALLDATA.OFS+2
	sta BLITZERO.SRC+2
	lda BALLDATA.OFS+3
	sta BLITZERO.SRC+3
	lda #$05
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda #$05
	sta BLITZERO.H
	jsr BLITZERO

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01D9
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 969

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$03
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$03
	tay
	lda :STACKORIGIN+9
	add adr.ROW,y
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 971

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$05
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$05
	sta BLITBOX.H
	jsr BLITBOX

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01DD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_VBL					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 994

	jsr SYSTEM.PAUSE.@00

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1006

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_08D3s
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	cmp #$FF
	jeq l_08D3s
	lda:sne #$01
l_08D3s	lda #$00
	sta B0

; optimize OK (service.pas), line = 1007

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_08EBs
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	ldy #BALL.Y-DATAORIGIN
	lda :STACKORIGIN+10
	cmp (:bp2),y
	bne @+
	jmp *+6
@\	jmp l_08EBs
	lda:seq #$00
l_08EBs	lda #$01
	sta B1

; optimize OK (service.pas), line = 1009

	lda B0
	and B1
	jeq l_08FD

; optimize OK (service.pas), line = 1010

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_08FD

; optimize OK (service.pas), line = 1012

	lda BALL
	sta PLACE_BALL.BALL
	lda BALL+1
	sta PLACE_BALL.BALL+1
	jsr PLACE_BALL

; optimize OK (service.pas), line = 1014

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1015

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.OLDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01E1
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$01E5
B1	= DATAORIGIN+$01E6

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_SPEED					; PROCEDURE

; optimize OK (service.pas), line = 1028

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SX
	iny
	lda (:bp2),y
	sta SX+1

; optimize OK (service.pas), line = 1029

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SY
	iny
	lda (:bp2),y
	sta SY+1

; optimize OK (service.pas), line = 1031

	lda SX
	sta SYSTEM.ABS.@010184000.X
	lda SX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 1032

	lda SY
	sta SYSTEM.ABS.@010184000.X
	lda SY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 1034

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1036

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	lda FASTSQRT.RESULT
	sta F_HLP
	lda FASTSQRT.RESULT+1
	sta F_HLP+1
	lda FASTSQRT.RESULT+2
	sta F_HLP+2
	lda FASTSQRT.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 1038

	lda SPEED
	sta :FPMAN0
	ldy #$00
	lda SPEED+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda F_HLP
	sta :FP2MAN0
	lda F_HLP+1
	sta :FP2MAN1
	lda F_HLP+2
	sta :FP2MAN2
	lda F_HLP+3
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta VM
	lda :FPMAN1
	sta VM+1
	lda :FPMAN2
	sta VM+2
	lda :FPMAN3
	sta VM+3

; optimize OK (service.pas), line = 1043

	lda SX
	sta :FPMAN0
	ldy #$00
	lda SX+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1044

	lda SY
	sta :FPMAN0
	ldy #$00
	lda SY+1
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda VM
	sta :FP2MAN0
	lda VM+1
	sta :FP2MAN1
	lda VM+2
	sta :FP2MAN2
	lda VM+3
	sta :FP2MAN3
	jsr @FMUL
	jsr @F2I
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :FPMAN0
	sta (:bp2),y
	iny
	lda :FPMAN1
	sta (:bp2),y

; optimize OK (service.pas), line = 1046

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_096F
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_096F

; optimize OK (service.pas), line = 1047

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_0987
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$A0
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_0987

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01E7
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
SPEED	= DATAORIGIN+$01EB
SX	= DATAORIGIN+$01ED
SY	= DATAORIGIN+$01EF
VM	= DATAORIGIN+$01F1
I	= DATAORIGIN+$01F5
A	= DATAORIGIN+$01F9
B	= DATAORIGIN+$01FB

@VarData	= BALL
@VarDataSize	= 20

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_BALL_DIRECTION				; PROCEDURE

; optimize OK (service.pas), line = 1055

	lda ANGLE+1
	jpl l_09A3
	lda ANGLE
	add #$68
	sta ANGLE
	lda ANGLE+1
	adc #$01
	sta ANGLE+1
l_09A3

; --- WhileProlog
	jmp l_09A9
l_09AA

; optimize OK (service.pas), line = 1057

	lda ANGLE
	sub #$68
	sta ANGLE
	lda ANGLE+1
	sbc #$01
	sta ANGLE+1
l_09A9
	lda ANGLE
	cmp #$68
	lda ANGLE+1
	sbc #$01
	svc
	eor #$80
	jpl l_09AA

; optimize OK (service.pas), line = 1059

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	add #$B4
	sta :bp2
	lda #$C4
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1060

	lda ANGLE+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda ANGLE
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$C4
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda #$00
	sub (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	sbc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$01FD
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
ANGLE	= DATAORIGIN+$0201

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GET_BALL_DIRECTION				; FUNCTION

; optimize OK (service.pas), line = 1075

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN+$01
	lda (:bp2),y
	dey
	ora (:bp2),y
	jne l_09E0

; optimize OK (service.pas), line = 1077

	ldy #$00
	lda (:bp2),y
	jmi l_09F2

; optimize OK (service.pas), line = 1078

	lda #$A6
	sta W
	lda #$FF
	jmp l_0A00
l_09F2

; optimize OK (service.pas), line = 1080

	lda #$5A
	sta W
	lda #$00
l_0A00
	sta W+1
	jmp l_0A0D
l_09E0

; optimize OK (service.pas), line = 1088

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta :FPMAN0
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+10
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta :STACKORIGIN+10
	lda :FPMAN1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :FPMAN2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :FPMAN3
	sta :STACKORIGIN+STACKWIDTH*3+10
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta :FPMAN1
	sty :FPMAN2
	sty :FPMAN3
	lda :STACKORIGIN+9
	sta :FPMAN0
	jsr @I2F
	lda :FPMAN0
	sta :FP1MAN0
	lda :FPMAN1
	sta :FP1MAN1
	lda :FPMAN2
	sta :FP1MAN2
	lda :FPMAN3
	sta :FP1MAN3
	lda :STACKORIGIN+10
	sta :FP2MAN0
	lda :STACKORIGIN+STACKWIDTH+10
	sta :FP2MAN1
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta :FP2MAN2
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta :FP2MAN3
	jsr @FDIV
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	eor #$80
	sta F_HLP+3

; optimize OK (service.pas), line = 1090

	lda F_HLP
	sta SYSTEM.ARCTAN.@01018F000.A
	lda F_HLP+1
	sta SYSTEM.ARCTAN.@01018F000.A+1
	lda F_HLP+2
	sta SYSTEM.ARCTAN.@01018F000.A+2
	lda F_HLP+3
	sta SYSTEM.ARCTAN.@01018F000.A+3
	jsr SYSTEM.ARCTAN.@01018F000
	inx
	inx
	lda #$00
	sta :FP2MAN0
	lda #$00
	sta :FP2MAN1
	lda #$34
	sta :FP2MAN2
	lda #$43
	sta :FP2MAN3
	lda SYSTEM.ARCTAN.@01018F000.RESULT
	sta :FP1MAN0
	lda SYSTEM.ARCTAN.@01018F000.RESULT+1
	sta :FP1MAN1
	lda SYSTEM.ARCTAN.@01018F000.RESULT+2
	sta :FP1MAN2
	lda SYSTEM.ARCTAN.@01018F000.RESULT+3
	sta :FP1MAN3
	jsr @FMUL
	lda :FPMAN0
	sta :STACKORIGIN-1,x
	lda :FPMAN1
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :FPMAN2
	sta :STACKORIGIN-1+STACKWIDTH*2,x
	lda :FPMAN3
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	lda #$DB
	sta :FP2MAN0
	lda #$0F
	sta :FP2MAN1
	lda #$49
	sta :FP2MAN2
	lda #$40
	sta :FP2MAN3
	lda :STACKORIGIN-1,x
	sta :FP1MAN0
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta :FP1MAN1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta :FP1MAN2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta :FP1MAN3
	jsr @FDIV
	dex
	lda :FPMAN0
	sta F_HLP
	lda :FPMAN1
	sta F_HLP+1
	lda :FPMAN2
	sta F_HLP+2
	lda :FPMAN3
	sta F_HLP+3
	dex

; optimize OK (service.pas), line = 1092

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta W
	lda :FPMAN1
	sta W+1

; optimize OK (service.pas), line = 1094

	mwy BALL :bp2
	ldy #$00
	lda (:bp2),y
	jpl l_0A3C
	lda W
	add #$B4
	sta W
	scc
	inc W+1
l_0A3C

; optimize OK (service.pas), line = 1096

	lda W
	add #$68
	sta W
	lda W+1
	adc #$01

; --- WhileProlog
	jmp l_0A43
l_0A44

; optimize OK (service.pas), line = 1099

	lda W
	sub #$68
	sta W
	lda W+1
	sbc #$01
l_0A43
	sta W+1
	lda W
	cmp #$68
	lda W+1
	sbc #$01
	svc
	eor #$80
	jpl l_0A44
l_0A0D

; optimize OK (service.pas), line = 1102

	lda W
	sta RESULT
	lda W+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0203
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
RESULT	= DATAORIGIN+$0207
W	= DATAORIGIN+$0209

@VarData	= BALL
@VarDataSize	= 4

	rts						; ret
.endl

.local	START_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1111

	mwy BALL :bp2
	ldy #BALL.ONVAUS-DATAORIGIN
	lda VAUS.X
	add (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda #$00
	adc (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.X-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y

; optimize OK (service.pas), line = 1117

	ldy #BALL.Y-DATAORIGIN
	lda VAUS.Y
	sub #$03
	sta (:bp2),y
	iny
	lda #$00
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1122

	ldy #BALL.FINEX-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1123

	ldy #BALL.FINEY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1125

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1127

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1128

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$020B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_SPEED					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$19
	mva:rpl (:bp2),y adr.BALL,y-
	dex
@main

; optimize OK (service.pas), line = 1140

	lda BALL.SPEEDX
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1

; optimize OK (service.pas), line = 1141

	lda BALL.SPEEDY
	sta SYSTEM.ABS.@010184000.X
	lda BALL.SPEEDY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 1143

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta I
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta I+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta I+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta I+3

; optimize OK (service.pas), line = 1145

	lda I
	sta :FPMAN0
	lda I+1
	sta :FPMAN1
	lda I+2
	sta :FPMAN2
	lda I+3
	sta :FPMAN3
	jsr @I2F
	lda :FPMAN0
	sta FASTSQRT.X
	lda :FPMAN1
	sta FASTSQRT.X+1
	lda :FPMAN2
	sta FASTSQRT.X+2
	lda :FPMAN3
	sta FASTSQRT.X+3
	jsr FASTSQRT
	lda FASTSQRT.RESULT
	sta F_HLP
	lda FASTSQRT.RESULT+1
	sta F_HLP+1
	lda FASTSQRT.RESULT+2
	sta F_HLP+2
	lda FASTSQRT.RESULT+3
	sta F_HLP+3

; optimize OK (service.pas), line = 1147

	lda F_HLP
	sta :FPMAN0
	lda F_HLP+1
	sta :FPMAN1
	lda F_HLP+2
	sta :FPMAN2
	lda F_HLP+3
	sta :FPMAN3
	jsr @F2I
	lda :FPMAN0
	sta RESULT
	lda :FPMAN1
	sta RESULT+1
@exit

; ------------------------------------------------------------

adr.BALL	= DATAORIGIN+$020F	; [26] RECORD
.var BALL	= adr.BALL .word
BALL.X	= DATAORIGIN+$020F
BALL.Y	= DATAORIGIN+$0211
BALL.FINEX	= DATAORIGIN+$0213
BALL.FINEY	= DATAORIGIN+$0214
BALL.OLDX	= DATAORIGIN+$0215
BALL.OLDY	= DATAORIGIN+$0217
BALL.SPEED	= DATAORIGIN+$0219
BALL.FINESPEED	= DATAORIGIN+$021B
BALL.SPEEDX	= DATAORIGIN+$021D
BALL.SPEEDY	= DATAORIGIN+$021F
BALL.SBD	= DATAORIGIN+$0221
BALL.BRWHIT	= DATAORIGIN+$0223
BALL.INPLAY	= DATAORIGIN+$0224
BALL.LAUNCH	= DATAORIGIN+$0225
BALL.ONVAUS	= DATAORIGIN+$0226
BALL.STM	= DATAORIGIN+$0228
RESULT	= DATAORIGIN+$0229
I	= DATAORIGIN+$022B
A	= DATAORIGIN+$022F
B	= DATAORIGIN+$0231

@VarData	= BALL.X
@VarDataSize	= 34

	rts						; ret
.endl

.local	MOVE_BALL					; PROCEDURE

; optimize OK (service.pas), line = 1163

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEX-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDX-DATAORIGIN
	add (:bp2),y
	sta X
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta X+1

; optimize OK (service.pas), line = 1164

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.FINEY-DATAORIGIN
	lda (:bp2),y
	ldy #BALL.SPEEDY-DATAORIGIN
	add (:bp2),y
	sta Y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y
	sta Y+1

; optimize OK (service.pas), line = 1166

	ldy #BALL.X-DATAORIGIN
	lda X+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1167

	ldy #BALL.Y-DATAORIGIN
	lda Y+1
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1169

	ldy #BALL.FINEX-DATAORIGIN
	lda X
	sta (:bp2),y

; optimize OK (service.pas), line = 1170

	ldy #BALL.FINEY-DATAORIGIN
	lda Y
	sta (:bp2),y

; optimize OK (service.pas), line = 1175

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$D9
	jcc l_0B13

; optimize OK (service.pas), line = 1177

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1178

	ldy #BALL.X-DATAORIGIN
	lda #$B0
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$01
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1179

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1180

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B13

; optimize OK (service.pas), line = 1185

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	cmp #$0A
	jcs l_0B49

; optimize OK (service.pas), line = 1187

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1188

	ldy #BALL.X-DATAORIGIN
	lda #$14
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1189

	ldy #BALL.FINEX-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1190

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B49

; optimize OK (service.pas), line = 1195

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	cmp #$0C
	jcs l_0B7F

; optimize OK (service.pas), line = 1197

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1198

	ldy #BALL.Y-DATAORIGIN
	lda #$18
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1199

	ldy #BALL.FINEY-DATAORIGIN
	lda #$FF
	eor (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1200

	lda #$F0
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_0B7F

; optimize OK (service.pas), line = 1208

	mwy BALL :bp2
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	add #$03
	ldy #1
	cmp #$B8
	seq
	bcs @+
	dey
@
	tya
	sta B0

; optimize OK (service.pas), line = 1209

	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+9
	bmi @+
	ora :STACKORIGIN+9
	sne
@
	dey
@
	tya
	sta B1

; optimize OK (service.pas), line = 1210

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9

	lda #$B8
	cmp :STACKORIGIN+9
	lda #$00
	rol @
	sta B2

; optimize OK (service.pas), line = 1213

	lda B0
	and B1
	and B2
	jeq l_0BE1

; optimize OK (service.pas), line = 1217

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	sub #$03
	cmp :STACKORIGIN+9
	jcs l_0C10
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda VAUS.X
	add VAUS.WIDTH
	add #$03
	sta :STACKORIGIN+11
	lda :STACKORIGIN+10
	cmp :STACKORIGIN+11
	jcs l_0C10

; optimize OK (service.pas), line = 1220

	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1222

	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 1224

	lda VAUS.LETTER
	cmp #$06
	jne l_0C38
	ldy #BALL.LAUNCH-DATAORIGIN
	lda (:bp2),y
	jne l_0C38

; optimize OK (service.pas), line = 1226

	ldy #BALL.STM-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 1227

	ldy #BALL.LAUNCH-DATAORIGIN
	lda #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 1228

	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub VAUS.X
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #BALL.ONVAUS-DATAORIGIN
	lda :STACKORIGIN+9
	sta (:bp2),y
	iny
	lda :STACKORIGIN+STACKWIDTH+9
	sta (:bp2),y
l_0C38

; optimize OK (service.pas), line = 1231

	lda #$2C
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$06
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 1235

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add #$0A
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_0C68

; optimize OK (service.pas), line = 1238

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1242

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	add RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	adc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1250

	lda #$A0
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda ANGLE
	sta MIN.B
	lda ANGLE+1
	sta MIN.B+1
	jsr MIN
	lda #$78
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MAX.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MAX.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1255

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0C68

; optimize OK (service.pas), line = 1261

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda VAUS.X
	add VAUS.WIDTH
	sub #$0A
	cmp :STACKORIGIN+9
	jcs l_0CA9

; optimize OK (service.pas), line = 1263

	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 1264

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	lda :STACKORIGIN,x
	sub RAND.RESULT
	sta ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sbc RAND.RESULT+1
	sta ANGLE+1
	dex

; optimize OK (service.pas), line = 1265

	lda #$14
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda ANGLE
	sta MAX.B
	lda ANGLE+1
	sta MAX.B+1
	jsr MAX
	lda #$3C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda MIN.RESULT
	sta SET_BALL_DIRECTION.ANGLE
	lda MIN.RESULT+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 1266

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_0CA9
l_0C10
l_0BE1

; optimize OK (service.pas), line = 1277

	mwy BALL :bp2
	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	ldy #1
	cmp #$B9
	bcs @+
	dey
@
	sty :STACKORIGIN+9
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10

	lda :STACKORIGIN+10
	cmp #$C9
	lda #$00
	rol @
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+10
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #1
	lda :STACKORIGIN+STACKWIDTH+10
	bmi @+
	ora :STACKORIGIN+10
	sne
@
	dey
@
	tya
	and :STACKORIGIN+9
	jeq l_0CF8

; optimize OK (service.pas), line = 1279

	ldy #BALL.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1280

	lda BALL
	sta REMOVE_BALL.BALL
	lda BALL+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_0CF8

; ------------------------------------------------------------

BALL	= DATAORIGIN+$0233
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
B0	= DATAORIGIN+$0237
B1	= DATAORIGIN+$0238
B2	= DATAORIGIN+$0239
X	= DATAORIGIN+$023A
Y	= DATAORIGIN+$023C
ANGLE	= DATAORIGIN+$023E

@VarData	= BALL
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MODIFY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1288

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1289

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1290

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1296

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1297

	lda #$B8
	sta VAUS.Y

; optimize OK (service.pas), line = 1299

	lda #$FF
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1300

	lda #$FF
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1301

	sta VAUS.IFLASH

; optimize OK (service.pas), line = 1305

	sta VAUS.FLASH

; optimize OK (service.pas), line = 1309

	lda PLAYVAUS.WIDTH
	sta VAUS.WIDTH

; optimize OK (service.pas), line = 1310

	lda PLAYVAUS.HEIGHT
	sta VAUS.HEIGHT

; optimize OK (service.pas), line = 1311

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

; optimize OK (service.pas), line = 1312

	lda #$FF
	sta VAUS.LETTER

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	START_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1322

	lda #$5F
	sta VAUS.X

; optimize OK (service.pas), line = 1323

	lda #$B8
	sta VAUS.Y

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1337

	ldy VAUS.OLDY
	lda VAUS.OLDX
	add adr.ROW,y
	sta HLP
	lda VAUS.OLDX+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 1339

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda VAUS.OLDLEN
	sta BLITBOX.W
	lda VAUS.OLDLEN+1
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 1341

	lda VAUS.WIDTH
	sta VAUS.OLDLEN
	lda #$00
	sta VAUS.OLDLEN+1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_VAUS					; PROCEDURE

; optimize FAIL (0, service.pas), line = 1351

	inc VAUS.IFLASH

; optimize OK (service.pas), line = 1353

	lda VAUS.IFLASH
	cmp #$0B
	jcc l_0D96

; optimize FAIL (0, service.pas), line = 1355

	inc VAUS.FLASH

; optimize OK (service.pas), line = 1356

	lda #$00
	sta VAUS.IFLASH
l_0D96

; optimize OK (service.pas), line = 1359

	lda VAUS.FLASH
	cmp #$0B
	jcc l_0DB3
	lda #$00
	sta VAUS.FLASH
l_0DB3

; optimize OK (service.pas), line = 1369

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW,y
	sta BLITZERO.DST
	lda #$50
	adc adr.ROW+256,y
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda PLAYVAUS.OFS
	sta BLITZERO.SRC
	lda PLAYVAUS.OFS+1
	sta BLITZERO.SRC+1
	lda PLAYVAUS.OFS+2
	sta BLITZERO.SRC+2
	lda PLAYVAUS.OFS+3
	sta BLITZERO.SRC+3
	lda VAUS.WIDTH
	sta BLITZERO.W
	lda #$00
	sta BLITZERO.W+1
	lda VAUS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

; -------------------  ASM Block 00000153  -------------------

   fxs FX_MEMS #$80
  
; optimize OK (service.pas), line = 1375

	ldy VAUS.Y
	lda VAUS.X
	add adr.ROW+$02,y
	sta HLP
	lda #$00
	adc adr.ROW+256+$02,y
	sta HLP+1

; optimize OK (service.pas), line = 1377

	lda HLP
	sta VIDEO
	lda #$50
	add HLP+1
	sta VIDEO+1
	lda #$00
	adc #$00
	sta VIDEO+2
	lda #$00
	adc #$00
	sta VIDEO+3

; optimize OK (service.pas), line = 1379

	lda VAUS.HEIGHT
	sub #$04
	sta Y

; optimize OK (service.pas), line = 1381

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1382

	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1408

	lda Y
	sta I
	jmp l_0E0Bf
l_0E0B
; --- ForToDoCondition
	dec I
l_0E0Bf
	ldy VAUS.FLASH
	lda adr.FLASH,y
	ldy I
	sta adr.SCR,y

; --- ForToDoEpilog
	lda I
	jne l_0E0B
l_0E19

; optimize OK (service.pas), line = 1410

	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1411

	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda VIDEO
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1413

	ldy VAUS.WIDTH
	dey
	sty I

; optimize OK (service.pas), line = 1414

	lda VIDEO
	add I
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda VIDEO+1
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda VIDEO+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda VIDEO+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda Y
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000154  -------------------

   fxs FX_MEMS #$00
  
; ------------------------------------------------------------

I	= DATAORIGIN+$0240
Y	= DATAORIGIN+$0241
VIDEO	= DATAORIGIN+$0242

@VarData	= I
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 1429

	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp #$FF
@
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda VAUS.OLDX+1
	cmp #$00
	bne @+
	lda VAUS.OLDX
	cmp VAUS.X
@
	bne @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda #$00
	cmp VAUS.OLDLEN+1
	bne @+
	lda VAUS.WIDTH
	cmp VAUS.OLDLEN
@
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0E7A

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1430

	jsr REMOVE_VAUS
l_0E7A

; optimize OK (service.pas), line = 1432

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 1433

	lda VAUS.Y
	sta VAUS.OLDY
	lda #$00
	sta VAUS.OLDY+1

; optimize OK (service.pas), line = 1441

	lda #$D8
	sub VAUS.WIDTH
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda X
	sta MIN.A
	lda X+1
	sta MIN.A+1
	jsr MIN
	lda #$0A
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.X

; optimize OK (service.pas), line = 1442

	lda #$C8
	sub VAUS.HEIGHT
	sta MIN.B
	lda #$00
	sbc #$00
	sta MIN.B+1
	lda Y
	sta MIN.A
	lda Y+1
	sta MIN.A+1
	jsr MIN
	lda #$0C
	sta MAX.A
	lda #$00
	sta MAX.A+1
	lda MIN.RESULT
	sta MAX.B
	lda MIN.RESULT+1
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta VAUS.Y

; optimize FAIL ('PLACE_VAUS', service.pas), line = 1444

	jsr PLACE_VAUS

; ------------------------------------------------------------

X	= DATAORIGIN+$0246
Y	= DATAORIGIN+$0248

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1459

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1460

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1462

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000155  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1468

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1469

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1471

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1472

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1475

	lda #$07
	sta Y

l_0EFA
; --- ForToDoCondition
	lda YS
	add Y
	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YH+1
	lda :eax
	sta YH

; optimize OK (service.pas), line = 1487

	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1489

	lda #$0F
	sta X

l_0F2F
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_0F55

; optimize OK (service.pas), line = 1496

	lda X
	adc I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1500

	lda X
	add XS
	tay
	lda adr.MODX,y
	add YH
	sta :STACKORIGIN+9
	lda #$00
	adc YH+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1502

	lda X
	add I
	tay
	lda CL
	sta adr.SCR,y
l_0F55

; --- ForToDoEpilog
	dec X
	jpl l_0F2F
l_0F3D

; --- ForToDoEpilog
	dec Y
	jpl l_0EFA
l_0F08

; optimize OK (service.pas), line = 1514

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1516

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1517

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1526

	lda XS
	add #$08
	sta XS

; optimize OK (service.pas), line = 1527

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta HLP
	lda adr.ROW+256+$04,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1529

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1530

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1532

	lda #$00
	sta I

; optimize OK (service.pas), line = 1535

	lda #$08
	sta Y

l_0FE9
; --- ForToDoCondition
	lda #$10
	sta X

l_1000
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_1026

; optimize OK (service.pas), line = 1559

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	ora #$80
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_1026

; --- ForToDoEpilog
	dec X
	jpl l_1000
l_100E

; optimize OK (service.pas), line = 1569

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	dec Y
	jpl l_0FE9
l_0FF7

; optimize OK (service.pas), line = 1573

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1575

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1576

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000156  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$024A
YA	= DATAORIGIN+$024B
X	= DATAORIGIN+$024C
Y	= DATAORIGIN+$024D
I	= DATAORIGIN+$024E
XS	= DATAORIGIN+$024F
YS	= DATAORIGIN+$0250
YH	= DATAORIGIN+$0251
CL	= DATAORIGIN+$0253
SHADOW	= DATAORIGIN+$0254

@VarData	= XA
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1596

	lda XA
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta XS

; optimize OK (service.pas), line = 1597

	lda YA
	asl @
	asl @
	asl @
	add #$16
	sta YS

; optimize OK (service.pas), line = 1599

	tay
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; -------------------  ASM Block 00000157  -------------------

	  fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 1606

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1607

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1610

	lda #$07
	sta Y

l_10AB
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1614

	lda #$0F
	sta X

l_10CC
; --- ForToDoCondition
	lda X
	add I
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 1621

	lda Y
	cmp #$07
	jcs l_110B
	lda X
	cmp #$0F
	jcs l_110B

; optimize OK (service.pas), line = 1626

	lda BLOCK
	sub #$01
	sta :STACKORIGIN+9
	lda #$00
	sbc #$00
	lda :STACKORIGIN+9
	and #$0F
	tay
	lda adr.COLORBLOCK,y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 1628

	lda X
	add I
	tay
	lda CL
	jmp l_113F
l_110B

; optimize OK (service.pas), line = 1639

	lda X
	add I
	tay
	lda SHADOW
l_113F
	sta adr.SCR,y

; --- ForToDoEpilog
	dec X
	jpl l_10CC
l_10DA

; --- ForToDoEpilog
	dec Y
	jpl l_10AB
l_10B9

; optimize OK (service.pas), line = 1651

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1653

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1654

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$08
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1657

	ldy YS
	lda adr.ROW+$04,y
	add XS
	sta :STACKORIGIN+9
	lda adr.ROW+256+$04,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta HLP
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1659

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$11
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1660

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1662

	lda #$00
	sta I

; optimize OK (service.pas), line = 1666

	lda #$08
	sta Y

l_119F
; --- ForToDoCondition
	lda #$10
	sta X

l_11B6
; --- ForToDoCondition
	lda X
	add XS
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$08
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D8
@
	jcs l_11E0

; optimize OK (service.pas), line = 1679

	lda X
	adc I
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda X
	add I
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	add :STACKORIGIN+10
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	and #$7F
	sta :STACKORIGIN+10
	ldy :STACKORIGIN+9
	lda #$B3
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda :STACKORIGIN+10
	sta (:bp),y
l_11E0

; --- ForToDoEpilog
	dec X
	jpl l_11B6
l_11C4

; optimize OK (service.pas), line = 1688

	lda I
	add #$11
	sta I

; --- ForToDoEpilog
	dec Y
	jpl l_119F
l_11AD

; optimize OK (service.pas), line = 1691

	lda #$11
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1693

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1694

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$11
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$09
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1697

	ldy YS
	lda adr.ROW,y
	add XS
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 1699

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$10
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1700

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$10
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1703

	lda BLOCK
	cmp #$09
	jcc l_124E

; optimize OK (service.pas), line = 1705

	lda #$00
	sta CL2

; optimize OK (service.pas), line = 1706

	lda BLOCK
	and #$0F
	cmp #$09
	jne l_1269

; optimize OK (service.pas), line = 1708

	lda #$CA
	sta CL2

; optimize OK (service.pas), line = 1709

	lda YA
	asl @
	asl @
	asl @
	asl @
	add XA
	tay
	lda #$19
	sta adr.WALL,y
	jmp l_1288
l_1269

; optimize OK (service.pas), line = 1715

	lda BLOCK
	cmp #$0A
	jne l_129A
	lda #$C9
	sta CL2
l_1288
l_129A

; optimize OK (service.pas), line = 1719

	lda #$06
	sta Y

l_12AA
; --- ForToDoCondition
	lda Y
	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1727

	tay
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1729

	lda CL2
	and #$7F
	ora CL
	sta CL2

; optimize OK (service.pas), line = 1736

	sta adr.SCR,y

; --- ForToDoEpilog
	dec Y
	jpl l_12AA
l_12B8

; optimize OK (service.pas), line = 1742

	lda #$0E
	tay

l_12F6
; --- ForToDoCondition
	lda adr.SCR,y
	and #$80
	sta CL

; optimize OK (service.pas), line = 1749

	lda CL2
	and #$7F
	ora CL
	sta adr.SCR,y

; --- ForToDoEpilog
	dey
	jpl l_12F6
	sty X
l_124E

; optimize OK (service.pas), line = 1760

	lda #$10
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 1762

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 1763

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$0F
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$07
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; -------------------  ASM Block 00000158  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

XA	= DATAORIGIN+$0255
YA	= DATAORIGIN+$0256
BLOCK	= DATAORIGIN+$0257
XS	= DATAORIGIN+$0258
YS	= DATAORIGIN+$0259
X	= DATAORIGIN+$025A
Y	= DATAORIGIN+$025B
I	= DATAORIGIN+$025C
YH	= DATAORIGIN+$025D
CL	= DATAORIGIN+$025F
CL2	= DATAORIGIN+$0260
SHADOW	= DATAORIGIN+$0261

@VarData	= XA
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1779

	lda #$00
	sta Y

l_134F
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_135D

; optimize OK (service.pas), line = 1781

	asl @
	asl @
	asl @
	asl @
	sta I

; optimize OK (service.pas), line = 1783

	lda #$00
	sta X

l_1370
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_137E

; optimize OK (service.pas), line = 1784

	adc I
	tay
	lda adr.WALL,y
	jeq l_1399
	lda X
	add I
	tay
	lda adr.WALL,y
	sta PLACE_BLOCK.BLOCK
	lda X
	sta PLACE_BLOCK.XA
	lda Y
	sta PLACE_BLOCK.YA
	jsr PLACE_BLOCK
l_1399

; --- ForToDoEpilog
	inc X
	jne l_1370
l_137E

; --- ForToDoEpilog
	inc Y
	jne l_134F
l_135D

; ------------------------------------------------------------

X	= DATAORIGIN+$0262
Y	= DATAORIGIN+$0263
I	= DATAORIGIN+$0264

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_WALL					; PROCEDURE

; optimize OK (service.pas), line = 1810

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 1811

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sta WL

; optimize OK (service.pas), line = 1814

	lda #$00
	sta Y

l_13D3
; --- ForToDoCondition
	lda Y
	cmp #$0F
	jcs l_13E1

; optimize OK (service.pas), line = 1815

	lda #$00
	sta X

l_13EA
; --- ForToDoCondition
	lda X
	cmp #$0D
	jcs l_13F8

; optimize OK (service.pas), line = 1818

	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	jeq l_1430
	lda Y
	asl @
	asl @
	asl @
	asl @
	add X
	tay
	lda adr.WALL,y
	cmp #$0A
	jeq l_1430
	inc REMAIN_BLK
l_1430

; --- ForToDoEpilog
	inc X
	jne l_13EA
l_13F8

; --- ForToDoEpilog
	inc Y
	jne l_13D3
l_13E1

; optimize OK (service.pas), line = 1820

	lda WL
	sub #$01
	sta @SMALLINT.MOD.A
	lda #$00
	sbc #$00
	sta @SMALLINT.MOD.A+1
	lda #$04
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta WL

; optimize OK (service.pas), line = 1822

	sta @CASETMP_0008
	cmp #$00
	jne l_145A
@

; optimize OK (service.pas), line = 1823

	:7 mva adr.PATTERN0+# adr.PATTERN+#
	jmp a_0008
l_145A
	cmp #$01
	jne l_1463

; optimize OK (service.pas), line = 1824

	:7 mva adr.PATTERN1+# adr.PATTERN+#
	jmp a_0008
l_1463
	cmp #$02
	jne l_146C

; optimize OK (service.pas), line = 1825

	:7 mva adr.PATTERN2+# adr.PATTERN+#
	jmp a_0008
l_146C
	cmp #$03
	jne l_1475

; optimize OK (service.pas), line = 1826

	:7 mva adr.PATTERN3+# adr.PATTERN+#
	jmp a_0008
l_1475
	cmp #$04
	jne l_147E

; optimize OK (service.pas), line = 1827

	:7 mva adr.PATTERN4+# adr.PATTERN+#
l_147E
a_0008

; ------------------------------------------------------------

X	= DATAORIGIN+$0265
Y	= DATAORIGIN+$0266
WL	= DATAORIGIN+$0267
@CASETMP_0008	= DATAORIGIN+$0268

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SPLIT_LINE					; FUNCTION

; optimize OK (service.pas), line = 1853

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1854

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1855

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1856

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	add #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1858

	lda #$00
	sta COLLISION

; optimize OK (service.pas), line = 1860

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP1

; optimize OK (service.pas), line = 1861

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP1

; optimize OK (service.pas), line = 1862

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP2

; optimize OK (service.pas), line = 1863

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	lsr @
	lsr @
	lsr @
	sta YP2

; optimize OK (service.pas), line = 1865

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XK

; optimize OK (service.pas), line = 1866

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YK

; optimize OK (service.pas), line = 1867

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XJ

; optimize OK (service.pas), line = 1868

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YJ

; optimize OK (service.pas), line = 1870

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XH

; optimize OK (service.pas), line = 1871

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YH

; optimize OK (service.pas), line = 1872

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta XN

; optimize OK (service.pas), line = 1873

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	iny
	sta YN

; optimize OK (service.pas), line = 1884

	lda XP1
	cmp XP2
	jne l_1501x
	lda YP1
	cmp YP2
	jeq l_1501
l_1501x

; optimize OK (service.pas), line = 1886

	lda YP1
	cmp YP2
	jeq l_1516

; optimize OK (service.pas), line = 1888

	lda COLLISION
	ora #$01
	sta COLLISION

; --- WhileProlog
	jmp l_1523
l_1524

; optimize OK (service.pas), line = 1892

	lda XH
	add XN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1893

	lda YH
	add YN
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1895

	lsr @
	lsr @
	lsr @
	sta YP

; optimize OK (service.pas), line = 1897

	cmp YP1
	jne l_1562

; optimize OK (service.pas), line = 1899

	lda X
	sta XH

; optimize OK (service.pas), line = 1900

	lda Y
	sta YH
l_1562

; optimize OK (service.pas), line = 1903

	lda YP
	cmp YP2
	jne l_1585

; optimize OK (service.pas), line = 1905

	lda X
	sta XN

; optimize OK (service.pas), line = 1906

	lda Y
	sta YN
l_1585
l_1523

; optimize OK (service.pas), line = 1890

	lda YN
	and #$07
	jeq l_1524w
	lda YN
	and #$07
	cmp #$07
	jne l_1524
l_1524w
l_1516

; optimize OK (service.pas), line = 1912

	lda XP1
	cmp XP2
	jeq l_15CA

; optimize OK (service.pas), line = 1914

	lda COLLISION
	ora #$02
	sta COLLISION

; --- WhileProlog
	jmp l_15D7
l_15D8

; optimize OK (service.pas), line = 1918

	lda XK
	add XJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta X

; optimize OK (service.pas), line = 1919

	lda YK
	add YJ
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta Y

; optimize OK (service.pas), line = 1921

	lda X
	lsr @
	lsr @
	lsr @
	lsr @
	sta XP

; optimize OK (service.pas), line = 1923

	cmp XP1
	jne l_1616

; optimize OK (service.pas), line = 1925

	lda X
	sta XK

; optimize OK (service.pas), line = 1926

	lda Y
	sta YK
l_1616

; optimize OK (service.pas), line = 1929

	lda XP
	cmp XP2
	jne l_1639

; optimize OK (service.pas), line = 1931

	lda X
	sta XJ

; optimize OK (service.pas), line = 1932

	lda Y
	sta YJ
l_1639
l_15D7

; optimize OK (service.pas), line = 1916

	lda XJ
	and #$0F
	jeq l_15D8w
	lda XJ
	and #$0F
	cmp #$0F
	jne l_15D8
l_15D8w
l_15CA

; optimize OK (service.pas), line = 1943

	lda COLLISION
	cmp #$01
	jne l_167C
; optimize OK (service.pas), line = 1945
; optimize OK (service.pas), line = 1946
	jmp l_1692
l_167C

; optimize OK (service.pas), line = 1948

	lda COLLISION
	cmp #$02
	jne l_16A4

; optimize OK (service.pas), line = 1950

	mwy X2 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1951

	mwy Y2 :bp2
	ldy #$00
	lda YJ
	jmp l_16BA
l_16A4

; optimize OK (service.pas), line = 1953

	lda COLLISION
	cmp #$03
	jne l_16CC

; optimize OK (service.pas), line = 1955

	mwy X1 :bp2
	ldy #$00
	lda XJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1956

	mwy Y1 :bp2
	ldy #$00
	lda YJ
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_1692

; optimize OK (service.pas), line = 1957

	mwy X2 :bp2
	ldy #$00
	lda XN
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1958

	mwy Y2 :bp2
	ldy #$00
	lda YN
l_16BA
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y
l_16CC
	jmp l_16F0
l_1501

; optimize OK (service.pas), line = 1963

	lda #$02
	jsr FATAL_ERROR
l_16F0

; optimize OK (service.pas), line = 1966

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1967

	mwy Y1 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1968

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$10
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1969

	mwy Y2 :bp2
	ldy #$00
	lda (:bp2),y
	sub #$18
	sta (:bp2),y
	iny
	lda (:bp2),y
	sbc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 1972

	mwy X1 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X1 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1973

	mwy X2 :bp2
	ldy #$00
	lda (:bp2),y
	sta MAX.B
	iny
	lda (:bp2),y
	sta MAX.B+1
	lda #$00
	sta MAX.A
	sta MAX.A+1
	jsr MAX
	lda #$CF
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	mwy X2 :bp2
	ldy #$00
	lda MIN.RESULT
	sta (:bp2),y
	iny
	lda MIN.RESULT+1
	sta (:bp2),y

; optimize OK (service.pas), line = 1980

	lda COLLISION
	sta RESULT
@exit

; ------------------------------------------------------------

X1	= DATAORIGIN+$0269
Y1	= DATAORIGIN+$026B
X2	= DATAORIGIN+$026D
Y2	= DATAORIGIN+$026F
RESULT	= DATAORIGIN+$0271
X	= DATAORIGIN+$0272
Y	= DATAORIGIN+$0273
XK	= DATAORIGIN+$0274
YK	= DATAORIGIN+$0275
XJ	= DATAORIGIN+$0276
YJ	= DATAORIGIN+$0277
XH	= DATAORIGIN+$0278
YH	= DATAORIGIN+$0279
XN	= DATAORIGIN+$027A
YN	= DATAORIGIN+$027B
XP1	= DATAORIGIN+$027C
YP1	= DATAORIGIN+$027D
XP2	= DATAORIGIN+$027E
YP2	= DATAORIGIN+$027F
XP	= DATAORIGIN+$0280
YP	= DATAORIGIN+$0281
COLLISION	= DATAORIGIN+$0282

@VarData	= X1
@VarDataSize	= 25

	rts						; ret
.endl

.local	SHOOT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 1991

	lda #$0C
	cmp XB
	jcc l_1730
	lda #$0E
	cmp YB
	jcc l_1730

; optimize OK (service.pas), line = 1994

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 1996

	tay
	lda adr.WALL,y
	jeq l_1756

; optimize OK (service.pas), line = 1998

	cmp #$0A
	jcs l_176C

; optimize OK (service.pas), line = 2000

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2001

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2005

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2007

	lda #$2C
	sta RAND.RANGE
	lda #$01
	sta RAND.RANGE+1
	jsr RAND
	lda LETT.INCOMING
	add RAND.RESULT
	sta LETT.INCOMING
	lda LETT.INCOMING+1
	adc RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize OK (service.pas), line = 2009

	lda XB
	asl @
	asl @
	asl @
	asl @
	add #$09
	sta LETT.NEXTX

; optimize OK (service.pas), line = 2010

	lda YB
	add #$01
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	rol :STACKORIGIN+STACKWIDTH+9
	asl :STACKORIGIN+9
	asl :STACKORIGIN+9
	lda :STACKORIGIN+9
	add #$16
	sta LETT.NEXTY

; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 2011

	jsr RANDOM_LETTER_DROP
	lda RANDOM_LETTER_DROP.RESULT
	sta LETT.NEXTTYPE
	lda RANDOM_LETTER_DROP.RESULT+1
	sta LETT.NEXTTYPE+1

; optimize OK (service.pas), line = 2013

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2014

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2015

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 2016

	ldy #BALL.BRWHIT-DATAORIGIN
	sta (:bp2),y
	jmp l_17C4
l_176C

; optimize OK (service.pas), line = 2021

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_17DD

; optimize OK (service.pas), line = 2023

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2024

	ldy I
	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2026

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2027

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_17F9
l_17DD

; optimize OK (service.pas), line = 2031

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y

; optimize OK (service.pas), line = 2032

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2034

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_17F9
l_17C4
l_1756
l_1730

; ------------------------------------------------------------

XB	= DATAORIGIN+$0283
YB	= DATAORIGIN+$0284
BALL	= DATAORIGIN+$0285
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
I	= DATAORIGIN+$0289

@VarData	= XB
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE

; optimize OK (service.pas), line = 2045

	lda #$0C
	cmp XB
	jcc l_182A
	lda #$0E
	cmp YB
	jcc l_182A

; optimize OK (service.pas), line = 2048

	lda YB
	asl @
	asl @
	asl @
	asl @
	add XB
	sta I

; optimize OK (service.pas), line = 2050

	tay
	lda adr.WALL,y
	jeq l_1850

; optimize OK (service.pas), line = 2052

	cmp #$0A
	jcs l_1866

; optimize OK (service.pas), line = 2054

	lda XB
	sta REMOVE_BLOCK.XA
	lda YB
	sta REMOVE_BLOCK.YA
	jsr REMOVE_BLOCK

; optimize FAIL (0, service.pas), line = 2055

	dec REMAIN_BLK

; optimize OK (service.pas), line = 2056

	lda CUR_PLAYER
	asl @
	asl @
	sta :STACKORIGIN+9
	ldy I
	lda adr.WALL,y
	asl @
	tay
	lda adr.SCORE_WALL,y
	sta :STACKORIGIN+10
	lda adr.SCORE_WALL+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy :STACKORIGIN+9
	lda adr.SCORE.PLAYER,y
	add :STACKORIGIN+10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc :STACKORIGIN+STACKWIDTH+10
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 2057

	ldy I
	lda #$00
	sta adr.WALL,y

; optimize OK (service.pas), line = 2058

	lda #$B8
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$03
	jmp l_1890
l_1866

; optimize OK (service.pas), line = 2063

	ldy I
	lda adr.WALL,y
	and #$0F
	cmp #$09
	jne l_18A9

; optimize OK (service.pas), line = 2065

	lda adr.WALL,y
	sub #$10
	sta adr.WALL,y

; optimize OK (service.pas), line = 2066

	lda #$72
	sta BALL_BLOCK_SOUND.A
	lda #$01
	sta BALL_BLOCK_SOUND.A+1
	lda #$04
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND

; optimize OK (service.pas), line = 2067

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE
	jmp l_18C1
l_18A9

; optimize OK (service.pas), line = 2071

	lda XB
	sta SHINE.XB
	lda YB
	sta SHINE.YB
	jsr SHINE

; optimize OK (service.pas), line = 2072

	lda #$C8
	sta BALL_BLOCK_SOUND.A
	lda #$00
	sta BALL_BLOCK_SOUND.A+1
	lda #$07
l_1890
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_18C1
l_1850
l_182A

; ------------------------------------------------------------

XB	= DATAORIGIN+$028A
YB	= DATAORIGIN+$028B
I	= DATAORIGIN+$028C

@VarData	= XB
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BALL_HIT_BLOCK					; PROCEDURE

; optimize OK (service.pas), line = 2110

	lda #$FF
	sta EMERGENCY

; optimize OK (service.pas), line = 2112

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta NX
	iny
	lda (:bp2),y
	sbc #$00
	sta NX+1

; optimize OK (service.pas), line = 2113

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta NY
	iny
	lda (:bp2),y
	sbc #$00
	sta NY+1

; optimize OK (service.pas), line = 2116

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub #$09
	sta OX
	iny
	lda (:bp2),y
	sbc #$00
	sta OX+1

; optimize OK (service.pas), line = 2117

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub #$16
	sta OY
	iny
	lda (:bp2),y
	sbc #$00
	sta OY+1

; optimize OK (service.pas), line = 2119

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta XB

; optimize OK (service.pas), line = 2120

	lda NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NY
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta YB

; optimize OK (service.pas), line = 2124

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jeq l_192C

; optimize OK (service.pas), line = 2126

	lda <OX
	sta SPLIT_LINE.X1
	lda >OX
	sta SPLIT_LINE.X1+1
	lda <OY
	sta SPLIT_LINE.Y1
	lda >OY
	sta SPLIT_LINE.Y1+1
	lda <NX
	sta SPLIT_LINE.X2
	lda >NX
	sta SPLIT_LINE.X2+1
	lda <NY
	sta SPLIT_LINE.Y2
	lda >NY
	sta SPLIT_LINE.Y2+1
	jsr SPLIT_LINE
	lda SPLIT_LINE.RESULT
	sta COLLISION

; optimize OK (service.pas), line = 2132

	cmp #$03
	jne l_1947

; optimize OK (service.pas), line = 2134

	mwy BALL :bp2
	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub OX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta LX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LX+1

; optimize OK (service.pas), line = 2135

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub OY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc OY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta LY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta LY+1

; optimize OK (service.pas), line = 2137

	ldy #BALL.OLDX-DATAORIGIN
	lda (:bp2),y
	sub NX
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$09
	sta MX
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MX+1

; optimize OK (service.pas), line = 2138

	ldy #BALL.OLDY-DATAORIGIN
	lda (:bp2),y
	sub NY
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sbc NY+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	sub #$16
	sta MY
	lda :STACKORIGIN+STACKWIDTH+9
	sbc #$00
	sta MY+1

; optimize OK (service.pas), line = 2140

	lda LX
	sta SYSTEM.ABS.@010184000.X
	lda LX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1
	lda LY
	sta SYSTEM.ABS.@010184000.X
	lda LY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 2142

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F1
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F1+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F1+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F1+3

; optimize OK (service.pas), line = 2144

	lda MX
	sta SYSTEM.ABS.@010184000.X
	lda MX+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta A
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta A+1
	lda MY
	sta SYSTEM.ABS.@010184000.X
	lda MY+1
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	and #$FF
	sta B
	lda SYSTEM.ABS.@010184000.RESULT+1
	and #$03
	sta B+1

; optimize OK (service.pas), line = 2146

	lda A+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda A
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	asl @
	rol :STACKORIGIN+STACKWIDTH+9
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+9
	sta :bp2+1
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*2+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda B+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda B
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :bp2
	lda #$A0
	add :STACKORIGIN+STACKWIDTH+10
	sta :bp2+1
	ldy #$00
	lda :STACKORIGIN+9
	add (:bp2),y+
	sta F2
	lda :STACKORIGIN+STACKWIDTH+9
	adc (:bp2),y+
	sta F2+1
	lda :STACKORIGIN+STACKWIDTH*2+9
	adc (:bp2),y+
	sta F2+2
	lda :STACKORIGIN+STACKWIDTH*3+9
	adc (:bp2),y
	sta F2+3

; optimize OK (service.pas), line = 2148

	lda F1+3
	cmp F2+3
	bne @+
	lda F1+2
	cmp F2+2
	bne @+
	lda F1+1
	cmp F2+1
	bne @+
	lda F1
	cmp F2
@
	jcs l_19D0

; optimize OK (service.pas), line = 2154

	lda OX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda OX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2155

	sta MAX.A
	lda #$00
	sta MAX.A+1
	sta MAX.B
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2156

	lda OY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2159

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1A14

; optimize OK (service.pas), line = 2161

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2162

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2163

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
	jmp l_1A42
l_1A14

; optimize OK (service.pas), line = 2167

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2168

	lda OY
	sta NY
	lda OY+1
	sta NY+1
l_1A42
	jmp l_1A55
l_19D0

; optimize OK (service.pas), line = 2178

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2179

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2180

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB

; optimize OK (service.pas), line = 2182

	asl @
	asl @
	asl @
	asl @
	add XB
	tay
	lda adr.WALL,y
	jne l_1A98

; optimize OK (service.pas), line = 2184

	lda OX
	sta NX
	lda OX+1
	sta NX+1

; optimize OK (service.pas), line = 2185

	lda OY
	sta NY
	lda OY+1
	sta NY+1

; optimize OK (service.pas), line = 2187

	lda NX+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda NX
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta I

; optimize OK (service.pas), line = 2188

	lda #$00
	sta MAX.A
	sta MAX.A+1
	lda I
	sta MAX.B
	lda #$00
	sta MAX.B+1
	jsr MAX
	lda #$0C
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta XB

; optimize OK (service.pas), line = 2189

	lda NY
	add #$18
	lsr @
	lsr @
	lsr @
	sub #$03
	sta YB
l_1A98
l_1A55
l_1947

; optimize OK (service.pas), line = 2195

	mwy BALL :bp2
	ldy #BALL.X-DATAORIGIN
	lda NX
	add #$09
	sta (:bp2),y
	iny
	lda NX+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2196

	ldy #BALL.Y-DATAORIGIN
	lda NY
	add #$16
	sta (:bp2),y
	iny
	lda NY+1
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 2199

	lda XB
	sta SHOOT_BLOCK.XB
	lda YB
	sta SHOOT_BLOCK.YB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK

; optimize OK (service.pas), line = 2201

	lda NX
	and #$0F
	sta :STACKORIGIN+9
	lda #$00
	lsr @
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta X

; optimize OK (service.pas), line = 2202

	lda NY
	and #$07
	sta Y

; optimize OK (service.pas), line = 2229

	cmp X
	jcs l_1B22
	lda #$07
	sub Y
	sta :STACKORIGIN+11
	lda X
	cmp :STACKORIGIN+11
	jcs l_1B22

; optimize OK (service.pas), line = 2231

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2232

	lda #$01
	sta EMERGENCY
l_1B22

; optimize OK (service.pas), line = 2236

	lda #$07
	sub Y
	cmp X
	jcs l_1B57
	lda X
	cmp Y
	jcs l_1B57

; optimize OK (service.pas), line = 2238

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2239

	lda #$03
	sta EMERGENCY
l_1B57

; optimize OK (service.pas), line = 2243

	lda X
	cmp Y
	jcs l_1B8C
	lda #$07
	sub X
	sta :STACKORIGIN+11
	lda Y
	cmp :STACKORIGIN+11
	jcs l_1B8C

; optimize OK (service.pas), line = 2245

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2246

	lda #$02
	sta EMERGENCY
l_1B8C

; optimize OK (service.pas), line = 2250

	lda #$07
	sub X
	cmp Y
	jcs l_1BC1
	lda Y
	cmp X
	jcs l_1BC1

; optimize OK (service.pas), line = 2252

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y

; optimize OK (service.pas), line = 2253

	lda #$04
	sta EMERGENCY
l_1BC1

; optimize OK (service.pas), line = 2257

	lda X
	cmp Y
	jeq l_1BF6x
	lda #$07
	sub Y
	cmp X
	jne l_1BF6
l_1BF6x

; optimize OK (service.pas), line = 2259

	lda #$00
	sta DEFLECT

; optimize OK (service.pas), line = 2260

	sta TOUCH

; optimize OK (service.pas), line = 2268

	lda X
	cmp #$05
	jcc l_1C11
	lda TOUCH
	ora #$01
	sta TOUCH
l_1C11

; optimize OK (service.pas), line = 2269

	lda Y
	cmp #$05
	jcc l_1C30
	lda TOUCH
	ora #$02
	sta TOUCH
l_1C30

; optimize OK (service.pas), line = 2278

	lda #$FF
	sta LX
	sta LX+1

l_1C46
; --- ForToDoCondition
	lda LX
	cmp #$02
	lda LX+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C52

; optimize OK (service.pas), line = 2279

	lda #$FF
	sta LY
	sta LY+1

l_1C5B
; --- ForToDoCondition
	lda LY
	cmp #$02
	lda LY+1
	sbc #$00
	svc
	eor #$80
	asl @
	jcc l_1C67

; optimize FAIL (1, service.pas), line = 2281

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda XB
	add LX
	sta MIN.A
	lda #$00
	adc LX+1
	sta MIN.A+1
	lda #$0C
	sta MIN.B
	lda #$00
	sta MIN.B+1
	dex
	jsr MIN
	lda MIN.RESULT
	sta MAX.A
	lda MIN.RESULT+1
	sta MAX.A+1
	lda :STACKORIGIN,x
	sta MAX.B
	lda :STACKORIGIN+STACKWIDTH,x
	sta MAX.B+1
	dex
	jsr MAX
	lda MAX.RESULT
	sta MX
	lda MAX.RESULT+1
	sta MX+1

; optimize OK (service.pas), line = 2282

	lda YB
	add LY
	sta MY
	lda #$00
	adc LY+1
	sta MY+1

; optimize OK (service.pas), line = 2284

	lda XB
	add LX
	jmi l_1CC0x
	lda XB
	add LX
	sub #$0D
	svc
	eor #$80
	jpl l_1CC0x
	lda MY
	asl @
	asl @
	asl @
	asl @
	add MX
	tay
	lda adr.WALL,y
	jeq l_1CC0
l_1CC0x

; optimize OK (service.pas), line = 2287

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$0A
	jmp l_1CE1
l_1CC0

; optimize OK (service.pas), line = 2289

	lda LX
	add #$01
	asl @
	asl @
	add LY
	tay
	lda #$14
l_1CE1
	sta adr.ADJW+$01,y

; --- ForToDoEpilog
	inc LY
	jne l_1C5B
	inc LY+1
	jmp l_1C5B
l_1C67

; --- ForToDoEpilog
	inc LX
	jne l_1C46
	inc LX+1
	jmp l_1C46
l_1C52

; -------------------  ASM Block 00000159  -------------------

	lda #0
	sta around

	lda #10

	cmp adr.ADJW
	ror around
	cmp adr.ADJW+$04
	ror around
	cmp adr.ADJW+$08
	ror around	
	cmp adr.ADJW+$09
	ror around
	cmp adr.ADJW+$0A
	ror around
	cmp adr.ADJW+$06
	ror around
	cmp adr.ADJW+$02
	ror around
	cmp adr.ADJW+$01
	ror around
	
; optimize OK (service.pas), line = 2370

	lda TOUCH
	jne l_1D14

; optimize OK (service.pas), line = 2372

	lda AROUND
	and #$83
	jne l_1D2B
	lda #$11
	sta DEFLECT
l_1D2B

; optimize OK (service.pas), line = 2373

	lda AROUND
	and #$83
	cmp #$01
	jne l_1D48
	lda #$33
	sta DEFLECT
l_1D48

; optimize OK (service.pas), line = 2374

	lda AROUND
	and #$83
	cmp #$02
	jne l_1D65
	lda #$10
	sta DEFLECT
l_1D65

; optimize OK (service.pas), line = 2375

	lda AROUND
	and #$83
	cmp #$03
	jne l_1D82
	lda #$12
	sta DEFLECT
l_1D82

; optimize OK (service.pas), line = 2376

	lda AROUND
	and #$83
	cmp #$80
	jne l_1D9F
	lda #$01
	sta DEFLECT
l_1D9F

; optimize OK (service.pas), line = 2377

	lda AROUND
	and #$83
	cmp #$81
	jne l_1DBC
	lda #$21
	sta DEFLECT
l_1DBC

; optimize OK (service.pas), line = 2378

	lda AROUND
	and #$83
	cmp #$82
	jne l_1DD9
	lda #$11
	sta DEFLECT
l_1DD9

; optimize OK (service.pas), line = 2380

	lda #$05
	sta EMERGENCY

; optimize OK (service.pas), line = 2381

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1D14

; optimize OK (service.pas), line = 2386

	lda TOUCH
	cmp #$01
	jne l_1E09

; optimize OK (service.pas), line = 2388

	lda AROUND
	and #$0E
	jne l_1E20
	lda #$21
	sta DEFLECT
l_1E20

; optimize OK (service.pas), line = 2389

	lda AROUND
	and #$0E
	cmp #$02
	jne l_1E3D
	lda #$20
	sta DEFLECT
l_1E3D

; optimize OK (service.pas), line = 2390

	lda AROUND
	and #$0E
	cmp #$04
	jne l_1E5A
	lda #$33
	sta DEFLECT
l_1E5A

; optimize OK (service.pas), line = 2391

	lda AROUND
	and #$0E
	cmp #$06
	jne l_1E77
	lda #$22
	sta DEFLECT
l_1E77

; optimize OK (service.pas), line = 2392

	lda AROUND
	and #$0E
	cmp #$08
	jne l_1E94
	lda #$01
	sta DEFLECT
l_1E94

; optimize OK (service.pas), line = 2393

	lda AROUND
	and #$0E
	cmp #$0A
	jne l_1EB1
	lda #$21
	sta DEFLECT
l_1EB1

; optimize OK (service.pas), line = 2394

	lda AROUND
	and #$0E
	cmp #$0C
	jne l_1ECE
	lda #$11
	sta DEFLECT
l_1ECE

; optimize OK (service.pas), line = 2396

	lda #$08
	sta EMERGENCY

; optimize OK (service.pas), line = 2397

	ldy YB
	dey
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1E09

; optimize OK (service.pas), line = 2400

	lda TOUCH
	cmp #$02
	jne l_1EFE

; optimize OK (service.pas), line = 2402

	lda AROUND
	and #$E0
	jne l_1F15
	lda #$12
	sta DEFLECT
l_1F15

; optimize OK (service.pas), line = 2403

	lda AROUND
	and #$E0
	cmp #$20
	jne l_1F32
	lda #$10
	sta DEFLECT
l_1F32

; optimize OK (service.pas), line = 2404

	lda AROUND
	and #$E0
	cmp #$40
	jne l_1F4F
	lda #$33
	sta DEFLECT
l_1F4F

; optimize OK (service.pas), line = 2405

	lda AROUND
	and #$E0
	cmp #$60
	jne l_1F6C
	lda #$11
	sta DEFLECT
l_1F6C

; optimize OK (service.pas), line = 2406

	lda AROUND
	and #$E0
	cmp #$80
	jne l_1F89
	lda #$02
	sta DEFLECT
l_1F89

; optimize OK (service.pas), line = 2407

	lda AROUND
	and #$E0
	cmp #$A0
	jne l_1FA6
	lda #$12
	sta DEFLECT
l_1FA6

; optimize OK (service.pas), line = 2408

	lda AROUND
	and #$E0
	cmp #$C0
	jne l_1FC3
	lda #$22
	sta DEFLECT
l_1FC3

; optimize OK (service.pas), line = 2410

	lda #$06
	sta EMERGENCY

; optimize OK (service.pas), line = 2411

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	dey
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1EFE

; optimize OK (service.pas), line = 2414

	lda TOUCH
	cmp #$03
	jne l_1FF3

; optimize OK (service.pas), line = 2416

	lda AROUND
	and #$38
	jne l_200A
	lda #$22
	sta DEFLECT
l_200A

; optimize OK (service.pas), line = 2417

	lda AROUND
	and #$38
	cmp #$08
	jne l_2027
	lda #$02
	sta DEFLECT
l_2027

; optimize OK (service.pas), line = 2418

	lda AROUND
	and #$38
	cmp #$10
	jne l_2044
	lda #$33
	sta DEFLECT
l_2044

; optimize OK (service.pas), line = 2419

	lda AROUND
	and #$38
	cmp #$18
	jne l_2061
	lda #$12
	sta DEFLECT
l_2061

; optimize OK (service.pas), line = 2420

	lda AROUND
	and #$38
	cmp #$20
	jne l_207E
	lda #$20
	sta DEFLECT
l_207E

; optimize OK (service.pas), line = 2421

	lda AROUND
	and #$38
	cmp #$28
	jne l_209B
	lda #$22
	sta DEFLECT
l_209B

; optimize OK (service.pas), line = 2422

	lda AROUND
	and #$38
	cmp #$30
	jne l_20B8
	lda #$21
	sta DEFLECT
l_20B8

; optimize OK (service.pas), line = 2424

	lda #$07
	sta EMERGENCY

; optimize OK (service.pas), line = 2425

	ldy YB
	iny
	sty SHOOT_BLOCK.YB
	ldy XB
	iny
	sty SHOOT_BLOCK.XB
	lda BALL
	sta SHOOT_BLOCK.BALL
	lda BALL+1
	sta SHOOT_BLOCK.BALL+1
	jsr SHOOT_BLOCK
l_1FF3

; optimize OK (service.pas), line = 2431

	lda DEFLECT
	lsr @
	lsr @
	lsr @
	lsr @
	sta MYX
	lda #$00
	sta MYX+1

; optimize OK (service.pas), line = 2432

	lda DEFLECT
	and #$0F
	sta MYY
	lda #$00
	sta MYY+1

; optimize OK (service.pas), line = 2434

	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2436

	lda MYX+1
	bne @+
	lda MYX
	cmp #$01
@
	jne l_2101
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_2101

; optimize OK (service.pas), line = 2437

	lda MYX+1
	bne @+
	lda MYX
	cmp #$02
@
	jne l_211D
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_211D

; optimize OK (service.pas), line = 2438

	lda MYX+1
	bne @+
	lda MYX
	cmp #$03
@
	jne l_2136
	mwy BALL :bp2
	ldy #BALL.SPEEDX-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_2136

; optimize OK (service.pas), line = 2440

	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X
	iny
	lda (:bp2),y
	sta SYSTEM.ABS.@010184000.X+1
	jsr SYSTEM.ABS.@010184000
	lda SYSTEM.ABS.@010184000.RESULT
	sta SP
	lda SYSTEM.ABS.@010184000.RESULT+1
	sta SP+1

; optimize OK (service.pas), line = 2442

	lda MYY+1
	bne @+
	lda MYY
	cmp #$01
@
	jne l_2158
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub SP
	sta (:bp2),y
	iny
	lda #$00
	sbc SP+1
	sta (:bp2),y
l_2158

; optimize OK (service.pas), line = 2443

	lda MYY+1
	bne @+
	lda MYY
	cmp #$02
@
	jne l_2174
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda SP
	sta (:bp2),y
	iny
	lda SP+1
	sta (:bp2),y
l_2174

; optimize OK (service.pas), line = 2444

	lda MYY+1
	bne @+
	lda MYY
	cmp #$03
@
	jne l_218D
	mwy BALL :bp2
	ldy #BALL.SPEEDY-DATAORIGIN
	lda #$00
	sub (:bp2),y
	sta (:bp2),y
	iny
	lda #$00
	sbc (:bp2),y
	sta (:bp2),y
l_218D
l_1BF6
l_192C

; optimize OK (service.pas), line = 2454

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda (:bp2),y
	cmp #$65
	jcc l_21AE

; optimize OK (service.pas), line = 2457

	lda EMERGENCY
	cmp #$FF
	jne l_21C1
	lda #$04
	jsr FATAL_ERROR
l_21C1

; optimize OK (service.pas), line = 2459

	ldy EMERGENCY
	lda adr.EMERG_DEV,y
	sta MIMAX

; optimize OK (service.pas), line = 2486

	tya
	sta @CASETMP_0009
	cmp #$05
	jne l_21DA
@

; optimize OK (service.pas), line = 2489

	lda adr.ADJW+$04
	jne l_21F1
	lda MIMAX
	and #$0F
	sta MIMAX
l_21F1

; optimize OK (service.pas), line = 2490

	lda adr.ADJW+$01
	jne l_2219
	lda MIMAX
	and #$F0
	ora #$03
	sta MIMAX
l_2219
	jmp a_0009
l_21DA
	cmp #$06
	jne l_2231

; optimize OK (service.pas), line = 2494

	lda adr.ADJW+$01
	jne l_2248
	lda MIMAX
	and #$0F
	ora #$10
	sta MIMAX
l_2248

; optimize OK (service.pas), line = 2495

	lda adr.ADJW+$06
	jne l_2270
	lda MIMAX
	and #$F0
	ora #$04
	sta MIMAX
l_2270
	jmp a_0009
l_2231
	cmp #$07
	jne l_2288

; optimize OK (service.pas), line = 2499

	lda adr.ADJW+$06
	jne l_229F
	lda MIMAX
	and #$0F
	ora #$20
	sta MIMAX
l_229F

; optimize OK (service.pas), line = 2500

	lda adr.ADJW+$09
	jne l_22C7
	lda MIMAX
	and #$F0
	ora #$05
	sta MIMAX
l_22C7
	jmp a_0009
l_2288
	cmp #$08
	jne l_22DF

; optimize OK (service.pas), line = 2504

	lda adr.ADJW+$09
	jne l_22F6
	lda MIMAX
	and #$0F
	ora #$30
	sta MIMAX
l_22F6

; optimize OK (service.pas), line = 2505

	lda adr.ADJW+$04
	jne l_231E
	lda MIMAX
	and #$F0
	ora #$06
	sta MIMAX
l_231E
l_22DF
a_0009

; --- RepeatUntilProlog
l_2336

; optimize OK (service.pas), line = 2513

	lda MIMAX
	lsr @
	lsr @
	lsr @
	lsr @
	asl @
	tay
	lda adr.MUL90_16,y
	sta LX
	lda adr.MUL90_16+1,y
	sta LX+1

; optimize OK (service.pas), line = 2514

	lda MIMAX
	and #$0F
	asl @
	tay
	lda adr.MUL90_16,y
	sta MX
	lda adr.MUL90_16+1,y
	sta MX+1

; optimize OK (service.pas), line = 2516

	lda MX
	sub LX
	sta RAND.RANGE
	lda MX+1
	sbc LX+1
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	add LX
	sta ANGLE
	lda RAND.RESULT+1
	adc LX+1
	sta ANGLE+1

; optimize OK (service.pas), line = 2518

	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda ANGLE
	sta MOD90.A
	lda ANGLE+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2336

; optimize OK (service.pas), line = 2522

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda ANGLE
	sta SET_BALL_DIRECTION.ANGLE
	lda ANGLE+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 2523

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 2525

	mwy BALL :bp2
	ldy #BALL.BRWHIT-DATAORIGIN
	lda #$00
	sta (:bp2),y
l_21AE

; ------------------------------------------------------------

BALL	= DATAORIGIN+$028D
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
adr.MUL90_16	= CODEORIGIN+$00B5
.var MUL90_16	= adr.MUL90_16 .word
X	= DATAORIGIN+$0291
Y	= DATAORIGIN+$0292
I	= DATAORIGIN+$0293
XB	= DATAORIGIN+$0294
YB	= DATAORIGIN+$0295
OX	= DATAORIGIN+$0296
OY	= DATAORIGIN+$0298
SP	= DATAORIGIN+$029A
NX	= DATAORIGIN+$029C
NY	= DATAORIGIN+$029E
LX	= DATAORIGIN+$02A0
LY	= DATAORIGIN+$02A2
MX	= DATAORIGIN+$02A4
MY	= DATAORIGIN+$02A6
ANGLE	= DATAORIGIN+$02A8
MYX	= DATAORIGIN+$02AA
MYY	= DATAORIGIN+$02AC
F1	= DATAORIGIN+$02AE
F2	= DATAORIGIN+$02B2
A	= DATAORIGIN+$02B6
B	= DATAORIGIN+$02B8
EMERGENCY	= DATAORIGIN+$02BA
MIMAX	= DATAORIGIN+$02BB
DEFLECT	= DATAORIGIN+$02BC
AROUND	= DATAORIGIN+$02BD
COLLISION	= DATAORIGIN+$02BE
TOUCH	= DATAORIGIN+$02BF
adr.ADJW	= [DATAORIGIN+$02C0] .array [4] [4]
.var ADJW	= adr.ADJW .word
@CASETMP_0009	= DATAORIGIN+$02D0

@VarData	= BALL
@VarDataSize	= 54

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE

; optimize OK (service.pas), line = 2540

	lda #$FF
	sta Y
	jmp l_2394f
l_2394
; --- ForToDoCondition
	dec Y
l_2394f
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta @WORD.MOD.B
	iny
	lda (:bp2),y
	sta @WORD.MOD.B+1
	lda Y
	sta @WORD.MOD.A
	lda #$00
	sta @WORD.MOD.A+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	ldy Y
	sta adr.MODX,y

; optimize OK (service.pas), line = 2546

	mwy PATT :bp2
	ldy #PATT.HEIGHT-DATAORIGIN
	lda (:bp2),y
	sta @BYTE.MOD.B
	lda Y
	sta @BYTE.MOD.A
	jsr @BYTE.MOD
	lda @BYTE.MOD.RESULT
	ldy Y
	sta adr.MODY,y

; --- ForToDoEpilog
	lda Y
	jne l_2394
l_23A2

; -------------------  ASM Block 00000160  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2558

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2559

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2562

	lda #$0A
	sta Y

l_23DA
; --- ForToDoCondition
	ldy Y
	cpy #$C7
	jcs l_23E8

; optimize OK (service.pas), line = 2565

	lda adr.MODY,y
	sta :eax
	mwy PATT :bp2
	ldy #PATT.WIDTH-DATAORIGIN
	lda (:bp2),y
	sta :ecx
	iny
	lda (:bp2),y
	sta :ecx+1
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta YB
	lda :eax+1
	sta YB+1

; optimize OK (service.pas), line = 2567

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$D8
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2568

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2570

	lda #$09
	sta X

l_240F
; --- ForToDoCondition
	ldy X
	cpy #$D8
	jcs l_241D

; optimize OK (service.pas), line = 2574

	lda adr.MODX,y
	adc YB
	sta :STACKORIGIN+9
	lda #$00
	adc YB+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	sta CL

; optimize OK (service.pas), line = 2576

	lda #$80
	sta SHADOW

; optimize OK (service.pas), line = 2581

	lda Y
	cmp #$10
	jcc l_2450x
	lda X
	cmp #$12
	jcs l_2450
l_2450x
	lda #$00
	sta SHADOW
l_2450

; optimize OK (service.pas), line = 2586

	lda CL
	and #$7F
	ora SHADOW
	ldy X
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_240F
l_241D

; optimize OK (service.pas), line = 2590

	lda #$D8
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2591

	ldy Y
	lda PLAYSCREEN.OFS
	add adr.ROW,y
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc adr.ROW+256,y
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$D8
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_23DA
l_23E8

; -------------------  ASM Block 00000161  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PATT	= DATAORIGIN+$02D1
PATT.WIDTH	= DATAORIGIN+$0000
PATT.HEIGHT	= DATAORIGIN+$0002
PATT.OFS	= DATAORIGIN+$0003
YB	= DATAORIGIN+$02D5
X	= DATAORIGIN+$02D7
Y	= DATAORIGIN+$02D8
CL	= DATAORIGIN+$02D9
SHADOW	= DATAORIGIN+$02DA

@VarData	= PATT
@VarDataSize	= 8

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_ROUND_LEVEL				; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02DB
Y	= DATAORIGIN+$02DD

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_ROUND_LEVEL				; PROCEDURE

; optimize OK (service.pas), line = 2642

	lda adr.ROW+$81
	add #$48
	sta HLP
	lda adr.ROW+256+$81
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2644

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$58
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$1F
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GAME_OVER					; PROCEDURE

; ------------------------------------------------------------

X	= DATAORIGIN+$02DF
Y	= DATAORIGIN+$02E1
adr.SC	= [DATAORIGIN+$02E3] .array [21]
.var SC	= adr.SC .word

@VarData	= X
@VarDataSize	= 25

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DESTROY_VAUS					; PROCEDURE

; optimize OK (service.pas), line = 2689

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2690

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 2692

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda VAUS.Y
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize OK (service.pas), line = 2694

	lda VAUS.X
	sub #$04
	sta A
	lda #$00
	sbc #$00
	sta A+1

; optimize OK (service.pas), line = 2695

	lda VAUS.Y
	sub #$05
	sta B
	lda #$00
	sbc #$00
	sta B+1

; -------------------  ASM Block 00000162  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2702

	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2705

	lda #$00
	sta W

l_24D9
; --- ForToDoCondition
	lda W
	cmp #$07
	jcs l_24E7

; optimize OK (service.pas), line = 2708

	lda #$00
	sta Y

l_24F0
; --- ForToDoCondition
	lda Y
	cmp #$10
	jcs l_24FE

; optimize OK (service.pas), line = 2711

	lda EXPLOSION.WIDTH
	sta :ecx
	lda EXPLOSION.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EXPLOSION.WIDTH
	sta :STACKORIGIN+11
	lda EXPLOSION.WIDTH+1
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	asl :STACKORIGIN+11
	rol @
	sta :ecx+1
	lda :STACKORIGIN+11
	sta :ecx
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2713

	lda EXPLOSION.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda EXPLOSION.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda EXPLOSION.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda EXPLOSION.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2715

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2717

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2719

	lda #$00
	sta X
	ldy EXPLOSION.WIDTH
	dey
	sty @FORTMP_254B_0

l_254E
; --- ForToDoCondition
	lda @FORTMP_254B_0::#$00
	cmp X
	jcc l_255C

; optimize OK (service.pas), line = 2723

	lda W
	cmp #$06
	jeq l_257Dx
	ldy X
	lda adr.POM,y
	jne l_257D
l_257Dx
	jmp l_2587
l_257D

; optimize OK (service.pas), line = 2732

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2587

; --- ForToDoEpilog
	inc X
	jne l_254E
l_255C

; optimize OK (service.pas), line = 2735

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda EXPLOSION.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda EXPLOSION.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc Y
	jne l_24F0
l_24FE

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2738

	jsr SYSTEM.PAUSE.@00

; optimize OK (service.pas), line = 2739

	lda W
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; --- ForToDoEpilog
	inc W
	jne l_24D9
l_24E7

; -------------------  ASM Block 00000163  -------------------

	fxs FX_MEMS #$00
    
; optimize OK (service.pas), line = 2748

	lda #$07
	sta DEATH_SOUND.A
	lda #$00
	sta DEATH_SOUND.A+1
	jsr DEATH_SOUND

; optimize OK (service.pas), line = 2749

	lda #$96
	sta MYDELAY.A
	lda #$00
	sta MYDELAY.A+1
	jsr MYDELAY

; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2750

	jsr DISABLE_LETTER

; ------------------------------------------------------------

Z	= DATAORIGIN+$02F8
A	= DATAORIGIN+$02FA
B	= DATAORIGIN+$02FC
W	= DATAORIGIN+$02FE
X	= DATAORIGIN+$02FF
Y	= DATAORIGIN+$0300

@VarData	= Z
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CREATE_VAUS					; PROCEDURE

; optimize FAIL ('NOSOUND', service.pas), line = 2762

	jsr NOSOUND

; optimize OK (service.pas), line = 2763

	lda #$5B
	sta A
	lda #$00
	sta A+1

; optimize OK (service.pas), line = 2764

	lda #$B3
	sta B
	lda #$00
	sta B+1

; -------------------  ASM Block 00000164  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2770

	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2773

	lda #$0B
	sta W

l_25D2
; --- ForToDoCondition
	lda #$0F
	sta Y

l_25E9
; --- ForToDoCondition
	lda NEWVAUS.WIDTH
	sta :ecx
	lda NEWVAUS.WIDTH+1
	sta :ecx+1
	lda Y
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$10
	sta :ecx
	lda #$00
	sta :ecx+1
	lda NEWVAUS.WIDTH
	sta :eax
	lda NEWVAUS.WIDTH+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :ecx
	lda :eax+1
	sta :ecx+1
	lda W
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add :STACKORIGIN+9
	sta Z
	lda :eax+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize OK (service.pas), line = 2780

	lda Y
	add B
	tay
	lda A
	add adr.ROW,y
	sta HLP
	lda A+1
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 2782

	lda NEWVAUS.OFS
	add Z
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda NEWVAUS.OFS+1
	adc Z+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda NEWVAUS.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda NEWVAUS.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2784

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2786

	lda #$00
	sta X
	ldy NEWVAUS.WIDTH
	dey
	sty @FORTMP_2644_0

l_2647
; --- ForToDoCondition
	lda @FORTMP_2644_0::#$00
	cmp X
	jcc l_2655

; optimize OK (service.pas), line = 2788

	ldy X
	lda adr.POM,y
	jne l_266A
	jmp l_2674
l_266A

; optimize OK (service.pas), line = 2799

	ldy X
	lda adr.POM,y
	sta adr.SCR,y
l_2674

; --- ForToDoEpilog
	inc X
	jne l_2647
l_2655

; optimize OK (service.pas), line = 2802

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda NEWVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda NEWVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$01
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	dec Y
	jpl l_25E9
l_25F7

; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 2805

	jsr SYSTEM.PAUSE.@00

; --- ForToDoEpilog
	dec W
	jpl l_25D2
l_25E0

; -------------------  ASM Block 00000165  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

X	= DATAORIGIN+$0302
Y	= DATAORIGIN+$0303
W	= DATAORIGIN+$0304
Z	= DATAORIGIN+$0305
A	= DATAORIGIN+$0307
B	= DATAORIGIN+$0309

@VarData	= X
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITE_SCORE					; PROCEDURE

	jmp l_269F

.local	PUT_DIGIT					; PROCEDURE
	sta NUM

; optimize OK (service.pas), line = 2909

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	ldy NUM
	lda adr.MUL_6,y
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$C2
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$06
	sta BLITTEMP.@040180000018100001820000182000.W
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda #$0B
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 2911

	lda HLP
	add #$07
	sta HLP
	scc
	inc HLP+1

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0313

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_269F

; optimize OK (service.pas), line = 2918

	lda #$00
	sta F

; -------------------  ASM Block 00000166  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 2926

	lda #$80
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$00
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 2928

	ldy PY
	lda adr.ROW,y
	add #$FD
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 2932

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_26D0
l_26D1

; optimize OK (service.pas), line = 2934

	lda SC
	sub #$A0
	sta SC
	lda SC+1
	sbc #$86
	sta SC+1
	lda SC+2
	sbc #$01
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2935

	inc N1
l_26D0

; optimize OK (service.pas), line = 2933

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$01
	bne @+
	lda SC+1
	cmp #$86
	bne @+
	lda SC
	cmp #$A0
@
	jcs l_26D1

; optimize OK (service.pas), line = 2937

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2938

	tya
	jeq l_26FB
	lda #$01
	sta F
l_26FB

; optimize OK (service.pas), line = 2939

	lda F
	jeq l_270E
	lda N1
	jmp l_271C
l_270E

; optimize OK (service.pas), line = 2940

	lda #$0A
l_271C
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2943

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2724
l_2725

; optimize OK (service.pas), line = 2945

	lda SC
	sub #$10
	sta SC
	lda SC+1
	sbc #$27
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2946

	inc N1
l_2724

; optimize OK (service.pas), line = 2944

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$27
	bne @+
	lda SC
	cmp #$10
@
	jcs l_2725

; optimize OK (service.pas), line = 2948

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2949

	tya
	jeq l_274F
	lda #$01
	sta F
l_274F

; optimize OK (service.pas), line = 2950

	lda F
	jeq l_2762
	lda N1
	jmp l_2770
l_2762

; optimize OK (service.pas), line = 2951

	lda #$0A
l_2770
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2954

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2778
l_2779

; optimize OK (service.pas), line = 2956

	lda SC
	sub #$E8
	sta SC
	lda SC+1
	sbc #$03
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2957

	inc N1
l_2778

; optimize OK (service.pas), line = 2955

	lda SC+3
	cmp #$00
	bne @+
	lda SC+2
	cmp #$00
	bne @+
	lda SC+1
	cmp #$03
	bne @+
	lda SC
	cmp #$E8
@
	jcs l_2779

; optimize OK (service.pas), line = 2959

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2960

	tya
	jeq l_27A3
	lda #$01
	sta F
l_27A3

; optimize OK (service.pas), line = 2961

	lda F
	jeq l_27B6
	lda N1
	jmp l_27C4
l_27B6

; optimize OK (service.pas), line = 2962

	lda #$0A
l_27C4
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2965

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_27CC
l_27CD

; optimize OK (service.pas), line = 2967

	lda SC
	sub #$64
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2968

	inc N1
l_27CC

; optimize OK (service.pas), line = 2966

	lda SC+3
	jne l_27CD
	lda SC+2
	jne l_27CD
	lda SC+1
	jne l_27CD
	lda SC
	cmp #$64
	jcs l_27CD

; optimize OK (service.pas), line = 2970

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2971

	tya
	jeq l_27F7
	lda #$01
	sta F
l_27F7

; optimize OK (service.pas), line = 2972

	lda F
	jeq l_280A
	lda N1
	jmp l_2818
l_280A

; optimize OK (service.pas), line = 2973

	lda #$0A
l_2818
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2976

	lda #$00
	sta N1

; --- WhileProlog
	jmp l_2820
l_2821

; optimize OK (service.pas), line = 2978

	lda SC
	sub #$0A
	sta SC
	lda SC+1
	sbc #$00
	sta SC+1
	lda SC+2
	sbc #$00
	sta SC+2
	lda SC+3
	sbc #$00
	sta SC+3

; optimize FAIL (0, service.pas), line = 2979

	inc N1
l_2820

; optimize OK (service.pas), line = 2977

	lda SC+3
	jne l_2821
	lda SC+2
	jne l_2821
	lda SC+1
	jne l_2821
	lda SC
	cmp #$0A
	jcs l_2821

; optimize OK (service.pas), line = 2981

	ldy N1
	lda adr.MOD10TABLE,y
	sta N1

; optimize OK (service.pas), line = 2982

	tya
	jsr PUT_DIGIT

; optimize OK (service.pas), line = 2986

	lda #$00
	jsr PUT_DIGIT

; -------------------  ASM Block 00000167  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

PY	= DATAORIGIN+$030C
SC	= DATAORIGIN+$030D
adr.MUL_6	= CODEORIGIN+$00D5
.var MUL_6	= adr.MUL_6 .word
N1	= DATAORIGIN+$0311
F	= DATAORIGIN+$0312

@VarData	= PY
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLOT_LIVES					; PROCEDURE
	sta LIVES

; optimize FAIL (0, service.pas), line = 3039

	dec LIVES

; -------------------  ASM Block 00000168  -------------------

	fxs FX_MEMS #$80
    
; optimize OK (service.pas), line = 3046

	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda PATTERN.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3047

	lda PATTERN.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PATTERN.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PATTERN.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PATTERN.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$03
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda PATTERN.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda PATTERN.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda PATTERN.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3049

	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3050

	lda MINIVAUS.OFS
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda MINIVAUS.OFS+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda MINIVAUS.OFS+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda MINIVAUS.OFS+3
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$80
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda MINIVAUS.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3053

	lda #$00
	sta CN

l_286E
; --- ForToDoCondition
	lda CN
	cmp #$08
	jcs l_287C

; optimize OK (service.pas), line = 3055

	sta :ecx
	lda MINIVAUS.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda #$0B
	add :eax
	sta XL

; optimize OK (service.pas), line = 3057

	lda adr.ROW+$C0
	add XL
	sta HLP
	lda adr.ROW+256+$C0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3059

	lda #$40
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3060

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda MINIVAUS.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3062

	lda #$00
	sta I

; optimize OK (service.pas), line = 3064

	sta Y
	ldy MINIVAUS.HEIGHT
	dey
	sty @FORTMP_28B8_0

l_28BB
; --- ForToDoCondition
	lda @FORTMP_28B8_0::#$00
	cmp Y
	jcc l_28C9

; optimize OK (service.pas), line = 3068

	lda Y
	add #$C0
	sta YL

; optimize OK (service.pas), line = 3070

	tay
	lda adr.MODY,y
	sta :ecx
	lda PATTERN.WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta YP+1
	lda :eax
	sta YP

; optimize OK (service.pas), line = 3074

	lda #$00
	sta X
	ldy MINIVAUS.WIDTH
	dey
	sty @FORTMP_28EC_0

l_28EF
; --- ForToDoCondition
	lda @FORTMP_28EC_0::#$00
	cmp X
	jcc l_28FD

; optimize OK (service.pas), line = 3077

	lda XL
	add X
	tay
	lda adr.MODX,y
	sta XP
	lda #$00
	sta XP+1

; optimize OK (service.pas), line = 3081

	lda CN
	cmp LIVES
	jcs l_2935
	lda I
	add X
	tay
	lda adr.POM,y
	jeq l_2935

; optimize OK (service.pas), line = 3089

	lda I
	add X
	sta :STACKORIGIN+9
	lda adr.POM,y
	ldy :STACKORIGIN+9
	jmp l_2957
l_2935

; optimize OK (service.pas), line = 3098

	lda I
	add X
	tay
	lda adr.SCR,y
	and #$80
	sta SHADOW

; optimize OK (service.pas), line = 3101

	lda XP
	add YP
	sta :STACKORIGIN+9
	lda XP+1
	adc YP+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	add :STACKORIGIN+9
	tay
	lda #$B3
	adc :STACKORIGIN+STACKWIDTH+9
	sta :bp+1
	lda (:bp),y
	and #$7F
	ora SHADOW
	sta CL

; optimize OK (service.pas), line = 3107

	lda I
	add X
	tay
	lda CL
l_2957
	sta adr.SCR,y

; --- ForToDoEpilog
	inc X
	jne l_28EF
l_28FD

; optimize OK (service.pas), line = 3111

	lda I
	add MINIVAUS.WIDTH
	sta I

; --- ForToDoEpilog
	inc Y
	jne l_28BB
l_28C9

; optimize OK (service.pas), line = 3115

	lda MINIVAUS.WIDTH
	sta BLITTEMP.@0201810000181000.SWIDTH
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@0201810000181000.SWIDTH+1
	lda #$40
	sta BLITTEMP.@0201810000181000.DWIDTH
	lda #$01
	sta BLITTEMP.@0201810000181000.DWIDTH+1
	jsr BLITTEMP.@0201810000181000

; optimize OK (service.pas), line = 3116

	lda HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda #$50
	add HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda #$00
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda MINIVAUS.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; optimize OK (service.pas), line = 3117

	lda PLAYSCREEN.OFS
	add HLP
	sta BLITTEMP.@040180000018100001820000182000.DST
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITTEMP.@040180000018100001820000182000.DST+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITTEMP.@040180000018100001820000182000.DST+3
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC
	lda #$02
	sta BLITTEMP.@040180000018100001820000182000.SRC+1
	lda #$00
	sta BLITTEMP.@040180000018100001820000182000.SRC+2
	sta BLITTEMP.@040180000018100001820000182000.SRC+3
	lda MINIVAUS.WIDTH
	sta BLITTEMP.@040180000018100001820000182000.W
	lda MINIVAUS.WIDTH+1
	sta BLITTEMP.@040180000018100001820000182000.W+1
	lda MINIVAUS.HEIGHT
	sta BLITTEMP.@040180000018100001820000182000.H
	jsr BLITTEMP.@040180000018100001820000182000

; --- ForToDoEpilog
	inc CN
	jne l_286E
l_287C

; -------------------  ASM Block 00000169  -------------------

	fxs FX_MEMS #$00
    
; ------------------------------------------------------------

LIVES	= DATAORIGIN+$0314
XLIVES	= $0B
YLIVES	= $C0
X	= DATAORIGIN+$0315
Y	= DATAORIGIN+$0316
XL	= DATAORIGIN+$0317
YL	= DATAORIGIN+$0318
CN	= DATAORIGIN+$0319
XP	= DATAORIGIN+$031A
YP	= DATAORIGIN+$031C
SHADOW	= DATAORIGIN+$031E
CL	= DATAORIGIN+$031F
I	= DATAORIGIN+$0320

@VarData	= LIVES
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3132

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3134

	lda HLP
	sta BLITZERO.DST
	lda #$50
	add HLP+1
	sta BLITZERO.DST+1
	lda #$00
	adc #$00
	sta BLITZERO.DST+2
	lda #$00
	adc #$00
	sta BLITZERO.DST+3
	lda SHOOTS.OFS
	sta BLITZERO.SRC
	lda SHOOTS.OFS+1
	sta BLITZERO.SRC+1
	lda SHOOTS.OFS+2
	sta BLITZERO.SRC+2
	lda SHOOTS.OFS+3
	sta BLITZERO.SRC+3
	lda SHOOTS.WIDTH
	sta BLITZERO.W
	lda SHOOTS.WIDTH+1
	sta BLITZERO.W+1
	lda SHOOTS.HEIGHT
	sta BLITZERO.H
	jsr BLITZERO

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3142

	ldy FIRE.Y
	lda FIRE.X
	add adr.ROW,y
	sta HLP
	lda #$00
	adc adr.ROW+256,y
	sta HLP+1

; optimize OK (service.pas), line = 3144

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda SHOOTS.WIDTH
	sta BLITBOX.W
	lda SHOOTS.WIDTH+1
	sta BLITBOX.W+1
	lda SHOOTS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FIRE					; PROCEDURE

; optimize OK (service.pas), line = 3152

	lda FIRE.AVL
	jeq l_2A12

; optimize FAIL ('MOUSECLICK', service.pas), line = 3154

	jsr MOUSECLICK
	ldy #1
	lda MOUSECLICK.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and FIRE.AVL
	sta :STACKORIGIN+1,x
	ldy #1
	lda FIRE.SHOT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2A32

; optimize OK (service.pas), line = 3156

	lda VAUS.WIDTH
	sub SHOOTS.WIDTH
	lsr @
	add VAUS.X
	sta FIRE.X

; optimize OK (service.pas), line = 3157

	lda VAUS.Y
	sub SHOOTS.HEIGHT
	sta FIRE.Y

; optimize OK (service.pas), line = 3158

	lda #$01
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3159

	lda #$00
	sta FIRE.NW

; optimize OK (service.pas), line = 3160

	lda #$BC
	sta BALL_BLOCK_SOUND.A
	lda #$02
	sta BALL_BLOCK_SOUND.A+1
	lda #$05
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
l_2A32

; optimize OK (service.pas), line = 3163

	lda FIRE.SHOT
	jeq l_2A6D

; optimize OK (service.pas), line = 3165

	lda FIRE.NW
	jeq l_2A7A
	jsr REMOVE_FIRE
l_2A7A

; optimize OK (service.pas), line = 3166

	lda #$01
	sta FIRE.NW

; optimize OK (service.pas), line = 3168

	lda FIRE.Y
	sub #$04
	sta FIRE.Y

; optimize OK (service.pas), line = 3169

	cmp #$16
	jcs l_2A95
	lda #$00
	sta FIRE.SHOT
	jmp l_2AA3
l_2A95

; optimize FAIL ('PLACE_FIRE', service.pas), line = 3172

	jsr PLACE_FIRE

; optimize OK (service.pas), line = 3174

	lda FIRE.Y
	sub #$16
	cmp #$00
	jcc l_2ACA
	lda FIRE.Y
	sub #$16
	cmp #$78
	jcs l_2ACA

; optimize OK (service.pas), line = 3176

	lda FIRE.X
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X1

; optimize OK (service.pas), line = 3177

	lda FIRE.Y
	sub #$16
	lsr @
	lsr @
	lsr @
	sta Y1

; optimize OK (service.pas), line = 3179

	lda FIRE.X
	add SHOOTS.WIDTH
	sub #$09
	lsr @
	lsr @
	lsr @
	lsr @
	sta X2

; optimize OK (service.pas), line = 3180

	lda Y1
	sta Y2

; optimize OK (service.pas), line = 3182

	asl @
	asl @
	asl @
	asl @
	add X1
	tay
	lda adr.WALL,y
	jne l_2B38x
	lda Y2
	asl @
	asl @
	asl @
	asl @
	add X2
	tay
	lda adr.WALL,y
	jeq l_2B38
l_2B38x

; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3184

	jsr REMOVE_FIRE

; optimize OK (service.pas), line = 3185

	lda #$00
	sta FIRE.SHOT

; optimize OK (service.pas), line = 3187

	lda X1
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y1
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE

; optimize OK (service.pas), line = 3188

	lda X2
	sta SHOOT_BLOCK_WITH_FIRE.XB
	lda Y2
	sta SHOOT_BLOCK_WITH_FIRE.YB
	jsr SHOOT_BLOCK_WITH_FIRE
l_2AA3
l_2B38
l_2ACA
l_2A6D
l_2A12

; ------------------------------------------------------------

X1	= DATAORIGIN+$0323
X2	= DATAORIGIN+$0324
Y1	= DATAORIGIN+$0325
Y2	= DATAORIGIN+$0326

@VarData	= X1
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVE_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3200

	lda adr.ROW+$B0
	add #$D9
	sta HLP
	lda adr.ROW+256+$B0
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3202

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$08
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda #$14
	sta BLITBOX.H
	jsr BLITBOX

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_FLUX					; PROCEDURE

; optimize OK (service.pas), line = 3211

	lda SCRFLUXCNT
	sta FX

; optimize OK (service.pas), line = 3213

	lda SCRFLUX
	jeq l_2B87

; optimize OK (service.pas), line = 3216

	lda #$13
	sta Y

l_2B91
; --- ForToDoCondition
	lda Y
	add FX
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta HLP+1
	lda :STACKORIGIN+9
	sta HLP

; optimize OK (service.pas), line = 3220

	ldy Y
	lda #$D9
	add adr.ROW+$B0,y
	sta BLITROW.DST
	lda #$50
	adc adr.ROW+256+$B0,y
	sta BLITROW.DST+1
	lda #$00
	adc #$00
	sta BLITROW.DST+2
	lda #$00
	adc #$00
	sta BLITROW.DST+3
	lda FLUX.OFS
	add HLP
	sta BLITROW.SRC
	lda FLUX.OFS+1
	adc HLP+1
	sta BLITROW.SRC+1
	lda FLUX.OFS+2
	adc #$00
	sta BLITROW.SRC+2
	lda FLUX.OFS+3
	adc #$00
	sta BLITROW.SRC+3
	lda #$08
	sta BLITROW.SIZE
	lda #$00
	sta BLITROW.SIZE+1
	jsr BLITROW

; --- ForToDoEpilog
	dec Y
	jpl l_2B91
l_2B9F

; optimize FAIL (0, service.pas), line = 3224

	inc SCRFLUXCNT

; optimize OK (service.pas), line = 3225

	lda SCRFLUXCNT
	cmp #$15
	jcc l_2BE3
	lda #$00
	sta SCRFLUXCNT
l_2BE3
l_2B87

; ------------------------------------------------------------

Y	= DATAORIGIN+$0327
FX	= DATAORIGIN+$0328

@VarData	= Y
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VAUS_OUT					; PROCEDURE

; optimize OK (service.pas), line = 3236

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	add #$10
	sta adr.SCORE.PLAYER,y
	lda adr.SCORE.PLAYER+1,y
	adc #$27
	sta adr.SCORE.PLAYER+1,y
	lda adr.SCORE.PLAYER+2,y
	adc #$00
	sta adr.SCORE.PLAYER+2,y
	lda adr.SCORE.PLAYER+3,y
	adc #$00
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3237

	lda #$00
	sta REMAIN_BLK

; optimize OK (service.pas), line = 3239

	lda VAUS.X
	sta Z

; optimize FAIL ('WAIT_VBL', service.pas), line = 3241

	jsr WAIT_VBL

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3242

	jsr REMOVE_VAUS

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3243

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3245

	lda Z
	sta X
	add #$2C
	sta @FORTMP_2C0F_0

l_2C12
; --- ForToDoCondition
	lda @FORTMP_2C0F_0::#$00
	cmp X
	jcc l_2C20

; optimize FAIL ('WAIT_VBL', service.pas), line = 3247

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3249

	lda VAUS.X
	sta VAUS.OLDX
	lda #$00
	sta VAUS.OLDX+1

; optimize OK (service.pas), line = 3250

	lda X
	sta VAUS.X

; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3251

	jsr REMOVE_VAUS

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3252

	jsr CHECK_FLUX

; optimize FAIL ('PLACE_VAUS', service.pas), line = 3253

	jsr PLACE_VAUS

; optimize OK (service.pas), line = 3255

	ldy VAUS.Y
	lda adr.ROW,y
	add #$E1
	sta HLP
	lda adr.ROW+256,y
	adc #$00
	sta HLP+1

; optimize OK (service.pas), line = 3257

	lda HLP
	sta BLITBOX.DST
	lda #$50
	add HLP+1
	sta BLITBOX.DST+1
	lda #$00
	adc #$00
	sta BLITBOX.DST+2
	lda #$00
	adc #$00
	sta BLITBOX.DST+3
	lda PLAYSCREEN.OFS
	add HLP
	sta BLITBOX.SRC
	lda PLAYSCREEN.OFS+1
	adc HLP+1
	sta BLITBOX.SRC+1
	lda PLAYSCREEN.OFS+2
	adc #$00
	sta BLITBOX.SRC+2
	lda PLAYSCREEN.OFS+3
	adc #$00
	sta BLITBOX.SRC+3
	lda #$28
	sta BLITBOX.W
	lda #$00
	sta BLITBOX.W+1
	lda VAUS.HEIGHT
	sta BLITBOX.H
	jsr BLITBOX

; --- ForToDoEpilog
	inc X
	jne l_2C12
l_2C20

; ------------------------------------------------------------

X	= DATAORIGIN+$0329
Z	= DATAORIGIN+$032A

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECK_BONUS_TYPE				; PROCEDURE

; optimize OK (service.pas), line = 3268

	lda VAUS.LETTER
	jeq l_2C68

; optimize OK (service.pas), line = 3270

	sub #$01
	sta LETT.LAST
	lda #$00
	sbc #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3271

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2C7F
	lda B2
	sta REMOVE_BALL.BALL
	lda B2+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2C7F

; optimize OK (service.pas), line = 3272

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2C91
	lda B3
	sta REMOVE_BALL.BALL
	lda B3+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL
l_2C91

; optimize OK (service.pas), line = 3273

	mwy B2 :bp2
	ldy #B2.INPLAY-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3274

	mwy B3 :bp2
	ldy #B3.INPLAY-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3275

	sta SCRFLUX

; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3276

	jsr REMOVE_FLUX

; optimize OK (service.pas), line = 3278

	lda VAUS.LETTER
	cmp #$06
	jeq l_2CB6

; optimize OK (service.pas), line = 3280

	mwy B1 :bp2
	ldy #B1.LAUNCH-DATAORIGIN
	lda #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3281

	mwy B2 :bp2
	ldy #B2.LAUNCH-DATAORIGIN
	sta (:bp2),y

; optimize OK (service.pas), line = 3282

	mwy B3 :bp2
	ldy #B3.LAUNCH-DATAORIGIN
	sta (:bp2),y
l_2CB6
l_2C68

; optimize OK (service.pas), line = 3286

	lda VAUS.LETTER
	sta @CASETMP_000A
	cmp #$01
	jne l_2CD2
@

; optimize OK (service.pas), line = 3289

	lda FIRE.SHOT
	jeq l_2CDE
	jsr REMOVE_FIRE
l_2CDE

; optimize OK (service.pas), line = 3290

	:7 mva adr.LASERS+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3291

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3292

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3293

	lda #$01
	sta FIRE.AVL

; optimize OK (service.pas), line = 3294

	lda #$00
	sta FIRE.SHOT
	jmp a_000A
l_2CD2
	cmp #$02
	jne l_2CF8

; optimize OK (service.pas), line = 3298

	lda FIRE.SHOT
	jeq l_2D04
	jsr REMOVE_FIRE
l_2D04

; optimize OK (service.pas), line = 3299

	:7 mva adr.ENLARGED+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3300

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3301

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3302

	sta FIRE.AVL
	jmp a_000A
l_2CF8
	cmp #$03
	jne l_2D1A

; optimize OK (service.pas), line = 3306

	lda FIRE.SHOT
	jeq l_2D26
	jsr REMOVE_FIRE
l_2D26

; optimize OK (service.pas), line = 3307

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3308

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3309

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3310

	sta FIRE.AVL

; optimize OK (service.pas), line = 3311

	lda #$01
	sta SCRFLUX
	jmp a_000A
l_2D1A
	cmp #$04
	jne l_2D40

; optimize OK (service.pas), line = 3315

	lda FIRE.SHOT
	jeq l_2D4C
	jsr REMOVE_FIRE
l_2D4C

; optimize OK (service.pas), line = 3316

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3317

	jsr MODIFY_VAUS
; optimize OK (service.pas), line = 3318
	jmp s_2D89
l_2D40
	cmp #$05
	jne l_2D5E

; optimize OK (service.pas), line = 3322

	lda FIRE.SHOT
	jeq l_2D6A
	jsr REMOVE_FIRE
l_2D6A

; optimize OK (service.pas), line = 3323

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3324

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3325

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3326

	mwy B1 :bp2
	ldy #B1.SPEED-DATAORIGIN
	lda (:bp2),y
	sub #$F4
	sta MAX.A
	iny
	lda (:bp2),y
	sbc #$01
	sta MAX.A+1
	lda #$26
	sta MAX.B
	lda #$02
	sta MAX.B+1
	jsr MAX
	lda MAX.RESULT
	sta X
	lda MAX.RESULT+1
	sta X+1

; optimize OK (service.pas), line = 3327

	lda B1
	sta SET_BALL_SPEED.BALL
	lda B1+1
	sta SET_BALL_SPEED.BALL+1
	lda X
	sta SET_BALL_SPEED.SPEED
	lda X+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED
s_2D89
; optimize OK (service.pas), line = 3328
	jmp s_2DA7
l_2D5E
	cmp #$06
	jne l_2D90

; optimize OK (service.pas), line = 3332

	lda FIRE.SHOT
	jeq l_2D9C
	jsr REMOVE_FIRE
l_2D9C

; optimize OK (service.pas), line = 3333

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3334

	jsr MODIFY_VAUS
s_2DA7
; optimize OK (service.pas), line = 3335
	jmp s_2DD7
l_2D90
	cmp #$07
	jne l_2DAE

; optimize OK (service.pas), line = 3339

	lda FIRE.SHOT
	jeq l_2DBA
	jsr REMOVE_FIRE
l_2DBA

; optimize OK (service.pas), line = 3340

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3341

	jsr MODIFY_VAUS

; optimize OK (service.pas), line = 3342

	lda #$00
	sta VAUS.LETTER

; optimize OK (service.pas), line = 3343

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	add #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3344

	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3345

	lda #$D0
	sta BALL_BLOCK_SOUND.A
	lda #$07
	sta BALL_BLOCK_SOUND.A+1
	lda #$0A
	sta BALL_BLOCK_SOUND.B
	lda #$00
	sta BALL_BLOCK_SOUND.B+1
	jsr BALL_BLOCK_SOUND
s_2DD7

; optimize OK (service.pas), line = 3346

	lda #$00
	sta FIRE.AVL
l_2DAE
a_000A

; ------------------------------------------------------------

B1	= DATAORIGIN+$032C
B1.X	= DATAORIGIN+$0000
B1.Y	= DATAORIGIN+$0002
B1.FINEX	= DATAORIGIN+$0004
B1.FINEY	= DATAORIGIN+$0005
B1.OLDX	= DATAORIGIN+$0006
B1.OLDY	= DATAORIGIN+$0008
B1.SPEED	= DATAORIGIN+$000A
B1.FINESPEED	= DATAORIGIN+$000C
B1.SPEEDX	= DATAORIGIN+$000E
B1.SPEEDY	= DATAORIGIN+$0010
B1.SBD	= DATAORIGIN+$0012
B1.BRWHIT	= DATAORIGIN+$0014
B1.INPLAY	= DATAORIGIN+$0015
B1.LAUNCH	= DATAORIGIN+$0016
B1.ONVAUS	= DATAORIGIN+$0017
B1.STM	= DATAORIGIN+$0019
B2	= DATAORIGIN+$0330
B2.X	= DATAORIGIN+$0000
B2.Y	= DATAORIGIN+$0002
B2.FINEX	= DATAORIGIN+$0004
B2.FINEY	= DATAORIGIN+$0005
B2.OLDX	= DATAORIGIN+$0006
B2.OLDY	= DATAORIGIN+$0008
B2.SPEED	= DATAORIGIN+$000A
B2.FINESPEED	= DATAORIGIN+$000C
B2.SPEEDX	= DATAORIGIN+$000E
B2.SPEEDY	= DATAORIGIN+$0010
B2.SBD	= DATAORIGIN+$0012
B2.BRWHIT	= DATAORIGIN+$0014
B2.INPLAY	= DATAORIGIN+$0015
B2.LAUNCH	= DATAORIGIN+$0016
B2.ONVAUS	= DATAORIGIN+$0017
B2.STM	= DATAORIGIN+$0019
B3	= DATAORIGIN+$0334
B3.X	= DATAORIGIN+$0000
B3.Y	= DATAORIGIN+$0002
B3.FINEX	= DATAORIGIN+$0004
B3.FINEY	= DATAORIGIN+$0005
B3.OLDX	= DATAORIGIN+$0006
B3.OLDY	= DATAORIGIN+$0008
B3.SPEED	= DATAORIGIN+$000A
B3.FINESPEED	= DATAORIGIN+$000C
B3.SPEEDX	= DATAORIGIN+$000E
B3.SPEEDY	= DATAORIGIN+$0010
B3.SBD	= DATAORIGIN+$0012
B3.BRWHIT	= DATAORIGIN+$0014
B3.INPLAY	= DATAORIGIN+$0015
B3.LAUNCH	= DATAORIGIN+$0016
B3.ONVAUS	= DATAORIGIN+$0017
B3.STM	= DATAORIGIN+$0019
X	= DATAORIGIN+$0338
@CASETMP_000A	= DATAORIGIN+$033A

@VarData	= B1
@VarDataSize	= 9

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DEVIATE_BALL					; PROCEDURE

; --- RepeatUntilProlog
l_2DE5

; optimize OK (service.pas), line = 3359

	lda BALL
	sta GET_BALL_DIRECTION.BALL
	lda BALL+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	inx
	mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
	mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	lda #$1E
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	mva RAND.RESULT :STACKORIGIN,x
	mva RAND.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	lda :STACKORIGIN-1,x
	sub #$0F
	sta TEMP
	lda :STACKORIGIN-1+STACKWIDTH,x
	sbc #$00
	sta TEMP+1
	dex
	dex

; optimize OK (service.pas), line = 3360

	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	inx
	ldy #1
	lda MOD90.RESULT
	cmp #$1F
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda TEMP
	sta MOD90.A
	lda TEMP+1
	sta MOD90.A+1
	jsr MOD90
	dex
	ldy #1
	lda MOD90.RESULT
	cmp #$3C
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2DE5

; optimize OK (service.pas), line = 3362

	lda BALL
	sta SET_BALL_DIRECTION.BALL
	lda BALL+1
	sta SET_BALL_DIRECTION.BALL+1
	lda TEMP
	sta SET_BALL_DIRECTION.ANGLE
	lda TEMP+1
	sta SET_BALL_DIRECTION.ANGLE+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3363

	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3365

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; ------------------------------------------------------------

BALL	= DATAORIGIN+$033B
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019
TEMP	= DATAORIGIN+$033F

@VarData	= BALL
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BOUNCEBALL					; FUNCTION

	jmp l_2E1F

.local	CHECK_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3397

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2E2E

; optimize OK (service.pas), line = 3400

	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$16
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jmi l_2E4B
	ldy #BALL.Y-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$8E
	lda (:bp2),y
	sbc #$00
	svc
	eor #$80
	jpl l_2E4B

; optimize OK (service.pas), line = 3401

	lda BALL
	sta BALL_HIT_BLOCK.BALL
	lda BALL+1
	sta BALL_HIT_BLOCK.BALL+1
	jsr BALL_HIT_BLOCK
l_2E4B

; optimize OK (service.pas), line = 3403

	lda BALL
	sta SET_BALL.BALL
	lda BALL+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize FAIL ('BALL_SPEED', service.pas), line = 3404

	inx
	mva BALL :STACKORIGIN,x
	mva BALL+1 :STACKORIGIN+STACKWIDTH,x
	jsr BALL_SPEED
	mwy BALL :bp2
	ldy #BALL.SPEED-DATAORIGIN
	lda BALL_SPEED.RESULT
	sta (:bp2),y
	iny
	lda BALL_SPEED.RESULT+1
	sta (:bp2),y
l_2E2E

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03A0
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TEST_BALL					; PROCEDURE

; optimize OK (service.pas), line = 3412

	mwy BALL :bp2
	ldy #BALL.INPLAY-DATAORIGIN
	lda (:bp2),y
	jeq l_2E6C

; optimize OK (service.pas), line = 3414

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3416

	ldy #BALL.FINESPEED-DATAORIGIN
	lda (:bp2),y
	sta :STACKORIGIN+9
	iny
	lda (:bp2),y
	sta :STACKORIGIN+STACKWIDTH+9
	lda LV
	asl @
	tay
	lda adr.LEVEL+1,y
	cmp :STACKORIGIN+STACKWIDTH+9
	bne @+
	lda adr.LEVEL,y
	cmp :STACKORIGIN+9
@
	jcs l_2E82

; optimize OK (service.pas), line = 3418

	ldy #BALL.FINESPEED-DATAORIGIN
	lda #$00
	sta (:bp2),y
	iny
	sta (:bp2),y

; optimize OK (service.pas), line = 3421

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	iny
	cmp #$FF
	lda (:bp2),y
	sbc #$03
	svc
	eor #$80
	jpl l_2E98

; optimize OK (service.pas), line = 3423

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	add #$0A
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3424

	ldy #BALL.SPEED-DATAORIGIN
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED
	iny
	lda (:bp2),y
	sta SET_BALL_SPEED.SPEED+1
	lda BALL
	sta SET_BALL_SPEED.BALL
	lda BALL+1
	sta SET_BALL_SPEED.BALL+1
	jsr SET_BALL_SPEED
l_2E98
l_2E82

; optimize OK (service.pas), line = 3428

	mwy BALL :bp2
	ldy #BALL.SBD-DATAORIGIN
	lda (:bp2),y
	add #$01
	sta (:bp2),y
	iny
	lda (:bp2),y
	adc #$00
	sta (:bp2),y

; optimize OK (service.pas), line = 3432

	ldy #BALL.SBD-DATAORIGIN+$01
	lda (:bp2),y
	cmp #$02
	bne @+
	dey
	lda (:bp2),y
	cmp #$58
@
	jcc l_2EC0
@
	ldy #$00
	lda (:bp2),y
	jpl l_2EC0
@

; optimize OK (service.pas), line = 3433

	lda BALL
	sta DEVIATE_BALL.BALL
	lda BALL+1
	sta DEVIATE_BALL.BALL+1
	jsr DEVIATE_BALL
l_2EC0
l_2E6C

; ------------------------------------------------------------

BALL	= DATAORIGIN+$03A4
BALL.X	= DATAORIGIN+$0000
BALL.Y	= DATAORIGIN+$0002
BALL.FINEX	= DATAORIGIN+$0004
BALL.FINEY	= DATAORIGIN+$0005
BALL.OLDX	= DATAORIGIN+$0006
BALL.OLDY	= DATAORIGIN+$0008
BALL.SPEED	= DATAORIGIN+$000A
BALL.FINESPEED	= DATAORIGIN+$000C
BALL.SPEEDX	= DATAORIGIN+$000E
BALL.SPEEDY	= DATAORIGIN+$0010
BALL.SBD	= DATAORIGIN+$0012
BALL.BRWHIT	= DATAORIGIN+$0014
BALL.INPLAY	= DATAORIGIN+$0015
BALL.LAUNCH	= DATAORIGIN+$0016
BALL.ONVAUS	= DATAORIGIN+$0017
BALL.STM	= DATAORIGIN+$0019

@VarData	= BALL
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_2E1F

; optimize OK (service.pas), line = 3441

	lda #$00
	sta SCRFLUXCNT

; optimize OK (service.pas), line = 3442

	sta SCRFLUX

; optimize OK (service.pas), line = 3444

	lda #$01
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3446

	lda #$00
	sta FIRE.AVL

; optimize OK (service.pas), line = 3447

	:7 mva adr.NORMAL+# adr.PLAYVAUS+#

; optimize OK (service.pas), line = 3449

	lda #$FF
	sta LETT.LAST
	lda #$00
	sta LETT.LAST+1

; optimize OK (service.pas), line = 3450

	sta LETT.ACTIVE

; optimize OK (service.pas), line = 3453

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3456

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 3460

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jsr PLOT_LIVES

; optimize OK (service.pas), line = 3466

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3467

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3468

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize FAIL ('PUT_WALL', service.pas), line = 3471

	jsr PUT_WALL

; optimize OK (service.pas), line = 3478

	lda #$01
	sta BALL0.INPLAY

; optimize OK (service.pas), line = 3479

	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3482

	lda #$6F
	sta BALL0.X
	lda #$00
	sta BALL0.X+1

; optimize OK (service.pas), line = 3483

	lda #$B5
	sta BALL0.Y
	lda #$00
	sta BALL0.Y+1

; optimize OK (service.pas), line = 3486

	lda #$FF
	sta BALL0.OLDX
	lda #$00
	sta BALL0.OLDX+1

; optimize OK (service.pas), line = 3487

	lda #$FF
	sta BALL0.OLDY
	lda #$00
	sta BALL0.OLDY+1

; optimize OK (service.pas), line = 3490

	sta BALL0.SBD
	sta BALL0.SBD+1

; optimize OK (service.pas), line = 3494

	lda #$10
	sta BALL0.ONVAUS
	lda #$00
	sta BALL0.ONVAUS+1

; optimize OK (service.pas), line = 3499

	sta BALL0.STM

; optimize OK (service.pas), line = 3503

	lda #$E8
	sta RAND.RANGE
	lda #$03
	sta RAND.RANGE+1
	jsr RAND
	lda RAND.RESULT
	sta LETT.INCOMING
	lda RAND.RESULT+1
	sta LETT.INCOMING+1

; optimize FAIL ('CREATE_VAUS', service.pas), line = 3506

	jsr CREATE_VAUS

; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3509

	jsr WRITE_ROUND_LEVEL

; optimize FAIL ('SET_VAUS', service.pas), line = 3511

	jsr SET_VAUS

; optimize FAIL ('START_VAUS', service.pas), line = 3512

	jsr START_VAUS

; optimize OK (service.pas), line = 3513

	lda VAUS.X
	sta MOVE_VAUS.X
	lda #$00
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jsr MOVE_VAUS

; optimize FAIL ('START_LEVEL', service.pas), line = 3514

	jsr START_LEVEL

; optimize FAIL ('START_VAUS', service.pas), line = 3515

	jsr START_VAUS

; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3516

	jsr REMOVE_ROUND_LEVEL

; optimize OK (service.pas), line = 3517

	lda BALL0
	sta SET_BALL.BALL
	lda BALL0+1
	sta SET_BALL.BALL+1
	jsr SET_BALL

; optimize OK (service.pas), line = 3524

	lda #$0F
	sta RAND.RANGE
	lda #$00
	sta RAND.RANGE+1
	jsr RAND
	inx
	inx
	lda RAND.RESULT
	add #$3C
	sta :STACKORIGIN-1,x
	lda RAND.RESULT+1
	adc #$00
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	dex
	lda :STACKORIGIN,x
	sta SET_BALL_DIRECTION.ANGLE
	lda :STACKORIGIN+STACKWIDTH,x
	sta SET_BALL_DIRECTION.ANGLE+1
	dex
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3526

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda #$26
	sta SET_BALL_SPEED.SPEED
	lda #$02
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3529

	lda #$00
	sta BALL0.FINESPEED
	sta BALL0.FINESPEED+1

; optimize OK (service.pas), line = 3531

	sta BALL1.INPLAY

; optimize OK (service.pas), line = 3532

	sta BALL2.INPLAY

; optimize OK (service.pas), line = 3534

	lda VAUS.X
	sta X
	lda #$00
	sta X+1

; --- WhileProlog
	jmp l_2F55
l_2F56

; optimize FAIL ('WAIT_VBL', service.pas), line = 3538

	jsr WAIT_VBL

; optimize OK (service.pas), line = 3547

	lda <X
	sta MOUSECOORDS.X
	lda >X
	sta MOUSECOORDS.X+1
	jsr MOUSECOORDS

; optimize OK (service.pas), line = 3552

	lda TRAINER
	jne l_2F6B
	lda X
	sta MOVE_VAUS.X
	lda X+1
	sta MOVE_VAUS.X+1
	lda #$B8
	sta MOVE_VAUS.Y
	lda #$00
	sta MOVE_VAUS.Y+1
	jmp l_2F79
l_2F6B

; optimize OK (service.pas), line = 3558

	lda TRAINER
	cmp #$01
	jne l_2F8B

; optimize FAIL (1, service.pas), line = 3559

	inx
	mva #$B8 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	lda BALL0.X
	sub BALL0.ONVAUS
	sta MAX.A
	lda BALL0.X+1
	sbc BALL0.ONVAUS+1
	sta MAX.A+1
	lda #$0A
	sta MAX.B
	lda #$00
	sta MAX.B+1
	dex
	jsr MAX
	lda #$B8
	sta MIN.A
	lda #$00
	sta MIN.A+1
	lda MAX.RESULT
	sta MIN.B
	lda MAX.RESULT+1
	sta MIN.B+1
	jsr MIN
	lda MIN.RESULT
	sta MOVE_VAUS.X
	lda MIN.RESULT+1
	sta MOVE_VAUS.X+1
	lda :STACKORIGIN,x
	sta MOVE_VAUS.Y
	lda :STACKORIGIN+STACKWIDTH,x
	sta MOVE_VAUS.Y+1
	dex
l_2F79
	jsr MOVE_VAUS
l_2F8B

; optimize OK (service.pas), line = 3564

	lda BALL0.LAUNCH
	cmp #$01
	jne l_2FAD

; optimize FAIL (0, service.pas), line = 3566

	inc BALL0.STM

; optimize OK (service.pas), line = 3571

	lda BALL0.STM
	cmp #$FA
	jne l_2FC4
	lda #$00
	sta BALL0.LAUNCH
l_2FC4

; optimize OK (service.pas), line = 3574

	lda BALL0
	sta START_BALL.BALL
	lda BALL0+1
	sta START_BALL.BALL+1
	jsr START_BALL

; optimize FAIL ('MOUSECLICK', service.pas), line = 3577

	jsr MOUSECLICK
	lda MOUSECLICK.RESULT
	cmp #$01
	jne l_2FDE
	lda #$00
	sta BALL0.LAUNCH
l_2FDE
	jmp l_2FEE
l_2FAD

; optimize OK (service.pas), line = 3585

	lda BALL0.INPLAY
	jeq l_2FFA
	lda BALL0
	sta MOVE_BALL.BALL
	lda BALL0+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_2FFA

; optimize OK (service.pas), line = 3586

	lda BALL1.INPLAY
	jeq l_300C
	lda BALL1
	sta MOVE_BALL.BALL
	lda BALL1+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_300C

; optimize OK (service.pas), line = 3587

	lda BALL2.INPLAY
	jeq l_301E
	lda BALL2
	sta MOVE_BALL.BALL
	lda BALL2+1
	sta MOVE_BALL.BALL+1
	jsr MOVE_BALL
l_301E
l_2FEE

; optimize OK (service.pas), line = 3595

	lda BALL0
	sta CHECK_BALL.BALL
	lda BALL0+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3596

	lda BALL1
	sta CHECK_BALL.BALL
	lda BALL1+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize OK (service.pas), line = 3597

	lda BALL2
	sta CHECK_BALL.BALL
	lda BALL2+1
	sta CHECK_BALL.BALL+1
	jsr CHECK_BALL

; optimize FAIL ('CHECKSHINE', service.pas), line = 3612

	jsr CHECKSHINE

; optimize FAIL ('CHECK_LETTER', service.pas), line = 3613

	jsr CHECK_LETTER

; optimize OK (service.pas), line = 3614

	lda BALL0
	sta CHECK_BONUS_TYPE.B1
	lda BALL0+1
	sta CHECK_BONUS_TYPE.B1+1
	lda BALL1
	sta CHECK_BONUS_TYPE.B2
	lda BALL1+1
	sta CHECK_BONUS_TYPE.B2+1
	lda BALL2
	sta CHECK_BONUS_TYPE.B3
	lda BALL2+1
	sta CHECK_BONUS_TYPE.B3+1
	jsr CHECK_BONUS_TYPE

; optimize FAIL ('CHECK_FIRE', service.pas), line = 3615

	jsr CHECK_FIRE

; optimize FAIL ('CHECK_FLUX', service.pas), line = 3616

	jsr CHECK_FLUX

; optimize OK (service.pas), line = 3618

	lda VAUS.X
	add VAUS.WIDTH
	sta :STACKORIGIN+9
	lda #$00
	adc #$00
	ldy #1
	cmp #$00
	bne @+
	lda :STACKORIGIN+9
	cmp #$D7
@
	beq @+
	dey
@
	tya
	and SCRFLUX
	jeq l_3056
	jsr VAUS_OUT
l_3056

; optimize OK (service.pas), line = 3620

	lda VAUS.LETTER
	cmp #$04
	jne l_306C

; optimize OK (service.pas), line = 3622

	lda #$03
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3624

	mwy BALL1 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3625

	mwy BALL2 :bp2
	ldy #$19
	mva:rpl adr.BALL0,y (:bp2),y-

; optimize OK (service.pas), line = 3627

	lda BALL0
	sta GET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta GET_BALL_DIRECTION.BALL+1
	jsr GET_BALL_DIRECTION
	lda GET_BALL_DIRECTION.RESULT
	sta T1
	lda GET_BALL_DIRECTION.RESULT+1
	sta T1+1

; optimize OK (service.pas), line = 3629

	lda BALL0.SPEED
	sta T2
	lda BALL0.SPEED+1
	sta T2+1

; optimize OK (service.pas), line = 3638

	lda T1
	add #$1E
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL0
	sta SET_BALL_DIRECTION.BALL
	lda BALL0+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3639

	lda T1
	add #$2D
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL1
	sta SET_BALL_DIRECTION.BALL
	lda BALL1+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3640

	lda T1
	add #$3C
	sta SET_BALL_DIRECTION.ANGLE
	lda T1+1
	adc #$00
	sta SET_BALL_DIRECTION.ANGLE+1
	lda BALL2
	sta SET_BALL_DIRECTION.BALL
	lda BALL2+1
	sta SET_BALL_DIRECTION.BALL+1
	jsr SET_BALL_DIRECTION

; optimize OK (service.pas), line = 3644

	lda BALL0
	sta SET_BALL_SPEED.BALL
	lda BALL0+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3645

	lda BALL1
	sta SET_BALL_SPEED.BALL
	lda BALL1+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3646

	lda BALL2
	sta SET_BALL_SPEED.BALL
	lda BALL2+1
	sta SET_BALL_SPEED.BALL+1
	lda T2
	sta SET_BALL_SPEED.SPEED
	lda T2+1
	sta SET_BALL_SPEED.SPEED+1
	jsr SET_BALL_SPEED

; optimize OK (service.pas), line = 3648

	lda #$00
	sta VAUS.LETTER
l_306C

; optimize OK (service.pas), line = 3652

	lda BALLS_IN_PLAY
	cmp #$02
	jcc l_30C2
	lda #$00
	sta LETT.INCOMING
	sta LETT.INCOMING+1
l_30C2

; optimize OK (service.pas), line = 3656

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta SCORES
	lda adr.SCORE.PLAYER+1,y
	sta SCORES+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORES+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORES+3

; optimize OK (service.pas), line = 3658

	lda OLD_SCORES+3
	cmp SCORES+3
	bne @+
	lda OLD_SCORES+2
	cmp SCORES+2
	bne @+
	lda OLD_SCORES+1
	cmp SCORES+1
	bne @+
	lda OLD_SCORES
	cmp SCORES
@
	jeq l_30E0

; optimize OK (service.pas), line = 3660

	ldy CUR_PLAYER
	lda adr.POS_DIGIT,y
	sta WRITE_SCORE.PY
	lda SCORES
	sta WRITE_SCORE.SC
	lda SCORES+1
	sta WRITE_SCORE.SC+1
	lda SCORES+2
	sta WRITE_SCORE.SC+2
	lda SCORES+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 3662

	lda SCORES
	sta OLD_SCORES
	lda SCORES+1
	sta OLD_SCORES+1
	lda SCORES+2
	sta OLD_SCORES+2
	lda SCORES+3
	sta OLD_SCORES+3
l_30E0

; optimize OK (service.pas), line = 3668

	lda CUR_PLAYER
	asl @
	asl @
	tay
	lda adr.SCORE.PLAYER,y
	sta :STACKORIGIN+9
	lda adr.SCORE.PLAYER+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.SCORE.PLAYER+3,y
	cmp SCORE.HISCORE+3
	bne @+
	lda adr.SCORE.PLAYER+2,y
	cmp SCORE.HISCORE+2
	bne @+
	lda :STACKORIGIN+STACKWIDTH+9
	cmp SCORE.HISCORE+1
	bne @+
	lda :STACKORIGIN+9
	cmp SCORE.HISCORE
@
	jcc l_3102
	jeq l_3102

; optimize OK (service.pas), line = 3671

	lda adr.SCORE.PLAYER,y
	sta SCORE.HISCORE
	lda adr.SCORE.PLAYER+1,y
	sta SCORE.HISCORE+1
	lda adr.SCORE.PLAYER+2,y
	sta SCORE.HISCORE+2
	lda adr.SCORE.PLAYER+3,y
	sta SCORE.HISCORE+3

; optimize OK (service.pas), line = 3673

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE
l_3102

; optimize OK (service.pas), line = 3680

	lda BALL0
	sta TEST_BALL.BALL
	lda BALL0+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3681

	lda BALL1
	sta TEST_BALL.BALL
	lda BALL1+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3682

	lda BALL2
	sta TEST_BALL.BALL
	lda BALL2+1
	sta TEST_BALL.BALL+1
	jsr TEST_BALL

; optimize OK (service.pas), line = 3732

	lda BALL0.INPLAY
	jne l_3127

; optimize OK (service.pas), line = 3733

	lda BALL1.INPLAY
	jeq l_3134

; optimize OK (service.pas), line = 3734

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL1,y (:bp2),y-

; optimize OK (service.pas), line = 3735

	lda #$00
	sta BALL1.INPLAY
	jmp l_3144
l_3134

; optimize OK (service.pas), line = 3737

	lda BALL2.INPLAY
	jeq l_3150

; optimize OK (service.pas), line = 3738

	mwy BALL0 :bp2
	ldy #$19
	mva:rpl adr.BALL2,y (:bp2),y-

; optimize OK (service.pas), line = 3739

	lda #$00
	sta BALL2.INPLAY
l_3144
l_3150
l_3127

; optimize OK (service.pas), line = 3743

	lda #$00
	sta BALLS_IN_PLAY

; optimize OK (service.pas), line = 3745

	lda BALL0.INPLAY
	jeq l_316B
	inc BALLS_IN_PLAY
l_316B

; optimize OK (service.pas), line = 3746

	lda BALL1.INPLAY
	jeq l_317E
	inc BALLS_IN_PLAY
l_317E

; optimize OK (service.pas), line = 3747

	lda BALL2.INPLAY
	jeq l_3191
	inc BALLS_IN_PLAY
l_3191

; optimize OK (service.pas), line = 3750

	lda BALL0.INPLAY
	jne l_31A7

; optimize OK (service.pas), line = 3752

	lda #$01
	sta BALL0.LAUNCH

; optimize OK (service.pas), line = 3753

	lda BALL0
	sta REMOVE_BALL.BALL
	lda BALL0+1
	sta REMOVE_BALL.BALL+1
	jsr REMOVE_BALL

; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3754

	jsr DESTROY_VAUS

; optimize OK (service.pas), line = 3755

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	sub #$01
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3756

	lda WALL_P
	sta @move.dst
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.dst+1
	lda WALL
	sta @move.src
	lda WALL+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('NOSOUND', service.pas), line = 3764

	jsr NOSOUND
l_31A7
l_2F55

; optimize OK (service.pas), line = 3536

	lda REMAIN_BLK
	jeq l_2F56w
	lda BALL0.INPLAY
	jeq l_2F56w
	lda SCORE.ABORTPLAY
	jeq l_2F56
l_2F56w

; optimize OK (service.pas), line = 3820

	lda #$00
	sta RESULT

; optimize OK (service.pas), line = 3821

	lda REMAIN_BLK
	jne l_31F5
	lda #$01
	sta RESULT
l_31F5
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0341
X	= DATAORIGIN+$0342
Y	= DATAORIGIN+$0344
KEY	= DATAORIGIN+$0346
T1	= DATAORIGIN+$0348
T2	= DATAORIGIN+$034A
HLP	= DATAORIGIN+$034C
adr.BALL0	= DATAORIGIN+$034E	; [26] RECORD
.var BALL0	= adr.BALL0 .word
BALL0.X	= DATAORIGIN+$034E
BALL0.Y	= DATAORIGIN+$0350
BALL0.FINEX	= DATAORIGIN+$0352
BALL0.FINEY	= DATAORIGIN+$0353
BALL0.OLDX	= DATAORIGIN+$0354
BALL0.OLDY	= DATAORIGIN+$0356
BALL0.SPEED	= DATAORIGIN+$0358
BALL0.FINESPEED	= DATAORIGIN+$035A
BALL0.SPEEDX	= DATAORIGIN+$035C
BALL0.SPEEDY	= DATAORIGIN+$035E
BALL0.SBD	= DATAORIGIN+$0360
BALL0.BRWHIT	= DATAORIGIN+$0362
BALL0.INPLAY	= DATAORIGIN+$0363
BALL0.LAUNCH	= DATAORIGIN+$0364
BALL0.ONVAUS	= DATAORIGIN+$0365
BALL0.STM	= DATAORIGIN+$0367
adr.BALL1	= DATAORIGIN+$0368	; [26] RECORD
.var BALL1	= adr.BALL1 .word
BALL1.X	= DATAORIGIN+$0368
BALL1.Y	= DATAORIGIN+$036A
BALL1.FINEX	= DATAORIGIN+$036C
BALL1.FINEY	= DATAORIGIN+$036D
BALL1.OLDX	= DATAORIGIN+$036E
BALL1.OLDY	= DATAORIGIN+$0370
BALL1.SPEED	= DATAORIGIN+$0372
BALL1.FINESPEED	= DATAORIGIN+$0374
BALL1.SPEEDX	= DATAORIGIN+$0376
BALL1.SPEEDY	= DATAORIGIN+$0378
BALL1.SBD	= DATAORIGIN+$037A
BALL1.BRWHIT	= DATAORIGIN+$037C
BALL1.INPLAY	= DATAORIGIN+$037D
BALL1.LAUNCH	= DATAORIGIN+$037E
BALL1.ONVAUS	= DATAORIGIN+$037F
BALL1.STM	= DATAORIGIN+$0381
adr.BALL2	= DATAORIGIN+$0382	; [26] RECORD
.var BALL2	= adr.BALL2 .word
BALL2.X	= DATAORIGIN+$0382
BALL2.Y	= DATAORIGIN+$0384
BALL2.FINEX	= DATAORIGIN+$0386
BALL2.FINEY	= DATAORIGIN+$0387
BALL2.OLDX	= DATAORIGIN+$0388
BALL2.OLDY	= DATAORIGIN+$038A
BALL2.SPEED	= DATAORIGIN+$038C
BALL2.FINESPEED	= DATAORIGIN+$038E
BALL2.SPEEDX	= DATAORIGIN+$0390
BALL2.SPEEDY	= DATAORIGIN+$0392
BALL2.SBD	= DATAORIGIN+$0394
BALL2.BRWHIT	= DATAORIGIN+$0396
BALL2.INPLAY	= DATAORIGIN+$0397
BALL2.LAUNCH	= DATAORIGIN+$0398
BALL2.ONVAUS	= DATAORIGIN+$0399
BALL2.STM	= DATAORIGIN+$039B
SCORES	= DATAORIGIN+$039C

@VarData	= X
@VarDataSize	= 94

	rts						; ret
.endl

.local	CHOOSE_START_WALL				; FUNCTION

; optimize OK (service.pas), line = 3844

	lda #$01
	sta ST
	lda #$00
	sta ST+1

; optimize OK (service.pas), line = 3902

	lda ST
	sta RESULT
	lda ST+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03A8
PX	= $46
PY	= $64
DX	= $22
DY	= $23
DDX	= $13
DDY	= $0E
X	= DATAORIGIN+$03AA
Y	= DATAORIGIN+$03AC
ST	= DATAORIGIN+$03AE
OLDX	= DATAORIGIN+$03B0
OLDY	= DATAORIGIN+$03B2
NEWX	= DATAORIGIN+$03B4
NEWY	= DATAORIGIN+$03B6

@VarData	= X
@VarDataSize	= 14

	rts						; ret
.endl

.local	SET_START_PARAMETERS				; PROCEDURE

; optimize OK (service.pas), line = 3911

	lda #$01
	sta OLD_SCORES
	lda #$00
	sta OLD_SCORES+1
	sta OLD_SCORES+2
	sta OLD_SCORES+3

; optimize OK (service.pas), line = 3913

	lda #$01
	sta X

l_321A
; --- ForToDoCondition
	lda X
	cmp #$03
	jcs l_3228

; optimize OK (service.pas), line = 3915

	asl @
	asl @
	tay
	lda #$00
	sta adr.SCORE.PLAYER,y
	sta adr.SCORE.PLAYER+1,y
	sta adr.SCORE.PLAYER+2,y
	sta adr.SCORE.PLAYER+3,y

; optimize OK (service.pas), line = 3916

	ldy X
	lda #$05
	sta adr.SCORE.LIVES,y

; optimize OK (service.pas), line = 3917

	lda #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 3918

	lda WALL_P
	sta @move.dst
	lda X
	add WALL_P+1
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 3920

	ldy X
	lda #$00
	sta adr.SCORE.ROUNDSEL,y

; --- ForToDoEpilog
	inc X
	jne l_321A
l_3228

; optimize OK (service.pas), line = 3923

	lda #$01
	sta CUR_PLAYER

; ------------------------------------------------------------

X	= DATAORIGIN+$03B8

@VarData	= X
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MAINSCREEN					; FUNCTION

; optimize FAIL ('NOSOUND', service.pas), line = 3983

	jsr NOSOUND

; optimize OK (service.pas), line = 3984

	lda #$00
	sta SCORE.ABORTPLAY

; optimize OK (service.pas), line = 3995

	lda PRESENTS.OFS
	sta BLITBOX.SRC
	lda PRESENTS.OFS+1
	sta BLITBOX.SRC+1
	lda PRESENTS.OFS+2
	sta BLITBOX.SRC+2
	lda PRESENTS.OFS+3
	sta BLITBOX.SRC+3
	lda #$00
	sta BLITBOX.DST
	lda #$50
	sta BLITBOX.DST+1
	lda #$00
	sta BLITBOX.DST+2
	sta BLITBOX.DST+3
	lda #$40
	sta BLITBOX.W
	lda #$01
	sta BLITBOX.W+1
	lda #$C8
	sta BLITBOX.H
	jsr BLITBOX

; optimize OK (service.pas), line = 4033

	lda #$01
	sta RESULT
	lda #$00
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$03B9
X	= DATAORIGIN+$03BB
Y	= DATAORIGIN+$03BD
Z	= DATAORIGIN+$03BF
K	= DATAORIGIN+$03C1
IK	= DATAORIGIN+$03C3

@VarData	= X
@VarDataSize	= 10

	rts						; ret
.endl

.local	START_GAME					; PROCEDURE

; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 4041

	jsr SET_START_PARAMETERS

; optimize OK (service.pas), line = 4042

	lda PLAYERS+1
	bne @+
	lda PLAYERS
	cmp #$01
@
	jne l_3287
	lda #$00
	sta adr.SCORE.LIVES+$02
l_3287

; optimize OK (service.pas), line = 4045

	lda #$00
	sta TRAINER

; optimize OK (service.pas), line = 4046

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4050

	jsr SET_WALL

; optimize OK (service.pas), line = 4052

	lda PATTERN
	sta FILL_PICTURE_WITH_PATTERN.PATT
	lda PATTERN+1
	sta FILL_PICTURE_WITH_PATTERN.PATT+1
	jsr FILL_PICTURE_WITH_PATTERN

; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 4053

	inx
	mva PLAYSCREEN :STACKORIGIN,x
	mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
	jsr SHOWBTMPICTURE

; optimize OK (service.pas), line = 4060

	lda adr.SCORE.PLAYER+$04
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$04
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$04
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$04
	sta WRITE_SCORE.SC+3
	lda #$3C
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4061

	lda adr.SCORE.PLAYER+$08
	sta WRITE_SCORE.SC
	lda adr.SCORE.PLAYER+1+$08
	sta WRITE_SCORE.SC+1
	lda adr.SCORE.PLAYER+2+$08
	sta WRITE_SCORE.SC+2
	lda adr.SCORE.PLAYER+3+$08
	sta WRITE_SCORE.SC+3
	lda #$5D
	sta WRITE_SCORE.PY
	jsr WRITE_SCORE

; optimize OK (service.pas), line = 4062

	lda #$80
	sta WRITE_SCORE.PY
	lda SCORE.HISCORE
	sta WRITE_SCORE.SC
	lda SCORE.HISCORE+1
	sta WRITE_SCORE.SC+1
	lda SCORE.HISCORE+2
	sta WRITE_SCORE.SC+2
	lda SCORE.HISCORE+3
	sta WRITE_SCORE.SC+3
	jsr WRITE_SCORE

; --- RepeatUntilProlog
l_32B3

; --- RepeatUntilProlog
l_32B4

; optimize OK (service.pas), line = 4072

	ldy CUR_PLAYER
	lda adr.SCORE.ROUNDSEL,y
	jne l_32C6

; optimize FAIL (1, service.pas), line = 4074

	inx
	mva CUR_PLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr CHOOSE_START_WALL
	inx
	mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
	mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.SCORE.WALL_N,y
	dex
	dex

; optimize OK (service.pas), line = 4077

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax+1
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda ALL_WALLS
	sta @move.src
	lda :eax+1
	add ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize OK (service.pas), line = 4081

	ldy CUR_PLAYER
	lda #$01
	sta adr.SCORE.ROUNDSEL,y
l_32C6

; optimize OK (service.pas), line = 4085

	lda WALL
	sta @move.dst
	lda WALL+1
	sta @move.dst+1
	lda WALL_P
	sta @move.src
	lda CUR_PLAYER
	add WALL_P+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move

; optimize FAIL ('SET_WALL', service.pas), line = 4086

	jsr SET_WALL

; optimize FAIL ('BOUNCEBALL', service.pas), line = 4091

	jsr BOUNCEBALL
	lda BOUNCEBALL.RESULT
	sta NWALL

; optimize OK (service.pas), line = 4094

	jeq l_3314

; optimize OK (service.pas), line = 4097

	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	add #$01
	sta adr.SCORE.WALL_N,y

; optimize OK (service.pas), line = 4100

	lda TOTALWALL
	cmp adr.SCORE.WALL_N,y
	jcs l_3330

; optimize OK (service.pas), line = 4101

	lda #$01
	sta adr.SCORE.WALL_N,y
l_3330

; optimize OK (service.pas), line = 4104

	lda #$00
	sta :STACKORIGIN+9
	lda CUR_PLAYER
	sta :STACKORIGIN+STACKWIDTH+9
	ldy CUR_PLAYER
	lda adr.SCORE.WALL_N,y
	sub #$01
	sta :eax
	lda #$00
	sbc #$00
	sta :eax+1
	lda #$00
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda WALL_P
	add :STACKORIGIN+9
	sta @move.dst
	lda WALL_P+1
	adc :STACKORIGIN+STACKWIDTH+9
	sta @move.dst+1
	lda :eax
	add ALL_WALLS
	sta @move.src
	lda :eax+1
	adc ALL_WALLS+1
	sta @move.src+1
	lda <256
	sta @move.cnt
	lda >256
	sta @move.cnt+1
	jsr @move
	jmp l_3362
l_3314

; optimize OK (service.pas), line = 4110

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_3377
	jsr GAME_OVER
l_3362
l_3377

; optimize OK (service.pas), line = 4115

	lda NWALL
	jne l_32B4

; optimize FAIL (0, service.pas), line = 4118

	inc CUR_PLAYER

; optimize OK (service.pas), line = 4119

	lda PLAYERS
	cmp CUR_PLAYER
	lda PLAYERS+1
	sbc #$00
	svc
	eor #$80
	jpl l_339F
	lda #$01
	sta CUR_PLAYER
l_339F

; optimize OK (service.pas), line = 4125

	ldy CUR_PLAYER
	lda adr.SCORE.LIVES,y
	jne l_33BB
	lda #$03
	sub CUR_PLAYER
	sta CUR_PLAYER
l_33BB

; optimize OK (service.pas), line = 4130

	ldy #1
	lda adr.SCORE.LIVES+$01
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda adr.SCORE.LIVES+$02
	beq @+
	dey
@
	tya
	and :STACKORIGIN+9
	ora SCORE.ABORTPLAY
	jeq l_32B3

; ------------------------------------------------------------

PLAYERS	= DATAORIGIN+$03C5
NWALL	= DATAORIGIN+$03C7

@VarData	= PLAYERS
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INIT_GAME					; PROCEDURE

; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 197

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 199

	jsr INITSVGA

; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 200

	jsr INITROWARRAY

; optimize OK (btm.inc), line = 1

	lda #$00
	sta PLAYSCREEN.OFS
	lda #$5E
	sta PLAYSCREEN.OFS+1
	lda #$01
	sta PLAYSCREEN.OFS+2
	lda #$00
	sta PLAYSCREEN.OFS+3

; optimize OK (btm.inc), line = 2

	lda #$40
	sta PLAYSCREEN.WIDTH
	lda #$01
	sta PLAYSCREEN.WIDTH+1

; optimize OK (btm.inc), line = 3

	lda #$C8
	sta PLAYSCREEN.HEIGHT

; optimize OK (btm.inc), line = 5

	lda #$00
	sta PRESENTS.OFS
	lda #$58
	sta PRESENTS.OFS+1
	lda #$02
	sta PRESENTS.OFS+2
	lda #$00
	sta PRESENTS.OFS+3

; optimize OK (btm.inc), line = 6

	lda #$40
	sta PRESENTS.WIDTH
	lda #$01
	sta PRESENTS.WIDTH+1

; optimize OK (btm.inc), line = 7

	lda #$C8
	sta PRESENTS.HEIGHT

; optimize OK (btm.inc), line = 9

	lda #$00
	sta EXPLOSION.OFS
	lda #$52
	sta EXPLOSION.OFS+1
	lda #$03
	sta EXPLOSION.OFS+2
	lda #$00
	sta EXPLOSION.OFS+3

; optimize OK (btm.inc), line = 10

	lda #$2A
	sta EXPLOSION.WIDTH
	lda #$00
	sta EXPLOSION.WIDTH+1

; optimize OK (btm.inc), line = 11

	lda #$72
	sta EXPLOSION.HEIGHT

; optimize OK (btm.inc), line = 13

	lda #$B4
	sta NEWVAUS.OFS
	lda #$64
	sta NEWVAUS.OFS+1
	lda #$03
	sta NEWVAUS.OFS+2
	lda #$00
	sta NEWVAUS.OFS+3

; optimize OK (btm.inc), line = 14

	lda #$29
	sta NEWVAUS.WIDTH
	lda #$00
	sta NEWVAUS.WIDTH+1

; optimize OK (btm.inc), line = 15

	lda #$C1
	sta NEWVAUS.HEIGHT

; optimize OK (btm.inc), line = 17

	lda #$9D
	sta SHINEWALL.OFS
	lda #$83
	sta SHINEWALL.OFS+1
	lda #$03
	sta SHINEWALL.OFS+2
	lda #$00
	sta SHINEWALL.OFS+3

; optimize OK (btm.inc), line = 18

	lda #$10
	sta SHINEWALL.WIDTH
	lda #$00
	sta SHINEWALL.WIDTH+1

; optimize OK (btm.inc), line = 19

	lda #$50
	sta SHINEWALL.HEIGHT

; optimize OK (btm.inc), line = 21

	lda #$9D
	sta MINIVAUS.OFS
	lda #$88
	sta MINIVAUS.OFS+1
	lda #$03
	sta MINIVAUS.OFS+2
	lda #$00
	sta MINIVAUS.OFS+3

; optimize OK (btm.inc), line = 22

	lda #$14
	sta MINIVAUS.WIDTH
	lda #$00
	sta MINIVAUS.WIDTH+1

; optimize OK (btm.inc), line = 23

	lda #$05
	sta MINIVAUS.HEIGHT

; optimize OK (btm.inc), line = 25

	lda #$01
	sta LEVELSEL.OFS
	lda #$89
	sta LEVELSEL.OFS+1
	lda #$03
	sta LEVELSEL.OFS+2
	lda #$00
	sta LEVELSEL.OFS+3

; optimize OK (btm.inc), line = 26

	lda #$15
	sta LEVELSEL.WIDTH
	lda #$00
	sta LEVELSEL.WIDTH+1

; optimize OK (btm.inc), line = 27

	lda #$5F
	sta LEVELSEL.HEIGHT

; optimize OK (btm.inc), line = 29

	lda #$CC
	sta LETTERS.OFS
	lda #$90
	sta LETTERS.OFS+1
	lda #$03
	sta LETTERS.OFS+2
	lda #$00
	sta LETTERS.OFS+3

; optimize OK (btm.inc), line = 30

	lda #$80
	sta LETTERS.WIDTH
	lda #$00
	sta LETTERS.WIDTH+1

; optimize OK (btm.inc), line = 31

	lda #$38
	sta LETTERS.HEIGHT

; optimize OK (btm.inc), line = 33

	lda #$CC
	sta NORMAL.OFS
	lda #$AC
	sta NORMAL.OFS+1
	lda #$03
	sta NORMAL.OFS+2
	lda #$00
	sta NORMAL.OFS+3

; optimize OK (btm.inc), line = 34

	lda #$20
	sta NORMAL.WIDTH
	lda #$00
	sta NORMAL.WIDTH+1

; optimize OK (btm.inc), line = 35

	lda #$07
	sta NORMAL.HEIGHT

; optimize OK (btm.inc), line = 37

	lda #$AC
	sta LASERS.OFS
	lda #$AD
	sta LASERS.OFS+1
	lda #$03
	sta LASERS.OFS+2
	lda #$00
	sta LASERS.OFS+3

; optimize OK (btm.inc), line = 38

	lda #$20
	sta LASERS.WIDTH
	lda #$00
	sta LASERS.WIDTH+1

; optimize OK (btm.inc), line = 39

	lda #$07
	sta LASERS.HEIGHT

; optimize OK (btm.inc), line = 41

	lda #$8C
	sta ENLARGED.OFS
	lda #$AE
	sta ENLARGED.OFS+1
	lda #$03
	sta ENLARGED.OFS+2
	lda #$00
	sta ENLARGED.OFS+3

; optimize OK (btm.inc), line = 42

	lda #$40
	sta ENLARGED.WIDTH
	lda #$00
	sta ENLARGED.WIDTH+1

; optimize OK (btm.inc), line = 43

	lda #$07
	sta ENLARGED.HEIGHT

; optimize OK (btm.inc), line = 45

	lda #$4C
	sta SHOOTS.OFS
	lda #$B0
	sta SHOOTS.OFS+1
	lda #$03
	sta SHOOTS.OFS+2
	lda #$00
	sta SHOOTS.OFS+3

; optimize OK (btm.inc), line = 46

	lda #$0D
	sta SHOOTS.WIDTH
	lda #$00
	sta SHOOTS.WIDTH+1

; optimize OK (btm.inc), line = 47

	lda #$08
	sta SHOOTS.HEIGHT

; optimize OK (btm.inc), line = 49

	lda #$B4
	sta FLUX.OFS
	lda #$B0
	sta FLUX.OFS+1
	lda #$03
	sta FLUX.OFS+2
	lda #$00
	sta FLUX.OFS+3

; optimize OK (btm.inc), line = 50

	lda #$08
	sta FLUX.WIDTH
	lda #$00
	sta FLUX.WIDTH+1

; optimize OK (btm.inc), line = 51

	lda #$29
	sta FLUX.HEIGHT

; optimize OK (btm.inc), line = 53

	lda #$FC
	sta BALLDATA.OFS
	lda #$B1
	sta BALLDATA.OFS+1
	lda #$03
	sta BALLDATA.OFS+2
	lda #$00
	sta BALLDATA.OFS+3

; optimize OK (btm.inc), line = 54

	lda #$05
	sta BALLDATA.WIDTH
	lda #$00
	sta BALLDATA.WIDTH+1

; optimize OK (btm.inc), line = 55

	lda #$05
	sta BALLDATA.HEIGHT

; optimize OK (btm.inc), line = 57

	lda #$15
	sta PATTERN0.OFS
	lda #$B2
	sta PATTERN0.OFS+1
	lda #$03
	sta PATTERN0.OFS+2
	lda #$00
	sta PATTERN0.OFS+3

; optimize OK (btm.inc), line = 58

	lda #$1A
	sta PATTERN0.WIDTH
	lda #$00
	sta PATTERN0.WIDTH+1

; optimize OK (btm.inc), line = 59

	lda #$18
	sta PATTERN0.HEIGHT

; optimize OK (btm.inc), line = 61

	lda #$85
	sta PATTERN1.OFS
	lda #$B4
	sta PATTERN1.OFS+1
	lda #$03
	sta PATTERN1.OFS+2
	lda #$00
	sta PATTERN1.OFS+3

; optimize OK (btm.inc), line = 62

	lda #$0E
	sta PATTERN1.WIDTH
	lda #$00
	sta PATTERN1.WIDTH+1

; optimize OK (btm.inc), line = 63

	lda #$0E
	sta PATTERN1.HEIGHT

; optimize OK (btm.inc), line = 65

	lda #$49
	sta PATTERN2.OFS
	lda #$B5
	sta PATTERN2.OFS+1
	lda #$03
	sta PATTERN2.OFS+2
	lda #$00
	sta PATTERN2.OFS+3

; optimize OK (btm.inc), line = 66

	lda #$26
	sta PATTERN2.WIDTH
	lda #$00
	sta PATTERN2.WIDTH+1

; optimize OK (btm.inc), line = 67

	lda #$23
	sta PATTERN2.HEIGHT

; optimize OK (btm.inc), line = 69

	lda #$7B
	sta PATTERN3.OFS
	lda #$BA
	sta PATTERN3.OFS+1
	lda #$03
	sta PATTERN3.OFS+2
	lda #$00
	sta PATTERN3.OFS+3

; optimize OK (btm.inc), line = 70

	lda #$1C
	sta PATTERN3.WIDTH
	lda #$00
	sta PATTERN3.WIDTH+1

; optimize OK (btm.inc), line = 71

	lda #$1D
	sta PATTERN3.HEIGHT

; optimize OK (btm.inc), line = 73

	lda #$A7
	sta PATTERN4.OFS
	lda #$BD
	sta PATTERN4.OFS+1
	lda #$03
	sta PATTERN4.OFS+2
	lda #$00
	sta PATTERN4.OFS+3

; optimize OK (btm.inc), line = 74

	lda #$1E
	sta PATTERN4.WIDTH
	lda #$00
	sta PATTERN4.WIDTH+1

; optimize OK (btm.inc), line = 75

	lda #$1E
	sta PATTERN4.HEIGHT

; optimize OK (arkanoid_vbxe.pas), line = 207

	lda #$20
	sta TOTALWALL

; optimize OK (arkanoid_vbxe.pas), line = 209

	lda #$50
	sta SCORE.HISCORE
	lda #$C3
	sta SCORE.HISCORE+1
	lda #$00
	sta SCORE.HISCORE+2
	sta SCORE.HISCORE+3

; optimize OK (arkanoid_vbxe.pas), line = 212

	lda #$01
	sta SOUND_ON

; optimize OK (arkanoid_vbxe.pas), line = 213

	lda #$03
	sta LV
	lda #$00
	sta LV+1

; --- RepeatUntilProlog
l_34E5

; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 220

	jsr MAINSCREEN
	lda MAINSCREEN.RESULT
	sta SCORE.PL_NUMB

; optimize OK (arkanoid_vbxe.pas), line = 222

	jeq l_34FB
	lda #$01
	sta START_GAME.PLAYERS
	lda #$00
	sta START_GAME.PLAYERS+1
	jsr START_GAME
l_34FB

; optimize OK (arkanoid_vbxe.pas), line = 225

	lda SCORE.PL_NUMB
	cmp #$01
	jcs l_34E5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0022

; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 233

	jsr INIT_GAME

; ------------------------------------------------------------

VBXE_DATA	= $15E00
VBXE_DIGIT	= $3C200
adr.BLT	= $B100
.var BLT	= adr.BLT .word
adr.BLT.SRC_ADR	= $B100
.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
BLT.SRC_ADR.BYTE0	= $B100
BLT.SRC_ADR.BYTE1	= $B101
BLT.SRC_ADR.BYTE2	= $B102
BLT.SRC_STEP_Y	= $B103
BLT.SRC_STEP_X	= $B105
adr.BLT.DST_ADR	= $B106
.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
BLT.DST_ADR.BYTE0	= $B106
BLT.DST_ADR.BYTE1	= $B107
BLT.DST_ADR.BYTE2	= $B108
BLT.DST_STEP_Y	= $B109
BLT.DST_STEP_X	= $B10B
BLT.BLT_WIDTH	= $B10C
BLT.BLT_HEIGHT	= $B10E
BLT.BLT_AND_MASK	= $B10F
BLT.BLT_XOR_MASK	= $B110
BLT.BLT_COLLISION_MASK	= $B111
BLT.BLT_ZOOM	= $B112
BLT.PATTERN_FEATURE	= $B113
BLT.BLT_CONTROL	= $B114
adr.BLT_LETTER	= $B115
.var BLT_LETTER	= adr.BLT_LETTER .word
adr.BLT_LETTER.SRC_ADR	= $B115
.var BLT_LETTER.SRC_ADR	= adr.BLT_LETTER.SRC_ADR .word
BLT_LETTER.SRC_ADR.BYTE0	= $B115
BLT_LETTER.SRC_ADR.BYTE1	= $B116
BLT_LETTER.SRC_ADR.BYTE2	= $B117
BLT_LETTER.SRC_STEP_Y	= $B118
BLT_LETTER.SRC_STEP_X	= $B11A
adr.BLT_LETTER.DST_ADR	= $B11B
.var BLT_LETTER.DST_ADR	= adr.BLT_LETTER.DST_ADR .word
BLT_LETTER.DST_ADR.BYTE0	= $B11B
BLT_LETTER.DST_ADR.BYTE1	= $B11C
BLT_LETTER.DST_ADR.BYTE2	= $B11D
BLT_LETTER.DST_STEP_Y	= $B11E
BLT_LETTER.DST_STEP_X	= $B120
BLT_LETTER.BLT_WIDTH	= $B121
BLT_LETTER.BLT_HEIGHT	= $B123
BLT_LETTER.BLT_AND_MASK	= $B124
BLT_LETTER.BLT_XOR_MASK	= $B125
BLT_LETTER.BLT_COLLISION_MASK	= $B126
BLT_LETTER.BLT_ZOOM	= $B127
BLT_LETTER.PATTERN_FEATURE	= $B128
BLT_LETTER.BLT_CONTROL	= $B129
adr.VBXE_RAM	= DATAORIGIN+$008C	; [8] OBJECT
.var VBXE_RAM	= adr.VBXE_RAM .word
VBXE_RAM.POSITION	= DATAORIGIN+$008C
VBXE_RAM.SIZE	= DATAORIGIN+$0090
VRAM	= $5000
ERR1	= $01
ERR2	= $02
ERR3	= $03
ERR4	= $04
SCRMIN	= $0A
SCRMAX	= $D8
SCRTOP	= $0C
SCRBOT	= $C8
VAUS_W	= $22
VAUS_H	= $04
VAUS_LINE	= $B8
EMP	= $FF
BALLDIM	= $05
BALLSPOT	= $03
BALLDEV	= $1E
SPEEDFLASH	= $0A
adr.FLASH	= CODEORIGIN+$005E
.var FLASH	= adr.FLASH .word
adr.SCORE_WALL	= CODEORIGIN+$0069
.var SCORE_WALL	= adr.SCORE_WALL .word
adr.EMERG_DEV	= CODEORIGIN+$007F
.var EMERG_DEV	= adr.EMERG_DEV .word
adr.COLORBLOCK	= CODEORIGIN+$0088
.var COLORBLOCK	= adr.COLORBLOCK .word
GRAYDOWN	= $01
STARTWALL	= $01
BALLSPEED	= $0226
MAXSPEED	= $03FF
MAXBRWHIT	= $64
PATNUMBER	= $04
adr.POS_DIGIT	= CODEORIGIN+$0092
.var POS_DIGIT	= adr.POS_DIGIT .word
adr.DIGITS	= CODEORIGIN+$0096
.var DIGITS	= adr.DIGITS .word
adr.LEVEL	= CODEORIGIN+$00A1
.var LEVEL	= adr.LEVEL .word
SBDIR	= $0258
DEFLEVEL	= $03
LETTER_PROB	= $012C
LETTER_DROP	= $03E8
LETTER_NUMB	= $08
LETTER_FRM	= $08
LETTER_SBF	= $05
adr.LETTER_DIS	= CODEORIGIN+$00AD
.var LETTER_DIS	= adr.LETTER_DIS .word
FLUXLEVEL	= $B0
adr.BALLDATA	= DATAORIGIN+$00A9	; [7] RECORD
.var BALLDATA	= adr.BALLDATA .word
BALLDATA.WIDTH	= DATAORIGIN+$00A9
BALLDATA.HEIGHT	= DATAORIGIN+$00AB
BALLDATA.OFS	= DATAORIGIN+$00AC
adr.PLAYSCREEN	= DATAORIGIN+$00B0	; [7] RECORD
.var PLAYSCREEN	= adr.PLAYSCREEN .word
PLAYSCREEN.WIDTH	= DATAORIGIN+$00B0
PLAYSCREEN.HEIGHT	= DATAORIGIN+$00B2
PLAYSCREEN.OFS	= DATAORIGIN+$00B3
adr.PLAYVAUS	= DATAORIGIN+$00B7	; [7] RECORD
.var PLAYVAUS	= adr.PLAYVAUS .word
PLAYVAUS.WIDTH	= DATAORIGIN+$00B7
PLAYVAUS.HEIGHT	= DATAORIGIN+$00B9
PLAYVAUS.OFS	= DATAORIGIN+$00BA
adr.NORMAL	= DATAORIGIN+$00BE	; [7] RECORD
.var NORMAL	= adr.NORMAL .word
NORMAL.WIDTH	= DATAORIGIN+$00BE
NORMAL.HEIGHT	= DATAORIGIN+$00C0
NORMAL.OFS	= DATAORIGIN+$00C1
adr.ENLARGED	= DATAORIGIN+$00C5	; [7] RECORD
.var ENLARGED	= adr.ENLARGED .word
ENLARGED.WIDTH	= DATAORIGIN+$00C5
ENLARGED.HEIGHT	= DATAORIGIN+$00C7
ENLARGED.OFS	= DATAORIGIN+$00C8
adr.LASERS	= DATAORIGIN+$00CC	; [7] RECORD
.var LASERS	= adr.LASERS .word
LASERS.WIDTH	= DATAORIGIN+$00CC
LASERS.HEIGHT	= DATAORIGIN+$00CE
LASERS.OFS	= DATAORIGIN+$00CF
adr.EXPLOSION	= DATAORIGIN+$00D3	; [7] RECORD
.var EXPLOSION	= adr.EXPLOSION .word
EXPLOSION.WIDTH	= DATAORIGIN+$00D3
EXPLOSION.HEIGHT	= DATAORIGIN+$00D5
EXPLOSION.OFS	= DATAORIGIN+$00D6
adr.NEWVAUS	= DATAORIGIN+$00DA	; [7] RECORD
.var NEWVAUS	= adr.NEWVAUS .word
NEWVAUS.WIDTH	= DATAORIGIN+$00DA
NEWVAUS.HEIGHT	= DATAORIGIN+$00DC
NEWVAUS.OFS	= DATAORIGIN+$00DD
adr.PRESENTS	= DATAORIGIN+$00E1	; [7] RECORD
.var PRESENTS	= adr.PRESENTS .word
PRESENTS.WIDTH	= DATAORIGIN+$00E1
PRESENTS.HEIGHT	= DATAORIGIN+$00E3
PRESENTS.OFS	= DATAORIGIN+$00E4
adr.SHINEWALL	= DATAORIGIN+$00E8	; [7] RECORD
.var SHINEWALL	= adr.SHINEWALL .word
SHINEWALL.WIDTH	= DATAORIGIN+$00E8
SHINEWALL.HEIGHT	= DATAORIGIN+$00EA
SHINEWALL.OFS	= DATAORIGIN+$00EB
adr.MINIVAUS	= DATAORIGIN+$00EF	; [7] RECORD
.var MINIVAUS	= adr.MINIVAUS .word
MINIVAUS.WIDTH	= DATAORIGIN+$00EF
MINIVAUS.HEIGHT	= DATAORIGIN+$00F1
MINIVAUS.OFS	= DATAORIGIN+$00F2
adr.LEVELSEL	= DATAORIGIN+$00F6	; [7] RECORD
.var LEVELSEL	= adr.LEVELSEL .word
LEVELSEL.WIDTH	= DATAORIGIN+$00F6
LEVELSEL.HEIGHT	= DATAORIGIN+$00F8
LEVELSEL.OFS	= DATAORIGIN+$00F9
adr.LETTERS	= DATAORIGIN+$00FD	; [7] RECORD
.var LETTERS	= adr.LETTERS .word
LETTERS.WIDTH	= DATAORIGIN+$00FD
LETTERS.HEIGHT	= DATAORIGIN+$00FF
LETTERS.OFS	= DATAORIGIN+$0100
adr.SHOOTS	= DATAORIGIN+$0104	; [7] RECORD
.var SHOOTS	= adr.SHOOTS .word
SHOOTS.WIDTH	= DATAORIGIN+$0104
SHOOTS.HEIGHT	= DATAORIGIN+$0106
SHOOTS.OFS	= DATAORIGIN+$0107
adr.FLUX	= DATAORIGIN+$010B	; [7] RECORD
.var FLUX	= adr.FLUX .word
FLUX.WIDTH	= DATAORIGIN+$010B
FLUX.HEIGHT	= DATAORIGIN+$010D
FLUX.OFS	= DATAORIGIN+$010E
adr.VAUS	= DATAORIGIN+$0112	; [13] RECORD
.var VAUS	= adr.VAUS .word
VAUS.X	= DATAORIGIN+$0112
VAUS.Y	= DATAORIGIN+$0113
VAUS.OLDX	= DATAORIGIN+$0114
VAUS.OLDY	= DATAORIGIN+$0116
VAUS.OLDLEN	= DATAORIGIN+$0118
VAUS.WIDTH	= DATAORIGIN+$011A
VAUS.HEIGHT	= DATAORIGIN+$011B
VAUS.FLASH	= DATAORIGIN+$011C
VAUS.IFLASH	= DATAORIGIN+$011D
VAUS.LETTER	= DATAORIGIN+$011E
adr.PATTERN	= DATAORIGIN+$011F	; [7] RECORD
.var PATTERN	= adr.PATTERN .word
PATTERN.WIDTH	= DATAORIGIN+$011F
PATTERN.HEIGHT	= DATAORIGIN+$0121
PATTERN.OFS	= DATAORIGIN+$0122
adr.PATTERN0	= DATAORIGIN+$0126	; [7] RECORD
.var PATTERN0	= adr.PATTERN0 .word
PATTERN0.WIDTH	= DATAORIGIN+$0126
PATTERN0.HEIGHT	= DATAORIGIN+$0128
PATTERN0.OFS	= DATAORIGIN+$0129
adr.PATTERN1	= DATAORIGIN+$012D	; [7] RECORD
.var PATTERN1	= adr.PATTERN1 .word
PATTERN1.WIDTH	= DATAORIGIN+$012D
PATTERN1.HEIGHT	= DATAORIGIN+$012F
PATTERN1.OFS	= DATAORIGIN+$0130
adr.PATTERN2	= DATAORIGIN+$0134	; [7] RECORD
.var PATTERN2	= adr.PATTERN2 .word
PATTERN2.WIDTH	= DATAORIGIN+$0134
PATTERN2.HEIGHT	= DATAORIGIN+$0136
PATTERN2.OFS	= DATAORIGIN+$0137
adr.PATTERN3	= DATAORIGIN+$013B	; [7] RECORD
.var PATTERN3	= adr.PATTERN3 .word
PATTERN3.WIDTH	= DATAORIGIN+$013B
PATTERN3.HEIGHT	= DATAORIGIN+$013D
PATTERN3.OFS	= DATAORIGIN+$013E
adr.PATTERN4	= DATAORIGIN+$0142	; [7] RECORD
.var PATTERN4	= adr.PATTERN4 .word
PATTERN4.WIDTH	= DATAORIGIN+$0142
PATTERN4.HEIGHT	= DATAORIGIN+$0144
PATTERN4.OFS	= DATAORIGIN+$0145
STATUS	= DATAORIGIN+$0149
REMAIN_BLK	= DATAORIGIN+$014A
TOTALWALL	= DATAORIGIN+$014B
adr.SCORE	= DATAORIGIN+$014C	; [27] RECORD
.var SCORE	= adr.SCORE .word
adr.SCORE.PLAYER	= [DATAORIGIN+$014C] .array [3] .dword
.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
adr.SCORE.WALL_N	= [DATAORIGIN+$0158] .array [3]
.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
adr.SCORE.LIVES	= [DATAORIGIN+$015B] .array [3]
.var SCORE.LIVES	= adr.SCORE.LIVES .word
SCORE.HISCORE	= DATAORIGIN+$015E
SCORE.PL_NUMB	= DATAORIGIN+$0162
adr.SCORE.ROUNDSEL	= [DATAORIGIN+$0163] .array [3]
.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
SCORE.ABORTPLAY	= DATAORIGIN+$0166
CUR_PLAYER	= DATAORIGIN+$0167
adr.SHINEREC	= DATAORIGIN+$0168	; [5] RECORD
.var SHINEREC	= adr.SHINEREC .word
SHINEREC.XB	= DATAORIGIN+$0168
SHINEREC.YB	= DATAORIGIN+$0169
SHINEREC.FRAME	= DATAORIGIN+$016A
SHINEREC.BLOCK	= DATAORIGIN+$016B
SHINEREC.ACTIVE	= DATAORIGIN+$016C
LV	= DATAORIGIN+$016D
TRAINER	= DATAORIGIN+$016F
adr.LETT	= DATAORIGIN+$0170	; [15] RECORD
.var LETT	= adr.LETT .word
LETT.X	= DATAORIGIN+$0170
LETT.Y	= DATAORIGIN+$0171
LETT.TYP	= DATAORIGIN+$0172
LETT.FRAME	= DATAORIGIN+$0174
LETT.SUBFRAME	= DATAORIGIN+$0175
LETT.ACTIVE	= DATAORIGIN+$0176
LETT.INCOMING	= DATAORIGIN+$0177
LETT.NEXTX	= DATAORIGIN+$0179
LETT.NEXTY	= DATAORIGIN+$017A
LETT.NEXTTYPE	= DATAORIGIN+$017B
LETT.LAST	= DATAORIGIN+$017D
adr.FIRE	= DATAORIGIN+$017F	; [5] RECORD
.var FIRE	= adr.FIRE .word
FIRE.X	= DATAORIGIN+$017F
FIRE.Y	= DATAORIGIN+$0180
FIRE.SHOT	= DATAORIGIN+$0181
FIRE.AVL	= DATAORIGIN+$0182
FIRE.NW	= DATAORIGIN+$0183
BALLS_IN_PLAY	= DATAORIGIN+$0184
SCRFLUX	= DATAORIGIN+$0185
SCRFLUXCNT	= DATAORIGIN+$0186
SOUND_ON	= DATAORIGIN+$0187
OLD_SCORES	= DATAORIGIN+$0188
HLP	= DATAORIGIN+$018C
F_HLP	= DATAORIGIN+$018E
adr.SCR	= $B200
.var SCR	= adr.SCR .word
adr.POM	= $B280
.var POM	= adr.POM .word
adr.PAT	= $B300
.var PAT	= adr.PAT .word
adr.MODY	= $0500
.var MODY	= adr.MODY .word
adr.MODX	= $0600
.var MODX	= adr.MODX .word
adr.SQRTABLE	= $A000
.var SQRTABLE	= adr.SQRTABLE .word
adr.ROW	= $C000
.var ROW	= adr.ROW .word
adr.MOD90TABLE	= $C200
.var MOD90TABLE	= adr.MOD90TABLE .word
adr.MOD10TABLE	= $C300
.var MOD10TABLE	= adr.MOD10TABLE .word
adr.SINTABLE	= $C400
.var SINTABLE	= adr.SINTABLE .word
adr.WALL_P	= $D800
.var WALL_P	= adr.WALL_P .word
adr.WALL	= $DB00
.var WALL	= adr.WALL .word
adr.ALL_WALLS	= $DC00
.var ALL_WALLS	= adr.ALL_WALLS .word
@exit

@halt	ldx #$00
	txs

	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

.local	@DEFINES
ATARI
CPU_6502
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.VBXE.@UnitInit
	jsr MAIN.VBXE.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.VBXE) > 0
	.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

	ift .SIZEOF(MAIN.@RESOURCE)>0
.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
	eif

@end

.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $27 $00 $00 $00
.by  $17

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 968

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	ert DATAORIGIN<@end,'DATA memory overlap'

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03 $00 $00 $5A  $00 $B4 $00 $0E $01 $68 $01 $C2
.by  $01 $1C $02 $76 $02 $D0 $02 $2A  $03 $84 $03 $DE $03 $38 $04 $92  $04 $EC $04 $46 $05 $00 $06 $0C
.by  $12 $18 $1E $24 $2A $30 $36 $3C
.endm

	end
