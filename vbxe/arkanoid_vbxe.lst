mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/27] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 1000			CODEORIGIN	= $1000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 10BB				RCDATA 'walls.dat' LEVELS_WALL 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 10BB				org RESORIGIN
    10 10BB 20 87 10		mcpy	jsr sys.off
    12 10BE A9 DC 85 8A A9 10 +  MWA #DATA EDX
    12 10C6 A9 00 85 8E A9 DC +  MWA #MAIN.LEVELS_WALL ECX
    12 10CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 10D6 20 2B 10		 JSR RESOURCE.MEMCPY
    14 10D9 4C AB 10			jmp sys.on
    16 10DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.LEVELS_WALL,'..',main.LEVELS_WALL+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 10			ini mcpy
Source: arkanoid_vbxe.a65
   119 31DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 31DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 31DC				org RESORIGIN
    22 10BB			lbmp
    25 10BB-1552> 20 00 10		jsr vbxe_detect
    26 10BE 90 4B			bcc ok
    28 10C0 A0 10		 LDY> NOTVBXE
    28 10C2 A9 DF		 LDA< NOTVBXE
    28 10C4 20 6C 10		 JSR RESOURCE.@PRINT
    29 10C7 A0 10		 LDY> _EOL
    29 10C9 A9 F0		 LDA< _EOL
    29 10CB 20 6C 10		 JSR RESOURCE.@PRINT
    30 10CE A0 10		 LDY> ANYKEY
    30 10D0 A9 F1		 LDA< ANYKEY
    30 10D2 20 6C 10		 JSR RESOURCE.@PRINT
    32 10D5 AD 0F D2		keypres	lda $d20f
    33 10D8 29 04			and #4
    34 10DA D0 F9			bne keypres
    36 10DC 68				pla
    37 10DD 68				pla
    38 10DE 60				rts
    40 10DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 10F0 9B			_eol	dta $9b
    42 10F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 110B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 110B A9 B8		        lda     #%1000+$B0
     3 110D A0 5E		        ldy     #FX_MEMC
     4 110F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1111 A9 01		        lda     #1
     3 1113 A0 45		        ldy     #FX_PSEL
     4 1115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1117 A9 00		        lda     #0
     3 1119 A0 44		        ldy     #FX_CSEL
     4 111B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 111D A2 00			ldx #0
    55 111F 20 47 11		paloop	jsr pal
    56 1122 85 92			sta ztmp
    57 1124 20 47 11			jsr pal
    58 1127 85 93			sta ztmp+1
    59 1129 20 47 11			jsr pal
    60 112C 85 94			sta ztmp+2
    61 112E 20 47 11			jsr pal
    63 1131 A5 94			lda ztmp+2
     2 1133 A0 46		        ldy     #FX_CR
     3 1135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 1137 A5 93			lda ztmp+1
     2 1139 A0 47		        ldy     #FX_CG
     3 113B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 113D A5 92			lda ztmp
     2 113F A0 48		        ldy     #FX_CB
     3 1141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 1143 E8				inx
    73 1144 D0 D9			bne paloop
    75 1146 60				rts
    77 1147 AD 53 11		pal	lda cpal
    78 = 1148			paladr	equ *-2
    79 114A EE 48 11 D0 03 EE + 	inw paladr
    80 1152 60				rts
    82 1153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 10			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0014			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 1553				org RESORIGIN
     2 10BB-10C1> A9 94		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 10C1 60				rts
    94 02E2-02E3> BB 10			ini RESORIGIN
    96 10C2				org main.VBXE_DATA%$1000+$B000
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0003				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0015				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 95		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0006				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0010				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 96		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0013				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 97		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0020				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0029				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 98		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 002D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0036				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 99		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0039				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0043				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9A		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0046				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0050				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9B		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0053				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9C		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0060				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0069				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9D		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 006D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0076				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9E		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0079				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0083				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9F		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0086				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0090				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0093				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00F9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0103				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0106				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0110				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0113				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0120				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0129				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AC		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 012D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0136				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AD		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0139				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0143				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AE		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0146				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0150				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AF		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0153				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0160				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0169				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 016D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0176				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0179				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0183				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0186				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0190				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0193				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B380				org RESORIGIN
     2 10BB-10C5> A9 00		        lda     #0
     3 10BD A0 5E		        ldy     #FX_MEMC
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 10C1 A0 5F		        ldy     #FX_MEMS
     3 10C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 10C5 60				rts
   125 02E2-02E3> BB 10			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $014A00..$03B37F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 10C6				org CODEORIGIN
   125
   126 1000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 1000-9AEE> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 1018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 1030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 1048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 1060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 1078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 1090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 10A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 10B5			RTLIB
   131 10B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $10B5..$1BEF
   138
   139 				; ------------------------------------------------------------
   140
   141 1BF0			START
   142 1BF0 BA				tsx
   143 1BF1 8E 7F 9A			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 1BF4				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 1BF4			.local	rominit
     5
     6 1BF4 78			        sei
     7 1BF5 A9 00		        lda #%00000000
     8 1BF7 8D 0E D4		        sta NMIEN       ;$D40E
     9 1BFA A9 FE		        lda #%11111110
    10 1BFC 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 1BFF A2 1C		        ldx #<nmiint
    33 1C01 A0 1C		        ldy #>nmiint
    34 1C03 8E FA FF		        stx NMIVEC      ;$FFFA
    35 1C06 8C FB FF		        sty NMIVEC+1
    36
    37 1C09 A2 26		        ldx #<irqint
    38 1C0B A0 1C		        ldy #>irqint
    39 1C0D 8E FE FF		        stx IRQVEC      ;$FFFE
    40 1C10 8C FF FF		        sty IRQVEC+1
    41
    42 1C13 A9 40		        lda #%01000000
    43 1C15 8D 0E D4		        sta NMIEN       ;$D40E
    44 1C18 58			        cli
    45
    46 1C19 4C 47 1C			jmp skp
    47
    48
    49 1C1C 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 1C1F 10 03		        spl
    51 1C21 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 1C24 38			        sec
    54 1C25 24			        .byte $24        ;BIT $18
    55
    56 1C26 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 1C27 EE 01 D3		        inc PORTB       ;$D301
    61
    62 1C2A 48			        pha
    63 1C2B 8A			        txa
    64 1C2C 48			        pha
    65 1C2D BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 1C2E A9 1C		        lda #>iret      ;adres procedury iret
    70 1C30 48			        pha
    71 1C31 A9 40		        lda #<iret
    72 1C33 48			        pha
    73 1C34 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 1C37 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 1C38 90 03		        scc
    79 1C3A 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 1C3D 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 1C40 68			iret	pla
    83 1C41 AA				tax
    84 1C42 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 1C43 CE 01 D3		        dec PORTB       ;$D301
    89 1C46 40			        rti
    90
    91 1C47			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0760			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9B5D			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 1C47				m@init
Macro: M@INIT [Source: macros.asm]
     2 1C47 A0 5D			ldy <VADR
     3 1C49 A2 9B			ldx >VADR
     5 1C4B A9 00			lda #$00
     6 1C4D F0 07			beq skp_
     8 1C4F 99 00 10		clr	sta adr: $1000,y
    10 1C52 C8				iny
    11 1C53 D0 04			bne skp
    12 1C55 E8				inx
    13 1C56 8E 51 1C		skp_	stx adr+1
    15 1C59 E0 A2		skp	cpx >VADR+VLEN
    16 1C5B D0 F2			bne clr
    17 1C5D C0 BD			cpy <VADR+VLEN
    18 1C5F D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 1C61 A2 00			ldx #$00					; X = 0
   169 1C63 86 82			stx bp						; BP = 0
   170
   171 1C65 8E 08 D2			stx audctl					; reset POKEY
   172 1C68 8E 18 D2			stx audctl+$10
   173 1C6B A9 03			lda #3
   174 1C6D 8D 0F D2			sta skctl
   175 1C70 8D 1F D2			sta skctl+$10
   176
   177 1C73 CA				dex						; X = 255
   178
   179 1C74				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 1C74 20 B1 25			jsr MAIN.SYSTEM.@UnitInit
    23 1C77 20 38 2A			jsr MAIN.VBXE.@UnitInit
   180
   181 1C7A			.local	MAIN						; PROCEDURE
   182
   183 1C7A 4C 7B 9A			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 1C7D			.local	SYSTEM						; UNIT
   188
   189 1C7D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 1C7D B5 96			lda :STACKORIGIN,x
   196 1C7F 85 8A			sta A
   197 1C81 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 1C83 85 8B			sta A+1
   199 1C85 CA				dex
   200 1C86			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 1C86 A0 00			ldy #0
   205 1C88 B1 8A 85 92			mva (:edx),y Result
   206
   207 1C8C			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 1C8C E8				inx
   215 1C8D A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 1C91 60				rts						; ret
   231 				.endl
   232
   233 1C92			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 1C92			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 1C92 A5 8B			lda :edx+1
   239 1C94 10 0D			bpl @+
   240
   241 1C96 A9 00			lda #$00
   242 1C98 38 E5 8A			sub :edx
   243 1C9B 85 8A			sta :edx
   244 1C9D A9 00			lda #$00
   245 1C9F E5 8B			sbc :edx+1
   246 1CA1 85 8B			sta :edx+1
   247 				@
   248 1CA3 85 93			sta Result+1
   249
   250 1CA5 A5 8A 85 92			mva :edx Result
   251
   252 1CA9			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 1CA9 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 1CAA			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 1CAA			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 1CAA A5 8D			lda :edx+3
   269 1CAC 10 03			spl
   270 1CAE 20 1C 11			jsr @negEDX
   271
   272 1CB1 85 95			sta Result+3
   273
   274 1CB3 A5 8A 85 92			mva :edx Result
   275 1CB7 A5 8B 85 93			mva :edx+1 Result+1
   276 1CBB A5 8C 85 94			mva :edx+2 Result+2
   277
   278 1CBF			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 1CBF 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 1CC0			.local	SQRT						; FUNCTION | OVERLOAD
   290 1CC0			.local	@010185000
   291
   292 				; optimize OK (SYSTEM), line = 801
   293
   294 1CC0 AD 09 9B			lda X+3
   295 1CC3 30 0B			bmi @+
   296 1CC5 0D 08 9B			ora X+2
   297 1CC8 0D 07 9B			ora X+1
   298 1CCB 0D 06 9B			ora X
   299 1CCE D0 11			jne l_0042
   300 				@
   301 1CD0 A9 00			lda #$00
   302 1CD2 8D 0A 9B			sta RESULT
   303 1CD5 8D 0B 9B			sta RESULT+1
   304 1CD8 8D 0C 9B			sta RESULT+2
   305 1CDB 8D 0D 9B			sta RESULT+3
   306 1CDE 4C 54 1F			jmp @exit
   307 1CE1			l_0042
   308
   309 				; optimize OK (SYSTEM), line = 803
   310
   311 1CE1 A9 10			lda <C
   312 1CE3 8D 0E 9B			sta SP
   313 1CE6 A9 9B			lda >C
   314 1CE8 8D 0F 9B			sta SP+1
   315
   316 				; optimize OK (SYSTEM), line = 805
   317
   318 1CEB AD 06 9B			lda X
   319 1CEE 85 8E			sta :FPMAN0
   320 1CF0 AD 07 9B			lda X+1
   321 1CF3 85 8F			sta :FPMAN1
   322 1CF5 AD 08 9B			lda X+2
   323 1CF8 85 90			sta :FPMAN2
   324 1CFA AD 09 9B			lda X+3
   325 1CFD 85 91			sta :FPMAN3
   326 1CFF 20 3B 19			jsr @I2F
   327 1D02 A5 8E			lda :FPMAN0
   328 1D04 8D 10 9B			sta C
   329 1D07 A5 8F			lda :FPMAN1
   330 1D09 8D 11 9B			sta C+1
   331 1D0C A5 90			lda :FPMAN2
   332 1D0E 8D 12 9B			sta C+2
   333 1D11 A5 91			lda :FPMAN3
   334 1D13 8D 13 9B			sta C+3
   335
   336 				; optimize OK (SYSTEM), line = 807
   337
   338 1D16 C9 3F			cmp #$3F
   339 1D18 D0 13			bne @+
   340 1D1A AD 12 9B			lda C+2
   341 1D1D C9 80			cmp #$80
   342 1D1F D0 0C			bne @+
   343 1D21 AD 11 9B			lda C+1
   344 1D24 C9 00			cmp #$00
   345 1D26 D0 05			bne @+
   346 1D28 AD 10 9B			lda C
   347 1D2B C9 01			cmp #$01
   348 				@
   349 1D2D 90 3A			jcc l_0061
   350 1D2F AD 10 9B			lda C
   351 1D32 85 9F			sta :STACKORIGIN+9
   352 1D34 AD 11 9B			lda C+1
   353 1D37 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   354 1D39 AD 12 9B			lda C+2
   355 1D3C 38 E9 80			sub #$80
   356 1D3F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   357 1D41 AD 13 9B			lda C+3
   358 1D44 E9 3F			sbc #$3F
   359 1D46 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   360 1D48 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
   361 1D4A 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
   362 1D4C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
   363 1D4E 66 9F			ror :STACKORIGIN+9
   364 1D50 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   365 1D52 18 69 80			add #$80
   366 1D55 8D 12 9B			sta C+2
   367 1D58 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   368 1D5A 69 3F			adc #$3F
   369 1D5C 8D 13 9B			sta C+3
   370 1D5F A5 9F			lda :STACKORIGIN+9
   371 1D61 8D 10 9B			sta C
   372 1D64 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   373 1D66 8D 11 9B			sta C+1
   374 1D69			l_0061
   375
   376 				; optimize OK (SYSTEM), line = 809
   377
   378 1D69 AC 0E 9B 84 84 AC + 	mwy SP :bp2
   379 1D73 A0 00			ldy #$00
   380 1D75 B1 84			lda (:bp2),y
   381 1D77 8D 0A 9B			sta RESULT
   382 1D7A C8				iny
   383 1D7B B1 84			lda (:bp2),y
   384 1D7D 8D 0B 9B			sta RESULT+1
   385 1D80 C8				iny
   386 1D81 B1 84			lda (:bp2),y
   387 1D83 8D 0C 9B			sta RESULT+2
   388 1D86 C8				iny
   389 1D87 B1 84			lda (:bp2),y
   390 1D89 8D 0D 9B			sta RESULT+3
   391
   392 				; optimize OK (SYSTEM), line = 811
   393
   394 1D8C AD 06 9B			lda X
   395 1D8F 85 8E			sta :FPMAN0
   396 1D91 AD 07 9B			lda X+1
   397 1D94 85 8F			sta :FPMAN1
   398 1D96 AD 08 9B			lda X+2
   399 1D99 85 90			sta :FPMAN2
   400 1D9B AD 09 9B			lda X+3
   401 1D9E 85 91			sta :FPMAN3
   402 1DA0 20 3B 19			jsr @I2F
   403 1DA3 A5 8E			lda :FPMAN0
   404 1DA5 85 86			sta :FP1MAN0
   405 1DA7 A5 8F			lda :FPMAN1
   406 1DA9 85 87			sta :FP1MAN1
   407 1DAB A5 90			lda :FPMAN2
   408 1DAD 85 88			sta :FP1MAN2
   409 1DAF A5 91			lda :FPMAN3
   410 1DB1 85 89			sta :FP1MAN3
   411 1DB3 AD 0A 9B			lda RESULT
   412 1DB6 85 8A			sta :FP2MAN0
   413 1DB8 AD 0B 9B			lda RESULT+1
   414 1DBB 85 8B			sta :FP2MAN1
   415 1DBD AD 0C 9B			lda RESULT+2
   416 1DC0 85 8C			sta :FP2MAN2
   417 1DC2 AD 0D 9B			lda RESULT+3
   418 1DC5 85 8D			sta :FP2MAN3
   419 1DC7 20 4E 18			jsr @FDIV
   420 1DCA A5 8E			lda :FPMAN0
   421 1DCC 85 8A			sta :FP2MAN0
   422 1DCE A5 8F			lda :FPMAN1
   423 1DD0 85 8B			sta :FP2MAN1
   424 1DD2 A5 90			lda :FPMAN2
   425 1DD4 85 8C			sta :FP2MAN2
   426 1DD6 A5 91			lda :FPMAN3
   427 1DD8 85 8D			sta :FP2MAN3
   428 1DDA AD 0A 9B			lda RESULT
   429 1DDD 85 86			sta :FP1MAN0
   430 1DDF AD 0B 9B			lda RESULT+1
   431 1DE2 85 87			sta :FP1MAN1
   432 1DE4 AD 0C 9B			lda RESULT+2
   433 1DE7 85 88			sta :FP1MAN2
   434 1DE9 AD 0D 9B			lda RESULT+3
   435 1DEC 85 89			sta :FP1MAN3
   436 1DEE 20 41 16			jsr @FADD
   437 1DF1 A5 8E			lda :FPMAN0
   438 1DF3 85 86			sta :FP1MAN0
   439 1DF5 A5 8F			lda :FPMAN1
   440 1DF7 85 87			sta :FP1MAN1
   441 1DF9 A5 90			lda :FPMAN2
   442 1DFB 85 88			sta :FP1MAN2
   443 1DFD A5 91			lda :FPMAN3
   444 1DFF 85 89			sta :FP1MAN3
   445 1E01 A9 00			lda #$00
   446 1E03 85 8A			sta :FP2MAN0
   447 1E05 85 8B			sta :FP2MAN1
   448 1E07 85 8C			sta :FP2MAN2
   449 1E09 A9 3F			lda #$3F
   450 1E0B 85 8D			sta :FP2MAN3
   451 1E0D 20 AD 17			jsr @FMUL
   452 1E10 A5 8E			lda :FPMAN0
   453 1E12 8D 0A 9B			sta RESULT
   454 1E15 A5 8F			lda :FPMAN1
   455 1E17 8D 0B 9B			sta RESULT+1
   456 1E1A A5 90			lda :FPMAN2
   457 1E1C 8D 0C 9B			sta RESULT+2
   458 1E1F A5 91			lda :FPMAN3
   459 1E21 8D 0D 9B			sta RESULT+3
   460
   461 				; optimize OK (SYSTEM), line = 812
   462
   463 1E24 AD 06 9B			lda X
   464 1E27 85 8E			sta :FPMAN0
   465 1E29 AD 07 9B			lda X+1
   466 1E2C 85 8F			sta :FPMAN1
   467 1E2E AD 08 9B			lda X+2
   468 1E31 85 90			sta :FPMAN2
   469 1E33 AD 09 9B			lda X+3
   470 1E36 85 91			sta :FPMAN3
   471 1E38 20 3B 19			jsr @I2F
   472 1E3B A5 8E			lda :FPMAN0
   473 1E3D 85 86			sta :FP1MAN0
   474 1E3F A5 8F			lda :FPMAN1
   475 1E41 85 87			sta :FP1MAN1
   476 1E43 A5 90			lda :FPMAN2
   477 1E45 85 88			sta :FP1MAN2
   478 1E47 A5 91			lda :FPMAN3
   479 1E49 85 89			sta :FP1MAN3
   480 1E4B AD 0A 9B			lda RESULT
   481 1E4E 85 8A			sta :FP2MAN0
   482 1E50 AD 0B 9B			lda RESULT+1
   483 1E53 85 8B			sta :FP2MAN1
   484 1E55 AD 0C 9B			lda RESULT+2
   485 1E58 85 8C			sta :FP2MAN2
   486 1E5A AD 0D 9B			lda RESULT+3
   487 1E5D 85 8D			sta :FP2MAN3
   488 1E5F 20 4E 18			jsr @FDIV
   489 1E62 A5 8E			lda :FPMAN0
   490 1E64 85 8A			sta :FP2MAN0
   491 1E66 A5 8F			lda :FPMAN1
   492 1E68 85 8B			sta :FP2MAN1
   493 1E6A A5 90			lda :FPMAN2
   494 1E6C 85 8C			sta :FP2MAN2
   495 1E6E A5 91			lda :FPMAN3
   496 1E70 85 8D			sta :FP2MAN3
   497 1E72 AD 0A 9B			lda RESULT
   498 1E75 85 86			sta :FP1MAN0
   499 1E77 AD 0B 9B			lda RESULT+1
   500 1E7A 85 87			sta :FP1MAN1
   501 1E7C AD 0C 9B			lda RESULT+2
   502 1E7F 85 88			sta :FP1MAN2
   503 1E81 AD 0D 9B			lda RESULT+3
   504 1E84 85 89			sta :FP1MAN3
   505 1E86 20 41 16			jsr @FADD
   506 1E89 A5 8E			lda :FPMAN0
   507 1E8B 85 86			sta :FP1MAN0
   508 1E8D A5 8F			lda :FPMAN1
   509 1E8F 85 87			sta :FP1MAN1
   510 1E91 A5 90			lda :FPMAN2
   511 1E93 85 88			sta :FP1MAN2
   512 1E95 A5 91			lda :FPMAN3
   513 1E97 85 89			sta :FP1MAN3
   514 1E99 A9 00			lda #$00
   515 1E9B 85 8A			sta :FP2MAN0
   516 1E9D 85 8B			sta :FP2MAN1
   517 1E9F 85 8C			sta :FP2MAN2
   518 1EA1 A9 3F			lda #$3F
   519 1EA3 85 8D			sta :FP2MAN3
   520 1EA5 20 AD 17			jsr @FMUL
   521 1EA8 A5 8E			lda :FPMAN0
   522 1EAA 8D 0A 9B			sta RESULT
   523 1EAD A5 8F			lda :FPMAN1
   524 1EAF 8D 0B 9B			sta RESULT+1
   525 1EB2 A5 90			lda :FPMAN2
   526 1EB4 8D 0C 9B			sta RESULT+2
   527 1EB7 A5 91			lda :FPMAN3
   528 1EB9 8D 0D 9B			sta RESULT+3
   529
   530 				; optimize OK (SYSTEM), line = 813
   531
   532 1EBC AD 06 9B			lda X
   533 1EBF 85 8E			sta :FPMAN0
   534 1EC1 AD 07 9B			lda X+1
   535 1EC4 85 8F			sta :FPMAN1
   536 1EC6 AD 08 9B			lda X+2
   537 1EC9 85 90			sta :FPMAN2
   538 1ECB AD 09 9B			lda X+3
   539 1ECE 85 91			sta :FPMAN3
   540 1ED0 20 3B 19			jsr @I2F
   541 1ED3 A5 8E			lda :FPMAN0
   542 1ED5 85 86			sta :FP1MAN0
   543 1ED7 A5 8F			lda :FPMAN1
   544 1ED9 85 87			sta :FP1MAN1
   545 1EDB A5 90			lda :FPMAN2
   546 1EDD 85 88			sta :FP1MAN2
   547 1EDF A5 91			lda :FPMAN3
   548 1EE1 85 89			sta :FP1MAN3
   549 1EE3 AD 0A 9B			lda RESULT
   550 1EE6 85 8A			sta :FP2MAN0
   551 1EE8 AD 0B 9B			lda RESULT+1
   552 1EEB 85 8B			sta :FP2MAN1
   553 1EED AD 0C 9B			lda RESULT+2
   554 1EF0 85 8C			sta :FP2MAN2
   555 1EF2 AD 0D 9B			lda RESULT+3
   556 1EF5 85 8D			sta :FP2MAN3
   557 1EF7 20 4E 18			jsr @FDIV
   558 1EFA A5 8E			lda :FPMAN0
   559 1EFC 85 8A			sta :FP2MAN0
   560 1EFE A5 8F			lda :FPMAN1
   561 1F00 85 8B			sta :FP2MAN1
   562 1F02 A5 90			lda :FPMAN2
   563 1F04 85 8C			sta :FP2MAN2
   564 1F06 A5 91			lda :FPMAN3
   565 1F08 85 8D			sta :FP2MAN3
   566 1F0A AD 0A 9B			lda RESULT
   567 1F0D 85 86			sta :FP1MAN0
   568 1F0F AD 0B 9B			lda RESULT+1
   569 1F12 85 87			sta :FP1MAN1
   570 1F14 AD 0C 9B			lda RESULT+2
   571 1F17 85 88			sta :FP1MAN2
   572 1F19 AD 0D 9B			lda RESULT+3
   573 1F1C 85 89			sta :FP1MAN3
   574 1F1E 20 41 16			jsr @FADD
   575 1F21 A5 8E			lda :FPMAN0
   576 1F23 85 86			sta :FP1MAN0
   577 1F25 A5 8F			lda :FPMAN1
   578 1F27 85 87			sta :FP1MAN1
   579 1F29 A5 90			lda :FPMAN2
   580 1F2B 85 88			sta :FP1MAN2
   581 1F2D A5 91			lda :FPMAN3
   582 1F2F 85 89			sta :FP1MAN3
   583 1F31 A9 00			lda #$00
   584 1F33 85 8A			sta :FP2MAN0
   585 1F35 85 8B			sta :FP2MAN1
   586 1F37 85 8C			sta :FP2MAN2
   587 1F39 A9 3F			lda #$3F
   588 1F3B 85 8D			sta :FP2MAN3
   589 1F3D 20 AD 17			jsr @FMUL
   590 1F40 A5 8E			lda :FPMAN0
   591 1F42 8D 0A 9B			sta RESULT
   592 1F45 A5 8F			lda :FPMAN1
   593 1F47 8D 0B 9B			sta RESULT+1
   594 1F4A A5 90			lda :FPMAN2
   595 1F4C 8D 0C 9B			sta RESULT+2
   596 1F4F A5 91			lda :FPMAN3
   597 1F51 8D 0D 9B			sta RESULT+3
   598 1F54			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = 9B06			X	= DATAORIGIN+$000B
   603 = 9B0A			RESULT	= DATAORIGIN+$000F
   604 = 9B0E			SP	= DATAORIGIN+$0013
   605 = 9B10			C	= DATAORIGIN+$0015
   606
   607 = 9B06			@VarData	= X
   608 = 000A			@VarDataSize	= 10
   609
   610 1F54 60				rts						; ret
   611 				.endl
   612 				.endl							; overload
   613
   614 1F55			.local	ARCTAN						; FUNCTION | OVERLOAD
   615 1F55			.local	@01018E000
   616
   617 				; optimize OK (SYSTEM), line = 862
   618
   619 1F55 A9 00			lda #$00
   620 1F57 8D 24 9B			sta SIGN
   621
   622 				; optimize OK (SYSTEM), line = 863
   623
   624 1F5A AD 14 9B			lda VALUE
   625 1F5D 8D 1C 9B			sta X
   626 1F60 AD 15 9B			lda VALUE+1
   627 1F63 8D 1D 9B			sta X+1
   628 1F66 AD 16 9B			lda VALUE+2
   629 1F69 8D 1E 9B			sta X+2
   630 1F6C AD 17 9B			lda VALUE+3
   631 1F6F 8D 1F 9B			sta X+3
   632
   633 				; optimize OK (SYSTEM), line = 864
   634
   635 1F72 A9 00			lda #$00
   636 1F74 8D 20 9B			sta Y
   637 1F77 8D 21 9B			sta Y+1
   638 1F7A 8D 22 9B			sta Y+2
   639 1F7D 8D 23 9B			sta Y+3
   640
   641 				; optimize OK (SYSTEM), line = 866
   642
   643 1F80 AD 17 9B			lda VALUE+3
   644 1F83 0D 16 9B			ora VALUE+2
   645 1F86 0D 15 9B			ora VALUE+1
   646 1F89 0D 14 9B			ora VALUE
   647 1F8C D0 11			jne l_00C8
   648
   649 				; optimize OK (SYSTEM), line = 867
   650
   651 1F8E A9 00			lda #$00
   652 1F90 8D 18 9B			sta RESULT
   653 1F93 8D 19 9B			sta RESULT+1
   654 1F96 8D 1A 9B			sta RESULT+2
   655 1F99 8D 1B 9B			sta RESULT+3
   656 1F9C 4C 66 22			jmp @exit
   657 1F9F			l_00C8
   658
   659 				; optimize OK (SYSTEM), line = 870
   660
   661 1F9F AD 1F 9B			lda X+3
   662 1FA2 10 26			jpl l_00E6
   663
   664 				; optimize OK (SYSTEM), line = 871
   665
   666 1FA4 A9 01			lda #$01
   667 1FA6 8D 24 9B			sta SIGN
   668
   669 				; optimize OK (SYSTEM), line = 872
   670
   671 1FA9 A9 00			lda #$00
   672 1FAB 38 ED 1C 9B			sub X
   673 1FAF 8D 1C 9B			sta X
   674 1FB2 A9 00			lda #$00
   675 1FB4 ED 1D 9B			sbc X+1
   676 1FB7 8D 1D 9B			sta X+1
   677 1FBA A9 00			lda #$00
   678 1FBC ED 1E 9B			sbc X+2
   679 1FBF 8D 1E 9B			sta X+2
   680 1FC2 A9 00			lda #$00
   681 1FC4 ED 1F 9B			sbc X+3
   682 1FC7 8D 1F 9B			sta X+3
   683 1FCA			l_00E6
   684 1FCA			l_00D6
   685
   686 				; optimize OK (SYSTEM), line = 875
   687
   688 1FCA AD 1C 9B			lda X
   689 1FCD 85 86			sta @REAL_DIV.A
   690 1FCF AD 1D 9B			lda X+1
   691 1FD2 38 E9 01			sub #$01
   692 1FD5 85 87			sta @REAL_DIV.A+1
   693 1FD7 AD 1E 9B			lda X+2
   694 1FDA E9 00			sbc #$00
   695 1FDC 85 88			sta @REAL_DIV.A+2
   696 1FDE AD 1F 9B			lda X+3
   697 1FE1 E9 00			sbc #$00
   698 1FE3 85 89			sta @REAL_DIV.A+3
   699 1FE5 AD 1C 9B			lda X
   700 1FE8 85 8E			sta @REAL_DIV.B
   701 1FEA AD 1D 9B			lda X+1
   702 1FED 18 69 01			add #$01
   703 1FF0 85 8F			sta @REAL_DIV.B+1
   704 1FF2 AD 1E 9B			lda X+2
   705 1FF5 69 00			adc #$00
   706 1FF7 85 90			sta @REAL_DIV.B+2
   707 1FF9 AD 1F 9B			lda X+3
   708 1FFC 69 00			adc #$00
   709 1FFE 85 91			sta @REAL_DIV.B+3
   710 2000 20 1B 15			jsr @REAL_DIV
   711 2003 A5 86			lda :eax
   712 2005 8D 1C 9B			sta X
   713 2008 A5 87			lda :eax+1
   714 200A 8D 1D 9B			sta X+1
   715 200D A5 88			lda :eax+2
   716 200F 8D 1E 9B			sta X+2
   717 2012 A5 89			lda :eax+3
   718 2014 8D 1F 9B			sta X+3
   719
   720 				; optimize OK (SYSTEM), line = 876
   721
   722 2017 AD 1C 9B			lda X
   723 201A 85 8E			sta @REAL_MUL.B
   724 201C AD 1D 9B			lda X+1
   725 201F 85 8F			sta @REAL_MUL.B+1
   726 2021 AD 1E 9B			lda X+2
   727 2024 85 90			sta @REAL_MUL.B+2
   728 2026 AD 1F 9B			lda X+3
   729 2029 85 91			sta @REAL_MUL.B+3
   730 202B AD 1C 9B			lda X
   731 202E 85 86			sta @REAL_MUL.A
   732 2030 AD 1D 9B			lda X+1
   733 2033 85 87			sta @REAL_MUL.A+1
   734 2035 AD 1E 9B			lda X+2
   735 2038 85 88			sta @REAL_MUL.A+2
   736 203A AD 1F 9B			lda X+3
   737 203D 85 89			sta @REAL_MUL.A+3
   738 203F 20 5C 14			jsr @REAL_MUL
   739 2042 A5 86			lda :eax
   740 2044 8D 20 9B			sta Y
   741 2047 A5 87			lda :eax+1
   742 2049 8D 21 9B			sta Y+1
   743 204C A5 88			lda :eax+2
   744 204E 8D 22 9B			sta Y+2
   745 2051 A5 89			lda :eax+3
   746 2053 8D 23 9B			sta Y+3
   747
   748 				; optimize OK (SYSTEM), line = 877
   749
   750 2056 AD 20 9B			lda Y
   751 2059 85 8E			sta @REAL_MUL.B
   752 205B AD 21 9B			lda Y+1
   753 205E 85 8F			sta @REAL_MUL.B+1
   754 2060 AD 22 9B			lda Y+2
   755 2063 85 90			sta @REAL_MUL.B+2
   756 2065 AD 23 9B			lda Y+3
   757 2068 85 91			sta @REAL_MUL.B+3
   758 206A A9 01			lda #$01
   759 206C 85 86			sta @REAL_MUL.A
   760 206E A9 00			lda #$00
   761 2070 85 87			sta @REAL_MUL.A+1
   762 2072 85 88			sta @REAL_MUL.A+2
   763 2074 85 89			sta @REAL_MUL.A+3
   764 2076 20 5C 14			jsr @REAL_MUL
   765 2079 A5 86			lda :eax
   766 207B 38 E9 04			sub #$04
   767 207E 85 86			sta @REAL_MUL.A
   768 2080 A5 87			lda :eax+1
   769 2082 E9 00			sbc #$00
   770 2084 85 87			sta @REAL_MUL.A+1
   771 2086 A5 88			lda :eax+2
   772 2088 E9 00			sbc #$00
   773 208A 85 88			sta @REAL_MUL.A+2
   774 208C A5 89			lda :eax+3
   775 208E E9 00			sbc #$00
   776 2090 85 89			sta @REAL_MUL.A+3
   777 2092 AD 20 9B			lda Y
   778 2095 85 8E			sta @REAL_MUL.B
   779 2097 AD 21 9B			lda Y+1
   780 209A 85 8F			sta @REAL_MUL.B+1
   781 209C AD 22 9B			lda Y+2
   782 209F 85 90			sta @REAL_MUL.B+2
   783 20A1 AD 23 9B			lda Y+3
   784 20A4 85 91			sta @REAL_MUL.B+3
   785 20A6 20 5C 14			jsr @REAL_MUL
   786 20A9 A5 86			lda :eax
   787 20AB 18 69 0B			add #$0B
   788 20AE 85 86			sta @REAL_MUL.A
   789 20B0 A5 87			lda :eax+1
   790 20B2 69 00			adc #$00
   791 20B4 85 87			sta @REAL_MUL.A+1
   792 20B6 A5 88			lda :eax+2
   793 20B8 69 00			adc #$00
   794 20BA 85 88			sta @REAL_MUL.A+2
   795 20BC A5 89			lda :eax+3
   796 20BE 69 00			adc #$00
   797 20C0 85 89			sta @REAL_MUL.A+3
   798 20C2 AD 20 9B			lda Y
   799 20C5 85 8E			sta @REAL_MUL.B
   800 20C7 AD 21 9B			lda Y+1
   801 20CA 85 8F			sta @REAL_MUL.B+1
   802 20CC AD 22 9B			lda Y+2
   803 20CF 85 90			sta @REAL_MUL.B+2
   804 20D1 AD 23 9B			lda Y+3
   805 20D4 85 91			sta @REAL_MUL.B+3
   806 20D6 20 5C 14			jsr @REAL_MUL
   807 20D9 A5 86			lda :eax
   808 20DB 38 E9 13			sub #$13
   809 20DE 85 86			sta @REAL_MUL.A
   810 20E0 A5 87			lda :eax+1
   811 20E2 E9 00			sbc #$00
   812 20E4 85 87			sta @REAL_MUL.A+1
   813 20E6 A5 88			lda :eax+2
   814 20E8 E9 00			sbc #$00
   815 20EA 85 88			sta @REAL_MUL.A+2
   816 20EC A5 89			lda :eax+3
   817 20EE E9 00			sbc #$00
   818 20F0 85 89			sta @REAL_MUL.A+3
   819 20F2 AD 20 9B			lda Y
   820 20F5 85 8E			sta @REAL_MUL.B
   821 20F7 AD 21 9B			lda Y+1
   822 20FA 85 8F			sta @REAL_MUL.B+1
   823 20FC AD 22 9B			lda Y+2
   824 20FF 85 90			sta @REAL_MUL.B+2
   825 2101 AD 23 9B			lda Y+3
   826 2104 85 91			sta @REAL_MUL.B+3
   827 2106 20 5C 14			jsr @REAL_MUL
   828 2109 A5 86			lda :eax
   829 210B 18 69 1B			add #$1B
   830 210E 85 86			sta @REAL_MUL.A
   831 2110 A5 87			lda :eax+1
   832 2112 69 00			adc #$00
   833 2114 85 87			sta @REAL_MUL.A+1
   834 2116 A5 88			lda :eax+2
   835 2118 69 00			adc #$00
   836 211A 85 88			sta @REAL_MUL.A+2
   837 211C A5 89			lda :eax+3
   838 211E 69 00			adc #$00
   839 2120 85 89			sta @REAL_MUL.A+3
   840 2122 AD 20 9B			lda Y
   841 2125 85 8E			sta @REAL_MUL.B
   842 2127 AD 21 9B			lda Y+1
   843 212A 85 8F			sta @REAL_MUL.B+1
   844 212C AD 22 9B			lda Y+2
   845 212F 85 90			sta @REAL_MUL.B+2
   846 2131 AD 23 9B			lda Y+3
   847 2134 85 91			sta @REAL_MUL.B+3
   848 2136 20 5C 14			jsr @REAL_MUL
   849 2139 A5 86			lda :eax
   850 213B 38 E9 24			sub #$24
   851 213E 85 86			sta @REAL_MUL.A
   852 2140 A5 87			lda :eax+1
   853 2142 E9 00			sbc #$00
   854 2144 85 87			sta @REAL_MUL.A+1
   855 2146 A5 88			lda :eax+2
   856 2148 E9 00			sbc #$00
   857 214A 85 88			sta @REAL_MUL.A+2
   858 214C A5 89			lda :eax+3
   859 214E E9 00			sbc #$00
   860 2150 85 89			sta @REAL_MUL.A+3
   861 2152 AD 20 9B			lda Y
   862 2155 85 8E			sta @REAL_MUL.B
   863 2157 AD 21 9B			lda Y+1
   864 215A 85 8F			sta @REAL_MUL.B+1
   865 215C AD 22 9B			lda Y+2
   866 215F 85 90			sta @REAL_MUL.B+2
   867 2161 AD 23 9B			lda Y+3
   868 2164 85 91			sta @REAL_MUL.B+3
   869 2166 20 5C 14			jsr @REAL_MUL
   870 2169 A5 86			lda :eax
   871 216B 18 69 33			add #$33
   872 216E 85 86			sta @REAL_MUL.A
   873 2170 A5 87			lda :eax+1
   874 2172 69 00			adc #$00
   875 2174 85 87			sta @REAL_MUL.A+1
   876 2176 A5 88			lda :eax+2
   877 2178 69 00			adc #$00
   878 217A 85 88			sta @REAL_MUL.A+2
   879 217C A5 89			lda :eax+3
   880 217E 69 00			adc #$00
   881 2180 85 89			sta @REAL_MUL.A+3
   882 2182 AD 20 9B			lda Y
   883 2185 85 8E			sta @REAL_MUL.B
   884 2187 AD 21 9B			lda Y+1
   885 218A 85 8F			sta @REAL_MUL.B+1
   886 218C AD 22 9B			lda Y+2
   887 218F 85 90			sta @REAL_MUL.B+2
   888 2191 AD 23 9B			lda Y+3
   889 2194 85 91			sta @REAL_MUL.B+3
   890 2196 20 5C 14			jsr @REAL_MUL
   891 2199 A5 86			lda :eax
   892 219B 38 E9 55			sub #$55
   893 219E 85 86			sta @REAL_MUL.A
   894 21A0 A5 87			lda :eax+1
   895 21A2 E9 00			sbc #$00
   896 21A4 85 87			sta @REAL_MUL.A+1
   897 21A6 A5 88			lda :eax+2
   898 21A8 E9 00			sbc #$00
   899 21AA 85 88			sta @REAL_MUL.A+2
   900 21AC A5 89			lda :eax+3
   901 21AE E9 00			sbc #$00
   902 21B0 85 89			sta @REAL_MUL.A+3
   903 21B2 AD 20 9B			lda Y
   904 21B5 85 8E			sta @REAL_MUL.B
   905 21B7 AD 21 9B			lda Y+1
   906 21BA 85 8F			sta @REAL_MUL.B+1
   907 21BC AD 22 9B			lda Y+2
   908 21BF 85 90			sta @REAL_MUL.B+2
   909 21C1 AD 23 9B			lda Y+3
   910 21C4 85 91			sta @REAL_MUL.B+3
   911 21C6 20 5C 14			jsr @REAL_MUL
   912 21C9 A5 87			lda :eax+1
   913 21CB 18 69 01			add #$01
   914 21CE 85 87			sta @REAL_MUL.A+1
   915 21D0 A5 88			lda :eax+2
   916 21D2 69 00			adc #$00
   917 21D4 85 88			sta @REAL_MUL.A+2
   918 21D6 A5 89			lda :eax+3
   919 21D8 69 00			adc #$00
   920 21DA 85 89			sta @REAL_MUL.A+3
   921 21DC AD 1C 9B			lda X
   922 21DF 85 8E			sta @REAL_MUL.B
   923 21E1 AD 1D 9B			lda X+1
   924 21E4 85 8F			sta @REAL_MUL.B+1
   925 21E6 AD 1E 9B			lda X+2
   926 21E9 85 90			sta @REAL_MUL.B+2
   927 21EB AD 1F 9B			lda X+3
   928 21EE 85 91			sta @REAL_MUL.B+3
   929 21F0 20 5C 14			jsr @REAL_MUL
   930 21F3 A5 86			lda :eax
   931 21F5 8D 1C 9B			sta X
   932 21F8 A5 87			lda :eax+1
   933 21FA 8D 1D 9B			sta X+1
   934 21FD A5 88			lda :eax+2
   935 21FF 8D 1E 9B			sta X+2
   936 2202 A5 89			lda :eax+3
   937 2204 8D 1F 9B			sta X+3
   938
   939 				; optimize OK (SYSTEM), line = 880
   940
   941 2207 A9 C9			lda #$C9
   942 2209 18 6D 1C 9B			add X
   943 220D 8D 1C 9B			sta X
   944 2210 A9 00			lda #$00
   945 2212 6D 1D 9B			adc X+1
   946 2215 8D 1D 9B			sta X+1
   947 2218 A9 00			lda #$00
   948 221A 6D 1E 9B			adc X+2
   949 221D 8D 1E 9B			sta X+2
   950 2220 A9 00			lda #$00
   951 2222 6D 1F 9B			adc X+3
   952 2225 8D 1F 9B			sta X+3
   953
   954 				; optimize OK (SYSTEM), line = 882
   955
   956 2228 AD 24 9B			lda SIGN
   957 222B F0 21			jeq l_0168
   958
   959 				; optimize OK (SYSTEM), line = 883
   960
   961 222D A9 00			lda #$00
   962 222F 38 ED 1C 9B			sub X
   963 2233 8D 18 9B			sta RESULT
   964 2236 A9 00			lda #$00
   965 2238 ED 1D 9B			sbc X+1
   966 223B 8D 19 9B			sta RESULT+1
   967 223E A9 00			lda #$00
   968 2240 ED 1E 9B			sbc X+2
   969 2243 8D 1A 9B			sta RESULT+2
   970 2246 A9 00			lda #$00
   971 2248 ED 1F 9B			sbc X+3
   972 224B 4C 63 22			jmp l_0179
   973 224E			l_0168
   974
   975 				; optimize OK (SYSTEM), line = 885
   976
   977 224E AD 1C 9B			lda X
   978 2251 8D 18 9B			sta RESULT
   979 2254 AD 1D 9B			lda X+1
   980 2257 8D 19 9B			sta RESULT+1
   981 225A AD 1E 9B			lda X+2
   982 225D 8D 1A 9B			sta RESULT+2
   983 2260 AD 1F 9B			lda X+3
   984 2263			l_0179
   985 2263 8D 1B 9B			sta RESULT+3
   986 2266			@exit
   987
   988 				; ------------------------------------------------------------
   989
   990 = 9B14			VALUE	= DATAORIGIN+$0019
   991 = 9B18			RESULT	= DATAORIGIN+$001D
   992 = 9B1C			X	= DATAORIGIN+$0021
   993 = 9B20			Y	= DATAORIGIN+$0025
   994 = 9B24			SIGN	= DATAORIGIN+$0029
   995
   996 = 9B14			@VarData	= VALUE
   997 = 000D			@VarDataSize	= 13
   998
   999 2266 60				rts						; ret
  1000 				.endl
  1001 				.endl							; overload
  1002
  1003 2267			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1008 				; as Pointer
  1009 2267 B5 96			lda :STACKORIGIN,x
  1010 2269 85 8A			sta A
  1011 226B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  1012 226D 85 8B			sta A+1
  1013 226F CA				dex
  1014 2270 30 05			jmi @main
  1015
  1016 				; ------------------------------------------------------------
  1017
  1018 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1019 				; as Pointer
  1020 2272 B5 96			lda :STACKORIGIN,x
  1021 2274 85 8E			sta VALUE
  1022 2276 CA				dex
  1023 2277			@main
  1024
  1025 				; -------------------  ASM Block 00000025  -------------------
  1026
  1027 2277 A0 00			ldy #0
  1028 2279 A5 8E 91 8A			mva value (:edx),y
  1029
  1030 				; ------------------------------------------------------------
  1031
  1032 = 008A			A	= :EDX
  1033 = 008E			VALUE	= :ECX
  1034
  1035 227D			@exit
  1036 					.ifdef @new
  1037 					lda <@VarData
  1038 					sta :ztmp
  1039 					lda >@VarData
  1040 					ldy #@VarDataSize-1
  1041 					jmp @FreeMem
  1042 					els
  1043 227D 60				rts						; ret
  1044 					eif
  1045 				.endl
  1046
  1047 227E			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
  1048 227E			.local	@03018000001810000300000
  1049
  1050 					.MACRO m@INLINE
  1051 				
  1052 				; -------------------  ASM Block 00000033  -------------------
  1053 				
  1054 					jsr @fill
  1055 				
  1056 					.ENDM
  1057
  1058 				; ------------------------------------------------------------
  1059
  1060 = 008A			A	= :EDX
  1061 = 008E			COUNT	= :ECX
  1062 = 0086			VALUE	= :EAX
  1063
  1064 227E			@exit
  1065 				.endl
  1066 				.endl							; overload
  1067
  1068 227E			.local	RSINCOS						; FUNCTION
  1069
  1070 				; --- WhileProlog
  1071 227E 4C A2 22			jmp l_01BE
  1072 2281			l_01BF
  1073
  1074 				; optimize OK (SYSTEM), line = 1776
  1075
  1076 2281 AD 25 9B			lda X
  1077 2284 38 E9 48			sub #$48
  1078 2287 8D 25 9B			sta X
  1079 228A AD 26 9B			lda X+1
  1080 228D E9 06			sbc #$06
  1081 228F 8D 26 9B			sta X+1
  1082 2292 AD 27 9B			lda X+2
  1083 2295 E9 00			sbc #$00
  1084 2297 8D 27 9B			sta X+2
  1085 229A AD 28 9B			lda X+3
  1086 229D E9 00			sbc #$00
  1087 229F 8D 28 9B			sta X+3
  1088 22A2			l_01BE
  1089 22A2				.LOCAL
  1090 22A2 AD 28 9B			lda X+3
  1091 22A5 38 E9 00			sub #$00
  1092 22A8 D0 1F			bne L4
  1093 22AA AD 27 9B			lda X+2
  1094 22AD C9 00			cmp #$00
  1095 22AF D0 0C			bne L1
  1096 22B1 AD 26 9B			lda X+1
  1097 22B4 C9 06			cmp #$06
  1098 22B6 D0 05			bne L1
  1099 22B8 AD 25 9B			lda X
  1100 22BB C9 48			cmp #$48
  1101 22BD F0 10		L1	beq L5
  1102 22BF B0 04			bcs L3
  1103 22C1 A9 FF			lda #$FF
  1104 22C3 D0 0A			bne L5
  1105 22C5 A9 01		L3	lda #$01
  1106 22C7 D0 06			bne L5
  1107 22C9 50 04		L4	bvc L5
  1108 22CB 49 FF			eor #$FF
  1109 22CD 09 01			ora #$01
  1110 22CF			L5
  1111 					.ENDL
  1112 22CF 30 02			smi
  1113 22D1 D0 AE			jne l_01BF
  1114
  1115 				; --- WhileProlog
  1116 22D3 4C F7 22			jmp l_01D3
  1117 22D6			l_01D4
  1118
  1119 				; optimize OK (SYSTEM), line = 1777
  1120
  1121 22D6 AD 25 9B			lda X
  1122 22D9 18 69 48			add #$48
  1123 22DC 8D 25 9B			sta X
  1124 22DF AD 26 9B			lda X+1
  1125 22E2 69 06			adc #$06
  1126 22E4 8D 26 9B			sta X+1
  1127 22E7 AD 27 9B			lda X+2
  1128 22EA 69 00			adc #$00
  1129 22EC 8D 27 9B			sta X+2
  1130 22EF AD 28 9B			lda X+3
  1131 22F2 69 00			adc #$00
  1132 22F4 8D 28 9B			sta X+3
  1133 22F7			l_01D3
  1134 22F7 AD 28 9B			lda X+3
  1135 22FA 30 DA			jmi l_01D4
  1136
  1137 				; optimize OK (SYSTEM), line = 1780
  1138
  1139 22FC A9 A3			lda #$A3
  1140 22FE 85 8E			sta @REAL_MUL.B
  1141 2300 A9 00			lda #$00
  1142 2302 85 8F			sta @REAL_MUL.B+1
  1143 2304 85 90			sta @REAL_MUL.B+2
  1144 2306 85 91			sta @REAL_MUL.B+3
  1145 2308 AD 25 9B			lda X
  1146 230B 85 86			sta @REAL_MUL.A
  1147 230D AD 26 9B			lda X+1
  1148 2310 85 87			sta @REAL_MUL.A+1
  1149 2312 AD 27 9B			lda X+2
  1150 2315 85 88			sta @REAL_MUL.A+2
  1151 2317 AD 28 9B			lda X+3
  1152 231A 85 89			sta @REAL_MUL.A+3
  1153 231C 20 5C 14			jsr @REAL_MUL
  1154 231F A5 86			lda :eax
  1155 2321 8D 25 9B			sta X
  1156 2324 A5 87			lda :eax+1
  1157 2326 8D 26 9B			sta X+1
  1158 2329 A5 88			lda :eax+2
  1159 232B 8D 27 9B			sta X+2
  1160 232E A5 89			lda :eax+3
  1161 2330 8D 28 9B			sta X+3
  1162
  1163 				; optimize OK (SYSTEM), line = 1783
  1164
  1165 2333 AD 25 9B			lda X
  1166 2336 85 86			sta @REAL_TRUNC.A
  1167 2338 AD 26 9B			lda X+1
  1168 233B 85 87			sta @REAL_TRUNC.A+1
  1169 233D AD 27 9B			lda X+2
  1170 2340 85 88			sta @REAL_TRUNC.A+2
  1171 2342 AD 28 9B			lda X+3
  1172 2345 85 89			sta @REAL_TRUNC.A+3
  1173 2347 20 A5 15			jsr @REAL_TRUNC
  1174 234A A5 86			lda :eax
  1175 234C 8D 2E 9B			sta I
  1176
  1177 				; optimize OK (SYSTEM), line = 1786
  1178
  1179 234F AD 28 9B			lda X+3
  1180 2352 10 03			jpl l_0202
  1181 2354 CE 2E 9B			dec I
  1182 2357			l_0202
  1183
  1184 				; optimize OK (SYSTEM), line = 1789
  1185
  1186 2357 A0 00			ldy #$00
  1187 2359 AD 2E 9B			lda I
  1188 235C 10 01			spl
  1189 235E 88				dey
  1190 235F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  1191 2361 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  1192 2363 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  1193 2365 AD 26 9B			lda X+1
  1194 2368 38 E5 B0			sub :STACKORIGIN+STACKWIDTH+10
  1195 236B 8D 26 9B			sta X+1
  1196 236E AD 27 9B			lda X+2
  1197 2371 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  1198 2373 8D 27 9B			sta X+2
  1199 2376 AD 28 9B			lda X+3
  1200 2379 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  1201 237B 8D 28 9B			sta X+3
  1202
  1203 				; optimize OK (SYSTEM), line = 1792
  1204
  1205 237E AD 29 9B			lda SC
  1206 2381 F0 03			jeq l_021F
  1207 2383 EE 2E 9B			inc I
  1208 2386			l_021F
  1209
  1210 				; optimize OK (SYSTEM), line = 1795
  1211
  1212 2386 AD 2E 9B			lda I
  1213 2389 29 01			and #$01
  1214 238B D0 21			jne l_023C
  1215 238D A9 00			lda #$00
  1216 238F 38 ED 25 9B			sub X
  1217 2393 8D 25 9B			sta X
  1218 2396 A9 01			lda #$01
  1219 2398 ED 26 9B			sbc X+1
  1220 239B 8D 26 9B			sta X+1
  1221 239E A9 00			lda #$00
  1222 23A0 ED 27 9B			sbc X+2
  1223 23A3 8D 27 9B			sta X+2
  1224 23A6 A9 00			lda #$00
  1225 23A8 ED 28 9B			sbc X+3
  1226 23AB 8D 28 9B			sta X+3
  1227 23AE			l_023C
  1228
  1229 				; optimize OK (SYSTEM), line = 1798
  1230
  1231 23AE AD 25 9B			lda X
  1232 23B1 85 8E			sta @REAL_MUL.B
  1233 23B3 AD 26 9B			lda X+1
  1234 23B6 85 8F			sta @REAL_MUL.B+1
  1235 23B8 AD 27 9B			lda X+2
  1236 23BB 85 90			sta @REAL_MUL.B+2
  1237 23BD AD 28 9B			lda X+3
  1238 23C0 85 91			sta @REAL_MUL.B+3
  1239 23C2 AD 25 9B			lda X
  1240 23C5 85 86			sta @REAL_MUL.A
  1241 23C7 AD 26 9B			lda X+1
  1242 23CA 85 87			sta @REAL_MUL.A+1
  1243 23CC AD 27 9B			lda X+2
  1244 23CF 85 88			sta @REAL_MUL.A+2
  1245 23D1 AD 28 9B			lda X+3
  1246 23D4 85 89			sta @REAL_MUL.A+3
  1247 23D6 20 5C 14			jsr @REAL_MUL
  1248 23D9 A5 86			lda :eax
  1249 23DB 8D 25 9B			sta X
  1250 23DE A5 87			lda :eax+1
  1251 23E0 8D 26 9B			sta X+1
  1252 23E3 A5 88			lda :eax+2
  1253 23E5 8D 27 9B			sta X+2
  1254 23E8 A5 89			lda :eax+3
  1255 23EA 8D 28 9B			sta X+3
  1256
  1257 				; optimize OK (SYSTEM), line = 1799
  1258
  1259 23ED AD 25 9B			lda X
  1260 23F0 85 8E			sta @REAL_MUL.B
  1261 23F2 AD 26 9B			lda X+1
  1262 23F5 85 8F			sta @REAL_MUL.B+1
  1263 23F7 AD 27 9B			lda X+2
  1264 23FA 85 90			sta @REAL_MUL.B+2
  1265 23FC AD 28 9B			lda X+3
  1266 23FF 85 91			sta @REAL_MUL.B+3
  1267 2401 A9 05			lda #$05
  1268 2403 85 86			sta @REAL_MUL.A
  1269 2405 A9 00			lda #$00
  1270 2407 85 87			sta @REAL_MUL.A+1
  1271 2409 85 88			sta @REAL_MUL.A+2
  1272 240B 85 89			sta @REAL_MUL.A+3
  1273 240D 20 5C 14			jsr @REAL_MUL
  1274 2410 A5 86			lda :eax
  1275 2412 38 E9 3C			sub #$3C
  1276 2415 85 86			sta @REAL_MUL.A
  1277 2417 A5 87			lda :eax+1
  1278 2419 E9 00			sbc #$00
  1279 241B 85 87			sta @REAL_MUL.A+1
  1280 241D A5 88			lda :eax+2
  1281 241F E9 00			sbc #$00
  1282 2421 85 88			sta @REAL_MUL.A+2
  1283 2423 A5 89			lda :eax+3
  1284 2425 E9 00			sbc #$00
  1285 2427 85 89			sta @REAL_MUL.A+3
  1286 2429 AD 25 9B			lda X
  1287 242C 85 8E			sta @REAL_MUL.B
  1288 242E AD 26 9B			lda X+1
  1289 2431 85 8F			sta @REAL_MUL.B+1
  1290 2433 AD 27 9B			lda X+2
  1291 2436 85 90			sta @REAL_MUL.B+2
  1292 2438 AD 28 9B			lda X+3
  1293 243B 85 91			sta @REAL_MUL.B+3
  1294 243D 20 5C 14			jsr @REAL_MUL
  1295 2440 A5 87			lda :eax+1
  1296 2442 18 69 01			add #$01
  1297 2445 85 87			sta @REAL_MUL.A+1
  1298 2447 A5 88			lda :eax+2
  1299 2449 69 00			adc #$00
  1300 244B 85 88			sta @REAL_MUL.A+2
  1301 244D A5 89			lda :eax+3
  1302 244F 69 00			adc #$00
  1303 2451 85 89			sta @REAL_MUL.A+3
  1304 2453 A9 00			lda #$00
  1305 2455 38 ED 25 9B			sub X
  1306 2459 85 8E			sta @REAL_MUL.B
  1307 245B A9 01			lda #$01
  1308 245D ED 26 9B			sbc X+1
  1309 2460 85 8F			sta @REAL_MUL.B+1
  1310 2462 A9 00			lda #$00
  1311 2464 ED 27 9B			sbc X+2
  1312 2467 85 90			sta @REAL_MUL.B+2
  1313 2469 A9 00			lda #$00
  1314 246B ED 28 9B			sbc X+3
  1315 246E 85 91			sta @REAL_MUL.B+3
  1316 2470 20 5C 14			jsr @REAL_MUL
  1317 2473 A5 86			lda :eax
  1318 2475 8D 2A 9B			sta RESULT
  1319 2478 A5 87			lda :eax+1
  1320 247A 8D 2B 9B			sta RESULT+1
  1321 247D A5 88			lda :eax+2
  1322 247F 8D 2C 9B			sta RESULT+2
  1323 2482 A5 89			lda :eax+3
  1324 2484 8D 2D 9B			sta RESULT+3
  1325
  1326 				; optimize OK (SYSTEM), line = 1802
  1327
  1328 2487 AD 2E 9B			lda I
  1329 248A 29 02			and #$02
  1330 248C C9 02			cmp #$02
  1331 248E D0 21			jne l_0281
  1332 2490 A9 00			lda #$00
  1333 2492 38 ED 2A 9B			sub RESULT
  1334 2496 8D 2A 9B			sta RESULT
  1335 2499 A9 00			lda #$00
  1336 249B ED 2B 9B			sbc RESULT+1
  1337 249E 8D 2B 9B			sta RESULT+1
  1338 24A1 A9 00			lda #$00
  1339 24A3 ED 2C 9B			sbc RESULT+2
  1340 24A6 8D 2C 9B			sta RESULT+2
  1341 24A9 A9 00			lda #$00
  1342 24AB ED 2D 9B			sbc RESULT+3
  1343 24AE 8D 2D 9B			sta RESULT+3
  1344 24B1			l_0281
  1345 24B1			@exit
  1346
  1347 				; ------------------------------------------------------------
  1348
  1349 = 9B25			X	= DATAORIGIN+$002A
  1350 = 9B29			SC	= DATAORIGIN+$002E
  1351 = 9B2A			RESULT	= DATAORIGIN+$002F
  1352 = 9B2E			I	= DATAORIGIN+$0033
  1353
  1354 = 9B25			@VarData	= X
  1355 = 0006			@VarDataSize	= 6
  1356
  1357 24B1 60				rts						; ret
  1358 				.endl
  1359
  1360 24B2			.local	SIN						; FUNCTION | OVERLOAD
  1361 24B2			.local	@01018E000
  1362
  1363 				; optimize OK (SYSTEM), line = 1817
  1364
  1365 24B2 AD 2F 9B			lda X
  1366 24B5 8D 25 9B			sta RSINCOS.X
  1367 24B8 AD 30 9B			lda X+1
  1368 24BB 8D 26 9B			sta RSINCOS.X+1
  1369 24BE AD 31 9B			lda X+2
  1370 24C1 8D 27 9B			sta RSINCOS.X+2
  1371 24C4 AD 32 9B			lda X+3
  1372 24C7 8D 28 9B			sta RSINCOS.X+3
  1373 24CA A9 00			lda #$00
  1374 24CC 8D 29 9B			sta RSINCOS.SC
  1375 24CF 20 7E 22			jsr RSINCOS
  1376 24D2 AD 2A 9B			lda RSINCOS.RESULT
  1377 24D5 8D 33 9B			sta RESULT
  1378 24D8 AD 2B 9B			lda RSINCOS.RESULT+1
  1379 24DB 8D 34 9B			sta RESULT+1
  1380 24DE AD 2C 9B			lda RSINCOS.RESULT+2
  1381 24E1 8D 35 9B			sta RESULT+2
  1382 24E4 AD 2D 9B			lda RSINCOS.RESULT+3
  1383 24E7 8D 36 9B			sta RESULT+3
  1384 24EA			@exit
  1385
  1386 				; ------------------------------------------------------------
  1387
  1388 = 9B2F			X	= DATAORIGIN+$0034
  1389 = 9B33			RESULT	= DATAORIGIN+$0038
  1390
  1391 = 9B2F			@VarData	= X
  1392 = 0004			@VarDataSize	= 4
  1393
  1394 24EA 60				rts						; ret
  1395 				.endl
  1396 				.endl							; overload
  1397
  1398 24EB			.local	COS						; FUNCTION | OVERLOAD
  1399 24EB			.local	@01018E000
  1400
  1401 				; optimize OK (SYSTEM), line = 1831
  1402
  1403 24EB AD 37 9B			lda X
  1404 24EE 8D 25 9B			sta RSINCOS.X
  1405 24F1 AD 38 9B			lda X+1
  1406 24F4 8D 26 9B			sta RSINCOS.X+1
  1407 24F7 AD 39 9B			lda X+2
  1408 24FA 8D 27 9B			sta RSINCOS.X+2
  1409 24FD AD 3A 9B			lda X+3
  1410 2500 8D 28 9B			sta RSINCOS.X+3
  1411 2503 A9 01			lda #$01
  1412 2505 8D 29 9B			sta RSINCOS.SC
  1413 2508 20 7E 22			jsr RSINCOS
  1414 250B AD 2A 9B			lda RSINCOS.RESULT
  1415 250E 8D 3B 9B			sta RESULT
  1416 2511 AD 2B 9B			lda RSINCOS.RESULT+1
  1417 2514 8D 3C 9B			sta RESULT+1
  1418 2517 AD 2C 9B			lda RSINCOS.RESULT+2
  1419 251A 8D 3D 9B			sta RESULT+2
  1420 251D AD 2D 9B			lda RSINCOS.RESULT+3
  1421 2520 8D 3E 9B			sta RESULT+3
  1422 2523			@exit
  1423
  1424 				; ------------------------------------------------------------
  1425
  1426 = 9B37			X	= DATAORIGIN+$003C
  1427 = 9B3B			RESULT	= DATAORIGIN+$0040
  1428
  1429 = 9B37			@VarData	= X
  1430 = 0004			@VarDataSize	= 4
  1431
  1432 2523 60				rts						; ret
  1433 				.endl
  1434 				.endl							; overload
  1435
  1436 2524			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1437 2524			.local	@010180000
  1438 2524 8D 3F 9B			sta RANGE
  1439
  1440 				; -------------------  ASM Block 00000049  -------------------
  1441
  1442
  1443 				;BYTE FUNC Rand(BYTE range)
  1444 				; returns random number between 0 and
  1445 				; range-1.  If range=0, then a random
  1446 				; number between 0 and 255 is returned
  1447
  1448 2527 AC 0A D2		  ldy $d20a   ; RANDOM
  1449
  1450 252A AD 3F 9B		  lda range
  1451 252D F0 08		  beq stop
  1452
  1453 252F 85 8E		  sta :ecx
  1454 2531 84 86		  sty :eax
  1455
  1456 2533 20 D7 12		  jsr imulCL
  1457 2536 A8			  tay
  1458
  1459 2537 8C 40 9B		stop  sty Result
  1460
  1461
  1462 253A			@exit
  1463
  1464 				; ------------------------------------------------------------
  1465
  1466 = 9B3F			RANGE	= DATAORIGIN+$0044
  1467 = 9B40			RESULT	= DATAORIGIN+$0045
  1468
  1469 = 9B3F			@VarData	= RANGE
  1470 = 0001			@VarDataSize	= 1
  1471
  1472 253A 60				rts						; ret
  1473 				.endl
  1474 				.endl							; overload
  1475
  1476 253B			.local	RANDOM						; FUNCTION | OVERLOAD
  1477 253B			.local	@010184000
  1478
  1479 				; optimize OK (system_atari.inc), line = 179
  1480
  1481 253B AD 42 9B			lda RANGE+1
  1482 253E 0D 41 9B			ora RANGE
  1483 2541 D0 0B			jne l_02D3
  1484
  1485 				; optimize OK (system_atari.inc), line = 180
  1486
  1487 2543 A9 00			lda #$00
  1488 2545 8D 43 9B			sta RESULT
  1489 2548 8D 44 9B			sta RESULT+1
  1490 254B 4C B0 25			jmp l_02E1
  1491 254E			l_02D3
  1492
  1493 				; optimize OK (system_atari.inc), line = 183
  1494
  1495 254E AD 04 9B			lda RNDSEED
  1496 2551 85 8E			sta :ecx
  1497 2553 AD 05 9B			lda RNDSEED+1
  1498 2556 85 8F			sta :ecx+1
  1499 2558 A9 95			lda #$95
  1500 255A 85 86			sta :eax
  1501 255C A9 45			lda #$45
  1502 255E 85 87			sta :eax+1
  1503 					.ifdef fmulinit
  1504 					fmulu_16
  1505 					els
  1506 2560 20 23 13			imulCX
  1507 					eif
  1508 2563 A5 86			lda :eax
  1509 2565 8D 04 9B			sta RNDSEED
  1510 2568 A5 87			lda :eax+1
  1511 256A 8D 05 9B			sta RNDSEED+1
  1512
  1513 				; optimize OK (system_atari.inc), line = 184
  1514
  1515 256D AD 41 9B			lda RANGE
  1516 2570 85 8E			sta @SMALLINT.MOD.B
  1517 2572 AD 42 9B			lda RANGE+1
  1518 2575 85 8F			sta @SMALLINT.MOD.B+1
  1519 2577 AD 04 9B			lda RNDSEED
  1520 257A 85 86			sta @SMALLINT.MOD.A
  1521 257C AD 05 9B			lda RNDSEED+1
  1522 257F 85 87			sta @SMALLINT.MOD.A+1
  1523 2581 20 68 12			jsr @SMALLINT.MOD
  1524 2584 A5 92			lda @SMALLINT.MOD.RESULT
  1525 2586 8D 43 9B			sta RESULT
  1526 2589 A5 93			lda @SMALLINT.MOD.RESULT+1
  1527 258B 8D 44 9B			sta RESULT+1
  1528
  1529 				; -------------------  ASM Block 00000050  -------------------
  1530
  1531 258E AD 42 9B			lda range+1
  1532 2591 10 07			bpl plus
  1533
  1534 2593 AD 44 9B			lda Result+1
  1535 2596 30 18			bmi ok
  1536 2598 10 05			bpl sign
  1537
  1538 259A AD 44 9B		plus	lda Result+1
  1539 259D 10 11			bpl ok
  1540
  1541 259F A9 00		sign 	lda #0
  1542 25A1 38 ED 43 9B			sub Result
  1543 25A5 8D 43 9B			sta Result
  1544
  1545 25A8 A9 00			lda #0
  1546 25AA ED 44 9B			sbc Result+1
  1547 25AD 8D 44 9B			sta Result+1
  1548 25B0			ok
  1549
  1550 25B0			l_02E1
  1551 25B0			@exit
  1552
  1553 				; ------------------------------------------------------------
  1554
  1555 = 9B41			RANGE	= DATAORIGIN+$0046
  1556 = 9B43			RESULT	= DATAORIGIN+$0048
  1557
  1558 = 9B41			@VarData	= RANGE
  1559 = 0002			@VarDataSize	= 2
  1560
  1561 25B0 60				rts						; ret
  1562 				.endl
  1563 				.endl							; overload
  1564
  1565 				; ------------------------------------------------------------
  1566 				; ------------------------------------------------------------
  1567 25B1			@UnitInit
  1568
  1569 				; -------------------  ASM Block 00000060  -------------------
  1570
  1571 					.ifdef @CmdLine
  1572
  1573 					ldx #$0F
  1574 					mva:rpl $340,x IOCB@COPY,x-
  1575 					rts
  1576
  1577 				IOCB@COPY	:16 brk
  1578 					eif
  1579
  1580
  1581 25B1 60				rts
  1582
  1583 				; ------------------------------------------------------------
  1584
  1585 = 0648			M_PI_2	= $0648
  1586 = 0192			D_PI_2	= $0192
  1587 = 0004			D_PI_180	= $04
  1588 = 0101			__PORTB_BANKS	= $0101
  1589 = 0000			MGTIA	= $00
  1590 = 0080			MVBXE	= $80
  1591 = 0000			VBXE_XDLADR	= $00
  1592 = 00E0			VBXE_BCBTMP	= $E0
  1593 = 0100			VBXE_BCBADR	= $0100
  1594 = 1000			VBXE_MAPADR	= $1000
  1595 = 1000			VBXE_CHBASE	= $1000
  1596 = 5000			VBXE_OVRADR	= $5000
  1597 = B000			VBXE_WINDOW	= $B000
  1598 = 0000			IDLI	= $00
  1599 = 0001			IVBL	= $01
  1600 = 0001			IVBLD	= $01
  1601 = 0002			IVBLI	= $02
  1602 = 0003			ITIM1	= $03
  1603 = 0004			ITIM2	= $04
  1604 = 0005			ITIM4	= $05
  1605 = 00FE			CH_DELCHR	= $FE
  1606 = 009B			CH_ENTER	= $9B
  1607 = 001B			CH_ESC	= $1B
  1608 = 001C			CH_CURS_UP	= $1C
  1609 = 001D			CH_CURS_DOWN	= $1D
  1610 = 001E			CH_CURS_LEFT	= $1E
  1611 = 001F			CH_CURS_RIGHT	= $1F
  1612 = 007F			CH_TAB	= $7F
  1613 = 009B			CH_EOL	= $9B
  1614 = 007D			CH_CLR	= $7D
  1615 = 00FD			CH_BELL	= $FD
  1616 = 007E			CH_DEL	= $7E
  1617 = 009C			CH_DELLINE	= $9C
  1618 = 009D			CH_INSLINE	= $9D
  1619 = 0000			PAL_PMCOLOR0	= $00
  1620 = 0001			PAL_PMCOLOR1	= $01
  1621 = 0002			PAL_PMCOLOR2	= $02
  1622 = 0003			PAL_PMCOLOR3	= $03
  1623 = 0004			PAL_COLOR0	= $04
  1624 = 0005			PAL_COLOR1	= $05
  1625 = 0006			PAL_COLOR2	= $06
  1626 = 0007			PAL_COLOR3	= $07
  1627 = 0008			PAL_COLBAK	= $08
  1628 = 0000			COLOR_BLACK	= $00
  1629 = 000E			COLOR_WHITE	= $0E
  1630 = 0032			COLOR_RED	= $32
  1631 = 0096			COLOR_CYAN	= $96
  1632 = 0068			COLOR_VIOLET	= $68
  1633 = 00C4			COLOR_GREEN	= $C4
  1634 = 0074			COLOR_BLUE	= $74
  1635 = 00EE			COLOR_YELLOW	= $EE
  1636 = 0028			COLOR_ORANGE	= $28
  1637 = 00E4			COLOR_BROWN	= $E4
  1638 = 003C			COLOR_LIGHTRED	= $3C
  1639 = 0004			COLOR_GRAY1	= $04
  1640 = 0006			COLOR_GRAY2	= $06
  1641 = 000A			COLOR_GRAY3	= $0A
  1642 = 00CC			COLOR_LIGHTGREEN	= $CC
  1643 = 007C			COLOR_LIGHTBLUE	= $7C
  1644 = 0004			FMOPENREAD	= $04
  1645 = 0008			FMOPENWRITE	= $08
  1646 = 0009			FMOPENAPPEND	= $09
  1647 = 000C			FMOPENREADWRITE	= $0C
  1648 = 9AFB			DATESEPARATOR	= DATAORIGIN+$0000
  1649 = D20A			RND	= $D20A
  1650 = 02C0			adr.PALETTE	= $02C0
  1651 25B2			.var PALETTE	= adr.PALETTE .word
  1652 = D012			adr.HPALETTE	= $D012
  1653 25B2			.var HPALETTE	= adr.HPALETTE .word
  1654 = 9AFC			FILEMODE	= DATAORIGIN+$0001
  1655 = 9AFD			GRAPHMODE	= DATAORIGIN+$0002
  1656 = 9AFE			IORESULT	= DATAORIGIN+$0003
  1657 = 9AFF			EOLN	= DATAORIGIN+$0004
  1658 = 9B00			SCREENWIDTH	= DATAORIGIN+$0005
  1659 = 9B02			SCREENHEIGHT	= DATAORIGIN+$0007
  1660 = 0000			adr.MEM	= $00
  1661 25B2			.var MEM	= adr.MEM .word
  1662 = 9B04			RNDSEED	= DATAORIGIN+$0009
  1663
  1664 = 25B2 C0 02		PALETTE
  1664 = 25B4 12 D0		HPALETTE
  1664 = 25B6 00 00		MEM
  1664 				.endl							; UNIT SYSTEM
  1665
  1666 				; ------------------------------------------------------------
  1667
  1668 25B8			.local	ATARI						; UNIT
  1669
  1670 				; ------------------------------------------------------------
  1671
  1672 = 0000			DL_BLANK1	= $00
  1673 = 0010			DL_BLANK2	= $10
  1674 = 0020			DL_BLANK3	= $20
  1675 = 0030			DL_BLANK4	= $30
  1676 = 0040			DL_BLANK5	= $40
  1677 = 0050			DL_BLANK6	= $50
  1678 = 0060			DL_BLANK7	= $60
  1679 = 0070			DL_BLANK8	= $70
  1680 = 0080			DL_DLI	= $80
  1681 = 0040			DL_LMS	= $40
  1682 = 0020			DL_VSCROLL	= $20
  1683 = 0010			DL_HSCROLL	= $10
  1684 = 0001			DL_JMP	= $01
  1685 = 0041			DL_JVB	= $41
  1686 = 0002			DL_MODE_2	= $02
  1687 = 0003			DL_MODE_3	= $03
  1688 = 0004			DL_MODE_4	= $04
  1689 = 0005			DL_MODE_5	= $05
  1690 = 000E			DL_MODE_E	= $0E
  1691 = 000F			DL_MODE_F	= $0F
  1692 = 0010			IRQENS	= $10
  1693 = 0012			RTCLOK	= $12
  1694 = 0012			RTCLOK1	= $12
  1695 = 0013			RTCLOK2	= $13
  1696 = 0014			RTCLOK3	= $14
  1697 = 004D			ATRACT	= $4D
  1698 = 0052			LMARGIN	= $52
  1699 = 0053			RMARGIN	= $53
  1700 = 0054			ROWCRS	= $54
  1701 = 0055			COLCRS	= $55
  1702 = 0057			DINDEX	= $57
  1703 = 0058			SAVMSC	= $58
  1704 = 0062			PALNTS	= $62
  1705 = 006A			RAMTOP	= $6A
  1706 = 0200			VDSLST	= $0200
  1707 = 0230			SDLSTL	= $0230
  1708 = 0290			TXTROW	= $0290
  1709 = 0291			TXTCOL	= $0291
  1710 = 0293			TINDEX	= $0293
  1711 = 0294			TXTMSC	= $0294
  1712 = 022F			SDMCTL	= $022F
  1713 = 026F			GPRIOR	= $026F
  1714 = 02F0			CRSINH	= $02F0
  1715 = 02F3			CHACT	= $02F3
  1716 = 02F4			CHBAS	= $02F4
  1717 = 02FC			CH	= $02FC
  1718 = 02FD			FILDAT	= $02FD
  1719 = 02C0			PCOLR0	= $02C0
  1720 = 02C1			PCOLR1	= $02C1
  1721 = 02C2			PCOLR2	= $02C2
  1722 = 02C3			PCOLR3	= $02C3
  1723 = 02C4			COLOR0	= $02C4
  1724 = 02C5			COLOR1	= $02C5
  1725 = 02C6			COLOR2	= $02C6
  1726 = 02C7			COLOR3	= $02C7
  1727 = 02C8			COLOR4	= $02C8
  1728 = 02C8			COLBAKS	= $02C8
  1729 = D000			HPOSP0	= $D000
  1730 = D001			HPOSP1	= $D001
  1731 = D002			HPOSP2	= $D002
  1732 = D003			HPOSP3	= $D003
  1733 = D004			HPOSM0	= $D004
  1734 = D005			HPOSM1	= $D005
  1735 = D006			HPOSM2	= $D006
  1736 = D007			HPOSM3	= $D007
  1737 = D008			SIZEP0	= $D008
  1738 = D009			SIZEP1	= $D009
  1739 = D00A			SIZEP2	= $D00A
  1740 = D00B			SIZEP3	= $D00B
  1741 = D00C			SIZEM	= $D00C
  1742 = D00D			GRAFP0	= $D00D
  1743 = D00E			GRAFP1	= $D00E
  1744 = D00F			GRAFP2	= $D00F
  1745 = D010			GRAFP3	= $D010
  1746 = D011			GRAFM	= $D011
  1747 = D004			P0PF	= $D004
  1748 = D014			PAL	= $D014
  1749 = D013			TRIG3	= $D013
  1750 = D012			COLPM0	= $D012
  1751 = D013			COLPM1	= $D013
  1752 = D014			COLPM2	= $D014
  1753 = D015			COLPM3	= $D015
  1754 = D016			COLPF0	= $D016
  1755 = D017			COLPF1	= $D017
  1756 = D018			COLPF2	= $D018
  1757 = D019			COLPF3	= $D019
  1758 = D01A			COLBAK	= $D01A
  1759 = D01A			COLBK	= $D01A
  1760 = D01B			PRIOR	= $D01B
  1761 = D01D			GRACTL	= $D01D
  1762 = D01D			PMCNTL	= $D01D
  1763 = D01E			HITCLR	= $D01E
  1764 = D01F			CONSOL	= $D01F
  1765 = D200			AUDF1	= $D200
  1766 = D201			AUDC1	= $D201
  1767 = D202			AUDF2	= $D202
  1768 = D203			AUDC2	= $D203
  1769 = D204			AUDF3	= $D204
  1770 = D205			AUDC3	= $D205
  1771 = D206			AUDF4	= $D206
  1772 = D207			AUDC4	= $D207
  1773 = D208			AUDCTL	= $D208
  1774 = D209			KBCODE	= $D209
  1775 = D20E			IRQEN	= $D20E
  1776 = D20F			SKSTAT	= $D20F
  1777 = D300			PORTA	= $D300
  1778 = D301			PORTB	= $D301
  1779 = D302			PACTL	= $D302
  1780 = D400			DMACTL	= $D400
  1781 = D401			CHACTL	= $D401
  1782 = D402			DLISTL	= $D402
  1783 = D404			HSCROL	= $D404
  1784 = D405			VSCROL	= $D405
  1785 = D407			PMBASE	= $D407
  1786 = D409			CHBASE	= $D409
  1787 = D40A			WSYNC	= $D40A
  1788 = D40B			VCOUNT	= $D40B
  1789 = D40C			PENH	= $D40C
  1790 = D40D			PENV	= $D40D
  1791 = D40E			NMIEN	= $D40E
  1792 = FFFA			NMIVEC	= $FFFA
  1793 = FFFC			RESETVEC	= $FFFC
  1794 = FFFE			IRQVEC	= $FFFE
  1795
  1796 				.endl							; UNIT ATARI
  1797
  1798 				; ------------------------------------------------------------
  1799
  1800 25B8			.local	CRT						; UNIT
  1801
  1802 				; ------------------------------------------------------------
  1803
  1804 = 9B45			TEXTATTR	= DATAORIGIN+$004A
  1805 = D01F			CONSOL	= $D01F
  1806 = 0000			CN_START_SELECT_OPTION	= $00
  1807 = 0001			CN_SELECT_OPTION	= $01
  1808 = 0002			CN_START_OPTION	= $02
  1809 = 0003			CN_OPTION	= $03
  1810 = 0004			CN_START_SELECT	= $04
  1811 = 0005			CN_SELECT	= $05
  1812 = 0006			CN_START	= $06
  1813 = 0007			CN_NONE	= $07
  1814 = 0000			BLACK	= $00
  1815 = 000F			WHITE	= $0F
  1816 = 0026			RED	= $26
  1817 = 00AC			CYAN	= $AC
  1818 = 0048			PURPLE	= $48
  1819 = 00B6			GREEN	= $B6
  1820 = 0086			BLUE	= $86
  1821 = 00DC			YELLOW	= $DC
  1822 = 0018			ORANGE	= $18
  1823 = 00F4			BROWN	= $F4
  1824 = 002A			LIGHT_RED	= $2A
  1825 = 0004			DARK_GREY	= $04
  1826 = 0008			GREY	= $08
  1827 = 00BC			LIGHT_GREEN	= $BC
  1828 = 009A			LIGHT_BLUE	= $9A
  1829 = 000C			LIGHT_GREY	= $0C
  1830 = 0000			BW40	= $00
  1831 = 0001			CO40	= $01
  1832 = 0002			BW80	= $02
  1833 = 0003			CO80	= $03
  1834 = 0007			MONO	= $07
  1835 = 0001			C40	= $01
  1836 = 0003			C80	= $03
  1837 = 0080			BLINK	= $80
  1838
  1839 				.endl							; UNIT CRT
  1840
  1841 				; ------------------------------------------------------------
  1842
  1843 25B8			.local	TYPES						; UNIT
  1844
  1845 				; ------------------------------------------------------------
  1846
  1847 				.endl							; UNIT TYPES
  1848
  1849 				; ------------------------------------------------------------
  1850
  1851 25B8			.local	GRAPH						; UNIT
  1852
  1853 				; ------------------------------------------------------------
  1854
  1855 = 0080			CURRENTDRIVER	= $80
  1856 = 0000			DETECT	= $00
  1857 = 0001			CGA	= $01
  1858 = 0002			MCGA	= $02
  1859 = 0003			EGA	= $03
  1860 = 0004			EGA64	= $04
  1861 = 0005			EGAMONO	= $05
  1862 = 0006			LOWRES	= $06
  1863 = 0007			HERCMONO	= $07
  1864 = 0009			VGA	= $09
  1865 = 000A			VESA	= $0A
  1866 = 000B			D1BIT	= $0B
  1867 = 000C			D2BIT	= $0C
  1868 = 000D			D4BIT	= $0D
  1869 = 000E			D6BIT	= $0E
  1870 = 000F			D8BIT	= $0F
  1871 = 0010			D12BIT	= $10
  1872 = 0018			M640X400	= $18
  1873 = 0018			M640X480	= $18
  1874 = 0001			GROK	= $01
  1875 = 00FF			GRNOINITGRAPH	= $FF
  1876 = 00FE			GRNOTDETECTED	= $FE
  1877 = 00FD			GRFILENOTFOUND	= $FD
  1878 = 00FC			GRINVALIDDRIVER	= $FC
  1879 = 00FB			GRNOLOADMEM	= $FB
  1880 = 00FA			GRNOSCANMEM	= $FA
  1881 = 00F9			GRNOFLOODMEM	= $F9
  1882 = 00F8			GRFONTNOTFOUND	= $F8
  1883 = 00F7			GRNOFONTMEM	= $F7
  1884 = 00F6			GRINVALIDMODE	= $F6
  1885 = 00F5			GRERROR	= $F5
  1886 = 00F4			GRIOERROR	= $F4
  1887 = 00F3			GRINVALIDFONT	= $F3
  1888 = 00F2			GRINVALIDFONTNUM	= $F2
  1889 = 00EE			GRINVALIDVERSION	= $EE
  1890 = 0000			CGAC0	= $00
  1891 = 0001			CGAC1	= $01
  1892 = 0002			CGAC2	= $02
  1893 = 0003			CGAC3	= $03
  1894 = 0004			CGAHI	= $04
  1895 = 0000			MCGAC0	= $00
  1896 = 0001			MCGAC1	= $01
  1897 = 0002			MCGAC2	= $02
  1898 = 0003			MCGAC3	= $03
  1899 = 0004			MCGAMED	= $04
  1900 = 0005			MCGAHI	= $05
  1901 = 0000			EGALO	= $00
  1902 = 0001			EGAHI	= $01
  1903 = 0000			EGA64LO	= $00
  1904 = 0001			EGA64HI	= $01
  1905 = 0003			EGAMONOHI	= $03
  1906 = 000A			VGALO	= $0A
  1907 = 001F			VGAMED	= $1F
  1908 = 0018			VGAHI	= $18
  1909 = 9B46			GRAPHRESULT	= DATAORIGIN+$004B
  1910 = 9B47			GETCOLOR	= DATAORIGIN+$004C
  1911 = 9B48			VIDEORAM	= DATAORIGIN+$004D
  1912 = 9B4A			adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
  1913 25B8			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1914 = 9B4A			LASTARCCOORDS.X	= DATAORIGIN+$004F
  1915 = 9B4C			LASTARCCOORDS.Y	= DATAORIGIN+$0051
  1916 = 9B4E			LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
  1917 = 9B50			LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
  1918 = 9B52			LASTARCCOORDS.XEND	= DATAORIGIN+$0057
  1919 = 9B54			LASTARCCOORDS.YEND	= DATAORIGIN+$0059
  1920 = 9B56			WIN_LEFT	= DATAORIGIN+$005B
  1921 = 9B58			WIN_RIGHT	= DATAORIGIN+$005D
  1922 = 9B5A			WIN_TOP	= DATAORIGIN+$005F
  1923 = 9B5C			WIN_BOTTOM	= DATAORIGIN+$0061
  1924 = 9B5E			SCANLINE_WIDTH	= DATAORIGIN+$0063
  1925 = 9B5F			CURRENTX	= DATAORIGIN+$0064
  1926 = 9B61			CURRENTY	= DATAORIGIN+$0066
  1927
  1928 = 25B8 4A 9B		LASTARCCOORDS
  1928 				.endl							; UNIT GRAPH
  1929
  1930 				; ------------------------------------------------------------
  1931
  1932 25BA			.local	VBXE						; UNIT
  1933
  1934 25BA			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  1935 25BA 8D 77 9B			sta B
  1936
  1937 				; -------------------  ASM Block 00000113  -------------------
  1938
  1939 25BD				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 25BD AD 77 9B		        lda     B
     3 25C0 A0 5F		        ldy     #FX_MEMS
     4 25C2 91 80		        sta     (fxptr),y
  1940
  1941 				; ------------------------------------------------------------
  1942
  1943 = 9B77			B	= DATAORIGIN+$007C
  1944
  1945 = 9B77			@VarData	= B
  1946 = 0001			@VarDataSize	= 1
  1947
  1948 25C4			@exit
  1949 					.ifdef @new
  1950 					lda <@VarData
  1951 					sta :ztmp
  1952 					lda >@VarData
  1953 					ldy #@VarDataSize-1
  1954 					jmp @FreeMem
  1955 					els
  1956 25C4 60				rts						; ret
  1957 					eif
  1958 				.endl
  1959
  1960 25C5			.local	READVBXEMEMORYBYTE				; FUNCTION
  1961
  1962 				; optimize OK (vbxe_memorystream.inc), line = 20
  1963
  1964 25C5 AC 78 9B 84 84 AC + 	mwy POSITION :bp2
  1965 25CF A0 02			ldy #$02
  1966 25D1 B1 84			lda (:bp2),y
  1967 25D3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1968 25D5 88				dey
  1969 25D6 B1 84			lda (:bp2),y
  1970 25D8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1971 25DA 6A				ror @
  1972 25DB 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1973 25DD 6A				ror @
  1974 25DE 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1975 25E0 6A				ror @
  1976 25E1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1977 25E3 6A				ror @
  1978 25E4 09 80			ora #$80
  1979 25E6 8D 7B 9B			sta BNK
  1980
  1981 				; optimize OK (vbxe_memorystream.inc), line = 21
  1982
  1983 25E9 88				dey
  1984 25EA B1 84			lda (:bp2),y
  1985 25EC 8D 7C 9B			sta ADR
  1986 25EF C8				iny
  1987 25F0 B1 84			lda (:bp2),y
  1988 25F2 29 0F			and #$0F
  1989 25F4 09 B0			ora #$B0
  1990 25F6 8D 7D 9B			sta ADR+1
  1991
  1992 				; optimize OK (vbxe_memorystream.inc), line = 23
  1993
  1994 25F9 AD 7B 9B			lda BNK
  1995 25FC 20 BA 25			jsr VBXEMEMORYBANK
  1996
  1997 				; optimize OK (vbxe_memorystream.inc), line = 25
  1998
  1999 25FF AC 7D 9B			ldy ADR+1
  2000 2602 84 83			sty :bp+1
  2001 2604 AC 7C 9B			ldy ADR
  2002 2607 B1 82			lda (:bp),y
  2003 2609 8D 7A 9B			sta RESULT
  2004
  2005 				; optimize OK (vbxe_memorystream.inc), line = 27
  2006
  2007 260C AC 78 9B 84 84 AC + 	mwy POSITION :bp2
  2008 2616 A0 00			ldy #$00
  2009 2618 B1 84			lda (:bp2),y
  2010 261A 18 69 01			add #$01
  2011 261D 91 84			sta (:bp2),y
  2012 261F C8				iny
  2013 2620 B1 84			lda (:bp2),y
  2014 2622 69 00			adc #$00
  2015 2624 91 84			sta (:bp2),y
  2016 2626 C8				iny
  2017 2627 B1 84			lda (:bp2),y
  2018 2629 69 00			adc #$00
  2019 262B 91 84			sta (:bp2),y
  2020 262D C8				iny
  2021 262E B1 84			lda (:bp2),y
  2022 2630 69 00			adc #$00
  2023 2632 91 84			sta (:bp2),y
  2024 2634			@exit
  2025
  2026 				; ------------------------------------------------------------
  2027
  2028 = 9B78			POSITION	= DATAORIGIN+$007D
  2029 = 9B7A			RESULT	= DATAORIGIN+$007F
  2030 = 9B7B			BNK	= DATAORIGIN+$0080
  2031 = 9B7C			ADR	= DATAORIGIN+$0081
  2032
  2033 = 9B78			@VarData	= POSITION
  2034 = 0005			@VarDataSize	= 5
  2035
  2036 2634 60				rts						; ret
  2037 				.endl
  2038
  2039 2635			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2040
  2041 				; optimize OK (vbxe_memorystream.inc), line = 39
  2042
  2043 2635 AC 7E 9B 84 84 AC + 	mwy POSITION :bp2
  2044 263F A0 02			ldy #$02
  2045 2641 B1 84			lda (:bp2),y
  2046 2643 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2047 2645 88				dey
  2048 2646 B1 84			lda (:bp2),y
  2049 2648 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2050 264A 6A				ror @
  2051 264B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2052 264D 6A				ror @
  2053 264E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2054 2650 6A				ror @
  2055 2651 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2056 2653 6A				ror @
  2057 2654 09 80			ora #$80
  2058 2656 8D 81 9B			sta BNK
  2059
  2060 				; optimize OK (vbxe_memorystream.inc), line = 40
  2061
  2062 2659 88				dey
  2063 265A B1 84			lda (:bp2),y
  2064 265C 8D 82 9B			sta ADR
  2065 265F C8				iny
  2066 2660 B1 84			lda (:bp2),y
  2067 2662 29 0F			and #$0F
  2068 2664 09 B0			ora #$B0
  2069 2666 8D 83 9B			sta ADR+1
  2070
  2071 				; optimize OK (vbxe_memorystream.inc), line = 42
  2072
  2073 2669 AD 81 9B			lda BNK
  2074 266C 20 BA 25			jsr VBXEMEMORYBANK
  2075
  2076 				; optimize OK (vbxe_memorystream.inc), line = 44
  2077
  2078 266F AC 83 9B			ldy ADR+1
  2079 2672 84 83			sty :bp+1
  2080 2674 AC 82 9B			ldy ADR
  2081 2677 AD 80 9B			lda A
  2082 267A 91 82			sta (:bp),y
  2083
  2084 				; optimize OK (vbxe_memorystream.inc), line = 46
  2085
  2086 267C AC 7E 9B 84 84 AC + 	mwy POSITION :bp2
  2087 2686 A0 00			ldy #$00
  2088 2688 B1 84			lda (:bp2),y
  2089 268A 18 69 01			add #$01
  2090 268D 91 84			sta (:bp2),y
  2091 268F C8				iny
  2092 2690 B1 84			lda (:bp2),y
  2093 2692 69 00			adc #$00
  2094 2694 91 84			sta (:bp2),y
  2095 2696 C8				iny
  2096 2697 B1 84			lda (:bp2),y
  2097 2699 69 00			adc #$00
  2098 269B 91 84			sta (:bp2),y
  2099 269D C8				iny
  2100 269E B1 84			lda (:bp2),y
  2101 26A0 69 00			adc #$00
  2102 26A2 91 84			sta (:bp2),y
  2103
  2104 				; ------------------------------------------------------------
  2105
  2106 = 9B7E			POSITION	= DATAORIGIN+$0083
  2107 = 9B80			A	= DATAORIGIN+$0085
  2108 = 9B81			BNK	= DATAORIGIN+$0086
  2109 = 9B82			ADR	= DATAORIGIN+$0087
  2110
  2111 = 9B7E			@VarData	= POSITION
  2112 = 0006			@VarDataSize	= 6
  2113
  2114 26A4			@exit
  2115 					.ifdef @new
  2116 					lda <@VarData
  2117 					sta :ztmp
  2118 					lda >@VarData
  2119 					ldy #@VarDataSize-1
  2120 					jmp @FreeMem
  2121 					els
  2122 26A4 60				rts						; ret
  2123 					eif
  2124 				.endl
  2125
  2126 26A5			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2127 26A5 8D 90 9B			sta TVBXEMEMORYSTREAM
  2128 26A8 8C 91 9B			sty TVBXEMEMORYSTREAM+1
  2129 26AB 8D 96 9B			sta POSITION
  2130 26AE 8C 97 9B			sty POSITION+1
  2131 26B1 18 69 04			add #4
  2132 26B4 90 01			scc
  2133 26B6 C8				iny
  2134 26B7 8D 98 9B			sta SIZE
  2135 26BA 8C 99 9B			sty SIZE+1
  2136
  2137 				; optimize OK (vbxe_memorystream.inc), line = 124
  2138
  2139 26BD AC 96 9B 84 84 AC + 	mwy POSITION :bp2
  2140 26C7 A0 02			ldy #$02
  2141 26C9 B1 84			lda (:bp2),y
  2142 26CB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2143 26CD 88				dey
  2144 26CE B1 84			lda (:bp2),y
  2145 26D0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2146 26D2 6A				ror @
  2147 26D3 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2148 26D5 6A				ror @
  2149 26D6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2150 26D8 6A				ror @
  2151 26D9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2152 26DB 6A				ror @
  2153 26DC 09 80			ora #$80
  2154 26DE 8D 9A 9B			sta BNK
  2155
  2156 				; optimize OK (vbxe_memorystream.inc), line = 125
  2157
  2158 26E1 88				dey
  2159 26E2 B1 84			lda (:bp2),y
  2160 26E4 8D 9B 9B			sta ADR
  2161 26E7 C8				iny
  2162 26E8 B1 84			lda (:bp2),y
  2163 26EA 29 0F			and #$0F
  2164 26EC 09 B0			ora #$B0
  2165 26EE 8D 9C 9B			sta ADR+1
  2166
  2167 				; optimize OK (vbxe_memorystream.inc), line = 127
  2168
  2169 26F1 AD 9A 9B			lda BNK
  2170 26F4 20 BA 25			jsr VBXEMEMORYBANK
  2171
  2172 				; optimize OK (vbxe_memorystream.inc), line = 129
  2173
  2174 26F7 AD 92 9B			lda BUFFER
  2175 26FA 8D 9F 9B			sta SRC
  2176 26FD AD 93 9B			lda BUFFER+1
  2177 2700 8D A0 9B			sta SRC+1
  2178
  2179 				; optimize OK (vbxe_memorystream.inc), line = 131
  2180
  2181 2703 A9 00			lda #$00
  2182 2705 8D 9D 9B			sta I
  2183 2708 8D 9E 9B			sta I+1
  2184 270B AD 94 9B			lda COUNT
  2185 270E 38 E9 01			sub #$01
  2186 2711 8D 24 27			sta @FORTMP_0400_0
  2187 2714 AD 95 9B			lda COUNT+1
  2188 2717 E9 00			sbc #$00
  2189 2719 8D 1D 27			sta @FORTMP_0400_1
  2190
  2191 271C			l_0403
  2192 				; --- ForToDoCondition
  2193 271C A9 00			lda @FORTMP_0400_1::#$00
  2194 271E CD 9E 9B			cmp I+1
  2195 2721 D0 05			bne @+
  2196 2723 A9 00			lda @FORTMP_0400_0::#$00
  2197 2725 CD 9D 9B			cmp I
  2198 				@
  2199 2728 90 53			jcc l_040F
  2200
  2201 				; optimize OK (vbxe_memorystream.inc), line = 133
  2202
  2203 272A AC 9F 9B 84 84 AC + 	mwy SRC :bp2
  2204 2734 A0 00			ldy #$00
  2205 2736 B1 84			lda (:bp2),y
  2206 2738 AC 9C 9B			ldy ADR+1
  2207 273B 84 83			sty :bp+1
  2208 273D AC 9B 9B			ldy ADR
  2209 2740 91 82			sta (:bp),y
  2210
  2211 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2212
  2213 2742 EE 9B 9B			inc ADR
  2214 2745 D0 03			sne
  2215 2747 EE 9C 9B			inc ADR+1
  2216
  2217 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2218
  2219 274A EE 9F 9B			inc SRC
  2220 274D D0 03			sne
  2221 274F EE A0 9B			inc SRC+1
  2222
  2223 				; optimize OK (vbxe_memorystream.inc), line = 138
  2224
  2225 2752 AD 9C 9B			lda ADR+1
  2226 2755 C9 C0			cmp #$C0
  2227 2757 90 1A			jcc l_042E
  2228 2759 D0 05			bne @+
  2229 275B AD 9B 9B			lda ADR
  2230 275E 90 13			jcc l_042E
  2231 				@
  2232
  2233 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2234
  2235 2760 EE 9A 9B			inc BNK
  2236
  2237 				; optimize OK (vbxe_memorystream.inc), line = 140
  2238
  2239 2763 AD 9A 9B			lda BNK
  2240 2766 20 BA 25			jsr VBXEMEMORYBANK
  2241
  2242 				; optimize OK (vbxe_memorystream.inc), line = 141
  2243
  2244 2769 A9 00			lda #$00
  2245 276B 8D 9B 9B			sta ADR
  2246 276E A9 B0			lda #$B0
  2247 2770 8D 9C 9B			sta ADR+1
  2248 2773			l_042E
  2249
  2250 				; --- ForToDoEpilog
  2251 2773 EE 9D 9B			inc I
  2252 2776 D0 A4			jne l_0403
  2253 2778 EE 9E 9B			inc I+1
  2254 277B D0 9F			jne l_0403
  2255 277D			l_040F
  2256
  2257 				; optimize OK (vbxe_memorystream.inc), line = 146
  2258
  2259 277D A9 00			lda #$00
  2260 277F 20 BA 25			jsr VBXEMEMORYBANK
  2261
  2262 				; optimize OK (vbxe_memorystream.inc), line = 148
  2263
  2264 2782 AC 96 9B 84 84 AC + 	mwy POSITION :bp2
  2265 278C A0 00			ldy #$00
  2266 278E B1 84			lda (:bp2),y
  2267 2790 18 6D 94 9B			add COUNT
  2268 2794 91 84			sta (:bp2),y
  2269 2796 C8				iny
  2270 2797 B1 84			lda (:bp2),y
  2271 2799 6D 95 9B			adc COUNT+1
  2272 279C 91 84			sta (:bp2),y
  2273 279E C8				iny
  2274 279F B1 84			lda (:bp2),y
  2275 27A1 69 00			adc #$00
  2276 27A3 91 84			sta (:bp2),y
  2277 27A5 C8				iny
  2278 27A6 B1 84			lda (:bp2),y
  2279 27A8 69 00			adc #$00
  2280 27AA 91 84			sta (:bp2),y
  2281
  2282 				; ------------------------------------------------------------
  2283
  2284 = 9B90			TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
  2285 = 9B92			BUFFER	= DATAORIGIN+$0097
  2286 = 9B94			COUNT	= DATAORIGIN+$0099
  2287 = 9B96			POSITION	= DATAORIGIN+$009B
  2288 = 9B98			SIZE	= DATAORIGIN+$009D
  2289 = 9B9A			BNK	= DATAORIGIN+$009F
  2290 = 9B9B			ADR	= DATAORIGIN+$00A0
  2291 = 9B9D			I	= DATAORIGIN+$00A2
  2292 = 9B9F			SRC	= DATAORIGIN+$00A4
  2293
  2294 = 9B90			@VarData	= TVBXEMEMORYSTREAM
  2295 = 0011			@VarDataSize	= 17
  2296
  2297 27AC			@exit
  2298 					.ifdef @new
  2299 					lda <@VarData
  2300 					sta :ztmp
  2301 					lda >@VarData
  2302 					ldy #@VarDataSize-1
  2303 					jmp @FreeMem
  2304 					els
  2305 27AC 60				rts						; ret
  2306 					eif
  2307 				.endl
  2308
  2309 27AD			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2310 27AD 8D A3 9B			sta TVBXEMEMORYSTREAM
  2311 27B0 8C A4 9B			sty TVBXEMEMORYSTREAM+1
  2312 27B3 8D A6 9B			sta POSITION
  2313 27B6 8C A7 9B			sty POSITION+1
  2314 27B9 18 69 04			add #4
  2315 27BC 90 01			scc
  2316 27BE C8				iny
  2317 27BF 8D A8 9B			sta SIZE
  2318 27C2 8C A9 9B			sty SIZE+1
  2319
  2320 				; optimize OK (vbxe_memorystream.inc), line = 158
  2321
  2322 27C5 AD A6 9B			lda POSITION
  2323 27C8 8D 78 9B			sta READVBXEMEMORYBYTE.POSITION
  2324 27CB AD A7 9B			lda POSITION+1
  2325 27CE 8D 79 9B			sta READVBXEMEMORYBYTE.POSITION+1
  2326 27D1 20 C5 25			jsr READVBXEMEMORYBYTE
  2327 27D4 AD 7A 9B			lda READVBXEMEMORYBYTE.RESULT
  2328 27D7 8D A5 9B			sta RESULT
  2329
  2330 				; optimize OK (vbxe_memorystream.inc), line = 160
  2331
  2332 27DA A9 00			lda #$00
  2333 27DC 20 BA 25			jsr VBXEMEMORYBANK
  2334 27DF			@exit
  2335
  2336 				; ------------------------------------------------------------
  2337
  2338 = 9BA3			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
  2339 = 9BA5			RESULT	= DATAORIGIN+$00AA
  2340 = 9BA6			POSITION	= DATAORIGIN+$00AB
  2341 = 9BA8			SIZE	= DATAORIGIN+$00AD
  2342
  2343 = 9BA3			@VarData	= TVBXEMEMORYSTREAM
  2344 = 0006			@VarDataSize	= 6
  2345
  2346 27DF 60				rts						; ret
  2347 				.endl
  2348
  2349 27E0			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2350 27E0 8D B2 9B			sta TVBXEMEMORYSTREAM
  2351 27E3 8C B3 9B			sty TVBXEMEMORYSTREAM+1
  2352 27E6 8D B5 9B			sta POSITION
  2353 27E9 8C B6 9B			sty POSITION+1
  2354 27EC 18 69 04			add #4
  2355 27EF 90 01			scc
  2356 27F1 C8				iny
  2357 27F2 8D B7 9B			sta SIZE
  2358 27F5 8C B8 9B			sty SIZE+1
  2359
  2360 				; optimize OK (vbxe_memorystream.inc), line = 198
  2361
  2362 27F8 AD B5 9B			lda POSITION
  2363 27FB 8D 7E 9B			sta WRITEVBXEMEMORYBYTE.POSITION
  2364 27FE AD B6 9B			lda POSITION+1
  2365 2801 8D 7F 9B			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2366 2804 AD B4 9B			lda B
  2367 2807 8D 80 9B			sta WRITEVBXEMEMORYBYTE.A
  2368 280A 20 35 26			jsr WRITEVBXEMEMORYBYTE
  2369
  2370 				; optimize OK (vbxe_memorystream.inc), line = 200
  2371
  2372 280D A9 00			lda #$00
  2373 280F 20 BA 25			jsr VBXEMEMORYBANK
  2374
  2375 				; ------------------------------------------------------------
  2376
  2377 = 9BB2			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
  2378 = 9BB4			B	= DATAORIGIN+$00B9
  2379 = 9BB5			POSITION	= DATAORIGIN+$00BA
  2380 = 9BB7			SIZE	= DATAORIGIN+$00BC
  2381
  2382 = 9BB2			@VarData	= TVBXEMEMORYSTREAM
  2383 = 0007			@VarDataSize	= 7
  2384
  2385 2812			@exit
  2386 					.ifdef @new
  2387 					lda <@VarData
  2388 					sta :ztmp
  2389 					lda >@VarData
  2390 					ldy #@VarDataSize-1
  2391 					jmp @FreeMem
  2392 					els
  2393 2812 60				rts						; ret
  2394 					eif
  2395 				.endl
  2396
  2397 2813			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2398 2813 8D C1 9B			sta TVBXEMEMORYSTREAM
  2399 2816 8C C2 9B			sty TVBXEMEMORYSTREAM+1
  2400 2819 8D C3 9B			sta POSITION
  2401 281C 8C C4 9B			sty POSITION+1
  2402 281F 18 69 04			add #4
  2403 2822 90 01			scc
  2404 2824 C8				iny
  2405 2825 8D C5 9B			sta SIZE
  2406 2828 8C C6 9B			sty SIZE+1
  2407
  2408 				; optimize OK (vbxe_memorystream.inc), line = 239
  2409
  2410 282B AC C3 9B 84 84 AC + 	mwy POSITION :bp2
  2411 2835 A0 00			ldy #$00
  2412 2837 B1 84			lda (:bp2),y
  2413 2839 8D C7 9B			sta ADR
  2414 283C C8				iny
  2415 283D B1 84			lda (:bp2),y
  2416 283F 8D C8 9B			sta ADR+1
  2417 2842 C8				iny
  2418 2843 B1 84			lda (:bp2),y
  2419 2845 8D C9 9B			sta ADR+2
  2420 2848 C8				iny
  2421 2849 B1 84			lda (:bp2),y
  2422 284B 8D CA 9B			sta ADR+3
  2423
  2424 				; optimize OK (vbxe_memorystream.inc), line = 240
  2425
  2426 284E AC C5 9B 84 84 AC + 	mwy SIZE :bp2
  2427 2858 A0 00			ldy #$00
  2428 285A B1 84			lda (:bp2),y
  2429 285C 8D CB 9B			sta SIZ
  2430 285F C8				iny
  2431 2860 B1 84			lda (:bp2),y
  2432 2862 8D CC 9B			sta SIZ+1
  2433 2865 C8				iny
  2434 2866 B1 84			lda (:bp2),y
  2435 2868 8D CD 9B			sta SIZ+2
  2436 286B C8				iny
  2437 286C B1 84			lda (:bp2),y
  2438 286E 8D CE 9B			sta SIZ+3
  2439
  2440 				; -------------------  ASM Block 00000114  -------------------
  2441
  2442 2871 8A 48			txa:pha
  2443
  2444 2873 AD C7 9B 8D E1 28		mva adr _adr
  2445 2879 AD C8 9B 8D E2 28		mva adr+1 _adr+1
  2446 287F AD C9 9B 8D E3 28		mva adr+2 _adr+2
  2447
  2448 2885				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2885 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2887 A0 5F		        ldy     #FX_MEMS
     4 2889 91 80		        sta     (fxptr),y
  2449
  2450 288B AD E3 28 CD CD 9B + loop	cpw _adr+1 siz+1
  2451 2899 B0 37			bcs skp
  2452
  2453 289B A0 14			ldy #20
  2454 289D B9 DB 28 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2455
  2456 28A6				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 28A6 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 28A8 A0 50		        ldy     #FX_BL_ADR0
     4 28AA 91 80		        sta     (fxptr),y
  2457 28AC				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 28AC A9 00		        lda     #$00
     3 28AE A0 51		        ldy     #FX_BL_ADR1
     4 28B0 91 80		        sta     (fxptr),y
  2458 28B2				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 28B2 A0 52		        ldy     #FX_BL_ADR2
     3 28B4 91 80		        sta     (fxptr),y
  2459
  2460 28B6				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 28B6 A9 01		        lda     #$01
     3 28B8 A0 53		        ldy     #FX_BLITTER_START
     4 28BA 91 80		        sta     (fxptr),y
  2461
  2462 28BC			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 28BC A0 53		        ldy     #FX_BLITTER_BUSY
     3 28BE B1 80		        lda     (fxptr),y
  2463 28C0 D0 FA			bne wait
  2464
  2465 28C2 A9 00			lda #$00
  2466 28C4 8D E1 28			sta _adr
  2467 28C7 EE E2 28 D0 03 EE + 	inw _adr+1
  2468
  2469 28CF 4C 8B 28			jmp loop
  2470
  2471 28D2			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 28D2 A9 00		        lda     #$00
     3 28D4 A0 5F		        ldy     #FX_MEMS
     4 28D6 91 80		        sta     (fxptr),y
  2472
  2473 28D8 4C F0 28			jmp stop
  2474
  2475 28DB 00 00 00		bltClr	.long 0x00	; source address
  2476 28DE 00 00			.word 0x00	; source step y
  2477 28E0 00				.byte 0x00	; source step x
  2478 28E1 00 00 00		_adr	.long 0x00	; destination address
  2479 28E4 00 01			.word 0x0100	; destination step y
  2480 28E6 01				.byte 0x01	; destination step x
  2481 28E7 FF 00		_siz	.word 0xff	; width
  2482 28E9 00				.byte 0x00	; height
  2483 28EA 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2484 28EB 00				dta 0x00	; xor mask
  2485 28EC 00				dta 0x00	; collision and mask
  2486 28ED 00				dta 0x00	; zoom
  2487 28EE 00				dta 0x00	; pattern feature
  2488 28EF 00				dta 0x00	; control
  2489
  2490 28F0 68 AA		stop	pla:tax
  2491
  2492 				; optimize OK (vbxe_memorystream.inc), line = 292
  2493
  2494 28F2 AC C3 9B 84 84 AC + 	mwy POSITION :bp2
  2495 28FC A0 00			ldy #$00
  2496 28FE 98				tya
  2497 28FF 91 84			sta (:bp2),y
  2498 2901 C8				iny
  2499 2902 91 84			sta (:bp2),y
  2500 2904 C8				iny
  2501 2905 91 84			sta (:bp2),y
  2502 2907 C8				iny
  2503 2908 91 84			sta (:bp2),y
  2504
  2505 				; optimize OK (vbxe_memorystream.inc), line = 293
  2506
  2507 290A AC C5 9B 84 84 AC + 	mwy SIZE :bp2
  2508 2914 A0 00			ldy #$00
  2509 2916 91 84			sta (:bp2),y
  2510 2918 C8				iny
  2511 2919 91 84			sta (:bp2),y
  2512 291B C8				iny
  2513 291C A9 08			lda #$08
  2514 291E 91 84			sta (:bp2),y
  2515 2920 C8				iny
  2516 2921 A9 00			lda #$00
  2517 2923 91 84			sta (:bp2),y
  2518
  2519 				; ------------------------------------------------------------
  2520
  2521 = 9BC1			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
  2522 = 9BC3			POSITION	= DATAORIGIN+$00C8
  2523 = 9BC5			SIZE	= DATAORIGIN+$00CA
  2524 = 9BC7			ADR	= DATAORIGIN+$00CC
  2525 = 9BCB			SIZ	= DATAORIGIN+$00D0
  2526
  2527 = 9BC1			@VarData	= TVBXEMEMORYSTREAM
  2528 = 000E			@VarDataSize	= 14
  2529
  2530 2925			@exit
  2531 					.ifdef @new
  2532 					lda <@VarData
  2533 					sta :ztmp
  2534 					lda >@VarData
  2535 					ldy #@VarDataSize-1
  2536 					jmp @FreeMem
  2537 					els
  2538 2925 60				rts						; ret
  2539 					eif
  2540 				.endl
  2541
  2542 2926			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2543
  2544 				; -------------------  ASM Block 00000123  -------------------
  2545
  2546 					@setxdl #e@xdl.mapoff
  2546 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2546 2926 A9 05		 LDA# E@XDL.MAPOFF
  2546 2928 20 27 1B		 JSR @SETXDL
  2547
  2548 292B			@exit
  2549 					.ifdef @new
  2550 					lda <@VarData
  2551 					sta :ztmp
  2552 					lda >@VarData
  2553 					ldy #@VarDataSize-1
  2554 					jmp @FreeMem
  2555 					els
  2556 292B 60				rts						; ret
  2557 					eif
  2558 				.endl
  2559
  2560 292C			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2561 292C			.local	@0201810000180000
  2562
  2563 				; optimize OK (VBXE), line = 643
  2564
  2565 292C AD CF 9B			lda A
  2566 292F 8D FD 9A			sta SYSTEM.GRAPHMODE
  2567
  2568 				; optimize OK (VBXE), line = 645
  2569
  2570 2932 A9 C0			lda #$C0
  2571 2934 8D 02 9B			sta SYSTEM.SCREENHEIGHT
  2572 2937 A9 00			lda #$00
  2573 2939 8D 03 9B			sta SYSTEM.SCREENHEIGHT+1
  2574
  2575 				; optimize OK (VBXE), line = 647
  2576
  2577 293C AD CF 9B			lda A
  2578 293F 8D D2 9B			sta @CASETMP_0005
  2579 2942 C9 0A			cmp #$0A
  2580 2944 D0 12			jne l_04A5
  2581 				@
  2582
  2583 				; optimize OK (VBXE), line = 648
  2584
  2585 2946 A9 A0			lda #$A0
  2586 2948 8D 00 9B			sta SYSTEM.SCREENWIDTH
  2587 294B A9 00			lda #$00
  2588 294D 8D 01 9B			sta SYSTEM.SCREENWIDTH+1
  2589 2950 A9 01			lda #$01
  2590 2952 8D CF 9B			sta A
  2591 2955 4C 9D 29			jmp a_0005
  2592 2958			l_04A5
  2593 2958 C9 1F			cmp #$1F
  2594 295A D0 12			jne l_04B4
  2595
  2596 				; optimize OK (VBXE), line = 649
  2597
  2598 295C A9 40			lda #$40
  2599 295E 8D 00 9B			sta SYSTEM.SCREENWIDTH
  2600 2961 A9 01			lda #$01
  2601 2963 8D 01 9B			sta SYSTEM.SCREENWIDTH+1
  2602 2966 A9 02			lda #$02
  2603 2968 8D CF 9B			sta A
  2604 296B 4C 9D 29			jmp a_0005
  2605 296E			l_04B4
  2606 296E C9 18			cmp #$18
  2607 2970 D0 12			jne l_04C3
  2608
  2609 				; optimize OK (VBXE), line = 650
  2610
  2611 2972 A9 80			lda #$80
  2612 2974 8D 00 9B			sta SYSTEM.SCREENWIDTH
  2613 2977 A9 02			lda #$02
  2614 2979 8D 01 9B			sta SYSTEM.SCREENWIDTH+1
  2615 297C A9 03			lda #$03
  2616 297E 8D CF 9B			sta A
  2617 2981 4C 9D 29			jmp a_0005
  2618 2984			l_04C3
  2619
  2620 				; optimize OK (VBXE), line = 654
  2621
  2622 2984 A9 50			lda #$50
  2623 2986 8D 00 9B			sta SYSTEM.SCREENWIDTH
  2624 2989 A9 00			lda #$00
  2625 298B 8D 01 9B			sta SYSTEM.SCREENWIDTH+1
  2626
  2627 				; optimize OK (VBXE), line = 655
  2628
  2629 298E A9 18			lda #$18
  2630 2990 8D 02 9B			sta SYSTEM.SCREENHEIGHT
  2631 2993 A9 00			lda #$00
  2632 2995 8D 03 9B			sta SYSTEM.SCREENHEIGHT+1
  2633
  2634 				; optimize OK (VBXE), line = 656
  2635
  2636 2998 A9 02			lda #$02
  2637 299A 8D CF 9B			sta A
  2638 299D			a_0005
  2639
  2640 				; -------------------  ASM Block 00000124  -------------------
  2641
  2642 299D 8A 48			txa:pha
  2643
  2644 299F AD 00 9B			lda MAIN.SYSTEM.ScreenWidth
  2645 29A2 AE 01 9B			ldx MAIN.SYSTEM.ScreenWidth+1
  2646
  2647 29A5 AC 02 9B			ldy MAIN.SYSTEM.ScreenHeight
  2648
  2649 29A8 20 75 11			@SCREENSIZE
  2650
  2651 					@setxdl a
  2651 				 LDA A\ JSR @SETXDL
  2651 29AB AD CF 9B		 LDA A
  2651 29AE 20 27 1B		 JSR @SETXDL
  2652
  2653 29B1				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 29B1 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 29B3 A0 5F		        ldy     #FX_MEMS
     4 29B5 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2654
  2655 29B7 A0 09			ldy #s@xdl.ovstep
  2656
  2657 29B9 AD D0 9B			lda s
  2658 29BC 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2659
  2660 29BF AD D1 9B			lda s+1
  2661 29C2 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2662
  2663 29C5				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 29C5 A9 00		        lda     #$00
     3 29C7 A0 5F		        ldy     #FX_MEMS
     4 29C9 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2664
  2665 29CB 68 AA			pla:tax
  2666
  2667 				; ------------------------------------------------------------
  2668
  2669 = 9BCF			A	= DATAORIGIN+$00D4
  2670 = 9BD0			S	= DATAORIGIN+$00D5
  2671 = 9BD2			@CASETMP_0005	= DATAORIGIN+$00D7
  2672
  2673 = 9BCF			@VarData	= A
  2674 = 0004			@VarDataSize	= 4
  2675
  2676 29CD			@exit
  2677 					.ifdef @new
  2678 					lda <@VarData
  2679 					sta :ztmp
  2680 					lda >@VarData
  2681 					ldy #@VarDataSize-1
  2682 					jmp @FreeMem
  2683 					els
  2684 29CD 60				rts						; ret
  2685 					eif
  2686 				.endl
  2687 				.endl							; overload
  2688
  2689 29CE			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2690 29CE			.local	@010180000
  2691 29CE 8D D3 9B			sta A
  2692
  2693 				; optimize OK (VBXE), line = 698
  2694
  2695 29D1 8D CF 9B			sta SETHORIZONTALRES.@0201810000180000.A
  2696 29D4 A9 40			lda #$40
  2697 29D6 8D D0 9B			sta SETHORIZONTALRES.@0201810000180000.S
  2698 29D9 A9 01			lda #$01
  2699 29DB 8D D1 9B			sta SETHORIZONTALRES.@0201810000180000.S+1
  2700 29DE 20 2C 29			jsr SETHORIZONTALRES.@0201810000180000
  2701
  2702 				; ------------------------------------------------------------
  2703
  2704 = 9BD3			A	= DATAORIGIN+$00D8
  2705
  2706 = 9BD3			@VarData	= A
  2707 = 0001			@VarDataSize	= 1
  2708
  2709 29E1			@exit
  2710 					.ifdef @new
  2711 					lda <@VarData
  2712 					sta :ztmp
  2713 					lda >@VarData
  2714 					ldy #@VarDataSize-1
  2715 					jmp @FreeMem
  2716 					els
  2717 29E1 60				rts						; ret
  2718 					eif
  2719 				.endl
  2720 				.endl							; overload
  2721
  2722 29E2			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2723
  2724 				; -------------------  ASM Block 00000126  -------------------
  2725
  2726 29E2				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 29E2 AD D4 9B		        lda     A
     3 29E5 A0 50		        ldy     #FX_BL_ADR0
     4 29E7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2727 29E9 AD D5 9B			lda	a+1
  2728 29EC 29 0F			and	#$0f
  2729 29EE				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 29EE A0 51		        ldy     #FX_BL_ADR1
     3 29F0 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2730 29F2				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 29F2 A9 00		        lda     #$00
     3 29F4 A0 52		        ldy     #FX_BL_ADR2
     4 29F6 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2731
  2732 29F8				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 29F8 A9 01		        lda     #$01
     3 29FA A0 53		        ldy     #FX_BLITTER_START
     4 29FC 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2733
  2734 				;wait	fxla	FX_BLITTER_BUSY
  2735 				;	bne	wait
  2736
  2737 				; ------------------------------------------------------------
  2738
  2739 = 9BD4			A	= DATAORIGIN+$00D9
  2740 = 9AFB			A.SRC_ADR	= DATAORIGIN+$0000
  2741 = 9AFB			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  2742 = 9AFC			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  2743 = 9AFD			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  2744 = 9AFE			A.SRC_STEP_Y	= DATAORIGIN+$0003
  2745 = 9B00			A.SRC_STEP_X	= DATAORIGIN+$0005
  2746 = 9B01			A.DST_ADR	= DATAORIGIN+$0006
  2747 = 9B01			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  2748 = 9B02			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  2749 = 9B03			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  2750 = 9B04			A.DST_STEP_Y	= DATAORIGIN+$0009
  2751 = 9B06			A.DST_STEP_X	= DATAORIGIN+$000B
  2752 = 9B07			A.BLT_WIDTH	= DATAORIGIN+$000C
  2753 = 9B09			A.BLT_HEIGHT	= DATAORIGIN+$000E
  2754 = 9B0A			A.BLT_AND_MASK	= DATAORIGIN+$000F
  2755 = 9B0B			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  2756 = 9B0C			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  2757 = 9B0D			A.BLT_ZOOM	= DATAORIGIN+$0012
  2758 = 9B0E			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  2759 = 9B0F			A.BLT_CONTROL	= DATAORIGIN+$0014
  2760
  2761 = 9BD4			@VarData	= A
  2762 = 0002			@VarDataSize	= 2
  2763
  2764 29FE			@exit
  2765 					.ifdef @new
  2766 					lda <@VarData
  2767 					sta :ztmp
  2768 					lda >@VarData
  2769 					ldy #@VarDataSize-1
  2770 					jmp @FreeMem
  2771 					els
  2772 29FE 60				rts						; ret
  2773 					eif
  2774 				.endl
  2775
  2776 29FF			.local	GETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  2777
  2778 				; -------------------  ASM Block 00000127  -------------------
  2779
  2780 29FF				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 29FF A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2A01 A0 5F		        ldy     #FX_MEMS
     4 2A03 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2781
  2782 2A05 A0 16			ldy #.sizeof(s@xdl)-1
  2783
  2784 2A07 B9 00 B0		lp	lda MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  2785 2A0A 91 8A			sta (a),y
  2786 2A0C 88				dey
  2787 2A0D 10 F8			bpl lp
  2788
  2789 2A0F				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2A0F A9 00		        lda     #0
     3 2A11 A0 5F		        ldy     #FX_MEMS
     4 2A13 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2790
  2791 				; ------------------------------------------------------------
  2792
  2793 = 008A			A	= :EDX
  2794 = 9AFB			A.XDLC_	= DATAORIGIN+$0000
  2795 = 9AFD			A.RPTL_	= DATAORIGIN+$0002
  2796 = 9AFE			A.XDLC	= DATAORIGIN+$0003
  2797 = 9B00			A.RPTL	= DATAORIGIN+$0005
  2798 = 9B01			A.OV_ADR	= DATAORIGIN+$0006
  2799 = 9B01			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  2800 = 9B02			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  2801 = 9B03			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  2802 = 9B04			A.OV_STEP	= DATAORIGIN+$0009
  2803 = 9B06			A.OV_CHBASE	= DATAORIGIN+$000B
  2804 = 9B07			A.MP_ADR	= DATAORIGIN+$000C
  2805 = 9B07			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  2806 = 9B08			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  2807 = 9B09			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  2808 = 9B0A			A.MP_STEP	= DATAORIGIN+$000F
  2809 = 9B0C			A.MP_HSCROL	= DATAORIGIN+$0011
  2810 = 9B0D			A.MP_VSCROL	= DATAORIGIN+$0012
  2811 = 9B0E			A.MP_WIDTH	= DATAORIGIN+$0013
  2812 = 9B0F			A.MP_HEIGHT	= DATAORIGIN+$0014
  2813 = 9B10			A.OV_WIDTH	= DATAORIGIN+$0015
  2814 = 9B11			A.OV_PRIOR	= DATAORIGIN+$0016
  2815
  2816 2A15			@exit
  2817 					.ifdef @new
  2818 					lda <@VarData
  2819 					sta :ztmp
  2820 					lda >@VarData
  2821 					ldy #@VarDataSize-1
  2822 					jmp @FreeMem
  2823 					els
  2824 2A15 60				rts						; ret
  2825 					eif
  2826 				.endl
  2827
  2828 2A16			.local	SETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  2829
  2830 				; -------------------  ASM Block 00000128  -------------------
  2831
  2832 2A16				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2A16 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2A18 A0 5F		        ldy     #FX_MEMS
     4 2A1A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2833
  2834 2A1C A0 16			ldy #.sizeof(s@xdl)-1
  2835
  2836 2A1E B1 8A		lp	lda (a),y
  2837 2A20 99 00 B0			sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  2838 2A23 88				dey
  2839 2A24 10 F8			bpl lp
  2840
  2841 2A26				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2A26 A9 00		        lda     #0
     3 2A28 A0 5F		        ldy     #FX_MEMS
     4 2A2A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2842
  2843 				; ------------------------------------------------------------
  2844
  2845 = 008A			A	= :EDX
  2846 = 9AFB			A.XDLC_	= DATAORIGIN+$0000
  2847 = 9AFD			A.RPTL_	= DATAORIGIN+$0002
  2848 = 9AFE			A.XDLC	= DATAORIGIN+$0003
  2849 = 9B00			A.RPTL	= DATAORIGIN+$0005
  2850 = 9B01			A.OV_ADR	= DATAORIGIN+$0006
  2851 = 9B01			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  2852 = 9B02			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  2853 = 9B03			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  2854 = 9B04			A.OV_STEP	= DATAORIGIN+$0009
  2855 = 9B06			A.OV_CHBASE	= DATAORIGIN+$000B
  2856 = 9B07			A.MP_ADR	= DATAORIGIN+$000C
  2857 = 9B07			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  2858 = 9B08			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  2859 = 9B09			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  2860 = 9B0A			A.MP_STEP	= DATAORIGIN+$000F
  2861 = 9B0C			A.MP_HSCROL	= DATAORIGIN+$0011
  2862 = 9B0D			A.MP_VSCROL	= DATAORIGIN+$0012
  2863 = 9B0E			A.MP_WIDTH	= DATAORIGIN+$0013
  2864 = 9B0F			A.MP_HEIGHT	= DATAORIGIN+$0014
  2865 = 9B10			A.OV_WIDTH	= DATAORIGIN+$0015
  2866 = 9B11			A.OV_PRIOR	= DATAORIGIN+$0016
  2867
  2868 2A2C			@exit
  2869 					.ifdef @new
  2870 					lda <@VarData
  2871 					sta :ztmp
  2872 					lda >@VarData
  2873 					ldy #@VarDataSize-1
  2874 					jmp @FreeMem
  2875 					els
  2876 2A2C 60				rts						; ret
  2877 					eif
  2878 				.endl
  2879
  2880 2A2D			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  2881 2A2D 8D D8 9B			sta A
  2882
  2883 				; -------------------  ASM Block 00000130  -------------------
  2884
  2885 2A30				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 2A30 AD D8 9B		        lda     A
     3 2A33 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 2A35 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2886
  2887 				; ------------------------------------------------------------
  2888
  2889 = 9BD8			A	= DATAORIGIN+$00DD
  2890
  2891 = 9BD8			@VarData	= A
  2892 = 0001			@VarDataSize	= 1
  2893
  2894 2A37			@exit
  2895 					.ifdef @new
  2896 					lda <@VarData
  2897 					sta :ztmp
  2898 					lda >@VarData
  2899 					ldy #@VarDataSize-1
  2900 					jmp @FreeMem
  2901 					els
  2902 2A37 60				rts						; ret
  2903 					eif
  2904 				.endl
  2905
  2906 				; ------------------------------------------------------------
  2907 				; ------------------------------------------------------------
  2908 2A38			@UnitInit
  2909
  2910 				; -------------------  ASM Block 00000138  -------------------
  2911
  2912 2A38 8A 48			txa:pha
  2913
  2914 2A3A 20 DB 19			jsr @vbxe_detect
  2915 2A3D 90 04			bcc ok
  2916
  2917 2A3F A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  2918 2A41 D0 05			bne status
  2919
  2920 2A43 20 31 1A		ok	jsr @vbxe_init
  2921
  2922 2A46 A2 01			ldx #MAIN.GRAPH.grOK
  2923 2A48 8E 46 9B		status	stx MAIN.GRAPH.GraphResult
  2924
  2925 2A4B 68 AA			pla:tax
  2926
  2927 2A4D 60				rts
  2928
  2929 				; ------------------------------------------------------------
  2930
  2931 = 0001			VC_XDL	= $01
  2932 = 0002			VC_XCOLOR	= $02
  2933 = 0004			VC_NO_TRANS	= $04
  2934 = 0008			VC_TRANS15	= $08
  2935 = 0000			TCBLACK	= $00
  2936 = 0001			TCRED	= $01
  2937 = 0002			TCGREEN	= $02
  2938 = 0003			TCYELLOW	= $03
  2939 = 0004			TCBLUE	= $04
  2940 = 0005			TCMAGENTA	= $05
  2941 = 0006			TCCYAN	= $06
  2942 = 0007			TCWHITE	= $07
  2943 = 0008			TCBRIGHTBLACK	= $08
  2944 = 0009			TCBRIGHTRED	= $09
  2945 = 000A			TCBRIGHTGREEN	= $0A
  2946 = 000B			TCBRIGHTYELLOW	= $0B
  2947 = 000C			TCBRIGHTBLUE	= $0C
  2948 = 000D			TCBRIGHTMAGENTA	= $0D
  2949 = 000E			TCBRIGHTCYAN	= $0E
  2950 = 000F			TCBRIGHTWHITE	= $0F
  2951 = 0080			TBBLACK	= $80
  2952 = 0090			TBRED	= $90
  2953 = 00A0			TBGREEN	= $A0
  2954 = 00B0			TBYELLOW	= $B0
  2955 = 00C0			TBBLUE	= $C0
  2956 = 00D0			TBMAGENTA	= $D0
  2957 = 00E0			TBCYAN	= $E0
  2958 = 00F0			TBWHITE	= $F0
  2959 = 9B6F			adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
  2960 2A4E			.var VRAM	= adr.VRAM .word
  2961 = 9B6F			VRAM.POSITION	= DATAORIGIN+$0074
  2962 = 9B73			VRAM.SIZE	= DATAORIGIN+$0078
  2963 = 0063			SCROLLBACK_FILL	= $63
  2964 = 1B1D			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  2965 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  2966 2A4E			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  2967 = 02FD			FILDAT	= $02FD
  2968 = 0054			ROWCRS	= $54
  2969 = 0055			COLCRS	= $55
  2970 = 0068			CRSADR	= $68
  2971
  2972 = 2A4E 6F 9B		VRAM
  2972 = 2A50 00 04		SCROLLBACK_BUFFER
  2972 				.endl							; UNIT VBXE
  2973
  2974 				; ------------------------------------------------------------
  2975
  2976 2A52			.local	JOYSTICK					; UNIT
  2977
  2978 				; ------------------------------------------------------------
  2979
  2980 = 000F			JOY_NONE	= $0F
  2981 = 000E			JOY_UP	= $0E
  2982 = 000D			JOY_DOWN	= $0D
  2983 = 000B			JOY_LEFT	= $0B
  2984 = 000A			JOY_LEFT_UP	= $0A
  2985 = 0009			JOY_LEFT_DOWN	= $09
  2986 = 0007			JOY_RIGHT	= $07
  2987 = 0006			JOY_RIGHT_UP	= $06
  2988 = 0005			JOY_RIGHT_DOWN	= $05
  2989 = 0278			JOY_1	= $0278
  2990 = 0279			JOY_2	= $0279
  2991 = 0278			adr.STICK	= $0278
  2992 2A52			.var STICK	= adr.STICK .word
  2993 = 0278			STICK0	= $0278
  2994 = 0279			STICK1	= $0279
  2995 = 0284			adr.STRIG	= $0284
  2996 2A52			.var STRIG	= adr.STRIG .word
  2997 = 0284			STRIG0	= $0284
  2998 = 0285			STRIG1	= $0285
  2999 = 0270			adr.PADDL	= $0270
  3000 2A52			.var PADDL	= adr.PADDL .word
  3001 = 0270			PADDL0	= $0270
  3002 = 0271			PADDL1	= $0271
  3003 = 0272			PADDL2	= $0272
  3004 = 0273			PADDL3	= $0273
  3005 = 0274			PADDL4	= $0274
  3006 = 0275			PADDL5	= $0275
  3007 = 0276			PADDL6	= $0276
  3008 = 0277			PADDL7	= $0277
  3009 = 027C			adr.PTRIG	= $027C
  3010 2A52			.var PTRIG	= adr.PTRIG .word
  3011 = 027C			PTRIG0	= $027C
  3012 = 027D			PTRIG1	= $027D
  3013 = 027E			PTRIG2	= $027E
  3014 = 027F			PTRIG3	= $027F
  3015 = 0280			PTRIG4	= $0280
  3016 = 0281			PTRIG5	= $0281
  3017 = 0282			PTRIG6	= $0282
  3018 = 0283			PTRIG7	= $0283
  3019 = D010			TRIG0	= $D010
  3020 = D011			TRIG1	= $D011
  3021 = D200			POT0	= $D200
  3022 = D208			ALLPOT	= $D208
  3023 = D20B			POTGO	= $D20B
  3024
  3025 = 2A52 78 02		STICK
  3025 = 2A54 84 02		STRIG
  3025 = 2A56 70 02		PADDL
  3025 = 2A58 7C 02		PTRIG
  3025 				.endl							; UNIT JOYSTICK
  3026
  3027 2A5A			.local	START_LEVEL					; PROCEDURE
  3028
  3029 2A5A			@exit
  3030 					.ifdef @new
  3031 					lda <@VarData
  3032 					sta :ztmp
  3033 					lda >@VarData
  3034 					ldy #@VarDataSize-1
  3035 					jmp @FreeMem
  3036 					els
  3037 2A5A 60				rts						; ret
  3038 					eif
  3039 				.endl
  3040
  3041 2A5B			.local	DEATH_SOUND					; PROCEDURE
  3042
  3043 				; ------------------------------------------------------------
  3044
  3045 = 9BEE			A	= DATAORIGIN+$00F3
  3046
  3047 = 9BEE			@VarData	= A
  3048 = 0002			@VarDataSize	= 2
  3049
  3050 2A5B			@exit
  3051 					.ifdef @new
  3052 					lda <@VarData
  3053 					sta :ztmp
  3054 					lda >@VarData
  3055 					ldy #@VarDataSize-1
  3056 					jmp @FreeMem
  3057 					els
  3058 2A5B 60				rts						; ret
  3059 					eif
  3060 				.endl
  3061
  3062 2A5C			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3063
  3064 				; ------------------------------------------------------------
  3065
  3066 = 9BF0			A	= DATAORIGIN+$00F5
  3067 = 9BF2			B	= DATAORIGIN+$00F7
  3068
  3069 = 9BF0			@VarData	= A
  3070 = 0004			@VarDataSize	= 4
  3071
  3072 2A5C			@exit
  3073 					.ifdef @new
  3074 					lda <@VarData
  3075 					sta :ztmp
  3076 					lda >@VarData
  3077 					ldy #@VarDataSize-1
  3078 					jmp @FreeMem
  3079 					els
  3080 2A5C 60				rts						; ret
  3081 					eif
  3082 				.endl
  3083
  3084 2A5D			.local	MOUSERESET					; PROCEDURE
  3085
  3086 2A5D			@exit
  3087 					.ifdef @new
  3088 					lda <@VarData
  3089 					sta :ztmp
  3090 					lda >@VarData
  3091 					ldy #@VarDataSize-1
  3092 					jmp @FreeMem
  3093 					els
  3094 2A5D 60				rts						; ret
  3095 					eif
  3096 				.endl
  3097
  3098 2A5E			.local	MOUSECLICK					; FUNCTION
  3099
  3100 				; optimize OK (arkanoid_vbxe.pas), line = 83
  3101
  3102 2A5E A9 01			lda #$01
  3103 2A60 8D F4 9B			sta RESULT
  3104
  3105 				; optimize OK (arkanoid_vbxe.pas), line = 85
  3106
  3107 2A63 8D E5 9B			sta MOUS.FIRE
  3108 2A66			@exit
  3109
  3110 				; ------------------------------------------------------------
  3111
  3112 = 9BF4			RESULT	= DATAORIGIN+$00F9
  3113
  3114 2A66 60				rts						; ret
  3115 				.endl
  3116
  3117 2A67			.local	MOUSECOORDS					; PROCEDURE
  3118
  3119 				; optimize OK (arkanoid_vbxe.pas), line = 93
  3120
  3121 2A67 AD 00 D3			lda ATARI.PORTA
  3122 2A6A 29 0F			and #$0F
  3123 2A6C 8D F9 9B			sta A
  3124
  3125 				; optimize OK (arkanoid_vbxe.pas), line = 95
  3126
  3127 2A6F 8D FA 9B			sta @CASETMP_0007
  3128 2A72 C9 0B			cmp #$0B
  3129 2A74 D0 20			jne l_0523
  3130 				@
  3131
  3132 				; optimize OK (arkanoid_vbxe.pas), line = 96
  3133
  3134 2A76 AD DD 9B			lda MOUS.LEFT
  3135 2A79 CD D9 9B			cmp MOUS.X
  3136 2A7C AD DE 9B			lda MOUS.LEFT+1
  3137 2A7F ED DA 9B			sbc MOUS.X+1
  3138 2A82 50 02			svc
  3139 2A84 49 80			eor #$80
  3140 2A86 10 0B			jpl l_0535
  3141 2A88 AD D9 9B			lda MOUS.X
  3142 2A8B D0 03			bne @+
  3143 2A8D CE DA 9B			dec MOUS.X+1
  3144 				@
  3145 2A90 CE D9 9B			dec MOUS.X
  3146 2A93			l_0535
  3147 2A93 4C B4 2A			jmp a_0007
  3148 2A96			l_0523
  3149 2A96 C9 07			cmp #$07
  3150 2A98 D0 1A			jne l_0543
  3151
  3152 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3153
  3154 2A9A AD D9 9B			lda MOUS.X
  3155 2A9D CD DF 9B			cmp MOUS.RIGHT
  3156 2AA0 AD DA 9B			lda MOUS.X+1
  3157 2AA3 ED E0 9B			sbc MOUS.RIGHT+1
  3158 2AA6 50 02			svc
  3159 2AA8 49 80			eor #$80
  3160 2AAA 10 08			jpl l_0555
  3161 2AAC EE D9 9B			inc MOUS.X
  3162 2AAF D0 03			sne
  3163 2AB1 EE DA 9B			inc MOUS.X+1
  3164 2AB4			l_0555
  3165 2AB4			l_0543
  3166 2AB4			a_0007
  3167
  3168 				; optimize OK (arkanoid_vbxe.pas), line = 100
  3169
  3170 2AB4 AC F5 9B 84 84 AC + 	mwy X :bp2
  3171 2ABE A0 00			ldy #$00
  3172 2AC0 AD D9 9B			lda MOUS.X
  3173 2AC3 91 84			sta (:bp2),y
  3174 2AC5 C8				iny
  3175 2AC6 AD DA 9B			lda MOUS.X+1
  3176 2AC9 91 84			sta (:bp2),y
  3177
  3178 				; ------------------------------------------------------------
  3179
  3180 = 9BF5			X	= DATAORIGIN+$00FA
  3181 = 9BF7			Y	= DATAORIGIN+$00FC
  3182 = 9BF9			A	= DATAORIGIN+$00FE
  3183 = 9BFA			@CASETMP_0007	= DATAORIGIN+$00FF
  3184
  3185 = 9BF5			@VarData	= X
  3186 = 0006			@VarDataSize	= 6
  3187
  3188 2ACB			@exit
  3189 					.ifdef @new
  3190 					lda <@VarData
  3191 					sta :ztmp
  3192 					lda >@VarData
  3193 					ldy #@VarDataSize-1
  3194 					jmp @FreeMem
  3195 					els
  3196 2ACB 60				rts						; ret
  3197 					eif
  3198 				.endl
  3199
  3200 2ACC			.local	MOUSE_X_LIMIT					; PROCEDURE
  3201
  3202 				; optimize OK (arkanoid_vbxe.pas), line = 107
  3203
  3204 2ACC AD FB 9B			lda MN
  3205 2ACF 8D DD 9B			sta MOUS.LEFT
  3206 2AD2 AD FC 9B			lda MN+1
  3207 2AD5 8D DE 9B			sta MOUS.LEFT+1
  3208
  3209 				; optimize OK (arkanoid_vbxe.pas), line = 108
  3210
  3211 2AD8 AD FD 9B			lda MX
  3212 2ADB 8D DF 9B			sta MOUS.RIGHT
  3213 2ADE AD FE 9B			lda MX+1
  3214 2AE1 8D E0 9B			sta MOUS.RIGHT+1
  3215
  3216 				; ------------------------------------------------------------
  3217
  3218 = 9BFB			MN	= DATAORIGIN+$0100
  3219 = 9BFD			MX	= DATAORIGIN+$0102
  3220
  3221 = 9BFB			@VarData	= MN
  3222 = 0004			@VarDataSize	= 4
  3223
  3224 2AE4			@exit
  3225 					.ifdef @new
  3226 					lda <@VarData
  3227 					sta :ztmp
  3228 					lda >@VarData
  3229 					ldy #@VarDataSize-1
  3230 					jmp @FreeMem
  3231 					els
  3232 2AE4 60				rts						; ret
  3233 					eif
  3234 				.endl
  3235
  3236 2AE5			.local	MOUSEMOVE					; PROCEDURE
  3237
  3238 				; optimize OK (arkanoid_vbxe.pas), line = 123
  3239
  3240 2AE5 AD FF 9B			lda X
  3241 2AE8 8D D9 9B			sta MOUS.X
  3242 2AEB AD 00 9C			lda X+1
  3243 2AEE 8D DA 9B			sta MOUS.X+1
  3244
  3245 				; optimize OK (arkanoid_vbxe.pas), line = 124
  3246
  3247 2AF1 AD 01 9C			lda Y
  3248 2AF4 8D DB 9B			sta MOUS.Y
  3249 2AF7 AD 02 9C			lda Y+1
  3250 2AFA 8D DC 9B			sta MOUS.Y+1
  3251
  3252 				; ------------------------------------------------------------
  3253
  3254 = 9BFF			X	= DATAORIGIN+$0104
  3255 = 9C01			Y	= DATAORIGIN+$0106
  3256
  3257 = 9BFF			@VarData	= X
  3258 = 0004			@VarDataSize	= 4
  3259
  3260 2AFD			@exit
  3261 					.ifdef @new
  3262 					lda <@VarData
  3263 					sta :ztmp
  3264 					lda >@VarData
  3265 					ldy #@VarDataSize-1
  3266 					jmp @FreeMem
  3267 					els
  3268 2AFD 60				rts						; ret
  3269 					eif
  3270 				.endl
  3271
  3272 2AFE			.local	BLITBOX						; PROCEDURE
  3273
  3274 				; -------------------  ASM Block 00000141  -------------------
  3275
  3276 2AFE				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2AFE A9 80		        lda     #$80
     3 2B00 A0 5F		        ldy     #FX_MEMS
     4 2B02 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3277 					
  3278 				; optimize OK (service.pas), line = 301
  3279
  3280 2B04 AD 06 A0			lda SRC+2
  3281 2B07 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3282
  3283 				; optimize OK (service.pas), line = 302
  3284
  3285 2B0A AD 05 A0			lda SRC+1
  3286 2B0D 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3287
  3288 				; optimize OK (service.pas), line = 303
  3289
  3290 2B10 AD 04 A0			lda SRC
  3291 2B13 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3292
  3293 				; optimize OK (service.pas), line = 305
  3294
  3295 2B16 AD 0A A0			lda DST+2
  3296 2B19 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3297
  3298 				; optimize OK (service.pas), line = 306
  3299
  3300 2B1C AD 09 A0			lda DST+1
  3301 2B1F 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3302
  3303 				; optimize OK (service.pas), line = 307
  3304
  3305 2B22 AD 08 A0			lda DST
  3306 2B25 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3307
  3308 				; optimize OK (service.pas), line = 309
  3309
  3310 2B28 A9 01			lda #$01
  3311 2B2A 8D 05 B1			sta BLT.SRC_STEP_X
  3312
  3313 				; optimize OK (service.pas), line = 310
  3314
  3315 2B2D AD 0C A0			lda W
  3316 2B30 38 E9 01			sub #$01
  3317 2B33 8D 03 B1			sta BLT.SRC_STEP_Y
  3318 2B36 AD 0D A0			lda W+1
  3319 2B39 E9 00			sbc #$00
  3320 2B3B 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3321
  3322 				; optimize OK (service.pas), line = 312
  3323
  3324 2B3E A9 01			lda #$01
  3325 2B40 8D 0B B1			sta BLT.DST_STEP_X
  3326
  3327 				; optimize OK (service.pas), line = 313
  3328
  3329 2B43 AD 0C A0			lda W
  3330 2B46 38 E9 01			sub #$01
  3331 2B49 8D 09 B1			sta BLT.DST_STEP_Y
  3332 2B4C AD 0D A0			lda W+1
  3333 2B4F E9 00			sbc #$00
  3334 2B51 8D 0A B1			sta BLT.DST_STEP_Y+1
  3335
  3336 				; optimize OK (service.pas), line = 315
  3337
  3338 2B54 AD 0C A0			lda W
  3339 2B57 38 E9 01			sub #$01
  3340 2B5A 8D 0C B1			sta BLT.BLT_WIDTH
  3341 2B5D AD 0D A0			lda W+1
  3342 2B60 E9 00			sbc #$00
  3343 2B62 8D 0D B1			sta BLT.BLT_WIDTH+1
  3344
  3345 				; optimize OK (service.pas), line = 316
  3346
  3347 2B65 AC 0E A0			ldy H
  3348 2B68 88				dey
  3349 2B69 8C 0E B1			sty BLT.BLT_HEIGHT
  3350
  3351 				; optimize OK (service.pas), line = 318
  3352
  3353 2B6C A9 FF			lda #$FF
  3354 2B6E 8D 0F B1			sta BLT.BLT_AND_MASK
  3355
  3356 				; optimize OK (service.pas), line = 320
  3357
  3358 2B71 A9 00			lda #$00
  3359 2B73 8D 12 B1			sta BLT.BLT_ZOOM
  3360
  3361 				; optimize OK (service.pas), line = 322
  3362
  3363 2B76 8D 14 B1			sta BLT.BLT_CONTROL
  3364
  3365 				; -------------------  ASM Block 00000142  -------------------
  3366
  3367 2B79				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2B79 A9 00		        lda     #$00
     3 2B7B A0 5F		        ldy     #FX_MEMS
     4 2B7D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3368 					
  3369 				; optimize OK (service.pas), line = 328
  3370
  3371 2B7F AD 89 9A			lda BLT
  3372 2B82 8D D4 9B			sta VBXE.RUNBCB.A
  3373 2B85 AD 8A 9A			lda BLT+1
  3374 2B88 8D D5 9B			sta VBXE.RUNBCB.A+1
  3375 2B8B 20 E2 29			jsr VBXE.RUNBCB
  3376
  3377 				; ------------------------------------------------------------
  3378
  3379 = A004			SRC	= DATAORIGIN+$0509
  3380 = A008			DST	= DATAORIGIN+$050D
  3381 = A00C			W	= DATAORIGIN+$0511
  3382 = A00E			H	= DATAORIGIN+$0513
  3383
  3384 = A004			@VarData	= SRC
  3385 = 000B			@VarDataSize	= 11
  3386
  3387 2B8E			@exit
  3388 					.ifdef @new
  3389 					lda <@VarData
  3390 					sta :ztmp
  3391 					lda >@VarData
  3392 					ldy #@VarDataSize-1
  3393 					jmp @FreeMem
  3394 					els
  3395 2B8E 60				rts						; ret
  3396 					eif
  3397 				.endl
  3398
  3399 2B8F			.local	BLITZERO					; PROCEDURE
  3400
  3401 				; -------------------  ASM Block 00000143  -------------------
  3402
  3403 2B8F				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2B8F A9 80		        lda     #$80
     3 2B91 A0 5F		        ldy     #FX_MEMS
     4 2B93 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3404 					
  3405 				; optimize OK (service.pas), line = 344
  3406
  3407 2B95 AD 11 A0			lda SRC+2
  3408 2B98 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3409
  3410 				; optimize OK (service.pas), line = 345
  3411
  3412 2B9B AD 10 A0			lda SRC+1
  3413 2B9E 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3414
  3415 				; optimize OK (service.pas), line = 346
  3416
  3417 2BA1 AD 0F A0			lda SRC
  3418 2BA4 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3419
  3420 				; optimize OK (service.pas), line = 348
  3421
  3422 2BA7 AD 15 A0			lda DST+2
  3423 2BAA 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3424
  3425 				; optimize OK (service.pas), line = 349
  3426
  3427 2BAD AD 14 A0			lda DST+1
  3428 2BB0 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3429
  3430 				; optimize OK (service.pas), line = 350
  3431
  3432 2BB3 AD 13 A0			lda DST
  3433 2BB6 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3434
  3435 				; optimize OK (service.pas), line = 352
  3436
  3437 2BB9 A9 01			lda #$01
  3438 2BBB 8D 05 B1			sta BLT.SRC_STEP_X
  3439
  3440 				; optimize OK (service.pas), line = 353
  3441
  3442 2BBE 8D 03 B1			sta BLT.SRC_STEP_Y
  3443 2BC1 A9 00			lda #$00
  3444 2BC3 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3445
  3446 				; optimize OK (service.pas), line = 355
  3447
  3448 2BC6 A9 01			lda #$01
  3449 2BC8 8D 0B B1			sta BLT.DST_STEP_X
  3450
  3451 				; optimize OK (service.pas), line = 356
  3452
  3453 2BCB 8D 09 B1			sta BLT.DST_STEP_Y
  3454 2BCE A9 00			lda #$00
  3455 2BD0 8D 0A B1			sta BLT.DST_STEP_Y+1
  3456
  3457 				; optimize OK (service.pas), line = 358
  3458
  3459 2BD3 AD 17 A0			lda SIZE
  3460 2BD6 38 E9 01			sub #$01
  3461 2BD9 8D 0C B1			sta BLT.BLT_WIDTH
  3462 2BDC AD 18 A0			lda SIZE+1
  3463 2BDF E9 00			sbc #$00
  3464 2BE1 8D 0D B1			sta BLT.BLT_WIDTH+1
  3465
  3466 				; optimize OK (service.pas), line = 359
  3467
  3468 2BE4 A9 00			lda #$00
  3469 2BE6 8D 0E B1			sta BLT.BLT_HEIGHT
  3470
  3471 				; optimize OK (service.pas), line = 361
  3472
  3473 2BE9 A9 01			lda #$01
  3474 2BEB 8D 14 B1			sta BLT.BLT_CONTROL
  3475
  3476 				; optimize OK (service.pas), line = 362
  3477
  3478 2BEE A9 FF			lda #$FF
  3479 2BF0 8D 0F B1			sta BLT.BLT_AND_MASK
  3480
  3481 				; -------------------  ASM Block 00000144  -------------------
  3482
  3483 2BF3				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2BF3 A9 00		        lda     #$00
     3 2BF5 A0 5F		        ldy     #FX_MEMS
     4 2BF7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3484 					
  3485 				; optimize OK (service.pas), line = 369
  3486
  3487 2BF9 AD 89 9A			lda BLT
  3488 2BFC 8D D4 9B			sta VBXE.RUNBCB.A
  3489 2BFF AD 8A 9A			lda BLT+1
  3490 2C02 8D D5 9B			sta VBXE.RUNBCB.A+1
  3491 2C05 20 E2 29			jsr VBXE.RUNBCB
  3492
  3493 				; ------------------------------------------------------------
  3494
  3495 = A00F			SRC	= DATAORIGIN+$0514
  3496 = A013			DST	= DATAORIGIN+$0518
  3497 = A017			SIZE	= DATAORIGIN+$051C
  3498 = A019			I	= DATAORIGIN+$051E
  3499
  3500 = A00F			@VarData	= SRC
  3501 = 000C			@VarDataSize	= 12
  3502
  3503 2C08			@exit
  3504 					.ifdef @new
  3505 					lda <@VarData
  3506 					sta :ztmp
  3507 					lda >@VarData
  3508 					ldy #@VarDataSize-1
  3509 					jmp @FreeMem
  3510 					els
  3511 2C08 60				rts						; ret
  3512 					eif
  3513 				.endl
  3514
  3515 2C09			.local	BLITTMP						; PROCEDURE
  3516
  3517 				; optimize OK (service.pas), line = 381
  3518
  3519 2C09 AD 1B A0			lda DST
  3520 2C0C 8D E6 9B			sta VBXE_RAM.POSITION
  3521 2C0F AD 1C A0			lda DST+1
  3522 2C12 8D E7 9B			sta VBXE_RAM.POSITION+1
  3523 2C15 AD 1D A0			lda DST+2
  3524 2C18 8D E8 9B			sta VBXE_RAM.POSITION+2
  3525 2C1B AD 1E A0			lda DST+3
  3526 2C1E 8D E9 9B			sta VBXE_RAM.POSITION+3
  3527
  3528 				; optimize OK (service.pas), line = 383
  3529
  3530 2C21 AD E3 9A			lda TMP
  3531 2C24 8D 92 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3532 2C27 AD E4 9A			lda TMP+1
  3533 2C2A 8D 93 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3534 2C2D AD 1F A0			lda SIZE
  3535 2C30 8D 94 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3536 2C33 A9 00			lda #$00
  3537 2C35 8D 95 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3538 2C38 AD 8F 9A			lda VBXE_RAM
  3539 2C3B AC 90 9A			ldy VBXE_RAM+1
  3540 2C3E 20 A5 26			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3541
  3542 				; ------------------------------------------------------------
  3543
  3544 = A01B			DST	= DATAORIGIN+$0520
  3545 = A01F			SIZE	= DATAORIGIN+$0524
  3546 = A020			X	= DATAORIGIN+$0525
  3547
  3548 = A01B			@VarData	= DST
  3549 = 0006			@VarDataSize	= 6
  3550
  3551 2C41			@exit
  3552 					.ifdef @new
  3553 					lda <@VarData
  3554 					sta :ztmp
  3555 					lda >@VarData
  3556 					ldy #@VarDataSize-1
  3557 					jmp @FreeMem
  3558 					els
  3559 2C41 60				rts						; ret
  3560 					eif
  3561 				.endl
  3562
  3563 2C42			.local	BLITROW						; PROCEDURE
  3564
  3565 				; -------------------  ASM Block 00000145  -------------------
  3566
  3567 2C42				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2C42 A9 80		        lda     #$80
     3 2C44 A0 5F		        ldy     #FX_MEMS
     4 2C46 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3568 					
  3569 				; optimize OK (service.pas), line = 399
  3570
  3571 2C48 AD 23 A0			lda SRC+2
  3572 2C4B 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3573
  3574 				; optimize OK (service.pas), line = 400
  3575
  3576 2C4E AD 22 A0			lda SRC+1
  3577 2C51 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3578
  3579 				; optimize OK (service.pas), line = 401
  3580
  3581 2C54 AD 21 A0			lda SRC
  3582 2C57 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3583
  3584 				; optimize OK (service.pas), line = 403
  3585
  3586 2C5A AD 27 A0			lda DST+2
  3587 2C5D 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3588
  3589 				; optimize OK (service.pas), line = 404
  3590
  3591 2C60 AD 26 A0			lda DST+1
  3592 2C63 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3593
  3594 				; optimize OK (service.pas), line = 405
  3595
  3596 2C66 AD 25 A0			lda DST
  3597 2C69 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3598
  3599 				; optimize OK (service.pas), line = 407
  3600
  3601 2C6C A9 01			lda #$01
  3602 2C6E 8D 05 B1			sta BLT.SRC_STEP_X
  3603
  3604 				; optimize OK (service.pas), line = 408
  3605
  3606 2C71 A9 00			lda #$00
  3607 2C73 8D 03 B1			sta BLT.SRC_STEP_Y
  3608 2C76 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3609
  3610 				; optimize OK (service.pas), line = 410
  3611
  3612 2C79 A9 01			lda #$01
  3613 2C7B 8D 0B B1			sta BLT.DST_STEP_X
  3614
  3615 				; optimize OK (service.pas), line = 411
  3616
  3617 2C7E A9 00			lda #$00
  3618 2C80 8D 09 B1			sta BLT.DST_STEP_Y
  3619 2C83 8D 0A B1			sta BLT.DST_STEP_Y+1
  3620
  3621 				; optimize OK (service.pas), line = 413
  3622
  3623 2C86 AD 29 A0			lda SIZE
  3624 2C89 38 E9 01			sub #$01
  3625 2C8C 8D 0C B1			sta BLT.BLT_WIDTH
  3626 2C8F AD 2A A0			lda SIZE+1
  3627 2C92 E9 00			sbc #$00
  3628 2C94 8D 0D B1			sta BLT.BLT_WIDTH+1
  3629
  3630 				; optimize OK (service.pas), line = 414
  3631
  3632 2C97 A9 00			lda #$00
  3633 2C99 8D 0E B1			sta BLT.BLT_HEIGHT
  3634
  3635 				; optimize OK (service.pas), line = 416
  3636
  3637 2C9C 8D 14 B1			sta BLT.BLT_CONTROL
  3638
  3639 				; optimize OK (service.pas), line = 418
  3640
  3641 2C9F A9 FF			lda #$FF
  3642 2CA1 8D 0F B1			sta BLT.BLT_AND_MASK
  3643
  3644 				; -------------------  ASM Block 00000146  -------------------
  3645
  3646 2CA4				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2CA4 A9 00		        lda     #$00
     3 2CA6 A0 5F		        ldy     #FX_MEMS
     4 2CA8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3647 					
  3648 				; optimize OK (service.pas), line = 424
  3649
  3650 2CAA AD 89 9A			lda BLT
  3651 2CAD 8D D4 9B			sta VBXE.RUNBCB.A
  3652 2CB0 AD 8A 9A			lda BLT+1
  3653 2CB3 8D D5 9B			sta VBXE.RUNBCB.A+1
  3654 2CB6 20 E2 29			jsr VBXE.RUNBCB
  3655
  3656 				; ------------------------------------------------------------
  3657
  3658 = A021			SRC	= DATAORIGIN+$0526
  3659 = A025			DST	= DATAORIGIN+$052A
  3660 = A029			SIZE	= DATAORIGIN+$052E
  3661 = A02B			X	= DATAORIGIN+$0530
  3662
  3663 = A021			@VarData	= SRC
  3664 = 000C			@VarDataSize	= 12
  3665
  3666 2CB9			@exit
  3667 					.ifdef @new
  3668 					lda <@VarData
  3669 					sta :ztmp
  3670 					lda >@VarData
  3671 					ldy #@VarDataSize-1
  3672 					jmp @FreeMem
  3673 					els
  3674 2CB9 60				rts						; ret
  3675 					eif
  3676 				.endl
  3677
  3678 2CBA			.local	BLITBYTE					; PROCEDURE
  3679
  3680 				; optimize OK (service.pas), line = 435
  3681
  3682 2CBA AD 2D A0			lda SRC
  3683 2CBD 8D E6 9B			sta VBXE_RAM.POSITION
  3684 2CC0 AD 2E A0			lda SRC+1
  3685 2CC3 8D E7 9B			sta VBXE_RAM.POSITION+1
  3686 2CC6 AD 2F A0			lda SRC+2
  3687 2CC9 8D E8 9B			sta VBXE_RAM.POSITION+2
  3688 2CCC AD 30 A0			lda SRC+3
  3689 2CCF 8D E9 9B			sta VBXE_RAM.POSITION+3
  3690
  3691 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 436
  3692
  3693 2CD2 AD 8F 9A			lda VBXE_RAM
  3694 2CD5 AC 90 9A			ldy VBXE_RAM+1
  3695 2CD8 20 AD 27			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3696 2CDB AD A5 9B			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3697 2CDE 8D 35 A0			sta A
  3698
  3699 				; optimize OK (service.pas), line = 438
  3700
  3701 2CE1 AD 31 A0			lda DST
  3702 2CE4 8D E6 9B			sta VBXE_RAM.POSITION
  3703 2CE7 AD 32 A0			lda DST+1
  3704 2CEA 8D E7 9B			sta VBXE_RAM.POSITION+1
  3705 2CED AD 33 A0			lda DST+2
  3706 2CF0 8D E8 9B			sta VBXE_RAM.POSITION+2
  3707 2CF3 AD 34 A0			lda DST+3
  3708 2CF6 8D E9 9B			sta VBXE_RAM.POSITION+3
  3709
  3710 				; optimize OK (service.pas), line = 439
  3711
  3712 2CF9 AD 35 A0			lda A
  3713 2CFC 8D B4 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3714 2CFF AD 8F 9A			lda VBXE_RAM
  3715 2D02 AC 90 9A			ldy VBXE_RAM+1
  3716 2D05 20 E0 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3717
  3718 				; ------------------------------------------------------------
  3719
  3720 = A02D			SRC	= DATAORIGIN+$0532
  3721 = A031			DST	= DATAORIGIN+$0536
  3722 = A035			A	= DATAORIGIN+$053A
  3723
  3724 = A02D			@VarData	= SRC
  3725 = 0009			@VarDataSize	= 9
  3726
  3727 2D08			@exit
  3728 					.ifdef @new
  3729 					lda <@VarData
  3730 					sta :ztmp
  3731 					lda >@VarData
  3732 					ldy #@VarDataSize-1
  3733 					jmp @FreeMem
  3734 					els
  3735 2D08 60				rts						; ret
  3736 					eif
  3737 				.endl
  3738
  3739 2D09			.local	PUTBYTE						; PROCEDURE
  3740
  3741 				; optimize OK (service.pas), line = 449
  3742
  3743 2D09 AD 36 A0			lda DST
  3744 2D0C 8D E6 9B			sta VBXE_RAM.POSITION
  3745 2D0F AD 37 A0			lda DST+1
  3746 2D12 8D E7 9B			sta VBXE_RAM.POSITION+1
  3747 2D15 AD 38 A0			lda DST+2
  3748 2D18 8D E8 9B			sta VBXE_RAM.POSITION+2
  3749 2D1B AD 39 A0			lda DST+3
  3750 2D1E 8D E9 9B			sta VBXE_RAM.POSITION+3
  3751
  3752 				; optimize OK (service.pas), line = 450
  3753
  3754 2D21 AD 3A A0			lda V
  3755 2D24 8D B4 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3756 2D27 AD 8F 9A			lda VBXE_RAM
  3757 2D2A AC 90 9A			ldy VBXE_RAM+1
  3758 2D2D 20 E0 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3759
  3760 				; ------------------------------------------------------------
  3761
  3762 = A036			DST	= DATAORIGIN+$053B
  3763 = A03A			V	= DATAORIGIN+$053F
  3764
  3765 = A036			@VarData	= DST
  3766 = 0005			@VarDataSize	= 5
  3767
  3768 2D30			@exit
  3769 					.ifdef @new
  3770 					lda <@VarData
  3771 					sta :ztmp
  3772 					lda >@VarData
  3773 					ldy #@VarDataSize-1
  3774 					jmp @FreeMem
  3775 					els
  3776 2D30 60				rts						; ret
  3777 					eif
  3778 				.endl
  3779
  3780 2D31			.local	GETBYTE						; FUNCTION
  3781
  3782 				; optimize OK (service.pas), line = 460
  3783
  3784 2D31 AD 3B A0			lda SRC
  3785 2D34 8D E6 9B			sta VBXE_RAM.POSITION
  3786 2D37 AD 3C A0			lda SRC+1
  3787 2D3A 8D E7 9B			sta VBXE_RAM.POSITION+1
  3788 2D3D AD 3D A0			lda SRC+2
  3789 2D40 8D E8 9B			sta VBXE_RAM.POSITION+2
  3790 2D43 AD 3E A0			lda SRC+3
  3791 2D46 8D E9 9B			sta VBXE_RAM.POSITION+3
  3792
  3793 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 461
  3794
  3795 2D49 AD 8F 9A			lda VBXE_RAM
  3796 2D4C AC 90 9A			ldy VBXE_RAM+1
  3797 2D4F 20 AD 27			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3798 2D52 AD A5 9B			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3799 2D55 8D 3F A0			sta RESULT
  3800 2D58			@exit
  3801
  3802 				; ------------------------------------------------------------
  3803
  3804 = A03B			SRC	= DATAORIGIN+$0540
  3805 = A03F			RESULT	= DATAORIGIN+$0544
  3806
  3807 = A03B			@VarData	= SRC
  3808 = 0004			@VarDataSize	= 4
  3809
  3810 2D58 60				rts						; ret
  3811 				.endl
  3812
  3813 2D59			.local	NOSOUND						; PROCEDURE
  3814
  3815 2D59			@exit
  3816 					.ifdef @new
  3817 					lda <@VarData
  3818 					sta :ztmp
  3819 					lda >@VarData
  3820 					ldy #@VarDataSize-1
  3821 					jmp @FreeMem
  3822 					els
  3823 2D59 60				rts						; ret
  3824 					eif
  3825 				.endl
  3826
  3827 2D5A			.local	MYDELAY						; PROCEDURE
  3828
  3829 				; ------------------------------------------------------------
  3830
  3831 = A040			A	= DATAORIGIN+$0545
  3832
  3833 = A040			@VarData	= A
  3834 = 0002			@VarDataSize	= 2
  3835
  3836 2D5A			@exit
  3837 					.ifdef @new
  3838 					lda <@VarData
  3839 					sta :ztmp
  3840 					lda >@VarData
  3841 					ldy #@VarDataSize-1
  3842 					jmp @FreeMem
  3843 					els
  3844 2D5A 60				rts						; ret
  3845 					eif
  3846 				.endl
  3847
  3848 2D5B			.local	MAX						; FUNCTION
  3849
  3850 				; optimize OK (service.pas), line = 586
  3851
  3852 2D5B AD 44 A0			lda B
  3853 2D5E CD 42 A0			cmp A
  3854 2D61 AD 45 A0			lda B+1
  3855 2D64 ED 43 A0			sbc A+1
  3856 2D67 50 02			svc
  3857 2D69 49 80			eor #$80
  3858 2D6B 10 0C			jpl l_06E9
  3859 2D6D AD 42 A0			lda A
  3860 2D70 8D 46 A0			sta RESULT
  3861 2D73 AD 43 A0			lda A+1
  3862 2D76 4C 82 2D			jmp l_06F8
  3863 2D79			l_06E9
  3864
  3865 				; optimize OK (service.pas), line = 587
  3866
  3867 2D79 AD 44 A0			lda B
  3868 2D7C 8D 46 A0			sta RESULT
  3869 2D7F AD 45 A0			lda B+1
  3870 2D82			l_06F8
  3871 2D82 8D 47 A0			sta RESULT+1
  3872 2D85			@exit
  3873
  3874 				; ------------------------------------------------------------
  3875
  3876 = A042			A	= DATAORIGIN+$0547
  3877 = A044			B	= DATAORIGIN+$0549
  3878 = A046			RESULT	= DATAORIGIN+$054B
  3879
  3880 = A042			@VarData	= A
  3881 = 0004			@VarDataSize	= 4
  3882
  3883 2D85 60				rts						; ret
  3884 				.endl
  3885
  3886 2D86			.local	MIN						; FUNCTION
  3887
  3888 				; optimize OK (service.pas), line = 593
  3889
  3890 2D86 AD 48 A0			lda A
  3891 2D89 CD 4A A0			cmp B
  3892 2D8C AD 49 A0			lda A+1
  3893 2D8F ED 4B A0			sbc B+1
  3894 2D92 50 02			svc
  3895 2D94 49 80			eor #$80
  3896 2D96 10 0C			jpl l_0713
  3897 2D98 AD 48 A0			lda A
  3898 2D9B 8D 4C A0			sta RESULT
  3899 2D9E AD 49 A0			lda A+1
  3900 2DA1 4C AD 2D			jmp l_0722
  3901 2DA4			l_0713
  3902
  3903 				; optimize OK (service.pas), line = 594
  3904
  3905 2DA4 AD 4A A0			lda B
  3906 2DA7 8D 4C A0			sta RESULT
  3907 2DAA AD 4B A0			lda B+1
  3908 2DAD			l_0722
  3909 2DAD 8D 4D A0			sta RESULT+1
  3910 2DB0			@exit
  3911
  3912 				; ------------------------------------------------------------
  3913
  3914 = A048			A	= DATAORIGIN+$054D
  3915 = A04A			B	= DATAORIGIN+$054F
  3916 = A04C			RESULT	= DATAORIGIN+$0551
  3917
  3918 = A048			@VarData	= A
  3919 = 0004			@VarDataSize	= 4
  3920
  3921 2DB0 60				rts						; ret
  3922 				.endl
  3923
  3924 2DB1			.local	FATAL_ERROR					; PROCEDURE
  3925 2DB1 8D 4E A0			sta ERR_TYPE
  3926
  3927 				; optimize OK (service.pas), line = 603
  3928
  3929 2DB4 8D C0 9C			sta STATUS
  3930
  3931 				; ------------------------------------------------------------
  3932
  3933 = A04E			ERR_TYPE	= DATAORIGIN+$0553
  3934
  3935 = A04E			@VarData	= ERR_TYPE
  3936 = 0001			@VarDataSize	= 1
  3937
  3938 2DB7			@exit
  3939 					.ifdef @new
  3940 					lda <@VarData
  3941 					sta :ztmp
  3942 					lda >@VarData
  3943 					ldy #@VarDataSize-1
  3944 					jmp @FreeMem
  3945 					els
  3946 2DB7 60				rts						; ret
  3947 					eif
  3948 				.endl
  3949
  3950 2DB8			.local	INITROWARRAY					; PROCEDURE
  3951
  3952 				; optimize OK (service.pas), line = 641
  3953
  3954 2DB8 A9 00			lda #$00
  3955 2DBA 8D 4F A0			sta Y
  3956
  3957 2DBD			l_073E
  3958 				; --- ForToDoCondition
  3959 2DBD AD 4F A0			lda Y
  3960 2DC0 C9 C8			cmp #$C8
  3961 2DC2 B0 1B			jcs l_074C
  3962
  3963 				; optimize OK (service.pas), line = 642
  3964
  3965 2DC4 85 86			sta :eax
  3966 2DC6 A9 00			lda #$00
  3967 2DC8 85 87			sta :eax+1
  3968 2DCA 20 51 19			jsr @mul320
  3969 2DCD AC 4F A0			ldy Y
  3970 2DD0 A5 86			lda :eax
  3971 2DD2 99 00 C0			sta adr.ROW,y
  3972 2DD5 A5 87			lda :eax+1
  3973 2DD7 99 FB C0			sta adr.ROW+251,y
  3974
  3975 				; --- ForToDoEpilog
  3976 2DDA EE 4F A0			inc Y
  3977 2DDD D0 DE			jne l_073E
  3978 2DDF			l_074C
  3979
  3980 				; optimize OK (service.pas), line = 644
  3981
  3982 2DDF A9 C8			lda #$C8
  3983 2DE1 A8				tay
  3984
  3985 2DE2			l_0767
  3986 				; --- ForToDoCondition
  3987 2DE2 C0 FB			cpy #$FB
  3988 2DE4 B0 0D			jcs l_0775
  3989
  3990 				; optimize OK (service.pas), line = 645
  3991
  3992 2DE6 A9 00			lda #$00
  3993 2DE8 99 00 C0			sta adr.ROW,y
  3994 2DEB A9 FA			lda #$FA
  3995 2DED 99 FB C0			sta adr.ROW+251,y
  3996
  3997 				; --- ForToDoEpilog
  3998 2DF0 C8				iny
  3999 2DF1 D0 EF			jne l_0767
  4000 2DF3			l_0775
  4001 2DF3 8C 4F A0			sty Y
  4002
  4003 				; ------------------------------------------------------------
  4004
  4005 = A04F			Y	= DATAORIGIN+$0554
  4006
  4007 = A04F			@VarData	= Y
  4008 = 0001			@VarDataSize	= 1
  4009
  4010 2DF6			@exit
  4011 					.ifdef @new
  4012 					lda <@VarData
  4013 					sta :ztmp
  4014 					lda >@VarData
  4015 					ldy #@VarDataSize-1
  4016 					jmp @FreeMem
  4017 					els
  4018 2DF6 60				rts						; ret
  4019 					eif
  4020 				.endl
  4021
  4022 2DF7			.local	INITSVGA					; PROCEDURE
  4023
  4024 				; optimize OK (service.pas), line = 670
  4025
  4026 2DF7 AD 46 9B			lda GRAPH.GRAPHRESULT
  4027 2DFA C9 01			cmp #$01
  4028 2DFC F0 0F			jeq l_0797
  4029
  4030 				; optimize FAIL ('@print', service.pas), line = 671
  4031
  4032 					@printSTRING #CODEORIGIN+$0000
  4032 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4032 2DFE A0 10		 LDY> CODEORIGIN+$0000
  4032 2E00 A9 00		 LDA< CODEORIGIN+$0000
  4032 2E02 20 91 19		 JSR @PRINTSTRING
  4033 2E05 20 7B 19			@printEOL
  4034 2E08 A9 00			lda #$00
  4035 2E0A 4C 7E 9A			jmp @halt
  4036 2E0D			l_0797
  4037
  4038 				; optimize OK (service.pas), line = 675
  4039
  4040 2E0D A9 1F			lda #$1F
  4041 2E0F 20 CE 29			jsr VBXE.SETHORIZONTALRES.@010180000
  4042
  4043 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 676
  4044
  4045 2E12 20 26 29			jsr VBXE.COLORMAPOFF
  4046
  4047 				; optimize OK (service.pas), line = 678
  4048
  4049 2E15 A9 07			lda #$07
  4050 2E17 20 2D 2A			jsr VBXE.VBXECONTROL
  4051
  4052 				; optimize OK (service.pas), line = 680
  4053
  4054 2E1A AD 8E 2E			lda XDL
  4055 2E1D 85 8A			sta VBXE.GETXDL.A
  4056 2E1F AD 8F 2E			lda XDL+1
  4057 2E22 85 8B			sta VBXE.GETXDL.A+1
  4058 2E24 20 FF 29			jsr VBXE.GETXDL
  4059
  4060 				; optimize OK (service.pas), line = 681
  4061
  4062 2E27 A9 13			lda #$13
  4063 2E29 8D 52 A0			sta XDL.RPTL_
  4064
  4065 				; optimize OK (service.pas), line = 682
  4066
  4067 2E2C A9 C6			lda #$C6
  4068 2E2E 8D 55 A0			sta XDL.RPTL
  4069
  4070 				; optimize OK (service.pas), line = 683
  4071
  4072 2E31 AD 8E 2E			lda XDL
  4073 2E34 85 8A			sta VBXE.SETXDL.A
  4074 2E36 AD 8F 2E			lda XDL+1
  4075 2E39 85 8B			sta VBXE.SETXDL.A+1
  4076 2E3B 20 16 2A			jsr VBXE.SETXDL
  4077
  4078 				; optimize OK (service.pas), line = 685
  4079
  4080 2E3E A9 00			lda #$00
  4081 2E40 8D E6 9B			sta VBXE_RAM.POSITION
  4082 2E43 A9 50			lda #$50
  4083 2E45 8D E7 9B			sta VBXE_RAM.POSITION+1
  4084 2E48 A9 00			lda #$00
  4085 2E4A 8D E8 9B			sta VBXE_RAM.POSITION+2
  4086 2E4D 8D E9 9B			sta VBXE_RAM.POSITION+3
  4087
  4088 				; optimize OK (service.pas), line = 686
  4089
  4090 2E50 8D EA 9B			sta VBXE_RAM.SIZE
  4091 2E53 A9 FA			lda #$FA
  4092 2E55 8D EB 9B			sta VBXE_RAM.SIZE+1
  4093 2E58 A9 00			lda #$00
  4094 2E5A 8D EC 9B			sta VBXE_RAM.SIZE+2
  4095 2E5D 8D ED 9B			sta VBXE_RAM.SIZE+3
  4096
  4097 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 687
  4098
  4099 2E60 AD 8F 9A			lda VBXE_RAM
  4100 2E63 AC 90 9A			ldy VBXE_RAM+1
  4101 2E66 20 13 28			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4102
  4103 				; optimize OK (service.pas), line = 689
  4104
  4105 2E69 A9 00			lda #$00
  4106 2E6B 8D 00 D4			sta ATARI.DMACTL
  4107
  4108 				; -------------------  ASM Block 00000147  -------------------
  4109
  4110 2E6E				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2E6E A9 80		        lda     #$80
     3 2E70 A0 5F		        ldy     #FX_MEMS
     4 2E72 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4111 					
  4112 				; optimize OK (service.pas), line = 695
  4113
  4114 2E74 AD 89 9A			lda BLT
  4115 2E77 85 84			sta :bp2
  4116 2E79 AD 8A 9A			lda BLT+1
  4117 2E7C 85 85			sta :bp2+1
  4118 2E7E A9 00			lda #$00
  4119 2E80 A0 14			ldy #$14
  4120 2E82 91 84 88 10 FB		sta:rpl (:bp2),y-
  4121
  4122 				; -------------------  ASM Block 00000148  -------------------
  4123
  4124 2E87				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2E87 A9 00		        lda     #$00
     3 2E89 A0 5F		        ldy     #FX_MEMS
     4 2E8B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4125 					
  4126 				; ------------------------------------------------------------
  4127
  4128 = A050			adr.XDL	= DATAORIGIN+$0555	; [23] RECORD
  4129 2E8D			.var XDL	= adr.XDL .word
  4130 = A050			XDL.XDLC_	= DATAORIGIN+$0555
  4131 = A052			XDL.RPTL_	= DATAORIGIN+$0557
  4132 = A053			XDL.XDLC	= DATAORIGIN+$0558
  4133 = A055			XDL.RPTL	= DATAORIGIN+$055A
  4134 = A056			adr.XDL.OV_ADR	= DATAORIGIN+$055B	; [3] RECORD
  4135 2E8D			.var XDL.OV_ADR	= adr.XDL.OV_ADR .word
  4136 = A056			XDL.OV_ADR.BYTE0	= DATAORIGIN+$055B
  4137 = A057			XDL.OV_ADR.BYTE1	= DATAORIGIN+$055C
  4138 = A058			XDL.OV_ADR.BYTE2	= DATAORIGIN+$055D
  4139 = A059			XDL.OV_STEP	= DATAORIGIN+$055E
  4140 = A05B			XDL.OV_CHBASE	= DATAORIGIN+$0560
  4141 = A05C			adr.XDL.MP_ADR	= DATAORIGIN+$0561	; [3] RECORD
  4142 2E8D			.var XDL.MP_ADR	= adr.XDL.MP_ADR .word
  4143 = A05C			XDL.MP_ADR.BYTE0	= DATAORIGIN+$0561
  4144 = A05D			XDL.MP_ADR.BYTE1	= DATAORIGIN+$0562
  4145 = A05E			XDL.MP_ADR.BYTE2	= DATAORIGIN+$0563
  4146 = A05F			XDL.MP_STEP	= DATAORIGIN+$0564
  4147 = A061			XDL.MP_HSCROL	= DATAORIGIN+$0566
  4148 = A062			XDL.MP_VSCROL	= DATAORIGIN+$0567
  4149 = A063			XDL.MP_WIDTH	= DATAORIGIN+$0568
  4150 = A064			XDL.MP_HEIGHT	= DATAORIGIN+$0569
  4151 = A065			XDL.OV_WIDTH	= DATAORIGIN+$056A
  4152 = A066			XDL.OV_PRIOR	= DATAORIGIN+$056B
  4153
  4154 = A050			@VarData	= XDL.XDLC_
  4155 = 0017			@VarDataSize	= 23
  4156
  4157 2E8D			@exit
  4158 					.ifdef @new
  4159 					lda <@VarData
  4160 					sta :ztmp
  4161 					lda >@VarData
  4162 					ldy #@VarDataSize-1
  4163 					jmp @FreeMem
  4164 					els
  4165 2E8D 60				rts						; ret
  4166 					eif
  4167 = 2E8E 50 A0		XDL
  4167 = 2E90 56 A0		XDL.OV_ADR
  4167 = 2E92 5C A0		XDL.MP_ADR
  4167 				.endl
  4168
  4169 2E94			.local	SHINE_BLOCK					; PROCEDURE
  4170
  4171 				; optimize OK (service.pas), line = 739
  4172
  4173 2E94 AD E0 9C			lda SHINEREC.XB
  4174 2E97 8D 67 A0			sta XB
  4175 2E9A A9 00			lda #$00
  4176 2E9C 8D 68 A0			sta XB+1
  4177
  4178 				; optimize OK (service.pas), line = 740
  4179
  4180 2E9F AD E1 9C			lda SHINEREC.YB
  4181 2EA2 8D 69 A0			sta YB
  4182 2EA5 A9 00			lda #$00
  4183 2EA7 8D 6A A0			sta YB+1
  4184
  4185 				; optimize OK (service.pas), line = 742
  4186
  4187 2EAA AD 69 A0			lda YB
  4188 2EAD 0A				asl @
  4189 2EAE 0A				asl @
  4190 2EAF 0A				asl @
  4191 2EB0 0A				asl @
  4192 2EB1 18 6D 67 A0			add XB
  4193 2EB5 8D 76 A0			sta I
  4194
  4195 				; optimize OK (service.pas), line = 744
  4196
  4197 2EB8 A8				tay
  4198 2EB9 B9 00 DB			lda adr.WALL,y
  4199 2EBC C9 09			cmp #$09
  4200 2EBE B0 03 4C 11 30		jcc l_07F4
  4201
  4202 				; optimize OK (service.pas), line = 746
  4203
  4204 2EC3 AD E2 9C			lda SHINEREC.FRAME
  4205 2EC6 4A				lsr @
  4206 2EC7 8D 6B A0			sta FRAME
  4207 2ECA A9 00			lda #$00
  4208 2ECC 8D 6C A0			sta FRAME+1
  4209
  4210 				; optimize OK (service.pas), line = 747
  4211
  4212 2ECF B9 00 DB			lda adr.WALL,y
  4213 2ED2 C9 0A			cmp #$0A
  4214 2ED4 F0 0E			jeq l_0814
  4215 2ED6 AD 6B A0			lda FRAME
  4216 2ED9 18 69 05			add #$05
  4217 2EDC 8D 6B A0			sta FRAME
  4218 2EDF 90 03			scc
  4219 2EE1 EE 6C A0			inc FRAME+1
  4220 2EE4			l_0814
  4221
  4222 				; optimize OK (service.pas), line = 749
  4223
  4224 2EE4 AD 67 A0			lda XB
  4225 2EE7 85 A0			sta :STACKORIGIN+10
  4226 2EE9 AD 68 A0			lda XB+1
  4227 2EEC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4228 2EEE 06 A0			asl :STACKORIGIN+10
  4229 2EF0 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4230 2EF2 06 A0			asl :STACKORIGIN+10
  4231 2EF4 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4232 2EF6 06 A0			asl :STACKORIGIN+10
  4233 2EF8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4234 2EFA 06 A0			asl :STACKORIGIN+10
  4235 2EFC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4236 2EFE A9 09			lda #$09
  4237 2F00 18 65 A0			add :STACKORIGIN+10
  4238 2F03 8D 6D A0			sta XF
  4239 2F06 A9 00			lda #$00
  4240 2F08 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4241 2F0A 8D 6E A0			sta XF+1
  4242
  4243 				; optimize OK (service.pas), line = 750
  4244
  4245 2F0D AD 69 A0			lda YB
  4246 2F10 85 A0			sta :STACKORIGIN+10
  4247 2F12 AD 6A A0			lda YB+1
  4248 2F15 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4249 2F17 06 A0			asl :STACKORIGIN+10
  4250 2F19 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4251 2F1B 06 A0			asl :STACKORIGIN+10
  4252 2F1D 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4253 2F1F 06 A0			asl :STACKORIGIN+10
  4254 2F21 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4255 2F23 A9 16			lda #$16
  4256 2F25 18 65 A0			add :STACKORIGIN+10
  4257 2F28 8D 6F A0			sta YF
  4258 2F2B A9 00			lda #$00
  4259 2F2D 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4260 2F2F 8D 70 A0			sta YF+1
  4261
  4262 				; optimize OK (service.pas), line = 751
  4263
  4264 2F32 AD 6B A0			lda FRAME
  4265 2F35 85 9F			sta :STACKORIGIN+9
  4266 2F37 AD 6C A0			lda FRAME+1
  4267 2F3A 06 9F			asl :STACKORIGIN+9
  4268 2F3C 2A				rol @
  4269 2F3D 06 9F			asl :STACKORIGIN+9
  4270 2F3F 2A				rol @
  4271 2F40 06 9F			asl :STACKORIGIN+9
  4272 2F42 2A				rol @
  4273 2F43 06 9F			asl :STACKORIGIN+9
  4274 2F45 2A				rol @
  4275 2F46 06 9F			asl :STACKORIGIN+9
  4276 2F48 2A				rol @
  4277 2F49 06 9F			asl :STACKORIGIN+9
  4278 2F4B 2A				rol @
  4279 2F4C 06 9F			asl :STACKORIGIN+9
  4280 2F4E 2A				rol @
  4281 2F4F 8D 72 A0			sta FR+1
  4282 2F52 A5 9F			lda :STACKORIGIN+9
  4283 2F54 8D 71 A0			sta FR
  4284
  4285 				; optimize OK (service.pas), line = 753
  4286
  4287 2F57 A9 00			lda #$00
  4288 2F59 8D 75 A0			sta Y
  4289
  4290 2F5C			l_0844
  4291 				; --- ForToDoCondition
  4292 2F5C AD 75 A0			lda Y
  4293 2F5F C9 08			cmp #$08
  4294 2F61 90 03 4C 11 30		jcs l_0852
  4295
  4296 				; optimize OK (service.pas), line = 755
  4297
  4298 2F66 85 9F			sta :STACKORIGIN+9
  4299 2F68 A9 00			lda #$00
  4300 2F6A 06 9F			asl :STACKORIGIN+9
  4301 2F6C 2A				rol @
  4302 2F6D 06 9F			asl :STACKORIGIN+9
  4303 2F6F 2A				rol @
  4304 2F70 06 9F			asl :STACKORIGIN+9
  4305 2F72 2A				rol @
  4306 2F73 06 9F			asl :STACKORIGIN+9
  4307 2F75 2A				rol @
  4308 2F76 8D 74 A0			sta OG+1
  4309 2F79 A5 9F			lda :STACKORIGIN+9
  4310 2F7B 8D 73 A0			sta OG
  4311
  4312 				; optimize OK (service.pas), line = 758
  4313
  4314 2F7E AD 6D A0			lda XF
  4315 2F81 85 A0			sta :STACKORIGIN+10
  4316 2F83 A9 50			lda #$50
  4317 2F85 18 6D 6E A0			add XF+1
  4318 2F89 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4319 2F8B A9 00			lda #$00
  4320 2F8D 69 00			adc #$00
  4321 2F8F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4322 2F91 A9 00			lda #$00
  4323 2F93 69 00			adc #$00
  4324 2F95 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4325 2F97 AD 6F A0			lda YF
  4326 2F9A 18 6D 75 A0			add Y
  4327 2F9E A8				tay
  4328 2F9F A5 A0			lda :STACKORIGIN+10
  4329 2FA1 18 79 00 C0			add adr.ROW,y
  4330 2FA5 8D 25 A0			sta BLITROW.DST
  4331 2FA8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4332 2FAA 79 FB C0			adc adr.ROW+251,y
  4333 2FAD 8D 26 A0			sta BLITROW.DST+1
  4334 2FB0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4335 2FB2 69 00			adc #$00
  4336 2FB4 8D 27 A0			sta BLITROW.DST+2
  4337 2FB7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4338 2FB9 69 00			adc #$00
  4339 2FBB 8D 28 A0			sta BLITROW.DST+3
  4340 2FBE AD 57 9C			lda SHINEWALL.OFS
  4341 2FC1 18 6D 71 A0			add FR
  4342 2FC5 85 A1			sta :STACKORIGIN+11
  4343 2FC7 AD 58 9C			lda SHINEWALL.OFS+1
  4344 2FCA 6D 72 A0			adc FR+1
  4345 2FCD 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4346 2FCF AD 59 9C			lda SHINEWALL.OFS+2
  4347 2FD2 69 00			adc #$00
  4348 2FD4 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4349 2FD6 AD 5A 9C			lda SHINEWALL.OFS+3
  4350 2FD9 69 00			adc #$00
  4351 2FDB 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4352 2FDD A5 A1			lda :STACKORIGIN+11
  4353 2FDF 18 6D 73 A0			add OG
  4354 2FE3 8D 21 A0			sta BLITROW.SRC
  4355 2FE6 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4356 2FE8 6D 74 A0			adc OG+1
  4357 2FEB 8D 22 A0			sta BLITROW.SRC+1
  4358 2FEE A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4359 2FF0 69 00			adc #$00
  4360 2FF2 8D 23 A0			sta BLITROW.SRC+2
  4361 2FF5 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4362 2FF7 69 00			adc #$00
  4363 2FF9 8D 24 A0			sta BLITROW.SRC+3
  4364 2FFC A9 10			lda #$10
  4365 2FFE 8D 29 A0			sta BLITROW.SIZE
  4366 3001 A9 00			lda #$00
  4367 3003 8D 2A A0			sta BLITROW.SIZE+1
  4368 3006 20 42 2C			jsr BLITROW
  4369
  4370 				; --- ForToDoEpilog
  4371 3009 EE 75 A0			inc Y
  4372 300C F0 03 4C 5C 2F		jne l_0844
  4373 3011			l_0852
  4374 3011			l_07F4
  4375
  4376 				; optimize FAIL (0, service.pas), line = 762
  4377
  4378 3011 EE E2 9C			inc SHINEREC.FRAME
  4379
  4380 				; optimize OK (service.pas), line = 763
  4381
  4382 3014 AD E2 9C			lda SHINEREC.FRAME
  4383 3017 C9 0A			cmp #$0A
  4384 3019 D0 05			jne l_0899
  4385 301B A9 00			lda #$00
  4386 301D 8D E4 9C			sta SHINEREC.ACTIVE
  4387 3020			l_0899
  4388
  4389 				; ------------------------------------------------------------
  4390
  4391 = A067			XB	= DATAORIGIN+$056C
  4392 = A069			YB	= DATAORIGIN+$056E
  4393 = A06B			FRAME	= DATAORIGIN+$0570
  4394 = A06D			XF	= DATAORIGIN+$0572
  4395 = A06F			YF	= DATAORIGIN+$0574
  4396 = A071			FR	= DATAORIGIN+$0576
  4397 = A073			OG	= DATAORIGIN+$0578
  4398 = A075			Y	= DATAORIGIN+$057A
  4399 = A076			I	= DATAORIGIN+$057B
  4400
  4401 = A067			@VarData	= XB
  4402 = 0010			@VarDataSize	= 16
  4403
  4404 3020			@exit
  4405 					.ifdef @new
  4406 					lda <@VarData
  4407 					sta :ztmp
  4408 					lda >@VarData
  4409 					ldy #@VarDataSize-1
  4410 					jmp @FreeMem
  4411 					els
  4412 3020 60				rts						; ret
  4413 					eif
  4414 				.endl
  4415
  4416 3021			.local	UNSHINE_BLOCK					; PROCEDURE
  4417
  4418 				; optimize OK (service.pas), line = 772
  4419
  4420 3021 A9 09			lda #$09
  4421 3023 8D E2 9C			sta SHINEREC.FRAME
  4422
  4423 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 773
  4424
  4425 3026 20 94 2E			jsr SHINE_BLOCK
  4426
  4427 3029			@exit
  4428 					.ifdef @new
  4429 					lda <@VarData
  4430 					sta :ztmp
  4431 					lda >@VarData
  4432 					ldy #@VarDataSize-1
  4433 					jmp @FreeMem
  4434 					els
  4435 3029 60				rts						; ret
  4436 					eif
  4437 				.endl
  4438
  4439 302A			.local	SHINE						; PROCEDURE
  4440
  4441 				; optimize OK (service.pas), line = 780
  4442
  4443 302A AD E4 9C			lda SHINEREC.ACTIVE
  4444 302D F0 03			jeq l_08B9
  4445 302F 20 21 30			jsr UNSHINE_BLOCK
  4446 3032			l_08B9
  4447
  4448 				; optimize OK (service.pas), line = 782
  4449
  4450 3032 AD 77 A0			lda XB
  4451 3035 8D E0 9C			sta SHINEREC.XB
  4452
  4453 				; optimize OK (service.pas), line = 783
  4454
  4455 3038 AD 78 A0			lda YB
  4456 303B 8D E1 9C			sta SHINEREC.YB
  4457
  4458 				; optimize OK (service.pas), line = 784
  4459
  4460 303E A9 00			lda #$00
  4461 3040 8D E2 9C			sta SHINEREC.FRAME
  4462
  4463 				; optimize OK (service.pas), line = 785
  4464
  4465 3043 A9 01			lda #$01
  4466 3045 8D E4 9C			sta SHINEREC.ACTIVE
  4467
  4468 				; optimize OK (service.pas), line = 786
  4469
  4470 3048 AD 78 A0			lda YB
  4471 304B 0A				asl @
  4472 304C 0A				asl @
  4473 304D 0A				asl @
  4474 304E 0A				asl @
  4475 304F 18 6D 77 A0			add XB
  4476 3053 A8				tay
  4477 3054 B9 00 DB			lda adr.WALL,y
  4478 3057 8D E3 9C			sta SHINEREC.BLOCK
  4479
  4480 				; ------------------------------------------------------------
  4481
  4482 = A077			XB	= DATAORIGIN+$057C
  4483 = A078			YB	= DATAORIGIN+$057D
  4484
  4485 = A077			@VarData	= XB
  4486 = 0002			@VarDataSize	= 2
  4487
  4488 305A			@exit
  4489 					.ifdef @new
  4490 					lda <@VarData
  4491 					sta :ztmp
  4492 					lda >@VarData
  4493 					ldy #@VarDataSize-1
  4494 					jmp @FreeMem
  4495 					els
  4496 305A 60				rts						; ret
  4497 					eif
  4498 				.endl
  4499
  4500 305B			.local	CHECKSHINE					; PROCEDURE
  4501
  4502 				; optimize OK (service.pas), line = 792
  4503
  4504 305B AD E4 9C			lda SHINEREC.ACTIVE
  4505 305E C9 01			cmp #$01
  4506 3060 D0 03			jne l_08FA
  4507 3062 20 94 2E			jsr SHINE_BLOCK
  4508 3065			l_08FA
  4509
  4510 3065			@exit
  4511 					.ifdef @new
  4512 					lda <@VarData
  4513 					sta :ztmp
  4514 					lda >@VarData
  4515 					ldy #@VarDataSize-1
  4516 					jmp @FreeMem
  4517 					els
  4518 3065 60				rts						; ret
  4519 					eif
  4520 				.endl
  4521
  4522 3066			.local	RANDOM_LETTER_DROP				; FUNCTION
  4523
  4524 				; --- RepeatUntilProlog
  4525 3066			l_0903
  4526
  4527 				; optimize OK (service.pas), line = 800
  4528
  4529 3066 A9 64			lda #$64
  4530 3068 20 24 25			jsr SYSTEM.RANDOM.@010180000
  4531 306B AD 40 9B			lda SYSTEM.RANDOM.@010180000.RESULT
  4532 306E 8D 7B A0			sta RN
  4533 3071 A9 00			lda #$00
  4534 3073 8D 7C A0			sta RN+1
  4535
  4536 				; optimize OK (service.pas), line = 801
  4537
  4538 3076 A9 00			lda #$00
  4539 3078 8D 7D A0			sta SUM
  4540 307B 8D 7E A0			sta SUM+1
  4541
  4542 				; optimize OK (service.pas), line = 802
  4543
  4544 307E 8D 7F A0			sta LETTER
  4545 3081 8D 80 A0			sta LETTER+1
  4546
  4547 				; --- RepeatUntilProlog
  4548 3084			l_0911
  4549
  4550 				; optimize FAIL (0, service.pas), line = 807
  4551
  4552 3084 EE 7F A0			inc LETTER
  4553 3087 D0 03			sne
  4554 3089 EE 80 A0			inc LETTER+1
  4555
  4556 				; optimize OK (service.pas), line = 808
  4557
  4558 308C AC 7F A0			ldy LETTER
  4559 308F B9 AD 10			lda adr.LETTER_DIS,y
  4560 3092 18 6D 7D A0			add SUM
  4561 3096 8D 7D A0			sta SUM
  4562 3099 AD 7E A0			lda SUM+1
  4563 309C 69 00			adc #$00
  4564 309E 8D 7E A0			sta SUM+1
  4565
  4566 				; optimize OK (service.pas), line = 811
  4567
  4568 30A1 AD 7C A0			lda RN+1
  4569 30A4 CD 7E A0			cmp SUM+1
  4570 30A7 D0 06			bne @+
  4571 30A9 AD 7B A0			lda RN
  4572 30AC CD 7D A0			cmp SUM
  4573 				@
  4574 30AF B0 D3			jcs l_0911
  4575
  4576 				; optimize OK (service.pas), line = 815
  4577
  4578 30B1 AD 7F A0			lda LETTER
  4579 30B4 38 E9 01			sub #$01
  4580 30B7 85 9F			sta :STACKORIGIN+9
  4581 30B9 AD 80 A0			lda LETTER+1
  4582 30BC E9 00			sbc #$00
  4583 30BE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4584 30C0 A9 00			lda #$00
  4585 30C2 E9 00			sbc #$00
  4586 30C4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4587 30C6 A9 00			lda #$00
  4588 30C8 E9 00			sbc #$00
  4589 30CA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  4590 30CC AD F7 9C			lda LETT.LAST
  4591 30CF 85 A0			sta :STACKORIGIN+10
  4592 30D1 A0 00			ldy #$00
  4593 30D3 AD F8 9C			lda LETT.LAST+1
  4594 30D6 10 01			spl
  4595 30D8 88				dey
  4596 30D9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4597 30DB 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  4598 30DD 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  4599 30DF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  4600 30E1 C5 D0			cmp :STACKORIGIN+STACKWIDTH*3+10
  4601 30E3 D0 10			bne @+
  4602 30E5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  4603 30E7 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  4604 30E9 D0 0A			bne @+
  4605 30EB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4606 30ED C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4607 30EF D0 04			bne @+
  4608 30F1 A5 9F			lda :STACKORIGIN+9
  4609 30F3 C5 A0			cmp :STACKORIGIN+10
  4610 				@
  4611 30F5 D0 03 4C 66 30		jeq l_0903
  4612
  4613 				; optimize OK (service.pas), line = 817
  4614
  4615 30FA AD 7F A0			lda LETTER
  4616 30FD 38 E9 01			sub #$01
  4617 3100 8D 79 A0			sta RESULT
  4618 3103 AD 80 A0			lda LETTER+1
  4619 3106 E9 00			sbc #$00
  4620 3108 8D 7A A0			sta RESULT+1
  4621 310B			@exit
  4622
  4623 				; ------------------------------------------------------------
  4624
  4625 = A079			RESULT	= DATAORIGIN+$057E
  4626 = A07B			RN	= DATAORIGIN+$0580
  4627 = A07D			SUM	= DATAORIGIN+$0582
  4628 = A07F			LETTER	= DATAORIGIN+$0584
  4629
  4630 = A07B			@VarData	= RN
  4631 = 0006			@VarDataSize	= 6
  4632
  4633 310B 60				rts						; ret
  4634 				.endl
  4635
  4636 310C			.local	PUT_LETTER					; PROCEDURE
  4637
  4638 				; optimize OK (service.pas), line = 826
  4639
  4640 310C A9 00			lda #$00
  4641 310E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4642 3110 AD EB 9C			lda LETT.TYP+1
  4643 3113 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4644 3115 AD EA 9C			lda LETT.TYP
  4645 3118 0A				asl @
  4646 3119 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4647 311B 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4648 311D 0A				asl @
  4649 311E 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4650 3120 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4651 3122 85 9F			sta :STACKORIGIN+9
  4652 3124 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4653 3126 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4654 3128 A5 9F			lda :STACKORIGIN+9
  4655 312A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4656 312C AD EC 9C			lda LETT.FRAME
  4657 312F 85 A0			sta :STACKORIGIN+10
  4658 3131 A9 00			lda #$00
  4659 3133 06 A0			asl :STACKORIGIN+10
  4660 3135 2A				rol @
  4661 3136 06 A0			asl :STACKORIGIN+10
  4662 3138 2A				rol @
  4663 3139 06 A0			asl :STACKORIGIN+10
  4664 313B 2A				rol @
  4665 313C 06 A0			asl :STACKORIGIN+10
  4666 313E 2A				rol @
  4667 313F 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4668 3142 8D 82 A0			sta FL+1
  4669 3145 A5 A0			lda :STACKORIGIN+10
  4670 3147 8D 81 A0			sta FL
  4671
  4672 				; optimize OK (service.pas), line = 828
  4673
  4674 314A A9 00			lda #$00
  4675 314C 8D 85 A0			sta YL
  4676
  4677 314F			l_0961
  4678 				; --- ForToDoCondition
  4679 314F AD 85 A0			lda YL
  4680 3152 C9 08			cmp #$08
  4681 3154 90 03 4C F5 31		jcs l_096F
  4682
  4683 				; optimize OK (service.pas), line = 830
  4684
  4685 3159 85 9F			sta :STACKORIGIN+9
  4686 315B A9 00			lda #$00
  4687 315D 06 9F			asl :STACKORIGIN+9
  4688 315F 2A				rol @
  4689 3160 06 9F			asl :STACKORIGIN+9
  4690 3162 2A				rol @
  4691 3163 06 9F			asl :STACKORIGIN+9
  4692 3165 2A				rol @
  4693 3166 06 9F			asl :STACKORIGIN+9
  4694 3168 2A				rol @
  4695 3169 06 9F			asl :STACKORIGIN+9
  4696 316B 2A				rol @
  4697 316C 06 9F			asl :STACKORIGIN+9
  4698 316E 2A				rol @
  4699 316F 06 9F			asl :STACKORIGIN+9
  4700 3171 2A				rol @
  4701 3172 8D 84 A0			sta FW+1
  4702 3175 A5 9F			lda :STACKORIGIN+9
  4703 3177 8D 83 A0			sta FW
  4704
  4705 				; optimize OK (service.pas), line = 832
  4706
  4707 317A AD E9 9C			lda LETT.Y
  4708 317D 18 6D 85 A0			add YL
  4709 3181 A8				tay
  4710 3182 AD E8 9C			lda LETT.X
  4711 3185 18 79 00 C0			add adr.ROW,y
  4712 3189 8D 13 A0			sta BLITZERO.DST
  4713 318C A9 50			lda #$50
  4714 318E 79 FB C0			adc adr.ROW+251,y
  4715 3191 8D 14 A0			sta BLITZERO.DST+1
  4716 3194 A9 00			lda #$00
  4717 3196 69 00			adc #$00
  4718 3198 8D 15 A0			sta BLITZERO.DST+2
  4719 319B A9 00			lda #$00
  4720 319D 69 00			adc #$00
  4721 319F 8D 16 A0			sta BLITZERO.DST+3
  4722 31A2 AD 6F 9C			lda LETTERS.OFS
  4723 31A5 18 6D 83 A0			add FW
  4724 31A9 85 A1			sta :STACKORIGIN+11
  4725 31AB AD 70 9C			lda LETTERS.OFS+1
  4726 31AE 6D 84 A0			adc FW+1
  4727 31B1 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4728 31B3 AD 71 9C			lda LETTERS.OFS+2
  4729 31B6 69 00			adc #$00
  4730 31B8 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4731 31BA AD 72 9C			lda LETTERS.OFS+3
  4732 31BD 69 00			adc #$00
  4733 31BF 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4734 31C1 A5 A1			lda :STACKORIGIN+11
  4735 31C3 18 6D 81 A0			add FL
  4736 31C7 8D 0F A0			sta BLITZERO.SRC
  4737 31CA A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4738 31CC 6D 82 A0			adc FL+1
  4739 31CF 8D 10 A0			sta BLITZERO.SRC+1
  4740 31D2 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4741 31D4 69 00			adc #$00
  4742 31D6 8D 11 A0			sta BLITZERO.SRC+2
  4743 31D9 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4744 31DB 69 00			adc #$00
  4745 31DD 8D 12 A0			sta BLITZERO.SRC+3
  4746 31E0 A9 10			lda #$10
  4747 31E2 8D 17 A0			sta BLITZERO.SIZE
  4748 31E5 A9 00			lda #$00
  4749 31E7 8D 18 A0			sta BLITZERO.SIZE+1
  4750 31EA 20 8F 2B			jsr BLITZERO
  4751
  4752 				; --- ForToDoEpilog
  4753 31ED EE 85 A0			inc YL
  4754 31F0 F0 03 4C 4F 31		jne l_0961
  4755 31F5			l_096F
  4756
  4757 				; ------------------------------------------------------------
  4758
  4759 = A081			FL	= DATAORIGIN+$0586
  4760 = A083			FW	= DATAORIGIN+$0588
  4761 = A085			YL	= DATAORIGIN+$058A
  4762
  4763 = A081			@VarData	= FL
  4764 = 0005			@VarDataSize	= 5
  4765
  4766 31F5			@exit
  4767 					.ifdef @new
  4768 					lda <@VarData
  4769 					sta :ztmp
  4770 					lda >@VarData
  4771 					ldy #@VarDataSize-1
  4772 					jmp @FreeMem
  4773 					els
  4774 31F5 60				rts						; ret
  4775 					eif
  4776 				.endl
  4777
  4778 31F6			.local	REMOVE_LETTER					; PROCEDURE
  4779
  4780 				; optimize OK (service.pas), line = 844
  4781
  4782 31F6 A9 00			lda #$00
  4783 31F8 8D 88 A0			sta YL
  4784
  4785 31FB			l_09AD
  4786 				; --- ForToDoCondition
  4787 31FB AD 88 A0			lda YL
  4788 31FE C9 08			cmp #$08
  4789 3200 B0 6F			jcs l_09BB
  4790
  4791 				; optimize OK (service.pas), line = 846
  4792
  4793 3202 AD E9 9C			lda LETT.Y
  4794 3205 6D 88 A0			adc YL
  4795 3208 A8				tay
  4796 3209 AD E8 9C			lda LETT.X
  4797 320C 18 79 00 C0			add adr.ROW,y
  4798 3210 8D 86 A0			sta AD
  4799 3213 A9 00			lda #$00
  4800 3215 79 FB C0			adc adr.ROW+251,y
  4801 3218 8D 87 A0			sta AD+1
  4802
  4803 				; optimize OK (service.pas), line = 847
  4804
  4805 321B C9 FA			cmp #$FA
  4806 321D B0 4D			jcs l_09E0
  4807
  4808 				; optimize OK (service.pas), line = 850
  4809
  4810 321F AD 86 A0			lda AD
  4811 3222 8D 25 A0			sta BLITROW.DST
  4812 3225 A9 50			lda #$50
  4813 3227 18 6D 87 A0			add AD+1
  4814 322B 8D 26 A0			sta BLITROW.DST+1
  4815 322E A9 00			lda #$00
  4816 3230 69 00			adc #$00
  4817 3232 8D 27 A0			sta BLITROW.DST+2
  4818 3235 A9 00			lda #$00
  4819 3237 69 00			adc #$00
  4820 3239 8D 28 A0			sta BLITROW.DST+3
  4821 323C AD 0F 9C			lda PLAYSCREEN.OFS
  4822 323F 18 6D 86 A0			add AD
  4823 3243 8D 21 A0			sta BLITROW.SRC
  4824 3246 AD 10 9C			lda PLAYSCREEN.OFS+1
  4825 3249 6D 87 A0			adc AD+1
  4826 324C 8D 22 A0			sta BLITROW.SRC+1
  4827 324F AD 11 9C			lda PLAYSCREEN.OFS+2
  4828 3252 69 00			adc #$00
  4829 3254 8D 23 A0			sta BLITROW.SRC+2
  4830 3257 AD 12 9C			lda PLAYSCREEN.OFS+3
  4831 325A 69 00			adc #$00
  4832 325C 8D 24 A0			sta BLITROW.SRC+3
  4833 325F A9 10			lda #$10
  4834 3261 8D 29 A0			sta BLITROW.SIZE
  4835 3264 A9 00			lda #$00
  4836 3266 8D 2A A0			sta BLITROW.SIZE+1
  4837 3269 20 42 2C			jsr BLITROW
  4838 326C			l_09E0
  4839
  4840 				; --- ForToDoEpilog
  4841 326C EE 88 A0			inc YL
  4842 326F D0 8A			jne l_09AD
  4843 3271			l_09BB
  4844
  4845 				; ------------------------------------------------------------
  4846
  4847 = A086			AD	= DATAORIGIN+$058B
  4848 = A088			YL	= DATAORIGIN+$058D
  4849
  4850 = A086			@VarData	= AD
  4851 = 0003			@VarDataSize	= 3
  4852
  4853 3271			@exit
  4854 					.ifdef @new
  4855 					lda <@VarData
  4856 					sta :ztmp
  4857 					lda >@VarData
  4858 					ldy #@VarDataSize-1
  4859 					jmp @FreeMem
  4860 					els
  4861 3271 60				rts						; ret
  4862 					eif
  4863 				.endl
  4864
  4865 3272			.local	DISABLE_LETTER					; PROCEDURE
  4866
  4867 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 858
  4868
  4869 3272 20 F6 31			jsr REMOVE_LETTER
  4870
  4871 				; optimize OK (service.pas), line = 859
  4872
  4873 3275 A9 00			lda #$00
  4874 3277 8D EE 9C			sta LETT.ACTIVE
  4875
  4876 327A			@exit
  4877 					.ifdef @new
  4878 					lda <@VarData
  4879 					sta :ztmp
  4880 					lda >@VarData
  4881 					ldy #@VarDataSize-1
  4882 					jmp @FreeMem
  4883 					els
  4884 327A 60				rts						; ret
  4885 					eif
  4886 				.endl
  4887
  4888 327B			.local	START_LETTER					; PROCEDURE
  4889
  4890 				; optimize OK (service.pas), line = 865
  4891
  4892 327B AD EE 9C			lda LETT.ACTIVE
  4893 327E F0 03			jeq l_0A0F
  4894 3280 20 72 32			jsr DISABLE_LETTER
  4895 3283			l_0A0F
  4896
  4897 				; optimize OK (service.pas), line = 867
  4898
  4899 3283 AD 89 A0			lda XL
  4900 3286 8D E8 9C			sta LETT.X
  4901
  4902 				; optimize OK (service.pas), line = 868
  4903
  4904 3289 AD 8B A0			lda YL
  4905 328C 8D E9 9C			sta LETT.Y
  4906
  4907 				; optimize OK (service.pas), line = 869
  4908
  4909 328F AD 8D A0			lda LETTER
  4910 3292 8D EA 9C			sta LETT.TYP
  4911 3295 AD 8E A0			lda LETTER+1
  4912 3298 8D EB 9C			sta LETT.TYP+1
  4913
  4914 				; optimize OK (service.pas), line = 870
  4915
  4916 329B A9 00			lda #$00
  4917 329D 8D EC 9C			sta LETT.FRAME
  4918
  4919 				; optimize OK (service.pas), line = 871
  4920
  4921 32A0 8D ED 9C			sta LETT.SUBFRAME
  4922
  4923 				; optimize OK (service.pas), line = 872
  4924
  4925 32A3 A9 01			lda #$01
  4926 32A5 8D EE 9C			sta LETT.ACTIVE
  4927
  4928 				; ------------------------------------------------------------
  4929
  4930 = A089			XL	= DATAORIGIN+$058E
  4931 = A08B			YL	= DATAORIGIN+$0590
  4932 = A08D			LETTER	= DATAORIGIN+$0592
  4933
  4934 = A089			@VarData	= XL
  4935 = 0006			@VarDataSize	= 6
  4936
  4937 32A8			@exit
  4938 					.ifdef @new
  4939 					lda <@VarData
  4940 					sta :ztmp
  4941 					lda >@VarData
  4942 					ldy #@VarDataSize-1
  4943 					jmp @FreeMem
  4944 					els
  4945 32A8 60				rts						; ret
  4946 					eif
  4947 				.endl
  4948
  4949 32A9			.local	CHECK_LETTER					; PROCEDURE
  4950
  4951 				; optimize OK (service.pas), line = 878
  4952
  4953 32A9 AD EE 9C			lda LETT.ACTIVE
  4954 32AC D0 03 4C A8 33		jeq l_0A3E
  4955
  4956 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 880
  4957
  4958 32B1 20 F6 31			jsr REMOVE_LETTER
  4959
  4960 				; optimize FAIL (0, service.pas), line = 881
  4961
  4962 32B4 EE E9 9C			inc LETT.Y
  4963
  4964 				; optimize OK (service.pas), line = 882
  4965
  4966 32B7 AD E9 9C			lda LETT.Y
  4967 32BA C9 C8			cmp #$C8
  4968 32BC 90 03			jcc l_0A56
  4969 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 883
  4970 32BE 4C 9A 33			jmp l_0A61
  4971 32C1			l_0A56
  4972
  4973 				; optimize FAIL ('PUT_LETTER', service.pas), line = 885
  4974
  4975 32C1 20 0C 31			jsr PUT_LETTER
  4976
  4977 				; optimize FAIL (0, service.pas), line = 886
  4978
  4979 32C4 EE ED 9C			inc LETT.SUBFRAME
  4980
  4981 				; optimize OK (service.pas), line = 887
  4982
  4983 32C7 AD ED 9C			lda LETT.SUBFRAME
  4984 32CA C9 05			cmp #$05
  4985 32CC D0 08			jne l_0A78
  4986
  4987 				; optimize OK (service.pas), line = 889
  4988
  4989 32CE A9 00			lda #$00
  4990 32D0 8D ED 9C			sta LETT.SUBFRAME
  4991
  4992 				; optimize FAIL (0, service.pas), line = 890
  4993
  4994 32D3 EE EC 9C			inc LETT.FRAME
  4995 32D6			l_0A78
  4996
  4997 				; optimize OK (service.pas), line = 893
  4998
  4999 32D6 AD EC 9C			lda LETT.FRAME
  5000 32D9 C9 08			cmp #$08
  5001 32DB D0 05			jne l_0A95
  5002 32DD A9 00			lda #$00
  5003 32DF 8D EC 9C			sta LETT.FRAME
  5004 32E2			l_0A95
  5005
  5006 				; optimize OK (service.pas), line = 895
  5007
  5008 32E2 AD E8 9C			lda LETT.X
  5009 32E5 18 69 10			add #$10
  5010 32E8 85 A0			sta :STACKORIGIN+10
  5011 32EA A9 00			lda #$00
  5012 32EC 69 00			adc #$00
  5013 32EE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5014 32F0 A9 00			lda #$00
  5015 32F2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5016 32F4 D0 05			bne @+
  5017 32F6 AD 83 9C			lda VAUS.X
  5018 32F9 C5 A0			cmp :STACKORIGIN+10
  5019 				@
  5020 32FB 90 03 4C 9D 33		jcs l_0AEE
  5021 				@
  5022 3300 AD 83 9C			lda VAUS.X
  5023 3303 18 6D 8B 9C			add VAUS.WIDTH
  5024 3307 85 A0			sta :STACKORIGIN+10
  5025 3309 A9 00			lda #$00
  5026 330B 69 00			adc #$00
  5027 330D C9 00			cmp #$00
  5028 330F D0 05			bne @+
  5029 3311 A5 A0			lda :STACKORIGIN+10
  5030 3313 CD E8 9C			cmp LETT.X
  5031 				@
  5032 3316 B0 03 4C 9D 33		jcc l_0AEE
  5033 331B D0 03 4C 9D 33		jeq l_0AEE
  5034 				@
  5035 3320 AD E9 9C			lda LETT.Y
  5036 3323 18 69 08			add #$08
  5037 3326 85 A1			sta :STACKORIGIN+11
  5038 3328 A9 00			lda #$00
  5039 332A 69 00			adc #$00
  5040 332C 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5041 332E A9 00			lda #$00
  5042 3330 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5043 3332 D0 05			bne @+
  5044 3334 AD 84 9C			lda VAUS.Y
  5045 3337 C5 A1			cmp :STACKORIGIN+11
  5046 				@
  5047 3339 B0 62			jcs l_0AEE
  5048 				@
  5049 333B AD 84 9C			lda VAUS.Y
  5050 333E 18 6D 8C 9C			add VAUS.HEIGHT
  5051 3342 85 A0			sta :STACKORIGIN+10
  5052 3344 A9 00			lda #$00
  5053 3346 69 00			adc #$00
  5054 3348 C9 00			cmp #$00
  5055 334A D0 05			bne @+
  5056 334C A5 A0			lda :STACKORIGIN+10
  5057 334E CD E9 9C			cmp LETT.Y
  5058 				@
  5059 3351 90 4A			jcc l_0AEE
  5060 3353 F0 48			jeq l_0AEE
  5061 				@
  5062
  5063 				; optimize OK (service.pas), line = 898
  5064
  5065 3355 A9 64			lda #$64
  5066 3357 8D F0 9B			sta BALL_BLOCK_SOUND.A
  5067 335A A9 00			lda #$00
  5068 335C 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
  5069 335F A9 0A			lda #$0A
  5070 3361 8D F2 9B			sta BALL_BLOCK_SOUND.B
  5071 3364 A9 00			lda #$00
  5072 3366 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
  5073 3369 20 5C 2A			jsr BALL_BLOCK_SOUND
  5074
  5075 				; optimize OK (service.pas), line = 899
  5076
  5077 336C AC EA 9C			ldy LETT.TYP
  5078 336F C8				iny
  5079 3370 8C 8F 9C			sty VAUS.LETTER
  5080
  5081 				; optimize OK (service.pas), line = 900
  5082
  5083 3373 AD DF 9C			lda CUR_PLAYER
  5084 3376 0A				asl @
  5085 3377 0A				asl @
  5086 3378 A8				tay
  5087 3379 B9 C4 9C			lda adr.SCORE.PLAYER,y
  5088 337C 18 69 E8			add #$E8
  5089 337F 99 C4 9C			sta adr.SCORE.PLAYER,y
  5090 3382 B9 C5 9C			lda adr.SCORE.PLAYER+1,y
  5091 3385 69 03			adc #$03
  5092 3387 99 C5 9C			sta adr.SCORE.PLAYER+1,y
  5093 338A B9 C6 9C			lda adr.SCORE.PLAYER+2,y
  5094 338D 69 00			adc #$00
  5095 338F 99 C6 9C			sta adr.SCORE.PLAYER+2,y
  5096 3392 B9 C7 9C			lda adr.SCORE.PLAYER+3,y
  5097 3395 69 00			adc #$00
  5098 3397 99 C7 9C			sta adr.SCORE.PLAYER+3,y
  5099 339A			l_0A61
  5100
  5101 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 901
  5102
  5103 339A 20 72 32			jsr DISABLE_LETTER
  5104 339D			l_0AEE
  5105
  5106 				; optimize OK (service.pas), line = 905
  5107
  5108 339D A9 00			lda #$00
  5109 339F 8D EF 9C			sta LETT.INCOMING
  5110 33A2 8D F0 9C			sta LETT.INCOMING+1
  5111 33A5 4C DF 33			jmp l_0B0F
  5112 33A8			l_0A3E
  5113
  5114 				; optimize OK (service.pas), line = 907
  5115
  5116 33A8 AD EF 9C			lda LETT.INCOMING
  5117 33AB C9 E9			cmp #$E9
  5118 33AD AD F0 9C			lda LETT.INCOMING+1
  5119 33B0 E9 03			sbc #$03
  5120 33B2 50 02			svc
  5121 33B4 49 80			eor #$80
  5122 33B6 30 27			jmi l_0B20
  5123
  5124 				; optimize OK (service.pas), line = 908
  5125
  5126 33B8 AD F1 9C			lda LETT.NEXTX
  5127 33BB 8D 89 A0			sta START_LETTER.XL
  5128 33BE AD F2 9C			lda LETT.NEXTX+1
  5129 33C1 8D 8A A0			sta START_LETTER.XL+1
  5130 33C4 AD F3 9C			lda LETT.NEXTY
  5131 33C7 8D 8B A0			sta START_LETTER.YL
  5132 33CA AD F4 9C			lda LETT.NEXTY+1
  5133 33CD 8D 8C A0			sta START_LETTER.YL+1
  5134 33D0 AD F5 9C			lda LETT.NEXTTYPE
  5135 33D3 8D 8D A0			sta START_LETTER.LETTER
  5136 33D6 AD F6 9C			lda LETT.NEXTTYPE+1
  5137 33D9 8D 8E A0			sta START_LETTER.LETTER+1
  5138 33DC 20 7B 32			jsr START_LETTER
  5139 33DF			l_0B0F
  5140 33DF			l_0B20
  5141
  5142 33DF			@exit
  5143 					.ifdef @new
  5144 					lda <@VarData
  5145 					sta :ztmp
  5146 					lda >@VarData
  5147 					ldy #@VarDataSize-1
  5148 					jmp @FreeMem
  5149 					els
  5150 33DF 60				rts						; ret
  5151 					eif
  5152 				.endl
  5153
  5154 33E0			.local	SHOWBTMPICTURE					; PROCEDURE
  5155
  5156 				; ------------------------------------------------------------
  5157
  5158 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5159 				; as Pointer
  5160 33E0 B5 96			lda :STACKORIGIN,x
  5161 33E2 85 84			sta :bp2
  5162 33E4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5163 33E6 85 85			sta :bp2+1
  5164 33E8 A0 07			ldy #$07
  5165 33EA B1 84 99 8F A0 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5166 33F2 CA				dex
  5167 33F3			@main
  5168
  5169 				; optimize OK (service.pas), line = 918
  5170
  5171 33F3 AD 93 A0			lda BTM.OFS
  5172 33F6 8D 04 A0			sta BLITBOX.SRC
  5173 33F9 AD 94 A0			lda BTM.OFS+1
  5174 33FC 8D 05 A0			sta BLITBOX.SRC+1
  5175 33FF AD 95 A0			lda BTM.OFS+2
  5176 3402 8D 06 A0			sta BLITBOX.SRC+2
  5177 3405 AD 96 A0			lda BTM.OFS+3
  5178 3408 8D 07 A0			sta BLITBOX.SRC+3
  5179 340B A9 00			lda #$00
  5180 340D 8D 08 A0			sta BLITBOX.DST
  5181 3410 A9 50			lda #$50
  5182 3412 8D 09 A0			sta BLITBOX.DST+1
  5183 3415 A9 00			lda #$00
  5184 3417 8D 0A A0			sta BLITBOX.DST+2
  5185 341A 8D 0B A0			sta BLITBOX.DST+3
  5186 341D AD 8F A0			lda BTM.WIDTH
  5187 3420 8D 0C A0			sta BLITBOX.W
  5188 3423 AD 90 A0			lda BTM.WIDTH+1
  5189 3426 8D 0D A0			sta BLITBOX.W+1
  5190 3429 AD 91 A0			lda BTM.HEIGHT
  5191 342C 8D 0E A0			sta BLITBOX.H
  5192 342F 20 FE 2A			jsr BLITBOX
  5193
  5194 				; ------------------------------------------------------------
  5195
  5196 = A08F			adr.BTM	= DATAORIGIN+$0594	; [8] RECORD
  5197 3432			.var BTM	= adr.BTM .word
  5198 = A08F			BTM.WIDTH	= DATAORIGIN+$0594
  5199 = A091			BTM.HEIGHT	= DATAORIGIN+$0596
  5200 = A093			BTM.OFS	= DATAORIGIN+$0598
  5201 = A097			X	= DATAORIGIN+$059C
  5202 = A099			Y	= DATAORIGIN+$059E
  5203 = A09B			OFST	= DATAORIGIN+$05A0
  5204
  5205 = A08F			@VarData	= BTM.WIDTH
  5206 = 000E			@VarDataSize	= 14
  5207
  5208 3432			@exit
  5209 					.ifdef @new
  5210 					lda <@VarData
  5211 					sta :ztmp
  5212 					lda >@VarData
  5213 					ldy #@VarDataSize-1
  5214 					jmp @FreeMem
  5215 					els
  5216 3432 60				rts						; ret
  5217 					eif
  5218 = 3433 8F A0		BTM
  5218 				.endl
  5219
  5220 3435			.local	SETPALETTE					; PROCEDURE
  5221
  5222 				; ------------------------------------------------------------
  5223
  5224 = A09D			BTM	= DATAORIGIN+$05A2
  5225 = 9AFB			BTM.WIDTH	= DATAORIGIN+$0000
  5226 = 9AFD			BTM.HEIGHT	= DATAORIGIN+$0002
  5227 = 9AFF			BTM.OFS	= DATAORIGIN+$0004
  5228
  5229 = A09D			@VarData	= BTM
  5230 = 0002			@VarDataSize	= 2
  5231
  5232 3435			@exit
  5233 					.ifdef @new
  5234 					lda <@VarData
  5235 					sta :ztmp
  5236 					lda >@VarData
  5237 					ldy #@VarDataSize-1
  5238 					jmp @FreeMem
  5239 					els
  5240 3435 60				rts						; ret
  5241 					eif
  5242 				.endl
  5243
  5244 3436			.local	PLACE_BALL					; PROCEDURE
  5245
  5246 				; optimize OK (service.pas), line = 1013
  5247
  5248 3436 A9 00			lda #$00
  5249 3438 8D A5 A0			sta YP
  5250
  5251 343B			l_0B49
  5252 				; --- ForToDoCondition
  5253 343B AD A5 A0			lda YP
  5254 343E C9 05			cmp #$05
  5255 3440 90 03 4C FC 34		jcs l_0B57
  5256
  5257 				; optimize OK (service.pas), line = 1015
  5258
  5259 3445 AC A1 A0 84 84 AC + 	mwy BALL :bp2
  5260 344F A0 00			ldy #BALL.X-DATAORIGIN
  5261 3451 B1 84			lda (:bp2),y
  5262 3453 38 E9 03			sub #$03
  5263 3456 85 9F			sta :STACKORIGIN+9
  5264 3458 C8				iny
  5265 3459 B1 84			lda (:bp2),y
  5266 345B E9 00			sbc #$00
  5267 345D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5268 345F AD A5 A0			lda YP
  5269 3462 38 E9 03			sub #$03
  5270 3465 85 A0			sta :STACKORIGIN+10
  5271 3467 A9 00			lda #$00
  5272 3469 E9 00			sbc #$00
  5273 346B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5274 346D A0 02			ldy #BALL.Y-DATAORIGIN
  5275 346F A5 A0			lda :STACKORIGIN+10
  5276 3471 18 71 84			add (:bp2),y
  5277 3474 85 A0			sta :STACKORIGIN+10
  5278 3476 C8				iny
  5279 3477 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5280 3479 71 84			adc (:bp2),y
  5281 347B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5282 347D A4 A0			ldy :STACKORIGIN+10
  5283 347F A5 9F			lda :STACKORIGIN+9
  5284 3481 18 79 00 C0			add adr.ROW,y
  5285 3485 8D A6 A0			sta ADR
  5286 3488 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5287 348A 79 FB C0			adc adr.ROW+251,y
  5288 348D 8D A7 A0			sta ADR+1
  5289
  5290 				; optimize OK (service.pas), line = 1018
  5291
  5292 3490 AD A6 A0			lda ADR
  5293 3493 8D 13 A0			sta BLITZERO.DST
  5294 3496 A9 50			lda #$50
  5295 3498 18 6D A7 A0			add ADR+1
  5296 349C 8D 14 A0			sta BLITZERO.DST+1
  5297 349F A9 00			lda #$00
  5298 34A1 69 00			adc #$00
  5299 34A3 8D 15 A0			sta BLITZERO.DST+2
  5300 34A6 A9 00			lda #$00
  5301 34A8 69 00			adc #$00
  5302 34AA 8D 16 A0			sta BLITZERO.DST+3
  5303 34AD A9 00			lda #$00
  5304 34AF 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5305 34B1 AD A5 A0			lda YP
  5306 34B4 0A				asl @
  5307 34B5 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5308 34B7 0A				asl @
  5309 34B8 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5310 34BA 18 6D A5 A0			add YP
  5311 34BE 85 A2			sta :STACKORIGIN+12
  5312 34C0 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  5313 34C2 69 00			adc #$00
  5314 34C4 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5315 34C6 AD 07 9C			lda BALLDATA.OFS
  5316 34C9 18 65 A2			add :STACKORIGIN+12
  5317 34CC 8D 0F A0			sta BLITZERO.SRC
  5318 34CF AD 08 9C			lda BALLDATA.OFS+1
  5319 34D2 65 B2			adc :STACKORIGIN+STACKWIDTH+12
  5320 34D4 8D 10 A0			sta BLITZERO.SRC+1
  5321 34D7 AD 09 9C			lda BALLDATA.OFS+2
  5322 34DA 69 00			adc #$00
  5323 34DC 8D 11 A0			sta BLITZERO.SRC+2
  5324 34DF AD 0A 9C			lda BALLDATA.OFS+3
  5325 34E2 69 00			adc #$00
  5326 34E4 8D 12 A0			sta BLITZERO.SRC+3
  5327 34E7 A9 05			lda #$05
  5328 34E9 8D 17 A0			sta BLITZERO.SIZE
  5329 34EC A9 00			lda #$00
  5330 34EE 8D 18 A0			sta BLITZERO.SIZE+1
  5331 34F1 20 8F 2B			jsr BLITZERO
  5332
  5333 				; --- ForToDoEpilog
  5334 34F4 EE A5 A0			inc YP
  5335 34F7 F0 03 4C 3B 34		jne l_0B49
  5336 34FC			l_0B57
  5337
  5338 				; ------------------------------------------------------------
  5339
  5340 = A0A1			BALL	= DATAORIGIN+$05A6
  5341 = 9AFB			BALL.X	= DATAORIGIN+$0000
  5342 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  5343 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  5344 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  5345 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  5346 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  5347 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  5348 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  5349 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  5350 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  5351 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  5352 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  5353 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  5354 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  5355 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  5356 = 9B15			BALL.STM	= DATAORIGIN+$001A
  5357 = A0A5			YP	= DATAORIGIN+$05AA
  5358 = A0A6			ADR	= DATAORIGIN+$05AB
  5359
  5360 = A0A1			@VarData	= BALL
  5361 = 0005			@VarDataSize	= 5
  5362
  5363 34FC			@exit
  5364 					.ifdef @new
  5365 					lda <@VarData
  5366 					sta :ztmp
  5367 					lda >@VarData
  5368 					ldy #@VarDataSize-1
  5369 					jmp @FreeMem
  5370 					els
  5371 34FC 60				rts						; ret
  5372 					eif
  5373 				.endl
  5374
  5375 34FD			.local	REMOVE_BALL					; PROCEDURE
  5376
  5377 				; optimize OK (service.pas), line = 1032
  5378
  5379 34FD A9 00			lda #$00
  5380 34FF 8D AC A0			sta YP
  5381
  5382 3502			l_0B96
  5383 				; --- ForToDoCondition
  5384 3502 AD AC A0			lda YP
  5385 3505 C9 05			cmp #$05
  5386 3507 90 03 4C B8 35		jcs l_0BA4
  5387
  5388 				; optimize OK (service.pas), line = 1034
  5389
  5390 350C AC A8 A0 84 84 AC + 	mwy BALL :bp2
  5391 3516 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5392 3518 B1 84			lda (:bp2),y
  5393 351A 38 E9 03			sub #$03
  5394 351D 85 9F			sta :STACKORIGIN+9
  5395 351F C8				iny
  5396 3520 B1 84			lda (:bp2),y
  5397 3522 E9 00			sbc #$00
  5398 3524 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5399 3526 AD AC A0			lda YP
  5400 3529 38 E9 03			sub #$03
  5401 352C 85 A0			sta :STACKORIGIN+10
  5402 352E A9 00			lda #$00
  5403 3530 E9 00			sbc #$00
  5404 3532 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5405 3534 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5406 3536 A5 A0			lda :STACKORIGIN+10
  5407 3538 18 71 84			add (:bp2),y
  5408 353B 85 A0			sta :STACKORIGIN+10
  5409 353D C8				iny
  5410 353E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5411 3540 71 84			adc (:bp2),y
  5412 3542 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5413 3544 A4 A0			ldy :STACKORIGIN+10
  5414 3546 A5 9F			lda :STACKORIGIN+9
  5415 3548 18 79 00 C0			add adr.ROW,y
  5416 354C 8D AD A0			sta TEMP
  5417 354F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5418 3551 79 FB C0			adc adr.ROW+251,y
  5419 3554 8D AE A0			sta TEMP+1
  5420
  5421 				; optimize OK (service.pas), line = 1036
  5422
  5423 3557 0D AD A0			ora TEMP
  5424 355A F0 54			jeq l_0BDA
  5425 355C AD AE A0			lda TEMP+1
  5426 355F C9 FA			cmp #$FA
  5427 3561 B0 4D			jcs l_0BDA
  5428
  5429 				; optimize OK (service.pas), line = 1039
  5430
  5431 3563 AD AD A0			lda TEMP
  5432 3566 8D 25 A0			sta BLITROW.DST
  5433 3569 A9 50			lda #$50
  5434 356B 18 6D AE A0			add TEMP+1
  5435 356F 8D 26 A0			sta BLITROW.DST+1
  5436 3572 A9 00			lda #$00
  5437 3574 69 00			adc #$00
  5438 3576 8D 27 A0			sta BLITROW.DST+2
  5439 3579 A9 00			lda #$00
  5440 357B 69 00			adc #$00
  5441 357D 8D 28 A0			sta BLITROW.DST+3
  5442 3580 AD 0F 9C			lda PLAYSCREEN.OFS
  5443 3583 18 6D AD A0			add TEMP
  5444 3587 8D 21 A0			sta BLITROW.SRC
  5445 358A AD 10 9C			lda PLAYSCREEN.OFS+1
  5446 358D 6D AE A0			adc TEMP+1
  5447 3590 8D 22 A0			sta BLITROW.SRC+1
  5448 3593 AD 11 9C			lda PLAYSCREEN.OFS+2
  5449 3596 69 00			adc #$00
  5450 3598 8D 23 A0			sta BLITROW.SRC+2
  5451 359B AD 12 9C			lda PLAYSCREEN.OFS+3
  5452 359E 69 00			adc #$00
  5453 35A0 8D 24 A0			sta BLITROW.SRC+3
  5454 35A3 A9 05			lda #$05
  5455 35A5 8D 29 A0			sta BLITROW.SIZE
  5456 35A8 A9 00			lda #$00
  5457 35AA 8D 2A A0			sta BLITROW.SIZE+1
  5458 35AD 20 42 2C			jsr BLITROW
  5459 35B0			l_0BDA
  5460
  5461 				; --- ForToDoEpilog
  5462 35B0 EE AC A0			inc YP
  5463 35B3 F0 03 4C 02 35		jne l_0B96
  5464 35B8			l_0BA4
  5465
  5466 				; ------------------------------------------------------------
  5467
  5468 = A0A8			BALL	= DATAORIGIN+$05AD
  5469 = 9AFB			BALL.X	= DATAORIGIN+$0000
  5470 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  5471 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  5472 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  5473 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  5474 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  5475 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  5476 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  5477 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  5478 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  5479 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  5480 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  5481 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  5482 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  5483 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  5484 = 9B15			BALL.STM	= DATAORIGIN+$001A
  5485 = A0AC			YP	= DATAORIGIN+$05B1
  5486 = A0AD			TEMP	= DATAORIGIN+$05B2
  5487
  5488 = A0A8			@VarData	= BALL
  5489 = 0005			@VarDataSize	= 5
  5490
  5491 35B8			@exit
  5492 					.ifdef @new
  5493 					lda <@VarData
  5494 					sta :ztmp
  5495 					lda >@VarData
  5496 					ldy #@VarDataSize-1
  5497 					jmp @FreeMem
  5498 					els
  5499 35B8 60				rts						; ret
  5500 					eif
  5501 				.endl
  5502
  5503 35B9			.local	WAIT_VBL					; PROCEDURE
  5504
  5505 35B9			@exit
  5506 					.ifdef @new
  5507 					lda <@VarData
  5508 					sta :ztmp
  5509 					lda >@VarData
  5510 					ldy #@VarDataSize-1
  5511 					jmp @FreeMem
  5512 					els
  5513 35B9 60				rts						; ret
  5514 					eif
  5515 				.endl
  5516
  5517 35BA			.local	SET_BALL					; PROCEDURE
  5518
  5519 				; optimize OK (service.pas), line = 1086
  5520
  5521 35BA AC AF A0 84 84 AC + 	mwy BALL :bp2
  5522 35C4 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5523 35C6 B1 84			lda (:bp2),y
  5524 35C8 85 9F			sta :STACKORIGIN+9
  5525 35CA C8				iny
  5526 35CB B1 84			lda (:bp2),y
  5527 35CD A0 01			ldy #1
  5528 35CF C9 FF			cmp #$FF
  5529 35D1 D0 04			bne @+
  5530 35D3 A5 9F			lda :STACKORIGIN+9
  5531 35D5 C9 FF			cmp #$FF
  5532 				@
  5533 35D7 D0 01			bne @+
  5534 35D9 88				dey
  5535 				@
  5536 35DA 84 9F			sty :STACKORIGIN+9
  5537 35DC A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5538 35DE B1 84			lda (:bp2),y
  5539 35E0 85 A0			sta :STACKORIGIN+10
  5540 35E2 C8				iny
  5541 35E3 B1 84			lda (:bp2),y
  5542 35E5 A0 01			ldy #1
  5543 35E7 C9 FF			cmp #$FF
  5544 35E9 D0 04			bne @+
  5545 35EB A5 A0			lda :STACKORIGIN+10
  5546 35ED C9 FF			cmp #$FF
  5547 				@
  5548 35EF D0 01			bne @+
  5549 35F1 88				dey
  5550 				@
  5551 35F2 98				tya
  5552 35F3 25 9F			and :STACKORIGIN+9
  5553 35F5 85 9F			sta :STACKORIGIN+9
  5554 35F7 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5555 35F9 B1 84			lda (:bp2),y
  5556 35FB 85 A0			sta :STACKORIGIN+10
  5557 35FD C8				iny
  5558 35FE B1 84			lda (:bp2),y
  5559 3600 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5560 3602 A0 00			ldy #BALL.X-DATAORIGIN
  5561 3604 B1 84			lda (:bp2),y
  5562 3606 85 A1			sta :STACKORIGIN+11
  5563 3608 C8				iny
  5564 3609 B1 84			lda (:bp2),y
  5565 360B 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5566 360D A0 01			ldy #1
  5567 360F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5568 3611 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5569 3613 D0 04			bne @+
  5570 3615 A5 A0			lda :STACKORIGIN+10
  5571 3617 C5 A1			cmp :STACKORIGIN+11
  5572 				@
  5573 3619 D0 01			bne @+
  5574 361B 88				dey
  5575 				@
  5576 361C 84 A0			sty :STACKORIGIN+10
  5577 361E A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5578 3620 B1 84			lda (:bp2),y
  5579 3622 85 A1			sta :STACKORIGIN+11
  5580 3624 C8				iny
  5581 3625 B1 84			lda (:bp2),y
  5582 3627 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5583 3629 A0 02			ldy #BALL.Y-DATAORIGIN
  5584 362B B1 84			lda (:bp2),y
  5585 362D 85 A2			sta :STACKORIGIN+12
  5586 362F C8				iny
  5587 3630 B1 84			lda (:bp2),y
  5588 3632 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5589 3634 A0 01			ldy #1
  5590 3636 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  5591 3638 C5 B2			cmp :STACKORIGIN+STACKWIDTH+12
  5592 363A D0 04			bne @+
  5593 363C A5 A1			lda :STACKORIGIN+11
  5594 363E C5 A2			cmp :STACKORIGIN+12
  5595 				@
  5596 3640 D0 01			bne @+
  5597 3642 88				dey
  5598 				@
  5599 3643 98				tya
  5600 3644 05 A0			ora :STACKORIGIN+10
  5601 3646 25 9F			and :STACKORIGIN+9
  5602 3648 F0 0F			jeq l_0C2C
  5603
  5604 				; optimize OK (service.pas), line = 1088
  5605
  5606 364A AD AF A0			lda BALL
  5607 364D 8D A8 A0			sta REMOVE_BALL.BALL
  5608 3650 AD B0 A0			lda BALL+1
  5609 3653 8D A9 A0			sta REMOVE_BALL.BALL+1
  5610 3656 20 FD 34			jsr REMOVE_BALL
  5611 3659			l_0C2C
  5612
  5613 				; optimize OK (service.pas), line = 1090
  5614
  5615 3659 AD AF A0			lda BALL
  5616 365C 8D A1 A0			sta PLACE_BALL.BALL
  5617 365F AD B0 A0			lda BALL+1
  5618 3662 8D A2 A0			sta PLACE_BALL.BALL+1
  5619 3665 20 36 34			jsr PLACE_BALL
  5620
  5621 				; optimize OK (service.pas), line = 1092
  5622
  5623 3668 AC AF A0 84 84 AC + 	mwy BALL :bp2
  5624 3672 A0 00			ldy #BALL.X-DATAORIGIN
  5625 3674 B1 84			lda (:bp2),y
  5626 3676 85 9F			sta :STACKORIGIN+9
  5627 3678 C8				iny
  5628 3679 B1 84			lda (:bp2),y
  5629 367B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5630 367D A0 08			ldy #BALL.OLDX-DATAORIGIN
  5631 367F A5 9F			lda :STACKORIGIN+9
  5632 3681 91 84			sta (:bp2),y
  5633 3683 C8				iny
  5634 3684 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5635 3686 91 84			sta (:bp2),y
  5636
  5637 				; optimize OK (service.pas), line = 1093
  5638
  5639 3688 A0 02			ldy #BALL.Y-DATAORIGIN
  5640 368A B1 84			lda (:bp2),y
  5641 368C 85 9F			sta :STACKORIGIN+9
  5642 368E C8				iny
  5643 368F B1 84			lda (:bp2),y
  5644 3691 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5645 3693 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5646 3695 A5 9F			lda :STACKORIGIN+9
  5647 3697 91 84			sta (:bp2),y
  5648 3699 C8				iny
  5649 369A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5650 369C 91 84			sta (:bp2),y
  5651
  5652 				; ------------------------------------------------------------
  5653
  5654 = A0AF			BALL	= DATAORIGIN+$05B4
  5655 = 9AFB			BALL.X	= DATAORIGIN+$0000
  5656 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  5657 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  5658 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  5659 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  5660 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  5661 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  5662 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  5663 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  5664 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  5665 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  5666 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  5667 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  5668 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  5669 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  5670 = 9B15			BALL.STM	= DATAORIGIN+$001A
  5671
  5672 = A0AF			@VarData	= BALL
  5673 = 0002			@VarDataSize	= 2
  5674
  5675 369E			@exit
  5676 					.ifdef @new
  5677 					lda <@VarData
  5678 					sta :ztmp
  5679 					lda >@VarData
  5680 					ldy #@VarDataSize-1
  5681 					jmp @FreeMem
  5682 					els
  5683 369E 60				rts						; ret
  5684 					eif
  5685 				.endl
  5686
  5687 369F			.local	SET_BALL_SPEED					; PROCEDURE
  5688
  5689 				; optimize OK (service.pas), line = 1103
  5690
  5691 369F AC B3 A0 84 84 AC + 	mwy BALL :bp2
  5692 36A9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5693 36AB B1 84			lda (:bp2),y
  5694 36AD 8D B9 A0			sta SX
  5695 36B0 C8				iny
  5696 36B1 B1 84			lda (:bp2),y
  5697 36B3 8D BA A0			sta SX+1
  5698
  5699 				; optimize OK (service.pas), line = 1104
  5700
  5701 36B6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5702 36B8 B1 84			lda (:bp2),y
  5703 36BA 8D BB A0			sta SY
  5704 36BD C8				iny
  5705 36BE B1 84			lda (:bp2),y
  5706 36C0 8D BC A0			sta SY+1
  5707
  5708 				; optimize OK (service.pas), line = 1106
  5709
  5710 36C3 A9 F4			lda #$F4
  5711 36C5 8D B7 A0			sta SPEED
  5712 36C8 A9 01			lda #$01
  5713 36CA 8D B8 A0			sta SPEED+1
  5714
  5715 				; optimize FAIL (1, service.pas), line = 1108
  5716
  5717 36CD E8				inx
  5718 36CE AD B7 A0 95 96		mva SPEED :STACKORIGIN,x
  5719 36D3 AD B8 A0 95 A6		mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
  5720 36D8 20 36 11			jsr @expandToCARD.SMALL
  5721 36DB B5 96			lda :STACKORIGIN,x
  5722 36DD 85 8E			sta :FPMAN0
  5723 36DF B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5724 36E1 85 8F			sta :FPMAN1
  5725 36E3 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5726 36E5 85 90			sta :FPMAN2
  5727 36E7 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5728 36E9 85 91			sta :FPMAN3
  5729 36EB 20 3B 19			jsr @I2F
  5730 36EE A5 8E			lda :FPMAN0
  5731 36F0 95 96			sta :STACKORIGIN,x
  5732 36F2 A5 8F			lda :FPMAN1
  5733 36F4 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5734 36F6 A5 90			lda :FPMAN2
  5735 36F8 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5736 36FA A5 91			lda :FPMAN3
  5737 36FC 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5738 36FE AD B9 A0			lda SX
  5739 3701 85 8E			sta :ecx
  5740 3703 85 92			sta :ztmp8
  5741 3705 AD BA A0			lda SX+1
  5742 3708 85 8F			sta :ecx+1
  5743 370A 85 93			sta :ztmp9
  5744 370C AD B9 A0			lda SX
  5745 370F 85 86			sta :eax
  5746 3711 85 94			sta :ztmp10
  5747 3713 AD BA A0			lda SX+1
  5748 3716 85 87			sta :eax+1
  5749 3718 85 95			sta :ztmp11
  5750 					.ifdef fmulinit
  5751 					fmulu_16
  5752 					els
  5753 371A 20 23 13			imulCX
  5754 					eif
  5755 371D A5 95			lda :ztmp11
  5756 371F 10 0D			bpl @+
  5757 3721 A5 88			lda :eax+2
  5758 3723 38 E5 92			sub :ztmp8
  5759 3726 85 88			sta :eax+2
  5760 3728 A5 89			lda :eax+3
  5761 372A E5 93			sbc :ztmp9
  5762 372C 85 89			sta :eax+3
  5763 				@
  5764 372E A5 93			lda :ztmp9
  5765 3730 10 0D			bpl @+
  5766 3732 A5 88			lda :eax+2
  5767 3734 38 E5 94			sub :ztmp10
  5768 3737 85 88			sta :eax+2
  5769 3739 A5 89			lda :eax+3
  5770 373B E5 95			sbc :ztmp11
  5771 373D 85 89			sta :eax+3
  5772 				@
  5773 373F A5 86			lda :eax
  5774 3741 85 9F			sta :STACKORIGIN+9
  5775 3743 A5 87			lda :eax+1
  5776 3745 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5777 3747 A5 88			lda :eax+2
  5778 3749 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5779 374B A5 89			lda :eax+3
  5780 374D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5781 374F AD BB A0			lda SY
  5782 3752 85 8E			sta :ecx
  5783 3754 85 92			sta :ztmp8
  5784 3756 AD BC A0			lda SY+1
  5785 3759 85 8F			sta :ecx+1
  5786 375B 85 93			sta :ztmp9
  5787 375D AD BB A0			lda SY
  5788 3760 85 86			sta :eax
  5789 3762 85 94			sta :ztmp10
  5790 3764 AD BC A0			lda SY+1
  5791 3767 85 87			sta :eax+1
  5792 3769 85 95			sta :ztmp11
  5793 					.ifdef fmulinit
  5794 					fmulu_16
  5795 					els
  5796 376B 20 23 13			imulCX
  5797 					eif
  5798 376E A5 95			lda :ztmp11
  5799 3770 10 0D			bpl @+
  5800 3772 A5 88			lda :eax+2
  5801 3774 38 E5 92			sub :ztmp8
  5802 3777 85 88			sta :eax+2
  5803 3779 A5 89			lda :eax+3
  5804 377B E5 93			sbc :ztmp9
  5805 377D 85 89			sta :eax+3
  5806 				@
  5807 377F A5 93			lda :ztmp9
  5808 3781 10 0D			bpl @+
  5809 3783 A5 88			lda :eax+2
  5810 3785 38 E5 94			sub :ztmp10
  5811 3788 85 88			sta :eax+2
  5812 378A A5 89			lda :eax+3
  5813 378C E5 95			sbc :ztmp11
  5814 378E 85 89			sta :eax+3
  5815 				@
  5816 3790 A5 9F			lda :STACKORIGIN+9
  5817 3792 18 65 86			add :eax
  5818 3795 8D 06 9B			sta SYSTEM.SQRT.@010185000.X
  5819 3798 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5820 379A 65 87			adc :eax+1
  5821 379C 8D 07 9B			sta SYSTEM.SQRT.@010185000.X+1
  5822 379F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5823 37A1 65 88			adc :eax+2
  5824 37A3 8D 08 9B			sta SYSTEM.SQRT.@010185000.X+2
  5825 37A6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5826 37A8 65 89			adc :eax+3
  5827 37AA 8D 09 9B			sta SYSTEM.SQRT.@010185000.X+3
  5828 37AD 20 C0 1C			jsr SYSTEM.SQRT.@010185000
  5829 37B0 E8				inx
  5830 37B1 AD 0A 9B			lda SYSTEM.SQRT.@010185000.RESULT
  5831 37B4 85 8A			sta :FP2MAN0
  5832 37B6 AD 0B 9B			lda SYSTEM.SQRT.@010185000.RESULT+1
  5833 37B9 85 8B			sta :FP2MAN1
  5834 37BB AD 0C 9B			lda SYSTEM.SQRT.@010185000.RESULT+2
  5835 37BE 85 8C			sta :FP2MAN2
  5836 37C0 AD 0D 9B			lda SYSTEM.SQRT.@010185000.RESULT+3
  5837 37C3 85 8D			sta :FP2MAN3
  5838 37C5 B5 95			lda :STACKORIGIN-1,x
  5839 37C7 85 86			sta :FP1MAN0
  5840 37C9 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5841 37CB 85 87			sta :FP1MAN1
  5842 37CD B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5843 37CF 85 88			sta :FP1MAN2
  5844 37D1 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5845 37D3 85 89			sta :FP1MAN3
  5846 37D5 20 4E 18			jsr @FDIV
  5847 37D8 CA				dex
  5848 37D9 A5 8E			lda :FPMAN0
  5849 37DB 8D BD A0			sta VM
  5850 37DE A5 8F			lda :FPMAN1
  5851 37E0 8D BE A0			sta VM+1
  5852 37E3 A5 90			lda :FPMAN2
  5853 37E5 8D BF A0			sta VM+2
  5854 37E8 A5 91			lda :FPMAN3
  5855 37EA 8D C0 A0			sta VM+3
  5856 37ED CA				dex
  5857
  5858 				; optimize OK (service.pas), line = 1113
  5859
  5860 37EE AD B9 A0			lda SX
  5861 37F1 85 8E			sta :FPMAN0
  5862 37F3 A0 00			ldy #$00
  5863 37F5 AD BA A0			lda SX+1
  5864 37F8 10 01			spl
  5865 37FA 88				dey
  5866 37FB 85 8F			sta :FPMAN1
  5867 37FD 84 90			sty :FPMAN2
  5868 37FF 84 91			sty :FPMAN3
  5869 3801 20 3B 19			jsr @I2F
  5870 3804 A5 8E			lda :FPMAN0
  5871 3806 85 86			sta :FP1MAN0
  5872 3808 A5 8F			lda :FPMAN1
  5873 380A 85 87			sta :FP1MAN1
  5874 380C A5 90			lda :FPMAN2
  5875 380E 85 88			sta :FP1MAN2
  5876 3810 A5 91			lda :FPMAN3
  5877 3812 85 89			sta :FP1MAN3
  5878 3814 AD BD A0			lda VM
  5879 3817 85 8A			sta :FP2MAN0
  5880 3819 AD BE A0			lda VM+1
  5881 381C 85 8B			sta :FP2MAN1
  5882 381E AD BF A0			lda VM+2
  5883 3821 85 8C			sta :FP2MAN2
  5884 3823 AD C0 A0			lda VM+3
  5885 3826 85 8D			sta :FP2MAN3
  5886 3828 20 AD 17			jsr @FMUL
  5887 382B A5 8E			lda :FPMAN0
  5888 382D 85 8A			sta :FP2MAN0
  5889 382F A5 8F			lda :FPMAN1
  5890 3831 85 8B			sta :FP2MAN1
  5891 3833 A5 90			lda :FPMAN2
  5892 3835 85 8C			sta :FP2MAN2
  5893 3837 A5 91			lda :FPMAN3
  5894 3839 85 8D			sta :FP2MAN3
  5895 383B 20 05 16			jsr @FROUND
  5896 383E AC B3 A0 84 84 AC + 	mwy BALL :bp2
  5897 3848 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5898 384A A5 8E			lda :FPMAN0
  5899 384C 91 84			sta (:bp2),y
  5900 384E C8				iny
  5901 384F A5 8F			lda :FPMAN1
  5902 3851 91 84			sta (:bp2),y
  5903
  5904 				; optimize OK (service.pas), line = 1114
  5905
  5906 3853 AD BB A0			lda SY
  5907 3856 85 8E			sta :FPMAN0
  5908 3858 A0 00			ldy #$00
  5909 385A AD BC A0			lda SY+1
  5910 385D 10 01			spl
  5911 385F 88				dey
  5912 3860 85 8F			sta :FPMAN1
  5913 3862 84 90			sty :FPMAN2
  5914 3864 84 91			sty :FPMAN3
  5915 3866 20 3B 19			jsr @I2F
  5916 3869 A5 8E			lda :FPMAN0
  5917 386B 85 86			sta :FP1MAN0
  5918 386D A5 8F			lda :FPMAN1
  5919 386F 85 87			sta :FP1MAN1
  5920 3871 A5 90			lda :FPMAN2
  5921 3873 85 88			sta :FP1MAN2
  5922 3875 A5 91			lda :FPMAN3
  5923 3877 85 89			sta :FP1MAN3
  5924 3879 AD BD A0			lda VM
  5925 387C 85 8A			sta :FP2MAN0
  5926 387E AD BE A0			lda VM+1
  5927 3881 85 8B			sta :FP2MAN1
  5928 3883 AD BF A0			lda VM+2
  5929 3886 85 8C			sta :FP2MAN2
  5930 3888 AD C0 A0			lda VM+3
  5931 388B 85 8D			sta :FP2MAN3
  5932 388D 20 AD 17			jsr @FMUL
  5933 3890 A5 8E			lda :FPMAN0
  5934 3892 85 8A			sta :FP2MAN0
  5935 3894 A5 8F			lda :FPMAN1
  5936 3896 85 8B			sta :FP2MAN1
  5937 3898 A5 90			lda :FPMAN2
  5938 389A 85 8C			sta :FP2MAN2
  5939 389C A5 91			lda :FPMAN3
  5940 389E 85 8D			sta :FP2MAN3
  5941 38A0 20 05 16			jsr @FROUND
  5942 38A3 AC B3 A0 84 84 AC + 	mwy BALL :bp2
  5943 38AD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5944 38AF A5 8E			lda :FPMAN0
  5945 38B1 91 84			sta (:bp2),y
  5946 38B3 C8				iny
  5947 38B4 A5 8F			lda :FPMAN1
  5948 38B6 91 84			sta (:bp2),y
  5949
  5950 				; ------------------------------------------------------------
  5951
  5952 = A0B3			BALL	= DATAORIGIN+$05B8
  5953 = 9AFB			BALL.X	= DATAORIGIN+$0000
  5954 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  5955 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  5956 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  5957 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  5958 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  5959 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  5960 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  5961 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  5962 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  5963 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  5964 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  5965 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  5966 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  5967 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  5968 = 9B15			BALL.STM	= DATAORIGIN+$001A
  5969 = A0B7			SPEED	= DATAORIGIN+$05BC
  5970 = A0B9			SX	= DATAORIGIN+$05BE
  5971 = A0BB			SY	= DATAORIGIN+$05C0
  5972 = A0BD			VM	= DATAORIGIN+$05C2
  5973
  5974 = A0B3			@VarData	= BALL
  5975 = 000C			@VarDataSize	= 12
  5976
  5977 38B8			@exit
  5978 					.ifdef @new
  5979 					lda <@VarData
  5980 					sta :ztmp
  5981 					lda >@VarData
  5982 					ldy #@VarDataSize-1
  5983 					jmp @FreeMem
  5984 					els
  5985 38B8 60				rts						; ret
  5986 					eif
  5987 				.endl
  5988
  5989 38B9			.local	SET_BALL_DIRECTION				; PROCEDURE
  5990
  5991 				; optimize OK (service.pas), line = 1121
  5992
  5993 38B9 AD C5 A0			lda ANGLE
  5994 38BC 85 9F			sta :STACKORIGIN+9
  5995 38BE A0 00			ldy #$00
  5996 38C0 AD C6 A0			lda ANGLE+1
  5997 38C3 10 01			spl
  5998 38C5 88				dey
  5999 38C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6000 38C8 85 88			sta @REAL_MUL.A+2
  6001 38CA 84 89			sty @REAL_MUL.A+3
  6002 38CC A5 9F			lda :STACKORIGIN+9
  6003 38CE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6004 38D0 A9 00			lda #$00
  6005 38D2 85 86			sta @REAL_MUL.A
  6006 38D4 A9 24			lda #$24
  6007 38D6 85 8E			sta @REAL_MUL.B
  6008 38D8 A9 03			lda #$03
  6009 38DA 85 8F			sta @REAL_MUL.B+1
  6010 38DC A9 00			lda #$00
  6011 38DE 85 90			sta @REAL_MUL.B+2
  6012 38E0 85 91			sta @REAL_MUL.B+3
  6013 38E2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6014 38E4 85 87			sta @REAL_MUL.A+1
  6015 38E6 20 5C 14			jsr @REAL_MUL
  6016 38E9 A9 00			lda #$00
  6017 38EB 85 8E			sta @REAL_DIV.B
  6018 38ED A9 B4			lda #$B4
  6019 38EF 85 8F			sta @REAL_DIV.B+1
  6020 38F1 A9 00			lda #$00
  6021 38F3 85 90			sta @REAL_DIV.B+2
  6022 38F5 85 91			sta @REAL_DIV.B+3
  6023 38F7 20 1B 15			jsr @REAL_DIV
  6024 38FA A5 86			lda :eax
  6025 38FC 8D C7 A0			sta W
  6026 38FF A5 87			lda :eax+1
  6027 3901 8D C8 A0			sta W+1
  6028 3904 A5 88			lda :eax+2
  6029 3906 8D C9 A0			sta W+2
  6030 3909 A5 89			lda :eax+3
  6031 390B 8D CA A0			sta W+3
  6032
  6033 				; optimize FAIL (1, service.pas), line = 1123
  6034
  6035 390E E8				inx
  6036 390F A9 00 95 96			mva #$00 :STACKORIGIN,x
  6037 3913 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6038 3917 AD C7 A0			lda W
  6039 391A 8D 37 9B			sta SYSTEM.COS.@01018E000.X
  6040 391D AD C8 A0			lda W+1
  6041 3920 8D 38 9B			sta SYSTEM.COS.@01018E000.X+1
  6042 3923 AD C9 A0			lda W+2
  6043 3926 8D 39 9B			sta SYSTEM.COS.@01018E000.X+2
  6044 3929 AD CA A0			lda W+3
  6045 392C 8D 3A 9B			sta SYSTEM.COS.@01018E000.X+3
  6046 392F 20 EB 24			jsr SYSTEM.COS.@01018E000
  6047 3932 E8				inx
  6048 3933 AD 3B 9B 95 96		mva SYSTEM.COS.@01018E000.RESULT :STACKORIGIN,x
  6049 3938 AD 3C 9B 95 A6		mva SYSTEM.COS.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6050 393D AD 3D 9B 95 B6		mva SYSTEM.COS.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6051 3942 AD 3E 9B 95 C6		mva SYSTEM.COS.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6052 3947 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6053 394B 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6054 394D 20 53 11			jsr @expandToREAL1
  6055 3950 B5 96			lda :STACKORIGIN,x
  6056 3952 85 8E			sta @REAL_MUL.B
  6057 3954 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6058 3956 85 8F			sta @REAL_MUL.B+1
  6059 3958 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6060 395A 85 90			sta @REAL_MUL.B+2
  6061 395C B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6062 395E 85 91			sta @REAL_MUL.B+3
  6063 3960 B5 95			lda :STACKORIGIN-1,x
  6064 3962 85 86			sta @REAL_MUL.A
  6065 3964 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6066 3966 85 87			sta @REAL_MUL.A+1
  6067 3968 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6068 396A 85 88			sta @REAL_MUL.A+2
  6069 396C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6070 396E 85 89			sta @REAL_MUL.A+3
  6071 3970 20 5C 14			jsr @REAL_MUL
  6072 3973 CA				dex
  6073 3974 20 C3 15			jsr @REAL_ROUND
  6074 3977 A5 86			lda :eax
  6075 3979 95 96			sta :STACKORIGIN,x
  6076 397B A5 87			lda :eax+1
  6077 397D 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6078 397F A5 88			lda :eax+2
  6079 3981 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6080 3983 A5 89			lda :eax+3
  6081 3985 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6082 3987 AC C1 A0 84 84 AC + 	mwy BALL :bp2
  6083 3991 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6084 3993 B5 96			lda :STACKORIGIN,x
  6085 3995 91 84			sta (:bp2),y
  6086 3997 C8				iny
  6087 3998 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6088 399A 91 84			sta (:bp2),y
  6089
  6090 				; optimize FAIL (1, service.pas), line = 1124
  6091
  6092 399C A9 00 95 96			mva #$00 :STACKORIGIN,x
  6093 39A0 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6094 39A4 AD C7 A0			lda W
  6095 39A7 8D 2F 9B			sta SYSTEM.SIN.@01018E000.X
  6096 39AA AD C8 A0			lda W+1
  6097 39AD 8D 30 9B			sta SYSTEM.SIN.@01018E000.X+1
  6098 39B0 AD C9 A0			lda W+2
  6099 39B3 8D 31 9B			sta SYSTEM.SIN.@01018E000.X+2
  6100 39B6 AD CA A0			lda W+3
  6101 39B9 8D 32 9B			sta SYSTEM.SIN.@01018E000.X+3
  6102 39BC 20 B2 24			jsr SYSTEM.SIN.@01018E000
  6103 39BF E8				inx
  6104 39C0 AD 33 9B 95 96		mva SYSTEM.SIN.@01018E000.RESULT :STACKORIGIN,x
  6105 39C5 AD 34 9B 95 A6		mva SYSTEM.SIN.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6106 39CA AD 35 9B 95 B6		mva SYSTEM.SIN.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6107 39CF AD 36 9B 95 C6		mva SYSTEM.SIN.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6108 39D4 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6109 39D8 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6110 39DA 20 53 11			jsr @expandToREAL1
  6111 39DD B5 96			lda :STACKORIGIN,x
  6112 39DF 85 8E			sta @REAL_MUL.B
  6113 39E1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6114 39E3 85 8F			sta @REAL_MUL.B+1
  6115 39E5 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6116 39E7 85 90			sta @REAL_MUL.B+2
  6117 39E9 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6118 39EB 85 91			sta @REAL_MUL.B+3
  6119 39ED B5 95			lda :STACKORIGIN-1,x
  6120 39EF 85 86			sta @REAL_MUL.A
  6121 39F1 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6122 39F3 85 87			sta @REAL_MUL.A+1
  6123 39F5 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6124 39F7 85 88			sta @REAL_MUL.A+2
  6125 39F9 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6126 39FB 85 89			sta @REAL_MUL.A+3
  6127 39FD 20 5C 14			jsr @REAL_MUL
  6128 3A00 CA				dex
  6129 3A01 20 C3 15			jsr @REAL_ROUND
  6130 3A04 A5 86			lda :eax
  6131 3A06 95 96			sta :STACKORIGIN,x
  6132 3A08 A5 87			lda :eax+1
  6133 3A0A 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6134 3A0C A5 88			lda :eax+2
  6135 3A0E 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6136 3A10 A5 89			lda :eax+3
  6137 3A12 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6138 3A14 A9 00			lda #$00
  6139 3A16 38 F5 96			sub :STACKORIGIN,x
  6140 3A19 95 96			sta :STACKORIGIN,x
  6141 3A1B A9 00			lda #$00
  6142 3A1D F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6143 3A1F 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6144 3A21 A9 00			lda #$00
  6145 3A23 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6146 3A25 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6147 3A27 A9 00			lda #$00
  6148 3A29 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6149 3A2B 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6150 3A2D AC C1 A0 84 84 AC + 	mwy BALL :bp2
  6151 3A37 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6152 3A39 B5 96			lda :STACKORIGIN,x
  6153 3A3B 91 84			sta (:bp2),y
  6154 3A3D C8				iny
  6155 3A3E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6156 3A40 91 84			sta (:bp2),y
  6157 3A42 CA				dex
  6158
  6159 				; ------------------------------------------------------------
  6160
  6161 = A0C1			BALL	= DATAORIGIN+$05C6
  6162 = 9AFB			BALL.X	= DATAORIGIN+$0000
  6163 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  6164 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  6165 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  6166 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  6167 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  6168 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  6169 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  6170 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  6171 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  6172 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  6173 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  6174 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  6175 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  6176 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  6177 = 9B15			BALL.STM	= DATAORIGIN+$001A
  6178 = A0C5			ANGLE	= DATAORIGIN+$05CA
  6179 = A0C7			W	= DATAORIGIN+$05CC
  6180
  6181 = A0C1			@VarData	= BALL
  6182 = 0008			@VarDataSize	= 8
  6183
  6184 3A43			@exit
  6185 					.ifdef @new
  6186 					lda <@VarData
  6187 					sta :ztmp
  6188 					lda >@VarData
  6189 					ldy #@VarDataSize-1
  6190 					jmp @FreeMem
  6191 					els
  6192 3A43 60				rts						; ret
  6193 					eif
  6194 				.endl
  6195
  6196 3A44			.local	GET_BALL_DIRECTION				; FUNCTION
  6197
  6198 				; optimize OK (service.pas), line = 1132
  6199
  6200 3A44 AC CB A0 84 84 AC + 	mwy BALL :bp2
  6201 3A4E A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6202 3A50 B1 84			lda (:bp2),y
  6203 3A52 88				dey
  6204 3A53 11 84			ora (:bp2),y
  6205 3A55 D0 75			jne l_0CB8
  6206 3A57 E8				inx
  6207 3A58 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6208 3A5C E8				inx
  6209 3A5D AC CB A0 84 84 AC + 	mwy BALL :bp2
  6210 3A67 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6211 3A69 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6212 3A6D C8				iny
  6213 3A6E B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6214 3A72 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6215 3A74 B1 84			lda (:bp2),y
  6216 3A76 85 8A			sta SYSTEM.ABS.@010184000.X
  6217 3A78 C8				iny
  6218 3A79 B1 84			lda (:bp2),y
  6219 3A7B 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6220 3A7D 20 92 1C			jsr SYSTEM.ABS.@010184000
  6221 3A80 E8				inx
  6222 3A81 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6223 3A83 85 8E			sta @SMALLINT.DIV.B
  6224 3A85 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6225 3A87 85 8F			sta @SMALLINT.DIV.B+1
  6226 3A89 B5 95			lda :STACKORIGIN-1,x
  6227 3A8B 85 86			sta @SMALLINT.DIV.A
  6228 3A8D B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6229 3A8F 85 87			sta @SMALLINT.DIV.A+1
  6230 3A91 20 4B 12			jsr @SMALLINT.DIV
  6231 3A94 A5 86			lda :eax
  6232 3A96 95 95			sta :STACKORIGIN-1,x
  6233 3A98 A5 87			lda :eax+1
  6234 3A9A 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6235 3A9C CA				dex
  6236 3A9D A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6237 3AA1 20 23 12			jsr mulSMALLINT
  6238 3AA4 CA				dex
  6239 3AA5 A9 00			lda #$00
  6240 3AA7 38 F5 96			sub :STACKORIGIN,x
  6241 3AAA 95 96			sta :STACKORIGIN,x
  6242 3AAC A9 00			lda #$00
  6243 3AAE F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6244 3AB0 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6245 3AB2 A9 00			lda #$00
  6246 3AB4 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6247 3AB6 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6248 3AB8 A9 00			lda #$00
  6249 3ABA F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6250 3ABC 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6251 3ABE B5 96			lda :STACKORIGIN,x
  6252 3AC0 8D D1 A0			sta W
  6253 3AC3 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6254 3AC5 8D D2 A0			sta W+1
  6255 3AC8 CA				dex
  6256 3AC9 4C F2 3B			jmp l_0CD4
  6257 3ACC			l_0CB8
  6258
  6259 				; optimize OK (service.pas), line = 1138
  6260
  6261 3ACC AC CB A0 84 84 AC + 	mwy BALL :bp2
  6262 3AD6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6263 3AD8 B1 84			lda (:bp2),y
  6264 3ADA 85 87			sta @REAL_DIV.A+1
  6265 3ADC C8				iny
  6266 3ADD B1 84			lda (:bp2),y
  6267 3ADF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6268 3AE1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6269 3AE3 B1 84			lda (:bp2),y
  6270 3AE5 85 A0			sta :STACKORIGIN+10
  6271 3AE7 C8				iny
  6272 3AE8 B1 84			lda (:bp2),y
  6273 3AEA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6274 3AEC A0 00			ldy #$00
  6275 3AEE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6276 3AF0 10 01			spl
  6277 3AF2 88				dey
  6278 3AF3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6279 3AF5 85 90			sta @REAL_DIV.B+2
  6280 3AF7 84 91			sty @REAL_DIV.B+3
  6281 3AF9 A5 A0			lda :STACKORIGIN+10
  6282 3AFB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6283 3AFD A9 00			lda #$00
  6284 3AFF 85 8E			sta @REAL_DIV.B
  6285 3B01 A0 00			ldy #$00
  6286 3B03 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6287 3B05 10 01			spl
  6288 3B07 88				dey
  6289 3B08 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6290 3B0A 85 88			sta @REAL_DIV.A+2
  6291 3B0C 84 89			sty @REAL_DIV.A+3
  6292 3B0E A9 00			lda #$00
  6293 3B10 85 86			sta @REAL_DIV.A
  6294 3B12 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6295 3B14 85 8F			sta @REAL_DIV.B+1
  6296 3B16 20 1B 15			jsr @REAL_DIV
  6297 3B19 A9 00			lda #$00
  6298 3B1B 38 E5 86			sub :eax
  6299 3B1E 8D 14 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE
  6300 3B21 A9 00			lda #$00
  6301 3B23 E5 87			sbc :eax+1
  6302 3B25 8D 15 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+1
  6303 3B28 A9 00			lda #$00
  6304 3B2A E5 88			sbc :eax+2
  6305 3B2C 8D 16 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+2
  6306 3B2F A9 00			lda #$00
  6307 3B31 E5 89			sbc :eax+3
  6308 3B33 8D 17 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+3
  6309 3B36 20 55 1F			jsr SYSTEM.ARCTAN.@01018E000
  6310 3B39 E8				inx
  6311 3B3A E8				inx
  6312 3B3B A9 00			lda #$00
  6313 3B3D 85 8E			sta @REAL_MUL.B
  6314 3B3F A9 B4			lda #$B4
  6315 3B41 85 8F			sta @REAL_MUL.B+1
  6316 3B43 A9 00			lda #$00
  6317 3B45 85 90			sta @REAL_MUL.B+2
  6318 3B47 A9 00			lda #$00
  6319 3B49 85 91			sta @REAL_MUL.B+3
  6320 3B4B AD 18 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT
  6321 3B4E 85 86			sta @REAL_MUL.A
  6322 3B50 AD 19 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+1
  6323 3B53 85 87			sta @REAL_MUL.A+1
  6324 3B55 AD 1A 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+2
  6325 3B58 85 88			sta @REAL_MUL.A+2
  6326 3B5A AD 1B 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+3
  6327 3B5D 85 89			sta @REAL_MUL.A+3
  6328 3B5F 20 5C 14			jsr @REAL_MUL
  6329 3B62 A5 86			lda :eax
  6330 3B64 95 95			sta :STACKORIGIN-1,x
  6331 3B66 A5 87			lda :eax+1
  6332 3B68 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6333 3B6A A5 88			lda :eax+2
  6334 3B6C 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6335 3B6E A5 89			lda :eax+3
  6336 3B70 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6337 3B72 A9 24			lda #$24
  6338 3B74 85 8E			sta @REAL_DIV.B
  6339 3B76 A9 03			lda #$03
  6340 3B78 85 8F			sta @REAL_DIV.B+1
  6341 3B7A A9 00			lda #$00
  6342 3B7C 85 90			sta @REAL_DIV.B+2
  6343 3B7E A9 00			lda #$00
  6344 3B80 85 91			sta @REAL_DIV.B+3
  6345 3B82 B5 95			lda :STACKORIGIN-1,x
  6346 3B84 85 86			sta @REAL_DIV.A
  6347 3B86 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6348 3B88 85 87			sta @REAL_DIV.A+1
  6349 3B8A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6350 3B8C 85 88			sta @REAL_DIV.A+2
  6351 3B8E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6352 3B90 85 89			sta @REAL_DIV.A+3
  6353 3B92 20 1B 15			jsr @REAL_DIV
  6354 3B95 CA				dex
  6355 3B96 20 C3 15			jsr @REAL_ROUND
  6356 3B99 A5 86			lda :eax
  6357 3B9B 8D D1 A0			sta W
  6358 3B9E A5 87			lda :eax+1
  6359 3BA0 8D D2 A0			sta W+1
  6360 3BA3 CA				dex
  6361
  6362 				; optimize OK (service.pas), line = 1141
  6363
  6364 3BA4 AC CB A0 84 84 AC + 	mwy BALL :bp2
  6365 3BAE A0 00			ldy #$00
  6366 3BB0 B1 84			lda (:bp2),y
  6367 3BB2 10 0E			jpl l_0CFB
  6368 3BB4 AD D1 A0			lda W
  6369 3BB7 18 69 B4			add #$B4
  6370 3BBA 8D D1 A0			sta W
  6371 3BBD 90 03			scc
  6372 3BBF EE D2 A0			inc W+1
  6373 3BC2			l_0CFB
  6374
  6375 				; optimize OK (service.pas), line = 1143
  6376
  6377 3BC2 AD D1 A0			lda W
  6378 3BC5 18 69 68			add #$68
  6379 3BC8 8D D1 A0			sta W
  6380 3BCB AD D2 A0			lda W+1
  6381 3BCE 69 01			adc #$01
  6382 3BD0 8D D2 A0			sta W+1
  6383
  6384 				; optimize OK (service.pas), line = 1144
  6385
  6386 3BD3 A9 68			lda #$68
  6387 3BD5 85 8E			sta @SMALLINT.MOD.B
  6388 3BD7 A9 01			lda #$01
  6389 3BD9 85 8F			sta @SMALLINT.MOD.B+1
  6390 3BDB AD D1 A0			lda W
  6391 3BDE 85 86			sta @SMALLINT.MOD.A
  6392 3BE0 AD D2 A0			lda W+1
  6393 3BE3 85 87			sta @SMALLINT.MOD.A+1
  6394 3BE5 20 68 12			jsr @SMALLINT.MOD
  6395 3BE8 A5 92			lda @SMALLINT.MOD.RESULT
  6396 3BEA 8D D1 A0			sta W
  6397 3BED A5 93			lda @SMALLINT.MOD.RESULT+1
  6398 3BEF 8D D2 A0			sta W+1
  6399 3BF2			l_0CD4
  6400
  6401 				; optimize OK (service.pas), line = 1147
  6402
  6403 3BF2 AD D1 A0			lda W
  6404 3BF5 8D CF A0			sta RESULT
  6405 3BF8 AD D2 A0			lda W+1
  6406 3BFB 8D D0 A0			sta RESULT+1
  6407 3BFE			@exit
  6408
  6409 				; ------------------------------------------------------------
  6410
  6411 = A0CB			BALL	= DATAORIGIN+$05D0
  6412 = 9AFB			BALL.X	= DATAORIGIN+$0000
  6413 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  6414 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  6415 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  6416 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  6417 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  6418 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  6419 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  6420 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  6421 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  6422 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  6423 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  6424 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  6425 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  6426 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  6427 = 9B15			BALL.STM	= DATAORIGIN+$001A
  6428 = A0CF			RESULT	= DATAORIGIN+$05D4
  6429 = A0D1			W	= DATAORIGIN+$05D6
  6430
  6431 = A0CB			@VarData	= BALL
  6432 = 0004			@VarDataSize	= 4
  6433
  6434 3BFE 60				rts						; ret
  6435 				.endl
  6436
  6437 3BFF			.local	START_BALL					; PROCEDURE
  6438
  6439 				; optimize OK (service.pas), line = 1156
  6440
  6441 3BFF AC D3 A0 84 84 AC + 	mwy BALL :bp2
  6442 3C09 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6443 3C0B A0 00			ldy #BALL.X-DATAORIGIN
  6444 3C0D AD 83 9C			lda VAUS.X
  6445 3C10 18 71 84			add (:bp2),y
  6446 3C13 91 84			sta (:bp2),y
  6447 3C15 C8				iny
  6448 3C16 A9 00			lda #$00
  6449 3C18 69 00			adc #$00
  6450 3C1A 91 84			sta (:bp2),y
  6451
  6452 				; optimize OK (service.pas), line = 1162
  6453
  6454 3C1C A0 02			ldy #BALL.Y-DATAORIGIN
  6455 3C1E AD 84 9C			lda VAUS.Y
  6456 3C21 38 E9 03			sub #$03
  6457 3C24 91 84			sta (:bp2),y
  6458 3C26 C8				iny
  6459 3C27 A9 00			lda #$00
  6460 3C29 E9 00			sbc #$00
  6461 3C2B 91 84			sta (:bp2),y
  6462
  6463 				; optimize OK (service.pas), line = 1167
  6464
  6465 3C2D A0 04			ldy #BALL.FINEX-DATAORIGIN
  6466 3C2F A9 00			lda #$00
  6467 3C31 91 84			sta (:bp2),y
  6468 3C33 C8				iny
  6469 3C34 91 84			sta (:bp2),y
  6470
  6471 				; optimize OK (service.pas), line = 1168
  6472
  6473 3C36 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6474 3C38 91 84			sta (:bp2),y
  6475 3C3A C8				iny
  6476 3C3B 91 84			sta (:bp2),y
  6477
  6478 				; optimize OK (service.pas), line = 1170
  6479
  6480 3C3D A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6481 3C3F A9 01			lda #$01
  6482 3C41 91 84			sta (:bp2),y
  6483
  6484 				; optimize OK (service.pas), line = 1172
  6485
  6486 3C43 A0 14			ldy #BALL.SBD-DATAORIGIN
  6487 3C45 A9 00			lda #$00
  6488 3C47 91 84			sta (:bp2),y
  6489 3C49 C8				iny
  6490 3C4A 91 84			sta (:bp2),y
  6491
  6492 				; optimize OK (service.pas), line = 1173
  6493
  6494 3C4C A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6495 3C4E 91 84			sta (:bp2),y
  6496
  6497 				; ------------------------------------------------------------
  6498
  6499 = A0D3			BALL	= DATAORIGIN+$05D8
  6500 = 9AFB			BALL.X	= DATAORIGIN+$0000
  6501 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  6502 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  6503 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  6504 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  6505 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  6506 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  6507 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  6508 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  6509 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  6510 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  6511 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  6512 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  6513 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  6514 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  6515 = 9B15			BALL.STM	= DATAORIGIN+$001A
  6516
  6517 = A0D3			@VarData	= BALL
  6518 = 0002			@VarDataSize	= 2
  6519
  6520 3C50			@exit
  6521 					.ifdef @new
  6522 					lda <@VarData
  6523 					sta :ztmp
  6524 					lda >@VarData
  6525 					ldy #@VarDataSize-1
  6526 					jmp @FreeMem
  6527 					els
  6528 3C50 60				rts						; ret
  6529 					eif
  6530 				.endl
  6531
  6532 3C51			.local	BALL_SPEED					; FUNCTION
  6533
  6534 				; ------------------------------------------------------------
  6535
  6536 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6537 				; as Pointer
  6538 3C51 B5 96			lda :STACKORIGIN,x
  6539 3C53 85 84			sta :bp2
  6540 3C55 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6541 3C57 85 85			sta :bp2+1
  6542 3C59 A0 1A			ldy #$1A
  6543 3C5B B1 84 99 D7 A0 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6544 3C63 CA				dex
  6545 3C64			@main
  6546
  6547 				; optimize OK (service.pas), line = 1182
  6548
  6549 3C64 AD E7 A0			lda BALL.SPEEDX
  6550 3C67 85 8E			sta :ecx
  6551 3C69 85 92			sta :ztmp8
  6552 3C6B AD E8 A0			lda BALL.SPEEDX+1
  6553 3C6E 85 8F			sta :ecx+1
  6554 3C70 85 93			sta :ztmp9
  6555 3C72 AD E7 A0			lda BALL.SPEEDX
  6556 3C75 85 86			sta :eax
  6557 3C77 85 94			sta :ztmp10
  6558 3C79 AD E8 A0			lda BALL.SPEEDX+1
  6559 3C7C 85 87			sta :eax+1
  6560 3C7E 85 95			sta :ztmp11
  6561 					.ifdef fmulinit
  6562 					fmulu_16
  6563 					els
  6564 3C80 20 23 13			imulCX
  6565 					eif
  6566 3C83 A5 95			lda :ztmp11
  6567 3C85 10 0D			bpl @+
  6568 3C87 A5 88			lda :eax+2
  6569 3C89 38 E5 92			sub :ztmp8
  6570 3C8C 85 88			sta :eax+2
  6571 3C8E A5 89			lda :eax+3
  6572 3C90 E5 93			sbc :ztmp9
  6573 3C92 85 89			sta :eax+3
  6574 				@
  6575 3C94 A5 93			lda :ztmp9
  6576 3C96 10 0D			bpl @+
  6577 3C98 A5 88			lda :eax+2
  6578 3C9A 38 E5 94			sub :ztmp10
  6579 3C9D 85 88			sta :eax+2
  6580 3C9F A5 89			lda :eax+3
  6581 3CA1 E5 95			sbc :ztmp11
  6582 3CA3 85 89			sta :eax+3
  6583 				@
  6584 3CA5 A5 86			lda :eax
  6585 3CA7 85 9F			sta :STACKORIGIN+9
  6586 3CA9 A5 87			lda :eax+1
  6587 3CAB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6588 3CAD A5 88			lda :eax+2
  6589 3CAF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6590 3CB1 A5 89			lda :eax+3
  6591 3CB3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6592 3CB5 AD E9 A0			lda BALL.SPEEDY
  6593 3CB8 85 8E			sta :ecx
  6594 3CBA 85 92			sta :ztmp8
  6595 3CBC AD EA A0			lda BALL.SPEEDY+1
  6596 3CBF 85 8F			sta :ecx+1
  6597 3CC1 85 93			sta :ztmp9
  6598 3CC3 AD E9 A0			lda BALL.SPEEDY
  6599 3CC6 85 86			sta :eax
  6600 3CC8 85 94			sta :ztmp10
  6601 3CCA AD EA A0			lda BALL.SPEEDY+1
  6602 3CCD 85 87			sta :eax+1
  6603 3CCF 85 95			sta :ztmp11
  6604 					.ifdef fmulinit
  6605 					fmulu_16
  6606 					els
  6607 3CD1 20 23 13			imulCX
  6608 					eif
  6609 3CD4 A5 95			lda :ztmp11
  6610 3CD6 10 0D			bpl @+
  6611 3CD8 A5 88			lda :eax+2
  6612 3CDA 38 E5 92			sub :ztmp8
  6613 3CDD 85 88			sta :eax+2
  6614 3CDF A5 89			lda :eax+3
  6615 3CE1 E5 93			sbc :ztmp9
  6616 3CE3 85 89			sta :eax+3
  6617 				@
  6618 3CE5 A5 93			lda :ztmp9
  6619 3CE7 10 0D			bpl @+
  6620 3CE9 A5 88			lda :eax+2
  6621 3CEB 38 E5 94			sub :ztmp10
  6622 3CEE 85 88			sta :eax+2
  6623 3CF0 A5 89			lda :eax+3
  6624 3CF2 E5 95			sbc :ztmp11
  6625 3CF4 85 89			sta :eax+3
  6626 				@
  6627 3CF6 A5 9F			lda :STACKORIGIN+9
  6628 3CF8 18 65 86			add :eax
  6629 3CFB 8D 06 9B			sta SYSTEM.SQRT.@010185000.X
  6630 3CFE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6631 3D00 65 87			adc :eax+1
  6632 3D02 8D 07 9B			sta SYSTEM.SQRT.@010185000.X+1
  6633 3D05 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6634 3D07 65 88			adc :eax+2
  6635 3D09 8D 08 9B			sta SYSTEM.SQRT.@010185000.X+2
  6636 3D0C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6637 3D0E 65 89			adc :eax+3
  6638 3D10 8D 09 9B			sta SYSTEM.SQRT.@010185000.X+3
  6639 3D13 20 C0 1C			jsr SYSTEM.SQRT.@010185000
  6640 3D16 E8				inx
  6641 3D17 AD 0A 9B			lda SYSTEM.SQRT.@010185000.RESULT
  6642 3D1A 85 8A			sta :FP2MAN0
  6643 3D1C AD 0B 9B			lda SYSTEM.SQRT.@010185000.RESULT+1
  6644 3D1F 85 8B			sta :FP2MAN1
  6645 3D21 AD 0C 9B			lda SYSTEM.SQRT.@010185000.RESULT+2
  6646 3D24 85 8C			sta :FP2MAN2
  6647 3D26 AD 0D 9B			lda SYSTEM.SQRT.@010185000.RESULT+3
  6648 3D29 85 8D			sta :FP2MAN3
  6649 3D2B 20 05 16			jsr @FROUND
  6650 3D2E A5 8E			lda :FPMAN0
  6651 3D30 8D F2 A0			sta RESULT
  6652 3D33 A5 8F			lda :FPMAN1
  6653 3D35 8D F3 A0			sta RESULT+1
  6654 3D38 CA				dex
  6655 3D39			@exit
  6656
  6657 				; ------------------------------------------------------------
  6658
  6659 = A0D7			adr.BALL	= DATAORIGIN+$05DC	; [27] RECORD
  6660 3D39			.var BALL	= adr.BALL .word
  6661 = A0D7			BALL.X	= DATAORIGIN+$05DC
  6662 = A0D9			BALL.Y	= DATAORIGIN+$05DE
  6663 = A0DB			BALL.FINEX	= DATAORIGIN+$05E0
  6664 = A0DD			BALL.FINEY	= DATAORIGIN+$05E2
  6665 = A0DF			BALL.OLDX	= DATAORIGIN+$05E4
  6666 = A0E1			BALL.OLDY	= DATAORIGIN+$05E6
  6667 = A0E3			BALL.SPEED	= DATAORIGIN+$05E8
  6668 = A0E5			BALL.FINESPEED	= DATAORIGIN+$05EA
  6669 = A0E7			BALL.SPEEDX	= DATAORIGIN+$05EC
  6670 = A0E9			BALL.SPEEDY	= DATAORIGIN+$05EE
  6671 = A0EB			BALL.SBD	= DATAORIGIN+$05F0
  6672 = A0ED			BALL.BRWHIT	= DATAORIGIN+$05F2
  6673 = A0EE			BALL.INPLAY	= DATAORIGIN+$05F3
  6674 = A0EF			BALL.LAUNCH	= DATAORIGIN+$05F4
  6675 = A0F0			BALL.ONVAUS	= DATAORIGIN+$05F5
  6676 = A0F1			BALL.STM	= DATAORIGIN+$05F6
  6677 = A0F2			RESULT	= DATAORIGIN+$05F7
  6678
  6679 = A0D7			@VarData	= BALL.X
  6680 = 001B			@VarDataSize	= 27
  6681
  6682 3D39 60				rts						; ret
  6683 = 3D3A D7 A0		BALL
  6683 				.endl
  6684
  6685 3D3C			.local	MOVE_BALL					; PROCEDURE
  6686
  6687 				; optimize OK (service.pas), line = 1197
  6688
  6689 3D3C AC F4 A0 84 84 AC + 	mwy BALL :bp2
  6690 3D46 A0 00			ldy #BALL.X-DATAORIGIN
  6691 3D48 B1 84			lda (:bp2),y
  6692 3D4A C8				iny
  6693 3D4B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6694 3D4D A9 00			lda #$00
  6695 3D4F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6696 3D51 18 71 84			add (:bp2),y
  6697 3D54 85 9F			sta :STACKORIGIN+9
  6698 3D56 C8				iny
  6699 3D57 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6700 3D59 71 84			adc (:bp2),y
  6701 3D5B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6702 3D5D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6703 3D5F A5 9F			lda :STACKORIGIN+9
  6704 3D61 18 71 84			add (:bp2),y
  6705 3D64 8D F8 A0			sta X
  6706 3D67 C8				iny
  6707 3D68 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6708 3D6A 71 84			adc (:bp2),y
  6709 3D6C 8D F9 A0			sta X+1
  6710
  6711 				; optimize OK (service.pas), line = 1198
  6712
  6713 3D6F A0 02			ldy #BALL.Y-DATAORIGIN
  6714 3D71 B1 84			lda (:bp2),y
  6715 3D73 C8				iny
  6716 3D74 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6717 3D76 A9 00			lda #$00
  6718 3D78 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6719 3D7A 18 71 84			add (:bp2),y
  6720 3D7D 85 9F			sta :STACKORIGIN+9
  6721 3D7F C8				iny
  6722 3D80 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6723 3D82 71 84			adc (:bp2),y
  6724 3D84 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6725 3D86 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6726 3D88 A5 9F			lda :STACKORIGIN+9
  6727 3D8A 18 71 84			add (:bp2),y
  6728 3D8D 8D FA A0			sta Y
  6729 3D90 C8				iny
  6730 3D91 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6731 3D93 71 84			adc (:bp2),y
  6732 3D95 8D FB A0			sta Y+1
  6733
  6734 				; optimize OK (service.pas), line = 1200
  6735
  6736 3D98 A0 00			ldy #BALL.X-DATAORIGIN
  6737 3D9A AD F9 A0			lda X+1
  6738 3D9D 91 84			sta (:bp2),y
  6739 3D9F C8				iny
  6740 3DA0 A9 00			lda #$00
  6741 3DA2 91 84			sta (:bp2),y
  6742
  6743 				; optimize OK (service.pas), line = 1201
  6744
  6745 3DA4 A0 02			ldy #BALL.Y-DATAORIGIN
  6746 3DA6 AD FB A0			lda Y+1
  6747 3DA9 91 84			sta (:bp2),y
  6748 3DAB C8				iny
  6749 3DAC A9 00			lda #$00
  6750 3DAE 91 84			sta (:bp2),y
  6751
  6752 				; optimize OK (service.pas), line = 1203
  6753
  6754 3DB0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6755 3DB2 AD F8 A0			lda X
  6756 3DB5 91 84			sta (:bp2),y
  6757 3DB7 C8				iny
  6758 3DB8 A9 00			lda #$00
  6759 3DBA 91 84			sta (:bp2),y
  6760
  6761 				; optimize OK (service.pas), line = 1204
  6762
  6763 3DBC A0 06			ldy #BALL.FINEY-DATAORIGIN
  6764 3DBE AD FA A0			lda Y
  6765 3DC1 91 84			sta (:bp2),y
  6766 3DC3 C8				iny
  6767 3DC4 A9 00			lda #$00
  6768 3DC6 91 84			sta (:bp2),y
  6769
  6770 				; optimize OK (service.pas), line = 1210
  6771
  6772 3DC8 A0 00			ldy #BALL.X-DATAORIGIN
  6773 3DCA B1 84			lda (:bp2),y
  6774 3DCC C8				iny
  6775 3DCD C9 D9			cmp #$D9
  6776 3DCF B1 84			lda (:bp2),y
  6777 3DD1 E9 00			sbc #$00
  6778 3DD3 50 02			svc
  6779 3DD5 49 80			eor #$80
  6780 3DD7 30 67			jmi l_0DB7
  6781
  6782 				; optimize OK (service.pas), line = 1212
  6783
  6784 3DD9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6785 3DDB A9 00			lda #$00
  6786 3DDD 38 F1 84			sub (:bp2),y
  6787 3DE0 85 9F			sta :STACKORIGIN+9
  6788 3DE2 C8				iny
  6789 3DE3 A9 00			lda #$00
  6790 3DE5 F1 84			sbc (:bp2),y
  6791 3DE7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6792 3DE9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6793 3DEB A5 9F			lda :STACKORIGIN+9
  6794 3DED 91 84			sta (:bp2),y
  6795 3DEF C8				iny
  6796 3DF0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6797 3DF2 91 84			sta (:bp2),y
  6798
  6799 				; optimize OK (service.pas), line = 1213
  6800
  6801 3DF4 A0 00			ldy #BALL.X-DATAORIGIN
  6802 3DF6 A9 B0			lda #$B0
  6803 3DF8 38 F1 84			sub (:bp2),y
  6804 3DFB 85 9F			sta :STACKORIGIN+9
  6805 3DFD C8				iny
  6806 3DFE A9 01			lda #$01
  6807 3E00 F1 84			sbc (:bp2),y
  6808 3E02 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6809 3E04 A0 00			ldy #BALL.X-DATAORIGIN
  6810 3E06 A5 9F			lda :STACKORIGIN+9
  6811 3E08 91 84			sta (:bp2),y
  6812 3E0A C8				iny
  6813 3E0B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6814 3E0D 91 84			sta (:bp2),y
  6815
  6816 				; optimize OK (service.pas), line = 1214
  6817
  6818 3E0F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6819 3E11 A9 FF			lda #$FF
  6820 3E13 51 84			eor (:bp2),y
  6821 3E15 85 9F			sta :STACKORIGIN+9
  6822 3E17 C8				iny
  6823 3E18 A9 00			lda #$00
  6824 3E1A F1 84			sbc (:bp2),y
  6825 3E1C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6826 3E1E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6827 3E20 A5 9F			lda :STACKORIGIN+9
  6828 3E22 91 84			sta (:bp2),y
  6829 3E24 C8				iny
  6830 3E25 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6831 3E27 91 84			sta (:bp2),y
  6832
  6833 				; optimize OK (service.pas), line = 1215
  6834
  6835 3E29 A9 F0			lda #$F0
  6836 3E2B 8D F0 9B			sta BALL_BLOCK_SOUND.A
  6837 3E2E A9 00			lda #$00
  6838 3E30 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
  6839 3E33 A9 05			lda #$05
  6840 3E35 8D F2 9B			sta BALL_BLOCK_SOUND.B
  6841 3E38 A9 00			lda #$00
  6842 3E3A 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
  6843 3E3D 20 5C 2A			jsr BALL_BLOCK_SOUND
  6844 3E40			l_0DB7
  6845
  6846 				; optimize OK (service.pas), line = 1220
  6847
  6848 3E40 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  6849 3E4A A0 00			ldy #BALL.X-DATAORIGIN
  6850 3E4C B1 84			lda (:bp2),y
  6851 3E4E C8				iny
  6852 3E4F C9 0A			cmp #$0A
  6853 3E51 B1 84			lda (:bp2),y
  6854 3E53 E9 00			sbc #$00
  6855 3E55 50 02			svc
  6856 3E57 49 80			eor #$80
  6857 3E59 10 67			jpl l_0DEC
  6858
  6859 				; optimize OK (service.pas), line = 1222
  6860
  6861 3E5B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6862 3E5D A9 00			lda #$00
  6863 3E5F 38 F1 84			sub (:bp2),y
  6864 3E62 85 9F			sta :STACKORIGIN+9
  6865 3E64 C8				iny
  6866 3E65 A9 00			lda #$00
  6867 3E67 F1 84			sbc (:bp2),y
  6868 3E69 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6869 3E6B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6870 3E6D A5 9F			lda :STACKORIGIN+9
  6871 3E6F 91 84			sta (:bp2),y
  6872 3E71 C8				iny
  6873 3E72 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6874 3E74 91 84			sta (:bp2),y
  6875
  6876 				; optimize OK (service.pas), line = 1223
  6877
  6878 3E76 A0 00			ldy #BALL.X-DATAORIGIN
  6879 3E78 A9 14			lda #$14
  6880 3E7A 38 F1 84			sub (:bp2),y
  6881 3E7D 85 9F			sta :STACKORIGIN+9
  6882 3E7F C8				iny
  6883 3E80 A9 00			lda #$00
  6884 3E82 F1 84			sbc (:bp2),y
  6885 3E84 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6886 3E86 A0 00			ldy #BALL.X-DATAORIGIN
  6887 3E88 A5 9F			lda :STACKORIGIN+9
  6888 3E8A 91 84			sta (:bp2),y
  6889 3E8C C8				iny
  6890 3E8D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6891 3E8F 91 84			sta (:bp2),y
  6892
  6893 				; optimize OK (service.pas), line = 1224
  6894
  6895 3E91 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6896 3E93 A9 FF			lda #$FF
  6897 3E95 51 84			eor (:bp2),y
  6898 3E97 85 9F			sta :STACKORIGIN+9
  6899 3E99 C8				iny
  6900 3E9A A9 00			lda #$00
  6901 3E9C F1 84			sbc (:bp2),y
  6902 3E9E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6903 3EA0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6904 3EA2 A5 9F			lda :STACKORIGIN+9
  6905 3EA4 91 84			sta (:bp2),y
  6906 3EA6 C8				iny
  6907 3EA7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6908 3EA9 91 84			sta (:bp2),y
  6909
  6910 				; optimize OK (service.pas), line = 1225
  6911
  6912 3EAB A9 F0			lda #$F0
  6913 3EAD 8D F0 9B			sta BALL_BLOCK_SOUND.A
  6914 3EB0 A9 00			lda #$00
  6915 3EB2 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
  6916 3EB5 A9 05			lda #$05
  6917 3EB7 8D F2 9B			sta BALL_BLOCK_SOUND.B
  6918 3EBA A9 00			lda #$00
  6919 3EBC 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
  6920 3EBF 20 5C 2A			jsr BALL_BLOCK_SOUND
  6921 3EC2			l_0DEC
  6922
  6923 				; optimize OK (service.pas), line = 1230
  6924
  6925 3EC2 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  6926 3ECC A0 02			ldy #BALL.Y-DATAORIGIN
  6927 3ECE B1 84			lda (:bp2),y
  6928 3ED0 C8				iny
  6929 3ED1 C9 0C			cmp #$0C
  6930 3ED3 B1 84			lda (:bp2),y
  6931 3ED5 E9 00			sbc #$00
  6932 3ED7 50 02			svc
  6933 3ED9 49 80			eor #$80
  6934 3EDB 10 67			jpl l_0E21
  6935
  6936 				; optimize OK (service.pas), line = 1232
  6937
  6938 3EDD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6939 3EDF A9 00			lda #$00
  6940 3EE1 38 F1 84			sub (:bp2),y
  6941 3EE4 85 9F			sta :STACKORIGIN+9
  6942 3EE6 C8				iny
  6943 3EE7 A9 00			lda #$00
  6944 3EE9 F1 84			sbc (:bp2),y
  6945 3EEB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6946 3EED A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6947 3EEF A5 9F			lda :STACKORIGIN+9
  6948 3EF1 91 84			sta (:bp2),y
  6949 3EF3 C8				iny
  6950 3EF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6951 3EF6 91 84			sta (:bp2),y
  6952
  6953 				; optimize OK (service.pas), line = 1233
  6954
  6955 3EF8 A0 02			ldy #BALL.Y-DATAORIGIN
  6956 3EFA A9 18			lda #$18
  6957 3EFC 38 F1 84			sub (:bp2),y
  6958 3EFF 85 9F			sta :STACKORIGIN+9
  6959 3F01 C8				iny
  6960 3F02 A9 00			lda #$00
  6961 3F04 F1 84			sbc (:bp2),y
  6962 3F06 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6963 3F08 A0 02			ldy #BALL.Y-DATAORIGIN
  6964 3F0A A5 9F			lda :STACKORIGIN+9
  6965 3F0C 91 84			sta (:bp2),y
  6966 3F0E C8				iny
  6967 3F0F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6968 3F11 91 84			sta (:bp2),y
  6969
  6970 				; optimize OK (service.pas), line = 1234
  6971
  6972 3F13 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6973 3F15 A9 FF			lda #$FF
  6974 3F17 51 84			eor (:bp2),y
  6975 3F19 85 9F			sta :STACKORIGIN+9
  6976 3F1B C8				iny
  6977 3F1C A9 00			lda #$00
  6978 3F1E F1 84			sbc (:bp2),y
  6979 3F20 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6980 3F22 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6981 3F24 A5 9F			lda :STACKORIGIN+9
  6982 3F26 91 84			sta (:bp2),y
  6983 3F28 C8				iny
  6984 3F29 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6985 3F2B 91 84			sta (:bp2),y
  6986
  6987 				; optimize OK (service.pas), line = 1235
  6988
  6989 3F2D A9 F0			lda #$F0
  6990 3F2F 8D F0 9B			sta BALL_BLOCK_SOUND.A
  6991 3F32 A9 00			lda #$00
  6992 3F34 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
  6993 3F37 A9 05			lda #$05
  6994 3F39 8D F2 9B			sta BALL_BLOCK_SOUND.B
  6995 3F3C A9 00			lda #$00
  6996 3F3E 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
  6997 3F41 20 5C 2A			jsr BALL_BLOCK_SOUND
  6998 3F44			l_0E21
  6999
  7000 				; optimize OK (service.pas), line = 1243
  7001
  7002 3F44 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7003 3F4E A0 02			ldy #BALL.Y-DATAORIGIN
  7004 3F50 B1 84			lda (:bp2),y
  7005 3F52 18 69 03			add #$03
  7006 3F55 85 9F			sta :STACKORIGIN+9
  7007 3F57 C8				iny
  7008 3F58 B1 84			lda (:bp2),y
  7009 3F5A 69 00			adc #$00
  7010 3F5C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7011 3F5E A0 01			ldy #1
  7012 3F60 A5 9F			lda :STACKORIGIN+9
  7013 3F62 C9 B9			cmp #$B9
  7014 3F64 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7015 3F66 E9 00			sbc #$00
  7016 3F68 50 02			svc
  7017 3F6A 49 80			eor #$80
  7018 3F6C 10 01			bpl @+
  7019 3F6E 88				dey
  7020 				@
  7021 3F6F 84 9F			sty :STACKORIGIN+9
  7022 3F71 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7023 3F73 B1 84			lda (:bp2),y
  7024 3F75 85 A0			sta :STACKORIGIN+10
  7025 3F77 C8				iny
  7026 3F78 B1 84			lda (:bp2),y
  7027 3F7A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7028 3F7C A0 01			ldy #1
  7029 3F7E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7030 3F80 30 04			bmi @+
  7031 3F82 05 A0			ora :STACKORIGIN+10
  7032 3F84 D0 01			sne
  7033 				@
  7034 3F86 88				dey
  7035 				@
  7036 3F87 98				tya
  7037 3F88 25 9F			and :STACKORIGIN+9
  7038 3F8A 85 9F			sta :STACKORIGIN+9
  7039 3F8C A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7040 3F8E B1 84			lda (:bp2),y
  7041 3F90 85 A0			sta :STACKORIGIN+10
  7042 3F92 C8				iny
  7043 3F93 B1 84			lda (:bp2),y
  7044 3F95 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7045 3F97 A0 01			ldy #1
  7046 3F99 A5 A0			lda :STACKORIGIN+10
  7047 3F9B C9 B9			cmp #$B9
  7048 3F9D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7049 3F9F E9 00			sbc #$00
  7050 3FA1 50 02			svc
  7051 3FA3 49 80			eor #$80
  7052 3FA5 30 01			bmi @+
  7053 3FA7 88				dey
  7054 				@
  7055 3FA8 98				tya
  7056 3FA9 25 9F			and :STACKORIGIN+9
  7057 3FAB D0 03 4C DE 42		jeq l_0E70
  7058
  7059 				; optimize OK (service.pas), line = 1247
  7060
  7061 3FB0 A0 00			ldy #BALL.X-DATAORIGIN
  7062 3FB2 B1 84			lda (:bp2),y
  7063 3FB4 85 9F			sta :STACKORIGIN+9
  7064 3FB6 C8				iny
  7065 3FB7 AD 83 9C			lda VAUS.X
  7066 3FBA 38 E9 03			sub #$03
  7067 3FBD 85 A0			sta :STACKORIGIN+10
  7068 3FBF A9 00			lda #$00
  7069 3FC1 E9 00			sbc #$00
  7070 3FC3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7071 3FC5 A5 A0			lda :STACKORIGIN+10
  7072 3FC7 C5 9F			cmp :STACKORIGIN+9
  7073 3FC9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7074 3FCB F1 84			sbc (:bp2),y
  7075 3FCD 50 02			svc
  7076 3FCF 49 80			eor #$80
  7077 3FD1 30 03 4C DE 42		jpl l_0E9F
  7078 3FD6 A0 00			ldy #BALL.X-DATAORIGIN
  7079 3FD8 B1 84			lda (:bp2),y
  7080 3FDA 85 A0			sta :STACKORIGIN+10
  7081 3FDC C8				iny
  7082 3FDD B1 84			lda (:bp2),y
  7083 3FDF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7084 3FE1 AD 83 9C			lda VAUS.X
  7085 3FE4 18 6D 8B 9C			add VAUS.WIDTH
  7086 3FE8 85 A1			sta :STACKORIGIN+11
  7087 3FEA A9 00			lda #$00
  7088 3FEC 69 00			adc #$00
  7089 3FEE 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7090 3FF0 A5 A1			lda :STACKORIGIN+11
  7091 3FF2 18 69 03			add #$03
  7092 3FF5 85 A1			sta :STACKORIGIN+11
  7093 3FF7 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7094 3FF9 69 00			adc #$00
  7095 3FFB 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7096 3FFD A9 00			lda #$00
  7097 3FFF 69 00			adc #$00
  7098 4001 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  7099 4003 A9 00			lda #$00
  7100 4005 69 00			adc #$00
  7101 4007 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  7102 4009 A0 00			ldy #$00
  7103 400B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7104 400D 10 01			spl
  7105 400F 88				dey
  7106 4010 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7107 4012 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  7108 4014 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  7109 4016 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7110 4018 C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
  7111 401A D0 10			bne @+
  7112 401C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7113 401E C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
  7114 4020 D0 0A			bne @+
  7115 4022 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7116 4024 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  7117 4026 D0 04			bne @+
  7118 4028 A5 A0			lda :STACKORIGIN+10
  7119 402A C5 A1			cmp :STACKORIGIN+11
  7120 				@
  7121 402C 90 03 4C DE 42		jcs l_0E9F
  7122 				@
  7123
  7124 				; optimize OK (service.pas), line = 1250
  7125
  7126 4031 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7127 4033 A9 00			lda #$00
  7128 4035 38 F1 84			sub (:bp2),y
  7129 4038 85 9F			sta :STACKORIGIN+9
  7130 403A C8				iny
  7131 403B A9 00			lda #$00
  7132 403D F1 84			sbc (:bp2),y
  7133 403F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7134 4041 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7135 4043 A5 9F			lda :STACKORIGIN+9
  7136 4045 91 84			sta (:bp2),y
  7137 4047 C8				iny
  7138 4048 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7139 404A 91 84			sta (:bp2),y
  7140
  7141 				; optimize OK (service.pas), line = 1252
  7142
  7143 404C AD 8F 9C			lda VAUS.LETTER
  7144 404F C9 06			cmp #$06
  7145 4051 D0 1D			jne l_0EC3
  7146 4053 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7147 4055 B1 84			lda (:bp2),y
  7148 4057 D0 17			jne l_0EC3
  7149
  7150 				; optimize OK (service.pas), line = 1254
  7151
  7152 4059 A0 1A			ldy #BALL.STM-DATAORIGIN
  7153 405B 91 84			sta (:bp2),y
  7154
  7155 				; optimize OK (service.pas), line = 1255
  7156
  7157 405D A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7158 405F A9 01			lda #$01
  7159 4061 91 84			sta (:bp2),y
  7160
  7161 				; optimize OK (service.pas), line = 1256
  7162
  7163 4063 A0 00			ldy #BALL.X-DATAORIGIN
  7164 4065 B1 84			lda (:bp2),y
  7165 4067 C8				iny
  7166 4068 38 ED 83 9C			sub VAUS.X
  7167 406C A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7168 406E 91 84			sta (:bp2),y
  7169 4070			l_0EC3
  7170
  7171 				; optimize OK (service.pas), line = 1259
  7172
  7173 4070 A9 2C			lda #$2C
  7174 4072 8D F0 9B			sta BALL_BLOCK_SOUND.A
  7175 4075 A9 01			lda #$01
  7176 4077 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
  7177 407A A9 06			lda #$06
  7178 407C 8D F2 9B			sta BALL_BLOCK_SOUND.B
  7179 407F A9 00			lda #$00
  7180 4081 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
  7181 4084 20 5C 2A			jsr BALL_BLOCK_SOUND
  7182
  7183 				; optimize OK (service.pas), line = 1263
  7184
  7185 4087 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7186 4091 A0 00			ldy #BALL.X-DATAORIGIN
  7187 4093 B1 84			lda (:bp2),y
  7188 4095 85 9F			sta :STACKORIGIN+9
  7189 4097 C8				iny
  7190 4098 B1 84			lda (:bp2),y
  7191 409A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7192 409C AD 83 9C			lda VAUS.X
  7193 409F 18 69 0A			add #$0A
  7194 40A2 85 A0			sta :STACKORIGIN+10
  7195 40A4 A9 00			lda #$00
  7196 40A6 69 00			adc #$00
  7197 40A8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7198 40AA A0 00			ldy #$00
  7199 40AC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7200 40AE 10 01			spl
  7201 40B0 88				dey
  7202 40B1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7203 40B3 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7204 40B5 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7205 40B7				.LOCAL
  7206 40B7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7207 40B9 38 E9 00			sub #$00
  7208 40BC D0 1C			bne L4
  7209 40BE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7210 40C0 C9 00			cmp #$00
  7211 40C2 D0 0A			bne L1
  7212 40C4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7213 40C6 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7214 40C8 D0 04			bne L1
  7215 40CA A5 9F			lda :STACKORIGIN+9
  7216 40CC C5 A0			cmp :STACKORIGIN+10
  7217 40CE F0 10		L1	beq L5
  7218 40D0 B0 04			bcs L3
  7219 40D2 A9 FF			lda #$FF
  7220 40D4 D0 0A			bne L5
  7221 40D6 A9 01		L3	lda #$01
  7222 40D8 D0 06			bne L5
  7223 40DA 50 04		L4	bvc L5
  7224 40DC 49 FF			eor #$FF
  7225 40DE 09 01			ora #$01
  7226 40E0			L5
  7227 					.ENDL
  7228 40E0 30 03 4C A3 41		jpl l_0EF3
  7229
  7230 				; optimize OK (service.pas), line = 1266
  7231
  7232 40E5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7233 40E7 A9 00			lda #$00
  7234 40E9 38 F1 84			sub (:bp2),y
  7235 40EC 85 9F			sta :STACKORIGIN+9
  7236 40EE C8				iny
  7237 40EF A9 00			lda #$00
  7238 40F1 F1 84			sbc (:bp2),y
  7239 40F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7240 40F5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7241 40F7 A5 9F			lda :STACKORIGIN+9
  7242 40F9 91 84			sta (:bp2),y
  7243 40FB C8				iny
  7244 40FC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7245 40FE 91 84			sta (:bp2),y
  7246
  7247 				; optimize OK (service.pas), line = 1270
  7248
  7249 4100 AD F4 A0			lda BALL
  7250 4103 8D CB A0			sta GET_BALL_DIRECTION.BALL
  7251 4106 AD F5 A0			lda BALL+1
  7252 4109 8D CC A0			sta GET_BALL_DIRECTION.BALL+1
  7253 410C 20 44 3A			jsr GET_BALL_DIRECTION
  7254 410F E8				inx
  7255 4110 AD CF A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7256 4115 AD D0 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7257 411A A9 1E			lda #$1E
  7258 411C 20 24 25			jsr SYSTEM.RANDOM.@010180000
  7259 411F B5 96			lda :STACKORIGIN,x
  7260 4121 18 6D 40 9B			add SYSTEM.RANDOM.@010180000.RESULT
  7261 4125 8D FC A0			sta ANGLE
  7262 4128 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7263 412A 69 00			adc #$00
  7264 412C 8D FD A0			sta ANGLE+1
  7265 412F CA				dex
  7266
  7267 				; optimize OK (service.pas), line = 1278
  7268
  7269 4130 A9 A0			lda #$A0
  7270 4132 8D 48 A0			sta MIN.A
  7271 4135 A9 00			lda #$00
  7272 4137 8D 49 A0			sta MIN.A+1
  7273 413A AD FC A0			lda ANGLE
  7274 413D 8D 4A A0			sta MIN.B
  7275 4140 AD FD A0			lda ANGLE+1
  7276 4143 8D 4B A0			sta MIN.B+1
  7277 4146 20 86 2D			jsr MIN
  7278 4149 A9 78			lda #$78
  7279 414B 8D 42 A0			sta MAX.A
  7280 414E A9 00			lda #$00
  7281 4150 8D 43 A0			sta MAX.A+1
  7282 4153 AD 4C A0			lda MIN.RESULT
  7283 4156 8D 44 A0			sta MAX.B
  7284 4159 AD 4D A0			lda MIN.RESULT+1
  7285 415C 8D 45 A0			sta MAX.B+1
  7286 415F 20 5B 2D			jsr MAX
  7287 4162 AD F4 A0			lda BALL
  7288 4165 8D C1 A0			sta SET_BALL_DIRECTION.BALL
  7289 4168 AD F5 A0			lda BALL+1
  7290 416B 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
  7291 416E AD 46 A0			lda MAX.RESULT
  7292 4171 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
  7293 4174 AD 47 A0			lda MAX.RESULT+1
  7294 4177 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7295 417A 20 B9 38			jsr SET_BALL_DIRECTION
  7296
  7297 				; optimize OK (service.pas), line = 1283
  7298
  7299 417D AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7300 4187 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7301 4189 B1 84			lda (:bp2),y
  7302 418B 8D B7 A0			sta SET_BALL_SPEED.SPEED
  7303 418E C8				iny
  7304 418F B1 84			lda (:bp2),y
  7305 4191 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
  7306 4194 AD F4 A0			lda BALL
  7307 4197 8D B3 A0			sta SET_BALL_SPEED.BALL
  7308 419A AD F5 A0			lda BALL+1
  7309 419D 8D B4 A0			sta SET_BALL_SPEED.BALL+1
  7310 41A0 20 9F 36			jsr SET_BALL_SPEED
  7311 41A3			l_0EF3
  7312
  7313 				; optimize OK (service.pas), line = 1289
  7314
  7315 41A3 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7316 41AD A0 00			ldy #BALL.X-DATAORIGIN
  7317 41AF B1 84			lda (:bp2),y
  7318 41B1 85 9F			sta :STACKORIGIN+9
  7319 41B3 C8				iny
  7320 41B4 B1 84			lda (:bp2),y
  7321 41B6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7322 41B8 AD 83 9C			lda VAUS.X
  7323 41BB 18 6D 8B 9C			add VAUS.WIDTH
  7324 41BF 85 A0			sta :STACKORIGIN+10
  7325 41C1 A9 00			lda #$00
  7326 41C3 69 00			adc #$00
  7327 41C5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7328 41C7 A5 A0			lda :STACKORIGIN+10
  7329 41C9 38 E9 0A			sub #$0A
  7330 41CC 85 A0			sta :STACKORIGIN+10
  7331 41CE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7332 41D0 E9 00			sbc #$00
  7333 41D2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7334 41D4 A9 00			lda #$00
  7335 41D6 E9 00			sbc #$00
  7336 41D8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7337 41DA A9 00			lda #$00
  7338 41DC E9 00			sbc #$00
  7339 41DE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7340 41E0 A0 00			ldy #$00
  7341 41E2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7342 41E4 10 01			spl
  7343 41E6 88				dey
  7344 41E7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7345 41E9 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7346 41EB 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7347 41ED				.LOCAL
  7348 41ED A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7349 41EF 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
  7350 41F2 D0 1C			bne L4
  7351 41F4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7352 41F6 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  7353 41F8 D0 0A			bne L1
  7354 41FA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7355 41FC C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7356 41FE D0 04			bne L1
  7357 4200 A5 9F			lda :STACKORIGIN+9
  7358 4202 C5 A0			cmp :STACKORIGIN+10
  7359 4204 F0 10		L1	beq L5
  7360 4206 B0 04			bcs L3
  7361 4208 A9 FF			lda #$FF
  7362 420A D0 0A			bne L5
  7363 420C A9 01		L3	lda #$01
  7364 420E D0 06			bne L5
  7365 4210 50 04		L4	bvc L5
  7366 4212 49 FF			eor #$FF
  7367 4214 09 01			ora #$01
  7368 4216			L5
  7369 					.ENDL
  7370 4216 10 03 4C DE 42		jmi l_0F34
  7371 421B D0 03 4C DE 42		jeq l_0F34
  7372
  7373 				; optimize OK (service.pas), line = 1291
  7374
  7375 4220 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7376 4222 A9 00			lda #$00
  7377 4224 38 F1 84			sub (:bp2),y
  7378 4227 85 9F			sta :STACKORIGIN+9
  7379 4229 C8				iny
  7380 422A A9 00			lda #$00
  7381 422C F1 84			sbc (:bp2),y
  7382 422E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7383 4230 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7384 4232 A5 9F			lda :STACKORIGIN+9
  7385 4234 91 84			sta (:bp2),y
  7386 4236 C8				iny
  7387 4237 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7388 4239 91 84			sta (:bp2),y
  7389
  7390 				; optimize OK (service.pas), line = 1292
  7391
  7392 423B AD F4 A0			lda BALL
  7393 423E 8D CB A0			sta GET_BALL_DIRECTION.BALL
  7394 4241 AD F5 A0			lda BALL+1
  7395 4244 8D CC A0			sta GET_BALL_DIRECTION.BALL+1
  7396 4247 20 44 3A			jsr GET_BALL_DIRECTION
  7397 424A E8				inx
  7398 424B AD CF A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7399 4250 AD D0 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7400 4255 A9 1E			lda #$1E
  7401 4257 20 24 25			jsr SYSTEM.RANDOM.@010180000
  7402 425A B5 96			lda :STACKORIGIN,x
  7403 425C 38 ED 40 9B			sub SYSTEM.RANDOM.@010180000.RESULT
  7404 4260 8D FC A0			sta ANGLE
  7405 4263 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7406 4265 E9 00			sbc #$00
  7407 4267 8D FD A0			sta ANGLE+1
  7408 426A CA				dex
  7409
  7410 				; optimize OK (service.pas), line = 1293
  7411
  7412 426B A9 14			lda #$14
  7413 426D 8D 42 A0			sta MAX.A
  7414 4270 A9 00			lda #$00
  7415 4272 8D 43 A0			sta MAX.A+1
  7416 4275 AD FC A0			lda ANGLE
  7417 4278 8D 44 A0			sta MAX.B
  7418 427B AD FD A0			lda ANGLE+1
  7419 427E 8D 45 A0			sta MAX.B+1
  7420 4281 20 5B 2D			jsr MAX
  7421 4284 A9 3C			lda #$3C
  7422 4286 8D 48 A0			sta MIN.A
  7423 4289 A9 00			lda #$00
  7424 428B 8D 49 A0			sta MIN.A+1
  7425 428E AD 46 A0			lda MAX.RESULT
  7426 4291 8D 4A A0			sta MIN.B
  7427 4294 AD 47 A0			lda MAX.RESULT+1
  7428 4297 8D 4B A0			sta MIN.B+1
  7429 429A 20 86 2D			jsr MIN
  7430 429D AD F4 A0			lda BALL
  7431 42A0 8D C1 A0			sta SET_BALL_DIRECTION.BALL
  7432 42A3 AD F5 A0			lda BALL+1
  7433 42A6 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
  7434 42A9 AD 4C A0			lda MIN.RESULT
  7435 42AC 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
  7436 42AF AD 4D A0			lda MIN.RESULT+1
  7437 42B2 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7438 42B5 20 B9 38			jsr SET_BALL_DIRECTION
  7439
  7440 				; optimize OK (service.pas), line = 1294
  7441
  7442 42B8 AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7443 42C2 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7444 42C4 B1 84			lda (:bp2),y
  7445 42C6 8D B7 A0			sta SET_BALL_SPEED.SPEED
  7446 42C9 C8				iny
  7447 42CA B1 84			lda (:bp2),y
  7448 42CC 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
  7449 42CF AD F4 A0			lda BALL
  7450 42D2 8D B3 A0			sta SET_BALL_SPEED.BALL
  7451 42D5 AD F5 A0			lda BALL+1
  7452 42D8 8D B4 A0			sta SET_BALL_SPEED.BALL+1
  7453 42DB 20 9F 36			jsr SET_BALL_SPEED
  7454 42DE			l_0F34
  7455 42DE			l_0E9F
  7456 42DE			l_0E70
  7457
  7458 				; optimize OK (service.pas), line = 1306
  7459
  7460 42DE AC F4 A0 84 84 AC + 	mwy BALL :bp2
  7461 42E8 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7462 42EA B1 84			lda (:bp2),y
  7463 42EC 85 9F			sta :STACKORIGIN+9
  7464 42EE C8				iny
  7465 42EF B1 84			lda (:bp2),y
  7466 42F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7467 42F3 A0 01			ldy #1
  7468 42F5 A5 9F			lda :STACKORIGIN+9
  7469 42F7 C9 B9			cmp #$B9
  7470 42F9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7471 42FB E9 00			sbc #$00
  7472 42FD 50 02			svc
  7473 42FF 49 80			eor #$80
  7474 4301 10 01			bpl @+
  7475 4303 88				dey
  7476 				@
  7477 4304 84 9F			sty :STACKORIGIN+9
  7478 4306 A0 02			ldy #BALL.Y-DATAORIGIN
  7479 4308 B1 84			lda (:bp2),y
  7480 430A 85 A0			sta :STACKORIGIN+10
  7481 430C C8				iny
  7482 430D B1 84			lda (:bp2),y
  7483 430F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7484 4311 A0 01			ldy #1
  7485 4313 A5 A0			lda :STACKORIGIN+10
  7486 4315 C9 C9			cmp #$C9
  7487 4317 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7488 4319 E9 00			sbc #$00
  7489 431B 50 02			svc
  7490 431D 49 80			eor #$80
  7491 431F 10 01			bpl @+
  7492 4321 88				dey
  7493 				@
  7494 4322 98				tya
  7495 4323 25 9F			and :STACKORIGIN+9
  7496 4325 85 9F			sta :STACKORIGIN+9
  7497 4327 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7498 4329 B1 84			lda (:bp2),y
  7499 432B 85 A0			sta :STACKORIGIN+10
  7500 432D C8				iny
  7501 432E B1 84			lda (:bp2),y
  7502 4330 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7503 4332 A0 01			ldy #1
  7504 4334 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7505 4336 30 04			bmi @+
  7506 4338 05 A0			ora :STACKORIGIN+10
  7507 433A D0 01			sne
  7508 				@
  7509 433C 88				dey
  7510 				@
  7511 433D 98				tya
  7512 433E 25 9F			and :STACKORIGIN+9
  7513 4340 F0 15			jeq l_0F83
  7514
  7515 				; optimize OK (service.pas), line = 1308
  7516
  7517 4342 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7518 4344 A9 00			lda #$00
  7519 4346 91 84			sta (:bp2),y
  7520
  7521 				; optimize OK (service.pas), line = 1310
  7522
  7523 4348 AD F4 A0			lda BALL
  7524 434B 8D A8 A0			sta REMOVE_BALL.BALL
  7525 434E AD F5 A0			lda BALL+1
  7526 4351 8D A9 A0			sta REMOVE_BALL.BALL+1
  7527 4354 20 FD 34			jsr REMOVE_BALL
  7528 4357			l_0F83
  7529
  7530 				; ------------------------------------------------------------
  7531
  7532 = A0F4			BALL	= DATAORIGIN+$05F9
  7533 = 9AFB			BALL.X	= DATAORIGIN+$0000
  7534 = 9AFD			BALL.Y	= DATAORIGIN+$0002
  7535 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
  7536 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
  7537 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
  7538 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
  7539 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
  7540 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
  7541 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
  7542 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
  7543 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
  7544 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
  7545 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
  7546 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
  7547 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
  7548 = 9B15			BALL.STM	= DATAORIGIN+$001A
  7549 = A0F8			X	= DATAORIGIN+$05FD
  7550 = A0FA			Y	= DATAORIGIN+$05FF
  7551 = A0FC			ANGLE	= DATAORIGIN+$0601
  7552
  7553 = A0F4			@VarData	= BALL
  7554 = 0008			@VarDataSize	= 8
  7555
  7556 4357			@exit
  7557 					.ifdef @new
  7558 					lda <@VarData
  7559 					sta :ztmp
  7560 					lda >@VarData
  7561 					ldy #@VarDataSize-1
  7562 					jmp @FreeMem
  7563 					els
  7564 4357 60				rts						; ret
  7565 					eif
  7566 				.endl
  7567
  7568 4358			.local	MODIFY_VAUS					; PROCEDURE
  7569
  7570 				; optimize OK (service.pas), line = 1317
  7571
  7572 4358 AD 8B 9C			lda VAUS.WIDTH
  7573 435B 8D 89 9C			sta VAUS.OLDLEN
  7574 435E A9 00			lda #$00
  7575 4360 8D 8A 9C			sta VAUS.OLDLEN+1
  7576
  7577 				; optimize OK (service.pas), line = 1318
  7578
  7579 4363 AD 13 9C			lda PLAYVAUS.WIDTH
  7580 4366 8D 8B 9C			sta VAUS.WIDTH
  7581
  7582 				; optimize OK (service.pas), line = 1319
  7583
  7584 4369 AD 15 9C			lda PLAYVAUS.HEIGHT
  7585 436C 8D 8C 9C			sta VAUS.HEIGHT
  7586
  7587 436F			@exit
  7588 					.ifdef @new
  7589 					lda <@VarData
  7590 					sta :ztmp
  7591 					lda >@VarData
  7592 					ldy #@VarDataSize-1
  7593 					jmp @FreeMem
  7594 					els
  7595 436F 60				rts						; ret
  7596 					eif
  7597 				.endl
  7598
  7599 4370			.local	SET_VAUS					; PROCEDURE
  7600
  7601 				; optimize OK (service.pas), line = 1324
  7602
  7603 4370 A9 5F			lda #$5F
  7604 4372 8D 83 9C			sta VAUS.X
  7605
  7606 				; optimize OK (service.pas), line = 1325
  7607
  7608 4375 A9 B8			lda #$B8
  7609 4377 8D 84 9C			sta VAUS.Y
  7610
  7611 				; optimize OK (service.pas), line = 1327
  7612
  7613 437A A9 FF			lda #$FF
  7614 437C 8D 85 9C			sta VAUS.OLDX
  7615 437F 8D 86 9C			sta VAUS.OLDX+1
  7616
  7617 				; optimize OK (service.pas), line = 1328
  7618
  7619 4382 8D 87 9C			sta VAUS.OLDY
  7620 4385 8D 88 9C			sta VAUS.OLDY+1
  7621
  7622 				; optimize OK (service.pas), line = 1329
  7623
  7624 4388 A9 00			lda #$00
  7625 438A 8D 8E 9C			sta VAUS.IFLASH
  7626
  7627 				; optimize OK (service.pas), line = 1333
  7628
  7629 438D 8D 8D 9C			sta VAUS.FLASH
  7630
  7631 				; optimize OK (service.pas), line = 1337
  7632
  7633 4390 AD 13 9C			lda PLAYVAUS.WIDTH
  7634 4393 8D 8B 9C			sta VAUS.WIDTH
  7635
  7636 				; optimize OK (service.pas), line = 1338
  7637
  7638 4396 AD 15 9C			lda PLAYVAUS.HEIGHT
  7639 4399 8D 8C 9C			sta VAUS.HEIGHT
  7640
  7641 				; optimize OK (service.pas), line = 1339
  7642
  7643 439C AD 8B 9C			lda VAUS.WIDTH
  7644 439F 8D 89 9C			sta VAUS.OLDLEN
  7645 43A2 A9 00			lda #$00
  7646 43A4 8D 8A 9C			sta VAUS.OLDLEN+1
  7647
  7648 				; optimize OK (service.pas), line = 1340
  7649
  7650 43A7 A9 FF			lda #$FF
  7651 43A9 8D 8F 9C			sta VAUS.LETTER
  7652
  7653 43AC			@exit
  7654 					.ifdef @new
  7655 					lda <@VarData
  7656 					sta :ztmp
  7657 					lda >@VarData
  7658 					ldy #@VarDataSize-1
  7659 					jmp @FreeMem
  7660 					els
  7661 43AC 60				rts						; ret
  7662 					eif
  7663 				.endl
  7664
  7665 43AD			.local	START_VAUS					; PROCEDURE
  7666
  7667 				; optimize OK (service.pas), line = 1347
  7668
  7669 43AD A9 D8			lda #$D8
  7670 43AF 38 ED 8B 9C			sub VAUS.WIDTH
  7671 43B3 85 9F			sta :STACKORIGIN+9
  7672 43B5 A9 00			lda #$00
  7673 43B7 E9 00			sbc #$00
  7674 43B9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7675 43BB A0 00			ldy #$00
  7676 43BD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7677 43BF 10 01			spl
  7678 43C1 88				dey
  7679 43C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7680 43C4 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7681 43C6 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7682 43C8 A5 9F			lda :STACKORIGIN+9
  7683 43CA 38 E9 01			sub #$01
  7684 43CD 85 9F			sta :STACKORIGIN+9
  7685 43CF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7686 43D1 E9 00			sbc #$00
  7687 43D3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7688 43D5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7689 43D7 E9 00			sbc #$00
  7690 43D9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  7691 43DB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7692 43DD E9 00			sbc #$00
  7693 43DF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  7694 43E1 06 9F			asl :STACKORIGIN+9
  7695 43E3 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  7696 43E5 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  7697 43E7 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
  7698 43E9 A9 0A			lda #$0A
  7699 43EB 8D FB 9B			sta MOUSE_X_LIMIT.MN
  7700 43EE A9 00			lda #$00
  7701 43F0 8D FC 9B			sta MOUSE_X_LIMIT.MN+1
  7702 43F3 A5 9F			lda :STACKORIGIN+9
  7703 43F5 8D FD 9B			sta MOUSE_X_LIMIT.MX
  7704 43F8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7705 43FA 8D FE 9B			sta MOUSE_X_LIMIT.MX+1
  7706 43FD 20 CC 2A			jsr MOUSE_X_LIMIT
  7707
  7708 				; optimize OK (service.pas), line = 1348
  7709
  7710 4400 A9 BE			lda #$BE
  7711 4402 8D FF 9B			sta MOUSEMOVE.X
  7712 4405 A9 00			lda #$00
  7713 4407 8D 00 9C			sta MOUSEMOVE.X+1
  7714 440A A9 B8			lda #$B8
  7715 440C 8D 01 9C			sta MOUSEMOVE.Y
  7716 440F A9 00			lda #$00
  7717 4411 8D 02 9C			sta MOUSEMOVE.Y+1
  7718 4414 20 E5 2A			jsr MOUSEMOVE
  7719
  7720 				; optimize OK (service.pas), line = 1349
  7721
  7722 4417 A9 5F			lda #$5F
  7723 4419 8D 83 9C			sta VAUS.X
  7724
  7725 				; optimize OK (service.pas), line = 1350
  7726
  7727 441C A9 B8			lda #$B8
  7728 441E 8D 84 9C			sta VAUS.Y
  7729
  7730 4421			@exit
  7731 					.ifdef @new
  7732 					lda <@VarData
  7733 					sta :ztmp
  7734 					lda >@VarData
  7735 					ldy #@VarDataSize-1
  7736 					jmp @FreeMem
  7737 					els
  7738 4421 60				rts						; ret
  7739 					eif
  7740 				.endl
  7741
  7742 4422			.local	REMOVE_VAUS					; PROCEDURE
  7743
  7744 				; optimize OK (service.pas), line = 1364
  7745
  7746 4422 AC 87 9C			ldy VAUS.OLDY
  7747 4425 AD 85 9C			lda VAUS.OLDX
  7748 4428 18 79 00 C0			add adr.ROW,y
  7749 442C 8D 02 9D			sta HLP
  7750 442F AD 86 9C			lda VAUS.OLDX+1
  7751 4432 79 FB C0			adc adr.ROW+251,y
  7752 4435 8D 03 9D			sta HLP+1
  7753
  7754 				; optimize OK (service.pas), line = 1366
  7755
  7756 4438 AD 8C 9C			lda VAUS.HEIGHT
  7757 443B 8D FE A0			sta Y
  7758 443E 4C 44 44			jmp l_100Cf
  7759 4441			l_100C
  7760 				; --- ForToDoCondition
  7761 4441 CE FE A0			dec Y
  7762 4444			l_100Cf
  7763 4444 AD 02 9D			lda HLP
  7764 4447 8D 25 A0			sta BLITROW.DST
  7765 444A A9 50			lda #$50
  7766 444C 18 6D 03 9D			add HLP+1
  7767 4450 8D 26 A0			sta BLITROW.DST+1
  7768 4453 A9 00			lda #$00
  7769 4455 69 00			adc #$00
  7770 4457 8D 27 A0			sta BLITROW.DST+2
  7771 445A A9 00			lda #$00
  7772 445C 69 00			adc #$00
  7773 445E 8D 28 A0			sta BLITROW.DST+3
  7774 4461 AD 0F 9C			lda PLAYSCREEN.OFS
  7775 4464 18 6D 02 9D			add HLP
  7776 4468 8D 21 A0			sta BLITROW.SRC
  7777 446B AD 10 9C			lda PLAYSCREEN.OFS+1
  7778 446E 6D 03 9D			adc HLP+1
  7779 4471 8D 22 A0			sta BLITROW.SRC+1
  7780 4474 AD 11 9C			lda PLAYSCREEN.OFS+2
  7781 4477 69 00			adc #$00
  7782 4479 8D 23 A0			sta BLITROW.SRC+2
  7783 447C AD 12 9C			lda PLAYSCREEN.OFS+3
  7784 447F 69 00			adc #$00
  7785 4481 8D 24 A0			sta BLITROW.SRC+3
  7786 4484 AD 89 9C			lda VAUS.OLDLEN
  7787 4487 8D 29 A0			sta BLITROW.SIZE
  7788 448A AD 8A 9C			lda VAUS.OLDLEN+1
  7789 448D 8D 2A A0			sta BLITROW.SIZE+1
  7790 4490 20 42 2C			jsr BLITROW
  7791
  7792 				; optimize OK (service.pas), line = 1369
  7793
  7794 4493 AD 02 9D			lda HLP
  7795 4496 18 69 40			add #$40
  7796 4499 8D 02 9D			sta HLP
  7797 449C AD 03 9D			lda HLP+1
  7798 449F 69 01			adc #$01
  7799 44A1 8D 03 9D			sta HLP+1
  7800
  7801 				; --- ForToDoEpilog
  7802 44A4 AD FE A0			lda Y
  7803 44A7 D0 98			jne l_100C
  7804 44A9			l_101A
  7805
  7806 				; optimize OK (service.pas), line = 1372
  7807
  7808 44A9 AD 8B 9C			lda VAUS.WIDTH
  7809 44AC 8D 89 9C			sta VAUS.OLDLEN
  7810 44AF A9 00			lda #$00
  7811 44B1 8D 8A 9C			sta VAUS.OLDLEN+1
  7812
  7813 				; ------------------------------------------------------------
  7814
  7815 = A0FE			Y	= DATAORIGIN+$0603
  7816
  7817 = A0FE			@VarData	= Y
  7818 = 0001			@VarDataSize	= 1
  7819
  7820 44B4			@exit
  7821 					.ifdef @new
  7822 					lda <@VarData
  7823 					sta :ztmp
  7824 					lda >@VarData
  7825 					ldy #@VarDataSize-1
  7826 					jmp @FreeMem
  7827 					els
  7828 44B4 60				rts						; ret
  7829 					eif
  7830 				.endl
  7831
  7832 44B5			.local	PLACE_VAUS					; PROCEDURE
  7833
  7834 				; optimize FAIL (0, service.pas), line = 1381
  7835
  7836 44B5 EE 8E 9C			inc VAUS.IFLASH
  7837
  7838 				; optimize OK (service.pas), line = 1383
  7839
  7840 44B8 AD 8E 9C			lda VAUS.IFLASH
  7841 44BB C9 0B			cmp #$0B
  7842 44BD 90 08			jcc l_104F
  7843
  7844 				; optimize FAIL (0, service.pas), line = 1385
  7845
  7846 44BF EE 8D 9C			inc VAUS.FLASH
  7847
  7848 				; optimize OK (service.pas), line = 1386
  7849
  7850 44C2 A9 00			lda #$00
  7851 44C4 8D 8E 9C			sta VAUS.IFLASH
  7852 44C7			l_104F
  7853
  7854 				; optimize OK (service.pas), line = 1389
  7855
  7856 44C7 AD 8D 9C			lda VAUS.FLASH
  7857 44CA C9 0B			cmp #$0B
  7858 44CC 90 05			jcc l_106C
  7859 44CE A9 00			lda #$00
  7860 44D0 8D 8D 9C			sta VAUS.FLASH
  7861 44D3			l_106C
  7862
  7863 				; optimize OK (service.pas), line = 1399
  7864
  7865 44D3 A9 00			lda #$00
  7866 44D5 8D 02 9D			sta HLP
  7867 44D8 8D 03 9D			sta HLP+1
  7868
  7869 				; optimize OK (service.pas), line = 1401
  7870
  7871 44DB 8D FF A0			sta Y
  7872 44DE AC 8C 9C			ldy VAUS.HEIGHT
  7873 44E1 88				dey
  7874 44E2 8C E6 44			sty @FORTMP_1083_0
  7875
  7876 44E5			l_1086
  7877 				; --- ForToDoCondition
  7878 44E5 A9 00			lda @FORTMP_1083_0::#$00
  7879 44E7 CD FF A0			cmp Y
  7880 44EA B0 03 4C 23 46		jcc l_1094
  7881
  7882 				; optimize OK (service.pas), line = 1407
  7883
  7884 44EF AD FF A0			lda Y
  7885 44F2 18 6D 84 9C			add VAUS.Y
  7886 44F6 A8				tay
  7887 44F7 AD 83 9C			lda VAUS.X
  7888 44FA 18 79 00 C0			add adr.ROW,y
  7889 44FE 8D 13 A0			sta BLITZERO.DST
  7890 4501 A9 50			lda #$50
  7891 4503 79 FB C0			adc adr.ROW+251,y
  7892 4506 8D 14 A0			sta BLITZERO.DST+1
  7893 4509 A9 00			lda #$00
  7894 450B 69 00			adc #$00
  7895 450D 8D 15 A0			sta BLITZERO.DST+2
  7896 4510 A9 00			lda #$00
  7897 4512 69 00			adc #$00
  7898 4514 8D 16 A0			sta BLITZERO.DST+3
  7899 4517 AD 17 9C			lda PLAYVAUS.OFS
  7900 451A 18 6D 02 9D			add HLP
  7901 451E 8D 0F A0			sta BLITZERO.SRC
  7902 4521 AD 18 9C			lda PLAYVAUS.OFS+1
  7903 4524 6D 03 9D			adc HLP+1
  7904 4527 8D 10 A0			sta BLITZERO.SRC+1
  7905 452A AD 19 9C			lda PLAYVAUS.OFS+2
  7906 452D 69 00			adc #$00
  7907 452F 8D 11 A0			sta BLITZERO.SRC+2
  7908 4532 AD 1A 9C			lda PLAYVAUS.OFS+3
  7909 4535 69 00			adc #$00
  7910 4537 8D 12 A0			sta BLITZERO.SRC+3
  7911 453A AD 8B 9C			lda VAUS.WIDTH
  7912 453D 8D 17 A0			sta BLITZERO.SIZE
  7913 4540 A9 00			lda #$00
  7914 4542 8D 18 A0			sta BLITZERO.SIZE+1
  7915 4545 20 8F 2B			jsr BLITZERO
  7916
  7917 				; optimize OK (service.pas), line = 1409
  7918
  7919 4548 AD FF A0			lda Y
  7920 454B C9 02			cmp #$02
  7921 454D B0 03 4C 0C 46		jcc l_10D7
  7922 4552 AD 8C 9C			lda VAUS.HEIGHT
  7923 4555 E9 02			sbc #$02
  7924 4557 85 A1			sta :STACKORIGIN+11
  7925 4559 A9 00			lda #$00
  7926 455B E9 00			sbc #$00
  7927 455D 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7928 455F AD FF A0			lda Y
  7929 4562 C5 A1			cmp :STACKORIGIN+11
  7930 4564 A9 00			lda #$00
  7931 4566 E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7932 4568 50 02			svc
  7933 456A 49 80			eor #$80
  7934 456C 30 03 4C 0C 46		jpl l_10D7
  7935
  7936 				; optimize OK (service.pas), line = 1412
  7937
  7938 4571 AC 8D 9C			ldy VAUS.FLASH
  7939 4574 B9 5E 10			lda adr.FLASH,y
  7940 4577 8D 3A A0			sta PUTBYTE.V
  7941 457A AD FF A0			lda Y
  7942 457D 18 6D 84 9C			add VAUS.Y
  7943 4581 A8				tay
  7944 4582 AD 83 9C			lda VAUS.X
  7945 4585 18 79 00 C0			add adr.ROW,y
  7946 4589 8D 36 A0			sta PUTBYTE.DST
  7947 458C A9 50			lda #$50
  7948 458E 79 FB C0			adc adr.ROW+251,y
  7949 4591 8D 37 A0			sta PUTBYTE.DST+1
  7950 4594 A9 00			lda #$00
  7951 4596 69 00			adc #$00
  7952 4598 8D 38 A0			sta PUTBYTE.DST+2
  7953 459B A9 00			lda #$00
  7954 459D 69 00			adc #$00
  7955 459F 8D 39 A0			sta PUTBYTE.DST+3
  7956 45A2 20 09 2D			jsr PUTBYTE
  7957
  7958 				; optimize OK (service.pas), line = 1415
  7959
  7960 45A5 AC 8D 9C			ldy VAUS.FLASH
  7961 45A8 B9 5E 10			lda adr.FLASH,y
  7962 45AB 8D 3A A0			sta PUTBYTE.V
  7963 45AE AD 83 9C			lda VAUS.X
  7964 45B1 18 6D 8B 9C			add VAUS.WIDTH
  7965 45B5 85 A0			sta :STACKORIGIN+10
  7966 45B7 A9 50			lda #$50
  7967 45B9 69 00			adc #$00
  7968 45BB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7969 45BD A9 00			lda #$00
  7970 45BF 69 00			adc #$00
  7971 45C1 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7972 45C3 A9 00			lda #$00
  7973 45C5 69 00			adc #$00
  7974 45C7 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7975 45C9 A5 A0			lda :STACKORIGIN+10
  7976 45CB 38 E9 01			sub #$01
  7977 45CE 85 A0			sta :STACKORIGIN+10
  7978 45D0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7979 45D2 E9 00			sbc #$00
  7980 45D4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7981 45D6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7982 45D8 E9 00			sbc #$00
  7983 45DA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7984 45DC A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7985 45DE E9 00			sbc #$00
  7986 45E0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7987 45E2 AD FF A0			lda Y
  7988 45E5 18 6D 84 9C			add VAUS.Y
  7989 45E9 A8				tay
  7990 45EA A5 A0			lda :STACKORIGIN+10
  7991 45EC 18 79 00 C0			add adr.ROW,y
  7992 45F0 8D 36 A0			sta PUTBYTE.DST
  7993 45F3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7994 45F5 79 FB C0			adc adr.ROW+251,y
  7995 45F8 8D 37 A0			sta PUTBYTE.DST+1
  7996 45FB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7997 45FD 69 00			adc #$00
  7998 45FF 8D 38 A0			sta PUTBYTE.DST+2
  7999 4602 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8000 4604 69 00			adc #$00
  8001 4606 8D 39 A0			sta PUTBYTE.DST+3
  8002 4609 20 09 2D			jsr PUTBYTE
  8003 460C			l_10D7
  8004
  8005 				; optimize OK (service.pas), line = 1418
  8006
  8007 460C AD 02 9D			lda HLP
  8008 460F 18 6D 8B 9C			add VAUS.WIDTH
  8009 4613 8D 02 9D			sta HLP
  8010 4616 90 03			scc
  8011 4618 EE 03 9D			inc HLP+1
  8012
  8013 				; --- ForToDoEpilog
  8014 461B EE FF A0			inc Y
  8015 461E F0 03 4C E5 44		jne l_1086
  8016 4623			l_1094
  8017
  8018 				; ------------------------------------------------------------
  8019
  8020 = A0FF			Y	= DATAORIGIN+$0604
  8021
  8022 = A0FF			@VarData	= Y
  8023 = 0001			@VarDataSize	= 1
  8024
  8025 4623			@exit
  8026 					.ifdef @new
  8027 					lda <@VarData
  8028 					sta :ztmp
  8029 					lda >@VarData
  8030 					ldy #@VarDataSize-1
  8031 					jmp @FreeMem
  8032 					els
  8033 4623 60				rts						; ret
  8034 					eif
  8035 				.endl
  8036
  8037 4624			.local	MOVE_VAUS					; PROCEDURE
  8038
  8039 				; optimize OK (service.pas), line = 1428
  8040
  8041 4624 A0 01			ldy #1
  8042 4626 AD 86 9C			lda VAUS.OLDX+1
  8043 4629 C9 FF			cmp #$FF
  8044 462B D0 05			bne @+
  8045 462D AD 85 9C			lda VAUS.OLDX
  8046 4630 C9 FF			cmp #$FF
  8047 				@
  8048 4632 D0 01			bne @+
  8049 4634 88				dey
  8050 				@
  8051 4635 84 9F			sty :STACKORIGIN+9
  8052 4637 A0 01			ldy #1
  8053 4639 AD 86 9C			lda VAUS.OLDX+1
  8054 463C C9 00			cmp #$00
  8055 463E D0 06			bne @+
  8056 4640 AD 85 9C			lda VAUS.OLDX
  8057 4643 CD 83 9C			cmp VAUS.X
  8058 				@
  8059 4646 D0 01			bne @+
  8060 4648 88				dey
  8061 				@
  8062 4649 98				tya
  8063 464A 25 9F			and :STACKORIGIN+9
  8064 464C 85 9F			sta :STACKORIGIN+9
  8065 464E A0 01			ldy #1
  8066 4650 A9 00			lda #$00
  8067 4652 CD 8A 9C			cmp VAUS.OLDLEN+1
  8068 4655 D0 06			bne @+
  8069 4657 AD 8B 9C			lda VAUS.WIDTH
  8070 465A CD 89 9C			cmp VAUS.OLDLEN
  8071 				@
  8072 465D D0 01			bne @+
  8073 465F 88				dey
  8074 				@
  8075 4660 98				tya
  8076 4661 05 9F			ora :STACKORIGIN+9
  8077 4663 F0 03			jeq l_1153
  8078
  8079 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1429
  8080
  8081 4665 20 22 44			jsr REMOVE_VAUS
  8082 4668			l_1153
  8083
  8084 				; optimize OK (service.pas), line = 1431
  8085
  8086 4668 AD 83 9C			lda VAUS.X
  8087 466B 8D 85 9C			sta VAUS.OLDX
  8088 466E A9 00			lda #$00
  8089 4670 8D 86 9C			sta VAUS.OLDX+1
  8090
  8091 				; optimize OK (service.pas), line = 1432
  8092
  8093 4673 AD 84 9C			lda VAUS.Y
  8094 4676 8D 87 9C			sta VAUS.OLDY
  8095 4679 A9 00			lda #$00
  8096 467B 8D 88 9C			sta VAUS.OLDY+1
  8097
  8098 				; optimize OK (service.pas), line = 1439
  8099
  8100 467E A9 D8			lda #$D8
  8101 4680 38 ED 8B 9C			sub VAUS.WIDTH
  8102 4684 8D 4A A0			sta MIN.B
  8103 4687 A9 00			lda #$00
  8104 4689 E9 00			sbc #$00
  8105 468B 8D 4B A0			sta MIN.B+1
  8106 468E AD 01 A1			lda X
  8107 4691 8D 48 A0			sta MIN.A
  8108 4694 AD 02 A1			lda X+1
  8109 4697 8D 49 A0			sta MIN.A+1
  8110 469A 20 86 2D			jsr MIN
  8111 469D A9 0A			lda #$0A
  8112 469F 8D 42 A0			sta MAX.A
  8113 46A2 A9 00			lda #$00
  8114 46A4 8D 43 A0			sta MAX.A+1
  8115 46A7 AD 4C A0			lda MIN.RESULT
  8116 46AA 8D 44 A0			sta MAX.B
  8117 46AD AD 4D A0			lda MIN.RESULT+1
  8118 46B0 8D 45 A0			sta MAX.B+1
  8119 46B3 20 5B 2D			jsr MAX
  8120 46B6 AD 46 A0			lda MAX.RESULT
  8121 46B9 8D 83 9C			sta VAUS.X
  8122
  8123 				; optimize OK (service.pas), line = 1440
  8124
  8125 46BC A9 C8			lda #$C8
  8126 46BE 38 ED 8C 9C			sub VAUS.HEIGHT
  8127 46C2 8D 4A A0			sta MIN.B
  8128 46C5 A9 00			lda #$00
  8129 46C7 E9 00			sbc #$00
  8130 46C9 8D 4B A0			sta MIN.B+1
  8131 46CC AD 03 A1			lda Y
  8132 46CF 8D 48 A0			sta MIN.A
  8133 46D2 AD 04 A1			lda Y+1
  8134 46D5 8D 49 A0			sta MIN.A+1
  8135 46D8 20 86 2D			jsr MIN
  8136 46DB A9 0C			lda #$0C
  8137 46DD 8D 42 A0			sta MAX.A
  8138 46E0 A9 00			lda #$00
  8139 46E2 8D 43 A0			sta MAX.A+1
  8140 46E5 AD 4C A0			lda MIN.RESULT
  8141 46E8 8D 44 A0			sta MAX.B
  8142 46EB AD 4D A0			lda MIN.RESULT+1
  8143 46EE 8D 45 A0			sta MAX.B+1
  8144 46F1 20 5B 2D			jsr MAX
  8145 46F4 AD 46 A0			lda MAX.RESULT
  8146 46F7 8D 84 9C			sta VAUS.Y
  8147
  8148 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1442
  8149
  8150 46FA 20 B5 44			jsr PLACE_VAUS
  8151
  8152 				; ------------------------------------------------------------
  8153
  8154 = A101			X	= DATAORIGIN+$0606
  8155 = A103			Y	= DATAORIGIN+$0608
  8156
  8157 = A101			@VarData	= X
  8158 = 0004			@VarDataSize	= 4
  8159
  8160 46FD			@exit
  8161 					.ifdef @new
  8162 					lda <@VarData
  8163 					sta :ztmp
  8164 					lda >@VarData
  8165 					ldy #@VarDataSize-1
  8166 					jmp @FreeMem
  8167 					els
  8168 46FD 60				rts						; ret
  8169 					eif
  8170 				.endl
  8171
  8172 46FE			.local	REMOVE_BLOCK					; PROCEDURE
  8173
  8174 				; optimize OK (service.pas), line = 1456
  8175
  8176 46FE AD 05 A1			lda XA
  8177 4701 85 9F			sta :STACKORIGIN+9
  8178 4703 A9 00			lda #$00
  8179 4705 06 9F			asl :STACKORIGIN+9
  8180 4707 2A				rol @
  8181 4708 06 9F			asl :STACKORIGIN+9
  8182 470A 2A				rol @
  8183 470B 06 9F			asl :STACKORIGIN+9
  8184 470D 2A				rol @
  8185 470E 06 9F			asl :STACKORIGIN+9
  8186 4710 2A				rol @
  8187 4711 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8188 4713 A5 9F			lda :STACKORIGIN+9
  8189 4715 18 69 09			add #$09
  8190 4718 8D 09 A1			sta XS
  8191 471B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8192 471D 69 00			adc #$00
  8193 471F 8D 0A A1			sta XS+1
  8194
  8195 				; optimize OK (service.pas), line = 1457
  8196
  8197 4722 AD 06 A1			lda YA
  8198 4725 85 9F			sta :STACKORIGIN+9
  8199 4727 A9 00			lda #$00
  8200 4729 06 9F			asl :STACKORIGIN+9
  8201 472B 2A				rol @
  8202 472C 06 9F			asl :STACKORIGIN+9
  8203 472E 2A				rol @
  8204 472F 06 9F			asl :STACKORIGIN+9
  8205 4731 2A				rol @
  8206 4732 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8207 4734 A5 9F			lda :STACKORIGIN+9
  8208 4736 18 69 16			add #$16
  8209 4739 8D 0B A1			sta YS
  8210 473C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8211 473E 69 00			adc #$00
  8212 4740 8D 0C A1			sta YS+1
  8213
  8214 				; optimize OK (service.pas), line = 1459
  8215
  8216 4743 A9 00			lda #$00
  8217 4745 8D 08 A1			sta Y
  8218
  8219 4748			l_11AB
  8220 				; --- ForToDoCondition
  8221 4748 AD 08 A1			lda Y
  8222 474B C9 08			cmp #$08
  8223 474D 90 03 4C 36 49		jcs l_11B9
  8224
  8225 				; optimize OK (service.pas), line = 1461
  8226
  8227 4752 AD 0B A1			lda YS
  8228 4755 6D 08 A1			adc Y
  8229 4758 A8				tay
  8230 4759 B9 00 C3			lda adr.MODY,y
  8231 475C 85 86			sta :eax
  8232 475E A9 00			lda #$00
  8233 4760 85 87			sta :eax+1
  8234 4762 AD 90 9C			lda PATTERN.WIDTH
  8235 4765 85 8E			sta :ecx
  8236 4767 AD 91 9C			lda PATTERN.WIDTH+1
  8237 476A 85 8F			sta :ecx+1
  8238 					.ifdef fmulinit
  8239 					fmulu_16
  8240 					els
  8241 476C 20 67 13			imulCX_AL
  8242 					eif
  8243 476F A5 86			lda :eax
  8244 4771 8D 0D A1			sta YH
  8245 4774 A5 87			lda :eax+1
  8246 4776 8D 0E A1			sta YH+1
  8247
  8248 				; optimize OK (service.pas), line = 1469
  8249
  8250 4779 A9 00			lda #$00
  8251 477B 8D 07 A1			sta X
  8252
  8253 477E			l_11D5
  8254 				; --- ForToDoCondition
  8255 477E AD 07 A1			lda X
  8256 4781 C9 10			cmp #$10
  8257 4783 90 03 4C 2E 49		jcs l_11E3
  8258
  8259 				; optimize OK (service.pas), line = 1470
  8260
  8261 4788 6D 09 A1			adc XS
  8262 478B 85 9F			sta :STACKORIGIN+9
  8263 478D A9 00			lda #$00
  8264 478F 6D 0A A1			adc XS+1
  8265 4792 C9 00			cmp #$00
  8266 4794 D0 04			bne @+
  8267 4796 A5 9F			lda :STACKORIGIN+9
  8268 4798 C9 D8			cmp #$D8
  8269 				@
  8270 479A 90 03 4C 26 49		jcs l_11FA
  8271
  8272 				; optimize OK (service.pas), line = 1476
  8273
  8274 479F AD 0F 9C			lda PLAYSCREEN.OFS
  8275 47A2 6D 07 A1			adc X
  8276 47A5 85 9F			sta :STACKORIGIN+9
  8277 47A7 AD 10 9C			lda PLAYSCREEN.OFS+1
  8278 47AA 69 00			adc #$00
  8279 47AC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8280 47AE AD 11 9C			lda PLAYSCREEN.OFS+2
  8281 47B1 69 00			adc #$00
  8282 47B3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8283 47B5 AD 12 9C			lda PLAYSCREEN.OFS+3
  8284 47B8 69 00			adc #$00
  8285 47BA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8286 47BC A5 9F			lda :STACKORIGIN+9
  8287 47BE 18 6D 09 A1			add XS
  8288 47C2 85 9F			sta :STACKORIGIN+9
  8289 47C4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8290 47C6 6D 0A A1			adc XS+1
  8291 47C9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8292 47CB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8293 47CD 69 00			adc #$00
  8294 47CF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8295 47D1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8296 47D3 69 00			adc #$00
  8297 47D5 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8298 47D7 AD 08 A1			lda Y
  8299 47DA 18 6D 0B A1			add YS
  8300 47DE A8				tay
  8301 47DF A5 9F			lda :STACKORIGIN+9
  8302 47E1 18 79 00 C0			add adr.ROW,y
  8303 47E5 8D 3B A0			sta GETBYTE.SRC
  8304 47E8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8305 47EA 79 FB C0			adc adr.ROW+251,y
  8306 47ED 8D 3C A0			sta GETBYTE.SRC+1
  8307 47F0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8308 47F2 69 00			adc #$00
  8309 47F4 8D 3D A0			sta GETBYTE.SRC+2
  8310 47F7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8311 47F9 69 00			adc #$00
  8312 47FB 8D 3E A0			sta GETBYTE.SRC+3
  8313 47FE 20 31 2D			jsr GETBYTE
  8314 4801 AD 3F A0			lda GETBYTE.RESULT
  8315 4804 29 80			and #$80
  8316 4806 8D 10 A1			sta SHADOW
  8317
  8318 				; optimize OK (service.pas), line = 1480
  8319
  8320 4809 AD 07 A1			lda X
  8321 480C 18 6D 09 A1			add XS
  8322 4810 85 A0			sta :STACKORIGIN+10
  8323 4812 A9 00			lda #$00
  8324 4814 6D 0A A1			adc XS+1
  8325 4817 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8326 4819 A9 00			lda #$00
  8327 481B 18 65 A0			add :STACKORIGIN+10
  8328 481E A8				tay
  8329 481F A9 C4			lda #$C4
  8330 4821 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  8331 4823 85 83			sta :bp+1
  8332 4825 AD 94 9C			lda PATTERN.OFS
  8333 4828 18 71 82			add (:bp),y
  8334 482B 85 9F			sta :STACKORIGIN+9
  8335 482D AD 95 9C			lda PATTERN.OFS+1
  8336 4830 69 00			adc #$00
  8337 4832 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8338 4834 AD 96 9C			lda PATTERN.OFS+2
  8339 4837 69 00			adc #$00
  8340 4839 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8341 483B AD 97 9C			lda PATTERN.OFS+3
  8342 483E 69 00			adc #$00
  8343 4840 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8344 4842 A5 9F			lda :STACKORIGIN+9
  8345 4844 18 6D 0D A1			add YH
  8346 4848 8D 3B A0			sta GETBYTE.SRC
  8347 484B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8348 484D 6D 0E A1			adc YH+1
  8349 4850 8D 3C A0			sta GETBYTE.SRC+1
  8350 4853 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8351 4855 69 00			adc #$00
  8352 4857 8D 3D A0			sta GETBYTE.SRC+2
  8353 485A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8354 485C 69 00			adc #$00
  8355 485E 8D 3E A0			sta GETBYTE.SRC+3
  8356 4861 20 31 2D			jsr GETBYTE
  8357 4864 E8				inx
  8358 4865 AD 3F A0			lda GETBYTE.RESULT
  8359 4868 29 7F			and #$7F
  8360 486A 0D 10 A1			ora SHADOW
  8361 486D 8D 0F A1			sta CL
  8362 4870 CA				dex
  8363
  8364 				; optimize OK (service.pas), line = 1484
  8365
  8366 4871 AD 07 A1			lda X
  8367 4874 18 6D 09 A1			add XS
  8368 4878 85 A0			sta :STACKORIGIN+10
  8369 487A A9 50			lda #$50
  8370 487C 6D 0A A1			adc XS+1
  8371 487F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8372 4881 A9 00			lda #$00
  8373 4883 69 00			adc #$00
  8374 4885 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8375 4887 A9 00			lda #$00
  8376 4889 69 00			adc #$00
  8377 488B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8378 488D AD 08 A1			lda Y
  8379 4890 18 6D 0B A1			add YS
  8380 4894 A8				tay
  8381 4895 A5 A0			lda :STACKORIGIN+10
  8382 4897 18 79 00 C0			add adr.ROW,y
  8383 489B 8D 36 A0			sta PUTBYTE.DST
  8384 489E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8385 48A0 79 FB C0			adc adr.ROW+251,y
  8386 48A3 8D 37 A0			sta PUTBYTE.DST+1
  8387 48A6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8388 48A8 69 00			adc #$00
  8389 48AA 8D 38 A0			sta PUTBYTE.DST+2
  8390 48AD A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8391 48AF 69 00			adc #$00
  8392 48B1 8D 39 A0			sta PUTBYTE.DST+3
  8393 48B4 AD 0F A1			lda CL
  8394 48B7 8D 3A A0			sta PUTBYTE.V
  8395 48BA 20 09 2D			jsr PUTBYTE
  8396
  8397 				; optimize OK (service.pas), line = 1489
  8398
  8399 48BD AD 0F 9C			lda PLAYSCREEN.OFS
  8400 48C0 18 6D 07 A1			add X
  8401 48C4 85 A0			sta :STACKORIGIN+10
  8402 48C6 AD 10 9C			lda PLAYSCREEN.OFS+1
  8403 48C9 69 00			adc #$00
  8404 48CB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8405 48CD AD 11 9C			lda PLAYSCREEN.OFS+2
  8406 48D0 69 00			adc #$00
  8407 48D2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8408 48D4 AD 12 9C			lda PLAYSCREEN.OFS+3
  8409 48D7 69 00			adc #$00
  8410 48D9 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8411 48DB A5 A0			lda :STACKORIGIN+10
  8412 48DD 18 6D 09 A1			add XS
  8413 48E1 85 A0			sta :STACKORIGIN+10
  8414 48E3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8415 48E5 6D 0A A1			adc XS+1
  8416 48E8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8417 48EA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8418 48EC 69 00			adc #$00
  8419 48EE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8420 48F0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8421 48F2 69 00			adc #$00
  8422 48F4 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8423 48F6 AD 08 A1			lda Y
  8424 48F9 18 6D 0B A1			add YS
  8425 48FD A8				tay
  8426 48FE A5 A0			lda :STACKORIGIN+10
  8427 4900 18 79 00 C0			add adr.ROW,y
  8428 4904 8D 36 A0			sta PUTBYTE.DST
  8429 4907 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8430 4909 79 FB C0			adc adr.ROW+251,y
  8431 490C 8D 37 A0			sta PUTBYTE.DST+1
  8432 490F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8433 4911 69 00			adc #$00
  8434 4913 8D 38 A0			sta PUTBYTE.DST+2
  8435 4916 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8436 4918 69 00			adc #$00
  8437 491A 8D 39 A0			sta PUTBYTE.DST+3
  8438 491D AD 0F A1			lda CL
  8439 4920 8D 3A A0			sta PUTBYTE.V
  8440 4923 20 09 2D			jsr PUTBYTE
  8441 4926			l_11FA
  8442
  8443 				; --- ForToDoEpilog
  8444 4926 EE 07 A1			inc X
  8445 4929 F0 03 4C 7E 47		jne l_11D5
  8446 492E			l_11E3
  8447
  8448 				; --- ForToDoEpilog
  8449 492E EE 08 A1			inc Y
  8450 4931 F0 03 4C 48 47		jne l_11AB
  8451 4936			l_11B9
  8452
  8453 				; optimize OK (service.pas), line = 1499
  8454
  8455 4936 AD 0B A1			lda YS
  8456 4939 18 69 04			add #$04
  8457 493C 8D 08 A1			sta Y
  8458 493F AD 0B A1			lda YS
  8459 4942 18 69 0C			add #$0C
  8460 4945 8D 49 49			sta @FORTMP_1294_0
  8461
  8462 4948			l_1297
  8463 				; --- ForToDoCondition
  8464 4948 A9 00			lda @FORTMP_1294_0::#$00
  8465 494A CD 08 A1			cmp Y
  8466 494D B0 03 4C 47 4A		jcc l_12A5
  8467
  8468 				; optimize OK (service.pas), line = 1500
  8469
  8470 4952 AD 09 A1			lda XS
  8471 4955 18 69 08			add #$08
  8472 4958 8D 07 A1			sta X
  8473 495B AD 09 A1			lda XS
  8474 495E 18 69 18			add #$18
  8475 4961 8D 65 49			sta @FORTMP_12B5_0
  8476
  8477 4964			l_12B8
  8478 				; --- ForToDoCondition
  8479 4964 A9 00			lda @FORTMP_12B5_0::#$00
  8480 4966 CD 07 A1			cmp X
  8481 4969 B0 03 4C 3F 4A		jcc l_12C6
  8482
  8483 				; optimize OK (service.pas), line = 1516
  8484
  8485 496E AD 07 A1			lda X
  8486 4971 C9 D8			cmp #$D8
  8487 4973 90 03 4C 37 4A		jcs l_12D8
  8488
  8489 				; optimize OK (service.pas), line = 1520
  8490
  8491 4978 AD 0F 9C			lda PLAYSCREEN.OFS
  8492 497B 6D 07 A1			adc X
  8493 497E 85 9F			sta :STACKORIGIN+9
  8494 4980 AD 10 9C			lda PLAYSCREEN.OFS+1
  8495 4983 69 00			adc #$00
  8496 4985 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8497 4987 AD 11 9C			lda PLAYSCREEN.OFS+2
  8498 498A 69 00			adc #$00
  8499 498C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8500 498E AD 12 9C			lda PLAYSCREEN.OFS+3
  8501 4991 69 00			adc #$00
  8502 4993 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8503 4995 AC 08 A1			ldy Y
  8504 4998 A5 9F			lda :STACKORIGIN+9
  8505 499A 18 79 00 C0			add adr.ROW,y
  8506 499E 8D 3B A0			sta GETBYTE.SRC
  8507 49A1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8508 49A3 79 FB C0			adc adr.ROW+251,y
  8509 49A6 8D 3C A0			sta GETBYTE.SRC+1
  8510 49A9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8511 49AB 69 00			adc #$00
  8512 49AD 8D 3D A0			sta GETBYTE.SRC+2
  8513 49B0 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8514 49B2 69 00			adc #$00
  8515 49B4 8D 3E A0			sta GETBYTE.SRC+3
  8516 49B7 20 31 2D			jsr GETBYTE
  8517 49BA AD 3F A0			lda GETBYTE.RESULT
  8518 49BD 09 80			ora #$80
  8519 49BF 8D 0F A1			sta CL
  8520
  8521 				; optimize OK (service.pas), line = 1524
  8522
  8523 49C2 AC 08 A1			ldy Y
  8524 49C5 AD 07 A1			lda X
  8525 49C8 18 79 00 C0			add adr.ROW,y
  8526 49CC 8D 36 A0			sta PUTBYTE.DST
  8527 49CF A9 50			lda #$50
  8528 49D1 79 FB C0			adc adr.ROW+251,y
  8529 49D4 8D 37 A0			sta PUTBYTE.DST+1
  8530 49D7 A9 00			lda #$00
  8531 49D9 69 00			adc #$00
  8532 49DB 8D 38 A0			sta PUTBYTE.DST+2
  8533 49DE A9 00			lda #$00
  8534 49E0 69 00			adc #$00
  8535 49E2 8D 39 A0			sta PUTBYTE.DST+3
  8536 49E5 AD 0F A1			lda CL
  8537 49E8 8D 3A A0			sta PUTBYTE.V
  8538 49EB 20 09 2D			jsr PUTBYTE
  8539
  8540 				; optimize OK (service.pas), line = 1529
  8541
  8542 49EE AD 0F 9C			lda PLAYSCREEN.OFS
  8543 49F1 18 6D 07 A1			add X
  8544 49F5 85 A0			sta :STACKORIGIN+10
  8545 49F7 AD 10 9C			lda PLAYSCREEN.OFS+1
  8546 49FA 69 00			adc #$00
  8547 49FC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8548 49FE AD 11 9C			lda PLAYSCREEN.OFS+2
  8549 4A01 69 00			adc #$00
  8550 4A03 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8551 4A05 AD 12 9C			lda PLAYSCREEN.OFS+3
  8552 4A08 69 00			adc #$00
  8553 4A0A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8554 4A0C AC 08 A1			ldy Y
  8555 4A0F A5 A0			lda :STACKORIGIN+10
  8556 4A11 18 79 00 C0			add adr.ROW,y
  8557 4A15 8D 36 A0			sta PUTBYTE.DST
  8558 4A18 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8559 4A1A 79 FB C0			adc adr.ROW+251,y
  8560 4A1D 8D 37 A0			sta PUTBYTE.DST+1
  8561 4A20 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8562 4A22 69 00			adc #$00
  8563 4A24 8D 38 A0			sta PUTBYTE.DST+2
  8564 4A27 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8565 4A29 69 00			adc #$00
  8566 4A2B 8D 39 A0			sta PUTBYTE.DST+3
  8567 4A2E AD 0F A1			lda CL
  8568 4A31 8D 3A A0			sta PUTBYTE.V
  8569 4A34 20 09 2D			jsr PUTBYTE
  8570 4A37			l_12D8
  8571
  8572 				; --- ForToDoEpilog
  8573 4A37 EE 07 A1			inc X
  8574 4A3A F0 03 4C 64 49		jne l_12B8
  8575 4A3F			l_12C6
  8576
  8577 				; --- ForToDoEpilog
  8578 4A3F EE 08 A1			inc Y
  8579 4A42 F0 03 4C 48 49		jne l_1297
  8580 4A47			l_12A5
  8581
  8582 				; ------------------------------------------------------------
  8583
  8584 = A105			XA	= DATAORIGIN+$060A
  8585 = A106			YA	= DATAORIGIN+$060B
  8586 = A107			X	= DATAORIGIN+$060C
  8587 = A108			Y	= DATAORIGIN+$060D
  8588 = A109			XS	= DATAORIGIN+$060E
  8589 = A10B			YS	= DATAORIGIN+$0610
  8590 = A10D			YH	= DATAORIGIN+$0612
  8591 = A10F			CL	= DATAORIGIN+$0614
  8592 = A110			SHADOW	= DATAORIGIN+$0615
  8593
  8594 = A105			@VarData	= XA
  8595 = 000C			@VarDataSize	= 12
  8596
  8597 4A47			@exit
  8598 					.ifdef @new
  8599 					lda <@VarData
  8600 					sta :ztmp
  8601 					lda >@VarData
  8602 					ldy #@VarDataSize-1
  8603 					jmp @FreeMem
  8604 					els
  8605 4A47 60				rts						; ret
  8606 					eif
  8607 				.endl
  8608
  8609 4A48			.local	PLACE_BLOCK					; PROCEDURE
  8610
  8611 				; optimize OK (service.pas), line = 1544
  8612
  8613 4A48 AD 13 A1			lda XA
  8614 4A4B 85 9F			sta :STACKORIGIN+9
  8615 4A4D A9 00			lda #$00
  8616 4A4F 06 9F			asl :STACKORIGIN+9
  8617 4A51 2A				rol @
  8618 4A52 06 9F			asl :STACKORIGIN+9
  8619 4A54 2A				rol @
  8620 4A55 06 9F			asl :STACKORIGIN+9
  8621 4A57 2A				rol @
  8622 4A58 06 9F			asl :STACKORIGIN+9
  8623 4A5A 2A				rol @
  8624 4A5B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8625 4A5D A5 9F			lda :STACKORIGIN+9
  8626 4A5F 18 69 09			add #$09
  8627 4A62 8D 18 A1			sta XS
  8628 4A65 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8629 4A67 69 00			adc #$00
  8630 4A69 8D 19 A1			sta XS+1
  8631
  8632 				; optimize OK (service.pas), line = 1545
  8633
  8634 4A6C AD 14 A1			lda YA
  8635 4A6F 85 9F			sta :STACKORIGIN+9
  8636 4A71 A9 00			lda #$00
  8637 4A73 06 9F			asl :STACKORIGIN+9
  8638 4A75 2A				rol @
  8639 4A76 06 9F			asl :STACKORIGIN+9
  8640 4A78 2A				rol @
  8641 4A79 06 9F			asl :STACKORIGIN+9
  8642 4A7B 2A				rol @
  8643 4A7C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8644 4A7E A5 9F			lda :STACKORIGIN+9
  8645 4A80 18 69 16			add #$16
  8646 4A83 8D 1A A1			sta YS
  8647 4A86 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8648 4A88 69 00			adc #$00
  8649 4A8A 8D 1B A1			sta YS+1
  8650
  8651 				; optimize OK (service.pas), line = 1547
  8652
  8653 4A8D A9 00			lda #$00
  8654 4A8F 8D 17 A1			sta Y
  8655
  8656 4A92			l_134B
  8657 				; --- ForToDoCondition
  8658 4A92 AD 17 A1			lda Y
  8659 4A95 C9 08			cmp #$08
  8660 4A97 90 03 4C EA 4C		jcs l_1359
  8661
  8662 				; optimize OK (service.pas), line = 1548
  8663
  8664 4A9C A9 00			lda #$00
  8665 4A9E 8D 16 A1			sta X
  8666
  8667 4AA1			l_1362
  8668 				; --- ForToDoCondition
  8669 4AA1 AD 16 A1			lda X
  8670 4AA4 C9 10			cmp #$10
  8671 4AA6 90 03 4C E2 4C		jcs l_1370
  8672
  8673 				; optimize OK (service.pas), line = 1553
  8674
  8675 4AAB AD 0F 9C			lda PLAYSCREEN.OFS
  8676 4AAE 6D 18 A1			adc XS
  8677 4AB1 85 9F			sta :STACKORIGIN+9
  8678 4AB3 AD 10 9C			lda PLAYSCREEN.OFS+1
  8679 4AB6 6D 19 A1			adc XS+1
  8680 4AB9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8681 4ABB AD 11 9C			lda PLAYSCREEN.OFS+2
  8682 4ABE 69 00			adc #$00
  8683 4AC0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8684 4AC2 AD 12 9C			lda PLAYSCREEN.OFS+3
  8685 4AC5 69 00			adc #$00
  8686 4AC7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8687 4AC9 A5 9F			lda :STACKORIGIN+9
  8688 4ACB 18 6D 16 A1			add X
  8689 4ACF 85 9F			sta :STACKORIGIN+9
  8690 4AD1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8691 4AD3 69 00			adc #$00
  8692 4AD5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8693 4AD7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8694 4AD9 69 00			adc #$00
  8695 4ADB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8696 4ADD A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8697 4ADF 69 00			adc #$00
  8698 4AE1 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8699 4AE3 AD 1A A1			lda YS
  8700 4AE6 18 6D 17 A1			add Y
  8701 4AEA A8				tay
  8702 4AEB A5 9F			lda :STACKORIGIN+9
  8703 4AED 18 79 00 C0			add adr.ROW,y
  8704 4AF1 8D 3B A0			sta GETBYTE.SRC
  8705 4AF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8706 4AF6 79 FB C0			adc adr.ROW+251,y
  8707 4AF9 8D 3C A0			sta GETBYTE.SRC+1
  8708 4AFC A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8709 4AFE 69 00			adc #$00
  8710 4B00 8D 3D A0			sta GETBYTE.SRC+2
  8711 4B03 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8712 4B05 69 00			adc #$00
  8713 4B07 8D 3E A0			sta GETBYTE.SRC+3
  8714 4B0A 20 31 2D			jsr GETBYTE
  8715 4B0D AD 3F A0			lda GETBYTE.RESULT
  8716 4B10 29 80			and #$80
  8717 4B12 8D 1E A1			sta SHADOW
  8718
  8719 				; optimize OK (service.pas), line = 1555
  8720
  8721 4B15 AD 17 A1			lda Y
  8722 4B18 C9 07			cmp #$07
  8723 4B1A 90 03 4C 0E 4C		jcs l_13AF
  8724 4B1F AD 16 A1			lda X
  8725 4B22 C9 0F			cmp #$0F
  8726 4B24 90 03 4C 0E 4C		jcs l_13AF
  8727
  8728 				; optimize OK (service.pas), line = 1560
  8729
  8730 4B29 AD 15 A1			lda BLOCK
  8731 4B2C 38 E9 01			sub #$01
  8732 4B2F 85 9F			sta :STACKORIGIN+9
  8733 4B31 A9 00			lda #$00
  8734 4B33 E9 00			sbc #$00
  8735 4B35 A5 9F			lda :STACKORIGIN+9
  8736 4B37 29 0F			and #$0F
  8737 4B39 A8				tay
  8738 4B3A B9 88 10			lda adr.COLORBLOCK,y
  8739 4B3D 29 7F			and #$7F
  8740 4B3F 0D 1E A1			ora SHADOW
  8741 4B42 8D 1C A1			sta CL
  8742
  8743 				; optimize OK (service.pas), line = 1563
  8744
  8745 4B45 AD 18 A1			lda XS
  8746 4B48 85 A0			sta :STACKORIGIN+10
  8747 4B4A A9 50			lda #$50
  8748 4B4C 18 6D 19 A1			add XS+1
  8749 4B50 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8750 4B52 A9 00			lda #$00
  8751 4B54 69 00			adc #$00
  8752 4B56 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8753 4B58 A9 00			lda #$00
  8754 4B5A 69 00			adc #$00
  8755 4B5C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8756 4B5E A5 A0			lda :STACKORIGIN+10
  8757 4B60 18 6D 16 A1			add X
  8758 4B64 85 A0			sta :STACKORIGIN+10
  8759 4B66 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8760 4B68 69 00			adc #$00
  8761 4B6A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8762 4B6C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8763 4B6E 69 00			adc #$00
  8764 4B70 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8765 4B72 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8766 4B74 69 00			adc #$00
  8767 4B76 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8768 4B78 AD 1A A1			lda YS
  8769 4B7B 18 6D 17 A1			add Y
  8770 4B7F A8				tay
  8771 4B80 A5 A0			lda :STACKORIGIN+10
  8772 4B82 18 79 00 C0			add adr.ROW,y
  8773 4B86 8D 36 A0			sta PUTBYTE.DST
  8774 4B89 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8775 4B8B 79 FB C0			adc adr.ROW+251,y
  8776 4B8E 8D 37 A0			sta PUTBYTE.DST+1
  8777 4B91 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8778 4B93 69 00			adc #$00
  8779 4B95 8D 38 A0			sta PUTBYTE.DST+2
  8780 4B98 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8781 4B9A 69 00			adc #$00
  8782 4B9C 8D 39 A0			sta PUTBYTE.DST+3
  8783 4B9F AD 1C A1			lda CL
  8784 4BA2 8D 3A A0			sta PUTBYTE.V
  8785 4BA5 20 09 2D			jsr PUTBYTE
  8786
  8787 				; optimize OK (service.pas), line = 1566
  8788
  8789 4BA8 AD 0F 9C			lda PLAYSCREEN.OFS
  8790 4BAB 18 6D 18 A1			add XS
  8791 4BAF 85 A0			sta :STACKORIGIN+10
  8792 4BB1 AD 10 9C			lda PLAYSCREEN.OFS+1
  8793 4BB4 6D 19 A1			adc XS+1
  8794 4BB7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8795 4BB9 AD 11 9C			lda PLAYSCREEN.OFS+2
  8796 4BBC 69 00			adc #$00
  8797 4BBE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8798 4BC0 AD 12 9C			lda PLAYSCREEN.OFS+3
  8799 4BC3 69 00			adc #$00
  8800 4BC5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8801 4BC7 A5 A0			lda :STACKORIGIN+10
  8802 4BC9 18 6D 16 A1			add X
  8803 4BCD 85 A0			sta :STACKORIGIN+10
  8804 4BCF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8805 4BD1 69 00			adc #$00
  8806 4BD3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8807 4BD5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8808 4BD7 69 00			adc #$00
  8809 4BD9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8810 4BDB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8811 4BDD 69 00			adc #$00
  8812 4BDF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8813 4BE1 AD 1A A1			lda YS
  8814 4BE4 18 6D 17 A1			add Y
  8815 4BE8 A8				tay
  8816 4BE9 A5 A0			lda :STACKORIGIN+10
  8817 4BEB 18 79 00 C0			add adr.ROW,y
  8818 4BEF 8D 36 A0			sta PUTBYTE.DST
  8819 4BF2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8820 4BF4 79 FB C0			adc adr.ROW+251,y
  8821 4BF7 8D 37 A0			sta PUTBYTE.DST+1
  8822 4BFA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8823 4BFC 69 00			adc #$00
  8824 4BFE 8D 38 A0			sta PUTBYTE.DST+2
  8825 4C01 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8826 4C03 69 00			adc #$00
  8827 4C05 8D 39 A0			sta PUTBYTE.DST+3
  8828 4C08 AD 1C A1			lda CL
  8829 4C0B 4C D4 4C			jmp l_140E
  8830 4C0E			l_13AF
  8831
  8832 				; optimize OK (service.pas), line = 1574
  8833
  8834 4C0E AD 18 A1			lda XS
  8835 4C11 85 A0			sta :STACKORIGIN+10
  8836 4C13 A9 50			lda #$50
  8837 4C15 18 6D 19 A1			add XS+1
  8838 4C19 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8839 4C1B A9 00			lda #$00
  8840 4C1D 69 00			adc #$00
  8841 4C1F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8842 4C21 A9 00			lda #$00
  8843 4C23 69 00			adc #$00
  8844 4C25 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8845 4C27 A5 A0			lda :STACKORIGIN+10
  8846 4C29 18 6D 16 A1			add X
  8847 4C2D 85 A0			sta :STACKORIGIN+10
  8848 4C2F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8849 4C31 69 00			adc #$00
  8850 4C33 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8851 4C35 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8852 4C37 69 00			adc #$00
  8853 4C39 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8854 4C3B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8855 4C3D 69 00			adc #$00
  8856 4C3F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8857 4C41 AD 1A A1			lda YS
  8858 4C44 18 6D 17 A1			add Y
  8859 4C48 A8				tay
  8860 4C49 A5 A0			lda :STACKORIGIN+10
  8861 4C4B 18 79 00 C0			add adr.ROW,y
  8862 4C4F 8D 36 A0			sta PUTBYTE.DST
  8863 4C52 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8864 4C54 79 FB C0			adc adr.ROW+251,y
  8865 4C57 8D 37 A0			sta PUTBYTE.DST+1
  8866 4C5A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8867 4C5C 69 00			adc #$00
  8868 4C5E 8D 38 A0			sta PUTBYTE.DST+2
  8869 4C61 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8870 4C63 69 00			adc #$00
  8871 4C65 8D 39 A0			sta PUTBYTE.DST+3
  8872 4C68 AD 1E A1			lda SHADOW
  8873 4C6B 8D 3A A0			sta PUTBYTE.V
  8874 4C6E 20 09 2D			jsr PUTBYTE
  8875
  8876 				; optimize OK (service.pas), line = 1577
  8877
  8878 4C71 AD 0F 9C			lda PLAYSCREEN.OFS
  8879 4C74 18 6D 18 A1			add XS
  8880 4C78 85 A0			sta :STACKORIGIN+10
  8881 4C7A AD 10 9C			lda PLAYSCREEN.OFS+1
  8882 4C7D 6D 19 A1			adc XS+1
  8883 4C80 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8884 4C82 AD 11 9C			lda PLAYSCREEN.OFS+2
  8885 4C85 69 00			adc #$00
  8886 4C87 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8887 4C89 AD 12 9C			lda PLAYSCREEN.OFS+3
  8888 4C8C 69 00			adc #$00
  8889 4C8E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8890 4C90 A5 A0			lda :STACKORIGIN+10
  8891 4C92 18 6D 16 A1			add X
  8892 4C96 85 A0			sta :STACKORIGIN+10
  8893 4C98 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8894 4C9A 69 00			adc #$00
  8895 4C9C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8896 4C9E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8897 4CA0 69 00			adc #$00
  8898 4CA2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8899 4CA4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8900 4CA6 69 00			adc #$00
  8901 4CA8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8902 4CAA AD 1A A1			lda YS
  8903 4CAD 18 6D 17 A1			add Y
  8904 4CB1 A8				tay
  8905 4CB2 A5 A0			lda :STACKORIGIN+10
  8906 4CB4 18 79 00 C0			add adr.ROW,y
  8907 4CB8 8D 36 A0			sta PUTBYTE.DST
  8908 4CBB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8909 4CBD 79 FB C0			adc adr.ROW+251,y
  8910 4CC0 8D 37 A0			sta PUTBYTE.DST+1
  8911 4CC3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8912 4CC5 69 00			adc #$00
  8913 4CC7 8D 38 A0			sta PUTBYTE.DST+2
  8914 4CCA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8915 4CCC 69 00			adc #$00
  8916 4CCE 8D 39 A0			sta PUTBYTE.DST+3
  8917 4CD1 AD 1E A1			lda SHADOW
  8918 4CD4			l_140E
  8919 4CD4 8D 3A A0			sta PUTBYTE.V
  8920 4CD7 20 09 2D			jsr PUTBYTE
  8921
  8922 				; --- ForToDoEpilog
  8923 4CDA EE 16 A1			inc X
  8924 4CDD F0 03 4C A1 4A		jne l_1362
  8925 4CE2			l_1370
  8926
  8927 				; --- ForToDoEpilog
  8928 4CE2 EE 17 A1			inc Y
  8929 4CE5 F0 03 4C 92 4A		jne l_134B
  8930 4CEA			l_1359
  8931
  8932 				; optimize OK (service.pas), line = 1582
  8933
  8934 4CEA AD 1A A1			lda YS
  8935 4CED 18 69 04			add #$04
  8936 4CF0 8D 17 A1			sta Y
  8937 4CF3 AD 1A A1			lda YS
  8938 4CF6 18 69 0C			add #$0C
  8939 4CF9 8D FD 4C			sta @FORTMP_1462_0
  8940
  8941 4CFC			l_1465
  8942 				; --- ForToDoCondition
  8943 4CFC A9 00			lda @FORTMP_1462_0::#$00
  8944 4CFE CD 17 A1			cmp Y
  8945 4D01 B0 03 4C FB 4D		jcc l_1473
  8946
  8947 				; optimize OK (service.pas), line = 1583
  8948
  8949 4D06 AD 18 A1			lda XS
  8950 4D09 18 69 08			add #$08
  8951 4D0C 8D 16 A1			sta X
  8952 4D0F AD 18 A1			lda XS
  8953 4D12 18 69 18			add #$18
  8954 4D15 8D 19 4D			sta @FORTMP_1483_0
  8955
  8956 4D18			l_1486
  8957 				; --- ForToDoCondition
  8958 4D18 A9 00			lda @FORTMP_1483_0::#$00
  8959 4D1A CD 16 A1			cmp X
  8960 4D1D B0 03 4C F3 4D		jcc l_1494
  8961
  8962 				; optimize OK (service.pas), line = 1584
  8963
  8964 4D22 AD 16 A1			lda X
  8965 4D25 C9 D8			cmp #$D8
  8966 4D27 90 03 4C EB 4D		jcs l_14A6
  8967
  8968 				; optimize OK (service.pas), line = 1591
  8969
  8970 4D2C AD 0F 9C			lda PLAYSCREEN.OFS
  8971 4D2F 6D 16 A1			adc X
  8972 4D32 85 9F			sta :STACKORIGIN+9
  8973 4D34 AD 10 9C			lda PLAYSCREEN.OFS+1
  8974 4D37 69 00			adc #$00
  8975 4D39 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8976 4D3B AD 11 9C			lda PLAYSCREEN.OFS+2
  8977 4D3E 69 00			adc #$00
  8978 4D40 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8979 4D42 AD 12 9C			lda PLAYSCREEN.OFS+3
  8980 4D45 69 00			adc #$00
  8981 4D47 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8982 4D49 AC 17 A1			ldy Y
  8983 4D4C A5 9F			lda :STACKORIGIN+9
  8984 4D4E 18 79 00 C0			add adr.ROW,y
  8985 4D52 8D 3B A0			sta GETBYTE.SRC
  8986 4D55 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8987 4D57 79 FB C0			adc adr.ROW+251,y
  8988 4D5A 8D 3C A0			sta GETBYTE.SRC+1
  8989 4D5D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8990 4D5F 69 00			adc #$00
  8991 4D61 8D 3D A0			sta GETBYTE.SRC+2
  8992 4D64 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8993 4D66 69 00			adc #$00
  8994 4D68 8D 3E A0			sta GETBYTE.SRC+3
  8995 4D6B 20 31 2D			jsr GETBYTE
  8996 4D6E AD 3F A0			lda GETBYTE.RESULT
  8997 4D71 29 7F			and #$7F
  8998 4D73 8D 1C A1			sta CL
  8999
  9000 				; optimize OK (service.pas), line = 1595
  9001
  9002 4D76 AC 17 A1			ldy Y
  9003 4D79 AD 16 A1			lda X
  9004 4D7C 18 79 00 C0			add adr.ROW,y
  9005 4D80 8D 36 A0			sta PUTBYTE.DST
  9006 4D83 A9 50			lda #$50
  9007 4D85 79 FB C0			adc adr.ROW+251,y
  9008 4D88 8D 37 A0			sta PUTBYTE.DST+1
  9009 4D8B A9 00			lda #$00
  9010 4D8D 69 00			adc #$00
  9011 4D8F 8D 38 A0			sta PUTBYTE.DST+2
  9012 4D92 A9 00			lda #$00
  9013 4D94 69 00			adc #$00
  9014 4D96 8D 39 A0			sta PUTBYTE.DST+3
  9015 4D99 AD 1C A1			lda CL
  9016 4D9C 8D 3A A0			sta PUTBYTE.V
  9017 4D9F 20 09 2D			jsr PUTBYTE
  9018
  9019 				; optimize OK (service.pas), line = 1599
  9020
  9021 4DA2 AD 0F 9C			lda PLAYSCREEN.OFS
  9022 4DA5 18 6D 16 A1			add X
  9023 4DA9 85 A0			sta :STACKORIGIN+10
  9024 4DAB AD 10 9C			lda PLAYSCREEN.OFS+1
  9025 4DAE 69 00			adc #$00
  9026 4DB0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9027 4DB2 AD 11 9C			lda PLAYSCREEN.OFS+2
  9028 4DB5 69 00			adc #$00
  9029 4DB7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9030 4DB9 AD 12 9C			lda PLAYSCREEN.OFS+3
  9031 4DBC 69 00			adc #$00
  9032 4DBE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9033 4DC0 AC 17 A1			ldy Y
  9034 4DC3 A5 A0			lda :STACKORIGIN+10
  9035 4DC5 18 79 00 C0			add adr.ROW,y
  9036 4DC9 8D 36 A0			sta PUTBYTE.DST
  9037 4DCC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9038 4DCE 79 FB C0			adc adr.ROW+251,y
  9039 4DD1 8D 37 A0			sta PUTBYTE.DST+1
  9040 4DD4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9041 4DD6 69 00			adc #$00
  9042 4DD8 8D 38 A0			sta PUTBYTE.DST+2
  9043 4DDB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9044 4DDD 69 00			adc #$00
  9045 4DDF 8D 39 A0			sta PUTBYTE.DST+3
  9046 4DE2 AD 1C A1			lda CL
  9047 4DE5 8D 3A A0			sta PUTBYTE.V
  9048 4DE8 20 09 2D			jsr PUTBYTE
  9049 4DEB			l_14A6
  9050
  9051 				; --- ForToDoEpilog
  9052 4DEB EE 16 A1			inc X
  9053 4DEE F0 03 4C 18 4D		jne l_1486
  9054 4DF3			l_1494
  9055
  9056 				; --- ForToDoEpilog
  9057 4DF3 EE 17 A1			inc Y
  9058 4DF6 F0 03 4C FC 4C		jne l_1465
  9059 4DFB			l_1473
  9060
  9061 				; optimize OK (service.pas), line = 1602
  9062
  9063 4DFB AD 15 A1			lda BLOCK
  9064 4DFE C9 09			cmp #$09
  9065 4E00 B0 03 4C 8B 50		jcc l_1502
  9066
  9067 				; optimize OK (service.pas), line = 1604
  9068
  9069 4E05 A9 00			lda #$00
  9070 4E07 8D 1D A1			sta CL2
  9071
  9072 				; optimize OK (service.pas), line = 1605
  9073
  9074 4E0A AD 15 A1			lda BLOCK
  9075 4E0D 29 0F			and #$0F
  9076 4E0F C9 09			cmp #$09
  9077 4E11 D0 19			jne l_151D
  9078
  9079 				; optimize OK (service.pas), line = 1607
  9080
  9081 4E13 A9 CA			lda #$CA
  9082 4E15 8D 1D A1			sta CL2
  9083
  9084 				; optimize OK (service.pas), line = 1608
  9085
  9086 4E18 AD 14 A1			lda YA
  9087 4E1B 0A				asl @
  9088 4E1C 0A				asl @
  9089 4E1D 0A				asl @
  9090 4E1E 0A				asl @
  9091 4E1F 18 6D 13 A1			add XA
  9092 4E23 A8				tay
  9093 4E24 A9 19			lda #$19
  9094 4E26 99 00 DB			sta adr.WALL,y
  9095 4E29 4C 38 4E			jmp l_153C
  9096 4E2C			l_151D
  9097
  9098 				; optimize OK (service.pas), line = 1614
  9099
  9100 4E2C AD 15 A1			lda BLOCK
  9101 4E2F C9 0A			cmp #$0A
  9102 4E31 D0 05			jne l_154E
  9103 4E33 A9 C9			lda #$C9
  9104 4E35 8D 1D A1			sta CL2
  9105 4E38			l_153C
  9106 4E38			l_154E
  9107
  9108 				; optimize OK (service.pas), line = 1618
  9109
  9110 4E38 A9 00			lda #$00
  9111 4E3A 8D 17 A1			sta Y
  9112
  9113 4E3D			l_155E
  9114 				; --- ForToDoCondition
  9115 4E3D AD 17 A1			lda Y
  9116 4E40 C9 07			cmp #$07
  9117 4E42 90 03 4C 42 4F		jcs l_156C
  9118
  9119 				; optimize OK (service.pas), line = 1624
  9120
  9121 4E47 AD 0F 9C			lda PLAYSCREEN.OFS
  9122 4E4A 6D 18 A1			adc XS
  9123 4E4D 85 9F			sta :STACKORIGIN+9
  9124 4E4F AD 10 9C			lda PLAYSCREEN.OFS+1
  9125 4E52 6D 19 A1			adc XS+1
  9126 4E55 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9127 4E57 AD 11 9C			lda PLAYSCREEN.OFS+2
  9128 4E5A 69 00			adc #$00
  9129 4E5C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9130 4E5E AD 12 9C			lda PLAYSCREEN.OFS+3
  9131 4E61 69 00			adc #$00
  9132 4E63 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9133 4E65 AD 17 A1			lda Y
  9134 4E68 18 6D 1A A1			add YS
  9135 4E6C A8				tay
  9136 4E6D A5 9F			lda :STACKORIGIN+9
  9137 4E6F 18 79 00 C0			add adr.ROW,y
  9138 4E73 8D 3B A0			sta GETBYTE.SRC
  9139 4E76 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9140 4E78 79 FB C0			adc adr.ROW+251,y
  9141 4E7B 8D 3C A0			sta GETBYTE.SRC+1
  9142 4E7E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9143 4E80 69 00			adc #$00
  9144 4E82 8D 3D A0			sta GETBYTE.SRC+2
  9145 4E85 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9146 4E87 69 00			adc #$00
  9147 4E89 8D 3E A0			sta GETBYTE.SRC+3
  9148 4E8C 20 31 2D			jsr GETBYTE
  9149 4E8F AD 3F A0			lda GETBYTE.RESULT
  9150 4E92 29 80			and #$80
  9151 4E94 8D 1C A1			sta CL
  9152
  9153 				; optimize OK (service.pas), line = 1626
  9154
  9155 4E97 AD 1D A1			lda CL2
  9156 4E9A 29 7F			and #$7F
  9157 4E9C 0D 1C A1			ora CL
  9158 4E9F 8D 1D A1			sta CL2
  9159
  9160 				; optimize OK (service.pas), line = 1630
  9161
  9162 4EA2 AD 18 A1			lda XS
  9163 4EA5 85 A0			sta :STACKORIGIN+10
  9164 4EA7 A9 50			lda #$50
  9165 4EA9 18 6D 19 A1			add XS+1
  9166 4EAD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9167 4EAF A9 00			lda #$00
  9168 4EB1 69 00			adc #$00
  9169 4EB3 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9170 4EB5 A9 00			lda #$00
  9171 4EB7 69 00			adc #$00
  9172 4EB9 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9173 4EBB AD 1A A1			lda YS
  9174 4EBE 18 6D 17 A1			add Y
  9175 4EC2 A8				tay
  9176 4EC3 A5 A0			lda :STACKORIGIN+10
  9177 4EC5 18 79 00 C0			add adr.ROW,y
  9178 4EC9 8D 36 A0			sta PUTBYTE.DST
  9179 4ECC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9180 4ECE 79 FB C0			adc adr.ROW+251,y
  9181 4ED1 8D 37 A0			sta PUTBYTE.DST+1
  9182 4ED4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9183 4ED6 69 00			adc #$00
  9184 4ED8 8D 38 A0			sta PUTBYTE.DST+2
  9185 4EDB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9186 4EDD 69 00			adc #$00
  9187 4EDF 8D 39 A0			sta PUTBYTE.DST+3
  9188 4EE2 AD 1D A1			lda CL2
  9189 4EE5 8D 3A A0			sta PUTBYTE.V
  9190 4EE8 20 09 2D			jsr PUTBYTE
  9191
  9192 				; optimize OK (service.pas), line = 1634
  9193
  9194 4EEB AD 0F 9C			lda PLAYSCREEN.OFS
  9195 4EEE 18 6D 18 A1			add XS
  9196 4EF2 85 A0			sta :STACKORIGIN+10
  9197 4EF4 AD 10 9C			lda PLAYSCREEN.OFS+1
  9198 4EF7 6D 19 A1			adc XS+1
  9199 4EFA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9200 4EFC AD 11 9C			lda PLAYSCREEN.OFS+2
  9201 4EFF 69 00			adc #$00
  9202 4F01 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9203 4F03 AD 12 9C			lda PLAYSCREEN.OFS+3
  9204 4F06 69 00			adc #$00
  9205 4F08 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9206 4F0A AD 1A A1			lda YS
  9207 4F0D 18 6D 17 A1			add Y
  9208 4F11 A8				tay
  9209 4F12 A5 A0			lda :STACKORIGIN+10
  9210 4F14 18 79 00 C0			add adr.ROW,y
  9211 4F18 8D 36 A0			sta PUTBYTE.DST
  9212 4F1B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9213 4F1D 79 FB C0			adc adr.ROW+251,y
  9214 4F20 8D 37 A0			sta PUTBYTE.DST+1
  9215 4F23 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9216 4F25 69 00			adc #$00
  9217 4F27 8D 38 A0			sta PUTBYTE.DST+2
  9218 4F2A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9219 4F2C 69 00			adc #$00
  9220 4F2E 8D 39 A0			sta PUTBYTE.DST+3
  9221 4F31 AD 1D A1			lda CL2
  9222 4F34 8D 3A A0			sta PUTBYTE.V
  9223 4F37 20 09 2D			jsr PUTBYTE
  9224
  9225 				; --- ForToDoEpilog
  9226 4F3A EE 17 A1			inc Y
  9227 4F3D F0 03 4C 3D 4E		jne l_155E
  9228 4F42			l_156C
  9229
  9230 				; optimize OK (service.pas), line = 1638
  9231
  9232 4F42 A9 00			lda #$00
  9233 4F44 8D 16 A1			sta X
  9234
  9235 4F47			l_15D3
  9236 				; --- ForToDoCondition
  9237 4F47 AD 16 A1			lda X
  9238 4F4A C9 0F			cmp #$0F
  9239 4F4C 90 03 4C 8B 50		jcs l_15E1
  9240
  9241 				; optimize OK (service.pas), line = 1642
  9242
  9243 4F51 AD 0F 9C			lda PLAYSCREEN.OFS
  9244 4F54 6D 18 A1			adc XS
  9245 4F57 85 9F			sta :STACKORIGIN+9
  9246 4F59 AD 10 9C			lda PLAYSCREEN.OFS+1
  9247 4F5C 6D 19 A1			adc XS+1
  9248 4F5F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9249 4F61 AD 11 9C			lda PLAYSCREEN.OFS+2
  9250 4F64 69 00			adc #$00
  9251 4F66 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9252 4F68 AD 12 9C			lda PLAYSCREEN.OFS+3
  9253 4F6B 69 00			adc #$00
  9254 4F6D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9255 4F6F A5 9F			lda :STACKORIGIN+9
  9256 4F71 18 6D 16 A1			add X
  9257 4F75 85 9F			sta :STACKORIGIN+9
  9258 4F77 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9259 4F79 69 00			adc #$00
  9260 4F7B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9261 4F7D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9262 4F7F 69 00			adc #$00
  9263 4F81 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9264 4F83 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9265 4F85 69 00			adc #$00
  9266 4F87 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9267 4F89 AC 1A A1			ldy YS
  9268 4F8C A5 9F			lda :STACKORIGIN+9
  9269 4F8E 18 79 00 C0			add adr.ROW,y
  9270 4F92 8D 3B A0			sta GETBYTE.SRC
  9271 4F95 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9272 4F97 79 FB C0			adc adr.ROW+251,y
  9273 4F9A 8D 3C A0			sta GETBYTE.SRC+1
  9274 4F9D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9275 4F9F 69 00			adc #$00
  9276 4FA1 8D 3D A0			sta GETBYTE.SRC+2
  9277 4FA4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9278 4FA6 69 00			adc #$00
  9279 4FA8 8D 3E A0			sta GETBYTE.SRC+3
  9280 4FAB 20 31 2D			jsr GETBYTE
  9281 4FAE AD 3F A0			lda GETBYTE.RESULT
  9282 4FB1 29 80			and #$80
  9283 4FB3 8D 1C A1			sta CL
  9284
  9285 				; optimize OK (service.pas), line = 1644
  9286
  9287 4FB6 AD 1D A1			lda CL2
  9288 4FB9 29 7F			and #$7F
  9289 4FBB 0D 1C A1			ora CL
  9290 4FBE 8D 1D A1			sta CL2
  9291
  9292 				; optimize OK (service.pas), line = 1647
  9293
  9294 4FC1 AD 18 A1			lda XS
  9295 4FC4 85 A0			sta :STACKORIGIN+10
  9296 4FC6 A9 50			lda #$50
  9297 4FC8 18 6D 19 A1			add XS+1
  9298 4FCC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9299 4FCE A9 00			lda #$00
  9300 4FD0 69 00			adc #$00
  9301 4FD2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9302 4FD4 A9 00			lda #$00
  9303 4FD6 69 00			adc #$00
  9304 4FD8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9305 4FDA A5 A0			lda :STACKORIGIN+10
  9306 4FDC 18 6D 16 A1			add X
  9307 4FE0 85 A0			sta :STACKORIGIN+10
  9308 4FE2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9309 4FE4 69 00			adc #$00
  9310 4FE6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9311 4FE8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9312 4FEA 69 00			adc #$00
  9313 4FEC 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9314 4FEE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9315 4FF0 69 00			adc #$00
  9316 4FF2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9317 4FF4 AC 1A A1			ldy YS
  9318 4FF7 A5 A0			lda :STACKORIGIN+10
  9319 4FF9 18 79 00 C0			add adr.ROW,y
  9320 4FFD 8D 36 A0			sta PUTBYTE.DST
  9321 5000 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9322 5002 79 FB C0			adc adr.ROW+251,y
  9323 5005 8D 37 A0			sta PUTBYTE.DST+1
  9324 5008 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9325 500A 69 00			adc #$00
  9326 500C 8D 38 A0			sta PUTBYTE.DST+2
  9327 500F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9328 5011 69 00			adc #$00
  9329 5013 8D 39 A0			sta PUTBYTE.DST+3
  9330 5016 AD 1D A1			lda CL2
  9331 5019 8D 3A A0			sta PUTBYTE.V
  9332 501C 20 09 2D			jsr PUTBYTE
  9333
  9334 				; optimize OK (service.pas), line = 1650
  9335
  9336 501F AD 0F 9C			lda PLAYSCREEN.OFS
  9337 5022 18 6D 18 A1			add XS
  9338 5026 85 A0			sta :STACKORIGIN+10
  9339 5028 AD 10 9C			lda PLAYSCREEN.OFS+1
  9340 502B 6D 19 A1			adc XS+1
  9341 502E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9342 5030 AD 11 9C			lda PLAYSCREEN.OFS+2
  9343 5033 69 00			adc #$00
  9344 5035 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9345 5037 AD 12 9C			lda PLAYSCREEN.OFS+3
  9346 503A 69 00			adc #$00
  9347 503C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9348 503E A5 A0			lda :STACKORIGIN+10
  9349 5040 18 6D 16 A1			add X
  9350 5044 85 A0			sta :STACKORIGIN+10
  9351 5046 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9352 5048 69 00			adc #$00
  9353 504A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9354 504C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9355 504E 69 00			adc #$00
  9356 5050 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9357 5052 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9358 5054 69 00			adc #$00
  9359 5056 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9360 5058 AC 1A A1			ldy YS
  9361 505B A5 A0			lda :STACKORIGIN+10
  9362 505D 18 79 00 C0			add adr.ROW,y
  9363 5061 8D 36 A0			sta PUTBYTE.DST
  9364 5064 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9365 5066 79 FB C0			adc adr.ROW+251,y
  9366 5069 8D 37 A0			sta PUTBYTE.DST+1
  9367 506C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9368 506E 69 00			adc #$00
  9369 5070 8D 38 A0			sta PUTBYTE.DST+2
  9370 5073 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9371 5075 69 00			adc #$00
  9372 5077 8D 39 A0			sta PUTBYTE.DST+3
  9373 507A AD 1D A1			lda CL2
  9374 507D 8D 3A A0			sta PUTBYTE.V
  9375 5080 20 09 2D			jsr PUTBYTE
  9376
  9377 				; --- ForToDoEpilog
  9378 5083 EE 16 A1			inc X
  9379 5086 F0 03 4C 47 4F		jne l_15D3
  9380 508B			l_15E1
  9381 508B			l_1502
  9382
  9383 				; ------------------------------------------------------------
  9384
  9385 = A113			XA	= DATAORIGIN+$0618
  9386 = A114			YA	= DATAORIGIN+$0619
  9387 = A115			BLOCK	= DATAORIGIN+$061A
  9388 = A116			X	= DATAORIGIN+$061B
  9389 = A117			Y	= DATAORIGIN+$061C
  9390 = A118			XS	= DATAORIGIN+$061D
  9391 = A11A			YS	= DATAORIGIN+$061F
  9392 = A11C			CL	= DATAORIGIN+$0621
  9393 = A11D			CL2	= DATAORIGIN+$0622
  9394 = A11E			SHADOW	= DATAORIGIN+$0623
  9395
  9396 = A113			@VarData	= XA
  9397 = 000C			@VarDataSize	= 12
  9398
  9399 508B			@exit
  9400 					.ifdef @new
  9401 					lda <@VarData
  9402 					sta :ztmp
  9403 					lda >@VarData
  9404 					ldy #@VarDataSize-1
  9405 					jmp @FreeMem
  9406 					els
  9407 508B 60				rts						; ret
  9408 					eif
  9409 				.endl
  9410
  9411 508C			.local	PUT_WALL					; PROCEDURE
  9412
  9413 				; optimize OK (service.pas), line = 1660
  9414
  9415 508C A9 00			lda #$00
  9416 508E 8D 22 A1			sta Y
  9417
  9418 5091			l_164E
  9419 				; --- ForToDoCondition
  9420 5091 AD 22 A1			lda Y
  9421 5094 C9 0F			cmp #$0F
  9422 5096 B0 48			jcs l_165C
  9423
  9424 				; optimize OK (service.pas), line = 1661
  9425
  9426 5098 A9 00			lda #$00
  9427 509A 8D 21 A1			sta X
  9428
  9429 509D			l_1665
  9430 				; --- ForToDoCondition
  9431 509D AD 21 A1			lda X
  9432 50A0 C9 0D			cmp #$0D
  9433 50A2 B0 37			jcs l_1673
  9434
  9435 				; optimize OK (service.pas), line = 1662
  9436
  9437 50A4 AD 22 A1			lda Y
  9438 50A7 0A				asl @
  9439 50A8 0A				asl @
  9440 50A9 0A				asl @
  9441 50AA 0A				asl @
  9442 50AB 18 6D 21 A1			add X
  9443 50AF A8				tay
  9444 50B0 B9 00 DB			lda adr.WALL,y
  9445 50B3 F0 21			jeq l_1692
  9446 50B5 AD 22 A1			lda Y
  9447 50B8 0A				asl @
  9448 50B9 0A				asl @
  9449 50BA 0A				asl @
  9450 50BB 0A				asl @
  9451 50BC 18 6D 21 A1			add X
  9452 50C0 A8				tay
  9453 50C1 B9 00 DB			lda adr.WALL,y
  9454 50C4 8D 15 A1			sta PLACE_BLOCK.BLOCK
  9455 50C7 AD 21 A1			lda X
  9456 50CA 8D 13 A1			sta PLACE_BLOCK.XA
  9457 50CD AD 22 A1			lda Y
  9458 50D0 8D 14 A1			sta PLACE_BLOCK.YA
  9459 50D3 20 48 4A			jsr PLACE_BLOCK
  9460 50D6			l_1692
  9461
  9462 				; --- ForToDoEpilog
  9463 50D6 EE 21 A1			inc X
  9464 50D9 D0 C2			jne l_1665
  9465 50DB			l_1673
  9466
  9467 				; --- ForToDoEpilog
  9468 50DB EE 22 A1			inc Y
  9469 50DE D0 B1			jne l_164E
  9470 50E0			l_165C
  9471
  9472 				; ------------------------------------------------------------
  9473
  9474 = A121			X	= DATAORIGIN+$0626
  9475 = A122			Y	= DATAORIGIN+$0627
  9476
  9477 = A121			@VarData	= X
  9478 = 0002			@VarDataSize	= 2
  9479
  9480 50E0			@exit
  9481 					.ifdef @new
  9482 					lda <@VarData
  9483 					sta :ztmp
  9484 					lda >@VarData
  9485 					ldy #@VarDataSize-1
  9486 					jmp @FreeMem
  9487 					els
  9488 50E0 60				rts						; ret
  9489 					eif
  9490 				.endl
  9491
  9492 50E1			.local	SET_WALL					; PROCEDURE
  9493
  9494 				; optimize OK (service.pas), line = 1671
  9495
  9496 50E1 A9 00			lda #$00
  9497 50E3 8D C2 9C			sta REMAIN_BLK
  9498
  9499 				; optimize OK (service.pas), line = 1672
  9500
  9501 50E6 AC DF 9C			ldy CUR_PLAYER
  9502 50E9 B9 D0 9C			lda adr.SCORE.WALL_N,y
  9503 50EC 8D 25 A1			sta WL
  9504
  9505 				; optimize OK (service.pas), line = 1675
  9506
  9507 50EF A9 00			lda #$00
  9508 50F1 8D 24 A1			sta Y
  9509
  9510 50F4			l_16D0
  9511 				; --- ForToDoCondition
  9512 50F4 AD 24 A1			lda Y
  9513 50F7 C9 0F			cmp #$0F
  9514 50F9 B0 3D			jcs l_16DE
  9515
  9516 				; optimize OK (service.pas), line = 1676
  9517
  9518 50FB A9 00			lda #$00
  9519 50FD 8D 23 A1			sta X
  9520
  9521 5100			l_16E7
  9522 				; --- ForToDoCondition
  9523 5100 AD 23 A1			lda X
  9524 5103 C9 0D			cmp #$0D
  9525 5105 B0 2C			jcs l_16F5
  9526
  9527 				; optimize OK (service.pas), line = 1679
  9528
  9529 5107 AD 24 A1			lda Y
  9530 510A 0A				asl @
  9531 510B 0A				asl @
  9532 510C 0A				asl @
  9533 510D 0A				asl @
  9534 510E 18 6D 23 A1			add X
  9535 5112 A8				tay
  9536 5113 B9 00 DB			lda adr.WALL,y
  9537 5116 F0 16			jeq l_172D
  9538 5118 AD 24 A1			lda Y
  9539 511B 0A				asl @
  9540 511C 0A				asl @
  9541 511D 0A				asl @
  9542 511E 0A				asl @
  9543 511F 18 6D 23 A1			add X
  9544 5123 A8				tay
  9545 5124 B9 00 DB			lda adr.WALL,y
  9546 5127 C9 0A			cmp #$0A
  9547 5129 F0 03			jeq l_172D
  9548 512B EE C2 9C			inc REMAIN_BLK
  9549 512E			l_172D
  9550
  9551 				; --- ForToDoEpilog
  9552 512E EE 23 A1			inc X
  9553 5131 D0 CD			jne l_16E7
  9554 5133			l_16F5
  9555
  9556 				; --- ForToDoEpilog
  9557 5133 EE 24 A1			inc Y
  9558 5136 D0 BC			jne l_16D0
  9559 5138			l_16DE
  9560
  9561 				; optimize OK (service.pas), line = 1681
  9562
  9563 5138 AD 25 A1			lda WL
  9564 513B 38 E9 01			sub #$01
  9565 513E 85 86			sta @SMALLINT.MOD.A
  9566 5140 A9 00			lda #$00
  9567 5142 E9 00			sbc #$00
  9568 5144 85 87			sta @SMALLINT.MOD.A+1
  9569 5146 A9 04			lda #$04
  9570 5148 85 8E			sta @SMALLINT.MOD.B
  9571 514A A9 00			lda #$00
  9572 514C 85 8F			sta @SMALLINT.MOD.B+1
  9573 514E 20 68 12			jsr @SMALLINT.MOD
  9574 5151 A5 92			lda @SMALLINT.MOD.RESULT
  9575 5153 8D 25 A1			sta WL
  9576
  9577 				; optimize OK (service.pas), line = 1683
  9578
  9579 5156 8D 26 A1			sta @CASETMP_0008
  9580 5159 C9 00			cmp #$00
  9581 515B D0 33			jne l_1757
  9582 				@
  9583
  9584 				; optimize OK (service.pas), line = 1684
  9585
  9586 515D AD 98 9C 8D 90 9C + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9587 518D 4C 69 52			jmp a_0008
  9588 5190			l_1757
  9589 5190 C9 01			cmp #$01
  9590 5192 D0 33			jne l_1760
  9591
  9592 				; optimize OK (service.pas), line = 1685
  9593
  9594 5194 AD A0 9C 8D 90 9C + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9595 51C4 4C 69 52			jmp a_0008
  9596 51C7			l_1760
  9597 51C7 C9 02			cmp #$02
  9598 51C9 D0 33			jne l_1769
  9599
  9600 				; optimize OK (service.pas), line = 1686
  9601
  9602 51CB AD A8 9C 8D 90 9C + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9603 51FB 4C 69 52			jmp a_0008
  9604 51FE			l_1769
  9605 51FE C9 03			cmp #$03
  9606 5200 D0 33			jne l_1772
  9607
  9608 				; optimize OK (service.pas), line = 1687
  9609
  9610 5202 AD B0 9C 8D 90 9C + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9611 5232 4C 69 52			jmp a_0008
  9612 5235			l_1772
  9613 5235 C9 04			cmp #$04
  9614 5237 D0 30			jne l_177B
  9615
  9616 				; optimize OK (service.pas), line = 1688
  9617
  9618 5239 AD B8 9C 8D 90 9C + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9619 5269			l_177B
  9620 5269			a_0008
  9621
  9622 				; ------------------------------------------------------------
  9623
  9624 = A123			X	= DATAORIGIN+$0628
  9625 = A124			Y	= DATAORIGIN+$0629
  9626 = A125			WL	= DATAORIGIN+$062A
  9627 = A126			@CASETMP_0008	= DATAORIGIN+$062B
  9628
  9629 = A123			@VarData	= X
  9630 = 0004			@VarDataSize	= 4
  9631
  9632 5269			@exit
  9633 					.ifdef @new
  9634 					lda <@VarData
  9635 					sta :ztmp
  9636 					lda >@VarData
  9637 					ldy #@VarDataSize-1
  9638 					jmp @FreeMem
  9639 					els
  9640 5269 60				rts						; ret
  9641 					eif
  9642 				.endl
  9643
  9644 526A			.local	SPLIT_LINE					; FUNCTION
  9645
  9646 				; optimize OK (service.pas), line = 1727
  9647
  9648 526A AC 27 A1 84 84 AC + 	mwy X1 :bp2
  9649 5274 A0 00			ldy #$00
  9650 5276 B1 84			lda (:bp2),y
  9651 5278 18 69 10			add #$10
  9652 527B 91 84			sta (:bp2),y
  9653 527D C8				iny
  9654 527E B1 84			lda (:bp2),y
  9655 5280 69 00			adc #$00
  9656 5282 91 84			sta (:bp2),y
  9657
  9658 				; optimize OK (service.pas), line = 1728
  9659
  9660 5284 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
  9661 528E A0 00			ldy #$00
  9662 5290 B1 84			lda (:bp2),y
  9663 5292 18 69 18			add #$18
  9664 5295 91 84			sta (:bp2),y
  9665 5297 C8				iny
  9666 5298 B1 84			lda (:bp2),y
  9667 529A 69 00			adc #$00
  9668 529C 91 84			sta (:bp2),y
  9669
  9670 				; optimize OK (service.pas), line = 1729
  9671
  9672 529E AC 2B A1 84 84 AC + 	mwy X2 :bp2
  9673 52A8 A0 00			ldy #$00
  9674 52AA B1 84			lda (:bp2),y
  9675 52AC 18 69 10			add #$10
  9676 52AF 91 84			sta (:bp2),y
  9677 52B1 C8				iny
  9678 52B2 B1 84			lda (:bp2),y
  9679 52B4 69 00			adc #$00
  9680 52B6 91 84			sta (:bp2),y
  9681
  9682 				; optimize OK (service.pas), line = 1730
  9683
  9684 52B8 AC 2D A1 84 84 AC + 	mwy Y2 :bp2
  9685 52C2 A0 00			ldy #$00
  9686 52C4 B1 84			lda (:bp2),y
  9687 52C6 18 69 18			add #$18
  9688 52C9 91 84			sta (:bp2),y
  9689 52CB C8				iny
  9690 52CC B1 84			lda (:bp2),y
  9691 52CE 69 00			adc #$00
  9692 52D0 91 84			sta (:bp2),y
  9693
  9694 				; optimize OK (service.pas), line = 1732
  9695
  9696 52D2 A9 00			lda #$00
  9697 52D4 8D 50 A1			sta COLLISION
  9698
  9699 				; optimize OK (service.pas), line = 1734
  9700
  9701 52D7 AC 27 A1 84 84 AC + 	mwy X1 :bp2
  9702 52E1 A0 00			ldy #$00
  9703 52E3 B1 84			lda (:bp2),y
  9704 52E5 85 9F			sta :STACKORIGIN+9
  9705 52E7 C8				iny
  9706 52E8 B1 84			lda (:bp2),y
  9707 52EA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9708 52EC A0 00			ldy #$00
  9709 52EE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9710 52F0 10 01			spl
  9711 52F2 88				dey
  9712 52F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9713 52F5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9714 52F7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9715 52F9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9716 52FB 66 9F			ror :STACKORIGIN+9
  9717 52FD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9718 52FF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9719 5301 66 9F			ror :STACKORIGIN+9
  9720 5303 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9721 5305 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9722 5307 66 9F			ror :STACKORIGIN+9
  9723 5309 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9724 530B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9725 530D 66 9F			ror :STACKORIGIN+9
  9726 530F A5 9F			lda :STACKORIGIN+9
  9727 5311 8D 44 A1			sta XP1
  9728 5314 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9729 5316 8D 45 A1			sta XP1+1
  9730
  9731 				; optimize OK (service.pas), line = 1735
  9732
  9733 5319 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
  9734 5323 A0 00			ldy #$00
  9735 5325 B1 84			lda (:bp2),y
  9736 5327 85 9F			sta :STACKORIGIN+9
  9737 5329 C8				iny
  9738 532A B1 84			lda (:bp2),y
  9739 532C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9740 532E A0 00			ldy #$00
  9741 5330 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9742 5332 10 01			spl
  9743 5334 88				dey
  9744 5335 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9745 5337 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9746 5339 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9747 533B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9748 533D 66 9F			ror :STACKORIGIN+9
  9749 533F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9750 5341 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9751 5343 66 9F			ror :STACKORIGIN+9
  9752 5345 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9753 5347 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9754 5349 66 9F			ror :STACKORIGIN+9
  9755 534B A5 9F			lda :STACKORIGIN+9
  9756 534D 8D 46 A1			sta YP1
  9757 5350 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9758 5352 8D 47 A1			sta YP1+1
  9759
  9760 				; optimize OK (service.pas), line = 1736
  9761
  9762 5355 AC 2B A1 84 84 AC + 	mwy X2 :bp2
  9763 535F A0 00			ldy #$00
  9764 5361 B1 84			lda (:bp2),y
  9765 5363 85 9F			sta :STACKORIGIN+9
  9766 5365 C8				iny
  9767 5366 B1 84			lda (:bp2),y
  9768 5368 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9769 536A A0 00			ldy #$00
  9770 536C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9771 536E 10 01			spl
  9772 5370 88				dey
  9773 5371 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9774 5373 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9775 5375 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9776 5377 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9777 5379 66 9F			ror :STACKORIGIN+9
  9778 537B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9779 537D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9780 537F 66 9F			ror :STACKORIGIN+9
  9781 5381 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9782 5383 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9783 5385 66 9F			ror :STACKORIGIN+9
  9784 5387 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9785 5389 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9786 538B 66 9F			ror :STACKORIGIN+9
  9787 538D A5 9F			lda :STACKORIGIN+9
  9788 538F 8D 48 A1			sta XP2
  9789 5392 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9790 5394 8D 49 A1			sta XP2+1
  9791
  9792 				; optimize OK (service.pas), line = 1737
  9793
  9794 5397 AC 2D A1 84 84 AC + 	mwy Y2 :bp2
  9795 53A1 A0 00			ldy #$00
  9796 53A3 B1 84			lda (:bp2),y
  9797 53A5 85 9F			sta :STACKORIGIN+9
  9798 53A7 C8				iny
  9799 53A8 B1 84			lda (:bp2),y
  9800 53AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9801 53AC A0 00			ldy #$00
  9802 53AE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9803 53B0 10 01			spl
  9804 53B2 88				dey
  9805 53B3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9806 53B5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9807 53B7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9808 53B9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9809 53BB 66 9F			ror :STACKORIGIN+9
  9810 53BD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9811 53BF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9812 53C1 66 9F			ror :STACKORIGIN+9
  9813 53C3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9814 53C5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9815 53C7 66 9F			ror :STACKORIGIN+9
  9816 53C9 A5 9F			lda :STACKORIGIN+9
  9817 53CB 8D 4A A1			sta YP2
  9818 53CE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9819 53D0 8D 4B A1			sta YP2+1
  9820
  9821 				; optimize OK (service.pas), line = 1739
  9822
  9823 53D3 AC 27 A1 84 84 AC + 	mwy X1 :bp2
  9824 53DD A0 00			ldy #$00
  9825 53DF B1 84			lda (:bp2),y
  9826 53E1 8D 34 A1			sta XK
  9827 53E4 C8				iny
  9828 53E5 B1 84			lda (:bp2),y
  9829 53E7 8D 35 A1			sta XK+1
  9830
  9831 				; optimize OK (service.pas), line = 1740
  9832
  9833 53EA AC 29 A1 84 84 AC + 	mwy Y1 :bp2
  9834 53F4 A0 00			ldy #$00
  9835 53F6 B1 84			lda (:bp2),y
  9836 53F8 8D 36 A1			sta YK
  9837 53FB C8				iny
  9838 53FC B1 84			lda (:bp2),y
  9839 53FE 8D 37 A1			sta YK+1
  9840
  9841 				; optimize OK (service.pas), line = 1741
  9842
  9843 5401 AC 2B A1 84 84 AC + 	mwy X2 :bp2
  9844 540B A0 00			ldy #$00
  9845 540D B1 84			lda (:bp2),y
  9846 540F 8D 38 A1			sta XJ
  9847 5412 C8				iny
  9848 5413 B1 84			lda (:bp2),y
  9849 5415 8D 39 A1			sta XJ+1
  9850
  9851 				; optimize OK (service.pas), line = 1742
  9852
  9853 5418 AC 2D A1 84 84 AC + 	mwy Y2 :bp2
  9854 5422 A0 00			ldy #$00
  9855 5424 B1 84			lda (:bp2),y
  9856 5426 8D 3A A1			sta YJ
  9857 5429 C8				iny
  9858 542A B1 84			lda (:bp2),y
  9859 542C 8D 3B A1			sta YJ+1
  9860
  9861 				; optimize OK (service.pas), line = 1744
  9862
  9863 542F AC 27 A1 84 84 AC + 	mwy X1 :bp2
  9864 5439 A0 00			ldy #$00
  9865 543B B1 84			lda (:bp2),y
  9866 543D 8D 3C A1			sta XH
  9867 5440 C8				iny
  9868 5441 B1 84			lda (:bp2),y
  9869 5443 8D 3D A1			sta XH+1
  9870
  9871 				; optimize OK (service.pas), line = 1745
  9872
  9873 5446 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
  9874 5450 A0 00			ldy #$00
  9875 5452 B1 84			lda (:bp2),y
  9876 5454 8D 3E A1			sta YH
  9877 5457 C8				iny
  9878 5458 B1 84			lda (:bp2),y
  9879 545A 8D 3F A1			sta YH+1
  9880
  9881 				; optimize OK (service.pas), line = 1746
  9882
  9883 545D AC 2B A1 84 84 AC + 	mwy X2 :bp2
  9884 5467 A0 00			ldy #$00
  9885 5469 B1 84			lda (:bp2),y
  9886 546B 8D 40 A1			sta XN
  9887 546E C8				iny
  9888 546F B1 84			lda (:bp2),y
  9889 5471 8D 41 A1			sta XN+1
  9890
  9891 				; optimize OK (service.pas), line = 1747
  9892
  9893 5474 AC 2D A1 84 84 AC + 	mwy Y2 :bp2
  9894 547E A0 00			ldy #$00
  9895 5480 B1 84			lda (:bp2),y
  9896 5482 8D 42 A1			sta YN
  9897 5485 C8				iny
  9898 5486 B1 84			lda (:bp2),y
  9899 5488 8D 43 A1			sta YN+1
  9900
  9901 				; optimize OK (service.pas), line = 1754
  9902
  9903 548B AC 27 A1 84 84 AC + 	mwy X1 :bp2
  9904 5495 A0 00			ldy #$00
  9905 5497 B1 84			lda (:bp2),y
  9906 5499 85 9F			sta :STACKORIGIN+9
  9907 549B C8				iny
  9908 549C B1 84			lda (:bp2),y
  9909 549E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9910 54A0 AC 2B A1 84 84 AC + 	mwy X2 :bp2
  9911 54AA A0 00			ldy #$00
  9912 54AC B1 84			lda (:bp2),y
  9913 54AE 85 A0			sta :STACKORIGIN+10
  9914 54B0 C8				iny
  9915 54B1 B1 84			lda (:bp2),y
  9916 54B3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9917 54B5 A0 00			ldy #$00
  9918 54B7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9919 54B9 10 01			spl
  9920 54BB 88				dey
  9921 54BC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9922 54BE 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9923 54C0 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9924 54C2 A0 00			ldy #$00
  9925 54C4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9926 54C6 10 01			spl
  9927 54C8 88				dey
  9928 54C9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9929 54CB 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9930 54CD 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9931 54CF A5 9F			lda :STACKORIGIN+9
  9932 54D1 38 E5 A0			sub :STACKORIGIN+10
  9933 54D4 85 8A			sta SYSTEM.ABS.@010185000.X
  9934 54D6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9935 54D8 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9936 54DA 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9937 54DC A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9938 54DE E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9939 54E0 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9940 54E2 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9941 54E4 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9942 54E6 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9943 54E8 20 AA 1C			jsr SYSTEM.ABS.@010185000
  9944 54EB E8				inx
  9945 54EC A0 01			ldy #1
  9946 54EE				.LOCAL
  9947 54EE A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9948 54F0 38 E9 00			sub #$00
  9949 54F3 D0 1C			bne L4
  9950 54F5 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9951 54F7 C9 00			cmp #$00
  9952 54F9 D0 0A			bne L1
  9953 54FB A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9954 54FD C9 00			cmp #$00
  9955 54FF D0 04			bne L1
  9956 5501 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9957 5503 C9 10			cmp #$10
  9958 5505 F0 10		L1	beq L5
  9959 5507 B0 04			bcs L3
  9960 5509 A9 FF			lda #$FF
  9961 550B D0 0A			bne L5
  9962 550D A9 01		L3	lda #$01
  9963 550F D0 06			bne L5
  9964 5511 50 04		L4	bvc L5
  9965 5513 49 FF			eor #$FF
  9966 5515 09 01			ora #$01
  9967 5517			L5
  9968 					.ENDL
  9969 5517 F0 02			seq
  9970 5519 10 01			bpl @+
  9971 551B 88				dey
  9972 				@
  9973 551C 94 96			sty :STACKORIGIN,x
  9974 551E AC 2D A1 84 84 AC + 	mwy Y2 :bp2
  9975 5528 A0 00			ldy #$00
  9976 552A B1 84			lda (:bp2),y
  9977 552C 85 9F			sta :STACKORIGIN+9
  9978 552E C8				iny
  9979 552F B1 84			lda (:bp2),y
  9980 5531 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9981 5533 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
  9982 553D A0 00			ldy #$00
  9983 553F B1 84			lda (:bp2),y
  9984 5541 85 A0			sta :STACKORIGIN+10
  9985 5543 C8				iny
  9986 5544 B1 84			lda (:bp2),y
  9987 5546 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9988 5548 A0 00			ldy #$00
  9989 554A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9990 554C 10 01			spl
  9991 554E 88				dey
  9992 554F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9993 5551 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9994 5553 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9995 5555 A0 00			ldy #$00
  9996 5557 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9997 5559 10 01			spl
  9998 555B 88				dey
  9999 555C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10000 555E 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10001 5560 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10002 5562 A5 9F			lda :STACKORIGIN+9
 10003 5564 38 E5 A0			sub :STACKORIGIN+10
 10004 5567 85 8A			sta SYSTEM.ABS.@010185000.X
 10005 5569 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10006 556B E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 10007 556D 85 8B			sta SYSTEM.ABS.@010185000.X+1
 10008 556F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10009 5571 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 10010 5573 85 8C			sta SYSTEM.ABS.@010185000.X+2
 10011 5575 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10012 5577 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 10013 5579 85 8D			sta SYSTEM.ABS.@010185000.X+3
 10014 557B 20 AA 1C			jsr SYSTEM.ABS.@010185000
 10015 557E CA				dex
 10016 557F A0 01			ldy #1
 10017 5581				.LOCAL
 10018 5581 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
 10019 5583 38 E9 00			sub #$00
 10020 5586 D0 1C			bne L4
 10021 5588 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
 10022 558A C9 00			cmp #$00
 10023 558C D0 0A			bne L1
 10024 558E A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
 10025 5590 C9 00			cmp #$00
 10026 5592 D0 04			bne L1
 10027 5594 A5 92			lda SYSTEM.ABS.@010185000.RESULT
 10028 5596 C9 08			cmp #$08
 10029 5598 F0 10		L1	beq L5
 10030 559A B0 04			bcs L3
 10031 559C A9 FF			lda #$FF
 10032 559E D0 0A			bne L5
 10033 55A0 A9 01		L3	lda #$01
 10034 55A2 D0 06			bne L5
 10035 55A4 50 04		L4	bvc L5
 10036 55A6 49 FF			eor #$FF
 10037 55A8 09 01			ora #$01
 10038 55AA			L5
 10039 					.ENDL
 10040 55AA F0 02			seq
 10041 55AC 10 01			bpl @+
 10042 55AE 88				dey
 10043 				@
 10044 55AF 98				tya
 10045 55B0 15 97			ora :STACKORIGIN+1,x
 10046 55B2 F0 05			jeq l_1804
 10047
 10048 				; optimize OK (service.pas), line = 1755
 10049
 10050 55B4 A9 01			lda #$01
 10051 55B6 20 B1 2D			jsr FATAL_ERROR
 10052 55B9			l_1804
 10053
 10054 				; optimize OK (service.pas), line = 1758
 10055
 10056 55B9 AD 45 A1			lda XP1+1
 10057 55BC CD 49 A1			cmp XP2+1
 10058 55BF D0 06			bne @+
 10059 55C1 AD 44 A1			lda XP1
 10060 55C4 CD 48 A1			cmp XP2
 10061 				@
 10062 55C7 D0 13			jne l_1827x
 10063 55C9 AD 47 A1			lda YP1+1
 10064 55CC CD 4B A1			cmp YP2+1
 10065 55CF D0 06			bne @+
 10066 55D1 AD 46 A1			lda YP1
 10067 55D4 CD 4A A1			cmp YP2
 10068 				@
 10069 55D7 D0 03 4C 1A 59		jeq l_1827
 10070 55DC			l_1827x
 10071
 10072 				; optimize OK (service.pas), line = 1760
 10073
 10074 55DC AD 47 A1			lda YP1+1
 10075 55DF CD 4B A1			cmp YP2+1
 10076 55E2 D0 06			bne @+
 10077 55E4 AD 46 A1			lda YP1
 10078 55E7 CD 4A A1			cmp YP2
 10079 				@
 10080 55EA D0 03 4C 25 57		jeq l_183A
 10081
 10082 				; optimize OK (service.pas), line = 1762
 10083
 10084 55EF AD 50 A1			lda COLLISION
 10085 55F2 09 01			ora #$01
 10086 55F4 8D 50 A1			sta COLLISION
 10087
 10088 				; --- WhileProlog
 10089 55F7 4C 12 57			jmp l_1847
 10090 55FA			l_1848
 10091
 10092 				; optimize OK (service.pas), line = 1766
 10093
 10094 55FA AD 3C A1			lda XH
 10095 55FD 85 9F			sta :STACKORIGIN+9
 10096 55FF A0 00			ldy #$00
 10097 5601 AD 3D A1			lda XH+1
 10098 5604 10 01			spl
 10099 5606 88				dey
 10100 5607 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10101 5609 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10102 560B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10103 560D AD 40 A1			lda XN
 10104 5610 85 A0			sta :STACKORIGIN+10
 10105 5612 A0 00			ldy #$00
 10106 5614 AD 41 A1			lda XN+1
 10107 5617 10 01			spl
 10108 5619 88				dey
 10109 561A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10110 561C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10111 561E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10112 5620 A5 9F			lda :STACKORIGIN+9
 10113 5622 18 65 A0			add :STACKORIGIN+10
 10114 5625 85 9F			sta :STACKORIGIN+9
 10115 5627 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10116 5629 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10117 562B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10118 562D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10119 562F 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10120 5631 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10121 5633 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10122 5635 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10123 5637 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10124 5639 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10125 563B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10126 563D 66 9F			ror :STACKORIGIN+9
 10127 563F A5 9F			lda :STACKORIGIN+9
 10128 5641 8D 30 A1			sta X
 10129 5644 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10130 5646 8D 31 A1			sta X+1
 10131
 10132 				; optimize OK (service.pas), line = 1767
 10133
 10134 5649 AD 3E A1			lda YH
 10135 564C 85 9F			sta :STACKORIGIN+9
 10136 564E A0 00			ldy #$00
 10137 5650 AD 3F A1			lda YH+1
 10138 5653 10 01			spl
 10139 5655 88				dey
 10140 5656 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10141 5658 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10142 565A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10143 565C AD 42 A1			lda YN
 10144 565F 85 A0			sta :STACKORIGIN+10
 10145 5661 A0 00			ldy #$00
 10146 5663 AD 43 A1			lda YN+1
 10147 5666 10 01			spl
 10148 5668 88				dey
 10149 5669 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10150 566B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10151 566D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10152 566F A5 9F			lda :STACKORIGIN+9
 10153 5671 18 65 A0			add :STACKORIGIN+10
 10154 5674 85 9F			sta :STACKORIGIN+9
 10155 5676 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10156 5678 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10157 567A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10158 567C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10159 567E 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10160 5680 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10161 5682 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10162 5684 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10163 5686 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10164 5688 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10165 568A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10166 568C 66 9F			ror :STACKORIGIN+9
 10167 568E A5 9F			lda :STACKORIGIN+9
 10168 5690 8D 32 A1			sta Y
 10169 5693 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10170 5695 8D 33 A1			sta Y+1
 10171
 10172 				; optimize OK (service.pas), line = 1769
 10173
 10174 5698 AD 32 A1			lda Y
 10175 569B 85 9F			sta :STACKORIGIN+9
 10176 569D A0 00			ldy #$00
 10177 569F AD 33 A1			lda Y+1
 10178 56A2 10 01			spl
 10179 56A4 88				dey
 10180 56A5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10181 56A7 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10182 56A9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10183 56AB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10184 56AD 66 9F			ror :STACKORIGIN+9
 10185 56AF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10186 56B1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10187 56B3 66 9F			ror :STACKORIGIN+9
 10188 56B5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10189 56B7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10190 56B9 66 9F			ror :STACKORIGIN+9
 10191 56BB A5 9F			lda :STACKORIGIN+9
 10192 56BD 8D 4E A1			sta YP
 10193 56C0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10194 56C2 8D 4F A1			sta YP+1
 10195
 10196 				; optimize OK (service.pas), line = 1771
 10197
 10198 56C5 CD 47 A1			cmp YP1+1
 10199 56C8 D0 06			bne @+
 10200 56CA AD 4E A1			lda YP
 10201 56CD CD 46 A1			cmp YP1
 10202 				@
 10203 56D0 D0 18			jne l_187F
 10204
 10205 				; optimize OK (service.pas), line = 1773
 10206
 10207 56D2 AD 30 A1			lda X
 10208 56D5 8D 3C A1			sta XH
 10209 56D8 AD 31 A1			lda X+1
 10210 56DB 8D 3D A1			sta XH+1
 10211
 10212 				; optimize OK (service.pas), line = 1774
 10213
 10214 56DE AD 32 A1			lda Y
 10215 56E1 8D 3E A1			sta YH
 10216 56E4 AD 33 A1			lda Y+1
 10217 56E7 8D 3F A1			sta YH+1
 10218 56EA			l_187F
 10219
 10220 				; optimize OK (service.pas), line = 1777
 10221
 10222 56EA AD 4F A1			lda YP+1
 10223 56ED CD 4B A1			cmp YP2+1
 10224 56F0 D0 06			bne @+
 10225 56F2 AD 4E A1			lda YP
 10226 56F5 CD 4A A1			cmp YP2
 10227 				@
 10228 56F8 D0 18			jne l_189E
 10229
 10230 				; optimize OK (service.pas), line = 1779
 10231
 10232 56FA AD 30 A1			lda X
 10233 56FD 8D 40 A1			sta XN
 10234 5700 AD 31 A1			lda X+1
 10235 5703 8D 41 A1			sta XN+1
 10236
 10237 				; optimize OK (service.pas), line = 1780
 10238
 10239 5706 AD 32 A1			lda Y
 10240 5709 8D 42 A1			sta YN
 10241 570C AD 33 A1			lda Y+1
 10242 570F 8D 43 A1			sta YN+1
 10243 5712			l_189E
 10244 5712			l_1847
 10245
 10246 				; optimize OK (service.pas), line = 1764
 10247
 10248 5712 AD 42 A1			lda YN
 10249 5715 29 07			and #$07
 10250 5717 F0 0C			jeq l_1848w
 10251 5719 AD 42 A1			lda YN
 10252 571C 29 07			and #$07
 10253 571E C9 07			cmp #$07
 10254 5720 F0 03 4C FA 55		jne l_1848
 10255 5725			l_1848w
 10256 5725			l_183A
 10257
 10258 				; optimize OK (service.pas), line = 1786
 10259
 10260 5725 AD 45 A1			lda XP1+1
 10261 5728 CD 49 A1			cmp XP2+1
 10262 572B D0 06			bne @+
 10263 572D AD 44 A1			lda XP1
 10264 5730 CD 48 A1			cmp XP2
 10265 				@
 10266 5733 D0 03 4C 74 58		jeq l_18DD
 10267
 10268 				; optimize OK (service.pas), line = 1788
 10269
 10270 5738 AD 50 A1			lda COLLISION
 10271 573B 09 02			ora #$02
 10272 573D 8D 50 A1			sta COLLISION
 10273
 10274 				; --- WhileProlog
 10275 5740 4C 61 58			jmp l_18EA
 10276 5743			l_18EB
 10277
 10278 				; optimize OK (service.pas), line = 1792
 10279
 10280 5743 AD 34 A1			lda XK
 10281 5746 85 9F			sta :STACKORIGIN+9
 10282 5748 A0 00			ldy #$00
 10283 574A AD 35 A1			lda XK+1
 10284 574D 10 01			spl
 10285 574F 88				dey
 10286 5750 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10287 5752 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10288 5754 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10289 5756 AD 38 A1			lda XJ
 10290 5759 85 A0			sta :STACKORIGIN+10
 10291 575B A0 00			ldy #$00
 10292 575D AD 39 A1			lda XJ+1
 10293 5760 10 01			spl
 10294 5762 88				dey
 10295 5763 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10296 5765 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10297 5767 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10298 5769 A5 9F			lda :STACKORIGIN+9
 10299 576B 18 65 A0			add :STACKORIGIN+10
 10300 576E 85 9F			sta :STACKORIGIN+9
 10301 5770 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10302 5772 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10303 5774 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10304 5776 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10305 5778 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10306 577A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10307 577C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10308 577E 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10309 5780 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10310 5782 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10311 5784 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10312 5786 66 9F			ror :STACKORIGIN+9
 10313 5788 A5 9F			lda :STACKORIGIN+9
 10314 578A 8D 30 A1			sta X
 10315 578D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10316 578F 8D 31 A1			sta X+1
 10317
 10318 				; optimize OK (service.pas), line = 1793
 10319
 10320 5792 AD 36 A1			lda YK
 10321 5795 85 9F			sta :STACKORIGIN+9
 10322 5797 A0 00			ldy #$00
 10323 5799 AD 37 A1			lda YK+1
 10324 579C 10 01			spl
 10325 579E 88				dey
 10326 579F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10327 57A1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10328 57A3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10329 57A5 AD 3A A1			lda YJ
 10330 57A8 85 A0			sta :STACKORIGIN+10
 10331 57AA A0 00			ldy #$00
 10332 57AC AD 3B A1			lda YJ+1
 10333 57AF 10 01			spl
 10334 57B1 88				dey
 10335 57B2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10336 57B4 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10337 57B6 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10338 57B8 A5 9F			lda :STACKORIGIN+9
 10339 57BA 18 65 A0			add :STACKORIGIN+10
 10340 57BD 85 9F			sta :STACKORIGIN+9
 10341 57BF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10342 57C1 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10343 57C3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10344 57C5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10345 57C7 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10346 57C9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10347 57CB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10348 57CD 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10349 57CF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10350 57D1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10351 57D3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10352 57D5 66 9F			ror :STACKORIGIN+9
 10353 57D7 A5 9F			lda :STACKORIGIN+9
 10354 57D9 8D 32 A1			sta Y
 10355 57DC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10356 57DE 8D 33 A1			sta Y+1
 10357
 10358 				; optimize OK (service.pas), line = 1795
 10359
 10360 57E1 AD 30 A1			lda X
 10361 57E4 85 9F			sta :STACKORIGIN+9
 10362 57E6 A0 00			ldy #$00
 10363 57E8 AD 31 A1			lda X+1
 10364 57EB 10 01			spl
 10365 57ED 88				dey
 10366 57EE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10367 57F0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10368 57F2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10369 57F4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10370 57F6 66 9F			ror :STACKORIGIN+9
 10371 57F8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10372 57FA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10373 57FC 66 9F			ror :STACKORIGIN+9
 10374 57FE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10375 5800 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10376 5802 66 9F			ror :STACKORIGIN+9
 10377 5804 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10378 5806 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10379 5808 66 9F			ror :STACKORIGIN+9
 10380 580A A5 9F			lda :STACKORIGIN+9
 10381 580C 8D 4C A1			sta XP
 10382 580F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10383 5811 8D 4D A1			sta XP+1
 10384
 10385 				; optimize OK (service.pas), line = 1797
 10386
 10387 5814 CD 45 A1			cmp XP1+1
 10388 5817 D0 06			bne @+
 10389 5819 AD 4C A1			lda XP
 10390 581C CD 44 A1			cmp XP1
 10391 				@
 10392 581F D0 18			jne l_1922
 10393
 10394 				; optimize OK (service.pas), line = 1799
 10395
 10396 5821 AD 30 A1			lda X
 10397 5824 8D 34 A1			sta XK
 10398 5827 AD 31 A1			lda X+1
 10399 582A 8D 35 A1			sta XK+1
 10400
 10401 				; optimize OK (service.pas), line = 1800
 10402
 10403 582D AD 32 A1			lda Y
 10404 5830 8D 36 A1			sta YK
 10405 5833 AD 33 A1			lda Y+1
 10406 5836 8D 37 A1			sta YK+1
 10407 5839			l_1922
 10408
 10409 				; optimize OK (service.pas), line = 1803
 10410
 10411 5839 AD 4D A1			lda XP+1
 10412 583C CD 49 A1			cmp XP2+1
 10413 583F D0 06			bne @+
 10414 5841 AD 4C A1			lda XP
 10415 5844 CD 48 A1			cmp XP2
 10416 				@
 10417 5847 D0 18			jne l_1941
 10418
 10419 				; optimize OK (service.pas), line = 1805
 10420
 10421 5849 AD 30 A1			lda X
 10422 584C 8D 38 A1			sta XJ
 10423 584F AD 31 A1			lda X+1
 10424 5852 8D 39 A1			sta XJ+1
 10425
 10426 				; optimize OK (service.pas), line = 1806
 10427
 10428 5855 AD 32 A1			lda Y
 10429 5858 8D 3A A1			sta YJ
 10430 585B AD 33 A1			lda Y+1
 10431 585E 8D 3B A1			sta YJ+1
 10432 5861			l_1941
 10433 5861			l_18EA
 10434
 10435 				; optimize OK (service.pas), line = 1790
 10436
 10437 5861 AD 38 A1			lda XJ
 10438 5864 29 0F			and #$0F
 10439 5866 F0 0C			jeq l_18EBw
 10440 5868 AD 38 A1			lda XJ
 10441 586B 29 0F			and #$0F
 10442 586D C9 0F			cmp #$0F
 10443 586F F0 03 4C 43 57		jne l_18EB
 10444 5874			l_18EBw
 10445 5874			l_18DD
 10446
 10447 				; optimize OK (service.pas), line = 1817
 10448
 10449 5874 AD 50 A1			lda COLLISION
 10450 5877 C9 01			cmp #$01
 10451 5879 D0 03			jne l_1980
 10452 				; optimize OK (service.pas), line = 1819
 10453 				; optimize OK (service.pas), line = 1820
 10454 587B 4C E9 58			jmp l_1994
 10455 587E			l_1980
 10456
 10457 				; optimize OK (service.pas), line = 1822
 10458
 10459 587E AD 50 A1			lda COLLISION
 10460 5881 C9 02			cmp #$02
 10461 5883 D0 2F			jne l_19A6
 10462
 10463 				; optimize OK (service.pas), line = 1824
 10464
 10465 5885 AC 2B A1 84 84 AC + 	mwy X2 :bp2
 10466 588F A0 00			ldy #$00
 10467 5891 AD 38 A1			lda XJ
 10468 5894 91 84			sta (:bp2),y
 10469 5896 C8				iny
 10470 5897 AD 39 A1			lda XJ+1
 10471 589A 91 84			sta (:bp2),y
 10472
 10473 				; optimize OK (service.pas), line = 1825
 10474
 10475 589C AC 2D A1 84 84 AC + 	mwy Y2 :bp2
 10476 58A6 A0 00			ldy #$00
 10477 58A8 AD 3A A1			lda YJ
 10478 58AB 91 84			sta (:bp2),y
 10479 58AD C8				iny
 10480 58AE AD 3B A1			lda YJ+1
 10481 58B1 4C 15 59			jmp l_19BA
 10482 58B4			l_19A6
 10483
 10484 				; optimize OK (service.pas), line = 1827
 10485
 10486 58B4 AD 50 A1			lda COLLISION
 10487 58B7 C9 03			cmp #$03
 10488 58B9 D0 5C			jne l_19CC
 10489
 10490 				; optimize OK (service.pas), line = 1829
 10491
 10492 58BB AC 27 A1 84 84 AC + 	mwy X1 :bp2
 10493 58C5 A0 00			ldy #$00
 10494 58C7 AD 38 A1			lda XJ
 10495 58CA 91 84			sta (:bp2),y
 10496 58CC C8				iny
 10497 58CD AD 39 A1			lda XJ+1
 10498 58D0 91 84			sta (:bp2),y
 10499
 10500 				; optimize OK (service.pas), line = 1830
 10501
 10502 58D2 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
 10503 58DC A0 00			ldy #$00
 10504 58DE AD 3A A1			lda YJ
 10505 58E1 91 84			sta (:bp2),y
 10506 58E3 C8				iny
 10507 58E4 AD 3B A1			lda YJ+1
 10508 58E7 91 84			sta (:bp2),y
 10509 58E9			l_1994
 10510
 10511 				; optimize OK (service.pas), line = 1831
 10512
 10513 58E9 AC 2B A1 84 84 AC + 	mwy X2 :bp2
 10514 58F3 A0 00			ldy #$00
 10515 58F5 AD 40 A1			lda XN
 10516 58F8 91 84			sta (:bp2),y
 10517 58FA C8				iny
 10518 58FB AD 41 A1			lda XN+1
 10519 58FE 91 84			sta (:bp2),y
 10520
 10521 				; optimize OK (service.pas), line = 1832
 10522
 10523 5900 AC 2D A1 84 84 AC + 	mwy Y2 :bp2
 10524 590A A0 00			ldy #$00
 10525 590C AD 42 A1			lda YN
 10526 590F 91 84			sta (:bp2),y
 10527 5911 C8				iny
 10528 5912 AD 43 A1			lda YN+1
 10529 5915			l_19BA
 10530 5915 91 84			sta (:bp2),y
 10531 5917			l_19CC
 10532 5917 4C 1F 59			jmp l_19EC
 10533 591A			l_1827
 10534
 10535 				; optimize OK (service.pas), line = 1837
 10536
 10537 591A A9 02			lda #$02
 10538 591C 20 B1 2D			jsr FATAL_ERROR
 10539 591F			l_19EC
 10540
 10541 				; optimize OK (service.pas), line = 1840
 10542
 10543 591F AC 27 A1 84 84 AC + 	mwy X1 :bp2
 10544 5929 A0 00			ldy #$00
 10545 592B B1 84			lda (:bp2),y
 10546 592D 38 E9 10			sub #$10
 10547 5930 91 84			sta (:bp2),y
 10548 5932 C8				iny
 10549 5933 B1 84			lda (:bp2),y
 10550 5935 E9 00			sbc #$00
 10551 5937 91 84			sta (:bp2),y
 10552
 10553 				; optimize OK (service.pas), line = 1841
 10554
 10555 5939 AC 29 A1 84 84 AC + 	mwy Y1 :bp2
 10556 5943 A0 00			ldy #$00
 10557 5945 B1 84			lda (:bp2),y
 10558 5947 38 E9 18			sub #$18
 10559 594A 91 84			sta (:bp2),y
 10560 594C C8				iny
 10561 594D B1 84			lda (:bp2),y
 10562 594F E9 00			sbc #$00
 10563 5951 91 84			sta (:bp2),y
 10564
 10565 				; optimize OK (service.pas), line = 1842
 10566
 10567 5953 AC 2B A1 84 84 AC + 	mwy X2 :bp2
 10568 595D A0 00			ldy #$00
 10569 595F B1 84			lda (:bp2),y
 10570 5961 38 E9 10			sub #$10
 10571 5964 91 84			sta (:bp2),y
 10572 5966 C8				iny
 10573 5967 B1 84			lda (:bp2),y
 10574 5969 E9 00			sbc #$00
 10575 596B 91 84			sta (:bp2),y
 10576
 10577 				; optimize OK (service.pas), line = 1843
 10578
 10579 596D AC 2D A1 84 84 AC + 	mwy Y2 :bp2
 10580 5977 A0 00			ldy #$00
 10581 5979 B1 84			lda (:bp2),y
 10582 597B 38 E9 18			sub #$18
 10583 597E 91 84			sta (:bp2),y
 10584 5980 C8				iny
 10585 5981 B1 84			lda (:bp2),y
 10586 5983 E9 00			sbc #$00
 10587 5985 91 84			sta (:bp2),y
 10588
 10589 				; optimize OK (service.pas), line = 1846
 10590
 10591 5987 AC 27 A1 84 84 AC + 	mwy X1 :bp2
 10592 5991 A0 00			ldy #$00
 10593 5993 B1 84			lda (:bp2),y
 10594 5995 8D 44 A0			sta MAX.B
 10595 5998 C8				iny
 10596 5999 B1 84			lda (:bp2),y
 10597 599B 8D 45 A0			sta MAX.B+1
 10598 599E A9 00			lda #$00
 10599 59A0 8D 42 A0			sta MAX.A
 10600 59A3 8D 43 A0			sta MAX.A+1
 10601 59A6 20 5B 2D			jsr MAX
 10602 59A9 A9 CF			lda #$CF
 10603 59AB 8D 48 A0			sta MIN.A
 10604 59AE A9 00			lda #$00
 10605 59B0 8D 49 A0			sta MIN.A+1
 10606 59B3 AD 46 A0			lda MAX.RESULT
 10607 59B6 8D 4A A0			sta MIN.B
 10608 59B9 AD 47 A0			lda MAX.RESULT+1
 10609 59BC 8D 4B A0			sta MIN.B+1
 10610 59BF 20 86 2D			jsr MIN
 10611 59C2 AC 27 A1 84 84 AC + 	mwy X1 :bp2
 10612 59CC A0 00			ldy #$00
 10613 59CE AD 4C A0			lda MIN.RESULT
 10614 59D1 91 84			sta (:bp2),y
 10615 59D3 C8				iny
 10616 59D4 AD 4D A0			lda MIN.RESULT+1
 10617 59D7 91 84			sta (:bp2),y
 10618
 10619 				; optimize OK (service.pas), line = 1847
 10620
 10621 59D9 AC 2B A1 84 84 AC + 	mwy X2 :bp2
 10622 59E3 A0 00			ldy #$00
 10623 59E5 B1 84			lda (:bp2),y
 10624 59E7 8D 44 A0			sta MAX.B
 10625 59EA C8				iny
 10626 59EB B1 84			lda (:bp2),y
 10627 59ED 8D 45 A0			sta MAX.B+1
 10628 59F0 A9 00			lda #$00
 10629 59F2 8D 42 A0			sta MAX.A
 10630 59F5 8D 43 A0			sta MAX.A+1
 10631 59F8 20 5B 2D			jsr MAX
 10632 59FB A9 CF			lda #$CF
 10633 59FD 8D 48 A0			sta MIN.A
 10634 5A00 A9 00			lda #$00
 10635 5A02 8D 49 A0			sta MIN.A+1
 10636 5A05 AD 46 A0			lda MAX.RESULT
 10637 5A08 8D 4A A0			sta MIN.B
 10638 5A0B AD 47 A0			lda MAX.RESULT+1
 10639 5A0E 8D 4B A0			sta MIN.B+1
 10640 5A11 20 86 2D			jsr MIN
 10641 5A14 AC 2B A1 84 84 AC + 	mwy X2 :bp2
 10642 5A1E A0 00			ldy #$00
 10643 5A20 AD 4C A0			lda MIN.RESULT
 10644 5A23 91 84			sta (:bp2),y
 10645 5A25 C8				iny
 10646 5A26 AD 4D A0			lda MIN.RESULT+1
 10647 5A29 91 84			sta (:bp2),y
 10648
 10649 				; optimize OK (service.pas), line = 1854
 10650
 10651 5A2B AD 50 A1			lda COLLISION
 10652 5A2E 8D 2F A1			sta RESULT
 10653 5A31			@exit
 10654
 10655 				; ------------------------------------------------------------
 10656
 10657 = A127			X1	= DATAORIGIN+$062C
 10658 = A129			Y1	= DATAORIGIN+$062E
 10659 = A12B			X2	= DATAORIGIN+$0630
 10660 = A12D			Y2	= DATAORIGIN+$0632
 10661 = A12F			RESULT	= DATAORIGIN+$0634
 10662 = A130			X	= DATAORIGIN+$0635
 10663 = A132			Y	= DATAORIGIN+$0637
 10664 = A134			XK	= DATAORIGIN+$0639
 10665 = A136			YK	= DATAORIGIN+$063B
 10666 = A138			XJ	= DATAORIGIN+$063D
 10667 = A13A			YJ	= DATAORIGIN+$063F
 10668 = A13C			XH	= DATAORIGIN+$0641
 10669 = A13E			YH	= DATAORIGIN+$0643
 10670 = A140			XN	= DATAORIGIN+$0645
 10671 = A142			YN	= DATAORIGIN+$0647
 10672 = A144			XP1	= DATAORIGIN+$0649
 10673 = A146			YP1	= DATAORIGIN+$064B
 10674 = A148			XP2	= DATAORIGIN+$064D
 10675 = A14A			YP2	= DATAORIGIN+$064F
 10676 = A14C			XP	= DATAORIGIN+$0651
 10677 = A14E			YP	= DATAORIGIN+$0653
 10678 = A150			COLLISION	= DATAORIGIN+$0655
 10679
 10680 = A127			@VarData	= X1
 10681 = 0029			@VarDataSize	= 41
 10682
 10683 5A31 60				rts						; ret
 10684 				.endl
 10685
 10686 5A32			.local	SHOOT_BLOCK					; PROCEDURE
 10687
 10688 				; optimize OK (service.pas), line = 1865
 10689
 10690 5A32 AD 52 A1			lda XB+1
 10691 5A35 10 03 4C 43 5C		jmi l_1A40
 10692 5A3A AD 51 A1			lda XB
 10693 5A3D C9 0D			cmp #$0D
 10694 5A3F AD 52 A1			lda XB+1
 10695 5A42 E9 00			sbc #$00
 10696 5A44 50 02			svc
 10697 5A46 49 80			eor #$80
 10698 5A48 30 03 4C 43 5C		jpl l_1A40
 10699 5A4D AD 54 A1			lda YB+1
 10700 5A50 10 03 4C 43 5C		jmi l_1A40
 10701 5A55 AD 53 A1			lda YB
 10702 5A58 C9 0F			cmp #$0F
 10703 5A5A AD 54 A1			lda YB+1
 10704 5A5D E9 00			sbc #$00
 10705 5A5F 50 02			svc
 10706 5A61 49 80			eor #$80
 10707 5A63 30 03 4C 43 5C		jpl l_1A40
 10708
 10709 				; optimize OK (service.pas), line = 1868
 10710
 10711 5A68 AD 53 A1			lda YB
 10712 5A6B 0A				asl @
 10713 5A6C 0A				asl @
 10714 5A6D 0A				asl @
 10715 5A6E 0A				asl @
 10716 5A6F 18 6D 51 A1			add XB
 10717 5A73 8D 59 A1			sta I
 10718
 10719 				; optimize OK (service.pas), line = 1870
 10720
 10721 5A76 A8				tay
 10722 5A77 B9 00 DB			lda adr.WALL,y
 10723 5A7A D0 03 4C 43 5C		jeq l_1A64
 10724
 10725 				; optimize OK (service.pas), line = 1872
 10726
 10727 5A7F C9 0A			cmp #$0A
 10728 5A81 90 03 4C B9 5B		jcs l_1A7A
 10729
 10730 				; optimize OK (service.pas), line = 1874
 10731
 10732 5A86 AD 51 A1			lda XB
 10733 5A89 8D 05 A1			sta REMOVE_BLOCK.XA
 10734 5A8C AD 53 A1			lda YB
 10735 5A8F 8D 06 A1			sta REMOVE_BLOCK.YA
 10736 5A92 20 FE 46			jsr REMOVE_BLOCK
 10737
 10738 				; optimize FAIL (0, service.pas), line = 1875
 10739
 10740 5A95 CE C2 9C			dec REMAIN_BLK
 10741
 10742 				; optimize OK (service.pas), line = 1879
 10743
 10744 5A98 AD DF 9C			lda CUR_PLAYER
 10745 5A9B 0A				asl @
 10746 5A9C 0A				asl @
 10747 5A9D 85 9F			sta :STACKORIGIN+9
 10748 5A9F AC 59 A1			ldy I
 10749 5AA2 B9 00 DB			lda adr.WALL,y
 10750 5AA5 0A				asl @
 10751 5AA6 A8				tay
 10752 5AA7 B9 69 10			lda adr.SCORE_WALL,y
 10753 5AAA 85 A0			sta :STACKORIGIN+10
 10754 5AAC B9 6A 10			lda adr.SCORE_WALL+1,y
 10755 5AAF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10756 5AB1 A4 9F			ldy :STACKORIGIN+9
 10757 5AB3 B9 C4 9C			lda adr.SCORE.PLAYER,y
 10758 5AB6 18 65 A0			add :STACKORIGIN+10
 10759 5AB9 99 C4 9C			sta adr.SCORE.PLAYER,y
 10760 5ABC B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 10761 5ABF 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10762 5AC1 99 C5 9C			sta adr.SCORE.PLAYER+1,y
 10763 5AC4 B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 10764 5AC7 69 00			adc #$00
 10765 5AC9 99 C6 9C			sta adr.SCORE.PLAYER+2,y
 10766 5ACC B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 10767 5ACF 69 00			adc #$00
 10768 5AD1 99 C7 9C			sta adr.SCORE.PLAYER+3,y
 10769
 10770 				; optimize OK (service.pas), line = 1881
 10771
 10772 5AD4 A9 2C			lda #$2C
 10773 5AD6 8D 41 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 10774 5AD9 A9 01			lda #$01
 10775 5ADB 8D 42 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10776 5ADE 20 3B 25			jsr SYSTEM.RANDOM.@010184000
 10777 5AE1 AD EF 9C			lda LETT.INCOMING
 10778 5AE4 18 6D 43 9B			add SYSTEM.RANDOM.@010184000.RESULT
 10779 5AE8 8D EF 9C			sta LETT.INCOMING
 10780 5AEB AD F0 9C			lda LETT.INCOMING+1
 10781 5AEE 6D 44 9B			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10782 5AF1 8D F0 9C			sta LETT.INCOMING+1
 10783
 10784 				; optimize OK (service.pas), line = 1883
 10785
 10786 5AF4 AD 51 A1			lda XB
 10787 5AF7 85 9F			sta :STACKORIGIN+9
 10788 5AF9 A0 00			ldy #$00
 10789 5AFB AD 52 A1			lda XB+1
 10790 5AFE 10 01			spl
 10791 5B00 88				dey
 10792 5B01 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10793 5B03 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10794 5B05 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10795 5B07 06 9F			asl :STACKORIGIN+9
 10796 5B09 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10797 5B0B 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10798 5B0D 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10799 5B0F 06 9F			asl :STACKORIGIN+9
 10800 5B11 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10801 5B13 06 9F			asl :STACKORIGIN+9
 10802 5B15 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10803 5B17 06 9F			asl :STACKORIGIN+9
 10804 5B19 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10805 5B1B A5 9F			lda :STACKORIGIN+9
 10806 5B1D 18 69 09			add #$09
 10807 5B20 8D F1 9C			sta LETT.NEXTX
 10808 5B23 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10809 5B25 69 00			adc #$00
 10810 5B27 8D F2 9C			sta LETT.NEXTX+1
 10811
 10812 				; optimize OK (service.pas), line = 1884
 10813
 10814 5B2A AD 53 A1			lda YB
 10815 5B2D 85 9F			sta :STACKORIGIN+9
 10816 5B2F A0 00			ldy #$00
 10817 5B31 AD 54 A1			lda YB+1
 10818 5B34 10 01			spl
 10819 5B36 88				dey
 10820 5B37 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10821 5B39 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10822 5B3B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10823 5B3D A5 9F			lda :STACKORIGIN+9
 10824 5B3F 18 69 01			add #$01
 10825 5B42 85 9F			sta :STACKORIGIN+9
 10826 5B44 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10827 5B46 69 00			adc #$00
 10828 5B48 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10829 5B4A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10830 5B4C 69 00			adc #$00
 10831 5B4E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10832 5B50 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10833 5B52 69 00			adc #$00
 10834 5B54 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10835 5B56 06 9F			asl :STACKORIGIN+9
 10836 5B58 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10837 5B5A 06 9F			asl :STACKORIGIN+9
 10838 5B5C 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10839 5B5E 06 9F			asl :STACKORIGIN+9
 10840 5B60 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10841 5B62 A5 9F			lda :STACKORIGIN+9
 10842 5B64 18 69 16			add #$16
 10843 5B67 8D F3 9C			sta LETT.NEXTY
 10844 5B6A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10845 5B6C 69 00			adc #$00
 10846 5B6E 8D F4 9C			sta LETT.NEXTY+1
 10847
 10848 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1885
 10849
 10850 5B71 20 66 30			jsr RANDOM_LETTER_DROP
 10851 5B74 AD 79 A0			lda RANDOM_LETTER_DROP.RESULT
 10852 5B77 8D F5 9C			sta LETT.NEXTTYPE
 10853 5B7A AD 7A A0			lda RANDOM_LETTER_DROP.RESULT+1
 10854 5B7D 8D F6 9C			sta LETT.NEXTTYPE+1
 10855
 10856 				; optimize OK (service.pas), line = 1887
 10857
 10858 5B80 AC 59 A1			ldy I
 10859 5B83 A9 00			lda #$00
 10860 5B85 99 00 DB			sta adr.WALL,y
 10861
 10862 				; optimize OK (service.pas), line = 1888
 10863
 10864 5B88 A9 B8			lda #$B8
 10865 5B8A 8D F0 9B			sta BALL_BLOCK_SOUND.A
 10866 5B8D A9 01			lda #$01
 10867 5B8F 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 10868 5B92 A9 03			lda #$03
 10869 5B94 8D F2 9B			sta BALL_BLOCK_SOUND.B
 10870 5B97 A9 00			lda #$00
 10871 5B99 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 10872 5B9C 20 5C 2A			jsr BALL_BLOCK_SOUND
 10873
 10874 				; optimize OK (service.pas), line = 1889
 10875
 10876 5B9F AC 55 A1 84 84 AC + 	mwy BALL :bp2
 10877 5BA9 A0 14			ldy #BALL.SBD-DATAORIGIN
 10878 5BAB A9 00			lda #$00
 10879 5BAD 91 84			sta (:bp2),y
 10880 5BAF C8				iny
 10881 5BB0 91 84			sta (:bp2),y
 10882
 10883 				; optimize OK (service.pas), line = 1890
 10884
 10885 5BB2 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10886 5BB4 91 84			sta (:bp2),y
 10887 5BB6 4C 43 5C			jmp l_1ACE
 10888 5BB9			l_1A7A
 10889
 10890 				; optimize OK (service.pas), line = 1895
 10891
 10892 5BB9 AC 59 A1			ldy I
 10893 5BBC B9 00 DB			lda adr.WALL,y
 10894 5BBF 29 0F			and #$0F
 10895 5BC1 C9 09			cmp #$09
 10896 5BC3 D0 45			jne l_1AE7
 10897
 10898 				; optimize OK (service.pas), line = 1897
 10899
 10900 5BC5 AC 55 A1 84 84 AC + 	mwy BALL :bp2
 10901 5BCF A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10902 5BD1 A9 00			lda #$00
 10903 5BD3 91 84			sta (:bp2),y
 10904
 10905 				; optimize OK (service.pas), line = 1898
 10906
 10907 5BD5 AC 59 A1			ldy I
 10908 5BD8 B9 00 DB			lda adr.WALL,y
 10909 5BDB 38 E9 10			sub #$10
 10910 5BDE 99 00 DB			sta adr.WALL,y
 10911
 10912 				; optimize OK (service.pas), line = 1900
 10913
 10914 5BE1 A9 72			lda #$72
 10915 5BE3 8D F0 9B			sta BALL_BLOCK_SOUND.A
 10916 5BE6 A9 01			lda #$01
 10917 5BE8 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 10918 5BEB A9 04			lda #$04
 10919 5BED 8D F2 9B			sta BALL_BLOCK_SOUND.B
 10920 5BF0 A9 00			lda #$00
 10921 5BF2 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 10922 5BF5 20 5C 2A			jsr BALL_BLOCK_SOUND
 10923
 10924 				; optimize OK (service.pas), line = 1901
 10925
 10926 5BF8 AD 51 A1			lda XB
 10927 5BFB 8D 77 A0			sta SHINE.XB
 10928 5BFE AD 53 A1			lda YB
 10929 5C01 8D 78 A0			sta SHINE.YB
 10930 5C04 20 2A 30			jsr SHINE
 10931 5C07 4C 43 5C			jmp l_1B01
 10932 5C0A			l_1AE7
 10933
 10934 				; optimize OK (service.pas), line = 1905
 10935
 10936 5C0A AC 55 A1 84 84 AC + 	mwy BALL :bp2
 10937 5C14 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10938 5C16 B1 84			lda (:bp2),y
 10939 5C18 18 69 01			add #$01
 10940 5C1B 91 84			sta (:bp2),y
 10941
 10942 				; optimize OK (service.pas), line = 1906
 10943
 10944 5C1D AD 51 A1			lda XB
 10945 5C20 8D 77 A0			sta SHINE.XB
 10946 5C23 AD 53 A1			lda YB
 10947 5C26 8D 78 A0			sta SHINE.YB
 10948 5C29 20 2A 30			jsr SHINE
 10949
 10950 				; optimize OK (service.pas), line = 1908
 10951
 10952 5C2C A9 C8			lda #$C8
 10953 5C2E 8D F0 9B			sta BALL_BLOCK_SOUND.A
 10954 5C31 A9 00			lda #$00
 10955 5C33 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 10956 5C36 A9 07			lda #$07
 10957 5C38 8D F2 9B			sta BALL_BLOCK_SOUND.B
 10958 5C3B A9 00			lda #$00
 10959 5C3D 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 10960 5C40 20 5C 2A			jsr BALL_BLOCK_SOUND
 10961 5C43			l_1B01
 10962 5C43			l_1ACE
 10963 5C43			l_1A64
 10964 5C43			l_1A40
 10965
 10966 				; ------------------------------------------------------------
 10967
 10968 = A151			XB	= DATAORIGIN+$0656
 10969 = A153			YB	= DATAORIGIN+$0658
 10970 = A155			BALL	= DATAORIGIN+$065A
 10971 = 9AFB			BALL.X	= DATAORIGIN+$0000
 10972 = 9AFD			BALL.Y	= DATAORIGIN+$0002
 10973 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
 10974 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
 10975 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
 10976 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
 10977 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
 10978 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
 10979 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
 10980 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
 10981 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
 10982 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
 10983 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
 10984 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
 10985 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
 10986 = 9B15			BALL.STM	= DATAORIGIN+$001A
 10987 = A159			I	= DATAORIGIN+$065E
 10988
 10989 = A151			@VarData	= XB
 10990 = 0007			@VarDataSize	= 7
 10991
 10992 5C43			@exit
 10993 					.ifdef @new
 10994 					lda <@VarData
 10995 					sta :ztmp
 10996 					lda >@VarData
 10997 					ldy #@VarDataSize-1
 10998 					jmp @FreeMem
 10999 					els
 11000 5C43 60				rts						; ret
 11001 					eif
 11002 				.endl
 11003
 11004 5C44			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 11005
 11006 				; optimize OK (service.pas), line = 1919
 11007
 11008 5C44 AD 5B A1			lda XB+1
 11009 5C47 10 03 4C 5E 5D		jmi l_1B44
 11010 5C4C AD 5A A1			lda XB
 11011 5C4F C9 0D			cmp #$0D
 11012 5C51 AD 5B A1			lda XB+1
 11013 5C54 E9 00			sbc #$00
 11014 5C56 50 02			svc
 11015 5C58 49 80			eor #$80
 11016 5C5A 30 03 4C 5E 5D		jpl l_1B44
 11017 5C5F AD 5D A1			lda YB+1
 11018 5C62 10 03 4C 5E 5D		jmi l_1B44
 11019 5C67 AD 5C A1			lda YB
 11020 5C6A C9 0F			cmp #$0F
 11021 5C6C AD 5D A1			lda YB+1
 11022 5C6F E9 00			sbc #$00
 11023 5C71 50 02			svc
 11024 5C73 49 80			eor #$80
 11025 5C75 30 03 4C 5E 5D		jpl l_1B44
 11026
 11027 				; optimize OK (service.pas), line = 1922
 11028
 11029 5C7A AD 5C A1			lda YB
 11030 5C7D 0A				asl @
 11031 5C7E 0A				asl @
 11032 5C7F 0A				asl @
 11033 5C80 0A				asl @
 11034 5C81 18 6D 5A A1			add XB
 11035 5C85 8D 5E A1			sta I
 11036
 11037 				; optimize OK (service.pas), line = 1924
 11038
 11039 5C88 A8				tay
 11040 5C89 B9 00 DB			lda adr.WALL,y
 11041 5C8C D0 03 4C 5E 5D		jeq l_1B68
 11042
 11043 				; optimize OK (service.pas), line = 1926
 11044
 11045 5C91 C9 0A			cmp #$0A
 11046 5C93 B0 65			jcs l_1B7E
 11047
 11048 				; optimize OK (service.pas), line = 1928
 11049
 11050 5C95 AD 5A A1			lda XB
 11051 5C98 8D 05 A1			sta REMOVE_BLOCK.XA
 11052 5C9B AD 5C A1			lda YB
 11053 5C9E 8D 06 A1			sta REMOVE_BLOCK.YA
 11054 5CA1 20 FE 46			jsr REMOVE_BLOCK
 11055
 11056 				; optimize FAIL (0, service.pas), line = 1929
 11057
 11058 5CA4 CE C2 9C			dec REMAIN_BLK
 11059
 11060 				; optimize OK (service.pas), line = 1930
 11061
 11062 5CA7 AD DF 9C			lda CUR_PLAYER
 11063 5CAA 0A				asl @
 11064 5CAB 0A				asl @
 11065 5CAC 85 9F			sta :STACKORIGIN+9
 11066 5CAE AC 5E A1			ldy I
 11067 5CB1 B9 00 DB			lda adr.WALL,y
 11068 5CB4 0A				asl @
 11069 5CB5 A8				tay
 11070 5CB6 B9 69 10			lda adr.SCORE_WALL,y
 11071 5CB9 85 A0			sta :STACKORIGIN+10
 11072 5CBB B9 6A 10			lda adr.SCORE_WALL+1,y
 11073 5CBE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11074 5CC0 A4 9F			ldy :STACKORIGIN+9
 11075 5CC2 B9 C4 9C			lda adr.SCORE.PLAYER,y
 11076 5CC5 18 65 A0			add :STACKORIGIN+10
 11077 5CC8 99 C4 9C			sta adr.SCORE.PLAYER,y
 11078 5CCB B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 11079 5CCE 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 11080 5CD0 99 C5 9C			sta adr.SCORE.PLAYER+1,y
 11081 5CD3 B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 11082 5CD6 69 00			adc #$00
 11083 5CD8 99 C6 9C			sta adr.SCORE.PLAYER+2,y
 11084 5CDB B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 11085 5CDE 69 00			adc #$00
 11086 5CE0 99 C7 9C			sta adr.SCORE.PLAYER+3,y
 11087
 11088 				; optimize OK (service.pas), line = 1931
 11089
 11090 5CE3 AC 5E A1			ldy I
 11091 5CE6 A9 00			lda #$00
 11092 5CE8 99 00 DB			sta adr.WALL,y
 11093
 11094 				; optimize OK (service.pas), line = 1932
 11095
 11096 5CEB A9 B8			lda #$B8
 11097 5CED 8D F0 9B			sta BALL_BLOCK_SOUND.A
 11098 5CF0 A9 01			lda #$01
 11099 5CF2 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 11100 5CF5 A9 03			lda #$03
 11101 5CF7 4C 53 5D			jmp l_1BA6
 11102 5CFA			l_1B7E
 11103
 11104 				; optimize OK (service.pas), line = 1937
 11105
 11106 5CFA AC 5E A1			ldy I
 11107 5CFD B9 00 DB			lda adr.WALL,y
 11108 5D00 29 0F			and #$0F
 11109 5D02 C9 09			cmp #$09
 11110 5D04 D0 32			jne l_1BBF
 11111
 11112 				; optimize OK (service.pas), line = 1939
 11113
 11114 5D06 B9 00 DB			lda adr.WALL,y
 11115 5D09 38 E9 10			sub #$10
 11116 5D0C 99 00 DB			sta adr.WALL,y
 11117
 11118 				; optimize OK (service.pas), line = 1940
 11119
 11120 5D0F A9 72			lda #$72
 11121 5D11 8D F0 9B			sta BALL_BLOCK_SOUND.A
 11122 5D14 A9 01			lda #$01
 11123 5D16 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 11124 5D19 A9 04			lda #$04
 11125 5D1B 8D F2 9B			sta BALL_BLOCK_SOUND.B
 11126 5D1E A9 00			lda #$00
 11127 5D20 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 11128 5D23 20 5C 2A			jsr BALL_BLOCK_SOUND
 11129
 11130 				; optimize OK (service.pas), line = 1941
 11131
 11132 5D26 AD 5A A1			lda XB
 11133 5D29 8D 77 A0			sta SHINE.XB
 11134 5D2C AD 5C A1			lda YB
 11135 5D2F 8D 78 A0			sta SHINE.YB
 11136 5D32 20 2A 30			jsr SHINE
 11137 5D35 4C 5E 5D			jmp l_1BD5
 11138 5D38			l_1BBF
 11139
 11140 				; optimize OK (service.pas), line = 1945
 11141
 11142 5D38 AD 5A A1			lda XB
 11143 5D3B 8D 77 A0			sta SHINE.XB
 11144 5D3E AD 5C A1			lda YB
 11145 5D41 8D 78 A0			sta SHINE.YB
 11146 5D44 20 2A 30			jsr SHINE
 11147
 11148 				; optimize OK (service.pas), line = 1946
 11149
 11150 5D47 A9 C8			lda #$C8
 11151 5D49 8D F0 9B			sta BALL_BLOCK_SOUND.A
 11152 5D4C A9 00			lda #$00
 11153 5D4E 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 11154 5D51 A9 07			lda #$07
 11155 5D53			l_1BA6
 11156 5D53 8D F2 9B			sta BALL_BLOCK_SOUND.B
 11157 5D56 A9 00			lda #$00
 11158 5D58 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 11159 5D5B 20 5C 2A			jsr BALL_BLOCK_SOUND
 11160 5D5E			l_1BD5
 11161 5D5E			l_1B68
 11162 5D5E			l_1B44
 11163
 11164 				; ------------------------------------------------------------
 11165
 11166 = A15A			XB	= DATAORIGIN+$065F
 11167 = A15C			YB	= DATAORIGIN+$0661
 11168 = A15E			I	= DATAORIGIN+$0663
 11169
 11170 = A15A			@VarData	= XB
 11171 = 0005			@VarDataSize	= 5
 11172
 11173 5D5E			@exit
 11174 					.ifdef @new
 11175 					lda <@VarData
 11176 					sta :ztmp
 11177 					lda >@VarData
 11178 					ldy #@VarDataSize-1
 11179 					jmp @FreeMem
 11180 					els
 11181 5D5E 60				rts						; ret
 11182 					eif
 11183 				.endl
 11184
 11185 5D5F			.local	BALL_HIT_BLOCK					; PROCEDURE
 11186
 11187 				; optimize OK (service.pas), line = 1978
 11188
 11189 5D5F A9 FF			lda #$FF
 11190 5D61 8D 8B A1			sta EMERGENCY
 11191
 11192 				; optimize OK (service.pas), line = 1980
 11193
 11194 5D64 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 11195 5D6E A0 00			ldy #BALL.X-DATAORIGIN
 11196 5D70 B1 84			lda (:bp2),y
 11197 5D72 38 E9 09			sub #$09
 11198 5D75 8D 77 A1			sta NX
 11199 5D78 C8				iny
 11200 5D79 B1 84			lda (:bp2),y
 11201 5D7B E9 00			sbc #$00
 11202 5D7D 8D 78 A1			sta NX+1
 11203
 11204 				; optimize OK (service.pas), line = 1981
 11205
 11206 5D80 A0 02			ldy #BALL.Y-DATAORIGIN
 11207 5D82 B1 84			lda (:bp2),y
 11208 5D84 38 E9 16			sub #$16
 11209 5D87 8D 79 A1			sta NY
 11210 5D8A C8				iny
 11211 5D8B B1 84			lda (:bp2),y
 11212 5D8D E9 00			sbc #$00
 11213 5D8F 8D 7A A1			sta NY+1
 11214
 11215 				; optimize OK (service.pas), line = 1984
 11216
 11217 5D92 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11218 5D94 B1 84			lda (:bp2),y
 11219 5D96 38 E9 09			sub #$09
 11220 5D99 8D 6B A1			sta OX
 11221 5D9C C8				iny
 11222 5D9D B1 84			lda (:bp2),y
 11223 5D9F E9 00			sbc #$00
 11224 5DA1 8D 6C A1			sta OX+1
 11225
 11226 				; optimize OK (service.pas), line = 1985
 11227
 11228 5DA4 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11229 5DA6 B1 84			lda (:bp2),y
 11230 5DA8 38 E9 16			sub #$16
 11231 5DAB 8D 6D A1			sta OY
 11232 5DAE C8				iny
 11233 5DAF B1 84			lda (:bp2),y
 11234 5DB1 E9 00			sbc #$00
 11235 5DB3 8D 6E A1			sta OY+1
 11236
 11237 				; optimize OK (service.pas), line = 1987
 11238
 11239 5DB6 AD 77 A1			lda NX
 11240 5DB9 85 9F			sta :STACKORIGIN+9
 11241 5DBB A0 00			ldy #$00
 11242 5DBD AD 78 A1			lda NX+1
 11243 5DC0 10 01			spl
 11244 5DC2 88				dey
 11245 5DC3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11246 5DC5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11247 5DC7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11248 5DC9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11249 5DCB 66 9F			ror :STACKORIGIN+9
 11250 5DCD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11251 5DCF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11252 5DD1 66 9F			ror :STACKORIGIN+9
 11253 5DD3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11254 5DD5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11255 5DD7 66 9F			ror :STACKORIGIN+9
 11256 5DD9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11257 5DDB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11258 5DDD 66 9F			ror :STACKORIGIN+9
 11259 5DDF A5 9F			lda :STACKORIGIN+9
 11260 5DE1 8D 67 A1			sta XB
 11261 5DE4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11262 5DE6 8D 68 A1			sta XB+1
 11263
 11264 				; optimize OK (service.pas), line = 1988
 11265
 11266 5DE9 AD 79 A1			lda NY
 11267 5DEC 85 9F			sta :STACKORIGIN+9
 11268 5DEE A0 00			ldy #$00
 11269 5DF0 AD 7A A1			lda NY+1
 11270 5DF3 10 01			spl
 11271 5DF5 88				dey
 11272 5DF6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11273 5DF8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11274 5DFA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11275 5DFC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11276 5DFE 66 9F			ror :STACKORIGIN+9
 11277 5E00 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11278 5E02 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11279 5E04 66 9F			ror :STACKORIGIN+9
 11280 5E06 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11281 5E08 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11282 5E0A 66 9F			ror :STACKORIGIN+9
 11283 5E0C A5 9F			lda :STACKORIGIN+9
 11284 5E0E 8D 69 A1			sta YB
 11285 5E11 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11286 5E13 8D 6A A1			sta YB+1
 11287
 11288 				; optimize OK (service.pas), line = 1992
 11289
 11290 5E16 AD 69 A1			lda YB
 11291 5E19 0A				asl @
 11292 5E1A 0A				asl @
 11293 5E1B 0A				asl @
 11294 5E1C 0A				asl @
 11295 5E1D 18 6D 67 A1			add XB
 11296 5E21 A8				tay
 11297 5E22 B9 00 DB			lda adr.WALL,y
 11298 5E25 D0 03 4C 24 6F		jeq l_1C3C
 11299
 11300 				; optimize OK (service.pas), line = 1994
 11301
 11302 5E2A A9 6B			lda <OX
 11303 5E2C 8D 27 A1			sta SPLIT_LINE.X1
 11304 5E2F A9 A1			lda >OX
 11305 5E31 8D 28 A1			sta SPLIT_LINE.X1+1
 11306 5E34 A9 6D			lda <OY
 11307 5E36 8D 29 A1			sta SPLIT_LINE.Y1
 11308 5E39 A9 A1			lda >OY
 11309 5E3B 8D 2A A1			sta SPLIT_LINE.Y1+1
 11310 5E3E A9 77			lda <NX
 11311 5E40 8D 2B A1			sta SPLIT_LINE.X2
 11312 5E43 A9 A1			lda >NX
 11313 5E45 8D 2C A1			sta SPLIT_LINE.X2+1
 11314 5E48 A9 79			lda <NY
 11315 5E4A 8D 2D A1			sta SPLIT_LINE.Y2
 11316 5E4D A9 A1			lda >NY
 11317 5E4F 8D 2E A1			sta SPLIT_LINE.Y2+1
 11318 5E52 20 6A 52			jsr SPLIT_LINE
 11319 5E55 AD 2F A1			lda SPLIT_LINE.RESULT
 11320 5E58 8D 8C A1			sta COLLISION
 11321
 11322 				; optimize OK (service.pas), line = 2000
 11323
 11324 5E5B C9 03			cmp #$03
 11325 5E5D F0 03 4C B3 62		jne l_1C57
 11326
 11327 				; optimize OK (service.pas), line = 2002
 11328
 11329 5E62 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 11330 5E6C A0 08			ldy #BALL.OLDX-DATAORIGIN
 11331 5E6E B1 84			lda (:bp2),y
 11332 5E70 38 ED 6B A1			sub OX
 11333 5E74 85 9F			sta :STACKORIGIN+9
 11334 5E76 C8				iny
 11335 5E77 B1 84			lda (:bp2),y
 11336 5E79 ED 6C A1			sbc OX+1
 11337 5E7C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11338 5E7E A5 9F			lda :STACKORIGIN+9
 11339 5E80 38 E9 09			sub #$09
 11340 5E83 8D 6F A1			sta LX
 11341 5E86 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11342 5E88 E9 00			sbc #$00
 11343 5E8A 8D 70 A1			sta LX+1
 11344
 11345 				; optimize OK (service.pas), line = 2003
 11346
 11347 5E8D A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11348 5E8F B1 84			lda (:bp2),y
 11349 5E91 38 ED 6D A1			sub OY
 11350 5E95 85 9F			sta :STACKORIGIN+9
 11351 5E97 C8				iny
 11352 5E98 B1 84			lda (:bp2),y
 11353 5E9A ED 6E A1			sbc OY+1
 11354 5E9D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11355 5E9F A5 9F			lda :STACKORIGIN+9
 11356 5EA1 38 E9 16			sub #$16
 11357 5EA4 8D 71 A1			sta LY
 11358 5EA7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11359 5EA9 E9 00			sbc #$00
 11360 5EAB 8D 72 A1			sta LY+1
 11361
 11362 				; optimize OK (service.pas), line = 2005
 11363
 11364 5EAE A0 08			ldy #BALL.OLDX-DATAORIGIN
 11365 5EB0 B1 84			lda (:bp2),y
 11366 5EB2 38 ED 77 A1			sub NX
 11367 5EB6 85 9F			sta :STACKORIGIN+9
 11368 5EB8 C8				iny
 11369 5EB9 B1 84			lda (:bp2),y
 11370 5EBB ED 78 A1			sbc NX+1
 11371 5EBE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11372 5EC0 A5 9F			lda :STACKORIGIN+9
 11373 5EC2 38 E9 09			sub #$09
 11374 5EC5 8D 73 A1			sta MX
 11375 5EC8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11376 5ECA E9 00			sbc #$00
 11377 5ECC 8D 74 A1			sta MX+1
 11378
 11379 				; optimize OK (service.pas), line = 2006
 11380
 11381 5ECF A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11382 5ED1 B1 84			lda (:bp2),y
 11383 5ED3 38 ED 79 A1			sub NY
 11384 5ED7 85 9F			sta :STACKORIGIN+9
 11385 5ED9 C8				iny
 11386 5EDA B1 84			lda (:bp2),y
 11387 5EDC ED 7A A1			sbc NY+1
 11388 5EDF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11389 5EE1 A5 9F			lda :STACKORIGIN+9
 11390 5EE3 38 E9 16			sub #$16
 11391 5EE6 8D 75 A1			sta MY
 11392 5EE9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11393 5EEB E9 00			sbc #$00
 11394 5EED 8D 76 A1			sta MY+1
 11395
 11396 				; optimize OK (service.pas), line = 2008
 11397
 11398 5EF0 AD 6F A1			lda LX
 11399 5EF3 85 8E			sta :ecx
 11400 5EF5 85 86			sta :eax
 11401 5EF7 AD 70 A1			lda LX+1
 11402 5EFA 85 8F			sta :ecx+1
 11403 5EFC 85 87			sta :eax+1
 11404 					.ifdef fmulinit
 11405 					fmulu_16
 11406 					els
 11407 5EFE 20 23 13			imulCX
 11408 					eif
 11409 5F01 A5 86			lda :eax
 11410 5F03 85 9F			sta :STACKORIGIN+9
 11411 5F05 A5 87			lda :eax+1
 11412 5F07 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11413 5F09 AD 71 A1			lda LY
 11414 5F0C 85 8E			sta :ecx
 11415 5F0E 85 86			sta :eax
 11416 5F10 AD 72 A1			lda LY+1
 11417 5F13 85 8F			sta :ecx+1
 11418 5F15 85 87			sta :eax+1
 11419 					.ifdef fmulinit
 11420 					fmulu_16
 11421 					els
 11422 5F17 20 23 13			imulCX
 11423 					eif
 11424 5F1A A5 86			lda :eax
 11425 5F1C 18 65 9F			add :STACKORIGIN+9
 11426 5F1F 8D 7B A1			sta F1
 11427 5F22 A5 87			lda :eax+1
 11428 5F24 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11429 5F26 8D 7C A1			sta F1+1
 11430
 11431 				; optimize OK (service.pas), line = 2009
 11432
 11433 5F29 AD 73 A1			lda MX
 11434 5F2C 85 8E			sta :ecx
 11435 5F2E 85 86			sta :eax
 11436 5F30 AD 74 A1			lda MX+1
 11437 5F33 85 8F			sta :ecx+1
 11438 5F35 85 87			sta :eax+1
 11439 					.ifdef fmulinit
 11440 					fmulu_16
 11441 					els
 11442 5F37 20 23 13			imulCX
 11443 					eif
 11444 5F3A A5 86			lda :eax
 11445 5F3C 85 9F			sta :STACKORIGIN+9
 11446 5F3E A5 87			lda :eax+1
 11447 5F40 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11448 5F42 AD 75 A1			lda MY
 11449 5F45 85 8E			sta :ecx
 11450 5F47 85 86			sta :eax
 11451 5F49 AD 76 A1			lda MY+1
 11452 5F4C 85 8F			sta :ecx+1
 11453 5F4E 85 87			sta :eax+1
 11454 					.ifdef fmulinit
 11455 					fmulu_16
 11456 					els
 11457 5F50 20 23 13			imulCX
 11458 					eif
 11459 5F53 A5 86			lda :eax
 11460 5F55 18 65 9F			add :STACKORIGIN+9
 11461 5F58 8D 7D A1			sta F2
 11462 5F5B A5 87			lda :eax+1
 11463 5F5D 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11464 5F5F 8D 7E A1			sta F2+1
 11465
 11466 				; optimize OK (service.pas), line = 2011
 11467
 11468 5F62 AD 7B A1			lda F1
 11469 5F65 CD 7D A1			cmp F2
 11470 5F68 AD 7C A1			lda F1+1
 11471 5F6B ED 7E A1			sbc F2+1
 11472 5F6E 50 02			svc
 11473 5F70 49 80			eor #$80
 11474 5F72 30 03 4C 13 61		jpl l_1CCA
 11475
 11476 				; optimize OK (service.pas), line = 2017
 11477
 11478 5F77 AD 6B A1			lda OX
 11479 5F7A 85 A0			sta :STACKORIGIN+10
 11480 5F7C A0 00			ldy #$00
 11481 5F7E AD 6C A1			lda OX+1
 11482 5F81 10 01			spl
 11483 5F83 88				dey
 11484 5F84 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11485 5F86 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11486 5F88 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11487 5F8A 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11488 5F8C 66 A0			ror :STACKORIGIN+10
 11489 5F8E 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11490 5F90 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11491 5F92 66 A0			ror :STACKORIGIN+10
 11492 5F94 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11493 5F96 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11494 5F98 66 A0			ror :STACKORIGIN+10
 11495 5F9A 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11496 5F9C 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11497 5F9E 66 A0			ror :STACKORIGIN+10
 11498 5FA0 A5 A0			lda :STACKORIGIN+10
 11499 5FA2 8D 42 A0			sta MAX.A
 11500 5FA5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11501 5FA7 8D 43 A0			sta MAX.A+1
 11502 5FAA A9 00			lda #$00
 11503 5FAC 8D 44 A0			sta MAX.B
 11504 5FAF 8D 45 A0			sta MAX.B+1
 11505 5FB2 20 5B 2D			jsr MAX
 11506 5FB5 A9 0C			lda #$0C
 11507 5FB7 8D 48 A0			sta MIN.A
 11508 5FBA A9 00			lda #$00
 11509 5FBC 8D 49 A0			sta MIN.A+1
 11510 5FBF AD 46 A0			lda MAX.RESULT
 11511 5FC2 8D 4A A0			sta MIN.B
 11512 5FC5 AD 47 A0			lda MAX.RESULT+1
 11513 5FC8 8D 4B A0			sta MIN.B+1
 11514 5FCB 20 86 2D			jsr MIN
 11515 5FCE AD 4C A0			lda MIN.RESULT
 11516 5FD1 8D 67 A1			sta XB
 11517 5FD4 AD 4D A0			lda MIN.RESULT+1
 11518 5FD7 8D 68 A1			sta XB+1
 11519
 11520 				; optimize OK (service.pas), line = 2018
 11521
 11522 5FDA AD 6D A1			lda OY
 11523 5FDD 85 9F			sta :STACKORIGIN+9
 11524 5FDF A0 00			ldy #$00
 11525 5FE1 AD 6E A1			lda OY+1
 11526 5FE4 10 01			spl
 11527 5FE6 88				dey
 11528 5FE7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11529 5FE9 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11530 5FEB 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11531 5FED A5 9F			lda :STACKORIGIN+9
 11532 5FEF 18 69 18			add #$18
 11533 5FF2 85 9F			sta :STACKORIGIN+9
 11534 5FF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11535 5FF6 69 00			adc #$00
 11536 5FF8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11537 5FFA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11538 5FFC 69 00			adc #$00
 11539 5FFE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11540 6000 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11541 6002 69 00			adc #$00
 11542 6004 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11543 6006 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11544 6008 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11545 600A 66 9F			ror :STACKORIGIN+9
 11546 600C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11547 600E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11548 6010 66 9F			ror :STACKORIGIN+9
 11549 6012 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11550 6014 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11551 6016 66 9F			ror :STACKORIGIN+9
 11552 6018 A5 9F			lda :STACKORIGIN+9
 11553 601A 38 E9 03			sub #$03
 11554 601D 8D 69 A1			sta YB
 11555 6020 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11556 6022 E9 00			sbc #$00
 11557 6024 8D 6A A1			sta YB+1
 11558
 11559 				; optimize OK (service.pas), line = 2021
 11560
 11561 6027 AD 69 A1			lda YB
 11562 602A 0A				asl @
 11563 602B 0A				asl @
 11564 602C 0A				asl @
 11565 602D 0A				asl @
 11566 602E 18 6D 67 A1			add XB
 11567 6032 A8				tay
 11568 6033 B9 00 DB			lda adr.WALL,y
 11569 6036 F0 03 4C F8 60		jne l_1D06
 11570
 11571 				; optimize OK (service.pas), line = 2023
 11572
 11573 603B AD 77 A1			lda NX
 11574 603E 85 9F			sta :STACKORIGIN+9
 11575 6040 A0 00			ldy #$00
 11576 6042 AD 78 A1			lda NX+1
 11577 6045 10 01			spl
 11578 6047 88				dey
 11579 6048 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11580 604A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11581 604C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11582 604E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11583 6050 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11584 6052 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11585 6054 66 9F			ror :STACKORIGIN+9
 11586 6056 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11587 6058 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11588 605A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11589 605C 66 9F			ror :STACKORIGIN+9
 11590 605E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11591 6060 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11592 6062 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11593 6064 66 9F			ror :STACKORIGIN+9
 11594 6066 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11595 6068 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11596 606A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11597 606C 66 9F			ror :STACKORIGIN+9
 11598 606E A9 00			lda #$00
 11599 6070 8D 42 A0			sta MAX.A
 11600 6073 8D 43 A0			sta MAX.A+1
 11601 6076 A5 9F			lda :STACKORIGIN+9
 11602 6078 8D 44 A0			sta MAX.B
 11603 607B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11604 607D 8D 45 A0			sta MAX.B+1
 11605 6080 20 5B 2D			jsr MAX
 11606 6083 A9 0C			lda #$0C
 11607 6085 8D 48 A0			sta MIN.A
 11608 6088 A9 00			lda #$00
 11609 608A 8D 49 A0			sta MIN.A+1
 11610 608D AD 46 A0			lda MAX.RESULT
 11611 6090 8D 4A A0			sta MIN.B
 11612 6093 AD 47 A0			lda MAX.RESULT+1
 11613 6096 8D 4B A0			sta MIN.B+1
 11614 6099 20 86 2D			jsr MIN
 11615 609C AD 4C A0			lda MIN.RESULT
 11616 609F 8D 67 A1			sta XB
 11617 60A2 AD 4D A0			lda MIN.RESULT+1
 11618 60A5 8D 68 A1			sta XB+1
 11619
 11620 				; optimize OK (service.pas), line = 2024
 11621
 11622 60A8 AD 79 A1			lda NY
 11623 60AB 85 9F			sta :STACKORIGIN+9
 11624 60AD A0 00			ldy #$00
 11625 60AF AD 7A A1			lda NY+1
 11626 60B2 10 01			spl
 11627 60B4 88				dey
 11628 60B5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11629 60B7 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11630 60B9 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11631 60BB A5 9F			lda :STACKORIGIN+9
 11632 60BD 18 69 18			add #$18
 11633 60C0 85 9F			sta :STACKORIGIN+9
 11634 60C2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11635 60C4 69 00			adc #$00
 11636 60C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11637 60C8 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11638 60CA 69 00			adc #$00
 11639 60CC 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11640 60CE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11641 60D0 69 00			adc #$00
 11642 60D2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11643 60D4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11644 60D6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11645 60D8 66 9F			ror :STACKORIGIN+9
 11646 60DA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11647 60DC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11648 60DE 66 9F			ror :STACKORIGIN+9
 11649 60E0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11650 60E2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11651 60E4 66 9F			ror :STACKORIGIN+9
 11652 60E6 A5 9F			lda :STACKORIGIN+9
 11653 60E8 38 E9 03			sub #$03
 11654 60EB 8D 69 A1			sta YB
 11655 60EE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11656 60F0 E9 00			sbc #$00
 11657 60F2 8D 6A A1			sta YB+1
 11658 60F5 4C 10 61			jmp l_1D2E
 11659 60F8			l_1D06
 11660
 11661 				; optimize OK (service.pas), line = 2028
 11662
 11663 60F8 AD 6B A1			lda OX
 11664 60FB 8D 77 A1			sta NX
 11665 60FE AD 6C A1			lda OX+1
 11666 6101 8D 78 A1			sta NX+1
 11667
 11668 				; optimize OK (service.pas), line = 2029
 11669
 11670 6104 AD 6D A1			lda OY
 11671 6107 8D 79 A1			sta NY
 11672 610A AD 6E A1			lda OY+1
 11673 610D 8D 7A A1			sta NY+1
 11674 6110			l_1D2E
 11675 6110 4C B3 62			jmp l_1D41
 11676 6113			l_1CCA
 11677
 11678 				; optimize OK (service.pas), line = 2039
 11679
 11680 6113 AD 77 A1			lda NX
 11681 6116 85 9F			sta :STACKORIGIN+9
 11682 6118 A0 00			ldy #$00
 11683 611A AD 78 A1			lda NX+1
 11684 611D 10 01			spl
 11685 611F 88				dey
 11686 6120 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11687 6122 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11688 6124 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11689 6126 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11690 6128 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11691 612A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11692 612C 66 9F			ror :STACKORIGIN+9
 11693 612E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11694 6130 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11695 6132 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11696 6134 66 9F			ror :STACKORIGIN+9
 11697 6136 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11698 6138 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11699 613A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11700 613C 66 9F			ror :STACKORIGIN+9
 11701 613E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11702 6140 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11703 6142 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11704 6144 66 9F			ror :STACKORIGIN+9
 11705 6146 A9 00			lda #$00
 11706 6148 8D 42 A0			sta MAX.A
 11707 614B 8D 43 A0			sta MAX.A+1
 11708 614E A5 9F			lda :STACKORIGIN+9
 11709 6150 8D 44 A0			sta MAX.B
 11710 6153 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11711 6155 8D 45 A0			sta MAX.B+1
 11712 6158 20 5B 2D			jsr MAX
 11713 615B A9 0C			lda #$0C
 11714 615D 8D 48 A0			sta MIN.A
 11715 6160 A9 00			lda #$00
 11716 6162 8D 49 A0			sta MIN.A+1
 11717 6165 AD 46 A0			lda MAX.RESULT
 11718 6168 8D 4A A0			sta MIN.B
 11719 616B AD 47 A0			lda MAX.RESULT+1
 11720 616E 8D 4B A0			sta MIN.B+1
 11721 6171 20 86 2D			jsr MIN
 11722 6174 AD 4C A0			lda MIN.RESULT
 11723 6177 8D 67 A1			sta XB
 11724 617A AD 4D A0			lda MIN.RESULT+1
 11725 617D 8D 68 A1			sta XB+1
 11726
 11727 				; optimize OK (service.pas), line = 2040
 11728
 11729 6180 AD 79 A1			lda NY
 11730 6183 85 9F			sta :STACKORIGIN+9
 11731 6185 A0 00			ldy #$00
 11732 6187 AD 7A A1			lda NY+1
 11733 618A 10 01			spl
 11734 618C 88				dey
 11735 618D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11736 618F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11737 6191 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11738 6193 A5 9F			lda :STACKORIGIN+9
 11739 6195 18 69 18			add #$18
 11740 6198 85 9F			sta :STACKORIGIN+9
 11741 619A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11742 619C 69 00			adc #$00
 11743 619E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11744 61A0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11745 61A2 69 00			adc #$00
 11746 61A4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11747 61A6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11748 61A8 69 00			adc #$00
 11749 61AA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11750 61AC 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11751 61AE 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11752 61B0 66 9F			ror :STACKORIGIN+9
 11753 61B2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11754 61B4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11755 61B6 66 9F			ror :STACKORIGIN+9
 11756 61B8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11757 61BA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11758 61BC 66 9F			ror :STACKORIGIN+9
 11759 61BE A5 9F			lda :STACKORIGIN+9
 11760 61C0 38 E9 03			sub #$03
 11761 61C3 8D 69 A1			sta YB
 11762 61C6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11763 61C8 E9 00			sbc #$00
 11764 61CA 8D 6A A1			sta YB+1
 11765
 11766 				; optimize OK (service.pas), line = 2042
 11767
 11768 61CD AD 69 A1			lda YB
 11769 61D0 0A				asl @
 11770 61D1 0A				asl @
 11771 61D2 0A				asl @
 11772 61D3 0A				asl @
 11773 61D4 18 6D 67 A1			add XB
 11774 61D8 A8				tay
 11775 61D9 B9 00 DB			lda adr.WALL,y
 11776 61DC F0 03 4C B3 62		jne l_1D7C
 11777
 11778 				; optimize OK (service.pas), line = 2044
 11779
 11780 61E1 AD 6B A1			lda OX
 11781 61E4 8D 77 A1			sta NX
 11782 61E7 AD 6C A1			lda OX+1
 11783 61EA 8D 78 A1			sta NX+1
 11784
 11785 				; optimize OK (service.pas), line = 2045
 11786
 11787 61ED AD 6D A1			lda OY
 11788 61F0 8D 79 A1			sta NY
 11789 61F3 AD 6E A1			lda OY+1
 11790 61F6 8D 7A A1			sta NY+1
 11791
 11792 				; optimize OK (service.pas), line = 2047
 11793
 11794 61F9 AD 77 A1			lda NX
 11795 61FC 85 9F			sta :STACKORIGIN+9
 11796 61FE A0 00			ldy #$00
 11797 6200 AD 78 A1			lda NX+1
 11798 6203 10 01			spl
 11799 6205 88				dey
 11800 6206 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11801 6208 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11802 620A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11803 620C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11804 620E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11805 6210 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11806 6212 66 9F			ror :STACKORIGIN+9
 11807 6214 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11808 6216 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11809 6218 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11810 621A 66 9F			ror :STACKORIGIN+9
 11811 621C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11812 621E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11813 6220 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11814 6222 66 9F			ror :STACKORIGIN+9
 11815 6224 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11816 6226 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11817 6228 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11818 622A 66 9F			ror :STACKORIGIN+9
 11819 622C A9 00			lda #$00
 11820 622E 8D 42 A0			sta MAX.A
 11821 6231 8D 43 A0			sta MAX.A+1
 11822 6234 A5 9F			lda :STACKORIGIN+9
 11823 6236 8D 44 A0			sta MAX.B
 11824 6239 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11825 623B 8D 45 A0			sta MAX.B+1
 11826 623E 20 5B 2D			jsr MAX
 11827 6241 A9 0C			lda #$0C
 11828 6243 8D 48 A0			sta MIN.A
 11829 6246 A9 00			lda #$00
 11830 6248 8D 49 A0			sta MIN.A+1
 11831 624B AD 46 A0			lda MAX.RESULT
 11832 624E 8D 4A A0			sta MIN.B
 11833 6251 AD 47 A0			lda MAX.RESULT+1
 11834 6254 8D 4B A0			sta MIN.B+1
 11835 6257 20 86 2D			jsr MIN
 11836 625A AD 4C A0			lda MIN.RESULT
 11837 625D 8D 67 A1			sta XB
 11838 6260 AD 4D A0			lda MIN.RESULT+1
 11839 6263 8D 68 A1			sta XB+1
 11840
 11841 				; optimize OK (service.pas), line = 2048
 11842
 11843 6266 AD 79 A1			lda NY
 11844 6269 85 9F			sta :STACKORIGIN+9
 11845 626B A0 00			ldy #$00
 11846 626D AD 7A A1			lda NY+1
 11847 6270 10 01			spl
 11848 6272 88				dey
 11849 6273 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11850 6275 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11851 6277 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11852 6279 A5 9F			lda :STACKORIGIN+9
 11853 627B 18 69 18			add #$18
 11854 627E 85 9F			sta :STACKORIGIN+9
 11855 6280 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11856 6282 69 00			adc #$00
 11857 6284 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11858 6286 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11859 6288 69 00			adc #$00
 11860 628A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11861 628C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11862 628E 69 00			adc #$00
 11863 6290 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11864 6292 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11865 6294 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11866 6296 66 9F			ror :STACKORIGIN+9
 11867 6298 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11868 629A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11869 629C 66 9F			ror :STACKORIGIN+9
 11870 629E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11871 62A0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11872 62A2 66 9F			ror :STACKORIGIN+9
 11873 62A4 A5 9F			lda :STACKORIGIN+9
 11874 62A6 38 E9 03			sub #$03
 11875 62A9 8D 69 A1			sta YB
 11876 62AC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11877 62AE E9 00			sbc #$00
 11878 62B0 8D 6A A1			sta YB+1
 11879 62B3			l_1D7C
 11880 62B3			l_1D41
 11881 62B3			l_1C57
 11882
 11883 				; optimize OK (service.pas), line = 2054
 11884
 11885 62B3 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 11886 62BD A0 00			ldy #BALL.X-DATAORIGIN
 11887 62BF AD 77 A1			lda NX
 11888 62C2 18 69 09			add #$09
 11889 62C5 91 84			sta (:bp2),y
 11890 62C7 C8				iny
 11891 62C8 AD 78 A1			lda NX+1
 11892 62CB 69 00			adc #$00
 11893 62CD 91 84			sta (:bp2),y
 11894
 11895 				; optimize OK (service.pas), line = 2055
 11896
 11897 62CF A0 02			ldy #BALL.Y-DATAORIGIN
 11898 62D1 AD 79 A1			lda NY
 11899 62D4 18 69 16			add #$16
 11900 62D7 91 84			sta (:bp2),y
 11901 62D9 C8				iny
 11902 62DA AD 7A A1			lda NY+1
 11903 62DD 69 00			adc #$00
 11904 62DF 91 84			sta (:bp2),y
 11905
 11906 				; optimize OK (service.pas), line = 2059
 11907
 11908 62E1 AD 67 A1			lda XB
 11909 62E4 8D 51 A1			sta SHOOT_BLOCK.XB
 11910 62E7 AD 68 A1			lda XB+1
 11911 62EA 8D 52 A1			sta SHOOT_BLOCK.XB+1
 11912 62ED AD 69 A1			lda YB
 11913 62F0 8D 53 A1			sta SHOOT_BLOCK.YB
 11914 62F3 AD 6A A1			lda YB+1
 11915 62F6 8D 54 A1			sta SHOOT_BLOCK.YB+1
 11916 62F9 AD 5F A1			lda BALL
 11917 62FC 8D 55 A1			sta SHOOT_BLOCK.BALL
 11918 62FF AD 60 A1			lda BALL+1
 11919 6302 8D 56 A1			sta SHOOT_BLOCK.BALL+1
 11920 6305 20 32 5A			jsr SHOOT_BLOCK
 11921
 11922 				; optimize OK (service.pas), line = 2061
 11923
 11924 6308 AD 77 A1			lda NX
 11925 630B 29 0F			and #$0F
 11926 630D 85 9F			sta :STACKORIGIN+9
 11927 630F A9 00			lda #$00
 11928 6311 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11929 6313 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11930 6315 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11931 6317 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11932 6319 66 9F			ror :STACKORIGIN+9
 11933 631B A5 9F			lda :STACKORIGIN+9
 11934 631D 8D 63 A1			sta X
 11935 6320 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11936 6322 8D 64 A1			sta X+1
 11937
 11938 				; optimize OK (service.pas), line = 2062
 11939
 11940 6325 AD 79 A1			lda NY
 11941 6328 29 07			and #$07
 11942 632A 8D 65 A1			sta Y
 11943 632D A9 00			lda #$00
 11944 632F 8D 66 A1			sta Y+1
 11945
 11946 				; optimize OK (service.pas), line = 2074
 11947
 11948 6332 AD 64 A1			lda X+1
 11949 6335 0D 63 A1			ora X
 11950 6338 F0 25			jeq l_1E0A
 11951 633A AD 64 A1			lda X+1
 11952 633D D0 05			bne @+
 11953 633F AD 63 A1			lda X
 11954 6342 C9 07			cmp #$07
 11955 				@
 11956 6344 F0 19			jeq l_1E0A
 11957 6346 AD 66 A1			lda Y+1
 11958 6349 0D 65 A1			ora Y
 11959 634C F0 11			jeq l_1E0A
 11960 				@
 11961 634E AD 66 A1			lda Y+1
 11962 6351 D0 05			bne @+
 11963 6353 AD 65 A1			lda Y
 11964 6356 C9 07			cmp #$07
 11965 				@
 11966 6358 F0 05			jeq l_1E0A
 11967
 11968 				; optimize OK (service.pas), line = 2075
 11969
 11970 635A A9 03			lda #$03
 11971 635C 20 B1 2D			jsr FATAL_ERROR
 11972 635F			l_1E0A
 11973
 11974 				; optimize OK (service.pas), line = 2090
 11975
 11976 635F AD 65 A1			lda Y
 11977 6362 CD 63 A1			cmp X
 11978 6365 AD 66 A1			lda Y+1
 11979 6368 ED 64 A1			sbc X+1
 11980 636B 50 02			svc
 11981 636D 49 80			eor #$80
 11982 636F 30 03 4C 08 64		jpl l_1E31
 11983 6374 AD 65 A1			lda Y
 11984 6377 85 A2			sta :STACKORIGIN+12
 11985 6379 A0 00			ldy #$00
 11986 637B AD 66 A1			lda Y+1
 11987 637E 10 01			spl
 11988 6380 88				dey
 11989 6381 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 11990 6383 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 11991 6385 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 11992 6387 A9 07			lda #$07
 11993 6389 38 E5 A2			sub :STACKORIGIN+12
 11994 638C 85 A1			sta :STACKORIGIN+11
 11995 638E A9 00			lda #$00
 11996 6390 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 11997 6392 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 11998 6394 A9 00			lda #$00
 11999 6396 E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12000 6398 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12001 639A A9 00			lda #$00
 12002 639C E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12003 639E 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12004 63A0 AD 63 A1			lda X
 12005 63A3 85 A0			sta :STACKORIGIN+10
 12006 63A5 A0 00			ldy #$00
 12007 63A7 AD 64 A1			lda X+1
 12008 63AA 10 01			spl
 12009 63AC 88				dey
 12010 63AD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12011 63AF 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12012 63B1 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12013 63B3				.LOCAL
 12014 63B3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12015 63B5 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 12016 63B8 D0 1C			bne L4
 12017 63BA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12018 63BC C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12019 63BE D0 0A			bne L1
 12020 63C0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12021 63C2 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12022 63C4 D0 04			bne L1
 12023 63C6 A5 A0			lda :STACKORIGIN+10
 12024 63C8 C5 A1			cmp :STACKORIGIN+11
 12025 63CA F0 10		L1	beq L5
 12026 63CC B0 04			bcs L3
 12027 63CE A9 FF			lda #$FF
 12028 63D0 D0 0A			bne L5
 12029 63D2 A9 01		L3	lda #$01
 12030 63D4 D0 06			bne L5
 12031 63D6 50 04		L4	bvc L5
 12032 63D8 49 FF			eor #$FF
 12033 63DA 09 01			ora #$01
 12034 63DC			L5
 12035 					.ENDL
 12036 63DC 10 2A			jpl l_1E31
 12037
 12038 				; optimize OK (service.pas), line = 2092
 12039
 12040 63DE AC 5F A1 84 84 AC + 	mwy BALL :bp2
 12041 63E8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12042 63EA A9 00			lda #$00
 12043 63EC 38 F1 84			sub (:bp2),y
 12044 63EF 85 9F			sta :STACKORIGIN+9
 12045 63F1 C8				iny
 12046 63F2 A9 00			lda #$00
 12047 63F4 F1 84			sbc (:bp2),y
 12048 63F6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12049 63F8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12050 63FA A5 9F			lda :STACKORIGIN+9
 12051 63FC 91 84			sta (:bp2),y
 12052 63FE C8				iny
 12053 63FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12054 6401 91 84			sta (:bp2),y
 12055
 12056 				; optimize OK (service.pas), line = 2093
 12057
 12058 6403 A9 01			lda #$01
 12059 6405 8D 8B A1			sta EMERGENCY
 12060 6408			l_1E31
 12061
 12062 				; optimize OK (service.pas), line = 2097
 12063
 12064 6408 AD 65 A1			lda Y
 12065 640B 85 A0			sta :STACKORIGIN+10
 12066 640D A0 00			ldy #$00
 12067 640F AD 66 A1			lda Y+1
 12068 6412 10 01			spl
 12069 6414 88				dey
 12070 6415 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12071 6417 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12072 6419 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12073 641B A9 07			lda #$07
 12074 641D 38 E5 A0			sub :STACKORIGIN+10
 12075 6420 85 9F			sta :STACKORIGIN+9
 12076 6422 A9 00			lda #$00
 12077 6424 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12078 6426 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12079 6428 A9 00			lda #$00
 12080 642A E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 12081 642C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12082 642E A9 00			lda #$00
 12083 6430 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 12084 6432 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12085 6434 AD 63 A1			lda X
 12086 6437 85 A0			sta :STACKORIGIN+10
 12087 6439 A0 00			ldy #$00
 12088 643B AD 64 A1			lda X+1
 12089 643E 10 01			spl
 12090 6440 88				dey
 12091 6441 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12092 6443 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12093 6445 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12094 6447				.LOCAL
 12095 6447 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12096 6449 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12097 644C D0 1C			bne L4
 12098 644E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12099 6450 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12100 6452 D0 0A			bne L1
 12101 6454 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12102 6456 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12103 6458 D0 04			bne L1
 12104 645A A5 9F			lda :STACKORIGIN+9
 12105 645C C5 A0			cmp :STACKORIGIN+10
 12106 645E F0 10		L1	beq L5
 12107 6460 B0 04			bcs L3
 12108 6462 A9 FF			lda #$FF
 12109 6464 D0 0A			bne L5
 12110 6466 A9 01		L3	lda #$01
 12111 6468 D0 06			bne L5
 12112 646A 50 04		L4	bvc L5
 12113 646C 49 FF			eor #$FF
 12114 646E 09 01			ora #$01
 12115 6470			L5
 12116 					.ENDL
 12117 6470 10 3C			jpl l_1E62
 12118 6472 AD 63 A1			lda X
 12119 6475 CD 65 A1			cmp Y
 12120 6478 AD 64 A1			lda X+1
 12121 647B ED 66 A1			sbc Y+1
 12122 647E 50 02			svc
 12123 6480 49 80			eor #$80
 12124 6482 10 2A			jpl l_1E62
 12125
 12126 				; optimize OK (service.pas), line = 2099
 12127
 12128 6484 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 12129 648E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12130 6490 A9 00			lda #$00
 12131 6492 38 F1 84			sub (:bp2),y
 12132 6495 85 9F			sta :STACKORIGIN+9
 12133 6497 C8				iny
 12134 6498 A9 00			lda #$00
 12135 649A F1 84			sbc (:bp2),y
 12136 649C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12137 649E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12138 64A0 A5 9F			lda :STACKORIGIN+9
 12139 64A2 91 84			sta (:bp2),y
 12140 64A4 C8				iny
 12141 64A5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12142 64A7 91 84			sta (:bp2),y
 12143
 12144 				; optimize OK (service.pas), line = 2100
 12145
 12146 64A9 A9 03			lda #$03
 12147 64AB 8D 8B A1			sta EMERGENCY
 12148 64AE			l_1E62
 12149
 12150 				; optimize OK (service.pas), line = 2104
 12151
 12152 64AE AD 63 A1			lda X
 12153 64B1 CD 65 A1			cmp Y
 12154 64B4 AD 64 A1			lda X+1
 12155 64B7 ED 66 A1			sbc Y+1
 12156 64BA 50 02			svc
 12157 64BC 49 80			eor #$80
 12158 64BE 30 03 4C 57 65		jpl l_1E93
 12159 64C3 AD 63 A1			lda X
 12160 64C6 85 A2			sta :STACKORIGIN+12
 12161 64C8 A0 00			ldy #$00
 12162 64CA AD 64 A1			lda X+1
 12163 64CD 10 01			spl
 12164 64CF 88				dey
 12165 64D0 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12166 64D2 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12167 64D4 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12168 64D6 A9 07			lda #$07
 12169 64D8 38 E5 A2			sub :STACKORIGIN+12
 12170 64DB 85 A1			sta :STACKORIGIN+11
 12171 64DD A9 00			lda #$00
 12172 64DF E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12173 64E1 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12174 64E3 A9 00			lda #$00
 12175 64E5 E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12176 64E7 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12177 64E9 A9 00			lda #$00
 12178 64EB E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12179 64ED 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12180 64EF AD 65 A1			lda Y
 12181 64F2 85 A0			sta :STACKORIGIN+10
 12182 64F4 A0 00			ldy #$00
 12183 64F6 AD 66 A1			lda Y+1
 12184 64F9 10 01			spl
 12185 64FB 88				dey
 12186 64FC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12187 64FE 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12188 6500 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12189 6502				.LOCAL
 12190 6502 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12191 6504 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 12192 6507 D0 1C			bne L4
 12193 6509 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12194 650B C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12195 650D D0 0A			bne L1
 12196 650F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12197 6511 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12198 6513 D0 04			bne L1
 12199 6515 A5 A0			lda :STACKORIGIN+10
 12200 6517 C5 A1			cmp :STACKORIGIN+11
 12201 6519 F0 10		L1	beq L5
 12202 651B B0 04			bcs L3
 12203 651D A9 FF			lda #$FF
 12204 651F D0 0A			bne L5
 12205 6521 A9 01		L3	lda #$01
 12206 6523 D0 06			bne L5
 12207 6525 50 04		L4	bvc L5
 12208 6527 49 FF			eor #$FF
 12209 6529 09 01			ora #$01
 12210 652B			L5
 12211 					.ENDL
 12212 652B 10 2A			jpl l_1E93
 12213
 12214 				; optimize OK (service.pas), line = 2106
 12215
 12216 652D AC 5F A1 84 84 AC + 	mwy BALL :bp2
 12217 6537 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12218 6539 A9 00			lda #$00
 12219 653B 38 F1 84			sub (:bp2),y
 12220 653E 85 9F			sta :STACKORIGIN+9
 12221 6540 C8				iny
 12222 6541 A9 00			lda #$00
 12223 6543 F1 84			sbc (:bp2),y
 12224 6545 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12225 6547 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12226 6549 A5 9F			lda :STACKORIGIN+9
 12227 654B 91 84			sta (:bp2),y
 12228 654D C8				iny
 12229 654E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12230 6550 91 84			sta (:bp2),y
 12231
 12232 				; optimize OK (service.pas), line = 2107
 12233
 12234 6552 A9 02			lda #$02
 12235 6554 8D 8B A1			sta EMERGENCY
 12236 6557			l_1E93
 12237
 12238 				; optimize OK (service.pas), line = 2111
 12239
 12240 6557 AD 63 A1			lda X
 12241 655A 85 A0			sta :STACKORIGIN+10
 12242 655C A0 00			ldy #$00
 12243 655E AD 64 A1			lda X+1
 12244 6561 10 01			spl
 12245 6563 88				dey
 12246 6564 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12247 6566 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12248 6568 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12249 656A A9 07			lda #$07
 12250 656C 38 E5 A0			sub :STACKORIGIN+10
 12251 656F 85 9F			sta :STACKORIGIN+9
 12252 6571 A9 00			lda #$00
 12253 6573 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12254 6575 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12255 6577 A9 00			lda #$00
 12256 6579 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 12257 657B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12258 657D A9 00			lda #$00
 12259 657F E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 12260 6581 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12261 6583 AD 65 A1			lda Y
 12262 6586 85 A0			sta :STACKORIGIN+10
 12263 6588 A0 00			ldy #$00
 12264 658A AD 66 A1			lda Y+1
 12265 658D 10 01			spl
 12266 658F 88				dey
 12267 6590 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12268 6592 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12269 6594 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12270 6596				.LOCAL
 12271 6596 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12272 6598 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12273 659B D0 1C			bne L4
 12274 659D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12275 659F C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12276 65A1 D0 0A			bne L1
 12277 65A3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12278 65A5 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12279 65A7 D0 04			bne L1
 12280 65A9 A5 9F			lda :STACKORIGIN+9
 12281 65AB C5 A0			cmp :STACKORIGIN+10
 12282 65AD F0 10		L1	beq L5
 12283 65AF B0 04			bcs L3
 12284 65B1 A9 FF			lda #$FF
 12285 65B3 D0 0A			bne L5
 12286 65B5 A9 01		L3	lda #$01
 12287 65B7 D0 06			bne L5
 12288 65B9 50 04		L4	bvc L5
 12289 65BB 49 FF			eor #$FF
 12290 65BD 09 01			ora #$01
 12291 65BF			L5
 12292 					.ENDL
 12293 65BF 10 3C			jpl l_1EC4
 12294 65C1 AD 65 A1			lda Y
 12295 65C4 CD 63 A1			cmp X
 12296 65C7 AD 66 A1			lda Y+1
 12297 65CA ED 64 A1			sbc X+1
 12298 65CD 50 02			svc
 12299 65CF 49 80			eor #$80
 12300 65D1 10 2A			jpl l_1EC4
 12301
 12302 				; optimize OK (service.pas), line = 2113
 12303
 12304 65D3 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 12305 65DD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12306 65DF A9 00			lda #$00
 12307 65E1 38 F1 84			sub (:bp2),y
 12308 65E4 85 9F			sta :STACKORIGIN+9
 12309 65E6 C8				iny
 12310 65E7 A9 00			lda #$00
 12311 65E9 F1 84			sbc (:bp2),y
 12312 65EB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12313 65ED A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12314 65EF A5 9F			lda :STACKORIGIN+9
 12315 65F1 91 84			sta (:bp2),y
 12316 65F3 C8				iny
 12317 65F4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12318 65F6 91 84			sta (:bp2),y
 12319
 12320 				; optimize OK (service.pas), line = 2114
 12321
 12322 65F8 A9 04			lda #$04
 12323 65FA 8D 8B A1			sta EMERGENCY
 12324 65FD			l_1EC4
 12325
 12326 				; optimize OK (service.pas), line = 2118
 12327
 12328 65FD AD 64 A1			lda X+1
 12329 6600 CD 66 A1			cmp Y+1
 12330 6603 D0 06			bne @+
 12331 6605 AD 63 A1			lda X
 12332 6608 CD 65 A1			cmp Y
 12333 				@
 12334 660B F0 5A			jeq l_1EF5x
 12335 660D AD 65 A1			lda Y
 12336 6610 85 A2			sta :STACKORIGIN+12
 12337 6612 A0 00			ldy #$00
 12338 6614 AD 66 A1			lda Y+1
 12339 6617 10 01			spl
 12340 6619 88				dey
 12341 661A 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12342 661C 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12343 661E 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12344 6620 A9 07			lda #$07
 12345 6622 38 E5 A2			sub :STACKORIGIN+12
 12346 6625 85 A1			sta :STACKORIGIN+11
 12347 6627 A9 00			lda #$00
 12348 6629 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12349 662B 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12350 662D A9 00			lda #$00
 12351 662F E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12352 6631 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12353 6633 A9 00			lda #$00
 12354 6635 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12355 6637 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12356 6639 AD 63 A1			lda X
 12357 663C 85 A0			sta :STACKORIGIN+10
 12358 663E A0 00			ldy #$00
 12359 6640 AD 64 A1			lda X+1
 12360 6643 10 01			spl
 12361 6645 88				dey
 12362 6646 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12363 6648 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12364 664A 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12365 664C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12366 664E C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
 12367 6650 D0 10			bne @+
 12368 6652 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12369 6654 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12370 6656 D0 0A			bne @+
 12371 6658 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12372 665A C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12373 665C D0 04			bne @+
 12374 665E A5 A0			lda :STACKORIGIN+10
 12375 6660 C5 A1			cmp :STACKORIGIN+11
 12376 				@
 12377 6662 F0 03 4C 24 6F		jne l_1EF5
 12378 6667			l_1EF5x
 12379
 12380 				; optimize OK (service.pas), line = 2120
 12381
 12382 6667 A9 00			lda #$00
 12383 6669 8D 7F A1			sta DEFLECT
 12384 666C 8D 80 A1			sta DEFLECT+1
 12385
 12386 				; optimize OK (service.pas), line = 2121
 12387
 12388 666F 8D 8D A1			sta TOUCH
 12389
 12390 				; optimize OK (service.pas), line = 2129
 12391
 12392 6672 AD 63 A1			lda X
 12393 6675 C9 05			cmp #$05
 12394 6677 AD 64 A1			lda X+1
 12395 667A E9 00			sbc #$00
 12396 667C 50 02			svc
 12397 667E 49 80			eor #$80
 12398 6680 30 08			jmi l_1F0F
 12399 6682 AD 8D A1			lda TOUCH
 12400 6685 09 01			ora #$01
 12401 6687 8D 8D A1			sta TOUCH
 12402 668A			l_1F0F
 12403
 12404 				; optimize OK (service.pas), line = 2130
 12405
 12406 668A AD 65 A1			lda Y
 12407 668D C9 05			cmp #$05
 12408 668F AD 66 A1			lda Y+1
 12409 6692 E9 00			sbc #$00
 12410 6694 50 02			svc
 12411 6696 49 80			eor #$80
 12412 6698 30 08			jmi l_1F2D
 12413 669A AD 8D A1			lda TOUCH
 12414 669D 09 02			ora #$02
 12415 669F 8D 8D A1			sta TOUCH
 12416 66A2			l_1F2D
 12417
 12418 				; optimize OK (service.pas), line = 2140
 12419
 12420 66A2 A9 FF			lda #$FF
 12421 66A4 8D 6F A1			sta LX
 12422 66A7 8D 70 A1			sta LX+1
 12423
 12424 66AA			l_1F43
 12425 				; --- ForToDoCondition
 12426 66AA AD 6F A1			lda LX
 12427 66AD C9 02			cmp #$02
 12428 66AF AD 70 A1			lda LX+1
 12429 66B2 E9 00			sbc #$00
 12430 66B4 50 02			svc
 12431 66B6 49 80			eor #$80
 12432 66B8 0A				asl @
 12433 66B9 B0 03 4C 31 69		jcc l_1F4F
 12434
 12435 				; optimize OK (service.pas), line = 2141
 12436
 12437 66BE A9 FF			lda #$FF
 12438 66C0 8D 71 A1			sta LY
 12439 66C3 8D 72 A1			sta LY+1
 12440
 12441 66C6			l_1F58
 12442 				; --- ForToDoCondition
 12443 66C6 AD 71 A1			lda LY
 12444 66C9 C9 02			cmp #$02
 12445 66CB AD 72 A1			lda LY+1
 12446 66CE E9 00			sbc #$00
 12447 66D0 50 02			svc
 12448 66D2 49 80			eor #$80
 12449 66D4 0A				asl @
 12450 66D5 B0 03 4C 23 69		jcc l_1F64
 12451
 12452 				; optimize FAIL (1, service.pas), line = 2143
 12453
 12454 66DA E8				inx
 12455 66DB A9 00 95 96			mva #$00 :STACKORIGIN,x
 12456 66DF 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12457 66E1 E8				inx
 12458 66E2 A9 0C 95 96			mva #$0C :STACKORIGIN,x
 12459 66E6 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 12460 66EA AD 67 A1			lda XB
 12461 66ED 18 6D 6F A1			add LX
 12462 66F1 8D 48 A0			sta MIN.A
 12463 66F4 AD 68 A1			lda XB+1
 12464 66F7 6D 70 A1			adc LX+1
 12465 66FA 8D 49 A0			sta MIN.A+1
 12466 66FD B5 96			lda :STACKORIGIN,x
 12467 66FF 8D 4A A0			sta MIN.B
 12468 6702 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12469 6704 8D 4B A0			sta MIN.B+1
 12470 6707 CA				dex
 12471 6708 20 86 2D			jsr MIN
 12472 670B AD 4C A0			lda MIN.RESULT
 12473 670E 8D 42 A0			sta MAX.A
 12474 6711 AD 4D A0			lda MIN.RESULT+1
 12475 6714 8D 43 A0			sta MAX.A+1
 12476 6717 B5 96			lda :STACKORIGIN,x
 12477 6719 8D 44 A0			sta MAX.B
 12478 671C B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12479 671E 8D 45 A0			sta MAX.B+1
 12480 6721 CA				dex
 12481 6722 20 5B 2D			jsr MAX
 12482 6725 AD 46 A0			lda MAX.RESULT
 12483 6728 8D 73 A1			sta MX
 12484 672B AD 47 A0			lda MAX.RESULT+1
 12485 672E 8D 74 A1			sta MX+1
 12486
 12487 				; optimize OK (service.pas), line = 2144
 12488
 12489 6731 AD 69 A1			lda YB
 12490 6734 18 6D 71 A1			add LY
 12491 6738 8D 75 A1			sta MY
 12492 673B AD 6A A1			lda YB+1
 12493 673E 6D 72 A1			adc LY+1
 12494 6741 8D 76 A1			sta MY+1
 12495
 12496 				; optimize OK (service.pas), line = 2148
 12497
 12498 6744 AD 67 A1			lda XB
 12499 6747 85 9F			sta :STACKORIGIN+9
 12500 6749 A0 00			ldy #$00
 12501 674B AD 68 A1			lda XB+1
 12502 674E 10 01			spl
 12503 6750 88				dey
 12504 6751 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12505 6753 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12506 6755 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12507 6757 AD 6F A1			lda LX
 12508 675A 85 A0			sta :STACKORIGIN+10
 12509 675C A0 00			ldy #$00
 12510 675E AD 70 A1			lda LX+1
 12511 6761 10 01			spl
 12512 6763 88				dey
 12513 6764 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12514 6766 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12515 6768 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12516 676A A5 9F			lda :STACKORIGIN+9
 12517 676C 18 65 A0			add :STACKORIGIN+10
 12518 676F F0 03 4C 7D 68		jne l_1FB9x
 12519 6774 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12520 6776 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12521 6778 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12522 677A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12523 677C 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 12524 677E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12525 6780 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12526 6782 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 12527 6784 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12528 6786 10 03 4C 7D 68		jmi l_1FB9x
 12529 678B AD 67 A1			lda XB
 12530 678E 85 A0			sta :STACKORIGIN+10
 12531 6790 A0 00			ldy #$00
 12532 6792 AD 68 A1			lda XB+1
 12533 6795 10 01			spl
 12534 6797 88				dey
 12535 6798 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12536 679A 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12537 679C 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12538 679E AD 6F A1			lda LX
 12539 67A1 85 A1			sta :STACKORIGIN+11
 12540 67A3 A0 00			ldy #$00
 12541 67A5 AD 70 A1			lda LX+1
 12542 67A8 10 01			spl
 12543 67AA 88				dey
 12544 67AB 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12545 67AD 84 C1			sty :STACKORIGIN+STACKWIDTH*2+11
 12546 67AF 84 D1			sty :STACKORIGIN+STACKWIDTH*3+11
 12547 67B1 A5 A0			lda :STACKORIGIN+10
 12548 67B3 18 65 A1			add :STACKORIGIN+11
 12549 67B6 85 A0			sta :STACKORIGIN+10
 12550 67B8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12551 67BA 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 12552 67BC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12553 67BE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12554 67C0 65 C1			adc :STACKORIGIN+STACKWIDTH*2+11
 12555 67C2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 12556 67C4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12557 67C6 65 D1			adc :STACKORIGIN+STACKWIDTH*3+11
 12558 67C8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 12559 67CA				.LOCAL
 12560 67CA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12561 67CC 38 E9 00			sub #$00
 12562 67CF D0 1C			bne L4
 12563 67D1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12564 67D3 C9 00			cmp #$00
 12565 67D5 D0 0A			bne L1
 12566 67D7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12567 67D9 C9 00			cmp #$00
 12568 67DB D0 04			bne L1
 12569 67DD A5 A0			lda :STACKORIGIN+10
 12570 67DF C9 0C			cmp #$0C
 12571 67E1 F0 10		L1	beq L5
 12572 67E3 B0 04			bcs L3
 12573 67E5 A9 FF			lda #$FF
 12574 67E7 D0 0A			bne L5
 12575 67E9 A9 01		L3	lda #$01
 12576 67EB D0 06			bne L5
 12577 67ED 50 04		L4	bvc L5
 12578 67EF 49 FF			eor #$FF
 12579 67F1 09 01			ora #$01
 12580 67F3			L5
 12581 					.ENDL
 12582 67F3 F0 02			seq
 12583 67F5 10 03			bpl @+
 12584 67F7 4C FD 67			jmp *+6
 12585 67FA 4C 7D 68		@	jmp l_1FB9x
 12586 67FD A9 10			lda #$10
 12587 67FF 85 8E			sta :ecx
 12588 6801 85 92			sta :ztmp8
 12589 6803 A9 00			lda #$00
 12590 6805 85 8F			sta :ecx+1
 12591 6807 85 93			sta :ztmp9
 12592 6809 AD 75 A1			lda MY
 12593 680C 85 86			sta :eax
 12594 680E 85 94			sta :ztmp10
 12595 6810 AD 76 A1			lda MY+1
 12596 6813 85 87			sta :eax+1
 12597 6815 85 95			sta :ztmp11
 12598 					.ifdef fmulinit
 12599 					fmulu_16
 12600 					els
 12601 6817 20 23 13			imulCX
 12602 					eif
 12603 681A A5 95			lda :ztmp11
 12604 681C 10 0D			bpl @+
 12605 681E A5 88			lda :eax+2
 12606 6820 38 E5 92			sub :ztmp8
 12607 6823 85 88			sta :eax+2
 12608 6825 A5 89			lda :eax+3
 12609 6827 E5 93			sbc :ztmp9
 12610 6829 85 89			sta :eax+3
 12611 				@
 12612 682B A5 93			lda :ztmp9
 12613 682D 10 0D			bpl @+
 12614 682F A5 88			lda :eax+2
 12615 6831 38 E5 94			sub :ztmp10
 12616 6834 85 88			sta :eax+2
 12617 6836 A5 89			lda :eax+3
 12618 6838 E5 95			sbc :ztmp11
 12619 683A 85 89			sta :eax+3
 12620 				@
 12621 683C A5 86			lda :eax
 12622 683E 85 A1			sta :STACKORIGIN+11
 12623 6840 A5 87			lda :eax+1
 12624 6842 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12625 6844 A5 88			lda :eax+2
 12626 6846 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12627 6848 A5 89			lda :eax+3
 12628 684A 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12629 684C AD 73 A1			lda MX
 12630 684F 85 A0			sta :STACKORIGIN+10
 12631 6851 A0 00			ldy #$00
 12632 6853 AD 74 A1			lda MX+1
 12633 6856 10 01			spl
 12634 6858 88				dey
 12635 6859 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12636 685B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12637 685D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12638 685F A5 A0			lda :STACKORIGIN+10
 12639 6861 18 65 A1			add :STACKORIGIN+11
 12640 6864 85 A0			sta :STACKORIGIN+10
 12641 6866 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12642 6868 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 12643 686A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12644 686C A5 A0			lda :STACKORIGIN+10
 12645 686E 18 69 00			add #$00
 12646 6871 A8				tay
 12647 6872 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12648 6874 69 00			adc #$00
 12649 6876 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12650 6878 B9 00 DB			lda adr.WALL,y
 12651 687B F0 4D			jeq l_1FB9
 12652 				@
 12653 687D			l_1FB9x
 12654
 12655 				; optimize OK (service.pas), line = 2151
 12656
 12657 687D AD 6F A1			lda LX
 12658 6880 18 69 01			add #$01
 12659 6883 85 86			sta :eax
 12660 6885 AD 70 A1			lda LX+1
 12661 6888 69 00			adc #$00
 12662 688A 85 87			sta :eax+1
 12663 688C A9 06			lda #$06
 12664 688E 85 8E			sta :ecx
 12665 6890 A9 00			lda #$00
 12666 6892 85 8F			sta :ecx+1
 12667 					.ifdef fmulinit
 12668 					fmulu_16
 12669 					els
 12670 6894 20 23 13			imulCX
 12671 					eif
 12672 6897 AD 71 A1			lda LY
 12673 689A 18 69 01			add #$01
 12674 689D 85 A0			sta :STACKORIGIN+10
 12675 689F AD 72 A1			lda LY+1
 12676 68A2 69 00			adc #$00
 12677 68A4 06 A0			asl :STACKORIGIN+10
 12678 68A6 2A				rol @
 12679 68A7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12680 68A9 A5 86			lda :eax
 12681 68AB 18 65 A0			add :STACKORIGIN+10
 12682 68AE 85 9F			sta :STACKORIGIN+9
 12683 68B0 A5 87			lda :eax+1
 12684 68B2 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12685 68B4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12686 68B6 A5 9F			lda :STACKORIGIN+9
 12687 68B8 18 69 00			add #$00
 12688 68BB A8				tay
 12689 68BC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12690 68BE 69 00			adc #$00
 12691 68C0 A9 01			lda #$01
 12692 68C2 99 8E A1			sta adr.ADJW,y
 12693 68C5 A9 00			lda #$00
 12694 68C7 4C 12 69			jmp l_1FDA
 12695 68CA			l_1FB9
 12696
 12697 				; optimize OK (service.pas), line = 2153
 12698
 12699 68CA AD 6F A1			lda LX
 12700 68CD 18 69 01			add #$01
 12701 68D0 85 86			sta :eax
 12702 68D2 AD 70 A1			lda LX+1
 12703 68D5 69 00			adc #$00
 12704 68D7 85 87			sta :eax+1
 12705 68D9 A9 06			lda #$06
 12706 68DB 85 8E			sta :ecx
 12707 68DD A9 00			lda #$00
 12708 68DF 85 8F			sta :ecx+1
 12709 					.ifdef fmulinit
 12710 					fmulu_16
 12711 					els
 12712 68E1 20 23 13			imulCX
 12713 					eif
 12714 68E4 AD 71 A1			lda LY
 12715 68E7 18 69 01			add #$01
 12716 68EA 85 A0			sta :STACKORIGIN+10
 12717 68EC AD 72 A1			lda LY+1
 12718 68EF 69 00			adc #$00
 12719 68F1 06 A0			asl :STACKORIGIN+10
 12720 68F3 2A				rol @
 12721 68F4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12722 68F6 A5 86			lda :eax
 12723 68F8 18 65 A0			add :STACKORIGIN+10
 12724 68FB 85 9F			sta :STACKORIGIN+9
 12725 68FD A5 87			lda :eax+1
 12726 68FF 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12727 6901 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12728 6903 A5 9F			lda :STACKORIGIN+9
 12729 6905 18 69 00			add #$00
 12730 6908 A8				tay
 12731 6909 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12732 690B 69 00			adc #$00
 12733 690D A9 00			lda #$00
 12734 690F 99 8E A1			sta adr.ADJW,y
 12735 6912			l_1FDA
 12736 6912 99 8F A1			sta adr.ADJW+1,y
 12737
 12738 				; --- ForToDoEpilog
 12739 6915 EE 71 A1			inc LY
 12740 6918 F0 03 4C C6 66		jne l_1F58
 12741 691D EE 72 A1			inc LY+1
 12742 6920 4C C6 66			jmp l_1F58
 12743 6923			l_1F64
 12744
 12745 				; --- ForToDoEpilog
 12746 6923 EE 6F A1			inc LX
 12747 6926 F0 03 4C AA 66		jne l_1F43
 12748 692B EE 70 A1			inc LX+1
 12749 692E 4C AA 66			jmp l_1F43
 12750 6931			l_1F4F
 12751
 12752 				; optimize OK (service.pas), line = 2172
 12753
 12754 6931 AD 8E A1			lda adr.ADJW
 12755 6934 85 9F			sta :STACKORIGIN+9
 12756 6936 AD 8F A1			lda adr.ADJW+1
 12757 6939 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12758 693B AD 94 A1			lda adr.ADJW+$06
 12759 693E 85 A0			sta :STACKORIGIN+10
 12760 6940 AD 95 A1			lda adr.ADJW+1+$06
 12761 6943 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12762 6945 06 A0			asl :STACKORIGIN+10
 12763 6947 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12764 6949 A5 9F			lda :STACKORIGIN+9
 12765 694B 18 65 A0			add :STACKORIGIN+10
 12766 694E 85 9F			sta :STACKORIGIN+9
 12767 6950 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12768 6952 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12769 6954 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12770 6956 AD 9A A1			lda adr.ADJW+$0C
 12771 6959 85 A0			sta :STACKORIGIN+10
 12772 695B AD 9B A1			lda adr.ADJW+1+$0C
 12773 695E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12774 6960 06 A0			asl :STACKORIGIN+10
 12775 6962 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12776 6964 06 A0			asl :STACKORIGIN+10
 12777 6966 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12778 6968 A5 9F			lda :STACKORIGIN+9
 12779 696A 18 65 A0			add :STACKORIGIN+10
 12780 696D 85 9F			sta :STACKORIGIN+9
 12781 696F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12782 6971 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12783 6973 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12784 6975 AD 9C A1			lda adr.ADJW+$0E
 12785 6978 85 A0			sta :STACKORIGIN+10
 12786 697A AD 9D A1			lda adr.ADJW+1+$0E
 12787 697D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12788 697F 06 A0			asl :STACKORIGIN+10
 12789 6981 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12790 6983 06 A0			asl :STACKORIGIN+10
 12791 6985 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12792 6987 06 A0			asl :STACKORIGIN+10
 12793 6989 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12794 698B A5 9F			lda :STACKORIGIN+9
 12795 698D 18 65 A0			add :STACKORIGIN+10
 12796 6990 85 9F			sta :STACKORIGIN+9
 12797 6992 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12798 6994 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12799 6996 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12800 6998 AD 9E A1			lda adr.ADJW+$10
 12801 699B 85 A0			sta :STACKORIGIN+10
 12802 699D AD 9F A1			lda adr.ADJW+1+$10
 12803 69A0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12804 69A2 06 A0			asl :STACKORIGIN+10
 12805 69A4 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12806 69A6 06 A0			asl :STACKORIGIN+10
 12807 69A8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12808 69AA 06 A0			asl :STACKORIGIN+10
 12809 69AC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12810 69AE 06 A0			asl :STACKORIGIN+10
 12811 69B0 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12812 69B2 A5 9F			lda :STACKORIGIN+9
 12813 69B4 18 65 A0			add :STACKORIGIN+10
 12814 69B7 85 9F			sta :STACKORIGIN+9
 12815 69B9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12816 69BB 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12817 69BD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12818 69BF AD 98 A1			lda adr.ADJW+$0A
 12819 69C2 85 A0			sta :STACKORIGIN+10
 12820 69C4 AD 99 A1			lda adr.ADJW+1+$0A
 12821 69C7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12822 69C9 06 A0			asl :STACKORIGIN+10
 12823 69CB 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12824 69CD 06 A0			asl :STACKORIGIN+10
 12825 69CF 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12826 69D1 06 A0			asl :STACKORIGIN+10
 12827 69D3 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12828 69D5 06 A0			asl :STACKORIGIN+10
 12829 69D7 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12830 69D9 06 A0			asl :STACKORIGIN+10
 12831 69DB 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12832 69DD A5 9F			lda :STACKORIGIN+9
 12833 69DF 18 65 A0			add :STACKORIGIN+10
 12834 69E2 85 9F			sta :STACKORIGIN+9
 12835 69E4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12836 69E6 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12837 69E8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12838 69EA AD 92 A1			lda adr.ADJW+$04
 12839 69ED 85 A0			sta :STACKORIGIN+10
 12840 69EF AD 93 A1			lda adr.ADJW+1+$04
 12841 69F2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12842 69F4 06 A0			asl :STACKORIGIN+10
 12843 69F6 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12844 69F8 06 A0			asl :STACKORIGIN+10
 12845 69FA 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12846 69FC 06 A0			asl :STACKORIGIN+10
 12847 69FE 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12848 6A00 06 A0			asl :STACKORIGIN+10
 12849 6A02 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12850 6A04 06 A0			asl :STACKORIGIN+10
 12851 6A06 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12852 6A08 06 A0			asl :STACKORIGIN+10
 12853 6A0A 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12854 6A0C A5 9F			lda :STACKORIGIN+9
 12855 6A0E 18 65 A0			add :STACKORIGIN+10
 12856 6A11 85 9F			sta :STACKORIGIN+9
 12857 6A13 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12858 6A15 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12859 6A17 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12860 6A19 AD 90 A1			lda adr.ADJW+$02
 12861 6A1C 85 A0			sta :STACKORIGIN+10
 12862 6A1E AD 91 A1			lda adr.ADJW+1+$02
 12863 6A21 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12864 6A23 06 A0			asl :STACKORIGIN+10
 12865 6A25 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12866 6A27 06 A0			asl :STACKORIGIN+10
 12867 6A29 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12868 6A2B 06 A0			asl :STACKORIGIN+10
 12869 6A2D 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12870 6A2F 06 A0			asl :STACKORIGIN+10
 12871 6A31 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12872 6A33 06 A0			asl :STACKORIGIN+10
 12873 6A35 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12874 6A37 06 A0			asl :STACKORIGIN+10
 12875 6A39 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12876 6A3B 06 A0			asl :STACKORIGIN+10
 12877 6A3D 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12878 6A3F A5 9F			lda :STACKORIGIN+9
 12879 6A41 18 65 A0			add :STACKORIGIN+10
 12880 6A44 8D 81 A1			sta AROUND
 12881 6A47 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12882 6A49 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12883 6A4B 8D 82 A1			sta AROUND+1
 12884
 12885 				; optimize OK (service.pas), line = 2203
 12886
 12887 6A4E AD 8D A1			lda TOUCH
 12888 6A51 F0 03 4C 0F 6B		jne l_2079
 12889
 12890 				; optimize OK (service.pas), line = 2205
 12891
 12892 6A56 AD 81 A1			lda AROUND
 12893 6A59 29 83			and #$83
 12894 6A5B D0 0A			jne l_208F
 12895 6A5D A9 11			lda #$11
 12896 6A5F 8D 7F A1			sta DEFLECT
 12897 6A62 A9 00			lda #$00
 12898 6A64 8D 80 A1			sta DEFLECT+1
 12899 6A67			l_208F
 12900
 12901 				; optimize OK (service.pas), line = 2206
 12902
 12903 6A67 AD 81 A1			lda AROUND
 12904 6A6A 29 83			and #$83
 12905 6A6C C9 01			cmp #$01
 12906 6A6E D0 0A			jne l_20AB
 12907 6A70 A9 33			lda #$33
 12908 6A72 8D 7F A1			sta DEFLECT
 12909 6A75 A9 00			lda #$00
 12910 6A77 8D 80 A1			sta DEFLECT+1
 12911 6A7A			l_20AB
 12912
 12913 				; optimize OK (service.pas), line = 2207
 12914
 12915 6A7A AD 81 A1			lda AROUND
 12916 6A7D 29 83			and #$83
 12917 6A7F C9 02			cmp #$02
 12918 6A81 D0 0A			jne l_20C7
 12919 6A83 A9 10			lda #$10
 12920 6A85 8D 7F A1			sta DEFLECT
 12921 6A88 A9 00			lda #$00
 12922 6A8A 8D 80 A1			sta DEFLECT+1
 12923 6A8D			l_20C7
 12924
 12925 				; optimize OK (service.pas), line = 2208
 12926
 12927 6A8D AD 81 A1			lda AROUND
 12928 6A90 29 83			and #$83
 12929 6A92 C9 03			cmp #$03
 12930 6A94 D0 0A			jne l_20E3
 12931 6A96 A9 12			lda #$12
 12932 6A98 8D 7F A1			sta DEFLECT
 12933 6A9B A9 00			lda #$00
 12934 6A9D 8D 80 A1			sta DEFLECT+1
 12935 6AA0			l_20E3
 12936
 12937 				; optimize OK (service.pas), line = 2209
 12938
 12939 6AA0 AD 81 A1			lda AROUND
 12940 6AA3 29 83			and #$83
 12941 6AA5 C9 80			cmp #$80
 12942 6AA7 D0 0A			jne l_20FF
 12943 6AA9 A9 01			lda #$01
 12944 6AAB 8D 7F A1			sta DEFLECT
 12945 6AAE A9 00			lda #$00
 12946 6AB0 8D 80 A1			sta DEFLECT+1
 12947 6AB3			l_20FF
 12948
 12949 				; optimize OK (service.pas), line = 2210
 12950
 12951 6AB3 AD 81 A1			lda AROUND
 12952 6AB6 29 83			and #$83
 12953 6AB8 C9 81			cmp #$81
 12954 6ABA D0 0A			jne l_211B
 12955 6ABC A9 21			lda #$21
 12956 6ABE 8D 7F A1			sta DEFLECT
 12957 6AC1 A9 00			lda #$00
 12958 6AC3 8D 80 A1			sta DEFLECT+1
 12959 6AC6			l_211B
 12960
 12961 				; optimize OK (service.pas), line = 2211
 12962
 12963 6AC6 AD 81 A1			lda AROUND
 12964 6AC9 29 83			and #$83
 12965 6ACB C9 82			cmp #$82
 12966 6ACD D0 0A			jne l_2137
 12967 6ACF A9 11			lda #$11
 12968 6AD1 8D 7F A1			sta DEFLECT
 12969 6AD4 A9 00			lda #$00
 12970 6AD6 8D 80 A1			sta DEFLECT+1
 12971 6AD9			l_2137
 12972
 12973 				; optimize OK (service.pas), line = 2213
 12974
 12975 6AD9 A9 05			lda #$05
 12976 6ADB 8D 8B A1			sta EMERGENCY
 12977
 12978 				; optimize OK (service.pas), line = 2214
 12979
 12980 6ADE AD 69 A1			lda YB
 12981 6AE1 38 E9 01			sub #$01
 12982 6AE4 8D 53 A1			sta SHOOT_BLOCK.YB
 12983 6AE7 AD 6A A1			lda YB+1
 12984 6AEA E9 00			sbc #$00
 12985 6AEC 8D 54 A1			sta SHOOT_BLOCK.YB+1
 12986 6AEF AD 67 A1			lda XB
 12987 6AF2 38 E9 01			sub #$01
 12988 6AF5 8D 51 A1			sta SHOOT_BLOCK.XB
 12989 6AF8 AD 68 A1			lda XB+1
 12990 6AFB E9 00			sbc #$00
 12991 6AFD 8D 52 A1			sta SHOOT_BLOCK.XB+1
 12992 6B00 AD 5F A1			lda BALL
 12993 6B03 8D 55 A1			sta SHOOT_BLOCK.BALL
 12994 6B06 AD 60 A1			lda BALL+1
 12995 6B09 8D 56 A1			sta SHOOT_BLOCK.BALL+1
 12996 6B0C 20 32 5A			jsr SHOOT_BLOCK
 12997 6B0F			l_2079
 12998
 12999 				; optimize OK (service.pas), line = 2219
 13000
 13001 6B0F AD 8D A1			lda TOUCH
 13002 6B12 C9 01			cmp #$01
 13003 6B14 F0 03 4C D2 6B		jne l_2165
 13004
 13005 				; optimize OK (service.pas), line = 2221
 13006
 13007 6B19 AD 81 A1			lda AROUND
 13008 6B1C 29 0E			and #$0E
 13009 6B1E D0 0A			jne l_217B
 13010 6B20 A9 21			lda #$21
 13011 6B22 8D 7F A1			sta DEFLECT
 13012 6B25 A9 00			lda #$00
 13013 6B27 8D 80 A1			sta DEFLECT+1
 13014 6B2A			l_217B
 13015
 13016 				; optimize OK (service.pas), line = 2222
 13017
 13018 6B2A AD 81 A1			lda AROUND
 13019 6B2D 29 0E			and #$0E
 13020 6B2F C9 02			cmp #$02
 13021 6B31 D0 0A			jne l_2197
 13022 6B33 A9 20			lda #$20
 13023 6B35 8D 7F A1			sta DEFLECT
 13024 6B38 A9 00			lda #$00
 13025 6B3A 8D 80 A1			sta DEFLECT+1
 13026 6B3D			l_2197
 13027
 13028 				; optimize OK (service.pas), line = 2223
 13029
 13030 6B3D AD 81 A1			lda AROUND
 13031 6B40 29 0E			and #$0E
 13032 6B42 C9 04			cmp #$04
 13033 6B44 D0 0A			jne l_21B3
 13034 6B46 A9 33			lda #$33
 13035 6B48 8D 7F A1			sta DEFLECT
 13036 6B4B A9 00			lda #$00
 13037 6B4D 8D 80 A1			sta DEFLECT+1
 13038 6B50			l_21B3
 13039
 13040 				; optimize OK (service.pas), line = 2224
 13041
 13042 6B50 AD 81 A1			lda AROUND
 13043 6B53 29 0E			and #$0E
 13044 6B55 C9 06			cmp #$06
 13045 6B57 D0 0A			jne l_21CF
 13046 6B59 A9 22			lda #$22
 13047 6B5B 8D 7F A1			sta DEFLECT
 13048 6B5E A9 00			lda #$00
 13049 6B60 8D 80 A1			sta DEFLECT+1
 13050 6B63			l_21CF
 13051
 13052 				; optimize OK (service.pas), line = 2225
 13053
 13054 6B63 AD 81 A1			lda AROUND
 13055 6B66 29 0E			and #$0E
 13056 6B68 C9 08			cmp #$08
 13057 6B6A D0 0A			jne l_21EB
 13058 6B6C A9 01			lda #$01
 13059 6B6E 8D 7F A1			sta DEFLECT
 13060 6B71 A9 00			lda #$00
 13061 6B73 8D 80 A1			sta DEFLECT+1
 13062 6B76			l_21EB
 13063
 13064 				; optimize OK (service.pas), line = 2226
 13065
 13066 6B76 AD 81 A1			lda AROUND
 13067 6B79 29 0E			and #$0E
 13068 6B7B C9 0A			cmp #$0A
 13069 6B7D D0 0A			jne l_2207
 13070 6B7F A9 21			lda #$21
 13071 6B81 8D 7F A1			sta DEFLECT
 13072 6B84 A9 00			lda #$00
 13073 6B86 8D 80 A1			sta DEFLECT+1
 13074 6B89			l_2207
 13075
 13076 				; optimize OK (service.pas), line = 2227
 13077
 13078 6B89 AD 81 A1			lda AROUND
 13079 6B8C 29 0E			and #$0E
 13080 6B8E C9 0C			cmp #$0C
 13081 6B90 D0 0A			jne l_2223
 13082 6B92 A9 11			lda #$11
 13083 6B94 8D 7F A1			sta DEFLECT
 13084 6B97 A9 00			lda #$00
 13085 6B99 8D 80 A1			sta DEFLECT+1
 13086 6B9C			l_2223
 13087
 13088 				; optimize OK (service.pas), line = 2229
 13089
 13090 6B9C A9 08			lda #$08
 13091 6B9E 8D 8B A1			sta EMERGENCY
 13092
 13093 				; optimize OK (service.pas), line = 2230
 13094
 13095 6BA1 AD 69 A1			lda YB
 13096 6BA4 38 E9 01			sub #$01
 13097 6BA7 8D 53 A1			sta SHOOT_BLOCK.YB
 13098 6BAA AD 6A A1			lda YB+1
 13099 6BAD E9 00			sbc #$00
 13100 6BAF 8D 54 A1			sta SHOOT_BLOCK.YB+1
 13101 6BB2 AD 67 A1			lda XB
 13102 6BB5 18 69 01			add #$01
 13103 6BB8 8D 51 A1			sta SHOOT_BLOCK.XB
 13104 6BBB AD 68 A1			lda XB+1
 13105 6BBE 69 00			adc #$00
 13106 6BC0 8D 52 A1			sta SHOOT_BLOCK.XB+1
 13107 6BC3 AD 5F A1			lda BALL
 13108 6BC6 8D 55 A1			sta SHOOT_BLOCK.BALL
 13109 6BC9 AD 60 A1			lda BALL+1
 13110 6BCC 8D 56 A1			sta SHOOT_BLOCK.BALL+1
 13111 6BCF 20 32 5A			jsr SHOOT_BLOCK
 13112 6BD2			l_2165
 13113
 13114 				; optimize OK (service.pas), line = 2233
 13115
 13116 6BD2 AD 8D A1			lda TOUCH
 13117 6BD5 C9 02			cmp #$02
 13118 6BD7 F0 03 4C 95 6C		jne l_2251
 13119
 13120 				; optimize OK (service.pas), line = 2235
 13121
 13122 6BDC AD 81 A1			lda AROUND
 13123 6BDF 29 E0			and #$E0
 13124 6BE1 D0 0A			jne l_2267
 13125 6BE3 A9 12			lda #$12
 13126 6BE5 8D 7F A1			sta DEFLECT
 13127 6BE8 A9 00			lda #$00
 13128 6BEA 8D 80 A1			sta DEFLECT+1
 13129 6BED			l_2267
 13130
 13131 				; optimize OK (service.pas), line = 2236
 13132
 13133 6BED AD 81 A1			lda AROUND
 13134 6BF0 29 E0			and #$E0
 13135 6BF2 C9 20			cmp #$20
 13136 6BF4 D0 0A			jne l_2283
 13137 6BF6 A9 10			lda #$10
 13138 6BF8 8D 7F A1			sta DEFLECT
 13139 6BFB A9 00			lda #$00
 13140 6BFD 8D 80 A1			sta DEFLECT+1
 13141 6C00			l_2283
 13142
 13143 				; optimize OK (service.pas), line = 2237
 13144
 13145 6C00 AD 81 A1			lda AROUND
 13146 6C03 29 E0			and #$E0
 13147 6C05 C9 40			cmp #$40
 13148 6C07 D0 0A			jne l_229F
 13149 6C09 A9 33			lda #$33
 13150 6C0B 8D 7F A1			sta DEFLECT
 13151 6C0E A9 00			lda #$00
 13152 6C10 8D 80 A1			sta DEFLECT+1
 13153 6C13			l_229F
 13154
 13155 				; optimize OK (service.pas), line = 2238
 13156
 13157 6C13 AD 81 A1			lda AROUND
 13158 6C16 29 E0			and #$E0
 13159 6C18 C9 60			cmp #$60
 13160 6C1A D0 0A			jne l_22BB
 13161 6C1C A9 11			lda #$11
 13162 6C1E 8D 7F A1			sta DEFLECT
 13163 6C21 A9 00			lda #$00
 13164 6C23 8D 80 A1			sta DEFLECT+1
 13165 6C26			l_22BB
 13166
 13167 				; optimize OK (service.pas), line = 2239
 13168
 13169 6C26 AD 81 A1			lda AROUND
 13170 6C29 29 E0			and #$E0
 13171 6C2B C9 80			cmp #$80
 13172 6C2D D0 0A			jne l_22D7
 13173 6C2F A9 02			lda #$02
 13174 6C31 8D 7F A1			sta DEFLECT
 13175 6C34 A9 00			lda #$00
 13176 6C36 8D 80 A1			sta DEFLECT+1
 13177 6C39			l_22D7
 13178
 13179 				; optimize OK (service.pas), line = 2240
 13180
 13181 6C39 AD 81 A1			lda AROUND
 13182 6C3C 29 E0			and #$E0
 13183 6C3E C9 A0			cmp #$A0
 13184 6C40 D0 0A			jne l_22F3
 13185 6C42 A9 12			lda #$12
 13186 6C44 8D 7F A1			sta DEFLECT
 13187 6C47 A9 00			lda #$00
 13188 6C49 8D 80 A1			sta DEFLECT+1
 13189 6C4C			l_22F3
 13190
 13191 				; optimize OK (service.pas), line = 2241
 13192
 13193 6C4C AD 81 A1			lda AROUND
 13194 6C4F 29 E0			and #$E0
 13195 6C51 C9 C0			cmp #$C0
 13196 6C53 D0 0A			jne l_230F
 13197 6C55 A9 22			lda #$22
 13198 6C57 8D 7F A1			sta DEFLECT
 13199 6C5A A9 00			lda #$00
 13200 6C5C 8D 80 A1			sta DEFLECT+1
 13201 6C5F			l_230F
 13202
 13203 				; optimize OK (service.pas), line = 2243
 13204
 13205 6C5F A9 06			lda #$06
 13206 6C61 8D 8B A1			sta EMERGENCY
 13207
 13208 				; optimize OK (service.pas), line = 2244
 13209
 13210 6C64 AD 69 A1			lda YB
 13211 6C67 18 69 01			add #$01
 13212 6C6A 8D 53 A1			sta SHOOT_BLOCK.YB
 13213 6C6D AD 6A A1			lda YB+1
 13214 6C70 69 00			adc #$00
 13215 6C72 8D 54 A1			sta SHOOT_BLOCK.YB+1
 13216 6C75 AD 67 A1			lda XB
 13217 6C78 38 E9 01			sub #$01
 13218 6C7B 8D 51 A1			sta SHOOT_BLOCK.XB
 13219 6C7E AD 68 A1			lda XB+1
 13220 6C81 E9 00			sbc #$00
 13221 6C83 8D 52 A1			sta SHOOT_BLOCK.XB+1
 13222 6C86 AD 5F A1			lda BALL
 13223 6C89 8D 55 A1			sta SHOOT_BLOCK.BALL
 13224 6C8C AD 60 A1			lda BALL+1
 13225 6C8F 8D 56 A1			sta SHOOT_BLOCK.BALL+1
 13226 6C92 20 32 5A			jsr SHOOT_BLOCK
 13227 6C95			l_2251
 13228
 13229 				; optimize OK (service.pas), line = 2247
 13230
 13231 6C95 AD 8D A1			lda TOUCH
 13232 6C98 C9 03			cmp #$03
 13233 6C9A F0 03 4C 58 6D		jne l_233D
 13234
 13235 				; optimize OK (service.pas), line = 2249
 13236
 13237 6C9F AD 81 A1			lda AROUND
 13238 6CA2 29 38			and #$38
 13239 6CA4 D0 0A			jne l_2353
 13240 6CA6 A9 22			lda #$22
 13241 6CA8 8D 7F A1			sta DEFLECT
 13242 6CAB A9 00			lda #$00
 13243 6CAD 8D 80 A1			sta DEFLECT+1
 13244 6CB0			l_2353
 13245
 13246 				; optimize OK (service.pas), line = 2250
 13247
 13248 6CB0 AD 81 A1			lda AROUND
 13249 6CB3 29 38			and #$38
 13250 6CB5 C9 08			cmp #$08
 13251 6CB7 D0 0A			jne l_236F
 13252 6CB9 A9 02			lda #$02
 13253 6CBB 8D 7F A1			sta DEFLECT
 13254 6CBE A9 00			lda #$00
 13255 6CC0 8D 80 A1			sta DEFLECT+1
 13256 6CC3			l_236F
 13257
 13258 				; optimize OK (service.pas), line = 2251
 13259
 13260 6CC3 AD 81 A1			lda AROUND
 13261 6CC6 29 38			and #$38
 13262 6CC8 C9 10			cmp #$10
 13263 6CCA D0 0A			jne l_238B
 13264 6CCC A9 33			lda #$33
 13265 6CCE 8D 7F A1			sta DEFLECT
 13266 6CD1 A9 00			lda #$00
 13267 6CD3 8D 80 A1			sta DEFLECT+1
 13268 6CD6			l_238B
 13269
 13270 				; optimize OK (service.pas), line = 2252
 13271
 13272 6CD6 AD 81 A1			lda AROUND
 13273 6CD9 29 38			and #$38
 13274 6CDB C9 18			cmp #$18
 13275 6CDD D0 0A			jne l_23A7
 13276 6CDF A9 12			lda #$12
 13277 6CE1 8D 7F A1			sta DEFLECT
 13278 6CE4 A9 00			lda #$00
 13279 6CE6 8D 80 A1			sta DEFLECT+1
 13280 6CE9			l_23A7
 13281
 13282 				; optimize OK (service.pas), line = 2253
 13283
 13284 6CE9 AD 81 A1			lda AROUND
 13285 6CEC 29 38			and #$38
 13286 6CEE C9 20			cmp #$20
 13287 6CF0 D0 0A			jne l_23C3
 13288 6CF2 A9 20			lda #$20
 13289 6CF4 8D 7F A1			sta DEFLECT
 13290 6CF7 A9 00			lda #$00
 13291 6CF9 8D 80 A1			sta DEFLECT+1
 13292 6CFC			l_23C3
 13293
 13294 				; optimize OK (service.pas), line = 2254
 13295
 13296 6CFC AD 81 A1			lda AROUND
 13297 6CFF 29 38			and #$38
 13298 6D01 C9 28			cmp #$28
 13299 6D03 D0 0A			jne l_23DF
 13300 6D05 A9 22			lda #$22
 13301 6D07 8D 7F A1			sta DEFLECT
 13302 6D0A A9 00			lda #$00
 13303 6D0C 8D 80 A1			sta DEFLECT+1
 13304 6D0F			l_23DF
 13305
 13306 				; optimize OK (service.pas), line = 2255
 13307
 13308 6D0F AD 81 A1			lda AROUND
 13309 6D12 29 38			and #$38
 13310 6D14 C9 30			cmp #$30
 13311 6D16 D0 0A			jne l_23FB
 13312 6D18 A9 21			lda #$21
 13313 6D1A 8D 7F A1			sta DEFLECT
 13314 6D1D A9 00			lda #$00
 13315 6D1F 8D 80 A1			sta DEFLECT+1
 13316 6D22			l_23FB
 13317
 13318 				; optimize OK (service.pas), line = 2257
 13319
 13320 6D22 A9 07			lda #$07
 13321 6D24 8D 8B A1			sta EMERGENCY
 13322
 13323 				; optimize OK (service.pas), line = 2258
 13324
 13325 6D27 AD 69 A1			lda YB
 13326 6D2A 18 69 01			add #$01
 13327 6D2D 8D 53 A1			sta SHOOT_BLOCK.YB
 13328 6D30 AD 6A A1			lda YB+1
 13329 6D33 69 00			adc #$00
 13330 6D35 8D 54 A1			sta SHOOT_BLOCK.YB+1
 13331 6D38 AD 67 A1			lda XB
 13332 6D3B 18 69 01			add #$01
 13333 6D3E 8D 51 A1			sta SHOOT_BLOCK.XB
 13334 6D41 AD 68 A1			lda XB+1
 13335 6D44 69 00			adc #$00
 13336 6D46 8D 52 A1			sta SHOOT_BLOCK.XB+1
 13337 6D49 AD 5F A1			lda BALL
 13338 6D4C 8D 55 A1			sta SHOOT_BLOCK.BALL
 13339 6D4F AD 60 A1			lda BALL+1
 13340 6D52 8D 56 A1			sta SHOOT_BLOCK.BALL+1
 13341 6D55 20 32 5A			jsr SHOOT_BLOCK
 13342 6D58			l_233D
 13343
 13344 				; optimize OK (service.pas), line = 2264
 13345
 13346 6D58 AD 7F A1			lda DEFLECT
 13347 6D5B 85 9F			sta :STACKORIGIN+9
 13348 6D5D A0 00			ldy #$00
 13349 6D5F AD 80 A1			lda DEFLECT+1
 13350 6D62 10 01			spl
 13351 6D64 88				dey
 13352 6D65 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13353 6D67 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 13354 6D69 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13355 6D6B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13356 6D6D 66 9F			ror :STACKORIGIN+9
 13357 6D6F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13358 6D71 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13359 6D73 66 9F			ror :STACKORIGIN+9
 13360 6D75 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13361 6D77 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13362 6D79 66 9F			ror :STACKORIGIN+9
 13363 6D7B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13364 6D7D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13365 6D7F 66 9F			ror :STACKORIGIN+9
 13366 6D81 A5 9F			lda :STACKORIGIN+9
 13367 6D83 8D 87 A1			sta MYX
 13368 6D86 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13369 6D88 8D 88 A1			sta MYX+1
 13370
 13371 				; optimize OK (service.pas), line = 2265
 13372
 13373 6D8B AD 7F A1			lda DEFLECT
 13374 6D8E 29 0F			and #$0F
 13375 6D90 8D 89 A1			sta MYY
 13376 6D93 A9 00			lda #$00
 13377 6D95 8D 8A A1			sta MYY+1
 13378
 13379 				; optimize OK (service.pas), line = 2267
 13380
 13381 6D98 AD 88 A1			lda MYX+1
 13382 6D9B D0 05			bne @+
 13383 6D9D AD 87 A1			lda MYX
 13384 6DA0 C9 01			cmp #$01
 13385 				@
 13386 6DA2 D0 50			jne l_243A
 13387 6DA4 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13388 6DAE A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13389 6DB0 B1 84			lda (:bp2),y
 13390 6DB2 85 8A			sta SYSTEM.ABS.@010184000.X
 13391 6DB4 C8				iny
 13392 6DB5 B1 84			lda (:bp2),y
 13393 6DB7 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13394 6DB9 20 92 1C			jsr SYSTEM.ABS.@010184000
 13395 6DBC E8				inx
 13396 6DBD A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13397 6DC1 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13398 6DC5 A9 00			lda #$00
 13399 6DC7 38 F5 96			sub :STACKORIGIN,x
 13400 6DCA 95 96			sta :STACKORIGIN,x
 13401 6DCC A9 00			lda #$00
 13402 6DCE F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13403 6DD0 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13404 6DD2 A9 00			lda #$00
 13405 6DD4 E9 00			sbc #$00
 13406 6DD6 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13407 6DD8 A9 00			lda #$00
 13408 6DDA E9 00			sbc #$00
 13409 6DDC 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13410 6DDE AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13411 6DE8 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13412 6DEA B5 96			lda :STACKORIGIN,x
 13413 6DEC 91 84			sta (:bp2),y
 13414 6DEE C8				iny
 13415 6DEF B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13416 6DF1 91 84			sta (:bp2),y
 13417 6DF3 CA				dex
 13418 6DF4			l_243A
 13419
 13420 				; optimize OK (service.pas), line = 2268
 13421
 13422 6DF4 AD 88 A1			lda MYX+1
 13423 6DF7 D0 05			bne @+
 13424 6DF9 AD 87 A1			lda MYX
 13425 6DFC C9 02			cmp #$02
 13426 				@
 13427 6DFE D0 2D			jne l_2457
 13428 6E00 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13429 6E0A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13430 6E0C B1 84			lda (:bp2),y
 13431 6E0E 85 8A			sta SYSTEM.ABS.@010184000.X
 13432 6E10 C8				iny
 13433 6E11 B1 84			lda (:bp2),y
 13434 6E13 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13435 6E15 20 92 1C			jsr SYSTEM.ABS.@010184000
 13436 6E18 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13437 6E22 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13438 6E24 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13439 6E26 91 84			sta (:bp2),y
 13440 6E28 C8				iny
 13441 6E29 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13442 6E2B 91 84			sta (:bp2),y
 13443 6E2D			l_2457
 13444
 13445 				; optimize OK (service.pas), line = 2269
 13446
 13447 6E2D AD 88 A1			lda MYX+1
 13448 6E30 D0 05			bne @+
 13449 6E32 AD 87 A1			lda MYX
 13450 6E35 C9 03			cmp #$03
 13451 				@
 13452 6E37 D0 25			jne l_2471
 13453 6E39 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13454 6E43 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13455 6E45 A9 00			lda #$00
 13456 6E47 38 F1 84			sub (:bp2),y
 13457 6E4A 85 9F			sta :STACKORIGIN+9
 13458 6E4C C8				iny
 13459 6E4D A9 00			lda #$00
 13460 6E4F F1 84			sbc (:bp2),y
 13461 6E51 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13462 6E53 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13463 6E55 A5 9F			lda :STACKORIGIN+9
 13464 6E57 91 84			sta (:bp2),y
 13465 6E59 C8				iny
 13466 6E5A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13467 6E5C 91 84			sta (:bp2),y
 13468 6E5E			l_2471
 13469
 13470 				; optimize OK (service.pas), line = 2271
 13471
 13472 6E5E AD 8A A1			lda MYY+1
 13473 6E61 D0 05			bne @+
 13474 6E63 AD 89 A1			lda MYY
 13475 6E66 C9 01			cmp #$01
 13476 				@
 13477 6E68 D0 50			jne l_248D
 13478 6E6A AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13479 6E74 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13480 6E76 B1 84			lda (:bp2),y
 13481 6E78 85 8A			sta SYSTEM.ABS.@010184000.X
 13482 6E7A C8				iny
 13483 6E7B B1 84			lda (:bp2),y
 13484 6E7D 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13485 6E7F 20 92 1C			jsr SYSTEM.ABS.@010184000
 13486 6E82 E8				inx
 13487 6E83 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13488 6E87 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13489 6E8B A9 00			lda #$00
 13490 6E8D 38 F5 96			sub :STACKORIGIN,x
 13491 6E90 95 96			sta :STACKORIGIN,x
 13492 6E92 A9 00			lda #$00
 13493 6E94 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13494 6E96 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13495 6E98 A9 00			lda #$00
 13496 6E9A E9 00			sbc #$00
 13497 6E9C 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13498 6E9E A9 00			lda #$00
 13499 6EA0 E9 00			sbc #$00
 13500 6EA2 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13501 6EA4 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13502 6EAE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13503 6EB0 B5 96			lda :STACKORIGIN,x
 13504 6EB2 91 84			sta (:bp2),y
 13505 6EB4 C8				iny
 13506 6EB5 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13507 6EB7 91 84			sta (:bp2),y
 13508 6EB9 CA				dex
 13509 6EBA			l_248D
 13510
 13511 				; optimize OK (service.pas), line = 2272
 13512
 13513 6EBA AD 8A A1			lda MYY+1
 13514 6EBD D0 05			bne @+
 13515 6EBF AD 89 A1			lda MYY
 13516 6EC2 C9 02			cmp #$02
 13517 				@
 13518 6EC4 D0 2D			jne l_24AA
 13519 6EC6 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13520 6ED0 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13521 6ED2 B1 84			lda (:bp2),y
 13522 6ED4 85 8A			sta SYSTEM.ABS.@010184000.X
 13523 6ED6 C8				iny
 13524 6ED7 B1 84			lda (:bp2),y
 13525 6ED9 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13526 6EDB 20 92 1C			jsr SYSTEM.ABS.@010184000
 13527 6EDE AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13528 6EE8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13529 6EEA A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13530 6EEC 91 84			sta (:bp2),y
 13531 6EEE C8				iny
 13532 6EEF A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13533 6EF1 91 84			sta (:bp2),y
 13534 6EF3			l_24AA
 13535
 13536 				; optimize OK (service.pas), line = 2273
 13537
 13538 6EF3 AD 8A A1			lda MYY+1
 13539 6EF6 D0 05			bne @+
 13540 6EF8 AD 89 A1			lda MYY
 13541 6EFB C9 03			cmp #$03
 13542 				@
 13543 6EFD D0 25			jne l_24C4
 13544 6EFF AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13545 6F09 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13546 6F0B A9 00			lda #$00
 13547 6F0D 38 F1 84			sub (:bp2),y
 13548 6F10 85 9F			sta :STACKORIGIN+9
 13549 6F12 C8				iny
 13550 6F13 A9 00			lda #$00
 13551 6F15 F1 84			sbc (:bp2),y
 13552 6F17 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13553 6F19 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13554 6F1B A5 9F			lda :STACKORIGIN+9
 13555 6F1D 91 84			sta (:bp2),y
 13556 6F1F C8				iny
 13557 6F20 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13558 6F22 91 84			sta (:bp2),y
 13559 6F24			l_24C4
 13560 6F24			l_1EF5
 13561 6F24			l_1C3C
 13562
 13563 				; optimize OK (service.pas), line = 2283
 13564
 13565 6F24 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13566 6F2E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13567 6F30 B1 84			lda (:bp2),y
 13568 6F32 C9 65			cmp #$65
 13569 6F34 B0 03 4C 58 71		jcc l_24E5
 13570
 13571 				; optimize OK (service.pas), line = 2286
 13572
 13573 6F39 AD 8B A1			lda EMERGENCY
 13574 6F3C C9 FF			cmp #$FF
 13575 6F3E D0 05			jne l_24F8
 13576 6F40 A9 04			lda #$04
 13577 6F42 20 B1 2D			jsr FATAL_ERROR
 13578 6F45			l_24F8
 13579
 13580 				; optimize OK (service.pas), line = 2288
 13581
 13582 6F45 AC 8B A1			ldy EMERGENCY
 13583 6F48 B9 7F 10			lda adr.EMERG_DEV,y
 13584 6F4B 8D 83 A1			sta MIMAX
 13585 6F4E A9 00			lda #$00
 13586 6F50 8D 84 A1			sta MIMAX+1
 13587
 13588 				; optimize OK (service.pas), line = 2314
 13589
 13590 6F53 AD 8B A1			lda EMERGENCY
 13591 6F56 8D A0 A1			sta @CASETMP_0009
 13592 6F59 C9 05			cmp #$05
 13593 6F5B D0 2F			jne l_2511
 13594 				@
 13595
 13596 				; optimize OK (service.pas), line = 2317
 13597
 13598 6F5D AD 94 A1			lda adr.ADJW+$06
 13599 6F60 0D 95 A1			ora adr.ADJW+1+$06
 13600 6F63 D0 0D			jne l_2527
 13601 6F65 AD 83 A1			lda MIMAX
 13602 6F68 29 0F			and #$0F
 13603 6F6A 8D 83 A1			sta MIMAX
 13604 6F6D A9 00			lda #$00
 13605 6F6F 8D 84 A1			sta MIMAX+1
 13606 6F72			l_2527
 13607
 13608 				; optimize OK (service.pas), line = 2318
 13609
 13610 6F72 AD 90 A1			lda adr.ADJW+$02
 13611 6F75 0D 91 A1			ora adr.ADJW+1+$02
 13612 6F78 D0 0F			jne l_254D
 13613 6F7A AD 83 A1			lda MIMAX
 13614 6F7D 29 F0			and #$F0
 13615 6F7F 09 03			ora #$03
 13616 6F81 8D 83 A1			sta MIMAX
 13617 6F84 A9 00			lda #$00
 13618 6F86 8D 84 A1			sta MIMAX+1
 13619 6F89			l_254D
 13620 6F89 4C 28 70			jmp a_0009
 13621 6F8C			l_2511
 13622 6F8C C9 06			cmp #$06
 13623 6F8E D0 31			jne l_2564
 13624
 13625 				; optimize OK (service.pas), line = 2322
 13626
 13627 6F90 AD 90 A1			lda adr.ADJW+$02
 13628 6F93 0D 91 A1			ora adr.ADJW+1+$02
 13629 6F96 D0 0F			jne l_257A
 13630 6F98 AD 83 A1			lda MIMAX
 13631 6F9B 29 0F			and #$0F
 13632 6F9D 09 10			ora #$10
 13633 6F9F 8D 83 A1			sta MIMAX
 13634 6FA2 A9 00			lda #$00
 13635 6FA4 8D 84 A1			sta MIMAX+1
 13636 6FA7			l_257A
 13637
 13638 				; optimize OK (service.pas), line = 2323
 13639
 13640 6FA7 AD 98 A1			lda adr.ADJW+$0A
 13641 6FAA 0D 99 A1			ora adr.ADJW+1+$0A
 13642 6FAD D0 0F			jne l_25A0
 13643 6FAF AD 83 A1			lda MIMAX
 13644 6FB2 29 F0			and #$F0
 13645 6FB4 09 04			ora #$04
 13646 6FB6 8D 83 A1			sta MIMAX
 13647 6FB9 A9 00			lda #$00
 13648 6FBB 8D 84 A1			sta MIMAX+1
 13649 6FBE			l_25A0
 13650 6FBE 4C 28 70			jmp a_0009
 13651 6FC1			l_2564
 13652 6FC1 C9 07			cmp #$07
 13653 6FC3 D0 31			jne l_25B7
 13654
 13655 				; optimize OK (service.pas), line = 2327
 13656
 13657 6FC5 AD 98 A1			lda adr.ADJW+$0A
 13658 6FC8 0D 99 A1			ora adr.ADJW+1+$0A
 13659 6FCB D0 0F			jne l_25CD
 13660 6FCD AD 83 A1			lda MIMAX
 13661 6FD0 29 0F			and #$0F
 13662 6FD2 09 20			ora #$20
 13663 6FD4 8D 83 A1			sta MIMAX
 13664 6FD7 A9 00			lda #$00
 13665 6FD9 8D 84 A1			sta MIMAX+1
 13666 6FDC			l_25CD
 13667
 13668 				; optimize OK (service.pas), line = 2328
 13669
 13670 6FDC AD 9C A1			lda adr.ADJW+$0E
 13671 6FDF 0D 9D A1			ora adr.ADJW+1+$0E
 13672 6FE2 D0 0F			jne l_25F3
 13673 6FE4 AD 83 A1			lda MIMAX
 13674 6FE7 29 F0			and #$F0
 13675 6FE9 09 05			ora #$05
 13676 6FEB 8D 83 A1			sta MIMAX
 13677 6FEE A9 00			lda #$00
 13678 6FF0 8D 84 A1			sta MIMAX+1
 13679 6FF3			l_25F3
 13680 6FF3 4C 28 70			jmp a_0009
 13681 6FF6			l_25B7
 13682 6FF6 C9 08			cmp #$08
 13683 6FF8 D0 2E			jne l_260A
 13684
 13685 				; optimize OK (service.pas), line = 2332
 13686
 13687 6FFA AD 9C A1			lda adr.ADJW+$0E
 13688 6FFD 0D 9D A1			ora adr.ADJW+1+$0E
 13689 7000 D0 0F			jne l_2620
 13690 7002 AD 83 A1			lda MIMAX
 13691 7005 29 0F			and #$0F
 13692 7007 09 30			ora #$30
 13693 7009 8D 83 A1			sta MIMAX
 13694 700C A9 00			lda #$00
 13695 700E 8D 84 A1			sta MIMAX+1
 13696 7011			l_2620
 13697
 13698 				; optimize OK (service.pas), line = 2333
 13699
 13700 7011 AD 94 A1			lda adr.ADJW+$06
 13701 7014 0D 95 A1			ora adr.ADJW+1+$06
 13702 7017 D0 0F			jne l_2646
 13703 7019 AD 83 A1			lda MIMAX
 13704 701C 29 F0			and #$F0
 13705 701E 09 06			ora #$06
 13706 7020 8D 83 A1			sta MIMAX
 13707 7023 A9 00			lda #$00
 13708 7025 8D 84 A1			sta MIMAX+1
 13709 7028			l_2646
 13710 7028			l_260A
 13711 7028			a_0009
 13712
 13713 				; --- RepeatUntilProlog
 13714 7028			l_265D
 13715
 13716 				; optimize OK (service.pas), line = 2340
 13717
 13718 7028 AD 83 A1			lda MIMAX
 13719 702B 85 A0			sta :STACKORIGIN+10
 13720 702D AD 84 A1			lda MIMAX+1
 13721 7030 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13722 7032 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13723 7034 66 A0			ror :STACKORIGIN+10
 13724 7036 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13725 7038 66 A0			ror :STACKORIGIN+10
 13726 703A 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13727 703C 66 A0			ror :STACKORIGIN+10
 13728 703E 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13729 7040 66 A0			ror :STACKORIGIN+10
 13730 7042 A9 5A			lda #$5A
 13731 7044 85 8E			sta :ecx
 13732 7046 A9 00			lda #$00
 13733 7048 85 8F			sta :ecx+1
 13734 704A A5 A0			lda :STACKORIGIN+10
 13735 704C 85 86			sta :eax
 13736 704E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13737 7050 85 87			sta :eax+1
 13738 					.ifdef fmulinit
 13739 					fmulu_16
 13740 					els
 13741 7052 20 23 13			imulCX
 13742 					eif
 13743 7055 A5 86			lda :eax
 13744 7057 8D 6F A1			sta LX
 13745 705A A5 87			lda :eax+1
 13746 705C 8D 70 A1			sta LX+1
 13747
 13748 				; optimize OK (service.pas), line = 2341
 13749
 13750 705F AD 83 A1			lda MIMAX
 13751 7062 29 0F			and #$0F
 13752 7064 85 86			sta :eax
 13753 7066 A9 00			lda #$00
 13754 7068 85 87			sta :eax+1
 13755 706A A9 5A			lda #$5A
 13756 706C 85 8E			sta :ecx
 13757 706E A9 00			lda #$00
 13758 7070 85 8F			sta :ecx+1
 13759 					.ifdef fmulinit
 13760 					fmulu_16
 13761 					els
 13762 7072 20 67 13			imulCX_AL
 13763 					eif
 13764 7075 A5 86			lda :eax
 13765 7077 8D 73 A1			sta MX
 13766 707A A5 87			lda :eax+1
 13767 707C 8D 74 A1			sta MX+1
 13768
 13769 				; optimize OK (service.pas), line = 2342
 13770
 13771 707F AD 73 A1			lda MX
 13772 7082 38 ED 6F A1			sub LX
 13773 7086 8D 41 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 13774 7089 AD 74 A1			lda MX+1
 13775 708C ED 70 A1			sbc LX+1
 13776 708F 8D 42 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 13777 7092 20 3B 25			jsr SYSTEM.RANDOM.@010184000
 13778 7095 AD 43 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 13779 7098 18 6D 6F A1			add LX
 13780 709C 8D 85 A1			sta ANGLE
 13781 709F AD 44 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 13782 70A2 6D 70 A1			adc LX+1
 13783 70A5 8D 86 A1			sta ANGLE+1
 13784
 13785 				; optimize OK (service.pas), line = 2345
 13786
 13787 70A8 A9 5A			lda #$5A
 13788 70AA 85 8E			sta @SMALLINT.MOD.B
 13789 70AC A9 00			lda #$00
 13790 70AE 85 8F			sta @SMALLINT.MOD.B+1
 13791 70B0 AD 85 A1			lda ANGLE
 13792 70B3 85 86			sta @SMALLINT.MOD.A
 13793 70B5 AD 86 A1			lda ANGLE+1
 13794 70B8 85 87			sta @SMALLINT.MOD.A+1
 13795 70BA 20 68 12			jsr @SMALLINT.MOD
 13796 70BD A5 92			lda @SMALLINT.MOD.RESULT
 13797 70BF C9 1F			cmp #$1F
 13798 70C1 A5 93			lda @SMALLINT.MOD.RESULT+1
 13799 70C3 E9 00			sbc #$00
 13800 70C5 50 02			svc
 13801 70C7 49 80			eor #$80
 13802 70C9 10 03 4C 28 70		jmi l_265D
 13803 70CE A9 5A			lda #$5A
 13804 70D0 85 8E			sta @SMALLINT.MOD.B
 13805 70D2 A9 00			lda #$00
 13806 70D4 85 8F			sta @SMALLINT.MOD.B+1
 13807 70D6 AD 85 A1			lda ANGLE
 13808 70D9 85 86			sta @SMALLINT.MOD.A
 13809 70DB AD 86 A1			lda ANGLE+1
 13810 70DE 85 87			sta @SMALLINT.MOD.A+1
 13811 70E0 20 68 12			jsr @SMALLINT.MOD
 13812 70E3 A5 92			lda @SMALLINT.MOD.RESULT
 13813 70E5 C9 3C			cmp #$3C
 13814 70E7 A5 93			lda @SMALLINT.MOD.RESULT+1
 13815 70E9 E9 00			sbc #$00
 13816 70EB 50 02			svc
 13817 70ED 49 80			eor #$80
 13818 70EF 30 03 4C 28 70		jpl l_265D
 13819
 13820 				; optimize OK (service.pas), line = 2349
 13821
 13822 70F4 A9 68			lda #$68
 13823 70F6 85 8E			sta @SMALLINT.MOD.B
 13824 70F8 A9 01			lda #$01
 13825 70FA 85 8F			sta @SMALLINT.MOD.B+1
 13826 70FC AD 85 A1			lda ANGLE
 13827 70FF 85 86			sta @SMALLINT.MOD.A
 13828 7101 AD 86 A1			lda ANGLE+1
 13829 7104 85 87			sta @SMALLINT.MOD.A+1
 13830 7106 20 68 12			jsr @SMALLINT.MOD
 13831 7109 A5 92			lda @SMALLINT.MOD.RESULT
 13832 710B 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 13833 710E A5 93			lda @SMALLINT.MOD.RESULT+1
 13834 7110 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 13835 7113 AD 5F A1			lda BALL
 13836 7116 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 13837 7119 AD 60 A1			lda BALL+1
 13838 711C 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 13839 711F 20 B9 38			jsr SET_BALL_DIRECTION
 13840
 13841 				; optimize OK (service.pas), line = 2350
 13842
 13843 7122 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13844 712C A0 0C			ldy #BALL.SPEED-DATAORIGIN
 13845 712E B1 84			lda (:bp2),y
 13846 7130 8D B7 A0			sta SET_BALL_SPEED.SPEED
 13847 7133 C8				iny
 13848 7134 B1 84			lda (:bp2),y
 13849 7136 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 13850 7139 AD 5F A1			lda BALL
 13851 713C 8D B3 A0			sta SET_BALL_SPEED.BALL
 13852 713F AD 60 A1			lda BALL+1
 13853 7142 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 13854 7145 20 9F 36			jsr SET_BALL_SPEED
 13855
 13856 				; optimize OK (service.pas), line = 2352
 13857
 13858 7148 AC 5F A1 84 84 AC + 	mwy BALL :bp2
 13859 7152 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13860 7154 A9 00			lda #$00
 13861 7156 91 84			sta (:bp2),y
 13862 7158			l_24E5
 13863
 13864 				; ------------------------------------------------------------
 13865
 13866 = A15F			BALL	= DATAORIGIN+$0664
 13867 = 9AFB			BALL.X	= DATAORIGIN+$0000
 13868 = 9AFD			BALL.Y	= DATAORIGIN+$0002
 13869 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
 13870 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
 13871 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
 13872 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
 13873 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
 13874 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
 13875 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
 13876 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
 13877 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
 13878 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
 13879 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
 13880 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
 13881 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
 13882 = 9B15			BALL.STM	= DATAORIGIN+$001A
 13883 = A163			X	= DATAORIGIN+$0668
 13884 = A165			Y	= DATAORIGIN+$066A
 13885 = A167			XB	= DATAORIGIN+$066C
 13886 = A169			YB	= DATAORIGIN+$066E
 13887 = A16B			OX	= DATAORIGIN+$0670
 13888 = A16D			OY	= DATAORIGIN+$0672
 13889 = A16F			LX	= DATAORIGIN+$0674
 13890 = A171			LY	= DATAORIGIN+$0676
 13891 = A173			MX	= DATAORIGIN+$0678
 13892 = A175			MY	= DATAORIGIN+$067A
 13893 = A177			NX	= DATAORIGIN+$067C
 13894 = A179			NY	= DATAORIGIN+$067E
 13895 = A17B			F1	= DATAORIGIN+$0680
 13896 = A17D			F2	= DATAORIGIN+$0682
 13897 = A17F			DEFLECT	= DATAORIGIN+$0684
 13898 = A181			AROUND	= DATAORIGIN+$0686
 13899 = A183			MIMAX	= DATAORIGIN+$0688
 13900 = A185			ANGLE	= DATAORIGIN+$068A
 13901 = A187			MYX	= DATAORIGIN+$068C
 13902 = A189			MYY	= DATAORIGIN+$068E
 13903 = A18B			EMERGENCY	= DATAORIGIN+$0690
 13904 = A18C			COLLISION	= DATAORIGIN+$0691
 13905 = A18D			TOUCH	= DATAORIGIN+$0692
 13906 = A18E			adr.ADJW	= [DATAORIGIN+$0693] .array [3] [3] .word
 13907 7158			.var ADJW	= adr.ADJW .word
 13908 = A1A0			@CASETMP_0009	= DATAORIGIN+$06A5
 13909
 13910 = A15F			@VarData	= BALL
 13911 = 0034			@VarDataSize	= 52
 13912
 13913 7158			@exit
 13914 					.ifdef @new
 13915 					lda <@VarData
 13916 					sta :ztmp
 13917 					lda >@VarData
 13918 					ldy #@VarDataSize-1
 13919 					jmp @FreeMem
 13920 					els
 13921 7158 60				rts						; ret
 13922 					eif
 13923 = 7159 8E A1		ADJW
 13923 				.endl
 13924
 13925 715B			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 13926
 13927 				; optimize OK (service.pas), line = 2367
 13928
 13929 715B A9 00			lda #$00
 13930 715D 8D A7 A1			sta K
 13931 7160 8D A8 A1			sta K+1
 13932
 13933 7163			l_26C7
 13934 				; --- ForToDoCondition
 13935 7163 AD A8 A1			lda K+1
 13936 7166 C9 01			cmp #$01
 13937 7168 90 0B			bcc @+
 13938 716A D0 48			jne l_26D3
 13939 716C AD A7 A1			lda K
 13940 716F C9 3F			cmp #$3F
 13941 7171 90 02			bcc @+
 13942 7173 D0 3F			jne l_26D3
 13943 				@
 13944
 13945 				; optimize OK (service.pas), line = 2368
 13946
 13947 7175 AC A1 A1 84 84 AC + 	mwy PATT :bp2
 13948 717F A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13949 7181 B1 84			lda (:bp2),y
 13950 7183 85 8E			sta @WORD.MOD.B
 13951 7185 C8				iny
 13952 7186 B1 84			lda (:bp2),y
 13953 7188 85 8F			sta @WORD.MOD.B+1
 13954 718A AD A7 A1			lda K
 13955 718D 85 86			sta @WORD.MOD.A
 13956 718F AD A8 A1			lda K+1
 13957 7192 85 87			sta @WORD.MOD.A+1
 13958 7194 20 B8 13			jsr @WORD.MOD
 13959 7197 A5 92			lda @WORD.MOD.RESULT
 13960 7199 85 A0			sta :STACKORIGIN+10
 13961 719B AC A7 A1			ldy K
 13962 719E A9 C4			lda #$C4
 13963 71A0 18 6D A8 A1			add K+1
 13964 71A4 85 83			sta :bp+1
 13965 71A6 A5 A0			lda :STACKORIGIN+10
 13966 71A8 91 82			sta (:bp),y
 13967
 13968 				; --- ForToDoEpilog
 13969 71AA EE A7 A1			inc K
 13970 71AD D0 B4			jne l_26C7
 13971 71AF EE A8 A1			inc K+1
 13972 71B2 D0 AF			jne l_26C7
 13973 71B4			l_26D3
 13974
 13975 				; optimize OK (service.pas), line = 2372
 13976
 13977 71B4 A9 00			lda #$00
 13978 71B6 8D AA A1			sta Y
 13979
 13980 71B9			l_26ED
 13981 				; --- ForToDoCondition
 13982 71B9 AD AA A1			lda Y
 13983 71BC C9 C8			cmp #$C8
 13984 71BE B0 2E			jcs l_26FB
 13985
 13986 				; optimize OK (service.pas), line = 2373
 13987
 13988 71C0 AC A1 A1 84 84 AC + 	mwy PATT :bp2
 13989 71CA A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 13990 71CC B1 84			lda (:bp2),y
 13991 71CE 85 8E			sta @WORD.MOD.B
 13992 71D0 C8				iny
 13993 71D1 B1 84			lda (:bp2),y
 13994 71D3 85 8F			sta @WORD.MOD.B+1
 13995 71D5 AD AA A1			lda Y
 13996 71D8 85 86			sta @WORD.MOD.A
 13997 71DA A9 00			lda #$00
 13998 71DC 85 87			sta @WORD.MOD.A+1
 13999 71DE 20 B8 13			jsr @WORD.MOD
 14000 71E1 A5 92			lda @WORD.MOD.RESULT
 14001 71E3 AC AA A1			ldy Y
 14002 71E6 99 00 C3			sta adr.MODY,y
 14003
 14004 				; --- ForToDoEpilog
 14005 71E9 EE AA A1			inc Y
 14006 71EC D0 CB			jne l_26ED
 14007 71EE			l_26FB
 14008
 14009 				; optimize OK (service.pas), line = 2378
 14010
 14011 71EE A9 0A			lda #$0A
 14012 71F0 8D AA A1			sta Y
 14013
 14014 71F3			l_2717
 14015 				; --- ForToDoCondition
 14016 71F3 AC AA A1			ldy Y
 14017 71F6 C0 C7			cpy #$C7
 14018 71F8 90 03 4C 30 73		jcs l_2725
 14019
 14020 				; optimize OK (service.pas), line = 2380
 14021
 14022 71FD B9 00 C3			lda adr.MODY,y
 14023 7200 85 86			sta :eax
 14024 7202 AC A1 A1 84 84 AC + 	mwy PATT :bp2
 14025 720C A0 00			ldy #PATT.WIDTH-DATAORIGIN
 14026 720E B1 84			lda (:bp2),y
 14027 7210 85 8E			sta :ecx
 14028 7212 C8				iny
 14029 7213 B1 84			lda (:bp2),y
 14030 7215 85 8F			sta :ecx+1
 14031 7217 A9 00			lda #$00
 14032 7219 85 87			sta :eax+1
 14033 					.ifdef fmulinit
 14034 					fmulu_16
 14035 					els
 14036 721B 20 23 13			imulCX
 14037 					eif
 14038 721E A5 86			lda :eax
 14039 7220 8D A5 A1			sta YB
 14040 7223 A5 87			lda :eax+1
 14041 7225 8D A6 A1			sta YB+1
 14042
 14043 				; optimize OK (service.pas), line = 2381
 14044
 14045 7228 A9 00			lda #$00
 14046 722A 8D A7 A1			sta K
 14047 722D 8D A8 A1			sta K+1
 14048
 14049 				; optimize OK (service.pas), line = 2382
 14050
 14051 7230 A9 09			lda #$09
 14052 7232 8D A9 A1			sta X
 14053
 14054 7235			l_2740
 14055 				; --- ForToDoCondition
 14056 7235 AD A9 A1			lda X
 14057 7238 C9 D8			cmp #$D8
 14058 723A 90 03 4C D9 72		jcs l_274E
 14059
 14060 				; optimize OK (service.pas), line = 2385
 14061
 14062 723F AC A1 A1 84 84 AC + 	mwy PATT :bp2
 14063 7249 A0 04			ldy #PATT.OFS-DATAORIGIN
 14064 724B B1 84			lda (:bp2),y
 14065 724D 85 9F			sta :STACKORIGIN+9
 14066 724F C8				iny
 14067 7250 B1 84			lda (:bp2),y
 14068 7252 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14069 7254 C8				iny
 14070 7255 B1 84			lda (:bp2),y
 14071 7257 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14072 7259 C8				iny
 14073 725A B1 84			lda (:bp2),y
 14074 725C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14075 725E AC A9 A1			ldy X
 14076 7261 A5 9F			lda :STACKORIGIN+9
 14077 7263 18 79 00 C4			add $C400,y
 14078 7267 85 9F			sta :STACKORIGIN+9
 14079 7269 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14080 726B 69 00			adc #$00
 14081 726D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14082 726F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14083 7271 69 00			adc #$00
 14084 7273 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14085 7275 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14086 7277 69 00			adc #$00
 14087 7279 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14088 727B A5 9F			lda :STACKORIGIN+9
 14089 727D 18 6D A5 A1			add YB
 14090 7281 8D 3B A0			sta GETBYTE.SRC
 14091 7284 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14092 7286 6D A6 A1			adc YB+1
 14093 7289 8D 3C A0			sta GETBYTE.SRC+1
 14094 728C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14095 728E 69 00			adc #$00
 14096 7290 8D 3D A0			sta GETBYTE.SRC+2
 14097 7293 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14098 7295 69 00			adc #$00
 14099 7297 8D 3E A0			sta GETBYTE.SRC+3
 14100 729A 20 31 2D			jsr GETBYTE
 14101 729D AD 3F A0			lda GETBYTE.RESULT
 14102 72A0 8D AB A1			sta CL
 14103
 14104 				; optimize OK (service.pas), line = 2387
 14105
 14106 72A3 A9 80			lda #$80
 14107 72A5 8D AC A1			sta SHADOW
 14108
 14109 				; optimize OK (service.pas), line = 2392
 14110
 14111 72A8 AD AA A1			lda Y
 14112 72AB C9 10			cmp #$10
 14113 72AD 90 07			jcc l_2783x
 14114 72AF AD A9 A1			lda X
 14115 72B2 C9 12			cmp #$12
 14116 72B4 B0 05			jcs l_2783
 14117 72B6			l_2783x
 14118 72B6 A9 00			lda #$00
 14119 72B8 8D AC A1			sta SHADOW
 14120 72BB			l_2783
 14121
 14122 				; optimize OK (service.pas), line = 2397
 14123
 14124 72BB AD AB A1			lda CL
 14125 72BE 29 7F			and #$7F
 14126 72C0 0D AC A1			ora SHADOW
 14127 72C3 AC A7 A1			ldy K
 14128 72C6 99 00 C2			sta adr.TMP,y
 14129
 14130 				; optimize FAIL (0, service.pas), line = 2398
 14131
 14132 72C9 EE A7 A1			inc K
 14133 72CC D0 03			sne
 14134 72CE EE A8 A1			inc K+1
 14135
 14136 				; --- ForToDoEpilog
 14137 72D1 EE A9 A1			inc X
 14138 72D4 F0 03 4C 35 72		jne l_2740
 14139 72D9			l_274E
 14140
 14141 				; optimize OK (service.pas), line = 2401
 14142
 14143 72D9 AD 0F 9C			lda PLAYSCREEN.OFS
 14144 72DC 18 69 09			add #$09
 14145 72DF 85 A0			sta :STACKORIGIN+10
 14146 72E1 AD 10 9C			lda PLAYSCREEN.OFS+1
 14147 72E4 69 00			adc #$00
 14148 72E6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14149 72E8 AD 11 9C			lda PLAYSCREEN.OFS+2
 14150 72EB 69 00			adc #$00
 14151 72ED 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14152 72EF AD 12 9C			lda PLAYSCREEN.OFS+3
 14153 72F2 69 00			adc #$00
 14154 72F4 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14155 72F6 AD AA A1			lda Y
 14156 72F9 85 86			sta :eax
 14157 72FB A9 00			lda #$00
 14158 72FD 85 87			sta :eax+1
 14159 72FF 20 51 19			jsr @mul320
 14160 7302 A5 A0			lda :STACKORIGIN+10
 14161 7304 18 65 86			add :eax
 14162 7307 8D 1B A0			sta BLITTMP.DST
 14163 730A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14164 730C 65 87			adc :eax+1
 14165 730E 8D 1C A0			sta BLITTMP.DST+1
 14166 7311 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14167 7313 65 88			adc :eax+2
 14168 7315 8D 1D A0			sta BLITTMP.DST+2
 14169 7318 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14170 731A 65 89			adc :eax+3
 14171 731C 8D 1E A0			sta BLITTMP.DST+3
 14172 731F AD A7 A1			lda K
 14173 7322 8D 1F A0			sta BLITTMP.SIZE
 14174 7325 20 09 2C			jsr BLITTMP
 14175
 14176 				; --- ForToDoEpilog
 14177 7328 EE AA A1			inc Y
 14178 732B F0 03 4C F3 71		jne l_2717
 14179 7330			l_2725
 14180
 14181 				; ------------------------------------------------------------
 14182
 14183 = A1A1			PATT	= DATAORIGIN+$06A6
 14184 = 9AFB			PATT.WIDTH	= DATAORIGIN+$0000
 14185 = 9AFD			PATT.HEIGHT	= DATAORIGIN+$0002
 14186 = 9AFF			PATT.OFS	= DATAORIGIN+$0004
 14187 = A1A5			YB	= DATAORIGIN+$06AA
 14188 = A1A7			K	= DATAORIGIN+$06AC
 14189 = A1A9			X	= DATAORIGIN+$06AE
 14190 = A1AA			Y	= DATAORIGIN+$06AF
 14191 = A1AB			CL	= DATAORIGIN+$06B0
 14192 = A1AC			SHADOW	= DATAORIGIN+$06B1
 14193
 14194 = A1A1			@VarData	= PATT
 14195 = 000A			@VarDataSize	= 10
 14196
 14197 7330			@exit
 14198 					.ifdef @new
 14199 					lda <@VarData
 14200 					sta :ztmp
 14201 					lda >@VarData
 14202 					ldy #@VarDataSize-1
 14203 					jmp @FreeMem
 14204 					els
 14205 7330 60				rts						; ret
 14206 					eif
 14207 				.endl
 14208
 14209 7331			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 14210
 14211 				; ------------------------------------------------------------
 14212
 14213 = A1AD			X	= DATAORIGIN+$06B2
 14214 = A1AF			Y	= DATAORIGIN+$06B4
 14215
 14216 = A1AD			@VarData	= X
 14217 = 0004			@VarDataSize	= 4
 14218
 14219 7331			@exit
 14220 					.ifdef @new
 14221 					lda <@VarData
 14222 					sta :ztmp
 14223 					lda >@VarData
 14224 					ldy #@VarDataSize-1
 14225 					jmp @FreeMem
 14226 					els
 14227 7331 60				rts						; ret
 14228 					eif
 14229 				.endl
 14230
 14231 7332			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 14232
 14233 				; optimize OK (service.pas), line = 2516
 14234
 14235 7332 A9 81			lda #$81
 14236 7334 8D B1 A1			sta Y
 14237
 14238 7337			l_27D1
 14239 				; --- ForToDoCondition
 14240 7337 AC B1 A1			ldy Y
 14241 733A C0 A1			cpy #$A1
 14242 733C B0 6C			jcs l_27DF
 14243
 14244 				; optimize OK (service.pas), line = 2519
 14245
 14246 733E A9 48			lda #$48
 14247 7340 79 00 C0			adc adr.ROW,y
 14248 7343 8D 25 A0			sta BLITROW.DST
 14249 7346 A9 50			lda #$50
 14250 7348 79 FB C0			adc adr.ROW+251,y
 14251 734B 8D 26 A0			sta BLITROW.DST+1
 14252 734E A9 00			lda #$00
 14253 7350 69 00			adc #$00
 14254 7352 8D 27 A0			sta BLITROW.DST+2
 14255 7355 A9 00			lda #$00
 14256 7357 69 00			adc #$00
 14257 7359 8D 28 A0			sta BLITROW.DST+3
 14258 735C AD 0F 9C			lda PLAYSCREEN.OFS
 14259 735F 18 69 48			add #$48
 14260 7362 85 A1			sta :STACKORIGIN+11
 14261 7364 AD 10 9C			lda PLAYSCREEN.OFS+1
 14262 7367 69 00			adc #$00
 14263 7369 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 14264 736B AD 11 9C			lda PLAYSCREEN.OFS+2
 14265 736E 69 00			adc #$00
 14266 7370 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 14267 7372 AD 12 9C			lda PLAYSCREEN.OFS+3
 14268 7375 69 00			adc #$00
 14269 7377 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 14270 7379 A5 A1			lda :STACKORIGIN+11
 14271 737B 18 79 00 C0			add adr.ROW,y
 14272 737F 8D 21 A0			sta BLITROW.SRC
 14273 7382 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 14274 7384 79 FB C0			adc adr.ROW+251,y
 14275 7387 8D 22 A0			sta BLITROW.SRC+1
 14276 738A A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 14277 738C 69 00			adc #$00
 14278 738E 8D 23 A0			sta BLITROW.SRC+2
 14279 7391 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 14280 7393 69 00			adc #$00
 14281 7395 8D 24 A0			sta BLITROW.SRC+3
 14282 7398 A9 58			lda #$58
 14283 739A 8D 29 A0			sta BLITROW.SIZE
 14284 739D A9 00			lda #$00
 14285 739F 8D 2A A0			sta BLITROW.SIZE+1
 14286 73A2 20 42 2C			jsr BLITROW
 14287
 14288 				; --- ForToDoEpilog
 14289 73A5 EE B1 A1			inc Y
 14290 73A8 D0 8D			jne l_27D1
 14291 73AA			l_27DF
 14292
 14293 				; ------------------------------------------------------------
 14294
 14295 = A1B1			Y	= DATAORIGIN+$06B6
 14296
 14297 = A1B1			@VarData	= Y
 14298 = 0001			@VarDataSize	= 1
 14299
 14300 73AA			@exit
 14301 					.ifdef @new
 14302 					lda <@VarData
 14303 					sta :ztmp
 14304 					lda >@VarData
 14305 					ldy #@VarDataSize-1
 14306 					jmp @FreeMem
 14307 					els
 14308 73AA 60				rts						; ret
 14309 					eif
 14310 				.endl
 14311
 14312 73AB			.local	GAME_OVER					; PROCEDURE
 14313
 14314 				; ------------------------------------------------------------
 14315
 14316 = A1B2			X	= DATAORIGIN+$06B7
 14317 = A1B4			Y	= DATAORIGIN+$06B9
 14318 = A1B6			adr.SC	= [DATAORIGIN+$06BB] .array [21]
 14319 73AB			.var SC	= adr.SC .word
 14320
 14321 = A1B2			@VarData	= X
 14322 = 0019			@VarDataSize	= 25
 14323
 14324 73AB			@exit
 14325 					.ifdef @new
 14326 					lda <@VarData
 14327 					sta :ztmp
 14328 					lda >@VarData
 14329 					ldy #@VarDataSize-1
 14330 					jmp @FreeMem
 14331 					els
 14332 73AB 60				rts						; ret
 14333 					eif
 14334 = 73AC B6 A1		SC
 14334 				.endl
 14335
 14336 73AE			.local	DESTROY_VAUS					; PROCEDURE
 14337
 14338 				; optimize OK (service.pas), line = 2563
 14339
 14340 73AE AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 14341
 14342 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2564
 14343
 14344 73DE 20 58 43			jsr MODIFY_VAUS
 14345
 14346 				; optimize OK (service.pas), line = 2566
 14347
 14348 73E1 AD 83 9C			lda VAUS.X
 14349 73E4 8D 01 A1			sta MOVE_VAUS.X
 14350 73E7 A9 00			lda #$00
 14351 73E9 8D 02 A1			sta MOVE_VAUS.X+1
 14352 73EC AD 84 9C			lda VAUS.Y
 14353 73EF 8D 03 A1			sta MOVE_VAUS.Y
 14354 73F2 A9 00			lda #$00
 14355 73F4 8D 04 A1			sta MOVE_VAUS.Y+1
 14356 73F7 20 24 46			jsr MOVE_VAUS
 14357
 14358 				; optimize OK (service.pas), line = 2568
 14359
 14360 73FA AD 83 9C			lda VAUS.X
 14361 73FD 38 E9 04			sub #$04
 14362 7400 8D CD A1			sta A
 14363 7403 A9 00			lda #$00
 14364 7405 E9 00			sbc #$00
 14365 7407 8D CE A1			sta A+1
 14366
 14367 				; optimize OK (service.pas), line = 2569
 14368
 14369 740A AD 84 9C			lda VAUS.Y
 14370 740D 38 E9 05			sub #$05
 14371 7410 8D CF A1			sta B
 14372 7413 A9 00			lda #$00
 14373 7415 E9 00			sbc #$00
 14374 7417 8D D0 A1			sta B+1
 14375
 14376 				; optimize OK (service.pas), line = 2572
 14377
 14378 741A A9 00			lda #$00
 14379 741C 8D D1 A1			sta W
 14380
 14381 741F			l_282F
 14382 				; --- ForToDoCondition
 14383 741F AD D1 A1			lda W
 14384 7422 C9 07			cmp #$07
 14385 7424 90 03 4C 35 76		jcs l_283D
 14386
 14387 				; optimize OK (service.pas), line = 2574
 14388
 14389 7429 A9 00			lda #$00
 14390 742B 8D D3 A1			sta Y
 14391
 14392 742E			l_2846
 14393 				; --- ForToDoCondition
 14394 742E AD D3 A1			lda Y
 14395 7431 C9 10			cmp #$10
 14396 7433 90 03 4C 1F 76		jcs l_2854
 14397
 14398 				; optimize OK (service.pas), line = 2576
 14399
 14400 7438 AD 33 9C			lda EXPLOSION.WIDTH
 14401 743B 85 8E			sta :ecx
 14402 743D AD 34 9C			lda EXPLOSION.WIDTH+1
 14403 7440 85 8F			sta :ecx+1
 14404 7442 AD D3 A1			lda Y
 14405 7445 85 86			sta :eax
 14406 7447 A9 00			lda #$00
 14407 7449 85 87			sta :eax+1
 14408 					.ifdef fmulinit
 14409 					fmulu_16
 14410 					els
 14411 744B 20 67 13			imulCX_AL
 14412 					eif
 14413 744E A5 86			lda :eax
 14414 7450 85 9F			sta :STACKORIGIN+9
 14415 7452 A5 87			lda :eax+1
 14416 7454 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14417 7456 AD 33 9C			lda EXPLOSION.WIDTH
 14418 7459 85 A1			sta :STACKORIGIN+11
 14419 745B AD 34 9C			lda EXPLOSION.WIDTH+1
 14420 745E 06 A1			asl :STACKORIGIN+11
 14421 7460 2A				rol @
 14422 7461 06 A1			asl :STACKORIGIN+11
 14423 7463 2A				rol @
 14424 7464 06 A1			asl :STACKORIGIN+11
 14425 7466 2A				rol @
 14426 7467 06 A1			asl :STACKORIGIN+11
 14427 7469 2A				rol @
 14428 746A 85 8F			sta :ecx+1
 14429 746C A5 A1			lda :STACKORIGIN+11
 14430 746E 85 8E			sta :ecx
 14431 7470 AD D1 A1			lda W
 14432 7473 85 86			sta :eax
 14433 7475 A9 00			lda #$00
 14434 7477 85 87			sta :eax+1
 14435 					.ifdef fmulinit
 14436 					fmulu_16
 14437 					els
 14438 7479 20 23 13			imulCX
 14439 					eif
 14440 747C A5 86			lda :eax
 14441 747E 18 65 9F			add :STACKORIGIN+9
 14442 7481 8D CB A1			sta Z
 14443 7484 A5 87			lda :eax+1
 14444 7486 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14445 7488 8D CC A1			sta Z+1
 14446
 14447 				; optimize OK (service.pas), line = 2577
 14448
 14449 748B A9 00			lda #$00
 14450 748D 8D D2 A1			sta X
 14451 7490 AC 33 9C			ldy EXPLOSION.WIDTH
 14452 7493 88				dey
 14453 7494 8C 98 74			sty @FORTMP_2879_0
 14454
 14455 7497			l_287C
 14456 				; --- ForToDoCondition
 14457 7497 A9 00			lda @FORTMP_2879_0::#$00
 14458 7499 CD D2 A1			cmp X
 14459 749C B0 03 4C 17 76		jcc l_288A
 14460
 14461 				; optimize FAIL (1, service.pas), line = 2581
 14462
 14463 74A1 E8				inx
 14464 74A2 A0 01			ldy #1
 14465 74A4 AD D1 A1			lda W
 14466 74A7 C9 06			cmp #$06
 14467 74A9 F0 01			beq @+
 14468 74AB 88				dey
 14469 				@
 14470 74AC 94 96			sty :STACKORIGIN,x
 14471 74AE AD 37 9C			lda EXPLOSION.OFS
 14472 74B1 18 6D D2 A1			add X
 14473 74B5 85 9F			sta :STACKORIGIN+9
 14474 74B7 AD 38 9C			lda EXPLOSION.OFS+1
 14475 74BA 69 00			adc #$00
 14476 74BC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14477 74BE AD 39 9C			lda EXPLOSION.OFS+2
 14478 74C1 69 00			adc #$00
 14479 74C3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14480 74C5 AD 3A 9C			lda EXPLOSION.OFS+3
 14481 74C8 69 00			adc #$00
 14482 74CA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14483 74CC A5 9F			lda :STACKORIGIN+9
 14484 74CE 18 6D CB A1			add Z
 14485 74D2 8D 3B A0			sta GETBYTE.SRC
 14486 74D5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14487 74D7 6D CC A1			adc Z+1
 14488 74DA 8D 3C A0			sta GETBYTE.SRC+1
 14489 74DD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14490 74DF 69 00			adc #$00
 14491 74E1 8D 3D A0			sta GETBYTE.SRC+2
 14492 74E4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14493 74E6 69 00			adc #$00
 14494 74E8 8D 3E A0			sta GETBYTE.SRC+3
 14495 74EB 20 31 2D			jsr GETBYTE
 14496 74EE CA				dex
 14497 74EF A0 01			ldy #1
 14498 74F1 AD 3F A0			lda GETBYTE.RESULT
 14499 74F4 F0 01			beq @+
 14500 74F6 88				dey
 14501 				@
 14502 74F7 98				tya
 14503 74F8 15 97			ora :STACKORIGIN+1,x
 14504 74FA D0 03 4C 8C 75		jeq l_28B2
 14505
 14506 				; optimize OK (service.pas), line = 2583
 14507
 14508 74FF AD D2 A1			lda X
 14509 7502 18 6D CD A1			add A
 14510 7506 85 9F			sta :STACKORIGIN+9
 14511 7508 A9 50			lda #$50
 14512 750A 6D CE A1			adc A+1
 14513 750D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14514 750F A9 00			lda #$00
 14515 7511 69 00			adc #$00
 14516 7513 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14517 7515 A9 00			lda #$00
 14518 7517 69 00			adc #$00
 14519 7519 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14520 751B AD D3 A1			lda Y
 14521 751E 18 6D CF A1			add B
 14522 7522 A8				tay
 14523 7523 A5 9F			lda :STACKORIGIN+9
 14524 7525 18 79 00 C0			add adr.ROW,y
 14525 7529 8D 31 A0			sta BLITBYTE.DST
 14526 752C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14527 752E 79 FB C0			adc adr.ROW+251,y
 14528 7531 8D 32 A0			sta BLITBYTE.DST+1
 14529 7534 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14530 7536 69 00			adc #$00
 14531 7538 8D 33 A0			sta BLITBYTE.DST+2
 14532 753B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14533 753D 69 00			adc #$00
 14534 753F 8D 34 A0			sta BLITBYTE.DST+3
 14535 7542 AD 0F 9C			lda PLAYSCREEN.OFS
 14536 7545 18 6D D2 A1			add X
 14537 7549 85 A0			sta :STACKORIGIN+10
 14538 754B AD 10 9C			lda PLAYSCREEN.OFS+1
 14539 754E 69 00			adc #$00
 14540 7550 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14541 7552 AD 11 9C			lda PLAYSCREEN.OFS+2
 14542 7555 69 00			adc #$00
 14543 7557 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14544 7559 AD 12 9C			lda PLAYSCREEN.OFS+3
 14545 755C 69 00			adc #$00
 14546 755E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14547 7560 A5 A0			lda :STACKORIGIN+10
 14548 7562 18 6D CD A1			add A
 14549 7566 85 A0			sta :STACKORIGIN+10
 14550 7568 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14551 756A 6D CE A1			adc A+1
 14552 756D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14553 756F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14554 7571 69 00			adc #$00
 14555 7573 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14556 7575 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14557 7577 69 00			adc #$00
 14558 7579 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14559 757B A5 A0			lda :STACKORIGIN+10
 14560 757D 18 79 00 C0			add adr.ROW,y
 14561 7581 8D 2D A0			sta BLITBYTE.SRC
 14562 7584 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14563 7586 79 FB C0			adc adr.ROW+251,y
 14564 7589 4C FB 75			jmp l_28EF
 14565 758C			l_28B2
 14566
 14567 				; optimize OK (service.pas), line = 2586
 14568
 14569 758C AD D2 A1			lda X
 14570 758F 18 6D CD A1			add A
 14571 7593 85 9F			sta :STACKORIGIN+9
 14572 7595 A9 50			lda #$50
 14573 7597 6D CE A1			adc A+1
 14574 759A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14575 759C A9 00			lda #$00
 14576 759E 69 00			adc #$00
 14577 75A0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14578 75A2 A9 00			lda #$00
 14579 75A4 69 00			adc #$00
 14580 75A6 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14581 75A8 AD D3 A1			lda Y
 14582 75AB 18 6D CF A1			add B
 14583 75AF A8				tay
 14584 75B0 A5 9F			lda :STACKORIGIN+9
 14585 75B2 18 79 00 C0			add adr.ROW,y
 14586 75B6 8D 31 A0			sta BLITBYTE.DST
 14587 75B9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14588 75BB 79 FB C0			adc adr.ROW+251,y
 14589 75BE 8D 32 A0			sta BLITBYTE.DST+1
 14590 75C1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14591 75C3 69 00			adc #$00
 14592 75C5 8D 33 A0			sta BLITBYTE.DST+2
 14593 75C8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14594 75CA 69 00			adc #$00
 14595 75CC 8D 34 A0			sta BLITBYTE.DST+3
 14596 75CF AD 37 9C			lda EXPLOSION.OFS
 14597 75D2 18 6D D2 A1			add X
 14598 75D6 85 A0			sta :STACKORIGIN+10
 14599 75D8 AD 38 9C			lda EXPLOSION.OFS+1
 14600 75DB 69 00			adc #$00
 14601 75DD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14602 75DF AD 39 9C			lda EXPLOSION.OFS+2
 14603 75E2 69 00			adc #$00
 14604 75E4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14605 75E6 AD 3A 9C			lda EXPLOSION.OFS+3
 14606 75E9 69 00			adc #$00
 14607 75EB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14608 75ED A5 A0			lda :STACKORIGIN+10
 14609 75EF 18 6D CB A1			add Z
 14610 75F3 8D 2D A0			sta BLITBYTE.SRC
 14611 75F6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14612 75F8 6D CC A1			adc Z+1
 14613 75FB			l_28EF
 14614 75FB 8D 2E A0			sta BLITBYTE.SRC+1
 14615 75FE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14616 7600 69 00			adc #$00
 14617 7602 8D 2F A0			sta BLITBYTE.SRC+2
 14618 7605 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14619 7607 69 00			adc #$00
 14620 7609 8D 30 A0			sta BLITBYTE.SRC+3
 14621 760C 20 BA 2C			jsr BLITBYTE
 14622
 14623 				; --- ForToDoEpilog
 14624 760F EE D2 A1			inc X
 14625 7612 F0 03 4C 97 74		jne l_287C
 14626 7617			l_288A
 14627
 14628 				; --- ForToDoEpilog
 14629 7617 EE D3 A1			inc Y
 14630 761A F0 03 4C 2E 74		jne l_2846
 14631 761F			l_2854
 14632
 14633 				; optimize OK (service.pas), line = 2590
 14634
 14635 761F AD D1 A1			lda W
 14636 7622 8D EE 9B			sta DEATH_SOUND.A
 14637 7625 A9 00			lda #$00
 14638 7627 8D EF 9B			sta DEATH_SOUND.A+1
 14639 762A 20 5B 2A			jsr DEATH_SOUND
 14640
 14641 				; --- ForToDoEpilog
 14642 762D EE D1 A1			inc W
 14643 7630 F0 03 4C 1F 74		jne l_282F
 14644 7635			l_283D
 14645
 14646 				; optimize OK (service.pas), line = 2594
 14647
 14648 7635 A9 07			lda #$07
 14649 7637 8D EE 9B			sta DEATH_SOUND.A
 14650 763A A9 00			lda #$00
 14651 763C 8D EF 9B			sta DEATH_SOUND.A+1
 14652 763F 20 5B 2A			jsr DEATH_SOUND
 14653
 14654 				; optimize OK (service.pas), line = 2595
 14655
 14656 7642 A9 96			lda #$96
 14657 7644 8D 40 A0			sta MYDELAY.A
 14658 7647 A9 00			lda #$00
 14659 7649 8D 41 A0			sta MYDELAY.A+1
 14660 764C 20 5A 2D			jsr MYDELAY
 14661
 14662 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2596
 14663
 14664 764F 20 72 32			jsr DISABLE_LETTER
 14665
 14666 				; ------------------------------------------------------------
 14667
 14668 = A1CB			Z	= DATAORIGIN+$06D0
 14669 = A1CD			A	= DATAORIGIN+$06D2
 14670 = A1CF			B	= DATAORIGIN+$06D4
 14671 = A1D1			W	= DATAORIGIN+$06D6
 14672 = A1D2			X	= DATAORIGIN+$06D7
 14673 = A1D3			Y	= DATAORIGIN+$06D8
 14674
 14675 = A1CB			@VarData	= Z
 14676 = 0009			@VarDataSize	= 9
 14677
 14678 7652			@exit
 14679 					.ifdef @new
 14680 					lda <@VarData
 14681 					sta :ztmp
 14682 					lda >@VarData
 14683 					ldy #@VarDataSize-1
 14684 					jmp @FreeMem
 14685 					els
 14686 7652 60				rts						; ret
 14687 					eif
 14688 				.endl
 14689
 14690 7653			.local	CREATE_VAUS					; PROCEDURE
 14691
 14692 				; optimize FAIL ('NOSOUND', service.pas), line = 2607
 14693
 14694 7653 20 59 2D			jsr NOSOUND
 14695
 14696 				; optimize OK (service.pas), line = 2608
 14697
 14698 7656 A9 5B			lda #$5B
 14699 7658 8D DA A1			sta A
 14700 765B A9 00			lda #$00
 14701 765D 8D DB A1			sta A+1
 14702
 14703 				; optimize OK (service.pas), line = 2609
 14704
 14705 7660 A9 B3			lda #$B3
 14706 7662 8D DC A1			sta B
 14707 7665 A9 00			lda #$00
 14708 7667 8D DD A1			sta B+1
 14709
 14710 				; optimize OK (service.pas), line = 2611
 14711
 14712 766A A9 0B			lda #$0B
 14713 766C 8D D7 A1			sta W
 14714
 14715 766F			l_2943
 14716 				; --- ForToDoCondition
 14717 766F A9 00			lda #$00
 14718 7671 8D D6 A1			sta Y
 14719
 14720 7674			l_295A
 14721 				; --- ForToDoCondition
 14722 7674 AD D6 A1			lda Y
 14723 7677 C9 10			cmp #$10
 14724 7679 90 03 4C 52 78		jcs l_2968
 14725
 14726 				; optimize OK (service.pas), line = 2615
 14727
 14728 767E AD 3B 9C			lda NEWVAUS.WIDTH
 14729 7681 85 8E			sta :ecx
 14730 7683 AD 3C 9C			lda NEWVAUS.WIDTH+1
 14731 7686 85 8F			sta :ecx+1
 14732 7688 AD D6 A1			lda Y
 14733 768B 85 86			sta :eax
 14734 768D A9 00			lda #$00
 14735 768F 85 87			sta :eax+1
 14736 					.ifdef fmulinit
 14737 					fmulu_16
 14738 					els
 14739 7691 20 67 13			imulCX_AL
 14740 					eif
 14741 7694 A5 86			lda :eax
 14742 7696 85 9F			sta :STACKORIGIN+9
 14743 7698 A5 87			lda :eax+1
 14744 769A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14745 769C A9 10			lda #$10
 14746 769E 85 8E			sta :ecx
 14747 76A0 A9 00			lda #$00
 14748 76A2 85 8F			sta :ecx+1
 14749 76A4 AD 3B 9C			lda NEWVAUS.WIDTH
 14750 76A7 85 86			sta :eax
 14751 76A9 AD 3C 9C			lda NEWVAUS.WIDTH+1
 14752 76AC 85 87			sta :eax+1
 14753 					.ifdef fmulinit
 14754 					fmulu_16
 14755 					els
 14756 76AE 20 23 13			imulCX
 14757 					eif
 14758 76B1 A5 86			lda :eax
 14759 76B3 85 8E			sta :ecx
 14760 76B5 A5 87			lda :eax+1
 14761 76B7 85 8F			sta :ecx+1
 14762 76B9 AD D7 A1			lda W
 14763 76BC 85 86			sta :eax
 14764 76BE A9 00			lda #$00
 14765 76C0 85 87			sta :eax+1
 14766 					.ifdef fmulinit
 14767 					fmulu_16
 14768 					els
 14769 76C2 20 67 13			imulCX_AL
 14770 					eif
 14771 76C5 A5 86			lda :eax
 14772 76C7 18 65 9F			add :STACKORIGIN+9
 14773 76CA 8D D8 A1			sta Z
 14774 76CD A5 87			lda :eax+1
 14775 76CF 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14776 76D1 8D D9 A1			sta Z+1
 14777
 14778 				; optimize OK (service.pas), line = 2616
 14779
 14780 76D4 A9 00			lda #$00
 14781 76D6 8D D5 A1			sta X
 14782 76D9 AC 3B 9C			ldy NEWVAUS.WIDTH
 14783 76DC 88				dey
 14784 76DD 8C E1 76			sty @FORTMP_298D_0
 14785
 14786 76E0			l_2990
 14787 				; --- ForToDoCondition
 14788 76E0 A9 00			lda @FORTMP_298D_0::#$00
 14789 76E2 CD D5 A1			cmp X
 14790 76E5 B0 03 4C 4A 78		jcc l_299E
 14791
 14792 				; optimize OK (service.pas), line = 2618
 14793
 14794 76EA AD 3F 9C			lda NEWVAUS.OFS
 14795 76ED 18 6D D5 A1			add X
 14796 76F1 85 9F			sta :STACKORIGIN+9
 14797 76F3 AD 40 9C			lda NEWVAUS.OFS+1
 14798 76F6 69 00			adc #$00
 14799 76F8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14800 76FA AD 41 9C			lda NEWVAUS.OFS+2
 14801 76FD 69 00			adc #$00
 14802 76FF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14803 7701 AD 42 9C			lda NEWVAUS.OFS+3
 14804 7704 69 00			adc #$00
 14805 7706 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14806 7708 A5 9F			lda :STACKORIGIN+9
 14807 770A 18 6D D8 A1			add Z
 14808 770E 8D 3B A0			sta GETBYTE.SRC
 14809 7711 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14810 7713 6D D9 A1			adc Z+1
 14811 7716 8D 3C A0			sta GETBYTE.SRC+1
 14812 7719 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14813 771B 69 00			adc #$00
 14814 771D 8D 3D A0			sta GETBYTE.SRC+2
 14815 7720 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14816 7722 69 00			adc #$00
 14817 7724 8D 3E A0			sta GETBYTE.SRC+3
 14818 7727 20 31 2D			jsr GETBYTE
 14819 772A AD 3F A0			lda GETBYTE.RESULT
 14820 772D F0 03 4C BF 77		jne l_29BA
 14821
 14822 				; optimize OK (service.pas), line = 2620
 14823
 14824 7732 AD D5 A1			lda X
 14825 7735 18 6D DA A1			add A
 14826 7739 85 9F			sta :STACKORIGIN+9
 14827 773B A9 50			lda #$50
 14828 773D 6D DB A1			adc A+1
 14829 7740 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14830 7742 A9 00			lda #$00
 14831 7744 69 00			adc #$00
 14832 7746 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14833 7748 A9 00			lda #$00
 14834 774A 69 00			adc #$00
 14835 774C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14836 774E AD D6 A1			lda Y
 14837 7751 18 6D DC A1			add B
 14838 7755 A8				tay
 14839 7756 A5 9F			lda :STACKORIGIN+9
 14840 7758 18 79 00 C0			add adr.ROW,y
 14841 775C 8D 31 A0			sta BLITBYTE.DST
 14842 775F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14843 7761 79 FB C0			adc adr.ROW+251,y
 14844 7764 8D 32 A0			sta BLITBYTE.DST+1
 14845 7767 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14846 7769 69 00			adc #$00
 14847 776B 8D 33 A0			sta BLITBYTE.DST+2
 14848 776E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14849 7770 69 00			adc #$00
 14850 7772 8D 34 A0			sta BLITBYTE.DST+3
 14851 7775 AD 0F 9C			lda PLAYSCREEN.OFS
 14852 7778 18 6D D5 A1			add X
 14853 777C 85 A0			sta :STACKORIGIN+10
 14854 777E AD 10 9C			lda PLAYSCREEN.OFS+1
 14855 7781 69 00			adc #$00
 14856 7783 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14857 7785 AD 11 9C			lda PLAYSCREEN.OFS+2
 14858 7788 69 00			adc #$00
 14859 778A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14860 778C AD 12 9C			lda PLAYSCREEN.OFS+3
 14861 778F 69 00			adc #$00
 14862 7791 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14863 7793 A5 A0			lda :STACKORIGIN+10
 14864 7795 18 6D DA A1			add A
 14865 7799 85 A0			sta :STACKORIGIN+10
 14866 779B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14867 779D 6D DB A1			adc A+1
 14868 77A0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14869 77A2 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14870 77A4 69 00			adc #$00
 14871 77A6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14872 77A8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14873 77AA 69 00			adc #$00
 14874 77AC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14875 77AE A5 A0			lda :STACKORIGIN+10
 14876 77B0 18 79 00 C0			add adr.ROW,y
 14877 77B4 8D 2D A0			sta BLITBYTE.SRC
 14878 77B7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14879 77B9 79 FB C0			adc adr.ROW+251,y
 14880 77BC 4C 2E 78			jmp l_29F7
 14881 77BF			l_29BA
 14882
 14883 				; optimize OK (service.pas), line = 2623
 14884
 14885 77BF AD D5 A1			lda X
 14886 77C2 18 6D DA A1			add A
 14887 77C6 85 9F			sta :STACKORIGIN+9
 14888 77C8 A9 50			lda #$50
 14889 77CA 6D DB A1			adc A+1
 14890 77CD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14891 77CF A9 00			lda #$00
 14892 77D1 69 00			adc #$00
 14893 77D3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14894 77D5 A9 00			lda #$00
 14895 77D7 69 00			adc #$00
 14896 77D9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14897 77DB AD D6 A1			lda Y
 14898 77DE 18 6D DC A1			add B
 14899 77E2 A8				tay
 14900 77E3 A5 9F			lda :STACKORIGIN+9
 14901 77E5 18 79 00 C0			add adr.ROW,y
 14902 77E9 8D 31 A0			sta BLITBYTE.DST
 14903 77EC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14904 77EE 79 FB C0			adc adr.ROW+251,y
 14905 77F1 8D 32 A0			sta BLITBYTE.DST+1
 14906 77F4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14907 77F6 69 00			adc #$00
 14908 77F8 8D 33 A0			sta BLITBYTE.DST+2
 14909 77FB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14910 77FD 69 00			adc #$00
 14911 77FF 8D 34 A0			sta BLITBYTE.DST+3
 14912 7802 AD 3F 9C			lda NEWVAUS.OFS
 14913 7805 18 6D D5 A1			add X
 14914 7809 85 A0			sta :STACKORIGIN+10
 14915 780B AD 40 9C			lda NEWVAUS.OFS+1
 14916 780E 69 00			adc #$00
 14917 7810 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14918 7812 AD 41 9C			lda NEWVAUS.OFS+2
 14919 7815 69 00			adc #$00
 14920 7817 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14921 7819 AD 42 9C			lda NEWVAUS.OFS+3
 14922 781C 69 00			adc #$00
 14923 781E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14924 7820 A5 A0			lda :STACKORIGIN+10
 14925 7822 18 6D D8 A1			add Z
 14926 7826 8D 2D A0			sta BLITBYTE.SRC
 14927 7829 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14928 782B 6D D9 A1			adc Z+1
 14929 782E			l_29F7
 14930 782E 8D 2E A0			sta BLITBYTE.SRC+1
 14931 7831 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14932 7833 69 00			adc #$00
 14933 7835 8D 2F A0			sta BLITBYTE.SRC+2
 14934 7838 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14935 783A 69 00			adc #$00
 14936 783C 8D 30 A0			sta BLITBYTE.SRC+3
 14937 783F 20 BA 2C			jsr BLITBYTE
 14938
 14939 				; --- ForToDoEpilog
 14940 7842 EE D5 A1			inc X
 14941 7845 F0 03 4C E0 76		jne l_2990
 14942 784A			l_299E
 14943
 14944 				; --- ForToDoEpilog
 14945 784A EE D6 A1			inc Y
 14946 784D F0 03 4C 74 76		jne l_295A
 14947 7852			l_2968
 14948
 14949 				; optimize OK (service.pas), line = 2627
 14950
 14951 7852 A9 01			lda #$01
 14952 7854 8D 40 A0			sta MYDELAY.A
 14953 7857 A9 00			lda #$00
 14954 7859 8D 41 A0			sta MYDELAY.A+1
 14955 785C 20 5A 2D			jsr MYDELAY
 14956
 14957 				; --- ForToDoEpilog
 14958 785F CE D7 A1			dec W
 14959 7862 30 03 4C 6F 76		jpl l_2943
 14960 7867			l_2951
 14961
 14962 				; ------------------------------------------------------------
 14963
 14964 = A1D5			X	= DATAORIGIN+$06DA
 14965 = A1D6			Y	= DATAORIGIN+$06DB
 14966 = A1D7			W	= DATAORIGIN+$06DC
 14967 = A1D8			Z	= DATAORIGIN+$06DD
 14968 = A1DA			A	= DATAORIGIN+$06DF
 14969 = A1DC			B	= DATAORIGIN+$06E1
 14970
 14971 = A1D5			@VarData	= X
 14972 = 0009			@VarDataSize	= 9
 14973
 14974 7867			@exit
 14975 					.ifdef @new
 14976 					lda <@VarData
 14977 					sta :ztmp
 14978 					lda >@VarData
 14979 					ldy #@VarDataSize-1
 14980 					jmp @FreeMem
 14981 					els
 14982 7867 60				rts						; ret
 14983 					eif
 14984 				.endl
 14985
 14986 7868			.local	PUT_DIGIT					; PROCEDURE
 14987
 14988 				; optimize OK (service.pas), line = 2637
 14989
 14990 7868 A9 DE			lda #$DE
 14991 786A 8D E7 A1			sta A
 14992
 14993 				; optimize OK (service.pas), line = 2661
 14994
 14995 786D AC E3 A1			ldy NUM
 14996 7870 B9 96 10			lda adr.DIGITS,y
 14997 7873 29 01			and #$01
 14998 7875 C9 01			cmp #$01
 14999 7877 D0 05			jne l_2A4E
 15000 7879 A9 DF			lda #$DF
 15001 787B 8D E7 A1			sta A
 15002 787E			l_2A4E
 15003
 15004 				; optimize OK (service.pas), line = 2662
 15005
 15006 787E A9 01			lda #$01
 15007 7880 8D E5 A1			sta X
 15008
 15009 7883			l_2A5E
 15010 				; --- ForToDoCondition
 15011 7883 AD E5 A1			lda X
 15012 7886 C9 05			cmp #$05
 15013 7888 B0 63			jcs l_2A6C
 15014
 15015 				; optimize OK (service.pas), line = 2664
 15016
 15017 788A AD DF A1			lda PX
 15018 788D 85 A0			sta :STACKORIGIN+10
 15019 788F A9 50			lda #$50
 15020 7891 18 6D E0 A1			add PX+1
 15021 7895 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15022 7897 A9 00			lda #$00
 15023 7899 69 00			adc #$00
 15024 789B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15025 789D A9 00			lda #$00
 15026 789F 69 00			adc #$00
 15027 78A1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15028 78A3 A5 A0			lda :STACKORIGIN+10
 15029 78A5 18 6D E5 A1			add X
 15030 78A9 85 A0			sta :STACKORIGIN+10
 15031 78AB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15032 78AD 69 00			adc #$00
 15033 78AF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15034 78B1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15035 78B3 69 00			adc #$00
 15036 78B5 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15037 78B7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15038 78B9 69 00			adc #$00
 15039 78BB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15040 78BD AC E1 A1			ldy PY
 15041 78C0 A5 A0			lda :STACKORIGIN+10
 15042 78C2 18 79 00 C0			add adr.ROW,y
 15043 78C6 8D 36 A0			sta PUTBYTE.DST
 15044 78C9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15045 78CB 79 FB C0			adc adr.ROW+251,y
 15046 78CE 8D 37 A0			sta PUTBYTE.DST+1
 15047 78D1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15048 78D3 69 00			adc #$00
 15049 78D5 8D 38 A0			sta PUTBYTE.DST+2
 15050 78D8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15051 78DA 69 00			adc #$00
 15052 78DC 8D 39 A0			sta PUTBYTE.DST+3
 15053 78DF AD E7 A1			lda A
 15054 78E2 8D 3A A0			sta PUTBYTE.V
 15055 78E5 20 09 2D			jsr PUTBYTE
 15056
 15057 				; --- ForToDoEpilog
 15058 78E8 EE E5 A1			inc X
 15059 78EB D0 96			jne l_2A5E
 15060 78ED			l_2A6C
 15061
 15062 				; optimize OK (service.pas), line = 2668
 15063
 15064 78ED A9 DE			lda #$DE
 15065 78EF 8D E7 A1			sta A
 15066
 15067 				; optimize OK (service.pas), line = 2669
 15068
 15069 78F2 AC E3 A1			ldy NUM
 15070 78F5 B9 96 10			lda adr.DIGITS,y
 15071 78F8 29 02			and #$02
 15072 78FA C9 02			cmp #$02
 15073 78FC D0 05			jne l_2AA4
 15074 78FE A9 DF			lda #$DF
 15075 7900 8D E7 A1			sta A
 15076 7903			l_2AA4
 15077
 15078 				; optimize OK (service.pas), line = 2670
 15079
 15080 7903 A9 01			lda #$01
 15081 7905 8D E5 A1			sta X
 15082
 15083 7908			l_2AB4
 15084 				; --- ForToDoCondition
 15085 7908 AD E5 A1			lda X
 15086 790B C9 05			cmp #$05
 15087 790D B0 63			jcs l_2AC2
 15088
 15089 				; optimize OK (service.pas), line = 2672
 15090
 15091 790F AD DF A1			lda PX
 15092 7912 85 A0			sta :STACKORIGIN+10
 15093 7914 A9 50			lda #$50
 15094 7916 18 6D E0 A1			add PX+1
 15095 791A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15096 791C A9 00			lda #$00
 15097 791E 69 00			adc #$00
 15098 7920 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15099 7922 A9 00			lda #$00
 15100 7924 69 00			adc #$00
 15101 7926 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15102 7928 A5 A0			lda :STACKORIGIN+10
 15103 792A 18 6D E5 A1			add X
 15104 792E 85 A0			sta :STACKORIGIN+10
 15105 7930 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15106 7932 69 00			adc #$00
 15107 7934 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15108 7936 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15109 7938 69 00			adc #$00
 15110 793A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15111 793C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15112 793E 69 00			adc #$00
 15113 7940 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15114 7942 AC E1 A1			ldy PY
 15115 7945 A5 A0			lda :STACKORIGIN+10
 15116 7947 18 79 05 C0			add adr.ROW+$05,y
 15117 794B 8D 36 A0			sta PUTBYTE.DST
 15118 794E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15119 7950 79 00 C1			adc adr.ROW+251+$05,y
 15120 7953 8D 37 A0			sta PUTBYTE.DST+1
 15121 7956 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15122 7958 69 00			adc #$00
 15123 795A 8D 38 A0			sta PUTBYTE.DST+2
 15124 795D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15125 795F 69 00			adc #$00
 15126 7961 8D 39 A0			sta PUTBYTE.DST+3
 15127 7964 AD E7 A1			lda A
 15128 7967 8D 3A A0			sta PUTBYTE.V
 15129 796A 20 09 2D			jsr PUTBYTE
 15130
 15131 				; --- ForToDoEpilog
 15132 796D EE E5 A1			inc X
 15133 7970 D0 96			jne l_2AB4
 15134 7972			l_2AC2
 15135
 15136 				; optimize OK (service.pas), line = 2676
 15137
 15138 7972 A9 DE			lda #$DE
 15139 7974 8D E7 A1			sta A
 15140
 15141 				; optimize OK (service.pas), line = 2677
 15142
 15143 7977 AC E3 A1			ldy NUM
 15144 797A B9 96 10			lda adr.DIGITS,y
 15145 797D 29 04			and #$04
 15146 797F C9 04			cmp #$04
 15147 7981 D0 05			jne l_2AFE
 15148 7983 A9 DF			lda #$DF
 15149 7985 8D E7 A1			sta A
 15150 7988			l_2AFE
 15151
 15152 				; optimize OK (service.pas), line = 2678
 15153
 15154 7988 A9 01			lda #$01
 15155 798A 8D E5 A1			sta X
 15156
 15157 798D			l_2B0E
 15158 				; --- ForToDoCondition
 15159 798D AD E5 A1			lda X
 15160 7990 C9 05			cmp #$05
 15161 7992 B0 63			jcs l_2B1C
 15162
 15163 				; optimize OK (service.pas), line = 2680
 15164
 15165 7994 AD DF A1			lda PX
 15166 7997 85 A0			sta :STACKORIGIN+10
 15167 7999 A9 50			lda #$50
 15168 799B 18 6D E0 A1			add PX+1
 15169 799F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15170 79A1 A9 00			lda #$00
 15171 79A3 69 00			adc #$00
 15172 79A5 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15173 79A7 A9 00			lda #$00
 15174 79A9 69 00			adc #$00
 15175 79AB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15176 79AD A5 A0			lda :STACKORIGIN+10
 15177 79AF 18 6D E5 A1			add X
 15178 79B3 85 A0			sta :STACKORIGIN+10
 15179 79B5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15180 79B7 69 00			adc #$00
 15181 79B9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15182 79BB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15183 79BD 69 00			adc #$00
 15184 79BF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15185 79C1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15186 79C3 69 00			adc #$00
 15187 79C5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15188 79C7 AC E1 A1			ldy PY
 15189 79CA A5 A0			lda :STACKORIGIN+10
 15190 79CC 18 79 0A C0			add adr.ROW+$0A,y
 15191 79D0 8D 36 A0			sta PUTBYTE.DST
 15192 79D3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15193 79D5 79 05 C1			adc adr.ROW+251+$0A,y
 15194 79D8 8D 37 A0			sta PUTBYTE.DST+1
 15195 79DB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15196 79DD 69 00			adc #$00
 15197 79DF 8D 38 A0			sta PUTBYTE.DST+2
 15198 79E2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15199 79E4 69 00			adc #$00
 15200 79E6 8D 39 A0			sta PUTBYTE.DST+3
 15201 79E9 AD E7 A1			lda A
 15202 79EC 8D 3A A0			sta PUTBYTE.V
 15203 79EF 20 09 2D			jsr PUTBYTE
 15204
 15205 				; --- ForToDoEpilog
 15206 79F2 EE E5 A1			inc X
 15207 79F5 D0 96			jne l_2B0E
 15208 79F7			l_2B1C
 15209
 15210 				; optimize OK (service.pas), line = 2683
 15211
 15212 79F7 A9 DE			lda #$DE
 15213 79F9 8D E7 A1			sta A
 15214
 15215 				; optimize OK (service.pas), line = 2684
 15216
 15217 79FC AC E3 A1			ldy NUM
 15218 79FF B9 96 10			lda adr.DIGITS,y
 15219 7A02 29 08			and #$08
 15220 7A04 C9 08			cmp #$08
 15221 7A06 D0 05			jne l_2B58
 15222 7A08 A9 DF			lda #$DF
 15223 7A0A 8D E7 A1			sta A
 15224 7A0D			l_2B58
 15225
 15226 				; optimize OK (service.pas), line = 2685
 15227
 15228 7A0D A9 01			lda #$01
 15229 7A0F 8D E6 A1			sta Y
 15230
 15231 7A12			l_2B68
 15232 				; --- ForToDoCondition
 15233 7A12 AD E6 A1			lda Y
 15234 7A15 C9 05			cmp #$05
 15235 7A17 B0 4E			jcs l_2B76
 15236
 15237 				; optimize OK (service.pas), line = 2687
 15238
 15239 7A19 AD DF A1			lda PX
 15240 7A1C 85 A0			sta :STACKORIGIN+10
 15241 7A1E A9 50			lda #$50
 15242 7A20 18 6D E0 A1			add PX+1
 15243 7A24 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15244 7A26 A9 00			lda #$00
 15245 7A28 69 00			adc #$00
 15246 7A2A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15247 7A2C A9 00			lda #$00
 15248 7A2E 69 00			adc #$00
 15249 7A30 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15250 7A32 AD E1 A1			lda PY
 15251 7A35 18 6D E6 A1			add Y
 15252 7A39 A8				tay
 15253 7A3A A5 A0			lda :STACKORIGIN+10
 15254 7A3C 18 79 00 C0			add adr.ROW,y
 15255 7A40 8D 36 A0			sta PUTBYTE.DST
 15256 7A43 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15257 7A45 79 FB C0			adc adr.ROW+251,y
 15258 7A48 8D 37 A0			sta PUTBYTE.DST+1
 15259 7A4B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15260 7A4D 69 00			adc #$00
 15261 7A4F 8D 38 A0			sta PUTBYTE.DST+2
 15262 7A52 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15263 7A54 69 00			adc #$00
 15264 7A56 8D 39 A0			sta PUTBYTE.DST+3
 15265 7A59 AD E7 A1			lda A
 15266 7A5C 8D 3A A0			sta PUTBYTE.V
 15267 7A5F 20 09 2D			jsr PUTBYTE
 15268
 15269 				; --- ForToDoEpilog
 15270 7A62 EE E6 A1			inc Y
 15271 7A65 D0 AB			jne l_2B68
 15272 7A67			l_2B76
 15273
 15274 				; optimize OK (service.pas), line = 2690
 15275
 15276 7A67 A9 DE			lda #$DE
 15277 7A69 8D E7 A1			sta A
 15278
 15279 				; optimize OK (service.pas), line = 2691
 15280
 15281 7A6C AC E3 A1			ldy NUM
 15282 7A6F B9 96 10			lda adr.DIGITS,y
 15283 7A72 29 10			and #$10
 15284 7A74 C9 10			cmp #$10
 15285 7A76 D0 05			jne l_2BAE
 15286 7A78 A9 DF			lda #$DF
 15287 7A7A 8D E7 A1			sta A
 15288 7A7D			l_2BAE
 15289
 15290 				; optimize OK (service.pas), line = 2692
 15291
 15292 7A7D A9 01			lda #$01
 15293 7A7F 8D E6 A1			sta Y
 15294
 15295 7A82			l_2BBE
 15296 				; --- ForToDoCondition
 15297 7A82 AD E6 A1			lda Y
 15298 7A85 C9 05			cmp #$05
 15299 7A87 B0 4E			jcs l_2BCC
 15300
 15301 				; optimize OK (service.pas), line = 2694
 15302
 15303 7A89 AD DF A1			lda PX
 15304 7A8C 85 A0			sta :STACKORIGIN+10
 15305 7A8E A9 50			lda #$50
 15306 7A90 18 6D E0 A1			add PX+1
 15307 7A94 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15308 7A96 A9 00			lda #$00
 15309 7A98 69 00			adc #$00
 15310 7A9A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15311 7A9C A9 00			lda #$00
 15312 7A9E 69 00			adc #$00
 15313 7AA0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15314 7AA2 AD E1 A1			lda PY
 15315 7AA5 18 6D E6 A1			add Y
 15316 7AA9 A8				tay
 15317 7AAA A5 A0			lda :STACKORIGIN+10
 15318 7AAC 18 79 05 C0			add adr.ROW+$05,y
 15319 7AB0 8D 36 A0			sta PUTBYTE.DST
 15320 7AB3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15321 7AB5 79 00 C1			adc adr.ROW+251+$05,y
 15322 7AB8 8D 37 A0			sta PUTBYTE.DST+1
 15323 7ABB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15324 7ABD 69 00			adc #$00
 15325 7ABF 8D 38 A0			sta PUTBYTE.DST+2
 15326 7AC2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15327 7AC4 69 00			adc #$00
 15328 7AC6 8D 39 A0			sta PUTBYTE.DST+3
 15329 7AC9 AD E7 A1			lda A
 15330 7ACC 8D 3A A0			sta PUTBYTE.V
 15331 7ACF 20 09 2D			jsr PUTBYTE
 15332
 15333 				; --- ForToDoEpilog
 15334 7AD2 EE E6 A1			inc Y
 15335 7AD5 D0 AB			jne l_2BBE
 15336 7AD7			l_2BCC
 15337
 15338 				; optimize OK (service.pas), line = 2697
 15339
 15340 7AD7 A9 DE			lda #$DE
 15341 7AD9 8D E7 A1			sta A
 15342
 15343 				; optimize OK (service.pas), line = 2698
 15344
 15345 7ADC AC E3 A1			ldy NUM
 15346 7ADF B9 96 10			lda adr.DIGITS,y
 15347 7AE2 29 20			and #$20
 15348 7AE4 C9 20			cmp #$20
 15349 7AE6 D0 05			jne l_2C08
 15350 7AE8 A9 DF			lda #$DF
 15351 7AEA 8D E7 A1			sta A
 15352 7AED			l_2C08
 15353
 15354 				; optimize OK (service.pas), line = 2699
 15355
 15356 7AED A9 01			lda #$01
 15357 7AEF 8D E6 A1			sta Y
 15358
 15359 7AF2			l_2C18
 15360 				; --- ForToDoCondition
 15361 7AF2 AD E6 A1			lda Y
 15362 7AF5 C9 05			cmp #$05
 15363 7AF7 B0 4F			jcs l_2C26
 15364
 15365 				; optimize OK (service.pas), line = 2701
 15366
 15367 7AF9 A9 05			lda #$05
 15368 7AFB 6D DF A1			adc PX
 15369 7AFE 85 A0			sta :STACKORIGIN+10
 15370 7B00 A9 50			lda #$50
 15371 7B02 6D E0 A1			adc PX+1
 15372 7B05 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15373 7B07 A9 00			lda #$00
 15374 7B09 69 00			adc #$00
 15375 7B0B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15376 7B0D A9 00			lda #$00
 15377 7B0F 69 00			adc #$00
 15378 7B11 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15379 7B13 AD E1 A1			lda PY
 15380 7B16 18 6D E6 A1			add Y
 15381 7B1A A8				tay
 15382 7B1B A5 A0			lda :STACKORIGIN+10
 15383 7B1D 18 79 00 C0			add adr.ROW,y
 15384 7B21 8D 36 A0			sta PUTBYTE.DST
 15385 7B24 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15386 7B26 79 FB C0			adc adr.ROW+251,y
 15387 7B29 8D 37 A0			sta PUTBYTE.DST+1
 15388 7B2C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15389 7B2E 69 00			adc #$00
 15390 7B30 8D 38 A0			sta PUTBYTE.DST+2
 15391 7B33 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15392 7B35 69 00			adc #$00
 15393 7B37 8D 39 A0			sta PUTBYTE.DST+3
 15394 7B3A AD E7 A1			lda A
 15395 7B3D 8D 3A A0			sta PUTBYTE.V
 15396 7B40 20 09 2D			jsr PUTBYTE
 15397
 15398 				; --- ForToDoEpilog
 15399 7B43 EE E6 A1			inc Y
 15400 7B46 D0 AA			jne l_2C18
 15401 7B48			l_2C26
 15402
 15403 				; optimize OK (service.pas), line = 2704
 15404
 15405 7B48 A9 DE			lda #$DE
 15406 7B4A 8D E7 A1			sta A
 15407
 15408 				; optimize OK (service.pas), line = 2705
 15409
 15410 7B4D AC E3 A1			ldy NUM
 15411 7B50 B9 96 10			lda adr.DIGITS,y
 15412 7B53 29 40			and #$40
 15413 7B55 C9 40			cmp #$40
 15414 7B57 D0 05			jne l_2C62
 15415 7B59 A9 DF			lda #$DF
 15416 7B5B 8D E7 A1			sta A
 15417 7B5E			l_2C62
 15418
 15419 				; optimize OK (service.pas), line = 2706
 15420
 15421 7B5E A9 01			lda #$01
 15422 7B60 8D E6 A1			sta Y
 15423
 15424 7B63			l_2C72
 15425 				; --- ForToDoCondition
 15426 7B63 AD E6 A1			lda Y
 15427 7B66 C9 05			cmp #$05
 15428 7B68 B0 4F			jcs l_2C80
 15429
 15430 				; optimize OK (service.pas), line = 2708
 15431
 15432 7B6A A9 05			lda #$05
 15433 7B6C 6D DF A1			adc PX
 15434 7B6F 85 A0			sta :STACKORIGIN+10
 15435 7B71 A9 50			lda #$50
 15436 7B73 6D E0 A1			adc PX+1
 15437 7B76 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15438 7B78 A9 00			lda #$00
 15439 7B7A 69 00			adc #$00
 15440 7B7C 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15441 7B7E A9 00			lda #$00
 15442 7B80 69 00			adc #$00
 15443 7B82 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15444 7B84 AD E1 A1			lda PY
 15445 7B87 18 6D E6 A1			add Y
 15446 7B8B A8				tay
 15447 7B8C A5 A0			lda :STACKORIGIN+10
 15448 7B8E 18 79 05 C0			add adr.ROW+$05,y
 15449 7B92 8D 36 A0			sta PUTBYTE.DST
 15450 7B95 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15451 7B97 79 00 C1			adc adr.ROW+251+$05,y
 15452 7B9A 8D 37 A0			sta PUTBYTE.DST+1
 15453 7B9D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15454 7B9F 69 00			adc #$00
 15455 7BA1 8D 38 A0			sta PUTBYTE.DST+2
 15456 7BA4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15457 7BA6 69 00			adc #$00
 15458 7BA8 8D 39 A0			sta PUTBYTE.DST+3
 15459 7BAB AD E7 A1			lda A
 15460 7BAE 8D 3A A0			sta PUTBYTE.V
 15461 7BB1 20 09 2D			jsr PUTBYTE
 15462
 15463 				; --- ForToDoEpilog
 15464 7BB4 EE E6 A1			inc Y
 15465 7BB7 D0 AA			jne l_2C72
 15466 7BB9			l_2C80
 15467
 15468 				; ------------------------------------------------------------
 15469
 15470 = A1DF			PX	= DATAORIGIN+$06E4
 15471 = A1E1			PY	= DATAORIGIN+$06E6
 15472 = A1E3			NUM	= DATAORIGIN+$06E8
 15473 = A1E5			X	= DATAORIGIN+$06EA
 15474 = A1E6			Y	= DATAORIGIN+$06EB
 15475 = A1E7			A	= DATAORIGIN+$06EC
 15476
 15477 = A1DF			@VarData	= PX
 15478 = 0009			@VarDataSize	= 9
 15479
 15480 7BB9			@exit
 15481 					.ifdef @new
 15482 					lda <@VarData
 15483 					sta :ztmp
 15484 					lda >@VarData
 15485 					ldy #@VarDataSize-1
 15486 					jmp @FreeMem
 15487 					els
 15488 7BB9 60				rts						; ret
 15489 					eif
 15490 				.endl
 15491
 15492 7BBA			.local	WRITE_SCORE					; PROCEDURE
 15493
 15494 				; optimize OK (service.pas), line = 2719
 15495
 15496 7BBA A9 00			lda #$00
 15497 7BBC 8D F4 A1			sta F
 15498
 15499 				; optimize OK (service.pas), line = 2724
 15500
 15501 7BBF A9 A0			lda #$A0
 15502 7BC1 85 8E			sta @INTEGER.DIV.B
 15503 7BC3 A9 86			lda #$86
 15504 7BC5 85 8F			sta @INTEGER.DIV.B+1
 15505 7BC7 A9 01			lda #$01
 15506 7BC9 85 90			sta @INTEGER.DIV.B+2
 15507 7BCB A9 00			lda #$00
 15508 7BCD 85 91			sta @INTEGER.DIV.B+3
 15509 7BCF AD EC A1			lda SC
 15510 7BD2 85 86			sta @INTEGER.DIV.A
 15511 7BD4 AD ED A1			lda SC+1
 15512 7BD7 85 87			sta @INTEGER.DIV.A+1
 15513 7BD9 AD EE A1			lda SC+2
 15514 7BDC 85 88			sta @INTEGER.DIV.A+2
 15515 7BDE AD EF A1			lda SC+3
 15516 7BE1 85 89			sta @INTEGER.DIV.A+3
 15517 7BE3 20 8B 12			jsr @INTEGER.DIV
 15518 7BE6 A9 0A			lda #$0A
 15519 7BE8 85 8E			sta @INTEGER.MOD.B
 15520 7BEA A9 00			lda #$00
 15521 7BEC 85 8F			sta @INTEGER.MOD.B+1
 15522 7BEE 85 90			sta @INTEGER.MOD.B+2
 15523 7BF0 85 91			sta @INTEGER.MOD.B+3
 15524 7BF2 20 A8 12			jsr @INTEGER.MOD
 15525 7BF5 A5 8A			lda @INTEGER.MOD.RESULT
 15526 7BF7 8D F0 A1			sta N1
 15527 7BFA A5 8B			lda @INTEGER.MOD.RESULT+1
 15528 7BFC 8D F1 A1			sta N1+1
 15529 7BFF A5 8C			lda @INTEGER.MOD.RESULT+2
 15530 7C01 8D F2 A1			sta N1+2
 15531 7C04 A5 8D			lda @INTEGER.MOD.RESULT+3
 15532 7C06 8D F3 A1			sta N1+3
 15533
 15534 				; optimize OK (service.pas), line = 2725
 15535
 15536 7C09 30 10			jmi l_2CC8
 15537 7C0B 0D F2 A1			ora N1+2
 15538 7C0E 0D F1 A1			ora N1+1
 15539 7C11 0D F0 A1			ora N1
 15540 7C14 F0 05			jeq l_2CC8
 15541 7C16 A9 01			lda #$01
 15542 7C18 8D F4 A1			sta F
 15543 7C1B			l_2CC8
 15544
 15545 				; optimize OK (service.pas), line = 2726
 15546
 15547 7C1B AD F4 A1			lda F
 15548 7C1E F0 24			jeq l_2CDB
 15549 7C20 AD E8 A1			lda PX
 15550 7C23 8D DF A1			sta PUT_DIGIT.PX
 15551 7C26 AD E9 A1			lda PX+1
 15552 7C29 8D E0 A1			sta PUT_DIGIT.PX+1
 15553 7C2C AD EA A1			lda PY
 15554 7C2F 8D E1 A1			sta PUT_DIGIT.PY
 15555 7C32 AD EB A1			lda PY+1
 15556 7C35 8D E2 A1			sta PUT_DIGIT.PY+1
 15557 7C38 AD F0 A1			lda N1
 15558 7C3B 8D E3 A1			sta PUT_DIGIT.NUM
 15559 7C3E AD F1 A1			lda N1+1
 15560 7C41 4C 63 7C			jmp l_2CEB
 15561 7C44			l_2CDB
 15562
 15563 				; optimize OK (service.pas), line = 2727
 15564
 15565 7C44 AD E8 A1			lda PX
 15566 7C47 8D DF A1			sta PUT_DIGIT.PX
 15567 7C4A AD E9 A1			lda PX+1
 15568 7C4D 8D E0 A1			sta PUT_DIGIT.PX+1
 15569 7C50 AD EA A1			lda PY
 15570 7C53 8D E1 A1			sta PUT_DIGIT.PY
 15571 7C56 AD EB A1			lda PY+1
 15572 7C59 8D E2 A1			sta PUT_DIGIT.PY+1
 15573 7C5C A9 0A			lda #$0A
 15574 7C5E 8D E3 A1			sta PUT_DIGIT.NUM
 15575 7C61 A9 00			lda #$00
 15576 7C63			l_2CEB
 15577 7C63 8D E4 A1			sta PUT_DIGIT.NUM+1
 15578 7C66 20 68 78			jsr PUT_DIGIT
 15579
 15580 				; optimize OK (service.pas), line = 2730
 15581
 15582 7C69 A9 10			lda #$10
 15583 7C6B 85 8E			sta @INTEGER.DIV.B
 15584 7C6D A9 27			lda #$27
 15585 7C6F 85 8F			sta @INTEGER.DIV.B+1
 15586 7C71 A9 00			lda #$00
 15587 7C73 85 90			sta @INTEGER.DIV.B+2
 15588 7C75 85 91			sta @INTEGER.DIV.B+3
 15589 7C77 AD EC A1			lda SC
 15590 7C7A 85 86			sta @INTEGER.DIV.A
 15591 7C7C AD ED A1			lda SC+1
 15592 7C7F 85 87			sta @INTEGER.DIV.A+1
 15593 7C81 AD EE A1			lda SC+2
 15594 7C84 85 88			sta @INTEGER.DIV.A+2
 15595 7C86 AD EF A1			lda SC+3
 15596 7C89 85 89			sta @INTEGER.DIV.A+3
 15597 7C8B 20 8B 12			jsr @INTEGER.DIV
 15598 7C8E A9 0A			lda #$0A
 15599 7C90 85 8E			sta @INTEGER.MOD.B
 15600 7C92 A9 00			lda #$00
 15601 7C94 85 8F			sta @INTEGER.MOD.B+1
 15602 7C96 85 90			sta @INTEGER.MOD.B+2
 15603 7C98 85 91			sta @INTEGER.MOD.B+3
 15604 7C9A 20 A8 12			jsr @INTEGER.MOD
 15605 7C9D A5 8A			lda @INTEGER.MOD.RESULT
 15606 7C9F 8D F0 A1			sta N1
 15607 7CA2 A5 8B			lda @INTEGER.MOD.RESULT+1
 15608 7CA4 8D F1 A1			sta N1+1
 15609 7CA7 A5 8C			lda @INTEGER.MOD.RESULT+2
 15610 7CA9 8D F2 A1			sta N1+2
 15611 7CAC A5 8D			lda @INTEGER.MOD.RESULT+3
 15612 7CAE 8D F3 A1			sta N1+3
 15613
 15614 				; optimize OK (service.pas), line = 2731
 15615
 15616 7CB1 30 10			jmi l_2D0D
 15617 7CB3 0D F2 A1			ora N1+2
 15618 7CB6 0D F1 A1			ora N1+1
 15619 7CB9 0D F0 A1			ora N1
 15620 7CBC F0 05			jeq l_2D0D
 15621 7CBE A9 01			lda #$01
 15622 7CC0 8D F4 A1			sta F
 15623 7CC3			l_2D0D
 15624
 15625 				; optimize OK (service.pas), line = 2732
 15626
 15627 7CC3 AD F4 A1			lda F
 15628 7CC6 F0 29			jeq l_2D20
 15629 7CC8 AD E8 A1			lda PX
 15630 7CCB 18 69 07			add #$07
 15631 7CCE 8D DF A1			sta PUT_DIGIT.PX
 15632 7CD1 AD E9 A1			lda PX+1
 15633 7CD4 69 00			adc #$00
 15634 7CD6 8D E0 A1			sta PUT_DIGIT.PX+1
 15635 7CD9 AD EA A1			lda PY
 15636 7CDC 8D E1 A1			sta PUT_DIGIT.PY
 15637 7CDF AD EB A1			lda PY+1
 15638 7CE2 8D E2 A1			sta PUT_DIGIT.PY+1
 15639 7CE5 AD F0 A1			lda N1
 15640 7CE8 8D E3 A1			sta PUT_DIGIT.NUM
 15641 7CEB AD F1 A1			lda N1+1
 15642 7CEE 4C 15 7D			jmp l_2D34
 15643 7CF1			l_2D20
 15644
 15645 				; optimize OK (service.pas), line = 2733
 15646
 15647 7CF1 AD E8 A1			lda PX
 15648 7CF4 18 69 07			add #$07
 15649 7CF7 8D DF A1			sta PUT_DIGIT.PX
 15650 7CFA AD E9 A1			lda PX+1
 15651 7CFD 69 00			adc #$00
 15652 7CFF 8D E0 A1			sta PUT_DIGIT.PX+1
 15653 7D02 AD EA A1			lda PY
 15654 7D05 8D E1 A1			sta PUT_DIGIT.PY
 15655 7D08 AD EB A1			lda PY+1
 15656 7D0B 8D E2 A1			sta PUT_DIGIT.PY+1
 15657 7D0E A9 0A			lda #$0A
 15658 7D10 8D E3 A1			sta PUT_DIGIT.NUM
 15659 7D13 A9 00			lda #$00
 15660 7D15			l_2D34
 15661 7D15 8D E4 A1			sta PUT_DIGIT.NUM+1
 15662 7D18 20 68 78			jsr PUT_DIGIT
 15663
 15664 				; optimize OK (service.pas), line = 2736
 15665
 15666 7D1B A9 E8			lda #$E8
 15667 7D1D 85 8E			sta @INTEGER.DIV.B
 15668 7D1F A9 03			lda #$03
 15669 7D21 85 8F			sta @INTEGER.DIV.B+1
 15670 7D23 A9 00			lda #$00
 15671 7D25 85 90			sta @INTEGER.DIV.B+2
 15672 7D27 85 91			sta @INTEGER.DIV.B+3
 15673 7D29 AD EC A1			lda SC
 15674 7D2C 85 86			sta @INTEGER.DIV.A
 15675 7D2E AD ED A1			lda SC+1
 15676 7D31 85 87			sta @INTEGER.DIV.A+1
 15677 7D33 AD EE A1			lda SC+2
 15678 7D36 85 88			sta @INTEGER.DIV.A+2
 15679 7D38 AD EF A1			lda SC+3
 15680 7D3B 85 89			sta @INTEGER.DIV.A+3
 15681 7D3D 20 8B 12			jsr @INTEGER.DIV
 15682 7D40 A9 0A			lda #$0A
 15683 7D42 85 8E			sta @INTEGER.MOD.B
 15684 7D44 A9 00			lda #$00
 15685 7D46 85 8F			sta @INTEGER.MOD.B+1
 15686 7D48 85 90			sta @INTEGER.MOD.B+2
 15687 7D4A 85 91			sta @INTEGER.MOD.B+3
 15688 7D4C 20 A8 12			jsr @INTEGER.MOD
 15689 7D4F A5 8A			lda @INTEGER.MOD.RESULT
 15690 7D51 8D F0 A1			sta N1
 15691 7D54 A5 8B			lda @INTEGER.MOD.RESULT+1
 15692 7D56 8D F1 A1			sta N1+1
 15693 7D59 A5 8C			lda @INTEGER.MOD.RESULT+2
 15694 7D5B 8D F2 A1			sta N1+2
 15695 7D5E A5 8D			lda @INTEGER.MOD.RESULT+3
 15696 7D60 8D F3 A1			sta N1+3
 15697
 15698 				; optimize OK (service.pas), line = 2737
 15699
 15700 7D63 30 10			jmi l_2D5A
 15701 7D65 0D F2 A1			ora N1+2
 15702 7D68 0D F1 A1			ora N1+1
 15703 7D6B 0D F0 A1			ora N1
 15704 7D6E F0 05			jeq l_2D5A
 15705 7D70 A9 01			lda #$01
 15706 7D72 8D F4 A1			sta F
 15707 7D75			l_2D5A
 15708
 15709 				; optimize OK (service.pas), line = 2738
 15710
 15711 7D75 AD F4 A1			lda F
 15712 7D78 F0 29			jeq l_2D6D
 15713 7D7A AD E8 A1			lda PX
 15714 7D7D 18 69 0E			add #$0E
 15715 7D80 8D DF A1			sta PUT_DIGIT.PX
 15716 7D83 AD E9 A1			lda PX+1
 15717 7D86 69 00			adc #$00
 15718 7D88 8D E0 A1			sta PUT_DIGIT.PX+1
 15719 7D8B AD EA A1			lda PY
 15720 7D8E 8D E1 A1			sta PUT_DIGIT.PY
 15721 7D91 AD EB A1			lda PY+1
 15722 7D94 8D E2 A1			sta PUT_DIGIT.PY+1
 15723 7D97 AD F0 A1			lda N1
 15724 7D9A 8D E3 A1			sta PUT_DIGIT.NUM
 15725 7D9D AD F1 A1			lda N1+1
 15726 7DA0 4C C7 7D			jmp l_2D81
 15727 7DA3			l_2D6D
 15728
 15729 				; optimize OK (service.pas), line = 2739
 15730
 15731 7DA3 AD E8 A1			lda PX
 15732 7DA6 18 69 0E			add #$0E
 15733 7DA9 8D DF A1			sta PUT_DIGIT.PX
 15734 7DAC AD E9 A1			lda PX+1
 15735 7DAF 69 00			adc #$00
 15736 7DB1 8D E0 A1			sta PUT_DIGIT.PX+1
 15737 7DB4 AD EA A1			lda PY
 15738 7DB7 8D E1 A1			sta PUT_DIGIT.PY
 15739 7DBA AD EB A1			lda PY+1
 15740 7DBD 8D E2 A1			sta PUT_DIGIT.PY+1
 15741 7DC0 A9 0A			lda #$0A
 15742 7DC2 8D E3 A1			sta PUT_DIGIT.NUM
 15743 7DC5 A9 00			lda #$00
 15744 7DC7			l_2D81
 15745 7DC7 8D E4 A1			sta PUT_DIGIT.NUM+1
 15746 7DCA 20 68 78			jsr PUT_DIGIT
 15747
 15748 				; optimize OK (service.pas), line = 2742
 15749
 15750 7DCD A9 64			lda #$64
 15751 7DCF 85 8E			sta @INTEGER.DIV.B
 15752 7DD1 A9 00			lda #$00
 15753 7DD3 85 8F			sta @INTEGER.DIV.B+1
 15754 7DD5 85 90			sta @INTEGER.DIV.B+2
 15755 7DD7 85 91			sta @INTEGER.DIV.B+3
 15756 7DD9 AD EC A1			lda SC
 15757 7DDC 85 86			sta @INTEGER.DIV.A
 15758 7DDE AD ED A1			lda SC+1
 15759 7DE1 85 87			sta @INTEGER.DIV.A+1
 15760 7DE3 AD EE A1			lda SC+2
 15761 7DE6 85 88			sta @INTEGER.DIV.A+2
 15762 7DE8 AD EF A1			lda SC+3
 15763 7DEB 85 89			sta @INTEGER.DIV.A+3
 15764 7DED 20 8B 12			jsr @INTEGER.DIV
 15765 7DF0 A9 0A			lda #$0A
 15766 7DF2 85 8E			sta @INTEGER.MOD.B
 15767 7DF4 A9 00			lda #$00
 15768 7DF6 85 8F			sta @INTEGER.MOD.B+1
 15769 7DF8 85 90			sta @INTEGER.MOD.B+2
 15770 7DFA 85 91			sta @INTEGER.MOD.B+3
 15771 7DFC 20 A8 12			jsr @INTEGER.MOD
 15772 7DFF A5 8A			lda @INTEGER.MOD.RESULT
 15773 7E01 8D F0 A1			sta N1
 15774 7E04 A5 8B			lda @INTEGER.MOD.RESULT+1
 15775 7E06 8D F1 A1			sta N1+1
 15776 7E09 A5 8C			lda @INTEGER.MOD.RESULT+2
 15777 7E0B 8D F2 A1			sta N1+2
 15778 7E0E A5 8D			lda @INTEGER.MOD.RESULT+3
 15779 7E10 8D F3 A1			sta N1+3
 15780
 15781 				; optimize OK (service.pas), line = 2743
 15782
 15783 7E13 30 10			jmi l_2DA7
 15784 7E15 0D F2 A1			ora N1+2
 15785 7E18 0D F1 A1			ora N1+1
 15786 7E1B 0D F0 A1			ora N1
 15787 7E1E F0 05			jeq l_2DA7
 15788 7E20 A9 01			lda #$01
 15789 7E22 8D F4 A1			sta F
 15790 7E25			l_2DA7
 15791
 15792 				; optimize OK (service.pas), line = 2744
 15793
 15794 7E25 AD F4 A1			lda F
 15795 7E28 F0 29			jeq l_2DBA
 15796 7E2A AD E8 A1			lda PX
 15797 7E2D 18 69 15			add #$15
 15798 7E30 8D DF A1			sta PUT_DIGIT.PX
 15799 7E33 AD E9 A1			lda PX+1
 15800 7E36 69 00			adc #$00
 15801 7E38 8D E0 A1			sta PUT_DIGIT.PX+1
 15802 7E3B AD EA A1			lda PY
 15803 7E3E 8D E1 A1			sta PUT_DIGIT.PY
 15804 7E41 AD EB A1			lda PY+1
 15805 7E44 8D E2 A1			sta PUT_DIGIT.PY+1
 15806 7E47 AD F0 A1			lda N1
 15807 7E4A 8D E3 A1			sta PUT_DIGIT.NUM
 15808 7E4D AD F1 A1			lda N1+1
 15809 7E50 4C 77 7E			jmp l_2DCE
 15810 7E53			l_2DBA
 15811
 15812 				; optimize OK (service.pas), line = 2745
 15813
 15814 7E53 AD E8 A1			lda PX
 15815 7E56 18 69 15			add #$15
 15816 7E59 8D DF A1			sta PUT_DIGIT.PX
 15817 7E5C AD E9 A1			lda PX+1
 15818 7E5F 69 00			adc #$00
 15819 7E61 8D E0 A1			sta PUT_DIGIT.PX+1
 15820 7E64 AD EA A1			lda PY
 15821 7E67 8D E1 A1			sta PUT_DIGIT.PY
 15822 7E6A AD EB A1			lda PY+1
 15823 7E6D 8D E2 A1			sta PUT_DIGIT.PY+1
 15824 7E70 A9 0A			lda #$0A
 15825 7E72 8D E3 A1			sta PUT_DIGIT.NUM
 15826 7E75 A9 00			lda #$00
 15827 7E77			l_2DCE
 15828 7E77 8D E4 A1			sta PUT_DIGIT.NUM+1
 15829 7E7A 20 68 78			jsr PUT_DIGIT
 15830
 15831 				; optimize OK (service.pas), line = 2748
 15832
 15833 7E7D A9 0A			lda #$0A
 15834 7E7F 85 8E			sta @INTEGER.DIV.B
 15835 7E81 A9 00			lda #$00
 15836 7E83 85 8F			sta @INTEGER.DIV.B+1
 15837 7E85 85 90			sta @INTEGER.DIV.B+2
 15838 7E87 85 91			sta @INTEGER.DIV.B+3
 15839 7E89 AD EC A1			lda SC
 15840 7E8C 85 86			sta @INTEGER.DIV.A
 15841 7E8E AD ED A1			lda SC+1
 15842 7E91 85 87			sta @INTEGER.DIV.A+1
 15843 7E93 AD EE A1			lda SC+2
 15844 7E96 85 88			sta @INTEGER.DIV.A+2
 15845 7E98 AD EF A1			lda SC+3
 15846 7E9B 85 89			sta @INTEGER.DIV.A+3
 15847 7E9D 20 8B 12			jsr @INTEGER.DIV
 15848 7EA0 A9 0A			lda #$0A
 15849 7EA2 85 8E			sta @INTEGER.MOD.B
 15850 7EA4 A9 00			lda #$00
 15851 7EA6 85 8F			sta @INTEGER.MOD.B+1
 15852 7EA8 85 90			sta @INTEGER.MOD.B+2
 15853 7EAA 85 91			sta @INTEGER.MOD.B+3
 15854 7EAC 20 A8 12			jsr @INTEGER.MOD
 15855 7EAF A5 8A			lda @INTEGER.MOD.RESULT
 15856 7EB1 8D F0 A1			sta N1
 15857 7EB4 A5 8B			lda @INTEGER.MOD.RESULT+1
 15858 7EB6 8D F1 A1			sta N1+1
 15859 7EB9 A5 8C			lda @INTEGER.MOD.RESULT+2
 15860 7EBB 8D F2 A1			sta N1+2
 15861 7EBE A5 8D			lda @INTEGER.MOD.RESULT+3
 15862 7EC0 8D F3 A1			sta N1+3
 15863
 15864 				; optimize OK (service.pas), line = 2749
 15865
 15866 7EC3 AD E8 A1			lda PX
 15867 7EC6 18 69 1C			add #$1C
 15868 7EC9 8D DF A1			sta PUT_DIGIT.PX
 15869 7ECC AD E9 A1			lda PX+1
 15870 7ECF 69 00			adc #$00
 15871 7ED1 8D E0 A1			sta PUT_DIGIT.PX+1
 15872 7ED4 AD EA A1			lda PY
 15873 7ED7 8D E1 A1			sta PUT_DIGIT.PY
 15874 7EDA AD EB A1			lda PY+1
 15875 7EDD 8D E2 A1			sta PUT_DIGIT.PY+1
 15876 7EE0 AD F0 A1			lda N1
 15877 7EE3 8D E3 A1			sta PUT_DIGIT.NUM
 15878 7EE6 AD F1 A1			lda N1+1
 15879 7EE9 8D E4 A1			sta PUT_DIGIT.NUM+1
 15880 7EEC 20 68 78			jsr PUT_DIGIT
 15881
 15882 				; optimize OK (service.pas), line = 2753
 15883
 15884 7EEF AD E8 A1			lda PX
 15885 7EF2 18 69 23			add #$23
 15886 7EF5 8D DF A1			sta PUT_DIGIT.PX
 15887 7EF8 AD E9 A1			lda PX+1
 15888 7EFB 69 00			adc #$00
 15889 7EFD 8D E0 A1			sta PUT_DIGIT.PX+1
 15890 7F00 AD EA A1			lda PY
 15891 7F03 8D E1 A1			sta PUT_DIGIT.PY
 15892 7F06 AD EB A1			lda PY+1
 15893 7F09 8D E2 A1			sta PUT_DIGIT.PY+1
 15894 7F0C A9 00			lda #$00
 15895 7F0E 8D E3 A1			sta PUT_DIGIT.NUM
 15896 7F11 8D E4 A1			sta PUT_DIGIT.NUM+1
 15897 7F14 20 68 78			jsr PUT_DIGIT
 15898
 15899 				; ------------------------------------------------------------
 15900
 15901 = A1E8			PX	= DATAORIGIN+$06ED
 15902 = A1EA			PY	= DATAORIGIN+$06EF
 15903 = A1EC			SC	= DATAORIGIN+$06F1
 15904 = A1F0			N1	= DATAORIGIN+$06F5
 15905 = A1F4			F	= DATAORIGIN+$06F9
 15906
 15907 = A1E8			@VarData	= PX
 15908 = 000D			@VarDataSize	= 13
 15909
 15910 7F17			@exit
 15911 					.ifdef @new
 15912 					lda <@VarData
 15913 					sta :ztmp
 15914 					lda >@VarData
 15915 					ldy #@VarDataSize-1
 15916 					jmp @FreeMem
 15917 					els
 15918 7F17 60				rts						; ret
 15919 					eif
 15920 				.endl
 15921
 15922 7F18			.local	PLOT_LIVES					; PROCEDURE
 15923
 15924 				; optimize FAIL (0, service.pas), line = 2799
 15925
 15926 7F18 AD F5 A1			lda LIVES
 15927 7F1B D0 03			bne @+
 15928 7F1D CE F6 A1			dec LIVES+1
 15929 				@
 15930 7F20 CE F5 A1			dec LIVES
 15931
 15932 				; optimize OK (service.pas), line = 2802
 15933
 15934 7F23 A9 00			lda #$00
 15935 7F25 8D F9 A1			sta CN
 15936
 15937 7F28			l_2E0D
 15938 				; --- ForToDoCondition
 15939 7F28 AD F9 A1			lda CN
 15940 7F2B C9 08			cmp #$08
 15941 7F2D 90 03 4C EF 81		jcs l_2E1B
 15942
 15943 				; optimize OK (service.pas), line = 2803
 15944
 15945 7F32 A9 00			lda #$00
 15946 7F34 8D F8 A1			sta Y
 15947 7F37 AC 5D 9C			ldy MINIVAUS.HEIGHT
 15948 7F3A 88				dey
 15949 7F3B 8C 3F 7F			sty @FORTMP_2E26_0
 15950
 15951 7F3E			l_2E29
 15952 				; --- ForToDoCondition
 15953 7F3E A9 00			lda @FORTMP_2E26_0::#$00
 15954 7F40 CD F8 A1			cmp Y
 15955 7F43 B0 03 4C E7 81		jcc l_2E37
 15956
 15957 				; optimize OK (service.pas), line = 2804
 15958
 15959 7F48 A9 00			lda #$00
 15960 7F4A 8D F7 A1			sta X
 15961 7F4D AC 5B 9C			ldy MINIVAUS.WIDTH
 15962 7F50 88				dey
 15963 7F51 8C 55 7F			sty @FORTMP_2E42_0
 15964
 15965 7F54			l_2E45
 15966 				; --- ForToDoCondition
 15967 7F54 A9 00			lda @FORTMP_2E42_0::#$00
 15968 7F56 CD F7 A1			cmp X
 15969 7F59 B0 03 4C DF 81		jcc l_2E53
 15970
 15971 				; optimize OK (service.pas), line = 2806
 15972
 15973 7F5E AD F7 A1			lda X
 15974 7F61 18 69 0B			add #$0B
 15975 7F64 85 9F			sta :STACKORIGIN+9
 15976 7F66 A9 00			lda #$00
 15977 7F68 69 00			adc #$00
 15978 7F6A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15979 7F6C AD 5B 9C			lda MINIVAUS.WIDTH
 15980 7F6F 85 8E			sta :ecx
 15981 7F71 AD 5C 9C			lda MINIVAUS.WIDTH+1
 15982 7F74 85 8F			sta :ecx+1
 15983 7F76 AD F9 A1			lda CN
 15984 7F79 85 86			sta :eax
 15985 7F7B A9 00			lda #$00
 15986 7F7D 85 87			sta :eax+1
 15987 					.ifdef fmulinit
 15988 					fmulu_16
 15989 					els
 15990 7F7F 20 67 13			imulCX_AL
 15991 					eif
 15992 7F82 A5 86			lda :eax
 15993 7F84 18 65 9F			add :STACKORIGIN+9
 15994 7F87 8D FE A1			sta XL
 15995 7F8A A5 87			lda :eax+1
 15996 7F8C 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 15997 7F8E 8D FF A1			sta XL+1
 15998
 15999 				; optimize OK (service.pas), line = 2807
 16000
 16001 7F91 AD F8 A1			lda Y
 16002 7F94 18 69 C0			add #$C0
 16003 7F97 8D 00 A2			sta YL
 16004 7F9A A9 00			lda #$00
 16005 7F9C 69 00			adc #$00
 16006 7F9E 8D 01 A2			sta YL+1
 16007
 16008 				; optimize OK (service.pas), line = 2809
 16009
 16010 7FA1 AC FE A1			ldy XL
 16011 7FA4 A9 C4			lda #$C4
 16012 7FA6 18 6D FF A1			add XL+1
 16013 7FAA 85 83			sta :bp+1
 16014 7FAC B1 82			lda (:bp),y
 16015 7FAE 8D FA A1			sta XP
 16016 7FB1 A9 00			lda #$00
 16017 7FB3 8D FB A1			sta XP+1
 16018
 16019 				; optimize OK (service.pas), line = 2810
 16020
 16021 7FB6 AC 00 A2			ldy YL
 16022 7FB9 B9 00 C3			lda adr.MODY,y
 16023 7FBC 85 86			sta :eax
 16024 7FBE A9 00			lda #$00
 16025 7FC0 85 87			sta :eax+1
 16026 7FC2 AD 90 9C			lda PATTERN.WIDTH
 16027 7FC5 85 8E			sta :ecx
 16028 7FC7 AD 91 9C			lda PATTERN.WIDTH+1
 16029 7FCA 85 8F			sta :ecx+1
 16030 					.ifdef fmulinit
 16031 					fmulu_16
 16032 					els
 16033 7FCC 20 67 13			imulCX_AL
 16034 					eif
 16035 7FCF A5 86			lda :eax
 16036 7FD1 8D FC A1			sta YP
 16037 7FD4 A5 87			lda :eax+1
 16038 7FD6 8D FD A1			sta YP+1
 16039
 16040 				; optimize FAIL (1, service.pas), line = 2814
 16041
 16042 7FD9 E8				inx
 16043 7FDA A0 01			ldy #1
 16044 7FDC AD F9 A1			lda CN
 16045 7FDF CD F5 A1			cmp LIVES
 16046 7FE2 A9 00			lda #$00
 16047 7FE4 ED F6 A1			sbc LIVES+1
 16048 7FE7 50 02			svc
 16049 7FE9 49 80			eor #$80
 16050 7FEB 30 01			bmi @+
 16051 7FED 88				dey
 16052 				@
 16053 7FEE 94 96			sty :STACKORIGIN,x
 16054 7FF0 AD 5F 9C			lda MINIVAUS.OFS
 16055 7FF3 18 6D F7 A1			add X
 16056 7FF7 85 9F			sta :STACKORIGIN+9
 16057 7FF9 AD 60 9C			lda MINIVAUS.OFS+1
 16058 7FFC 69 00			adc #$00
 16059 7FFE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16060 8000 AD 61 9C			lda MINIVAUS.OFS+2
 16061 8003 69 00			adc #$00
 16062 8005 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16063 8007 AD 62 9C			lda MINIVAUS.OFS+3
 16064 800A 69 00			adc #$00
 16065 800C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16066 800E AD 5B 9C			lda MINIVAUS.WIDTH
 16067 8011 85 8E			sta :ecx
 16068 8013 AD 5C 9C			lda MINIVAUS.WIDTH+1
 16069 8016 85 8F			sta :ecx+1
 16070 8018 AD F8 A1			lda Y
 16071 801B 85 86			sta :eax
 16072 801D A9 00			lda #$00
 16073 801F 85 87			sta :eax+1
 16074 					.ifdef fmulinit
 16075 					fmulu_16
 16076 					els
 16077 8021 20 67 13			imulCX_AL
 16078 					eif
 16079 8024 A5 9F			lda :STACKORIGIN+9
 16080 8026 18 65 86			add :eax
 16081 8029 8D 3B A0			sta GETBYTE.SRC
 16082 802C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16083 802E 65 87			adc :eax+1
 16084 8030 8D 3C A0			sta GETBYTE.SRC+1
 16085 8033 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16086 8035 65 88			adc :eax+2
 16087 8037 8D 3D A0			sta GETBYTE.SRC+2
 16088 803A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16089 803C 65 89			adc :eax+3
 16090 803E 8D 3E A0			sta GETBYTE.SRC+3
 16091 8041 20 31 2D			jsr GETBYTE
 16092 8044 CA				dex
 16093 8045 A0 01			ldy #1
 16094 8047 AD 3F A0			lda GETBYTE.RESULT
 16095 804A D0 01			bne @+
 16096 804C 88				dey
 16097 				@
 16098 804D 98				tya
 16099 804E 35 97			and :STACKORIGIN+1,x
 16100 8050 F0 5D			jeq l_2EB6
 16101
 16102 				; optimize OK (service.pas), line = 2817
 16103
 16104 8052 AD 5F 9C			lda MINIVAUS.OFS
 16105 8055 18 6D F7 A1			add X
 16106 8059 85 9F			sta :STACKORIGIN+9
 16107 805B AD 60 9C			lda MINIVAUS.OFS+1
 16108 805E 69 00			adc #$00
 16109 8060 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16110 8062 AD 61 9C			lda MINIVAUS.OFS+2
 16111 8065 69 00			adc #$00
 16112 8067 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16113 8069 AD 62 9C			lda MINIVAUS.OFS+3
 16114 806C 69 00			adc #$00
 16115 806E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16116 8070 AD 5B 9C			lda MINIVAUS.WIDTH
 16117 8073 85 8E			sta :ecx
 16118 8075 AD 5C 9C			lda MINIVAUS.WIDTH+1
 16119 8078 85 8F			sta :ecx+1
 16120 807A AD F8 A1			lda Y
 16121 807D 85 86			sta :eax
 16122 807F A9 00			lda #$00
 16123 8081 85 87			sta :eax+1
 16124 					.ifdef fmulinit
 16125 					fmulu_16
 16126 					els
 16127 8083 20 67 13			imulCX_AL
 16128 					eif
 16129 8086 A5 9F			lda :STACKORIGIN+9
 16130 8088 18 65 86			add :eax
 16131 808B 8D 3B A0			sta GETBYTE.SRC
 16132 808E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16133 8090 65 87			adc :eax+1
 16134 8092 8D 3C A0			sta GETBYTE.SRC+1
 16135 8095 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16136 8097 65 88			adc :eax+2
 16137 8099 8D 3D A0			sta GETBYTE.SRC+2
 16138 809C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16139 809E 65 89			adc :eax+3
 16140 80A0 8D 3E A0			sta GETBYTE.SRC+3
 16141 80A3 20 31 2D			jsr GETBYTE
 16142 80A6 AD 3F A0			lda GETBYTE.RESULT
 16143 80A9 8D 03 A2			sta CL
 16144 				; optimize OK (service.pas), line = 2820
 16145 				; optimize OK (service.pas), line = 2823
 16146 80AC 4C 49 81			jmp l_2EF8
 16147 80AF			l_2EB6
 16148
 16149 				; optimize OK (service.pas), line = 2832
 16150
 16151 80AF AD 0F 9C			lda PLAYSCREEN.OFS
 16152 80B2 18 6D FE A1			add XL
 16153 80B6 85 9F			sta :STACKORIGIN+9
 16154 80B8 AD 10 9C			lda PLAYSCREEN.OFS+1
 16155 80BB 6D FF A1			adc XL+1
 16156 80BE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16157 80C0 AD 11 9C			lda PLAYSCREEN.OFS+2
 16158 80C3 69 00			adc #$00
 16159 80C5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16160 80C7 AD 12 9C			lda PLAYSCREEN.OFS+3
 16161 80CA 69 00			adc #$00
 16162 80CC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16163 80CE AC 00 A2			ldy YL
 16164 80D1 A5 9F			lda :STACKORIGIN+9
 16165 80D3 18 79 00 C0			add adr.ROW,y
 16166 80D7 8D 3B A0			sta GETBYTE.SRC
 16167 80DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16168 80DC 79 FB C0			adc adr.ROW+251,y
 16169 80DF 8D 3C A0			sta GETBYTE.SRC+1
 16170 80E2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16171 80E4 69 00			adc #$00
 16172 80E6 8D 3D A0			sta GETBYTE.SRC+2
 16173 80E9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16174 80EB 69 00			adc #$00
 16175 80ED 8D 3E A0			sta GETBYTE.SRC+3
 16176 80F0 20 31 2D			jsr GETBYTE
 16177 80F3 AD 3F A0			lda GETBYTE.RESULT
 16178 80F6 29 80			and #$80
 16179 80F8 8D 02 A2			sta SHADOW
 16180
 16181 				; optimize OK (service.pas), line = 2835
 16182
 16183 80FB AD 94 9C			lda PATTERN.OFS
 16184 80FE 18 6D FA A1			add XP
 16185 8102 85 9F			sta :STACKORIGIN+9
 16186 8104 AD 95 9C			lda PATTERN.OFS+1
 16187 8107 6D FB A1			adc XP+1
 16188 810A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16189 810C AD 96 9C			lda PATTERN.OFS+2
 16190 810F 69 00			adc #$00
 16191 8111 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16192 8113 AD 97 9C			lda PATTERN.OFS+3
 16193 8116 69 00			adc #$00
 16194 8118 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16195 811A A5 9F			lda :STACKORIGIN+9
 16196 811C 18 6D FC A1			add YP
 16197 8120 8D 3B A0			sta GETBYTE.SRC
 16198 8123 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16199 8125 6D FD A1			adc YP+1
 16200 8128 8D 3C A0			sta GETBYTE.SRC+1
 16201 812B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16202 812D 69 00			adc #$00
 16203 812F 8D 3D A0			sta GETBYTE.SRC+2
 16204 8132 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16205 8134 69 00			adc #$00
 16206 8136 8D 3E A0			sta GETBYTE.SRC+3
 16207 8139 20 31 2D			jsr GETBYTE
 16208 813C E8				inx
 16209 813D AD 3F A0			lda GETBYTE.RESULT
 16210 8140 29 7F			and #$7F
 16211 8142 0D 02 A2			ora SHADOW
 16212 8145 8D 03 A2			sta CL
 16213 8148 CA				dex
 16214 8149			l_2EF8
 16215
 16216 				; optimize OK (service.pas), line = 2838
 16217
 16218 8149 AD FE A1			lda XL
 16219 814C 85 A0			sta :STACKORIGIN+10
 16220 814E A9 50			lda #$50
 16221 8150 18 6D FF A1			add XL+1
 16222 8154 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16223 8156 A9 00			lda #$00
 16224 8158 69 00			adc #$00
 16225 815A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16226 815C A9 00			lda #$00
 16227 815E 69 00			adc #$00
 16228 8160 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16229 8162 AC 00 A2			ldy YL
 16230 8165 A5 A0			lda :STACKORIGIN+10
 16231 8167 18 79 00 C0			add adr.ROW,y
 16232 816B 8D 36 A0			sta PUTBYTE.DST
 16233 816E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16234 8170 79 FB C0			adc adr.ROW+251,y
 16235 8173 8D 37 A0			sta PUTBYTE.DST+1
 16236 8176 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16237 8178 69 00			adc #$00
 16238 817A 8D 38 A0			sta PUTBYTE.DST+2
 16239 817D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16240 817F 69 00			adc #$00
 16241 8181 8D 39 A0			sta PUTBYTE.DST+3
 16242 8184 AD 03 A2			lda CL
 16243 8187 8D 3A A0			sta PUTBYTE.V
 16244 818A 20 09 2D			jsr PUTBYTE
 16245
 16246 				; optimize OK (service.pas), line = 2841
 16247
 16248 818D AD 0F 9C			lda PLAYSCREEN.OFS
 16249 8190 18 6D FE A1			add XL
 16250 8194 85 A0			sta :STACKORIGIN+10
 16251 8196 AD 10 9C			lda PLAYSCREEN.OFS+1
 16252 8199 6D FF A1			adc XL+1
 16253 819C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16254 819E AD 11 9C			lda PLAYSCREEN.OFS+2
 16255 81A1 69 00			adc #$00
 16256 81A3 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16257 81A5 AD 12 9C			lda PLAYSCREEN.OFS+3
 16258 81A8 69 00			adc #$00
 16259 81AA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16260 81AC AC 00 A2			ldy YL
 16261 81AF A5 A0			lda :STACKORIGIN+10
 16262 81B1 18 79 00 C0			add adr.ROW,y
 16263 81B5 8D 36 A0			sta PUTBYTE.DST
 16264 81B8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16265 81BA 79 FB C0			adc adr.ROW+251,y
 16266 81BD 8D 37 A0			sta PUTBYTE.DST+1
 16267 81C0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16268 81C2 69 00			adc #$00
 16269 81C4 8D 38 A0			sta PUTBYTE.DST+2
 16270 81C7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16271 81C9 69 00			adc #$00
 16272 81CB 8D 39 A0			sta PUTBYTE.DST+3
 16273 81CE AD 03 A2			lda CL
 16274 81D1 8D 3A A0			sta PUTBYTE.V
 16275 81D4 20 09 2D			jsr PUTBYTE
 16276
 16277 				; --- ForToDoEpilog
 16278 81D7 EE F7 A1			inc X
 16279 81DA F0 03 4C 54 7F		jne l_2E45
 16280 81DF			l_2E53
 16281
 16282 				; --- ForToDoEpilog
 16283 81DF EE F8 A1			inc Y
 16284 81E2 F0 03 4C 3E 7F		jne l_2E29
 16285 81E7			l_2E37
 16286
 16287 				; --- ForToDoEpilog
 16288 81E7 EE F9 A1			inc CN
 16289 81EA F0 03 4C 28 7F		jne l_2E0D
 16290 81EF			l_2E1B
 16291
 16292 				; ------------------------------------------------------------
 16293
 16294 = A1F5			LIVES	= DATAORIGIN+$06FA
 16295 = 000B			XLIVES	= $0B
 16296 = 00C0			YLIVES	= $C0
 16297 = A1F7			X	= DATAORIGIN+$06FC
 16298 = A1F8			Y	= DATAORIGIN+$06FD
 16299 = A1F9			CN	= DATAORIGIN+$06FE
 16300 = A1FA			XP	= DATAORIGIN+$06FF
 16301 = A1FC			YP	= DATAORIGIN+$0701
 16302 = A1FE			XL	= DATAORIGIN+$0703
 16303 = A200			YL	= DATAORIGIN+$0705
 16304 = A202			SHADOW	= DATAORIGIN+$0707
 16305 = A203			CL	= DATAORIGIN+$0708
 16306
 16307 = A1F5			@VarData	= LIVES
 16308 = 000F			@VarDataSize	= 15
 16309
 16310 81EF			@exit
 16311 					.ifdef @new
 16312 					lda <@VarData
 16313 					sta :ztmp
 16314 					lda >@VarData
 16315 					ldy #@VarDataSize-1
 16316 					jmp @FreeMem
 16317 					els
 16318 81EF 60				rts						; ret
 16319 					eif
 16320 				.endl
 16321
 16322 81F0			.local	PLACE_FIRE					; PROCEDURE
 16323
 16324 				; optimize OK (service.pas), line = 2850
 16325
 16326 81F0 A9 00			lda #$00
 16327 81F2 8D 08 A2			sta Y
 16328 81F5 AC 75 9C			ldy SHOOTS.HEIGHT
 16329 81F8 88				dey
 16330 81F9 8C FD 81			sty @FORTMP_2F66_0
 16331
 16332 81FC			l_2F69
 16333 				; --- ForToDoCondition
 16334 81FC A9 00			lda @FORTMP_2F66_0::#$00
 16335 81FE CD 08 A2			cmp Y
 16336 8201 B0 03 4C 88 82		jcc l_2F77
 16337
 16338 				; optimize OK (service.pas), line = 2852
 16339
 16340 8206 AD 08 A2			lda Y
 16341 8209 85 86			sta :eax
 16342 820B A9 00			lda #$00
 16343 820D 85 87			sta :eax+1
 16344 820F AD 73 9C			lda SHOOTS.WIDTH
 16345 8212 85 8E			sta :ecx
 16346 8214 AD 74 9C			lda SHOOTS.WIDTH+1
 16347 8217 85 8F			sta :ecx+1
 16348 					.ifdef fmulinit
 16349 					fmulu_16
 16350 					els
 16351 8219 20 67 13			imulCX_AL
 16352 					eif
 16353 821C A5 86			lda :eax
 16354 821E 8D 06 A2			sta FW
 16355 8221 A5 87			lda :eax+1
 16356 8223 8D 07 A2			sta FW+1
 16357
 16358 				; optimize OK (service.pas), line = 2854
 16359
 16360 8226 AD 08 A2			lda Y
 16361 8229 18 6D FA 9C			add FIRE.Y
 16362 822D A8				tay
 16363 822E AD F9 9C			lda FIRE.X
 16364 8231 18 79 00 C0			add adr.ROW,y
 16365 8235 8D 13 A0			sta BLITZERO.DST
 16366 8238 A9 50			lda #$50
 16367 823A 79 FB C0			adc adr.ROW+251,y
 16368 823D 8D 14 A0			sta BLITZERO.DST+1
 16369 8240 A9 00			lda #$00
 16370 8242 69 00			adc #$00
 16371 8244 8D 15 A0			sta BLITZERO.DST+2
 16372 8247 A9 00			lda #$00
 16373 8249 69 00			adc #$00
 16374 824B 8D 16 A0			sta BLITZERO.DST+3
 16375 824E AD 77 9C			lda SHOOTS.OFS
 16376 8251 18 6D 06 A2			add FW
 16377 8255 8D 0F A0			sta BLITZERO.SRC
 16378 8258 AD 78 9C			lda SHOOTS.OFS+1
 16379 825B 6D 07 A2			adc FW+1
 16380 825E 8D 10 A0			sta BLITZERO.SRC+1
 16381 8261 AD 79 9C			lda SHOOTS.OFS+2
 16382 8264 69 00			adc #$00
 16383 8266 8D 11 A0			sta BLITZERO.SRC+2
 16384 8269 AD 7A 9C			lda SHOOTS.OFS+3
 16385 826C 69 00			adc #$00
 16386 826E 8D 12 A0			sta BLITZERO.SRC+3
 16387 8271 AD 73 9C			lda SHOOTS.WIDTH
 16388 8274 8D 17 A0			sta BLITZERO.SIZE
 16389 8277 AD 74 9C			lda SHOOTS.WIDTH+1
 16390 827A 8D 18 A0			sta BLITZERO.SIZE+1
 16391 827D 20 8F 2B			jsr BLITZERO
 16392
 16393 				; --- ForToDoEpilog
 16394 8280 EE 08 A2			inc Y
 16395 8283 F0 03 4C FC 81		jne l_2F69
 16396 8288			l_2F77
 16397
 16398 				; ------------------------------------------------------------
 16399
 16400 = A206			FW	= DATAORIGIN+$070B
 16401 = A208			Y	= DATAORIGIN+$070D
 16402
 16403 = A206			@VarData	= FW
 16404 = 0003			@VarDataSize	= 3
 16405
 16406 8288			@exit
 16407 					.ifdef @new
 16408 					lda <@VarData
 16409 					sta :ztmp
 16410 					lda >@VarData
 16411 					ldy #@VarDataSize-1
 16412 					jmp @FreeMem
 16413 					els
 16414 8288 60				rts						; ret
 16415 					eif
 16416 				.endl
 16417
 16418 8289			.local	REMOVE_FIRE					; PROCEDURE
 16419
 16420 				; optimize OK (service.pas), line = 2862
 16421
 16422 8289 A9 00			lda #$00
 16423 828B 8D 0A A2			sta Y
 16424 828E AC 75 9C			ldy SHOOTS.HEIGHT
 16425 8291 88				dey
 16426 8292 8C 96 82			sty @FORTMP_2FB4_0
 16427
 16428 8295			l_2FB7
 16429 				; --- ForToDoCondition
 16430 8295 A9 00			lda @FORTMP_2FB4_0::#$00
 16431 8297 CD 0A A2			cmp Y
 16432 829A 90 79			jcc l_2FC5
 16433
 16434 				; optimize OK (service.pas), line = 2866
 16435
 16436 829C AD 0A A2			lda Y
 16437 829F 18 6D FA 9C			add FIRE.Y
 16438 82A3 A8				tay
 16439 82A4 AD F9 9C			lda FIRE.X
 16440 82A7 18 79 00 C0			add adr.ROW,y
 16441 82AB 8D 25 A0			sta BLITROW.DST
 16442 82AE A9 50			lda #$50
 16443 82B0 79 FB C0			adc adr.ROW+251,y
 16444 82B3 8D 26 A0			sta BLITROW.DST+1
 16445 82B6 A9 00			lda #$00
 16446 82B8 69 00			adc #$00
 16447 82BA 8D 27 A0			sta BLITROW.DST+2
 16448 82BD A9 00			lda #$00
 16449 82BF 69 00			adc #$00
 16450 82C1 8D 28 A0			sta BLITROW.DST+3
 16451 82C4 AD 0F 9C			lda PLAYSCREEN.OFS
 16452 82C7 18 6D F9 9C			add FIRE.X
 16453 82CB 85 A1			sta :STACKORIGIN+11
 16454 82CD AD 10 9C			lda PLAYSCREEN.OFS+1
 16455 82D0 69 00			adc #$00
 16456 82D2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16457 82D4 AD 11 9C			lda PLAYSCREEN.OFS+2
 16458 82D7 69 00			adc #$00
 16459 82D9 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16460 82DB AD 12 9C			lda PLAYSCREEN.OFS+3
 16461 82DE 69 00			adc #$00
 16462 82E0 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16463 82E2 A5 A1			lda :STACKORIGIN+11
 16464 82E4 18 79 00 C0			add adr.ROW,y
 16465 82E8 8D 21 A0			sta BLITROW.SRC
 16466 82EB A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16467 82ED 79 FB C0			adc adr.ROW+251,y
 16468 82F0 8D 22 A0			sta BLITROW.SRC+1
 16469 82F3 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16470 82F5 69 00			adc #$00
 16471 82F7 8D 23 A0			sta BLITROW.SRC+2
 16472 82FA A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16473 82FC 69 00			adc #$00
 16474 82FE 8D 24 A0			sta BLITROW.SRC+3
 16475 8301 AD 73 9C			lda SHOOTS.WIDTH
 16476 8304 8D 29 A0			sta BLITROW.SIZE
 16477 8307 AD 74 9C			lda SHOOTS.WIDTH+1
 16478 830A 8D 2A A0			sta BLITROW.SIZE+1
 16479 830D 20 42 2C			jsr BLITROW
 16480
 16481 				; --- ForToDoEpilog
 16482 8310 EE 0A A2			inc Y
 16483 8313 D0 80			jne l_2FB7
 16484 8315			l_2FC5
 16485
 16486 				; ------------------------------------------------------------
 16487
 16488 = A20A			Y	= DATAORIGIN+$070F
 16489
 16490 = A20A			@VarData	= Y
 16491 = 0001			@VarDataSize	= 1
 16492
 16493 8315			@exit
 16494 					.ifdef @new
 16495 					lda <@VarData
 16496 					sta :ztmp
 16497 					lda >@VarData
 16498 					ldy #@VarDataSize-1
 16499 					jmp @FreeMem
 16500 					els
 16501 8315 60				rts						; ret
 16502 					eif
 16503 				.endl
 16504
 16505 8316			.local	CHECK_FIRE					; PROCEDURE
 16506
 16507 				; optimize OK (service.pas), line = 2873
 16508
 16509 8316 AD FC 9C			lda FIRE.AVL
 16510 8319 D0 03 4C 19 85		jeq l_3007
 16511
 16512 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2875
 16513
 16514 831E 20 5E 2A			jsr MOUSECLICK
 16515 8321 E8				inx
 16516 8322 E8				inx
 16517 8323 A0 01			ldy #1
 16518 8325 AD F4 9B			lda MOUSECLICK.RESULT
 16519 8328 C9 01			cmp #$01
 16520 832A F0 01			beq @+
 16521 832C 88				dey
 16522 				@
 16523 832D 98				tya
 16524 832E 2D FC 9C			and FIRE.AVL
 16525 8331 95 95			sta :STACKORIGIN-1,x
 16526 8333 CA				dex
 16527 8334 CA				dex
 16528 8335 A0 01			ldy #1
 16529 8337 AD FB 9C			lda FIRE.SHOT
 16530 833A F0 01			beq @+
 16531 833C 88				dey
 16532 				@
 16533 833D 98				tya
 16534 833E 35 97			and :STACKORIGIN+1,x
 16535 8340 F0 48			jeq l_3027
 16536
 16537 				; optimize OK (service.pas), line = 2877
 16538
 16539 8342 AD 8B 9C			lda VAUS.WIDTH
 16540 8345 38 ED 73 9C			sub SHOOTS.WIDTH
 16541 8349 85 A0			sta :STACKORIGIN+10
 16542 834B A9 00			lda #$00
 16543 834D ED 74 9C			sbc SHOOTS.WIDTH+1
 16544 8350 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16545 8352 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 16546 8354 66 A0			ror :STACKORIGIN+10
 16547 8356 AD 83 9C			lda VAUS.X
 16548 8359 18 65 A0			add :STACKORIGIN+10
 16549 835C 8D F9 9C			sta FIRE.X
 16550
 16551 				; optimize OK (service.pas), line = 2878
 16552
 16553 835F AD 84 9C			lda VAUS.Y
 16554 8362 38 ED 75 9C			sub SHOOTS.HEIGHT
 16555 8366 8D FA 9C			sta FIRE.Y
 16556
 16557 				; optimize OK (service.pas), line = 2879
 16558
 16559 8369 A9 01			lda #$01
 16560 836B 8D FB 9C			sta FIRE.SHOT
 16561
 16562 				; optimize OK (service.pas), line = 2880
 16563
 16564 836E A9 00			lda #$00
 16565 8370 8D FD 9C			sta FIRE.NW
 16566
 16567 				; optimize OK (service.pas), line = 2881
 16568
 16569 8373 A9 BC			lda #$BC
 16570 8375 8D F0 9B			sta BALL_BLOCK_SOUND.A
 16571 8378 A9 02			lda #$02
 16572 837A 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 16573 837D A9 05			lda #$05
 16574 837F 8D F2 9B			sta BALL_BLOCK_SOUND.B
 16575 8382 A9 00			lda #$00
 16576 8384 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 16577 8387 20 5C 2A			jsr BALL_BLOCK_SOUND
 16578 838A			l_3027
 16579
 16580 				; optimize OK (service.pas), line = 2884
 16581
 16582 838A AD FB 9C			lda FIRE.SHOT
 16583 838D D0 03 4C 19 85		jeq l_3061
 16584
 16585 				; optimize OK (service.pas), line = 2886
 16586
 16587 8392 AD FD 9C			lda FIRE.NW
 16588 8395 F0 03			jeq l_306E
 16589 8397 20 89 82			jsr REMOVE_FIRE
 16590 839A			l_306E
 16591
 16592 				; optimize OK (service.pas), line = 2887
 16593
 16594 839A A9 01			lda #$01
 16595 839C 8D FD 9C			sta FIRE.NW
 16596
 16597 				; optimize OK (service.pas), line = 2889
 16598
 16599 839F AD FA 9C			lda FIRE.Y
 16600 83A2 38 E9 04			sub #$04
 16601 83A5 8D FA 9C			sta FIRE.Y
 16602
 16603 				; optimize OK (service.pas), line = 2890
 16604
 16605 83A8 C9 16			cmp #$16
 16606 83AA B0 08			jcs l_3089
 16607 83AC A9 00			lda #$00
 16608 83AE 8D FB 9C			sta FIRE.SHOT
 16609 83B1 4C 19 85			jmp l_3097
 16610 83B4			l_3089
 16611
 16612 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 2893
 16613
 16614 83B4 20 F0 81			jsr PLACE_FIRE
 16615
 16616 				; optimize OK (service.pas), line = 2895
 16617
 16618 83B7 AD FA 9C			lda FIRE.Y
 16619 83BA 38 E9 16			sub #$16
 16620 83BD D0 03 4C 19 85		jeq l_30BE
 16621 83C2 10 03			bpl @+
 16622 83C4 4C 19 85			jmp l_30BE
 16623 				@
 16624 83C7 AD FA 9C			lda FIRE.Y
 16625 83CA 38 E9 16			sub #$16
 16626 83CD 85 A0			sta :STACKORIGIN+10
 16627 83CF A9 00			lda #$00
 16628 83D1 E9 00			sbc #$00
 16629 83D3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16630 83D5 A5 A0			lda :STACKORIGIN+10
 16631 83D7 C9 78			cmp #$78
 16632 83D9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16633 83DB E9 00			sbc #$00
 16634 83DD 50 02			svc
 16635 83DF 49 80			eor #$80
 16636 83E1 30 03 4C 19 85		jpl l_30BE
 16637 				@
 16638
 16639 				; optimize OK (service.pas), line = 2897
 16640
 16641 83E6 AD F9 9C			lda FIRE.X
 16642 83E9 38 E9 09			sub #$09
 16643 83EC 85 9F			sta :STACKORIGIN+9
 16644 83EE A9 00			lda #$00
 16645 83F0 E9 00			sbc #$00
 16646 83F2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16647 83F4 A0 00			ldy #$00
 16648 83F6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16649 83F8 10 01			spl
 16650 83FA 88				dey
 16651 83FB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16652 83FD 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16653 83FF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16654 8401 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16655 8403 66 9F			ror :STACKORIGIN+9
 16656 8405 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16657 8407 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16658 8409 66 9F			ror :STACKORIGIN+9
 16659 840B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16660 840D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16661 840F 66 9F			ror :STACKORIGIN+9
 16662 8411 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16663 8413 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16664 8415 66 9F			ror :STACKORIGIN+9
 16665 8417 A5 9F			lda :STACKORIGIN+9
 16666 8419 8D 0C A2			sta X1
 16667 841C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16668 841E 8D 0D A2			sta X1+1
 16669
 16670 				; optimize OK (service.pas), line = 2898
 16671
 16672 8421 AD FA 9C			lda FIRE.Y
 16673 8424 38 E9 16			sub #$16
 16674 8427 85 9F			sta :STACKORIGIN+9
 16675 8429 A9 00			lda #$00
 16676 842B E9 00			sbc #$00
 16677 842D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16678 842F A0 00			ldy #$00
 16679 8431 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16680 8433 10 01			spl
 16681 8435 88				dey
 16682 8436 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16683 8438 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16684 843A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16685 843C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16686 843E 66 9F			ror :STACKORIGIN+9
 16687 8440 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16688 8442 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16689 8444 66 9F			ror :STACKORIGIN+9
 16690 8446 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16691 8448 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16692 844A 66 9F			ror :STACKORIGIN+9
 16693 844C A5 9F			lda :STACKORIGIN+9
 16694 844E 8D 10 A2			sta Y1
 16695 8451 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16696 8453 8D 11 A2			sta Y1+1
 16697
 16698 				; optimize OK (service.pas), line = 2900
 16699
 16700 8456 AD F9 9C			lda FIRE.X
 16701 8459 18 6D 73 9C			add SHOOTS.WIDTH
 16702 845D 85 9F			sta :STACKORIGIN+9
 16703 845F A9 00			lda #$00
 16704 8461 6D 74 9C			adc SHOOTS.WIDTH+1
 16705 8464 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16706 8466 A9 00			lda #$00
 16707 8468 69 00			adc #$00
 16708 846A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16709 846C A9 00			lda #$00
 16710 846E 69 00			adc #$00
 16711 8470 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16712 8472 A5 9F			lda :STACKORIGIN+9
 16713 8474 38 E9 09			sub #$09
 16714 8477 85 9F			sta :STACKORIGIN+9
 16715 8479 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16716 847B E9 00			sbc #$00
 16717 847D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16718 847F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16719 8481 E9 00			sbc #$00
 16720 8483 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16721 8485 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16722 8487 E9 00			sbc #$00
 16723 8489 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16724 848B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16725 848D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16726 848F 66 9F			ror :STACKORIGIN+9
 16727 8491 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16728 8493 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16729 8495 66 9F			ror :STACKORIGIN+9
 16730 8497 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16731 8499 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16732 849B 66 9F			ror :STACKORIGIN+9
 16733 849D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16734 849F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16735 84A1 66 9F			ror :STACKORIGIN+9
 16736 84A3 A5 9F			lda :STACKORIGIN+9
 16737 84A5 8D 0E A2			sta X2
 16738 84A8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16739 84AA 8D 0F A2			sta X2+1
 16740
 16741 				; optimize OK (service.pas), line = 2901
 16742
 16743 84AD AD 10 A2			lda Y1
 16744 84B0 8D 12 A2			sta Y2
 16745 84B3 AD 11 A2			lda Y1+1
 16746 84B6 8D 13 A2			sta Y2+1
 16747
 16748 				; optimize OK (service.pas), line = 2903
 16749
 16750 84B9 AD 10 A2			lda Y1
 16751 84BC 0A				asl @
 16752 84BD 0A				asl @
 16753 84BE 0A				asl @
 16754 84BF 0A				asl @
 16755 84C0 18 6D 0C A2			add X1
 16756 84C4 A8				tay
 16757 84C5 B9 00 DB			lda adr.WALL,y
 16758 84C8 D0 11			jne l_3127x
 16759 84CA AD 12 A2			lda Y2
 16760 84CD 0A				asl @
 16761 84CE 0A				asl @
 16762 84CF 0A				asl @
 16763 84D0 0A				asl @
 16764 84D1 18 6D 0E A2			add X2
 16765 84D5 A8				tay
 16766 84D6 B9 00 DB			lda adr.WALL,y
 16767 84D9 F0 3E			jeq l_3127
 16768 84DB			l_3127x
 16769
 16770 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2905
 16771
 16772 84DB 20 89 82			jsr REMOVE_FIRE
 16773
 16774 				; optimize OK (service.pas), line = 2906
 16775
 16776 84DE A9 00			lda #$00
 16777 84E0 8D FB 9C			sta FIRE.SHOT
 16778
 16779 				; optimize OK (service.pas), line = 2908
 16780
 16781 84E3 AD 0C A2			lda X1
 16782 84E6 8D 5A A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16783 84E9 AD 0D A2			lda X1+1
 16784 84EC 8D 5B A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16785 84EF AD 10 A2			lda Y1
 16786 84F2 8D 5C A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16787 84F5 AD 11 A2			lda Y1+1
 16788 84F8 8D 5D A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16789 84FB 20 44 5C			jsr SHOOT_BLOCK_WITH_FIRE
 16790
 16791 				; optimize OK (service.pas), line = 2909
 16792
 16793 84FE AD 0E A2			lda X2
 16794 8501 8D 5A A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16795 8504 AD 0F A2			lda X2+1
 16796 8507 8D 5B A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16797 850A AD 12 A2			lda Y2
 16798 850D 8D 5C A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16799 8510 AD 13 A2			lda Y2+1
 16800 8513 8D 5D A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16801 8516 20 44 5C			jsr SHOOT_BLOCK_WITH_FIRE
 16802 8519			l_3097
 16803 8519			l_3127
 16804 8519			l_30BE
 16805 8519			l_3061
 16806 8519			l_3007
 16807
 16808 				; ------------------------------------------------------------
 16809
 16810 = A20C			X1	= DATAORIGIN+$0711
 16811 = A20E			X2	= DATAORIGIN+$0713
 16812 = A210			Y1	= DATAORIGIN+$0715
 16813 = A212			Y2	= DATAORIGIN+$0717
 16814
 16815 = A20C			@VarData	= X1
 16816 = 0008			@VarDataSize	= 8
 16817
 16818 8519			@exit
 16819 					.ifdef @new
 16820 					lda <@VarData
 16821 					sta :ztmp
 16822 					lda >@VarData
 16823 					ldy #@VarDataSize-1
 16824 					jmp @FreeMem
 16825 					els
 16826 8519 60				rts						; ret
 16827 					eif
 16828 				.endl
 16829
 16830 851A			.local	REMOVE_FLUX					; PROCEDURE
 16831
 16832 				; optimize OK (service.pas), line = 2921
 16833
 16834 851A A9 00			lda #$00
 16835 851C 8D 14 A2			sta Y
 16836
 16837 851F			l_314C
 16838 				; --- ForToDoCondition
 16839 851F AC 14 A2			ldy Y
 16840 8522 C0 14			cpy #$14
 16841 8524 B0 6C			jcs l_315A
 16842
 16843 				; optimize OK (service.pas), line = 2923
 16844
 16845 8526 A9 D9			lda #$D9
 16846 8528 79 B0 C0			adc adr.ROW+$B0,y
 16847 852B 8D 25 A0			sta BLITROW.DST
 16848 852E A9 50			lda #$50
 16849 8530 79 AB C1			adc adr.ROW+251+$B0,y
 16850 8533 8D 26 A0			sta BLITROW.DST+1
 16851 8536 A9 00			lda #$00
 16852 8538 69 00			adc #$00
 16853 853A 8D 27 A0			sta BLITROW.DST+2
 16854 853D A9 00			lda #$00
 16855 853F 69 00			adc #$00
 16856 8541 8D 28 A0			sta BLITROW.DST+3
 16857 8544 AD 0F 9C			lda PLAYSCREEN.OFS
 16858 8547 18 69 D9			add #$D9
 16859 854A 85 A1			sta :STACKORIGIN+11
 16860 854C AD 10 9C			lda PLAYSCREEN.OFS+1
 16861 854F 69 00			adc #$00
 16862 8551 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16863 8553 AD 11 9C			lda PLAYSCREEN.OFS+2
 16864 8556 69 00			adc #$00
 16865 8558 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16866 855A AD 12 9C			lda PLAYSCREEN.OFS+3
 16867 855D 69 00			adc #$00
 16868 855F 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16869 8561 A5 A1			lda :STACKORIGIN+11
 16870 8563 18 79 B0 C0			add adr.ROW+$B0,y
 16871 8567 8D 21 A0			sta BLITROW.SRC
 16872 856A A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16873 856C 79 AB C1			adc adr.ROW+251+$B0,y
 16874 856F 8D 22 A0			sta BLITROW.SRC+1
 16875 8572 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16876 8574 69 00			adc #$00
 16877 8576 8D 23 A0			sta BLITROW.SRC+2
 16878 8579 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16879 857B 69 00			adc #$00
 16880 857D 8D 24 A0			sta BLITROW.SRC+3
 16881 8580 A9 08			lda #$08
 16882 8582 8D 29 A0			sta BLITROW.SIZE
 16883 8585 A9 00			lda #$00
 16884 8587 8D 2A A0			sta BLITROW.SIZE+1
 16885 858A 20 42 2C			jsr BLITROW
 16886
 16887 				; --- ForToDoEpilog
 16888 858D EE 14 A2			inc Y
 16889 8590 D0 8D			jne l_314C
 16890 8592			l_315A
 16891
 16892 				; ------------------------------------------------------------
 16893
 16894 = A214			Y	= DATAORIGIN+$0719
 16895
 16896 = A214			@VarData	= Y
 16897 = 0001			@VarDataSize	= 1
 16898
 16899 8592			@exit
 16900 					.ifdef @new
 16901 					lda <@VarData
 16902 					sta :ztmp
 16903 					lda >@VarData
 16904 					ldy #@VarDataSize-1
 16905 					jmp @FreeMem
 16906 					els
 16907 8592 60				rts						; ret
 16908 					eif
 16909 				.endl
 16910
 16911 8593			.local	CHECK_FLUX					; PROCEDURE
 16912
 16913 				; optimize OK (service.pas), line = 2931
 16914
 16915 8593 AD 00 9D			lda SCRFLUXCNT
 16916 8596 8D 16 A2			sta FX
 16917
 16918 				; optimize OK (service.pas), line = 2932
 16919
 16920 8599 AD FF 9C			lda SCRFLUX
 16921 859C D0 03 4C 2F 86		jeq l_3199
 16922
 16923 				; optimize OK (service.pas), line = 2934
 16924
 16925 85A1 A9 00			lda #$00
 16926 85A3 8D 15 A2			sta Y
 16927
 16928 85A6			l_31A3
 16929 				; --- ForToDoCondition
 16930 85A6 AC 15 A2			ldy Y
 16931 85A9 C0 14			cpy #$14
 16932 85AB B0 73			jcs l_31B1
 16933
 16934 				; optimize OK (service.pas), line = 2936
 16935
 16936 85AD A9 D9			lda #$D9
 16937 85AF 79 B0 C0			adc adr.ROW+$B0,y
 16938 85B2 8D 25 A0			sta BLITROW.DST
 16939 85B5 A9 50			lda #$50
 16940 85B7 79 AB C1			adc adr.ROW+251+$B0,y
 16941 85BA 8D 26 A0			sta BLITROW.DST+1
 16942 85BD A9 00			lda #$00
 16943 85BF 69 00			adc #$00
 16944 85C1 8D 27 A0			sta BLITROW.DST+2
 16945 85C4 A9 00			lda #$00
 16946 85C6 69 00			adc #$00
 16947 85C8 8D 28 A0			sta BLITROW.DST+3
 16948 85CB AD 15 A2			lda Y
 16949 85CE 18 6D 16 A2			add FX
 16950 85D2 85 A2			sta :STACKORIGIN+12
 16951 85D4 A9 00			lda #$00
 16952 85D6 69 00			adc #$00
 16953 85D8 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 16954 85DA A9 00			lda #$00
 16955 85DC 06 A2			asl :STACKORIGIN+12
 16956 85DE 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16957 85E0 2A				rol @
 16958 85E1 06 A2			asl :STACKORIGIN+12
 16959 85E3 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16960 85E5 2A				rol @
 16961 85E6 06 A2			asl :STACKORIGIN+12
 16962 85E8 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16963 85EA 2A				rol @
 16964 85EB 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 16965 85ED AD 7F 9C			lda FLUX.OFS
 16966 85F0 18 65 A2			add :STACKORIGIN+12
 16967 85F3 8D 21 A0			sta BLITROW.SRC
 16968 85F6 AD 80 9C			lda FLUX.OFS+1
 16969 85F9 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 16970 85FB 8D 22 A0			sta BLITROW.SRC+1
 16971 85FE AD 81 9C			lda FLUX.OFS+2
 16972 8601 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 16973 8603 8D 23 A0			sta BLITROW.SRC+2
 16974 8606 AD 82 9C			lda FLUX.OFS+3
 16975 8609 69 00			adc #$00
 16976 860B 8D 24 A0			sta BLITROW.SRC+3
 16977 860E A9 08			lda #$08
 16978 8610 8D 29 A0			sta BLITROW.SIZE
 16979 8613 A9 00			lda #$00
 16980 8615 8D 2A A0			sta BLITROW.SIZE+1
 16981 8618 20 42 2C			jsr BLITROW
 16982
 16983 				; --- ForToDoEpilog
 16984 861B EE 15 A2			inc Y
 16985 861E D0 86			jne l_31A3
 16986 8620			l_31B1
 16987
 16988 				; optimize FAIL (0, service.pas), line = 2938
 16989
 16990 8620 EE 00 9D			inc SCRFLUXCNT
 16991
 16992 				; optimize OK (service.pas), line = 2939
 16993
 16994 8623 AD 00 9D			lda SCRFLUXCNT
 16995 8626 C9 15			cmp #$15
 16996 8628 90 05			jcc l_31F0
 16997 862A A9 00			lda #$00
 16998 862C 8D 00 9D			sta SCRFLUXCNT
 16999 862F			l_31F0
 17000 862F			l_3199
 17001
 17002 				; ------------------------------------------------------------
 17003
 17004 = A215			Y	= DATAORIGIN+$071A
 17005 = A216			FX	= DATAORIGIN+$071B
 17006
 17007 = A215			@VarData	= Y
 17008 = 0002			@VarDataSize	= 2
 17009
 17010 862F			@exit
 17011 					.ifdef @new
 17012 					lda <@VarData
 17013 					sta :ztmp
 17014 					lda >@VarData
 17015 					ldy #@VarDataSize-1
 17016 					jmp @FreeMem
 17017 					els
 17018 862F 60				rts						; ret
 17019 					eif
 17020 				.endl
 17021
 17022 8630			.local	VAUS_OUT					; PROCEDURE
 17023
 17024 				; optimize FAIL ('NOSOUND', service.pas), line = 2947
 17025
 17026 8630 20 59 2D			jsr NOSOUND
 17027
 17028 				; optimize OK (service.pas), line = 2949
 17029
 17030 8633 AD DF 9C			lda CUR_PLAYER
 17031 8636 0A				asl @
 17032 8637 0A				asl @
 17033 8638 A8				tay
 17034 8639 B9 C4 9C			lda adr.SCORE.PLAYER,y
 17035 863C 18 69 10			add #$10
 17036 863F 99 C4 9C			sta adr.SCORE.PLAYER,y
 17037 8642 B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 17038 8645 69 27			adc #$27
 17039 8647 99 C5 9C			sta adr.SCORE.PLAYER+1,y
 17040 864A B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 17041 864D 69 00			adc #$00
 17042 864F 99 C6 9C			sta adr.SCORE.PLAYER+2,y
 17043 8652 B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 17044 8655 69 00			adc #$00
 17045 8657 99 C7 9C			sta adr.SCORE.PLAYER+3,y
 17046
 17047 				; optimize OK (service.pas), line = 2950
 17048
 17049 865A A9 00			lda #$00
 17050 865C 8D C2 9C			sta REMAIN_BLK
 17051
 17052 				; optimize OK (service.pas), line = 2952
 17053
 17054 865F AD 83 9C			lda VAUS.X
 17055 8662 8D 1B A2			sta Z
 17056 8665 A9 00			lda #$00
 17057 8667 8D 1C A2			sta Z+1
 17058
 17059 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2954
 17060
 17061 866A 20 B9 35			jsr WAIT_VBL
 17062
 17063 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2955
 17064
 17065 866D 20 22 44			jsr REMOVE_VAUS
 17066
 17067 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2956
 17068
 17069 8670 20 B5 44			jsr PLACE_VAUS
 17070
 17071 				; optimize OK (service.pas), line = 2958
 17072
 17073 8673 AD 1B A2			lda Z
 17074 8676 8D 17 A2			sta X
 17075 8679 AD 1C A2			lda Z+1
 17076 867C 8D 18 A2			sta X+1
 17077 867F AD 1B A2			lda Z
 17078 8682 18 69 2C			add #$2C
 17079 8685 8D 98 86			sta @FORTMP_321B_0
 17080 8688 AD 1C A2			lda Z+1
 17081 868B 69 00			adc #$00
 17082 868D 8D 91 86			sta @FORTMP_321B_1
 17083
 17084 8690			l_321E
 17085 				; --- ForToDoCondition
 17086 8690 A9 00			lda @FORTMP_321B_1::#$00
 17087 8692 CD 18 A2			cmp X+1
 17088 8695 D0 05			bne @+
 17089 8697 A9 00			lda @FORTMP_321B_0::#$00
 17090 8699 CD 17 A2			cmp X
 17091 				@
 17092 869C B0 03 4C 70 87		jcc l_322A
 17093
 17094 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2960
 17095
 17096 86A1 20 B9 35			jsr WAIT_VBL
 17097
 17098 				; optimize OK (service.pas), line = 2962
 17099
 17100 86A4 AD 83 9C			lda VAUS.X
 17101 86A7 8D 85 9C			sta VAUS.OLDX
 17102 86AA A9 00			lda #$00
 17103 86AC 8D 86 9C			sta VAUS.OLDX+1
 17104
 17105 				; optimize OK (service.pas), line = 2963
 17106
 17107 86AF AD 17 A2			lda X
 17108 86B2 8D 83 9C			sta VAUS.X
 17109
 17110 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2964
 17111
 17112 86B5 20 22 44			jsr REMOVE_VAUS
 17113
 17114 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 2965
 17115
 17116 86B8 20 93 85			jsr CHECK_FLUX
 17117
 17118 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2966
 17119
 17120 86BB 20 B5 44			jsr PLACE_VAUS
 17121
 17122 				; optimize OK (service.pas), line = 2968
 17123
 17124 86BE AD 84 9C			lda VAUS.Y
 17125 86C1 8D 19 A2			sta Y
 17126 86C4 A9 00			lda #$00
 17127 86C6 8D 1A A2			sta Y+1
 17128 86C9 AD 84 9C			lda VAUS.Y
 17129 86CC 18 6D 8C 9C			add VAUS.HEIGHT
 17130 86D0 8D E2 86			sta @FORTMP_3249_0
 17131 86D3 A9 00			lda #$00
 17132 86D5 69 00			adc #$00
 17133 86D7 8D DB 86			sta @FORTMP_3249_1
 17134
 17135 86DA			l_324C
 17136 				; --- ForToDoCondition
 17137 86DA A9 00			lda @FORTMP_3249_1::#$00
 17138 86DC CD 1A A2			cmp Y+1
 17139 86DF D0 05			bne @+
 17140 86E1 A9 00			lda @FORTMP_3249_0::#$00
 17141 86E3 CD 19 A2			cmp Y
 17142 				@
 17143 86E6 90 78			jcc l_3258
 17144
 17145 				; optimize OK (service.pas), line = 2970
 17146
 17147 86E8 AC 19 A2			ldy Y
 17148 86EB A9 E1			lda #$E1
 17149 86ED 18 79 00 C0			add adr.ROW,y
 17150 86F1 8D 25 A0			sta BLITROW.DST
 17151 86F4 A9 50			lda #$50
 17152 86F6 79 FB C0			adc adr.ROW+251,y
 17153 86F9 8D 26 A0			sta BLITROW.DST+1
 17154 86FC A9 00			lda #$00
 17155 86FE 69 00			adc #$00
 17156 8700 8D 27 A0			sta BLITROW.DST+2
 17157 8703 A9 00			lda #$00
 17158 8705 69 00			adc #$00
 17159 8707 8D 28 A0			sta BLITROW.DST+3
 17160 870A AD 0F 9C			lda PLAYSCREEN.OFS
 17161 870D 18 69 E1			add #$E1
 17162 8710 85 A1			sta :STACKORIGIN+11
 17163 8712 AD 10 9C			lda PLAYSCREEN.OFS+1
 17164 8715 69 00			adc #$00
 17165 8717 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 17166 8719 AD 11 9C			lda PLAYSCREEN.OFS+2
 17167 871C 69 00			adc #$00
 17168 871E 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 17169 8720 AD 12 9C			lda PLAYSCREEN.OFS+3
 17170 8723 69 00			adc #$00
 17171 8725 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 17172 8727 A5 A1			lda :STACKORIGIN+11
 17173 8729 18 79 00 C0			add adr.ROW,y
 17174 872D 8D 21 A0			sta BLITROW.SRC
 17175 8730 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 17176 8732 79 FB C0			adc adr.ROW+251,y
 17177 8735 8D 22 A0			sta BLITROW.SRC+1
 17178 8738 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 17179 873A 69 00			adc #$00
 17180 873C 8D 23 A0			sta BLITROW.SRC+2
 17181 873F A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 17182 8741 69 00			adc #$00
 17183 8743 8D 24 A0			sta BLITROW.SRC+3
 17184 8746 A9 28			lda #$28
 17185 8748 8D 29 A0			sta BLITROW.SIZE
 17186 874B A9 00			lda #$00
 17187 874D 8D 2A A0			sta BLITROW.SIZE+1
 17188 8750 20 42 2C			jsr BLITROW
 17189
 17190 				; --- ForToDoEpilog
 17191 8753 EE 19 A2			inc Y
 17192 8756 D0 82			jne l_324C
 17193 8758 EE 1A A2			inc Y+1
 17194 875B F0 03 4C DA 86		jne l_324C
 17195 8760			l_3258
 17196
 17197 				; --- ForToDoEpilog
 17198 8760 EE 17 A2			inc X
 17199 8763 F0 03 4C 90 86		jne l_321E
 17200 8768 EE 18 A2			inc X+1
 17201 876B F0 03 4C 90 86		jne l_321E
 17202 8770			l_322A
 17203
 17204 				; ------------------------------------------------------------
 17205
 17206 = A217			X	= DATAORIGIN+$071C
 17207 = A219			Y	= DATAORIGIN+$071E
 17208 = A21B			Z	= DATAORIGIN+$0720
 17209
 17210 = A217			@VarData	= X
 17211 = 0006			@VarDataSize	= 6
 17212
 17213 8770			@exit
 17214 					.ifdef @new
 17215 					lda <@VarData
 17216 					sta :ztmp
 17217 					lda >@VarData
 17218 					ldy #@VarDataSize-1
 17219 					jmp @FreeMem
 17220 					els
 17221 8770 60				rts						; ret
 17222 					eif
 17223 				.endl
 17224
 17225 8771			.local	CHECK_BONUS_TYPE				; PROCEDURE
 17226
 17227 				; optimize OK (service.pas), line = 2980
 17228
 17229 8771 AD 8F 9C			lda VAUS.LETTER
 17230 8774 10 03 4C 27 88		jmi l_3292
 17231 8779 D0 03 4C 27 88		jeq l_3292
 17232
 17233 				; optimize OK (service.pas), line = 2982
 17234
 17235 877E A0 00			ldy #$00
 17236 8780 AD 8F 9C			lda VAUS.LETTER
 17237 8783 10 01			spl
 17238 8785 88				dey
 17239 8786 38 E9 01			sub #$01
 17240 8789 8D F7 9C			sta LETT.LAST
 17241 878C 98				tya
 17242 878D E9 00			sbc #$00
 17243 878F 8D F8 9C			sta LETT.LAST+1
 17244
 17245 				; optimize OK (service.pas), line = 2983
 17246
 17247 8792 AC 25 A2 84 84 AC + 	mwy B2 :bp2
 17248 879C A0 17			ldy #B2.INPLAY-DATAORIGIN
 17249 879E B1 84			lda (:bp2),y
 17250 87A0 F0 0F			jeq l_32A9
 17251 87A2 AD 25 A2			lda B2
 17252 87A5 8D A8 A0			sta REMOVE_BALL.BALL
 17253 87A8 AD 26 A2			lda B2+1
 17254 87AB 8D A9 A0			sta REMOVE_BALL.BALL+1
 17255 87AE 20 FD 34			jsr REMOVE_BALL
 17256 87B1			l_32A9
 17257
 17258 				; optimize OK (service.pas), line = 2984
 17259
 17260 87B1 AC 29 A2 84 84 AC + 	mwy B3 :bp2
 17261 87BB A0 17			ldy #B3.INPLAY-DATAORIGIN
 17262 87BD B1 84			lda (:bp2),y
 17263 87BF F0 0F			jeq l_32BB
 17264 87C1 AD 29 A2			lda B3
 17265 87C4 8D A8 A0			sta REMOVE_BALL.BALL
 17266 87C7 AD 2A A2			lda B3+1
 17267 87CA 8D A9 A0			sta REMOVE_BALL.BALL+1
 17268 87CD 20 FD 34			jsr REMOVE_BALL
 17269 87D0			l_32BB
 17270
 17271 				; optimize OK (service.pas), line = 2985
 17272
 17273 87D0 AC 25 A2 84 84 AC + 	mwy B2 :bp2
 17274 87DA A0 17			ldy #B2.INPLAY-DATAORIGIN
 17275 87DC A9 00			lda #$00
 17276 87DE 91 84			sta (:bp2),y
 17277
 17278 				; optimize OK (service.pas), line = 2986
 17279
 17280 87E0 AC 29 A2 84 84 AC + 	mwy B3 :bp2
 17281 87EA A0 17			ldy #B3.INPLAY-DATAORIGIN
 17282 87EC 91 84			sta (:bp2),y
 17283
 17284 				; optimize OK (service.pas), line = 2987
 17285
 17286 87EE 8D FF 9C			sta SCRFLUX
 17287
 17288 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 2988
 17289
 17290 87F1 20 1A 85			jsr REMOVE_FLUX
 17291
 17292 				; optimize OK (service.pas), line = 2990
 17293
 17294 87F4 AD 8F 9C			lda VAUS.LETTER
 17295 87F7 C9 06			cmp #$06
 17296 87F9 F0 2C			jeq l_32E0
 17297
 17298 				; optimize OK (service.pas), line = 2992
 17299
 17300 87FB AC 21 A2 84 84 AC + 	mwy B1 :bp2
 17301 8805 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 17302 8807 A9 00			lda #$00
 17303 8809 91 84			sta (:bp2),y
 17304
 17305 				; optimize OK (service.pas), line = 2993
 17306
 17307 880B AC 25 A2 84 84 AC + 	mwy B2 :bp2
 17308 8815 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 17309 8817 91 84			sta (:bp2),y
 17310
 17311 				; optimize OK (service.pas), line = 2994
 17312
 17313 8819 AC 29 A2 84 84 AC + 	mwy B3 :bp2
 17314 8823 A0 18			ldy #B3.LAUNCH-DATAORIGIN
 17315 8825 91 84			sta (:bp2),y
 17316 8827			l_32E0
 17317 8827			l_3292
 17318
 17319 				; optimize OK (service.pas), line = 2998
 17320
 17321 8827 AD 8F 9C			lda VAUS.LETTER
 17322 882A 8D 2F A2			sta @CASETMP_000A
 17323 882D C9 01			cmp #$01
 17324 882F D0 4D			jne l_32FC
 17325 				@
 17326
 17327 				; optimize OK (service.pas), line = 3001
 17328
 17329 8831 AD FB 9C			lda FIRE.SHOT
 17330 8834 F0 03			jeq l_3308
 17331 8836 20 89 82			jsr REMOVE_FIRE
 17332 8839			l_3308
 17333
 17334 				; optimize OK (service.pas), line = 3002
 17335
 17336 8839 AD 2B 9C 8D 13 9C + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 17337
 17338 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3003
 17339
 17340 8869 20 58 43			jsr MODIFY_VAUS
 17341
 17342 				; optimize OK (service.pas), line = 3004
 17343
 17344 886C A9 00			lda #$00
 17345 886E 8D 8F 9C			sta VAUS.LETTER
 17346
 17347 				; optimize OK (service.pas), line = 3005
 17348
 17349 8871 A9 01			lda #$01
 17350 8873 8D FC 9C			sta FIRE.AVL
 17351
 17352 				; optimize OK (service.pas), line = 3006
 17353
 17354 8876 A9 00			lda #$00
 17355 8878 8D FB 9C			sta FIRE.SHOT
 17356 887B 4C AC 8A			jmp a_000A
 17357 887E			l_32FC
 17358 887E C9 02			cmp #$02
 17359 8880 D0 46			jne l_3322
 17360
 17361 				; optimize OK (service.pas), line = 3010
 17362
 17363 8882 AD FB 9C			lda FIRE.SHOT
 17364 8885 F0 03			jeq l_332E
 17365 8887 20 89 82			jsr REMOVE_FIRE
 17366 888A			l_332E
 17367
 17368 				; optimize OK (service.pas), line = 3011
 17369
 17370 888A AD 23 9C 8D 13 9C + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 17371
 17372 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3012
 17373
 17374 88BA 20 58 43			jsr MODIFY_VAUS
 17375
 17376 				; optimize OK (service.pas), line = 3013
 17377
 17378 88BD A9 00			lda #$00
 17379 88BF 8D 8F 9C			sta VAUS.LETTER
 17380
 17381 				; optimize OK (service.pas), line = 3014
 17382
 17383 88C2 8D FC 9C			sta FIRE.AVL
 17384 88C5 4C AC 8A			jmp a_000A
 17385 88C8			l_3322
 17386 88C8 C9 03			cmp #$03
 17387 88CA D0 4B			jne l_3344
 17388
 17389 				; optimize OK (service.pas), line = 3018
 17390
 17391 88CC AD FB 9C			lda FIRE.SHOT
 17392 88CF F0 03			jeq l_3350
 17393 88D1 20 89 82			jsr REMOVE_FIRE
 17394 88D4			l_3350
 17395
 17396 				; optimize OK (service.pas), line = 3019
 17397
 17398 88D4 AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17399
 17400 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3020
 17401
 17402 8904 20 58 43			jsr MODIFY_VAUS
 17403
 17404 				; optimize OK (service.pas), line = 3021
 17405
 17406 8907 A9 00			lda #$00
 17407 8909 8D 8F 9C			sta VAUS.LETTER
 17408
 17409 				; optimize OK (service.pas), line = 3022
 17410
 17411 890C 8D FC 9C			sta FIRE.AVL
 17412
 17413 				; optimize OK (service.pas), line = 3023
 17414
 17415 890F A9 01			lda #$01
 17416 8911 8D FF 9C			sta SCRFLUX
 17417 8914 4C AC 8A			jmp a_000A
 17418 8917			l_3344
 17419 8917 C9 04			cmp #$04
 17420 8919 D0 3E			jne l_336A
 17421
 17422 				; optimize OK (service.pas), line = 3027
 17423
 17424 891B AD FB 9C			lda FIRE.SHOT
 17425 891E F0 03			jeq l_3376
 17426 8920 20 89 82			jsr REMOVE_FIRE
 17427 8923			l_3376
 17428
 17429 				; optimize OK (service.pas), line = 3028
 17430
 17431 8923 AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17432
 17433 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3029
 17434
 17435 8953 20 58 43			jsr MODIFY_VAUS
 17436 				; optimize OK (service.pas), line = 3030
 17437 8956 4C F0 89			jmp s_33B3
 17438 8959			l_336A
 17439 8959 C9 05			cmp #$05
 17440 895B F0 03 4C F3 89		jne l_3388
 17441
 17442 				; optimize OK (service.pas), line = 3034
 17443
 17444 8960 AD FB 9C			lda FIRE.SHOT
 17445 8963 F0 03			jeq l_3394
 17446 8965 20 89 82			jsr REMOVE_FIRE
 17447 8968			l_3394
 17448
 17449 				; optimize OK (service.pas), line = 3035
 17450
 17451 8968 AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17452
 17453 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3036
 17454
 17455 8998 20 58 43			jsr MODIFY_VAUS
 17456
 17457 				; optimize OK (service.pas), line = 3037
 17458
 17459 899B A9 00			lda #$00
 17460 899D 8D 8F 9C			sta VAUS.LETTER
 17461
 17462 				; optimize OK (service.pas), line = 3038
 17463
 17464 89A0 AC 21 A2 84 84 AC + 	mwy B1 :bp2
 17465 89AA A0 0C			ldy #B1.SPEED-DATAORIGIN
 17466 89AC B1 84			lda (:bp2),y
 17467 89AE 38 E9 F4			sub #$F4
 17468 89B1 8D 42 A0			sta MAX.A
 17469 89B4 C8				iny
 17470 89B5 B1 84			lda (:bp2),y
 17471 89B7 E9 01			sbc #$01
 17472 89B9 8D 43 A0			sta MAX.A+1
 17473 89BC A9 64			lda #$64
 17474 89BE 8D 44 A0			sta MAX.B
 17475 89C1 A9 00			lda #$00
 17476 89C3 8D 45 A0			sta MAX.B+1
 17477 89C6 20 5B 2D			jsr MAX
 17478 89C9 AD 46 A0			lda MAX.RESULT
 17479 89CC 8D 2D A2			sta X
 17480 89CF AD 47 A0			lda MAX.RESULT+1
 17481 89D2 8D 2E A2			sta X+1
 17482
 17483 				; optimize OK (service.pas), line = 3039
 17484
 17485 89D5 AD 21 A2			lda B1
 17486 89D8 8D B3 A0			sta SET_BALL_SPEED.BALL
 17487 89DB AD 22 A2			lda B1+1
 17488 89DE 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 17489 89E1 AD 2D A2			lda X
 17490 89E4 8D B7 A0			sta SET_BALL_SPEED.SPEED
 17491 89E7 AD 2E A2			lda X+1
 17492 89EA 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 17493 89ED 20 9F 36			jsr SET_BALL_SPEED
 17494 89F0			s_33B3
 17495 				; optimize OK (service.pas), line = 3040
 17496 89F0 4C 32 8A			jmp s_33D1
 17497 89F3			l_3388
 17498 89F3 C9 06			cmp #$06
 17499 89F5 D0 3E			jne l_33BA
 17500
 17501 				; optimize OK (service.pas), line = 3044
 17502
 17503 89F7 AD FB 9C			lda FIRE.SHOT
 17504 89FA F0 03			jeq l_33C6
 17505 89FC 20 89 82			jsr REMOVE_FIRE
 17506 89FF			l_33C6
 17507
 17508 				; optimize OK (service.pas), line = 3045
 17509
 17510 89FF AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17511
 17512 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3046
 17513
 17514 8A2F 20 58 43			jsr MODIFY_VAUS
 17515 8A32			s_33D1
 17516 				; optimize OK (service.pas), line = 3047
 17517 8A32 4C A7 8A			jmp s_3401
 17518 8A35			l_33BA
 17519 8A35 C9 07			cmp #$07
 17520 8A37 D0 73			jne l_33D8
 17521
 17522 				; optimize OK (service.pas), line = 3051
 17523
 17524 8A39 AD FB 9C			lda FIRE.SHOT
 17525 8A3C F0 03			jeq l_33E4
 17526 8A3E 20 89 82			jsr REMOVE_FIRE
 17527 8A41			l_33E4
 17528
 17529 				; optimize OK (service.pas), line = 3052
 17530
 17531 8A41 AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17532
 17533 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3053
 17534
 17535 8A71 20 58 43			jsr MODIFY_VAUS
 17536
 17537 				; optimize OK (service.pas), line = 3054
 17538
 17539 8A74 A9 00			lda #$00
 17540 8A76 8D 8F 9C			sta VAUS.LETTER
 17541
 17542 				; optimize OK (service.pas), line = 3055
 17543
 17544 8A79 AC DF 9C			ldy CUR_PLAYER
 17545 8A7C B9 D3 9C			lda adr.SCORE.LIVES,y
 17546 8A7F 18 69 01			add #$01
 17547 8A82 99 D3 9C			sta adr.SCORE.LIVES,y
 17548
 17549 				; optimize OK (service.pas), line = 3056
 17550
 17551 8A85 8D F5 A1			sta PLOT_LIVES.LIVES
 17552 8A88 A9 00			lda #$00
 17553 8A8A 8D F6 A1			sta PLOT_LIVES.LIVES+1
 17554 8A8D 20 18 7F			jsr PLOT_LIVES
 17555
 17556 				; optimize OK (service.pas), line = 3057
 17557
 17558 8A90 A9 D0			lda #$D0
 17559 8A92 8D F0 9B			sta BALL_BLOCK_SOUND.A
 17560 8A95 A9 07			lda #$07
 17561 8A97 8D F1 9B			sta BALL_BLOCK_SOUND.A+1
 17562 8A9A A9 0A			lda #$0A
 17563 8A9C 8D F2 9B			sta BALL_BLOCK_SOUND.B
 17564 8A9F A9 00			lda #$00
 17565 8AA1 8D F3 9B			sta BALL_BLOCK_SOUND.B+1
 17566 8AA4 20 5C 2A			jsr BALL_BLOCK_SOUND
 17567 8AA7			s_3401
 17568
 17569 				; optimize OK (service.pas), line = 3058
 17570
 17571 8AA7 A9 00			lda #$00
 17572 8AA9 8D FC 9C			sta FIRE.AVL
 17573 8AAC			l_33D8
 17574 8AAC			a_000A
 17575
 17576 				; ------------------------------------------------------------
 17577
 17578 = A221			B1	= DATAORIGIN+$0726
 17579 = 9AFB			B1.X	= DATAORIGIN+$0000
 17580 = 9AFD			B1.Y	= DATAORIGIN+$0002
 17581 = 9AFF			B1.FINEX	= DATAORIGIN+$0004
 17582 = 9B01			B1.FINEY	= DATAORIGIN+$0006
 17583 = 9B03			B1.OLDX	= DATAORIGIN+$0008
 17584 = 9B05			B1.OLDY	= DATAORIGIN+$000A
 17585 = 9B07			B1.SPEED	= DATAORIGIN+$000C
 17586 = 9B09			B1.FINESPEED	= DATAORIGIN+$000E
 17587 = 9B0B			B1.SPEEDX	= DATAORIGIN+$0010
 17588 = 9B0D			B1.SPEEDY	= DATAORIGIN+$0012
 17589 = 9B0F			B1.SBD	= DATAORIGIN+$0014
 17590 = 9B11			B1.BRWHIT	= DATAORIGIN+$0016
 17591 = 9B12			B1.INPLAY	= DATAORIGIN+$0017
 17592 = 9B13			B1.LAUNCH	= DATAORIGIN+$0018
 17593 = 9B14			B1.ONVAUS	= DATAORIGIN+$0019
 17594 = 9B15			B1.STM	= DATAORIGIN+$001A
 17595 = A225			B2	= DATAORIGIN+$072A
 17596 = 9AFB			B2.X	= DATAORIGIN+$0000
 17597 = 9AFD			B2.Y	= DATAORIGIN+$0002
 17598 = 9AFF			B2.FINEX	= DATAORIGIN+$0004
 17599 = 9B01			B2.FINEY	= DATAORIGIN+$0006
 17600 = 9B03			B2.OLDX	= DATAORIGIN+$0008
 17601 = 9B05			B2.OLDY	= DATAORIGIN+$000A
 17602 = 9B07			B2.SPEED	= DATAORIGIN+$000C
 17603 = 9B09			B2.FINESPEED	= DATAORIGIN+$000E
 17604 = 9B0B			B2.SPEEDX	= DATAORIGIN+$0010
 17605 = 9B0D			B2.SPEEDY	= DATAORIGIN+$0012
 17606 = 9B0F			B2.SBD	= DATAORIGIN+$0014
 17607 = 9B11			B2.BRWHIT	= DATAORIGIN+$0016
 17608 = 9B12			B2.INPLAY	= DATAORIGIN+$0017
 17609 = 9B13			B2.LAUNCH	= DATAORIGIN+$0018
 17610 = 9B14			B2.ONVAUS	= DATAORIGIN+$0019
 17611 = 9B15			B2.STM	= DATAORIGIN+$001A
 17612 = A229			B3	= DATAORIGIN+$072E
 17613 = 9AFB			B3.X	= DATAORIGIN+$0000
 17614 = 9AFD			B3.Y	= DATAORIGIN+$0002
 17615 = 9AFF			B3.FINEX	= DATAORIGIN+$0004
 17616 = 9B01			B3.FINEY	= DATAORIGIN+$0006
 17617 = 9B03			B3.OLDX	= DATAORIGIN+$0008
 17618 = 9B05			B3.OLDY	= DATAORIGIN+$000A
 17619 = 9B07			B3.SPEED	= DATAORIGIN+$000C
 17620 = 9B09			B3.FINESPEED	= DATAORIGIN+$000E
 17621 = 9B0B			B3.SPEEDX	= DATAORIGIN+$0010
 17622 = 9B0D			B3.SPEEDY	= DATAORIGIN+$0012
 17623 = 9B0F			B3.SBD	= DATAORIGIN+$0014
 17624 = 9B11			B3.BRWHIT	= DATAORIGIN+$0016
 17625 = 9B12			B3.INPLAY	= DATAORIGIN+$0017
 17626 = 9B13			B3.LAUNCH	= DATAORIGIN+$0018
 17627 = 9B14			B3.ONVAUS	= DATAORIGIN+$0019
 17628 = 9B15			B3.STM	= DATAORIGIN+$001A
 17629 = A22D			X	= DATAORIGIN+$0732
 17630 = A22F			@CASETMP_000A	= DATAORIGIN+$0734
 17631
 17632 = A221			@VarData	= B1
 17633 = 0009			@VarDataSize	= 9
 17634
 17635 8AAC			@exit
 17636 					.ifdef @new
 17637 					lda <@VarData
 17638 					sta :ztmp
 17639 					lda >@VarData
 17640 					ldy #@VarDataSize-1
 17641 					jmp @FreeMem
 17642 					els
 17643 8AAC 60				rts						; ret
 17644 					eif
 17645 				.endl
 17646
 17647 8AAD			.local	DEVIATE_BALL					; PROCEDURE
 17648
 17649 				; --- RepeatUntilProlog
 17650 8AAD			l_340F
 17651
 17652 				; optimize OK (service.pas), line = 3071
 17653
 17654 8AAD AD 30 A2			lda BALL
 17655 8AB0 8D CB A0			sta GET_BALL_DIRECTION.BALL
 17656 8AB3 AD 31 A2			lda BALL+1
 17657 8AB6 8D CC A0			sta GET_BALL_DIRECTION.BALL+1
 17658 8AB9 20 44 3A			jsr GET_BALL_DIRECTION
 17659 8ABC E8				inx
 17660 8ABD AD CF A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 17661 8AC2 AD D0 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17662 8AC7 A9 1E			lda #$1E
 17663 8AC9 20 24 25			jsr SYSTEM.RANDOM.@010180000
 17664 8ACC E8				inx
 17665 8ACD AD 40 9B 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 17666 8AD2 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17667 8AD6 20 B5 10			jsr addAX_CX
 17668 8AD9 B5 95			lda :STACKORIGIN-1,x
 17669 8ADB 38 E9 0F			sub #$0F
 17670 8ADE 8D 34 A2			sta TEMP
 17671 8AE1 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 17672 8AE3 E9 00			sbc #$00
 17673 8AE5 8D 35 A2			sta TEMP+1
 17674 8AE8 CA				dex
 17675 8AE9 CA				dex
 17676
 17677 				; optimize OK (service.pas), line = 3072
 17678
 17679 8AEA A9 5A			lda #$5A
 17680 8AEC 85 8E			sta @SMALLINT.MOD.B
 17681 8AEE A9 00			lda #$00
 17682 8AF0 85 8F			sta @SMALLINT.MOD.B+1
 17683 8AF2 AD 34 A2			lda TEMP
 17684 8AF5 85 86			sta @SMALLINT.MOD.A
 17685 8AF7 AD 35 A2			lda TEMP+1
 17686 8AFA 85 87			sta @SMALLINT.MOD.A+1
 17687 8AFC 20 68 12			jsr @SMALLINT.MOD
 17688 8AFF A5 92			lda @SMALLINT.MOD.RESULT
 17689 8B01 C9 1F			cmp #$1F
 17690 8B03 A5 93			lda @SMALLINT.MOD.RESULT+1
 17691 8B05 E9 00			sbc #$00
 17692 8B07 50 02			svc
 17693 8B09 49 80			eor #$80
 17694 8B0B 30 A0			jmi l_340F
 17695 8B0D A9 5A			lda #$5A
 17696 8B0F 85 8E			sta @SMALLINT.MOD.B
 17697 8B11 A9 00			lda #$00
 17698 8B13 85 8F			sta @SMALLINT.MOD.B+1
 17699 8B15 AD 34 A2			lda TEMP
 17700 8B18 85 86			sta @SMALLINT.MOD.A
 17701 8B1A AD 35 A2			lda TEMP+1
 17702 8B1D 85 87			sta @SMALLINT.MOD.A+1
 17703 8B1F 20 68 12			jsr @SMALLINT.MOD
 17704 8B22 A5 92			lda @SMALLINT.MOD.RESULT
 17705 8B24 C9 3C			cmp #$3C
 17706 8B26 A5 93			lda @SMALLINT.MOD.RESULT+1
 17707 8B28 E9 00			sbc #$00
 17708 8B2A 50 02			svc
 17709 8B2C 49 80			eor #$80
 17710 8B2E 30 03 4C AD 8A		jpl l_340F
 17711
 17712 				; optimize OK (service.pas), line = 3074
 17713
 17714 8B33 AD 30 A2			lda BALL
 17715 8B36 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 17716 8B39 AD 31 A2			lda BALL+1
 17717 8B3C 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 17718 8B3F AD 34 A2			lda TEMP
 17719 8B42 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 17720 8B45 AD 35 A2			lda TEMP+1
 17721 8B48 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 17722 8B4B 20 B9 38			jsr SET_BALL_DIRECTION
 17723
 17724 				; optimize OK (service.pas), line = 3075
 17725
 17726 8B4E AC 30 A2 84 84 AC + 	mwy BALL :bp2
 17727 8B58 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17728 8B5A B1 84			lda (:bp2),y
 17729 8B5C 8D B7 A0			sta SET_BALL_SPEED.SPEED
 17730 8B5F C8				iny
 17731 8B60 B1 84			lda (:bp2),y
 17732 8B62 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 17733 8B65 AD 30 A2			lda BALL
 17734 8B68 8D B3 A0			sta SET_BALL_SPEED.BALL
 17735 8B6B AD 31 A2			lda BALL+1
 17736 8B6E 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 17737 8B71 20 9F 36			jsr SET_BALL_SPEED
 17738
 17739 				; optimize OK (service.pas), line = 3076
 17740
 17741 8B74 AC 30 A2 84 84 AC + 	mwy BALL :bp2
 17742 8B7E A0 14			ldy #BALL.SBD-DATAORIGIN
 17743 8B80 A9 00			lda #$00
 17744 8B82 91 84			sta (:bp2),y
 17745 8B84 C8				iny
 17746 8B85 91 84			sta (:bp2),y
 17747
 17748 				; ------------------------------------------------------------
 17749
 17750 = A230			BALL	= DATAORIGIN+$0735
 17751 = 9AFB			BALL.X	= DATAORIGIN+$0000
 17752 = 9AFD			BALL.Y	= DATAORIGIN+$0002
 17753 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
 17754 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
 17755 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
 17756 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
 17757 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
 17758 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
 17759 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
 17760 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
 17761 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
 17762 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
 17763 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
 17764 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
 17765 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
 17766 = 9B15			BALL.STM	= DATAORIGIN+$001A
 17767 = A234			TEMP	= DATAORIGIN+$0739
 17768
 17769 = A230			@VarData	= BALL
 17770 = 0004			@VarDataSize	= 4
 17771
 17772 8B87			@exit
 17773 					.ifdef @new
 17774 					lda <@VarData
 17775 					sta :ztmp
 17776 					lda >@VarData
 17777 					ldy #@VarDataSize-1
 17778 					jmp @FreeMem
 17779 					els
 17780 8B87 60				rts						; ret
 17781 					eif
 17782 				.endl
 17783
 17784 8B88			.local	BOUNCEBALL					; FUNCTION
 17785
 17786 8B88 4C FD 8C			jmp l_344F
 17787
 17788 8B8B			.local	CHECK_BALL					; PROCEDURE
 17789
 17790 				; optimize OK (service.pas), line = 3106
 17791
 17792 8B8B AC 95 A2 84 84 AC + 	mwy BALL :bp2
 17793 8B95 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17794 8B97 B1 84			lda (:bp2),y
 17795 8B99 F0 65			jeq l_345E
 17796
 17797 				; optimize OK (service.pas), line = 3109
 17798
 17799 8B9B A0 02			ldy #BALL.Y-DATAORIGIN
 17800 8B9D B1 84			lda (:bp2),y
 17801 8B9F C8				iny
 17802 8BA0 C9 16			cmp #$16
 17803 8BA2 B1 84			lda (:bp2),y
 17804 8BA4 E9 00			sbc #$00
 17805 8BA6 50 02			svc
 17806 8BA8 49 80			eor #$80
 17807 8BAA 30 20			jmi l_347B
 17808 8BAC A0 02			ldy #BALL.Y-DATAORIGIN
 17809 8BAE B1 84			lda (:bp2),y
 17810 8BB0 C8				iny
 17811 8BB1 C9 8E			cmp #$8E
 17812 8BB3 B1 84			lda (:bp2),y
 17813 8BB5 E9 00			sbc #$00
 17814 8BB7 50 02			svc
 17815 8BB9 49 80			eor #$80
 17816 8BBB 10 0F			jpl l_347B
 17817
 17818 				; optimize OK (service.pas), line = 3110
 17819
 17820 8BBD AD 95 A2			lda BALL
 17821 8BC0 8D 5F A1			sta BALL_HIT_BLOCK.BALL
 17822 8BC3 AD 96 A2			lda BALL+1
 17823 8BC6 8D 60 A1			sta BALL_HIT_BLOCK.BALL+1
 17824 8BC9 20 5F 5D			jsr BALL_HIT_BLOCK
 17825 8BCC			l_347B
 17826
 17827 				; optimize OK (service.pas), line = 3112
 17828
 17829 8BCC AD 95 A2			lda BALL
 17830 8BCF 8D AF A0			sta SET_BALL.BALL
 17831 8BD2 AD 96 A2			lda BALL+1
 17832 8BD5 8D B0 A0			sta SET_BALL.BALL+1
 17833 8BD8 20 BA 35			jsr SET_BALL
 17834
 17835 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3113
 17836
 17837 8BDB E8				inx
 17838 8BDC AD 95 A2 95 96		mva BALL :STACKORIGIN,x
 17839 8BE1 AD 96 A2 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 17840 8BE6 20 51 3C			jsr BALL_SPEED
 17841 8BE9 AC 95 A2 84 84 AC + 	mwy BALL :bp2
 17842 8BF3 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17843 8BF5 AD F2 A0			lda BALL_SPEED.RESULT
 17844 8BF8 91 84			sta (:bp2),y
 17845 8BFA C8				iny
 17846 8BFB AD F3 A0			lda BALL_SPEED.RESULT+1
 17847 8BFE 91 84			sta (:bp2),y
 17848 8C00			l_345E
 17849
 17850 				; ------------------------------------------------------------
 17851
 17852 = A295			BALL	= DATAORIGIN+$079A
 17853 = 9AFB			BALL.X	= DATAORIGIN+$0000
 17854 = 9AFD			BALL.Y	= DATAORIGIN+$0002
 17855 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
 17856 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
 17857 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
 17858 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
 17859 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
 17860 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
 17861 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
 17862 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
 17863 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
 17864 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
 17865 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
 17866 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
 17867 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
 17868 = 9B15			BALL.STM	= DATAORIGIN+$001A
 17869
 17870 = A295			@VarData	= BALL
 17871 = 0002			@VarDataSize	= 2
 17872
 17873 8C00			@exit
 17874 					.ifdef @new
 17875 					lda <@VarData
 17876 					sta :ztmp
 17877 					lda >@VarData
 17878 					ldy #@VarDataSize-1
 17879 					jmp @FreeMem
 17880 					els
 17881 8C00 60				rts						; ret
 17882 					eif
 17883 				.endl
 17884
 17885 8C01			.local	TEST_BALL					; PROCEDURE
 17886
 17887 				; optimize OK (service.pas), line = 3121
 17888
 17889 8C01 AC 99 A2 84 84 AC + 	mwy BALL :bp2
 17890 8C0B A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17891 8C0D B1 84			lda (:bp2),y
 17892 8C0F D0 03 4C FC 8C		jeq l_349C
 17893
 17894 				; optimize OK (service.pas), line = 3123
 17895
 17896 8C14 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17897 8C16 B1 84			lda (:bp2),y
 17898 8C18 18 69 01			add #$01
 17899 8C1B 91 84			sta (:bp2),y
 17900 8C1D C8				iny
 17901 8C1E B1 84			lda (:bp2),y
 17902 8C20 69 00			adc #$00
 17903 8C22 91 84			sta (:bp2),y
 17904
 17905 				; optimize OK (service.pas), line = 3125
 17906
 17907 8C24 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17908 8C26 B1 84			lda (:bp2),y
 17909 8C28 85 9F			sta :STACKORIGIN+9
 17910 8C2A C8				iny
 17911 8C2B B1 84			lda (:bp2),y
 17912 8C2D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17913 8C2F AD E5 9C			lda LV
 17914 8C32 0A				asl @
 17915 8C33 A8				tay
 17916 8C34 B9 A1 10			lda adr.LEVEL,y
 17917 8C37 85 A0			sta :STACKORIGIN+10
 17918 8C39 B9 A2 10			lda adr.LEVEL+1,y
 17919 8C3C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 17920 8C3E A0 00			ldy #$00
 17921 8C40 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17922 8C42 10 01			spl
 17923 8C44 88				dey
 17924 8C45 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17925 8C47 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 17926 8C49 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 17927 8C4B				.LOCAL
 17928 8C4B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 17929 8C4D 38 E9 00			sub #$00
 17930 8C50 D0 1C			bne L4
 17931 8C52 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 17932 8C54 C9 00			cmp #$00
 17933 8C56 D0 0A			bne L1
 17934 8C58 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17935 8C5A C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 17936 8C5C D0 04			bne L1
 17937 8C5E A5 9F			lda :STACKORIGIN+9
 17938 8C60 C5 A0			cmp :STACKORIGIN+10
 17939 8C62 F0 10		L1	beq L5
 17940 8C64 B0 04			bcs L3
 17941 8C66 A9 FF			lda #$FF
 17942 8C68 D0 0A			bne L5
 17943 8C6A A9 01		L3	lda #$01
 17944 8C6C D0 06			bne L5
 17945 8C6E 50 04		L4	bvc L5
 17946 8C70 49 FF			eor #$FF
 17947 8C72 09 01			ora #$01
 17948 8C74			L5
 17949 					.ENDL
 17950 8C74 30 48			jmi l_34B2
 17951 8C76 F0 46			jeq l_34B2
 17952
 17953 				; optimize OK (service.pas), line = 3127
 17954
 17955 8C78 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17956 8C7A A9 00			lda #$00
 17957 8C7C 91 84			sta (:bp2),y
 17958 8C7E C8				iny
 17959 8C7F 91 84			sta (:bp2),y
 17960
 17961 				; optimize OK (service.pas), line = 3130
 17962
 17963 8C81 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17964 8C83 B1 84			lda (:bp2),y
 17965 8C85 C8				iny
 17966 8C86 C9 D0			cmp #$D0
 17967 8C88 B1 84			lda (:bp2),y
 17968 8C8A E9 07			sbc #$07
 17969 8C8C 50 02			svc
 17970 8C8E 49 80			eor #$80
 17971 8C90 10 2C			jpl l_34C8
 17972
 17973 				; optimize OK (service.pas), line = 3132
 17974
 17975 8C92 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17976 8C94 B1 84			lda (:bp2),y
 17977 8C96 18 69 0A			add #$0A
 17978 8C99 91 84			sta (:bp2),y
 17979 8C9B C8				iny
 17980 8C9C B1 84			lda (:bp2),y
 17981 8C9E 69 00			adc #$00
 17982 8CA0 91 84			sta (:bp2),y
 17983
 17984 				; optimize OK (service.pas), line = 3133
 17985
 17986 8CA2 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17987 8CA4 B1 84			lda (:bp2),y
 17988 8CA6 8D B7 A0			sta SET_BALL_SPEED.SPEED
 17989 8CA9 C8				iny
 17990 8CAA B1 84			lda (:bp2),y
 17991 8CAC 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 17992 8CAF AD 99 A2			lda BALL
 17993 8CB2 8D B3 A0			sta SET_BALL_SPEED.BALL
 17994 8CB5 AD 9A A2			lda BALL+1
 17995 8CB8 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 17996 8CBB 20 9F 36			jsr SET_BALL_SPEED
 17997 8CBE			l_34C8
 17998 8CBE			l_34B2
 17999
 18000 				; optimize OK (service.pas), line = 3137
 18001
 18002 8CBE AC 99 A2 84 84 AC + 	mwy BALL :bp2
 18003 8CC8 A0 14			ldy #BALL.SBD-DATAORIGIN
 18004 8CCA B1 84			lda (:bp2),y
 18005 8CCC 18 69 01			add #$01
 18006 8CCF 91 84			sta (:bp2),y
 18007 8CD1 C8				iny
 18008 8CD2 B1 84			lda (:bp2),y
 18009 8CD4 69 00			adc #$00
 18010 8CD6 91 84			sta (:bp2),y
 18011
 18012 				; optimize OK (service.pas), line = 3141
 18013
 18014 8CD8 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 18015 8CDA B1 84			lda (:bp2),y
 18016 8CDC C9 02			cmp #$02
 18017 8CDE D0 05			bne @+
 18018 8CE0 88				dey
 18019 8CE1 B1 84			lda (:bp2),y
 18020 8CE3 C9 58			cmp #$58
 18021 				@
 18022 8CE5 90 15			jcc l_34F0
 18023 				@
 18024 8CE7 A0 00			ldy #$00
 18025 8CE9 B1 84			lda (:bp2),y
 18026 8CEB 10 0F			jpl l_34F0
 18027 				@
 18028
 18029 				; optimize OK (service.pas), line = 3142
 18030
 18031 8CED AD 99 A2			lda BALL
 18032 8CF0 8D 30 A2			sta DEVIATE_BALL.BALL
 18033 8CF3 AD 9A A2			lda BALL+1
 18034 8CF6 8D 31 A2			sta DEVIATE_BALL.BALL+1
 18035 8CF9 20 AD 8A			jsr DEVIATE_BALL
 18036 8CFC			l_34F0
 18037 8CFC			l_349C
 18038
 18039 				; ------------------------------------------------------------
 18040
 18041 = A299			BALL	= DATAORIGIN+$079E
 18042 = 9AFB			BALL.X	= DATAORIGIN+$0000
 18043 = 9AFD			BALL.Y	= DATAORIGIN+$0002
 18044 = 9AFF			BALL.FINEX	= DATAORIGIN+$0004
 18045 = 9B01			BALL.FINEY	= DATAORIGIN+$0006
 18046 = 9B03			BALL.OLDX	= DATAORIGIN+$0008
 18047 = 9B05			BALL.OLDY	= DATAORIGIN+$000A
 18048 = 9B07			BALL.SPEED	= DATAORIGIN+$000C
 18049 = 9B09			BALL.FINESPEED	= DATAORIGIN+$000E
 18050 = 9B0B			BALL.SPEEDX	= DATAORIGIN+$0010
 18051 = 9B0D			BALL.SPEEDY	= DATAORIGIN+$0012
 18052 = 9B0F			BALL.SBD	= DATAORIGIN+$0014
 18053 = 9B11			BALL.BRWHIT	= DATAORIGIN+$0016
 18054 = 9B12			BALL.INPLAY	= DATAORIGIN+$0017
 18055 = 9B13			BALL.LAUNCH	= DATAORIGIN+$0018
 18056 = 9B14			BALL.ONVAUS	= DATAORIGIN+$0019
 18057 = 9B15			BALL.STM	= DATAORIGIN+$001A
 18058
 18059 = A299			@VarData	= BALL
 18060 = 0002			@VarDataSize	= 2
 18061
 18062 8CFC			@exit
 18063 					.ifdef @new
 18064 					lda <@VarData
 18065 					sta :ztmp
 18066 					lda >@VarData
 18067 					ldy #@VarDataSize-1
 18068 					jmp @FreeMem
 18069 					els
 18070 8CFC 60				rts						; ret
 18071 					eif
 18072 				.endl
 18073 8CFD			l_344F
 18074
 18075 				; optimize OK (service.pas), line = 3150
 18076
 18077 8CFD A9 00			lda #$00
 18078 8CFF 8D 00 9D			sta SCRFLUXCNT
 18079
 18080 				; optimize OK (service.pas), line = 3151
 18081
 18082 8D02 8D FF 9C			sta SCRFLUX
 18083
 18084 				; optimize OK (service.pas), line = 3153
 18085
 18086 8D05 A9 01			lda #$01
 18087 8D07 8D FE 9C			sta BALLS_IN_PLAY
 18088
 18089 				; optimize OK (service.pas), line = 3155
 18090
 18091 8D0A A9 00			lda #$00
 18092 8D0C 8D FC 9C			sta FIRE.AVL
 18093
 18094 				; optimize OK (service.pas), line = 3156
 18095
 18096 8D0F AD 1B 9C 8D 13 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 18097
 18098 				; optimize OK (service.pas), line = 3158
 18099
 18100 8D3F A9 FF			lda #$FF
 18101 8D41 8D F7 9C			sta LETT.LAST
 18102 8D44 8D F8 9C			sta LETT.LAST+1
 18103
 18104 				; optimize OK (service.pas), line = 3159
 18105
 18106 8D47 A9 00			lda #$00
 18107 8D49 8D EE 9C			sta LETT.ACTIVE
 18108
 18109 				; optimize OK (service.pas), line = 3162
 18110
 18111 8D4C AD C3 9A			lda PATTERN
 18112 8D4F 8D A1 A1			sta FILL_PICTURE_WITH_PATTERN.PATT
 18113 8D52 AD C4 9A			lda PATTERN+1
 18114 8D55 8D A2 A1			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 18115 8D58 20 5B 71			jsr FILL_PICTURE_WITH_PATTERN
 18116
 18117 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3165
 18118
 18119 8D5B E8				inx
 18120 8D5C AD A3 9A 95 96		mva PLAYSCREEN :STACKORIGIN,x
 18121 8D61 AD A4 9A 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 18122 8D66 20 E0 33			jsr SHOWBTMPICTURE
 18123
 18124 				; optimize OK (service.pas), line = 3169
 18125
 18126 8D69 AC DF 9C			ldy CUR_PLAYER
 18127 8D6C B9 D3 9C			lda adr.SCORE.LIVES,y
 18128 8D6F 8D F5 A1			sta PLOT_LIVES.LIVES
 18129 8D72 A9 00			lda #$00
 18130 8D74 8D F6 A1			sta PLOT_LIVES.LIVES+1
 18131 8D77 20 18 7F			jsr PLOT_LIVES
 18132
 18133 				; optimize OK (service.pas), line = 3172
 18134
 18135 8D7A AD A3 9A			lda PLAYSCREEN
 18136 8D7D 8D 9D A0			sta SETPALETTE.BTM
 18137 8D80 AD A4 9A			lda PLAYSCREEN+1
 18138 8D83 8D 9E A0			sta SETPALETTE.BTM+1
 18139 8D86 20 35 34			jsr SETPALETTE
 18140
 18141 				; optimize OK (service.pas), line = 3175
 18142
 18143 8D89 AD C8 9C			lda adr.SCORE.PLAYER+$04
 18144 8D8C 8D EC A1			sta WRITE_SCORE.SC
 18145 8D8F AD C9 9C			lda adr.SCORE.PLAYER+1+$04
 18146 8D92 8D ED A1			sta WRITE_SCORE.SC+1
 18147 8D95 AD CA 9C			lda adr.SCORE.PLAYER+2+$04
 18148 8D98 8D EE A1			sta WRITE_SCORE.SC+2
 18149 8D9B AD CB 9C			lda adr.SCORE.PLAYER+3+$04
 18150 8D9E 8D EF A1			sta WRITE_SCORE.SC+3
 18151 8DA1 A9 FD			lda #$FD
 18152 8DA3 8D E8 A1			sta WRITE_SCORE.PX
 18153 8DA6 A9 00			lda #$00
 18154 8DA8 8D E9 A1			sta WRITE_SCORE.PX+1
 18155 8DAB A9 3C			lda #$3C
 18156 8DAD 8D EA A1			sta WRITE_SCORE.PY
 18157 8DB0 A9 00			lda #$00
 18158 8DB2 8D EB A1			sta WRITE_SCORE.PY+1
 18159 8DB5 20 BA 7B			jsr WRITE_SCORE
 18160
 18161 				; optimize OK (service.pas), line = 3176
 18162
 18163 8DB8 AD CC 9C			lda adr.SCORE.PLAYER+$08
 18164 8DBB 8D EC A1			sta WRITE_SCORE.SC
 18165 8DBE AD CD 9C			lda adr.SCORE.PLAYER+1+$08
 18166 8DC1 8D ED A1			sta WRITE_SCORE.SC+1
 18167 8DC4 AD CE 9C			lda adr.SCORE.PLAYER+2+$08
 18168 8DC7 8D EE A1			sta WRITE_SCORE.SC+2
 18169 8DCA AD CF 9C			lda adr.SCORE.PLAYER+3+$08
 18170 8DCD 8D EF A1			sta WRITE_SCORE.SC+3
 18171 8DD0 A9 FD			lda #$FD
 18172 8DD2 8D E8 A1			sta WRITE_SCORE.PX
 18173 8DD5 A9 00			lda #$00
 18174 8DD7 8D E9 A1			sta WRITE_SCORE.PX+1
 18175 8DDA A9 5D			lda #$5D
 18176 8DDC 8D EA A1			sta WRITE_SCORE.PY
 18177 8DDF A9 00			lda #$00
 18178 8DE1 8D EB A1			sta WRITE_SCORE.PY+1
 18179 8DE4 20 BA 7B			jsr WRITE_SCORE
 18180
 18181 				; optimize OK (service.pas), line = 3177
 18182
 18183 8DE7 A9 FD			lda #$FD
 18184 8DE9 8D E8 A1			sta WRITE_SCORE.PX
 18185 8DEC A9 00			lda #$00
 18186 8DEE 8D E9 A1			sta WRITE_SCORE.PX+1
 18187 8DF1 A9 80			lda #$80
 18188 8DF3 8D EA A1			sta WRITE_SCORE.PY
 18189 8DF6 A9 00			lda #$00
 18190 8DF8 8D EB A1			sta WRITE_SCORE.PY+1
 18191 8DFB AD D6 9C			lda SCORE.HISCORE
 18192 8DFE 8D EC A1			sta WRITE_SCORE.SC
 18193 8E01 AD D7 9C			lda SCORE.HISCORE+1
 18194 8E04 8D ED A1			sta WRITE_SCORE.SC+1
 18195 8E07 AD D8 9C			lda SCORE.HISCORE+2
 18196 8E0A 8D EE A1			sta WRITE_SCORE.SC+2
 18197 8E0D AD D9 9C			lda SCORE.HISCORE+3
 18198 8E10 8D EF A1			sta WRITE_SCORE.SC+3
 18199 8E13 20 BA 7B			jsr WRITE_SCORE
 18200
 18201 				; optimize FAIL ('PUT_WALL', service.pas), line = 3180
 18202
 18203 8E16 20 8C 50			jsr PUT_WALL
 18204
 18205 				; optimize FAIL ('MOUSERESET', service.pas), line = 3184
 18206
 18207 8E19 20 5D 2A			jsr MOUSERESET
 18208
 18209 				; optimize OK (service.pas), line = 3187
 18210
 18211 8E1C A9 01			lda #$01
 18212 8E1E 8D 5B A2			sta BALL0.INPLAY
 18213
 18214 				; optimize OK (service.pas), line = 3188
 18215
 18216 8E21 8D 5C A2			sta BALL0.LAUNCH
 18217
 18218 				; optimize OK (service.pas), line = 3191
 18219
 18220 8E24 A9 6F			lda #$6F
 18221 8E26 8D 44 A2			sta BALL0.X
 18222 8E29 A9 00			lda #$00
 18223 8E2B 8D 45 A2			sta BALL0.X+1
 18224
 18225 				; optimize OK (service.pas), line = 3192
 18226
 18227 8E2E A9 B5			lda #$B5
 18228 8E30 8D 46 A2			sta BALL0.Y
 18229 8E33 A9 00			lda #$00
 18230 8E35 8D 47 A2			sta BALL0.Y+1
 18231
 18232 				; optimize OK (service.pas), line = 3195
 18233
 18234 8E38 A9 FF			lda #$FF
 18235 8E3A 8D 4C A2			sta BALL0.OLDX
 18236 8E3D 8D 4D A2			sta BALL0.OLDX+1
 18237
 18238 				; optimize OK (service.pas), line = 3196
 18239
 18240 8E40 8D 4E A2			sta BALL0.OLDY
 18241 8E43 8D 4F A2			sta BALL0.OLDY+1
 18242
 18243 				; optimize OK (service.pas), line = 3199
 18244
 18245 8E46 A9 00			lda #$00
 18246 8E48 8D 58 A2			sta BALL0.SBD
 18247 8E4B 8D 59 A2			sta BALL0.SBD+1
 18248
 18249 				; optimize OK (service.pas), line = 3203
 18250
 18251 8E4E A9 10			lda #$10
 18252 8E50 8D 5D A2			sta BALL0.ONVAUS
 18253
 18254 				; optimize OK (service.pas), line = 3208
 18255
 18256 8E53 A9 00			lda #$00
 18257 8E55 8D 5E A2			sta BALL0.STM
 18258
 18259 				; optimize OK (service.pas), line = 3212
 18260
 18261 8E58 A9 E8			lda #$E8
 18262 8E5A 8D 41 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 18263 8E5D A9 03			lda #$03
 18264 8E5F 8D 42 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 18265 8E62 20 3B 25			jsr SYSTEM.RANDOM.@010184000
 18266 8E65 AD 43 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 18267 8E68 8D EF 9C			sta LETT.INCOMING
 18268 8E6B AD 44 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 18269 8E6E 8D F0 9C			sta LETT.INCOMING+1
 18270
 18271 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3215
 18272
 18273 8E71 20 53 76			jsr CREATE_VAUS
 18274
 18275 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3218
 18276
 18277 8E74 20 31 73			jsr WRITE_ROUND_LEVEL
 18278
 18279 				; optimize FAIL ('SET_VAUS', service.pas), line = 3220
 18280
 18281 8E77 20 70 43			jsr SET_VAUS
 18282
 18283 				; optimize FAIL ('START_VAUS', service.pas), line = 3221
 18284
 18285 8E7A 20 AD 43			jsr START_VAUS
 18286
 18287 				; optimize OK (service.pas), line = 3222
 18288
 18289 8E7D AD 83 9C			lda VAUS.X
 18290 8E80 8D 01 A1			sta MOVE_VAUS.X
 18291 8E83 A9 00			lda #$00
 18292 8E85 8D 02 A1			sta MOVE_VAUS.X+1
 18293 8E88 A9 B8			lda #$B8
 18294 8E8A 8D 03 A1			sta MOVE_VAUS.Y
 18295 8E8D A9 00			lda #$00
 18296 8E8F 8D 04 A1			sta MOVE_VAUS.Y+1
 18297 8E92 20 24 46			jsr MOVE_VAUS
 18298
 18299 				; optimize FAIL ('START_LEVEL', service.pas), line = 3223
 18300
 18301 8E95 20 5A 2A			jsr START_LEVEL
 18302
 18303 				; optimize FAIL ('START_VAUS', service.pas), line = 3224
 18304
 18305 8E98 20 AD 43			jsr START_VAUS
 18306
 18307 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3225
 18308
 18309 8E9B 20 32 73			jsr REMOVE_ROUND_LEVEL
 18310
 18311 				; optimize OK (service.pas), line = 3226
 18312
 18313 8E9E AD 9D 93			lda BALL0
 18314 8EA1 8D AF A0			sta SET_BALL.BALL
 18315 8EA4 AD 9E 93			lda BALL0+1
 18316 8EA7 8D B0 A0			sta SET_BALL.BALL+1
 18317 8EAA 20 BA 35			jsr SET_BALL
 18318
 18319 				; optimize OK (service.pas), line = 3233
 18320
 18321 8EAD A9 0F			lda #$0F
 18322 8EAF 20 24 25			jsr SYSTEM.RANDOM.@010180000
 18323 8EB2 E8				inx
 18324 8EB3 E8				inx
 18325 8EB4 AD 40 9B			lda SYSTEM.RANDOM.@010180000.RESULT
 18326 8EB7 18 69 3C			add #$3C
 18327 8EBA 95 95			sta :STACKORIGIN-1,x
 18328 8EBC A9 00			lda #$00
 18329 8EBE 69 00			adc #$00
 18330 8EC0 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 18331 8EC2 AD 9D 93			lda BALL0
 18332 8EC5 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 18333 8EC8 AD 9E 93			lda BALL0+1
 18334 8ECB 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 18335 8ECE CA				dex
 18336 8ECF B5 96			lda :STACKORIGIN,x
 18337 8ED1 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 18338 8ED4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18339 8ED6 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18340 8ED9 CA				dex
 18341 8EDA 20 B9 38			jsr SET_BALL_DIRECTION
 18342
 18343 				; optimize OK (service.pas), line = 3235
 18344
 18345 8EDD AD 9D 93			lda BALL0
 18346 8EE0 8D B3 A0			sta SET_BALL_SPEED.BALL
 18347 8EE3 AD 9E 93			lda BALL0+1
 18348 8EE6 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 18349 8EE9 A9 64			lda #$64
 18350 8EEB 8D B7 A0			sta SET_BALL_SPEED.SPEED
 18351 8EEE A9 00			lda #$00
 18352 8EF0 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 18353 8EF3 20 9F 36			jsr SET_BALL_SPEED
 18354
 18355 				; optimize OK (service.pas), line = 3238
 18356
 18357 8EF6 A9 00			lda #$00
 18358 8EF8 8D 52 A2			sta BALL0.FINESPEED
 18359 8EFB 8D 53 A2			sta BALL0.FINESPEED+1
 18360
 18361 				; optimize OK (service.pas), line = 3240
 18362
 18363 8EFE 8D 76 A2			sta BALL1.INPLAY
 18364
 18365 				; optimize OK (service.pas), line = 3241
 18366
 18367 8F01 8D 91 A2			sta BALL2.INPLAY
 18368
 18369 				; --- WhileProlog
 18370 8F04 4C 7B 93			jmp l_3586
 18371 8F07			l_3587
 18372
 18373 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3245
 18374
 18375 8F07 20 B9 35			jsr WAIT_VBL
 18376
 18377 				; optimize OK (service.pas), line = 3256
 18378
 18379 8F0A A9 37			lda <X
 18380 8F0C 8D F5 9B			sta MOUSECOORDS.X
 18381 8F0F A9 A2			lda >X
 18382 8F11 8D F6 9B			sta MOUSECOORDS.X+1
 18383 8F14 A9 39			lda <Y
 18384 8F16 8D F7 9B			sta MOUSECOORDS.Y
 18385 8F19 A9 A2			lda >Y
 18386 8F1B 8D F8 9B			sta MOUSECOORDS.Y+1
 18387 8F1E 20 67 2A			jsr MOUSECOORDS
 18388
 18389 				; optimize OK (service.pas), line = 3261
 18390
 18391 8F21 AD E7 9C			lda TRAINER
 18392 8F24 D0 19			jne l_359D
 18393 8F26 AD 37 A2			lda X
 18394 8F29 8D 01 A1			sta MOVE_VAUS.X
 18395 8F2C AD 38 A2			lda X+1
 18396 8F2F 8D 02 A1			sta MOVE_VAUS.X+1
 18397 8F32 A9 B8			lda #$B8
 18398 8F34 8D 03 A1			sta MOVE_VAUS.Y
 18399 8F37 A9 00			lda #$00
 18400 8F39 8D 04 A1			sta MOVE_VAUS.Y+1
 18401 8F3C 4C A8 8F			jmp l_35AB
 18402 8F3F			l_359D
 18403
 18404 				; optimize OK (service.pas), line = 3267
 18405
 18406 8F3F AD E7 9C			lda TRAINER
 18407 8F42 C9 01			cmp #$01
 18408 8F44 D0 65			jne l_35BD
 18409
 18410 				; optimize FAIL (1, service.pas), line = 3268
 18411
 18412 8F46 E8				inx
 18413 8F47 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 18414 8F4B A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18415 8F4F E8				inx
 18416 8F50 A9 0A 95 96			mva #$0A :STACKORIGIN,x
 18417 8F54 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18418 8F58 AD 44 A2			lda BALL0.X
 18419 8F5B 38 ED 5D A2			sub BALL0.ONVAUS
 18420 8F5F 8D 42 A0			sta MAX.A
 18421 8F62 AD 45 A2			lda BALL0.X+1
 18422 8F65 E9 00			sbc #$00
 18423 8F67 8D 43 A0			sta MAX.A+1
 18424 8F6A B5 96			lda :STACKORIGIN,x
 18425 8F6C 8D 44 A0			sta MAX.B
 18426 8F6F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18427 8F71 8D 45 A0			sta MAX.B+1
 18428 8F74 CA				dex
 18429 8F75 20 5B 2D			jsr MAX
 18430 8F78 A9 B8			lda #$B8
 18431 8F7A 8D 48 A0			sta MIN.A
 18432 8F7D A9 00			lda #$00
 18433 8F7F 8D 49 A0			sta MIN.A+1
 18434 8F82 AD 46 A0			lda MAX.RESULT
 18435 8F85 8D 4A A0			sta MIN.B
 18436 8F88 AD 47 A0			lda MAX.RESULT+1
 18437 8F8B 8D 4B A0			sta MIN.B+1
 18438 8F8E 20 86 2D			jsr MIN
 18439 8F91 AD 4C A0			lda MIN.RESULT
 18440 8F94 8D 01 A1			sta MOVE_VAUS.X
 18441 8F97 AD 4D A0			lda MIN.RESULT+1
 18442 8F9A 8D 02 A1			sta MOVE_VAUS.X+1
 18443 8F9D B5 96			lda :STACKORIGIN,x
 18444 8F9F 8D 03 A1			sta MOVE_VAUS.Y
 18445 8FA2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18446 8FA4 8D 04 A1			sta MOVE_VAUS.Y+1
 18447 8FA7 CA				dex
 18448 8FA8			l_35AB
 18449 8FA8 20 24 46			jsr MOVE_VAUS
 18450 8FAB			l_35BD
 18451
 18452 				; optimize OK (service.pas), line = 3273
 18453
 18454 8FAB AD 5C A2			lda BALL0.LAUNCH
 18455 8FAE C9 01			cmp #$01
 18456 8FB0 D0 30			jne l_35E0
 18457
 18458 				; optimize FAIL (0, service.pas), line = 3275
 18459
 18460 8FB2 EE 5E A2			inc BALL0.STM
 18461
 18462 				; optimize OK (service.pas), line = 3280
 18463
 18464 8FB5 AD 5E A2			lda BALL0.STM
 18465 8FB8 C9 FA			cmp #$FA
 18466 8FBA D0 05			jne l_35F7
 18467 8FBC A9 00			lda #$00
 18468 8FBE 8D 5C A2			sta BALL0.LAUNCH
 18469 8FC1			l_35F7
 18470
 18471 				; optimize OK (service.pas), line = 3283
 18472
 18473 8FC1 AD 9D 93			lda BALL0
 18474 8FC4 8D D3 A0			sta START_BALL.BALL
 18475 8FC7 AD 9E 93			lda BALL0+1
 18476 8FCA 8D D4 A0			sta START_BALL.BALL+1
 18477 8FCD 20 FF 3B			jsr START_BALL
 18478
 18479 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3286
 18480
 18481 8FD0 20 5E 2A			jsr MOUSECLICK
 18482 8FD3 AD F4 9B			lda MOUSECLICK.RESULT
 18483 8FD6 C9 01			cmp #$01
 18484 8FD8 D0 05			jne l_3611
 18485 8FDA A9 00			lda #$00
 18486 8FDC 8D 5C A2			sta BALL0.LAUNCH
 18487 8FDF			l_3611
 18488 8FDF 4C F6 8F			jmp l_3621
 18489 8FE2			l_35E0
 18490
 18491 				; optimize OK (service.pas), line = 3294
 18492
 18493 8FE2 AD 5B A2			lda BALL0.INPLAY
 18494 8FE5 F0 0F			jeq l_362D
 18495 8FE7 AD 9D 93			lda BALL0
 18496 8FEA 8D F4 A0			sta MOVE_BALL.BALL
 18497 8FED AD 9E 93			lda BALL0+1
 18498 8FF0 8D F5 A0			sta MOVE_BALL.BALL+1
 18499 8FF3 20 3C 3D			jsr MOVE_BALL
 18500 8FF6			l_362D
 18501 8FF6			l_3621
 18502
 18503 				; optimize OK (service.pas), line = 3295
 18504
 18505 8FF6 AD 76 A2			lda BALL1.INPLAY
 18506 8FF9 F0 0F			jeq l_363F
 18507 8FFB AD 9F 93			lda BALL1
 18508 8FFE 8D F4 A0			sta MOVE_BALL.BALL
 18509 9001 AD A0 93			lda BALL1+1
 18510 9004 8D F5 A0			sta MOVE_BALL.BALL+1
 18511 9007 20 3C 3D			jsr MOVE_BALL
 18512 900A			l_363F
 18513
 18514 				; optimize OK (service.pas), line = 3296
 18515
 18516 900A AD 91 A2			lda BALL2.INPLAY
 18517 900D F0 0F			jeq l_3651
 18518 900F AD A1 93			lda BALL2
 18519 9012 8D F4 A0			sta MOVE_BALL.BALL
 18520 9015 AD A2 93			lda BALL2+1
 18521 9018 8D F5 A0			sta MOVE_BALL.BALL+1
 18522 901B 20 3C 3D			jsr MOVE_BALL
 18523 901E			l_3651
 18524
 18525 				; optimize OK (service.pas), line = 3302
 18526
 18527 901E AD 9D 93			lda BALL0
 18528 9021 8D 95 A2			sta CHECK_BALL.BALL
 18529 9024 AD 9E 93			lda BALL0+1
 18530 9027 8D 96 A2			sta CHECK_BALL.BALL+1
 18531 902A 20 8B 8B			jsr CHECK_BALL
 18532
 18533 				; optimize OK (service.pas), line = 3303
 18534
 18535 902D AD 9F 93			lda BALL1
 18536 9030 8D 95 A2			sta CHECK_BALL.BALL
 18537 9033 AD A0 93			lda BALL1+1
 18538 9036 8D 96 A2			sta CHECK_BALL.BALL+1
 18539 9039 20 8B 8B			jsr CHECK_BALL
 18540
 18541 				; optimize OK (service.pas), line = 3304
 18542
 18543 903C AD A1 93			lda BALL2
 18544 903F 8D 95 A2			sta CHECK_BALL.BALL
 18545 9042 AD A2 93			lda BALL2+1
 18546 9045 8D 96 A2			sta CHECK_BALL.BALL+1
 18547 9048 20 8B 8B			jsr CHECK_BALL
 18548
 18549 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3319
 18550
 18551 904B 20 5B 30			jsr CHECKSHINE
 18552
 18553 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3320
 18554
 18555 904E 20 A9 32			jsr CHECK_LETTER
 18556
 18557 				; optimize OK (service.pas), line = 3321
 18558
 18559 9051 AD 9D 93			lda BALL0
 18560 9054 8D 21 A2			sta CHECK_BONUS_TYPE.B1
 18561 9057 AD 9E 93			lda BALL0+1
 18562 905A 8D 22 A2			sta CHECK_BONUS_TYPE.B1+1
 18563 905D AD 9F 93			lda BALL1
 18564 9060 8D 25 A2			sta CHECK_BONUS_TYPE.B2
 18565 9063 AD A0 93			lda BALL1+1
 18566 9066 8D 26 A2			sta CHECK_BONUS_TYPE.B2+1
 18567 9069 AD A1 93			lda BALL2
 18568 906C 8D 29 A2			sta CHECK_BONUS_TYPE.B3
 18569 906F AD A2 93			lda BALL2+1
 18570 9072 8D 2A A2			sta CHECK_BONUS_TYPE.B3+1
 18571 9075 20 71 87			jsr CHECK_BONUS_TYPE
 18572
 18573 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3322
 18574
 18575 9078 20 16 83			jsr CHECK_FIRE
 18576
 18577 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3323
 18578
 18579 907B 20 93 85			jsr CHECK_FLUX
 18580
 18581 				; optimize OK (service.pas), line = 3325
 18582
 18583 907E AD 83 9C			lda VAUS.X
 18584 9081 18 6D 8B 9C			add VAUS.WIDTH
 18585 9085 85 9F			sta :STACKORIGIN+9
 18586 9087 A9 00			lda #$00
 18587 9089 69 00			adc #$00
 18588 908B A0 01			ldy #1
 18589 908D C9 00			cmp #$00
 18590 908F D0 04			bne @+
 18591 9091 A5 9F			lda :STACKORIGIN+9
 18592 9093 C9 D7			cmp #$D7
 18593 				@
 18594 9095 F0 01			beq @+
 18595 9097 88				dey
 18596 				@
 18597 9098 98				tya
 18598 9099 2D FF 9C			and SCRFLUX
 18599 909C F0 03			jeq l_3689
 18600 909E 20 30 86			jsr VAUS_OUT
 18601 90A1			l_3689
 18602
 18603 				; optimize OK (service.pas), line = 3327
 18604
 18605 90A1 AD 8F 9C			lda VAUS.LETTER
 18606 90A4 C9 04			cmp #$04
 18607 90A6 F0 03 4C EB 91		jne l_369F
 18608
 18609 				; optimize OK (service.pas), line = 3329
 18610
 18611 90AB A9 03			lda #$03
 18612 90AD 8D FE 9C			sta BALLS_IN_PLAY
 18613
 18614 				; optimize OK (service.pas), line = 3331
 18615
 18616 90B0 AC 9F 93 84 84 AC + 	mwy BALL1 :bp2
 18617 90BA A0 1A			ldy #$1A
 18618 90BC B9 44 A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18619
 18620 				; optimize OK (service.pas), line = 3332
 18621
 18622 90C4 AC A1 93 84 84 AC + 	mwy BALL2 :bp2
 18623 90CE A0 1A			ldy #$1A
 18624 90D0 B9 44 A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18625
 18626 				; optimize OK (service.pas), line = 3334
 18627
 18628 90D8 AD 9D 93			lda BALL0
 18629 90DB 8D CB A0			sta GET_BALL_DIRECTION.BALL
 18630 90DE AD 9E 93			lda BALL0+1
 18631 90E1 8D CC A0			sta GET_BALL_DIRECTION.BALL+1
 18632 90E4 20 44 3A			jsr GET_BALL_DIRECTION
 18633 90E7 E8				inx
 18634 90E8 E8				inx
 18635 90E9 A9 5A			lda #$5A
 18636 90EB 85 8E			sta @SMALLINT.DIV.B
 18637 90ED A9 00			lda #$00
 18638 90EF 85 8F			sta @SMALLINT.DIV.B+1
 18639 90F1 AD CF A0			lda GET_BALL_DIRECTION.RESULT
 18640 90F4 85 86			sta @SMALLINT.DIV.A
 18641 90F6 AD D0 A0			lda GET_BALL_DIRECTION.RESULT+1
 18642 90F9 85 87			sta @SMALLINT.DIV.A+1
 18643 90FB 20 4B 12			jsr @SMALLINT.DIV
 18644 90FE CA				dex
 18645 90FF A5 86			lda :eax
 18646 9101 8D 3D A2			sta T1
 18647 9104 A5 87			lda :eax+1
 18648 9106 8D 3E A2			sta T1+1
 18649 9109 CA				dex
 18650
 18651 				; optimize OK (service.pas), line = 3336
 18652
 18653 910A AD 50 A2			lda BALL0.SPEED
 18654 910D 8D 3F A2			sta T2
 18655 9110 AD 51 A2			lda BALL0.SPEED+1
 18656 9113 8D 40 A2			sta T2+1
 18657
 18658 				; optimize OK (service.pas), line = 3343
 18659
 18660 9116 A9 5A			lda #$5A
 18661 9118 85 8E			sta :ecx
 18662 911A A9 00			lda #$00
 18663 911C 85 8F			sta :ecx+1
 18664 911E AD 3D A2			lda T1
 18665 9121 85 86			sta :eax
 18666 9123 AD 3E A2			lda T1+1
 18667 9126 85 87			sta :eax+1
 18668 					.ifdef fmulinit
 18669 					fmulu_16
 18670 					els
 18671 9128 20 23 13			imulCX
 18672 					eif
 18673 912B A5 86			lda :eax
 18674 912D 8D 41 A2			sta HLP
 18675 9130 A5 87			lda :eax+1
 18676 9132 8D 42 A2			sta HLP+1
 18677
 18678 				; optimize OK (service.pas), line = 3345
 18679
 18680 9135 AD 41 A2			lda HLP
 18681 9138 18 69 1E			add #$1E
 18682 913B 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 18683 913E AD 42 A2			lda HLP+1
 18684 9141 69 00			adc #$00
 18685 9143 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18686 9146 AD 9D 93			lda BALL0
 18687 9149 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 18688 914C AD 9E 93			lda BALL0+1
 18689 914F 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 18690 9152 20 B9 38			jsr SET_BALL_DIRECTION
 18691
 18692 				; optimize OK (service.pas), line = 3346
 18693
 18694 9155 AD 41 A2			lda HLP
 18695 9158 18 69 2D			add #$2D
 18696 915B 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 18697 915E AD 42 A2			lda HLP+1
 18698 9161 69 00			adc #$00
 18699 9163 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18700 9166 AD 9F 93			lda BALL1
 18701 9169 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 18702 916C AD A0 93			lda BALL1+1
 18703 916F 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 18704 9172 20 B9 38			jsr SET_BALL_DIRECTION
 18705
 18706 				; optimize OK (service.pas), line = 3347
 18707
 18708 9175 AD 41 A2			lda HLP
 18709 9178 18 69 3C			add #$3C
 18710 917B 8D C5 A0			sta SET_BALL_DIRECTION.ANGLE
 18711 917E AD 42 A2			lda HLP+1
 18712 9181 69 00			adc #$00
 18713 9183 8D C6 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18714 9186 AD A1 93			lda BALL2
 18715 9189 8D C1 A0			sta SET_BALL_DIRECTION.BALL
 18716 918C AD A2 93			lda BALL2+1
 18717 918F 8D C2 A0			sta SET_BALL_DIRECTION.BALL+1
 18718 9192 20 B9 38			jsr SET_BALL_DIRECTION
 18719
 18720 				; optimize OK (service.pas), line = 3351
 18721
 18722 9195 AD 9D 93			lda BALL0
 18723 9198 8D B3 A0			sta SET_BALL_SPEED.BALL
 18724 919B AD 9E 93			lda BALL0+1
 18725 919E 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 18726 91A1 AD 3F A2			lda T2
 18727 91A4 8D B7 A0			sta SET_BALL_SPEED.SPEED
 18728 91A7 AD 40 A2			lda T2+1
 18729 91AA 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 18730 91AD 20 9F 36			jsr SET_BALL_SPEED
 18731
 18732 				; optimize OK (service.pas), line = 3352
 18733
 18734 91B0 AD 9F 93			lda BALL1
 18735 91B3 8D B3 A0			sta SET_BALL_SPEED.BALL
 18736 91B6 AD A0 93			lda BALL1+1
 18737 91B9 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 18738 91BC AD 3F A2			lda T2
 18739 91BF 8D B7 A0			sta SET_BALL_SPEED.SPEED
 18740 91C2 AD 40 A2			lda T2+1
 18741 91C5 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 18742 91C8 20 9F 36			jsr SET_BALL_SPEED
 18743
 18744 				; optimize OK (service.pas), line = 3353
 18745
 18746 91CB AD A1 93			lda BALL2
 18747 91CE 8D B3 A0			sta SET_BALL_SPEED.BALL
 18748 91D1 AD A2 93			lda BALL2+1
 18749 91D4 8D B4 A0			sta SET_BALL_SPEED.BALL+1
 18750 91D7 AD 3F A2			lda T2
 18751 91DA 8D B7 A0			sta SET_BALL_SPEED.SPEED
 18752 91DD AD 40 A2			lda T2+1
 18753 91E0 8D B8 A0			sta SET_BALL_SPEED.SPEED+1
 18754 91E3 20 9F 36			jsr SET_BALL_SPEED
 18755
 18756 				; optimize OK (service.pas), line = 3356
 18757
 18758 91E6 A9 00			lda #$00
 18759 91E8 8D 8F 9C			sta VAUS.LETTER
 18760 91EB			l_369F
 18761
 18762 				; optimize OK (service.pas), line = 3360
 18763
 18764 91EB AD FE 9C			lda BALLS_IN_PLAY
 18765 91EE C9 02			cmp #$02
 18766 91F0 90 08			jcc l_3702
 18767 91F2 A9 00			lda #$00
 18768 91F4 8D EF 9C			sta LETT.INCOMING
 18769 91F7 8D F0 9C			sta LETT.INCOMING+1
 18770 91FA			l_3702
 18771
 18772 				; optimize OK (service.pas), line = 3363
 18773
 18774 91FA AD DF 9C			lda CUR_PLAYER
 18775 91FD 0A				asl @
 18776 91FE 0A				asl @
 18777 91FF A8				tay
 18778 9200 B9 C4 9C			lda adr.SCORE.PLAYER,y
 18779 9203 8D EC A1			sta WRITE_SCORE.SC
 18780 9206 B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 18781 9209 8D ED A1			sta WRITE_SCORE.SC+1
 18782 920C B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 18783 920F 8D EE A1			sta WRITE_SCORE.SC+2
 18784 9212 B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 18785 9215 8D EF A1			sta WRITE_SCORE.SC+3
 18786 9218 AC DF 9C			ldy CUR_PLAYER
 18787 921B B9 92 10			lda adr.POS_DIGIT,y
 18788 921E 8D EA A1			sta WRITE_SCORE.PY
 18789 9221 A9 FD			lda #$FD
 18790 9223 8D E8 A1			sta WRITE_SCORE.PX
 18791 9226 A9 00			lda #$00
 18792 9228 8D E9 A1			sta WRITE_SCORE.PX+1
 18793 922B 8D EB A1			sta WRITE_SCORE.PY+1
 18794 922E 20 BA 7B			jsr WRITE_SCORE
 18795
 18796 				; optimize OK (service.pas), line = 3366
 18797
 18798 9231 AD DF 9C			lda CUR_PLAYER
 18799 9234 0A				asl @
 18800 9235 0A				asl @
 18801 9236 A8				tay
 18802 9237				.LOCAL
 18803 9237 B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 18804 923A 38 ED D9 9C			sub SCORE.HISCORE+3
 18805 923E D0 22			bne L4
 18806 9240 B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 18807 9243 CD D8 9C			cmp SCORE.HISCORE+2
 18808 9246 D0 0E			bne L1
 18809 9248 B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 18810 924B CD D7 9C			cmp SCORE.HISCORE+1
 18811 924E D0 06			bne L1
 18812 9250 B9 C4 9C			lda adr.SCORE.PLAYER,y
 18813 9253 CD D6 9C			cmp SCORE.HISCORE
 18814 9256 F0 10		L1	beq L5
 18815 9258 B0 04			bcs L3
 18816 925A A9 FF			lda #$FF
 18817 925C D0 0A			bne L5
 18818 925E A9 01		L3	lda #$01
 18819 9260 D0 06			bne L5
 18820 9262 50 04		L4	bvc L5
 18821 9264 49 FF			eor #$FF
 18822 9266 09 01			ora #$01
 18823 9268			L5
 18824 					.ENDL
 18825 9268 30 49			jmi l_3728
 18826 926A F0 47			jeq l_3728
 18827
 18828 				; optimize OK (service.pas), line = 3369
 18829
 18830 926C B9 C4 9C			lda adr.SCORE.PLAYER,y
 18831 926F 8D D6 9C			sta SCORE.HISCORE
 18832 9272 B9 C5 9C			lda adr.SCORE.PLAYER+1,y
 18833 9275 8D D7 9C			sta SCORE.HISCORE+1
 18834 9278 B9 C6 9C			lda adr.SCORE.PLAYER+2,y
 18835 927B 8D D8 9C			sta SCORE.HISCORE+2
 18836 927E B9 C7 9C			lda adr.SCORE.PLAYER+3,y
 18837 9281 8D D9 9C			sta SCORE.HISCORE+3
 18838
 18839 				; optimize OK (service.pas), line = 3371
 18840
 18841 9284 A9 FD			lda #$FD
 18842 9286 8D E8 A1			sta WRITE_SCORE.PX
 18843 9289 A9 00			lda #$00
 18844 928B 8D E9 A1			sta WRITE_SCORE.PX+1
 18845 928E A9 80			lda #$80
 18846 9290 8D EA A1			sta WRITE_SCORE.PY
 18847 9293 A9 00			lda #$00
 18848 9295 8D EB A1			sta WRITE_SCORE.PY+1
 18849 9298 AD D6 9C			lda SCORE.HISCORE
 18850 929B 8D EC A1			sta WRITE_SCORE.SC
 18851 929E AD D7 9C			lda SCORE.HISCORE+1
 18852 92A1 8D ED A1			sta WRITE_SCORE.SC+1
 18853 92A4 AD D8 9C			lda SCORE.HISCORE+2
 18854 92A7 8D EE A1			sta WRITE_SCORE.SC+2
 18855 92AA AD D9 9C			lda SCORE.HISCORE+3
 18856 92AD 8D EF A1			sta WRITE_SCORE.SC+3
 18857 92B0 20 BA 7B			jsr WRITE_SCORE
 18858 92B3			l_3728
 18859
 18860 				; optimize OK (service.pas), line = 3378
 18861
 18862 92B3 AD 9D 93			lda BALL0
 18863 92B6 8D 99 A2			sta TEST_BALL.BALL
 18864 92B9 AD 9E 93			lda BALL0+1
 18865 92BC 8D 9A A2			sta TEST_BALL.BALL+1
 18866 92BF 20 01 8C			jsr TEST_BALL
 18867
 18868 				; optimize OK (service.pas), line = 3379
 18869
 18870 92C2 AD 9F 93			lda BALL1
 18871 92C5 8D 99 A2			sta TEST_BALL.BALL
 18872 92C8 AD A0 93			lda BALL1+1
 18873 92CB 8D 9A A2			sta TEST_BALL.BALL+1
 18874 92CE 20 01 8C			jsr TEST_BALL
 18875
 18876 				; optimize OK (service.pas), line = 3380
 18877
 18878 92D1 AD A1 93			lda BALL2
 18879 92D4 8D 99 A2			sta TEST_BALL.BALL
 18880 92D7 AD A2 93			lda BALL2+1
 18881 92DA 8D 9A A2			sta TEST_BALL.BALL+1
 18882 92DD 20 01 8C			jsr TEST_BALL
 18883
 18884 				; optimize OK (service.pas), line = 3421
 18885
 18886 92E0 AD 5B A2			lda BALL0.INPLAY
 18887 92E3 D0 2B			jne l_374E
 18888
 18889 				; optimize OK (service.pas), line = 3423
 18890
 18891 92E5 AC 9D 93 84 84 AC + 	mwy BALL0 :bp2
 18892 92EF A0 1A			ldy #$1A
 18893 92F1 B9 5F A2 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 18894
 18895 				; optimize OK (service.pas), line = 3424
 18896
 18897 92F9 AC 9F 93 84 84 AC + 	mwy BALL1 :bp2
 18898 9303 A0 1A			ldy #$1A
 18899 9305 B9 7A A2 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 18900
 18901 				; optimize OK (service.pas), line = 3425
 18902
 18903 930D 8D 91 A2			sta BALL2.INPLAY
 18904 9310			l_374E
 18905
 18906 				; optimize OK (service.pas), line = 3428
 18907
 18908 9310 A9 00			lda #$00
 18909 9312 8D FE 9C			sta BALLS_IN_PLAY
 18910
 18911 				; optimize OK (service.pas), line = 3430
 18912
 18913 9315 AD 5B A2			lda BALL0.INPLAY
 18914 9318 F0 03			jeq l_3769
 18915 931A EE FE 9C			inc BALLS_IN_PLAY
 18916 931D			l_3769
 18917
 18918 				; optimize OK (service.pas), line = 3431
 18919
 18920 931D AD 76 A2			lda BALL1.INPLAY
 18921 9320 F0 03			jeq l_377C
 18922 9322 EE FE 9C			inc BALLS_IN_PLAY
 18923 9325			l_377C
 18924
 18925 				; optimize OK (service.pas), line = 3432
 18926
 18927 9325 AD 91 A2			lda BALL2.INPLAY
 18928 9328 F0 03			jeq l_378F
 18929 932A EE FE 9C			inc BALLS_IN_PLAY
 18930 932D			l_378F
 18931
 18932 				; optimize OK (service.pas), line = 3435
 18933
 18934 932D AD 5B A2			lda BALL0.INPLAY
 18935 9330 D0 49			jne l_37A5
 18936
 18937 				; optimize OK (service.pas), line = 3437
 18938
 18939 9332 A9 01			lda #$01
 18940 9334 8D 5C A2			sta BALL0.LAUNCH
 18941
 18942 				; optimize OK (service.pas), line = 3438
 18943
 18944 9337 AD 9D 93			lda BALL0
 18945 933A 8D A8 A0			sta REMOVE_BALL.BALL
 18946 933D AD 9E 93			lda BALL0+1
 18947 9340 8D A9 A0			sta REMOVE_BALL.BALL+1
 18948 9343 20 FD 34			jsr REMOVE_BALL
 18949
 18950 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3439
 18951
 18952 9346 20 AE 73			jsr DESTROY_VAUS
 18953
 18954 				; optimize OK (service.pas), line = 3440
 18955
 18956 9349 AC DF 9C			ldy CUR_PLAYER
 18957 934C B9 D3 9C			lda adr.SCORE.LIVES,y
 18958 934F 38 E9 01			sub #$01
 18959 9352 99 D3 9C			sta adr.SCORE.LIVES,y
 18960
 18961 				; optimize OK (service.pas), line = 3441
 18962
 18963 9355 AD E9 9A			lda WALL_P
 18964 9358 85 8E			sta @move.dst
 18965 935A AD DF 9C			lda CUR_PLAYER
 18966 935D 18 6D EA 9A			add WALL_P+1
 18967 9361 85 8F			sta @move.dst+1
 18968 9363 AD EB 9A			lda WALL
 18969 9366 85 8A			sta @move.src
 18970 9368 AD EC 9A			lda WALL+1
 18971 936B 85 8B			sta @move.src+1
 18972 936D A9 00			lda <256
 18973 936F 85 86			sta @move.cnt
 18974 9371 A9 01			lda >256
 18975 9373 85 87			sta @move.cnt+1
 18976 9375 20 CE 11			jsr @move
 18977
 18978 				; optimize FAIL ('NOSOUND', service.pas), line = 3449
 18979
 18980 9378 20 59 2D			jsr NOSOUND
 18981 937B			l_37A5
 18982 937B			l_3586
 18983
 18984 				; optimize OK (service.pas), line = 3243
 18985
 18986 937B AD C2 9C			lda REMAIN_BLK
 18987 937E F0 0D			jeq l_3587w
 18988 9380 AD 5B A2			lda BALL0.INPLAY
 18989 9383 F0 08			jeq l_3587w
 18990 9385 AD DE 9C			lda SCORE.ABORTPLAY
 18991 9388 D0 03 4C 07 8F		jeq l_3587
 18992 938D			l_3587w
 18993
 18994 				; optimize OK (service.pas), line = 3505
 18995
 18996 938D A9 00			lda #$00
 18997 938F 8D 36 A2			sta RESULT
 18998
 18999 				; optimize OK (service.pas), line = 3506
 19000
 19001 9392 AD C2 9C			lda REMAIN_BLK
 19002 9395 D0 05			jne l_37F3
 19003 9397 A9 01			lda #$01
 19004 9399 8D 36 A2			sta RESULT
 19005 939C			l_37F3
 19006 939C			@exit
 19007
 19008 				; ------------------------------------------------------------
 19009
 19010 = A236			RESULT	= DATAORIGIN+$073B
 19011 = A237			X	= DATAORIGIN+$073C
 19012 = A239			Y	= DATAORIGIN+$073E
 19013 = A23B			KEY	= DATAORIGIN+$0740
 19014 = A23D			T1	= DATAORIGIN+$0742
 19015 = A23F			T2	= DATAORIGIN+$0744
 19016 = A241			HLP	= DATAORIGIN+$0746
 19017 = A243			CN	= DATAORIGIN+$0748
 19018 = A244			adr.BALL0	= DATAORIGIN+$0749	; [27] RECORD
 19019 939C			.var BALL0	= adr.BALL0 .word
 19020 = A244			BALL0.X	= DATAORIGIN+$0749
 19021 = A246			BALL0.Y	= DATAORIGIN+$074B
 19022 = A248			BALL0.FINEX	= DATAORIGIN+$074D
 19023 = A24A			BALL0.FINEY	= DATAORIGIN+$074F
 19024 = A24C			BALL0.OLDX	= DATAORIGIN+$0751
 19025 = A24E			BALL0.OLDY	= DATAORIGIN+$0753
 19026 = A250			BALL0.SPEED	= DATAORIGIN+$0755
 19027 = A252			BALL0.FINESPEED	= DATAORIGIN+$0757
 19028 = A254			BALL0.SPEEDX	= DATAORIGIN+$0759
 19029 = A256			BALL0.SPEEDY	= DATAORIGIN+$075B
 19030 = A258			BALL0.SBD	= DATAORIGIN+$075D
 19031 = A25A			BALL0.BRWHIT	= DATAORIGIN+$075F
 19032 = A25B			BALL0.INPLAY	= DATAORIGIN+$0760
 19033 = A25C			BALL0.LAUNCH	= DATAORIGIN+$0761
 19034 = A25D			BALL0.ONVAUS	= DATAORIGIN+$0762
 19035 = A25E			BALL0.STM	= DATAORIGIN+$0763
 19036 = A25F			adr.BALL1	= DATAORIGIN+$0764	; [27] RECORD
 19037 939C			.var BALL1	= adr.BALL1 .word
 19038 = A25F			BALL1.X	= DATAORIGIN+$0764
 19039 = A261			BALL1.Y	= DATAORIGIN+$0766
 19040 = A263			BALL1.FINEX	= DATAORIGIN+$0768
 19041 = A265			BALL1.FINEY	= DATAORIGIN+$076A
 19042 = A267			BALL1.OLDX	= DATAORIGIN+$076C
 19043 = A269			BALL1.OLDY	= DATAORIGIN+$076E
 19044 = A26B			BALL1.SPEED	= DATAORIGIN+$0770
 19045 = A26D			BALL1.FINESPEED	= DATAORIGIN+$0772
 19046 = A26F			BALL1.SPEEDX	= DATAORIGIN+$0774
 19047 = A271			BALL1.SPEEDY	= DATAORIGIN+$0776
 19048 = A273			BALL1.SBD	= DATAORIGIN+$0778
 19049 = A275			BALL1.BRWHIT	= DATAORIGIN+$077A
 19050 = A276			BALL1.INPLAY	= DATAORIGIN+$077B
 19051 = A277			BALL1.LAUNCH	= DATAORIGIN+$077C
 19052 = A278			BALL1.ONVAUS	= DATAORIGIN+$077D
 19053 = A279			BALL1.STM	= DATAORIGIN+$077E
 19054 = A27A			adr.BALL2	= DATAORIGIN+$077F	; [27] RECORD
 19055 939C			.var BALL2	= adr.BALL2 .word
 19056 = A27A			BALL2.X	= DATAORIGIN+$077F
 19057 = A27C			BALL2.Y	= DATAORIGIN+$0781
 19058 = A27E			BALL2.FINEX	= DATAORIGIN+$0783
 19059 = A280			BALL2.FINEY	= DATAORIGIN+$0785
 19060 = A282			BALL2.OLDX	= DATAORIGIN+$0787
 19061 = A284			BALL2.OLDY	= DATAORIGIN+$0789
 19062 = A286			BALL2.SPEED	= DATAORIGIN+$078B
 19063 = A288			BALL2.FINESPEED	= DATAORIGIN+$078D
 19064 = A28A			BALL2.SPEEDX	= DATAORIGIN+$078F
 19065 = A28C			BALL2.SPEEDY	= DATAORIGIN+$0791
 19066 = A28E			BALL2.SBD	= DATAORIGIN+$0793
 19067 = A290			BALL2.BRWHIT	= DATAORIGIN+$0795
 19068 = A291			BALL2.INPLAY	= DATAORIGIN+$0796
 19069 = A292			BALL2.LAUNCH	= DATAORIGIN+$0797
 19070 = A293			BALL2.ONVAUS	= DATAORIGIN+$0798
 19071 = A294			BALL2.STM	= DATAORIGIN+$0799
 19072
 19073 = A237			@VarData	= X
 19074 = 005E			@VarDataSize	= 94
 19075
 19076 939C 60				rts						; ret
 19077 = 939D 44 A2		BALL0
 19077 = 939F 5F A2		BALL1
 19077 = 93A1 7A A2		BALL2
 19077 				.endl
 19078
 19079 93A3			.local	CHOOSE_START_WALL				; FUNCTION
 19080
 19081 				; optimize OK (service.pas), line = 3529
 19082
 19083 93A3 A9 01			lda #$01
 19084 93A5 8D A3 A2			sta ST
 19085 93A8 A9 00			lda #$00
 19086 93AA 8D A4 A2			sta ST+1
 19087
 19088 				; optimize OK (service.pas), line = 3587
 19089
 19090 93AD AD A3 A2			lda ST
 19091 93B0 8D 9D A2			sta RESULT
 19092 93B3 AD A4 A2			lda ST+1
 19093 93B6 8D 9E A2			sta RESULT+1
 19094 93B9			@exit
 19095
 19096 				; ------------------------------------------------------------
 19097
 19098 = A29D			RESULT	= DATAORIGIN+$07A2
 19099 = 0046			PX	= $46
 19100 = 0064			PY	= $64
 19101 = 0022			DX	= $22
 19102 = 0023			DY	= $23
 19103 = 0013			DDX	= $13
 19104 = 000E			DDY	= $0E
 19105 = A29F			X	= DATAORIGIN+$07A4
 19106 = A2A1			Y	= DATAORIGIN+$07A6
 19107 = A2A3			ST	= DATAORIGIN+$07A8
 19108 = A2A5			OLDX	= DATAORIGIN+$07AA
 19109 = A2A7			OLDY	= DATAORIGIN+$07AC
 19110 = A2A9			NEWX	= DATAORIGIN+$07AE
 19111 = A2AB			NEWY	= DATAORIGIN+$07B0
 19112
 19113 = A29F			@VarData	= X
 19114 = 000E			@VarDataSize	= 14
 19115
 19116 93B9 60				rts						; ret
 19117 				.endl
 19118
 19119 93BA			.local	SET_START_PARAMETERS				; PROCEDURE
 19120
 19121 				; optimize OK (service.pas), line = 3596
 19122
 19123 93BA A9 01			lda #$01
 19124 93BC 8D AD A2			sta X
 19125
 19126 93BF			l_3814
 19127 				; --- ForToDoCondition
 19128 93BF AD AD A2			lda X
 19129 93C2 C9 03			cmp #$03
 19130 93C4 B0 4E			jcs l_3822
 19131
 19132 				; optimize OK (service.pas), line = 3598
 19133
 19134 93C6 0A				asl @
 19135 93C7 0A				asl @
 19136 93C8 A8				tay
 19137 93C9 A9 00			lda #$00
 19138 93CB 99 C4 9C			sta adr.SCORE.PLAYER,y
 19139 93CE 99 C5 9C			sta adr.SCORE.PLAYER+1,y
 19140 93D1 99 C6 9C			sta adr.SCORE.PLAYER+2,y
 19141 93D4 99 C7 9C			sta adr.SCORE.PLAYER+3,y
 19142
 19143 				; optimize OK (service.pas), line = 3599
 19144
 19145 93D7 AC AD A2			ldy X
 19146 93DA A9 05			lda #$05
 19147 93DC 99 D3 9C			sta adr.SCORE.LIVES,y
 19148
 19149 				; optimize OK (service.pas), line = 3600
 19150
 19151 93DF A9 01			lda #$01
 19152 93E1 99 D0 9C			sta adr.SCORE.WALL_N,y
 19153
 19154 				; optimize OK (service.pas), line = 3601
 19155
 19156 93E4 AD E9 9A			lda WALL_P
 19157 93E7 85 8E			sta @move.dst
 19158 93E9 AD AD A2			lda X
 19159 93EC 18 6D EA 9A			add WALL_P+1
 19160 93F0 85 8F			sta @move.dst+1
 19161 93F2 AD ED 9A			lda ALL_WALLS
 19162 93F5 85 8A			sta @move.src
 19163 93F7 AD EE 9A			lda ALL_WALLS+1
 19164 93FA 85 8B			sta @move.src+1
 19165 93FC A9 00			lda <256
 19166 93FE 85 86			sta @move.cnt
 19167 9400 A9 01			lda >256
 19168 9402 85 87			sta @move.cnt+1
 19169 9404 20 CE 11			jsr @move
 19170
 19171 				; optimize OK (service.pas), line = 3603
 19172
 19173 9407 AC AD A2			ldy X
 19174 940A A9 00			lda #$00
 19175 940C 99 DB 9C			sta adr.SCORE.ROUNDSEL,y
 19176
 19177 				; --- ForToDoEpilog
 19178 940F EE AD A2			inc X
 19179 9412 D0 AB			jne l_3814
 19180 9414			l_3822
 19181
 19182 				; optimize OK (service.pas), line = 3606
 19183
 19184 9414 A9 01			lda #$01
 19185 9416 8D DF 9C			sta CUR_PLAYER
 19186
 19187 				; ------------------------------------------------------------
 19188
 19189 = A2AD			X	= DATAORIGIN+$07B2
 19190
 19191 = A2AD			@VarData	= X
 19192 = 0001			@VarDataSize	= 1
 19193
 19194 9419			@exit
 19195 					.ifdef @new
 19196 					lda <@VarData
 19197 					sta :ztmp
 19198 					lda >@VarData
 19199 					ldy #@VarDataSize-1
 19200 					jmp @FreeMem
 19201 					els
 19202 9419 60				rts						; ret
 19203 					eif
 19204 				.endl
 19205
 19206 941A			.local	MAINSCREEN					; FUNCTION
 19207
 19208 				; optimize FAIL ('NOSOUND', service.pas), line = 3666
 19209
 19210 941A 20 59 2D			jsr NOSOUND
 19211
 19212 				; optimize OK (service.pas), line = 3667
 19213
 19214 941D A9 00			lda #$00
 19215 941F 8D DE 9C			sta SCORE.ABORTPLAY
 19216
 19217 				; optimize OK (service.pas), line = 3672
 19218
 19219 9422 AD A3 9A			lda PLAYSCREEN
 19220 9425 8D 9D A0			sta SETPALETTE.BTM
 19221 9428 AD A4 9A			lda PLAYSCREEN+1
 19222 942B 8D 9E A0			sta SETPALETTE.BTM+1
 19223 942E 20 35 34			jsr SETPALETTE
 19224
 19225 				; optimize OK (service.pas), line = 3678
 19226
 19227 9431 AD 47 9C			lda PRESENTS.OFS
 19228 9434 8D 04 A0			sta BLITBOX.SRC
 19229 9437 AD 48 9C			lda PRESENTS.OFS+1
 19230 943A 8D 05 A0			sta BLITBOX.SRC+1
 19231 943D AD 49 9C			lda PRESENTS.OFS+2
 19232 9440 8D 06 A0			sta BLITBOX.SRC+2
 19233 9443 AD 4A 9C			lda PRESENTS.OFS+3
 19234 9446 8D 07 A0			sta BLITBOX.SRC+3
 19235 9449 A9 00			lda #$00
 19236 944B 8D 08 A0			sta BLITBOX.DST
 19237 944E A9 50			lda #$50
 19238 9450 8D 09 A0			sta BLITBOX.DST+1
 19239 9453 A9 00			lda #$00
 19240 9455 8D 0A A0			sta BLITBOX.DST+2
 19241 9458 8D 0B A0			sta BLITBOX.DST+3
 19242 945B A9 40			lda #$40
 19243 945D 8D 0C A0			sta BLITBOX.W
 19244 9460 A9 01			lda #$01
 19245 9462 8D 0D A0			sta BLITBOX.W+1
 19246 9465 A9 C8			lda #$C8
 19247 9467 8D 0E A0			sta BLITBOX.H
 19248 946A 20 FE 2A			jsr BLITBOX
 19249
 19250 				; optimize OK (service.pas), line = 3716
 19251
 19252 946D A9 01			lda #$01
 19253 946F 8D AE A2			sta RESULT
 19254 9472 A9 00			lda #$00
 19255 9474 8D AF A2			sta RESULT+1
 19256 9477			@exit
 19257
 19258 				; ------------------------------------------------------------
 19259
 19260 = A2AE			RESULT	= DATAORIGIN+$07B3
 19261 = A2B0			X	= DATAORIGIN+$07B5
 19262 = A2B2			Y	= DATAORIGIN+$07B7
 19263 = A2B4			Z	= DATAORIGIN+$07B9
 19264 = A2B6			K	= DATAORIGIN+$07BB
 19265 = A2B8			IK	= DATAORIGIN+$07BD
 19266
 19267 = A2B0			@VarData	= X
 19268 = 000A			@VarDataSize	= 10
 19269
 19270 9477 60				rts						; ret
 19271 				.endl
 19272
 19273 9478			.local	START_GAME					; PROCEDURE
 19274
 19275 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3724
 19276
 19277 9478 20 BA 93			jsr SET_START_PARAMETERS
 19278
 19279 				; optimize OK (service.pas), line = 3725
 19280
 19281 947B AD BB A2			lda PLAYERS+1
 19282 947E D0 05			bne @+
 19283 9480 AD BA A2			lda PLAYERS
 19284 9483 C9 01			cmp #$01
 19285 				@
 19286 9485 D0 05			jne l_3884
 19287 9487 A9 00			lda #$00
 19288 9489 8D D5 9C			sta adr.SCORE.LIVES+$02
 19289 948C			l_3884
 19290
 19291 				; optimize OK (service.pas), line = 3728
 19292
 19293 948C A9 00			lda #$00
 19294 948E 8D E7 9C			sta TRAINER
 19295
 19296 				; optimize OK (service.pas), line = 3729
 19297
 19298 9491 AD EB 9A			lda WALL
 19299 9494 85 8E			sta @move.dst
 19300 9496 AD EC 9A			lda WALL+1
 19301 9499 85 8F			sta @move.dst+1
 19302 949B AD E9 9A			lda WALL_P
 19303 949E 85 8A			sta @move.src
 19304 94A0 AD DF 9C			lda CUR_PLAYER
 19305 94A3 18 6D EA 9A			add WALL_P+1
 19306 94A7 85 8B			sta @move.src+1
 19307 94A9 A9 00			lda <256
 19308 94AB 85 86			sta @move.cnt
 19309 94AD A9 01			lda >256
 19310 94AF 85 87			sta @move.cnt+1
 19311 94B1 20 CE 11			jsr @move
 19312
 19313 				; optimize FAIL ('SET_WALL', service.pas), line = 3733
 19314
 19315 94B4 20 E1 50			jsr SET_WALL
 19316
 19317 				; optimize OK (service.pas), line = 3735
 19318
 19319 94B7 AD C3 9A			lda PATTERN
 19320 94BA 8D A1 A1			sta FILL_PICTURE_WITH_PATTERN.PATT
 19321 94BD AD C4 9A			lda PATTERN+1
 19322 94C0 8D A2 A1			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 19323 94C3 20 5B 71			jsr FILL_PICTURE_WITH_PATTERN
 19324
 19325 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3736
 19326
 19327 94C6 E8				inx
 19328 94C7 AD A3 9A 95 96		mva PLAYSCREEN :STACKORIGIN,x
 19329 94CC AD A4 9A 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 19330 94D1 20 E0 33			jsr SHOWBTMPICTURE
 19331
 19332 				; optimize OK (service.pas), line = 3739
 19333
 19334 94D4 AD A3 9A			lda PLAYSCREEN
 19335 94D7 8D 9D A0			sta SETPALETTE.BTM
 19336 94DA AD A4 9A			lda PLAYSCREEN+1
 19337 94DD 8D 9E A0			sta SETPALETTE.BTM+1
 19338 94E0 20 35 34			jsr SETPALETTE
 19339
 19340 				; optimize OK (service.pas), line = 3743
 19341
 19342 94E3 AD C8 9C			lda adr.SCORE.PLAYER+$04
 19343 94E6 8D EC A1			sta WRITE_SCORE.SC
 19344 94E9 AD C9 9C			lda adr.SCORE.PLAYER+1+$04
 19345 94EC 8D ED A1			sta WRITE_SCORE.SC+1
 19346 94EF AD CA 9C			lda adr.SCORE.PLAYER+2+$04
 19347 94F2 8D EE A1			sta WRITE_SCORE.SC+2
 19348 94F5 AD CB 9C			lda adr.SCORE.PLAYER+3+$04
 19349 94F8 8D EF A1			sta WRITE_SCORE.SC+3
 19350 94FB A9 FD			lda #$FD
 19351 94FD 8D E8 A1			sta WRITE_SCORE.PX
 19352 9500 A9 00			lda #$00
 19353 9502 8D E9 A1			sta WRITE_SCORE.PX+1
 19354 9505 A9 3C			lda #$3C
 19355 9507 8D EA A1			sta WRITE_SCORE.PY
 19356 950A A9 00			lda #$00
 19357 950C 8D EB A1			sta WRITE_SCORE.PY+1
 19358 950F 20 BA 7B			jsr WRITE_SCORE
 19359
 19360 				; optimize OK (service.pas), line = 3744
 19361
 19362 9512 AD CC 9C			lda adr.SCORE.PLAYER+$08
 19363 9515 8D EC A1			sta WRITE_SCORE.SC
 19364 9518 AD CD 9C			lda adr.SCORE.PLAYER+1+$08
 19365 951B 8D ED A1			sta WRITE_SCORE.SC+1
 19366 951E AD CE 9C			lda adr.SCORE.PLAYER+2+$08
 19367 9521 8D EE A1			sta WRITE_SCORE.SC+2
 19368 9524 AD CF 9C			lda adr.SCORE.PLAYER+3+$08
 19369 9527 8D EF A1			sta WRITE_SCORE.SC+3
 19370 952A A9 FD			lda #$FD
 19371 952C 8D E8 A1			sta WRITE_SCORE.PX
 19372 952F A9 00			lda #$00
 19373 9531 8D E9 A1			sta WRITE_SCORE.PX+1
 19374 9534 A9 5D			lda #$5D
 19375 9536 8D EA A1			sta WRITE_SCORE.PY
 19376 9539 A9 00			lda #$00
 19377 953B 8D EB A1			sta WRITE_SCORE.PY+1
 19378 953E 20 BA 7B			jsr WRITE_SCORE
 19379
 19380 				; optimize OK (service.pas), line = 3745
 19381
 19382 9541 A9 FD			lda #$FD
 19383 9543 8D E8 A1			sta WRITE_SCORE.PX
 19384 9546 A9 00			lda #$00
 19385 9548 8D E9 A1			sta WRITE_SCORE.PX+1
 19386 954B A9 80			lda #$80
 19387 954D 8D EA A1			sta WRITE_SCORE.PY
 19388 9550 A9 00			lda #$00
 19389 9552 8D EB A1			sta WRITE_SCORE.PY+1
 19390 9555 AD D6 9C			lda SCORE.HISCORE
 19391 9558 8D EC A1			sta WRITE_SCORE.SC
 19392 955B AD D7 9C			lda SCORE.HISCORE+1
 19393 955E 8D ED A1			sta WRITE_SCORE.SC+1
 19394 9561 AD D8 9C			lda SCORE.HISCORE+2
 19395 9564 8D EE A1			sta WRITE_SCORE.SC+2
 19396 9567 AD D9 9C			lda SCORE.HISCORE+3
 19397 956A 8D EF A1			sta WRITE_SCORE.SC+3
 19398 956D 20 BA 7B			jsr WRITE_SCORE
 19399
 19400 				; --- RepeatUntilProlog
 19401 9570			l_38B6
 19402
 19403 				; --- RepeatUntilProlog
 19404 9570			l_38B7
 19405
 19406 				; optimize OK (service.pas), line = 3755
 19407
 19408 9570 AC DF 9C			ldy CUR_PLAYER
 19409 9573 B9 DB 9C			lda adr.SCORE.ROUNDSEL,y
 19410 9576 D0 77			jne l_38C9
 19411
 19412 				; optimize FAIL (1, service.pas), line = 3757
 19413
 19414 9578 E8				inx
 19415 9579 AD DF 9C 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19416 957E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19417 9582 20 A3 93			jsr CHOOSE_START_WALL
 19418 9585 E8				inx
 19419 9586 AD 9D A2 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 19420 958B AD 9E A2 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 19421 9590 B4 95			ldy :STACKORIGIN-1,x
 19422 9592 B5 96			lda :STACKORIGIN,x
 19423 9594 99 D0 9C			sta adr.SCORE.WALL_N,y
 19424 9597 CA				dex
 19425 9598 CA				dex
 19426
 19427 				; optimize OK (service.pas), line = 3760
 19428
 19429 9599 A9 00			lda #$00
 19430 959B 85 9F			sta :STACKORIGIN+9
 19431 959D AD DF 9C			lda CUR_PLAYER
 19432 95A0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19433 95A2 AC DF 9C			ldy CUR_PLAYER
 19434 95A5 B9 D0 9C			lda adr.SCORE.WALL_N,y
 19435 95A8 38 E9 01			sub #$01
 19436 95AB 85 86			sta :eax
 19437 95AD A9 00			lda #$00
 19438 95AF E9 00			sbc #$00
 19439 95B1 85 87			sta :eax+1
 19440 95B3 A9 00			lda #$00
 19441 95B5 85 8E			sta :ecx
 19442 95B7 A9 01			lda #$01
 19443 95B9 85 8F			sta :ecx+1
 19444 					.ifdef fmulinit
 19445 					fmulu_16
 19446 					els
 19447 95BB 20 23 13			imulCX
 19448 					eif
 19449 95BE AD E9 9A			lda WALL_P
 19450 95C1 18 65 9F			add :STACKORIGIN+9
 19451 95C4 85 8E			sta @move.dst
 19452 95C6 AD EA 9A			lda WALL_P+1
 19453 95C9 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19454 95CB 85 8F			sta @move.dst+1
 19455 95CD A5 86			lda :eax
 19456 95CF 18 6D ED 9A			add ALL_WALLS
 19457 95D3 85 8A			sta @move.src
 19458 95D5 A5 87			lda :eax+1
 19459 95D7 6D EE 9A			adc ALL_WALLS+1
 19460 95DA 85 8B			sta @move.src+1
 19461 95DC A9 00			lda <256
 19462 95DE 85 86			sta @move.cnt
 19463 95E0 A9 01			lda >256
 19464 95E2 85 87			sta @move.cnt+1
 19465 95E4 20 CE 11			jsr @move
 19466
 19467 				; optimize OK (service.pas), line = 3764
 19468
 19469 95E7 AC DF 9C			ldy CUR_PLAYER
 19470 95EA A9 01			lda #$01
 19471 95EC 99 DB 9C			sta adr.SCORE.ROUNDSEL,y
 19472 95EF			l_38C9
 19473
 19474 				; optimize OK (service.pas), line = 3768
 19475
 19476 95EF AD EB 9A			lda WALL
 19477 95F2 85 8E			sta @move.dst
 19478 95F4 AD EC 9A			lda WALL+1
 19479 95F7 85 8F			sta @move.dst+1
 19480 95F9 AD E9 9A			lda WALL_P
 19481 95FC 85 8A			sta @move.src
 19482 95FE AD DF 9C			lda CUR_PLAYER
 19483 9601 18 6D EA 9A			add WALL_P+1
 19484 9605 85 8B			sta @move.src+1
 19485 9607 A9 00			lda <256
 19486 9609 85 86			sta @move.cnt
 19487 960B A9 01			lda >256
 19488 960D 85 87			sta @move.cnt+1
 19489 960F 20 CE 11			jsr @move
 19490
 19491 				; optimize FAIL ('SET_WALL', service.pas), line = 3769
 19492
 19493 9612 20 E1 50			jsr SET_WALL
 19494
 19495 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3774
 19496
 19497 9615 20 88 8B			jsr BOUNCEBALL
 19498 9618 AD 36 A2			lda BOUNCEBALL.RESULT
 19499 961B 8D BC A2			sta NWALL
 19500
 19501 				; optimize OK (service.pas), line = 3777
 19502
 19503 961E F0 6A			jeq l_3917
 19504
 19505 				; optimize OK (service.pas), line = 3780
 19506
 19507 9620 AC DF 9C			ldy CUR_PLAYER
 19508 9623 B9 D0 9C			lda adr.SCORE.WALL_N,y
 19509 9626 18 69 01			add #$01
 19510 9629 99 D0 9C			sta adr.SCORE.WALL_N,y
 19511
 19512 				; optimize OK (service.pas), line = 3783
 19513
 19514 962C AD C3 9C			lda TOTALWALL
 19515 962F D9 D0 9C			cmp adr.SCORE.WALL_N,y
 19516 9632 B0 05			jcs l_3933
 19517
 19518 				; optimize OK (service.pas), line = 3784
 19519
 19520 9634 A9 01			lda #$01
 19521 9636 99 D0 9C			sta adr.SCORE.WALL_N,y
 19522 9639			l_3933
 19523
 19524 				; optimize OK (service.pas), line = 3787
 19525
 19526 9639 A9 00			lda #$00
 19527 963B 85 9F			sta :STACKORIGIN+9
 19528 963D AD DF 9C			lda CUR_PLAYER
 19529 9640 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19530 9642 AC DF 9C			ldy CUR_PLAYER
 19531 9645 B9 D0 9C			lda adr.SCORE.WALL_N,y
 19532 9648 38 E9 01			sub #$01
 19533 964B 85 86			sta :eax
 19534 964D A9 00			lda #$00
 19535 964F E9 00			sbc #$00
 19536 9651 85 87			sta :eax+1
 19537 9653 A9 00			lda #$00
 19538 9655 85 8E			sta :ecx
 19539 9657 A9 01			lda #$01
 19540 9659 85 8F			sta :ecx+1
 19541 					.ifdef fmulinit
 19542 					fmulu_16
 19543 					els
 19544 965B 20 23 13			imulCX
 19545 					eif
 19546 965E AD E9 9A			lda WALL_P
 19547 9661 18 65 9F			add :STACKORIGIN+9
 19548 9664 85 8E			sta @move.dst
 19549 9666 AD EA 9A			lda WALL_P+1
 19550 9669 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19551 966B 85 8F			sta @move.dst+1
 19552 966D A5 86			lda :eax
 19553 966F 18 6D ED 9A			add ALL_WALLS
 19554 9673 85 8A			sta @move.src
 19555 9675 A5 87			lda :eax+1
 19556 9677 6D EE 9A			adc ALL_WALLS+1
 19557 967A 85 8B			sta @move.src+1
 19558 967C A9 00			lda <256
 19559 967E 85 86			sta @move.cnt
 19560 9680 A9 01			lda >256
 19561 9682 85 87			sta @move.cnt+1
 19562 9684 20 CE 11			jsr @move
 19563 9687 4C 95 96			jmp l_3965
 19564 968A			l_3917
 19565
 19566 				; optimize OK (service.pas), line = 3793
 19567
 19568 968A AC DF 9C			ldy CUR_PLAYER
 19569 968D B9 D3 9C			lda adr.SCORE.LIVES,y
 19570 9690 D0 03			jne l_397A
 19571 9692 20 AB 73			jsr GAME_OVER
 19572 9695			l_3965
 19573 9695			l_397A
 19574
 19575 				; optimize OK (service.pas), line = 3798
 19576
 19577 9695 AD BC A2			lda NWALL
 19578 9698 F0 03 4C 70 95		jne l_38B7
 19579
 19580 				; optimize FAIL (0, service.pas), line = 3801
 19581
 19582 969D EE DF 9C			inc CUR_PLAYER
 19583
 19584 				; optimize OK (service.pas), line = 3802
 19585
 19586 96A0 AD BA A2			lda PLAYERS
 19587 96A3 CD DF 9C			cmp CUR_PLAYER
 19588 96A6 AD BB A2			lda PLAYERS+1
 19589 96A9 E9 00			sbc #$00
 19590 96AB 50 02			svc
 19591 96AD 49 80			eor #$80
 19592 96AF 10 05			jpl l_39A2
 19593 96B1 A9 01			lda #$01
 19594 96B3 8D DF 9C			sta CUR_PLAYER
 19595 96B6			l_39A2
 19596
 19597 				; optimize OK (service.pas), line = 3808
 19598
 19599 96B6 AC DF 9C			ldy CUR_PLAYER
 19600 96B9 B9 D3 9C			lda adr.SCORE.LIVES,y
 19601 96BC D0 09			jne l_39BE
 19602 96BE A9 03			lda #$03
 19603 96C0 38 ED DF 9C			sub CUR_PLAYER
 19604 96C4 8D DF 9C			sta CUR_PLAYER
 19605 96C7			l_39BE
 19606
 19607 				; optimize OK (service.pas), line = 3813
 19608
 19609 96C7 A0 01			ldy #1
 19610 96C9 AD D4 9C			lda adr.SCORE.LIVES+$01
 19611 96CC F0 01			beq @+
 19612 96CE 88				dey
 19613 				@
 19614 96CF 84 9F			sty :STACKORIGIN+9
 19615 96D1 A0 01			ldy #1
 19616 96D3 AD D5 9C			lda adr.SCORE.LIVES+$02
 19617 96D6 F0 01			beq @+
 19618 96D8 88				dey
 19619 				@
 19620 96D9 98				tya
 19621 96DA 25 9F			and :STACKORIGIN+9
 19622 96DC 0D DE 9C			ora SCORE.ABORTPLAY
 19623 96DF D0 03 4C 70 95		jeq l_38B6
 19624
 19625 				; ------------------------------------------------------------
 19626
 19627 = A2BA			PLAYERS	= DATAORIGIN+$07BF
 19628 = A2BC			NWALL	= DATAORIGIN+$07C1
 19629
 19630 = A2BA			@VarData	= PLAYERS
 19631 = 0003			@VarDataSize	= 3
 19632
 19633 96E4			@exit
 19634 					.ifdef @new
 19635 					lda <@VarData
 19636 					sta :ztmp
 19637 					lda >@VarData
 19638 					ldy #@VarDataSize-1
 19639 					jmp @FreeMem
 19640 					els
 19641 96E4 60				rts						; ret
 19642 					eif
 19643 				.endl
 19644
 19645 96E5			.local	INIT_GAME					; PROCEDURE
 19646
 19647 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 137
 19648
 19649 96E5 20 F7 2D			jsr INITSVGA
 19650
 19651 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 138
 19652
 19653 96E8 20 B8 2D			jsr INITROWARRAY
 19654
 19655 				; optimize OK (btm.inc), line = 1
 19656
 19657 96EB A9 00			lda #$00
 19658 96ED 8D 0F 9C			sta PLAYSCREEN.OFS
 19659 96F0 A9 4A			lda #$4A
 19660 96F2 8D 10 9C			sta PLAYSCREEN.OFS+1
 19661 96F5 A9 01			lda #$01
 19662 96F7 8D 11 9C			sta PLAYSCREEN.OFS+2
 19663 96FA A9 00			lda #$00
 19664 96FC 8D 12 9C			sta PLAYSCREEN.OFS+3
 19665
 19666 				; optimize OK (btm.inc), line = 2
 19667
 19668 96FF A9 40			lda #$40
 19669 9701 8D 0B 9C			sta PLAYSCREEN.WIDTH
 19670 9704 A9 01			lda #$01
 19671 9706 8D 0C 9C			sta PLAYSCREEN.WIDTH+1
 19672
 19673 				; optimize OK (btm.inc), line = 3
 19674
 19675 9709 A9 C8			lda #$C8
 19676 970B 8D 0D 9C			sta PLAYSCREEN.HEIGHT
 19677 970E A9 00			lda #$00
 19678 9710 8D 0E 9C			sta PLAYSCREEN.HEIGHT+1
 19679
 19680 				; optimize OK (btm.inc), line = 5
 19681
 19682 9713 8D 47 9C			sta PRESENTS.OFS
 19683 9716 A9 44			lda #$44
 19684 9718 8D 48 9C			sta PRESENTS.OFS+1
 19685 971B A9 02			lda #$02
 19686 971D 8D 49 9C			sta PRESENTS.OFS+2
 19687 9720 A9 00			lda #$00
 19688 9722 8D 4A 9C			sta PRESENTS.OFS+3
 19689
 19690 				; optimize OK (btm.inc), line = 6
 19691
 19692 9725 A9 40			lda #$40
 19693 9727 8D 43 9C			sta PRESENTS.WIDTH
 19694 972A A9 01			lda #$01
 19695 972C 8D 44 9C			sta PRESENTS.WIDTH+1
 19696
 19697 				; optimize OK (btm.inc), line = 7
 19698
 19699 972F A9 C8			lda #$C8
 19700 9731 8D 45 9C			sta PRESENTS.HEIGHT
 19701 9734 A9 00			lda #$00
 19702 9736 8D 46 9C			sta PRESENTS.HEIGHT+1
 19703
 19704 				; optimize OK (btm.inc), line = 9
 19705
 19706 9739 8D 37 9C			sta EXPLOSION.OFS
 19707 973C A9 3E			lda #$3E
 19708 973E 8D 38 9C			sta EXPLOSION.OFS+1
 19709 9741 A9 03			lda #$03
 19710 9743 8D 39 9C			sta EXPLOSION.OFS+2
 19711 9746 A9 00			lda #$00
 19712 9748 8D 3A 9C			sta EXPLOSION.OFS+3
 19713
 19714 				; optimize OK (btm.inc), line = 10
 19715
 19716 974B A9 2A			lda #$2A
 19717 974D 8D 33 9C			sta EXPLOSION.WIDTH
 19718 9750 A9 00			lda #$00
 19719 9752 8D 34 9C			sta EXPLOSION.WIDTH+1
 19720
 19721 				; optimize OK (btm.inc), line = 11
 19722
 19723 9755 A9 72			lda #$72
 19724 9757 8D 35 9C			sta EXPLOSION.HEIGHT
 19725 975A A9 00			lda #$00
 19726 975C 8D 36 9C			sta EXPLOSION.HEIGHT+1
 19727
 19728 				; optimize OK (btm.inc), line = 13
 19729
 19730 975F A9 B4			lda #$B4
 19731 9761 8D 3F 9C			sta NEWVAUS.OFS
 19732 9764 A9 50			lda #$50
 19733 9766 8D 40 9C			sta NEWVAUS.OFS+1
 19734 9769 A9 03			lda #$03
 19735 976B 8D 41 9C			sta NEWVAUS.OFS+2
 19736 976E A9 00			lda #$00
 19737 9770 8D 42 9C			sta NEWVAUS.OFS+3
 19738
 19739 				; optimize OK (btm.inc), line = 14
 19740
 19741 9773 A9 29			lda #$29
 19742 9775 8D 3B 9C			sta NEWVAUS.WIDTH
 19743 9778 A9 00			lda #$00
 19744 977A 8D 3C 9C			sta NEWVAUS.WIDTH+1
 19745
 19746 				; optimize OK (btm.inc), line = 15
 19747
 19748 977D A9 C1			lda #$C1
 19749 977F 8D 3D 9C			sta NEWVAUS.HEIGHT
 19750 9782 A9 00			lda #$00
 19751 9784 8D 3E 9C			sta NEWVAUS.HEIGHT+1
 19752
 19753 				; optimize OK (btm.inc), line = 17
 19754
 19755 9787 A9 9D			lda #$9D
 19756 9789 8D 4F 9C			sta SOUNDFX.OFS
 19757 978C A9 6F			lda #$6F
 19758 978E 8D 50 9C			sta SOUNDFX.OFS+1
 19759 9791 A9 03			lda #$03
 19760 9793 8D 51 9C			sta SOUNDFX.OFS+2
 19761 9796 A9 00			lda #$00
 19762 9798 8D 52 9C			sta SOUNDFX.OFS+3
 19763
 19764 				; optimize OK (btm.inc), line = 18
 19765
 19766 979B A9 15			lda #$15
 19767 979D 8D 4B 9C			sta SOUNDFX.WIDTH
 19768 97A0 A9 00			lda #$00
 19769 97A2 8D 4C 9C			sta SOUNDFX.WIDTH+1
 19770
 19771 				; optimize OK (btm.inc), line = 19
 19772
 19773 97A5 A9 26			lda #$26
 19774 97A7 8D 4D 9C			sta SOUNDFX.HEIGHT
 19775 97AA A9 00			lda #$00
 19776 97AC 8D 4E 9C			sta SOUNDFX.HEIGHT+1
 19777
 19778 				; optimize OK (btm.inc), line = 21
 19779
 19780 97AF A9 BB			lda #$BB
 19781 97B1 8D 57 9C			sta SHINEWALL.OFS
 19782 97B4 A9 72			lda #$72
 19783 97B6 8D 58 9C			sta SHINEWALL.OFS+1
 19784 97B9 A9 03			lda #$03
 19785 97BB 8D 59 9C			sta SHINEWALL.OFS+2
 19786 97BE A9 00			lda #$00
 19787 97C0 8D 5A 9C			sta SHINEWALL.OFS+3
 19788
 19789 				; optimize OK (btm.inc), line = 22
 19790
 19791 97C3 A9 10			lda #$10
 19792 97C5 8D 53 9C			sta SHINEWALL.WIDTH
 19793 97C8 A9 00			lda #$00
 19794 97CA 8D 54 9C			sta SHINEWALL.WIDTH+1
 19795
 19796 				; optimize OK (btm.inc), line = 23
 19797
 19798 97CD A9 50			lda #$50
 19799 97CF 8D 55 9C			sta SHINEWALL.HEIGHT
 19800 97D2 A9 00			lda #$00
 19801 97D4 8D 56 9C			sta SHINEWALL.HEIGHT+1
 19802
 19803 				; optimize OK (btm.inc), line = 25
 19804
 19805 97D7 A9 BB			lda #$BB
 19806 97D9 8D 5F 9C			sta MINIVAUS.OFS
 19807 97DC A9 77			lda #$77
 19808 97DE 8D 60 9C			sta MINIVAUS.OFS+1
 19809 97E1 A9 03			lda #$03
 19810 97E3 8D 61 9C			sta MINIVAUS.OFS+2
 19811 97E6 A9 00			lda #$00
 19812 97E8 8D 62 9C			sta MINIVAUS.OFS+3
 19813
 19814 				; optimize OK (btm.inc), line = 26
 19815
 19816 97EB A9 14			lda #$14
 19817 97ED 8D 5B 9C			sta MINIVAUS.WIDTH
 19818 97F0 A9 00			lda #$00
 19819 97F2 8D 5C 9C			sta MINIVAUS.WIDTH+1
 19820
 19821 				; optimize OK (btm.inc), line = 27
 19822
 19823 97F5 A9 05			lda #$05
 19824 97F7 8D 5D 9C			sta MINIVAUS.HEIGHT
 19825 97FA A9 00			lda #$00
 19826 97FC 8D 5E 9C			sta MINIVAUS.HEIGHT+1
 19827
 19828 				; optimize OK (btm.inc), line = 29
 19829
 19830 97FF A9 1F			lda #$1F
 19831 9801 8D 67 9C			sta LEVELSEL.OFS
 19832 9804 A9 78			lda #$78
 19833 9806 8D 68 9C			sta LEVELSEL.OFS+1
 19834 9809 A9 03			lda #$03
 19835 980B 8D 69 9C			sta LEVELSEL.OFS+2
 19836 980E A9 00			lda #$00
 19837 9810 8D 6A 9C			sta LEVELSEL.OFS+3
 19838
 19839 				; optimize OK (btm.inc), line = 30
 19840
 19841 9813 A9 15			lda #$15
 19842 9815 8D 63 9C			sta LEVELSEL.WIDTH
 19843 9818 A9 00			lda #$00
 19844 981A 8D 64 9C			sta LEVELSEL.WIDTH+1
 19845
 19846 				; optimize OK (btm.inc), line = 31
 19847
 19848 981D A9 5F			lda #$5F
 19849 981F 8D 65 9C			sta LEVELSEL.HEIGHT
 19850 9822 A9 00			lda #$00
 19851 9824 8D 66 9C			sta LEVELSEL.HEIGHT+1
 19852
 19853 				; optimize OK (btm.inc), line = 33
 19854
 19855 9827 A9 EA			lda #$EA
 19856 9829 8D 6F 9C			sta LETTERS.OFS
 19857 982C A9 7F			lda #$7F
 19858 982E 8D 70 9C			sta LETTERS.OFS+1
 19859 9831 A9 03			lda #$03
 19860 9833 8D 71 9C			sta LETTERS.OFS+2
 19861 9836 A9 00			lda #$00
 19862 9838 8D 72 9C			sta LETTERS.OFS+3
 19863
 19864 				; optimize OK (btm.inc), line = 34
 19865
 19866 983B A9 80			lda #$80
 19867 983D 8D 6B 9C			sta LETTERS.WIDTH
 19868 9840 A9 00			lda #$00
 19869 9842 8D 6C 9C			sta LETTERS.WIDTH+1
 19870
 19871 				; optimize OK (btm.inc), line = 35
 19872
 19873 9845 A9 38			lda #$38
 19874 9847 8D 6D 9C			sta LETTERS.HEIGHT
 19875 984A A9 00			lda #$00
 19876 984C 8D 6E 9C			sta LETTERS.HEIGHT+1
 19877
 19878 				; optimize OK (btm.inc), line = 37
 19879
 19880 984F A9 EA			lda #$EA
 19881 9851 8D 1F 9C			sta NORMAL.OFS
 19882 9854 A9 9B			lda #$9B
 19883 9856 8D 20 9C			sta NORMAL.OFS+1
 19884 9859 A9 03			lda #$03
 19885 985B 8D 21 9C			sta NORMAL.OFS+2
 19886 985E A9 00			lda #$00
 19887 9860 8D 22 9C			sta NORMAL.OFS+3
 19888
 19889 				; optimize OK (btm.inc), line = 38
 19890
 19891 9863 A9 20			lda #$20
 19892 9865 8D 1B 9C			sta NORMAL.WIDTH
 19893 9868 A9 00			lda #$00
 19894 986A 8D 1C 9C			sta NORMAL.WIDTH+1
 19895
 19896 				; optimize OK (btm.inc), line = 39
 19897
 19898 986D A9 07			lda #$07
 19899 986F 8D 1D 9C			sta NORMAL.HEIGHT
 19900 9872 A9 00			lda #$00
 19901 9874 8D 1E 9C			sta NORMAL.HEIGHT+1
 19902
 19903 				; optimize OK (btm.inc), line = 41
 19904
 19905 9877 A9 CA			lda #$CA
 19906 9879 8D 2F 9C			sta LASERS.OFS
 19907 987C A9 9C			lda #$9C
 19908 987E 8D 30 9C			sta LASERS.OFS+1
 19909 9881 A9 03			lda #$03
 19910 9883 8D 31 9C			sta LASERS.OFS+2
 19911 9886 A9 00			lda #$00
 19912 9888 8D 32 9C			sta LASERS.OFS+3
 19913
 19914 				; optimize OK (btm.inc), line = 42
 19915
 19916 988B A9 20			lda #$20
 19917 988D 8D 2B 9C			sta LASERS.WIDTH
 19918 9890 A9 00			lda #$00
 19919 9892 8D 2C 9C			sta LASERS.WIDTH+1
 19920
 19921 				; optimize OK (btm.inc), line = 43
 19922
 19923 9895 A9 07			lda #$07
 19924 9897 8D 2D 9C			sta LASERS.HEIGHT
 19925 989A A9 00			lda #$00
 19926 989C 8D 2E 9C			sta LASERS.HEIGHT+1
 19927
 19928 				; optimize OK (btm.inc), line = 45
 19929
 19930 989F A9 AA			lda #$AA
 19931 98A1 8D 27 9C			sta ENLARGED.OFS
 19932 98A4 A9 9D			lda #$9D
 19933 98A6 8D 28 9C			sta ENLARGED.OFS+1
 19934 98A9 A9 03			lda #$03
 19935 98AB 8D 29 9C			sta ENLARGED.OFS+2
 19936 98AE A9 00			lda #$00
 19937 98B0 8D 2A 9C			sta ENLARGED.OFS+3
 19938
 19939 				; optimize OK (btm.inc), line = 46
 19940
 19941 98B3 A9 40			lda #$40
 19942 98B5 8D 23 9C			sta ENLARGED.WIDTH
 19943 98B8 A9 00			lda #$00
 19944 98BA 8D 24 9C			sta ENLARGED.WIDTH+1
 19945
 19946 				; optimize OK (btm.inc), line = 47
 19947
 19948 98BD A9 07			lda #$07
 19949 98BF 8D 25 9C			sta ENLARGED.HEIGHT
 19950 98C2 A9 00			lda #$00
 19951 98C4 8D 26 9C			sta ENLARGED.HEIGHT+1
 19952
 19953 				; optimize OK (btm.inc), line = 49
 19954
 19955 98C7 A9 6A			lda #$6A
 19956 98C9 8D 77 9C			sta SHOOTS.OFS
 19957 98CC A9 9F			lda #$9F
 19958 98CE 8D 78 9C			sta SHOOTS.OFS+1
 19959 98D1 A9 03			lda #$03
 19960 98D3 8D 79 9C			sta SHOOTS.OFS+2
 19961 98D6 A9 00			lda #$00
 19962 98D8 8D 7A 9C			sta SHOOTS.OFS+3
 19963
 19964 				; optimize OK (btm.inc), line = 50
 19965
 19966 98DB A9 0D			lda #$0D
 19967 98DD 8D 73 9C			sta SHOOTS.WIDTH
 19968 98E0 A9 00			lda #$00
 19969 98E2 8D 74 9C			sta SHOOTS.WIDTH+1
 19970
 19971 				; optimize OK (btm.inc), line = 51
 19972
 19973 98E5 A9 08			lda #$08
 19974 98E7 8D 75 9C			sta SHOOTS.HEIGHT
 19975 98EA A9 00			lda #$00
 19976 98EC 8D 76 9C			sta SHOOTS.HEIGHT+1
 19977
 19978 				; optimize OK (btm.inc), line = 53
 19979
 19980 98EF A9 D2			lda #$D2
 19981 98F1 8D 7F 9C			sta FLUX.OFS
 19982 98F4 A9 9F			lda #$9F
 19983 98F6 8D 80 9C			sta FLUX.OFS+1
 19984 98F9 A9 03			lda #$03
 19985 98FB 8D 81 9C			sta FLUX.OFS+2
 19986 98FE A9 00			lda #$00
 19987 9900 8D 82 9C			sta FLUX.OFS+3
 19988
 19989 				; optimize OK (btm.inc), line = 54
 19990
 19991 9903 A9 08			lda #$08
 19992 9905 8D 7B 9C			sta FLUX.WIDTH
 19993 9908 A9 00			lda #$00
 19994 990A 8D 7C 9C			sta FLUX.WIDTH+1
 19995
 19996 				; optimize OK (btm.inc), line = 55
 19997
 19998 990D A9 29			lda #$29
 19999 990F 8D 7D 9C			sta FLUX.HEIGHT
 20000 9912 A9 00			lda #$00
 20001 9914 8D 7E 9C			sta FLUX.HEIGHT+1
 20002
 20003 				; optimize OK (btm.inc), line = 57
 20004
 20005 9917 A9 1A			lda #$1A
 20006 9919 8D 07 9C			sta BALLDATA.OFS
 20007 991C A9 A1			lda #$A1
 20008 991E 8D 08 9C			sta BALLDATA.OFS+1
 20009 9921 A9 03			lda #$03
 20010 9923 8D 09 9C			sta BALLDATA.OFS+2
 20011 9926 A9 00			lda #$00
 20012 9928 8D 0A 9C			sta BALLDATA.OFS+3
 20013
 20014 				; optimize OK (btm.inc), line = 58
 20015
 20016 992B A9 05			lda #$05
 20017 992D 8D 03 9C			sta BALLDATA.WIDTH
 20018 9930 A9 00			lda #$00
 20019 9932 8D 04 9C			sta BALLDATA.WIDTH+1
 20020
 20021 				; optimize OK (btm.inc), line = 59
 20022
 20023 9935 A9 05			lda #$05
 20024 9937 8D 05 9C			sta BALLDATA.HEIGHT
 20025 993A A9 00			lda #$00
 20026 993C 8D 06 9C			sta BALLDATA.HEIGHT+1
 20027
 20028 				; optimize OK (btm.inc), line = 61
 20029
 20030 993F A9 33			lda #$33
 20031 9941 8D 94 9C			sta PATTERN.OFS
 20032 9944 A9 A1			lda #$A1
 20033 9946 8D 95 9C			sta PATTERN.OFS+1
 20034 9949 A9 03			lda #$03
 20035 994B 8D 96 9C			sta PATTERN.OFS+2
 20036 994E A9 00			lda #$00
 20037 9950 8D 97 9C			sta PATTERN.OFS+3
 20038
 20039 				; optimize OK (btm.inc), line = 62
 20040
 20041 9953 A9 1A			lda #$1A
 20042 9955 8D 90 9C			sta PATTERN.WIDTH
 20043 9958 A9 00			lda #$00
 20044 995A 8D 91 9C			sta PATTERN.WIDTH+1
 20045
 20046 				; optimize OK (btm.inc), line = 63
 20047
 20048 995D A9 18			lda #$18
 20049 995F 8D 92 9C			sta PATTERN.HEIGHT
 20050 9962 A9 00			lda #$00
 20051 9964 8D 93 9C			sta PATTERN.HEIGHT+1
 20052
 20053 				; optimize OK (btm.inc), line = 65
 20054
 20055 9967 A9 A3			lda #$A3
 20056 9969 8D 9C 9C			sta PATTERN0.OFS
 20057 996C 8D 9D 9C			sta PATTERN0.OFS+1
 20058 996F A9 03			lda #$03
 20059 9971 8D 9E 9C			sta PATTERN0.OFS+2
 20060 9974 A9 00			lda #$00
 20061 9976 8D 9F 9C			sta PATTERN0.OFS+3
 20062
 20063 				; optimize OK (btm.inc), line = 66
 20064
 20065 9979 A9 1A			lda #$1A
 20066 997B 8D 98 9C			sta PATTERN0.WIDTH
 20067 997E A9 00			lda #$00
 20068 9980 8D 99 9C			sta PATTERN0.WIDTH+1
 20069
 20070 				; optimize OK (btm.inc), line = 67
 20071
 20072 9983 A9 18			lda #$18
 20073 9985 8D 9A 9C			sta PATTERN0.HEIGHT
 20074 9988 A9 00			lda #$00
 20075 998A 8D 9B 9C			sta PATTERN0.HEIGHT+1
 20076
 20077 				; optimize OK (btm.inc), line = 69
 20078
 20079 998D A9 13			lda #$13
 20080 998F 8D A4 9C			sta PATTERN1.OFS
 20081 9992 A9 A6			lda #$A6
 20082 9994 8D A5 9C			sta PATTERN1.OFS+1
 20083 9997 A9 03			lda #$03
 20084 9999 8D A6 9C			sta PATTERN1.OFS+2
 20085 999C A9 00			lda #$00
 20086 999E 8D A7 9C			sta PATTERN1.OFS+3
 20087
 20088 				; optimize OK (btm.inc), line = 70
 20089
 20090 99A1 A9 0E			lda #$0E
 20091 99A3 8D A0 9C			sta PATTERN1.WIDTH
 20092 99A6 A9 00			lda #$00
 20093 99A8 8D A1 9C			sta PATTERN1.WIDTH+1
 20094
 20095 				; optimize OK (btm.inc), line = 71
 20096
 20097 99AB A9 0E			lda #$0E
 20098 99AD 8D A2 9C			sta PATTERN1.HEIGHT
 20099 99B0 A9 00			lda #$00
 20100 99B2 8D A3 9C			sta PATTERN1.HEIGHT+1
 20101
 20102 				; optimize OK (btm.inc), line = 73
 20103
 20104 99B5 A9 D7			lda #$D7
 20105 99B7 8D AC 9C			sta PATTERN2.OFS
 20106 99BA A9 A6			lda #$A6
 20107 99BC 8D AD 9C			sta PATTERN2.OFS+1
 20108 99BF A9 03			lda #$03
 20109 99C1 8D AE 9C			sta PATTERN2.OFS+2
 20110 99C4 A9 00			lda #$00
 20111 99C6 8D AF 9C			sta PATTERN2.OFS+3
 20112
 20113 				; optimize OK (btm.inc), line = 74
 20114
 20115 99C9 A9 26			lda #$26
 20116 99CB 8D A8 9C			sta PATTERN2.WIDTH
 20117 99CE A9 00			lda #$00
 20118 99D0 8D A9 9C			sta PATTERN2.WIDTH+1
 20119
 20120 				; optimize OK (btm.inc), line = 75
 20121
 20122 99D3 A9 23			lda #$23
 20123 99D5 8D AA 9C			sta PATTERN2.HEIGHT
 20124 99D8 A9 00			lda #$00
 20125 99DA 8D AB 9C			sta PATTERN2.HEIGHT+1
 20126
 20127 				; optimize OK (btm.inc), line = 77
 20128
 20129 99DD A9 09			lda #$09
 20130 99DF 8D B4 9C			sta PATTERN3.OFS
 20131 99E2 A9 AC			lda #$AC
 20132 99E4 8D B5 9C			sta PATTERN3.OFS+1
 20133 99E7 A9 03			lda #$03
 20134 99E9 8D B6 9C			sta PATTERN3.OFS+2
 20135 99EC A9 00			lda #$00
 20136 99EE 8D B7 9C			sta PATTERN3.OFS+3
 20137
 20138 				; optimize OK (btm.inc), line = 78
 20139
 20140 99F1 A9 1C			lda #$1C
 20141 99F3 8D B0 9C			sta PATTERN3.WIDTH
 20142 99F6 A9 00			lda #$00
 20143 99F8 8D B1 9C			sta PATTERN3.WIDTH+1
 20144
 20145 				; optimize OK (btm.inc), line = 79
 20146
 20147 99FB A9 1D			lda #$1D
 20148 99FD 8D B2 9C			sta PATTERN3.HEIGHT
 20149 9A00 A9 00			lda #$00
 20150 9A02 8D B3 9C			sta PATTERN3.HEIGHT+1
 20151
 20152 				; optimize OK (btm.inc), line = 81
 20153
 20154 9A05 A9 35			lda #$35
 20155 9A07 8D BC 9C			sta PATTERN4.OFS
 20156 9A0A A9 AF			lda #$AF
 20157 9A0C 8D BD 9C			sta PATTERN4.OFS+1
 20158 9A0F A9 03			lda #$03
 20159 9A11 8D BE 9C			sta PATTERN4.OFS+2
 20160 9A14 A9 00			lda #$00
 20161 9A16 8D BF 9C			sta PATTERN4.OFS+3
 20162
 20163 				; optimize OK (btm.inc), line = 82
 20164
 20165 9A19 A9 1E			lda #$1E
 20166 9A1B 8D B8 9C			sta PATTERN4.WIDTH
 20167 9A1E A9 00			lda #$00
 20168 9A20 8D B9 9C			sta PATTERN4.WIDTH+1
 20169
 20170 				; optimize OK (btm.inc), line = 83
 20171
 20172 9A23 A9 1E			lda #$1E
 20173 9A25 8D BA 9C			sta PATTERN4.HEIGHT
 20174 9A28 A9 00			lda #$00
 20175 9A2A 8D BB 9C			sta PATTERN4.HEIGHT+1
 20176
 20177 				; optimize OK (arkanoid_vbxe.pas), line = 145
 20178
 20179 9A2D A9 01			lda #$01
 20180 9A2F 8D E5 9B			sta MOUS.FIRE
 20181
 20182 				; optimize OK (arkanoid_vbxe.pas), line = 147
 20183
 20184 9A32 A9 20			lda #$20
 20185 9A34 8D C3 9C			sta TOTALWALL
 20186
 20187 				; optimize OK (arkanoid_vbxe.pas), line = 149
 20188
 20189 9A37 A9 50			lda #$50
 20190 9A39 8D D6 9C			sta SCORE.HISCORE
 20191 9A3C A9 C3			lda #$C3
 20192 9A3E 8D D7 9C			sta SCORE.HISCORE+1
 20193 9A41 A9 00			lda #$00
 20194 9A43 8D D8 9C			sta SCORE.HISCORE+2
 20195 9A46 8D D9 9C			sta SCORE.HISCORE+3
 20196
 20197 				; optimize OK (arkanoid_vbxe.pas), line = 152
 20198
 20199 9A49 A9 01			lda #$01
 20200 9A4B 8D 01 9D			sta SOUND_ON
 20201
 20202 				; optimize OK (arkanoid_vbxe.pas), line = 153
 20203
 20204 9A4E A9 03			lda #$03
 20205 9A50 8D E5 9C			sta LV
 20206 9A53 A9 00			lda #$00
 20207 9A55 8D E6 9C			sta LV+1
 20208
 20209 				; --- RepeatUntilProlog
 20210 9A58			l_3B03
 20211
 20212 				; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 157
 20213
 20214 9A58 20 5D 2A			jsr MOUSERESET
 20215
 20216 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 160
 20217
 20218 9A5B 20 1A 94			jsr MAINSCREEN
 20219 9A5E AD AE A2			lda MAINSCREEN.RESULT
 20220 9A61 8D DA 9C			sta SCORE.PL_NUMB
 20221
 20222 				; optimize OK (arkanoid_vbxe.pas), line = 162
 20223
 20224 9A64 F0 0D			jeq l_3B1A
 20225 9A66 A9 01			lda #$01
 20226 9A68 8D BA A2			sta START_GAME.PLAYERS
 20227 9A6B A9 00			lda #$00
 20228 9A6D 8D BB A2			sta START_GAME.PLAYERS+1
 20229 9A70 20 78 94			jsr START_GAME
 20230 9A73			l_3B1A
 20231
 20232 				; optimize OK (arkanoid_vbxe.pas), line = 164
 20233
 20234 9A73 AD DA 9C			lda SCORE.PL_NUMB
 20235 9A76 C9 01			cmp #$01
 20236 9A78 B0 DE			jcs l_3B03
 20237
 20238 9A7A			@exit
 20239 					.ifdef @new
 20240 					lda <@VarData
 20241 					sta :ztmp
 20242 					lda >@VarData
 20243 					ldy #@VarDataSize-1
 20244 					jmp @FreeMem
 20245 					els
 20246 9A7A 60				rts						; ret
 20247 					eif
 20248 				.endl
 20249 9A7B			l_0022
 20250
 20251 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 172
 20252
 20253 9A7B 20 E5 96			jsr INIT_GAME
 20254
 20255 				; ------------------------------------------------------------
 20256
 20257 = 5000			VBXE_OVRADR	= $5000
 20258 = 014A00			VBXE_DATA	= $14A00
 20259 = DC00			LEVELS_WALL	= $DC00
 20260 = 9BD9			adr.MOUS	= DATAORIGIN+$00DE	; [13] RECORD
 20261 9A7E			.var MOUS	= adr.MOUS .word
 20262 = 9BD9			MOUS.X	= DATAORIGIN+$00DE
 20263 = 9BDB			MOUS.Y	= DATAORIGIN+$00E0
 20264 = 9BDD			MOUS.LEFT	= DATAORIGIN+$00E2
 20265 = 9BDF			MOUS.RIGHT	= DATAORIGIN+$00E4
 20266 = 9BE1			MOUS.TOP	= DATAORIGIN+$00E6
 20267 = 9BE3			MOUS.BOTTOM	= DATAORIGIN+$00E8
 20268 = 9BE5			MOUS.FIRE	= DATAORIGIN+$00EA
 20269 = B100			adr.BLT	= $B100
 20270 9A7E			.var BLT	= adr.BLT .word
 20271 = B100			adr.BLT.SRC_ADR	= $B100
 20272 9A7E			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 20273 = B100			BLT.SRC_ADR.BYTE0	= $B100
 20274 = B101			BLT.SRC_ADR.BYTE1	= $B101
 20275 = B102			BLT.SRC_ADR.BYTE2	= $B102
 20276 = B103			BLT.SRC_STEP_Y	= $B103
 20277 = B105			BLT.SRC_STEP_X	= $B105
 20278 = B106			adr.BLT.DST_ADR	= $B106
 20279 9A7E			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 20280 = B106			BLT.DST_ADR.BYTE0	= $B106
 20281 = B107			BLT.DST_ADR.BYTE1	= $B107
 20282 = B108			BLT.DST_ADR.BYTE2	= $B108
 20283 = B109			BLT.DST_STEP_Y	= $B109
 20284 = B10B			BLT.DST_STEP_X	= $B10B
 20285 = B10C			BLT.BLT_WIDTH	= $B10C
 20286 = B10E			BLT.BLT_HEIGHT	= $B10E
 20287 = B10F			BLT.BLT_AND_MASK	= $B10F
 20288 = B110			BLT.BLT_XOR_MASK	= $B110
 20289 = B111			BLT.BLT_COLLISION_MASK	= $B111
 20290 = B112			BLT.BLT_ZOOM	= $B112
 20291 = B113			BLT.PATTERN_FEATURE	= $B113
 20292 = B114			BLT.BLT_CONTROL	= $B114
 20293 = 9BE6			adr.VBXE_RAM	= DATAORIGIN+$00EB	; [8] OBJECT
 20294 9A7E			.var VBXE_RAM	= adr.VBXE_RAM .word
 20295 = 9BE6			VBXE_RAM.POSITION	= DATAORIGIN+$00EB
 20296 = 9BEA			VBXE_RAM.SIZE	= DATAORIGIN+$00EF
 20297 = 5000			VRAM	= $5000
 20298 = 0001			ERR1	= $01
 20299 = 0002			ERR2	= $02
 20300 = 0003			ERR3	= $03
 20301 = 0004			ERR4	= $04
 20302 = 000A			SCRMIN	= $0A
 20303 = 00D8			SCRMAX	= $D8
 20304 = 000C			SCRTOP	= $0C
 20305 = 00C8			SCRBOT	= $C8
 20306 = 0022			VAUS_W	= $22
 20307 = 0004			VAUS_H	= $04
 20308 = 00B8			VAUS_LINE	= $B8
 20309 = 00FF			EMP	= $FF
 20310 = 0005			BALLDIM	= $05
 20311 = 0003			BALLSPOT	= $03
 20312 = 001E			BALLDEV	= $1E
 20313 = 000A			SPEEDFLASH	= $0A
 20314 = 105E			adr.FLASH	= CODEORIGIN+$005E
 20315 9A7E			.var FLASH	= adr.FLASH .word
 20316 = 1069			adr.SCORE_WALL	= CODEORIGIN+$0069
 20317 9A7E			.var SCORE_WALL	= adr.SCORE_WALL .word
 20318 = 107F			adr.EMERG_DEV	= CODEORIGIN+$007F
 20319 9A7E			.var EMERG_DEV	= adr.EMERG_DEV .word
 20320 = 1088			adr.COLORBLOCK	= CODEORIGIN+$0088
 20321 9A7E			.var COLORBLOCK	= adr.COLORBLOCK .word
 20322 = 0001			GRAYDOWN	= $01
 20323 = 0001			STARTWALL	= $01
 20324 = 0064			BALLSPEED	= $64
 20325 = 07D0			MAXSPEED	= $07D0
 20326 = 0064			MAXBRWHIT	= $64
 20327 = 0004			PATNUMBER	= $04
 20328 = 1092			adr.POS_DIGIT	= CODEORIGIN+$0092
 20329 9A7E			.var POS_DIGIT	= adr.POS_DIGIT .word
 20330 = 1096			adr.DIGITS	= CODEORIGIN+$0096
 20331 9A7E			.var DIGITS	= adr.DIGITS .word
 20332 = 10A1			adr.LEVEL	= CODEORIGIN+$00A1
 20333 9A7E			.var LEVEL	= adr.LEVEL .word
 20334 = 0258			SBDIR	= $0258
 20335 = 0003			DEFLEVEL	= $03
 20336 = 012C			LETTER_PROB	= $012C
 20337 = 03E8			LETTER_DROP	= $03E8
 20338 = 0008			LETTER_NUMB	= $08
 20339 = 0008			LETTER_FRM	= $08
 20340 = 0005			LETTER_SBF	= $05
 20341 = 10AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 20342 9A7E			.var LETTER_DIS	= adr.LETTER_DIS .word
 20343 = 00B0			FLUXLEVEL	= $B0
 20344 = 9C03			adr.BALLDATA	= DATAORIGIN+$0108	; [8] RECORD
 20345 9A7E			.var BALLDATA	= adr.BALLDATA .word
 20346 = 9C03			BALLDATA.WIDTH	= DATAORIGIN+$0108
 20347 = 9C05			BALLDATA.HEIGHT	= DATAORIGIN+$010A
 20348 = 9C07			BALLDATA.OFS	= DATAORIGIN+$010C
 20349 = 9C0B			adr.PLAYSCREEN	= DATAORIGIN+$0110	; [8] RECORD
 20350 9A7E			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 20351 = 9C0B			PLAYSCREEN.WIDTH	= DATAORIGIN+$0110
 20352 = 9C0D			PLAYSCREEN.HEIGHT	= DATAORIGIN+$0112
 20353 = 9C0F			PLAYSCREEN.OFS	= DATAORIGIN+$0114
 20354 = 9C13			adr.PLAYVAUS	= DATAORIGIN+$0118	; [8] RECORD
 20355 9A7E			.var PLAYVAUS	= adr.PLAYVAUS .word
 20356 = 9C13			PLAYVAUS.WIDTH	= DATAORIGIN+$0118
 20357 = 9C15			PLAYVAUS.HEIGHT	= DATAORIGIN+$011A
 20358 = 9C17			PLAYVAUS.OFS	= DATAORIGIN+$011C
 20359 = 9C1B			adr.NORMAL	= DATAORIGIN+$0120	; [8] RECORD
 20360 9A7E			.var NORMAL	= adr.NORMAL .word
 20361 = 9C1B			NORMAL.WIDTH	= DATAORIGIN+$0120
 20362 = 9C1D			NORMAL.HEIGHT	= DATAORIGIN+$0122
 20363 = 9C1F			NORMAL.OFS	= DATAORIGIN+$0124
 20364 = 9C23			adr.ENLARGED	= DATAORIGIN+$0128	; [8] RECORD
 20365 9A7E			.var ENLARGED	= adr.ENLARGED .word
 20366 = 9C23			ENLARGED.WIDTH	= DATAORIGIN+$0128
 20367 = 9C25			ENLARGED.HEIGHT	= DATAORIGIN+$012A
 20368 = 9C27			ENLARGED.OFS	= DATAORIGIN+$012C
 20369 = 9C2B			adr.LASERS	= DATAORIGIN+$0130	; [8] RECORD
 20370 9A7E			.var LASERS	= adr.LASERS .word
 20371 = 9C2B			LASERS.WIDTH	= DATAORIGIN+$0130
 20372 = 9C2D			LASERS.HEIGHT	= DATAORIGIN+$0132
 20373 = 9C2F			LASERS.OFS	= DATAORIGIN+$0134
 20374 = 9C33			adr.EXPLOSION	= DATAORIGIN+$0138	; [8] RECORD
 20375 9A7E			.var EXPLOSION	= adr.EXPLOSION .word
 20376 = 9C33			EXPLOSION.WIDTH	= DATAORIGIN+$0138
 20377 = 9C35			EXPLOSION.HEIGHT	= DATAORIGIN+$013A
 20378 = 9C37			EXPLOSION.OFS	= DATAORIGIN+$013C
 20379 = 9C3B			adr.NEWVAUS	= DATAORIGIN+$0140	; [8] RECORD
 20380 9A7E			.var NEWVAUS	= adr.NEWVAUS .word
 20381 = 9C3B			NEWVAUS.WIDTH	= DATAORIGIN+$0140
 20382 = 9C3D			NEWVAUS.HEIGHT	= DATAORIGIN+$0142
 20383 = 9C3F			NEWVAUS.OFS	= DATAORIGIN+$0144
 20384 = 9C43			adr.PRESENTS	= DATAORIGIN+$0148	; [8] RECORD
 20385 9A7E			.var PRESENTS	= adr.PRESENTS .word
 20386 = 9C43			PRESENTS.WIDTH	= DATAORIGIN+$0148
 20387 = 9C45			PRESENTS.HEIGHT	= DATAORIGIN+$014A
 20388 = 9C47			PRESENTS.OFS	= DATAORIGIN+$014C
 20389 = 9C4B			adr.SOUNDFX	= DATAORIGIN+$0150	; [8] RECORD
 20390 9A7E			.var SOUNDFX	= adr.SOUNDFX .word
 20391 = 9C4B			SOUNDFX.WIDTH	= DATAORIGIN+$0150
 20392 = 9C4D			SOUNDFX.HEIGHT	= DATAORIGIN+$0152
 20393 = 9C4F			SOUNDFX.OFS	= DATAORIGIN+$0154
 20394 = 9C53			adr.SHINEWALL	= DATAORIGIN+$0158	; [8] RECORD
 20395 9A7E			.var SHINEWALL	= adr.SHINEWALL .word
 20396 = 9C53			SHINEWALL.WIDTH	= DATAORIGIN+$0158
 20397 = 9C55			SHINEWALL.HEIGHT	= DATAORIGIN+$015A
 20398 = 9C57			SHINEWALL.OFS	= DATAORIGIN+$015C
 20399 = 9C5B			adr.MINIVAUS	= DATAORIGIN+$0160	; [8] RECORD
 20400 9A7E			.var MINIVAUS	= adr.MINIVAUS .word
 20401 = 9C5B			MINIVAUS.WIDTH	= DATAORIGIN+$0160
 20402 = 9C5D			MINIVAUS.HEIGHT	= DATAORIGIN+$0162
 20403 = 9C5F			MINIVAUS.OFS	= DATAORIGIN+$0164
 20404 = 9C63			adr.LEVELSEL	= DATAORIGIN+$0168	; [8] RECORD
 20405 9A7E			.var LEVELSEL	= adr.LEVELSEL .word
 20406 = 9C63			LEVELSEL.WIDTH	= DATAORIGIN+$0168
 20407 = 9C65			LEVELSEL.HEIGHT	= DATAORIGIN+$016A
 20408 = 9C67			LEVELSEL.OFS	= DATAORIGIN+$016C
 20409 = 9C6B			adr.LETTERS	= DATAORIGIN+$0170	; [8] RECORD
 20410 9A7E			.var LETTERS	= adr.LETTERS .word
 20411 = 9C6B			LETTERS.WIDTH	= DATAORIGIN+$0170
 20412 = 9C6D			LETTERS.HEIGHT	= DATAORIGIN+$0172
 20413 = 9C6F			LETTERS.OFS	= DATAORIGIN+$0174
 20414 = 9C73			adr.SHOOTS	= DATAORIGIN+$0178	; [8] RECORD
 20415 9A7E			.var SHOOTS	= adr.SHOOTS .word
 20416 = 9C73			SHOOTS.WIDTH	= DATAORIGIN+$0178
 20417 = 9C75			SHOOTS.HEIGHT	= DATAORIGIN+$017A
 20418 = 9C77			SHOOTS.OFS	= DATAORIGIN+$017C
 20419 = 9C7B			adr.FLUX	= DATAORIGIN+$0180	; [8] RECORD
 20420 9A7E			.var FLUX	= adr.FLUX .word
 20421 = 9C7B			FLUX.WIDTH	= DATAORIGIN+$0180
 20422 = 9C7D			FLUX.HEIGHT	= DATAORIGIN+$0182
 20423 = 9C7F			FLUX.OFS	= DATAORIGIN+$0184
 20424 = 9C83			adr.VAUS	= DATAORIGIN+$0188	; [13] RECORD
 20425 9A7E			.var VAUS	= adr.VAUS .word
 20426 = 9C83			VAUS.X	= DATAORIGIN+$0188
 20427 = 9C84			VAUS.Y	= DATAORIGIN+$0189
 20428 = 9C85			VAUS.OLDX	= DATAORIGIN+$018A
 20429 = 9C87			VAUS.OLDY	= DATAORIGIN+$018C
 20430 = 9C89			VAUS.OLDLEN	= DATAORIGIN+$018E
 20431 = 9C8B			VAUS.WIDTH	= DATAORIGIN+$0190
 20432 = 9C8C			VAUS.HEIGHT	= DATAORIGIN+$0191
 20433 = 9C8D			VAUS.FLASH	= DATAORIGIN+$0192
 20434 = 9C8E			VAUS.IFLASH	= DATAORIGIN+$0193
 20435 = 9C8F			VAUS.LETTER	= DATAORIGIN+$0194
 20436 = 9C90			adr.PATTERN	= DATAORIGIN+$0195	; [8] RECORD
 20437 9A7E			.var PATTERN	= adr.PATTERN .word
 20438 = 9C90			PATTERN.WIDTH	= DATAORIGIN+$0195
 20439 = 9C92			PATTERN.HEIGHT	= DATAORIGIN+$0197
 20440 = 9C94			PATTERN.OFS	= DATAORIGIN+$0199
 20441 = 9C98			adr.PATTERN0	= DATAORIGIN+$019D	; [8] RECORD
 20442 9A7E			.var PATTERN0	= adr.PATTERN0 .word
 20443 = 9C98			PATTERN0.WIDTH	= DATAORIGIN+$019D
 20444 = 9C9A			PATTERN0.HEIGHT	= DATAORIGIN+$019F
 20445 = 9C9C			PATTERN0.OFS	= DATAORIGIN+$01A1
 20446 = 9CA0			adr.PATTERN1	= DATAORIGIN+$01A5	; [8] RECORD
 20447 9A7E			.var PATTERN1	= adr.PATTERN1 .word
 20448 = 9CA0			PATTERN1.WIDTH	= DATAORIGIN+$01A5
 20449 = 9CA2			PATTERN1.HEIGHT	= DATAORIGIN+$01A7
 20450 = 9CA4			PATTERN1.OFS	= DATAORIGIN+$01A9
 20451 = 9CA8			adr.PATTERN2	= DATAORIGIN+$01AD	; [8] RECORD
 20452 9A7E			.var PATTERN2	= adr.PATTERN2 .word
 20453 = 9CA8			PATTERN2.WIDTH	= DATAORIGIN+$01AD
 20454 = 9CAA			PATTERN2.HEIGHT	= DATAORIGIN+$01AF
 20455 = 9CAC			PATTERN2.OFS	= DATAORIGIN+$01B1
 20456 = 9CB0			adr.PATTERN3	= DATAORIGIN+$01B5	; [8] RECORD
 20457 9A7E			.var PATTERN3	= adr.PATTERN3 .word
 20458 = 9CB0			PATTERN3.WIDTH	= DATAORIGIN+$01B5
 20459 = 9CB2			PATTERN3.HEIGHT	= DATAORIGIN+$01B7
 20460 = 9CB4			PATTERN3.OFS	= DATAORIGIN+$01B9
 20461 = 9CB8			adr.PATTERN4	= DATAORIGIN+$01BD	; [8] RECORD
 20462 9A7E			.var PATTERN4	= adr.PATTERN4 .word
 20463 = 9CB8			PATTERN4.WIDTH	= DATAORIGIN+$01BD
 20464 = 9CBA			PATTERN4.HEIGHT	= DATAORIGIN+$01BF
 20465 = 9CBC			PATTERN4.OFS	= DATAORIGIN+$01C1
 20466 = 9CC0			STATUS	= DATAORIGIN+$01C5
 20467 = 9CC1			SUCCESS	= DATAORIGIN+$01C6
 20468 = 9CC2			REMAIN_BLK	= DATAORIGIN+$01C7
 20469 = 9CC3			TOTALWALL	= DATAORIGIN+$01C8
 20470 = 9CC4			adr.SCORE	= DATAORIGIN+$01C9	; [27] RECORD
 20471 9A7E			.var SCORE	= adr.SCORE .word
 20472 = 9CC4			adr.SCORE.PLAYER	= [DATAORIGIN+$01C9] .array [3] .dword
 20473 9A7E			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 20474 = 9CD0			adr.SCORE.WALL_N	= [DATAORIGIN+$01D5] .array [3]
 20475 9A7E			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 20476 = 9CD3			adr.SCORE.LIVES	= [DATAORIGIN+$01D8] .array [3]
 20477 9A7E			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 20478 = 9CD6			SCORE.HISCORE	= DATAORIGIN+$01DB
 20479 = 9CDA			SCORE.PL_NUMB	= DATAORIGIN+$01DF
 20480 = 9CDB			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01E0] .array [3]
 20481 9A7E			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 20482 = 9CDE			SCORE.ABORTPLAY	= DATAORIGIN+$01E3
 20483 = 9CDF			CUR_PLAYER	= DATAORIGIN+$01E4
 20484 = 9CE0			adr.SHINEREC	= DATAORIGIN+$01E5	; [5] RECORD
 20485 9A7E			.var SHINEREC	= adr.SHINEREC .word
 20486 = 9CE0			SHINEREC.XB	= DATAORIGIN+$01E5
 20487 = 9CE1			SHINEREC.YB	= DATAORIGIN+$01E6
 20488 = 9CE2			SHINEREC.FRAME	= DATAORIGIN+$01E7
 20489 = 9CE3			SHINEREC.BLOCK	= DATAORIGIN+$01E8
 20490 = 9CE4			SHINEREC.ACTIVE	= DATAORIGIN+$01E9
 20491 = 9CE5			LV	= DATAORIGIN+$01EA
 20492 = 9CE7			TRAINER	= DATAORIGIN+$01EC
 20493 = 9CE8			adr.LETT	= DATAORIGIN+$01ED	; [17] RECORD
 20494 9A7E			.var LETT	= adr.LETT .word
 20495 = 9CE8			LETT.X	= DATAORIGIN+$01ED
 20496 = 9CE9			LETT.Y	= DATAORIGIN+$01EE
 20497 = 9CEA			LETT.TYP	= DATAORIGIN+$01EF
 20498 = 9CEC			LETT.FRAME	= DATAORIGIN+$01F1
 20499 = 9CED			LETT.SUBFRAME	= DATAORIGIN+$01F2
 20500 = 9CEE			LETT.ACTIVE	= DATAORIGIN+$01F3
 20501 = 9CEF			LETT.INCOMING	= DATAORIGIN+$01F4
 20502 = 9CF1			LETT.NEXTX	= DATAORIGIN+$01F6
 20503 = 9CF3			LETT.NEXTY	= DATAORIGIN+$01F8
 20504 = 9CF5			LETT.NEXTTYPE	= DATAORIGIN+$01FA
 20505 = 9CF7			LETT.LAST	= DATAORIGIN+$01FC
 20506 = 9CF9			adr.FIRE	= DATAORIGIN+$01FE	; [5] RECORD
 20507 9A7E			.var FIRE	= adr.FIRE .word
 20508 = 9CF9			FIRE.X	= DATAORIGIN+$01FE
 20509 = 9CFA			FIRE.Y	= DATAORIGIN+$01FF
 20510 = 9CFB			FIRE.SHOT	= DATAORIGIN+$0200
 20511 = 9CFC			FIRE.AVL	= DATAORIGIN+$0201
 20512 = 9CFD			FIRE.NW	= DATAORIGIN+$0202
 20513 = 9CFE			BALLS_IN_PLAY	= DATAORIGIN+$0203
 20514 = 9CFF			SCRFLUX	= DATAORIGIN+$0204
 20515 = 9D00			SCRFLUXCNT	= DATAORIGIN+$0205
 20516 = 9D01			SOUND_ON	= DATAORIGIN+$0206
 20517 = 9D02			HLP	= DATAORIGIN+$0207
 20518 = 9D04			adr.DEF_PAL	= [DATAORIGIN+$0209] .array [768]
 20519 9A7E			.var DEF_PAL	= adr.DEF_PAL .word
 20520 = C000			adr.ROW	= $C000
 20521 9A7E			.var ROW	= adr.ROW .word
 20522 = C200			adr.TMP	= $C200
 20523 9A7E			.var TMP	= adr.TMP .word
 20524 = C300			adr.MODY	= $C300
 20525 9A7E			.var MODY	= adr.MODY .word
 20526 = C400			adr.MODX	= $C400
 20527 9A7E			.var MODX	= adr.MODX .word
 20528 = D800			adr.WALL_P	= $D800
 20529 9A7E			.var WALL_P	= adr.WALL_P .word
 20530 = DB00			adr.WALL	= $DB00
 20531 9A7E			.var WALL	= adr.WALL .word
 20532 = DC00			adr.ALL_WALLS	= $DC00
 20533 9A7E			.var ALL_WALLS	= adr.ALL_WALLS .word
 20534 9A7E			@exit
 20535
 20536 9A7E A2 00		@halt	ldx #$00
 20537 9A80 9A				txs
 20538
 20539 					.ifdef MAIN.@DEFINES.ROMOFF
 20540 9A81 EE 01 D3			inc portb
 20541 					.fi
 20542
 20543 9A84 A0 01			ldy #$01
 20544
 20545 9A86 60				rts
 20546
 20547 				; ------------------------------------------------------------
 20548
 20549 9A87			.local	@DEFINES
 20550 9A87			ATARI
 20551 9A87			CPU_6502
 20552 9A87			ROMOFF
 20553 				.endl
 20554
 20555 9A87			.local	@RESOURCE
 20556 				.endl
 20557
 20558 = 9A87 D9 9B		MOUS
 20558 = 9A89 00 B1		BLT
 20558 = 9A8B 00 B1		BLT.SRC_ADR
 20558 = 9A8D 06 B1		BLT.DST_ADR
 20558 = 9A8F E6 9B		VBXE_RAM
 20558 = 9A91 5E 10		FLASH
 20558 = 9A93 69 10		SCORE_WALL
 20558 = 9A95 7F 10		EMERG_DEV
 20558 = 9A97 88 10		COLORBLOCK
 20558 = 9A99 92 10		POS_DIGIT
 20558 = 9A9B 96 10		DIGITS
 20558 = 9A9D A1 10		LEVEL
 20558 = 9A9F AD 10		LETTER_DIS
 20558 = 9AA1 03 9C		BALLDATA
 20558 = 9AA3 0B 9C		PLAYSCREEN
 20558 = 9AA5 13 9C		PLAYVAUS
 20558 = 9AA7 1B 9C		NORMAL
 20558 = 9AA9 23 9C		ENLARGED
 20558 = 9AAB 2B 9C		LASERS
 20558 = 9AAD 33 9C		EXPLOSION
 20558 = 9AAF 3B 9C		NEWVAUS
 20558 = 9AB1 43 9C		PRESENTS
 20558 = 9AB3 4B 9C		SOUNDFX
 20558 = 9AB5 53 9C		SHINEWALL
 20558 = 9AB7 5B 9C		MINIVAUS
 20558 = 9AB9 63 9C		LEVELSEL
 20558 = 9ABB 6B 9C		LETTERS
 20558 = 9ABD 73 9C		SHOOTS
 20558 = 9ABF 7B 9C		FLUX
 20558 = 9AC1 83 9C		VAUS
 20558 = 9AC3 90 9C		PATTERN
 20558 = 9AC5 98 9C		PATTERN0
 20558 = 9AC7 A0 9C		PATTERN1
 20558 = 9AC9 A8 9C		PATTERN2
 20558 = 9ACB B0 9C		PATTERN3
 20558 = 9ACD B8 9C		PATTERN4
 20558 = 9ACF C4 9C		SCORE
 20558 = 9AD1 C4 9C		SCORE.PLAYER
 20558 = 9AD3 D0 9C		SCORE.WALL_N
 20558 = 9AD5 D3 9C		SCORE.LIVES
 20558 = 9AD7 DB 9C		SCORE.ROUNDSEL
 20558 = 9AD9 E0 9C		SHINEREC
 20558 = 9ADB E8 9C		LETT
 20558 = 9ADD F9 9C		FIRE
 20558 = 9ADF 04 9D		DEF_PAL
 20558 = 9AE1 00 C0		ROW
 20558 = 9AE3 00 C2		TMP
 20558 = 9AE5 00 C3		MODY
 20558 = 9AE7 00 C4		MODX
 20558 = 9AE9 00 D8		WALL_P
 20558 = 9AEB 00 DB		WALL
 20558 = 9AED 00 DC		ALL_WALLS
 20558 				.endl							; MAIN
 20559
 20560 				; ------------------------------------------------------------
 20561 				; ------------------------------------------------------------
 20562
 20563 				.macro	UNITINITIALIZATION
 20564 				
 20565 					.ifdef MAIN.SYSTEM.@UnitInit
 20566 					jsr MAIN.SYSTEM.@UnitInit
 20567 					.fi
 20568 				
 20569 					.ifdef MAIN.ATARI.@UnitInit
 20570 					jsr MAIN.ATARI.@UnitInit
 20571 					.fi
 20572 				
 20573 					.ifdef MAIN.CRT.@UnitInit
 20574 					jsr MAIN.CRT.@UnitInit
 20575 					.fi
 20576 				
 20577 					.ifdef MAIN.TYPES.@UnitInit
 20578 					jsr MAIN.TYPES.@UnitInit
 20579 					.fi
 20580 				
 20581 					.ifdef MAIN.GRAPH.@UnitInit
 20582 					jsr MAIN.GRAPH.@UnitInit
 20583 					.fi
 20584 				
 20585 					.ifdef MAIN.VBXE.@UnitInit
 20586 					jsr MAIN.VBXE.@UnitInit
 20587 					.fi
 20588 				
 20589 					.ifdef MAIN.JOYSTICK.@UnitInit
 20590 					jsr MAIN.JOYSTICK.@UnitInit
 20591 					.fi
 20592 				.endm
 20593
 20594 				; ------------------------------------------------------------
 20595
 20596 					ift .SIZEOF(MAIN.SYSTEM) > 0
 20597 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 20597 				SYSTEM: $1C7D..$25B7
 20598 					eif
 20599
 20600 					ift .SIZEOF(MAIN.ATARI) > 0
 20601 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 20602 					eif
 20603
 20604 					ift .SIZEOF(MAIN.CRT) > 0
 20605 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 20606 					eif
 20607
 20608 					ift .SIZEOF(MAIN.TYPES) > 0
 20609 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 20610 					eif
 20611
 20612 					ift .SIZEOF(MAIN.GRAPH) > 0
 20613 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 20613 				GRAPH: $25B8..$25B9
 20614 					eif
 20615
 20616 					ift .SIZEOF(MAIN.VBXE) > 0
 20617 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 20617 				VBXE: $25BA..$2A51
 20618 					eif
 20619
 20620 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 20621 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 20621 				JOYSTICK: $2A52..$2A59
 20622 					eif
 20623
 20624 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 20624 				CODE: $1000..$9A86
 20625
 20626 					ift .SIZEOF(MAIN.@RESOURCE)>0
 20627 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 20628 					eif
 20629
 20630 9AEF			@end
 20631
 20632 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 20632 				VARS: $9A87..$9AEE
 20633
 20634 				; ------------------------------------------------------------
 20635
 20636 = 9AEF				?adr = *
 20637 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 20638 = 9AFB				?adr = ?old_adr
 20639 					eif
 20640
 20641 					org ?adr
 20642 = 9AFB				?old_adr = *
 20643
 20644 9AFB			DATAORIGIN
 20645 9AFB-9B5C> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20646 9B13 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20647 9B2B 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20648 9B43 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
 20649 9B5B 00 17		.by  $00 $17
 20650
 20651 = 0062			VARINITSIZE	= *-DATAORIGIN
 20652 = 07C2			VARDATASIZE	= 1986
 20653
 20654 = A2BD			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 20655
 20656 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 20656 				DATA: $9AFB..$A2BD
 20657
 20658 					ert DATAORIGIN<@end,'DATA memory overlap'
 20659
 20660 02E0-02E1> F0 1B			run START
 20661
 20662 				; ------------------------------------------------------------
 20663
 20664 				.macro	STATICDATA
 20665 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 20666 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 20667 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 20668 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 20669 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 20670 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 20671 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 20672 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 20673 				.endm
 20674
 20675 					end
