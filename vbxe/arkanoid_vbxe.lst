mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/27] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-A038> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 2030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 2048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 2060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 2078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 2090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 20A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20B5			RTLIB
   131 20B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20B5..$2A4B
   138
   139 				; ------------------------------------------------------------
   140
   141 2A4C			START
   142 2A4C BA				tsx
   143 2A4D 8E CD 9F			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 2A50				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2A50			.local	rominit
     5
     6 2A50 78			        sei
     7 2A51 A9 00		        lda #%00000000
     8 2A53 8D 0E D4		        sta NMIEN       ;$D40E
     9 2A56 A9 FE		        lda #%11111110
    10 2A58 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 2A5B A2 78		        ldx #<nmiint
    33 2A5D A0 2A		        ldy #>nmiint
    34 2A5F 8E FA FF		        stx NMIVEC      ;$FFFA
    35 2A62 8C FB FF		        sty NMIVEC+1
    36
    37 2A65 A2 82		        ldx #<irqint
    38 2A67 A0 2A		        ldy #>irqint
    39 2A69 8E FE FF		        stx IRQVEC      ;$FFFE
    40 2A6C 8C FF FF		        sty IRQVEC+1
    41
    42 2A6F A9 40		        lda #%01000000
    43 2A71 8D 0E D4		        sta NMIEN       ;$D40E
    44 2A74 58			        cli
    45
    46 2A75 4C A3 2A			jmp skp
    47
    48
    49 2A78 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 2A7B 10 03		        spl
    51 2A7D 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 2A80 38			        sec
    54 2A81 24			        .byte $24        ;BIT $18
    55
    56 2A82 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 2A83 EE 01 D3		        inc PORTB       ;$D301
    61
    62 2A86 48			        pha
    63 2A87 8A			        txa
    64 2A88 48			        pha
    65 2A89 BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 2A8A A9 2A		        lda #>iret      ;adres procedury iret
    70 2A8C 48			        pha
    71 2A8D A9 9C		        lda #<iret
    72 2A8F 48			        pha
    73 2A90 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 2A93 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 2A94 90 03		        scc
    79 2A96 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 2A99 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 2A9C 68			iret	pla
    83 2A9D AA				tax
    84 2A9E 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2A9F CE 01 D3		        dec PORTB       ;$D301
    89 2AA2 40			        rti
    90
    91 2AA3			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0408			VLEN	= VARDATASIZE-VARINITSIZE
   150 = A0AA			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2AA3				m@init
Macro: M@INIT [Source: macros.asm]
     2 2AA3 A0 AA			ldy <VADR
     3 2AA5 A2 A0			ldx >VADR
     5 2AA7 A9 00			lda #$00
     6 2AA9 F0 07			beq skp_
     8 2AAB 99 00 10		clr	sta adr: $1000,y
    10 2AAE C8				iny
    11 2AAF D0 04			bne skp
    12 2AB1 E8				inx
    13 2AB2 8E AD 2A		skp_	stx adr+1
    15 2AB5 E0 A4		skp	cpx >VADR+VLEN
    16 2AB7 D0 F2			bne clr
    17 2AB9 C0 B2			cpy <VADR+VLEN
    18 2ABB D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2ABD A2 00			ldx #$00					; X = 0
   169 2ABF 86 82			stx bp						; BP = 0
   170
   171 2AC1 8E 08 D2			stx audctl					; reset POKEY
   172 2AC4 8E 18 D2			stx audctl+$10
   173 2AC7 A9 03			lda #3
   174 2AC9 8D 0F D2			sta skctl
   175 2ACC 8D 1F D2			sta skctl+$10
   176
   177 2ACF CA				dex						; X = 255
   178
   179 2AD0				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2AD0 20 42 36			jsr MAIN.SYSTEM.@UnitInit
    23 2AD3 20 CD 3A			jsr MAIN.VBXE.@UnitInit
   180
   181 2AD6			.local	MAIN						; PROCEDURE
   182
   183 2AD6 4C C9 9F			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2AD9			.local	SYSTEM						; UNIT
   188
   189 2AD9			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2AD9 B5 96			lda :STACKORIGIN,x
   196 2ADB 85 8A			sta A
   197 2ADD B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2ADF 85 8B			sta A+1
   199 2AE1 CA				dex
   200 2AE2			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2AE2 A0 00			ldy #0
   205 2AE4 B1 8A 85 92			mva (:edx),y Result
   206
   207 2AE8			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2AE8 E8				inx
   215 2AE9 A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2AED 60				rts						; ret
   231 				.endl
   232
   233 2AEE			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2AEE			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 2AEE A5 8B			lda :edx+1
   239 2AF0 10 0D			bpl @+
   240
   241 2AF2 A9 00			lda #$00
   242 2AF4 38 E5 8A			sub :edx
   243 2AF7 85 8A			sta :edx
   244 2AF9 A9 00			lda #$00
   245 2AFB E5 8B			sbc :edx+1
   246 2AFD 85 8B			sta :edx+1
   247 				@
   248 2AFF 85 93			sta Result+1
   249
   250 2B01 A5 8A 85 92			mva :edx Result
   251
   252 2B05			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 2B05 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 2B06			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 2B06			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 2B06 A5 8D			lda :edx+3
   269 2B08 10 03			spl
   270 2B0A 20 1C 21			jsr @negEDX
   271
   272 2B0D 85 95			sta Result+3
   273
   274 2B0F A5 8A 85 92			mva :edx Result
   275 2B13 A5 8B 85 93			mva :edx+1 Result+1
   276 2B17 A5 8C 85 94			mva :edx+2 Result+2
   277
   278 2B1B			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 2B1B 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 2B1C			.local	SQRT						; FUNCTION | OVERLOAD
   290 2B1C			.local	@010185000
   291
   292 				; optimize OK (SYSTEM), line = 801
   293
   294 2B1C AD 56 A0			lda X+3
   295 2B1F 30 0B			bmi @+
   296 2B21 0D 55 A0			ora X+2
   297 2B24 0D 54 A0			ora X+1
   298 2B27 0D 53 A0			ora X
   299 2B2A D0 11			jne l_0042
   300 				@
   301 2B2C A9 00			lda #$00
   302 2B2E 8D 57 A0			sta RESULT
   303 2B31 8D 58 A0			sta RESULT+1
   304 2B34 8D 59 A0			sta RESULT+2
   305 2B37 8D 5A A0			sta RESULT+3
   306 2B3A 4C B0 2D			jmp @exit
   307 2B3D			l_0042
   308
   309 				; optimize OK (SYSTEM), line = 803
   310
   311 2B3D A9 5D			lda <C
   312 2B3F 8D 5B A0			sta SP
   313 2B42 A9 A0			lda >C
   314 2B44 8D 5C A0			sta SP+1
   315
   316 				; optimize OK (SYSTEM), line = 805
   317
   318 2B47 AD 53 A0			lda X
   319 2B4A 85 8E			sta :FPMAN0
   320 2B4C AD 54 A0			lda X+1
   321 2B4F 85 8F			sta :FPMAN1
   322 2B51 AD 55 A0			lda X+2
   323 2B54 85 90			sta :FPMAN2
   324 2B56 AD 56 A0			lda X+3
   325 2B59 85 91			sta :FPMAN3
   326 2B5B 20 C1 27			jsr @I2F
   327 2B5E A5 8E			lda :FPMAN0
   328 2B60 8D 5D A0			sta C
   329 2B63 A5 8F			lda :FPMAN1
   330 2B65 8D 5E A0			sta C+1
   331 2B68 A5 90			lda :FPMAN2
   332 2B6A 8D 5F A0			sta C+2
   333 2B6D A5 91			lda :FPMAN3
   334 2B6F 8D 60 A0			sta C+3
   335
   336 				; optimize OK (SYSTEM), line = 807
   337
   338 2B72 C9 3F			cmp #$3F
   339 2B74 D0 13			bne @+
   340 2B76 AD 5F A0			lda C+2
   341 2B79 C9 80			cmp #$80
   342 2B7B D0 0C			bne @+
   343 2B7D AD 5E A0			lda C+1
   344 2B80 C9 00			cmp #$00
   345 2B82 D0 05			bne @+
   346 2B84 AD 5D A0			lda C
   347 2B87 C9 01			cmp #$01
   348 				@
   349 2B89 90 3A			jcc l_0061
   350 2B8B AD 5D A0			lda C
   351 2B8E 85 9F			sta :STACKORIGIN+9
   352 2B90 AD 5E A0			lda C+1
   353 2B93 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   354 2B95 AD 5F A0			lda C+2
   355 2B98 38 E9 80			sub #$80
   356 2B9B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   357 2B9D AD 60 A0			lda C+3
   358 2BA0 E9 3F			sbc #$3F
   359 2BA2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   360 2BA4 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
   361 2BA6 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
   362 2BA8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
   363 2BAA 66 9F			ror :STACKORIGIN+9
   364 2BAC A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   365 2BAE 18 69 80			add #$80
   366 2BB1 8D 5F A0			sta C+2
   367 2BB4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   368 2BB6 69 3F			adc #$3F
   369 2BB8 8D 60 A0			sta C+3
   370 2BBB A5 9F			lda :STACKORIGIN+9
   371 2BBD 8D 5D A0			sta C
   372 2BC0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   373 2BC2 8D 5E A0			sta C+1
   374 2BC5			l_0061
   375
   376 				; optimize OK (SYSTEM), line = 809
   377
   378 2BC5 AC 5B A0 84 84 AC + 	mwy SP :bp2
   379 2BCF A0 00			ldy #$00
   380 2BD1 B1 84			lda (:bp2),y
   381 2BD3 8D 57 A0			sta RESULT
   382 2BD6 C8				iny
   383 2BD7 B1 84			lda (:bp2),y
   384 2BD9 8D 58 A0			sta RESULT+1
   385 2BDC C8				iny
   386 2BDD B1 84			lda (:bp2),y
   387 2BDF 8D 59 A0			sta RESULT+2
   388 2BE2 C8				iny
   389 2BE3 B1 84			lda (:bp2),y
   390 2BE5 8D 5A A0			sta RESULT+3
   391
   392 				; optimize OK (SYSTEM), line = 811
   393
   394 2BE8 AD 53 A0			lda X
   395 2BEB 85 8E			sta :FPMAN0
   396 2BED AD 54 A0			lda X+1
   397 2BF0 85 8F			sta :FPMAN1
   398 2BF2 AD 55 A0			lda X+2
   399 2BF5 85 90			sta :FPMAN2
   400 2BF7 AD 56 A0			lda X+3
   401 2BFA 85 91			sta :FPMAN3
   402 2BFC 20 C1 27			jsr @I2F
   403 2BFF A5 8E			lda :FPMAN0
   404 2C01 85 86			sta :FP1MAN0
   405 2C03 A5 8F			lda :FPMAN1
   406 2C05 85 87			sta :FP1MAN1
   407 2C07 A5 90			lda :FPMAN2
   408 2C09 85 88			sta :FP1MAN2
   409 2C0B A5 91			lda :FPMAN3
   410 2C0D 85 89			sta :FP1MAN3
   411 2C0F AD 57 A0			lda RESULT
   412 2C12 85 8A			sta :FP2MAN0
   413 2C14 AD 58 A0			lda RESULT+1
   414 2C17 85 8B			sta :FP2MAN1
   415 2C19 AD 59 A0			lda RESULT+2
   416 2C1C 85 8C			sta :FP2MAN2
   417 2C1E AD 5A A0			lda RESULT+3
   418 2C21 85 8D			sta :FP2MAN3
   419 2C23 20 88 26			jsr @FDIV
   420 2C26 A5 8E			lda :FPMAN0
   421 2C28 85 8A			sta :FP2MAN0
   422 2C2A A5 8F			lda :FPMAN1
   423 2C2C 85 8B			sta :FP2MAN1
   424 2C2E A5 90			lda :FPMAN2
   425 2C30 85 8C			sta :FP2MAN2
   426 2C32 A5 91			lda :FPMAN3
   427 2C34 85 8D			sta :FP2MAN3
   428 2C36 AD 57 A0			lda RESULT
   429 2C39 85 86			sta :FP1MAN0
   430 2C3B AD 58 A0			lda RESULT+1
   431 2C3E 85 87			sta :FP1MAN1
   432 2C40 AD 59 A0			lda RESULT+2
   433 2C43 85 88			sta :FP1MAN2
   434 2C45 AD 5A A0			lda RESULT+3
   435 2C48 85 89			sta :FP1MAN3
   436 2C4A 20 7B 24			jsr @FADD
   437 2C4D A5 8E			lda :FPMAN0
   438 2C4F 85 86			sta :FP1MAN0
   439 2C51 A5 8F			lda :FPMAN1
   440 2C53 85 87			sta :FP1MAN1
   441 2C55 A5 90			lda :FPMAN2
   442 2C57 85 88			sta :FP1MAN2
   443 2C59 A5 91			lda :FPMAN3
   444 2C5B 85 89			sta :FP1MAN3
   445 2C5D A9 00			lda #$00
   446 2C5F 85 8A			sta :FP2MAN0
   447 2C61 85 8B			sta :FP2MAN1
   448 2C63 85 8C			sta :FP2MAN2
   449 2C65 A9 3F			lda #$3F
   450 2C67 85 8D			sta :FP2MAN3
   451 2C69 20 E7 25			jsr @FMUL
   452 2C6C A5 8E			lda :FPMAN0
   453 2C6E 8D 57 A0			sta RESULT
   454 2C71 A5 8F			lda :FPMAN1
   455 2C73 8D 58 A0			sta RESULT+1
   456 2C76 A5 90			lda :FPMAN2
   457 2C78 8D 59 A0			sta RESULT+2
   458 2C7B A5 91			lda :FPMAN3
   459 2C7D 8D 5A A0			sta RESULT+3
   460
   461 				; optimize OK (SYSTEM), line = 812
   462
   463 2C80 AD 53 A0			lda X
   464 2C83 85 8E			sta :FPMAN0
   465 2C85 AD 54 A0			lda X+1
   466 2C88 85 8F			sta :FPMAN1
   467 2C8A AD 55 A0			lda X+2
   468 2C8D 85 90			sta :FPMAN2
   469 2C8F AD 56 A0			lda X+3
   470 2C92 85 91			sta :FPMAN3
   471 2C94 20 C1 27			jsr @I2F
   472 2C97 A5 8E			lda :FPMAN0
   473 2C99 85 86			sta :FP1MAN0
   474 2C9B A5 8F			lda :FPMAN1
   475 2C9D 85 87			sta :FP1MAN1
   476 2C9F A5 90			lda :FPMAN2
   477 2CA1 85 88			sta :FP1MAN2
   478 2CA3 A5 91			lda :FPMAN3
   479 2CA5 85 89			sta :FP1MAN3
   480 2CA7 AD 57 A0			lda RESULT
   481 2CAA 85 8A			sta :FP2MAN0
   482 2CAC AD 58 A0			lda RESULT+1
   483 2CAF 85 8B			sta :FP2MAN1
   484 2CB1 AD 59 A0			lda RESULT+2
   485 2CB4 85 8C			sta :FP2MAN2
   486 2CB6 AD 5A A0			lda RESULT+3
   487 2CB9 85 8D			sta :FP2MAN3
   488 2CBB 20 88 26			jsr @FDIV
   489 2CBE A5 8E			lda :FPMAN0
   490 2CC0 85 8A			sta :FP2MAN0
   491 2CC2 A5 8F			lda :FPMAN1
   492 2CC4 85 8B			sta :FP2MAN1
   493 2CC6 A5 90			lda :FPMAN2
   494 2CC8 85 8C			sta :FP2MAN2
   495 2CCA A5 91			lda :FPMAN3
   496 2CCC 85 8D			sta :FP2MAN3
   497 2CCE AD 57 A0			lda RESULT
   498 2CD1 85 86			sta :FP1MAN0
   499 2CD3 AD 58 A0			lda RESULT+1
   500 2CD6 85 87			sta :FP1MAN1
   501 2CD8 AD 59 A0			lda RESULT+2
   502 2CDB 85 88			sta :FP1MAN2
   503 2CDD AD 5A A0			lda RESULT+3
   504 2CE0 85 89			sta :FP1MAN3
   505 2CE2 20 7B 24			jsr @FADD
   506 2CE5 A5 8E			lda :FPMAN0
   507 2CE7 85 86			sta :FP1MAN0
   508 2CE9 A5 8F			lda :FPMAN1
   509 2CEB 85 87			sta :FP1MAN1
   510 2CED A5 90			lda :FPMAN2
   511 2CEF 85 88			sta :FP1MAN2
   512 2CF1 A5 91			lda :FPMAN3
   513 2CF3 85 89			sta :FP1MAN3
   514 2CF5 A9 00			lda #$00
   515 2CF7 85 8A			sta :FP2MAN0
   516 2CF9 85 8B			sta :FP2MAN1
   517 2CFB 85 8C			sta :FP2MAN2
   518 2CFD A9 3F			lda #$3F
   519 2CFF 85 8D			sta :FP2MAN3
   520 2D01 20 E7 25			jsr @FMUL
   521 2D04 A5 8E			lda :FPMAN0
   522 2D06 8D 57 A0			sta RESULT
   523 2D09 A5 8F			lda :FPMAN1
   524 2D0B 8D 58 A0			sta RESULT+1
   525 2D0E A5 90			lda :FPMAN2
   526 2D10 8D 59 A0			sta RESULT+2
   527 2D13 A5 91			lda :FPMAN3
   528 2D15 8D 5A A0			sta RESULT+3
   529
   530 				; optimize OK (SYSTEM), line = 813
   531
   532 2D18 AD 53 A0			lda X
   533 2D1B 85 8E			sta :FPMAN0
   534 2D1D AD 54 A0			lda X+1
   535 2D20 85 8F			sta :FPMAN1
   536 2D22 AD 55 A0			lda X+2
   537 2D25 85 90			sta :FPMAN2
   538 2D27 AD 56 A0			lda X+3
   539 2D2A 85 91			sta :FPMAN3
   540 2D2C 20 C1 27			jsr @I2F
   541 2D2F A5 8E			lda :FPMAN0
   542 2D31 85 86			sta :FP1MAN0
   543 2D33 A5 8F			lda :FPMAN1
   544 2D35 85 87			sta :FP1MAN1
   545 2D37 A5 90			lda :FPMAN2
   546 2D39 85 88			sta :FP1MAN2
   547 2D3B A5 91			lda :FPMAN3
   548 2D3D 85 89			sta :FP1MAN3
   549 2D3F AD 57 A0			lda RESULT
   550 2D42 85 8A			sta :FP2MAN0
   551 2D44 AD 58 A0			lda RESULT+1
   552 2D47 85 8B			sta :FP2MAN1
   553 2D49 AD 59 A0			lda RESULT+2
   554 2D4C 85 8C			sta :FP2MAN2
   555 2D4E AD 5A A0			lda RESULT+3
   556 2D51 85 8D			sta :FP2MAN3
   557 2D53 20 88 26			jsr @FDIV
   558 2D56 A5 8E			lda :FPMAN0
   559 2D58 85 8A			sta :FP2MAN0
   560 2D5A A5 8F			lda :FPMAN1
   561 2D5C 85 8B			sta :FP2MAN1
   562 2D5E A5 90			lda :FPMAN2
   563 2D60 85 8C			sta :FP2MAN2
   564 2D62 A5 91			lda :FPMAN3
   565 2D64 85 8D			sta :FP2MAN3
   566 2D66 AD 57 A0			lda RESULT
   567 2D69 85 86			sta :FP1MAN0
   568 2D6B AD 58 A0			lda RESULT+1
   569 2D6E 85 87			sta :FP1MAN1
   570 2D70 AD 59 A0			lda RESULT+2
   571 2D73 85 88			sta :FP1MAN2
   572 2D75 AD 5A A0			lda RESULT+3
   573 2D78 85 89			sta :FP1MAN3
   574 2D7A 20 7B 24			jsr @FADD
   575 2D7D A5 8E			lda :FPMAN0
   576 2D7F 85 86			sta :FP1MAN0
   577 2D81 A5 8F			lda :FPMAN1
   578 2D83 85 87			sta :FP1MAN1
   579 2D85 A5 90			lda :FPMAN2
   580 2D87 85 88			sta :FP1MAN2
   581 2D89 A5 91			lda :FPMAN3
   582 2D8B 85 89			sta :FP1MAN3
   583 2D8D A9 00			lda #$00
   584 2D8F 85 8A			sta :FP2MAN0
   585 2D91 85 8B			sta :FP2MAN1
   586 2D93 85 8C			sta :FP2MAN2
   587 2D95 A9 3F			lda #$3F
   588 2D97 85 8D			sta :FP2MAN3
   589 2D99 20 E7 25			jsr @FMUL
   590 2D9C A5 8E			lda :FPMAN0
   591 2D9E 8D 57 A0			sta RESULT
   592 2DA1 A5 8F			lda :FPMAN1
   593 2DA3 8D 58 A0			sta RESULT+1
   594 2DA6 A5 90			lda :FPMAN2
   595 2DA8 8D 59 A0			sta RESULT+2
   596 2DAB A5 91			lda :FPMAN3
   597 2DAD 8D 5A A0			sta RESULT+3
   598 2DB0			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = A053			X	= DATAORIGIN+$000B
   603 = A057			RESULT	= DATAORIGIN+$000F
   604 = A05B			SP	= DATAORIGIN+$0013
   605 = A05D			C	= DATAORIGIN+$0015
   606
   607 = A053			@VarData	= X
   608 = 000A			@VarDataSize	= 10
   609
   610 2DB0 60				rts						; ret
   611 				.endl
   612 				.endl							; overload
   613
   614 2DB1			.local	ARCTAN						; FUNCTION | OVERLOAD
   615 2DB1			.local	@01018F000
   616
   617 				; optimize OK (SYSTEM), line = 904
   618
   619 2DB1 A9 00			lda #$00
   620 2DB3 8D 71 A0			sta SIGN
   621
   622 				; optimize OK (SYSTEM), line = 905
   623
   624 2DB6 AD 61 A0			lda VALUE
   625 2DB9 8D 69 A0			sta X
   626 2DBC AD 62 A0			lda VALUE+1
   627 2DBF 8D 6A A0			sta X+1
   628 2DC2 AD 63 A0			lda VALUE+2
   629 2DC5 8D 6B A0			sta X+2
   630 2DC8 AD 64 A0			lda VALUE+3
   631 2DCB 8D 6C A0			sta X+3
   632
   633 				; optimize OK (SYSTEM), line = 906
   634
   635 2DCE A9 00			lda #$00
   636 2DD0 8D 6D A0			sta Y
   637 2DD3 8D 6E A0			sta Y+1
   638 2DD6 8D 6F A0			sta Y+2
   639 2DD9 8D 70 A0			sta Y+3
   640
   641 				; optimize OK (SYSTEM), line = 908
   642
   643 2DDC AD 64 A0			lda VALUE+3
   644 2DDF D0 0D			bne @+
   645 2DE1 AD 63 A0			lda VALUE+2
   646 2DE4 D0 08			bne @+
   647 2DE6 AD 62 A0			lda VALUE+1
   648 2DE9 D0 03			bne @+
   649 2DEB AD 61 A0			lda VALUE
   650 				@
   651 2DEE D0 11			jne l_00CB
   652
   653 				; optimize OK (SYSTEM), line = 909
   654
   655 2DF0 A9 00			lda #$00
   656 2DF2 8D 65 A0			sta RESULT
   657 2DF5 8D 66 A0			sta RESULT+1
   658 2DF8 8D 67 A0			sta RESULT+2
   659 2DFB 8D 68 A0			sta RESULT+3
   660 2DFE 4C DA 31			jmp @exit
   661 2E01			l_00CB
   662
   663 				; optimize OK (SYSTEM), line = 912
   664
   665 2E01 AD 6C A0			lda X+3
   666 2E04 10 0D			jpl l_00E9
   667
   668 				; optimize OK (SYSTEM), line = 913
   669
   670 2E06 A9 01			lda #$01
   671 2E08 8D 71 A0			sta SIGN
   672
   673 				; optimize OK (SYSTEM), line = 914
   674
   675 2E0B AD 6C A0			lda X+3
   676 2E0E 49 80			eor #$80
   677 2E10 8D 6C A0			sta X+3
   678 2E13			l_00E9
   679 2E13			l_00D9
   680
   681 				; optimize OK (SYSTEM), line = 917
   682
   683 2E13 A9 00			lda #$00
   684 2E15 85 8A			sta :FP2MAN0
   685 2E17 85 8B			sta :FP2MAN1
   686 2E19 A9 80			lda #$80
   687 2E1B 85 8C			sta :FP2MAN2
   688 2E1D A9 3F			lda #$3F
   689 2E1F 85 8D			sta :FP2MAN3
   690 2E21 AD 69 A0			lda X
   691 2E24 85 86			sta :FP1MAN0
   692 2E26 AD 6A A0			lda X+1
   693 2E29 85 87			sta :FP1MAN1
   694 2E2B AD 6B A0			lda X+2
   695 2E2E 85 88			sta :FP1MAN2
   696 2E30 AD 6C A0			lda X+3
   697 2E33 85 89			sta :FP1MAN3
   698 2E35 20 80 24			jsr @FSUB
   699 2E38 A5 8E			lda :FPMAN0
   700 2E3A 85 9F			sta :STACKORIGIN+9
   701 2E3C A5 8F			lda :FPMAN1
   702 2E3E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   703 2E40 A5 90			lda :FPMAN2
   704 2E42 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   705 2E44 A5 91			lda :FPMAN3
   706 2E46 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   707 2E48 A9 00			lda #$00
   708 2E4A 85 8A			sta :FP2MAN0
   709 2E4C 85 8B			sta :FP2MAN1
   710 2E4E A9 80			lda #$80
   711 2E50 85 8C			sta :FP2MAN2
   712 2E52 A9 3F			lda #$3F
   713 2E54 85 8D			sta :FP2MAN3
   714 2E56 AD 69 A0			lda X
   715 2E59 85 86			sta :FP1MAN0
   716 2E5B AD 6A A0			lda X+1
   717 2E5E 85 87			sta :FP1MAN1
   718 2E60 AD 6B A0			lda X+2
   719 2E63 85 88			sta :FP1MAN2
   720 2E65 AD 6C A0			lda X+3
   721 2E68 85 89			sta :FP1MAN3
   722 2E6A 20 7B 24			jsr @FADD
   723 2E6D A5 8E			lda :FPMAN0
   724 2E6F 85 8A			sta :FP2MAN0
   725 2E71 A5 8F			lda :FPMAN1
   726 2E73 85 8B			sta :FP2MAN1
   727 2E75 A5 90			lda :FPMAN2
   728 2E77 85 8C			sta :FP2MAN2
   729 2E79 A5 91			lda :FPMAN3
   730 2E7B 85 8D			sta :FP2MAN3
   731 2E7D A5 9F			lda :STACKORIGIN+9
   732 2E7F 85 86			sta :FP1MAN0
   733 2E81 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   734 2E83 85 87			sta :FP1MAN1
   735 2E85 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   736 2E87 85 88			sta :FP1MAN2
   737 2E89 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   738 2E8B 85 89			sta :FP1MAN3
   739 2E8D 20 88 26			jsr @FDIV
   740 2E90 A5 8E			lda :FPMAN0
   741 2E92 8D 69 A0			sta X
   742 2E95 A5 8F			lda :FPMAN1
   743 2E97 8D 6A A0			sta X+1
   744 2E9A A5 90			lda :FPMAN2
   745 2E9C 8D 6B A0			sta X+2
   746 2E9F A5 91			lda :FPMAN3
   747 2EA1 8D 6C A0			sta X+3
   748
   749 				; optimize OK (SYSTEM), line = 918
   750
   751 2EA4 AD 69 A0			lda X
   752 2EA7 85 8A			sta :FP2MAN0
   753 2EA9 AD 6A A0			lda X+1
   754 2EAC 85 8B			sta :FP2MAN1
   755 2EAE AD 6B A0			lda X+2
   756 2EB1 85 8C			sta :FP2MAN2
   757 2EB3 AD 6C A0			lda X+3
   758 2EB6 85 8D			sta :FP2MAN3
   759 2EB8 AD 69 A0			lda X
   760 2EBB 85 86			sta :FP1MAN0
   761 2EBD AD 6A A0			lda X+1
   762 2EC0 85 87			sta :FP1MAN1
   763 2EC2 AD 6B A0			lda X+2
   764 2EC5 85 88			sta :FP1MAN2
   765 2EC7 AD 6C A0			lda X+3
   766 2ECA 85 89			sta :FP1MAN3
   767 2ECC 20 E7 25			jsr @FMUL
   768 2ECF A5 8E			lda :FPMAN0
   769 2ED1 8D 6D A0			sta Y
   770 2ED4 A5 8F			lda :FPMAN1
   771 2ED6 8D 6E A0			sta Y+1
   772 2ED9 A5 90			lda :FPMAN2
   773 2EDB 8D 6F A0			sta Y+2
   774 2EDE A5 91			lda :FPMAN3
   775 2EE0 8D 70 A0			sta Y+3
   776
   777 				; optimize OK (SYSTEM), line = 919
   778
   779 2EE3 AD 6D A0			lda Y
   780 2EE6 85 8A			sta :FP2MAN0
   781 2EE8 AD 6E A0			lda Y+1
   782 2EEB 85 8B			sta :FP2MAN1
   783 2EED AD 6F A0			lda Y+2
   784 2EF0 85 8C			sta :FP2MAN2
   785 2EF2 AD 70 A0			lda Y+3
   786 2EF5 85 8D			sta :FP2MAN3
   787 2EF7 A9 4A			lda #$4A
   788 2EF9 85 86			sta :FP1MAN0
   789 2EFB A9 D7			lda #$D7
   790 2EFD 85 87			sta :FP1MAN1
   791 2EFF A9 3B			lda #$3B
   792 2F01 85 88			sta :FP1MAN2
   793 2F03 85 89			sta :FP1MAN3
   794 2F05 20 E7 25			jsr @FMUL
   795 2F08 A5 8E			lda :FPMAN0
   796 2F0A 85 86			sta :FP1MAN0
   797 2F0C A5 8F			lda :FPMAN1
   798 2F0E 85 87			sta :FP1MAN1
   799 2F10 A5 90			lda :FPMAN2
   800 2F12 85 88			sta :FP1MAN2
   801 2F14 A5 91			lda :FPMAN3
   802 2F16 85 89			sta :FP1MAN3
   803 2F18 A9 02			lda #$02
   804 2F1A 85 8A			sta :FP2MAN0
   805 2F1C A9 6E			lda #$6E
   806 2F1E 85 8B			sta :FP2MAN1
   807 2F20 A9 84			lda #$84
   808 2F22 85 8C			sta :FP2MAN2
   809 2F24 A9 3C			lda #$3C
   810 2F26 85 8D			sta :FP2MAN3
   811 2F28 20 80 24			jsr @FSUB
   812 2F2B A5 8E			lda :FPMAN0
   813 2F2D 85 86			sta :FP1MAN0
   814 2F2F A5 8F			lda :FPMAN1
   815 2F31 85 87			sta :FP1MAN1
   816 2F33 A5 90			lda :FPMAN2
   817 2F35 85 88			sta :FP1MAN2
   818 2F37 A5 91			lda :FPMAN3
   819 2F39 85 89			sta :FP1MAN3
   820 2F3B AD 6D A0			lda Y
   821 2F3E 85 8A			sta :FP2MAN0
   822 2F40 AD 6E A0			lda Y+1
   823 2F43 85 8B			sta :FP2MAN1
   824 2F45 AD 6F A0			lda Y+2
   825 2F48 85 8C			sta :FP2MAN2
   826 2F4A AD 70 A0			lda Y+3
   827 2F4D 85 8D			sta :FP2MAN3
   828 2F4F 20 E7 25			jsr @FMUL
   829 2F52 A5 8E			lda :FPMAN0
   830 2F54 85 86			sta :FP1MAN0
   831 2F56 A5 8F			lda :FPMAN1
   832 2F58 85 87			sta :FP1MAN1
   833 2F5A A5 90			lda :FPMAN2
   834 2F5C 85 88			sta :FP1MAN2
   835 2F5E A5 91			lda :FPMAN3
   836 2F60 85 89			sta :FP1MAN3
   837 2F62 A9 FE			lda #$FE
   838 2F64 85 8A			sta :FP2MAN0
   839 2F66 A9 C1			lda #$C1
   840 2F68 85 8B			sta :FP2MAN1
   841 2F6A A9 2F			lda #$2F
   842 2F6C 85 8C			sta :FP2MAN2
   843 2F6E A9 3D			lda #$3D
   844 2F70 85 8D			sta :FP2MAN3
   845 2F72 20 7B 24			jsr @FADD
   846 2F75 A5 8E			lda :FPMAN0
   847 2F77 85 86			sta :FP1MAN0
   848 2F79 A5 8F			lda :FPMAN1
   849 2F7B 85 87			sta :FP1MAN1
   850 2F7D A5 90			lda :FPMAN2
   851 2F7F 85 88			sta :FP1MAN2
   852 2F81 A5 91			lda :FPMAN3
   853 2F83 85 89			sta :FP1MAN3
   854 2F85 AD 6D A0			lda Y
   855 2F88 85 8A			sta :FP2MAN0
   856 2F8A AD 6E A0			lda Y+1
   857 2F8D 85 8B			sta :FP2MAN1
   858 2F8F AD 6F A0			lda Y+2
   859 2F92 85 8C			sta :FP2MAN2
   860 2F94 AD 70 A0			lda Y+3
   861 2F97 85 8D			sta :FP2MAN3
   862 2F99 20 E7 25			jsr @FMUL
   863 2F9C A5 8E			lda :FPMAN0
   864 2F9E 85 86			sta :FP1MAN0
   865 2FA0 A5 8F			lda :FPMAN1
   866 2FA2 85 87			sta :FP1MAN1
   867 2FA4 A5 90			lda :FPMAN2
   868 2FA6 85 88			sta :FP1MAN2
   869 2FA8 A5 91			lda :FPMAN3
   870 2FAA 85 89			sta :FP1MAN3
   871 2FAC A9 74			lda #$74
   872 2FAE 85 8A			sta :FP2MAN0
   873 2FB0 A9 31			lda #$31
   874 2FB2 85 8B			sta :FP2MAN1
   875 2FB4 A9 9A			lda #$9A
   876 2FB6 85 8C			sta :FP2MAN2
   877 2FB8 A9 3D			lda #$3D
   878 2FBA 85 8D			sta :FP2MAN3
   879 2FBC 20 80 24			jsr @FSUB
   880 2FBF A5 8E			lda :FPMAN0
   881 2FC1 85 86			sta :FP1MAN0
   882 2FC3 A5 8F			lda :FPMAN1
   883 2FC5 85 87			sta :FP1MAN1
   884 2FC7 A5 90			lda :FPMAN2
   885 2FC9 85 88			sta :FP1MAN2
   886 2FCB A5 91			lda :FPMAN3
   887 2FCD 85 89			sta :FP1MAN3
   888 2FCF AD 6D A0			lda Y
   889 2FD2 85 8A			sta :FP2MAN0
   890 2FD4 AD 6E A0			lda Y+1
   891 2FD7 85 8B			sta :FP2MAN1
   892 2FD9 AD 6F A0			lda Y+2
   893 2FDC 85 8C			sta :FP2MAN2
   894 2FDE AD 70 A0			lda Y+3
   895 2FE1 85 8D			sta :FP2MAN3
   896 2FE3 20 E7 25			jsr @FMUL
   897 2FE6 A5 8E			lda :FPMAN0
   898 2FE8 85 86			sta :FP1MAN0
   899 2FEA A5 8F			lda :FPMAN1
   900 2FEC 85 87			sta :FP1MAN1
   901 2FEE A5 90			lda :FPMAN2
   902 2FF0 85 88			sta :FP1MAN2
   903 2FF2 A5 91			lda :FPMAN3
   904 2FF4 85 89			sta :FP1MAN3
   905 2FF6 A9 83			lda #$83
   906 2FF8 85 8A			sta :FP2MAN0
   907 2FFA A9 3D			lda #$3D
   908 2FFC 85 8B			sta :FP2MAN1
   909 2FFE A9 DA			lda #$DA
   910 3000 85 8C			sta :FP2MAN2
   911 3002 A9 3D			lda #$3D
   912 3004 85 8D			sta :FP2MAN3
   913 3006 20 7B 24			jsr @FADD
   914 3009 A5 8E			lda :FPMAN0
   915 300B 85 86			sta :FP1MAN0
   916 300D A5 8F			lda :FPMAN1
   917 300F 85 87			sta :FP1MAN1
   918 3011 A5 90			lda :FPMAN2
   919 3013 85 88			sta :FP1MAN2
   920 3015 A5 91			lda :FPMAN3
   921 3017 85 89			sta :FP1MAN3
   922 3019 AD 6D A0			lda Y
   923 301C 85 8A			sta :FP2MAN0
   924 301E AD 6E A0			lda Y+1
   925 3021 85 8B			sta :FP2MAN1
   926 3023 AD 6F A0			lda Y+2
   927 3026 85 8C			sta :FP2MAN2
   928 3028 AD 70 A0			lda Y+3
   929 302B 85 8D			sta :FP2MAN3
   930 302D 20 E7 25			jsr @FMUL
   931 3030 A5 8E			lda :FPMAN0
   932 3032 85 86			sta :FP1MAN0
   933 3034 A5 8F			lda :FPMAN1
   934 3036 85 87			sta :FP1MAN1
   935 3038 A5 90			lda :FPMAN2
   936 303A 85 88			sta :FP1MAN2
   937 303C A5 91			lda :FPMAN3
   938 303E 85 89			sta :FP1MAN3
   939 3040 A9 C7			lda #$C7
   940 3042 85 8A			sta :FP2MAN0
   941 3044 A9 7F			lda #$7F
   942 3046 85 8B			sta :FP2MAN1
   943 3048 A9 11			lda #$11
   944 304A 85 8C			sta :FP2MAN2
   945 304C A9 3E			lda #$3E
   946 304E 85 8D			sta :FP2MAN3
   947 3050 20 80 24			jsr @FSUB
   948 3053 A5 8E			lda :FPMAN0
   949 3055 85 86			sta :FP1MAN0
   950 3057 A5 8F			lda :FPMAN1
   951 3059 85 87			sta :FP1MAN1
   952 305B A5 90			lda :FPMAN2
   953 305D 85 88			sta :FP1MAN2
   954 305F A5 91			lda :FPMAN3
   955 3061 85 89			sta :FP1MAN3
   956 3063 AD 6D A0			lda Y
   957 3066 85 8A			sta :FP2MAN0
   958 3068 AD 6E A0			lda Y+1
   959 306B 85 8B			sta :FP2MAN1
   960 306D AD 6F A0			lda Y+2
   961 3070 85 8C			sta :FP2MAN2
   962 3072 AD 70 A0			lda Y+3
   963 3075 85 8D			sta :FP2MAN3
   964 3077 20 E7 25			jsr @FMUL
   965 307A A5 8E			lda :FPMAN0
   966 307C 85 86			sta :FP1MAN0
   967 307E A5 8F			lda :FPMAN1
   968 3080 85 87			sta :FP1MAN1
   969 3082 A5 90			lda :FPMAN2
   970 3084 85 88			sta :FP1MAN2
   971 3086 A5 91			lda :FPMAN3
   972 3088 85 89			sta :FP1MAN3
   973 308A A9 E5			lda #$E5
   974 308C 85 8A			sta :FP2MAN0
   975 308E A9 BB			lda #$BB
   976 3090 85 8B			sta :FP2MAN1
   977 3092 A9 4C			lda #$4C
   978 3094 85 8C			sta :FP2MAN2
   979 3096 A9 3E			lda #$3E
   980 3098 85 8D			sta :FP2MAN3
   981 309A 20 7B 24			jsr @FADD
   982 309D A5 8E			lda :FPMAN0
   983 309F 85 86			sta :FP1MAN0
   984 30A1 A5 8F			lda :FPMAN1
   985 30A3 85 87			sta :FP1MAN1
   986 30A5 A5 90			lda :FPMAN2
   987 30A7 85 88			sta :FP1MAN2
   988 30A9 A5 91			lda :FPMAN3
   989 30AB 85 89			sta :FP1MAN3
   990 30AD AD 6D A0			lda Y
   991 30B0 85 8A			sta :FP2MAN0
   992 30B2 AD 6E A0			lda Y+1
   993 30B5 85 8B			sta :FP2MAN1
   994 30B7 AD 6F A0			lda Y+2
   995 30BA 85 8C			sta :FP2MAN2
   996 30BC AD 70 A0			lda Y+3
   997 30BF 85 8D			sta :FP2MAN3
   998 30C1 20 E7 25			jsr @FMUL
   999 30C4 A5 8E			lda :FPMAN0
  1000 30C6 85 86			sta :FP1MAN0
  1001 30C8 A5 8F			lda :FPMAN1
  1002 30CA 85 87			sta :FP1MAN1
  1003 30CC A5 90			lda :FPMAN2
  1004 30CE 85 88			sta :FP1MAN2
  1005 30D0 A5 91			lda :FPMAN3
  1006 30D2 85 89			sta :FP1MAN3
  1007 30D4 A9 6C			lda #$6C
  1008 30D6 85 8A			sta :FP2MAN0
  1009 30D8 A9 AA			lda #$AA
  1010 30DA 85 8B			sta :FP2MAN1
  1011 30DC 85 8C			sta :FP2MAN2
  1012 30DE A9 3E			lda #$3E
  1013 30E0 85 8D			sta :FP2MAN3
  1014 30E2 20 80 24			jsr @FSUB
  1015 30E5 A5 8E			lda :FPMAN0
  1016 30E7 85 86			sta :FP1MAN0
  1017 30E9 A5 8F			lda :FPMAN1
  1018 30EB 85 87			sta :FP1MAN1
  1019 30ED A5 90			lda :FPMAN2
  1020 30EF 85 88			sta :FP1MAN2
  1021 30F1 A5 91			lda :FPMAN3
  1022 30F3 85 89			sta :FP1MAN3
  1023 30F5 AD 6D A0			lda Y
  1024 30F8 85 8A			sta :FP2MAN0
  1025 30FA AD 6E A0			lda Y+1
  1026 30FD 85 8B			sta :FP2MAN1
  1027 30FF AD 6F A0			lda Y+2
  1028 3102 85 8C			sta :FP2MAN2
  1029 3104 AD 70 A0			lda Y+3
  1030 3107 85 8D			sta :FP2MAN3
  1031 3109 20 E7 25			jsr @FMUL
  1032 310C A5 8E			lda :FPMAN0
  1033 310E 85 86			sta :FP1MAN0
  1034 3110 A5 8F			lda :FPMAN1
  1035 3112 85 87			sta :FP1MAN1
  1036 3114 A5 90			lda :FPMAN2
  1037 3116 85 88			sta :FP1MAN2
  1038 3118 A5 91			lda :FPMAN3
  1039 311A 85 89			sta :FP1MAN3
  1040 311C A9 00			lda #$00
  1041 311E 85 8A			sta :FP2MAN0
  1042 3120 85 8B			sta :FP2MAN1
  1043 3122 A9 80			lda #$80
  1044 3124 85 8C			sta :FP2MAN2
  1045 3126 A9 3F			lda #$3F
  1046 3128 85 8D			sta :FP2MAN3
  1047 312A 20 7B 24			jsr @FADD
  1048 312D A5 8E			lda :FPMAN0
  1049 312F 85 86			sta :FP1MAN0
  1050 3131 A5 8F			lda :FPMAN1
  1051 3133 85 87			sta :FP1MAN1
  1052 3135 A5 90			lda :FPMAN2
  1053 3137 85 88			sta :FP1MAN2
  1054 3139 A5 91			lda :FPMAN3
  1055 313B 85 89			sta :FP1MAN3
  1056 313D AD 69 A0			lda X
  1057 3140 85 8A			sta :FP2MAN0
  1058 3142 AD 6A A0			lda X+1
  1059 3145 85 8B			sta :FP2MAN1
  1060 3147 AD 6B A0			lda X+2
  1061 314A 85 8C			sta :FP2MAN2
  1062 314C AD 6C A0			lda X+3
  1063 314F 85 8D			sta :FP2MAN3
  1064 3151 20 E7 25			jsr @FMUL
  1065 3154 A5 8E			lda :FPMAN0
  1066 3156 8D 69 A0			sta X
  1067 3159 A5 8F			lda :FPMAN1
  1068 315B 8D 6A A0			sta X+1
  1069 315E A5 90			lda :FPMAN2
  1070 3160 8D 6B A0			sta X+2
  1071 3163 A5 91			lda :FPMAN3
  1072 3165 8D 6C A0			sta X+3
  1073
  1074 				; optimize OK (SYSTEM), line = 922
  1075
  1076 3168 AD 69 A0			lda X
  1077 316B 85 8A			sta :FP2MAN0
  1078 316D AD 6A A0			lda X+1
  1079 3170 85 8B			sta :FP2MAN1
  1080 3172 AD 6B A0			lda X+2
  1081 3175 85 8C			sta :FP2MAN2
  1082 3177 AD 6C A0			lda X+3
  1083 317A 85 8D			sta :FP2MAN3
  1084 317C A9 DB			lda #$DB
  1085 317E 85 86			sta :FP1MAN0
  1086 3180 A9 0F			lda #$0F
  1087 3182 85 87			sta :FP1MAN1
  1088 3184 A9 49			lda #$49
  1089 3186 85 88			sta :FP1MAN2
  1090 3188 A9 3F			lda #$3F
  1091 318A 85 89			sta :FP1MAN3
  1092 318C 20 7B 24			jsr @FADD
  1093 318F A5 8E			lda :FPMAN0
  1094 3191 8D 69 A0			sta X
  1095 3194 A5 8F			lda :FPMAN1
  1096 3196 8D 6A A0			sta X+1
  1097 3199 A5 90			lda :FPMAN2
  1098 319B 8D 6B A0			sta X+2
  1099 319E A5 91			lda :FPMAN3
  1100 31A0 8D 6C A0			sta X+3
  1101
  1102 				; optimize OK (SYSTEM), line = 924
  1103
  1104 31A3 AD 71 A0			lda SIGN
  1105 31A6 F0 1A			jeq l_016B
  1106
  1107 				; optimize OK (SYSTEM), line = 925
  1108
  1109 31A8 AD 69 A0			lda X
  1110 31AB 8D 65 A0			sta RESULT
  1111 31AE AD 6A A0			lda X+1
  1112 31B1 8D 66 A0			sta RESULT+1
  1113 31B4 AD 6B A0			lda X+2
  1114 31B7 8D 67 A0			sta RESULT+2
  1115 31BA AD 6C A0			lda X+3
  1116 31BD 49 80			eor #$80
  1117 31BF 4C D7 31			jmp l_017C
  1118 31C2			l_016B
  1119
  1120 				; optimize OK (SYSTEM), line = 927
  1121
  1122 31C2 AD 69 A0			lda X
  1123 31C5 8D 65 A0			sta RESULT
  1124 31C8 AD 6A A0			lda X+1
  1125 31CB 8D 66 A0			sta RESULT+1
  1126 31CE AD 6B A0			lda X+2
  1127 31D1 8D 67 A0			sta RESULT+2
  1128 31D4 AD 6C A0			lda X+3
  1129 31D7			l_017C
  1130 31D7 8D 68 A0			sta RESULT+3
  1131 31DA			@exit
  1132
  1133 				; ------------------------------------------------------------
  1134
  1135 = A061			VALUE	= DATAORIGIN+$0019
  1136 = A065			RESULT	= DATAORIGIN+$001D
  1137 = A069			X	= DATAORIGIN+$0021
  1138 = A06D			Y	= DATAORIGIN+$0025
  1139 = A071			SIGN	= DATAORIGIN+$0029
  1140
  1141 = A061			@VarData	= VALUE
  1142 = 000D			@VarDataSize	= 13
  1143
  1144 31DA 60				rts						; ret
  1145 				.endl
  1146 				.endl							; overload
  1147
  1148 31DB			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
  1149
  1150 				; ------------------------------------------------------------
  1151
  1152 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1153 				; as Pointer
  1154 31DB B5 96			lda :STACKORIGIN,x
  1155 31DD 85 8A			sta A
  1156 31DF B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  1157 31E1 85 8B			sta A+1
  1158 31E3 CA				dex
  1159 31E4 30 05			jmi @main
  1160
  1161 				; ------------------------------------------------------------
  1162
  1163 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1164 				; as Pointer
  1165 31E6 B5 96			lda :STACKORIGIN,x
  1166 31E8 85 8E			sta VALUE
  1167 31EA CA				dex
  1168 31EB			@main
  1169
  1170 				; -------------------  ASM Block 00000025  -------------------
  1171
  1172 31EB A0 00			ldy #0
  1173 31ED A5 8E 91 8A			mva value (:edx),y
  1174
  1175 				; ------------------------------------------------------------
  1176
  1177 = 008A			A	= :EDX
  1178 = 008E			VALUE	= :ECX
  1179
  1180 31F1			@exit
  1181 					.ifdef @new
  1182 					lda <@VarData
  1183 					sta :ztmp
  1184 					lda >@VarData
  1185 					ldy #@VarDataSize-1
  1186 					jmp @FreeMem
  1187 					els
  1188 31F1 60				rts						; ret
  1189 					eif
  1190 				.endl
  1191
  1192 31F2			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
  1193 31F2			.local	@03018000001810000300000
  1194
  1195 					.MACRO m@INLINE
  1196 				
  1197 				; -------------------  ASM Block 00000033  -------------------
  1198 				
  1199 					jsr @fill
  1200 				
  1201 					.ENDM
  1202
  1203 				; ------------------------------------------------------------
  1204
  1205 = 008A			A	= :EDX
  1206 = 008E			COUNT	= :ECX
  1207 = 0086			VALUE	= :EAX
  1208
  1209 31F2			@exit
  1210 				.endl
  1211 				.endl							; overload
  1212
  1213 31F2			.local	FSINCOS						; FUNCTION
  1214
  1215 				; --- WhileProlog
  1216 31F2 4C 30 32			jmp l_01D2
  1217 31F5			l_01D3
  1218
  1219 				; optimize OK (SYSTEM), line = 1909
  1220
  1221 31F5 A9 DB			lda #$DB
  1222 31F7 85 8A			sta :FP2MAN0
  1223 31F9 A9 0F			lda #$0F
  1224 31FB 85 8B			sta :FP2MAN1
  1225 31FD A9 C9			lda #$C9
  1226 31FF 85 8C			sta :FP2MAN2
  1227 3201 A9 40			lda #$40
  1228 3203 85 8D			sta :FP2MAN3
  1229 3205 AD 72 A0			lda X
  1230 3208 85 86			sta :FP1MAN0
  1231 320A AD 73 A0			lda X+1
  1232 320D 85 87			sta :FP1MAN1
  1233 320F AD 74 A0			lda X+2
  1234 3212 85 88			sta :FP1MAN2
  1235 3214 AD 75 A0			lda X+3
  1236 3217 85 89			sta :FP1MAN3
  1237 3219 20 80 24			jsr @FSUB
  1238 321C A5 8E			lda :FPMAN0
  1239 321E 8D 72 A0			sta X
  1240 3221 A5 8F			lda :FPMAN1
  1241 3223 8D 73 A0			sta X+1
  1242 3226 A5 90			lda :FPMAN2
  1243 3228 8D 74 A0			sta X+2
  1244 322B A5 91			lda :FPMAN3
  1245 322D 8D 75 A0			sta X+3
  1246 3230			l_01D2
  1247 3230 A9 DB			lda #$DB
  1248 3232 85 86			sta @FCMPL.A
  1249 3234 A9 0F			lda #$0F
  1250 3236 85 87			sta @FCMPL.A+1
  1251 3238 A9 C9			lda #$C9
  1252 323A 85 88			sta @FCMPL.A+2
  1253 323C A9 40			lda #$40
  1254 323E 85 89			sta @FCMPL.A+3
  1255 3240 AD 72 A0			lda X
  1256 3243 85 8E			sta @FCMPL.B
  1257 3245 AD 73 A0			lda X+1
  1258 3248 85 8F			sta @FCMPL.B+1
  1259 324A AD 74 A0			lda X+2
  1260 324D 85 90			sta @FCMPL.B+2
  1261 324F AD 75 A0			lda X+3
  1262 3252 85 91			sta @FCMPL.B+3
  1263 3254 20 04 27			jsr @FCMPL
  1264 3257 30 02			smi
  1265 3259 D0 9A			jne l_01D3
  1266
  1267 				; --- WhileProlog
  1268 325B 4C 99 32			jmp l_01E7
  1269 325E			l_01E8
  1270
  1271 				; optimize OK (SYSTEM), line = 1910
  1272
  1273 325E A9 DB			lda #$DB
  1274 3260 85 8A			sta :FP2MAN0
  1275 3262 A9 0F			lda #$0F
  1276 3264 85 8B			sta :FP2MAN1
  1277 3266 A9 C9			lda #$C9
  1278 3268 85 8C			sta :FP2MAN2
  1279 326A A9 40			lda #$40
  1280 326C 85 8D			sta :FP2MAN3
  1281 326E AD 72 A0			lda X
  1282 3271 85 86			sta :FP1MAN0
  1283 3273 AD 73 A0			lda X+1
  1284 3276 85 87			sta :FP1MAN1
  1285 3278 AD 74 A0			lda X+2
  1286 327B 85 88			sta :FP1MAN2
  1287 327D AD 75 A0			lda X+3
  1288 3280 85 89			sta :FP1MAN3
  1289 3282 20 7B 24			jsr @FADD
  1290 3285 A5 8E			lda :FPMAN0
  1291 3287 8D 72 A0			sta X
  1292 328A A5 8F			lda :FPMAN1
  1293 328C 8D 73 A0			sta X+1
  1294 328F A5 90			lda :FPMAN2
  1295 3291 8D 74 A0			sta X+2
  1296 3294 A5 91			lda :FPMAN3
  1297 3296 8D 75 A0			sta X+3
  1298 3299			l_01E7
  1299 3299 AD 75 A0			lda X+3
  1300 329C 30 C0			jmi l_01E8
  1301
  1302 				; optimize OK (SYSTEM), line = 1913
  1303
  1304 329E A9 83			lda #$83
  1305 32A0 85 8A			sta :FP2MAN0
  1306 32A2 A9 F9			lda #$F9
  1307 32A4 85 8B			sta :FP2MAN1
  1308 32A6 A9 22			lda #$22
  1309 32A8 85 8C			sta :FP2MAN2
  1310 32AA A9 3F			lda #$3F
  1311 32AC 85 8D			sta :FP2MAN3
  1312 32AE AD 72 A0			lda X
  1313 32B1 85 86			sta :FP1MAN0
  1314 32B3 AD 73 A0			lda X+1
  1315 32B6 85 87			sta :FP1MAN1
  1316 32B8 AD 74 A0			lda X+2
  1317 32BB 85 88			sta :FP1MAN2
  1318 32BD AD 75 A0			lda X+3
  1319 32C0 85 89			sta :FP1MAN3
  1320 32C2 20 E7 25			jsr @FMUL
  1321 32C5 A5 8E			lda :FPMAN0
  1322 32C7 8D 72 A0			sta X
  1323 32CA A5 8F			lda :FPMAN1
  1324 32CC 8D 73 A0			sta X+1
  1325 32CF A5 90			lda :FPMAN2
  1326 32D1 8D 74 A0			sta X+2
  1327 32D4 A5 91			lda :FPMAN3
  1328 32D6 8D 75 A0			sta X+3
  1329
  1330 				; optimize OK (SYSTEM), line = 1916
  1331
  1332 32D9 AD 72 A0			lda X
  1333 32DC 85 8E			sta :FPMAN0
  1334 32DE AD 73 A0			lda X+1
  1335 32E1 85 8F			sta :FPMAN1
  1336 32E3 AD 74 A0			lda X+2
  1337 32E6 85 90			sta :FPMAN2
  1338 32E8 AD 75 A0			lda X+3
  1339 32EB 85 91			sta :FPMAN3
  1340 32ED 20 50 27			jsr @F2I
  1341 32F0 A5 8E			lda :FPMAN0
  1342 32F2 8D 7B A0			sta I
  1343
  1344 				; optimize OK (SYSTEM), line = 1919
  1345
  1346 32F5 AD 75 A0			lda X+3
  1347 32F8 10 03			jpl l_0216
  1348 32FA CE 7B A0			dec I
  1349 32FD			l_0216
  1350
  1351 				; optimize OK (SYSTEM), line = 1922
  1352
  1353 32FD A0 00			ldy #$00
  1354 32FF AD 7B A0			lda I
  1355 3302 10 01			spl
  1356 3304 88				dey
  1357 3305 85 8E			sta :FPMAN0
  1358 3307 84 8F			sty :FPMAN1
  1359 3309 84 90			sty :FPMAN2
  1360 330B 84 91			sty :FPMAN3
  1361 330D 20 C1 27			jsr @I2F
  1362 3310 A5 8E			lda :FPMAN0
  1363 3312 85 8A			sta :FP2MAN0
  1364 3314 A5 8F			lda :FPMAN1
  1365 3316 85 8B			sta :FP2MAN1
  1366 3318 A5 90			lda :FPMAN2
  1367 331A 85 8C			sta :FP2MAN2
  1368 331C A5 91			lda :FPMAN3
  1369 331E 85 8D			sta :FP2MAN3
  1370 3320 AD 72 A0			lda X
  1371 3323 85 86			sta :FP1MAN0
  1372 3325 AD 73 A0			lda X+1
  1373 3328 85 87			sta :FP1MAN1
  1374 332A AD 74 A0			lda X+2
  1375 332D 85 88			sta :FP1MAN2
  1376 332F AD 75 A0			lda X+3
  1377 3332 85 89			sta :FP1MAN3
  1378 3334 20 80 24			jsr @FSUB
  1379 3337 A5 8E			lda :FPMAN0
  1380 3339 8D 72 A0			sta X
  1381 333C A5 8F			lda :FPMAN1
  1382 333E 8D 73 A0			sta X+1
  1383 3341 A5 90			lda :FPMAN2
  1384 3343 8D 74 A0			sta X+2
  1385 3346 A5 91			lda :FPMAN3
  1386 3348 8D 75 A0			sta X+3
  1387
  1388 				; optimize OK (SYSTEM), line = 1925
  1389
  1390 334B AD 76 A0			lda SC
  1391 334E F0 03			jeq l_0233
  1392 3350 EE 7B A0			inc I
  1393 3353			l_0233
  1394
  1395 				; optimize OK (SYSTEM), line = 1928
  1396
  1397 3353 AD 7B A0			lda I
  1398 3356 29 01			and #$01
  1399 3358 D0 39			jne l_0250
  1400 335A AD 72 A0			lda X
  1401 335D 85 8A			sta :FP2MAN0
  1402 335F AD 73 A0			lda X+1
  1403 3362 85 8B			sta :FP2MAN1
  1404 3364 AD 74 A0			lda X+2
  1405 3367 85 8C			sta :FP2MAN2
  1406 3369 AD 75 A0			lda X+3
  1407 336C 85 8D			sta :FP2MAN3
  1408 336E A9 00			lda #$00
  1409 3370 85 86			sta :FP1MAN0
  1410 3372 85 87			sta :FP1MAN1
  1411 3374 A9 80			lda #$80
  1412 3376 85 88			sta :FP1MAN2
  1413 3378 A9 3F			lda #$3F
  1414 337A 85 89			sta :FP1MAN3
  1415 337C 20 80 24			jsr @FSUB
  1416 337F A5 8E			lda :FPMAN0
  1417 3381 8D 72 A0			sta X
  1418 3384 A5 8F			lda :FPMAN1
  1419 3386 8D 73 A0			sta X+1
  1420 3389 A5 90			lda :FPMAN2
  1421 338B 8D 74 A0			sta X+2
  1422 338E A5 91			lda :FPMAN3
  1423 3390 8D 75 A0			sta X+3
  1424 3393			l_0250
  1425
  1426 				; optimize OK (SYSTEM), line = 1931
  1427
  1428 3393 AD 72 A0			lda X
  1429 3396 85 8A			sta :FP2MAN0
  1430 3398 AD 73 A0			lda X+1
  1431 339B 85 8B			sta :FP2MAN1
  1432 339D AD 74 A0			lda X+2
  1433 33A0 85 8C			sta :FP2MAN2
  1434 33A2 AD 75 A0			lda X+3
  1435 33A5 85 8D			sta :FP2MAN3
  1436 33A7 AD 72 A0			lda X
  1437 33AA 85 86			sta :FP1MAN0
  1438 33AC AD 73 A0			lda X+1
  1439 33AF 85 87			sta :FP1MAN1
  1440 33B1 AD 74 A0			lda X+2
  1441 33B4 85 88			sta :FP1MAN2
  1442 33B6 AD 75 A0			lda X+3
  1443 33B9 85 89			sta :FP1MAN3
  1444 33BB 20 E7 25			jsr @FMUL
  1445 33BE A5 8E			lda :FPMAN0
  1446 33C0 8D 72 A0			sta X
  1447 33C3 A5 8F			lda :FPMAN1
  1448 33C5 8D 73 A0			sta X+1
  1449 33C8 A5 90			lda :FPMAN2
  1450 33CA 8D 74 A0			sta X+2
  1451 33CD A5 91			lda :FPMAN3
  1452 33CF 8D 75 A0			sta X+3
  1453
  1454 				; optimize OK (SYSTEM), line = 1932
  1455
  1456 33D2 A9 42			lda #$42
  1457 33D4 85 8A			sta :FP2MAN0
  1458 33D6 A9 01			lda #$01
  1459 33D8 85 8B			sta :FP2MAN1
  1460 33DA A9 5E			lda #$5E
  1461 33DC 85 8C			sta :FP2MAN2
  1462 33DE A9 3A			lda #$3A
  1463 33E0 85 8D			sta :FP2MAN3
  1464 33E2 AD 72 A0			lda X
  1465 33E5 85 86			sta :FP1MAN0
  1466 33E7 AD 73 A0			lda X+1
  1467 33EA 85 87			sta :FP1MAN1
  1468 33EC AD 74 A0			lda X+2
  1469 33EF 85 88			sta :FP1MAN2
  1470 33F1 AD 75 A0			lda X+3
  1471 33F4 85 89			sta :FP1MAN3
  1472 33F6 20 E7 25			jsr @FMUL
  1473 33F9 A5 8E			lda :FPMAN0
  1474 33FB 85 8A			sta :FP2MAN0
  1475 33FD A5 8F			lda :FPMAN1
  1476 33FF 85 8B			sta :FP2MAN1
  1477 3401 A5 90			lda :FPMAN2
  1478 3403 85 8C			sta :FP2MAN2
  1479 3405 A5 91			lda :FPMAN3
  1480 3407 85 8D			sta :FP2MAN3
  1481 3409 A9 D3			lda #$D3
  1482 340B 85 86			sta :FP1MAN0
  1483 340D A9 59			lda #$59
  1484 340F 85 87			sta :FP1MAN1
  1485 3411 A9 A3			lda #$A3
  1486 3413 85 88			sta :FP1MAN2
  1487 3415 A9 3C			lda #$3C
  1488 3417 85 89			sta :FP1MAN3
  1489 3419 20 80 24			jsr @FSUB
  1490 341C A5 8E			lda :FPMAN0
  1491 341E 85 86			sta :FP1MAN0
  1492 3420 A5 8F			lda :FPMAN1
  1493 3422 85 87			sta :FP1MAN1
  1494 3424 A5 90			lda :FPMAN2
  1495 3426 85 88			sta :FP1MAN2
  1496 3428 A5 91			lda :FPMAN3
  1497 342A 85 89			sta :FP1MAN3
  1498 342C AD 72 A0			lda X
  1499 342F 85 8A			sta :FP2MAN0
  1500 3431 AD 73 A0			lda X+1
  1501 3434 85 8B			sta :FP2MAN1
  1502 3436 AD 74 A0			lda X+2
  1503 3439 85 8C			sta :FP2MAN2
  1504 343B AD 75 A0			lda X+3
  1505 343E 85 8D			sta :FP2MAN3
  1506 3440 20 E7 25			jsr @FMUL
  1507 3443 A5 8E			lda :FPMAN0
  1508 3445 85 86			sta :FP1MAN0
  1509 3447 A5 8F			lda :FPMAN1
  1510 3449 85 87			sta :FP1MAN1
  1511 344B A5 90			lda :FPMAN2
  1512 344D 85 88			sta :FP1MAN2
  1513 344F A5 91			lda :FPMAN3
  1514 3451 85 89			sta :FP1MAN3
  1515 3453 A9 DE			lda #$DE
  1516 3455 85 8A			sta :FP2MAN0
  1517 3457 A9 4D			lda #$4D
  1518 3459 85 8B			sta :FP2MAN1
  1519 345B A9 6F			lda #$6F
  1520 345D 85 8C			sta :FP2MAN2
  1521 345F A9 3E			lda #$3E
  1522 3461 85 8D			sta :FP2MAN3
  1523 3463 20 80 24			jsr @FSUB
  1524 3466 A5 8E			lda :FPMAN0
  1525 3468 85 86			sta :FP1MAN0
  1526 346A A5 8F			lda :FPMAN1
  1527 346C 85 87			sta :FP1MAN1
  1528 346E A5 90			lda :FPMAN2
  1529 3470 85 88			sta :FP1MAN2
  1530 3472 A5 91			lda :FPMAN3
  1531 3474 85 89			sta :FP1MAN3
  1532 3476 AD 72 A0			lda X
  1533 3479 85 8A			sta :FP2MAN0
  1534 347B AD 73 A0			lda X+1
  1535 347E 85 8B			sta :FP2MAN1
  1536 3480 AD 74 A0			lda X+2
  1537 3483 85 8C			sta :FP2MAN2
  1538 3485 AD 75 A0			lda X+3
  1539 3488 85 8D			sta :FP2MAN3
  1540 348A 20 E7 25			jsr @FMUL
  1541 348D A5 8E			lda :FPMAN0
  1542 348F 85 86			sta :FP1MAN0
  1543 3491 A5 8F			lda :FPMAN1
  1544 3493 85 87			sta :FP1MAN1
  1545 3495 A5 90			lda :FPMAN2
  1546 3497 85 88			sta :FP1MAN2
  1547 3499 A5 91			lda :FPMAN3
  1548 349B 85 89			sta :FP1MAN3
  1549 349D A9 00			lda #$00
  1550 349F 85 8A			sta :FP2MAN0
  1551 34A1 85 8B			sta :FP2MAN1
  1552 34A3 A9 80			lda #$80
  1553 34A5 85 8C			sta :FP2MAN2
  1554 34A7 A9 3F			lda #$3F
  1555 34A9 85 8D			sta :FP2MAN3
  1556 34AB 20 7B 24			jsr @FADD
  1557 34AE A5 8E			lda :FPMAN0
  1558 34B0 85 9F			sta :STACKORIGIN+9
  1559 34B2 A5 8F			lda :FPMAN1
  1560 34B4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1561 34B6 A5 90			lda :FPMAN2
  1562 34B8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1563 34BA A5 91			lda :FPMAN3
  1564 34BC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1565 34BE AD 72 A0			lda X
  1566 34C1 85 8A			sta :FP2MAN0
  1567 34C3 AD 73 A0			lda X+1
  1568 34C6 85 8B			sta :FP2MAN1
  1569 34C8 AD 74 A0			lda X+2
  1570 34CB 85 8C			sta :FP2MAN2
  1571 34CD AD 75 A0			lda X+3
  1572 34D0 85 8D			sta :FP2MAN3
  1573 34D2 A9 00			lda #$00
  1574 34D4 85 86			sta :FP1MAN0
  1575 34D6 85 87			sta :FP1MAN1
  1576 34D8 A9 80			lda #$80
  1577 34DA 85 88			sta :FP1MAN2
  1578 34DC A9 3F			lda #$3F
  1579 34DE 85 89			sta :FP1MAN3
  1580 34E0 20 80 24			jsr @FSUB
  1581 34E3 A5 8E			lda :FPMAN0
  1582 34E5 85 8A			sta :FP2MAN0
  1583 34E7 A5 8F			lda :FPMAN1
  1584 34E9 85 8B			sta :FP2MAN1
  1585 34EB A5 90			lda :FPMAN2
  1586 34ED 85 8C			sta :FP2MAN2
  1587 34EF A5 91			lda :FPMAN3
  1588 34F1 85 8D			sta :FP2MAN3
  1589 34F3 A5 9F			lda :STACKORIGIN+9
  1590 34F5 85 86			sta :FP1MAN0
  1591 34F7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1592 34F9 85 87			sta :FP1MAN1
  1593 34FB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1594 34FD 85 88			sta :FP1MAN2
  1595 34FF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1596 3501 85 89			sta :FP1MAN3
  1597 3503 20 E7 25			jsr @FMUL
  1598 3506 A5 8E			lda :FPMAN0
  1599 3508 8D 77 A0			sta RESULT
  1600 350B A5 8F			lda :FPMAN1
  1601 350D 8D 78 A0			sta RESULT+1
  1602 3510 A5 90			lda :FPMAN2
  1603 3512 8D 79 A0			sta RESULT+2
  1604 3515 A5 91			lda :FPMAN3
  1605 3517 8D 7A A0			sta RESULT+3
  1606
  1607 				; optimize OK (SYSTEM), line = 1935
  1608
  1609 351A AD 7B A0			lda I
  1610 351D 29 02			and #$02
  1611 351F C9 02			cmp #$02
  1612 3521 D0 08			jne l_029D
  1613 3523 AD 7A A0			lda RESULT+3
  1614 3526 49 80			eor #$80
  1615 3528 8D 7A A0			sta RESULT+3
  1616 352B			l_029D
  1617 352B			@exit
  1618
  1619 				; ------------------------------------------------------------
  1620
  1621 = A072			X	= DATAORIGIN+$002A
  1622 = A076			SC	= DATAORIGIN+$002E
  1623 = A077			RESULT	= DATAORIGIN+$002F
  1624 = A07B			I	= DATAORIGIN+$0033
  1625
  1626 = A072			@VarData	= X
  1627 = 0006			@VarDataSize	= 6
  1628
  1629 352B 60				rts						; ret
  1630 				.endl
  1631
  1632 352C			.local	SIN						; FUNCTION | OVERLOAD
  1633 352C			.local	@01018F000
  1634
  1635 				; optimize OK (SYSTEM), line = 1949
  1636
  1637 352C AD 7C A0			lda X
  1638 352F 8D 72 A0			sta FSINCOS.X
  1639 3532 AD 7D A0			lda X+1
  1640 3535 8D 73 A0			sta FSINCOS.X+1
  1641 3538 AD 7E A0			lda X+2
  1642 353B 8D 74 A0			sta FSINCOS.X+2
  1643 353E AD 7F A0			lda X+3
  1644 3541 8D 75 A0			sta FSINCOS.X+3
  1645 3544 A9 00			lda #$00
  1646 3546 8D 76 A0			sta FSINCOS.SC
  1647 3549 20 F2 31			jsr FSINCOS
  1648 354C AD 77 A0			lda FSINCOS.RESULT
  1649 354F 8D 80 A0			sta RESULT
  1650 3552 AD 78 A0			lda FSINCOS.RESULT+1
  1651 3555 8D 81 A0			sta RESULT+1
  1652 3558 AD 79 A0			lda FSINCOS.RESULT+2
  1653 355B 8D 82 A0			sta RESULT+2
  1654 355E AD 7A A0			lda FSINCOS.RESULT+3
  1655 3561 8D 83 A0			sta RESULT+3
  1656 3564			@exit
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 = A07C			X	= DATAORIGIN+$0034
  1661 = A080			RESULT	= DATAORIGIN+$0038
  1662
  1663 = A07C			@VarData	= X
  1664 = 0004			@VarDataSize	= 4
  1665
  1666 3564 60				rts						; ret
  1667 				.endl
  1668 				.endl							; overload
  1669
  1670 3565			.local	COS						; FUNCTION | OVERLOAD
  1671 3565			.local	@01018F000
  1672
  1673 				; optimize OK (SYSTEM), line = 1963
  1674
  1675 3565 AD 84 A0			lda X
  1676 3568 8D 72 A0			sta FSINCOS.X
  1677 356B AD 85 A0			lda X+1
  1678 356E 8D 73 A0			sta FSINCOS.X+1
  1679 3571 AD 86 A0			lda X+2
  1680 3574 8D 74 A0			sta FSINCOS.X+2
  1681 3577 AD 87 A0			lda X+3
  1682 357A 8D 75 A0			sta FSINCOS.X+3
  1683 357D A9 01			lda #$01
  1684 357F 8D 76 A0			sta FSINCOS.SC
  1685 3582 20 F2 31			jsr FSINCOS
  1686 3585 AD 77 A0			lda FSINCOS.RESULT
  1687 3588 8D 88 A0			sta RESULT
  1688 358B AD 78 A0			lda FSINCOS.RESULT+1
  1689 358E 8D 89 A0			sta RESULT+1
  1690 3591 AD 79 A0			lda FSINCOS.RESULT+2
  1691 3594 8D 8A A0			sta RESULT+2
  1692 3597 AD 7A A0			lda FSINCOS.RESULT+3
  1693 359A 8D 8B A0			sta RESULT+3
  1694 359D			@exit
  1695
  1696 				; ------------------------------------------------------------
  1697
  1698 = A084			X	= DATAORIGIN+$003C
  1699 = A088			RESULT	= DATAORIGIN+$0040
  1700
  1701 = A084			@VarData	= X
  1702 = 0004			@VarDataSize	= 4
  1703
  1704 359D 60				rts						; ret
  1705 				.endl
  1706 				.endl							; overload
  1707
  1708 359E			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1709 359E			.local	@00
  1710
  1711 				; -------------------  ASM Block 00000043  -------------------
  1712
  1713 359E 2C 0B D4			bit VCOUNT
  1714 35A1 30 FB			bmi *-3
  1715 35A3 2C 0B D4			bit VCOUNT
  1716 35A6 10 FB			bpl *-3
  1717
  1718 35A8			@exit
  1719 					.ifdef @new
  1720 					lda <@VarData
  1721 					sta :ztmp
  1722 					lda >@VarData
  1723 					ldy #@VarDataSize-1
  1724 					jmp @FreeMem
  1725 					els
  1726 35A8 60				rts						; ret
  1727 					eif
  1728 				.endl
  1729 				.endl							; overload
  1730
  1731 35A9			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1732
  1733 				; -------------------  ASM Block 00000045  -------------------
  1734
  1735
  1736 35A9 AD 0A D2 8D 51 A0	  mva $d20a RndSeed
  1737 35AF A9 00 8D 52 A0	  mva #$00  RndSeed+1
  1738
  1739
  1740 35B4			@exit
  1741 					.ifdef @new
  1742 					lda <@VarData
  1743 					sta :ztmp
  1744 					lda >@VarData
  1745 					ldy #@VarDataSize-1
  1746 					jmp @FreeMem
  1747 					els
  1748 35B4 60				rts						; ret
  1749 					eif
  1750 				.endl
  1751
  1752 35B5			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1753 35B5			.local	@010180000
  1754 35B5 8D 8C A0			sta RANGE
  1755
  1756 				; -------------------  ASM Block 00000049  -------------------
  1757
  1758
  1759 				;BYTE FUNC Rand(BYTE range)
  1760 				; returns random number between 0 and
  1761 				; range-1.  If range=0, then a random
  1762 				; number between 0 and 255 is returned
  1763
  1764 35B8 AC 0A D2		  ldy $d20a   ; RANDOM
  1765
  1766 35BB AD 8C A0		  lda range
  1767 35BE F0 08		  beq stop
  1768
  1769 35C0 85 8E		  sta :ecx
  1770 35C2 84 86		  sty :eax
  1771
  1772 35C4 20 DC 22		  jsr imulCL
  1773 35C7 A8			  tay
  1774
  1775 35C8 8C 8D A0		stop  sty Result
  1776
  1777
  1778 35CB			@exit
  1779
  1780 				; ------------------------------------------------------------
  1781
  1782 = A08C			RANGE	= DATAORIGIN+$0044
  1783 = A08D			RESULT	= DATAORIGIN+$0045
  1784
  1785 = A08C			@VarData	= RANGE
  1786 = 0001			@VarDataSize	= 1
  1787
  1788 35CB 60				rts						; ret
  1789 				.endl
  1790 				.endl							; overload
  1791
  1792 35CC			.local	RANDOM						; FUNCTION | OVERLOAD
  1793 35CC			.local	@010184000
  1794
  1795 				; optimize OK (system_atari.inc), line = 179
  1796
  1797 35CC AD 8F A0			lda RANGE+1
  1798 35CF 0D 8E A0			ora RANGE
  1799 35D2 D0 0B			jne l_02DD
  1800
  1801 				; optimize OK (system_atari.inc), line = 180
  1802
  1803 35D4 A9 00			lda #$00
  1804 35D6 8D 90 A0			sta RESULT
  1805 35D9 8D 91 A0			sta RESULT+1
  1806 35DC 4C 41 36			jmp l_02EB
  1807 35DF			l_02DD
  1808
  1809 				; optimize OK (system_atari.inc), line = 183
  1810
  1811 35DF AD 51 A0			lda RNDSEED
  1812 35E2 85 8E			sta :ecx
  1813 35E4 AD 52 A0			lda RNDSEED+1
  1814 35E7 85 8F			sta :ecx+1
  1815 35E9 A9 95			lda #$95
  1816 35EB 85 86			sta :eax
  1817 35ED A9 45			lda #$45
  1818 35EF 85 87			sta :eax+1
  1819 					.ifdef fmulinit
  1820 					fmulu_16
  1821 					els
  1822 35F1 20 28 23			imulCX
  1823 					eif
  1824 35F4 A5 86			lda :eax
  1825 35F6 8D 51 A0			sta RNDSEED
  1826 35F9 A5 87			lda :eax+1
  1827 35FB 8D 52 A0			sta RNDSEED+1
  1828
  1829 				; optimize OK (system_atari.inc), line = 184
  1830
  1831 35FE AD 8E A0			lda RANGE
  1832 3601 85 8E			sta @SMALLINT.MOD.B
  1833 3603 AD 8F A0			lda RANGE+1
  1834 3606 85 8F			sta @SMALLINT.MOD.B+1
  1835 3608 AD 51 A0			lda RNDSEED
  1836 360B 85 86			sta @SMALLINT.MOD.A
  1837 360D AD 52 A0			lda RNDSEED+1
  1838 3610 85 87			sta @SMALLINT.MOD.A+1
  1839 3612 20 6D 22			jsr @SMALLINT.MOD
  1840 3615 A5 92			lda @SMALLINT.MOD.RESULT
  1841 3617 8D 90 A0			sta RESULT
  1842 361A A5 93			lda @SMALLINT.MOD.RESULT+1
  1843 361C 8D 91 A0			sta RESULT+1
  1844
  1845 				; -------------------  ASM Block 00000050  -------------------
  1846
  1847 361F AD 8F A0			lda range+1
  1848 3622 10 07			bpl plus
  1849
  1850 3624 AD 91 A0			lda Result+1
  1851 3627 30 18			bmi ok
  1852 3629 10 05			bpl sign
  1853
  1854 362B AD 91 A0		plus	lda Result+1
  1855 362E 10 11			bpl ok
  1856
  1857 3630 A9 00		sign 	lda #0
  1858 3632 38 ED 90 A0			sub Result
  1859 3636 8D 90 A0			sta Result
  1860
  1861 3639 A9 00			lda #0
  1862 363B ED 91 A0			sbc Result+1
  1863 363E 8D 91 A0			sta Result+1
  1864 3641			ok
  1865
  1866 3641			l_02EB
  1867 3641			@exit
  1868
  1869 				; ------------------------------------------------------------
  1870
  1871 = A08E			RANGE	= DATAORIGIN+$0046
  1872 = A090			RESULT	= DATAORIGIN+$0048
  1873
  1874 = A08E			@VarData	= RANGE
  1875 = 0002			@VarDataSize	= 2
  1876
  1877 3641 60				rts						; ret
  1878 				.endl
  1879 				.endl							; overload
  1880
  1881 				; ------------------------------------------------------------
  1882 				; ------------------------------------------------------------
  1883 3642			@UnitInit
  1884
  1885 				; -------------------  ASM Block 00000060  -------------------
  1886
  1887 					.ifdef @CmdLine
  1888
  1889 					ldx #$0F
  1890 					mva:rpl $340,x IOCB@COPY,x-
  1891 					rts
  1892
  1893 				IOCB@COPY	:16 brk
  1894 					eif
  1895
  1896
  1897 3642 60				rts
  1898
  1899 				; ------------------------------------------------------------
  1900
  1901 = 0648			M_PI_2	= $0648
  1902 = 0192			D_PI_2	= $0192
  1903 = 0004			D_PI_180	= $04
  1904 = 0101			__PORTB_BANKS	= $0101
  1905 = 0000			MGTIA	= $00
  1906 = 0080			MVBXE	= $80
  1907 = 0000			VBXE_XDLADR	= $00
  1908 = 00E0			VBXE_BCBTMP	= $E0
  1909 = 0100			VBXE_BCBADR	= $0100
  1910 = 1000			VBXE_MAPADR	= $1000
  1911 = 1000			VBXE_CHBASE	= $1000
  1912 = 5000			VBXE_OVRADR	= $5000
  1913 = B000			VBXE_WINDOW	= $B000
  1914 = 0000			IDLI	= $00
  1915 = 0001			IVBL	= $01
  1916 = 0001			IVBLD	= $01
  1917 = 0002			IVBLI	= $02
  1918 = 0003			ITIM1	= $03
  1919 = 0004			ITIM2	= $04
  1920 = 0005			ITIM4	= $05
  1921 = 00FE			CH_DELCHR	= $FE
  1922 = 009B			CH_ENTER	= $9B
  1923 = 001B			CH_ESC	= $1B
  1924 = 001C			CH_CURS_UP	= $1C
  1925 = 001D			CH_CURS_DOWN	= $1D
  1926 = 001E			CH_CURS_LEFT	= $1E
  1927 = 001F			CH_CURS_RIGHT	= $1F
  1928 = 007F			CH_TAB	= $7F
  1929 = 009B			CH_EOL	= $9B
  1930 = 007D			CH_CLR	= $7D
  1931 = 00FD			CH_BELL	= $FD
  1932 = 007E			CH_DEL	= $7E
  1933 = 009C			CH_DELLINE	= $9C
  1934 = 009D			CH_INSLINE	= $9D
  1935 = 0000			PAL_PMCOLOR0	= $00
  1936 = 0001			PAL_PMCOLOR1	= $01
  1937 = 0002			PAL_PMCOLOR2	= $02
  1938 = 0003			PAL_PMCOLOR3	= $03
  1939 = 0004			PAL_COLOR0	= $04
  1940 = 0005			PAL_COLOR1	= $05
  1941 = 0006			PAL_COLOR2	= $06
  1942 = 0007			PAL_COLOR3	= $07
  1943 = 0008			PAL_COLBAK	= $08
  1944 = 0000			COLOR_BLACK	= $00
  1945 = 000E			COLOR_WHITE	= $0E
  1946 = 0032			COLOR_RED	= $32
  1947 = 0096			COLOR_CYAN	= $96
  1948 = 0068			COLOR_VIOLET	= $68
  1949 = 00C4			COLOR_GREEN	= $C4
  1950 = 0074			COLOR_BLUE	= $74
  1951 = 00EE			COLOR_YELLOW	= $EE
  1952 = 0028			COLOR_ORANGE	= $28
  1953 = 00E4			COLOR_BROWN	= $E4
  1954 = 003C			COLOR_LIGHTRED	= $3C
  1955 = 0004			COLOR_GRAY1	= $04
  1956 = 0006			COLOR_GRAY2	= $06
  1957 = 000A			COLOR_GRAY3	= $0A
  1958 = 00CC			COLOR_LIGHTGREEN	= $CC
  1959 = 007C			COLOR_LIGHTBLUE	= $7C
  1960 = 0004			FMOPENREAD	= $04
  1961 = 0008			FMOPENWRITE	= $08
  1962 = 0009			FMOPENAPPEND	= $09
  1963 = 000C			FMOPENREADWRITE	= $0C
  1964 = A048			DATESEPARATOR	= DATAORIGIN+$0000
  1965 = D20A			RND	= $D20A
  1966 = 02C0			adr.PALETTE	= $02C0
  1967 3643			.var PALETTE	= adr.PALETTE .word
  1968 = D012			adr.HPALETTE	= $D012
  1969 3643			.var HPALETTE	= adr.HPALETTE .word
  1970 = A049			FILEMODE	= DATAORIGIN+$0001
  1971 = A04A			GRAPHMODE	= DATAORIGIN+$0002
  1972 = A04B			IORESULT	= DATAORIGIN+$0003
  1973 = A04C			EOLN	= DATAORIGIN+$0004
  1974 = A04D			SCREENWIDTH	= DATAORIGIN+$0005
  1975 = A04F			SCREENHEIGHT	= DATAORIGIN+$0007
  1976 = 0000			adr.MEM	= $00
  1977 3643			.var MEM	= adr.MEM .word
  1978 = A051			RNDSEED	= DATAORIGIN+$0009
  1979
  1980 = 3643 C0 02		PALETTE
  1980 = 3645 12 D0		HPALETTE
  1980 = 3647 00 00		MEM
  1980 				.endl							; UNIT SYSTEM
  1981
  1982 				; ------------------------------------------------------------
  1983
  1984 3649			.local	ATARI						; UNIT
  1985
  1986 				; ------------------------------------------------------------
  1987
  1988 = 0000			DL_BLANK1	= $00
  1989 = 0010			DL_BLANK2	= $10
  1990 = 0020			DL_BLANK3	= $20
  1991 = 0030			DL_BLANK4	= $30
  1992 = 0040			DL_BLANK5	= $40
  1993 = 0050			DL_BLANK6	= $50
  1994 = 0060			DL_BLANK7	= $60
  1995 = 0070			DL_BLANK8	= $70
  1996 = 0080			DL_DLI	= $80
  1997 = 0040			DL_LMS	= $40
  1998 = 0020			DL_VSCROLL	= $20
  1999 = 0010			DL_HSCROLL	= $10
  2000 = 0001			DL_JMP	= $01
  2001 = 0041			DL_JVB	= $41
  2002 = 0002			DL_MODE_2	= $02
  2003 = 0003			DL_MODE_3	= $03
  2004 = 0004			DL_MODE_4	= $04
  2005 = 0005			DL_MODE_5	= $05
  2006 = 000E			DL_MODE_E	= $0E
  2007 = 000F			DL_MODE_F	= $0F
  2008 = 0010			IRQENS	= $10
  2009 = 0012			RTCLOK	= $12
  2010 = 0012			RTCLOK1	= $12
  2011 = 0013			RTCLOK2	= $13
  2012 = 0014			RTCLOK3	= $14
  2013 = 004D			ATRACT	= $4D
  2014 = 0052			LMARGIN	= $52
  2015 = 0053			RMARGIN	= $53
  2016 = 0054			ROWCRS	= $54
  2017 = 0055			COLCRS	= $55
  2018 = 0057			DINDEX	= $57
  2019 = 0058			SAVMSC	= $58
  2020 = 0062			PALNTS	= $62
  2021 = 006A			RAMTOP	= $6A
  2022 = 0200			VDSLST	= $0200
  2023 = 0230			SDLSTL	= $0230
  2024 = 0290			TXTROW	= $0290
  2025 = 0291			TXTCOL	= $0291
  2026 = 0293			TINDEX	= $0293
  2027 = 0294			TXTMSC	= $0294
  2028 = 022F			SDMCTL	= $022F
  2029 = 026F			GPRIOR	= $026F
  2030 = 02F0			CRSINH	= $02F0
  2031 = 02F3			CHACT	= $02F3
  2032 = 02F4			CHBAS	= $02F4
  2033 = 02FC			CH	= $02FC
  2034 = 02FD			FILDAT	= $02FD
  2035 = 02C0			PCOLR0	= $02C0
  2036 = 02C1			PCOLR1	= $02C1
  2037 = 02C2			PCOLR2	= $02C2
  2038 = 02C3			PCOLR3	= $02C3
  2039 = 02C4			COLOR0	= $02C4
  2040 = 02C5			COLOR1	= $02C5
  2041 = 02C6			COLOR2	= $02C6
  2042 = 02C7			COLOR3	= $02C7
  2043 = 02C8			COLOR4	= $02C8
  2044 = 02C8			COLBAKS	= $02C8
  2045 = D000			HPOSP0	= $D000
  2046 = D001			HPOSP1	= $D001
  2047 = D002			HPOSP2	= $D002
  2048 = D003			HPOSP3	= $D003
  2049 = D004			HPOSM0	= $D004
  2050 = D005			HPOSM1	= $D005
  2051 = D006			HPOSM2	= $D006
  2052 = D007			HPOSM3	= $D007
  2053 = D008			SIZEP0	= $D008
  2054 = D009			SIZEP1	= $D009
  2055 = D00A			SIZEP2	= $D00A
  2056 = D00B			SIZEP3	= $D00B
  2057 = D00C			SIZEM	= $D00C
  2058 = D00D			GRAFP0	= $D00D
  2059 = D00E			GRAFP1	= $D00E
  2060 = D00F			GRAFP2	= $D00F
  2061 = D010			GRAFP3	= $D010
  2062 = D011			GRAFM	= $D011
  2063 = D004			P0PF	= $D004
  2064 = D014			PAL	= $D014
  2065 = D013			TRIG3	= $D013
  2066 = D012			COLPM0	= $D012
  2067 = D013			COLPM1	= $D013
  2068 = D014			COLPM2	= $D014
  2069 = D015			COLPM3	= $D015
  2070 = D016			COLPF0	= $D016
  2071 = D017			COLPF1	= $D017
  2072 = D018			COLPF2	= $D018
  2073 = D019			COLPF3	= $D019
  2074 = D01A			COLBAK	= $D01A
  2075 = D01A			COLBK	= $D01A
  2076 = D01B			PRIOR	= $D01B
  2077 = D01D			GRACTL	= $D01D
  2078 = D01D			PMCNTL	= $D01D
  2079 = D01E			HITCLR	= $D01E
  2080 = D01F			CONSOL	= $D01F
  2081 = D200			AUDF1	= $D200
  2082 = D201			AUDC1	= $D201
  2083 = D202			AUDF2	= $D202
  2084 = D203			AUDC2	= $D203
  2085 = D204			AUDF3	= $D204
  2086 = D205			AUDC3	= $D205
  2087 = D206			AUDF4	= $D206
  2088 = D207			AUDC4	= $D207
  2089 = D208			AUDCTL	= $D208
  2090 = D209			KBCODE	= $D209
  2091 = D20E			IRQEN	= $D20E
  2092 = D20F			SKSTAT	= $D20F
  2093 = D300			PORTA	= $D300
  2094 = D301			PORTB	= $D301
  2095 = D302			PACTL	= $D302
  2096 = D400			DMACTL	= $D400
  2097 = D401			CHACTL	= $D401
  2098 = D402			DLISTL	= $D402
  2099 = D404			HSCROL	= $D404
  2100 = D405			VSCROL	= $D405
  2101 = D407			PMBASE	= $D407
  2102 = D409			CHBASE	= $D409
  2103 = D40A			WSYNC	= $D40A
  2104 = D40B			VCOUNT	= $D40B
  2105 = D40C			PENH	= $D40C
  2106 = D40D			PENV	= $D40D
  2107 = D40E			NMIEN	= $D40E
  2108 = FFFA			NMIVEC	= $FFFA
  2109 = FFFC			RESETVEC	= $FFFC
  2110 = FFFE			IRQVEC	= $FFFE
  2111
  2112 				.endl							; UNIT ATARI
  2113
  2114 				; ------------------------------------------------------------
  2115
  2116 3649			.local	CRT						; UNIT
  2117
  2118 				; ------------------------------------------------------------
  2119
  2120 = A092			TEXTATTR	= DATAORIGIN+$004A
  2121 = D01F			CONSOL	= $D01F
  2122 = 0000			CN_START_SELECT_OPTION	= $00
  2123 = 0001			CN_SELECT_OPTION	= $01
  2124 = 0002			CN_START_OPTION	= $02
  2125 = 0003			CN_OPTION	= $03
  2126 = 0004			CN_START_SELECT	= $04
  2127 = 0005			CN_SELECT	= $05
  2128 = 0006			CN_START	= $06
  2129 = 0007			CN_NONE	= $07
  2130 = 0000			BLACK	= $00
  2131 = 000F			WHITE	= $0F
  2132 = 0026			RED	= $26
  2133 = 00AC			CYAN	= $AC
  2134 = 0048			PURPLE	= $48
  2135 = 00B6			GREEN	= $B6
  2136 = 0086			BLUE	= $86
  2137 = 00DC			YELLOW	= $DC
  2138 = 0018			ORANGE	= $18
  2139 = 00F4			BROWN	= $F4
  2140 = 002A			LIGHT_RED	= $2A
  2141 = 0004			DARK_GREY	= $04
  2142 = 0008			GREY	= $08
  2143 = 00BC			LIGHT_GREEN	= $BC
  2144 = 009A			LIGHT_BLUE	= $9A
  2145 = 000C			LIGHT_GREY	= $0C
  2146 = 0000			BW40	= $00
  2147 = 0001			CO40	= $01
  2148 = 0002			BW80	= $02
  2149 = 0003			CO80	= $03
  2150 = 0007			MONO	= $07
  2151 = 0001			C40	= $01
  2152 = 0003			C80	= $03
  2153 = 0080			BLINK	= $80
  2154
  2155 				.endl							; UNIT CRT
  2156
  2157 				; ------------------------------------------------------------
  2158
  2159 3649			.local	TYPES						; UNIT
  2160
  2161 				; ------------------------------------------------------------
  2162
  2163 				.endl							; UNIT TYPES
  2164
  2165 				; ------------------------------------------------------------
  2166
  2167 3649			.local	GRAPH						; UNIT
  2168
  2169 				; ------------------------------------------------------------
  2170
  2171 = 0080			CURRENTDRIVER	= $80
  2172 = 0000			DETECT	= $00
  2173 = 0001			CGA	= $01
  2174 = 0002			MCGA	= $02
  2175 = 0003			EGA	= $03
  2176 = 0004			EGA64	= $04
  2177 = 0005			EGAMONO	= $05
  2178 = 0006			LOWRES	= $06
  2179 = 0007			HERCMONO	= $07
  2180 = 0009			VGA	= $09
  2181 = 000A			VESA	= $0A
  2182 = 000B			D1BIT	= $0B
  2183 = 000C			D2BIT	= $0C
  2184 = 000D			D4BIT	= $0D
  2185 = 000E			D6BIT	= $0E
  2186 = 000F			D8BIT	= $0F
  2187 = 0010			D12BIT	= $10
  2188 = 0018			M640X400	= $18
  2189 = 0018			M640X480	= $18
  2190 = 0001			GROK	= $01
  2191 = 00FF			GRNOINITGRAPH	= $FF
  2192 = 00FE			GRNOTDETECTED	= $FE
  2193 = 00FD			GRFILENOTFOUND	= $FD
  2194 = 00FC			GRINVALIDDRIVER	= $FC
  2195 = 00FB			GRNOLOADMEM	= $FB
  2196 = 00FA			GRNOSCANMEM	= $FA
  2197 = 00F9			GRNOFLOODMEM	= $F9
  2198 = 00F8			GRFONTNOTFOUND	= $F8
  2199 = 00F7			GRNOFONTMEM	= $F7
  2200 = 00F6			GRINVALIDMODE	= $F6
  2201 = 00F5			GRERROR	= $F5
  2202 = 00F4			GRIOERROR	= $F4
  2203 = 00F3			GRINVALIDFONT	= $F3
  2204 = 00F2			GRINVALIDFONTNUM	= $F2
  2205 = 00EE			GRINVALIDVERSION	= $EE
  2206 = 0000			CGAC0	= $00
  2207 = 0001			CGAC1	= $01
  2208 = 0002			CGAC2	= $02
  2209 = 0003			CGAC3	= $03
  2210 = 0004			CGAHI	= $04
  2211 = 0000			MCGAC0	= $00
  2212 = 0001			MCGAC1	= $01
  2213 = 0002			MCGAC2	= $02
  2214 = 0003			MCGAC3	= $03
  2215 = 0004			MCGAMED	= $04
  2216 = 0005			MCGAHI	= $05
  2217 = 0000			EGALO	= $00
  2218 = 0001			EGAHI	= $01
  2219 = 0000			EGA64LO	= $00
  2220 = 0001			EGA64HI	= $01
  2221 = 0003			EGAMONOHI	= $03
  2222 = 000A			VGALO	= $0A
  2223 = 001F			VGAMED	= $1F
  2224 = 0018			VGAHI	= $18
  2225 = A093			GRAPHRESULT	= DATAORIGIN+$004B
  2226 = A094			GETCOLOR	= DATAORIGIN+$004C
  2227 = A095			VIDEORAM	= DATAORIGIN+$004D
  2228 = A097			adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
  2229 3649			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  2230 = A097			LASTARCCOORDS.X	= DATAORIGIN+$004F
  2231 = A099			LASTARCCOORDS.Y	= DATAORIGIN+$0051
  2232 = A09B			LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
  2233 = A09D			LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
  2234 = A09F			LASTARCCOORDS.XEND	= DATAORIGIN+$0057
  2235 = A0A1			LASTARCCOORDS.YEND	= DATAORIGIN+$0059
  2236 = A0A3			WIN_LEFT	= DATAORIGIN+$005B
  2237 = A0A5			WIN_RIGHT	= DATAORIGIN+$005D
  2238 = A0A7			WIN_TOP	= DATAORIGIN+$005F
  2239 = A0A9			WIN_BOTTOM	= DATAORIGIN+$0061
  2240 = A0AB			SCANLINE_WIDTH	= DATAORIGIN+$0063
  2241 = A0AC			CURRENTX	= DATAORIGIN+$0064
  2242 = A0AE			CURRENTY	= DATAORIGIN+$0066
  2243
  2244 = 3649 97 A0		LASTARCCOORDS
  2244 				.endl							; UNIT GRAPH
  2245
  2246 				; ------------------------------------------------------------
  2247
  2248 364B			.local	VBXE						; UNIT
  2249
  2250 364B			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  2251 364B 85 8A			sta A
  2252
  2253 				; -------------------  ASM Block 00000100  -------------------
  2254
  2255 364D				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 364D A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 364F A0 5F		        ldy     #FX_MEMS
     4 3651 91 80		        sta     (fxptr),y
  2256
  2257 3653 A5 8A			lda a
  2258 3655 38 E9 01			sub #1
  2259
  2260 3658 A0 02			ldy #s@xdl.RPTL_
  2261 365A 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2262
  2263 365D				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 365D A9 00		        lda     #$00
     3 365F A0 5F		        ldy     #FX_MEMS
     4 3661 91 80		        sta     (fxptr),y
  2264
  2265 				; ------------------------------------------------------------
  2266
  2267 = 008A			A	= :EDX
  2268
  2269 3663			@exit
  2270 					.ifdef @new
  2271 					lda <@VarData
  2272 					sta :ztmp
  2273 					lda >@VarData
  2274 					ldy #@VarDataSize-1
  2275 					jmp @FreeMem
  2276 					els
  2277 3663 60				rts						; ret
  2278 					eif
  2279 				.endl
  2280
  2281 3664			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  2282 3664 85 8A			sta A
  2283
  2284 				; -------------------  ASM Block 00000101  -------------------
  2285
  2286 3666				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3666 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3668 A0 5F		        ldy     #FX_MEMS
     4 366A 91 80		        sta     (fxptr),y
  2287
  2288 366C A5 8A			lda a
  2289 366E 38 E9 01			sub #1
  2290
  2291 3671 A0 05			ldy #s@xdl.RPTL
  2292 3673 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2293
  2294 3676				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3676 A9 00		        lda     #$00
     3 3678 A0 5F		        ldy     #FX_MEMS
     4 367A 91 80		        sta     (fxptr),y
  2295
  2296 				; ------------------------------------------------------------
  2297
  2298 = 008A			A	= :EDX
  2299
  2300 367C			@exit
  2301 					.ifdef @new
  2302 					lda <@VarData
  2303 					sta :ztmp
  2304 					lda >@VarData
  2305 					ldy #@VarDataSize-1
  2306 					jmp @FreeMem
  2307 					els
  2308 367C 60				rts						; ret
  2309 					eif
  2310 				.endl
  2311
  2312 367D			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2313 367D 8D C4 A0			sta B
  2314
  2315 				; -------------------  ASM Block 00000113  -------------------
  2316
  2317 3680				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 3680 AD C4 A0		        lda     B
     3 3683 A0 5F		        ldy     #FX_MEMS
     4 3685 91 80		        sta     (fxptr),y
  2318
  2319 				; ------------------------------------------------------------
  2320
  2321 = A0C4			B	= DATAORIGIN+$007C
  2322
  2323 = A0C4			@VarData	= B
  2324 = 0001			@VarDataSize	= 1
  2325
  2326 3687			@exit
  2327 					.ifdef @new
  2328 					lda <@VarData
  2329 					sta :ztmp
  2330 					lda >@VarData
  2331 					ldy #@VarDataSize-1
  2332 					jmp @FreeMem
  2333 					els
  2334 3687 60				rts						; ret
  2335 					eif
  2336 				.endl
  2337
  2338 3688			.local	READVBXEMEMORYBYTE				; FUNCTION
  2339
  2340 				; optimize OK (vbxe_memorystream.inc), line = 20
  2341
  2342 3688 AC C5 A0 84 84 AC + 	mwy POSITION :bp2
  2343 3692 A0 02			ldy #$02
  2344 3694 B1 84			lda (:bp2),y
  2345 3696 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2346 3698 88				dey
  2347 3699 B1 84			lda (:bp2),y
  2348 369B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2349 369D 6A				ror @
  2350 369E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2351 36A0 6A				ror @
  2352 36A1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2353 36A3 6A				ror @
  2354 36A4 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2355 36A6 6A				ror @
  2356 36A7 09 80			ora #$80
  2357 36A9 8D C8 A0			sta BNK
  2358
  2359 				; optimize OK (vbxe_memorystream.inc), line = 21
  2360
  2361 36AC 88				dey
  2362 36AD B1 84			lda (:bp2),y
  2363 36AF 8D C9 A0			sta ADR
  2364 36B2 C8				iny
  2365 36B3 B1 84			lda (:bp2),y
  2366 36B5 29 0F			and #$0F
  2367 36B7 09 B0			ora #$B0
  2368 36B9 8D CA A0			sta ADR+1
  2369
  2370 				; optimize OK (vbxe_memorystream.inc), line = 23
  2371
  2372 36BC AD C8 A0			lda BNK
  2373 36BF 20 7D 36			jsr VBXEMEMORYBANK
  2374
  2375 				; optimize OK (vbxe_memorystream.inc), line = 25
  2376
  2377 36C2 AC CA A0			ldy ADR+1
  2378 36C5 84 83			sty :bp+1
  2379 36C7 AC C9 A0			ldy ADR
  2380 36CA B1 82			lda (:bp),y
  2381 36CC 8D C7 A0			sta RESULT
  2382
  2383 				; optimize OK (vbxe_memorystream.inc), line = 27
  2384
  2385 36CF AC C5 A0 84 84 AC + 	mwy POSITION :bp2
  2386 36D9 A0 00			ldy #$00
  2387 36DB B1 84			lda (:bp2),y
  2388 36DD 18 69 01			add #$01
  2389 36E0 91 84			sta (:bp2),y
  2390 36E2 C8				iny
  2391 36E3 B1 84			lda (:bp2),y
  2392 36E5 69 00			adc #$00
  2393 36E7 91 84			sta (:bp2),y
  2394 36E9 C8				iny
  2395 36EA B1 84			lda (:bp2),y
  2396 36EC 69 00			adc #$00
  2397 36EE 91 84			sta (:bp2),y
  2398 36F0 C8				iny
  2399 36F1 B1 84			lda (:bp2),y
  2400 36F3 69 00			adc #$00
  2401 36F5 91 84			sta (:bp2),y
  2402 36F7			@exit
  2403
  2404 				; ------------------------------------------------------------
  2405
  2406 = A0C5			POSITION	= DATAORIGIN+$007D
  2407 = A0C7			RESULT	= DATAORIGIN+$007F
  2408 = A0C8			BNK	= DATAORIGIN+$0080
  2409 = A0C9			ADR	= DATAORIGIN+$0081
  2410
  2411 = A0C5			@VarData	= POSITION
  2412 = 0005			@VarDataSize	= 5
  2413
  2414 36F7 60				rts						; ret
  2415 				.endl
  2416
  2417 36F8			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2418
  2419 				; optimize OK (vbxe_memorystream.inc), line = 39
  2420
  2421 36F8 AC CB A0 84 84 AC + 	mwy POSITION :bp2
  2422 3702 A0 02			ldy #$02
  2423 3704 B1 84			lda (:bp2),y
  2424 3706 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2425 3708 88				dey
  2426 3709 B1 84			lda (:bp2),y
  2427 370B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2428 370D 6A				ror @
  2429 370E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2430 3710 6A				ror @
  2431 3711 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2432 3713 6A				ror @
  2433 3714 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2434 3716 6A				ror @
  2435 3717 09 80			ora #$80
  2436 3719 8D CE A0			sta BNK
  2437
  2438 				; optimize OK (vbxe_memorystream.inc), line = 40
  2439
  2440 371C 88				dey
  2441 371D B1 84			lda (:bp2),y
  2442 371F 8D CF A0			sta ADR
  2443 3722 C8				iny
  2444 3723 B1 84			lda (:bp2),y
  2445 3725 29 0F			and #$0F
  2446 3727 09 B0			ora #$B0
  2447 3729 8D D0 A0			sta ADR+1
  2448
  2449 				; optimize OK (vbxe_memorystream.inc), line = 42
  2450
  2451 372C AD CE A0			lda BNK
  2452 372F 20 7D 36			jsr VBXEMEMORYBANK
  2453
  2454 				; optimize OK (vbxe_memorystream.inc), line = 44
  2455
  2456 3732 AC D0 A0			ldy ADR+1
  2457 3735 84 83			sty :bp+1
  2458 3737 AC CF A0			ldy ADR
  2459 373A AD CD A0			lda A
  2460 373D 91 82			sta (:bp),y
  2461
  2462 				; optimize OK (vbxe_memorystream.inc), line = 46
  2463
  2464 373F AC CB A0 84 84 AC + 	mwy POSITION :bp2
  2465 3749 A0 00			ldy #$00
  2466 374B B1 84			lda (:bp2),y
  2467 374D 18 69 01			add #$01
  2468 3750 91 84			sta (:bp2),y
  2469 3752 C8				iny
  2470 3753 B1 84			lda (:bp2),y
  2471 3755 69 00			adc #$00
  2472 3757 91 84			sta (:bp2),y
  2473 3759 C8				iny
  2474 375A B1 84			lda (:bp2),y
  2475 375C 69 00			adc #$00
  2476 375E 91 84			sta (:bp2),y
  2477 3760 C8				iny
  2478 3761 B1 84			lda (:bp2),y
  2479 3763 69 00			adc #$00
  2480 3765 91 84			sta (:bp2),y
  2481
  2482 				; ------------------------------------------------------------
  2483
  2484 = A0CB			POSITION	= DATAORIGIN+$0083
  2485 = A0CD			A	= DATAORIGIN+$0085
  2486 = A0CE			BNK	= DATAORIGIN+$0086
  2487 = A0CF			ADR	= DATAORIGIN+$0087
  2488
  2489 = A0CB			@VarData	= POSITION
  2490 = 0006			@VarDataSize	= 6
  2491
  2492 3767			@exit
  2493 					.ifdef @new
  2494 					lda <@VarData
  2495 					sta :ztmp
  2496 					lda >@VarData
  2497 					ldy #@VarDataSize-1
  2498 					jmp @FreeMem
  2499 					els
  2500 3767 60				rts						; ret
  2501 					eif
  2502 				.endl
  2503
  2504 3768			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2505 3768 8D DD A0			sta TVBXEMEMORYSTREAM
  2506 376B 8C DE A0			sty TVBXEMEMORYSTREAM+1
  2507 376E 8D E3 A0			sta POSITION
  2508 3771 8C E4 A0			sty POSITION+1
  2509 3774 18 69 04			add #4
  2510 3777 90 01			scc
  2511 3779 C8				iny
  2512 377A 8D E5 A0			sta SIZE
  2513 377D 8C E6 A0			sty SIZE+1
  2514
  2515 				; optimize OK (vbxe_memorystream.inc), line = 124
  2516
  2517 3780 AC E3 A0 84 84 AC + 	mwy POSITION :bp2
  2518 378A A0 02			ldy #$02
  2519 378C B1 84			lda (:bp2),y
  2520 378E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2521 3790 88				dey
  2522 3791 B1 84			lda (:bp2),y
  2523 3793 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2524 3795 6A				ror @
  2525 3796 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2526 3798 6A				ror @
  2527 3799 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2528 379B 6A				ror @
  2529 379C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2530 379E 6A				ror @
  2531 379F 09 80			ora #$80
  2532 37A1 8D E7 A0			sta BNK
  2533
  2534 				; optimize OK (vbxe_memorystream.inc), line = 125
  2535
  2536 37A4 88				dey
  2537 37A5 B1 84			lda (:bp2),y
  2538 37A7 8D E8 A0			sta ADR
  2539 37AA C8				iny
  2540 37AB B1 84			lda (:bp2),y
  2541 37AD 29 0F			and #$0F
  2542 37AF 09 B0			ora #$B0
  2543 37B1 8D E9 A0			sta ADR+1
  2544
  2545 				; optimize OK (vbxe_memorystream.inc), line = 127
  2546
  2547 37B4 AD E7 A0			lda BNK
  2548 37B7 20 7D 36			jsr VBXEMEMORYBANK
  2549
  2550 				; optimize OK (vbxe_memorystream.inc), line = 129
  2551
  2552 37BA AD DF A0			lda BUFFER
  2553 37BD 8D EC A0			sta SRC
  2554 37C0 AD E0 A0			lda BUFFER+1
  2555 37C3 8D ED A0			sta SRC+1
  2556
  2557 				; optimize OK (vbxe_memorystream.inc), line = 131
  2558
  2559 37C6 A9 00			lda #$00
  2560 37C8 8D EA A0			sta I
  2561 37CB 8D EB A0			sta I+1
  2562 37CE AD E1 A0			lda COUNT
  2563 37D1 38 E9 01			sub #$01
  2564 37D4 8D E7 37			sta @FORTMP_040C_0
  2565 37D7 AD E2 A0			lda COUNT+1
  2566 37DA E9 00			sbc #$00
  2567 37DC 8D E0 37			sta @FORTMP_040C_1
  2568
  2569 37DF			l_040F
  2570 				; --- ForToDoCondition
  2571 37DF A9 00			lda @FORTMP_040C_1::#$00
  2572 37E1 CD EB A0			cmp I+1
  2573 37E4 D0 05			bne @+
  2574 37E6 A9 00			lda @FORTMP_040C_0::#$00
  2575 37E8 CD EA A0			cmp I
  2576 				@
  2577 37EB 90 53			jcc l_041B
  2578
  2579 				; optimize OK (vbxe_memorystream.inc), line = 133
  2580
  2581 37ED AC EC A0 84 84 AC + 	mwy SRC :bp2
  2582 37F7 A0 00			ldy #$00
  2583 37F9 B1 84			lda (:bp2),y
  2584 37FB AC E9 A0			ldy ADR+1
  2585 37FE 84 83			sty :bp+1
  2586 3800 AC E8 A0			ldy ADR
  2587 3803 91 82			sta (:bp),y
  2588
  2589 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2590
  2591 3805 EE E8 A0			inc ADR
  2592 3808 D0 03			sne
  2593 380A EE E9 A0			inc ADR+1
  2594
  2595 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2596
  2597 380D EE EC A0			inc SRC
  2598 3810 D0 03			sne
  2599 3812 EE ED A0			inc SRC+1
  2600
  2601 				; optimize OK (vbxe_memorystream.inc), line = 138
  2602
  2603 3815 AD E9 A0			lda ADR+1
  2604 3818 C9 C0			cmp #$C0
  2605 381A 90 1A			jcc l_043A
  2606 381C D0 05			bne @+
  2607 381E AD E8 A0			lda ADR
  2608 3821 90 13			jcc l_043A
  2609 				@
  2610
  2611 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2612
  2613 3823 EE E7 A0			inc BNK
  2614
  2615 				; optimize OK (vbxe_memorystream.inc), line = 140
  2616
  2617 3826 AD E7 A0			lda BNK
  2618 3829 20 7D 36			jsr VBXEMEMORYBANK
  2619
  2620 				; optimize OK (vbxe_memorystream.inc), line = 141
  2621
  2622 382C A9 00			lda #$00
  2623 382E 8D E8 A0			sta ADR
  2624 3831 A9 B0			lda #$B0
  2625 3833 8D E9 A0			sta ADR+1
  2626 3836			l_043A
  2627
  2628 				; --- ForToDoEpilog
  2629 3836 EE EA A0			inc I
  2630 3839 D0 A4			jne l_040F
  2631 383B EE EB A0			inc I+1
  2632 383E D0 9F			jne l_040F
  2633 3840			l_041B
  2634
  2635 				; optimize OK (vbxe_memorystream.inc), line = 146
  2636
  2637 3840 A9 00			lda #$00
  2638 3842 20 7D 36			jsr VBXEMEMORYBANK
  2639
  2640 				; optimize OK (vbxe_memorystream.inc), line = 148
  2641
  2642 3845 AC E3 A0 84 84 AC + 	mwy POSITION :bp2
  2643 384F A0 00			ldy #$00
  2644 3851 B1 84			lda (:bp2),y
  2645 3853 18 6D E1 A0			add COUNT
  2646 3857 91 84			sta (:bp2),y
  2647 3859 C8				iny
  2648 385A B1 84			lda (:bp2),y
  2649 385C 6D E2 A0			adc COUNT+1
  2650 385F 91 84			sta (:bp2),y
  2651 3861 C8				iny
  2652 3862 B1 84			lda (:bp2),y
  2653 3864 69 00			adc #$00
  2654 3866 91 84			sta (:bp2),y
  2655 3868 C8				iny
  2656 3869 B1 84			lda (:bp2),y
  2657 386B 69 00			adc #$00
  2658 386D 91 84			sta (:bp2),y
  2659
  2660 				; ------------------------------------------------------------
  2661
  2662 = A0DD			TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
  2663 = A0DF			BUFFER	= DATAORIGIN+$0097
  2664 = A0E1			COUNT	= DATAORIGIN+$0099
  2665 = A0E3			POSITION	= DATAORIGIN+$009B
  2666 = A0E5			SIZE	= DATAORIGIN+$009D
  2667 = A0E7			BNK	= DATAORIGIN+$009F
  2668 = A0E8			ADR	= DATAORIGIN+$00A0
  2669 = A0EA			I	= DATAORIGIN+$00A2
  2670 = A0EC			SRC	= DATAORIGIN+$00A4
  2671
  2672 = A0DD			@VarData	= TVBXEMEMORYSTREAM
  2673 = 0011			@VarDataSize	= 17
  2674
  2675 386F			@exit
  2676 					.ifdef @new
  2677 					lda <@VarData
  2678 					sta :ztmp
  2679 					lda >@VarData
  2680 					ldy #@VarDataSize-1
  2681 					jmp @FreeMem
  2682 					els
  2683 386F 60				rts						; ret
  2684 					eif
  2685 				.endl
  2686
  2687 3870			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2688 3870 8D F0 A0			sta TVBXEMEMORYSTREAM
  2689 3873 8C F1 A0			sty TVBXEMEMORYSTREAM+1
  2690 3876 8D F3 A0			sta POSITION
  2691 3879 8C F4 A0			sty POSITION+1
  2692 387C 18 69 04			add #4
  2693 387F 90 01			scc
  2694 3881 C8				iny
  2695 3882 8D F5 A0			sta SIZE
  2696 3885 8C F6 A0			sty SIZE+1
  2697
  2698 				; optimize OK (vbxe_memorystream.inc), line = 158
  2699
  2700 3888 AD F3 A0			lda POSITION
  2701 388B 8D C5 A0			sta READVBXEMEMORYBYTE.POSITION
  2702 388E AD F4 A0			lda POSITION+1
  2703 3891 8D C6 A0			sta READVBXEMEMORYBYTE.POSITION+1
  2704 3894 20 88 36			jsr READVBXEMEMORYBYTE
  2705 3897 AD C7 A0			lda READVBXEMEMORYBYTE.RESULT
  2706 389A 8D F2 A0			sta RESULT
  2707
  2708 				; optimize OK (vbxe_memorystream.inc), line = 160
  2709
  2710 389D A9 00			lda #$00
  2711 389F 20 7D 36			jsr VBXEMEMORYBANK
  2712 38A2			@exit
  2713
  2714 				; ------------------------------------------------------------
  2715
  2716 = A0F0			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
  2717 = A0F2			RESULT	= DATAORIGIN+$00AA
  2718 = A0F3			POSITION	= DATAORIGIN+$00AB
  2719 = A0F5			SIZE	= DATAORIGIN+$00AD
  2720
  2721 = A0F0			@VarData	= TVBXEMEMORYSTREAM
  2722 = 0006			@VarDataSize	= 6
  2723
  2724 38A2 60				rts						; ret
  2725 				.endl
  2726
  2727 38A3			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2728 38A3 8D FF A0			sta TVBXEMEMORYSTREAM
  2729 38A6 8C 00 A1			sty TVBXEMEMORYSTREAM+1
  2730 38A9 8D 02 A1			sta POSITION
  2731 38AC 8C 03 A1			sty POSITION+1
  2732 38AF 18 69 04			add #4
  2733 38B2 90 01			scc
  2734 38B4 C8				iny
  2735 38B5 8D 04 A1			sta SIZE
  2736 38B8 8C 05 A1			sty SIZE+1
  2737
  2738 				; optimize OK (vbxe_memorystream.inc), line = 198
  2739
  2740 38BB AD 02 A1			lda POSITION
  2741 38BE 8D CB A0			sta WRITEVBXEMEMORYBYTE.POSITION
  2742 38C1 AD 03 A1			lda POSITION+1
  2743 38C4 8D CC A0			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2744 38C7 AD 01 A1			lda B
  2745 38CA 8D CD A0			sta WRITEVBXEMEMORYBYTE.A
  2746 38CD 20 F8 36			jsr WRITEVBXEMEMORYBYTE
  2747
  2748 				; optimize OK (vbxe_memorystream.inc), line = 200
  2749
  2750 38D0 A9 00			lda #$00
  2751 38D2 20 7D 36			jsr VBXEMEMORYBANK
  2752
  2753 				; ------------------------------------------------------------
  2754
  2755 = A0FF			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
  2756 = A101			B	= DATAORIGIN+$00B9
  2757 = A102			POSITION	= DATAORIGIN+$00BA
  2758 = A104			SIZE	= DATAORIGIN+$00BC
  2759
  2760 = A0FF			@VarData	= TVBXEMEMORYSTREAM
  2761 = 0007			@VarDataSize	= 7
  2762
  2763 38D5			@exit
  2764 					.ifdef @new
  2765 					lda <@VarData
  2766 					sta :ztmp
  2767 					lda >@VarData
  2768 					ldy #@VarDataSize-1
  2769 					jmp @FreeMem
  2770 					els
  2771 38D5 60				rts						; ret
  2772 					eif
  2773 				.endl
  2774
  2775 38D6			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2776 38D6 8D 0E A1			sta TVBXEMEMORYSTREAM
  2777 38D9 8C 0F A1			sty TVBXEMEMORYSTREAM+1
  2778 38DC 8D 10 A1			sta POSITION
  2779 38DF 8C 11 A1			sty POSITION+1
  2780 38E2 18 69 04			add #4
  2781 38E5 90 01			scc
  2782 38E7 C8				iny
  2783 38E8 8D 12 A1			sta SIZE
  2784 38EB 8C 13 A1			sty SIZE+1
  2785
  2786 				; optimize OK (vbxe_memorystream.inc), line = 239
  2787
  2788 38EE AC 10 A1 84 84 AC + 	mwy POSITION :bp2
  2789 38F8 A0 00			ldy #$00
  2790 38FA B1 84			lda (:bp2),y
  2791 38FC 8D 14 A1			sta ADR
  2792 38FF C8				iny
  2793 3900 B1 84			lda (:bp2),y
  2794 3902 8D 15 A1			sta ADR+1
  2795 3905 C8				iny
  2796 3906 B1 84			lda (:bp2),y
  2797 3908 8D 16 A1			sta ADR+2
  2798 390B C8				iny
  2799 390C B1 84			lda (:bp2),y
  2800 390E 8D 17 A1			sta ADR+3
  2801
  2802 				; optimize OK (vbxe_memorystream.inc), line = 240
  2803
  2804 3911 AC 12 A1 84 84 AC + 	mwy SIZE :bp2
  2805 391B A0 00			ldy #$00
  2806 391D B1 84			lda (:bp2),y
  2807 391F 8D 18 A1			sta SIZ
  2808 3922 C8				iny
  2809 3923 B1 84			lda (:bp2),y
  2810 3925 8D 19 A1			sta SIZ+1
  2811 3928 C8				iny
  2812 3929 B1 84			lda (:bp2),y
  2813 392B 8D 1A A1			sta SIZ+2
  2814 392E C8				iny
  2815 392F B1 84			lda (:bp2),y
  2816 3931 8D 1B A1			sta SIZ+3
  2817
  2818 				; -------------------  ASM Block 00000114  -------------------
  2819
  2820 3934 8A 48			txa:pha
  2821
  2822 3936 AD 14 A1 8D A4 39		mva adr _adr
  2823 393C AD 15 A1 8D A5 39		mva adr+1 _adr+1
  2824 3942 AD 16 A1 8D A6 39		mva adr+2 _adr+2
  2825
  2826 3948				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3948 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 394A A0 5F		        ldy     #FX_MEMS
     4 394C 91 80		        sta     (fxptr),y
  2827
  2828 394E AD A6 39 CD 1A A1 + loop	cpw _adr+1 siz+1
  2829 395C B0 37			bcs skp
  2830
  2831 395E A0 14			ldy #20
  2832 3960 B9 9E 39 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2833
  2834 3969				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 3969 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 396B A0 50		        ldy     #FX_BL_ADR0
     4 396D 91 80		        sta     (fxptr),y
  2835 396F				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 396F A9 00		        lda     #$00
     3 3971 A0 51		        ldy     #FX_BL_ADR1
     4 3973 91 80		        sta     (fxptr),y
  2836 3975				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 3975 A0 52		        ldy     #FX_BL_ADR2
     3 3977 91 80		        sta     (fxptr),y
  2837
  2838 3979				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3979 A9 01		        lda     #$01
     3 397B A0 53		        ldy     #FX_BLITTER_START
     4 397D 91 80		        sta     (fxptr),y
  2839
  2840 397F			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 397F A0 53		        ldy     #FX_BLITTER_BUSY
     3 3981 B1 80		        lda     (fxptr),y
  2841 3983 D0 FA			bne wait
  2842
  2843 3985 A9 00			lda #$00
  2844 3987 8D A4 39			sta _adr
  2845 398A EE A5 39 D0 03 EE + 	inw _adr+1
  2846
  2847 3992 4C 4E 39			jmp loop
  2848
  2849 3995			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 3995 A9 00		        lda     #$00
     3 3997 A0 5F		        ldy     #FX_MEMS
     4 3999 91 80		        sta     (fxptr),y
  2850
  2851 399B 4C B3 39			jmp stop
  2852
  2853 399E 00 00 00		bltClr	.long 0x00	; source address
  2854 39A1 00 00			.word 0x00	; source step y
  2855 39A3 00				.byte 0x00	; source step x
  2856 39A4 00 00 00		_adr	.long 0x00	; destination address
  2857 39A7 00 01			.word 0x0100	; destination step y
  2858 39A9 01				.byte 0x01	; destination step x
  2859 39AA FF 00		_siz	.word 0xff	; width
  2860 39AC 00				.byte 0x00	; height
  2861 39AD 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2862 39AE 00				dta 0x00	; xor mask
  2863 39AF 00				dta 0x00	; collision and mask
  2864 39B0 00				dta 0x00	; zoom
  2865 39B1 00				dta 0x00	; pattern feature
  2866 39B2 00				dta 0x00	; control
  2867
  2868 39B3 68 AA		stop	pla:tax
  2869
  2870 				; optimize OK (vbxe_memorystream.inc), line = 292
  2871
  2872 39B5 AC 10 A1 84 84 AC + 	mwy POSITION :bp2
  2873 39BF A0 00			ldy #$00
  2874 39C1 98				tya
  2875 39C2 91 84			sta (:bp2),y
  2876 39C4 C8				iny
  2877 39C5 91 84			sta (:bp2),y
  2878 39C7 C8				iny
  2879 39C8 91 84			sta (:bp2),y
  2880 39CA C8				iny
  2881 39CB 91 84			sta (:bp2),y
  2882
  2883 				; optimize OK (vbxe_memorystream.inc), line = 293
  2884
  2885 39CD AC 12 A1 84 84 AC + 	mwy SIZE :bp2
  2886 39D7 A0 00			ldy #$00
  2887 39D9 91 84			sta (:bp2),y
  2888 39DB C8				iny
  2889 39DC 91 84			sta (:bp2),y
  2890 39DE C8				iny
  2891 39DF A9 08			lda #$08
  2892 39E1 91 84			sta (:bp2),y
  2893 39E3 C8				iny
  2894 39E4 A9 00			lda #$00
  2895 39E6 91 84			sta (:bp2),y
  2896
  2897 				; ------------------------------------------------------------
  2898
  2899 = A10E			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
  2900 = A110			POSITION	= DATAORIGIN+$00C8
  2901 = A112			SIZE	= DATAORIGIN+$00CA
  2902 = A114			ADR	= DATAORIGIN+$00CC
  2903 = A118			SIZ	= DATAORIGIN+$00D0
  2904
  2905 = A10E			@VarData	= TVBXEMEMORYSTREAM
  2906 = 000E			@VarDataSize	= 14
  2907
  2908 39E8			@exit
  2909 					.ifdef @new
  2910 					lda <@VarData
  2911 					sta :ztmp
  2912 					lda >@VarData
  2913 					ldy #@VarDataSize-1
  2914 					jmp @FreeMem
  2915 					els
  2916 39E8 60				rts						; ret
  2917 					eif
  2918 				.endl
  2919
  2920 39E9			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2921
  2922 				; -------------------  ASM Block 00000123  -------------------
  2923
  2924 					@setxdl #e@xdl.mapoff
  2924 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2924 39E9 A9 05		 LDA# E@XDL.MAPOFF
  2924 39EB 20 83 29		 JSR @SETXDL
  2925
  2926 39EE			@exit
  2927 					.ifdef @new
  2928 					lda <@VarData
  2929 					sta :ztmp
  2930 					lda >@VarData
  2931 					ldy #@VarDataSize-1
  2932 					jmp @FreeMem
  2933 					els
  2934 39EE 60				rts						; ret
  2935 					eif
  2936 				.endl
  2937
  2938 39EF			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2939 39EF			.local	@0201810000180000
  2940
  2941 				; optimize OK (VBXE), line = 643
  2942
  2943 39EF AD 1C A1			lda A
  2944 39F2 8D 4A A0			sta SYSTEM.GRAPHMODE
  2945
  2946 				; optimize OK (VBXE), line = 645
  2947
  2948 39F5 A9 C0			lda #$C0
  2949 39F7 8D 4F A0			sta SYSTEM.SCREENHEIGHT
  2950 39FA A9 00			lda #$00
  2951 39FC 8D 50 A0			sta SYSTEM.SCREENHEIGHT+1
  2952
  2953 				; optimize OK (VBXE), line = 647
  2954
  2955 39FF AD 1C A1			lda A
  2956 3A02 8D 1F A1			sta @CASETMP_0005
  2957 3A05 C9 0A			cmp #$0A
  2958 3A07 D0 12			jne l_04B1
  2959 				@
  2960
  2961 				; optimize OK (VBXE), line = 648
  2962
  2963 3A09 A9 A0			lda #$A0
  2964 3A0B 8D 4D A0			sta SYSTEM.SCREENWIDTH
  2965 3A0E A9 00			lda #$00
  2966 3A10 8D 4E A0			sta SYSTEM.SCREENWIDTH+1
  2967 3A13 A9 01			lda #$01
  2968 3A15 8D 1C A1			sta A
  2969 3A18 4C 60 3A			jmp a_0005
  2970 3A1B			l_04B1
  2971 3A1B C9 1F			cmp #$1F
  2972 3A1D D0 12			jne l_04C0
  2973
  2974 				; optimize OK (VBXE), line = 649
  2975
  2976 3A1F A9 40			lda #$40
  2977 3A21 8D 4D A0			sta SYSTEM.SCREENWIDTH
  2978 3A24 A9 01			lda #$01
  2979 3A26 8D 4E A0			sta SYSTEM.SCREENWIDTH+1
  2980 3A29 A9 02			lda #$02
  2981 3A2B 8D 1C A1			sta A
  2982 3A2E 4C 60 3A			jmp a_0005
  2983 3A31			l_04C0
  2984 3A31 C9 18			cmp #$18
  2985 3A33 D0 12			jne l_04CF
  2986
  2987 				; optimize OK (VBXE), line = 650
  2988
  2989 3A35 A9 80			lda #$80
  2990 3A37 8D 4D A0			sta SYSTEM.SCREENWIDTH
  2991 3A3A A9 02			lda #$02
  2992 3A3C 8D 4E A0			sta SYSTEM.SCREENWIDTH+1
  2993 3A3F A9 03			lda #$03
  2994 3A41 8D 1C A1			sta A
  2995 3A44 4C 60 3A			jmp a_0005
  2996 3A47			l_04CF
  2997
  2998 				; optimize OK (VBXE), line = 654
  2999
  3000 3A47 A9 50			lda #$50
  3001 3A49 8D 4D A0			sta SYSTEM.SCREENWIDTH
  3002 3A4C A9 00			lda #$00
  3003 3A4E 8D 4E A0			sta SYSTEM.SCREENWIDTH+1
  3004
  3005 				; optimize OK (VBXE), line = 655
  3006
  3007 3A51 A9 18			lda #$18
  3008 3A53 8D 4F A0			sta SYSTEM.SCREENHEIGHT
  3009 3A56 A9 00			lda #$00
  3010 3A58 8D 50 A0			sta SYSTEM.SCREENHEIGHT+1
  3011
  3012 				; optimize OK (VBXE), line = 656
  3013
  3014 3A5B A9 02			lda #$02
  3015 3A5D 8D 1C A1			sta A
  3016 3A60			a_0005
  3017
  3018 				; -------------------  ASM Block 00000124  -------------------
  3019
  3020 3A60 8A 48			txa:pha
  3021
  3022 3A62 AD 4D A0			lda MAIN.SYSTEM.ScreenWidth
  3023 3A65 AE 4E A0			ldx MAIN.SYSTEM.ScreenWidth+1
  3024
  3025 3A68 AC 4F A0			ldy MAIN.SYSTEM.ScreenHeight
  3026
  3027 3A6B 20 7A 21			@SCREENSIZE
  3028
  3029 					@setxdl a
  3029 				 LDA A\ JSR @SETXDL
  3029 3A6E AD 1C A1		 LDA A
  3029 3A71 20 83 29		 JSR @SETXDL
  3030
  3031 3A74				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3A74 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3A76 A0 5F		        ldy     #FX_MEMS
     4 3A78 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3032
  3033 3A7A A0 09			ldy #s@xdl.ovstep
  3034
  3035 3A7C AD 1D A1			lda s
  3036 3A7F 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  3037
  3038 3A82 AD 1E A1			lda s+1
  3039 3A85 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  3040
  3041 3A88				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3A88 A9 00		        lda     #$00
     3 3A8A A0 5F		        ldy     #FX_MEMS
     4 3A8C 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3042
  3043 3A8E 68 AA			pla:tax
  3044
  3045 				; ------------------------------------------------------------
  3046
  3047 = A11C			A	= DATAORIGIN+$00D4
  3048 = A11D			S	= DATAORIGIN+$00D5
  3049 = A11F			@CASETMP_0005	= DATAORIGIN+$00D7
  3050
  3051 = A11C			@VarData	= A
  3052 = 0004			@VarDataSize	= 4
  3053
  3054 3A90			@exit
  3055 					.ifdef @new
  3056 					lda <@VarData
  3057 					sta :ztmp
  3058 					lda >@VarData
  3059 					ldy #@VarDataSize-1
  3060 					jmp @FreeMem
  3061 					els
  3062 3A90 60				rts						; ret
  3063 					eif
  3064 				.endl
  3065 				.endl							; overload
  3066
  3067 3A91			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  3068 3A91			.local	@010180000
  3069 3A91 8D 20 A1			sta A
  3070
  3071 				; optimize OK (VBXE), line = 698
  3072
  3073 3A94 8D 1C A1			sta SETHORIZONTALRES.@0201810000180000.A
  3074 3A97 A9 40			lda #$40
  3075 3A99 8D 1D A1			sta SETHORIZONTALRES.@0201810000180000.S
  3076 3A9C A9 01			lda #$01
  3077 3A9E 8D 1E A1			sta SETHORIZONTALRES.@0201810000180000.S+1
  3078 3AA1 20 EF 39			jsr SETHORIZONTALRES.@0201810000180000
  3079
  3080 				; ------------------------------------------------------------
  3081
  3082 = A120			A	= DATAORIGIN+$00D8
  3083
  3084 = A120			@VarData	= A
  3085 = 0001			@VarDataSize	= 1
  3086
  3087 3AA4			@exit
  3088 					.ifdef @new
  3089 					lda <@VarData
  3090 					sta :ztmp
  3091 					lda >@VarData
  3092 					ldy #@VarDataSize-1
  3093 					jmp @FreeMem
  3094 					els
  3095 3AA4 60				rts						; ret
  3096 					eif
  3097 				.endl
  3098 				.endl							; overload
  3099
  3100 3AA5			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  3101
  3102 				; -------------------  ASM Block 00000126  -------------------
  3103
  3104 3AA5				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 3AA5 AD 21 A1		        lda     A
     3 3AA8 A0 50		        ldy     #FX_BL_ADR0
     4 3AAA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3105 3AAC AD 22 A1			lda	a+1
  3106 3AAF 29 0F			and	#$0f
  3107 3AB1				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 3AB1 A0 51		        ldy     #FX_BL_ADR1
     3 3AB3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3108 3AB5				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3AB5 A9 00		        lda     #$00
     3 3AB7 A0 52		        ldy     #FX_BL_ADR2
     4 3AB9 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3109
  3110 3ABB				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3ABB A9 01		        lda     #$01
     3 3ABD A0 53		        ldy     #FX_BLITTER_START
     4 3ABF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3111
  3112 				;wait	fxla	FX_BLITTER_BUSY
  3113 				;	bne	wait
  3114
  3115 				; ------------------------------------------------------------
  3116
  3117 = A121			A	= DATAORIGIN+$00D9
  3118 = A048			A.SRC_ADR	= DATAORIGIN+$0000
  3119 = A048			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  3120 = A049			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  3121 = A04A			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  3122 = A04B			A.SRC_STEP_Y	= DATAORIGIN+$0003
  3123 = A04D			A.SRC_STEP_X	= DATAORIGIN+$0005
  3124 = A04E			A.DST_ADR	= DATAORIGIN+$0006
  3125 = A04E			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  3126 = A04F			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  3127 = A050			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  3128 = A051			A.DST_STEP_Y	= DATAORIGIN+$0009
  3129 = A053			A.DST_STEP_X	= DATAORIGIN+$000B
  3130 = A054			A.BLT_WIDTH	= DATAORIGIN+$000C
  3131 = A056			A.BLT_HEIGHT	= DATAORIGIN+$000E
  3132 = A057			A.BLT_AND_MASK	= DATAORIGIN+$000F
  3133 = A058			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  3134 = A059			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  3135 = A05A			A.BLT_ZOOM	= DATAORIGIN+$0012
  3136 = A05B			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  3137 = A05C			A.BLT_CONTROL	= DATAORIGIN+$0014
  3138
  3139 = A121			@VarData	= A
  3140 = 0002			@VarDataSize	= 2
  3141
  3142 3AC1			@exit
  3143 					.ifdef @new
  3144 					lda <@VarData
  3145 					sta :ztmp
  3146 					lda >@VarData
  3147 					ldy #@VarDataSize-1
  3148 					jmp @FreeMem
  3149 					els
  3150 3AC1 60				rts						; ret
  3151 					eif
  3152 				.endl
  3153
  3154 3AC2			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  3155 3AC2 8D 25 A1			sta A
  3156
  3157 				; -------------------  ASM Block 00000130  -------------------
  3158
  3159 3AC5				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 3AC5 AD 25 A1		        lda     A
     3 3AC8 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 3ACA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3160
  3161 				; ------------------------------------------------------------
  3162
  3163 = A125			A	= DATAORIGIN+$00DD
  3164
  3165 = A125			@VarData	= A
  3166 = 0001			@VarDataSize	= 1
  3167
  3168 3ACC			@exit
  3169 					.ifdef @new
  3170 					lda <@VarData
  3171 					sta :ztmp
  3172 					lda >@VarData
  3173 					ldy #@VarDataSize-1
  3174 					jmp @FreeMem
  3175 					els
  3176 3ACC 60				rts						; ret
  3177 					eif
  3178 				.endl
  3179
  3180 				; ------------------------------------------------------------
  3181 				; ------------------------------------------------------------
  3182 3ACD			@UnitInit
  3183
  3184 				; -------------------  ASM Block 00000138  -------------------
  3185
  3186 3ACD 8A 48			txa:pha
  3187
  3188 3ACF 20 37 28			jsr @vbxe_detect
  3189 3AD2 90 04			bcc ok
  3190
  3191 3AD4 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  3192 3AD6 D0 05			bne status
  3193
  3194 3AD8 20 8D 28		ok	jsr @vbxe_init
  3195
  3196 3ADB A2 01			ldx #MAIN.GRAPH.grOK
  3197 3ADD 8E 93 A0		status	stx MAIN.GRAPH.GraphResult
  3198
  3199 3AE0 68 AA			pla:tax
  3200
  3201 3AE2 60				rts
  3202
  3203 				; ------------------------------------------------------------
  3204
  3205 = 0001			VC_XDL	= $01
  3206 = 0002			VC_XCOLOR	= $02
  3207 = 0004			VC_NO_TRANS	= $04
  3208 = 0008			VC_TRANS15	= $08
  3209 = 0000			TCBLACK	= $00
  3210 = 0001			TCRED	= $01
  3211 = 0002			TCGREEN	= $02
  3212 = 0003			TCYELLOW	= $03
  3213 = 0004			TCBLUE	= $04
  3214 = 0005			TCMAGENTA	= $05
  3215 = 0006			TCCYAN	= $06
  3216 = 0007			TCWHITE	= $07
  3217 = 0008			TCBRIGHTBLACK	= $08
  3218 = 0009			TCBRIGHTRED	= $09
  3219 = 000A			TCBRIGHTGREEN	= $0A
  3220 = 000B			TCBRIGHTYELLOW	= $0B
  3221 = 000C			TCBRIGHTBLUE	= $0C
  3222 = 000D			TCBRIGHTMAGENTA	= $0D
  3223 = 000E			TCBRIGHTCYAN	= $0E
  3224 = 000F			TCBRIGHTWHITE	= $0F
  3225 = 0080			TBBLACK	= $80
  3226 = 0090			TBRED	= $90
  3227 = 00A0			TBGREEN	= $A0
  3228 = 00B0			TBYELLOW	= $B0
  3229 = 00C0			TBBLUE	= $C0
  3230 = 00D0			TBMAGENTA	= $D0
  3231 = 00E0			TBCYAN	= $E0
  3232 = 00F0			TBWHITE	= $F0
  3233 = A0BC			adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
  3234 3AE3			.var VRAM	= adr.VRAM .word
  3235 = A0BC			VRAM.POSITION	= DATAORIGIN+$0074
  3236 = A0C0			VRAM.SIZE	= DATAORIGIN+$0078
  3237 = 0063			SCROLLBACK_FILL	= $63
  3238 = 2979			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  3239 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  3240 3AE3			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  3241 = 02FD			FILDAT	= $02FD
  3242 = 0054			ROWCRS	= $54
  3243 = 0055			COLCRS	= $55
  3244 = 0068			CRSADR	= $68
  3245
  3246 = 3AE3 BC A0		VRAM
  3246 = 3AE5 00 04		SCROLLBACK_BUFFER
  3246 				.endl							; UNIT VBXE
  3247
  3248 				; ------------------------------------------------------------
  3249
  3250 3AE7			.local	JOYSTICK					; UNIT
  3251
  3252 				; ------------------------------------------------------------
  3253
  3254 = 000F			JOY_NONE	= $0F
  3255 = 000E			JOY_UP	= $0E
  3256 = 000D			JOY_DOWN	= $0D
  3257 = 000B			JOY_LEFT	= $0B
  3258 = 000A			JOY_LEFT_UP	= $0A
  3259 = 0009			JOY_LEFT_DOWN	= $09
  3260 = 0007			JOY_RIGHT	= $07
  3261 = 0006			JOY_RIGHT_UP	= $06
  3262 = 0005			JOY_RIGHT_DOWN	= $05
  3263 = 0278			JOY_1	= $0278
  3264 = 0279			JOY_2	= $0279
  3265 = 0278			adr.STICK	= $0278
  3266 3AE7			.var STICK	= adr.STICK .word
  3267 = 0278			STICK0	= $0278
  3268 = 0279			STICK1	= $0279
  3269 = 0284			adr.STRIG	= $0284
  3270 3AE7			.var STRIG	= adr.STRIG .word
  3271 = 0284			STRIG0	= $0284
  3272 = 0285			STRIG1	= $0285
  3273 = 0270			adr.PADDL	= $0270
  3274 3AE7			.var PADDL	= adr.PADDL .word
  3275 = 0270			PADDL0	= $0270
  3276 = 0271			PADDL1	= $0271
  3277 = 0272			PADDL2	= $0272
  3278 = 0273			PADDL3	= $0273
  3279 = 0274			PADDL4	= $0274
  3280 = 0275			PADDL5	= $0275
  3281 = 0276			PADDL6	= $0276
  3282 = 0277			PADDL7	= $0277
  3283 = 027C			adr.PTRIG	= $027C
  3284 3AE7			.var PTRIG	= adr.PTRIG .word
  3285 = 027C			PTRIG0	= $027C
  3286 = 027D			PTRIG1	= $027D
  3287 = 027E			PTRIG2	= $027E
  3288 = 027F			PTRIG3	= $027F
  3289 = 0280			PTRIG4	= $0280
  3290 = 0281			PTRIG5	= $0281
  3291 = 0282			PTRIG6	= $0282
  3292 = 0283			PTRIG7	= $0283
  3293 = D010			TRIG0	= $D010
  3294 = D011			TRIG1	= $D011
  3295 = D200			POT0	= $D200
  3296 = D208			ALLPOT	= $D208
  3297 = D20B			POTGO	= $D20B
  3298
  3299 = 3AE7 78 02		STICK
  3299 = 3AE9 84 02		STRIG
  3299 = 3AEB 70 02		PADDL
  3299 = 3AED 7C 02		PTRIG
  3299 				.endl							; UNIT JOYSTICK
  3300
  3301 3AEF			.local	START_LEVEL					; PROCEDURE
  3302
  3303 3AEF			@exit
  3304 					.ifdef @new
  3305 					lda <@VarData
  3306 					sta :ztmp
  3307 					lda >@VarData
  3308 					ldy #@VarDataSize-1
  3309 					jmp @FreeMem
  3310 					els
  3311 3AEF 60				rts						; ret
  3312 					eif
  3313 				.endl
  3314
  3315 3AF0			.local	DEATH_SOUND					; PROCEDURE
  3316
  3317 				; ------------------------------------------------------------
  3318
  3319 = A12E			A	= DATAORIGIN+$00E6
  3320
  3321 = A12E			@VarData	= A
  3322 = 0002			@VarDataSize	= 2
  3323
  3324 3AF0			@exit
  3325 					.ifdef @new
  3326 					lda <@VarData
  3327 					sta :ztmp
  3328 					lda >@VarData
  3329 					ldy #@VarDataSize-1
  3330 					jmp @FreeMem
  3331 					els
  3332 3AF0 60				rts						; ret
  3333 					eif
  3334 				.endl
  3335
  3336 3AF1			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3337
  3338 				; ------------------------------------------------------------
  3339
  3340 = A130			A	= DATAORIGIN+$00E8
  3341 = A132			B	= DATAORIGIN+$00EA
  3342
  3343 = A130			@VarData	= A
  3344 = 0004			@VarDataSize	= 4
  3345
  3346 3AF1			@exit
  3347 					.ifdef @new
  3348 					lda <@VarData
  3349 					sta :ztmp
  3350 					lda >@VarData
  3351 					ldy #@VarDataSize-1
  3352 					jmp @FreeMem
  3353 					els
  3354 3AF1 60				rts						; ret
  3355 					eif
  3356 				.endl
  3357
  3358 3AF2			.local	MOUSECOORDS					; PROCEDURE
  3359
  3360 				; optimize OK (service.pas), line = 296
  3361
  3362 3AF2 AD 00 D3			lda ATARI.PORTA
  3363 3AF5 29 0F			and #$0F
  3364 3AF7 8D 3B A2			sta A
  3365
  3366 				; optimize OK (service.pas), line = 298
  3367
  3368 3AFA 8D 3C A2			sta @CASETMP_0007
  3369 3AFD C9 0B			cmp #$0B
  3370 3AFF D0 38			jne l_051D
  3371 				@
  3372
  3373 				; optimize OK (service.pas), line = 299
  3374
  3375 3B01 AC 39 A2 84 84 AC + 	mwy X :bp2
  3376 3B0B A0 00			ldy #$00
  3377 3B0D B1 84			lda (:bp2),y
  3378 3B0F C8				iny
  3379 3B10 C9 0B			cmp #$0B
  3380 3B12 B1 84			lda (:bp2),y
  3381 3B14 E9 00			sbc #$00
  3382 3B16 50 02			svc
  3383 3B18 49 80			eor #$80
  3384 3B1A 30 1A			jmi l_052E
  3385 3B1C AC 39 A2 84 84 AC + 	mwy X :bp2
  3386 3B26 A0 00			ldy #$00
  3387 3B28 B1 84			lda (:bp2),y
  3388 3B2A 38 E9 04			sub #$04
  3389 3B2D 91 84			sta (:bp2),y
  3390 3B2F C8				iny
  3391 3B30 B1 84			lda (:bp2),y
  3392 3B32 E9 00			sbc #$00
  3393 3B34 91 84			sta (:bp2),y
  3394 3B36			l_052E
  3395 3B36 4C 72 3B			jmp a_0007
  3396 3B39			l_051D
  3397 3B39 C9 07			cmp #$07
  3398 3B3B D0 35			jne l_0539
  3399
  3400 				; optimize OK (service.pas), line = 300
  3401
  3402 3B3D AC 39 A2 84 84 AC + 	mwy X :bp2
  3403 3B47 A0 00			ldy #$00
  3404 3B49 B1 84			lda (:bp2),y
  3405 3B4B C8				iny
  3406 3B4C C9 D8			cmp #$D8
  3407 3B4E B1 84			lda (:bp2),y
  3408 3B50 E9 00			sbc #$00
  3409 3B52 50 02			svc
  3410 3B54 49 80			eor #$80
  3411 3B56 10 1A			jpl l_054A
  3412 3B58 AC 39 A2 84 84 AC + 	mwy X :bp2
  3413 3B62 A0 00			ldy #$00
  3414 3B64 B1 84			lda (:bp2),y
  3415 3B66 18 69 04			add #$04
  3416 3B69 91 84			sta (:bp2),y
  3417 3B6B C8				iny
  3418 3B6C B1 84			lda (:bp2),y
  3419 3B6E 69 00			adc #$00
  3420 3B70 91 84			sta (:bp2),y
  3421 3B72			l_054A
  3422 3B72			l_0539
  3423 3B72			a_0007
  3424
  3425 				; ------------------------------------------------------------
  3426
  3427 = A239			X	= DATAORIGIN+$01F1
  3428 = A23B			A	= DATAORIGIN+$01F3
  3429 = A23C			@CASETMP_0007	= DATAORIGIN+$01F4
  3430
  3431 = A239			@VarData	= X
  3432 = 0004			@VarDataSize	= 4
  3433
  3434 3B72			@exit
  3435 					.ifdef @new
  3436 					lda <@VarData
  3437 					sta :ztmp
  3438 					lda >@VarData
  3439 					ldy #@VarDataSize-1
  3440 					jmp @FreeMem
  3441 					els
  3442 3B72 60				rts						; ret
  3443 					eif
  3444 				.endl
  3445
  3446 3B73			.local	MOUSECLICK					; FUNCTION
  3447
  3448 				; optimize OK (service.pas), line = 310
  3449
  3450 3B73			?volatile:
  3451 3B73 AD 10 D0			lda JOYSTICK.TRIG0
  3452 3B76 49 01			eor #$01
  3453 3B78 8D 3D A2			sta RESULT
  3454 3B7B			@exit
  3455
  3456 				; ------------------------------------------------------------
  3457
  3458 = A23D			RESULT	= DATAORIGIN+$01F5
  3459
  3460 3B7B 60				rts						; ret
  3461 				.endl
  3462
  3463 3B7C			.local	BLITBOX						; PROCEDURE
  3464
  3465 				; -------------------  ASM Block 00000141  -------------------
  3466
  3467 3B7C				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B7C A9 80		        lda     #$80
     3 3B7E A0 5F		        ldy     #FX_MEMS
     4 3B80 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3468 					
  3469 				; optimize OK (service.pas), line = 323
  3470
  3471 3B82 AD 40 A2			lda SRC+2
  3472 3B85 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3473
  3474 				; optimize OK (service.pas), line = 324
  3475
  3476 3B88 AD 3F A2			lda SRC+1
  3477 3B8B 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3478
  3479 				; optimize OK (service.pas), line = 325
  3480
  3481 3B8E AD 3E A2			lda SRC
  3482 3B91 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3483
  3484 				; optimize OK (service.pas), line = 327
  3485
  3486 3B94 AD 44 A2			lda DST+2
  3487 3B97 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3488
  3489 				; optimize OK (service.pas), line = 328
  3490
  3491 3B9A AD 43 A2			lda DST+1
  3492 3B9D 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3493
  3494 				; optimize OK (service.pas), line = 329
  3495
  3496 3BA0 AD 42 A2			lda DST
  3497 3BA3 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3498
  3499 				; optimize OK (service.pas), line = 331
  3500
  3501 3BA6 A9 01			lda #$01
  3502 3BA8 8D 05 B1			sta BLT.SRC_STEP_X
  3503
  3504 				; optimize OK (service.pas), line = 332
  3505
  3506 3BAB 8D 0B B1			sta BLT.DST_STEP_X
  3507
  3508 				; optimize OK (service.pas), line = 334
  3509
  3510 3BAE A9 40			lda #$40
  3511 3BB0 8D 09 B1			sta BLT.DST_STEP_Y
  3512 3BB3 A9 01			lda #$01
  3513 3BB5 8D 0A B1			sta BLT.DST_STEP_Y+1
  3514
  3515 				; optimize OK (service.pas), line = 335
  3516
  3517 3BB8 A9 40			lda #$40
  3518 3BBA 8D 03 B1			sta BLT.SRC_STEP_Y
  3519 3BBD A9 01			lda #$01
  3520 3BBF 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3521
  3522 				; optimize OK (service.pas), line = 337
  3523
  3524 3BC2 AD 46 A2			lda W
  3525 3BC5 38 E9 01			sub #$01
  3526 3BC8 8D 0C B1			sta BLT.BLT_WIDTH
  3527 3BCB AD 47 A2			lda W+1
  3528 3BCE E9 00			sbc #$00
  3529 3BD0 8D 0D B1			sta BLT.BLT_WIDTH+1
  3530
  3531 				; optimize OK (service.pas), line = 338
  3532
  3533 3BD3 AC 48 A2			ldy H
  3534 3BD6 88				dey
  3535 3BD7 8C 0E B1			sty BLT.BLT_HEIGHT
  3536
  3537 				; optimize OK (service.pas), line = 340
  3538
  3539 3BDA A9 FF			lda #$FF
  3540 3BDC 8D 0F B1			sta BLT.BLT_AND_MASK
  3541
  3542 				; optimize OK (service.pas), line = 342
  3543
  3544 3BDF A9 00			lda #$00
  3545 3BE1 8D 12 B1			sta BLT.BLT_ZOOM
  3546
  3547 				; optimize OK (service.pas), line = 344
  3548
  3549 3BE4 8D 14 B1			sta BLT.BLT_CONTROL
  3550
  3551 				; -------------------  ASM Block 00000142  -------------------
  3552
  3553 3BE7				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3BE7 A9 00		        lda     #$00
     3 3BE9 A0 5F		        ldy     #FX_MEMS
     4 3BEB 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3554 					
  3555 				; optimize OK (service.pas), line = 350
  3556
  3557 3BED AD D5 9F			lda BLT
  3558 3BF0 8D 21 A1			sta VBXE.RUNBCB.A
  3559 3BF3 AD D6 9F			lda BLT+1
  3560 3BF6 8D 22 A1			sta VBXE.RUNBCB.A+1
  3561 3BF9 20 A5 3A			jsr VBXE.RUNBCB
  3562
  3563 				; ------------------------------------------------------------
  3564
  3565 = A23E			SRC	= DATAORIGIN+$01F6
  3566 = A242			DST	= DATAORIGIN+$01FA
  3567 = A246			W	= DATAORIGIN+$01FE
  3568 = A248			H	= DATAORIGIN+$0200
  3569
  3570 = A23E			@VarData	= SRC
  3571 = 000B			@VarDataSize	= 11
  3572
  3573 3BFC			@exit
  3574 					.ifdef @new
  3575 					lda <@VarData
  3576 					sta :ztmp
  3577 					lda >@VarData
  3578 					ldy #@VarDataSize-1
  3579 					jmp @FreeMem
  3580 					els
  3581 3BFC 60				rts						; ret
  3582 					eif
  3583 				.endl
  3584
  3585 3BFD			.local	BLITZERO					; PROCEDURE
  3586
  3587 				; -------------------  ASM Block 00000143  -------------------
  3588
  3589 3BFD				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3BFD A9 80		        lda     #$80
     3 3BFF A0 5F		        ldy     #FX_MEMS
     4 3C01 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3590 					
  3591 				; optimize OK (service.pas), line = 366
  3592
  3593 3C03 AD 4B A2			lda SRC+2
  3594 3C06 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3595
  3596 				; optimize OK (service.pas), line = 367
  3597
  3598 3C09 AD 4A A2			lda SRC+1
  3599 3C0C 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3600
  3601 				; optimize OK (service.pas), line = 368
  3602
  3603 3C0F AD 49 A2			lda SRC
  3604 3C12 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3605
  3606 				; optimize OK (service.pas), line = 370
  3607
  3608 3C15 AD 4F A2			lda DST+2
  3609 3C18 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3610
  3611 				; optimize OK (service.pas), line = 371
  3612
  3613 3C1B AD 4E A2			lda DST+1
  3614 3C1E 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3615
  3616 				; optimize OK (service.pas), line = 372
  3617
  3618 3C21 AD 4D A2			lda DST
  3619 3C24 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3620
  3621 				; optimize OK (service.pas), line = 374
  3622
  3623 3C27 A9 01			lda #$01
  3624 3C29 8D 05 B1			sta BLT.SRC_STEP_X
  3625
  3626 				; optimize OK (service.pas), line = 375
  3627
  3628 3C2C 8D 0B B1			sta BLT.DST_STEP_X
  3629
  3630 				; optimize OK (service.pas), line = 377
  3631
  3632 3C2F 8D 14 B1			sta BLT.BLT_CONTROL
  3633
  3634 				; optimize OK (service.pas), line = 379
  3635
  3636 3C32 A9 40			lda #$40
  3637 3C34 8D 09 B1			sta BLT.DST_STEP_Y
  3638 3C37 A9 01			lda #$01
  3639 3C39 8D 0A B1			sta BLT.DST_STEP_Y+1
  3640
  3641 				; optimize OK (service.pas), line = 380
  3642
  3643 3C3C AD 51 A2			lda W
  3644 3C3F 8D 03 B1			sta BLT.SRC_STEP_Y
  3645 3C42 AD 52 A2			lda W+1
  3646 3C45 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3647
  3648 				; optimize OK (service.pas), line = 382
  3649
  3650 3C48 AC 53 A2			ldy H
  3651 3C4B 88				dey
  3652 3C4C 8C 0E B1			sty BLT.BLT_HEIGHT
  3653
  3654 				; optimize OK (service.pas), line = 384
  3655
  3656 3C4F AD 51 A2			lda W
  3657 3C52 38 E9 01			sub #$01
  3658 3C55 8D 0C B1			sta BLT.BLT_WIDTH
  3659 3C58 AD 52 A2			lda W+1
  3660 3C5B E9 00			sbc #$00
  3661 3C5D 8D 0D B1			sta BLT.BLT_WIDTH+1
  3662
  3663 				; optimize OK (service.pas), line = 386
  3664
  3665 3C60 A9 FF			lda #$FF
  3666 3C62 8D 0F B1			sta BLT.BLT_AND_MASK
  3667
  3668 				; -------------------  ASM Block 00000144  -------------------
  3669
  3670 3C65				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3C65 A9 00		        lda     #$00
     3 3C67 A0 5F		        ldy     #FX_MEMS
     4 3C69 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3671 					
  3672 				; optimize OK (service.pas), line = 393
  3673
  3674 3C6B AD D5 9F			lda BLT
  3675 3C6E 8D 21 A1			sta VBXE.RUNBCB.A
  3676 3C71 AD D6 9F			lda BLT+1
  3677 3C74 8D 22 A1			sta VBXE.RUNBCB.A+1
  3678 3C77 20 A5 3A			jsr VBXE.RUNBCB
  3679
  3680 				; ------------------------------------------------------------
  3681
  3682 = A249			SRC	= DATAORIGIN+$0201
  3683 = A24D			DST	= DATAORIGIN+$0205
  3684 = A251			W	= DATAORIGIN+$0209
  3685 = A253			H	= DATAORIGIN+$020B
  3686
  3687 = A249			@VarData	= SRC
  3688 = 000B			@VarDataSize	= 11
  3689
  3690 3C7A			@exit
  3691 					.ifdef @new
  3692 					lda <@VarData
  3693 					sta :ztmp
  3694 					lda >@VarData
  3695 					ldy #@VarDataSize-1
  3696 					jmp @FreeMem
  3697 					els
  3698 3C7A 60				rts						; ret
  3699 					eif
  3700 				.endl
  3701
  3702 3C7B			.local	BLITTMP						; PROCEDURE
  3703
  3704 				; optimize OK (service.pas), line = 405
  3705
  3706 3C7B AD 54 A2			lda DST
  3707 3C7E 8D 26 A1			sta VBXE_RAM.POSITION
  3708 3C81 AD 55 A2			lda DST+1
  3709 3C84 8D 27 A1			sta VBXE_RAM.POSITION+1
  3710 3C87 AD 56 A2			lda DST+2
  3711 3C8A 8D 28 A1			sta VBXE_RAM.POSITION+2
  3712 3C8D AD 57 A2			lda DST+3
  3713 3C90 8D 29 A1			sta VBXE_RAM.POSITION+3
  3714
  3715 				; optimize OK (service.pas), line = 407
  3716
  3717 3C93 AD 2D A0			lda TMP
  3718 3C96 8D DF A0			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3719 3C99 AD 2E A0			lda TMP+1
  3720 3C9C 8D E0 A0			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3721 3C9F AD 58 A2			lda SIZE
  3722 3CA2 8D E1 A0			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3723 3CA5 A9 00			lda #$00
  3724 3CA7 8D E2 A0			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3725 3CAA AD DB 9F			lda VBXE_RAM
  3726 3CAD AC DC 9F			ldy VBXE_RAM+1
  3727 3CB0 20 68 37			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3728
  3729 				; ------------------------------------------------------------
  3730
  3731 = A254			DST	= DATAORIGIN+$020C
  3732 = A258			SIZE	= DATAORIGIN+$0210
  3733
  3734 = A254			@VarData	= DST
  3735 = 0005			@VarDataSize	= 5
  3736
  3737 3CB3			@exit
  3738 					.ifdef @new
  3739 					lda <@VarData
  3740 					sta :ztmp
  3741 					lda >@VarData
  3742 					ldy #@VarDataSize-1
  3743 					jmp @FreeMem
  3744 					els
  3745 3CB3 60				rts						; ret
  3746 					eif
  3747 				.endl
  3748
  3749 3CB4			.local	BLITROW						; PROCEDURE
  3750
  3751 				; -------------------  ASM Block 00000145  -------------------
  3752
  3753 3CB4				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3CB4 A9 80		        lda     #$80
     3 3CB6 A0 5F		        ldy     #FX_MEMS
     4 3CB8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3754 					
  3755 				; optimize OK (service.pas), line = 423
  3756
  3757 3CBA AD 5B A2			lda SRC+2
  3758 3CBD 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3759
  3760 				; optimize OK (service.pas), line = 424
  3761
  3762 3CC0 AD 5A A2			lda SRC+1
  3763 3CC3 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3764
  3765 				; optimize OK (service.pas), line = 425
  3766
  3767 3CC6 AD 59 A2			lda SRC
  3768 3CC9 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3769
  3770 				; optimize OK (service.pas), line = 427
  3771
  3772 3CCC AD 5F A2			lda DST+2
  3773 3CCF 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3774
  3775 				; optimize OK (service.pas), line = 428
  3776
  3777 3CD2 AD 5E A2			lda DST+1
  3778 3CD5 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3779
  3780 				; optimize OK (service.pas), line = 429
  3781
  3782 3CD8 AD 5D A2			lda DST
  3783 3CDB 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3784
  3785 				; optimize OK (service.pas), line = 431
  3786
  3787 3CDE A9 01			lda #$01
  3788 3CE0 8D 05 B1			sta BLT.SRC_STEP_X
  3789
  3790 				; optimize OK (service.pas), line = 432
  3791
  3792 3CE3 8D 0B B1			sta BLT.DST_STEP_X
  3793
  3794 				; optimize OK (service.pas), line = 434
  3795
  3796 3CE6 A9 00			lda #$00
  3797 3CE8 8D 03 B1			sta BLT.SRC_STEP_Y
  3798 3CEB 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3799
  3800 				; optimize OK (service.pas), line = 435
  3801
  3802 3CEE 8D 09 B1			sta BLT.DST_STEP_Y
  3803 3CF1 8D 0A B1			sta BLT.DST_STEP_Y+1
  3804
  3805 				; optimize OK (service.pas), line = 437
  3806
  3807 3CF4 8D 0E B1			sta BLT.BLT_HEIGHT
  3808
  3809 				; optimize OK (service.pas), line = 438
  3810
  3811 3CF7 8D 14 B1			sta BLT.BLT_CONTROL
  3812
  3813 				; optimize OK (service.pas), line = 440
  3814
  3815 3CFA AD 61 A2			lda SIZE
  3816 3CFD 38 E9 01			sub #$01
  3817 3D00 8D 0C B1			sta BLT.BLT_WIDTH
  3818 3D03 AD 62 A2			lda SIZE+1
  3819 3D06 E9 00			sbc #$00
  3820 3D08 8D 0D B1			sta BLT.BLT_WIDTH+1
  3821
  3822 				; optimize OK (service.pas), line = 442
  3823
  3824 3D0B A9 FF			lda #$FF
  3825 3D0D 8D 0F B1			sta BLT.BLT_AND_MASK
  3826
  3827 				; -------------------  ASM Block 00000146  -------------------
  3828
  3829 3D10				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3D10 A9 00		        lda     #$00
     3 3D12 A0 5F		        ldy     #FX_MEMS
     4 3D14 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3830 					
  3831 				; optimize OK (service.pas), line = 448
  3832
  3833 3D16 AD D5 9F			lda BLT
  3834 3D19 8D 21 A1			sta VBXE.RUNBCB.A
  3835 3D1C AD D6 9F			lda BLT+1
  3836 3D1F 8D 22 A1			sta VBXE.RUNBCB.A+1
  3837 3D22 20 A5 3A			jsr VBXE.RUNBCB
  3838
  3839 				; ------------------------------------------------------------
  3840
  3841 = A259			SRC	= DATAORIGIN+$0211
  3842 = A25D			DST	= DATAORIGIN+$0215
  3843 = A261			SIZE	= DATAORIGIN+$0219
  3844
  3845 = A259			@VarData	= SRC
  3846 = 000A			@VarDataSize	= 10
  3847
  3848 3D25			@exit
  3849 					.ifdef @new
  3850 					lda <@VarData
  3851 					sta :ztmp
  3852 					lda >@VarData
  3853 					ldy #@VarDataSize-1
  3854 					jmp @FreeMem
  3855 					els
  3856 3D25 60				rts						; ret
  3857 					eif
  3858 				.endl
  3859
  3860 3D26			.local	PUTBYTE						; PROCEDURE
  3861
  3862 				; optimize OK (service.pas), line = 475
  3863
  3864 3D26 AD 63 A2			lda DST
  3865 3D29 8D 26 A1			sta VBXE_RAM.POSITION
  3866 3D2C AD 64 A2			lda DST+1
  3867 3D2F 8D 27 A1			sta VBXE_RAM.POSITION+1
  3868 3D32 AD 65 A2			lda DST+2
  3869 3D35 8D 28 A1			sta VBXE_RAM.POSITION+2
  3870 3D38 AD 66 A2			lda DST+3
  3871 3D3B 8D 29 A1			sta VBXE_RAM.POSITION+3
  3872
  3873 				; optimize OK (service.pas), line = 476
  3874
  3875 3D3E AD 67 A2			lda V
  3876 3D41 8D 01 A1			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3877 3D44 AD DB 9F			lda VBXE_RAM
  3878 3D47 AC DC 9F			ldy VBXE_RAM+1
  3879 3D4A 20 A3 38			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3880
  3881 				; ------------------------------------------------------------
  3882
  3883 = A263			DST	= DATAORIGIN+$021B
  3884 = A267			V	= DATAORIGIN+$021F
  3885
  3886 = A263			@VarData	= DST
  3887 = 0005			@VarDataSize	= 5
  3888
  3889 3D4D			@exit
  3890 					.ifdef @new
  3891 					lda <@VarData
  3892 					sta :ztmp
  3893 					lda >@VarData
  3894 					ldy #@VarDataSize-1
  3895 					jmp @FreeMem
  3896 					els
  3897 3D4D 60				rts						; ret
  3898 					eif
  3899 				.endl
  3900
  3901 3D4E			.local	GETBYTE						; FUNCTION
  3902
  3903 				; optimize OK (service.pas), line = 486
  3904
  3905 3D4E AD 68 A2			lda SRC
  3906 3D51 8D 26 A1			sta VBXE_RAM.POSITION
  3907 3D54 AD 69 A2			lda SRC+1
  3908 3D57 8D 27 A1			sta VBXE_RAM.POSITION+1
  3909 3D5A AD 6A A2			lda SRC+2
  3910 3D5D 8D 28 A1			sta VBXE_RAM.POSITION+2
  3911 3D60 AD 6B A2			lda SRC+3
  3912 3D63 8D 29 A1			sta VBXE_RAM.POSITION+3
  3913
  3914 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 487
  3915
  3916 3D66 AD DB 9F			lda VBXE_RAM
  3917 3D69 AC DC 9F			ldy VBXE_RAM+1
  3918 3D6C 20 70 38			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3919 3D6F AD F2 A0			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3920 3D72 8D 6C A2			sta RESULT
  3921 3D75			@exit
  3922
  3923 				; ------------------------------------------------------------
  3924
  3925 = A268			SRC	= DATAORIGIN+$0220
  3926 = A26C			RESULT	= DATAORIGIN+$0224
  3927
  3928 = A268			@VarData	= SRC
  3929 = 0004			@VarDataSize	= 4
  3930
  3931 3D75 60				rts						; ret
  3932 				.endl
  3933
  3934 3D76			.local	NOSOUND						; PROCEDURE
  3935
  3936 3D76			@exit
  3937 					.ifdef @new
  3938 					lda <@VarData
  3939 					sta :ztmp
  3940 					lda >@VarData
  3941 					ldy #@VarDataSize-1
  3942 					jmp @FreeMem
  3943 					els
  3944 3D76 60				rts						; ret
  3945 					eif
  3946 				.endl
  3947
  3948 3D77			.local	MYDELAY						; PROCEDURE
  3949
  3950 				; ------------------------------------------------------------
  3951
  3952 = A26D			A	= DATAORIGIN+$0225
  3953
  3954 = A26D			@VarData	= A
  3955 = 0002			@VarDataSize	= 2
  3956
  3957 3D77			@exit
  3958 					.ifdef @new
  3959 					lda <@VarData
  3960 					sta :ztmp
  3961 					lda >@VarData
  3962 					ldy #@VarDataSize-1
  3963 					jmp @FreeMem
  3964 					els
  3965 3D77 60				rts						; ret
  3966 					eif
  3967 				.endl
  3968
  3969 3D78			.local	MAX						; FUNCTION
  3970
  3971 				; optimize OK (service.pas), line = 613
  3972
  3973 3D78 AD 71 A2			lda B
  3974 3D7B CD 6F A2			cmp A
  3975 3D7E AD 72 A2			lda B+1
  3976 3D81 ED 70 A2			sbc A+1
  3977 3D84 50 02			svc
  3978 3D86 49 80			eor #$80
  3979 3D88 10 0C			jpl l_06B1
  3980 3D8A AD 6F A2			lda A
  3981 3D8D 8D 73 A2			sta RESULT
  3982 3D90 AD 70 A2			lda A+1
  3983 3D93 4C 9F 3D			jmp l_06C0
  3984 3D96			l_06B1
  3985
  3986 				; optimize OK (service.pas), line = 614
  3987
  3988 3D96 AD 71 A2			lda B
  3989 3D99 8D 73 A2			sta RESULT
  3990 3D9C AD 72 A2			lda B+1
  3991 3D9F			l_06C0
  3992 3D9F 8D 74 A2			sta RESULT+1
  3993 3DA2			@exit
  3994
  3995 				; ------------------------------------------------------------
  3996
  3997 = A26F			A	= DATAORIGIN+$0227
  3998 = A271			B	= DATAORIGIN+$0229
  3999 = A273			RESULT	= DATAORIGIN+$022B
  4000
  4001 = A26F			@VarData	= A
  4002 = 0004			@VarDataSize	= 4
  4003
  4004 3DA2 60				rts						; ret
  4005 				.endl
  4006
  4007 3DA3			.local	MIN						; FUNCTION
  4008
  4009 				; optimize OK (service.pas), line = 620
  4010
  4011 3DA3 AD 75 A2			lda A
  4012 3DA6 CD 77 A2			cmp B
  4013 3DA9 AD 76 A2			lda A+1
  4014 3DAC ED 78 A2			sbc B+1
  4015 3DAF 50 02			svc
  4016 3DB1 49 80			eor #$80
  4017 3DB3 10 0C			jpl l_06DB
  4018 3DB5 AD 75 A2			lda A
  4019 3DB8 8D 79 A2			sta RESULT
  4020 3DBB AD 76 A2			lda A+1
  4021 3DBE 4C CA 3D			jmp l_06EA
  4022 3DC1			l_06DB
  4023
  4024 				; optimize OK (service.pas), line = 621
  4025
  4026 3DC1 AD 77 A2			lda B
  4027 3DC4 8D 79 A2			sta RESULT
  4028 3DC7 AD 78 A2			lda B+1
  4029 3DCA			l_06EA
  4030 3DCA 8D 7A A2			sta RESULT+1
  4031 3DCD			@exit
  4032
  4033 				; ------------------------------------------------------------
  4034
  4035 = A275			A	= DATAORIGIN+$022D
  4036 = A277			B	= DATAORIGIN+$022F
  4037 = A279			RESULT	= DATAORIGIN+$0231
  4038
  4039 = A275			@VarData	= A
  4040 = 0004			@VarDataSize	= 4
  4041
  4042 3DCD 60				rts						; ret
  4043 				.endl
  4044
  4045 3DCE			.local	FATAL_ERROR					; PROCEDURE
  4046 3DCE 8D 7B A2			sta ERR_TYPE
  4047
  4048 				; optimize OK (service.pas), line = 630
  4049
  4050 3DD1 8D F1 A1			sta STATUS
  4051
  4052 				; -------------------  ASM Block 00000147  -------------------
  4053
  4054 3DD4 8D 00 01		      sta $100
  4055 				      
  4056 3DD7 AD 0A D2		      kk: lda $d20a
  4057 3DDA 8D 1A D0		      sta $d01a
  4058 3DDD 4C D7 3D		      jmp kk
  4059 				    
  4060 				    
  4061 				; ------------------------------------------------------------
  4062
  4063 = A27B			ERR_TYPE	= DATAORIGIN+$0233
  4064
  4065 = A27B			@VarData	= ERR_TYPE
  4066 = 0001			@VarDataSize	= 1
  4067
  4068 3DE0			@exit
  4069 					.ifdef @new
  4070 					lda <@VarData
  4071 					sta :ztmp
  4072 					lda >@VarData
  4073 					ldy #@VarDataSize-1
  4074 					jmp @FreeMem
  4075 					els
  4076 3DE0 60				rts						; ret
  4077 					eif
  4078 				.endl
  4079
  4080 3DE1			.local	INITROWARRAY					; PROCEDURE
  4081
  4082 				; optimize OK (service.pas), line = 678
  4083
  4084 3DE1 A9 00			lda #$00
  4085 3DE3 8D 33 A2			sta HLP
  4086 3DE6 8D 34 A2			sta HLP+1
  4087
  4088 				; optimize OK (service.pas), line = 680
  4089
  4090 3DE9 8D 7C A2			sta Y
  4091
  4092 3DEC			l_070A
  4093 				; --- ForToDoCondition
  4094 3DEC AC 7C A2			ldy Y
  4095 3DEF C0 C8			cpy #$C8
  4096 3DF1 90 0A			jcc l_072A
  4097
  4098 				; optimize OK (service.pas), line = 683
  4099
  4100 3DF3 A9 00			lda #$00
  4101 3DF5 99 00 C0			sta adr.ROW,y
  4102 3DF8 A9 FA			lda #$FA
  4103 3DFA 4C 09 3E			jmp l_073B
  4104 3DFD			l_072A
  4105
  4106 				; optimize OK (service.pas), line = 685
  4107
  4108 3DFD AC 7C A2			ldy Y
  4109 3E00 AD 33 A2			lda HLP
  4110 3E03 99 00 C0			sta adr.ROW,y
  4111 3E06 AD 34 A2			lda HLP+1
  4112 3E09			l_073B
  4113 3E09 99 00 C1			sta adr.ROW+256,y
  4114
  4115 				; optimize OK (service.pas), line = 687
  4116
  4117 3E0C AD 33 A2			lda HLP
  4118 3E0F 18 69 40			add #$40
  4119 3E12 8D 33 A2			sta HLP
  4120 3E15 AD 34 A2			lda HLP+1
  4121 3E18 69 01			adc #$01
  4122 3E1A 8D 34 A2			sta HLP+1
  4123
  4124 				; --- ForToDoEpilog
  4125 3E1D EE 7C A2			inc Y
  4126 3E20 D0 CA			jne l_070A
  4127 3E22			l_0718
  4128
  4129 				; ------------------------------------------------------------
  4130
  4131 = A27C			Y	= DATAORIGIN+$0234
  4132
  4133 = A27C			@VarData	= Y
  4134 = 0001			@VarDataSize	= 1
  4135
  4136 3E22			@exit
  4137 					.ifdef @new
  4138 					lda <@VarData
  4139 					sta :ztmp
  4140 					lda >@VarData
  4141 					ldy #@VarDataSize-1
  4142 					jmp @FreeMem
  4143 					els
  4144 3E22 60				rts						; ret
  4145 					eif
  4146 				.endl
  4147
  4148 3E23			.local	INITSVGA					; PROCEDURE
  4149
  4150 				; optimize OK (service.pas), line = 703
  4151
  4152 3E23 AD 93 A0			lda GRAPH.GRAPHRESULT
  4153 3E26 C9 01			cmp #$01
  4154 3E28 F0 0F			jeq l_075F
  4155
  4156 				; optimize FAIL ('@print', service.pas), line = 704
  4157
  4158 					@printSTRING #CODEORIGIN+$0000
  4158 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4158 3E2A A0 20		 LDY> CODEORIGIN+$0000
  4158 3E2C A9 00		 LDA< CODEORIGIN+$0000
  4158 3E2E 20 ED 27		 JSR @PRINTSTRING
  4159 3E31 20 D7 27			@printEOL
  4160 3E34 A9 00			lda #$00
  4161 3E36 4C CC 9F			jmp @halt
  4162 3E39			l_075F
  4163
  4164 				; optimize OK (service.pas), line = 708
  4165
  4166 3E39 A9 1F			lda #$1F
  4167 3E3B 20 91 3A			jsr VBXE.SETHORIZONTALRES.@010180000
  4168
  4169 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 709
  4170
  4171 3E3E 20 E9 39			jsr VBXE.COLORMAPOFF
  4172
  4173 				; optimize OK (service.pas), line = 711
  4174
  4175 3E41 A9 07			lda #$07
  4176 3E43 20 C2 3A			jsr VBXE.VBXECONTROL
  4177
  4178 				; optimize OK (service.pas), line = 713
  4179
  4180 3E46 A9 14			lda #$14
  4181 3E48 20 4B 36			jsr VBXE.SETTOPBORDER
  4182
  4183 				; optimize OK (service.pas), line = 714
  4184
  4185 3E4B A9 C8			lda #$C8
  4186 3E4D 20 64 36			jsr VBXE.SETXDLHEIGHT
  4187
  4188 				; optimize OK (service.pas), line = 716
  4189
  4190 3E50 A9 00			lda #$00
  4191 3E52 8D 26 A1			sta VBXE_RAM.POSITION
  4192 3E55 A9 50			lda #$50
  4193 3E57 8D 27 A1			sta VBXE_RAM.POSITION+1
  4194 3E5A A9 00			lda #$00
  4195 3E5C 8D 28 A1			sta VBXE_RAM.POSITION+2
  4196 3E5F 8D 29 A1			sta VBXE_RAM.POSITION+3
  4197
  4198 				; optimize OK (service.pas), line = 717
  4199
  4200 3E62 8D 2A A1			sta VBXE_RAM.SIZE
  4201 3E65 A9 FA			lda #$FA
  4202 3E67 8D 2B A1			sta VBXE_RAM.SIZE+1
  4203 3E6A A9 00			lda #$00
  4204 3E6C 8D 2C A1			sta VBXE_RAM.SIZE+2
  4205 3E6F 8D 2D A1			sta VBXE_RAM.SIZE+3
  4206
  4207 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 718
  4208
  4209 3E72 AD DB 9F			lda VBXE_RAM
  4210 3E75 AC DC 9F			ldy VBXE_RAM+1
  4211 3E78 20 D6 38			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4212
  4213 				; optimize OK (service.pas), line = 720
  4214
  4215 3E7B A9 00			lda #$00
  4216 3E7D 8D 00 D4			sta ATARI.DMACTL
  4217
  4218 				; -------------------  ASM Block 00000148  -------------------
  4219
  4220 3E80				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3E80 A9 80		        lda     #$80
     3 3E82 A0 5F		        ldy     #FX_MEMS
     4 3E84 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4221 					
  4222 				; optimize OK (service.pas), line = 726
  4223
  4224 3E86 AD D5 9F			lda BLT
  4225 3E89 85 84			sta :bp2
  4226 3E8B AD D6 9F			lda BLT+1
  4227 3E8E 85 85			sta :bp2+1
  4228 3E90 A9 00			lda #$00
  4229 3E92 A0 14			ldy #$14
  4230 3E94 91 84 88 10 FB		sta:rpl (:bp2),y-
  4231
  4232 				; -------------------  ASM Block 00000149  -------------------
  4233
  4234 3E99				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3E99 A9 00		        lda     #$00
     3 3E9B A0 5F		        ldy     #FX_MEMS
     4 3E9D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4235 					
  4236 3E9F			@exit
  4237 					.ifdef @new
  4238 					lda <@VarData
  4239 					sta :ztmp
  4240 					lda >@VarData
  4241 					ldy #@VarDataSize-1
  4242 					jmp @FreeMem
  4243 					els
  4244 3E9F 60				rts						; ret
  4245 					eif
  4246 				.endl
  4247
  4248 3EA0			.local	SHINE_BLOCK					; PROCEDURE
  4249
  4250 				; optimize OK (service.pas), line = 770
  4251
  4252 3EA0 AD 11 A2			lda SHINEREC.XB
  4253 3EA3 8D 7D A2			sta XB
  4254 3EA6 A9 00			lda #$00
  4255 3EA8 8D 7E A2			sta XB+1
  4256
  4257 				; optimize OK (service.pas), line = 771
  4258
  4259 3EAB AD 12 A2			lda SHINEREC.YB
  4260 3EAE 8D 7F A2			sta YB
  4261 3EB1 A9 00			lda #$00
  4262 3EB3 8D 80 A2			sta YB+1
  4263
  4264 				; optimize OK (service.pas), line = 773
  4265
  4266 3EB6 AD 7F A2			lda YB
  4267 3EB9 0A				asl @
  4268 3EBA 0A				asl @
  4269 3EBB 0A				asl @
  4270 3EBC 0A				asl @
  4271 3EBD 18 6D 7D A2			add XB
  4272 3EC1 8D 8C A2			sta I
  4273
  4274 				; optimize OK (service.pas), line = 775
  4275
  4276 3EC4 A8				tay
  4277 3EC5 B9 00 DB			lda adr.WALL,y
  4278 3EC8 C9 09			cmp #$09
  4279 3ECA B0 03 4C 1D 40		jcc l_07B2
  4280
  4281 				; optimize OK (service.pas), line = 777
  4282
  4283 3ECF AD 13 A2			lda SHINEREC.FRAME
  4284 3ED2 4A				lsr @
  4285 3ED3 8D 81 A2			sta FRAME
  4286 3ED6 A9 00			lda #$00
  4287 3ED8 8D 82 A2			sta FRAME+1
  4288
  4289 				; optimize OK (service.pas), line = 778
  4290
  4291 3EDB B9 00 DB			lda adr.WALL,y
  4292 3EDE C9 0A			cmp #$0A
  4293 3EE0 F0 0E			jeq l_07D2
  4294 3EE2 AD 81 A2			lda FRAME
  4295 3EE5 18 69 05			add #$05
  4296 3EE8 8D 81 A2			sta FRAME
  4297 3EEB 90 03			scc
  4298 3EED EE 82 A2			inc FRAME+1
  4299 3EF0			l_07D2
  4300
  4301 				; optimize OK (service.pas), line = 780
  4302
  4303 3EF0 AD 7D A2			lda XB
  4304 3EF3 85 A0			sta :STACKORIGIN+10
  4305 3EF5 AD 7E A2			lda XB+1
  4306 3EF8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4307 3EFA 06 A0			asl :STACKORIGIN+10
  4308 3EFC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4309 3EFE 06 A0			asl :STACKORIGIN+10
  4310 3F00 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4311 3F02 06 A0			asl :STACKORIGIN+10
  4312 3F04 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4313 3F06 06 A0			asl :STACKORIGIN+10
  4314 3F08 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4315 3F0A A9 09			lda #$09
  4316 3F0C 18 65 A0			add :STACKORIGIN+10
  4317 3F0F 8D 83 A2			sta XF
  4318 3F12 A9 00			lda #$00
  4319 3F14 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4320 3F16 8D 84 A2			sta XF+1
  4321
  4322 				; optimize OK (service.pas), line = 781
  4323
  4324 3F19 AD 7F A2			lda YB
  4325 3F1C 85 A0			sta :STACKORIGIN+10
  4326 3F1E AD 80 A2			lda YB+1
  4327 3F21 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4328 3F23 06 A0			asl :STACKORIGIN+10
  4329 3F25 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4330 3F27 06 A0			asl :STACKORIGIN+10
  4331 3F29 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4332 3F2B 06 A0			asl :STACKORIGIN+10
  4333 3F2D 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4334 3F2F A9 16			lda #$16
  4335 3F31 18 65 A0			add :STACKORIGIN+10
  4336 3F34 8D 85 A2			sta YF
  4337 3F37 A9 00			lda #$00
  4338 3F39 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4339 3F3B 8D 86 A2			sta YF+1
  4340
  4341 				; optimize OK (service.pas), line = 782
  4342
  4343 3F3E AD 81 A2			lda FRAME
  4344 3F41 85 9F			sta :STACKORIGIN+9
  4345 3F43 AD 82 A2			lda FRAME+1
  4346 3F46 06 9F			asl :STACKORIGIN+9
  4347 3F48 2A				rol @
  4348 3F49 06 9F			asl :STACKORIGIN+9
  4349 3F4B 2A				rol @
  4350 3F4C 06 9F			asl :STACKORIGIN+9
  4351 3F4E 2A				rol @
  4352 3F4F 06 9F			asl :STACKORIGIN+9
  4353 3F51 2A				rol @
  4354 3F52 06 9F			asl :STACKORIGIN+9
  4355 3F54 2A				rol @
  4356 3F55 06 9F			asl :STACKORIGIN+9
  4357 3F57 2A				rol @
  4358 3F58 06 9F			asl :STACKORIGIN+9
  4359 3F5A 2A				rol @
  4360 3F5B 8D 88 A2			sta FR+1
  4361 3F5E A5 9F			lda :STACKORIGIN+9
  4362 3F60 8D 87 A2			sta FR
  4363
  4364 				; optimize OK (service.pas), line = 784
  4365
  4366 3F63 A9 00			lda #$00
  4367 3F65 8D 8B A2			sta Y
  4368
  4369 3F68			l_0802
  4370 				; --- ForToDoCondition
  4371 3F68 AD 8B A2			lda Y
  4372 3F6B C9 08			cmp #$08
  4373 3F6D 90 03 4C 1D 40		jcs l_0810
  4374
  4375 				; optimize OK (service.pas), line = 786
  4376
  4377 3F72 85 9F			sta :STACKORIGIN+9
  4378 3F74 A9 00			lda #$00
  4379 3F76 06 9F			asl :STACKORIGIN+9
  4380 3F78 2A				rol @
  4381 3F79 06 9F			asl :STACKORIGIN+9
  4382 3F7B 2A				rol @
  4383 3F7C 06 9F			asl :STACKORIGIN+9
  4384 3F7E 2A				rol @
  4385 3F7F 06 9F			asl :STACKORIGIN+9
  4386 3F81 2A				rol @
  4387 3F82 8D 8A A2			sta OG+1
  4388 3F85 A5 9F			lda :STACKORIGIN+9
  4389 3F87 8D 89 A2			sta OG
  4390
  4391 				; optimize OK (service.pas), line = 789
  4392
  4393 3F8A AD 83 A2			lda XF
  4394 3F8D 85 A0			sta :STACKORIGIN+10
  4395 3F8F A9 50			lda #$50
  4396 3F91 18 6D 84 A2			add XF+1
  4397 3F95 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4398 3F97 A9 00			lda #$00
  4399 3F99 69 00			adc #$00
  4400 3F9B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4401 3F9D A9 00			lda #$00
  4402 3F9F 69 00			adc #$00
  4403 3FA1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4404 3FA3 AD 85 A2			lda YF
  4405 3FA6 18 6D 8B A2			add Y
  4406 3FAA A8				tay
  4407 3FAB A5 A0			lda :STACKORIGIN+10
  4408 3FAD 18 79 00 C0			add adr.ROW,y
  4409 3FB1 8D 5D A2			sta BLITROW.DST
  4410 3FB4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4411 3FB6 79 00 C1			adc adr.ROW+256,y
  4412 3FB9 8D 5E A2			sta BLITROW.DST+1
  4413 3FBC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4414 3FBE 69 00			adc #$00
  4415 3FC0 8D 5F A2			sta BLITROW.DST+2
  4416 3FC3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4417 3FC5 69 00			adc #$00
  4418 3FC7 8D 60 A2			sta BLITROW.DST+3
  4419 3FCA AD 88 A1			lda SHINEWALL.OFS
  4420 3FCD 18 6D 87 A2			add FR
  4421 3FD1 85 A1			sta :STACKORIGIN+11
  4422 3FD3 AD 89 A1			lda SHINEWALL.OFS+1
  4423 3FD6 6D 88 A2			adc FR+1
  4424 3FD9 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4425 3FDB AD 8A A1			lda SHINEWALL.OFS+2
  4426 3FDE 69 00			adc #$00
  4427 3FE0 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4428 3FE2 AD 8B A1			lda SHINEWALL.OFS+3
  4429 3FE5 69 00			adc #$00
  4430 3FE7 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4431 3FE9 A5 A1			lda :STACKORIGIN+11
  4432 3FEB 18 6D 89 A2			add OG
  4433 3FEF 8D 59 A2			sta BLITROW.SRC
  4434 3FF2 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4435 3FF4 6D 8A A2			adc OG+1
  4436 3FF7 8D 5A A2			sta BLITROW.SRC+1
  4437 3FFA A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4438 3FFC 69 00			adc #$00
  4439 3FFE 8D 5B A2			sta BLITROW.SRC+2
  4440 4001 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4441 4003 69 00			adc #$00
  4442 4005 8D 5C A2			sta BLITROW.SRC+3
  4443 4008 A9 10			lda #$10
  4444 400A 8D 61 A2			sta BLITROW.SIZE
  4445 400D A9 00			lda #$00
  4446 400F 8D 62 A2			sta BLITROW.SIZE+1
  4447 4012 20 B4 3C			jsr BLITROW
  4448
  4449 				; --- ForToDoEpilog
  4450 4015 EE 8B A2			inc Y
  4451 4018 F0 03 4C 68 3F		jne l_0802
  4452 401D			l_0810
  4453 401D			l_07B2
  4454
  4455 				; optimize FAIL (0, service.pas), line = 793
  4456
  4457 401D EE 13 A2			inc SHINEREC.FRAME
  4458
  4459 				; optimize OK (service.pas), line = 794
  4460
  4461 4020 AD 13 A2			lda SHINEREC.FRAME
  4462 4023 C9 0A			cmp #$0A
  4463 4025 D0 05			jne l_0857
  4464 4027 A9 00			lda #$00
  4465 4029 8D 15 A2			sta SHINEREC.ACTIVE
  4466 402C			l_0857
  4467
  4468 				; ------------------------------------------------------------
  4469
  4470 = A27D			XB	= DATAORIGIN+$0235
  4471 = A27F			YB	= DATAORIGIN+$0237
  4472 = A281			FRAME	= DATAORIGIN+$0239
  4473 = A283			XF	= DATAORIGIN+$023B
  4474 = A285			YF	= DATAORIGIN+$023D
  4475 = A287			FR	= DATAORIGIN+$023F
  4476 = A289			OG	= DATAORIGIN+$0241
  4477 = A28B			Y	= DATAORIGIN+$0243
  4478 = A28C			I	= DATAORIGIN+$0244
  4479
  4480 = A27D			@VarData	= XB
  4481 = 0010			@VarDataSize	= 16
  4482
  4483 402C			@exit
  4484 					.ifdef @new
  4485 					lda <@VarData
  4486 					sta :ztmp
  4487 					lda >@VarData
  4488 					ldy #@VarDataSize-1
  4489 					jmp @FreeMem
  4490 					els
  4491 402C 60				rts						; ret
  4492 					eif
  4493 				.endl
  4494
  4495 402D			.local	UNSHINE_BLOCK					; PROCEDURE
  4496
  4497 				; optimize OK (service.pas), line = 803
  4498
  4499 402D A9 09			lda #$09
  4500 402F 8D 13 A2			sta SHINEREC.FRAME
  4501
  4502 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 804
  4503
  4504 4032 20 A0 3E			jsr SHINE_BLOCK
  4505
  4506 4035			@exit
  4507 					.ifdef @new
  4508 					lda <@VarData
  4509 					sta :ztmp
  4510 					lda >@VarData
  4511 					ldy #@VarDataSize-1
  4512 					jmp @FreeMem
  4513 					els
  4514 4035 60				rts						; ret
  4515 					eif
  4516 				.endl
  4517
  4518 4036			.local	SHINE						; PROCEDURE
  4519
  4520 				; optimize OK (service.pas), line = 811
  4521
  4522 4036 AD 15 A2			lda SHINEREC.ACTIVE
  4523 4039 F0 03			jeq l_0877
  4524 403B 20 2D 40			jsr UNSHINE_BLOCK
  4525 403E			l_0877
  4526
  4527 				; optimize OK (service.pas), line = 813
  4528
  4529 403E AD 8D A2			lda XB
  4530 4041 8D 11 A2			sta SHINEREC.XB
  4531
  4532 				; optimize OK (service.pas), line = 814
  4533
  4534 4044 AD 8E A2			lda YB
  4535 4047 8D 12 A2			sta SHINEREC.YB
  4536
  4537 				; optimize OK (service.pas), line = 815
  4538
  4539 404A A9 00			lda #$00
  4540 404C 8D 13 A2			sta SHINEREC.FRAME
  4541
  4542 				; optimize OK (service.pas), line = 816
  4543
  4544 404F A9 01			lda #$01
  4545 4051 8D 15 A2			sta SHINEREC.ACTIVE
  4546
  4547 				; optimize OK (service.pas), line = 817
  4548
  4549 4054 AD 8E A2			lda YB
  4550 4057 0A				asl @
  4551 4058 0A				asl @
  4552 4059 0A				asl @
  4553 405A 0A				asl @
  4554 405B 18 6D 8D A2			add XB
  4555 405F A8				tay
  4556 4060 B9 00 DB			lda adr.WALL,y
  4557 4063 8D 14 A2			sta SHINEREC.BLOCK
  4558
  4559 				; ------------------------------------------------------------
  4560
  4561 = A28D			XB	= DATAORIGIN+$0245
  4562 = A28E			YB	= DATAORIGIN+$0246
  4563
  4564 = A28D			@VarData	= XB
  4565 = 0002			@VarDataSize	= 2
  4566
  4567 4066			@exit
  4568 					.ifdef @new
  4569 					lda <@VarData
  4570 					sta :ztmp
  4571 					lda >@VarData
  4572 					ldy #@VarDataSize-1
  4573 					jmp @FreeMem
  4574 					els
  4575 4066 60				rts						; ret
  4576 					eif
  4577 				.endl
  4578
  4579 4067			.local	CHECKSHINE					; PROCEDURE
  4580
  4581 				; optimize OK (service.pas), line = 823
  4582
  4583 4067 AD 15 A2			lda SHINEREC.ACTIVE
  4584 406A C9 01			cmp #$01
  4585 406C D0 03			jne l_08B8
  4586 406E 20 A0 3E			jsr SHINE_BLOCK
  4587 4071			l_08B8
  4588
  4589 4071			@exit
  4590 					.ifdef @new
  4591 					lda <@VarData
  4592 					sta :ztmp
  4593 					lda >@VarData
  4594 					ldy #@VarDataSize-1
  4595 					jmp @FreeMem
  4596 					els
  4597 4071 60				rts						; ret
  4598 					eif
  4599 				.endl
  4600
  4601 4072			.local	RANDOM_LETTER_DROP				; FUNCTION
  4602
  4603 				; --- RepeatUntilProlog
  4604 4072			l_08C1
  4605
  4606 				; optimize OK (service.pas), line = 831
  4607
  4608 4072 A9 64			lda #$64
  4609 4074 20 B5 35			jsr SYSTEM.RANDOM.@010180000
  4610 4077 AD 8D A0			lda SYSTEM.RANDOM.@010180000.RESULT
  4611 407A 8D 91 A2			sta RN
  4612 407D A9 00			lda #$00
  4613 407F 8D 92 A2			sta RN+1
  4614
  4615 				; optimize OK (service.pas), line = 832
  4616
  4617 4082 A9 00			lda #$00
  4618 4084 8D 93 A2			sta SUM
  4619 4087 8D 94 A2			sta SUM+1
  4620
  4621 				; optimize OK (service.pas), line = 833
  4622
  4623 408A 8D 95 A2			sta LETTER
  4624 408D 8D 96 A2			sta LETTER+1
  4625
  4626 				; --- RepeatUntilProlog
  4627 4090			l_08CF
  4628
  4629 				; optimize FAIL (0, service.pas), line = 838
  4630
  4631 4090 EE 95 A2			inc LETTER
  4632 4093 D0 03			sne
  4633 4095 EE 96 A2			inc LETTER+1
  4634
  4635 				; optimize OK (service.pas), line = 839
  4636
  4637 4098 AC 95 A2			ldy LETTER
  4638 409B B9 AD 20			lda adr.LETTER_DIS,y
  4639 409E 18 6D 93 A2			add SUM
  4640 40A2 8D 93 A2			sta SUM
  4641 40A5 AD 94 A2			lda SUM+1
  4642 40A8 69 00			adc #$00
  4643 40AA 8D 94 A2			sta SUM+1
  4644
  4645 				; optimize OK (service.pas), line = 842
  4646
  4647 40AD AD 92 A2			lda RN+1
  4648 40B0 CD 94 A2			cmp SUM+1
  4649 40B3 D0 06			bne @+
  4650 40B5 AD 91 A2			lda RN
  4651 40B8 CD 93 A2			cmp SUM
  4652 				@
  4653 40BB B0 D3			jcs l_08CF
  4654
  4655 				; optimize OK (service.pas), line = 846
  4656
  4657 40BD AD 95 A2			lda LETTER
  4658 40C0 38 E9 01			sub #$01
  4659 40C3 85 9F			sta :STACKORIGIN+9
  4660 40C5 AD 96 A2			lda LETTER+1
  4661 40C8 E9 00			sbc #$00
  4662 40CA CD 29 A2			cmp LETT.LAST+1
  4663 40CD D0 05			bne @+
  4664 40CF A5 9F			lda :STACKORIGIN+9
  4665 40D1 CD 28 A2			cmp LETT.LAST
  4666 				@
  4667 40D4 F0 9C			jeq l_08C1
  4668
  4669 				; optimize OK (service.pas), line = 848
  4670
  4671 40D6 AD 95 A2			lda LETTER
  4672 40D9 38 E9 01			sub #$01
  4673 40DC 8D 8F A2			sta RESULT
  4674 40DF AD 96 A2			lda LETTER+1
  4675 40E2 E9 00			sbc #$00
  4676 40E4 8D 90 A2			sta RESULT+1
  4677 40E7			@exit
  4678
  4679 				; ------------------------------------------------------------
  4680
  4681 = A28F			RESULT	= DATAORIGIN+$0247
  4682 = A291			RN	= DATAORIGIN+$0249
  4683 = A293			SUM	= DATAORIGIN+$024B
  4684 = A295			LETTER	= DATAORIGIN+$024D
  4685
  4686 = A291			@VarData	= RN
  4687 = 0006			@VarDataSize	= 6
  4688
  4689 40E7 60				rts						; ret
  4690 				.endl
  4691
  4692 40E8			.local	PUT_LETTER					; PROCEDURE
  4693
  4694 				; optimize OK (service.pas), line = 857
  4695
  4696 40E8 A9 00			lda #$00
  4697 40EA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4698 40EC AD 1C A2			lda LETT.TYP+1
  4699 40EF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4700 40F1 AD 1B A2			lda LETT.TYP
  4701 40F4 0A				asl @
  4702 40F5 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4703 40F7 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4704 40F9 0A				asl @
  4705 40FA 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4706 40FC 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4707 40FE 85 9F			sta :STACKORIGIN+9
  4708 4100 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4709 4102 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4710 4104 A5 9F			lda :STACKORIGIN+9
  4711 4106 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4712 4108 AD 1D A2			lda LETT.FRAME
  4713 410B 85 A0			sta :STACKORIGIN+10
  4714 410D A9 00			lda #$00
  4715 410F 06 A0			asl :STACKORIGIN+10
  4716 4111 2A				rol @
  4717 4112 06 A0			asl :STACKORIGIN+10
  4718 4114 2A				rol @
  4719 4115 06 A0			asl :STACKORIGIN+10
  4720 4117 2A				rol @
  4721 4118 06 A0			asl :STACKORIGIN+10
  4722 411A 2A				rol @
  4723 411B 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4724 411E 8D 98 A2			sta FL+1
  4725 4121 A5 A0			lda :STACKORIGIN+10
  4726 4123 8D 97 A2			sta FL
  4727
  4728 				; optimize OK (service.pas), line = 859
  4729
  4730 4126 A9 00			lda #$00
  4731 4128 8D 9B A2			sta YL
  4732
  4733 412B			l_091F
  4734 				; --- ForToDoCondition
  4735 412B AD 9B A2			lda YL
  4736 412E C9 08			cmp #$08
  4737 4130 90 03 4C D6 41		jcs l_092D
  4738
  4739 				; optimize OK (service.pas), line = 861
  4740
  4741 4135 85 9F			sta :STACKORIGIN+9
  4742 4137 A9 00			lda #$00
  4743 4139 06 9F			asl :STACKORIGIN+9
  4744 413B 2A				rol @
  4745 413C 06 9F			asl :STACKORIGIN+9
  4746 413E 2A				rol @
  4747 413F 06 9F			asl :STACKORIGIN+9
  4748 4141 2A				rol @
  4749 4142 06 9F			asl :STACKORIGIN+9
  4750 4144 2A				rol @
  4751 4145 06 9F			asl :STACKORIGIN+9
  4752 4147 2A				rol @
  4753 4148 06 9F			asl :STACKORIGIN+9
  4754 414A 2A				rol @
  4755 414B 06 9F			asl :STACKORIGIN+9
  4756 414D 2A				rol @
  4757 414E 8D 9A A2			sta FW+1
  4758 4151 A5 9F			lda :STACKORIGIN+9
  4759 4153 8D 99 A2			sta FW
  4760
  4761 				; optimize OK (service.pas), line = 863
  4762
  4763 4156 AD 1A A2			lda LETT.Y
  4764 4159 18 6D 9B A2			add YL
  4765 415D A8				tay
  4766 415E AD 19 A2			lda LETT.X
  4767 4161 18 79 00 C0			add adr.ROW,y
  4768 4165 8D 4D A2			sta BLITZERO.DST
  4769 4168 A9 50			lda #$50
  4770 416A 79 00 C1			adc adr.ROW+256,y
  4771 416D 8D 4E A2			sta BLITZERO.DST+1
  4772 4170 A9 00			lda #$00
  4773 4172 69 00			adc #$00
  4774 4174 8D 4F A2			sta BLITZERO.DST+2
  4775 4177 A9 00			lda #$00
  4776 4179 69 00			adc #$00
  4777 417B 8D 50 A2			sta BLITZERO.DST+3
  4778 417E AD A0 A1			lda LETTERS.OFS
  4779 4181 18 6D 99 A2			add FW
  4780 4185 85 A2			sta :STACKORIGIN+12
  4781 4187 AD A1 A1			lda LETTERS.OFS+1
  4782 418A 6D 9A A2			adc FW+1
  4783 418D 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  4784 418F AD A2 A1			lda LETTERS.OFS+2
  4785 4192 69 00			adc #$00
  4786 4194 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
  4787 4196 AD A3 A1			lda LETTERS.OFS+3
  4788 4199 69 00			adc #$00
  4789 419B 85 D2			sta :STACKORIGIN+STACKWIDTH*3+12
  4790 419D A5 A2			lda :STACKORIGIN+12
  4791 419F 18 6D 97 A2			add FL
  4792 41A3 8D 49 A2			sta BLITZERO.SRC
  4793 41A6 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  4794 41A8 6D 98 A2			adc FL+1
  4795 41AB 8D 4A A2			sta BLITZERO.SRC+1
  4796 41AE A5 C2			lda :STACKORIGIN+STACKWIDTH*2+12
  4797 41B0 69 00			adc #$00
  4798 41B2 8D 4B A2			sta BLITZERO.SRC+2
  4799 41B5 A5 D2			lda :STACKORIGIN+STACKWIDTH*3+12
  4800 41B7 69 00			adc #$00
  4801 41B9 8D 4C A2			sta BLITZERO.SRC+3
  4802 41BC A9 10			lda #$10
  4803 41BE 8D 51 A2			sta BLITZERO.W
  4804 41C1 A9 00			lda #$00
  4805 41C3 8D 52 A2			sta BLITZERO.W+1
  4806 41C6 A9 01			lda #$01
  4807 41C8 8D 53 A2			sta BLITZERO.H
  4808 41CB 20 FD 3B			jsr BLITZERO
  4809
  4810 				; --- ForToDoEpilog
  4811 41CE EE 9B A2			inc YL
  4812 41D1 F0 03 4C 2B 41		jne l_091F
  4813 41D6			l_092D
  4814
  4815 				; ------------------------------------------------------------
  4816
  4817 = A297			FL	= DATAORIGIN+$024F
  4818 = A299			FW	= DATAORIGIN+$0251
  4819 = A29B			YL	= DATAORIGIN+$0253
  4820
  4821 = A297			@VarData	= FL
  4822 = 0005			@VarDataSize	= 5
  4823
  4824 41D6			@exit
  4825 					.ifdef @new
  4826 					lda <@VarData
  4827 					sta :ztmp
  4828 					lda >@VarData
  4829 					ldy #@VarDataSize-1
  4830 					jmp @FreeMem
  4831 					els
  4832 41D6 60				rts						; ret
  4833 					eif
  4834 				.endl
  4835
  4836 41D7			.local	REMOVE_LETTER					; PROCEDURE
  4837
  4838 				; optimize OK (service.pas), line = 875
  4839
  4840 41D7 AC 1A A2			ldy LETT.Y
  4841 41DA AD 19 A2			lda LETT.X
  4842 41DD 18 79 00 C0			add adr.ROW,y
  4843 41E1 8D 33 A2			sta HLP
  4844 41E4 A9 00			lda #$00
  4845 41E6 79 00 C1			adc adr.ROW+256,y
  4846 41E9 8D 34 A2			sta HLP+1
  4847
  4848 				; optimize OK (service.pas), line = 877
  4849
  4850 41EC AD 1A A2			lda LETT.Y
  4851 41EF C9 C8			cmp #$C8
  4852 41F1 B0 52			jcs l_0983
  4853
  4854 				; optimize OK (service.pas), line = 878
  4855
  4856 41F3 AD 33 A2			lda HLP
  4857 41F6 8D 42 A2			sta BLITBOX.DST
  4858 41F9 A9 50			lda #$50
  4859 41FB 18 6D 34 A2			add HLP+1
  4860 41FF 8D 43 A2			sta BLITBOX.DST+1
  4861 4202 A9 00			lda #$00
  4862 4204 69 00			adc #$00
  4863 4206 8D 44 A2			sta BLITBOX.DST+2
  4864 4209 A9 00			lda #$00
  4865 420B 69 00			adc #$00
  4866 420D 8D 45 A2			sta BLITBOX.DST+3
  4867 4210 AD 40 A1			lda PLAYSCREEN.OFS
  4868 4213 18 6D 33 A2			add HLP
  4869 4217 8D 3E A2			sta BLITBOX.SRC
  4870 421A AD 41 A1			lda PLAYSCREEN.OFS+1
  4871 421D 6D 34 A2			adc HLP+1
  4872 4220 8D 3F A2			sta BLITBOX.SRC+1
  4873 4223 AD 42 A1			lda PLAYSCREEN.OFS+2
  4874 4226 69 00			adc #$00
  4875 4228 8D 40 A2			sta BLITBOX.SRC+2
  4876 422B AD 43 A1			lda PLAYSCREEN.OFS+3
  4877 422E 69 00			adc #$00
  4878 4230 8D 41 A2			sta BLITBOX.SRC+3
  4879 4233 A9 10			lda #$10
  4880 4235 8D 46 A2			sta BLITBOX.W
  4881 4238 A9 00			lda #$00
  4882 423A 8D 47 A2			sta BLITBOX.W+1
  4883 423D A9 08			lda #$08
  4884 423F 8D 48 A2			sta BLITBOX.H
  4885 4242 20 7C 3B			jsr BLITBOX
  4886 4245			l_0983
  4887
  4888 				; ------------------------------------------------------------
  4889
  4890 = A29C			YL	= DATAORIGIN+$0254
  4891
  4892 = A29C			@VarData	= YL
  4893 = 0001			@VarDataSize	= 1
  4894
  4895 4245			@exit
  4896 					.ifdef @new
  4897 					lda <@VarData
  4898 					sta :ztmp
  4899 					lda >@VarData
  4900 					ldy #@VarDataSize-1
  4901 					jmp @FreeMem
  4902 					els
  4903 4245 60				rts						; ret
  4904 					eif
  4905 				.endl
  4906
  4907 4246			.local	DISABLE_LETTER					; PROCEDURE
  4908
  4909 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 896
  4910
  4911 4246 20 D7 41			jsr REMOVE_LETTER
  4912
  4913 				; optimize OK (service.pas), line = 897
  4914
  4915 4249 A9 00			lda #$00
  4916 424B 8D 1F A2			sta LETT.ACTIVE
  4917
  4918 424E			@exit
  4919 					.ifdef @new
  4920 					lda <@VarData
  4921 					sta :ztmp
  4922 					lda >@VarData
  4923 					ldy #@VarDataSize-1
  4924 					jmp @FreeMem
  4925 					els
  4926 424E 60				rts						; ret
  4927 					eif
  4928 				.endl
  4929
  4930 424F			.local	START_LETTER					; PROCEDURE
  4931
  4932 				; optimize OK (service.pas), line = 903
  4933
  4934 424F AD 1F A2			lda LETT.ACTIVE
  4935 4252 F0 03			jeq l_09AE
  4936 4254 20 46 42			jsr DISABLE_LETTER
  4937 4257			l_09AE
  4938
  4939 				; optimize OK (service.pas), line = 905
  4940
  4941 4257 AD 9D A2			lda XL
  4942 425A 8D 19 A2			sta LETT.X
  4943
  4944 				; optimize OK (service.pas), line = 906
  4945
  4946 425D AD 9F A2			lda YL
  4947 4260 8D 1A A2			sta LETT.Y
  4948
  4949 				; optimize OK (service.pas), line = 907
  4950
  4951 4263 AD A1 A2			lda LETTER
  4952 4266 8D 1B A2			sta LETT.TYP
  4953 4269 AD A2 A2			lda LETTER+1
  4954 426C 8D 1C A2			sta LETT.TYP+1
  4955
  4956 				; optimize OK (service.pas), line = 908
  4957
  4958 426F A9 00			lda #$00
  4959 4271 8D 1D A2			sta LETT.FRAME
  4960
  4961 				; optimize OK (service.pas), line = 909
  4962
  4963 4274 8D 1E A2			sta LETT.SUBFRAME
  4964
  4965 				; optimize OK (service.pas), line = 910
  4966
  4967 4277 A9 01			lda #$01
  4968 4279 8D 1F A2			sta LETT.ACTIVE
  4969
  4970 				; ------------------------------------------------------------
  4971
  4972 = A29D			XL	= DATAORIGIN+$0255
  4973 = A29F			YL	= DATAORIGIN+$0257
  4974 = A2A1			LETTER	= DATAORIGIN+$0259
  4975
  4976 = A29D			@VarData	= XL
  4977 = 0006			@VarDataSize	= 6
  4978
  4979 427C			@exit
  4980 					.ifdef @new
  4981 					lda <@VarData
  4982 					sta :ztmp
  4983 					lda >@VarData
  4984 					ldy #@VarDataSize-1
  4985 					jmp @FreeMem
  4986 					els
  4987 427C 60				rts						; ret
  4988 					eif
  4989 				.endl
  4990
  4991 427D			.local	CHECK_LETTER					; PROCEDURE
  4992
  4993 				; optimize OK (service.pas), line = 916
  4994
  4995 427D AD 1F A2			lda LETT.ACTIVE
  4996 4280 D0 03 4C 7C 43		jeq l_09DD
  4997
  4998 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 918
  4999
  5000 4285 20 D7 41			jsr REMOVE_LETTER
  5001
  5002 				; optimize FAIL (0, service.pas), line = 919
  5003
  5004 4288 EE 1A A2			inc LETT.Y
  5005
  5006 				; optimize OK (service.pas), line = 920
  5007
  5008 428B AD 1A A2			lda LETT.Y
  5009 428E C9 C8			cmp #$C8
  5010 4290 90 03			jcc l_09F5
  5011 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 921
  5012 4292 4C 6E 43			jmp l_0A00
  5013 4295			l_09F5
  5014
  5015 				; optimize FAIL ('PUT_LETTER', service.pas), line = 923
  5016
  5017 4295 20 E8 40			jsr PUT_LETTER
  5018
  5019 				; optimize FAIL (0, service.pas), line = 924
  5020
  5021 4298 EE 1E A2			inc LETT.SUBFRAME
  5022
  5023 				; optimize OK (service.pas), line = 925
  5024
  5025 429B AD 1E A2			lda LETT.SUBFRAME
  5026 429E C9 05			cmp #$05
  5027 42A0 D0 08			jne l_0A17
  5028
  5029 				; optimize OK (service.pas), line = 927
  5030
  5031 42A2 A9 00			lda #$00
  5032 42A4 8D 1E A2			sta LETT.SUBFRAME
  5033
  5034 				; optimize FAIL (0, service.pas), line = 928
  5035
  5036 42A7 EE 1D A2			inc LETT.FRAME
  5037 42AA			l_0A17
  5038
  5039 				; optimize OK (service.pas), line = 931
  5040
  5041 42AA AD 1D A2			lda LETT.FRAME
  5042 42AD C9 08			cmp #$08
  5043 42AF D0 05			jne l_0A34
  5044 42B1 A9 00			lda #$00
  5045 42B3 8D 1D A2			sta LETT.FRAME
  5046 42B6			l_0A34
  5047
  5048 				; optimize OK (service.pas), line = 933
  5049
  5050 42B6 AD 19 A2			lda LETT.X
  5051 42B9 18 69 10			add #$10
  5052 42BC 85 A0			sta :STACKORIGIN+10
  5053 42BE A9 00			lda #$00
  5054 42C0 69 00			adc #$00
  5055 42C2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5056 42C4 A9 00			lda #$00
  5057 42C6 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5058 42C8 D0 05			bne @+
  5059 42CA AD B4 A1			lda VAUS.X
  5060 42CD C5 A0			cmp :STACKORIGIN+10
  5061 				@
  5062 42CF 90 03 4C 71 43		jcs l_0A8D
  5063 				@
  5064 42D4 AD B4 A1			lda VAUS.X
  5065 42D7 18 6D BC A1			add VAUS.WIDTH
  5066 42DB 85 A0			sta :STACKORIGIN+10
  5067 42DD A9 00			lda #$00
  5068 42DF 69 00			adc #$00
  5069 42E1 C9 00			cmp #$00
  5070 42E3 D0 05			bne @+
  5071 42E5 A5 A0			lda :STACKORIGIN+10
  5072 42E7 CD 19 A2			cmp LETT.X
  5073 				@
  5074 42EA B0 03 4C 71 43		jcc l_0A8D
  5075 42EF D0 03 4C 71 43		jeq l_0A8D
  5076 				@
  5077 42F4 AD 1A A2			lda LETT.Y
  5078 42F7 18 69 08			add #$08
  5079 42FA 85 A1			sta :STACKORIGIN+11
  5080 42FC A9 00			lda #$00
  5081 42FE 69 00			adc #$00
  5082 4300 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5083 4302 A9 00			lda #$00
  5084 4304 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5085 4306 D0 05			bne @+
  5086 4308 AD B5 A1			lda VAUS.Y
  5087 430B C5 A1			cmp :STACKORIGIN+11
  5088 				@
  5089 430D B0 62			jcs l_0A8D
  5090 				@
  5091 430F AD B5 A1			lda VAUS.Y
  5092 4312 18 6D BD A1			add VAUS.HEIGHT
  5093 4316 85 A0			sta :STACKORIGIN+10
  5094 4318 A9 00			lda #$00
  5095 431A 69 00			adc #$00
  5096 431C C9 00			cmp #$00
  5097 431E D0 05			bne @+
  5098 4320 A5 A0			lda :STACKORIGIN+10
  5099 4322 CD 1A A2			cmp LETT.Y
  5100 				@
  5101 4325 90 4A			jcc l_0A8D
  5102 4327 F0 48			jeq l_0A8D
  5103 				@
  5104
  5105 				; optimize OK (service.pas), line = 936
  5106
  5107 4329 A9 64			lda #$64
  5108 432B 8D 30 A1			sta BALL_BLOCK_SOUND.A
  5109 432E A9 00			lda #$00
  5110 4330 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
  5111 4333 A9 0A			lda #$0A
  5112 4335 8D 32 A1			sta BALL_BLOCK_SOUND.B
  5113 4338 A9 00			lda #$00
  5114 433A 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
  5115 433D 20 F1 3A			jsr BALL_BLOCK_SOUND
  5116
  5117 				; optimize OK (service.pas), line = 937
  5118
  5119 4340 AC 1B A2			ldy LETT.TYP
  5120 4343 C8				iny
  5121 4344 8C C0 A1			sty VAUS.LETTER
  5122
  5123 				; optimize OK (service.pas), line = 938
  5124
  5125 4347 AD 10 A2			lda CUR_PLAYER
  5126 434A 0A				asl @
  5127 434B 0A				asl @
  5128 434C A8				tay
  5129 434D B9 F5 A1			lda adr.SCORE.PLAYER,y
  5130 4350 18 69 E8			add #$E8
  5131 4353 99 F5 A1			sta adr.SCORE.PLAYER,y
  5132 4356 B9 F6 A1			lda adr.SCORE.PLAYER+1,y
  5133 4359 69 03			adc #$03
  5134 435B 99 F6 A1			sta adr.SCORE.PLAYER+1,y
  5135 435E B9 F7 A1			lda adr.SCORE.PLAYER+2,y
  5136 4361 69 00			adc #$00
  5137 4363 99 F7 A1			sta adr.SCORE.PLAYER+2,y
  5138 4366 B9 F8 A1			lda adr.SCORE.PLAYER+3,y
  5139 4369 69 00			adc #$00
  5140 436B 99 F8 A1			sta adr.SCORE.PLAYER+3,y
  5141 436E			l_0A00
  5142
  5143 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 939
  5144
  5145 436E 20 46 42			jsr DISABLE_LETTER
  5146 4371			l_0A8D
  5147
  5148 				; optimize OK (service.pas), line = 943
  5149
  5150 4371 A9 00			lda #$00
  5151 4373 8D 20 A2			sta LETT.INCOMING
  5152 4376 8D 21 A2			sta LETT.INCOMING+1
  5153 4379 4C B3 43			jmp l_0AAE
  5154 437C			l_09DD
  5155
  5156 				; optimize OK (service.pas), line = 945
  5157
  5158 437C AD 20 A2			lda LETT.INCOMING
  5159 437F C9 E9			cmp #$E9
  5160 4381 AD 21 A2			lda LETT.INCOMING+1
  5161 4384 E9 03			sbc #$03
  5162 4386 50 02			svc
  5163 4388 49 80			eor #$80
  5164 438A 30 27			jmi l_0ABF
  5165
  5166 				; optimize OK (service.pas), line = 946
  5167
  5168 438C AD 22 A2			lda LETT.NEXTX
  5169 438F 8D 9D A2			sta START_LETTER.XL
  5170 4392 AD 23 A2			lda LETT.NEXTX+1
  5171 4395 8D 9E A2			sta START_LETTER.XL+1
  5172 4398 AD 24 A2			lda LETT.NEXTY
  5173 439B 8D 9F A2			sta START_LETTER.YL
  5174 439E AD 25 A2			lda LETT.NEXTY+1
  5175 43A1 8D A0 A2			sta START_LETTER.YL+1
  5176 43A4 AD 26 A2			lda LETT.NEXTTYPE
  5177 43A7 8D A1 A2			sta START_LETTER.LETTER
  5178 43AA AD 27 A2			lda LETT.NEXTTYPE+1
  5179 43AD 8D A2 A2			sta START_LETTER.LETTER+1
  5180 43B0 20 4F 42			jsr START_LETTER
  5181 43B3			l_0AAE
  5182 43B3			l_0ABF
  5183
  5184 43B3			@exit
  5185 					.ifdef @new
  5186 					lda <@VarData
  5187 					sta :ztmp
  5188 					lda >@VarData
  5189 					ldy #@VarDataSize-1
  5190 					jmp @FreeMem
  5191 					els
  5192 43B3 60				rts						; ret
  5193 					eif
  5194 				.endl
  5195
  5196 43B4			.local	SHOWBTMPICTURE					; PROCEDURE
  5197
  5198 				; ------------------------------------------------------------
  5199
  5200 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5201 				; as Pointer
  5202 43B4 B5 96			lda :STACKORIGIN,x
  5203 43B6 85 84			sta :bp2
  5204 43B8 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5205 43BA 85 85			sta :bp2+1
  5206 43BC A0 07			ldy #$07
  5207 43BE B1 84 99 A3 A2 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5208 43C6 CA				dex
  5209 43C7			@main
  5210
  5211 				; optimize OK (service.pas), line = 956
  5212
  5213 43C7 AD A7 A2			lda BTM.OFS
  5214 43CA 8D 3E A2			sta BLITBOX.SRC
  5215 43CD AD A8 A2			lda BTM.OFS+1
  5216 43D0 8D 3F A2			sta BLITBOX.SRC+1
  5217 43D3 AD A9 A2			lda BTM.OFS+2
  5218 43D6 8D 40 A2			sta BLITBOX.SRC+2
  5219 43D9 AD AA A2			lda BTM.OFS+3
  5220 43DC 8D 41 A2			sta BLITBOX.SRC+3
  5221 43DF A9 00			lda #$00
  5222 43E1 8D 42 A2			sta BLITBOX.DST
  5223 43E4 A9 50			lda #$50
  5224 43E6 8D 43 A2			sta BLITBOX.DST+1
  5225 43E9 A9 00			lda #$00
  5226 43EB 8D 44 A2			sta BLITBOX.DST+2
  5227 43EE 8D 45 A2			sta BLITBOX.DST+3
  5228 43F1 AD A3 A2			lda BTM.WIDTH
  5229 43F4 8D 46 A2			sta BLITBOX.W
  5230 43F7 AD A4 A2			lda BTM.WIDTH+1
  5231 43FA 8D 47 A2			sta BLITBOX.W+1
  5232 43FD AD A5 A2			lda BTM.HEIGHT
  5233 4400 8D 48 A2			sta BLITBOX.H
  5234 4403 20 7C 3B			jsr BLITBOX
  5235
  5236 				; ------------------------------------------------------------
  5237
  5238 = A2A3			adr.BTM	= DATAORIGIN+$025B	; [8] RECORD
  5239 4406			.var BTM	= adr.BTM .word
  5240 = A2A3			BTM.WIDTH	= DATAORIGIN+$025B
  5241 = A2A5			BTM.HEIGHT	= DATAORIGIN+$025D
  5242 = A2A7			BTM.OFS	= DATAORIGIN+$025F
  5243
  5244 = A2A3			@VarData	= BTM.WIDTH
  5245 = 0008			@VarDataSize	= 8
  5246
  5247 4406			@exit
  5248 					.ifdef @new
  5249 					lda <@VarData
  5250 					sta :ztmp
  5251 					lda >@VarData
  5252 					ldy #@VarDataSize-1
  5253 					jmp @FreeMem
  5254 					els
  5255 4406 60				rts						; ret
  5256 					eif
  5257 = 4407 A3 A2		BTM
  5257 				.endl
  5258
  5259 4409			.local	PLACE_BALL					; PROCEDURE
  5260
  5261 				; optimize OK (service.pas), line = 977
  5262
  5263 4409 AC AB A2 84 84 AC + 	mwy BALL :bp2
  5264 4413 A0 00			ldy #BALL.X-DATAORIGIN
  5265 4415 B1 84			lda (:bp2),y
  5266 4417 38 E9 03			sub #$03
  5267 441A 85 9F			sta :STACKORIGIN+9
  5268 441C C8				iny
  5269 441D B1 84			lda (:bp2),y
  5270 441F E9 00			sbc #$00
  5271 4421 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5272 4423 A0 02			ldy #BALL.Y-DATAORIGIN
  5273 4425 B1 84			lda (:bp2),y
  5274 4427 38 E9 03			sub #$03
  5275 442A A8				tay
  5276 442B A5 9F			lda :STACKORIGIN+9
  5277 442D 18 79 00 C0			add adr.ROW,y
  5278 4431 8D 33 A2			sta HLP
  5279 4434 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5280 4436 79 00 C1			adc adr.ROW+256,y
  5281 4439 8D 34 A2			sta HLP+1
  5282
  5283 				; optimize OK (service.pas), line = 979
  5284
  5285 443C AD 33 A2			lda HLP
  5286 443F 8D 4D A2			sta BLITZERO.DST
  5287 4442 A9 50			lda #$50
  5288 4444 18 6D 34 A2			add HLP+1
  5289 4448 8D 4E A2			sta BLITZERO.DST+1
  5290 444B A9 00			lda #$00
  5291 444D 69 00			adc #$00
  5292 444F 8D 4F A2			sta BLITZERO.DST+2
  5293 4452 A9 00			lda #$00
  5294 4454 69 00			adc #$00
  5295 4456 8D 50 A2			sta BLITZERO.DST+3
  5296 4459 AD 38 A1			lda BALLDATA.OFS
  5297 445C 8D 49 A2			sta BLITZERO.SRC
  5298 445F AD 39 A1			lda BALLDATA.OFS+1
  5299 4462 8D 4A A2			sta BLITZERO.SRC+1
  5300 4465 AD 3A A1			lda BALLDATA.OFS+2
  5301 4468 8D 4B A2			sta BLITZERO.SRC+2
  5302 446B AD 3B A1			lda BALLDATA.OFS+3
  5303 446E 8D 4C A2			sta BLITZERO.SRC+3
  5304 4471 A9 05			lda #$05
  5305 4473 8D 51 A2			sta BLITZERO.W
  5306 4476 A9 00			lda #$00
  5307 4478 8D 52 A2			sta BLITZERO.W+1
  5308 447B A9 05			lda #$05
  5309 447D 8D 53 A2			sta BLITZERO.H
  5310 4480 20 FD 3B			jsr BLITZERO
  5311
  5312 				; ------------------------------------------------------------
  5313
  5314 = A2AB			BALL	= DATAORIGIN+$0263
  5315 = A048			BALL.X	= DATAORIGIN+$0000
  5316 = A04A			BALL.Y	= DATAORIGIN+$0002
  5317 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  5318 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  5319 = A050			BALL.OLDX	= DATAORIGIN+$0008
  5320 = A052			BALL.OLDY	= DATAORIGIN+$000A
  5321 = A054			BALL.SPEED	= DATAORIGIN+$000C
  5322 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  5323 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  5324 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  5325 = A05C			BALL.SBD	= DATAORIGIN+$0014
  5326 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  5327 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  5328 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  5329 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  5330 = A063			BALL.STM	= DATAORIGIN+$001B
  5331
  5332 = A2AB			@VarData	= BALL
  5333 = 0002			@VarDataSize	= 2
  5334
  5335 4483			@exit
  5336 					.ifdef @new
  5337 					lda <@VarData
  5338 					sta :ztmp
  5339 					lda >@VarData
  5340 					ldy #@VarDataSize-1
  5341 					jmp @FreeMem
  5342 					els
  5343 4483 60				rts						; ret
  5344 					eif
  5345 				.endl
  5346
  5347 4484			.local	REMOVE_BALL					; PROCEDURE
  5348
  5349 				; optimize OK (service.pas), line = 1006
  5350
  5351 4484 AC AF A2 84 84 AC + 	mwy BALL :bp2
  5352 448E A0 08			ldy #BALL.OLDX-DATAORIGIN
  5353 4490 B1 84			lda (:bp2),y
  5354 4492 38 E9 03			sub #$03
  5355 4495 85 9F			sta :STACKORIGIN+9
  5356 4497 C8				iny
  5357 4498 B1 84			lda (:bp2),y
  5358 449A E9 00			sbc #$00
  5359 449C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5360 449E A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5361 44A0 B1 84			lda (:bp2),y
  5362 44A2 38 E9 03			sub #$03
  5363 44A5 A8				tay
  5364 44A6 A5 9F			lda :STACKORIGIN+9
  5365 44A8 18 79 00 C0			add adr.ROW,y
  5366 44AC 8D 33 A2			sta HLP
  5367 44AF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5368 44B1 79 00 C1			adc adr.ROW+256,y
  5369 44B4 8D 34 A2			sta HLP+1
  5370
  5371 				; optimize OK (service.pas), line = 1008
  5372
  5373 44B7 AD 33 A2			lda HLP
  5374 44BA 8D 42 A2			sta BLITBOX.DST
  5375 44BD A9 50			lda #$50
  5376 44BF 18 6D 34 A2			add HLP+1
  5377 44C3 8D 43 A2			sta BLITBOX.DST+1
  5378 44C6 A9 00			lda #$00
  5379 44C8 69 00			adc #$00
  5380 44CA 8D 44 A2			sta BLITBOX.DST+2
  5381 44CD A9 00			lda #$00
  5382 44CF 69 00			adc #$00
  5383 44D1 8D 45 A2			sta BLITBOX.DST+3
  5384 44D4 AD 40 A1			lda PLAYSCREEN.OFS
  5385 44D7 18 6D 33 A2			add HLP
  5386 44DB 8D 3E A2			sta BLITBOX.SRC
  5387 44DE AD 41 A1			lda PLAYSCREEN.OFS+1
  5388 44E1 6D 34 A2			adc HLP+1
  5389 44E4 8D 3F A2			sta BLITBOX.SRC+1
  5390 44E7 AD 42 A1			lda PLAYSCREEN.OFS+2
  5391 44EA 69 00			adc #$00
  5392 44EC 8D 40 A2			sta BLITBOX.SRC+2
  5393 44EF AD 43 A1			lda PLAYSCREEN.OFS+3
  5394 44F2 69 00			adc #$00
  5395 44F4 8D 41 A2			sta BLITBOX.SRC+3
  5396 44F7 A9 05			lda #$05
  5397 44F9 8D 46 A2			sta BLITBOX.W
  5398 44FC A9 00			lda #$00
  5399 44FE 8D 47 A2			sta BLITBOX.W+1
  5400 4501 A9 05			lda #$05
  5401 4503 8D 48 A2			sta BLITBOX.H
  5402 4506 20 7C 3B			jsr BLITBOX
  5403
  5404 				; ------------------------------------------------------------
  5405
  5406 = A2AF			BALL	= DATAORIGIN+$0267
  5407 = A048			BALL.X	= DATAORIGIN+$0000
  5408 = A04A			BALL.Y	= DATAORIGIN+$0002
  5409 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  5410 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  5411 = A050			BALL.OLDX	= DATAORIGIN+$0008
  5412 = A052			BALL.OLDY	= DATAORIGIN+$000A
  5413 = A054			BALL.SPEED	= DATAORIGIN+$000C
  5414 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  5415 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  5416 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  5417 = A05C			BALL.SBD	= DATAORIGIN+$0014
  5418 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  5419 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  5420 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  5421 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  5422 = A063			BALL.STM	= DATAORIGIN+$001B
  5423
  5424 = A2AF			@VarData	= BALL
  5425 = 0002			@VarDataSize	= 2
  5426
  5427 4509			@exit
  5428 					.ifdef @new
  5429 					lda <@VarData
  5430 					sta :ztmp
  5431 					lda >@VarData
  5432 					ldy #@VarDataSize-1
  5433 					jmp @FreeMem
  5434 					els
  5435 4509 60				rts						; ret
  5436 					eif
  5437 				.endl
  5438
  5439 450A			.local	WAIT_VBL					; PROCEDURE
  5440
  5441 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1042
  5442
  5443 450A 20 9E 35			jsr SYSTEM.PAUSE.@00
  5444
  5445 450D			@exit
  5446 					.ifdef @new
  5447 					lda <@VarData
  5448 					sta :ztmp
  5449 					lda >@VarData
  5450 					ldy #@VarDataSize-1
  5451 					jmp @FreeMem
  5452 					els
  5453 450D 60				rts						; ret
  5454 					eif
  5455 				.endl
  5456
  5457 450E			.local	SET_BALL					; PROCEDURE
  5458
  5459 				; optimize OK (service.pas), line = 1054
  5460
  5461 450E AC B3 A2 84 84 AC + 	mwy BALL :bp2
  5462 4518 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5463 451A B1 84			lda (:bp2),y
  5464 451C C9 FF			cmp #$FF
  5465 451E D0 05			bne @+
  5466 4520 88				dey
  5467 4521 B1 84			lda (:bp2),y
  5468 4523 C9 FF			cmp #$FF
  5469 				@
  5470 4525 F0 13			jeq l_0B3Fs
  5471 4527 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5472 4529 B1 84			lda (:bp2),y
  5473 452B C9 FF			cmp #$FF
  5474 452D D0 05			bne @+
  5475 452F 88				dey
  5476 4530 B1 84			lda (:bp2),y
  5477 4532 C9 FF			cmp #$FF
  5478 				@
  5479 4534 F0 04			jeq l_0B3Fs
  5480 4536 A9 01 D0 02			lda:sne #$01
  5481 453A A9 00		l_0B3Fs	lda #$00
  5482 453C 8D B7 A2			sta B0
  5483
  5484 				; optimize OK (service.pas), line = 1055
  5485
  5486 453F AC B3 A2 84 84 AC + 	mwy BALL :bp2
  5487 4549 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5488 454B B1 84			lda (:bp2),y
  5489 454D 85 9F			sta :STACKORIGIN+9
  5490 454F C8				iny
  5491 4550 B1 84			lda (:bp2),y
  5492 4552 A0 01			ldy #BALL.X-DATAORIGIN+$01
  5493 4554 D1 84			cmp (:bp2),y
  5494 4556 D0 05			bne @+
  5495 4558 88				dey
  5496 4559 A5 9F			lda :STACKORIGIN+9
  5497 455B D1 84			cmp (:bp2),y
  5498 				@
  5499 455D D0 03			bne @+
  5500 455F 4C 65 45			jmp *+6
  5501 				@\	jmp l_0B57s
  5501 				@
  5501 4562 4C 85 45			JMP L_0B57S
  5502 4565 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5503 4567 B1 84			lda (:bp2),y
  5504 4569 85 A0			sta :STACKORIGIN+10
  5505 456B C8				iny
  5506 456C B1 84			lda (:bp2),y
  5507 456E A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5508 4570 D1 84			cmp (:bp2),y
  5509 4572 D0 05			bne @+
  5510 4574 88				dey
  5511 4575 A5 A0			lda :STACKORIGIN+10
  5512 4577 D1 84			cmp (:bp2),y
  5513 				@
  5514 4579 D0 03			bne @+
  5515 457B 4C 81 45			jmp *+6
  5516 				@\	jmp l_0B57s
  5516 				@
  5516 457E 4C 85 45			JMP L_0B57S
  5517 4581 A9 00 F0 02			lda:seq #$00
  5518 4585 A9 01		l_0B57s	lda #$01
  5519 4587 8D B8 A2			sta B1
  5520
  5521 				; optimize OK (service.pas), line = 1057
  5522
  5523 458A AD B7 A2			lda B0
  5524 458D 2D B8 A2			and B1
  5525 4590 F0 0F			jeq l_0B69
  5526
  5527 				; optimize OK (service.pas), line = 1058
  5528
  5529 4592 AD B3 A2			lda BALL
  5530 4595 8D AF A2			sta REMOVE_BALL.BALL
  5531 4598 AD B4 A2			lda BALL+1
  5532 459B 8D B0 A2			sta REMOVE_BALL.BALL+1
  5533 459E 20 84 44			jsr REMOVE_BALL
  5534 45A1			l_0B69
  5535
  5536 				; optimize OK (service.pas), line = 1060
  5537
  5538 45A1 AD B3 A2			lda BALL
  5539 45A4 8D AB A2			sta PLACE_BALL.BALL
  5540 45A7 AD B4 A2			lda BALL+1
  5541 45AA 8D AC A2			sta PLACE_BALL.BALL+1
  5542 45AD 20 09 44			jsr PLACE_BALL
  5543
  5544 				; optimize OK (service.pas), line = 1062
  5545
  5546 45B0 AC B3 A2 84 84 AC + 	mwy BALL :bp2
  5547 45BA A0 00			ldy #BALL.X-DATAORIGIN
  5548 45BC B1 84			lda (:bp2),y
  5549 45BE 85 9F			sta :STACKORIGIN+9
  5550 45C0 C8				iny
  5551 45C1 B1 84			lda (:bp2),y
  5552 45C3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5553 45C5 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5554 45C7 A5 9F			lda :STACKORIGIN+9
  5555 45C9 91 84			sta (:bp2),y
  5556 45CB C8				iny
  5557 45CC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5558 45CE 91 84			sta (:bp2),y
  5559
  5560 				; optimize OK (service.pas), line = 1063
  5561
  5562 45D0 A0 02			ldy #BALL.Y-DATAORIGIN
  5563 45D2 B1 84			lda (:bp2),y
  5564 45D4 85 9F			sta :STACKORIGIN+9
  5565 45D6 C8				iny
  5566 45D7 B1 84			lda (:bp2),y
  5567 45D9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5568 45DB A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5569 45DD A5 9F			lda :STACKORIGIN+9
  5570 45DF 91 84			sta (:bp2),y
  5571 45E1 C8				iny
  5572 45E2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5573 45E4 91 84			sta (:bp2),y
  5574
  5575 				; ------------------------------------------------------------
  5576
  5577 = A2B3			BALL	= DATAORIGIN+$026B
  5578 = A048			BALL.X	= DATAORIGIN+$0000
  5579 = A04A			BALL.Y	= DATAORIGIN+$0002
  5580 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  5581 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  5582 = A050			BALL.OLDX	= DATAORIGIN+$0008
  5583 = A052			BALL.OLDY	= DATAORIGIN+$000A
  5584 = A054			BALL.SPEED	= DATAORIGIN+$000C
  5585 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  5586 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  5587 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  5588 = A05C			BALL.SBD	= DATAORIGIN+$0014
  5589 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  5590 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  5591 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  5592 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  5593 = A063			BALL.STM	= DATAORIGIN+$001B
  5594 = A2B7			B0	= DATAORIGIN+$026F
  5595 = A2B8			B1	= DATAORIGIN+$0270
  5596
  5597 = A2B3			@VarData	= BALL
  5598 = 0004			@VarDataSize	= 4
  5599
  5600 45E6			@exit
  5601 					.ifdef @new
  5602 					lda <@VarData
  5603 					sta :ztmp
  5604 					lda >@VarData
  5605 					ldy #@VarDataSize-1
  5606 					jmp @FreeMem
  5607 					els
  5608 45E6 60				rts						; ret
  5609 					eif
  5610 				.endl
  5611
  5612 45E7			.local	SET_BALL_SPEED					; PROCEDURE
  5613
  5614 				; optimize OK (service.pas), line = 1073
  5615
  5616 45E7 AC B9 A2 84 84 AC + 	mwy BALL :bp2
  5617 45F1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5618 45F3 B1 84			lda (:bp2),y
  5619 45F5 8D BF A2			sta SX
  5620 45F8 C8				iny
  5621 45F9 B1 84			lda (:bp2),y
  5622 45FB 8D C0 A2			sta SX+1
  5623
  5624 				; optimize OK (service.pas), line = 1074
  5625
  5626 45FE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5627 4600 B1 84			lda (:bp2),y
  5628 4602 8D C1 A2			sta SY
  5629 4605 C8				iny
  5630 4606 B1 84			lda (:bp2),y
  5631 4608 8D C2 A2			sta SY+1
  5632
  5633 				; optimize FAIL (1, service.pas), line = 1076
  5634
  5635 460B E8				inx
  5636 460C AD BD A2 95 96		mva SPEED :STACKORIGIN,x
  5637 4611 AD BE A2 95 A6		mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
  5638 4616 AD BF A2			lda SX
  5639 4619 85 8E			sta :ecx
  5640 461B 85 92			sta :ztmp8
  5641 461D AD C0 A2			lda SX+1
  5642 4620 85 8F			sta :ecx+1
  5643 4622 85 93			sta :ztmp9
  5644 4624 AD BF A2			lda SX
  5645 4627 85 86			sta :eax
  5646 4629 85 94			sta :ztmp10
  5647 462B AD C0 A2			lda SX+1
  5648 462E 85 87			sta :eax+1
  5649 4630 85 95			sta :ztmp11
  5650 					.ifdef fmulinit
  5651 					fmulu_16
  5652 					els
  5653 4632 20 28 23			imulCX
  5654 					eif
  5655 4635 A5 95			lda :ztmp11
  5656 4637 10 0D			bpl @+
  5657 4639 A5 88			lda :eax+2
  5658 463B 38 E5 92			sub :ztmp8
  5659 463E 85 88			sta :eax+2
  5660 4640 A5 89			lda :eax+3
  5661 4642 E5 93			sbc :ztmp9
  5662 4644 85 89			sta :eax+3
  5663 				@
  5664 4646 A5 93			lda :ztmp9
  5665 4648 10 0D			bpl @+
  5666 464A A5 88			lda :eax+2
  5667 464C 38 E5 94			sub :ztmp10
  5668 464F 85 88			sta :eax+2
  5669 4651 A5 89			lda :eax+3
  5670 4653 E5 95			sbc :ztmp11
  5671 4655 85 89			sta :eax+3
  5672 				@
  5673 4657 A5 86			lda :eax
  5674 4659 85 9F			sta :STACKORIGIN+9
  5675 465B A5 87			lda :eax+1
  5676 465D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5677 465F A5 88			lda :eax+2
  5678 4661 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5679 4663 A5 89			lda :eax+3
  5680 4665 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5681 4667 AD C1 A2			lda SY
  5682 466A 85 8E			sta :ecx
  5683 466C 85 92			sta :ztmp8
  5684 466E AD C2 A2			lda SY+1
  5685 4671 85 8F			sta :ecx+1
  5686 4673 85 93			sta :ztmp9
  5687 4675 AD C1 A2			lda SY
  5688 4678 85 86			sta :eax
  5689 467A 85 94			sta :ztmp10
  5690 467C AD C2 A2			lda SY+1
  5691 467F 85 87			sta :eax+1
  5692 4681 85 95			sta :ztmp11
  5693 					.ifdef fmulinit
  5694 					fmulu_16
  5695 					els
  5696 4683 20 28 23			imulCX
  5697 					eif
  5698 4686 A5 95			lda :ztmp11
  5699 4688 10 0D			bpl @+
  5700 468A A5 88			lda :eax+2
  5701 468C 38 E5 92			sub :ztmp8
  5702 468F 85 88			sta :eax+2
  5703 4691 A5 89			lda :eax+3
  5704 4693 E5 93			sbc :ztmp9
  5705 4695 85 89			sta :eax+3
  5706 				@
  5707 4697 A5 93			lda :ztmp9
  5708 4699 10 0D			bpl @+
  5709 469B A5 88			lda :eax+2
  5710 469D 38 E5 94			sub :ztmp10
  5711 46A0 85 88			sta :eax+2
  5712 46A2 A5 89			lda :eax+3
  5713 46A4 E5 95			sbc :ztmp11
  5714 46A6 85 89			sta :eax+3
  5715 				@
  5716 46A8 A5 9F			lda :STACKORIGIN+9
  5717 46AA 18 65 86			add :eax
  5718 46AD 8D 53 A0			sta SYSTEM.SQRT.@010185000.X
  5719 46B0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5720 46B2 65 87			adc :eax+1
  5721 46B4 8D 54 A0			sta SYSTEM.SQRT.@010185000.X+1
  5722 46B7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5723 46B9 65 88			adc :eax+2
  5724 46BB 8D 55 A0			sta SYSTEM.SQRT.@010185000.X+2
  5725 46BE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5726 46C0 65 89			adc :eax+3
  5727 46C2 8D 56 A0			sta SYSTEM.SQRT.@010185000.X+3
  5728 46C5 20 1C 2B			jsr SYSTEM.SQRT.@010185000
  5729 46C8 E8				inx
  5730 46C9 AD 57 A0 95 96		mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
  5731 46CE AD 58 A0 95 A6		mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5732 46D3 AD 59 A0 95 B6		mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5733 46D8 AD 5A A0 95 C6		mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5734 46DD 20 4C 21			jsr @expandToCARD1.SMALL
  5735 46E0 B5 95			lda :STACKORIGIN-1,x
  5736 46E2 85 8E			sta :FPMAN0
  5737 46E4 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5738 46E6 85 8F			sta :FPMAN1
  5739 46E8 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5740 46EA 85 90			sta :FPMAN2
  5741 46EC B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5742 46EE 85 91			sta :FPMAN3
  5743 46F0 20 C1 27			jsr @I2F
  5744 46F3 A5 8E			lda :FPMAN0
  5745 46F5 95 95			sta :STACKORIGIN-1,x
  5746 46F7 A5 8F			lda :FPMAN1
  5747 46F9 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5748 46FB A5 90			lda :FPMAN2
  5749 46FD 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5750 46FF A5 91			lda :FPMAN3
  5751 4701 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5752 4703 B5 96			lda :STACKORIGIN,x
  5753 4705 85 8A			sta :FP2MAN0
  5754 4707 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5755 4709 85 8B			sta :FP2MAN1
  5756 470B B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5757 470D 85 8C			sta :FP2MAN2
  5758 470F B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5759 4711 85 8D			sta :FP2MAN3
  5760 4713 B5 95			lda :STACKORIGIN-1,x
  5761 4715 85 86			sta :FP1MAN0
  5762 4717 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5763 4719 85 87			sta :FP1MAN1
  5764 471B B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5765 471D 85 88			sta :FP1MAN2
  5766 471F B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5767 4721 85 89			sta :FP1MAN3
  5768 4723 20 88 26			jsr @FDIV
  5769 4726 CA				dex
  5770 4727 A5 8E			lda :FPMAN0
  5771 4729 8D C3 A2			sta VM
  5772 472C A5 8F			lda :FPMAN1
  5773 472E 8D C4 A2			sta VM+1
  5774 4731 A5 90			lda :FPMAN2
  5775 4733 8D C5 A2			sta VM+2
  5776 4736 A5 91			lda :FPMAN3
  5777 4738 8D C6 A2			sta VM+3
  5778 473B CA				dex
  5779
  5780 				; optimize OK (service.pas), line = 1081
  5781
  5782 473C AD BF A2			lda SX
  5783 473F 85 8E			sta :FPMAN0
  5784 4741 A0 00			ldy #$00
  5785 4743 AD C0 A2			lda SX+1
  5786 4746 10 01			spl
  5787 4748 88				dey
  5788 4749 85 8F			sta :FPMAN1
  5789 474B 84 90			sty :FPMAN2
  5790 474D 84 91			sty :FPMAN3
  5791 474F 20 C1 27			jsr @I2F
  5792 4752 A5 8E			lda :FPMAN0
  5793 4754 85 86			sta :FP1MAN0
  5794 4756 A5 8F			lda :FPMAN1
  5795 4758 85 87			sta :FP1MAN1
  5796 475A A5 90			lda :FPMAN2
  5797 475C 85 88			sta :FP1MAN2
  5798 475E A5 91			lda :FPMAN3
  5799 4760 85 89			sta :FP1MAN3
  5800 4762 AD C3 A2			lda VM
  5801 4765 85 8A			sta :FP2MAN0
  5802 4767 AD C4 A2			lda VM+1
  5803 476A 85 8B			sta :FP2MAN1
  5804 476C AD C5 A2			lda VM+2
  5805 476F 85 8C			sta :FP2MAN2
  5806 4771 AD C6 A2			lda VM+3
  5807 4774 85 8D			sta :FP2MAN3
  5808 4776 20 E7 25			jsr @FMUL
  5809 4779 20 50 27			jsr @F2I
  5810 477C AC B9 A2 84 84 AC + 	mwy BALL :bp2
  5811 4786 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5812 4788 A5 8E			lda :FPMAN0
  5813 478A 91 84			sta (:bp2),y
  5814 478C C8				iny
  5815 478D A5 8F			lda :FPMAN1
  5816 478F 91 84			sta (:bp2),y
  5817
  5818 				; optimize OK (service.pas), line = 1082
  5819
  5820 4791 AD C1 A2			lda SY
  5821 4794 85 8E			sta :FPMAN0
  5822 4796 A0 00			ldy #$00
  5823 4798 AD C2 A2			lda SY+1
  5824 479B 10 01			spl
  5825 479D 88				dey
  5826 479E 85 8F			sta :FPMAN1
  5827 47A0 84 90			sty :FPMAN2
  5828 47A2 84 91			sty :FPMAN3
  5829 47A4 20 C1 27			jsr @I2F
  5830 47A7 A5 8E			lda :FPMAN0
  5831 47A9 85 86			sta :FP1MAN0
  5832 47AB A5 8F			lda :FPMAN1
  5833 47AD 85 87			sta :FP1MAN1
  5834 47AF A5 90			lda :FPMAN2
  5835 47B1 85 88			sta :FP1MAN2
  5836 47B3 A5 91			lda :FPMAN3
  5837 47B5 85 89			sta :FP1MAN3
  5838 47B7 AD C3 A2			lda VM
  5839 47BA 85 8A			sta :FP2MAN0
  5840 47BC AD C4 A2			lda VM+1
  5841 47BF 85 8B			sta :FP2MAN1
  5842 47C1 AD C5 A2			lda VM+2
  5843 47C4 85 8C			sta :FP2MAN2
  5844 47C6 AD C6 A2			lda VM+3
  5845 47C9 85 8D			sta :FP2MAN3
  5846 47CB 20 E7 25			jsr @FMUL
  5847 47CE 20 50 27			jsr @F2I
  5848 47D1 AC B9 A2 84 84 AC + 	mwy BALL :bp2
  5849 47DB A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5850 47DD A5 8E			lda :FPMAN0
  5851 47DF 91 84			sta (:bp2),y
  5852 47E1 C8				iny
  5853 47E2 A5 8F			lda :FPMAN1
  5854 47E4 91 84			sta (:bp2),y
  5855
  5856 				; ------------------------------------------------------------
  5857
  5858 = A2B9			BALL	= DATAORIGIN+$0271
  5859 = A048			BALL.X	= DATAORIGIN+$0000
  5860 = A04A			BALL.Y	= DATAORIGIN+$0002
  5861 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  5862 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  5863 = A050			BALL.OLDX	= DATAORIGIN+$0008
  5864 = A052			BALL.OLDY	= DATAORIGIN+$000A
  5865 = A054			BALL.SPEED	= DATAORIGIN+$000C
  5866 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  5867 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  5868 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  5869 = A05C			BALL.SBD	= DATAORIGIN+$0014
  5870 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  5871 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  5872 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  5873 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  5874 = A063			BALL.STM	= DATAORIGIN+$001B
  5875 = A2BD			SPEED	= DATAORIGIN+$0275
  5876 = A2BF			SX	= DATAORIGIN+$0277
  5877 = A2C1			SY	= DATAORIGIN+$0279
  5878 = A2C3			VM	= DATAORIGIN+$027B
  5879
  5880 = A2B9			@VarData	= BALL
  5881 = 000C			@VarDataSize	= 12
  5882
  5883 47E6			@exit
  5884 					.ifdef @new
  5885 					lda <@VarData
  5886 					sta :ztmp
  5887 					lda >@VarData
  5888 					ldy #@VarDataSize-1
  5889 					jmp @FreeMem
  5890 					els
  5891 47E6 60				rts						; ret
  5892 					eif
  5893 				.endl
  5894
  5895 47E7			.local	SET_BALL_DIRECTION				; PROCEDURE
  5896
  5897 				; optimize OK (service.pas), line = 1090
  5898
  5899 47E7 AD CB A2			lda ANGLE
  5900 47EA 85 8E			sta :FPMAN0
  5901 47EC A0 00			ldy #$00
  5902 47EE AD CC A2			lda ANGLE+1
  5903 47F1 10 01			spl
  5904 47F3 88				dey
  5905 47F4 85 8F			sta :FPMAN1
  5906 47F6 84 90			sty :FPMAN2
  5907 47F8 84 91			sty :FPMAN3
  5908 47FA 20 C1 27			jsr @I2F
  5909 47FD A5 8E			lda :FPMAN0
  5910 47FF 85 86			sta :FP1MAN0
  5911 4801 A5 8F			lda :FPMAN1
  5912 4803 85 87			sta :FP1MAN1
  5913 4805 A5 90			lda :FPMAN2
  5914 4807 85 88			sta :FP1MAN2
  5915 4809 A5 91			lda :FPMAN3
  5916 480B 85 89			sta :FP1MAN3
  5917 480D A9 35			lda #$35
  5918 480F 85 8A			sta :FP2MAN0
  5919 4811 A9 FA			lda #$FA
  5920 4813 85 8B			sta :FP2MAN1
  5921 4815 A9 8E			lda #$8E
  5922 4817 85 8C			sta :FP2MAN2
  5923 4819 A9 3C			lda #$3C
  5924 481B 85 8D			sta :FP2MAN3
  5925 481D 20 E7 25			jsr @FMUL
  5926 4820 A5 8E			lda :FPMAN0
  5927 4822 8D CD A2			sta W
  5928 4825 A5 8F			lda :FPMAN1
  5929 4827 8D CE A2			sta W+1
  5930 482A A5 90			lda :FPMAN2
  5931 482C 8D CF A2			sta W+2
  5932 482F A5 91			lda :FPMAN3
  5933 4831 8D D0 A2			sta W+3
  5934
  5935 				; optimize FAIL (1, service.pas), line = 1092
  5936
  5937 4834 E8				inx
  5938 4835 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5939 4839 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5940 483D AD CD A2			lda W
  5941 4840 8D 84 A0			sta SYSTEM.COS.@01018F000.X
  5942 4843 AD CE A2			lda W+1
  5943 4846 8D 85 A0			sta SYSTEM.COS.@01018F000.X+1
  5944 4849 AD CF A2			lda W+2
  5945 484C 8D 86 A0			sta SYSTEM.COS.@01018F000.X+2
  5946 484F AD D0 A2			lda W+3
  5947 4852 8D 87 A0			sta SYSTEM.COS.@01018F000.X+3
  5948 4855 20 65 35			jsr SYSTEM.COS.@01018F000
  5949 4858 E8				inx
  5950 4859 AD 88 A0 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  5951 485E AD 89 A0 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5952 4863 AD 8A A0 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5953 4868 AD 8B A0 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5954 486D A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5955 4871 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5956 4873 B5 95			lda :STACKORIGIN-1,x
  5957 4875 85 8E			sta :FPMAN0
  5958 4877 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5959 4879 85 8F			sta :FPMAN1
  5960 487B B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5961 487D 85 90			sta :FPMAN2
  5962 487F B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5963 4881 85 91			sta :FPMAN3
  5964 4883 20 C1 27			jsr @I2F
  5965 4886 A5 8E			lda :FPMAN0
  5966 4888 95 95			sta :STACKORIGIN-1,x
  5967 488A A5 8F			lda :FPMAN1
  5968 488C 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5969 488E A5 90			lda :FPMAN2
  5970 4890 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5971 4892 A5 91			lda :FPMAN3
  5972 4894 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5973 4896 B5 96			lda :STACKORIGIN,x
  5974 4898 85 8A			sta :FP2MAN0
  5975 489A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5976 489C 85 8B			sta :FP2MAN1
  5977 489E B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5978 48A0 85 8C			sta :FP2MAN2
  5979 48A2 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5980 48A4 85 8D			sta :FP2MAN3
  5981 48A6 B5 95			lda :STACKORIGIN-1,x
  5982 48A8 85 86			sta :FP1MAN0
  5983 48AA B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5984 48AC 85 87			sta :FP1MAN1
  5985 48AE B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5986 48B0 85 88			sta :FP1MAN2
  5987 48B2 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5988 48B4 85 89			sta :FP1MAN3
  5989 48B6 20 E7 25			jsr @FMUL
  5990 48B9 CA				dex
  5991 48BA A5 8E			lda :FPMAN0
  5992 48BC 85 8E			sta :FPMAN0
  5993 48BE A5 8F			lda :FPMAN1
  5994 48C0 85 8F			sta :FPMAN1
  5995 48C2 A5 90			lda :FPMAN2
  5996 48C4 85 90			sta :FPMAN2
  5997 48C6 A5 91			lda :FPMAN3
  5998 48C8 85 91			sta :FPMAN3
  5999 48CA 20 50 27			jsr @F2I
  6000 48CD A5 8E			lda :FPMAN0
  6001 48CF 95 96			sta :STACKORIGIN,x
  6002 48D1 A5 8F			lda :FPMAN1
  6003 48D3 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6004 48D5 A5 90			lda :FPMAN2
  6005 48D7 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6006 48D9 A5 91			lda :FPMAN3
  6007 48DB 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6008 48DD AC C7 A2 84 84 AC + 	mwy BALL :bp2
  6009 48E7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6010 48E9 B5 96			lda :STACKORIGIN,x
  6011 48EB 91 84			sta (:bp2),y
  6012 48ED C8				iny
  6013 48EE B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6014 48F0 91 84			sta (:bp2),y
  6015
  6016 				; optimize FAIL (1, service.pas), line = 1093
  6017
  6018 48F2 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6019 48F6 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6020 48FA AD CD A2			lda W
  6021 48FD 8D 7C A0			sta SYSTEM.SIN.@01018F000.X
  6022 4900 AD CE A2			lda W+1
  6023 4903 8D 7D A0			sta SYSTEM.SIN.@01018F000.X+1
  6024 4906 AD CF A2			lda W+2
  6025 4909 8D 7E A0			sta SYSTEM.SIN.@01018F000.X+2
  6026 490C AD D0 A2			lda W+3
  6027 490F 8D 7F A0			sta SYSTEM.SIN.@01018F000.X+3
  6028 4912 20 2C 35			jsr SYSTEM.SIN.@01018F000
  6029 4915 E8				inx
  6030 4916 AD 80 A0 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  6031 491B AD 81 A0 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6032 4920 AD 82 A0 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6033 4925 AD 83 A0 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6034 492A A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6035 492E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6036 4930 B5 95			lda :STACKORIGIN-1,x
  6037 4932 85 8E			sta :FPMAN0
  6038 4934 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6039 4936 85 8F			sta :FPMAN1
  6040 4938 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6041 493A 85 90			sta :FPMAN2
  6042 493C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6043 493E 85 91			sta :FPMAN3
  6044 4940 20 C1 27			jsr @I2F
  6045 4943 A5 8E			lda :FPMAN0
  6046 4945 95 95			sta :STACKORIGIN-1,x
  6047 4947 A5 8F			lda :FPMAN1
  6048 4949 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6049 494B A5 90			lda :FPMAN2
  6050 494D 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6051 494F A5 91			lda :FPMAN3
  6052 4951 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6053 4953 B5 96			lda :STACKORIGIN,x
  6054 4955 85 8A			sta :FP2MAN0
  6055 4957 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6056 4959 85 8B			sta :FP2MAN1
  6057 495B B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6058 495D 85 8C			sta :FP2MAN2
  6059 495F B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6060 4961 85 8D			sta :FP2MAN3
  6061 4963 B5 95			lda :STACKORIGIN-1,x
  6062 4965 85 86			sta :FP1MAN0
  6063 4967 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6064 4969 85 87			sta :FP1MAN1
  6065 496B B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6066 496D 85 88			sta :FP1MAN2
  6067 496F B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6068 4971 85 89			sta :FP1MAN3
  6069 4973 20 E7 25			jsr @FMUL
  6070 4976 CA				dex
  6071 4977 A5 8E			lda :FPMAN0
  6072 4979 85 8E			sta :FPMAN0
  6073 497B A5 8F			lda :FPMAN1
  6074 497D 85 8F			sta :FPMAN1
  6075 497F A5 90			lda :FPMAN2
  6076 4981 85 90			sta :FPMAN2
  6077 4983 A5 91			lda :FPMAN3
  6078 4985 85 91			sta :FPMAN3
  6079 4987 20 50 27			jsr @F2I
  6080 498A A5 8E			lda :FPMAN0
  6081 498C 95 96			sta :STACKORIGIN,x
  6082 498E A5 8F			lda :FPMAN1
  6083 4990 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6084 4992 A5 90			lda :FPMAN2
  6085 4994 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6086 4996 A5 91			lda :FPMAN3
  6087 4998 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6088 499A A9 00			lda #$00
  6089 499C 38 F5 96			sub :STACKORIGIN,x
  6090 499F 95 96			sta :STACKORIGIN,x
  6091 49A1 A9 00			lda #$00
  6092 49A3 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6093 49A5 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6094 49A7 A9 00			lda #$00
  6095 49A9 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6096 49AB 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6097 49AD A9 00			lda #$00
  6098 49AF F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6099 49B1 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6100 49B3 AC C7 A2 84 84 AC + 	mwy BALL :bp2
  6101 49BD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6102 49BF B5 96			lda :STACKORIGIN,x
  6103 49C1 91 84			sta (:bp2),y
  6104 49C3 C8				iny
  6105 49C4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6106 49C6 91 84			sta (:bp2),y
  6107 49C8 CA				dex
  6108
  6109 				; ------------------------------------------------------------
  6110
  6111 = A2C7			BALL	= DATAORIGIN+$027F
  6112 = A048			BALL.X	= DATAORIGIN+$0000
  6113 = A04A			BALL.Y	= DATAORIGIN+$0002
  6114 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  6115 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  6116 = A050			BALL.OLDX	= DATAORIGIN+$0008
  6117 = A052			BALL.OLDY	= DATAORIGIN+$000A
  6118 = A054			BALL.SPEED	= DATAORIGIN+$000C
  6119 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  6120 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  6121 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  6122 = A05C			BALL.SBD	= DATAORIGIN+$0014
  6123 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  6124 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  6125 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  6126 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  6127 = A063			BALL.STM	= DATAORIGIN+$001B
  6128 = A2CB			ANGLE	= DATAORIGIN+$0283
  6129 = A2CD			W	= DATAORIGIN+$0285
  6130
  6131 = A2C7			@VarData	= BALL
  6132 = 0008			@VarDataSize	= 8
  6133
  6134 49C9			@exit
  6135 					.ifdef @new
  6136 					lda <@VarData
  6137 					sta :ztmp
  6138 					lda >@VarData
  6139 					ldy #@VarDataSize-1
  6140 					jmp @FreeMem
  6141 					els
  6142 49C9 60				rts						; ret
  6143 					eif
  6144 				.endl
  6145
  6146 49CA			.local	GET_BALL_DIRECTION				; FUNCTION
  6147
  6148 				; optimize OK (service.pas), line = 1101
  6149
  6150 49CA AC D1 A2 84 84 AC + 	mwy BALL :bp2
  6151 49D4 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6152 49D6 B1 84			lda (:bp2),y
  6153 49D8 88				dey
  6154 49D9 11 84			ora (:bp2),y
  6155 49DB D0 75			jne l_0BED
  6156 49DD E8				inx
  6157 49DE A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6158 49E2 E8				inx
  6159 49E3 AC D1 A2 84 84 AC + 	mwy BALL :bp2
  6160 49ED A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6161 49EF B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6162 49F3 C8				iny
  6163 49F4 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6164 49F8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6165 49FA B1 84			lda (:bp2),y
  6166 49FC 85 8A			sta SYSTEM.ABS.@010184000.X
  6167 49FE C8				iny
  6168 49FF B1 84			lda (:bp2),y
  6169 4A01 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6170 4A03 20 EE 2A			jsr SYSTEM.ABS.@010184000
  6171 4A06 E8				inx
  6172 4A07 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6173 4A09 85 8E			sta @SMALLINT.DIV.B
  6174 4A0B A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6175 4A0D 85 8F			sta @SMALLINT.DIV.B+1
  6176 4A0F B5 95			lda :STACKORIGIN-1,x
  6177 4A11 85 86			sta @SMALLINT.DIV.A
  6178 4A13 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6179 4A15 85 87			sta @SMALLINT.DIV.A+1
  6180 4A17 20 50 22			jsr @SMALLINT.DIV
  6181 4A1A A5 86			lda :eax
  6182 4A1C 95 95			sta :STACKORIGIN-1,x
  6183 4A1E A5 87			lda :eax+1
  6184 4A20 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6185 4A22 CA				dex
  6186 4A23 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6187 4A27 20 28 22			jsr mulSMALLINT
  6188 4A2A CA				dex
  6189 4A2B A9 00			lda #$00
  6190 4A2D 38 F5 96			sub :STACKORIGIN,x
  6191 4A30 95 96			sta :STACKORIGIN,x
  6192 4A32 A9 00			lda #$00
  6193 4A34 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6194 4A36 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6195 4A38 A9 00			lda #$00
  6196 4A3A F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6197 4A3C 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6198 4A3E A9 00			lda #$00
  6199 4A40 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6200 4A42 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6201 4A44 B5 96			lda :STACKORIGIN,x
  6202 4A46 8D D7 A2			sta W
  6203 4A49 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6204 4A4B 8D D8 A2			sta W+1
  6205 4A4E CA				dex
  6206 4A4F 4C DB 4B			jmp l_0C09
  6207 4A52			l_0BED
  6208
  6209 				; optimize OK (service.pas), line = 1107
  6210
  6211 4A52 AC D1 A2 84 84 AC + 	mwy BALL :bp2
  6212 4A5C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6213 4A5E B1 84			lda (:bp2),y
  6214 4A60 85 9F			sta :STACKORIGIN+9
  6215 4A62 C8				iny
  6216 4A63 B1 84			lda (:bp2),y
  6217 4A65 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6218 4A67 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6219 4A69 B1 84			lda (:bp2),y
  6220 4A6B 85 8E			sta :FPMAN0
  6221 4A6D C8				iny
  6222 4A6E B1 84			lda (:bp2),y
  6223 4A70 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6224 4A72 A0 00			ldy #$00
  6225 4A74 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6226 4A76 10 01			spl
  6227 4A78 88				dey
  6228 4A79 85 8F			sta :FPMAN1
  6229 4A7B 84 90			sty :FPMAN2
  6230 4A7D 84 91			sty :FPMAN3
  6231 4A7F 20 C1 27			jsr @I2F
  6232 4A82 A5 8E			lda :FPMAN0
  6233 4A84 85 A0			sta :STACKORIGIN+10
  6234 4A86 A5 8F			lda :FPMAN1
  6235 4A88 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6236 4A8A A5 90			lda :FPMAN2
  6237 4A8C 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6238 4A8E A5 91			lda :FPMAN3
  6239 4A90 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6240 4A92 A0 00			ldy #$00
  6241 4A94 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6242 4A96 10 01			spl
  6243 4A98 88				dey
  6244 4A99 85 8F			sta :FPMAN1
  6245 4A9B 84 90			sty :FPMAN2
  6246 4A9D 84 91			sty :FPMAN3
  6247 4A9F A5 9F			lda :STACKORIGIN+9
  6248 4AA1 85 8E			sta :FPMAN0
  6249 4AA3 20 C1 27			jsr @I2F
  6250 4AA6 A5 8E			lda :FPMAN0
  6251 4AA8 85 86			sta :FP1MAN0
  6252 4AAA A5 8F			lda :FPMAN1
  6253 4AAC 85 87			sta :FP1MAN1
  6254 4AAE A5 90			lda :FPMAN2
  6255 4AB0 85 88			sta :FP1MAN2
  6256 4AB2 A5 91			lda :FPMAN3
  6257 4AB4 85 89			sta :FP1MAN3
  6258 4AB6 A5 A0			lda :STACKORIGIN+10
  6259 4AB8 85 8A			sta :FP2MAN0
  6260 4ABA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6261 4ABC 85 8B			sta :FP2MAN1
  6262 4ABE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6263 4AC0 85 8C			sta :FP2MAN2
  6264 4AC2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6265 4AC4 85 8D			sta :FP2MAN3
  6266 4AC6 20 88 26			jsr @FDIV
  6267 4AC9 A5 8E			lda :FPMAN0
  6268 4ACB 8D 35 A2			sta F_HLP
  6269 4ACE A5 8F			lda :FPMAN1
  6270 4AD0 8D 36 A2			sta F_HLP+1
  6271 4AD3 A5 90			lda :FPMAN2
  6272 4AD5 8D 37 A2			sta F_HLP+2
  6273 4AD8 A5 91			lda :FPMAN3
  6274 4ADA 49 80			eor #$80
  6275 4ADC 8D 38 A2			sta F_HLP+3
  6276
  6277 				; optimize OK (service.pas), line = 1109
  6278
  6279 4ADF AD 35 A2			lda F_HLP
  6280 4AE2 8D 61 A0			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6281 4AE5 AD 36 A2			lda F_HLP+1
  6282 4AE8 8D 62 A0			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6283 4AEB AD 37 A2			lda F_HLP+2
  6284 4AEE 8D 63 A0			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6285 4AF1 AD 38 A2			lda F_HLP+3
  6286 4AF4 8D 64 A0			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6287 4AF7 20 B1 2D			jsr SYSTEM.ARCTAN.@01018F000
  6288 4AFA E8				inx
  6289 4AFB E8				inx
  6290 4AFC A9 00			lda #$00
  6291 4AFE 85 8A			sta :FP2MAN0
  6292 4B00 A9 00			lda #$00
  6293 4B02 85 8B			sta :FP2MAN1
  6294 4B04 A9 34			lda #$34
  6295 4B06 85 8C			sta :FP2MAN2
  6296 4B08 A9 43			lda #$43
  6297 4B0A 85 8D			sta :FP2MAN3
  6298 4B0C AD 65 A0			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6299 4B0F 85 86			sta :FP1MAN0
  6300 4B11 AD 66 A0			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6301 4B14 85 87			sta :FP1MAN1
  6302 4B16 AD 67 A0			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6303 4B19 85 88			sta :FP1MAN2
  6304 4B1B AD 68 A0			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6305 4B1E 85 89			sta :FP1MAN3
  6306 4B20 20 E7 25			jsr @FMUL
  6307 4B23 A5 8E			lda :FPMAN0
  6308 4B25 95 95			sta :STACKORIGIN-1,x
  6309 4B27 A5 8F			lda :FPMAN1
  6310 4B29 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6311 4B2B A5 90			lda :FPMAN2
  6312 4B2D 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6313 4B2F A5 91			lda :FPMAN3
  6314 4B31 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6315 4B33 A9 DB			lda #$DB
  6316 4B35 85 8A			sta :FP2MAN0
  6317 4B37 A9 0F			lda #$0F
  6318 4B39 85 8B			sta :FP2MAN1
  6319 4B3B A9 49			lda #$49
  6320 4B3D 85 8C			sta :FP2MAN2
  6321 4B3F A9 40			lda #$40
  6322 4B41 85 8D			sta :FP2MAN3
  6323 4B43 B5 95			lda :STACKORIGIN-1,x
  6324 4B45 85 86			sta :FP1MAN0
  6325 4B47 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6326 4B49 85 87			sta :FP1MAN1
  6327 4B4B B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6328 4B4D 85 88			sta :FP1MAN2
  6329 4B4F B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6330 4B51 85 89			sta :FP1MAN3
  6331 4B53 20 88 26			jsr @FDIV
  6332 4B56 CA				dex
  6333 4B57 A5 8E			lda :FPMAN0
  6334 4B59 8D 35 A2			sta F_HLP
  6335 4B5C A5 8F			lda :FPMAN1
  6336 4B5E 8D 36 A2			sta F_HLP+1
  6337 4B61 A5 90			lda :FPMAN2
  6338 4B63 8D 37 A2			sta F_HLP+2
  6339 4B66 A5 91			lda :FPMAN3
  6340 4B68 8D 38 A2			sta F_HLP+3
  6341 4B6B CA				dex
  6342
  6343 				; optimize OK (service.pas), line = 1111
  6344
  6345 4B6C AD 35 A2			lda F_HLP
  6346 4B6F 85 8E			sta :FPMAN0
  6347 4B71 AD 36 A2			lda F_HLP+1
  6348 4B74 85 8F			sta :FPMAN1
  6349 4B76 AD 37 A2			lda F_HLP+2
  6350 4B79 85 90			sta :FPMAN2
  6351 4B7B AD 38 A2			lda F_HLP+3
  6352 4B7E 85 91			sta :FPMAN3
  6353 4B80 20 50 27			jsr @F2I
  6354 4B83 A5 8E			lda :FPMAN0
  6355 4B85 8D D7 A2			sta W
  6356 4B88 A5 8F			lda :FPMAN1
  6357 4B8A 8D D8 A2			sta W+1
  6358
  6359 				; optimize OK (service.pas), line = 1113
  6360
  6361 4B8D AC D1 A2 84 84 AC + 	mwy BALL :bp2
  6362 4B97 A0 00			ldy #$00
  6363 4B99 B1 84			lda (:bp2),y
  6364 4B9B 10 0E			jpl l_0C38
  6365 4B9D AD D7 A2			lda W
  6366 4BA0 18 69 B4			add #$B4
  6367 4BA3 8D D7 A2			sta W
  6368 4BA6 90 03			scc
  6369 4BA8 EE D8 A2			inc W+1
  6370 4BAB			l_0C38
  6371
  6372 				; optimize OK (service.pas), line = 1115
  6373
  6374 4BAB AD D7 A2			lda W
  6375 4BAE 18 69 68			add #$68
  6376 4BB1 8D D7 A2			sta W
  6377 4BB4 AD D8 A2			lda W+1
  6378 4BB7 69 01			adc #$01
  6379 4BB9 8D D8 A2			sta W+1
  6380
  6381 				; optimize OK (service.pas), line = 1116
  6382
  6383 4BBC A9 68			lda #$68
  6384 4BBE 85 8E			sta @SMALLINT.MOD.B
  6385 4BC0 A9 01			lda #$01
  6386 4BC2 85 8F			sta @SMALLINT.MOD.B+1
  6387 4BC4 AD D7 A2			lda W
  6388 4BC7 85 86			sta @SMALLINT.MOD.A
  6389 4BC9 AD D8 A2			lda W+1
  6390 4BCC 85 87			sta @SMALLINT.MOD.A+1
  6391 4BCE 20 6D 22			jsr @SMALLINT.MOD
  6392 4BD1 A5 92			lda @SMALLINT.MOD.RESULT
  6393 4BD3 8D D7 A2			sta W
  6394 4BD6 A5 93			lda @SMALLINT.MOD.RESULT+1
  6395 4BD8 8D D8 A2			sta W+1
  6396 4BDB			l_0C09
  6397
  6398 				; optimize OK (service.pas), line = 1119
  6399
  6400 4BDB AD D7 A2			lda W
  6401 4BDE 8D D5 A2			sta RESULT
  6402 4BE1 AD D8 A2			lda W+1
  6403 4BE4 8D D6 A2			sta RESULT+1
  6404 4BE7			@exit
  6405
  6406 				; ------------------------------------------------------------
  6407
  6408 = A2D1			BALL	= DATAORIGIN+$0289
  6409 = A048			BALL.X	= DATAORIGIN+$0000
  6410 = A04A			BALL.Y	= DATAORIGIN+$0002
  6411 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  6412 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  6413 = A050			BALL.OLDX	= DATAORIGIN+$0008
  6414 = A052			BALL.OLDY	= DATAORIGIN+$000A
  6415 = A054			BALL.SPEED	= DATAORIGIN+$000C
  6416 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  6417 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  6418 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  6419 = A05C			BALL.SBD	= DATAORIGIN+$0014
  6420 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  6421 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  6422 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  6423 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  6424 = A063			BALL.STM	= DATAORIGIN+$001B
  6425 = A2D5			RESULT	= DATAORIGIN+$028D
  6426 = A2D7			W	= DATAORIGIN+$028F
  6427
  6428 = A2D1			@VarData	= BALL
  6429 = 0004			@VarDataSize	= 4
  6430
  6431 4BE7 60				rts						; ret
  6432 				.endl
  6433
  6434 4BE8			.local	START_BALL					; PROCEDURE
  6435
  6436 				; optimize OK (service.pas), line = 1128
  6437
  6438 4BE8 AC D9 A2 84 84 AC + 	mwy BALL :bp2
  6439 4BF2 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6440 4BF4 AD B4 A1			lda VAUS.X
  6441 4BF7 18 71 84			add (:bp2),y
  6442 4BFA 85 9F			sta :STACKORIGIN+9
  6443 4BFC C8				iny
  6444 4BFD A9 00			lda #$00
  6445 4BFF 71 84			adc (:bp2),y
  6446 4C01 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6447 4C03 A0 00			ldy #BALL.X-DATAORIGIN
  6448 4C05 A5 9F			lda :STACKORIGIN+9
  6449 4C07 91 84			sta (:bp2),y
  6450 4C09 C8				iny
  6451 4C0A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6452 4C0C 91 84			sta (:bp2),y
  6453
  6454 				; optimize OK (service.pas), line = 1134
  6455
  6456 4C0E A0 02			ldy #BALL.Y-DATAORIGIN
  6457 4C10 AD B5 A1			lda VAUS.Y
  6458 4C13 38 E9 03			sub #$03
  6459 4C16 91 84			sta (:bp2),y
  6460 4C18 C8				iny
  6461 4C19 A9 00			lda #$00
  6462 4C1B E9 00			sbc #$00
  6463 4C1D 91 84			sta (:bp2),y
  6464
  6465 				; optimize OK (service.pas), line = 1139
  6466
  6467 4C1F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6468 4C21 A9 00			lda #$00
  6469 4C23 91 84			sta (:bp2),y
  6470 4C25 C8				iny
  6471 4C26 91 84			sta (:bp2),y
  6472
  6473 				; optimize OK (service.pas), line = 1140
  6474
  6475 4C28 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6476 4C2A 91 84			sta (:bp2),y
  6477 4C2C C8				iny
  6478 4C2D 91 84			sta (:bp2),y
  6479
  6480 				; optimize OK (service.pas), line = 1142
  6481
  6482 4C2F A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6483 4C31 A9 01			lda #$01
  6484 4C33 91 84			sta (:bp2),y
  6485
  6486 				; optimize OK (service.pas), line = 1144
  6487
  6488 4C35 A0 14			ldy #BALL.SBD-DATAORIGIN
  6489 4C37 A9 00			lda #$00
  6490 4C39 91 84			sta (:bp2),y
  6491 4C3B C8				iny
  6492 4C3C 91 84			sta (:bp2),y
  6493
  6494 				; optimize OK (service.pas), line = 1145
  6495
  6496 4C3E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6497 4C40 91 84			sta (:bp2),y
  6498
  6499 				; ------------------------------------------------------------
  6500
  6501 = A2D9			BALL	= DATAORIGIN+$0291
  6502 = A048			BALL.X	= DATAORIGIN+$0000
  6503 = A04A			BALL.Y	= DATAORIGIN+$0002
  6504 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  6505 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  6506 = A050			BALL.OLDX	= DATAORIGIN+$0008
  6507 = A052			BALL.OLDY	= DATAORIGIN+$000A
  6508 = A054			BALL.SPEED	= DATAORIGIN+$000C
  6509 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  6510 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  6511 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  6512 = A05C			BALL.SBD	= DATAORIGIN+$0014
  6513 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  6514 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  6515 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  6516 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  6517 = A063			BALL.STM	= DATAORIGIN+$001B
  6518
  6519 = A2D9			@VarData	= BALL
  6520 = 0002			@VarDataSize	= 2
  6521
  6522 4C42			@exit
  6523 					.ifdef @new
  6524 					lda <@VarData
  6525 					sta :ztmp
  6526 					lda >@VarData
  6527 					ldy #@VarDataSize-1
  6528 					jmp @FreeMem
  6529 					els
  6530 4C42 60				rts						; ret
  6531 					eif
  6532 				.endl
  6533
  6534 4C43			.local	BALL_SPEED					; FUNCTION
  6535
  6536 				; ------------------------------------------------------------
  6537
  6538 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6539 				; as Pointer
  6540 4C43 B5 96			lda :STACKORIGIN,x
  6541 4C45 85 84			sta :bp2
  6542 4C47 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6543 4C49 85 85			sta :bp2+1
  6544 4C4B A0 1B			ldy #$1B
  6545 4C4D B1 84 99 DD A2 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6546 4C55 CA				dex
  6547 4C56			@main
  6548
  6549 				; optimize OK (service.pas), line = 1155
  6550
  6551 4C56 AD ED A2			lda BALL.SPEEDX
  6552 4C59 85 8E			sta :ecx
  6553 4C5B 85 92			sta :ztmp8
  6554 4C5D AD EE A2			lda BALL.SPEEDX+1
  6555 4C60 85 8F			sta :ecx+1
  6556 4C62 85 93			sta :ztmp9
  6557 4C64 AD ED A2			lda BALL.SPEEDX
  6558 4C67 85 86			sta :eax
  6559 4C69 85 94			sta :ztmp10
  6560 4C6B AD EE A2			lda BALL.SPEEDX+1
  6561 4C6E 85 87			sta :eax+1
  6562 4C70 85 95			sta :ztmp11
  6563 					.ifdef fmulinit
  6564 					fmulu_16
  6565 					els
  6566 4C72 20 28 23			imulCX
  6567 					eif
  6568 4C75 A5 95			lda :ztmp11
  6569 4C77 10 0D			bpl @+
  6570 4C79 A5 88			lda :eax+2
  6571 4C7B 38 E5 92			sub :ztmp8
  6572 4C7E 85 88			sta :eax+2
  6573 4C80 A5 89			lda :eax+3
  6574 4C82 E5 93			sbc :ztmp9
  6575 4C84 85 89			sta :eax+3
  6576 				@
  6577 4C86 A5 93			lda :ztmp9
  6578 4C88 10 0D			bpl @+
  6579 4C8A A5 88			lda :eax+2
  6580 4C8C 38 E5 94			sub :ztmp10
  6581 4C8F 85 88			sta :eax+2
  6582 4C91 A5 89			lda :eax+3
  6583 4C93 E5 95			sbc :ztmp11
  6584 4C95 85 89			sta :eax+3
  6585 				@
  6586 4C97 A5 86			lda :eax
  6587 4C99 85 9F			sta :STACKORIGIN+9
  6588 4C9B A5 87			lda :eax+1
  6589 4C9D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6590 4C9F A5 88			lda :eax+2
  6591 4CA1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6592 4CA3 A5 89			lda :eax+3
  6593 4CA5 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6594 4CA7 AD EF A2			lda BALL.SPEEDY
  6595 4CAA 85 8E			sta :ecx
  6596 4CAC 85 92			sta :ztmp8
  6597 4CAE AD F0 A2			lda BALL.SPEEDY+1
  6598 4CB1 85 8F			sta :ecx+1
  6599 4CB3 85 93			sta :ztmp9
  6600 4CB5 AD EF A2			lda BALL.SPEEDY
  6601 4CB8 85 86			sta :eax
  6602 4CBA 85 94			sta :ztmp10
  6603 4CBC AD F0 A2			lda BALL.SPEEDY+1
  6604 4CBF 85 87			sta :eax+1
  6605 4CC1 85 95			sta :ztmp11
  6606 					.ifdef fmulinit
  6607 					fmulu_16
  6608 					els
  6609 4CC3 20 28 23			imulCX
  6610 					eif
  6611 4CC6 A5 95			lda :ztmp11
  6612 4CC8 10 0D			bpl @+
  6613 4CCA A5 88			lda :eax+2
  6614 4CCC 38 E5 92			sub :ztmp8
  6615 4CCF 85 88			sta :eax+2
  6616 4CD1 A5 89			lda :eax+3
  6617 4CD3 E5 93			sbc :ztmp9
  6618 4CD5 85 89			sta :eax+3
  6619 				@
  6620 4CD7 A5 93			lda :ztmp9
  6621 4CD9 10 0D			bpl @+
  6622 4CDB A5 88			lda :eax+2
  6623 4CDD 38 E5 94			sub :ztmp10
  6624 4CE0 85 88			sta :eax+2
  6625 4CE2 A5 89			lda :eax+3
  6626 4CE4 E5 95			sbc :ztmp11
  6627 4CE6 85 89			sta :eax+3
  6628 				@
  6629 4CE8 A5 9F			lda :STACKORIGIN+9
  6630 4CEA 18 65 86			add :eax
  6631 4CED 8D FB A2			sta I
  6632 4CF0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6633 4CF2 65 87			adc :eax+1
  6634 4CF4 8D FC A2			sta I+1
  6635 4CF7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6636 4CF9 65 88			adc :eax+2
  6637 4CFB 8D FD A2			sta I+2
  6638 4CFE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6639 4D00 65 89			adc :eax+3
  6640 4D02 8D FE A2			sta I+3
  6641
  6642 				; optimize OK (service.pas), line = 1157
  6643
  6644 4D05 AD FB A2			lda I
  6645 4D08 8D 53 A0			sta SYSTEM.SQRT.@010185000.X
  6646 4D0B AD FC A2			lda I+1
  6647 4D0E 8D 54 A0			sta SYSTEM.SQRT.@010185000.X+1
  6648 4D11 AD FD A2			lda I+2
  6649 4D14 8D 55 A0			sta SYSTEM.SQRT.@010185000.X+2
  6650 4D17 AD FE A2			lda I+3
  6651 4D1A 8D 56 A0			sta SYSTEM.SQRT.@010185000.X+3
  6652 4D1D 20 1C 2B			jsr SYSTEM.SQRT.@010185000
  6653 4D20 AD 57 A0			lda SYSTEM.SQRT.@010185000.RESULT
  6654 4D23 8D 35 A2			sta F_HLP
  6655 4D26 AD 58 A0			lda SYSTEM.SQRT.@010185000.RESULT+1
  6656 4D29 8D 36 A2			sta F_HLP+1
  6657 4D2C AD 59 A0			lda SYSTEM.SQRT.@010185000.RESULT+2
  6658 4D2F 8D 37 A2			sta F_HLP+2
  6659 4D32 AD 5A A0			lda SYSTEM.SQRT.@010185000.RESULT+3
  6660 4D35 8D 38 A2			sta F_HLP+3
  6661
  6662 				; optimize OK (service.pas), line = 1159
  6663
  6664 4D38 AD 35 A2			lda F_HLP
  6665 4D3B 85 8E			sta :FPMAN0
  6666 4D3D AD 36 A2			lda F_HLP+1
  6667 4D40 85 8F			sta :FPMAN1
  6668 4D42 AD 37 A2			lda F_HLP+2
  6669 4D45 85 90			sta :FPMAN2
  6670 4D47 AD 38 A2			lda F_HLP+3
  6671 4D4A 85 91			sta :FPMAN3
  6672 4D4C 20 50 27			jsr @F2I
  6673 4D4F A5 8E			lda :FPMAN0
  6674 4D51 8D F9 A2			sta RESULT
  6675 4D54 A5 8F			lda :FPMAN1
  6676 4D56 8D FA A2			sta RESULT+1
  6677 4D59			@exit
  6678
  6679 				; ------------------------------------------------------------
  6680
  6681 = A2DD			adr.BALL	= DATAORIGIN+$0295	; [28] RECORD
  6682 4D59			.var BALL	= adr.BALL .word
  6683 = A2DD			BALL.X	= DATAORIGIN+$0295
  6684 = A2DF			BALL.Y	= DATAORIGIN+$0297
  6685 = A2E1			BALL.FINEX	= DATAORIGIN+$0299
  6686 = A2E3			BALL.FINEY	= DATAORIGIN+$029B
  6687 = A2E5			BALL.OLDX	= DATAORIGIN+$029D
  6688 = A2E7			BALL.OLDY	= DATAORIGIN+$029F
  6689 = A2E9			BALL.SPEED	= DATAORIGIN+$02A1
  6690 = A2EB			BALL.FINESPEED	= DATAORIGIN+$02A3
  6691 = A2ED			BALL.SPEEDX	= DATAORIGIN+$02A5
  6692 = A2EF			BALL.SPEEDY	= DATAORIGIN+$02A7
  6693 = A2F1			BALL.SBD	= DATAORIGIN+$02A9
  6694 = A2F3			BALL.BRWHIT	= DATAORIGIN+$02AB
  6695 = A2F4			BALL.INPLAY	= DATAORIGIN+$02AC
  6696 = A2F5			BALL.LAUNCH	= DATAORIGIN+$02AD
  6697 = A2F6			BALL.ONVAUS	= DATAORIGIN+$02AE
  6698 = A2F8			BALL.STM	= DATAORIGIN+$02B0
  6699 = A2F9			RESULT	= DATAORIGIN+$02B1
  6700 = A2FB			I	= DATAORIGIN+$02B3
  6701
  6702 = A2DD			@VarData	= BALL.X
  6703 = 0020			@VarDataSize	= 32
  6704
  6705 4D59 60				rts						; ret
  6706 = 4D5A DD A2		BALL
  6706 				.endl
  6707
  6708 4D5C			.local	MOVE_BALL					; PROCEDURE
  6709
  6710 				; optimize OK (service.pas), line = 1175
  6711
  6712 4D5C AC FF A2 84 84 AC + 	mwy BALL :bp2
  6713 4D66 A0 00			ldy #BALL.X-DATAORIGIN
  6714 4D68 B1 84			lda (:bp2),y
  6715 4D6A C8				iny
  6716 4D6B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6717 4D6D A9 00			lda #$00
  6718 4D6F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6719 4D71 18 71 84			add (:bp2),y
  6720 4D74 85 9F			sta :STACKORIGIN+9
  6721 4D76 C8				iny
  6722 4D77 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6723 4D79 71 84			adc (:bp2),y
  6724 4D7B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6725 4D7D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6726 4D7F A5 9F			lda :STACKORIGIN+9
  6727 4D81 18 71 84			add (:bp2),y
  6728 4D84 8D 06 A3			sta X
  6729 4D87 C8				iny
  6730 4D88 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6731 4D8A 71 84			adc (:bp2),y
  6732 4D8C 8D 07 A3			sta X+1
  6733
  6734 				; optimize OK (service.pas), line = 1176
  6735
  6736 4D8F A0 02			ldy #BALL.Y-DATAORIGIN
  6737 4D91 B1 84			lda (:bp2),y
  6738 4D93 C8				iny
  6739 4D94 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6740 4D96 A9 00			lda #$00
  6741 4D98 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6742 4D9A 18 71 84			add (:bp2),y
  6743 4D9D 85 9F			sta :STACKORIGIN+9
  6744 4D9F C8				iny
  6745 4DA0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6746 4DA2 71 84			adc (:bp2),y
  6747 4DA4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6748 4DA6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6749 4DA8 A5 9F			lda :STACKORIGIN+9
  6750 4DAA 18 71 84			add (:bp2),y
  6751 4DAD 8D 08 A3			sta Y
  6752 4DB0 C8				iny
  6753 4DB1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6754 4DB3 71 84			adc (:bp2),y
  6755 4DB5 8D 09 A3			sta Y+1
  6756
  6757 				; optimize OK (service.pas), line = 1178
  6758
  6759 4DB8 A0 00			ldy #BALL.X-DATAORIGIN
  6760 4DBA AD 07 A3			lda X+1
  6761 4DBD 91 84			sta (:bp2),y
  6762 4DBF C8				iny
  6763 4DC0 A9 00			lda #$00
  6764 4DC2 91 84			sta (:bp2),y
  6765
  6766 				; optimize OK (service.pas), line = 1179
  6767
  6768 4DC4 A0 02			ldy #BALL.Y-DATAORIGIN
  6769 4DC6 AD 09 A3			lda Y+1
  6770 4DC9 91 84			sta (:bp2),y
  6771 4DCB C8				iny
  6772 4DCC A9 00			lda #$00
  6773 4DCE 91 84			sta (:bp2),y
  6774
  6775 				; optimize OK (service.pas), line = 1181
  6776
  6777 4DD0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6778 4DD2 AD 06 A3			lda X
  6779 4DD5 91 84			sta (:bp2),y
  6780 4DD7 C8				iny
  6781 4DD8 A9 00			lda #$00
  6782 4DDA 91 84			sta (:bp2),y
  6783
  6784 				; optimize OK (service.pas), line = 1182
  6785
  6786 4DDC A0 06			ldy #BALL.FINEY-DATAORIGIN
  6787 4DDE AD 08 A3			lda Y
  6788 4DE1 91 84			sta (:bp2),y
  6789 4DE3 C8				iny
  6790 4DE4 A9 00			lda #$00
  6791 4DE6 91 84			sta (:bp2),y
  6792
  6793 				; optimize OK (service.pas), line = 1187
  6794
  6795 4DE8 A0 00			ldy #BALL.X-DATAORIGIN
  6796 4DEA B1 84			lda (:bp2),y
  6797 4DEC C8				iny
  6798 4DED C9 D9			cmp #$D9
  6799 4DEF B1 84			lda (:bp2),y
  6800 4DF1 E9 00			sbc #$00
  6801 4DF3 50 02			svc
  6802 4DF5 49 80			eor #$80
  6803 4DF7 30 67			jmi l_0CFB
  6804
  6805 				; optimize OK (service.pas), line = 1189
  6806
  6807 4DF9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6808 4DFB A9 00			lda #$00
  6809 4DFD 38 F1 84			sub (:bp2),y
  6810 4E00 85 9F			sta :STACKORIGIN+9
  6811 4E02 C8				iny
  6812 4E03 A9 00			lda #$00
  6813 4E05 F1 84			sbc (:bp2),y
  6814 4E07 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6815 4E09 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6816 4E0B A5 9F			lda :STACKORIGIN+9
  6817 4E0D 91 84			sta (:bp2),y
  6818 4E0F C8				iny
  6819 4E10 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6820 4E12 91 84			sta (:bp2),y
  6821
  6822 				; optimize OK (service.pas), line = 1190
  6823
  6824 4E14 A0 00			ldy #BALL.X-DATAORIGIN
  6825 4E16 A9 B0			lda #$B0
  6826 4E18 38 F1 84			sub (:bp2),y
  6827 4E1B 85 9F			sta :STACKORIGIN+9
  6828 4E1D C8				iny
  6829 4E1E A9 01			lda #$01
  6830 4E20 F1 84			sbc (:bp2),y
  6831 4E22 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6832 4E24 A0 00			ldy #BALL.X-DATAORIGIN
  6833 4E26 A5 9F			lda :STACKORIGIN+9
  6834 4E28 91 84			sta (:bp2),y
  6835 4E2A C8				iny
  6836 4E2B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6837 4E2D 91 84			sta (:bp2),y
  6838
  6839 				; optimize OK (service.pas), line = 1191
  6840
  6841 4E2F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6842 4E31 A9 FF			lda #$FF
  6843 4E33 51 84			eor (:bp2),y
  6844 4E35 85 9F			sta :STACKORIGIN+9
  6845 4E37 C8				iny
  6846 4E38 A9 00			lda #$00
  6847 4E3A F1 84			sbc (:bp2),y
  6848 4E3C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6849 4E3E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6850 4E40 A5 9F			lda :STACKORIGIN+9
  6851 4E42 91 84			sta (:bp2),y
  6852 4E44 C8				iny
  6853 4E45 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6854 4E47 91 84			sta (:bp2),y
  6855
  6856 				; optimize OK (service.pas), line = 1192
  6857
  6858 4E49 A9 F0			lda #$F0
  6859 4E4B 8D 30 A1			sta BALL_BLOCK_SOUND.A
  6860 4E4E A9 00			lda #$00
  6861 4E50 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
  6862 4E53 A9 05			lda #$05
  6863 4E55 8D 32 A1			sta BALL_BLOCK_SOUND.B
  6864 4E58 A9 00			lda #$00
  6865 4E5A 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
  6866 4E5D 20 F1 3A			jsr BALL_BLOCK_SOUND
  6867 4E60			l_0CFB
  6868
  6869 				; optimize OK (service.pas), line = 1197
  6870
  6871 4E60 AC FF A2 84 84 AC + 	mwy BALL :bp2
  6872 4E6A A0 00			ldy #BALL.X-DATAORIGIN
  6873 4E6C B1 84			lda (:bp2),y
  6874 4E6E C8				iny
  6875 4E6F C9 0A			cmp #$0A
  6876 4E71 B1 84			lda (:bp2),y
  6877 4E73 E9 00			sbc #$00
  6878 4E75 50 02			svc
  6879 4E77 49 80			eor #$80
  6880 4E79 10 67			jpl l_0D30
  6881
  6882 				; optimize OK (service.pas), line = 1199
  6883
  6884 4E7B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6885 4E7D A9 00			lda #$00
  6886 4E7F 38 F1 84			sub (:bp2),y
  6887 4E82 85 9F			sta :STACKORIGIN+9
  6888 4E84 C8				iny
  6889 4E85 A9 00			lda #$00
  6890 4E87 F1 84			sbc (:bp2),y
  6891 4E89 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6892 4E8B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6893 4E8D A5 9F			lda :STACKORIGIN+9
  6894 4E8F 91 84			sta (:bp2),y
  6895 4E91 C8				iny
  6896 4E92 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6897 4E94 91 84			sta (:bp2),y
  6898
  6899 				; optimize OK (service.pas), line = 1200
  6900
  6901 4E96 A0 00			ldy #BALL.X-DATAORIGIN
  6902 4E98 A9 14			lda #$14
  6903 4E9A 38 F1 84			sub (:bp2),y
  6904 4E9D 85 9F			sta :STACKORIGIN+9
  6905 4E9F C8				iny
  6906 4EA0 A9 00			lda #$00
  6907 4EA2 F1 84			sbc (:bp2),y
  6908 4EA4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6909 4EA6 A0 00			ldy #BALL.X-DATAORIGIN
  6910 4EA8 A5 9F			lda :STACKORIGIN+9
  6911 4EAA 91 84			sta (:bp2),y
  6912 4EAC C8				iny
  6913 4EAD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6914 4EAF 91 84			sta (:bp2),y
  6915
  6916 				; optimize OK (service.pas), line = 1201
  6917
  6918 4EB1 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6919 4EB3 A9 FF			lda #$FF
  6920 4EB5 51 84			eor (:bp2),y
  6921 4EB7 85 9F			sta :STACKORIGIN+9
  6922 4EB9 C8				iny
  6923 4EBA A9 00			lda #$00
  6924 4EBC F1 84			sbc (:bp2),y
  6925 4EBE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6926 4EC0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6927 4EC2 A5 9F			lda :STACKORIGIN+9
  6928 4EC4 91 84			sta (:bp2),y
  6929 4EC6 C8				iny
  6930 4EC7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6931 4EC9 91 84			sta (:bp2),y
  6932
  6933 				; optimize OK (service.pas), line = 1202
  6934
  6935 4ECB A9 F0			lda #$F0
  6936 4ECD 8D 30 A1			sta BALL_BLOCK_SOUND.A
  6937 4ED0 A9 00			lda #$00
  6938 4ED2 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
  6939 4ED5 A9 05			lda #$05
  6940 4ED7 8D 32 A1			sta BALL_BLOCK_SOUND.B
  6941 4EDA A9 00			lda #$00
  6942 4EDC 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
  6943 4EDF 20 F1 3A			jsr BALL_BLOCK_SOUND
  6944 4EE2			l_0D30
  6945
  6946 				; optimize OK (service.pas), line = 1207
  6947
  6948 4EE2 AC FF A2 84 84 AC + 	mwy BALL :bp2
  6949 4EEC A0 02			ldy #BALL.Y-DATAORIGIN
  6950 4EEE B1 84			lda (:bp2),y
  6951 4EF0 C8				iny
  6952 4EF1 C9 0C			cmp #$0C
  6953 4EF3 B1 84			lda (:bp2),y
  6954 4EF5 E9 00			sbc #$00
  6955 4EF7 50 02			svc
  6956 4EF9 49 80			eor #$80
  6957 4EFB 10 67			jpl l_0D65
  6958
  6959 				; optimize OK (service.pas), line = 1209
  6960
  6961 4EFD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6962 4EFF A9 00			lda #$00
  6963 4F01 38 F1 84			sub (:bp2),y
  6964 4F04 85 9F			sta :STACKORIGIN+9
  6965 4F06 C8				iny
  6966 4F07 A9 00			lda #$00
  6967 4F09 F1 84			sbc (:bp2),y
  6968 4F0B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6969 4F0D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6970 4F0F A5 9F			lda :STACKORIGIN+9
  6971 4F11 91 84			sta (:bp2),y
  6972 4F13 C8				iny
  6973 4F14 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6974 4F16 91 84			sta (:bp2),y
  6975
  6976 				; optimize OK (service.pas), line = 1210
  6977
  6978 4F18 A0 02			ldy #BALL.Y-DATAORIGIN
  6979 4F1A A9 18			lda #$18
  6980 4F1C 38 F1 84			sub (:bp2),y
  6981 4F1F 85 9F			sta :STACKORIGIN+9
  6982 4F21 C8				iny
  6983 4F22 A9 00			lda #$00
  6984 4F24 F1 84			sbc (:bp2),y
  6985 4F26 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6986 4F28 A0 02			ldy #BALL.Y-DATAORIGIN
  6987 4F2A A5 9F			lda :STACKORIGIN+9
  6988 4F2C 91 84			sta (:bp2),y
  6989 4F2E C8				iny
  6990 4F2F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6991 4F31 91 84			sta (:bp2),y
  6992
  6993 				; optimize OK (service.pas), line = 1211
  6994
  6995 4F33 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6996 4F35 A9 FF			lda #$FF
  6997 4F37 51 84			eor (:bp2),y
  6998 4F39 85 9F			sta :STACKORIGIN+9
  6999 4F3B C8				iny
  7000 4F3C A9 00			lda #$00
  7001 4F3E F1 84			sbc (:bp2),y
  7002 4F40 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7003 4F42 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7004 4F44 A5 9F			lda :STACKORIGIN+9
  7005 4F46 91 84			sta (:bp2),y
  7006 4F48 C8				iny
  7007 4F49 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7008 4F4B 91 84			sta (:bp2),y
  7009
  7010 				; optimize OK (service.pas), line = 1212
  7011
  7012 4F4D A9 F0			lda #$F0
  7013 4F4F 8D 30 A1			sta BALL_BLOCK_SOUND.A
  7014 4F52 A9 00			lda #$00
  7015 4F54 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
  7016 4F57 A9 05			lda #$05
  7017 4F59 8D 32 A1			sta BALL_BLOCK_SOUND.B
  7018 4F5C A9 00			lda #$00
  7019 4F5E 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
  7020 4F61 20 F1 3A			jsr BALL_BLOCK_SOUND
  7021 4F64			l_0D65
  7022
  7023 				; optimize OK (service.pas), line = 1220
  7024
  7025 4F64 AC FF A2 84 84 AC + 	mwy BALL :bp2
  7026 4F6E A0 02			ldy #BALL.Y-DATAORIGIN
  7027 4F70 B1 84			lda (:bp2),y
  7028 4F72 18 69 03			add #$03
  7029 4F75 85 9F			sta :STACKORIGIN+9
  7030 4F77 C8				iny
  7031 4F78 B1 84			lda (:bp2),y
  7032 4F7A 69 00			adc #$00
  7033 4F7C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7034 4F7E A0 01			ldy #1
  7035 4F80 A5 9F			lda :STACKORIGIN+9
  7036 4F82 C9 B9			cmp #$B9
  7037 4F84 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7038 4F86 E9 00			sbc #$00
  7039 4F88 50 02			svc
  7040 4F8A 49 80			eor #$80
  7041 4F8C 10 01			bpl @+
  7042 4F8E 88				dey
  7043 				@
  7044 4F8F 98				tya
  7045 4F90 8D 03 A3			sta B0
  7046
  7047 				; optimize OK (service.pas), line = 1221
  7048
  7049 4F93 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7050 4F95 B1 84			lda (:bp2),y
  7051 4F97 85 9F			sta :STACKORIGIN+9
  7052 4F99 C8				iny
  7053 4F9A B1 84			lda (:bp2),y
  7054 4F9C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7055 4F9E A0 01			ldy #1
  7056 4FA0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7057 4FA2 30 04			bmi @+
  7058 4FA4 05 9F			ora :STACKORIGIN+9
  7059 4FA6 D0 01			sne
  7060 				@
  7061 4FA8 88				dey
  7062 				@
  7063 4FA9 98				tya
  7064 4FAA 8D 04 A3			sta B1
  7065
  7066 				; optimize OK (service.pas), line = 1222
  7067
  7068 4FAD A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7069 4FAF B1 84			lda (:bp2),y
  7070 4FB1 85 9F			sta :STACKORIGIN+9
  7071 4FB3 C8				iny
  7072 4FB4 B1 84			lda (:bp2),y
  7073 4FB6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7074 4FB8 A0 01			ldy #1
  7075 4FBA A5 9F			lda :STACKORIGIN+9
  7076 4FBC C9 B9			cmp #$B9
  7077 4FBE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7078 4FC0 E9 00			sbc #$00
  7079 4FC2 50 02			svc
  7080 4FC4 49 80			eor #$80
  7081 4FC6 30 01			bmi @+
  7082 4FC8 88				dey
  7083 				@
  7084 4FC9 98				tya
  7085 4FCA 8D 05 A3			sta B2
  7086
  7087 				; optimize OK (service.pas), line = 1225
  7088
  7089 4FCD AD 03 A3			lda B0
  7090 4FD0 2D 04 A3			and B1
  7091 4FD3 2D 05 A3			and B2
  7092 4FD6 D0 03 4C 84 52		jeq l_0DC6
  7093
  7094 				; optimize OK (service.pas), line = 1229
  7095
  7096 4FDB A0 00			ldy #BALL.X-DATAORIGIN
  7097 4FDD B1 84			lda (:bp2),y
  7098 4FDF 85 9F			sta :STACKORIGIN+9
  7099 4FE1 C8				iny
  7100 4FE2 AD B4 A1			lda VAUS.X
  7101 4FE5 38 E9 03			sub #$03
  7102 4FE8 85 A0			sta :STACKORIGIN+10
  7103 4FEA A9 00			lda #$00
  7104 4FEC E9 00			sbc #$00
  7105 4FEE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7106 4FF0 A5 A0			lda :STACKORIGIN+10
  7107 4FF2 C5 9F			cmp :STACKORIGIN+9
  7108 4FF4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7109 4FF6 F1 84			sbc (:bp2),y
  7110 4FF8 50 02			svc
  7111 4FFA 49 80			eor #$80
  7112 4FFC 30 03 4C 84 52		jpl l_0DF5
  7113 5001 A0 00			ldy #BALL.X-DATAORIGIN
  7114 5003 B1 84			lda (:bp2),y
  7115 5005 85 A0			sta :STACKORIGIN+10
  7116 5007 C8				iny
  7117 5008 AD B4 A1			lda VAUS.X
  7118 500B 18 6D BC A1			add VAUS.WIDTH
  7119 500F 85 A1			sta :STACKORIGIN+11
  7120 5011 A9 00			lda #$00
  7121 5013 69 00			adc #$00
  7122 5015 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7123 5017 A5 A1			lda :STACKORIGIN+11
  7124 5019 18 69 03			add #$03
  7125 501C 85 A1			sta :STACKORIGIN+11
  7126 501E A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7127 5020 69 00			adc #$00
  7128 5022 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7129 5024 A5 A0			lda :STACKORIGIN+10
  7130 5026 C5 A1			cmp :STACKORIGIN+11
  7131 5028 B1 84			lda (:bp2),y
  7132 502A E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7133 502C 50 02			svc
  7134 502E 49 80			eor #$80
  7135 5030 30 03 4C 84 52		jpl l_0DF5
  7136
  7137 				; optimize OK (service.pas), line = 1232
  7138
  7139 5035 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7140 5037 A9 00			lda #$00
  7141 5039 38 F1 84			sub (:bp2),y
  7142 503C 85 9F			sta :STACKORIGIN+9
  7143 503E C8				iny
  7144 503F A9 00			lda #$00
  7145 5041 F1 84			sbc (:bp2),y
  7146 5043 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7147 5045 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7148 5047 A5 9F			lda :STACKORIGIN+9
  7149 5049 91 84			sta (:bp2),y
  7150 504B C8				iny
  7151 504C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7152 504E 91 84			sta (:bp2),y
  7153
  7154 				; optimize OK (service.pas), line = 1234
  7155
  7156 5050 AD C0 A1			lda VAUS.LETTER
  7157 5053 C9 06			cmp #$06
  7158 5055 D0 2C			jne l_0E19
  7159 5057 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7160 5059 B1 84			lda (:bp2),y
  7161 505B D0 26			jne l_0E19
  7162
  7163 				; optimize OK (service.pas), line = 1236
  7164
  7165 505D A0 1B			ldy #BALL.STM-DATAORIGIN
  7166 505F 91 84			sta (:bp2),y
  7167
  7168 				; optimize OK (service.pas), line = 1237
  7169
  7170 5061 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7171 5063 A9 01			lda #$01
  7172 5065 91 84			sta (:bp2),y
  7173
  7174 				; optimize OK (service.pas), line = 1238
  7175
  7176 5067 A0 00			ldy #BALL.X-DATAORIGIN
  7177 5069 B1 84			lda (:bp2),y
  7178 506B 38 ED B4 A1			sub VAUS.X
  7179 506F 85 9F			sta :STACKORIGIN+9
  7180 5071 C8				iny
  7181 5072 B1 84			lda (:bp2),y
  7182 5074 E9 00			sbc #$00
  7183 5076 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7184 5078 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7185 507A A5 9F			lda :STACKORIGIN+9
  7186 507C 91 84			sta (:bp2),y
  7187 507E C8				iny
  7188 507F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7189 5081 91 84			sta (:bp2),y
  7190 5083			l_0E19
  7191
  7192 				; optimize OK (service.pas), line = 1241
  7193
  7194 5083 A9 2C			lda #$2C
  7195 5085 8D 30 A1			sta BALL_BLOCK_SOUND.A
  7196 5088 A9 01			lda #$01
  7197 508A 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
  7198 508D A9 06			lda #$06
  7199 508F 8D 32 A1			sta BALL_BLOCK_SOUND.B
  7200 5092 A9 00			lda #$00
  7201 5094 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
  7202 5097 20 F1 3A			jsr BALL_BLOCK_SOUND
  7203
  7204 				; optimize OK (service.pas), line = 1245
  7205
  7206 509A AC FF A2 84 84 AC + 	mwy BALL :bp2
  7207 50A4 A0 00			ldy #BALL.X-DATAORIGIN
  7208 50A6 B1 84			lda (:bp2),y
  7209 50A8 85 9F			sta :STACKORIGIN+9
  7210 50AA C8				iny
  7211 50AB AD B4 A1			lda VAUS.X
  7212 50AE 18 69 0A			add #$0A
  7213 50B1 85 A0			sta :STACKORIGIN+10
  7214 50B3 A9 00			lda #$00
  7215 50B5 69 00			adc #$00
  7216 50B7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7217 50B9 A5 9F			lda :STACKORIGIN+9
  7218 50BB C5 A0			cmp :STACKORIGIN+10
  7219 50BD B1 84			lda (:bp2),y
  7220 50BF E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7221 50C1 50 02			svc
  7222 50C3 49 80			eor #$80
  7223 50C5 30 03 4C 88 51		jpl l_0E49
  7224
  7225 				; optimize OK (service.pas), line = 1248
  7226
  7227 50CA A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7228 50CC A9 00			lda #$00
  7229 50CE 38 F1 84			sub (:bp2),y
  7230 50D1 85 9F			sta :STACKORIGIN+9
  7231 50D3 C8				iny
  7232 50D4 A9 00			lda #$00
  7233 50D6 F1 84			sbc (:bp2),y
  7234 50D8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7235 50DA A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7236 50DC A5 9F			lda :STACKORIGIN+9
  7237 50DE 91 84			sta (:bp2),y
  7238 50E0 C8				iny
  7239 50E1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7240 50E3 91 84			sta (:bp2),y
  7241
  7242 				; optimize OK (service.pas), line = 1252
  7243
  7244 50E5 AD FF A2			lda BALL
  7245 50E8 8D D1 A2			sta GET_BALL_DIRECTION.BALL
  7246 50EB AD 00 A3			lda BALL+1
  7247 50EE 8D D2 A2			sta GET_BALL_DIRECTION.BALL+1
  7248 50F1 20 CA 49			jsr GET_BALL_DIRECTION
  7249 50F4 E8				inx
  7250 50F5 AD D5 A2 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7251 50FA AD D6 A2 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7252 50FF A9 1E			lda #$1E
  7253 5101 20 B5 35			jsr SYSTEM.RANDOM.@010180000
  7254 5104 B5 96			lda :STACKORIGIN,x
  7255 5106 18 6D 8D A0			add SYSTEM.RANDOM.@010180000.RESULT
  7256 510A 8D 0A A3			sta ANGLE
  7257 510D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7258 510F 69 00			adc #$00
  7259 5111 8D 0B A3			sta ANGLE+1
  7260 5114 CA				dex
  7261
  7262 				; optimize OK (service.pas), line = 1260
  7263
  7264 5115 A9 A0			lda #$A0
  7265 5117 8D 75 A2			sta MIN.A
  7266 511A A9 00			lda #$00
  7267 511C 8D 76 A2			sta MIN.A+1
  7268 511F AD 0A A3			lda ANGLE
  7269 5122 8D 77 A2			sta MIN.B
  7270 5125 AD 0B A3			lda ANGLE+1
  7271 5128 8D 78 A2			sta MIN.B+1
  7272 512B 20 A3 3D			jsr MIN
  7273 512E A9 78			lda #$78
  7274 5130 8D 6F A2			sta MAX.A
  7275 5133 A9 00			lda #$00
  7276 5135 8D 70 A2			sta MAX.A+1
  7277 5138 AD 79 A2			lda MIN.RESULT
  7278 513B 8D 71 A2			sta MAX.B
  7279 513E AD 7A A2			lda MIN.RESULT+1
  7280 5141 8D 72 A2			sta MAX.B+1
  7281 5144 20 78 3D			jsr MAX
  7282 5147 AD FF A2			lda BALL
  7283 514A 8D C7 A2			sta SET_BALL_DIRECTION.BALL
  7284 514D AD 00 A3			lda BALL+1
  7285 5150 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
  7286 5153 AD 73 A2			lda MAX.RESULT
  7287 5156 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
  7288 5159 AD 74 A2			lda MAX.RESULT+1
  7289 515C 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
  7290 515F 20 E7 47			jsr SET_BALL_DIRECTION
  7291
  7292 				; optimize OK (service.pas), line = 1265
  7293
  7294 5162 AC FF A2 84 84 AC + 	mwy BALL :bp2
  7295 516C A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7296 516E B1 84			lda (:bp2),y
  7297 5170 8D BD A2			sta SET_BALL_SPEED.SPEED
  7298 5173 C8				iny
  7299 5174 B1 84			lda (:bp2),y
  7300 5176 8D BE A2			sta SET_BALL_SPEED.SPEED+1
  7301 5179 AD FF A2			lda BALL
  7302 517C 8D B9 A2			sta SET_BALL_SPEED.BALL
  7303 517F AD 00 A3			lda BALL+1
  7304 5182 8D BA A2			sta SET_BALL_SPEED.BALL+1
  7305 5185 20 E7 45			jsr SET_BALL_SPEED
  7306 5188			l_0E49
  7307
  7308 				; optimize OK (service.pas), line = 1271
  7309
  7310 5188 AC FF A2 84 84 AC + 	mwy BALL :bp2
  7311 5192 A0 00			ldy #BALL.X-DATAORIGIN
  7312 5194 B1 84			lda (:bp2),y
  7313 5196 85 9F			sta :STACKORIGIN+9
  7314 5198 C8				iny
  7315 5199 AD B4 A1			lda VAUS.X
  7316 519C 18 6D BC A1			add VAUS.WIDTH
  7317 51A0 85 A0			sta :STACKORIGIN+10
  7318 51A2 A9 00			lda #$00
  7319 51A4 69 00			adc #$00
  7320 51A6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7321 51A8 A5 A0			lda :STACKORIGIN+10
  7322 51AA 38 E9 0A			sub #$0A
  7323 51AD 85 A0			sta :STACKORIGIN+10
  7324 51AF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7325 51B1 E9 00			sbc #$00
  7326 51B3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7327 51B5 A5 A0			lda :STACKORIGIN+10
  7328 51B7 C5 9F			cmp :STACKORIGIN+9
  7329 51B9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7330 51BB F1 84			sbc (:bp2),y
  7331 51BD 50 02			svc
  7332 51BF 49 80			eor #$80
  7333 51C1 30 03 4C 84 52		jpl l_0E8A
  7334
  7335 				; optimize OK (service.pas), line = 1273
  7336
  7337 51C6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7338 51C8 A9 00			lda #$00
  7339 51CA 38 F1 84			sub (:bp2),y
  7340 51CD 85 9F			sta :STACKORIGIN+9
  7341 51CF C8				iny
  7342 51D0 A9 00			lda #$00
  7343 51D2 F1 84			sbc (:bp2),y
  7344 51D4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7345 51D6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7346 51D8 A5 9F			lda :STACKORIGIN+9
  7347 51DA 91 84			sta (:bp2),y
  7348 51DC C8				iny
  7349 51DD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7350 51DF 91 84			sta (:bp2),y
  7351
  7352 				; optimize OK (service.pas), line = 1274
  7353
  7354 51E1 AD FF A2			lda BALL
  7355 51E4 8D D1 A2			sta GET_BALL_DIRECTION.BALL
  7356 51E7 AD 00 A3			lda BALL+1
  7357 51EA 8D D2 A2			sta GET_BALL_DIRECTION.BALL+1
  7358 51ED 20 CA 49			jsr GET_BALL_DIRECTION
  7359 51F0 E8				inx
  7360 51F1 AD D5 A2 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7361 51F6 AD D6 A2 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7362 51FB A9 1E			lda #$1E
  7363 51FD 20 B5 35			jsr SYSTEM.RANDOM.@010180000
  7364 5200 B5 96			lda :STACKORIGIN,x
  7365 5202 38 ED 8D A0			sub SYSTEM.RANDOM.@010180000.RESULT
  7366 5206 8D 0A A3			sta ANGLE
  7367 5209 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7368 520B E9 00			sbc #$00
  7369 520D 8D 0B A3			sta ANGLE+1
  7370 5210 CA				dex
  7371
  7372 				; optimize OK (service.pas), line = 1275
  7373
  7374 5211 A9 14			lda #$14
  7375 5213 8D 6F A2			sta MAX.A
  7376 5216 A9 00			lda #$00
  7377 5218 8D 70 A2			sta MAX.A+1
  7378 521B AD 0A A3			lda ANGLE
  7379 521E 8D 71 A2			sta MAX.B
  7380 5221 AD 0B A3			lda ANGLE+1
  7381 5224 8D 72 A2			sta MAX.B+1
  7382 5227 20 78 3D			jsr MAX
  7383 522A A9 3C			lda #$3C
  7384 522C 8D 75 A2			sta MIN.A
  7385 522F A9 00			lda #$00
  7386 5231 8D 76 A2			sta MIN.A+1
  7387 5234 AD 73 A2			lda MAX.RESULT
  7388 5237 8D 77 A2			sta MIN.B
  7389 523A AD 74 A2			lda MAX.RESULT+1
  7390 523D 8D 78 A2			sta MIN.B+1
  7391 5240 20 A3 3D			jsr MIN
  7392 5243 AD FF A2			lda BALL
  7393 5246 8D C7 A2			sta SET_BALL_DIRECTION.BALL
  7394 5249 AD 00 A3			lda BALL+1
  7395 524C 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
  7396 524F AD 79 A2			lda MIN.RESULT
  7397 5252 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
  7398 5255 AD 7A A2			lda MIN.RESULT+1
  7399 5258 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
  7400 525B 20 E7 47			jsr SET_BALL_DIRECTION
  7401
  7402 				; optimize OK (service.pas), line = 1276
  7403
  7404 525E AC FF A2 84 84 AC + 	mwy BALL :bp2
  7405 5268 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7406 526A B1 84			lda (:bp2),y
  7407 526C 8D BD A2			sta SET_BALL_SPEED.SPEED
  7408 526F C8				iny
  7409 5270 B1 84			lda (:bp2),y
  7410 5272 8D BE A2			sta SET_BALL_SPEED.SPEED+1
  7411 5275 AD FF A2			lda BALL
  7412 5278 8D B9 A2			sta SET_BALL_SPEED.BALL
  7413 527B AD 00 A3			lda BALL+1
  7414 527E 8D BA A2			sta SET_BALL_SPEED.BALL+1
  7415 5281 20 E7 45			jsr SET_BALL_SPEED
  7416 5284			l_0E8A
  7417 5284			l_0DF5
  7418 5284			l_0DC6
  7419
  7420 				; optimize OK (service.pas), line = 1288
  7421
  7422 5284 AC FF A2 84 84 AC + 	mwy BALL :bp2
  7423 528E A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7424 5290 B1 84			lda (:bp2),y
  7425 5292 85 9F			sta :STACKORIGIN+9
  7426 5294 C8				iny
  7427 5295 B1 84			lda (:bp2),y
  7428 5297 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7429 5299 A0 01			ldy #1
  7430 529B A5 9F			lda :STACKORIGIN+9
  7431 529D C9 B9			cmp #$B9
  7432 529F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7433 52A1 E9 00			sbc #$00
  7434 52A3 50 02			svc
  7435 52A5 49 80			eor #$80
  7436 52A7 10 01			bpl @+
  7437 52A9 88				dey
  7438 				@
  7439 52AA 84 9F			sty :STACKORIGIN+9
  7440 52AC A0 02			ldy #BALL.Y-DATAORIGIN
  7441 52AE B1 84			lda (:bp2),y
  7442 52B0 85 A0			sta :STACKORIGIN+10
  7443 52B2 C8				iny
  7444 52B3 B1 84			lda (:bp2),y
  7445 52B5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7446 52B7 A0 01			ldy #1
  7447 52B9 A5 A0			lda :STACKORIGIN+10
  7448 52BB C9 C9			cmp #$C9
  7449 52BD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7450 52BF E9 00			sbc #$00
  7451 52C1 50 02			svc
  7452 52C3 49 80			eor #$80
  7453 52C5 10 01			bpl @+
  7454 52C7 88				dey
  7455 				@
  7456 52C8 98				tya
  7457 52C9 25 9F			and :STACKORIGIN+9
  7458 52CB 85 9F			sta :STACKORIGIN+9
  7459 52CD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7460 52CF B1 84			lda (:bp2),y
  7461 52D1 85 A0			sta :STACKORIGIN+10
  7462 52D3 C8				iny
  7463 52D4 B1 84			lda (:bp2),y
  7464 52D6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7465 52D8 A0 01			ldy #1
  7466 52DA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7467 52DC 30 04			bmi @+
  7468 52DE 05 A0			ora :STACKORIGIN+10
  7469 52E0 D0 01			sne
  7470 				@
  7471 52E2 88				dey
  7472 				@
  7473 52E3 98				tya
  7474 52E4 25 9F			and :STACKORIGIN+9
  7475 52E6 F0 15			jeq l_0ED9
  7476
  7477 				; optimize OK (service.pas), line = 1290
  7478
  7479 52E8 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7480 52EA A9 00			lda #$00
  7481 52EC 91 84			sta (:bp2),y
  7482
  7483 				; optimize OK (service.pas), line = 1292
  7484
  7485 52EE AD FF A2			lda BALL
  7486 52F1 8D AF A2			sta REMOVE_BALL.BALL
  7487 52F4 AD 00 A3			lda BALL+1
  7488 52F7 8D B0 A2			sta REMOVE_BALL.BALL+1
  7489 52FA 20 84 44			jsr REMOVE_BALL
  7490 52FD			l_0ED9
  7491
  7492 				; ------------------------------------------------------------
  7493
  7494 = A2FF			BALL	= DATAORIGIN+$02B7
  7495 = A048			BALL.X	= DATAORIGIN+$0000
  7496 = A04A			BALL.Y	= DATAORIGIN+$0002
  7497 = A04C			BALL.FINEX	= DATAORIGIN+$0004
  7498 = A04E			BALL.FINEY	= DATAORIGIN+$0006
  7499 = A050			BALL.OLDX	= DATAORIGIN+$0008
  7500 = A052			BALL.OLDY	= DATAORIGIN+$000A
  7501 = A054			BALL.SPEED	= DATAORIGIN+$000C
  7502 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
  7503 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
  7504 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
  7505 = A05C			BALL.SBD	= DATAORIGIN+$0014
  7506 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
  7507 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
  7508 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
  7509 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
  7510 = A063			BALL.STM	= DATAORIGIN+$001B
  7511 = A303			B0	= DATAORIGIN+$02BB
  7512 = A304			B1	= DATAORIGIN+$02BC
  7513 = A305			B2	= DATAORIGIN+$02BD
  7514 = A306			X	= DATAORIGIN+$02BE
  7515 = A308			Y	= DATAORIGIN+$02C0
  7516 = A30A			ANGLE	= DATAORIGIN+$02C2
  7517
  7518 = A2FF			@VarData	= BALL
  7519 = 000B			@VarDataSize	= 11
  7520
  7521 52FD			@exit
  7522 					.ifdef @new
  7523 					lda <@VarData
  7524 					sta :ztmp
  7525 					lda >@VarData
  7526 					ldy #@VarDataSize-1
  7527 					jmp @FreeMem
  7528 					els
  7529 52FD 60				rts						; ret
  7530 					eif
  7531 				.endl
  7532
  7533 52FE			.local	MODIFY_VAUS					; PROCEDURE
  7534
  7535 				; optimize OK (service.pas), line = 1299
  7536
  7537 52FE AD BC A1			lda VAUS.WIDTH
  7538 5301 8D BA A1			sta VAUS.OLDLEN
  7539 5304 A9 00			lda #$00
  7540 5306 8D BB A1			sta VAUS.OLDLEN+1
  7541
  7542 				; optimize OK (service.pas), line = 1300
  7543
  7544 5309 AD 44 A1			lda PLAYVAUS.WIDTH
  7545 530C 8D BC A1			sta VAUS.WIDTH
  7546
  7547 				; optimize OK (service.pas), line = 1301
  7548
  7549 530F AD 46 A1			lda PLAYVAUS.HEIGHT
  7550 5312 8D BD A1			sta VAUS.HEIGHT
  7551
  7552 5315			@exit
  7553 					.ifdef @new
  7554 					lda <@VarData
  7555 					sta :ztmp
  7556 					lda >@VarData
  7557 					ldy #@VarDataSize-1
  7558 					jmp @FreeMem
  7559 					els
  7560 5315 60				rts						; ret
  7561 					eif
  7562 				.endl
  7563
  7564 5316			.local	SET_VAUS					; PROCEDURE
  7565
  7566 				; optimize OK (service.pas), line = 1306
  7567
  7568 5316 A9 5F			lda #$5F
  7569 5318 8D B4 A1			sta VAUS.X
  7570
  7571 				; optimize OK (service.pas), line = 1307
  7572
  7573 531B A9 B8			lda #$B8
  7574 531D 8D B5 A1			sta VAUS.Y
  7575
  7576 				; optimize OK (service.pas), line = 1309
  7577
  7578 5320 A9 FF			lda #$FF
  7579 5322 8D B6 A1			sta VAUS.OLDX
  7580 5325 8D B7 A1			sta VAUS.OLDX+1
  7581
  7582 				; optimize OK (service.pas), line = 1310
  7583
  7584 5328 8D B8 A1			sta VAUS.OLDY
  7585 532B 8D B9 A1			sta VAUS.OLDY+1
  7586
  7587 				; optimize OK (service.pas), line = 1311
  7588
  7589 532E A9 00			lda #$00
  7590 5330 8D BF A1			sta VAUS.IFLASH
  7591
  7592 				; optimize OK (service.pas), line = 1315
  7593
  7594 5333 8D BE A1			sta VAUS.FLASH
  7595
  7596 				; optimize OK (service.pas), line = 1319
  7597
  7598 5336 AD 44 A1			lda PLAYVAUS.WIDTH
  7599 5339 8D BC A1			sta VAUS.WIDTH
  7600
  7601 				; optimize OK (service.pas), line = 1320
  7602
  7603 533C AD 46 A1			lda PLAYVAUS.HEIGHT
  7604 533F 8D BD A1			sta VAUS.HEIGHT
  7605
  7606 				; optimize OK (service.pas), line = 1321
  7607
  7608 5342 AD BC A1			lda VAUS.WIDTH
  7609 5345 8D BA A1			sta VAUS.OLDLEN
  7610 5348 A9 00			lda #$00
  7611 534A 8D BB A1			sta VAUS.OLDLEN+1
  7612
  7613 				; optimize OK (service.pas), line = 1322
  7614
  7615 534D A9 FF			lda #$FF
  7616 534F 8D C0 A1			sta VAUS.LETTER
  7617
  7618 5352			@exit
  7619 					.ifdef @new
  7620 					lda <@VarData
  7621 					sta :ztmp
  7622 					lda >@VarData
  7623 					ldy #@VarDataSize-1
  7624 					jmp @FreeMem
  7625 					els
  7626 5352 60				rts						; ret
  7627 					eif
  7628 				.endl
  7629
  7630 5353			.local	START_VAUS					; PROCEDURE
  7631
  7632 				; optimize OK (service.pas), line = 1331
  7633
  7634 5353 A9 5F			lda #$5F
  7635 5355 8D B4 A1			sta VAUS.X
  7636
  7637 				; optimize OK (service.pas), line = 1332
  7638
  7639 5358 A9 B8			lda #$B8
  7640 535A 8D B5 A1			sta VAUS.Y
  7641
  7642 535D			@exit
  7643 					.ifdef @new
  7644 					lda <@VarData
  7645 					sta :ztmp
  7646 					lda >@VarData
  7647 					ldy #@VarDataSize-1
  7648 					jmp @FreeMem
  7649 					els
  7650 535D 60				rts						; ret
  7651 					eif
  7652 				.endl
  7653
  7654 535E			.local	REMOVE_VAUS					; PROCEDURE
  7655
  7656 				; optimize OK (service.pas), line = 1346
  7657
  7658 535E AC B8 A1			ldy VAUS.OLDY
  7659 5361 AD B6 A1			lda VAUS.OLDX
  7660 5364 18 79 00 C0			add adr.ROW,y
  7661 5368 8D 33 A2			sta HLP
  7662 536B AD B7 A1			lda VAUS.OLDX+1
  7663 536E 79 00 C1			adc adr.ROW+256,y
  7664 5371 8D 34 A2			sta HLP+1
  7665
  7666 				; optimize OK (service.pas), line = 1348
  7667
  7668 5374 AD 33 A2			lda HLP
  7669 5377 8D 42 A2			sta BLITBOX.DST
  7670 537A A9 50			lda #$50
  7671 537C 18 6D 34 A2			add HLP+1
  7672 5380 8D 43 A2			sta BLITBOX.DST+1
  7673 5383 A9 00			lda #$00
  7674 5385 69 00			adc #$00
  7675 5387 8D 44 A2			sta BLITBOX.DST+2
  7676 538A A9 00			lda #$00
  7677 538C 69 00			adc #$00
  7678 538E 8D 45 A2			sta BLITBOX.DST+3
  7679 5391 AD 40 A1			lda PLAYSCREEN.OFS
  7680 5394 18 6D 33 A2			add HLP
  7681 5398 8D 3E A2			sta BLITBOX.SRC
  7682 539B AD 41 A1			lda PLAYSCREEN.OFS+1
  7683 539E 6D 34 A2			adc HLP+1
  7684 53A1 8D 3F A2			sta BLITBOX.SRC+1
  7685 53A4 AD 42 A1			lda PLAYSCREEN.OFS+2
  7686 53A7 69 00			adc #$00
  7687 53A9 8D 40 A2			sta BLITBOX.SRC+2
  7688 53AC AD 43 A1			lda PLAYSCREEN.OFS+3
  7689 53AF 69 00			adc #$00
  7690 53B1 8D 41 A2			sta BLITBOX.SRC+3
  7691 53B4 AD BA A1			lda VAUS.OLDLEN
  7692 53B7 8D 46 A2			sta BLITBOX.W
  7693 53BA AD BB A1			lda VAUS.OLDLEN+1
  7694 53BD 8D 47 A2			sta BLITBOX.W+1
  7695 53C0 AD BD A1			lda VAUS.HEIGHT
  7696 53C3 8D 48 A2			sta BLITBOX.H
  7697 53C6 20 7C 3B			jsr BLITBOX
  7698
  7699 				; optimize OK (service.pas), line = 1356
  7700
  7701 53C9 AD BC A1			lda VAUS.WIDTH
  7702 53CC 8D BA A1			sta VAUS.OLDLEN
  7703 53CF A9 00			lda #$00
  7704 53D1 8D BB A1			sta VAUS.OLDLEN+1
  7705
  7706 53D4			@exit
  7707 					.ifdef @new
  7708 					lda <@VarData
  7709 					sta :ztmp
  7710 					lda >@VarData
  7711 					ldy #@VarDataSize-1
  7712 					jmp @FreeMem
  7713 					els
  7714 53D4 60				rts						; ret
  7715 					eif
  7716 				.endl
  7717
  7718 53D5			.local	PLACE_VAUS					; PROCEDURE
  7719
  7720 				; optimize FAIL (0, service.pas), line = 1365
  7721
  7722 53D5 EE BF A1			inc VAUS.IFLASH
  7723
  7724 				; optimize OK (service.pas), line = 1367
  7725
  7726 53D8 AD BF A1			lda VAUS.IFLASH
  7727 53DB C9 0B			cmp #$0B
  7728 53DD 90 08			jcc l_0F75
  7729
  7730 				; optimize FAIL (0, service.pas), line = 1369
  7731
  7732 53DF EE BE A1			inc VAUS.FLASH
  7733
  7734 				; optimize OK (service.pas), line = 1370
  7735
  7736 53E2 A9 00			lda #$00
  7737 53E4 8D BF A1			sta VAUS.IFLASH
  7738 53E7			l_0F75
  7739
  7740 				; optimize OK (service.pas), line = 1373
  7741
  7742 53E7 AD BE A1			lda VAUS.FLASH
  7743 53EA C9 0B			cmp #$0B
  7744 53EC 90 05			jcc l_0F92
  7745 53EE A9 00			lda #$00
  7746 53F0 8D BE A1			sta VAUS.FLASH
  7747 53F3			l_0F92
  7748
  7749 				; optimize OK (service.pas), line = 1383
  7750
  7751 53F3 A9 00			lda #$00
  7752 53F5 8D 33 A2			sta HLP
  7753 53F8 8D 34 A2			sta HLP+1
  7754
  7755 				; optimize OK (service.pas), line = 1385
  7756
  7757 53FB 8D 0C A3			sta Y
  7758 53FE AC BD A1			ldy VAUS.HEIGHT
  7759 5401 88				dey
  7760 5402 8C 06 54			sty @FORTMP_0FA9_0
  7761
  7762 5405			l_0FAC
  7763 				; --- ForToDoCondition
  7764 5405 A9 00			lda @FORTMP_0FA9_0::#$00
  7765 5407 CD 0C A3			cmp Y
  7766 540A B0 03 4C 48 55		jcc l_0FBA
  7767
  7768 				; optimize OK (service.pas), line = 1391
  7769
  7770 540F AD 0C A3			lda Y
  7771 5412 18 6D B5 A1			add VAUS.Y
  7772 5416 A8				tay
  7773 5417 AD B4 A1			lda VAUS.X
  7774 541A 18 79 00 C0			add adr.ROW,y
  7775 541E 8D 4D A2			sta BLITZERO.DST
  7776 5421 A9 50			lda #$50
  7777 5423 79 00 C1			adc adr.ROW+256,y
  7778 5426 8D 4E A2			sta BLITZERO.DST+1
  7779 5429 A9 00			lda #$00
  7780 542B 69 00			adc #$00
  7781 542D 8D 4F A2			sta BLITZERO.DST+2
  7782 5430 A9 00			lda #$00
  7783 5432 69 00			adc #$00
  7784 5434 8D 50 A2			sta BLITZERO.DST+3
  7785 5437 AD 48 A1			lda PLAYVAUS.OFS
  7786 543A 18 6D 33 A2			add HLP
  7787 543E 8D 49 A2			sta BLITZERO.SRC
  7788 5441 AD 49 A1			lda PLAYVAUS.OFS+1
  7789 5444 6D 34 A2			adc HLP+1
  7790 5447 8D 4A A2			sta BLITZERO.SRC+1
  7791 544A AD 4A A1			lda PLAYVAUS.OFS+2
  7792 544D 69 00			adc #$00
  7793 544F 8D 4B A2			sta BLITZERO.SRC+2
  7794 5452 AD 4B A1			lda PLAYVAUS.OFS+3
  7795 5455 69 00			adc #$00
  7796 5457 8D 4C A2			sta BLITZERO.SRC+3
  7797 545A AD BC A1			lda VAUS.WIDTH
  7798 545D 8D 51 A2			sta BLITZERO.W
  7799 5460 A9 00			lda #$00
  7800 5462 8D 52 A2			sta BLITZERO.W+1
  7801 5465 A9 01			lda #$01
  7802 5467 8D 53 A2			sta BLITZERO.H
  7803 546A 20 FD 3B			jsr BLITZERO
  7804
  7805 				; optimize OK (service.pas), line = 1393
  7806
  7807 546D AD 0C A3			lda Y
  7808 5470 C9 02			cmp #$02
  7809 5472 B0 03 4C 31 55		jcc l_0FFE
  7810 5477 AD BD A1			lda VAUS.HEIGHT
  7811 547A E9 02			sbc #$02
  7812 547C 85 A1			sta :STACKORIGIN+11
  7813 547E A9 00			lda #$00
  7814 5480 E9 00			sbc #$00
  7815 5482 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7816 5484 AD 0C A3			lda Y
  7817 5487 C5 A1			cmp :STACKORIGIN+11
  7818 5489 A9 00			lda #$00
  7819 548B E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7820 548D 50 02			svc
  7821 548F 49 80			eor #$80
  7822 5491 30 03 4C 31 55		jpl l_0FFE
  7823
  7824 				; optimize OK (service.pas), line = 1396
  7825
  7826 5496 AC BE A1			ldy VAUS.FLASH
  7827 5499 B9 5E 20			lda adr.FLASH,y
  7828 549C 8D 67 A2			sta PUTBYTE.V
  7829 549F AD 0C A3			lda Y
  7830 54A2 18 6D B5 A1			add VAUS.Y
  7831 54A6 A8				tay
  7832 54A7 AD B4 A1			lda VAUS.X
  7833 54AA 18 79 00 C0			add adr.ROW,y
  7834 54AE 8D 63 A2			sta PUTBYTE.DST
  7835 54B1 A9 50			lda #$50
  7836 54B3 79 00 C1			adc adr.ROW+256,y
  7837 54B6 8D 64 A2			sta PUTBYTE.DST+1
  7838 54B9 A9 00			lda #$00
  7839 54BB 69 00			adc #$00
  7840 54BD 8D 65 A2			sta PUTBYTE.DST+2
  7841 54C0 A9 00			lda #$00
  7842 54C2 69 00			adc #$00
  7843 54C4 8D 66 A2			sta PUTBYTE.DST+3
  7844 54C7 20 26 3D			jsr PUTBYTE
  7845
  7846 				; optimize OK (service.pas), line = 1399
  7847
  7848 54CA AC BE A1			ldy VAUS.FLASH
  7849 54CD B9 5E 20			lda adr.FLASH,y
  7850 54D0 8D 67 A2			sta PUTBYTE.V
  7851 54D3 AD B4 A1			lda VAUS.X
  7852 54D6 18 6D BC A1			add VAUS.WIDTH
  7853 54DA 85 A0			sta :STACKORIGIN+10
  7854 54DC A9 50			lda #$50
  7855 54DE 69 00			adc #$00
  7856 54E0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7857 54E2 A9 00			lda #$00
  7858 54E4 69 00			adc #$00
  7859 54E6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7860 54E8 A9 00			lda #$00
  7861 54EA 69 00			adc #$00
  7862 54EC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7863 54EE A5 A0			lda :STACKORIGIN+10
  7864 54F0 38 E9 01			sub #$01
  7865 54F3 85 A0			sta :STACKORIGIN+10
  7866 54F5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7867 54F7 E9 00			sbc #$00
  7868 54F9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7869 54FB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7870 54FD E9 00			sbc #$00
  7871 54FF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7872 5501 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7873 5503 E9 00			sbc #$00
  7874 5505 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7875 5507 AD 0C A3			lda Y
  7876 550A 18 6D B5 A1			add VAUS.Y
  7877 550E A8				tay
  7878 550F A5 A0			lda :STACKORIGIN+10
  7879 5511 18 79 00 C0			add adr.ROW,y
  7880 5515 8D 63 A2			sta PUTBYTE.DST
  7881 5518 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7882 551A 79 00 C1			adc adr.ROW+256,y
  7883 551D 8D 64 A2			sta PUTBYTE.DST+1
  7884 5520 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7885 5522 69 00			adc #$00
  7886 5524 8D 65 A2			sta PUTBYTE.DST+2
  7887 5527 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7888 5529 69 00			adc #$00
  7889 552B 8D 66 A2			sta PUTBYTE.DST+3
  7890 552E 20 26 3D			jsr PUTBYTE
  7891 5531			l_0FFE
  7892
  7893 				; optimize OK (service.pas), line = 1402
  7894
  7895 5531 AD 33 A2			lda HLP
  7896 5534 18 6D BC A1			add VAUS.WIDTH
  7897 5538 8D 33 A2			sta HLP
  7898 553B 90 03			scc
  7899 553D EE 34 A2			inc HLP+1
  7900
  7901 				; --- ForToDoEpilog
  7902 5540 EE 0C A3			inc Y
  7903 5543 F0 03 4C 05 54		jne l_0FAC
  7904 5548			l_0FBA
  7905
  7906 				; ------------------------------------------------------------
  7907
  7908 = A30C			Y	= DATAORIGIN+$02C4
  7909
  7910 = A30C			@VarData	= Y
  7911 = 0001			@VarDataSize	= 1
  7912
  7913 5548			@exit
  7914 					.ifdef @new
  7915 					lda <@VarData
  7916 					sta :ztmp
  7917 					lda >@VarData
  7918 					ldy #@VarDataSize-1
  7919 					jmp @FreeMem
  7920 					els
  7921 5548 60				rts						; ret
  7922 					eif
  7923 				.endl
  7924
  7925 5549			.local	MOVE_VAUS					; PROCEDURE
  7926
  7927 				; optimize OK (service.pas), line = 1413
  7928
  7929 5549 A0 01			ldy #1
  7930 554B AD B7 A1			lda VAUS.OLDX+1
  7931 554E C9 FF			cmp #$FF
  7932 5550 D0 05			bne @+
  7933 5552 AD B6 A1			lda VAUS.OLDX
  7934 5555 C9 FF			cmp #$FF
  7935 				@
  7936 5557 D0 01			bne @+
  7937 5559 88				dey
  7938 				@
  7939 555A 84 9F			sty :STACKORIGIN+9
  7940 555C A0 01			ldy #1
  7941 555E AD B7 A1			lda VAUS.OLDX+1
  7942 5561 C9 00			cmp #$00
  7943 5563 D0 06			bne @+
  7944 5565 AD B6 A1			lda VAUS.OLDX
  7945 5568 CD B4 A1			cmp VAUS.X
  7946 				@
  7947 556B D0 01			bne @+
  7948 556D 88				dey
  7949 				@
  7950 556E 98				tya
  7951 556F 25 9F			and :STACKORIGIN+9
  7952 5571 85 9F			sta :STACKORIGIN+9
  7953 5573 A0 01			ldy #1
  7954 5575 A9 00			lda #$00
  7955 5577 CD BB A1			cmp VAUS.OLDLEN+1
  7956 557A D0 06			bne @+
  7957 557C AD BC A1			lda VAUS.WIDTH
  7958 557F CD BA A1			cmp VAUS.OLDLEN
  7959 				@
  7960 5582 D0 01			bne @+
  7961 5584 88				dey
  7962 				@
  7963 5585 98				tya
  7964 5586 05 9F			ora :STACKORIGIN+9
  7965 5588 F0 03			jeq l_107A
  7966
  7967 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1414
  7968
  7969 558A 20 5E 53			jsr REMOVE_VAUS
  7970 558D			l_107A
  7971
  7972 				; optimize OK (service.pas), line = 1416
  7973
  7974 558D AD B4 A1			lda VAUS.X
  7975 5590 8D B6 A1			sta VAUS.OLDX
  7976 5593 A9 00			lda #$00
  7977 5595 8D B7 A1			sta VAUS.OLDX+1
  7978
  7979 				; optimize OK (service.pas), line = 1417
  7980
  7981 5598 AD B5 A1			lda VAUS.Y
  7982 559B 8D B8 A1			sta VAUS.OLDY
  7983 559E A9 00			lda #$00
  7984 55A0 8D B9 A1			sta VAUS.OLDY+1
  7985
  7986 				; optimize OK (service.pas), line = 1424
  7987
  7988 55A3 A9 D8			lda #$D8
  7989 55A5 38 ED BC A1			sub VAUS.WIDTH
  7990 55A9 8D 77 A2			sta MIN.B
  7991 55AC A9 00			lda #$00
  7992 55AE E9 00			sbc #$00
  7993 55B0 8D 78 A2			sta MIN.B+1
  7994 55B3 AD 0E A3			lda X
  7995 55B6 8D 75 A2			sta MIN.A
  7996 55B9 AD 0F A3			lda X+1
  7997 55BC 8D 76 A2			sta MIN.A+1
  7998 55BF 20 A3 3D			jsr MIN
  7999 55C2 A9 0A			lda #$0A
  8000 55C4 8D 6F A2			sta MAX.A
  8001 55C7 A9 00			lda #$00
  8002 55C9 8D 70 A2			sta MAX.A+1
  8003 55CC AD 79 A2			lda MIN.RESULT
  8004 55CF 8D 71 A2			sta MAX.B
  8005 55D2 AD 7A A2			lda MIN.RESULT+1
  8006 55D5 8D 72 A2			sta MAX.B+1
  8007 55D8 20 78 3D			jsr MAX
  8008 55DB AD 73 A2			lda MAX.RESULT
  8009 55DE 8D B4 A1			sta VAUS.X
  8010
  8011 				; optimize OK (service.pas), line = 1425
  8012
  8013 55E1 A9 C8			lda #$C8
  8014 55E3 38 ED BD A1			sub VAUS.HEIGHT
  8015 55E7 8D 77 A2			sta MIN.B
  8016 55EA A9 00			lda #$00
  8017 55EC E9 00			sbc #$00
  8018 55EE 8D 78 A2			sta MIN.B+1
  8019 55F1 AD 10 A3			lda Y
  8020 55F4 8D 75 A2			sta MIN.A
  8021 55F7 AD 11 A3			lda Y+1
  8022 55FA 8D 76 A2			sta MIN.A+1
  8023 55FD 20 A3 3D			jsr MIN
  8024 5600 A9 0C			lda #$0C
  8025 5602 8D 6F A2			sta MAX.A
  8026 5605 A9 00			lda #$00
  8027 5607 8D 70 A2			sta MAX.A+1
  8028 560A AD 79 A2			lda MIN.RESULT
  8029 560D 8D 71 A2			sta MAX.B
  8030 5610 AD 7A A2			lda MIN.RESULT+1
  8031 5613 8D 72 A2			sta MAX.B+1
  8032 5616 20 78 3D			jsr MAX
  8033 5619 AD 73 A2			lda MAX.RESULT
  8034 561C 8D B5 A1			sta VAUS.Y
  8035
  8036 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1427
  8037
  8038 561F 20 D5 53			jsr PLACE_VAUS
  8039
  8040 				; ------------------------------------------------------------
  8041
  8042 = A30E			X	= DATAORIGIN+$02C6
  8043 = A310			Y	= DATAORIGIN+$02C8
  8044
  8045 = A30E			@VarData	= X
  8046 = 0004			@VarDataSize	= 4
  8047
  8048 5622			@exit
  8049 					.ifdef @new
  8050 					lda <@VarData
  8051 					sta :ztmp
  8052 					lda >@VarData
  8053 					ldy #@VarDataSize-1
  8054 					jmp @FreeMem
  8055 					els
  8056 5622 60				rts						; ret
  8057 					eif
  8058 				.endl
  8059
  8060 5623			.local	REMOVE_BLOCK					; PROCEDURE
  8061
  8062 				; optimize OK (service.pas), line = 1442
  8063
  8064 5623 AD 12 A3			lda XA
  8065 5626 85 9F			sta :STACKORIGIN+9
  8066 5628 A9 00			lda #$00
  8067 562A 06 9F			asl :STACKORIGIN+9
  8068 562C 2A				rol @
  8069 562D 06 9F			asl :STACKORIGIN+9
  8070 562F 2A				rol @
  8071 5630 06 9F			asl :STACKORIGIN+9
  8072 5632 2A				rol @
  8073 5633 06 9F			asl :STACKORIGIN+9
  8074 5635 2A				rol @
  8075 5636 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8076 5638 A5 9F			lda :STACKORIGIN+9
  8077 563A 18 69 09			add #$09
  8078 563D 8D 17 A3			sta XS
  8079 5640 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8080 5642 69 00			adc #$00
  8081 5644 8D 18 A3			sta XS+1
  8082
  8083 				; optimize OK (service.pas), line = 1443
  8084
  8085 5647 AD 13 A3			lda YA
  8086 564A 85 9F			sta :STACKORIGIN+9
  8087 564C A9 00			lda #$00
  8088 564E 06 9F			asl :STACKORIGIN+9
  8089 5650 2A				rol @
  8090 5651 06 9F			asl :STACKORIGIN+9
  8091 5653 2A				rol @
  8092 5654 06 9F			asl :STACKORIGIN+9
  8093 5656 2A				rol @
  8094 5657 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8095 5659 A5 9F			lda :STACKORIGIN+9
  8096 565B 18 69 16			add #$16
  8097 565E 8D 19 A3			sta YS
  8098 5661 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8099 5663 69 00			adc #$00
  8100 5665 8D 1A A3			sta YS+1
  8101
  8102 				; optimize OK (service.pas), line = 1445
  8103
  8104 5668 A9 00			lda #$00
  8105 566A 8D 15 A3			sta Y
  8106
  8107 566D			l_10D2
  8108 				; --- ForToDoCondition
  8109 566D AD 15 A3			lda Y
  8110 5670 C9 08			cmp #$08
  8111 5672 90 03 4C EC 57		jcs l_10E0
  8112
  8113 				; optimize OK (service.pas), line = 1447
  8114
  8115 5677 AD 19 A3			lda YS
  8116 567A 6D 15 A3			adc Y
  8117 567D A8				tay
  8118 567E B9 00 C3			lda adr.MODY,y
  8119 5681 85 86			sta :eax
  8120 5683 A9 00			lda #$00
  8121 5685 85 87			sta :eax+1
  8122 5687 AD C1 A1			lda PATTERN.WIDTH
  8123 568A 85 8E			sta :ecx
  8124 568C AD C2 A1			lda PATTERN.WIDTH+1
  8125 568F 85 8F			sta :ecx+1
  8126 					.ifdef fmulinit
  8127 					fmulu_16
  8128 					els
  8129 5691 20 6C 23			imulCX_AL
  8130 					eif
  8131 5694 A5 86			lda :eax
  8132 5696 8D 1B A3			sta YH
  8133 5699 A5 87			lda :eax+1
  8134 569B 8D 1C A3			sta YH+1
  8135
  8136 				; optimize OK (service.pas), line = 1455
  8137
  8138 569E AD 15 A3			lda Y
  8139 56A1 18 6D 19 A3			add YS
  8140 56A5 A8				tay
  8141 56A6 AD 17 A3			lda XS
  8142 56A9 18 79 00 C0			add adr.ROW,y
  8143 56AD 8D 33 A2			sta HLP
  8144 56B0 AD 18 A3			lda XS+1
  8145 56B3 79 00 C1			adc adr.ROW+256,y
  8146 56B6 8D 34 A2			sta HLP+1
  8147
  8148 				; optimize OK (service.pas), line = 1457
  8149
  8150 56B9 A9 00			lda #$00
  8151 56BB 8D 16 A3			sta I
  8152
  8153 				; optimize OK (service.pas), line = 1459
  8154
  8155 56BE 8D 14 A3			sta X
  8156
  8157 56C1			l_1112
  8158 				; --- ForToDoCondition
  8159 56C1 AD 14 A3			lda X
  8160 56C4 C9 10			cmp #$10
  8161 56C6 90 03 4C 92 57		jcs l_1120
  8162
  8163 				; optimize OK (service.pas), line = 1460
  8164
  8165 56CB 6D 17 A3			adc XS
  8166 56CE 85 9F			sta :STACKORIGIN+9
  8167 56D0 A9 00			lda #$00
  8168 56D2 6D 18 A3			adc XS+1
  8169 56D5 C9 00			cmp #$00
  8170 56D7 D0 04			bne @+
  8171 56D9 A5 9F			lda :STACKORIGIN+9
  8172 56DB C9 D8			cmp #$D8
  8173 				@
  8174 56DD 90 03 4C 8A 57		jcs l_1137
  8175
  8176 				; optimize OK (service.pas), line = 1466
  8177
  8178 56E2 AD 40 A1			lda PLAYSCREEN.OFS
  8179 56E5 6D 33 A2			adc HLP
  8180 56E8 85 9F			sta :STACKORIGIN+9
  8181 56EA AD 41 A1			lda PLAYSCREEN.OFS+1
  8182 56ED 6D 34 A2			adc HLP+1
  8183 56F0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8184 56F2 AD 42 A1			lda PLAYSCREEN.OFS+2
  8185 56F5 69 00			adc #$00
  8186 56F7 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8187 56F9 AD 43 A1			lda PLAYSCREEN.OFS+3
  8188 56FC 69 00			adc #$00
  8189 56FE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8190 5700 A5 9F			lda :STACKORIGIN+9
  8191 5702 18 6D 14 A3			add X
  8192 5706 8D 68 A2			sta GETBYTE.SRC
  8193 5709 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8194 570B 69 00			adc #$00
  8195 570D 8D 69 A2			sta GETBYTE.SRC+1
  8196 5710 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8197 5712 69 00			adc #$00
  8198 5714 8D 6A A2			sta GETBYTE.SRC+2
  8199 5717 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8200 5719 69 00			adc #$00
  8201 571B 8D 6B A2			sta GETBYTE.SRC+3
  8202 571E 20 4E 3D			jsr GETBYTE
  8203 5721 AD 6C A2			lda GETBYTE.RESULT
  8204 5724 29 80			and #$80
  8205 5726 8D 1E A3			sta SHADOW
  8206
  8207 				; optimize OK (service.pas), line = 1470
  8208
  8209 5729 AD 14 A3			lda X
  8210 572C 18 6D 17 A3			add XS
  8211 5730 A8				tay
  8212 5731 B9 00 C4			lda adr.MODX,y
  8213 5734 18 6D C5 A1			add PATTERN.OFS
  8214 5738 85 9F			sta :STACKORIGIN+9
  8215 573A AD C6 A1			lda PATTERN.OFS+1
  8216 573D 69 00			adc #$00
  8217 573F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8218 5741 AD C7 A1			lda PATTERN.OFS+2
  8219 5744 69 00			adc #$00
  8220 5746 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8221 5748 AD C8 A1			lda PATTERN.OFS+3
  8222 574B 69 00			adc #$00
  8223 574D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8224 574F A5 9F			lda :STACKORIGIN+9
  8225 5751 18 6D 1B A3			add YH
  8226 5755 8D 68 A2			sta GETBYTE.SRC
  8227 5758 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8228 575A 6D 1C A3			adc YH+1
  8229 575D 8D 69 A2			sta GETBYTE.SRC+1
  8230 5760 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8231 5762 69 00			adc #$00
  8232 5764 8D 6A A2			sta GETBYTE.SRC+2
  8233 5767 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8234 5769 69 00			adc #$00
  8235 576B 8D 6B A2			sta GETBYTE.SRC+3
  8236 576E 20 4E 3D			jsr GETBYTE
  8237 5771 E8				inx
  8238 5772 AD 6C A2			lda GETBYTE.RESULT
  8239 5775 29 7F			and #$7F
  8240 5777 0D 1E A3			ora SHADOW
  8241 577A 8D 1D A3			sta CL
  8242 577D CA				dex
  8243
  8244 				; optimize OK (service.pas), line = 1472
  8245
  8246 577E AC 16 A3			ldy I
  8247 5781 AD 1D A3			lda CL
  8248 5784 99 00 C2			sta adr.TMP,y
  8249
  8250 				; optimize FAIL (0, service.pas), line = 1473
  8251
  8252 5787 EE 16 A3			inc I
  8253 578A			l_1137
  8254
  8255 				; --- ForToDoEpilog
  8256 578A EE 14 A3			inc X
  8257 578D F0 03 4C C1 56		jne l_1112
  8258 5792			l_1120
  8259
  8260 				; optimize OK (service.pas), line = 1485
  8261
  8262 5792 AD 33 A2			lda HLP
  8263 5795 8D 54 A2			sta BLITTMP.DST
  8264 5798 A9 50			lda #$50
  8265 579A 18 6D 34 A2			add HLP+1
  8266 579E 8D 55 A2			sta BLITTMP.DST+1
  8267 57A1 A9 00			lda #$00
  8268 57A3 69 00			adc #$00
  8269 57A5 8D 56 A2			sta BLITTMP.DST+2
  8270 57A8 A9 00			lda #$00
  8271 57AA 69 00			adc #$00
  8272 57AC 8D 57 A2			sta BLITTMP.DST+3
  8273 57AF AD 16 A3			lda I
  8274 57B2 8D 58 A2			sta BLITTMP.SIZE
  8275 57B5 20 7B 3C			jsr BLITTMP
  8276
  8277 				; optimize OK (service.pas), line = 1486
  8278
  8279 57B8 AD 40 A1			lda PLAYSCREEN.OFS
  8280 57BB 18 6D 33 A2			add HLP
  8281 57BF 8D 54 A2			sta BLITTMP.DST
  8282 57C2 AD 41 A1			lda PLAYSCREEN.OFS+1
  8283 57C5 6D 34 A2			adc HLP+1
  8284 57C8 8D 55 A2			sta BLITTMP.DST+1
  8285 57CB AD 42 A1			lda PLAYSCREEN.OFS+2
  8286 57CE 69 00			adc #$00
  8287 57D0 8D 56 A2			sta BLITTMP.DST+2
  8288 57D3 AD 43 A1			lda PLAYSCREEN.OFS+3
  8289 57D6 69 00			adc #$00
  8290 57D8 8D 57 A2			sta BLITTMP.DST+3
  8291 57DB AD 16 A3			lda I
  8292 57DE 8D 58 A2			sta BLITTMP.SIZE
  8293 57E1 20 7B 3C			jsr BLITTMP
  8294
  8295 				; --- ForToDoEpilog
  8296 57E4 EE 15 A3			inc Y
  8297 57E7 F0 03 4C 6D 56		jne l_10D2
  8298 57EC			l_10E0
  8299
  8300 				; optimize OK (service.pas), line = 1496
  8301
  8302 57EC AD 19 A3			lda YS
  8303 57EF 18 69 04			add #$04
  8304 57F2 8D 15 A3			sta Y
  8305 57F5 AD 19 A3			lda YS
  8306 57F8 18 69 0C			add #$0C
  8307 57FB 8D FF 57			sta @FORTMP_11AB_0
  8308
  8309 57FE			l_11AE
  8310 				; --- ForToDoCondition
  8311 57FE A9 00			lda @FORTMP_11AB_0::#$00
  8312 5800 CD 15 A3			cmp Y
  8313 5803 B0 03 4C 0E 59		jcc l_11BC
  8314
  8315 				; optimize OK (service.pas), line = 1498
  8316
  8317 5808 A9 00			lda #$00
  8318 580A 8D 16 A3			sta I
  8319
  8320 				; optimize OK (service.pas), line = 1499
  8321
  8322 580D AC 15 A3			ldy Y
  8323 5810 B9 00 C0			lda adr.ROW,y
  8324 5813 8D 33 A2			sta HLP
  8325 5816 B9 00 C1			lda adr.ROW+256,y
  8326 5819 8D 34 A2			sta HLP+1
  8327
  8328 				; optimize OK (service.pas), line = 1501
  8329
  8330 581C AD 17 A3			lda XS
  8331 581F 18 69 08			add #$08
  8332 5822 8D 14 A3			sta X
  8333 5825 AD 17 A3			lda XS
  8334 5828 18 69 18			add #$18
  8335 582B 8D 2F 58			sta @FORTMP_11D8_0
  8336
  8337 582E			l_11DB
  8338 				; --- ForToDoCondition
  8339 582E A9 00			lda @FORTMP_11D8_0::#$00
  8340 5830 CD 14 A3			cmp X
  8341 5833 90 5F			jcc l_11E9
  8342
  8343 				; optimize OK (service.pas), line = 1517
  8344
  8345 5835 AD 14 A3			lda X
  8346 5838 C9 D8			cmp #$D8
  8347 583A B0 53			jcs l_11FB
  8348
  8349 				; optimize OK (service.pas), line = 1521
  8350
  8351 583C AD 40 A1			lda PLAYSCREEN.OFS
  8352 583F 6D 33 A2			adc HLP
  8353 5842 85 9F			sta :STACKORIGIN+9
  8354 5844 AD 41 A1			lda PLAYSCREEN.OFS+1
  8355 5847 6D 34 A2			adc HLP+1
  8356 584A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8357 584C AD 42 A1			lda PLAYSCREEN.OFS+2
  8358 584F 69 00			adc #$00
  8359 5851 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8360 5853 AD 43 A1			lda PLAYSCREEN.OFS+3
  8361 5856 69 00			adc #$00
  8362 5858 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8363 585A A5 9F			lda :STACKORIGIN+9
  8364 585C 18 6D 14 A3			add X
  8365 5860 8D 68 A2			sta GETBYTE.SRC
  8366 5863 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8367 5865 69 00			adc #$00
  8368 5867 8D 69 A2			sta GETBYTE.SRC+1
  8369 586A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8370 586C 69 00			adc #$00
  8371 586E 8D 6A A2			sta GETBYTE.SRC+2
  8372 5871 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8373 5873 69 00			adc #$00
  8374 5875 8D 6B A2			sta GETBYTE.SRC+3
  8375 5878 20 4E 3D			jsr GETBYTE
  8376 587B AD 6C A2			lda GETBYTE.RESULT
  8377 587E 09 80			ora #$80
  8378 5880 8D 1D A3			sta CL
  8379
  8380 				; optimize OK (service.pas), line = 1523
  8381
  8382 5883 AC 16 A3			ldy I
  8383 5886 AD 1D A3			lda CL
  8384 5889 99 00 C2			sta adr.TMP,y
  8385
  8386 				; optimize FAIL (0, service.pas), line = 1524
  8387
  8388 588C EE 16 A3			inc I
  8389 588F			l_11FB
  8390
  8391 				; --- ForToDoEpilog
  8392 588F EE 14 A3			inc X
  8393 5892 D0 9A			jne l_11DB
  8394 5894			l_11E9
  8395
  8396 				; optimize OK (service.pas), line = 1536
  8397
  8398 5894 AD 17 A3			lda XS
  8399 5897 18 69 08			add #$08
  8400 589A 85 9F			sta :STACKORIGIN+9
  8401 589C AD 18 A3			lda XS+1
  8402 589F 69 00			adc #$00
  8403 58A1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8404 58A3 AD 33 A2			lda HLP
  8405 58A6 18 65 9F			add :STACKORIGIN+9
  8406 58A9 8D 33 A2			sta HLP
  8407 58AC AD 34 A2			lda HLP+1
  8408 58AF 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8409 58B1 8D 34 A2			sta HLP+1
  8410
  8411 				; optimize OK (service.pas), line = 1538
  8412
  8413 58B4 AD 33 A2			lda HLP
  8414 58B7 8D 54 A2			sta BLITTMP.DST
  8415 58BA A9 50			lda #$50
  8416 58BC 18 6D 34 A2			add HLP+1
  8417 58C0 8D 55 A2			sta BLITTMP.DST+1
  8418 58C3 A9 00			lda #$00
  8419 58C5 69 00			adc #$00
  8420 58C7 8D 56 A2			sta BLITTMP.DST+2
  8421 58CA A9 00			lda #$00
  8422 58CC 69 00			adc #$00
  8423 58CE 8D 57 A2			sta BLITTMP.DST+3
  8424 58D1 AD 16 A3			lda I
  8425 58D4 8D 58 A2			sta BLITTMP.SIZE
  8426 58D7 20 7B 3C			jsr BLITTMP
  8427
  8428 				; optimize OK (service.pas), line = 1539
  8429
  8430 58DA AD 40 A1			lda PLAYSCREEN.OFS
  8431 58DD 18 6D 33 A2			add HLP
  8432 58E1 8D 54 A2			sta BLITTMP.DST
  8433 58E4 AD 41 A1			lda PLAYSCREEN.OFS+1
  8434 58E7 6D 34 A2			adc HLP+1
  8435 58EA 8D 55 A2			sta BLITTMP.DST+1
  8436 58ED AD 42 A1			lda PLAYSCREEN.OFS+2
  8437 58F0 69 00			adc #$00
  8438 58F2 8D 56 A2			sta BLITTMP.DST+2
  8439 58F5 AD 43 A1			lda PLAYSCREEN.OFS+3
  8440 58F8 69 00			adc #$00
  8441 58FA 8D 57 A2			sta BLITTMP.DST+3
  8442 58FD AD 16 A3			lda I
  8443 5900 8D 58 A2			sta BLITTMP.SIZE
  8444 5903 20 7B 3C			jsr BLITTMP
  8445
  8446 				; --- ForToDoEpilog
  8447 5906 EE 15 A3			inc Y
  8448 5909 F0 03 4C FE 57		jne l_11AE
  8449 590E			l_11BC
  8450
  8451 				; ------------------------------------------------------------
  8452
  8453 = A312			XA	= DATAORIGIN+$02CA
  8454 = A313			YA	= DATAORIGIN+$02CB
  8455 = A314			X	= DATAORIGIN+$02CC
  8456 = A315			Y	= DATAORIGIN+$02CD
  8457 = A316			I	= DATAORIGIN+$02CE
  8458 = A317			XS	= DATAORIGIN+$02CF
  8459 = A319			YS	= DATAORIGIN+$02D1
  8460 = A31B			YH	= DATAORIGIN+$02D3
  8461 = A31D			CL	= DATAORIGIN+$02D5
  8462 = A31E			SHADOW	= DATAORIGIN+$02D6
  8463
  8464 = A312			@VarData	= XA
  8465 = 000D			@VarDataSize	= 13
  8466
  8467 590E			@exit
  8468 					.ifdef @new
  8469 					lda <@VarData
  8470 					sta :ztmp
  8471 					lda >@VarData
  8472 					ldy #@VarDataSize-1
  8473 					jmp @FreeMem
  8474 					els
  8475 590E 60				rts						; ret
  8476 					eif
  8477 				.endl
  8478
  8479 590F			.local	PLACE_BLOCK					; PROCEDURE
  8480
  8481 				; optimize OK (service.pas), line = 1556
  8482
  8483 590F AD 21 A3			lda XA
  8484 5912 85 9F			sta :STACKORIGIN+9
  8485 5914 A9 00			lda #$00
  8486 5916 06 9F			asl :STACKORIGIN+9
  8487 5918 2A				rol @
  8488 5919 06 9F			asl :STACKORIGIN+9
  8489 591B 2A				rol @
  8490 591C 06 9F			asl :STACKORIGIN+9
  8491 591E 2A				rol @
  8492 591F 06 9F			asl :STACKORIGIN+9
  8493 5921 2A				rol @
  8494 5922 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8495 5924 A5 9F			lda :STACKORIGIN+9
  8496 5926 18 69 09			add #$09
  8497 5929 8D 27 A3			sta XS
  8498 592C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8499 592E 69 00			adc #$00
  8500 5930 8D 28 A3			sta XS+1
  8501
  8502 				; optimize OK (service.pas), line = 1557
  8503
  8504 5933 AD 22 A3			lda YA
  8505 5936 85 9F			sta :STACKORIGIN+9
  8506 5938 A9 00			lda #$00
  8507 593A 06 9F			asl :STACKORIGIN+9
  8508 593C 2A				rol @
  8509 593D 06 9F			asl :STACKORIGIN+9
  8510 593F 2A				rol @
  8511 5940 06 9F			asl :STACKORIGIN+9
  8512 5942 2A				rol @
  8513 5943 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8514 5945 A5 9F			lda :STACKORIGIN+9
  8515 5947 18 69 16			add #$16
  8516 594A 8D 29 A3			sta YS
  8517 594D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8518 594F 69 00			adc #$00
  8519 5951 8D 2A A3			sta YS+1
  8520
  8521 				; optimize OK (service.pas), line = 1559
  8522
  8523 5954 A9 00			lda #$00
  8524 5956 8D 25 A3			sta Y
  8525
  8526 5959			l_126C
  8527 				; --- ForToDoCondition
  8528 5959 AD 25 A3			lda Y
  8529 595C C9 08			cmp #$08
  8530 595E 90 03 4C 6C 5A		jcs l_127A
  8531
  8532 				; optimize OK (service.pas), line = 1561
  8533
  8534 5963 AD 29 A3			lda YS
  8535 5966 6D 25 A3			adc Y
  8536 5969 A8				tay
  8537 596A AD 27 A3			lda XS
  8538 596D 18 79 00 C0			add adr.ROW,y
  8539 5971 8D 33 A2			sta HLP
  8540 5974 AD 28 A3			lda XS+1
  8541 5977 79 00 C1			adc adr.ROW+256,y
  8542 597A 8D 34 A2			sta HLP+1
  8543
  8544 				; optimize OK (service.pas), line = 1563
  8545
  8546 597D A9 00			lda #$00
  8547 597F 8D 24 A3			sta X
  8548
  8549 5982			l_1295
  8550 				; --- ForToDoCondition
  8551 5982 AD 24 A3			lda X
  8552 5985 C9 10			cmp #$10
  8553 5987 90 03 4C 14 5A		jcs l_12A3
  8554
  8555 				; optimize OK (service.pas), line = 1568
  8556
  8557 598C AD 40 A1			lda PLAYSCREEN.OFS
  8558 598F 6D 33 A2			adc HLP
  8559 5992 85 9F			sta :STACKORIGIN+9
  8560 5994 AD 41 A1			lda PLAYSCREEN.OFS+1
  8561 5997 6D 34 A2			adc HLP+1
  8562 599A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8563 599C AD 42 A1			lda PLAYSCREEN.OFS+2
  8564 599F 69 00			adc #$00
  8565 59A1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8566 59A3 AD 43 A1			lda PLAYSCREEN.OFS+3
  8567 59A6 69 00			adc #$00
  8568 59A8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8569 59AA A5 9F			lda :STACKORIGIN+9
  8570 59AC 18 6D 24 A3			add X
  8571 59B0 8D 68 A2			sta GETBYTE.SRC
  8572 59B3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8573 59B5 69 00			adc #$00
  8574 59B7 8D 69 A2			sta GETBYTE.SRC+1
  8575 59BA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8576 59BC 69 00			adc #$00
  8577 59BE 8D 6A A2			sta GETBYTE.SRC+2
  8578 59C1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8579 59C3 69 00			adc #$00
  8580 59C5 8D 6B A2			sta GETBYTE.SRC+3
  8581 59C8 20 4E 3D			jsr GETBYTE
  8582 59CB AD 6C A2			lda GETBYTE.RESULT
  8583 59CE 29 80			and #$80
  8584 59D0 8D 2D A3			sta SHADOW
  8585
  8586 				; optimize OK (service.pas), line = 1570
  8587
  8588 59D3 AD 25 A3			lda Y
  8589 59D6 C9 07			cmp #$07
  8590 59D8 B0 29			jcs l_12D5
  8591 59DA AD 24 A3			lda X
  8592 59DD C9 0F			cmp #$0F
  8593 59DF B0 22			jcs l_12D5
  8594
  8595 				; optimize OK (service.pas), line = 1575
  8596
  8597 59E1 AD 23 A3			lda BLOCK
  8598 59E4 38 E9 01			sub #$01
  8599 59E7 85 9F			sta :STACKORIGIN+9
  8600 59E9 A9 00			lda #$00
  8601 59EB E9 00			sbc #$00
  8602 59ED A5 9F			lda :STACKORIGIN+9
  8603 59EF 29 0F			and #$0F
  8604 59F1 A8				tay
  8605 59F2 B9 88 20			lda adr.COLORBLOCK,y
  8606 59F5 29 7F			and #$7F
  8607 59F7 0D 2D A3			ora SHADOW
  8608 59FA 8D 2B A3			sta CL
  8609
  8610 				; optimize OK (service.pas), line = 1577
  8611
  8612 59FD AC 24 A3			ldy X
  8613 5A00 4C 09 5A			jmp l_1303
  8614 5A03			l_12D5
  8615
  8616 				; optimize OK (service.pas), line = 1590
  8617
  8618 5A03 AC 24 A3			ldy X
  8619 5A06 AD 2D A3			lda SHADOW
  8620 5A09			l_1303
  8621 5A09 99 00 C2			sta adr.TMP,y
  8622
  8623 				; --- ForToDoEpilog
  8624 5A0C EE 24 A3			inc X
  8625 5A0F F0 03 4C 82 59		jne l_1295
  8626 5A14			l_12A3
  8627
  8628 				; optimize OK (service.pas), line = 1601
  8629
  8630 5A14 AD 33 A2			lda HLP
  8631 5A17 8D 54 A2			sta BLITTMP.DST
  8632 5A1A A9 50			lda #$50
  8633 5A1C 18 6D 34 A2			add HLP+1
  8634 5A20 8D 55 A2			sta BLITTMP.DST+1
  8635 5A23 A9 00			lda #$00
  8636 5A25 69 00			adc #$00
  8637 5A27 8D 56 A2			sta BLITTMP.DST+2
  8638 5A2A A9 00			lda #$00
  8639 5A2C 69 00			adc #$00
  8640 5A2E 8D 57 A2			sta BLITTMP.DST+3
  8641 5A31 A9 10			lda #$10
  8642 5A33 8D 58 A2			sta BLITTMP.SIZE
  8643 5A36 20 7B 3C			jsr BLITTMP
  8644
  8645 				; optimize OK (service.pas), line = 1602
  8646
  8647 5A39 AD 40 A1			lda PLAYSCREEN.OFS
  8648 5A3C 18 6D 33 A2			add HLP
  8649 5A40 8D 54 A2			sta BLITTMP.DST
  8650 5A43 AD 41 A1			lda PLAYSCREEN.OFS+1
  8651 5A46 6D 34 A2			adc HLP+1
  8652 5A49 8D 55 A2			sta BLITTMP.DST+1
  8653 5A4C AD 42 A1			lda PLAYSCREEN.OFS+2
  8654 5A4F 69 00			adc #$00
  8655 5A51 8D 56 A2			sta BLITTMP.DST+2
  8656 5A54 AD 43 A1			lda PLAYSCREEN.OFS+3
  8657 5A57 69 00			adc #$00
  8658 5A59 8D 57 A2			sta BLITTMP.DST+3
  8659 5A5C A9 10			lda #$10
  8660 5A5E 8D 58 A2			sta BLITTMP.SIZE
  8661 5A61 20 7B 3C			jsr BLITTMP
  8662
  8663 				; --- ForToDoEpilog
  8664 5A64 EE 25 A3			inc Y
  8665 5A67 F0 03 4C 59 59		jne l_126C
  8666 5A6C			l_127A
  8667
  8668 				; optimize OK (service.pas), line = 1608
  8669
  8670 5A6C AD 29 A3			lda YS
  8671 5A6F 18 69 04			add #$04
  8672 5A72 8D 25 A3			sta Y
  8673 5A75 AD 29 A3			lda YS
  8674 5A78 18 69 0C			add #$0C
  8675 5A7B 8D 7F 5A			sta @FORTMP_1336_0
  8676
  8677 5A7E			l_1339
  8678 				; --- ForToDoCondition
  8679 5A7E A9 00			lda @FORTMP_1336_0::#$00
  8680 5A80 CD 25 A3			cmp Y
  8681 5A83 B0 03 4C 8E 5B		jcc l_1347
  8682
  8683 				; optimize OK (service.pas), line = 1610
  8684
  8685 5A88 A9 00			lda #$00
  8686 5A8A 8D 26 A3			sta I
  8687
  8688 				; optimize OK (service.pas), line = 1611
  8689
  8690 5A8D AC 25 A3			ldy Y
  8691 5A90 B9 00 C0			lda adr.ROW,y
  8692 5A93 8D 33 A2			sta HLP
  8693 5A96 B9 00 C1			lda adr.ROW+256,y
  8694 5A99 8D 34 A2			sta HLP+1
  8695
  8696 				; optimize OK (service.pas), line = 1613
  8697
  8698 5A9C AD 27 A3			lda XS
  8699 5A9F 18 69 08			add #$08
  8700 5AA2 8D 24 A3			sta X
  8701 5AA5 AD 27 A3			lda XS
  8702 5AA8 18 69 18			add #$18
  8703 5AAB 8D AF 5A			sta @FORTMP_1363_0
  8704
  8705 5AAE			l_1366
  8706 				; --- ForToDoCondition
  8707 5AAE A9 00			lda @FORTMP_1363_0::#$00
  8708 5AB0 CD 24 A3			cmp X
  8709 5AB3 90 5F			jcc l_1374
  8710
  8711 				; optimize OK (service.pas), line = 1614
  8712
  8713 5AB5 AD 24 A3			lda X
  8714 5AB8 C9 D8			cmp #$D8
  8715 5ABA B0 53			jcs l_1386
  8716
  8717 				; optimize OK (service.pas), line = 1622
  8718
  8719 5ABC AD 40 A1			lda PLAYSCREEN.OFS
  8720 5ABF 6D 33 A2			adc HLP
  8721 5AC2 85 9F			sta :STACKORIGIN+9
  8722 5AC4 AD 41 A1			lda PLAYSCREEN.OFS+1
  8723 5AC7 6D 34 A2			adc HLP+1
  8724 5ACA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8725 5ACC AD 42 A1			lda PLAYSCREEN.OFS+2
  8726 5ACF 69 00			adc #$00
  8727 5AD1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8728 5AD3 AD 43 A1			lda PLAYSCREEN.OFS+3
  8729 5AD6 69 00			adc #$00
  8730 5AD8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8731 5ADA A5 9F			lda :STACKORIGIN+9
  8732 5ADC 18 6D 24 A3			add X
  8733 5AE0 8D 68 A2			sta GETBYTE.SRC
  8734 5AE3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8735 5AE5 69 00			adc #$00
  8736 5AE7 8D 69 A2			sta GETBYTE.SRC+1
  8737 5AEA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8738 5AEC 69 00			adc #$00
  8739 5AEE 8D 6A A2			sta GETBYTE.SRC+2
  8740 5AF1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8741 5AF3 69 00			adc #$00
  8742 5AF5 8D 6B A2			sta GETBYTE.SRC+3
  8743 5AF8 20 4E 3D			jsr GETBYTE
  8744 5AFB AD 6C A2			lda GETBYTE.RESULT
  8745 5AFE 29 7F			and #$7F
  8746 5B00 8D 2B A3			sta CL
  8747
  8748 				; optimize OK (service.pas), line = 1624
  8749
  8750 5B03 AC 26 A3			ldy I
  8751 5B06 AD 2B A3			lda CL
  8752 5B09 99 00 C2			sta adr.TMP,y
  8753
  8754 				; optimize FAIL (0, service.pas), line = 1626
  8755
  8756 5B0C EE 26 A3			inc I
  8757 5B0F			l_1386
  8758
  8759 				; --- ForToDoEpilog
  8760 5B0F EE 24 A3			inc X
  8761 5B12 D0 9A			jne l_1366
  8762 5B14			l_1374
  8763
  8764 				; optimize OK (service.pas), line = 1637
  8765
  8766 5B14 AD 27 A3			lda XS
  8767 5B17 18 69 08			add #$08
  8768 5B1A 85 9F			sta :STACKORIGIN+9
  8769 5B1C AD 28 A3			lda XS+1
  8770 5B1F 69 00			adc #$00
  8771 5B21 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8772 5B23 AD 33 A2			lda HLP
  8773 5B26 18 65 9F			add :STACKORIGIN+9
  8774 5B29 8D 33 A2			sta HLP
  8775 5B2C AD 34 A2			lda HLP+1
  8776 5B2F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8777 5B31 8D 34 A2			sta HLP+1
  8778
  8779 				; optimize OK (service.pas), line = 1639
  8780
  8781 5B34 AD 33 A2			lda HLP
  8782 5B37 8D 54 A2			sta BLITTMP.DST
  8783 5B3A A9 50			lda #$50
  8784 5B3C 18 6D 34 A2			add HLP+1
  8785 5B40 8D 55 A2			sta BLITTMP.DST+1
  8786 5B43 A9 00			lda #$00
  8787 5B45 69 00			adc #$00
  8788 5B47 8D 56 A2			sta BLITTMP.DST+2
  8789 5B4A A9 00			lda #$00
  8790 5B4C 69 00			adc #$00
  8791 5B4E 8D 57 A2			sta BLITTMP.DST+3
  8792 5B51 AD 26 A3			lda I
  8793 5B54 8D 58 A2			sta BLITTMP.SIZE
  8794 5B57 20 7B 3C			jsr BLITTMP
  8795
  8796 				; optimize OK (service.pas), line = 1640
  8797
  8798 5B5A AD 40 A1			lda PLAYSCREEN.OFS
  8799 5B5D 18 6D 33 A2			add HLP
  8800 5B61 8D 54 A2			sta BLITTMP.DST
  8801 5B64 AD 41 A1			lda PLAYSCREEN.OFS+1
  8802 5B67 6D 34 A2			adc HLP+1
  8803 5B6A 8D 55 A2			sta BLITTMP.DST+1
  8804 5B6D AD 42 A1			lda PLAYSCREEN.OFS+2
  8805 5B70 69 00			adc #$00
  8806 5B72 8D 56 A2			sta BLITTMP.DST+2
  8807 5B75 AD 43 A1			lda PLAYSCREEN.OFS+3
  8808 5B78 69 00			adc #$00
  8809 5B7A 8D 57 A2			sta BLITTMP.DST+3
  8810 5B7D AD 26 A3			lda I
  8811 5B80 8D 58 A2			sta BLITTMP.SIZE
  8812 5B83 20 7B 3C			jsr BLITTMP
  8813
  8814 				; --- ForToDoEpilog
  8815 5B86 EE 25 A3			inc Y
  8816 5B89 F0 03 4C 7E 5A		jne l_1339
  8817 5B8E			l_1347
  8818
  8819 				; optimize OK (service.pas), line = 1645
  8820
  8821 5B8E AD 23 A3			lda BLOCK
  8822 5B91 C9 09			cmp #$09
  8823 5B93 B0 03 4C 4C 5D		jcc l_13E0
  8824
  8825 				; optimize OK (service.pas), line = 1647
  8826
  8827 5B98 A9 00			lda #$00
  8828 5B9A 8D 2C A3			sta CL2
  8829
  8830 				; optimize OK (service.pas), line = 1648
  8831
  8832 5B9D AD 23 A3			lda BLOCK
  8833 5BA0 29 0F			and #$0F
  8834 5BA2 C9 09			cmp #$09
  8835 5BA4 D0 19			jne l_13FB
  8836
  8837 				; optimize OK (service.pas), line = 1650
  8838
  8839 5BA6 A9 CA			lda #$CA
  8840 5BA8 8D 2C A3			sta CL2
  8841
  8842 				; optimize OK (service.pas), line = 1651
  8843
  8844 5BAB AD 22 A3			lda YA
  8845 5BAE 0A				asl @
  8846 5BAF 0A				asl @
  8847 5BB0 0A				asl @
  8848 5BB1 0A				asl @
  8849 5BB2 18 6D 21 A3			add XA
  8850 5BB6 A8				tay
  8851 5BB7 A9 19			lda #$19
  8852 5BB9 99 00 DB			sta adr.WALL,y
  8853 5BBC 4C CB 5B			jmp l_141A
  8854 5BBF			l_13FB
  8855
  8856 				; optimize OK (service.pas), line = 1657
  8857
  8858 5BBF AD 23 A3			lda BLOCK
  8859 5BC2 C9 0A			cmp #$0A
  8860 5BC4 D0 05			jne l_142C
  8861 5BC6 A9 C9			lda #$C9
  8862 5BC8 8D 2C A3			sta CL2
  8863 5BCB			l_141A
  8864 5BCB			l_142C
  8865
  8866 				; optimize OK (service.pas), line = 1661
  8867
  8868 5BCB A9 00			lda #$00
  8869 5BCD 8D 25 A3			sta Y
  8870
  8871 5BD0			l_143C
  8872 				; --- ForToDoCondition
  8873 5BD0 AD 25 A3			lda Y
  8874 5BD3 C9 07			cmp #$07
  8875 5BD5 90 03 4C 84 5C		jcs l_144A
  8876
  8877 				; optimize OK (service.pas), line = 1664
  8878
  8879 5BDA 6D 29 A3			adc YS
  8880 5BDD A8				tay
  8881 5BDE AD 27 A3			lda XS
  8882 5BE1 18 79 00 C0			add adr.ROW,y
  8883 5BE5 8D 33 A2			sta HLP
  8884 5BE8 AD 28 A3			lda XS+1
  8885 5BEB 79 00 C1			adc adr.ROW+256,y
  8886 5BEE 8D 34 A2			sta HLP+1
  8887
  8888 				; optimize OK (service.pas), line = 1669
  8889
  8890 5BF1 AD 40 A1			lda PLAYSCREEN.OFS
  8891 5BF4 18 6D 33 A2			add HLP
  8892 5BF8 8D 68 A2			sta GETBYTE.SRC
  8893 5BFB AD 41 A1			lda PLAYSCREEN.OFS+1
  8894 5BFE 6D 34 A2			adc HLP+1
  8895 5C01 8D 69 A2			sta GETBYTE.SRC+1
  8896 5C04 AD 42 A1			lda PLAYSCREEN.OFS+2
  8897 5C07 69 00			adc #$00
  8898 5C09 8D 6A A2			sta GETBYTE.SRC+2
  8899 5C0C AD 43 A1			lda PLAYSCREEN.OFS+3
  8900 5C0F 69 00			adc #$00
  8901 5C11 8D 6B A2			sta GETBYTE.SRC+3
  8902 5C14 20 4E 3D			jsr GETBYTE
  8903 5C17 AD 6C A2			lda GETBYTE.RESULT
  8904 5C1A 29 80			and #$80
  8905 5C1C 8D 2B A3			sta CL
  8906
  8907 				; optimize OK (service.pas), line = 1671
  8908
  8909 5C1F AD 2C A3			lda CL2
  8910 5C22 29 7F			and #$7F
  8911 5C24 0D 2B A3			ora CL
  8912 5C27 8D 2C A3			sta CL2
  8913
  8914 				; optimize OK (service.pas), line = 1675
  8915
  8916 5C2A AD 33 A2			lda HLP
  8917 5C2D 8D 63 A2			sta PUTBYTE.DST
  8918 5C30 A9 50			lda #$50
  8919 5C32 18 6D 34 A2			add HLP+1
  8920 5C36 8D 64 A2			sta PUTBYTE.DST+1
  8921 5C39 A9 00			lda #$00
  8922 5C3B 69 00			adc #$00
  8923 5C3D 8D 65 A2			sta PUTBYTE.DST+2
  8924 5C40 A9 00			lda #$00
  8925 5C42 69 00			adc #$00
  8926 5C44 8D 66 A2			sta PUTBYTE.DST+3
  8927 5C47 AD 2C A3			lda CL2
  8928 5C4A 8D 67 A2			sta PUTBYTE.V
  8929 5C4D 20 26 3D			jsr PUTBYTE
  8930
  8931 				; optimize OK (service.pas), line = 1679
  8932
  8933 5C50 AD 40 A1			lda PLAYSCREEN.OFS
  8934 5C53 18 6D 33 A2			add HLP
  8935 5C57 8D 63 A2			sta PUTBYTE.DST
  8936 5C5A AD 41 A1			lda PLAYSCREEN.OFS+1
  8937 5C5D 6D 34 A2			adc HLP+1
  8938 5C60 8D 64 A2			sta PUTBYTE.DST+1
  8939 5C63 AD 42 A1			lda PLAYSCREEN.OFS+2
  8940 5C66 69 00			adc #$00
  8941 5C68 8D 65 A2			sta PUTBYTE.DST+2
  8942 5C6B AD 43 A1			lda PLAYSCREEN.OFS+3
  8943 5C6E 69 00			adc #$00
  8944 5C70 8D 66 A2			sta PUTBYTE.DST+3
  8945 5C73 AD 2C A3			lda CL2
  8946 5C76 8D 67 A2			sta PUTBYTE.V
  8947 5C79 20 26 3D			jsr PUTBYTE
  8948
  8949 				; --- ForToDoEpilog
  8950 5C7C EE 25 A3			inc Y
  8951 5C7F F0 03 4C D0 5B		jne l_143C
  8952 5C84			l_144A
  8953
  8954 				; optimize OK (service.pas), line = 1682
  8955
  8956 5C84 AC 29 A3			ldy YS
  8957 5C87 AD 27 A3			lda XS
  8958 5C8A 18 79 00 C0			add adr.ROW,y
  8959 5C8E 8D 33 A2			sta HLP
  8960 5C91 AD 28 A3			lda XS+1
  8961 5C94 79 00 C1			adc adr.ROW+256,y
  8962 5C97 8D 34 A2			sta HLP+1
  8963
  8964 				; optimize OK (service.pas), line = 1685
  8965
  8966 5C9A A9 00			lda #$00
  8967 5C9C A8				tay
  8968
  8969 5C9D			l_14A8
  8970 				; --- ForToDoCondition
  8971 5C9D 8C 24 A3			sty X
  8972 5CA0 C0 0F			cpy #$0F
  8973 5CA2 B0 58			jcs l_14B6
  8974
  8975 				; optimize OK (service.pas), line = 1690
  8976
  8977 5CA4 AD 40 A1			lda PLAYSCREEN.OFS
  8978 5CA7 6D 33 A2			adc HLP
  8979 5CAA 85 9F			sta :STACKORIGIN+9
  8980 5CAC AD 41 A1			lda PLAYSCREEN.OFS+1
  8981 5CAF 6D 34 A2			adc HLP+1
  8982 5CB2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8983 5CB4 AD 42 A1			lda PLAYSCREEN.OFS+2
  8984 5CB7 69 00			adc #$00
  8985 5CB9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8986 5CBB AD 43 A1			lda PLAYSCREEN.OFS+3
  8987 5CBE 69 00			adc #$00
  8988 5CC0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8989 5CC2 A5 9F			lda :STACKORIGIN+9
  8990 5CC4 18 6D 24 A3			add X
  8991 5CC8 8D 68 A2			sta GETBYTE.SRC
  8992 5CCB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8993 5CCD 69 00			adc #$00
  8994 5CCF 8D 69 A2			sta GETBYTE.SRC+1
  8995 5CD2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8996 5CD4 69 00			adc #$00
  8997 5CD6 8D 6A A2			sta GETBYTE.SRC+2
  8998 5CD9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8999 5CDB 69 00			adc #$00
  9000 5CDD 8D 6B A2			sta GETBYTE.SRC+3
  9001 5CE0 20 4E 3D			jsr GETBYTE
  9002 5CE3 AD 6C A2			lda GETBYTE.RESULT
  9003 5CE6 29 80			and #$80
  9004 5CE8 8D 2B A3			sta CL
  9005
  9006 				; optimize OK (service.pas), line = 1692
  9007
  9008 5CEB AD 2C A3			lda CL2
  9009 5CEE 29 7F			and #$7F
  9010 5CF0 0D 2B A3			ora CL
  9011 5CF3 AC 24 A3			ldy X
  9012 5CF6 99 00 C2			sta adr.TMP,y
  9013
  9014 				; --- ForToDoEpilog
  9015 5CF9 C8				iny
  9016 5CFA D0 A1			jne l_14A8
  9017 5CFC			l_14B6
  9018
  9019 				; optimize OK (service.pas), line = 1701
  9020
  9021 5CFC AD 33 A2			lda HLP
  9022 5CFF 8D 54 A2			sta BLITTMP.DST
  9023 5D02 A9 50			lda #$50
  9024 5D04 18 6D 34 A2			add HLP+1
  9025 5D08 8D 55 A2			sta BLITTMP.DST+1
  9026 5D0B A9 00			lda #$00
  9027 5D0D 69 00			adc #$00
  9028 5D0F 8D 56 A2			sta BLITTMP.DST+2
  9029 5D12 A9 00			lda #$00
  9030 5D14 69 00			adc #$00
  9031 5D16 8D 57 A2			sta BLITTMP.DST+3
  9032 5D19 A9 0F			lda #$0F
  9033 5D1B 8D 58 A2			sta BLITTMP.SIZE
  9034 5D1E 20 7B 3C			jsr BLITTMP
  9035
  9036 				; optimize OK (service.pas), line = 1702
  9037
  9038 5D21 AD 40 A1			lda PLAYSCREEN.OFS
  9039 5D24 18 6D 33 A2			add HLP
  9040 5D28 8D 54 A2			sta BLITTMP.DST
  9041 5D2B AD 41 A1			lda PLAYSCREEN.OFS+1
  9042 5D2E 6D 34 A2			adc HLP+1
  9043 5D31 8D 55 A2			sta BLITTMP.DST+1
  9044 5D34 AD 42 A1			lda PLAYSCREEN.OFS+2
  9045 5D37 69 00			adc #$00
  9046 5D39 8D 56 A2			sta BLITTMP.DST+2
  9047 5D3C AD 43 A1			lda PLAYSCREEN.OFS+3
  9048 5D3F 69 00			adc #$00
  9049 5D41 8D 57 A2			sta BLITTMP.DST+3
  9050 5D44 A9 0F			lda #$0F
  9051 5D46 8D 58 A2			sta BLITTMP.SIZE
  9052 5D49 20 7B 3C			jsr BLITTMP
  9053 5D4C			l_13E0
  9054
  9055 				; ------------------------------------------------------------
  9056
  9057 = A321			XA	= DATAORIGIN+$02D9
  9058 = A322			YA	= DATAORIGIN+$02DA
  9059 = A323			BLOCK	= DATAORIGIN+$02DB
  9060 = A324			X	= DATAORIGIN+$02DC
  9061 = A325			Y	= DATAORIGIN+$02DD
  9062 = A326			I	= DATAORIGIN+$02DE
  9063 = A327			XS	= DATAORIGIN+$02DF
  9064 = A329			YS	= DATAORIGIN+$02E1
  9065 = A32B			CL	= DATAORIGIN+$02E3
  9066 = A32C			CL2	= DATAORIGIN+$02E4
  9067 = A32D			SHADOW	= DATAORIGIN+$02E5
  9068
  9069 = A321			@VarData	= XA
  9070 = 000D			@VarDataSize	= 13
  9071
  9072 5D4C			@exit
  9073 					.ifdef @new
  9074 					lda <@VarData
  9075 					sta :ztmp
  9076 					lda >@VarData
  9077 					ldy #@VarDataSize-1
  9078 					jmp @FreeMem
  9079 					els
  9080 5D4C 60				rts						; ret
  9081 					eif
  9082 				.endl
  9083
  9084 5D4D			.local	PUT_WALL					; PROCEDURE
  9085
  9086 				; optimize OK (service.pas), line = 1714
  9087
  9088 5D4D A9 00			lda #$00
  9089 5D4F 8D 31 A3			sta Y
  9090
  9091 5D52			l_1501
  9092 				; --- ForToDoCondition
  9093 5D52 AD 31 A3			lda Y
  9094 5D55 C9 0F			cmp #$0F
  9095 5D57 B0 48			jcs l_150F
  9096
  9097 				; optimize OK (service.pas), line = 1715
  9098
  9099 5D59 A9 00			lda #$00
  9100 5D5B 8D 30 A3			sta X
  9101
  9102 5D5E			l_1518
  9103 				; --- ForToDoCondition
  9104 5D5E AD 30 A3			lda X
  9105 5D61 C9 0D			cmp #$0D
  9106 5D63 B0 37			jcs l_1526
  9107
  9108 				; optimize OK (service.pas), line = 1716
  9109
  9110 5D65 AD 31 A3			lda Y
  9111 5D68 0A				asl @
  9112 5D69 0A				asl @
  9113 5D6A 0A				asl @
  9114 5D6B 0A				asl @
  9115 5D6C 18 6D 30 A3			add X
  9116 5D70 A8				tay
  9117 5D71 B9 00 DB			lda adr.WALL,y
  9118 5D74 F0 21			jeq l_1545
  9119 5D76 AD 31 A3			lda Y
  9120 5D79 0A				asl @
  9121 5D7A 0A				asl @
  9122 5D7B 0A				asl @
  9123 5D7C 0A				asl @
  9124 5D7D 18 6D 30 A3			add X
  9125 5D81 A8				tay
  9126 5D82 B9 00 DB			lda adr.WALL,y
  9127 5D85 8D 23 A3			sta PLACE_BLOCK.BLOCK
  9128 5D88 AD 30 A3			lda X
  9129 5D8B 8D 21 A3			sta PLACE_BLOCK.XA
  9130 5D8E AD 31 A3			lda Y
  9131 5D91 8D 22 A3			sta PLACE_BLOCK.YA
  9132 5D94 20 0F 59			jsr PLACE_BLOCK
  9133 5D97			l_1545
  9134
  9135 				; --- ForToDoEpilog
  9136 5D97 EE 30 A3			inc X
  9137 5D9A D0 C2			jne l_1518
  9138 5D9C			l_1526
  9139
  9140 				; --- ForToDoEpilog
  9141 5D9C EE 31 A3			inc Y
  9142 5D9F D0 B1			jne l_1501
  9143 5DA1			l_150F
  9144
  9145 				; ------------------------------------------------------------
  9146
  9147 = A330			X	= DATAORIGIN+$02E8
  9148 = A331			Y	= DATAORIGIN+$02E9
  9149
  9150 = A330			@VarData	= X
  9151 = 0002			@VarDataSize	= 2
  9152
  9153 5DA1			@exit
  9154 					.ifdef @new
  9155 					lda <@VarData
  9156 					sta :ztmp
  9157 					lda >@VarData
  9158 					ldy #@VarDataSize-1
  9159 					jmp @FreeMem
  9160 					els
  9161 5DA1 60				rts						; ret
  9162 					eif
  9163 				.endl
  9164
  9165 5DA2			.local	SET_WALL					; PROCEDURE
  9166
  9167 				; optimize OK (service.pas), line = 1725
  9168
  9169 5DA2 A9 00			lda #$00
  9170 5DA4 8D F3 A1			sta REMAIN_BLK
  9171
  9172 				; optimize OK (service.pas), line = 1726
  9173
  9174 5DA7 AC 10 A2			ldy CUR_PLAYER
  9175 5DAA B9 01 A2			lda adr.SCORE.WALL_N,y
  9176 5DAD 8D 34 A3			sta WL
  9177
  9178 				; optimize OK (service.pas), line = 1729
  9179
  9180 5DB0 A9 00			lda #$00
  9181 5DB2 8D 33 A3			sta Y
  9182
  9183 5DB5			l_1583
  9184 				; --- ForToDoCondition
  9185 5DB5 AD 33 A3			lda Y
  9186 5DB8 C9 0F			cmp #$0F
  9187 5DBA B0 3D			jcs l_1591
  9188
  9189 				; optimize OK (service.pas), line = 1730
  9190
  9191 5DBC A9 00			lda #$00
  9192 5DBE 8D 32 A3			sta X
  9193
  9194 5DC1			l_159A
  9195 				; --- ForToDoCondition
  9196 5DC1 AD 32 A3			lda X
  9197 5DC4 C9 0D			cmp #$0D
  9198 5DC6 B0 2C			jcs l_15A8
  9199
  9200 				; optimize OK (service.pas), line = 1733
  9201
  9202 5DC8 AD 33 A3			lda Y
  9203 5DCB 0A				asl @
  9204 5DCC 0A				asl @
  9205 5DCD 0A				asl @
  9206 5DCE 0A				asl @
  9207 5DCF 18 6D 32 A3			add X
  9208 5DD3 A8				tay
  9209 5DD4 B9 00 DB			lda adr.WALL,y
  9210 5DD7 F0 16			jeq l_15E0
  9211 5DD9 AD 33 A3			lda Y
  9212 5DDC 0A				asl @
  9213 5DDD 0A				asl @
  9214 5DDE 0A				asl @
  9215 5DDF 0A				asl @
  9216 5DE0 18 6D 32 A3			add X
  9217 5DE4 A8				tay
  9218 5DE5 B9 00 DB			lda adr.WALL,y
  9219 5DE8 C9 0A			cmp #$0A
  9220 5DEA F0 03			jeq l_15E0
  9221 5DEC EE F3 A1			inc REMAIN_BLK
  9222 5DEF			l_15E0
  9223
  9224 				; --- ForToDoEpilog
  9225 5DEF EE 32 A3			inc X
  9226 5DF2 D0 CD			jne l_159A
  9227 5DF4			l_15A8
  9228
  9229 				; --- ForToDoEpilog
  9230 5DF4 EE 33 A3			inc Y
  9231 5DF7 D0 BC			jne l_1583
  9232 5DF9			l_1591
  9233
  9234 				; optimize OK (service.pas), line = 1735
  9235
  9236 5DF9 AD 34 A3			lda WL
  9237 5DFC 38 E9 01			sub #$01
  9238 5DFF 85 86			sta @SMALLINT.MOD.A
  9239 5E01 A9 00			lda #$00
  9240 5E03 E9 00			sbc #$00
  9241 5E05 85 87			sta @SMALLINT.MOD.A+1
  9242 5E07 A9 04			lda #$04
  9243 5E09 85 8E			sta @SMALLINT.MOD.B
  9244 5E0B A9 00			lda #$00
  9245 5E0D 85 8F			sta @SMALLINT.MOD.B+1
  9246 5E0F 20 6D 22			jsr @SMALLINT.MOD
  9247 5E12 A5 92			lda @SMALLINT.MOD.RESULT
  9248 5E14 8D 34 A3			sta WL
  9249
  9250 				; optimize OK (service.pas), line = 1737
  9251
  9252 5E17 8D 35 A3			sta @CASETMP_0008
  9253 5E1A C9 00			cmp #$00
  9254 5E1C D0 33			jne l_160A
  9255 				@
  9256
  9257 				; optimize OK (service.pas), line = 1738
  9258
  9259 5E1E AD C9 A1 8D C1 A1 + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9260 5E4E 4C 2A 5F			jmp a_0008
  9261 5E51			l_160A
  9262 5E51 C9 01			cmp #$01
  9263 5E53 D0 33			jne l_1613
  9264
  9265 				; optimize OK (service.pas), line = 1739
  9266
  9267 5E55 AD D1 A1 8D C1 A1 + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9268 5E85 4C 2A 5F			jmp a_0008
  9269 5E88			l_1613
  9270 5E88 C9 02			cmp #$02
  9271 5E8A D0 33			jne l_161C
  9272
  9273 				; optimize OK (service.pas), line = 1740
  9274
  9275 5E8C AD D9 A1 8D C1 A1 + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9276 5EBC 4C 2A 5F			jmp a_0008
  9277 5EBF			l_161C
  9278 5EBF C9 03			cmp #$03
  9279 5EC1 D0 33			jne l_1625
  9280
  9281 				; optimize OK (service.pas), line = 1741
  9282
  9283 5EC3 AD E1 A1 8D C1 A1 + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9284 5EF3 4C 2A 5F			jmp a_0008
  9285 5EF6			l_1625
  9286 5EF6 C9 04			cmp #$04
  9287 5EF8 D0 30			jne l_162E
  9288
  9289 				; optimize OK (service.pas), line = 1742
  9290
  9291 5EFA AD E9 A1 8D C1 A1 + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9292 5F2A			l_162E
  9293 5F2A			a_0008
  9294
  9295 				; ------------------------------------------------------------
  9296
  9297 = A332			X	= DATAORIGIN+$02EA
  9298 = A333			Y	= DATAORIGIN+$02EB
  9299 = A334			WL	= DATAORIGIN+$02EC
  9300 = A335			@CASETMP_0008	= DATAORIGIN+$02ED
  9301
  9302 = A332			@VarData	= X
  9303 = 0004			@VarDataSize	= 4
  9304
  9305 5F2A			@exit
  9306 					.ifdef @new
  9307 					lda <@VarData
  9308 					sta :ztmp
  9309 					lda >@VarData
  9310 					ldy #@VarDataSize-1
  9311 					jmp @FreeMem
  9312 					els
  9313 5F2A 60				rts						; ret
  9314 					eif
  9315 				.endl
  9316
  9317 5F2B			.local	SPLIT_LINE					; FUNCTION
  9318
  9319 				; optimize OK (service.pas), line = 1781
  9320
  9321 5F2B AC 36 A3 84 84 AC + 	mwy X1 :bp2
  9322 5F35 A0 00			ldy #$00
  9323 5F37 B1 84			lda (:bp2),y
  9324 5F39 18 69 10			add #$10
  9325 5F3C 91 84			sta (:bp2),y
  9326 5F3E C8				iny
  9327 5F3F B1 84			lda (:bp2),y
  9328 5F41 69 00			adc #$00
  9329 5F43 91 84			sta (:bp2),y
  9330
  9331 				; optimize OK (service.pas), line = 1782
  9332
  9333 5F45 AC 38 A3 84 84 AC + 	mwy Y1 :bp2
  9334 5F4F A0 00			ldy #$00
  9335 5F51 B1 84			lda (:bp2),y
  9336 5F53 18 69 18			add #$18
  9337 5F56 91 84			sta (:bp2),y
  9338 5F58 C8				iny
  9339 5F59 B1 84			lda (:bp2),y
  9340 5F5B 69 00			adc #$00
  9341 5F5D 91 84			sta (:bp2),y
  9342
  9343 				; optimize OK (service.pas), line = 1783
  9344
  9345 5F5F AC 3A A3 84 84 AC + 	mwy X2 :bp2
  9346 5F69 A0 00			ldy #$00
  9347 5F6B B1 84			lda (:bp2),y
  9348 5F6D 18 69 10			add #$10
  9349 5F70 91 84			sta (:bp2),y
  9350 5F72 C8				iny
  9351 5F73 B1 84			lda (:bp2),y
  9352 5F75 69 00			adc #$00
  9353 5F77 91 84			sta (:bp2),y
  9354
  9355 				; optimize OK (service.pas), line = 1784
  9356
  9357 5F79 AC 3C A3 84 84 AC + 	mwy Y2 :bp2
  9358 5F83 A0 00			ldy #$00
  9359 5F85 B1 84			lda (:bp2),y
  9360 5F87 18 69 18			add #$18
  9361 5F8A 91 84			sta (:bp2),y
  9362 5F8C C8				iny
  9363 5F8D B1 84			lda (:bp2),y
  9364 5F8F 69 00			adc #$00
  9365 5F91 91 84			sta (:bp2),y
  9366
  9367 				; optimize OK (service.pas), line = 1786
  9368
  9369 5F93 A9 00			lda #$00
  9370 5F95 8D 5F A3			sta COLLISION
  9371
  9372 				; optimize OK (service.pas), line = 1788
  9373
  9374 5F98 AC 36 A3 84 84 AC + 	mwy X1 :bp2
  9375 5FA2 A0 00			ldy #$00
  9376 5FA4 B1 84			lda (:bp2),y
  9377 5FA6 85 9F			sta :STACKORIGIN+9
  9378 5FA8 C8				iny
  9379 5FA9 B1 84			lda (:bp2),y
  9380 5FAB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9381 5FAD A0 00			ldy #$00
  9382 5FAF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9383 5FB1 10 01			spl
  9384 5FB3 88				dey
  9385 5FB4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9386 5FB6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9387 5FB8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9388 5FBA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9389 5FBC 66 9F			ror :STACKORIGIN+9
  9390 5FBE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9391 5FC0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9392 5FC2 66 9F			ror :STACKORIGIN+9
  9393 5FC4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9394 5FC6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9395 5FC8 66 9F			ror :STACKORIGIN+9
  9396 5FCA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9397 5FCC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9398 5FCE 66 9F			ror :STACKORIGIN+9
  9399 5FD0 A5 9F			lda :STACKORIGIN+9
  9400 5FD2 8D 53 A3			sta XP1
  9401 5FD5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9402 5FD7 8D 54 A3			sta XP1+1
  9403
  9404 				; optimize OK (service.pas), line = 1789
  9405
  9406 5FDA AC 38 A3 84 84 AC + 	mwy Y1 :bp2
  9407 5FE4 A0 00			ldy #$00
  9408 5FE6 B1 84			lda (:bp2),y
  9409 5FE8 85 9F			sta :STACKORIGIN+9
  9410 5FEA C8				iny
  9411 5FEB B1 84			lda (:bp2),y
  9412 5FED 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9413 5FEF A0 00			ldy #$00
  9414 5FF1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9415 5FF3 10 01			spl
  9416 5FF5 88				dey
  9417 5FF6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9418 5FF8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9419 5FFA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9420 5FFC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9421 5FFE 66 9F			ror :STACKORIGIN+9
  9422 6000 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9423 6002 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9424 6004 66 9F			ror :STACKORIGIN+9
  9425 6006 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9426 6008 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9427 600A 66 9F			ror :STACKORIGIN+9
  9428 600C A5 9F			lda :STACKORIGIN+9
  9429 600E 8D 55 A3			sta YP1
  9430 6011 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9431 6013 8D 56 A3			sta YP1+1
  9432
  9433 				; optimize OK (service.pas), line = 1790
  9434
  9435 6016 AC 3A A3 84 84 AC + 	mwy X2 :bp2
  9436 6020 A0 00			ldy #$00
  9437 6022 B1 84			lda (:bp2),y
  9438 6024 85 9F			sta :STACKORIGIN+9
  9439 6026 C8				iny
  9440 6027 B1 84			lda (:bp2),y
  9441 6029 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9442 602B A0 00			ldy #$00
  9443 602D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9444 602F 10 01			spl
  9445 6031 88				dey
  9446 6032 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9447 6034 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9448 6036 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9449 6038 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9450 603A 66 9F			ror :STACKORIGIN+9
  9451 603C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9452 603E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9453 6040 66 9F			ror :STACKORIGIN+9
  9454 6042 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9455 6044 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9456 6046 66 9F			ror :STACKORIGIN+9
  9457 6048 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9458 604A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9459 604C 66 9F			ror :STACKORIGIN+9
  9460 604E A5 9F			lda :STACKORIGIN+9
  9461 6050 8D 57 A3			sta XP2
  9462 6053 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9463 6055 8D 58 A3			sta XP2+1
  9464
  9465 				; optimize OK (service.pas), line = 1791
  9466
  9467 6058 AC 3C A3 84 84 AC + 	mwy Y2 :bp2
  9468 6062 A0 00			ldy #$00
  9469 6064 B1 84			lda (:bp2),y
  9470 6066 85 9F			sta :STACKORIGIN+9
  9471 6068 C8				iny
  9472 6069 B1 84			lda (:bp2),y
  9473 606B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9474 606D A0 00			ldy #$00
  9475 606F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9476 6071 10 01			spl
  9477 6073 88				dey
  9478 6074 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9479 6076 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9480 6078 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9481 607A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9482 607C 66 9F			ror :STACKORIGIN+9
  9483 607E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9484 6080 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9485 6082 66 9F			ror :STACKORIGIN+9
  9486 6084 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9487 6086 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9488 6088 66 9F			ror :STACKORIGIN+9
  9489 608A A5 9F			lda :STACKORIGIN+9
  9490 608C 8D 59 A3			sta YP2
  9491 608F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9492 6091 8D 5A A3			sta YP2+1
  9493
  9494 				; optimize OK (service.pas), line = 1793
  9495
  9496 6094 AC 36 A3 84 84 AC + 	mwy X1 :bp2
  9497 609E A0 00			ldy #$00
  9498 60A0 B1 84			lda (:bp2),y
  9499 60A2 8D 43 A3			sta XK
  9500 60A5 C8				iny
  9501 60A6 B1 84			lda (:bp2),y
  9502 60A8 8D 44 A3			sta XK+1
  9503
  9504 				; optimize OK (service.pas), line = 1794
  9505
  9506 60AB AC 38 A3 84 84 AC + 	mwy Y1 :bp2
  9507 60B5 A0 00			ldy #$00
  9508 60B7 B1 84			lda (:bp2),y
  9509 60B9 8D 45 A3			sta YK
  9510 60BC C8				iny
  9511 60BD B1 84			lda (:bp2),y
  9512 60BF 8D 46 A3			sta YK+1
  9513
  9514 				; optimize OK (service.pas), line = 1795
  9515
  9516 60C2 AC 3A A3 84 84 AC + 	mwy X2 :bp2
  9517 60CC A0 00			ldy #$00
  9518 60CE B1 84			lda (:bp2),y
  9519 60D0 8D 47 A3			sta XJ
  9520 60D3 C8				iny
  9521 60D4 B1 84			lda (:bp2),y
  9522 60D6 8D 48 A3			sta XJ+1
  9523
  9524 				; optimize OK (service.pas), line = 1796
  9525
  9526 60D9 AC 3C A3 84 84 AC + 	mwy Y2 :bp2
  9527 60E3 A0 00			ldy #$00
  9528 60E5 B1 84			lda (:bp2),y
  9529 60E7 8D 49 A3			sta YJ
  9530 60EA C8				iny
  9531 60EB B1 84			lda (:bp2),y
  9532 60ED 8D 4A A3			sta YJ+1
  9533
  9534 				; optimize OK (service.pas), line = 1798
  9535
  9536 60F0 AC 36 A3 84 84 AC + 	mwy X1 :bp2
  9537 60FA A0 00			ldy #$00
  9538 60FC B1 84			lda (:bp2),y
  9539 60FE 8D 4B A3			sta XH
  9540 6101 C8				iny
  9541 6102 B1 84			lda (:bp2),y
  9542 6104 8D 4C A3			sta XH+1
  9543
  9544 				; optimize OK (service.pas), line = 1799
  9545
  9546 6107 AC 38 A3 84 84 AC + 	mwy Y1 :bp2
  9547 6111 A0 00			ldy #$00
  9548 6113 B1 84			lda (:bp2),y
  9549 6115 8D 4D A3			sta YH
  9550 6118 C8				iny
  9551 6119 B1 84			lda (:bp2),y
  9552 611B 8D 4E A3			sta YH+1
  9553
  9554 				; optimize OK (service.pas), line = 1800
  9555
  9556 611E AC 3A A3 84 84 AC + 	mwy X2 :bp2
  9557 6128 A0 00			ldy #$00
  9558 612A B1 84			lda (:bp2),y
  9559 612C 8D 4F A3			sta XN
  9560 612F C8				iny
  9561 6130 B1 84			lda (:bp2),y
  9562 6132 8D 50 A3			sta XN+1
  9563
  9564 				; optimize OK (service.pas), line = 1801
  9565
  9566 6135 AC 3C A3 84 84 AC + 	mwy Y2 :bp2
  9567 613F A0 00			ldy #$00
  9568 6141 B1 84			lda (:bp2),y
  9569 6143 8D 51 A3			sta YN
  9570 6146 C8				iny
  9571 6147 B1 84			lda (:bp2),y
  9572 6149 8D 52 A3			sta YN+1
  9573
  9574 				; optimize OK (service.pas), line = 1808
  9575
  9576 614C AC 36 A3 84 84 AC + 	mwy X1 :bp2
  9577 6156 A0 00			ldy #$00
  9578 6158 B1 84			lda (:bp2),y
  9579 615A 85 9F			sta :STACKORIGIN+9
  9580 615C C8				iny
  9581 615D B1 84			lda (:bp2),y
  9582 615F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9583 6161 AC 3A A3 84 84 AC + 	mwy X2 :bp2
  9584 616B A0 00			ldy #$00
  9585 616D B1 84			lda (:bp2),y
  9586 616F 85 A0			sta :STACKORIGIN+10
  9587 6171 C8				iny
  9588 6172 B1 84			lda (:bp2),y
  9589 6174 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9590 6176 A0 00			ldy #$00
  9591 6178 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9592 617A 10 01			spl
  9593 617C 88				dey
  9594 617D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9595 617F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9596 6181 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9597 6183 A0 00			ldy #$00
  9598 6185 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9599 6187 10 01			spl
  9600 6189 88				dey
  9601 618A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9602 618C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9603 618E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9604 6190 A5 9F			lda :STACKORIGIN+9
  9605 6192 38 E5 A0			sub :STACKORIGIN+10
  9606 6195 85 8A			sta SYSTEM.ABS.@010185000.X
  9607 6197 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9608 6199 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9609 619B 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9610 619D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9611 619F E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9612 61A1 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9613 61A3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9614 61A5 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9615 61A7 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9616 61A9 20 06 2B			jsr SYSTEM.ABS.@010185000
  9617 61AC E8				inx
  9618 61AD A0 01			ldy #1
  9619 61AF				.LOCAL
  9620 61AF A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9621 61B1 38 E9 00			sub #$00
  9622 61B4 D0 1C			bne L4
  9623 61B6 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9624 61B8 C9 00			cmp #$00
  9625 61BA D0 0A			bne L1
  9626 61BC A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9627 61BE C9 00			cmp #$00
  9628 61C0 D0 04			bne L1
  9629 61C2 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9630 61C4 C9 10			cmp #$10
  9631 61C6 F0 10		L1	beq L5
  9632 61C8 B0 04			bcs L3
  9633 61CA A9 FF			lda #$FF
  9634 61CC D0 0A			bne L5
  9635 61CE A9 01		L3	lda #$01
  9636 61D0 D0 06			bne L5
  9637 61D2 50 04		L4	bvc L5
  9638 61D4 49 FF			eor #$FF
  9639 61D6 09 01			ora #$01
  9640 61D8			L5
  9641 					.ENDL
  9642 61D8 F0 02			seq
  9643 61DA 10 01			bpl @+
  9644 61DC 88				dey
  9645 				@
  9646 61DD 94 96			sty :STACKORIGIN,x
  9647 61DF AC 3C A3 84 84 AC + 	mwy Y2 :bp2
  9648 61E9 A0 00			ldy #$00
  9649 61EB B1 84			lda (:bp2),y
  9650 61ED 85 9F			sta :STACKORIGIN+9
  9651 61EF C8				iny
  9652 61F0 B1 84			lda (:bp2),y
  9653 61F2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9654 61F4 AC 38 A3 84 84 AC + 	mwy Y1 :bp2
  9655 61FE A0 00			ldy #$00
  9656 6200 B1 84			lda (:bp2),y
  9657 6202 85 A0			sta :STACKORIGIN+10
  9658 6204 C8				iny
  9659 6205 B1 84			lda (:bp2),y
  9660 6207 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9661 6209 A0 00			ldy #$00
  9662 620B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9663 620D 10 01			spl
  9664 620F 88				dey
  9665 6210 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9666 6212 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9667 6214 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9668 6216 A0 00			ldy #$00
  9669 6218 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9670 621A 10 01			spl
  9671 621C 88				dey
  9672 621D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9673 621F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9674 6221 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9675 6223 A5 9F			lda :STACKORIGIN+9
  9676 6225 38 E5 A0			sub :STACKORIGIN+10
  9677 6228 85 8A			sta SYSTEM.ABS.@010185000.X
  9678 622A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9679 622C E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9680 622E 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9681 6230 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9682 6232 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9683 6234 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9684 6236 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9685 6238 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9686 623A 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9687 623C 20 06 2B			jsr SYSTEM.ABS.@010185000
  9688 623F CA				dex
  9689 6240 A0 01			ldy #1
  9690 6242				.LOCAL
  9691 6242 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9692 6244 38 E9 00			sub #$00
  9693 6247 D0 1C			bne L4
  9694 6249 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9695 624B C9 00			cmp #$00
  9696 624D D0 0A			bne L1
  9697 624F A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9698 6251 C9 00			cmp #$00
  9699 6253 D0 04			bne L1
  9700 6255 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9701 6257 C9 08			cmp #$08
  9702 6259 F0 10		L1	beq L5
  9703 625B B0 04			bcs L3
  9704 625D A9 FF			lda #$FF
  9705 625F D0 0A			bne L5
  9706 6261 A9 01		L3	lda #$01
  9707 6263 D0 06			bne L5
  9708 6265 50 04		L4	bvc L5
  9709 6267 49 FF			eor #$FF
  9710 6269 09 01			ora #$01
  9711 626B			L5
  9712 					.ENDL
  9713 626B F0 02			seq
  9714 626D 10 01			bpl @+
  9715 626F 88				dey
  9716 				@
  9717 6270 98				tya
  9718 6271 15 97			ora :STACKORIGIN+1,x
  9719 6273 F0 05			jeq l_16B7
  9720
  9721 				; optimize OK (service.pas), line = 1809
  9722
  9723 6275 A9 01			lda #$01
  9724 6277 20 CE 3D			jsr FATAL_ERROR
  9725 627A			l_16B7
  9726
  9727 				; optimize OK (service.pas), line = 1812
  9728
  9729 627A AD 54 A3			lda XP1+1
  9730 627D CD 58 A3			cmp XP2+1
  9731 6280 D0 06			bne @+
  9732 6282 AD 53 A3			lda XP1
  9733 6285 CD 57 A3			cmp XP2
  9734 				@
  9735 6288 D0 13			jne l_16DAx
  9736 628A AD 56 A3			lda YP1+1
  9737 628D CD 5A A3			cmp YP2+1
  9738 6290 D0 06			bne @+
  9739 6292 AD 55 A3			lda YP1
  9740 6295 CD 59 A3			cmp YP2
  9741 				@
  9742 6298 D0 03 4C DB 65		jeq l_16DA
  9743 629D			l_16DAx
  9744
  9745 				; optimize OK (service.pas), line = 1814
  9746
  9747 629D AD 56 A3			lda YP1+1
  9748 62A0 CD 5A A3			cmp YP2+1
  9749 62A3 D0 06			bne @+
  9750 62A5 AD 55 A3			lda YP1
  9751 62A8 CD 59 A3			cmp YP2
  9752 				@
  9753 62AB D0 03 4C E6 63		jeq l_16ED
  9754
  9755 				; optimize OK (service.pas), line = 1816
  9756
  9757 62B0 AD 5F A3			lda COLLISION
  9758 62B3 09 01			ora #$01
  9759 62B5 8D 5F A3			sta COLLISION
  9760
  9761 				; --- WhileProlog
  9762 62B8 4C D3 63			jmp l_16FA
  9763 62BB			l_16FB
  9764
  9765 				; optimize OK (service.pas), line = 1820
  9766
  9767 62BB AD 4B A3			lda XH
  9768 62BE 85 9F			sta :STACKORIGIN+9
  9769 62C0 A0 00			ldy #$00
  9770 62C2 AD 4C A3			lda XH+1
  9771 62C5 10 01			spl
  9772 62C7 88				dey
  9773 62C8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9774 62CA 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9775 62CC 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9776 62CE AD 4F A3			lda XN
  9777 62D1 85 A0			sta :STACKORIGIN+10
  9778 62D3 A0 00			ldy #$00
  9779 62D5 AD 50 A3			lda XN+1
  9780 62D8 10 01			spl
  9781 62DA 88				dey
  9782 62DB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9783 62DD 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9784 62DF 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9785 62E1 A5 9F			lda :STACKORIGIN+9
  9786 62E3 18 65 A0			add :STACKORIGIN+10
  9787 62E6 85 9F			sta :STACKORIGIN+9
  9788 62E8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9789 62EA 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9790 62EC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9791 62EE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9792 62F0 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9793 62F2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9794 62F4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9795 62F6 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9796 62F8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9797 62FA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9798 62FC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9799 62FE 66 9F			ror :STACKORIGIN+9
  9800 6300 A5 9F			lda :STACKORIGIN+9
  9801 6302 8D 3F A3			sta X
  9802 6305 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9803 6307 8D 40 A3			sta X+1
  9804
  9805 				; optimize OK (service.pas), line = 1821
  9806
  9807 630A AD 4D A3			lda YH
  9808 630D 85 9F			sta :STACKORIGIN+9
  9809 630F A0 00			ldy #$00
  9810 6311 AD 4E A3			lda YH+1
  9811 6314 10 01			spl
  9812 6316 88				dey
  9813 6317 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9814 6319 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9815 631B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9816 631D AD 51 A3			lda YN
  9817 6320 85 A0			sta :STACKORIGIN+10
  9818 6322 A0 00			ldy #$00
  9819 6324 AD 52 A3			lda YN+1
  9820 6327 10 01			spl
  9821 6329 88				dey
  9822 632A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9823 632C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9824 632E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9825 6330 A5 9F			lda :STACKORIGIN+9
  9826 6332 18 65 A0			add :STACKORIGIN+10
  9827 6335 85 9F			sta :STACKORIGIN+9
  9828 6337 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9829 6339 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9830 633B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9831 633D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9832 633F 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9833 6341 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9834 6343 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9835 6345 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9836 6347 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9837 6349 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9838 634B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9839 634D 66 9F			ror :STACKORIGIN+9
  9840 634F A5 9F			lda :STACKORIGIN+9
  9841 6351 8D 41 A3			sta Y
  9842 6354 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9843 6356 8D 42 A3			sta Y+1
  9844
  9845 				; optimize OK (service.pas), line = 1823
  9846
  9847 6359 AD 41 A3			lda Y
  9848 635C 85 9F			sta :STACKORIGIN+9
  9849 635E A0 00			ldy #$00
  9850 6360 AD 42 A3			lda Y+1
  9851 6363 10 01			spl
  9852 6365 88				dey
  9853 6366 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9854 6368 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9855 636A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9856 636C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9857 636E 66 9F			ror :STACKORIGIN+9
  9858 6370 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9859 6372 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9860 6374 66 9F			ror :STACKORIGIN+9
  9861 6376 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9862 6378 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9863 637A 66 9F			ror :STACKORIGIN+9
  9864 637C A5 9F			lda :STACKORIGIN+9
  9865 637E 8D 5D A3			sta YP
  9866 6381 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9867 6383 8D 5E A3			sta YP+1
  9868
  9869 				; optimize OK (service.pas), line = 1825
  9870
  9871 6386 CD 56 A3			cmp YP1+1
  9872 6389 D0 06			bne @+
  9873 638B AD 5D A3			lda YP
  9874 638E CD 55 A3			cmp YP1
  9875 				@
  9876 6391 D0 18			jne l_1732
  9877
  9878 				; optimize OK (service.pas), line = 1827
  9879
  9880 6393 AD 3F A3			lda X
  9881 6396 8D 4B A3			sta XH
  9882 6399 AD 40 A3			lda X+1
  9883 639C 8D 4C A3			sta XH+1
  9884
  9885 				; optimize OK (service.pas), line = 1828
  9886
  9887 639F AD 41 A3			lda Y
  9888 63A2 8D 4D A3			sta YH
  9889 63A5 AD 42 A3			lda Y+1
  9890 63A8 8D 4E A3			sta YH+1
  9891 63AB			l_1732
  9892
  9893 				; optimize OK (service.pas), line = 1831
  9894
  9895 63AB AD 5E A3			lda YP+1
  9896 63AE CD 5A A3			cmp YP2+1
  9897 63B1 D0 06			bne @+
  9898 63B3 AD 5D A3			lda YP
  9899 63B6 CD 59 A3			cmp YP2
  9900 				@
  9901 63B9 D0 18			jne l_1751
  9902
  9903 				; optimize OK (service.pas), line = 1833
  9904
  9905 63BB AD 3F A3			lda X
  9906 63BE 8D 4F A3			sta XN
  9907 63C1 AD 40 A3			lda X+1
  9908 63C4 8D 50 A3			sta XN+1
  9909
  9910 				; optimize OK (service.pas), line = 1834
  9911
  9912 63C7 AD 41 A3			lda Y
  9913 63CA 8D 51 A3			sta YN
  9914 63CD AD 42 A3			lda Y+1
  9915 63D0 8D 52 A3			sta YN+1
  9916 63D3			l_1751
  9917 63D3			l_16FA
  9918
  9919 				; optimize OK (service.pas), line = 1818
  9920
  9921 63D3 AD 51 A3			lda YN
  9922 63D6 29 07			and #$07
  9923 63D8 F0 0C			jeq l_16FBw
  9924 63DA AD 51 A3			lda YN
  9925 63DD 29 07			and #$07
  9926 63DF C9 07			cmp #$07
  9927 63E1 F0 03 4C BB 62		jne l_16FB
  9928 63E6			l_16FBw
  9929 63E6			l_16ED
  9930
  9931 				; optimize OK (service.pas), line = 1840
  9932
  9933 63E6 AD 54 A3			lda XP1+1
  9934 63E9 CD 58 A3			cmp XP2+1
  9935 63EC D0 06			bne @+
  9936 63EE AD 53 A3			lda XP1
  9937 63F1 CD 57 A3			cmp XP2
  9938 				@
  9939 63F4 D0 03 4C 35 65		jeq l_1790
  9940
  9941 				; optimize OK (service.pas), line = 1842
  9942
  9943 63F9 AD 5F A3			lda COLLISION
  9944 63FC 09 02			ora #$02
  9945 63FE 8D 5F A3			sta COLLISION
  9946
  9947 				; --- WhileProlog
  9948 6401 4C 22 65			jmp l_179D
  9949 6404			l_179E
  9950
  9951 				; optimize OK (service.pas), line = 1846
  9952
  9953 6404 AD 43 A3			lda XK
  9954 6407 85 9F			sta :STACKORIGIN+9
  9955 6409 A0 00			ldy #$00
  9956 640B AD 44 A3			lda XK+1
  9957 640E 10 01			spl
  9958 6410 88				dey
  9959 6411 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9960 6413 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9961 6415 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9962 6417 AD 47 A3			lda XJ
  9963 641A 85 A0			sta :STACKORIGIN+10
  9964 641C A0 00			ldy #$00
  9965 641E AD 48 A3			lda XJ+1
  9966 6421 10 01			spl
  9967 6423 88				dey
  9968 6424 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9969 6426 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9970 6428 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9971 642A A5 9F			lda :STACKORIGIN+9
  9972 642C 18 65 A0			add :STACKORIGIN+10
  9973 642F 85 9F			sta :STACKORIGIN+9
  9974 6431 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9975 6433 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9976 6435 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9977 6437 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9978 6439 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9979 643B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9980 643D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9981 643F 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9982 6441 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9983 6443 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9984 6445 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9985 6447 66 9F			ror :STACKORIGIN+9
  9986 6449 A5 9F			lda :STACKORIGIN+9
  9987 644B 8D 3F A3			sta X
  9988 644E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9989 6450 8D 40 A3			sta X+1
  9990
  9991 				; optimize OK (service.pas), line = 1847
  9992
  9993 6453 AD 45 A3			lda YK
  9994 6456 85 9F			sta :STACKORIGIN+9
  9995 6458 A0 00			ldy #$00
  9996 645A AD 46 A3			lda YK+1
  9997 645D 10 01			spl
  9998 645F 88				dey
  9999 6460 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10000 6462 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10001 6464 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10002 6466 AD 49 A3			lda YJ
 10003 6469 85 A0			sta :STACKORIGIN+10
 10004 646B A0 00			ldy #$00
 10005 646D AD 4A A3			lda YJ+1
 10006 6470 10 01			spl
 10007 6472 88				dey
 10008 6473 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10009 6475 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10010 6477 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10011 6479 A5 9F			lda :STACKORIGIN+9
 10012 647B 18 65 A0			add :STACKORIGIN+10
 10013 647E 85 9F			sta :STACKORIGIN+9
 10014 6480 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10015 6482 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10016 6484 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10017 6486 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10018 6488 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10019 648A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10020 648C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10021 648E 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10022 6490 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10023 6492 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10024 6494 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10025 6496 66 9F			ror :STACKORIGIN+9
 10026 6498 A5 9F			lda :STACKORIGIN+9
 10027 649A 8D 41 A3			sta Y
 10028 649D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10029 649F 8D 42 A3			sta Y+1
 10030
 10031 				; optimize OK (service.pas), line = 1849
 10032
 10033 64A2 AD 3F A3			lda X
 10034 64A5 85 9F			sta :STACKORIGIN+9
 10035 64A7 A0 00			ldy #$00
 10036 64A9 AD 40 A3			lda X+1
 10037 64AC 10 01			spl
 10038 64AE 88				dey
 10039 64AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10040 64B1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10041 64B3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10042 64B5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10043 64B7 66 9F			ror :STACKORIGIN+9
 10044 64B9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10045 64BB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10046 64BD 66 9F			ror :STACKORIGIN+9
 10047 64BF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10048 64C1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10049 64C3 66 9F			ror :STACKORIGIN+9
 10050 64C5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10051 64C7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10052 64C9 66 9F			ror :STACKORIGIN+9
 10053 64CB A5 9F			lda :STACKORIGIN+9
 10054 64CD 8D 5B A3			sta XP
 10055 64D0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10056 64D2 8D 5C A3			sta XP+1
 10057
 10058 				; optimize OK (service.pas), line = 1851
 10059
 10060 64D5 CD 54 A3			cmp XP1+1
 10061 64D8 D0 06			bne @+
 10062 64DA AD 5B A3			lda XP
 10063 64DD CD 53 A3			cmp XP1
 10064 				@
 10065 64E0 D0 18			jne l_17D5
 10066
 10067 				; optimize OK (service.pas), line = 1853
 10068
 10069 64E2 AD 3F A3			lda X
 10070 64E5 8D 43 A3			sta XK
 10071 64E8 AD 40 A3			lda X+1
 10072 64EB 8D 44 A3			sta XK+1
 10073
 10074 				; optimize OK (service.pas), line = 1854
 10075
 10076 64EE AD 41 A3			lda Y
 10077 64F1 8D 45 A3			sta YK
 10078 64F4 AD 42 A3			lda Y+1
 10079 64F7 8D 46 A3			sta YK+1
 10080 64FA			l_17D5
 10081
 10082 				; optimize OK (service.pas), line = 1857
 10083
 10084 64FA AD 5C A3			lda XP+1
 10085 64FD CD 58 A3			cmp XP2+1
 10086 6500 D0 06			bne @+
 10087 6502 AD 5B A3			lda XP
 10088 6505 CD 57 A3			cmp XP2
 10089 				@
 10090 6508 D0 18			jne l_17F4
 10091
 10092 				; optimize OK (service.pas), line = 1859
 10093
 10094 650A AD 3F A3			lda X
 10095 650D 8D 47 A3			sta XJ
 10096 6510 AD 40 A3			lda X+1
 10097 6513 8D 48 A3			sta XJ+1
 10098
 10099 				; optimize OK (service.pas), line = 1860
 10100
 10101 6516 AD 41 A3			lda Y
 10102 6519 8D 49 A3			sta YJ
 10103 651C AD 42 A3			lda Y+1
 10104 651F 8D 4A A3			sta YJ+1
 10105 6522			l_17F4
 10106 6522			l_179D
 10107
 10108 				; optimize OK (service.pas), line = 1844
 10109
 10110 6522 AD 47 A3			lda XJ
 10111 6525 29 0F			and #$0F
 10112 6527 F0 0C			jeq l_179Ew
 10113 6529 AD 47 A3			lda XJ
 10114 652C 29 0F			and #$0F
 10115 652E C9 0F			cmp #$0F
 10116 6530 F0 03 4C 04 64		jne l_179E
 10117 6535			l_179Ew
 10118 6535			l_1790
 10119
 10120 				; optimize OK (service.pas), line = 1871
 10121
 10122 6535 AD 5F A3			lda COLLISION
 10123 6538 C9 01			cmp #$01
 10124 653A D0 03			jne l_1833
 10125 				; optimize OK (service.pas), line = 1873
 10126 				; optimize OK (service.pas), line = 1874
 10127 653C 4C AA 65			jmp l_1847
 10128 653F			l_1833
 10129
 10130 				; optimize OK (service.pas), line = 1876
 10131
 10132 653F AD 5F A3			lda COLLISION
 10133 6542 C9 02			cmp #$02
 10134 6544 D0 2F			jne l_1859
 10135
 10136 				; optimize OK (service.pas), line = 1878
 10137
 10138 6546 AC 3A A3 84 84 AC + 	mwy X2 :bp2
 10139 6550 A0 00			ldy #$00
 10140 6552 AD 47 A3			lda XJ
 10141 6555 91 84			sta (:bp2),y
 10142 6557 C8				iny
 10143 6558 AD 48 A3			lda XJ+1
 10144 655B 91 84			sta (:bp2),y
 10145
 10146 				; optimize OK (service.pas), line = 1879
 10147
 10148 655D AC 3C A3 84 84 AC + 	mwy Y2 :bp2
 10149 6567 A0 00			ldy #$00
 10150 6569 AD 49 A3			lda YJ
 10151 656C 91 84			sta (:bp2),y
 10152 656E C8				iny
 10153 656F AD 4A A3			lda YJ+1
 10154 6572 4C D6 65			jmp l_186D
 10155 6575			l_1859
 10156
 10157 				; optimize OK (service.pas), line = 1881
 10158
 10159 6575 AD 5F A3			lda COLLISION
 10160 6578 C9 03			cmp #$03
 10161 657A D0 5C			jne l_187F
 10162
 10163 				; optimize OK (service.pas), line = 1883
 10164
 10165 657C AC 36 A3 84 84 AC + 	mwy X1 :bp2
 10166 6586 A0 00			ldy #$00
 10167 6588 AD 47 A3			lda XJ
 10168 658B 91 84			sta (:bp2),y
 10169 658D C8				iny
 10170 658E AD 48 A3			lda XJ+1
 10171 6591 91 84			sta (:bp2),y
 10172
 10173 				; optimize OK (service.pas), line = 1884
 10174
 10175 6593 AC 38 A3 84 84 AC + 	mwy Y1 :bp2
 10176 659D A0 00			ldy #$00
 10177 659F AD 49 A3			lda YJ
 10178 65A2 91 84			sta (:bp2),y
 10179 65A4 C8				iny
 10180 65A5 AD 4A A3			lda YJ+1
 10181 65A8 91 84			sta (:bp2),y
 10182 65AA			l_1847
 10183
 10184 				; optimize OK (service.pas), line = 1885
 10185
 10186 65AA AC 3A A3 84 84 AC + 	mwy X2 :bp2
 10187 65B4 A0 00			ldy #$00
 10188 65B6 AD 4F A3			lda XN
 10189 65B9 91 84			sta (:bp2),y
 10190 65BB C8				iny
 10191 65BC AD 50 A3			lda XN+1
 10192 65BF 91 84			sta (:bp2),y
 10193
 10194 				; optimize OK (service.pas), line = 1886
 10195
 10196 65C1 AC 3C A3 84 84 AC + 	mwy Y2 :bp2
 10197 65CB A0 00			ldy #$00
 10198 65CD AD 51 A3			lda YN
 10199 65D0 91 84			sta (:bp2),y
 10200 65D2 C8				iny
 10201 65D3 AD 52 A3			lda YN+1
 10202 65D6			l_186D
 10203 65D6 91 84			sta (:bp2),y
 10204 65D8			l_187F
 10205 65D8 4C E0 65			jmp l_189F
 10206 65DB			l_16DA
 10207
 10208 				; optimize OK (service.pas), line = 1891
 10209
 10210 65DB A9 02			lda #$02
 10211 65DD 20 CE 3D			jsr FATAL_ERROR
 10212 65E0			l_189F
 10213
 10214 				; optimize OK (service.pas), line = 1894
 10215
 10216 65E0 AC 36 A3 84 84 AC + 	mwy X1 :bp2
 10217 65EA A0 00			ldy #$00
 10218 65EC B1 84			lda (:bp2),y
 10219 65EE 38 E9 10			sub #$10
 10220 65F1 91 84			sta (:bp2),y
 10221 65F3 C8				iny
 10222 65F4 B1 84			lda (:bp2),y
 10223 65F6 E9 00			sbc #$00
 10224 65F8 91 84			sta (:bp2),y
 10225
 10226 				; optimize OK (service.pas), line = 1895
 10227
 10228 65FA AC 38 A3 84 84 AC + 	mwy Y1 :bp2
 10229 6604 A0 00			ldy #$00
 10230 6606 B1 84			lda (:bp2),y
 10231 6608 38 E9 18			sub #$18
 10232 660B 91 84			sta (:bp2),y
 10233 660D C8				iny
 10234 660E B1 84			lda (:bp2),y
 10235 6610 E9 00			sbc #$00
 10236 6612 91 84			sta (:bp2),y
 10237
 10238 				; optimize OK (service.pas), line = 1896
 10239
 10240 6614 AC 3A A3 84 84 AC + 	mwy X2 :bp2
 10241 661E A0 00			ldy #$00
 10242 6620 B1 84			lda (:bp2),y
 10243 6622 38 E9 10			sub #$10
 10244 6625 91 84			sta (:bp2),y
 10245 6627 C8				iny
 10246 6628 B1 84			lda (:bp2),y
 10247 662A E9 00			sbc #$00
 10248 662C 91 84			sta (:bp2),y
 10249
 10250 				; optimize OK (service.pas), line = 1897
 10251
 10252 662E AC 3C A3 84 84 AC + 	mwy Y2 :bp2
 10253 6638 A0 00			ldy #$00
 10254 663A B1 84			lda (:bp2),y
 10255 663C 38 E9 18			sub #$18
 10256 663F 91 84			sta (:bp2),y
 10257 6641 C8				iny
 10258 6642 B1 84			lda (:bp2),y
 10259 6644 E9 00			sbc #$00
 10260 6646 91 84			sta (:bp2),y
 10261
 10262 				; optimize OK (service.pas), line = 1900
 10263
 10264 6648 AC 36 A3 84 84 AC + 	mwy X1 :bp2
 10265 6652 A0 00			ldy #$00
 10266 6654 B1 84			lda (:bp2),y
 10267 6656 8D 71 A2			sta MAX.B
 10268 6659 C8				iny
 10269 665A B1 84			lda (:bp2),y
 10270 665C 8D 72 A2			sta MAX.B+1
 10271 665F A9 00			lda #$00
 10272 6661 8D 6F A2			sta MAX.A
 10273 6664 8D 70 A2			sta MAX.A+1
 10274 6667 20 78 3D			jsr MAX
 10275 666A A9 CF			lda #$CF
 10276 666C 8D 75 A2			sta MIN.A
 10277 666F A9 00			lda #$00
 10278 6671 8D 76 A2			sta MIN.A+1
 10279 6674 AD 73 A2			lda MAX.RESULT
 10280 6677 8D 77 A2			sta MIN.B
 10281 667A AD 74 A2			lda MAX.RESULT+1
 10282 667D 8D 78 A2			sta MIN.B+1
 10283 6680 20 A3 3D			jsr MIN
 10284 6683 AC 36 A3 84 84 AC + 	mwy X1 :bp2
 10285 668D A0 00			ldy #$00
 10286 668F AD 79 A2			lda MIN.RESULT
 10287 6692 91 84			sta (:bp2),y
 10288 6694 C8				iny
 10289 6695 AD 7A A2			lda MIN.RESULT+1
 10290 6698 91 84			sta (:bp2),y
 10291
 10292 				; optimize OK (service.pas), line = 1901
 10293
 10294 669A AC 3A A3 84 84 AC + 	mwy X2 :bp2
 10295 66A4 A0 00			ldy #$00
 10296 66A6 B1 84			lda (:bp2),y
 10297 66A8 8D 71 A2			sta MAX.B
 10298 66AB C8				iny
 10299 66AC B1 84			lda (:bp2),y
 10300 66AE 8D 72 A2			sta MAX.B+1
 10301 66B1 A9 00			lda #$00
 10302 66B3 8D 6F A2			sta MAX.A
 10303 66B6 8D 70 A2			sta MAX.A+1
 10304 66B9 20 78 3D			jsr MAX
 10305 66BC A9 CF			lda #$CF
 10306 66BE 8D 75 A2			sta MIN.A
 10307 66C1 A9 00			lda #$00
 10308 66C3 8D 76 A2			sta MIN.A+1
 10309 66C6 AD 73 A2			lda MAX.RESULT
 10310 66C9 8D 77 A2			sta MIN.B
 10311 66CC AD 74 A2			lda MAX.RESULT+1
 10312 66CF 8D 78 A2			sta MIN.B+1
 10313 66D2 20 A3 3D			jsr MIN
 10314 66D5 AC 3A A3 84 84 AC + 	mwy X2 :bp2
 10315 66DF A0 00			ldy #$00
 10316 66E1 AD 79 A2			lda MIN.RESULT
 10317 66E4 91 84			sta (:bp2),y
 10318 66E6 C8				iny
 10319 66E7 AD 7A A2			lda MIN.RESULT+1
 10320 66EA 91 84			sta (:bp2),y
 10321
 10322 				; optimize OK (service.pas), line = 1908
 10323
 10324 66EC AD 5F A3			lda COLLISION
 10325 66EF 8D 3E A3			sta RESULT
 10326 66F2			@exit
 10327
 10328 				; ------------------------------------------------------------
 10329
 10330 = A336			X1	= DATAORIGIN+$02EE
 10331 = A338			Y1	= DATAORIGIN+$02F0
 10332 = A33A			X2	= DATAORIGIN+$02F2
 10333 = A33C			Y2	= DATAORIGIN+$02F4
 10334 = A33E			RESULT	= DATAORIGIN+$02F6
 10335 = A33F			X	= DATAORIGIN+$02F7
 10336 = A341			Y	= DATAORIGIN+$02F9
 10337 = A343			XK	= DATAORIGIN+$02FB
 10338 = A345			YK	= DATAORIGIN+$02FD
 10339 = A347			XJ	= DATAORIGIN+$02FF
 10340 = A349			YJ	= DATAORIGIN+$0301
 10341 = A34B			XH	= DATAORIGIN+$0303
 10342 = A34D			YH	= DATAORIGIN+$0305
 10343 = A34F			XN	= DATAORIGIN+$0307
 10344 = A351			YN	= DATAORIGIN+$0309
 10345 = A353			XP1	= DATAORIGIN+$030B
 10346 = A355			YP1	= DATAORIGIN+$030D
 10347 = A357			XP2	= DATAORIGIN+$030F
 10348 = A359			YP2	= DATAORIGIN+$0311
 10349 = A35B			XP	= DATAORIGIN+$0313
 10350 = A35D			YP	= DATAORIGIN+$0315
 10351 = A35F			COLLISION	= DATAORIGIN+$0317
 10352
 10353 = A336			@VarData	= X1
 10354 = 0029			@VarDataSize	= 41
 10355
 10356 66F2 60				rts						; ret
 10357 				.endl
 10358
 10359 66F3			.local	SHOOT_BLOCK					; PROCEDURE
 10360
 10361 				; optimize OK (service.pas), line = 1919
 10362
 10363 66F3 AD 61 A3			lda XB+1
 10364 66F6 10 03 4C 04 69		jmi l_18F3
 10365 66FB AD 60 A3			lda XB
 10366 66FE C9 0D			cmp #$0D
 10367 6700 AD 61 A3			lda XB+1
 10368 6703 E9 00			sbc #$00
 10369 6705 50 02			svc
 10370 6707 49 80			eor #$80
 10371 6709 30 03 4C 04 69		jpl l_18F3
 10372 670E AD 63 A3			lda YB+1
 10373 6711 10 03 4C 04 69		jmi l_18F3
 10374 6716 AD 62 A3			lda YB
 10375 6719 C9 0F			cmp #$0F
 10376 671B AD 63 A3			lda YB+1
 10377 671E E9 00			sbc #$00
 10378 6720 50 02			svc
 10379 6722 49 80			eor #$80
 10380 6724 30 03 4C 04 69		jpl l_18F3
 10381
 10382 				; optimize OK (service.pas), line = 1922
 10383
 10384 6729 AD 62 A3			lda YB
 10385 672C 0A				asl @
 10386 672D 0A				asl @
 10387 672E 0A				asl @
 10388 672F 0A				asl @
 10389 6730 18 6D 60 A3			add XB
 10390 6734 8D 68 A3			sta I
 10391
 10392 				; optimize OK (service.pas), line = 1924
 10393
 10394 6737 A8				tay
 10395 6738 B9 00 DB			lda adr.WALL,y
 10396 673B D0 03 4C 04 69		jeq l_1917
 10397
 10398 				; optimize OK (service.pas), line = 1926
 10399
 10400 6740 C9 0A			cmp #$0A
 10401 6742 90 03 4C 7A 68		jcs l_192D
 10402
 10403 				; optimize OK (service.pas), line = 1928
 10404
 10405 6747 AD 60 A3			lda XB
 10406 674A 8D 12 A3			sta REMOVE_BLOCK.XA
 10407 674D AD 62 A3			lda YB
 10408 6750 8D 13 A3			sta REMOVE_BLOCK.YA
 10409 6753 20 23 56			jsr REMOVE_BLOCK
 10410
 10411 				; optimize FAIL (0, service.pas), line = 1929
 10412
 10413 6756 CE F3 A1			dec REMAIN_BLK
 10414
 10415 				; optimize OK (service.pas), line = 1933
 10416
 10417 6759 AD 10 A2			lda CUR_PLAYER
 10418 675C 0A				asl @
 10419 675D 0A				asl @
 10420 675E 85 9F			sta :STACKORIGIN+9
 10421 6760 AC 68 A3			ldy I
 10422 6763 B9 00 DB			lda adr.WALL,y
 10423 6766 0A				asl @
 10424 6767 A8				tay
 10425 6768 B9 69 20			lda adr.SCORE_WALL,y
 10426 676B 85 A0			sta :STACKORIGIN+10
 10427 676D B9 6A 20			lda adr.SCORE_WALL+1,y
 10428 6770 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10429 6772 A4 9F			ldy :STACKORIGIN+9
 10430 6774 B9 F5 A1			lda adr.SCORE.PLAYER,y
 10431 6777 18 65 A0			add :STACKORIGIN+10
 10432 677A 99 F5 A1			sta adr.SCORE.PLAYER,y
 10433 677D B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 10434 6780 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10435 6782 99 F6 A1			sta adr.SCORE.PLAYER+1,y
 10436 6785 B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 10437 6788 69 00			adc #$00
 10438 678A 99 F7 A1			sta adr.SCORE.PLAYER+2,y
 10439 678D B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 10440 6790 69 00			adc #$00
 10441 6792 99 F8 A1			sta adr.SCORE.PLAYER+3,y
 10442
 10443 				; optimize OK (service.pas), line = 1935
 10444
 10445 6795 A9 2C			lda #$2C
 10446 6797 8D 8E A0			sta SYSTEM.RANDOM.@010184000.RANGE
 10447 679A A9 01			lda #$01
 10448 679C 8D 8F A0			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10449 679F 20 CC 35			jsr SYSTEM.RANDOM.@010184000
 10450 67A2 AD 20 A2			lda LETT.INCOMING
 10451 67A5 18 6D 90 A0			add SYSTEM.RANDOM.@010184000.RESULT
 10452 67A9 8D 20 A2			sta LETT.INCOMING
 10453 67AC AD 21 A2			lda LETT.INCOMING+1
 10454 67AF 6D 91 A0			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10455 67B2 8D 21 A2			sta LETT.INCOMING+1
 10456
 10457 				; optimize OK (service.pas), line = 1937
 10458
 10459 67B5 AD 60 A3			lda XB
 10460 67B8 85 9F			sta :STACKORIGIN+9
 10461 67BA A0 00			ldy #$00
 10462 67BC AD 61 A3			lda XB+1
 10463 67BF 10 01			spl
 10464 67C1 88				dey
 10465 67C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10466 67C4 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10467 67C6 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10468 67C8 06 9F			asl :STACKORIGIN+9
 10469 67CA 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10470 67CC 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10471 67CE 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10472 67D0 06 9F			asl :STACKORIGIN+9
 10473 67D2 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10474 67D4 06 9F			asl :STACKORIGIN+9
 10475 67D6 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10476 67D8 06 9F			asl :STACKORIGIN+9
 10477 67DA 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10478 67DC A5 9F			lda :STACKORIGIN+9
 10479 67DE 18 69 09			add #$09
 10480 67E1 8D 22 A2			sta LETT.NEXTX
 10481 67E4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10482 67E6 69 00			adc #$00
 10483 67E8 8D 23 A2			sta LETT.NEXTX+1
 10484
 10485 				; optimize OK (service.pas), line = 1938
 10486
 10487 67EB AD 62 A3			lda YB
 10488 67EE 85 9F			sta :STACKORIGIN+9
 10489 67F0 A0 00			ldy #$00
 10490 67F2 AD 63 A3			lda YB+1
 10491 67F5 10 01			spl
 10492 67F7 88				dey
 10493 67F8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10494 67FA 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10495 67FC 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10496 67FE A5 9F			lda :STACKORIGIN+9
 10497 6800 18 69 01			add #$01
 10498 6803 85 9F			sta :STACKORIGIN+9
 10499 6805 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10500 6807 69 00			adc #$00
 10501 6809 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10502 680B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10503 680D 69 00			adc #$00
 10504 680F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10505 6811 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10506 6813 69 00			adc #$00
 10507 6815 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10508 6817 06 9F			asl :STACKORIGIN+9
 10509 6819 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10510 681B 06 9F			asl :STACKORIGIN+9
 10511 681D 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10512 681F 06 9F			asl :STACKORIGIN+9
 10513 6821 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10514 6823 A5 9F			lda :STACKORIGIN+9
 10515 6825 18 69 16			add #$16
 10516 6828 8D 24 A2			sta LETT.NEXTY
 10517 682B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10518 682D 69 00			adc #$00
 10519 682F 8D 25 A2			sta LETT.NEXTY+1
 10520
 10521 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1939
 10522
 10523 6832 20 72 40			jsr RANDOM_LETTER_DROP
 10524 6835 AD 8F A2			lda RANDOM_LETTER_DROP.RESULT
 10525 6838 8D 26 A2			sta LETT.NEXTTYPE
 10526 683B AD 90 A2			lda RANDOM_LETTER_DROP.RESULT+1
 10527 683E 8D 27 A2			sta LETT.NEXTTYPE+1
 10528
 10529 				; optimize OK (service.pas), line = 1941
 10530
 10531 6841 AC 68 A3			ldy I
 10532 6844 A9 00			lda #$00
 10533 6846 99 00 DB			sta adr.WALL,y
 10534
 10535 				; optimize OK (service.pas), line = 1942
 10536
 10537 6849 A9 B8			lda #$B8
 10538 684B 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10539 684E A9 01			lda #$01
 10540 6850 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10541 6853 A9 03			lda #$03
 10542 6855 8D 32 A1			sta BALL_BLOCK_SOUND.B
 10543 6858 A9 00			lda #$00
 10544 685A 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 10545 685D 20 F1 3A			jsr BALL_BLOCK_SOUND
 10546
 10547 				; optimize OK (service.pas), line = 1943
 10548
 10549 6860 AC 64 A3 84 84 AC + 	mwy BALL :bp2
 10550 686A A0 14			ldy #BALL.SBD-DATAORIGIN
 10551 686C A9 00			lda #$00
 10552 686E 91 84			sta (:bp2),y
 10553 6870 C8				iny
 10554 6871 91 84			sta (:bp2),y
 10555
 10556 				; optimize OK (service.pas), line = 1944
 10557
 10558 6873 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10559 6875 91 84			sta (:bp2),y
 10560 6877 4C 04 69			jmp l_1981
 10561 687A			l_192D
 10562
 10563 				; optimize OK (service.pas), line = 1949
 10564
 10565 687A AC 68 A3			ldy I
 10566 687D B9 00 DB			lda adr.WALL,y
 10567 6880 29 0F			and #$0F
 10568 6882 C9 09			cmp #$09
 10569 6884 D0 45			jne l_199A
 10570
 10571 				; optimize OK (service.pas), line = 1951
 10572
 10573 6886 AC 64 A3 84 84 AC + 	mwy BALL :bp2
 10574 6890 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10575 6892 A9 00			lda #$00
 10576 6894 91 84			sta (:bp2),y
 10577
 10578 				; optimize OK (service.pas), line = 1952
 10579
 10580 6896 AC 68 A3			ldy I
 10581 6899 B9 00 DB			lda adr.WALL,y
 10582 689C 38 E9 10			sub #$10
 10583 689F 99 00 DB			sta adr.WALL,y
 10584
 10585 				; optimize OK (service.pas), line = 1954
 10586
 10587 68A2 A9 72			lda #$72
 10588 68A4 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10589 68A7 A9 01			lda #$01
 10590 68A9 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10591 68AC A9 04			lda #$04
 10592 68AE 8D 32 A1			sta BALL_BLOCK_SOUND.B
 10593 68B1 A9 00			lda #$00
 10594 68B3 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 10595 68B6 20 F1 3A			jsr BALL_BLOCK_SOUND
 10596
 10597 				; optimize OK (service.pas), line = 1955
 10598
 10599 68B9 AD 60 A3			lda XB
 10600 68BC 8D 8D A2			sta SHINE.XB
 10601 68BF AD 62 A3			lda YB
 10602 68C2 8D 8E A2			sta SHINE.YB
 10603 68C5 20 36 40			jsr SHINE
 10604 68C8 4C 04 69			jmp l_19B4
 10605 68CB			l_199A
 10606
 10607 				; optimize OK (service.pas), line = 1959
 10608
 10609 68CB AC 64 A3 84 84 AC + 	mwy BALL :bp2
 10610 68D5 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10611 68D7 B1 84			lda (:bp2),y
 10612 68D9 18 69 01			add #$01
 10613 68DC 91 84			sta (:bp2),y
 10614
 10615 				; optimize OK (service.pas), line = 1960
 10616
 10617 68DE AD 60 A3			lda XB
 10618 68E1 8D 8D A2			sta SHINE.XB
 10619 68E4 AD 62 A3			lda YB
 10620 68E7 8D 8E A2			sta SHINE.YB
 10621 68EA 20 36 40			jsr SHINE
 10622
 10623 				; optimize OK (service.pas), line = 1962
 10624
 10625 68ED A9 C8			lda #$C8
 10626 68EF 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10627 68F2 A9 00			lda #$00
 10628 68F4 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10629 68F7 A9 07			lda #$07
 10630 68F9 8D 32 A1			sta BALL_BLOCK_SOUND.B
 10631 68FC A9 00			lda #$00
 10632 68FE 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 10633 6901 20 F1 3A			jsr BALL_BLOCK_SOUND
 10634 6904			l_19B4
 10635 6904			l_1981
 10636 6904			l_1917
 10637 6904			l_18F3
 10638
 10639 				; ------------------------------------------------------------
 10640
 10641 = A360			XB	= DATAORIGIN+$0318
 10642 = A362			YB	= DATAORIGIN+$031A
 10643 = A364			BALL	= DATAORIGIN+$031C
 10644 = A048			BALL.X	= DATAORIGIN+$0000
 10645 = A04A			BALL.Y	= DATAORIGIN+$0002
 10646 = A04C			BALL.FINEX	= DATAORIGIN+$0004
 10647 = A04E			BALL.FINEY	= DATAORIGIN+$0006
 10648 = A050			BALL.OLDX	= DATAORIGIN+$0008
 10649 = A052			BALL.OLDY	= DATAORIGIN+$000A
 10650 = A054			BALL.SPEED	= DATAORIGIN+$000C
 10651 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
 10652 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
 10653 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
 10654 = A05C			BALL.SBD	= DATAORIGIN+$0014
 10655 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
 10656 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
 10657 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
 10658 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
 10659 = A063			BALL.STM	= DATAORIGIN+$001B
 10660 = A368			I	= DATAORIGIN+$0320
 10661
 10662 = A360			@VarData	= XB
 10663 = 0007			@VarDataSize	= 7
 10664
 10665 6904			@exit
 10666 					.ifdef @new
 10667 					lda <@VarData
 10668 					sta :ztmp
 10669 					lda >@VarData
 10670 					ldy #@VarDataSize-1
 10671 					jmp @FreeMem
 10672 					els
 10673 6904 60				rts						; ret
 10674 					eif
 10675 				.endl
 10676
 10677 6905			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10678
 10679 				; optimize OK (service.pas), line = 1973
 10680
 10681 6905 AD 6A A3			lda XB+1
 10682 6908 10 03 4C 1F 6A		jmi l_19F7
 10683 690D AD 69 A3			lda XB
 10684 6910 C9 0D			cmp #$0D
 10685 6912 AD 6A A3			lda XB+1
 10686 6915 E9 00			sbc #$00
 10687 6917 50 02			svc
 10688 6919 49 80			eor #$80
 10689 691B 30 03 4C 1F 6A		jpl l_19F7
 10690 6920 AD 6C A3			lda YB+1
 10691 6923 10 03 4C 1F 6A		jmi l_19F7
 10692 6928 AD 6B A3			lda YB
 10693 692B C9 0F			cmp #$0F
 10694 692D AD 6C A3			lda YB+1
 10695 6930 E9 00			sbc #$00
 10696 6932 50 02			svc
 10697 6934 49 80			eor #$80
 10698 6936 30 03 4C 1F 6A		jpl l_19F7
 10699
 10700 				; optimize OK (service.pas), line = 1976
 10701
 10702 693B AD 6B A3			lda YB
 10703 693E 0A				asl @
 10704 693F 0A				asl @
 10705 6940 0A				asl @
 10706 6941 0A				asl @
 10707 6942 18 6D 69 A3			add XB
 10708 6946 8D 6D A3			sta I
 10709
 10710 				; optimize OK (service.pas), line = 1978
 10711
 10712 6949 A8				tay
 10713 694A B9 00 DB			lda adr.WALL,y
 10714 694D D0 03 4C 1F 6A		jeq l_1A1B
 10715
 10716 				; optimize OK (service.pas), line = 1980
 10717
 10718 6952 C9 0A			cmp #$0A
 10719 6954 B0 65			jcs l_1A31
 10720
 10721 				; optimize OK (service.pas), line = 1982
 10722
 10723 6956 AD 69 A3			lda XB
 10724 6959 8D 12 A3			sta REMOVE_BLOCK.XA
 10725 695C AD 6B A3			lda YB
 10726 695F 8D 13 A3			sta REMOVE_BLOCK.YA
 10727 6962 20 23 56			jsr REMOVE_BLOCK
 10728
 10729 				; optimize FAIL (0, service.pas), line = 1983
 10730
 10731 6965 CE F3 A1			dec REMAIN_BLK
 10732
 10733 				; optimize OK (service.pas), line = 1984
 10734
 10735 6968 AD 10 A2			lda CUR_PLAYER
 10736 696B 0A				asl @
 10737 696C 0A				asl @
 10738 696D 85 9F			sta :STACKORIGIN+9
 10739 696F AC 6D A3			ldy I
 10740 6972 B9 00 DB			lda adr.WALL,y
 10741 6975 0A				asl @
 10742 6976 A8				tay
 10743 6977 B9 69 20			lda adr.SCORE_WALL,y
 10744 697A 85 A0			sta :STACKORIGIN+10
 10745 697C B9 6A 20			lda adr.SCORE_WALL+1,y
 10746 697F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10747 6981 A4 9F			ldy :STACKORIGIN+9
 10748 6983 B9 F5 A1			lda adr.SCORE.PLAYER,y
 10749 6986 18 65 A0			add :STACKORIGIN+10
 10750 6989 99 F5 A1			sta adr.SCORE.PLAYER,y
 10751 698C B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 10752 698F 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10753 6991 99 F6 A1			sta adr.SCORE.PLAYER+1,y
 10754 6994 B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 10755 6997 69 00			adc #$00
 10756 6999 99 F7 A1			sta adr.SCORE.PLAYER+2,y
 10757 699C B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 10758 699F 69 00			adc #$00
 10759 69A1 99 F8 A1			sta adr.SCORE.PLAYER+3,y
 10760
 10761 				; optimize OK (service.pas), line = 1985
 10762
 10763 69A4 AC 6D A3			ldy I
 10764 69A7 A9 00			lda #$00
 10765 69A9 99 00 DB			sta adr.WALL,y
 10766
 10767 				; optimize OK (service.pas), line = 1986
 10768
 10769 69AC A9 B8			lda #$B8
 10770 69AE 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10771 69B1 A9 01			lda #$01
 10772 69B3 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10773 69B6 A9 03			lda #$03
 10774 69B8 4C 14 6A			jmp l_1A59
 10775 69BB			l_1A31
 10776
 10777 				; optimize OK (service.pas), line = 1991
 10778
 10779 69BB AC 6D A3			ldy I
 10780 69BE B9 00 DB			lda adr.WALL,y
 10781 69C1 29 0F			and #$0F
 10782 69C3 C9 09			cmp #$09
 10783 69C5 D0 32			jne l_1A72
 10784
 10785 				; optimize OK (service.pas), line = 1993
 10786
 10787 69C7 B9 00 DB			lda adr.WALL,y
 10788 69CA 38 E9 10			sub #$10
 10789 69CD 99 00 DB			sta adr.WALL,y
 10790
 10791 				; optimize OK (service.pas), line = 1994
 10792
 10793 69D0 A9 72			lda #$72
 10794 69D2 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10795 69D5 A9 01			lda #$01
 10796 69D7 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10797 69DA A9 04			lda #$04
 10798 69DC 8D 32 A1			sta BALL_BLOCK_SOUND.B
 10799 69DF A9 00			lda #$00
 10800 69E1 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 10801 69E4 20 F1 3A			jsr BALL_BLOCK_SOUND
 10802
 10803 				; optimize OK (service.pas), line = 1995
 10804
 10805 69E7 AD 69 A3			lda XB
 10806 69EA 8D 8D A2			sta SHINE.XB
 10807 69ED AD 6B A3			lda YB
 10808 69F0 8D 8E A2			sta SHINE.YB
 10809 69F3 20 36 40			jsr SHINE
 10810 69F6 4C 1F 6A			jmp l_1A88
 10811 69F9			l_1A72
 10812
 10813 				; optimize OK (service.pas), line = 1999
 10814
 10815 69F9 AD 69 A3			lda XB
 10816 69FC 8D 8D A2			sta SHINE.XB
 10817 69FF AD 6B A3			lda YB
 10818 6A02 8D 8E A2			sta SHINE.YB
 10819 6A05 20 36 40			jsr SHINE
 10820
 10821 				; optimize OK (service.pas), line = 2000
 10822
 10823 6A08 A9 C8			lda #$C8
 10824 6A0A 8D 30 A1			sta BALL_BLOCK_SOUND.A
 10825 6A0D A9 00			lda #$00
 10826 6A0F 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 10827 6A12 A9 07			lda #$07
 10828 6A14			l_1A59
 10829 6A14 8D 32 A1			sta BALL_BLOCK_SOUND.B
 10830 6A17 A9 00			lda #$00
 10831 6A19 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 10832 6A1C 20 F1 3A			jsr BALL_BLOCK_SOUND
 10833 6A1F			l_1A88
 10834 6A1F			l_1A1B
 10835 6A1F			l_19F7
 10836
 10837 				; ------------------------------------------------------------
 10838
 10839 = A369			XB	= DATAORIGIN+$0321
 10840 = A36B			YB	= DATAORIGIN+$0323
 10841 = A36D			I	= DATAORIGIN+$0325
 10842
 10843 = A369			@VarData	= XB
 10844 = 0005			@VarDataSize	= 5
 10845
 10846 6A1F			@exit
 10847 					.ifdef @new
 10848 					lda <@VarData
 10849 					sta :ztmp
 10850 					lda >@VarData
 10851 					ldy #@VarDataSize-1
 10852 					jmp @FreeMem
 10853 					els
 10854 6A1F 60				rts						; ret
 10855 					eif
 10856 				.endl
 10857
 10858 6A20			.local	BALL_HIT_BLOCK					; PROCEDURE
 10859
 10860 				; optimize OK (service.pas), line = 2032
 10861
 10862 6A20 A9 FF			lda #$FF
 10863 6A22 8D 8E A3			sta EMERGENCY
 10864
 10865 				; optimize OK (service.pas), line = 2034
 10866
 10867 6A25 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 10868 6A2F A0 00			ldy #BALL.X-DATAORIGIN
 10869 6A31 B1 84			lda (:bp2),y
 10870 6A33 38 E9 09			sub #$09
 10871 6A36 8D 7C A3			sta NX
 10872 6A39 C8				iny
 10873 6A3A B1 84			lda (:bp2),y
 10874 6A3C E9 00			sbc #$00
 10875 6A3E 8D 7D A3			sta NX+1
 10876
 10877 				; optimize OK (service.pas), line = 2035
 10878
 10879 6A41 A0 02			ldy #BALL.Y-DATAORIGIN
 10880 6A43 B1 84			lda (:bp2),y
 10881 6A45 38 E9 16			sub #$16
 10882 6A48 8D 7E A3			sta NY
 10883 6A4B C8				iny
 10884 6A4C B1 84			lda (:bp2),y
 10885 6A4E E9 00			sbc #$00
 10886 6A50 8D 7F A3			sta NY+1
 10887
 10888 				; optimize OK (service.pas), line = 2038
 10889
 10890 6A53 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10891 6A55 B1 84			lda (:bp2),y
 10892 6A57 38 E9 09			sub #$09
 10893 6A5A 8D 78 A3			sta OX
 10894 6A5D C8				iny
 10895 6A5E B1 84			lda (:bp2),y
 10896 6A60 E9 00			sbc #$00
 10897 6A62 8D 79 A3			sta OX+1
 10898
 10899 				; optimize OK (service.pas), line = 2039
 10900
 10901 6A65 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10902 6A67 B1 84			lda (:bp2),y
 10903 6A69 38 E9 16			sub #$16
 10904 6A6C 8D 7A A3			sta OY
 10905 6A6F C8				iny
 10906 6A70 B1 84			lda (:bp2),y
 10907 6A72 E9 00			sbc #$00
 10908 6A74 8D 7B A3			sta OY+1
 10909
 10910 				; optimize OK (service.pas), line = 2041
 10911
 10912 6A77 AD 7D A3			lda NX+1
 10913 6A7A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10914 6A7C AD 7C A3			lda NX
 10915 6A7F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10916 6A81 6A				ror @
 10917 6A82 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10918 6A84 6A				ror @
 10919 6A85 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10920 6A87 6A				ror @
 10921 6A88 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10922 6A8A 6A				ror @
 10923 6A8B 8D 76 A3			sta XB
 10924
 10925 				; optimize OK (service.pas), line = 2042
 10926
 10927 6A8E AD 7F A3			lda NY+1
 10928 6A91 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10929 6A93 AD 7E A3			lda NY
 10930 6A96 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10931 6A98 6A				ror @
 10932 6A99 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10933 6A9B 6A				ror @
 10934 6A9C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10935 6A9E 6A				ror @
 10936 6A9F 8D 77 A3			sta YB
 10937
 10938 				; optimize OK (service.pas), line = 2046
 10939
 10940 6AA2 A9 10			lda #$10
 10941 6AA4 85 8E			sta :ecx
 10942 6AA6 85 92			sta :ztmp8
 10943 6AA8 AD 77 A3			lda YB
 10944 6AAB 85 86			sta :eax
 10945 6AAD 85 94			sta :ztmp10
 10946 					.ifdef fmulinit
 10947 					fmulu_8
 10948 					els
 10949 6AAF 20 DC 22			imulCL
 10950 					eif
 10951 6AB2 24 94			bit :ztmp10
 10952 6AB4 10 03			bpl @+
 10953 6AB6 38 E5 92			sub :ztmp8
 10954 				@
 10955 6AB9 24 92			bit :ztmp8
 10956 6ABB 10 03			bpl @+
 10957 6ABD 38 E5 94			sub :ztmp10
 10958 				@
 10959 6AC0 85 87			sta :eax+1
 10960 6AC2 A5 86			lda :eax
 10961 6AC4 18 6D 76 A3			add XB
 10962 6AC8 A8				tay
 10963 6AC9 B9 00 DB			lda adr.WALL,y
 10964 6ACC D0 03 4C F9 76		jeq l_1AF1
 10965
 10966 				; optimize OK (service.pas), line = 2048
 10967
 10968 6AD1 A9 78			lda <OX
 10969 6AD3 8D 36 A3			sta SPLIT_LINE.X1
 10970 6AD6 A9 A3			lda >OX
 10971 6AD8 8D 37 A3			sta SPLIT_LINE.X1+1
 10972 6ADB A9 7A			lda <OY
 10973 6ADD 8D 38 A3			sta SPLIT_LINE.Y1
 10974 6AE0 A9 A3			lda >OY
 10975 6AE2 8D 39 A3			sta SPLIT_LINE.Y1+1
 10976 6AE5 A9 7C			lda <NX
 10977 6AE7 8D 3A A3			sta SPLIT_LINE.X2
 10978 6AEA A9 A3			lda >NX
 10979 6AEC 8D 3B A3			sta SPLIT_LINE.X2+1
 10980 6AEF A9 7E			lda <NY
 10981 6AF1 8D 3C A3			sta SPLIT_LINE.Y2
 10982 6AF4 A9 A3			lda >NY
 10983 6AF6 8D 3D A3			sta SPLIT_LINE.Y2+1
 10984 6AF9 20 2B 5F			jsr SPLIT_LINE
 10985 6AFC AD 3E A3			lda SPLIT_LINE.RESULT
 10986 6AFF 8D 92 A3			sta COLLISION
 10987
 10988 				; optimize OK (service.pas), line = 2054
 10989
 10990 6B02 C9 03			cmp #$03
 10991 6B04 F0 03 4C 3A 6F		jne l_1B0C
 10992
 10993 				; optimize OK (service.pas), line = 2056
 10994
 10995 6B09 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 10996 6B13 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10997 6B15 B1 84			lda (:bp2),y
 10998 6B17 C8				iny
 10999 6B18 38 ED 78 A3			sub OX
 11000 6B1C 38 E9 09			sub #$09
 11001 6B1F 8D 74 A3			sta LX
 11002
 11003 				; optimize OK (service.pas), line = 2057
 11004
 11005 6B22 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11006 6B24 B1 84			lda (:bp2),y
 11007 6B26 C8				iny
 11008 6B27 38 ED 7A A3			sub OY
 11009 6B2B 38 E9 16			sub #$16
 11010 6B2E 8D 75 A3			sta LY
 11011
 11012 				; optimize OK (service.pas), line = 2059
 11013
 11014 6B31 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11015 6B33 B1 84			lda (:bp2),y
 11016 6B35 38 ED 7C A3			sub NX
 11017 6B39 85 9F			sta :STACKORIGIN+9
 11018 6B3B C8				iny
 11019 6B3C B1 84			lda (:bp2),y
 11020 6B3E ED 7D A3			sbc NX+1
 11021 6B41 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11022 6B43 A5 9F			lda :STACKORIGIN+9
 11023 6B45 38 E9 09			sub #$09
 11024 6B48 8D 80 A3			sta MX
 11025 6B4B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11026 6B4D E9 00			sbc #$00
 11027 6B4F 8D 81 A3			sta MX+1
 11028
 11029 				; optimize OK (service.pas), line = 2060
 11030
 11031 6B52 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11032 6B54 B1 84			lda (:bp2),y
 11033 6B56 38 ED 7E A3			sub NY
 11034 6B5A 85 9F			sta :STACKORIGIN+9
 11035 6B5C C8				iny
 11036 6B5D B1 84			lda (:bp2),y
 11037 6B5F ED 7F A3			sbc NY+1
 11038 6B62 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11039 6B64 A5 9F			lda :STACKORIGIN+9
 11040 6B66 38 E9 16			sub #$16
 11041 6B69 8D 82 A3			sta MY
 11042 6B6C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11043 6B6E E9 00			sbc #$00
 11044 6B70 8D 83 A3			sta MY+1
 11045
 11046 				; optimize OK (service.pas), line = 2062
 11047
 11048 6B73 AD 74 A3			lda LX
 11049 6B76 85 8E			sta :ecx
 11050 6B78 85 92			sta :ztmp8
 11051 6B7A 85 86			sta :eax
 11052 6B7C 85 94			sta :ztmp10
 11053 					.ifdef fmulinit
 11054 					fmulu_8
 11055 					els
 11056 6B7E 20 DC 22			imulCL
 11057 					eif
 11058 6B81 24 94			bit :ztmp10
 11059 6B83 10 03			bpl @+
 11060 6B85 38 E5 92			sub :ztmp8
 11061 				@
 11062 6B88 24 92			bit :ztmp8
 11063 6B8A 10 03			bpl @+
 11064 6B8C 38 E5 94			sub :ztmp10
 11065 				@
 11066 6B8F 85 87			sta :eax+1
 11067 6B91 A5 86			lda :eax
 11068 6B93 85 9F			sta :STACKORIGIN+9
 11069 6B95 A5 87			lda :eax+1
 11070 6B97 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11071 6B99 AD 75 A3			lda LY
 11072 6B9C 85 8E			sta :ecx
 11073 6B9E 85 92			sta :ztmp8
 11074 6BA0 85 86			sta :eax
 11075 6BA2 85 94			sta :ztmp10
 11076 					.ifdef fmulinit
 11077 					fmulu_8
 11078 					els
 11079 6BA4 20 DC 22			imulCL
 11080 					eif
 11081 6BA7 24 94			bit :ztmp10
 11082 6BA9 10 03			bpl @+
 11083 6BAB 38 E5 92			sub :ztmp8
 11084 				@
 11085 6BAE 24 92			bit :ztmp8
 11086 6BB0 10 03			bpl @+
 11087 6BB2 38 E5 94			sub :ztmp10
 11088 				@
 11089 6BB5 85 87			sta :eax+1
 11090 6BB7 A5 9F			lda :STACKORIGIN+9
 11091 6BB9 18 65 86			add :eax
 11092 6BBC 8D 84 A3			sta F1
 11093 6BBF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11094 6BC1 65 87			adc :eax+1
 11095 6BC3 8D 85 A3			sta F1+1
 11096
 11097 				; optimize OK (service.pas), line = 2063
 11098
 11099 6BC6 AD 80 A3			lda MX
 11100 6BC9 85 8E			sta :ecx
 11101 6BCB 85 86			sta :eax
 11102 6BCD AD 81 A3			lda MX+1
 11103 6BD0 85 8F			sta :ecx+1
 11104 6BD2 85 87			sta :eax+1
 11105 					.ifdef fmulinit
 11106 					fmulu_16
 11107 					els
 11108 6BD4 20 28 23			imulCX
 11109 					eif
 11110 6BD7 A5 86			lda :eax
 11111 6BD9 85 9F			sta :STACKORIGIN+9
 11112 6BDB A5 87			lda :eax+1
 11113 6BDD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11114 6BDF AD 82 A3			lda MY
 11115 6BE2 85 8E			sta :ecx
 11116 6BE4 85 86			sta :eax
 11117 6BE6 AD 83 A3			lda MY+1
 11118 6BE9 85 8F			sta :ecx+1
 11119 6BEB 85 87			sta :eax+1
 11120 					.ifdef fmulinit
 11121 					fmulu_16
 11122 					els
 11123 6BED 20 28 23			imulCX
 11124 					eif
 11125 6BF0 A5 86			lda :eax
 11126 6BF2 18 65 9F			add :STACKORIGIN+9
 11127 6BF5 8D 86 A3			sta F2
 11128 6BF8 A5 87			lda :eax+1
 11129 6BFA 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11130 6BFC 8D 87 A3			sta F2+1
 11131
 11132 				; optimize OK (service.pas), line = 2065
 11133
 11134 6BFF AD 84 A3			lda F1
 11135 6C02 CD 86 A3			cmp F2
 11136 6C05 AD 85 A3			lda F1+1
 11137 6C08 ED 87 A3			sbc F2+1
 11138 6C0B 50 02			svc
 11139 6C0D 49 80			eor #$80
 11140 6C0F 30 03 4C A5 6D		jpl l_1B83
 11141
 11142 				; optimize OK (service.pas), line = 2071
 11143
 11144 6C14 AD 78 A3			lda OX
 11145 6C17 85 A0			sta :STACKORIGIN+10
 11146 6C19 A0 00			ldy #$00
 11147 6C1B AD 79 A3			lda OX+1
 11148 6C1E 10 01			spl
 11149 6C20 88				dey
 11150 6C21 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11151 6C23 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11152 6C25 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11153 6C27 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11154 6C29 66 A0			ror :STACKORIGIN+10
 11155 6C2B 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11156 6C2D 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11157 6C2F 66 A0			ror :STACKORIGIN+10
 11158 6C31 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11159 6C33 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11160 6C35 66 A0			ror :STACKORIGIN+10
 11161 6C37 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11162 6C39 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11163 6C3B 66 A0			ror :STACKORIGIN+10
 11164 6C3D A5 A0			lda :STACKORIGIN+10
 11165 6C3F 8D 6F A2			sta MAX.A
 11166 6C42 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11167 6C44 8D 70 A2			sta MAX.A+1
 11168 6C47 A9 00			lda #$00
 11169 6C49 8D 71 A2			sta MAX.B
 11170 6C4C 8D 72 A2			sta MAX.B+1
 11171 6C4F 20 78 3D			jsr MAX
 11172 6C52 A9 0C			lda #$0C
 11173 6C54 8D 75 A2			sta MIN.A
 11174 6C57 A9 00			lda #$00
 11175 6C59 8D 76 A2			sta MIN.A+1
 11176 6C5C AD 73 A2			lda MAX.RESULT
 11177 6C5F 8D 77 A2			sta MIN.B
 11178 6C62 AD 74 A2			lda MAX.RESULT+1
 11179 6C65 8D 78 A2			sta MIN.B+1
 11180 6C68 20 A3 3D			jsr MIN
 11181 6C6B AD 79 A2			lda MIN.RESULT
 11182 6C6E 8D 76 A3			sta XB
 11183
 11184 				; optimize OK (service.pas), line = 2072
 11185
 11186 6C71 AD 7A A3			lda OY
 11187 6C74 85 9F			sta :STACKORIGIN+9
 11188 6C76 A0 00			ldy #$00
 11189 6C78 AD 7B A3			lda OY+1
 11190 6C7B 10 01			spl
 11191 6C7D 88				dey
 11192 6C7E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11193 6C80 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11194 6C82 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11195 6C84 A5 9F			lda :STACKORIGIN+9
 11196 6C86 18 69 18			add #$18
 11197 6C89 85 9F			sta :STACKORIGIN+9
 11198 6C8B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11199 6C8D 69 00			adc #$00
 11200 6C8F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11201 6C91 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11202 6C93 69 00			adc #$00
 11203 6C95 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11204 6C97 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11205 6C99 69 00			adc #$00
 11206 6C9B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11207 6C9D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11208 6C9F 66 9F			ror :STACKORIGIN+9
 11209 6CA1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11210 6CA3 66 9F			ror :STACKORIGIN+9
 11211 6CA5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11212 6CA7 66 9F			ror :STACKORIGIN+9
 11213 6CA9 A5 9F			lda :STACKORIGIN+9
 11214 6CAB 38 E9 03			sub #$03
 11215 6CAE 8D 77 A3			sta YB
 11216
 11217 				; optimize OK (service.pas), line = 2075
 11218
 11219 6CB1 A9 10			lda #$10
 11220 6CB3 85 8E			sta :ecx
 11221 6CB5 85 92			sta :ztmp8
 11222 6CB7 AD 77 A3			lda YB
 11223 6CBA 85 86			sta :eax
 11224 6CBC 85 94			sta :ztmp10
 11225 					.ifdef fmulinit
 11226 					fmulu_8
 11227 					els
 11228 6CBE 20 DC 22			imulCL
 11229 					eif
 11230 6CC1 24 94			bit :ztmp10
 11231 6CC3 10 03			bpl @+
 11232 6CC5 38 E5 92			sub :ztmp8
 11233 				@
 11234 6CC8 24 92			bit :ztmp8
 11235 6CCA 10 03			bpl @+
 11236 6CCC 38 E5 94			sub :ztmp10
 11237 				@
 11238 6CCF 85 87			sta :eax+1
 11239 6CD1 A5 86			lda :eax
 11240 6CD3 18 6D 76 A3			add XB
 11241 6CD7 A8				tay
 11242 6CD8 B9 00 DB			lda adr.WALL,y
 11243 6CDB F0 03 4C 8A 6D		jne l_1BC1
 11244
 11245 				; optimize OK (service.pas), line = 2077
 11246
 11247 6CE0 AD 7C A3			lda NX
 11248 6CE3 85 9F			sta :STACKORIGIN+9
 11249 6CE5 A0 00			ldy #$00
 11250 6CE7 AD 7D A3			lda NX+1
 11251 6CEA 10 01			spl
 11252 6CEC 88				dey
 11253 6CED 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11254 6CEF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11255 6CF1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11256 6CF3 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11257 6CF5 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11258 6CF7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11259 6CF9 66 9F			ror :STACKORIGIN+9
 11260 6CFB 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11261 6CFD 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11262 6CFF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11263 6D01 66 9F			ror :STACKORIGIN+9
 11264 6D03 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11265 6D05 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11266 6D07 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11267 6D09 66 9F			ror :STACKORIGIN+9
 11268 6D0B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11269 6D0D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11270 6D0F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11271 6D11 66 9F			ror :STACKORIGIN+9
 11272 6D13 A9 00			lda #$00
 11273 6D15 8D 6F A2			sta MAX.A
 11274 6D18 8D 70 A2			sta MAX.A+1
 11275 6D1B A5 9F			lda :STACKORIGIN+9
 11276 6D1D 8D 71 A2			sta MAX.B
 11277 6D20 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11278 6D22 8D 72 A2			sta MAX.B+1
 11279 6D25 20 78 3D			jsr MAX
 11280 6D28 A9 0C			lda #$0C
 11281 6D2A 8D 75 A2			sta MIN.A
 11282 6D2D A9 00			lda #$00
 11283 6D2F 8D 76 A2			sta MIN.A+1
 11284 6D32 AD 73 A2			lda MAX.RESULT
 11285 6D35 8D 77 A2			sta MIN.B
 11286 6D38 AD 74 A2			lda MAX.RESULT+1
 11287 6D3B 8D 78 A2			sta MIN.B+1
 11288 6D3E 20 A3 3D			jsr MIN
 11289 6D41 AD 79 A2			lda MIN.RESULT
 11290 6D44 8D 76 A3			sta XB
 11291
 11292 				; optimize OK (service.pas), line = 2078
 11293
 11294 6D47 AD 7E A3			lda NY
 11295 6D4A 85 9F			sta :STACKORIGIN+9
 11296 6D4C A0 00			ldy #$00
 11297 6D4E AD 7F A3			lda NY+1
 11298 6D51 10 01			spl
 11299 6D53 88				dey
 11300 6D54 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11301 6D56 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11302 6D58 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11303 6D5A A5 9F			lda :STACKORIGIN+9
 11304 6D5C 18 69 18			add #$18
 11305 6D5F 85 9F			sta :STACKORIGIN+9
 11306 6D61 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11307 6D63 69 00			adc #$00
 11308 6D65 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11309 6D67 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11310 6D69 69 00			adc #$00
 11311 6D6B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11312 6D6D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11313 6D6F 69 00			adc #$00
 11314 6D71 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11315 6D73 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11316 6D75 66 9F			ror :STACKORIGIN+9
 11317 6D77 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11318 6D79 66 9F			ror :STACKORIGIN+9
 11319 6D7B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11320 6D7D 66 9F			ror :STACKORIGIN+9
 11321 6D7F A5 9F			lda :STACKORIGIN+9
 11322 6D81 38 E9 03			sub #$03
 11323 6D84 8D 77 A3			sta YB
 11324 6D87 4C A2 6D			jmp l_1BE9
 11325 6D8A			l_1BC1
 11326
 11327 				; optimize OK (service.pas), line = 2082
 11328
 11329 6D8A AD 78 A3			lda OX
 11330 6D8D 8D 7C A3			sta NX
 11331 6D90 AD 79 A3			lda OX+1
 11332 6D93 8D 7D A3			sta NX+1
 11333
 11334 				; optimize OK (service.pas), line = 2083
 11335
 11336 6D96 AD 7A A3			lda OY
 11337 6D99 8D 7E A3			sta NY
 11338 6D9C AD 7B A3			lda OY+1
 11339 6D9F 8D 7F A3			sta NY+1
 11340 6DA2			l_1BE9
 11341 6DA2 4C 3A 6F			jmp l_1BFC
 11342 6DA5			l_1B83
 11343
 11344 				; optimize OK (service.pas), line = 2093
 11345
 11346 6DA5 AD 7C A3			lda NX
 11347 6DA8 85 9F			sta :STACKORIGIN+9
 11348 6DAA A0 00			ldy #$00
 11349 6DAC AD 7D A3			lda NX+1
 11350 6DAF 10 01			spl
 11351 6DB1 88				dey
 11352 6DB2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11353 6DB4 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11354 6DB6 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11355 6DB8 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11356 6DBA 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11357 6DBC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11358 6DBE 66 9F			ror :STACKORIGIN+9
 11359 6DC0 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11360 6DC2 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11361 6DC4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11362 6DC6 66 9F			ror :STACKORIGIN+9
 11363 6DC8 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11364 6DCA 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11365 6DCC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11366 6DCE 66 9F			ror :STACKORIGIN+9
 11367 6DD0 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11368 6DD2 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11369 6DD4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11370 6DD6 66 9F			ror :STACKORIGIN+9
 11371 6DD8 A9 00			lda #$00
 11372 6DDA 8D 6F A2			sta MAX.A
 11373 6DDD 8D 70 A2			sta MAX.A+1
 11374 6DE0 A5 9F			lda :STACKORIGIN+9
 11375 6DE2 8D 71 A2			sta MAX.B
 11376 6DE5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11377 6DE7 8D 72 A2			sta MAX.B+1
 11378 6DEA 20 78 3D			jsr MAX
 11379 6DED A9 0C			lda #$0C
 11380 6DEF 8D 75 A2			sta MIN.A
 11381 6DF2 A9 00			lda #$00
 11382 6DF4 8D 76 A2			sta MIN.A+1
 11383 6DF7 AD 73 A2			lda MAX.RESULT
 11384 6DFA 8D 77 A2			sta MIN.B
 11385 6DFD AD 74 A2			lda MAX.RESULT+1
 11386 6E00 8D 78 A2			sta MIN.B+1
 11387 6E03 20 A3 3D			jsr MIN
 11388 6E06 AD 79 A2			lda MIN.RESULT
 11389 6E09 8D 76 A3			sta XB
 11390
 11391 				; optimize OK (service.pas), line = 2094
 11392
 11393 6E0C AD 7E A3			lda NY
 11394 6E0F 85 9F			sta :STACKORIGIN+9
 11395 6E11 A0 00			ldy #$00
 11396 6E13 AD 7F A3			lda NY+1
 11397 6E16 10 01			spl
 11398 6E18 88				dey
 11399 6E19 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11400 6E1B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11401 6E1D 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11402 6E1F A5 9F			lda :STACKORIGIN+9
 11403 6E21 18 69 18			add #$18
 11404 6E24 85 9F			sta :STACKORIGIN+9
 11405 6E26 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11406 6E28 69 00			adc #$00
 11407 6E2A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11408 6E2C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11409 6E2E 69 00			adc #$00
 11410 6E30 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11411 6E32 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11412 6E34 69 00			adc #$00
 11413 6E36 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11414 6E38 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11415 6E3A 66 9F			ror :STACKORIGIN+9
 11416 6E3C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11417 6E3E 66 9F			ror :STACKORIGIN+9
 11418 6E40 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11419 6E42 66 9F			ror :STACKORIGIN+9
 11420 6E44 A5 9F			lda :STACKORIGIN+9
 11421 6E46 38 E9 03			sub #$03
 11422 6E49 8D 77 A3			sta YB
 11423
 11424 				; optimize OK (service.pas), line = 2096
 11425
 11426 6E4C A9 10			lda #$10
 11427 6E4E 85 8E			sta :ecx
 11428 6E50 85 92			sta :ztmp8
 11429 6E52 AD 77 A3			lda YB
 11430 6E55 85 86			sta :eax
 11431 6E57 85 94			sta :ztmp10
 11432 					.ifdef fmulinit
 11433 					fmulu_8
 11434 					els
 11435 6E59 20 DC 22			imulCL
 11436 					eif
 11437 6E5C 24 94			bit :ztmp10
 11438 6E5E 10 03			bpl @+
 11439 6E60 38 E5 92			sub :ztmp8
 11440 				@
 11441 6E63 24 92			bit :ztmp8
 11442 6E65 10 03			bpl @+
 11443 6E67 38 E5 94			sub :ztmp10
 11444 				@
 11445 6E6A 85 87			sta :eax+1
 11446 6E6C A5 86			lda :eax
 11447 6E6E 18 6D 76 A3			add XB
 11448 6E72 A8				tay
 11449 6E73 B9 00 DB			lda adr.WALL,y
 11450 6E76 F0 03 4C 3A 6F		jne l_1C39
 11451
 11452 				; optimize OK (service.pas), line = 2098
 11453
 11454 6E7B AD 78 A3			lda OX
 11455 6E7E 8D 7C A3			sta NX
 11456 6E81 AD 79 A3			lda OX+1
 11457 6E84 8D 7D A3			sta NX+1
 11458
 11459 				; optimize OK (service.pas), line = 2099
 11460
 11461 6E87 AD 7A A3			lda OY
 11462 6E8A 8D 7E A3			sta NY
 11463 6E8D AD 7B A3			lda OY+1
 11464 6E90 8D 7F A3			sta NY+1
 11465
 11466 				; optimize OK (service.pas), line = 2101
 11467
 11468 6E93 AD 7C A3			lda NX
 11469 6E96 85 9F			sta :STACKORIGIN+9
 11470 6E98 A0 00			ldy #$00
 11471 6E9A AD 7D A3			lda NX+1
 11472 6E9D 10 01			spl
 11473 6E9F 88				dey
 11474 6EA0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11475 6EA2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11476 6EA4 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11477 6EA6 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11478 6EA8 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11479 6EAA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11480 6EAC 66 9F			ror :STACKORIGIN+9
 11481 6EAE 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11482 6EB0 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11483 6EB2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11484 6EB4 66 9F			ror :STACKORIGIN+9
 11485 6EB6 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11486 6EB8 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11487 6EBA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11488 6EBC 66 9F			ror :STACKORIGIN+9
 11489 6EBE 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11490 6EC0 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11491 6EC2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11492 6EC4 66 9F			ror :STACKORIGIN+9
 11493 6EC6 A9 00			lda #$00
 11494 6EC8 8D 6F A2			sta MAX.A
 11495 6ECB 8D 70 A2			sta MAX.A+1
 11496 6ECE A5 9F			lda :STACKORIGIN+9
 11497 6ED0 8D 71 A2			sta MAX.B
 11498 6ED3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11499 6ED5 8D 72 A2			sta MAX.B+1
 11500 6ED8 20 78 3D			jsr MAX
 11501 6EDB A9 0C			lda #$0C
 11502 6EDD 8D 75 A2			sta MIN.A
 11503 6EE0 A9 00			lda #$00
 11504 6EE2 8D 76 A2			sta MIN.A+1
 11505 6EE5 AD 73 A2			lda MAX.RESULT
 11506 6EE8 8D 77 A2			sta MIN.B
 11507 6EEB AD 74 A2			lda MAX.RESULT+1
 11508 6EEE 8D 78 A2			sta MIN.B+1
 11509 6EF1 20 A3 3D			jsr MIN
 11510 6EF4 AD 79 A2			lda MIN.RESULT
 11511 6EF7 8D 76 A3			sta XB
 11512
 11513 				; optimize OK (service.pas), line = 2102
 11514
 11515 6EFA AD 7E A3			lda NY
 11516 6EFD 85 9F			sta :STACKORIGIN+9
 11517 6EFF A0 00			ldy #$00
 11518 6F01 AD 7F A3			lda NY+1
 11519 6F04 10 01			spl
 11520 6F06 88				dey
 11521 6F07 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11522 6F09 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11523 6F0B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11524 6F0D A5 9F			lda :STACKORIGIN+9
 11525 6F0F 18 69 18			add #$18
 11526 6F12 85 9F			sta :STACKORIGIN+9
 11527 6F14 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11528 6F16 69 00			adc #$00
 11529 6F18 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11530 6F1A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11531 6F1C 69 00			adc #$00
 11532 6F1E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11533 6F20 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11534 6F22 69 00			adc #$00
 11535 6F24 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11536 6F26 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11537 6F28 66 9F			ror :STACKORIGIN+9
 11538 6F2A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11539 6F2C 66 9F			ror :STACKORIGIN+9
 11540 6F2E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11541 6F30 66 9F			ror :STACKORIGIN+9
 11542 6F32 A5 9F			lda :STACKORIGIN+9
 11543 6F34 38 E9 03			sub #$03
 11544 6F37 8D 77 A3			sta YB
 11545 6F3A			l_1C39
 11546 6F3A			l_1BFC
 11547 6F3A			l_1B0C
 11548
 11549 				; optimize OK (service.pas), line = 2108
 11550
 11551 6F3A AC 6E A3 84 84 AC + 	mwy BALL :bp2
 11552 6F44 A0 00			ldy #BALL.X-DATAORIGIN
 11553 6F46 AD 7C A3			lda NX
 11554 6F49 18 69 09			add #$09
 11555 6F4C 91 84			sta (:bp2),y
 11556 6F4E C8				iny
 11557 6F4F AD 7D A3			lda NX+1
 11558 6F52 69 00			adc #$00
 11559 6F54 91 84			sta (:bp2),y
 11560
 11561 				; optimize OK (service.pas), line = 2109
 11562
 11563 6F56 A0 02			ldy #BALL.Y-DATAORIGIN
 11564 6F58 AD 7E A3			lda NY
 11565 6F5B 18 69 16			add #$16
 11566 6F5E 91 84			sta (:bp2),y
 11567 6F60 C8				iny
 11568 6F61 AD 7F A3			lda NY+1
 11569 6F64 69 00			adc #$00
 11570 6F66 91 84			sta (:bp2),y
 11571
 11572 				; optimize OK (service.pas), line = 2113
 11573
 11574 6F68 A0 00			ldy #$00
 11575 6F6A AD 77 A3			lda YB
 11576 6F6D 10 01			spl
 11577 6F6F 88				dey
 11578 6F70 8C 63 A3			sty SHOOT_BLOCK.YB+1
 11579 6F73 8D 62 A3			sta SHOOT_BLOCK.YB
 11580 6F76 A0 00			ldy #$00
 11581 6F78 AD 76 A3			lda XB
 11582 6F7B 10 01			spl
 11583 6F7D 88				dey
 11584 6F7E 8C 61 A3			sty SHOOT_BLOCK.XB+1
 11585 6F81 8D 60 A3			sta SHOOT_BLOCK.XB
 11586 6F84 AD 6E A3			lda BALL
 11587 6F87 8D 64 A3			sta SHOOT_BLOCK.BALL
 11588 6F8A AD 6F A3			lda BALL+1
 11589 6F8D 8D 65 A3			sta SHOOT_BLOCK.BALL+1
 11590 6F90 20 F3 66			jsr SHOOT_BLOCK
 11591
 11592 				; optimize OK (service.pas), line = 2115
 11593
 11594 6F93 AD 7C A3			lda NX
 11595 6F96 29 0F			and #$0F
 11596 6F98 85 9F			sta :STACKORIGIN+9
 11597 6F9A A9 00			lda #$00
 11598 6F9C 4A				lsr @
 11599 6F9D 66 9F			ror :STACKORIGIN+9
 11600 6F9F A5 9F			lda :STACKORIGIN+9
 11601 6FA1 8D 72 A3			sta X
 11602
 11603 				; optimize OK (service.pas), line = 2116
 11604
 11605 6FA4 AD 7E A3			lda NY
 11606 6FA7 29 07			and #$07
 11607 6FA9 8D 73 A3			sta Y
 11608
 11609 				; optimize OK (service.pas), line = 2128
 11610
 11611 6FAC AD 72 A3			lda X
 11612 6FAF F0 12			jeq l_1CCD
 11613 6FB1 C9 07			cmp #$07
 11614 6FB3 F0 0E			jeq l_1CCD
 11615 6FB5 AD 73 A3			lda Y
 11616 6FB8 F0 09			jeq l_1CCD
 11617 6FBA C9 07			cmp #$07
 11618 6FBC F0 05			jeq l_1CCD
 11619
 11620 				; optimize OK (service.pas), line = 2129
 11621
 11622 6FBE A9 03			lda #$03
 11623 6FC0 20 CE 3D			jsr FATAL_ERROR
 11624 6FC3			l_1CCD
 11625
 11626 				; optimize OK (service.pas), line = 2144
 11627
 11628 6FC3 AD 73 A3			lda Y
 11629 6FC6 38 ED 72 A3			sub X
 11630 6FCA 50 02			svc
 11631 6FCC 49 80			eor #$80
 11632 6FCE 10 3E			jpl l_1CF8
 11633 6FD0 A9 07			lda #$07
 11634 6FD2 38 ED 73 A3			sub Y
 11635 6FD6 85 A1			sta :STACKORIGIN+11
 11636 6FD8 AD 72 A3			lda X
 11637 6FDB 38 E5 A1			sub :STACKORIGIN+11
 11638 6FDE 50 02			svc
 11639 6FE0 49 80			eor #$80
 11640 6FE2 10 2A			jpl l_1CF8
 11641
 11642 				; optimize OK (service.pas), line = 2146
 11643
 11644 6FE4 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 11645 6FEE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11646 6FF0 A9 00			lda #$00
 11647 6FF2 38 F1 84			sub (:bp2),y
 11648 6FF5 85 9F			sta :STACKORIGIN+9
 11649 6FF7 C8				iny
 11650 6FF8 A9 00			lda #$00
 11651 6FFA F1 84			sbc (:bp2),y
 11652 6FFC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11653 6FFE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11654 7000 A5 9F			lda :STACKORIGIN+9
 11655 7002 91 84			sta (:bp2),y
 11656 7004 C8				iny
 11657 7005 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11658 7007 91 84			sta (:bp2),y
 11659
 11660 				; optimize OK (service.pas), line = 2147
 11661
 11662 7009 A9 01			lda #$01
 11663 700B 8D 8E A3			sta EMERGENCY
 11664 700E			l_1CF8
 11665
 11666 				; optimize OK (service.pas), line = 2151
 11667
 11668 700E A9 07			lda #$07
 11669 7010 38 ED 73 A3			sub Y
 11670 7014 38 ED 72 A3			sub X
 11671 7018 50 02			svc
 11672 701A 49 80			eor #$80
 11673 701C 10 37			jpl l_1D2D
 11674 701E AD 72 A3			lda X
 11675 7021 38 ED 73 A3			sub Y
 11676 7025 50 02			svc
 11677 7027 49 80			eor #$80
 11678 7029 10 2A			jpl l_1D2D
 11679
 11680 				; optimize OK (service.pas), line = 2153
 11681
 11682 702B AC 6E A3 84 84 AC + 	mwy BALL :bp2
 11683 7035 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11684 7037 A9 00			lda #$00
 11685 7039 38 F1 84			sub (:bp2),y
 11686 703C 85 9F			sta :STACKORIGIN+9
 11687 703E C8				iny
 11688 703F A9 00			lda #$00
 11689 7041 F1 84			sbc (:bp2),y
 11690 7043 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11691 7045 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11692 7047 A5 9F			lda :STACKORIGIN+9
 11693 7049 91 84			sta (:bp2),y
 11694 704B C8				iny
 11695 704C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11696 704E 91 84			sta (:bp2),y
 11697
 11698 				; optimize OK (service.pas), line = 2154
 11699
 11700 7050 A9 03			lda #$03
 11701 7052 8D 8E A3			sta EMERGENCY
 11702 7055			l_1D2D
 11703
 11704 				; optimize OK (service.pas), line = 2158
 11705
 11706 7055 AD 72 A3			lda X
 11707 7058 38 ED 73 A3			sub Y
 11708 705C 50 02			svc
 11709 705E 49 80			eor #$80
 11710 7060 10 3E			jpl l_1D62
 11711 7062 A9 07			lda #$07
 11712 7064 38 ED 72 A3			sub X
 11713 7068 85 A1			sta :STACKORIGIN+11
 11714 706A AD 73 A3			lda Y
 11715 706D 38 E5 A1			sub :STACKORIGIN+11
 11716 7070 50 02			svc
 11717 7072 49 80			eor #$80
 11718 7074 10 2A			jpl l_1D62
 11719
 11720 				; optimize OK (service.pas), line = 2160
 11721
 11722 7076 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 11723 7080 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11724 7082 A9 00			lda #$00
 11725 7084 38 F1 84			sub (:bp2),y
 11726 7087 85 9F			sta :STACKORIGIN+9
 11727 7089 C8				iny
 11728 708A A9 00			lda #$00
 11729 708C F1 84			sbc (:bp2),y
 11730 708E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11731 7090 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11732 7092 A5 9F			lda :STACKORIGIN+9
 11733 7094 91 84			sta (:bp2),y
 11734 7096 C8				iny
 11735 7097 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11736 7099 91 84			sta (:bp2),y
 11737
 11738 				; optimize OK (service.pas), line = 2161
 11739
 11740 709B A9 02			lda #$02
 11741 709D 8D 8E A3			sta EMERGENCY
 11742 70A0			l_1D62
 11743
 11744 				; optimize OK (service.pas), line = 2165
 11745
 11746 70A0 A9 07			lda #$07
 11747 70A2 38 ED 72 A3			sub X
 11748 70A6 38 ED 73 A3			sub Y
 11749 70AA 50 02			svc
 11750 70AC 49 80			eor #$80
 11751 70AE 10 37			jpl l_1D97
 11752 70B0 AD 73 A3			lda Y
 11753 70B3 38 ED 72 A3			sub X
 11754 70B7 50 02			svc
 11755 70B9 49 80			eor #$80
 11756 70BB 10 2A			jpl l_1D97
 11757
 11758 				; optimize OK (service.pas), line = 2167
 11759
 11760 70BD AC 6E A3 84 84 AC + 	mwy BALL :bp2
 11761 70C7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11762 70C9 A9 00			lda #$00
 11763 70CB 38 F1 84			sub (:bp2),y
 11764 70CE 85 9F			sta :STACKORIGIN+9
 11765 70D0 C8				iny
 11766 70D1 A9 00			lda #$00
 11767 70D3 F1 84			sbc (:bp2),y
 11768 70D5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11769 70D7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11770 70D9 A5 9F			lda :STACKORIGIN+9
 11771 70DB 91 84			sta (:bp2),y
 11772 70DD C8				iny
 11773 70DE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11774 70E0 91 84			sta (:bp2),y
 11775
 11776 				; optimize OK (service.pas), line = 2168
 11777
 11778 70E2 A9 04			lda #$04
 11779 70E4 8D 8E A3			sta EMERGENCY
 11780 70E7			l_1D97
 11781
 11782 				; optimize OK (service.pas), line = 2172
 11783
 11784 70E7 AD 72 A3			lda X
 11785 70EA CD 73 A3			cmp Y
 11786 70ED F0 0E			jeq l_1DCCx
 11787 70EF A9 07			lda #$07
 11788 70F1 38 ED 73 A3			sub Y
 11789 70F5 CD 72 A3			cmp X
 11790 70F8 F0 03 4C F9 76		jne l_1DCC
 11791 70FD			l_1DCCx
 11792
 11793 				; optimize OK (service.pas), line = 2174
 11794
 11795 70FD A9 00			lda #$00
 11796 70FF 8D 90 A3			sta DEFLECT
 11797
 11798 				; optimize OK (service.pas), line = 2175
 11799
 11800 7102 8D 93 A3			sta TOUCH
 11801
 11802 				; optimize OK (service.pas), line = 2183
 11803
 11804 7105 AD 72 A3			lda X
 11805 7108 38 E9 05			sub #$05
 11806 710B 50 02			svc
 11807 710D 49 80			eor #$80
 11808 710F 30 08			jmi l_1DE7
 11809 7111 AD 93 A3			lda TOUCH
 11810 7114 09 01			ora #$01
 11811 7116 8D 93 A3			sta TOUCH
 11812 7119			l_1DE7
 11813
 11814 				; optimize OK (service.pas), line = 2184
 11815
 11816 7119 AD 73 A3			lda Y
 11817 711C 38 E9 05			sub #$05
 11818 711F 50 02			svc
 11819 7121 49 80			eor #$80
 11820 7123 30 08			jmi l_1E06
 11821 7125 AD 93 A3			lda TOUCH
 11822 7128 09 02			ora #$02
 11823 712A 8D 93 A3			sta TOUCH
 11824 712D			l_1E06
 11825
 11826 				; optimize OK (service.pas), line = 2193
 11827
 11828 712D A9 FF			lda #$FF
 11829 712F 8D 74 A3			sta LX
 11830
 11831 7132			l_1E1C
 11832 				; --- ForToDoCondition
 11833 7132 AD 74 A3			lda LX
 11834 7135 38 E9 02			sub #$02
 11835 7138 50 02			svc
 11836 713A 49 80			eor #$80
 11837 713C 0A				asl @
 11838 713D B0 03 4C 68 72		jcc l_1E2A
 11839
 11840 				; optimize OK (service.pas), line = 2194
 11841
 11842 7142 A9 FF			lda #$FF
 11843 7144 8D 75 A3			sta LY
 11844
 11845 7147			l_1E33
 11846 				; --- ForToDoCondition
 11847 7147 AD 75 A3			lda LY
 11848 714A 38 E9 02			sub #$02
 11849 714D 50 02			svc
 11850 714F 49 80			eor #$80
 11851 7151 0A				asl @
 11852 7152 B0 03 4C 5B 72		jcc l_1E41
 11853
 11854 				; optimize FAIL (1, service.pas), line = 2196
 11855
 11856 7157 E8				inx
 11857 7158 A9 00 95 96			mva #$00 :STACKORIGIN,x
 11858 715C 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11859 715E E8				inx
 11860 715F A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11861 7163 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11862 7167 E8				inx
 11863 7168 AD 76 A3 95 96		mva XB :STACKORIGIN,x
 11864 716D E8				inx
 11865 716E AD 74 A3 95 96		mva LX :STACKORIGIN,x
 11866 7173 20 41 21			jsr @expandSHORT2SMALL1
 11867 7176 20 36 21			jsr @expandSHORT2SMALL
 11868 7179 20 B5 20			jsr addAX_CX
 11869 717C CA				dex
 11870 717D B5 96			lda :STACKORIGIN,x
 11871 717F 8D 75 A2			sta MIN.A
 11872 7182 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11873 7184 8D 76 A2			sta MIN.A+1
 11874 7187 CA				dex
 11875 7188 B5 96			lda :STACKORIGIN,x
 11876 718A 8D 77 A2			sta MIN.B
 11877 718D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11878 718F 8D 78 A2			sta MIN.B+1
 11879 7192 CA				dex
 11880 7193 20 A3 3D			jsr MIN
 11881 7196 AD 79 A2			lda MIN.RESULT
 11882 7199 8D 6F A2			sta MAX.A
 11883 719C AD 7A A2			lda MIN.RESULT+1
 11884 719F 8D 70 A2			sta MAX.A+1
 11885 71A2 B5 96			lda :STACKORIGIN,x
 11886 71A4 8D 71 A2			sta MAX.B
 11887 71A7 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11888 71A9 8D 72 A2			sta MAX.B+1
 11889 71AC CA				dex
 11890 71AD 20 78 3D			jsr MAX
 11891 71B0 AD 73 A2			lda MAX.RESULT
 11892 71B3 8D 80 A3			sta MX
 11893 71B6 AD 74 A2			lda MAX.RESULT+1
 11894 71B9 8D 81 A3			sta MX+1
 11895
 11896 				; optimize OK (service.pas), line = 2197
 11897
 11898 71BC A0 00			ldy #$00
 11899 71BE AD 77 A3			lda YB
 11900 71C1 10 01			spl
 11901 71C3 88				dey
 11902 71C4 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11903 71C6 85 9F			sta :STACKORIGIN+9
 11904 71C8 A0 00			ldy #$00
 11905 71CA AD 75 A3			lda LY
 11906 71CD 10 01			spl
 11907 71CF 88				dey
 11908 71D0 18 65 9F			add :STACKORIGIN+9
 11909 71D3 8D 82 A3			sta MY
 11910 71D6 98				tya
 11911 71D7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11912 71D9 8D 83 A3			sta MY+1
 11913
 11914 				; optimize OK (service.pas), line = 2201
 11915
 11916 71DC AD 76 A3			lda XB
 11917 71DF 18 6D 74 A3			add LX
 11918 71E3 30 21			jmi l_1E9Ex
 11919 71E5 AD 76 A3			lda XB
 11920 71E8 18 6D 74 A3			add LX
 11921 71EC 38 E9 0D			sub #$0D
 11922 71EF 50 02			svc
 11923 71F1 49 80			eor #$80
 11924 71F3 10 11			jpl l_1E9Ex
 11925 71F5 AD 82 A3			lda MY
 11926 71F8 0A				asl @
 11927 71F9 0A				asl @
 11928 71FA 0A				asl @
 11929 71FB 0A				asl @
 11930 71FC 18 6D 80 A3			add MX
 11931 7200 A8				tay
 11932 7201 B9 00 DB			lda adr.WALL,y
 11933 7204 F0 24			jeq l_1E9E
 11934 7206			l_1E9Ex
 11935
 11936 				; optimize OK (service.pas), line = 2204
 11937
 11938 7206 A0 00			ldy #$00
 11939 7208 AD 74 A3			lda LX
 11940 720B 10 01			spl
 11941 720D 88				dey
 11942 720E 18 69 01			add #$01
 11943 7211 85 86			sta :eax
 11944 7213 90 01			scc
 11945 7215 C8				iny
 11946 7216 84 87			sty :eax+1
 11947 7218 A9 03			lda #$03
 11948 721A 85 8E			sta :ecx
 11949 721C A9 00			lda #$00
 11950 721E 85 8F			sta :ecx+1
 11951 					.ifdef fmulinit
 11952 					fmulu_16
 11953 					els
 11954 7220 20 28 23			imulCX
 11955 					eif
 11956 7223 A4 86			ldy :eax
 11957 7225 A9 01			lda #$01
 11958 7227 4C 4B 72			jmp l_1EC1
 11959 722A			l_1E9E
 11960
 11961 				; optimize OK (service.pas), line = 2206
 11962
 11963 722A A0 00			ldy #$00
 11964 722C AD 74 A3			lda LX
 11965 722F 10 01			spl
 11966 7231 88				dey
 11967 7232 18 69 01			add #$01
 11968 7235 85 86			sta :eax
 11969 7237 90 01			scc
 11970 7239 C8				iny
 11971 723A 84 87			sty :eax+1
 11972 723C A9 03			lda #$03
 11973 723E 85 8E			sta :ecx
 11974 7240 A9 00			lda #$00
 11975 7242 85 8F			sta :ecx+1
 11976 					.ifdef fmulinit
 11977 					fmulu_16
 11978 					els
 11979 7244 20 28 23			imulCX
 11980 					eif
 11981 7247 A4 86			ldy :eax
 11982 7249 A9 00			lda #$00
 11983 724B			l_1EC1
 11984 724B 99 95 A3			sta adr.ADJW+$01,y
 11985
 11986 				; --- ForToDoEpilog
 11987 724E EE 75 A3			inc LY
 11988 7251 AD 75 A3			lda LY
 11989 7254 C9 80			cmp #$80
 11990 7256 F0 03 4C 47 71		jne l_1E33
 11991 725B			l_1E41
 11992
 11993 				; --- ForToDoEpilog
 11994 725B EE 74 A3			inc LX
 11995 725E AD 74 A3			lda LX
 11996 7261 C9 80			cmp #$80
 11997 7263 F0 03 4C 32 71		jne l_1E1C
 11998 7268			l_1E2A
 11999
 12000 				; optimize OK (service.pas), line = 2225
 12001
 12002 7268 AD 94 A3			lda adr.ADJW
 12003 726B 85 9F			sta :STACKORIGIN+9
 12004 726D AD 97 A3			lda adr.ADJW+$03
 12005 7270 0A				asl @
 12006 7271 05 9F			ora :STACKORIGIN+9
 12007 7273 85 9F			sta :STACKORIGIN+9
 12008 7275 AD 9A A3			lda adr.ADJW+$06
 12009 7278 0A				asl @
 12010 7279 0A				asl @
 12011 727A 05 9F			ora :STACKORIGIN+9
 12012 727C 85 9F			sta :STACKORIGIN+9
 12013 727E AD 9B A3			lda adr.ADJW+$07
 12014 7281 0A				asl @
 12015 7282 0A				asl @
 12016 7283 0A				asl @
 12017 7284 05 9F			ora :STACKORIGIN+9
 12018 7286 85 9F			sta :STACKORIGIN+9
 12019 7288 AD 9C A3			lda adr.ADJW+$08
 12020 728B 0A				asl @
 12021 728C 0A				asl @
 12022 728D 0A				asl @
 12023 728E 0A				asl @
 12024 728F 05 9F			ora :STACKORIGIN+9
 12025 7291 85 9F			sta :STACKORIGIN+9
 12026 7293 AD 99 A3			lda adr.ADJW+$05
 12027 7296 0A				asl @
 12028 7297 0A				asl @
 12029 7298 0A				asl @
 12030 7299 0A				asl @
 12031 729A 0A				asl @
 12032 729B 05 9F			ora :STACKORIGIN+9
 12033 729D 85 9F			sta :STACKORIGIN+9
 12034 729F AD 96 A3			lda adr.ADJW+$02
 12035 72A2 0A				asl @
 12036 72A3 0A				asl @
 12037 72A4 0A				asl @
 12038 72A5 0A				asl @
 12039 72A6 0A				asl @
 12040 72A7 0A				asl @
 12041 72A8 05 9F			ora :STACKORIGIN+9
 12042 72AA 85 9F			sta :STACKORIGIN+9
 12043 72AC AD 95 A3			lda adr.ADJW+$01
 12044 72AF 0A				asl @
 12045 72B0 0A				asl @
 12046 72B1 0A				asl @
 12047 72B2 0A				asl @
 12048 72B3 0A				asl @
 12049 72B4 0A				asl @
 12050 72B5 0A				asl @
 12051 72B6 05 9F			ora :STACKORIGIN+9
 12052 72B8 8D 91 A3			sta AROUND
 12053
 12054 				; optimize OK (service.pas), line = 2256
 12055
 12056 72BB AD 93 A3			lda TOUCH
 12057 72BE F0 03 4C 5F 73		jne l_1F6A
 12058
 12059 				; optimize OK (service.pas), line = 2258
 12060
 12061 72C3 AD 91 A3			lda AROUND
 12062 72C6 29 83			and #$83
 12063 72C8 D0 05			jne l_1F81
 12064 72CA A9 11			lda #$11
 12065 72CC 8D 90 A3			sta DEFLECT
 12066 72CF			l_1F81
 12067
 12068 				; optimize OK (service.pas), line = 2259
 12069
 12070 72CF AD 91 A3			lda AROUND
 12071 72D2 29 83			and #$83
 12072 72D4 C9 01			cmp #$01
 12073 72D6 D0 05			jne l_1F9E
 12074 72D8 A9 33			lda #$33
 12075 72DA 8D 90 A3			sta DEFLECT
 12076 72DD			l_1F9E
 12077
 12078 				; optimize OK (service.pas), line = 2260
 12079
 12080 72DD AD 91 A3			lda AROUND
 12081 72E0 29 83			and #$83
 12082 72E2 C9 02			cmp #$02
 12083 72E4 D0 05			jne l_1FBB
 12084 72E6 A9 10			lda #$10
 12085 72E8 8D 90 A3			sta DEFLECT
 12086 72EB			l_1FBB
 12087
 12088 				; optimize OK (service.pas), line = 2261
 12089
 12090 72EB AD 91 A3			lda AROUND
 12091 72EE 29 83			and #$83
 12092 72F0 C9 03			cmp #$03
 12093 72F2 D0 05			jne l_1FD8
 12094 72F4 A9 12			lda #$12
 12095 72F6 8D 90 A3			sta DEFLECT
 12096 72F9			l_1FD8
 12097
 12098 				; optimize OK (service.pas), line = 2262
 12099
 12100 72F9 AD 91 A3			lda AROUND
 12101 72FC 29 83			and #$83
 12102 72FE C9 80			cmp #$80
 12103 7300 D0 05			jne l_1FF5
 12104 7302 A9 01			lda #$01
 12105 7304 8D 90 A3			sta DEFLECT
 12106 7307			l_1FF5
 12107
 12108 				; optimize OK (service.pas), line = 2263
 12109
 12110 7307 AD 91 A3			lda AROUND
 12111 730A 29 83			and #$83
 12112 730C C9 81			cmp #$81
 12113 730E D0 05			jne l_2012
 12114 7310 A9 21			lda #$21
 12115 7312 8D 90 A3			sta DEFLECT
 12116 7315			l_2012
 12117
 12118 				; optimize OK (service.pas), line = 2264
 12119
 12120 7315 AD 91 A3			lda AROUND
 12121 7318 29 83			and #$83
 12122 731A C9 82			cmp #$82
 12123 731C D0 05			jne l_202F
 12124 731E A9 11			lda #$11
 12125 7320 8D 90 A3			sta DEFLECT
 12126 7323			l_202F
 12127
 12128 				; optimize OK (service.pas), line = 2266
 12129
 12130 7323 A9 05			lda #$05
 12131 7325 8D 8E A3			sta EMERGENCY
 12132
 12133 				; optimize OK (service.pas), line = 2267
 12134
 12135 7328 A0 00			ldy #$00
 12136 732A AD 77 A3			lda YB
 12137 732D 10 01			spl
 12138 732F 88				dey
 12139 7330 38 E9 01			sub #$01
 12140 7333 8D 62 A3			sta SHOOT_BLOCK.YB
 12141 7336 98				tya
 12142 7337 E9 00			sbc #$00
 12143 7339 8D 63 A3			sta SHOOT_BLOCK.YB+1
 12144 733C A0 00			ldy #$00
 12145 733E AD 76 A3			lda XB
 12146 7341 10 01			spl
 12147 7343 88				dey
 12148 7344 38 E9 01			sub #$01
 12149 7347 8D 60 A3			sta SHOOT_BLOCK.XB
 12150 734A 98				tya
 12151 734B E9 00			sbc #$00
 12152 734D 8D 61 A3			sta SHOOT_BLOCK.XB+1
 12153 7350 AD 6E A3			lda BALL
 12154 7353 8D 64 A3			sta SHOOT_BLOCK.BALL
 12155 7356 AD 6F A3			lda BALL+1
 12156 7359 8D 65 A3			sta SHOOT_BLOCK.BALL+1
 12157 735C 20 F3 66			jsr SHOOT_BLOCK
 12158 735F			l_1F6A
 12159
 12160 				; optimize OK (service.pas), line = 2272
 12161
 12162 735F AD 93 A3			lda TOUCH
 12163 7362 C9 01			cmp #$01
 12164 7364 F0 03 4C 05 74		jne l_205F
 12165
 12166 				; optimize OK (service.pas), line = 2274
 12167
 12168 7369 AD 91 A3			lda AROUND
 12169 736C 29 0E			and #$0E
 12170 736E D0 05			jne l_2076
 12171 7370 A9 21			lda #$21
 12172 7372 8D 90 A3			sta DEFLECT
 12173 7375			l_2076
 12174
 12175 				; optimize OK (service.pas), line = 2275
 12176
 12177 7375 AD 91 A3			lda AROUND
 12178 7378 29 0E			and #$0E
 12179 737A C9 02			cmp #$02
 12180 737C D0 05			jne l_2093
 12181 737E A9 20			lda #$20
 12182 7380 8D 90 A3			sta DEFLECT
 12183 7383			l_2093
 12184
 12185 				; optimize OK (service.pas), line = 2276
 12186
 12187 7383 AD 91 A3			lda AROUND
 12188 7386 29 0E			and #$0E
 12189 7388 C9 04			cmp #$04
 12190 738A D0 05			jne l_20B0
 12191 738C A9 33			lda #$33
 12192 738E 8D 90 A3			sta DEFLECT
 12193 7391			l_20B0
 12194
 12195 				; optimize OK (service.pas), line = 2277
 12196
 12197 7391 AD 91 A3			lda AROUND
 12198 7394 29 0E			and #$0E
 12199 7396 C9 06			cmp #$06
 12200 7398 D0 05			jne l_20CD
 12201 739A A9 22			lda #$22
 12202 739C 8D 90 A3			sta DEFLECT
 12203 739F			l_20CD
 12204
 12205 				; optimize OK (service.pas), line = 2278
 12206
 12207 739F AD 91 A3			lda AROUND
 12208 73A2 29 0E			and #$0E
 12209 73A4 C9 08			cmp #$08
 12210 73A6 D0 05			jne l_20EA
 12211 73A8 A9 01			lda #$01
 12212 73AA 8D 90 A3			sta DEFLECT
 12213 73AD			l_20EA
 12214
 12215 				; optimize OK (service.pas), line = 2279
 12216
 12217 73AD AD 91 A3			lda AROUND
 12218 73B0 29 0E			and #$0E
 12219 73B2 C9 0A			cmp #$0A
 12220 73B4 D0 05			jne l_2107
 12221 73B6 A9 21			lda #$21
 12222 73B8 8D 90 A3			sta DEFLECT
 12223 73BB			l_2107
 12224
 12225 				; optimize OK (service.pas), line = 2280
 12226
 12227 73BB AD 91 A3			lda AROUND
 12228 73BE 29 0E			and #$0E
 12229 73C0 C9 0C			cmp #$0C
 12230 73C2 D0 05			jne l_2124
 12231 73C4 A9 11			lda #$11
 12232 73C6 8D 90 A3			sta DEFLECT
 12233 73C9			l_2124
 12234
 12235 				; optimize OK (service.pas), line = 2282
 12236
 12237 73C9 A9 08			lda #$08
 12238 73CB 8D 8E A3			sta EMERGENCY
 12239
 12240 				; optimize OK (service.pas), line = 2283
 12241
 12242 73CE A0 00			ldy #$00
 12243 73D0 AD 77 A3			lda YB
 12244 73D3 10 01			spl
 12245 73D5 88				dey
 12246 73D6 38 E9 01			sub #$01
 12247 73D9 8D 62 A3			sta SHOOT_BLOCK.YB
 12248 73DC 98				tya
 12249 73DD E9 00			sbc #$00
 12250 73DF 8D 63 A3			sta SHOOT_BLOCK.YB+1
 12251 73E2 A0 00			ldy #$00
 12252 73E4 AD 76 A3			lda XB
 12253 73E7 10 01			spl
 12254 73E9 88				dey
 12255 73EA 18 69 01			add #$01
 12256 73ED 8D 60 A3			sta SHOOT_BLOCK.XB
 12257 73F0 90 01			scc
 12258 73F2 C8				iny
 12259 73F3 8C 61 A3			sty SHOOT_BLOCK.XB+1
 12260 73F6 AD 6E A3			lda BALL
 12261 73F9 8D 64 A3			sta SHOOT_BLOCK.BALL
 12262 73FC AD 6F A3			lda BALL+1
 12263 73FF 8D 65 A3			sta SHOOT_BLOCK.BALL+1
 12264 7402 20 F3 66			jsr SHOOT_BLOCK
 12265 7405			l_205F
 12266
 12267 				; optimize OK (service.pas), line = 2286
 12268
 12269 7405 AD 93 A3			lda TOUCH
 12270 7408 C9 02			cmp #$02
 12271 740A F0 03 4C AB 74		jne l_2154
 12272
 12273 				; optimize OK (service.pas), line = 2288
 12274
 12275 740F AD 91 A3			lda AROUND
 12276 7412 29 E0			and #$E0
 12277 7414 D0 05			jne l_216B
 12278 7416 A9 12			lda #$12
 12279 7418 8D 90 A3			sta DEFLECT
 12280 741B			l_216B
 12281
 12282 				; optimize OK (service.pas), line = 2289
 12283
 12284 741B AD 91 A3			lda AROUND
 12285 741E 29 E0			and #$E0
 12286 7420 C9 20			cmp #$20
 12287 7422 D0 05			jne l_2188
 12288 7424 A9 10			lda #$10
 12289 7426 8D 90 A3			sta DEFLECT
 12290 7429			l_2188
 12291
 12292 				; optimize OK (service.pas), line = 2290
 12293
 12294 7429 AD 91 A3			lda AROUND
 12295 742C 29 E0			and #$E0
 12296 742E C9 40			cmp #$40
 12297 7430 D0 05			jne l_21A5
 12298 7432 A9 33			lda #$33
 12299 7434 8D 90 A3			sta DEFLECT
 12300 7437			l_21A5
 12301
 12302 				; optimize OK (service.pas), line = 2291
 12303
 12304 7437 AD 91 A3			lda AROUND
 12305 743A 29 E0			and #$E0
 12306 743C C9 60			cmp #$60
 12307 743E D0 05			jne l_21C2
 12308 7440 A9 11			lda #$11
 12309 7442 8D 90 A3			sta DEFLECT
 12310 7445			l_21C2
 12311
 12312 				; optimize OK (service.pas), line = 2292
 12313
 12314 7445 AD 91 A3			lda AROUND
 12315 7448 29 E0			and #$E0
 12316 744A C9 80			cmp #$80
 12317 744C D0 05			jne l_21DF
 12318 744E A9 02			lda #$02
 12319 7450 8D 90 A3			sta DEFLECT
 12320 7453			l_21DF
 12321
 12322 				; optimize OK (service.pas), line = 2293
 12323
 12324 7453 AD 91 A3			lda AROUND
 12325 7456 29 E0			and #$E0
 12326 7458 C9 A0			cmp #$A0
 12327 745A D0 05			jne l_21FC
 12328 745C A9 12			lda #$12
 12329 745E 8D 90 A3			sta DEFLECT
 12330 7461			l_21FC
 12331
 12332 				; optimize OK (service.pas), line = 2294
 12333
 12334 7461 AD 91 A3			lda AROUND
 12335 7464 29 E0			and #$E0
 12336 7466 C9 C0			cmp #$C0
 12337 7468 D0 05			jne l_2219
 12338 746A A9 22			lda #$22
 12339 746C 8D 90 A3			sta DEFLECT
 12340 746F			l_2219
 12341
 12342 				; optimize OK (service.pas), line = 2296
 12343
 12344 746F A9 06			lda #$06
 12345 7471 8D 8E A3			sta EMERGENCY
 12346
 12347 				; optimize OK (service.pas), line = 2297
 12348
 12349 7474 A0 00			ldy #$00
 12350 7476 AD 77 A3			lda YB
 12351 7479 10 01			spl
 12352 747B 88				dey
 12353 747C 18 69 01			add #$01
 12354 747F 8D 62 A3			sta SHOOT_BLOCK.YB
 12355 7482 90 01			scc
 12356 7484 C8				iny
 12357 7485 8C 63 A3			sty SHOOT_BLOCK.YB+1
 12358 7488 A0 00			ldy #$00
 12359 748A AD 76 A3			lda XB
 12360 748D 10 01			spl
 12361 748F 88				dey
 12362 7490 38 E9 01			sub #$01
 12363 7493 8D 60 A3			sta SHOOT_BLOCK.XB
 12364 7496 98				tya
 12365 7497 E9 00			sbc #$00
 12366 7499 8D 61 A3			sta SHOOT_BLOCK.XB+1
 12367 749C AD 6E A3			lda BALL
 12368 749F 8D 64 A3			sta SHOOT_BLOCK.BALL
 12369 74A2 AD 6F A3			lda BALL+1
 12370 74A5 8D 65 A3			sta SHOOT_BLOCK.BALL+1
 12371 74A8 20 F3 66			jsr SHOOT_BLOCK
 12372 74AB			l_2154
 12373
 12374 				; optimize OK (service.pas), line = 2300
 12375
 12376 74AB AD 93 A3			lda TOUCH
 12377 74AE C9 03			cmp #$03
 12378 74B0 F0 03 4C 51 75		jne l_2249
 12379
 12380 				; optimize OK (service.pas), line = 2302
 12381
 12382 74B5 AD 91 A3			lda AROUND
 12383 74B8 29 38			and #$38
 12384 74BA D0 05			jne l_2260
 12385 74BC A9 22			lda #$22
 12386 74BE 8D 90 A3			sta DEFLECT
 12387 74C1			l_2260
 12388
 12389 				; optimize OK (service.pas), line = 2303
 12390
 12391 74C1 AD 91 A3			lda AROUND
 12392 74C4 29 38			and #$38
 12393 74C6 C9 08			cmp #$08
 12394 74C8 D0 05			jne l_227D
 12395 74CA A9 02			lda #$02
 12396 74CC 8D 90 A3			sta DEFLECT
 12397 74CF			l_227D
 12398
 12399 				; optimize OK (service.pas), line = 2304
 12400
 12401 74CF AD 91 A3			lda AROUND
 12402 74D2 29 38			and #$38
 12403 74D4 C9 10			cmp #$10
 12404 74D6 D0 05			jne l_229A
 12405 74D8 A9 33			lda #$33
 12406 74DA 8D 90 A3			sta DEFLECT
 12407 74DD			l_229A
 12408
 12409 				; optimize OK (service.pas), line = 2305
 12410
 12411 74DD AD 91 A3			lda AROUND
 12412 74E0 29 38			and #$38
 12413 74E2 C9 18			cmp #$18
 12414 74E4 D0 05			jne l_22B7
 12415 74E6 A9 12			lda #$12
 12416 74E8 8D 90 A3			sta DEFLECT
 12417 74EB			l_22B7
 12418
 12419 				; optimize OK (service.pas), line = 2306
 12420
 12421 74EB AD 91 A3			lda AROUND
 12422 74EE 29 38			and #$38
 12423 74F0 C9 20			cmp #$20
 12424 74F2 D0 05			jne l_22D4
 12425 74F4 A9 20			lda #$20
 12426 74F6 8D 90 A3			sta DEFLECT
 12427 74F9			l_22D4
 12428
 12429 				; optimize OK (service.pas), line = 2307
 12430
 12431 74F9 AD 91 A3			lda AROUND
 12432 74FC 29 38			and #$38
 12433 74FE C9 28			cmp #$28
 12434 7500 D0 05			jne l_22F1
 12435 7502 A9 22			lda #$22
 12436 7504 8D 90 A3			sta DEFLECT
 12437 7507			l_22F1
 12438
 12439 				; optimize OK (service.pas), line = 2308
 12440
 12441 7507 AD 91 A3			lda AROUND
 12442 750A 29 38			and #$38
 12443 750C C9 30			cmp #$30
 12444 750E D0 05			jne l_230E
 12445 7510 A9 21			lda #$21
 12446 7512 8D 90 A3			sta DEFLECT
 12447 7515			l_230E
 12448
 12449 				; optimize OK (service.pas), line = 2310
 12450
 12451 7515 A9 07			lda #$07
 12452 7517 8D 8E A3			sta EMERGENCY
 12453
 12454 				; optimize OK (service.pas), line = 2311
 12455
 12456 751A A0 00			ldy #$00
 12457 751C AD 77 A3			lda YB
 12458 751F 10 01			spl
 12459 7521 88				dey
 12460 7522 18 69 01			add #$01
 12461 7525 8D 62 A3			sta SHOOT_BLOCK.YB
 12462 7528 90 01			scc
 12463 752A C8				iny
 12464 752B 8C 63 A3			sty SHOOT_BLOCK.YB+1
 12465 752E A0 00			ldy #$00
 12466 7530 AD 76 A3			lda XB
 12467 7533 10 01			spl
 12468 7535 88				dey
 12469 7536 18 69 01			add #$01
 12470 7539 8D 60 A3			sta SHOOT_BLOCK.XB
 12471 753C 90 01			scc
 12472 753E C8				iny
 12473 753F 8C 61 A3			sty SHOOT_BLOCK.XB+1
 12474 7542 AD 6E A3			lda BALL
 12475 7545 8D 64 A3			sta SHOOT_BLOCK.BALL
 12476 7548 AD 6F A3			lda BALL+1
 12477 754B 8D 65 A3			sta SHOOT_BLOCK.BALL+1
 12478 754E 20 F3 66			jsr SHOOT_BLOCK
 12479 7551			l_2249
 12480
 12481 				; optimize OK (service.pas), line = 2317
 12482
 12483 7551 AD 90 A3			lda DEFLECT
 12484 7554 4A				lsr @
 12485 7555 4A				lsr @
 12486 7556 4A				lsr @
 12487 7557 4A				lsr @
 12488 7558 8D 8A A3			sta MYX
 12489 755B A9 00			lda #$00
 12490 755D 8D 8B A3			sta MYX+1
 12491
 12492 				; optimize OK (service.pas), line = 2318
 12493
 12494 7560 AD 90 A3			lda DEFLECT
 12495 7563 29 0F			and #$0F
 12496 7565 8D 8C A3			sta MYY
 12497 7568 A9 00			lda #$00
 12498 756A 8D 8D A3			sta MYY+1
 12499
 12500 				; optimize OK (service.pas), line = 2320
 12501
 12502 756D AD 8B A3			lda MYX+1
 12503 7570 D0 05			bne @+
 12504 7572 AD 8A A3			lda MYX
 12505 7575 C9 01			cmp #$01
 12506 				@
 12507 7577 D0 50			jne l_2351
 12508 7579 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12509 7583 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12510 7585 B1 84			lda (:bp2),y
 12511 7587 85 8A			sta SYSTEM.ABS.@010184000.X
 12512 7589 C8				iny
 12513 758A B1 84			lda (:bp2),y
 12514 758C 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12515 758E 20 EE 2A			jsr SYSTEM.ABS.@010184000
 12516 7591 E8				inx
 12517 7592 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12518 7596 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12519 759A A9 00			lda #$00
 12520 759C 38 F5 96			sub :STACKORIGIN,x
 12521 759F 95 96			sta :STACKORIGIN,x
 12522 75A1 A9 00			lda #$00
 12523 75A3 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12524 75A5 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12525 75A7 A9 00			lda #$00
 12526 75A9 E9 00			sbc #$00
 12527 75AB 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12528 75AD A9 00			lda #$00
 12529 75AF E9 00			sbc #$00
 12530 75B1 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12531 75B3 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12532 75BD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12533 75BF B5 96			lda :STACKORIGIN,x
 12534 75C1 91 84			sta (:bp2),y
 12535 75C3 C8				iny
 12536 75C4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12537 75C6 91 84			sta (:bp2),y
 12538 75C8 CA				dex
 12539 75C9			l_2351
 12540
 12541 				; optimize OK (service.pas), line = 2321
 12542
 12543 75C9 AD 8B A3			lda MYX+1
 12544 75CC D0 05			bne @+
 12545 75CE AD 8A A3			lda MYX
 12546 75D1 C9 02			cmp #$02
 12547 				@
 12548 75D3 D0 2D			jne l_236E
 12549 75D5 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12550 75DF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12551 75E1 B1 84			lda (:bp2),y
 12552 75E3 85 8A			sta SYSTEM.ABS.@010184000.X
 12553 75E5 C8				iny
 12554 75E6 B1 84			lda (:bp2),y
 12555 75E8 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12556 75EA 20 EE 2A			jsr SYSTEM.ABS.@010184000
 12557 75ED AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12558 75F7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12559 75F9 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12560 75FB 91 84			sta (:bp2),y
 12561 75FD C8				iny
 12562 75FE A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12563 7600 91 84			sta (:bp2),y
 12564 7602			l_236E
 12565
 12566 				; optimize OK (service.pas), line = 2322
 12567
 12568 7602 AD 8B A3			lda MYX+1
 12569 7605 D0 05			bne @+
 12570 7607 AD 8A A3			lda MYX
 12571 760A C9 03			cmp #$03
 12572 				@
 12573 760C D0 25			jne l_2388
 12574 760E AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12575 7618 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12576 761A A9 00			lda #$00
 12577 761C 38 F1 84			sub (:bp2),y
 12578 761F 85 9F			sta :STACKORIGIN+9
 12579 7621 C8				iny
 12580 7622 A9 00			lda #$00
 12581 7624 F1 84			sbc (:bp2),y
 12582 7626 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12583 7628 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12584 762A A5 9F			lda :STACKORIGIN+9
 12585 762C 91 84			sta (:bp2),y
 12586 762E C8				iny
 12587 762F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12588 7631 91 84			sta (:bp2),y
 12589 7633			l_2388
 12590
 12591 				; optimize OK (service.pas), line = 2324
 12592
 12593 7633 AD 8D A3			lda MYY+1
 12594 7636 D0 05			bne @+
 12595 7638 AD 8C A3			lda MYY
 12596 763B C9 01			cmp #$01
 12597 				@
 12598 763D D0 50			jne l_23A4
 12599 763F AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12600 7649 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12601 764B B1 84			lda (:bp2),y
 12602 764D 85 8A			sta SYSTEM.ABS.@010184000.X
 12603 764F C8				iny
 12604 7650 B1 84			lda (:bp2),y
 12605 7652 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12606 7654 20 EE 2A			jsr SYSTEM.ABS.@010184000
 12607 7657 E8				inx
 12608 7658 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12609 765C A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12610 7660 A9 00			lda #$00
 12611 7662 38 F5 96			sub :STACKORIGIN,x
 12612 7665 95 96			sta :STACKORIGIN,x
 12613 7667 A9 00			lda #$00
 12614 7669 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12615 766B 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12616 766D A9 00			lda #$00
 12617 766F E9 00			sbc #$00
 12618 7671 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12619 7673 A9 00			lda #$00
 12620 7675 E9 00			sbc #$00
 12621 7677 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12622 7679 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12623 7683 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12624 7685 B5 96			lda :STACKORIGIN,x
 12625 7687 91 84			sta (:bp2),y
 12626 7689 C8				iny
 12627 768A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12628 768C 91 84			sta (:bp2),y
 12629 768E CA				dex
 12630 768F			l_23A4
 12631
 12632 				; optimize OK (service.pas), line = 2325
 12633
 12634 768F AD 8D A3			lda MYY+1
 12635 7692 D0 05			bne @+
 12636 7694 AD 8C A3			lda MYY
 12637 7697 C9 02			cmp #$02
 12638 				@
 12639 7699 D0 2D			jne l_23C1
 12640 769B AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12641 76A5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12642 76A7 B1 84			lda (:bp2),y
 12643 76A9 85 8A			sta SYSTEM.ABS.@010184000.X
 12644 76AB C8				iny
 12645 76AC B1 84			lda (:bp2),y
 12646 76AE 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12647 76B0 20 EE 2A			jsr SYSTEM.ABS.@010184000
 12648 76B3 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12649 76BD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12650 76BF A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12651 76C1 91 84			sta (:bp2),y
 12652 76C3 C8				iny
 12653 76C4 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12654 76C6 91 84			sta (:bp2),y
 12655 76C8			l_23C1
 12656
 12657 				; optimize OK (service.pas), line = 2326
 12658
 12659 76C8 AD 8D A3			lda MYY+1
 12660 76CB D0 05			bne @+
 12661 76CD AD 8C A3			lda MYY
 12662 76D0 C9 03			cmp #$03
 12663 				@
 12664 76D2 D0 25			jne l_23DB
 12665 76D4 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12666 76DE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12667 76E0 A9 00			lda #$00
 12668 76E2 38 F1 84			sub (:bp2),y
 12669 76E5 85 9F			sta :STACKORIGIN+9
 12670 76E7 C8				iny
 12671 76E8 A9 00			lda #$00
 12672 76EA F1 84			sbc (:bp2),y
 12673 76EC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12674 76EE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12675 76F0 A5 9F			lda :STACKORIGIN+9
 12676 76F2 91 84			sta (:bp2),y
 12677 76F4 C8				iny
 12678 76F5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12679 76F7 91 84			sta (:bp2),y
 12680 76F9			l_23DB
 12681 76F9			l_1DCC
 12682 76F9			l_1AF1
 12683
 12684 				; optimize OK (service.pas), line = 2336
 12685
 12686 76F9 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12687 7703 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12688 7705 B1 84			lda (:bp2),y
 12689 7707 C9 65			cmp #$65
 12690 7709 B0 03 4C D4 78		jcc l_23FC
 12691
 12692 				; optimize OK (service.pas), line = 2339
 12693
 12694 770E AD 8E A3			lda EMERGENCY
 12695 7711 C9 FF			cmp #$FF
 12696 7713 D0 05			jne l_240F
 12697 7715 A9 04			lda #$04
 12698 7717 20 CE 3D			jsr FATAL_ERROR
 12699 771A			l_240F
 12700
 12701 				; optimize OK (service.pas), line = 2341
 12702
 12703 771A AC 8E A3			ldy EMERGENCY
 12704 771D B9 7F 20			lda adr.EMERG_DEV,y
 12705 7720 8D 8F A3			sta MIMAX
 12706
 12707 				; optimize OK (service.pas), line = 2367
 12708
 12709 7723 98				tya
 12710 7724 8D 9D A3			sta @CASETMP_0009
 12711 7727 C9 05			cmp #$05
 12712 7729 D0 1F			jne l_2428
 12713 				@
 12714
 12715 				; optimize OK (service.pas), line = 2370
 12716
 12717 772B AD 97 A3			lda adr.ADJW+$03
 12718 772E D0 08			jne l_243F
 12719 7730 AD 8F A3			lda MIMAX
 12720 7733 29 0F			and #$0F
 12721 7735 8D 8F A3			sta MIMAX
 12722 7738			l_243F
 12723
 12724 				; optimize OK (service.pas), line = 2371
 12725
 12726 7738 AD 95 A3			lda adr.ADJW+$01
 12727 773B D0 0A			jne l_2467
 12728 773D AD 8F A3			lda MIMAX
 12729 7740 29 F0			and #$F0
 12730 7742 09 03			ora #$03
 12731 7744 8D 8F A3			sta MIMAX
 12732 7747			l_2467
 12733 7747 4C B6 77			jmp a_0009
 12734 774A			l_2428
 12735 774A C9 06			cmp #$06
 12736 774C D0 21			jne l_247F
 12737
 12738 				; optimize OK (service.pas), line = 2375
 12739
 12740 774E AD 95 A3			lda adr.ADJW+$01
 12741 7751 D0 0A			jne l_2496
 12742 7753 AD 8F A3			lda MIMAX
 12743 7756 29 0F			and #$0F
 12744 7758 09 10			ora #$10
 12745 775A 8D 8F A3			sta MIMAX
 12746 775D			l_2496
 12747
 12748 				; optimize OK (service.pas), line = 2376
 12749
 12750 775D AD 99 A3			lda adr.ADJW+$05
 12751 7760 D0 0A			jne l_24BE
 12752 7762 AD 8F A3			lda MIMAX
 12753 7765 29 F0			and #$F0
 12754 7767 09 04			ora #$04
 12755 7769 8D 8F A3			sta MIMAX
 12756 776C			l_24BE
 12757 776C 4C B6 77			jmp a_0009
 12758 776F			l_247F
 12759 776F C9 07			cmp #$07
 12760 7771 D0 21			jne l_24D6
 12761
 12762 				; optimize OK (service.pas), line = 2380
 12763
 12764 7773 AD 99 A3			lda adr.ADJW+$05
 12765 7776 D0 0A			jne l_24ED
 12766 7778 AD 8F A3			lda MIMAX
 12767 777B 29 0F			and #$0F
 12768 777D 09 20			ora #$20
 12769 777F 8D 8F A3			sta MIMAX
 12770 7782			l_24ED
 12771
 12772 				; optimize OK (service.pas), line = 2381
 12773
 12774 7782 AD 9B A3			lda adr.ADJW+$07
 12775 7785 D0 0A			jne l_2515
 12776 7787 AD 8F A3			lda MIMAX
 12777 778A 29 F0			and #$F0
 12778 778C 09 05			ora #$05
 12779 778E 8D 8F A3			sta MIMAX
 12780 7791			l_2515
 12781 7791 4C B6 77			jmp a_0009
 12782 7794			l_24D6
 12783 7794 C9 08			cmp #$08
 12784 7796 D0 1E			jne l_252D
 12785
 12786 				; optimize OK (service.pas), line = 2385
 12787
 12788 7798 AD 9B A3			lda adr.ADJW+$07
 12789 779B D0 0A			jne l_2544
 12790 779D AD 8F A3			lda MIMAX
 12791 77A0 29 0F			and #$0F
 12792 77A2 09 30			ora #$30
 12793 77A4 8D 8F A3			sta MIMAX
 12794 77A7			l_2544
 12795
 12796 				; optimize OK (service.pas), line = 2386
 12797
 12798 77A7 AD 97 A3			lda adr.ADJW+$03
 12799 77AA D0 0A			jne l_256C
 12800 77AC AD 8F A3			lda MIMAX
 12801 77AF 29 F0			and #$F0
 12802 77B1 09 06			ora #$06
 12803 77B3 8D 8F A3			sta MIMAX
 12804 77B6			l_256C
 12805 77B6			l_252D
 12806 77B6			a_0009
 12807
 12808 				; --- RepeatUntilProlog
 12809 77B6			l_2584
 12810
 12811 				; optimize OK (service.pas), line = 2393
 12812
 12813 77B6 AD 8F A3			lda MIMAX
 12814 77B9 4A				lsr @
 12815 77BA 4A				lsr @
 12816 77BB 4A				lsr @
 12817 77BC 4A				lsr @
 12818 77BD 85 8E			sta :ecx
 12819 77BF A9 5A			lda #$5A
 12820 77C1 85 86			sta :eax
 12821 					.ifdef fmulinit
 12822 					fmulu_8
 12823 					els
 12824 77C3 20 DC 22			imulCL
 12825 					eif
 12826 77C6 A5 86			lda :eax
 12827 77C8 8D 74 A3			sta LX
 12828
 12829 				; optimize OK (service.pas), line = 2394
 12830
 12831 77CB AD 8F A3			lda MIMAX
 12832 77CE 29 0F			and #$0F
 12833 77D0 85 8E			sta :ecx
 12834 77D2 A9 5A			lda #$5A
 12835 77D4 85 86			sta :eax
 12836 					.ifdef fmulinit
 12837 					fmulu_8
 12838 					els
 12839 77D6 20 DC 22			imulCL
 12840 					eif
 12841 77D9 8D 81 A3			sta MX+1
 12842 77DC A5 86			lda :eax
 12843 77DE 8D 80 A3			sta MX
 12844
 12845 				; optimize OK (service.pas), line = 2396
 12846
 12847 77E1 A0 00			ldy #$00
 12848 77E3 AD 74 A3			lda LX
 12849 77E6 10 01			spl
 12850 77E8 88				dey
 12851 77E9 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12852 77EB 85 A0			sta :STACKORIGIN+10
 12853 77ED AD 80 A3			lda MX
 12854 77F0 38 E5 A0			sub :STACKORIGIN+10
 12855 77F3 8D 8E A0			sta SYSTEM.RANDOM.@010184000.RANGE
 12856 77F6 AD 81 A3			lda MX+1
 12857 77F9 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12858 77FB 8D 8F A0			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12859 77FE 20 CC 35			jsr SYSTEM.RANDOM.@010184000
 12860 7801 E8				inx
 12861 7802 AD 90 A0 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12862 7807 AD 91 A0 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12863 780C E8				inx
 12864 780D AD 74 A3 95 96		mva LX :STACKORIGIN,x
 12865 7812 20 36 21			jsr @expandSHORT2SMALL
 12866 7815 20 B5 20			jsr addAX_CX
 12867 7818 CA				dex
 12868 7819 B5 96			lda :STACKORIGIN,x
 12869 781B 8D 88 A3			sta ANGLE
 12870 781E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12871 7820 8D 89 A3			sta ANGLE+1
 12872 7823 CA				dex
 12873
 12874 				; optimize OK (service.pas), line = 2401
 12875
 12876 7824 A9 5A			lda #$5A
 12877 7826 85 8E			sta @SMALLINT.MOD.B
 12878 7828 A9 00			lda #$00
 12879 782A 85 8F			sta @SMALLINT.MOD.B+1
 12880 782C AD 88 A3			lda ANGLE
 12881 782F 85 86			sta @SMALLINT.MOD.A
 12882 7831 AD 89 A3			lda ANGLE+1
 12883 7834 85 87			sta @SMALLINT.MOD.A+1
 12884 7836 20 6D 22			jsr @SMALLINT.MOD
 12885 7839 A5 92			lda @SMALLINT.MOD.RESULT
 12886 783B C9 1F			cmp #$1F
 12887 783D A5 93			lda @SMALLINT.MOD.RESULT+1
 12888 783F E9 00			sbc #$00
 12889 7841 50 02			svc
 12890 7843 49 80			eor #$80
 12891 7845 10 03 4C B6 77		jmi l_2584
 12892 784A A9 5A			lda #$5A
 12893 784C 85 8E			sta @SMALLINT.MOD.B
 12894 784E A9 00			lda #$00
 12895 7850 85 8F			sta @SMALLINT.MOD.B+1
 12896 7852 AD 88 A3			lda ANGLE
 12897 7855 85 86			sta @SMALLINT.MOD.A
 12898 7857 AD 89 A3			lda ANGLE+1
 12899 785A 85 87			sta @SMALLINT.MOD.A+1
 12900 785C 20 6D 22			jsr @SMALLINT.MOD
 12901 785F A5 92			lda @SMALLINT.MOD.RESULT
 12902 7861 C9 3C			cmp #$3C
 12903 7863 A5 93			lda @SMALLINT.MOD.RESULT+1
 12904 7865 E9 00			sbc #$00
 12905 7867 50 02			svc
 12906 7869 49 80			eor #$80
 12907 786B 30 03 4C B6 77		jpl l_2584
 12908
 12909 				; optimize OK (service.pas), line = 2405
 12910
 12911 7870 A9 68			lda #$68
 12912 7872 85 8E			sta @SMALLINT.MOD.B
 12913 7874 A9 01			lda #$01
 12914 7876 85 8F			sta @SMALLINT.MOD.B+1
 12915 7878 AD 88 A3			lda ANGLE
 12916 787B 85 86			sta @SMALLINT.MOD.A
 12917 787D AD 89 A3			lda ANGLE+1
 12918 7880 85 87			sta @SMALLINT.MOD.A+1
 12919 7882 20 6D 22			jsr @SMALLINT.MOD
 12920 7885 A5 92			lda @SMALLINT.MOD.RESULT
 12921 7887 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 12922 788A A5 93			lda @SMALLINT.MOD.RESULT+1
 12923 788C 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 12924 788F AD 6E A3			lda BALL
 12925 7892 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 12926 7895 AD 6F A3			lda BALL+1
 12927 7898 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 12928 789B 20 E7 47			jsr SET_BALL_DIRECTION
 12929
 12930 				; optimize OK (service.pas), line = 2406
 12931
 12932 789E AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12933 78A8 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12934 78AA B1 84			lda (:bp2),y
 12935 78AC 8D BD A2			sta SET_BALL_SPEED.SPEED
 12936 78AF C8				iny
 12937 78B0 B1 84			lda (:bp2),y
 12938 78B2 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 12939 78B5 AD 6E A3			lda BALL
 12940 78B8 8D B9 A2			sta SET_BALL_SPEED.BALL
 12941 78BB AD 6F A3			lda BALL+1
 12942 78BE 8D BA A2			sta SET_BALL_SPEED.BALL+1
 12943 78C1 20 E7 45			jsr SET_BALL_SPEED
 12944
 12945 				; optimize OK (service.pas), line = 2408
 12946
 12947 78C4 AC 6E A3 84 84 AC + 	mwy BALL :bp2
 12948 78CE A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12949 78D0 A9 00			lda #$00
 12950 78D2 91 84			sta (:bp2),y
 12951 78D4			l_23FC
 12952
 12953 				; ------------------------------------------------------------
 12954
 12955 = A36E			BALL	= DATAORIGIN+$0326
 12956 = A048			BALL.X	= DATAORIGIN+$0000
 12957 = A04A			BALL.Y	= DATAORIGIN+$0002
 12958 = A04C			BALL.FINEX	= DATAORIGIN+$0004
 12959 = A04E			BALL.FINEY	= DATAORIGIN+$0006
 12960 = A050			BALL.OLDX	= DATAORIGIN+$0008
 12961 = A052			BALL.OLDY	= DATAORIGIN+$000A
 12962 = A054			BALL.SPEED	= DATAORIGIN+$000C
 12963 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
 12964 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
 12965 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
 12966 = A05C			BALL.SBD	= DATAORIGIN+$0014
 12967 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
 12968 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
 12969 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
 12970 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
 12971 = A063			BALL.STM	= DATAORIGIN+$001B
 12972 = A372			X	= DATAORIGIN+$032A
 12973 = A373			Y	= DATAORIGIN+$032B
 12974 = A374			LX	= DATAORIGIN+$032C
 12975 = A375			LY	= DATAORIGIN+$032D
 12976 = A376			XB	= DATAORIGIN+$032E
 12977 = A377			YB	= DATAORIGIN+$032F
 12978 = A378			OX	= DATAORIGIN+$0330
 12979 = A37A			OY	= DATAORIGIN+$0332
 12980 = A37C			NX	= DATAORIGIN+$0334
 12981 = A37E			NY	= DATAORIGIN+$0336
 12982 = A380			MX	= DATAORIGIN+$0338
 12983 = A382			MY	= DATAORIGIN+$033A
 12984 = A384			F1	= DATAORIGIN+$033C
 12985 = A386			F2	= DATAORIGIN+$033E
 12986 = A388			ANGLE	= DATAORIGIN+$0340
 12987 = A38A			MYX	= DATAORIGIN+$0342
 12988 = A38C			MYY	= DATAORIGIN+$0344
 12989 = A38E			EMERGENCY	= DATAORIGIN+$0346
 12990 = A38F			MIMAX	= DATAORIGIN+$0347
 12991 = A390			DEFLECT	= DATAORIGIN+$0348
 12992 = A391			AROUND	= DATAORIGIN+$0349
 12993 = A392			COLLISION	= DATAORIGIN+$034A
 12994 = A393			TOUCH	= DATAORIGIN+$034B
 12995 = A394			adr.ADJW	= [DATAORIGIN+$034C] .array [3] [3]
 12996 78D4			.var ADJW	= adr.ADJW .word
 12997 = A39D			@CASETMP_0009	= DATAORIGIN+$0355
 12998
 12999 = A36E			@VarData	= BALL
 13000 = 0028			@VarDataSize	= 40
 13001
 13002 78D4			@exit
 13003 					.ifdef @new
 13004 					lda <@VarData
 13005 					sta :ztmp
 13006 					lda >@VarData
 13007 					ldy #@VarDataSize-1
 13008 					jmp @FreeMem
 13009 					els
 13010 78D4 60				rts						; ret
 13011 					eif
 13012 = 78D5 94 A3		ADJW
 13012 				.endl
 13013
 13014 78D7			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 13015
 13016 				; optimize OK (service.pas), line = 2423
 13017
 13018 78D7 A9 00			lda #$00
 13019 78D9 8D A5 A3			sta Y
 13020
 13021 78DC			l_25F2
 13022 				; --- ForToDoCondition
 13023 78DC AC 9E A3 84 84 AC + 	mwy PATT :bp2
 13024 78E6 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13025 78E8 B1 84			lda (:bp2),y
 13026 78EA 85 8E			sta @WORD.MOD.B
 13027 78EC C8				iny
 13028 78ED B1 84			lda (:bp2),y
 13029 78EF 85 8F			sta @WORD.MOD.B+1
 13030 78F1 AD A5 A3			lda Y
 13031 78F4 85 86			sta @WORD.MOD.A
 13032 78F6 A9 00			lda #$00
 13033 78F8 85 87			sta @WORD.MOD.A+1
 13034 78FA 20 BD 23			jsr @WORD.MOD
 13035 78FD A5 92			lda @WORD.MOD.RESULT
 13036 78FF AC A5 A3			ldy Y
 13037 7902 99 00 C4			sta adr.MODX,y
 13038
 13039 				; optimize OK (service.pas), line = 2429
 13040
 13041 7905 AC 9E A3 84 84 AC + 	mwy PATT :bp2
 13042 790F A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 13043 7911 B1 84			lda (:bp2),y
 13044 7913 85 8E			sta @WORD.MOD.B
 13045 7915 C8				iny
 13046 7916 B1 84			lda (:bp2),y
 13047 7918 85 8F			sta @WORD.MOD.B+1
 13048 791A AD A5 A3			lda Y
 13049 791D 85 86			sta @WORD.MOD.A
 13050 791F A9 00			lda #$00
 13051 7921 85 87			sta @WORD.MOD.A+1
 13052 7923 20 BD 23			jsr @WORD.MOD
 13053 7926 A5 92			lda @WORD.MOD.RESULT
 13054 7928 AC A5 A3			ldy Y
 13055 792B 99 00 C3			sta adr.MODY,y
 13056
 13057 				; --- ForToDoEpilog
 13058 792E EE A5 A3			inc Y
 13059 7931 D0 A9			jne l_25F2
 13060 7933			l_2600
 13061
 13062 				; optimize OK (service.pas), line = 2435
 13063
 13064 7933 A9 0A			lda #$0A
 13065 7935 8D A5 A3			sta Y
 13066
 13067 7938			l_262A
 13068 				; --- ForToDoCondition
 13069 7938 AC A5 A3			ldy Y
 13070 793B C0 C7			cpy #$C7
 13071 793D 90 03 4C 66 7A		jcs l_2638
 13072
 13073 				; optimize OK (service.pas), line = 2438
 13074
 13075 7942 B9 00 C3			lda adr.MODY,y
 13076 7945 85 86			sta :eax
 13077 7947 AC 9E A3 84 84 AC + 	mwy PATT :bp2
 13078 7951 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13079 7953 B1 84			lda (:bp2),y
 13080 7955 85 8E			sta :ecx
 13081 7957 C8				iny
 13082 7958 B1 84			lda (:bp2),y
 13083 795A 85 8F			sta :ecx+1
 13084 795C A9 00			lda #$00
 13085 795E 85 87			sta :eax+1
 13086 					.ifdef fmulinit
 13087 					fmulu_16
 13088 					els
 13089 7960 20 28 23			imulCX
 13090 					eif
 13091 7963 A5 86			lda :eax
 13092 7965 8D A2 A3			sta YB
 13093 7968 A5 87			lda :eax+1
 13094 796A 8D A3 A3			sta YB+1
 13095
 13096 				; optimize OK (service.pas), line = 2440
 13097
 13098 796D A9 00			lda #$00
 13099 796F 8D A8 A3			sta K
 13100
 13101 				; optimize OK (service.pas), line = 2441
 13102
 13103 7972 A9 09			lda #$09
 13104 7974 8D A4 A3			sta X
 13105
 13106 7977			l_2653
 13107 				; --- ForToDoCondition
 13108 7977 AD A4 A3			lda X
 13109 797A C9 D8			cmp #$D8
 13110 797C 90 03 4C 16 7A		jcs l_2661
 13111
 13112 				; optimize OK (service.pas), line = 2444
 13113
 13114 7981 AC 9E A3 84 84 AC + 	mwy PATT :bp2
 13115 798B A0 04			ldy #PATT.OFS-DATAORIGIN
 13116 798D B1 84			lda (:bp2),y
 13117 798F 85 9F			sta :STACKORIGIN+9
 13118 7991 C8				iny
 13119 7992 B1 84			lda (:bp2),y
 13120 7994 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13121 7996 C8				iny
 13122 7997 B1 84			lda (:bp2),y
 13123 7999 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13124 799B C8				iny
 13125 799C B1 84			lda (:bp2),y
 13126 799E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13127 79A0 AC A4 A3			ldy X
 13128 79A3 A5 9F			lda :STACKORIGIN+9
 13129 79A5 18 79 00 C4			add adr.MODX,y
 13130 79A9 85 9F			sta :STACKORIGIN+9
 13131 79AB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13132 79AD 69 00			adc #$00
 13133 79AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13134 79B1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13135 79B3 69 00			adc #$00
 13136 79B5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13137 79B7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13138 79B9 69 00			adc #$00
 13139 79BB 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13140 79BD A5 9F			lda :STACKORIGIN+9
 13141 79BF 18 6D A2 A3			add YB
 13142 79C3 8D 68 A2			sta GETBYTE.SRC
 13143 79C6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13144 79C8 6D A3 A3			adc YB+1
 13145 79CB 8D 69 A2			sta GETBYTE.SRC+1
 13146 79CE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13147 79D0 69 00			adc #$00
 13148 79D2 8D 6A A2			sta GETBYTE.SRC+2
 13149 79D5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13150 79D7 69 00			adc #$00
 13151 79D9 8D 6B A2			sta GETBYTE.SRC+3
 13152 79DC 20 4E 3D			jsr GETBYTE
 13153 79DF AD 6C A2			lda GETBYTE.RESULT
 13154 79E2 8D A6 A3			sta CL
 13155
 13156 				; optimize OK (service.pas), line = 2446
 13157
 13158 79E5 A9 80			lda #$80
 13159 79E7 8D A7 A3			sta SHADOW
 13160
 13161 				; optimize OK (service.pas), line = 2451
 13162
 13163 79EA AD A5 A3			lda Y
 13164 79ED C9 10			cmp #$10
 13165 79EF 90 07			jcc l_2696x
 13166 79F1 AD A4 A3			lda X
 13167 79F4 C9 12			cmp #$12
 13168 79F6 B0 05			jcs l_2696
 13169 79F8			l_2696x
 13170 79F8 A9 00			lda #$00
 13171 79FA 8D A7 A3			sta SHADOW
 13172 79FD			l_2696
 13173
 13174 				; optimize OK (service.pas), line = 2456
 13175
 13176 79FD AD A6 A3			lda CL
 13177 7A00 29 7F			and #$7F
 13178 7A02 0D A7 A3			ora SHADOW
 13179 7A05 AC A8 A3			ldy K
 13180 7A08 99 00 C2			sta adr.TMP,y
 13181
 13182 				; optimize FAIL (0, service.pas), line = 2458
 13183
 13184 7A0B EE A8 A3			inc K
 13185
 13186 				; --- ForToDoEpilog
 13187 7A0E EE A4 A3			inc X
 13188 7A11 F0 03 4C 77 79		jne l_2653
 13189 7A16			l_2661
 13190
 13191 				; optimize OK (service.pas), line = 2461
 13192
 13193 7A16 AD 40 A1			lda PLAYSCREEN.OFS
 13194 7A19 18 69 09			add #$09
 13195 7A1C 85 A0			sta :STACKORIGIN+10
 13196 7A1E AD 41 A1			lda PLAYSCREEN.OFS+1
 13197 7A21 69 00			adc #$00
 13198 7A23 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13199 7A25 AD 42 A1			lda PLAYSCREEN.OFS+2
 13200 7A28 69 00			adc #$00
 13201 7A2A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13202 7A2C AD 43 A1			lda PLAYSCREEN.OFS+3
 13203 7A2F 69 00			adc #$00
 13204 7A31 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13205 7A33 AC A5 A3			ldy Y
 13206 7A36 A5 A0			lda :STACKORIGIN+10
 13207 7A38 18 79 00 C0			add adr.ROW,y
 13208 7A3C 8D 54 A2			sta BLITTMP.DST
 13209 7A3F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13210 7A41 79 00 C1			adc adr.ROW+256,y
 13211 7A44 8D 55 A2			sta BLITTMP.DST+1
 13212 7A47 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13213 7A49 69 00			adc #$00
 13214 7A4B 8D 56 A2			sta BLITTMP.DST+2
 13215 7A4E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13216 7A50 69 00			adc #$00
 13217 7A52 8D 57 A2			sta BLITTMP.DST+3
 13218 7A55 AD A8 A3			lda K
 13219 7A58 8D 58 A2			sta BLITTMP.SIZE
 13220 7A5B 20 7B 3C			jsr BLITTMP
 13221
 13222 				; --- ForToDoEpilog
 13223 7A5E EE A5 A3			inc Y
 13224 7A61 F0 03 4C 38 79		jne l_262A
 13225 7A66			l_2638
 13226
 13227 				; ------------------------------------------------------------
 13228
 13229 = A39E			PATT	= DATAORIGIN+$0356
 13230 = A048			PATT.WIDTH	= DATAORIGIN+$0000
 13231 = A04A			PATT.HEIGHT	= DATAORIGIN+$0002
 13232 = A04C			PATT.OFS	= DATAORIGIN+$0004
 13233 = A3A2			YB	= DATAORIGIN+$035A
 13234 = A3A4			X	= DATAORIGIN+$035C
 13235 = A3A5			Y	= DATAORIGIN+$035D
 13236 = A3A6			CL	= DATAORIGIN+$035E
 13237 = A3A7			SHADOW	= DATAORIGIN+$035F
 13238 = A3A8			K	= DATAORIGIN+$0360
 13239
 13240 = A39E			@VarData	= PATT
 13241 = 0009			@VarDataSize	= 9
 13242
 13243 7A66			@exit
 13244 					.ifdef @new
 13245 					lda <@VarData
 13246 					sta :ztmp
 13247 					lda >@VarData
 13248 					ldy #@VarDataSize-1
 13249 					jmp @FreeMem
 13250 					els
 13251 7A66 60				rts						; ret
 13252 					eif
 13253 				.endl
 13254
 13255 7A67			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 13256
 13257 				; ------------------------------------------------------------
 13258
 13259 = A3A9			X	= DATAORIGIN+$0361
 13260 = A3AB			Y	= DATAORIGIN+$0363
 13261
 13262 = A3A9			@VarData	= X
 13263 = 0004			@VarDataSize	= 4
 13264
 13265 7A67			@exit
 13266 					.ifdef @new
 13267 					lda <@VarData
 13268 					sta :ztmp
 13269 					lda >@VarData
 13270 					ldy #@VarDataSize-1
 13271 					jmp @FreeMem
 13272 					els
 13273 7A67 60				rts						; ret
 13274 					eif
 13275 				.endl
 13276
 13277 7A68			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13278
 13279 				; optimize OK (service.pas), line = 2577
 13280
 13281 7A68 AD 81 C0			lda adr.ROW+$81
 13282 7A6B 18 69 48			add #$48
 13283 7A6E 8D 33 A2			sta HLP
 13284 7A71 AD 81 C1			lda adr.ROW+256+$81
 13285 7A74 69 00			adc #$00
 13286 7A76 8D 34 A2			sta HLP+1
 13287
 13288 				; optimize OK (service.pas), line = 2579
 13289
 13290 7A79 AD 33 A2			lda HLP
 13291 7A7C 8D 42 A2			sta BLITBOX.DST
 13292 7A7F A9 50			lda #$50
 13293 7A81 18 6D 34 A2			add HLP+1
 13294 7A85 8D 43 A2			sta BLITBOX.DST+1
 13295 7A88 A9 00			lda #$00
 13296 7A8A 69 00			adc #$00
 13297 7A8C 8D 44 A2			sta BLITBOX.DST+2
 13298 7A8F A9 00			lda #$00
 13299 7A91 69 00			adc #$00
 13300 7A93 8D 45 A2			sta BLITBOX.DST+3
 13301 7A96 AD 40 A1			lda PLAYSCREEN.OFS
 13302 7A99 18 6D 33 A2			add HLP
 13303 7A9D 8D 3E A2			sta BLITBOX.SRC
 13304 7AA0 AD 41 A1			lda PLAYSCREEN.OFS+1
 13305 7AA3 6D 34 A2			adc HLP+1
 13306 7AA6 8D 3F A2			sta BLITBOX.SRC+1
 13307 7AA9 AD 42 A1			lda PLAYSCREEN.OFS+2
 13308 7AAC 69 00			adc #$00
 13309 7AAE 8D 40 A2			sta BLITBOX.SRC+2
 13310 7AB1 AD 43 A1			lda PLAYSCREEN.OFS+3
 13311 7AB4 69 00			adc #$00
 13312 7AB6 8D 41 A2			sta BLITBOX.SRC+3
 13313 7AB9 A9 58			lda #$58
 13314 7ABB 8D 46 A2			sta BLITBOX.W
 13315 7ABE A9 00			lda #$00
 13316 7AC0 8D 47 A2			sta BLITBOX.W+1
 13317 7AC3 A9 1F			lda #$1F
 13318 7AC5 8D 48 A2			sta BLITBOX.H
 13319 7AC8 20 7C 3B			jsr BLITBOX
 13320
 13321 7ACB			@exit
 13322 					.ifdef @new
 13323 					lda <@VarData
 13324 					sta :ztmp
 13325 					lda >@VarData
 13326 					ldy #@VarDataSize-1
 13327 					jmp @FreeMem
 13328 					els
 13329 7ACB 60				rts						; ret
 13330 					eif
 13331 				.endl
 13332
 13333 7ACC			.local	GAME_OVER					; PROCEDURE
 13334
 13335 				; ------------------------------------------------------------
 13336
 13337 = A3AD			X	= DATAORIGIN+$0365
 13338 = A3AF			Y	= DATAORIGIN+$0367
 13339 = A3B1			adr.SC	= [DATAORIGIN+$0369] .array [21]
 13340 7ACC			.var SC	= adr.SC .word
 13341
 13342 = A3AD			@VarData	= X
 13343 = 0019			@VarDataSize	= 25
 13344
 13345 7ACC			@exit
 13346 					.ifdef @new
 13347 					lda <@VarData
 13348 					sta :ztmp
 13349 					lda >@VarData
 13350 					ldy #@VarDataSize-1
 13351 					jmp @FreeMem
 13352 					els
 13353 7ACC 60				rts						; ret
 13354 					eif
 13355 = 7ACD B1 A3		SC
 13355 				.endl
 13356
 13357 7ACF			.local	DESTROY_VAUS					; PROCEDURE
 13358
 13359 				; optimize OK (service.pas), line = 2633
 13360
 13361 7ACF AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13362
 13363 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2634
 13364
 13365 7AFF 20 FE 52			jsr MODIFY_VAUS
 13366
 13367 				; optimize OK (service.pas), line = 2636
 13368
 13369 7B02 AD B4 A1			lda VAUS.X
 13370 7B05 8D 0E A3			sta MOVE_VAUS.X
 13371 7B08 A9 00			lda #$00
 13372 7B0A 8D 0F A3			sta MOVE_VAUS.X+1
 13373 7B0D AD B5 A1			lda VAUS.Y
 13374 7B10 8D 10 A3			sta MOVE_VAUS.Y
 13375 7B13 A9 00			lda #$00
 13376 7B15 8D 11 A3			sta MOVE_VAUS.Y+1
 13377 7B18 20 49 55			jsr MOVE_VAUS
 13378
 13379 				; optimize OK (service.pas), line = 2638
 13380
 13381 7B1B AD B4 A1			lda VAUS.X
 13382 7B1E 38 E9 04			sub #$04
 13383 7B21 8D C8 A3			sta A
 13384 7B24 A9 00			lda #$00
 13385 7B26 E9 00			sbc #$00
 13386 7B28 8D C9 A3			sta A+1
 13387
 13388 				; optimize OK (service.pas), line = 2639
 13389
 13390 7B2B AD B5 A1			lda VAUS.Y
 13391 7B2E 38 E9 05			sub #$05
 13392 7B31 8D CA A3			sta B
 13393 7B34 A9 00			lda #$00
 13394 7B36 E9 00			sbc #$00
 13395 7B38 8D CB A3			sta B+1
 13396
 13397 				; optimize OK (service.pas), line = 2642
 13398
 13399 7B3B A9 00			lda #$00
 13400 7B3D 8D CC A3			sta W
 13401
 13402 7B40			l_2723
 13403 				; --- ForToDoCondition
 13404 7B40 AD CC A3			lda W
 13405 7B43 C9 07			cmp #$07
 13406 7B45 90 03 4C 2D 7D		jcs l_2731
 13407
 13408 				; optimize OK (service.pas), line = 2644
 13409
 13410 7B4A A9 00			lda #$00
 13411 7B4C 8D CE A3			sta Y
 13412
 13413 7B4F			l_273A
 13414 				; --- ForToDoCondition
 13415 7B4F AD CE A3			lda Y
 13416 7B52 C9 10			cmp #$10
 13417 7B54 90 03 4C 17 7D		jcs l_2748
 13418
 13419 				; optimize OK (service.pas), line = 2647
 13420
 13421 7B59 AD 64 A1			lda EXPLOSION.WIDTH
 13422 7B5C 85 8E			sta :ecx
 13423 7B5E AD 65 A1			lda EXPLOSION.WIDTH+1
 13424 7B61 85 8F			sta :ecx+1
 13425 7B63 AD CE A3			lda Y
 13426 7B66 85 86			sta :eax
 13427 7B68 A9 00			lda #$00
 13428 7B6A 85 87			sta :eax+1
 13429 					.ifdef fmulinit
 13430 					fmulu_16
 13431 					els
 13432 7B6C 20 6C 23			imulCX_AL
 13433 					eif
 13434 7B6F A5 86			lda :eax
 13435 7B71 85 9F			sta :STACKORIGIN+9
 13436 7B73 A5 87			lda :eax+1
 13437 7B75 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13438 7B77 AD 64 A1			lda EXPLOSION.WIDTH
 13439 7B7A 85 A1			sta :STACKORIGIN+11
 13440 7B7C AD 65 A1			lda EXPLOSION.WIDTH+1
 13441 7B7F 06 A1			asl :STACKORIGIN+11
 13442 7B81 2A				rol @
 13443 7B82 06 A1			asl :STACKORIGIN+11
 13444 7B84 2A				rol @
 13445 7B85 06 A1			asl :STACKORIGIN+11
 13446 7B87 2A				rol @
 13447 7B88 06 A1			asl :STACKORIGIN+11
 13448 7B8A 2A				rol @
 13449 7B8B 85 8F			sta :ecx+1
 13450 7B8D A5 A1			lda :STACKORIGIN+11
 13451 7B8F 85 8E			sta :ecx
 13452 7B91 AD CC A3			lda W
 13453 7B94 85 86			sta :eax
 13454 7B96 A9 00			lda #$00
 13455 7B98 85 87			sta :eax+1
 13456 					.ifdef fmulinit
 13457 					fmulu_16
 13458 					els
 13459 7B9A 20 28 23			imulCX
 13460 					eif
 13461 7B9D A5 86			lda :eax
 13462 7B9F 18 65 9F			add :STACKORIGIN+9
 13463 7BA2 8D C6 A3			sta Z
 13464 7BA5 A5 87			lda :eax+1
 13465 7BA7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13466 7BA9 8D C7 A3			sta Z+1
 13467
 13468 				; optimize OK (service.pas), line = 2649
 13469
 13470 7BAC AD CE A3			lda Y
 13471 7BAF 18 6D CA A3			add B
 13472 7BB3 A8				tay
 13473 7BB4 AD C8 A3			lda A
 13474 7BB7 18 79 00 C0			add adr.ROW,y
 13475 7BBB 8D 33 A2			sta HLP
 13476 7BBE AD C9 A3			lda A+1
 13477 7BC1 79 00 C1			adc adr.ROW+256,y
 13478 7BC4 8D 34 A2			sta HLP+1
 13479
 13480 				; optimize OK (service.pas), line = 2651
 13481
 13482 7BC7 A9 00			lda #$00
 13483 7BC9 8D CD A3			sta X
 13484 7BCC AC 64 A1			ldy EXPLOSION.WIDTH
 13485 7BCF 88				dey
 13486 7BD0 8C D4 7B			sty @FORTMP_277F_0
 13487
 13488 7BD3			l_2782
 13489 				; --- ForToDoCondition
 13490 7BD3 A9 00			lda @FORTMP_277F_0::#$00
 13491 7BD5 CD CD A3			cmp X
 13492 7BD8 B0 03 4C E9 7C		jcc l_2790
 13493
 13494 				; optimize FAIL (1, service.pas), line = 2655
 13495
 13496 7BDD E8				inx
 13497 7BDE A0 01			ldy #1
 13498 7BE0 AD CC A3			lda W
 13499 7BE3 C9 06			cmp #$06
 13500 7BE5 F0 01			beq @+
 13501 7BE7 88				dey
 13502 				@
 13503 7BE8 94 96			sty :STACKORIGIN,x
 13504 7BEA AD 68 A1			lda EXPLOSION.OFS
 13505 7BED 18 6D CD A3			add X
 13506 7BF1 85 9F			sta :STACKORIGIN+9
 13507 7BF3 AD 69 A1			lda EXPLOSION.OFS+1
 13508 7BF6 69 00			adc #$00
 13509 7BF8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13510 7BFA AD 6A A1			lda EXPLOSION.OFS+2
 13511 7BFD 69 00			adc #$00
 13512 7BFF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13513 7C01 AD 6B A1			lda EXPLOSION.OFS+3
 13514 7C04 69 00			adc #$00
 13515 7C06 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13516 7C08 A5 9F			lda :STACKORIGIN+9
 13517 7C0A 18 6D C6 A3			add Z
 13518 7C0E 8D 68 A2			sta GETBYTE.SRC
 13519 7C11 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13520 7C13 6D C7 A3			adc Z+1
 13521 7C16 8D 69 A2			sta GETBYTE.SRC+1
 13522 7C19 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13523 7C1B 69 00			adc #$00
 13524 7C1D 8D 6A A2			sta GETBYTE.SRC+2
 13525 7C20 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13526 7C22 69 00			adc #$00
 13527 7C24 8D 6B A2			sta GETBYTE.SRC+3
 13528 7C27 20 4E 3D			jsr GETBYTE
 13529 7C2A CA				dex
 13530 7C2B A0 01			ldy #1
 13531 7C2D AD 6C A2			lda GETBYTE.RESULT
 13532 7C30 F0 01			beq @+
 13533 7C32 88				dey
 13534 				@
 13535 7C33 98				tya
 13536 7C34 15 97			ora :STACKORIGIN+1,x
 13537 7C36 F0 56			jeq l_27B8
 13538
 13539 				; optimize FAIL (1, service.pas), line = 2659
 13540
 13541 7C38 E8				inx
 13542 7C39 AD CD A3 95 96		mva X :STACKORIGIN,x
 13543 7C3E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13544 7C42 AD 40 A1			lda PLAYSCREEN.OFS
 13545 7C45 18 6D 33 A2			add HLP
 13546 7C49 85 9F			sta :STACKORIGIN+9
 13547 7C4B AD 41 A1			lda PLAYSCREEN.OFS+1
 13548 7C4E 6D 34 A2			adc HLP+1
 13549 7C51 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13550 7C53 AD 42 A1			lda PLAYSCREEN.OFS+2
 13551 7C56 69 00			adc #$00
 13552 7C58 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13553 7C5A AD 43 A1			lda PLAYSCREEN.OFS+3
 13554 7C5D 69 00			adc #$00
 13555 7C5F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13556 7C61 A5 9F			lda :STACKORIGIN+9
 13557 7C63 18 6D CD A3			add X
 13558 7C67 8D 68 A2			sta GETBYTE.SRC
 13559 7C6A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13560 7C6C 69 00			adc #$00
 13561 7C6E 8D 69 A2			sta GETBYTE.SRC+1
 13562 7C71 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13563 7C73 69 00			adc #$00
 13564 7C75 8D 6A A2			sta GETBYTE.SRC+2
 13565 7C78 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13566 7C7A 69 00			adc #$00
 13567 7C7C 8D 6B A2			sta GETBYTE.SRC+3
 13568 7C7F 20 4E 3D			jsr GETBYTE
 13569 7C82 B4 96			ldy :STACKORIGIN,x
 13570 7C84 AD 6C A2			lda GETBYTE.RESULT
 13571 7C87 99 00 C2			sta adr.TMP,y
 13572 7C8A CA				dex
 13573 7C8B 4C E1 7C			jmp l_27D5
 13574 7C8E			l_27B8
 13575
 13576 				; optimize FAIL (1, service.pas), line = 2664
 13577
 13578 7C8E E8				inx
 13579 7C8F AD CD A3 95 96		mva X :STACKORIGIN,x
 13580 7C94 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13581 7C98 AD 68 A1			lda EXPLOSION.OFS
 13582 7C9B 18 6D CD A3			add X
 13583 7C9F 85 9F			sta :STACKORIGIN+9
 13584 7CA1 AD 69 A1			lda EXPLOSION.OFS+1
 13585 7CA4 69 00			adc #$00
 13586 7CA6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13587 7CA8 AD 6A A1			lda EXPLOSION.OFS+2
 13588 7CAB 69 00			adc #$00
 13589 7CAD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13590 7CAF AD 6B A1			lda EXPLOSION.OFS+3
 13591 7CB2 69 00			adc #$00
 13592 7CB4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13593 7CB6 A5 9F			lda :STACKORIGIN+9
 13594 7CB8 18 6D C6 A3			add Z
 13595 7CBC 8D 68 A2			sta GETBYTE.SRC
 13596 7CBF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13597 7CC1 6D C7 A3			adc Z+1
 13598 7CC4 8D 69 A2			sta GETBYTE.SRC+1
 13599 7CC7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13600 7CC9 69 00			adc #$00
 13601 7CCB 8D 6A A2			sta GETBYTE.SRC+2
 13602 7CCE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13603 7CD0 69 00			adc #$00
 13604 7CD2 8D 6B A2			sta GETBYTE.SRC+3
 13605 7CD5 20 4E 3D			jsr GETBYTE
 13606 7CD8 B4 96			ldy :STACKORIGIN,x
 13607 7CDA AD 6C A2			lda GETBYTE.RESULT
 13608 7CDD 99 00 C2			sta adr.TMP,y
 13609 7CE0 CA				dex
 13610 7CE1			l_27D5
 13611
 13612 				; --- ForToDoEpilog
 13613 7CE1 EE CD A3			inc X
 13614 7CE4 F0 03 4C D3 7B		jne l_2782
 13615 7CE9			l_2790
 13616
 13617 				; optimize OK (service.pas), line = 2667
 13618
 13619 7CE9 AD 33 A2			lda HLP
 13620 7CEC 8D 54 A2			sta BLITTMP.DST
 13621 7CEF A9 50			lda #$50
 13622 7CF1 18 6D 34 A2			add HLP+1
 13623 7CF5 8D 55 A2			sta BLITTMP.DST+1
 13624 7CF8 A9 00			lda #$00
 13625 7CFA 69 00			adc #$00
 13626 7CFC 8D 56 A2			sta BLITTMP.DST+2
 13627 7CFF A9 00			lda #$00
 13628 7D01 69 00			adc #$00
 13629 7D03 8D 57 A2			sta BLITTMP.DST+3
 13630 7D06 AD 64 A1			lda EXPLOSION.WIDTH
 13631 7D09 8D 58 A2			sta BLITTMP.SIZE
 13632 7D0C 20 7B 3C			jsr BLITTMP
 13633
 13634 				; --- ForToDoEpilog
 13635 7D0F EE CE A3			inc Y
 13636 7D12 F0 03 4C 4F 7B		jne l_273A
 13637 7D17			l_2748
 13638
 13639 				; optimize OK (service.pas), line = 2670
 13640
 13641 7D17 AD CC A3			lda W
 13642 7D1A 8D 2E A1			sta DEATH_SOUND.A
 13643 7D1D A9 00			lda #$00
 13644 7D1F 8D 2F A1			sta DEATH_SOUND.A+1
 13645 7D22 20 F0 3A			jsr DEATH_SOUND
 13646
 13647 				; --- ForToDoEpilog
 13648 7D25 EE CC A3			inc W
 13649 7D28 F0 03 4C 40 7B		jne l_2723
 13650 7D2D			l_2731
 13651
 13652 				; optimize OK (service.pas), line = 2674
 13653
 13654 7D2D A9 07			lda #$07
 13655 7D2F 8D 2E A1			sta DEATH_SOUND.A
 13656 7D32 A9 00			lda #$00
 13657 7D34 8D 2F A1			sta DEATH_SOUND.A+1
 13658 7D37 20 F0 3A			jsr DEATH_SOUND
 13659
 13660 				; optimize OK (service.pas), line = 2675
 13661
 13662 7D3A A9 96			lda #$96
 13663 7D3C 8D 6D A2			sta MYDELAY.A
 13664 7D3F A9 00			lda #$00
 13665 7D41 8D 6E A2			sta MYDELAY.A+1
 13666 7D44 20 77 3D			jsr MYDELAY
 13667
 13668 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2676
 13669
 13670 7D47 20 46 42			jsr DISABLE_LETTER
 13671
 13672 				; ------------------------------------------------------------
 13673
 13674 = A3C6			Z	= DATAORIGIN+$037E
 13675 = A3C8			A	= DATAORIGIN+$0380
 13676 = A3CA			B	= DATAORIGIN+$0382
 13677 = A3CC			W	= DATAORIGIN+$0384
 13678 = A3CD			X	= DATAORIGIN+$0385
 13679 = A3CE			Y	= DATAORIGIN+$0386
 13680
 13681 = A3C6			@VarData	= Z
 13682 = 0009			@VarDataSize	= 9
 13683
 13684 7D4A			@exit
 13685 					.ifdef @new
 13686 					lda <@VarData
 13687 					sta :ztmp
 13688 					lda >@VarData
 13689 					ldy #@VarDataSize-1
 13690 					jmp @FreeMem
 13691 					els
 13692 7D4A 60				rts						; ret
 13693 					eif
 13694 				.endl
 13695
 13696 7D4B			.local	CREATE_VAUS					; PROCEDURE
 13697
 13698 				; optimize FAIL ('NOSOUND', service.pas), line = 2688
 13699
 13700 7D4B 20 76 3D			jsr NOSOUND
 13701
 13702 				; optimize OK (service.pas), line = 2689
 13703
 13704 7D4E A9 5B			lda #$5B
 13705 7D50 8D D5 A3			sta A
 13706 7D53 A9 00			lda #$00
 13707 7D55 8D D6 A3			sta A+1
 13708
 13709 				; optimize OK (service.pas), line = 2690
 13710
 13711 7D58 A9 B3			lda #$B3
 13712 7D5A 8D D7 A3			sta B
 13713 7D5D A9 00			lda #$00
 13714 7D5F 8D D8 A3			sta B+1
 13715
 13716 				; optimize OK (service.pas), line = 2692
 13717
 13718 7D62 A9 0B			lda #$0B
 13719 7D64 8D D2 A3			sta W
 13720
 13721 7D67			l_281F
 13722 				; --- ForToDoCondition
 13723 7D67 A9 00			lda #$00
 13724 7D69 8D D1 A3			sta Y
 13725
 13726 7D6C			l_2836
 13727 				; --- ForToDoCondition
 13728 7D6C AD D1 A3			lda Y
 13729 7D6F C9 10			cmp #$10
 13730 7D71 90 03 4C 21 7F		jcs l_2844
 13731
 13732 				; optimize OK (service.pas), line = 2697
 13733
 13734 7D76 AD 6C A1			lda NEWVAUS.WIDTH
 13735 7D79 85 8E			sta :ecx
 13736 7D7B AD 6D A1			lda NEWVAUS.WIDTH+1
 13737 7D7E 85 8F			sta :ecx+1
 13738 7D80 AD D1 A3			lda Y
 13739 7D83 85 86			sta :eax
 13740 7D85 A9 00			lda #$00
 13741 7D87 85 87			sta :eax+1
 13742 					.ifdef fmulinit
 13743 					fmulu_16
 13744 					els
 13745 7D89 20 6C 23			imulCX_AL
 13746 					eif
 13747 7D8C A5 86			lda :eax
 13748 7D8E 85 9F			sta :STACKORIGIN+9
 13749 7D90 A5 87			lda :eax+1
 13750 7D92 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13751 7D94 A9 10			lda #$10
 13752 7D96 85 8E			sta :ecx
 13753 7D98 A9 00			lda #$00
 13754 7D9A 85 8F			sta :ecx+1
 13755 7D9C AD 6C A1			lda NEWVAUS.WIDTH
 13756 7D9F 85 86			sta :eax
 13757 7DA1 AD 6D A1			lda NEWVAUS.WIDTH+1
 13758 7DA4 85 87			sta :eax+1
 13759 					.ifdef fmulinit
 13760 					fmulu_16
 13761 					els
 13762 7DA6 20 28 23			imulCX
 13763 					eif
 13764 7DA9 A5 86			lda :eax
 13765 7DAB 85 8E			sta :ecx
 13766 7DAD A5 87			lda :eax+1
 13767 7DAF 85 8F			sta :ecx+1
 13768 7DB1 AD D2 A3			lda W
 13769 7DB4 85 86			sta :eax
 13770 7DB6 A9 00			lda #$00
 13771 7DB8 85 87			sta :eax+1
 13772 					.ifdef fmulinit
 13773 					fmulu_16
 13774 					els
 13775 7DBA 20 6C 23			imulCX_AL
 13776 					eif
 13777 7DBD A5 86			lda :eax
 13778 7DBF 18 65 9F			add :STACKORIGIN+9
 13779 7DC2 8D D3 A3			sta Z
 13780 7DC5 A5 87			lda :eax+1
 13781 7DC7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13782 7DC9 8D D4 A3			sta Z+1
 13783
 13784 				; optimize OK (service.pas), line = 2699
 13785
 13786 7DCC AD D1 A3			lda Y
 13787 7DCF 18 6D D7 A3			add B
 13788 7DD3 A8				tay
 13789 7DD4 AD D5 A3			lda A
 13790 7DD7 18 79 00 C0			add adr.ROW,y
 13791 7DDB 8D 33 A2			sta HLP
 13792 7DDE AD D6 A3			lda A+1
 13793 7DE1 79 00 C1			adc adr.ROW+256,y
 13794 7DE4 8D 34 A2			sta HLP+1
 13795
 13796 				; optimize OK (service.pas), line = 2701
 13797
 13798 7DE7 A9 00			lda #$00
 13799 7DE9 8D D0 A3			sta X
 13800 7DEC AC 6C A1			ldy NEWVAUS.WIDTH
 13801 7DEF 88				dey
 13802 7DF0 8C F4 7D			sty @FORTMP_287B_0
 13803
 13804 7DF3			l_287E
 13805 				; --- ForToDoCondition
 13806 7DF3 A9 00			lda @FORTMP_287B_0::#$00
 13807 7DF5 CD D0 A3			cmp X
 13808 7DF8 B0 03 4C F3 7E		jcc l_288C
 13809
 13810 				; optimize OK (service.pas), line = 2703
 13811
 13812 7DFD AD 70 A1			lda NEWVAUS.OFS
 13813 7E00 18 6D D0 A3			add X
 13814 7E04 85 9F			sta :STACKORIGIN+9
 13815 7E06 AD 71 A1			lda NEWVAUS.OFS+1
 13816 7E09 69 00			adc #$00
 13817 7E0B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13818 7E0D AD 72 A1			lda NEWVAUS.OFS+2
 13819 7E10 69 00			adc #$00
 13820 7E12 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13821 7E14 AD 73 A1			lda NEWVAUS.OFS+3
 13822 7E17 69 00			adc #$00
 13823 7E19 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13824 7E1B A5 9F			lda :STACKORIGIN+9
 13825 7E1D 18 6D D3 A3			add Z
 13826 7E21 8D 68 A2			sta GETBYTE.SRC
 13827 7E24 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13828 7E26 6D D4 A3			adc Z+1
 13829 7E29 8D 69 A2			sta GETBYTE.SRC+1
 13830 7E2C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13831 7E2E 69 00			adc #$00
 13832 7E30 8D 6A A2			sta GETBYTE.SRC+2
 13833 7E33 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13834 7E35 69 00			adc #$00
 13835 7E37 8D 6B A2			sta GETBYTE.SRC+3
 13836 7E3A 20 4E 3D			jsr GETBYTE
 13837 7E3D AD 6C A2			lda GETBYTE.RESULT
 13838 7E40 D0 56			jne l_28A8
 13839
 13840 				; optimize FAIL (1, service.pas), line = 2707
 13841
 13842 7E42 E8				inx
 13843 7E43 AD D0 A3 95 96		mva X :STACKORIGIN,x
 13844 7E48 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13845 7E4C AD 40 A1			lda PLAYSCREEN.OFS
 13846 7E4F 18 6D 33 A2			add HLP
 13847 7E53 85 9F			sta :STACKORIGIN+9
 13848 7E55 AD 41 A1			lda PLAYSCREEN.OFS+1
 13849 7E58 6D 34 A2			adc HLP+1
 13850 7E5B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13851 7E5D AD 42 A1			lda PLAYSCREEN.OFS+2
 13852 7E60 69 00			adc #$00
 13853 7E62 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13854 7E64 AD 43 A1			lda PLAYSCREEN.OFS+3
 13855 7E67 69 00			adc #$00
 13856 7E69 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13857 7E6B A5 9F			lda :STACKORIGIN+9
 13858 7E6D 18 6D D0 A3			add X
 13859 7E71 8D 68 A2			sta GETBYTE.SRC
 13860 7E74 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13861 7E76 69 00			adc #$00
 13862 7E78 8D 69 A2			sta GETBYTE.SRC+1
 13863 7E7B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13864 7E7D 69 00			adc #$00
 13865 7E7F 8D 6A A2			sta GETBYTE.SRC+2
 13866 7E82 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13867 7E84 69 00			adc #$00
 13868 7E86 8D 6B A2			sta GETBYTE.SRC+3
 13869 7E89 20 4E 3D			jsr GETBYTE
 13870 7E8C B4 96			ldy :STACKORIGIN,x
 13871 7E8E AD 6C A2			lda GETBYTE.RESULT
 13872 7E91 99 00 C2			sta adr.TMP,y
 13873 7E94 CA				dex
 13874 7E95 4C EB 7E			jmp l_28C5
 13875 7E98			l_28A8
 13876
 13877 				; optimize FAIL (1, service.pas), line = 2712
 13878
 13879 7E98 E8				inx
 13880 7E99 AD D0 A3 95 96		mva X :STACKORIGIN,x
 13881 7E9E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13882 7EA2 AD 70 A1			lda NEWVAUS.OFS
 13883 7EA5 18 6D D0 A3			add X
 13884 7EA9 85 9F			sta :STACKORIGIN+9
 13885 7EAB AD 71 A1			lda NEWVAUS.OFS+1
 13886 7EAE 69 00			adc #$00
 13887 7EB0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13888 7EB2 AD 72 A1			lda NEWVAUS.OFS+2
 13889 7EB5 69 00			adc #$00
 13890 7EB7 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13891 7EB9 AD 73 A1			lda NEWVAUS.OFS+3
 13892 7EBC 69 00			adc #$00
 13893 7EBE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13894 7EC0 A5 9F			lda :STACKORIGIN+9
 13895 7EC2 18 6D D3 A3			add Z
 13896 7EC6 8D 68 A2			sta GETBYTE.SRC
 13897 7EC9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13898 7ECB 6D D4 A3			adc Z+1
 13899 7ECE 8D 69 A2			sta GETBYTE.SRC+1
 13900 7ED1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13901 7ED3 69 00			adc #$00
 13902 7ED5 8D 6A A2			sta GETBYTE.SRC+2
 13903 7ED8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13904 7EDA 69 00			adc #$00
 13905 7EDC 8D 6B A2			sta GETBYTE.SRC+3
 13906 7EDF 20 4E 3D			jsr GETBYTE
 13907 7EE2 B4 96			ldy :STACKORIGIN,x
 13908 7EE4 AD 6C A2			lda GETBYTE.RESULT
 13909 7EE7 99 00 C2			sta adr.TMP,y
 13910 7EEA CA				dex
 13911 7EEB			l_28C5
 13912
 13913 				; --- ForToDoEpilog
 13914 7EEB EE D0 A3			inc X
 13915 7EEE F0 03 4C F3 7D		jne l_287E
 13916 7EF3			l_288C
 13917
 13918 				; optimize OK (service.pas), line = 2715
 13919
 13920 7EF3 AD 33 A2			lda HLP
 13921 7EF6 8D 54 A2			sta BLITTMP.DST
 13922 7EF9 A9 50			lda #$50
 13923 7EFB 18 6D 34 A2			add HLP+1
 13924 7EFF 8D 55 A2			sta BLITTMP.DST+1
 13925 7F02 A9 00			lda #$00
 13926 7F04 69 00			adc #$00
 13927 7F06 8D 56 A2			sta BLITTMP.DST+2
 13928 7F09 A9 00			lda #$00
 13929 7F0B 69 00			adc #$00
 13930 7F0D 8D 57 A2			sta BLITTMP.DST+3
 13931 7F10 AD 6C A1			lda NEWVAUS.WIDTH
 13932 7F13 8D 58 A2			sta BLITTMP.SIZE
 13933 7F16 20 7B 3C			jsr BLITTMP
 13934
 13935 				; --- ForToDoEpilog
 13936 7F19 EE D1 A3			inc Y
 13937 7F1C F0 03 4C 6C 7D		jne l_2836
 13938 7F21			l_2844
 13939
 13940 				; optimize OK (service.pas), line = 2718
 13941
 13942 7F21 A9 01			lda #$01
 13943 7F23 8D 6D A2			sta MYDELAY.A
 13944 7F26 A9 00			lda #$00
 13945 7F28 8D 6E A2			sta MYDELAY.A+1
 13946 7F2B 20 77 3D			jsr MYDELAY
 13947
 13948 				; --- ForToDoEpilog
 13949 7F2E CE D2 A3			dec W
 13950 7F31 30 03 4C 67 7D		jpl l_281F
 13951 7F36			l_282D
 13952
 13953 				; ------------------------------------------------------------
 13954
 13955 = A3D0			X	= DATAORIGIN+$0388
 13956 = A3D1			Y	= DATAORIGIN+$0389
 13957 = A3D2			W	= DATAORIGIN+$038A
 13958 = A3D3			Z	= DATAORIGIN+$038B
 13959 = A3D5			A	= DATAORIGIN+$038D
 13960 = A3D7			B	= DATAORIGIN+$038F
 13961
 13962 = A3D0			@VarData	= X
 13963 = 0009			@VarDataSize	= 9
 13964
 13965 7F36			@exit
 13966 					.ifdef @new
 13967 					lda <@VarData
 13968 					sta :ztmp
 13969 					lda >@VarData
 13970 					ldy #@VarDataSize-1
 13971 					jmp @FreeMem
 13972 					els
 13973 7F36 60				rts						; ret
 13974 					eif
 13975 				.endl
 13976
 13977 7F37			.local	PUT_DIGIT					; PROCEDURE
 13978
 13979 				; optimize OK (service.pas), line = 2728
 13980
 13981 7F37 A9 DE			lda #$DE
 13982 7F39 8D E2 A3			sta A
 13983
 13984 				; optimize OK (service.pas), line = 2752
 13985
 13986 7F3C AC DE A3			ldy NUM
 13987 7F3F B9 96 20			lda adr.DIGITS,y
 13988 7F42 29 01			and #$01
 13989 7F44 C9 01			cmp #$01
 13990 7F46 D0 05			jne l_2912
 13991 7F48 A9 DF			lda #$DF
 13992 7F4A 8D E2 A3			sta A
 13993 7F4D			l_2912
 13994
 13995 				; optimize OK (service.pas), line = 2753
 13996
 13997 7F4D A9 01			lda #$01
 13998 7F4F 8D E0 A3			sta X
 13999
 14000 7F52			l_2922
 14001 				; --- ForToDoCondition
 14002 7F52 AD E0 A3			lda X
 14003 7F55 C9 05			cmp #$05
 14004 7F57 B0 63			jcs l_2930
 14005
 14006 				; optimize OK (service.pas), line = 2755
 14007
 14008 7F59 AD DA A3			lda PX
 14009 7F5C 85 A0			sta :STACKORIGIN+10
 14010 7F5E A9 50			lda #$50
 14011 7F60 18 6D DB A3			add PX+1
 14012 7F64 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14013 7F66 A9 00			lda #$00
 14014 7F68 69 00			adc #$00
 14015 7F6A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14016 7F6C A9 00			lda #$00
 14017 7F6E 69 00			adc #$00
 14018 7F70 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14019 7F72 A5 A0			lda :STACKORIGIN+10
 14020 7F74 18 6D E0 A3			add X
 14021 7F78 85 A0			sta :STACKORIGIN+10
 14022 7F7A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14023 7F7C 69 00			adc #$00
 14024 7F7E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14025 7F80 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14026 7F82 69 00			adc #$00
 14027 7F84 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14028 7F86 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14029 7F88 69 00			adc #$00
 14030 7F8A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14031 7F8C AC DC A3			ldy PY
 14032 7F8F A5 A0			lda :STACKORIGIN+10
 14033 7F91 18 79 00 C0			add adr.ROW,y
 14034 7F95 8D 63 A2			sta PUTBYTE.DST
 14035 7F98 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14036 7F9A 79 00 C1			adc adr.ROW+256,y
 14037 7F9D 8D 64 A2			sta PUTBYTE.DST+1
 14038 7FA0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14039 7FA2 69 00			adc #$00
 14040 7FA4 8D 65 A2			sta PUTBYTE.DST+2
 14041 7FA7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14042 7FA9 69 00			adc #$00
 14043 7FAB 8D 66 A2			sta PUTBYTE.DST+3
 14044 7FAE AD E2 A3			lda A
 14045 7FB1 8D 67 A2			sta PUTBYTE.V
 14046 7FB4 20 26 3D			jsr PUTBYTE
 14047
 14048 				; --- ForToDoEpilog
 14049 7FB7 EE E0 A3			inc X
 14050 7FBA D0 96			jne l_2922
 14051 7FBC			l_2930
 14052
 14053 				; optimize OK (service.pas), line = 2759
 14054
 14055 7FBC A9 DE			lda #$DE
 14056 7FBE 8D E2 A3			sta A
 14057
 14058 				; optimize OK (service.pas), line = 2760
 14059
 14060 7FC1 AC DE A3			ldy NUM
 14061 7FC4 B9 96 20			lda adr.DIGITS,y
 14062 7FC7 29 02			and #$02
 14063 7FC9 C9 02			cmp #$02
 14064 7FCB D0 05			jne l_2968
 14065 7FCD A9 DF			lda #$DF
 14066 7FCF 8D E2 A3			sta A
 14067 7FD2			l_2968
 14068
 14069 				; optimize OK (service.pas), line = 2761
 14070
 14071 7FD2 A9 01			lda #$01
 14072 7FD4 8D E0 A3			sta X
 14073
 14074 7FD7			l_2978
 14075 				; --- ForToDoCondition
 14076 7FD7 AD E0 A3			lda X
 14077 7FDA C9 05			cmp #$05
 14078 7FDC B0 63			jcs l_2986
 14079
 14080 				; optimize OK (service.pas), line = 2763
 14081
 14082 7FDE AD DA A3			lda PX
 14083 7FE1 85 A0			sta :STACKORIGIN+10
 14084 7FE3 A9 50			lda #$50
 14085 7FE5 18 6D DB A3			add PX+1
 14086 7FE9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14087 7FEB A9 00			lda #$00
 14088 7FED 69 00			adc #$00
 14089 7FEF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14090 7FF1 A9 00			lda #$00
 14091 7FF3 69 00			adc #$00
 14092 7FF5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14093 7FF7 A5 A0			lda :STACKORIGIN+10
 14094 7FF9 18 6D E0 A3			add X
 14095 7FFD 85 A0			sta :STACKORIGIN+10
 14096 7FFF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14097 8001 69 00			adc #$00
 14098 8003 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14099 8005 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14100 8007 69 00			adc #$00
 14101 8009 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14102 800B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14103 800D 69 00			adc #$00
 14104 800F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14105 8011 AC DC A3			ldy PY
 14106 8014 A5 A0			lda :STACKORIGIN+10
 14107 8016 18 79 05 C0			add adr.ROW+$05,y
 14108 801A 8D 63 A2			sta PUTBYTE.DST
 14109 801D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14110 801F 79 05 C1			adc adr.ROW+256+$05,y
 14111 8022 8D 64 A2			sta PUTBYTE.DST+1
 14112 8025 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14113 8027 69 00			adc #$00
 14114 8029 8D 65 A2			sta PUTBYTE.DST+2
 14115 802C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14116 802E 69 00			adc #$00
 14117 8030 8D 66 A2			sta PUTBYTE.DST+3
 14118 8033 AD E2 A3			lda A
 14119 8036 8D 67 A2			sta PUTBYTE.V
 14120 8039 20 26 3D			jsr PUTBYTE
 14121
 14122 				; --- ForToDoEpilog
 14123 803C EE E0 A3			inc X
 14124 803F D0 96			jne l_2978
 14125 8041			l_2986
 14126
 14127 				; optimize OK (service.pas), line = 2767
 14128
 14129 8041 A9 DE			lda #$DE
 14130 8043 8D E2 A3			sta A
 14131
 14132 				; optimize OK (service.pas), line = 2768
 14133
 14134 8046 AC DE A3			ldy NUM
 14135 8049 B9 96 20			lda adr.DIGITS,y
 14136 804C 29 04			and #$04
 14137 804E C9 04			cmp #$04
 14138 8050 D0 05			jne l_29C2
 14139 8052 A9 DF			lda #$DF
 14140 8054 8D E2 A3			sta A
 14141 8057			l_29C2
 14142
 14143 				; optimize OK (service.pas), line = 2769
 14144
 14145 8057 A9 01			lda #$01
 14146 8059 8D E0 A3			sta X
 14147
 14148 805C			l_29D2
 14149 				; --- ForToDoCondition
 14150 805C AD E0 A3			lda X
 14151 805F C9 05			cmp #$05
 14152 8061 B0 63			jcs l_29E0
 14153
 14154 				; optimize OK (service.pas), line = 2771
 14155
 14156 8063 AD DA A3			lda PX
 14157 8066 85 A0			sta :STACKORIGIN+10
 14158 8068 A9 50			lda #$50
 14159 806A 18 6D DB A3			add PX+1
 14160 806E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14161 8070 A9 00			lda #$00
 14162 8072 69 00			adc #$00
 14163 8074 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14164 8076 A9 00			lda #$00
 14165 8078 69 00			adc #$00
 14166 807A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14167 807C A5 A0			lda :STACKORIGIN+10
 14168 807E 18 6D E0 A3			add X
 14169 8082 85 A0			sta :STACKORIGIN+10
 14170 8084 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14171 8086 69 00			adc #$00
 14172 8088 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14173 808A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14174 808C 69 00			adc #$00
 14175 808E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14176 8090 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14177 8092 69 00			adc #$00
 14178 8094 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14179 8096 AC DC A3			ldy PY
 14180 8099 A5 A0			lda :STACKORIGIN+10
 14181 809B 18 79 0A C0			add adr.ROW+$0A,y
 14182 809F 8D 63 A2			sta PUTBYTE.DST
 14183 80A2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14184 80A4 79 0A C1			adc adr.ROW+256+$0A,y
 14185 80A7 8D 64 A2			sta PUTBYTE.DST+1
 14186 80AA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14187 80AC 69 00			adc #$00
 14188 80AE 8D 65 A2			sta PUTBYTE.DST+2
 14189 80B1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14190 80B3 69 00			adc #$00
 14191 80B5 8D 66 A2			sta PUTBYTE.DST+3
 14192 80B8 AD E2 A3			lda A
 14193 80BB 8D 67 A2			sta PUTBYTE.V
 14194 80BE 20 26 3D			jsr PUTBYTE
 14195
 14196 				; --- ForToDoEpilog
 14197 80C1 EE E0 A3			inc X
 14198 80C4 D0 96			jne l_29D2
 14199 80C6			l_29E0
 14200
 14201 				; optimize OK (service.pas), line = 2774
 14202
 14203 80C6 A9 DE			lda #$DE
 14204 80C8 8D E2 A3			sta A
 14205
 14206 				; optimize OK (service.pas), line = 2775
 14207
 14208 80CB AC DE A3			ldy NUM
 14209 80CE B9 96 20			lda adr.DIGITS,y
 14210 80D1 29 08			and #$08
 14211 80D3 C9 08			cmp #$08
 14212 80D5 D0 05			jne l_2A1C
 14213 80D7 A9 DF			lda #$DF
 14214 80D9 8D E2 A3			sta A
 14215 80DC			l_2A1C
 14216
 14217 				; optimize OK (service.pas), line = 2776
 14218
 14219 80DC A9 01			lda #$01
 14220 80DE 8D E1 A3			sta Y
 14221
 14222 80E1			l_2A2C
 14223 				; --- ForToDoCondition
 14224 80E1 AD E1 A3			lda Y
 14225 80E4 C9 05			cmp #$05
 14226 80E6 B0 4E			jcs l_2A3A
 14227
 14228 				; optimize OK (service.pas), line = 2778
 14229
 14230 80E8 AD DA A3			lda PX
 14231 80EB 85 A0			sta :STACKORIGIN+10
 14232 80ED A9 50			lda #$50
 14233 80EF 18 6D DB A3			add PX+1
 14234 80F3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14235 80F5 A9 00			lda #$00
 14236 80F7 69 00			adc #$00
 14237 80F9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14238 80FB A9 00			lda #$00
 14239 80FD 69 00			adc #$00
 14240 80FF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14241 8101 AD DC A3			lda PY
 14242 8104 18 6D E1 A3			add Y
 14243 8108 A8				tay
 14244 8109 A5 A0			lda :STACKORIGIN+10
 14245 810B 18 79 00 C0			add adr.ROW,y
 14246 810F 8D 63 A2			sta PUTBYTE.DST
 14247 8112 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14248 8114 79 00 C1			adc adr.ROW+256,y
 14249 8117 8D 64 A2			sta PUTBYTE.DST+1
 14250 811A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14251 811C 69 00			adc #$00
 14252 811E 8D 65 A2			sta PUTBYTE.DST+2
 14253 8121 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14254 8123 69 00			adc #$00
 14255 8125 8D 66 A2			sta PUTBYTE.DST+3
 14256 8128 AD E2 A3			lda A
 14257 812B 8D 67 A2			sta PUTBYTE.V
 14258 812E 20 26 3D			jsr PUTBYTE
 14259
 14260 				; --- ForToDoEpilog
 14261 8131 EE E1 A3			inc Y
 14262 8134 D0 AB			jne l_2A2C
 14263 8136			l_2A3A
 14264
 14265 				; optimize OK (service.pas), line = 2781
 14266
 14267 8136 A9 DE			lda #$DE
 14268 8138 8D E2 A3			sta A
 14269
 14270 				; optimize OK (service.pas), line = 2782
 14271
 14272 813B AC DE A3			ldy NUM
 14273 813E B9 96 20			lda adr.DIGITS,y
 14274 8141 29 10			and #$10
 14275 8143 C9 10			cmp #$10
 14276 8145 D0 05			jne l_2A72
 14277 8147 A9 DF			lda #$DF
 14278 8149 8D E2 A3			sta A
 14279 814C			l_2A72
 14280
 14281 				; optimize OK (service.pas), line = 2783
 14282
 14283 814C A9 01			lda #$01
 14284 814E 8D E1 A3			sta Y
 14285
 14286 8151			l_2A82
 14287 				; --- ForToDoCondition
 14288 8151 AD E1 A3			lda Y
 14289 8154 C9 05			cmp #$05
 14290 8156 B0 4E			jcs l_2A90
 14291
 14292 				; optimize OK (service.pas), line = 2785
 14293
 14294 8158 AD DA A3			lda PX
 14295 815B 85 A0			sta :STACKORIGIN+10
 14296 815D A9 50			lda #$50
 14297 815F 18 6D DB A3			add PX+1
 14298 8163 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14299 8165 A9 00			lda #$00
 14300 8167 69 00			adc #$00
 14301 8169 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14302 816B A9 00			lda #$00
 14303 816D 69 00			adc #$00
 14304 816F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14305 8171 AD DC A3			lda PY
 14306 8174 18 6D E1 A3			add Y
 14307 8178 A8				tay
 14308 8179 A5 A0			lda :STACKORIGIN+10
 14309 817B 18 79 05 C0			add adr.ROW+$05,y
 14310 817F 8D 63 A2			sta PUTBYTE.DST
 14311 8182 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14312 8184 79 05 C1			adc adr.ROW+256+$05,y
 14313 8187 8D 64 A2			sta PUTBYTE.DST+1
 14314 818A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14315 818C 69 00			adc #$00
 14316 818E 8D 65 A2			sta PUTBYTE.DST+2
 14317 8191 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14318 8193 69 00			adc #$00
 14319 8195 8D 66 A2			sta PUTBYTE.DST+3
 14320 8198 AD E2 A3			lda A
 14321 819B 8D 67 A2			sta PUTBYTE.V
 14322 819E 20 26 3D			jsr PUTBYTE
 14323
 14324 				; --- ForToDoEpilog
 14325 81A1 EE E1 A3			inc Y
 14326 81A4 D0 AB			jne l_2A82
 14327 81A6			l_2A90
 14328
 14329 				; optimize OK (service.pas), line = 2788
 14330
 14331 81A6 A9 DE			lda #$DE
 14332 81A8 8D E2 A3			sta A
 14333
 14334 				; optimize OK (service.pas), line = 2789
 14335
 14336 81AB AC DE A3			ldy NUM
 14337 81AE B9 96 20			lda adr.DIGITS,y
 14338 81B1 29 20			and #$20
 14339 81B3 C9 20			cmp #$20
 14340 81B5 D0 05			jne l_2ACC
 14341 81B7 A9 DF			lda #$DF
 14342 81B9 8D E2 A3			sta A
 14343 81BC			l_2ACC
 14344
 14345 				; optimize OK (service.pas), line = 2790
 14346
 14347 81BC A9 01			lda #$01
 14348 81BE 8D E1 A3			sta Y
 14349
 14350 81C1			l_2ADC
 14351 				; --- ForToDoCondition
 14352 81C1 AD E1 A3			lda Y
 14353 81C4 C9 05			cmp #$05
 14354 81C6 B0 4F			jcs l_2AEA
 14355
 14356 				; optimize OK (service.pas), line = 2792
 14357
 14358 81C8 A9 05			lda #$05
 14359 81CA 6D DA A3			adc PX
 14360 81CD 85 A0			sta :STACKORIGIN+10
 14361 81CF A9 50			lda #$50
 14362 81D1 6D DB A3			adc PX+1
 14363 81D4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14364 81D6 A9 00			lda #$00
 14365 81D8 69 00			adc #$00
 14366 81DA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14367 81DC A9 00			lda #$00
 14368 81DE 69 00			adc #$00
 14369 81E0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14370 81E2 AD DC A3			lda PY
 14371 81E5 18 6D E1 A3			add Y
 14372 81E9 A8				tay
 14373 81EA A5 A0			lda :STACKORIGIN+10
 14374 81EC 18 79 00 C0			add adr.ROW,y
 14375 81F0 8D 63 A2			sta PUTBYTE.DST
 14376 81F3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14377 81F5 79 00 C1			adc adr.ROW+256,y
 14378 81F8 8D 64 A2			sta PUTBYTE.DST+1
 14379 81FB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14380 81FD 69 00			adc #$00
 14381 81FF 8D 65 A2			sta PUTBYTE.DST+2
 14382 8202 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14383 8204 69 00			adc #$00
 14384 8206 8D 66 A2			sta PUTBYTE.DST+3
 14385 8209 AD E2 A3			lda A
 14386 820C 8D 67 A2			sta PUTBYTE.V
 14387 820F 20 26 3D			jsr PUTBYTE
 14388
 14389 				; --- ForToDoEpilog
 14390 8212 EE E1 A3			inc Y
 14391 8215 D0 AA			jne l_2ADC
 14392 8217			l_2AEA
 14393
 14394 				; optimize OK (service.pas), line = 2795
 14395
 14396 8217 A9 DE			lda #$DE
 14397 8219 8D E2 A3			sta A
 14398
 14399 				; optimize OK (service.pas), line = 2796
 14400
 14401 821C AC DE A3			ldy NUM
 14402 821F B9 96 20			lda adr.DIGITS,y
 14403 8222 29 40			and #$40
 14404 8224 C9 40			cmp #$40
 14405 8226 D0 05			jne l_2B26
 14406 8228 A9 DF			lda #$DF
 14407 822A 8D E2 A3			sta A
 14408 822D			l_2B26
 14409
 14410 				; optimize OK (service.pas), line = 2797
 14411
 14412 822D A9 01			lda #$01
 14413 822F 8D E1 A3			sta Y
 14414
 14415 8232			l_2B36
 14416 				; --- ForToDoCondition
 14417 8232 AD E1 A3			lda Y
 14418 8235 C9 05			cmp #$05
 14419 8237 B0 4F			jcs l_2B44
 14420
 14421 				; optimize OK (service.pas), line = 2799
 14422
 14423 8239 A9 05			lda #$05
 14424 823B 6D DA A3			adc PX
 14425 823E 85 A0			sta :STACKORIGIN+10
 14426 8240 A9 50			lda #$50
 14427 8242 6D DB A3			adc PX+1
 14428 8245 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14429 8247 A9 00			lda #$00
 14430 8249 69 00			adc #$00
 14431 824B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14432 824D A9 00			lda #$00
 14433 824F 69 00			adc #$00
 14434 8251 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14435 8253 AD DC A3			lda PY
 14436 8256 18 6D E1 A3			add Y
 14437 825A A8				tay
 14438 825B A5 A0			lda :STACKORIGIN+10
 14439 825D 18 79 05 C0			add adr.ROW+$05,y
 14440 8261 8D 63 A2			sta PUTBYTE.DST
 14441 8264 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14442 8266 79 05 C1			adc adr.ROW+256+$05,y
 14443 8269 8D 64 A2			sta PUTBYTE.DST+1
 14444 826C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14445 826E 69 00			adc #$00
 14446 8270 8D 65 A2			sta PUTBYTE.DST+2
 14447 8273 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14448 8275 69 00			adc #$00
 14449 8277 8D 66 A2			sta PUTBYTE.DST+3
 14450 827A AD E2 A3			lda A
 14451 827D 8D 67 A2			sta PUTBYTE.V
 14452 8280 20 26 3D			jsr PUTBYTE
 14453
 14454 				; --- ForToDoEpilog
 14455 8283 EE E1 A3			inc Y
 14456 8286 D0 AA			jne l_2B36
 14457 8288			l_2B44
 14458
 14459 				; ------------------------------------------------------------
 14460
 14461 = A3DA			PX	= DATAORIGIN+$0392
 14462 = A3DC			PY	= DATAORIGIN+$0394
 14463 = A3DE			NUM	= DATAORIGIN+$0396
 14464 = A3E0			X	= DATAORIGIN+$0398
 14465 = A3E1			Y	= DATAORIGIN+$0399
 14466 = A3E2			A	= DATAORIGIN+$039A
 14467
 14468 = A3DA			@VarData	= PX
 14469 = 0009			@VarDataSize	= 9
 14470
 14471 8288			@exit
 14472 					.ifdef @new
 14473 					lda <@VarData
 14474 					sta :ztmp
 14475 					lda >@VarData
 14476 					ldy #@VarDataSize-1
 14477 					jmp @FreeMem
 14478 					els
 14479 8288 60				rts						; ret
 14480 					eif
 14481 				.endl
 14482
 14483 8289			.local	WRITE_SCORE					; PROCEDURE
 14484
 14485 				; optimize OK (service.pas), line = 2810
 14486
 14487 8289 A9 00			lda #$00
 14488 828B 8D EF A3			sta F
 14489
 14490 				; optimize OK (service.pas), line = 2815
 14491
 14492 828E A9 A0			lda #$A0
 14493 8290 85 8E			sta @INTEGER.DIV.B
 14494 8292 A9 86			lda #$86
 14495 8294 85 8F			sta @INTEGER.DIV.B+1
 14496 8296 A9 01			lda #$01
 14497 8298 85 90			sta @INTEGER.DIV.B+2
 14498 829A A9 00			lda #$00
 14499 829C 85 91			sta @INTEGER.DIV.B+3
 14500 829E AD E7 A3			lda SC
 14501 82A1 85 86			sta @INTEGER.DIV.A
 14502 82A3 AD E8 A3			lda SC+1
 14503 82A6 85 87			sta @INTEGER.DIV.A+1
 14504 82A8 AD E9 A3			lda SC+2
 14505 82AB 85 88			sta @INTEGER.DIV.A+2
 14506 82AD AD EA A3			lda SC+3
 14507 82B0 85 89			sta @INTEGER.DIV.A+3
 14508 82B2 20 90 22			jsr @INTEGER.DIV
 14509 82B5 A9 0A			lda #$0A
 14510 82B7 85 8E			sta @INTEGER.MOD.B
 14511 82B9 A9 00			lda #$00
 14512 82BB 85 8F			sta @INTEGER.MOD.B+1
 14513 82BD 85 90			sta @INTEGER.MOD.B+2
 14514 82BF 85 91			sta @INTEGER.MOD.B+3
 14515 82C1 20 AD 22			jsr @INTEGER.MOD
 14516 82C4 A5 8A			lda @INTEGER.MOD.RESULT
 14517 82C6 8D EB A3			sta N1
 14518 82C9 A5 8B			lda @INTEGER.MOD.RESULT+1
 14519 82CB 8D EC A3			sta N1+1
 14520 82CE A5 8C			lda @INTEGER.MOD.RESULT+2
 14521 82D0 8D ED A3			sta N1+2
 14522 82D3 A5 8D			lda @INTEGER.MOD.RESULT+3
 14523 82D5 8D EE A3			sta N1+3
 14524
 14525 				; optimize OK (service.pas), line = 2816
 14526
 14527 82D8 30 10			jmi l_2B8C
 14528 82DA 0D ED A3			ora N1+2
 14529 82DD 0D EC A3			ora N1+1
 14530 82E0 0D EB A3			ora N1
 14531 82E3 F0 05			jeq l_2B8C
 14532 82E5 A9 01			lda #$01
 14533 82E7 8D EF A3			sta F
 14534 82EA			l_2B8C
 14535
 14536 				; optimize OK (service.pas), line = 2817
 14537
 14538 82EA AD EF A3			lda F
 14539 82ED F0 24			jeq l_2B9F
 14540 82EF AD E3 A3			lda PX
 14541 82F2 8D DA A3			sta PUT_DIGIT.PX
 14542 82F5 AD E4 A3			lda PX+1
 14543 82F8 8D DB A3			sta PUT_DIGIT.PX+1
 14544 82FB AD E5 A3			lda PY
 14545 82FE 8D DC A3			sta PUT_DIGIT.PY
 14546 8301 AD E6 A3			lda PY+1
 14547 8304 8D DD A3			sta PUT_DIGIT.PY+1
 14548 8307 AD EB A3			lda N1
 14549 830A 8D DE A3			sta PUT_DIGIT.NUM
 14550 830D AD EC A3			lda N1+1
 14551 8310 4C 32 83			jmp l_2BAF
 14552 8313			l_2B9F
 14553
 14554 				; optimize OK (service.pas), line = 2818
 14555
 14556 8313 AD E3 A3			lda PX
 14557 8316 8D DA A3			sta PUT_DIGIT.PX
 14558 8319 AD E4 A3			lda PX+1
 14559 831C 8D DB A3			sta PUT_DIGIT.PX+1
 14560 831F AD E5 A3			lda PY
 14561 8322 8D DC A3			sta PUT_DIGIT.PY
 14562 8325 AD E6 A3			lda PY+1
 14563 8328 8D DD A3			sta PUT_DIGIT.PY+1
 14564 832B A9 0A			lda #$0A
 14565 832D 8D DE A3			sta PUT_DIGIT.NUM
 14566 8330 A9 00			lda #$00
 14567 8332			l_2BAF
 14568 8332 8D DF A3			sta PUT_DIGIT.NUM+1
 14569 8335 20 37 7F			jsr PUT_DIGIT
 14570
 14571 				; optimize OK (service.pas), line = 2821
 14572
 14573 8338 A9 10			lda #$10
 14574 833A 85 8E			sta @INTEGER.DIV.B
 14575 833C A9 27			lda #$27
 14576 833E 85 8F			sta @INTEGER.DIV.B+1
 14577 8340 A9 00			lda #$00
 14578 8342 85 90			sta @INTEGER.DIV.B+2
 14579 8344 85 91			sta @INTEGER.DIV.B+3
 14580 8346 AD E7 A3			lda SC
 14581 8349 85 86			sta @INTEGER.DIV.A
 14582 834B AD E8 A3			lda SC+1
 14583 834E 85 87			sta @INTEGER.DIV.A+1
 14584 8350 AD E9 A3			lda SC+2
 14585 8353 85 88			sta @INTEGER.DIV.A+2
 14586 8355 AD EA A3			lda SC+3
 14587 8358 85 89			sta @INTEGER.DIV.A+3
 14588 835A 20 90 22			jsr @INTEGER.DIV
 14589 835D A9 0A			lda #$0A
 14590 835F 85 8E			sta @INTEGER.MOD.B
 14591 8361 A9 00			lda #$00
 14592 8363 85 8F			sta @INTEGER.MOD.B+1
 14593 8365 85 90			sta @INTEGER.MOD.B+2
 14594 8367 85 91			sta @INTEGER.MOD.B+3
 14595 8369 20 AD 22			jsr @INTEGER.MOD
 14596 836C A5 8A			lda @INTEGER.MOD.RESULT
 14597 836E 8D EB A3			sta N1
 14598 8371 A5 8B			lda @INTEGER.MOD.RESULT+1
 14599 8373 8D EC A3			sta N1+1
 14600 8376 A5 8C			lda @INTEGER.MOD.RESULT+2
 14601 8378 8D ED A3			sta N1+2
 14602 837B A5 8D			lda @INTEGER.MOD.RESULT+3
 14603 837D 8D EE A3			sta N1+3
 14604
 14605 				; optimize OK (service.pas), line = 2822
 14606
 14607 8380 30 10			jmi l_2BD1
 14608 8382 0D ED A3			ora N1+2
 14609 8385 0D EC A3			ora N1+1
 14610 8388 0D EB A3			ora N1
 14611 838B F0 05			jeq l_2BD1
 14612 838D A9 01			lda #$01
 14613 838F 8D EF A3			sta F
 14614 8392			l_2BD1
 14615
 14616 				; optimize OK (service.pas), line = 2823
 14617
 14618 8392 AD EF A3			lda F
 14619 8395 F0 29			jeq l_2BE4
 14620 8397 AD E3 A3			lda PX
 14621 839A 18 69 07			add #$07
 14622 839D 8D DA A3			sta PUT_DIGIT.PX
 14623 83A0 AD E4 A3			lda PX+1
 14624 83A3 69 00			adc #$00
 14625 83A5 8D DB A3			sta PUT_DIGIT.PX+1
 14626 83A8 AD E5 A3			lda PY
 14627 83AB 8D DC A3			sta PUT_DIGIT.PY
 14628 83AE AD E6 A3			lda PY+1
 14629 83B1 8D DD A3			sta PUT_DIGIT.PY+1
 14630 83B4 AD EB A3			lda N1
 14631 83B7 8D DE A3			sta PUT_DIGIT.NUM
 14632 83BA AD EC A3			lda N1+1
 14633 83BD 4C E4 83			jmp l_2BF8
 14634 83C0			l_2BE4
 14635
 14636 				; optimize OK (service.pas), line = 2824
 14637
 14638 83C0 AD E3 A3			lda PX
 14639 83C3 18 69 07			add #$07
 14640 83C6 8D DA A3			sta PUT_DIGIT.PX
 14641 83C9 AD E4 A3			lda PX+1
 14642 83CC 69 00			adc #$00
 14643 83CE 8D DB A3			sta PUT_DIGIT.PX+1
 14644 83D1 AD E5 A3			lda PY
 14645 83D4 8D DC A3			sta PUT_DIGIT.PY
 14646 83D7 AD E6 A3			lda PY+1
 14647 83DA 8D DD A3			sta PUT_DIGIT.PY+1
 14648 83DD A9 0A			lda #$0A
 14649 83DF 8D DE A3			sta PUT_DIGIT.NUM
 14650 83E2 A9 00			lda #$00
 14651 83E4			l_2BF8
 14652 83E4 8D DF A3			sta PUT_DIGIT.NUM+1
 14653 83E7 20 37 7F			jsr PUT_DIGIT
 14654
 14655 				; optimize OK (service.pas), line = 2827
 14656
 14657 83EA A9 E8			lda #$E8
 14658 83EC 85 8E			sta @INTEGER.DIV.B
 14659 83EE A9 03			lda #$03
 14660 83F0 85 8F			sta @INTEGER.DIV.B+1
 14661 83F2 A9 00			lda #$00
 14662 83F4 85 90			sta @INTEGER.DIV.B+2
 14663 83F6 85 91			sta @INTEGER.DIV.B+3
 14664 83F8 AD E7 A3			lda SC
 14665 83FB 85 86			sta @INTEGER.DIV.A
 14666 83FD AD E8 A3			lda SC+1
 14667 8400 85 87			sta @INTEGER.DIV.A+1
 14668 8402 AD E9 A3			lda SC+2
 14669 8405 85 88			sta @INTEGER.DIV.A+2
 14670 8407 AD EA A3			lda SC+3
 14671 840A 85 89			sta @INTEGER.DIV.A+3
 14672 840C 20 90 22			jsr @INTEGER.DIV
 14673 840F A9 0A			lda #$0A
 14674 8411 85 8E			sta @INTEGER.MOD.B
 14675 8413 A9 00			lda #$00
 14676 8415 85 8F			sta @INTEGER.MOD.B+1
 14677 8417 85 90			sta @INTEGER.MOD.B+2
 14678 8419 85 91			sta @INTEGER.MOD.B+3
 14679 841B 20 AD 22			jsr @INTEGER.MOD
 14680 841E A5 8A			lda @INTEGER.MOD.RESULT
 14681 8420 8D EB A3			sta N1
 14682 8423 A5 8B			lda @INTEGER.MOD.RESULT+1
 14683 8425 8D EC A3			sta N1+1
 14684 8428 A5 8C			lda @INTEGER.MOD.RESULT+2
 14685 842A 8D ED A3			sta N1+2
 14686 842D A5 8D			lda @INTEGER.MOD.RESULT+3
 14687 842F 8D EE A3			sta N1+3
 14688
 14689 				; optimize OK (service.pas), line = 2828
 14690
 14691 8432 30 10			jmi l_2C1E
 14692 8434 0D ED A3			ora N1+2
 14693 8437 0D EC A3			ora N1+1
 14694 843A 0D EB A3			ora N1
 14695 843D F0 05			jeq l_2C1E
 14696 843F A9 01			lda #$01
 14697 8441 8D EF A3			sta F
 14698 8444			l_2C1E
 14699
 14700 				; optimize OK (service.pas), line = 2829
 14701
 14702 8444 AD EF A3			lda F
 14703 8447 F0 29			jeq l_2C31
 14704 8449 AD E3 A3			lda PX
 14705 844C 18 69 0E			add #$0E
 14706 844F 8D DA A3			sta PUT_DIGIT.PX
 14707 8452 AD E4 A3			lda PX+1
 14708 8455 69 00			adc #$00
 14709 8457 8D DB A3			sta PUT_DIGIT.PX+1
 14710 845A AD E5 A3			lda PY
 14711 845D 8D DC A3			sta PUT_DIGIT.PY
 14712 8460 AD E6 A3			lda PY+1
 14713 8463 8D DD A3			sta PUT_DIGIT.PY+1
 14714 8466 AD EB A3			lda N1
 14715 8469 8D DE A3			sta PUT_DIGIT.NUM
 14716 846C AD EC A3			lda N1+1
 14717 846F 4C 96 84			jmp l_2C45
 14718 8472			l_2C31
 14719
 14720 				; optimize OK (service.pas), line = 2830
 14721
 14722 8472 AD E3 A3			lda PX
 14723 8475 18 69 0E			add #$0E
 14724 8478 8D DA A3			sta PUT_DIGIT.PX
 14725 847B AD E4 A3			lda PX+1
 14726 847E 69 00			adc #$00
 14727 8480 8D DB A3			sta PUT_DIGIT.PX+1
 14728 8483 AD E5 A3			lda PY
 14729 8486 8D DC A3			sta PUT_DIGIT.PY
 14730 8489 AD E6 A3			lda PY+1
 14731 848C 8D DD A3			sta PUT_DIGIT.PY+1
 14732 848F A9 0A			lda #$0A
 14733 8491 8D DE A3			sta PUT_DIGIT.NUM
 14734 8494 A9 00			lda #$00
 14735 8496			l_2C45
 14736 8496 8D DF A3			sta PUT_DIGIT.NUM+1
 14737 8499 20 37 7F			jsr PUT_DIGIT
 14738
 14739 				; optimize OK (service.pas), line = 2833
 14740
 14741 849C A9 64			lda #$64
 14742 849E 85 8E			sta @INTEGER.DIV.B
 14743 84A0 A9 00			lda #$00
 14744 84A2 85 8F			sta @INTEGER.DIV.B+1
 14745 84A4 85 90			sta @INTEGER.DIV.B+2
 14746 84A6 85 91			sta @INTEGER.DIV.B+3
 14747 84A8 AD E7 A3			lda SC
 14748 84AB 85 86			sta @INTEGER.DIV.A
 14749 84AD AD E8 A3			lda SC+1
 14750 84B0 85 87			sta @INTEGER.DIV.A+1
 14751 84B2 AD E9 A3			lda SC+2
 14752 84B5 85 88			sta @INTEGER.DIV.A+2
 14753 84B7 AD EA A3			lda SC+3
 14754 84BA 85 89			sta @INTEGER.DIV.A+3
 14755 84BC 20 90 22			jsr @INTEGER.DIV
 14756 84BF A9 0A			lda #$0A
 14757 84C1 85 8E			sta @INTEGER.MOD.B
 14758 84C3 A9 00			lda #$00
 14759 84C5 85 8F			sta @INTEGER.MOD.B+1
 14760 84C7 85 90			sta @INTEGER.MOD.B+2
 14761 84C9 85 91			sta @INTEGER.MOD.B+3
 14762 84CB 20 AD 22			jsr @INTEGER.MOD
 14763 84CE A5 8A			lda @INTEGER.MOD.RESULT
 14764 84D0 8D EB A3			sta N1
 14765 84D3 A5 8B			lda @INTEGER.MOD.RESULT+1
 14766 84D5 8D EC A3			sta N1+1
 14767 84D8 A5 8C			lda @INTEGER.MOD.RESULT+2
 14768 84DA 8D ED A3			sta N1+2
 14769 84DD A5 8D			lda @INTEGER.MOD.RESULT+3
 14770 84DF 8D EE A3			sta N1+3
 14771
 14772 				; optimize OK (service.pas), line = 2834
 14773
 14774 84E2 30 10			jmi l_2C6B
 14775 84E4 0D ED A3			ora N1+2
 14776 84E7 0D EC A3			ora N1+1
 14777 84EA 0D EB A3			ora N1
 14778 84ED F0 05			jeq l_2C6B
 14779 84EF A9 01			lda #$01
 14780 84F1 8D EF A3			sta F
 14781 84F4			l_2C6B
 14782
 14783 				; optimize OK (service.pas), line = 2835
 14784
 14785 84F4 AD EF A3			lda F
 14786 84F7 F0 29			jeq l_2C7E
 14787 84F9 AD E3 A3			lda PX
 14788 84FC 18 69 15			add #$15
 14789 84FF 8D DA A3			sta PUT_DIGIT.PX
 14790 8502 AD E4 A3			lda PX+1
 14791 8505 69 00			adc #$00
 14792 8507 8D DB A3			sta PUT_DIGIT.PX+1
 14793 850A AD E5 A3			lda PY
 14794 850D 8D DC A3			sta PUT_DIGIT.PY
 14795 8510 AD E6 A3			lda PY+1
 14796 8513 8D DD A3			sta PUT_DIGIT.PY+1
 14797 8516 AD EB A3			lda N1
 14798 8519 8D DE A3			sta PUT_DIGIT.NUM
 14799 851C AD EC A3			lda N1+1
 14800 851F 4C 46 85			jmp l_2C92
 14801 8522			l_2C7E
 14802
 14803 				; optimize OK (service.pas), line = 2836
 14804
 14805 8522 AD E3 A3			lda PX
 14806 8525 18 69 15			add #$15
 14807 8528 8D DA A3			sta PUT_DIGIT.PX
 14808 852B AD E4 A3			lda PX+1
 14809 852E 69 00			adc #$00
 14810 8530 8D DB A3			sta PUT_DIGIT.PX+1
 14811 8533 AD E5 A3			lda PY
 14812 8536 8D DC A3			sta PUT_DIGIT.PY
 14813 8539 AD E6 A3			lda PY+1
 14814 853C 8D DD A3			sta PUT_DIGIT.PY+1
 14815 853F A9 0A			lda #$0A
 14816 8541 8D DE A3			sta PUT_DIGIT.NUM
 14817 8544 A9 00			lda #$00
 14818 8546			l_2C92
 14819 8546 8D DF A3			sta PUT_DIGIT.NUM+1
 14820 8549 20 37 7F			jsr PUT_DIGIT
 14821
 14822 				; optimize OK (service.pas), line = 2839
 14823
 14824 854C A9 0A			lda #$0A
 14825 854E 85 8E			sta @INTEGER.DIV.B
 14826 8550 A9 00			lda #$00
 14827 8552 85 8F			sta @INTEGER.DIV.B+1
 14828 8554 85 90			sta @INTEGER.DIV.B+2
 14829 8556 85 91			sta @INTEGER.DIV.B+3
 14830 8558 AD E7 A3			lda SC
 14831 855B 85 86			sta @INTEGER.DIV.A
 14832 855D AD E8 A3			lda SC+1
 14833 8560 85 87			sta @INTEGER.DIV.A+1
 14834 8562 AD E9 A3			lda SC+2
 14835 8565 85 88			sta @INTEGER.DIV.A+2
 14836 8567 AD EA A3			lda SC+3
 14837 856A 85 89			sta @INTEGER.DIV.A+3
 14838 856C 20 90 22			jsr @INTEGER.DIV
 14839 856F A9 0A			lda #$0A
 14840 8571 85 8E			sta @INTEGER.MOD.B
 14841 8573 A9 00			lda #$00
 14842 8575 85 8F			sta @INTEGER.MOD.B+1
 14843 8577 85 90			sta @INTEGER.MOD.B+2
 14844 8579 85 91			sta @INTEGER.MOD.B+3
 14845 857B 20 AD 22			jsr @INTEGER.MOD
 14846 857E A5 8A			lda @INTEGER.MOD.RESULT
 14847 8580 8D EB A3			sta N1
 14848 8583 A5 8B			lda @INTEGER.MOD.RESULT+1
 14849 8585 8D EC A3			sta N1+1
 14850 8588 A5 8C			lda @INTEGER.MOD.RESULT+2
 14851 858A 8D ED A3			sta N1+2
 14852 858D A5 8D			lda @INTEGER.MOD.RESULT+3
 14853 858F 8D EE A3			sta N1+3
 14854
 14855 				; optimize OK (service.pas), line = 2840
 14856
 14857 8592 AD E3 A3			lda PX
 14858 8595 18 69 1C			add #$1C
 14859 8598 8D DA A3			sta PUT_DIGIT.PX
 14860 859B AD E4 A3			lda PX+1
 14861 859E 69 00			adc #$00
 14862 85A0 8D DB A3			sta PUT_DIGIT.PX+1
 14863 85A3 AD E5 A3			lda PY
 14864 85A6 8D DC A3			sta PUT_DIGIT.PY
 14865 85A9 AD E6 A3			lda PY+1
 14866 85AC 8D DD A3			sta PUT_DIGIT.PY+1
 14867 85AF AD EB A3			lda N1
 14868 85B2 8D DE A3			sta PUT_DIGIT.NUM
 14869 85B5 AD EC A3			lda N1+1
 14870 85B8 8D DF A3			sta PUT_DIGIT.NUM+1
 14871 85BB 20 37 7F			jsr PUT_DIGIT
 14872
 14873 				; optimize OK (service.pas), line = 2844
 14874
 14875 85BE AD E3 A3			lda PX
 14876 85C1 18 69 23			add #$23
 14877 85C4 8D DA A3			sta PUT_DIGIT.PX
 14878 85C7 AD E4 A3			lda PX+1
 14879 85CA 69 00			adc #$00
 14880 85CC 8D DB A3			sta PUT_DIGIT.PX+1
 14881 85CF AD E5 A3			lda PY
 14882 85D2 8D DC A3			sta PUT_DIGIT.PY
 14883 85D5 AD E6 A3			lda PY+1
 14884 85D8 8D DD A3			sta PUT_DIGIT.PY+1
 14885 85DB A9 00			lda #$00
 14886 85DD 8D DE A3			sta PUT_DIGIT.NUM
 14887 85E0 8D DF A3			sta PUT_DIGIT.NUM+1
 14888 85E3 20 37 7F			jsr PUT_DIGIT
 14889
 14890 				; ------------------------------------------------------------
 14891
 14892 = A3E3			PX	= DATAORIGIN+$039B
 14893 = A3E5			PY	= DATAORIGIN+$039D
 14894 = A3E7			SC	= DATAORIGIN+$039F
 14895 = A3EB			N1	= DATAORIGIN+$03A3
 14896 = A3EF			F	= DATAORIGIN+$03A7
 14897
 14898 = A3E3			@VarData	= PX
 14899 = 000D			@VarDataSize	= 13
 14900
 14901 85E6			@exit
 14902 					.ifdef @new
 14903 					lda <@VarData
 14904 					sta :ztmp
 14905 					lda >@VarData
 14906 					ldy #@VarDataSize-1
 14907 					jmp @FreeMem
 14908 					els
 14909 85E6 60				rts						; ret
 14910 					eif
 14911 				.endl
 14912
 14913 85E7			.local	PLOT_LIVES					; PROCEDURE
 14914
 14915 				; optimize FAIL (0, service.pas), line = 2890
 14916
 14917 85E7 AD F0 A3			lda LIVES
 14918 85EA D0 03			bne @+
 14919 85EC CE F1 A3			dec LIVES+1
 14920 				@
 14921 85EF CE F0 A3			dec LIVES
 14922
 14923 				; optimize OK (service.pas), line = 2893
 14924
 14925 85F2 A9 00			lda #$00
 14926 85F4 8D F4 A3			sta CN
 14927
 14928 85F7			l_2CD1
 14929 				; --- ForToDoCondition
 14930 85F7 AD F4 A3			lda CN
 14931 85FA C9 08			cmp #$08
 14932 85FC 90 03 4C B7 88		jcs l_2CDF
 14933
 14934 				; optimize OK (service.pas), line = 2894
 14935
 14936 8601 A9 00			lda #$00
 14937 8603 8D F3 A3			sta Y
 14938 8606 AC 8E A1			ldy MINIVAUS.HEIGHT
 14939 8609 88				dey
 14940 860A 8C 0E 86			sty @FORTMP_2CEA_0
 14941
 14942 860D			l_2CED
 14943 				; --- ForToDoCondition
 14944 860D A9 00			lda @FORTMP_2CEA_0::#$00
 14945 860F CD F3 A3			cmp Y
 14946 8612 B0 03 4C AF 88		jcc l_2CFB
 14947
 14948 				; optimize OK (service.pas), line = 2895
 14949
 14950 8617 A9 00			lda #$00
 14951 8619 8D F2 A3			sta X
 14952 861C AC 8C A1			ldy MINIVAUS.WIDTH
 14953 861F 88				dey
 14954 8620 8C 24 86			sty @FORTMP_2D06_0
 14955
 14956 8623			l_2D09
 14957 				; --- ForToDoCondition
 14958 8623 A9 00			lda @FORTMP_2D06_0::#$00
 14959 8625 CD F2 A3			cmp X
 14960 8628 B0 03 4C A7 88		jcc l_2D17
 14961
 14962 				; optimize OK (service.pas), line = 2897
 14963
 14964 862D AD F2 A3			lda X
 14965 8630 18 69 0B			add #$0B
 14966 8633 85 9F			sta :STACKORIGIN+9
 14967 8635 A9 00			lda #$00
 14968 8637 69 00			adc #$00
 14969 8639 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14970 863B AD 8C A1			lda MINIVAUS.WIDTH
 14971 863E 85 8E			sta :ecx
 14972 8640 AD 8D A1			lda MINIVAUS.WIDTH+1
 14973 8643 85 8F			sta :ecx+1
 14974 8645 AD F4 A3			lda CN
 14975 8648 85 86			sta :eax
 14976 864A A9 00			lda #$00
 14977 864C 85 87			sta :eax+1
 14978 					.ifdef fmulinit
 14979 					fmulu_16
 14980 					els
 14981 864E 20 6C 23			imulCX_AL
 14982 					eif
 14983 8651 A5 86			lda :eax
 14984 8653 18 65 9F			add :STACKORIGIN+9
 14985 8656 8D F9 A3			sta XL
 14986 8659 A5 87			lda :eax+1
 14987 865B 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14988 865D 8D FA A3			sta XL+1
 14989
 14990 				; optimize OK (service.pas), line = 2898
 14991
 14992 8660 AD F3 A3			lda Y
 14993 8663 18 69 C0			add #$C0
 14994 8666 8D FB A3			sta YL
 14995 8669 A9 00			lda #$00
 14996 866B 69 00			adc #$00
 14997 866D 8D FC A3			sta YL+1
 14998
 14999 				; optimize OK (service.pas), line = 2900
 15000
 15001 8670 AC F9 A3			ldy XL
 15002 8673 B9 00 C4			lda adr.MODX,y
 15003 8676 8D F5 A3			sta XP
 15004 8679 A9 00			lda #$00
 15005 867B 8D F6 A3			sta XP+1
 15006
 15007 				; optimize OK (service.pas), line = 2901
 15008
 15009 867E AC FB A3			ldy YL
 15010 8681 B9 00 C3			lda adr.MODY,y
 15011 8684 85 86			sta :eax
 15012 8686 A9 00			lda #$00
 15013 8688 85 87			sta :eax+1
 15014 868A AD C1 A1			lda PATTERN.WIDTH
 15015 868D 85 8E			sta :ecx
 15016 868F AD C2 A1			lda PATTERN.WIDTH+1
 15017 8692 85 8F			sta :ecx+1
 15018 					.ifdef fmulinit
 15019 					fmulu_16
 15020 					els
 15021 8694 20 6C 23			imulCX_AL
 15022 					eif
 15023 8697 A5 86			lda :eax
 15024 8699 8D F7 A3			sta YP
 15025 869C A5 87			lda :eax+1
 15026 869E 8D F8 A3			sta YP+1
 15027
 15028 				; optimize FAIL (1, service.pas), line = 2905
 15029
 15030 86A1 E8				inx
 15031 86A2 A0 01			ldy #1
 15032 86A4 AD F4 A3			lda CN
 15033 86A7 CD F0 A3			cmp LIVES
 15034 86AA A9 00			lda #$00
 15035 86AC ED F1 A3			sbc LIVES+1
 15036 86AF 50 02			svc
 15037 86B1 49 80			eor #$80
 15038 86B3 30 01			bmi @+
 15039 86B5 88				dey
 15040 				@
 15041 86B6 94 96			sty :STACKORIGIN,x
 15042 86B8 AD 90 A1			lda MINIVAUS.OFS
 15043 86BB 18 6D F2 A3			add X
 15044 86BF 85 9F			sta :STACKORIGIN+9
 15045 86C1 AD 91 A1			lda MINIVAUS.OFS+1
 15046 86C4 69 00			adc #$00
 15047 86C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15048 86C8 AD 92 A1			lda MINIVAUS.OFS+2
 15049 86CB 69 00			adc #$00
 15050 86CD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15051 86CF AD 93 A1			lda MINIVAUS.OFS+3
 15052 86D2 69 00			adc #$00
 15053 86D4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15054 86D6 AD 8C A1			lda MINIVAUS.WIDTH
 15055 86D9 85 8E			sta :ecx
 15056 86DB AD 8D A1			lda MINIVAUS.WIDTH+1
 15057 86DE 85 8F			sta :ecx+1
 15058 86E0 AD F3 A3			lda Y
 15059 86E3 85 86			sta :eax
 15060 86E5 A9 00			lda #$00
 15061 86E7 85 87			sta :eax+1
 15062 					.ifdef fmulinit
 15063 					fmulu_16
 15064 					els
 15065 86E9 20 6C 23			imulCX_AL
 15066 					eif
 15067 86EC A5 9F			lda :STACKORIGIN+9
 15068 86EE 18 65 86			add :eax
 15069 86F1 8D 68 A2			sta GETBYTE.SRC
 15070 86F4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15071 86F6 65 87			adc :eax+1
 15072 86F8 8D 69 A2			sta GETBYTE.SRC+1
 15073 86FB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15074 86FD 65 88			adc :eax+2
 15075 86FF 8D 6A A2			sta GETBYTE.SRC+2
 15076 8702 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15077 8704 65 89			adc :eax+3
 15078 8706 8D 6B A2			sta GETBYTE.SRC+3
 15079 8709 20 4E 3D			jsr GETBYTE
 15080 870C CA				dex
 15081 870D A0 01			ldy #1
 15082 870F AD 6C A2			lda GETBYTE.RESULT
 15083 8712 D0 01			bne @+
 15084 8714 88				dey
 15085 				@
 15086 8715 98				tya
 15087 8716 35 97			and :STACKORIGIN+1,x
 15088 8718 F0 5D			jeq l_2D7A
 15089
 15090 				; optimize OK (service.pas), line = 2908
 15091
 15092 871A AD 90 A1			lda MINIVAUS.OFS
 15093 871D 18 6D F2 A3			add X
 15094 8721 85 9F			sta :STACKORIGIN+9
 15095 8723 AD 91 A1			lda MINIVAUS.OFS+1
 15096 8726 69 00			adc #$00
 15097 8728 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15098 872A AD 92 A1			lda MINIVAUS.OFS+2
 15099 872D 69 00			adc #$00
 15100 872F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15101 8731 AD 93 A1			lda MINIVAUS.OFS+3
 15102 8734 69 00			adc #$00
 15103 8736 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15104 8738 AD 8C A1			lda MINIVAUS.WIDTH
 15105 873B 85 8E			sta :ecx
 15106 873D AD 8D A1			lda MINIVAUS.WIDTH+1
 15107 8740 85 8F			sta :ecx+1
 15108 8742 AD F3 A3			lda Y
 15109 8745 85 86			sta :eax
 15110 8747 A9 00			lda #$00
 15111 8749 85 87			sta :eax+1
 15112 					.ifdef fmulinit
 15113 					fmulu_16
 15114 					els
 15115 874B 20 6C 23			imulCX_AL
 15116 					eif
 15117 874E A5 9F			lda :STACKORIGIN+9
 15118 8750 18 65 86			add :eax
 15119 8753 8D 68 A2			sta GETBYTE.SRC
 15120 8756 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15121 8758 65 87			adc :eax+1
 15122 875A 8D 69 A2			sta GETBYTE.SRC+1
 15123 875D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15124 875F 65 88			adc :eax+2
 15125 8761 8D 6A A2			sta GETBYTE.SRC+2
 15126 8764 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15127 8766 65 89			adc :eax+3
 15128 8768 8D 6B A2			sta GETBYTE.SRC+3
 15129 876B 20 4E 3D			jsr GETBYTE
 15130 876E AD 6C A2			lda GETBYTE.RESULT
 15131 8771 8D FE A3			sta CL
 15132 				; optimize OK (service.pas), line = 2911
 15133 				; optimize OK (service.pas), line = 2914
 15134 8774 4C 11 88			jmp l_2DBC
 15135 8777			l_2D7A
 15136
 15137 				; optimize OK (service.pas), line = 2923
 15138
 15139 8777 AD 40 A1			lda PLAYSCREEN.OFS
 15140 877A 18 6D F9 A3			add XL
 15141 877E 85 9F			sta :STACKORIGIN+9
 15142 8780 AD 41 A1			lda PLAYSCREEN.OFS+1
 15143 8783 6D FA A3			adc XL+1
 15144 8786 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15145 8788 AD 42 A1			lda PLAYSCREEN.OFS+2
 15146 878B 69 00			adc #$00
 15147 878D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15148 878F AD 43 A1			lda PLAYSCREEN.OFS+3
 15149 8792 69 00			adc #$00
 15150 8794 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15151 8796 AC FB A3			ldy YL
 15152 8799 A5 9F			lda :STACKORIGIN+9
 15153 879B 18 79 00 C0			add adr.ROW,y
 15154 879F 8D 68 A2			sta GETBYTE.SRC
 15155 87A2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15156 87A4 79 00 C1			adc adr.ROW+256,y
 15157 87A7 8D 69 A2			sta GETBYTE.SRC+1
 15158 87AA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15159 87AC 69 00			adc #$00
 15160 87AE 8D 6A A2			sta GETBYTE.SRC+2
 15161 87B1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15162 87B3 69 00			adc #$00
 15163 87B5 8D 6B A2			sta GETBYTE.SRC+3
 15164 87B8 20 4E 3D			jsr GETBYTE
 15165 87BB AD 6C A2			lda GETBYTE.RESULT
 15166 87BE 29 80			and #$80
 15167 87C0 8D FD A3			sta SHADOW
 15168
 15169 				; optimize OK (service.pas), line = 2926
 15170
 15171 87C3 AD C5 A1			lda PATTERN.OFS
 15172 87C6 18 6D F5 A3			add XP
 15173 87CA 85 9F			sta :STACKORIGIN+9
 15174 87CC AD C6 A1			lda PATTERN.OFS+1
 15175 87CF 6D F6 A3			adc XP+1
 15176 87D2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15177 87D4 AD C7 A1			lda PATTERN.OFS+2
 15178 87D7 69 00			adc #$00
 15179 87D9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15180 87DB AD C8 A1			lda PATTERN.OFS+3
 15181 87DE 69 00			adc #$00
 15182 87E0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15183 87E2 A5 9F			lda :STACKORIGIN+9
 15184 87E4 18 6D F7 A3			add YP
 15185 87E8 8D 68 A2			sta GETBYTE.SRC
 15186 87EB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15187 87ED 6D F8 A3			adc YP+1
 15188 87F0 8D 69 A2			sta GETBYTE.SRC+1
 15189 87F3 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15190 87F5 69 00			adc #$00
 15191 87F7 8D 6A A2			sta GETBYTE.SRC+2
 15192 87FA A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15193 87FC 69 00			adc #$00
 15194 87FE 8D 6B A2			sta GETBYTE.SRC+3
 15195 8801 20 4E 3D			jsr GETBYTE
 15196 8804 E8				inx
 15197 8805 AD 6C A2			lda GETBYTE.RESULT
 15198 8808 29 7F			and #$7F
 15199 880A 0D FD A3			ora SHADOW
 15200 880D 8D FE A3			sta CL
 15201 8810 CA				dex
 15202 8811			l_2DBC
 15203
 15204 				; optimize OK (service.pas), line = 2929
 15205
 15206 8811 AD F9 A3			lda XL
 15207 8814 85 A0			sta :STACKORIGIN+10
 15208 8816 A9 50			lda #$50
 15209 8818 18 6D FA A3			add XL+1
 15210 881C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15211 881E A9 00			lda #$00
 15212 8820 69 00			adc #$00
 15213 8822 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15214 8824 A9 00			lda #$00
 15215 8826 69 00			adc #$00
 15216 8828 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15217 882A AC FB A3			ldy YL
 15218 882D A5 A0			lda :STACKORIGIN+10
 15219 882F 18 79 00 C0			add adr.ROW,y
 15220 8833 8D 63 A2			sta PUTBYTE.DST
 15221 8836 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15222 8838 79 00 C1			adc adr.ROW+256,y
 15223 883B 8D 64 A2			sta PUTBYTE.DST+1
 15224 883E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15225 8840 69 00			adc #$00
 15226 8842 8D 65 A2			sta PUTBYTE.DST+2
 15227 8845 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15228 8847 69 00			adc #$00
 15229 8849 8D 66 A2			sta PUTBYTE.DST+3
 15230 884C AD FE A3			lda CL
 15231 884F 8D 67 A2			sta PUTBYTE.V
 15232 8852 20 26 3D			jsr PUTBYTE
 15233
 15234 				; optimize OK (service.pas), line = 2932
 15235
 15236 8855 AD 40 A1			lda PLAYSCREEN.OFS
 15237 8858 18 6D F9 A3			add XL
 15238 885C 85 A0			sta :STACKORIGIN+10
 15239 885E AD 41 A1			lda PLAYSCREEN.OFS+1
 15240 8861 6D FA A3			adc XL+1
 15241 8864 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15242 8866 AD 42 A1			lda PLAYSCREEN.OFS+2
 15243 8869 69 00			adc #$00
 15244 886B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15245 886D AD 43 A1			lda PLAYSCREEN.OFS+3
 15246 8870 69 00			adc #$00
 15247 8872 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15248 8874 AC FB A3			ldy YL
 15249 8877 A5 A0			lda :STACKORIGIN+10
 15250 8879 18 79 00 C0			add adr.ROW,y
 15251 887D 8D 63 A2			sta PUTBYTE.DST
 15252 8880 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15253 8882 79 00 C1			adc adr.ROW+256,y
 15254 8885 8D 64 A2			sta PUTBYTE.DST+1
 15255 8888 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15256 888A 69 00			adc #$00
 15257 888C 8D 65 A2			sta PUTBYTE.DST+2
 15258 888F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15259 8891 69 00			adc #$00
 15260 8893 8D 66 A2			sta PUTBYTE.DST+3
 15261 8896 AD FE A3			lda CL
 15262 8899 8D 67 A2			sta PUTBYTE.V
 15263 889C 20 26 3D			jsr PUTBYTE
 15264
 15265 				; --- ForToDoEpilog
 15266 889F EE F2 A3			inc X
 15267 88A2 F0 03 4C 23 86		jne l_2D09
 15268 88A7			l_2D17
 15269
 15270 				; --- ForToDoEpilog
 15271 88A7 EE F3 A3			inc Y
 15272 88AA F0 03 4C 0D 86		jne l_2CED
 15273 88AF			l_2CFB
 15274
 15275 				; --- ForToDoEpilog
 15276 88AF EE F4 A3			inc CN
 15277 88B2 F0 03 4C F7 85		jne l_2CD1
 15278 88B7			l_2CDF
 15279
 15280 				; ------------------------------------------------------------
 15281
 15282 = A3F0			LIVES	= DATAORIGIN+$03A8
 15283 = 000B			XLIVES	= $0B
 15284 = 00C0			YLIVES	= $C0
 15285 = A3F2			X	= DATAORIGIN+$03AA
 15286 = A3F3			Y	= DATAORIGIN+$03AB
 15287 = A3F4			CN	= DATAORIGIN+$03AC
 15288 = A3F5			XP	= DATAORIGIN+$03AD
 15289 = A3F7			YP	= DATAORIGIN+$03AF
 15290 = A3F9			XL	= DATAORIGIN+$03B1
 15291 = A3FB			YL	= DATAORIGIN+$03B3
 15292 = A3FD			SHADOW	= DATAORIGIN+$03B5
 15293 = A3FE			CL	= DATAORIGIN+$03B6
 15294
 15295 = A3F0			@VarData	= LIVES
 15296 = 000F			@VarDataSize	= 15
 15297
 15298 88B7			@exit
 15299 					.ifdef @new
 15300 					lda <@VarData
 15301 					sta :ztmp
 15302 					lda >@VarData
 15303 					ldy #@VarDataSize-1
 15304 					jmp @FreeMem
 15305 					els
 15306 88B7 60				rts						; ret
 15307 					eif
 15308 				.endl
 15309
 15310 88B8			.local	PLACE_FIRE					; PROCEDURE
 15311
 15312 				; optimize OK (service.pas), line = 2943
 15313
 15314 88B8 AC 2B A2			ldy FIRE.Y
 15315 88BB AD 2A A2			lda FIRE.X
 15316 88BE 18 79 00 C0			add adr.ROW,y
 15317 88C2 8D 33 A2			sta HLP
 15318 88C5 A9 00			lda #$00
 15319 88C7 79 00 C1			adc adr.ROW+256,y
 15320 88CA 8D 34 A2			sta HLP+1
 15321
 15322 				; optimize OK (service.pas), line = 2945
 15323
 15324 88CD AD 33 A2			lda HLP
 15325 88D0 8D 4D A2			sta BLITZERO.DST
 15326 88D3 A9 50			lda #$50
 15327 88D5 18 6D 34 A2			add HLP+1
 15328 88D9 8D 4E A2			sta BLITZERO.DST+1
 15329 88DC A9 00			lda #$00
 15330 88DE 69 00			adc #$00
 15331 88E0 8D 4F A2			sta BLITZERO.DST+2
 15332 88E3 A9 00			lda #$00
 15333 88E5 69 00			adc #$00
 15334 88E7 8D 50 A2			sta BLITZERO.DST+3
 15335 88EA AD A8 A1			lda SHOOTS.OFS
 15336 88ED 8D 49 A2			sta BLITZERO.SRC
 15337 88F0 AD A9 A1			lda SHOOTS.OFS+1
 15338 88F3 8D 4A A2			sta BLITZERO.SRC+1
 15339 88F6 AD AA A1			lda SHOOTS.OFS+2
 15340 88F9 8D 4B A2			sta BLITZERO.SRC+2
 15341 88FC AD AB A1			lda SHOOTS.OFS+3
 15342 88FF 8D 4C A2			sta BLITZERO.SRC+3
 15343 8902 AD A4 A1			lda SHOOTS.WIDTH
 15344 8905 8D 51 A2			sta BLITZERO.W
 15345 8908 AD A5 A1			lda SHOOTS.WIDTH+1
 15346 890B 8D 52 A2			sta BLITZERO.W+1
 15347 890E AD A6 A1			lda SHOOTS.HEIGHT
 15348 8911 8D 53 A2			sta BLITZERO.H
 15349 8914 20 FD 3B			jsr BLITZERO
 15350
 15351 8917			@exit
 15352 					.ifdef @new
 15353 					lda <@VarData
 15354 					sta :ztmp
 15355 					lda >@VarData
 15356 					ldy #@VarDataSize-1
 15357 					jmp @FreeMem
 15358 					els
 15359 8917 60				rts						; ret
 15360 					eif
 15361 				.endl
 15362
 15363 8918			.local	REMOVE_FIRE					; PROCEDURE
 15364
 15365 				; optimize OK (service.pas), line = 2963
 15366
 15367 8918 AC 2B A2			ldy FIRE.Y
 15368 891B AD 2A A2			lda FIRE.X
 15369 891E 18 79 00 C0			add adr.ROW,y
 15370 8922 8D 33 A2			sta HLP
 15371 8925 A9 00			lda #$00
 15372 8927 79 00 C1			adc adr.ROW+256,y
 15373 892A 8D 34 A2			sta HLP+1
 15374
 15375 				; optimize OK (service.pas), line = 2965
 15376
 15377 892D AD 33 A2			lda HLP
 15378 8930 8D 42 A2			sta BLITBOX.DST
 15379 8933 A9 50			lda #$50
 15380 8935 18 6D 34 A2			add HLP+1
 15381 8939 8D 43 A2			sta BLITBOX.DST+1
 15382 893C A9 00			lda #$00
 15383 893E 69 00			adc #$00
 15384 8940 8D 44 A2			sta BLITBOX.DST+2
 15385 8943 A9 00			lda #$00
 15386 8945 69 00			adc #$00
 15387 8947 8D 45 A2			sta BLITBOX.DST+3
 15388 894A AD 40 A1			lda PLAYSCREEN.OFS
 15389 894D 18 6D 33 A2			add HLP
 15390 8951 8D 3E A2			sta BLITBOX.SRC
 15391 8954 AD 41 A1			lda PLAYSCREEN.OFS+1
 15392 8957 6D 34 A2			adc HLP+1
 15393 895A 8D 3F A2			sta BLITBOX.SRC+1
 15394 895D AD 42 A1			lda PLAYSCREEN.OFS+2
 15395 8960 69 00			adc #$00
 15396 8962 8D 40 A2			sta BLITBOX.SRC+2
 15397 8965 AD 43 A1			lda PLAYSCREEN.OFS+3
 15398 8968 69 00			adc #$00
 15399 896A 8D 41 A2			sta BLITBOX.SRC+3
 15400 896D AD A4 A1			lda SHOOTS.WIDTH
 15401 8970 8D 46 A2			sta BLITBOX.W
 15402 8973 AD A5 A1			lda SHOOTS.WIDTH+1
 15403 8976 8D 47 A2			sta BLITBOX.W+1
 15404 8979 AD A6 A1			lda SHOOTS.HEIGHT
 15405 897C 8D 48 A2			sta BLITBOX.H
 15406 897F 20 7C 3B			jsr BLITBOX
 15407
 15408 8982			@exit
 15409 					.ifdef @new
 15410 					lda <@VarData
 15411 					sta :ztmp
 15412 					lda >@VarData
 15413 					ldy #@VarDataSize-1
 15414 					jmp @FreeMem
 15415 					els
 15416 8982 60				rts						; ret
 15417 					eif
 15418 				.endl
 15419
 15420 8983			.local	CHECK_FIRE					; PROCEDURE
 15421
 15422 				; optimize OK (service.pas), line = 2981
 15423
 15424 8983 AD 2D A2			lda FIRE.AVL
 15425 8986 D0 03 4C E5 8A		jeq l_2E6C
 15426
 15427 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2983
 15428
 15429 898B 20 73 3B			jsr MOUSECLICK
 15430 898E E8				inx
 15431 898F E8				inx
 15432 8990 A0 01			ldy #1
 15433 8992 AD 3D A2			lda MOUSECLICK.RESULT
 15434 8995 C9 01			cmp #$01
 15435 8997 F0 01			beq @+
 15436 8999 88				dey
 15437 				@
 15438 899A 98				tya
 15439 899B 2D 2D A2			and FIRE.AVL
 15440 899E 95 95			sta :STACKORIGIN-1,x
 15441 89A0 CA				dex
 15442 89A1 CA				dex
 15443 89A2 A0 01			ldy #1
 15444 89A4 AD 2C A2			lda FIRE.SHOT
 15445 89A7 F0 01			beq @+
 15446 89A9 88				dey
 15447 				@
 15448 89AA 98				tya
 15449 89AB 35 97			and :STACKORIGIN+1,x
 15450 89AD F0 3A			jeq l_2E8C
 15451
 15452 				; optimize OK (service.pas), line = 2985
 15453
 15454 89AF AD BC A1			lda VAUS.WIDTH
 15455 89B2 38 ED A4 A1			sub SHOOTS.WIDTH
 15456 89B6 4A				lsr @
 15457 89B7 18 6D B4 A1			add VAUS.X
 15458 89BB 8D 2A A2			sta FIRE.X
 15459
 15460 				; optimize OK (service.pas), line = 2986
 15461
 15462 89BE AD B5 A1			lda VAUS.Y
 15463 89C1 38 ED A6 A1			sub SHOOTS.HEIGHT
 15464 89C5 8D 2B A2			sta FIRE.Y
 15465
 15466 				; optimize OK (service.pas), line = 2987
 15467
 15468 89C8 A9 01			lda #$01
 15469 89CA 8D 2C A2			sta FIRE.SHOT
 15470
 15471 				; optimize OK (service.pas), line = 2988
 15472
 15473 89CD A9 00			lda #$00
 15474 89CF 8D 2E A2			sta FIRE.NW
 15475
 15476 				; optimize OK (service.pas), line = 2989
 15477
 15478 89D2 A9 BC			lda #$BC
 15479 89D4 8D 30 A1			sta BALL_BLOCK_SOUND.A
 15480 89D7 A9 02			lda #$02
 15481 89D9 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 15482 89DC A9 05			lda #$05
 15483 89DE 8D 32 A1			sta BALL_BLOCK_SOUND.B
 15484 89E1 A9 00			lda #$00
 15485 89E3 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 15486 89E6 20 F1 3A			jsr BALL_BLOCK_SOUND
 15487 89E9			l_2E8C
 15488
 15489 				; optimize OK (service.pas), line = 2992
 15490
 15491 89E9 AD 2C A2			lda FIRE.SHOT
 15492 89EC D0 03 4C E5 8A		jeq l_2EC6
 15493
 15494 				; optimize OK (service.pas), line = 2994
 15495
 15496 89F1 AD 2E A2			lda FIRE.NW
 15497 89F4 F0 03			jeq l_2ED3
 15498 89F6 20 18 89			jsr REMOVE_FIRE
 15499 89F9			l_2ED3
 15500
 15501 				; optimize OK (service.pas), line = 2995
 15502
 15503 89F9 A9 01			lda #$01
 15504 89FB 8D 2E A2			sta FIRE.NW
 15505
 15506 				; optimize OK (service.pas), line = 2997
 15507
 15508 89FE AD 2B A2			lda FIRE.Y
 15509 8A01 38 E9 04			sub #$04
 15510 8A04 8D 2B A2			sta FIRE.Y
 15511
 15512 				; optimize OK (service.pas), line = 2998
 15513
 15514 8A07 C9 16			cmp #$16
 15515 8A09 B0 08			jcs l_2EEE
 15516 8A0B A9 00			lda #$00
 15517 8A0D 8D 2C A2			sta FIRE.SHOT
 15518 8A10 4C E5 8A			jmp l_2EFC
 15519 8A13			l_2EEE
 15520
 15521 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3001
 15522
 15523 8A13 20 B8 88			jsr PLACE_FIRE
 15524
 15525 				; optimize OK (service.pas), line = 3003
 15526
 15527 8A16 AD 2B A2			lda FIRE.Y
 15528 8A19 38 E9 16			sub #$16
 15529 8A1C 10 03 4C E5 8A		jmi l_2F23
 15530 8A21 AD 2B A2			lda FIRE.Y
 15531 8A24 38 E9 16			sub #$16
 15532 8A27 85 A0			sta :STACKORIGIN+10
 15533 8A29 A9 00			lda #$00
 15534 8A2B E9 00			sbc #$00
 15535 8A2D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15536 8A2F A5 A0			lda :STACKORIGIN+10
 15537 8A31 C9 78			cmp #$78
 15538 8A33 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15539 8A35 E9 00			sbc #$00
 15540 8A37 50 02			svc
 15541 8A39 49 80			eor #$80
 15542 8A3B 30 03 4C E5 8A		jpl l_2F23
 15543
 15544 				; optimize OK (service.pas), line = 3005
 15545
 15546 8A40 AD 2A A2			lda FIRE.X
 15547 8A43 38 E9 09			sub #$09
 15548 8A46 4A				lsr @
 15549 8A47 4A				lsr @
 15550 8A48 4A				lsr @
 15551 8A49 4A				lsr @
 15552 8A4A 8D 01 A4			sta X1
 15553 8A4D A9 00			lda #$00
 15554 8A4F 8D 02 A4			sta X1+1
 15555
 15556 				; optimize OK (service.pas), line = 3006
 15557
 15558 8A52 AD 2B A2			lda FIRE.Y
 15559 8A55 38 E9 16			sub #$16
 15560 8A58 4A				lsr @
 15561 8A59 4A				lsr @
 15562 8A5A 4A				lsr @
 15563 8A5B 8D 05 A4			sta Y1
 15564 8A5E A9 00			lda #$00
 15565 8A60 8D 06 A4			sta Y1+1
 15566
 15567 				; optimize OK (service.pas), line = 3008
 15568
 15569 8A63 AD 2A A2			lda FIRE.X
 15570 8A66 18 6D A4 A1			add SHOOTS.WIDTH
 15571 8A6A 38 E9 09			sub #$09
 15572 8A6D 4A				lsr @
 15573 8A6E 4A				lsr @
 15574 8A6F 4A				lsr @
 15575 8A70 4A				lsr @
 15576 8A71 8D 03 A4			sta X2
 15577 8A74 A9 00			lda #$00
 15578 8A76 8D 04 A4			sta X2+1
 15579
 15580 				; optimize OK (service.pas), line = 3009
 15581
 15582 8A79 AD 05 A4			lda Y1
 15583 8A7C 8D 07 A4			sta Y2
 15584 8A7F AD 06 A4			lda Y1+1
 15585 8A82 8D 08 A4			sta Y2+1
 15586
 15587 				; optimize OK (service.pas), line = 3011
 15588
 15589 8A85 AD 05 A4			lda Y1
 15590 8A88 0A				asl @
 15591 8A89 0A				asl @
 15592 8A8A 0A				asl @
 15593 8A8B 0A				asl @
 15594 8A8C 18 6D 01 A4			add X1
 15595 8A90 A8				tay
 15596 8A91 B9 00 DB			lda adr.WALL,y
 15597 8A94 D0 11			jne l_2F8Cx
 15598 8A96 AD 07 A4			lda Y2
 15599 8A99 0A				asl @
 15600 8A9A 0A				asl @
 15601 8A9B 0A				asl @
 15602 8A9C 0A				asl @
 15603 8A9D 18 6D 03 A4			add X2
 15604 8AA1 A8				tay
 15605 8AA2 B9 00 DB			lda adr.WALL,y
 15606 8AA5 F0 3E			jeq l_2F8C
 15607 8AA7			l_2F8Cx
 15608
 15609 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3013
 15610
 15611 8AA7 20 18 89			jsr REMOVE_FIRE
 15612
 15613 				; optimize OK (service.pas), line = 3014
 15614
 15615 8AAA A9 00			lda #$00
 15616 8AAC 8D 2C A2			sta FIRE.SHOT
 15617
 15618 				; optimize OK (service.pas), line = 3016
 15619
 15620 8AAF AD 01 A4			lda X1
 15621 8AB2 8D 69 A3			sta SHOOT_BLOCK_WITH_FIRE.XB
 15622 8AB5 AD 02 A4			lda X1+1
 15623 8AB8 8D 6A A3			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15624 8ABB AD 05 A4			lda Y1
 15625 8ABE 8D 6B A3			sta SHOOT_BLOCK_WITH_FIRE.YB
 15626 8AC1 AD 06 A4			lda Y1+1
 15627 8AC4 8D 6C A3			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15628 8AC7 20 05 69			jsr SHOOT_BLOCK_WITH_FIRE
 15629
 15630 				; optimize OK (service.pas), line = 3017
 15631
 15632 8ACA AD 03 A4			lda X2
 15633 8ACD 8D 69 A3			sta SHOOT_BLOCK_WITH_FIRE.XB
 15634 8AD0 AD 04 A4			lda X2+1
 15635 8AD3 8D 6A A3			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15636 8AD6 AD 07 A4			lda Y2
 15637 8AD9 8D 6B A3			sta SHOOT_BLOCK_WITH_FIRE.YB
 15638 8ADC AD 08 A4			lda Y2+1
 15639 8ADF 8D 6C A3			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15640 8AE2 20 05 69			jsr SHOOT_BLOCK_WITH_FIRE
 15641 8AE5			l_2EFC
 15642 8AE5			l_2F8C
 15643 8AE5			l_2F23
 15644 8AE5			l_2EC6
 15645 8AE5			l_2E6C
 15646
 15647 				; ------------------------------------------------------------
 15648
 15649 = A401			X1	= DATAORIGIN+$03B9
 15650 = A403			X2	= DATAORIGIN+$03BB
 15651 = A405			Y1	= DATAORIGIN+$03BD
 15652 = A407			Y2	= DATAORIGIN+$03BF
 15653
 15654 = A401			@VarData	= X1
 15655 = 0008			@VarDataSize	= 8
 15656
 15657 8AE5			@exit
 15658 					.ifdef @new
 15659 					lda <@VarData
 15660 					sta :ztmp
 15661 					lda >@VarData
 15662 					ldy #@VarDataSize-1
 15663 					jmp @FreeMem
 15664 					els
 15665 8AE5 60				rts						; ret
 15666 					eif
 15667 				.endl
 15668
 15669 8AE6			.local	REMOVE_FLUX					; PROCEDURE
 15670
 15671 				; optimize OK (service.pas), line = 3029
 15672
 15673 8AE6 AD B0 C0			lda adr.ROW+$B0
 15674 8AE9 18 69 D9			add #$D9
 15675 8AEC 8D 33 A2			sta HLP
 15676 8AEF AD B0 C1			lda adr.ROW+256+$B0
 15677 8AF2 69 00			adc #$00
 15678 8AF4 8D 34 A2			sta HLP+1
 15679
 15680 				; optimize OK (service.pas), line = 3031
 15681
 15682 8AF7 AD 33 A2			lda HLP
 15683 8AFA 8D 42 A2			sta BLITBOX.DST
 15684 8AFD A9 50			lda #$50
 15685 8AFF 18 6D 34 A2			add HLP+1
 15686 8B03 8D 43 A2			sta BLITBOX.DST+1
 15687 8B06 A9 00			lda #$00
 15688 8B08 69 00			adc #$00
 15689 8B0A 8D 44 A2			sta BLITBOX.DST+2
 15690 8B0D A9 00			lda #$00
 15691 8B0F 69 00			adc #$00
 15692 8B11 8D 45 A2			sta BLITBOX.DST+3
 15693 8B14 AD 40 A1			lda PLAYSCREEN.OFS
 15694 8B17 18 6D 33 A2			add HLP
 15695 8B1B 8D 3E A2			sta BLITBOX.SRC
 15696 8B1E AD 41 A1			lda PLAYSCREEN.OFS+1
 15697 8B21 6D 34 A2			adc HLP+1
 15698 8B24 8D 3F A2			sta BLITBOX.SRC+1
 15699 8B27 AD 42 A1			lda PLAYSCREEN.OFS+2
 15700 8B2A 69 00			adc #$00
 15701 8B2C 8D 40 A2			sta BLITBOX.SRC+2
 15702 8B2F AD 43 A1			lda PLAYSCREEN.OFS+3
 15703 8B32 69 00			adc #$00
 15704 8B34 8D 41 A2			sta BLITBOX.SRC+3
 15705 8B37 A9 08			lda #$08
 15706 8B39 8D 46 A2			sta BLITBOX.W
 15707 8B3C A9 00			lda #$00
 15708 8B3E 8D 47 A2			sta BLITBOX.W+1
 15709 8B41 A9 14			lda #$14
 15710 8B43 8D 48 A2			sta BLITBOX.H
 15711 8B46 20 7C 3B			jsr BLITBOX
 15712
 15713 8B49			@exit
 15714 					.ifdef @new
 15715 					lda <@VarData
 15716 					sta :ztmp
 15717 					lda >@VarData
 15718 					ldy #@VarDataSize-1
 15719 					jmp @FreeMem
 15720 					els
 15721 8B49 60				rts						; ret
 15722 					eif
 15723 				.endl
 15724
 15725 8B4A			.local	CHECK_FLUX					; PROCEDURE
 15726
 15727 				; optimize OK (service.pas), line = 3045
 15728
 15729 8B4A AD 31 A2			lda SCRFLUXCNT
 15730 8B4D 8D 0A A4			sta FX
 15731
 15732 				; optimize OK (service.pas), line = 3047
 15733
 15734 8B50 AD 30 A2			lda SCRFLUX
 15735 8B53 D0 03 4C E6 8B		jeq l_2FD7
 15736
 15737 				; optimize OK (service.pas), line = 3050
 15738
 15739 8B58 A9 00			lda #$00
 15740 8B5A 8D 09 A4			sta Y
 15741
 15742 8B5D			l_2FE1
 15743 				; --- ForToDoCondition
 15744 8B5D AC 09 A4			ldy Y
 15745 8B60 C0 14			cpy #$14
 15746 8B62 B0 73			jcs l_2FEF
 15747
 15748 				; optimize OK (service.pas), line = 3052
 15749
 15750 8B64 A9 D9			lda #$D9
 15751 8B66 79 B0 C0			adc adr.ROW+$B0,y
 15752 8B69 8D 5D A2			sta BLITROW.DST
 15753 8B6C A9 50			lda #$50
 15754 8B6E 79 B0 C1			adc adr.ROW+256+$B0,y
 15755 8B71 8D 5E A2			sta BLITROW.DST+1
 15756 8B74 A9 00			lda #$00
 15757 8B76 69 00			adc #$00
 15758 8B78 8D 5F A2			sta BLITROW.DST+2
 15759 8B7B A9 00			lda #$00
 15760 8B7D 69 00			adc #$00
 15761 8B7F 8D 60 A2			sta BLITROW.DST+3
 15762 8B82 AD 09 A4			lda Y
 15763 8B85 18 6D 0A A4			add FX
 15764 8B89 85 A2			sta :STACKORIGIN+12
 15765 8B8B A9 00			lda #$00
 15766 8B8D 69 00			adc #$00
 15767 8B8F 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15768 8B91 A9 00			lda #$00
 15769 8B93 06 A2			asl :STACKORIGIN+12
 15770 8B95 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15771 8B97 2A				rol @
 15772 8B98 06 A2			asl :STACKORIGIN+12
 15773 8B9A 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15774 8B9C 2A				rol @
 15775 8B9D 06 A2			asl :STACKORIGIN+12
 15776 8B9F 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15777 8BA1 2A				rol @
 15778 8BA2 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15779 8BA4 AD B0 A1			lda FLUX.OFS
 15780 8BA7 18 65 A2			add :STACKORIGIN+12
 15781 8BAA 8D 59 A2			sta BLITROW.SRC
 15782 8BAD AD B1 A1			lda FLUX.OFS+1
 15783 8BB0 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15784 8BB2 8D 5A A2			sta BLITROW.SRC+1
 15785 8BB5 AD B2 A1			lda FLUX.OFS+2
 15786 8BB8 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15787 8BBA 8D 5B A2			sta BLITROW.SRC+2
 15788 8BBD AD B3 A1			lda FLUX.OFS+3
 15789 8BC0 69 00			adc #$00
 15790 8BC2 8D 5C A2			sta BLITROW.SRC+3
 15791 8BC5 A9 08			lda #$08
 15792 8BC7 8D 61 A2			sta BLITROW.SIZE
 15793 8BCA A9 00			lda #$00
 15794 8BCC 8D 62 A2			sta BLITROW.SIZE+1
 15795 8BCF 20 B4 3C			jsr BLITROW
 15796
 15797 				; --- ForToDoEpilog
 15798 8BD2 EE 09 A4			inc Y
 15799 8BD5 D0 86			jne l_2FE1
 15800 8BD7			l_2FEF
 15801
 15802 				; optimize FAIL (0, service.pas), line = 3054
 15803
 15804 8BD7 EE 31 A2			inc SCRFLUXCNT
 15805
 15806 				; optimize OK (service.pas), line = 3055
 15807
 15808 8BDA AD 31 A2			lda SCRFLUXCNT
 15809 8BDD C9 15			cmp #$15
 15810 8BDF 90 05			jcc l_302E
 15811 8BE1 A9 00			lda #$00
 15812 8BE3 8D 31 A2			sta SCRFLUXCNT
 15813 8BE6			l_302E
 15814 8BE6			l_2FD7
 15815
 15816 				; ------------------------------------------------------------
 15817
 15818 = A409			Y	= DATAORIGIN+$03C1
 15819 = A40A			FX	= DATAORIGIN+$03C2
 15820
 15821 = A409			@VarData	= Y
 15822 = 0002			@VarDataSize	= 2
 15823
 15824 8BE6			@exit
 15825 					.ifdef @new
 15826 					lda <@VarData
 15827 					sta :ztmp
 15828 					lda >@VarData
 15829 					ldy #@VarDataSize-1
 15830 					jmp @FreeMem
 15831 					els
 15832 8BE6 60				rts						; ret
 15833 					eif
 15834 				.endl
 15835
 15836 8BE7			.local	VAUS_OUT					; PROCEDURE
 15837
 15838 				; optimize FAIL ('NOSOUND', service.pas), line = 3063
 15839
 15840 8BE7 20 76 3D			jsr NOSOUND
 15841
 15842 				; optimize OK (service.pas), line = 3065
 15843
 15844 8BEA AD 10 A2			lda CUR_PLAYER
 15845 8BED 0A				asl @
 15846 8BEE 0A				asl @
 15847 8BEF A8				tay
 15848 8BF0 B9 F5 A1			lda adr.SCORE.PLAYER,y
 15849 8BF3 18 69 10			add #$10
 15850 8BF6 99 F5 A1			sta adr.SCORE.PLAYER,y
 15851 8BF9 B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 15852 8BFC 69 27			adc #$27
 15853 8BFE 99 F6 A1			sta adr.SCORE.PLAYER+1,y
 15854 8C01 B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 15855 8C04 69 00			adc #$00
 15856 8C06 99 F7 A1			sta adr.SCORE.PLAYER+2,y
 15857 8C09 B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 15858 8C0C 69 00			adc #$00
 15859 8C0E 99 F8 A1			sta adr.SCORE.PLAYER+3,y
 15860
 15861 				; optimize OK (service.pas), line = 3066
 15862
 15863 8C11 A9 00			lda #$00
 15864 8C13 8D F3 A1			sta REMAIN_BLK
 15865
 15866 				; optimize OK (service.pas), line = 3068
 15867
 15868 8C16 AD B4 A1			lda VAUS.X
 15869 8C19 8D 0F A4			sta Z
 15870 8C1C A9 00			lda #$00
 15871 8C1E 8D 10 A4			sta Z+1
 15872
 15873 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3070
 15874
 15875 8C21 20 0A 45			jsr WAIT_VBL
 15876
 15877 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3071
 15878
 15879 8C24 20 5E 53			jsr REMOVE_VAUS
 15880
 15881 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3072
 15882
 15883 8C27 20 D5 53			jsr PLACE_VAUS
 15884
 15885 				; optimize OK (service.pas), line = 3074
 15886
 15887 8C2A AD 0F A4			lda Z
 15888 8C2D 8D 0B A4			sta X
 15889 8C30 AD 10 A4			lda Z+1
 15890 8C33 8D 0C A4			sta X+1
 15891 8C36 AD 0F A4			lda Z
 15892 8C39 18 69 2C			add #$2C
 15893 8C3C 8D 4F 8C			sta @FORTMP_3059_0
 15894 8C3F AD 10 A4			lda Z+1
 15895 8C42 69 00			adc #$00
 15896 8C44 8D 48 8C			sta @FORTMP_3059_1
 15897
 15898 8C47			l_305C
 15899 				; --- ForToDoCondition
 15900 8C47 A9 00			lda @FORTMP_3059_1::#$00
 15901 8C49 CD 0C A4			cmp X+1
 15902 8C4C D0 05			bne @+
 15903 8C4E A9 00			lda @FORTMP_3059_0::#$00
 15904 8C50 CD 0B A4			cmp X
 15905 				@
 15906 8C53 B0 03 4C EC 8C		jcc l_3068
 15907
 15908 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3076
 15909
 15910 8C58 20 0A 45			jsr WAIT_VBL
 15911
 15912 				; optimize OK (service.pas), line = 3078
 15913
 15914 8C5B AD B4 A1			lda VAUS.X
 15915 8C5E 8D B6 A1			sta VAUS.OLDX
 15916 8C61 A9 00			lda #$00
 15917 8C63 8D B7 A1			sta VAUS.OLDX+1
 15918
 15919 				; optimize OK (service.pas), line = 3079
 15920
 15921 8C66 AD 0B A4			lda X
 15922 8C69 8D B4 A1			sta VAUS.X
 15923
 15924 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3080
 15925
 15926 8C6C 20 5E 53			jsr REMOVE_VAUS
 15927
 15928 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3081
 15929
 15930 8C6F 20 4A 8B			jsr CHECK_FLUX
 15931
 15932 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3082
 15933
 15934 8C72 20 D5 53			jsr PLACE_VAUS
 15935
 15936 				; optimize OK (service.pas), line = 3084
 15937
 15938 8C75 AC B5 A1			ldy VAUS.Y
 15939 8C78 B9 00 C0			lda adr.ROW,y
 15940 8C7B 18 69 E1			add #$E1
 15941 8C7E 8D 33 A2			sta HLP
 15942 8C81 B9 00 C1			lda adr.ROW+256,y
 15943 8C84 69 00			adc #$00
 15944 8C86 8D 34 A2			sta HLP+1
 15945
 15946 				; optimize OK (service.pas), line = 3086
 15947
 15948 8C89 AD 33 A2			lda HLP
 15949 8C8C 8D 42 A2			sta BLITBOX.DST
 15950 8C8F A9 50			lda #$50
 15951 8C91 18 6D 34 A2			add HLP+1
 15952 8C95 8D 43 A2			sta BLITBOX.DST+1
 15953 8C98 A9 00			lda #$00
 15954 8C9A 69 00			adc #$00
 15955 8C9C 8D 44 A2			sta BLITBOX.DST+2
 15956 8C9F A9 00			lda #$00
 15957 8CA1 69 00			adc #$00
 15958 8CA3 8D 45 A2			sta BLITBOX.DST+3
 15959 8CA6 AD 40 A1			lda PLAYSCREEN.OFS
 15960 8CA9 18 6D 33 A2			add HLP
 15961 8CAD 8D 3E A2			sta BLITBOX.SRC
 15962 8CB0 AD 41 A1			lda PLAYSCREEN.OFS+1
 15963 8CB3 6D 34 A2			adc HLP+1
 15964 8CB6 8D 3F A2			sta BLITBOX.SRC+1
 15965 8CB9 AD 42 A1			lda PLAYSCREEN.OFS+2
 15966 8CBC 69 00			adc #$00
 15967 8CBE 8D 40 A2			sta BLITBOX.SRC+2
 15968 8CC1 AD 43 A1			lda PLAYSCREEN.OFS+3
 15969 8CC4 69 00			adc #$00
 15970 8CC6 8D 41 A2			sta BLITBOX.SRC+3
 15971 8CC9 A9 28			lda #$28
 15972 8CCB 8D 46 A2			sta BLITBOX.W
 15973 8CCE A9 00			lda #$00
 15974 8CD0 8D 47 A2			sta BLITBOX.W+1
 15975 8CD3 AD BD A1			lda VAUS.HEIGHT
 15976 8CD6 8D 48 A2			sta BLITBOX.H
 15977 8CD9 20 7C 3B			jsr BLITBOX
 15978
 15979 				; --- ForToDoEpilog
 15980 8CDC EE 0B A4			inc X
 15981 8CDF F0 03 4C 47 8C		jne l_305C
 15982 8CE4 EE 0C A4			inc X+1
 15983 8CE7 F0 03 4C 47 8C		jne l_305C
 15984 8CEC			l_3068
 15985
 15986 				; ------------------------------------------------------------
 15987
 15988 = A40B			X	= DATAORIGIN+$03C3
 15989 = A40D			Y	= DATAORIGIN+$03C5
 15990 = A40F			Z	= DATAORIGIN+$03C7
 15991
 15992 = A40B			@VarData	= X
 15993 = 0006			@VarDataSize	= 6
 15994
 15995 8CEC			@exit
 15996 					.ifdef @new
 15997 					lda <@VarData
 15998 					sta :ztmp
 15999 					lda >@VarData
 16000 					ldy #@VarDataSize-1
 16001 					jmp @FreeMem
 16002 					els
 16003 8CEC 60				rts						; ret
 16004 					eif
 16005 				.endl
 16006
 16007 8CED			.local	CHECK_BONUS_TYPE				; PROCEDURE
 16008
 16009 				; optimize OK (service.pas), line = 3101
 16010
 16011 8CED AD C0 A1			lda VAUS.LETTER
 16012 8CF0 10 03 4C A3 8D		jmi l_30AF
 16013 8CF5 D0 03 4C A3 8D		jeq l_30AF
 16014
 16015 				; optimize OK (service.pas), line = 3103
 16016
 16017 8CFA A0 00			ldy #$00
 16018 8CFC AD C0 A1			lda VAUS.LETTER
 16019 8CFF 10 01			spl
 16020 8D01 88				dey
 16021 8D02 38 E9 01			sub #$01
 16022 8D05 8D 28 A2			sta LETT.LAST
 16023 8D08 98				tya
 16024 8D09 E9 00			sbc #$00
 16025 8D0B 8D 29 A2			sta LETT.LAST+1
 16026
 16027 				; optimize OK (service.pas), line = 3104
 16028
 16029 8D0E AC 17 A4 84 84 AC + 	mwy B2 :bp2
 16030 8D18 A0 17			ldy #B2.INPLAY-DATAORIGIN
 16031 8D1A B1 84			lda (:bp2),y
 16032 8D1C F0 0F			jeq l_30C6
 16033 8D1E AD 17 A4			lda B2
 16034 8D21 8D AF A2			sta REMOVE_BALL.BALL
 16035 8D24 AD 18 A4			lda B2+1
 16036 8D27 8D B0 A2			sta REMOVE_BALL.BALL+1
 16037 8D2A 20 84 44			jsr REMOVE_BALL
 16038 8D2D			l_30C6
 16039
 16040 				; optimize OK (service.pas), line = 3105
 16041
 16042 8D2D AC 1B A4 84 84 AC + 	mwy B3 :bp2
 16043 8D37 A0 17			ldy #B3.INPLAY-DATAORIGIN
 16044 8D39 B1 84			lda (:bp2),y
 16045 8D3B F0 0F			jeq l_30D8
 16046 8D3D AD 1B A4			lda B3
 16047 8D40 8D AF A2			sta REMOVE_BALL.BALL
 16048 8D43 AD 1C A4			lda B3+1
 16049 8D46 8D B0 A2			sta REMOVE_BALL.BALL+1
 16050 8D49 20 84 44			jsr REMOVE_BALL
 16051 8D4C			l_30D8
 16052
 16053 				; optimize OK (service.pas), line = 3106
 16054
 16055 8D4C AC 17 A4 84 84 AC + 	mwy B2 :bp2
 16056 8D56 A0 17			ldy #B2.INPLAY-DATAORIGIN
 16057 8D58 A9 00			lda #$00
 16058 8D5A 91 84			sta (:bp2),y
 16059
 16060 				; optimize OK (service.pas), line = 3107
 16061
 16062 8D5C AC 1B A4 84 84 AC + 	mwy B3 :bp2
 16063 8D66 A0 17			ldy #B3.INPLAY-DATAORIGIN
 16064 8D68 91 84			sta (:bp2),y
 16065
 16066 				; optimize OK (service.pas), line = 3108
 16067
 16068 8D6A 8D 30 A2			sta SCRFLUX
 16069
 16070 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3109
 16071
 16072 8D6D 20 E6 8A			jsr REMOVE_FLUX
 16073
 16074 				; optimize OK (service.pas), line = 3111
 16075
 16076 8D70 AD C0 A1			lda VAUS.LETTER
 16077 8D73 C9 06			cmp #$06
 16078 8D75 F0 2C			jeq l_30FD
 16079
 16080 				; optimize OK (service.pas), line = 3113
 16081
 16082 8D77 AC 13 A4 84 84 AC + 	mwy B1 :bp2
 16083 8D81 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 16084 8D83 A9 00			lda #$00
 16085 8D85 91 84			sta (:bp2),y
 16086
 16087 				; optimize OK (service.pas), line = 3114
 16088
 16089 8D87 AC 17 A4 84 84 AC + 	mwy B2 :bp2
 16090 8D91 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 16091 8D93 91 84			sta (:bp2),y
 16092
 16093 				; optimize OK (service.pas), line = 3115
 16094
 16095 8D95 AC 1B A4 84 84 AC + 	mwy B3 :bp2
 16096 8D9F A0 18			ldy #B3.LAUNCH-DATAORIGIN
 16097 8DA1 91 84			sta (:bp2),y
 16098 8DA3			l_30FD
 16099 8DA3			l_30AF
 16100
 16101 				; optimize OK (service.pas), line = 3119
 16102
 16103 8DA3 AD C0 A1			lda VAUS.LETTER
 16104 8DA6 8D 21 A4			sta @CASETMP_000A
 16105 8DA9 C9 01			cmp #$01
 16106 8DAB D0 4D			jne l_3119
 16107 				@
 16108
 16109 				; optimize OK (service.pas), line = 3122
 16110
 16111 8DAD AD 2C A2			lda FIRE.SHOT
 16112 8DB0 F0 03			jeq l_3125
 16113 8DB2 20 18 89			jsr REMOVE_FIRE
 16114 8DB5			l_3125
 16115
 16116 				; optimize OK (service.pas), line = 3123
 16117
 16118 8DB5 AD 5C A1 8D 44 A1 + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 16119
 16120 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3124
 16121
 16122 8DE5 20 FE 52			jsr MODIFY_VAUS
 16123
 16124 				; optimize OK (service.pas), line = 3125
 16125
 16126 8DE8 A9 00			lda #$00
 16127 8DEA 8D C0 A1			sta VAUS.LETTER
 16128
 16129 				; optimize OK (service.pas), line = 3126
 16130
 16131 8DED A9 01			lda #$01
 16132 8DEF 8D 2D A2			sta FIRE.AVL
 16133
 16134 				; optimize OK (service.pas), line = 3127
 16135
 16136 8DF2 A9 00			lda #$00
 16137 8DF4 8D 2C A2			sta FIRE.SHOT
 16138 8DF7 4C 28 90			jmp a_000A
 16139 8DFA			l_3119
 16140 8DFA C9 02			cmp #$02
 16141 8DFC D0 46			jne l_313F
 16142
 16143 				; optimize OK (service.pas), line = 3131
 16144
 16145 8DFE AD 2C A2			lda FIRE.SHOT
 16146 8E01 F0 03			jeq l_314B
 16147 8E03 20 18 89			jsr REMOVE_FIRE
 16148 8E06			l_314B
 16149
 16150 				; optimize OK (service.pas), line = 3132
 16151
 16152 8E06 AD 54 A1 8D 44 A1 + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 16153
 16154 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3133
 16155
 16156 8E36 20 FE 52			jsr MODIFY_VAUS
 16157
 16158 				; optimize OK (service.pas), line = 3134
 16159
 16160 8E39 A9 00			lda #$00
 16161 8E3B 8D C0 A1			sta VAUS.LETTER
 16162
 16163 				; optimize OK (service.pas), line = 3135
 16164
 16165 8E3E 8D 2D A2			sta FIRE.AVL
 16166 8E41 4C 28 90			jmp a_000A
 16167 8E44			l_313F
 16168 8E44 C9 03			cmp #$03
 16169 8E46 D0 4B			jne l_3161
 16170
 16171 				; optimize OK (service.pas), line = 3139
 16172
 16173 8E48 AD 2C A2			lda FIRE.SHOT
 16174 8E4B F0 03			jeq l_316D
 16175 8E4D 20 18 89			jsr REMOVE_FIRE
 16176 8E50			l_316D
 16177
 16178 				; optimize OK (service.pas), line = 3140
 16179
 16180 8E50 AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16181
 16182 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3141
 16183
 16184 8E80 20 FE 52			jsr MODIFY_VAUS
 16185
 16186 				; optimize OK (service.pas), line = 3142
 16187
 16188 8E83 A9 00			lda #$00
 16189 8E85 8D C0 A1			sta VAUS.LETTER
 16190
 16191 				; optimize OK (service.pas), line = 3143
 16192
 16193 8E88 8D 2D A2			sta FIRE.AVL
 16194
 16195 				; optimize OK (service.pas), line = 3144
 16196
 16197 8E8B A9 01			lda #$01
 16198 8E8D 8D 30 A2			sta SCRFLUX
 16199 8E90 4C 28 90			jmp a_000A
 16200 8E93			l_3161
 16201 8E93 C9 04			cmp #$04
 16202 8E95 D0 3E			jne l_3187
 16203
 16204 				; optimize OK (service.pas), line = 3148
 16205
 16206 8E97 AD 2C A2			lda FIRE.SHOT
 16207 8E9A F0 03			jeq l_3193
 16208 8E9C 20 18 89			jsr REMOVE_FIRE
 16209 8E9F			l_3193
 16210
 16211 				; optimize OK (service.pas), line = 3149
 16212
 16213 8E9F AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16214
 16215 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3150
 16216
 16217 8ECF 20 FE 52			jsr MODIFY_VAUS
 16218 				; optimize OK (service.pas), line = 3151
 16219 8ED2 4C 6C 8F			jmp s_31D0
 16220 8ED5			l_3187
 16221 8ED5 C9 05			cmp #$05
 16222 8ED7 F0 03 4C 6F 8F		jne l_31A5
 16223
 16224 				; optimize OK (service.pas), line = 3155
 16225
 16226 8EDC AD 2C A2			lda FIRE.SHOT
 16227 8EDF F0 03			jeq l_31B1
 16228 8EE1 20 18 89			jsr REMOVE_FIRE
 16229 8EE4			l_31B1
 16230
 16231 				; optimize OK (service.pas), line = 3156
 16232
 16233 8EE4 AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16234
 16235 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3157
 16236
 16237 8F14 20 FE 52			jsr MODIFY_VAUS
 16238
 16239 				; optimize OK (service.pas), line = 3158
 16240
 16241 8F17 A9 00			lda #$00
 16242 8F19 8D C0 A1			sta VAUS.LETTER
 16243
 16244 				; optimize OK (service.pas), line = 3159
 16245
 16246 8F1C AC 13 A4 84 84 AC + 	mwy B1 :bp2
 16247 8F26 A0 0C			ldy #B1.SPEED-DATAORIGIN
 16248 8F28 B1 84			lda (:bp2),y
 16249 8F2A 38 E9 F4			sub #$F4
 16250 8F2D 8D 6F A2			sta MAX.A
 16251 8F30 C8				iny
 16252 8F31 B1 84			lda (:bp2),y
 16253 8F33 E9 01			sbc #$01
 16254 8F35 8D 70 A2			sta MAX.A+1
 16255 8F38 A9 F4			lda #$F4
 16256 8F3A 8D 71 A2			sta MAX.B
 16257 8F3D A9 01			lda #$01
 16258 8F3F 8D 72 A2			sta MAX.B+1
 16259 8F42 20 78 3D			jsr MAX
 16260 8F45 AD 73 A2			lda MAX.RESULT
 16261 8F48 8D 1F A4			sta X
 16262 8F4B AD 74 A2			lda MAX.RESULT+1
 16263 8F4E 8D 20 A4			sta X+1
 16264
 16265 				; optimize OK (service.pas), line = 3160
 16266
 16267 8F51 AD 13 A4			lda B1
 16268 8F54 8D B9 A2			sta SET_BALL_SPEED.BALL
 16269 8F57 AD 14 A4			lda B1+1
 16270 8F5A 8D BA A2			sta SET_BALL_SPEED.BALL+1
 16271 8F5D AD 1F A4			lda X
 16272 8F60 8D BD A2			sta SET_BALL_SPEED.SPEED
 16273 8F63 AD 20 A4			lda X+1
 16274 8F66 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 16275 8F69 20 E7 45			jsr SET_BALL_SPEED
 16276 8F6C			s_31D0
 16277 				; optimize OK (service.pas), line = 3161
 16278 8F6C 4C AE 8F			jmp s_31EE
 16279 8F6F			l_31A5
 16280 8F6F C9 06			cmp #$06
 16281 8F71 D0 3E			jne l_31D7
 16282
 16283 				; optimize OK (service.pas), line = 3165
 16284
 16285 8F73 AD 2C A2			lda FIRE.SHOT
 16286 8F76 F0 03			jeq l_31E3
 16287 8F78 20 18 89			jsr REMOVE_FIRE
 16288 8F7B			l_31E3
 16289
 16290 				; optimize OK (service.pas), line = 3166
 16291
 16292 8F7B AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16293
 16294 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3167
 16295
 16296 8FAB 20 FE 52			jsr MODIFY_VAUS
 16297 8FAE			s_31EE
 16298 				; optimize OK (service.pas), line = 3168
 16299 8FAE 4C 23 90			jmp s_321E
 16300 8FB1			l_31D7
 16301 8FB1 C9 07			cmp #$07
 16302 8FB3 D0 73			jne l_31F5
 16303
 16304 				; optimize OK (service.pas), line = 3172
 16305
 16306 8FB5 AD 2C A2			lda FIRE.SHOT
 16307 8FB8 F0 03			jeq l_3201
 16308 8FBA 20 18 89			jsr REMOVE_FIRE
 16309 8FBD			l_3201
 16310
 16311 				; optimize OK (service.pas), line = 3173
 16312
 16313 8FBD AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16314
 16315 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3174
 16316
 16317 8FED 20 FE 52			jsr MODIFY_VAUS
 16318
 16319 				; optimize OK (service.pas), line = 3175
 16320
 16321 8FF0 A9 00			lda #$00
 16322 8FF2 8D C0 A1			sta VAUS.LETTER
 16323
 16324 				; optimize OK (service.pas), line = 3176
 16325
 16326 8FF5 AC 10 A2			ldy CUR_PLAYER
 16327 8FF8 B9 04 A2			lda adr.SCORE.LIVES,y
 16328 8FFB 18 69 01			add #$01
 16329 8FFE 99 04 A2			sta adr.SCORE.LIVES,y
 16330
 16331 				; optimize OK (service.pas), line = 3177
 16332
 16333 9001 8D F0 A3			sta PLOT_LIVES.LIVES
 16334 9004 A9 00			lda #$00
 16335 9006 8D F1 A3			sta PLOT_LIVES.LIVES+1
 16336 9009 20 E7 85			jsr PLOT_LIVES
 16337
 16338 				; optimize OK (service.pas), line = 3178
 16339
 16340 900C A9 D0			lda #$D0
 16341 900E 8D 30 A1			sta BALL_BLOCK_SOUND.A
 16342 9011 A9 07			lda #$07
 16343 9013 8D 31 A1			sta BALL_BLOCK_SOUND.A+1
 16344 9016 A9 0A			lda #$0A
 16345 9018 8D 32 A1			sta BALL_BLOCK_SOUND.B
 16346 901B A9 00			lda #$00
 16347 901D 8D 33 A1			sta BALL_BLOCK_SOUND.B+1
 16348 9020 20 F1 3A			jsr BALL_BLOCK_SOUND
 16349 9023			s_321E
 16350
 16351 				; optimize OK (service.pas), line = 3179
 16352
 16353 9023 A9 00			lda #$00
 16354 9025 8D 2D A2			sta FIRE.AVL
 16355 9028			l_31F5
 16356 9028			a_000A
 16357
 16358 				; ------------------------------------------------------------
 16359
 16360 = A413			B1	= DATAORIGIN+$03CB
 16361 = A048			B1.X	= DATAORIGIN+$0000
 16362 = A04A			B1.Y	= DATAORIGIN+$0002
 16363 = A04C			B1.FINEX	= DATAORIGIN+$0004
 16364 = A04E			B1.FINEY	= DATAORIGIN+$0006
 16365 = A050			B1.OLDX	= DATAORIGIN+$0008
 16366 = A052			B1.OLDY	= DATAORIGIN+$000A
 16367 = A054			B1.SPEED	= DATAORIGIN+$000C
 16368 = A056			B1.FINESPEED	= DATAORIGIN+$000E
 16369 = A058			B1.SPEEDX	= DATAORIGIN+$0010
 16370 = A05A			B1.SPEEDY	= DATAORIGIN+$0012
 16371 = A05C			B1.SBD	= DATAORIGIN+$0014
 16372 = A05E			B1.BRWHIT	= DATAORIGIN+$0016
 16373 = A05F			B1.INPLAY	= DATAORIGIN+$0017
 16374 = A060			B1.LAUNCH	= DATAORIGIN+$0018
 16375 = A061			B1.ONVAUS	= DATAORIGIN+$0019
 16376 = A063			B1.STM	= DATAORIGIN+$001B
 16377 = A417			B2	= DATAORIGIN+$03CF
 16378 = A048			B2.X	= DATAORIGIN+$0000
 16379 = A04A			B2.Y	= DATAORIGIN+$0002
 16380 = A04C			B2.FINEX	= DATAORIGIN+$0004
 16381 = A04E			B2.FINEY	= DATAORIGIN+$0006
 16382 = A050			B2.OLDX	= DATAORIGIN+$0008
 16383 = A052			B2.OLDY	= DATAORIGIN+$000A
 16384 = A054			B2.SPEED	= DATAORIGIN+$000C
 16385 = A056			B2.FINESPEED	= DATAORIGIN+$000E
 16386 = A058			B2.SPEEDX	= DATAORIGIN+$0010
 16387 = A05A			B2.SPEEDY	= DATAORIGIN+$0012
 16388 = A05C			B2.SBD	= DATAORIGIN+$0014
 16389 = A05E			B2.BRWHIT	= DATAORIGIN+$0016
 16390 = A05F			B2.INPLAY	= DATAORIGIN+$0017
 16391 = A060			B2.LAUNCH	= DATAORIGIN+$0018
 16392 = A061			B2.ONVAUS	= DATAORIGIN+$0019
 16393 = A063			B2.STM	= DATAORIGIN+$001B
 16394 = A41B			B3	= DATAORIGIN+$03D3
 16395 = A048			B3.X	= DATAORIGIN+$0000
 16396 = A04A			B3.Y	= DATAORIGIN+$0002
 16397 = A04C			B3.FINEX	= DATAORIGIN+$0004
 16398 = A04E			B3.FINEY	= DATAORIGIN+$0006
 16399 = A050			B3.OLDX	= DATAORIGIN+$0008
 16400 = A052			B3.OLDY	= DATAORIGIN+$000A
 16401 = A054			B3.SPEED	= DATAORIGIN+$000C
 16402 = A056			B3.FINESPEED	= DATAORIGIN+$000E
 16403 = A058			B3.SPEEDX	= DATAORIGIN+$0010
 16404 = A05A			B3.SPEEDY	= DATAORIGIN+$0012
 16405 = A05C			B3.SBD	= DATAORIGIN+$0014
 16406 = A05E			B3.BRWHIT	= DATAORIGIN+$0016
 16407 = A05F			B3.INPLAY	= DATAORIGIN+$0017
 16408 = A060			B3.LAUNCH	= DATAORIGIN+$0018
 16409 = A061			B3.ONVAUS	= DATAORIGIN+$0019
 16410 = A063			B3.STM	= DATAORIGIN+$001B
 16411 = A41F			X	= DATAORIGIN+$03D7
 16412 = A421			@CASETMP_000A	= DATAORIGIN+$03D9
 16413
 16414 = A413			@VarData	= B1
 16415 = 0009			@VarDataSize	= 9
 16416
 16417 9028			@exit
 16418 					.ifdef @new
 16419 					lda <@VarData
 16420 					sta :ztmp
 16421 					lda >@VarData
 16422 					ldy #@VarDataSize-1
 16423 					jmp @FreeMem
 16424 					els
 16425 9028 60				rts						; ret
 16426 					eif
 16427 				.endl
 16428
 16429 9029			.local	DEVIATE_BALL					; PROCEDURE
 16430
 16431 				; --- RepeatUntilProlog
 16432 9029			l_322C
 16433
 16434 				; optimize OK (service.pas), line = 3192
 16435
 16436 9029 AD 22 A4			lda BALL
 16437 902C 8D D1 A2			sta GET_BALL_DIRECTION.BALL
 16438 902F AD 23 A4			lda BALL+1
 16439 9032 8D D2 A2			sta GET_BALL_DIRECTION.BALL+1
 16440 9035 20 CA 49			jsr GET_BALL_DIRECTION
 16441 9038 E8				inx
 16442 9039 AD D5 A2 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16443 903E AD D6 A2 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16444 9043 A9 1E			lda #$1E
 16445 9045 20 B5 35			jsr SYSTEM.RANDOM.@010180000
 16446 9048 E8				inx
 16447 9049 AD 8D A0 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16448 904E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16449 9052 20 B5 20			jsr addAX_CX
 16450 9055 B5 95			lda :STACKORIGIN-1,x
 16451 9057 38 E9 0F			sub #$0F
 16452 905A 8D 26 A4			sta TEMP
 16453 905D B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16454 905F E9 00			sbc #$00
 16455 9061 8D 27 A4			sta TEMP+1
 16456 9064 CA				dex
 16457 9065 CA				dex
 16458
 16459 				; optimize OK (service.pas), line = 3193
 16460
 16461 9066 A9 5A			lda #$5A
 16462 9068 85 8E			sta @SMALLINT.MOD.B
 16463 906A A9 00			lda #$00
 16464 906C 85 8F			sta @SMALLINT.MOD.B+1
 16465 906E AD 26 A4			lda TEMP
 16466 9071 85 86			sta @SMALLINT.MOD.A
 16467 9073 AD 27 A4			lda TEMP+1
 16468 9076 85 87			sta @SMALLINT.MOD.A+1
 16469 9078 20 6D 22			jsr @SMALLINT.MOD
 16470 907B A5 92			lda @SMALLINT.MOD.RESULT
 16471 907D C9 1F			cmp #$1F
 16472 907F A5 93			lda @SMALLINT.MOD.RESULT+1
 16473 9081 E9 00			sbc #$00
 16474 9083 50 02			svc
 16475 9085 49 80			eor #$80
 16476 9087 30 A0			jmi l_322C
 16477 9089 A9 5A			lda #$5A
 16478 908B 85 8E			sta @SMALLINT.MOD.B
 16479 908D A9 00			lda #$00
 16480 908F 85 8F			sta @SMALLINT.MOD.B+1
 16481 9091 AD 26 A4			lda TEMP
 16482 9094 85 86			sta @SMALLINT.MOD.A
 16483 9096 AD 27 A4			lda TEMP+1
 16484 9099 85 87			sta @SMALLINT.MOD.A+1
 16485 909B 20 6D 22			jsr @SMALLINT.MOD
 16486 909E A5 92			lda @SMALLINT.MOD.RESULT
 16487 90A0 C9 3C			cmp #$3C
 16488 90A2 A5 93			lda @SMALLINT.MOD.RESULT+1
 16489 90A4 E9 00			sbc #$00
 16490 90A6 50 02			svc
 16491 90A8 49 80			eor #$80
 16492 90AA 30 03 4C 29 90		jpl l_322C
 16493
 16494 				; optimize OK (service.pas), line = 3195
 16495
 16496 90AF AD 22 A4			lda BALL
 16497 90B2 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 16498 90B5 AD 23 A4			lda BALL+1
 16499 90B8 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 16500 90BB AD 26 A4			lda TEMP
 16501 90BE 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 16502 90C1 AD 27 A4			lda TEMP+1
 16503 90C4 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 16504 90C7 20 E7 47			jsr SET_BALL_DIRECTION
 16505
 16506 				; optimize OK (service.pas), line = 3196
 16507
 16508 90CA AC 22 A4 84 84 AC + 	mwy BALL :bp2
 16509 90D4 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16510 90D6 B1 84			lda (:bp2),y
 16511 90D8 8D BD A2			sta SET_BALL_SPEED.SPEED
 16512 90DB C8				iny
 16513 90DC B1 84			lda (:bp2),y
 16514 90DE 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 16515 90E1 AD 22 A4			lda BALL
 16516 90E4 8D B9 A2			sta SET_BALL_SPEED.BALL
 16517 90E7 AD 23 A4			lda BALL+1
 16518 90EA 8D BA A2			sta SET_BALL_SPEED.BALL+1
 16519 90ED 20 E7 45			jsr SET_BALL_SPEED
 16520
 16521 				; optimize OK (service.pas), line = 3197
 16522
 16523 90F0 AC 22 A4 84 84 AC + 	mwy BALL :bp2
 16524 90FA A0 14			ldy #BALL.SBD-DATAORIGIN
 16525 90FC A9 00			lda #$00
 16526 90FE 91 84			sta (:bp2),y
 16527 9100 C8				iny
 16528 9101 91 84			sta (:bp2),y
 16529
 16530 				; ------------------------------------------------------------
 16531
 16532 = A422			BALL	= DATAORIGIN+$03DA
 16533 = A048			BALL.X	= DATAORIGIN+$0000
 16534 = A04A			BALL.Y	= DATAORIGIN+$0002
 16535 = A04C			BALL.FINEX	= DATAORIGIN+$0004
 16536 = A04E			BALL.FINEY	= DATAORIGIN+$0006
 16537 = A050			BALL.OLDX	= DATAORIGIN+$0008
 16538 = A052			BALL.OLDY	= DATAORIGIN+$000A
 16539 = A054			BALL.SPEED	= DATAORIGIN+$000C
 16540 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
 16541 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
 16542 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
 16543 = A05C			BALL.SBD	= DATAORIGIN+$0014
 16544 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
 16545 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
 16546 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
 16547 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
 16548 = A063			BALL.STM	= DATAORIGIN+$001B
 16549 = A426			TEMP	= DATAORIGIN+$03DE
 16550
 16551 = A422			@VarData	= BALL
 16552 = 0004			@VarDataSize	= 4
 16553
 16554 9103			@exit
 16555 					.ifdef @new
 16556 					lda <@VarData
 16557 					sta :ztmp
 16558 					lda >@VarData
 16559 					ldy #@VarDataSize-1
 16560 					jmp @FreeMem
 16561 					els
 16562 9103 60				rts						; ret
 16563 					eif
 16564 				.endl
 16565
 16566 9104			.local	BOUNCEBALL					; FUNCTION
 16567
 16568 9104 4C 79 92			jmp l_326C
 16569
 16570 9107			.local	CHECK_BALL					; PROCEDURE
 16571
 16572 				; optimize OK (service.pas), line = 3227
 16573
 16574 9107 AC 8A A4 84 84 AC + 	mwy BALL :bp2
 16575 9111 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16576 9113 B1 84			lda (:bp2),y
 16577 9115 F0 65			jeq l_327B
 16578
 16579 				; optimize OK (service.pas), line = 3230
 16580
 16581 9117 A0 02			ldy #BALL.Y-DATAORIGIN
 16582 9119 B1 84			lda (:bp2),y
 16583 911B C8				iny
 16584 911C C9 16			cmp #$16
 16585 911E B1 84			lda (:bp2),y
 16586 9120 E9 00			sbc #$00
 16587 9122 50 02			svc
 16588 9124 49 80			eor #$80
 16589 9126 30 20			jmi l_3298
 16590 9128 A0 02			ldy #BALL.Y-DATAORIGIN
 16591 912A B1 84			lda (:bp2),y
 16592 912C C8				iny
 16593 912D C9 8E			cmp #$8E
 16594 912F B1 84			lda (:bp2),y
 16595 9131 E9 00			sbc #$00
 16596 9133 50 02			svc
 16597 9135 49 80			eor #$80
 16598 9137 10 0F			jpl l_3298
 16599
 16600 				; optimize OK (service.pas), line = 3231
 16601
 16602 9139 AD 8A A4			lda BALL
 16603 913C 8D 6E A3			sta BALL_HIT_BLOCK.BALL
 16604 913F AD 8B A4			lda BALL+1
 16605 9142 8D 6F A3			sta BALL_HIT_BLOCK.BALL+1
 16606 9145 20 20 6A			jsr BALL_HIT_BLOCK
 16607 9148			l_3298
 16608
 16609 				; optimize OK (service.pas), line = 3233
 16610
 16611 9148 AD 8A A4			lda BALL
 16612 914B 8D B3 A2			sta SET_BALL.BALL
 16613 914E AD 8B A4			lda BALL+1
 16614 9151 8D B4 A2			sta SET_BALL.BALL+1
 16615 9154 20 0E 45			jsr SET_BALL
 16616
 16617 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3234
 16618
 16619 9157 E8				inx
 16620 9158 AD 8A A4 95 96		mva BALL :STACKORIGIN,x
 16621 915D AD 8B A4 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16622 9162 20 43 4C			jsr BALL_SPEED
 16623 9165 AC 8A A4 84 84 AC + 	mwy BALL :bp2
 16624 916F A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16625 9171 AD F9 A2			lda BALL_SPEED.RESULT
 16626 9174 91 84			sta (:bp2),y
 16627 9176 C8				iny
 16628 9177 AD FA A2			lda BALL_SPEED.RESULT+1
 16629 917A 91 84			sta (:bp2),y
 16630 917C			l_327B
 16631
 16632 				; ------------------------------------------------------------
 16633
 16634 = A48A			BALL	= DATAORIGIN+$0442
 16635 = A048			BALL.X	= DATAORIGIN+$0000
 16636 = A04A			BALL.Y	= DATAORIGIN+$0002
 16637 = A04C			BALL.FINEX	= DATAORIGIN+$0004
 16638 = A04E			BALL.FINEY	= DATAORIGIN+$0006
 16639 = A050			BALL.OLDX	= DATAORIGIN+$0008
 16640 = A052			BALL.OLDY	= DATAORIGIN+$000A
 16641 = A054			BALL.SPEED	= DATAORIGIN+$000C
 16642 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
 16643 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
 16644 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
 16645 = A05C			BALL.SBD	= DATAORIGIN+$0014
 16646 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
 16647 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
 16648 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
 16649 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
 16650 = A063			BALL.STM	= DATAORIGIN+$001B
 16651
 16652 = A48A			@VarData	= BALL
 16653 = 0002			@VarDataSize	= 2
 16654
 16655 917C			@exit
 16656 					.ifdef @new
 16657 					lda <@VarData
 16658 					sta :ztmp
 16659 					lda >@VarData
 16660 					ldy #@VarDataSize-1
 16661 					jmp @FreeMem
 16662 					els
 16663 917C 60				rts						; ret
 16664 					eif
 16665 				.endl
 16666
 16667 917D			.local	TEST_BALL					; PROCEDURE
 16668
 16669 				; optimize OK (service.pas), line = 3242
 16670
 16671 917D AC 8E A4 84 84 AC + 	mwy BALL :bp2
 16672 9187 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16673 9189 B1 84			lda (:bp2),y
 16674 918B D0 03 4C 78 92		jeq l_32B9
 16675
 16676 				; optimize OK (service.pas), line = 3244
 16677
 16678 9190 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16679 9192 B1 84			lda (:bp2),y
 16680 9194 18 69 01			add #$01
 16681 9197 91 84			sta (:bp2),y
 16682 9199 C8				iny
 16683 919A B1 84			lda (:bp2),y
 16684 919C 69 00			adc #$00
 16685 919E 91 84			sta (:bp2),y
 16686
 16687 				; optimize OK (service.pas), line = 3246
 16688
 16689 91A0 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16690 91A2 B1 84			lda (:bp2),y
 16691 91A4 85 9F			sta :STACKORIGIN+9
 16692 91A6 C8				iny
 16693 91A7 B1 84			lda (:bp2),y
 16694 91A9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16695 91AB AD 16 A2			lda LV
 16696 91AE 0A				asl @
 16697 91AF A8				tay
 16698 91B0 B9 A1 20			lda adr.LEVEL,y
 16699 91B3 85 A0			sta :STACKORIGIN+10
 16700 91B5 B9 A2 20			lda adr.LEVEL+1,y
 16701 91B8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16702 91BA A0 00			ldy #$00
 16703 91BC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16704 91BE 10 01			spl
 16705 91C0 88				dey
 16706 91C1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16707 91C3 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16708 91C5 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16709 91C7				.LOCAL
 16710 91C7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16711 91C9 38 E9 00			sub #$00
 16712 91CC D0 1C			bne L4
 16713 91CE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16714 91D0 C9 00			cmp #$00
 16715 91D2 D0 0A			bne L1
 16716 91D4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16717 91D6 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16718 91D8 D0 04			bne L1
 16719 91DA A5 9F			lda :STACKORIGIN+9
 16720 91DC C5 A0			cmp :STACKORIGIN+10
 16721 91DE F0 10		L1	beq L5
 16722 91E0 B0 04			bcs L3
 16723 91E2 A9 FF			lda #$FF
 16724 91E4 D0 0A			bne L5
 16725 91E6 A9 01		L3	lda #$01
 16726 91E8 D0 06			bne L5
 16727 91EA 50 04		L4	bvc L5
 16728 91EC 49 FF			eor #$FF
 16729 91EE 09 01			ora #$01
 16730 91F0			L5
 16731 					.ENDL
 16732 91F0 30 48			jmi l_32CF
 16733 91F2 F0 46			jeq l_32CF
 16734
 16735 				; optimize OK (service.pas), line = 3248
 16736
 16737 91F4 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16738 91F6 A9 00			lda #$00
 16739 91F8 91 84			sta (:bp2),y
 16740 91FA C8				iny
 16741 91FB 91 84			sta (:bp2),y
 16742
 16743 				; optimize OK (service.pas), line = 3251
 16744
 16745 91FD A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16746 91FF B1 84			lda (:bp2),y
 16747 9201 C8				iny
 16748 9202 C9 D0			cmp #$D0
 16749 9204 B1 84			lda (:bp2),y
 16750 9206 E9 07			sbc #$07
 16751 9208 50 02			svc
 16752 920A 49 80			eor #$80
 16753 920C 10 2C			jpl l_32E5
 16754
 16755 				; optimize OK (service.pas), line = 3253
 16756
 16757 920E A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16758 9210 B1 84			lda (:bp2),y
 16759 9212 18 69 0A			add #$0A
 16760 9215 91 84			sta (:bp2),y
 16761 9217 C8				iny
 16762 9218 B1 84			lda (:bp2),y
 16763 921A 69 00			adc #$00
 16764 921C 91 84			sta (:bp2),y
 16765
 16766 				; optimize OK (service.pas), line = 3254
 16767
 16768 921E A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16769 9220 B1 84			lda (:bp2),y
 16770 9222 8D BD A2			sta SET_BALL_SPEED.SPEED
 16771 9225 C8				iny
 16772 9226 B1 84			lda (:bp2),y
 16773 9228 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 16774 922B AD 8E A4			lda BALL
 16775 922E 8D B9 A2			sta SET_BALL_SPEED.BALL
 16776 9231 AD 8F A4			lda BALL+1
 16777 9234 8D BA A2			sta SET_BALL_SPEED.BALL+1
 16778 9237 20 E7 45			jsr SET_BALL_SPEED
 16779 923A			l_32E5
 16780 923A			l_32CF
 16781
 16782 				; optimize OK (service.pas), line = 3258
 16783
 16784 923A AC 8E A4 84 84 AC + 	mwy BALL :bp2
 16785 9244 A0 14			ldy #BALL.SBD-DATAORIGIN
 16786 9246 B1 84			lda (:bp2),y
 16787 9248 18 69 01			add #$01
 16788 924B 91 84			sta (:bp2),y
 16789 924D C8				iny
 16790 924E B1 84			lda (:bp2),y
 16791 9250 69 00			adc #$00
 16792 9252 91 84			sta (:bp2),y
 16793
 16794 				; optimize OK (service.pas), line = 3262
 16795
 16796 9254 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16797 9256 B1 84			lda (:bp2),y
 16798 9258 C9 02			cmp #$02
 16799 925A D0 05			bne @+
 16800 925C 88				dey
 16801 925D B1 84			lda (:bp2),y
 16802 925F C9 58			cmp #$58
 16803 				@
 16804 9261 90 15			jcc l_330D
 16805 				@
 16806 9263 A0 00			ldy #$00
 16807 9265 B1 84			lda (:bp2),y
 16808 9267 10 0F			jpl l_330D
 16809 				@
 16810
 16811 				; optimize OK (service.pas), line = 3263
 16812
 16813 9269 AD 8E A4			lda BALL
 16814 926C 8D 22 A4			sta DEVIATE_BALL.BALL
 16815 926F AD 8F A4			lda BALL+1
 16816 9272 8D 23 A4			sta DEVIATE_BALL.BALL+1
 16817 9275 20 29 90			jsr DEVIATE_BALL
 16818 9278			l_330D
 16819 9278			l_32B9
 16820
 16821 				; ------------------------------------------------------------
 16822
 16823 = A48E			BALL	= DATAORIGIN+$0446
 16824 = A048			BALL.X	= DATAORIGIN+$0000
 16825 = A04A			BALL.Y	= DATAORIGIN+$0002
 16826 = A04C			BALL.FINEX	= DATAORIGIN+$0004
 16827 = A04E			BALL.FINEY	= DATAORIGIN+$0006
 16828 = A050			BALL.OLDX	= DATAORIGIN+$0008
 16829 = A052			BALL.OLDY	= DATAORIGIN+$000A
 16830 = A054			BALL.SPEED	= DATAORIGIN+$000C
 16831 = A056			BALL.FINESPEED	= DATAORIGIN+$000E
 16832 = A058			BALL.SPEEDX	= DATAORIGIN+$0010
 16833 = A05A			BALL.SPEEDY	= DATAORIGIN+$0012
 16834 = A05C			BALL.SBD	= DATAORIGIN+$0014
 16835 = A05E			BALL.BRWHIT	= DATAORIGIN+$0016
 16836 = A05F			BALL.INPLAY	= DATAORIGIN+$0017
 16837 = A060			BALL.LAUNCH	= DATAORIGIN+$0018
 16838 = A061			BALL.ONVAUS	= DATAORIGIN+$0019
 16839 = A063			BALL.STM	= DATAORIGIN+$001B
 16840
 16841 = A48E			@VarData	= BALL
 16842 = 0002			@VarDataSize	= 2
 16843
 16844 9278			@exit
 16845 					.ifdef @new
 16846 					lda <@VarData
 16847 					sta :ztmp
 16848 					lda >@VarData
 16849 					ldy #@VarDataSize-1
 16850 					jmp @FreeMem
 16851 					els
 16852 9278 60				rts						; ret
 16853 					eif
 16854 				.endl
 16855 9279			l_326C
 16856
 16857 				; optimize OK (service.pas), line = 3271
 16858
 16859 9279 A9 00			lda #$00
 16860 927B 8D 31 A2			sta SCRFLUXCNT
 16861
 16862 				; optimize OK (service.pas), line = 3272
 16863
 16864 927E 8D 30 A2			sta SCRFLUX
 16865
 16866 				; optimize OK (service.pas), line = 3274
 16867
 16868 9281 A9 01			lda #$01
 16869 9283 8D 2F A2			sta BALLS_IN_PLAY
 16870
 16871 				; optimize OK (service.pas), line = 3276
 16872
 16873 9286 A9 00			lda #$00
 16874 9288 8D 2D A2			sta FIRE.AVL
 16875
 16876 				; optimize OK (service.pas), line = 3277
 16877
 16878 928B AD 4C A1 8D 44 A1 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16879
 16880 				; optimize OK (service.pas), line = 3279
 16881
 16882 92BB A9 FF			lda #$FF
 16883 92BD 8D 28 A2			sta LETT.LAST
 16884 92C0 8D 29 A2			sta LETT.LAST+1
 16885
 16886 				; optimize OK (service.pas), line = 3280
 16887
 16888 92C3 A9 00			lda #$00
 16889 92C5 8D 1F A2			sta LETT.ACTIVE
 16890
 16891 				; optimize OK (service.pas), line = 3283
 16892
 16893 92C8 AD 0F A0			lda PATTERN
 16894 92CB 8D 9E A3			sta FILL_PICTURE_WITH_PATTERN.PATT
 16895 92CE AD 10 A0			lda PATTERN+1
 16896 92D1 8D 9F A3			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16897 92D4 20 D7 78			jsr FILL_PICTURE_WITH_PATTERN
 16898
 16899 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3286
 16900
 16901 92D7 E8				inx
 16902 92D8 AD EF 9F 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16903 92DD AD F0 9F 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16904 92E2 20 B4 43			jsr SHOWBTMPICTURE
 16905
 16906 				; optimize OK (service.pas), line = 3290
 16907
 16908 92E5 AC 10 A2			ldy CUR_PLAYER
 16909 92E8 B9 04 A2			lda adr.SCORE.LIVES,y
 16910 92EB 8D F0 A3			sta PLOT_LIVES.LIVES
 16911 92EE A9 00			lda #$00
 16912 92F0 8D F1 A3			sta PLOT_LIVES.LIVES+1
 16913 92F3 20 E7 85			jsr PLOT_LIVES
 16914
 16915 				; optimize OK (service.pas), line = 3296
 16916
 16917 92F6 AD F9 A1			lda adr.SCORE.PLAYER+$04
 16918 92F9 8D E7 A3			sta WRITE_SCORE.SC
 16919 92FC AD FA A1			lda adr.SCORE.PLAYER+1+$04
 16920 92FF 8D E8 A3			sta WRITE_SCORE.SC+1
 16921 9302 AD FB A1			lda adr.SCORE.PLAYER+2+$04
 16922 9305 8D E9 A3			sta WRITE_SCORE.SC+2
 16923 9308 AD FC A1			lda adr.SCORE.PLAYER+3+$04
 16924 930B 8D EA A3			sta WRITE_SCORE.SC+3
 16925 930E A9 FD			lda #$FD
 16926 9310 8D E3 A3			sta WRITE_SCORE.PX
 16927 9313 A9 00			lda #$00
 16928 9315 8D E4 A3			sta WRITE_SCORE.PX+1
 16929 9318 A9 3C			lda #$3C
 16930 931A 8D E5 A3			sta WRITE_SCORE.PY
 16931 931D A9 00			lda #$00
 16932 931F 8D E6 A3			sta WRITE_SCORE.PY+1
 16933 9322 20 89 82			jsr WRITE_SCORE
 16934
 16935 				; optimize OK (service.pas), line = 3297
 16936
 16937 9325 AD FD A1			lda adr.SCORE.PLAYER+$08
 16938 9328 8D E7 A3			sta WRITE_SCORE.SC
 16939 932B AD FE A1			lda adr.SCORE.PLAYER+1+$08
 16940 932E 8D E8 A3			sta WRITE_SCORE.SC+1
 16941 9331 AD FF A1			lda adr.SCORE.PLAYER+2+$08
 16942 9334 8D E9 A3			sta WRITE_SCORE.SC+2
 16943 9337 AD 00 A2			lda adr.SCORE.PLAYER+3+$08
 16944 933A 8D EA A3			sta WRITE_SCORE.SC+3
 16945 933D A9 FD			lda #$FD
 16946 933F 8D E3 A3			sta WRITE_SCORE.PX
 16947 9342 A9 00			lda #$00
 16948 9344 8D E4 A3			sta WRITE_SCORE.PX+1
 16949 9347 A9 5D			lda #$5D
 16950 9349 8D E5 A3			sta WRITE_SCORE.PY
 16951 934C A9 00			lda #$00
 16952 934E 8D E6 A3			sta WRITE_SCORE.PY+1
 16953 9351 20 89 82			jsr WRITE_SCORE
 16954
 16955 				; optimize OK (service.pas), line = 3298
 16956
 16957 9354 A9 FD			lda #$FD
 16958 9356 8D E3 A3			sta WRITE_SCORE.PX
 16959 9359 A9 00			lda #$00
 16960 935B 8D E4 A3			sta WRITE_SCORE.PX+1
 16961 935E A9 80			lda #$80
 16962 9360 8D E5 A3			sta WRITE_SCORE.PY
 16963 9363 A9 00			lda #$00
 16964 9365 8D E6 A3			sta WRITE_SCORE.PY+1
 16965 9368 AD 07 A2			lda SCORE.HISCORE
 16966 936B 8D E7 A3			sta WRITE_SCORE.SC
 16967 936E AD 08 A2			lda SCORE.HISCORE+1
 16968 9371 8D E8 A3			sta WRITE_SCORE.SC+1
 16969 9374 AD 09 A2			lda SCORE.HISCORE+2
 16970 9377 8D E9 A3			sta WRITE_SCORE.SC+2
 16971 937A AD 0A A2			lda SCORE.HISCORE+3
 16972 937D 8D EA A3			sta WRITE_SCORE.SC+3
 16973 9380 20 89 82			jsr WRITE_SCORE
 16974
 16975 				; optimize FAIL ('PUT_WALL', service.pas), line = 3301
 16976
 16977 9383 20 4D 5D			jsr PUT_WALL
 16978
 16979 				; optimize OK (service.pas), line = 3308
 16980
 16981 9386 A9 01			lda #$01
 16982 9388 8D 4D A4			sta BALL0.INPLAY
 16983
 16984 				; optimize OK (service.pas), line = 3309
 16985
 16986 938B 8D 4E A4			sta BALL0.LAUNCH
 16987
 16988 				; optimize OK (service.pas), line = 3312
 16989
 16990 938E A9 6F			lda #$6F
 16991 9390 8D 36 A4			sta BALL0.X
 16992 9393 A9 00			lda #$00
 16993 9395 8D 37 A4			sta BALL0.X+1
 16994
 16995 				; optimize OK (service.pas), line = 3313
 16996
 16997 9398 A9 B5			lda #$B5
 16998 939A 8D 38 A4			sta BALL0.Y
 16999 939D A9 00			lda #$00
 17000 939F 8D 39 A4			sta BALL0.Y+1
 17001
 17002 				; optimize OK (service.pas), line = 3316
 17003
 17004 93A2 A9 FF			lda #$FF
 17005 93A4 8D 3E A4			sta BALL0.OLDX
 17006 93A7 8D 3F A4			sta BALL0.OLDX+1
 17007
 17008 				; optimize OK (service.pas), line = 3317
 17009
 17010 93AA 8D 40 A4			sta BALL0.OLDY
 17011 93AD 8D 41 A4			sta BALL0.OLDY+1
 17012
 17013 				; optimize OK (service.pas), line = 3320
 17014
 17015 93B0 A9 00			lda #$00
 17016 93B2 8D 4A A4			sta BALL0.SBD
 17017 93B5 8D 4B A4			sta BALL0.SBD+1
 17018
 17019 				; optimize OK (service.pas), line = 3324
 17020
 17021 93B8 A9 10			lda #$10
 17022 93BA 8D 4F A4			sta BALL0.ONVAUS
 17023 93BD A9 00			lda #$00
 17024 93BF 8D 50 A4			sta BALL0.ONVAUS+1
 17025
 17026 				; optimize OK (service.pas), line = 3329
 17027
 17028 93C2 8D 51 A4			sta BALL0.STM
 17029
 17030 				; optimize OK (service.pas), line = 3333
 17031
 17032 93C5 A9 E8			lda #$E8
 17033 93C7 8D 8E A0			sta SYSTEM.RANDOM.@010184000.RANGE
 17034 93CA A9 03			lda #$03
 17035 93CC 8D 8F A0			sta SYSTEM.RANDOM.@010184000.RANGE+1
 17036 93CF 20 CC 35			jsr SYSTEM.RANDOM.@010184000
 17037 93D2 AD 90 A0			lda SYSTEM.RANDOM.@010184000.RESULT
 17038 93D5 8D 20 A2			sta LETT.INCOMING
 17039 93D8 AD 91 A0			lda SYSTEM.RANDOM.@010184000.RESULT+1
 17040 93DB 8D 21 A2			sta LETT.INCOMING+1
 17041
 17042 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3336
 17043
 17044 93DE 20 4B 7D			jsr CREATE_VAUS
 17045
 17046 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3339
 17047
 17048 93E1 20 67 7A			jsr WRITE_ROUND_LEVEL
 17049
 17050 				; optimize FAIL ('SET_VAUS', service.pas), line = 3341
 17051
 17052 93E4 20 16 53			jsr SET_VAUS
 17053
 17054 				; optimize FAIL ('START_VAUS', service.pas), line = 3342
 17055
 17056 93E7 20 53 53			jsr START_VAUS
 17057
 17058 				; optimize OK (service.pas), line = 3343
 17059
 17060 93EA AD B4 A1			lda VAUS.X
 17061 93ED 8D 0E A3			sta MOVE_VAUS.X
 17062 93F0 A9 00			lda #$00
 17063 93F2 8D 0F A3			sta MOVE_VAUS.X+1
 17064 93F5 A9 B8			lda #$B8
 17065 93F7 8D 10 A3			sta MOVE_VAUS.Y
 17066 93FA A9 00			lda #$00
 17067 93FC 8D 11 A3			sta MOVE_VAUS.Y+1
 17068 93FF 20 49 55			jsr MOVE_VAUS
 17069
 17070 				; optimize FAIL ('START_LEVEL', service.pas), line = 3344
 17071
 17072 9402 20 EF 3A			jsr START_LEVEL
 17073
 17074 				; optimize FAIL ('START_VAUS', service.pas), line = 3345
 17075
 17076 9405 20 53 53			jsr START_VAUS
 17077
 17078 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3346
 17079
 17080 9408 20 68 7A			jsr REMOVE_ROUND_LEVEL
 17081
 17082 				; optimize OK (service.pas), line = 3347
 17083
 17084 940B AD 0C 99			lda BALL0
 17085 940E 8D B3 A2			sta SET_BALL.BALL
 17086 9411 AD 0D 99			lda BALL0+1
 17087 9414 8D B4 A2			sta SET_BALL.BALL+1
 17088 9417 20 0E 45			jsr SET_BALL
 17089
 17090 				; optimize OK (service.pas), line = 3354
 17091
 17092 941A A9 0F			lda #$0F
 17093 941C 20 B5 35			jsr SYSTEM.RANDOM.@010180000
 17094 941F E8				inx
 17095 9420 E8				inx
 17096 9421 AD 8D A0			lda SYSTEM.RANDOM.@010180000.RESULT
 17097 9424 18 69 3C			add #$3C
 17098 9427 95 95			sta :STACKORIGIN-1,x
 17099 9429 A9 00			lda #$00
 17100 942B 69 00			adc #$00
 17101 942D 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 17102 942F AD 0C 99			lda BALL0
 17103 9432 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 17104 9435 AD 0D 99			lda BALL0+1
 17105 9438 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 17106 943B CA				dex
 17107 943C B5 96			lda :STACKORIGIN,x
 17108 943E 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 17109 9441 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17110 9443 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 17111 9446 CA				dex
 17112 9447 20 E7 47			jsr SET_BALL_DIRECTION
 17113
 17114 				; optimize OK (service.pas), line = 3356
 17115
 17116 944A AD 0C 99			lda BALL0
 17117 944D 8D B9 A2			sta SET_BALL_SPEED.BALL
 17118 9450 AD 0D 99			lda BALL0+1
 17119 9453 8D BA A2			sta SET_BALL_SPEED.BALL+1
 17120 9456 A9 F4			lda #$F4
 17121 9458 8D BD A2			sta SET_BALL_SPEED.SPEED
 17122 945B A9 01			lda #$01
 17123 945D 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 17124 9460 20 E7 45			jsr SET_BALL_SPEED
 17125
 17126 				; optimize OK (service.pas), line = 3359
 17127
 17128 9463 A9 00			lda #$00
 17129 9465 8D 44 A4			sta BALL0.FINESPEED
 17130 9468 8D 45 A4			sta BALL0.FINESPEED+1
 17131
 17132 				; optimize OK (service.pas), line = 3361
 17133
 17134 946B 8D 69 A4			sta BALL1.INPLAY
 17135
 17136 				; optimize OK (service.pas), line = 3362
 17137
 17138 946E 8D 85 A4			sta BALL2.INPLAY
 17139
 17140 				; optimize OK (service.pas), line = 3364
 17141
 17142 9471 AD B4 A1			lda VAUS.X
 17143 9474 8D 29 A4			sta X
 17144 9477 A9 00			lda #$00
 17145 9479 8D 2A A4			sta X+1
 17146
 17147 				; --- WhileProlog
 17148 947C 4C EA 98			jmp l_33A5
 17149 947F			l_33A6
 17150
 17151 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3368
 17152
 17153 947F 20 0A 45			jsr WAIT_VBL
 17154
 17155 				; optimize OK (service.pas), line = 3377
 17156
 17157 9482 A9 29			lda <X
 17158 9484 8D 39 A2			sta MOUSECOORDS.X
 17159 9487 A9 A4			lda >X
 17160 9489 8D 3A A2			sta MOUSECOORDS.X+1
 17161 948C 20 F2 3A			jsr MOUSECOORDS
 17162
 17163 				; optimize OK (service.pas), line = 3382
 17164
 17165 948F AD 18 A2			lda TRAINER
 17166 9492 D0 19			jne l_33BB
 17167 9494 AD 29 A4			lda X
 17168 9497 8D 0E A3			sta MOVE_VAUS.X
 17169 949A AD 2A A4			lda X+1
 17170 949D 8D 0F A3			sta MOVE_VAUS.X+1
 17171 94A0 A9 B8			lda #$B8
 17172 94A2 8D 10 A3			sta MOVE_VAUS.Y
 17173 94A5 A9 00			lda #$00
 17174 94A7 8D 11 A3			sta MOVE_VAUS.Y+1
 17175 94AA 4C 17 95			jmp l_33C9
 17176 94AD			l_33BB
 17177
 17178 				; optimize OK (service.pas), line = 3388
 17179
 17180 94AD AD 18 A2			lda TRAINER
 17181 94B0 C9 01			cmp #$01
 17182 94B2 D0 66			jne l_33DB
 17183
 17184 				; optimize FAIL (1, service.pas), line = 3389
 17185
 17186 94B4 E8				inx
 17187 94B5 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 17188 94B9 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17189 94BD E8				inx
 17190 94BE A9 0A 95 96			mva #$0A :STACKORIGIN,x
 17191 94C2 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17192 94C6 AD 36 A4			lda BALL0.X
 17193 94C9 38 ED 4F A4			sub BALL0.ONVAUS
 17194 94CD 8D 6F A2			sta MAX.A
 17195 94D0 AD 37 A4			lda BALL0.X+1
 17196 94D3 ED 50 A4			sbc BALL0.ONVAUS+1
 17197 94D6 8D 70 A2			sta MAX.A+1
 17198 94D9 B5 96			lda :STACKORIGIN,x
 17199 94DB 8D 71 A2			sta MAX.B
 17200 94DE B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17201 94E0 8D 72 A2			sta MAX.B+1
 17202 94E3 CA				dex
 17203 94E4 20 78 3D			jsr MAX
 17204 94E7 A9 B8			lda #$B8
 17205 94E9 8D 75 A2			sta MIN.A
 17206 94EC A9 00			lda #$00
 17207 94EE 8D 76 A2			sta MIN.A+1
 17208 94F1 AD 73 A2			lda MAX.RESULT
 17209 94F4 8D 77 A2			sta MIN.B
 17210 94F7 AD 74 A2			lda MAX.RESULT+1
 17211 94FA 8D 78 A2			sta MIN.B+1
 17212 94FD 20 A3 3D			jsr MIN
 17213 9500 AD 79 A2			lda MIN.RESULT
 17214 9503 8D 0E A3			sta MOVE_VAUS.X
 17215 9506 AD 7A A2			lda MIN.RESULT+1
 17216 9509 8D 0F A3			sta MOVE_VAUS.X+1
 17217 950C B5 96			lda :STACKORIGIN,x
 17218 950E 8D 10 A3			sta MOVE_VAUS.Y
 17219 9511 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17220 9513 8D 11 A3			sta MOVE_VAUS.Y+1
 17221 9516 CA				dex
 17222 9517			l_33C9
 17223 9517 20 49 55			jsr MOVE_VAUS
 17224 951A			l_33DB
 17225
 17226 				; optimize OK (service.pas), line = 3394
 17227
 17228 951A AD 4E A4			lda BALL0.LAUNCH
 17229 951D C9 01			cmp #$01
 17230 951F D0 30			jne l_33FD
 17231
 17232 				; optimize FAIL (0, service.pas), line = 3396
 17233
 17234 9521 EE 51 A4			inc BALL0.STM
 17235
 17236 				; optimize OK (service.pas), line = 3401
 17237
 17238 9524 AD 51 A4			lda BALL0.STM
 17239 9527 C9 FA			cmp #$FA
 17240 9529 D0 05			jne l_3414
 17241 952B A9 00			lda #$00
 17242 952D 8D 4E A4			sta BALL0.LAUNCH
 17243 9530			l_3414
 17244
 17245 				; optimize OK (service.pas), line = 3404
 17246
 17247 9530 AD 0C 99			lda BALL0
 17248 9533 8D D9 A2			sta START_BALL.BALL
 17249 9536 AD 0D 99			lda BALL0+1
 17250 9539 8D DA A2			sta START_BALL.BALL+1
 17251 953C 20 E8 4B			jsr START_BALL
 17252
 17253 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3407
 17254
 17255 953F 20 73 3B			jsr MOUSECLICK
 17256 9542 AD 3D A2			lda MOUSECLICK.RESULT
 17257 9545 C9 01			cmp #$01
 17258 9547 D0 05			jne l_342E
 17259 9549 A9 00			lda #$00
 17260 954B 8D 4E A4			sta BALL0.LAUNCH
 17261 954E			l_342E
 17262 954E 4C 8D 95			jmp l_343E
 17263 9551			l_33FD
 17264
 17265 				; optimize OK (service.pas), line = 3415
 17266
 17267 9551 AD 4D A4			lda BALL0.INPLAY
 17268 9554 F0 0F			jeq l_344A
 17269 9556 AD 0C 99			lda BALL0
 17270 9559 8D FF A2			sta MOVE_BALL.BALL
 17271 955C AD 0D 99			lda BALL0+1
 17272 955F 8D 00 A3			sta MOVE_BALL.BALL+1
 17273 9562 20 5C 4D			jsr MOVE_BALL
 17274 9565			l_344A
 17275
 17276 				; optimize OK (service.pas), line = 3416
 17277
 17278 9565 AD 69 A4			lda BALL1.INPLAY
 17279 9568 F0 0F			jeq l_345C
 17280 956A AD 0E 99			lda BALL1
 17281 956D 8D FF A2			sta MOVE_BALL.BALL
 17282 9570 AD 0F 99			lda BALL1+1
 17283 9573 8D 00 A3			sta MOVE_BALL.BALL+1
 17284 9576 20 5C 4D			jsr MOVE_BALL
 17285 9579			l_345C
 17286
 17287 				; optimize OK (service.pas), line = 3417
 17288
 17289 9579 AD 85 A4			lda BALL2.INPLAY
 17290 957C F0 0F			jeq l_346E
 17291 957E AD 10 99			lda BALL2
 17292 9581 8D FF A2			sta MOVE_BALL.BALL
 17293 9584 AD 11 99			lda BALL2+1
 17294 9587 8D 00 A3			sta MOVE_BALL.BALL+1
 17295 958A 20 5C 4D			jsr MOVE_BALL
 17296 958D			l_346E
 17297 958D			l_343E
 17298
 17299 				; optimize OK (service.pas), line = 3425
 17300
 17301 958D AD 0C 99			lda BALL0
 17302 9590 8D 8A A4			sta CHECK_BALL.BALL
 17303 9593 AD 0D 99			lda BALL0+1
 17304 9596 8D 8B A4			sta CHECK_BALL.BALL+1
 17305 9599 20 07 91			jsr CHECK_BALL
 17306
 17307 				; optimize OK (service.pas), line = 3426
 17308
 17309 959C AD 0E 99			lda BALL1
 17310 959F 8D 8A A4			sta CHECK_BALL.BALL
 17311 95A2 AD 0F 99			lda BALL1+1
 17312 95A5 8D 8B A4			sta CHECK_BALL.BALL+1
 17313 95A8 20 07 91			jsr CHECK_BALL
 17314
 17315 				; optimize OK (service.pas), line = 3427
 17316
 17317 95AB AD 10 99			lda BALL2
 17318 95AE 8D 8A A4			sta CHECK_BALL.BALL
 17319 95B1 AD 11 99			lda BALL2+1
 17320 95B4 8D 8B A4			sta CHECK_BALL.BALL+1
 17321 95B7 20 07 91			jsr CHECK_BALL
 17322
 17323 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3442
 17324
 17325 95BA 20 67 40			jsr CHECKSHINE
 17326
 17327 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3443
 17328
 17329 95BD 20 7D 42			jsr CHECK_LETTER
 17330
 17331 				; optimize OK (service.pas), line = 3444
 17332
 17333 95C0 AD 0C 99			lda BALL0
 17334 95C3 8D 13 A4			sta CHECK_BONUS_TYPE.B1
 17335 95C6 AD 0D 99			lda BALL0+1
 17336 95C9 8D 14 A4			sta CHECK_BONUS_TYPE.B1+1
 17337 95CC AD 0E 99			lda BALL1
 17338 95CF 8D 17 A4			sta CHECK_BONUS_TYPE.B2
 17339 95D2 AD 0F 99			lda BALL1+1
 17340 95D5 8D 18 A4			sta CHECK_BONUS_TYPE.B2+1
 17341 95D8 AD 10 99			lda BALL2
 17342 95DB 8D 1B A4			sta CHECK_BONUS_TYPE.B3
 17343 95DE AD 11 99			lda BALL2+1
 17344 95E1 8D 1C A4			sta CHECK_BONUS_TYPE.B3+1
 17345 95E4 20 ED 8C			jsr CHECK_BONUS_TYPE
 17346
 17347 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3445
 17348
 17349 95E7 20 83 89			jsr CHECK_FIRE
 17350
 17351 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3446
 17352
 17353 95EA 20 4A 8B			jsr CHECK_FLUX
 17354
 17355 				; optimize OK (service.pas), line = 3448
 17356
 17357 95ED AD B4 A1			lda VAUS.X
 17358 95F0 18 6D BC A1			add VAUS.WIDTH
 17359 95F4 85 9F			sta :STACKORIGIN+9
 17360 95F6 A9 00			lda #$00
 17361 95F8 69 00			adc #$00
 17362 95FA A0 01			ldy #1
 17363 95FC C9 00			cmp #$00
 17364 95FE D0 04			bne @+
 17365 9600 A5 9F			lda :STACKORIGIN+9
 17366 9602 C9 D7			cmp #$D7
 17367 				@
 17368 9604 F0 01			beq @+
 17369 9606 88				dey
 17370 				@
 17371 9607 98				tya
 17372 9608 2D 30 A2			and SCRFLUX
 17373 960B F0 03			jeq l_34A6
 17374 960D 20 E7 8B			jsr VAUS_OUT
 17375 9610			l_34A6
 17376
 17377 				; optimize OK (service.pas), line = 3450
 17378
 17379 9610 AD C0 A1			lda VAUS.LETTER
 17380 9613 C9 04			cmp #$04
 17381 9615 F0 03 4C 5A 97		jne l_34BC
 17382
 17383 				; optimize OK (service.pas), line = 3452
 17384
 17385 961A A9 03			lda #$03
 17386 961C 8D 2F A2			sta BALLS_IN_PLAY
 17387
 17388 				; optimize OK (service.pas), line = 3454
 17389
 17390 961F AC 0E 99 84 84 AC + 	mwy BALL1 :bp2
 17391 9629 A0 1B			ldy #$1B
 17392 962B B9 36 A4 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17393
 17394 				; optimize OK (service.pas), line = 3455
 17395
 17396 9633 AC 10 99 84 84 AC + 	mwy BALL2 :bp2
 17397 963D A0 1B			ldy #$1B
 17398 963F B9 36 A4 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17399
 17400 				; optimize OK (service.pas), line = 3457
 17401
 17402 9647 AD 0C 99			lda BALL0
 17403 964A 8D D1 A2			sta GET_BALL_DIRECTION.BALL
 17404 964D AD 0D 99			lda BALL0+1
 17405 9650 8D D2 A2			sta GET_BALL_DIRECTION.BALL+1
 17406 9653 20 CA 49			jsr GET_BALL_DIRECTION
 17407 9656 E8				inx
 17408 9657 E8				inx
 17409 9658 A9 5A			lda #$5A
 17410 965A 85 8E			sta @SMALLINT.DIV.B
 17411 965C A9 00			lda #$00
 17412 965E 85 8F			sta @SMALLINT.DIV.B+1
 17413 9660 AD D5 A2			lda GET_BALL_DIRECTION.RESULT
 17414 9663 85 86			sta @SMALLINT.DIV.A
 17415 9665 AD D6 A2			lda GET_BALL_DIRECTION.RESULT+1
 17416 9668 85 87			sta @SMALLINT.DIV.A+1
 17417 966A 20 50 22			jsr @SMALLINT.DIV
 17418 966D CA				dex
 17419 966E A5 86			lda :eax
 17420 9670 8D 2F A4			sta T1
 17421 9673 A5 87			lda :eax+1
 17422 9675 8D 30 A4			sta T1+1
 17423 9678 CA				dex
 17424
 17425 				; optimize OK (service.pas), line = 3459
 17426
 17427 9679 AD 42 A4			lda BALL0.SPEED
 17428 967C 8D 31 A4			sta T2
 17429 967F AD 43 A4			lda BALL0.SPEED+1
 17430 9682 8D 32 A4			sta T2+1
 17431
 17432 				; optimize OK (service.pas), line = 3466
 17433
 17434 9685 A9 5A			lda #$5A
 17435 9687 85 8E			sta :ecx
 17436 9689 A9 00			lda #$00
 17437 968B 85 8F			sta :ecx+1
 17438 968D AD 2F A4			lda T1
 17439 9690 85 86			sta :eax
 17440 9692 AD 30 A4			lda T1+1
 17441 9695 85 87			sta :eax+1
 17442 					.ifdef fmulinit
 17443 					fmulu_16
 17444 					els
 17445 9697 20 28 23			imulCX
 17446 					eif
 17447 969A A5 86			lda :eax
 17448 969C 8D 33 A4			sta HLP
 17449 969F A5 87			lda :eax+1
 17450 96A1 8D 34 A4			sta HLP+1
 17451
 17452 				; optimize OK (service.pas), line = 3468
 17453
 17454 96A4 AD 33 A4			lda HLP
 17455 96A7 18 69 1E			add #$1E
 17456 96AA 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 17457 96AD AD 34 A4			lda HLP+1
 17458 96B0 69 00			adc #$00
 17459 96B2 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 17460 96B5 AD 0C 99			lda BALL0
 17461 96B8 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 17462 96BB AD 0D 99			lda BALL0+1
 17463 96BE 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 17464 96C1 20 E7 47			jsr SET_BALL_DIRECTION
 17465
 17466 				; optimize OK (service.pas), line = 3469
 17467
 17468 96C4 AD 33 A4			lda HLP
 17469 96C7 18 69 2D			add #$2D
 17470 96CA 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 17471 96CD AD 34 A4			lda HLP+1
 17472 96D0 69 00			adc #$00
 17473 96D2 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 17474 96D5 AD 0E 99			lda BALL1
 17475 96D8 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 17476 96DB AD 0F 99			lda BALL1+1
 17477 96DE 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 17478 96E1 20 E7 47			jsr SET_BALL_DIRECTION
 17479
 17480 				; optimize OK (service.pas), line = 3470
 17481
 17482 96E4 AD 33 A4			lda HLP
 17483 96E7 18 69 3C			add #$3C
 17484 96EA 8D CB A2			sta SET_BALL_DIRECTION.ANGLE
 17485 96ED AD 34 A4			lda HLP+1
 17486 96F0 69 00			adc #$00
 17487 96F2 8D CC A2			sta SET_BALL_DIRECTION.ANGLE+1
 17488 96F5 AD 10 99			lda BALL2
 17489 96F8 8D C7 A2			sta SET_BALL_DIRECTION.BALL
 17490 96FB AD 11 99			lda BALL2+1
 17491 96FE 8D C8 A2			sta SET_BALL_DIRECTION.BALL+1
 17492 9701 20 E7 47			jsr SET_BALL_DIRECTION
 17493
 17494 				; optimize OK (service.pas), line = 3474
 17495
 17496 9704 AD 0C 99			lda BALL0
 17497 9707 8D B9 A2			sta SET_BALL_SPEED.BALL
 17498 970A AD 0D 99			lda BALL0+1
 17499 970D 8D BA A2			sta SET_BALL_SPEED.BALL+1
 17500 9710 AD 31 A4			lda T2
 17501 9713 8D BD A2			sta SET_BALL_SPEED.SPEED
 17502 9716 AD 32 A4			lda T2+1
 17503 9719 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 17504 971C 20 E7 45			jsr SET_BALL_SPEED
 17505
 17506 				; optimize OK (service.pas), line = 3475
 17507
 17508 971F AD 0E 99			lda BALL1
 17509 9722 8D B9 A2			sta SET_BALL_SPEED.BALL
 17510 9725 AD 0F 99			lda BALL1+1
 17511 9728 8D BA A2			sta SET_BALL_SPEED.BALL+1
 17512 972B AD 31 A4			lda T2
 17513 972E 8D BD A2			sta SET_BALL_SPEED.SPEED
 17514 9731 AD 32 A4			lda T2+1
 17515 9734 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 17516 9737 20 E7 45			jsr SET_BALL_SPEED
 17517
 17518 				; optimize OK (service.pas), line = 3476
 17519
 17520 973A AD 10 99			lda BALL2
 17521 973D 8D B9 A2			sta SET_BALL_SPEED.BALL
 17522 9740 AD 11 99			lda BALL2+1
 17523 9743 8D BA A2			sta SET_BALL_SPEED.BALL+1
 17524 9746 AD 31 A4			lda T2
 17525 9749 8D BD A2			sta SET_BALL_SPEED.SPEED
 17526 974C AD 32 A4			lda T2+1
 17527 974F 8D BE A2			sta SET_BALL_SPEED.SPEED+1
 17528 9752 20 E7 45			jsr SET_BALL_SPEED
 17529
 17530 				; optimize OK (service.pas), line = 3478
 17531
 17532 9755 A9 00			lda #$00
 17533 9757 8D C0 A1			sta VAUS.LETTER
 17534 975A			l_34BC
 17535
 17536 				; optimize OK (service.pas), line = 3482
 17537
 17538 975A AD 2F A2			lda BALLS_IN_PLAY
 17539 975D C9 02			cmp #$02
 17540 975F 90 08			jcc l_351F
 17541 9761 A9 00			lda #$00
 17542 9763 8D 20 A2			sta LETT.INCOMING
 17543 9766 8D 21 A2			sta LETT.INCOMING+1
 17544 9769			l_351F
 17545
 17546 				; optimize OK (service.pas), line = 3485
 17547
 17548 9769 AD 10 A2			lda CUR_PLAYER
 17549 976C 0A				asl @
 17550 976D 0A				asl @
 17551 976E A8				tay
 17552 976F B9 F5 A1			lda adr.SCORE.PLAYER,y
 17553 9772 8D E7 A3			sta WRITE_SCORE.SC
 17554 9775 B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 17555 9778 8D E8 A3			sta WRITE_SCORE.SC+1
 17556 977B B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 17557 977E 8D E9 A3			sta WRITE_SCORE.SC+2
 17558 9781 B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 17559 9784 8D EA A3			sta WRITE_SCORE.SC+3
 17560 9787 AC 10 A2			ldy CUR_PLAYER
 17561 978A B9 92 20			lda adr.POS_DIGIT,y
 17562 978D 8D E5 A3			sta WRITE_SCORE.PY
 17563 9790 A9 FD			lda #$FD
 17564 9792 8D E3 A3			sta WRITE_SCORE.PX
 17565 9795 A9 00			lda #$00
 17566 9797 8D E4 A3			sta WRITE_SCORE.PX+1
 17567 979A 8D E6 A3			sta WRITE_SCORE.PY+1
 17568 979D 20 89 82			jsr WRITE_SCORE
 17569
 17570 				; optimize OK (service.pas), line = 3488
 17571
 17572 97A0 AD 10 A2			lda CUR_PLAYER
 17573 97A3 0A				asl @
 17574 97A4 0A				asl @
 17575 97A5 A8				tay
 17576 97A6				.LOCAL
 17577 97A6 B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 17578 97A9 38 ED 0A A2			sub SCORE.HISCORE+3
 17579 97AD D0 22			bne L4
 17580 97AF B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 17581 97B2 CD 09 A2			cmp SCORE.HISCORE+2
 17582 97B5 D0 0E			bne L1
 17583 97B7 B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 17584 97BA CD 08 A2			cmp SCORE.HISCORE+1
 17585 97BD D0 06			bne L1
 17586 97BF B9 F5 A1			lda adr.SCORE.PLAYER,y
 17587 97C2 CD 07 A2			cmp SCORE.HISCORE
 17588 97C5 F0 10		L1	beq L5
 17589 97C7 B0 04			bcs L3
 17590 97C9 A9 FF			lda #$FF
 17591 97CB D0 0A			bne L5
 17592 97CD A9 01		L3	lda #$01
 17593 97CF D0 06			bne L5
 17594 97D1 50 04		L4	bvc L5
 17595 97D3 49 FF			eor #$FF
 17596 97D5 09 01			ora #$01
 17597 97D7			L5
 17598 					.ENDL
 17599 97D7 30 49			jmi l_3545
 17600 97D9 F0 47			jeq l_3545
 17601
 17602 				; optimize OK (service.pas), line = 3491
 17603
 17604 97DB B9 F5 A1			lda adr.SCORE.PLAYER,y
 17605 97DE 8D 07 A2			sta SCORE.HISCORE
 17606 97E1 B9 F6 A1			lda adr.SCORE.PLAYER+1,y
 17607 97E4 8D 08 A2			sta SCORE.HISCORE+1
 17608 97E7 B9 F7 A1			lda adr.SCORE.PLAYER+2,y
 17609 97EA 8D 09 A2			sta SCORE.HISCORE+2
 17610 97ED B9 F8 A1			lda adr.SCORE.PLAYER+3,y
 17611 97F0 8D 0A A2			sta SCORE.HISCORE+3
 17612
 17613 				; optimize OK (service.pas), line = 3493
 17614
 17615 97F3 A9 FD			lda #$FD
 17616 97F5 8D E3 A3			sta WRITE_SCORE.PX
 17617 97F8 A9 00			lda #$00
 17618 97FA 8D E4 A3			sta WRITE_SCORE.PX+1
 17619 97FD A9 80			lda #$80
 17620 97FF 8D E5 A3			sta WRITE_SCORE.PY
 17621 9802 A9 00			lda #$00
 17622 9804 8D E6 A3			sta WRITE_SCORE.PY+1
 17623 9807 AD 07 A2			lda SCORE.HISCORE
 17624 980A 8D E7 A3			sta WRITE_SCORE.SC
 17625 980D AD 08 A2			lda SCORE.HISCORE+1
 17626 9810 8D E8 A3			sta WRITE_SCORE.SC+1
 17627 9813 AD 09 A2			lda SCORE.HISCORE+2
 17628 9816 8D E9 A3			sta WRITE_SCORE.SC+2
 17629 9819 AD 0A A2			lda SCORE.HISCORE+3
 17630 981C 8D EA A3			sta WRITE_SCORE.SC+3
 17631 981F 20 89 82			jsr WRITE_SCORE
 17632 9822			l_3545
 17633
 17634 				; optimize OK (service.pas), line = 3500
 17635
 17636 9822 AD 0C 99			lda BALL0
 17637 9825 8D 8E A4			sta TEST_BALL.BALL
 17638 9828 AD 0D 99			lda BALL0+1
 17639 982B 8D 8F A4			sta TEST_BALL.BALL+1
 17640 982E 20 7D 91			jsr TEST_BALL
 17641
 17642 				; optimize OK (service.pas), line = 3501
 17643
 17644 9831 AD 0E 99			lda BALL1
 17645 9834 8D 8E A4			sta TEST_BALL.BALL
 17646 9837 AD 0F 99			lda BALL1+1
 17647 983A 8D 8F A4			sta TEST_BALL.BALL+1
 17648 983D 20 7D 91			jsr TEST_BALL
 17649
 17650 				; optimize OK (service.pas), line = 3502
 17651
 17652 9840 AD 10 99			lda BALL2
 17653 9843 8D 8E A4			sta TEST_BALL.BALL
 17654 9846 AD 11 99			lda BALL2+1
 17655 9849 8D 8F A4			sta TEST_BALL.BALL+1
 17656 984C 20 7D 91			jsr TEST_BALL
 17657
 17658 				; optimize OK (service.pas), line = 3543
 17659
 17660 984F AD 4D A4			lda BALL0.INPLAY
 17661 9852 D0 2B			jne l_356B
 17662
 17663 				; optimize OK (service.pas), line = 3545
 17664
 17665 9854 AC 0C 99 84 84 AC + 	mwy BALL0 :bp2
 17666 985E A0 1B			ldy #$1B
 17667 9860 B9 52 A4 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17668
 17669 				; optimize OK (service.pas), line = 3546
 17670
 17671 9868 AC 0E 99 84 84 AC + 	mwy BALL1 :bp2
 17672 9872 A0 1B			ldy #$1B
 17673 9874 B9 6E A4 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17674
 17675 				; optimize OK (service.pas), line = 3547
 17676
 17677 987C 8D 85 A4			sta BALL2.INPLAY
 17678 987F			l_356B
 17679
 17680 				; optimize OK (service.pas), line = 3550
 17681
 17682 987F A9 00			lda #$00
 17683 9881 8D 2F A2			sta BALLS_IN_PLAY
 17684
 17685 				; optimize OK (service.pas), line = 3552
 17686
 17687 9884 AD 4D A4			lda BALL0.INPLAY
 17688 9887 F0 03			jeq l_3586
 17689 9889 EE 2F A2			inc BALLS_IN_PLAY
 17690 988C			l_3586
 17691
 17692 				; optimize OK (service.pas), line = 3553
 17693
 17694 988C AD 69 A4			lda BALL1.INPLAY
 17695 988F F0 03			jeq l_3599
 17696 9891 EE 2F A2			inc BALLS_IN_PLAY
 17697 9894			l_3599
 17698
 17699 				; optimize OK (service.pas), line = 3554
 17700
 17701 9894 AD 85 A4			lda BALL2.INPLAY
 17702 9897 F0 03			jeq l_35AC
 17703 9899 EE 2F A2			inc BALLS_IN_PLAY
 17704 989C			l_35AC
 17705
 17706 				; optimize OK (service.pas), line = 3557
 17707
 17708 989C AD 4D A4			lda BALL0.INPLAY
 17709 989F D0 49			jne l_35C2
 17710
 17711 				; optimize OK (service.pas), line = 3559
 17712
 17713 98A1 A9 01			lda #$01
 17714 98A3 8D 4E A4			sta BALL0.LAUNCH
 17715
 17716 				; optimize OK (service.pas), line = 3560
 17717
 17718 98A6 AD 0C 99			lda BALL0
 17719 98A9 8D AF A2			sta REMOVE_BALL.BALL
 17720 98AC AD 0D 99			lda BALL0+1
 17721 98AF 8D B0 A2			sta REMOVE_BALL.BALL+1
 17722 98B2 20 84 44			jsr REMOVE_BALL
 17723
 17724 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3561
 17725
 17726 98B5 20 CF 7A			jsr DESTROY_VAUS
 17727
 17728 				; optimize OK (service.pas), line = 3562
 17729
 17730 98B8 AC 10 A2			ldy CUR_PLAYER
 17731 98BB B9 04 A2			lda adr.SCORE.LIVES,y
 17732 98BE 38 E9 01			sub #$01
 17733 98C1 99 04 A2			sta adr.SCORE.LIVES,y
 17734
 17735 				; optimize OK (service.pas), line = 3563
 17736
 17737 98C4 AD 33 A0			lda WALL_P
 17738 98C7 85 8E			sta @move.dst
 17739 98C9 AD 10 A2			lda CUR_PLAYER
 17740 98CC 18 6D 34 A0			add WALL_P+1
 17741 98D0 85 8F			sta @move.dst+1
 17742 98D2 AD 35 A0			lda WALL
 17743 98D5 85 8A			sta @move.src
 17744 98D7 AD 36 A0			lda WALL+1
 17745 98DA 85 8B			sta @move.src+1
 17746 98DC A9 00			lda <256
 17747 98DE 85 86			sta @move.cnt
 17748 98E0 A9 01			lda >256
 17749 98E2 85 87			sta @move.cnt+1
 17750 98E4 20 D3 21			jsr @move
 17751
 17752 				; optimize FAIL ('NOSOUND', service.pas), line = 3571
 17753
 17754 98E7 20 76 3D			jsr NOSOUND
 17755 98EA			l_35C2
 17756 98EA			l_33A5
 17757
 17758 				; optimize OK (service.pas), line = 3366
 17759
 17760 98EA AD F3 A1			lda REMAIN_BLK
 17761 98ED F0 0D			jeq l_33A6w
 17762 98EF AD 4D A4			lda BALL0.INPLAY
 17763 98F2 F0 08			jeq l_33A6w
 17764 98F4 AD 0F A2			lda SCORE.ABORTPLAY
 17765 98F7 D0 03 4C 7F 94		jeq l_33A6
 17766 98FC			l_33A6w
 17767
 17768 				; optimize OK (service.pas), line = 3627
 17769
 17770 98FC A9 00			lda #$00
 17771 98FE 8D 28 A4			sta RESULT
 17772
 17773 				; optimize OK (service.pas), line = 3628
 17774
 17775 9901 AD F3 A1			lda REMAIN_BLK
 17776 9904 D0 05			jne l_3610
 17777 9906 A9 01			lda #$01
 17778 9908 8D 28 A4			sta RESULT
 17779 990B			l_3610
 17780 990B			@exit
 17781
 17782 				; ------------------------------------------------------------
 17783
 17784 = A428			RESULT	= DATAORIGIN+$03E0
 17785 = A429			X	= DATAORIGIN+$03E1
 17786 = A42B			Y	= DATAORIGIN+$03E3
 17787 = A42D			KEY	= DATAORIGIN+$03E5
 17788 = A42F			T1	= DATAORIGIN+$03E7
 17789 = A431			T2	= DATAORIGIN+$03E9
 17790 = A433			HLP	= DATAORIGIN+$03EB
 17791 = A435			CN	= DATAORIGIN+$03ED
 17792 = A436			adr.BALL0	= DATAORIGIN+$03EE	; [28] RECORD
 17793 990B			.var BALL0	= adr.BALL0 .word
 17794 = A436			BALL0.X	= DATAORIGIN+$03EE
 17795 = A438			BALL0.Y	= DATAORIGIN+$03F0
 17796 = A43A			BALL0.FINEX	= DATAORIGIN+$03F2
 17797 = A43C			BALL0.FINEY	= DATAORIGIN+$03F4
 17798 = A43E			BALL0.OLDX	= DATAORIGIN+$03F6
 17799 = A440			BALL0.OLDY	= DATAORIGIN+$03F8
 17800 = A442			BALL0.SPEED	= DATAORIGIN+$03FA
 17801 = A444			BALL0.FINESPEED	= DATAORIGIN+$03FC
 17802 = A446			BALL0.SPEEDX	= DATAORIGIN+$03FE
 17803 = A448			BALL0.SPEEDY	= DATAORIGIN+$0400
 17804 = A44A			BALL0.SBD	= DATAORIGIN+$0402
 17805 = A44C			BALL0.BRWHIT	= DATAORIGIN+$0404
 17806 = A44D			BALL0.INPLAY	= DATAORIGIN+$0405
 17807 = A44E			BALL0.LAUNCH	= DATAORIGIN+$0406
 17808 = A44F			BALL0.ONVAUS	= DATAORIGIN+$0407
 17809 = A451			BALL0.STM	= DATAORIGIN+$0409
 17810 = A452			adr.BALL1	= DATAORIGIN+$040A	; [28] RECORD
 17811 990B			.var BALL1	= adr.BALL1 .word
 17812 = A452			BALL1.X	= DATAORIGIN+$040A
 17813 = A454			BALL1.Y	= DATAORIGIN+$040C
 17814 = A456			BALL1.FINEX	= DATAORIGIN+$040E
 17815 = A458			BALL1.FINEY	= DATAORIGIN+$0410
 17816 = A45A			BALL1.OLDX	= DATAORIGIN+$0412
 17817 = A45C			BALL1.OLDY	= DATAORIGIN+$0414
 17818 = A45E			BALL1.SPEED	= DATAORIGIN+$0416
 17819 = A460			BALL1.FINESPEED	= DATAORIGIN+$0418
 17820 = A462			BALL1.SPEEDX	= DATAORIGIN+$041A
 17821 = A464			BALL1.SPEEDY	= DATAORIGIN+$041C
 17822 = A466			BALL1.SBD	= DATAORIGIN+$041E
 17823 = A468			BALL1.BRWHIT	= DATAORIGIN+$0420
 17824 = A469			BALL1.INPLAY	= DATAORIGIN+$0421
 17825 = A46A			BALL1.LAUNCH	= DATAORIGIN+$0422
 17826 = A46B			BALL1.ONVAUS	= DATAORIGIN+$0423
 17827 = A46D			BALL1.STM	= DATAORIGIN+$0425
 17828 = A46E			adr.BALL2	= DATAORIGIN+$0426	; [28] RECORD
 17829 990B			.var BALL2	= adr.BALL2 .word
 17830 = A46E			BALL2.X	= DATAORIGIN+$0426
 17831 = A470			BALL2.Y	= DATAORIGIN+$0428
 17832 = A472			BALL2.FINEX	= DATAORIGIN+$042A
 17833 = A474			BALL2.FINEY	= DATAORIGIN+$042C
 17834 = A476			BALL2.OLDX	= DATAORIGIN+$042E
 17835 = A478			BALL2.OLDY	= DATAORIGIN+$0430
 17836 = A47A			BALL2.SPEED	= DATAORIGIN+$0432
 17837 = A47C			BALL2.FINESPEED	= DATAORIGIN+$0434
 17838 = A47E			BALL2.SPEEDX	= DATAORIGIN+$0436
 17839 = A480			BALL2.SPEEDY	= DATAORIGIN+$0438
 17840 = A482			BALL2.SBD	= DATAORIGIN+$043A
 17841 = A484			BALL2.BRWHIT	= DATAORIGIN+$043C
 17842 = A485			BALL2.INPLAY	= DATAORIGIN+$043D
 17843 = A486			BALL2.LAUNCH	= DATAORIGIN+$043E
 17844 = A487			BALL2.ONVAUS	= DATAORIGIN+$043F
 17845 = A489			BALL2.STM	= DATAORIGIN+$0441
 17846
 17847 = A429			@VarData	= X
 17848 = 0061			@VarDataSize	= 97
 17849
 17850 990B 60				rts						; ret
 17851 = 990C 36 A4		BALL0
 17851 = 990E 52 A4		BALL1
 17851 = 9910 6E A4		BALL2
 17851 				.endl
 17852
 17853 9912			.local	CHOOSE_START_WALL				; FUNCTION
 17854
 17855 				; optimize OK (service.pas), line = 3651
 17856
 17857 9912 A9 01			lda #$01
 17858 9914 8D 98 A4			sta ST
 17859 9917 A9 00			lda #$00
 17860 9919 8D 99 A4			sta ST+1
 17861
 17862 				; optimize OK (service.pas), line = 3709
 17863
 17864 991C AD 98 A4			lda ST
 17865 991F 8D 92 A4			sta RESULT
 17866 9922 AD 99 A4			lda ST+1
 17867 9925 8D 93 A4			sta RESULT+1
 17868 9928			@exit
 17869
 17870 				; ------------------------------------------------------------
 17871
 17872 = A492			RESULT	= DATAORIGIN+$044A
 17873 = 0046			PX	= $46
 17874 = 0064			PY	= $64
 17875 = 0022			DX	= $22
 17876 = 0023			DY	= $23
 17877 = 0013			DDX	= $13
 17878 = 000E			DDY	= $0E
 17879 = A494			X	= DATAORIGIN+$044C
 17880 = A496			Y	= DATAORIGIN+$044E
 17881 = A498			ST	= DATAORIGIN+$0450
 17882 = A49A			OLDX	= DATAORIGIN+$0452
 17883 = A49C			OLDY	= DATAORIGIN+$0454
 17884 = A49E			NEWX	= DATAORIGIN+$0456
 17885 = A4A0			NEWY	= DATAORIGIN+$0458
 17886
 17887 = A494			@VarData	= X
 17888 = 000E			@VarDataSize	= 14
 17889
 17890 9928 60				rts						; ret
 17891 				.endl
 17892
 17893 9929			.local	SET_START_PARAMETERS				; PROCEDURE
 17894
 17895 				; optimize OK (service.pas), line = 3718
 17896
 17897 9929 A9 01			lda #$01
 17898 992B 8D A2 A4			sta X
 17899
 17900 992E			l_3631
 17901 				; --- ForToDoCondition
 17902 992E AD A2 A4			lda X
 17903 9931 C9 03			cmp #$03
 17904 9933 B0 4E			jcs l_363F
 17905
 17906 				; optimize OK (service.pas), line = 3720
 17907
 17908 9935 0A				asl @
 17909 9936 0A				asl @
 17910 9937 A8				tay
 17911 9938 A9 00			lda #$00
 17912 993A 99 F5 A1			sta adr.SCORE.PLAYER,y
 17913 993D 99 F6 A1			sta adr.SCORE.PLAYER+1,y
 17914 9940 99 F7 A1			sta adr.SCORE.PLAYER+2,y
 17915 9943 99 F8 A1			sta adr.SCORE.PLAYER+3,y
 17916
 17917 				; optimize OK (service.pas), line = 3721
 17918
 17919 9946 AC A2 A4			ldy X
 17920 9949 A9 05			lda #$05
 17921 994B 99 04 A2			sta adr.SCORE.LIVES,y
 17922
 17923 				; optimize OK (service.pas), line = 3722
 17924
 17925 994E A9 01			lda #$01
 17926 9950 99 01 A2			sta adr.SCORE.WALL_N,y
 17927
 17928 				; optimize OK (service.pas), line = 3723
 17929
 17930 9953 AD 33 A0			lda WALL_P
 17931 9956 85 8E			sta @move.dst
 17932 9958 AD A2 A4			lda X
 17933 995B 18 6D 34 A0			add WALL_P+1
 17934 995F 85 8F			sta @move.dst+1
 17935 9961 AD 37 A0			lda ALL_WALLS
 17936 9964 85 8A			sta @move.src
 17937 9966 AD 38 A0			lda ALL_WALLS+1
 17938 9969 85 8B			sta @move.src+1
 17939 996B A9 00			lda <256
 17940 996D 85 86			sta @move.cnt
 17941 996F A9 01			lda >256
 17942 9971 85 87			sta @move.cnt+1
 17943 9973 20 D3 21			jsr @move
 17944
 17945 				; optimize OK (service.pas), line = 3725
 17946
 17947 9976 AC A2 A4			ldy X
 17948 9979 A9 00			lda #$00
 17949 997B 99 0C A2			sta adr.SCORE.ROUNDSEL,y
 17950
 17951 				; --- ForToDoEpilog
 17952 997E EE A2 A4			inc X
 17953 9981 D0 AB			jne l_3631
 17954 9983			l_363F
 17955
 17956 				; optimize OK (service.pas), line = 3728
 17957
 17958 9983 A9 01			lda #$01
 17959 9985 8D 10 A2			sta CUR_PLAYER
 17960
 17961 				; ------------------------------------------------------------
 17962
 17963 = A4A2			X	= DATAORIGIN+$045A
 17964
 17965 = A4A2			@VarData	= X
 17966 = 0001			@VarDataSize	= 1
 17967
 17968 9988			@exit
 17969 					.ifdef @new
 17970 					lda <@VarData
 17971 					sta :ztmp
 17972 					lda >@VarData
 17973 					ldy #@VarDataSize-1
 17974 					jmp @FreeMem
 17975 					els
 17976 9988 60				rts						; ret
 17977 					eif
 17978 				.endl
 17979
 17980 9989			.local	MAINSCREEN					; FUNCTION
 17981
 17982 				; optimize FAIL ('NOSOUND', service.pas), line = 3788
 17983
 17984 9989 20 76 3D			jsr NOSOUND
 17985
 17986 				; optimize OK (service.pas), line = 3789
 17987
 17988 998C A9 00			lda #$00
 17989 998E 8D 0F A2			sta SCORE.ABORTPLAY
 17990
 17991 				; optimize OK (service.pas), line = 3800
 17992
 17993 9991 AD 78 A1			lda PRESENTS.OFS
 17994 9994 8D 3E A2			sta BLITBOX.SRC
 17995 9997 AD 79 A1			lda PRESENTS.OFS+1
 17996 999A 8D 3F A2			sta BLITBOX.SRC+1
 17997 999D AD 7A A1			lda PRESENTS.OFS+2
 17998 99A0 8D 40 A2			sta BLITBOX.SRC+2
 17999 99A3 AD 7B A1			lda PRESENTS.OFS+3
 18000 99A6 8D 41 A2			sta BLITBOX.SRC+3
 18001 99A9 A9 00			lda #$00
 18002 99AB 8D 42 A2			sta BLITBOX.DST
 18003 99AE A9 50			lda #$50
 18004 99B0 8D 43 A2			sta BLITBOX.DST+1
 18005 99B3 A9 00			lda #$00
 18006 99B5 8D 44 A2			sta BLITBOX.DST+2
 18007 99B8 8D 45 A2			sta BLITBOX.DST+3
 18008 99BB A9 40			lda #$40
 18009 99BD 8D 46 A2			sta BLITBOX.W
 18010 99C0 A9 01			lda #$01
 18011 99C2 8D 47 A2			sta BLITBOX.W+1
 18012 99C5 A9 C8			lda #$C8
 18013 99C7 8D 48 A2			sta BLITBOX.H
 18014 99CA 20 7C 3B			jsr BLITBOX
 18015
 18016 				; optimize OK (service.pas), line = 3838
 18017
 18018 99CD A9 01			lda #$01
 18019 99CF 8D A3 A4			sta RESULT
 18020 99D2 A9 00			lda #$00
 18021 99D4 8D A4 A4			sta RESULT+1
 18022 99D7			@exit
 18023
 18024 				; ------------------------------------------------------------
 18025
 18026 = A4A3			RESULT	= DATAORIGIN+$045B
 18027 = A4A5			X	= DATAORIGIN+$045D
 18028 = A4A7			Y	= DATAORIGIN+$045F
 18029 = A4A9			Z	= DATAORIGIN+$0461
 18030 = A4AB			K	= DATAORIGIN+$0463
 18031 = A4AD			IK	= DATAORIGIN+$0465
 18032
 18033 = A4A5			@VarData	= X
 18034 = 000A			@VarDataSize	= 10
 18035
 18036 99D7 60				rts						; ret
 18037 				.endl
 18038
 18039 99D8			.local	START_GAME					; PROCEDURE
 18040
 18041 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3846
 18042
 18043 99D8 20 29 99			jsr SET_START_PARAMETERS
 18044
 18045 				; optimize OK (service.pas), line = 3847
 18046
 18047 99DB AD B0 A4			lda PLAYERS+1
 18048 99DE D0 05			bne @+
 18049 99E0 AD AF A4			lda PLAYERS
 18050 99E3 C9 01			cmp #$01
 18051 				@
 18052 99E5 D0 05			jne l_369E
 18053 99E7 A9 00			lda #$00
 18054 99E9 8D 06 A2			sta adr.SCORE.LIVES+$02
 18055 99EC			l_369E
 18056
 18057 				; optimize OK (service.pas), line = 3850
 18058
 18059 99EC A9 00			lda #$00
 18060 99EE 8D 18 A2			sta TRAINER
 18061
 18062 				; optimize OK (service.pas), line = 3851
 18063
 18064 99F1 AD 35 A0			lda WALL
 18065 99F4 85 8E			sta @move.dst
 18066 99F6 AD 36 A0			lda WALL+1
 18067 99F9 85 8F			sta @move.dst+1
 18068 99FB AD 33 A0			lda WALL_P
 18069 99FE 85 8A			sta @move.src
 18070 9A00 AD 10 A2			lda CUR_PLAYER
 18071 9A03 18 6D 34 A0			add WALL_P+1
 18072 9A07 85 8B			sta @move.src+1
 18073 9A09 A9 00			lda <256
 18074 9A0B 85 86			sta @move.cnt
 18075 9A0D A9 01			lda >256
 18076 9A0F 85 87			sta @move.cnt+1
 18077 9A11 20 D3 21			jsr @move
 18078
 18079 				; optimize FAIL ('SET_WALL', service.pas), line = 3855
 18080
 18081 9A14 20 A2 5D			jsr SET_WALL
 18082
 18083 				; optimize OK (service.pas), line = 3857
 18084
 18085 9A17 AD 0F A0			lda PATTERN
 18086 9A1A 8D 9E A3			sta FILL_PICTURE_WITH_PATTERN.PATT
 18087 9A1D AD 10 A0			lda PATTERN+1
 18088 9A20 8D 9F A3			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 18089 9A23 20 D7 78			jsr FILL_PICTURE_WITH_PATTERN
 18090
 18091 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3858
 18092
 18093 9A26 E8				inx
 18094 9A27 AD EF 9F 95 96		mva PLAYSCREEN :STACKORIGIN,x
 18095 9A2C AD F0 9F 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 18096 9A31 20 B4 43			jsr SHOWBTMPICTURE
 18097
 18098 				; optimize OK (service.pas), line = 3865
 18099
 18100 9A34 AD F9 A1			lda adr.SCORE.PLAYER+$04
 18101 9A37 8D E7 A3			sta WRITE_SCORE.SC
 18102 9A3A AD FA A1			lda adr.SCORE.PLAYER+1+$04
 18103 9A3D 8D E8 A3			sta WRITE_SCORE.SC+1
 18104 9A40 AD FB A1			lda adr.SCORE.PLAYER+2+$04
 18105 9A43 8D E9 A3			sta WRITE_SCORE.SC+2
 18106 9A46 AD FC A1			lda adr.SCORE.PLAYER+3+$04
 18107 9A49 8D EA A3			sta WRITE_SCORE.SC+3
 18108 9A4C A9 FD			lda #$FD
 18109 9A4E 8D E3 A3			sta WRITE_SCORE.PX
 18110 9A51 A9 00			lda #$00
 18111 9A53 8D E4 A3			sta WRITE_SCORE.PX+1
 18112 9A56 A9 3C			lda #$3C
 18113 9A58 8D E5 A3			sta WRITE_SCORE.PY
 18114 9A5B A9 00			lda #$00
 18115 9A5D 8D E6 A3			sta WRITE_SCORE.PY+1
 18116 9A60 20 89 82			jsr WRITE_SCORE
 18117
 18118 				; optimize OK (service.pas), line = 3866
 18119
 18120 9A63 AD FD A1			lda adr.SCORE.PLAYER+$08
 18121 9A66 8D E7 A3			sta WRITE_SCORE.SC
 18122 9A69 AD FE A1			lda adr.SCORE.PLAYER+1+$08
 18123 9A6C 8D E8 A3			sta WRITE_SCORE.SC+1
 18124 9A6F AD FF A1			lda adr.SCORE.PLAYER+2+$08
 18125 9A72 8D E9 A3			sta WRITE_SCORE.SC+2
 18126 9A75 AD 00 A2			lda adr.SCORE.PLAYER+3+$08
 18127 9A78 8D EA A3			sta WRITE_SCORE.SC+3
 18128 9A7B A9 FD			lda #$FD
 18129 9A7D 8D E3 A3			sta WRITE_SCORE.PX
 18130 9A80 A9 00			lda #$00
 18131 9A82 8D E4 A3			sta WRITE_SCORE.PX+1
 18132 9A85 A9 5D			lda #$5D
 18133 9A87 8D E5 A3			sta WRITE_SCORE.PY
 18134 9A8A A9 00			lda #$00
 18135 9A8C 8D E6 A3			sta WRITE_SCORE.PY+1
 18136 9A8F 20 89 82			jsr WRITE_SCORE
 18137
 18138 				; optimize OK (service.pas), line = 3867
 18139
 18140 9A92 A9 FD			lda #$FD
 18141 9A94 8D E3 A3			sta WRITE_SCORE.PX
 18142 9A97 A9 00			lda #$00
 18143 9A99 8D E4 A3			sta WRITE_SCORE.PX+1
 18144 9A9C A9 80			lda #$80
 18145 9A9E 8D E5 A3			sta WRITE_SCORE.PY
 18146 9AA1 A9 00			lda #$00
 18147 9AA3 8D E6 A3			sta WRITE_SCORE.PY+1
 18148 9AA6 AD 07 A2			lda SCORE.HISCORE
 18149 9AA9 8D E7 A3			sta WRITE_SCORE.SC
 18150 9AAC AD 08 A2			lda SCORE.HISCORE+1
 18151 9AAF 8D E8 A3			sta WRITE_SCORE.SC+1
 18152 9AB2 AD 09 A2			lda SCORE.HISCORE+2
 18153 9AB5 8D E9 A3			sta WRITE_SCORE.SC+2
 18154 9AB8 AD 0A A2			lda SCORE.HISCORE+3
 18155 9ABB 8D EA A3			sta WRITE_SCORE.SC+3
 18156 9ABE 20 89 82			jsr WRITE_SCORE
 18157
 18158 				; --- RepeatUntilProlog
 18159 9AC1			l_36CD
 18160
 18161 				; --- RepeatUntilProlog
 18162 9AC1			l_36CE
 18163
 18164 				; optimize OK (service.pas), line = 3877
 18165
 18166 9AC1 AC 10 A2			ldy CUR_PLAYER
 18167 9AC4 B9 0C A2			lda adr.SCORE.ROUNDSEL,y
 18168 9AC7 D0 77			jne l_36E0
 18169
 18170 				; optimize FAIL (1, service.pas), line = 3879
 18171
 18172 9AC9 E8				inx
 18173 9ACA AD 10 A2 95 96		mva CUR_PLAYER :STACKORIGIN,x
 18174 9ACF A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18175 9AD3 20 12 99			jsr CHOOSE_START_WALL
 18176 9AD6 E8				inx
 18177 9AD7 AD 92 A4 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 18178 9ADC AD 93 A4 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 18179 9AE1 B4 95			ldy :STACKORIGIN-1,x
 18180 9AE3 B5 96			lda :STACKORIGIN,x
 18181 9AE5 99 01 A2			sta adr.SCORE.WALL_N,y
 18182 9AE8 CA				dex
 18183 9AE9 CA				dex
 18184
 18185 				; optimize OK (service.pas), line = 3882
 18186
 18187 9AEA A9 00			lda #$00
 18188 9AEC 85 9F			sta :STACKORIGIN+9
 18189 9AEE AD 10 A2			lda CUR_PLAYER
 18190 9AF1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18191 9AF3 AC 10 A2			ldy CUR_PLAYER
 18192 9AF6 B9 01 A2			lda adr.SCORE.WALL_N,y
 18193 9AF9 38 E9 01			sub #$01
 18194 9AFC 85 86			sta :eax
 18195 9AFE A9 00			lda #$00
 18196 9B00 E9 00			sbc #$00
 18197 9B02 85 87			sta :eax+1
 18198 9B04 A9 00			lda #$00
 18199 9B06 85 8E			sta :ecx
 18200 9B08 A9 01			lda #$01
 18201 9B0A 85 8F			sta :ecx+1
 18202 					.ifdef fmulinit
 18203 					fmulu_16
 18204 					els
 18205 9B0C 20 28 23			imulCX
 18206 					eif
 18207 9B0F AD 33 A0			lda WALL_P
 18208 9B12 18 65 9F			add :STACKORIGIN+9
 18209 9B15 85 8E			sta @move.dst
 18210 9B17 AD 34 A0			lda WALL_P+1
 18211 9B1A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18212 9B1C 85 8F			sta @move.dst+1
 18213 9B1E A5 86			lda :eax
 18214 9B20 18 6D 37 A0			add ALL_WALLS
 18215 9B24 85 8A			sta @move.src
 18216 9B26 A5 87			lda :eax+1
 18217 9B28 6D 38 A0			adc ALL_WALLS+1
 18218 9B2B 85 8B			sta @move.src+1
 18219 9B2D A9 00			lda <256
 18220 9B2F 85 86			sta @move.cnt
 18221 9B31 A9 01			lda >256
 18222 9B33 85 87			sta @move.cnt+1
 18223 9B35 20 D3 21			jsr @move
 18224
 18225 				; optimize OK (service.pas), line = 3886
 18226
 18227 9B38 AC 10 A2			ldy CUR_PLAYER
 18228 9B3B A9 01			lda #$01
 18229 9B3D 99 0C A2			sta adr.SCORE.ROUNDSEL,y
 18230 9B40			l_36E0
 18231
 18232 				; optimize OK (service.pas), line = 3890
 18233
 18234 9B40 AD 35 A0			lda WALL
 18235 9B43 85 8E			sta @move.dst
 18236 9B45 AD 36 A0			lda WALL+1
 18237 9B48 85 8F			sta @move.dst+1
 18238 9B4A AD 33 A0			lda WALL_P
 18239 9B4D 85 8A			sta @move.src
 18240 9B4F AD 10 A2			lda CUR_PLAYER
 18241 9B52 18 6D 34 A0			add WALL_P+1
 18242 9B56 85 8B			sta @move.src+1
 18243 9B58 A9 00			lda <256
 18244 9B5A 85 86			sta @move.cnt
 18245 9B5C A9 01			lda >256
 18246 9B5E 85 87			sta @move.cnt+1
 18247 9B60 20 D3 21			jsr @move
 18248
 18249 				; optimize FAIL ('SET_WALL', service.pas), line = 3891
 18250
 18251 9B63 20 A2 5D			jsr SET_WALL
 18252
 18253 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3896
 18254
 18255 9B66 20 04 91			jsr BOUNCEBALL
 18256 9B69 AD 28 A4			lda BOUNCEBALL.RESULT
 18257 9B6C 8D B1 A4			sta NWALL
 18258
 18259 				; optimize OK (service.pas), line = 3899
 18260
 18261 9B6F F0 6A			jeq l_372E
 18262
 18263 				; optimize OK (service.pas), line = 3902
 18264
 18265 9B71 AC 10 A2			ldy CUR_PLAYER
 18266 9B74 B9 01 A2			lda adr.SCORE.WALL_N,y
 18267 9B77 18 69 01			add #$01
 18268 9B7A 99 01 A2			sta adr.SCORE.WALL_N,y
 18269
 18270 				; optimize OK (service.pas), line = 3905
 18271
 18272 9B7D AD F4 A1			lda TOTALWALL
 18273 9B80 D9 01 A2			cmp adr.SCORE.WALL_N,y
 18274 9B83 B0 05			jcs l_374A
 18275
 18276 				; optimize OK (service.pas), line = 3906
 18277
 18278 9B85 A9 01			lda #$01
 18279 9B87 99 01 A2			sta adr.SCORE.WALL_N,y
 18280 9B8A			l_374A
 18281
 18282 				; optimize OK (service.pas), line = 3909
 18283
 18284 9B8A A9 00			lda #$00
 18285 9B8C 85 9F			sta :STACKORIGIN+9
 18286 9B8E AD 10 A2			lda CUR_PLAYER
 18287 9B91 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18288 9B93 AC 10 A2			ldy CUR_PLAYER
 18289 9B96 B9 01 A2			lda adr.SCORE.WALL_N,y
 18290 9B99 38 E9 01			sub #$01
 18291 9B9C 85 86			sta :eax
 18292 9B9E A9 00			lda #$00
 18293 9BA0 E9 00			sbc #$00
 18294 9BA2 85 87			sta :eax+1
 18295 9BA4 A9 00			lda #$00
 18296 9BA6 85 8E			sta :ecx
 18297 9BA8 A9 01			lda #$01
 18298 9BAA 85 8F			sta :ecx+1
 18299 					.ifdef fmulinit
 18300 					fmulu_16
 18301 					els
 18302 9BAC 20 28 23			imulCX
 18303 					eif
 18304 9BAF AD 33 A0			lda WALL_P
 18305 9BB2 18 65 9F			add :STACKORIGIN+9
 18306 9BB5 85 8E			sta @move.dst
 18307 9BB7 AD 34 A0			lda WALL_P+1
 18308 9BBA 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18309 9BBC 85 8F			sta @move.dst+1
 18310 9BBE A5 86			lda :eax
 18311 9BC0 18 6D 37 A0			add ALL_WALLS
 18312 9BC4 85 8A			sta @move.src
 18313 9BC6 A5 87			lda :eax+1
 18314 9BC8 6D 38 A0			adc ALL_WALLS+1
 18315 9BCB 85 8B			sta @move.src+1
 18316 9BCD A9 00			lda <256
 18317 9BCF 85 86			sta @move.cnt
 18318 9BD1 A9 01			lda >256
 18319 9BD3 85 87			sta @move.cnt+1
 18320 9BD5 20 D3 21			jsr @move
 18321 9BD8 4C E6 9B			jmp l_377C
 18322 9BDB			l_372E
 18323
 18324 				; optimize OK (service.pas), line = 3915
 18325
 18326 9BDB AC 10 A2			ldy CUR_PLAYER
 18327 9BDE B9 04 A2			lda adr.SCORE.LIVES,y
 18328 9BE1 D0 03			jne l_3791
 18329 9BE3 20 CC 7A			jsr GAME_OVER
 18330 9BE6			l_377C
 18331 9BE6			l_3791
 18332
 18333 				; optimize OK (service.pas), line = 3920
 18334
 18335 9BE6 AD B1 A4			lda NWALL
 18336 9BE9 F0 03 4C C1 9A		jne l_36CE
 18337
 18338 				; optimize FAIL (0, service.pas), line = 3923
 18339
 18340 9BEE EE 10 A2			inc CUR_PLAYER
 18341
 18342 				; optimize OK (service.pas), line = 3924
 18343
 18344 9BF1 AD AF A4			lda PLAYERS
 18345 9BF4 CD 10 A2			cmp CUR_PLAYER
 18346 9BF7 AD B0 A4			lda PLAYERS+1
 18347 9BFA E9 00			sbc #$00
 18348 9BFC 50 02			svc
 18349 9BFE 49 80			eor #$80
 18350 9C00 10 05			jpl l_37B9
 18351 9C02 A9 01			lda #$01
 18352 9C04 8D 10 A2			sta CUR_PLAYER
 18353 9C07			l_37B9
 18354
 18355 				; optimize OK (service.pas), line = 3930
 18356
 18357 9C07 AC 10 A2			ldy CUR_PLAYER
 18358 9C0A B9 04 A2			lda adr.SCORE.LIVES,y
 18359 9C0D D0 09			jne l_37D5
 18360 9C0F A9 03			lda #$03
 18361 9C11 38 ED 10 A2			sub CUR_PLAYER
 18362 9C15 8D 10 A2			sta CUR_PLAYER
 18363 9C18			l_37D5
 18364
 18365 				; optimize OK (service.pas), line = 3935
 18366
 18367 9C18 A0 01			ldy #1
 18368 9C1A AD 05 A2			lda adr.SCORE.LIVES+$01
 18369 9C1D F0 01			beq @+
 18370 9C1F 88				dey
 18371 				@
 18372 9C20 84 9F			sty :STACKORIGIN+9
 18373 9C22 A0 01			ldy #1
 18374 9C24 AD 06 A2			lda adr.SCORE.LIVES+$02
 18375 9C27 F0 01			beq @+
 18376 9C29 88				dey
 18377 				@
 18378 9C2A 98				tya
 18379 9C2B 25 9F			and :STACKORIGIN+9
 18380 9C2D 0D 0F A2			ora SCORE.ABORTPLAY
 18381 9C30 D0 03 4C C1 9A		jeq l_36CD
 18382
 18383 				; ------------------------------------------------------------
 18384
 18385 = A4AF			PLAYERS	= DATAORIGIN+$0467
 18386 = A4B1			NWALL	= DATAORIGIN+$0469
 18387
 18388 = A4AF			@VarData	= PLAYERS
 18389 = 0003			@VarDataSize	= 3
 18390
 18391 9C35			@exit
 18392 					.ifdef @new
 18393 					lda <@VarData
 18394 					sta :ztmp
 18395 					lda >@VarData
 18396 					ldy #@VarDataSize-1
 18397 					jmp @FreeMem
 18398 					els
 18399 9C35 60				rts						; ret
 18400 					eif
 18401 				.endl
 18402
 18403 9C36			.local	INIT_GAME					; PROCEDURE
 18404
 18405 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 47
 18406
 18407 9C36 20 A9 35			jsr SYSTEM.RANDOMIZE
 18408
 18409 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 49
 18410
 18411 9C39 20 23 3E			jsr INITSVGA
 18412
 18413 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 50
 18414
 18415 9C3C 20 E1 3D			jsr INITROWARRAY
 18416
 18417 				; optimize OK (btm.inc), line = 1
 18418
 18419 9C3F A9 00			lda #$00
 18420 9C41 8D 40 A1			sta PLAYSCREEN.OFS
 18421 9C44 A9 5E			lda #$5E
 18422 9C46 8D 41 A1			sta PLAYSCREEN.OFS+1
 18423 9C49 A9 01			lda #$01
 18424 9C4B 8D 42 A1			sta PLAYSCREEN.OFS+2
 18425 9C4E A9 00			lda #$00
 18426 9C50 8D 43 A1			sta PLAYSCREEN.OFS+3
 18427
 18428 				; optimize OK (btm.inc), line = 2
 18429
 18430 9C53 A9 40			lda #$40
 18431 9C55 8D 3C A1			sta PLAYSCREEN.WIDTH
 18432 9C58 A9 01			lda #$01
 18433 9C5A 8D 3D A1			sta PLAYSCREEN.WIDTH+1
 18434
 18435 				; optimize OK (btm.inc), line = 3
 18436
 18437 9C5D A9 C8			lda #$C8
 18438 9C5F 8D 3E A1			sta PLAYSCREEN.HEIGHT
 18439 9C62 A9 00			lda #$00
 18440 9C64 8D 3F A1			sta PLAYSCREEN.HEIGHT+1
 18441
 18442 				; optimize OK (btm.inc), line = 5
 18443
 18444 9C67 8D 78 A1			sta PRESENTS.OFS
 18445 9C6A A9 58			lda #$58
 18446 9C6C 8D 79 A1			sta PRESENTS.OFS+1
 18447 9C6F A9 02			lda #$02
 18448 9C71 8D 7A A1			sta PRESENTS.OFS+2
 18449 9C74 A9 00			lda #$00
 18450 9C76 8D 7B A1			sta PRESENTS.OFS+3
 18451
 18452 				; optimize OK (btm.inc), line = 6
 18453
 18454 9C79 A9 40			lda #$40
 18455 9C7B 8D 74 A1			sta PRESENTS.WIDTH
 18456 9C7E A9 01			lda #$01
 18457 9C80 8D 75 A1			sta PRESENTS.WIDTH+1
 18458
 18459 				; optimize OK (btm.inc), line = 7
 18460
 18461 9C83 A9 C8			lda #$C8
 18462 9C85 8D 76 A1			sta PRESENTS.HEIGHT
 18463 9C88 A9 00			lda #$00
 18464 9C8A 8D 77 A1			sta PRESENTS.HEIGHT+1
 18465
 18466 				; optimize OK (btm.inc), line = 9
 18467
 18468 9C8D 8D 68 A1			sta EXPLOSION.OFS
 18469 9C90 A9 52			lda #$52
 18470 9C92 8D 69 A1			sta EXPLOSION.OFS+1
 18471 9C95 A9 03			lda #$03
 18472 9C97 8D 6A A1			sta EXPLOSION.OFS+2
 18473 9C9A A9 00			lda #$00
 18474 9C9C 8D 6B A1			sta EXPLOSION.OFS+3
 18475
 18476 				; optimize OK (btm.inc), line = 10
 18477
 18478 9C9F A9 2A			lda #$2A
 18479 9CA1 8D 64 A1			sta EXPLOSION.WIDTH
 18480 9CA4 A9 00			lda #$00
 18481 9CA6 8D 65 A1			sta EXPLOSION.WIDTH+1
 18482
 18483 				; optimize OK (btm.inc), line = 11
 18484
 18485 9CA9 A9 72			lda #$72
 18486 9CAB 8D 66 A1			sta EXPLOSION.HEIGHT
 18487 9CAE A9 00			lda #$00
 18488 9CB0 8D 67 A1			sta EXPLOSION.HEIGHT+1
 18489
 18490 				; optimize OK (btm.inc), line = 13
 18491
 18492 9CB3 A9 B4			lda #$B4
 18493 9CB5 8D 70 A1			sta NEWVAUS.OFS
 18494 9CB8 A9 64			lda #$64
 18495 9CBA 8D 71 A1			sta NEWVAUS.OFS+1
 18496 9CBD A9 03			lda #$03
 18497 9CBF 8D 72 A1			sta NEWVAUS.OFS+2
 18498 9CC2 A9 00			lda #$00
 18499 9CC4 8D 73 A1			sta NEWVAUS.OFS+3
 18500
 18501 				; optimize OK (btm.inc), line = 14
 18502
 18503 9CC7 A9 29			lda #$29
 18504 9CC9 8D 6C A1			sta NEWVAUS.WIDTH
 18505 9CCC A9 00			lda #$00
 18506 9CCE 8D 6D A1			sta NEWVAUS.WIDTH+1
 18507
 18508 				; optimize OK (btm.inc), line = 15
 18509
 18510 9CD1 A9 C1			lda #$C1
 18511 9CD3 8D 6E A1			sta NEWVAUS.HEIGHT
 18512 9CD6 A9 00			lda #$00
 18513 9CD8 8D 6F A1			sta NEWVAUS.HEIGHT+1
 18514
 18515 				; optimize OK (btm.inc), line = 17
 18516
 18517 9CDB A9 9D			lda #$9D
 18518 9CDD 8D 80 A1			sta SOUNDFX.OFS
 18519 9CE0 A9 83			lda #$83
 18520 9CE2 8D 81 A1			sta SOUNDFX.OFS+1
 18521 9CE5 A9 03			lda #$03
 18522 9CE7 8D 82 A1			sta SOUNDFX.OFS+2
 18523 9CEA A9 00			lda #$00
 18524 9CEC 8D 83 A1			sta SOUNDFX.OFS+3
 18525
 18526 				; optimize OK (btm.inc), line = 18
 18527
 18528 9CEF A9 15			lda #$15
 18529 9CF1 8D 7C A1			sta SOUNDFX.WIDTH
 18530 9CF4 A9 00			lda #$00
 18531 9CF6 8D 7D A1			sta SOUNDFX.WIDTH+1
 18532
 18533 				; optimize OK (btm.inc), line = 19
 18534
 18535 9CF9 A9 26			lda #$26
 18536 9CFB 8D 7E A1			sta SOUNDFX.HEIGHT
 18537 9CFE A9 00			lda #$00
 18538 9D00 8D 7F A1			sta SOUNDFX.HEIGHT+1
 18539
 18540 				; optimize OK (btm.inc), line = 21
 18541
 18542 9D03 A9 BB			lda #$BB
 18543 9D05 8D 88 A1			sta SHINEWALL.OFS
 18544 9D08 A9 86			lda #$86
 18545 9D0A 8D 89 A1			sta SHINEWALL.OFS+1
 18546 9D0D A9 03			lda #$03
 18547 9D0F 8D 8A A1			sta SHINEWALL.OFS+2
 18548 9D12 A9 00			lda #$00
 18549 9D14 8D 8B A1			sta SHINEWALL.OFS+3
 18550
 18551 				; optimize OK (btm.inc), line = 22
 18552
 18553 9D17 A9 10			lda #$10
 18554 9D19 8D 84 A1			sta SHINEWALL.WIDTH
 18555 9D1C A9 00			lda #$00
 18556 9D1E 8D 85 A1			sta SHINEWALL.WIDTH+1
 18557
 18558 				; optimize OK (btm.inc), line = 23
 18559
 18560 9D21 A9 50			lda #$50
 18561 9D23 8D 86 A1			sta SHINEWALL.HEIGHT
 18562 9D26 A9 00			lda #$00
 18563 9D28 8D 87 A1			sta SHINEWALL.HEIGHT+1
 18564
 18565 				; optimize OK (btm.inc), line = 25
 18566
 18567 9D2B A9 BB			lda #$BB
 18568 9D2D 8D 90 A1			sta MINIVAUS.OFS
 18569 9D30 A9 8B			lda #$8B
 18570 9D32 8D 91 A1			sta MINIVAUS.OFS+1
 18571 9D35 A9 03			lda #$03
 18572 9D37 8D 92 A1			sta MINIVAUS.OFS+2
 18573 9D3A A9 00			lda #$00
 18574 9D3C 8D 93 A1			sta MINIVAUS.OFS+3
 18575
 18576 				; optimize OK (btm.inc), line = 26
 18577
 18578 9D3F A9 14			lda #$14
 18579 9D41 8D 8C A1			sta MINIVAUS.WIDTH
 18580 9D44 A9 00			lda #$00
 18581 9D46 8D 8D A1			sta MINIVAUS.WIDTH+1
 18582
 18583 				; optimize OK (btm.inc), line = 27
 18584
 18585 9D49 A9 05			lda #$05
 18586 9D4B 8D 8E A1			sta MINIVAUS.HEIGHT
 18587 9D4E A9 00			lda #$00
 18588 9D50 8D 8F A1			sta MINIVAUS.HEIGHT+1
 18589
 18590 				; optimize OK (btm.inc), line = 29
 18591
 18592 9D53 A9 1F			lda #$1F
 18593 9D55 8D 98 A1			sta LEVELSEL.OFS
 18594 9D58 A9 8C			lda #$8C
 18595 9D5A 8D 99 A1			sta LEVELSEL.OFS+1
 18596 9D5D A9 03			lda #$03
 18597 9D5F 8D 9A A1			sta LEVELSEL.OFS+2
 18598 9D62 A9 00			lda #$00
 18599 9D64 8D 9B A1			sta LEVELSEL.OFS+3
 18600
 18601 				; optimize OK (btm.inc), line = 30
 18602
 18603 9D67 A9 15			lda #$15
 18604 9D69 8D 94 A1			sta LEVELSEL.WIDTH
 18605 9D6C A9 00			lda #$00
 18606 9D6E 8D 95 A1			sta LEVELSEL.WIDTH+1
 18607
 18608 				; optimize OK (btm.inc), line = 31
 18609
 18610 9D71 A9 5F			lda #$5F
 18611 9D73 8D 96 A1			sta LEVELSEL.HEIGHT
 18612 9D76 A9 00			lda #$00
 18613 9D78 8D 97 A1			sta LEVELSEL.HEIGHT+1
 18614
 18615 				; optimize OK (btm.inc), line = 33
 18616
 18617 9D7B A9 EA			lda #$EA
 18618 9D7D 8D A0 A1			sta LETTERS.OFS
 18619 9D80 A9 93			lda #$93
 18620 9D82 8D A1 A1			sta LETTERS.OFS+1
 18621 9D85 A9 03			lda #$03
 18622 9D87 8D A2 A1			sta LETTERS.OFS+2
 18623 9D8A A9 00			lda #$00
 18624 9D8C 8D A3 A1			sta LETTERS.OFS+3
 18625
 18626 				; optimize OK (btm.inc), line = 34
 18627
 18628 9D8F A9 80			lda #$80
 18629 9D91 8D 9C A1			sta LETTERS.WIDTH
 18630 9D94 A9 00			lda #$00
 18631 9D96 8D 9D A1			sta LETTERS.WIDTH+1
 18632
 18633 				; optimize OK (btm.inc), line = 35
 18634
 18635 9D99 A9 38			lda #$38
 18636 9D9B 8D 9E A1			sta LETTERS.HEIGHT
 18637 9D9E A9 00			lda #$00
 18638 9DA0 8D 9F A1			sta LETTERS.HEIGHT+1
 18639
 18640 				; optimize OK (btm.inc), line = 37
 18641
 18642 9DA3 A9 EA			lda #$EA
 18643 9DA5 8D 50 A1			sta NORMAL.OFS
 18644 9DA8 A9 AF			lda #$AF
 18645 9DAA 8D 51 A1			sta NORMAL.OFS+1
 18646 9DAD A9 03			lda #$03
 18647 9DAF 8D 52 A1			sta NORMAL.OFS+2
 18648 9DB2 A9 00			lda #$00
 18649 9DB4 8D 53 A1			sta NORMAL.OFS+3
 18650
 18651 				; optimize OK (btm.inc), line = 38
 18652
 18653 9DB7 A9 20			lda #$20
 18654 9DB9 8D 4C A1			sta NORMAL.WIDTH
 18655 9DBC A9 00			lda #$00
 18656 9DBE 8D 4D A1			sta NORMAL.WIDTH+1
 18657
 18658 				; optimize OK (btm.inc), line = 39
 18659
 18660 9DC1 A9 07			lda #$07
 18661 9DC3 8D 4E A1			sta NORMAL.HEIGHT
 18662 9DC6 A9 00			lda #$00
 18663 9DC8 8D 4F A1			sta NORMAL.HEIGHT+1
 18664
 18665 				; optimize OK (btm.inc), line = 41
 18666
 18667 9DCB A9 CA			lda #$CA
 18668 9DCD 8D 60 A1			sta LASERS.OFS
 18669 9DD0 A9 B0			lda #$B0
 18670 9DD2 8D 61 A1			sta LASERS.OFS+1
 18671 9DD5 A9 03			lda #$03
 18672 9DD7 8D 62 A1			sta LASERS.OFS+2
 18673 9DDA A9 00			lda #$00
 18674 9DDC 8D 63 A1			sta LASERS.OFS+3
 18675
 18676 				; optimize OK (btm.inc), line = 42
 18677
 18678 9DDF A9 20			lda #$20
 18679 9DE1 8D 5C A1			sta LASERS.WIDTH
 18680 9DE4 A9 00			lda #$00
 18681 9DE6 8D 5D A1			sta LASERS.WIDTH+1
 18682
 18683 				; optimize OK (btm.inc), line = 43
 18684
 18685 9DE9 A9 07			lda #$07
 18686 9DEB 8D 5E A1			sta LASERS.HEIGHT
 18687 9DEE A9 00			lda #$00
 18688 9DF0 8D 5F A1			sta LASERS.HEIGHT+1
 18689
 18690 				; optimize OK (btm.inc), line = 45
 18691
 18692 9DF3 A9 AA			lda #$AA
 18693 9DF5 8D 58 A1			sta ENLARGED.OFS
 18694 9DF8 A9 B1			lda #$B1
 18695 9DFA 8D 59 A1			sta ENLARGED.OFS+1
 18696 9DFD A9 03			lda #$03
 18697 9DFF 8D 5A A1			sta ENLARGED.OFS+2
 18698 9E02 A9 00			lda #$00
 18699 9E04 8D 5B A1			sta ENLARGED.OFS+3
 18700
 18701 				; optimize OK (btm.inc), line = 46
 18702
 18703 9E07 A9 40			lda #$40
 18704 9E09 8D 54 A1			sta ENLARGED.WIDTH
 18705 9E0C A9 00			lda #$00
 18706 9E0E 8D 55 A1			sta ENLARGED.WIDTH+1
 18707
 18708 				; optimize OK (btm.inc), line = 47
 18709
 18710 9E11 A9 07			lda #$07
 18711 9E13 8D 56 A1			sta ENLARGED.HEIGHT
 18712 9E16 A9 00			lda #$00
 18713 9E18 8D 57 A1			sta ENLARGED.HEIGHT+1
 18714
 18715 				; optimize OK (btm.inc), line = 49
 18716
 18717 9E1B A9 6A			lda #$6A
 18718 9E1D 8D A8 A1			sta SHOOTS.OFS
 18719 9E20 A9 B3			lda #$B3
 18720 9E22 8D A9 A1			sta SHOOTS.OFS+1
 18721 9E25 A9 03			lda #$03
 18722 9E27 8D AA A1			sta SHOOTS.OFS+2
 18723 9E2A A9 00			lda #$00
 18724 9E2C 8D AB A1			sta SHOOTS.OFS+3
 18725
 18726 				; optimize OK (btm.inc), line = 50
 18727
 18728 9E2F A9 0D			lda #$0D
 18729 9E31 8D A4 A1			sta SHOOTS.WIDTH
 18730 9E34 A9 00			lda #$00
 18731 9E36 8D A5 A1			sta SHOOTS.WIDTH+1
 18732
 18733 				; optimize OK (btm.inc), line = 51
 18734
 18735 9E39 A9 08			lda #$08
 18736 9E3B 8D A6 A1			sta SHOOTS.HEIGHT
 18737 9E3E A9 00			lda #$00
 18738 9E40 8D A7 A1			sta SHOOTS.HEIGHT+1
 18739
 18740 				; optimize OK (btm.inc), line = 53
 18741
 18742 9E43 A9 D2			lda #$D2
 18743 9E45 8D B0 A1			sta FLUX.OFS
 18744 9E48 A9 B3			lda #$B3
 18745 9E4A 8D B1 A1			sta FLUX.OFS+1
 18746 9E4D A9 03			lda #$03
 18747 9E4F 8D B2 A1			sta FLUX.OFS+2
 18748 9E52 A9 00			lda #$00
 18749 9E54 8D B3 A1			sta FLUX.OFS+3
 18750
 18751 				; optimize OK (btm.inc), line = 54
 18752
 18753 9E57 A9 08			lda #$08
 18754 9E59 8D AC A1			sta FLUX.WIDTH
 18755 9E5C A9 00			lda #$00
 18756 9E5E 8D AD A1			sta FLUX.WIDTH+1
 18757
 18758 				; optimize OK (btm.inc), line = 55
 18759
 18760 9E61 A9 29			lda #$29
 18761 9E63 8D AE A1			sta FLUX.HEIGHT
 18762 9E66 A9 00			lda #$00
 18763 9E68 8D AF A1			sta FLUX.HEIGHT+1
 18764
 18765 				; optimize OK (btm.inc), line = 57
 18766
 18767 9E6B A9 1A			lda #$1A
 18768 9E6D 8D 38 A1			sta BALLDATA.OFS
 18769 9E70 A9 B5			lda #$B5
 18770 9E72 8D 39 A1			sta BALLDATA.OFS+1
 18771 9E75 A9 03			lda #$03
 18772 9E77 8D 3A A1			sta BALLDATA.OFS+2
 18773 9E7A A9 00			lda #$00
 18774 9E7C 8D 3B A1			sta BALLDATA.OFS+3
 18775
 18776 				; optimize OK (btm.inc), line = 58
 18777
 18778 9E7F A9 05			lda #$05
 18779 9E81 8D 34 A1			sta BALLDATA.WIDTH
 18780 9E84 A9 00			lda #$00
 18781 9E86 8D 35 A1			sta BALLDATA.WIDTH+1
 18782
 18783 				; optimize OK (btm.inc), line = 59
 18784
 18785 9E89 A9 05			lda #$05
 18786 9E8B 8D 36 A1			sta BALLDATA.HEIGHT
 18787 9E8E A9 00			lda #$00
 18788 9E90 8D 37 A1			sta BALLDATA.HEIGHT+1
 18789
 18790 				; optimize OK (btm.inc), line = 61
 18791
 18792 9E93 A9 33			lda #$33
 18793 9E95 8D C5 A1			sta PATTERN.OFS
 18794 9E98 A9 B5			lda #$B5
 18795 9E9A 8D C6 A1			sta PATTERN.OFS+1
 18796 9E9D A9 03			lda #$03
 18797 9E9F 8D C7 A1			sta PATTERN.OFS+2
 18798 9EA2 A9 00			lda #$00
 18799 9EA4 8D C8 A1			sta PATTERN.OFS+3
 18800
 18801 				; optimize OK (btm.inc), line = 62
 18802
 18803 9EA7 A9 1A			lda #$1A
 18804 9EA9 8D C1 A1			sta PATTERN.WIDTH
 18805 9EAC A9 00			lda #$00
 18806 9EAE 8D C2 A1			sta PATTERN.WIDTH+1
 18807
 18808 				; optimize OK (btm.inc), line = 63
 18809
 18810 9EB1 A9 18			lda #$18
 18811 9EB3 8D C3 A1			sta PATTERN.HEIGHT
 18812 9EB6 A9 00			lda #$00
 18813 9EB8 8D C4 A1			sta PATTERN.HEIGHT+1
 18814
 18815 				; optimize OK (btm.inc), line = 65
 18816
 18817 9EBB A9 A3			lda #$A3
 18818 9EBD 8D CD A1			sta PATTERN0.OFS
 18819 9EC0 A9 B7			lda #$B7
 18820 9EC2 8D CE A1			sta PATTERN0.OFS+1
 18821 9EC5 A9 03			lda #$03
 18822 9EC7 8D CF A1			sta PATTERN0.OFS+2
 18823 9ECA A9 00			lda #$00
 18824 9ECC 8D D0 A1			sta PATTERN0.OFS+3
 18825
 18826 				; optimize OK (btm.inc), line = 66
 18827
 18828 9ECF A9 1A			lda #$1A
 18829 9ED1 8D C9 A1			sta PATTERN0.WIDTH
 18830 9ED4 A9 00			lda #$00
 18831 9ED6 8D CA A1			sta PATTERN0.WIDTH+1
 18832
 18833 				; optimize OK (btm.inc), line = 67
 18834
 18835 9ED9 A9 18			lda #$18
 18836 9EDB 8D CB A1			sta PATTERN0.HEIGHT
 18837 9EDE A9 00			lda #$00
 18838 9EE0 8D CC A1			sta PATTERN0.HEIGHT+1
 18839
 18840 				; optimize OK (btm.inc), line = 69
 18841
 18842 9EE3 A9 13			lda #$13
 18843 9EE5 8D D5 A1			sta PATTERN1.OFS
 18844 9EE8 A9 BA			lda #$BA
 18845 9EEA 8D D6 A1			sta PATTERN1.OFS+1
 18846 9EED A9 03			lda #$03
 18847 9EEF 8D D7 A1			sta PATTERN1.OFS+2
 18848 9EF2 A9 00			lda #$00
 18849 9EF4 8D D8 A1			sta PATTERN1.OFS+3
 18850
 18851 				; optimize OK (btm.inc), line = 70
 18852
 18853 9EF7 A9 0E			lda #$0E
 18854 9EF9 8D D1 A1			sta PATTERN1.WIDTH
 18855 9EFC A9 00			lda #$00
 18856 9EFE 8D D2 A1			sta PATTERN1.WIDTH+1
 18857
 18858 				; optimize OK (btm.inc), line = 71
 18859
 18860 9F01 A9 0E			lda #$0E
 18861 9F03 8D D3 A1			sta PATTERN1.HEIGHT
 18862 9F06 A9 00			lda #$00
 18863 9F08 8D D4 A1			sta PATTERN1.HEIGHT+1
 18864
 18865 				; optimize OK (btm.inc), line = 73
 18866
 18867 9F0B A9 D7			lda #$D7
 18868 9F0D 8D DD A1			sta PATTERN2.OFS
 18869 9F10 A9 BA			lda #$BA
 18870 9F12 8D DE A1			sta PATTERN2.OFS+1
 18871 9F15 A9 03			lda #$03
 18872 9F17 8D DF A1			sta PATTERN2.OFS+2
 18873 9F1A A9 00			lda #$00
 18874 9F1C 8D E0 A1			sta PATTERN2.OFS+3
 18875
 18876 				; optimize OK (btm.inc), line = 74
 18877
 18878 9F1F A9 26			lda #$26
 18879 9F21 8D D9 A1			sta PATTERN2.WIDTH
 18880 9F24 A9 00			lda #$00
 18881 9F26 8D DA A1			sta PATTERN2.WIDTH+1
 18882
 18883 				; optimize OK (btm.inc), line = 75
 18884
 18885 9F29 A9 23			lda #$23
 18886 9F2B 8D DB A1			sta PATTERN2.HEIGHT
 18887 9F2E A9 00			lda #$00
 18888 9F30 8D DC A1			sta PATTERN2.HEIGHT+1
 18889
 18890 				; optimize OK (btm.inc), line = 77
 18891
 18892 9F33 A9 09			lda #$09
 18893 9F35 8D E5 A1			sta PATTERN3.OFS
 18894 9F38 A9 C0			lda #$C0
 18895 9F3A 8D E6 A1			sta PATTERN3.OFS+1
 18896 9F3D A9 03			lda #$03
 18897 9F3F 8D E7 A1			sta PATTERN3.OFS+2
 18898 9F42 A9 00			lda #$00
 18899 9F44 8D E8 A1			sta PATTERN3.OFS+3
 18900
 18901 				; optimize OK (btm.inc), line = 78
 18902
 18903 9F47 A9 1C			lda #$1C
 18904 9F49 8D E1 A1			sta PATTERN3.WIDTH
 18905 9F4C A9 00			lda #$00
 18906 9F4E 8D E2 A1			sta PATTERN3.WIDTH+1
 18907
 18908 				; optimize OK (btm.inc), line = 79
 18909
 18910 9F51 A9 1D			lda #$1D
 18911 9F53 8D E3 A1			sta PATTERN3.HEIGHT
 18912 9F56 A9 00			lda #$00
 18913 9F58 8D E4 A1			sta PATTERN3.HEIGHT+1
 18914
 18915 				; optimize OK (btm.inc), line = 81
 18916
 18917 9F5B A9 35			lda #$35
 18918 9F5D 8D ED A1			sta PATTERN4.OFS
 18919 9F60 A9 C3			lda #$C3
 18920 9F62 8D EE A1			sta PATTERN4.OFS+1
 18921 9F65 A9 03			lda #$03
 18922 9F67 8D EF A1			sta PATTERN4.OFS+2
 18923 9F6A A9 00			lda #$00
 18924 9F6C 8D F0 A1			sta PATTERN4.OFS+3
 18925
 18926 				; optimize OK (btm.inc), line = 82
 18927
 18928 9F6F A9 1E			lda #$1E
 18929 9F71 8D E9 A1			sta PATTERN4.WIDTH
 18930 9F74 A9 00			lda #$00
 18931 9F76 8D EA A1			sta PATTERN4.WIDTH+1
 18932
 18933 				; optimize OK (btm.inc), line = 83
 18934
 18935 9F79 A9 1E			lda #$1E
 18936 9F7B 8D EB A1			sta PATTERN4.HEIGHT
 18937 9F7E A9 00			lda #$00
 18938 9F80 8D EC A1			sta PATTERN4.HEIGHT+1
 18939
 18940 				; optimize OK (arkanoid_vbxe.pas), line = 57
 18941
 18942 9F83 A9 20			lda #$20
 18943 9F85 8D F4 A1			sta TOTALWALL
 18944
 18945 				; optimize OK (arkanoid_vbxe.pas), line = 59
 18946
 18947 9F88 A9 50			lda #$50
 18948 9F8A 8D 07 A2			sta SCORE.HISCORE
 18949 9F8D A9 C3			lda #$C3
 18950 9F8F 8D 08 A2			sta SCORE.HISCORE+1
 18951 9F92 A9 00			lda #$00
 18952 9F94 8D 09 A2			sta SCORE.HISCORE+2
 18953 9F97 8D 0A A2			sta SCORE.HISCORE+3
 18954
 18955 				; optimize OK (arkanoid_vbxe.pas), line = 62
 18956
 18957 9F9A A9 01			lda #$01
 18958 9F9C 8D 32 A2			sta SOUND_ON
 18959
 18960 				; optimize OK (arkanoid_vbxe.pas), line = 63
 18961
 18962 9F9F A9 03			lda #$03
 18963 9FA1 8D 16 A2			sta LV
 18964 9FA4 A9 00			lda #$00
 18965 9FA6 8D 17 A2			sta LV+1
 18966
 18967 				; --- RepeatUntilProlog
 18968 9FA9			l_3917
 18969
 18970 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 70
 18971
 18972 9FA9 20 89 99			jsr MAINSCREEN
 18973 9FAC AD A3 A4			lda MAINSCREEN.RESULT
 18974 9FAF 8D 0B A2			sta SCORE.PL_NUMB
 18975
 18976 				; optimize OK (arkanoid_vbxe.pas), line = 72
 18977
 18978 9FB2 F0 0D			jeq l_392D
 18979 9FB4 A9 01			lda #$01
 18980 9FB6 8D AF A4			sta START_GAME.PLAYERS
 18981 9FB9 A9 00			lda #$00
 18982 9FBB 8D B0 A4			sta START_GAME.PLAYERS+1
 18983 9FBE 20 D8 99			jsr START_GAME
 18984 9FC1			l_392D
 18985
 18986 				; optimize OK (arkanoid_vbxe.pas), line = 74
 18987
 18988 9FC1 AD 0B A2			lda SCORE.PL_NUMB
 18989 9FC4 C9 01			cmp #$01
 18990 9FC6 B0 E1			jcs l_3917
 18991
 18992 9FC8			@exit
 18993 					.ifdef @new
 18994 					lda <@VarData
 18995 					sta :ztmp
 18996 					lda >@VarData
 18997 					ldy #@VarDataSize-1
 18998 					jmp @FreeMem
 18999 					els
 19000 9FC8 60				rts						; ret
 19001 					eif
 19002 				.endl
 19003 9FC9			l_0022
 19004
 19005 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 82
 19006
 19007 9FC9 20 36 9C			jsr INIT_GAME
 19008
 19009 				; ------------------------------------------------------------
 19010
 19011 = 015E00			VBXE_DATA	= $15E00
 19012 = B100			adr.BLT	= $B100
 19013 9FCC			.var BLT	= adr.BLT .word
 19014 = B100			adr.BLT.SRC_ADR	= $B100
 19015 9FCC			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 19016 = B100			BLT.SRC_ADR.BYTE0	= $B100
 19017 = B101			BLT.SRC_ADR.BYTE1	= $B101
 19018 = B102			BLT.SRC_ADR.BYTE2	= $B102
 19019 = B103			BLT.SRC_STEP_Y	= $B103
 19020 = B105			BLT.SRC_STEP_X	= $B105
 19021 = B106			adr.BLT.DST_ADR	= $B106
 19022 9FCC			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 19023 = B106			BLT.DST_ADR.BYTE0	= $B106
 19024 = B107			BLT.DST_ADR.BYTE1	= $B107
 19025 = B108			BLT.DST_ADR.BYTE2	= $B108
 19026 = B109			BLT.DST_STEP_Y	= $B109
 19027 = B10B			BLT.DST_STEP_X	= $B10B
 19028 = B10C			BLT.BLT_WIDTH	= $B10C
 19029 = B10E			BLT.BLT_HEIGHT	= $B10E
 19030 = B10F			BLT.BLT_AND_MASK	= $B10F
 19031 = B110			BLT.BLT_XOR_MASK	= $B110
 19032 = B111			BLT.BLT_COLLISION_MASK	= $B111
 19033 = B112			BLT.BLT_ZOOM	= $B112
 19034 = B113			BLT.PATTERN_FEATURE	= $B113
 19035 = B114			BLT.BLT_CONTROL	= $B114
 19036 = A126			adr.VBXE_RAM	= DATAORIGIN+$00DE	; [8] OBJECT
 19037 9FCC			.var VBXE_RAM	= adr.VBXE_RAM .word
 19038 = A126			VBXE_RAM.POSITION	= DATAORIGIN+$00DE
 19039 = A12A			VBXE_RAM.SIZE	= DATAORIGIN+$00E2
 19040 = 5000			VRAM	= $5000
 19041 = 0001			ERR1	= $01
 19042 = 0002			ERR2	= $02
 19043 = 0003			ERR3	= $03
 19044 = 0004			ERR4	= $04
 19045 = 000A			SCRMIN	= $0A
 19046 = 00D8			SCRMAX	= $D8
 19047 = 000C			SCRTOP	= $0C
 19048 = 00C8			SCRBOT	= $C8
 19049 = 0022			VAUS_W	= $22
 19050 = 0004			VAUS_H	= $04
 19051 = 00B8			VAUS_LINE	= $B8
 19052 = 00FF			EMP	= $FF
 19053 = 0005			BALLDIM	= $05
 19054 = 0003			BALLSPOT	= $03
 19055 = 001E			BALLDEV	= $1E
 19056 = 000A			SPEEDFLASH	= $0A
 19057 = 205E			adr.FLASH	= CODEORIGIN+$005E
 19058 9FCC			.var FLASH	= adr.FLASH .word
 19059 = 2069			adr.SCORE_WALL	= CODEORIGIN+$0069
 19060 9FCC			.var SCORE_WALL	= adr.SCORE_WALL .word
 19061 = 207F			adr.EMERG_DEV	= CODEORIGIN+$007F
 19062 9FCC			.var EMERG_DEV	= adr.EMERG_DEV .word
 19063 = 2088			adr.COLORBLOCK	= CODEORIGIN+$0088
 19064 9FCC			.var COLORBLOCK	= adr.COLORBLOCK .word
 19065 = 0001			GRAYDOWN	= $01
 19066 = 0001			STARTWALL	= $01
 19067 = 01F4			BALLSPEED	= $01F4
 19068 = 07D0			MAXSPEED	= $07D0
 19069 = 0064			MAXBRWHIT	= $64
 19070 = 0004			PATNUMBER	= $04
 19071 = 2092			adr.POS_DIGIT	= CODEORIGIN+$0092
 19072 9FCC			.var POS_DIGIT	= adr.POS_DIGIT .word
 19073 = 2096			adr.DIGITS	= CODEORIGIN+$0096
 19074 9FCC			.var DIGITS	= adr.DIGITS .word
 19075 = 20A1			adr.LEVEL	= CODEORIGIN+$00A1
 19076 9FCC			.var LEVEL	= adr.LEVEL .word
 19077 = 0258			SBDIR	= $0258
 19078 = 0003			DEFLEVEL	= $03
 19079 = 012C			LETTER_PROB	= $012C
 19080 = 03E8			LETTER_DROP	= $03E8
 19081 = 0008			LETTER_NUMB	= $08
 19082 = 0008			LETTER_FRM	= $08
 19083 = 0005			LETTER_SBF	= $05
 19084 = 20AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 19085 9FCC			.var LETTER_DIS	= adr.LETTER_DIS .word
 19086 = 00B0			FLUXLEVEL	= $B0
 19087 = A134			adr.BALLDATA	= DATAORIGIN+$00EC	; [8] RECORD
 19088 9FCC			.var BALLDATA	= adr.BALLDATA .word
 19089 = A134			BALLDATA.WIDTH	= DATAORIGIN+$00EC
 19090 = A136			BALLDATA.HEIGHT	= DATAORIGIN+$00EE
 19091 = A138			BALLDATA.OFS	= DATAORIGIN+$00F0
 19092 = A13C			adr.PLAYSCREEN	= DATAORIGIN+$00F4	; [8] RECORD
 19093 9FCC			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 19094 = A13C			PLAYSCREEN.WIDTH	= DATAORIGIN+$00F4
 19095 = A13E			PLAYSCREEN.HEIGHT	= DATAORIGIN+$00F6
 19096 = A140			PLAYSCREEN.OFS	= DATAORIGIN+$00F8
 19097 = A144			adr.PLAYVAUS	= DATAORIGIN+$00FC	; [8] RECORD
 19098 9FCC			.var PLAYVAUS	= adr.PLAYVAUS .word
 19099 = A144			PLAYVAUS.WIDTH	= DATAORIGIN+$00FC
 19100 = A146			PLAYVAUS.HEIGHT	= DATAORIGIN+$00FE
 19101 = A148			PLAYVAUS.OFS	= DATAORIGIN+$0100
 19102 = A14C			adr.NORMAL	= DATAORIGIN+$0104	; [8] RECORD
 19103 9FCC			.var NORMAL	= adr.NORMAL .word
 19104 = A14C			NORMAL.WIDTH	= DATAORIGIN+$0104
 19105 = A14E			NORMAL.HEIGHT	= DATAORIGIN+$0106
 19106 = A150			NORMAL.OFS	= DATAORIGIN+$0108
 19107 = A154			adr.ENLARGED	= DATAORIGIN+$010C	; [8] RECORD
 19108 9FCC			.var ENLARGED	= adr.ENLARGED .word
 19109 = A154			ENLARGED.WIDTH	= DATAORIGIN+$010C
 19110 = A156			ENLARGED.HEIGHT	= DATAORIGIN+$010E
 19111 = A158			ENLARGED.OFS	= DATAORIGIN+$0110
 19112 = A15C			adr.LASERS	= DATAORIGIN+$0114	; [8] RECORD
 19113 9FCC			.var LASERS	= adr.LASERS .word
 19114 = A15C			LASERS.WIDTH	= DATAORIGIN+$0114
 19115 = A15E			LASERS.HEIGHT	= DATAORIGIN+$0116
 19116 = A160			LASERS.OFS	= DATAORIGIN+$0118
 19117 = A164			adr.EXPLOSION	= DATAORIGIN+$011C	; [8] RECORD
 19118 9FCC			.var EXPLOSION	= adr.EXPLOSION .word
 19119 = A164			EXPLOSION.WIDTH	= DATAORIGIN+$011C
 19120 = A166			EXPLOSION.HEIGHT	= DATAORIGIN+$011E
 19121 = A168			EXPLOSION.OFS	= DATAORIGIN+$0120
 19122 = A16C			adr.NEWVAUS	= DATAORIGIN+$0124	; [8] RECORD
 19123 9FCC			.var NEWVAUS	= adr.NEWVAUS .word
 19124 = A16C			NEWVAUS.WIDTH	= DATAORIGIN+$0124
 19125 = A16E			NEWVAUS.HEIGHT	= DATAORIGIN+$0126
 19126 = A170			NEWVAUS.OFS	= DATAORIGIN+$0128
 19127 = A174			adr.PRESENTS	= DATAORIGIN+$012C	; [8] RECORD
 19128 9FCC			.var PRESENTS	= adr.PRESENTS .word
 19129 = A174			PRESENTS.WIDTH	= DATAORIGIN+$012C
 19130 = A176			PRESENTS.HEIGHT	= DATAORIGIN+$012E
 19131 = A178			PRESENTS.OFS	= DATAORIGIN+$0130
 19132 = A17C			adr.SOUNDFX	= DATAORIGIN+$0134	; [8] RECORD
 19133 9FCC			.var SOUNDFX	= adr.SOUNDFX .word
 19134 = A17C			SOUNDFX.WIDTH	= DATAORIGIN+$0134
 19135 = A17E			SOUNDFX.HEIGHT	= DATAORIGIN+$0136
 19136 = A180			SOUNDFX.OFS	= DATAORIGIN+$0138
 19137 = A184			adr.SHINEWALL	= DATAORIGIN+$013C	; [8] RECORD
 19138 9FCC			.var SHINEWALL	= adr.SHINEWALL .word
 19139 = A184			SHINEWALL.WIDTH	= DATAORIGIN+$013C
 19140 = A186			SHINEWALL.HEIGHT	= DATAORIGIN+$013E
 19141 = A188			SHINEWALL.OFS	= DATAORIGIN+$0140
 19142 = A18C			adr.MINIVAUS	= DATAORIGIN+$0144	; [8] RECORD
 19143 9FCC			.var MINIVAUS	= adr.MINIVAUS .word
 19144 = A18C			MINIVAUS.WIDTH	= DATAORIGIN+$0144
 19145 = A18E			MINIVAUS.HEIGHT	= DATAORIGIN+$0146
 19146 = A190			MINIVAUS.OFS	= DATAORIGIN+$0148
 19147 = A194			adr.LEVELSEL	= DATAORIGIN+$014C	; [8] RECORD
 19148 9FCC			.var LEVELSEL	= adr.LEVELSEL .word
 19149 = A194			LEVELSEL.WIDTH	= DATAORIGIN+$014C
 19150 = A196			LEVELSEL.HEIGHT	= DATAORIGIN+$014E
 19151 = A198			LEVELSEL.OFS	= DATAORIGIN+$0150
 19152 = A19C			adr.LETTERS	= DATAORIGIN+$0154	; [8] RECORD
 19153 9FCC			.var LETTERS	= adr.LETTERS .word
 19154 = A19C			LETTERS.WIDTH	= DATAORIGIN+$0154
 19155 = A19E			LETTERS.HEIGHT	= DATAORIGIN+$0156
 19156 = A1A0			LETTERS.OFS	= DATAORIGIN+$0158
 19157 = A1A4			adr.SHOOTS	= DATAORIGIN+$015C	; [8] RECORD
 19158 9FCC			.var SHOOTS	= adr.SHOOTS .word
 19159 = A1A4			SHOOTS.WIDTH	= DATAORIGIN+$015C
 19160 = A1A6			SHOOTS.HEIGHT	= DATAORIGIN+$015E
 19161 = A1A8			SHOOTS.OFS	= DATAORIGIN+$0160
 19162 = A1AC			adr.FLUX	= DATAORIGIN+$0164	; [8] RECORD
 19163 9FCC			.var FLUX	= adr.FLUX .word
 19164 = A1AC			FLUX.WIDTH	= DATAORIGIN+$0164
 19165 = A1AE			FLUX.HEIGHT	= DATAORIGIN+$0166
 19166 = A1B0			FLUX.OFS	= DATAORIGIN+$0168
 19167 = A1B4			adr.VAUS	= DATAORIGIN+$016C	; [13] RECORD
 19168 9FCC			.var VAUS	= adr.VAUS .word
 19169 = A1B4			VAUS.X	= DATAORIGIN+$016C
 19170 = A1B5			VAUS.Y	= DATAORIGIN+$016D
 19171 = A1B6			VAUS.OLDX	= DATAORIGIN+$016E
 19172 = A1B8			VAUS.OLDY	= DATAORIGIN+$0170
 19173 = A1BA			VAUS.OLDLEN	= DATAORIGIN+$0172
 19174 = A1BC			VAUS.WIDTH	= DATAORIGIN+$0174
 19175 = A1BD			VAUS.HEIGHT	= DATAORIGIN+$0175
 19176 = A1BE			VAUS.FLASH	= DATAORIGIN+$0176
 19177 = A1BF			VAUS.IFLASH	= DATAORIGIN+$0177
 19178 = A1C0			VAUS.LETTER	= DATAORIGIN+$0178
 19179 = A1C1			adr.PATTERN	= DATAORIGIN+$0179	; [8] RECORD
 19180 9FCC			.var PATTERN	= adr.PATTERN .word
 19181 = A1C1			PATTERN.WIDTH	= DATAORIGIN+$0179
 19182 = A1C3			PATTERN.HEIGHT	= DATAORIGIN+$017B
 19183 = A1C5			PATTERN.OFS	= DATAORIGIN+$017D
 19184 = A1C9			adr.PATTERN0	= DATAORIGIN+$0181	; [8] RECORD
 19185 9FCC			.var PATTERN0	= adr.PATTERN0 .word
 19186 = A1C9			PATTERN0.WIDTH	= DATAORIGIN+$0181
 19187 = A1CB			PATTERN0.HEIGHT	= DATAORIGIN+$0183
 19188 = A1CD			PATTERN0.OFS	= DATAORIGIN+$0185
 19189 = A1D1			adr.PATTERN1	= DATAORIGIN+$0189	; [8] RECORD
 19190 9FCC			.var PATTERN1	= adr.PATTERN1 .word
 19191 = A1D1			PATTERN1.WIDTH	= DATAORIGIN+$0189
 19192 = A1D3			PATTERN1.HEIGHT	= DATAORIGIN+$018B
 19193 = A1D5			PATTERN1.OFS	= DATAORIGIN+$018D
 19194 = A1D9			adr.PATTERN2	= DATAORIGIN+$0191	; [8] RECORD
 19195 9FCC			.var PATTERN2	= adr.PATTERN2 .word
 19196 = A1D9			PATTERN2.WIDTH	= DATAORIGIN+$0191
 19197 = A1DB			PATTERN2.HEIGHT	= DATAORIGIN+$0193
 19198 = A1DD			PATTERN2.OFS	= DATAORIGIN+$0195
 19199 = A1E1			adr.PATTERN3	= DATAORIGIN+$0199	; [8] RECORD
 19200 9FCC			.var PATTERN3	= adr.PATTERN3 .word
 19201 = A1E1			PATTERN3.WIDTH	= DATAORIGIN+$0199
 19202 = A1E3			PATTERN3.HEIGHT	= DATAORIGIN+$019B
 19203 = A1E5			PATTERN3.OFS	= DATAORIGIN+$019D
 19204 = A1E9			adr.PATTERN4	= DATAORIGIN+$01A1	; [8] RECORD
 19205 9FCC			.var PATTERN4	= adr.PATTERN4 .word
 19206 = A1E9			PATTERN4.WIDTH	= DATAORIGIN+$01A1
 19207 = A1EB			PATTERN4.HEIGHT	= DATAORIGIN+$01A3
 19208 = A1ED			PATTERN4.OFS	= DATAORIGIN+$01A5
 19209 = A1F1			STATUS	= DATAORIGIN+$01A9
 19210 = A1F2			SUCCESS	= DATAORIGIN+$01AA
 19211 = A1F3			REMAIN_BLK	= DATAORIGIN+$01AB
 19212 = A1F4			TOTALWALL	= DATAORIGIN+$01AC
 19213 = A1F5			adr.SCORE	= DATAORIGIN+$01AD	; [27] RECORD
 19214 9FCC			.var SCORE	= adr.SCORE .word
 19215 = A1F5			adr.SCORE.PLAYER	= [DATAORIGIN+$01AD] .array [3] .dword
 19216 9FCC			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 19217 = A201			adr.SCORE.WALL_N	= [DATAORIGIN+$01B9] .array [3]
 19218 9FCC			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 19219 = A204			adr.SCORE.LIVES	= [DATAORIGIN+$01BC] .array [3]
 19220 9FCC			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 19221 = A207			SCORE.HISCORE	= DATAORIGIN+$01BF
 19222 = A20B			SCORE.PL_NUMB	= DATAORIGIN+$01C3
 19223 = A20C			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01C4] .array [3]
 19224 9FCC			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 19225 = A20F			SCORE.ABORTPLAY	= DATAORIGIN+$01C7
 19226 = A210			CUR_PLAYER	= DATAORIGIN+$01C8
 19227 = A211			adr.SHINEREC	= DATAORIGIN+$01C9	; [5] RECORD
 19228 9FCC			.var SHINEREC	= adr.SHINEREC .word
 19229 = A211			SHINEREC.XB	= DATAORIGIN+$01C9
 19230 = A212			SHINEREC.YB	= DATAORIGIN+$01CA
 19231 = A213			SHINEREC.FRAME	= DATAORIGIN+$01CB
 19232 = A214			SHINEREC.BLOCK	= DATAORIGIN+$01CC
 19233 = A215			SHINEREC.ACTIVE	= DATAORIGIN+$01CD
 19234 = A216			LV	= DATAORIGIN+$01CE
 19235 = A218			TRAINER	= DATAORIGIN+$01D0
 19236 = A219			adr.LETT	= DATAORIGIN+$01D1	; [17] RECORD
 19237 9FCC			.var LETT	= adr.LETT .word
 19238 = A219			LETT.X	= DATAORIGIN+$01D1
 19239 = A21A			LETT.Y	= DATAORIGIN+$01D2
 19240 = A21B			LETT.TYP	= DATAORIGIN+$01D3
 19241 = A21D			LETT.FRAME	= DATAORIGIN+$01D5
 19242 = A21E			LETT.SUBFRAME	= DATAORIGIN+$01D6
 19243 = A21F			LETT.ACTIVE	= DATAORIGIN+$01D7
 19244 = A220			LETT.INCOMING	= DATAORIGIN+$01D8
 19245 = A222			LETT.NEXTX	= DATAORIGIN+$01DA
 19246 = A224			LETT.NEXTY	= DATAORIGIN+$01DC
 19247 = A226			LETT.NEXTTYPE	= DATAORIGIN+$01DE
 19248 = A228			LETT.LAST	= DATAORIGIN+$01E0
 19249 = A22A			adr.FIRE	= DATAORIGIN+$01E2	; [5] RECORD
 19250 9FCC			.var FIRE	= adr.FIRE .word
 19251 = A22A			FIRE.X	= DATAORIGIN+$01E2
 19252 = A22B			FIRE.Y	= DATAORIGIN+$01E3
 19253 = A22C			FIRE.SHOT	= DATAORIGIN+$01E4
 19254 = A22D			FIRE.AVL	= DATAORIGIN+$01E5
 19255 = A22E			FIRE.NW	= DATAORIGIN+$01E6
 19256 = A22F			BALLS_IN_PLAY	= DATAORIGIN+$01E7
 19257 = A230			SCRFLUX	= DATAORIGIN+$01E8
 19258 = A231			SCRFLUXCNT	= DATAORIGIN+$01E9
 19259 = A232			SOUND_ON	= DATAORIGIN+$01EA
 19260 = A233			HLP	= DATAORIGIN+$01EB
 19261 = A235			F_HLP	= DATAORIGIN+$01ED
 19262 = C000			adr.ROW	= $C000
 19263 9FCC			.var ROW	= adr.ROW .word
 19264 = C200			adr.TMP	= $C200
 19265 9FCC			.var TMP	= adr.TMP .word
 19266 = C300			adr.MODY	= $C300
 19267 9FCC			.var MODY	= adr.MODY .word
 19268 = C400			adr.MODX	= $C400
 19269 9FCC			.var MODX	= adr.MODX .word
 19270 = D800			adr.WALL_P	= $D800
 19271 9FCC			.var WALL_P	= adr.WALL_P .word
 19272 = DB00			adr.WALL	= $DB00
 19273 9FCC			.var WALL	= adr.WALL .word
 19274 = DC00			adr.ALL_WALLS	= $DC00
 19275 9FCC			.var ALL_WALLS	= adr.ALL_WALLS .word
 19276 9FCC			@exit
 19277
 19278 9FCC A2 00		@halt	ldx #$00
 19279 9FCE 9A				txs
 19280
 19281 					.ifdef MAIN.@DEFINES.ROMOFF
 19282 9FCF EE 01 D3			inc portb
 19283 					.fi
 19284
 19285 9FD2 A0 01			ldy #$01
 19286
 19287 9FD4 60				rts
 19288
 19289 				; ------------------------------------------------------------
 19290
 19291 9FD5			.local	@DEFINES
 19292 9FD5			ATARI
 19293 9FD5			CPU_6502
 19294 9FD5			ROMOFF
 19295 				.endl
 19296
 19297 9FD5			.local	@RESOURCE
 19298 				.endl
 19299
 19300 = 9FD5 00 B1		BLT
 19300 = 9FD7 00 B1		BLT.SRC_ADR
 19300 = 9FD9 06 B1		BLT.DST_ADR
 19300 = 9FDB 26 A1		VBXE_RAM
 19300 = 9FDD 5E 20		FLASH
 19300 = 9FDF 69 20		SCORE_WALL
 19300 = 9FE1 7F 20		EMERG_DEV
 19300 = 9FE3 88 20		COLORBLOCK
 19300 = 9FE5 92 20		POS_DIGIT
 19300 = 9FE7 96 20		DIGITS
 19300 = 9FE9 A1 20		LEVEL
 19300 = 9FEB AD 20		LETTER_DIS
 19300 = 9FED 34 A1		BALLDATA
 19300 = 9FEF 3C A1		PLAYSCREEN
 19300 = 9FF1 44 A1		PLAYVAUS
 19300 = 9FF3 4C A1		NORMAL
 19300 = 9FF5 54 A1		ENLARGED
 19300 = 9FF7 5C A1		LASERS
 19300 = 9FF9 64 A1		EXPLOSION
 19300 = 9FFB 6C A1		NEWVAUS
 19300 = 9FFD 74 A1		PRESENTS
 19300 = 9FFF 7C A1		SOUNDFX
 19300 = A001 84 A1		SHINEWALL
 19300 = A003 8C A1		MINIVAUS
 19300 = A005 94 A1		LEVELSEL
 19300 = A007 9C A1		LETTERS
 19300 = A009 A4 A1		SHOOTS
 19300 = A00B AC A1		FLUX
 19300 = A00D B4 A1		VAUS
 19300 = A00F C1 A1		PATTERN
 19300 = A011 C9 A1		PATTERN0
 19300 = A013 D1 A1		PATTERN1
 19300 = A015 D9 A1		PATTERN2
 19300 = A017 E1 A1		PATTERN3
 19300 = A019 E9 A1		PATTERN4
 19300 = A01B F5 A1		SCORE
 19300 = A01D F5 A1		SCORE.PLAYER
 19300 = A01F 01 A2		SCORE.WALL_N
 19300 = A021 04 A2		SCORE.LIVES
 19300 = A023 0C A2		SCORE.ROUNDSEL
 19300 = A025 11 A2		SHINEREC
 19300 = A027 19 A2		LETT
 19300 = A029 2A A2		FIRE
 19300 = A02B 00 C0		ROW
 19300 = A02D 00 C2		TMP
 19300 = A02F 00 C3		MODY
 19300 = A031 00 C4		MODX
 19300 = A033 00 D8		WALL_P
 19300 = A035 00 DB		WALL
 19300 = A037 00 DC		ALL_WALLS
 19300 				.endl							; MAIN
 19301
 19302 				; ------------------------------------------------------------
 19303 				; ------------------------------------------------------------
 19304
 19305 				.macro	UNITINITIALIZATION
 19306 				
 19307 					.ifdef MAIN.SYSTEM.@UnitInit
 19308 					jsr MAIN.SYSTEM.@UnitInit
 19309 					.fi
 19310 				
 19311 					.ifdef MAIN.ATARI.@UnitInit
 19312 					jsr MAIN.ATARI.@UnitInit
 19313 					.fi
 19314 				
 19315 					.ifdef MAIN.CRT.@UnitInit
 19316 					jsr MAIN.CRT.@UnitInit
 19317 					.fi
 19318 				
 19319 					.ifdef MAIN.TYPES.@UnitInit
 19320 					jsr MAIN.TYPES.@UnitInit
 19321 					.fi
 19322 				
 19323 					.ifdef MAIN.GRAPH.@UnitInit
 19324 					jsr MAIN.GRAPH.@UnitInit
 19325 					.fi
 19326 				
 19327 					.ifdef MAIN.VBXE.@UnitInit
 19328 					jsr MAIN.VBXE.@UnitInit
 19329 					.fi
 19330 				
 19331 					.ifdef MAIN.JOYSTICK.@UnitInit
 19332 					jsr MAIN.JOYSTICK.@UnitInit
 19333 					.fi
 19334 				.endm
 19335
 19336 				; ------------------------------------------------------------
 19337
 19338 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19339 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19339 				SYSTEM: $2AD9..$3648
 19340 					eif
 19341
 19342 					ift .SIZEOF(MAIN.ATARI) > 0
 19343 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19344 					eif
 19345
 19346 					ift .SIZEOF(MAIN.CRT) > 0
 19347 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19348 					eif
 19349
 19350 					ift .SIZEOF(MAIN.TYPES) > 0
 19351 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19352 					eif
 19353
 19354 					ift .SIZEOF(MAIN.GRAPH) > 0
 19355 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19355 				GRAPH: $3649..$364A
 19356 					eif
 19357
 19358 					ift .SIZEOF(MAIN.VBXE) > 0
 19359 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19359 				VBXE: $364B..$3AE6
 19360 					eif
 19361
 19362 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19363 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19363 				JOYSTICK: $3AE7..$3AEE
 19364 					eif
 19365
 19366 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19366 				CODE: $2000..$9FD4
 19367
 19368 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19369 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19370 					eif
 19371
 19372 A039			@end
 19373
 19374 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19374 				VARS: $9FD5..$A038
 19375
 19376 				; ------------------------------------------------------------
 19377
 19378 = A039				?adr = *
 19379 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19380 = A048				?adr = ?old_adr
 19381 					eif
 19382
 19383 					org ?adr
 19384 = A048				?old_adr = *
 19385
 19386 A048			DATAORIGIN
 19387 A048-A0A9> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19388 A060 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19389 A078 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19390 A090 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
 19391 A0A8 00 17		.by  $00 $17
 19392
 19393 = 0062			VARINITSIZE	= *-DATAORIGIN
 19394 = 046A			VARDATASIZE	= 1130
 19395
 19396 = A4B2			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19397
 19398 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19398 				DATA: $A048..$A4B2
 19399
 19400 					ert DATAORIGIN<@end,'DATA memory overlap'
 19401
 19402 02E0-02E1> 4C 2A			run START
 19403
 19404 				; ------------------------------------------------------------
 19405
 19406 				.macro	STATICDATA
 19407 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19408 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19409 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19410 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19411 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19412 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19413 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19414 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19415 				.endm
 19416
 19417 					end
