mads 2.1.7 build 38 (8 Jul 25)
D:\!Delphi\Arkanoid-VBXE\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/28] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-9D54> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 2030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 2048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 2060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 2078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 2090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 20A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20B5			RTLIB
   131 20B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20B5..$2A2E
   138
   139 				; ------------------------------------------------------------
   140
   141 2A2F			START
   142 2A2F BA				tsx
   143 2A30 8E E9 9C			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 2A33				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2A33			.local	rominit
     5
     6 2A33 78			        sei
     7 2A34 A9 00		        lda #%00000000
     8 2A36 8D 0E D4		        sta NMIEN       ;$D40E
     9 2A39 A9 FE		        lda #%11111110
    10 2A3B 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 2A3E A2 5B		        ldx #<nmiint
    33 2A40 A0 2A		        ldy #>nmiint
    34 2A42 8E FA FF		        stx NMIVEC      ;$FFFA
    35 2A45 8C FB FF		        sty NMIVEC+1
    36
    37 2A48 A2 65		        ldx #<irqint
    38 2A4A A0 2A		        ldy #>irqint
    39 2A4C 8E FE FF		        stx IRQVEC      ;$FFFE
    40 2A4F 8C FF FF		        sty IRQVEC+1
    41
    42 2A52 A9 40		        lda #%01000000
    43 2A54 8D 0E D4		        sta NMIEN       ;$D40E
    44 2A57 58			        cli
    45
    46 2A58 4C 86 2A			jmp skp
    47
    48
    49 2A5B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 2A5E 10 03		        spl
    51 2A60 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 2A63 38			        sec
    54 2A64 24			        .byte $24        ;BIT $18
    55
    56 2A65 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 2A66 EE 01 D3		        inc PORTB       ;$D301
    61
    62 2A69 48			        pha
    63 2A6A 8A			        txa
    64 2A6B 48			        pha
    65 2A6C BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 2A6D A9 2A		        lda #>iret      ;adres procedury iret
    70 2A6F 48			        pha
    71 2A70 A9 7F		        lda #<iret
    72 2A72 48			        pha
    73 2A73 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 2A76 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 2A77 90 03		        scc
    79 2A79 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 2A7C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 2A7F 68			iret	pla
    83 2A80 AA				tax
    84 2A81 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2A82 CE 01 D3		        dec PORTB       ;$D301
    89 2A85 40			        rti
    90
    91 2A86			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 042A			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9DB8			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2A86				m@init
Macro: M@INIT [Source: macros.asm]
     2 2A86 A0 B8			ldy <VADR
     3 2A88 A2 9D			ldx >VADR
     5 2A8A A9 00			lda #$00
     6 2A8C F0 07			beq skp_
     8 2A8E 99 00 10		clr	sta adr: $1000,y
    10 2A91 C8				iny
    11 2A92 D0 04			bne skp
    12 2A94 E8				inx
    13 2A95 8E 90 2A		skp_	stx adr+1
    15 2A98 E0 A1		skp	cpx >VADR+VLEN
    16 2A9A D0 F2			bne clr
    17 2A9C C0 E2			cpy <VADR+VLEN
    18 2A9E D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2AA0 A2 00			ldx #$00					; X = 0
   169 2AA2 86 82			stx bp						; BP = 0
   170
   171 2AA4 8E 08 D2			stx audctl					; reset POKEY
   172 2AA7 8E 18 D2			stx audctl+$10
   173 2AAA A9 03			lda #3
   174 2AAC 8D 0F D2			sta skctl
   175 2AAF 8D 1F D2			sta skctl+$10
   176
   177 2AB2 CA				dex						; X = 255
   178
   179 2AB3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2AB3 20 90 33			jsr MAIN.SYSTEM.@UnitInit
    23 2AB6 20 1B 38			jsr MAIN.VBXE.@UnitInit
   180
   181 2AB9			.local	MAIN						; PROCEDURE
   182
   183 2AB9 4C E5 9C			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2ABC			.local	SYSTEM						; UNIT
   188
   189 2ABC			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2ABC B5 96			lda :STACKORIGIN,x
   196 2ABE 85 8A			sta A
   197 2AC0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2AC2 85 8B			sta A+1
   199 2AC4 CA				dex
   200 2AC5			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2AC5 A0 00			ldy #0
   205 2AC7 B1 8A 85 92			mva (:edx),y Result
   206
   207 2ACB			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2ACB E8				inx
   215 2ACC A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2AD0 60				rts						; ret
   231 				.endl
   232
   233 2AD1			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2AD1			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 2AD1 A5 8B			lda :edx+1
   239 2AD3 10 0D			bpl @+
   240
   241 2AD5 A9 00			lda #$00
   242 2AD7 38 E5 8A			sub :edx
   243 2ADA 85 8A			sta :edx
   244 2ADC A9 00			lda #$00
   245 2ADE E5 8B			sbc :edx+1
   246 2AE0 85 8B			sta :edx+1
   247 				@
   248 2AE2 85 93			sta Result+1
   249
   250 2AE4 A5 8A 85 92			mva :edx Result
   251
   252 2AE8			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 2AE8 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 2AE9			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 2AE9			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 2AE9 A5 8D			lda :edx+3
   269 2AEB 10 03			spl
   270 2AED 20 1C 21			jsr @negEDX
   271
   272 2AF0 85 95			sta Result+3
   273
   274 2AF2 A5 8A 85 92			mva :edx Result
   275 2AF6 A5 8B 85 93			mva :edx+1 Result+1
   276 2AFA A5 8C 85 94			mva :edx+2 Result+2
   277
   278 2AFE			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 2AFE 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 2AFF			.local	ARCTAN						; FUNCTION | OVERLOAD
   290 2AFF			.local	@01018F000
   291
   292 				; optimize OK (SYSTEM), line = 904
   293
   294 2AFF A9 00			lda #$00
   295 2B01 8D 7F 9D			sta SIGN
   296
   297 				; optimize OK (SYSTEM), line = 905
   298
   299 2B04 AD 6F 9D			lda VALUE
   300 2B07 8D 77 9D			sta X
   301 2B0A AD 70 9D			lda VALUE+1
   302 2B0D 8D 78 9D			sta X+1
   303 2B10 AD 71 9D			lda VALUE+2
   304 2B13 8D 79 9D			sta X+2
   305 2B16 AD 72 9D			lda VALUE+3
   306 2B19 8D 7A 9D			sta X+3
   307
   308 				; optimize OK (SYSTEM), line = 906
   309
   310 2B1C A9 00			lda #$00
   311 2B1E 8D 7B 9D			sta Y
   312 2B21 8D 7C 9D			sta Y+1
   313 2B24 8D 7D 9D			sta Y+2
   314 2B27 8D 7E 9D			sta Y+3
   315
   316 				; optimize OK (SYSTEM), line = 908
   317
   318 2B2A AD 72 9D			lda VALUE+3
   319 2B2D D0 0D			bne @+
   320 2B2F AD 71 9D			lda VALUE+2
   321 2B32 D0 08			bne @+
   322 2B34 AD 70 9D			lda VALUE+1
   323 2B37 D0 03			bne @+
   324 2B39 AD 6F 9D			lda VALUE
   325 				@
   326 2B3C D0 11			jne l_0053
   327
   328 				; optimize OK (SYSTEM), line = 909
   329
   330 2B3E A9 00			lda #$00
   331 2B40 8D 73 9D			sta RESULT
   332 2B43 8D 74 9D			sta RESULT+1
   333 2B46 8D 75 9D			sta RESULT+2
   334 2B49 8D 76 9D			sta RESULT+3
   335 2B4C 4C 28 2F			jmp @exit
   336 2B4F			l_0053
   337
   338 				; optimize OK (SYSTEM), line = 912
   339
   340 2B4F AD 7A 9D			lda X+3
   341 2B52 10 0D			jpl l_0071
   342
   343 				; optimize OK (SYSTEM), line = 913
   344
   345 2B54 A9 01			lda #$01
   346 2B56 8D 7F 9D			sta SIGN
   347
   348 				; optimize OK (SYSTEM), line = 914
   349
   350 2B59 AD 7A 9D			lda X+3
   351 2B5C 49 80			eor #$80
   352 2B5E 8D 7A 9D			sta X+3
   353 2B61			l_0071
   354 2B61			l_0061
   355
   356 				; optimize OK (SYSTEM), line = 917
   357
   358 2B61 A9 00			lda #$00
   359 2B63 85 8A			sta :FP2MAN0
   360 2B65 85 8B			sta :FP2MAN1
   361 2B67 A9 80			lda #$80
   362 2B69 85 8C			sta :FP2MAN2
   363 2B6B A9 3F			lda #$3F
   364 2B6D 85 8D			sta :FP2MAN3
   365 2B6F AD 77 9D			lda X
   366 2B72 85 86			sta :FP1MAN0
   367 2B74 AD 78 9D			lda X+1
   368 2B77 85 87			sta :FP1MAN1
   369 2B79 AD 79 9D			lda X+2
   370 2B7C 85 88			sta :FP1MAN2
   371 2B7E AD 7A 9D			lda X+3
   372 2B81 85 89			sta :FP1MAN3
   373 2B83 20 63 24			jsr @FSUB
   374 2B86 A5 8E			lda :FPMAN0
   375 2B88 85 9F			sta :STACKORIGIN+9
   376 2B8A A5 8F			lda :FPMAN1
   377 2B8C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   378 2B8E A5 90			lda :FPMAN2
   379 2B90 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   380 2B92 A5 91			lda :FPMAN3
   381 2B94 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   382 2B96 A9 00			lda #$00
   383 2B98 85 8A			sta :FP2MAN0
   384 2B9A 85 8B			sta :FP2MAN1
   385 2B9C A9 80			lda #$80
   386 2B9E 85 8C			sta :FP2MAN2
   387 2BA0 A9 3F			lda #$3F
   388 2BA2 85 8D			sta :FP2MAN3
   389 2BA4 AD 77 9D			lda X
   390 2BA7 85 86			sta :FP1MAN0
   391 2BA9 AD 78 9D			lda X+1
   392 2BAC 85 87			sta :FP1MAN1
   393 2BAE AD 79 9D			lda X+2
   394 2BB1 85 88			sta :FP1MAN2
   395 2BB3 AD 7A 9D			lda X+3
   396 2BB6 85 89			sta :FP1MAN3
   397 2BB8 20 5E 24			jsr @FADD
   398 2BBB A5 8E			lda :FPMAN0
   399 2BBD 85 8A			sta :FP2MAN0
   400 2BBF A5 8F			lda :FPMAN1
   401 2BC1 85 8B			sta :FP2MAN1
   402 2BC3 A5 90			lda :FPMAN2
   403 2BC5 85 8C			sta :FP2MAN2
   404 2BC7 A5 91			lda :FPMAN3
   405 2BC9 85 8D			sta :FP2MAN3
   406 2BCB A5 9F			lda :STACKORIGIN+9
   407 2BCD 85 86			sta :FP1MAN0
   408 2BCF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   409 2BD1 85 87			sta :FP1MAN1
   410 2BD3 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   411 2BD5 85 88			sta :FP1MAN2
   412 2BD7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   413 2BD9 85 89			sta :FP1MAN3
   414 2BDB 20 6B 26			jsr @FDIV
   415 2BDE A5 8E			lda :FPMAN0
   416 2BE0 8D 77 9D			sta X
   417 2BE3 A5 8F			lda :FPMAN1
   418 2BE5 8D 78 9D			sta X+1
   419 2BE8 A5 90			lda :FPMAN2
   420 2BEA 8D 79 9D			sta X+2
   421 2BED A5 91			lda :FPMAN3
   422 2BEF 8D 7A 9D			sta X+3
   423
   424 				; optimize OK (SYSTEM), line = 918
   425
   426 2BF2 AD 77 9D			lda X
   427 2BF5 85 8A			sta :FP2MAN0
   428 2BF7 AD 78 9D			lda X+1
   429 2BFA 85 8B			sta :FP2MAN1
   430 2BFC AD 79 9D			lda X+2
   431 2BFF 85 8C			sta :FP2MAN2
   432 2C01 AD 7A 9D			lda X+3
   433 2C04 85 8D			sta :FP2MAN3
   434 2C06 AD 77 9D			lda X
   435 2C09 85 86			sta :FP1MAN0
   436 2C0B AD 78 9D			lda X+1
   437 2C0E 85 87			sta :FP1MAN1
   438 2C10 AD 79 9D			lda X+2
   439 2C13 85 88			sta :FP1MAN2
   440 2C15 AD 7A 9D			lda X+3
   441 2C18 85 89			sta :FP1MAN3
   442 2C1A 20 CA 25			jsr @FMUL
   443 2C1D A5 8E			lda :FPMAN0
   444 2C1F 8D 7B 9D			sta Y
   445 2C22 A5 8F			lda :FPMAN1
   446 2C24 8D 7C 9D			sta Y+1
   447 2C27 A5 90			lda :FPMAN2
   448 2C29 8D 7D 9D			sta Y+2
   449 2C2C A5 91			lda :FPMAN3
   450 2C2E 8D 7E 9D			sta Y+3
   451
   452 				; optimize OK (SYSTEM), line = 919
   453
   454 2C31 AD 7B 9D			lda Y
   455 2C34 85 8A			sta :FP2MAN0
   456 2C36 AD 7C 9D			lda Y+1
   457 2C39 85 8B			sta :FP2MAN1
   458 2C3B AD 7D 9D			lda Y+2
   459 2C3E 85 8C			sta :FP2MAN2
   460 2C40 AD 7E 9D			lda Y+3
   461 2C43 85 8D			sta :FP2MAN3
   462 2C45 A9 4A			lda #$4A
   463 2C47 85 86			sta :FP1MAN0
   464 2C49 A9 D7			lda #$D7
   465 2C4B 85 87			sta :FP1MAN1
   466 2C4D A9 3B			lda #$3B
   467 2C4F 85 88			sta :FP1MAN2
   468 2C51 85 89			sta :FP1MAN3
   469 2C53 20 CA 25			jsr @FMUL
   470 2C56 A5 8E			lda :FPMAN0
   471 2C58 85 86			sta :FP1MAN0
   472 2C5A A5 8F			lda :FPMAN1
   473 2C5C 85 87			sta :FP1MAN1
   474 2C5E A5 90			lda :FPMAN2
   475 2C60 85 88			sta :FP1MAN2
   476 2C62 A5 91			lda :FPMAN3
   477 2C64 85 89			sta :FP1MAN3
   478 2C66 A9 02			lda #$02
   479 2C68 85 8A			sta :FP2MAN0
   480 2C6A A9 6E			lda #$6E
   481 2C6C 85 8B			sta :FP2MAN1
   482 2C6E A9 84			lda #$84
   483 2C70 85 8C			sta :FP2MAN2
   484 2C72 A9 3C			lda #$3C
   485 2C74 85 8D			sta :FP2MAN3
   486 2C76 20 63 24			jsr @FSUB
   487 2C79 A5 8E			lda :FPMAN0
   488 2C7B 85 86			sta :FP1MAN0
   489 2C7D A5 8F			lda :FPMAN1
   490 2C7F 85 87			sta :FP1MAN1
   491 2C81 A5 90			lda :FPMAN2
   492 2C83 85 88			sta :FP1MAN2
   493 2C85 A5 91			lda :FPMAN3
   494 2C87 85 89			sta :FP1MAN3
   495 2C89 AD 7B 9D			lda Y
   496 2C8C 85 8A			sta :FP2MAN0
   497 2C8E AD 7C 9D			lda Y+1
   498 2C91 85 8B			sta :FP2MAN1
   499 2C93 AD 7D 9D			lda Y+2
   500 2C96 85 8C			sta :FP2MAN2
   501 2C98 AD 7E 9D			lda Y+3
   502 2C9B 85 8D			sta :FP2MAN3
   503 2C9D 20 CA 25			jsr @FMUL
   504 2CA0 A5 8E			lda :FPMAN0
   505 2CA2 85 86			sta :FP1MAN0
   506 2CA4 A5 8F			lda :FPMAN1
   507 2CA6 85 87			sta :FP1MAN1
   508 2CA8 A5 90			lda :FPMAN2
   509 2CAA 85 88			sta :FP1MAN2
   510 2CAC A5 91			lda :FPMAN3
   511 2CAE 85 89			sta :FP1MAN3
   512 2CB0 A9 FE			lda #$FE
   513 2CB2 85 8A			sta :FP2MAN0
   514 2CB4 A9 C1			lda #$C1
   515 2CB6 85 8B			sta :FP2MAN1
   516 2CB8 A9 2F			lda #$2F
   517 2CBA 85 8C			sta :FP2MAN2
   518 2CBC A9 3D			lda #$3D
   519 2CBE 85 8D			sta :FP2MAN3
   520 2CC0 20 5E 24			jsr @FADD
   521 2CC3 A5 8E			lda :FPMAN0
   522 2CC5 85 86			sta :FP1MAN0
   523 2CC7 A5 8F			lda :FPMAN1
   524 2CC9 85 87			sta :FP1MAN1
   525 2CCB A5 90			lda :FPMAN2
   526 2CCD 85 88			sta :FP1MAN2
   527 2CCF A5 91			lda :FPMAN3
   528 2CD1 85 89			sta :FP1MAN3
   529 2CD3 AD 7B 9D			lda Y
   530 2CD6 85 8A			sta :FP2MAN0
   531 2CD8 AD 7C 9D			lda Y+1
   532 2CDB 85 8B			sta :FP2MAN1
   533 2CDD AD 7D 9D			lda Y+2
   534 2CE0 85 8C			sta :FP2MAN2
   535 2CE2 AD 7E 9D			lda Y+3
   536 2CE5 85 8D			sta :FP2MAN3
   537 2CE7 20 CA 25			jsr @FMUL
   538 2CEA A5 8E			lda :FPMAN0
   539 2CEC 85 86			sta :FP1MAN0
   540 2CEE A5 8F			lda :FPMAN1
   541 2CF0 85 87			sta :FP1MAN1
   542 2CF2 A5 90			lda :FPMAN2
   543 2CF4 85 88			sta :FP1MAN2
   544 2CF6 A5 91			lda :FPMAN3
   545 2CF8 85 89			sta :FP1MAN3
   546 2CFA A9 74			lda #$74
   547 2CFC 85 8A			sta :FP2MAN0
   548 2CFE A9 31			lda #$31
   549 2D00 85 8B			sta :FP2MAN1
   550 2D02 A9 9A			lda #$9A
   551 2D04 85 8C			sta :FP2MAN2
   552 2D06 A9 3D			lda #$3D
   553 2D08 85 8D			sta :FP2MAN3
   554 2D0A 20 63 24			jsr @FSUB
   555 2D0D A5 8E			lda :FPMAN0
   556 2D0F 85 86			sta :FP1MAN0
   557 2D11 A5 8F			lda :FPMAN1
   558 2D13 85 87			sta :FP1MAN1
   559 2D15 A5 90			lda :FPMAN2
   560 2D17 85 88			sta :FP1MAN2
   561 2D19 A5 91			lda :FPMAN3
   562 2D1B 85 89			sta :FP1MAN3
   563 2D1D AD 7B 9D			lda Y
   564 2D20 85 8A			sta :FP2MAN0
   565 2D22 AD 7C 9D			lda Y+1
   566 2D25 85 8B			sta :FP2MAN1
   567 2D27 AD 7D 9D			lda Y+2
   568 2D2A 85 8C			sta :FP2MAN2
   569 2D2C AD 7E 9D			lda Y+3
   570 2D2F 85 8D			sta :FP2MAN3
   571 2D31 20 CA 25			jsr @FMUL
   572 2D34 A5 8E			lda :FPMAN0
   573 2D36 85 86			sta :FP1MAN0
   574 2D38 A5 8F			lda :FPMAN1
   575 2D3A 85 87			sta :FP1MAN1
   576 2D3C A5 90			lda :FPMAN2
   577 2D3E 85 88			sta :FP1MAN2
   578 2D40 A5 91			lda :FPMAN3
   579 2D42 85 89			sta :FP1MAN3
   580 2D44 A9 83			lda #$83
   581 2D46 85 8A			sta :FP2MAN0
   582 2D48 A9 3D			lda #$3D
   583 2D4A 85 8B			sta :FP2MAN1
   584 2D4C A9 DA			lda #$DA
   585 2D4E 85 8C			sta :FP2MAN2
   586 2D50 A9 3D			lda #$3D
   587 2D52 85 8D			sta :FP2MAN3
   588 2D54 20 5E 24			jsr @FADD
   589 2D57 A5 8E			lda :FPMAN0
   590 2D59 85 86			sta :FP1MAN0
   591 2D5B A5 8F			lda :FPMAN1
   592 2D5D 85 87			sta :FP1MAN1
   593 2D5F A5 90			lda :FPMAN2
   594 2D61 85 88			sta :FP1MAN2
   595 2D63 A5 91			lda :FPMAN3
   596 2D65 85 89			sta :FP1MAN3
   597 2D67 AD 7B 9D			lda Y
   598 2D6A 85 8A			sta :FP2MAN0
   599 2D6C AD 7C 9D			lda Y+1
   600 2D6F 85 8B			sta :FP2MAN1
   601 2D71 AD 7D 9D			lda Y+2
   602 2D74 85 8C			sta :FP2MAN2
   603 2D76 AD 7E 9D			lda Y+3
   604 2D79 85 8D			sta :FP2MAN3
   605 2D7B 20 CA 25			jsr @FMUL
   606 2D7E A5 8E			lda :FPMAN0
   607 2D80 85 86			sta :FP1MAN0
   608 2D82 A5 8F			lda :FPMAN1
   609 2D84 85 87			sta :FP1MAN1
   610 2D86 A5 90			lda :FPMAN2
   611 2D88 85 88			sta :FP1MAN2
   612 2D8A A5 91			lda :FPMAN3
   613 2D8C 85 89			sta :FP1MAN3
   614 2D8E A9 C7			lda #$C7
   615 2D90 85 8A			sta :FP2MAN0
   616 2D92 A9 7F			lda #$7F
   617 2D94 85 8B			sta :FP2MAN1
   618 2D96 A9 11			lda #$11
   619 2D98 85 8C			sta :FP2MAN2
   620 2D9A A9 3E			lda #$3E
   621 2D9C 85 8D			sta :FP2MAN3
   622 2D9E 20 63 24			jsr @FSUB
   623 2DA1 A5 8E			lda :FPMAN0
   624 2DA3 85 86			sta :FP1MAN0
   625 2DA5 A5 8F			lda :FPMAN1
   626 2DA7 85 87			sta :FP1MAN1
   627 2DA9 A5 90			lda :FPMAN2
   628 2DAB 85 88			sta :FP1MAN2
   629 2DAD A5 91			lda :FPMAN3
   630 2DAF 85 89			sta :FP1MAN3
   631 2DB1 AD 7B 9D			lda Y
   632 2DB4 85 8A			sta :FP2MAN0
   633 2DB6 AD 7C 9D			lda Y+1
   634 2DB9 85 8B			sta :FP2MAN1
   635 2DBB AD 7D 9D			lda Y+2
   636 2DBE 85 8C			sta :FP2MAN2
   637 2DC0 AD 7E 9D			lda Y+3
   638 2DC3 85 8D			sta :FP2MAN3
   639 2DC5 20 CA 25			jsr @FMUL
   640 2DC8 A5 8E			lda :FPMAN0
   641 2DCA 85 86			sta :FP1MAN0
   642 2DCC A5 8F			lda :FPMAN1
   643 2DCE 85 87			sta :FP1MAN1
   644 2DD0 A5 90			lda :FPMAN2
   645 2DD2 85 88			sta :FP1MAN2
   646 2DD4 A5 91			lda :FPMAN3
   647 2DD6 85 89			sta :FP1MAN3
   648 2DD8 A9 E5			lda #$E5
   649 2DDA 85 8A			sta :FP2MAN0
   650 2DDC A9 BB			lda #$BB
   651 2DDE 85 8B			sta :FP2MAN1
   652 2DE0 A9 4C			lda #$4C
   653 2DE2 85 8C			sta :FP2MAN2
   654 2DE4 A9 3E			lda #$3E
   655 2DE6 85 8D			sta :FP2MAN3
   656 2DE8 20 5E 24			jsr @FADD
   657 2DEB A5 8E			lda :FPMAN0
   658 2DED 85 86			sta :FP1MAN0
   659 2DEF A5 8F			lda :FPMAN1
   660 2DF1 85 87			sta :FP1MAN1
   661 2DF3 A5 90			lda :FPMAN2
   662 2DF5 85 88			sta :FP1MAN2
   663 2DF7 A5 91			lda :FPMAN3
   664 2DF9 85 89			sta :FP1MAN3
   665 2DFB AD 7B 9D			lda Y
   666 2DFE 85 8A			sta :FP2MAN0
   667 2E00 AD 7C 9D			lda Y+1
   668 2E03 85 8B			sta :FP2MAN1
   669 2E05 AD 7D 9D			lda Y+2
   670 2E08 85 8C			sta :FP2MAN2
   671 2E0A AD 7E 9D			lda Y+3
   672 2E0D 85 8D			sta :FP2MAN3
   673 2E0F 20 CA 25			jsr @FMUL
   674 2E12 A5 8E			lda :FPMAN0
   675 2E14 85 86			sta :FP1MAN0
   676 2E16 A5 8F			lda :FPMAN1
   677 2E18 85 87			sta :FP1MAN1
   678 2E1A A5 90			lda :FPMAN2
   679 2E1C 85 88			sta :FP1MAN2
   680 2E1E A5 91			lda :FPMAN3
   681 2E20 85 89			sta :FP1MAN3
   682 2E22 A9 6C			lda #$6C
   683 2E24 85 8A			sta :FP2MAN0
   684 2E26 A9 AA			lda #$AA
   685 2E28 85 8B			sta :FP2MAN1
   686 2E2A 85 8C			sta :FP2MAN2
   687 2E2C A9 3E			lda #$3E
   688 2E2E 85 8D			sta :FP2MAN3
   689 2E30 20 63 24			jsr @FSUB
   690 2E33 A5 8E			lda :FPMAN0
   691 2E35 85 86			sta :FP1MAN0
   692 2E37 A5 8F			lda :FPMAN1
   693 2E39 85 87			sta :FP1MAN1
   694 2E3B A5 90			lda :FPMAN2
   695 2E3D 85 88			sta :FP1MAN2
   696 2E3F A5 91			lda :FPMAN3
   697 2E41 85 89			sta :FP1MAN3
   698 2E43 AD 7B 9D			lda Y
   699 2E46 85 8A			sta :FP2MAN0
   700 2E48 AD 7C 9D			lda Y+1
   701 2E4B 85 8B			sta :FP2MAN1
   702 2E4D AD 7D 9D			lda Y+2
   703 2E50 85 8C			sta :FP2MAN2
   704 2E52 AD 7E 9D			lda Y+3
   705 2E55 85 8D			sta :FP2MAN3
   706 2E57 20 CA 25			jsr @FMUL
   707 2E5A A5 8E			lda :FPMAN0
   708 2E5C 85 86			sta :FP1MAN0
   709 2E5E A5 8F			lda :FPMAN1
   710 2E60 85 87			sta :FP1MAN1
   711 2E62 A5 90			lda :FPMAN2
   712 2E64 85 88			sta :FP1MAN2
   713 2E66 A5 91			lda :FPMAN3
   714 2E68 85 89			sta :FP1MAN3
   715 2E6A A9 00			lda #$00
   716 2E6C 85 8A			sta :FP2MAN0
   717 2E6E 85 8B			sta :FP2MAN1
   718 2E70 A9 80			lda #$80
   719 2E72 85 8C			sta :FP2MAN2
   720 2E74 A9 3F			lda #$3F
   721 2E76 85 8D			sta :FP2MAN3
   722 2E78 20 5E 24			jsr @FADD
   723 2E7B A5 8E			lda :FPMAN0
   724 2E7D 85 86			sta :FP1MAN0
   725 2E7F A5 8F			lda :FPMAN1
   726 2E81 85 87			sta :FP1MAN1
   727 2E83 A5 90			lda :FPMAN2
   728 2E85 85 88			sta :FP1MAN2
   729 2E87 A5 91			lda :FPMAN3
   730 2E89 85 89			sta :FP1MAN3
   731 2E8B AD 77 9D			lda X
   732 2E8E 85 8A			sta :FP2MAN0
   733 2E90 AD 78 9D			lda X+1
   734 2E93 85 8B			sta :FP2MAN1
   735 2E95 AD 79 9D			lda X+2
   736 2E98 85 8C			sta :FP2MAN2
   737 2E9A AD 7A 9D			lda X+3
   738 2E9D 85 8D			sta :FP2MAN3
   739 2E9F 20 CA 25			jsr @FMUL
   740 2EA2 A5 8E			lda :FPMAN0
   741 2EA4 8D 77 9D			sta X
   742 2EA7 A5 8F			lda :FPMAN1
   743 2EA9 8D 78 9D			sta X+1
   744 2EAC A5 90			lda :FPMAN2
   745 2EAE 8D 79 9D			sta X+2
   746 2EB1 A5 91			lda :FPMAN3
   747 2EB3 8D 7A 9D			sta X+3
   748
   749 				; optimize OK (SYSTEM), line = 922
   750
   751 2EB6 AD 77 9D			lda X
   752 2EB9 85 8A			sta :FP2MAN0
   753 2EBB AD 78 9D			lda X+1
   754 2EBE 85 8B			sta :FP2MAN1
   755 2EC0 AD 79 9D			lda X+2
   756 2EC3 85 8C			sta :FP2MAN2
   757 2EC5 AD 7A 9D			lda X+3
   758 2EC8 85 8D			sta :FP2MAN3
   759 2ECA A9 DB			lda #$DB
   760 2ECC 85 86			sta :FP1MAN0
   761 2ECE A9 0F			lda #$0F
   762 2ED0 85 87			sta :FP1MAN1
   763 2ED2 A9 49			lda #$49
   764 2ED4 85 88			sta :FP1MAN2
   765 2ED6 A9 3F			lda #$3F
   766 2ED8 85 89			sta :FP1MAN3
   767 2EDA 20 5E 24			jsr @FADD
   768 2EDD A5 8E			lda :FPMAN0
   769 2EDF 8D 77 9D			sta X
   770 2EE2 A5 8F			lda :FPMAN1
   771 2EE4 8D 78 9D			sta X+1
   772 2EE7 A5 90			lda :FPMAN2
   773 2EE9 8D 79 9D			sta X+2
   774 2EEC A5 91			lda :FPMAN3
   775 2EEE 8D 7A 9D			sta X+3
   776
   777 				; optimize OK (SYSTEM), line = 924
   778
   779 2EF1 AD 7F 9D			lda SIGN
   780 2EF4 F0 1A			jeq l_00F3
   781
   782 				; optimize OK (SYSTEM), line = 925
   783
   784 2EF6 AD 77 9D			lda X
   785 2EF9 8D 73 9D			sta RESULT
   786 2EFC AD 78 9D			lda X+1
   787 2EFF 8D 74 9D			sta RESULT+1
   788 2F02 AD 79 9D			lda X+2
   789 2F05 8D 75 9D			sta RESULT+2
   790 2F08 AD 7A 9D			lda X+3
   791 2F0B 49 80			eor #$80
   792 2F0D 4C 25 2F			jmp l_0104
   793 2F10			l_00F3
   794
   795 				; optimize OK (SYSTEM), line = 927
   796
   797 2F10 AD 77 9D			lda X
   798 2F13 8D 73 9D			sta RESULT
   799 2F16 AD 78 9D			lda X+1
   800 2F19 8D 74 9D			sta RESULT+1
   801 2F1C AD 79 9D			lda X+2
   802 2F1F 8D 75 9D			sta RESULT+2
   803 2F22 AD 7A 9D			lda X+3
   804 2F25			l_0104
   805 2F25 8D 76 9D			sta RESULT+3
   806 2F28			@exit
   807
   808 				; ------------------------------------------------------------
   809
   810 = 9D6F			VALUE	= DATAORIGIN+$000B
   811 = 9D73			RESULT	= DATAORIGIN+$000F
   812 = 9D77			X	= DATAORIGIN+$0013
   813 = 9D7B			Y	= DATAORIGIN+$0017
   814 = 9D7F			SIGN	= DATAORIGIN+$001B
   815
   816 = 9D6F			@VarData	= VALUE
   817 = 000D			@VarDataSize	= 13
   818
   819 2F28 60				rts						; ret
   820 				.endl
   821 				.endl							; overload
   822
   823 2F29			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   824
   825 				; ------------------------------------------------------------
   826
   827 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   828 				; as Pointer
   829 2F29 B5 96			lda :STACKORIGIN,x
   830 2F2B 85 8A			sta A
   831 2F2D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   832 2F2F 85 8B			sta A+1
   833 2F31 CA				dex
   834 2F32 30 05			jmi @main
   835
   836 				; ------------------------------------------------------------
   837
   838 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   839 				; as Pointer
   840 2F34 B5 96			lda :STACKORIGIN,x
   841 2F36 85 8E			sta VALUE
   842 2F38 CA				dex
   843 2F39			@main
   844
   845 				; -------------------  ASM Block 00000025  -------------------
   846
   847 2F39 A0 00			ldy #0
   848 2F3B A5 8E 91 8A			mva value (:edx),y
   849
   850 				; ------------------------------------------------------------
   851
   852 = 008A			A	= :EDX
   853 = 008E			VALUE	= :ECX
   854
   855 2F3F			@exit
   856 					.ifdef @new
   857 					lda <@VarData
   858 					sta :ztmp
   859 					lda >@VarData
   860 					ldy #@VarDataSize-1
   861 					jmp @FreeMem
   862 					els
   863 2F3F 60				rts						; ret
   864 					eif
   865 				.endl
   866
   867 2F40			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   868 2F40			.local	@03018000001810000300000
   869
   870 					.MACRO m@INLINE
   871 				
   872 				; -------------------  ASM Block 00000033  -------------------
   873 				
   874 					jsr @fill
   875 				
   876 					.ENDM
   877
   878 				; ------------------------------------------------------------
   879
   880 = 008A			A	= :EDX
   881 = 008E			COUNT	= :ECX
   882 = 0086			VALUE	= :EAX
   883
   884 2F40			@exit
   885 				.endl
   886 				.endl							; overload
   887
   888 2F40			.local	FSINCOS						; FUNCTION
   889
   890 				; --- WhileProlog
   891 2F40 4C 7E 2F			jmp l_015A
   892 2F43			l_015B
   893
   894 				; optimize OK (SYSTEM), line = 1909
   895
   896 2F43 A9 DB			lda #$DB
   897 2F45 85 8A			sta :FP2MAN0
   898 2F47 A9 0F			lda #$0F
   899 2F49 85 8B			sta :FP2MAN1
   900 2F4B A9 C9			lda #$C9
   901 2F4D 85 8C			sta :FP2MAN2
   902 2F4F A9 40			lda #$40
   903 2F51 85 8D			sta :FP2MAN3
   904 2F53 AD 80 9D			lda X
   905 2F56 85 86			sta :FP1MAN0
   906 2F58 AD 81 9D			lda X+1
   907 2F5B 85 87			sta :FP1MAN1
   908 2F5D AD 82 9D			lda X+2
   909 2F60 85 88			sta :FP1MAN2
   910 2F62 AD 83 9D			lda X+3
   911 2F65 85 89			sta :FP1MAN3
   912 2F67 20 63 24			jsr @FSUB
   913 2F6A A5 8E			lda :FPMAN0
   914 2F6C 8D 80 9D			sta X
   915 2F6F A5 8F			lda :FPMAN1
   916 2F71 8D 81 9D			sta X+1
   917 2F74 A5 90			lda :FPMAN2
   918 2F76 8D 82 9D			sta X+2
   919 2F79 A5 91			lda :FPMAN3
   920 2F7B 8D 83 9D			sta X+3
   921 2F7E			l_015A
   922 2F7E A9 DB			lda #$DB
   923 2F80 85 86			sta @FCMPL.A
   924 2F82 A9 0F			lda #$0F
   925 2F84 85 87			sta @FCMPL.A+1
   926 2F86 A9 C9			lda #$C9
   927 2F88 85 88			sta @FCMPL.A+2
   928 2F8A A9 40			lda #$40
   929 2F8C 85 89			sta @FCMPL.A+3
   930 2F8E AD 80 9D			lda X
   931 2F91 85 8E			sta @FCMPL.B
   932 2F93 AD 81 9D			lda X+1
   933 2F96 85 8F			sta @FCMPL.B+1
   934 2F98 AD 82 9D			lda X+2
   935 2F9B 85 90			sta @FCMPL.B+2
   936 2F9D AD 83 9D			lda X+3
   937 2FA0 85 91			sta @FCMPL.B+3
   938 2FA2 20 E7 26			jsr @FCMPL
   939 2FA5 30 02			smi
   940 2FA7 D0 9A			jne l_015B
   941
   942 				; --- WhileProlog
   943 2FA9 4C E7 2F			jmp l_016F
   944 2FAC			l_0170
   945
   946 				; optimize OK (SYSTEM), line = 1910
   947
   948 2FAC A9 DB			lda #$DB
   949 2FAE 85 8A			sta :FP2MAN0
   950 2FB0 A9 0F			lda #$0F
   951 2FB2 85 8B			sta :FP2MAN1
   952 2FB4 A9 C9			lda #$C9
   953 2FB6 85 8C			sta :FP2MAN2
   954 2FB8 A9 40			lda #$40
   955 2FBA 85 8D			sta :FP2MAN3
   956 2FBC AD 80 9D			lda X
   957 2FBF 85 86			sta :FP1MAN0
   958 2FC1 AD 81 9D			lda X+1
   959 2FC4 85 87			sta :FP1MAN1
   960 2FC6 AD 82 9D			lda X+2
   961 2FC9 85 88			sta :FP1MAN2
   962 2FCB AD 83 9D			lda X+3
   963 2FCE 85 89			sta :FP1MAN3
   964 2FD0 20 5E 24			jsr @FADD
   965 2FD3 A5 8E			lda :FPMAN0
   966 2FD5 8D 80 9D			sta X
   967 2FD8 A5 8F			lda :FPMAN1
   968 2FDA 8D 81 9D			sta X+1
   969 2FDD A5 90			lda :FPMAN2
   970 2FDF 8D 82 9D			sta X+2
   971 2FE2 A5 91			lda :FPMAN3
   972 2FE4 8D 83 9D			sta X+3
   973 2FE7			l_016F
   974 2FE7 AD 83 9D			lda X+3
   975 2FEA 30 C0			jmi l_0170
   976
   977 				; optimize OK (SYSTEM), line = 1913
   978
   979 2FEC A9 83			lda #$83
   980 2FEE 85 8A			sta :FP2MAN0
   981 2FF0 A9 F9			lda #$F9
   982 2FF2 85 8B			sta :FP2MAN1
   983 2FF4 A9 22			lda #$22
   984 2FF6 85 8C			sta :FP2MAN2
   985 2FF8 A9 3F			lda #$3F
   986 2FFA 85 8D			sta :FP2MAN3
   987 2FFC AD 80 9D			lda X
   988 2FFF 85 86			sta :FP1MAN0
   989 3001 AD 81 9D			lda X+1
   990 3004 85 87			sta :FP1MAN1
   991 3006 AD 82 9D			lda X+2
   992 3009 85 88			sta :FP1MAN2
   993 300B AD 83 9D			lda X+3
   994 300E 85 89			sta :FP1MAN3
   995 3010 20 CA 25			jsr @FMUL
   996 3013 A5 8E			lda :FPMAN0
   997 3015 8D 80 9D			sta X
   998 3018 A5 8F			lda :FPMAN1
   999 301A 8D 81 9D			sta X+1
  1000 301D A5 90			lda :FPMAN2
  1001 301F 8D 82 9D			sta X+2
  1002 3022 A5 91			lda :FPMAN3
  1003 3024 8D 83 9D			sta X+3
  1004
  1005 				; optimize OK (SYSTEM), line = 1916
  1006
  1007 3027 AD 80 9D			lda X
  1008 302A 85 8E			sta :FPMAN0
  1009 302C AD 81 9D			lda X+1
  1010 302F 85 8F			sta :FPMAN1
  1011 3031 AD 82 9D			lda X+2
  1012 3034 85 90			sta :FPMAN2
  1013 3036 AD 83 9D			lda X+3
  1014 3039 85 91			sta :FPMAN3
  1015 303B 20 33 27			jsr @F2I
  1016 303E A5 8E			lda :FPMAN0
  1017 3040 8D 89 9D			sta I
  1018
  1019 				; optimize OK (SYSTEM), line = 1919
  1020
  1021 3043 AD 83 9D			lda X+3
  1022 3046 10 03			jpl l_019E
  1023 3048 CE 89 9D			dec I
  1024 304B			l_019E
  1025
  1026 				; optimize OK (SYSTEM), line = 1922
  1027
  1028 304B A0 00			ldy #$00
  1029 304D AD 89 9D			lda I
  1030 3050 10 01			spl
  1031 3052 88				dey
  1032 3053 85 8E			sta :FPMAN0
  1033 3055 84 8F			sty :FPMAN1
  1034 3057 84 90			sty :FPMAN2
  1035 3059 84 91			sty :FPMAN3
  1036 305B 20 A4 27			jsr @I2F
  1037 305E A5 8E			lda :FPMAN0
  1038 3060 85 8A			sta :FP2MAN0
  1039 3062 A5 8F			lda :FPMAN1
  1040 3064 85 8B			sta :FP2MAN1
  1041 3066 A5 90			lda :FPMAN2
  1042 3068 85 8C			sta :FP2MAN2
  1043 306A A5 91			lda :FPMAN3
  1044 306C 85 8D			sta :FP2MAN3
  1045 306E AD 80 9D			lda X
  1046 3071 85 86			sta :FP1MAN0
  1047 3073 AD 81 9D			lda X+1
  1048 3076 85 87			sta :FP1MAN1
  1049 3078 AD 82 9D			lda X+2
  1050 307B 85 88			sta :FP1MAN2
  1051 307D AD 83 9D			lda X+3
  1052 3080 85 89			sta :FP1MAN3
  1053 3082 20 63 24			jsr @FSUB
  1054 3085 A5 8E			lda :FPMAN0
  1055 3087 8D 80 9D			sta X
  1056 308A A5 8F			lda :FPMAN1
  1057 308C 8D 81 9D			sta X+1
  1058 308F A5 90			lda :FPMAN2
  1059 3091 8D 82 9D			sta X+2
  1060 3094 A5 91			lda :FPMAN3
  1061 3096 8D 83 9D			sta X+3
  1062
  1063 				; optimize OK (SYSTEM), line = 1925
  1064
  1065 3099 AD 84 9D			lda SC
  1066 309C F0 03			jeq l_01BB
  1067 309E EE 89 9D			inc I
  1068 30A1			l_01BB
  1069
  1070 				; optimize OK (SYSTEM), line = 1928
  1071
  1072 30A1 AD 89 9D			lda I
  1073 30A4 29 01			and #$01
  1074 30A6 D0 39			jne l_01D8
  1075 30A8 AD 80 9D			lda X
  1076 30AB 85 8A			sta :FP2MAN0
  1077 30AD AD 81 9D			lda X+1
  1078 30B0 85 8B			sta :FP2MAN1
  1079 30B2 AD 82 9D			lda X+2
  1080 30B5 85 8C			sta :FP2MAN2
  1081 30B7 AD 83 9D			lda X+3
  1082 30BA 85 8D			sta :FP2MAN3
  1083 30BC A9 00			lda #$00
  1084 30BE 85 86			sta :FP1MAN0
  1085 30C0 85 87			sta :FP1MAN1
  1086 30C2 A9 80			lda #$80
  1087 30C4 85 88			sta :FP1MAN2
  1088 30C6 A9 3F			lda #$3F
  1089 30C8 85 89			sta :FP1MAN3
  1090 30CA 20 63 24			jsr @FSUB
  1091 30CD A5 8E			lda :FPMAN0
  1092 30CF 8D 80 9D			sta X
  1093 30D2 A5 8F			lda :FPMAN1
  1094 30D4 8D 81 9D			sta X+1
  1095 30D7 A5 90			lda :FPMAN2
  1096 30D9 8D 82 9D			sta X+2
  1097 30DC A5 91			lda :FPMAN3
  1098 30DE 8D 83 9D			sta X+3
  1099 30E1			l_01D8
  1100
  1101 				; optimize OK (SYSTEM), line = 1931
  1102
  1103 30E1 AD 80 9D			lda X
  1104 30E4 85 8A			sta :FP2MAN0
  1105 30E6 AD 81 9D			lda X+1
  1106 30E9 85 8B			sta :FP2MAN1
  1107 30EB AD 82 9D			lda X+2
  1108 30EE 85 8C			sta :FP2MAN2
  1109 30F0 AD 83 9D			lda X+3
  1110 30F3 85 8D			sta :FP2MAN3
  1111 30F5 AD 80 9D			lda X
  1112 30F8 85 86			sta :FP1MAN0
  1113 30FA AD 81 9D			lda X+1
  1114 30FD 85 87			sta :FP1MAN1
  1115 30FF AD 82 9D			lda X+2
  1116 3102 85 88			sta :FP1MAN2
  1117 3104 AD 83 9D			lda X+3
  1118 3107 85 89			sta :FP1MAN3
  1119 3109 20 CA 25			jsr @FMUL
  1120 310C A5 8E			lda :FPMAN0
  1121 310E 8D 80 9D			sta X
  1122 3111 A5 8F			lda :FPMAN1
  1123 3113 8D 81 9D			sta X+1
  1124 3116 A5 90			lda :FPMAN2
  1125 3118 8D 82 9D			sta X+2
  1126 311B A5 91			lda :FPMAN3
  1127 311D 8D 83 9D			sta X+3
  1128
  1129 				; optimize OK (SYSTEM), line = 1932
  1130
  1131 3120 A9 42			lda #$42
  1132 3122 85 8A			sta :FP2MAN0
  1133 3124 A9 01			lda #$01
  1134 3126 85 8B			sta :FP2MAN1
  1135 3128 A9 5E			lda #$5E
  1136 312A 85 8C			sta :FP2MAN2
  1137 312C A9 3A			lda #$3A
  1138 312E 85 8D			sta :FP2MAN3
  1139 3130 AD 80 9D			lda X
  1140 3133 85 86			sta :FP1MAN0
  1141 3135 AD 81 9D			lda X+1
  1142 3138 85 87			sta :FP1MAN1
  1143 313A AD 82 9D			lda X+2
  1144 313D 85 88			sta :FP1MAN2
  1145 313F AD 83 9D			lda X+3
  1146 3142 85 89			sta :FP1MAN3
  1147 3144 20 CA 25			jsr @FMUL
  1148 3147 A5 8E			lda :FPMAN0
  1149 3149 85 8A			sta :FP2MAN0
  1150 314B A5 8F			lda :FPMAN1
  1151 314D 85 8B			sta :FP2MAN1
  1152 314F A5 90			lda :FPMAN2
  1153 3151 85 8C			sta :FP2MAN2
  1154 3153 A5 91			lda :FPMAN3
  1155 3155 85 8D			sta :FP2MAN3
  1156 3157 A9 D3			lda #$D3
  1157 3159 85 86			sta :FP1MAN0
  1158 315B A9 59			lda #$59
  1159 315D 85 87			sta :FP1MAN1
  1160 315F A9 A3			lda #$A3
  1161 3161 85 88			sta :FP1MAN2
  1162 3163 A9 3C			lda #$3C
  1163 3165 85 89			sta :FP1MAN3
  1164 3167 20 63 24			jsr @FSUB
  1165 316A A5 8E			lda :FPMAN0
  1166 316C 85 86			sta :FP1MAN0
  1167 316E A5 8F			lda :FPMAN1
  1168 3170 85 87			sta :FP1MAN1
  1169 3172 A5 90			lda :FPMAN2
  1170 3174 85 88			sta :FP1MAN2
  1171 3176 A5 91			lda :FPMAN3
  1172 3178 85 89			sta :FP1MAN3
  1173 317A AD 80 9D			lda X
  1174 317D 85 8A			sta :FP2MAN0
  1175 317F AD 81 9D			lda X+1
  1176 3182 85 8B			sta :FP2MAN1
  1177 3184 AD 82 9D			lda X+2
  1178 3187 85 8C			sta :FP2MAN2
  1179 3189 AD 83 9D			lda X+3
  1180 318C 85 8D			sta :FP2MAN3
  1181 318E 20 CA 25			jsr @FMUL
  1182 3191 A5 8E			lda :FPMAN0
  1183 3193 85 86			sta :FP1MAN0
  1184 3195 A5 8F			lda :FPMAN1
  1185 3197 85 87			sta :FP1MAN1
  1186 3199 A5 90			lda :FPMAN2
  1187 319B 85 88			sta :FP1MAN2
  1188 319D A5 91			lda :FPMAN3
  1189 319F 85 89			sta :FP1MAN3
  1190 31A1 A9 DE			lda #$DE
  1191 31A3 85 8A			sta :FP2MAN0
  1192 31A5 A9 4D			lda #$4D
  1193 31A7 85 8B			sta :FP2MAN1
  1194 31A9 A9 6F			lda #$6F
  1195 31AB 85 8C			sta :FP2MAN2
  1196 31AD A9 3E			lda #$3E
  1197 31AF 85 8D			sta :FP2MAN3
  1198 31B1 20 63 24			jsr @FSUB
  1199 31B4 A5 8E			lda :FPMAN0
  1200 31B6 85 86			sta :FP1MAN0
  1201 31B8 A5 8F			lda :FPMAN1
  1202 31BA 85 87			sta :FP1MAN1
  1203 31BC A5 90			lda :FPMAN2
  1204 31BE 85 88			sta :FP1MAN2
  1205 31C0 A5 91			lda :FPMAN3
  1206 31C2 85 89			sta :FP1MAN3
  1207 31C4 AD 80 9D			lda X
  1208 31C7 85 8A			sta :FP2MAN0
  1209 31C9 AD 81 9D			lda X+1
  1210 31CC 85 8B			sta :FP2MAN1
  1211 31CE AD 82 9D			lda X+2
  1212 31D1 85 8C			sta :FP2MAN2
  1213 31D3 AD 83 9D			lda X+3
  1214 31D6 85 8D			sta :FP2MAN3
  1215 31D8 20 CA 25			jsr @FMUL
  1216 31DB A5 8E			lda :FPMAN0
  1217 31DD 85 86			sta :FP1MAN0
  1218 31DF A5 8F			lda :FPMAN1
  1219 31E1 85 87			sta :FP1MAN1
  1220 31E3 A5 90			lda :FPMAN2
  1221 31E5 85 88			sta :FP1MAN2
  1222 31E7 A5 91			lda :FPMAN3
  1223 31E9 85 89			sta :FP1MAN3
  1224 31EB A9 00			lda #$00
  1225 31ED 85 8A			sta :FP2MAN0
  1226 31EF 85 8B			sta :FP2MAN1
  1227 31F1 A9 80			lda #$80
  1228 31F3 85 8C			sta :FP2MAN2
  1229 31F5 A9 3F			lda #$3F
  1230 31F7 85 8D			sta :FP2MAN3
  1231 31F9 20 5E 24			jsr @FADD
  1232 31FC A5 8E			lda :FPMAN0
  1233 31FE 85 9F			sta :STACKORIGIN+9
  1234 3200 A5 8F			lda :FPMAN1
  1235 3202 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1236 3204 A5 90			lda :FPMAN2
  1237 3206 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1238 3208 A5 91			lda :FPMAN3
  1239 320A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1240 320C AD 80 9D			lda X
  1241 320F 85 8A			sta :FP2MAN0
  1242 3211 AD 81 9D			lda X+1
  1243 3214 85 8B			sta :FP2MAN1
  1244 3216 AD 82 9D			lda X+2
  1245 3219 85 8C			sta :FP2MAN2
  1246 321B AD 83 9D			lda X+3
  1247 321E 85 8D			sta :FP2MAN3
  1248 3220 A9 00			lda #$00
  1249 3222 85 86			sta :FP1MAN0
  1250 3224 85 87			sta :FP1MAN1
  1251 3226 A9 80			lda #$80
  1252 3228 85 88			sta :FP1MAN2
  1253 322A A9 3F			lda #$3F
  1254 322C 85 89			sta :FP1MAN3
  1255 322E 20 63 24			jsr @FSUB
  1256 3231 A5 8E			lda :FPMAN0
  1257 3233 85 8A			sta :FP2MAN0
  1258 3235 A5 8F			lda :FPMAN1
  1259 3237 85 8B			sta :FP2MAN1
  1260 3239 A5 90			lda :FPMAN2
  1261 323B 85 8C			sta :FP2MAN2
  1262 323D A5 91			lda :FPMAN3
  1263 323F 85 8D			sta :FP2MAN3
  1264 3241 A5 9F			lda :STACKORIGIN+9
  1265 3243 85 86			sta :FP1MAN0
  1266 3245 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1267 3247 85 87			sta :FP1MAN1
  1268 3249 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1269 324B 85 88			sta :FP1MAN2
  1270 324D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1271 324F 85 89			sta :FP1MAN3
  1272 3251 20 CA 25			jsr @FMUL
  1273 3254 A5 8E			lda :FPMAN0
  1274 3256 8D 85 9D			sta RESULT
  1275 3259 A5 8F			lda :FPMAN1
  1276 325B 8D 86 9D			sta RESULT+1
  1277 325E A5 90			lda :FPMAN2
  1278 3260 8D 87 9D			sta RESULT+2
  1279 3263 A5 91			lda :FPMAN3
  1280 3265 8D 88 9D			sta RESULT+3
  1281
  1282 				; optimize OK (SYSTEM), line = 1935
  1283
  1284 3268 AD 89 9D			lda I
  1285 326B 29 02			and #$02
  1286 326D C9 02			cmp #$02
  1287 326F D0 08			jne l_0225
  1288 3271 AD 88 9D			lda RESULT+3
  1289 3274 49 80			eor #$80
  1290 3276 8D 88 9D			sta RESULT+3
  1291 3279			l_0225
  1292 3279			@exit
  1293
  1294 				; ------------------------------------------------------------
  1295
  1296 = 9D80			X	= DATAORIGIN+$001C
  1297 = 9D84			SC	= DATAORIGIN+$0020
  1298 = 9D85			RESULT	= DATAORIGIN+$0021
  1299 = 9D89			I	= DATAORIGIN+$0025
  1300
  1301 = 9D80			@VarData	= X
  1302 = 0006			@VarDataSize	= 6
  1303
  1304 3279 60				rts						; ret
  1305 				.endl
  1306
  1307 327A			.local	SIN						; FUNCTION | OVERLOAD
  1308 327A			.local	@01018F000
  1309
  1310 				; optimize OK (SYSTEM), line = 1949
  1311
  1312 327A AD 8A 9D			lda X
  1313 327D 8D 80 9D			sta FSINCOS.X
  1314 3280 AD 8B 9D			lda X+1
  1315 3283 8D 81 9D			sta FSINCOS.X+1
  1316 3286 AD 8C 9D			lda X+2
  1317 3289 8D 82 9D			sta FSINCOS.X+2
  1318 328C AD 8D 9D			lda X+3
  1319 328F 8D 83 9D			sta FSINCOS.X+3
  1320 3292 A9 00			lda #$00
  1321 3294 8D 84 9D			sta FSINCOS.SC
  1322 3297 20 40 2F			jsr FSINCOS
  1323 329A AD 85 9D			lda FSINCOS.RESULT
  1324 329D 8D 8E 9D			sta RESULT
  1325 32A0 AD 86 9D			lda FSINCOS.RESULT+1
  1326 32A3 8D 8F 9D			sta RESULT+1
  1327 32A6 AD 87 9D			lda FSINCOS.RESULT+2
  1328 32A9 8D 90 9D			sta RESULT+2
  1329 32AC AD 88 9D			lda FSINCOS.RESULT+3
  1330 32AF 8D 91 9D			sta RESULT+3
  1331 32B2			@exit
  1332
  1333 				; ------------------------------------------------------------
  1334
  1335 = 9D8A			X	= DATAORIGIN+$0026
  1336 = 9D8E			RESULT	= DATAORIGIN+$002A
  1337
  1338 = 9D8A			@VarData	= X
  1339 = 0004			@VarDataSize	= 4
  1340
  1341 32B2 60				rts						; ret
  1342 				.endl
  1343 				.endl							; overload
  1344
  1345 32B3			.local	COS						; FUNCTION | OVERLOAD
  1346 32B3			.local	@01018F000
  1347
  1348 				; optimize OK (SYSTEM), line = 1963
  1349
  1350 32B3 AD 92 9D			lda X
  1351 32B6 8D 80 9D			sta FSINCOS.X
  1352 32B9 AD 93 9D			lda X+1
  1353 32BC 8D 81 9D			sta FSINCOS.X+1
  1354 32BF AD 94 9D			lda X+2
  1355 32C2 8D 82 9D			sta FSINCOS.X+2
  1356 32C5 AD 95 9D			lda X+3
  1357 32C8 8D 83 9D			sta FSINCOS.X+3
  1358 32CB A9 01			lda #$01
  1359 32CD 8D 84 9D			sta FSINCOS.SC
  1360 32D0 20 40 2F			jsr FSINCOS
  1361 32D3 AD 85 9D			lda FSINCOS.RESULT
  1362 32D6 8D 96 9D			sta RESULT
  1363 32D9 AD 86 9D			lda FSINCOS.RESULT+1
  1364 32DC 8D 97 9D			sta RESULT+1
  1365 32DF AD 87 9D			lda FSINCOS.RESULT+2
  1366 32E2 8D 98 9D			sta RESULT+2
  1367 32E5 AD 88 9D			lda FSINCOS.RESULT+3
  1368 32E8 8D 99 9D			sta RESULT+3
  1369 32EB			@exit
  1370
  1371 				; ------------------------------------------------------------
  1372
  1373 = 9D92			X	= DATAORIGIN+$002E
  1374 = 9D96			RESULT	= DATAORIGIN+$0032
  1375
  1376 = 9D92			@VarData	= X
  1377 = 0004			@VarDataSize	= 4
  1378
  1379 32EB 60				rts						; ret
  1380 				.endl
  1381 				.endl							; overload
  1382
  1383 32EC			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1384 32EC			.local	@00
  1385
  1386 				; -------------------  ASM Block 00000043  -------------------
  1387
  1388 32EC 2C 0B D4			bit VCOUNT
  1389 32EF 30 FB			bmi *-3
  1390 32F1 2C 0B D4			bit VCOUNT
  1391 32F4 10 FB			bpl *-3
  1392
  1393 32F6			@exit
  1394 					.ifdef @new
  1395 					lda <@VarData
  1396 					sta :ztmp
  1397 					lda >@VarData
  1398 					ldy #@VarDataSize-1
  1399 					jmp @FreeMem
  1400 					els
  1401 32F6 60				rts						; ret
  1402 					eif
  1403 				.endl
  1404 				.endl							; overload
  1405
  1406 32F7			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1407
  1408 				; -------------------  ASM Block 00000045  -------------------
  1409
  1410
  1411 32F7 AD 0A D2 8D 6D 9D	  mva $d20a RndSeed
  1412 32FD A9 00 8D 6E 9D	  mva #$00  RndSeed+1
  1413
  1414
  1415 3302			@exit
  1416 					.ifdef @new
  1417 					lda <@VarData
  1418 					sta :ztmp
  1419 					lda >@VarData
  1420 					ldy #@VarDataSize-1
  1421 					jmp @FreeMem
  1422 					els
  1423 3302 60				rts						; ret
  1424 					eif
  1425 				.endl
  1426
  1427 3303			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1428 3303			.local	@010180000
  1429 3303 8D 9A 9D			sta RANGE
  1430
  1431 				; -------------------  ASM Block 00000049  -------------------
  1432
  1433
  1434 				;BYTE FUNC Rand(BYTE range)
  1435 				; returns random number between 0 and
  1436 				; range-1.  If range=0, then a random
  1437 				; number between 0 and 255 is returned
  1438
  1439 3306 AC 0A D2		  ldy $d20a   ; RANDOM
  1440
  1441 3309 AD 9A 9D		  lda range
  1442 330C F0 08		  beq stop
  1443
  1444 330E 85 8E		  sta :ecx
  1445 3310 84 86		  sty :eax
  1446
  1447 3312 20 BF 22		  jsr imulCL
  1448 3315 A8			  tay
  1449
  1450 3316 8C 9B 9D		stop  sty Result
  1451
  1452
  1453 3319			@exit
  1454
  1455 				; ------------------------------------------------------------
  1456
  1457 = 9D9A			RANGE	= DATAORIGIN+$0036
  1458 = 9D9B			RESULT	= DATAORIGIN+$0037
  1459
  1460 = 9D9A			@VarData	= RANGE
  1461 = 0001			@VarDataSize	= 1
  1462
  1463 3319 60				rts						; ret
  1464 				.endl
  1465 				.endl							; overload
  1466
  1467 331A			.local	RANDOM						; FUNCTION | OVERLOAD
  1468 331A			.local	@010184000
  1469
  1470 				; optimize OK (system_atari.inc), line = 179
  1471
  1472 331A AD 9D 9D			lda RANGE+1
  1473 331D 0D 9C 9D			ora RANGE
  1474 3320 D0 0B			jne l_0265
  1475
  1476 				; optimize OK (system_atari.inc), line = 180
  1477
  1478 3322 A9 00			lda #$00
  1479 3324 8D 9E 9D			sta RESULT
  1480 3327 8D 9F 9D			sta RESULT+1
  1481 332A 4C 8F 33			jmp l_0273
  1482 332D			l_0265
  1483
  1484 				; optimize OK (system_atari.inc), line = 183
  1485
  1486 332D AD 6D 9D			lda RNDSEED
  1487 3330 85 8E			sta :ecx
  1488 3332 AD 6E 9D			lda RNDSEED+1
  1489 3335 85 8F			sta :ecx+1
  1490 3337 A9 95			lda #$95
  1491 3339 85 86			sta :eax
  1492 333B A9 45			lda #$45
  1493 333D 85 87			sta :eax+1
  1494 					.ifdef fmulinit
  1495 					fmulu_16
  1496 					els
  1497 333F 20 0B 23			imulCX
  1498 					eif
  1499 3342 A5 86			lda :eax
  1500 3344 8D 6D 9D			sta RNDSEED
  1501 3347 A5 87			lda :eax+1
  1502 3349 8D 6E 9D			sta RNDSEED+1
  1503
  1504 				; optimize OK (system_atari.inc), line = 184
  1505
  1506 334C AD 9C 9D			lda RANGE
  1507 334F 85 8E			sta @SMALLINT.MOD.B
  1508 3351 AD 9D 9D			lda RANGE+1
  1509 3354 85 8F			sta @SMALLINT.MOD.B+1
  1510 3356 AD 6D 9D			lda RNDSEED
  1511 3359 85 86			sta @SMALLINT.MOD.A
  1512 335B AD 6E 9D			lda RNDSEED+1
  1513 335E 85 87			sta @SMALLINT.MOD.A+1
  1514 3360 20 50 22			jsr @SMALLINT.MOD
  1515 3363 A5 92			lda @SMALLINT.MOD.RESULT
  1516 3365 8D 9E 9D			sta RESULT
  1517 3368 A5 93			lda @SMALLINT.MOD.RESULT+1
  1518 336A 8D 9F 9D			sta RESULT+1
  1519
  1520 				; -------------------  ASM Block 00000050  -------------------
  1521
  1522 336D AD 9D 9D			lda range+1
  1523 3370 10 07			bpl plus
  1524
  1525 3372 AD 9F 9D			lda Result+1
  1526 3375 30 18			bmi ok
  1527 3377 10 05			bpl sign
  1528
  1529 3379 AD 9F 9D		plus	lda Result+1
  1530 337C 10 11			bpl ok
  1531
  1532 337E A9 00		sign 	lda #0
  1533 3380 38 ED 9E 9D			sub Result
  1534 3384 8D 9E 9D			sta Result
  1535
  1536 3387 A9 00			lda #0
  1537 3389 ED 9F 9D			sbc Result+1
  1538 338C 8D 9F 9D			sta Result+1
  1539 338F			ok
  1540
  1541 338F			l_0273
  1542 338F			@exit
  1543
  1544 				; ------------------------------------------------------------
  1545
  1546 = 9D9C			RANGE	= DATAORIGIN+$0038
  1547 = 9D9E			RESULT	= DATAORIGIN+$003A
  1548
  1549 = 9D9C			@VarData	= RANGE
  1550 = 0002			@VarDataSize	= 2
  1551
  1552 338F 60				rts						; ret
  1553 				.endl
  1554 				.endl							; overload
  1555
  1556 				; ------------------------------------------------------------
  1557 				; ------------------------------------------------------------
  1558 3390			@UnitInit
  1559
  1560 				; -------------------  ASM Block 00000060  -------------------
  1561
  1562 					.ifdef @CmdLine
  1563
  1564 					ldx #$0F
  1565 					mva:rpl $340,x IOCB@COPY,x-
  1566 					rts
  1567
  1568 				IOCB@COPY	:16 brk
  1569 					eif
  1570
  1571
  1572 3390 60				rts
  1573
  1574 				; ------------------------------------------------------------
  1575
  1576 = 0648			M_PI_2	= $0648
  1577 = 0192			D_PI_2	= $0192
  1578 = 0004			D_PI_180	= $04
  1579 = 0101			__PORTB_BANKS	= $0101
  1580 = 0000			MGTIA	= $00
  1581 = 0080			MVBXE	= $80
  1582 = 0000			VBXE_XDLADR	= $00
  1583 = 00E0			VBXE_BCBTMP	= $E0
  1584 = 0100			VBXE_BCBADR	= $0100
  1585 = 1000			VBXE_MAPADR	= $1000
  1586 = 1000			VBXE_CHBASE	= $1000
  1587 = 5000			VBXE_OVRADR	= $5000
  1588 = B000			VBXE_WINDOW	= $B000
  1589 = 0000			IDLI	= $00
  1590 = 0001			IVBL	= $01
  1591 = 0001			IVBLD	= $01
  1592 = 0002			IVBLI	= $02
  1593 = 0003			ITIM1	= $03
  1594 = 0004			ITIM2	= $04
  1595 = 0005			ITIM4	= $05
  1596 = 00FE			CH_DELCHR	= $FE
  1597 = 009B			CH_ENTER	= $9B
  1598 = 001B			CH_ESC	= $1B
  1599 = 001C			CH_CURS_UP	= $1C
  1600 = 001D			CH_CURS_DOWN	= $1D
  1601 = 001E			CH_CURS_LEFT	= $1E
  1602 = 001F			CH_CURS_RIGHT	= $1F
  1603 = 007F			CH_TAB	= $7F
  1604 = 009B			CH_EOL	= $9B
  1605 = 007D			CH_CLR	= $7D
  1606 = 00FD			CH_BELL	= $FD
  1607 = 007E			CH_DEL	= $7E
  1608 = 009C			CH_DELLINE	= $9C
  1609 = 009D			CH_INSLINE	= $9D
  1610 = 0000			PAL_PMCOLOR0	= $00
  1611 = 0001			PAL_PMCOLOR1	= $01
  1612 = 0002			PAL_PMCOLOR2	= $02
  1613 = 0003			PAL_PMCOLOR3	= $03
  1614 = 0004			PAL_COLOR0	= $04
  1615 = 0005			PAL_COLOR1	= $05
  1616 = 0006			PAL_COLOR2	= $06
  1617 = 0007			PAL_COLOR3	= $07
  1618 = 0008			PAL_COLBAK	= $08
  1619 = 0000			COLOR_BLACK	= $00
  1620 = 000E			COLOR_WHITE	= $0E
  1621 = 0032			COLOR_RED	= $32
  1622 = 0096			COLOR_CYAN	= $96
  1623 = 0068			COLOR_VIOLET	= $68
  1624 = 00C4			COLOR_GREEN	= $C4
  1625 = 0074			COLOR_BLUE	= $74
  1626 = 00EE			COLOR_YELLOW	= $EE
  1627 = 0028			COLOR_ORANGE	= $28
  1628 = 00E4			COLOR_BROWN	= $E4
  1629 = 003C			COLOR_LIGHTRED	= $3C
  1630 = 0004			COLOR_GRAY1	= $04
  1631 = 0006			COLOR_GRAY2	= $06
  1632 = 000A			COLOR_GRAY3	= $0A
  1633 = 00CC			COLOR_LIGHTGREEN	= $CC
  1634 = 007C			COLOR_LIGHTBLUE	= $7C
  1635 = 0004			FMOPENREAD	= $04
  1636 = 0008			FMOPENWRITE	= $08
  1637 = 0009			FMOPENAPPEND	= $09
  1638 = 000C			FMOPENREADWRITE	= $0C
  1639 = 9D64			DATESEPARATOR	= DATAORIGIN+$0000
  1640 = D20A			RND	= $D20A
  1641 = 02C0			adr.PALETTE	= $02C0
  1642 3391			.var PALETTE	= adr.PALETTE .word
  1643 = D012			adr.HPALETTE	= $D012
  1644 3391			.var HPALETTE	= adr.HPALETTE .word
  1645 = 9D65			FILEMODE	= DATAORIGIN+$0001
  1646 = 9D66			GRAPHMODE	= DATAORIGIN+$0002
  1647 = 9D67			IORESULT	= DATAORIGIN+$0003
  1648 = 9D68			EOLN	= DATAORIGIN+$0004
  1649 = 9D69			SCREENWIDTH	= DATAORIGIN+$0005
  1650 = 9D6B			SCREENHEIGHT	= DATAORIGIN+$0007
  1651 = 0000			adr.MEM	= $00
  1652 3391			.var MEM	= adr.MEM .word
  1653 = 9D6D			RNDSEED	= DATAORIGIN+$0009
  1654
  1655 = 3391 C0 02		PALETTE
  1655 = 3393 12 D0		HPALETTE
  1655 = 3395 00 00		MEM
  1655 				.endl							; UNIT SYSTEM
  1656
  1657 				; ------------------------------------------------------------
  1658
  1659 3397			.local	ATARI						; UNIT
  1660
  1661 				; ------------------------------------------------------------
  1662
  1663 = 0000			DL_BLANK1	= $00
  1664 = 0010			DL_BLANK2	= $10
  1665 = 0020			DL_BLANK3	= $20
  1666 = 0030			DL_BLANK4	= $30
  1667 = 0040			DL_BLANK5	= $40
  1668 = 0050			DL_BLANK6	= $50
  1669 = 0060			DL_BLANK7	= $60
  1670 = 0070			DL_BLANK8	= $70
  1671 = 0080			DL_DLI	= $80
  1672 = 0040			DL_LMS	= $40
  1673 = 0020			DL_VSCROLL	= $20
  1674 = 0010			DL_HSCROLL	= $10
  1675 = 0001			DL_JMP	= $01
  1676 = 0041			DL_JVB	= $41
  1677 = 0002			DL_MODE_2	= $02
  1678 = 0003			DL_MODE_3	= $03
  1679 = 0004			DL_MODE_4	= $04
  1680 = 0005			DL_MODE_5	= $05
  1681 = 000E			DL_MODE_E	= $0E
  1682 = 000F			DL_MODE_F	= $0F
  1683 = 0010			IRQENS	= $10
  1684 = 0012			RTCLOK	= $12
  1685 = 0012			RTCLOK1	= $12
  1686 = 0013			RTCLOK2	= $13
  1687 = 0014			RTCLOK3	= $14
  1688 = 004D			ATRACT	= $4D
  1689 = 0052			LMARGIN	= $52
  1690 = 0053			RMARGIN	= $53
  1691 = 0054			ROWCRS	= $54
  1692 = 0055			COLCRS	= $55
  1693 = 0057			DINDEX	= $57
  1694 = 0058			SAVMSC	= $58
  1695 = 0062			PALNTS	= $62
  1696 = 006A			RAMTOP	= $6A
  1697 = 0200			VDSLST	= $0200
  1698 = 0230			SDLSTL	= $0230
  1699 = 0290			TXTROW	= $0290
  1700 = 0291			TXTCOL	= $0291
  1701 = 0293			TINDEX	= $0293
  1702 = 0294			TXTMSC	= $0294
  1703 = 022F			SDMCTL	= $022F
  1704 = 026F			GPRIOR	= $026F
  1705 = 02F0			CRSINH	= $02F0
  1706 = 02F3			CHACT	= $02F3
  1707 = 02F4			CHBAS	= $02F4
  1708 = 02FC			CH	= $02FC
  1709 = 02FD			FILDAT	= $02FD
  1710 = 02C0			PCOLR0	= $02C0
  1711 = 02C1			PCOLR1	= $02C1
  1712 = 02C2			PCOLR2	= $02C2
  1713 = 02C3			PCOLR3	= $02C3
  1714 = 02C4			COLOR0	= $02C4
  1715 = 02C5			COLOR1	= $02C5
  1716 = 02C6			COLOR2	= $02C6
  1717 = 02C7			COLOR3	= $02C7
  1718 = 02C8			COLOR4	= $02C8
  1719 = 02C8			COLBAKS	= $02C8
  1720 = D000			HPOSP0	= $D000
  1721 = D001			HPOSP1	= $D001
  1722 = D002			HPOSP2	= $D002
  1723 = D003			HPOSP3	= $D003
  1724 = D004			HPOSM0	= $D004
  1725 = D005			HPOSM1	= $D005
  1726 = D006			HPOSM2	= $D006
  1727 = D007			HPOSM3	= $D007
  1728 = D008			SIZEP0	= $D008
  1729 = D009			SIZEP1	= $D009
  1730 = D00A			SIZEP2	= $D00A
  1731 = D00B			SIZEP3	= $D00B
  1732 = D00C			SIZEM	= $D00C
  1733 = D00D			GRAFP0	= $D00D
  1734 = D00E			GRAFP1	= $D00E
  1735 = D00F			GRAFP2	= $D00F
  1736 = D010			GRAFP3	= $D010
  1737 = D011			GRAFM	= $D011
  1738 = D004			P0PF	= $D004
  1739 = D014			PAL	= $D014
  1740 = D013			TRIG3	= $D013
  1741 = D012			COLPM0	= $D012
  1742 = D013			COLPM1	= $D013
  1743 = D014			COLPM2	= $D014
  1744 = D015			COLPM3	= $D015
  1745 = D016			COLPF0	= $D016
  1746 = D017			COLPF1	= $D017
  1747 = D018			COLPF2	= $D018
  1748 = D019			COLPF3	= $D019
  1749 = D01A			COLBAK	= $D01A
  1750 = D01A			COLBK	= $D01A
  1751 = D01B			PRIOR	= $D01B
  1752 = D01D			GRACTL	= $D01D
  1753 = D01D			PMCNTL	= $D01D
  1754 = D01E			HITCLR	= $D01E
  1755 = D01F			CONSOL	= $D01F
  1756 = D200			AUDF1	= $D200
  1757 = D201			AUDC1	= $D201
  1758 = D202			AUDF2	= $D202
  1759 = D203			AUDC2	= $D203
  1760 = D204			AUDF3	= $D204
  1761 = D205			AUDC3	= $D205
  1762 = D206			AUDF4	= $D206
  1763 = D207			AUDC4	= $D207
  1764 = D208			AUDCTL	= $D208
  1765 = D209			KBCODE	= $D209
  1766 = D20E			IRQEN	= $D20E
  1767 = D20F			SKSTAT	= $D20F
  1768 = D300			PORTA	= $D300
  1769 = D301			PORTB	= $D301
  1770 = D302			PACTL	= $D302
  1771 = D400			DMACTL	= $D400
  1772 = D401			CHACTL	= $D401
  1773 = D402			DLISTL	= $D402
  1774 = D404			HSCROL	= $D404
  1775 = D405			VSCROL	= $D405
  1776 = D407			PMBASE	= $D407
  1777 = D409			CHBASE	= $D409
  1778 = D40A			WSYNC	= $D40A
  1779 = D40B			VCOUNT	= $D40B
  1780 = D40C			PENH	= $D40C
  1781 = D40D			PENV	= $D40D
  1782 = D40E			NMIEN	= $D40E
  1783 = FFFA			NMIVEC	= $FFFA
  1784 = FFFC			RESETVEC	= $FFFC
  1785 = FFFE			IRQVEC	= $FFFE
  1786
  1787 				.endl							; UNIT ATARI
  1788
  1789 				; ------------------------------------------------------------
  1790
  1791 3397			.local	CRT						; UNIT
  1792
  1793 				; ------------------------------------------------------------
  1794
  1795 = 9DA0			TEXTATTR	= DATAORIGIN+$003C
  1796 = D01F			CONSOL	= $D01F
  1797 = 0000			CN_START_SELECT_OPTION	= $00
  1798 = 0001			CN_SELECT_OPTION	= $01
  1799 = 0002			CN_START_OPTION	= $02
  1800 = 0003			CN_OPTION	= $03
  1801 = 0004			CN_START_SELECT	= $04
  1802 = 0005			CN_SELECT	= $05
  1803 = 0006			CN_START	= $06
  1804 = 0007			CN_NONE	= $07
  1805 = 0000			BLACK	= $00
  1806 = 000F			WHITE	= $0F
  1807 = 0026			RED	= $26
  1808 = 00AC			CYAN	= $AC
  1809 = 0048			PURPLE	= $48
  1810 = 00B6			GREEN	= $B6
  1811 = 0086			BLUE	= $86
  1812 = 00DC			YELLOW	= $DC
  1813 = 0018			ORANGE	= $18
  1814 = 00F4			BROWN	= $F4
  1815 = 002A			LIGHT_RED	= $2A
  1816 = 0004			DARK_GREY	= $04
  1817 = 0008			GREY	= $08
  1818 = 00BC			LIGHT_GREEN	= $BC
  1819 = 009A			LIGHT_BLUE	= $9A
  1820 = 000C			LIGHT_GREY	= $0C
  1821 = 0000			BW40	= $00
  1822 = 0001			CO40	= $01
  1823 = 0002			BW80	= $02
  1824 = 0003			CO80	= $03
  1825 = 0007			MONO	= $07
  1826 = 0001			C40	= $01
  1827 = 0003			C80	= $03
  1828 = 0080			BLINK	= $80
  1829
  1830 				.endl							; UNIT CRT
  1831
  1832 				; ------------------------------------------------------------
  1833
  1834 3397			.local	TYPES						; UNIT
  1835
  1836 				; ------------------------------------------------------------
  1837
  1838 				.endl							; UNIT TYPES
  1839
  1840 				; ------------------------------------------------------------
  1841
  1842 3397			.local	GRAPH						; UNIT
  1843
  1844 				; ------------------------------------------------------------
  1845
  1846 = 0080			CURRENTDRIVER	= $80
  1847 = 0000			DETECT	= $00
  1848 = 0001			CGA	= $01
  1849 = 0002			MCGA	= $02
  1850 = 0003			EGA	= $03
  1851 = 0004			EGA64	= $04
  1852 = 0005			EGAMONO	= $05
  1853 = 0006			LOWRES	= $06
  1854 = 0007			HERCMONO	= $07
  1855 = 0009			VGA	= $09
  1856 = 000A			VESA	= $0A
  1857 = 000B			D1BIT	= $0B
  1858 = 000C			D2BIT	= $0C
  1859 = 000D			D4BIT	= $0D
  1860 = 000E			D6BIT	= $0E
  1861 = 000F			D8BIT	= $0F
  1862 = 0010			D12BIT	= $10
  1863 = 0018			M640X400	= $18
  1864 = 0018			M640X480	= $18
  1865 = 0001			GROK	= $01
  1866 = 00FF			GRNOINITGRAPH	= $FF
  1867 = 00FE			GRNOTDETECTED	= $FE
  1868 = 00FD			GRFILENOTFOUND	= $FD
  1869 = 00FC			GRINVALIDDRIVER	= $FC
  1870 = 00FB			GRNOLOADMEM	= $FB
  1871 = 00FA			GRNOSCANMEM	= $FA
  1872 = 00F9			GRNOFLOODMEM	= $F9
  1873 = 00F8			GRFONTNOTFOUND	= $F8
  1874 = 00F7			GRNOFONTMEM	= $F7
  1875 = 00F6			GRINVALIDMODE	= $F6
  1876 = 00F5			GRERROR	= $F5
  1877 = 00F4			GRIOERROR	= $F4
  1878 = 00F3			GRINVALIDFONT	= $F3
  1879 = 00F2			GRINVALIDFONTNUM	= $F2
  1880 = 00EE			GRINVALIDVERSION	= $EE
  1881 = 0000			CGAC0	= $00
  1882 = 0001			CGAC1	= $01
  1883 = 0002			CGAC2	= $02
  1884 = 0003			CGAC3	= $03
  1885 = 0004			CGAHI	= $04
  1886 = 0000			MCGAC0	= $00
  1887 = 0001			MCGAC1	= $01
  1888 = 0002			MCGAC2	= $02
  1889 = 0003			MCGAC3	= $03
  1890 = 0004			MCGAMED	= $04
  1891 = 0005			MCGAHI	= $05
  1892 = 0000			EGALO	= $00
  1893 = 0001			EGAHI	= $01
  1894 = 0000			EGA64LO	= $00
  1895 = 0001			EGA64HI	= $01
  1896 = 0003			EGAMONOHI	= $03
  1897 = 000A			VGALO	= $0A
  1898 = 001F			VGAMED	= $1F
  1899 = 0018			VGAHI	= $18
  1900 = 9DA1			GRAPHRESULT	= DATAORIGIN+$003D
  1901 = 9DA2			GETCOLOR	= DATAORIGIN+$003E
  1902 = 9DA3			VIDEORAM	= DATAORIGIN+$003F
  1903 = 9DA5			adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
  1904 3397			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1905 = 9DA5			LASTARCCOORDS.X	= DATAORIGIN+$0041
  1906 = 9DA7			LASTARCCOORDS.Y	= DATAORIGIN+$0043
  1907 = 9DA9			LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
  1908 = 9DAB			LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
  1909 = 9DAD			LASTARCCOORDS.XEND	= DATAORIGIN+$0049
  1910 = 9DAF			LASTARCCOORDS.YEND	= DATAORIGIN+$004B
  1911 = 9DB1			WIN_LEFT	= DATAORIGIN+$004D
  1912 = 9DB3			WIN_RIGHT	= DATAORIGIN+$004F
  1913 = 9DB5			WIN_TOP	= DATAORIGIN+$0051
  1914 = 9DB7			WIN_BOTTOM	= DATAORIGIN+$0053
  1915 = 9DB9			SCANLINE_WIDTH	= DATAORIGIN+$0055
  1916 = 9DBA			CURRENTX	= DATAORIGIN+$0056
  1917 = 9DBC			CURRENTY	= DATAORIGIN+$0058
  1918
  1919 = 3397 A5 9D		LASTARCCOORDS
  1919 				.endl							; UNIT GRAPH
  1920
  1921 				; ------------------------------------------------------------
  1922
  1923 3399			.local	VBXE						; UNIT
  1924
  1925 3399			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  1926 3399 85 8A			sta A
  1927
  1928 				; -------------------  ASM Block 00000100  -------------------
  1929
  1930 339B				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 339B A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 339D A0 5F		        ldy     #FX_MEMS
     4 339F 91 80		        sta     (fxptr),y
  1931
  1932 33A1 A5 8A			lda a
  1933 33A3 38 E9 01			sub #1
  1934
  1935 33A6 A0 02			ldy #s@xdl.RPTL_
  1936 33A8 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1937
  1938 33AB				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33AB A9 00		        lda     #$00
     3 33AD A0 5F		        ldy     #FX_MEMS
     4 33AF 91 80		        sta     (fxptr),y
  1939
  1940 				; ------------------------------------------------------------
  1941
  1942 = 008A			A	= :EDX
  1943
  1944 33B1			@exit
  1945 					.ifdef @new
  1946 					lda <@VarData
  1947 					sta :ztmp
  1948 					lda >@VarData
  1949 					ldy #@VarDataSize-1
  1950 					jmp @FreeMem
  1951 					els
  1952 33B1 60				rts						; ret
  1953 					eif
  1954 				.endl
  1955
  1956 33B2			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  1957 33B2 85 8A			sta A
  1958
  1959 				; -------------------  ASM Block 00000101  -------------------
  1960
  1961 33B4				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33B4 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33B6 A0 5F		        ldy     #FX_MEMS
     4 33B8 91 80		        sta     (fxptr),y
  1962
  1963 33BA A5 8A			lda a
  1964 33BC 38 E9 01			sub #1
  1965
  1966 33BF A0 05			ldy #s@xdl.RPTL
  1967 33C1 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1968
  1969 33C4				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33C4 A9 00		        lda     #$00
     3 33C6 A0 5F		        ldy     #FX_MEMS
     4 33C8 91 80		        sta     (fxptr),y
  1970
  1971 				; ------------------------------------------------------------
  1972
  1973 = 008A			A	= :EDX
  1974
  1975 33CA			@exit
  1976 					.ifdef @new
  1977 					lda <@VarData
  1978 					sta :ztmp
  1979 					lda >@VarData
  1980 					ldy #@VarDataSize-1
  1981 					jmp @FreeMem
  1982 					els
  1983 33CA 60				rts						; ret
  1984 					eif
  1985 				.endl
  1986
  1987 33CB			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  1988 33CB 8D D2 9D			sta B
  1989
  1990 				; -------------------  ASM Block 00000113  -------------------
  1991
  1992 33CE				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 33CE AD D2 9D		        lda     B
     3 33D1 A0 5F		        ldy     #FX_MEMS
     4 33D3 91 80		        sta     (fxptr),y
  1993
  1994 				; ------------------------------------------------------------
  1995
  1996 = 9DD2			B	= DATAORIGIN+$006E
  1997
  1998 = 9DD2			@VarData	= B
  1999 = 0001			@VarDataSize	= 1
  2000
  2001 33D5			@exit
  2002 					.ifdef @new
  2003 					lda <@VarData
  2004 					sta :ztmp
  2005 					lda >@VarData
  2006 					ldy #@VarDataSize-1
  2007 					jmp @FreeMem
  2008 					els
  2009 33D5 60				rts						; ret
  2010 					eif
  2011 				.endl
  2012
  2013 33D6			.local	READVBXEMEMORYBYTE				; FUNCTION
  2014
  2015 				; optimize OK (vbxe_memorystream.inc), line = 20
  2016
  2017 33D6 AC D3 9D 84 84 AC + 	mwy POSITION :bp2
  2018 33E0 A0 02			ldy #$02
  2019 33E2 B1 84			lda (:bp2),y
  2020 33E4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2021 33E6 88				dey
  2022 33E7 B1 84			lda (:bp2),y
  2023 33E9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2024 33EB 6A				ror @
  2025 33EC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2026 33EE 6A				ror @
  2027 33EF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2028 33F1 6A				ror @
  2029 33F2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2030 33F4 6A				ror @
  2031 33F5 09 80			ora #$80
  2032 33F7 8D D6 9D			sta BNK
  2033
  2034 				; optimize OK (vbxe_memorystream.inc), line = 21
  2035
  2036 33FA 88				dey
  2037 33FB B1 84			lda (:bp2),y
  2038 33FD 8D D7 9D			sta ADR
  2039 3400 C8				iny
  2040 3401 B1 84			lda (:bp2),y
  2041 3403 29 0F			and #$0F
  2042 3405 09 B0			ora #$B0
  2043 3407 8D D8 9D			sta ADR+1
  2044
  2045 				; optimize OK (vbxe_memorystream.inc), line = 23
  2046
  2047 340A AD D6 9D			lda BNK
  2048 340D 20 CB 33			jsr VBXEMEMORYBANK
  2049
  2050 				; optimize OK (vbxe_memorystream.inc), line = 25
  2051
  2052 3410 AC D8 9D			ldy ADR+1
  2053 3413 84 83			sty :bp+1
  2054 3415 AC D7 9D			ldy ADR
  2055 3418 B1 82			lda (:bp),y
  2056 341A 8D D5 9D			sta RESULT
  2057
  2058 				; optimize OK (vbxe_memorystream.inc), line = 27
  2059
  2060 341D AC D3 9D 84 84 AC + 	mwy POSITION :bp2
  2061 3427 A0 00			ldy #$00
  2062 3429 B1 84			lda (:bp2),y
  2063 342B 18 69 01			add #$01
  2064 342E 91 84			sta (:bp2),y
  2065 3430 C8				iny
  2066 3431 B1 84			lda (:bp2),y
  2067 3433 69 00			adc #$00
  2068 3435 91 84			sta (:bp2),y
  2069 3437 C8				iny
  2070 3438 B1 84			lda (:bp2),y
  2071 343A 69 00			adc #$00
  2072 343C 91 84			sta (:bp2),y
  2073 343E C8				iny
  2074 343F B1 84			lda (:bp2),y
  2075 3441 69 00			adc #$00
  2076 3443 91 84			sta (:bp2),y
  2077 3445			@exit
  2078
  2079 				; ------------------------------------------------------------
  2080
  2081 = 9DD3			POSITION	= DATAORIGIN+$006F
  2082 = 9DD5			RESULT	= DATAORIGIN+$0071
  2083 = 9DD6			BNK	= DATAORIGIN+$0072
  2084 = 9DD7			ADR	= DATAORIGIN+$0073
  2085
  2086 = 9DD3			@VarData	= POSITION
  2087 = 0005			@VarDataSize	= 5
  2088
  2089 3445 60				rts						; ret
  2090 				.endl
  2091
  2092 3446			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2093
  2094 				; optimize OK (vbxe_memorystream.inc), line = 39
  2095
  2096 3446 AC D9 9D 84 84 AC + 	mwy POSITION :bp2
  2097 3450 A0 02			ldy #$02
  2098 3452 B1 84			lda (:bp2),y
  2099 3454 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2100 3456 88				dey
  2101 3457 B1 84			lda (:bp2),y
  2102 3459 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2103 345B 6A				ror @
  2104 345C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2105 345E 6A				ror @
  2106 345F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2107 3461 6A				ror @
  2108 3462 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2109 3464 6A				ror @
  2110 3465 09 80			ora #$80
  2111 3467 8D DC 9D			sta BNK
  2112
  2113 				; optimize OK (vbxe_memorystream.inc), line = 40
  2114
  2115 346A 88				dey
  2116 346B B1 84			lda (:bp2),y
  2117 346D 8D DD 9D			sta ADR
  2118 3470 C8				iny
  2119 3471 B1 84			lda (:bp2),y
  2120 3473 29 0F			and #$0F
  2121 3475 09 B0			ora #$B0
  2122 3477 8D DE 9D			sta ADR+1
  2123
  2124 				; optimize OK (vbxe_memorystream.inc), line = 42
  2125
  2126 347A AD DC 9D			lda BNK
  2127 347D 20 CB 33			jsr VBXEMEMORYBANK
  2128
  2129 				; optimize OK (vbxe_memorystream.inc), line = 44
  2130
  2131 3480 AC DE 9D			ldy ADR+1
  2132 3483 84 83			sty :bp+1
  2133 3485 AC DD 9D			ldy ADR
  2134 3488 AD DB 9D			lda A
  2135 348B 91 82			sta (:bp),y
  2136
  2137 				; optimize OK (vbxe_memorystream.inc), line = 46
  2138
  2139 348D AC D9 9D 84 84 AC + 	mwy POSITION :bp2
  2140 3497 A0 00			ldy #$00
  2141 3499 B1 84			lda (:bp2),y
  2142 349B 18 69 01			add #$01
  2143 349E 91 84			sta (:bp2),y
  2144 34A0 C8				iny
  2145 34A1 B1 84			lda (:bp2),y
  2146 34A3 69 00			adc #$00
  2147 34A5 91 84			sta (:bp2),y
  2148 34A7 C8				iny
  2149 34A8 B1 84			lda (:bp2),y
  2150 34AA 69 00			adc #$00
  2151 34AC 91 84			sta (:bp2),y
  2152 34AE C8				iny
  2153 34AF B1 84			lda (:bp2),y
  2154 34B1 69 00			adc #$00
  2155 34B3 91 84			sta (:bp2),y
  2156
  2157 				; ------------------------------------------------------------
  2158
  2159 = 9DD9			POSITION	= DATAORIGIN+$0075
  2160 = 9DDB			A	= DATAORIGIN+$0077
  2161 = 9DDC			BNK	= DATAORIGIN+$0078
  2162 = 9DDD			ADR	= DATAORIGIN+$0079
  2163
  2164 = 9DD9			@VarData	= POSITION
  2165 = 0006			@VarDataSize	= 6
  2166
  2167 34B5			@exit
  2168 					.ifdef @new
  2169 					lda <@VarData
  2170 					sta :ztmp
  2171 					lda >@VarData
  2172 					ldy #@VarDataSize-1
  2173 					jmp @FreeMem
  2174 					els
  2175 34B5 60				rts						; ret
  2176 					eif
  2177 				.endl
  2178
  2179 34B6			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2180 34B6 8D EB 9D			sta TVBXEMEMORYSTREAM
  2181 34B9 8C EC 9D			sty TVBXEMEMORYSTREAM+1
  2182 34BC 8D F1 9D			sta POSITION
  2183 34BF 8C F2 9D			sty POSITION+1
  2184 34C2 18 69 04			add #4
  2185 34C5 90 01			scc
  2186 34C7 C8				iny
  2187 34C8 8D F3 9D			sta SIZE
  2188 34CB 8C F4 9D			sty SIZE+1
  2189
  2190 				; optimize OK (vbxe_memorystream.inc), line = 124
  2191
  2192 34CE AC F1 9D 84 84 AC + 	mwy POSITION :bp2
  2193 34D8 A0 02			ldy #$02
  2194 34DA B1 84			lda (:bp2),y
  2195 34DC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2196 34DE 88				dey
  2197 34DF B1 84			lda (:bp2),y
  2198 34E1 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2199 34E3 6A				ror @
  2200 34E4 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2201 34E6 6A				ror @
  2202 34E7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2203 34E9 6A				ror @
  2204 34EA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2205 34EC 6A				ror @
  2206 34ED 09 80			ora #$80
  2207 34EF 8D F5 9D			sta BNK
  2208
  2209 				; optimize OK (vbxe_memorystream.inc), line = 125
  2210
  2211 34F2 88				dey
  2212 34F3 B1 84			lda (:bp2),y
  2213 34F5 8D F6 9D			sta ADR
  2214 34F8 C8				iny
  2215 34F9 B1 84			lda (:bp2),y
  2216 34FB 29 0F			and #$0F
  2217 34FD 09 B0			ora #$B0
  2218 34FF 8D F7 9D			sta ADR+1
  2219
  2220 				; optimize OK (vbxe_memorystream.inc), line = 127
  2221
  2222 3502 AD F5 9D			lda BNK
  2223 3505 20 CB 33			jsr VBXEMEMORYBANK
  2224
  2225 				; optimize OK (vbxe_memorystream.inc), line = 129
  2226
  2227 3508 AD ED 9D			lda BUFFER
  2228 350B 8D FA 9D			sta SRC
  2229 350E AD EE 9D			lda BUFFER+1
  2230 3511 8D FB 9D			sta SRC+1
  2231
  2232 				; optimize OK (vbxe_memorystream.inc), line = 131
  2233
  2234 3514 A9 00			lda #$00
  2235 3516 8D F8 9D			sta I
  2236 3519 8D F9 9D			sta I+1
  2237 351C AD EF 9D			lda COUNT
  2238 351F 38 E9 01			sub #$01
  2239 3522 8D 35 35			sta @FORTMP_0394_0
  2240 3525 AD F0 9D			lda COUNT+1
  2241 3528 E9 00			sbc #$00
  2242 352A 8D 2E 35			sta @FORTMP_0394_1
  2243
  2244 352D			l_0397
  2245 				; --- ForToDoCondition
  2246 352D A9 00			lda @FORTMP_0394_1::#$00
  2247 352F CD F9 9D			cmp I+1
  2248 3532 D0 05			bne @+
  2249 3534 A9 00			lda @FORTMP_0394_0::#$00
  2250 3536 CD F8 9D			cmp I
  2251 				@
  2252 3539 90 53			jcc l_03A3
  2253
  2254 				; optimize OK (vbxe_memorystream.inc), line = 133
  2255
  2256 353B AC FA 9D 84 84 AC + 	mwy SRC :bp2
  2257 3545 A0 00			ldy #$00
  2258 3547 B1 84			lda (:bp2),y
  2259 3549 AC F7 9D			ldy ADR+1
  2260 354C 84 83			sty :bp+1
  2261 354E AC F6 9D			ldy ADR
  2262 3551 91 82			sta (:bp),y
  2263
  2264 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2265
  2266 3553 EE F6 9D			inc ADR
  2267 3556 D0 03			sne
  2268 3558 EE F7 9D			inc ADR+1
  2269
  2270 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2271
  2272 355B EE FA 9D			inc SRC
  2273 355E D0 03			sne
  2274 3560 EE FB 9D			inc SRC+1
  2275
  2276 				; optimize OK (vbxe_memorystream.inc), line = 138
  2277
  2278 3563 AD F7 9D			lda ADR+1
  2279 3566 C9 C0			cmp #$C0
  2280 3568 90 1A			jcc l_03C2
  2281 356A D0 05			bne @+
  2282 356C AD F6 9D			lda ADR
  2283 356F 90 13			jcc l_03C2
  2284 				@
  2285
  2286 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2287
  2288 3571 EE F5 9D			inc BNK
  2289
  2290 				; optimize OK (vbxe_memorystream.inc), line = 140
  2291
  2292 3574 AD F5 9D			lda BNK
  2293 3577 20 CB 33			jsr VBXEMEMORYBANK
  2294
  2295 				; optimize OK (vbxe_memorystream.inc), line = 141
  2296
  2297 357A A9 00			lda #$00
  2298 357C 8D F6 9D			sta ADR
  2299 357F A9 B0			lda #$B0
  2300 3581 8D F7 9D			sta ADR+1
  2301 3584			l_03C2
  2302
  2303 				; --- ForToDoEpilog
  2304 3584 EE F8 9D			inc I
  2305 3587 D0 A4			jne l_0397
  2306 3589 EE F9 9D			inc I+1
  2307 358C D0 9F			jne l_0397
  2308 358E			l_03A3
  2309
  2310 				; optimize OK (vbxe_memorystream.inc), line = 146
  2311
  2312 358E A9 00			lda #$00
  2313 3590 20 CB 33			jsr VBXEMEMORYBANK
  2314
  2315 				; optimize OK (vbxe_memorystream.inc), line = 148
  2316
  2317 3593 AC F1 9D 84 84 AC + 	mwy POSITION :bp2
  2318 359D A0 00			ldy #$00
  2319 359F B1 84			lda (:bp2),y
  2320 35A1 18 6D EF 9D			add COUNT
  2321 35A5 91 84			sta (:bp2),y
  2322 35A7 C8				iny
  2323 35A8 B1 84			lda (:bp2),y
  2324 35AA 6D F0 9D			adc COUNT+1
  2325 35AD 91 84			sta (:bp2),y
  2326 35AF C8				iny
  2327 35B0 B1 84			lda (:bp2),y
  2328 35B2 69 00			adc #$00
  2329 35B4 91 84			sta (:bp2),y
  2330 35B6 C8				iny
  2331 35B7 B1 84			lda (:bp2),y
  2332 35B9 69 00			adc #$00
  2333 35BB 91 84			sta (:bp2),y
  2334
  2335 				; ------------------------------------------------------------
  2336
  2337 = 9DEB			TVBXEMEMORYSTREAM	= DATAORIGIN+$0087
  2338 = 9DED			BUFFER	= DATAORIGIN+$0089
  2339 = 9DEF			COUNT	= DATAORIGIN+$008B
  2340 = 9DF1			POSITION	= DATAORIGIN+$008D
  2341 = 9DF3			SIZE	= DATAORIGIN+$008F
  2342 = 9DF5			BNK	= DATAORIGIN+$0091
  2343 = 9DF6			ADR	= DATAORIGIN+$0092
  2344 = 9DF8			I	= DATAORIGIN+$0094
  2345 = 9DFA			SRC	= DATAORIGIN+$0096
  2346
  2347 = 9DEB			@VarData	= TVBXEMEMORYSTREAM
  2348 = 0011			@VarDataSize	= 17
  2349
  2350 35BD			@exit
  2351 					.ifdef @new
  2352 					lda <@VarData
  2353 					sta :ztmp
  2354 					lda >@VarData
  2355 					ldy #@VarDataSize-1
  2356 					jmp @FreeMem
  2357 					els
  2358 35BD 60				rts						; ret
  2359 					eif
  2360 				.endl
  2361
  2362 35BE			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2363 35BE 8D FE 9D			sta TVBXEMEMORYSTREAM
  2364 35C1 8C FF 9D			sty TVBXEMEMORYSTREAM+1
  2365 35C4 8D 01 9E			sta POSITION
  2366 35C7 8C 02 9E			sty POSITION+1
  2367 35CA 18 69 04			add #4
  2368 35CD 90 01			scc
  2369 35CF C8				iny
  2370 35D0 8D 03 9E			sta SIZE
  2371 35D3 8C 04 9E			sty SIZE+1
  2372
  2373 				; optimize OK (vbxe_memorystream.inc), line = 158
  2374
  2375 35D6 AD 01 9E			lda POSITION
  2376 35D9 8D D3 9D			sta READVBXEMEMORYBYTE.POSITION
  2377 35DC AD 02 9E			lda POSITION+1
  2378 35DF 8D D4 9D			sta READVBXEMEMORYBYTE.POSITION+1
  2379 35E2 20 D6 33			jsr READVBXEMEMORYBYTE
  2380 35E5 AD D5 9D			lda READVBXEMEMORYBYTE.RESULT
  2381 35E8 8D 00 9E			sta RESULT
  2382
  2383 				; optimize OK (vbxe_memorystream.inc), line = 160
  2384
  2385 35EB A9 00			lda #$00
  2386 35ED 20 CB 33			jsr VBXEMEMORYBANK
  2387 35F0			@exit
  2388
  2389 				; ------------------------------------------------------------
  2390
  2391 = 9DFE			TVBXEMEMORYSTREAM	= DATAORIGIN+$009A
  2392 = 9E00			RESULT	= DATAORIGIN+$009C
  2393 = 9E01			POSITION	= DATAORIGIN+$009D
  2394 = 9E03			SIZE	= DATAORIGIN+$009F
  2395
  2396 = 9DFE			@VarData	= TVBXEMEMORYSTREAM
  2397 = 0006			@VarDataSize	= 6
  2398
  2399 35F0 60				rts						; ret
  2400 				.endl
  2401
  2402 35F1			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2403 35F1 8D 0D 9E			sta TVBXEMEMORYSTREAM
  2404 35F4 8C 0E 9E			sty TVBXEMEMORYSTREAM+1
  2405 35F7 8D 10 9E			sta POSITION
  2406 35FA 8C 11 9E			sty POSITION+1
  2407 35FD 18 69 04			add #4
  2408 3600 90 01			scc
  2409 3602 C8				iny
  2410 3603 8D 12 9E			sta SIZE
  2411 3606 8C 13 9E			sty SIZE+1
  2412
  2413 				; optimize OK (vbxe_memorystream.inc), line = 198
  2414
  2415 3609 AD 10 9E			lda POSITION
  2416 360C 8D D9 9D			sta WRITEVBXEMEMORYBYTE.POSITION
  2417 360F AD 11 9E			lda POSITION+1
  2418 3612 8D DA 9D			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2419 3615 AD 0F 9E			lda B
  2420 3618 8D DB 9D			sta WRITEVBXEMEMORYBYTE.A
  2421 361B 20 46 34			jsr WRITEVBXEMEMORYBYTE
  2422
  2423 				; optimize OK (vbxe_memorystream.inc), line = 200
  2424
  2425 361E A9 00			lda #$00
  2426 3620 20 CB 33			jsr VBXEMEMORYBANK
  2427
  2428 				; ------------------------------------------------------------
  2429
  2430 = 9E0D			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A9
  2431 = 9E0F			B	= DATAORIGIN+$00AB
  2432 = 9E10			POSITION	= DATAORIGIN+$00AC
  2433 = 9E12			SIZE	= DATAORIGIN+$00AE
  2434
  2435 = 9E0D			@VarData	= TVBXEMEMORYSTREAM
  2436 = 0007			@VarDataSize	= 7
  2437
  2438 3623			@exit
  2439 					.ifdef @new
  2440 					lda <@VarData
  2441 					sta :ztmp
  2442 					lda >@VarData
  2443 					ldy #@VarDataSize-1
  2444 					jmp @FreeMem
  2445 					els
  2446 3623 60				rts						; ret
  2447 					eif
  2448 				.endl
  2449
  2450 3624			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2451 3624 8D 1C 9E			sta TVBXEMEMORYSTREAM
  2452 3627 8C 1D 9E			sty TVBXEMEMORYSTREAM+1
  2453 362A 8D 1E 9E			sta POSITION
  2454 362D 8C 1F 9E			sty POSITION+1
  2455 3630 18 69 04			add #4
  2456 3633 90 01			scc
  2457 3635 C8				iny
  2458 3636 8D 20 9E			sta SIZE
  2459 3639 8C 21 9E			sty SIZE+1
  2460
  2461 				; optimize OK (vbxe_memorystream.inc), line = 239
  2462
  2463 363C AC 1E 9E 84 84 AC + 	mwy POSITION :bp2
  2464 3646 A0 00			ldy #$00
  2465 3648 B1 84			lda (:bp2),y
  2466 364A 8D 22 9E			sta ADR
  2467 364D C8				iny
  2468 364E B1 84			lda (:bp2),y
  2469 3650 8D 23 9E			sta ADR+1
  2470 3653 C8				iny
  2471 3654 B1 84			lda (:bp2),y
  2472 3656 8D 24 9E			sta ADR+2
  2473 3659 C8				iny
  2474 365A B1 84			lda (:bp2),y
  2475 365C 8D 25 9E			sta ADR+3
  2476
  2477 				; optimize OK (vbxe_memorystream.inc), line = 240
  2478
  2479 365F AC 20 9E 84 84 AC + 	mwy SIZE :bp2
  2480 3669 A0 00			ldy #$00
  2481 366B B1 84			lda (:bp2),y
  2482 366D 8D 26 9E			sta SIZ
  2483 3670 C8				iny
  2484 3671 B1 84			lda (:bp2),y
  2485 3673 8D 27 9E			sta SIZ+1
  2486 3676 C8				iny
  2487 3677 B1 84			lda (:bp2),y
  2488 3679 8D 28 9E			sta SIZ+2
  2489 367C C8				iny
  2490 367D B1 84			lda (:bp2),y
  2491 367F 8D 29 9E			sta SIZ+3
  2492
  2493 				; -------------------  ASM Block 00000114  -------------------
  2494
  2495 3682 8A 48			txa:pha
  2496
  2497 3684 AD 22 9E 8D F2 36		mva adr _adr
  2498 368A AD 23 9E 8D F3 36		mva adr+1 _adr+1
  2499 3690 AD 24 9E 8D F4 36		mva adr+2 _adr+2
  2500
  2501 3696				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3696 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3698 A0 5F		        ldy     #FX_MEMS
     4 369A 91 80		        sta     (fxptr),y
  2502
  2503 369C AD F4 36 CD 28 9E + loop	cpw _adr+1 siz+1
  2504 36AA B0 37			bcs skp
  2505
  2506 36AC A0 14			ldy #20
  2507 36AE B9 EC 36 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2508
  2509 36B7				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 36B7 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 36B9 A0 50		        ldy     #FX_BL_ADR0
     4 36BB 91 80		        sta     (fxptr),y
  2510 36BD				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 36BD A9 00		        lda     #$00
     3 36BF A0 51		        ldy     #FX_BL_ADR1
     4 36C1 91 80		        sta     (fxptr),y
  2511 36C3				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 36C3 A0 52		        ldy     #FX_BL_ADR2
     3 36C5 91 80		        sta     (fxptr),y
  2512
  2513 36C7				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 36C7 A9 01		        lda     #$01
     3 36C9 A0 53		        ldy     #FX_BLITTER_START
     4 36CB 91 80		        sta     (fxptr),y
  2514
  2515 36CD			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 36CD A0 53		        ldy     #FX_BLITTER_BUSY
     3 36CF B1 80		        lda     (fxptr),y
  2516 36D1 D0 FA			bne wait
  2517
  2518 36D3 A9 00			lda #$00
  2519 36D5 8D F2 36			sta _adr
  2520 36D8 EE F3 36 D0 03 EE + 	inw _adr+1
  2521
  2522 36E0 4C 9C 36			jmp loop
  2523
  2524 36E3			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 36E3 A9 00		        lda     #$00
     3 36E5 A0 5F		        ldy     #FX_MEMS
     4 36E7 91 80		        sta     (fxptr),y
  2525
  2526 36E9 4C 01 37			jmp stop
  2527
  2528 36EC 00 00 00		bltClr	.long 0x00	; source address
  2529 36EF 00 00			.word 0x00	; source step y
  2530 36F1 00				.byte 0x00	; source step x
  2531 36F2 00 00 00		_adr	.long 0x00	; destination address
  2532 36F5 00 01			.word 0x0100	; destination step y
  2533 36F7 01				.byte 0x01	; destination step x
  2534 36F8 FF 00		_siz	.word 0xff	; width
  2535 36FA 00				.byte 0x00	; height
  2536 36FB 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2537 36FC 00				dta 0x00	; xor mask
  2538 36FD 00				dta 0x00	; collision and mask
  2539 36FE 00				dta 0x00	; zoom
  2540 36FF 00				dta 0x00	; pattern feature
  2541 3700 00				dta 0x00	; control
  2542
  2543 3701 68 AA		stop	pla:tax
  2544
  2545 				; optimize OK (vbxe_memorystream.inc), line = 292
  2546
  2547 3703 AC 1E 9E 84 84 AC + 	mwy POSITION :bp2
  2548 370D A0 00			ldy #$00
  2549 370F 98				tya
  2550 3710 91 84			sta (:bp2),y
  2551 3712 C8				iny
  2552 3713 91 84			sta (:bp2),y
  2553 3715 C8				iny
  2554 3716 91 84			sta (:bp2),y
  2555 3718 C8				iny
  2556 3719 91 84			sta (:bp2),y
  2557
  2558 				; optimize OK (vbxe_memorystream.inc), line = 293
  2559
  2560 371B AC 20 9E 84 84 AC + 	mwy SIZE :bp2
  2561 3725 A0 00			ldy #$00
  2562 3727 91 84			sta (:bp2),y
  2563 3729 C8				iny
  2564 372A 91 84			sta (:bp2),y
  2565 372C C8				iny
  2566 372D A9 08			lda #$08
  2567 372F 91 84			sta (:bp2),y
  2568 3731 C8				iny
  2569 3732 A9 00			lda #$00
  2570 3734 91 84			sta (:bp2),y
  2571
  2572 				; ------------------------------------------------------------
  2573
  2574 = 9E1C			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B8
  2575 = 9E1E			POSITION	= DATAORIGIN+$00BA
  2576 = 9E20			SIZE	= DATAORIGIN+$00BC
  2577 = 9E22			ADR	= DATAORIGIN+$00BE
  2578 = 9E26			SIZ	= DATAORIGIN+$00C2
  2579
  2580 = 9E1C			@VarData	= TVBXEMEMORYSTREAM
  2581 = 000E			@VarDataSize	= 14
  2582
  2583 3736			@exit
  2584 					.ifdef @new
  2585 					lda <@VarData
  2586 					sta :ztmp
  2587 					lda >@VarData
  2588 					ldy #@VarDataSize-1
  2589 					jmp @FreeMem
  2590 					els
  2591 3736 60				rts						; ret
  2592 					eif
  2593 				.endl
  2594
  2595 3737			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2596
  2597 				; -------------------  ASM Block 00000123  -------------------
  2598
  2599 					@setxdl #e@xdl.mapoff
  2599 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2599 3737 A9 05		 LDA# E@XDL.MAPOFF
  2599 3739 20 66 29		 JSR @SETXDL
  2600
  2601 373C			@exit
  2602 					.ifdef @new
  2603 					lda <@VarData
  2604 					sta :ztmp
  2605 					lda >@VarData
  2606 					ldy #@VarDataSize-1
  2607 					jmp @FreeMem
  2608 					els
  2609 373C 60				rts						; ret
  2610 					eif
  2611 				.endl
  2612
  2613 373D			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2614 373D			.local	@0201810000180000
  2615
  2616 				; optimize OK (VBXE), line = 643
  2617
  2618 373D AD 2A 9E			lda A
  2619 3740 8D 66 9D			sta SYSTEM.GRAPHMODE
  2620
  2621 				; optimize OK (VBXE), line = 645
  2622
  2623 3743 A9 C0			lda #$C0
  2624 3745 8D 6B 9D			sta SYSTEM.SCREENHEIGHT
  2625 3748 A9 00			lda #$00
  2626 374A 8D 6C 9D			sta SYSTEM.SCREENHEIGHT+1
  2627
  2628 				; optimize OK (VBXE), line = 647
  2629
  2630 374D AD 2A 9E			lda A
  2631 3750 8D 2D 9E			sta @CASETMP_0005
  2632 3753 C9 0A			cmp #$0A
  2633 3755 D0 12			jne l_0439
  2634 				@
  2635
  2636 				; optimize OK (VBXE), line = 648
  2637
  2638 3757 A9 A0			lda #$A0
  2639 3759 8D 69 9D			sta SYSTEM.SCREENWIDTH
  2640 375C A9 00			lda #$00
  2641 375E 8D 6A 9D			sta SYSTEM.SCREENWIDTH+1
  2642 3761 A9 01			lda #$01
  2643 3763 8D 2A 9E			sta A
  2644 3766 4C AE 37			jmp a_0005
  2645 3769			l_0439
  2646 3769 C9 1F			cmp #$1F
  2647 376B D0 12			jne l_0448
  2648
  2649 				; optimize OK (VBXE), line = 649
  2650
  2651 376D A9 40			lda #$40
  2652 376F 8D 69 9D			sta SYSTEM.SCREENWIDTH
  2653 3772 A9 01			lda #$01
  2654 3774 8D 6A 9D			sta SYSTEM.SCREENWIDTH+1
  2655 3777 A9 02			lda #$02
  2656 3779 8D 2A 9E			sta A
  2657 377C 4C AE 37			jmp a_0005
  2658 377F			l_0448
  2659 377F C9 18			cmp #$18
  2660 3781 D0 12			jne l_0457
  2661
  2662 				; optimize OK (VBXE), line = 650
  2663
  2664 3783 A9 80			lda #$80
  2665 3785 8D 69 9D			sta SYSTEM.SCREENWIDTH
  2666 3788 A9 02			lda #$02
  2667 378A 8D 6A 9D			sta SYSTEM.SCREENWIDTH+1
  2668 378D A9 03			lda #$03
  2669 378F 8D 2A 9E			sta A
  2670 3792 4C AE 37			jmp a_0005
  2671 3795			l_0457
  2672
  2673 				; optimize OK (VBXE), line = 654
  2674
  2675 3795 A9 50			lda #$50
  2676 3797 8D 69 9D			sta SYSTEM.SCREENWIDTH
  2677 379A A9 00			lda #$00
  2678 379C 8D 6A 9D			sta SYSTEM.SCREENWIDTH+1
  2679
  2680 				; optimize OK (VBXE), line = 655
  2681
  2682 379F A9 18			lda #$18
  2683 37A1 8D 6B 9D			sta SYSTEM.SCREENHEIGHT
  2684 37A4 A9 00			lda #$00
  2685 37A6 8D 6C 9D			sta SYSTEM.SCREENHEIGHT+1
  2686
  2687 				; optimize OK (VBXE), line = 656
  2688
  2689 37A9 A9 02			lda #$02
  2690 37AB 8D 2A 9E			sta A
  2691 37AE			a_0005
  2692
  2693 				; -------------------  ASM Block 00000124  -------------------
  2694
  2695 37AE 8A 48			txa:pha
  2696
  2697 37B0 AD 69 9D			lda MAIN.SYSTEM.ScreenWidth
  2698 37B3 AE 6A 9D			ldx MAIN.SYSTEM.ScreenWidth+1
  2699
  2700 37B6 AC 6B 9D			ldy MAIN.SYSTEM.ScreenHeight
  2701
  2702 37B9 20 5D 21			@SCREENSIZE
  2703
  2704 					@setxdl a
  2704 				 LDA A\ JSR @SETXDL
  2704 37BC AD 2A 9E		 LDA A
  2704 37BF 20 66 29		 JSR @SETXDL
  2705
  2706 37C2				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 37C2 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 37C4 A0 5F		        ldy     #FX_MEMS
     4 37C6 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2707
  2708 37C8 A0 09			ldy #s@xdl.ovstep
  2709
  2710 37CA AD 2B 9E			lda s
  2711 37CD 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2712
  2713 37D0 AD 2C 9E			lda s+1
  2714 37D3 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2715
  2716 37D6				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 37D6 A9 00		        lda     #$00
     3 37D8 A0 5F		        ldy     #FX_MEMS
     4 37DA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2717
  2718 37DC 68 AA			pla:tax
  2719
  2720 				; ------------------------------------------------------------
  2721
  2722 = 9E2A			A	= DATAORIGIN+$00C6
  2723 = 9E2B			S	= DATAORIGIN+$00C7
  2724 = 9E2D			@CASETMP_0005	= DATAORIGIN+$00C9
  2725
  2726 = 9E2A			@VarData	= A
  2727 = 0004			@VarDataSize	= 4
  2728
  2729 37DE			@exit
  2730 					.ifdef @new
  2731 					lda <@VarData
  2732 					sta :ztmp
  2733 					lda >@VarData
  2734 					ldy #@VarDataSize-1
  2735 					jmp @FreeMem
  2736 					els
  2737 37DE 60				rts						; ret
  2738 					eif
  2739 				.endl
  2740 				.endl							; overload
  2741
  2742 37DF			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2743 37DF			.local	@010180000
  2744 37DF 8D 2E 9E			sta A
  2745
  2746 				; optimize OK (VBXE), line = 698
  2747
  2748 37E2 8D 2A 9E			sta SETHORIZONTALRES.@0201810000180000.A
  2749 37E5 A9 40			lda #$40
  2750 37E7 8D 2B 9E			sta SETHORIZONTALRES.@0201810000180000.S
  2751 37EA A9 01			lda #$01
  2752 37EC 8D 2C 9E			sta SETHORIZONTALRES.@0201810000180000.S+1
  2753 37EF 20 3D 37			jsr SETHORIZONTALRES.@0201810000180000
  2754
  2755 				; ------------------------------------------------------------
  2756
  2757 = 9E2E			A	= DATAORIGIN+$00CA
  2758
  2759 = 9E2E			@VarData	= A
  2760 = 0001			@VarDataSize	= 1
  2761
  2762 37F2			@exit
  2763 					.ifdef @new
  2764 					lda <@VarData
  2765 					sta :ztmp
  2766 					lda >@VarData
  2767 					ldy #@VarDataSize-1
  2768 					jmp @FreeMem
  2769 					els
  2770 37F2 60				rts						; ret
  2771 					eif
  2772 				.endl
  2773 				.endl							; overload
  2774
  2775 37F3			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2776
  2777 				; -------------------  ASM Block 00000126  -------------------
  2778
  2779 37F3				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 37F3 AD 2F 9E		        lda     A
     3 37F6 A0 50		        ldy     #FX_BL_ADR0
     4 37F8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2780 37FA AD 30 9E			lda	a+1
  2781 37FD 29 0F			and	#$0f
  2782 37FF				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 37FF A0 51		        ldy     #FX_BL_ADR1
     3 3801 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2783 3803				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3803 A9 00		        lda     #$00
     3 3805 A0 52		        ldy     #FX_BL_ADR2
     4 3807 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2784
  2785 3809				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3809 A9 01		        lda     #$01
     3 380B A0 53		        ldy     #FX_BLITTER_START
     4 380D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2786
  2787 				;wait	fxla	FX_BLITTER_BUSY
  2788 				;	bne	wait
  2789
  2790 				; ------------------------------------------------------------
  2791
  2792 = 9E2F			A	= DATAORIGIN+$00CB
  2793 = 9D64			A.SRC_ADR	= DATAORIGIN+$0000
  2794 = 9D64			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  2795 = 9D65			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  2796 = 9D66			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  2797 = 9D67			A.SRC_STEP_Y	= DATAORIGIN+$0003
  2798 = 9D69			A.SRC_STEP_X	= DATAORIGIN+$0005
  2799 = 9D6A			A.DST_ADR	= DATAORIGIN+$0006
  2800 = 9D6A			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  2801 = 9D6B			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  2802 = 9D6C			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  2803 = 9D6D			A.DST_STEP_Y	= DATAORIGIN+$0009
  2804 = 9D6F			A.DST_STEP_X	= DATAORIGIN+$000B
  2805 = 9D70			A.BLT_WIDTH	= DATAORIGIN+$000C
  2806 = 9D72			A.BLT_HEIGHT	= DATAORIGIN+$000E
  2807 = 9D73			A.BLT_AND_MASK	= DATAORIGIN+$000F
  2808 = 9D74			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  2809 = 9D75			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  2810 = 9D76			A.BLT_ZOOM	= DATAORIGIN+$0012
  2811 = 9D77			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  2812 = 9D78			A.BLT_CONTROL	= DATAORIGIN+$0014
  2813
  2814 = 9E2F			@VarData	= A
  2815 = 0002			@VarDataSize	= 2
  2816
  2817 380F			@exit
  2818 					.ifdef @new
  2819 					lda <@VarData
  2820 					sta :ztmp
  2821 					lda >@VarData
  2822 					ldy #@VarDataSize-1
  2823 					jmp @FreeMem
  2824 					els
  2825 380F 60				rts						; ret
  2826 					eif
  2827 				.endl
  2828
  2829 3810			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  2830 3810 8D 33 9E			sta A
  2831
  2832 				; -------------------  ASM Block 00000130  -------------------
  2833
  2834 3813				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 3813 AD 33 9E		        lda     A
     3 3816 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 3818 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2835
  2836 				; ------------------------------------------------------------
  2837
  2838 = 9E33			A	= DATAORIGIN+$00CF
  2839
  2840 = 9E33			@VarData	= A
  2841 = 0001			@VarDataSize	= 1
  2842
  2843 381A			@exit
  2844 					.ifdef @new
  2845 					lda <@VarData
  2846 					sta :ztmp
  2847 					lda >@VarData
  2848 					ldy #@VarDataSize-1
  2849 					jmp @FreeMem
  2850 					els
  2851 381A 60				rts						; ret
  2852 					eif
  2853 				.endl
  2854
  2855 				; ------------------------------------------------------------
  2856 				; ------------------------------------------------------------
  2857 381B			@UnitInit
  2858
  2859 				; -------------------  ASM Block 00000138  -------------------
  2860
  2861 381B 8A 48			txa:pha
  2862
  2863 381D 20 1A 28			jsr @vbxe_detect
  2864 3820 90 04			bcc ok
  2865
  2866 3822 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  2867 3824 D0 05			bne status
  2868
  2869 3826 20 70 28		ok	jsr @vbxe_init
  2870
  2871 3829 A2 01			ldx #MAIN.GRAPH.grOK
  2872 382B 8E A1 9D		status	stx MAIN.GRAPH.GraphResult
  2873
  2874 382E 68 AA			pla:tax
  2875
  2876 3830 60				rts
  2877
  2878 				; ------------------------------------------------------------
  2879
  2880 = 0001			VC_XDL	= $01
  2881 = 0002			VC_XCOLOR	= $02
  2882 = 0004			VC_NO_TRANS	= $04
  2883 = 0008			VC_TRANS15	= $08
  2884 = 0000			TCBLACK	= $00
  2885 = 0001			TCRED	= $01
  2886 = 0002			TCGREEN	= $02
  2887 = 0003			TCYELLOW	= $03
  2888 = 0004			TCBLUE	= $04
  2889 = 0005			TCMAGENTA	= $05
  2890 = 0006			TCCYAN	= $06
  2891 = 0007			TCWHITE	= $07
  2892 = 0008			TCBRIGHTBLACK	= $08
  2893 = 0009			TCBRIGHTRED	= $09
  2894 = 000A			TCBRIGHTGREEN	= $0A
  2895 = 000B			TCBRIGHTYELLOW	= $0B
  2896 = 000C			TCBRIGHTBLUE	= $0C
  2897 = 000D			TCBRIGHTMAGENTA	= $0D
  2898 = 000E			TCBRIGHTCYAN	= $0E
  2899 = 000F			TCBRIGHTWHITE	= $0F
  2900 = 0080			TBBLACK	= $80
  2901 = 0090			TBRED	= $90
  2902 = 00A0			TBGREEN	= $A0
  2903 = 00B0			TBYELLOW	= $B0
  2904 = 00C0			TBBLUE	= $C0
  2905 = 00D0			TBMAGENTA	= $D0
  2906 = 00E0			TBCYAN	= $E0
  2907 = 00F0			TBWHITE	= $F0
  2908 = 9DCA			adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
  2909 3831			.var VRAM	= adr.VRAM .word
  2910 = 9DCA			VRAM.POSITION	= DATAORIGIN+$0066
  2911 = 9DCE			VRAM.SIZE	= DATAORIGIN+$006A
  2912 = 0063			SCROLLBACK_FILL	= $63
  2913 = 295C			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  2914 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  2915 3831			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  2916 = 02FD			FILDAT	= $02FD
  2917 = 0054			ROWCRS	= $54
  2918 = 0055			COLCRS	= $55
  2919 = 0068			CRSADR	= $68
  2920
  2921 = 3831 CA 9D		VRAM
  2921 = 3833 00 04		SCROLLBACK_BUFFER
  2921 				.endl							; UNIT VBXE
  2922
  2923 				; ------------------------------------------------------------
  2924
  2925 3835			.local	JOYSTICK					; UNIT
  2926
  2927 				; ------------------------------------------------------------
  2928
  2929 = 000F			JOY_NONE	= $0F
  2930 = 000E			JOY_UP	= $0E
  2931 = 000D			JOY_DOWN	= $0D
  2932 = 000B			JOY_LEFT	= $0B
  2933 = 000A			JOY_LEFT_UP	= $0A
  2934 = 0009			JOY_LEFT_DOWN	= $09
  2935 = 0007			JOY_RIGHT	= $07
  2936 = 0006			JOY_RIGHT_UP	= $06
  2937 = 0005			JOY_RIGHT_DOWN	= $05
  2938 = 0278			JOY_1	= $0278
  2939 = 0279			JOY_2	= $0279
  2940 = 0278			adr.STICK	= $0278
  2941 3835			.var STICK	= adr.STICK .word
  2942 = 0278			STICK0	= $0278
  2943 = 0279			STICK1	= $0279
  2944 = 0284			adr.STRIG	= $0284
  2945 3835			.var STRIG	= adr.STRIG .word
  2946 = 0284			STRIG0	= $0284
  2947 = 0285			STRIG1	= $0285
  2948 = 0270			adr.PADDL	= $0270
  2949 3835			.var PADDL	= adr.PADDL .word
  2950 = 0270			PADDL0	= $0270
  2951 = 0271			PADDL1	= $0271
  2952 = 0272			PADDL2	= $0272
  2953 = 0273			PADDL3	= $0273
  2954 = 0274			PADDL4	= $0274
  2955 = 0275			PADDL5	= $0275
  2956 = 0276			PADDL6	= $0276
  2957 = 0277			PADDL7	= $0277
  2958 = 027C			adr.PTRIG	= $027C
  2959 3835			.var PTRIG	= adr.PTRIG .word
  2960 = 027C			PTRIG0	= $027C
  2961 = 027D			PTRIG1	= $027D
  2962 = 027E			PTRIG2	= $027E
  2963 = 027F			PTRIG3	= $027F
  2964 = 0280			PTRIG4	= $0280
  2965 = 0281			PTRIG5	= $0281
  2966 = 0282			PTRIG6	= $0282
  2967 = 0283			PTRIG7	= $0283
  2968 = D010			TRIG0	= $D010
  2969 = D011			TRIG1	= $D011
  2970 = D200			POT0	= $D200
  2971 = D208			ALLPOT	= $D208
  2972 = D20B			POTGO	= $D20B
  2973
  2974 = 3835 78 02		STICK
  2974 = 3837 84 02		STRIG
  2974 = 3839 70 02		PADDL
  2974 = 383B 7C 02		PTRIG
  2974 				.endl							; UNIT JOYSTICK
  2975
  2976 383D			.local	START_LEVEL					; PROCEDURE
  2977
  2978 383D			@exit
  2979 					.ifdef @new
  2980 					lda <@VarData
  2981 					sta :ztmp
  2982 					lda >@VarData
  2983 					ldy #@VarDataSize-1
  2984 					jmp @FreeMem
  2985 					els
  2986 383D 60				rts						; ret
  2987 					eif
  2988 				.endl
  2989
  2990 383E			.local	DEATH_SOUND					; PROCEDURE
  2991
  2992 				; ------------------------------------------------------------
  2993
  2994 = 9E3C			A	= DATAORIGIN+$00D8
  2995
  2996 = 9E3C			@VarData	= A
  2997 = 0002			@VarDataSize	= 2
  2998
  2999 383E			@exit
  3000 					.ifdef @new
  3001 					lda <@VarData
  3002 					sta :ztmp
  3003 					lda >@VarData
  3004 					ldy #@VarDataSize-1
  3005 					jmp @FreeMem
  3006 					els
  3007 383E 60				rts						; ret
  3008 					eif
  3009 				.endl
  3010
  3011 383F			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3012
  3013 				; ------------------------------------------------------------
  3014
  3015 = 9E3E			A	= DATAORIGIN+$00DA
  3016 = 9E40			B	= DATAORIGIN+$00DC
  3017
  3018 = 9E3E			@VarData	= A
  3019 = 0004			@VarDataSize	= 4
  3020
  3021 383F			@exit
  3022 					.ifdef @new
  3023 					lda <@VarData
  3024 					sta :ztmp
  3025 					lda >@VarData
  3026 					ldy #@VarDataSize-1
  3027 					jmp @FreeMem
  3028 					els
  3029 383F 60				rts						; ret
  3030 					eif
  3031 				.endl
  3032
  3033 3840			.local	SQRT32						; FUNCTION
  3034
  3035 				; optimize OK (arkanoid_vbxe.pas), line = 91
  3036
  3037 3840 AD 42 9E			lda V
  3038 3843 8D 50 9E			sta R
  3039 3846 AD 43 9E			lda V+1
  3040 3849 8D 51 9E			sta R+1
  3041 384C AD 44 9E			lda V+2
  3042 384F 8D 52 9E			sta R+2
  3043 3852 AD 45 9E			lda V+3
  3044 3855 8D 53 9E			sta R+3
  3045
  3046 				; optimize OK (arkanoid_vbxe.pas), line = 92
  3047
  3048 3858 A9 00			lda #$00
  3049 385A 8D 4C 9E			sta Q
  3050 385D 8D 4D 9E			sta Q+1
  3051 3860 8D 4E 9E			sta Q+2
  3052 3863 8D 4F 9E			sta Q+3
  3053
  3054 				; optimize OK (arkanoid_vbxe.pas), line = 93
  3055
  3056 3866 8D 48 9E			sta B
  3057 3869 8D 49 9E			sta B+1
  3058 386C 8D 4A 9E			sta B+2
  3059 386F A9 40			lda #$40
  3060
  3061 				; --- WhileProlog
  3062 3871 4C A9 38			jmp l_049E
  3063 3874			l_049F
  3064
  3065 				; optimize OK (arkanoid_vbxe.pas), line = 95
  3066
  3067 3874 AD 48 9E			lda B
  3068 3877 85 9F			sta :STACKORIGIN+9
  3069 3879 AD 49 9E			lda B+1
  3070 387C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3071 387E AD 4A 9E			lda B+2
  3072 3881 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3073 3883 AD 4B 9E			lda B+3
  3074 3886 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3075 3888 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3076 388A 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3077 388C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3078 388E 66 9F			ror :STACKORIGIN+9
  3079 3890 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3080 3892 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3081 3894 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3082 3896 66 9F			ror :STACKORIGIN+9
  3083 3898 A5 9F			lda :STACKORIGIN+9
  3084 389A 8D 48 9E			sta B
  3085 389D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3086 389F 8D 49 9E			sta B+1
  3087 38A2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3088 38A4 8D 4A 9E			sta B+2
  3089 38A7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3090 38A9			l_049E
  3091 38A9 8D 4B 9E			sta B+3
  3092 38AC CD 53 9E			cmp R+3
  3093 38AF D0 16			bne @+
  3094 38B1 AD 4A 9E			lda B+2
  3095 38B4 CD 52 9E			cmp R+2
  3096 38B7 D0 0E			bne @+
  3097 38B9 AD 49 9E			lda B+1
  3098 38BC CD 51 9E			cmp R+1
  3099 38BF D0 06			bne @+
  3100 38C1 AD 48 9E			lda B
  3101 38C4 CD 50 9E			cmp R
  3102 				@
  3103 38C7 F0 02			beq @+
  3104 38C9 B0 A9			jcs l_049F
  3105 				@
  3106
  3107 				; --- WhileProlog
  3108 38CB 4C A0 39			jmp l_04B3
  3109 38CE			l_04B4
  3110
  3111 				; optimize OK (arkanoid_vbxe.pas), line = 98
  3112
  3113 38CE AD 4C 9E			lda Q
  3114 38D1 18 6D 48 9E			add B
  3115 38D5 8D 54 9E			sta T
  3116 38D8 AD 4D 9E			lda Q+1
  3117 38DB 6D 49 9E			adc B+1
  3118 38DE 8D 55 9E			sta T+1
  3119 38E1 AD 4E 9E			lda Q+2
  3120 38E4 6D 4A 9E			adc B+2
  3121 38E7 8D 56 9E			sta T+2
  3122 38EA AD 4F 9E			lda Q+3
  3123 38ED 6D 4B 9E			adc B+3
  3124 38F0 8D 57 9E			sta T+3
  3125
  3126 				; optimize OK (arkanoid_vbxe.pas), line = 100
  3127
  3128 38F3 4E 4F 9E			lsr Q+3
  3129 38F6 6E 4E 9E			ror Q+2
  3130 38F9 6E 4D 9E			ror Q+1
  3131 38FC 6E 4C 9E			ror Q
  3132
  3133 				; optimize OK (arkanoid_vbxe.pas), line = 102
  3134
  3135 38FF AD 53 9E			lda R+3
  3136 3902 CD 57 9E			cmp T+3
  3137 3905 D0 16			bne @+
  3138 3907 AD 52 9E			lda R+2
  3139 390A CD 56 9E			cmp T+2
  3140 390D D0 0E			bne @+
  3141 390F AD 51 9E			lda R+1
  3142 3912 CD 55 9E			cmp T+1
  3143 3915 D0 06			bne @+
  3144 3917 AD 50 9E			lda R
  3145 391A CD 54 9E			cmp T
  3146 				@
  3147 391D 90 49			jcc l_04D4
  3148
  3149 				; optimize OK (arkanoid_vbxe.pas), line = 103
  3150
  3151 391F AD 50 9E			lda R
  3152 3922 ED 54 9E			sbc T
  3153 3925 8D 50 9E			sta R
  3154 3928 AD 51 9E			lda R+1
  3155 392B ED 55 9E			sbc T+1
  3156 392E 8D 51 9E			sta R+1
  3157 3931 AD 52 9E			lda R+2
  3158 3934 ED 56 9E			sbc T+2
  3159 3937 8D 52 9E			sta R+2
  3160 393A AD 53 9E			lda R+3
  3161 393D ED 57 9E			sbc T+3
  3162 3940 8D 53 9E			sta R+3
  3163
  3164 				; optimize OK (arkanoid_vbxe.pas), line = 104
  3165
  3166 3943 AD 4C 9E			lda Q
  3167 3946 18 6D 48 9E			add B
  3168 394A 8D 4C 9E			sta Q
  3169 394D AD 4D 9E			lda Q+1
  3170 3950 6D 49 9E			adc B+1
  3171 3953 8D 4D 9E			sta Q+1
  3172 3956 AD 4E 9E			lda Q+2
  3173 3959 6D 4A 9E			adc B+2
  3174 395C 8D 4E 9E			sta Q+2
  3175 395F AD 4F 9E			lda Q+3
  3176 3962 6D 4B 9E			adc B+3
  3177 3965 8D 4F 9E			sta Q+3
  3178 3968			l_04D4
  3179
  3180 				; optimize OK (arkanoid_vbxe.pas), line = 107
  3181
  3182 3968 AD 48 9E			lda B
  3183 396B 85 9F			sta :STACKORIGIN+9
  3184 396D AD 49 9E			lda B+1
  3185 3970 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3186 3972 AD 4A 9E			lda B+2
  3187 3975 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3188 3977 AD 4B 9E			lda B+3
  3189 397A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3190 397C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3191 397E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3192 3980 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3193 3982 66 9F			ror :STACKORIGIN+9
  3194 3984 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3195 3986 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3196 3988 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3197 398A 66 9F			ror :STACKORIGIN+9
  3198 398C A5 9F			lda :STACKORIGIN+9
  3199 398E 8D 48 9E			sta B
  3200 3991 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3201 3993 8D 49 9E			sta B+1
  3202 3996 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3203 3998 8D 4A 9E			sta B+2
  3204 399B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3205 399D 8D 4B 9E			sta B+3
  3206 39A0			l_04B3
  3207
  3208 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3209
  3210 39A0 AD 4B 9E			lda B+3
  3211 39A3 C9 00			cmp #$00
  3212 39A5 D0 13			bne @+
  3213 39A7 AD 4A 9E			lda B+2
  3214 39AA C9 00			cmp #$00
  3215 39AC D0 0C			bne @+
  3216 39AE AD 49 9E			lda B+1
  3217 39B1 C9 00			cmp #$00
  3218 39B3 D0 05			bne @+
  3219 39B5 AD 48 9E			lda B
  3220 39B8 C9 00			cmp #$00
  3221 				@
  3222 39BA F0 05			beq @+
  3223 39BC 90 03 4C CE 38		jcs l_04B4
  3224 				@
  3225
  3226 				; optimize OK (arkanoid_vbxe.pas), line = 111
  3227
  3228 39C1 AD 4C 9E			lda Q
  3229 39C4 8D 46 9E			sta RESULT
  3230 39C7 AD 4D 9E			lda Q+1
  3231 39CA 8D 47 9E			sta RESULT+1
  3232 39CD			@exit
  3233
  3234 				; ------------------------------------------------------------
  3235
  3236 = 9E42			V	= DATAORIGIN+$00DE
  3237 = 9E46			RESULT	= DATAORIGIN+$00E2
  3238 = 9E48			B	= DATAORIGIN+$00E4
  3239 = 9E4C			Q	= DATAORIGIN+$00E8
  3240 = 9E50			R	= DATAORIGIN+$00EC
  3241 = 9E54			T	= DATAORIGIN+$00F0
  3242
  3243 = 9E42			@VarData	= V
  3244 = 0014			@VarDataSize	= 20
  3245
  3246 39CD 60				rts						; ret
  3247 				.endl
  3248
  3249 39CE			.local	MOUSECOORDS					; PROCEDURE
  3250
  3251 				; optimize OK (service.pas), line = 296
  3252
  3253 39CE AD 00 D3			lda ATARI.PORTA
  3254 39D1 29 0F			and #$0F
  3255 39D3 8D 5F 9F			sta A
  3256
  3257 				; optimize OK (service.pas), line = 298
  3258
  3259 39D6 8D 60 9F			sta @CASETMP_0007
  3260 39D9 C9 0B			cmp #$0B
  3261 39DB D0 38			jne l_0516
  3262 				@
  3263
  3264 				; optimize OK (service.pas), line = 299
  3265
  3266 39DD AC 5D 9F 84 84 AC + 	mwy X :bp2
  3267 39E7 A0 00			ldy #$00
  3268 39E9 B1 84			lda (:bp2),y
  3269 39EB C8				iny
  3270 39EC C9 0B			cmp #$0B
  3271 39EE B1 84			lda (:bp2),y
  3272 39F0 E9 00			sbc #$00
  3273 39F2 50 02			svc
  3274 39F4 49 80			eor #$80
  3275 39F6 30 1A			jmi l_0527
  3276 39F8 AC 5D 9F 84 84 AC + 	mwy X :bp2
  3277 3A02 A0 00			ldy #$00
  3278 3A04 B1 84			lda (:bp2),y
  3279 3A06 38 E9 04			sub #$04
  3280 3A09 91 84			sta (:bp2),y
  3281 3A0B C8				iny
  3282 3A0C B1 84			lda (:bp2),y
  3283 3A0E E9 00			sbc #$00
  3284 3A10 91 84			sta (:bp2),y
  3285 3A12			l_0527
  3286 3A12 4C 4E 3A			jmp a_0007
  3287 3A15			l_0516
  3288 3A15 C9 07			cmp #$07
  3289 3A17 D0 35			jne l_0532
  3290
  3291 				; optimize OK (service.pas), line = 300
  3292
  3293 3A19 AC 5D 9F 84 84 AC + 	mwy X :bp2
  3294 3A23 A0 00			ldy #$00
  3295 3A25 B1 84			lda (:bp2),y
  3296 3A27 C8				iny
  3297 3A28 C9 D8			cmp #$D8
  3298 3A2A B1 84			lda (:bp2),y
  3299 3A2C E9 00			sbc #$00
  3300 3A2E 50 02			svc
  3301 3A30 49 80			eor #$80
  3302 3A32 10 1A			jpl l_0543
  3303 3A34 AC 5D 9F 84 84 AC + 	mwy X :bp2
  3304 3A3E A0 00			ldy #$00
  3305 3A40 B1 84			lda (:bp2),y
  3306 3A42 18 69 04			add #$04
  3307 3A45 91 84			sta (:bp2),y
  3308 3A47 C8				iny
  3309 3A48 B1 84			lda (:bp2),y
  3310 3A4A 69 00			adc #$00
  3311 3A4C 91 84			sta (:bp2),y
  3312 3A4E			l_0543
  3313 3A4E			l_0532
  3314 3A4E			a_0007
  3315
  3316 				; ------------------------------------------------------------
  3317
  3318 = 9F5D			X	= DATAORIGIN+$01F9
  3319 = 9F5F			A	= DATAORIGIN+$01FB
  3320 = 9F60			@CASETMP_0007	= DATAORIGIN+$01FC
  3321
  3322 = 9F5D			@VarData	= X
  3323 = 0004			@VarDataSize	= 4
  3324
  3325 3A4E			@exit
  3326 					.ifdef @new
  3327 					lda <@VarData
  3328 					sta :ztmp
  3329 					lda >@VarData
  3330 					ldy #@VarDataSize-1
  3331 					jmp @FreeMem
  3332 					els
  3333 3A4E 60				rts						; ret
  3334 					eif
  3335 				.endl
  3336
  3337 3A4F			.local	MOUSECLICK					; FUNCTION
  3338
  3339 				; optimize OK (service.pas), line = 310
  3340
  3341 3A4F			?volatile:
  3342 3A4F AD 10 D0			lda JOYSTICK.TRIG0
  3343 3A52 49 01			eor #$01
  3344 3A54 8D 61 9F			sta RESULT
  3345 3A57			@exit
  3346
  3347 				; ------------------------------------------------------------
  3348
  3349 = 9F61			RESULT	= DATAORIGIN+$01FD
  3350
  3351 3A57 60				rts						; ret
  3352 				.endl
  3353
  3354 3A58			.local	BLITBOX						; PROCEDURE
  3355
  3356 				; -------------------  ASM Block 00000141  -------------------
  3357
  3358 3A58				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3A58 A9 80		        lda     #$80
     3 3A5A A0 5F		        ldy     #FX_MEMS
     4 3A5C 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3359 					
  3360 				; optimize OK (service.pas), line = 323
  3361
  3362 3A5E AD 64 9F			lda SRC+2
  3363 3A61 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3364
  3365 				; optimize OK (service.pas), line = 324
  3366
  3367 3A64 AD 63 9F			lda SRC+1
  3368 3A67 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3369
  3370 				; optimize OK (service.pas), line = 325
  3371
  3372 3A6A AD 62 9F			lda SRC
  3373 3A6D 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3374
  3375 				; optimize OK (service.pas), line = 327
  3376
  3377 3A70 AD 68 9F			lda DST+2
  3378 3A73 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3379
  3380 				; optimize OK (service.pas), line = 328
  3381
  3382 3A76 AD 67 9F			lda DST+1
  3383 3A79 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3384
  3385 				; optimize OK (service.pas), line = 329
  3386
  3387 3A7C AD 66 9F			lda DST
  3388 3A7F 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3389
  3390 				; optimize OK (service.pas), line = 331
  3391
  3392 3A82 A9 01			lda #$01
  3393 3A84 8D 05 B1			sta BLT.SRC_STEP_X
  3394
  3395 				; optimize OK (service.pas), line = 332
  3396
  3397 3A87 8D 0B B1			sta BLT.DST_STEP_X
  3398
  3399 				; optimize OK (service.pas), line = 334
  3400
  3401 3A8A A9 40			lda #$40
  3402 3A8C 8D 09 B1			sta BLT.DST_STEP_Y
  3403 3A8F A9 01			lda #$01
  3404 3A91 8D 0A B1			sta BLT.DST_STEP_Y+1
  3405
  3406 				; optimize OK (service.pas), line = 335
  3407
  3408 3A94 A9 40			lda #$40
  3409 3A96 8D 03 B1			sta BLT.SRC_STEP_Y
  3410 3A99 A9 01			lda #$01
  3411 3A9B 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3412
  3413 				; optimize OK (service.pas), line = 337
  3414
  3415 3A9E AD 6A 9F			lda W
  3416 3AA1 38 E9 01			sub #$01
  3417 3AA4 8D 0C B1			sta BLT.BLT_WIDTH
  3418 3AA7 AD 6B 9F			lda W+1
  3419 3AAA E9 00			sbc #$00
  3420 3AAC 8D 0D B1			sta BLT.BLT_WIDTH+1
  3421
  3422 				; optimize OK (service.pas), line = 338
  3423
  3424 3AAF AC 6C 9F			ldy H
  3425 3AB2 88				dey
  3426 3AB3 8C 0E B1			sty BLT.BLT_HEIGHT
  3427
  3428 				; optimize OK (service.pas), line = 340
  3429
  3430 3AB6 A9 FF			lda #$FF
  3431 3AB8 8D 0F B1			sta BLT.BLT_AND_MASK
  3432
  3433 				; optimize OK (service.pas), line = 342
  3434
  3435 3ABB A9 00			lda #$00
  3436 3ABD 8D 12 B1			sta BLT.BLT_ZOOM
  3437
  3438 				; optimize OK (service.pas), line = 344
  3439
  3440 3AC0 8D 14 B1			sta BLT.BLT_CONTROL
  3441
  3442 				; -------------------  ASM Block 00000142  -------------------
  3443
  3444 3AC3				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3AC3 A9 00		        lda     #$00
     3 3AC5 A0 5F		        ldy     #FX_MEMS
     4 3AC7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3445 					
  3446 				; optimize OK (service.pas), line = 350
  3447
  3448 3AC9 AD F1 9C			lda BLT
  3449 3ACC 8D 2F 9E			sta VBXE.RUNBCB.A
  3450 3ACF AD F2 9C			lda BLT+1
  3451 3AD2 8D 30 9E			sta VBXE.RUNBCB.A+1
  3452 3AD5 20 F3 37			jsr VBXE.RUNBCB
  3453
  3454 				; ------------------------------------------------------------
  3455
  3456 = 9F62			SRC	= DATAORIGIN+$01FE
  3457 = 9F66			DST	= DATAORIGIN+$0202
  3458 = 9F6A			W	= DATAORIGIN+$0206
  3459 = 9F6C			H	= DATAORIGIN+$0208
  3460
  3461 = 9F62			@VarData	= SRC
  3462 = 000B			@VarDataSize	= 11
  3463
  3464 3AD8			@exit
  3465 					.ifdef @new
  3466 					lda <@VarData
  3467 					sta :ztmp
  3468 					lda >@VarData
  3469 					ldy #@VarDataSize-1
  3470 					jmp @FreeMem
  3471 					els
  3472 3AD8 60				rts						; ret
  3473 					eif
  3474 				.endl
  3475
  3476 3AD9			.local	BLITZERO					; PROCEDURE
  3477
  3478 				; -------------------  ASM Block 00000143  -------------------
  3479
  3480 3AD9				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3AD9 A9 80		        lda     #$80
     3 3ADB A0 5F		        ldy     #FX_MEMS
     4 3ADD 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3481 					
  3482 				; optimize OK (service.pas), line = 366
  3483
  3484 3ADF AD 6F 9F			lda SRC+2
  3485 3AE2 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3486
  3487 				; optimize OK (service.pas), line = 367
  3488
  3489 3AE5 AD 6E 9F			lda SRC+1
  3490 3AE8 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3491
  3492 				; optimize OK (service.pas), line = 368
  3493
  3494 3AEB AD 6D 9F			lda SRC
  3495 3AEE 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3496
  3497 				; optimize OK (service.pas), line = 370
  3498
  3499 3AF1 AD 73 9F			lda DST+2
  3500 3AF4 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3501
  3502 				; optimize OK (service.pas), line = 371
  3503
  3504 3AF7 AD 72 9F			lda DST+1
  3505 3AFA 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3506
  3507 				; optimize OK (service.pas), line = 372
  3508
  3509 3AFD AD 71 9F			lda DST
  3510 3B00 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3511
  3512 				; optimize OK (service.pas), line = 374
  3513
  3514 3B03 A9 01			lda #$01
  3515 3B05 8D 05 B1			sta BLT.SRC_STEP_X
  3516
  3517 				; optimize OK (service.pas), line = 375
  3518
  3519 3B08 8D 0B B1			sta BLT.DST_STEP_X
  3520
  3521 				; optimize OK (service.pas), line = 377
  3522
  3523 3B0B 8D 14 B1			sta BLT.BLT_CONTROL
  3524
  3525 				; optimize OK (service.pas), line = 379
  3526
  3527 3B0E A9 40			lda #$40
  3528 3B10 8D 09 B1			sta BLT.DST_STEP_Y
  3529 3B13 A9 01			lda #$01
  3530 3B15 8D 0A B1			sta BLT.DST_STEP_Y+1
  3531
  3532 				; optimize OK (service.pas), line = 380
  3533
  3534 3B18 AD 75 9F			lda W
  3535 3B1B 8D 03 B1			sta BLT.SRC_STEP_Y
  3536 3B1E AD 76 9F			lda W+1
  3537 3B21 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3538
  3539 				; optimize OK (service.pas), line = 382
  3540
  3541 3B24 AC 77 9F			ldy H
  3542 3B27 88				dey
  3543 3B28 8C 0E B1			sty BLT.BLT_HEIGHT
  3544
  3545 				; optimize OK (service.pas), line = 384
  3546
  3547 3B2B AD 75 9F			lda W
  3548 3B2E 38 E9 01			sub #$01
  3549 3B31 8D 0C B1			sta BLT.BLT_WIDTH
  3550 3B34 AD 76 9F			lda W+1
  3551 3B37 E9 00			sbc #$00
  3552 3B39 8D 0D B1			sta BLT.BLT_WIDTH+1
  3553
  3554 				; optimize OK (service.pas), line = 386
  3555
  3556 3B3C A9 FF			lda #$FF
  3557 3B3E 8D 0F B1			sta BLT.BLT_AND_MASK
  3558
  3559 				; -------------------  ASM Block 00000144  -------------------
  3560
  3561 3B41				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3B41 A9 00		        lda     #$00
     3 3B43 A0 5F		        ldy     #FX_MEMS
     4 3B45 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3562 					
  3563 				; optimize OK (service.pas), line = 393
  3564
  3565 3B47 AD F1 9C			lda BLT
  3566 3B4A 8D 2F 9E			sta VBXE.RUNBCB.A
  3567 3B4D AD F2 9C			lda BLT+1
  3568 3B50 8D 30 9E			sta VBXE.RUNBCB.A+1
  3569 3B53 20 F3 37			jsr VBXE.RUNBCB
  3570
  3571 				; ------------------------------------------------------------
  3572
  3573 = 9F6D			SRC	= DATAORIGIN+$0209
  3574 = 9F71			DST	= DATAORIGIN+$020D
  3575 = 9F75			W	= DATAORIGIN+$0211
  3576 = 9F77			H	= DATAORIGIN+$0213
  3577
  3578 = 9F6D			@VarData	= SRC
  3579 = 000B			@VarDataSize	= 11
  3580
  3581 3B56			@exit
  3582 					.ifdef @new
  3583 					lda <@VarData
  3584 					sta :ztmp
  3585 					lda >@VarData
  3586 					ldy #@VarDataSize-1
  3587 					jmp @FreeMem
  3588 					els
  3589 3B56 60				rts						; ret
  3590 					eif
  3591 				.endl
  3592
  3593 3B57			.local	BLITTMP						; PROCEDURE
  3594
  3595 				; optimize OK (service.pas), line = 405
  3596
  3597 3B57 AD 78 9F			lda DST
  3598 3B5A 8D 34 9E			sta VBXE_RAM.POSITION
  3599 3B5D AD 79 9F			lda DST+1
  3600 3B60 8D 35 9E			sta VBXE_RAM.POSITION+1
  3601 3B63 AD 7A 9F			lda DST+2
  3602 3B66 8D 36 9E			sta VBXE_RAM.POSITION+2
  3603 3B69 AD 7B 9F			lda DST+3
  3604 3B6C 8D 37 9E			sta VBXE_RAM.POSITION+3
  3605
  3606 				; optimize OK (service.pas), line = 407
  3607
  3608 3B6F AD 49 9D			lda TMP
  3609 3B72 8D ED 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3610 3B75 AD 4A 9D			lda TMP+1
  3611 3B78 8D EE 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3612 3B7B AD 7C 9F			lda SIZE
  3613 3B7E 8D EF 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3614 3B81 A9 00			lda #$00
  3615 3B83 8D F0 9D			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3616 3B86 AD F7 9C			lda VBXE_RAM
  3617 3B89 AC F8 9C			ldy VBXE_RAM+1
  3618 3B8C 20 B6 34			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3619
  3620 				; ------------------------------------------------------------
  3621
  3622 = 9F78			DST	= DATAORIGIN+$0214
  3623 = 9F7C			SIZE	= DATAORIGIN+$0218
  3624
  3625 = 9F78			@VarData	= DST
  3626 = 0005			@VarDataSize	= 5
  3627
  3628 3B8F			@exit
  3629 					.ifdef @new
  3630 					lda <@VarData
  3631 					sta :ztmp
  3632 					lda >@VarData
  3633 					ldy #@VarDataSize-1
  3634 					jmp @FreeMem
  3635 					els
  3636 3B8F 60				rts						; ret
  3637 					eif
  3638 				.endl
  3639
  3640 3B90			.local	BLITROW						; PROCEDURE
  3641
  3642 				; -------------------  ASM Block 00000145  -------------------
  3643
  3644 3B90				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B90 A9 80		        lda     #$80
     3 3B92 A0 5F		        ldy     #FX_MEMS
     4 3B94 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3645 					
  3646 				; optimize OK (service.pas), line = 423
  3647
  3648 3B96 AD 7F 9F			lda SRC+2
  3649 3B99 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3650
  3651 				; optimize OK (service.pas), line = 424
  3652
  3653 3B9C AD 7E 9F			lda SRC+1
  3654 3B9F 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3655
  3656 				; optimize OK (service.pas), line = 425
  3657
  3658 3BA2 AD 7D 9F			lda SRC
  3659 3BA5 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3660
  3661 				; optimize OK (service.pas), line = 427
  3662
  3663 3BA8 AD 83 9F			lda DST+2
  3664 3BAB 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3665
  3666 				; optimize OK (service.pas), line = 428
  3667
  3668 3BAE AD 82 9F			lda DST+1
  3669 3BB1 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3670
  3671 				; optimize OK (service.pas), line = 429
  3672
  3673 3BB4 AD 81 9F			lda DST
  3674 3BB7 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3675
  3676 				; optimize OK (service.pas), line = 431
  3677
  3678 3BBA A9 01			lda #$01
  3679 3BBC 8D 05 B1			sta BLT.SRC_STEP_X
  3680
  3681 				; optimize OK (service.pas), line = 432
  3682
  3683 3BBF 8D 0B B1			sta BLT.DST_STEP_X
  3684
  3685 				; optimize OK (service.pas), line = 434
  3686
  3687 3BC2 A9 00			lda #$00
  3688 3BC4 8D 03 B1			sta BLT.SRC_STEP_Y
  3689 3BC7 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3690
  3691 				; optimize OK (service.pas), line = 435
  3692
  3693 3BCA 8D 09 B1			sta BLT.DST_STEP_Y
  3694 3BCD 8D 0A B1			sta BLT.DST_STEP_Y+1
  3695
  3696 				; optimize OK (service.pas), line = 437
  3697
  3698 3BD0 8D 0E B1			sta BLT.BLT_HEIGHT
  3699
  3700 				; optimize OK (service.pas), line = 438
  3701
  3702 3BD3 8D 14 B1			sta BLT.BLT_CONTROL
  3703
  3704 				; optimize OK (service.pas), line = 440
  3705
  3706 3BD6 AD 85 9F			lda SIZE
  3707 3BD9 38 E9 01			sub #$01
  3708 3BDC 8D 0C B1			sta BLT.BLT_WIDTH
  3709 3BDF AD 86 9F			lda SIZE+1
  3710 3BE2 E9 00			sbc #$00
  3711 3BE4 8D 0D B1			sta BLT.BLT_WIDTH+1
  3712
  3713 				; optimize OK (service.pas), line = 442
  3714
  3715 3BE7 A9 FF			lda #$FF
  3716 3BE9 8D 0F B1			sta BLT.BLT_AND_MASK
  3717
  3718 				; -------------------  ASM Block 00000146  -------------------
  3719
  3720 3BEC				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3BEC A9 00		        lda     #$00
     3 3BEE A0 5F		        ldy     #FX_MEMS
     4 3BF0 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3721 					
  3722 				; optimize OK (service.pas), line = 448
  3723
  3724 3BF2 AD F1 9C			lda BLT
  3725 3BF5 8D 2F 9E			sta VBXE.RUNBCB.A
  3726 3BF8 AD F2 9C			lda BLT+1
  3727 3BFB 8D 30 9E			sta VBXE.RUNBCB.A+1
  3728 3BFE 20 F3 37			jsr VBXE.RUNBCB
  3729
  3730 				; ------------------------------------------------------------
  3731
  3732 = 9F7D			SRC	= DATAORIGIN+$0219
  3733 = 9F81			DST	= DATAORIGIN+$021D
  3734 = 9F85			SIZE	= DATAORIGIN+$0221
  3735
  3736 = 9F7D			@VarData	= SRC
  3737 = 000A			@VarDataSize	= 10
  3738
  3739 3C01			@exit
  3740 					.ifdef @new
  3741 					lda <@VarData
  3742 					sta :ztmp
  3743 					lda >@VarData
  3744 					ldy #@VarDataSize-1
  3745 					jmp @FreeMem
  3746 					els
  3747 3C01 60				rts						; ret
  3748 					eif
  3749 				.endl
  3750
  3751 3C02			.local	PUTBYTE						; PROCEDURE
  3752
  3753 				; optimize OK (service.pas), line = 475
  3754
  3755 3C02 AD 87 9F			lda DST
  3756 3C05 8D 34 9E			sta VBXE_RAM.POSITION
  3757 3C08 AD 88 9F			lda DST+1
  3758 3C0B 8D 35 9E			sta VBXE_RAM.POSITION+1
  3759 3C0E AD 89 9F			lda DST+2
  3760 3C11 8D 36 9E			sta VBXE_RAM.POSITION+2
  3761 3C14 AD 8A 9F			lda DST+3
  3762 3C17 8D 37 9E			sta VBXE_RAM.POSITION+3
  3763
  3764 				; optimize OK (service.pas), line = 476
  3765
  3766 3C1A AD 8B 9F			lda V
  3767 3C1D 8D 0F 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3768 3C20 AD F7 9C			lda VBXE_RAM
  3769 3C23 AC F8 9C			ldy VBXE_RAM+1
  3770 3C26 20 F1 35			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3771
  3772 				; ------------------------------------------------------------
  3773
  3774 = 9F87			DST	= DATAORIGIN+$0223
  3775 = 9F8B			V	= DATAORIGIN+$0227
  3776
  3777 = 9F87			@VarData	= DST
  3778 = 0005			@VarDataSize	= 5
  3779
  3780 3C29			@exit
  3781 					.ifdef @new
  3782 					lda <@VarData
  3783 					sta :ztmp
  3784 					lda >@VarData
  3785 					ldy #@VarDataSize-1
  3786 					jmp @FreeMem
  3787 					els
  3788 3C29 60				rts						; ret
  3789 					eif
  3790 				.endl
  3791
  3792 3C2A			.local	GETBYTE						; FUNCTION
  3793
  3794 				; optimize OK (service.pas), line = 486
  3795
  3796 3C2A AD 8C 9F			lda SRC
  3797 3C2D 8D 34 9E			sta VBXE_RAM.POSITION
  3798 3C30 AD 8D 9F			lda SRC+1
  3799 3C33 8D 35 9E			sta VBXE_RAM.POSITION+1
  3800 3C36 AD 8E 9F			lda SRC+2
  3801 3C39 8D 36 9E			sta VBXE_RAM.POSITION+2
  3802 3C3C AD 8F 9F			lda SRC+3
  3803 3C3F 8D 37 9E			sta VBXE_RAM.POSITION+3
  3804
  3805 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 487
  3806
  3807 3C42 AD F7 9C			lda VBXE_RAM
  3808 3C45 AC F8 9C			ldy VBXE_RAM+1
  3809 3C48 20 BE 35			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3810 3C4B AD 00 9E			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3811 3C4E 8D 90 9F			sta RESULT
  3812 3C51			@exit
  3813
  3814 				; ------------------------------------------------------------
  3815
  3816 = 9F8C			SRC	= DATAORIGIN+$0228
  3817 = 9F90			RESULT	= DATAORIGIN+$022C
  3818
  3819 = 9F8C			@VarData	= SRC
  3820 = 0004			@VarDataSize	= 4
  3821
  3822 3C51 60				rts						; ret
  3823 				.endl
  3824
  3825 3C52			.local	NOSOUND						; PROCEDURE
  3826
  3827 3C52			@exit
  3828 					.ifdef @new
  3829 					lda <@VarData
  3830 					sta :ztmp
  3831 					lda >@VarData
  3832 					ldy #@VarDataSize-1
  3833 					jmp @FreeMem
  3834 					els
  3835 3C52 60				rts						; ret
  3836 					eif
  3837 				.endl
  3838
  3839 3C53			.local	MYDELAY						; PROCEDURE
  3840
  3841 				; ------------------------------------------------------------
  3842
  3843 = 9F91			A	= DATAORIGIN+$022D
  3844
  3845 = 9F91			@VarData	= A
  3846 = 0002			@VarDataSize	= 2
  3847
  3848 3C53			@exit
  3849 					.ifdef @new
  3850 					lda <@VarData
  3851 					sta :ztmp
  3852 					lda >@VarData
  3853 					ldy #@VarDataSize-1
  3854 					jmp @FreeMem
  3855 					els
  3856 3C53 60				rts						; ret
  3857 					eif
  3858 				.endl
  3859
  3860 3C54			.local	MAX						; FUNCTION
  3861
  3862 				; optimize OK (service.pas), line = 613
  3863
  3864 3C54 AD 95 9F			lda B
  3865 3C57 CD 93 9F			cmp A
  3866 3C5A AD 96 9F			lda B+1
  3867 3C5D ED 94 9F			sbc A+1
  3868 3C60 50 02			svc
  3869 3C62 49 80			eor #$80
  3870 3C64 10 0C			jpl l_06AA
  3871 3C66 AD 93 9F			lda A
  3872 3C69 8D 97 9F			sta RESULT
  3873 3C6C AD 94 9F			lda A+1
  3874 3C6F 4C 7B 3C			jmp l_06B9
  3875 3C72			l_06AA
  3876
  3877 				; optimize OK (service.pas), line = 614
  3878
  3879 3C72 AD 95 9F			lda B
  3880 3C75 8D 97 9F			sta RESULT
  3881 3C78 AD 96 9F			lda B+1
  3882 3C7B			l_06B9
  3883 3C7B 8D 98 9F			sta RESULT+1
  3884 3C7E			@exit
  3885
  3886 				; ------------------------------------------------------------
  3887
  3888 = 9F93			A	= DATAORIGIN+$022F
  3889 = 9F95			B	= DATAORIGIN+$0231
  3890 = 9F97			RESULT	= DATAORIGIN+$0233
  3891
  3892 = 9F93			@VarData	= A
  3893 = 0004			@VarDataSize	= 4
  3894
  3895 3C7E 60				rts						; ret
  3896 				.endl
  3897
  3898 3C7F			.local	MIN						; FUNCTION
  3899
  3900 				; optimize OK (service.pas), line = 620
  3901
  3902 3C7F AD 99 9F			lda A
  3903 3C82 CD 9B 9F			cmp B
  3904 3C85 AD 9A 9F			lda A+1
  3905 3C88 ED 9C 9F			sbc B+1
  3906 3C8B 50 02			svc
  3907 3C8D 49 80			eor #$80
  3908 3C8F 10 0C			jpl l_06D4
  3909 3C91 AD 99 9F			lda A
  3910 3C94 8D 9D 9F			sta RESULT
  3911 3C97 AD 9A 9F			lda A+1
  3912 3C9A 4C A6 3C			jmp l_06E3
  3913 3C9D			l_06D4
  3914
  3915 				; optimize OK (service.pas), line = 621
  3916
  3917 3C9D AD 9B 9F			lda B
  3918 3CA0 8D 9D 9F			sta RESULT
  3919 3CA3 AD 9C 9F			lda B+1
  3920 3CA6			l_06E3
  3921 3CA6 8D 9E 9F			sta RESULT+1
  3922 3CA9			@exit
  3923
  3924 				; ------------------------------------------------------------
  3925
  3926 = 9F99			A	= DATAORIGIN+$0235
  3927 = 9F9B			B	= DATAORIGIN+$0237
  3928 = 9F9D			RESULT	= DATAORIGIN+$0239
  3929
  3930 = 9F99			@VarData	= A
  3931 = 0004			@VarDataSize	= 4
  3932
  3933 3CA9 60				rts						; ret
  3934 				.endl
  3935
  3936 3CAA			.local	FATAL_ERROR					; PROCEDURE
  3937 3CAA 8D 9F 9F			sta ERR_TYPE
  3938
  3939 				; optimize OK (service.pas), line = 630
  3940
  3941 3CAD 8D 15 9F			sta STATUS
  3942
  3943 				; -------------------  ASM Block 00000147  -------------------
  3944
  3945 3CB0 8D 00 01		      sta $100
  3946 				      
  3947 3CB3 AD 0A D2		      kk: lda $d20a
  3948 3CB6 8D 1A D0		      sta $d01a
  3949 3CB9 4C B3 3C		      jmp kk
  3950 				    
  3951 				    
  3952 				; ------------------------------------------------------------
  3953
  3954 = 9F9F			ERR_TYPE	= DATAORIGIN+$023B
  3955
  3956 = 9F9F			@VarData	= ERR_TYPE
  3957 = 0001			@VarDataSize	= 1
  3958
  3959 3CBC			@exit
  3960 					.ifdef @new
  3961 					lda <@VarData
  3962 					sta :ztmp
  3963 					lda >@VarData
  3964 					ldy #@VarDataSize-1
  3965 					jmp @FreeMem
  3966 					els
  3967 3CBC 60				rts						; ret
  3968 					eif
  3969 				.endl
  3970
  3971 3CBD			.local	INITROWARRAY					; PROCEDURE
  3972
  3973 				; optimize OK (service.pas), line = 678
  3974
  3975 3CBD A9 00			lda #$00
  3976 3CBF 8D 57 9F			sta HLP
  3977 3CC2 8D 58 9F			sta HLP+1
  3978
  3979 				; optimize OK (service.pas), line = 680
  3980
  3981 3CC5 8D A0 9F			sta Y
  3982
  3983 3CC8			l_0703
  3984 				; --- ForToDoCondition
  3985 3CC8 AC A0 9F			ldy Y
  3986 3CCB C0 C8			cpy #$C8
  3987 3CCD 90 0A			jcc l_0723
  3988
  3989 				; optimize OK (service.pas), line = 683
  3990
  3991 3CCF A9 00			lda #$00
  3992 3CD1 99 00 C0			sta adr.ROW,y
  3993 3CD4 A9 FA			lda #$FA
  3994 3CD6 4C E5 3C			jmp l_0734
  3995 3CD9			l_0723
  3996
  3997 				; optimize OK (service.pas), line = 685
  3998
  3999 3CD9 AC A0 9F			ldy Y
  4000 3CDC AD 57 9F			lda HLP
  4001 3CDF 99 00 C0			sta adr.ROW,y
  4002 3CE2 AD 58 9F			lda HLP+1
  4003 3CE5			l_0734
  4004 3CE5 99 00 C1			sta adr.ROW+256,y
  4005
  4006 				; optimize OK (service.pas), line = 687
  4007
  4008 3CE8 AD 57 9F			lda HLP
  4009 3CEB 18 69 40			add #$40
  4010 3CEE 8D 57 9F			sta HLP
  4011 3CF1 AD 58 9F			lda HLP+1
  4012 3CF4 69 01			adc #$01
  4013 3CF6 8D 58 9F			sta HLP+1
  4014
  4015 				; --- ForToDoEpilog
  4016 3CF9 EE A0 9F			inc Y
  4017 3CFC D0 CA			jne l_0703
  4018 3CFE			l_0711
  4019
  4020 				; ------------------------------------------------------------
  4021
  4022 = 9FA0			Y	= DATAORIGIN+$023C
  4023
  4024 = 9FA0			@VarData	= Y
  4025 = 0001			@VarDataSize	= 1
  4026
  4027 3CFE			@exit
  4028 					.ifdef @new
  4029 					lda <@VarData
  4030 					sta :ztmp
  4031 					lda >@VarData
  4032 					ldy #@VarDataSize-1
  4033 					jmp @FreeMem
  4034 					els
  4035 3CFE 60				rts						; ret
  4036 					eif
  4037 				.endl
  4038
  4039 3CFF			.local	INITSVGA					; PROCEDURE
  4040
  4041 				; optimize OK (service.pas), line = 703
  4042
  4043 3CFF AD A1 9D			lda GRAPH.GRAPHRESULT
  4044 3D02 C9 01			cmp #$01
  4045 3D04 F0 0F			jeq l_0758
  4046
  4047 				; optimize FAIL ('@print', service.pas), line = 704
  4048
  4049 					@printSTRING #CODEORIGIN+$0000
  4049 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4049 3D06 A0 20		 LDY> CODEORIGIN+$0000
  4049 3D08 A9 00		 LDA< CODEORIGIN+$0000
  4049 3D0A 20 D0 27		 JSR @PRINTSTRING
  4050 3D0D 20 BA 27			@printEOL
  4051 3D10 A9 00			lda #$00
  4052 3D12 4C E8 9C			jmp @halt
  4053 3D15			l_0758
  4054
  4055 				; optimize OK (service.pas), line = 708
  4056
  4057 3D15 A9 1F			lda #$1F
  4058 3D17 20 DF 37			jsr VBXE.SETHORIZONTALRES.@010180000
  4059
  4060 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 709
  4061
  4062 3D1A 20 37 37			jsr VBXE.COLORMAPOFF
  4063
  4064 				; optimize OK (service.pas), line = 711
  4065
  4066 3D1D A9 07			lda #$07
  4067 3D1F 20 10 38			jsr VBXE.VBXECONTROL
  4068
  4069 				; optimize OK (service.pas), line = 713
  4070
  4071 3D22 A9 14			lda #$14
  4072 3D24 20 99 33			jsr VBXE.SETTOPBORDER
  4073
  4074 				; optimize OK (service.pas), line = 714
  4075
  4076 3D27 A9 C8			lda #$C8
  4077 3D29 20 B2 33			jsr VBXE.SETXDLHEIGHT
  4078
  4079 				; optimize OK (service.pas), line = 716
  4080
  4081 3D2C A9 00			lda #$00
  4082 3D2E 8D 34 9E			sta VBXE_RAM.POSITION
  4083 3D31 A9 50			lda #$50
  4084 3D33 8D 35 9E			sta VBXE_RAM.POSITION+1
  4085 3D36 A9 00			lda #$00
  4086 3D38 8D 36 9E			sta VBXE_RAM.POSITION+2
  4087 3D3B 8D 37 9E			sta VBXE_RAM.POSITION+3
  4088
  4089 				; optimize OK (service.pas), line = 717
  4090
  4091 3D3E 8D 38 9E			sta VBXE_RAM.SIZE
  4092 3D41 A9 FA			lda #$FA
  4093 3D43 8D 39 9E			sta VBXE_RAM.SIZE+1
  4094 3D46 A9 00			lda #$00
  4095 3D48 8D 3A 9E			sta VBXE_RAM.SIZE+2
  4096 3D4B 8D 3B 9E			sta VBXE_RAM.SIZE+3
  4097
  4098 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 718
  4099
  4100 3D4E AD F7 9C			lda VBXE_RAM
  4101 3D51 AC F8 9C			ldy VBXE_RAM+1
  4102 3D54 20 24 36			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4103
  4104 				; optimize OK (service.pas), line = 720
  4105
  4106 3D57 A9 00			lda #$00
  4107 3D59 8D 00 D4			sta ATARI.DMACTL
  4108
  4109 				; -------------------  ASM Block 00000148  -------------------
  4110
  4111 3D5C				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3D5C A9 80		        lda     #$80
     3 3D5E A0 5F		        ldy     #FX_MEMS
     4 3D60 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4112 					
  4113 				; optimize OK (service.pas), line = 726
  4114
  4115 3D62 AD F1 9C			lda BLT
  4116 3D65 85 84			sta :bp2
  4117 3D67 AD F2 9C			lda BLT+1
  4118 3D6A 85 85			sta :bp2+1
  4119 3D6C A9 00			lda #$00
  4120 3D6E A0 14			ldy #$14
  4121 3D70 91 84 88 10 FB		sta:rpl (:bp2),y-
  4122
  4123 				; -------------------  ASM Block 00000149  -------------------
  4124
  4125 3D75				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3D75 A9 00		        lda     #$00
     3 3D77 A0 5F		        ldy     #FX_MEMS
     4 3D79 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4126 					
  4127 3D7B			@exit
  4128 					.ifdef @new
  4129 					lda <@VarData
  4130 					sta :ztmp
  4131 					lda >@VarData
  4132 					ldy #@VarDataSize-1
  4133 					jmp @FreeMem
  4134 					els
  4135 3D7B 60				rts						; ret
  4136 					eif
  4137 				.endl
  4138
  4139 3D7C			.local	SHINE_BLOCK					; PROCEDURE
  4140
  4141 				; optimize OK (service.pas), line = 770
  4142
  4143 3D7C AD 35 9F			lda SHINEREC.XB
  4144 3D7F 8D A1 9F			sta XB
  4145 3D82 A9 00			lda #$00
  4146 3D84 8D A2 9F			sta XB+1
  4147
  4148 				; optimize OK (service.pas), line = 771
  4149
  4150 3D87 AD 36 9F			lda SHINEREC.YB
  4151 3D8A 8D A3 9F			sta YB
  4152 3D8D A9 00			lda #$00
  4153 3D8F 8D A4 9F			sta YB+1
  4154
  4155 				; optimize OK (service.pas), line = 773
  4156
  4157 3D92 AD A3 9F			lda YB
  4158 3D95 0A				asl @
  4159 3D96 0A				asl @
  4160 3D97 0A				asl @
  4161 3D98 0A				asl @
  4162 3D99 18 6D A1 9F			add XB
  4163 3D9D 8D B0 9F			sta I
  4164
  4165 				; optimize OK (service.pas), line = 775
  4166
  4167 3DA0 A8				tay
  4168 3DA1 B9 00 DB			lda adr.WALL,y
  4169 3DA4 C9 09			cmp #$09
  4170 3DA6 B0 03 4C F9 3E		jcc l_07AB
  4171
  4172 				; optimize OK (service.pas), line = 777
  4173
  4174 3DAB AD 37 9F			lda SHINEREC.FRAME
  4175 3DAE 4A				lsr @
  4176 3DAF 8D A5 9F			sta FRAME
  4177 3DB2 A9 00			lda #$00
  4178 3DB4 8D A6 9F			sta FRAME+1
  4179
  4180 				; optimize OK (service.pas), line = 778
  4181
  4182 3DB7 B9 00 DB			lda adr.WALL,y
  4183 3DBA C9 0A			cmp #$0A
  4184 3DBC F0 0E			jeq l_07CB
  4185 3DBE AD A5 9F			lda FRAME
  4186 3DC1 18 69 05			add #$05
  4187 3DC4 8D A5 9F			sta FRAME
  4188 3DC7 90 03			scc
  4189 3DC9 EE A6 9F			inc FRAME+1
  4190 3DCC			l_07CB
  4191
  4192 				; optimize OK (service.pas), line = 780
  4193
  4194 3DCC AD A1 9F			lda XB
  4195 3DCF 85 A0			sta :STACKORIGIN+10
  4196 3DD1 AD A2 9F			lda XB+1
  4197 3DD4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4198 3DD6 06 A0			asl :STACKORIGIN+10
  4199 3DD8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4200 3DDA 06 A0			asl :STACKORIGIN+10
  4201 3DDC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4202 3DDE 06 A0			asl :STACKORIGIN+10
  4203 3DE0 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4204 3DE2 06 A0			asl :STACKORIGIN+10
  4205 3DE4 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4206 3DE6 A9 09			lda #$09
  4207 3DE8 18 65 A0			add :STACKORIGIN+10
  4208 3DEB 8D A7 9F			sta XF
  4209 3DEE A9 00			lda #$00
  4210 3DF0 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4211 3DF2 8D A8 9F			sta XF+1
  4212
  4213 				; optimize OK (service.pas), line = 781
  4214
  4215 3DF5 AD A3 9F			lda YB
  4216 3DF8 85 A0			sta :STACKORIGIN+10
  4217 3DFA AD A4 9F			lda YB+1
  4218 3DFD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4219 3DFF 06 A0			asl :STACKORIGIN+10
  4220 3E01 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4221 3E03 06 A0			asl :STACKORIGIN+10
  4222 3E05 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4223 3E07 06 A0			asl :STACKORIGIN+10
  4224 3E09 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4225 3E0B A9 16			lda #$16
  4226 3E0D 18 65 A0			add :STACKORIGIN+10
  4227 3E10 8D A9 9F			sta YF
  4228 3E13 A9 00			lda #$00
  4229 3E15 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4230 3E17 8D AA 9F			sta YF+1
  4231
  4232 				; optimize OK (service.pas), line = 782
  4233
  4234 3E1A AD A5 9F			lda FRAME
  4235 3E1D 85 9F			sta :STACKORIGIN+9
  4236 3E1F AD A6 9F			lda FRAME+1
  4237 3E22 06 9F			asl :STACKORIGIN+9
  4238 3E24 2A				rol @
  4239 3E25 06 9F			asl :STACKORIGIN+9
  4240 3E27 2A				rol @
  4241 3E28 06 9F			asl :STACKORIGIN+9
  4242 3E2A 2A				rol @
  4243 3E2B 06 9F			asl :STACKORIGIN+9
  4244 3E2D 2A				rol @
  4245 3E2E 06 9F			asl :STACKORIGIN+9
  4246 3E30 2A				rol @
  4247 3E31 06 9F			asl :STACKORIGIN+9
  4248 3E33 2A				rol @
  4249 3E34 06 9F			asl :STACKORIGIN+9
  4250 3E36 2A				rol @
  4251 3E37 8D AC 9F			sta FR+1
  4252 3E3A A5 9F			lda :STACKORIGIN+9
  4253 3E3C 8D AB 9F			sta FR
  4254
  4255 				; optimize OK (service.pas), line = 784
  4256
  4257 3E3F A9 00			lda #$00
  4258 3E41 8D AF 9F			sta Y
  4259
  4260 3E44			l_07FB
  4261 				; --- ForToDoCondition
  4262 3E44 AD AF 9F			lda Y
  4263 3E47 C9 08			cmp #$08
  4264 3E49 90 03 4C F9 3E		jcs l_0809
  4265
  4266 				; optimize OK (service.pas), line = 786
  4267
  4268 3E4E 85 9F			sta :STACKORIGIN+9
  4269 3E50 A9 00			lda #$00
  4270 3E52 06 9F			asl :STACKORIGIN+9
  4271 3E54 2A				rol @
  4272 3E55 06 9F			asl :STACKORIGIN+9
  4273 3E57 2A				rol @
  4274 3E58 06 9F			asl :STACKORIGIN+9
  4275 3E5A 2A				rol @
  4276 3E5B 06 9F			asl :STACKORIGIN+9
  4277 3E5D 2A				rol @
  4278 3E5E 8D AE 9F			sta OG+1
  4279 3E61 A5 9F			lda :STACKORIGIN+9
  4280 3E63 8D AD 9F			sta OG
  4281
  4282 				; optimize OK (service.pas), line = 789
  4283
  4284 3E66 AD A7 9F			lda XF
  4285 3E69 85 A0			sta :STACKORIGIN+10
  4286 3E6B A9 50			lda #$50
  4287 3E6D 18 6D A8 9F			add XF+1
  4288 3E71 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4289 3E73 A9 00			lda #$00
  4290 3E75 69 00			adc #$00
  4291 3E77 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4292 3E79 A9 00			lda #$00
  4293 3E7B 69 00			adc #$00
  4294 3E7D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4295 3E7F AD A9 9F			lda YF
  4296 3E82 18 6D AF 9F			add Y
  4297 3E86 A8				tay
  4298 3E87 A5 A0			lda :STACKORIGIN+10
  4299 3E89 18 79 00 C0			add adr.ROW,y
  4300 3E8D 8D 81 9F			sta BLITROW.DST
  4301 3E90 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4302 3E92 79 00 C1			adc adr.ROW+256,y
  4303 3E95 8D 82 9F			sta BLITROW.DST+1
  4304 3E98 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4305 3E9A 69 00			adc #$00
  4306 3E9C 8D 83 9F			sta BLITROW.DST+2
  4307 3E9F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4308 3EA1 69 00			adc #$00
  4309 3EA3 8D 84 9F			sta BLITROW.DST+3
  4310 3EA6 AD AC 9E			lda SHINEWALL.OFS
  4311 3EA9 18 6D AB 9F			add FR
  4312 3EAD 85 A1			sta :STACKORIGIN+11
  4313 3EAF AD AD 9E			lda SHINEWALL.OFS+1
  4314 3EB2 6D AC 9F			adc FR+1
  4315 3EB5 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4316 3EB7 AD AE 9E			lda SHINEWALL.OFS+2
  4317 3EBA 69 00			adc #$00
  4318 3EBC 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4319 3EBE AD AF 9E			lda SHINEWALL.OFS+3
  4320 3EC1 69 00			adc #$00
  4321 3EC3 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4322 3EC5 A5 A1			lda :STACKORIGIN+11
  4323 3EC7 18 6D AD 9F			add OG
  4324 3ECB 8D 7D 9F			sta BLITROW.SRC
  4325 3ECE A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4326 3ED0 6D AE 9F			adc OG+1
  4327 3ED3 8D 7E 9F			sta BLITROW.SRC+1
  4328 3ED6 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4329 3ED8 69 00			adc #$00
  4330 3EDA 8D 7F 9F			sta BLITROW.SRC+2
  4331 3EDD A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4332 3EDF 69 00			adc #$00
  4333 3EE1 8D 80 9F			sta BLITROW.SRC+3
  4334 3EE4 A9 10			lda #$10
  4335 3EE6 8D 85 9F			sta BLITROW.SIZE
  4336 3EE9 A9 00			lda #$00
  4337 3EEB 8D 86 9F			sta BLITROW.SIZE+1
  4338 3EEE 20 90 3B			jsr BLITROW
  4339
  4340 				; --- ForToDoEpilog
  4341 3EF1 EE AF 9F			inc Y
  4342 3EF4 F0 03 4C 44 3E		jne l_07FB
  4343 3EF9			l_0809
  4344 3EF9			l_07AB
  4345
  4346 				; optimize FAIL (0, service.pas), line = 793
  4347
  4348 3EF9 EE 37 9F			inc SHINEREC.FRAME
  4349
  4350 				; optimize OK (service.pas), line = 794
  4351
  4352 3EFC AD 37 9F			lda SHINEREC.FRAME
  4353 3EFF C9 0A			cmp #$0A
  4354 3F01 D0 05			jne l_0850
  4355 3F03 A9 00			lda #$00
  4356 3F05 8D 39 9F			sta SHINEREC.ACTIVE
  4357 3F08			l_0850
  4358
  4359 				; ------------------------------------------------------------
  4360
  4361 = 9FA1			XB	= DATAORIGIN+$023D
  4362 = 9FA3			YB	= DATAORIGIN+$023F
  4363 = 9FA5			FRAME	= DATAORIGIN+$0241
  4364 = 9FA7			XF	= DATAORIGIN+$0243
  4365 = 9FA9			YF	= DATAORIGIN+$0245
  4366 = 9FAB			FR	= DATAORIGIN+$0247
  4367 = 9FAD			OG	= DATAORIGIN+$0249
  4368 = 9FAF			Y	= DATAORIGIN+$024B
  4369 = 9FB0			I	= DATAORIGIN+$024C
  4370
  4371 = 9FA1			@VarData	= XB
  4372 = 0010			@VarDataSize	= 16
  4373
  4374 3F08			@exit
  4375 					.ifdef @new
  4376 					lda <@VarData
  4377 					sta :ztmp
  4378 					lda >@VarData
  4379 					ldy #@VarDataSize-1
  4380 					jmp @FreeMem
  4381 					els
  4382 3F08 60				rts						; ret
  4383 					eif
  4384 				.endl
  4385
  4386 3F09			.local	UNSHINE_BLOCK					; PROCEDURE
  4387
  4388 				; optimize OK (service.pas), line = 803
  4389
  4390 3F09 A9 09			lda #$09
  4391 3F0B 8D 37 9F			sta SHINEREC.FRAME
  4392
  4393 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 804
  4394
  4395 3F0E 20 7C 3D			jsr SHINE_BLOCK
  4396
  4397 3F11			@exit
  4398 					.ifdef @new
  4399 					lda <@VarData
  4400 					sta :ztmp
  4401 					lda >@VarData
  4402 					ldy #@VarDataSize-1
  4403 					jmp @FreeMem
  4404 					els
  4405 3F11 60				rts						; ret
  4406 					eif
  4407 				.endl
  4408
  4409 3F12			.local	SHINE						; PROCEDURE
  4410
  4411 				; optimize OK (service.pas), line = 811
  4412
  4413 3F12 AD 39 9F			lda SHINEREC.ACTIVE
  4414 3F15 F0 03			jeq l_0870
  4415 3F17 20 09 3F			jsr UNSHINE_BLOCK
  4416 3F1A			l_0870
  4417
  4418 				; optimize OK (service.pas), line = 813
  4419
  4420 3F1A AD B1 9F			lda XB
  4421 3F1D 8D 35 9F			sta SHINEREC.XB
  4422
  4423 				; optimize OK (service.pas), line = 814
  4424
  4425 3F20 AD B2 9F			lda YB
  4426 3F23 8D 36 9F			sta SHINEREC.YB
  4427
  4428 				; optimize OK (service.pas), line = 815
  4429
  4430 3F26 A9 00			lda #$00
  4431 3F28 8D 37 9F			sta SHINEREC.FRAME
  4432
  4433 				; optimize OK (service.pas), line = 816
  4434
  4435 3F2B A9 01			lda #$01
  4436 3F2D 8D 39 9F			sta SHINEREC.ACTIVE
  4437
  4438 				; optimize OK (service.pas), line = 817
  4439
  4440 3F30 AD B2 9F			lda YB
  4441 3F33 0A				asl @
  4442 3F34 0A				asl @
  4443 3F35 0A				asl @
  4444 3F36 0A				asl @
  4445 3F37 18 6D B1 9F			add XB
  4446 3F3B A8				tay
  4447 3F3C B9 00 DB			lda adr.WALL,y
  4448 3F3F 8D 38 9F			sta SHINEREC.BLOCK
  4449
  4450 				; ------------------------------------------------------------
  4451
  4452 = 9FB1			XB	= DATAORIGIN+$024D
  4453 = 9FB2			YB	= DATAORIGIN+$024E
  4454
  4455 = 9FB1			@VarData	= XB
  4456 = 0002			@VarDataSize	= 2
  4457
  4458 3F42			@exit
  4459 					.ifdef @new
  4460 					lda <@VarData
  4461 					sta :ztmp
  4462 					lda >@VarData
  4463 					ldy #@VarDataSize-1
  4464 					jmp @FreeMem
  4465 					els
  4466 3F42 60				rts						; ret
  4467 					eif
  4468 				.endl
  4469
  4470 3F43			.local	CHECKSHINE					; PROCEDURE
  4471
  4472 				; optimize OK (service.pas), line = 823
  4473
  4474 3F43 AD 39 9F			lda SHINEREC.ACTIVE
  4475 3F46 C9 01			cmp #$01
  4476 3F48 D0 03			jne l_08B1
  4477 3F4A 20 7C 3D			jsr SHINE_BLOCK
  4478 3F4D			l_08B1
  4479
  4480 3F4D			@exit
  4481 					.ifdef @new
  4482 					lda <@VarData
  4483 					sta :ztmp
  4484 					lda >@VarData
  4485 					ldy #@VarDataSize-1
  4486 					jmp @FreeMem
  4487 					els
  4488 3F4D 60				rts						; ret
  4489 					eif
  4490 				.endl
  4491
  4492 3F4E			.local	RANDOM_LETTER_DROP				; FUNCTION
  4493
  4494 				; --- RepeatUntilProlog
  4495 3F4E			l_08BA
  4496
  4497 				; optimize OK (service.pas), line = 831
  4498
  4499 3F4E A9 64			lda #$64
  4500 3F50 20 03 33			jsr SYSTEM.RANDOM.@010180000
  4501 3F53 AD 9B 9D			lda SYSTEM.RANDOM.@010180000.RESULT
  4502 3F56 8D B5 9F			sta RN
  4503 3F59 A9 00			lda #$00
  4504 3F5B 8D B6 9F			sta RN+1
  4505
  4506 				; optimize OK (service.pas), line = 832
  4507
  4508 3F5E A9 00			lda #$00
  4509 3F60 8D B7 9F			sta SUM
  4510 3F63 8D B8 9F			sta SUM+1
  4511
  4512 				; optimize OK (service.pas), line = 833
  4513
  4514 3F66 8D B9 9F			sta LETTER
  4515 3F69 8D BA 9F			sta LETTER+1
  4516
  4517 				; --- RepeatUntilProlog
  4518 3F6C			l_08C8
  4519
  4520 				; optimize FAIL (0, service.pas), line = 838
  4521
  4522 3F6C EE B9 9F			inc LETTER
  4523 3F6F D0 03			sne
  4524 3F71 EE BA 9F			inc LETTER+1
  4525
  4526 				; optimize OK (service.pas), line = 839
  4527
  4528 3F74 AC B9 9F			ldy LETTER
  4529 3F77 B9 AD 20			lda adr.LETTER_DIS,y
  4530 3F7A 18 6D B7 9F			add SUM
  4531 3F7E 8D B7 9F			sta SUM
  4532 3F81 AD B8 9F			lda SUM+1
  4533 3F84 69 00			adc #$00
  4534 3F86 8D B8 9F			sta SUM+1
  4535
  4536 				; optimize OK (service.pas), line = 842
  4537
  4538 3F89 AD B6 9F			lda RN+1
  4539 3F8C CD B8 9F			cmp SUM+1
  4540 3F8F D0 06			bne @+
  4541 3F91 AD B5 9F			lda RN
  4542 3F94 CD B7 9F			cmp SUM
  4543 				@
  4544 3F97 B0 D3			jcs l_08C8
  4545
  4546 				; optimize OK (service.pas), line = 846
  4547
  4548 3F99 AD B9 9F			lda LETTER
  4549 3F9C 38 E9 01			sub #$01
  4550 3F9F 85 9F			sta :STACKORIGIN+9
  4551 3FA1 AD BA 9F			lda LETTER+1
  4552 3FA4 E9 00			sbc #$00
  4553 3FA6 CD 4D 9F			cmp LETT.LAST+1
  4554 3FA9 D0 05			bne @+
  4555 3FAB A5 9F			lda :STACKORIGIN+9
  4556 3FAD CD 4C 9F			cmp LETT.LAST
  4557 				@
  4558 3FB0 F0 9C			jeq l_08BA
  4559
  4560 				; optimize OK (service.pas), line = 848
  4561
  4562 3FB2 AD B9 9F			lda LETTER
  4563 3FB5 38 E9 01			sub #$01
  4564 3FB8 8D B3 9F			sta RESULT
  4565 3FBB AD BA 9F			lda LETTER+1
  4566 3FBE E9 00			sbc #$00
  4567 3FC0 8D B4 9F			sta RESULT+1
  4568 3FC3			@exit
  4569
  4570 				; ------------------------------------------------------------
  4571
  4572 = 9FB3			RESULT	= DATAORIGIN+$024F
  4573 = 9FB5			RN	= DATAORIGIN+$0251
  4574 = 9FB7			SUM	= DATAORIGIN+$0253
  4575 = 9FB9			LETTER	= DATAORIGIN+$0255
  4576
  4577 = 9FB5			@VarData	= RN
  4578 = 0006			@VarDataSize	= 6
  4579
  4580 3FC3 60				rts						; ret
  4581 				.endl
  4582
  4583 3FC4			.local	PUT_LETTER					; PROCEDURE
  4584
  4585 				; optimize OK (service.pas), line = 857
  4586
  4587 3FC4 A9 00			lda #$00
  4588 3FC6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4589 3FC8 AD 40 9F			lda LETT.TYP+1
  4590 3FCB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4591 3FCD AD 3F 9F			lda LETT.TYP
  4592 3FD0 0A				asl @
  4593 3FD1 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4594 3FD3 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4595 3FD5 0A				asl @
  4596 3FD6 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4597 3FD8 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4598 3FDA 85 9F			sta :STACKORIGIN+9
  4599 3FDC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4600 3FDE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4601 3FE0 A5 9F			lda :STACKORIGIN+9
  4602 3FE2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4603 3FE4 AD 41 9F			lda LETT.FRAME
  4604 3FE7 85 A0			sta :STACKORIGIN+10
  4605 3FE9 A9 00			lda #$00
  4606 3FEB 06 A0			asl :STACKORIGIN+10
  4607 3FED 2A				rol @
  4608 3FEE 06 A0			asl :STACKORIGIN+10
  4609 3FF0 2A				rol @
  4610 3FF1 06 A0			asl :STACKORIGIN+10
  4611 3FF3 2A				rol @
  4612 3FF4 06 A0			asl :STACKORIGIN+10
  4613 3FF6 2A				rol @
  4614 3FF7 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4615 3FFA 8D BC 9F			sta FL+1
  4616 3FFD A5 A0			lda :STACKORIGIN+10
  4617 3FFF 8D BB 9F			sta FL
  4618
  4619 				; optimize OK (service.pas), line = 859
  4620
  4621 4002 A9 00			lda #$00
  4622 4004 8D BF 9F			sta YL
  4623
  4624 4007			l_0918
  4625 				; --- ForToDoCondition
  4626 4007 AD BF 9F			lda YL
  4627 400A C9 08			cmp #$08
  4628 400C 90 03 4C B2 40		jcs l_0926
  4629
  4630 				; optimize OK (service.pas), line = 861
  4631
  4632 4011 85 9F			sta :STACKORIGIN+9
  4633 4013 A9 00			lda #$00
  4634 4015 06 9F			asl :STACKORIGIN+9
  4635 4017 2A				rol @
  4636 4018 06 9F			asl :STACKORIGIN+9
  4637 401A 2A				rol @
  4638 401B 06 9F			asl :STACKORIGIN+9
  4639 401D 2A				rol @
  4640 401E 06 9F			asl :STACKORIGIN+9
  4641 4020 2A				rol @
  4642 4021 06 9F			asl :STACKORIGIN+9
  4643 4023 2A				rol @
  4644 4024 06 9F			asl :STACKORIGIN+9
  4645 4026 2A				rol @
  4646 4027 06 9F			asl :STACKORIGIN+9
  4647 4029 2A				rol @
  4648 402A 8D BE 9F			sta FW+1
  4649 402D A5 9F			lda :STACKORIGIN+9
  4650 402F 8D BD 9F			sta FW
  4651
  4652 				; optimize OK (service.pas), line = 863
  4653
  4654 4032 AD 3E 9F			lda LETT.Y
  4655 4035 18 6D BF 9F			add YL
  4656 4039 A8				tay
  4657 403A AD 3D 9F			lda LETT.X
  4658 403D 18 79 00 C0			add adr.ROW,y
  4659 4041 8D 71 9F			sta BLITZERO.DST
  4660 4044 A9 50			lda #$50
  4661 4046 79 00 C1			adc adr.ROW+256,y
  4662 4049 8D 72 9F			sta BLITZERO.DST+1
  4663 404C A9 00			lda #$00
  4664 404E 69 00			adc #$00
  4665 4050 8D 73 9F			sta BLITZERO.DST+2
  4666 4053 A9 00			lda #$00
  4667 4055 69 00			adc #$00
  4668 4057 8D 74 9F			sta BLITZERO.DST+3
  4669 405A AD C4 9E			lda LETTERS.OFS
  4670 405D 18 6D BD 9F			add FW
  4671 4061 85 A2			sta :STACKORIGIN+12
  4672 4063 AD C5 9E			lda LETTERS.OFS+1
  4673 4066 6D BE 9F			adc FW+1
  4674 4069 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  4675 406B AD C6 9E			lda LETTERS.OFS+2
  4676 406E 69 00			adc #$00
  4677 4070 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
  4678 4072 AD C7 9E			lda LETTERS.OFS+3
  4679 4075 69 00			adc #$00
  4680 4077 85 D2			sta :STACKORIGIN+STACKWIDTH*3+12
  4681 4079 A5 A2			lda :STACKORIGIN+12
  4682 407B 18 6D BB 9F			add FL
  4683 407F 8D 6D 9F			sta BLITZERO.SRC
  4684 4082 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  4685 4084 6D BC 9F			adc FL+1
  4686 4087 8D 6E 9F			sta BLITZERO.SRC+1
  4687 408A A5 C2			lda :STACKORIGIN+STACKWIDTH*2+12
  4688 408C 69 00			adc #$00
  4689 408E 8D 6F 9F			sta BLITZERO.SRC+2
  4690 4091 A5 D2			lda :STACKORIGIN+STACKWIDTH*3+12
  4691 4093 69 00			adc #$00
  4692 4095 8D 70 9F			sta BLITZERO.SRC+3
  4693 4098 A9 10			lda #$10
  4694 409A 8D 75 9F			sta BLITZERO.W
  4695 409D A9 00			lda #$00
  4696 409F 8D 76 9F			sta BLITZERO.W+1
  4697 40A2 A9 01			lda #$01
  4698 40A4 8D 77 9F			sta BLITZERO.H
  4699 40A7 20 D9 3A			jsr BLITZERO
  4700
  4701 				; --- ForToDoEpilog
  4702 40AA EE BF 9F			inc YL
  4703 40AD F0 03 4C 07 40		jne l_0918
  4704 40B2			l_0926
  4705
  4706 				; ------------------------------------------------------------
  4707
  4708 = 9FBB			FL	= DATAORIGIN+$0257
  4709 = 9FBD			FW	= DATAORIGIN+$0259
  4710 = 9FBF			YL	= DATAORIGIN+$025B
  4711
  4712 = 9FBB			@VarData	= FL
  4713 = 0005			@VarDataSize	= 5
  4714
  4715 40B2			@exit
  4716 					.ifdef @new
  4717 					lda <@VarData
  4718 					sta :ztmp
  4719 					lda >@VarData
  4720 					ldy #@VarDataSize-1
  4721 					jmp @FreeMem
  4722 					els
  4723 40B2 60				rts						; ret
  4724 					eif
  4725 				.endl
  4726
  4727 40B3			.local	REMOVE_LETTER					; PROCEDURE
  4728
  4729 				; optimize OK (service.pas), line = 875
  4730
  4731 40B3 AC 3E 9F			ldy LETT.Y
  4732 40B6 AD 3D 9F			lda LETT.X
  4733 40B9 18 79 00 C0			add adr.ROW,y
  4734 40BD 8D 57 9F			sta HLP
  4735 40C0 A9 00			lda #$00
  4736 40C2 79 00 C1			adc adr.ROW+256,y
  4737 40C5 8D 58 9F			sta HLP+1
  4738
  4739 				; optimize OK (service.pas), line = 877
  4740
  4741 40C8 AD 3E 9F			lda LETT.Y
  4742 40CB C9 C8			cmp #$C8
  4743 40CD B0 52			jcs l_097C
  4744
  4745 				; optimize OK (service.pas), line = 878
  4746
  4747 40CF AD 57 9F			lda HLP
  4748 40D2 8D 66 9F			sta BLITBOX.DST
  4749 40D5 A9 50			lda #$50
  4750 40D7 18 6D 58 9F			add HLP+1
  4751 40DB 8D 67 9F			sta BLITBOX.DST+1
  4752 40DE A9 00			lda #$00
  4753 40E0 69 00			adc #$00
  4754 40E2 8D 68 9F			sta BLITBOX.DST+2
  4755 40E5 A9 00			lda #$00
  4756 40E7 69 00			adc #$00
  4757 40E9 8D 69 9F			sta BLITBOX.DST+3
  4758 40EC AD 64 9E			lda PLAYSCREEN.OFS
  4759 40EF 18 6D 57 9F			add HLP
  4760 40F3 8D 62 9F			sta BLITBOX.SRC
  4761 40F6 AD 65 9E			lda PLAYSCREEN.OFS+1
  4762 40F9 6D 58 9F			adc HLP+1
  4763 40FC 8D 63 9F			sta BLITBOX.SRC+1
  4764 40FF AD 66 9E			lda PLAYSCREEN.OFS+2
  4765 4102 69 00			adc #$00
  4766 4104 8D 64 9F			sta BLITBOX.SRC+2
  4767 4107 AD 67 9E			lda PLAYSCREEN.OFS+3
  4768 410A 69 00			adc #$00
  4769 410C 8D 65 9F			sta BLITBOX.SRC+3
  4770 410F A9 10			lda #$10
  4771 4111 8D 6A 9F			sta BLITBOX.W
  4772 4114 A9 00			lda #$00
  4773 4116 8D 6B 9F			sta BLITBOX.W+1
  4774 4119 A9 08			lda #$08
  4775 411B 8D 6C 9F			sta BLITBOX.H
  4776 411E 20 58 3A			jsr BLITBOX
  4777 4121			l_097C
  4778
  4779 				; ------------------------------------------------------------
  4780
  4781 = 9FC0			YL	= DATAORIGIN+$025C
  4782
  4783 = 9FC0			@VarData	= YL
  4784 = 0001			@VarDataSize	= 1
  4785
  4786 4121			@exit
  4787 					.ifdef @new
  4788 					lda <@VarData
  4789 					sta :ztmp
  4790 					lda >@VarData
  4791 					ldy #@VarDataSize-1
  4792 					jmp @FreeMem
  4793 					els
  4794 4121 60				rts						; ret
  4795 					eif
  4796 				.endl
  4797
  4798 4122			.local	DISABLE_LETTER					; PROCEDURE
  4799
  4800 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 896
  4801
  4802 4122 20 B3 40			jsr REMOVE_LETTER
  4803
  4804 				; optimize OK (service.pas), line = 897
  4805
  4806 4125 A9 00			lda #$00
  4807 4127 8D 43 9F			sta LETT.ACTIVE
  4808
  4809 412A			@exit
  4810 					.ifdef @new
  4811 					lda <@VarData
  4812 					sta :ztmp
  4813 					lda >@VarData
  4814 					ldy #@VarDataSize-1
  4815 					jmp @FreeMem
  4816 					els
  4817 412A 60				rts						; ret
  4818 					eif
  4819 				.endl
  4820
  4821 412B			.local	START_LETTER					; PROCEDURE
  4822
  4823 				; optimize OK (service.pas), line = 903
  4824
  4825 412B AD 43 9F			lda LETT.ACTIVE
  4826 412E F0 03			jeq l_09A7
  4827 4130 20 22 41			jsr DISABLE_LETTER
  4828 4133			l_09A7
  4829
  4830 				; optimize OK (service.pas), line = 905
  4831
  4832 4133 AD C1 9F			lda XL
  4833 4136 8D 3D 9F			sta LETT.X
  4834
  4835 				; optimize OK (service.pas), line = 906
  4836
  4837 4139 AD C3 9F			lda YL
  4838 413C 8D 3E 9F			sta LETT.Y
  4839
  4840 				; optimize OK (service.pas), line = 907
  4841
  4842 413F AD C5 9F			lda LETTER
  4843 4142 8D 3F 9F			sta LETT.TYP
  4844 4145 AD C6 9F			lda LETTER+1
  4845 4148 8D 40 9F			sta LETT.TYP+1
  4846
  4847 				; optimize OK (service.pas), line = 908
  4848
  4849 414B A9 00			lda #$00
  4850 414D 8D 41 9F			sta LETT.FRAME
  4851
  4852 				; optimize OK (service.pas), line = 909
  4853
  4854 4150 8D 42 9F			sta LETT.SUBFRAME
  4855
  4856 				; optimize OK (service.pas), line = 910
  4857
  4858 4153 A9 01			lda #$01
  4859 4155 8D 43 9F			sta LETT.ACTIVE
  4860
  4861 				; ------------------------------------------------------------
  4862
  4863 = 9FC1			XL	= DATAORIGIN+$025D
  4864 = 9FC3			YL	= DATAORIGIN+$025F
  4865 = 9FC5			LETTER	= DATAORIGIN+$0261
  4866
  4867 = 9FC1			@VarData	= XL
  4868 = 0006			@VarDataSize	= 6
  4869
  4870 4158			@exit
  4871 					.ifdef @new
  4872 					lda <@VarData
  4873 					sta :ztmp
  4874 					lda >@VarData
  4875 					ldy #@VarDataSize-1
  4876 					jmp @FreeMem
  4877 					els
  4878 4158 60				rts						; ret
  4879 					eif
  4880 				.endl
  4881
  4882 4159			.local	CHECK_LETTER					; PROCEDURE
  4883
  4884 				; optimize OK (service.pas), line = 916
  4885
  4886 4159 AD 43 9F			lda LETT.ACTIVE
  4887 415C D0 03 4C 58 42		jeq l_09D6
  4888
  4889 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 918
  4890
  4891 4161 20 B3 40			jsr REMOVE_LETTER
  4892
  4893 				; optimize FAIL (0, service.pas), line = 919
  4894
  4895 4164 EE 3E 9F			inc LETT.Y
  4896
  4897 				; optimize OK (service.pas), line = 920
  4898
  4899 4167 AD 3E 9F			lda LETT.Y
  4900 416A C9 C8			cmp #$C8
  4901 416C 90 03			jcc l_09EE
  4902 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 921
  4903 416E 4C 4A 42			jmp l_09F9
  4904 4171			l_09EE
  4905
  4906 				; optimize FAIL ('PUT_LETTER', service.pas), line = 923
  4907
  4908 4171 20 C4 3F			jsr PUT_LETTER
  4909
  4910 				; optimize FAIL (0, service.pas), line = 924
  4911
  4912 4174 EE 42 9F			inc LETT.SUBFRAME
  4913
  4914 				; optimize OK (service.pas), line = 925
  4915
  4916 4177 AD 42 9F			lda LETT.SUBFRAME
  4917 417A C9 05			cmp #$05
  4918 417C D0 08			jne l_0A10
  4919
  4920 				; optimize OK (service.pas), line = 927
  4921
  4922 417E A9 00			lda #$00
  4923 4180 8D 42 9F			sta LETT.SUBFRAME
  4924
  4925 				; optimize FAIL (0, service.pas), line = 928
  4926
  4927 4183 EE 41 9F			inc LETT.FRAME
  4928 4186			l_0A10
  4929
  4930 				; optimize OK (service.pas), line = 931
  4931
  4932 4186 AD 41 9F			lda LETT.FRAME
  4933 4189 C9 08			cmp #$08
  4934 418B D0 05			jne l_0A2D
  4935 418D A9 00			lda #$00
  4936 418F 8D 41 9F			sta LETT.FRAME
  4937 4192			l_0A2D
  4938
  4939 				; optimize OK (service.pas), line = 933
  4940
  4941 4192 AD 3D 9F			lda LETT.X
  4942 4195 18 69 10			add #$10
  4943 4198 85 A0			sta :STACKORIGIN+10
  4944 419A A9 00			lda #$00
  4945 419C 69 00			adc #$00
  4946 419E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4947 41A0 A9 00			lda #$00
  4948 41A2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4949 41A4 D0 05			bne @+
  4950 41A6 AD D8 9E			lda VAUS.X
  4951 41A9 C5 A0			cmp :STACKORIGIN+10
  4952 				@
  4953 41AB 90 03 4C 4D 42		jcs l_0A86
  4954 				@
  4955 41B0 AD D8 9E			lda VAUS.X
  4956 41B3 18 6D E0 9E			add VAUS.WIDTH
  4957 41B7 85 A0			sta :STACKORIGIN+10
  4958 41B9 A9 00			lda #$00
  4959 41BB 69 00			adc #$00
  4960 41BD C9 00			cmp #$00
  4961 41BF D0 05			bne @+
  4962 41C1 A5 A0			lda :STACKORIGIN+10
  4963 41C3 CD 3D 9F			cmp LETT.X
  4964 				@
  4965 41C6 B0 03 4C 4D 42		jcc l_0A86
  4966 41CB D0 03 4C 4D 42		jeq l_0A86
  4967 				@
  4968 41D0 AD 3E 9F			lda LETT.Y
  4969 41D3 18 69 08			add #$08
  4970 41D6 85 A1			sta :STACKORIGIN+11
  4971 41D8 A9 00			lda #$00
  4972 41DA 69 00			adc #$00
  4973 41DC 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4974 41DE A9 00			lda #$00
  4975 41E0 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  4976 41E2 D0 05			bne @+
  4977 41E4 AD D9 9E			lda VAUS.Y
  4978 41E7 C5 A1			cmp :STACKORIGIN+11
  4979 				@
  4980 41E9 B0 62			jcs l_0A86
  4981 				@
  4982 41EB AD D9 9E			lda VAUS.Y
  4983 41EE 18 6D E1 9E			add VAUS.HEIGHT
  4984 41F2 85 A0			sta :STACKORIGIN+10
  4985 41F4 A9 00			lda #$00
  4986 41F6 69 00			adc #$00
  4987 41F8 C9 00			cmp #$00
  4988 41FA D0 05			bne @+
  4989 41FC A5 A0			lda :STACKORIGIN+10
  4990 41FE CD 3E 9F			cmp LETT.Y
  4991 				@
  4992 4201 90 4A			jcc l_0A86
  4993 4203 F0 48			jeq l_0A86
  4994 				@
  4995
  4996 				; optimize OK (service.pas), line = 936
  4997
  4998 4205 A9 64			lda #$64
  4999 4207 8D 3E 9E			sta BALL_BLOCK_SOUND.A
  5000 420A A9 00			lda #$00
  5001 420C 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
  5002 420F A9 0A			lda #$0A
  5003 4211 8D 40 9E			sta BALL_BLOCK_SOUND.B
  5004 4214 A9 00			lda #$00
  5005 4216 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
  5006 4219 20 3F 38			jsr BALL_BLOCK_SOUND
  5007
  5008 				; optimize OK (service.pas), line = 937
  5009
  5010 421C AC 3F 9F			ldy LETT.TYP
  5011 421F C8				iny
  5012 4220 8C E4 9E			sty VAUS.LETTER
  5013
  5014 				; optimize OK (service.pas), line = 938
  5015
  5016 4223 AD 34 9F			lda CUR_PLAYER
  5017 4226 0A				asl @
  5018 4227 0A				asl @
  5019 4228 A8				tay
  5020 4229 B9 19 9F			lda adr.SCORE.PLAYER,y
  5021 422C 18 69 E8			add #$E8
  5022 422F 99 19 9F			sta adr.SCORE.PLAYER,y
  5023 4232 B9 1A 9F			lda adr.SCORE.PLAYER+1,y
  5024 4235 69 03			adc #$03
  5025 4237 99 1A 9F			sta adr.SCORE.PLAYER+1,y
  5026 423A B9 1B 9F			lda adr.SCORE.PLAYER+2,y
  5027 423D 69 00			adc #$00
  5028 423F 99 1B 9F			sta adr.SCORE.PLAYER+2,y
  5029 4242 B9 1C 9F			lda adr.SCORE.PLAYER+3,y
  5030 4245 69 00			adc #$00
  5031 4247 99 1C 9F			sta adr.SCORE.PLAYER+3,y
  5032 424A			l_09F9
  5033
  5034 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 939
  5035
  5036 424A 20 22 41			jsr DISABLE_LETTER
  5037 424D			l_0A86
  5038
  5039 				; optimize OK (service.pas), line = 943
  5040
  5041 424D A9 00			lda #$00
  5042 424F 8D 44 9F			sta LETT.INCOMING
  5043 4252 8D 45 9F			sta LETT.INCOMING+1
  5044 4255 4C 8F 42			jmp l_0AA7
  5045 4258			l_09D6
  5046
  5047 				; optimize OK (service.pas), line = 945
  5048
  5049 4258 AD 44 9F			lda LETT.INCOMING
  5050 425B C9 E9			cmp #$E9
  5051 425D AD 45 9F			lda LETT.INCOMING+1
  5052 4260 E9 03			sbc #$03
  5053 4262 50 02			svc
  5054 4264 49 80			eor #$80
  5055 4266 30 27			jmi l_0AB8
  5056
  5057 				; optimize OK (service.pas), line = 946
  5058
  5059 4268 AD 46 9F			lda LETT.NEXTX
  5060 426B 8D C1 9F			sta START_LETTER.XL
  5061 426E AD 47 9F			lda LETT.NEXTX+1
  5062 4271 8D C2 9F			sta START_LETTER.XL+1
  5063 4274 AD 48 9F			lda LETT.NEXTY
  5064 4277 8D C3 9F			sta START_LETTER.YL
  5065 427A AD 49 9F			lda LETT.NEXTY+1
  5066 427D 8D C4 9F			sta START_LETTER.YL+1
  5067 4280 AD 4A 9F			lda LETT.NEXTTYPE
  5068 4283 8D C5 9F			sta START_LETTER.LETTER
  5069 4286 AD 4B 9F			lda LETT.NEXTTYPE+1
  5070 4289 8D C6 9F			sta START_LETTER.LETTER+1
  5071 428C 20 2B 41			jsr START_LETTER
  5072 428F			l_0AA7
  5073 428F			l_0AB8
  5074
  5075 428F			@exit
  5076 					.ifdef @new
  5077 					lda <@VarData
  5078 					sta :ztmp
  5079 					lda >@VarData
  5080 					ldy #@VarDataSize-1
  5081 					jmp @FreeMem
  5082 					els
  5083 428F 60				rts						; ret
  5084 					eif
  5085 				.endl
  5086
  5087 4290			.local	SHOWBTMPICTURE					; PROCEDURE
  5088
  5089 				; ------------------------------------------------------------
  5090
  5091 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5092 				; as Pointer
  5093 4290 B5 96			lda :STACKORIGIN,x
  5094 4292 85 84			sta :bp2
  5095 4294 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5096 4296 85 85			sta :bp2+1
  5097 4298 A0 07			ldy #$07
  5098 429A B1 84 99 C7 9F 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5099 42A2 CA				dex
  5100 42A3			@main
  5101
  5102 				; optimize OK (service.pas), line = 956
  5103
  5104 42A3 AD CB 9F			lda BTM.OFS
  5105 42A6 8D 62 9F			sta BLITBOX.SRC
  5106 42A9 AD CC 9F			lda BTM.OFS+1
  5107 42AC 8D 63 9F			sta BLITBOX.SRC+1
  5108 42AF AD CD 9F			lda BTM.OFS+2
  5109 42B2 8D 64 9F			sta BLITBOX.SRC+2
  5110 42B5 AD CE 9F			lda BTM.OFS+3
  5111 42B8 8D 65 9F			sta BLITBOX.SRC+3
  5112 42BB A9 00			lda #$00
  5113 42BD 8D 66 9F			sta BLITBOX.DST
  5114 42C0 A9 50			lda #$50
  5115 42C2 8D 67 9F			sta BLITBOX.DST+1
  5116 42C5 A9 00			lda #$00
  5117 42C7 8D 68 9F			sta BLITBOX.DST+2
  5118 42CA 8D 69 9F			sta BLITBOX.DST+3
  5119 42CD AD C7 9F			lda BTM.WIDTH
  5120 42D0 8D 6A 9F			sta BLITBOX.W
  5121 42D3 AD C8 9F			lda BTM.WIDTH+1
  5122 42D6 8D 6B 9F			sta BLITBOX.W+1
  5123 42D9 AD C9 9F			lda BTM.HEIGHT
  5124 42DC 8D 6C 9F			sta BLITBOX.H
  5125 42DF 20 58 3A			jsr BLITBOX
  5126
  5127 				; ------------------------------------------------------------
  5128
  5129 = 9FC7			adr.BTM	= DATAORIGIN+$0263	; [8] RECORD
  5130 42E2			.var BTM	= adr.BTM .word
  5131 = 9FC7			BTM.WIDTH	= DATAORIGIN+$0263
  5132 = 9FC9			BTM.HEIGHT	= DATAORIGIN+$0265
  5133 = 9FCB			BTM.OFS	= DATAORIGIN+$0267
  5134
  5135 = 9FC7			@VarData	= BTM.WIDTH
  5136 = 0008			@VarDataSize	= 8
  5137
  5138 42E2			@exit
  5139 					.ifdef @new
  5140 					lda <@VarData
  5141 					sta :ztmp
  5142 					lda >@VarData
  5143 					ldy #@VarDataSize-1
  5144 					jmp @FreeMem
  5145 					els
  5146 42E2 60				rts						; ret
  5147 					eif
  5148 = 42E3 C7 9F		BTM
  5148 				.endl
  5149
  5150 42E5			.local	PLACE_BALL					; PROCEDURE
  5151
  5152 				; optimize OK (service.pas), line = 977
  5153
  5154 42E5 AC CF 9F 84 84 AC + 	mwy BALL :bp2
  5155 42EF A0 00			ldy #BALL.X-DATAORIGIN
  5156 42F1 B1 84			lda (:bp2),y
  5157 42F3 38 E9 03			sub #$03
  5158 42F6 85 9F			sta :STACKORIGIN+9
  5159 42F8 C8				iny
  5160 42F9 B1 84			lda (:bp2),y
  5161 42FB E9 00			sbc #$00
  5162 42FD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5163 42FF A0 02			ldy #BALL.Y-DATAORIGIN
  5164 4301 B1 84			lda (:bp2),y
  5165 4303 38 E9 03			sub #$03
  5166 4306 A8				tay
  5167 4307 A5 9F			lda :STACKORIGIN+9
  5168 4309 18 79 00 C0			add adr.ROW,y
  5169 430D 8D 57 9F			sta HLP
  5170 4310 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5171 4312 79 00 C1			adc adr.ROW+256,y
  5172 4315 8D 58 9F			sta HLP+1
  5173
  5174 				; optimize OK (service.pas), line = 979
  5175
  5176 4318 AD 57 9F			lda HLP
  5177 431B 8D 71 9F			sta BLITZERO.DST
  5178 431E A9 50			lda #$50
  5179 4320 18 6D 58 9F			add HLP+1
  5180 4324 8D 72 9F			sta BLITZERO.DST+1
  5181 4327 A9 00			lda #$00
  5182 4329 69 00			adc #$00
  5183 432B 8D 73 9F			sta BLITZERO.DST+2
  5184 432E A9 00			lda #$00
  5185 4330 69 00			adc #$00
  5186 4332 8D 74 9F			sta BLITZERO.DST+3
  5187 4335 AD 5C 9E			lda BALLDATA.OFS
  5188 4338 8D 6D 9F			sta BLITZERO.SRC
  5189 433B AD 5D 9E			lda BALLDATA.OFS+1
  5190 433E 8D 6E 9F			sta BLITZERO.SRC+1
  5191 4341 AD 5E 9E			lda BALLDATA.OFS+2
  5192 4344 8D 6F 9F			sta BLITZERO.SRC+2
  5193 4347 AD 5F 9E			lda BALLDATA.OFS+3
  5194 434A 8D 70 9F			sta BLITZERO.SRC+3
  5195 434D A9 05			lda #$05
  5196 434F 8D 75 9F			sta BLITZERO.W
  5197 4352 A9 00			lda #$00
  5198 4354 8D 76 9F			sta BLITZERO.W+1
  5199 4357 A9 05			lda #$05
  5200 4359 8D 77 9F			sta BLITZERO.H
  5201 435C 20 D9 3A			jsr BLITZERO
  5202
  5203 				; ------------------------------------------------------------
  5204
  5205 = 9FCF			BALL	= DATAORIGIN+$026B
  5206 = 9D64			BALL.X	= DATAORIGIN+$0000
  5207 = 9D66			BALL.Y	= DATAORIGIN+$0002
  5208 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  5209 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  5210 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  5211 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  5212 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  5213 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  5214 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  5215 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  5216 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  5217 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  5218 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  5219 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  5220 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  5221 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  5222
  5223 = 9FCF			@VarData	= BALL
  5224 = 0002			@VarDataSize	= 2
  5225
  5226 435F			@exit
  5227 					.ifdef @new
  5228 					lda <@VarData
  5229 					sta :ztmp
  5230 					lda >@VarData
  5231 					ldy #@VarDataSize-1
  5232 					jmp @FreeMem
  5233 					els
  5234 435F 60				rts						; ret
  5235 					eif
  5236 				.endl
  5237
  5238 4360			.local	REMOVE_BALL					; PROCEDURE
  5239
  5240 				; optimize OK (service.pas), line = 1006
  5241
  5242 4360 AC D3 9F 84 84 AC + 	mwy BALL :bp2
  5243 436A A0 08			ldy #BALL.OLDX-DATAORIGIN
  5244 436C B1 84			lda (:bp2),y
  5245 436E 38 E9 03			sub #$03
  5246 4371 85 9F			sta :STACKORIGIN+9
  5247 4373 C8				iny
  5248 4374 B1 84			lda (:bp2),y
  5249 4376 E9 00			sbc #$00
  5250 4378 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5251 437A A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5252 437C B1 84			lda (:bp2),y
  5253 437E 38 E9 03			sub #$03
  5254 4381 A8				tay
  5255 4382 A5 9F			lda :STACKORIGIN+9
  5256 4384 18 79 00 C0			add adr.ROW,y
  5257 4388 8D 57 9F			sta HLP
  5258 438B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5259 438D 79 00 C1			adc adr.ROW+256,y
  5260 4390 8D 58 9F			sta HLP+1
  5261
  5262 				; optimize OK (service.pas), line = 1008
  5263
  5264 4393 AD 57 9F			lda HLP
  5265 4396 8D 66 9F			sta BLITBOX.DST
  5266 4399 A9 50			lda #$50
  5267 439B 18 6D 58 9F			add HLP+1
  5268 439F 8D 67 9F			sta BLITBOX.DST+1
  5269 43A2 A9 00			lda #$00
  5270 43A4 69 00			adc #$00
  5271 43A6 8D 68 9F			sta BLITBOX.DST+2
  5272 43A9 A9 00			lda #$00
  5273 43AB 69 00			adc #$00
  5274 43AD 8D 69 9F			sta BLITBOX.DST+3
  5275 43B0 AD 64 9E			lda PLAYSCREEN.OFS
  5276 43B3 18 6D 57 9F			add HLP
  5277 43B7 8D 62 9F			sta BLITBOX.SRC
  5278 43BA AD 65 9E			lda PLAYSCREEN.OFS+1
  5279 43BD 6D 58 9F			adc HLP+1
  5280 43C0 8D 63 9F			sta BLITBOX.SRC+1
  5281 43C3 AD 66 9E			lda PLAYSCREEN.OFS+2
  5282 43C6 69 00			adc #$00
  5283 43C8 8D 64 9F			sta BLITBOX.SRC+2
  5284 43CB AD 67 9E			lda PLAYSCREEN.OFS+3
  5285 43CE 69 00			adc #$00
  5286 43D0 8D 65 9F			sta BLITBOX.SRC+3
  5287 43D3 A9 05			lda #$05
  5288 43D5 8D 6A 9F			sta BLITBOX.W
  5289 43D8 A9 00			lda #$00
  5290 43DA 8D 6B 9F			sta BLITBOX.W+1
  5291 43DD A9 05			lda #$05
  5292 43DF 8D 6C 9F			sta BLITBOX.H
  5293 43E2 20 58 3A			jsr BLITBOX
  5294
  5295 				; ------------------------------------------------------------
  5296
  5297 = 9FD3			BALL	= DATAORIGIN+$026F
  5298 = 9D64			BALL.X	= DATAORIGIN+$0000
  5299 = 9D66			BALL.Y	= DATAORIGIN+$0002
  5300 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  5301 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  5302 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  5303 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  5304 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  5305 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  5306 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  5307 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  5308 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  5309 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  5310 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  5311 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  5312 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  5313 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  5314
  5315 = 9FD3			@VarData	= BALL
  5316 = 0002			@VarDataSize	= 2
  5317
  5318 43E5			@exit
  5319 					.ifdef @new
  5320 					lda <@VarData
  5321 					sta :ztmp
  5322 					lda >@VarData
  5323 					ldy #@VarDataSize-1
  5324 					jmp @FreeMem
  5325 					els
  5326 43E5 60				rts						; ret
  5327 					eif
  5328 				.endl
  5329
  5330 43E6			.local	WAIT_VBL					; PROCEDURE
  5331
  5332 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1042
  5333
  5334 43E6 20 EC 32			jsr SYSTEM.PAUSE.@00
  5335
  5336 43E9			@exit
  5337 					.ifdef @new
  5338 					lda <@VarData
  5339 					sta :ztmp
  5340 					lda >@VarData
  5341 					ldy #@VarDataSize-1
  5342 					jmp @FreeMem
  5343 					els
  5344 43E9 60				rts						; ret
  5345 					eif
  5346 				.endl
  5347
  5348 43EA			.local	SET_BALL					; PROCEDURE
  5349
  5350 				; optimize OK (service.pas), line = 1054
  5351
  5352 43EA AC D7 9F 84 84 AC + 	mwy BALL :bp2
  5353 43F4 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5354 43F6 B1 84			lda (:bp2),y
  5355 43F8 C9 FF			cmp #$FF
  5356 43FA D0 05			bne @+
  5357 43FC 88				dey
  5358 43FD B1 84			lda (:bp2),y
  5359 43FF C9 FF			cmp #$FF
  5360 				@
  5361 4401 F0 13			jeq l_0B38s
  5362 4403 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5363 4405 B1 84			lda (:bp2),y
  5364 4407 C9 FF			cmp #$FF
  5365 4409 D0 05			bne @+
  5366 440B 88				dey
  5367 440C B1 84			lda (:bp2),y
  5368 440E C9 FF			cmp #$FF
  5369 				@
  5370 4410 F0 04			jeq l_0B38s
  5371 4412 A9 01 D0 02			lda:sne #$01
  5372 4416 A9 00		l_0B38s	lda #$00
  5373 4418 8D DB 9F			sta B0
  5374
  5375 				; optimize OK (service.pas), line = 1055
  5376
  5377 441B AC D7 9F 84 84 AC + 	mwy BALL :bp2
  5378 4425 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5379 4427 B1 84			lda (:bp2),y
  5380 4429 85 9F			sta :STACKORIGIN+9
  5381 442B C8				iny
  5382 442C B1 84			lda (:bp2),y
  5383 442E A0 01			ldy #BALL.X-DATAORIGIN+$01
  5384 4430 D1 84			cmp (:bp2),y
  5385 4432 D0 05			bne @+
  5386 4434 88				dey
  5387 4435 A5 9F			lda :STACKORIGIN+9
  5388 4437 D1 84			cmp (:bp2),y
  5389 				@
  5390 4439 D0 03			bne @+
  5391 443B 4C 41 44			jmp *+6
  5392 				@\	jmp l_0B50s
  5392 				@
  5392 443E 4C 61 44			JMP L_0B50S
  5393 4441 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5394 4443 B1 84			lda (:bp2),y
  5395 4445 85 A0			sta :STACKORIGIN+10
  5396 4447 C8				iny
  5397 4448 B1 84			lda (:bp2),y
  5398 444A A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5399 444C D1 84			cmp (:bp2),y
  5400 444E D0 05			bne @+
  5401 4450 88				dey
  5402 4451 A5 A0			lda :STACKORIGIN+10
  5403 4453 D1 84			cmp (:bp2),y
  5404 				@
  5405 4455 D0 03			bne @+
  5406 4457 4C 5D 44			jmp *+6
  5407 				@\	jmp l_0B50s
  5407 				@
  5407 445A 4C 61 44			JMP L_0B50S
  5408 445D A9 00 F0 02			lda:seq #$00
  5409 4461 A9 01		l_0B50s	lda #$01
  5410 4463 8D DC 9F			sta B1
  5411
  5412 				; optimize OK (service.pas), line = 1057
  5413
  5414 4466 AD DB 9F			lda B0
  5415 4469 2D DC 9F			and B1
  5416 446C F0 0F			jeq l_0B62
  5417
  5418 				; optimize OK (service.pas), line = 1058
  5419
  5420 446E AD D7 9F			lda BALL
  5421 4471 8D D3 9F			sta REMOVE_BALL.BALL
  5422 4474 AD D8 9F			lda BALL+1
  5423 4477 8D D4 9F			sta REMOVE_BALL.BALL+1
  5424 447A 20 60 43			jsr REMOVE_BALL
  5425 447D			l_0B62
  5426
  5427 				; optimize OK (service.pas), line = 1060
  5428
  5429 447D AD D7 9F			lda BALL
  5430 4480 8D CF 9F			sta PLACE_BALL.BALL
  5431 4483 AD D8 9F			lda BALL+1
  5432 4486 8D D0 9F			sta PLACE_BALL.BALL+1
  5433 4489 20 E5 42			jsr PLACE_BALL
  5434
  5435 				; optimize OK (service.pas), line = 1062
  5436
  5437 448C AC D7 9F 84 84 AC + 	mwy BALL :bp2
  5438 4496 A0 00			ldy #BALL.X-DATAORIGIN
  5439 4498 B1 84			lda (:bp2),y
  5440 449A 85 9F			sta :STACKORIGIN+9
  5441 449C C8				iny
  5442 449D B1 84			lda (:bp2),y
  5443 449F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5444 44A1 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5445 44A3 A5 9F			lda :STACKORIGIN+9
  5446 44A5 91 84			sta (:bp2),y
  5447 44A7 C8				iny
  5448 44A8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5449 44AA 91 84			sta (:bp2),y
  5450
  5451 				; optimize OK (service.pas), line = 1063
  5452
  5453 44AC A0 02			ldy #BALL.Y-DATAORIGIN
  5454 44AE B1 84			lda (:bp2),y
  5455 44B0 85 9F			sta :STACKORIGIN+9
  5456 44B2 C8				iny
  5457 44B3 B1 84			lda (:bp2),y
  5458 44B5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5459 44B7 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5460 44B9 A5 9F			lda :STACKORIGIN+9
  5461 44BB 91 84			sta (:bp2),y
  5462 44BD C8				iny
  5463 44BE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5464 44C0 91 84			sta (:bp2),y
  5465
  5466 				; ------------------------------------------------------------
  5467
  5468 = 9FD7			BALL	= DATAORIGIN+$0273
  5469 = 9D64			BALL.X	= DATAORIGIN+$0000
  5470 = 9D66			BALL.Y	= DATAORIGIN+$0002
  5471 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  5472 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  5473 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  5474 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  5475 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  5476 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  5477 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  5478 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  5479 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  5480 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  5481 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  5482 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  5483 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  5484 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  5485 = 9FDB			B0	= DATAORIGIN+$0277
  5486 = 9FDC			B1	= DATAORIGIN+$0278
  5487
  5488 = 9FD7			@VarData	= BALL
  5489 = 0004			@VarDataSize	= 4
  5490
  5491 44C2			@exit
  5492 					.ifdef @new
  5493 					lda <@VarData
  5494 					sta :ztmp
  5495 					lda >@VarData
  5496 					ldy #@VarDataSize-1
  5497 					jmp @FreeMem
  5498 					els
  5499 44C2 60				rts						; ret
  5500 					eif
  5501 				.endl
  5502
  5503 44C3			.local	SET_BALL_SPEED					; PROCEDURE
  5504
  5505 				; optimize OK (service.pas), line = 1076
  5506
  5507 44C3 AC DD 9F 84 84 AC + 	mwy BALL :bp2
  5508 44CD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5509 44CF B1 84			lda (:bp2),y
  5510 44D1 8D E3 9F			sta SX
  5511 44D4 C8				iny
  5512 44D5 B1 84			lda (:bp2),y
  5513 44D7 8D E4 9F			sta SX+1
  5514
  5515 				; optimize OK (service.pas), line = 1077
  5516
  5517 44DA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5518 44DC B1 84			lda (:bp2),y
  5519 44DE 8D E5 9F			sta SY
  5520 44E1 C8				iny
  5521 44E2 B1 84			lda (:bp2),y
  5522 44E4 8D E6 9F			sta SY+1
  5523
  5524 				; optimize OK (service.pas), line = 1079
  5525
  5526 44E7 AD E3 9F			lda SX
  5527 44EA 85 8A			sta SYSTEM.ABS.@010184000.X
  5528 44EC AD E4 9F			lda SX+1
  5529 44EF 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5530 44F1 20 D1 2A			jsr SYSTEM.ABS.@010184000
  5531 44F4 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5532 44F6 8D EF 9F			sta A
  5533 44F9 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5534 44FB 8D F0 9F			sta A+1
  5535
  5536 				; optimize OK (service.pas), line = 1080
  5537
  5538 44FE AD E5 9F			lda SY
  5539 4501 85 8A			sta SYSTEM.ABS.@010184000.X
  5540 4503 AD E6 9F			lda SY+1
  5541 4506 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5542 4508 20 D1 2A			jsr SYSTEM.ABS.@010184000
  5543 450B A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5544 450D 8D F1 9F			sta B
  5545 4510 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5546 4512 8D F2 9F			sta B+1
  5547
  5548 				; optimize OK (service.pas), line = 1082
  5549
  5550 4515 AD EF 9F			lda A
  5551 4518 85 8E			sta :ecx
  5552 451A 85 86			sta :eax
  5553 451C AD F0 9F			lda A+1
  5554 451F 85 8F			sta :ecx+1
  5555 4521 85 87			sta :eax+1
  5556 					.ifdef fmulinit
  5557 					fmulu_16
  5558 					els
  5559 4523 20 0B 23			imulCX
  5560 					eif
  5561 4526 A5 86			lda :eax
  5562 4528 85 9F			sta :STACKORIGIN+9
  5563 452A A5 87			lda :eax+1
  5564 452C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5565 452E A5 88			lda :eax+2
  5566 4530 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5567 4532 A5 89			lda :eax+3
  5568 4534 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5569 4536 AD F1 9F			lda B
  5570 4539 85 8E			sta :ecx
  5571 453B 85 86			sta :eax
  5572 453D AD F2 9F			lda B+1
  5573 4540 85 8F			sta :ecx+1
  5574 4542 85 87			sta :eax+1
  5575 					.ifdef fmulinit
  5576 					fmulu_16
  5577 					els
  5578 4544 20 0B 23			imulCX
  5579 					eif
  5580 4547 A5 9F			lda :STACKORIGIN+9
  5581 4549 18 65 86			add :eax
  5582 454C 8D EB 9F			sta I
  5583 454F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5584 4551 65 87			adc :eax+1
  5585 4553 8D EC 9F			sta I+1
  5586 4556 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5587 4558 65 88			adc :eax+2
  5588 455A 8D ED 9F			sta I+2
  5589 455D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5590 455F 65 89			adc :eax+3
  5591 4561 8D EE 9F			sta I+3
  5592
  5593 				; optimize OK (service.pas), line = 1084
  5594
  5595 4564 AD EB 9F			lda I
  5596 4567 8D 42 9E			sta SQRT32.V
  5597 456A AD EC 9F			lda I+1
  5598 456D 8D 43 9E			sta SQRT32.V+1
  5599 4570 AD ED 9F			lda I+2
  5600 4573 8D 44 9E			sta SQRT32.V+2
  5601 4576 AD EE 9F			lda I+3
  5602 4579 8D 45 9E			sta SQRT32.V+3
  5603 457C 20 40 38			jsr SQRT32
  5604 457F AD 46 9E			lda SQRT32.RESULT
  5605 4582 8D 57 9F			sta HLP
  5606 4585 AD 47 9E			lda SQRT32.RESULT+1
  5607 4588 8D 58 9F			sta HLP+1
  5608
  5609 				; optimize OK (service.pas), line = 1086
  5610
  5611 458B AD 57 9F			lda HLP
  5612 458E 85 8E			sta :FPMAN0
  5613 4590 AD 58 9F			lda HLP+1
  5614 4593 85 8F			sta :FPMAN1
  5615 4595 A9 00			lda #$00
  5616 4597 85 90			sta :FPMAN2
  5617 4599 85 91			sta :FPMAN3
  5618 459B 20 A4 27			jsr @I2F
  5619 459E A5 8E			lda :FPMAN0
  5620 45A0 85 A0			sta :STACKORIGIN+10
  5621 45A2 A5 8F			lda :FPMAN1
  5622 45A4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5623 45A6 A5 90			lda :FPMAN2
  5624 45A8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  5625 45AA A5 91			lda :FPMAN3
  5626 45AC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  5627 45AE AD E1 9F			lda SPEED
  5628 45B1 85 8E			sta :FPMAN0
  5629 45B3 A0 00			ldy #$00
  5630 45B5 AD E2 9F			lda SPEED+1
  5631 45B8 10 01			spl
  5632 45BA 88				dey
  5633 45BB 85 8F			sta :FPMAN1
  5634 45BD 84 90			sty :FPMAN2
  5635 45BF 84 91			sty :FPMAN3
  5636 45C1 20 A4 27			jsr @I2F
  5637 45C4 A5 8E			lda :FPMAN0
  5638 45C6 85 86			sta :FP1MAN0
  5639 45C8 A5 8F			lda :FPMAN1
  5640 45CA 85 87			sta :FP1MAN1
  5641 45CC A5 90			lda :FPMAN2
  5642 45CE 85 88			sta :FP1MAN2
  5643 45D0 A5 91			lda :FPMAN3
  5644 45D2 85 89			sta :FP1MAN3
  5645 45D4 A5 A0			lda :STACKORIGIN+10
  5646 45D6 85 8A			sta :FP2MAN0
  5647 45D8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5648 45DA 85 8B			sta :FP2MAN1
  5649 45DC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  5650 45DE 85 8C			sta :FP2MAN2
  5651 45E0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  5652 45E2 85 8D			sta :FP2MAN3
  5653 45E4 20 6B 26			jsr @FDIV
  5654 45E7 A5 8E			lda :FPMAN0
  5655 45E9 8D E7 9F			sta VM
  5656 45EC A5 8F			lda :FPMAN1
  5657 45EE 8D E8 9F			sta VM+1
  5658 45F1 A5 90			lda :FPMAN2
  5659 45F3 8D E9 9F			sta VM+2
  5660 45F6 A5 91			lda :FPMAN3
  5661 45F8 8D EA 9F			sta VM+3
  5662
  5663 				; optimize OK (service.pas), line = 1091
  5664
  5665 45FB AD E3 9F			lda SX
  5666 45FE 85 8E			sta :FPMAN0
  5667 4600 A0 00			ldy #$00
  5668 4602 AD E4 9F			lda SX+1
  5669 4605 10 01			spl
  5670 4607 88				dey
  5671 4608 85 8F			sta :FPMAN1
  5672 460A 84 90			sty :FPMAN2
  5673 460C 84 91			sty :FPMAN3
  5674 460E 20 A4 27			jsr @I2F
  5675 4611 A5 8E			lda :FPMAN0
  5676 4613 85 86			sta :FP1MAN0
  5677 4615 A5 8F			lda :FPMAN1
  5678 4617 85 87			sta :FP1MAN1
  5679 4619 A5 90			lda :FPMAN2
  5680 461B 85 88			sta :FP1MAN2
  5681 461D A5 91			lda :FPMAN3
  5682 461F 85 89			sta :FP1MAN3
  5683 4621 AD E7 9F			lda VM
  5684 4624 85 8A			sta :FP2MAN0
  5685 4626 AD E8 9F			lda VM+1
  5686 4629 85 8B			sta :FP2MAN1
  5687 462B AD E9 9F			lda VM+2
  5688 462E 85 8C			sta :FP2MAN2
  5689 4630 AD EA 9F			lda VM+3
  5690 4633 85 8D			sta :FP2MAN3
  5691 4635 20 CA 25			jsr @FMUL
  5692 4638 20 33 27			jsr @F2I
  5693 463B AC DD 9F 84 84 AC + 	mwy BALL :bp2
  5694 4645 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5695 4647 A5 8E			lda :FPMAN0
  5696 4649 91 84			sta (:bp2),y
  5697 464B C8				iny
  5698 464C A5 8F			lda :FPMAN1
  5699 464E 91 84			sta (:bp2),y
  5700
  5701 				; optimize OK (service.pas), line = 1092
  5702
  5703 4650 AD E5 9F			lda SY
  5704 4653 85 8E			sta :FPMAN0
  5705 4655 A0 00			ldy #$00
  5706 4657 AD E6 9F			lda SY+1
  5707 465A 10 01			spl
  5708 465C 88				dey
  5709 465D 85 8F			sta :FPMAN1
  5710 465F 84 90			sty :FPMAN2
  5711 4661 84 91			sty :FPMAN3
  5712 4663 20 A4 27			jsr @I2F
  5713 4666 A5 8E			lda :FPMAN0
  5714 4668 85 86			sta :FP1MAN0
  5715 466A A5 8F			lda :FPMAN1
  5716 466C 85 87			sta :FP1MAN1
  5717 466E A5 90			lda :FPMAN2
  5718 4670 85 88			sta :FP1MAN2
  5719 4672 A5 91			lda :FPMAN3
  5720 4674 85 89			sta :FP1MAN3
  5721 4676 AD E7 9F			lda VM
  5722 4679 85 8A			sta :FP2MAN0
  5723 467B AD E8 9F			lda VM+1
  5724 467E 85 8B			sta :FP2MAN1
  5725 4680 AD E9 9F			lda VM+2
  5726 4683 85 8C			sta :FP2MAN2
  5727 4685 AD EA 9F			lda VM+3
  5728 4688 85 8D			sta :FP2MAN3
  5729 468A 20 CA 25			jsr @FMUL
  5730 468D 20 33 27			jsr @F2I
  5731 4690 AC DD 9F 84 84 AC + 	mwy BALL :bp2
  5732 469A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5733 469C A5 8E			lda :FPMAN0
  5734 469E 91 84			sta (:bp2),y
  5735 46A0 C8				iny
  5736 46A1 A5 8F			lda :FPMAN1
  5737 46A3 91 84			sta (:bp2),y
  5738
  5739 				; ------------------------------------------------------------
  5740
  5741 = 9FDD			BALL	= DATAORIGIN+$0279
  5742 = 9D64			BALL.X	= DATAORIGIN+$0000
  5743 = 9D66			BALL.Y	= DATAORIGIN+$0002
  5744 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  5745 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  5746 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  5747 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  5748 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  5749 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  5750 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  5751 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  5752 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  5753 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  5754 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  5755 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  5756 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  5757 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  5758 = 9FE1			SPEED	= DATAORIGIN+$027D
  5759 = 9FE3			SX	= DATAORIGIN+$027F
  5760 = 9FE5			SY	= DATAORIGIN+$0281
  5761 = 9FE7			VM	= DATAORIGIN+$0283
  5762 = 9FEB			I	= DATAORIGIN+$0287
  5763 = 9FEF			A	= DATAORIGIN+$028B
  5764 = 9FF1			B	= DATAORIGIN+$028D
  5765
  5766 = 9FDD			@VarData	= BALL
  5767 = 0014			@VarDataSize	= 20
  5768
  5769 46A5			@exit
  5770 					.ifdef @new
  5771 					lda <@VarData
  5772 					sta :ztmp
  5773 					lda >@VarData
  5774 					ldy #@VarDataSize-1
  5775 					jmp @FreeMem
  5776 					els
  5777 46A5 60				rts						; ret
  5778 					eif
  5779 				.endl
  5780
  5781 46A6			.local	SET_BALL_DIRECTION				; PROCEDURE
  5782
  5783 				; optimize OK (service.pas), line = 1100
  5784
  5785 46A6 AD F7 9F			lda ANGLE
  5786 46A9 85 8E			sta :FPMAN0
  5787 46AB A0 00			ldy #$00
  5788 46AD AD F8 9F			lda ANGLE+1
  5789 46B0 10 01			spl
  5790 46B2 88				dey
  5791 46B3 85 8F			sta :FPMAN1
  5792 46B5 84 90			sty :FPMAN2
  5793 46B7 84 91			sty :FPMAN3
  5794 46B9 20 A4 27			jsr @I2F
  5795 46BC A5 8E			lda :FPMAN0
  5796 46BE 85 86			sta :FP1MAN0
  5797 46C0 A5 8F			lda :FPMAN1
  5798 46C2 85 87			sta :FP1MAN1
  5799 46C4 A5 90			lda :FPMAN2
  5800 46C6 85 88			sta :FP1MAN2
  5801 46C8 A5 91			lda :FPMAN3
  5802 46CA 85 89			sta :FP1MAN3
  5803 46CC A9 35			lda #$35
  5804 46CE 85 8A			sta :FP2MAN0
  5805 46D0 A9 FA			lda #$FA
  5806 46D2 85 8B			sta :FP2MAN1
  5807 46D4 A9 8E			lda #$8E
  5808 46D6 85 8C			sta :FP2MAN2
  5809 46D8 A9 3C			lda #$3C
  5810 46DA 85 8D			sta :FP2MAN3
  5811 46DC 20 CA 25			jsr @FMUL
  5812 46DF A5 8E			lda :FPMAN0
  5813 46E1 8D F9 9F			sta W
  5814 46E4 A5 8F			lda :FPMAN1
  5815 46E6 8D FA 9F			sta W+1
  5816 46E9 A5 90			lda :FPMAN2
  5817 46EB 8D FB 9F			sta W+2
  5818 46EE A5 91			lda :FPMAN3
  5819 46F0 8D FC 9F			sta W+3
  5820
  5821 				; optimize FAIL (1, service.pas), line = 1102
  5822
  5823 46F3 E8				inx
  5824 46F4 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5825 46F8 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5826 46FC AD F9 9F			lda W
  5827 46FF 8D 92 9D			sta SYSTEM.COS.@01018F000.X
  5828 4702 AD FA 9F			lda W+1
  5829 4705 8D 93 9D			sta SYSTEM.COS.@01018F000.X+1
  5830 4708 AD FB 9F			lda W+2
  5831 470B 8D 94 9D			sta SYSTEM.COS.@01018F000.X+2
  5832 470E AD FC 9F			lda W+3
  5833 4711 8D 95 9D			sta SYSTEM.COS.@01018F000.X+3
  5834 4714 20 B3 32			jsr SYSTEM.COS.@01018F000
  5835 4717 E8				inx
  5836 4718 AD 96 9D 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  5837 471D AD 97 9D 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5838 4722 AD 98 9D 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5839 4727 AD 99 9D 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5840 472C A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5841 4730 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5842 4732 B5 95			lda :STACKORIGIN-1,x
  5843 4734 85 8E			sta :FPMAN0
  5844 4736 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5845 4738 85 8F			sta :FPMAN1
  5846 473A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5847 473C 85 90			sta :FPMAN2
  5848 473E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5849 4740 85 91			sta :FPMAN3
  5850 4742 20 A4 27			jsr @I2F
  5851 4745 A5 8E			lda :FPMAN0
  5852 4747 95 95			sta :STACKORIGIN-1,x
  5853 4749 A5 8F			lda :FPMAN1
  5854 474B 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5855 474D A5 90			lda :FPMAN2
  5856 474F 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5857 4751 A5 91			lda :FPMAN3
  5858 4753 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5859 4755 B5 96			lda :STACKORIGIN,x
  5860 4757 85 8A			sta :FP2MAN0
  5861 4759 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5862 475B 85 8B			sta :FP2MAN1
  5863 475D B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5864 475F 85 8C			sta :FP2MAN2
  5865 4761 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5866 4763 85 8D			sta :FP2MAN3
  5867 4765 B5 95			lda :STACKORIGIN-1,x
  5868 4767 85 86			sta :FP1MAN0
  5869 4769 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5870 476B 85 87			sta :FP1MAN1
  5871 476D B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5872 476F 85 88			sta :FP1MAN2
  5873 4771 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5874 4773 85 89			sta :FP1MAN3
  5875 4775 20 CA 25			jsr @FMUL
  5876 4778 CA				dex
  5877 4779 A5 8E			lda :FPMAN0
  5878 477B 85 8E			sta :FPMAN0
  5879 477D A5 8F			lda :FPMAN1
  5880 477F 85 8F			sta :FPMAN1
  5881 4781 A5 90			lda :FPMAN2
  5882 4783 85 90			sta :FPMAN2
  5883 4785 A5 91			lda :FPMAN3
  5884 4787 85 91			sta :FPMAN3
  5885 4789 20 33 27			jsr @F2I
  5886 478C A5 8E			lda :FPMAN0
  5887 478E 95 96			sta :STACKORIGIN,x
  5888 4790 A5 8F			lda :FPMAN1
  5889 4792 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5890 4794 A5 90			lda :FPMAN2
  5891 4796 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5892 4798 A5 91			lda :FPMAN3
  5893 479A 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5894 479C AC F3 9F 84 84 AC + 	mwy BALL :bp2
  5895 47A6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5896 47A8 B5 96			lda :STACKORIGIN,x
  5897 47AA 91 84			sta (:bp2),y
  5898 47AC C8				iny
  5899 47AD B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5900 47AF 91 84			sta (:bp2),y
  5901
  5902 				; optimize FAIL (1, service.pas), line = 1103
  5903
  5904 47B1 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5905 47B5 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5906 47B9 AD F9 9F			lda W
  5907 47BC 8D 8A 9D			sta SYSTEM.SIN.@01018F000.X
  5908 47BF AD FA 9F			lda W+1
  5909 47C2 8D 8B 9D			sta SYSTEM.SIN.@01018F000.X+1
  5910 47C5 AD FB 9F			lda W+2
  5911 47C8 8D 8C 9D			sta SYSTEM.SIN.@01018F000.X+2
  5912 47CB AD FC 9F			lda W+3
  5913 47CE 8D 8D 9D			sta SYSTEM.SIN.@01018F000.X+3
  5914 47D1 20 7A 32			jsr SYSTEM.SIN.@01018F000
  5915 47D4 E8				inx
  5916 47D5 AD 8E 9D 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  5917 47DA AD 8F 9D 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5918 47DF AD 90 9D 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5919 47E4 AD 91 9D 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5920 47E9 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5921 47ED 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5922 47EF B5 95			lda :STACKORIGIN-1,x
  5923 47F1 85 8E			sta :FPMAN0
  5924 47F3 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5925 47F5 85 8F			sta :FPMAN1
  5926 47F7 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5927 47F9 85 90			sta :FPMAN2
  5928 47FB B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5929 47FD 85 91			sta :FPMAN3
  5930 47FF 20 A4 27			jsr @I2F
  5931 4802 A5 8E			lda :FPMAN0
  5932 4804 95 95			sta :STACKORIGIN-1,x
  5933 4806 A5 8F			lda :FPMAN1
  5934 4808 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5935 480A A5 90			lda :FPMAN2
  5936 480C 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5937 480E A5 91			lda :FPMAN3
  5938 4810 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5939 4812 B5 96			lda :STACKORIGIN,x
  5940 4814 85 8A			sta :FP2MAN0
  5941 4816 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5942 4818 85 8B			sta :FP2MAN1
  5943 481A B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5944 481C 85 8C			sta :FP2MAN2
  5945 481E B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5946 4820 85 8D			sta :FP2MAN3
  5947 4822 B5 95			lda :STACKORIGIN-1,x
  5948 4824 85 86			sta :FP1MAN0
  5949 4826 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5950 4828 85 87			sta :FP1MAN1
  5951 482A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5952 482C 85 88			sta :FP1MAN2
  5953 482E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5954 4830 85 89			sta :FP1MAN3
  5955 4832 20 CA 25			jsr @FMUL
  5956 4835 CA				dex
  5957 4836 A5 8E			lda :FPMAN0
  5958 4838 85 8E			sta :FPMAN0
  5959 483A A5 8F			lda :FPMAN1
  5960 483C 85 8F			sta :FPMAN1
  5961 483E A5 90			lda :FPMAN2
  5962 4840 85 90			sta :FPMAN2
  5963 4842 A5 91			lda :FPMAN3
  5964 4844 85 91			sta :FPMAN3
  5965 4846 20 33 27			jsr @F2I
  5966 4849 A5 8E			lda :FPMAN0
  5967 484B 95 96			sta :STACKORIGIN,x
  5968 484D A5 8F			lda :FPMAN1
  5969 484F 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5970 4851 A5 90			lda :FPMAN2
  5971 4853 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5972 4855 A5 91			lda :FPMAN3
  5973 4857 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5974 4859 A9 00			lda #$00
  5975 485B 38 F5 96			sub :STACKORIGIN,x
  5976 485E 95 96			sta :STACKORIGIN,x
  5977 4860 A9 00			lda #$00
  5978 4862 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  5979 4864 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5980 4866 A9 00			lda #$00
  5981 4868 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  5982 486A 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5983 486C A9 00			lda #$00
  5984 486E F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  5985 4870 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5986 4872 AC F3 9F 84 84 AC + 	mwy BALL :bp2
  5987 487C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5988 487E B5 96			lda :STACKORIGIN,x
  5989 4880 91 84			sta (:bp2),y
  5990 4882 C8				iny
  5991 4883 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5992 4885 91 84			sta (:bp2),y
  5993 4887 CA				dex
  5994
  5995 				; ------------------------------------------------------------
  5996
  5997 = 9FF3			BALL	= DATAORIGIN+$028F
  5998 = 9D64			BALL.X	= DATAORIGIN+$0000
  5999 = 9D66			BALL.Y	= DATAORIGIN+$0002
  6000 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  6001 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  6002 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  6003 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  6004 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  6005 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  6006 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  6007 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  6008 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  6009 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  6010 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  6011 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  6012 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  6013 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  6014 = 9FF7			ANGLE	= DATAORIGIN+$0293
  6015 = 9FF9			W	= DATAORIGIN+$0295
  6016
  6017 = 9FF3			@VarData	= BALL
  6018 = 0008			@VarDataSize	= 8
  6019
  6020 4888			@exit
  6021 					.ifdef @new
  6022 					lda <@VarData
  6023 					sta :ztmp
  6024 					lda >@VarData
  6025 					ldy #@VarDataSize-1
  6026 					jmp @FreeMem
  6027 					els
  6028 4888 60				rts						; ret
  6029 					eif
  6030 				.endl
  6031
  6032 4889			.local	GET_BALL_DIRECTION				; FUNCTION
  6033
  6034 				; optimize OK (service.pas), line = 1111
  6035
  6036 4889 AC FD 9F 84 84 AC + 	mwy BALL :bp2
  6037 4893 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6038 4895 B1 84			lda (:bp2),y
  6039 4897 88				dey
  6040 4898 11 84			ora (:bp2),y
  6041 489A D0 75			jne l_0BFB
  6042 489C E8				inx
  6043 489D A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6044 48A1 E8				inx
  6045 48A2 AC FD 9F 84 84 AC + 	mwy BALL :bp2
  6046 48AC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6047 48AE B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6048 48B2 C8				iny
  6049 48B3 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6050 48B7 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6051 48B9 B1 84			lda (:bp2),y
  6052 48BB 85 8A			sta SYSTEM.ABS.@010184000.X
  6053 48BD C8				iny
  6054 48BE B1 84			lda (:bp2),y
  6055 48C0 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6056 48C2 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6057 48C5 E8				inx
  6058 48C6 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6059 48C8 85 8E			sta @SMALLINT.DIV.B
  6060 48CA A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6061 48CC 85 8F			sta @SMALLINT.DIV.B+1
  6062 48CE B5 95			lda :STACKORIGIN-1,x
  6063 48D0 85 86			sta @SMALLINT.DIV.A
  6064 48D2 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6065 48D4 85 87			sta @SMALLINT.DIV.A+1
  6066 48D6 20 33 22			jsr @SMALLINT.DIV
  6067 48D9 A5 86			lda :eax
  6068 48DB 95 95			sta :STACKORIGIN-1,x
  6069 48DD A5 87			lda :eax+1
  6070 48DF 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6071 48E1 CA				dex
  6072 48E2 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6073 48E6 20 0B 22			jsr mulSMALLINT
  6074 48E9 CA				dex
  6075 48EA A9 00			lda #$00
  6076 48EC 38 F5 96			sub :STACKORIGIN,x
  6077 48EF 95 96			sta :STACKORIGIN,x
  6078 48F1 A9 00			lda #$00
  6079 48F3 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6080 48F5 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6081 48F7 A9 00			lda #$00
  6082 48F9 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6083 48FB 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6084 48FD A9 00			lda #$00
  6085 48FF F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6086 4901 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6087 4903 B5 96			lda :STACKORIGIN,x
  6088 4905 8D 03 A0			sta W
  6089 4908 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6090 490A 8D 04 A0			sta W+1
  6091 490D CA				dex
  6092 490E 4C 9A 4A			jmp l_0C17
  6093 4911			l_0BFB
  6094
  6095 				; optimize OK (service.pas), line = 1117
  6096
  6097 4911 AC FD 9F 84 84 AC + 	mwy BALL :bp2
  6098 491B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6099 491D B1 84			lda (:bp2),y
  6100 491F 85 9F			sta :STACKORIGIN+9
  6101 4921 C8				iny
  6102 4922 B1 84			lda (:bp2),y
  6103 4924 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6104 4926 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6105 4928 B1 84			lda (:bp2),y
  6106 492A 85 8E			sta :FPMAN0
  6107 492C C8				iny
  6108 492D B1 84			lda (:bp2),y
  6109 492F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6110 4931 A0 00			ldy #$00
  6111 4933 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6112 4935 10 01			spl
  6113 4937 88				dey
  6114 4938 85 8F			sta :FPMAN1
  6115 493A 84 90			sty :FPMAN2
  6116 493C 84 91			sty :FPMAN3
  6117 493E 20 A4 27			jsr @I2F
  6118 4941 A5 8E			lda :FPMAN0
  6119 4943 85 A0			sta :STACKORIGIN+10
  6120 4945 A5 8F			lda :FPMAN1
  6121 4947 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6122 4949 A5 90			lda :FPMAN2
  6123 494B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6124 494D A5 91			lda :FPMAN3
  6125 494F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6126 4951 A0 00			ldy #$00
  6127 4953 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6128 4955 10 01			spl
  6129 4957 88				dey
  6130 4958 85 8F			sta :FPMAN1
  6131 495A 84 90			sty :FPMAN2
  6132 495C 84 91			sty :FPMAN3
  6133 495E A5 9F			lda :STACKORIGIN+9
  6134 4960 85 8E			sta :FPMAN0
  6135 4962 20 A4 27			jsr @I2F
  6136 4965 A5 8E			lda :FPMAN0
  6137 4967 85 86			sta :FP1MAN0
  6138 4969 A5 8F			lda :FPMAN1
  6139 496B 85 87			sta :FP1MAN1
  6140 496D A5 90			lda :FPMAN2
  6141 496F 85 88			sta :FP1MAN2
  6142 4971 A5 91			lda :FPMAN3
  6143 4973 85 89			sta :FP1MAN3
  6144 4975 A5 A0			lda :STACKORIGIN+10
  6145 4977 85 8A			sta :FP2MAN0
  6146 4979 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6147 497B 85 8B			sta :FP2MAN1
  6148 497D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6149 497F 85 8C			sta :FP2MAN2
  6150 4981 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6151 4983 85 8D			sta :FP2MAN3
  6152 4985 20 6B 26			jsr @FDIV
  6153 4988 A5 8E			lda :FPMAN0
  6154 498A 8D 59 9F			sta F_HLP
  6155 498D A5 8F			lda :FPMAN1
  6156 498F 8D 5A 9F			sta F_HLP+1
  6157 4992 A5 90			lda :FPMAN2
  6158 4994 8D 5B 9F			sta F_HLP+2
  6159 4997 A5 91			lda :FPMAN3
  6160 4999 49 80			eor #$80
  6161 499B 8D 5C 9F			sta F_HLP+3
  6162
  6163 				; optimize OK (service.pas), line = 1119
  6164
  6165 499E AD 59 9F			lda F_HLP
  6166 49A1 8D 6F 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6167 49A4 AD 5A 9F			lda F_HLP+1
  6168 49A7 8D 70 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6169 49AA AD 5B 9F			lda F_HLP+2
  6170 49AD 8D 71 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6171 49B0 AD 5C 9F			lda F_HLP+3
  6172 49B3 8D 72 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6173 49B6 20 FF 2A			jsr SYSTEM.ARCTAN.@01018F000
  6174 49B9 E8				inx
  6175 49BA E8				inx
  6176 49BB A9 00			lda #$00
  6177 49BD 85 8A			sta :FP2MAN0
  6178 49BF A9 00			lda #$00
  6179 49C1 85 8B			sta :FP2MAN1
  6180 49C3 A9 34			lda #$34
  6181 49C5 85 8C			sta :FP2MAN2
  6182 49C7 A9 43			lda #$43
  6183 49C9 85 8D			sta :FP2MAN3
  6184 49CB AD 73 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6185 49CE 85 86			sta :FP1MAN0
  6186 49D0 AD 74 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6187 49D3 85 87			sta :FP1MAN1
  6188 49D5 AD 75 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6189 49D8 85 88			sta :FP1MAN2
  6190 49DA AD 76 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6191 49DD 85 89			sta :FP1MAN3
  6192 49DF 20 CA 25			jsr @FMUL
  6193 49E2 A5 8E			lda :FPMAN0
  6194 49E4 95 95			sta :STACKORIGIN-1,x
  6195 49E6 A5 8F			lda :FPMAN1
  6196 49E8 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6197 49EA A5 90			lda :FPMAN2
  6198 49EC 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6199 49EE A5 91			lda :FPMAN3
  6200 49F0 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6201 49F2 A9 DB			lda #$DB
  6202 49F4 85 8A			sta :FP2MAN0
  6203 49F6 A9 0F			lda #$0F
  6204 49F8 85 8B			sta :FP2MAN1
  6205 49FA A9 49			lda #$49
  6206 49FC 85 8C			sta :FP2MAN2
  6207 49FE A9 40			lda #$40
  6208 4A00 85 8D			sta :FP2MAN3
  6209 4A02 B5 95			lda :STACKORIGIN-1,x
  6210 4A04 85 86			sta :FP1MAN0
  6211 4A06 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6212 4A08 85 87			sta :FP1MAN1
  6213 4A0A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6214 4A0C 85 88			sta :FP1MAN2
  6215 4A0E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6216 4A10 85 89			sta :FP1MAN3
  6217 4A12 20 6B 26			jsr @FDIV
  6218 4A15 CA				dex
  6219 4A16 A5 8E			lda :FPMAN0
  6220 4A18 8D 59 9F			sta F_HLP
  6221 4A1B A5 8F			lda :FPMAN1
  6222 4A1D 8D 5A 9F			sta F_HLP+1
  6223 4A20 A5 90			lda :FPMAN2
  6224 4A22 8D 5B 9F			sta F_HLP+2
  6225 4A25 A5 91			lda :FPMAN3
  6226 4A27 8D 5C 9F			sta F_HLP+3
  6227 4A2A CA				dex
  6228
  6229 				; optimize OK (service.pas), line = 1121
  6230
  6231 4A2B AD 59 9F			lda F_HLP
  6232 4A2E 85 8E			sta :FPMAN0
  6233 4A30 AD 5A 9F			lda F_HLP+1
  6234 4A33 85 8F			sta :FPMAN1
  6235 4A35 AD 5B 9F			lda F_HLP+2
  6236 4A38 85 90			sta :FPMAN2
  6237 4A3A AD 5C 9F			lda F_HLP+3
  6238 4A3D 85 91			sta :FPMAN3
  6239 4A3F 20 33 27			jsr @F2I
  6240 4A42 A5 8E			lda :FPMAN0
  6241 4A44 8D 03 A0			sta W
  6242 4A47 A5 8F			lda :FPMAN1
  6243 4A49 8D 04 A0			sta W+1
  6244
  6245 				; optimize OK (service.pas), line = 1123
  6246
  6247 4A4C AC FD 9F 84 84 AC + 	mwy BALL :bp2
  6248 4A56 A0 00			ldy #$00
  6249 4A58 B1 84			lda (:bp2),y
  6250 4A5A 10 0E			jpl l_0C46
  6251 4A5C AD 03 A0			lda W
  6252 4A5F 18 69 B4			add #$B4
  6253 4A62 8D 03 A0			sta W
  6254 4A65 90 03			scc
  6255 4A67 EE 04 A0			inc W+1
  6256 4A6A			l_0C46
  6257
  6258 				; optimize OK (service.pas), line = 1125
  6259
  6260 4A6A AD 03 A0			lda W
  6261 4A6D 18 69 68			add #$68
  6262 4A70 8D 03 A0			sta W
  6263 4A73 AD 04 A0			lda W+1
  6264 4A76 69 01			adc #$01
  6265 4A78 8D 04 A0			sta W+1
  6266
  6267 				; optimize OK (service.pas), line = 1126
  6268
  6269 4A7B A9 68			lda #$68
  6270 4A7D 85 8E			sta @SMALLINT.MOD.B
  6271 4A7F A9 01			lda #$01
  6272 4A81 85 8F			sta @SMALLINT.MOD.B+1
  6273 4A83 AD 03 A0			lda W
  6274 4A86 85 86			sta @SMALLINT.MOD.A
  6275 4A88 AD 04 A0			lda W+1
  6276 4A8B 85 87			sta @SMALLINT.MOD.A+1
  6277 4A8D 20 50 22			jsr @SMALLINT.MOD
  6278 4A90 A5 92			lda @SMALLINT.MOD.RESULT
  6279 4A92 8D 03 A0			sta W
  6280 4A95 A5 93			lda @SMALLINT.MOD.RESULT+1
  6281 4A97 8D 04 A0			sta W+1
  6282 4A9A			l_0C17
  6283
  6284 				; optimize OK (service.pas), line = 1129
  6285
  6286 4A9A AD 03 A0			lda W
  6287 4A9D 8D 01 A0			sta RESULT
  6288 4AA0 AD 04 A0			lda W+1
  6289 4AA3 8D 02 A0			sta RESULT+1
  6290 4AA6			@exit
  6291
  6292 				; ------------------------------------------------------------
  6293
  6294 = 9FFD			BALL	= DATAORIGIN+$0299
  6295 = 9D64			BALL.X	= DATAORIGIN+$0000
  6296 = 9D66			BALL.Y	= DATAORIGIN+$0002
  6297 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  6298 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  6299 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  6300 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  6301 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  6302 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  6303 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  6304 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  6305 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  6306 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  6307 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  6308 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  6309 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  6310 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  6311 = A001			RESULT	= DATAORIGIN+$029D
  6312 = A003			W	= DATAORIGIN+$029F
  6313
  6314 = 9FFD			@VarData	= BALL
  6315 = 0004			@VarDataSize	= 4
  6316
  6317 4AA6 60				rts						; ret
  6318 				.endl
  6319
  6320 4AA7			.local	START_BALL					; PROCEDURE
  6321
  6322 				; optimize OK (service.pas), line = 1138
  6323
  6324 4AA7 AC 05 A0 84 84 AC + 	mwy BALL :bp2
  6325 4AB1 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6326 4AB3 AD D8 9E			lda VAUS.X
  6327 4AB6 18 71 84			add (:bp2),y
  6328 4AB9 85 9F			sta :STACKORIGIN+9
  6329 4ABB C8				iny
  6330 4ABC A9 00			lda #$00
  6331 4ABE 71 84			adc (:bp2),y
  6332 4AC0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6333 4AC2 A0 00			ldy #BALL.X-DATAORIGIN
  6334 4AC4 A5 9F			lda :STACKORIGIN+9
  6335 4AC6 91 84			sta (:bp2),y
  6336 4AC8 C8				iny
  6337 4AC9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6338 4ACB 91 84			sta (:bp2),y
  6339
  6340 				; optimize OK (service.pas), line = 1144
  6341
  6342 4ACD A0 02			ldy #BALL.Y-DATAORIGIN
  6343 4ACF AD D9 9E			lda VAUS.Y
  6344 4AD2 38 E9 03			sub #$03
  6345 4AD5 91 84			sta (:bp2),y
  6346 4AD7 C8				iny
  6347 4AD8 A9 00			lda #$00
  6348 4ADA E9 00			sbc #$00
  6349 4ADC 91 84			sta (:bp2),y
  6350
  6351 				; optimize OK (service.pas), line = 1149
  6352
  6353 4ADE A0 04			ldy #BALL.FINEX-DATAORIGIN
  6354 4AE0 A9 00			lda #$00
  6355 4AE2 91 84			sta (:bp2),y
  6356 4AE4 C8				iny
  6357 4AE5 91 84			sta (:bp2),y
  6358
  6359 				; optimize OK (service.pas), line = 1150
  6360
  6361 4AE7 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6362 4AE9 91 84			sta (:bp2),y
  6363 4AEB C8				iny
  6364 4AEC 91 84			sta (:bp2),y
  6365
  6366 				; optimize OK (service.pas), line = 1152
  6367
  6368 4AEE A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6369 4AF0 A9 01			lda #$01
  6370 4AF2 91 84			sta (:bp2),y
  6371
  6372 				; optimize OK (service.pas), line = 1154
  6373
  6374 4AF4 A0 14			ldy #BALL.SBD-DATAORIGIN
  6375 4AF6 A9 00			lda #$00
  6376 4AF8 91 84			sta (:bp2),y
  6377 4AFA C8				iny
  6378 4AFB 91 84			sta (:bp2),y
  6379
  6380 				; optimize OK (service.pas), line = 1155
  6381
  6382 4AFD A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6383 4AFF 91 84			sta (:bp2),y
  6384
  6385 				; ------------------------------------------------------------
  6386
  6387 = A005			BALL	= DATAORIGIN+$02A1
  6388 = 9D64			BALL.X	= DATAORIGIN+$0000
  6389 = 9D66			BALL.Y	= DATAORIGIN+$0002
  6390 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  6391 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  6392 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  6393 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  6394 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  6395 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  6396 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  6397 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  6398 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  6399 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  6400 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  6401 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  6402 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  6403 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  6404
  6405 = A005			@VarData	= BALL
  6406 = 0002			@VarDataSize	= 2
  6407
  6408 4B01			@exit
  6409 					.ifdef @new
  6410 					lda <@VarData
  6411 					sta :ztmp
  6412 					lda >@VarData
  6413 					ldy #@VarDataSize-1
  6414 					jmp @FreeMem
  6415 					els
  6416 4B01 60				rts						; ret
  6417 					eif
  6418 				.endl
  6419
  6420 4B02			.local	BALL_SPEED					; FUNCTION
  6421
  6422 				; ------------------------------------------------------------
  6423
  6424 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6425 				; as Pointer
  6426 4B02 B5 96			lda :STACKORIGIN,x
  6427 4B04 85 84			sta :bp2
  6428 4B06 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6429 4B08 85 85			sta :bp2+1
  6430 4B0A A0 1B			ldy #$1B
  6431 4B0C B1 84 99 09 A0 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6432 4B14 CA				dex
  6433 4B15			@main
  6434
  6435 				; optimize OK (service.pas), line = 1166
  6436
  6437 4B15 AD 19 A0			lda BALL.SPEEDX
  6438 4B18 85 8A			sta SYSTEM.ABS.@010184000.X
  6439 4B1A AD 1A A0			lda BALL.SPEEDX+1
  6440 4B1D 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6441 4B1F 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6442 4B22 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6443 4B24 8D 2B A0			sta A
  6444 4B27 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6445 4B29 8D 2C A0			sta A+1
  6446
  6447 				; optimize OK (service.pas), line = 1167
  6448
  6449 4B2C AD 1B A0			lda BALL.SPEEDY
  6450 4B2F 85 8A			sta SYSTEM.ABS.@010184000.X
  6451 4B31 AD 1C A0			lda BALL.SPEEDY+1
  6452 4B34 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6453 4B36 20 D1 2A			jsr SYSTEM.ABS.@010184000
  6454 4B39 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6455 4B3B 8D 2D A0			sta B
  6456 4B3E A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6457 4B40 8D 2E A0			sta B+1
  6458
  6459 				; optimize OK (service.pas), line = 1169
  6460
  6461 4B43 AD 2B A0			lda A
  6462 4B46 85 8E			sta :ecx
  6463 4B48 85 86			sta :eax
  6464 4B4A AD 2C A0			lda A+1
  6465 4B4D 85 8F			sta :ecx+1
  6466 4B4F 85 87			sta :eax+1
  6467 					.ifdef fmulinit
  6468 					fmulu_16
  6469 					els
  6470 4B51 20 0B 23			imulCX
  6471 					eif
  6472 4B54 A5 86			lda :eax
  6473 4B56 85 9F			sta :STACKORIGIN+9
  6474 4B58 A5 87			lda :eax+1
  6475 4B5A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6476 4B5C A5 88			lda :eax+2
  6477 4B5E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6478 4B60 A5 89			lda :eax+3
  6479 4B62 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6480 4B64 AD 2D A0			lda B
  6481 4B67 85 8E			sta :ecx
  6482 4B69 85 86			sta :eax
  6483 4B6B AD 2E A0			lda B+1
  6484 4B6E 85 8F			sta :ecx+1
  6485 4B70 85 87			sta :eax+1
  6486 					.ifdef fmulinit
  6487 					fmulu_16
  6488 					els
  6489 4B72 20 0B 23			imulCX
  6490 					eif
  6491 4B75 A5 9F			lda :STACKORIGIN+9
  6492 4B77 18 65 86			add :eax
  6493 4B7A 8D 27 A0			sta I
  6494 4B7D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6495 4B7F 65 87			adc :eax+1
  6496 4B81 8D 28 A0			sta I+1
  6497 4B84 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6498 4B86 65 88			adc :eax+2
  6499 4B88 8D 29 A0			sta I+2
  6500 4B8B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6501 4B8D 65 89			adc :eax+3
  6502 4B8F 8D 2A A0			sta I+3
  6503
  6504 				; optimize OK (service.pas), line = 1171
  6505
  6506 4B92 AD 27 A0			lda I
  6507 4B95 8D 42 9E			sta SQRT32.V
  6508 4B98 AD 28 A0			lda I+1
  6509 4B9B 8D 43 9E			sta SQRT32.V+1
  6510 4B9E AD 29 A0			lda I+2
  6511 4BA1 8D 44 9E			sta SQRT32.V+2
  6512 4BA4 AD 2A A0			lda I+3
  6513 4BA7 8D 45 9E			sta SQRT32.V+3
  6514 4BAA 20 40 38			jsr SQRT32
  6515 4BAD AD 46 9E			lda SQRT32.RESULT
  6516 4BB0 8D 25 A0			sta RESULT
  6517 4BB3 AD 47 9E			lda SQRT32.RESULT+1
  6518 4BB6 8D 26 A0			sta RESULT+1
  6519 4BB9			@exit
  6520
  6521 				; ------------------------------------------------------------
  6522
  6523 = A009			adr.BALL	= DATAORIGIN+$02A5	; [28] RECORD
  6524 4BB9			.var BALL	= adr.BALL .word
  6525 = A009			BALL.X	= DATAORIGIN+$02A5
  6526 = A00B			BALL.Y	= DATAORIGIN+$02A7
  6527 = A00D			BALL.FINEX	= DATAORIGIN+$02A9
  6528 = A00F			BALL.FINEY	= DATAORIGIN+$02AB
  6529 = A011			BALL.OLDX	= DATAORIGIN+$02AD
  6530 = A013			BALL.OLDY	= DATAORIGIN+$02AF
  6531 = A015			BALL.SPEED	= DATAORIGIN+$02B1
  6532 = A017			BALL.FINESPEED	= DATAORIGIN+$02B3
  6533 = A019			BALL.SPEEDX	= DATAORIGIN+$02B5
  6534 = A01B			BALL.SPEEDY	= DATAORIGIN+$02B7
  6535 = A01D			BALL.SBD	= DATAORIGIN+$02B9
  6536 = A01F			BALL.BRWHIT	= DATAORIGIN+$02BB
  6537 = A020			BALL.INPLAY	= DATAORIGIN+$02BC
  6538 = A021			BALL.LAUNCH	= DATAORIGIN+$02BD
  6539 = A022			BALL.ONVAUS	= DATAORIGIN+$02BE
  6540 = A024			BALL.STM	= DATAORIGIN+$02C0
  6541 = A025			RESULT	= DATAORIGIN+$02C1
  6542 = A027			I	= DATAORIGIN+$02C3
  6543 = A02B			A	= DATAORIGIN+$02C7
  6544 = A02D			B	= DATAORIGIN+$02C9
  6545
  6546 = A009			@VarData	= BALL.X
  6547 = 0024			@VarDataSize	= 36
  6548
  6549 4BB9 60				rts						; ret
  6550 = 4BBA 09 A0		BALL
  6550 				.endl
  6551
  6552 4BBC			.local	MOVE_BALL					; PROCEDURE
  6553
  6554 				; optimize OK (service.pas), line = 1189
  6555
  6556 4BBC AC 2F A0 84 84 AC + 	mwy BALL :bp2
  6557 4BC6 A0 00			ldy #BALL.X-DATAORIGIN
  6558 4BC8 B1 84			lda (:bp2),y
  6559 4BCA C8				iny
  6560 4BCB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6561 4BCD A9 00			lda #$00
  6562 4BCF A0 04			ldy #BALL.FINEX-DATAORIGIN
  6563 4BD1 18 71 84			add (:bp2),y
  6564 4BD4 85 9F			sta :STACKORIGIN+9
  6565 4BD6 C8				iny
  6566 4BD7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6567 4BD9 71 84			adc (:bp2),y
  6568 4BDB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6569 4BDD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6570 4BDF A5 9F			lda :STACKORIGIN+9
  6571 4BE1 18 71 84			add (:bp2),y
  6572 4BE4 8D 36 A0			sta X
  6573 4BE7 C8				iny
  6574 4BE8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6575 4BEA 71 84			adc (:bp2),y
  6576 4BEC 8D 37 A0			sta X+1
  6577
  6578 				; optimize OK (service.pas), line = 1190
  6579
  6580 4BEF A0 02			ldy #BALL.Y-DATAORIGIN
  6581 4BF1 B1 84			lda (:bp2),y
  6582 4BF3 C8				iny
  6583 4BF4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6584 4BF6 A9 00			lda #$00
  6585 4BF8 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6586 4BFA 18 71 84			add (:bp2),y
  6587 4BFD 85 9F			sta :STACKORIGIN+9
  6588 4BFF C8				iny
  6589 4C00 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6590 4C02 71 84			adc (:bp2),y
  6591 4C04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6592 4C06 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6593 4C08 A5 9F			lda :STACKORIGIN+9
  6594 4C0A 18 71 84			add (:bp2),y
  6595 4C0D 8D 38 A0			sta Y
  6596 4C10 C8				iny
  6597 4C11 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6598 4C13 71 84			adc (:bp2),y
  6599 4C15 8D 39 A0			sta Y+1
  6600
  6601 				; optimize OK (service.pas), line = 1192
  6602
  6603 4C18 A0 00			ldy #BALL.X-DATAORIGIN
  6604 4C1A AD 37 A0			lda X+1
  6605 4C1D 91 84			sta (:bp2),y
  6606 4C1F C8				iny
  6607 4C20 A9 00			lda #$00
  6608 4C22 91 84			sta (:bp2),y
  6609
  6610 				; optimize OK (service.pas), line = 1193
  6611
  6612 4C24 A0 02			ldy #BALL.Y-DATAORIGIN
  6613 4C26 AD 39 A0			lda Y+1
  6614 4C29 91 84			sta (:bp2),y
  6615 4C2B C8				iny
  6616 4C2C A9 00			lda #$00
  6617 4C2E 91 84			sta (:bp2),y
  6618
  6619 				; optimize OK (service.pas), line = 1195
  6620
  6621 4C30 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6622 4C32 AD 36 A0			lda X
  6623 4C35 91 84			sta (:bp2),y
  6624 4C37 C8				iny
  6625 4C38 A9 00			lda #$00
  6626 4C3A 91 84			sta (:bp2),y
  6627
  6628 				; optimize OK (service.pas), line = 1196
  6629
  6630 4C3C A0 06			ldy #BALL.FINEY-DATAORIGIN
  6631 4C3E AD 38 A0			lda Y
  6632 4C41 91 84			sta (:bp2),y
  6633 4C43 C8				iny
  6634 4C44 A9 00			lda #$00
  6635 4C46 91 84			sta (:bp2),y
  6636
  6637 				; optimize OK (service.pas), line = 1201
  6638
  6639 4C48 A0 00			ldy #BALL.X-DATAORIGIN
  6640 4C4A B1 84			lda (:bp2),y
  6641 4C4C C8				iny
  6642 4C4D C9 D9			cmp #$D9
  6643 4C4F B1 84			lda (:bp2),y
  6644 4C51 E9 00			sbc #$00
  6645 4C53 50 02			svc
  6646 4C55 49 80			eor #$80
  6647 4C57 30 67			jmi l_0D11
  6648
  6649 				; optimize OK (service.pas), line = 1203
  6650
  6651 4C59 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6652 4C5B A9 00			lda #$00
  6653 4C5D 38 F1 84			sub (:bp2),y
  6654 4C60 85 9F			sta :STACKORIGIN+9
  6655 4C62 C8				iny
  6656 4C63 A9 00			lda #$00
  6657 4C65 F1 84			sbc (:bp2),y
  6658 4C67 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6659 4C69 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6660 4C6B A5 9F			lda :STACKORIGIN+9
  6661 4C6D 91 84			sta (:bp2),y
  6662 4C6F C8				iny
  6663 4C70 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6664 4C72 91 84			sta (:bp2),y
  6665
  6666 				; optimize OK (service.pas), line = 1204
  6667
  6668 4C74 A0 00			ldy #BALL.X-DATAORIGIN
  6669 4C76 A9 B0			lda #$B0
  6670 4C78 38 F1 84			sub (:bp2),y
  6671 4C7B 85 9F			sta :STACKORIGIN+9
  6672 4C7D C8				iny
  6673 4C7E A9 01			lda #$01
  6674 4C80 F1 84			sbc (:bp2),y
  6675 4C82 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6676 4C84 A0 00			ldy #BALL.X-DATAORIGIN
  6677 4C86 A5 9F			lda :STACKORIGIN+9
  6678 4C88 91 84			sta (:bp2),y
  6679 4C8A C8				iny
  6680 4C8B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6681 4C8D 91 84			sta (:bp2),y
  6682
  6683 				; optimize OK (service.pas), line = 1205
  6684
  6685 4C8F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6686 4C91 A9 FF			lda #$FF
  6687 4C93 51 84			eor (:bp2),y
  6688 4C95 85 9F			sta :STACKORIGIN+9
  6689 4C97 C8				iny
  6690 4C98 A9 00			lda #$00
  6691 4C9A F1 84			sbc (:bp2),y
  6692 4C9C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6693 4C9E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6694 4CA0 A5 9F			lda :STACKORIGIN+9
  6695 4CA2 91 84			sta (:bp2),y
  6696 4CA4 C8				iny
  6697 4CA5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6698 4CA7 91 84			sta (:bp2),y
  6699
  6700 				; optimize OK (service.pas), line = 1206
  6701
  6702 4CA9 A9 F0			lda #$F0
  6703 4CAB 8D 3E 9E			sta BALL_BLOCK_SOUND.A
  6704 4CAE A9 00			lda #$00
  6705 4CB0 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
  6706 4CB3 A9 05			lda #$05
  6707 4CB5 8D 40 9E			sta BALL_BLOCK_SOUND.B
  6708 4CB8 A9 00			lda #$00
  6709 4CBA 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
  6710 4CBD 20 3F 38			jsr BALL_BLOCK_SOUND
  6711 4CC0			l_0D11
  6712
  6713 				; optimize OK (service.pas), line = 1211
  6714
  6715 4CC0 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  6716 4CCA A0 00			ldy #BALL.X-DATAORIGIN
  6717 4CCC B1 84			lda (:bp2),y
  6718 4CCE C8				iny
  6719 4CCF C9 0A			cmp #$0A
  6720 4CD1 B1 84			lda (:bp2),y
  6721 4CD3 E9 00			sbc #$00
  6722 4CD5 50 02			svc
  6723 4CD7 49 80			eor #$80
  6724 4CD9 10 67			jpl l_0D46
  6725
  6726 				; optimize OK (service.pas), line = 1213
  6727
  6728 4CDB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6729 4CDD A9 00			lda #$00
  6730 4CDF 38 F1 84			sub (:bp2),y
  6731 4CE2 85 9F			sta :STACKORIGIN+9
  6732 4CE4 C8				iny
  6733 4CE5 A9 00			lda #$00
  6734 4CE7 F1 84			sbc (:bp2),y
  6735 4CE9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6736 4CEB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6737 4CED A5 9F			lda :STACKORIGIN+9
  6738 4CEF 91 84			sta (:bp2),y
  6739 4CF1 C8				iny
  6740 4CF2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6741 4CF4 91 84			sta (:bp2),y
  6742
  6743 				; optimize OK (service.pas), line = 1214
  6744
  6745 4CF6 A0 00			ldy #BALL.X-DATAORIGIN
  6746 4CF8 A9 14			lda #$14
  6747 4CFA 38 F1 84			sub (:bp2),y
  6748 4CFD 85 9F			sta :STACKORIGIN+9
  6749 4CFF C8				iny
  6750 4D00 A9 00			lda #$00
  6751 4D02 F1 84			sbc (:bp2),y
  6752 4D04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6753 4D06 A0 00			ldy #BALL.X-DATAORIGIN
  6754 4D08 A5 9F			lda :STACKORIGIN+9
  6755 4D0A 91 84			sta (:bp2),y
  6756 4D0C C8				iny
  6757 4D0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6758 4D0F 91 84			sta (:bp2),y
  6759
  6760 				; optimize OK (service.pas), line = 1215
  6761
  6762 4D11 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6763 4D13 A9 FF			lda #$FF
  6764 4D15 51 84			eor (:bp2),y
  6765 4D17 85 9F			sta :STACKORIGIN+9
  6766 4D19 C8				iny
  6767 4D1A A9 00			lda #$00
  6768 4D1C F1 84			sbc (:bp2),y
  6769 4D1E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6770 4D20 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6771 4D22 A5 9F			lda :STACKORIGIN+9
  6772 4D24 91 84			sta (:bp2),y
  6773 4D26 C8				iny
  6774 4D27 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6775 4D29 91 84			sta (:bp2),y
  6776
  6777 				; optimize OK (service.pas), line = 1216
  6778
  6779 4D2B A9 F0			lda #$F0
  6780 4D2D 8D 3E 9E			sta BALL_BLOCK_SOUND.A
  6781 4D30 A9 00			lda #$00
  6782 4D32 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
  6783 4D35 A9 05			lda #$05
  6784 4D37 8D 40 9E			sta BALL_BLOCK_SOUND.B
  6785 4D3A A9 00			lda #$00
  6786 4D3C 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
  6787 4D3F 20 3F 38			jsr BALL_BLOCK_SOUND
  6788 4D42			l_0D46
  6789
  6790 				; optimize OK (service.pas), line = 1221
  6791
  6792 4D42 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  6793 4D4C A0 02			ldy #BALL.Y-DATAORIGIN
  6794 4D4E B1 84			lda (:bp2),y
  6795 4D50 C8				iny
  6796 4D51 C9 0C			cmp #$0C
  6797 4D53 B1 84			lda (:bp2),y
  6798 4D55 E9 00			sbc #$00
  6799 4D57 50 02			svc
  6800 4D59 49 80			eor #$80
  6801 4D5B 10 67			jpl l_0D7B
  6802
  6803 				; optimize OK (service.pas), line = 1223
  6804
  6805 4D5D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6806 4D5F A9 00			lda #$00
  6807 4D61 38 F1 84			sub (:bp2),y
  6808 4D64 85 9F			sta :STACKORIGIN+9
  6809 4D66 C8				iny
  6810 4D67 A9 00			lda #$00
  6811 4D69 F1 84			sbc (:bp2),y
  6812 4D6B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6813 4D6D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6814 4D6F A5 9F			lda :STACKORIGIN+9
  6815 4D71 91 84			sta (:bp2),y
  6816 4D73 C8				iny
  6817 4D74 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6818 4D76 91 84			sta (:bp2),y
  6819
  6820 				; optimize OK (service.pas), line = 1224
  6821
  6822 4D78 A0 02			ldy #BALL.Y-DATAORIGIN
  6823 4D7A A9 18			lda #$18
  6824 4D7C 38 F1 84			sub (:bp2),y
  6825 4D7F 85 9F			sta :STACKORIGIN+9
  6826 4D81 C8				iny
  6827 4D82 A9 00			lda #$00
  6828 4D84 F1 84			sbc (:bp2),y
  6829 4D86 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6830 4D88 A0 02			ldy #BALL.Y-DATAORIGIN
  6831 4D8A A5 9F			lda :STACKORIGIN+9
  6832 4D8C 91 84			sta (:bp2),y
  6833 4D8E C8				iny
  6834 4D8F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6835 4D91 91 84			sta (:bp2),y
  6836
  6837 				; optimize OK (service.pas), line = 1225
  6838
  6839 4D93 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6840 4D95 A9 FF			lda #$FF
  6841 4D97 51 84			eor (:bp2),y
  6842 4D99 85 9F			sta :STACKORIGIN+9
  6843 4D9B C8				iny
  6844 4D9C A9 00			lda #$00
  6845 4D9E F1 84			sbc (:bp2),y
  6846 4DA0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6847 4DA2 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6848 4DA4 A5 9F			lda :STACKORIGIN+9
  6849 4DA6 91 84			sta (:bp2),y
  6850 4DA8 C8				iny
  6851 4DA9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6852 4DAB 91 84			sta (:bp2),y
  6853
  6854 				; optimize OK (service.pas), line = 1226
  6855
  6856 4DAD A9 F0			lda #$F0
  6857 4DAF 8D 3E 9E			sta BALL_BLOCK_SOUND.A
  6858 4DB2 A9 00			lda #$00
  6859 4DB4 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
  6860 4DB7 A9 05			lda #$05
  6861 4DB9 8D 40 9E			sta BALL_BLOCK_SOUND.B
  6862 4DBC A9 00			lda #$00
  6863 4DBE 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
  6864 4DC1 20 3F 38			jsr BALL_BLOCK_SOUND
  6865 4DC4			l_0D7B
  6866
  6867 				; optimize OK (service.pas), line = 1234
  6868
  6869 4DC4 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  6870 4DCE A0 02			ldy #BALL.Y-DATAORIGIN
  6871 4DD0 B1 84			lda (:bp2),y
  6872 4DD2 18 69 03			add #$03
  6873 4DD5 85 9F			sta :STACKORIGIN+9
  6874 4DD7 C8				iny
  6875 4DD8 B1 84			lda (:bp2),y
  6876 4DDA 69 00			adc #$00
  6877 4DDC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6878 4DDE A0 01			ldy #1
  6879 4DE0 A5 9F			lda :STACKORIGIN+9
  6880 4DE2 C9 B9			cmp #$B9
  6881 4DE4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6882 4DE6 E9 00			sbc #$00
  6883 4DE8 50 02			svc
  6884 4DEA 49 80			eor #$80
  6885 4DEC 10 01			bpl @+
  6886 4DEE 88				dey
  6887 				@
  6888 4DEF 98				tya
  6889 4DF0 8D 33 A0			sta B0
  6890
  6891 				; optimize OK (service.pas), line = 1235
  6892
  6893 4DF3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6894 4DF5 B1 84			lda (:bp2),y
  6895 4DF7 85 9F			sta :STACKORIGIN+9
  6896 4DF9 C8				iny
  6897 4DFA B1 84			lda (:bp2),y
  6898 4DFC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6899 4DFE A0 01			ldy #1
  6900 4E00 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6901 4E02 30 04			bmi @+
  6902 4E04 05 9F			ora :STACKORIGIN+9
  6903 4E06 D0 01			sne
  6904 				@
  6905 4E08 88				dey
  6906 				@
  6907 4E09 98				tya
  6908 4E0A 8D 34 A0			sta B1
  6909
  6910 				; optimize OK (service.pas), line = 1236
  6911
  6912 4E0D A0 0A			ldy #BALL.OLDY-DATAORIGIN
  6913 4E0F B1 84			lda (:bp2),y
  6914 4E11 85 9F			sta :STACKORIGIN+9
  6915 4E13 C8				iny
  6916 4E14 B1 84			lda (:bp2),y
  6917 4E16 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6918 4E18 A0 01			ldy #1
  6919 4E1A A5 9F			lda :STACKORIGIN+9
  6920 4E1C C9 B9			cmp #$B9
  6921 4E1E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6922 4E20 E9 00			sbc #$00
  6923 4E22 50 02			svc
  6924 4E24 49 80			eor #$80
  6925 4E26 30 01			bmi @+
  6926 4E28 88				dey
  6927 				@
  6928 4E29 98				tya
  6929 4E2A 8D 35 A0			sta B2
  6930
  6931 				; optimize OK (service.pas), line = 1239
  6932
  6933 4E2D AD 33 A0			lda B0
  6934 4E30 2D 34 A0			and B1
  6935 4E33 2D 35 A0			and B2
  6936 4E36 D0 03 4C E4 50		jeq l_0DDC
  6937
  6938 				; optimize OK (service.pas), line = 1243
  6939
  6940 4E3B A0 00			ldy #BALL.X-DATAORIGIN
  6941 4E3D B1 84			lda (:bp2),y
  6942 4E3F 85 9F			sta :STACKORIGIN+9
  6943 4E41 C8				iny
  6944 4E42 AD D8 9E			lda VAUS.X
  6945 4E45 38 E9 03			sub #$03
  6946 4E48 85 A0			sta :STACKORIGIN+10
  6947 4E4A A9 00			lda #$00
  6948 4E4C E9 00			sbc #$00
  6949 4E4E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6950 4E50 A5 A0			lda :STACKORIGIN+10
  6951 4E52 C5 9F			cmp :STACKORIGIN+9
  6952 4E54 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6953 4E56 F1 84			sbc (:bp2),y
  6954 4E58 50 02			svc
  6955 4E5A 49 80			eor #$80
  6956 4E5C 30 03 4C E4 50		jpl l_0E0B
  6957 4E61 A0 00			ldy #BALL.X-DATAORIGIN
  6958 4E63 B1 84			lda (:bp2),y
  6959 4E65 85 A0			sta :STACKORIGIN+10
  6960 4E67 C8				iny
  6961 4E68 AD D8 9E			lda VAUS.X
  6962 4E6B 18 6D E0 9E			add VAUS.WIDTH
  6963 4E6F 85 A1			sta :STACKORIGIN+11
  6964 4E71 A9 00			lda #$00
  6965 4E73 69 00			adc #$00
  6966 4E75 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6967 4E77 A5 A1			lda :STACKORIGIN+11
  6968 4E79 18 69 03			add #$03
  6969 4E7C 85 A1			sta :STACKORIGIN+11
  6970 4E7E A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  6971 4E80 69 00			adc #$00
  6972 4E82 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6973 4E84 A5 A0			lda :STACKORIGIN+10
  6974 4E86 C5 A1			cmp :STACKORIGIN+11
  6975 4E88 B1 84			lda (:bp2),y
  6976 4E8A E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  6977 4E8C 50 02			svc
  6978 4E8E 49 80			eor #$80
  6979 4E90 30 03 4C E4 50		jpl l_0E0B
  6980
  6981 				; optimize OK (service.pas), line = 1246
  6982
  6983 4E95 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6984 4E97 A9 00			lda #$00
  6985 4E99 38 F1 84			sub (:bp2),y
  6986 4E9C 85 9F			sta :STACKORIGIN+9
  6987 4E9E C8				iny
  6988 4E9F A9 00			lda #$00
  6989 4EA1 F1 84			sbc (:bp2),y
  6990 4EA3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6991 4EA5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6992 4EA7 A5 9F			lda :STACKORIGIN+9
  6993 4EA9 91 84			sta (:bp2),y
  6994 4EAB C8				iny
  6995 4EAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6996 4EAE 91 84			sta (:bp2),y
  6997
  6998 				; optimize OK (service.pas), line = 1248
  6999
  7000 4EB0 AD E4 9E			lda VAUS.LETTER
  7001 4EB3 C9 06			cmp #$06
  7002 4EB5 D0 2C			jne l_0E2F
  7003 4EB7 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7004 4EB9 B1 84			lda (:bp2),y
  7005 4EBB D0 26			jne l_0E2F
  7006
  7007 				; optimize OK (service.pas), line = 1250
  7008
  7009 4EBD A0 1B			ldy #BALL.STM-DATAORIGIN
  7010 4EBF 91 84			sta (:bp2),y
  7011
  7012 				; optimize OK (service.pas), line = 1251
  7013
  7014 4EC1 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7015 4EC3 A9 01			lda #$01
  7016 4EC5 91 84			sta (:bp2),y
  7017
  7018 				; optimize OK (service.pas), line = 1252
  7019
  7020 4EC7 A0 00			ldy #BALL.X-DATAORIGIN
  7021 4EC9 B1 84			lda (:bp2),y
  7022 4ECB 38 ED D8 9E			sub VAUS.X
  7023 4ECF 85 9F			sta :STACKORIGIN+9
  7024 4ED1 C8				iny
  7025 4ED2 B1 84			lda (:bp2),y
  7026 4ED4 E9 00			sbc #$00
  7027 4ED6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7028 4ED8 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7029 4EDA A5 9F			lda :STACKORIGIN+9
  7030 4EDC 91 84			sta (:bp2),y
  7031 4EDE C8				iny
  7032 4EDF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7033 4EE1 91 84			sta (:bp2),y
  7034 4EE3			l_0E2F
  7035
  7036 				; optimize OK (service.pas), line = 1255
  7037
  7038 4EE3 A9 2C			lda #$2C
  7039 4EE5 8D 3E 9E			sta BALL_BLOCK_SOUND.A
  7040 4EE8 A9 01			lda #$01
  7041 4EEA 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
  7042 4EED A9 06			lda #$06
  7043 4EEF 8D 40 9E			sta BALL_BLOCK_SOUND.B
  7044 4EF2 A9 00			lda #$00
  7045 4EF4 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
  7046 4EF7 20 3F 38			jsr BALL_BLOCK_SOUND
  7047
  7048 				; optimize OK (service.pas), line = 1259
  7049
  7050 4EFA AC 2F A0 84 84 AC + 	mwy BALL :bp2
  7051 4F04 A0 00			ldy #BALL.X-DATAORIGIN
  7052 4F06 B1 84			lda (:bp2),y
  7053 4F08 85 9F			sta :STACKORIGIN+9
  7054 4F0A C8				iny
  7055 4F0B AD D8 9E			lda VAUS.X
  7056 4F0E 18 69 0A			add #$0A
  7057 4F11 85 A0			sta :STACKORIGIN+10
  7058 4F13 A9 00			lda #$00
  7059 4F15 69 00			adc #$00
  7060 4F17 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7061 4F19 A5 9F			lda :STACKORIGIN+9
  7062 4F1B C5 A0			cmp :STACKORIGIN+10
  7063 4F1D B1 84			lda (:bp2),y
  7064 4F1F E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7065 4F21 50 02			svc
  7066 4F23 49 80			eor #$80
  7067 4F25 30 03 4C E8 4F		jpl l_0E5F
  7068
  7069 				; optimize OK (service.pas), line = 1262
  7070
  7071 4F2A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7072 4F2C A9 00			lda #$00
  7073 4F2E 38 F1 84			sub (:bp2),y
  7074 4F31 85 9F			sta :STACKORIGIN+9
  7075 4F33 C8				iny
  7076 4F34 A9 00			lda #$00
  7077 4F36 F1 84			sbc (:bp2),y
  7078 4F38 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7079 4F3A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7080 4F3C A5 9F			lda :STACKORIGIN+9
  7081 4F3E 91 84			sta (:bp2),y
  7082 4F40 C8				iny
  7083 4F41 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7084 4F43 91 84			sta (:bp2),y
  7085
  7086 				; optimize OK (service.pas), line = 1266
  7087
  7088 4F45 AD 2F A0			lda BALL
  7089 4F48 8D FD 9F			sta GET_BALL_DIRECTION.BALL
  7090 4F4B AD 30 A0			lda BALL+1
  7091 4F4E 8D FE 9F			sta GET_BALL_DIRECTION.BALL+1
  7092 4F51 20 89 48			jsr GET_BALL_DIRECTION
  7093 4F54 E8				inx
  7094 4F55 AD 01 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7095 4F5A AD 02 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7096 4F5F A9 1E			lda #$1E
  7097 4F61 20 03 33			jsr SYSTEM.RANDOM.@010180000
  7098 4F64 B5 96			lda :STACKORIGIN,x
  7099 4F66 18 6D 9B 9D			add SYSTEM.RANDOM.@010180000.RESULT
  7100 4F6A 8D 3A A0			sta ANGLE
  7101 4F6D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7102 4F6F 69 00			adc #$00
  7103 4F71 8D 3B A0			sta ANGLE+1
  7104 4F74 CA				dex
  7105
  7106 				; optimize OK (service.pas), line = 1274
  7107
  7108 4F75 A9 A0			lda #$A0
  7109 4F77 8D 99 9F			sta MIN.A
  7110 4F7A A9 00			lda #$00
  7111 4F7C 8D 9A 9F			sta MIN.A+1
  7112 4F7F AD 3A A0			lda ANGLE
  7113 4F82 8D 9B 9F			sta MIN.B
  7114 4F85 AD 3B A0			lda ANGLE+1
  7115 4F88 8D 9C 9F			sta MIN.B+1
  7116 4F8B 20 7F 3C			jsr MIN
  7117 4F8E A9 78			lda #$78
  7118 4F90 8D 93 9F			sta MAX.A
  7119 4F93 A9 00			lda #$00
  7120 4F95 8D 94 9F			sta MAX.A+1
  7121 4F98 AD 9D 9F			lda MIN.RESULT
  7122 4F9B 8D 95 9F			sta MAX.B
  7123 4F9E AD 9E 9F			lda MIN.RESULT+1
  7124 4FA1 8D 96 9F			sta MAX.B+1
  7125 4FA4 20 54 3C			jsr MAX
  7126 4FA7 AD 2F A0			lda BALL
  7127 4FAA 8D F3 9F			sta SET_BALL_DIRECTION.BALL
  7128 4FAD AD 30 A0			lda BALL+1
  7129 4FB0 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
  7130 4FB3 AD 97 9F			lda MAX.RESULT
  7131 4FB6 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
  7132 4FB9 AD 98 9F			lda MAX.RESULT+1
  7133 4FBC 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
  7134 4FBF 20 A6 46			jsr SET_BALL_DIRECTION
  7135
  7136 				; optimize OK (service.pas), line = 1279
  7137
  7138 4FC2 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  7139 4FCC A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7140 4FCE B1 84			lda (:bp2),y
  7141 4FD0 8D E1 9F			sta SET_BALL_SPEED.SPEED
  7142 4FD3 C8				iny
  7143 4FD4 B1 84			lda (:bp2),y
  7144 4FD6 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
  7145 4FD9 AD 2F A0			lda BALL
  7146 4FDC 8D DD 9F			sta SET_BALL_SPEED.BALL
  7147 4FDF AD 30 A0			lda BALL+1
  7148 4FE2 8D DE 9F			sta SET_BALL_SPEED.BALL+1
  7149 4FE5 20 C3 44			jsr SET_BALL_SPEED
  7150 4FE8			l_0E5F
  7151
  7152 				; optimize OK (service.pas), line = 1285
  7153
  7154 4FE8 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  7155 4FF2 A0 00			ldy #BALL.X-DATAORIGIN
  7156 4FF4 B1 84			lda (:bp2),y
  7157 4FF6 85 9F			sta :STACKORIGIN+9
  7158 4FF8 C8				iny
  7159 4FF9 AD D8 9E			lda VAUS.X
  7160 4FFC 18 6D E0 9E			add VAUS.WIDTH
  7161 5000 85 A0			sta :STACKORIGIN+10
  7162 5002 A9 00			lda #$00
  7163 5004 69 00			adc #$00
  7164 5006 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7165 5008 A5 A0			lda :STACKORIGIN+10
  7166 500A 38 E9 0A			sub #$0A
  7167 500D 85 A0			sta :STACKORIGIN+10
  7168 500F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7169 5011 E9 00			sbc #$00
  7170 5013 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7171 5015 A5 A0			lda :STACKORIGIN+10
  7172 5017 C5 9F			cmp :STACKORIGIN+9
  7173 5019 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7174 501B F1 84			sbc (:bp2),y
  7175 501D 50 02			svc
  7176 501F 49 80			eor #$80
  7177 5021 30 03 4C E4 50		jpl l_0EA0
  7178
  7179 				; optimize OK (service.pas), line = 1287
  7180
  7181 5026 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7182 5028 A9 00			lda #$00
  7183 502A 38 F1 84			sub (:bp2),y
  7184 502D 85 9F			sta :STACKORIGIN+9
  7185 502F C8				iny
  7186 5030 A9 00			lda #$00
  7187 5032 F1 84			sbc (:bp2),y
  7188 5034 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7189 5036 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7190 5038 A5 9F			lda :STACKORIGIN+9
  7191 503A 91 84			sta (:bp2),y
  7192 503C C8				iny
  7193 503D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7194 503F 91 84			sta (:bp2),y
  7195
  7196 				; optimize OK (service.pas), line = 1288
  7197
  7198 5041 AD 2F A0			lda BALL
  7199 5044 8D FD 9F			sta GET_BALL_DIRECTION.BALL
  7200 5047 AD 30 A0			lda BALL+1
  7201 504A 8D FE 9F			sta GET_BALL_DIRECTION.BALL+1
  7202 504D 20 89 48			jsr GET_BALL_DIRECTION
  7203 5050 E8				inx
  7204 5051 AD 01 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7205 5056 AD 02 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7206 505B A9 1E			lda #$1E
  7207 505D 20 03 33			jsr SYSTEM.RANDOM.@010180000
  7208 5060 B5 96			lda :STACKORIGIN,x
  7209 5062 38 ED 9B 9D			sub SYSTEM.RANDOM.@010180000.RESULT
  7210 5066 8D 3A A0			sta ANGLE
  7211 5069 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7212 506B E9 00			sbc #$00
  7213 506D 8D 3B A0			sta ANGLE+1
  7214 5070 CA				dex
  7215
  7216 				; optimize OK (service.pas), line = 1289
  7217
  7218 5071 A9 14			lda #$14
  7219 5073 8D 93 9F			sta MAX.A
  7220 5076 A9 00			lda #$00
  7221 5078 8D 94 9F			sta MAX.A+1
  7222 507B AD 3A A0			lda ANGLE
  7223 507E 8D 95 9F			sta MAX.B
  7224 5081 AD 3B A0			lda ANGLE+1
  7225 5084 8D 96 9F			sta MAX.B+1
  7226 5087 20 54 3C			jsr MAX
  7227 508A A9 3C			lda #$3C
  7228 508C 8D 99 9F			sta MIN.A
  7229 508F A9 00			lda #$00
  7230 5091 8D 9A 9F			sta MIN.A+1
  7231 5094 AD 97 9F			lda MAX.RESULT
  7232 5097 8D 9B 9F			sta MIN.B
  7233 509A AD 98 9F			lda MAX.RESULT+1
  7234 509D 8D 9C 9F			sta MIN.B+1
  7235 50A0 20 7F 3C			jsr MIN
  7236 50A3 AD 2F A0			lda BALL
  7237 50A6 8D F3 9F			sta SET_BALL_DIRECTION.BALL
  7238 50A9 AD 30 A0			lda BALL+1
  7239 50AC 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
  7240 50AF AD 9D 9F			lda MIN.RESULT
  7241 50B2 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
  7242 50B5 AD 9E 9F			lda MIN.RESULT+1
  7243 50B8 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
  7244 50BB 20 A6 46			jsr SET_BALL_DIRECTION
  7245
  7246 				; optimize OK (service.pas), line = 1290
  7247
  7248 50BE AC 2F A0 84 84 AC + 	mwy BALL :bp2
  7249 50C8 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7250 50CA B1 84			lda (:bp2),y
  7251 50CC 8D E1 9F			sta SET_BALL_SPEED.SPEED
  7252 50CF C8				iny
  7253 50D0 B1 84			lda (:bp2),y
  7254 50D2 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
  7255 50D5 AD 2F A0			lda BALL
  7256 50D8 8D DD 9F			sta SET_BALL_SPEED.BALL
  7257 50DB AD 30 A0			lda BALL+1
  7258 50DE 8D DE 9F			sta SET_BALL_SPEED.BALL+1
  7259 50E1 20 C3 44			jsr SET_BALL_SPEED
  7260 50E4			l_0EA0
  7261 50E4			l_0E0B
  7262 50E4			l_0DDC
  7263
  7264 				; optimize OK (service.pas), line = 1302
  7265
  7266 50E4 AC 2F A0 84 84 AC + 	mwy BALL :bp2
  7267 50EE A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7268 50F0 B1 84			lda (:bp2),y
  7269 50F2 85 9F			sta :STACKORIGIN+9
  7270 50F4 C8				iny
  7271 50F5 B1 84			lda (:bp2),y
  7272 50F7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7273 50F9 A0 01			ldy #1
  7274 50FB A5 9F			lda :STACKORIGIN+9
  7275 50FD C9 B9			cmp #$B9
  7276 50FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7277 5101 E9 00			sbc #$00
  7278 5103 50 02			svc
  7279 5105 49 80			eor #$80
  7280 5107 10 01			bpl @+
  7281 5109 88				dey
  7282 				@
  7283 510A 84 9F			sty :STACKORIGIN+9
  7284 510C A0 02			ldy #BALL.Y-DATAORIGIN
  7285 510E B1 84			lda (:bp2),y
  7286 5110 85 A0			sta :STACKORIGIN+10
  7287 5112 C8				iny
  7288 5113 B1 84			lda (:bp2),y
  7289 5115 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7290 5117 A0 01			ldy #1
  7291 5119 A5 A0			lda :STACKORIGIN+10
  7292 511B C9 C9			cmp #$C9
  7293 511D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7294 511F E9 00			sbc #$00
  7295 5121 50 02			svc
  7296 5123 49 80			eor #$80
  7297 5125 10 01			bpl @+
  7298 5127 88				dey
  7299 				@
  7300 5128 98				tya
  7301 5129 25 9F			and :STACKORIGIN+9
  7302 512B 85 9F			sta :STACKORIGIN+9
  7303 512D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7304 512F B1 84			lda (:bp2),y
  7305 5131 85 A0			sta :STACKORIGIN+10
  7306 5133 C8				iny
  7307 5134 B1 84			lda (:bp2),y
  7308 5136 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7309 5138 A0 01			ldy #1
  7310 513A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7311 513C 30 04			bmi @+
  7312 513E 05 A0			ora :STACKORIGIN+10
  7313 5140 D0 01			sne
  7314 				@
  7315 5142 88				dey
  7316 				@
  7317 5143 98				tya
  7318 5144 25 9F			and :STACKORIGIN+9
  7319 5146 F0 15			jeq l_0EEF
  7320
  7321 				; optimize OK (service.pas), line = 1304
  7322
  7323 5148 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7324 514A A9 00			lda #$00
  7325 514C 91 84			sta (:bp2),y
  7326
  7327 				; optimize OK (service.pas), line = 1306
  7328
  7329 514E AD 2F A0			lda BALL
  7330 5151 8D D3 9F			sta REMOVE_BALL.BALL
  7331 5154 AD 30 A0			lda BALL+1
  7332 5157 8D D4 9F			sta REMOVE_BALL.BALL+1
  7333 515A 20 60 43			jsr REMOVE_BALL
  7334 515D			l_0EEF
  7335
  7336 				; ------------------------------------------------------------
  7337
  7338 = A02F			BALL	= DATAORIGIN+$02CB
  7339 = 9D64			BALL.X	= DATAORIGIN+$0000
  7340 = 9D66			BALL.Y	= DATAORIGIN+$0002
  7341 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
  7342 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
  7343 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
  7344 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
  7345 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
  7346 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
  7347 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
  7348 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
  7349 = 9D78			BALL.SBD	= DATAORIGIN+$0014
  7350 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
  7351 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
  7352 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
  7353 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
  7354 = 9D7F			BALL.STM	= DATAORIGIN+$001B
  7355 = A033			B0	= DATAORIGIN+$02CF
  7356 = A034			B1	= DATAORIGIN+$02D0
  7357 = A035			B2	= DATAORIGIN+$02D1
  7358 = A036			X	= DATAORIGIN+$02D2
  7359 = A038			Y	= DATAORIGIN+$02D4
  7360 = A03A			ANGLE	= DATAORIGIN+$02D6
  7361
  7362 = A02F			@VarData	= BALL
  7363 = 000B			@VarDataSize	= 11
  7364
  7365 515D			@exit
  7366 					.ifdef @new
  7367 					lda <@VarData
  7368 					sta :ztmp
  7369 					lda >@VarData
  7370 					ldy #@VarDataSize-1
  7371 					jmp @FreeMem
  7372 					els
  7373 515D 60				rts						; ret
  7374 					eif
  7375 				.endl
  7376
  7377 515E			.local	MODIFY_VAUS					; PROCEDURE
  7378
  7379 				; optimize OK (service.pas), line = 1313
  7380
  7381 515E AD E0 9E			lda VAUS.WIDTH
  7382 5161 8D DE 9E			sta VAUS.OLDLEN
  7383 5164 A9 00			lda #$00
  7384 5166 8D DF 9E			sta VAUS.OLDLEN+1
  7385
  7386 				; optimize OK (service.pas), line = 1314
  7387
  7388 5169 AD 68 9E			lda PLAYVAUS.WIDTH
  7389 516C 8D E0 9E			sta VAUS.WIDTH
  7390
  7391 				; optimize OK (service.pas), line = 1315
  7392
  7393 516F AD 6A 9E			lda PLAYVAUS.HEIGHT
  7394 5172 8D E1 9E			sta VAUS.HEIGHT
  7395
  7396 5175			@exit
  7397 					.ifdef @new
  7398 					lda <@VarData
  7399 					sta :ztmp
  7400 					lda >@VarData
  7401 					ldy #@VarDataSize-1
  7402 					jmp @FreeMem
  7403 					els
  7404 5175 60				rts						; ret
  7405 					eif
  7406 				.endl
  7407
  7408 5176			.local	SET_VAUS					; PROCEDURE
  7409
  7410 				; optimize OK (service.pas), line = 1320
  7411
  7412 5176 A9 5F			lda #$5F
  7413 5178 8D D8 9E			sta VAUS.X
  7414
  7415 				; optimize OK (service.pas), line = 1321
  7416
  7417 517B A9 B8			lda #$B8
  7418 517D 8D D9 9E			sta VAUS.Y
  7419
  7420 				; optimize OK (service.pas), line = 1323
  7421
  7422 5180 A9 FF			lda #$FF
  7423 5182 8D DA 9E			sta VAUS.OLDX
  7424 5185 8D DB 9E			sta VAUS.OLDX+1
  7425
  7426 				; optimize OK (service.pas), line = 1324
  7427
  7428 5188 8D DC 9E			sta VAUS.OLDY
  7429 518B 8D DD 9E			sta VAUS.OLDY+1
  7430
  7431 				; optimize OK (service.pas), line = 1325
  7432
  7433 518E A9 00			lda #$00
  7434 5190 8D E3 9E			sta VAUS.IFLASH
  7435
  7436 				; optimize OK (service.pas), line = 1329
  7437
  7438 5193 8D E2 9E			sta VAUS.FLASH
  7439
  7440 				; optimize OK (service.pas), line = 1333
  7441
  7442 5196 AD 68 9E			lda PLAYVAUS.WIDTH
  7443 5199 8D E0 9E			sta VAUS.WIDTH
  7444
  7445 				; optimize OK (service.pas), line = 1334
  7446
  7447 519C AD 6A 9E			lda PLAYVAUS.HEIGHT
  7448 519F 8D E1 9E			sta VAUS.HEIGHT
  7449
  7450 				; optimize OK (service.pas), line = 1335
  7451
  7452 51A2 AD E0 9E			lda VAUS.WIDTH
  7453 51A5 8D DE 9E			sta VAUS.OLDLEN
  7454 51A8 A9 00			lda #$00
  7455 51AA 8D DF 9E			sta VAUS.OLDLEN+1
  7456
  7457 				; optimize OK (service.pas), line = 1336
  7458
  7459 51AD A9 FF			lda #$FF
  7460 51AF 8D E4 9E			sta VAUS.LETTER
  7461
  7462 51B2			@exit
  7463 					.ifdef @new
  7464 					lda <@VarData
  7465 					sta :ztmp
  7466 					lda >@VarData
  7467 					ldy #@VarDataSize-1
  7468 					jmp @FreeMem
  7469 					els
  7470 51B2 60				rts						; ret
  7471 					eif
  7472 				.endl
  7473
  7474 51B3			.local	START_VAUS					; PROCEDURE
  7475
  7476 				; optimize OK (service.pas), line = 1345
  7477
  7478 51B3 A9 5F			lda #$5F
  7479 51B5 8D D8 9E			sta VAUS.X
  7480
  7481 				; optimize OK (service.pas), line = 1346
  7482
  7483 51B8 A9 B8			lda #$B8
  7484 51BA 8D D9 9E			sta VAUS.Y
  7485
  7486 51BD			@exit
  7487 					.ifdef @new
  7488 					lda <@VarData
  7489 					sta :ztmp
  7490 					lda >@VarData
  7491 					ldy #@VarDataSize-1
  7492 					jmp @FreeMem
  7493 					els
  7494 51BD 60				rts						; ret
  7495 					eif
  7496 				.endl
  7497
  7498 51BE			.local	REMOVE_VAUS					; PROCEDURE
  7499
  7500 				; optimize OK (service.pas), line = 1360
  7501
  7502 51BE AC DC 9E			ldy VAUS.OLDY
  7503 51C1 AD DA 9E			lda VAUS.OLDX
  7504 51C4 18 79 00 C0			add adr.ROW,y
  7505 51C8 8D 57 9F			sta HLP
  7506 51CB AD DB 9E			lda VAUS.OLDX+1
  7507 51CE 79 00 C1			adc adr.ROW+256,y
  7508 51D1 8D 58 9F			sta HLP+1
  7509
  7510 				; optimize OK (service.pas), line = 1362
  7511
  7512 51D4 AD 57 9F			lda HLP
  7513 51D7 8D 66 9F			sta BLITBOX.DST
  7514 51DA A9 50			lda #$50
  7515 51DC 18 6D 58 9F			add HLP+1
  7516 51E0 8D 67 9F			sta BLITBOX.DST+1
  7517 51E3 A9 00			lda #$00
  7518 51E5 69 00			adc #$00
  7519 51E7 8D 68 9F			sta BLITBOX.DST+2
  7520 51EA A9 00			lda #$00
  7521 51EC 69 00			adc #$00
  7522 51EE 8D 69 9F			sta BLITBOX.DST+3
  7523 51F1 AD 64 9E			lda PLAYSCREEN.OFS
  7524 51F4 18 6D 57 9F			add HLP
  7525 51F8 8D 62 9F			sta BLITBOX.SRC
  7526 51FB AD 65 9E			lda PLAYSCREEN.OFS+1
  7527 51FE 6D 58 9F			adc HLP+1
  7528 5201 8D 63 9F			sta BLITBOX.SRC+1
  7529 5204 AD 66 9E			lda PLAYSCREEN.OFS+2
  7530 5207 69 00			adc #$00
  7531 5209 8D 64 9F			sta BLITBOX.SRC+2
  7532 520C AD 67 9E			lda PLAYSCREEN.OFS+3
  7533 520F 69 00			adc #$00
  7534 5211 8D 65 9F			sta BLITBOX.SRC+3
  7535 5214 AD DE 9E			lda VAUS.OLDLEN
  7536 5217 8D 6A 9F			sta BLITBOX.W
  7537 521A AD DF 9E			lda VAUS.OLDLEN+1
  7538 521D 8D 6B 9F			sta BLITBOX.W+1
  7539 5220 AD E1 9E			lda VAUS.HEIGHT
  7540 5223 8D 6C 9F			sta BLITBOX.H
  7541 5226 20 58 3A			jsr BLITBOX
  7542
  7543 				; optimize OK (service.pas), line = 1370
  7544
  7545 5229 AD E0 9E			lda VAUS.WIDTH
  7546 522C 8D DE 9E			sta VAUS.OLDLEN
  7547 522F A9 00			lda #$00
  7548 5231 8D DF 9E			sta VAUS.OLDLEN+1
  7549
  7550 5234			@exit
  7551 					.ifdef @new
  7552 					lda <@VarData
  7553 					sta :ztmp
  7554 					lda >@VarData
  7555 					ldy #@VarDataSize-1
  7556 					jmp @FreeMem
  7557 					els
  7558 5234 60				rts						; ret
  7559 					eif
  7560 				.endl
  7561
  7562 5235			.local	PLACE_VAUS					; PROCEDURE
  7563
  7564 				; optimize FAIL (0, service.pas), line = 1379
  7565
  7566 5235 EE E3 9E			inc VAUS.IFLASH
  7567
  7568 				; optimize OK (service.pas), line = 1381
  7569
  7570 5238 AD E3 9E			lda VAUS.IFLASH
  7571 523B C9 0B			cmp #$0B
  7572 523D 90 08			jcc l_0F8B
  7573
  7574 				; optimize FAIL (0, service.pas), line = 1383
  7575
  7576 523F EE E2 9E			inc VAUS.FLASH
  7577
  7578 				; optimize OK (service.pas), line = 1384
  7579
  7580 5242 A9 00			lda #$00
  7581 5244 8D E3 9E			sta VAUS.IFLASH
  7582 5247			l_0F8B
  7583
  7584 				; optimize OK (service.pas), line = 1387
  7585
  7586 5247 AD E2 9E			lda VAUS.FLASH
  7587 524A C9 0B			cmp #$0B
  7588 524C 90 05			jcc l_0FA8
  7589 524E A9 00			lda #$00
  7590 5250 8D E2 9E			sta VAUS.FLASH
  7591 5253			l_0FA8
  7592
  7593 				; optimize OK (service.pas), line = 1397
  7594
  7595 5253 A9 00			lda #$00
  7596 5255 8D 57 9F			sta HLP
  7597 5258 8D 58 9F			sta HLP+1
  7598
  7599 				; optimize OK (service.pas), line = 1399
  7600
  7601 525B 8D 3C A0			sta Y
  7602 525E AC E1 9E			ldy VAUS.HEIGHT
  7603 5261 88				dey
  7604 5262 8C 66 52			sty @FORTMP_0FBF_0
  7605
  7606 5265			l_0FC2
  7607 				; --- ForToDoCondition
  7608 5265 A9 00			lda @FORTMP_0FBF_0::#$00
  7609 5267 CD 3C A0			cmp Y
  7610 526A B0 03 4C A8 53		jcc l_0FD0
  7611
  7612 				; optimize OK (service.pas), line = 1405
  7613
  7614 526F AD 3C A0			lda Y
  7615 5272 18 6D D9 9E			add VAUS.Y
  7616 5276 A8				tay
  7617 5277 AD D8 9E			lda VAUS.X
  7618 527A 18 79 00 C0			add adr.ROW,y
  7619 527E 8D 71 9F			sta BLITZERO.DST
  7620 5281 A9 50			lda #$50
  7621 5283 79 00 C1			adc adr.ROW+256,y
  7622 5286 8D 72 9F			sta BLITZERO.DST+1
  7623 5289 A9 00			lda #$00
  7624 528B 69 00			adc #$00
  7625 528D 8D 73 9F			sta BLITZERO.DST+2
  7626 5290 A9 00			lda #$00
  7627 5292 69 00			adc #$00
  7628 5294 8D 74 9F			sta BLITZERO.DST+3
  7629 5297 AD 6C 9E			lda PLAYVAUS.OFS
  7630 529A 18 6D 57 9F			add HLP
  7631 529E 8D 6D 9F			sta BLITZERO.SRC
  7632 52A1 AD 6D 9E			lda PLAYVAUS.OFS+1
  7633 52A4 6D 58 9F			adc HLP+1
  7634 52A7 8D 6E 9F			sta BLITZERO.SRC+1
  7635 52AA AD 6E 9E			lda PLAYVAUS.OFS+2
  7636 52AD 69 00			adc #$00
  7637 52AF 8D 6F 9F			sta BLITZERO.SRC+2
  7638 52B2 AD 6F 9E			lda PLAYVAUS.OFS+3
  7639 52B5 69 00			adc #$00
  7640 52B7 8D 70 9F			sta BLITZERO.SRC+3
  7641 52BA AD E0 9E			lda VAUS.WIDTH
  7642 52BD 8D 75 9F			sta BLITZERO.W
  7643 52C0 A9 00			lda #$00
  7644 52C2 8D 76 9F			sta BLITZERO.W+1
  7645 52C5 A9 01			lda #$01
  7646 52C7 8D 77 9F			sta BLITZERO.H
  7647 52CA 20 D9 3A			jsr BLITZERO
  7648
  7649 				; optimize OK (service.pas), line = 1407
  7650
  7651 52CD AD 3C A0			lda Y
  7652 52D0 C9 02			cmp #$02
  7653 52D2 B0 03 4C 91 53		jcc l_1014
  7654 52D7 AD E1 9E			lda VAUS.HEIGHT
  7655 52DA E9 02			sbc #$02
  7656 52DC 85 A1			sta :STACKORIGIN+11
  7657 52DE A9 00			lda #$00
  7658 52E0 E9 00			sbc #$00
  7659 52E2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7660 52E4 AD 3C A0			lda Y
  7661 52E7 C5 A1			cmp :STACKORIGIN+11
  7662 52E9 A9 00			lda #$00
  7663 52EB E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7664 52ED 50 02			svc
  7665 52EF 49 80			eor #$80
  7666 52F1 30 03 4C 91 53		jpl l_1014
  7667
  7668 				; optimize OK (service.pas), line = 1410
  7669
  7670 52F6 AC E2 9E			ldy VAUS.FLASH
  7671 52F9 B9 5E 20			lda adr.FLASH,y
  7672 52FC 8D 8B 9F			sta PUTBYTE.V
  7673 52FF AD 3C A0			lda Y
  7674 5302 18 6D D9 9E			add VAUS.Y
  7675 5306 A8				tay
  7676 5307 AD D8 9E			lda VAUS.X
  7677 530A 18 79 00 C0			add adr.ROW,y
  7678 530E 8D 87 9F			sta PUTBYTE.DST
  7679 5311 A9 50			lda #$50
  7680 5313 79 00 C1			adc adr.ROW+256,y
  7681 5316 8D 88 9F			sta PUTBYTE.DST+1
  7682 5319 A9 00			lda #$00
  7683 531B 69 00			adc #$00
  7684 531D 8D 89 9F			sta PUTBYTE.DST+2
  7685 5320 A9 00			lda #$00
  7686 5322 69 00			adc #$00
  7687 5324 8D 8A 9F			sta PUTBYTE.DST+3
  7688 5327 20 02 3C			jsr PUTBYTE
  7689
  7690 				; optimize OK (service.pas), line = 1413
  7691
  7692 532A AC E2 9E			ldy VAUS.FLASH
  7693 532D B9 5E 20			lda adr.FLASH,y
  7694 5330 8D 8B 9F			sta PUTBYTE.V
  7695 5333 AD D8 9E			lda VAUS.X
  7696 5336 18 6D E0 9E			add VAUS.WIDTH
  7697 533A 85 A0			sta :STACKORIGIN+10
  7698 533C A9 50			lda #$50
  7699 533E 69 00			adc #$00
  7700 5340 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7701 5342 A9 00			lda #$00
  7702 5344 69 00			adc #$00
  7703 5346 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7704 5348 A9 00			lda #$00
  7705 534A 69 00			adc #$00
  7706 534C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7707 534E A5 A0			lda :STACKORIGIN+10
  7708 5350 38 E9 01			sub #$01
  7709 5353 85 A0			sta :STACKORIGIN+10
  7710 5355 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7711 5357 E9 00			sbc #$00
  7712 5359 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7713 535B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7714 535D E9 00			sbc #$00
  7715 535F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7716 5361 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7717 5363 E9 00			sbc #$00
  7718 5365 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7719 5367 AD 3C A0			lda Y
  7720 536A 18 6D D9 9E			add VAUS.Y
  7721 536E A8				tay
  7722 536F A5 A0			lda :STACKORIGIN+10
  7723 5371 18 79 00 C0			add adr.ROW,y
  7724 5375 8D 87 9F			sta PUTBYTE.DST
  7725 5378 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7726 537A 79 00 C1			adc adr.ROW+256,y
  7727 537D 8D 88 9F			sta PUTBYTE.DST+1
  7728 5380 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7729 5382 69 00			adc #$00
  7730 5384 8D 89 9F			sta PUTBYTE.DST+2
  7731 5387 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7732 5389 69 00			adc #$00
  7733 538B 8D 8A 9F			sta PUTBYTE.DST+3
  7734 538E 20 02 3C			jsr PUTBYTE
  7735 5391			l_1014
  7736
  7737 				; optimize OK (service.pas), line = 1416
  7738
  7739 5391 AD 57 9F			lda HLP
  7740 5394 18 6D E0 9E			add VAUS.WIDTH
  7741 5398 8D 57 9F			sta HLP
  7742 539B 90 03			scc
  7743 539D EE 58 9F			inc HLP+1
  7744
  7745 				; --- ForToDoEpilog
  7746 53A0 EE 3C A0			inc Y
  7747 53A3 F0 03 4C 65 52		jne l_0FC2
  7748 53A8			l_0FD0
  7749
  7750 				; ------------------------------------------------------------
  7751
  7752 = A03C			Y	= DATAORIGIN+$02D8
  7753
  7754 = A03C			@VarData	= Y
  7755 = 0001			@VarDataSize	= 1
  7756
  7757 53A8			@exit
  7758 					.ifdef @new
  7759 					lda <@VarData
  7760 					sta :ztmp
  7761 					lda >@VarData
  7762 					ldy #@VarDataSize-1
  7763 					jmp @FreeMem
  7764 					els
  7765 53A8 60				rts						; ret
  7766 					eif
  7767 				.endl
  7768
  7769 53A9			.local	MOVE_VAUS					; PROCEDURE
  7770
  7771 				; optimize OK (service.pas), line = 1427
  7772
  7773 53A9 A0 01			ldy #1
  7774 53AB AD DB 9E			lda VAUS.OLDX+1
  7775 53AE C9 FF			cmp #$FF
  7776 53B0 D0 05			bne @+
  7777 53B2 AD DA 9E			lda VAUS.OLDX
  7778 53B5 C9 FF			cmp #$FF
  7779 				@
  7780 53B7 D0 01			bne @+
  7781 53B9 88				dey
  7782 				@
  7783 53BA 84 9F			sty :STACKORIGIN+9
  7784 53BC A0 01			ldy #1
  7785 53BE AD DB 9E			lda VAUS.OLDX+1
  7786 53C1 C9 00			cmp #$00
  7787 53C3 D0 06			bne @+
  7788 53C5 AD DA 9E			lda VAUS.OLDX
  7789 53C8 CD D8 9E			cmp VAUS.X
  7790 				@
  7791 53CB D0 01			bne @+
  7792 53CD 88				dey
  7793 				@
  7794 53CE 98				tya
  7795 53CF 25 9F			and :STACKORIGIN+9
  7796 53D1 85 9F			sta :STACKORIGIN+9
  7797 53D3 A0 01			ldy #1
  7798 53D5 A9 00			lda #$00
  7799 53D7 CD DF 9E			cmp VAUS.OLDLEN+1
  7800 53DA D0 06			bne @+
  7801 53DC AD E0 9E			lda VAUS.WIDTH
  7802 53DF CD DE 9E			cmp VAUS.OLDLEN
  7803 				@
  7804 53E2 D0 01			bne @+
  7805 53E4 88				dey
  7806 				@
  7807 53E5 98				tya
  7808 53E6 05 9F			ora :STACKORIGIN+9
  7809 53E8 F0 03			jeq l_1090
  7810
  7811 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1428
  7812
  7813 53EA 20 BE 51			jsr REMOVE_VAUS
  7814 53ED			l_1090
  7815
  7816 				; optimize OK (service.pas), line = 1430
  7817
  7818 53ED AD D8 9E			lda VAUS.X
  7819 53F0 8D DA 9E			sta VAUS.OLDX
  7820 53F3 A9 00			lda #$00
  7821 53F5 8D DB 9E			sta VAUS.OLDX+1
  7822
  7823 				; optimize OK (service.pas), line = 1431
  7824
  7825 53F8 AD D9 9E			lda VAUS.Y
  7826 53FB 8D DC 9E			sta VAUS.OLDY
  7827 53FE A9 00			lda #$00
  7828 5400 8D DD 9E			sta VAUS.OLDY+1
  7829
  7830 				; optimize OK (service.pas), line = 1438
  7831
  7832 5403 A9 D8			lda #$D8
  7833 5405 38 ED E0 9E			sub VAUS.WIDTH
  7834 5409 8D 9B 9F			sta MIN.B
  7835 540C A9 00			lda #$00
  7836 540E E9 00			sbc #$00
  7837 5410 8D 9C 9F			sta MIN.B+1
  7838 5413 AD 3E A0			lda X
  7839 5416 8D 99 9F			sta MIN.A
  7840 5419 AD 3F A0			lda X+1
  7841 541C 8D 9A 9F			sta MIN.A+1
  7842 541F 20 7F 3C			jsr MIN
  7843 5422 A9 0A			lda #$0A
  7844 5424 8D 93 9F			sta MAX.A
  7845 5427 A9 00			lda #$00
  7846 5429 8D 94 9F			sta MAX.A+1
  7847 542C AD 9D 9F			lda MIN.RESULT
  7848 542F 8D 95 9F			sta MAX.B
  7849 5432 AD 9E 9F			lda MIN.RESULT+1
  7850 5435 8D 96 9F			sta MAX.B+1
  7851 5438 20 54 3C			jsr MAX
  7852 543B AD 97 9F			lda MAX.RESULT
  7853 543E 8D D8 9E			sta VAUS.X
  7854
  7855 				; optimize OK (service.pas), line = 1439
  7856
  7857 5441 A9 C8			lda #$C8
  7858 5443 38 ED E1 9E			sub VAUS.HEIGHT
  7859 5447 8D 9B 9F			sta MIN.B
  7860 544A A9 00			lda #$00
  7861 544C E9 00			sbc #$00
  7862 544E 8D 9C 9F			sta MIN.B+1
  7863 5451 AD 40 A0			lda Y
  7864 5454 8D 99 9F			sta MIN.A
  7865 5457 AD 41 A0			lda Y+1
  7866 545A 8D 9A 9F			sta MIN.A+1
  7867 545D 20 7F 3C			jsr MIN
  7868 5460 A9 0C			lda #$0C
  7869 5462 8D 93 9F			sta MAX.A
  7870 5465 A9 00			lda #$00
  7871 5467 8D 94 9F			sta MAX.A+1
  7872 546A AD 9D 9F			lda MIN.RESULT
  7873 546D 8D 95 9F			sta MAX.B
  7874 5470 AD 9E 9F			lda MIN.RESULT+1
  7875 5473 8D 96 9F			sta MAX.B+1
  7876 5476 20 54 3C			jsr MAX
  7877 5479 AD 97 9F			lda MAX.RESULT
  7878 547C 8D D9 9E			sta VAUS.Y
  7879
  7880 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1441
  7881
  7882 547F 20 35 52			jsr PLACE_VAUS
  7883
  7884 				; ------------------------------------------------------------
  7885
  7886 = A03E			X	= DATAORIGIN+$02DA
  7887 = A040			Y	= DATAORIGIN+$02DC
  7888
  7889 = A03E			@VarData	= X
  7890 = 0004			@VarDataSize	= 4
  7891
  7892 5482			@exit
  7893 					.ifdef @new
  7894 					lda <@VarData
  7895 					sta :ztmp
  7896 					lda >@VarData
  7897 					ldy #@VarDataSize-1
  7898 					jmp @FreeMem
  7899 					els
  7900 5482 60				rts						; ret
  7901 					eif
  7902 				.endl
  7903
  7904 5483			.local	REMOVE_BLOCK					; PROCEDURE
  7905
  7906 				; optimize OK (service.pas), line = 1456
  7907
  7908 5483 AD 42 A0			lda XA
  7909 5486 85 9F			sta :STACKORIGIN+9
  7910 5488 A9 00			lda #$00
  7911 548A 06 9F			asl :STACKORIGIN+9
  7912 548C 2A				rol @
  7913 548D 06 9F			asl :STACKORIGIN+9
  7914 548F 2A				rol @
  7915 5490 06 9F			asl :STACKORIGIN+9
  7916 5492 2A				rol @
  7917 5493 06 9F			asl :STACKORIGIN+9
  7918 5495 2A				rol @
  7919 5496 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7920 5498 A5 9F			lda :STACKORIGIN+9
  7921 549A 18 69 09			add #$09
  7922 549D 8D 47 A0			sta XS
  7923 54A0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7924 54A2 69 00			adc #$00
  7925 54A4 8D 48 A0			sta XS+1
  7926
  7927 				; optimize OK (service.pas), line = 1457
  7928
  7929 54A7 AD 43 A0			lda YA
  7930 54AA 85 9F			sta :STACKORIGIN+9
  7931 54AC A9 00			lda #$00
  7932 54AE 06 9F			asl :STACKORIGIN+9
  7933 54B0 2A				rol @
  7934 54B1 06 9F			asl :STACKORIGIN+9
  7935 54B3 2A				rol @
  7936 54B4 06 9F			asl :STACKORIGIN+9
  7937 54B6 2A				rol @
  7938 54B7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7939 54B9 A5 9F			lda :STACKORIGIN+9
  7940 54BB 18 69 16			add #$16
  7941 54BE 8D 49 A0			sta YS
  7942 54C1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7943 54C3 69 00			adc #$00
  7944 54C5 8D 4A A0			sta YS+1
  7945
  7946 				; optimize OK (service.pas), line = 1459
  7947
  7948 54C8 A9 00			lda #$00
  7949 54CA 8D 45 A0			sta Y
  7950
  7951 54CD			l_10E8
  7952 				; --- ForToDoCondition
  7953 54CD AD 45 A0			lda Y
  7954 54D0 C9 08			cmp #$08
  7955 54D2 90 03 4C 4C 56		jcs l_10F6
  7956
  7957 				; optimize OK (service.pas), line = 1461
  7958
  7959 54D7 AD 49 A0			lda YS
  7960 54DA 6D 45 A0			adc Y
  7961 54DD A8				tay
  7962 54DE B9 00 C3			lda adr.MODY,y
  7963 54E1 85 86			sta :eax
  7964 54E3 A9 00			lda #$00
  7965 54E5 85 87			sta :eax+1
  7966 54E7 AD E5 9E			lda PATTERN.WIDTH
  7967 54EA 85 8E			sta :ecx
  7968 54EC AD E6 9E			lda PATTERN.WIDTH+1
  7969 54EF 85 8F			sta :ecx+1
  7970 					.ifdef fmulinit
  7971 					fmulu_16
  7972 					els
  7973 54F1 20 4F 23			imulCX_AL
  7974 					eif
  7975 54F4 A5 86			lda :eax
  7976 54F6 8D 4B A0			sta YH
  7977 54F9 A5 87			lda :eax+1
  7978 54FB 8D 4C A0			sta YH+1
  7979
  7980 				; optimize OK (service.pas), line = 1469
  7981
  7982 54FE AD 45 A0			lda Y
  7983 5501 18 6D 49 A0			add YS
  7984 5505 A8				tay
  7985 5506 AD 47 A0			lda XS
  7986 5509 18 79 00 C0			add adr.ROW,y
  7987 550D 8D 57 9F			sta HLP
  7988 5510 AD 48 A0			lda XS+1
  7989 5513 79 00 C1			adc adr.ROW+256,y
  7990 5516 8D 58 9F			sta HLP+1
  7991
  7992 				; optimize OK (service.pas), line = 1471
  7993
  7994 5519 A9 00			lda #$00
  7995 551B 8D 46 A0			sta I
  7996
  7997 				; optimize OK (service.pas), line = 1473
  7998
  7999 551E 8D 44 A0			sta X
  8000
  8001 5521			l_1128
  8002 				; --- ForToDoCondition
  8003 5521 AD 44 A0			lda X
  8004 5524 C9 10			cmp #$10
  8005 5526 90 03 4C F2 55		jcs l_1136
  8006
  8007 				; optimize OK (service.pas), line = 1474
  8008
  8009 552B 6D 47 A0			adc XS
  8010 552E 85 9F			sta :STACKORIGIN+9
  8011 5530 A9 00			lda #$00
  8012 5532 6D 48 A0			adc XS+1
  8013 5535 C9 00			cmp #$00
  8014 5537 D0 04			bne @+
  8015 5539 A5 9F			lda :STACKORIGIN+9
  8016 553B C9 D8			cmp #$D8
  8017 				@
  8018 553D 90 03 4C EA 55		jcs l_114D
  8019
  8020 				; optimize OK (service.pas), line = 1480
  8021
  8022 5542 AD 64 9E			lda PLAYSCREEN.OFS
  8023 5545 6D 57 9F			adc HLP
  8024 5548 85 9F			sta :STACKORIGIN+9
  8025 554A AD 65 9E			lda PLAYSCREEN.OFS+1
  8026 554D 6D 58 9F			adc HLP+1
  8027 5550 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8028 5552 AD 66 9E			lda PLAYSCREEN.OFS+2
  8029 5555 69 00			adc #$00
  8030 5557 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8031 5559 AD 67 9E			lda PLAYSCREEN.OFS+3
  8032 555C 69 00			adc #$00
  8033 555E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8034 5560 A5 9F			lda :STACKORIGIN+9
  8035 5562 18 6D 44 A0			add X
  8036 5566 8D 8C 9F			sta GETBYTE.SRC
  8037 5569 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8038 556B 69 00			adc #$00
  8039 556D 8D 8D 9F			sta GETBYTE.SRC+1
  8040 5570 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8041 5572 69 00			adc #$00
  8042 5574 8D 8E 9F			sta GETBYTE.SRC+2
  8043 5577 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8044 5579 69 00			adc #$00
  8045 557B 8D 8F 9F			sta GETBYTE.SRC+3
  8046 557E 20 2A 3C			jsr GETBYTE
  8047 5581 AD 90 9F			lda GETBYTE.RESULT
  8048 5584 29 80			and #$80
  8049 5586 8D 4E A0			sta SHADOW
  8050
  8051 				; optimize OK (service.pas), line = 1484
  8052
  8053 5589 AD 44 A0			lda X
  8054 558C 18 6D 47 A0			add XS
  8055 5590 A8				tay
  8056 5591 B9 00 C4			lda adr.MODX,y
  8057 5594 18 6D E9 9E			add PATTERN.OFS
  8058 5598 85 9F			sta :STACKORIGIN+9
  8059 559A AD EA 9E			lda PATTERN.OFS+1
  8060 559D 69 00			adc #$00
  8061 559F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8062 55A1 AD EB 9E			lda PATTERN.OFS+2
  8063 55A4 69 00			adc #$00
  8064 55A6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8065 55A8 AD EC 9E			lda PATTERN.OFS+3
  8066 55AB 69 00			adc #$00
  8067 55AD 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8068 55AF A5 9F			lda :STACKORIGIN+9
  8069 55B1 18 6D 4B A0			add YH
  8070 55B5 8D 8C 9F			sta GETBYTE.SRC
  8071 55B8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8072 55BA 6D 4C A0			adc YH+1
  8073 55BD 8D 8D 9F			sta GETBYTE.SRC+1
  8074 55C0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8075 55C2 69 00			adc #$00
  8076 55C4 8D 8E 9F			sta GETBYTE.SRC+2
  8077 55C7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8078 55C9 69 00			adc #$00
  8079 55CB 8D 8F 9F			sta GETBYTE.SRC+3
  8080 55CE 20 2A 3C			jsr GETBYTE
  8081 55D1 E8				inx
  8082 55D2 AD 90 9F			lda GETBYTE.RESULT
  8083 55D5 29 7F			and #$7F
  8084 55D7 0D 4E A0			ora SHADOW
  8085 55DA 8D 4D A0			sta CL
  8086 55DD CA				dex
  8087
  8088 				; optimize OK (service.pas), line = 1486
  8089
  8090 55DE AC 46 A0			ldy I
  8091 55E1 AD 4D A0			lda CL
  8092 55E4 99 00 C2			sta adr.TMP,y
  8093
  8094 				; optimize FAIL (0, service.pas), line = 1487
  8095
  8096 55E7 EE 46 A0			inc I
  8097 55EA			l_114D
  8098
  8099 				; --- ForToDoEpilog
  8100 55EA EE 44 A0			inc X
  8101 55ED F0 03 4C 21 55		jne l_1128
  8102 55F2			l_1136
  8103
  8104 				; optimize OK (service.pas), line = 1499
  8105
  8106 55F2 AD 57 9F			lda HLP
  8107 55F5 8D 78 9F			sta BLITTMP.DST
  8108 55F8 A9 50			lda #$50
  8109 55FA 18 6D 58 9F			add HLP+1
  8110 55FE 8D 79 9F			sta BLITTMP.DST+1
  8111 5601 A9 00			lda #$00
  8112 5603 69 00			adc #$00
  8113 5605 8D 7A 9F			sta BLITTMP.DST+2
  8114 5608 A9 00			lda #$00
  8115 560A 69 00			adc #$00
  8116 560C 8D 7B 9F			sta BLITTMP.DST+3
  8117 560F AD 46 A0			lda I
  8118 5612 8D 7C 9F			sta BLITTMP.SIZE
  8119 5615 20 57 3B			jsr BLITTMP
  8120
  8121 				; optimize OK (service.pas), line = 1500
  8122
  8123 5618 AD 64 9E			lda PLAYSCREEN.OFS
  8124 561B 18 6D 57 9F			add HLP
  8125 561F 8D 78 9F			sta BLITTMP.DST
  8126 5622 AD 65 9E			lda PLAYSCREEN.OFS+1
  8127 5625 6D 58 9F			adc HLP+1
  8128 5628 8D 79 9F			sta BLITTMP.DST+1
  8129 562B AD 66 9E			lda PLAYSCREEN.OFS+2
  8130 562E 69 00			adc #$00
  8131 5630 8D 7A 9F			sta BLITTMP.DST+2
  8132 5633 AD 67 9E			lda PLAYSCREEN.OFS+3
  8133 5636 69 00			adc #$00
  8134 5638 8D 7B 9F			sta BLITTMP.DST+3
  8135 563B AD 46 A0			lda I
  8136 563E 8D 7C 9F			sta BLITTMP.SIZE
  8137 5641 20 57 3B			jsr BLITTMP
  8138
  8139 				; --- ForToDoEpilog
  8140 5644 EE 45 A0			inc Y
  8141 5647 F0 03 4C CD 54		jne l_10E8
  8142 564C			l_10F6
  8143
  8144 				; optimize OK (service.pas), line = 1510
  8145
  8146 564C AD 49 A0			lda YS
  8147 564F 18 69 04			add #$04
  8148 5652 8D 45 A0			sta Y
  8149 5655 AD 49 A0			lda YS
  8150 5658 18 69 0C			add #$0C
  8151 565B 8D 5F 56			sta @FORTMP_11C1_0
  8152
  8153 565E			l_11C4
  8154 				; --- ForToDoCondition
  8155 565E A9 00			lda @FORTMP_11C1_0::#$00
  8156 5660 CD 45 A0			cmp Y
  8157 5663 B0 03 4C 6E 57		jcc l_11D2
  8158
  8159 				; optimize OK (service.pas), line = 1512
  8160
  8161 5668 A9 00			lda #$00
  8162 566A 8D 46 A0			sta I
  8163
  8164 				; optimize OK (service.pas), line = 1513
  8165
  8166 566D AC 45 A0			ldy Y
  8167 5670 B9 00 C0			lda adr.ROW,y
  8168 5673 8D 57 9F			sta HLP
  8169 5676 B9 00 C1			lda adr.ROW+256,y
  8170 5679 8D 58 9F			sta HLP+1
  8171
  8172 				; optimize OK (service.pas), line = 1515
  8173
  8174 567C AD 47 A0			lda XS
  8175 567F 18 69 08			add #$08
  8176 5682 8D 44 A0			sta X
  8177 5685 AD 47 A0			lda XS
  8178 5688 18 69 18			add #$18
  8179 568B 8D 8F 56			sta @FORTMP_11EE_0
  8180
  8181 568E			l_11F1
  8182 				; --- ForToDoCondition
  8183 568E A9 00			lda @FORTMP_11EE_0::#$00
  8184 5690 CD 44 A0			cmp X
  8185 5693 90 5F			jcc l_11FF
  8186
  8187 				; optimize OK (service.pas), line = 1531
  8188
  8189 5695 AD 44 A0			lda X
  8190 5698 C9 D8			cmp #$D8
  8191 569A B0 53			jcs l_1211
  8192
  8193 				; optimize OK (service.pas), line = 1535
  8194
  8195 569C AD 64 9E			lda PLAYSCREEN.OFS
  8196 569F 6D 57 9F			adc HLP
  8197 56A2 85 9F			sta :STACKORIGIN+9
  8198 56A4 AD 65 9E			lda PLAYSCREEN.OFS+1
  8199 56A7 6D 58 9F			adc HLP+1
  8200 56AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8201 56AC AD 66 9E			lda PLAYSCREEN.OFS+2
  8202 56AF 69 00			adc #$00
  8203 56B1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8204 56B3 AD 67 9E			lda PLAYSCREEN.OFS+3
  8205 56B6 69 00			adc #$00
  8206 56B8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8207 56BA A5 9F			lda :STACKORIGIN+9
  8208 56BC 18 6D 44 A0			add X
  8209 56C0 8D 8C 9F			sta GETBYTE.SRC
  8210 56C3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8211 56C5 69 00			adc #$00
  8212 56C7 8D 8D 9F			sta GETBYTE.SRC+1
  8213 56CA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8214 56CC 69 00			adc #$00
  8215 56CE 8D 8E 9F			sta GETBYTE.SRC+2
  8216 56D1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8217 56D3 69 00			adc #$00
  8218 56D5 8D 8F 9F			sta GETBYTE.SRC+3
  8219 56D8 20 2A 3C			jsr GETBYTE
  8220 56DB AD 90 9F			lda GETBYTE.RESULT
  8221 56DE 09 80			ora #$80
  8222 56E0 8D 4D A0			sta CL
  8223
  8224 				; optimize OK (service.pas), line = 1537
  8225
  8226 56E3 AC 46 A0			ldy I
  8227 56E6 AD 4D A0			lda CL
  8228 56E9 99 00 C2			sta adr.TMP,y
  8229
  8230 				; optimize FAIL (0, service.pas), line = 1538
  8231
  8232 56EC EE 46 A0			inc I
  8233 56EF			l_1211
  8234
  8235 				; --- ForToDoEpilog
  8236 56EF EE 44 A0			inc X
  8237 56F2 D0 9A			jne l_11F1
  8238 56F4			l_11FF
  8239
  8240 				; optimize OK (service.pas), line = 1550
  8241
  8242 56F4 AD 47 A0			lda XS
  8243 56F7 18 69 08			add #$08
  8244 56FA 85 9F			sta :STACKORIGIN+9
  8245 56FC AD 48 A0			lda XS+1
  8246 56FF 69 00			adc #$00
  8247 5701 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8248 5703 AD 57 9F			lda HLP
  8249 5706 18 65 9F			add :STACKORIGIN+9
  8250 5709 8D 57 9F			sta HLP
  8251 570C AD 58 9F			lda HLP+1
  8252 570F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8253 5711 8D 58 9F			sta HLP+1
  8254
  8255 				; optimize OK (service.pas), line = 1552
  8256
  8257 5714 AD 57 9F			lda HLP
  8258 5717 8D 78 9F			sta BLITTMP.DST
  8259 571A A9 50			lda #$50
  8260 571C 18 6D 58 9F			add HLP+1
  8261 5720 8D 79 9F			sta BLITTMP.DST+1
  8262 5723 A9 00			lda #$00
  8263 5725 69 00			adc #$00
  8264 5727 8D 7A 9F			sta BLITTMP.DST+2
  8265 572A A9 00			lda #$00
  8266 572C 69 00			adc #$00
  8267 572E 8D 7B 9F			sta BLITTMP.DST+3
  8268 5731 AD 46 A0			lda I
  8269 5734 8D 7C 9F			sta BLITTMP.SIZE
  8270 5737 20 57 3B			jsr BLITTMP
  8271
  8272 				; optimize OK (service.pas), line = 1553
  8273
  8274 573A AD 64 9E			lda PLAYSCREEN.OFS
  8275 573D 18 6D 57 9F			add HLP
  8276 5741 8D 78 9F			sta BLITTMP.DST
  8277 5744 AD 65 9E			lda PLAYSCREEN.OFS+1
  8278 5747 6D 58 9F			adc HLP+1
  8279 574A 8D 79 9F			sta BLITTMP.DST+1
  8280 574D AD 66 9E			lda PLAYSCREEN.OFS+2
  8281 5750 69 00			adc #$00
  8282 5752 8D 7A 9F			sta BLITTMP.DST+2
  8283 5755 AD 67 9E			lda PLAYSCREEN.OFS+3
  8284 5758 69 00			adc #$00
  8285 575A 8D 7B 9F			sta BLITTMP.DST+3
  8286 575D AD 46 A0			lda I
  8287 5760 8D 7C 9F			sta BLITTMP.SIZE
  8288 5763 20 57 3B			jsr BLITTMP
  8289
  8290 				; --- ForToDoEpilog
  8291 5766 EE 45 A0			inc Y
  8292 5769 F0 03 4C 5E 56		jne l_11C4
  8293 576E			l_11D2
  8294
  8295 				; ------------------------------------------------------------
  8296
  8297 = A042			XA	= DATAORIGIN+$02DE
  8298 = A043			YA	= DATAORIGIN+$02DF
  8299 = A044			X	= DATAORIGIN+$02E0
  8300 = A045			Y	= DATAORIGIN+$02E1
  8301 = A046			I	= DATAORIGIN+$02E2
  8302 = A047			XS	= DATAORIGIN+$02E3
  8303 = A049			YS	= DATAORIGIN+$02E5
  8304 = A04B			YH	= DATAORIGIN+$02E7
  8305 = A04D			CL	= DATAORIGIN+$02E9
  8306 = A04E			SHADOW	= DATAORIGIN+$02EA
  8307
  8308 = A042			@VarData	= XA
  8309 = 000D			@VarDataSize	= 13
  8310
  8311 576E			@exit
  8312 					.ifdef @new
  8313 					lda <@VarData
  8314 					sta :ztmp
  8315 					lda >@VarData
  8316 					ldy #@VarDataSize-1
  8317 					jmp @FreeMem
  8318 					els
  8319 576E 60				rts						; ret
  8320 					eif
  8321 				.endl
  8322
  8323 576F			.local	PLACE_BLOCK					; PROCEDURE
  8324
  8325 				; optimize OK (service.pas), line = 1570
  8326
  8327 576F AD 51 A0			lda XA
  8328 5772 85 9F			sta :STACKORIGIN+9
  8329 5774 A9 00			lda #$00
  8330 5776 06 9F			asl :STACKORIGIN+9
  8331 5778 2A				rol @
  8332 5779 06 9F			asl :STACKORIGIN+9
  8333 577B 2A				rol @
  8334 577C 06 9F			asl :STACKORIGIN+9
  8335 577E 2A				rol @
  8336 577F 06 9F			asl :STACKORIGIN+9
  8337 5781 2A				rol @
  8338 5782 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8339 5784 A5 9F			lda :STACKORIGIN+9
  8340 5786 18 69 09			add #$09
  8341 5789 8D 57 A0			sta XS
  8342 578C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8343 578E 69 00			adc #$00
  8344 5790 8D 58 A0			sta XS+1
  8345
  8346 				; optimize OK (service.pas), line = 1571
  8347
  8348 5793 AD 52 A0			lda YA
  8349 5796 85 9F			sta :STACKORIGIN+9
  8350 5798 A9 00			lda #$00
  8351 579A 06 9F			asl :STACKORIGIN+9
  8352 579C 2A				rol @
  8353 579D 06 9F			asl :STACKORIGIN+9
  8354 579F 2A				rol @
  8355 57A0 06 9F			asl :STACKORIGIN+9
  8356 57A2 2A				rol @
  8357 57A3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8358 57A5 A5 9F			lda :STACKORIGIN+9
  8359 57A7 18 69 16			add #$16
  8360 57AA 8D 59 A0			sta YS
  8361 57AD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8362 57AF 69 00			adc #$00
  8363 57B1 8D 5A A0			sta YS+1
  8364
  8365 				; optimize OK (service.pas), line = 1573
  8366
  8367 57B4 A9 00			lda #$00
  8368 57B6 8D 55 A0			sta Y
  8369
  8370 57B9			l_1282
  8371 				; --- ForToDoCondition
  8372 57B9 AD 55 A0			lda Y
  8373 57BC C9 08			cmp #$08
  8374 57BE 90 03 4C CC 58		jcs l_1290
  8375
  8376 				; optimize OK (service.pas), line = 1575
  8377
  8378 57C3 AD 59 A0			lda YS
  8379 57C6 6D 55 A0			adc Y
  8380 57C9 A8				tay
  8381 57CA AD 57 A0			lda XS
  8382 57CD 18 79 00 C0			add adr.ROW,y
  8383 57D1 8D 57 9F			sta HLP
  8384 57D4 AD 58 A0			lda XS+1
  8385 57D7 79 00 C1			adc adr.ROW+256,y
  8386 57DA 8D 58 9F			sta HLP+1
  8387
  8388 				; optimize OK (service.pas), line = 1577
  8389
  8390 57DD A9 00			lda #$00
  8391 57DF 8D 54 A0			sta X
  8392
  8393 57E2			l_12AB
  8394 				; --- ForToDoCondition
  8395 57E2 AD 54 A0			lda X
  8396 57E5 C9 10			cmp #$10
  8397 57E7 90 03 4C 74 58		jcs l_12B9
  8398
  8399 				; optimize OK (service.pas), line = 1582
  8400
  8401 57EC AD 64 9E			lda PLAYSCREEN.OFS
  8402 57EF 6D 57 9F			adc HLP
  8403 57F2 85 9F			sta :STACKORIGIN+9
  8404 57F4 AD 65 9E			lda PLAYSCREEN.OFS+1
  8405 57F7 6D 58 9F			adc HLP+1
  8406 57FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8407 57FC AD 66 9E			lda PLAYSCREEN.OFS+2
  8408 57FF 69 00			adc #$00
  8409 5801 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8410 5803 AD 67 9E			lda PLAYSCREEN.OFS+3
  8411 5806 69 00			adc #$00
  8412 5808 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8413 580A A5 9F			lda :STACKORIGIN+9
  8414 580C 18 6D 54 A0			add X
  8415 5810 8D 8C 9F			sta GETBYTE.SRC
  8416 5813 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8417 5815 69 00			adc #$00
  8418 5817 8D 8D 9F			sta GETBYTE.SRC+1
  8419 581A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8420 581C 69 00			adc #$00
  8421 581E 8D 8E 9F			sta GETBYTE.SRC+2
  8422 5821 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8423 5823 69 00			adc #$00
  8424 5825 8D 8F 9F			sta GETBYTE.SRC+3
  8425 5828 20 2A 3C			jsr GETBYTE
  8426 582B AD 90 9F			lda GETBYTE.RESULT
  8427 582E 29 80			and #$80
  8428 5830 8D 5D A0			sta SHADOW
  8429
  8430 				; optimize OK (service.pas), line = 1584
  8431
  8432 5833 AD 55 A0			lda Y
  8433 5836 C9 07			cmp #$07
  8434 5838 B0 29			jcs l_12EB
  8435 583A AD 54 A0			lda X
  8436 583D C9 0F			cmp #$0F
  8437 583F B0 22			jcs l_12EB
  8438
  8439 				; optimize OK (service.pas), line = 1589
  8440
  8441 5841 AD 53 A0			lda BLOCK
  8442 5844 38 E9 01			sub #$01
  8443 5847 85 9F			sta :STACKORIGIN+9
  8444 5849 A9 00			lda #$00
  8445 584B E9 00			sbc #$00
  8446 584D A5 9F			lda :STACKORIGIN+9
  8447 584F 29 0F			and #$0F
  8448 5851 A8				tay
  8449 5852 B9 88 20			lda adr.COLORBLOCK,y
  8450 5855 29 7F			and #$7F
  8451 5857 0D 5D A0			ora SHADOW
  8452 585A 8D 5B A0			sta CL
  8453
  8454 				; optimize OK (service.pas), line = 1591
  8455
  8456 585D AC 54 A0			ldy X
  8457 5860 4C 69 58			jmp l_1319
  8458 5863			l_12EB
  8459
  8460 				; optimize OK (service.pas), line = 1604
  8461
  8462 5863 AC 54 A0			ldy X
  8463 5866 AD 5D A0			lda SHADOW
  8464 5869			l_1319
  8465 5869 99 00 C2			sta adr.TMP,y
  8466
  8467 				; --- ForToDoEpilog
  8468 586C EE 54 A0			inc X
  8469 586F F0 03 4C E2 57		jne l_12AB
  8470 5874			l_12B9
  8471
  8472 				; optimize OK (service.pas), line = 1615
  8473
  8474 5874 AD 57 9F			lda HLP
  8475 5877 8D 78 9F			sta BLITTMP.DST
  8476 587A A9 50			lda #$50
  8477 587C 18 6D 58 9F			add HLP+1
  8478 5880 8D 79 9F			sta BLITTMP.DST+1
  8479 5883 A9 00			lda #$00
  8480 5885 69 00			adc #$00
  8481 5887 8D 7A 9F			sta BLITTMP.DST+2
  8482 588A A9 00			lda #$00
  8483 588C 69 00			adc #$00
  8484 588E 8D 7B 9F			sta BLITTMP.DST+3
  8485 5891 A9 10			lda #$10
  8486 5893 8D 7C 9F			sta BLITTMP.SIZE
  8487 5896 20 57 3B			jsr BLITTMP
  8488
  8489 				; optimize OK (service.pas), line = 1616
  8490
  8491 5899 AD 64 9E			lda PLAYSCREEN.OFS
  8492 589C 18 6D 57 9F			add HLP
  8493 58A0 8D 78 9F			sta BLITTMP.DST
  8494 58A3 AD 65 9E			lda PLAYSCREEN.OFS+1
  8495 58A6 6D 58 9F			adc HLP+1
  8496 58A9 8D 79 9F			sta BLITTMP.DST+1
  8497 58AC AD 66 9E			lda PLAYSCREEN.OFS+2
  8498 58AF 69 00			adc #$00
  8499 58B1 8D 7A 9F			sta BLITTMP.DST+2
  8500 58B4 AD 67 9E			lda PLAYSCREEN.OFS+3
  8501 58B7 69 00			adc #$00
  8502 58B9 8D 7B 9F			sta BLITTMP.DST+3
  8503 58BC A9 10			lda #$10
  8504 58BE 8D 7C 9F			sta BLITTMP.SIZE
  8505 58C1 20 57 3B			jsr BLITTMP
  8506
  8507 				; --- ForToDoEpilog
  8508 58C4 EE 55 A0			inc Y
  8509 58C7 F0 03 4C B9 57		jne l_1282
  8510 58CC			l_1290
  8511
  8512 				; optimize OK (service.pas), line = 1622
  8513
  8514 58CC AD 59 A0			lda YS
  8515 58CF 18 69 04			add #$04
  8516 58D2 8D 55 A0			sta Y
  8517 58D5 AD 59 A0			lda YS
  8518 58D8 18 69 0C			add #$0C
  8519 58DB 8D DF 58			sta @FORTMP_134C_0
  8520
  8521 58DE			l_134F
  8522 				; --- ForToDoCondition
  8523 58DE A9 00			lda @FORTMP_134C_0::#$00
  8524 58E0 CD 55 A0			cmp Y
  8525 58E3 B0 03 4C EE 59		jcc l_135D
  8526
  8527 				; optimize OK (service.pas), line = 1624
  8528
  8529 58E8 A9 00			lda #$00
  8530 58EA 8D 56 A0			sta I
  8531
  8532 				; optimize OK (service.pas), line = 1625
  8533
  8534 58ED AC 55 A0			ldy Y
  8535 58F0 B9 00 C0			lda adr.ROW,y
  8536 58F3 8D 57 9F			sta HLP
  8537 58F6 B9 00 C1			lda adr.ROW+256,y
  8538 58F9 8D 58 9F			sta HLP+1
  8539
  8540 				; optimize OK (service.pas), line = 1627
  8541
  8542 58FC AD 57 A0			lda XS
  8543 58FF 18 69 08			add #$08
  8544 5902 8D 54 A0			sta X
  8545 5905 AD 57 A0			lda XS
  8546 5908 18 69 18			add #$18
  8547 590B 8D 0F 59			sta @FORTMP_1379_0
  8548
  8549 590E			l_137C
  8550 				; --- ForToDoCondition
  8551 590E A9 00			lda @FORTMP_1379_0::#$00
  8552 5910 CD 54 A0			cmp X
  8553 5913 90 5F			jcc l_138A
  8554
  8555 				; optimize OK (service.pas), line = 1628
  8556
  8557 5915 AD 54 A0			lda X
  8558 5918 C9 D8			cmp #$D8
  8559 591A B0 53			jcs l_139C
  8560
  8561 				; optimize OK (service.pas), line = 1636
  8562
  8563 591C AD 64 9E			lda PLAYSCREEN.OFS
  8564 591F 6D 57 9F			adc HLP
  8565 5922 85 9F			sta :STACKORIGIN+9
  8566 5924 AD 65 9E			lda PLAYSCREEN.OFS+1
  8567 5927 6D 58 9F			adc HLP+1
  8568 592A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8569 592C AD 66 9E			lda PLAYSCREEN.OFS+2
  8570 592F 69 00			adc #$00
  8571 5931 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8572 5933 AD 67 9E			lda PLAYSCREEN.OFS+3
  8573 5936 69 00			adc #$00
  8574 5938 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8575 593A A5 9F			lda :STACKORIGIN+9
  8576 593C 18 6D 54 A0			add X
  8577 5940 8D 8C 9F			sta GETBYTE.SRC
  8578 5943 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8579 5945 69 00			adc #$00
  8580 5947 8D 8D 9F			sta GETBYTE.SRC+1
  8581 594A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8582 594C 69 00			adc #$00
  8583 594E 8D 8E 9F			sta GETBYTE.SRC+2
  8584 5951 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8585 5953 69 00			adc #$00
  8586 5955 8D 8F 9F			sta GETBYTE.SRC+3
  8587 5958 20 2A 3C			jsr GETBYTE
  8588 595B AD 90 9F			lda GETBYTE.RESULT
  8589 595E 29 7F			and #$7F
  8590 5960 8D 5B A0			sta CL
  8591
  8592 				; optimize OK (service.pas), line = 1638
  8593
  8594 5963 AC 56 A0			ldy I
  8595 5966 AD 5B A0			lda CL
  8596 5969 99 00 C2			sta adr.TMP,y
  8597
  8598 				; optimize FAIL (0, service.pas), line = 1640
  8599
  8600 596C EE 56 A0			inc I
  8601 596F			l_139C
  8602
  8603 				; --- ForToDoEpilog
  8604 596F EE 54 A0			inc X
  8605 5972 D0 9A			jne l_137C
  8606 5974			l_138A
  8607
  8608 				; optimize OK (service.pas), line = 1651
  8609
  8610 5974 AD 57 A0			lda XS
  8611 5977 18 69 08			add #$08
  8612 597A 85 9F			sta :STACKORIGIN+9
  8613 597C AD 58 A0			lda XS+1
  8614 597F 69 00			adc #$00
  8615 5981 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8616 5983 AD 57 9F			lda HLP
  8617 5986 18 65 9F			add :STACKORIGIN+9
  8618 5989 8D 57 9F			sta HLP
  8619 598C AD 58 9F			lda HLP+1
  8620 598F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8621 5991 8D 58 9F			sta HLP+1
  8622
  8623 				; optimize OK (service.pas), line = 1653
  8624
  8625 5994 AD 57 9F			lda HLP
  8626 5997 8D 78 9F			sta BLITTMP.DST
  8627 599A A9 50			lda #$50
  8628 599C 18 6D 58 9F			add HLP+1
  8629 59A0 8D 79 9F			sta BLITTMP.DST+1
  8630 59A3 A9 00			lda #$00
  8631 59A5 69 00			adc #$00
  8632 59A7 8D 7A 9F			sta BLITTMP.DST+2
  8633 59AA A9 00			lda #$00
  8634 59AC 69 00			adc #$00
  8635 59AE 8D 7B 9F			sta BLITTMP.DST+3
  8636 59B1 AD 56 A0			lda I
  8637 59B4 8D 7C 9F			sta BLITTMP.SIZE
  8638 59B7 20 57 3B			jsr BLITTMP
  8639
  8640 				; optimize OK (service.pas), line = 1654
  8641
  8642 59BA AD 64 9E			lda PLAYSCREEN.OFS
  8643 59BD 18 6D 57 9F			add HLP
  8644 59C1 8D 78 9F			sta BLITTMP.DST
  8645 59C4 AD 65 9E			lda PLAYSCREEN.OFS+1
  8646 59C7 6D 58 9F			adc HLP+1
  8647 59CA 8D 79 9F			sta BLITTMP.DST+1
  8648 59CD AD 66 9E			lda PLAYSCREEN.OFS+2
  8649 59D0 69 00			adc #$00
  8650 59D2 8D 7A 9F			sta BLITTMP.DST+2
  8651 59D5 AD 67 9E			lda PLAYSCREEN.OFS+3
  8652 59D8 69 00			adc #$00
  8653 59DA 8D 7B 9F			sta BLITTMP.DST+3
  8654 59DD AD 56 A0			lda I
  8655 59E0 8D 7C 9F			sta BLITTMP.SIZE
  8656 59E3 20 57 3B			jsr BLITTMP
  8657
  8658 				; --- ForToDoEpilog
  8659 59E6 EE 55 A0			inc Y
  8660 59E9 F0 03 4C DE 58		jne l_134F
  8661 59EE			l_135D
  8662
  8663 				; optimize OK (service.pas), line = 1659
  8664
  8665 59EE AD 53 A0			lda BLOCK
  8666 59F1 C9 09			cmp #$09
  8667 59F3 B0 03 4C AC 5B		jcc l_13F6
  8668
  8669 				; optimize OK (service.pas), line = 1661
  8670
  8671 59F8 A9 00			lda #$00
  8672 59FA 8D 5C A0			sta CL2
  8673
  8674 				; optimize OK (service.pas), line = 1662
  8675
  8676 59FD AD 53 A0			lda BLOCK
  8677 5A00 29 0F			and #$0F
  8678 5A02 C9 09			cmp #$09
  8679 5A04 D0 19			jne l_1411
  8680
  8681 				; optimize OK (service.pas), line = 1664
  8682
  8683 5A06 A9 CA			lda #$CA
  8684 5A08 8D 5C A0			sta CL2
  8685
  8686 				; optimize OK (service.pas), line = 1665
  8687
  8688 5A0B AD 52 A0			lda YA
  8689 5A0E 0A				asl @
  8690 5A0F 0A				asl @
  8691 5A10 0A				asl @
  8692 5A11 0A				asl @
  8693 5A12 18 6D 51 A0			add XA
  8694 5A16 A8				tay
  8695 5A17 A9 19			lda #$19
  8696 5A19 99 00 DB			sta adr.WALL,y
  8697 5A1C 4C 2B 5A			jmp l_1430
  8698 5A1F			l_1411
  8699
  8700 				; optimize OK (service.pas), line = 1671
  8701
  8702 5A1F AD 53 A0			lda BLOCK
  8703 5A22 C9 0A			cmp #$0A
  8704 5A24 D0 05			jne l_1442
  8705 5A26 A9 C9			lda #$C9
  8706 5A28 8D 5C A0			sta CL2
  8707 5A2B			l_1430
  8708 5A2B			l_1442
  8709
  8710 				; optimize OK (service.pas), line = 1675
  8711
  8712 5A2B A9 00			lda #$00
  8713 5A2D 8D 55 A0			sta Y
  8714
  8715 5A30			l_1452
  8716 				; --- ForToDoCondition
  8717 5A30 AD 55 A0			lda Y
  8718 5A33 C9 07			cmp #$07
  8719 5A35 90 03 4C E4 5A		jcs l_1460
  8720
  8721 				; optimize OK (service.pas), line = 1678
  8722
  8723 5A3A 6D 59 A0			adc YS
  8724 5A3D A8				tay
  8725 5A3E AD 57 A0			lda XS
  8726 5A41 18 79 00 C0			add adr.ROW,y
  8727 5A45 8D 57 9F			sta HLP
  8728 5A48 AD 58 A0			lda XS+1
  8729 5A4B 79 00 C1			adc adr.ROW+256,y
  8730 5A4E 8D 58 9F			sta HLP+1
  8731
  8732 				; optimize OK (service.pas), line = 1683
  8733
  8734 5A51 AD 64 9E			lda PLAYSCREEN.OFS
  8735 5A54 18 6D 57 9F			add HLP
  8736 5A58 8D 8C 9F			sta GETBYTE.SRC
  8737 5A5B AD 65 9E			lda PLAYSCREEN.OFS+1
  8738 5A5E 6D 58 9F			adc HLP+1
  8739 5A61 8D 8D 9F			sta GETBYTE.SRC+1
  8740 5A64 AD 66 9E			lda PLAYSCREEN.OFS+2
  8741 5A67 69 00			adc #$00
  8742 5A69 8D 8E 9F			sta GETBYTE.SRC+2
  8743 5A6C AD 67 9E			lda PLAYSCREEN.OFS+3
  8744 5A6F 69 00			adc #$00
  8745 5A71 8D 8F 9F			sta GETBYTE.SRC+3
  8746 5A74 20 2A 3C			jsr GETBYTE
  8747 5A77 AD 90 9F			lda GETBYTE.RESULT
  8748 5A7A 29 80			and #$80
  8749 5A7C 8D 5B A0			sta CL
  8750
  8751 				; optimize OK (service.pas), line = 1685
  8752
  8753 5A7F AD 5C A0			lda CL2
  8754 5A82 29 7F			and #$7F
  8755 5A84 0D 5B A0			ora CL
  8756 5A87 8D 5C A0			sta CL2
  8757
  8758 				; optimize OK (service.pas), line = 1689
  8759
  8760 5A8A AD 57 9F			lda HLP
  8761 5A8D 8D 87 9F			sta PUTBYTE.DST
  8762 5A90 A9 50			lda #$50
  8763 5A92 18 6D 58 9F			add HLP+1
  8764 5A96 8D 88 9F			sta PUTBYTE.DST+1
  8765 5A99 A9 00			lda #$00
  8766 5A9B 69 00			adc #$00
  8767 5A9D 8D 89 9F			sta PUTBYTE.DST+2
  8768 5AA0 A9 00			lda #$00
  8769 5AA2 69 00			adc #$00
  8770 5AA4 8D 8A 9F			sta PUTBYTE.DST+3
  8771 5AA7 AD 5C A0			lda CL2
  8772 5AAA 8D 8B 9F			sta PUTBYTE.V
  8773 5AAD 20 02 3C			jsr PUTBYTE
  8774
  8775 				; optimize OK (service.pas), line = 1693
  8776
  8777 5AB0 AD 64 9E			lda PLAYSCREEN.OFS
  8778 5AB3 18 6D 57 9F			add HLP
  8779 5AB7 8D 87 9F			sta PUTBYTE.DST
  8780 5ABA AD 65 9E			lda PLAYSCREEN.OFS+1
  8781 5ABD 6D 58 9F			adc HLP+1
  8782 5AC0 8D 88 9F			sta PUTBYTE.DST+1
  8783 5AC3 AD 66 9E			lda PLAYSCREEN.OFS+2
  8784 5AC6 69 00			adc #$00
  8785 5AC8 8D 89 9F			sta PUTBYTE.DST+2
  8786 5ACB AD 67 9E			lda PLAYSCREEN.OFS+3
  8787 5ACE 69 00			adc #$00
  8788 5AD0 8D 8A 9F			sta PUTBYTE.DST+3
  8789 5AD3 AD 5C A0			lda CL2
  8790 5AD6 8D 8B 9F			sta PUTBYTE.V
  8791 5AD9 20 02 3C			jsr PUTBYTE
  8792
  8793 				; --- ForToDoEpilog
  8794 5ADC EE 55 A0			inc Y
  8795 5ADF F0 03 4C 30 5A		jne l_1452
  8796 5AE4			l_1460
  8797
  8798 				; optimize OK (service.pas), line = 1696
  8799
  8800 5AE4 AC 59 A0			ldy YS
  8801 5AE7 AD 57 A0			lda XS
  8802 5AEA 18 79 00 C0			add adr.ROW,y
  8803 5AEE 8D 57 9F			sta HLP
  8804 5AF1 AD 58 A0			lda XS+1
  8805 5AF4 79 00 C1			adc adr.ROW+256,y
  8806 5AF7 8D 58 9F			sta HLP+1
  8807
  8808 				; optimize OK (service.pas), line = 1699
  8809
  8810 5AFA A9 00			lda #$00
  8811 5AFC A8				tay
  8812
  8813 5AFD			l_14BE
  8814 				; --- ForToDoCondition
  8815 5AFD 8C 54 A0			sty X
  8816 5B00 C0 0F			cpy #$0F
  8817 5B02 B0 58			jcs l_14CC
  8818
  8819 				; optimize OK (service.pas), line = 1704
  8820
  8821 5B04 AD 64 9E			lda PLAYSCREEN.OFS
  8822 5B07 6D 57 9F			adc HLP
  8823 5B0A 85 9F			sta :STACKORIGIN+9
  8824 5B0C AD 65 9E			lda PLAYSCREEN.OFS+1
  8825 5B0F 6D 58 9F			adc HLP+1
  8826 5B12 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8827 5B14 AD 66 9E			lda PLAYSCREEN.OFS+2
  8828 5B17 69 00			adc #$00
  8829 5B19 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8830 5B1B AD 67 9E			lda PLAYSCREEN.OFS+3
  8831 5B1E 69 00			adc #$00
  8832 5B20 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8833 5B22 A5 9F			lda :STACKORIGIN+9
  8834 5B24 18 6D 54 A0			add X
  8835 5B28 8D 8C 9F			sta GETBYTE.SRC
  8836 5B2B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8837 5B2D 69 00			adc #$00
  8838 5B2F 8D 8D 9F			sta GETBYTE.SRC+1
  8839 5B32 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8840 5B34 69 00			adc #$00
  8841 5B36 8D 8E 9F			sta GETBYTE.SRC+2
  8842 5B39 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8843 5B3B 69 00			adc #$00
  8844 5B3D 8D 8F 9F			sta GETBYTE.SRC+3
  8845 5B40 20 2A 3C			jsr GETBYTE
  8846 5B43 AD 90 9F			lda GETBYTE.RESULT
  8847 5B46 29 80			and #$80
  8848 5B48 8D 5B A0			sta CL
  8849
  8850 				; optimize OK (service.pas), line = 1706
  8851
  8852 5B4B AD 5C A0			lda CL2
  8853 5B4E 29 7F			and #$7F
  8854 5B50 0D 5B A0			ora CL
  8855 5B53 AC 54 A0			ldy X
  8856 5B56 99 00 C2			sta adr.TMP,y
  8857
  8858 				; --- ForToDoEpilog
  8859 5B59 C8				iny
  8860 5B5A D0 A1			jne l_14BE
  8861 5B5C			l_14CC
  8862
  8863 				; optimize OK (service.pas), line = 1715
  8864
  8865 5B5C AD 57 9F			lda HLP
  8866 5B5F 8D 78 9F			sta BLITTMP.DST
  8867 5B62 A9 50			lda #$50
  8868 5B64 18 6D 58 9F			add HLP+1
  8869 5B68 8D 79 9F			sta BLITTMP.DST+1
  8870 5B6B A9 00			lda #$00
  8871 5B6D 69 00			adc #$00
  8872 5B6F 8D 7A 9F			sta BLITTMP.DST+2
  8873 5B72 A9 00			lda #$00
  8874 5B74 69 00			adc #$00
  8875 5B76 8D 7B 9F			sta BLITTMP.DST+3
  8876 5B79 A9 0F			lda #$0F
  8877 5B7B 8D 7C 9F			sta BLITTMP.SIZE
  8878 5B7E 20 57 3B			jsr BLITTMP
  8879
  8880 				; optimize OK (service.pas), line = 1716
  8881
  8882 5B81 AD 64 9E			lda PLAYSCREEN.OFS
  8883 5B84 18 6D 57 9F			add HLP
  8884 5B88 8D 78 9F			sta BLITTMP.DST
  8885 5B8B AD 65 9E			lda PLAYSCREEN.OFS+1
  8886 5B8E 6D 58 9F			adc HLP+1
  8887 5B91 8D 79 9F			sta BLITTMP.DST+1
  8888 5B94 AD 66 9E			lda PLAYSCREEN.OFS+2
  8889 5B97 69 00			adc #$00
  8890 5B99 8D 7A 9F			sta BLITTMP.DST+2
  8891 5B9C AD 67 9E			lda PLAYSCREEN.OFS+3
  8892 5B9F 69 00			adc #$00
  8893 5BA1 8D 7B 9F			sta BLITTMP.DST+3
  8894 5BA4 A9 0F			lda #$0F
  8895 5BA6 8D 7C 9F			sta BLITTMP.SIZE
  8896 5BA9 20 57 3B			jsr BLITTMP
  8897 5BAC			l_13F6
  8898
  8899 				; ------------------------------------------------------------
  8900
  8901 = A051			XA	= DATAORIGIN+$02ED
  8902 = A052			YA	= DATAORIGIN+$02EE
  8903 = A053			BLOCK	= DATAORIGIN+$02EF
  8904 = A054			X	= DATAORIGIN+$02F0
  8905 = A055			Y	= DATAORIGIN+$02F1
  8906 = A056			I	= DATAORIGIN+$02F2
  8907 = A057			XS	= DATAORIGIN+$02F3
  8908 = A059			YS	= DATAORIGIN+$02F5
  8909 = A05B			CL	= DATAORIGIN+$02F7
  8910 = A05C			CL2	= DATAORIGIN+$02F8
  8911 = A05D			SHADOW	= DATAORIGIN+$02F9
  8912
  8913 = A051			@VarData	= XA
  8914 = 000D			@VarDataSize	= 13
  8915
  8916 5BAC			@exit
  8917 					.ifdef @new
  8918 					lda <@VarData
  8919 					sta :ztmp
  8920 					lda >@VarData
  8921 					ldy #@VarDataSize-1
  8922 					jmp @FreeMem
  8923 					els
  8924 5BAC 60				rts						; ret
  8925 					eif
  8926 				.endl
  8927
  8928 5BAD			.local	PUT_WALL					; PROCEDURE
  8929
  8930 				; optimize OK (service.pas), line = 1728
  8931
  8932 5BAD A9 00			lda #$00
  8933 5BAF 8D 61 A0			sta Y
  8934
  8935 5BB2			l_1517
  8936 				; --- ForToDoCondition
  8937 5BB2 AD 61 A0			lda Y
  8938 5BB5 C9 0F			cmp #$0F
  8939 5BB7 B0 48			jcs l_1525
  8940
  8941 				; optimize OK (service.pas), line = 1729
  8942
  8943 5BB9 A9 00			lda #$00
  8944 5BBB 8D 60 A0			sta X
  8945
  8946 5BBE			l_152E
  8947 				; --- ForToDoCondition
  8948 5BBE AD 60 A0			lda X
  8949 5BC1 C9 0D			cmp #$0D
  8950 5BC3 B0 37			jcs l_153C
  8951
  8952 				; optimize OK (service.pas), line = 1730
  8953
  8954 5BC5 AD 61 A0			lda Y
  8955 5BC8 0A				asl @
  8956 5BC9 0A				asl @
  8957 5BCA 0A				asl @
  8958 5BCB 0A				asl @
  8959 5BCC 18 6D 60 A0			add X
  8960 5BD0 A8				tay
  8961 5BD1 B9 00 DB			lda adr.WALL,y
  8962 5BD4 F0 21			jeq l_155B
  8963 5BD6 AD 61 A0			lda Y
  8964 5BD9 0A				asl @
  8965 5BDA 0A				asl @
  8966 5BDB 0A				asl @
  8967 5BDC 0A				asl @
  8968 5BDD 18 6D 60 A0			add X
  8969 5BE1 A8				tay
  8970 5BE2 B9 00 DB			lda adr.WALL,y
  8971 5BE5 8D 53 A0			sta PLACE_BLOCK.BLOCK
  8972 5BE8 AD 60 A0			lda X
  8973 5BEB 8D 51 A0			sta PLACE_BLOCK.XA
  8974 5BEE AD 61 A0			lda Y
  8975 5BF1 8D 52 A0			sta PLACE_BLOCK.YA
  8976 5BF4 20 6F 57			jsr PLACE_BLOCK
  8977 5BF7			l_155B
  8978
  8979 				; --- ForToDoEpilog
  8980 5BF7 EE 60 A0			inc X
  8981 5BFA D0 C2			jne l_152E
  8982 5BFC			l_153C
  8983
  8984 				; --- ForToDoEpilog
  8985 5BFC EE 61 A0			inc Y
  8986 5BFF D0 B1			jne l_1517
  8987 5C01			l_1525
  8988
  8989 				; ------------------------------------------------------------
  8990
  8991 = A060			X	= DATAORIGIN+$02FC
  8992 = A061			Y	= DATAORIGIN+$02FD
  8993
  8994 = A060			@VarData	= X
  8995 = 0002			@VarDataSize	= 2
  8996
  8997 5C01			@exit
  8998 					.ifdef @new
  8999 					lda <@VarData
  9000 					sta :ztmp
  9001 					lda >@VarData
  9002 					ldy #@VarDataSize-1
  9003 					jmp @FreeMem
  9004 					els
  9005 5C01 60				rts						; ret
  9006 					eif
  9007 				.endl
  9008
  9009 5C02			.local	SET_WALL					; PROCEDURE
  9010
  9011 				; optimize OK (service.pas), line = 1739
  9012
  9013 5C02 A9 00			lda #$00
  9014 5C04 8D 17 9F			sta REMAIN_BLK
  9015
  9016 				; optimize OK (service.pas), line = 1740
  9017
  9018 5C07 AC 34 9F			ldy CUR_PLAYER
  9019 5C0A B9 25 9F			lda adr.SCORE.WALL_N,y
  9020 5C0D 8D 64 A0			sta WL
  9021
  9022 				; optimize OK (service.pas), line = 1743
  9023
  9024 5C10 A9 00			lda #$00
  9025 5C12 8D 63 A0			sta Y
  9026
  9027 5C15			l_1599
  9028 				; --- ForToDoCondition
  9029 5C15 AD 63 A0			lda Y
  9030 5C18 C9 0F			cmp #$0F
  9031 5C1A B0 3D			jcs l_15A7
  9032
  9033 				; optimize OK (service.pas), line = 1744
  9034
  9035 5C1C A9 00			lda #$00
  9036 5C1E 8D 62 A0			sta X
  9037
  9038 5C21			l_15B0
  9039 				; --- ForToDoCondition
  9040 5C21 AD 62 A0			lda X
  9041 5C24 C9 0D			cmp #$0D
  9042 5C26 B0 2C			jcs l_15BE
  9043
  9044 				; optimize OK (service.pas), line = 1747
  9045
  9046 5C28 AD 63 A0			lda Y
  9047 5C2B 0A				asl @
  9048 5C2C 0A				asl @
  9049 5C2D 0A				asl @
  9050 5C2E 0A				asl @
  9051 5C2F 18 6D 62 A0			add X
  9052 5C33 A8				tay
  9053 5C34 B9 00 DB			lda adr.WALL,y
  9054 5C37 F0 16			jeq l_15F6
  9055 5C39 AD 63 A0			lda Y
  9056 5C3C 0A				asl @
  9057 5C3D 0A				asl @
  9058 5C3E 0A				asl @
  9059 5C3F 0A				asl @
  9060 5C40 18 6D 62 A0			add X
  9061 5C44 A8				tay
  9062 5C45 B9 00 DB			lda adr.WALL,y
  9063 5C48 C9 0A			cmp #$0A
  9064 5C4A F0 03			jeq l_15F6
  9065 5C4C EE 17 9F			inc REMAIN_BLK
  9066 5C4F			l_15F6
  9067
  9068 				; --- ForToDoEpilog
  9069 5C4F EE 62 A0			inc X
  9070 5C52 D0 CD			jne l_15B0
  9071 5C54			l_15BE
  9072
  9073 				; --- ForToDoEpilog
  9074 5C54 EE 63 A0			inc Y
  9075 5C57 D0 BC			jne l_1599
  9076 5C59			l_15A7
  9077
  9078 				; optimize OK (service.pas), line = 1749
  9079
  9080 5C59 AD 64 A0			lda WL
  9081 5C5C 38 E9 01			sub #$01
  9082 5C5F 85 86			sta @SMALLINT.MOD.A
  9083 5C61 A9 00			lda #$00
  9084 5C63 E9 00			sbc #$00
  9085 5C65 85 87			sta @SMALLINT.MOD.A+1
  9086 5C67 A9 04			lda #$04
  9087 5C69 85 8E			sta @SMALLINT.MOD.B
  9088 5C6B A9 00			lda #$00
  9089 5C6D 85 8F			sta @SMALLINT.MOD.B+1
  9090 5C6F 20 50 22			jsr @SMALLINT.MOD
  9091 5C72 A5 92			lda @SMALLINT.MOD.RESULT
  9092 5C74 8D 64 A0			sta WL
  9093
  9094 				; optimize OK (service.pas), line = 1751
  9095
  9096 5C77 8D 65 A0			sta @CASETMP_0008
  9097 5C7A C9 00			cmp #$00
  9098 5C7C D0 33			jne l_1620
  9099 				@
  9100
  9101 				; optimize OK (service.pas), line = 1752
  9102
  9103 5C7E AD ED 9E 8D E5 9E + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9104 5CAE 4C 8A 5D			jmp a_0008
  9105 5CB1			l_1620
  9106 5CB1 C9 01			cmp #$01
  9107 5CB3 D0 33			jne l_1629
  9108
  9109 				; optimize OK (service.pas), line = 1753
  9110
  9111 5CB5 AD F5 9E 8D E5 9E + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9112 5CE5 4C 8A 5D			jmp a_0008
  9113 5CE8			l_1629
  9114 5CE8 C9 02			cmp #$02
  9115 5CEA D0 33			jne l_1632
  9116
  9117 				; optimize OK (service.pas), line = 1754
  9118
  9119 5CEC AD FD 9E 8D E5 9E + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9120 5D1C 4C 8A 5D			jmp a_0008
  9121 5D1F			l_1632
  9122 5D1F C9 03			cmp #$03
  9123 5D21 D0 33			jne l_163B
  9124
  9125 				; optimize OK (service.pas), line = 1755
  9126
  9127 5D23 AD 05 9F 8D E5 9E + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9128 5D53 4C 8A 5D			jmp a_0008
  9129 5D56			l_163B
  9130 5D56 C9 04			cmp #$04
  9131 5D58 D0 30			jne l_1644
  9132
  9133 				; optimize OK (service.pas), line = 1756
  9134
  9135 5D5A AD 0D 9F 8D E5 9E + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9136 5D8A			l_1644
  9137 5D8A			a_0008
  9138
  9139 				; ------------------------------------------------------------
  9140
  9141 = A062			X	= DATAORIGIN+$02FE
  9142 = A063			Y	= DATAORIGIN+$02FF
  9143 = A064			WL	= DATAORIGIN+$0300
  9144 = A065			@CASETMP_0008	= DATAORIGIN+$0301
  9145
  9146 = A062			@VarData	= X
  9147 = 0004			@VarDataSize	= 4
  9148
  9149 5D8A			@exit
  9150 					.ifdef @new
  9151 					lda <@VarData
  9152 					sta :ztmp
  9153 					lda >@VarData
  9154 					ldy #@VarDataSize-1
  9155 					jmp @FreeMem
  9156 					els
  9157 5D8A 60				rts						; ret
  9158 					eif
  9159 				.endl
  9160
  9161 5D8B			.local	SPLIT_LINE					; FUNCTION
  9162
  9163 				; optimize OK (service.pas), line = 1795
  9164
  9165 5D8B AC 66 A0 84 84 AC + 	mwy X1 :bp2
  9166 5D95 A0 00			ldy #$00
  9167 5D97 B1 84			lda (:bp2),y
  9168 5D99 18 69 10			add #$10
  9169 5D9C 91 84			sta (:bp2),y
  9170 5D9E C8				iny
  9171 5D9F B1 84			lda (:bp2),y
  9172 5DA1 69 00			adc #$00
  9173 5DA3 91 84			sta (:bp2),y
  9174
  9175 				; optimize OK (service.pas), line = 1796
  9176
  9177 5DA5 AC 68 A0 84 84 AC + 	mwy Y1 :bp2
  9178 5DAF A0 00			ldy #$00
  9179 5DB1 B1 84			lda (:bp2),y
  9180 5DB3 18 69 18			add #$18
  9181 5DB6 91 84			sta (:bp2),y
  9182 5DB8 C8				iny
  9183 5DB9 B1 84			lda (:bp2),y
  9184 5DBB 69 00			adc #$00
  9185 5DBD 91 84			sta (:bp2),y
  9186
  9187 				; optimize OK (service.pas), line = 1797
  9188
  9189 5DBF AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9190 5DC9 A0 00			ldy #$00
  9191 5DCB B1 84			lda (:bp2),y
  9192 5DCD 18 69 10			add #$10
  9193 5DD0 91 84			sta (:bp2),y
  9194 5DD2 C8				iny
  9195 5DD3 B1 84			lda (:bp2),y
  9196 5DD5 69 00			adc #$00
  9197 5DD7 91 84			sta (:bp2),y
  9198
  9199 				; optimize OK (service.pas), line = 1798
  9200
  9201 5DD9 AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9202 5DE3 A0 00			ldy #$00
  9203 5DE5 B1 84			lda (:bp2),y
  9204 5DE7 18 69 18			add #$18
  9205 5DEA 91 84			sta (:bp2),y
  9206 5DEC C8				iny
  9207 5DED B1 84			lda (:bp2),y
  9208 5DEF 69 00			adc #$00
  9209 5DF1 91 84			sta (:bp2),y
  9210
  9211 				; optimize OK (service.pas), line = 1800
  9212
  9213 5DF3 A9 00			lda #$00
  9214 5DF5 8D 8F A0			sta COLLISION
  9215
  9216 				; optimize OK (service.pas), line = 1802
  9217
  9218 5DF8 AC 66 A0 84 84 AC + 	mwy X1 :bp2
  9219 5E02 A0 00			ldy #$00
  9220 5E04 B1 84			lda (:bp2),y
  9221 5E06 85 9F			sta :STACKORIGIN+9
  9222 5E08 C8				iny
  9223 5E09 B1 84			lda (:bp2),y
  9224 5E0B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9225 5E0D A0 00			ldy #$00
  9226 5E0F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9227 5E11 10 01			spl
  9228 5E13 88				dey
  9229 5E14 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9230 5E16 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9231 5E18 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9232 5E1A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9233 5E1C 66 9F			ror :STACKORIGIN+9
  9234 5E1E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9235 5E20 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9236 5E22 66 9F			ror :STACKORIGIN+9
  9237 5E24 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9238 5E26 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9239 5E28 66 9F			ror :STACKORIGIN+9
  9240 5E2A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9241 5E2C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9242 5E2E 66 9F			ror :STACKORIGIN+9
  9243 5E30 A5 9F			lda :STACKORIGIN+9
  9244 5E32 8D 83 A0			sta XP1
  9245 5E35 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9246 5E37 8D 84 A0			sta XP1+1
  9247
  9248 				; optimize OK (service.pas), line = 1803
  9249
  9250 5E3A AC 68 A0 84 84 AC + 	mwy Y1 :bp2
  9251 5E44 A0 00			ldy #$00
  9252 5E46 B1 84			lda (:bp2),y
  9253 5E48 85 9F			sta :STACKORIGIN+9
  9254 5E4A C8				iny
  9255 5E4B B1 84			lda (:bp2),y
  9256 5E4D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9257 5E4F A0 00			ldy #$00
  9258 5E51 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9259 5E53 10 01			spl
  9260 5E55 88				dey
  9261 5E56 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9262 5E58 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9263 5E5A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9264 5E5C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9265 5E5E 66 9F			ror :STACKORIGIN+9
  9266 5E60 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9267 5E62 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9268 5E64 66 9F			ror :STACKORIGIN+9
  9269 5E66 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9270 5E68 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9271 5E6A 66 9F			ror :STACKORIGIN+9
  9272 5E6C A5 9F			lda :STACKORIGIN+9
  9273 5E6E 8D 85 A0			sta YP1
  9274 5E71 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9275 5E73 8D 86 A0			sta YP1+1
  9276
  9277 				; optimize OK (service.pas), line = 1804
  9278
  9279 5E76 AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9280 5E80 A0 00			ldy #$00
  9281 5E82 B1 84			lda (:bp2),y
  9282 5E84 85 9F			sta :STACKORIGIN+9
  9283 5E86 C8				iny
  9284 5E87 B1 84			lda (:bp2),y
  9285 5E89 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9286 5E8B A0 00			ldy #$00
  9287 5E8D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9288 5E8F 10 01			spl
  9289 5E91 88				dey
  9290 5E92 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9291 5E94 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9292 5E96 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9293 5E98 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9294 5E9A 66 9F			ror :STACKORIGIN+9
  9295 5E9C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9296 5E9E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9297 5EA0 66 9F			ror :STACKORIGIN+9
  9298 5EA2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9299 5EA4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9300 5EA6 66 9F			ror :STACKORIGIN+9
  9301 5EA8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9302 5EAA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9303 5EAC 66 9F			ror :STACKORIGIN+9
  9304 5EAE A5 9F			lda :STACKORIGIN+9
  9305 5EB0 8D 87 A0			sta XP2
  9306 5EB3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9307 5EB5 8D 88 A0			sta XP2+1
  9308
  9309 				; optimize OK (service.pas), line = 1805
  9310
  9311 5EB8 AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9312 5EC2 A0 00			ldy #$00
  9313 5EC4 B1 84			lda (:bp2),y
  9314 5EC6 85 9F			sta :STACKORIGIN+9
  9315 5EC8 C8				iny
  9316 5EC9 B1 84			lda (:bp2),y
  9317 5ECB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9318 5ECD A0 00			ldy #$00
  9319 5ECF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9320 5ED1 10 01			spl
  9321 5ED3 88				dey
  9322 5ED4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9323 5ED6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9324 5ED8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9325 5EDA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9326 5EDC 66 9F			ror :STACKORIGIN+9
  9327 5EDE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9328 5EE0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9329 5EE2 66 9F			ror :STACKORIGIN+9
  9330 5EE4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9331 5EE6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9332 5EE8 66 9F			ror :STACKORIGIN+9
  9333 5EEA A5 9F			lda :STACKORIGIN+9
  9334 5EEC 8D 89 A0			sta YP2
  9335 5EEF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9336 5EF1 8D 8A A0			sta YP2+1
  9337
  9338 				; optimize OK (service.pas), line = 1807
  9339
  9340 5EF4 AC 66 A0 84 84 AC + 	mwy X1 :bp2
  9341 5EFE A0 00			ldy #$00
  9342 5F00 B1 84			lda (:bp2),y
  9343 5F02 8D 73 A0			sta XK
  9344 5F05 C8				iny
  9345 5F06 B1 84			lda (:bp2),y
  9346 5F08 8D 74 A0			sta XK+1
  9347
  9348 				; optimize OK (service.pas), line = 1808
  9349
  9350 5F0B AC 68 A0 84 84 AC + 	mwy Y1 :bp2
  9351 5F15 A0 00			ldy #$00
  9352 5F17 B1 84			lda (:bp2),y
  9353 5F19 8D 75 A0			sta YK
  9354 5F1C C8				iny
  9355 5F1D B1 84			lda (:bp2),y
  9356 5F1F 8D 76 A0			sta YK+1
  9357
  9358 				; optimize OK (service.pas), line = 1809
  9359
  9360 5F22 AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9361 5F2C A0 00			ldy #$00
  9362 5F2E B1 84			lda (:bp2),y
  9363 5F30 8D 77 A0			sta XJ
  9364 5F33 C8				iny
  9365 5F34 B1 84			lda (:bp2),y
  9366 5F36 8D 78 A0			sta XJ+1
  9367
  9368 				; optimize OK (service.pas), line = 1810
  9369
  9370 5F39 AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9371 5F43 A0 00			ldy #$00
  9372 5F45 B1 84			lda (:bp2),y
  9373 5F47 8D 79 A0			sta YJ
  9374 5F4A C8				iny
  9375 5F4B B1 84			lda (:bp2),y
  9376 5F4D 8D 7A A0			sta YJ+1
  9377
  9378 				; optimize OK (service.pas), line = 1812
  9379
  9380 5F50 AC 66 A0 84 84 AC + 	mwy X1 :bp2
  9381 5F5A A0 00			ldy #$00
  9382 5F5C B1 84			lda (:bp2),y
  9383 5F5E 8D 7B A0			sta XH
  9384 5F61 C8				iny
  9385 5F62 B1 84			lda (:bp2),y
  9386 5F64 8D 7C A0			sta XH+1
  9387
  9388 				; optimize OK (service.pas), line = 1813
  9389
  9390 5F67 AC 68 A0 84 84 AC + 	mwy Y1 :bp2
  9391 5F71 A0 00			ldy #$00
  9392 5F73 B1 84			lda (:bp2),y
  9393 5F75 8D 7D A0			sta YH
  9394 5F78 C8				iny
  9395 5F79 B1 84			lda (:bp2),y
  9396 5F7B 8D 7E A0			sta YH+1
  9397
  9398 				; optimize OK (service.pas), line = 1814
  9399
  9400 5F7E AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9401 5F88 A0 00			ldy #$00
  9402 5F8A B1 84			lda (:bp2),y
  9403 5F8C 8D 7F A0			sta XN
  9404 5F8F C8				iny
  9405 5F90 B1 84			lda (:bp2),y
  9406 5F92 8D 80 A0			sta XN+1
  9407
  9408 				; optimize OK (service.pas), line = 1815
  9409
  9410 5F95 AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9411 5F9F A0 00			ldy #$00
  9412 5FA1 B1 84			lda (:bp2),y
  9413 5FA3 8D 81 A0			sta YN
  9414 5FA6 C8				iny
  9415 5FA7 B1 84			lda (:bp2),y
  9416 5FA9 8D 82 A0			sta YN+1
  9417
  9418 				; optimize OK (service.pas), line = 1822
  9419
  9420 5FAC AC 66 A0 84 84 AC + 	mwy X1 :bp2
  9421 5FB6 A0 00			ldy #$00
  9422 5FB8 B1 84			lda (:bp2),y
  9423 5FBA 85 9F			sta :STACKORIGIN+9
  9424 5FBC C8				iny
  9425 5FBD B1 84			lda (:bp2),y
  9426 5FBF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9427 5FC1 AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9428 5FCB A0 00			ldy #$00
  9429 5FCD B1 84			lda (:bp2),y
  9430 5FCF 85 A0			sta :STACKORIGIN+10
  9431 5FD1 C8				iny
  9432 5FD2 B1 84			lda (:bp2),y
  9433 5FD4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9434 5FD6 A0 00			ldy #$00
  9435 5FD8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9436 5FDA 10 01			spl
  9437 5FDC 88				dey
  9438 5FDD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9439 5FDF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9440 5FE1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9441 5FE3 A0 00			ldy #$00
  9442 5FE5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9443 5FE7 10 01			spl
  9444 5FE9 88				dey
  9445 5FEA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9446 5FEC 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9447 5FEE 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9448 5FF0 A5 9F			lda :STACKORIGIN+9
  9449 5FF2 38 E5 A0			sub :STACKORIGIN+10
  9450 5FF5 85 8A			sta SYSTEM.ABS.@010185000.X
  9451 5FF7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9452 5FF9 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9453 5FFB 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9454 5FFD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9455 5FFF E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9456 6001 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9457 6003 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9458 6005 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9459 6007 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9460 6009 20 E9 2A			jsr SYSTEM.ABS.@010185000
  9461 600C E8				inx
  9462 600D A0 01			ldy #1
  9463 600F				.LOCAL
  9464 600F A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9465 6011 38 E9 00			sub #$00
  9466 6014 D0 1C			bne L4
  9467 6016 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9468 6018 C9 00			cmp #$00
  9469 601A D0 0A			bne L1
  9470 601C A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9471 601E C9 00			cmp #$00
  9472 6020 D0 04			bne L1
  9473 6022 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9474 6024 C9 10			cmp #$10
  9475 6026 F0 10		L1	beq L5
  9476 6028 B0 04			bcs L3
  9477 602A A9 FF			lda #$FF
  9478 602C D0 0A			bne L5
  9479 602E A9 01		L3	lda #$01
  9480 6030 D0 06			bne L5
  9481 6032 50 04		L4	bvc L5
  9482 6034 49 FF			eor #$FF
  9483 6036 09 01			ora #$01
  9484 6038			L5
  9485 					.ENDL
  9486 6038 F0 02			seq
  9487 603A 10 01			bpl @+
  9488 603C 88				dey
  9489 				@
  9490 603D 94 96			sty :STACKORIGIN,x
  9491 603F AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9492 6049 A0 00			ldy #$00
  9493 604B B1 84			lda (:bp2),y
  9494 604D 85 9F			sta :STACKORIGIN+9
  9495 604F C8				iny
  9496 6050 B1 84			lda (:bp2),y
  9497 6052 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9498 6054 AC 68 A0 84 84 AC + 	mwy Y1 :bp2
  9499 605E A0 00			ldy #$00
  9500 6060 B1 84			lda (:bp2),y
  9501 6062 85 A0			sta :STACKORIGIN+10
  9502 6064 C8				iny
  9503 6065 B1 84			lda (:bp2),y
  9504 6067 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9505 6069 A0 00			ldy #$00
  9506 606B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9507 606D 10 01			spl
  9508 606F 88				dey
  9509 6070 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9510 6072 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9511 6074 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9512 6076 A0 00			ldy #$00
  9513 6078 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9514 607A 10 01			spl
  9515 607C 88				dey
  9516 607D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9517 607F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9518 6081 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9519 6083 A5 9F			lda :STACKORIGIN+9
  9520 6085 38 E5 A0			sub :STACKORIGIN+10
  9521 6088 85 8A			sta SYSTEM.ABS.@010185000.X
  9522 608A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9523 608C E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9524 608E 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9525 6090 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9526 6092 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9527 6094 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9528 6096 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9529 6098 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9530 609A 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9531 609C 20 E9 2A			jsr SYSTEM.ABS.@010185000
  9532 609F CA				dex
  9533 60A0 A0 01			ldy #1
  9534 60A2				.LOCAL
  9535 60A2 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9536 60A4 38 E9 00			sub #$00
  9537 60A7 D0 1C			bne L4
  9538 60A9 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9539 60AB C9 00			cmp #$00
  9540 60AD D0 0A			bne L1
  9541 60AF A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9542 60B1 C9 00			cmp #$00
  9543 60B3 D0 04			bne L1
  9544 60B5 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9545 60B7 C9 08			cmp #$08
  9546 60B9 F0 10		L1	beq L5
  9547 60BB B0 04			bcs L3
  9548 60BD A9 FF			lda #$FF
  9549 60BF D0 0A			bne L5
  9550 60C1 A9 01		L3	lda #$01
  9551 60C3 D0 06			bne L5
  9552 60C5 50 04		L4	bvc L5
  9553 60C7 49 FF			eor #$FF
  9554 60C9 09 01			ora #$01
  9555 60CB			L5
  9556 					.ENDL
  9557 60CB F0 02			seq
  9558 60CD 10 01			bpl @+
  9559 60CF 88				dey
  9560 				@
  9561 60D0 98				tya
  9562 60D1 15 97			ora :STACKORIGIN+1,x
  9563 60D3 F0 05			jeq l_16CD
  9564
  9565 				; optimize OK (service.pas), line = 1823
  9566
  9567 60D5 A9 01			lda #$01
  9568 60D7 20 AA 3C			jsr FATAL_ERROR
  9569 60DA			l_16CD
  9570
  9571 				; optimize OK (service.pas), line = 1826
  9572
  9573 60DA AD 84 A0			lda XP1+1
  9574 60DD CD 88 A0			cmp XP2+1
  9575 60E0 D0 06			bne @+
  9576 60E2 AD 83 A0			lda XP1
  9577 60E5 CD 87 A0			cmp XP2
  9578 				@
  9579 60E8 D0 13			jne l_16F0x
  9580 60EA AD 86 A0			lda YP1+1
  9581 60ED CD 8A A0			cmp YP2+1
  9582 60F0 D0 06			bne @+
  9583 60F2 AD 85 A0			lda YP1
  9584 60F5 CD 89 A0			cmp YP2
  9585 				@
  9586 60F8 D0 03 4C 3B 64		jeq l_16F0
  9587 60FD			l_16F0x
  9588
  9589 				; optimize OK (service.pas), line = 1828
  9590
  9591 60FD AD 86 A0			lda YP1+1
  9592 6100 CD 8A A0			cmp YP2+1
  9593 6103 D0 06			bne @+
  9594 6105 AD 85 A0			lda YP1
  9595 6108 CD 89 A0			cmp YP2
  9596 				@
  9597 610B D0 03 4C 46 62		jeq l_1703
  9598
  9599 				; optimize OK (service.pas), line = 1830
  9600
  9601 6110 AD 8F A0			lda COLLISION
  9602 6113 09 01			ora #$01
  9603 6115 8D 8F A0			sta COLLISION
  9604
  9605 				; --- WhileProlog
  9606 6118 4C 33 62			jmp l_1710
  9607 611B			l_1711
  9608
  9609 				; optimize OK (service.pas), line = 1834
  9610
  9611 611B AD 7B A0			lda XH
  9612 611E 85 9F			sta :STACKORIGIN+9
  9613 6120 A0 00			ldy #$00
  9614 6122 AD 7C A0			lda XH+1
  9615 6125 10 01			spl
  9616 6127 88				dey
  9617 6128 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9618 612A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9619 612C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9620 612E AD 7F A0			lda XN
  9621 6131 85 A0			sta :STACKORIGIN+10
  9622 6133 A0 00			ldy #$00
  9623 6135 AD 80 A0			lda XN+1
  9624 6138 10 01			spl
  9625 613A 88				dey
  9626 613B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9627 613D 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9628 613F 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9629 6141 A5 9F			lda :STACKORIGIN+9
  9630 6143 18 65 A0			add :STACKORIGIN+10
  9631 6146 85 9F			sta :STACKORIGIN+9
  9632 6148 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9633 614A 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9634 614C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9635 614E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9636 6150 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9637 6152 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9638 6154 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9639 6156 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9640 6158 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9641 615A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9642 615C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9643 615E 66 9F			ror :STACKORIGIN+9
  9644 6160 A5 9F			lda :STACKORIGIN+9
  9645 6162 8D 6F A0			sta X
  9646 6165 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9647 6167 8D 70 A0			sta X+1
  9648
  9649 				; optimize OK (service.pas), line = 1835
  9650
  9651 616A AD 7D A0			lda YH
  9652 616D 85 9F			sta :STACKORIGIN+9
  9653 616F A0 00			ldy #$00
  9654 6171 AD 7E A0			lda YH+1
  9655 6174 10 01			spl
  9656 6176 88				dey
  9657 6177 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9658 6179 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9659 617B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9660 617D AD 81 A0			lda YN
  9661 6180 85 A0			sta :STACKORIGIN+10
  9662 6182 A0 00			ldy #$00
  9663 6184 AD 82 A0			lda YN+1
  9664 6187 10 01			spl
  9665 6189 88				dey
  9666 618A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9667 618C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9668 618E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9669 6190 A5 9F			lda :STACKORIGIN+9
  9670 6192 18 65 A0			add :STACKORIGIN+10
  9671 6195 85 9F			sta :STACKORIGIN+9
  9672 6197 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9673 6199 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9674 619B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9675 619D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9676 619F 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9677 61A1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9678 61A3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9679 61A5 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9680 61A7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9681 61A9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9682 61AB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9683 61AD 66 9F			ror :STACKORIGIN+9
  9684 61AF A5 9F			lda :STACKORIGIN+9
  9685 61B1 8D 71 A0			sta Y
  9686 61B4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9687 61B6 8D 72 A0			sta Y+1
  9688
  9689 				; optimize OK (service.pas), line = 1837
  9690
  9691 61B9 AD 71 A0			lda Y
  9692 61BC 85 9F			sta :STACKORIGIN+9
  9693 61BE A0 00			ldy #$00
  9694 61C0 AD 72 A0			lda Y+1
  9695 61C3 10 01			spl
  9696 61C5 88				dey
  9697 61C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9698 61C8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9699 61CA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9700 61CC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9701 61CE 66 9F			ror :STACKORIGIN+9
  9702 61D0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9703 61D2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9704 61D4 66 9F			ror :STACKORIGIN+9
  9705 61D6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9706 61D8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9707 61DA 66 9F			ror :STACKORIGIN+9
  9708 61DC A5 9F			lda :STACKORIGIN+9
  9709 61DE 8D 8D A0			sta YP
  9710 61E1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9711 61E3 8D 8E A0			sta YP+1
  9712
  9713 				; optimize OK (service.pas), line = 1839
  9714
  9715 61E6 CD 86 A0			cmp YP1+1
  9716 61E9 D0 06			bne @+
  9717 61EB AD 8D A0			lda YP
  9718 61EE CD 85 A0			cmp YP1
  9719 				@
  9720 61F1 D0 18			jne l_1748
  9721
  9722 				; optimize OK (service.pas), line = 1841
  9723
  9724 61F3 AD 6F A0			lda X
  9725 61F6 8D 7B A0			sta XH
  9726 61F9 AD 70 A0			lda X+1
  9727 61FC 8D 7C A0			sta XH+1
  9728
  9729 				; optimize OK (service.pas), line = 1842
  9730
  9731 61FF AD 71 A0			lda Y
  9732 6202 8D 7D A0			sta YH
  9733 6205 AD 72 A0			lda Y+1
  9734 6208 8D 7E A0			sta YH+1
  9735 620B			l_1748
  9736
  9737 				; optimize OK (service.pas), line = 1845
  9738
  9739 620B AD 8E A0			lda YP+1
  9740 620E CD 8A A0			cmp YP2+1
  9741 6211 D0 06			bne @+
  9742 6213 AD 8D A0			lda YP
  9743 6216 CD 89 A0			cmp YP2
  9744 				@
  9745 6219 D0 18			jne l_1767
  9746
  9747 				; optimize OK (service.pas), line = 1847
  9748
  9749 621B AD 6F A0			lda X
  9750 621E 8D 7F A0			sta XN
  9751 6221 AD 70 A0			lda X+1
  9752 6224 8D 80 A0			sta XN+1
  9753
  9754 				; optimize OK (service.pas), line = 1848
  9755
  9756 6227 AD 71 A0			lda Y
  9757 622A 8D 81 A0			sta YN
  9758 622D AD 72 A0			lda Y+1
  9759 6230 8D 82 A0			sta YN+1
  9760 6233			l_1767
  9761 6233			l_1710
  9762
  9763 				; optimize OK (service.pas), line = 1832
  9764
  9765 6233 AD 81 A0			lda YN
  9766 6236 29 07			and #$07
  9767 6238 F0 0C			jeq l_1711w
  9768 623A AD 81 A0			lda YN
  9769 623D 29 07			and #$07
  9770 623F C9 07			cmp #$07
  9771 6241 F0 03 4C 1B 61		jne l_1711
  9772 6246			l_1711w
  9773 6246			l_1703
  9774
  9775 				; optimize OK (service.pas), line = 1854
  9776
  9777 6246 AD 84 A0			lda XP1+1
  9778 6249 CD 88 A0			cmp XP2+1
  9779 624C D0 06			bne @+
  9780 624E AD 83 A0			lda XP1
  9781 6251 CD 87 A0			cmp XP2
  9782 				@
  9783 6254 D0 03 4C 95 63		jeq l_17A6
  9784
  9785 				; optimize OK (service.pas), line = 1856
  9786
  9787 6259 AD 8F A0			lda COLLISION
  9788 625C 09 02			ora #$02
  9789 625E 8D 8F A0			sta COLLISION
  9790
  9791 				; --- WhileProlog
  9792 6261 4C 82 63			jmp l_17B3
  9793 6264			l_17B4
  9794
  9795 				; optimize OK (service.pas), line = 1860
  9796
  9797 6264 AD 73 A0			lda XK
  9798 6267 85 9F			sta :STACKORIGIN+9
  9799 6269 A0 00			ldy #$00
  9800 626B AD 74 A0			lda XK+1
  9801 626E 10 01			spl
  9802 6270 88				dey
  9803 6271 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9804 6273 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9805 6275 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9806 6277 AD 77 A0			lda XJ
  9807 627A 85 A0			sta :STACKORIGIN+10
  9808 627C A0 00			ldy #$00
  9809 627E AD 78 A0			lda XJ+1
  9810 6281 10 01			spl
  9811 6283 88				dey
  9812 6284 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9813 6286 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9814 6288 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9815 628A A5 9F			lda :STACKORIGIN+9
  9816 628C 18 65 A0			add :STACKORIGIN+10
  9817 628F 85 9F			sta :STACKORIGIN+9
  9818 6291 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9819 6293 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9820 6295 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9821 6297 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9822 6299 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9823 629B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9824 629D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9825 629F 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9826 62A1 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9827 62A3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9828 62A5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9829 62A7 66 9F			ror :STACKORIGIN+9
  9830 62A9 A5 9F			lda :STACKORIGIN+9
  9831 62AB 8D 6F A0			sta X
  9832 62AE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9833 62B0 8D 70 A0			sta X+1
  9834
  9835 				; optimize OK (service.pas), line = 1861
  9836
  9837 62B3 AD 75 A0			lda YK
  9838 62B6 85 9F			sta :STACKORIGIN+9
  9839 62B8 A0 00			ldy #$00
  9840 62BA AD 76 A0			lda YK+1
  9841 62BD 10 01			spl
  9842 62BF 88				dey
  9843 62C0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9844 62C2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9845 62C4 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9846 62C6 AD 79 A0			lda YJ
  9847 62C9 85 A0			sta :STACKORIGIN+10
  9848 62CB A0 00			ldy #$00
  9849 62CD AD 7A A0			lda YJ+1
  9850 62D0 10 01			spl
  9851 62D2 88				dey
  9852 62D3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9853 62D5 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9854 62D7 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9855 62D9 A5 9F			lda :STACKORIGIN+9
  9856 62DB 18 65 A0			add :STACKORIGIN+10
  9857 62DE 85 9F			sta :STACKORIGIN+9
  9858 62E0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9859 62E2 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9860 62E4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9861 62E6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9862 62E8 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9863 62EA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9864 62EC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9865 62EE 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9866 62F0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9867 62F2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9868 62F4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9869 62F6 66 9F			ror :STACKORIGIN+9
  9870 62F8 A5 9F			lda :STACKORIGIN+9
  9871 62FA 8D 71 A0			sta Y
  9872 62FD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9873 62FF 8D 72 A0			sta Y+1
  9874
  9875 				; optimize OK (service.pas), line = 1863
  9876
  9877 6302 AD 6F A0			lda X
  9878 6305 85 9F			sta :STACKORIGIN+9
  9879 6307 A0 00			ldy #$00
  9880 6309 AD 70 A0			lda X+1
  9881 630C 10 01			spl
  9882 630E 88				dey
  9883 630F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9884 6311 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9885 6313 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9886 6315 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9887 6317 66 9F			ror :STACKORIGIN+9
  9888 6319 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9889 631B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9890 631D 66 9F			ror :STACKORIGIN+9
  9891 631F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9892 6321 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9893 6323 66 9F			ror :STACKORIGIN+9
  9894 6325 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9895 6327 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9896 6329 66 9F			ror :STACKORIGIN+9
  9897 632B A5 9F			lda :STACKORIGIN+9
  9898 632D 8D 8B A0			sta XP
  9899 6330 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9900 6332 8D 8C A0			sta XP+1
  9901
  9902 				; optimize OK (service.pas), line = 1865
  9903
  9904 6335 CD 84 A0			cmp XP1+1
  9905 6338 D0 06			bne @+
  9906 633A AD 8B A0			lda XP
  9907 633D CD 83 A0			cmp XP1
  9908 				@
  9909 6340 D0 18			jne l_17EB
  9910
  9911 				; optimize OK (service.pas), line = 1867
  9912
  9913 6342 AD 6F A0			lda X
  9914 6345 8D 73 A0			sta XK
  9915 6348 AD 70 A0			lda X+1
  9916 634B 8D 74 A0			sta XK+1
  9917
  9918 				; optimize OK (service.pas), line = 1868
  9919
  9920 634E AD 71 A0			lda Y
  9921 6351 8D 75 A0			sta YK
  9922 6354 AD 72 A0			lda Y+1
  9923 6357 8D 76 A0			sta YK+1
  9924 635A			l_17EB
  9925
  9926 				; optimize OK (service.pas), line = 1871
  9927
  9928 635A AD 8C A0			lda XP+1
  9929 635D CD 88 A0			cmp XP2+1
  9930 6360 D0 06			bne @+
  9931 6362 AD 8B A0			lda XP
  9932 6365 CD 87 A0			cmp XP2
  9933 				@
  9934 6368 D0 18			jne l_180A
  9935
  9936 				; optimize OK (service.pas), line = 1873
  9937
  9938 636A AD 6F A0			lda X
  9939 636D 8D 77 A0			sta XJ
  9940 6370 AD 70 A0			lda X+1
  9941 6373 8D 78 A0			sta XJ+1
  9942
  9943 				; optimize OK (service.pas), line = 1874
  9944
  9945 6376 AD 71 A0			lda Y
  9946 6379 8D 79 A0			sta YJ
  9947 637C AD 72 A0			lda Y+1
  9948 637F 8D 7A A0			sta YJ+1
  9949 6382			l_180A
  9950 6382			l_17B3
  9951
  9952 				; optimize OK (service.pas), line = 1858
  9953
  9954 6382 AD 77 A0			lda XJ
  9955 6385 29 0F			and #$0F
  9956 6387 F0 0C			jeq l_17B4w
  9957 6389 AD 77 A0			lda XJ
  9958 638C 29 0F			and #$0F
  9959 638E C9 0F			cmp #$0F
  9960 6390 F0 03 4C 64 62		jne l_17B4
  9961 6395			l_17B4w
  9962 6395			l_17A6
  9963
  9964 				; optimize OK (service.pas), line = 1885
  9965
  9966 6395 AD 8F A0			lda COLLISION
  9967 6398 C9 01			cmp #$01
  9968 639A D0 03			jne l_1849
  9969 				; optimize OK (service.pas), line = 1887
  9970 				; optimize OK (service.pas), line = 1888
  9971 639C 4C 0A 64			jmp l_185D
  9972 639F			l_1849
  9973
  9974 				; optimize OK (service.pas), line = 1890
  9975
  9976 639F AD 8F A0			lda COLLISION
  9977 63A2 C9 02			cmp #$02
  9978 63A4 D0 2F			jne l_186F
  9979
  9980 				; optimize OK (service.pas), line = 1892
  9981
  9982 63A6 AC 6A A0 84 84 AC + 	mwy X2 :bp2
  9983 63B0 A0 00			ldy #$00
  9984 63B2 AD 77 A0			lda XJ
  9985 63B5 91 84			sta (:bp2),y
  9986 63B7 C8				iny
  9987 63B8 AD 78 A0			lda XJ+1
  9988 63BB 91 84			sta (:bp2),y
  9989
  9990 				; optimize OK (service.pas), line = 1893
  9991
  9992 63BD AC 6C A0 84 84 AC + 	mwy Y2 :bp2
  9993 63C7 A0 00			ldy #$00
  9994 63C9 AD 79 A0			lda YJ
  9995 63CC 91 84			sta (:bp2),y
  9996 63CE C8				iny
  9997 63CF AD 7A A0			lda YJ+1
  9998 63D2 4C 36 64			jmp l_1883
  9999 63D5			l_186F
 10000
 10001 				; optimize OK (service.pas), line = 1895
 10002
 10003 63D5 AD 8F A0			lda COLLISION
 10004 63D8 C9 03			cmp #$03
 10005 63DA D0 5C			jne l_1895
 10006
 10007 				; optimize OK (service.pas), line = 1897
 10008
 10009 63DC AC 66 A0 84 84 AC + 	mwy X1 :bp2
 10010 63E6 A0 00			ldy #$00
 10011 63E8 AD 77 A0			lda XJ
 10012 63EB 91 84			sta (:bp2),y
 10013 63ED C8				iny
 10014 63EE AD 78 A0			lda XJ+1
 10015 63F1 91 84			sta (:bp2),y
 10016
 10017 				; optimize OK (service.pas), line = 1898
 10018
 10019 63F3 AC 68 A0 84 84 AC + 	mwy Y1 :bp2
 10020 63FD A0 00			ldy #$00
 10021 63FF AD 79 A0			lda YJ
 10022 6402 91 84			sta (:bp2),y
 10023 6404 C8				iny
 10024 6405 AD 7A A0			lda YJ+1
 10025 6408 91 84			sta (:bp2),y
 10026 640A			l_185D
 10027
 10028 				; optimize OK (service.pas), line = 1899
 10029
 10030 640A AC 6A A0 84 84 AC + 	mwy X2 :bp2
 10031 6414 A0 00			ldy #$00
 10032 6416 AD 7F A0			lda XN
 10033 6419 91 84			sta (:bp2),y
 10034 641B C8				iny
 10035 641C AD 80 A0			lda XN+1
 10036 641F 91 84			sta (:bp2),y
 10037
 10038 				; optimize OK (service.pas), line = 1900
 10039
 10040 6421 AC 6C A0 84 84 AC + 	mwy Y2 :bp2
 10041 642B A0 00			ldy #$00
 10042 642D AD 81 A0			lda YN
 10043 6430 91 84			sta (:bp2),y
 10044 6432 C8				iny
 10045 6433 AD 82 A0			lda YN+1
 10046 6436			l_1883
 10047 6436 91 84			sta (:bp2),y
 10048 6438			l_1895
 10049 6438 4C 40 64			jmp l_18B5
 10050 643B			l_16F0
 10051
 10052 				; optimize OK (service.pas), line = 1905
 10053
 10054 643B A9 02			lda #$02
 10055 643D 20 AA 3C			jsr FATAL_ERROR
 10056 6440			l_18B5
 10057
 10058 				; optimize OK (service.pas), line = 1908
 10059
 10060 6440 AC 66 A0 84 84 AC + 	mwy X1 :bp2
 10061 644A A0 00			ldy #$00
 10062 644C B1 84			lda (:bp2),y
 10063 644E 38 E9 10			sub #$10
 10064 6451 91 84			sta (:bp2),y
 10065 6453 C8				iny
 10066 6454 B1 84			lda (:bp2),y
 10067 6456 E9 00			sbc #$00
 10068 6458 91 84			sta (:bp2),y
 10069
 10070 				; optimize OK (service.pas), line = 1909
 10071
 10072 645A AC 68 A0 84 84 AC + 	mwy Y1 :bp2
 10073 6464 A0 00			ldy #$00
 10074 6466 B1 84			lda (:bp2),y
 10075 6468 38 E9 18			sub #$18
 10076 646B 91 84			sta (:bp2),y
 10077 646D C8				iny
 10078 646E B1 84			lda (:bp2),y
 10079 6470 E9 00			sbc #$00
 10080 6472 91 84			sta (:bp2),y
 10081
 10082 				; optimize OK (service.pas), line = 1910
 10083
 10084 6474 AC 6A A0 84 84 AC + 	mwy X2 :bp2
 10085 647E A0 00			ldy #$00
 10086 6480 B1 84			lda (:bp2),y
 10087 6482 38 E9 10			sub #$10
 10088 6485 91 84			sta (:bp2),y
 10089 6487 C8				iny
 10090 6488 B1 84			lda (:bp2),y
 10091 648A E9 00			sbc #$00
 10092 648C 91 84			sta (:bp2),y
 10093
 10094 				; optimize OK (service.pas), line = 1911
 10095
 10096 648E AC 6C A0 84 84 AC + 	mwy Y2 :bp2
 10097 6498 A0 00			ldy #$00
 10098 649A B1 84			lda (:bp2),y
 10099 649C 38 E9 18			sub #$18
 10100 649F 91 84			sta (:bp2),y
 10101 64A1 C8				iny
 10102 64A2 B1 84			lda (:bp2),y
 10103 64A4 E9 00			sbc #$00
 10104 64A6 91 84			sta (:bp2),y
 10105
 10106 				; optimize OK (service.pas), line = 1914
 10107
 10108 64A8 AC 66 A0 84 84 AC + 	mwy X1 :bp2
 10109 64B2 A0 00			ldy #$00
 10110 64B4 B1 84			lda (:bp2),y
 10111 64B6 8D 95 9F			sta MAX.B
 10112 64B9 C8				iny
 10113 64BA B1 84			lda (:bp2),y
 10114 64BC 8D 96 9F			sta MAX.B+1
 10115 64BF A9 00			lda #$00
 10116 64C1 8D 93 9F			sta MAX.A
 10117 64C4 8D 94 9F			sta MAX.A+1
 10118 64C7 20 54 3C			jsr MAX
 10119 64CA A9 CF			lda #$CF
 10120 64CC 8D 99 9F			sta MIN.A
 10121 64CF A9 00			lda #$00
 10122 64D1 8D 9A 9F			sta MIN.A+1
 10123 64D4 AD 97 9F			lda MAX.RESULT
 10124 64D7 8D 9B 9F			sta MIN.B
 10125 64DA AD 98 9F			lda MAX.RESULT+1
 10126 64DD 8D 9C 9F			sta MIN.B+1
 10127 64E0 20 7F 3C			jsr MIN
 10128 64E3 AC 66 A0 84 84 AC + 	mwy X1 :bp2
 10129 64ED A0 00			ldy #$00
 10130 64EF AD 9D 9F			lda MIN.RESULT
 10131 64F2 91 84			sta (:bp2),y
 10132 64F4 C8				iny
 10133 64F5 AD 9E 9F			lda MIN.RESULT+1
 10134 64F8 91 84			sta (:bp2),y
 10135
 10136 				; optimize OK (service.pas), line = 1915
 10137
 10138 64FA AC 6A A0 84 84 AC + 	mwy X2 :bp2
 10139 6504 A0 00			ldy #$00
 10140 6506 B1 84			lda (:bp2),y
 10141 6508 8D 95 9F			sta MAX.B
 10142 650B C8				iny
 10143 650C B1 84			lda (:bp2),y
 10144 650E 8D 96 9F			sta MAX.B+1
 10145 6511 A9 00			lda #$00
 10146 6513 8D 93 9F			sta MAX.A
 10147 6516 8D 94 9F			sta MAX.A+1
 10148 6519 20 54 3C			jsr MAX
 10149 651C A9 CF			lda #$CF
 10150 651E 8D 99 9F			sta MIN.A
 10151 6521 A9 00			lda #$00
 10152 6523 8D 9A 9F			sta MIN.A+1
 10153 6526 AD 97 9F			lda MAX.RESULT
 10154 6529 8D 9B 9F			sta MIN.B
 10155 652C AD 98 9F			lda MAX.RESULT+1
 10156 652F 8D 9C 9F			sta MIN.B+1
 10157 6532 20 7F 3C			jsr MIN
 10158 6535 AC 6A A0 84 84 AC + 	mwy X2 :bp2
 10159 653F A0 00			ldy #$00
 10160 6541 AD 9D 9F			lda MIN.RESULT
 10161 6544 91 84			sta (:bp2),y
 10162 6546 C8				iny
 10163 6547 AD 9E 9F			lda MIN.RESULT+1
 10164 654A 91 84			sta (:bp2),y
 10165
 10166 				; optimize OK (service.pas), line = 1922
 10167
 10168 654C AD 8F A0			lda COLLISION
 10169 654F 8D 6E A0			sta RESULT
 10170 6552			@exit
 10171
 10172 				; ------------------------------------------------------------
 10173
 10174 = A066			X1	= DATAORIGIN+$0302
 10175 = A068			Y1	= DATAORIGIN+$0304
 10176 = A06A			X2	= DATAORIGIN+$0306
 10177 = A06C			Y2	= DATAORIGIN+$0308
 10178 = A06E			RESULT	= DATAORIGIN+$030A
 10179 = A06F			X	= DATAORIGIN+$030B
 10180 = A071			Y	= DATAORIGIN+$030D
 10181 = A073			XK	= DATAORIGIN+$030F
 10182 = A075			YK	= DATAORIGIN+$0311
 10183 = A077			XJ	= DATAORIGIN+$0313
 10184 = A079			YJ	= DATAORIGIN+$0315
 10185 = A07B			XH	= DATAORIGIN+$0317
 10186 = A07D			YH	= DATAORIGIN+$0319
 10187 = A07F			XN	= DATAORIGIN+$031B
 10188 = A081			YN	= DATAORIGIN+$031D
 10189 = A083			XP1	= DATAORIGIN+$031F
 10190 = A085			YP1	= DATAORIGIN+$0321
 10191 = A087			XP2	= DATAORIGIN+$0323
 10192 = A089			YP2	= DATAORIGIN+$0325
 10193 = A08B			XP	= DATAORIGIN+$0327
 10194 = A08D			YP	= DATAORIGIN+$0329
 10195 = A08F			COLLISION	= DATAORIGIN+$032B
 10196
 10197 = A066			@VarData	= X1
 10198 = 0029			@VarDataSize	= 41
 10199
 10200 6552 60				rts						; ret
 10201 				.endl
 10202
 10203 6553			.local	SHOOT_BLOCK					; PROCEDURE
 10204
 10205 				; optimize OK (service.pas), line = 1933
 10206
 10207 6553 AD 91 A0			lda XB+1
 10208 6556 10 03 4C 64 67		jmi l_1909
 10209 655B AD 90 A0			lda XB
 10210 655E C9 0D			cmp #$0D
 10211 6560 AD 91 A0			lda XB+1
 10212 6563 E9 00			sbc #$00
 10213 6565 50 02			svc
 10214 6567 49 80			eor #$80
 10215 6569 30 03 4C 64 67		jpl l_1909
 10216 656E AD 93 A0			lda YB+1
 10217 6571 10 03 4C 64 67		jmi l_1909
 10218 6576 AD 92 A0			lda YB
 10219 6579 C9 0F			cmp #$0F
 10220 657B AD 93 A0			lda YB+1
 10221 657E E9 00			sbc #$00
 10222 6580 50 02			svc
 10223 6582 49 80			eor #$80
 10224 6584 30 03 4C 64 67		jpl l_1909
 10225
 10226 				; optimize OK (service.pas), line = 1936
 10227
 10228 6589 AD 92 A0			lda YB
 10229 658C 0A				asl @
 10230 658D 0A				asl @
 10231 658E 0A				asl @
 10232 658F 0A				asl @
 10233 6590 18 6D 90 A0			add XB
 10234 6594 8D 98 A0			sta I
 10235
 10236 				; optimize OK (service.pas), line = 1938
 10237
 10238 6597 A8				tay
 10239 6598 B9 00 DB			lda adr.WALL,y
 10240 659B D0 03 4C 64 67		jeq l_192D
 10241
 10242 				; optimize OK (service.pas), line = 1940
 10243
 10244 65A0 C9 0A			cmp #$0A
 10245 65A2 90 03 4C DA 66		jcs l_1943
 10246
 10247 				; optimize OK (service.pas), line = 1942
 10248
 10249 65A7 AD 90 A0			lda XB
 10250 65AA 8D 42 A0			sta REMOVE_BLOCK.XA
 10251 65AD AD 92 A0			lda YB
 10252 65B0 8D 43 A0			sta REMOVE_BLOCK.YA
 10253 65B3 20 83 54			jsr REMOVE_BLOCK
 10254
 10255 				; optimize FAIL (0, service.pas), line = 1943
 10256
 10257 65B6 CE 17 9F			dec REMAIN_BLK
 10258
 10259 				; optimize OK (service.pas), line = 1947
 10260
 10261 65B9 AD 34 9F			lda CUR_PLAYER
 10262 65BC 0A				asl @
 10263 65BD 0A				asl @
 10264 65BE 85 9F			sta :STACKORIGIN+9
 10265 65C0 AC 98 A0			ldy I
 10266 65C3 B9 00 DB			lda adr.WALL,y
 10267 65C6 0A				asl @
 10268 65C7 A8				tay
 10269 65C8 B9 69 20			lda adr.SCORE_WALL,y
 10270 65CB 85 A0			sta :STACKORIGIN+10
 10271 65CD B9 6A 20			lda adr.SCORE_WALL+1,y
 10272 65D0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10273 65D2 A4 9F			ldy :STACKORIGIN+9
 10274 65D4 B9 19 9F			lda adr.SCORE.PLAYER,y
 10275 65D7 18 65 A0			add :STACKORIGIN+10
 10276 65DA 99 19 9F			sta adr.SCORE.PLAYER,y
 10277 65DD B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 10278 65E0 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10279 65E2 99 1A 9F			sta adr.SCORE.PLAYER+1,y
 10280 65E5 B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 10281 65E8 69 00			adc #$00
 10282 65EA 99 1B 9F			sta adr.SCORE.PLAYER+2,y
 10283 65ED B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 10284 65F0 69 00			adc #$00
 10285 65F2 99 1C 9F			sta adr.SCORE.PLAYER+3,y
 10286
 10287 				; optimize OK (service.pas), line = 1949
 10288
 10289 65F5 A9 2C			lda #$2C
 10290 65F7 8D 9C 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 10291 65FA A9 01			lda #$01
 10292 65FC 8D 9D 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10293 65FF 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 10294 6602 AD 44 9F			lda LETT.INCOMING
 10295 6605 18 6D 9E 9D			add SYSTEM.RANDOM.@010184000.RESULT
 10296 6609 8D 44 9F			sta LETT.INCOMING
 10297 660C AD 45 9F			lda LETT.INCOMING+1
 10298 660F 6D 9F 9D			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10299 6612 8D 45 9F			sta LETT.INCOMING+1
 10300
 10301 				; optimize OK (service.pas), line = 1951
 10302
 10303 6615 AD 90 A0			lda XB
 10304 6618 85 9F			sta :STACKORIGIN+9
 10305 661A A0 00			ldy #$00
 10306 661C AD 91 A0			lda XB+1
 10307 661F 10 01			spl
 10308 6621 88				dey
 10309 6622 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10310 6624 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10311 6626 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10312 6628 06 9F			asl :STACKORIGIN+9
 10313 662A 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10314 662C 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10315 662E 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10316 6630 06 9F			asl :STACKORIGIN+9
 10317 6632 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10318 6634 06 9F			asl :STACKORIGIN+9
 10319 6636 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10320 6638 06 9F			asl :STACKORIGIN+9
 10321 663A 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10322 663C A5 9F			lda :STACKORIGIN+9
 10323 663E 18 69 09			add #$09
 10324 6641 8D 46 9F			sta LETT.NEXTX
 10325 6644 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10326 6646 69 00			adc #$00
 10327 6648 8D 47 9F			sta LETT.NEXTX+1
 10328
 10329 				; optimize OK (service.pas), line = 1952
 10330
 10331 664B AD 92 A0			lda YB
 10332 664E 85 9F			sta :STACKORIGIN+9
 10333 6650 A0 00			ldy #$00
 10334 6652 AD 93 A0			lda YB+1
 10335 6655 10 01			spl
 10336 6657 88				dey
 10337 6658 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10338 665A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10339 665C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10340 665E A5 9F			lda :STACKORIGIN+9
 10341 6660 18 69 01			add #$01
 10342 6663 85 9F			sta :STACKORIGIN+9
 10343 6665 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10344 6667 69 00			adc #$00
 10345 6669 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10346 666B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10347 666D 69 00			adc #$00
 10348 666F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10349 6671 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10350 6673 69 00			adc #$00
 10351 6675 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10352 6677 06 9F			asl :STACKORIGIN+9
 10353 6679 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10354 667B 06 9F			asl :STACKORIGIN+9
 10355 667D 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10356 667F 06 9F			asl :STACKORIGIN+9
 10357 6681 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10358 6683 A5 9F			lda :STACKORIGIN+9
 10359 6685 18 69 16			add #$16
 10360 6688 8D 48 9F			sta LETT.NEXTY
 10361 668B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10362 668D 69 00			adc #$00
 10363 668F 8D 49 9F			sta LETT.NEXTY+1
 10364
 10365 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1953
 10366
 10367 6692 20 4E 3F			jsr RANDOM_LETTER_DROP
 10368 6695 AD B3 9F			lda RANDOM_LETTER_DROP.RESULT
 10369 6698 8D 4A 9F			sta LETT.NEXTTYPE
 10370 669B AD B4 9F			lda RANDOM_LETTER_DROP.RESULT+1
 10371 669E 8D 4B 9F			sta LETT.NEXTTYPE+1
 10372
 10373 				; optimize OK (service.pas), line = 1955
 10374
 10375 66A1 AC 98 A0			ldy I
 10376 66A4 A9 00			lda #$00
 10377 66A6 99 00 DB			sta adr.WALL,y
 10378
 10379 				; optimize OK (service.pas), line = 1956
 10380
 10381 66A9 A9 B8			lda #$B8
 10382 66AB 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10383 66AE A9 01			lda #$01
 10384 66B0 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10385 66B3 A9 03			lda #$03
 10386 66B5 8D 40 9E			sta BALL_BLOCK_SOUND.B
 10387 66B8 A9 00			lda #$00
 10388 66BA 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 10389 66BD 20 3F 38			jsr BALL_BLOCK_SOUND
 10390
 10391 				; optimize OK (service.pas), line = 1957
 10392
 10393 66C0 AC 94 A0 84 84 AC + 	mwy BALL :bp2
 10394 66CA A0 14			ldy #BALL.SBD-DATAORIGIN
 10395 66CC A9 00			lda #$00
 10396 66CE 91 84			sta (:bp2),y
 10397 66D0 C8				iny
 10398 66D1 91 84			sta (:bp2),y
 10399
 10400 				; optimize OK (service.pas), line = 1958
 10401
 10402 66D3 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10403 66D5 91 84			sta (:bp2),y
 10404 66D7 4C 64 67			jmp l_1997
 10405 66DA			l_1943
 10406
 10407 				; optimize OK (service.pas), line = 1963
 10408
 10409 66DA AC 98 A0			ldy I
 10410 66DD B9 00 DB			lda adr.WALL,y
 10411 66E0 29 0F			and #$0F
 10412 66E2 C9 09			cmp #$09
 10413 66E4 D0 45			jne l_19B0
 10414
 10415 				; optimize OK (service.pas), line = 1965
 10416
 10417 66E6 AC 94 A0 84 84 AC + 	mwy BALL :bp2
 10418 66F0 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10419 66F2 A9 00			lda #$00
 10420 66F4 91 84			sta (:bp2),y
 10421
 10422 				; optimize OK (service.pas), line = 1966
 10423
 10424 66F6 AC 98 A0			ldy I
 10425 66F9 B9 00 DB			lda adr.WALL,y
 10426 66FC 38 E9 10			sub #$10
 10427 66FF 99 00 DB			sta adr.WALL,y
 10428
 10429 				; optimize OK (service.pas), line = 1968
 10430
 10431 6702 A9 72			lda #$72
 10432 6704 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10433 6707 A9 01			lda #$01
 10434 6709 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10435 670C A9 04			lda #$04
 10436 670E 8D 40 9E			sta BALL_BLOCK_SOUND.B
 10437 6711 A9 00			lda #$00
 10438 6713 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 10439 6716 20 3F 38			jsr BALL_BLOCK_SOUND
 10440
 10441 				; optimize OK (service.pas), line = 1969
 10442
 10443 6719 AD 90 A0			lda XB
 10444 671C 8D B1 9F			sta SHINE.XB
 10445 671F AD 92 A0			lda YB
 10446 6722 8D B2 9F			sta SHINE.YB
 10447 6725 20 12 3F			jsr SHINE
 10448 6728 4C 64 67			jmp l_19CA
 10449 672B			l_19B0
 10450
 10451 				; optimize OK (service.pas), line = 1973
 10452
 10453 672B AC 94 A0 84 84 AC + 	mwy BALL :bp2
 10454 6735 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10455 6737 B1 84			lda (:bp2),y
 10456 6739 18 69 01			add #$01
 10457 673C 91 84			sta (:bp2),y
 10458
 10459 				; optimize OK (service.pas), line = 1974
 10460
 10461 673E AD 90 A0			lda XB
 10462 6741 8D B1 9F			sta SHINE.XB
 10463 6744 AD 92 A0			lda YB
 10464 6747 8D B2 9F			sta SHINE.YB
 10465 674A 20 12 3F			jsr SHINE
 10466
 10467 				; optimize OK (service.pas), line = 1976
 10468
 10469 674D A9 C8			lda #$C8
 10470 674F 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10471 6752 A9 00			lda #$00
 10472 6754 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10473 6757 A9 07			lda #$07
 10474 6759 8D 40 9E			sta BALL_BLOCK_SOUND.B
 10475 675C A9 00			lda #$00
 10476 675E 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 10477 6761 20 3F 38			jsr BALL_BLOCK_SOUND
 10478 6764			l_19CA
 10479 6764			l_1997
 10480 6764			l_192D
 10481 6764			l_1909
 10482
 10483 				; ------------------------------------------------------------
 10484
 10485 = A090			XB	= DATAORIGIN+$032C
 10486 = A092			YB	= DATAORIGIN+$032E
 10487 = A094			BALL	= DATAORIGIN+$0330
 10488 = 9D64			BALL.X	= DATAORIGIN+$0000
 10489 = 9D66			BALL.Y	= DATAORIGIN+$0002
 10490 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
 10491 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
 10492 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
 10493 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
 10494 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
 10495 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
 10496 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
 10497 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
 10498 = 9D78			BALL.SBD	= DATAORIGIN+$0014
 10499 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
 10500 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
 10501 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
 10502 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
 10503 = 9D7F			BALL.STM	= DATAORIGIN+$001B
 10504 = A098			I	= DATAORIGIN+$0334
 10505
 10506 = A090			@VarData	= XB
 10507 = 0007			@VarDataSize	= 7
 10508
 10509 6764			@exit
 10510 					.ifdef @new
 10511 					lda <@VarData
 10512 					sta :ztmp
 10513 					lda >@VarData
 10514 					ldy #@VarDataSize-1
 10515 					jmp @FreeMem
 10516 					els
 10517 6764 60				rts						; ret
 10518 					eif
 10519 				.endl
 10520
 10521 6765			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10522
 10523 				; optimize OK (service.pas), line = 1987
 10524
 10525 6765 AD 9A A0			lda XB+1
 10526 6768 10 03 4C 7F 68		jmi l_1A0D
 10527 676D AD 99 A0			lda XB
 10528 6770 C9 0D			cmp #$0D
 10529 6772 AD 9A A0			lda XB+1
 10530 6775 E9 00			sbc #$00
 10531 6777 50 02			svc
 10532 6779 49 80			eor #$80
 10533 677B 30 03 4C 7F 68		jpl l_1A0D
 10534 6780 AD 9C A0			lda YB+1
 10535 6783 10 03 4C 7F 68		jmi l_1A0D
 10536 6788 AD 9B A0			lda YB
 10537 678B C9 0F			cmp #$0F
 10538 678D AD 9C A0			lda YB+1
 10539 6790 E9 00			sbc #$00
 10540 6792 50 02			svc
 10541 6794 49 80			eor #$80
 10542 6796 30 03 4C 7F 68		jpl l_1A0D
 10543
 10544 				; optimize OK (service.pas), line = 1990
 10545
 10546 679B AD 9B A0			lda YB
 10547 679E 0A				asl @
 10548 679F 0A				asl @
 10549 67A0 0A				asl @
 10550 67A1 0A				asl @
 10551 67A2 18 6D 99 A0			add XB
 10552 67A6 8D 9D A0			sta I
 10553
 10554 				; optimize OK (service.pas), line = 1992
 10555
 10556 67A9 A8				tay
 10557 67AA B9 00 DB			lda adr.WALL,y
 10558 67AD D0 03 4C 7F 68		jeq l_1A31
 10559
 10560 				; optimize OK (service.pas), line = 1994
 10561
 10562 67B2 C9 0A			cmp #$0A
 10563 67B4 B0 65			jcs l_1A47
 10564
 10565 				; optimize OK (service.pas), line = 1996
 10566
 10567 67B6 AD 99 A0			lda XB
 10568 67B9 8D 42 A0			sta REMOVE_BLOCK.XA
 10569 67BC AD 9B A0			lda YB
 10570 67BF 8D 43 A0			sta REMOVE_BLOCK.YA
 10571 67C2 20 83 54			jsr REMOVE_BLOCK
 10572
 10573 				; optimize FAIL (0, service.pas), line = 1997
 10574
 10575 67C5 CE 17 9F			dec REMAIN_BLK
 10576
 10577 				; optimize OK (service.pas), line = 1998
 10578
 10579 67C8 AD 34 9F			lda CUR_PLAYER
 10580 67CB 0A				asl @
 10581 67CC 0A				asl @
 10582 67CD 85 9F			sta :STACKORIGIN+9
 10583 67CF AC 9D A0			ldy I
 10584 67D2 B9 00 DB			lda adr.WALL,y
 10585 67D5 0A				asl @
 10586 67D6 A8				tay
 10587 67D7 B9 69 20			lda adr.SCORE_WALL,y
 10588 67DA 85 A0			sta :STACKORIGIN+10
 10589 67DC B9 6A 20			lda adr.SCORE_WALL+1,y
 10590 67DF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10591 67E1 A4 9F			ldy :STACKORIGIN+9
 10592 67E3 B9 19 9F			lda adr.SCORE.PLAYER,y
 10593 67E6 18 65 A0			add :STACKORIGIN+10
 10594 67E9 99 19 9F			sta adr.SCORE.PLAYER,y
 10595 67EC B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 10596 67EF 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10597 67F1 99 1A 9F			sta adr.SCORE.PLAYER+1,y
 10598 67F4 B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 10599 67F7 69 00			adc #$00
 10600 67F9 99 1B 9F			sta adr.SCORE.PLAYER+2,y
 10601 67FC B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 10602 67FF 69 00			adc #$00
 10603 6801 99 1C 9F			sta adr.SCORE.PLAYER+3,y
 10604
 10605 				; optimize OK (service.pas), line = 1999
 10606
 10607 6804 AC 9D A0			ldy I
 10608 6807 A9 00			lda #$00
 10609 6809 99 00 DB			sta adr.WALL,y
 10610
 10611 				; optimize OK (service.pas), line = 2000
 10612
 10613 680C A9 B8			lda #$B8
 10614 680E 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10615 6811 A9 01			lda #$01
 10616 6813 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10617 6816 A9 03			lda #$03
 10618 6818 4C 74 68			jmp l_1A6F
 10619 681B			l_1A47
 10620
 10621 				; optimize OK (service.pas), line = 2005
 10622
 10623 681B AC 9D A0			ldy I
 10624 681E B9 00 DB			lda adr.WALL,y
 10625 6821 29 0F			and #$0F
 10626 6823 C9 09			cmp #$09
 10627 6825 D0 32			jne l_1A88
 10628
 10629 				; optimize OK (service.pas), line = 2007
 10630
 10631 6827 B9 00 DB			lda adr.WALL,y
 10632 682A 38 E9 10			sub #$10
 10633 682D 99 00 DB			sta adr.WALL,y
 10634
 10635 				; optimize OK (service.pas), line = 2008
 10636
 10637 6830 A9 72			lda #$72
 10638 6832 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10639 6835 A9 01			lda #$01
 10640 6837 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10641 683A A9 04			lda #$04
 10642 683C 8D 40 9E			sta BALL_BLOCK_SOUND.B
 10643 683F A9 00			lda #$00
 10644 6841 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 10645 6844 20 3F 38			jsr BALL_BLOCK_SOUND
 10646
 10647 				; optimize OK (service.pas), line = 2009
 10648
 10649 6847 AD 99 A0			lda XB
 10650 684A 8D B1 9F			sta SHINE.XB
 10651 684D AD 9B A0			lda YB
 10652 6850 8D B2 9F			sta SHINE.YB
 10653 6853 20 12 3F			jsr SHINE
 10654 6856 4C 7F 68			jmp l_1A9E
 10655 6859			l_1A88
 10656
 10657 				; optimize OK (service.pas), line = 2013
 10658
 10659 6859 AD 99 A0			lda XB
 10660 685C 8D B1 9F			sta SHINE.XB
 10661 685F AD 9B A0			lda YB
 10662 6862 8D B2 9F			sta SHINE.YB
 10663 6865 20 12 3F			jsr SHINE
 10664
 10665 				; optimize OK (service.pas), line = 2014
 10666
 10667 6868 A9 C8			lda #$C8
 10668 686A 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 10669 686D A9 00			lda #$00
 10670 686F 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 10671 6872 A9 07			lda #$07
 10672 6874			l_1A6F
 10673 6874 8D 40 9E			sta BALL_BLOCK_SOUND.B
 10674 6877 A9 00			lda #$00
 10675 6879 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 10676 687C 20 3F 38			jsr BALL_BLOCK_SOUND
 10677 687F			l_1A9E
 10678 687F			l_1A31
 10679 687F			l_1A0D
 10680
 10681 				; ------------------------------------------------------------
 10682
 10683 = A099			XB	= DATAORIGIN+$0335
 10684 = A09B			YB	= DATAORIGIN+$0337
 10685 = A09D			I	= DATAORIGIN+$0339
 10686
 10687 = A099			@VarData	= XB
 10688 = 0005			@VarDataSize	= 5
 10689
 10690 687F			@exit
 10691 					.ifdef @new
 10692 					lda <@VarData
 10693 					sta :ztmp
 10694 					lda >@VarData
 10695 					ldy #@VarDataSize-1
 10696 					jmp @FreeMem
 10697 					els
 10698 687F 60				rts						; ret
 10699 					eif
 10700 				.endl
 10701
 10702 6880			.local	BALL_HIT_BLOCK					; PROCEDURE
 10703
 10704 				; optimize OK (service.pas), line = 2046
 10705
 10706 6880 A9 FF			lda #$FF
 10707 6882 8D BE A0			sta EMERGENCY
 10708
 10709 				; optimize OK (service.pas), line = 2048
 10710
 10711 6885 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 10712 688F A0 00			ldy #BALL.X-DATAORIGIN
 10713 6891 B1 84			lda (:bp2),y
 10714 6893 38 E9 09			sub #$09
 10715 6896 8D AC A0			sta NX
 10716 6899 C8				iny
 10717 689A B1 84			lda (:bp2),y
 10718 689C E9 00			sbc #$00
 10719 689E 8D AD A0			sta NX+1
 10720
 10721 				; optimize OK (service.pas), line = 2049
 10722
 10723 68A1 A0 02			ldy #BALL.Y-DATAORIGIN
 10724 68A3 B1 84			lda (:bp2),y
 10725 68A5 38 E9 16			sub #$16
 10726 68A8 8D AE A0			sta NY
 10727 68AB C8				iny
 10728 68AC B1 84			lda (:bp2),y
 10729 68AE E9 00			sbc #$00
 10730 68B0 8D AF A0			sta NY+1
 10731
 10732 				; optimize OK (service.pas), line = 2052
 10733
 10734 68B3 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10735 68B5 B1 84			lda (:bp2),y
 10736 68B7 38 E9 09			sub #$09
 10737 68BA 8D A8 A0			sta OX
 10738 68BD C8				iny
 10739 68BE B1 84			lda (:bp2),y
 10740 68C0 E9 00			sbc #$00
 10741 68C2 8D A9 A0			sta OX+1
 10742
 10743 				; optimize OK (service.pas), line = 2053
 10744
 10745 68C5 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10746 68C7 B1 84			lda (:bp2),y
 10747 68C9 38 E9 16			sub #$16
 10748 68CC 8D AA A0			sta OY
 10749 68CF C8				iny
 10750 68D0 B1 84			lda (:bp2),y
 10751 68D2 E9 00			sbc #$00
 10752 68D4 8D AB A0			sta OY+1
 10753
 10754 				; optimize OK (service.pas), line = 2055
 10755
 10756 68D7 AD AD A0			lda NX+1
 10757 68DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10758 68DC AD AC A0			lda NX
 10759 68DF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10760 68E1 6A				ror @
 10761 68E2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10762 68E4 6A				ror @
 10763 68E5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10764 68E7 6A				ror @
 10765 68E8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10766 68EA 6A				ror @
 10767 68EB 8D A6 A0			sta XB
 10768
 10769 				; optimize OK (service.pas), line = 2056
 10770
 10771 68EE AD AF A0			lda NY+1
 10772 68F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10773 68F3 AD AE A0			lda NY
 10774 68F6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10775 68F8 6A				ror @
 10776 68F9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10777 68FB 6A				ror @
 10778 68FC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10779 68FE 6A				ror @
 10780 68FF 8D A7 A0			sta YB
 10781
 10782 				; optimize OK (service.pas), line = 2060
 10783
 10784 6902 A9 10			lda #$10
 10785 6904 85 8E			sta :ecx
 10786 6906 85 92			sta :ztmp8
 10787 6908 AD A7 A0			lda YB
 10788 690B 85 86			sta :eax
 10789 690D 85 94			sta :ztmp10
 10790 					.ifdef fmulinit
 10791 					fmulu_8
 10792 					els
 10793 690F 20 BF 22			imulCL
 10794 					eif
 10795 6912 24 94			bit :ztmp10
 10796 6914 10 03			bpl @+
 10797 6916 38 E5 92			sub :ztmp8
 10798 				@
 10799 6919 24 92			bit :ztmp8
 10800 691B 10 03			bpl @+
 10801 691D 38 E5 94			sub :ztmp10
 10802 				@
 10803 6920 85 87			sta :eax+1
 10804 6922 A5 86			lda :eax
 10805 6924 18 6D A6 A0			add XB
 10806 6928 A8				tay
 10807 6929 B9 00 DB			lda adr.WALL,y
 10808 692C D0 03 4C 15 74		jeq l_1B07
 10809
 10810 				; optimize OK (service.pas), line = 2062
 10811
 10812 6931 A9 A8			lda <OX
 10813 6933 8D 66 A0			sta SPLIT_LINE.X1
 10814 6936 A9 A0			lda >OX
 10815 6938 8D 67 A0			sta SPLIT_LINE.X1+1
 10816 693B A9 AA			lda <OY
 10817 693D 8D 68 A0			sta SPLIT_LINE.Y1
 10818 6940 A9 A0			lda >OY
 10819 6942 8D 69 A0			sta SPLIT_LINE.Y1+1
 10820 6945 A9 AC			lda <NX
 10821 6947 8D 6A A0			sta SPLIT_LINE.X2
 10822 694A A9 A0			lda >NX
 10823 694C 8D 6B A0			sta SPLIT_LINE.X2+1
 10824 694F A9 AE			lda <NY
 10825 6951 8D 6C A0			sta SPLIT_LINE.Y2
 10826 6954 A9 A0			lda >NY
 10827 6956 8D 6D A0			sta SPLIT_LINE.Y2+1
 10828 6959 20 8B 5D			jsr SPLIT_LINE
 10829 695C AD 6E A0			lda SPLIT_LINE.RESULT
 10830 695F 8D C2 A0			sta COLLISION
 10831
 10832 				; optimize OK (service.pas), line = 2068
 10833
 10834 6962 C9 03			cmp #$03
 10835 6964 F0 03 4C 56 6C		jne l_1B22
 10836
 10837 				; optimize OK (service.pas), line = 2070
 10838
 10839 6969 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 10840 6973 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10841 6975 B1 84			lda (:bp2),y
 10842 6977 C8				iny
 10843 6978 38 ED A8 A0			sub OX
 10844 697C 38 E9 09			sub #$09
 10845 697F 8D A4 A0			sta LX
 10846
 10847 				; optimize OK (service.pas), line = 2071
 10848
 10849 6982 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10850 6984 B1 84			lda (:bp2),y
 10851 6986 C8				iny
 10852 6987 38 ED AA A0			sub OY
 10853 698B 38 E9 16			sub #$16
 10854 698E 8D A5 A0			sta LY
 10855
 10856 				; optimize OK (service.pas), line = 2073
 10857
 10858 6991 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10859 6993 B1 84			lda (:bp2),y
 10860 6995 38 ED AC A0			sub NX
 10861 6999 85 9F			sta :STACKORIGIN+9
 10862 699B C8				iny
 10863 699C B1 84			lda (:bp2),y
 10864 699E ED AD A0			sbc NX+1
 10865 69A1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10866 69A3 A5 9F			lda :STACKORIGIN+9
 10867 69A5 38 E9 09			sub #$09
 10868 69A8 8D B0 A0			sta MX
 10869 69AB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10870 69AD E9 00			sbc #$00
 10871 69AF 8D B1 A0			sta MX+1
 10872
 10873 				; optimize OK (service.pas), line = 2074
 10874
 10875 69B2 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10876 69B4 B1 84			lda (:bp2),y
 10877 69B6 38 ED AE A0			sub NY
 10878 69BA 85 9F			sta :STACKORIGIN+9
 10879 69BC C8				iny
 10880 69BD B1 84			lda (:bp2),y
 10881 69BF ED AF A0			sbc NY+1
 10882 69C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10883 69C4 A5 9F			lda :STACKORIGIN+9
 10884 69C6 38 E9 16			sub #$16
 10885 69C9 8D B2 A0			sta MY
 10886 69CC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10887 69CE E9 00			sbc #$00
 10888 69D0 8D B3 A0			sta MY+1
 10889
 10890 				; optimize OK (service.pas), line = 2076
 10891
 10892 69D3 AD A4 A0			lda LX
 10893 69D6 85 8E			sta :ecx
 10894 69D8 85 92			sta :ztmp8
 10895 69DA 85 86			sta :eax
 10896 69DC 85 94			sta :ztmp10
 10897 					.ifdef fmulinit
 10898 					fmulu_8
 10899 					els
 10900 69DE 20 BF 22			imulCL
 10901 					eif
 10902 69E1 24 94			bit :ztmp10
 10903 69E3 10 03			bpl @+
 10904 69E5 38 E5 92			sub :ztmp8
 10905 				@
 10906 69E8 24 92			bit :ztmp8
 10907 69EA 10 03			bpl @+
 10908 69EC 38 E5 94			sub :ztmp10
 10909 				@
 10910 69EF 85 87			sta :eax+1
 10911 69F1 A5 86			lda :eax
 10912 69F3 85 9F			sta :STACKORIGIN+9
 10913 69F5 A5 87			lda :eax+1
 10914 69F7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10915 69F9 AD A5 A0			lda LY
 10916 69FC 85 8E			sta :ecx
 10917 69FE 85 92			sta :ztmp8
 10918 6A00 85 86			sta :eax
 10919 6A02 85 94			sta :ztmp10
 10920 					.ifdef fmulinit
 10921 					fmulu_8
 10922 					els
 10923 6A04 20 BF 22			imulCL
 10924 					eif
 10925 6A07 24 94			bit :ztmp10
 10926 6A09 10 03			bpl @+
 10927 6A0B 38 E5 92			sub :ztmp8
 10928 				@
 10929 6A0E 24 92			bit :ztmp8
 10930 6A10 10 03			bpl @+
 10931 6A12 38 E5 94			sub :ztmp10
 10932 				@
 10933 6A15 85 87			sta :eax+1
 10934 6A17 A5 9F			lda :STACKORIGIN+9
 10935 6A19 18 65 86			add :eax
 10936 6A1C 8D B4 A0			sta F1
 10937 6A1F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10938 6A21 65 87			adc :eax+1
 10939 6A23 8D B5 A0			sta F1+1
 10940
 10941 				; optimize OK (service.pas), line = 2077
 10942
 10943 6A26 AD B0 A0			lda MX
 10944 6A29 85 8E			sta :ecx
 10945 6A2B 85 86			sta :eax
 10946 6A2D AD B1 A0			lda MX+1
 10947 6A30 85 8F			sta :ecx+1
 10948 6A32 85 87			sta :eax+1
 10949 					.ifdef fmulinit
 10950 					fmulu_16
 10951 					els
 10952 6A34 20 0B 23			imulCX
 10953 					eif
 10954 6A37 A5 86			lda :eax
 10955 6A39 85 9F			sta :STACKORIGIN+9
 10956 6A3B A5 87			lda :eax+1
 10957 6A3D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10958 6A3F AD B2 A0			lda MY
 10959 6A42 85 8E			sta :ecx
 10960 6A44 85 86			sta :eax
 10961 6A46 AD B3 A0			lda MY+1
 10962 6A49 85 8F			sta :ecx+1
 10963 6A4B 85 87			sta :eax+1
 10964 					.ifdef fmulinit
 10965 					fmulu_16
 10966 					els
 10967 6A4D 20 0B 23			imulCX
 10968 					eif
 10969 6A50 A5 86			lda :eax
 10970 6A52 18 65 9F			add :STACKORIGIN+9
 10971 6A55 8D B6 A0			sta F2
 10972 6A58 A5 87			lda :eax+1
 10973 6A5A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 10974 6A5C 8D B7 A0			sta F2+1
 10975
 10976 				; optimize OK (service.pas), line = 2079
 10977
 10978 6A5F AD B4 A0			lda F1
 10979 6A62 CD B6 A0			cmp F2
 10980 6A65 AD B5 A0			lda F1+1
 10981 6A68 ED B7 A0			sbc F2+1
 10982 6A6B 50 02			svc
 10983 6A6D 49 80			eor #$80
 10984 6A6F 30 03 4C 68 6B		jpl l_1B99
 10985
 10986 				; optimize OK (service.pas), line = 2085
 10987
 10988 6A74 AD A9 A0			lda OX+1
 10989 6A77 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10990 6A79 AD A8 A0			lda OX
 10991 6A7C 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 10992 6A7E 6A				ror @
 10993 6A7F 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 10994 6A81 6A				ror @
 10995 6A82 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 10996 6A84 6A				ror @
 10997 6A85 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 10998 6A87 6A				ror @
 10999 6A88 8D 93 9F			sta MAX.A
 11000 6A8B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11001 6A8D 8D 94 9F			sta MAX.A+1
 11002 6A90 A9 00			lda #$00
 11003 6A92 8D 95 9F			sta MAX.B
 11004 6A95 8D 96 9F			sta MAX.B+1
 11005 6A98 20 54 3C			jsr MAX
 11006 6A9B A9 0C			lda #$0C
 11007 6A9D 8D 99 9F			sta MIN.A
 11008 6AA0 A9 00			lda #$00
 11009 6AA2 8D 9A 9F			sta MIN.A+1
 11010 6AA5 AD 97 9F			lda MAX.RESULT
 11011 6AA8 8D 9B 9F			sta MIN.B
 11012 6AAB AD 98 9F			lda MAX.RESULT+1
 11013 6AAE 8D 9C 9F			sta MIN.B+1
 11014 6AB1 20 7F 3C			jsr MIN
 11015 6AB4 AD 9D 9F			lda MIN.RESULT
 11016 6AB7 8D A6 A0			sta XB
 11017
 11018 				; optimize OK (service.pas), line = 2086
 11019
 11020 6ABA AD AA A0			lda OY
 11021 6ABD 18 69 18			add #$18
 11022 6AC0 4A				lsr @
 11023 6AC1 4A				lsr @
 11024 6AC2 4A				lsr @
 11025 6AC3 38 E9 03			sub #$03
 11026 6AC6 8D A7 A0			sta YB
 11027
 11028 				; optimize OK (service.pas), line = 2089
 11029
 11030 6AC9 A9 10			lda #$10
 11031 6ACB 85 8E			sta :ecx
 11032 6ACD 85 92			sta :ztmp8
 11033 6ACF AD A7 A0			lda YB
 11034 6AD2 85 86			sta :eax
 11035 6AD4 85 94			sta :ztmp10
 11036 					.ifdef fmulinit
 11037 					fmulu_8
 11038 					els
 11039 6AD6 20 BF 22			imulCL
 11040 					eif
 11041 6AD9 24 94			bit :ztmp10
 11042 6ADB 10 03			bpl @+
 11043 6ADD 38 E5 92			sub :ztmp8
 11044 				@
 11045 6AE0 24 92			bit :ztmp8
 11046 6AE2 10 03			bpl @+
 11047 6AE4 38 E5 94			sub :ztmp10
 11048 				@
 11049 6AE7 85 87			sta :eax+1
 11050 6AE9 A5 86			lda :eax
 11051 6AEB 18 6D A6 A0			add XB
 11052 6AEF A8				tay
 11053 6AF0 B9 00 DB			lda adr.WALL,y
 11054 6AF3 D0 58			jne l_1BD7
 11055
 11056 				; optimize OK (service.pas), line = 2091
 11057
 11058 6AF5 AD AD A0			lda NX+1
 11059 6AF8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11060 6AFA AD AC A0			lda NX
 11061 6AFD 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11062 6AFF 6A				ror @
 11063 6B00 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11064 6B02 6A				ror @
 11065 6B03 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11066 6B05 6A				ror @
 11067 6B06 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11068 6B08 6A				ror @
 11069 6B09 8D 95 9F			sta MAX.B
 11070 6B0C A9 00			lda #$00
 11071 6B0E 8D 93 9F			sta MAX.A
 11072 6B11 8D 94 9F			sta MAX.A+1
 11073 6B14 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11074 6B16 8D 96 9F			sta MAX.B+1
 11075 6B19 20 54 3C			jsr MAX
 11076 6B1C A9 0C			lda #$0C
 11077 6B1E 8D 99 9F			sta MIN.A
 11078 6B21 A9 00			lda #$00
 11079 6B23 8D 9A 9F			sta MIN.A+1
 11080 6B26 AD 97 9F			lda MAX.RESULT
 11081 6B29 8D 9B 9F			sta MIN.B
 11082 6B2C AD 98 9F			lda MAX.RESULT+1
 11083 6B2F 8D 9C 9F			sta MIN.B+1
 11084 6B32 20 7F 3C			jsr MIN
 11085 6B35 AD 9D 9F			lda MIN.RESULT
 11086 6B38 8D A6 A0			sta XB
 11087
 11088 				; optimize OK (service.pas), line = 2092
 11089
 11090 6B3B AD AE A0			lda NY
 11091 6B3E 18 69 18			add #$18
 11092 6B41 4A				lsr @
 11093 6B42 4A				lsr @
 11094 6B43 4A				lsr @
 11095 6B44 38 E9 03			sub #$03
 11096 6B47 8D A7 A0			sta YB
 11097 6B4A 4C 65 6B			jmp l_1BFF
 11098 6B4D			l_1BD7
 11099
 11100 				; optimize OK (service.pas), line = 2096
 11101
 11102 6B4D AD A8 A0			lda OX
 11103 6B50 8D AC A0			sta NX
 11104 6B53 AD A9 A0			lda OX+1
 11105 6B56 8D AD A0			sta NX+1
 11106
 11107 				; optimize OK (service.pas), line = 2097
 11108
 11109 6B59 AD AA A0			lda OY
 11110 6B5C 8D AE A0			sta NY
 11111 6B5F AD AB A0			lda OY+1
 11112 6B62 8D AF A0			sta NY+1
 11113 6B65			l_1BFF
 11114 6B65 4C 56 6C			jmp l_1C12
 11115 6B68			l_1B99
 11116
 11117 				; optimize OK (service.pas), line = 2107
 11118
 11119 6B68 AD AD A0			lda NX+1
 11120 6B6B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11121 6B6D AD AC A0			lda NX
 11122 6B70 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11123 6B72 6A				ror @
 11124 6B73 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11125 6B75 6A				ror @
 11126 6B76 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11127 6B78 6A				ror @
 11128 6B79 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11129 6B7B 6A				ror @
 11130 6B7C 8D 95 9F			sta MAX.B
 11131 6B7F A9 00			lda #$00
 11132 6B81 8D 93 9F			sta MAX.A
 11133 6B84 8D 94 9F			sta MAX.A+1
 11134 6B87 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11135 6B89 8D 96 9F			sta MAX.B+1
 11136 6B8C 20 54 3C			jsr MAX
 11137 6B8F A9 0C			lda #$0C
 11138 6B91 8D 99 9F			sta MIN.A
 11139 6B94 A9 00			lda #$00
 11140 6B96 8D 9A 9F			sta MIN.A+1
 11141 6B99 AD 97 9F			lda MAX.RESULT
 11142 6B9C 8D 9B 9F			sta MIN.B
 11143 6B9F AD 98 9F			lda MAX.RESULT+1
 11144 6BA2 8D 9C 9F			sta MIN.B+1
 11145 6BA5 20 7F 3C			jsr MIN
 11146 6BA8 AD 9D 9F			lda MIN.RESULT
 11147 6BAB 8D A6 A0			sta XB
 11148
 11149 				; optimize OK (service.pas), line = 2108
 11150
 11151 6BAE AD AE A0			lda NY
 11152 6BB1 18 69 18			add #$18
 11153 6BB4 4A				lsr @
 11154 6BB5 4A				lsr @
 11155 6BB6 4A				lsr @
 11156 6BB7 38 E9 03			sub #$03
 11157 6BBA 8D A7 A0			sta YB
 11158
 11159 				; optimize OK (service.pas), line = 2110
 11160
 11161 6BBD A9 10			lda #$10
 11162 6BBF 85 8E			sta :ecx
 11163 6BC1 85 92			sta :ztmp8
 11164 6BC3 AD A7 A0			lda YB
 11165 6BC6 85 86			sta :eax
 11166 6BC8 85 94			sta :ztmp10
 11167 					.ifdef fmulinit
 11168 					fmulu_8
 11169 					els
 11170 6BCA 20 BF 22			imulCL
 11171 					eif
 11172 6BCD 24 94			bit :ztmp10
 11173 6BCF 10 03			bpl @+
 11174 6BD1 38 E5 92			sub :ztmp8
 11175 				@
 11176 6BD4 24 92			bit :ztmp8
 11177 6BD6 10 03			bpl @+
 11178 6BD8 38 E5 94			sub :ztmp10
 11179 				@
 11180 6BDB 85 87			sta :eax+1
 11181 6BDD A5 86			lda :eax
 11182 6BDF 18 6D A6 A0			add XB
 11183 6BE3 A8				tay
 11184 6BE4 B9 00 DB			lda adr.WALL,y
 11185 6BE7 D0 6D			jne l_1C4F
 11186
 11187 				; optimize OK (service.pas), line = 2112
 11188
 11189 6BE9 AD A8 A0			lda OX
 11190 6BEC 8D AC A0			sta NX
 11191 6BEF AD A9 A0			lda OX+1
 11192 6BF2 8D AD A0			sta NX+1
 11193
 11194 				; optimize OK (service.pas), line = 2113
 11195
 11196 6BF5 AD AA A0			lda OY
 11197 6BF8 8D AE A0			sta NY
 11198 6BFB AD AB A0			lda OY+1
 11199 6BFE 8D AF A0			sta NY+1
 11200
 11201 				; optimize OK (service.pas), line = 2115
 11202
 11203 6C01 AD AD A0			lda NX+1
 11204 6C04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11205 6C06 AD AC A0			lda NX
 11206 6C09 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11207 6C0B 6A				ror @
 11208 6C0C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11209 6C0E 6A				ror @
 11210 6C0F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11211 6C11 6A				ror @
 11212 6C12 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11213 6C14 6A				ror @
 11214 6C15 8D 95 9F			sta MAX.B
 11215 6C18 A9 00			lda #$00
 11216 6C1A 8D 93 9F			sta MAX.A
 11217 6C1D 8D 94 9F			sta MAX.A+1
 11218 6C20 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11219 6C22 8D 96 9F			sta MAX.B+1
 11220 6C25 20 54 3C			jsr MAX
 11221 6C28 A9 0C			lda #$0C
 11222 6C2A 8D 99 9F			sta MIN.A
 11223 6C2D A9 00			lda #$00
 11224 6C2F 8D 9A 9F			sta MIN.A+1
 11225 6C32 AD 97 9F			lda MAX.RESULT
 11226 6C35 8D 9B 9F			sta MIN.B
 11227 6C38 AD 98 9F			lda MAX.RESULT+1
 11228 6C3B 8D 9C 9F			sta MIN.B+1
 11229 6C3E 20 7F 3C			jsr MIN
 11230 6C41 AD 9D 9F			lda MIN.RESULT
 11231 6C44 8D A6 A0			sta XB
 11232
 11233 				; optimize OK (service.pas), line = 2116
 11234
 11235 6C47 AD AE A0			lda NY
 11236 6C4A 18 69 18			add #$18
 11237 6C4D 4A				lsr @
 11238 6C4E 4A				lsr @
 11239 6C4F 4A				lsr @
 11240 6C50 38 E9 03			sub #$03
 11241 6C53 8D A7 A0			sta YB
 11242 6C56			l_1C4F
 11243 6C56			l_1C12
 11244 6C56			l_1B22
 11245
 11246 				; optimize OK (service.pas), line = 2122
 11247
 11248 6C56 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 11249 6C60 A0 00			ldy #BALL.X-DATAORIGIN
 11250 6C62 AD AC A0			lda NX
 11251 6C65 18 69 09			add #$09
 11252 6C68 91 84			sta (:bp2),y
 11253 6C6A C8				iny
 11254 6C6B AD AD A0			lda NX+1
 11255 6C6E 69 00			adc #$00
 11256 6C70 91 84			sta (:bp2),y
 11257
 11258 				; optimize OK (service.pas), line = 2123
 11259
 11260 6C72 A0 02			ldy #BALL.Y-DATAORIGIN
 11261 6C74 AD AE A0			lda NY
 11262 6C77 18 69 16			add #$16
 11263 6C7A 91 84			sta (:bp2),y
 11264 6C7C C8				iny
 11265 6C7D AD AF A0			lda NY+1
 11266 6C80 69 00			adc #$00
 11267 6C82 91 84			sta (:bp2),y
 11268
 11269 				; optimize OK (service.pas), line = 2127
 11270
 11271 6C84 A0 00			ldy #$00
 11272 6C86 AD A7 A0			lda YB
 11273 6C89 10 01			spl
 11274 6C8B 88				dey
 11275 6C8C 8C 93 A0			sty SHOOT_BLOCK.YB+1
 11276 6C8F 8D 92 A0			sta SHOOT_BLOCK.YB
 11277 6C92 A0 00			ldy #$00
 11278 6C94 AD A6 A0			lda XB
 11279 6C97 10 01			spl
 11280 6C99 88				dey
 11281 6C9A 8C 91 A0			sty SHOOT_BLOCK.XB+1
 11282 6C9D 8D 90 A0			sta SHOOT_BLOCK.XB
 11283 6CA0 AD 9E A0			lda BALL
 11284 6CA3 8D 94 A0			sta SHOOT_BLOCK.BALL
 11285 6CA6 AD 9F A0			lda BALL+1
 11286 6CA9 8D 95 A0			sta SHOOT_BLOCK.BALL+1
 11287 6CAC 20 53 65			jsr SHOOT_BLOCK
 11288
 11289 				; optimize OK (service.pas), line = 2129
 11290
 11291 6CAF AD AC A0			lda NX
 11292 6CB2 29 0F			and #$0F
 11293 6CB4 85 9F			sta :STACKORIGIN+9
 11294 6CB6 A9 00			lda #$00
 11295 6CB8 4A				lsr @
 11296 6CB9 66 9F			ror :STACKORIGIN+9
 11297 6CBB A5 9F			lda :STACKORIGIN+9
 11298 6CBD 8D A2 A0			sta X
 11299
 11300 				; optimize OK (service.pas), line = 2130
 11301
 11302 6CC0 AD AE A0			lda NY
 11303 6CC3 29 07			and #$07
 11304 6CC5 8D A3 A0			sta Y
 11305
 11306 				; optimize OK (service.pas), line = 2142
 11307
 11308 6CC8 AD A2 A0			lda X
 11309 6CCB F0 12			jeq l_1CE3
 11310 6CCD C9 07			cmp #$07
 11311 6CCF F0 0E			jeq l_1CE3
 11312 6CD1 AD A3 A0			lda Y
 11313 6CD4 F0 09			jeq l_1CE3
 11314 6CD6 C9 07			cmp #$07
 11315 6CD8 F0 05			jeq l_1CE3
 11316
 11317 				; optimize OK (service.pas), line = 2143
 11318
 11319 6CDA A9 03			lda #$03
 11320 6CDC 20 AA 3C			jsr FATAL_ERROR
 11321 6CDF			l_1CE3
 11322
 11323 				; optimize OK (service.pas), line = 2158
 11324
 11325 6CDF AD A3 A0			lda Y
 11326 6CE2 38 ED A2 A0			sub X
 11327 6CE6 50 02			svc
 11328 6CE8 49 80			eor #$80
 11329 6CEA 10 3E			jpl l_1D0E
 11330 6CEC A9 07			lda #$07
 11331 6CEE 38 ED A3 A0			sub Y
 11332 6CF2 85 A1			sta :STACKORIGIN+11
 11333 6CF4 AD A2 A0			lda X
 11334 6CF7 38 E5 A1			sub :STACKORIGIN+11
 11335 6CFA 50 02			svc
 11336 6CFC 49 80			eor #$80
 11337 6CFE 10 2A			jpl l_1D0E
 11338
 11339 				; optimize OK (service.pas), line = 2160
 11340
 11341 6D00 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 11342 6D0A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11343 6D0C A9 00			lda #$00
 11344 6D0E 38 F1 84			sub (:bp2),y
 11345 6D11 85 9F			sta :STACKORIGIN+9
 11346 6D13 C8				iny
 11347 6D14 A9 00			lda #$00
 11348 6D16 F1 84			sbc (:bp2),y
 11349 6D18 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11350 6D1A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11351 6D1C A5 9F			lda :STACKORIGIN+9
 11352 6D1E 91 84			sta (:bp2),y
 11353 6D20 C8				iny
 11354 6D21 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11355 6D23 91 84			sta (:bp2),y
 11356
 11357 				; optimize OK (service.pas), line = 2161
 11358
 11359 6D25 A9 01			lda #$01
 11360 6D27 8D BE A0			sta EMERGENCY
 11361 6D2A			l_1D0E
 11362
 11363 				; optimize OK (service.pas), line = 2165
 11364
 11365 6D2A A9 07			lda #$07
 11366 6D2C 38 ED A3 A0			sub Y
 11367 6D30 38 ED A2 A0			sub X
 11368 6D34 50 02			svc
 11369 6D36 49 80			eor #$80
 11370 6D38 10 37			jpl l_1D43
 11371 6D3A AD A2 A0			lda X
 11372 6D3D 38 ED A3 A0			sub Y
 11373 6D41 50 02			svc
 11374 6D43 49 80			eor #$80
 11375 6D45 10 2A			jpl l_1D43
 11376
 11377 				; optimize OK (service.pas), line = 2167
 11378
 11379 6D47 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 11380 6D51 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11381 6D53 A9 00			lda #$00
 11382 6D55 38 F1 84			sub (:bp2),y
 11383 6D58 85 9F			sta :STACKORIGIN+9
 11384 6D5A C8				iny
 11385 6D5B A9 00			lda #$00
 11386 6D5D F1 84			sbc (:bp2),y
 11387 6D5F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11388 6D61 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11389 6D63 A5 9F			lda :STACKORIGIN+9
 11390 6D65 91 84			sta (:bp2),y
 11391 6D67 C8				iny
 11392 6D68 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11393 6D6A 91 84			sta (:bp2),y
 11394
 11395 				; optimize OK (service.pas), line = 2168
 11396
 11397 6D6C A9 03			lda #$03
 11398 6D6E 8D BE A0			sta EMERGENCY
 11399 6D71			l_1D43
 11400
 11401 				; optimize OK (service.pas), line = 2172
 11402
 11403 6D71 AD A2 A0			lda X
 11404 6D74 38 ED A3 A0			sub Y
 11405 6D78 50 02			svc
 11406 6D7A 49 80			eor #$80
 11407 6D7C 10 3E			jpl l_1D78
 11408 6D7E A9 07			lda #$07
 11409 6D80 38 ED A2 A0			sub X
 11410 6D84 85 A1			sta :STACKORIGIN+11
 11411 6D86 AD A3 A0			lda Y
 11412 6D89 38 E5 A1			sub :STACKORIGIN+11
 11413 6D8C 50 02			svc
 11414 6D8E 49 80			eor #$80
 11415 6D90 10 2A			jpl l_1D78
 11416
 11417 				; optimize OK (service.pas), line = 2174
 11418
 11419 6D92 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 11420 6D9C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11421 6D9E A9 00			lda #$00
 11422 6DA0 38 F1 84			sub (:bp2),y
 11423 6DA3 85 9F			sta :STACKORIGIN+9
 11424 6DA5 C8				iny
 11425 6DA6 A9 00			lda #$00
 11426 6DA8 F1 84			sbc (:bp2),y
 11427 6DAA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11428 6DAC A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11429 6DAE A5 9F			lda :STACKORIGIN+9
 11430 6DB0 91 84			sta (:bp2),y
 11431 6DB2 C8				iny
 11432 6DB3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11433 6DB5 91 84			sta (:bp2),y
 11434
 11435 				; optimize OK (service.pas), line = 2175
 11436
 11437 6DB7 A9 02			lda #$02
 11438 6DB9 8D BE A0			sta EMERGENCY
 11439 6DBC			l_1D78
 11440
 11441 				; optimize OK (service.pas), line = 2179
 11442
 11443 6DBC A9 07			lda #$07
 11444 6DBE 38 ED A2 A0			sub X
 11445 6DC2 38 ED A3 A0			sub Y
 11446 6DC6 50 02			svc
 11447 6DC8 49 80			eor #$80
 11448 6DCA 10 37			jpl l_1DAD
 11449 6DCC AD A3 A0			lda Y
 11450 6DCF 38 ED A2 A0			sub X
 11451 6DD3 50 02			svc
 11452 6DD5 49 80			eor #$80
 11453 6DD7 10 2A			jpl l_1DAD
 11454
 11455 				; optimize OK (service.pas), line = 2181
 11456
 11457 6DD9 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 11458 6DE3 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11459 6DE5 A9 00			lda #$00
 11460 6DE7 38 F1 84			sub (:bp2),y
 11461 6DEA 85 9F			sta :STACKORIGIN+9
 11462 6DEC C8				iny
 11463 6DED A9 00			lda #$00
 11464 6DEF F1 84			sbc (:bp2),y
 11465 6DF1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11466 6DF3 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11467 6DF5 A5 9F			lda :STACKORIGIN+9
 11468 6DF7 91 84			sta (:bp2),y
 11469 6DF9 C8				iny
 11470 6DFA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11471 6DFC 91 84			sta (:bp2),y
 11472
 11473 				; optimize OK (service.pas), line = 2182
 11474
 11475 6DFE A9 04			lda #$04
 11476 6E00 8D BE A0			sta EMERGENCY
 11477 6E03			l_1DAD
 11478
 11479 				; optimize OK (service.pas), line = 2186
 11480
 11481 6E03 AD A2 A0			lda X
 11482 6E06 CD A3 A0			cmp Y
 11483 6E09 F0 0E			jeq l_1DE2x
 11484 6E0B A9 07			lda #$07
 11485 6E0D 38 ED A3 A0			sub Y
 11486 6E11 CD A2 A0			cmp X
 11487 6E14 F0 03 4C 15 74		jne l_1DE2
 11488 6E19			l_1DE2x
 11489
 11490 				; optimize OK (service.pas), line = 2188
 11491
 11492 6E19 A9 00			lda #$00
 11493 6E1B 8D C0 A0			sta DEFLECT
 11494
 11495 				; optimize OK (service.pas), line = 2189
 11496
 11497 6E1E 8D C3 A0			sta TOUCH
 11498
 11499 				; optimize OK (service.pas), line = 2197
 11500
 11501 6E21 AD A2 A0			lda X
 11502 6E24 38 E9 05			sub #$05
 11503 6E27 50 02			svc
 11504 6E29 49 80			eor #$80
 11505 6E2B 30 08			jmi l_1DFD
 11506 6E2D AD C3 A0			lda TOUCH
 11507 6E30 09 01			ora #$01
 11508 6E32 8D C3 A0			sta TOUCH
 11509 6E35			l_1DFD
 11510
 11511 				; optimize OK (service.pas), line = 2198
 11512
 11513 6E35 AD A3 A0			lda Y
 11514 6E38 38 E9 05			sub #$05
 11515 6E3B 50 02			svc
 11516 6E3D 49 80			eor #$80
 11517 6E3F 30 08			jmi l_1E1C
 11518 6E41 AD C3 A0			lda TOUCH
 11519 6E44 09 02			ora #$02
 11520 6E46 8D C3 A0			sta TOUCH
 11521 6E49			l_1E1C
 11522
 11523 				; optimize OK (service.pas), line = 2207
 11524
 11525 6E49 A9 FF			lda #$FF
 11526 6E4B 8D A4 A0			sta LX
 11527
 11528 6E4E			l_1E32
 11529 				; --- ForToDoCondition
 11530 6E4E AD A4 A0			lda LX
 11531 6E51 38 E9 02			sub #$02
 11532 6E54 50 02			svc
 11533 6E56 49 80			eor #$80
 11534 6E58 0A				asl @
 11535 6E59 B0 03 4C 84 6F		jcc l_1E40
 11536
 11537 				; optimize OK (service.pas), line = 2208
 11538
 11539 6E5E A9 FF			lda #$FF
 11540 6E60 8D A5 A0			sta LY
 11541
 11542 6E63			l_1E49
 11543 				; --- ForToDoCondition
 11544 6E63 AD A5 A0			lda LY
 11545 6E66 38 E9 02			sub #$02
 11546 6E69 50 02			svc
 11547 6E6B 49 80			eor #$80
 11548 6E6D 0A				asl @
 11549 6E6E B0 03 4C 77 6F		jcc l_1E57
 11550
 11551 				; optimize FAIL (1, service.pas), line = 2210
 11552
 11553 6E73 E8				inx
 11554 6E74 A9 00 95 96			mva #$00 :STACKORIGIN,x
 11555 6E78 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11556 6E7A E8				inx
 11557 6E7B A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11558 6E7F A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11559 6E83 E8				inx
 11560 6E84 AD A6 A0 95 96		mva XB :STACKORIGIN,x
 11561 6E89 E8				inx
 11562 6E8A AD A4 A0 95 96		mva LX :STACKORIGIN,x
 11563 6E8F 20 41 21			jsr @expandSHORT2SMALL1
 11564 6E92 20 36 21			jsr @expandSHORT2SMALL
 11565 6E95 20 B5 20			jsr addAX_CX
 11566 6E98 CA				dex
 11567 6E99 B5 96			lda :STACKORIGIN,x
 11568 6E9B 8D 99 9F			sta MIN.A
 11569 6E9E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11570 6EA0 8D 9A 9F			sta MIN.A+1
 11571 6EA3 CA				dex
 11572 6EA4 B5 96			lda :STACKORIGIN,x
 11573 6EA6 8D 9B 9F			sta MIN.B
 11574 6EA9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11575 6EAB 8D 9C 9F			sta MIN.B+1
 11576 6EAE CA				dex
 11577 6EAF 20 7F 3C			jsr MIN
 11578 6EB2 AD 9D 9F			lda MIN.RESULT
 11579 6EB5 8D 93 9F			sta MAX.A
 11580 6EB8 AD 9E 9F			lda MIN.RESULT+1
 11581 6EBB 8D 94 9F			sta MAX.A+1
 11582 6EBE B5 96			lda :STACKORIGIN,x
 11583 6EC0 8D 95 9F			sta MAX.B
 11584 6EC3 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11585 6EC5 8D 96 9F			sta MAX.B+1
 11586 6EC8 CA				dex
 11587 6EC9 20 54 3C			jsr MAX
 11588 6ECC AD 97 9F			lda MAX.RESULT
 11589 6ECF 8D B0 A0			sta MX
 11590 6ED2 AD 98 9F			lda MAX.RESULT+1
 11591 6ED5 8D B1 A0			sta MX+1
 11592
 11593 				; optimize OK (service.pas), line = 2211
 11594
 11595 6ED8 A0 00			ldy #$00
 11596 6EDA AD A7 A0			lda YB
 11597 6EDD 10 01			spl
 11598 6EDF 88				dey
 11599 6EE0 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11600 6EE2 85 9F			sta :STACKORIGIN+9
 11601 6EE4 A0 00			ldy #$00
 11602 6EE6 AD A5 A0			lda LY
 11603 6EE9 10 01			spl
 11604 6EEB 88				dey
 11605 6EEC 18 65 9F			add :STACKORIGIN+9
 11606 6EEF 8D B2 A0			sta MY
 11607 6EF2 98				tya
 11608 6EF3 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11609 6EF5 8D B3 A0			sta MY+1
 11610
 11611 				; optimize OK (service.pas), line = 2215
 11612
 11613 6EF8 AD A6 A0			lda XB
 11614 6EFB 18 6D A4 A0			add LX
 11615 6EFF 30 21			jmi l_1EB4x
 11616 6F01 AD A6 A0			lda XB
 11617 6F04 18 6D A4 A0			add LX
 11618 6F08 38 E9 0D			sub #$0D
 11619 6F0B 50 02			svc
 11620 6F0D 49 80			eor #$80
 11621 6F0F 10 11			jpl l_1EB4x
 11622 6F11 AD B2 A0			lda MY
 11623 6F14 0A				asl @
 11624 6F15 0A				asl @
 11625 6F16 0A				asl @
 11626 6F17 0A				asl @
 11627 6F18 18 6D B0 A0			add MX
 11628 6F1C A8				tay
 11629 6F1D B9 00 DB			lda adr.WALL,y
 11630 6F20 F0 24			jeq l_1EB4
 11631 6F22			l_1EB4x
 11632
 11633 				; optimize OK (service.pas), line = 2218
 11634
 11635 6F22 A0 00			ldy #$00
 11636 6F24 AD A4 A0			lda LX
 11637 6F27 10 01			spl
 11638 6F29 88				dey
 11639 6F2A 18 69 01			add #$01
 11640 6F2D 85 86			sta :eax
 11641 6F2F 90 01			scc
 11642 6F31 C8				iny
 11643 6F32 84 87			sty :eax+1
 11644 6F34 A9 03			lda #$03
 11645 6F36 85 8E			sta :ecx
 11646 6F38 A9 00			lda #$00
 11647 6F3A 85 8F			sta :ecx+1
 11648 					.ifdef fmulinit
 11649 					fmulu_16
 11650 					els
 11651 6F3C 20 0B 23			imulCX
 11652 					eif
 11653 6F3F A4 86			ldy :eax
 11654 6F41 A9 01			lda #$01
 11655 6F43 4C 67 6F			jmp l_1ED7
 11656 6F46			l_1EB4
 11657
 11658 				; optimize OK (service.pas), line = 2220
 11659
 11660 6F46 A0 00			ldy #$00
 11661 6F48 AD A4 A0			lda LX
 11662 6F4B 10 01			spl
 11663 6F4D 88				dey
 11664 6F4E 18 69 01			add #$01
 11665 6F51 85 86			sta :eax
 11666 6F53 90 01			scc
 11667 6F55 C8				iny
 11668 6F56 84 87			sty :eax+1
 11669 6F58 A9 03			lda #$03
 11670 6F5A 85 8E			sta :ecx
 11671 6F5C A9 00			lda #$00
 11672 6F5E 85 8F			sta :ecx+1
 11673 					.ifdef fmulinit
 11674 					fmulu_16
 11675 					els
 11676 6F60 20 0B 23			imulCX
 11677 					eif
 11678 6F63 A4 86			ldy :eax
 11679 6F65 A9 00			lda #$00
 11680 6F67			l_1ED7
 11681 6F67 99 C5 A0			sta adr.ADJW+$01,y
 11682
 11683 				; --- ForToDoEpilog
 11684 6F6A EE A5 A0			inc LY
 11685 6F6D AD A5 A0			lda LY
 11686 6F70 C9 80			cmp #$80
 11687 6F72 F0 03 4C 63 6E		jne l_1E49
 11688 6F77			l_1E57
 11689
 11690 				; --- ForToDoEpilog
 11691 6F77 EE A4 A0			inc LX
 11692 6F7A AD A4 A0			lda LX
 11693 6F7D C9 80			cmp #$80
 11694 6F7F F0 03 4C 4E 6E		jne l_1E32
 11695 6F84			l_1E40
 11696
 11697 				; optimize OK (service.pas), line = 2239
 11698
 11699 6F84 AD C4 A0			lda adr.ADJW
 11700 6F87 85 9F			sta :STACKORIGIN+9
 11701 6F89 AD C7 A0			lda adr.ADJW+$03
 11702 6F8C 0A				asl @
 11703 6F8D 05 9F			ora :STACKORIGIN+9
 11704 6F8F 85 9F			sta :STACKORIGIN+9
 11705 6F91 AD CA A0			lda adr.ADJW+$06
 11706 6F94 0A				asl @
 11707 6F95 0A				asl @
 11708 6F96 05 9F			ora :STACKORIGIN+9
 11709 6F98 85 9F			sta :STACKORIGIN+9
 11710 6F9A AD CB A0			lda adr.ADJW+$07
 11711 6F9D 0A				asl @
 11712 6F9E 0A				asl @
 11713 6F9F 0A				asl @
 11714 6FA0 05 9F			ora :STACKORIGIN+9
 11715 6FA2 85 9F			sta :STACKORIGIN+9
 11716 6FA4 AD CC A0			lda adr.ADJW+$08
 11717 6FA7 0A				asl @
 11718 6FA8 0A				asl @
 11719 6FA9 0A				asl @
 11720 6FAA 0A				asl @
 11721 6FAB 05 9F			ora :STACKORIGIN+9
 11722 6FAD 85 9F			sta :STACKORIGIN+9
 11723 6FAF AD C9 A0			lda adr.ADJW+$05
 11724 6FB2 0A				asl @
 11725 6FB3 0A				asl @
 11726 6FB4 0A				asl @
 11727 6FB5 0A				asl @
 11728 6FB6 0A				asl @
 11729 6FB7 05 9F			ora :STACKORIGIN+9
 11730 6FB9 85 9F			sta :STACKORIGIN+9
 11731 6FBB AD C6 A0			lda adr.ADJW+$02
 11732 6FBE 0A				asl @
 11733 6FBF 0A				asl @
 11734 6FC0 0A				asl @
 11735 6FC1 0A				asl @
 11736 6FC2 0A				asl @
 11737 6FC3 0A				asl @
 11738 6FC4 05 9F			ora :STACKORIGIN+9
 11739 6FC6 85 9F			sta :STACKORIGIN+9
 11740 6FC8 AD C5 A0			lda adr.ADJW+$01
 11741 6FCB 0A				asl @
 11742 6FCC 0A				asl @
 11743 6FCD 0A				asl @
 11744 6FCE 0A				asl @
 11745 6FCF 0A				asl @
 11746 6FD0 0A				asl @
 11747 6FD1 0A				asl @
 11748 6FD2 05 9F			ora :STACKORIGIN+9
 11749 6FD4 8D C1 A0			sta AROUND
 11750
 11751 				; optimize OK (service.pas), line = 2270
 11752
 11753 6FD7 AD C3 A0			lda TOUCH
 11754 6FDA F0 03 4C 7B 70		jne l_1F80
 11755
 11756 				; optimize OK (service.pas), line = 2272
 11757
 11758 6FDF AD C1 A0			lda AROUND
 11759 6FE2 29 83			and #$83
 11760 6FE4 D0 05			jne l_1F97
 11761 6FE6 A9 11			lda #$11
 11762 6FE8 8D C0 A0			sta DEFLECT
 11763 6FEB			l_1F97
 11764
 11765 				; optimize OK (service.pas), line = 2273
 11766
 11767 6FEB AD C1 A0			lda AROUND
 11768 6FEE 29 83			and #$83
 11769 6FF0 C9 01			cmp #$01
 11770 6FF2 D0 05			jne l_1FB4
 11771 6FF4 A9 33			lda #$33
 11772 6FF6 8D C0 A0			sta DEFLECT
 11773 6FF9			l_1FB4
 11774
 11775 				; optimize OK (service.pas), line = 2274
 11776
 11777 6FF9 AD C1 A0			lda AROUND
 11778 6FFC 29 83			and #$83
 11779 6FFE C9 02			cmp #$02
 11780 7000 D0 05			jne l_1FD1
 11781 7002 A9 10			lda #$10
 11782 7004 8D C0 A0			sta DEFLECT
 11783 7007			l_1FD1
 11784
 11785 				; optimize OK (service.pas), line = 2275
 11786
 11787 7007 AD C1 A0			lda AROUND
 11788 700A 29 83			and #$83
 11789 700C C9 03			cmp #$03
 11790 700E D0 05			jne l_1FEE
 11791 7010 A9 12			lda #$12
 11792 7012 8D C0 A0			sta DEFLECT
 11793 7015			l_1FEE
 11794
 11795 				; optimize OK (service.pas), line = 2276
 11796
 11797 7015 AD C1 A0			lda AROUND
 11798 7018 29 83			and #$83
 11799 701A C9 80			cmp #$80
 11800 701C D0 05			jne l_200B
 11801 701E A9 01			lda #$01
 11802 7020 8D C0 A0			sta DEFLECT
 11803 7023			l_200B
 11804
 11805 				; optimize OK (service.pas), line = 2277
 11806
 11807 7023 AD C1 A0			lda AROUND
 11808 7026 29 83			and #$83
 11809 7028 C9 81			cmp #$81
 11810 702A D0 05			jne l_2028
 11811 702C A9 21			lda #$21
 11812 702E 8D C0 A0			sta DEFLECT
 11813 7031			l_2028
 11814
 11815 				; optimize OK (service.pas), line = 2278
 11816
 11817 7031 AD C1 A0			lda AROUND
 11818 7034 29 83			and #$83
 11819 7036 C9 82			cmp #$82
 11820 7038 D0 05			jne l_2045
 11821 703A A9 11			lda #$11
 11822 703C 8D C0 A0			sta DEFLECT
 11823 703F			l_2045
 11824
 11825 				; optimize OK (service.pas), line = 2280
 11826
 11827 703F A9 05			lda #$05
 11828 7041 8D BE A0			sta EMERGENCY
 11829
 11830 				; optimize OK (service.pas), line = 2281
 11831
 11832 7044 A0 00			ldy #$00
 11833 7046 AD A7 A0			lda YB
 11834 7049 10 01			spl
 11835 704B 88				dey
 11836 704C 38 E9 01			sub #$01
 11837 704F 8D 92 A0			sta SHOOT_BLOCK.YB
 11838 7052 98				tya
 11839 7053 E9 00			sbc #$00
 11840 7055 8D 93 A0			sta SHOOT_BLOCK.YB+1
 11841 7058 A0 00			ldy #$00
 11842 705A AD A6 A0			lda XB
 11843 705D 10 01			spl
 11844 705F 88				dey
 11845 7060 38 E9 01			sub #$01
 11846 7063 8D 90 A0			sta SHOOT_BLOCK.XB
 11847 7066 98				tya
 11848 7067 E9 00			sbc #$00
 11849 7069 8D 91 A0			sta SHOOT_BLOCK.XB+1
 11850 706C AD 9E A0			lda BALL
 11851 706F 8D 94 A0			sta SHOOT_BLOCK.BALL
 11852 7072 AD 9F A0			lda BALL+1
 11853 7075 8D 95 A0			sta SHOOT_BLOCK.BALL+1
 11854 7078 20 53 65			jsr SHOOT_BLOCK
 11855 707B			l_1F80
 11856
 11857 				; optimize OK (service.pas), line = 2286
 11858
 11859 707B AD C3 A0			lda TOUCH
 11860 707E C9 01			cmp #$01
 11861 7080 F0 03 4C 21 71		jne l_2075
 11862
 11863 				; optimize OK (service.pas), line = 2288
 11864
 11865 7085 AD C1 A0			lda AROUND
 11866 7088 29 0E			and #$0E
 11867 708A D0 05			jne l_208C
 11868 708C A9 21			lda #$21
 11869 708E 8D C0 A0			sta DEFLECT
 11870 7091			l_208C
 11871
 11872 				; optimize OK (service.pas), line = 2289
 11873
 11874 7091 AD C1 A0			lda AROUND
 11875 7094 29 0E			and #$0E
 11876 7096 C9 02			cmp #$02
 11877 7098 D0 05			jne l_20A9
 11878 709A A9 20			lda #$20
 11879 709C 8D C0 A0			sta DEFLECT
 11880 709F			l_20A9
 11881
 11882 				; optimize OK (service.pas), line = 2290
 11883
 11884 709F AD C1 A0			lda AROUND
 11885 70A2 29 0E			and #$0E
 11886 70A4 C9 04			cmp #$04
 11887 70A6 D0 05			jne l_20C6
 11888 70A8 A9 33			lda #$33
 11889 70AA 8D C0 A0			sta DEFLECT
 11890 70AD			l_20C6
 11891
 11892 				; optimize OK (service.pas), line = 2291
 11893
 11894 70AD AD C1 A0			lda AROUND
 11895 70B0 29 0E			and #$0E
 11896 70B2 C9 06			cmp #$06
 11897 70B4 D0 05			jne l_20E3
 11898 70B6 A9 22			lda #$22
 11899 70B8 8D C0 A0			sta DEFLECT
 11900 70BB			l_20E3
 11901
 11902 				; optimize OK (service.pas), line = 2292
 11903
 11904 70BB AD C1 A0			lda AROUND
 11905 70BE 29 0E			and #$0E
 11906 70C0 C9 08			cmp #$08
 11907 70C2 D0 05			jne l_2100
 11908 70C4 A9 01			lda #$01
 11909 70C6 8D C0 A0			sta DEFLECT
 11910 70C9			l_2100
 11911
 11912 				; optimize OK (service.pas), line = 2293
 11913
 11914 70C9 AD C1 A0			lda AROUND
 11915 70CC 29 0E			and #$0E
 11916 70CE C9 0A			cmp #$0A
 11917 70D0 D0 05			jne l_211D
 11918 70D2 A9 21			lda #$21
 11919 70D4 8D C0 A0			sta DEFLECT
 11920 70D7			l_211D
 11921
 11922 				; optimize OK (service.pas), line = 2294
 11923
 11924 70D7 AD C1 A0			lda AROUND
 11925 70DA 29 0E			and #$0E
 11926 70DC C9 0C			cmp #$0C
 11927 70DE D0 05			jne l_213A
 11928 70E0 A9 11			lda #$11
 11929 70E2 8D C0 A0			sta DEFLECT
 11930 70E5			l_213A
 11931
 11932 				; optimize OK (service.pas), line = 2296
 11933
 11934 70E5 A9 08			lda #$08
 11935 70E7 8D BE A0			sta EMERGENCY
 11936
 11937 				; optimize OK (service.pas), line = 2297
 11938
 11939 70EA A0 00			ldy #$00
 11940 70EC AD A7 A0			lda YB
 11941 70EF 10 01			spl
 11942 70F1 88				dey
 11943 70F2 38 E9 01			sub #$01
 11944 70F5 8D 92 A0			sta SHOOT_BLOCK.YB
 11945 70F8 98				tya
 11946 70F9 E9 00			sbc #$00
 11947 70FB 8D 93 A0			sta SHOOT_BLOCK.YB+1
 11948 70FE A0 00			ldy #$00
 11949 7100 AD A6 A0			lda XB
 11950 7103 10 01			spl
 11951 7105 88				dey
 11952 7106 18 69 01			add #$01
 11953 7109 8D 90 A0			sta SHOOT_BLOCK.XB
 11954 710C 90 01			scc
 11955 710E C8				iny
 11956 710F 8C 91 A0			sty SHOOT_BLOCK.XB+1
 11957 7112 AD 9E A0			lda BALL
 11958 7115 8D 94 A0			sta SHOOT_BLOCK.BALL
 11959 7118 AD 9F A0			lda BALL+1
 11960 711B 8D 95 A0			sta SHOOT_BLOCK.BALL+1
 11961 711E 20 53 65			jsr SHOOT_BLOCK
 11962 7121			l_2075
 11963
 11964 				; optimize OK (service.pas), line = 2300
 11965
 11966 7121 AD C3 A0			lda TOUCH
 11967 7124 C9 02			cmp #$02
 11968 7126 F0 03 4C C7 71		jne l_216A
 11969
 11970 				; optimize OK (service.pas), line = 2302
 11971
 11972 712B AD C1 A0			lda AROUND
 11973 712E 29 E0			and #$E0
 11974 7130 D0 05			jne l_2181
 11975 7132 A9 12			lda #$12
 11976 7134 8D C0 A0			sta DEFLECT
 11977 7137			l_2181
 11978
 11979 				; optimize OK (service.pas), line = 2303
 11980
 11981 7137 AD C1 A0			lda AROUND
 11982 713A 29 E0			and #$E0
 11983 713C C9 20			cmp #$20
 11984 713E D0 05			jne l_219E
 11985 7140 A9 10			lda #$10
 11986 7142 8D C0 A0			sta DEFLECT
 11987 7145			l_219E
 11988
 11989 				; optimize OK (service.pas), line = 2304
 11990
 11991 7145 AD C1 A0			lda AROUND
 11992 7148 29 E0			and #$E0
 11993 714A C9 40			cmp #$40
 11994 714C D0 05			jne l_21BB
 11995 714E A9 33			lda #$33
 11996 7150 8D C0 A0			sta DEFLECT
 11997 7153			l_21BB
 11998
 11999 				; optimize OK (service.pas), line = 2305
 12000
 12001 7153 AD C1 A0			lda AROUND
 12002 7156 29 E0			and #$E0
 12003 7158 C9 60			cmp #$60
 12004 715A D0 05			jne l_21D8
 12005 715C A9 11			lda #$11
 12006 715E 8D C0 A0			sta DEFLECT
 12007 7161			l_21D8
 12008
 12009 				; optimize OK (service.pas), line = 2306
 12010
 12011 7161 AD C1 A0			lda AROUND
 12012 7164 29 E0			and #$E0
 12013 7166 C9 80			cmp #$80
 12014 7168 D0 05			jne l_21F5
 12015 716A A9 02			lda #$02
 12016 716C 8D C0 A0			sta DEFLECT
 12017 716F			l_21F5
 12018
 12019 				; optimize OK (service.pas), line = 2307
 12020
 12021 716F AD C1 A0			lda AROUND
 12022 7172 29 E0			and #$E0
 12023 7174 C9 A0			cmp #$A0
 12024 7176 D0 05			jne l_2212
 12025 7178 A9 12			lda #$12
 12026 717A 8D C0 A0			sta DEFLECT
 12027 717D			l_2212
 12028
 12029 				; optimize OK (service.pas), line = 2308
 12030
 12031 717D AD C1 A0			lda AROUND
 12032 7180 29 E0			and #$E0
 12033 7182 C9 C0			cmp #$C0
 12034 7184 D0 05			jne l_222F
 12035 7186 A9 22			lda #$22
 12036 7188 8D C0 A0			sta DEFLECT
 12037 718B			l_222F
 12038
 12039 				; optimize OK (service.pas), line = 2310
 12040
 12041 718B A9 06			lda #$06
 12042 718D 8D BE A0			sta EMERGENCY
 12043
 12044 				; optimize OK (service.pas), line = 2311
 12045
 12046 7190 A0 00			ldy #$00
 12047 7192 AD A7 A0			lda YB
 12048 7195 10 01			spl
 12049 7197 88				dey
 12050 7198 18 69 01			add #$01
 12051 719B 8D 92 A0			sta SHOOT_BLOCK.YB
 12052 719E 90 01			scc
 12053 71A0 C8				iny
 12054 71A1 8C 93 A0			sty SHOOT_BLOCK.YB+1
 12055 71A4 A0 00			ldy #$00
 12056 71A6 AD A6 A0			lda XB
 12057 71A9 10 01			spl
 12058 71AB 88				dey
 12059 71AC 38 E9 01			sub #$01
 12060 71AF 8D 90 A0			sta SHOOT_BLOCK.XB
 12061 71B2 98				tya
 12062 71B3 E9 00			sbc #$00
 12063 71B5 8D 91 A0			sta SHOOT_BLOCK.XB+1
 12064 71B8 AD 9E A0			lda BALL
 12065 71BB 8D 94 A0			sta SHOOT_BLOCK.BALL
 12066 71BE AD 9F A0			lda BALL+1
 12067 71C1 8D 95 A0			sta SHOOT_BLOCK.BALL+1
 12068 71C4 20 53 65			jsr SHOOT_BLOCK
 12069 71C7			l_216A
 12070
 12071 				; optimize OK (service.pas), line = 2314
 12072
 12073 71C7 AD C3 A0			lda TOUCH
 12074 71CA C9 03			cmp #$03
 12075 71CC F0 03 4C 6D 72		jne l_225F
 12076
 12077 				; optimize OK (service.pas), line = 2316
 12078
 12079 71D1 AD C1 A0			lda AROUND
 12080 71D4 29 38			and #$38
 12081 71D6 D0 05			jne l_2276
 12082 71D8 A9 22			lda #$22
 12083 71DA 8D C0 A0			sta DEFLECT
 12084 71DD			l_2276
 12085
 12086 				; optimize OK (service.pas), line = 2317
 12087
 12088 71DD AD C1 A0			lda AROUND
 12089 71E0 29 38			and #$38
 12090 71E2 C9 08			cmp #$08
 12091 71E4 D0 05			jne l_2293
 12092 71E6 A9 02			lda #$02
 12093 71E8 8D C0 A0			sta DEFLECT
 12094 71EB			l_2293
 12095
 12096 				; optimize OK (service.pas), line = 2318
 12097
 12098 71EB AD C1 A0			lda AROUND
 12099 71EE 29 38			and #$38
 12100 71F0 C9 10			cmp #$10
 12101 71F2 D0 05			jne l_22B0
 12102 71F4 A9 33			lda #$33
 12103 71F6 8D C0 A0			sta DEFLECT
 12104 71F9			l_22B0
 12105
 12106 				; optimize OK (service.pas), line = 2319
 12107
 12108 71F9 AD C1 A0			lda AROUND
 12109 71FC 29 38			and #$38
 12110 71FE C9 18			cmp #$18
 12111 7200 D0 05			jne l_22CD
 12112 7202 A9 12			lda #$12
 12113 7204 8D C0 A0			sta DEFLECT
 12114 7207			l_22CD
 12115
 12116 				; optimize OK (service.pas), line = 2320
 12117
 12118 7207 AD C1 A0			lda AROUND
 12119 720A 29 38			and #$38
 12120 720C C9 20			cmp #$20
 12121 720E D0 05			jne l_22EA
 12122 7210 A9 20			lda #$20
 12123 7212 8D C0 A0			sta DEFLECT
 12124 7215			l_22EA
 12125
 12126 				; optimize OK (service.pas), line = 2321
 12127
 12128 7215 AD C1 A0			lda AROUND
 12129 7218 29 38			and #$38
 12130 721A C9 28			cmp #$28
 12131 721C D0 05			jne l_2307
 12132 721E A9 22			lda #$22
 12133 7220 8D C0 A0			sta DEFLECT
 12134 7223			l_2307
 12135
 12136 				; optimize OK (service.pas), line = 2322
 12137
 12138 7223 AD C1 A0			lda AROUND
 12139 7226 29 38			and #$38
 12140 7228 C9 30			cmp #$30
 12141 722A D0 05			jne l_2324
 12142 722C A9 21			lda #$21
 12143 722E 8D C0 A0			sta DEFLECT
 12144 7231			l_2324
 12145
 12146 				; optimize OK (service.pas), line = 2324
 12147
 12148 7231 A9 07			lda #$07
 12149 7233 8D BE A0			sta EMERGENCY
 12150
 12151 				; optimize OK (service.pas), line = 2325
 12152
 12153 7236 A0 00			ldy #$00
 12154 7238 AD A7 A0			lda YB
 12155 723B 10 01			spl
 12156 723D 88				dey
 12157 723E 18 69 01			add #$01
 12158 7241 8D 92 A0			sta SHOOT_BLOCK.YB
 12159 7244 90 01			scc
 12160 7246 C8				iny
 12161 7247 8C 93 A0			sty SHOOT_BLOCK.YB+1
 12162 724A A0 00			ldy #$00
 12163 724C AD A6 A0			lda XB
 12164 724F 10 01			spl
 12165 7251 88				dey
 12166 7252 18 69 01			add #$01
 12167 7255 8D 90 A0			sta SHOOT_BLOCK.XB
 12168 7258 90 01			scc
 12169 725A C8				iny
 12170 725B 8C 91 A0			sty SHOOT_BLOCK.XB+1
 12171 725E AD 9E A0			lda BALL
 12172 7261 8D 94 A0			sta SHOOT_BLOCK.BALL
 12173 7264 AD 9F A0			lda BALL+1
 12174 7267 8D 95 A0			sta SHOOT_BLOCK.BALL+1
 12175 726A 20 53 65			jsr SHOOT_BLOCK
 12176 726D			l_225F
 12177
 12178 				; optimize OK (service.pas), line = 2331
 12179
 12180 726D AD C0 A0			lda DEFLECT
 12181 7270 4A				lsr @
 12182 7271 4A				lsr @
 12183 7272 4A				lsr @
 12184 7273 4A				lsr @
 12185 7274 8D BA A0			sta MYX
 12186 7277 A9 00			lda #$00
 12187 7279 8D BB A0			sta MYX+1
 12188
 12189 				; optimize OK (service.pas), line = 2332
 12190
 12191 727C AD C0 A0			lda DEFLECT
 12192 727F 29 0F			and #$0F
 12193 7281 8D BC A0			sta MYY
 12194 7284 A9 00			lda #$00
 12195 7286 8D BD A0			sta MYY+1
 12196
 12197 				; optimize OK (service.pas), line = 2334
 12198
 12199 7289 AD BB A0			lda MYX+1
 12200 728C D0 05			bne @+
 12201 728E AD BA A0			lda MYX
 12202 7291 C9 01			cmp #$01
 12203 				@
 12204 7293 D0 50			jne l_2367
 12205 7295 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12206 729F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12207 72A1 B1 84			lda (:bp2),y
 12208 72A3 85 8A			sta SYSTEM.ABS.@010184000.X
 12209 72A5 C8				iny
 12210 72A6 B1 84			lda (:bp2),y
 12211 72A8 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12212 72AA 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12213 72AD E8				inx
 12214 72AE A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12215 72B2 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12216 72B6 A9 00			lda #$00
 12217 72B8 38 F5 96			sub :STACKORIGIN,x
 12218 72BB 95 96			sta :STACKORIGIN,x
 12219 72BD A9 00			lda #$00
 12220 72BF F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12221 72C1 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12222 72C3 A9 00			lda #$00
 12223 72C5 E9 00			sbc #$00
 12224 72C7 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12225 72C9 A9 00			lda #$00
 12226 72CB E9 00			sbc #$00
 12227 72CD 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12228 72CF AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12229 72D9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12230 72DB B5 96			lda :STACKORIGIN,x
 12231 72DD 91 84			sta (:bp2),y
 12232 72DF C8				iny
 12233 72E0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12234 72E2 91 84			sta (:bp2),y
 12235 72E4 CA				dex
 12236 72E5			l_2367
 12237
 12238 				; optimize OK (service.pas), line = 2335
 12239
 12240 72E5 AD BB A0			lda MYX+1
 12241 72E8 D0 05			bne @+
 12242 72EA AD BA A0			lda MYX
 12243 72ED C9 02			cmp #$02
 12244 				@
 12245 72EF D0 2D			jne l_2384
 12246 72F1 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12247 72FB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12248 72FD B1 84			lda (:bp2),y
 12249 72FF 85 8A			sta SYSTEM.ABS.@010184000.X
 12250 7301 C8				iny
 12251 7302 B1 84			lda (:bp2),y
 12252 7304 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12253 7306 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12254 7309 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12255 7313 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12256 7315 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12257 7317 91 84			sta (:bp2),y
 12258 7319 C8				iny
 12259 731A A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12260 731C 91 84			sta (:bp2),y
 12261 731E			l_2384
 12262
 12263 				; optimize OK (service.pas), line = 2336
 12264
 12265 731E AD BB A0			lda MYX+1
 12266 7321 D0 05			bne @+
 12267 7323 AD BA A0			lda MYX
 12268 7326 C9 03			cmp #$03
 12269 				@
 12270 7328 D0 25			jne l_239E
 12271 732A AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12272 7334 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12273 7336 A9 00			lda #$00
 12274 7338 38 F1 84			sub (:bp2),y
 12275 733B 85 9F			sta :STACKORIGIN+9
 12276 733D C8				iny
 12277 733E A9 00			lda #$00
 12278 7340 F1 84			sbc (:bp2),y
 12279 7342 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12280 7344 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12281 7346 A5 9F			lda :STACKORIGIN+9
 12282 7348 91 84			sta (:bp2),y
 12283 734A C8				iny
 12284 734B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12285 734D 91 84			sta (:bp2),y
 12286 734F			l_239E
 12287
 12288 				; optimize OK (service.pas), line = 2338
 12289
 12290 734F AD BD A0			lda MYY+1
 12291 7352 D0 05			bne @+
 12292 7354 AD BC A0			lda MYY
 12293 7357 C9 01			cmp #$01
 12294 				@
 12295 7359 D0 50			jne l_23BA
 12296 735B AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12297 7365 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12298 7367 B1 84			lda (:bp2),y
 12299 7369 85 8A			sta SYSTEM.ABS.@010184000.X
 12300 736B C8				iny
 12301 736C B1 84			lda (:bp2),y
 12302 736E 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12303 7370 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12304 7373 E8				inx
 12305 7374 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12306 7378 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12307 737C A9 00			lda #$00
 12308 737E 38 F5 96			sub :STACKORIGIN,x
 12309 7381 95 96			sta :STACKORIGIN,x
 12310 7383 A9 00			lda #$00
 12311 7385 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12312 7387 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12313 7389 A9 00			lda #$00
 12314 738B E9 00			sbc #$00
 12315 738D 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12316 738F A9 00			lda #$00
 12317 7391 E9 00			sbc #$00
 12318 7393 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12319 7395 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12320 739F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12321 73A1 B5 96			lda :STACKORIGIN,x
 12322 73A3 91 84			sta (:bp2),y
 12323 73A5 C8				iny
 12324 73A6 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12325 73A8 91 84			sta (:bp2),y
 12326 73AA CA				dex
 12327 73AB			l_23BA
 12328
 12329 				; optimize OK (service.pas), line = 2339
 12330
 12331 73AB AD BD A0			lda MYY+1
 12332 73AE D0 05			bne @+
 12333 73B0 AD BC A0			lda MYY
 12334 73B3 C9 02			cmp #$02
 12335 				@
 12336 73B5 D0 2D			jne l_23D7
 12337 73B7 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12338 73C1 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12339 73C3 B1 84			lda (:bp2),y
 12340 73C5 85 8A			sta SYSTEM.ABS.@010184000.X
 12341 73C7 C8				iny
 12342 73C8 B1 84			lda (:bp2),y
 12343 73CA 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12344 73CC 20 D1 2A			jsr SYSTEM.ABS.@010184000
 12345 73CF AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12346 73D9 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12347 73DB A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12348 73DD 91 84			sta (:bp2),y
 12349 73DF C8				iny
 12350 73E0 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12351 73E2 91 84			sta (:bp2),y
 12352 73E4			l_23D7
 12353
 12354 				; optimize OK (service.pas), line = 2340
 12355
 12356 73E4 AD BD A0			lda MYY+1
 12357 73E7 D0 05			bne @+
 12358 73E9 AD BC A0			lda MYY
 12359 73EC C9 03			cmp #$03
 12360 				@
 12361 73EE D0 25			jne l_23F1
 12362 73F0 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12363 73FA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12364 73FC A9 00			lda #$00
 12365 73FE 38 F1 84			sub (:bp2),y
 12366 7401 85 9F			sta :STACKORIGIN+9
 12367 7403 C8				iny
 12368 7404 A9 00			lda #$00
 12369 7406 F1 84			sbc (:bp2),y
 12370 7408 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12371 740A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12372 740C A5 9F			lda :STACKORIGIN+9
 12373 740E 91 84			sta (:bp2),y
 12374 7410 C8				iny
 12375 7411 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12376 7413 91 84			sta (:bp2),y
 12377 7415			l_23F1
 12378 7415			l_1DE2
 12379 7415			l_1B07
 12380
 12381 				; optimize OK (service.pas), line = 2350
 12382
 12383 7415 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12384 741F A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12385 7421 B1 84			lda (:bp2),y
 12386 7423 C9 65			cmp #$65
 12387 7425 B0 03 4C F0 75		jcc l_2412
 12388
 12389 				; optimize OK (service.pas), line = 2353
 12390
 12391 742A AD BE A0			lda EMERGENCY
 12392 742D C9 FF			cmp #$FF
 12393 742F D0 05			jne l_2425
 12394 7431 A9 04			lda #$04
 12395 7433 20 AA 3C			jsr FATAL_ERROR
 12396 7436			l_2425
 12397
 12398 				; optimize OK (service.pas), line = 2355
 12399
 12400 7436 AC BE A0			ldy EMERGENCY
 12401 7439 B9 7F 20			lda adr.EMERG_DEV,y
 12402 743C 8D BF A0			sta MIMAX
 12403
 12404 				; optimize OK (service.pas), line = 2381
 12405
 12406 743F 98				tya
 12407 7440 8D CD A0			sta @CASETMP_0009
 12408 7443 C9 05			cmp #$05
 12409 7445 D0 1F			jne l_243E
 12410 				@
 12411
 12412 				; optimize OK (service.pas), line = 2384
 12413
 12414 7447 AD C7 A0			lda adr.ADJW+$03
 12415 744A D0 08			jne l_2455
 12416 744C AD BF A0			lda MIMAX
 12417 744F 29 0F			and #$0F
 12418 7451 8D BF A0			sta MIMAX
 12419 7454			l_2455
 12420
 12421 				; optimize OK (service.pas), line = 2385
 12422
 12423 7454 AD C5 A0			lda adr.ADJW+$01
 12424 7457 D0 0A			jne l_247D
 12425 7459 AD BF A0			lda MIMAX
 12426 745C 29 F0			and #$F0
 12427 745E 09 03			ora #$03
 12428 7460 8D BF A0			sta MIMAX
 12429 7463			l_247D
 12430 7463 4C D2 74			jmp a_0009
 12431 7466			l_243E
 12432 7466 C9 06			cmp #$06
 12433 7468 D0 21			jne l_2495
 12434
 12435 				; optimize OK (service.pas), line = 2389
 12436
 12437 746A AD C5 A0			lda adr.ADJW+$01
 12438 746D D0 0A			jne l_24AC
 12439 746F AD BF A0			lda MIMAX
 12440 7472 29 0F			and #$0F
 12441 7474 09 10			ora #$10
 12442 7476 8D BF A0			sta MIMAX
 12443 7479			l_24AC
 12444
 12445 				; optimize OK (service.pas), line = 2390
 12446
 12447 7479 AD C9 A0			lda adr.ADJW+$05
 12448 747C D0 0A			jne l_24D4
 12449 747E AD BF A0			lda MIMAX
 12450 7481 29 F0			and #$F0
 12451 7483 09 04			ora #$04
 12452 7485 8D BF A0			sta MIMAX
 12453 7488			l_24D4
 12454 7488 4C D2 74			jmp a_0009
 12455 748B			l_2495
 12456 748B C9 07			cmp #$07
 12457 748D D0 21			jne l_24EC
 12458
 12459 				; optimize OK (service.pas), line = 2394
 12460
 12461 748F AD C9 A0			lda adr.ADJW+$05
 12462 7492 D0 0A			jne l_2503
 12463 7494 AD BF A0			lda MIMAX
 12464 7497 29 0F			and #$0F
 12465 7499 09 20			ora #$20
 12466 749B 8D BF A0			sta MIMAX
 12467 749E			l_2503
 12468
 12469 				; optimize OK (service.pas), line = 2395
 12470
 12471 749E AD CB A0			lda adr.ADJW+$07
 12472 74A1 D0 0A			jne l_252B
 12473 74A3 AD BF A0			lda MIMAX
 12474 74A6 29 F0			and #$F0
 12475 74A8 09 05			ora #$05
 12476 74AA 8D BF A0			sta MIMAX
 12477 74AD			l_252B
 12478 74AD 4C D2 74			jmp a_0009
 12479 74B0			l_24EC
 12480 74B0 C9 08			cmp #$08
 12481 74B2 D0 1E			jne l_2543
 12482
 12483 				; optimize OK (service.pas), line = 2399
 12484
 12485 74B4 AD CB A0			lda adr.ADJW+$07
 12486 74B7 D0 0A			jne l_255A
 12487 74B9 AD BF A0			lda MIMAX
 12488 74BC 29 0F			and #$0F
 12489 74BE 09 30			ora #$30
 12490 74C0 8D BF A0			sta MIMAX
 12491 74C3			l_255A
 12492
 12493 				; optimize OK (service.pas), line = 2400
 12494
 12495 74C3 AD C7 A0			lda adr.ADJW+$03
 12496 74C6 D0 0A			jne l_2582
 12497 74C8 AD BF A0			lda MIMAX
 12498 74CB 29 F0			and #$F0
 12499 74CD 09 06			ora #$06
 12500 74CF 8D BF A0			sta MIMAX
 12501 74D2			l_2582
 12502 74D2			l_2543
 12503 74D2			a_0009
 12504
 12505 				; --- RepeatUntilProlog
 12506 74D2			l_259A
 12507
 12508 				; optimize OK (service.pas), line = 2407
 12509
 12510 74D2 AD BF A0			lda MIMAX
 12511 74D5 4A				lsr @
 12512 74D6 4A				lsr @
 12513 74D7 4A				lsr @
 12514 74D8 4A				lsr @
 12515 74D9 85 8E			sta :ecx
 12516 74DB A9 5A			lda #$5A
 12517 74DD 85 86			sta :eax
 12518 					.ifdef fmulinit
 12519 					fmulu_8
 12520 					els
 12521 74DF 20 BF 22			imulCL
 12522 					eif
 12523 74E2 A5 86			lda :eax
 12524 74E4 8D A4 A0			sta LX
 12525
 12526 				; optimize OK (service.pas), line = 2408
 12527
 12528 74E7 AD BF A0			lda MIMAX
 12529 74EA 29 0F			and #$0F
 12530 74EC 85 8E			sta :ecx
 12531 74EE A9 5A			lda #$5A
 12532 74F0 85 86			sta :eax
 12533 					.ifdef fmulinit
 12534 					fmulu_8
 12535 					els
 12536 74F2 20 BF 22			imulCL
 12537 					eif
 12538 74F5 8D B1 A0			sta MX+1
 12539 74F8 A5 86			lda :eax
 12540 74FA 8D B0 A0			sta MX
 12541
 12542 				; optimize OK (service.pas), line = 2410
 12543
 12544 74FD A0 00			ldy #$00
 12545 74FF AD A4 A0			lda LX
 12546 7502 10 01			spl
 12547 7504 88				dey
 12548 7505 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12549 7507 85 A0			sta :STACKORIGIN+10
 12550 7509 AD B0 A0			lda MX
 12551 750C 38 E5 A0			sub :STACKORIGIN+10
 12552 750F 8D 9C 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 12553 7512 AD B1 A0			lda MX+1
 12554 7515 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12555 7517 8D 9D 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12556 751A 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 12557 751D E8				inx
 12558 751E AD 9E 9D 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12559 7523 AD 9F 9D 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12560 7528 E8				inx
 12561 7529 AD A4 A0 95 96		mva LX :STACKORIGIN,x
 12562 752E 20 36 21			jsr @expandSHORT2SMALL
 12563 7531 20 B5 20			jsr addAX_CX
 12564 7534 CA				dex
 12565 7535 B5 96			lda :STACKORIGIN,x
 12566 7537 8D B8 A0			sta ANGLE
 12567 753A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12568 753C 8D B9 A0			sta ANGLE+1
 12569 753F CA				dex
 12570
 12571 				; optimize OK (service.pas), line = 2415
 12572
 12573 7540 A9 5A			lda #$5A
 12574 7542 85 8E			sta @SMALLINT.MOD.B
 12575 7544 A9 00			lda #$00
 12576 7546 85 8F			sta @SMALLINT.MOD.B+1
 12577 7548 AD B8 A0			lda ANGLE
 12578 754B 85 86			sta @SMALLINT.MOD.A
 12579 754D AD B9 A0			lda ANGLE+1
 12580 7550 85 87			sta @SMALLINT.MOD.A+1
 12581 7552 20 50 22			jsr @SMALLINT.MOD
 12582 7555 A5 92			lda @SMALLINT.MOD.RESULT
 12583 7557 C9 1F			cmp #$1F
 12584 7559 A5 93			lda @SMALLINT.MOD.RESULT+1
 12585 755B E9 00			sbc #$00
 12586 755D 50 02			svc
 12587 755F 49 80			eor #$80
 12588 7561 10 03 4C D2 74		jmi l_259A
 12589 7566 A9 5A			lda #$5A
 12590 7568 85 8E			sta @SMALLINT.MOD.B
 12591 756A A9 00			lda #$00
 12592 756C 85 8F			sta @SMALLINT.MOD.B+1
 12593 756E AD B8 A0			lda ANGLE
 12594 7571 85 86			sta @SMALLINT.MOD.A
 12595 7573 AD B9 A0			lda ANGLE+1
 12596 7576 85 87			sta @SMALLINT.MOD.A+1
 12597 7578 20 50 22			jsr @SMALLINT.MOD
 12598 757B A5 92			lda @SMALLINT.MOD.RESULT
 12599 757D C9 3C			cmp #$3C
 12600 757F A5 93			lda @SMALLINT.MOD.RESULT+1
 12601 7581 E9 00			sbc #$00
 12602 7583 50 02			svc
 12603 7585 49 80			eor #$80
 12604 7587 30 03 4C D2 74		jpl l_259A
 12605
 12606 				; optimize OK (service.pas), line = 2419
 12607
 12608 758C A9 68			lda #$68
 12609 758E 85 8E			sta @SMALLINT.MOD.B
 12610 7590 A9 01			lda #$01
 12611 7592 85 8F			sta @SMALLINT.MOD.B+1
 12612 7594 AD B8 A0			lda ANGLE
 12613 7597 85 86			sta @SMALLINT.MOD.A
 12614 7599 AD B9 A0			lda ANGLE+1
 12615 759C 85 87			sta @SMALLINT.MOD.A+1
 12616 759E 20 50 22			jsr @SMALLINT.MOD
 12617 75A1 A5 92			lda @SMALLINT.MOD.RESULT
 12618 75A3 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 12619 75A6 A5 93			lda @SMALLINT.MOD.RESULT+1
 12620 75A8 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 12621 75AB AD 9E A0			lda BALL
 12622 75AE 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 12623 75B1 AD 9F A0			lda BALL+1
 12624 75B4 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 12625 75B7 20 A6 46			jsr SET_BALL_DIRECTION
 12626
 12627 				; optimize OK (service.pas), line = 2420
 12628
 12629 75BA AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12630 75C4 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12631 75C6 B1 84			lda (:bp2),y
 12632 75C8 8D E1 9F			sta SET_BALL_SPEED.SPEED
 12633 75CB C8				iny
 12634 75CC B1 84			lda (:bp2),y
 12635 75CE 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 12636 75D1 AD 9E A0			lda BALL
 12637 75D4 8D DD 9F			sta SET_BALL_SPEED.BALL
 12638 75D7 AD 9F A0			lda BALL+1
 12639 75DA 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 12640 75DD 20 C3 44			jsr SET_BALL_SPEED
 12641
 12642 				; optimize OK (service.pas), line = 2422
 12643
 12644 75E0 AC 9E A0 84 84 AC + 	mwy BALL :bp2
 12645 75EA A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12646 75EC A9 00			lda #$00
 12647 75EE 91 84			sta (:bp2),y
 12648 75F0			l_2412
 12649
 12650 				; ------------------------------------------------------------
 12651
 12652 = A09E			BALL	= DATAORIGIN+$033A
 12653 = 9D64			BALL.X	= DATAORIGIN+$0000
 12654 = 9D66			BALL.Y	= DATAORIGIN+$0002
 12655 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
 12656 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
 12657 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
 12658 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
 12659 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
 12660 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
 12661 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
 12662 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
 12663 = 9D78			BALL.SBD	= DATAORIGIN+$0014
 12664 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
 12665 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
 12666 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
 12667 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
 12668 = 9D7F			BALL.STM	= DATAORIGIN+$001B
 12669 = A0A2			X	= DATAORIGIN+$033E
 12670 = A0A3			Y	= DATAORIGIN+$033F
 12671 = A0A4			LX	= DATAORIGIN+$0340
 12672 = A0A5			LY	= DATAORIGIN+$0341
 12673 = A0A6			XB	= DATAORIGIN+$0342
 12674 = A0A7			YB	= DATAORIGIN+$0343
 12675 = A0A8			OX	= DATAORIGIN+$0344
 12676 = A0AA			OY	= DATAORIGIN+$0346
 12677 = A0AC			NX	= DATAORIGIN+$0348
 12678 = A0AE			NY	= DATAORIGIN+$034A
 12679 = A0B0			MX	= DATAORIGIN+$034C
 12680 = A0B2			MY	= DATAORIGIN+$034E
 12681 = A0B4			F1	= DATAORIGIN+$0350
 12682 = A0B6			F2	= DATAORIGIN+$0352
 12683 = A0B8			ANGLE	= DATAORIGIN+$0354
 12684 = A0BA			MYX	= DATAORIGIN+$0356
 12685 = A0BC			MYY	= DATAORIGIN+$0358
 12686 = A0BE			EMERGENCY	= DATAORIGIN+$035A
 12687 = A0BF			MIMAX	= DATAORIGIN+$035B
 12688 = A0C0			DEFLECT	= DATAORIGIN+$035C
 12689 = A0C1			AROUND	= DATAORIGIN+$035D
 12690 = A0C2			COLLISION	= DATAORIGIN+$035E
 12691 = A0C3			TOUCH	= DATAORIGIN+$035F
 12692 = A0C4			adr.ADJW	= [DATAORIGIN+$0360] .array [3] [3]
 12693 75F0			.var ADJW	= adr.ADJW .word
 12694 = A0CD			@CASETMP_0009	= DATAORIGIN+$0369
 12695
 12696 = A09E			@VarData	= BALL
 12697 = 0028			@VarDataSize	= 40
 12698
 12699 75F0			@exit
 12700 					.ifdef @new
 12701 					lda <@VarData
 12702 					sta :ztmp
 12703 					lda >@VarData
 12704 					ldy #@VarDataSize-1
 12705 					jmp @FreeMem
 12706 					els
 12707 75F0 60				rts						; ret
 12708 					eif
 12709 = 75F1 C4 A0		ADJW
 12709 				.endl
 12710
 12711 75F3			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 12712
 12713 				; optimize OK (service.pas), line = 2437
 12714
 12715 75F3 A9 00			lda #$00
 12716 75F5 8D D5 A0			sta Y
 12717
 12718 75F8			l_2608
 12719 				; --- ForToDoCondition
 12720 75F8 AC CE A0 84 84 AC + 	mwy PATT :bp2
 12721 7602 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12722 7604 B1 84			lda (:bp2),y
 12723 7606 85 8E			sta @WORD.MOD.B
 12724 7608 C8				iny
 12725 7609 B1 84			lda (:bp2),y
 12726 760B 85 8F			sta @WORD.MOD.B+1
 12727 760D AD D5 A0			lda Y
 12728 7610 85 86			sta @WORD.MOD.A
 12729 7612 A9 00			lda #$00
 12730 7614 85 87			sta @WORD.MOD.A+1
 12731 7616 20 A0 23			jsr @WORD.MOD
 12732 7619 A5 92			lda @WORD.MOD.RESULT
 12733 761B AC D5 A0			ldy Y
 12734 761E 99 00 C4			sta adr.MODX,y
 12735
 12736 				; optimize OK (service.pas), line = 2443
 12737
 12738 7621 AC CE A0 84 84 AC + 	mwy PATT :bp2
 12739 762B A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 12740 762D B1 84			lda (:bp2),y
 12741 762F 85 8E			sta @WORD.MOD.B
 12742 7631 C8				iny
 12743 7632 B1 84			lda (:bp2),y
 12744 7634 85 8F			sta @WORD.MOD.B+1
 12745 7636 AD D5 A0			lda Y
 12746 7639 85 86			sta @WORD.MOD.A
 12747 763B A9 00			lda #$00
 12748 763D 85 87			sta @WORD.MOD.A+1
 12749 763F 20 A0 23			jsr @WORD.MOD
 12750 7642 A5 92			lda @WORD.MOD.RESULT
 12751 7644 AC D5 A0			ldy Y
 12752 7647 99 00 C3			sta adr.MODY,y
 12753
 12754 				; --- ForToDoEpilog
 12755 764A EE D5 A0			inc Y
 12756 764D D0 A9			jne l_2608
 12757 764F			l_2616
 12758
 12759 				; optimize OK (service.pas), line = 2449
 12760
 12761 764F A9 0A			lda #$0A
 12762 7651 8D D5 A0			sta Y
 12763
 12764 7654			l_2640
 12765 				; --- ForToDoCondition
 12766 7654 AC D5 A0			ldy Y
 12767 7657 C0 C7			cpy #$C7
 12768 7659 90 03 4C 82 77		jcs l_264E
 12769
 12770 				; optimize OK (service.pas), line = 2452
 12771
 12772 765E B9 00 C3			lda adr.MODY,y
 12773 7661 85 86			sta :eax
 12774 7663 AC CE A0 84 84 AC + 	mwy PATT :bp2
 12775 766D A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12776 766F B1 84			lda (:bp2),y
 12777 7671 85 8E			sta :ecx
 12778 7673 C8				iny
 12779 7674 B1 84			lda (:bp2),y
 12780 7676 85 8F			sta :ecx+1
 12781 7678 A9 00			lda #$00
 12782 767A 85 87			sta :eax+1
 12783 					.ifdef fmulinit
 12784 					fmulu_16
 12785 					els
 12786 767C 20 0B 23			imulCX
 12787 					eif
 12788 767F A5 86			lda :eax
 12789 7681 8D D2 A0			sta YB
 12790 7684 A5 87			lda :eax+1
 12791 7686 8D D3 A0			sta YB+1
 12792
 12793 				; optimize OK (service.pas), line = 2454
 12794
 12795 7689 A9 00			lda #$00
 12796 768B 8D D8 A0			sta K
 12797
 12798 				; optimize OK (service.pas), line = 2455
 12799
 12800 768E A9 09			lda #$09
 12801 7690 8D D4 A0			sta X
 12802
 12803 7693			l_2669
 12804 				; --- ForToDoCondition
 12805 7693 AD D4 A0			lda X
 12806 7696 C9 D8			cmp #$D8
 12807 7698 90 03 4C 32 77		jcs l_2677
 12808
 12809 				; optimize OK (service.pas), line = 2458
 12810
 12811 769D AC CE A0 84 84 AC + 	mwy PATT :bp2
 12812 76A7 A0 04			ldy #PATT.OFS-DATAORIGIN
 12813 76A9 B1 84			lda (:bp2),y
 12814 76AB 85 9F			sta :STACKORIGIN+9
 12815 76AD C8				iny
 12816 76AE B1 84			lda (:bp2),y
 12817 76B0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12818 76B2 C8				iny
 12819 76B3 B1 84			lda (:bp2),y
 12820 76B5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12821 76B7 C8				iny
 12822 76B8 B1 84			lda (:bp2),y
 12823 76BA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12824 76BC AC D4 A0			ldy X
 12825 76BF A5 9F			lda :STACKORIGIN+9
 12826 76C1 18 79 00 C4			add adr.MODX,y
 12827 76C5 85 9F			sta :STACKORIGIN+9
 12828 76C7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12829 76C9 69 00			adc #$00
 12830 76CB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12831 76CD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12832 76CF 69 00			adc #$00
 12833 76D1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12834 76D3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12835 76D5 69 00			adc #$00
 12836 76D7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12837 76D9 A5 9F			lda :STACKORIGIN+9
 12838 76DB 18 6D D2 A0			add YB
 12839 76DF 8D 8C 9F			sta GETBYTE.SRC
 12840 76E2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12841 76E4 6D D3 A0			adc YB+1
 12842 76E7 8D 8D 9F			sta GETBYTE.SRC+1
 12843 76EA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12844 76EC 69 00			adc #$00
 12845 76EE 8D 8E 9F			sta GETBYTE.SRC+2
 12846 76F1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12847 76F3 69 00			adc #$00
 12848 76F5 8D 8F 9F			sta GETBYTE.SRC+3
 12849 76F8 20 2A 3C			jsr GETBYTE
 12850 76FB AD 90 9F			lda GETBYTE.RESULT
 12851 76FE 8D D6 A0			sta CL
 12852
 12853 				; optimize OK (service.pas), line = 2460
 12854
 12855 7701 A9 80			lda #$80
 12856 7703 8D D7 A0			sta SHADOW
 12857
 12858 				; optimize OK (service.pas), line = 2465
 12859
 12860 7706 AD D5 A0			lda Y
 12861 7709 C9 10			cmp #$10
 12862 770B 90 07			jcc l_26ACx
 12863 770D AD D4 A0			lda X
 12864 7710 C9 12			cmp #$12
 12865 7712 B0 05			jcs l_26AC
 12866 7714			l_26ACx
 12867 7714 A9 00			lda #$00
 12868 7716 8D D7 A0			sta SHADOW
 12869 7719			l_26AC
 12870
 12871 				; optimize OK (service.pas), line = 2470
 12872
 12873 7719 AD D6 A0			lda CL
 12874 771C 29 7F			and #$7F
 12875 771E 0D D7 A0			ora SHADOW
 12876 7721 AC D8 A0			ldy K
 12877 7724 99 00 C2			sta adr.TMP,y
 12878
 12879 				; optimize FAIL (0, service.pas), line = 2472
 12880
 12881 7727 EE D8 A0			inc K
 12882
 12883 				; --- ForToDoEpilog
 12884 772A EE D4 A0			inc X
 12885 772D F0 03 4C 93 76		jne l_2669
 12886 7732			l_2677
 12887
 12888 				; optimize OK (service.pas), line = 2475
 12889
 12890 7732 AD 64 9E			lda PLAYSCREEN.OFS
 12891 7735 18 69 09			add #$09
 12892 7738 85 A0			sta :STACKORIGIN+10
 12893 773A AD 65 9E			lda PLAYSCREEN.OFS+1
 12894 773D 69 00			adc #$00
 12895 773F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12896 7741 AD 66 9E			lda PLAYSCREEN.OFS+2
 12897 7744 69 00			adc #$00
 12898 7746 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 12899 7748 AD 67 9E			lda PLAYSCREEN.OFS+3
 12900 774B 69 00			adc #$00
 12901 774D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 12902 774F AC D5 A0			ldy Y
 12903 7752 A5 A0			lda :STACKORIGIN+10
 12904 7754 18 79 00 C0			add adr.ROW,y
 12905 7758 8D 78 9F			sta BLITTMP.DST
 12906 775B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12907 775D 79 00 C1			adc adr.ROW+256,y
 12908 7760 8D 79 9F			sta BLITTMP.DST+1
 12909 7763 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12910 7765 69 00			adc #$00
 12911 7767 8D 7A 9F			sta BLITTMP.DST+2
 12912 776A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12913 776C 69 00			adc #$00
 12914 776E 8D 7B 9F			sta BLITTMP.DST+3
 12915 7771 AD D8 A0			lda K
 12916 7774 8D 7C 9F			sta BLITTMP.SIZE
 12917 7777 20 57 3B			jsr BLITTMP
 12918
 12919 				; --- ForToDoEpilog
 12920 777A EE D5 A0			inc Y
 12921 777D F0 03 4C 54 76		jne l_2640
 12922 7782			l_264E
 12923
 12924 				; ------------------------------------------------------------
 12925
 12926 = A0CE			PATT	= DATAORIGIN+$036A
 12927 = 9D64			PATT.WIDTH	= DATAORIGIN+$0000
 12928 = 9D66			PATT.HEIGHT	= DATAORIGIN+$0002
 12929 = 9D68			PATT.OFS	= DATAORIGIN+$0004
 12930 = A0D2			YB	= DATAORIGIN+$036E
 12931 = A0D4			X	= DATAORIGIN+$0370
 12932 = A0D5			Y	= DATAORIGIN+$0371
 12933 = A0D6			CL	= DATAORIGIN+$0372
 12934 = A0D7			SHADOW	= DATAORIGIN+$0373
 12935 = A0D8			K	= DATAORIGIN+$0374
 12936
 12937 = A0CE			@VarData	= PATT
 12938 = 0009			@VarDataSize	= 9
 12939
 12940 7782			@exit
 12941 					.ifdef @new
 12942 					lda <@VarData
 12943 					sta :ztmp
 12944 					lda >@VarData
 12945 					ldy #@VarDataSize-1
 12946 					jmp @FreeMem
 12947 					els
 12948 7782 60				rts						; ret
 12949 					eif
 12950 				.endl
 12951
 12952 7783			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 12953
 12954 				; ------------------------------------------------------------
 12955
 12956 = A0D9			X	= DATAORIGIN+$0375
 12957 = A0DB			Y	= DATAORIGIN+$0377
 12958
 12959 = A0D9			@VarData	= X
 12960 = 0004			@VarDataSize	= 4
 12961
 12962 7783			@exit
 12963 					.ifdef @new
 12964 					lda <@VarData
 12965 					sta :ztmp
 12966 					lda >@VarData
 12967 					ldy #@VarDataSize-1
 12968 					jmp @FreeMem
 12969 					els
 12970 7783 60				rts						; ret
 12971 					eif
 12972 				.endl
 12973
 12974 7784			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 12975
 12976 				; optimize OK (service.pas), line = 2591
 12977
 12978 7784 AD 81 C0			lda adr.ROW+$81
 12979 7787 18 69 48			add #$48
 12980 778A 8D 57 9F			sta HLP
 12981 778D AD 81 C1			lda adr.ROW+256+$81
 12982 7790 69 00			adc #$00
 12983 7792 8D 58 9F			sta HLP+1
 12984
 12985 				; optimize OK (service.pas), line = 2593
 12986
 12987 7795 AD 57 9F			lda HLP
 12988 7798 8D 66 9F			sta BLITBOX.DST
 12989 779B A9 50			lda #$50
 12990 779D 18 6D 58 9F			add HLP+1
 12991 77A1 8D 67 9F			sta BLITBOX.DST+1
 12992 77A4 A9 00			lda #$00
 12993 77A6 69 00			adc #$00
 12994 77A8 8D 68 9F			sta BLITBOX.DST+2
 12995 77AB A9 00			lda #$00
 12996 77AD 69 00			adc #$00
 12997 77AF 8D 69 9F			sta BLITBOX.DST+3
 12998 77B2 AD 64 9E			lda PLAYSCREEN.OFS
 12999 77B5 18 6D 57 9F			add HLP
 13000 77B9 8D 62 9F			sta BLITBOX.SRC
 13001 77BC AD 65 9E			lda PLAYSCREEN.OFS+1
 13002 77BF 6D 58 9F			adc HLP+1
 13003 77C2 8D 63 9F			sta BLITBOX.SRC+1
 13004 77C5 AD 66 9E			lda PLAYSCREEN.OFS+2
 13005 77C8 69 00			adc #$00
 13006 77CA 8D 64 9F			sta BLITBOX.SRC+2
 13007 77CD AD 67 9E			lda PLAYSCREEN.OFS+3
 13008 77D0 69 00			adc #$00
 13009 77D2 8D 65 9F			sta BLITBOX.SRC+3
 13010 77D5 A9 58			lda #$58
 13011 77D7 8D 6A 9F			sta BLITBOX.W
 13012 77DA A9 00			lda #$00
 13013 77DC 8D 6B 9F			sta BLITBOX.W+1
 13014 77DF A9 1F			lda #$1F
 13015 77E1 8D 6C 9F			sta BLITBOX.H
 13016 77E4 20 58 3A			jsr BLITBOX
 13017
 13018 77E7			@exit
 13019 					.ifdef @new
 13020 					lda <@VarData
 13021 					sta :ztmp
 13022 					lda >@VarData
 13023 					ldy #@VarDataSize-1
 13024 					jmp @FreeMem
 13025 					els
 13026 77E7 60				rts						; ret
 13027 					eif
 13028 				.endl
 13029
 13030 77E8			.local	GAME_OVER					; PROCEDURE
 13031
 13032 				; ------------------------------------------------------------
 13033
 13034 = A0DD			X	= DATAORIGIN+$0379
 13035 = A0DF			Y	= DATAORIGIN+$037B
 13036 = A0E1			adr.SC	= [DATAORIGIN+$037D] .array [21]
 13037 77E8			.var SC	= adr.SC .word
 13038
 13039 = A0DD			@VarData	= X
 13040 = 0019			@VarDataSize	= 25
 13041
 13042 77E8			@exit
 13043 					.ifdef @new
 13044 					lda <@VarData
 13045 					sta :ztmp
 13046 					lda >@VarData
 13047 					ldy #@VarDataSize-1
 13048 					jmp @FreeMem
 13049 					els
 13050 77E8 60				rts						; ret
 13051 					eif
 13052 = 77E9 E1 A0		SC
 13052 				.endl
 13053
 13054 77EB			.local	DESTROY_VAUS					; PROCEDURE
 13055
 13056 				; optimize OK (service.pas), line = 2647
 13057
 13058 77EB AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13059
 13060 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2648
 13061
 13062 781B 20 5E 51			jsr MODIFY_VAUS
 13063
 13064 				; optimize OK (service.pas), line = 2650
 13065
 13066 781E AD D8 9E			lda VAUS.X
 13067 7821 8D 3E A0			sta MOVE_VAUS.X
 13068 7824 A9 00			lda #$00
 13069 7826 8D 3F A0			sta MOVE_VAUS.X+1
 13070 7829 AD D9 9E			lda VAUS.Y
 13071 782C 8D 40 A0			sta MOVE_VAUS.Y
 13072 782F A9 00			lda #$00
 13073 7831 8D 41 A0			sta MOVE_VAUS.Y+1
 13074 7834 20 A9 53			jsr MOVE_VAUS
 13075
 13076 				; optimize OK (service.pas), line = 2652
 13077
 13078 7837 AD D8 9E			lda VAUS.X
 13079 783A 38 E9 04			sub #$04
 13080 783D 8D F8 A0			sta A
 13081 7840 A9 00			lda #$00
 13082 7842 E9 00			sbc #$00
 13083 7844 8D F9 A0			sta A+1
 13084
 13085 				; optimize OK (service.pas), line = 2653
 13086
 13087 7847 AD D9 9E			lda VAUS.Y
 13088 784A 38 E9 05			sub #$05
 13089 784D 8D FA A0			sta B
 13090 7850 A9 00			lda #$00
 13091 7852 E9 00			sbc #$00
 13092 7854 8D FB A0			sta B+1
 13093
 13094 				; optimize OK (service.pas), line = 2656
 13095
 13096 7857 A9 00			lda #$00
 13097 7859 8D FC A0			sta W
 13098
 13099 785C			l_2739
 13100 				; --- ForToDoCondition
 13101 785C AD FC A0			lda W
 13102 785F C9 07			cmp #$07
 13103 7861 90 03 4C 49 7A		jcs l_2747
 13104
 13105 				; optimize OK (service.pas), line = 2658
 13106
 13107 7866 A9 00			lda #$00
 13108 7868 8D FE A0			sta Y
 13109
 13110 786B			l_2750
 13111 				; --- ForToDoCondition
 13112 786B AD FE A0			lda Y
 13113 786E C9 10			cmp #$10
 13114 7870 90 03 4C 33 7A		jcs l_275E
 13115
 13116 				; optimize OK (service.pas), line = 2661
 13117
 13118 7875 AD 88 9E			lda EXPLOSION.WIDTH
 13119 7878 85 8E			sta :ecx
 13120 787A AD 89 9E			lda EXPLOSION.WIDTH+1
 13121 787D 85 8F			sta :ecx+1
 13122 787F AD FE A0			lda Y
 13123 7882 85 86			sta :eax
 13124 7884 A9 00			lda #$00
 13125 7886 85 87			sta :eax+1
 13126 					.ifdef fmulinit
 13127 					fmulu_16
 13128 					els
 13129 7888 20 4F 23			imulCX_AL
 13130 					eif
 13131 788B A5 86			lda :eax
 13132 788D 85 9F			sta :STACKORIGIN+9
 13133 788F A5 87			lda :eax+1
 13134 7891 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13135 7893 AD 88 9E			lda EXPLOSION.WIDTH
 13136 7896 85 A1			sta :STACKORIGIN+11
 13137 7898 AD 89 9E			lda EXPLOSION.WIDTH+1
 13138 789B 06 A1			asl :STACKORIGIN+11
 13139 789D 2A				rol @
 13140 789E 06 A1			asl :STACKORIGIN+11
 13141 78A0 2A				rol @
 13142 78A1 06 A1			asl :STACKORIGIN+11
 13143 78A3 2A				rol @
 13144 78A4 06 A1			asl :STACKORIGIN+11
 13145 78A6 2A				rol @
 13146 78A7 85 8F			sta :ecx+1
 13147 78A9 A5 A1			lda :STACKORIGIN+11
 13148 78AB 85 8E			sta :ecx
 13149 78AD AD FC A0			lda W
 13150 78B0 85 86			sta :eax
 13151 78B2 A9 00			lda #$00
 13152 78B4 85 87			sta :eax+1
 13153 					.ifdef fmulinit
 13154 					fmulu_16
 13155 					els
 13156 78B6 20 0B 23			imulCX
 13157 					eif
 13158 78B9 A5 86			lda :eax
 13159 78BB 18 65 9F			add :STACKORIGIN+9
 13160 78BE 8D F6 A0			sta Z
 13161 78C1 A5 87			lda :eax+1
 13162 78C3 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13163 78C5 8D F7 A0			sta Z+1
 13164
 13165 				; optimize OK (service.pas), line = 2663
 13166
 13167 78C8 AD FE A0			lda Y
 13168 78CB 18 6D FA A0			add B
 13169 78CF A8				tay
 13170 78D0 AD F8 A0			lda A
 13171 78D3 18 79 00 C0			add adr.ROW,y
 13172 78D7 8D 57 9F			sta HLP
 13173 78DA AD F9 A0			lda A+1
 13174 78DD 79 00 C1			adc adr.ROW+256,y
 13175 78E0 8D 58 9F			sta HLP+1
 13176
 13177 				; optimize OK (service.pas), line = 2665
 13178
 13179 78E3 A9 00			lda #$00
 13180 78E5 8D FD A0			sta X
 13181 78E8 AC 88 9E			ldy EXPLOSION.WIDTH
 13182 78EB 88				dey
 13183 78EC 8C F0 78			sty @FORTMP_2795_0
 13184
 13185 78EF			l_2798
 13186 				; --- ForToDoCondition
 13187 78EF A9 00			lda @FORTMP_2795_0::#$00
 13188 78F1 CD FD A0			cmp X
 13189 78F4 B0 03 4C 05 7A		jcc l_27A6
 13190
 13191 				; optimize FAIL (1, service.pas), line = 2669
 13192
 13193 78F9 E8				inx
 13194 78FA A0 01			ldy #1
 13195 78FC AD FC A0			lda W
 13196 78FF C9 06			cmp #$06
 13197 7901 F0 01			beq @+
 13198 7903 88				dey
 13199 				@
 13200 7904 94 96			sty :STACKORIGIN,x
 13201 7906 AD 8C 9E			lda EXPLOSION.OFS
 13202 7909 18 6D FD A0			add X
 13203 790D 85 9F			sta :STACKORIGIN+9
 13204 790F AD 8D 9E			lda EXPLOSION.OFS+1
 13205 7912 69 00			adc #$00
 13206 7914 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13207 7916 AD 8E 9E			lda EXPLOSION.OFS+2
 13208 7919 69 00			adc #$00
 13209 791B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13210 791D AD 8F 9E			lda EXPLOSION.OFS+3
 13211 7920 69 00			adc #$00
 13212 7922 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13213 7924 A5 9F			lda :STACKORIGIN+9
 13214 7926 18 6D F6 A0			add Z
 13215 792A 8D 8C 9F			sta GETBYTE.SRC
 13216 792D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13217 792F 6D F7 A0			adc Z+1
 13218 7932 8D 8D 9F			sta GETBYTE.SRC+1
 13219 7935 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13220 7937 69 00			adc #$00
 13221 7939 8D 8E 9F			sta GETBYTE.SRC+2
 13222 793C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13223 793E 69 00			adc #$00
 13224 7940 8D 8F 9F			sta GETBYTE.SRC+3
 13225 7943 20 2A 3C			jsr GETBYTE
 13226 7946 CA				dex
 13227 7947 A0 01			ldy #1
 13228 7949 AD 90 9F			lda GETBYTE.RESULT
 13229 794C F0 01			beq @+
 13230 794E 88				dey
 13231 				@
 13232 794F 98				tya
 13233 7950 15 97			ora :STACKORIGIN+1,x
 13234 7952 F0 56			jeq l_27CE
 13235
 13236 				; optimize FAIL (1, service.pas), line = 2673
 13237
 13238 7954 E8				inx
 13239 7955 AD FD A0 95 96		mva X :STACKORIGIN,x
 13240 795A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13241 795E AD 64 9E			lda PLAYSCREEN.OFS
 13242 7961 18 6D 57 9F			add HLP
 13243 7965 85 9F			sta :STACKORIGIN+9
 13244 7967 AD 65 9E			lda PLAYSCREEN.OFS+1
 13245 796A 6D 58 9F			adc HLP+1
 13246 796D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13247 796F AD 66 9E			lda PLAYSCREEN.OFS+2
 13248 7972 69 00			adc #$00
 13249 7974 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13250 7976 AD 67 9E			lda PLAYSCREEN.OFS+3
 13251 7979 69 00			adc #$00
 13252 797B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13253 797D A5 9F			lda :STACKORIGIN+9
 13254 797F 18 6D FD A0			add X
 13255 7983 8D 8C 9F			sta GETBYTE.SRC
 13256 7986 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13257 7988 69 00			adc #$00
 13258 798A 8D 8D 9F			sta GETBYTE.SRC+1
 13259 798D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13260 798F 69 00			adc #$00
 13261 7991 8D 8E 9F			sta GETBYTE.SRC+2
 13262 7994 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13263 7996 69 00			adc #$00
 13264 7998 8D 8F 9F			sta GETBYTE.SRC+3
 13265 799B 20 2A 3C			jsr GETBYTE
 13266 799E B4 96			ldy :STACKORIGIN,x
 13267 79A0 AD 90 9F			lda GETBYTE.RESULT
 13268 79A3 99 00 C2			sta adr.TMP,y
 13269 79A6 CA				dex
 13270 79A7 4C FD 79			jmp l_27EB
 13271 79AA			l_27CE
 13272
 13273 				; optimize FAIL (1, service.pas), line = 2678
 13274
 13275 79AA E8				inx
 13276 79AB AD FD A0 95 96		mva X :STACKORIGIN,x
 13277 79B0 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13278 79B4 AD 8C 9E			lda EXPLOSION.OFS
 13279 79B7 18 6D FD A0			add X
 13280 79BB 85 9F			sta :STACKORIGIN+9
 13281 79BD AD 8D 9E			lda EXPLOSION.OFS+1
 13282 79C0 69 00			adc #$00
 13283 79C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13284 79C4 AD 8E 9E			lda EXPLOSION.OFS+2
 13285 79C7 69 00			adc #$00
 13286 79C9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13287 79CB AD 8F 9E			lda EXPLOSION.OFS+3
 13288 79CE 69 00			adc #$00
 13289 79D0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13290 79D2 A5 9F			lda :STACKORIGIN+9
 13291 79D4 18 6D F6 A0			add Z
 13292 79D8 8D 8C 9F			sta GETBYTE.SRC
 13293 79DB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13294 79DD 6D F7 A0			adc Z+1
 13295 79E0 8D 8D 9F			sta GETBYTE.SRC+1
 13296 79E3 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13297 79E5 69 00			adc #$00
 13298 79E7 8D 8E 9F			sta GETBYTE.SRC+2
 13299 79EA A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13300 79EC 69 00			adc #$00
 13301 79EE 8D 8F 9F			sta GETBYTE.SRC+3
 13302 79F1 20 2A 3C			jsr GETBYTE
 13303 79F4 B4 96			ldy :STACKORIGIN,x
 13304 79F6 AD 90 9F			lda GETBYTE.RESULT
 13305 79F9 99 00 C2			sta adr.TMP,y
 13306 79FC CA				dex
 13307 79FD			l_27EB
 13308
 13309 				; --- ForToDoEpilog
 13310 79FD EE FD A0			inc X
 13311 7A00 F0 03 4C EF 78		jne l_2798
 13312 7A05			l_27A6
 13313
 13314 				; optimize OK (service.pas), line = 2681
 13315
 13316 7A05 AD 57 9F			lda HLP
 13317 7A08 8D 78 9F			sta BLITTMP.DST
 13318 7A0B A9 50			lda #$50
 13319 7A0D 18 6D 58 9F			add HLP+1
 13320 7A11 8D 79 9F			sta BLITTMP.DST+1
 13321 7A14 A9 00			lda #$00
 13322 7A16 69 00			adc #$00
 13323 7A18 8D 7A 9F			sta BLITTMP.DST+2
 13324 7A1B A9 00			lda #$00
 13325 7A1D 69 00			adc #$00
 13326 7A1F 8D 7B 9F			sta BLITTMP.DST+3
 13327 7A22 AD 88 9E			lda EXPLOSION.WIDTH
 13328 7A25 8D 7C 9F			sta BLITTMP.SIZE
 13329 7A28 20 57 3B			jsr BLITTMP
 13330
 13331 				; --- ForToDoEpilog
 13332 7A2B EE FE A0			inc Y
 13333 7A2E F0 03 4C 6B 78		jne l_2750
 13334 7A33			l_275E
 13335
 13336 				; optimize OK (service.pas), line = 2684
 13337
 13338 7A33 AD FC A0			lda W
 13339 7A36 8D 3C 9E			sta DEATH_SOUND.A
 13340 7A39 A9 00			lda #$00
 13341 7A3B 8D 3D 9E			sta DEATH_SOUND.A+1
 13342 7A3E 20 3E 38			jsr DEATH_SOUND
 13343
 13344 				; --- ForToDoEpilog
 13345 7A41 EE FC A0			inc W
 13346 7A44 F0 03 4C 5C 78		jne l_2739
 13347 7A49			l_2747
 13348
 13349 				; optimize OK (service.pas), line = 2688
 13350
 13351 7A49 A9 07			lda #$07
 13352 7A4B 8D 3C 9E			sta DEATH_SOUND.A
 13353 7A4E A9 00			lda #$00
 13354 7A50 8D 3D 9E			sta DEATH_SOUND.A+1
 13355 7A53 20 3E 38			jsr DEATH_SOUND
 13356
 13357 				; optimize OK (service.pas), line = 2689
 13358
 13359 7A56 A9 96			lda #$96
 13360 7A58 8D 91 9F			sta MYDELAY.A
 13361 7A5B A9 00			lda #$00
 13362 7A5D 8D 92 9F			sta MYDELAY.A+1
 13363 7A60 20 53 3C			jsr MYDELAY
 13364
 13365 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2690
 13366
 13367 7A63 20 22 41			jsr DISABLE_LETTER
 13368
 13369 				; ------------------------------------------------------------
 13370
 13371 = A0F6			Z	= DATAORIGIN+$0392
 13372 = A0F8			A	= DATAORIGIN+$0394
 13373 = A0FA			B	= DATAORIGIN+$0396
 13374 = A0FC			W	= DATAORIGIN+$0398
 13375 = A0FD			X	= DATAORIGIN+$0399
 13376 = A0FE			Y	= DATAORIGIN+$039A
 13377
 13378 = A0F6			@VarData	= Z
 13379 = 0009			@VarDataSize	= 9
 13380
 13381 7A66			@exit
 13382 					.ifdef @new
 13383 					lda <@VarData
 13384 					sta :ztmp
 13385 					lda >@VarData
 13386 					ldy #@VarDataSize-1
 13387 					jmp @FreeMem
 13388 					els
 13389 7A66 60				rts						; ret
 13390 					eif
 13391 				.endl
 13392
 13393 7A67			.local	CREATE_VAUS					; PROCEDURE
 13394
 13395 				; optimize FAIL ('NOSOUND', service.pas), line = 2702
 13396
 13397 7A67 20 52 3C			jsr NOSOUND
 13398
 13399 				; optimize OK (service.pas), line = 2703
 13400
 13401 7A6A A9 5B			lda #$5B
 13402 7A6C 8D 05 A1			sta A
 13403 7A6F A9 00			lda #$00
 13404 7A71 8D 06 A1			sta A+1
 13405
 13406 				; optimize OK (service.pas), line = 2704
 13407
 13408 7A74 A9 B3			lda #$B3
 13409 7A76 8D 07 A1			sta B
 13410 7A79 A9 00			lda #$00
 13411 7A7B 8D 08 A1			sta B+1
 13412
 13413 				; optimize OK (service.pas), line = 2706
 13414
 13415 7A7E A9 0B			lda #$0B
 13416 7A80 8D 02 A1			sta W
 13417
 13418 7A83			l_2835
 13419 				; --- ForToDoCondition
 13420 7A83 A9 00			lda #$00
 13421 7A85 8D 01 A1			sta Y
 13422
 13423 7A88			l_284C
 13424 				; --- ForToDoCondition
 13425 7A88 AD 01 A1			lda Y
 13426 7A8B C9 10			cmp #$10
 13427 7A8D 90 03 4C 3D 7C		jcs l_285A
 13428
 13429 				; optimize OK (service.pas), line = 2711
 13430
 13431 7A92 AD 90 9E			lda NEWVAUS.WIDTH
 13432 7A95 85 8E			sta :ecx
 13433 7A97 AD 91 9E			lda NEWVAUS.WIDTH+1
 13434 7A9A 85 8F			sta :ecx+1
 13435 7A9C AD 01 A1			lda Y
 13436 7A9F 85 86			sta :eax
 13437 7AA1 A9 00			lda #$00
 13438 7AA3 85 87			sta :eax+1
 13439 					.ifdef fmulinit
 13440 					fmulu_16
 13441 					els
 13442 7AA5 20 4F 23			imulCX_AL
 13443 					eif
 13444 7AA8 A5 86			lda :eax
 13445 7AAA 85 9F			sta :STACKORIGIN+9
 13446 7AAC A5 87			lda :eax+1
 13447 7AAE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13448 7AB0 A9 10			lda #$10
 13449 7AB2 85 8E			sta :ecx
 13450 7AB4 A9 00			lda #$00
 13451 7AB6 85 8F			sta :ecx+1
 13452 7AB8 AD 90 9E			lda NEWVAUS.WIDTH
 13453 7ABB 85 86			sta :eax
 13454 7ABD AD 91 9E			lda NEWVAUS.WIDTH+1
 13455 7AC0 85 87			sta :eax+1
 13456 					.ifdef fmulinit
 13457 					fmulu_16
 13458 					els
 13459 7AC2 20 0B 23			imulCX
 13460 					eif
 13461 7AC5 A5 86			lda :eax
 13462 7AC7 85 8E			sta :ecx
 13463 7AC9 A5 87			lda :eax+1
 13464 7ACB 85 8F			sta :ecx+1
 13465 7ACD AD 02 A1			lda W
 13466 7AD0 85 86			sta :eax
 13467 7AD2 A9 00			lda #$00
 13468 7AD4 85 87			sta :eax+1
 13469 					.ifdef fmulinit
 13470 					fmulu_16
 13471 					els
 13472 7AD6 20 4F 23			imulCX_AL
 13473 					eif
 13474 7AD9 A5 86			lda :eax
 13475 7ADB 18 65 9F			add :STACKORIGIN+9
 13476 7ADE 8D 03 A1			sta Z
 13477 7AE1 A5 87			lda :eax+1
 13478 7AE3 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13479 7AE5 8D 04 A1			sta Z+1
 13480
 13481 				; optimize OK (service.pas), line = 2713
 13482
 13483 7AE8 AD 01 A1			lda Y
 13484 7AEB 18 6D 07 A1			add B
 13485 7AEF A8				tay
 13486 7AF0 AD 05 A1			lda A
 13487 7AF3 18 79 00 C0			add adr.ROW,y
 13488 7AF7 8D 57 9F			sta HLP
 13489 7AFA AD 06 A1			lda A+1
 13490 7AFD 79 00 C1			adc adr.ROW+256,y
 13491 7B00 8D 58 9F			sta HLP+1
 13492
 13493 				; optimize OK (service.pas), line = 2715
 13494
 13495 7B03 A9 00			lda #$00
 13496 7B05 8D 00 A1			sta X
 13497 7B08 AC 90 9E			ldy NEWVAUS.WIDTH
 13498 7B0B 88				dey
 13499 7B0C 8C 10 7B			sty @FORTMP_2891_0
 13500
 13501 7B0F			l_2894
 13502 				; --- ForToDoCondition
 13503 7B0F A9 00			lda @FORTMP_2891_0::#$00
 13504 7B11 CD 00 A1			cmp X
 13505 7B14 B0 03 4C 0F 7C		jcc l_28A2
 13506
 13507 				; optimize OK (service.pas), line = 2717
 13508
 13509 7B19 AD 94 9E			lda NEWVAUS.OFS
 13510 7B1C 18 6D 00 A1			add X
 13511 7B20 85 9F			sta :STACKORIGIN+9
 13512 7B22 AD 95 9E			lda NEWVAUS.OFS+1
 13513 7B25 69 00			adc #$00
 13514 7B27 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13515 7B29 AD 96 9E			lda NEWVAUS.OFS+2
 13516 7B2C 69 00			adc #$00
 13517 7B2E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13518 7B30 AD 97 9E			lda NEWVAUS.OFS+3
 13519 7B33 69 00			adc #$00
 13520 7B35 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13521 7B37 A5 9F			lda :STACKORIGIN+9
 13522 7B39 18 6D 03 A1			add Z
 13523 7B3D 8D 8C 9F			sta GETBYTE.SRC
 13524 7B40 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13525 7B42 6D 04 A1			adc Z+1
 13526 7B45 8D 8D 9F			sta GETBYTE.SRC+1
 13527 7B48 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13528 7B4A 69 00			adc #$00
 13529 7B4C 8D 8E 9F			sta GETBYTE.SRC+2
 13530 7B4F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13531 7B51 69 00			adc #$00
 13532 7B53 8D 8F 9F			sta GETBYTE.SRC+3
 13533 7B56 20 2A 3C			jsr GETBYTE
 13534 7B59 AD 90 9F			lda GETBYTE.RESULT
 13535 7B5C D0 56			jne l_28BE
 13536
 13537 				; optimize FAIL (1, service.pas), line = 2721
 13538
 13539 7B5E E8				inx
 13540 7B5F AD 00 A1 95 96		mva X :STACKORIGIN,x
 13541 7B64 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13542 7B68 AD 64 9E			lda PLAYSCREEN.OFS
 13543 7B6B 18 6D 57 9F			add HLP
 13544 7B6F 85 9F			sta :STACKORIGIN+9
 13545 7B71 AD 65 9E			lda PLAYSCREEN.OFS+1
 13546 7B74 6D 58 9F			adc HLP+1
 13547 7B77 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13548 7B79 AD 66 9E			lda PLAYSCREEN.OFS+2
 13549 7B7C 69 00			adc #$00
 13550 7B7E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13551 7B80 AD 67 9E			lda PLAYSCREEN.OFS+3
 13552 7B83 69 00			adc #$00
 13553 7B85 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13554 7B87 A5 9F			lda :STACKORIGIN+9
 13555 7B89 18 6D 00 A1			add X
 13556 7B8D 8D 8C 9F			sta GETBYTE.SRC
 13557 7B90 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13558 7B92 69 00			adc #$00
 13559 7B94 8D 8D 9F			sta GETBYTE.SRC+1
 13560 7B97 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13561 7B99 69 00			adc #$00
 13562 7B9B 8D 8E 9F			sta GETBYTE.SRC+2
 13563 7B9E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13564 7BA0 69 00			adc #$00
 13565 7BA2 8D 8F 9F			sta GETBYTE.SRC+3
 13566 7BA5 20 2A 3C			jsr GETBYTE
 13567 7BA8 B4 96			ldy :STACKORIGIN,x
 13568 7BAA AD 90 9F			lda GETBYTE.RESULT
 13569 7BAD 99 00 C2			sta adr.TMP,y
 13570 7BB0 CA				dex
 13571 7BB1 4C 07 7C			jmp l_28DB
 13572 7BB4			l_28BE
 13573
 13574 				; optimize FAIL (1, service.pas), line = 2726
 13575
 13576 7BB4 E8				inx
 13577 7BB5 AD 00 A1 95 96		mva X :STACKORIGIN,x
 13578 7BBA A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13579 7BBE AD 94 9E			lda NEWVAUS.OFS
 13580 7BC1 18 6D 00 A1			add X
 13581 7BC5 85 9F			sta :STACKORIGIN+9
 13582 7BC7 AD 95 9E			lda NEWVAUS.OFS+1
 13583 7BCA 69 00			adc #$00
 13584 7BCC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13585 7BCE AD 96 9E			lda NEWVAUS.OFS+2
 13586 7BD1 69 00			adc #$00
 13587 7BD3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13588 7BD5 AD 97 9E			lda NEWVAUS.OFS+3
 13589 7BD8 69 00			adc #$00
 13590 7BDA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13591 7BDC A5 9F			lda :STACKORIGIN+9
 13592 7BDE 18 6D 03 A1			add Z
 13593 7BE2 8D 8C 9F			sta GETBYTE.SRC
 13594 7BE5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13595 7BE7 6D 04 A1			adc Z+1
 13596 7BEA 8D 8D 9F			sta GETBYTE.SRC+1
 13597 7BED A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13598 7BEF 69 00			adc #$00
 13599 7BF1 8D 8E 9F			sta GETBYTE.SRC+2
 13600 7BF4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13601 7BF6 69 00			adc #$00
 13602 7BF8 8D 8F 9F			sta GETBYTE.SRC+3
 13603 7BFB 20 2A 3C			jsr GETBYTE
 13604 7BFE B4 96			ldy :STACKORIGIN,x
 13605 7C00 AD 90 9F			lda GETBYTE.RESULT
 13606 7C03 99 00 C2			sta adr.TMP,y
 13607 7C06 CA				dex
 13608 7C07			l_28DB
 13609
 13610 				; --- ForToDoEpilog
 13611 7C07 EE 00 A1			inc X
 13612 7C0A F0 03 4C 0F 7B		jne l_2894
 13613 7C0F			l_28A2
 13614
 13615 				; optimize OK (service.pas), line = 2729
 13616
 13617 7C0F AD 57 9F			lda HLP
 13618 7C12 8D 78 9F			sta BLITTMP.DST
 13619 7C15 A9 50			lda #$50
 13620 7C17 18 6D 58 9F			add HLP+1
 13621 7C1B 8D 79 9F			sta BLITTMP.DST+1
 13622 7C1E A9 00			lda #$00
 13623 7C20 69 00			adc #$00
 13624 7C22 8D 7A 9F			sta BLITTMP.DST+2
 13625 7C25 A9 00			lda #$00
 13626 7C27 69 00			adc #$00
 13627 7C29 8D 7B 9F			sta BLITTMP.DST+3
 13628 7C2C AD 90 9E			lda NEWVAUS.WIDTH
 13629 7C2F 8D 7C 9F			sta BLITTMP.SIZE
 13630 7C32 20 57 3B			jsr BLITTMP
 13631
 13632 				; --- ForToDoEpilog
 13633 7C35 EE 01 A1			inc Y
 13634 7C38 F0 03 4C 88 7A		jne l_284C
 13635 7C3D			l_285A
 13636
 13637 				; optimize OK (service.pas), line = 2732
 13638
 13639 7C3D A9 01			lda #$01
 13640 7C3F 8D 91 9F			sta MYDELAY.A
 13641 7C42 A9 00			lda #$00
 13642 7C44 8D 92 9F			sta MYDELAY.A+1
 13643 7C47 20 53 3C			jsr MYDELAY
 13644
 13645 				; --- ForToDoEpilog
 13646 7C4A CE 02 A1			dec W
 13647 7C4D 30 03 4C 83 7A		jpl l_2835
 13648 7C52			l_2843
 13649
 13650 				; ------------------------------------------------------------
 13651
 13652 = A100			X	= DATAORIGIN+$039C
 13653 = A101			Y	= DATAORIGIN+$039D
 13654 = A102			W	= DATAORIGIN+$039E
 13655 = A103			Z	= DATAORIGIN+$039F
 13656 = A105			A	= DATAORIGIN+$03A1
 13657 = A107			B	= DATAORIGIN+$03A3
 13658
 13659 = A100			@VarData	= X
 13660 = 0009			@VarDataSize	= 9
 13661
 13662 7C52			@exit
 13663 					.ifdef @new
 13664 					lda <@VarData
 13665 					sta :ztmp
 13666 					lda >@VarData
 13667 					ldy #@VarDataSize-1
 13668 					jmp @FreeMem
 13669 					els
 13670 7C52 60				rts						; ret
 13671 					eif
 13672 				.endl
 13673
 13674 7C53			.local	PUT_DIGIT					; PROCEDURE
 13675
 13676 				; optimize OK (service.pas), line = 2742
 13677
 13678 7C53 A9 DE			lda #$DE
 13679 7C55 8D 12 A1			sta A
 13680
 13681 				; optimize OK (service.pas), line = 2766
 13682
 13683 7C58 AC 0E A1			ldy NUM
 13684 7C5B B9 96 20			lda adr.DIGITS,y
 13685 7C5E 29 01			and #$01
 13686 7C60 C9 01			cmp #$01
 13687 7C62 D0 05			jne l_2928
 13688 7C64 A9 DF			lda #$DF
 13689 7C66 8D 12 A1			sta A
 13690 7C69			l_2928
 13691
 13692 				; optimize OK (service.pas), line = 2767
 13693
 13694 7C69 A9 01			lda #$01
 13695 7C6B 8D 10 A1			sta X
 13696
 13697 7C6E			l_2938
 13698 				; --- ForToDoCondition
 13699 7C6E AD 10 A1			lda X
 13700 7C71 C9 05			cmp #$05
 13701 7C73 B0 63			jcs l_2946
 13702
 13703 				; optimize OK (service.pas), line = 2769
 13704
 13705 7C75 AD 0A A1			lda PX
 13706 7C78 85 A0			sta :STACKORIGIN+10
 13707 7C7A A9 50			lda #$50
 13708 7C7C 18 6D 0B A1			add PX+1
 13709 7C80 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13710 7C82 A9 00			lda #$00
 13711 7C84 69 00			adc #$00
 13712 7C86 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13713 7C88 A9 00			lda #$00
 13714 7C8A 69 00			adc #$00
 13715 7C8C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13716 7C8E A5 A0			lda :STACKORIGIN+10
 13717 7C90 18 6D 10 A1			add X
 13718 7C94 85 A0			sta :STACKORIGIN+10
 13719 7C96 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13720 7C98 69 00			adc #$00
 13721 7C9A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13722 7C9C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13723 7C9E 69 00			adc #$00
 13724 7CA0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13725 7CA2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13726 7CA4 69 00			adc #$00
 13727 7CA6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13728 7CA8 AC 0C A1			ldy PY
 13729 7CAB A5 A0			lda :STACKORIGIN+10
 13730 7CAD 18 79 00 C0			add adr.ROW,y
 13731 7CB1 8D 87 9F			sta PUTBYTE.DST
 13732 7CB4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13733 7CB6 79 00 C1			adc adr.ROW+256,y
 13734 7CB9 8D 88 9F			sta PUTBYTE.DST+1
 13735 7CBC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13736 7CBE 69 00			adc #$00
 13737 7CC0 8D 89 9F			sta PUTBYTE.DST+2
 13738 7CC3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13739 7CC5 69 00			adc #$00
 13740 7CC7 8D 8A 9F			sta PUTBYTE.DST+3
 13741 7CCA AD 12 A1			lda A
 13742 7CCD 8D 8B 9F			sta PUTBYTE.V
 13743 7CD0 20 02 3C			jsr PUTBYTE
 13744
 13745 				; --- ForToDoEpilog
 13746 7CD3 EE 10 A1			inc X
 13747 7CD6 D0 96			jne l_2938
 13748 7CD8			l_2946
 13749
 13750 				; optimize OK (service.pas), line = 2773
 13751
 13752 7CD8 A9 DE			lda #$DE
 13753 7CDA 8D 12 A1			sta A
 13754
 13755 				; optimize OK (service.pas), line = 2774
 13756
 13757 7CDD AC 0E A1			ldy NUM
 13758 7CE0 B9 96 20			lda adr.DIGITS,y
 13759 7CE3 29 02			and #$02
 13760 7CE5 C9 02			cmp #$02
 13761 7CE7 D0 05			jne l_297E
 13762 7CE9 A9 DF			lda #$DF
 13763 7CEB 8D 12 A1			sta A
 13764 7CEE			l_297E
 13765
 13766 				; optimize OK (service.pas), line = 2775
 13767
 13768 7CEE A9 01			lda #$01
 13769 7CF0 8D 10 A1			sta X
 13770
 13771 7CF3			l_298E
 13772 				; --- ForToDoCondition
 13773 7CF3 AD 10 A1			lda X
 13774 7CF6 C9 05			cmp #$05
 13775 7CF8 B0 63			jcs l_299C
 13776
 13777 				; optimize OK (service.pas), line = 2777
 13778
 13779 7CFA AD 0A A1			lda PX
 13780 7CFD 85 A0			sta :STACKORIGIN+10
 13781 7CFF A9 50			lda #$50
 13782 7D01 18 6D 0B A1			add PX+1
 13783 7D05 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13784 7D07 A9 00			lda #$00
 13785 7D09 69 00			adc #$00
 13786 7D0B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13787 7D0D A9 00			lda #$00
 13788 7D0F 69 00			adc #$00
 13789 7D11 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13790 7D13 A5 A0			lda :STACKORIGIN+10
 13791 7D15 18 6D 10 A1			add X
 13792 7D19 85 A0			sta :STACKORIGIN+10
 13793 7D1B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13794 7D1D 69 00			adc #$00
 13795 7D1F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13796 7D21 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13797 7D23 69 00			adc #$00
 13798 7D25 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13799 7D27 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13800 7D29 69 00			adc #$00
 13801 7D2B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13802 7D2D AC 0C A1			ldy PY
 13803 7D30 A5 A0			lda :STACKORIGIN+10
 13804 7D32 18 79 05 C0			add adr.ROW+$05,y
 13805 7D36 8D 87 9F			sta PUTBYTE.DST
 13806 7D39 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13807 7D3B 79 05 C1			adc adr.ROW+256+$05,y
 13808 7D3E 8D 88 9F			sta PUTBYTE.DST+1
 13809 7D41 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13810 7D43 69 00			adc #$00
 13811 7D45 8D 89 9F			sta PUTBYTE.DST+2
 13812 7D48 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13813 7D4A 69 00			adc #$00
 13814 7D4C 8D 8A 9F			sta PUTBYTE.DST+3
 13815 7D4F AD 12 A1			lda A
 13816 7D52 8D 8B 9F			sta PUTBYTE.V
 13817 7D55 20 02 3C			jsr PUTBYTE
 13818
 13819 				; --- ForToDoEpilog
 13820 7D58 EE 10 A1			inc X
 13821 7D5B D0 96			jne l_298E
 13822 7D5D			l_299C
 13823
 13824 				; optimize OK (service.pas), line = 2781
 13825
 13826 7D5D A9 DE			lda #$DE
 13827 7D5F 8D 12 A1			sta A
 13828
 13829 				; optimize OK (service.pas), line = 2782
 13830
 13831 7D62 AC 0E A1			ldy NUM
 13832 7D65 B9 96 20			lda adr.DIGITS,y
 13833 7D68 29 04			and #$04
 13834 7D6A C9 04			cmp #$04
 13835 7D6C D0 05			jne l_29D8
 13836 7D6E A9 DF			lda #$DF
 13837 7D70 8D 12 A1			sta A
 13838 7D73			l_29D8
 13839
 13840 				; optimize OK (service.pas), line = 2783
 13841
 13842 7D73 A9 01			lda #$01
 13843 7D75 8D 10 A1			sta X
 13844
 13845 7D78			l_29E8
 13846 				; --- ForToDoCondition
 13847 7D78 AD 10 A1			lda X
 13848 7D7B C9 05			cmp #$05
 13849 7D7D B0 63			jcs l_29F6
 13850
 13851 				; optimize OK (service.pas), line = 2785
 13852
 13853 7D7F AD 0A A1			lda PX
 13854 7D82 85 A0			sta :STACKORIGIN+10
 13855 7D84 A9 50			lda #$50
 13856 7D86 18 6D 0B A1			add PX+1
 13857 7D8A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13858 7D8C A9 00			lda #$00
 13859 7D8E 69 00			adc #$00
 13860 7D90 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13861 7D92 A9 00			lda #$00
 13862 7D94 69 00			adc #$00
 13863 7D96 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13864 7D98 A5 A0			lda :STACKORIGIN+10
 13865 7D9A 18 6D 10 A1			add X
 13866 7D9E 85 A0			sta :STACKORIGIN+10
 13867 7DA0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13868 7DA2 69 00			adc #$00
 13869 7DA4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13870 7DA6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13871 7DA8 69 00			adc #$00
 13872 7DAA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13873 7DAC A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13874 7DAE 69 00			adc #$00
 13875 7DB0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13876 7DB2 AC 0C A1			ldy PY
 13877 7DB5 A5 A0			lda :STACKORIGIN+10
 13878 7DB7 18 79 0A C0			add adr.ROW+$0A,y
 13879 7DBB 8D 87 9F			sta PUTBYTE.DST
 13880 7DBE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13881 7DC0 79 0A C1			adc adr.ROW+256+$0A,y
 13882 7DC3 8D 88 9F			sta PUTBYTE.DST+1
 13883 7DC6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13884 7DC8 69 00			adc #$00
 13885 7DCA 8D 89 9F			sta PUTBYTE.DST+2
 13886 7DCD A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13887 7DCF 69 00			adc #$00
 13888 7DD1 8D 8A 9F			sta PUTBYTE.DST+3
 13889 7DD4 AD 12 A1			lda A
 13890 7DD7 8D 8B 9F			sta PUTBYTE.V
 13891 7DDA 20 02 3C			jsr PUTBYTE
 13892
 13893 				; --- ForToDoEpilog
 13894 7DDD EE 10 A1			inc X
 13895 7DE0 D0 96			jne l_29E8
 13896 7DE2			l_29F6
 13897
 13898 				; optimize OK (service.pas), line = 2788
 13899
 13900 7DE2 A9 DE			lda #$DE
 13901 7DE4 8D 12 A1			sta A
 13902
 13903 				; optimize OK (service.pas), line = 2789
 13904
 13905 7DE7 AC 0E A1			ldy NUM
 13906 7DEA B9 96 20			lda adr.DIGITS,y
 13907 7DED 29 08			and #$08
 13908 7DEF C9 08			cmp #$08
 13909 7DF1 D0 05			jne l_2A32
 13910 7DF3 A9 DF			lda #$DF
 13911 7DF5 8D 12 A1			sta A
 13912 7DF8			l_2A32
 13913
 13914 				; optimize OK (service.pas), line = 2790
 13915
 13916 7DF8 A9 01			lda #$01
 13917 7DFA 8D 11 A1			sta Y
 13918
 13919 7DFD			l_2A42
 13920 				; --- ForToDoCondition
 13921 7DFD AD 11 A1			lda Y
 13922 7E00 C9 05			cmp #$05
 13923 7E02 B0 4E			jcs l_2A50
 13924
 13925 				; optimize OK (service.pas), line = 2792
 13926
 13927 7E04 AD 0A A1			lda PX
 13928 7E07 85 A0			sta :STACKORIGIN+10
 13929 7E09 A9 50			lda #$50
 13930 7E0B 18 6D 0B A1			add PX+1
 13931 7E0F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13932 7E11 A9 00			lda #$00
 13933 7E13 69 00			adc #$00
 13934 7E15 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13935 7E17 A9 00			lda #$00
 13936 7E19 69 00			adc #$00
 13937 7E1B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13938 7E1D AD 0C A1			lda PY
 13939 7E20 18 6D 11 A1			add Y
 13940 7E24 A8				tay
 13941 7E25 A5 A0			lda :STACKORIGIN+10
 13942 7E27 18 79 00 C0			add adr.ROW,y
 13943 7E2B 8D 87 9F			sta PUTBYTE.DST
 13944 7E2E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13945 7E30 79 00 C1			adc adr.ROW+256,y
 13946 7E33 8D 88 9F			sta PUTBYTE.DST+1
 13947 7E36 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13948 7E38 69 00			adc #$00
 13949 7E3A 8D 89 9F			sta PUTBYTE.DST+2
 13950 7E3D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13951 7E3F 69 00			adc #$00
 13952 7E41 8D 8A 9F			sta PUTBYTE.DST+3
 13953 7E44 AD 12 A1			lda A
 13954 7E47 8D 8B 9F			sta PUTBYTE.V
 13955 7E4A 20 02 3C			jsr PUTBYTE
 13956
 13957 				; --- ForToDoEpilog
 13958 7E4D EE 11 A1			inc Y
 13959 7E50 D0 AB			jne l_2A42
 13960 7E52			l_2A50
 13961
 13962 				; optimize OK (service.pas), line = 2795
 13963
 13964 7E52 A9 DE			lda #$DE
 13965 7E54 8D 12 A1			sta A
 13966
 13967 				; optimize OK (service.pas), line = 2796
 13968
 13969 7E57 AC 0E A1			ldy NUM
 13970 7E5A B9 96 20			lda adr.DIGITS,y
 13971 7E5D 29 10			and #$10
 13972 7E5F C9 10			cmp #$10
 13973 7E61 D0 05			jne l_2A88
 13974 7E63 A9 DF			lda #$DF
 13975 7E65 8D 12 A1			sta A
 13976 7E68			l_2A88
 13977
 13978 				; optimize OK (service.pas), line = 2797
 13979
 13980 7E68 A9 01			lda #$01
 13981 7E6A 8D 11 A1			sta Y
 13982
 13983 7E6D			l_2A98
 13984 				; --- ForToDoCondition
 13985 7E6D AD 11 A1			lda Y
 13986 7E70 C9 05			cmp #$05
 13987 7E72 B0 4E			jcs l_2AA6
 13988
 13989 				; optimize OK (service.pas), line = 2799
 13990
 13991 7E74 AD 0A A1			lda PX
 13992 7E77 85 A0			sta :STACKORIGIN+10
 13993 7E79 A9 50			lda #$50
 13994 7E7B 18 6D 0B A1			add PX+1
 13995 7E7F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13996 7E81 A9 00			lda #$00
 13997 7E83 69 00			adc #$00
 13998 7E85 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13999 7E87 A9 00			lda #$00
 14000 7E89 69 00			adc #$00
 14001 7E8B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14002 7E8D AD 0C A1			lda PY
 14003 7E90 18 6D 11 A1			add Y
 14004 7E94 A8				tay
 14005 7E95 A5 A0			lda :STACKORIGIN+10
 14006 7E97 18 79 05 C0			add adr.ROW+$05,y
 14007 7E9B 8D 87 9F			sta PUTBYTE.DST
 14008 7E9E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14009 7EA0 79 05 C1			adc adr.ROW+256+$05,y
 14010 7EA3 8D 88 9F			sta PUTBYTE.DST+1
 14011 7EA6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14012 7EA8 69 00			adc #$00
 14013 7EAA 8D 89 9F			sta PUTBYTE.DST+2
 14014 7EAD A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14015 7EAF 69 00			adc #$00
 14016 7EB1 8D 8A 9F			sta PUTBYTE.DST+3
 14017 7EB4 AD 12 A1			lda A
 14018 7EB7 8D 8B 9F			sta PUTBYTE.V
 14019 7EBA 20 02 3C			jsr PUTBYTE
 14020
 14021 				; --- ForToDoEpilog
 14022 7EBD EE 11 A1			inc Y
 14023 7EC0 D0 AB			jne l_2A98
 14024 7EC2			l_2AA6
 14025
 14026 				; optimize OK (service.pas), line = 2802
 14027
 14028 7EC2 A9 DE			lda #$DE
 14029 7EC4 8D 12 A1			sta A
 14030
 14031 				; optimize OK (service.pas), line = 2803
 14032
 14033 7EC7 AC 0E A1			ldy NUM
 14034 7ECA B9 96 20			lda adr.DIGITS,y
 14035 7ECD 29 20			and #$20
 14036 7ECF C9 20			cmp #$20
 14037 7ED1 D0 05			jne l_2AE2
 14038 7ED3 A9 DF			lda #$DF
 14039 7ED5 8D 12 A1			sta A
 14040 7ED8			l_2AE2
 14041
 14042 				; optimize OK (service.pas), line = 2804
 14043
 14044 7ED8 A9 01			lda #$01
 14045 7EDA 8D 11 A1			sta Y
 14046
 14047 7EDD			l_2AF2
 14048 				; --- ForToDoCondition
 14049 7EDD AD 11 A1			lda Y
 14050 7EE0 C9 05			cmp #$05
 14051 7EE2 B0 4F			jcs l_2B00
 14052
 14053 				; optimize OK (service.pas), line = 2806
 14054
 14055 7EE4 A9 05			lda #$05
 14056 7EE6 6D 0A A1			adc PX
 14057 7EE9 85 A0			sta :STACKORIGIN+10
 14058 7EEB A9 50			lda #$50
 14059 7EED 6D 0B A1			adc PX+1
 14060 7EF0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14061 7EF2 A9 00			lda #$00
 14062 7EF4 69 00			adc #$00
 14063 7EF6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14064 7EF8 A9 00			lda #$00
 14065 7EFA 69 00			adc #$00
 14066 7EFC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14067 7EFE AD 0C A1			lda PY
 14068 7F01 18 6D 11 A1			add Y
 14069 7F05 A8				tay
 14070 7F06 A5 A0			lda :STACKORIGIN+10
 14071 7F08 18 79 00 C0			add adr.ROW,y
 14072 7F0C 8D 87 9F			sta PUTBYTE.DST
 14073 7F0F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14074 7F11 79 00 C1			adc adr.ROW+256,y
 14075 7F14 8D 88 9F			sta PUTBYTE.DST+1
 14076 7F17 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14077 7F19 69 00			adc #$00
 14078 7F1B 8D 89 9F			sta PUTBYTE.DST+2
 14079 7F1E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14080 7F20 69 00			adc #$00
 14081 7F22 8D 8A 9F			sta PUTBYTE.DST+3
 14082 7F25 AD 12 A1			lda A
 14083 7F28 8D 8B 9F			sta PUTBYTE.V
 14084 7F2B 20 02 3C			jsr PUTBYTE
 14085
 14086 				; --- ForToDoEpilog
 14087 7F2E EE 11 A1			inc Y
 14088 7F31 D0 AA			jne l_2AF2
 14089 7F33			l_2B00
 14090
 14091 				; optimize OK (service.pas), line = 2809
 14092
 14093 7F33 A9 DE			lda #$DE
 14094 7F35 8D 12 A1			sta A
 14095
 14096 				; optimize OK (service.pas), line = 2810
 14097
 14098 7F38 AC 0E A1			ldy NUM
 14099 7F3B B9 96 20			lda adr.DIGITS,y
 14100 7F3E 29 40			and #$40
 14101 7F40 C9 40			cmp #$40
 14102 7F42 D0 05			jne l_2B3C
 14103 7F44 A9 DF			lda #$DF
 14104 7F46 8D 12 A1			sta A
 14105 7F49			l_2B3C
 14106
 14107 				; optimize OK (service.pas), line = 2811
 14108
 14109 7F49 A9 01			lda #$01
 14110 7F4B 8D 11 A1			sta Y
 14111
 14112 7F4E			l_2B4C
 14113 				; --- ForToDoCondition
 14114 7F4E AD 11 A1			lda Y
 14115 7F51 C9 05			cmp #$05
 14116 7F53 B0 4F			jcs l_2B5A
 14117
 14118 				; optimize OK (service.pas), line = 2813
 14119
 14120 7F55 A9 05			lda #$05
 14121 7F57 6D 0A A1			adc PX
 14122 7F5A 85 A0			sta :STACKORIGIN+10
 14123 7F5C A9 50			lda #$50
 14124 7F5E 6D 0B A1			adc PX+1
 14125 7F61 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14126 7F63 A9 00			lda #$00
 14127 7F65 69 00			adc #$00
 14128 7F67 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14129 7F69 A9 00			lda #$00
 14130 7F6B 69 00			adc #$00
 14131 7F6D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14132 7F6F AD 0C A1			lda PY
 14133 7F72 18 6D 11 A1			add Y
 14134 7F76 A8				tay
 14135 7F77 A5 A0			lda :STACKORIGIN+10
 14136 7F79 18 79 05 C0			add adr.ROW+$05,y
 14137 7F7D 8D 87 9F			sta PUTBYTE.DST
 14138 7F80 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14139 7F82 79 05 C1			adc adr.ROW+256+$05,y
 14140 7F85 8D 88 9F			sta PUTBYTE.DST+1
 14141 7F88 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14142 7F8A 69 00			adc #$00
 14143 7F8C 8D 89 9F			sta PUTBYTE.DST+2
 14144 7F8F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14145 7F91 69 00			adc #$00
 14146 7F93 8D 8A 9F			sta PUTBYTE.DST+3
 14147 7F96 AD 12 A1			lda A
 14148 7F99 8D 8B 9F			sta PUTBYTE.V
 14149 7F9C 20 02 3C			jsr PUTBYTE
 14150
 14151 				; --- ForToDoEpilog
 14152 7F9F EE 11 A1			inc Y
 14153 7FA2 D0 AA			jne l_2B4C
 14154 7FA4			l_2B5A
 14155
 14156 				; ------------------------------------------------------------
 14157
 14158 = A10A			PX	= DATAORIGIN+$03A6
 14159 = A10C			PY	= DATAORIGIN+$03A8
 14160 = A10E			NUM	= DATAORIGIN+$03AA
 14161 = A110			X	= DATAORIGIN+$03AC
 14162 = A111			Y	= DATAORIGIN+$03AD
 14163 = A112			A	= DATAORIGIN+$03AE
 14164
 14165 = A10A			@VarData	= PX
 14166 = 0009			@VarDataSize	= 9
 14167
 14168 7FA4			@exit
 14169 					.ifdef @new
 14170 					lda <@VarData
 14171 					sta :ztmp
 14172 					lda >@VarData
 14173 					ldy #@VarDataSize-1
 14174 					jmp @FreeMem
 14175 					els
 14176 7FA4 60				rts						; ret
 14177 					eif
 14178 				.endl
 14179
 14180 7FA5			.local	WRITE_SCORE					; PROCEDURE
 14181
 14182 				; optimize OK (service.pas), line = 2824
 14183
 14184 7FA5 A9 00			lda #$00
 14185 7FA7 8D 1F A1			sta F
 14186
 14187 				; optimize OK (service.pas), line = 2829
 14188
 14189 7FAA A9 A0			lda #$A0
 14190 7FAC 85 8E			sta @INTEGER.DIV.B
 14191 7FAE A9 86			lda #$86
 14192 7FB0 85 8F			sta @INTEGER.DIV.B+1
 14193 7FB2 A9 01			lda #$01
 14194 7FB4 85 90			sta @INTEGER.DIV.B+2
 14195 7FB6 A9 00			lda #$00
 14196 7FB8 85 91			sta @INTEGER.DIV.B+3
 14197 7FBA AD 17 A1			lda SC
 14198 7FBD 85 86			sta @INTEGER.DIV.A
 14199 7FBF AD 18 A1			lda SC+1
 14200 7FC2 85 87			sta @INTEGER.DIV.A+1
 14201 7FC4 AD 19 A1			lda SC+2
 14202 7FC7 85 88			sta @INTEGER.DIV.A+2
 14203 7FC9 AD 1A A1			lda SC+3
 14204 7FCC 85 89			sta @INTEGER.DIV.A+3
 14205 7FCE 20 73 22			jsr @INTEGER.DIV
 14206 7FD1 A9 0A			lda #$0A
 14207 7FD3 85 8E			sta @INTEGER.MOD.B
 14208 7FD5 A9 00			lda #$00
 14209 7FD7 85 8F			sta @INTEGER.MOD.B+1
 14210 7FD9 85 90			sta @INTEGER.MOD.B+2
 14211 7FDB 85 91			sta @INTEGER.MOD.B+3
 14212 7FDD 20 90 22			jsr @INTEGER.MOD
 14213 7FE0 A5 8A			lda @INTEGER.MOD.RESULT
 14214 7FE2 8D 1B A1			sta N1
 14215 7FE5 A5 8B			lda @INTEGER.MOD.RESULT+1
 14216 7FE7 8D 1C A1			sta N1+1
 14217 7FEA A5 8C			lda @INTEGER.MOD.RESULT+2
 14218 7FEC 8D 1D A1			sta N1+2
 14219 7FEF A5 8D			lda @INTEGER.MOD.RESULT+3
 14220 7FF1 8D 1E A1			sta N1+3
 14221
 14222 				; optimize OK (service.pas), line = 2830
 14223
 14224 7FF4 30 10			jmi l_2BA2
 14225 7FF6 0D 1D A1			ora N1+2
 14226 7FF9 0D 1C A1			ora N1+1
 14227 7FFC 0D 1B A1			ora N1
 14228 7FFF F0 05			jeq l_2BA2
 14229 8001 A9 01			lda #$01
 14230 8003 8D 1F A1			sta F
 14231 8006			l_2BA2
 14232
 14233 				; optimize OK (service.pas), line = 2831
 14234
 14235 8006 AD 1F A1			lda F
 14236 8009 F0 24			jeq l_2BB5
 14237 800B AD 13 A1			lda PX
 14238 800E 8D 0A A1			sta PUT_DIGIT.PX
 14239 8011 AD 14 A1			lda PX+1
 14240 8014 8D 0B A1			sta PUT_DIGIT.PX+1
 14241 8017 AD 15 A1			lda PY
 14242 801A 8D 0C A1			sta PUT_DIGIT.PY
 14243 801D AD 16 A1			lda PY+1
 14244 8020 8D 0D A1			sta PUT_DIGIT.PY+1
 14245 8023 AD 1B A1			lda N1
 14246 8026 8D 0E A1			sta PUT_DIGIT.NUM
 14247 8029 AD 1C A1			lda N1+1
 14248 802C 4C 4E 80			jmp l_2BC5
 14249 802F			l_2BB5
 14250
 14251 				; optimize OK (service.pas), line = 2832
 14252
 14253 802F AD 13 A1			lda PX
 14254 8032 8D 0A A1			sta PUT_DIGIT.PX
 14255 8035 AD 14 A1			lda PX+1
 14256 8038 8D 0B A1			sta PUT_DIGIT.PX+1
 14257 803B AD 15 A1			lda PY
 14258 803E 8D 0C A1			sta PUT_DIGIT.PY
 14259 8041 AD 16 A1			lda PY+1
 14260 8044 8D 0D A1			sta PUT_DIGIT.PY+1
 14261 8047 A9 0A			lda #$0A
 14262 8049 8D 0E A1			sta PUT_DIGIT.NUM
 14263 804C A9 00			lda #$00
 14264 804E			l_2BC5
 14265 804E 8D 0F A1			sta PUT_DIGIT.NUM+1
 14266 8051 20 53 7C			jsr PUT_DIGIT
 14267
 14268 				; optimize OK (service.pas), line = 2835
 14269
 14270 8054 A9 10			lda #$10
 14271 8056 85 8E			sta @INTEGER.DIV.B
 14272 8058 A9 27			lda #$27
 14273 805A 85 8F			sta @INTEGER.DIV.B+1
 14274 805C A9 00			lda #$00
 14275 805E 85 90			sta @INTEGER.DIV.B+2
 14276 8060 85 91			sta @INTEGER.DIV.B+3
 14277 8062 AD 17 A1			lda SC
 14278 8065 85 86			sta @INTEGER.DIV.A
 14279 8067 AD 18 A1			lda SC+1
 14280 806A 85 87			sta @INTEGER.DIV.A+1
 14281 806C AD 19 A1			lda SC+2
 14282 806F 85 88			sta @INTEGER.DIV.A+2
 14283 8071 AD 1A A1			lda SC+3
 14284 8074 85 89			sta @INTEGER.DIV.A+3
 14285 8076 20 73 22			jsr @INTEGER.DIV
 14286 8079 A9 0A			lda #$0A
 14287 807B 85 8E			sta @INTEGER.MOD.B
 14288 807D A9 00			lda #$00
 14289 807F 85 8F			sta @INTEGER.MOD.B+1
 14290 8081 85 90			sta @INTEGER.MOD.B+2
 14291 8083 85 91			sta @INTEGER.MOD.B+3
 14292 8085 20 90 22			jsr @INTEGER.MOD
 14293 8088 A5 8A			lda @INTEGER.MOD.RESULT
 14294 808A 8D 1B A1			sta N1
 14295 808D A5 8B			lda @INTEGER.MOD.RESULT+1
 14296 808F 8D 1C A1			sta N1+1
 14297 8092 A5 8C			lda @INTEGER.MOD.RESULT+2
 14298 8094 8D 1D A1			sta N1+2
 14299 8097 A5 8D			lda @INTEGER.MOD.RESULT+3
 14300 8099 8D 1E A1			sta N1+3
 14301
 14302 				; optimize OK (service.pas), line = 2836
 14303
 14304 809C 30 10			jmi l_2BE7
 14305 809E 0D 1D A1			ora N1+2
 14306 80A1 0D 1C A1			ora N1+1
 14307 80A4 0D 1B A1			ora N1
 14308 80A7 F0 05			jeq l_2BE7
 14309 80A9 A9 01			lda #$01
 14310 80AB 8D 1F A1			sta F
 14311 80AE			l_2BE7
 14312
 14313 				; optimize OK (service.pas), line = 2837
 14314
 14315 80AE AD 1F A1			lda F
 14316 80B1 F0 29			jeq l_2BFA
 14317 80B3 AD 13 A1			lda PX
 14318 80B6 18 69 07			add #$07
 14319 80B9 8D 0A A1			sta PUT_DIGIT.PX
 14320 80BC AD 14 A1			lda PX+1
 14321 80BF 69 00			adc #$00
 14322 80C1 8D 0B A1			sta PUT_DIGIT.PX+1
 14323 80C4 AD 15 A1			lda PY
 14324 80C7 8D 0C A1			sta PUT_DIGIT.PY
 14325 80CA AD 16 A1			lda PY+1
 14326 80CD 8D 0D A1			sta PUT_DIGIT.PY+1
 14327 80D0 AD 1B A1			lda N1
 14328 80D3 8D 0E A1			sta PUT_DIGIT.NUM
 14329 80D6 AD 1C A1			lda N1+1
 14330 80D9 4C 00 81			jmp l_2C0E
 14331 80DC			l_2BFA
 14332
 14333 				; optimize OK (service.pas), line = 2838
 14334
 14335 80DC AD 13 A1			lda PX
 14336 80DF 18 69 07			add #$07
 14337 80E2 8D 0A A1			sta PUT_DIGIT.PX
 14338 80E5 AD 14 A1			lda PX+1
 14339 80E8 69 00			adc #$00
 14340 80EA 8D 0B A1			sta PUT_DIGIT.PX+1
 14341 80ED AD 15 A1			lda PY
 14342 80F0 8D 0C A1			sta PUT_DIGIT.PY
 14343 80F3 AD 16 A1			lda PY+1
 14344 80F6 8D 0D A1			sta PUT_DIGIT.PY+1
 14345 80F9 A9 0A			lda #$0A
 14346 80FB 8D 0E A1			sta PUT_DIGIT.NUM
 14347 80FE A9 00			lda #$00
 14348 8100			l_2C0E
 14349 8100 8D 0F A1			sta PUT_DIGIT.NUM+1
 14350 8103 20 53 7C			jsr PUT_DIGIT
 14351
 14352 				; optimize OK (service.pas), line = 2841
 14353
 14354 8106 A9 E8			lda #$E8
 14355 8108 85 8E			sta @INTEGER.DIV.B
 14356 810A A9 03			lda #$03
 14357 810C 85 8F			sta @INTEGER.DIV.B+1
 14358 810E A9 00			lda #$00
 14359 8110 85 90			sta @INTEGER.DIV.B+2
 14360 8112 85 91			sta @INTEGER.DIV.B+3
 14361 8114 AD 17 A1			lda SC
 14362 8117 85 86			sta @INTEGER.DIV.A
 14363 8119 AD 18 A1			lda SC+1
 14364 811C 85 87			sta @INTEGER.DIV.A+1
 14365 811E AD 19 A1			lda SC+2
 14366 8121 85 88			sta @INTEGER.DIV.A+2
 14367 8123 AD 1A A1			lda SC+3
 14368 8126 85 89			sta @INTEGER.DIV.A+3
 14369 8128 20 73 22			jsr @INTEGER.DIV
 14370 812B A9 0A			lda #$0A
 14371 812D 85 8E			sta @INTEGER.MOD.B
 14372 812F A9 00			lda #$00
 14373 8131 85 8F			sta @INTEGER.MOD.B+1
 14374 8133 85 90			sta @INTEGER.MOD.B+2
 14375 8135 85 91			sta @INTEGER.MOD.B+3
 14376 8137 20 90 22			jsr @INTEGER.MOD
 14377 813A A5 8A			lda @INTEGER.MOD.RESULT
 14378 813C 8D 1B A1			sta N1
 14379 813F A5 8B			lda @INTEGER.MOD.RESULT+1
 14380 8141 8D 1C A1			sta N1+1
 14381 8144 A5 8C			lda @INTEGER.MOD.RESULT+2
 14382 8146 8D 1D A1			sta N1+2
 14383 8149 A5 8D			lda @INTEGER.MOD.RESULT+3
 14384 814B 8D 1E A1			sta N1+3
 14385
 14386 				; optimize OK (service.pas), line = 2842
 14387
 14388 814E 30 10			jmi l_2C34
 14389 8150 0D 1D A1			ora N1+2
 14390 8153 0D 1C A1			ora N1+1
 14391 8156 0D 1B A1			ora N1
 14392 8159 F0 05			jeq l_2C34
 14393 815B A9 01			lda #$01
 14394 815D 8D 1F A1			sta F
 14395 8160			l_2C34
 14396
 14397 				; optimize OK (service.pas), line = 2843
 14398
 14399 8160 AD 1F A1			lda F
 14400 8163 F0 29			jeq l_2C47
 14401 8165 AD 13 A1			lda PX
 14402 8168 18 69 0E			add #$0E
 14403 816B 8D 0A A1			sta PUT_DIGIT.PX
 14404 816E AD 14 A1			lda PX+1
 14405 8171 69 00			adc #$00
 14406 8173 8D 0B A1			sta PUT_DIGIT.PX+1
 14407 8176 AD 15 A1			lda PY
 14408 8179 8D 0C A1			sta PUT_DIGIT.PY
 14409 817C AD 16 A1			lda PY+1
 14410 817F 8D 0D A1			sta PUT_DIGIT.PY+1
 14411 8182 AD 1B A1			lda N1
 14412 8185 8D 0E A1			sta PUT_DIGIT.NUM
 14413 8188 AD 1C A1			lda N1+1
 14414 818B 4C B2 81			jmp l_2C5B
 14415 818E			l_2C47
 14416
 14417 				; optimize OK (service.pas), line = 2844
 14418
 14419 818E AD 13 A1			lda PX
 14420 8191 18 69 0E			add #$0E
 14421 8194 8D 0A A1			sta PUT_DIGIT.PX
 14422 8197 AD 14 A1			lda PX+1
 14423 819A 69 00			adc #$00
 14424 819C 8D 0B A1			sta PUT_DIGIT.PX+1
 14425 819F AD 15 A1			lda PY
 14426 81A2 8D 0C A1			sta PUT_DIGIT.PY
 14427 81A5 AD 16 A1			lda PY+1
 14428 81A8 8D 0D A1			sta PUT_DIGIT.PY+1
 14429 81AB A9 0A			lda #$0A
 14430 81AD 8D 0E A1			sta PUT_DIGIT.NUM
 14431 81B0 A9 00			lda #$00
 14432 81B2			l_2C5B
 14433 81B2 8D 0F A1			sta PUT_DIGIT.NUM+1
 14434 81B5 20 53 7C			jsr PUT_DIGIT
 14435
 14436 				; optimize OK (service.pas), line = 2847
 14437
 14438 81B8 A9 64			lda #$64
 14439 81BA 85 8E			sta @INTEGER.DIV.B
 14440 81BC A9 00			lda #$00
 14441 81BE 85 8F			sta @INTEGER.DIV.B+1
 14442 81C0 85 90			sta @INTEGER.DIV.B+2
 14443 81C2 85 91			sta @INTEGER.DIV.B+3
 14444 81C4 AD 17 A1			lda SC
 14445 81C7 85 86			sta @INTEGER.DIV.A
 14446 81C9 AD 18 A1			lda SC+1
 14447 81CC 85 87			sta @INTEGER.DIV.A+1
 14448 81CE AD 19 A1			lda SC+2
 14449 81D1 85 88			sta @INTEGER.DIV.A+2
 14450 81D3 AD 1A A1			lda SC+3
 14451 81D6 85 89			sta @INTEGER.DIV.A+3
 14452 81D8 20 73 22			jsr @INTEGER.DIV
 14453 81DB A9 0A			lda #$0A
 14454 81DD 85 8E			sta @INTEGER.MOD.B
 14455 81DF A9 00			lda #$00
 14456 81E1 85 8F			sta @INTEGER.MOD.B+1
 14457 81E3 85 90			sta @INTEGER.MOD.B+2
 14458 81E5 85 91			sta @INTEGER.MOD.B+3
 14459 81E7 20 90 22			jsr @INTEGER.MOD
 14460 81EA A5 8A			lda @INTEGER.MOD.RESULT
 14461 81EC 8D 1B A1			sta N1
 14462 81EF A5 8B			lda @INTEGER.MOD.RESULT+1
 14463 81F1 8D 1C A1			sta N1+1
 14464 81F4 A5 8C			lda @INTEGER.MOD.RESULT+2
 14465 81F6 8D 1D A1			sta N1+2
 14466 81F9 A5 8D			lda @INTEGER.MOD.RESULT+3
 14467 81FB 8D 1E A1			sta N1+3
 14468
 14469 				; optimize OK (service.pas), line = 2848
 14470
 14471 81FE 30 10			jmi l_2C81
 14472 8200 0D 1D A1			ora N1+2
 14473 8203 0D 1C A1			ora N1+1
 14474 8206 0D 1B A1			ora N1
 14475 8209 F0 05			jeq l_2C81
 14476 820B A9 01			lda #$01
 14477 820D 8D 1F A1			sta F
 14478 8210			l_2C81
 14479
 14480 				; optimize OK (service.pas), line = 2849
 14481
 14482 8210 AD 1F A1			lda F
 14483 8213 F0 29			jeq l_2C94
 14484 8215 AD 13 A1			lda PX
 14485 8218 18 69 15			add #$15
 14486 821B 8D 0A A1			sta PUT_DIGIT.PX
 14487 821E AD 14 A1			lda PX+1
 14488 8221 69 00			adc #$00
 14489 8223 8D 0B A1			sta PUT_DIGIT.PX+1
 14490 8226 AD 15 A1			lda PY
 14491 8229 8D 0C A1			sta PUT_DIGIT.PY
 14492 822C AD 16 A1			lda PY+1
 14493 822F 8D 0D A1			sta PUT_DIGIT.PY+1
 14494 8232 AD 1B A1			lda N1
 14495 8235 8D 0E A1			sta PUT_DIGIT.NUM
 14496 8238 AD 1C A1			lda N1+1
 14497 823B 4C 62 82			jmp l_2CA8
 14498 823E			l_2C94
 14499
 14500 				; optimize OK (service.pas), line = 2850
 14501
 14502 823E AD 13 A1			lda PX
 14503 8241 18 69 15			add #$15
 14504 8244 8D 0A A1			sta PUT_DIGIT.PX
 14505 8247 AD 14 A1			lda PX+1
 14506 824A 69 00			adc #$00
 14507 824C 8D 0B A1			sta PUT_DIGIT.PX+1
 14508 824F AD 15 A1			lda PY
 14509 8252 8D 0C A1			sta PUT_DIGIT.PY
 14510 8255 AD 16 A1			lda PY+1
 14511 8258 8D 0D A1			sta PUT_DIGIT.PY+1
 14512 825B A9 0A			lda #$0A
 14513 825D 8D 0E A1			sta PUT_DIGIT.NUM
 14514 8260 A9 00			lda #$00
 14515 8262			l_2CA8
 14516 8262 8D 0F A1			sta PUT_DIGIT.NUM+1
 14517 8265 20 53 7C			jsr PUT_DIGIT
 14518
 14519 				; optimize OK (service.pas), line = 2853
 14520
 14521 8268 A9 0A			lda #$0A
 14522 826A 85 8E			sta @INTEGER.DIV.B
 14523 826C A9 00			lda #$00
 14524 826E 85 8F			sta @INTEGER.DIV.B+1
 14525 8270 85 90			sta @INTEGER.DIV.B+2
 14526 8272 85 91			sta @INTEGER.DIV.B+3
 14527 8274 AD 17 A1			lda SC
 14528 8277 85 86			sta @INTEGER.DIV.A
 14529 8279 AD 18 A1			lda SC+1
 14530 827C 85 87			sta @INTEGER.DIV.A+1
 14531 827E AD 19 A1			lda SC+2
 14532 8281 85 88			sta @INTEGER.DIV.A+2
 14533 8283 AD 1A A1			lda SC+3
 14534 8286 85 89			sta @INTEGER.DIV.A+3
 14535 8288 20 73 22			jsr @INTEGER.DIV
 14536 828B A9 0A			lda #$0A
 14537 828D 85 8E			sta @INTEGER.MOD.B
 14538 828F A9 00			lda #$00
 14539 8291 85 8F			sta @INTEGER.MOD.B+1
 14540 8293 85 90			sta @INTEGER.MOD.B+2
 14541 8295 85 91			sta @INTEGER.MOD.B+3
 14542 8297 20 90 22			jsr @INTEGER.MOD
 14543 829A A5 8A			lda @INTEGER.MOD.RESULT
 14544 829C 8D 1B A1			sta N1
 14545 829F A5 8B			lda @INTEGER.MOD.RESULT+1
 14546 82A1 8D 1C A1			sta N1+1
 14547 82A4 A5 8C			lda @INTEGER.MOD.RESULT+2
 14548 82A6 8D 1D A1			sta N1+2
 14549 82A9 A5 8D			lda @INTEGER.MOD.RESULT+3
 14550 82AB 8D 1E A1			sta N1+3
 14551
 14552 				; optimize OK (service.pas), line = 2854
 14553
 14554 82AE AD 13 A1			lda PX
 14555 82B1 18 69 1C			add #$1C
 14556 82B4 8D 0A A1			sta PUT_DIGIT.PX
 14557 82B7 AD 14 A1			lda PX+1
 14558 82BA 69 00			adc #$00
 14559 82BC 8D 0B A1			sta PUT_DIGIT.PX+1
 14560 82BF AD 15 A1			lda PY
 14561 82C2 8D 0C A1			sta PUT_DIGIT.PY
 14562 82C5 AD 16 A1			lda PY+1
 14563 82C8 8D 0D A1			sta PUT_DIGIT.PY+1
 14564 82CB AD 1B A1			lda N1
 14565 82CE 8D 0E A1			sta PUT_DIGIT.NUM
 14566 82D1 AD 1C A1			lda N1+1
 14567 82D4 8D 0F A1			sta PUT_DIGIT.NUM+1
 14568 82D7 20 53 7C			jsr PUT_DIGIT
 14569
 14570 				; optimize OK (service.pas), line = 2858
 14571
 14572 82DA AD 13 A1			lda PX
 14573 82DD 18 69 23			add #$23
 14574 82E0 8D 0A A1			sta PUT_DIGIT.PX
 14575 82E3 AD 14 A1			lda PX+1
 14576 82E6 69 00			adc #$00
 14577 82E8 8D 0B A1			sta PUT_DIGIT.PX+1
 14578 82EB AD 15 A1			lda PY
 14579 82EE 8D 0C A1			sta PUT_DIGIT.PY
 14580 82F1 AD 16 A1			lda PY+1
 14581 82F4 8D 0D A1			sta PUT_DIGIT.PY+1
 14582 82F7 A9 00			lda #$00
 14583 82F9 8D 0E A1			sta PUT_DIGIT.NUM
 14584 82FC 8D 0F A1			sta PUT_DIGIT.NUM+1
 14585 82FF 20 53 7C			jsr PUT_DIGIT
 14586
 14587 				; ------------------------------------------------------------
 14588
 14589 = A113			PX	= DATAORIGIN+$03AF
 14590 = A115			PY	= DATAORIGIN+$03B1
 14591 = A117			SC	= DATAORIGIN+$03B3
 14592 = A11B			N1	= DATAORIGIN+$03B7
 14593 = A11F			F	= DATAORIGIN+$03BB
 14594
 14595 = A113			@VarData	= PX
 14596 = 000D			@VarDataSize	= 13
 14597
 14598 8302			@exit
 14599 					.ifdef @new
 14600 					lda <@VarData
 14601 					sta :ztmp
 14602 					lda >@VarData
 14603 					ldy #@VarDataSize-1
 14604 					jmp @FreeMem
 14605 					els
 14606 8302 60				rts						; ret
 14607 					eif
 14608 				.endl
 14609
 14610 8303			.local	PLOT_LIVES					; PROCEDURE
 14611
 14612 				; optimize FAIL (0, service.pas), line = 2904
 14613
 14614 8303 AD 20 A1			lda LIVES
 14615 8306 D0 03			bne @+
 14616 8308 CE 21 A1			dec LIVES+1
 14617 				@
 14618 830B CE 20 A1			dec LIVES
 14619
 14620 				; optimize OK (service.pas), line = 2907
 14621
 14622 830E A9 00			lda #$00
 14623 8310 8D 24 A1			sta CN
 14624
 14625 8313			l_2CE7
 14626 				; --- ForToDoCondition
 14627 8313 AD 24 A1			lda CN
 14628 8316 C9 08			cmp #$08
 14629 8318 90 03 4C D3 85		jcs l_2CF5
 14630
 14631 				; optimize OK (service.pas), line = 2908
 14632
 14633 831D A9 00			lda #$00
 14634 831F 8D 23 A1			sta Y
 14635 8322 AC B2 9E			ldy MINIVAUS.HEIGHT
 14636 8325 88				dey
 14637 8326 8C 2A 83			sty @FORTMP_2D00_0
 14638
 14639 8329			l_2D03
 14640 				; --- ForToDoCondition
 14641 8329 A9 00			lda @FORTMP_2D00_0::#$00
 14642 832B CD 23 A1			cmp Y
 14643 832E B0 03 4C CB 85		jcc l_2D11
 14644
 14645 				; optimize OK (service.pas), line = 2909
 14646
 14647 8333 A9 00			lda #$00
 14648 8335 8D 22 A1			sta X
 14649 8338 AC B0 9E			ldy MINIVAUS.WIDTH
 14650 833B 88				dey
 14651 833C 8C 40 83			sty @FORTMP_2D1C_0
 14652
 14653 833F			l_2D1F
 14654 				; --- ForToDoCondition
 14655 833F A9 00			lda @FORTMP_2D1C_0::#$00
 14656 8341 CD 22 A1			cmp X
 14657 8344 B0 03 4C C3 85		jcc l_2D2D
 14658
 14659 				; optimize OK (service.pas), line = 2911
 14660
 14661 8349 AD 22 A1			lda X
 14662 834C 18 69 0B			add #$0B
 14663 834F 85 9F			sta :STACKORIGIN+9
 14664 8351 A9 00			lda #$00
 14665 8353 69 00			adc #$00
 14666 8355 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14667 8357 AD B0 9E			lda MINIVAUS.WIDTH
 14668 835A 85 8E			sta :ecx
 14669 835C AD B1 9E			lda MINIVAUS.WIDTH+1
 14670 835F 85 8F			sta :ecx+1
 14671 8361 AD 24 A1			lda CN
 14672 8364 85 86			sta :eax
 14673 8366 A9 00			lda #$00
 14674 8368 85 87			sta :eax+1
 14675 					.ifdef fmulinit
 14676 					fmulu_16
 14677 					els
 14678 836A 20 4F 23			imulCX_AL
 14679 					eif
 14680 836D A5 86			lda :eax
 14681 836F 18 65 9F			add :STACKORIGIN+9
 14682 8372 8D 29 A1			sta XL
 14683 8375 A5 87			lda :eax+1
 14684 8377 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14685 8379 8D 2A A1			sta XL+1
 14686
 14687 				; optimize OK (service.pas), line = 2912
 14688
 14689 837C AD 23 A1			lda Y
 14690 837F 18 69 C0			add #$C0
 14691 8382 8D 2B A1			sta YL
 14692 8385 A9 00			lda #$00
 14693 8387 69 00			adc #$00
 14694 8389 8D 2C A1			sta YL+1
 14695
 14696 				; optimize OK (service.pas), line = 2914
 14697
 14698 838C AC 29 A1			ldy XL
 14699 838F B9 00 C4			lda adr.MODX,y
 14700 8392 8D 25 A1			sta XP
 14701 8395 A9 00			lda #$00
 14702 8397 8D 26 A1			sta XP+1
 14703
 14704 				; optimize OK (service.pas), line = 2915
 14705
 14706 839A AC 2B A1			ldy YL
 14707 839D B9 00 C3			lda adr.MODY,y
 14708 83A0 85 86			sta :eax
 14709 83A2 A9 00			lda #$00
 14710 83A4 85 87			sta :eax+1
 14711 83A6 AD E5 9E			lda PATTERN.WIDTH
 14712 83A9 85 8E			sta :ecx
 14713 83AB AD E6 9E			lda PATTERN.WIDTH+1
 14714 83AE 85 8F			sta :ecx+1
 14715 					.ifdef fmulinit
 14716 					fmulu_16
 14717 					els
 14718 83B0 20 4F 23			imulCX_AL
 14719 					eif
 14720 83B3 A5 86			lda :eax
 14721 83B5 8D 27 A1			sta YP
 14722 83B8 A5 87			lda :eax+1
 14723 83BA 8D 28 A1			sta YP+1
 14724
 14725 				; optimize FAIL (1, service.pas), line = 2919
 14726
 14727 83BD E8				inx
 14728 83BE A0 01			ldy #1
 14729 83C0 AD 24 A1			lda CN
 14730 83C3 CD 20 A1			cmp LIVES
 14731 83C6 A9 00			lda #$00
 14732 83C8 ED 21 A1			sbc LIVES+1
 14733 83CB 50 02			svc
 14734 83CD 49 80			eor #$80
 14735 83CF 30 01			bmi @+
 14736 83D1 88				dey
 14737 				@
 14738 83D2 94 96			sty :STACKORIGIN,x
 14739 83D4 AD B4 9E			lda MINIVAUS.OFS
 14740 83D7 18 6D 22 A1			add X
 14741 83DB 85 9F			sta :STACKORIGIN+9
 14742 83DD AD B5 9E			lda MINIVAUS.OFS+1
 14743 83E0 69 00			adc #$00
 14744 83E2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14745 83E4 AD B6 9E			lda MINIVAUS.OFS+2
 14746 83E7 69 00			adc #$00
 14747 83E9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14748 83EB AD B7 9E			lda MINIVAUS.OFS+3
 14749 83EE 69 00			adc #$00
 14750 83F0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14751 83F2 AD B0 9E			lda MINIVAUS.WIDTH
 14752 83F5 85 8E			sta :ecx
 14753 83F7 AD B1 9E			lda MINIVAUS.WIDTH+1
 14754 83FA 85 8F			sta :ecx+1
 14755 83FC AD 23 A1			lda Y
 14756 83FF 85 86			sta :eax
 14757 8401 A9 00			lda #$00
 14758 8403 85 87			sta :eax+1
 14759 					.ifdef fmulinit
 14760 					fmulu_16
 14761 					els
 14762 8405 20 4F 23			imulCX_AL
 14763 					eif
 14764 8408 A5 9F			lda :STACKORIGIN+9
 14765 840A 18 65 86			add :eax
 14766 840D 8D 8C 9F			sta GETBYTE.SRC
 14767 8410 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14768 8412 65 87			adc :eax+1
 14769 8414 8D 8D 9F			sta GETBYTE.SRC+1
 14770 8417 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14771 8419 65 88			adc :eax+2
 14772 841B 8D 8E 9F			sta GETBYTE.SRC+2
 14773 841E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14774 8420 65 89			adc :eax+3
 14775 8422 8D 8F 9F			sta GETBYTE.SRC+3
 14776 8425 20 2A 3C			jsr GETBYTE
 14777 8428 CA				dex
 14778 8429 A0 01			ldy #1
 14779 842B AD 90 9F			lda GETBYTE.RESULT
 14780 842E D0 01			bne @+
 14781 8430 88				dey
 14782 				@
 14783 8431 98				tya
 14784 8432 35 97			and :STACKORIGIN+1,x
 14785 8434 F0 5D			jeq l_2D90
 14786
 14787 				; optimize OK (service.pas), line = 2922
 14788
 14789 8436 AD B4 9E			lda MINIVAUS.OFS
 14790 8439 18 6D 22 A1			add X
 14791 843D 85 9F			sta :STACKORIGIN+9
 14792 843F AD B5 9E			lda MINIVAUS.OFS+1
 14793 8442 69 00			adc #$00
 14794 8444 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14795 8446 AD B6 9E			lda MINIVAUS.OFS+2
 14796 8449 69 00			adc #$00
 14797 844B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14798 844D AD B7 9E			lda MINIVAUS.OFS+3
 14799 8450 69 00			adc #$00
 14800 8452 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14801 8454 AD B0 9E			lda MINIVAUS.WIDTH
 14802 8457 85 8E			sta :ecx
 14803 8459 AD B1 9E			lda MINIVAUS.WIDTH+1
 14804 845C 85 8F			sta :ecx+1
 14805 845E AD 23 A1			lda Y
 14806 8461 85 86			sta :eax
 14807 8463 A9 00			lda #$00
 14808 8465 85 87			sta :eax+1
 14809 					.ifdef fmulinit
 14810 					fmulu_16
 14811 					els
 14812 8467 20 4F 23			imulCX_AL
 14813 					eif
 14814 846A A5 9F			lda :STACKORIGIN+9
 14815 846C 18 65 86			add :eax
 14816 846F 8D 8C 9F			sta GETBYTE.SRC
 14817 8472 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14818 8474 65 87			adc :eax+1
 14819 8476 8D 8D 9F			sta GETBYTE.SRC+1
 14820 8479 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14821 847B 65 88			adc :eax+2
 14822 847D 8D 8E 9F			sta GETBYTE.SRC+2
 14823 8480 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14824 8482 65 89			adc :eax+3
 14825 8484 8D 8F 9F			sta GETBYTE.SRC+3
 14826 8487 20 2A 3C			jsr GETBYTE
 14827 848A AD 90 9F			lda GETBYTE.RESULT
 14828 848D 8D 2E A1			sta CL
 14829 				; optimize OK (service.pas), line = 2925
 14830 				; optimize OK (service.pas), line = 2928
 14831 8490 4C 2D 85			jmp l_2DD2
 14832 8493			l_2D90
 14833
 14834 				; optimize OK (service.pas), line = 2937
 14835
 14836 8493 AD 64 9E			lda PLAYSCREEN.OFS
 14837 8496 18 6D 29 A1			add XL
 14838 849A 85 9F			sta :STACKORIGIN+9
 14839 849C AD 65 9E			lda PLAYSCREEN.OFS+1
 14840 849F 6D 2A A1			adc XL+1
 14841 84A2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14842 84A4 AD 66 9E			lda PLAYSCREEN.OFS+2
 14843 84A7 69 00			adc #$00
 14844 84A9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14845 84AB AD 67 9E			lda PLAYSCREEN.OFS+3
 14846 84AE 69 00			adc #$00
 14847 84B0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14848 84B2 AC 2B A1			ldy YL
 14849 84B5 A5 9F			lda :STACKORIGIN+9
 14850 84B7 18 79 00 C0			add adr.ROW,y
 14851 84BB 8D 8C 9F			sta GETBYTE.SRC
 14852 84BE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14853 84C0 79 00 C1			adc adr.ROW+256,y
 14854 84C3 8D 8D 9F			sta GETBYTE.SRC+1
 14855 84C6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14856 84C8 69 00			adc #$00
 14857 84CA 8D 8E 9F			sta GETBYTE.SRC+2
 14858 84CD A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14859 84CF 69 00			adc #$00
 14860 84D1 8D 8F 9F			sta GETBYTE.SRC+3
 14861 84D4 20 2A 3C			jsr GETBYTE
 14862 84D7 AD 90 9F			lda GETBYTE.RESULT
 14863 84DA 29 80			and #$80
 14864 84DC 8D 2D A1			sta SHADOW
 14865
 14866 				; optimize OK (service.pas), line = 2940
 14867
 14868 84DF AD E9 9E			lda PATTERN.OFS
 14869 84E2 18 6D 25 A1			add XP
 14870 84E6 85 9F			sta :STACKORIGIN+9
 14871 84E8 AD EA 9E			lda PATTERN.OFS+1
 14872 84EB 6D 26 A1			adc XP+1
 14873 84EE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14874 84F0 AD EB 9E			lda PATTERN.OFS+2
 14875 84F3 69 00			adc #$00
 14876 84F5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14877 84F7 AD EC 9E			lda PATTERN.OFS+3
 14878 84FA 69 00			adc #$00
 14879 84FC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14880 84FE A5 9F			lda :STACKORIGIN+9
 14881 8500 18 6D 27 A1			add YP
 14882 8504 8D 8C 9F			sta GETBYTE.SRC
 14883 8507 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14884 8509 6D 28 A1			adc YP+1
 14885 850C 8D 8D 9F			sta GETBYTE.SRC+1
 14886 850F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14887 8511 69 00			adc #$00
 14888 8513 8D 8E 9F			sta GETBYTE.SRC+2
 14889 8516 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14890 8518 69 00			adc #$00
 14891 851A 8D 8F 9F			sta GETBYTE.SRC+3
 14892 851D 20 2A 3C			jsr GETBYTE
 14893 8520 E8				inx
 14894 8521 AD 90 9F			lda GETBYTE.RESULT
 14895 8524 29 7F			and #$7F
 14896 8526 0D 2D A1			ora SHADOW
 14897 8529 8D 2E A1			sta CL
 14898 852C CA				dex
 14899 852D			l_2DD2
 14900
 14901 				; optimize OK (service.pas), line = 2943
 14902
 14903 852D AD 29 A1			lda XL
 14904 8530 85 A0			sta :STACKORIGIN+10
 14905 8532 A9 50			lda #$50
 14906 8534 18 6D 2A A1			add XL+1
 14907 8538 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14908 853A A9 00			lda #$00
 14909 853C 69 00			adc #$00
 14910 853E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14911 8540 A9 00			lda #$00
 14912 8542 69 00			adc #$00
 14913 8544 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14914 8546 AC 2B A1			ldy YL
 14915 8549 A5 A0			lda :STACKORIGIN+10
 14916 854B 18 79 00 C0			add adr.ROW,y
 14917 854F 8D 87 9F			sta PUTBYTE.DST
 14918 8552 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14919 8554 79 00 C1			adc adr.ROW+256,y
 14920 8557 8D 88 9F			sta PUTBYTE.DST+1
 14921 855A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14922 855C 69 00			adc #$00
 14923 855E 8D 89 9F			sta PUTBYTE.DST+2
 14924 8561 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14925 8563 69 00			adc #$00
 14926 8565 8D 8A 9F			sta PUTBYTE.DST+3
 14927 8568 AD 2E A1			lda CL
 14928 856B 8D 8B 9F			sta PUTBYTE.V
 14929 856E 20 02 3C			jsr PUTBYTE
 14930
 14931 				; optimize OK (service.pas), line = 2946
 14932
 14933 8571 AD 64 9E			lda PLAYSCREEN.OFS
 14934 8574 18 6D 29 A1			add XL
 14935 8578 85 A0			sta :STACKORIGIN+10
 14936 857A AD 65 9E			lda PLAYSCREEN.OFS+1
 14937 857D 6D 2A A1			adc XL+1
 14938 8580 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14939 8582 AD 66 9E			lda PLAYSCREEN.OFS+2
 14940 8585 69 00			adc #$00
 14941 8587 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14942 8589 AD 67 9E			lda PLAYSCREEN.OFS+3
 14943 858C 69 00			adc #$00
 14944 858E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14945 8590 AC 2B A1			ldy YL
 14946 8593 A5 A0			lda :STACKORIGIN+10
 14947 8595 18 79 00 C0			add adr.ROW,y
 14948 8599 8D 87 9F			sta PUTBYTE.DST
 14949 859C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14950 859E 79 00 C1			adc adr.ROW+256,y
 14951 85A1 8D 88 9F			sta PUTBYTE.DST+1
 14952 85A4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14953 85A6 69 00			adc #$00
 14954 85A8 8D 89 9F			sta PUTBYTE.DST+2
 14955 85AB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14956 85AD 69 00			adc #$00
 14957 85AF 8D 8A 9F			sta PUTBYTE.DST+3
 14958 85B2 AD 2E A1			lda CL
 14959 85B5 8D 8B 9F			sta PUTBYTE.V
 14960 85B8 20 02 3C			jsr PUTBYTE
 14961
 14962 				; --- ForToDoEpilog
 14963 85BB EE 22 A1			inc X
 14964 85BE F0 03 4C 3F 83		jne l_2D1F
 14965 85C3			l_2D2D
 14966
 14967 				; --- ForToDoEpilog
 14968 85C3 EE 23 A1			inc Y
 14969 85C6 F0 03 4C 29 83		jne l_2D03
 14970 85CB			l_2D11
 14971
 14972 				; --- ForToDoEpilog
 14973 85CB EE 24 A1			inc CN
 14974 85CE F0 03 4C 13 83		jne l_2CE7
 14975 85D3			l_2CF5
 14976
 14977 				; ------------------------------------------------------------
 14978
 14979 = A120			LIVES	= DATAORIGIN+$03BC
 14980 = 000B			XLIVES	= $0B
 14981 = 00C0			YLIVES	= $C0
 14982 = A122			X	= DATAORIGIN+$03BE
 14983 = A123			Y	= DATAORIGIN+$03BF
 14984 = A124			CN	= DATAORIGIN+$03C0
 14985 = A125			XP	= DATAORIGIN+$03C1
 14986 = A127			YP	= DATAORIGIN+$03C3
 14987 = A129			XL	= DATAORIGIN+$03C5
 14988 = A12B			YL	= DATAORIGIN+$03C7
 14989 = A12D			SHADOW	= DATAORIGIN+$03C9
 14990 = A12E			CL	= DATAORIGIN+$03CA
 14991
 14992 = A120			@VarData	= LIVES
 14993 = 000F			@VarDataSize	= 15
 14994
 14995 85D3			@exit
 14996 					.ifdef @new
 14997 					lda <@VarData
 14998 					sta :ztmp
 14999 					lda >@VarData
 15000 					ldy #@VarDataSize-1
 15001 					jmp @FreeMem
 15002 					els
 15003 85D3 60				rts						; ret
 15004 					eif
 15005 				.endl
 15006
 15007 85D4			.local	PLACE_FIRE					; PROCEDURE
 15008
 15009 				; optimize OK (service.pas), line = 2957
 15010
 15011 85D4 AC 4F 9F			ldy FIRE.Y
 15012 85D7 AD 4E 9F			lda FIRE.X
 15013 85DA 18 79 00 C0			add adr.ROW,y
 15014 85DE 8D 57 9F			sta HLP
 15015 85E1 A9 00			lda #$00
 15016 85E3 79 00 C1			adc adr.ROW+256,y
 15017 85E6 8D 58 9F			sta HLP+1
 15018
 15019 				; optimize OK (service.pas), line = 2959
 15020
 15021 85E9 AD 57 9F			lda HLP
 15022 85EC 8D 71 9F			sta BLITZERO.DST
 15023 85EF A9 50			lda #$50
 15024 85F1 18 6D 58 9F			add HLP+1
 15025 85F5 8D 72 9F			sta BLITZERO.DST+1
 15026 85F8 A9 00			lda #$00
 15027 85FA 69 00			adc #$00
 15028 85FC 8D 73 9F			sta BLITZERO.DST+2
 15029 85FF A9 00			lda #$00
 15030 8601 69 00			adc #$00
 15031 8603 8D 74 9F			sta BLITZERO.DST+3
 15032 8606 AD CC 9E			lda SHOOTS.OFS
 15033 8609 8D 6D 9F			sta BLITZERO.SRC
 15034 860C AD CD 9E			lda SHOOTS.OFS+1
 15035 860F 8D 6E 9F			sta BLITZERO.SRC+1
 15036 8612 AD CE 9E			lda SHOOTS.OFS+2
 15037 8615 8D 6F 9F			sta BLITZERO.SRC+2
 15038 8618 AD CF 9E			lda SHOOTS.OFS+3
 15039 861B 8D 70 9F			sta BLITZERO.SRC+3
 15040 861E AD C8 9E			lda SHOOTS.WIDTH
 15041 8621 8D 75 9F			sta BLITZERO.W
 15042 8624 AD C9 9E			lda SHOOTS.WIDTH+1
 15043 8627 8D 76 9F			sta BLITZERO.W+1
 15044 862A AD CA 9E			lda SHOOTS.HEIGHT
 15045 862D 8D 77 9F			sta BLITZERO.H
 15046 8630 20 D9 3A			jsr BLITZERO
 15047
 15048 8633			@exit
 15049 					.ifdef @new
 15050 					lda <@VarData
 15051 					sta :ztmp
 15052 					lda >@VarData
 15053 					ldy #@VarDataSize-1
 15054 					jmp @FreeMem
 15055 					els
 15056 8633 60				rts						; ret
 15057 					eif
 15058 				.endl
 15059
 15060 8634			.local	REMOVE_FIRE					; PROCEDURE
 15061
 15062 				; optimize OK (service.pas), line = 2977
 15063
 15064 8634 AC 4F 9F			ldy FIRE.Y
 15065 8637 AD 4E 9F			lda FIRE.X
 15066 863A 18 79 00 C0			add adr.ROW,y
 15067 863E 8D 57 9F			sta HLP
 15068 8641 A9 00			lda #$00
 15069 8643 79 00 C1			adc adr.ROW+256,y
 15070 8646 8D 58 9F			sta HLP+1
 15071
 15072 				; optimize OK (service.pas), line = 2979
 15073
 15074 8649 AD 57 9F			lda HLP
 15075 864C 8D 66 9F			sta BLITBOX.DST
 15076 864F A9 50			lda #$50
 15077 8651 18 6D 58 9F			add HLP+1
 15078 8655 8D 67 9F			sta BLITBOX.DST+1
 15079 8658 A9 00			lda #$00
 15080 865A 69 00			adc #$00
 15081 865C 8D 68 9F			sta BLITBOX.DST+2
 15082 865F A9 00			lda #$00
 15083 8661 69 00			adc #$00
 15084 8663 8D 69 9F			sta BLITBOX.DST+3
 15085 8666 AD 64 9E			lda PLAYSCREEN.OFS
 15086 8669 18 6D 57 9F			add HLP
 15087 866D 8D 62 9F			sta BLITBOX.SRC
 15088 8670 AD 65 9E			lda PLAYSCREEN.OFS+1
 15089 8673 6D 58 9F			adc HLP+1
 15090 8676 8D 63 9F			sta BLITBOX.SRC+1
 15091 8679 AD 66 9E			lda PLAYSCREEN.OFS+2
 15092 867C 69 00			adc #$00
 15093 867E 8D 64 9F			sta BLITBOX.SRC+2
 15094 8681 AD 67 9E			lda PLAYSCREEN.OFS+3
 15095 8684 69 00			adc #$00
 15096 8686 8D 65 9F			sta BLITBOX.SRC+3
 15097 8689 AD C8 9E			lda SHOOTS.WIDTH
 15098 868C 8D 6A 9F			sta BLITBOX.W
 15099 868F AD C9 9E			lda SHOOTS.WIDTH+1
 15100 8692 8D 6B 9F			sta BLITBOX.W+1
 15101 8695 AD CA 9E			lda SHOOTS.HEIGHT
 15102 8698 8D 6C 9F			sta BLITBOX.H
 15103 869B 20 58 3A			jsr BLITBOX
 15104
 15105 869E			@exit
 15106 					.ifdef @new
 15107 					lda <@VarData
 15108 					sta :ztmp
 15109 					lda >@VarData
 15110 					ldy #@VarDataSize-1
 15111 					jmp @FreeMem
 15112 					els
 15113 869E 60				rts						; ret
 15114 					eif
 15115 				.endl
 15116
 15117 869F			.local	CHECK_FIRE					; PROCEDURE
 15118
 15119 				; optimize OK (service.pas), line = 2995
 15120
 15121 869F AD 51 9F			lda FIRE.AVL
 15122 86A2 D0 03 4C 01 88		jeq l_2E82
 15123
 15124 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2997
 15125
 15126 86A7 20 4F 3A			jsr MOUSECLICK
 15127 86AA E8				inx
 15128 86AB E8				inx
 15129 86AC A0 01			ldy #1
 15130 86AE AD 61 9F			lda MOUSECLICK.RESULT
 15131 86B1 C9 01			cmp #$01
 15132 86B3 F0 01			beq @+
 15133 86B5 88				dey
 15134 				@
 15135 86B6 98				tya
 15136 86B7 2D 51 9F			and FIRE.AVL
 15137 86BA 95 95			sta :STACKORIGIN-1,x
 15138 86BC CA				dex
 15139 86BD CA				dex
 15140 86BE A0 01			ldy #1
 15141 86C0 AD 50 9F			lda FIRE.SHOT
 15142 86C3 F0 01			beq @+
 15143 86C5 88				dey
 15144 				@
 15145 86C6 98				tya
 15146 86C7 35 97			and :STACKORIGIN+1,x
 15147 86C9 F0 3A			jeq l_2EA2
 15148
 15149 				; optimize OK (service.pas), line = 2999
 15150
 15151 86CB AD E0 9E			lda VAUS.WIDTH
 15152 86CE 38 ED C8 9E			sub SHOOTS.WIDTH
 15153 86D2 4A				lsr @
 15154 86D3 18 6D D8 9E			add VAUS.X
 15155 86D7 8D 4E 9F			sta FIRE.X
 15156
 15157 				; optimize OK (service.pas), line = 3000
 15158
 15159 86DA AD D9 9E			lda VAUS.Y
 15160 86DD 38 ED CA 9E			sub SHOOTS.HEIGHT
 15161 86E1 8D 4F 9F			sta FIRE.Y
 15162
 15163 				; optimize OK (service.pas), line = 3001
 15164
 15165 86E4 A9 01			lda #$01
 15166 86E6 8D 50 9F			sta FIRE.SHOT
 15167
 15168 				; optimize OK (service.pas), line = 3002
 15169
 15170 86E9 A9 00			lda #$00
 15171 86EB 8D 52 9F			sta FIRE.NW
 15172
 15173 				; optimize OK (service.pas), line = 3003
 15174
 15175 86EE A9 BC			lda #$BC
 15176 86F0 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 15177 86F3 A9 02			lda #$02
 15178 86F5 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 15179 86F8 A9 05			lda #$05
 15180 86FA 8D 40 9E			sta BALL_BLOCK_SOUND.B
 15181 86FD A9 00			lda #$00
 15182 86FF 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 15183 8702 20 3F 38			jsr BALL_BLOCK_SOUND
 15184 8705			l_2EA2
 15185
 15186 				; optimize OK (service.pas), line = 3006
 15187
 15188 8705 AD 50 9F			lda FIRE.SHOT
 15189 8708 D0 03 4C 01 88		jeq l_2EDC
 15190
 15191 				; optimize OK (service.pas), line = 3008
 15192
 15193 870D AD 52 9F			lda FIRE.NW
 15194 8710 F0 03			jeq l_2EE9
 15195 8712 20 34 86			jsr REMOVE_FIRE
 15196 8715			l_2EE9
 15197
 15198 				; optimize OK (service.pas), line = 3009
 15199
 15200 8715 A9 01			lda #$01
 15201 8717 8D 52 9F			sta FIRE.NW
 15202
 15203 				; optimize OK (service.pas), line = 3011
 15204
 15205 871A AD 4F 9F			lda FIRE.Y
 15206 871D 38 E9 04			sub #$04
 15207 8720 8D 4F 9F			sta FIRE.Y
 15208
 15209 				; optimize OK (service.pas), line = 3012
 15210
 15211 8723 C9 16			cmp #$16
 15212 8725 B0 08			jcs l_2F04
 15213 8727 A9 00			lda #$00
 15214 8729 8D 50 9F			sta FIRE.SHOT
 15215 872C 4C 01 88			jmp l_2F12
 15216 872F			l_2F04
 15217
 15218 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3015
 15219
 15220 872F 20 D4 85			jsr PLACE_FIRE
 15221
 15222 				; optimize OK (service.pas), line = 3017
 15223
 15224 8732 AD 4F 9F			lda FIRE.Y
 15225 8735 38 E9 16			sub #$16
 15226 8738 10 03 4C 01 88		jmi l_2F39
 15227 873D AD 4F 9F			lda FIRE.Y
 15228 8740 38 E9 16			sub #$16
 15229 8743 85 A0			sta :STACKORIGIN+10
 15230 8745 A9 00			lda #$00
 15231 8747 E9 00			sbc #$00
 15232 8749 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15233 874B A5 A0			lda :STACKORIGIN+10
 15234 874D C9 78			cmp #$78
 15235 874F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15236 8751 E9 00			sbc #$00
 15237 8753 50 02			svc
 15238 8755 49 80			eor #$80
 15239 8757 30 03 4C 01 88		jpl l_2F39
 15240
 15241 				; optimize OK (service.pas), line = 3019
 15242
 15243 875C AD 4E 9F			lda FIRE.X
 15244 875F 38 E9 09			sub #$09
 15245 8762 4A				lsr @
 15246 8763 4A				lsr @
 15247 8764 4A				lsr @
 15248 8765 4A				lsr @
 15249 8766 8D 31 A1			sta X1
 15250 8769 A9 00			lda #$00
 15251 876B 8D 32 A1			sta X1+1
 15252
 15253 				; optimize OK (service.pas), line = 3020
 15254
 15255 876E AD 4F 9F			lda FIRE.Y
 15256 8771 38 E9 16			sub #$16
 15257 8774 4A				lsr @
 15258 8775 4A				lsr @
 15259 8776 4A				lsr @
 15260 8777 8D 35 A1			sta Y1
 15261 877A A9 00			lda #$00
 15262 877C 8D 36 A1			sta Y1+1
 15263
 15264 				; optimize OK (service.pas), line = 3022
 15265
 15266 877F AD 4E 9F			lda FIRE.X
 15267 8782 18 6D C8 9E			add SHOOTS.WIDTH
 15268 8786 38 E9 09			sub #$09
 15269 8789 4A				lsr @
 15270 878A 4A				lsr @
 15271 878B 4A				lsr @
 15272 878C 4A				lsr @
 15273 878D 8D 33 A1			sta X2
 15274 8790 A9 00			lda #$00
 15275 8792 8D 34 A1			sta X2+1
 15276
 15277 				; optimize OK (service.pas), line = 3023
 15278
 15279 8795 AD 35 A1			lda Y1
 15280 8798 8D 37 A1			sta Y2
 15281 879B AD 36 A1			lda Y1+1
 15282 879E 8D 38 A1			sta Y2+1
 15283
 15284 				; optimize OK (service.pas), line = 3025
 15285
 15286 87A1 AD 35 A1			lda Y1
 15287 87A4 0A				asl @
 15288 87A5 0A				asl @
 15289 87A6 0A				asl @
 15290 87A7 0A				asl @
 15291 87A8 18 6D 31 A1			add X1
 15292 87AC A8				tay
 15293 87AD B9 00 DB			lda adr.WALL,y
 15294 87B0 D0 11			jne l_2FA2x
 15295 87B2 AD 37 A1			lda Y2
 15296 87B5 0A				asl @
 15297 87B6 0A				asl @
 15298 87B7 0A				asl @
 15299 87B8 0A				asl @
 15300 87B9 18 6D 33 A1			add X2
 15301 87BD A8				tay
 15302 87BE B9 00 DB			lda adr.WALL,y
 15303 87C1 F0 3E			jeq l_2FA2
 15304 87C3			l_2FA2x
 15305
 15306 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3027
 15307
 15308 87C3 20 34 86			jsr REMOVE_FIRE
 15309
 15310 				; optimize OK (service.pas), line = 3028
 15311
 15312 87C6 A9 00			lda #$00
 15313 87C8 8D 50 9F			sta FIRE.SHOT
 15314
 15315 				; optimize OK (service.pas), line = 3030
 15316
 15317 87CB AD 31 A1			lda X1
 15318 87CE 8D 99 A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15319 87D1 AD 32 A1			lda X1+1
 15320 87D4 8D 9A A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15321 87D7 AD 35 A1			lda Y1
 15322 87DA 8D 9B A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15323 87DD AD 36 A1			lda Y1+1
 15324 87E0 8D 9C A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15325 87E3 20 65 67			jsr SHOOT_BLOCK_WITH_FIRE
 15326
 15327 				; optimize OK (service.pas), line = 3031
 15328
 15329 87E6 AD 33 A1			lda X2
 15330 87E9 8D 99 A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15331 87EC AD 34 A1			lda X2+1
 15332 87EF 8D 9A A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15333 87F2 AD 37 A1			lda Y2
 15334 87F5 8D 9B A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15335 87F8 AD 38 A1			lda Y2+1
 15336 87FB 8D 9C A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15337 87FE 20 65 67			jsr SHOOT_BLOCK_WITH_FIRE
 15338 8801			l_2F12
 15339 8801			l_2FA2
 15340 8801			l_2F39
 15341 8801			l_2EDC
 15342 8801			l_2E82
 15343
 15344 				; ------------------------------------------------------------
 15345
 15346 = A131			X1	= DATAORIGIN+$03CD
 15347 = A133			X2	= DATAORIGIN+$03CF
 15348 = A135			Y1	= DATAORIGIN+$03D1
 15349 = A137			Y2	= DATAORIGIN+$03D3
 15350
 15351 = A131			@VarData	= X1
 15352 = 0008			@VarDataSize	= 8
 15353
 15354 8801			@exit
 15355 					.ifdef @new
 15356 					lda <@VarData
 15357 					sta :ztmp
 15358 					lda >@VarData
 15359 					ldy #@VarDataSize-1
 15360 					jmp @FreeMem
 15361 					els
 15362 8801 60				rts						; ret
 15363 					eif
 15364 				.endl
 15365
 15366 8802			.local	REMOVE_FLUX					; PROCEDURE
 15367
 15368 				; optimize OK (service.pas), line = 3043
 15369
 15370 8802 AD B0 C0			lda adr.ROW+$B0
 15371 8805 18 69 D9			add #$D9
 15372 8808 8D 57 9F			sta HLP
 15373 880B AD B0 C1			lda adr.ROW+256+$B0
 15374 880E 69 00			adc #$00
 15375 8810 8D 58 9F			sta HLP+1
 15376
 15377 				; optimize OK (service.pas), line = 3045
 15378
 15379 8813 AD 57 9F			lda HLP
 15380 8816 8D 66 9F			sta BLITBOX.DST
 15381 8819 A9 50			lda #$50
 15382 881B 18 6D 58 9F			add HLP+1
 15383 881F 8D 67 9F			sta BLITBOX.DST+1
 15384 8822 A9 00			lda #$00
 15385 8824 69 00			adc #$00
 15386 8826 8D 68 9F			sta BLITBOX.DST+2
 15387 8829 A9 00			lda #$00
 15388 882B 69 00			adc #$00
 15389 882D 8D 69 9F			sta BLITBOX.DST+3
 15390 8830 AD 64 9E			lda PLAYSCREEN.OFS
 15391 8833 18 6D 57 9F			add HLP
 15392 8837 8D 62 9F			sta BLITBOX.SRC
 15393 883A AD 65 9E			lda PLAYSCREEN.OFS+1
 15394 883D 6D 58 9F			adc HLP+1
 15395 8840 8D 63 9F			sta BLITBOX.SRC+1
 15396 8843 AD 66 9E			lda PLAYSCREEN.OFS+2
 15397 8846 69 00			adc #$00
 15398 8848 8D 64 9F			sta BLITBOX.SRC+2
 15399 884B AD 67 9E			lda PLAYSCREEN.OFS+3
 15400 884E 69 00			adc #$00
 15401 8850 8D 65 9F			sta BLITBOX.SRC+3
 15402 8853 A9 08			lda #$08
 15403 8855 8D 6A 9F			sta BLITBOX.W
 15404 8858 A9 00			lda #$00
 15405 885A 8D 6B 9F			sta BLITBOX.W+1
 15406 885D A9 14			lda #$14
 15407 885F 8D 6C 9F			sta BLITBOX.H
 15408 8862 20 58 3A			jsr BLITBOX
 15409
 15410 8865			@exit
 15411 					.ifdef @new
 15412 					lda <@VarData
 15413 					sta :ztmp
 15414 					lda >@VarData
 15415 					ldy #@VarDataSize-1
 15416 					jmp @FreeMem
 15417 					els
 15418 8865 60				rts						; ret
 15419 					eif
 15420 				.endl
 15421
 15422 8866			.local	CHECK_FLUX					; PROCEDURE
 15423
 15424 				; optimize OK (service.pas), line = 3059
 15425
 15426 8866 AD 55 9F			lda SCRFLUXCNT
 15427 8869 8D 3A A1			sta FX
 15428
 15429 				; optimize OK (service.pas), line = 3061
 15430
 15431 886C AD 54 9F			lda SCRFLUX
 15432 886F D0 03 4C 02 89		jeq l_2FED
 15433
 15434 				; optimize OK (service.pas), line = 3064
 15435
 15436 8874 A9 00			lda #$00
 15437 8876 8D 39 A1			sta Y
 15438
 15439 8879			l_2FF7
 15440 				; --- ForToDoCondition
 15441 8879 AC 39 A1			ldy Y
 15442 887C C0 14			cpy #$14
 15443 887E B0 73			jcs l_3005
 15444
 15445 				; optimize OK (service.pas), line = 3066
 15446
 15447 8880 A9 D9			lda #$D9
 15448 8882 79 B0 C0			adc adr.ROW+$B0,y
 15449 8885 8D 81 9F			sta BLITROW.DST
 15450 8888 A9 50			lda #$50
 15451 888A 79 B0 C1			adc adr.ROW+256+$B0,y
 15452 888D 8D 82 9F			sta BLITROW.DST+1
 15453 8890 A9 00			lda #$00
 15454 8892 69 00			adc #$00
 15455 8894 8D 83 9F			sta BLITROW.DST+2
 15456 8897 A9 00			lda #$00
 15457 8899 69 00			adc #$00
 15458 889B 8D 84 9F			sta BLITROW.DST+3
 15459 889E AD 39 A1			lda Y
 15460 88A1 18 6D 3A A1			add FX
 15461 88A5 85 A2			sta :STACKORIGIN+12
 15462 88A7 A9 00			lda #$00
 15463 88A9 69 00			adc #$00
 15464 88AB 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15465 88AD A9 00			lda #$00
 15466 88AF 06 A2			asl :STACKORIGIN+12
 15467 88B1 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15468 88B3 2A				rol @
 15469 88B4 06 A2			asl :STACKORIGIN+12
 15470 88B6 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15471 88B8 2A				rol @
 15472 88B9 06 A2			asl :STACKORIGIN+12
 15473 88BB 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15474 88BD 2A				rol @
 15475 88BE 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15476 88C0 AD D4 9E			lda FLUX.OFS
 15477 88C3 18 65 A2			add :STACKORIGIN+12
 15478 88C6 8D 7D 9F			sta BLITROW.SRC
 15479 88C9 AD D5 9E			lda FLUX.OFS+1
 15480 88CC 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15481 88CE 8D 7E 9F			sta BLITROW.SRC+1
 15482 88D1 AD D6 9E			lda FLUX.OFS+2
 15483 88D4 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15484 88D6 8D 7F 9F			sta BLITROW.SRC+2
 15485 88D9 AD D7 9E			lda FLUX.OFS+3
 15486 88DC 69 00			adc #$00
 15487 88DE 8D 80 9F			sta BLITROW.SRC+3
 15488 88E1 A9 08			lda #$08
 15489 88E3 8D 85 9F			sta BLITROW.SIZE
 15490 88E6 A9 00			lda #$00
 15491 88E8 8D 86 9F			sta BLITROW.SIZE+1
 15492 88EB 20 90 3B			jsr BLITROW
 15493
 15494 				; --- ForToDoEpilog
 15495 88EE EE 39 A1			inc Y
 15496 88F1 D0 86			jne l_2FF7
 15497 88F3			l_3005
 15498
 15499 				; optimize FAIL (0, service.pas), line = 3068
 15500
 15501 88F3 EE 55 9F			inc SCRFLUXCNT
 15502
 15503 				; optimize OK (service.pas), line = 3069
 15504
 15505 88F6 AD 55 9F			lda SCRFLUXCNT
 15506 88F9 C9 15			cmp #$15
 15507 88FB 90 05			jcc l_3044
 15508 88FD A9 00			lda #$00
 15509 88FF 8D 55 9F			sta SCRFLUXCNT
 15510 8902			l_3044
 15511 8902			l_2FED
 15512
 15513 				; ------------------------------------------------------------
 15514
 15515 = A139			Y	= DATAORIGIN+$03D5
 15516 = A13A			FX	= DATAORIGIN+$03D6
 15517
 15518 = A139			@VarData	= Y
 15519 = 0002			@VarDataSize	= 2
 15520
 15521 8902			@exit
 15522 					.ifdef @new
 15523 					lda <@VarData
 15524 					sta :ztmp
 15525 					lda >@VarData
 15526 					ldy #@VarDataSize-1
 15527 					jmp @FreeMem
 15528 					els
 15529 8902 60				rts						; ret
 15530 					eif
 15531 				.endl
 15532
 15533 8903			.local	VAUS_OUT					; PROCEDURE
 15534
 15535 				; optimize FAIL ('NOSOUND', service.pas), line = 3077
 15536
 15537 8903 20 52 3C			jsr NOSOUND
 15538
 15539 				; optimize OK (service.pas), line = 3079
 15540
 15541 8906 AD 34 9F			lda CUR_PLAYER
 15542 8909 0A				asl @
 15543 890A 0A				asl @
 15544 890B A8				tay
 15545 890C B9 19 9F			lda adr.SCORE.PLAYER,y
 15546 890F 18 69 10			add #$10
 15547 8912 99 19 9F			sta adr.SCORE.PLAYER,y
 15548 8915 B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 15549 8918 69 27			adc #$27
 15550 891A 99 1A 9F			sta adr.SCORE.PLAYER+1,y
 15551 891D B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 15552 8920 69 00			adc #$00
 15553 8922 99 1B 9F			sta adr.SCORE.PLAYER+2,y
 15554 8925 B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 15555 8928 69 00			adc #$00
 15556 892A 99 1C 9F			sta adr.SCORE.PLAYER+3,y
 15557
 15558 				; optimize OK (service.pas), line = 3080
 15559
 15560 892D A9 00			lda #$00
 15561 892F 8D 17 9F			sta REMAIN_BLK
 15562
 15563 				; optimize OK (service.pas), line = 3082
 15564
 15565 8932 AD D8 9E			lda VAUS.X
 15566 8935 8D 3F A1			sta Z
 15567 8938 A9 00			lda #$00
 15568 893A 8D 40 A1			sta Z+1
 15569
 15570 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3084
 15571
 15572 893D 20 E6 43			jsr WAIT_VBL
 15573
 15574 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3085
 15575
 15576 8940 20 BE 51			jsr REMOVE_VAUS
 15577
 15578 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3086
 15579
 15580 8943 20 35 52			jsr PLACE_VAUS
 15581
 15582 				; optimize OK (service.pas), line = 3088
 15583
 15584 8946 AD 3F A1			lda Z
 15585 8949 8D 3B A1			sta X
 15586 894C AD 40 A1			lda Z+1
 15587 894F 8D 3C A1			sta X+1
 15588 8952 AD 3F A1			lda Z
 15589 8955 18 69 2C			add #$2C
 15590 8958 8D 6B 89			sta @FORTMP_306F_0
 15591 895B AD 40 A1			lda Z+1
 15592 895E 69 00			adc #$00
 15593 8960 8D 64 89			sta @FORTMP_306F_1
 15594
 15595 8963			l_3072
 15596 				; --- ForToDoCondition
 15597 8963 A9 00			lda @FORTMP_306F_1::#$00
 15598 8965 CD 3C A1			cmp X+1
 15599 8968 D0 05			bne @+
 15600 896A A9 00			lda @FORTMP_306F_0::#$00
 15601 896C CD 3B A1			cmp X
 15602 				@
 15603 896F B0 03 4C 08 8A		jcc l_307E
 15604
 15605 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3090
 15606
 15607 8974 20 E6 43			jsr WAIT_VBL
 15608
 15609 				; optimize OK (service.pas), line = 3092
 15610
 15611 8977 AD D8 9E			lda VAUS.X
 15612 897A 8D DA 9E			sta VAUS.OLDX
 15613 897D A9 00			lda #$00
 15614 897F 8D DB 9E			sta VAUS.OLDX+1
 15615
 15616 				; optimize OK (service.pas), line = 3093
 15617
 15618 8982 AD 3B A1			lda X
 15619 8985 8D D8 9E			sta VAUS.X
 15620
 15621 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3094
 15622
 15623 8988 20 BE 51			jsr REMOVE_VAUS
 15624
 15625 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3095
 15626
 15627 898B 20 66 88			jsr CHECK_FLUX
 15628
 15629 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3096
 15630
 15631 898E 20 35 52			jsr PLACE_VAUS
 15632
 15633 				; optimize OK (service.pas), line = 3098
 15634
 15635 8991 AC D9 9E			ldy VAUS.Y
 15636 8994 B9 00 C0			lda adr.ROW,y
 15637 8997 18 69 E1			add #$E1
 15638 899A 8D 57 9F			sta HLP
 15639 899D B9 00 C1			lda adr.ROW+256,y
 15640 89A0 69 00			adc #$00
 15641 89A2 8D 58 9F			sta HLP+1
 15642
 15643 				; optimize OK (service.pas), line = 3100
 15644
 15645 89A5 AD 57 9F			lda HLP
 15646 89A8 8D 66 9F			sta BLITBOX.DST
 15647 89AB A9 50			lda #$50
 15648 89AD 18 6D 58 9F			add HLP+1
 15649 89B1 8D 67 9F			sta BLITBOX.DST+1
 15650 89B4 A9 00			lda #$00
 15651 89B6 69 00			adc #$00
 15652 89B8 8D 68 9F			sta BLITBOX.DST+2
 15653 89BB A9 00			lda #$00
 15654 89BD 69 00			adc #$00
 15655 89BF 8D 69 9F			sta BLITBOX.DST+3
 15656 89C2 AD 64 9E			lda PLAYSCREEN.OFS
 15657 89C5 18 6D 57 9F			add HLP
 15658 89C9 8D 62 9F			sta BLITBOX.SRC
 15659 89CC AD 65 9E			lda PLAYSCREEN.OFS+1
 15660 89CF 6D 58 9F			adc HLP+1
 15661 89D2 8D 63 9F			sta BLITBOX.SRC+1
 15662 89D5 AD 66 9E			lda PLAYSCREEN.OFS+2
 15663 89D8 69 00			adc #$00
 15664 89DA 8D 64 9F			sta BLITBOX.SRC+2
 15665 89DD AD 67 9E			lda PLAYSCREEN.OFS+3
 15666 89E0 69 00			adc #$00
 15667 89E2 8D 65 9F			sta BLITBOX.SRC+3
 15668 89E5 A9 28			lda #$28
 15669 89E7 8D 6A 9F			sta BLITBOX.W
 15670 89EA A9 00			lda #$00
 15671 89EC 8D 6B 9F			sta BLITBOX.W+1
 15672 89EF AD E1 9E			lda VAUS.HEIGHT
 15673 89F2 8D 6C 9F			sta BLITBOX.H
 15674 89F5 20 58 3A			jsr BLITBOX
 15675
 15676 				; --- ForToDoEpilog
 15677 89F8 EE 3B A1			inc X
 15678 89FB F0 03 4C 63 89		jne l_3072
 15679 8A00 EE 3C A1			inc X+1
 15680 8A03 F0 03 4C 63 89		jne l_3072
 15681 8A08			l_307E
 15682
 15683 				; ------------------------------------------------------------
 15684
 15685 = A13B			X	= DATAORIGIN+$03D7
 15686 = A13D			Y	= DATAORIGIN+$03D9
 15687 = A13F			Z	= DATAORIGIN+$03DB
 15688
 15689 = A13B			@VarData	= X
 15690 = 0006			@VarDataSize	= 6
 15691
 15692 8A08			@exit
 15693 					.ifdef @new
 15694 					lda <@VarData
 15695 					sta :ztmp
 15696 					lda >@VarData
 15697 					ldy #@VarDataSize-1
 15698 					jmp @FreeMem
 15699 					els
 15700 8A08 60				rts						; ret
 15701 					eif
 15702 				.endl
 15703
 15704 8A09			.local	CHECK_BONUS_TYPE				; PROCEDURE
 15705
 15706 				; optimize OK (service.pas), line = 3115
 15707
 15708 8A09 AD E4 9E			lda VAUS.LETTER
 15709 8A0C 10 03 4C BF 8A		jmi l_30C5
 15710 8A11 D0 03 4C BF 8A		jeq l_30C5
 15711
 15712 				; optimize OK (service.pas), line = 3117
 15713
 15714 8A16 A0 00			ldy #$00
 15715 8A18 AD E4 9E			lda VAUS.LETTER
 15716 8A1B 10 01			spl
 15717 8A1D 88				dey
 15718 8A1E 38 E9 01			sub #$01
 15719 8A21 8D 4C 9F			sta LETT.LAST
 15720 8A24 98				tya
 15721 8A25 E9 00			sbc #$00
 15722 8A27 8D 4D 9F			sta LETT.LAST+1
 15723
 15724 				; optimize OK (service.pas), line = 3118
 15725
 15726 8A2A AC 47 A1 84 84 AC + 	mwy B2 :bp2
 15727 8A34 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15728 8A36 B1 84			lda (:bp2),y
 15729 8A38 F0 0F			jeq l_30DC
 15730 8A3A AD 47 A1			lda B2
 15731 8A3D 8D D3 9F			sta REMOVE_BALL.BALL
 15732 8A40 AD 48 A1			lda B2+1
 15733 8A43 8D D4 9F			sta REMOVE_BALL.BALL+1
 15734 8A46 20 60 43			jsr REMOVE_BALL
 15735 8A49			l_30DC
 15736
 15737 				; optimize OK (service.pas), line = 3119
 15738
 15739 8A49 AC 4B A1 84 84 AC + 	mwy B3 :bp2
 15740 8A53 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15741 8A55 B1 84			lda (:bp2),y
 15742 8A57 F0 0F			jeq l_30EE
 15743 8A59 AD 4B A1			lda B3
 15744 8A5C 8D D3 9F			sta REMOVE_BALL.BALL
 15745 8A5F AD 4C A1			lda B3+1
 15746 8A62 8D D4 9F			sta REMOVE_BALL.BALL+1
 15747 8A65 20 60 43			jsr REMOVE_BALL
 15748 8A68			l_30EE
 15749
 15750 				; optimize OK (service.pas), line = 3120
 15751
 15752 8A68 AC 47 A1 84 84 AC + 	mwy B2 :bp2
 15753 8A72 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15754 8A74 A9 00			lda #$00
 15755 8A76 91 84			sta (:bp2),y
 15756
 15757 				; optimize OK (service.pas), line = 3121
 15758
 15759 8A78 AC 4B A1 84 84 AC + 	mwy B3 :bp2
 15760 8A82 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15761 8A84 91 84			sta (:bp2),y
 15762
 15763 				; optimize OK (service.pas), line = 3122
 15764
 15765 8A86 8D 54 9F			sta SCRFLUX
 15766
 15767 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3123
 15768
 15769 8A89 20 02 88			jsr REMOVE_FLUX
 15770
 15771 				; optimize OK (service.pas), line = 3125
 15772
 15773 8A8C AD E4 9E			lda VAUS.LETTER
 15774 8A8F C9 06			cmp #$06
 15775 8A91 F0 2C			jeq l_3113
 15776
 15777 				; optimize OK (service.pas), line = 3127
 15778
 15779 8A93 AC 43 A1 84 84 AC + 	mwy B1 :bp2
 15780 8A9D A0 18			ldy #B1.LAUNCH-DATAORIGIN
 15781 8A9F A9 00			lda #$00
 15782 8AA1 91 84			sta (:bp2),y
 15783
 15784 				; optimize OK (service.pas), line = 3128
 15785
 15786 8AA3 AC 47 A1 84 84 AC + 	mwy B2 :bp2
 15787 8AAD A0 18			ldy #B2.LAUNCH-DATAORIGIN
 15788 8AAF 91 84			sta (:bp2),y
 15789
 15790 				; optimize OK (service.pas), line = 3129
 15791
 15792 8AB1 AC 4B A1 84 84 AC + 	mwy B3 :bp2
 15793 8ABB A0 18			ldy #B3.LAUNCH-DATAORIGIN
 15794 8ABD 91 84			sta (:bp2),y
 15795 8ABF			l_3113
 15796 8ABF			l_30C5
 15797
 15798 				; optimize OK (service.pas), line = 3133
 15799
 15800 8ABF AD E4 9E			lda VAUS.LETTER
 15801 8AC2 8D 51 A1			sta @CASETMP_000A
 15802 8AC5 C9 01			cmp #$01
 15803 8AC7 D0 4D			jne l_312F
 15804 				@
 15805
 15806 				; optimize OK (service.pas), line = 3136
 15807
 15808 8AC9 AD 50 9F			lda FIRE.SHOT
 15809 8ACC F0 03			jeq l_313B
 15810 8ACE 20 34 86			jsr REMOVE_FIRE
 15811 8AD1			l_313B
 15812
 15813 				; optimize OK (service.pas), line = 3137
 15814
 15815 8AD1 AD 80 9E 8D 68 9E + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 15816
 15817 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3138
 15818
 15819 8B01 20 5E 51			jsr MODIFY_VAUS
 15820
 15821 				; optimize OK (service.pas), line = 3139
 15822
 15823 8B04 A9 00			lda #$00
 15824 8B06 8D E4 9E			sta VAUS.LETTER
 15825
 15826 				; optimize OK (service.pas), line = 3140
 15827
 15828 8B09 A9 01			lda #$01
 15829 8B0B 8D 51 9F			sta FIRE.AVL
 15830
 15831 				; optimize OK (service.pas), line = 3141
 15832
 15833 8B0E A9 00			lda #$00
 15834 8B10 8D 50 9F			sta FIRE.SHOT
 15835 8B13 4C 44 8D			jmp a_000A
 15836 8B16			l_312F
 15837 8B16 C9 02			cmp #$02
 15838 8B18 D0 46			jne l_3155
 15839
 15840 				; optimize OK (service.pas), line = 3145
 15841
 15842 8B1A AD 50 9F			lda FIRE.SHOT
 15843 8B1D F0 03			jeq l_3161
 15844 8B1F 20 34 86			jsr REMOVE_FIRE
 15845 8B22			l_3161
 15846
 15847 				; optimize OK (service.pas), line = 3146
 15848
 15849 8B22 AD 78 9E 8D 68 9E + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 15850
 15851 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3147
 15852
 15853 8B52 20 5E 51			jsr MODIFY_VAUS
 15854
 15855 				; optimize OK (service.pas), line = 3148
 15856
 15857 8B55 A9 00			lda #$00
 15858 8B57 8D E4 9E			sta VAUS.LETTER
 15859
 15860 				; optimize OK (service.pas), line = 3149
 15861
 15862 8B5A 8D 51 9F			sta FIRE.AVL
 15863 8B5D 4C 44 8D			jmp a_000A
 15864 8B60			l_3155
 15865 8B60 C9 03			cmp #$03
 15866 8B62 D0 4B			jne l_3177
 15867
 15868 				; optimize OK (service.pas), line = 3153
 15869
 15870 8B64 AD 50 9F			lda FIRE.SHOT
 15871 8B67 F0 03			jeq l_3183
 15872 8B69 20 34 86			jsr REMOVE_FIRE
 15873 8B6C			l_3183
 15874
 15875 				; optimize OK (service.pas), line = 3154
 15876
 15877 8B6C AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15878
 15879 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3155
 15880
 15881 8B9C 20 5E 51			jsr MODIFY_VAUS
 15882
 15883 				; optimize OK (service.pas), line = 3156
 15884
 15885 8B9F A9 00			lda #$00
 15886 8BA1 8D E4 9E			sta VAUS.LETTER
 15887
 15888 				; optimize OK (service.pas), line = 3157
 15889
 15890 8BA4 8D 51 9F			sta FIRE.AVL
 15891
 15892 				; optimize OK (service.pas), line = 3158
 15893
 15894 8BA7 A9 01			lda #$01
 15895 8BA9 8D 54 9F			sta SCRFLUX
 15896 8BAC 4C 44 8D			jmp a_000A
 15897 8BAF			l_3177
 15898 8BAF C9 04			cmp #$04
 15899 8BB1 D0 3E			jne l_319D
 15900
 15901 				; optimize OK (service.pas), line = 3162
 15902
 15903 8BB3 AD 50 9F			lda FIRE.SHOT
 15904 8BB6 F0 03			jeq l_31A9
 15905 8BB8 20 34 86			jsr REMOVE_FIRE
 15906 8BBB			l_31A9
 15907
 15908 				; optimize OK (service.pas), line = 3163
 15909
 15910 8BBB AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15911
 15912 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3164
 15913
 15914 8BEB 20 5E 51			jsr MODIFY_VAUS
 15915 				; optimize OK (service.pas), line = 3165
 15916 8BEE 4C 88 8C			jmp s_31E6
 15917 8BF1			l_319D
 15918 8BF1 C9 05			cmp #$05
 15919 8BF3 F0 03 4C 8B 8C		jne l_31BB
 15920
 15921 				; optimize OK (service.pas), line = 3169
 15922
 15923 8BF8 AD 50 9F			lda FIRE.SHOT
 15924 8BFB F0 03			jeq l_31C7
 15925 8BFD 20 34 86			jsr REMOVE_FIRE
 15926 8C00			l_31C7
 15927
 15928 				; optimize OK (service.pas), line = 3170
 15929
 15930 8C00 AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15931
 15932 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3171
 15933
 15934 8C30 20 5E 51			jsr MODIFY_VAUS
 15935
 15936 				; optimize OK (service.pas), line = 3172
 15937
 15938 8C33 A9 00			lda #$00
 15939 8C35 8D E4 9E			sta VAUS.LETTER
 15940
 15941 				; optimize OK (service.pas), line = 3173
 15942
 15943 8C38 AC 43 A1 84 84 AC + 	mwy B1 :bp2
 15944 8C42 A0 0C			ldy #B1.SPEED-DATAORIGIN
 15945 8C44 B1 84			lda (:bp2),y
 15946 8C46 38 E9 F4			sub #$F4
 15947 8C49 8D 93 9F			sta MAX.A
 15948 8C4C C8				iny
 15949 8C4D B1 84			lda (:bp2),y
 15950 8C4F E9 01			sbc #$01
 15951 8C51 8D 94 9F			sta MAX.A+1
 15952 8C54 A9 F4			lda #$F4
 15953 8C56 8D 95 9F			sta MAX.B
 15954 8C59 A9 01			lda #$01
 15955 8C5B 8D 96 9F			sta MAX.B+1
 15956 8C5E 20 54 3C			jsr MAX
 15957 8C61 AD 97 9F			lda MAX.RESULT
 15958 8C64 8D 4F A1			sta X
 15959 8C67 AD 98 9F			lda MAX.RESULT+1
 15960 8C6A 8D 50 A1			sta X+1
 15961
 15962 				; optimize OK (service.pas), line = 3174
 15963
 15964 8C6D AD 43 A1			lda B1
 15965 8C70 8D DD 9F			sta SET_BALL_SPEED.BALL
 15966 8C73 AD 44 A1			lda B1+1
 15967 8C76 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 15968 8C79 AD 4F A1			lda X
 15969 8C7C 8D E1 9F			sta SET_BALL_SPEED.SPEED
 15970 8C7F AD 50 A1			lda X+1
 15971 8C82 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 15972 8C85 20 C3 44			jsr SET_BALL_SPEED
 15973 8C88			s_31E6
 15974 				; optimize OK (service.pas), line = 3175
 15975 8C88 4C CA 8C			jmp s_3204
 15976 8C8B			l_31BB
 15977 8C8B C9 06			cmp #$06
 15978 8C8D D0 3E			jne l_31ED
 15979
 15980 				; optimize OK (service.pas), line = 3179
 15981
 15982 8C8F AD 50 9F			lda FIRE.SHOT
 15983 8C92 F0 03			jeq l_31F9
 15984 8C94 20 34 86			jsr REMOVE_FIRE
 15985 8C97			l_31F9
 15986
 15987 				; optimize OK (service.pas), line = 3180
 15988
 15989 8C97 AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15990
 15991 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3181
 15992
 15993 8CC7 20 5E 51			jsr MODIFY_VAUS
 15994 8CCA			s_3204
 15995 				; optimize OK (service.pas), line = 3182
 15996 8CCA 4C 3F 8D			jmp s_3234
 15997 8CCD			l_31ED
 15998 8CCD C9 07			cmp #$07
 15999 8CCF D0 73			jne l_320B
 16000
 16001 				; optimize OK (service.pas), line = 3186
 16002
 16003 8CD1 AD 50 9F			lda FIRE.SHOT
 16004 8CD4 F0 03			jeq l_3217
 16005 8CD6 20 34 86			jsr REMOVE_FIRE
 16006 8CD9			l_3217
 16007
 16008 				; optimize OK (service.pas), line = 3187
 16009
 16010 8CD9 AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16011
 16012 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3188
 16013
 16014 8D09 20 5E 51			jsr MODIFY_VAUS
 16015
 16016 				; optimize OK (service.pas), line = 3189
 16017
 16018 8D0C A9 00			lda #$00
 16019 8D0E 8D E4 9E			sta VAUS.LETTER
 16020
 16021 				; optimize OK (service.pas), line = 3190
 16022
 16023 8D11 AC 34 9F			ldy CUR_PLAYER
 16024 8D14 B9 28 9F			lda adr.SCORE.LIVES,y
 16025 8D17 18 69 01			add #$01
 16026 8D1A 99 28 9F			sta adr.SCORE.LIVES,y
 16027
 16028 				; optimize OK (service.pas), line = 3191
 16029
 16030 8D1D 8D 20 A1			sta PLOT_LIVES.LIVES
 16031 8D20 A9 00			lda #$00
 16032 8D22 8D 21 A1			sta PLOT_LIVES.LIVES+1
 16033 8D25 20 03 83			jsr PLOT_LIVES
 16034
 16035 				; optimize OK (service.pas), line = 3192
 16036
 16037 8D28 A9 D0			lda #$D0
 16038 8D2A 8D 3E 9E			sta BALL_BLOCK_SOUND.A
 16039 8D2D A9 07			lda #$07
 16040 8D2F 8D 3F 9E			sta BALL_BLOCK_SOUND.A+1
 16041 8D32 A9 0A			lda #$0A
 16042 8D34 8D 40 9E			sta BALL_BLOCK_SOUND.B
 16043 8D37 A9 00			lda #$00
 16044 8D39 8D 41 9E			sta BALL_BLOCK_SOUND.B+1
 16045 8D3C 20 3F 38			jsr BALL_BLOCK_SOUND
 16046 8D3F			s_3234
 16047
 16048 				; optimize OK (service.pas), line = 3193
 16049
 16050 8D3F A9 00			lda #$00
 16051 8D41 8D 51 9F			sta FIRE.AVL
 16052 8D44			l_320B
 16053 8D44			a_000A
 16054
 16055 				; ------------------------------------------------------------
 16056
 16057 = A143			B1	= DATAORIGIN+$03DF
 16058 = 9D64			B1.X	= DATAORIGIN+$0000
 16059 = 9D66			B1.Y	= DATAORIGIN+$0002
 16060 = 9D68			B1.FINEX	= DATAORIGIN+$0004
 16061 = 9D6A			B1.FINEY	= DATAORIGIN+$0006
 16062 = 9D6C			B1.OLDX	= DATAORIGIN+$0008
 16063 = 9D6E			B1.OLDY	= DATAORIGIN+$000A
 16064 = 9D70			B1.SPEED	= DATAORIGIN+$000C
 16065 = 9D72			B1.FINESPEED	= DATAORIGIN+$000E
 16066 = 9D74			B1.SPEEDX	= DATAORIGIN+$0010
 16067 = 9D76			B1.SPEEDY	= DATAORIGIN+$0012
 16068 = 9D78			B1.SBD	= DATAORIGIN+$0014
 16069 = 9D7A			B1.BRWHIT	= DATAORIGIN+$0016
 16070 = 9D7B			B1.INPLAY	= DATAORIGIN+$0017
 16071 = 9D7C			B1.LAUNCH	= DATAORIGIN+$0018
 16072 = 9D7D			B1.ONVAUS	= DATAORIGIN+$0019
 16073 = 9D7F			B1.STM	= DATAORIGIN+$001B
 16074 = A147			B2	= DATAORIGIN+$03E3
 16075 = 9D64			B2.X	= DATAORIGIN+$0000
 16076 = 9D66			B2.Y	= DATAORIGIN+$0002
 16077 = 9D68			B2.FINEX	= DATAORIGIN+$0004
 16078 = 9D6A			B2.FINEY	= DATAORIGIN+$0006
 16079 = 9D6C			B2.OLDX	= DATAORIGIN+$0008
 16080 = 9D6E			B2.OLDY	= DATAORIGIN+$000A
 16081 = 9D70			B2.SPEED	= DATAORIGIN+$000C
 16082 = 9D72			B2.FINESPEED	= DATAORIGIN+$000E
 16083 = 9D74			B2.SPEEDX	= DATAORIGIN+$0010
 16084 = 9D76			B2.SPEEDY	= DATAORIGIN+$0012
 16085 = 9D78			B2.SBD	= DATAORIGIN+$0014
 16086 = 9D7A			B2.BRWHIT	= DATAORIGIN+$0016
 16087 = 9D7B			B2.INPLAY	= DATAORIGIN+$0017
 16088 = 9D7C			B2.LAUNCH	= DATAORIGIN+$0018
 16089 = 9D7D			B2.ONVAUS	= DATAORIGIN+$0019
 16090 = 9D7F			B2.STM	= DATAORIGIN+$001B
 16091 = A14B			B3	= DATAORIGIN+$03E7
 16092 = 9D64			B3.X	= DATAORIGIN+$0000
 16093 = 9D66			B3.Y	= DATAORIGIN+$0002
 16094 = 9D68			B3.FINEX	= DATAORIGIN+$0004
 16095 = 9D6A			B3.FINEY	= DATAORIGIN+$0006
 16096 = 9D6C			B3.OLDX	= DATAORIGIN+$0008
 16097 = 9D6E			B3.OLDY	= DATAORIGIN+$000A
 16098 = 9D70			B3.SPEED	= DATAORIGIN+$000C
 16099 = 9D72			B3.FINESPEED	= DATAORIGIN+$000E
 16100 = 9D74			B3.SPEEDX	= DATAORIGIN+$0010
 16101 = 9D76			B3.SPEEDY	= DATAORIGIN+$0012
 16102 = 9D78			B3.SBD	= DATAORIGIN+$0014
 16103 = 9D7A			B3.BRWHIT	= DATAORIGIN+$0016
 16104 = 9D7B			B3.INPLAY	= DATAORIGIN+$0017
 16105 = 9D7C			B3.LAUNCH	= DATAORIGIN+$0018
 16106 = 9D7D			B3.ONVAUS	= DATAORIGIN+$0019
 16107 = 9D7F			B3.STM	= DATAORIGIN+$001B
 16108 = A14F			X	= DATAORIGIN+$03EB
 16109 = A151			@CASETMP_000A	= DATAORIGIN+$03ED
 16110
 16111 = A143			@VarData	= B1
 16112 = 0009			@VarDataSize	= 9
 16113
 16114 8D44			@exit
 16115 					.ifdef @new
 16116 					lda <@VarData
 16117 					sta :ztmp
 16118 					lda >@VarData
 16119 					ldy #@VarDataSize-1
 16120 					jmp @FreeMem
 16121 					els
 16122 8D44 60				rts						; ret
 16123 					eif
 16124 				.endl
 16125
 16126 8D45			.local	DEVIATE_BALL					; PROCEDURE
 16127
 16128 				; --- RepeatUntilProlog
 16129 8D45			l_3242
 16130
 16131 				; optimize OK (service.pas), line = 3206
 16132
 16133 8D45 AD 52 A1			lda BALL
 16134 8D48 8D FD 9F			sta GET_BALL_DIRECTION.BALL
 16135 8D4B AD 53 A1			lda BALL+1
 16136 8D4E 8D FE 9F			sta GET_BALL_DIRECTION.BALL+1
 16137 8D51 20 89 48			jsr GET_BALL_DIRECTION
 16138 8D54 E8				inx
 16139 8D55 AD 01 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16140 8D5A AD 02 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16141 8D5F A9 1E			lda #$1E
 16142 8D61 20 03 33			jsr SYSTEM.RANDOM.@010180000
 16143 8D64 E8				inx
 16144 8D65 AD 9B 9D 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16145 8D6A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16146 8D6E 20 B5 20			jsr addAX_CX
 16147 8D71 B5 95			lda :STACKORIGIN-1,x
 16148 8D73 38 E9 0F			sub #$0F
 16149 8D76 8D 56 A1			sta TEMP
 16150 8D79 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16151 8D7B E9 00			sbc #$00
 16152 8D7D 8D 57 A1			sta TEMP+1
 16153 8D80 CA				dex
 16154 8D81 CA				dex
 16155
 16156 				; optimize OK (service.pas), line = 3207
 16157
 16158 8D82 A9 5A			lda #$5A
 16159 8D84 85 8E			sta @SMALLINT.MOD.B
 16160 8D86 A9 00			lda #$00
 16161 8D88 85 8F			sta @SMALLINT.MOD.B+1
 16162 8D8A AD 56 A1			lda TEMP
 16163 8D8D 85 86			sta @SMALLINT.MOD.A
 16164 8D8F AD 57 A1			lda TEMP+1
 16165 8D92 85 87			sta @SMALLINT.MOD.A+1
 16166 8D94 20 50 22			jsr @SMALLINT.MOD
 16167 8D97 A5 92			lda @SMALLINT.MOD.RESULT
 16168 8D99 C9 1F			cmp #$1F
 16169 8D9B A5 93			lda @SMALLINT.MOD.RESULT+1
 16170 8D9D E9 00			sbc #$00
 16171 8D9F 50 02			svc
 16172 8DA1 49 80			eor #$80
 16173 8DA3 30 A0			jmi l_3242
 16174 8DA5 A9 5A			lda #$5A
 16175 8DA7 85 8E			sta @SMALLINT.MOD.B
 16176 8DA9 A9 00			lda #$00
 16177 8DAB 85 8F			sta @SMALLINT.MOD.B+1
 16178 8DAD AD 56 A1			lda TEMP
 16179 8DB0 85 86			sta @SMALLINT.MOD.A
 16180 8DB2 AD 57 A1			lda TEMP+1
 16181 8DB5 85 87			sta @SMALLINT.MOD.A+1
 16182 8DB7 20 50 22			jsr @SMALLINT.MOD
 16183 8DBA A5 92			lda @SMALLINT.MOD.RESULT
 16184 8DBC C9 3C			cmp #$3C
 16185 8DBE A5 93			lda @SMALLINT.MOD.RESULT+1
 16186 8DC0 E9 00			sbc #$00
 16187 8DC2 50 02			svc
 16188 8DC4 49 80			eor #$80
 16189 8DC6 30 03 4C 45 8D		jpl l_3242
 16190
 16191 				; optimize OK (service.pas), line = 3209
 16192
 16193 8DCB AD 52 A1			lda BALL
 16194 8DCE 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 16195 8DD1 AD 53 A1			lda BALL+1
 16196 8DD4 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 16197 8DD7 AD 56 A1			lda TEMP
 16198 8DDA 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 16199 8DDD AD 57 A1			lda TEMP+1
 16200 8DE0 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 16201 8DE3 20 A6 46			jsr SET_BALL_DIRECTION
 16202
 16203 				; optimize OK (service.pas), line = 3210
 16204
 16205 8DE6 AC 52 A1 84 84 AC + 	mwy BALL :bp2
 16206 8DF0 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16207 8DF2 B1 84			lda (:bp2),y
 16208 8DF4 8D E1 9F			sta SET_BALL_SPEED.SPEED
 16209 8DF7 C8				iny
 16210 8DF8 B1 84			lda (:bp2),y
 16211 8DFA 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 16212 8DFD AD 52 A1			lda BALL
 16213 8E00 8D DD 9F			sta SET_BALL_SPEED.BALL
 16214 8E03 AD 53 A1			lda BALL+1
 16215 8E06 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 16216 8E09 20 C3 44			jsr SET_BALL_SPEED
 16217
 16218 				; optimize OK (service.pas), line = 3211
 16219
 16220 8E0C AC 52 A1 84 84 AC + 	mwy BALL :bp2
 16221 8E16 A0 14			ldy #BALL.SBD-DATAORIGIN
 16222 8E18 A9 00			lda #$00
 16223 8E1A 91 84			sta (:bp2),y
 16224 8E1C C8				iny
 16225 8E1D 91 84			sta (:bp2),y
 16226
 16227 				; ------------------------------------------------------------
 16228
 16229 = A152			BALL	= DATAORIGIN+$03EE
 16230 = 9D64			BALL.X	= DATAORIGIN+$0000
 16231 = 9D66			BALL.Y	= DATAORIGIN+$0002
 16232 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
 16233 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
 16234 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
 16235 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
 16236 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
 16237 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
 16238 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
 16239 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
 16240 = 9D78			BALL.SBD	= DATAORIGIN+$0014
 16241 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
 16242 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
 16243 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
 16244 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
 16245 = 9D7F			BALL.STM	= DATAORIGIN+$001B
 16246 = A156			TEMP	= DATAORIGIN+$03F2
 16247
 16248 = A152			@VarData	= BALL
 16249 = 0004			@VarDataSize	= 4
 16250
 16251 8E1F			@exit
 16252 					.ifdef @new
 16253 					lda <@VarData
 16254 					sta :ztmp
 16255 					lda >@VarData
 16256 					ldy #@VarDataSize-1
 16257 					jmp @FreeMem
 16258 					els
 16259 8E1F 60				rts						; ret
 16260 					eif
 16261 				.endl
 16262
 16263 8E20			.local	BOUNCEBALL					; FUNCTION
 16264
 16265 8E20 4C 95 8F			jmp l_3282
 16266
 16267 8E23			.local	CHECK_BALL					; PROCEDURE
 16268
 16269 				; optimize OK (service.pas), line = 3241
 16270
 16271 8E23 AC BA A1 84 84 AC + 	mwy BALL :bp2
 16272 8E2D A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16273 8E2F B1 84			lda (:bp2),y
 16274 8E31 F0 65			jeq l_3291
 16275
 16276 				; optimize OK (service.pas), line = 3244
 16277
 16278 8E33 A0 02			ldy #BALL.Y-DATAORIGIN
 16279 8E35 B1 84			lda (:bp2),y
 16280 8E37 C8				iny
 16281 8E38 C9 16			cmp #$16
 16282 8E3A B1 84			lda (:bp2),y
 16283 8E3C E9 00			sbc #$00
 16284 8E3E 50 02			svc
 16285 8E40 49 80			eor #$80
 16286 8E42 30 20			jmi l_32AE
 16287 8E44 A0 02			ldy #BALL.Y-DATAORIGIN
 16288 8E46 B1 84			lda (:bp2),y
 16289 8E48 C8				iny
 16290 8E49 C9 8E			cmp #$8E
 16291 8E4B B1 84			lda (:bp2),y
 16292 8E4D E9 00			sbc #$00
 16293 8E4F 50 02			svc
 16294 8E51 49 80			eor #$80
 16295 8E53 10 0F			jpl l_32AE
 16296
 16297 				; optimize OK (service.pas), line = 3245
 16298
 16299 8E55 AD BA A1			lda BALL
 16300 8E58 8D 9E A0			sta BALL_HIT_BLOCK.BALL
 16301 8E5B AD BB A1			lda BALL+1
 16302 8E5E 8D 9F A0			sta BALL_HIT_BLOCK.BALL+1
 16303 8E61 20 80 68			jsr BALL_HIT_BLOCK
 16304 8E64			l_32AE
 16305
 16306 				; optimize OK (service.pas), line = 3247
 16307
 16308 8E64 AD BA A1			lda BALL
 16309 8E67 8D D7 9F			sta SET_BALL.BALL
 16310 8E6A AD BB A1			lda BALL+1
 16311 8E6D 8D D8 9F			sta SET_BALL.BALL+1
 16312 8E70 20 EA 43			jsr SET_BALL
 16313
 16314 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3248
 16315
 16316 8E73 E8				inx
 16317 8E74 AD BA A1 95 96		mva BALL :STACKORIGIN,x
 16318 8E79 AD BB A1 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16319 8E7E 20 02 4B			jsr BALL_SPEED
 16320 8E81 AC BA A1 84 84 AC + 	mwy BALL :bp2
 16321 8E8B A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16322 8E8D AD 25 A0			lda BALL_SPEED.RESULT
 16323 8E90 91 84			sta (:bp2),y
 16324 8E92 C8				iny
 16325 8E93 AD 26 A0			lda BALL_SPEED.RESULT+1
 16326 8E96 91 84			sta (:bp2),y
 16327 8E98			l_3291
 16328
 16329 				; ------------------------------------------------------------
 16330
 16331 = A1BA			BALL	= DATAORIGIN+$0456
 16332 = 9D64			BALL.X	= DATAORIGIN+$0000
 16333 = 9D66			BALL.Y	= DATAORIGIN+$0002
 16334 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
 16335 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
 16336 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
 16337 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
 16338 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
 16339 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
 16340 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
 16341 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
 16342 = 9D78			BALL.SBD	= DATAORIGIN+$0014
 16343 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
 16344 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
 16345 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
 16346 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
 16347 = 9D7F			BALL.STM	= DATAORIGIN+$001B
 16348
 16349 = A1BA			@VarData	= BALL
 16350 = 0002			@VarDataSize	= 2
 16351
 16352 8E98			@exit
 16353 					.ifdef @new
 16354 					lda <@VarData
 16355 					sta :ztmp
 16356 					lda >@VarData
 16357 					ldy #@VarDataSize-1
 16358 					jmp @FreeMem
 16359 					els
 16360 8E98 60				rts						; ret
 16361 					eif
 16362 				.endl
 16363
 16364 8E99			.local	TEST_BALL					; PROCEDURE
 16365
 16366 				; optimize OK (service.pas), line = 3256
 16367
 16368 8E99 AC BE A1 84 84 AC + 	mwy BALL :bp2
 16369 8EA3 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16370 8EA5 B1 84			lda (:bp2),y
 16371 8EA7 D0 03 4C 94 8F		jeq l_32CF
 16372
 16373 				; optimize OK (service.pas), line = 3258
 16374
 16375 8EAC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16376 8EAE B1 84			lda (:bp2),y
 16377 8EB0 18 69 01			add #$01
 16378 8EB3 91 84			sta (:bp2),y
 16379 8EB5 C8				iny
 16380 8EB6 B1 84			lda (:bp2),y
 16381 8EB8 69 00			adc #$00
 16382 8EBA 91 84			sta (:bp2),y
 16383
 16384 				; optimize OK (service.pas), line = 3260
 16385
 16386 8EBC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16387 8EBE B1 84			lda (:bp2),y
 16388 8EC0 85 9F			sta :STACKORIGIN+9
 16389 8EC2 C8				iny
 16390 8EC3 B1 84			lda (:bp2),y
 16391 8EC5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16392 8EC7 AD 3A 9F			lda LV
 16393 8ECA 0A				asl @
 16394 8ECB A8				tay
 16395 8ECC B9 A1 20			lda adr.LEVEL,y
 16396 8ECF 85 A0			sta :STACKORIGIN+10
 16397 8ED1 B9 A2 20			lda adr.LEVEL+1,y
 16398 8ED4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16399 8ED6 A0 00			ldy #$00
 16400 8ED8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16401 8EDA 10 01			spl
 16402 8EDC 88				dey
 16403 8EDD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16404 8EDF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16405 8EE1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16406 8EE3				.LOCAL
 16407 8EE3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16408 8EE5 38 E9 00			sub #$00
 16409 8EE8 D0 1C			bne L4
 16410 8EEA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16411 8EEC C9 00			cmp #$00
 16412 8EEE D0 0A			bne L1
 16413 8EF0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16414 8EF2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16415 8EF4 D0 04			bne L1
 16416 8EF6 A5 9F			lda :STACKORIGIN+9
 16417 8EF8 C5 A0			cmp :STACKORIGIN+10
 16418 8EFA F0 10		L1	beq L5
 16419 8EFC B0 04			bcs L3
 16420 8EFE A9 FF			lda #$FF
 16421 8F00 D0 0A			bne L5
 16422 8F02 A9 01		L3	lda #$01
 16423 8F04 D0 06			bne L5
 16424 8F06 50 04		L4	bvc L5
 16425 8F08 49 FF			eor #$FF
 16426 8F0A 09 01			ora #$01
 16427 8F0C			L5
 16428 					.ENDL
 16429 8F0C 30 48			jmi l_32E5
 16430 8F0E F0 46			jeq l_32E5
 16431
 16432 				; optimize OK (service.pas), line = 3262
 16433
 16434 8F10 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16435 8F12 A9 00			lda #$00
 16436 8F14 91 84			sta (:bp2),y
 16437 8F16 C8				iny
 16438 8F17 91 84			sta (:bp2),y
 16439
 16440 				; optimize OK (service.pas), line = 3265
 16441
 16442 8F19 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16443 8F1B B1 84			lda (:bp2),y
 16444 8F1D C8				iny
 16445 8F1E C9 D0			cmp #$D0
 16446 8F20 B1 84			lda (:bp2),y
 16447 8F22 E9 07			sbc #$07
 16448 8F24 50 02			svc
 16449 8F26 49 80			eor #$80
 16450 8F28 10 2C			jpl l_32FB
 16451
 16452 				; optimize OK (service.pas), line = 3267
 16453
 16454 8F2A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16455 8F2C B1 84			lda (:bp2),y
 16456 8F2E 18 69 0A			add #$0A
 16457 8F31 91 84			sta (:bp2),y
 16458 8F33 C8				iny
 16459 8F34 B1 84			lda (:bp2),y
 16460 8F36 69 00			adc #$00
 16461 8F38 91 84			sta (:bp2),y
 16462
 16463 				; optimize OK (service.pas), line = 3268
 16464
 16465 8F3A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16466 8F3C B1 84			lda (:bp2),y
 16467 8F3E 8D E1 9F			sta SET_BALL_SPEED.SPEED
 16468 8F41 C8				iny
 16469 8F42 B1 84			lda (:bp2),y
 16470 8F44 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 16471 8F47 AD BE A1			lda BALL
 16472 8F4A 8D DD 9F			sta SET_BALL_SPEED.BALL
 16473 8F4D AD BF A1			lda BALL+1
 16474 8F50 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 16475 8F53 20 C3 44			jsr SET_BALL_SPEED
 16476 8F56			l_32FB
 16477 8F56			l_32E5
 16478
 16479 				; optimize OK (service.pas), line = 3272
 16480
 16481 8F56 AC BE A1 84 84 AC + 	mwy BALL :bp2
 16482 8F60 A0 14			ldy #BALL.SBD-DATAORIGIN
 16483 8F62 B1 84			lda (:bp2),y
 16484 8F64 18 69 01			add #$01
 16485 8F67 91 84			sta (:bp2),y
 16486 8F69 C8				iny
 16487 8F6A B1 84			lda (:bp2),y
 16488 8F6C 69 00			adc #$00
 16489 8F6E 91 84			sta (:bp2),y
 16490
 16491 				; optimize OK (service.pas), line = 3276
 16492
 16493 8F70 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16494 8F72 B1 84			lda (:bp2),y
 16495 8F74 C9 02			cmp #$02
 16496 8F76 D0 05			bne @+
 16497 8F78 88				dey
 16498 8F79 B1 84			lda (:bp2),y
 16499 8F7B C9 58			cmp #$58
 16500 				@
 16501 8F7D 90 15			jcc l_3323
 16502 				@
 16503 8F7F A0 00			ldy #$00
 16504 8F81 B1 84			lda (:bp2),y
 16505 8F83 10 0F			jpl l_3323
 16506 				@
 16507
 16508 				; optimize OK (service.pas), line = 3277
 16509
 16510 8F85 AD BE A1			lda BALL
 16511 8F88 8D 52 A1			sta DEVIATE_BALL.BALL
 16512 8F8B AD BF A1			lda BALL+1
 16513 8F8E 8D 53 A1			sta DEVIATE_BALL.BALL+1
 16514 8F91 20 45 8D			jsr DEVIATE_BALL
 16515 8F94			l_3323
 16516 8F94			l_32CF
 16517
 16518 				; ------------------------------------------------------------
 16519
 16520 = A1BE			BALL	= DATAORIGIN+$045A
 16521 = 9D64			BALL.X	= DATAORIGIN+$0000
 16522 = 9D66			BALL.Y	= DATAORIGIN+$0002
 16523 = 9D68			BALL.FINEX	= DATAORIGIN+$0004
 16524 = 9D6A			BALL.FINEY	= DATAORIGIN+$0006
 16525 = 9D6C			BALL.OLDX	= DATAORIGIN+$0008
 16526 = 9D6E			BALL.OLDY	= DATAORIGIN+$000A
 16527 = 9D70			BALL.SPEED	= DATAORIGIN+$000C
 16528 = 9D72			BALL.FINESPEED	= DATAORIGIN+$000E
 16529 = 9D74			BALL.SPEEDX	= DATAORIGIN+$0010
 16530 = 9D76			BALL.SPEEDY	= DATAORIGIN+$0012
 16531 = 9D78			BALL.SBD	= DATAORIGIN+$0014
 16532 = 9D7A			BALL.BRWHIT	= DATAORIGIN+$0016
 16533 = 9D7B			BALL.INPLAY	= DATAORIGIN+$0017
 16534 = 9D7C			BALL.LAUNCH	= DATAORIGIN+$0018
 16535 = 9D7D			BALL.ONVAUS	= DATAORIGIN+$0019
 16536 = 9D7F			BALL.STM	= DATAORIGIN+$001B
 16537
 16538 = A1BE			@VarData	= BALL
 16539 = 0002			@VarDataSize	= 2
 16540
 16541 8F94			@exit
 16542 					.ifdef @new
 16543 					lda <@VarData
 16544 					sta :ztmp
 16545 					lda >@VarData
 16546 					ldy #@VarDataSize-1
 16547 					jmp @FreeMem
 16548 					els
 16549 8F94 60				rts						; ret
 16550 					eif
 16551 				.endl
 16552 8F95			l_3282
 16553
 16554 				; optimize OK (service.pas), line = 3285
 16555
 16556 8F95 A9 00			lda #$00
 16557 8F97 8D 55 9F			sta SCRFLUXCNT
 16558
 16559 				; optimize OK (service.pas), line = 3286
 16560
 16561 8F9A 8D 54 9F			sta SCRFLUX
 16562
 16563 				; optimize OK (service.pas), line = 3288
 16564
 16565 8F9D A9 01			lda #$01
 16566 8F9F 8D 53 9F			sta BALLS_IN_PLAY
 16567
 16568 				; optimize OK (service.pas), line = 3290
 16569
 16570 8FA2 A9 00			lda #$00
 16571 8FA4 8D 51 9F			sta FIRE.AVL
 16572
 16573 				; optimize OK (service.pas), line = 3291
 16574
 16575 8FA7 AD 70 9E 8D 68 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16576
 16577 				; optimize OK (service.pas), line = 3293
 16578
 16579 8FD7 A9 FF			lda #$FF
 16580 8FD9 8D 4C 9F			sta LETT.LAST
 16581 8FDC 8D 4D 9F			sta LETT.LAST+1
 16582
 16583 				; optimize OK (service.pas), line = 3294
 16584
 16585 8FDF A9 00			lda #$00
 16586 8FE1 8D 43 9F			sta LETT.ACTIVE
 16587
 16588 				; optimize OK (service.pas), line = 3297
 16589
 16590 8FE4 AD 2B 9D			lda PATTERN
 16591 8FE7 8D CE A0			sta FILL_PICTURE_WITH_PATTERN.PATT
 16592 8FEA AD 2C 9D			lda PATTERN+1
 16593 8FED 8D CF A0			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16594 8FF0 20 F3 75			jsr FILL_PICTURE_WITH_PATTERN
 16595
 16596 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3300
 16597
 16598 8FF3 E8				inx
 16599 8FF4 AD 0B 9D 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16600 8FF9 AD 0C 9D 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16601 8FFE 20 90 42			jsr SHOWBTMPICTURE
 16602
 16603 				; optimize OK (service.pas), line = 3304
 16604
 16605 9001 AC 34 9F			ldy CUR_PLAYER
 16606 9004 B9 28 9F			lda adr.SCORE.LIVES,y
 16607 9007 8D 20 A1			sta PLOT_LIVES.LIVES
 16608 900A A9 00			lda #$00
 16609 900C 8D 21 A1			sta PLOT_LIVES.LIVES+1
 16610 900F 20 03 83			jsr PLOT_LIVES
 16611
 16612 				; optimize OK (service.pas), line = 3310
 16613
 16614 9012 AD 1D 9F			lda adr.SCORE.PLAYER+$04
 16615 9015 8D 17 A1			sta WRITE_SCORE.SC
 16616 9018 AD 1E 9F			lda adr.SCORE.PLAYER+1+$04
 16617 901B 8D 18 A1			sta WRITE_SCORE.SC+1
 16618 901E AD 1F 9F			lda adr.SCORE.PLAYER+2+$04
 16619 9021 8D 19 A1			sta WRITE_SCORE.SC+2
 16620 9024 AD 20 9F			lda adr.SCORE.PLAYER+3+$04
 16621 9027 8D 1A A1			sta WRITE_SCORE.SC+3
 16622 902A A9 FD			lda #$FD
 16623 902C 8D 13 A1			sta WRITE_SCORE.PX
 16624 902F A9 00			lda #$00
 16625 9031 8D 14 A1			sta WRITE_SCORE.PX+1
 16626 9034 A9 3C			lda #$3C
 16627 9036 8D 15 A1			sta WRITE_SCORE.PY
 16628 9039 A9 00			lda #$00
 16629 903B 8D 16 A1			sta WRITE_SCORE.PY+1
 16630 903E 20 A5 7F			jsr WRITE_SCORE
 16631
 16632 				; optimize OK (service.pas), line = 3311
 16633
 16634 9041 AD 21 9F			lda adr.SCORE.PLAYER+$08
 16635 9044 8D 17 A1			sta WRITE_SCORE.SC
 16636 9047 AD 22 9F			lda adr.SCORE.PLAYER+1+$08
 16637 904A 8D 18 A1			sta WRITE_SCORE.SC+1
 16638 904D AD 23 9F			lda adr.SCORE.PLAYER+2+$08
 16639 9050 8D 19 A1			sta WRITE_SCORE.SC+2
 16640 9053 AD 24 9F			lda adr.SCORE.PLAYER+3+$08
 16641 9056 8D 1A A1			sta WRITE_SCORE.SC+3
 16642 9059 A9 FD			lda #$FD
 16643 905B 8D 13 A1			sta WRITE_SCORE.PX
 16644 905E A9 00			lda #$00
 16645 9060 8D 14 A1			sta WRITE_SCORE.PX+1
 16646 9063 A9 5D			lda #$5D
 16647 9065 8D 15 A1			sta WRITE_SCORE.PY
 16648 9068 A9 00			lda #$00
 16649 906A 8D 16 A1			sta WRITE_SCORE.PY+1
 16650 906D 20 A5 7F			jsr WRITE_SCORE
 16651
 16652 				; optimize OK (service.pas), line = 3312
 16653
 16654 9070 A9 FD			lda #$FD
 16655 9072 8D 13 A1			sta WRITE_SCORE.PX
 16656 9075 A9 00			lda #$00
 16657 9077 8D 14 A1			sta WRITE_SCORE.PX+1
 16658 907A A9 80			lda #$80
 16659 907C 8D 15 A1			sta WRITE_SCORE.PY
 16660 907F A9 00			lda #$00
 16661 9081 8D 16 A1			sta WRITE_SCORE.PY+1
 16662 9084 AD 2B 9F			lda SCORE.HISCORE
 16663 9087 8D 17 A1			sta WRITE_SCORE.SC
 16664 908A AD 2C 9F			lda SCORE.HISCORE+1
 16665 908D 8D 18 A1			sta WRITE_SCORE.SC+1
 16666 9090 AD 2D 9F			lda SCORE.HISCORE+2
 16667 9093 8D 19 A1			sta WRITE_SCORE.SC+2
 16668 9096 AD 2E 9F			lda SCORE.HISCORE+3
 16669 9099 8D 1A A1			sta WRITE_SCORE.SC+3
 16670 909C 20 A5 7F			jsr WRITE_SCORE
 16671
 16672 				; optimize FAIL ('PUT_WALL', service.pas), line = 3315
 16673
 16674 909F 20 AD 5B			jsr PUT_WALL
 16675
 16676 				; optimize OK (service.pas), line = 3322
 16677
 16678 90A2 A9 01			lda #$01
 16679 90A4 8D 7D A1			sta BALL0.INPLAY
 16680
 16681 				; optimize OK (service.pas), line = 3323
 16682
 16683 90A7 8D 7E A1			sta BALL0.LAUNCH
 16684
 16685 				; optimize OK (service.pas), line = 3326
 16686
 16687 90AA A9 6F			lda #$6F
 16688 90AC 8D 66 A1			sta BALL0.X
 16689 90AF A9 00			lda #$00
 16690 90B1 8D 67 A1			sta BALL0.X+1
 16691
 16692 				; optimize OK (service.pas), line = 3327
 16693
 16694 90B4 A9 B5			lda #$B5
 16695 90B6 8D 68 A1			sta BALL0.Y
 16696 90B9 A9 00			lda #$00
 16697 90BB 8D 69 A1			sta BALL0.Y+1
 16698
 16699 				; optimize OK (service.pas), line = 3330
 16700
 16701 90BE A9 FF			lda #$FF
 16702 90C0 8D 6E A1			sta BALL0.OLDX
 16703 90C3 8D 6F A1			sta BALL0.OLDX+1
 16704
 16705 				; optimize OK (service.pas), line = 3331
 16706
 16707 90C6 8D 70 A1			sta BALL0.OLDY
 16708 90C9 8D 71 A1			sta BALL0.OLDY+1
 16709
 16710 				; optimize OK (service.pas), line = 3334
 16711
 16712 90CC A9 00			lda #$00
 16713 90CE 8D 7A A1			sta BALL0.SBD
 16714 90D1 8D 7B A1			sta BALL0.SBD+1
 16715
 16716 				; optimize OK (service.pas), line = 3338
 16717
 16718 90D4 A9 10			lda #$10
 16719 90D6 8D 7F A1			sta BALL0.ONVAUS
 16720 90D9 A9 00			lda #$00
 16721 90DB 8D 80 A1			sta BALL0.ONVAUS+1
 16722
 16723 				; optimize OK (service.pas), line = 3343
 16724
 16725 90DE 8D 81 A1			sta BALL0.STM
 16726
 16727 				; optimize OK (service.pas), line = 3347
 16728
 16729 90E1 A9 E8			lda #$E8
 16730 90E3 8D 9C 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 16731 90E6 A9 03			lda #$03
 16732 90E8 8D 9D 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 16733 90EB 20 1A 33			jsr SYSTEM.RANDOM.@010184000
 16734 90EE AD 9E 9D			lda SYSTEM.RANDOM.@010184000.RESULT
 16735 90F1 8D 44 9F			sta LETT.INCOMING
 16736 90F4 AD 9F 9D			lda SYSTEM.RANDOM.@010184000.RESULT+1
 16737 90F7 8D 45 9F			sta LETT.INCOMING+1
 16738
 16739 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3350
 16740
 16741 90FA 20 67 7A			jsr CREATE_VAUS
 16742
 16743 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3353
 16744
 16745 90FD 20 83 77			jsr WRITE_ROUND_LEVEL
 16746
 16747 				; optimize FAIL ('SET_VAUS', service.pas), line = 3355
 16748
 16749 9100 20 76 51			jsr SET_VAUS
 16750
 16751 				; optimize FAIL ('START_VAUS', service.pas), line = 3356
 16752
 16753 9103 20 B3 51			jsr START_VAUS
 16754
 16755 				; optimize OK (service.pas), line = 3357
 16756
 16757 9106 AD D8 9E			lda VAUS.X
 16758 9109 8D 3E A0			sta MOVE_VAUS.X
 16759 910C A9 00			lda #$00
 16760 910E 8D 3F A0			sta MOVE_VAUS.X+1
 16761 9111 A9 B8			lda #$B8
 16762 9113 8D 40 A0			sta MOVE_VAUS.Y
 16763 9116 A9 00			lda #$00
 16764 9118 8D 41 A0			sta MOVE_VAUS.Y+1
 16765 911B 20 A9 53			jsr MOVE_VAUS
 16766
 16767 				; optimize FAIL ('START_LEVEL', service.pas), line = 3358
 16768
 16769 911E 20 3D 38			jsr START_LEVEL
 16770
 16771 				; optimize FAIL ('START_VAUS', service.pas), line = 3359
 16772
 16773 9121 20 B3 51			jsr START_VAUS
 16774
 16775 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3360
 16776
 16777 9124 20 84 77			jsr REMOVE_ROUND_LEVEL
 16778
 16779 				; optimize OK (service.pas), line = 3361
 16780
 16781 9127 AD 28 96			lda BALL0
 16782 912A 8D D7 9F			sta SET_BALL.BALL
 16783 912D AD 29 96			lda BALL0+1
 16784 9130 8D D8 9F			sta SET_BALL.BALL+1
 16785 9133 20 EA 43			jsr SET_BALL
 16786
 16787 				; optimize OK (service.pas), line = 3368
 16788
 16789 9136 A9 0F			lda #$0F
 16790 9138 20 03 33			jsr SYSTEM.RANDOM.@010180000
 16791 913B E8				inx
 16792 913C E8				inx
 16793 913D AD 9B 9D			lda SYSTEM.RANDOM.@010180000.RESULT
 16794 9140 18 69 3C			add #$3C
 16795 9143 95 95			sta :STACKORIGIN-1,x
 16796 9145 A9 00			lda #$00
 16797 9147 69 00			adc #$00
 16798 9149 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 16799 914B AD 28 96			lda BALL0
 16800 914E 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 16801 9151 AD 29 96			lda BALL0+1
 16802 9154 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 16803 9157 CA				dex
 16804 9158 B5 96			lda :STACKORIGIN,x
 16805 915A 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 16806 915D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16807 915F 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 16808 9162 CA				dex
 16809 9163 20 A6 46			jsr SET_BALL_DIRECTION
 16810
 16811 				; optimize OK (service.pas), line = 3370
 16812
 16813 9166 AD 28 96			lda BALL0
 16814 9169 8D DD 9F			sta SET_BALL_SPEED.BALL
 16815 916C AD 29 96			lda BALL0+1
 16816 916F 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 16817 9172 A9 F4			lda #$F4
 16818 9174 8D E1 9F			sta SET_BALL_SPEED.SPEED
 16819 9177 A9 01			lda #$01
 16820 9179 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 16821 917C 20 C3 44			jsr SET_BALL_SPEED
 16822
 16823 				; optimize OK (service.pas), line = 3373
 16824
 16825 917F A9 00			lda #$00
 16826 9181 8D 74 A1			sta BALL0.FINESPEED
 16827 9184 8D 75 A1			sta BALL0.FINESPEED+1
 16828
 16829 				; optimize OK (service.pas), line = 3375
 16830
 16831 9187 8D 99 A1			sta BALL1.INPLAY
 16832
 16833 				; optimize OK (service.pas), line = 3376
 16834
 16835 918A 8D B5 A1			sta BALL2.INPLAY
 16836
 16837 				; optimize OK (service.pas), line = 3378
 16838
 16839 918D AD D8 9E			lda VAUS.X
 16840 9190 8D 59 A1			sta X
 16841 9193 A9 00			lda #$00
 16842 9195 8D 5A A1			sta X+1
 16843
 16844 				; --- WhileProlog
 16845 9198 4C 06 96			jmp l_33BB
 16846 919B			l_33BC
 16847
 16848 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3382
 16849
 16850 919B 20 E6 43			jsr WAIT_VBL
 16851
 16852 				; optimize OK (service.pas), line = 3391
 16853
 16854 919E A9 59			lda <X
 16855 91A0 8D 5D 9F			sta MOUSECOORDS.X
 16856 91A3 A9 A1			lda >X
 16857 91A5 8D 5E 9F			sta MOUSECOORDS.X+1
 16858 91A8 20 CE 39			jsr MOUSECOORDS
 16859
 16860 				; optimize OK (service.pas), line = 3396
 16861
 16862 91AB AD 3C 9F			lda TRAINER
 16863 91AE D0 19			jne l_33D1
 16864 91B0 AD 59 A1			lda X
 16865 91B3 8D 3E A0			sta MOVE_VAUS.X
 16866 91B6 AD 5A A1			lda X+1
 16867 91B9 8D 3F A0			sta MOVE_VAUS.X+1
 16868 91BC A9 B8			lda #$B8
 16869 91BE 8D 40 A0			sta MOVE_VAUS.Y
 16870 91C1 A9 00			lda #$00
 16871 91C3 8D 41 A0			sta MOVE_VAUS.Y+1
 16872 91C6 4C 33 92			jmp l_33DF
 16873 91C9			l_33D1
 16874
 16875 				; optimize OK (service.pas), line = 3402
 16876
 16877 91C9 AD 3C 9F			lda TRAINER
 16878 91CC C9 01			cmp #$01
 16879 91CE D0 66			jne l_33F1
 16880
 16881 				; optimize FAIL (1, service.pas), line = 3403
 16882
 16883 91D0 E8				inx
 16884 91D1 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 16885 91D5 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16886 91D9 E8				inx
 16887 91DA A9 0A 95 96			mva #$0A :STACKORIGIN,x
 16888 91DE A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16889 91E2 AD 66 A1			lda BALL0.X
 16890 91E5 38 ED 7F A1			sub BALL0.ONVAUS
 16891 91E9 8D 93 9F			sta MAX.A
 16892 91EC AD 67 A1			lda BALL0.X+1
 16893 91EF ED 80 A1			sbc BALL0.ONVAUS+1
 16894 91F2 8D 94 9F			sta MAX.A+1
 16895 91F5 B5 96			lda :STACKORIGIN,x
 16896 91F7 8D 95 9F			sta MAX.B
 16897 91FA B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16898 91FC 8D 96 9F			sta MAX.B+1
 16899 91FF CA				dex
 16900 9200 20 54 3C			jsr MAX
 16901 9203 A9 B8			lda #$B8
 16902 9205 8D 99 9F			sta MIN.A
 16903 9208 A9 00			lda #$00
 16904 920A 8D 9A 9F			sta MIN.A+1
 16905 920D AD 97 9F			lda MAX.RESULT
 16906 9210 8D 9B 9F			sta MIN.B
 16907 9213 AD 98 9F			lda MAX.RESULT+1
 16908 9216 8D 9C 9F			sta MIN.B+1
 16909 9219 20 7F 3C			jsr MIN
 16910 921C AD 9D 9F			lda MIN.RESULT
 16911 921F 8D 3E A0			sta MOVE_VAUS.X
 16912 9222 AD 9E 9F			lda MIN.RESULT+1
 16913 9225 8D 3F A0			sta MOVE_VAUS.X+1
 16914 9228 B5 96			lda :STACKORIGIN,x
 16915 922A 8D 40 A0			sta MOVE_VAUS.Y
 16916 922D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16917 922F 8D 41 A0			sta MOVE_VAUS.Y+1
 16918 9232 CA				dex
 16919 9233			l_33DF
 16920 9233 20 A9 53			jsr MOVE_VAUS
 16921 9236			l_33F1
 16922
 16923 				; optimize OK (service.pas), line = 3408
 16924
 16925 9236 AD 7E A1			lda BALL0.LAUNCH
 16926 9239 C9 01			cmp #$01
 16927 923B D0 30			jne l_3413
 16928
 16929 				; optimize FAIL (0, service.pas), line = 3410
 16930
 16931 923D EE 81 A1			inc BALL0.STM
 16932
 16933 				; optimize OK (service.pas), line = 3415
 16934
 16935 9240 AD 81 A1			lda BALL0.STM
 16936 9243 C9 FA			cmp #$FA
 16937 9245 D0 05			jne l_342A
 16938 9247 A9 00			lda #$00
 16939 9249 8D 7E A1			sta BALL0.LAUNCH
 16940 924C			l_342A
 16941
 16942 				; optimize OK (service.pas), line = 3418
 16943
 16944 924C AD 28 96			lda BALL0
 16945 924F 8D 05 A0			sta START_BALL.BALL
 16946 9252 AD 29 96			lda BALL0+1
 16947 9255 8D 06 A0			sta START_BALL.BALL+1
 16948 9258 20 A7 4A			jsr START_BALL
 16949
 16950 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3421
 16951
 16952 925B 20 4F 3A			jsr MOUSECLICK
 16953 925E AD 61 9F			lda MOUSECLICK.RESULT
 16954 9261 C9 01			cmp #$01
 16955 9263 D0 05			jne l_3444
 16956 9265 A9 00			lda #$00
 16957 9267 8D 7E A1			sta BALL0.LAUNCH
 16958 926A			l_3444
 16959 926A 4C A9 92			jmp l_3454
 16960 926D			l_3413
 16961
 16962 				; optimize OK (service.pas), line = 3429
 16963
 16964 926D AD 7D A1			lda BALL0.INPLAY
 16965 9270 F0 0F			jeq l_3460
 16966 9272 AD 28 96			lda BALL0
 16967 9275 8D 2F A0			sta MOVE_BALL.BALL
 16968 9278 AD 29 96			lda BALL0+1
 16969 927B 8D 30 A0			sta MOVE_BALL.BALL+1
 16970 927E 20 BC 4B			jsr MOVE_BALL
 16971 9281			l_3460
 16972
 16973 				; optimize OK (service.pas), line = 3430
 16974
 16975 9281 AD 99 A1			lda BALL1.INPLAY
 16976 9284 F0 0F			jeq l_3472
 16977 9286 AD 2A 96			lda BALL1
 16978 9289 8D 2F A0			sta MOVE_BALL.BALL
 16979 928C AD 2B 96			lda BALL1+1
 16980 928F 8D 30 A0			sta MOVE_BALL.BALL+1
 16981 9292 20 BC 4B			jsr MOVE_BALL
 16982 9295			l_3472
 16983
 16984 				; optimize OK (service.pas), line = 3431
 16985
 16986 9295 AD B5 A1			lda BALL2.INPLAY
 16987 9298 F0 0F			jeq l_3484
 16988 929A AD 2C 96			lda BALL2
 16989 929D 8D 2F A0			sta MOVE_BALL.BALL
 16990 92A0 AD 2D 96			lda BALL2+1
 16991 92A3 8D 30 A0			sta MOVE_BALL.BALL+1
 16992 92A6 20 BC 4B			jsr MOVE_BALL
 16993 92A9			l_3484
 16994 92A9			l_3454
 16995
 16996 				; optimize OK (service.pas), line = 3439
 16997
 16998 92A9 AD 28 96			lda BALL0
 16999 92AC 8D BA A1			sta CHECK_BALL.BALL
 17000 92AF AD 29 96			lda BALL0+1
 17001 92B2 8D BB A1			sta CHECK_BALL.BALL+1
 17002 92B5 20 23 8E			jsr CHECK_BALL
 17003
 17004 				; optimize OK (service.pas), line = 3440
 17005
 17006 92B8 AD 2A 96			lda BALL1
 17007 92BB 8D BA A1			sta CHECK_BALL.BALL
 17008 92BE AD 2B 96			lda BALL1+1
 17009 92C1 8D BB A1			sta CHECK_BALL.BALL+1
 17010 92C4 20 23 8E			jsr CHECK_BALL
 17011
 17012 				; optimize OK (service.pas), line = 3441
 17013
 17014 92C7 AD 2C 96			lda BALL2
 17015 92CA 8D BA A1			sta CHECK_BALL.BALL
 17016 92CD AD 2D 96			lda BALL2+1
 17017 92D0 8D BB A1			sta CHECK_BALL.BALL+1
 17018 92D3 20 23 8E			jsr CHECK_BALL
 17019
 17020 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3456
 17021
 17022 92D6 20 43 3F			jsr CHECKSHINE
 17023
 17024 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3457
 17025
 17026 92D9 20 59 41			jsr CHECK_LETTER
 17027
 17028 				; optimize OK (service.pas), line = 3458
 17029
 17030 92DC AD 28 96			lda BALL0
 17031 92DF 8D 43 A1			sta CHECK_BONUS_TYPE.B1
 17032 92E2 AD 29 96			lda BALL0+1
 17033 92E5 8D 44 A1			sta CHECK_BONUS_TYPE.B1+1
 17034 92E8 AD 2A 96			lda BALL1
 17035 92EB 8D 47 A1			sta CHECK_BONUS_TYPE.B2
 17036 92EE AD 2B 96			lda BALL1+1
 17037 92F1 8D 48 A1			sta CHECK_BONUS_TYPE.B2+1
 17038 92F4 AD 2C 96			lda BALL2
 17039 92F7 8D 4B A1			sta CHECK_BONUS_TYPE.B3
 17040 92FA AD 2D 96			lda BALL2+1
 17041 92FD 8D 4C A1			sta CHECK_BONUS_TYPE.B3+1
 17042 9300 20 09 8A			jsr CHECK_BONUS_TYPE
 17043
 17044 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3459
 17045
 17046 9303 20 9F 86			jsr CHECK_FIRE
 17047
 17048 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3460
 17049
 17050 9306 20 66 88			jsr CHECK_FLUX
 17051
 17052 				; optimize OK (service.pas), line = 3462
 17053
 17054 9309 AD D8 9E			lda VAUS.X
 17055 930C 18 6D E0 9E			add VAUS.WIDTH
 17056 9310 85 9F			sta :STACKORIGIN+9
 17057 9312 A9 00			lda #$00
 17058 9314 69 00			adc #$00
 17059 9316 A0 01			ldy #1
 17060 9318 C9 00			cmp #$00
 17061 931A D0 04			bne @+
 17062 931C A5 9F			lda :STACKORIGIN+9
 17063 931E C9 D7			cmp #$D7
 17064 				@
 17065 9320 F0 01			beq @+
 17066 9322 88				dey
 17067 				@
 17068 9323 98				tya
 17069 9324 2D 54 9F			and SCRFLUX
 17070 9327 F0 03			jeq l_34BC
 17071 9329 20 03 89			jsr VAUS_OUT
 17072 932C			l_34BC
 17073
 17074 				; optimize OK (service.pas), line = 3464
 17075
 17076 932C AD E4 9E			lda VAUS.LETTER
 17077 932F C9 04			cmp #$04
 17078 9331 F0 03 4C 76 94		jne l_34D2
 17079
 17080 				; optimize OK (service.pas), line = 3466
 17081
 17082 9336 A9 03			lda #$03
 17083 9338 8D 53 9F			sta BALLS_IN_PLAY
 17084
 17085 				; optimize OK (service.pas), line = 3468
 17086
 17087 933B AC 2A 96 84 84 AC + 	mwy BALL1 :bp2
 17088 9345 A0 1B			ldy #$1B
 17089 9347 B9 66 A1 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17090
 17091 				; optimize OK (service.pas), line = 3469
 17092
 17093 934F AC 2C 96 84 84 AC + 	mwy BALL2 :bp2
 17094 9359 A0 1B			ldy #$1B
 17095 935B B9 66 A1 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17096
 17097 				; optimize OK (service.pas), line = 3471
 17098
 17099 9363 AD 28 96			lda BALL0
 17100 9366 8D FD 9F			sta GET_BALL_DIRECTION.BALL
 17101 9369 AD 29 96			lda BALL0+1
 17102 936C 8D FE 9F			sta GET_BALL_DIRECTION.BALL+1
 17103 936F 20 89 48			jsr GET_BALL_DIRECTION
 17104 9372 E8				inx
 17105 9373 E8				inx
 17106 9374 A9 5A			lda #$5A
 17107 9376 85 8E			sta @SMALLINT.DIV.B
 17108 9378 A9 00			lda #$00
 17109 937A 85 8F			sta @SMALLINT.DIV.B+1
 17110 937C AD 01 A0			lda GET_BALL_DIRECTION.RESULT
 17111 937F 85 86			sta @SMALLINT.DIV.A
 17112 9381 AD 02 A0			lda GET_BALL_DIRECTION.RESULT+1
 17113 9384 85 87			sta @SMALLINT.DIV.A+1
 17114 9386 20 33 22			jsr @SMALLINT.DIV
 17115 9389 CA				dex
 17116 938A A5 86			lda :eax
 17117 938C 8D 5F A1			sta T1
 17118 938F A5 87			lda :eax+1
 17119 9391 8D 60 A1			sta T1+1
 17120 9394 CA				dex
 17121
 17122 				; optimize OK (service.pas), line = 3473
 17123
 17124 9395 AD 72 A1			lda BALL0.SPEED
 17125 9398 8D 61 A1			sta T2
 17126 939B AD 73 A1			lda BALL0.SPEED+1
 17127 939E 8D 62 A1			sta T2+1
 17128
 17129 				; optimize OK (service.pas), line = 3480
 17130
 17131 93A1 A9 5A			lda #$5A
 17132 93A3 85 8E			sta :ecx
 17133 93A5 A9 00			lda #$00
 17134 93A7 85 8F			sta :ecx+1
 17135 93A9 AD 5F A1			lda T1
 17136 93AC 85 86			sta :eax
 17137 93AE AD 60 A1			lda T1+1
 17138 93B1 85 87			sta :eax+1
 17139 					.ifdef fmulinit
 17140 					fmulu_16
 17141 					els
 17142 93B3 20 0B 23			imulCX
 17143 					eif
 17144 93B6 A5 86			lda :eax
 17145 93B8 8D 63 A1			sta HLP
 17146 93BB A5 87			lda :eax+1
 17147 93BD 8D 64 A1			sta HLP+1
 17148
 17149 				; optimize OK (service.pas), line = 3482
 17150
 17151 93C0 AD 63 A1			lda HLP
 17152 93C3 18 69 1E			add #$1E
 17153 93C6 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 17154 93C9 AD 64 A1			lda HLP+1
 17155 93CC 69 00			adc #$00
 17156 93CE 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17157 93D1 AD 28 96			lda BALL0
 17158 93D4 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 17159 93D7 AD 29 96			lda BALL0+1
 17160 93DA 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 17161 93DD 20 A6 46			jsr SET_BALL_DIRECTION
 17162
 17163 				; optimize OK (service.pas), line = 3483
 17164
 17165 93E0 AD 63 A1			lda HLP
 17166 93E3 18 69 2D			add #$2D
 17167 93E6 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 17168 93E9 AD 64 A1			lda HLP+1
 17169 93EC 69 00			adc #$00
 17170 93EE 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17171 93F1 AD 2A 96			lda BALL1
 17172 93F4 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 17173 93F7 AD 2B 96			lda BALL1+1
 17174 93FA 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 17175 93FD 20 A6 46			jsr SET_BALL_DIRECTION
 17176
 17177 				; optimize OK (service.pas), line = 3484
 17178
 17179 9400 AD 63 A1			lda HLP
 17180 9403 18 69 3C			add #$3C
 17181 9406 8D F7 9F			sta SET_BALL_DIRECTION.ANGLE
 17182 9409 AD 64 A1			lda HLP+1
 17183 940C 69 00			adc #$00
 17184 940E 8D F8 9F			sta SET_BALL_DIRECTION.ANGLE+1
 17185 9411 AD 2C 96			lda BALL2
 17186 9414 8D F3 9F			sta SET_BALL_DIRECTION.BALL
 17187 9417 AD 2D 96			lda BALL2+1
 17188 941A 8D F4 9F			sta SET_BALL_DIRECTION.BALL+1
 17189 941D 20 A6 46			jsr SET_BALL_DIRECTION
 17190
 17191 				; optimize OK (service.pas), line = 3488
 17192
 17193 9420 AD 28 96			lda BALL0
 17194 9423 8D DD 9F			sta SET_BALL_SPEED.BALL
 17195 9426 AD 29 96			lda BALL0+1
 17196 9429 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 17197 942C AD 61 A1			lda T2
 17198 942F 8D E1 9F			sta SET_BALL_SPEED.SPEED
 17199 9432 AD 62 A1			lda T2+1
 17200 9435 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 17201 9438 20 C3 44			jsr SET_BALL_SPEED
 17202
 17203 				; optimize OK (service.pas), line = 3489
 17204
 17205 943B AD 2A 96			lda BALL1
 17206 943E 8D DD 9F			sta SET_BALL_SPEED.BALL
 17207 9441 AD 2B 96			lda BALL1+1
 17208 9444 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 17209 9447 AD 61 A1			lda T2
 17210 944A 8D E1 9F			sta SET_BALL_SPEED.SPEED
 17211 944D AD 62 A1			lda T2+1
 17212 9450 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 17213 9453 20 C3 44			jsr SET_BALL_SPEED
 17214
 17215 				; optimize OK (service.pas), line = 3490
 17216
 17217 9456 AD 2C 96			lda BALL2
 17218 9459 8D DD 9F			sta SET_BALL_SPEED.BALL
 17219 945C AD 2D 96			lda BALL2+1
 17220 945F 8D DE 9F			sta SET_BALL_SPEED.BALL+1
 17221 9462 AD 61 A1			lda T2
 17222 9465 8D E1 9F			sta SET_BALL_SPEED.SPEED
 17223 9468 AD 62 A1			lda T2+1
 17224 946B 8D E2 9F			sta SET_BALL_SPEED.SPEED+1
 17225 946E 20 C3 44			jsr SET_BALL_SPEED
 17226
 17227 				; optimize OK (service.pas), line = 3492
 17228
 17229 9471 A9 00			lda #$00
 17230 9473 8D E4 9E			sta VAUS.LETTER
 17231 9476			l_34D2
 17232
 17233 				; optimize OK (service.pas), line = 3496
 17234
 17235 9476 AD 53 9F			lda BALLS_IN_PLAY
 17236 9479 C9 02			cmp #$02
 17237 947B 90 08			jcc l_3535
 17238 947D A9 00			lda #$00
 17239 947F 8D 44 9F			sta LETT.INCOMING
 17240 9482 8D 45 9F			sta LETT.INCOMING+1
 17241 9485			l_3535
 17242
 17243 				; optimize OK (service.pas), line = 3499
 17244
 17245 9485 AD 34 9F			lda CUR_PLAYER
 17246 9488 0A				asl @
 17247 9489 0A				asl @
 17248 948A A8				tay
 17249 948B B9 19 9F			lda adr.SCORE.PLAYER,y
 17250 948E 8D 17 A1			sta WRITE_SCORE.SC
 17251 9491 B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 17252 9494 8D 18 A1			sta WRITE_SCORE.SC+1
 17253 9497 B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 17254 949A 8D 19 A1			sta WRITE_SCORE.SC+2
 17255 949D B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 17256 94A0 8D 1A A1			sta WRITE_SCORE.SC+3
 17257 94A3 AC 34 9F			ldy CUR_PLAYER
 17258 94A6 B9 92 20			lda adr.POS_DIGIT,y
 17259 94A9 8D 15 A1			sta WRITE_SCORE.PY
 17260 94AC A9 FD			lda #$FD
 17261 94AE 8D 13 A1			sta WRITE_SCORE.PX
 17262 94B1 A9 00			lda #$00
 17263 94B3 8D 14 A1			sta WRITE_SCORE.PX+1
 17264 94B6 8D 16 A1			sta WRITE_SCORE.PY+1
 17265 94B9 20 A5 7F			jsr WRITE_SCORE
 17266
 17267 				; optimize OK (service.pas), line = 3502
 17268
 17269 94BC AD 34 9F			lda CUR_PLAYER
 17270 94BF 0A				asl @
 17271 94C0 0A				asl @
 17272 94C1 A8				tay
 17273 94C2				.LOCAL
 17274 94C2 B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 17275 94C5 38 ED 2E 9F			sub SCORE.HISCORE+3
 17276 94C9 D0 22			bne L4
 17277 94CB B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 17278 94CE CD 2D 9F			cmp SCORE.HISCORE+2
 17279 94D1 D0 0E			bne L1
 17280 94D3 B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 17281 94D6 CD 2C 9F			cmp SCORE.HISCORE+1
 17282 94D9 D0 06			bne L1
 17283 94DB B9 19 9F			lda adr.SCORE.PLAYER,y
 17284 94DE CD 2B 9F			cmp SCORE.HISCORE
 17285 94E1 F0 10		L1	beq L5
 17286 94E3 B0 04			bcs L3
 17287 94E5 A9 FF			lda #$FF
 17288 94E7 D0 0A			bne L5
 17289 94E9 A9 01		L3	lda #$01
 17290 94EB D0 06			bne L5
 17291 94ED 50 04		L4	bvc L5
 17292 94EF 49 FF			eor #$FF
 17293 94F1 09 01			ora #$01
 17294 94F3			L5
 17295 					.ENDL
 17296 94F3 30 49			jmi l_355B
 17297 94F5 F0 47			jeq l_355B
 17298
 17299 				; optimize OK (service.pas), line = 3505
 17300
 17301 94F7 B9 19 9F			lda adr.SCORE.PLAYER,y
 17302 94FA 8D 2B 9F			sta SCORE.HISCORE
 17303 94FD B9 1A 9F			lda adr.SCORE.PLAYER+1,y
 17304 9500 8D 2C 9F			sta SCORE.HISCORE+1
 17305 9503 B9 1B 9F			lda adr.SCORE.PLAYER+2,y
 17306 9506 8D 2D 9F			sta SCORE.HISCORE+2
 17307 9509 B9 1C 9F			lda adr.SCORE.PLAYER+3,y
 17308 950C 8D 2E 9F			sta SCORE.HISCORE+3
 17309
 17310 				; optimize OK (service.pas), line = 3507
 17311
 17312 950F A9 FD			lda #$FD
 17313 9511 8D 13 A1			sta WRITE_SCORE.PX
 17314 9514 A9 00			lda #$00
 17315 9516 8D 14 A1			sta WRITE_SCORE.PX+1
 17316 9519 A9 80			lda #$80
 17317 951B 8D 15 A1			sta WRITE_SCORE.PY
 17318 951E A9 00			lda #$00
 17319 9520 8D 16 A1			sta WRITE_SCORE.PY+1
 17320 9523 AD 2B 9F			lda SCORE.HISCORE
 17321 9526 8D 17 A1			sta WRITE_SCORE.SC
 17322 9529 AD 2C 9F			lda SCORE.HISCORE+1
 17323 952C 8D 18 A1			sta WRITE_SCORE.SC+1
 17324 952F AD 2D 9F			lda SCORE.HISCORE+2
 17325 9532 8D 19 A1			sta WRITE_SCORE.SC+2
 17326 9535 AD 2E 9F			lda SCORE.HISCORE+3
 17327 9538 8D 1A A1			sta WRITE_SCORE.SC+3
 17328 953B 20 A5 7F			jsr WRITE_SCORE
 17329 953E			l_355B
 17330
 17331 				; optimize OK (service.pas), line = 3514
 17332
 17333 953E AD 28 96			lda BALL0
 17334 9541 8D BE A1			sta TEST_BALL.BALL
 17335 9544 AD 29 96			lda BALL0+1
 17336 9547 8D BF A1			sta TEST_BALL.BALL+1
 17337 954A 20 99 8E			jsr TEST_BALL
 17338
 17339 				; optimize OK (service.pas), line = 3515
 17340
 17341 954D AD 2A 96			lda BALL1
 17342 9550 8D BE A1			sta TEST_BALL.BALL
 17343 9553 AD 2B 96			lda BALL1+1
 17344 9556 8D BF A1			sta TEST_BALL.BALL+1
 17345 9559 20 99 8E			jsr TEST_BALL
 17346
 17347 				; optimize OK (service.pas), line = 3516
 17348
 17349 955C AD 2C 96			lda BALL2
 17350 955F 8D BE A1			sta TEST_BALL.BALL
 17351 9562 AD 2D 96			lda BALL2+1
 17352 9565 8D BF A1			sta TEST_BALL.BALL+1
 17353 9568 20 99 8E			jsr TEST_BALL
 17354
 17355 				; optimize OK (service.pas), line = 3557
 17356
 17357 956B AD 7D A1			lda BALL0.INPLAY
 17358 956E D0 2B			jne l_3581
 17359
 17360 				; optimize OK (service.pas), line = 3559
 17361
 17362 9570 AC 28 96 84 84 AC + 	mwy BALL0 :bp2
 17363 957A A0 1B			ldy #$1B
 17364 957C B9 82 A1 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17365
 17366 				; optimize OK (service.pas), line = 3560
 17367
 17368 9584 AC 2A 96 84 84 AC + 	mwy BALL1 :bp2
 17369 958E A0 1B			ldy #$1B
 17370 9590 B9 9E A1 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17371
 17372 				; optimize OK (service.pas), line = 3561
 17373
 17374 9598 8D B5 A1			sta BALL2.INPLAY
 17375 959B			l_3581
 17376
 17377 				; optimize OK (service.pas), line = 3564
 17378
 17379 959B A9 00			lda #$00
 17380 959D 8D 53 9F			sta BALLS_IN_PLAY
 17381
 17382 				; optimize OK (service.pas), line = 3566
 17383
 17384 95A0 AD 7D A1			lda BALL0.INPLAY
 17385 95A3 F0 03			jeq l_359C
 17386 95A5 EE 53 9F			inc BALLS_IN_PLAY
 17387 95A8			l_359C
 17388
 17389 				; optimize OK (service.pas), line = 3567
 17390
 17391 95A8 AD 99 A1			lda BALL1.INPLAY
 17392 95AB F0 03			jeq l_35AF
 17393 95AD EE 53 9F			inc BALLS_IN_PLAY
 17394 95B0			l_35AF
 17395
 17396 				; optimize OK (service.pas), line = 3568
 17397
 17398 95B0 AD B5 A1			lda BALL2.INPLAY
 17399 95B3 F0 03			jeq l_35C2
 17400 95B5 EE 53 9F			inc BALLS_IN_PLAY
 17401 95B8			l_35C2
 17402
 17403 				; optimize OK (service.pas), line = 3571
 17404
 17405 95B8 AD 7D A1			lda BALL0.INPLAY
 17406 95BB D0 49			jne l_35D8
 17407
 17408 				; optimize OK (service.pas), line = 3573
 17409
 17410 95BD A9 01			lda #$01
 17411 95BF 8D 7E A1			sta BALL0.LAUNCH
 17412
 17413 				; optimize OK (service.pas), line = 3574
 17414
 17415 95C2 AD 28 96			lda BALL0
 17416 95C5 8D D3 9F			sta REMOVE_BALL.BALL
 17417 95C8 AD 29 96			lda BALL0+1
 17418 95CB 8D D4 9F			sta REMOVE_BALL.BALL+1
 17419 95CE 20 60 43			jsr REMOVE_BALL
 17420
 17421 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3575
 17422
 17423 95D1 20 EB 77			jsr DESTROY_VAUS
 17424
 17425 				; optimize OK (service.pas), line = 3576
 17426
 17427 95D4 AC 34 9F			ldy CUR_PLAYER
 17428 95D7 B9 28 9F			lda adr.SCORE.LIVES,y
 17429 95DA 38 E9 01			sub #$01
 17430 95DD 99 28 9F			sta adr.SCORE.LIVES,y
 17431
 17432 				; optimize OK (service.pas), line = 3577
 17433
 17434 95E0 AD 4F 9D			lda WALL_P
 17435 95E3 85 8E			sta @move.dst
 17436 95E5 AD 34 9F			lda CUR_PLAYER
 17437 95E8 18 6D 50 9D			add WALL_P+1
 17438 95EC 85 8F			sta @move.dst+1
 17439 95EE AD 51 9D			lda WALL
 17440 95F1 85 8A			sta @move.src
 17441 95F3 AD 52 9D			lda WALL+1
 17442 95F6 85 8B			sta @move.src+1
 17443 95F8 A9 00			lda <256
 17444 95FA 85 86			sta @move.cnt
 17445 95FC A9 01			lda >256
 17446 95FE 85 87			sta @move.cnt+1
 17447 9600 20 B6 21			jsr @move
 17448
 17449 				; optimize FAIL ('NOSOUND', service.pas), line = 3585
 17450
 17451 9603 20 52 3C			jsr NOSOUND
 17452 9606			l_35D8
 17453 9606			l_33BB
 17454
 17455 				; optimize OK (service.pas), line = 3380
 17456
 17457 9606 AD 17 9F			lda REMAIN_BLK
 17458 9609 F0 0D			jeq l_33BCw
 17459 960B AD 7D A1			lda BALL0.INPLAY
 17460 960E F0 08			jeq l_33BCw
 17461 9610 AD 33 9F			lda SCORE.ABORTPLAY
 17462 9613 D0 03 4C 9B 91		jeq l_33BC
 17463 9618			l_33BCw
 17464
 17465 				; optimize OK (service.pas), line = 3641
 17466
 17467 9618 A9 00			lda #$00
 17468 961A 8D 58 A1			sta RESULT
 17469
 17470 				; optimize OK (service.pas), line = 3642
 17471
 17472 961D AD 17 9F			lda REMAIN_BLK
 17473 9620 D0 05			jne l_3626
 17474 9622 A9 01			lda #$01
 17475 9624 8D 58 A1			sta RESULT
 17476 9627			l_3626
 17477 9627			@exit
 17478
 17479 				; ------------------------------------------------------------
 17480
 17481 = A158			RESULT	= DATAORIGIN+$03F4
 17482 = A159			X	= DATAORIGIN+$03F5
 17483 = A15B			Y	= DATAORIGIN+$03F7
 17484 = A15D			KEY	= DATAORIGIN+$03F9
 17485 = A15F			T1	= DATAORIGIN+$03FB
 17486 = A161			T2	= DATAORIGIN+$03FD
 17487 = A163			HLP	= DATAORIGIN+$03FF
 17488 = A165			CN	= DATAORIGIN+$0401
 17489 = A166			adr.BALL0	= DATAORIGIN+$0402	; [28] RECORD
 17490 9627			.var BALL0	= adr.BALL0 .word
 17491 = A166			BALL0.X	= DATAORIGIN+$0402
 17492 = A168			BALL0.Y	= DATAORIGIN+$0404
 17493 = A16A			BALL0.FINEX	= DATAORIGIN+$0406
 17494 = A16C			BALL0.FINEY	= DATAORIGIN+$0408
 17495 = A16E			BALL0.OLDX	= DATAORIGIN+$040A
 17496 = A170			BALL0.OLDY	= DATAORIGIN+$040C
 17497 = A172			BALL0.SPEED	= DATAORIGIN+$040E
 17498 = A174			BALL0.FINESPEED	= DATAORIGIN+$0410
 17499 = A176			BALL0.SPEEDX	= DATAORIGIN+$0412
 17500 = A178			BALL0.SPEEDY	= DATAORIGIN+$0414
 17501 = A17A			BALL0.SBD	= DATAORIGIN+$0416
 17502 = A17C			BALL0.BRWHIT	= DATAORIGIN+$0418
 17503 = A17D			BALL0.INPLAY	= DATAORIGIN+$0419
 17504 = A17E			BALL0.LAUNCH	= DATAORIGIN+$041A
 17505 = A17F			BALL0.ONVAUS	= DATAORIGIN+$041B
 17506 = A181			BALL0.STM	= DATAORIGIN+$041D
 17507 = A182			adr.BALL1	= DATAORIGIN+$041E	; [28] RECORD
 17508 9627			.var BALL1	= adr.BALL1 .word
 17509 = A182			BALL1.X	= DATAORIGIN+$041E
 17510 = A184			BALL1.Y	= DATAORIGIN+$0420
 17511 = A186			BALL1.FINEX	= DATAORIGIN+$0422
 17512 = A188			BALL1.FINEY	= DATAORIGIN+$0424
 17513 = A18A			BALL1.OLDX	= DATAORIGIN+$0426
 17514 = A18C			BALL1.OLDY	= DATAORIGIN+$0428
 17515 = A18E			BALL1.SPEED	= DATAORIGIN+$042A
 17516 = A190			BALL1.FINESPEED	= DATAORIGIN+$042C
 17517 = A192			BALL1.SPEEDX	= DATAORIGIN+$042E
 17518 = A194			BALL1.SPEEDY	= DATAORIGIN+$0430
 17519 = A196			BALL1.SBD	= DATAORIGIN+$0432
 17520 = A198			BALL1.BRWHIT	= DATAORIGIN+$0434
 17521 = A199			BALL1.INPLAY	= DATAORIGIN+$0435
 17522 = A19A			BALL1.LAUNCH	= DATAORIGIN+$0436
 17523 = A19B			BALL1.ONVAUS	= DATAORIGIN+$0437
 17524 = A19D			BALL1.STM	= DATAORIGIN+$0439
 17525 = A19E			adr.BALL2	= DATAORIGIN+$043A	; [28] RECORD
 17526 9627			.var BALL2	= adr.BALL2 .word
 17527 = A19E			BALL2.X	= DATAORIGIN+$043A
 17528 = A1A0			BALL2.Y	= DATAORIGIN+$043C
 17529 = A1A2			BALL2.FINEX	= DATAORIGIN+$043E
 17530 = A1A4			BALL2.FINEY	= DATAORIGIN+$0440
 17531 = A1A6			BALL2.OLDX	= DATAORIGIN+$0442
 17532 = A1A8			BALL2.OLDY	= DATAORIGIN+$0444
 17533 = A1AA			BALL2.SPEED	= DATAORIGIN+$0446
 17534 = A1AC			BALL2.FINESPEED	= DATAORIGIN+$0448
 17535 = A1AE			BALL2.SPEEDX	= DATAORIGIN+$044A
 17536 = A1B0			BALL2.SPEEDY	= DATAORIGIN+$044C
 17537 = A1B2			BALL2.SBD	= DATAORIGIN+$044E
 17538 = A1B4			BALL2.BRWHIT	= DATAORIGIN+$0450
 17539 = A1B5			BALL2.INPLAY	= DATAORIGIN+$0451
 17540 = A1B6			BALL2.LAUNCH	= DATAORIGIN+$0452
 17541 = A1B7			BALL2.ONVAUS	= DATAORIGIN+$0453
 17542 = A1B9			BALL2.STM	= DATAORIGIN+$0455
 17543
 17544 = A159			@VarData	= X
 17545 = 0061			@VarDataSize	= 97
 17546
 17547 9627 60				rts						; ret
 17548 = 9628 66 A1		BALL0
 17548 = 962A 82 A1		BALL1
 17548 = 962C 9E A1		BALL2
 17548 				.endl
 17549
 17550 962E			.local	CHOOSE_START_WALL				; FUNCTION
 17551
 17552 				; optimize OK (service.pas), line = 3665
 17553
 17554 962E A9 01			lda #$01
 17555 9630 8D C8 A1			sta ST
 17556 9633 A9 00			lda #$00
 17557 9635 8D C9 A1			sta ST+1
 17558
 17559 				; optimize OK (service.pas), line = 3723
 17560
 17561 9638 AD C8 A1			lda ST
 17562 963B 8D C2 A1			sta RESULT
 17563 963E AD C9 A1			lda ST+1
 17564 9641 8D C3 A1			sta RESULT+1
 17565 9644			@exit
 17566
 17567 				; ------------------------------------------------------------
 17568
 17569 = A1C2			RESULT	= DATAORIGIN+$045E
 17570 = 0046			PX	= $46
 17571 = 0064			PY	= $64
 17572 = 0022			DX	= $22
 17573 = 0023			DY	= $23
 17574 = 0013			DDX	= $13
 17575 = 000E			DDY	= $0E
 17576 = A1C4			X	= DATAORIGIN+$0460
 17577 = A1C6			Y	= DATAORIGIN+$0462
 17578 = A1C8			ST	= DATAORIGIN+$0464
 17579 = A1CA			OLDX	= DATAORIGIN+$0466
 17580 = A1CC			OLDY	= DATAORIGIN+$0468
 17581 = A1CE			NEWX	= DATAORIGIN+$046A
 17582 = A1D0			NEWY	= DATAORIGIN+$046C
 17583
 17584 = A1C4			@VarData	= X
 17585 = 000E			@VarDataSize	= 14
 17586
 17587 9644 60				rts						; ret
 17588 				.endl
 17589
 17590 9645			.local	SET_START_PARAMETERS				; PROCEDURE
 17591
 17592 				; optimize OK (service.pas), line = 3732
 17593
 17594 9645 A9 01			lda #$01
 17595 9647 8D D2 A1			sta X
 17596
 17597 964A			l_3647
 17598 				; --- ForToDoCondition
 17599 964A AD D2 A1			lda X
 17600 964D C9 03			cmp #$03
 17601 964F B0 4E			jcs l_3655
 17602
 17603 				; optimize OK (service.pas), line = 3734
 17604
 17605 9651 0A				asl @
 17606 9652 0A				asl @
 17607 9653 A8				tay
 17608 9654 A9 00			lda #$00
 17609 9656 99 19 9F			sta adr.SCORE.PLAYER,y
 17610 9659 99 1A 9F			sta adr.SCORE.PLAYER+1,y
 17611 965C 99 1B 9F			sta adr.SCORE.PLAYER+2,y
 17612 965F 99 1C 9F			sta adr.SCORE.PLAYER+3,y
 17613
 17614 				; optimize OK (service.pas), line = 3735
 17615
 17616 9662 AC D2 A1			ldy X
 17617 9665 A9 05			lda #$05
 17618 9667 99 28 9F			sta adr.SCORE.LIVES,y
 17619
 17620 				; optimize OK (service.pas), line = 3736
 17621
 17622 966A A9 01			lda #$01
 17623 966C 99 25 9F			sta adr.SCORE.WALL_N,y
 17624
 17625 				; optimize OK (service.pas), line = 3737
 17626
 17627 966F AD 4F 9D			lda WALL_P
 17628 9672 85 8E			sta @move.dst
 17629 9674 AD D2 A1			lda X
 17630 9677 18 6D 50 9D			add WALL_P+1
 17631 967B 85 8F			sta @move.dst+1
 17632 967D AD 53 9D			lda ALL_WALLS
 17633 9680 85 8A			sta @move.src
 17634 9682 AD 54 9D			lda ALL_WALLS+1
 17635 9685 85 8B			sta @move.src+1
 17636 9687 A9 00			lda <256
 17637 9689 85 86			sta @move.cnt
 17638 968B A9 01			lda >256
 17639 968D 85 87			sta @move.cnt+1
 17640 968F 20 B6 21			jsr @move
 17641
 17642 				; optimize OK (service.pas), line = 3739
 17643
 17644 9692 AC D2 A1			ldy X
 17645 9695 A9 00			lda #$00
 17646 9697 99 30 9F			sta adr.SCORE.ROUNDSEL,y
 17647
 17648 				; --- ForToDoEpilog
 17649 969A EE D2 A1			inc X
 17650 969D D0 AB			jne l_3647
 17651 969F			l_3655
 17652
 17653 				; optimize OK (service.pas), line = 3742
 17654
 17655 969F A9 01			lda #$01
 17656 96A1 8D 34 9F			sta CUR_PLAYER
 17657
 17658 				; ------------------------------------------------------------
 17659
 17660 = A1D2			X	= DATAORIGIN+$046E
 17661
 17662 = A1D2			@VarData	= X
 17663 = 0001			@VarDataSize	= 1
 17664
 17665 96A4			@exit
 17666 					.ifdef @new
 17667 					lda <@VarData
 17668 					sta :ztmp
 17669 					lda >@VarData
 17670 					ldy #@VarDataSize-1
 17671 					jmp @FreeMem
 17672 					els
 17673 96A4 60				rts						; ret
 17674 					eif
 17675 				.endl
 17676
 17677 96A5			.local	MAINSCREEN					; FUNCTION
 17678
 17679 				; optimize FAIL ('NOSOUND', service.pas), line = 3802
 17680
 17681 96A5 20 52 3C			jsr NOSOUND
 17682
 17683 				; optimize OK (service.pas), line = 3803
 17684
 17685 96A8 A9 00			lda #$00
 17686 96AA 8D 33 9F			sta SCORE.ABORTPLAY
 17687
 17688 				; optimize OK (service.pas), line = 3814
 17689
 17690 96AD AD 9C 9E			lda PRESENTS.OFS
 17691 96B0 8D 62 9F			sta BLITBOX.SRC
 17692 96B3 AD 9D 9E			lda PRESENTS.OFS+1
 17693 96B6 8D 63 9F			sta BLITBOX.SRC+1
 17694 96B9 AD 9E 9E			lda PRESENTS.OFS+2
 17695 96BC 8D 64 9F			sta BLITBOX.SRC+2
 17696 96BF AD 9F 9E			lda PRESENTS.OFS+3
 17697 96C2 8D 65 9F			sta BLITBOX.SRC+3
 17698 96C5 A9 00			lda #$00
 17699 96C7 8D 66 9F			sta BLITBOX.DST
 17700 96CA A9 50			lda #$50
 17701 96CC 8D 67 9F			sta BLITBOX.DST+1
 17702 96CF A9 00			lda #$00
 17703 96D1 8D 68 9F			sta BLITBOX.DST+2
 17704 96D4 8D 69 9F			sta BLITBOX.DST+3
 17705 96D7 A9 40			lda #$40
 17706 96D9 8D 6A 9F			sta BLITBOX.W
 17707 96DC A9 01			lda #$01
 17708 96DE 8D 6B 9F			sta BLITBOX.W+1
 17709 96E1 A9 C8			lda #$C8
 17710 96E3 8D 6C 9F			sta BLITBOX.H
 17711 96E6 20 58 3A			jsr BLITBOX
 17712
 17713 				; optimize OK (service.pas), line = 3852
 17714
 17715 96E9 A9 01			lda #$01
 17716 96EB 8D D3 A1			sta RESULT
 17717 96EE A9 00			lda #$00
 17718 96F0 8D D4 A1			sta RESULT+1
 17719 96F3			@exit
 17720
 17721 				; ------------------------------------------------------------
 17722
 17723 = A1D3			RESULT	= DATAORIGIN+$046F
 17724 = A1D5			X	= DATAORIGIN+$0471
 17725 = A1D7			Y	= DATAORIGIN+$0473
 17726 = A1D9			Z	= DATAORIGIN+$0475
 17727 = A1DB			K	= DATAORIGIN+$0477
 17728 = A1DD			IK	= DATAORIGIN+$0479
 17729
 17730 = A1D5			@VarData	= X
 17731 = 000A			@VarDataSize	= 10
 17732
 17733 96F3 60				rts						; ret
 17734 				.endl
 17735
 17736 96F4			.local	START_GAME					; PROCEDURE
 17737
 17738 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3860
 17739
 17740 96F4 20 45 96			jsr SET_START_PARAMETERS
 17741
 17742 				; optimize OK (service.pas), line = 3861
 17743
 17744 96F7 AD E0 A1			lda PLAYERS+1
 17745 96FA D0 05			bne @+
 17746 96FC AD DF A1			lda PLAYERS
 17747 96FF C9 01			cmp #$01
 17748 				@
 17749 9701 D0 05			jne l_36B4
 17750 9703 A9 00			lda #$00
 17751 9705 8D 2A 9F			sta adr.SCORE.LIVES+$02
 17752 9708			l_36B4
 17753
 17754 				; optimize OK (service.pas), line = 3864
 17755
 17756 9708 A9 00			lda #$00
 17757 970A 8D 3C 9F			sta TRAINER
 17758
 17759 				; optimize OK (service.pas), line = 3865
 17760
 17761 970D AD 51 9D			lda WALL
 17762 9710 85 8E			sta @move.dst
 17763 9712 AD 52 9D			lda WALL+1
 17764 9715 85 8F			sta @move.dst+1
 17765 9717 AD 4F 9D			lda WALL_P
 17766 971A 85 8A			sta @move.src
 17767 971C AD 34 9F			lda CUR_PLAYER
 17768 971F 18 6D 50 9D			add WALL_P+1
 17769 9723 85 8B			sta @move.src+1
 17770 9725 A9 00			lda <256
 17771 9727 85 86			sta @move.cnt
 17772 9729 A9 01			lda >256
 17773 972B 85 87			sta @move.cnt+1
 17774 972D 20 B6 21			jsr @move
 17775
 17776 				; optimize FAIL ('SET_WALL', service.pas), line = 3869
 17777
 17778 9730 20 02 5C			jsr SET_WALL
 17779
 17780 				; optimize OK (service.pas), line = 3871
 17781
 17782 9733 AD 2B 9D			lda PATTERN
 17783 9736 8D CE A0			sta FILL_PICTURE_WITH_PATTERN.PATT
 17784 9739 AD 2C 9D			lda PATTERN+1
 17785 973C 8D CF A0			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 17786 973F 20 F3 75			jsr FILL_PICTURE_WITH_PATTERN
 17787
 17788 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3872
 17789
 17790 9742 E8				inx
 17791 9743 AD 0B 9D 95 96		mva PLAYSCREEN :STACKORIGIN,x
 17792 9748 AD 0C 9D 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 17793 974D 20 90 42			jsr SHOWBTMPICTURE
 17794
 17795 				; optimize OK (service.pas), line = 3879
 17796
 17797 9750 AD 1D 9F			lda adr.SCORE.PLAYER+$04
 17798 9753 8D 17 A1			sta WRITE_SCORE.SC
 17799 9756 AD 1E 9F			lda adr.SCORE.PLAYER+1+$04
 17800 9759 8D 18 A1			sta WRITE_SCORE.SC+1
 17801 975C AD 1F 9F			lda adr.SCORE.PLAYER+2+$04
 17802 975F 8D 19 A1			sta WRITE_SCORE.SC+2
 17803 9762 AD 20 9F			lda adr.SCORE.PLAYER+3+$04
 17804 9765 8D 1A A1			sta WRITE_SCORE.SC+3
 17805 9768 A9 FD			lda #$FD
 17806 976A 8D 13 A1			sta WRITE_SCORE.PX
 17807 976D A9 00			lda #$00
 17808 976F 8D 14 A1			sta WRITE_SCORE.PX+1
 17809 9772 A9 3C			lda #$3C
 17810 9774 8D 15 A1			sta WRITE_SCORE.PY
 17811 9777 A9 00			lda #$00
 17812 9779 8D 16 A1			sta WRITE_SCORE.PY+1
 17813 977C 20 A5 7F			jsr WRITE_SCORE
 17814
 17815 				; optimize OK (service.pas), line = 3880
 17816
 17817 977F AD 21 9F			lda adr.SCORE.PLAYER+$08
 17818 9782 8D 17 A1			sta WRITE_SCORE.SC
 17819 9785 AD 22 9F			lda adr.SCORE.PLAYER+1+$08
 17820 9788 8D 18 A1			sta WRITE_SCORE.SC+1
 17821 978B AD 23 9F			lda adr.SCORE.PLAYER+2+$08
 17822 978E 8D 19 A1			sta WRITE_SCORE.SC+2
 17823 9791 AD 24 9F			lda adr.SCORE.PLAYER+3+$08
 17824 9794 8D 1A A1			sta WRITE_SCORE.SC+3
 17825 9797 A9 FD			lda #$FD
 17826 9799 8D 13 A1			sta WRITE_SCORE.PX
 17827 979C A9 00			lda #$00
 17828 979E 8D 14 A1			sta WRITE_SCORE.PX+1
 17829 97A1 A9 5D			lda #$5D
 17830 97A3 8D 15 A1			sta WRITE_SCORE.PY
 17831 97A6 A9 00			lda #$00
 17832 97A8 8D 16 A1			sta WRITE_SCORE.PY+1
 17833 97AB 20 A5 7F			jsr WRITE_SCORE
 17834
 17835 				; optimize OK (service.pas), line = 3881
 17836
 17837 97AE A9 FD			lda #$FD
 17838 97B0 8D 13 A1			sta WRITE_SCORE.PX
 17839 97B3 A9 00			lda #$00
 17840 97B5 8D 14 A1			sta WRITE_SCORE.PX+1
 17841 97B8 A9 80			lda #$80
 17842 97BA 8D 15 A1			sta WRITE_SCORE.PY
 17843 97BD A9 00			lda #$00
 17844 97BF 8D 16 A1			sta WRITE_SCORE.PY+1
 17845 97C2 AD 2B 9F			lda SCORE.HISCORE
 17846 97C5 8D 17 A1			sta WRITE_SCORE.SC
 17847 97C8 AD 2C 9F			lda SCORE.HISCORE+1
 17848 97CB 8D 18 A1			sta WRITE_SCORE.SC+1
 17849 97CE AD 2D 9F			lda SCORE.HISCORE+2
 17850 97D1 8D 19 A1			sta WRITE_SCORE.SC+2
 17851 97D4 AD 2E 9F			lda SCORE.HISCORE+3
 17852 97D7 8D 1A A1			sta WRITE_SCORE.SC+3
 17853 97DA 20 A5 7F			jsr WRITE_SCORE
 17854
 17855 				; --- RepeatUntilProlog
 17856 97DD			l_36E3
 17857
 17858 				; --- RepeatUntilProlog
 17859 97DD			l_36E4
 17860
 17861 				; optimize OK (service.pas), line = 3891
 17862
 17863 97DD AC 34 9F			ldy CUR_PLAYER
 17864 97E0 B9 30 9F			lda adr.SCORE.ROUNDSEL,y
 17865 97E3 D0 77			jne l_36F6
 17866
 17867 				; optimize FAIL (1, service.pas), line = 3893
 17868
 17869 97E5 E8				inx
 17870 97E6 AD 34 9F 95 96		mva CUR_PLAYER :STACKORIGIN,x
 17871 97EB A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17872 97EF 20 2E 96			jsr CHOOSE_START_WALL
 17873 97F2 E8				inx
 17874 97F3 AD C2 A1 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 17875 97F8 AD C3 A1 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17876 97FD B4 95			ldy :STACKORIGIN-1,x
 17877 97FF B5 96			lda :STACKORIGIN,x
 17878 9801 99 25 9F			sta adr.SCORE.WALL_N,y
 17879 9804 CA				dex
 17880 9805 CA				dex
 17881
 17882 				; optimize OK (service.pas), line = 3896
 17883
 17884 9806 A9 00			lda #$00
 17885 9808 85 9F			sta :STACKORIGIN+9
 17886 980A AD 34 9F			lda CUR_PLAYER
 17887 980D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17888 980F AC 34 9F			ldy CUR_PLAYER
 17889 9812 B9 25 9F			lda adr.SCORE.WALL_N,y
 17890 9815 38 E9 01			sub #$01
 17891 9818 85 86			sta :eax
 17892 981A A9 00			lda #$00
 17893 981C E9 00			sbc #$00
 17894 981E 85 87			sta :eax+1
 17895 9820 A9 00			lda #$00
 17896 9822 85 8E			sta :ecx
 17897 9824 A9 01			lda #$01
 17898 9826 85 8F			sta :ecx+1
 17899 					.ifdef fmulinit
 17900 					fmulu_16
 17901 					els
 17902 9828 20 0B 23			imulCX
 17903 					eif
 17904 982B AD 4F 9D			lda WALL_P
 17905 982E 18 65 9F			add :STACKORIGIN+9
 17906 9831 85 8E			sta @move.dst
 17907 9833 AD 50 9D			lda WALL_P+1
 17908 9836 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 17909 9838 85 8F			sta @move.dst+1
 17910 983A A5 86			lda :eax
 17911 983C 18 6D 53 9D			add ALL_WALLS
 17912 9840 85 8A			sta @move.src
 17913 9842 A5 87			lda :eax+1
 17914 9844 6D 54 9D			adc ALL_WALLS+1
 17915 9847 85 8B			sta @move.src+1
 17916 9849 A9 00			lda <256
 17917 984B 85 86			sta @move.cnt
 17918 984D A9 01			lda >256
 17919 984F 85 87			sta @move.cnt+1
 17920 9851 20 B6 21			jsr @move
 17921
 17922 				; optimize OK (service.pas), line = 3900
 17923
 17924 9854 AC 34 9F			ldy CUR_PLAYER
 17925 9857 A9 01			lda #$01
 17926 9859 99 30 9F			sta adr.SCORE.ROUNDSEL,y
 17927 985C			l_36F6
 17928
 17929 				; optimize OK (service.pas), line = 3904
 17930
 17931 985C AD 51 9D			lda WALL
 17932 985F 85 8E			sta @move.dst
 17933 9861 AD 52 9D			lda WALL+1
 17934 9864 85 8F			sta @move.dst+1
 17935 9866 AD 4F 9D			lda WALL_P
 17936 9869 85 8A			sta @move.src
 17937 986B AD 34 9F			lda CUR_PLAYER
 17938 986E 18 6D 50 9D			add WALL_P+1
 17939 9872 85 8B			sta @move.src+1
 17940 9874 A9 00			lda <256
 17941 9876 85 86			sta @move.cnt
 17942 9878 A9 01			lda >256
 17943 987A 85 87			sta @move.cnt+1
 17944 987C 20 B6 21			jsr @move
 17945
 17946 				; optimize FAIL ('SET_WALL', service.pas), line = 3905
 17947
 17948 987F 20 02 5C			jsr SET_WALL
 17949
 17950 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3910
 17951
 17952 9882 20 20 8E			jsr BOUNCEBALL
 17953 9885 AD 58 A1			lda BOUNCEBALL.RESULT
 17954 9888 8D E1 A1			sta NWALL
 17955
 17956 				; optimize OK (service.pas), line = 3913
 17957
 17958 988B F0 6A			jeq l_3744
 17959
 17960 				; optimize OK (service.pas), line = 3916
 17961
 17962 988D AC 34 9F			ldy CUR_PLAYER
 17963 9890 B9 25 9F			lda adr.SCORE.WALL_N,y
 17964 9893 18 69 01			add #$01
 17965 9896 99 25 9F			sta adr.SCORE.WALL_N,y
 17966
 17967 				; optimize OK (service.pas), line = 3919
 17968
 17969 9899 AD 18 9F			lda TOTALWALL
 17970 989C D9 25 9F			cmp adr.SCORE.WALL_N,y
 17971 989F B0 05			jcs l_3760
 17972
 17973 				; optimize OK (service.pas), line = 3920
 17974
 17975 98A1 A9 01			lda #$01
 17976 98A3 99 25 9F			sta adr.SCORE.WALL_N,y
 17977 98A6			l_3760
 17978
 17979 				; optimize OK (service.pas), line = 3923
 17980
 17981 98A6 A9 00			lda #$00
 17982 98A8 85 9F			sta :STACKORIGIN+9
 17983 98AA AD 34 9F			lda CUR_PLAYER
 17984 98AD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17985 98AF AC 34 9F			ldy CUR_PLAYER
 17986 98B2 B9 25 9F			lda adr.SCORE.WALL_N,y
 17987 98B5 38 E9 01			sub #$01
 17988 98B8 85 86			sta :eax
 17989 98BA A9 00			lda #$00
 17990 98BC E9 00			sbc #$00
 17991 98BE 85 87			sta :eax+1
 17992 98C0 A9 00			lda #$00
 17993 98C2 85 8E			sta :ecx
 17994 98C4 A9 01			lda #$01
 17995 98C6 85 8F			sta :ecx+1
 17996 					.ifdef fmulinit
 17997 					fmulu_16
 17998 					els
 17999 98C8 20 0B 23			imulCX
 18000 					eif
 18001 98CB AD 4F 9D			lda WALL_P
 18002 98CE 18 65 9F			add :STACKORIGIN+9
 18003 98D1 85 8E			sta @move.dst
 18004 98D3 AD 50 9D			lda WALL_P+1
 18005 98D6 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18006 98D8 85 8F			sta @move.dst+1
 18007 98DA A5 86			lda :eax
 18008 98DC 18 6D 53 9D			add ALL_WALLS
 18009 98E0 85 8A			sta @move.src
 18010 98E2 A5 87			lda :eax+1
 18011 98E4 6D 54 9D			adc ALL_WALLS+1
 18012 98E7 85 8B			sta @move.src+1
 18013 98E9 A9 00			lda <256
 18014 98EB 85 86			sta @move.cnt
 18015 98ED A9 01			lda >256
 18016 98EF 85 87			sta @move.cnt+1
 18017 98F1 20 B6 21			jsr @move
 18018 98F4 4C 02 99			jmp l_3792
 18019 98F7			l_3744
 18020
 18021 				; optimize OK (service.pas), line = 3929
 18022
 18023 98F7 AC 34 9F			ldy CUR_PLAYER
 18024 98FA B9 28 9F			lda adr.SCORE.LIVES,y
 18025 98FD D0 03			jne l_37A7
 18026 98FF 20 E8 77			jsr GAME_OVER
 18027 9902			l_3792
 18028 9902			l_37A7
 18029
 18030 				; optimize OK (service.pas), line = 3934
 18031
 18032 9902 AD E1 A1			lda NWALL
 18033 9905 F0 03 4C DD 97		jne l_36E4
 18034
 18035 				; optimize FAIL (0, service.pas), line = 3937
 18036
 18037 990A EE 34 9F			inc CUR_PLAYER
 18038
 18039 				; optimize OK (service.pas), line = 3938
 18040
 18041 990D AD DF A1			lda PLAYERS
 18042 9910 CD 34 9F			cmp CUR_PLAYER
 18043 9913 AD E0 A1			lda PLAYERS+1
 18044 9916 E9 00			sbc #$00
 18045 9918 50 02			svc
 18046 991A 49 80			eor #$80
 18047 991C 10 05			jpl l_37CF
 18048 991E A9 01			lda #$01
 18049 9920 8D 34 9F			sta CUR_PLAYER
 18050 9923			l_37CF
 18051
 18052 				; optimize OK (service.pas), line = 3944
 18053
 18054 9923 AC 34 9F			ldy CUR_PLAYER
 18055 9926 B9 28 9F			lda adr.SCORE.LIVES,y
 18056 9929 D0 09			jne l_37EB
 18057 992B A9 03			lda #$03
 18058 992D 38 ED 34 9F			sub CUR_PLAYER
 18059 9931 8D 34 9F			sta CUR_PLAYER
 18060 9934			l_37EB
 18061
 18062 				; optimize OK (service.pas), line = 3949
 18063
 18064 9934 A0 01			ldy #1
 18065 9936 AD 29 9F			lda adr.SCORE.LIVES+$01
 18066 9939 F0 01			beq @+
 18067 993B 88				dey
 18068 				@
 18069 993C 84 9F			sty :STACKORIGIN+9
 18070 993E A0 01			ldy #1
 18071 9940 AD 2A 9F			lda adr.SCORE.LIVES+$02
 18072 9943 F0 01			beq @+
 18073 9945 88				dey
 18074 				@
 18075 9946 98				tya
 18076 9947 25 9F			and :STACKORIGIN+9
 18077 9949 0D 33 9F			ora SCORE.ABORTPLAY
 18078 994C D0 03 4C DD 97		jeq l_36E3
 18079
 18080 				; ------------------------------------------------------------
 18081
 18082 = A1DF			PLAYERS	= DATAORIGIN+$047B
 18083 = A1E1			NWALL	= DATAORIGIN+$047D
 18084
 18085 = A1DF			@VarData	= PLAYERS
 18086 = 0003			@VarDataSize	= 3
 18087
 18088 9951			@exit
 18089 					.ifdef @new
 18090 					lda <@VarData
 18091 					sta :ztmp
 18092 					lda >@VarData
 18093 					ldy #@VarDataSize-1
 18094 					jmp @FreeMem
 18095 					els
 18096 9951 60				rts						; ret
 18097 					eif
 18098 				.endl
 18099
 18100 9952			.local	INIT_GAME					; PROCEDURE
 18101
 18102 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 124
 18103
 18104 9952 20 F7 32			jsr SYSTEM.RANDOMIZE
 18105
 18106 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 126
 18107
 18108 9955 20 FF 3C			jsr INITSVGA
 18109
 18110 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 127
 18111
 18112 9958 20 BD 3C			jsr INITROWARRAY
 18113
 18114 				; optimize OK (btm.inc), line = 1
 18115
 18116 995B A9 00			lda #$00
 18117 995D 8D 64 9E			sta PLAYSCREEN.OFS
 18118 9960 A9 5E			lda #$5E
 18119 9962 8D 65 9E			sta PLAYSCREEN.OFS+1
 18120 9965 A9 01			lda #$01
 18121 9967 8D 66 9E			sta PLAYSCREEN.OFS+2
 18122 996A A9 00			lda #$00
 18123 996C 8D 67 9E			sta PLAYSCREEN.OFS+3
 18124
 18125 				; optimize OK (btm.inc), line = 2
 18126
 18127 996F A9 40			lda #$40
 18128 9971 8D 60 9E			sta PLAYSCREEN.WIDTH
 18129 9974 A9 01			lda #$01
 18130 9976 8D 61 9E			sta PLAYSCREEN.WIDTH+1
 18131
 18132 				; optimize OK (btm.inc), line = 3
 18133
 18134 9979 A9 C8			lda #$C8
 18135 997B 8D 62 9E			sta PLAYSCREEN.HEIGHT
 18136 997E A9 00			lda #$00
 18137 9980 8D 63 9E			sta PLAYSCREEN.HEIGHT+1
 18138
 18139 				; optimize OK (btm.inc), line = 5
 18140
 18141 9983 8D 9C 9E			sta PRESENTS.OFS
 18142 9986 A9 58			lda #$58
 18143 9988 8D 9D 9E			sta PRESENTS.OFS+1
 18144 998B A9 02			lda #$02
 18145 998D 8D 9E 9E			sta PRESENTS.OFS+2
 18146 9990 A9 00			lda #$00
 18147 9992 8D 9F 9E			sta PRESENTS.OFS+3
 18148
 18149 				; optimize OK (btm.inc), line = 6
 18150
 18151 9995 A9 40			lda #$40
 18152 9997 8D 98 9E			sta PRESENTS.WIDTH
 18153 999A A9 01			lda #$01
 18154 999C 8D 99 9E			sta PRESENTS.WIDTH+1
 18155
 18156 				; optimize OK (btm.inc), line = 7
 18157
 18158 999F A9 C8			lda #$C8
 18159 99A1 8D 9A 9E			sta PRESENTS.HEIGHT
 18160 99A4 A9 00			lda #$00
 18161 99A6 8D 9B 9E			sta PRESENTS.HEIGHT+1
 18162
 18163 				; optimize OK (btm.inc), line = 9
 18164
 18165 99A9 8D 8C 9E			sta EXPLOSION.OFS
 18166 99AC A9 52			lda #$52
 18167 99AE 8D 8D 9E			sta EXPLOSION.OFS+1
 18168 99B1 A9 03			lda #$03
 18169 99B3 8D 8E 9E			sta EXPLOSION.OFS+2
 18170 99B6 A9 00			lda #$00
 18171 99B8 8D 8F 9E			sta EXPLOSION.OFS+3
 18172
 18173 				; optimize OK (btm.inc), line = 10
 18174
 18175 99BB A9 2A			lda #$2A
 18176 99BD 8D 88 9E			sta EXPLOSION.WIDTH
 18177 99C0 A9 00			lda #$00
 18178 99C2 8D 89 9E			sta EXPLOSION.WIDTH+1
 18179
 18180 				; optimize OK (btm.inc), line = 11
 18181
 18182 99C5 A9 72			lda #$72
 18183 99C7 8D 8A 9E			sta EXPLOSION.HEIGHT
 18184 99CA A9 00			lda #$00
 18185 99CC 8D 8B 9E			sta EXPLOSION.HEIGHT+1
 18186
 18187 				; optimize OK (btm.inc), line = 13
 18188
 18189 99CF A9 B4			lda #$B4
 18190 99D1 8D 94 9E			sta NEWVAUS.OFS
 18191 99D4 A9 64			lda #$64
 18192 99D6 8D 95 9E			sta NEWVAUS.OFS+1
 18193 99D9 A9 03			lda #$03
 18194 99DB 8D 96 9E			sta NEWVAUS.OFS+2
 18195 99DE A9 00			lda #$00
 18196 99E0 8D 97 9E			sta NEWVAUS.OFS+3
 18197
 18198 				; optimize OK (btm.inc), line = 14
 18199
 18200 99E3 A9 29			lda #$29
 18201 99E5 8D 90 9E			sta NEWVAUS.WIDTH
 18202 99E8 A9 00			lda #$00
 18203 99EA 8D 91 9E			sta NEWVAUS.WIDTH+1
 18204
 18205 				; optimize OK (btm.inc), line = 15
 18206
 18207 99ED A9 C1			lda #$C1
 18208 99EF 8D 92 9E			sta NEWVAUS.HEIGHT
 18209 99F2 A9 00			lda #$00
 18210 99F4 8D 93 9E			sta NEWVAUS.HEIGHT+1
 18211
 18212 				; optimize OK (btm.inc), line = 17
 18213
 18214 99F7 A9 9D			lda #$9D
 18215 99F9 8D A4 9E			sta SOUNDFX.OFS
 18216 99FC A9 83			lda #$83
 18217 99FE 8D A5 9E			sta SOUNDFX.OFS+1
 18218 9A01 A9 03			lda #$03
 18219 9A03 8D A6 9E			sta SOUNDFX.OFS+2
 18220 9A06 A9 00			lda #$00
 18221 9A08 8D A7 9E			sta SOUNDFX.OFS+3
 18222
 18223 				; optimize OK (btm.inc), line = 18
 18224
 18225 9A0B A9 15			lda #$15
 18226 9A0D 8D A0 9E			sta SOUNDFX.WIDTH
 18227 9A10 A9 00			lda #$00
 18228 9A12 8D A1 9E			sta SOUNDFX.WIDTH+1
 18229
 18230 				; optimize OK (btm.inc), line = 19
 18231
 18232 9A15 A9 26			lda #$26
 18233 9A17 8D A2 9E			sta SOUNDFX.HEIGHT
 18234 9A1A A9 00			lda #$00
 18235 9A1C 8D A3 9E			sta SOUNDFX.HEIGHT+1
 18236
 18237 				; optimize OK (btm.inc), line = 21
 18238
 18239 9A1F A9 BB			lda #$BB
 18240 9A21 8D AC 9E			sta SHINEWALL.OFS
 18241 9A24 A9 86			lda #$86
 18242 9A26 8D AD 9E			sta SHINEWALL.OFS+1
 18243 9A29 A9 03			lda #$03
 18244 9A2B 8D AE 9E			sta SHINEWALL.OFS+2
 18245 9A2E A9 00			lda #$00
 18246 9A30 8D AF 9E			sta SHINEWALL.OFS+3
 18247
 18248 				; optimize OK (btm.inc), line = 22
 18249
 18250 9A33 A9 10			lda #$10
 18251 9A35 8D A8 9E			sta SHINEWALL.WIDTH
 18252 9A38 A9 00			lda #$00
 18253 9A3A 8D A9 9E			sta SHINEWALL.WIDTH+1
 18254
 18255 				; optimize OK (btm.inc), line = 23
 18256
 18257 9A3D A9 50			lda #$50
 18258 9A3F 8D AA 9E			sta SHINEWALL.HEIGHT
 18259 9A42 A9 00			lda #$00
 18260 9A44 8D AB 9E			sta SHINEWALL.HEIGHT+1
 18261
 18262 				; optimize OK (btm.inc), line = 25
 18263
 18264 9A47 A9 BB			lda #$BB
 18265 9A49 8D B4 9E			sta MINIVAUS.OFS
 18266 9A4C A9 8B			lda #$8B
 18267 9A4E 8D B5 9E			sta MINIVAUS.OFS+1
 18268 9A51 A9 03			lda #$03
 18269 9A53 8D B6 9E			sta MINIVAUS.OFS+2
 18270 9A56 A9 00			lda #$00
 18271 9A58 8D B7 9E			sta MINIVAUS.OFS+3
 18272
 18273 				; optimize OK (btm.inc), line = 26
 18274
 18275 9A5B A9 14			lda #$14
 18276 9A5D 8D B0 9E			sta MINIVAUS.WIDTH
 18277 9A60 A9 00			lda #$00
 18278 9A62 8D B1 9E			sta MINIVAUS.WIDTH+1
 18279
 18280 				; optimize OK (btm.inc), line = 27
 18281
 18282 9A65 A9 05			lda #$05
 18283 9A67 8D B2 9E			sta MINIVAUS.HEIGHT
 18284 9A6A A9 00			lda #$00
 18285 9A6C 8D B3 9E			sta MINIVAUS.HEIGHT+1
 18286
 18287 				; optimize OK (btm.inc), line = 29
 18288
 18289 9A6F A9 1F			lda #$1F
 18290 9A71 8D BC 9E			sta LEVELSEL.OFS
 18291 9A74 A9 8C			lda #$8C
 18292 9A76 8D BD 9E			sta LEVELSEL.OFS+1
 18293 9A79 A9 03			lda #$03
 18294 9A7B 8D BE 9E			sta LEVELSEL.OFS+2
 18295 9A7E A9 00			lda #$00
 18296 9A80 8D BF 9E			sta LEVELSEL.OFS+3
 18297
 18298 				; optimize OK (btm.inc), line = 30
 18299
 18300 9A83 A9 15			lda #$15
 18301 9A85 8D B8 9E			sta LEVELSEL.WIDTH
 18302 9A88 A9 00			lda #$00
 18303 9A8A 8D B9 9E			sta LEVELSEL.WIDTH+1
 18304
 18305 				; optimize OK (btm.inc), line = 31
 18306
 18307 9A8D A9 5F			lda #$5F
 18308 9A8F 8D BA 9E			sta LEVELSEL.HEIGHT
 18309 9A92 A9 00			lda #$00
 18310 9A94 8D BB 9E			sta LEVELSEL.HEIGHT+1
 18311
 18312 				; optimize OK (btm.inc), line = 33
 18313
 18314 9A97 A9 EA			lda #$EA
 18315 9A99 8D C4 9E			sta LETTERS.OFS
 18316 9A9C A9 93			lda #$93
 18317 9A9E 8D C5 9E			sta LETTERS.OFS+1
 18318 9AA1 A9 03			lda #$03
 18319 9AA3 8D C6 9E			sta LETTERS.OFS+2
 18320 9AA6 A9 00			lda #$00
 18321 9AA8 8D C7 9E			sta LETTERS.OFS+3
 18322
 18323 				; optimize OK (btm.inc), line = 34
 18324
 18325 9AAB A9 80			lda #$80
 18326 9AAD 8D C0 9E			sta LETTERS.WIDTH
 18327 9AB0 A9 00			lda #$00
 18328 9AB2 8D C1 9E			sta LETTERS.WIDTH+1
 18329
 18330 				; optimize OK (btm.inc), line = 35
 18331
 18332 9AB5 A9 38			lda #$38
 18333 9AB7 8D C2 9E			sta LETTERS.HEIGHT
 18334 9ABA A9 00			lda #$00
 18335 9ABC 8D C3 9E			sta LETTERS.HEIGHT+1
 18336
 18337 				; optimize OK (btm.inc), line = 37
 18338
 18339 9ABF A9 EA			lda #$EA
 18340 9AC1 8D 74 9E			sta NORMAL.OFS
 18341 9AC4 A9 AF			lda #$AF
 18342 9AC6 8D 75 9E			sta NORMAL.OFS+1
 18343 9AC9 A9 03			lda #$03
 18344 9ACB 8D 76 9E			sta NORMAL.OFS+2
 18345 9ACE A9 00			lda #$00
 18346 9AD0 8D 77 9E			sta NORMAL.OFS+3
 18347
 18348 				; optimize OK (btm.inc), line = 38
 18349
 18350 9AD3 A9 20			lda #$20
 18351 9AD5 8D 70 9E			sta NORMAL.WIDTH
 18352 9AD8 A9 00			lda #$00
 18353 9ADA 8D 71 9E			sta NORMAL.WIDTH+1
 18354
 18355 				; optimize OK (btm.inc), line = 39
 18356
 18357 9ADD A9 07			lda #$07
 18358 9ADF 8D 72 9E			sta NORMAL.HEIGHT
 18359 9AE2 A9 00			lda #$00
 18360 9AE4 8D 73 9E			sta NORMAL.HEIGHT+1
 18361
 18362 				; optimize OK (btm.inc), line = 41
 18363
 18364 9AE7 A9 CA			lda #$CA
 18365 9AE9 8D 84 9E			sta LASERS.OFS
 18366 9AEC A9 B0			lda #$B0
 18367 9AEE 8D 85 9E			sta LASERS.OFS+1
 18368 9AF1 A9 03			lda #$03
 18369 9AF3 8D 86 9E			sta LASERS.OFS+2
 18370 9AF6 A9 00			lda #$00
 18371 9AF8 8D 87 9E			sta LASERS.OFS+3
 18372
 18373 				; optimize OK (btm.inc), line = 42
 18374
 18375 9AFB A9 20			lda #$20
 18376 9AFD 8D 80 9E			sta LASERS.WIDTH
 18377 9B00 A9 00			lda #$00
 18378 9B02 8D 81 9E			sta LASERS.WIDTH+1
 18379
 18380 				; optimize OK (btm.inc), line = 43
 18381
 18382 9B05 A9 07			lda #$07
 18383 9B07 8D 82 9E			sta LASERS.HEIGHT
 18384 9B0A A9 00			lda #$00
 18385 9B0C 8D 83 9E			sta LASERS.HEIGHT+1
 18386
 18387 				; optimize OK (btm.inc), line = 45
 18388
 18389 9B0F A9 AA			lda #$AA
 18390 9B11 8D 7C 9E			sta ENLARGED.OFS
 18391 9B14 A9 B1			lda #$B1
 18392 9B16 8D 7D 9E			sta ENLARGED.OFS+1
 18393 9B19 A9 03			lda #$03
 18394 9B1B 8D 7E 9E			sta ENLARGED.OFS+2
 18395 9B1E A9 00			lda #$00
 18396 9B20 8D 7F 9E			sta ENLARGED.OFS+3
 18397
 18398 				; optimize OK (btm.inc), line = 46
 18399
 18400 9B23 A9 40			lda #$40
 18401 9B25 8D 78 9E			sta ENLARGED.WIDTH
 18402 9B28 A9 00			lda #$00
 18403 9B2A 8D 79 9E			sta ENLARGED.WIDTH+1
 18404
 18405 				; optimize OK (btm.inc), line = 47
 18406
 18407 9B2D A9 07			lda #$07
 18408 9B2F 8D 7A 9E			sta ENLARGED.HEIGHT
 18409 9B32 A9 00			lda #$00
 18410 9B34 8D 7B 9E			sta ENLARGED.HEIGHT+1
 18411
 18412 				; optimize OK (btm.inc), line = 49
 18413
 18414 9B37 A9 6A			lda #$6A
 18415 9B39 8D CC 9E			sta SHOOTS.OFS
 18416 9B3C A9 B3			lda #$B3
 18417 9B3E 8D CD 9E			sta SHOOTS.OFS+1
 18418 9B41 A9 03			lda #$03
 18419 9B43 8D CE 9E			sta SHOOTS.OFS+2
 18420 9B46 A9 00			lda #$00
 18421 9B48 8D CF 9E			sta SHOOTS.OFS+3
 18422
 18423 				; optimize OK (btm.inc), line = 50
 18424
 18425 9B4B A9 0D			lda #$0D
 18426 9B4D 8D C8 9E			sta SHOOTS.WIDTH
 18427 9B50 A9 00			lda #$00
 18428 9B52 8D C9 9E			sta SHOOTS.WIDTH+1
 18429
 18430 				; optimize OK (btm.inc), line = 51
 18431
 18432 9B55 A9 08			lda #$08
 18433 9B57 8D CA 9E			sta SHOOTS.HEIGHT
 18434 9B5A A9 00			lda #$00
 18435 9B5C 8D CB 9E			sta SHOOTS.HEIGHT+1
 18436
 18437 				; optimize OK (btm.inc), line = 53
 18438
 18439 9B5F A9 D2			lda #$D2
 18440 9B61 8D D4 9E			sta FLUX.OFS
 18441 9B64 A9 B3			lda #$B3
 18442 9B66 8D D5 9E			sta FLUX.OFS+1
 18443 9B69 A9 03			lda #$03
 18444 9B6B 8D D6 9E			sta FLUX.OFS+2
 18445 9B6E A9 00			lda #$00
 18446 9B70 8D D7 9E			sta FLUX.OFS+3
 18447
 18448 				; optimize OK (btm.inc), line = 54
 18449
 18450 9B73 A9 08			lda #$08
 18451 9B75 8D D0 9E			sta FLUX.WIDTH
 18452 9B78 A9 00			lda #$00
 18453 9B7A 8D D1 9E			sta FLUX.WIDTH+1
 18454
 18455 				; optimize OK (btm.inc), line = 55
 18456
 18457 9B7D A9 29			lda #$29
 18458 9B7F 8D D2 9E			sta FLUX.HEIGHT
 18459 9B82 A9 00			lda #$00
 18460 9B84 8D D3 9E			sta FLUX.HEIGHT+1
 18461
 18462 				; optimize OK (btm.inc), line = 57
 18463
 18464 9B87 A9 1A			lda #$1A
 18465 9B89 8D 5C 9E			sta BALLDATA.OFS
 18466 9B8C A9 B5			lda #$B5
 18467 9B8E 8D 5D 9E			sta BALLDATA.OFS+1
 18468 9B91 A9 03			lda #$03
 18469 9B93 8D 5E 9E			sta BALLDATA.OFS+2
 18470 9B96 A9 00			lda #$00
 18471 9B98 8D 5F 9E			sta BALLDATA.OFS+3
 18472
 18473 				; optimize OK (btm.inc), line = 58
 18474
 18475 9B9B A9 05			lda #$05
 18476 9B9D 8D 58 9E			sta BALLDATA.WIDTH
 18477 9BA0 A9 00			lda #$00
 18478 9BA2 8D 59 9E			sta BALLDATA.WIDTH+1
 18479
 18480 				; optimize OK (btm.inc), line = 59
 18481
 18482 9BA5 A9 05			lda #$05
 18483 9BA7 8D 5A 9E			sta BALLDATA.HEIGHT
 18484 9BAA A9 00			lda #$00
 18485 9BAC 8D 5B 9E			sta BALLDATA.HEIGHT+1
 18486
 18487 				; optimize OK (btm.inc), line = 61
 18488
 18489 9BAF A9 33			lda #$33
 18490 9BB1 8D E9 9E			sta PATTERN.OFS
 18491 9BB4 A9 B5			lda #$B5
 18492 9BB6 8D EA 9E			sta PATTERN.OFS+1
 18493 9BB9 A9 03			lda #$03
 18494 9BBB 8D EB 9E			sta PATTERN.OFS+2
 18495 9BBE A9 00			lda #$00
 18496 9BC0 8D EC 9E			sta PATTERN.OFS+3
 18497
 18498 				; optimize OK (btm.inc), line = 62
 18499
 18500 9BC3 A9 1A			lda #$1A
 18501 9BC5 8D E5 9E			sta PATTERN.WIDTH
 18502 9BC8 A9 00			lda #$00
 18503 9BCA 8D E6 9E			sta PATTERN.WIDTH+1
 18504
 18505 				; optimize OK (btm.inc), line = 63
 18506
 18507 9BCD A9 18			lda #$18
 18508 9BCF 8D E7 9E			sta PATTERN.HEIGHT
 18509 9BD2 A9 00			lda #$00
 18510 9BD4 8D E8 9E			sta PATTERN.HEIGHT+1
 18511
 18512 				; optimize OK (btm.inc), line = 65
 18513
 18514 9BD7 A9 A3			lda #$A3
 18515 9BD9 8D F1 9E			sta PATTERN0.OFS
 18516 9BDC A9 B7			lda #$B7
 18517 9BDE 8D F2 9E			sta PATTERN0.OFS+1
 18518 9BE1 A9 03			lda #$03
 18519 9BE3 8D F3 9E			sta PATTERN0.OFS+2
 18520 9BE6 A9 00			lda #$00
 18521 9BE8 8D F4 9E			sta PATTERN0.OFS+3
 18522
 18523 				; optimize OK (btm.inc), line = 66
 18524
 18525 9BEB A9 1A			lda #$1A
 18526 9BED 8D ED 9E			sta PATTERN0.WIDTH
 18527 9BF0 A9 00			lda #$00
 18528 9BF2 8D EE 9E			sta PATTERN0.WIDTH+1
 18529
 18530 				; optimize OK (btm.inc), line = 67
 18531
 18532 9BF5 A9 18			lda #$18
 18533 9BF7 8D EF 9E			sta PATTERN0.HEIGHT
 18534 9BFA A9 00			lda #$00
 18535 9BFC 8D F0 9E			sta PATTERN0.HEIGHT+1
 18536
 18537 				; optimize OK (btm.inc), line = 69
 18538
 18539 9BFF A9 13			lda #$13
 18540 9C01 8D F9 9E			sta PATTERN1.OFS
 18541 9C04 A9 BA			lda #$BA
 18542 9C06 8D FA 9E			sta PATTERN1.OFS+1
 18543 9C09 A9 03			lda #$03
 18544 9C0B 8D FB 9E			sta PATTERN1.OFS+2
 18545 9C0E A9 00			lda #$00
 18546 9C10 8D FC 9E			sta PATTERN1.OFS+3
 18547
 18548 				; optimize OK (btm.inc), line = 70
 18549
 18550 9C13 A9 0E			lda #$0E
 18551 9C15 8D F5 9E			sta PATTERN1.WIDTH
 18552 9C18 A9 00			lda #$00
 18553 9C1A 8D F6 9E			sta PATTERN1.WIDTH+1
 18554
 18555 				; optimize OK (btm.inc), line = 71
 18556
 18557 9C1D A9 0E			lda #$0E
 18558 9C1F 8D F7 9E			sta PATTERN1.HEIGHT
 18559 9C22 A9 00			lda #$00
 18560 9C24 8D F8 9E			sta PATTERN1.HEIGHT+1
 18561
 18562 				; optimize OK (btm.inc), line = 73
 18563
 18564 9C27 A9 D7			lda #$D7
 18565 9C29 8D 01 9F			sta PATTERN2.OFS
 18566 9C2C A9 BA			lda #$BA
 18567 9C2E 8D 02 9F			sta PATTERN2.OFS+1
 18568 9C31 A9 03			lda #$03
 18569 9C33 8D 03 9F			sta PATTERN2.OFS+2
 18570 9C36 A9 00			lda #$00
 18571 9C38 8D 04 9F			sta PATTERN2.OFS+3
 18572
 18573 				; optimize OK (btm.inc), line = 74
 18574
 18575 9C3B A9 26			lda #$26
 18576 9C3D 8D FD 9E			sta PATTERN2.WIDTH
 18577 9C40 A9 00			lda #$00
 18578 9C42 8D FE 9E			sta PATTERN2.WIDTH+1
 18579
 18580 				; optimize OK (btm.inc), line = 75
 18581
 18582 9C45 A9 23			lda #$23
 18583 9C47 8D FF 9E			sta PATTERN2.HEIGHT
 18584 9C4A A9 00			lda #$00
 18585 9C4C 8D 00 9F			sta PATTERN2.HEIGHT+1
 18586
 18587 				; optimize OK (btm.inc), line = 77
 18588
 18589 9C4F A9 09			lda #$09
 18590 9C51 8D 09 9F			sta PATTERN3.OFS
 18591 9C54 A9 C0			lda #$C0
 18592 9C56 8D 0A 9F			sta PATTERN3.OFS+1
 18593 9C59 A9 03			lda #$03
 18594 9C5B 8D 0B 9F			sta PATTERN3.OFS+2
 18595 9C5E A9 00			lda #$00
 18596 9C60 8D 0C 9F			sta PATTERN3.OFS+3
 18597
 18598 				; optimize OK (btm.inc), line = 78
 18599
 18600 9C63 A9 1C			lda #$1C
 18601 9C65 8D 05 9F			sta PATTERN3.WIDTH
 18602 9C68 A9 00			lda #$00
 18603 9C6A 8D 06 9F			sta PATTERN3.WIDTH+1
 18604
 18605 				; optimize OK (btm.inc), line = 79
 18606
 18607 9C6D A9 1D			lda #$1D
 18608 9C6F 8D 07 9F			sta PATTERN3.HEIGHT
 18609 9C72 A9 00			lda #$00
 18610 9C74 8D 08 9F			sta PATTERN3.HEIGHT+1
 18611
 18612 				; optimize OK (btm.inc), line = 81
 18613
 18614 9C77 A9 35			lda #$35
 18615 9C79 8D 11 9F			sta PATTERN4.OFS
 18616 9C7C A9 C3			lda #$C3
 18617 9C7E 8D 12 9F			sta PATTERN4.OFS+1
 18618 9C81 A9 03			lda #$03
 18619 9C83 8D 13 9F			sta PATTERN4.OFS+2
 18620 9C86 A9 00			lda #$00
 18621 9C88 8D 14 9F			sta PATTERN4.OFS+3
 18622
 18623 				; optimize OK (btm.inc), line = 82
 18624
 18625 9C8B A9 1E			lda #$1E
 18626 9C8D 8D 0D 9F			sta PATTERN4.WIDTH
 18627 9C90 A9 00			lda #$00
 18628 9C92 8D 0E 9F			sta PATTERN4.WIDTH+1
 18629
 18630 				; optimize OK (btm.inc), line = 83
 18631
 18632 9C95 A9 1E			lda #$1E
 18633 9C97 8D 0F 9F			sta PATTERN4.HEIGHT
 18634 9C9A A9 00			lda #$00
 18635 9C9C 8D 10 9F			sta PATTERN4.HEIGHT+1
 18636
 18637 				; optimize OK (arkanoid_vbxe.pas), line = 134
 18638
 18639 9C9F A9 20			lda #$20
 18640 9CA1 8D 18 9F			sta TOTALWALL
 18641
 18642 				; optimize OK (arkanoid_vbxe.pas), line = 136
 18643
 18644 9CA4 A9 50			lda #$50
 18645 9CA6 8D 2B 9F			sta SCORE.HISCORE
 18646 9CA9 A9 C3			lda #$C3
 18647 9CAB 8D 2C 9F			sta SCORE.HISCORE+1
 18648 9CAE A9 00			lda #$00
 18649 9CB0 8D 2D 9F			sta SCORE.HISCORE+2
 18650 9CB3 8D 2E 9F			sta SCORE.HISCORE+3
 18651
 18652 				; optimize OK (arkanoid_vbxe.pas), line = 139
 18653
 18654 9CB6 A9 01			lda #$01
 18655 9CB8 8D 56 9F			sta SOUND_ON
 18656
 18657 				; optimize OK (arkanoid_vbxe.pas), line = 140
 18658
 18659 9CBB A9 03			lda #$03
 18660 9CBD 8D 3A 9F			sta LV
 18661 9CC0 A9 00			lda #$00
 18662 9CC2 8D 3B 9F			sta LV+1
 18663
 18664 				; --- RepeatUntilProlog
 18665 9CC5			l_392D
 18666
 18667 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 147
 18668
 18669 9CC5 20 A5 96			jsr MAINSCREEN
 18670 9CC8 AD D3 A1			lda MAINSCREEN.RESULT
 18671 9CCB 8D 2F 9F			sta SCORE.PL_NUMB
 18672
 18673 				; optimize OK (arkanoid_vbxe.pas), line = 149
 18674
 18675 9CCE F0 0D			jeq l_3943
 18676 9CD0 A9 01			lda #$01
 18677 9CD2 8D DF A1			sta START_GAME.PLAYERS
 18678 9CD5 A9 00			lda #$00
 18679 9CD7 8D E0 A1			sta START_GAME.PLAYERS+1
 18680 9CDA 20 F4 96			jsr START_GAME
 18681 9CDD			l_3943
 18682
 18683 				; optimize OK (arkanoid_vbxe.pas), line = 151
 18684
 18685 9CDD AD 2F 9F			lda SCORE.PL_NUMB
 18686 9CE0 C9 01			cmp #$01
 18687 9CE2 B0 E1			jcs l_392D
 18688
 18689 9CE4			@exit
 18690 					.ifdef @new
 18691 					lda <@VarData
 18692 					sta :ztmp
 18693 					lda >@VarData
 18694 					ldy #@VarDataSize-1
 18695 					jmp @FreeMem
 18696 					els
 18697 9CE4 60				rts						; ret
 18698 					eif
 18699 				.endl
 18700 9CE5			l_0022
 18701
 18702 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 159
 18703
 18704 9CE5 20 52 99			jsr INIT_GAME
 18705
 18706 				; ------------------------------------------------------------
 18707
 18708 = 015E00			VBXE_DATA	= $15E00
 18709 = B100			adr.BLT	= $B100
 18710 9CE8			.var BLT	= adr.BLT .word
 18711 = B100			adr.BLT.SRC_ADR	= $B100
 18712 9CE8			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 18713 = B100			BLT.SRC_ADR.BYTE0	= $B100
 18714 = B101			BLT.SRC_ADR.BYTE1	= $B101
 18715 = B102			BLT.SRC_ADR.BYTE2	= $B102
 18716 = B103			BLT.SRC_STEP_Y	= $B103
 18717 = B105			BLT.SRC_STEP_X	= $B105
 18718 = B106			adr.BLT.DST_ADR	= $B106
 18719 9CE8			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 18720 = B106			BLT.DST_ADR.BYTE0	= $B106
 18721 = B107			BLT.DST_ADR.BYTE1	= $B107
 18722 = B108			BLT.DST_ADR.BYTE2	= $B108
 18723 = B109			BLT.DST_STEP_Y	= $B109
 18724 = B10B			BLT.DST_STEP_X	= $B10B
 18725 = B10C			BLT.BLT_WIDTH	= $B10C
 18726 = B10E			BLT.BLT_HEIGHT	= $B10E
 18727 = B10F			BLT.BLT_AND_MASK	= $B10F
 18728 = B110			BLT.BLT_XOR_MASK	= $B110
 18729 = B111			BLT.BLT_COLLISION_MASK	= $B111
 18730 = B112			BLT.BLT_ZOOM	= $B112
 18731 = B113			BLT.PATTERN_FEATURE	= $B113
 18732 = B114			BLT.BLT_CONTROL	= $B114
 18733 = 9E34			adr.VBXE_RAM	= DATAORIGIN+$00D0	; [8] OBJECT
 18734 9CE8			.var VBXE_RAM	= adr.VBXE_RAM .word
 18735 = 9E34			VBXE_RAM.POSITION	= DATAORIGIN+$00D0
 18736 = 9E38			VBXE_RAM.SIZE	= DATAORIGIN+$00D4
 18737 = 5000			VRAM	= $5000
 18738 = 0001			ERR1	= $01
 18739 = 0002			ERR2	= $02
 18740 = 0003			ERR3	= $03
 18741 = 0004			ERR4	= $04
 18742 = 000A			SCRMIN	= $0A
 18743 = 00D8			SCRMAX	= $D8
 18744 = 000C			SCRTOP	= $0C
 18745 = 00C8			SCRBOT	= $C8
 18746 = 0022			VAUS_W	= $22
 18747 = 0004			VAUS_H	= $04
 18748 = 00B8			VAUS_LINE	= $B8
 18749 = 00FF			EMP	= $FF
 18750 = 0005			BALLDIM	= $05
 18751 = 0003			BALLSPOT	= $03
 18752 = 001E			BALLDEV	= $1E
 18753 = 000A			SPEEDFLASH	= $0A
 18754 = 205E			adr.FLASH	= CODEORIGIN+$005E
 18755 9CE8			.var FLASH	= adr.FLASH .word
 18756 = 2069			adr.SCORE_WALL	= CODEORIGIN+$0069
 18757 9CE8			.var SCORE_WALL	= adr.SCORE_WALL .word
 18758 = 207F			adr.EMERG_DEV	= CODEORIGIN+$007F
 18759 9CE8			.var EMERG_DEV	= adr.EMERG_DEV .word
 18760 = 2088			adr.COLORBLOCK	= CODEORIGIN+$0088
 18761 9CE8			.var COLORBLOCK	= adr.COLORBLOCK .word
 18762 = 0001			GRAYDOWN	= $01
 18763 = 0001			STARTWALL	= $01
 18764 = 01F4			BALLSPEED	= $01F4
 18765 = 07D0			MAXSPEED	= $07D0
 18766 = 0064			MAXBRWHIT	= $64
 18767 = 0004			PATNUMBER	= $04
 18768 = 2092			adr.POS_DIGIT	= CODEORIGIN+$0092
 18769 9CE8			.var POS_DIGIT	= adr.POS_DIGIT .word
 18770 = 2096			adr.DIGITS	= CODEORIGIN+$0096
 18771 9CE8			.var DIGITS	= adr.DIGITS .word
 18772 = 20A1			adr.LEVEL	= CODEORIGIN+$00A1
 18773 9CE8			.var LEVEL	= adr.LEVEL .word
 18774 = 0258			SBDIR	= $0258
 18775 = 0003			DEFLEVEL	= $03
 18776 = 012C			LETTER_PROB	= $012C
 18777 = 03E8			LETTER_DROP	= $03E8
 18778 = 0008			LETTER_NUMB	= $08
 18779 = 0008			LETTER_FRM	= $08
 18780 = 0005			LETTER_SBF	= $05
 18781 = 20AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 18782 9CE8			.var LETTER_DIS	= adr.LETTER_DIS .word
 18783 = 00B0			FLUXLEVEL	= $B0
 18784 = 9E58			adr.BALLDATA	= DATAORIGIN+$00F4	; [8] RECORD
 18785 9CE8			.var BALLDATA	= adr.BALLDATA .word
 18786 = 9E58			BALLDATA.WIDTH	= DATAORIGIN+$00F4
 18787 = 9E5A			BALLDATA.HEIGHT	= DATAORIGIN+$00F6
 18788 = 9E5C			BALLDATA.OFS	= DATAORIGIN+$00F8
 18789 = 9E60			adr.PLAYSCREEN	= DATAORIGIN+$00FC	; [8] RECORD
 18790 9CE8			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 18791 = 9E60			PLAYSCREEN.WIDTH	= DATAORIGIN+$00FC
 18792 = 9E62			PLAYSCREEN.HEIGHT	= DATAORIGIN+$00FE
 18793 = 9E64			PLAYSCREEN.OFS	= DATAORIGIN+$0100
 18794 = 9E68			adr.PLAYVAUS	= DATAORIGIN+$0104	; [8] RECORD
 18795 9CE8			.var PLAYVAUS	= adr.PLAYVAUS .word
 18796 = 9E68			PLAYVAUS.WIDTH	= DATAORIGIN+$0104
 18797 = 9E6A			PLAYVAUS.HEIGHT	= DATAORIGIN+$0106
 18798 = 9E6C			PLAYVAUS.OFS	= DATAORIGIN+$0108
 18799 = 9E70			adr.NORMAL	= DATAORIGIN+$010C	; [8] RECORD
 18800 9CE8			.var NORMAL	= adr.NORMAL .word
 18801 = 9E70			NORMAL.WIDTH	= DATAORIGIN+$010C
 18802 = 9E72			NORMAL.HEIGHT	= DATAORIGIN+$010E
 18803 = 9E74			NORMAL.OFS	= DATAORIGIN+$0110
 18804 = 9E78			adr.ENLARGED	= DATAORIGIN+$0114	; [8] RECORD
 18805 9CE8			.var ENLARGED	= adr.ENLARGED .word
 18806 = 9E78			ENLARGED.WIDTH	= DATAORIGIN+$0114
 18807 = 9E7A			ENLARGED.HEIGHT	= DATAORIGIN+$0116
 18808 = 9E7C			ENLARGED.OFS	= DATAORIGIN+$0118
 18809 = 9E80			adr.LASERS	= DATAORIGIN+$011C	; [8] RECORD
 18810 9CE8			.var LASERS	= adr.LASERS .word
 18811 = 9E80			LASERS.WIDTH	= DATAORIGIN+$011C
 18812 = 9E82			LASERS.HEIGHT	= DATAORIGIN+$011E
 18813 = 9E84			LASERS.OFS	= DATAORIGIN+$0120
 18814 = 9E88			adr.EXPLOSION	= DATAORIGIN+$0124	; [8] RECORD
 18815 9CE8			.var EXPLOSION	= adr.EXPLOSION .word
 18816 = 9E88			EXPLOSION.WIDTH	= DATAORIGIN+$0124
 18817 = 9E8A			EXPLOSION.HEIGHT	= DATAORIGIN+$0126
 18818 = 9E8C			EXPLOSION.OFS	= DATAORIGIN+$0128
 18819 = 9E90			adr.NEWVAUS	= DATAORIGIN+$012C	; [8] RECORD
 18820 9CE8			.var NEWVAUS	= adr.NEWVAUS .word
 18821 = 9E90			NEWVAUS.WIDTH	= DATAORIGIN+$012C
 18822 = 9E92			NEWVAUS.HEIGHT	= DATAORIGIN+$012E
 18823 = 9E94			NEWVAUS.OFS	= DATAORIGIN+$0130
 18824 = 9E98			adr.PRESENTS	= DATAORIGIN+$0134	; [8] RECORD
 18825 9CE8			.var PRESENTS	= adr.PRESENTS .word
 18826 = 9E98			PRESENTS.WIDTH	= DATAORIGIN+$0134
 18827 = 9E9A			PRESENTS.HEIGHT	= DATAORIGIN+$0136
 18828 = 9E9C			PRESENTS.OFS	= DATAORIGIN+$0138
 18829 = 9EA0			adr.SOUNDFX	= DATAORIGIN+$013C	; [8] RECORD
 18830 9CE8			.var SOUNDFX	= adr.SOUNDFX .word
 18831 = 9EA0			SOUNDFX.WIDTH	= DATAORIGIN+$013C
 18832 = 9EA2			SOUNDFX.HEIGHT	= DATAORIGIN+$013E
 18833 = 9EA4			SOUNDFX.OFS	= DATAORIGIN+$0140
 18834 = 9EA8			adr.SHINEWALL	= DATAORIGIN+$0144	; [8] RECORD
 18835 9CE8			.var SHINEWALL	= adr.SHINEWALL .word
 18836 = 9EA8			SHINEWALL.WIDTH	= DATAORIGIN+$0144
 18837 = 9EAA			SHINEWALL.HEIGHT	= DATAORIGIN+$0146
 18838 = 9EAC			SHINEWALL.OFS	= DATAORIGIN+$0148
 18839 = 9EB0			adr.MINIVAUS	= DATAORIGIN+$014C	; [8] RECORD
 18840 9CE8			.var MINIVAUS	= adr.MINIVAUS .word
 18841 = 9EB0			MINIVAUS.WIDTH	= DATAORIGIN+$014C
 18842 = 9EB2			MINIVAUS.HEIGHT	= DATAORIGIN+$014E
 18843 = 9EB4			MINIVAUS.OFS	= DATAORIGIN+$0150
 18844 = 9EB8			adr.LEVELSEL	= DATAORIGIN+$0154	; [8] RECORD
 18845 9CE8			.var LEVELSEL	= adr.LEVELSEL .word
 18846 = 9EB8			LEVELSEL.WIDTH	= DATAORIGIN+$0154
 18847 = 9EBA			LEVELSEL.HEIGHT	= DATAORIGIN+$0156
 18848 = 9EBC			LEVELSEL.OFS	= DATAORIGIN+$0158
 18849 = 9EC0			adr.LETTERS	= DATAORIGIN+$015C	; [8] RECORD
 18850 9CE8			.var LETTERS	= adr.LETTERS .word
 18851 = 9EC0			LETTERS.WIDTH	= DATAORIGIN+$015C
 18852 = 9EC2			LETTERS.HEIGHT	= DATAORIGIN+$015E
 18853 = 9EC4			LETTERS.OFS	= DATAORIGIN+$0160
 18854 = 9EC8			adr.SHOOTS	= DATAORIGIN+$0164	; [8] RECORD
 18855 9CE8			.var SHOOTS	= adr.SHOOTS .word
 18856 = 9EC8			SHOOTS.WIDTH	= DATAORIGIN+$0164
 18857 = 9ECA			SHOOTS.HEIGHT	= DATAORIGIN+$0166
 18858 = 9ECC			SHOOTS.OFS	= DATAORIGIN+$0168
 18859 = 9ED0			adr.FLUX	= DATAORIGIN+$016C	; [8] RECORD
 18860 9CE8			.var FLUX	= adr.FLUX .word
 18861 = 9ED0			FLUX.WIDTH	= DATAORIGIN+$016C
 18862 = 9ED2			FLUX.HEIGHT	= DATAORIGIN+$016E
 18863 = 9ED4			FLUX.OFS	= DATAORIGIN+$0170
 18864 = 9ED8			adr.VAUS	= DATAORIGIN+$0174	; [13] RECORD
 18865 9CE8			.var VAUS	= adr.VAUS .word
 18866 = 9ED8			VAUS.X	= DATAORIGIN+$0174
 18867 = 9ED9			VAUS.Y	= DATAORIGIN+$0175
 18868 = 9EDA			VAUS.OLDX	= DATAORIGIN+$0176
 18869 = 9EDC			VAUS.OLDY	= DATAORIGIN+$0178
 18870 = 9EDE			VAUS.OLDLEN	= DATAORIGIN+$017A
 18871 = 9EE0			VAUS.WIDTH	= DATAORIGIN+$017C
 18872 = 9EE1			VAUS.HEIGHT	= DATAORIGIN+$017D
 18873 = 9EE2			VAUS.FLASH	= DATAORIGIN+$017E
 18874 = 9EE3			VAUS.IFLASH	= DATAORIGIN+$017F
 18875 = 9EE4			VAUS.LETTER	= DATAORIGIN+$0180
 18876 = 9EE5			adr.PATTERN	= DATAORIGIN+$0181	; [8] RECORD
 18877 9CE8			.var PATTERN	= adr.PATTERN .word
 18878 = 9EE5			PATTERN.WIDTH	= DATAORIGIN+$0181
 18879 = 9EE7			PATTERN.HEIGHT	= DATAORIGIN+$0183
 18880 = 9EE9			PATTERN.OFS	= DATAORIGIN+$0185
 18881 = 9EED			adr.PATTERN0	= DATAORIGIN+$0189	; [8] RECORD
 18882 9CE8			.var PATTERN0	= adr.PATTERN0 .word
 18883 = 9EED			PATTERN0.WIDTH	= DATAORIGIN+$0189
 18884 = 9EEF			PATTERN0.HEIGHT	= DATAORIGIN+$018B
 18885 = 9EF1			PATTERN0.OFS	= DATAORIGIN+$018D
 18886 = 9EF5			adr.PATTERN1	= DATAORIGIN+$0191	; [8] RECORD
 18887 9CE8			.var PATTERN1	= adr.PATTERN1 .word
 18888 = 9EF5			PATTERN1.WIDTH	= DATAORIGIN+$0191
 18889 = 9EF7			PATTERN1.HEIGHT	= DATAORIGIN+$0193
 18890 = 9EF9			PATTERN1.OFS	= DATAORIGIN+$0195
 18891 = 9EFD			adr.PATTERN2	= DATAORIGIN+$0199	; [8] RECORD
 18892 9CE8			.var PATTERN2	= adr.PATTERN2 .word
 18893 = 9EFD			PATTERN2.WIDTH	= DATAORIGIN+$0199
 18894 = 9EFF			PATTERN2.HEIGHT	= DATAORIGIN+$019B
 18895 = 9F01			PATTERN2.OFS	= DATAORIGIN+$019D
 18896 = 9F05			adr.PATTERN3	= DATAORIGIN+$01A1	; [8] RECORD
 18897 9CE8			.var PATTERN3	= adr.PATTERN3 .word
 18898 = 9F05			PATTERN3.WIDTH	= DATAORIGIN+$01A1
 18899 = 9F07			PATTERN3.HEIGHT	= DATAORIGIN+$01A3
 18900 = 9F09			PATTERN3.OFS	= DATAORIGIN+$01A5
 18901 = 9F0D			adr.PATTERN4	= DATAORIGIN+$01A9	; [8] RECORD
 18902 9CE8			.var PATTERN4	= adr.PATTERN4 .word
 18903 = 9F0D			PATTERN4.WIDTH	= DATAORIGIN+$01A9
 18904 = 9F0F			PATTERN4.HEIGHT	= DATAORIGIN+$01AB
 18905 = 9F11			PATTERN4.OFS	= DATAORIGIN+$01AD
 18906 = 9F15			STATUS	= DATAORIGIN+$01B1
 18907 = 9F16			SUCCESS	= DATAORIGIN+$01B2
 18908 = 9F17			REMAIN_BLK	= DATAORIGIN+$01B3
 18909 = 9F18			TOTALWALL	= DATAORIGIN+$01B4
 18910 = 9F19			adr.SCORE	= DATAORIGIN+$01B5	; [27] RECORD
 18911 9CE8			.var SCORE	= adr.SCORE .word
 18912 = 9F19			adr.SCORE.PLAYER	= [DATAORIGIN+$01B5] .array [3] .dword
 18913 9CE8			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 18914 = 9F25			adr.SCORE.WALL_N	= [DATAORIGIN+$01C1] .array [3]
 18915 9CE8			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 18916 = 9F28			adr.SCORE.LIVES	= [DATAORIGIN+$01C4] .array [3]
 18917 9CE8			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 18918 = 9F2B			SCORE.HISCORE	= DATAORIGIN+$01C7
 18919 = 9F2F			SCORE.PL_NUMB	= DATAORIGIN+$01CB
 18920 = 9F30			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01CC] .array [3]
 18921 9CE8			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 18922 = 9F33			SCORE.ABORTPLAY	= DATAORIGIN+$01CF
 18923 = 9F34			CUR_PLAYER	= DATAORIGIN+$01D0
 18924 = 9F35			adr.SHINEREC	= DATAORIGIN+$01D1	; [5] RECORD
 18925 9CE8			.var SHINEREC	= adr.SHINEREC .word
 18926 = 9F35			SHINEREC.XB	= DATAORIGIN+$01D1
 18927 = 9F36			SHINEREC.YB	= DATAORIGIN+$01D2
 18928 = 9F37			SHINEREC.FRAME	= DATAORIGIN+$01D3
 18929 = 9F38			SHINEREC.BLOCK	= DATAORIGIN+$01D4
 18930 = 9F39			SHINEREC.ACTIVE	= DATAORIGIN+$01D5
 18931 = 9F3A			LV	= DATAORIGIN+$01D6
 18932 = 9F3C			TRAINER	= DATAORIGIN+$01D8
 18933 = 9F3D			adr.LETT	= DATAORIGIN+$01D9	; [17] RECORD
 18934 9CE8			.var LETT	= adr.LETT .word
 18935 = 9F3D			LETT.X	= DATAORIGIN+$01D9
 18936 = 9F3E			LETT.Y	= DATAORIGIN+$01DA
 18937 = 9F3F			LETT.TYP	= DATAORIGIN+$01DB
 18938 = 9F41			LETT.FRAME	= DATAORIGIN+$01DD
 18939 = 9F42			LETT.SUBFRAME	= DATAORIGIN+$01DE
 18940 = 9F43			LETT.ACTIVE	= DATAORIGIN+$01DF
 18941 = 9F44			LETT.INCOMING	= DATAORIGIN+$01E0
 18942 = 9F46			LETT.NEXTX	= DATAORIGIN+$01E2
 18943 = 9F48			LETT.NEXTY	= DATAORIGIN+$01E4
 18944 = 9F4A			LETT.NEXTTYPE	= DATAORIGIN+$01E6
 18945 = 9F4C			LETT.LAST	= DATAORIGIN+$01E8
 18946 = 9F4E			adr.FIRE	= DATAORIGIN+$01EA	; [5] RECORD
 18947 9CE8			.var FIRE	= adr.FIRE .word
 18948 = 9F4E			FIRE.X	= DATAORIGIN+$01EA
 18949 = 9F4F			FIRE.Y	= DATAORIGIN+$01EB
 18950 = 9F50			FIRE.SHOT	= DATAORIGIN+$01EC
 18951 = 9F51			FIRE.AVL	= DATAORIGIN+$01ED
 18952 = 9F52			FIRE.NW	= DATAORIGIN+$01EE
 18953 = 9F53			BALLS_IN_PLAY	= DATAORIGIN+$01EF
 18954 = 9F54			SCRFLUX	= DATAORIGIN+$01F0
 18955 = 9F55			SCRFLUXCNT	= DATAORIGIN+$01F1
 18956 = 9F56			SOUND_ON	= DATAORIGIN+$01F2
 18957 = 9F57			HLP	= DATAORIGIN+$01F3
 18958 = 9F59			F_HLP	= DATAORIGIN+$01F5
 18959 = C000			adr.ROW	= $C000
 18960 9CE8			.var ROW	= adr.ROW .word
 18961 = C200			adr.TMP	= $C200
 18962 9CE8			.var TMP	= adr.TMP .word
 18963 = C300			adr.MODY	= $C300
 18964 9CE8			.var MODY	= adr.MODY .word
 18965 = C400			adr.MODX	= $C400
 18966 9CE8			.var MODX	= adr.MODX .word
 18967 = D800			adr.WALL_P	= $D800
 18968 9CE8			.var WALL_P	= adr.WALL_P .word
 18969 = DB00			adr.WALL	= $DB00
 18970 9CE8			.var WALL	= adr.WALL .word
 18971 = DC00			adr.ALL_WALLS	= $DC00
 18972 9CE8			.var ALL_WALLS	= adr.ALL_WALLS .word
 18973 9CE8			@exit
 18974
 18975 9CE8 A2 00		@halt	ldx #$00
 18976 9CEA 9A				txs
 18977
 18978 					.ifdef MAIN.@DEFINES.ROMOFF
 18979 9CEB EE 01 D3			inc portb
 18980 					.fi
 18981
 18982 9CEE A0 01			ldy #$01
 18983
 18984 9CF0 60				rts
 18985
 18986 				; ------------------------------------------------------------
 18987
 18988 9CF1			.local	@DEFINES
 18989 9CF1			ATARI
 18990 9CF1			CPU_6502
 18991 9CF1			ROMOFF
 18992 				.endl
 18993
 18994 9CF1			.local	@RESOURCE
 18995 				.endl
 18996
 18997 = 9CF1 00 B1		BLT
 18997 = 9CF3 00 B1		BLT.SRC_ADR
 18997 = 9CF5 06 B1		BLT.DST_ADR
 18997 = 9CF7 34 9E		VBXE_RAM
 18997 = 9CF9 5E 20		FLASH
 18997 = 9CFB 69 20		SCORE_WALL
 18997 = 9CFD 7F 20		EMERG_DEV
 18997 = 9CFF 88 20		COLORBLOCK
 18997 = 9D01 92 20		POS_DIGIT
 18997 = 9D03 96 20		DIGITS
 18997 = 9D05 A1 20		LEVEL
 18997 = 9D07 AD 20		LETTER_DIS
 18997 = 9D09 58 9E		BALLDATA
 18997 = 9D0B 60 9E		PLAYSCREEN
 18997 = 9D0D 68 9E		PLAYVAUS
 18997 = 9D0F 70 9E		NORMAL
 18997 = 9D11 78 9E		ENLARGED
 18997 = 9D13 80 9E		LASERS
 18997 = 9D15 88 9E		EXPLOSION
 18997 = 9D17 90 9E		NEWVAUS
 18997 = 9D19 98 9E		PRESENTS
 18997 = 9D1B A0 9E		SOUNDFX
 18997 = 9D1D A8 9E		SHINEWALL
 18997 = 9D1F B0 9E		MINIVAUS
 18997 = 9D21 B8 9E		LEVELSEL
 18997 = 9D23 C0 9E		LETTERS
 18997 = 9D25 C8 9E		SHOOTS
 18997 = 9D27 D0 9E		FLUX
 18997 = 9D29 D8 9E		VAUS
 18997 = 9D2B E5 9E		PATTERN
 18997 = 9D2D ED 9E		PATTERN0
 18997 = 9D2F F5 9E		PATTERN1
 18997 = 9D31 FD 9E		PATTERN2
 18997 = 9D33 05 9F		PATTERN3
 18997 = 9D35 0D 9F		PATTERN4
 18997 = 9D37 19 9F		SCORE
 18997 = 9D39 19 9F		SCORE.PLAYER
 18997 = 9D3B 25 9F		SCORE.WALL_N
 18997 = 9D3D 28 9F		SCORE.LIVES
 18997 = 9D3F 30 9F		SCORE.ROUNDSEL
 18997 = 9D41 35 9F		SHINEREC
 18997 = 9D43 3D 9F		LETT
 18997 = 9D45 4E 9F		FIRE
 18997 = 9D47 00 C0		ROW
 18997 = 9D49 00 C2		TMP
 18997 = 9D4B 00 C3		MODY
 18997 = 9D4D 00 C4		MODX
 18997 = 9D4F 00 D8		WALL_P
 18997 = 9D51 00 DB		WALL
 18997 = 9D53 00 DC		ALL_WALLS
 18997 				.endl							; MAIN
 18998
 18999 				; ------------------------------------------------------------
 19000 				; ------------------------------------------------------------
 19001
 19002 				.macro	UNITINITIALIZATION
 19003 				
 19004 					.ifdef MAIN.SYSTEM.@UnitInit
 19005 					jsr MAIN.SYSTEM.@UnitInit
 19006 					.fi
 19007 				
 19008 					.ifdef MAIN.ATARI.@UnitInit
 19009 					jsr MAIN.ATARI.@UnitInit
 19010 					.fi
 19011 				
 19012 					.ifdef MAIN.CRT.@UnitInit
 19013 					jsr MAIN.CRT.@UnitInit
 19014 					.fi
 19015 				
 19016 					.ifdef MAIN.TYPES.@UnitInit
 19017 					jsr MAIN.TYPES.@UnitInit
 19018 					.fi
 19019 				
 19020 					.ifdef MAIN.GRAPH.@UnitInit
 19021 					jsr MAIN.GRAPH.@UnitInit
 19022 					.fi
 19023 				
 19024 					.ifdef MAIN.VBXE.@UnitInit
 19025 					jsr MAIN.VBXE.@UnitInit
 19026 					.fi
 19027 				
 19028 					.ifdef MAIN.JOYSTICK.@UnitInit
 19029 					jsr MAIN.JOYSTICK.@UnitInit
 19030 					.fi
 19031 				.endm
 19032
 19033 				; ------------------------------------------------------------
 19034
 19035 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19036 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19036 				SYSTEM: $2ABC..$3396
 19037 					eif
 19038
 19039 					ift .SIZEOF(MAIN.ATARI) > 0
 19040 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19041 					eif
 19042
 19043 					ift .SIZEOF(MAIN.CRT) > 0
 19044 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19045 					eif
 19046
 19047 					ift .SIZEOF(MAIN.TYPES) > 0
 19048 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19049 					eif
 19050
 19051 					ift .SIZEOF(MAIN.GRAPH) > 0
 19052 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19052 				GRAPH: $3397..$3398
 19053 					eif
 19054
 19055 					ift .SIZEOF(MAIN.VBXE) > 0
 19056 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19056 				VBXE: $3399..$3834
 19057 					eif
 19058
 19059 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19060 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19060 				JOYSTICK: $3835..$383C
 19061 					eif
 19062
 19063 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19063 				CODE: $2000..$9CF0
 19064
 19065 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19066 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19067 					eif
 19068
 19069 9D55			@end
 19070
 19071 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19071 				VARS: $9CF1..$9D54
 19072
 19073 				; ------------------------------------------------------------
 19074
 19075 = 9D55				?adr = *
 19076 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19077 = 9D64				?adr = ?old_adr
 19078 					eif
 19079
 19080 					org ?adr
 19081 = 9D64				?old_adr = *
 19082
 19083 9D64			DATAORIGIN
 19084 9D64-9DB7> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19085 9D7C 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19086 9D94 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19087 9DAC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
 19088
 19089 = 0054			VARINITSIZE	= *-DATAORIGIN
 19090 = 047E			VARDATASIZE	= 1150
 19091
 19092 = A1E2			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19093
 19094 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19094 				DATA: $9D64..$A1E2
 19095
 19096 					ert DATAORIGIN<@end,'DATA memory overlap'
 19097
 19098 02E0-02E1> 2F 2A			run START
 19099
 19100 				; ------------------------------------------------------------
 19101
 19102 				.macro	STATICDATA
 19103 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19104 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19105 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19106 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19107 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19108 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19109 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19110 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19111 				.endm
 19112
 19113 					end
