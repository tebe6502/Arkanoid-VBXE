mads 2.1.8
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base\ 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/28] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-9D85> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
     3 2030 14 28 50 50 A0 A0 + .by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
     4 2048 C0 C0 18 0C C0 C0 + .by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     5 2060 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     6 2078 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     7 2090 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     8 20A8 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     9 20C0 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
    10 20D8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20E5			RTLIB
   131 20E5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20E5..$2A5E
   138
   139 				; ------------------------------------------------------------
   140
   141 2A5F			START
   142 2A5F BA				tsx
   143 2A60 8E 1A 9D			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 2A63				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2A63			.local	rominit
     5
     6 2A63 78			        sei
     7 2A64 A9 00		        lda #%00000000
     8 2A66 8D 0E D4		        sta NMIEN       ;$D40E
     9 2A69 A9 FE		        lda #%11111110
    10 2A6B 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 2A6E A2 8B		        ldx #<nmiint
    33 2A70 A0 2A		        ldy #>nmiint
    34 2A72 8E FA FF		        stx NMIVEC      ;$FFFA
    35 2A75 8C FB FF		        sty NMIVEC+1
    36
    37 2A78 A2 95		        ldx #<irqint
    38 2A7A A0 2A		        ldy #>irqint
    39 2A7C 8E FE FF		        stx IRQVEC      ;$FFFE
    40 2A7F 8C FF FF		        sty IRQVEC+1
    41
    42 2A82 A9 40		        lda #%01000000
    43 2A84 8D 0E D4		        sta NMIEN       ;$D40E
    44 2A87 58			        cli
    45
    46 2A88 4C B6 2A			jmp skp
    47
    48
    49 2A8B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 2A8E 10 03		        spl
    51 2A90 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 2A93 38			        sec
    54 2A94 24			        .byte $24        ;BIT $18
    55
    56 2A95 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 2A96 EE 01 D3		        inc PORTB       ;$D301
    61
    62 2A99 48			        pha
    63 2A9A 8A			        txa
    64 2A9B 48			        pha
    65 2A9C BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 2A9D A9 2A		        lda #>iret      ;adres procedury iret
    70 2A9F 48			        pha
    71 2AA0 A9 AF		        lda #<iret
    72 2AA2 48			        pha
    73 2AA3 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 2AA6 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 2AA7 90 03		        scc
    79 2AA9 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 2AAC 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 2AAF 68			iret	pla
    83 2AB0 AA				tax
    84 2AB1 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2AB2 CE 01 D3		        dec PORTB       ;$D301
    89 2AB5 40			        rti
    90
    91 2AB6			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 042C			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9DE9			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2AB6				m@init
Macro: M@INIT [Source: macros.asm]
     2 2AB6 A0 E9			ldy <VADR
     3 2AB8 A2 9D			ldx >VADR
     5 2ABA A9 00			lda #$00
     6 2ABC F0 07			beq skp_
     8 2ABE 99 00 10		clr	sta adr: $1000,y
    10 2AC1 C8				iny
    11 2AC2 D0 04			bne skp
    12 2AC4 E8				inx
    13 2AC5 8E C0 2A		skp_	stx adr+1
    15 2AC8 E0 A2		skp	cpx >VADR+VLEN
    16 2ACA D0 F2			bne clr
    17 2ACC C0 15			cpy <VADR+VLEN
    18 2ACE D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2AD0 A2 00			ldx #$00					; X = 0
   169 2AD2 86 82			stx bp						; BP = 0
   170
   171 2AD4 8E 08 D2			stx audctl					; reset POKEY
   172 2AD7 8E 18 D2			stx audctl+$10
   173 2ADA A9 03			lda #3
   174 2ADC 8D 0F D2			sta skctl
   175 2ADF 8D 1F D2			sta skctl+$10
   176
   177 2AE2 CA				dex						; X = 255
   178
   179 2AE3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2AE3 20 CE 33			jsr MAIN.SYSTEM.@UnitInit
    23 2AE6 20 59 38			jsr MAIN.VBXE.@UnitInit
   180
   181 2AE9			.local	MAIN						; PROCEDURE
   182
   183 2AE9 4C 16 9D			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2AEC			.local	SYSTEM						; UNIT
   188
   189 2AEC			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2AEC B5 96			lda :STACKORIGIN,x
   196 2AEE 85 8A			sta A
   197 2AF0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2AF2 85 8B			sta A+1
   199 2AF4 CA				dex
   200 2AF5			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2AF5 A0 00			ldy #0
   205 2AF7 B1 8A 85 92			mva (:edx),y Result
   206
   207 2AFB			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2AFB E8				inx
   215 2AFC A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2B00 60				rts						; ret
   231 				.endl
   232
   233 2B01			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2B01			.local	@010183000
   235 2B01 85 8A			sta X
   236
   237 				; -------------------  ASM Block 00000007  -------------------
   238
   239 2B03 A5 8A			lda :edx
   240 2B05 10 05			bpl @+
   241
   242 2B07 49 FF			eor #$ff
   243 2B09 18 69 01			add #1
   244 				@
   245 2B0C 85 92			sta Result
   246
   247 2B0E			@exit
   248
   249 				; ------------------------------------------------------------
   250
   251 = 008A			X	= :EDX
   252 = 0092			RESULT	= :STACKORIGIN-4
   253
   254 2B0E 60				rts						; ret
   255 				.endl
   256 				.endl							; overload
   257
   258 2B0F			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   259 2B0F			.local	@010184000
   260
   261 				; -------------------  ASM Block 00000008  -------------------
   262
   263 2B0F A5 8B			lda :edx+1
   264 2B11 10 0D			bpl @+
   265
   266 2B13 A9 00			lda #$00
   267 2B15 38 E5 8A			sub :edx
   268 2B18 85 8A			sta :edx
   269 2B1A A9 00			lda #$00
   270 2B1C E5 8B			sbc :edx+1
   271 2B1E 85 8B			sta :edx+1
   272 				@
   273 2B20 85 93			sta Result+1
   274
   275 2B22 A5 8A 85 92			mva :edx Result
   276
   277 2B26			@exit
   278
   279 				; ------------------------------------------------------------
   280
   281 = 008A			X	= :EDX
   282 = 0092			RESULT	= :STACKORIGIN-4
   283
   284 2B26 60				rts						; ret
   285 				.endl
   286 				.endl							; overload
   287
   288 2B27			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   289 2B27			.local	@010185000
   290
   291 				; -------------------  ASM Block 00000009  -------------------
   292
   293 2B27 A5 8D			lda :edx+3
   294 2B29 10 03			spl
   295 2B2B 20 4C 21			jsr @negEDX
   296
   297 2B2E 85 95			sta Result+3
   298
   299 2B30 A5 8A 85 92			mva :edx Result
   300 2B34 A5 8B 85 93			mva :edx+1 Result+1
   301 2B38 A5 8C 85 94			mva :edx+2 Result+2
   302
   303 2B3C			@exit
   304
   305 				; ------------------------------------------------------------
   306
   307 = 008A			X	= :EDX
   308 = 0092			RESULT	= :STACKORIGIN-4
   309
   310 2B3C 60				rts						; ret
   311 				.endl
   312 				.endl							; overload
   313
   314 2B3D			.local	ARCTAN						; FUNCTION | OVERLOAD
   315 2B3D			.local	@01018F000
   316
   317 				; optimize OK (SYSTEM), line = 904
   318
   319 2B3D A9 00			lda #$00
   320 2B3F 8D B0 9D			sta SIGN
   321
   322 				; optimize OK (SYSTEM), line = 905
   323
   324 2B42 AD A0 9D			lda VALUE
   325 2B45 8D A8 9D			sta X
   326 2B48 AD A1 9D			lda VALUE+1
   327 2B4B 8D A9 9D			sta X+1
   328 2B4E AD A2 9D			lda VALUE+2
   329 2B51 8D AA 9D			sta X+2
   330 2B54 AD A3 9D			lda VALUE+3
   331 2B57 8D AB 9D			sta X+3
   332
   333 				; optimize OK (SYSTEM), line = 906
   334
   335 2B5A A9 00			lda #$00
   336 2B5C 8D AC 9D			sta Y
   337 2B5F 8D AD 9D			sta Y+1
   338 2B62 8D AE 9D			sta Y+2
   339 2B65 8D AF 9D			sta Y+3
   340
   341 				; optimize OK (SYSTEM), line = 908
   342
   343 2B68 AD A3 9D			lda VALUE+3
   344 2B6B D0 0D			bne @+
   345 2B6D AD A2 9D			lda VALUE+2
   346 2B70 D0 08			bne @+
   347 2B72 AD A1 9D			lda VALUE+1
   348 2B75 D0 03			bne @+
   349 2B77 AD A0 9D			lda VALUE
   350 				@
   351 2B7A D0 11			jne l_0054
   352
   353 				; optimize OK (SYSTEM), line = 909
   354
   355 2B7C A9 00			lda #$00
   356 2B7E 8D A4 9D			sta RESULT
   357 2B81 8D A5 9D			sta RESULT+1
   358 2B84 8D A6 9D			sta RESULT+2
   359 2B87 8D A7 9D			sta RESULT+3
   360 2B8A 4C 66 2F			jmp @exit
   361 2B8D			l_0054
   362
   363 				; optimize OK (SYSTEM), line = 912
   364
   365 2B8D AD AB 9D			lda X+3
   366 2B90 10 0D			jpl l_0072
   367
   368 				; optimize OK (SYSTEM), line = 913
   369
   370 2B92 A9 01			lda #$01
   371 2B94 8D B0 9D			sta SIGN
   372
   373 				; optimize OK (SYSTEM), line = 914
   374
   375 2B97 AD AB 9D			lda X+3
   376 2B9A 49 80			eor #$80
   377 2B9C 8D AB 9D			sta X+3
   378 2B9F			l_0072
   379 2B9F			l_0062
   380
   381 				; optimize OK (SYSTEM), line = 917
   382
   383 2B9F A9 00			lda #$00
   384 2BA1 85 8A			sta :FP2MAN0
   385 2BA3 85 8B			sta :FP2MAN1
   386 2BA5 A9 80			lda #$80
   387 2BA7 85 8C			sta :FP2MAN2
   388 2BA9 A9 3F			lda #$3F
   389 2BAB 85 8D			sta :FP2MAN3
   390 2BAD AD A8 9D			lda X
   391 2BB0 85 86			sta :FP1MAN0
   392 2BB2 AD A9 9D			lda X+1
   393 2BB5 85 87			sta :FP1MAN1
   394 2BB7 AD AA 9D			lda X+2
   395 2BBA 85 88			sta :FP1MAN2
   396 2BBC AD AB 9D			lda X+3
   397 2BBF 85 89			sta :FP1MAN3
   398 2BC1 20 93 24			jsr @FSUB
   399 2BC4 A5 8E			lda :FPMAN0
   400 2BC6 85 9F			sta :STACKORIGIN+9
   401 2BC8 A5 8F			lda :FPMAN1
   402 2BCA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   403 2BCC A5 90			lda :FPMAN2
   404 2BCE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   405 2BD0 A5 91			lda :FPMAN3
   406 2BD2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   407 2BD4 A9 00			lda #$00
   408 2BD6 85 8A			sta :FP2MAN0
   409 2BD8 85 8B			sta :FP2MAN1
   410 2BDA A9 80			lda #$80
   411 2BDC 85 8C			sta :FP2MAN2
   412 2BDE A9 3F			lda #$3F
   413 2BE0 85 8D			sta :FP2MAN3
   414 2BE2 AD A8 9D			lda X
   415 2BE5 85 86			sta :FP1MAN0
   416 2BE7 AD A9 9D			lda X+1
   417 2BEA 85 87			sta :FP1MAN1
   418 2BEC AD AA 9D			lda X+2
   419 2BEF 85 88			sta :FP1MAN2
   420 2BF1 AD AB 9D			lda X+3
   421 2BF4 85 89			sta :FP1MAN3
   422 2BF6 20 8E 24			jsr @FADD
   423 2BF9 A5 8E			lda :FPMAN0
   424 2BFB 85 8A			sta :FP2MAN0
   425 2BFD A5 8F			lda :FPMAN1
   426 2BFF 85 8B			sta :FP2MAN1
   427 2C01 A5 90			lda :FPMAN2
   428 2C03 85 8C			sta :FP2MAN2
   429 2C05 A5 91			lda :FPMAN3
   430 2C07 85 8D			sta :FP2MAN3
   431 2C09 A5 9F			lda :STACKORIGIN+9
   432 2C0B 85 86			sta :FP1MAN0
   433 2C0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   434 2C0F 85 87			sta :FP1MAN1
   435 2C11 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   436 2C13 85 88			sta :FP1MAN2
   437 2C15 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   438 2C17 85 89			sta :FP1MAN3
   439 2C19 20 9B 26			jsr @FDIV
   440 2C1C A5 8E			lda :FPMAN0
   441 2C1E 8D A8 9D			sta X
   442 2C21 A5 8F			lda :FPMAN1
   443 2C23 8D A9 9D			sta X+1
   444 2C26 A5 90			lda :FPMAN2
   445 2C28 8D AA 9D			sta X+2
   446 2C2B A5 91			lda :FPMAN3
   447 2C2D 8D AB 9D			sta X+3
   448
   449 				; optimize OK (SYSTEM), line = 918
   450
   451 2C30 AD A8 9D			lda X
   452 2C33 85 8A			sta :FP2MAN0
   453 2C35 AD A9 9D			lda X+1
   454 2C38 85 8B			sta :FP2MAN1
   455 2C3A AD AA 9D			lda X+2
   456 2C3D 85 8C			sta :FP2MAN2
   457 2C3F AD AB 9D			lda X+3
   458 2C42 85 8D			sta :FP2MAN3
   459 2C44 AD A8 9D			lda X
   460 2C47 85 86			sta :FP1MAN0
   461 2C49 AD A9 9D			lda X+1
   462 2C4C 85 87			sta :FP1MAN1
   463 2C4E AD AA 9D			lda X+2
   464 2C51 85 88			sta :FP1MAN2
   465 2C53 AD AB 9D			lda X+3
   466 2C56 85 89			sta :FP1MAN3
   467 2C58 20 FA 25			jsr @FMUL
   468 2C5B A5 8E			lda :FPMAN0
   469 2C5D 8D AC 9D			sta Y
   470 2C60 A5 8F			lda :FPMAN1
   471 2C62 8D AD 9D			sta Y+1
   472 2C65 A5 90			lda :FPMAN2
   473 2C67 8D AE 9D			sta Y+2
   474 2C6A A5 91			lda :FPMAN3
   475 2C6C 8D AF 9D			sta Y+3
   476
   477 				; optimize OK (SYSTEM), line = 919
   478
   479 2C6F AD AC 9D			lda Y
   480 2C72 85 8A			sta :FP2MAN0
   481 2C74 AD AD 9D			lda Y+1
   482 2C77 85 8B			sta :FP2MAN1
   483 2C79 AD AE 9D			lda Y+2
   484 2C7C 85 8C			sta :FP2MAN2
   485 2C7E AD AF 9D			lda Y+3
   486 2C81 85 8D			sta :FP2MAN3
   487 2C83 A9 4A			lda #$4A
   488 2C85 85 86			sta :FP1MAN0
   489 2C87 A9 D7			lda #$D7
   490 2C89 85 87			sta :FP1MAN1
   491 2C8B A9 3B			lda #$3B
   492 2C8D 85 88			sta :FP1MAN2
   493 2C8F 85 89			sta :FP1MAN3
   494 2C91 20 FA 25			jsr @FMUL
   495 2C94 A5 8E			lda :FPMAN0
   496 2C96 85 86			sta :FP1MAN0
   497 2C98 A5 8F			lda :FPMAN1
   498 2C9A 85 87			sta :FP1MAN1
   499 2C9C A5 90			lda :FPMAN2
   500 2C9E 85 88			sta :FP1MAN2
   501 2CA0 A5 91			lda :FPMAN3
   502 2CA2 85 89			sta :FP1MAN3
   503 2CA4 A9 02			lda #$02
   504 2CA6 85 8A			sta :FP2MAN0
   505 2CA8 A9 6E			lda #$6E
   506 2CAA 85 8B			sta :FP2MAN1
   507 2CAC A9 84			lda #$84
   508 2CAE 85 8C			sta :FP2MAN2
   509 2CB0 A9 3C			lda #$3C
   510 2CB2 85 8D			sta :FP2MAN3
   511 2CB4 20 93 24			jsr @FSUB
   512 2CB7 A5 8E			lda :FPMAN0
   513 2CB9 85 86			sta :FP1MAN0
   514 2CBB A5 8F			lda :FPMAN1
   515 2CBD 85 87			sta :FP1MAN1
   516 2CBF A5 90			lda :FPMAN2
   517 2CC1 85 88			sta :FP1MAN2
   518 2CC3 A5 91			lda :FPMAN3
   519 2CC5 85 89			sta :FP1MAN3
   520 2CC7 AD AC 9D			lda Y
   521 2CCA 85 8A			sta :FP2MAN0
   522 2CCC AD AD 9D			lda Y+1
   523 2CCF 85 8B			sta :FP2MAN1
   524 2CD1 AD AE 9D			lda Y+2
   525 2CD4 85 8C			sta :FP2MAN2
   526 2CD6 AD AF 9D			lda Y+3
   527 2CD9 85 8D			sta :FP2MAN3
   528 2CDB 20 FA 25			jsr @FMUL
   529 2CDE A5 8E			lda :FPMAN0
   530 2CE0 85 86			sta :FP1MAN0
   531 2CE2 A5 8F			lda :FPMAN1
   532 2CE4 85 87			sta :FP1MAN1
   533 2CE6 A5 90			lda :FPMAN2
   534 2CE8 85 88			sta :FP1MAN2
   535 2CEA A5 91			lda :FPMAN3
   536 2CEC 85 89			sta :FP1MAN3
   537 2CEE A9 FE			lda #$FE
   538 2CF0 85 8A			sta :FP2MAN0
   539 2CF2 A9 C1			lda #$C1
   540 2CF4 85 8B			sta :FP2MAN1
   541 2CF6 A9 2F			lda #$2F
   542 2CF8 85 8C			sta :FP2MAN2
   543 2CFA A9 3D			lda #$3D
   544 2CFC 85 8D			sta :FP2MAN3
   545 2CFE 20 8E 24			jsr @FADD
   546 2D01 A5 8E			lda :FPMAN0
   547 2D03 85 86			sta :FP1MAN0
   548 2D05 A5 8F			lda :FPMAN1
   549 2D07 85 87			sta :FP1MAN1
   550 2D09 A5 90			lda :FPMAN2
   551 2D0B 85 88			sta :FP1MAN2
   552 2D0D A5 91			lda :FPMAN3
   553 2D0F 85 89			sta :FP1MAN3
   554 2D11 AD AC 9D			lda Y
   555 2D14 85 8A			sta :FP2MAN0
   556 2D16 AD AD 9D			lda Y+1
   557 2D19 85 8B			sta :FP2MAN1
   558 2D1B AD AE 9D			lda Y+2
   559 2D1E 85 8C			sta :FP2MAN2
   560 2D20 AD AF 9D			lda Y+3
   561 2D23 85 8D			sta :FP2MAN3
   562 2D25 20 FA 25			jsr @FMUL
   563 2D28 A5 8E			lda :FPMAN0
   564 2D2A 85 86			sta :FP1MAN0
   565 2D2C A5 8F			lda :FPMAN1
   566 2D2E 85 87			sta :FP1MAN1
   567 2D30 A5 90			lda :FPMAN2
   568 2D32 85 88			sta :FP1MAN2
   569 2D34 A5 91			lda :FPMAN3
   570 2D36 85 89			sta :FP1MAN3
   571 2D38 A9 74			lda #$74
   572 2D3A 85 8A			sta :FP2MAN0
   573 2D3C A9 31			lda #$31
   574 2D3E 85 8B			sta :FP2MAN1
   575 2D40 A9 9A			lda #$9A
   576 2D42 85 8C			sta :FP2MAN2
   577 2D44 A9 3D			lda #$3D
   578 2D46 85 8D			sta :FP2MAN3
   579 2D48 20 93 24			jsr @FSUB
   580 2D4B A5 8E			lda :FPMAN0
   581 2D4D 85 86			sta :FP1MAN0
   582 2D4F A5 8F			lda :FPMAN1
   583 2D51 85 87			sta :FP1MAN1
   584 2D53 A5 90			lda :FPMAN2
   585 2D55 85 88			sta :FP1MAN2
   586 2D57 A5 91			lda :FPMAN3
   587 2D59 85 89			sta :FP1MAN3
   588 2D5B AD AC 9D			lda Y
   589 2D5E 85 8A			sta :FP2MAN0
   590 2D60 AD AD 9D			lda Y+1
   591 2D63 85 8B			sta :FP2MAN1
   592 2D65 AD AE 9D			lda Y+2
   593 2D68 85 8C			sta :FP2MAN2
   594 2D6A AD AF 9D			lda Y+3
   595 2D6D 85 8D			sta :FP2MAN3
   596 2D6F 20 FA 25			jsr @FMUL
   597 2D72 A5 8E			lda :FPMAN0
   598 2D74 85 86			sta :FP1MAN0
   599 2D76 A5 8F			lda :FPMAN1
   600 2D78 85 87			sta :FP1MAN1
   601 2D7A A5 90			lda :FPMAN2
   602 2D7C 85 88			sta :FP1MAN2
   603 2D7E A5 91			lda :FPMAN3
   604 2D80 85 89			sta :FP1MAN3
   605 2D82 A9 83			lda #$83
   606 2D84 85 8A			sta :FP2MAN0
   607 2D86 A9 3D			lda #$3D
   608 2D88 85 8B			sta :FP2MAN1
   609 2D8A A9 DA			lda #$DA
   610 2D8C 85 8C			sta :FP2MAN2
   611 2D8E A9 3D			lda #$3D
   612 2D90 85 8D			sta :FP2MAN3
   613 2D92 20 8E 24			jsr @FADD
   614 2D95 A5 8E			lda :FPMAN0
   615 2D97 85 86			sta :FP1MAN0
   616 2D99 A5 8F			lda :FPMAN1
   617 2D9B 85 87			sta :FP1MAN1
   618 2D9D A5 90			lda :FPMAN2
   619 2D9F 85 88			sta :FP1MAN2
   620 2DA1 A5 91			lda :FPMAN3
   621 2DA3 85 89			sta :FP1MAN3
   622 2DA5 AD AC 9D			lda Y
   623 2DA8 85 8A			sta :FP2MAN0
   624 2DAA AD AD 9D			lda Y+1
   625 2DAD 85 8B			sta :FP2MAN1
   626 2DAF AD AE 9D			lda Y+2
   627 2DB2 85 8C			sta :FP2MAN2
   628 2DB4 AD AF 9D			lda Y+3
   629 2DB7 85 8D			sta :FP2MAN3
   630 2DB9 20 FA 25			jsr @FMUL
   631 2DBC A5 8E			lda :FPMAN0
   632 2DBE 85 86			sta :FP1MAN0
   633 2DC0 A5 8F			lda :FPMAN1
   634 2DC2 85 87			sta :FP1MAN1
   635 2DC4 A5 90			lda :FPMAN2
   636 2DC6 85 88			sta :FP1MAN2
   637 2DC8 A5 91			lda :FPMAN3
   638 2DCA 85 89			sta :FP1MAN3
   639 2DCC A9 C7			lda #$C7
   640 2DCE 85 8A			sta :FP2MAN0
   641 2DD0 A9 7F			lda #$7F
   642 2DD2 85 8B			sta :FP2MAN1
   643 2DD4 A9 11			lda #$11
   644 2DD6 85 8C			sta :FP2MAN2
   645 2DD8 A9 3E			lda #$3E
   646 2DDA 85 8D			sta :FP2MAN3
   647 2DDC 20 93 24			jsr @FSUB
   648 2DDF A5 8E			lda :FPMAN0
   649 2DE1 85 86			sta :FP1MAN0
   650 2DE3 A5 8F			lda :FPMAN1
   651 2DE5 85 87			sta :FP1MAN1
   652 2DE7 A5 90			lda :FPMAN2
   653 2DE9 85 88			sta :FP1MAN2
   654 2DEB A5 91			lda :FPMAN3
   655 2DED 85 89			sta :FP1MAN3
   656 2DEF AD AC 9D			lda Y
   657 2DF2 85 8A			sta :FP2MAN0
   658 2DF4 AD AD 9D			lda Y+1
   659 2DF7 85 8B			sta :FP2MAN1
   660 2DF9 AD AE 9D			lda Y+2
   661 2DFC 85 8C			sta :FP2MAN2
   662 2DFE AD AF 9D			lda Y+3
   663 2E01 85 8D			sta :FP2MAN3
   664 2E03 20 FA 25			jsr @FMUL
   665 2E06 A5 8E			lda :FPMAN0
   666 2E08 85 86			sta :FP1MAN0
   667 2E0A A5 8F			lda :FPMAN1
   668 2E0C 85 87			sta :FP1MAN1
   669 2E0E A5 90			lda :FPMAN2
   670 2E10 85 88			sta :FP1MAN2
   671 2E12 A5 91			lda :FPMAN3
   672 2E14 85 89			sta :FP1MAN3
   673 2E16 A9 E5			lda #$E5
   674 2E18 85 8A			sta :FP2MAN0
   675 2E1A A9 BB			lda #$BB
   676 2E1C 85 8B			sta :FP2MAN1
   677 2E1E A9 4C			lda #$4C
   678 2E20 85 8C			sta :FP2MAN2
   679 2E22 A9 3E			lda #$3E
   680 2E24 85 8D			sta :FP2MAN3
   681 2E26 20 8E 24			jsr @FADD
   682 2E29 A5 8E			lda :FPMAN0
   683 2E2B 85 86			sta :FP1MAN0
   684 2E2D A5 8F			lda :FPMAN1
   685 2E2F 85 87			sta :FP1MAN1
   686 2E31 A5 90			lda :FPMAN2
   687 2E33 85 88			sta :FP1MAN2
   688 2E35 A5 91			lda :FPMAN3
   689 2E37 85 89			sta :FP1MAN3
   690 2E39 AD AC 9D			lda Y
   691 2E3C 85 8A			sta :FP2MAN0
   692 2E3E AD AD 9D			lda Y+1
   693 2E41 85 8B			sta :FP2MAN1
   694 2E43 AD AE 9D			lda Y+2
   695 2E46 85 8C			sta :FP2MAN2
   696 2E48 AD AF 9D			lda Y+3
   697 2E4B 85 8D			sta :FP2MAN3
   698 2E4D 20 FA 25			jsr @FMUL
   699 2E50 A5 8E			lda :FPMAN0
   700 2E52 85 86			sta :FP1MAN0
   701 2E54 A5 8F			lda :FPMAN1
   702 2E56 85 87			sta :FP1MAN1
   703 2E58 A5 90			lda :FPMAN2
   704 2E5A 85 88			sta :FP1MAN2
   705 2E5C A5 91			lda :FPMAN3
   706 2E5E 85 89			sta :FP1MAN3
   707 2E60 A9 6C			lda #$6C
   708 2E62 85 8A			sta :FP2MAN0
   709 2E64 A9 AA			lda #$AA
   710 2E66 85 8B			sta :FP2MAN1
   711 2E68 85 8C			sta :FP2MAN2
   712 2E6A A9 3E			lda #$3E
   713 2E6C 85 8D			sta :FP2MAN3
   714 2E6E 20 93 24			jsr @FSUB
   715 2E71 A5 8E			lda :FPMAN0
   716 2E73 85 86			sta :FP1MAN0
   717 2E75 A5 8F			lda :FPMAN1
   718 2E77 85 87			sta :FP1MAN1
   719 2E79 A5 90			lda :FPMAN2
   720 2E7B 85 88			sta :FP1MAN2
   721 2E7D A5 91			lda :FPMAN3
   722 2E7F 85 89			sta :FP1MAN3
   723 2E81 AD AC 9D			lda Y
   724 2E84 85 8A			sta :FP2MAN0
   725 2E86 AD AD 9D			lda Y+1
   726 2E89 85 8B			sta :FP2MAN1
   727 2E8B AD AE 9D			lda Y+2
   728 2E8E 85 8C			sta :FP2MAN2
   729 2E90 AD AF 9D			lda Y+3
   730 2E93 85 8D			sta :FP2MAN3
   731 2E95 20 FA 25			jsr @FMUL
   732 2E98 A5 8E			lda :FPMAN0
   733 2E9A 85 86			sta :FP1MAN0
   734 2E9C A5 8F			lda :FPMAN1
   735 2E9E 85 87			sta :FP1MAN1
   736 2EA0 A5 90			lda :FPMAN2
   737 2EA2 85 88			sta :FP1MAN2
   738 2EA4 A5 91			lda :FPMAN3
   739 2EA6 85 89			sta :FP1MAN3
   740 2EA8 A9 00			lda #$00
   741 2EAA 85 8A			sta :FP2MAN0
   742 2EAC 85 8B			sta :FP2MAN1
   743 2EAE A9 80			lda #$80
   744 2EB0 85 8C			sta :FP2MAN2
   745 2EB2 A9 3F			lda #$3F
   746 2EB4 85 8D			sta :FP2MAN3
   747 2EB6 20 8E 24			jsr @FADD
   748 2EB9 A5 8E			lda :FPMAN0
   749 2EBB 85 86			sta :FP1MAN0
   750 2EBD A5 8F			lda :FPMAN1
   751 2EBF 85 87			sta :FP1MAN1
   752 2EC1 A5 90			lda :FPMAN2
   753 2EC3 85 88			sta :FP1MAN2
   754 2EC5 A5 91			lda :FPMAN3
   755 2EC7 85 89			sta :FP1MAN3
   756 2EC9 AD A8 9D			lda X
   757 2ECC 85 8A			sta :FP2MAN0
   758 2ECE AD A9 9D			lda X+1
   759 2ED1 85 8B			sta :FP2MAN1
   760 2ED3 AD AA 9D			lda X+2
   761 2ED6 85 8C			sta :FP2MAN2
   762 2ED8 AD AB 9D			lda X+3
   763 2EDB 85 8D			sta :FP2MAN3
   764 2EDD 20 FA 25			jsr @FMUL
   765 2EE0 A5 8E			lda :FPMAN0
   766 2EE2 8D A8 9D			sta X
   767 2EE5 A5 8F			lda :FPMAN1
   768 2EE7 8D A9 9D			sta X+1
   769 2EEA A5 90			lda :FPMAN2
   770 2EEC 8D AA 9D			sta X+2
   771 2EEF A5 91			lda :FPMAN3
   772 2EF1 8D AB 9D			sta X+3
   773
   774 				; optimize OK (SYSTEM), line = 922
   775
   776 2EF4 AD A8 9D			lda X
   777 2EF7 85 8A			sta :FP2MAN0
   778 2EF9 AD A9 9D			lda X+1
   779 2EFC 85 8B			sta :FP2MAN1
   780 2EFE AD AA 9D			lda X+2
   781 2F01 85 8C			sta :FP2MAN2
   782 2F03 AD AB 9D			lda X+3
   783 2F06 85 8D			sta :FP2MAN3
   784 2F08 A9 DB			lda #$DB
   785 2F0A 85 86			sta :FP1MAN0
   786 2F0C A9 0F			lda #$0F
   787 2F0E 85 87			sta :FP1MAN1
   788 2F10 A9 49			lda #$49
   789 2F12 85 88			sta :FP1MAN2
   790 2F14 A9 3F			lda #$3F
   791 2F16 85 89			sta :FP1MAN3
   792 2F18 20 8E 24			jsr @FADD
   793 2F1B A5 8E			lda :FPMAN0
   794 2F1D 8D A8 9D			sta X
   795 2F20 A5 8F			lda :FPMAN1
   796 2F22 8D A9 9D			sta X+1
   797 2F25 A5 90			lda :FPMAN2
   798 2F27 8D AA 9D			sta X+2
   799 2F2A A5 91			lda :FPMAN3
   800 2F2C 8D AB 9D			sta X+3
   801
   802 				; optimize OK (SYSTEM), line = 924
   803
   804 2F2F AD B0 9D			lda SIGN
   805 2F32 F0 1A			jeq l_00F4
   806
   807 				; optimize OK (SYSTEM), line = 925
   808
   809 2F34 AD A8 9D			lda X
   810 2F37 8D A4 9D			sta RESULT
   811 2F3A AD A9 9D			lda X+1
   812 2F3D 8D A5 9D			sta RESULT+1
   813 2F40 AD AA 9D			lda X+2
   814 2F43 8D A6 9D			sta RESULT+2
   815 2F46 AD AB 9D			lda X+3
   816 2F49 49 80			eor #$80
   817 2F4B 4C 63 2F			jmp l_0105
   818 2F4E			l_00F4
   819
   820 				; optimize OK (SYSTEM), line = 927
   821
   822 2F4E AD A8 9D			lda X
   823 2F51 8D A4 9D			sta RESULT
   824 2F54 AD A9 9D			lda X+1
   825 2F57 8D A5 9D			sta RESULT+1
   826 2F5A AD AA 9D			lda X+2
   827 2F5D 8D A6 9D			sta RESULT+2
   828 2F60 AD AB 9D			lda X+3
   829 2F63			l_0105
   830 2F63 8D A7 9D			sta RESULT+3
   831 2F66			@exit
   832
   833 				; ------------------------------------------------------------
   834
   835 = 9DA0			VALUE	= DATAORIGIN+$000B
   836 = 9DA4			RESULT	= DATAORIGIN+$000F
   837 = 9DA8			X	= DATAORIGIN+$0013
   838 = 9DAC			Y	= DATAORIGIN+$0017
   839 = 9DB0			SIGN	= DATAORIGIN+$001B
   840
   841 = 9DA0			@VarData	= VALUE
   842 = 000D			@VarDataSize	= 13
   843
   844 2F66 60				rts						; ret
   845 				.endl
   846 				.endl							; overload
   847
   848 2F67			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   849
   850 				; ------------------------------------------------------------
   851
   852 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   853 				; as Pointer
   854 2F67 B5 96			lda :STACKORIGIN,x
   855 2F69 85 8A			sta A
   856 2F6B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   857 2F6D 85 8B			sta A+1
   858 2F6F CA				dex
   859 2F70 30 05			jmi @main
   860
   861 				; ------------------------------------------------------------
   862
   863 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   864 				; as Pointer
   865 2F72 B5 96			lda :STACKORIGIN,x
   866 2F74 85 8E			sta VALUE
   867 2F76 CA				dex
   868 2F77			@main
   869
   870 				; -------------------  ASM Block 00000025  -------------------
   871
   872 2F77 A0 00			ldy #0
   873 2F79 A5 8E 91 8A			mva value (:edx),y
   874
   875 				; ------------------------------------------------------------
   876
   877 = 008A			A	= :EDX
   878 = 008E			VALUE	= :ECX
   879
   880 2F7D			@exit
   881 					.ifdef @new
   882 					lda <@VarData
   883 					sta :ztmp
   884 					lda >@VarData
   885 					ldy #@VarDataSize-1
   886 					jmp @FreeMem
   887 					els
   888 2F7D 60				rts						; ret
   889 					eif
   890 				.endl
   891
   892 2F7E			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   893 2F7E			.local	@03018000001810000300000
   894
   895 					.MACRO m@INLINE
   896 				
   897 				; -------------------  ASM Block 00000033  -------------------
   898 				
   899 					jsr @fill
   900 				
   901 					.ENDM
   902
   903 				; ------------------------------------------------------------
   904
   905 = 008A			A	= :EDX
   906 = 008E			COUNT	= :ECX
   907 = 0086			VALUE	= :EAX
   908
   909 2F7E			@exit
   910 				.endl
   911 				.endl							; overload
   912
   913 2F7E			.local	FSINCOS						; FUNCTION
   914
   915 				; --- WhileProlog
   916 2F7E 4C BC 2F			jmp l_015B
   917 2F81			l_015C
   918
   919 				; optimize OK (SYSTEM), line = 1909
   920
   921 2F81 A9 DB			lda #$DB
   922 2F83 85 8A			sta :FP2MAN0
   923 2F85 A9 0F			lda #$0F
   924 2F87 85 8B			sta :FP2MAN1
   925 2F89 A9 C9			lda #$C9
   926 2F8B 85 8C			sta :FP2MAN2
   927 2F8D A9 40			lda #$40
   928 2F8F 85 8D			sta :FP2MAN3
   929 2F91 AD B1 9D			lda X
   930 2F94 85 86			sta :FP1MAN0
   931 2F96 AD B2 9D			lda X+1
   932 2F99 85 87			sta :FP1MAN1
   933 2F9B AD B3 9D			lda X+2
   934 2F9E 85 88			sta :FP1MAN2
   935 2FA0 AD B4 9D			lda X+3
   936 2FA3 85 89			sta :FP1MAN3
   937 2FA5 20 93 24			jsr @FSUB
   938 2FA8 A5 8E			lda :FPMAN0
   939 2FAA 8D B1 9D			sta X
   940 2FAD A5 8F			lda :FPMAN1
   941 2FAF 8D B2 9D			sta X+1
   942 2FB2 A5 90			lda :FPMAN2
   943 2FB4 8D B3 9D			sta X+2
   944 2FB7 A5 91			lda :FPMAN3
   945 2FB9 8D B4 9D			sta X+3
   946 2FBC			l_015B
   947 2FBC A9 DB			lda #$DB
   948 2FBE 85 86			sta @FCMPL.A
   949 2FC0 A9 0F			lda #$0F
   950 2FC2 85 87			sta @FCMPL.A+1
   951 2FC4 A9 C9			lda #$C9
   952 2FC6 85 88			sta @FCMPL.A+2
   953 2FC8 A9 40			lda #$40
   954 2FCA 85 89			sta @FCMPL.A+3
   955 2FCC AD B1 9D			lda X
   956 2FCF 85 8E			sta @FCMPL.B
   957 2FD1 AD B2 9D			lda X+1
   958 2FD4 85 8F			sta @FCMPL.B+1
   959 2FD6 AD B3 9D			lda X+2
   960 2FD9 85 90			sta @FCMPL.B+2
   961 2FDB AD B4 9D			lda X+3
   962 2FDE 85 91			sta @FCMPL.B+3
   963 2FE0 20 17 27			jsr @FCMPL
   964 2FE3 30 02			smi
   965 2FE5 D0 9A			jne l_015C
   966
   967 				; --- WhileProlog
   968 2FE7 4C 25 30			jmp l_0170
   969 2FEA			l_0171
   970
   971 				; optimize OK (SYSTEM), line = 1910
   972
   973 2FEA A9 DB			lda #$DB
   974 2FEC 85 8A			sta :FP2MAN0
   975 2FEE A9 0F			lda #$0F
   976 2FF0 85 8B			sta :FP2MAN1
   977 2FF2 A9 C9			lda #$C9
   978 2FF4 85 8C			sta :FP2MAN2
   979 2FF6 A9 40			lda #$40
   980 2FF8 85 8D			sta :FP2MAN3
   981 2FFA AD B1 9D			lda X
   982 2FFD 85 86			sta :FP1MAN0
   983 2FFF AD B2 9D			lda X+1
   984 3002 85 87			sta :FP1MAN1
   985 3004 AD B3 9D			lda X+2
   986 3007 85 88			sta :FP1MAN2
   987 3009 AD B4 9D			lda X+3
   988 300C 85 89			sta :FP1MAN3
   989 300E 20 8E 24			jsr @FADD
   990 3011 A5 8E			lda :FPMAN0
   991 3013 8D B1 9D			sta X
   992 3016 A5 8F			lda :FPMAN1
   993 3018 8D B2 9D			sta X+1
   994 301B A5 90			lda :FPMAN2
   995 301D 8D B3 9D			sta X+2
   996 3020 A5 91			lda :FPMAN3
   997 3022 8D B4 9D			sta X+3
   998 3025			l_0170
   999 3025 AD B4 9D			lda X+3
  1000 3028 30 C0			jmi l_0171
  1001
  1002 				; optimize OK (SYSTEM), line = 1913
  1003
  1004 302A A9 83			lda #$83
  1005 302C 85 8A			sta :FP2MAN0
  1006 302E A9 F9			lda #$F9
  1007 3030 85 8B			sta :FP2MAN1
  1008 3032 A9 22			lda #$22
  1009 3034 85 8C			sta :FP2MAN2
  1010 3036 A9 3F			lda #$3F
  1011 3038 85 8D			sta :FP2MAN3
  1012 303A AD B1 9D			lda X
  1013 303D 85 86			sta :FP1MAN0
  1014 303F AD B2 9D			lda X+1
  1015 3042 85 87			sta :FP1MAN1
  1016 3044 AD B3 9D			lda X+2
  1017 3047 85 88			sta :FP1MAN2
  1018 3049 AD B4 9D			lda X+3
  1019 304C 85 89			sta :FP1MAN3
  1020 304E 20 FA 25			jsr @FMUL
  1021 3051 A5 8E			lda :FPMAN0
  1022 3053 8D B1 9D			sta X
  1023 3056 A5 8F			lda :FPMAN1
  1024 3058 8D B2 9D			sta X+1
  1025 305B A5 90			lda :FPMAN2
  1026 305D 8D B3 9D			sta X+2
  1027 3060 A5 91			lda :FPMAN3
  1028 3062 8D B4 9D			sta X+3
  1029
  1030 				; optimize OK (SYSTEM), line = 1916
  1031
  1032 3065 AD B1 9D			lda X
  1033 3068 85 8E			sta :FPMAN0
  1034 306A AD B2 9D			lda X+1
  1035 306D 85 8F			sta :FPMAN1
  1036 306F AD B3 9D			lda X+2
  1037 3072 85 90			sta :FPMAN2
  1038 3074 AD B4 9D			lda X+3
  1039 3077 85 91			sta :FPMAN3
  1040 3079 20 63 27			jsr @F2I
  1041 307C A5 8E			lda :FPMAN0
  1042 307E 8D BA 9D			sta I
  1043
  1044 				; optimize OK (SYSTEM), line = 1919
  1045
  1046 3081 AD B4 9D			lda X+3
  1047 3084 10 03			jpl l_019F
  1048 3086 CE BA 9D			dec I
  1049 3089			l_019F
  1050
  1051 				; optimize OK (SYSTEM), line = 1922
  1052
  1053 3089 A0 00			ldy #$00
  1054 308B AD BA 9D			lda I
  1055 308E 10 01			spl
  1056 3090 88				dey
  1057 3091 85 8E			sta :FPMAN0
  1058 3093 84 8F			sty :FPMAN1
  1059 3095 84 90			sty :FPMAN2
  1060 3097 84 91			sty :FPMAN3
  1061 3099 20 D4 27			jsr @I2F
  1062 309C A5 8E			lda :FPMAN0
  1063 309E 85 8A			sta :FP2MAN0
  1064 30A0 A5 8F			lda :FPMAN1
  1065 30A2 85 8B			sta :FP2MAN1
  1066 30A4 A5 90			lda :FPMAN2
  1067 30A6 85 8C			sta :FP2MAN2
  1068 30A8 A5 91			lda :FPMAN3
  1069 30AA 85 8D			sta :FP2MAN3
  1070 30AC AD B1 9D			lda X
  1071 30AF 85 86			sta :FP1MAN0
  1072 30B1 AD B2 9D			lda X+1
  1073 30B4 85 87			sta :FP1MAN1
  1074 30B6 AD B3 9D			lda X+2
  1075 30B9 85 88			sta :FP1MAN2
  1076 30BB AD B4 9D			lda X+3
  1077 30BE 85 89			sta :FP1MAN3
  1078 30C0 20 93 24			jsr @FSUB
  1079 30C3 A5 8E			lda :FPMAN0
  1080 30C5 8D B1 9D			sta X
  1081 30C8 A5 8F			lda :FPMAN1
  1082 30CA 8D B2 9D			sta X+1
  1083 30CD A5 90			lda :FPMAN2
  1084 30CF 8D B3 9D			sta X+2
  1085 30D2 A5 91			lda :FPMAN3
  1086 30D4 8D B4 9D			sta X+3
  1087
  1088 				; optimize OK (SYSTEM), line = 1925
  1089
  1090 30D7 AD B5 9D			lda SC
  1091 30DA F0 03			jeq l_01BC
  1092 30DC EE BA 9D			inc I
  1093 30DF			l_01BC
  1094
  1095 				; optimize OK (SYSTEM), line = 1928
  1096
  1097 30DF AD BA 9D			lda I
  1098 30E2 29 01			and #$01
  1099 30E4 D0 39			jne l_01D9
  1100 30E6 AD B1 9D			lda X
  1101 30E9 85 8A			sta :FP2MAN0
  1102 30EB AD B2 9D			lda X+1
  1103 30EE 85 8B			sta :FP2MAN1
  1104 30F0 AD B3 9D			lda X+2
  1105 30F3 85 8C			sta :FP2MAN2
  1106 30F5 AD B4 9D			lda X+3
  1107 30F8 85 8D			sta :FP2MAN3
  1108 30FA A9 00			lda #$00
  1109 30FC 85 86			sta :FP1MAN0
  1110 30FE 85 87			sta :FP1MAN1
  1111 3100 A9 80			lda #$80
  1112 3102 85 88			sta :FP1MAN2
  1113 3104 A9 3F			lda #$3F
  1114 3106 85 89			sta :FP1MAN3
  1115 3108 20 93 24			jsr @FSUB
  1116 310B A5 8E			lda :FPMAN0
  1117 310D 8D B1 9D			sta X
  1118 3110 A5 8F			lda :FPMAN1
  1119 3112 8D B2 9D			sta X+1
  1120 3115 A5 90			lda :FPMAN2
  1121 3117 8D B3 9D			sta X+2
  1122 311A A5 91			lda :FPMAN3
  1123 311C 8D B4 9D			sta X+3
  1124 311F			l_01D9
  1125
  1126 				; optimize OK (SYSTEM), line = 1931
  1127
  1128 311F AD B1 9D			lda X
  1129 3122 85 8A			sta :FP2MAN0
  1130 3124 AD B2 9D			lda X+1
  1131 3127 85 8B			sta :FP2MAN1
  1132 3129 AD B3 9D			lda X+2
  1133 312C 85 8C			sta :FP2MAN2
  1134 312E AD B4 9D			lda X+3
  1135 3131 85 8D			sta :FP2MAN3
  1136 3133 AD B1 9D			lda X
  1137 3136 85 86			sta :FP1MAN0
  1138 3138 AD B2 9D			lda X+1
  1139 313B 85 87			sta :FP1MAN1
  1140 313D AD B3 9D			lda X+2
  1141 3140 85 88			sta :FP1MAN2
  1142 3142 AD B4 9D			lda X+3
  1143 3145 85 89			sta :FP1MAN3
  1144 3147 20 FA 25			jsr @FMUL
  1145 314A A5 8E			lda :FPMAN0
  1146 314C 8D B1 9D			sta X
  1147 314F A5 8F			lda :FPMAN1
  1148 3151 8D B2 9D			sta X+1
  1149 3154 A5 90			lda :FPMAN2
  1150 3156 8D B3 9D			sta X+2
  1151 3159 A5 91			lda :FPMAN3
  1152 315B 8D B4 9D			sta X+3
  1153
  1154 				; optimize OK (SYSTEM), line = 1932
  1155
  1156 315E A9 42			lda #$42
  1157 3160 85 8A			sta :FP2MAN0
  1158 3162 A9 01			lda #$01
  1159 3164 85 8B			sta :FP2MAN1
  1160 3166 A9 5E			lda #$5E
  1161 3168 85 8C			sta :FP2MAN2
  1162 316A A9 3A			lda #$3A
  1163 316C 85 8D			sta :FP2MAN3
  1164 316E AD B1 9D			lda X
  1165 3171 85 86			sta :FP1MAN0
  1166 3173 AD B2 9D			lda X+1
  1167 3176 85 87			sta :FP1MAN1
  1168 3178 AD B3 9D			lda X+2
  1169 317B 85 88			sta :FP1MAN2
  1170 317D AD B4 9D			lda X+3
  1171 3180 85 89			sta :FP1MAN3
  1172 3182 20 FA 25			jsr @FMUL
  1173 3185 A5 8E			lda :FPMAN0
  1174 3187 85 8A			sta :FP2MAN0
  1175 3189 A5 8F			lda :FPMAN1
  1176 318B 85 8B			sta :FP2MAN1
  1177 318D A5 90			lda :FPMAN2
  1178 318F 85 8C			sta :FP2MAN2
  1179 3191 A5 91			lda :FPMAN3
  1180 3193 85 8D			sta :FP2MAN3
  1181 3195 A9 D3			lda #$D3
  1182 3197 85 86			sta :FP1MAN0
  1183 3199 A9 59			lda #$59
  1184 319B 85 87			sta :FP1MAN1
  1185 319D A9 A3			lda #$A3
  1186 319F 85 88			sta :FP1MAN2
  1187 31A1 A9 3C			lda #$3C
  1188 31A3 85 89			sta :FP1MAN3
  1189 31A5 20 93 24			jsr @FSUB
  1190 31A8 A5 8E			lda :FPMAN0
  1191 31AA 85 86			sta :FP1MAN0
  1192 31AC A5 8F			lda :FPMAN1
  1193 31AE 85 87			sta :FP1MAN1
  1194 31B0 A5 90			lda :FPMAN2
  1195 31B2 85 88			sta :FP1MAN2
  1196 31B4 A5 91			lda :FPMAN3
  1197 31B6 85 89			sta :FP1MAN3
  1198 31B8 AD B1 9D			lda X
  1199 31BB 85 8A			sta :FP2MAN0
  1200 31BD AD B2 9D			lda X+1
  1201 31C0 85 8B			sta :FP2MAN1
  1202 31C2 AD B3 9D			lda X+2
  1203 31C5 85 8C			sta :FP2MAN2
  1204 31C7 AD B4 9D			lda X+3
  1205 31CA 85 8D			sta :FP2MAN3
  1206 31CC 20 FA 25			jsr @FMUL
  1207 31CF A5 8E			lda :FPMAN0
  1208 31D1 85 86			sta :FP1MAN0
  1209 31D3 A5 8F			lda :FPMAN1
  1210 31D5 85 87			sta :FP1MAN1
  1211 31D7 A5 90			lda :FPMAN2
  1212 31D9 85 88			sta :FP1MAN2
  1213 31DB A5 91			lda :FPMAN3
  1214 31DD 85 89			sta :FP1MAN3
  1215 31DF A9 DE			lda #$DE
  1216 31E1 85 8A			sta :FP2MAN0
  1217 31E3 A9 4D			lda #$4D
  1218 31E5 85 8B			sta :FP2MAN1
  1219 31E7 A9 6F			lda #$6F
  1220 31E9 85 8C			sta :FP2MAN2
  1221 31EB A9 3E			lda #$3E
  1222 31ED 85 8D			sta :FP2MAN3
  1223 31EF 20 93 24			jsr @FSUB
  1224 31F2 A5 8E			lda :FPMAN0
  1225 31F4 85 86			sta :FP1MAN0
  1226 31F6 A5 8F			lda :FPMAN1
  1227 31F8 85 87			sta :FP1MAN1
  1228 31FA A5 90			lda :FPMAN2
  1229 31FC 85 88			sta :FP1MAN2
  1230 31FE A5 91			lda :FPMAN3
  1231 3200 85 89			sta :FP1MAN3
  1232 3202 AD B1 9D			lda X
  1233 3205 85 8A			sta :FP2MAN0
  1234 3207 AD B2 9D			lda X+1
  1235 320A 85 8B			sta :FP2MAN1
  1236 320C AD B3 9D			lda X+2
  1237 320F 85 8C			sta :FP2MAN2
  1238 3211 AD B4 9D			lda X+3
  1239 3214 85 8D			sta :FP2MAN3
  1240 3216 20 FA 25			jsr @FMUL
  1241 3219 A5 8E			lda :FPMAN0
  1242 321B 85 86			sta :FP1MAN0
  1243 321D A5 8F			lda :FPMAN1
  1244 321F 85 87			sta :FP1MAN1
  1245 3221 A5 90			lda :FPMAN2
  1246 3223 85 88			sta :FP1MAN2
  1247 3225 A5 91			lda :FPMAN3
  1248 3227 85 89			sta :FP1MAN3
  1249 3229 A9 00			lda #$00
  1250 322B 85 8A			sta :FP2MAN0
  1251 322D 85 8B			sta :FP2MAN1
  1252 322F A9 80			lda #$80
  1253 3231 85 8C			sta :FP2MAN2
  1254 3233 A9 3F			lda #$3F
  1255 3235 85 8D			sta :FP2MAN3
  1256 3237 20 8E 24			jsr @FADD
  1257 323A A5 8E			lda :FPMAN0
  1258 323C 85 9F			sta :STACKORIGIN+9
  1259 323E A5 8F			lda :FPMAN1
  1260 3240 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1261 3242 A5 90			lda :FPMAN2
  1262 3244 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1263 3246 A5 91			lda :FPMAN3
  1264 3248 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1265 324A AD B1 9D			lda X
  1266 324D 85 8A			sta :FP2MAN0
  1267 324F AD B2 9D			lda X+1
  1268 3252 85 8B			sta :FP2MAN1
  1269 3254 AD B3 9D			lda X+2
  1270 3257 85 8C			sta :FP2MAN2
  1271 3259 AD B4 9D			lda X+3
  1272 325C 85 8D			sta :FP2MAN3
  1273 325E A9 00			lda #$00
  1274 3260 85 86			sta :FP1MAN0
  1275 3262 85 87			sta :FP1MAN1
  1276 3264 A9 80			lda #$80
  1277 3266 85 88			sta :FP1MAN2
  1278 3268 A9 3F			lda #$3F
  1279 326A 85 89			sta :FP1MAN3
  1280 326C 20 93 24			jsr @FSUB
  1281 326F A5 8E			lda :FPMAN0
  1282 3271 85 8A			sta :FP2MAN0
  1283 3273 A5 8F			lda :FPMAN1
  1284 3275 85 8B			sta :FP2MAN1
  1285 3277 A5 90			lda :FPMAN2
  1286 3279 85 8C			sta :FP2MAN2
  1287 327B A5 91			lda :FPMAN3
  1288 327D 85 8D			sta :FP2MAN3
  1289 327F A5 9F			lda :STACKORIGIN+9
  1290 3281 85 86			sta :FP1MAN0
  1291 3283 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1292 3285 85 87			sta :FP1MAN1
  1293 3287 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1294 3289 85 88			sta :FP1MAN2
  1295 328B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1296 328D 85 89			sta :FP1MAN3
  1297 328F 20 FA 25			jsr @FMUL
  1298 3292 A5 8E			lda :FPMAN0
  1299 3294 8D B6 9D			sta RESULT
  1300 3297 A5 8F			lda :FPMAN1
  1301 3299 8D B7 9D			sta RESULT+1
  1302 329C A5 90			lda :FPMAN2
  1303 329E 8D B8 9D			sta RESULT+2
  1304 32A1 A5 91			lda :FPMAN3
  1305 32A3 8D B9 9D			sta RESULT+3
  1306
  1307 				; optimize OK (SYSTEM), line = 1935
  1308
  1309 32A6 AD BA 9D			lda I
  1310 32A9 29 02			and #$02
  1311 32AB C9 02			cmp #$02
  1312 32AD D0 08			jne l_0226
  1313 32AF AD B9 9D			lda RESULT+3
  1314 32B2 49 80			eor #$80
  1315 32B4 8D B9 9D			sta RESULT+3
  1316 32B7			l_0226
  1317 32B7			@exit
  1318
  1319 				; ------------------------------------------------------------
  1320
  1321 = 9DB1			X	= DATAORIGIN+$001C
  1322 = 9DB5			SC	= DATAORIGIN+$0020
  1323 = 9DB6			RESULT	= DATAORIGIN+$0021
  1324 = 9DBA			I	= DATAORIGIN+$0025
  1325
  1326 = 9DB1			@VarData	= X
  1327 = 0006			@VarDataSize	= 6
  1328
  1329 32B7 60				rts						; ret
  1330 				.endl
  1331
  1332 32B8			.local	SIN						; FUNCTION | OVERLOAD
  1333 32B8			.local	@01018F000
  1334
  1335 				; optimize OK (SYSTEM), line = 1949
  1336
  1337 32B8 AD BB 9D			lda X
  1338 32BB 8D B1 9D			sta FSINCOS.X
  1339 32BE AD BC 9D			lda X+1
  1340 32C1 8D B2 9D			sta FSINCOS.X+1
  1341 32C4 AD BD 9D			lda X+2
  1342 32C7 8D B3 9D			sta FSINCOS.X+2
  1343 32CA AD BE 9D			lda X+3
  1344 32CD 8D B4 9D			sta FSINCOS.X+3
  1345 32D0 A9 00			lda #$00
  1346 32D2 8D B5 9D			sta FSINCOS.SC
  1347 32D5 20 7E 2F			jsr FSINCOS
  1348 32D8 AD B6 9D			lda FSINCOS.RESULT
  1349 32DB 8D BF 9D			sta RESULT
  1350 32DE AD B7 9D			lda FSINCOS.RESULT+1
  1351 32E1 8D C0 9D			sta RESULT+1
  1352 32E4 AD B8 9D			lda FSINCOS.RESULT+2
  1353 32E7 8D C1 9D			sta RESULT+2
  1354 32EA AD B9 9D			lda FSINCOS.RESULT+3
  1355 32ED 8D C2 9D			sta RESULT+3
  1356 32F0			@exit
  1357
  1358 				; ------------------------------------------------------------
  1359
  1360 = 9DBB			X	= DATAORIGIN+$0026
  1361 = 9DBF			RESULT	= DATAORIGIN+$002A
  1362
  1363 = 9DBB			@VarData	= X
  1364 = 0004			@VarDataSize	= 4
  1365
  1366 32F0 60				rts						; ret
  1367 				.endl
  1368 				.endl							; overload
  1369
  1370 32F1			.local	COS						; FUNCTION | OVERLOAD
  1371 32F1			.local	@01018F000
  1372
  1373 				; optimize OK (SYSTEM), line = 1963
  1374
  1375 32F1 AD C3 9D			lda X
  1376 32F4 8D B1 9D			sta FSINCOS.X
  1377 32F7 AD C4 9D			lda X+1
  1378 32FA 8D B2 9D			sta FSINCOS.X+1
  1379 32FD AD C5 9D			lda X+2
  1380 3300 8D B3 9D			sta FSINCOS.X+2
  1381 3303 AD C6 9D			lda X+3
  1382 3306 8D B4 9D			sta FSINCOS.X+3
  1383 3309 A9 01			lda #$01
  1384 330B 8D B5 9D			sta FSINCOS.SC
  1385 330E 20 7E 2F			jsr FSINCOS
  1386 3311 AD B6 9D			lda FSINCOS.RESULT
  1387 3314 8D C7 9D			sta RESULT
  1388 3317 AD B7 9D			lda FSINCOS.RESULT+1
  1389 331A 8D C8 9D			sta RESULT+1
  1390 331D AD B8 9D			lda FSINCOS.RESULT+2
  1391 3320 8D C9 9D			sta RESULT+2
  1392 3323 AD B9 9D			lda FSINCOS.RESULT+3
  1393 3326 8D CA 9D			sta RESULT+3
  1394 3329			@exit
  1395
  1396 				; ------------------------------------------------------------
  1397
  1398 = 9DC3			X	= DATAORIGIN+$002E
  1399 = 9DC7			RESULT	= DATAORIGIN+$0032
  1400
  1401 = 9DC3			@VarData	= X
  1402 = 0004			@VarDataSize	= 4
  1403
  1404 3329 60				rts						; ret
  1405 				.endl
  1406 				.endl							; overload
  1407
  1408 332A			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1409 332A			.local	@00
  1410
  1411 				; -------------------  ASM Block 00000043  -------------------
  1412
  1413 332A 2C 0B D4			bit VCOUNT
  1414 332D 30 FB			bmi *-3
  1415 332F 2C 0B D4			bit VCOUNT
  1416 3332 10 FB			bpl *-3
  1417
  1418 3334			@exit
  1419 					.ifdef @new
  1420 					lda <@VarData
  1421 					sta :ztmp
  1422 					lda >@VarData
  1423 					ldy #@VarDataSize-1
  1424 					jmp @FreeMem
  1425 					els
  1426 3334 60				rts						; ret
  1427 					eif
  1428 				.endl
  1429 				.endl							; overload
  1430
  1431 3335			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1432
  1433 				; -------------------  ASM Block 00000045  -------------------
  1434
  1435
  1436 3335 AD 0A D2 8D 9E 9D	  mva $d20a RndSeed
  1437 333B A9 00 8D 9F 9D	  mva #$00  RndSeed+1
  1438
  1439
  1440 3340			@exit
  1441 					.ifdef @new
  1442 					lda <@VarData
  1443 					sta :ztmp
  1444 					lda >@VarData
  1445 					ldy #@VarDataSize-1
  1446 					jmp @FreeMem
  1447 					els
  1448 3340 60				rts						; ret
  1449 					eif
  1450 				.endl
  1451
  1452 3341			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1453 3341			.local	@010180000
  1454 3341 8D CB 9D			sta RANGE
  1455
  1456 				; -------------------  ASM Block 00000049  -------------------
  1457
  1458
  1459 				;BYTE FUNC Rand(BYTE range)
  1460 				; returns random number between 0 and
  1461 				; range-1.  If range=0, then a random
  1462 				; number between 0 and 255 is returned
  1463
  1464 3344 AC 0A D2		  ldy $d20a   ; RANDOM
  1465
  1466 3347 AD CB 9D		  lda range
  1467 334A F0 08		  beq stop
  1468
  1469 334C 85 8E		  sta :ecx
  1470 334E 84 86		  sty :eax
  1471
  1472 3350 20 EF 22		  jsr imulCL
  1473 3353 A8			  tay
  1474
  1475 3354 8C CC 9D		stop  sty Result
  1476
  1477
  1478 3357			@exit
  1479
  1480 				; ------------------------------------------------------------
  1481
  1482 = 9DCB			RANGE	= DATAORIGIN+$0036
  1483 = 9DCC			RESULT	= DATAORIGIN+$0037
  1484
  1485 = 9DCB			@VarData	= RANGE
  1486 = 0001			@VarDataSize	= 1
  1487
  1488 3357 60				rts						; ret
  1489 				.endl
  1490 				.endl							; overload
  1491
  1492 3358			.local	RANDOM						; FUNCTION | OVERLOAD
  1493 3358			.local	@010184000
  1494
  1495 				; optimize OK (system_atari.inc), line = 179
  1496
  1497 3358 AD CE 9D			lda RANGE+1
  1498 335B 0D CD 9D			ora RANGE
  1499 335E D0 0B			jne l_0266
  1500
  1501 				; optimize OK (system_atari.inc), line = 180
  1502
  1503 3360 A9 00			lda #$00
  1504 3362 8D CF 9D			sta RESULT
  1505 3365 8D D0 9D			sta RESULT+1
  1506 3368 4C CD 33			jmp l_0274
  1507 336B			l_0266
  1508
  1509 				; optimize OK (system_atari.inc), line = 183
  1510
  1511 336B AD 9E 9D			lda RNDSEED
  1512 336E 85 8E			sta :ecx
  1513 3370 AD 9F 9D			lda RNDSEED+1
  1514 3373 85 8F			sta :ecx+1
  1515 3375 A9 95			lda #$95
  1516 3377 85 86			sta :eax
  1517 3379 A9 45			lda #$45
  1518 337B 85 87			sta :eax+1
  1519 					.ifdef fmulinit
  1520 					fmulu_16
  1521 					els
  1522 337D 20 3B 23			imulCX
  1523 					eif
  1524 3380 A5 86			lda :eax
  1525 3382 8D 9E 9D			sta RNDSEED
  1526 3385 A5 87			lda :eax+1
  1527 3387 8D 9F 9D			sta RNDSEED+1
  1528
  1529 				; optimize OK (system_atari.inc), line = 184
  1530
  1531 338A AD CD 9D			lda RANGE
  1532 338D 85 8E			sta @SMALLINT.MOD.B
  1533 338F AD CE 9D			lda RANGE+1
  1534 3392 85 8F			sta @SMALLINT.MOD.B+1
  1535 3394 AD 9E 9D			lda RNDSEED
  1536 3397 85 86			sta @SMALLINT.MOD.A
  1537 3399 AD 9F 9D			lda RNDSEED+1
  1538 339C 85 87			sta @SMALLINT.MOD.A+1
  1539 339E 20 80 22			jsr @SMALLINT.MOD
  1540 33A1 A5 92			lda @SMALLINT.MOD.RESULT
  1541 33A3 8D CF 9D			sta RESULT
  1542 33A6 A5 93			lda @SMALLINT.MOD.RESULT+1
  1543 33A8 8D D0 9D			sta RESULT+1
  1544
  1545 				; -------------------  ASM Block 00000050  -------------------
  1546
  1547 33AB AD CE 9D			lda range+1
  1548 33AE 10 07			bpl plus
  1549
  1550 33B0 AD D0 9D			lda Result+1
  1551 33B3 30 18			bmi ok
  1552 33B5 10 05			bpl sign
  1553
  1554 33B7 AD D0 9D		plus	lda Result+1
  1555 33BA 10 11			bpl ok
  1556
  1557 33BC A9 00		sign 	lda #0
  1558 33BE 38 ED CF 9D			sub Result
  1559 33C2 8D CF 9D			sta Result
  1560
  1561 33C5 A9 00			lda #0
  1562 33C7 ED D0 9D			sbc Result+1
  1563 33CA 8D D0 9D			sta Result+1
  1564 33CD			ok
  1565
  1566 33CD			l_0274
  1567 33CD			@exit
  1568
  1569 				; ------------------------------------------------------------
  1570
  1571 = 9DCD			RANGE	= DATAORIGIN+$0038
  1572 = 9DCF			RESULT	= DATAORIGIN+$003A
  1573
  1574 = 9DCD			@VarData	= RANGE
  1575 = 0002			@VarDataSize	= 2
  1576
  1577 33CD 60				rts						; ret
  1578 				.endl
  1579 				.endl							; overload
  1580
  1581 				; ------------------------------------------------------------
  1582 				; ------------------------------------------------------------
  1583 33CE			@UnitInit
  1584
  1585 				; -------------------  ASM Block 00000060  -------------------
  1586
  1587 					.ifdef @CmdLine
  1588
  1589 					ldx #$0F
  1590 					mva:rpl $340,x IOCB@COPY,x-
  1591 					rts
  1592
  1593 				IOCB@COPY	:16 brk
  1594 					eif
  1595
  1596
  1597 33CE 60				rts
  1598
  1599 				; ------------------------------------------------------------
  1600
  1601 = 0648			M_PI_2	= $0648
  1602 = 0192			D_PI_2	= $0192
  1603 = 0004			D_PI_180	= $04
  1604 = 0101			__PORTB_BANKS	= $0101
  1605 = 0000			MGTIA	= $00
  1606 = 0080			MVBXE	= $80
  1607 = 0000			VBXE_XDLADR	= $00
  1608 = 00E0			VBXE_BCBTMP	= $E0
  1609 = 0100			VBXE_BCBADR	= $0100
  1610 = 1000			VBXE_MAPADR	= $1000
  1611 = 1000			VBXE_CHBASE	= $1000
  1612 = 5000			VBXE_OVRADR	= $5000
  1613 = B000			VBXE_WINDOW	= $B000
  1614 = 0000			IDLI	= $00
  1615 = 0001			IVBL	= $01
  1616 = 0001			IVBLD	= $01
  1617 = 0002			IVBLI	= $02
  1618 = 0003			ITIM1	= $03
  1619 = 0004			ITIM2	= $04
  1620 = 0005			ITIM4	= $05
  1621 = 00FE			CH_DELCHR	= $FE
  1622 = 009B			CH_ENTER	= $9B
  1623 = 001B			CH_ESC	= $1B
  1624 = 001C			CH_CURS_UP	= $1C
  1625 = 001D			CH_CURS_DOWN	= $1D
  1626 = 001E			CH_CURS_LEFT	= $1E
  1627 = 001F			CH_CURS_RIGHT	= $1F
  1628 = 007F			CH_TAB	= $7F
  1629 = 009B			CH_EOL	= $9B
  1630 = 007D			CH_CLR	= $7D
  1631 = 00FD			CH_BELL	= $FD
  1632 = 007E			CH_DEL	= $7E
  1633 = 009C			CH_DELLINE	= $9C
  1634 = 009D			CH_INSLINE	= $9D
  1635 = 0000			PAL_PMCOLOR0	= $00
  1636 = 0001			PAL_PMCOLOR1	= $01
  1637 = 0002			PAL_PMCOLOR2	= $02
  1638 = 0003			PAL_PMCOLOR3	= $03
  1639 = 0004			PAL_COLOR0	= $04
  1640 = 0005			PAL_COLOR1	= $05
  1641 = 0006			PAL_COLOR2	= $06
  1642 = 0007			PAL_COLOR3	= $07
  1643 = 0008			PAL_COLBAK	= $08
  1644 = 0000			COLOR_BLACK	= $00
  1645 = 000E			COLOR_WHITE	= $0E
  1646 = 0032			COLOR_RED	= $32
  1647 = 0096			COLOR_CYAN	= $96
  1648 = 0068			COLOR_VIOLET	= $68
  1649 = 00C4			COLOR_GREEN	= $C4
  1650 = 0074			COLOR_BLUE	= $74
  1651 = 00EE			COLOR_YELLOW	= $EE
  1652 = 0028			COLOR_ORANGE	= $28
  1653 = 00E4			COLOR_BROWN	= $E4
  1654 = 003C			COLOR_LIGHTRED	= $3C
  1655 = 0004			COLOR_GRAY1	= $04
  1656 = 0006			COLOR_GRAY2	= $06
  1657 = 000A			COLOR_GRAY3	= $0A
  1658 = 00CC			COLOR_LIGHTGREEN	= $CC
  1659 = 007C			COLOR_LIGHTBLUE	= $7C
  1660 = 0004			FMOPENREAD	= $04
  1661 = 0008			FMOPENWRITE	= $08
  1662 = 0009			FMOPENAPPEND	= $09
  1663 = 000C			FMOPENREADWRITE	= $0C
  1664 = 9D95			DATESEPARATOR	= DATAORIGIN+$0000
  1665 = D20A			RND	= $D20A
  1666 = 02C0			adr.PALETTE	= $02C0
  1667 33CF			.var PALETTE	= adr.PALETTE .word
  1668 = D012			adr.HPALETTE	= $D012
  1669 33CF			.var HPALETTE	= adr.HPALETTE .word
  1670 = 9D96			FILEMODE	= DATAORIGIN+$0001
  1671 = 9D97			GRAPHMODE	= DATAORIGIN+$0002
  1672 = 9D98			IORESULT	= DATAORIGIN+$0003
  1673 = 9D99			EOLN	= DATAORIGIN+$0004
  1674 = 9D9A			SCREENWIDTH	= DATAORIGIN+$0005
  1675 = 9D9C			SCREENHEIGHT	= DATAORIGIN+$0007
  1676 = 0000			adr.MEM	= $00
  1677 33CF			.var MEM	= adr.MEM .word
  1678 = 9D9E			RNDSEED	= DATAORIGIN+$0009
  1679
  1680 = 33CF C0 02		PALETTE
  1680 = 33D1 12 D0		HPALETTE
  1680 = 33D3 00 00		MEM
  1680 				.endl							; UNIT SYSTEM
  1681
  1682 				; ------------------------------------------------------------
  1683
  1684 33D5			.local	ATARI						; UNIT
  1685
  1686 				; ------------------------------------------------------------
  1687
  1688 = 0000			DL_BLANK1	= $00
  1689 = 0010			DL_BLANK2	= $10
  1690 = 0020			DL_BLANK3	= $20
  1691 = 0030			DL_BLANK4	= $30
  1692 = 0040			DL_BLANK5	= $40
  1693 = 0050			DL_BLANK6	= $50
  1694 = 0060			DL_BLANK7	= $60
  1695 = 0070			DL_BLANK8	= $70
  1696 = 0080			DL_DLI	= $80
  1697 = 0040			DL_LMS	= $40
  1698 = 0020			DL_VSCROLL	= $20
  1699 = 0010			DL_HSCROLL	= $10
  1700 = 0001			DL_JMP	= $01
  1701 = 0041			DL_JVB	= $41
  1702 = 0002			DL_MODE_2	= $02
  1703 = 0003			DL_MODE_3	= $03
  1704 = 0004			DL_MODE_4	= $04
  1705 = 0005			DL_MODE_5	= $05
  1706 = 000E			DL_MODE_E	= $0E
  1707 = 000F			DL_MODE_F	= $0F
  1708 = 0010			IRQENS	= $10
  1709 = 0012			RTCLOK	= $12
  1710 = 0012			RTCLOK1	= $12
  1711 = 0013			RTCLOK2	= $13
  1712 = 0014			RTCLOK3	= $14
  1713 = 004D			ATRACT	= $4D
  1714 = 0052			LMARGIN	= $52
  1715 = 0053			RMARGIN	= $53
  1716 = 0054			ROWCRS	= $54
  1717 = 0055			COLCRS	= $55
  1718 = 0057			DINDEX	= $57
  1719 = 0058			SAVMSC	= $58
  1720 = 0062			PALNTS	= $62
  1721 = 006A			RAMTOP	= $6A
  1722 = 0200			VDSLST	= $0200
  1723 = 0230			SDLSTL	= $0230
  1724 = 0290			TXTROW	= $0290
  1725 = 0291			TXTCOL	= $0291
  1726 = 0293			TINDEX	= $0293
  1727 = 0294			TXTMSC	= $0294
  1728 = 022F			SDMCTL	= $022F
  1729 = 026F			GPRIOR	= $026F
  1730 = 02F0			CRSINH	= $02F0
  1731 = 02F3			CHACT	= $02F3
  1732 = 02F4			CHBAS	= $02F4
  1733 = 02FC			CH	= $02FC
  1734 = 02FD			FILDAT	= $02FD
  1735 = 02C0			PCOLR0	= $02C0
  1736 = 02C1			PCOLR1	= $02C1
  1737 = 02C2			PCOLR2	= $02C2
  1738 = 02C3			PCOLR3	= $02C3
  1739 = 02C4			COLOR0	= $02C4
  1740 = 02C5			COLOR1	= $02C5
  1741 = 02C6			COLOR2	= $02C6
  1742 = 02C7			COLOR3	= $02C7
  1743 = 02C8			COLOR4	= $02C8
  1744 = 02C8			COLBAKS	= $02C8
  1745 = D000			HPOSP0	= $D000
  1746 = D001			HPOSP1	= $D001
  1747 = D002			HPOSP2	= $D002
  1748 = D003			HPOSP3	= $D003
  1749 = D004			HPOSM0	= $D004
  1750 = D005			HPOSM1	= $D005
  1751 = D006			HPOSM2	= $D006
  1752 = D007			HPOSM3	= $D007
  1753 = D008			SIZEP0	= $D008
  1754 = D009			SIZEP1	= $D009
  1755 = D00A			SIZEP2	= $D00A
  1756 = D00B			SIZEP3	= $D00B
  1757 = D00C			SIZEM	= $D00C
  1758 = D00D			GRAFP0	= $D00D
  1759 = D00E			GRAFP1	= $D00E
  1760 = D00F			GRAFP2	= $D00F
  1761 = D010			GRAFP3	= $D010
  1762 = D011			GRAFM	= $D011
  1763 = D004			P0PF	= $D004
  1764 = D014			PAL	= $D014
  1765 = D013			TRIG3	= $D013
  1766 = D012			COLPM0	= $D012
  1767 = D013			COLPM1	= $D013
  1768 = D014			COLPM2	= $D014
  1769 = D015			COLPM3	= $D015
  1770 = D016			COLPF0	= $D016
  1771 = D017			COLPF1	= $D017
  1772 = D018			COLPF2	= $D018
  1773 = D019			COLPF3	= $D019
  1774 = D01A			COLBAK	= $D01A
  1775 = D01A			COLBK	= $D01A
  1776 = D01B			PRIOR	= $D01B
  1777 = D01D			GRACTL	= $D01D
  1778 = D01D			PMCNTL	= $D01D
  1779 = D01E			HITCLR	= $D01E
  1780 = D01F			CONSOL	= $D01F
  1781 = D200			AUDF1	= $D200
  1782 = D201			AUDC1	= $D201
  1783 = D202			AUDF2	= $D202
  1784 = D203			AUDC2	= $D203
  1785 = D204			AUDF3	= $D204
  1786 = D205			AUDC3	= $D205
  1787 = D206			AUDF4	= $D206
  1788 = D207			AUDC4	= $D207
  1789 = D208			AUDCTL	= $D208
  1790 = D209			KBCODE	= $D209
  1791 = D20E			IRQEN	= $D20E
  1792 = D20F			SKSTAT	= $D20F
  1793 = D300			PORTA	= $D300
  1794 = D301			PORTB	= $D301
  1795 = D302			PACTL	= $D302
  1796 = D400			DMACTL	= $D400
  1797 = D401			CHACTL	= $D401
  1798 = D402			DLISTL	= $D402
  1799 = D404			HSCROL	= $D404
  1800 = D405			VSCROL	= $D405
  1801 = D407			PMBASE	= $D407
  1802 = D409			CHBASE	= $D409
  1803 = D40A			WSYNC	= $D40A
  1804 = D40B			VCOUNT	= $D40B
  1805 = D40C			PENH	= $D40C
  1806 = D40D			PENV	= $D40D
  1807 = D40E			NMIEN	= $D40E
  1808 = FFFA			NMIVEC	= $FFFA
  1809 = FFFC			RESETVEC	= $FFFC
  1810 = FFFE			IRQVEC	= $FFFE
  1811
  1812 				.endl							; UNIT ATARI
  1813
  1814 				; ------------------------------------------------------------
  1815
  1816 33D5			.local	CRT						; UNIT
  1817
  1818 				; ------------------------------------------------------------
  1819
  1820 = 9DD1			TEXTATTR	= DATAORIGIN+$003C
  1821 = D01F			CONSOL	= $D01F
  1822 = 0000			CN_START_SELECT_OPTION	= $00
  1823 = 0001			CN_SELECT_OPTION	= $01
  1824 = 0002			CN_START_OPTION	= $02
  1825 = 0003			CN_OPTION	= $03
  1826 = 0004			CN_START_SELECT	= $04
  1827 = 0005			CN_SELECT	= $05
  1828 = 0006			CN_START	= $06
  1829 = 0007			CN_NONE	= $07
  1830 = 0000			BLACK	= $00
  1831 = 000F			WHITE	= $0F
  1832 = 0026			RED	= $26
  1833 = 00AC			CYAN	= $AC
  1834 = 0048			PURPLE	= $48
  1835 = 00B6			GREEN	= $B6
  1836 = 0086			BLUE	= $86
  1837 = 00DC			YELLOW	= $DC
  1838 = 0018			ORANGE	= $18
  1839 = 00F4			BROWN	= $F4
  1840 = 002A			LIGHT_RED	= $2A
  1841 = 0004			DARK_GREY	= $04
  1842 = 0008			GREY	= $08
  1843 = 00BC			LIGHT_GREEN	= $BC
  1844 = 009A			LIGHT_BLUE	= $9A
  1845 = 000C			LIGHT_GREY	= $0C
  1846 = 0000			BW40	= $00
  1847 = 0001			CO40	= $01
  1848 = 0002			BW80	= $02
  1849 = 0003			CO80	= $03
  1850 = 0007			MONO	= $07
  1851 = 0001			C40	= $01
  1852 = 0003			C80	= $03
  1853 = 0080			BLINK	= $80
  1854
  1855 				.endl							; UNIT CRT
  1856
  1857 				; ------------------------------------------------------------
  1858
  1859 33D5			.local	TYPES						; UNIT
  1860
  1861 				; ------------------------------------------------------------
  1862
  1863 				.endl							; UNIT TYPES
  1864
  1865 				; ------------------------------------------------------------
  1866
  1867 33D5			.local	GRAPH						; UNIT
  1868
  1869 				; ------------------------------------------------------------
  1870
  1871 = 0080			CURRENTDRIVER	= $80
  1872 = 0000			DETECT	= $00
  1873 = 0001			CGA	= $01
  1874 = 0002			MCGA	= $02
  1875 = 0003			EGA	= $03
  1876 = 0004			EGA64	= $04
  1877 = 0005			EGAMONO	= $05
  1878 = 0006			LOWRES	= $06
  1879 = 0007			HERCMONO	= $07
  1880 = 0009			VGA	= $09
  1881 = 000A			VESA	= $0A
  1882 = 000B			D1BIT	= $0B
  1883 = 000C			D2BIT	= $0C
  1884 = 000D			D4BIT	= $0D
  1885 = 000E			D6BIT	= $0E
  1886 = 000F			D8BIT	= $0F
  1887 = 0010			D12BIT	= $10
  1888 = 0018			M640X400	= $18
  1889 = 0018			M640X480	= $18
  1890 = 0001			GROK	= $01
  1891 = 00FF			GRNOINITGRAPH	= $FF
  1892 = 00FE			GRNOTDETECTED	= $FE
  1893 = 00FD			GRFILENOTFOUND	= $FD
  1894 = 00FC			GRINVALIDDRIVER	= $FC
  1895 = 00FB			GRNOLOADMEM	= $FB
  1896 = 00FA			GRNOSCANMEM	= $FA
  1897 = 00F9			GRNOFLOODMEM	= $F9
  1898 = 00F8			GRFONTNOTFOUND	= $F8
  1899 = 00F7			GRNOFONTMEM	= $F7
  1900 = 00F6			GRINVALIDMODE	= $F6
  1901 = 00F5			GRERROR	= $F5
  1902 = 00F4			GRIOERROR	= $F4
  1903 = 00F3			GRINVALIDFONT	= $F3
  1904 = 00F2			GRINVALIDFONTNUM	= $F2
  1905 = 00EE			GRINVALIDVERSION	= $EE
  1906 = 0000			CGAC0	= $00
  1907 = 0001			CGAC1	= $01
  1908 = 0002			CGAC2	= $02
  1909 = 0003			CGAC3	= $03
  1910 = 0004			CGAHI	= $04
  1911 = 0000			MCGAC0	= $00
  1912 = 0001			MCGAC1	= $01
  1913 = 0002			MCGAC2	= $02
  1914 = 0003			MCGAC3	= $03
  1915 = 0004			MCGAMED	= $04
  1916 = 0005			MCGAHI	= $05
  1917 = 0000			EGALO	= $00
  1918 = 0001			EGAHI	= $01
  1919 = 0000			EGA64LO	= $00
  1920 = 0001			EGA64HI	= $01
  1921 = 0003			EGAMONOHI	= $03
  1922 = 000A			VGALO	= $0A
  1923 = 001F			VGAMED	= $1F
  1924 = 0018			VGAHI	= $18
  1925 = 9DD2			GRAPHRESULT	= DATAORIGIN+$003D
  1926 = 9DD3			GETCOLOR	= DATAORIGIN+$003E
  1927 = 9DD4			VIDEORAM	= DATAORIGIN+$003F
  1928 = 9DD6			adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
  1929 33D5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1930 = 9DD6			LASTARCCOORDS.X	= DATAORIGIN+$0041
  1931 = 9DD8			LASTARCCOORDS.Y	= DATAORIGIN+$0043
  1932 = 9DDA			LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
  1933 = 9DDC			LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
  1934 = 9DDE			LASTARCCOORDS.XEND	= DATAORIGIN+$0049
  1935 = 9DE0			LASTARCCOORDS.YEND	= DATAORIGIN+$004B
  1936 = 9DE2			WIN_LEFT	= DATAORIGIN+$004D
  1937 = 9DE4			WIN_RIGHT	= DATAORIGIN+$004F
  1938 = 9DE6			WIN_TOP	= DATAORIGIN+$0051
  1939 = 9DE8			WIN_BOTTOM	= DATAORIGIN+$0053
  1940 = 9DEA			SCANLINE_WIDTH	= DATAORIGIN+$0055
  1941 = 9DEB			CURRENTX	= DATAORIGIN+$0056
  1942 = 9DED			CURRENTY	= DATAORIGIN+$0058
  1943
  1944 = 33D5 D6 9D		LASTARCCOORDS
  1944 				.endl							; UNIT GRAPH
  1945
  1946 				; ------------------------------------------------------------
  1947
  1948 33D7			.local	VBXE						; UNIT
  1949
  1950 33D7			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  1951 33D7 85 8A			sta A
  1952
  1953 				; -------------------  ASM Block 00000100  -------------------
  1954
  1955 33D9				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33D9 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33DB A0 5F		        ldy     #FX_MEMS
     4 33DD 91 80		        sta     (fxptr),y
  1956
  1957 33DF A5 8A			lda a
  1958 33E1 38 E9 01			sub #1
  1959
  1960 33E4 A0 02			ldy #s@xdl.RPTL_
  1961 33E6 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1962
  1963 33E9				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33E9 A9 00		        lda     #$00
     3 33EB A0 5F		        ldy     #FX_MEMS
     4 33ED 91 80		        sta     (fxptr),y
  1964
  1965 				; ------------------------------------------------------------
  1966
  1967 = 008A			A	= :EDX
  1968
  1969 33EF			@exit
  1970 					.ifdef @new
  1971 					lda <@VarData
  1972 					sta :ztmp
  1973 					lda >@VarData
  1974 					ldy #@VarDataSize-1
  1975 					jmp @FreeMem
  1976 					els
  1977 33EF 60				rts						; ret
  1978 					eif
  1979 				.endl
  1980
  1981 33F0			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  1982 33F0 85 8A			sta A
  1983
  1984 				; -------------------  ASM Block 00000101  -------------------
  1985
  1986 33F2				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33F2 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33F4 A0 5F		        ldy     #FX_MEMS
     4 33F6 91 80		        sta     (fxptr),y
  1987
  1988 33F8 A5 8A			lda a
  1989 33FA 38 E9 01			sub #1
  1990
  1991 33FD A0 05			ldy #s@xdl.RPTL
  1992 33FF 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1993
  1994 3402				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3402 A9 00		        lda     #$00
     3 3404 A0 5F		        ldy     #FX_MEMS
     4 3406 91 80		        sta     (fxptr),y
  1995
  1996 				; ------------------------------------------------------------
  1997
  1998 = 008A			A	= :EDX
  1999
  2000 3408			@exit
  2001 					.ifdef @new
  2002 					lda <@VarData
  2003 					sta :ztmp
  2004 					lda >@VarData
  2005 					ldy #@VarDataSize-1
  2006 					jmp @FreeMem
  2007 					els
  2008 3408 60				rts						; ret
  2009 					eif
  2010 				.endl
  2011
  2012 3409			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2013 3409 8D 03 9E			sta B
  2014
  2015 				; -------------------  ASM Block 00000113  -------------------
  2016
  2017 340C				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 340C AD 03 9E		        lda     B
     3 340F A0 5F		        ldy     #FX_MEMS
     4 3411 91 80		        sta     (fxptr),y
  2018
  2019 				; ------------------------------------------------------------
  2020
  2021 = 9E03			B	= DATAORIGIN+$006E
  2022
  2023 = 9E03			@VarData	= B
  2024 = 0001			@VarDataSize	= 1
  2025
  2026 3413			@exit
  2027 					.ifdef @new
  2028 					lda <@VarData
  2029 					sta :ztmp
  2030 					lda >@VarData
  2031 					ldy #@VarDataSize-1
  2032 					jmp @FreeMem
  2033 					els
  2034 3413 60				rts						; ret
  2035 					eif
  2036 				.endl
  2037
  2038 3414			.local	READVBXEMEMORYBYTE				; FUNCTION
  2039
  2040 				; optimize OK (vbxe_memorystream.inc), line = 20
  2041
  2042 3414 AC 04 9E 84 84 AC + 	mwy POSITION :bp2
  2043 341E A0 02			ldy #$02
  2044 3420 B1 84			lda (:bp2),y
  2045 3422 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2046 3424 88				dey
  2047 3425 B1 84			lda (:bp2),y
  2048 3427 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2049 3429 6A				ror @
  2050 342A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2051 342C 6A				ror @
  2052 342D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2053 342F 6A				ror @
  2054 3430 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2055 3432 6A				ror @
  2056 3433 09 80			ora #$80
  2057 3435 8D 07 9E			sta BNK
  2058
  2059 				; optimize OK (vbxe_memorystream.inc), line = 21
  2060
  2061 3438 88				dey
  2062 3439 B1 84			lda (:bp2),y
  2063 343B 8D 08 9E			sta ADR
  2064 343E C8				iny
  2065 343F B1 84			lda (:bp2),y
  2066 3441 29 0F			and #$0F
  2067 3443 09 B0			ora #$B0
  2068 3445 8D 09 9E			sta ADR+1
  2069
  2070 				; optimize OK (vbxe_memorystream.inc), line = 23
  2071
  2072 3448 AD 07 9E			lda BNK
  2073 344B 20 09 34			jsr VBXEMEMORYBANK
  2074
  2075 				; optimize OK (vbxe_memorystream.inc), line = 25
  2076
  2077 344E AC 09 9E			ldy ADR+1
  2078 3451 84 83			sty :bp+1
  2079 3453 AC 08 9E			ldy ADR
  2080 3456 B1 82			lda (:bp),y
  2081 3458 8D 06 9E			sta RESULT
  2082
  2083 				; optimize OK (vbxe_memorystream.inc), line = 27
  2084
  2085 345B AC 04 9E 84 84 AC + 	mwy POSITION :bp2
  2086 3465 A0 00			ldy #$00
  2087 3467 B1 84			lda (:bp2),y
  2088 3469 18 69 01			add #$01
  2089 346C 91 84			sta (:bp2),y
  2090 346E C8				iny
  2091 346F B1 84			lda (:bp2),y
  2092 3471 69 00			adc #$00
  2093 3473 91 84			sta (:bp2),y
  2094 3475 C8				iny
  2095 3476 B1 84			lda (:bp2),y
  2096 3478 69 00			adc #$00
  2097 347A 91 84			sta (:bp2),y
  2098 347C C8				iny
  2099 347D B1 84			lda (:bp2),y
  2100 347F 69 00			adc #$00
  2101 3481 91 84			sta (:bp2),y
  2102 3483			@exit
  2103
  2104 				; ------------------------------------------------------------
  2105
  2106 = 9E04			POSITION	= DATAORIGIN+$006F
  2107 = 9E06			RESULT	= DATAORIGIN+$0071
  2108 = 9E07			BNK	= DATAORIGIN+$0072
  2109 = 9E08			ADR	= DATAORIGIN+$0073
  2110
  2111 = 9E04			@VarData	= POSITION
  2112 = 0005			@VarDataSize	= 5
  2113
  2114 3483 60				rts						; ret
  2115 				.endl
  2116
  2117 3484			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2118
  2119 				; optimize OK (vbxe_memorystream.inc), line = 39
  2120
  2121 3484 AC 0A 9E 84 84 AC + 	mwy POSITION :bp2
  2122 348E A0 02			ldy #$02
  2123 3490 B1 84			lda (:bp2),y
  2124 3492 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2125 3494 88				dey
  2126 3495 B1 84			lda (:bp2),y
  2127 3497 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2128 3499 6A				ror @
  2129 349A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2130 349C 6A				ror @
  2131 349D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2132 349F 6A				ror @
  2133 34A0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2134 34A2 6A				ror @
  2135 34A3 09 80			ora #$80
  2136 34A5 8D 0D 9E			sta BNK
  2137
  2138 				; optimize OK (vbxe_memorystream.inc), line = 40
  2139
  2140 34A8 88				dey
  2141 34A9 B1 84			lda (:bp2),y
  2142 34AB 8D 0E 9E			sta ADR
  2143 34AE C8				iny
  2144 34AF B1 84			lda (:bp2),y
  2145 34B1 29 0F			and #$0F
  2146 34B3 09 B0			ora #$B0
  2147 34B5 8D 0F 9E			sta ADR+1
  2148
  2149 				; optimize OK (vbxe_memorystream.inc), line = 42
  2150
  2151 34B8 AD 0D 9E			lda BNK
  2152 34BB 20 09 34			jsr VBXEMEMORYBANK
  2153
  2154 				; optimize OK (vbxe_memorystream.inc), line = 44
  2155
  2156 34BE AC 0F 9E			ldy ADR+1
  2157 34C1 84 83			sty :bp+1
  2158 34C3 AC 0E 9E			ldy ADR
  2159 34C6 AD 0C 9E			lda A
  2160 34C9 91 82			sta (:bp),y
  2161
  2162 				; optimize OK (vbxe_memorystream.inc), line = 46
  2163
  2164 34CB AC 0A 9E 84 84 AC + 	mwy POSITION :bp2
  2165 34D5 A0 00			ldy #$00
  2166 34D7 B1 84			lda (:bp2),y
  2167 34D9 18 69 01			add #$01
  2168 34DC 91 84			sta (:bp2),y
  2169 34DE C8				iny
  2170 34DF B1 84			lda (:bp2),y
  2171 34E1 69 00			adc #$00
  2172 34E3 91 84			sta (:bp2),y
  2173 34E5 C8				iny
  2174 34E6 B1 84			lda (:bp2),y
  2175 34E8 69 00			adc #$00
  2176 34EA 91 84			sta (:bp2),y
  2177 34EC C8				iny
  2178 34ED B1 84			lda (:bp2),y
  2179 34EF 69 00			adc #$00
  2180 34F1 91 84			sta (:bp2),y
  2181
  2182 				; ------------------------------------------------------------
  2183
  2184 = 9E0A			POSITION	= DATAORIGIN+$0075
  2185 = 9E0C			A	= DATAORIGIN+$0077
  2186 = 9E0D			BNK	= DATAORIGIN+$0078
  2187 = 9E0E			ADR	= DATAORIGIN+$0079
  2188
  2189 = 9E0A			@VarData	= POSITION
  2190 = 0006			@VarDataSize	= 6
  2191
  2192 34F3			@exit
  2193 					.ifdef @new
  2194 					lda <@VarData
  2195 					sta :ztmp
  2196 					lda >@VarData
  2197 					ldy #@VarDataSize-1
  2198 					jmp @FreeMem
  2199 					els
  2200 34F3 60				rts						; ret
  2201 					eif
  2202 				.endl
  2203
  2204 34F4			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2205 34F4 8D 1C 9E			sta TVBXEMEMORYSTREAM
  2206 34F7 8C 1D 9E			sty TVBXEMEMORYSTREAM+1
  2207 34FA 8D 22 9E			sta POSITION
  2208 34FD 8C 23 9E			sty POSITION+1
  2209 3500 18 69 04			add #4
  2210 3503 90 01			scc
  2211 3505 C8				iny
  2212 3506 8D 24 9E			sta SIZE
  2213 3509 8C 25 9E			sty SIZE+1
  2214
  2215 				; optimize OK (vbxe_memorystream.inc), line = 124
  2216
  2217 350C AC 22 9E 84 84 AC + 	mwy POSITION :bp2
  2218 3516 A0 02			ldy #$02
  2219 3518 B1 84			lda (:bp2),y
  2220 351A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2221 351C 88				dey
  2222 351D B1 84			lda (:bp2),y
  2223 351F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2224 3521 6A				ror @
  2225 3522 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2226 3524 6A				ror @
  2227 3525 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2228 3527 6A				ror @
  2229 3528 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2230 352A 6A				ror @
  2231 352B 09 80			ora #$80
  2232 352D 8D 26 9E			sta BNK
  2233
  2234 				; optimize OK (vbxe_memorystream.inc), line = 125
  2235
  2236 3530 88				dey
  2237 3531 B1 84			lda (:bp2),y
  2238 3533 8D 27 9E			sta ADR
  2239 3536 C8				iny
  2240 3537 B1 84			lda (:bp2),y
  2241 3539 29 0F			and #$0F
  2242 353B 09 B0			ora #$B0
  2243 353D 8D 28 9E			sta ADR+1
  2244
  2245 				; optimize OK (vbxe_memorystream.inc), line = 127
  2246
  2247 3540 AD 26 9E			lda BNK
  2248 3543 20 09 34			jsr VBXEMEMORYBANK
  2249
  2250 				; optimize OK (vbxe_memorystream.inc), line = 129
  2251
  2252 3546 AD 1E 9E			lda BUFFER
  2253 3549 8D 2B 9E			sta SRC
  2254 354C AD 1F 9E			lda BUFFER+1
  2255 354F 8D 2C 9E			sta SRC+1
  2256
  2257 				; optimize OK (vbxe_memorystream.inc), line = 131
  2258
  2259 3552 A9 00			lda #$00
  2260 3554 8D 29 9E			sta I
  2261 3557 8D 2A 9E			sta I+1
  2262 355A AD 20 9E			lda COUNT
  2263 355D 38 E9 01			sub #$01
  2264 3560 8D 73 35			sta @FORTMP_0395_0
  2265 3563 AD 21 9E			lda COUNT+1
  2266 3566 E9 00			sbc #$00
  2267 3568 8D 6C 35			sta @FORTMP_0395_1
  2268
  2269 356B			l_0398
  2270 				; --- ForToDoCondition
  2271 356B A9 00			lda @FORTMP_0395_1::#$00
  2272 356D CD 2A 9E			cmp I+1
  2273 3570 D0 05			bne @+
  2274 3572 A9 00			lda @FORTMP_0395_0::#$00
  2275 3574 CD 29 9E			cmp I
  2276 				@
  2277 3577 90 53			jcc l_03A4
  2278
  2279 				; optimize OK (vbxe_memorystream.inc), line = 133
  2280
  2281 3579 AC 2B 9E 84 84 AC + 	mwy SRC :bp2
  2282 3583 A0 00			ldy #$00
  2283 3585 B1 84			lda (:bp2),y
  2284 3587 AC 28 9E			ldy ADR+1
  2285 358A 84 83			sty :bp+1
  2286 358C AC 27 9E			ldy ADR
  2287 358F 91 82			sta (:bp),y
  2288
  2289 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2290
  2291 3591 EE 27 9E			inc ADR
  2292 3594 D0 03			sne
  2293 3596 EE 28 9E			inc ADR+1
  2294
  2295 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2296
  2297 3599 EE 2B 9E			inc SRC
  2298 359C D0 03			sne
  2299 359E EE 2C 9E			inc SRC+1
  2300
  2301 				; optimize OK (vbxe_memorystream.inc), line = 138
  2302
  2303 35A1 AD 28 9E			lda ADR+1
  2304 35A4 C9 C0			cmp #$C0
  2305 35A6 90 1A			jcc l_03C3
  2306 35A8 D0 05			bne @+
  2307 35AA AD 27 9E			lda ADR
  2308 35AD 90 13			jcc l_03C3
  2309 				@
  2310
  2311 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2312
  2313 35AF EE 26 9E			inc BNK
  2314
  2315 				; optimize OK (vbxe_memorystream.inc), line = 140
  2316
  2317 35B2 AD 26 9E			lda BNK
  2318 35B5 20 09 34			jsr VBXEMEMORYBANK
  2319
  2320 				; optimize OK (vbxe_memorystream.inc), line = 141
  2321
  2322 35B8 A9 00			lda #$00
  2323 35BA 8D 27 9E			sta ADR
  2324 35BD A9 B0			lda #$B0
  2325 35BF 8D 28 9E			sta ADR+1
  2326 35C2			l_03C3
  2327
  2328 				; --- ForToDoEpilog
  2329 35C2 EE 29 9E			inc I
  2330 35C5 D0 A4			jne l_0398
  2331 35C7 EE 2A 9E			inc I+1
  2332 35CA D0 9F			jne l_0398
  2333 35CC			l_03A4
  2334
  2335 				; optimize OK (vbxe_memorystream.inc), line = 146
  2336
  2337 35CC A9 00			lda #$00
  2338 35CE 20 09 34			jsr VBXEMEMORYBANK
  2339
  2340 				; optimize OK (vbxe_memorystream.inc), line = 148
  2341
  2342 35D1 AC 22 9E 84 84 AC + 	mwy POSITION :bp2
  2343 35DB A0 00			ldy #$00
  2344 35DD B1 84			lda (:bp2),y
  2345 35DF 18 6D 20 9E			add COUNT
  2346 35E3 91 84			sta (:bp2),y
  2347 35E5 C8				iny
  2348 35E6 B1 84			lda (:bp2),y
  2349 35E8 6D 21 9E			adc COUNT+1
  2350 35EB 91 84			sta (:bp2),y
  2351 35ED C8				iny
  2352 35EE B1 84			lda (:bp2),y
  2353 35F0 69 00			adc #$00
  2354 35F2 91 84			sta (:bp2),y
  2355 35F4 C8				iny
  2356 35F5 B1 84			lda (:bp2),y
  2357 35F7 69 00			adc #$00
  2358 35F9 91 84			sta (:bp2),y
  2359
  2360 				; ------------------------------------------------------------
  2361
  2362 = 9E1C			TVBXEMEMORYSTREAM	= DATAORIGIN+$0087
  2363 = 9E1E			BUFFER	= DATAORIGIN+$0089
  2364 = 9E20			COUNT	= DATAORIGIN+$008B
  2365 = 9E22			POSITION	= DATAORIGIN+$008D
  2366 = 9E24			SIZE	= DATAORIGIN+$008F
  2367 = 9E26			BNK	= DATAORIGIN+$0091
  2368 = 9E27			ADR	= DATAORIGIN+$0092
  2369 = 9E29			I	= DATAORIGIN+$0094
  2370 = 9E2B			SRC	= DATAORIGIN+$0096
  2371
  2372 = 9E1C			@VarData	= TVBXEMEMORYSTREAM
  2373 = 0011			@VarDataSize	= 17
  2374
  2375 35FB			@exit
  2376 					.ifdef @new
  2377 					lda <@VarData
  2378 					sta :ztmp
  2379 					lda >@VarData
  2380 					ldy #@VarDataSize-1
  2381 					jmp @FreeMem
  2382 					els
  2383 35FB 60				rts						; ret
  2384 					eif
  2385 				.endl
  2386
  2387 35FC			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2388 35FC 8D 2F 9E			sta TVBXEMEMORYSTREAM
  2389 35FF 8C 30 9E			sty TVBXEMEMORYSTREAM+1
  2390 3602 8D 32 9E			sta POSITION
  2391 3605 8C 33 9E			sty POSITION+1
  2392 3608 18 69 04			add #4
  2393 360B 90 01			scc
  2394 360D C8				iny
  2395 360E 8D 34 9E			sta SIZE
  2396 3611 8C 35 9E			sty SIZE+1
  2397
  2398 				; optimize OK (vbxe_memorystream.inc), line = 158
  2399
  2400 3614 AD 32 9E			lda POSITION
  2401 3617 8D 04 9E			sta READVBXEMEMORYBYTE.POSITION
  2402 361A AD 33 9E			lda POSITION+1
  2403 361D 8D 05 9E			sta READVBXEMEMORYBYTE.POSITION+1
  2404 3620 20 14 34			jsr READVBXEMEMORYBYTE
  2405 3623 AD 06 9E			lda READVBXEMEMORYBYTE.RESULT
  2406 3626 8D 31 9E			sta RESULT
  2407
  2408 				; optimize OK (vbxe_memorystream.inc), line = 160
  2409
  2410 3629 A9 00			lda #$00
  2411 362B 20 09 34			jsr VBXEMEMORYBANK
  2412 362E			@exit
  2413
  2414 				; ------------------------------------------------------------
  2415
  2416 = 9E2F			TVBXEMEMORYSTREAM	= DATAORIGIN+$009A
  2417 = 9E31			RESULT	= DATAORIGIN+$009C
  2418 = 9E32			POSITION	= DATAORIGIN+$009D
  2419 = 9E34			SIZE	= DATAORIGIN+$009F
  2420
  2421 = 9E2F			@VarData	= TVBXEMEMORYSTREAM
  2422 = 0006			@VarDataSize	= 6
  2423
  2424 362E 60				rts						; ret
  2425 				.endl
  2426
  2427 362F			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2428 362F 8D 3E 9E			sta TVBXEMEMORYSTREAM
  2429 3632 8C 3F 9E			sty TVBXEMEMORYSTREAM+1
  2430 3635 8D 41 9E			sta POSITION
  2431 3638 8C 42 9E			sty POSITION+1
  2432 363B 18 69 04			add #4
  2433 363E 90 01			scc
  2434 3640 C8				iny
  2435 3641 8D 43 9E			sta SIZE
  2436 3644 8C 44 9E			sty SIZE+1
  2437
  2438 				; optimize OK (vbxe_memorystream.inc), line = 198
  2439
  2440 3647 AD 41 9E			lda POSITION
  2441 364A 8D 0A 9E			sta WRITEVBXEMEMORYBYTE.POSITION
  2442 364D AD 42 9E			lda POSITION+1
  2443 3650 8D 0B 9E			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2444 3653 AD 40 9E			lda B
  2445 3656 8D 0C 9E			sta WRITEVBXEMEMORYBYTE.A
  2446 3659 20 84 34			jsr WRITEVBXEMEMORYBYTE
  2447
  2448 				; optimize OK (vbxe_memorystream.inc), line = 200
  2449
  2450 365C A9 00			lda #$00
  2451 365E 20 09 34			jsr VBXEMEMORYBANK
  2452
  2453 				; ------------------------------------------------------------
  2454
  2455 = 9E3E			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A9
  2456 = 9E40			B	= DATAORIGIN+$00AB
  2457 = 9E41			POSITION	= DATAORIGIN+$00AC
  2458 = 9E43			SIZE	= DATAORIGIN+$00AE
  2459
  2460 = 9E3E			@VarData	= TVBXEMEMORYSTREAM
  2461 = 0007			@VarDataSize	= 7
  2462
  2463 3661			@exit
  2464 					.ifdef @new
  2465 					lda <@VarData
  2466 					sta :ztmp
  2467 					lda >@VarData
  2468 					ldy #@VarDataSize-1
  2469 					jmp @FreeMem
  2470 					els
  2471 3661 60				rts						; ret
  2472 					eif
  2473 				.endl
  2474
  2475 3662			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2476 3662 8D 4D 9E			sta TVBXEMEMORYSTREAM
  2477 3665 8C 4E 9E			sty TVBXEMEMORYSTREAM+1
  2478 3668 8D 4F 9E			sta POSITION
  2479 366B 8C 50 9E			sty POSITION+1
  2480 366E 18 69 04			add #4
  2481 3671 90 01			scc
  2482 3673 C8				iny
  2483 3674 8D 51 9E			sta SIZE
  2484 3677 8C 52 9E			sty SIZE+1
  2485
  2486 				; optimize OK (vbxe_memorystream.inc), line = 239
  2487
  2488 367A AC 4F 9E 84 84 AC + 	mwy POSITION :bp2
  2489 3684 A0 00			ldy #$00
  2490 3686 B1 84			lda (:bp2),y
  2491 3688 8D 53 9E			sta ADR
  2492 368B C8				iny
  2493 368C B1 84			lda (:bp2),y
  2494 368E 8D 54 9E			sta ADR+1
  2495 3691 C8				iny
  2496 3692 B1 84			lda (:bp2),y
  2497 3694 8D 55 9E			sta ADR+2
  2498 3697 C8				iny
  2499 3698 B1 84			lda (:bp2),y
  2500 369A 8D 56 9E			sta ADR+3
  2501
  2502 				; optimize OK (vbxe_memorystream.inc), line = 240
  2503
  2504 369D AC 51 9E 84 84 AC + 	mwy SIZE :bp2
  2505 36A7 A0 00			ldy #$00
  2506 36A9 B1 84			lda (:bp2),y
  2507 36AB 8D 57 9E			sta SIZ
  2508 36AE C8				iny
  2509 36AF B1 84			lda (:bp2),y
  2510 36B1 8D 58 9E			sta SIZ+1
  2511 36B4 C8				iny
  2512 36B5 B1 84			lda (:bp2),y
  2513 36B7 8D 59 9E			sta SIZ+2
  2514 36BA C8				iny
  2515 36BB B1 84			lda (:bp2),y
  2516 36BD 8D 5A 9E			sta SIZ+3
  2517
  2518 				; -------------------  ASM Block 00000114  -------------------
  2519
  2520 36C0 8A 48			txa:pha
  2521
  2522 36C2 AD 53 9E 8D 30 37		mva adr _adr
  2523 36C8 AD 54 9E 8D 31 37		mva adr+1 _adr+1
  2524 36CE AD 55 9E 8D 32 37		mva adr+2 _adr+2
  2525
  2526 36D4				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 36D4 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 36D6 A0 5F		        ldy     #FX_MEMS
     4 36D8 91 80		        sta     (fxptr),y
  2527
  2528 36DA AD 32 37 CD 59 9E + loop	cpw _adr+1 siz+1
  2529 36E8 B0 37			bcs skp
  2530
  2531 36EA A0 14			ldy #20
  2532 36EC B9 2A 37 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2533
  2534 36F5				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 36F5 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 36F7 A0 50		        ldy     #FX_BL_ADR0
     4 36F9 91 80		        sta     (fxptr),y
  2535 36FB				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 36FB A9 00		        lda     #$00
     3 36FD A0 51		        ldy     #FX_BL_ADR1
     4 36FF 91 80		        sta     (fxptr),y
  2536 3701				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 3701 A0 52		        ldy     #FX_BL_ADR2
     3 3703 91 80		        sta     (fxptr),y
  2537
  2538 3705				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3705 A9 01		        lda     #$01
     3 3707 A0 53		        ldy     #FX_BLITTER_START
     4 3709 91 80		        sta     (fxptr),y
  2539
  2540 370B			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 370B A0 53		        ldy     #FX_BLITTER_BUSY
     3 370D B1 80		        lda     (fxptr),y
  2541 370F D0 FA			bne wait
  2542
  2543 3711 A9 00			lda #$00
  2544 3713 8D 30 37			sta _adr
  2545 3716 EE 31 37 D0 03 EE + 	inw _adr+1
  2546
  2547 371E 4C DA 36			jmp loop
  2548
  2549 3721			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 3721 A9 00		        lda     #$00
     3 3723 A0 5F		        ldy     #FX_MEMS
     4 3725 91 80		        sta     (fxptr),y
  2550
  2551 3727 4C 3F 37			jmp stop
  2552
  2553 372A 00 00 00		bltClr	.long 0x00	; source address
  2554 372D 00 00			.word 0x00	; source step y
  2555 372F 00				.byte 0x00	; source step x
  2556 3730 00 00 00		_adr	.long 0x00	; destination address
  2557 3733 00 01			.word 0x0100	; destination step y
  2558 3735 01				.byte 0x01	; destination step x
  2559 3736 FF 00		_siz	.word 0xff	; width
  2560 3738 00				.byte 0x00	; height
  2561 3739 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2562 373A 00				dta 0x00	; xor mask
  2563 373B 00				dta 0x00	; collision and mask
  2564 373C 00				dta 0x00	; zoom
  2565 373D 00				dta 0x00	; pattern feature
  2566 373E 00				dta 0x00	; control
  2567
  2568 373F 68 AA		stop	pla:tax
  2569
  2570 				; optimize OK (vbxe_memorystream.inc), line = 292
  2571
  2572 3741 AC 4F 9E 84 84 AC + 	mwy POSITION :bp2
  2573 374B A0 00			ldy #$00
  2574 374D 98				tya
  2575 374E 91 84			sta (:bp2),y
  2576 3750 C8				iny
  2577 3751 91 84			sta (:bp2),y
  2578 3753 C8				iny
  2579 3754 91 84			sta (:bp2),y
  2580 3756 C8				iny
  2581 3757 91 84			sta (:bp2),y
  2582
  2583 				; optimize OK (vbxe_memorystream.inc), line = 293
  2584
  2585 3759 AC 51 9E 84 84 AC + 	mwy SIZE :bp2
  2586 3763 A0 00			ldy #$00
  2587 3765 91 84			sta (:bp2),y
  2588 3767 C8				iny
  2589 3768 91 84			sta (:bp2),y
  2590 376A C8				iny
  2591 376B A9 08			lda #$08
  2592 376D 91 84			sta (:bp2),y
  2593 376F C8				iny
  2594 3770 A9 00			lda #$00
  2595 3772 91 84			sta (:bp2),y
  2596
  2597 				; ------------------------------------------------------------
  2598
  2599 = 9E4D			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B8
  2600 = 9E4F			POSITION	= DATAORIGIN+$00BA
  2601 = 9E51			SIZE	= DATAORIGIN+$00BC
  2602 = 9E53			ADR	= DATAORIGIN+$00BE
  2603 = 9E57			SIZ	= DATAORIGIN+$00C2
  2604
  2605 = 9E4D			@VarData	= TVBXEMEMORYSTREAM
  2606 = 000E			@VarDataSize	= 14
  2607
  2608 3774			@exit
  2609 					.ifdef @new
  2610 					lda <@VarData
  2611 					sta :ztmp
  2612 					lda >@VarData
  2613 					ldy #@VarDataSize-1
  2614 					jmp @FreeMem
  2615 					els
  2616 3774 60				rts						; ret
  2617 					eif
  2618 				.endl
  2619
  2620 3775			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2621
  2622 				; -------------------  ASM Block 00000123  -------------------
  2623
  2624 					@setxdl #e@xdl.mapoff
  2624 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2624 3775 A9 05		 LDA# E@XDL.MAPOFF
  2624 3777 20 96 29		 JSR @SETXDL
  2625
  2626 377A			@exit
  2627 					.ifdef @new
  2628 					lda <@VarData
  2629 					sta :ztmp
  2630 					lda >@VarData
  2631 					ldy #@VarDataSize-1
  2632 					jmp @FreeMem
  2633 					els
  2634 377A 60				rts						; ret
  2635 					eif
  2636 				.endl
  2637
  2638 377B			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2639 377B			.local	@0201810000180000
  2640
  2641 				; optimize OK (VBXE), line = 643
  2642
  2643 377B AD 5B 9E			lda A
  2644 377E 8D 97 9D			sta SYSTEM.GRAPHMODE
  2645
  2646 				; optimize OK (VBXE), line = 645
  2647
  2648 3781 A9 C0			lda #$C0
  2649 3783 8D 9C 9D			sta SYSTEM.SCREENHEIGHT
  2650 3786 A9 00			lda #$00
  2651 3788 8D 9D 9D			sta SYSTEM.SCREENHEIGHT+1
  2652
  2653 				; optimize OK (VBXE), line = 647
  2654
  2655 378B AD 5B 9E			lda A
  2656 378E 8D 5E 9E			sta @CASETMP_0005
  2657 3791 C9 0A			cmp #$0A
  2658 3793 D0 12			jne l_043A
  2659 				@
  2660
  2661 				; optimize OK (VBXE), line = 648
  2662
  2663 3795 A9 A0			lda #$A0
  2664 3797 8D 9A 9D			sta SYSTEM.SCREENWIDTH
  2665 379A A9 00			lda #$00
  2666 379C 8D 9B 9D			sta SYSTEM.SCREENWIDTH+1
  2667 379F A9 01			lda #$01
  2668 37A1 8D 5B 9E			sta A
  2669 37A4 4C EC 37			jmp a_0005
  2670 37A7			l_043A
  2671 37A7 C9 1F			cmp #$1F
  2672 37A9 D0 12			jne l_0449
  2673
  2674 				; optimize OK (VBXE), line = 649
  2675
  2676 37AB A9 40			lda #$40
  2677 37AD 8D 9A 9D			sta SYSTEM.SCREENWIDTH
  2678 37B0 A9 01			lda #$01
  2679 37B2 8D 9B 9D			sta SYSTEM.SCREENWIDTH+1
  2680 37B5 A9 02			lda #$02
  2681 37B7 8D 5B 9E			sta A
  2682 37BA 4C EC 37			jmp a_0005
  2683 37BD			l_0449
  2684 37BD C9 18			cmp #$18
  2685 37BF D0 12			jne l_0458
  2686
  2687 				; optimize OK (VBXE), line = 650
  2688
  2689 37C1 A9 80			lda #$80
  2690 37C3 8D 9A 9D			sta SYSTEM.SCREENWIDTH
  2691 37C6 A9 02			lda #$02
  2692 37C8 8D 9B 9D			sta SYSTEM.SCREENWIDTH+1
  2693 37CB A9 03			lda #$03
  2694 37CD 8D 5B 9E			sta A
  2695 37D0 4C EC 37			jmp a_0005
  2696 37D3			l_0458
  2697
  2698 				; optimize OK (VBXE), line = 654
  2699
  2700 37D3 A9 50			lda #$50
  2701 37D5 8D 9A 9D			sta SYSTEM.SCREENWIDTH
  2702 37D8 A9 00			lda #$00
  2703 37DA 8D 9B 9D			sta SYSTEM.SCREENWIDTH+1
  2704
  2705 				; optimize OK (VBXE), line = 655
  2706
  2707 37DD A9 18			lda #$18
  2708 37DF 8D 9C 9D			sta SYSTEM.SCREENHEIGHT
  2709 37E2 A9 00			lda #$00
  2710 37E4 8D 9D 9D			sta SYSTEM.SCREENHEIGHT+1
  2711
  2712 				; optimize OK (VBXE), line = 656
  2713
  2714 37E7 A9 02			lda #$02
  2715 37E9 8D 5B 9E			sta A
  2716 37EC			a_0005
  2717
  2718 				; -------------------  ASM Block 00000124  -------------------
  2719
  2720 37EC 8A 48			txa:pha
  2721
  2722 37EE AD 9A 9D			lda MAIN.SYSTEM.ScreenWidth
  2723 37F1 AE 9B 9D			ldx MAIN.SYSTEM.ScreenWidth+1
  2724
  2725 37F4 AC 9C 9D			ldy MAIN.SYSTEM.ScreenHeight
  2726
  2727 37F7 20 8D 21			@SCREENSIZE
  2728
  2729 					@setxdl a
  2729 				 LDA A\ JSR @SETXDL
  2729 37FA AD 5B 9E		 LDA A
  2729 37FD 20 96 29		 JSR @SETXDL
  2730
  2731 3800				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 3800 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 3802 A0 5F		        ldy     #FX_MEMS
     4 3804 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2732
  2733 3806 A0 09			ldy #s@xdl.ovstep
  2734
  2735 3808 AD 5C 9E			lda s
  2736 380B 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2737
  2738 380E AD 5D 9E			lda s+1
  2739 3811 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2740
  2741 3814				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3814 A9 00		        lda     #$00
     3 3816 A0 5F		        ldy     #FX_MEMS
     4 3818 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2742
  2743 381A 68 AA			pla:tax
  2744
  2745 				; ------------------------------------------------------------
  2746
  2747 = 9E5B			A	= DATAORIGIN+$00C6
  2748 = 9E5C			S	= DATAORIGIN+$00C7
  2749 = 9E5E			@CASETMP_0005	= DATAORIGIN+$00C9
  2750
  2751 = 9E5B			@VarData	= A
  2752 = 0004			@VarDataSize	= 4
  2753
  2754 381C			@exit
  2755 					.ifdef @new
  2756 					lda <@VarData
  2757 					sta :ztmp
  2758 					lda >@VarData
  2759 					ldy #@VarDataSize-1
  2760 					jmp @FreeMem
  2761 					els
  2762 381C 60				rts						; ret
  2763 					eif
  2764 				.endl
  2765 				.endl							; overload
  2766
  2767 381D			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2768 381D			.local	@010180000
  2769 381D 8D 5F 9E			sta A
  2770
  2771 				; optimize OK (VBXE), line = 698
  2772
  2773 3820 8D 5B 9E			sta SETHORIZONTALRES.@0201810000180000.A
  2774 3823 A9 40			lda #$40
  2775 3825 8D 5C 9E			sta SETHORIZONTALRES.@0201810000180000.S
  2776 3828 A9 01			lda #$01
  2777 382A 8D 5D 9E			sta SETHORIZONTALRES.@0201810000180000.S+1
  2778 382D 20 7B 37			jsr SETHORIZONTALRES.@0201810000180000
  2779
  2780 				; ------------------------------------------------------------
  2781
  2782 = 9E5F			A	= DATAORIGIN+$00CA
  2783
  2784 = 9E5F			@VarData	= A
  2785 = 0001			@VarDataSize	= 1
  2786
  2787 3830			@exit
  2788 					.ifdef @new
  2789 					lda <@VarData
  2790 					sta :ztmp
  2791 					lda >@VarData
  2792 					ldy #@VarDataSize-1
  2793 					jmp @FreeMem
  2794 					els
  2795 3830 60				rts						; ret
  2796 					eif
  2797 				.endl
  2798 				.endl							; overload
  2799
  2800 3831			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2801
  2802 				; -------------------  ASM Block 00000126  -------------------
  2803
  2804 3831				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 3831 AD 60 9E		        lda     A
     3 3834 A0 50		        ldy     #FX_BL_ADR0
     4 3836 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2805 3838 AD 61 9E			lda	a+1
  2806 383B 29 0F			and	#$0f
  2807 383D				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 383D A0 51		        ldy     #FX_BL_ADR1
     3 383F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2808 3841				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3841 A9 00		        lda     #$00
     3 3843 A0 52		        ldy     #FX_BL_ADR2
     4 3845 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2809
  2810 3847				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 3847 A9 01		        lda     #$01
     3 3849 A0 53		        ldy     #FX_BLITTER_START
     4 384B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2811
  2812 				;wait	fxla	FX_BLITTER_BUSY
  2813 				;	bne	wait
  2814
  2815 				; ------------------------------------------------------------
  2816
  2817 = 9E60			A	= DATAORIGIN+$00CB
  2818 = 9D95			A.SRC_ADR	= DATAORIGIN+$0000
  2819 = 9D95			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  2820 = 9D96			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  2821 = 9D97			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  2822 = 9D98			A.SRC_STEP_Y	= DATAORIGIN+$0003
  2823 = 9D9A			A.SRC_STEP_X	= DATAORIGIN+$0005
  2824 = 9D9B			A.DST_ADR	= DATAORIGIN+$0006
  2825 = 9D9B			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  2826 = 9D9C			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  2827 = 9D9D			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  2828 = 9D9E			A.DST_STEP_Y	= DATAORIGIN+$0009
  2829 = 9DA0			A.DST_STEP_X	= DATAORIGIN+$000B
  2830 = 9DA1			A.BLT_WIDTH	= DATAORIGIN+$000C
  2831 = 9DA3			A.BLT_HEIGHT	= DATAORIGIN+$000E
  2832 = 9DA4			A.BLT_AND_MASK	= DATAORIGIN+$000F
  2833 = 9DA5			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  2834 = 9DA6			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  2835 = 9DA7			A.BLT_ZOOM	= DATAORIGIN+$0012
  2836 = 9DA8			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  2837 = 9DA9			A.BLT_CONTROL	= DATAORIGIN+$0014
  2838
  2839 = 9E60			@VarData	= A
  2840 = 0002			@VarDataSize	= 2
  2841
  2842 384D			@exit
  2843 					.ifdef @new
  2844 					lda <@VarData
  2845 					sta :ztmp
  2846 					lda >@VarData
  2847 					ldy #@VarDataSize-1
  2848 					jmp @FreeMem
  2849 					els
  2850 384D 60				rts						; ret
  2851 					eif
  2852 				.endl
  2853
  2854 384E			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  2855 384E 8D 64 9E			sta A
  2856
  2857 				; -------------------  ASM Block 00000130  -------------------
  2858
  2859 3851				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 3851 AD 64 9E		        lda     A
     3 3854 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 3856 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2860
  2861 				; ------------------------------------------------------------
  2862
  2863 = 9E64			A	= DATAORIGIN+$00CF
  2864
  2865 = 9E64			@VarData	= A
  2866 = 0001			@VarDataSize	= 1
  2867
  2868 3858			@exit
  2869 					.ifdef @new
  2870 					lda <@VarData
  2871 					sta :ztmp
  2872 					lda >@VarData
  2873 					ldy #@VarDataSize-1
  2874 					jmp @FreeMem
  2875 					els
  2876 3858 60				rts						; ret
  2877 					eif
  2878 				.endl
  2879
  2880 				; ------------------------------------------------------------
  2881 				; ------------------------------------------------------------
  2882 3859			@UnitInit
  2883
  2884 				; -------------------  ASM Block 00000138  -------------------
  2885
  2886 3859 8A 48			txa:pha
  2887
  2888 385B 20 4A 28			jsr @vbxe_detect
  2889 385E 90 04			bcc ok
  2890
  2891 3860 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  2892 3862 D0 05			bne status
  2893
  2894 3864 20 A0 28		ok	jsr @vbxe_init
  2895
  2896 3867 A2 01			ldx #MAIN.GRAPH.grOK
  2897 3869 8E D2 9D		status	stx MAIN.GRAPH.GraphResult
  2898
  2899 386C 68 AA			pla:tax
  2900
  2901 386E 60				rts
  2902
  2903 				; ------------------------------------------------------------
  2904
  2905 = 0001			VC_XDL	= $01
  2906 = 0002			VC_XCOLOR	= $02
  2907 = 0004			VC_NO_TRANS	= $04
  2908 = 0008			VC_TRANS15	= $08
  2909 = 0000			TCBLACK	= $00
  2910 = 0001			TCRED	= $01
  2911 = 0002			TCGREEN	= $02
  2912 = 0003			TCYELLOW	= $03
  2913 = 0004			TCBLUE	= $04
  2914 = 0005			TCMAGENTA	= $05
  2915 = 0006			TCCYAN	= $06
  2916 = 0007			TCWHITE	= $07
  2917 = 0008			TCBRIGHTBLACK	= $08
  2918 = 0009			TCBRIGHTRED	= $09
  2919 = 000A			TCBRIGHTGREEN	= $0A
  2920 = 000B			TCBRIGHTYELLOW	= $0B
  2921 = 000C			TCBRIGHTBLUE	= $0C
  2922 = 000D			TCBRIGHTMAGENTA	= $0D
  2923 = 000E			TCBRIGHTCYAN	= $0E
  2924 = 000F			TCBRIGHTWHITE	= $0F
  2925 = 0080			TBBLACK	= $80
  2926 = 0090			TBRED	= $90
  2927 = 00A0			TBGREEN	= $A0
  2928 = 00B0			TBYELLOW	= $B0
  2929 = 00C0			TBBLUE	= $C0
  2930 = 00D0			TBMAGENTA	= $D0
  2931 = 00E0			TBCYAN	= $E0
  2932 = 00F0			TBWHITE	= $F0
  2933 = 9DFB			adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
  2934 386F			.var VRAM	= adr.VRAM .word
  2935 = 9DFB			VRAM.POSITION	= DATAORIGIN+$0066
  2936 = 9DFF			VRAM.SIZE	= DATAORIGIN+$006A
  2937 = 0063			SCROLLBACK_FILL	= $63
  2938 = 298C			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  2939 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  2940 386F			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  2941 = 02FD			FILDAT	= $02FD
  2942 = 0054			ROWCRS	= $54
  2943 = 0055			COLCRS	= $55
  2944 = 0068			CRSADR	= $68
  2945
  2946 = 386F FB 9D		VRAM
  2946 = 3871 00 04		SCROLLBACK_BUFFER
  2946 				.endl							; UNIT VBXE
  2947
  2948 				; ------------------------------------------------------------
  2949
  2950 3873			.local	JOYSTICK					; UNIT
  2951
  2952 				; ------------------------------------------------------------
  2953
  2954 = 000F			JOY_NONE	= $0F
  2955 = 000E			JOY_UP	= $0E
  2956 = 000D			JOY_DOWN	= $0D
  2957 = 000B			JOY_LEFT	= $0B
  2958 = 000A			JOY_LEFT_UP	= $0A
  2959 = 0009			JOY_LEFT_DOWN	= $09
  2960 = 0007			JOY_RIGHT	= $07
  2961 = 0006			JOY_RIGHT_UP	= $06
  2962 = 0005			JOY_RIGHT_DOWN	= $05
  2963 = 0278			JOY_1	= $0278
  2964 = 0279			JOY_2	= $0279
  2965 = 0278			adr.STICK	= $0278
  2966 3873			.var STICK	= adr.STICK .word
  2967 = 0278			STICK0	= $0278
  2968 = 0279			STICK1	= $0279
  2969 = 0284			adr.STRIG	= $0284
  2970 3873			.var STRIG	= adr.STRIG .word
  2971 = 0284			STRIG0	= $0284
  2972 = 0285			STRIG1	= $0285
  2973 = 0270			adr.PADDL	= $0270
  2974 3873			.var PADDL	= adr.PADDL .word
  2975 = 0270			PADDL0	= $0270
  2976 = 0271			PADDL1	= $0271
  2977 = 0272			PADDL2	= $0272
  2978 = 0273			PADDL3	= $0273
  2979 = 0274			PADDL4	= $0274
  2980 = 0275			PADDL5	= $0275
  2981 = 0276			PADDL6	= $0276
  2982 = 0277			PADDL7	= $0277
  2983 = 027C			adr.PTRIG	= $027C
  2984 3873			.var PTRIG	= adr.PTRIG .word
  2985 = 027C			PTRIG0	= $027C
  2986 = 027D			PTRIG1	= $027D
  2987 = 027E			PTRIG2	= $027E
  2988 = 027F			PTRIG3	= $027F
  2989 = 0280			PTRIG4	= $0280
  2990 = 0281			PTRIG5	= $0281
  2991 = 0282			PTRIG6	= $0282
  2992 = 0283			PTRIG7	= $0283
  2993 = D010			TRIG0	= $D010
  2994 = D011			TRIG1	= $D011
  2995 = D200			POT0	= $D200
  2996 = D208			ALLPOT	= $D208
  2997 = D20B			POTGO	= $D20B
  2998
  2999 = 3873 78 02		STICK
  2999 = 3875 84 02		STRIG
  2999 = 3877 70 02		PADDL
  2999 = 3879 7C 02		PTRIG
  2999 				.endl							; UNIT JOYSTICK
  3000
  3001 387B			.local	START_LEVEL					; PROCEDURE
  3002
  3003 387B			@exit
  3004 					.ifdef @new
  3005 					lda <@VarData
  3006 					sta :ztmp
  3007 					lda >@VarData
  3008 					ldy #@VarDataSize-1
  3009 					jmp @FreeMem
  3010 					els
  3011 387B 60				rts						; ret
  3012 					eif
  3013 				.endl
  3014
  3015 387C			.local	DEATH_SOUND					; PROCEDURE
  3016
  3017 				; ------------------------------------------------------------
  3018
  3019 = 9E6D			A	= DATAORIGIN+$00D8
  3020
  3021 = 9E6D			@VarData	= A
  3022 = 0002			@VarDataSize	= 2
  3023
  3024 387C			@exit
  3025 					.ifdef @new
  3026 					lda <@VarData
  3027 					sta :ztmp
  3028 					lda >@VarData
  3029 					ldy #@VarDataSize-1
  3030 					jmp @FreeMem
  3031 					els
  3032 387C 60				rts						; ret
  3033 					eif
  3034 				.endl
  3035
  3036 387D			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3037
  3038 				; ------------------------------------------------------------
  3039
  3040 = 9E6F			A	= DATAORIGIN+$00DA
  3041 = 9E71			B	= DATAORIGIN+$00DC
  3042
  3043 = 9E6F			@VarData	= A
  3044 = 0004			@VarDataSize	= 4
  3045
  3046 387D			@exit
  3047 					.ifdef @new
  3048 					lda <@VarData
  3049 					sta :ztmp
  3050 					lda >@VarData
  3051 					ldy #@VarDataSize-1
  3052 					jmp @FreeMem
  3053 					els
  3054 387D 60				rts						; ret
  3055 					eif
  3056 				.endl
  3057
  3058 387E			.local	SQRT32						; FUNCTION
  3059
  3060 				; optimize OK (arkanoid_vbxe.pas), line = 90
  3061
  3062 387E AD 73 9E			lda V
  3063 3881 8D 81 9E			sta R
  3064 3884 AD 74 9E			lda V+1
  3065 3887 8D 82 9E			sta R+1
  3066 388A AD 75 9E			lda V+2
  3067 388D 8D 83 9E			sta R+2
  3068 3890 AD 76 9E			lda V+3
  3069 3893 8D 84 9E			sta R+3
  3070
  3071 				; optimize OK (arkanoid_vbxe.pas), line = 91
  3072
  3073 3896 A9 00			lda #$00
  3074 3898 8D 7D 9E			sta Q
  3075 389B 8D 7E 9E			sta Q+1
  3076 389E 8D 7F 9E			sta Q+2
  3077 38A1 8D 80 9E			sta Q+3
  3078
  3079 				; optimize OK (arkanoid_vbxe.pas), line = 92
  3080
  3081 38A4 8D 79 9E			sta B
  3082 38A7 8D 7A 9E			sta B+1
  3083 38AA 8D 7B 9E			sta B+2
  3084 38AD A9 40			lda #$40
  3085
  3086 				; --- WhileProlog
  3087 38AF 4C E7 38			jmp l_049F
  3088 38B2			l_04A0
  3089
  3090 				; optimize OK (arkanoid_vbxe.pas), line = 94
  3091
  3092 38B2 AD 79 9E			lda B
  3093 38B5 85 9F			sta :STACKORIGIN+9
  3094 38B7 AD 7A 9E			lda B+1
  3095 38BA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3096 38BC AD 7B 9E			lda B+2
  3097 38BF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3098 38C1 AD 7C 9E			lda B+3
  3099 38C4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3100 38C6 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3101 38C8 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3102 38CA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3103 38CC 66 9F			ror :STACKORIGIN+9
  3104 38CE 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3105 38D0 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3106 38D2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3107 38D4 66 9F			ror :STACKORIGIN+9
  3108 38D6 A5 9F			lda :STACKORIGIN+9
  3109 38D8 8D 79 9E			sta B
  3110 38DB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3111 38DD 8D 7A 9E			sta B+1
  3112 38E0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3113 38E2 8D 7B 9E			sta B+2
  3114 38E5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3115 38E7			l_049F
  3116 38E7 8D 7C 9E			sta B+3
  3117 38EA CD 84 9E			cmp R+3
  3118 38ED D0 16			bne @+
  3119 38EF AD 7B 9E			lda B+2
  3120 38F2 CD 83 9E			cmp R+2
  3121 38F5 D0 0E			bne @+
  3122 38F7 AD 7A 9E			lda B+1
  3123 38FA CD 82 9E			cmp R+1
  3124 38FD D0 06			bne @+
  3125 38FF AD 79 9E			lda B
  3126 3902 CD 81 9E			cmp R
  3127 				@
  3128 3905 F0 02			beq @+
  3129 3907 B0 A9			jcs l_04A0
  3130 				@
  3131
  3132 				; --- WhileProlog
  3133 3909 4C DE 39			jmp l_04B4
  3134 390C			l_04B5
  3135
  3136 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3137
  3138 390C AD 7D 9E			lda Q
  3139 390F 18 6D 79 9E			add B
  3140 3913 8D 85 9E			sta T
  3141 3916 AD 7E 9E			lda Q+1
  3142 3919 6D 7A 9E			adc B+1
  3143 391C 8D 86 9E			sta T+1
  3144 391F AD 7F 9E			lda Q+2
  3145 3922 6D 7B 9E			adc B+2
  3146 3925 8D 87 9E			sta T+2
  3147 3928 AD 80 9E			lda Q+3
  3148 392B 6D 7C 9E			adc B+3
  3149 392E 8D 88 9E			sta T+3
  3150
  3151 				; optimize OK (arkanoid_vbxe.pas), line = 99
  3152
  3153 3931 4E 80 9E			lsr Q+3
  3154 3934 6E 7F 9E			ror Q+2
  3155 3937 6E 7E 9E			ror Q+1
  3156 393A 6E 7D 9E			ror Q
  3157
  3158 				; optimize OK (arkanoid_vbxe.pas), line = 101
  3159
  3160 393D AD 84 9E			lda R+3
  3161 3940 CD 88 9E			cmp T+3
  3162 3943 D0 16			bne @+
  3163 3945 AD 83 9E			lda R+2
  3164 3948 CD 87 9E			cmp T+2
  3165 394B D0 0E			bne @+
  3166 394D AD 82 9E			lda R+1
  3167 3950 CD 86 9E			cmp T+1
  3168 3953 D0 06			bne @+
  3169 3955 AD 81 9E			lda R
  3170 3958 CD 85 9E			cmp T
  3171 				@
  3172 395B 90 49			jcc l_04D5
  3173
  3174 				; optimize OK (arkanoid_vbxe.pas), line = 102
  3175
  3176 395D AD 81 9E			lda R
  3177 3960 ED 85 9E			sbc T
  3178 3963 8D 81 9E			sta R
  3179 3966 AD 82 9E			lda R+1
  3180 3969 ED 86 9E			sbc T+1
  3181 396C 8D 82 9E			sta R+1
  3182 396F AD 83 9E			lda R+2
  3183 3972 ED 87 9E			sbc T+2
  3184 3975 8D 83 9E			sta R+2
  3185 3978 AD 84 9E			lda R+3
  3186 397B ED 88 9E			sbc T+3
  3187 397E 8D 84 9E			sta R+3
  3188
  3189 				; optimize OK (arkanoid_vbxe.pas), line = 103
  3190
  3191 3981 AD 7D 9E			lda Q
  3192 3984 18 6D 79 9E			add B
  3193 3988 8D 7D 9E			sta Q
  3194 398B AD 7E 9E			lda Q+1
  3195 398E 6D 7A 9E			adc B+1
  3196 3991 8D 7E 9E			sta Q+1
  3197 3994 AD 7F 9E			lda Q+2
  3198 3997 6D 7B 9E			adc B+2
  3199 399A 8D 7F 9E			sta Q+2
  3200 399D AD 80 9E			lda Q+3
  3201 39A0 6D 7C 9E			adc B+3
  3202 39A3 8D 80 9E			sta Q+3
  3203 39A6			l_04D5
  3204
  3205 				; optimize OK (arkanoid_vbxe.pas), line = 106
  3206
  3207 39A6 AD 79 9E			lda B
  3208 39A9 85 9F			sta :STACKORIGIN+9
  3209 39AB AD 7A 9E			lda B+1
  3210 39AE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3211 39B0 AD 7B 9E			lda B+2
  3212 39B3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3213 39B5 AD 7C 9E			lda B+3
  3214 39B8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3215 39BA 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3216 39BC 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3217 39BE 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3218 39C0 66 9F			ror :STACKORIGIN+9
  3219 39C2 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3220 39C4 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3221 39C6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3222 39C8 66 9F			ror :STACKORIGIN+9
  3223 39CA A5 9F			lda :STACKORIGIN+9
  3224 39CC 8D 79 9E			sta B
  3225 39CF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3226 39D1 8D 7A 9E			sta B+1
  3227 39D4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3228 39D6 8D 7B 9E			sta B+2
  3229 39D9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3230 39DB 8D 7C 9E			sta B+3
  3231 39DE			l_04B4
  3232
  3233 				; optimize OK (arkanoid_vbxe.pas), line = 96
  3234
  3235 39DE AD 7C 9E			lda B+3
  3236 39E1 C9 00			cmp #$00
  3237 39E3 D0 13			bne @+
  3238 39E5 AD 7B 9E			lda B+2
  3239 39E8 C9 00			cmp #$00
  3240 39EA D0 0C			bne @+
  3241 39EC AD 7A 9E			lda B+1
  3242 39EF C9 00			cmp #$00
  3243 39F1 D0 05			bne @+
  3244 39F3 AD 79 9E			lda B
  3245 39F6 C9 00			cmp #$00
  3246 				@
  3247 39F8 F0 05			beq @+
  3248 39FA 90 03 4C 0C 39		jcs l_04B5
  3249 				@
  3250
  3251 				; optimize OK (arkanoid_vbxe.pas), line = 110
  3252
  3253 39FF AD 7D 9E			lda Q
  3254 3A02 8D 77 9E			sta RESULT
  3255 3A05 AD 7E 9E			lda Q+1
  3256 3A08 8D 78 9E			sta RESULT+1
  3257 3A0B			@exit
  3258
  3259 				; ------------------------------------------------------------
  3260
  3261 = 9E73			V	= DATAORIGIN+$00DE
  3262 = 9E77			RESULT	= DATAORIGIN+$00E2
  3263 = 9E79			B	= DATAORIGIN+$00E4
  3264 = 9E7D			Q	= DATAORIGIN+$00E8
  3265 = 9E81			R	= DATAORIGIN+$00EC
  3266 = 9E85			T	= DATAORIGIN+$00F0
  3267
  3268 = 9E73			@VarData	= V
  3269 = 0014			@VarDataSize	= 20
  3270
  3271 3A0B 60				rts						; ret
  3272 				.endl
  3273
  3274 3A0C			.local	MOUSECOORDS					; PROCEDURE
  3275
  3276 				; optimize OK (service.pas), line = 296
  3277
  3278 3A0C AD 00 D3			lda ATARI.PORTA
  3279 3A0F 29 0F			and #$0F
  3280 3A11 8D 90 9F			sta A
  3281
  3282 				; optimize OK (service.pas), line = 298
  3283
  3284 3A14 8D 91 9F			sta @CASETMP_0007
  3285 3A17 C9 0B			cmp #$0B
  3286 3A19 D0 38			jne l_0517
  3287 				@
  3288
  3289 				; optimize OK (service.pas), line = 299
  3290
  3291 3A1B AC 8E 9F 84 84 AC + 	mwy X :bp2
  3292 3A25 A0 00			ldy #$00
  3293 3A27 B1 84			lda (:bp2),y
  3294 3A29 C8				iny
  3295 3A2A C9 0B			cmp #$0B
  3296 3A2C B1 84			lda (:bp2),y
  3297 3A2E E9 00			sbc #$00
  3298 3A30 50 02			svc
  3299 3A32 49 80			eor #$80
  3300 3A34 30 1A			jmi l_0528
  3301 3A36 AC 8E 9F 84 84 AC + 	mwy X :bp2
  3302 3A40 A0 00			ldy #$00
  3303 3A42 B1 84			lda (:bp2),y
  3304 3A44 38 E9 04			sub #$04
  3305 3A47 91 84			sta (:bp2),y
  3306 3A49 C8				iny
  3307 3A4A B1 84			lda (:bp2),y
  3308 3A4C E9 00			sbc #$00
  3309 3A4E 91 84			sta (:bp2),y
  3310 3A50			l_0528
  3311 3A50 4C 8C 3A			jmp a_0007
  3312 3A53			l_0517
  3313 3A53 C9 07			cmp #$07
  3314 3A55 D0 35			jne l_0533
  3315
  3316 				; optimize OK (service.pas), line = 300
  3317
  3318 3A57 AC 8E 9F 84 84 AC + 	mwy X :bp2
  3319 3A61 A0 00			ldy #$00
  3320 3A63 B1 84			lda (:bp2),y
  3321 3A65 C8				iny
  3322 3A66 C9 D8			cmp #$D8
  3323 3A68 B1 84			lda (:bp2),y
  3324 3A6A E9 00			sbc #$00
  3325 3A6C 50 02			svc
  3326 3A6E 49 80			eor #$80
  3327 3A70 10 1A			jpl l_0544
  3328 3A72 AC 8E 9F 84 84 AC + 	mwy X :bp2
  3329 3A7C A0 00			ldy #$00
  3330 3A7E B1 84			lda (:bp2),y
  3331 3A80 18 69 04			add #$04
  3332 3A83 91 84			sta (:bp2),y
  3333 3A85 C8				iny
  3334 3A86 B1 84			lda (:bp2),y
  3335 3A88 69 00			adc #$00
  3336 3A8A 91 84			sta (:bp2),y
  3337 3A8C			l_0544
  3338 3A8C			l_0533
  3339 3A8C			a_0007
  3340
  3341 				; ------------------------------------------------------------
  3342
  3343 = 9F8E			X	= DATAORIGIN+$01F9
  3344 = 9F90			A	= DATAORIGIN+$01FB
  3345 = 9F91			@CASETMP_0007	= DATAORIGIN+$01FC
  3346
  3347 = 9F8E			@VarData	= X
  3348 = 0004			@VarDataSize	= 4
  3349
  3350 3A8C			@exit
  3351 					.ifdef @new
  3352 					lda <@VarData
  3353 					sta :ztmp
  3354 					lda >@VarData
  3355 					ldy #@VarDataSize-1
  3356 					jmp @FreeMem
  3357 					els
  3358 3A8C 60				rts						; ret
  3359 					eif
  3360 				.endl
  3361
  3362 3A8D			.local	MOUSECLICK					; FUNCTION
  3363
  3364 				; optimize OK (service.pas), line = 310
  3365
  3366 3A8D			?volatile:
  3367 3A8D AD 10 D0			lda JOYSTICK.TRIG0
  3368 3A90 49 01			eor #$01
  3369 3A92 8D 92 9F			sta RESULT
  3370 3A95			@exit
  3371
  3372 				; ------------------------------------------------------------
  3373
  3374 = 9F92			RESULT	= DATAORIGIN+$01FD
  3375
  3376 3A95 60				rts						; ret
  3377 				.endl
  3378
  3379 3A96			.local	BLITBOX						; PROCEDURE
  3380
  3381 				; -------------------  ASM Block 00000141  -------------------
  3382
  3383 3A96				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3A96 A9 80		        lda     #$80
     3 3A98 A0 5F		        ldy     #FX_MEMS
     4 3A9A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3384 					
  3385 				; optimize OK (service.pas), line = 323
  3386
  3387 3A9C AD 95 9F			lda SRC+2
  3388 3A9F 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3389
  3390 				; optimize OK (service.pas), line = 324
  3391
  3392 3AA2 AD 94 9F			lda SRC+1
  3393 3AA5 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3394
  3395 				; optimize OK (service.pas), line = 325
  3396
  3397 3AA8 AD 93 9F			lda SRC
  3398 3AAB 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3399
  3400 				; optimize OK (service.pas), line = 327
  3401
  3402 3AAE AD 99 9F			lda DST+2
  3403 3AB1 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3404
  3405 				; optimize OK (service.pas), line = 328
  3406
  3407 3AB4 AD 98 9F			lda DST+1
  3408 3AB7 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3409
  3410 				; optimize OK (service.pas), line = 329
  3411
  3412 3ABA AD 97 9F			lda DST
  3413 3ABD 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3414
  3415 				; optimize OK (service.pas), line = 331
  3416
  3417 3AC0 A9 01			lda #$01
  3418 3AC2 8D 05 B1			sta BLT.SRC_STEP_X
  3419
  3420 				; optimize OK (service.pas), line = 332
  3421
  3422 3AC5 8D 0B B1			sta BLT.DST_STEP_X
  3423
  3424 				; optimize OK (service.pas), line = 334
  3425
  3426 3AC8 A9 40			lda #$40
  3427 3ACA 8D 09 B1			sta BLT.DST_STEP_Y
  3428 3ACD A9 01			lda #$01
  3429 3ACF 8D 0A B1			sta BLT.DST_STEP_Y+1
  3430
  3431 				; optimize OK (service.pas), line = 335
  3432
  3433 3AD2 A9 40			lda #$40
  3434 3AD4 8D 03 B1			sta BLT.SRC_STEP_Y
  3435 3AD7 A9 01			lda #$01
  3436 3AD9 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3437
  3438 				; optimize OK (service.pas), line = 337
  3439
  3440 3ADC AD 9B 9F			lda W
  3441 3ADF 38 E9 01			sub #$01
  3442 3AE2 8D 0C B1			sta BLT.BLT_WIDTH
  3443 3AE5 AD 9C 9F			lda W+1
  3444 3AE8 E9 00			sbc #$00
  3445 3AEA 8D 0D B1			sta BLT.BLT_WIDTH+1
  3446
  3447 				; optimize OK (service.pas), line = 338
  3448
  3449 3AED AC 9D 9F			ldy H
  3450 3AF0 88				dey
  3451 3AF1 8C 0E B1			sty BLT.BLT_HEIGHT
  3452
  3453 				; optimize OK (service.pas), line = 340
  3454
  3455 3AF4 A9 FF			lda #$FF
  3456 3AF6 8D 0F B1			sta BLT.BLT_AND_MASK
  3457
  3458 				; optimize OK (service.pas), line = 342
  3459
  3460 3AF9 A9 00			lda #$00
  3461 3AFB 8D 12 B1			sta BLT.BLT_ZOOM
  3462
  3463 				; optimize OK (service.pas), line = 344
  3464
  3465 3AFE 8D 14 B1			sta BLT.BLT_CONTROL
  3466
  3467 				; -------------------  ASM Block 00000142  -------------------
  3468
  3469 3B01				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3B01 A9 00		        lda     #$00
     3 3B03 A0 5F		        ldy     #FX_MEMS
     4 3B05 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3470 					
  3471 				; optimize OK (service.pas), line = 350
  3472
  3473 3B07 AD 22 9D			lda BLT
  3474 3B0A 8D 60 9E			sta VBXE.RUNBCB.A
  3475 3B0D AD 23 9D			lda BLT+1
  3476 3B10 8D 61 9E			sta VBXE.RUNBCB.A+1
  3477 3B13 20 31 38			jsr VBXE.RUNBCB
  3478
  3479 				; ------------------------------------------------------------
  3480
  3481 = 9F93			SRC	= DATAORIGIN+$01FE
  3482 = 9F97			DST	= DATAORIGIN+$0202
  3483 = 9F9B			W	= DATAORIGIN+$0206
  3484 = 9F9D			H	= DATAORIGIN+$0208
  3485
  3486 = 9F93			@VarData	= SRC
  3487 = 000B			@VarDataSize	= 11
  3488
  3489 3B16			@exit
  3490 					.ifdef @new
  3491 					lda <@VarData
  3492 					sta :ztmp
  3493 					lda >@VarData
  3494 					ldy #@VarDataSize-1
  3495 					jmp @FreeMem
  3496 					els
  3497 3B16 60				rts						; ret
  3498 					eif
  3499 				.endl
  3500
  3501 3B17			.local	BLITZERO					; PROCEDURE
  3502
  3503 				; -------------------  ASM Block 00000143  -------------------
  3504
  3505 3B17				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B17 A9 80		        lda     #$80
     3 3B19 A0 5F		        ldy     #FX_MEMS
     4 3B1B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3506 					
  3507 				; optimize OK (service.pas), line = 366
  3508
  3509 3B1D AD A0 9F			lda SRC+2
  3510 3B20 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3511
  3512 				; optimize OK (service.pas), line = 367
  3513
  3514 3B23 AD 9F 9F			lda SRC+1
  3515 3B26 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3516
  3517 				; optimize OK (service.pas), line = 368
  3518
  3519 3B29 AD 9E 9F			lda SRC
  3520 3B2C 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3521
  3522 				; optimize OK (service.pas), line = 370
  3523
  3524 3B2F AD A4 9F			lda DST+2
  3525 3B32 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3526
  3527 				; optimize OK (service.pas), line = 371
  3528
  3529 3B35 AD A3 9F			lda DST+1
  3530 3B38 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3531
  3532 				; optimize OK (service.pas), line = 372
  3533
  3534 3B3B AD A2 9F			lda DST
  3535 3B3E 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3536
  3537 				; optimize OK (service.pas), line = 374
  3538
  3539 3B41 A9 01			lda #$01
  3540 3B43 8D 05 B1			sta BLT.SRC_STEP_X
  3541
  3542 				; optimize OK (service.pas), line = 375
  3543
  3544 3B46 8D 0B B1			sta BLT.DST_STEP_X
  3545
  3546 				; optimize OK (service.pas), line = 377
  3547
  3548 3B49 8D 14 B1			sta BLT.BLT_CONTROL
  3549
  3550 				; optimize OK (service.pas), line = 379
  3551
  3552 3B4C A9 40			lda #$40
  3553 3B4E 8D 09 B1			sta BLT.DST_STEP_Y
  3554 3B51 A9 01			lda #$01
  3555 3B53 8D 0A B1			sta BLT.DST_STEP_Y+1
  3556
  3557 				; optimize OK (service.pas), line = 380
  3558
  3559 3B56 AD A6 9F			lda W
  3560 3B59 8D 03 B1			sta BLT.SRC_STEP_Y
  3561 3B5C AD A7 9F			lda W+1
  3562 3B5F 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3563
  3564 				; optimize OK (service.pas), line = 382
  3565
  3566 3B62 AC A8 9F			ldy H
  3567 3B65 88				dey
  3568 3B66 8C 0E B1			sty BLT.BLT_HEIGHT
  3569
  3570 				; optimize OK (service.pas), line = 384
  3571
  3572 3B69 AD A6 9F			lda W
  3573 3B6C 38 E9 01			sub #$01
  3574 3B6F 8D 0C B1			sta BLT.BLT_WIDTH
  3575 3B72 AD A7 9F			lda W+1
  3576 3B75 E9 00			sbc #$00
  3577 3B77 8D 0D B1			sta BLT.BLT_WIDTH+1
  3578
  3579 				; optimize OK (service.pas), line = 386
  3580
  3581 3B7A A9 FF			lda #$FF
  3582 3B7C 8D 0F B1			sta BLT.BLT_AND_MASK
  3583
  3584 				; -------------------  ASM Block 00000144  -------------------
  3585
  3586 3B7F				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3B7F A9 00		        lda     #$00
     3 3B81 A0 5F		        ldy     #FX_MEMS
     4 3B83 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3587 					
  3588 				; optimize OK (service.pas), line = 393
  3589
  3590 3B85 AD 22 9D			lda BLT
  3591 3B88 8D 60 9E			sta VBXE.RUNBCB.A
  3592 3B8B AD 23 9D			lda BLT+1
  3593 3B8E 8D 61 9E			sta VBXE.RUNBCB.A+1
  3594 3B91 20 31 38			jsr VBXE.RUNBCB
  3595
  3596 				; ------------------------------------------------------------
  3597
  3598 = 9F9E			SRC	= DATAORIGIN+$0209
  3599 = 9FA2			DST	= DATAORIGIN+$020D
  3600 = 9FA6			W	= DATAORIGIN+$0211
  3601 = 9FA8			H	= DATAORIGIN+$0213
  3602
  3603 = 9F9E			@VarData	= SRC
  3604 = 000B			@VarDataSize	= 11
  3605
  3606 3B94			@exit
  3607 					.ifdef @new
  3608 					lda <@VarData
  3609 					sta :ztmp
  3610 					lda >@VarData
  3611 					ldy #@VarDataSize-1
  3612 					jmp @FreeMem
  3613 					els
  3614 3B94 60				rts						; ret
  3615 					eif
  3616 				.endl
  3617
  3618 3B95			.local	BLITTMP						; PROCEDURE
  3619
  3620 				; optimize OK (service.pas), line = 405
  3621
  3622 3B95 AD A9 9F			lda DST
  3623 3B98 8D 65 9E			sta VBXE_RAM.POSITION
  3624 3B9B AD AA 9F			lda DST+1
  3625 3B9E 8D 66 9E			sta VBXE_RAM.POSITION+1
  3626 3BA1 AD AB 9F			lda DST+2
  3627 3BA4 8D 67 9E			sta VBXE_RAM.POSITION+2
  3628 3BA7 AD AC 9F			lda DST+3
  3629 3BAA 8D 68 9E			sta VBXE_RAM.POSITION+3
  3630
  3631 				; optimize OK (service.pas), line = 407
  3632
  3633 3BAD AD 7A 9D			lda TMP
  3634 3BB0 8D 1E 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3635 3BB3 AD 7B 9D			lda TMP+1
  3636 3BB6 8D 1F 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3637 3BB9 AD AD 9F			lda SIZE
  3638 3BBC 8D 20 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3639 3BBF A9 00			lda #$00
  3640 3BC1 8D 21 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3641 3BC4 AD 28 9D			lda VBXE_RAM
  3642 3BC7 AC 29 9D			ldy VBXE_RAM+1
  3643 3BCA 20 F4 34			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3644
  3645 				; ------------------------------------------------------------
  3646
  3647 = 9FA9			DST	= DATAORIGIN+$0214
  3648 = 9FAD			SIZE	= DATAORIGIN+$0218
  3649
  3650 = 9FA9			@VarData	= DST
  3651 = 0005			@VarDataSize	= 5
  3652
  3653 3BCD			@exit
  3654 					.ifdef @new
  3655 					lda <@VarData
  3656 					sta :ztmp
  3657 					lda >@VarData
  3658 					ldy #@VarDataSize-1
  3659 					jmp @FreeMem
  3660 					els
  3661 3BCD 60				rts						; ret
  3662 					eif
  3663 				.endl
  3664
  3665 3BCE			.local	BLITROW						; PROCEDURE
  3666
  3667 				; -------------------  ASM Block 00000145  -------------------
  3668
  3669 3BCE				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3BCE A9 80		        lda     #$80
     3 3BD0 A0 5F		        ldy     #FX_MEMS
     4 3BD2 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3670 					
  3671 				; optimize OK (service.pas), line = 423
  3672
  3673 3BD4 AD B0 9F			lda SRC+2
  3674 3BD7 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3675
  3676 				; optimize OK (service.pas), line = 424
  3677
  3678 3BDA AD AF 9F			lda SRC+1
  3679 3BDD 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3680
  3681 				; optimize OK (service.pas), line = 425
  3682
  3683 3BE0 AD AE 9F			lda SRC
  3684 3BE3 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3685
  3686 				; optimize OK (service.pas), line = 427
  3687
  3688 3BE6 AD B4 9F			lda DST+2
  3689 3BE9 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3690
  3691 				; optimize OK (service.pas), line = 428
  3692
  3693 3BEC AD B3 9F			lda DST+1
  3694 3BEF 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3695
  3696 				; optimize OK (service.pas), line = 429
  3697
  3698 3BF2 AD B2 9F			lda DST
  3699 3BF5 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3700
  3701 				; optimize OK (service.pas), line = 431
  3702
  3703 3BF8 A9 01			lda #$01
  3704 3BFA 8D 05 B1			sta BLT.SRC_STEP_X
  3705
  3706 				; optimize OK (service.pas), line = 432
  3707
  3708 3BFD 8D 0B B1			sta BLT.DST_STEP_X
  3709
  3710 				; optimize OK (service.pas), line = 434
  3711
  3712 3C00 A9 00			lda #$00
  3713 3C02 8D 03 B1			sta BLT.SRC_STEP_Y
  3714 3C05 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3715
  3716 				; optimize OK (service.pas), line = 435
  3717
  3718 3C08 8D 09 B1			sta BLT.DST_STEP_Y
  3719 3C0B 8D 0A B1			sta BLT.DST_STEP_Y+1
  3720
  3721 				; optimize OK (service.pas), line = 437
  3722
  3723 3C0E 8D 0E B1			sta BLT.BLT_HEIGHT
  3724
  3725 				; optimize OK (service.pas), line = 438
  3726
  3727 3C11 8D 14 B1			sta BLT.BLT_CONTROL
  3728
  3729 				; optimize OK (service.pas), line = 440
  3730
  3731 3C14 AD B6 9F			lda SIZE
  3732 3C17 38 E9 01			sub #$01
  3733 3C1A 8D 0C B1			sta BLT.BLT_WIDTH
  3734 3C1D AD B7 9F			lda SIZE+1
  3735 3C20 E9 00			sbc #$00
  3736 3C22 8D 0D B1			sta BLT.BLT_WIDTH+1
  3737
  3738 				; optimize OK (service.pas), line = 442
  3739
  3740 3C25 A9 FF			lda #$FF
  3741 3C27 8D 0F B1			sta BLT.BLT_AND_MASK
  3742
  3743 				; -------------------  ASM Block 00000146  -------------------
  3744
  3745 3C2A				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3C2A A9 00		        lda     #$00
     3 3C2C A0 5F		        ldy     #FX_MEMS
     4 3C2E 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3746 					
  3747 				; optimize OK (service.pas), line = 448
  3748
  3749 3C30 AD 22 9D			lda BLT
  3750 3C33 8D 60 9E			sta VBXE.RUNBCB.A
  3751 3C36 AD 23 9D			lda BLT+1
  3752 3C39 8D 61 9E			sta VBXE.RUNBCB.A+1
  3753 3C3C 20 31 38			jsr VBXE.RUNBCB
  3754
  3755 				; ------------------------------------------------------------
  3756
  3757 = 9FAE			SRC	= DATAORIGIN+$0219
  3758 = 9FB2			DST	= DATAORIGIN+$021D
  3759 = 9FB6			SIZE	= DATAORIGIN+$0221
  3760
  3761 = 9FAE			@VarData	= SRC
  3762 = 000A			@VarDataSize	= 10
  3763
  3764 3C3F			@exit
  3765 					.ifdef @new
  3766 					lda <@VarData
  3767 					sta :ztmp
  3768 					lda >@VarData
  3769 					ldy #@VarDataSize-1
  3770 					jmp @FreeMem
  3771 					els
  3772 3C3F 60				rts						; ret
  3773 					eif
  3774 				.endl
  3775
  3776 3C40			.local	PUTBYTE						; PROCEDURE
  3777
  3778 				; optimize OK (service.pas), line = 475
  3779
  3780 3C40 AD B8 9F			lda DST
  3781 3C43 8D 65 9E			sta VBXE_RAM.POSITION
  3782 3C46 AD B9 9F			lda DST+1
  3783 3C49 8D 66 9E			sta VBXE_RAM.POSITION+1
  3784 3C4C AD BA 9F			lda DST+2
  3785 3C4F 8D 67 9E			sta VBXE_RAM.POSITION+2
  3786 3C52 AD BB 9F			lda DST+3
  3787 3C55 8D 68 9E			sta VBXE_RAM.POSITION+3
  3788
  3789 				; optimize OK (service.pas), line = 476
  3790
  3791 3C58 AD BC 9F			lda V
  3792 3C5B 8D 40 9E			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3793 3C5E AD 28 9D			lda VBXE_RAM
  3794 3C61 AC 29 9D			ldy VBXE_RAM+1
  3795 3C64 20 2F 36			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3796
  3797 				; ------------------------------------------------------------
  3798
  3799 = 9FB8			DST	= DATAORIGIN+$0223
  3800 = 9FBC			V	= DATAORIGIN+$0227
  3801
  3802 = 9FB8			@VarData	= DST
  3803 = 0005			@VarDataSize	= 5
  3804
  3805 3C67			@exit
  3806 					.ifdef @new
  3807 					lda <@VarData
  3808 					sta :ztmp
  3809 					lda >@VarData
  3810 					ldy #@VarDataSize-1
  3811 					jmp @FreeMem
  3812 					els
  3813 3C67 60				rts						; ret
  3814 					eif
  3815 				.endl
  3816
  3817 3C68			.local	GETBYTE						; FUNCTION
  3818
  3819 				; optimize OK (service.pas), line = 486
  3820
  3821 3C68 AD BD 9F			lda SRC
  3822 3C6B 8D 65 9E			sta VBXE_RAM.POSITION
  3823 3C6E AD BE 9F			lda SRC+1
  3824 3C71 8D 66 9E			sta VBXE_RAM.POSITION+1
  3825 3C74 AD BF 9F			lda SRC+2
  3826 3C77 8D 67 9E			sta VBXE_RAM.POSITION+2
  3827 3C7A AD C0 9F			lda SRC+3
  3828 3C7D 8D 68 9E			sta VBXE_RAM.POSITION+3
  3829
  3830 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 487
  3831
  3832 3C80 AD 28 9D			lda VBXE_RAM
  3833 3C83 AC 29 9D			ldy VBXE_RAM+1
  3834 3C86 20 FC 35			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3835 3C89 AD 31 9E			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3836 3C8C 8D C1 9F			sta RESULT
  3837 3C8F			@exit
  3838
  3839 				; ------------------------------------------------------------
  3840
  3841 = 9FBD			SRC	= DATAORIGIN+$0228
  3842 = 9FC1			RESULT	= DATAORIGIN+$022C
  3843
  3844 = 9FBD			@VarData	= SRC
  3845 = 0004			@VarDataSize	= 4
  3846
  3847 3C8F 60				rts						; ret
  3848 				.endl
  3849
  3850 3C90			.local	NOSOUND						; PROCEDURE
  3851
  3852 3C90			@exit
  3853 					.ifdef @new
  3854 					lda <@VarData
  3855 					sta :ztmp
  3856 					lda >@VarData
  3857 					ldy #@VarDataSize-1
  3858 					jmp @FreeMem
  3859 					els
  3860 3C90 60				rts						; ret
  3861 					eif
  3862 				.endl
  3863
  3864 3C91			.local	MYDELAY						; PROCEDURE
  3865
  3866 				; ------------------------------------------------------------
  3867
  3868 = 9FC2			A	= DATAORIGIN+$022D
  3869
  3870 = 9FC2			@VarData	= A
  3871 = 0002			@VarDataSize	= 2
  3872
  3873 3C91			@exit
  3874 					.ifdef @new
  3875 					lda <@VarData
  3876 					sta :ztmp
  3877 					lda >@VarData
  3878 					ldy #@VarDataSize-1
  3879 					jmp @FreeMem
  3880 					els
  3881 3C91 60				rts						; ret
  3882 					eif
  3883 				.endl
  3884
  3885 3C92			.local	MAX						; FUNCTION
  3886
  3887 				; optimize OK (service.pas), line = 613
  3888
  3889 3C92 AD C6 9F			lda B
  3890 3C95 CD C4 9F			cmp A
  3891 3C98 AD C7 9F			lda B+1
  3892 3C9B ED C5 9F			sbc A+1
  3893 3C9E 50 02			svc
  3894 3CA0 49 80			eor #$80
  3895 3CA2 10 0C			jpl l_06AB
  3896 3CA4 AD C4 9F			lda A
  3897 3CA7 8D C8 9F			sta RESULT
  3898 3CAA AD C5 9F			lda A+1
  3899 3CAD 4C B9 3C			jmp l_06BA
  3900 3CB0			l_06AB
  3901
  3902 				; optimize OK (service.pas), line = 614
  3903
  3904 3CB0 AD C6 9F			lda B
  3905 3CB3 8D C8 9F			sta RESULT
  3906 3CB6 AD C7 9F			lda B+1
  3907 3CB9			l_06BA
  3908 3CB9 8D C9 9F			sta RESULT+1
  3909 3CBC			@exit
  3910
  3911 				; ------------------------------------------------------------
  3912
  3913 = 9FC4			A	= DATAORIGIN+$022F
  3914 = 9FC6			B	= DATAORIGIN+$0231
  3915 = 9FC8			RESULT	= DATAORIGIN+$0233
  3916
  3917 = 9FC4			@VarData	= A
  3918 = 0004			@VarDataSize	= 4
  3919
  3920 3CBC 60				rts						; ret
  3921 				.endl
  3922
  3923 3CBD			.local	MIN						; FUNCTION
  3924
  3925 				; optimize OK (service.pas), line = 620
  3926
  3927 3CBD AD CA 9F			lda A
  3928 3CC0 CD CC 9F			cmp B
  3929 3CC3 AD CB 9F			lda A+1
  3930 3CC6 ED CD 9F			sbc B+1
  3931 3CC9 50 02			svc
  3932 3CCB 49 80			eor #$80
  3933 3CCD 10 0C			jpl l_06D5
  3934 3CCF AD CA 9F			lda A
  3935 3CD2 8D CE 9F			sta RESULT
  3936 3CD5 AD CB 9F			lda A+1
  3937 3CD8 4C E4 3C			jmp l_06E4
  3938 3CDB			l_06D5
  3939
  3940 				; optimize OK (service.pas), line = 621
  3941
  3942 3CDB AD CC 9F			lda B
  3943 3CDE 8D CE 9F			sta RESULT
  3944 3CE1 AD CD 9F			lda B+1
  3945 3CE4			l_06E4
  3946 3CE4 8D CF 9F			sta RESULT+1
  3947 3CE7			@exit
  3948
  3949 				; ------------------------------------------------------------
  3950
  3951 = 9FCA			A	= DATAORIGIN+$0235
  3952 = 9FCC			B	= DATAORIGIN+$0237
  3953 = 9FCE			RESULT	= DATAORIGIN+$0239
  3954
  3955 = 9FCA			@VarData	= A
  3956 = 0004			@VarDataSize	= 4
  3957
  3958 3CE7 60				rts						; ret
  3959 				.endl
  3960
  3961 3CE8			.local	FATAL_ERROR					; PROCEDURE
  3962 3CE8 8D D0 9F			sta ERR_TYPE
  3963
  3964 				; optimize OK (service.pas), line = 630
  3965
  3966 3CEB 8D 46 9F			sta STATUS
  3967
  3968 				; -------------------  ASM Block 00000147  -------------------
  3969
  3970 3CEE 8D 00 01		      sta $100
  3971 				      
  3972 3CF1 AD 0A D2		      kk: lda $d20a
  3973 3CF4 8D 1A D0		      sta $d01a
  3974 3CF7 4C F1 3C		      jmp kk
  3975 				    
  3976 				    
  3977 				; ------------------------------------------------------------
  3978
  3979 = 9FD0			ERR_TYPE	= DATAORIGIN+$023B
  3980
  3981 = 9FD0			@VarData	= ERR_TYPE
  3982 = 0001			@VarDataSize	= 1
  3983
  3984 3CFA			@exit
  3985 					.ifdef @new
  3986 					lda <@VarData
  3987 					sta :ztmp
  3988 					lda >@VarData
  3989 					ldy #@VarDataSize-1
  3990 					jmp @FreeMem
  3991 					els
  3992 3CFA 60				rts						; ret
  3993 					eif
  3994 				.endl
  3995
  3996 3CFB			.local	INITROWARRAY					; PROCEDURE
  3997
  3998 				; optimize OK (service.pas), line = 678
  3999
  4000 3CFB A9 00			lda #$00
  4001 3CFD 8D 88 9F			sta HLP
  4002 3D00 8D 89 9F			sta HLP+1
  4003
  4004 				; optimize OK (service.pas), line = 680
  4005
  4006 3D03 8D D1 9F			sta Y
  4007
  4008 3D06			l_0704
  4009 				; --- ForToDoCondition
  4010 3D06 AC D1 9F			ldy Y
  4011 3D09 C0 C8			cpy #$C8
  4012 3D0B 90 0A			jcc l_0724
  4013
  4014 				; optimize OK (service.pas), line = 683
  4015
  4016 3D0D A9 00			lda #$00
  4017 3D0F 99 00 C0			sta adr.ROW,y
  4018 3D12 A9 FA			lda #$FA
  4019 3D14 4C 23 3D			jmp l_0735
  4020 3D17			l_0724
  4021
  4022 				; optimize OK (service.pas), line = 685
  4023
  4024 3D17 AC D1 9F			ldy Y
  4025 3D1A AD 88 9F			lda HLP
  4026 3D1D 99 00 C0			sta adr.ROW,y
  4027 3D20 AD 89 9F			lda HLP+1
  4028 3D23			l_0735
  4029 3D23 99 00 C1			sta adr.ROW+256,y
  4030
  4031 				; optimize OK (service.pas), line = 687
  4032
  4033 3D26 AD 88 9F			lda HLP
  4034 3D29 18 69 40			add #$40
  4035 3D2C 8D 88 9F			sta HLP
  4036 3D2F AD 89 9F			lda HLP+1
  4037 3D32 69 01			adc #$01
  4038 3D34 8D 89 9F			sta HLP+1
  4039
  4040 				; --- ForToDoEpilog
  4041 3D37 EE D1 9F			inc Y
  4042 3D3A D0 CA			jne l_0704
  4043 3D3C			l_0712
  4044
  4045 				; ------------------------------------------------------------
  4046
  4047 = 9FD1			Y	= DATAORIGIN+$023C
  4048
  4049 = 9FD1			@VarData	= Y
  4050 = 0001			@VarDataSize	= 1
  4051
  4052 3D3C			@exit
  4053 					.ifdef @new
  4054 					lda <@VarData
  4055 					sta :ztmp
  4056 					lda >@VarData
  4057 					ldy #@VarDataSize-1
  4058 					jmp @FreeMem
  4059 					els
  4060 3D3C 60				rts						; ret
  4061 					eif
  4062 				.endl
  4063
  4064 3D3D			.local	INITSVGA					; PROCEDURE
  4065
  4066 				; optimize OK (service.pas), line = 703
  4067
  4068 3D3D AD D2 9D			lda GRAPH.GRAPHRESULT
  4069 3D40 C9 01			cmp #$01
  4070 3D42 F0 0F			jeq l_0759
  4071
  4072 				; optimize FAIL ('@print', service.pas), line = 704
  4073
  4074 					@printSTRING #CODEORIGIN+$0000
  4074 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4074 3D44 A0 20		 LDY> CODEORIGIN+$0000
  4074 3D46 A9 00		 LDA< CODEORIGIN+$0000
  4074 3D48 20 00 28		 JSR @PRINTSTRING
  4075 3D4B 20 EA 27			@printEOL
  4076 3D4E A9 00			lda #$00
  4077 3D50 4C 19 9D			jmp @halt
  4078 3D53			l_0759
  4079
  4080 				; optimize OK (service.pas), line = 708
  4081
  4082 3D53 A9 1F			lda #$1F
  4083 3D55 20 1D 38			jsr VBXE.SETHORIZONTALRES.@010180000
  4084
  4085 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 709
  4086
  4087 3D58 20 75 37			jsr VBXE.COLORMAPOFF
  4088
  4089 				; optimize OK (service.pas), line = 711
  4090
  4091 3D5B A9 07			lda #$07
  4092 3D5D 20 4E 38			jsr VBXE.VBXECONTROL
  4093
  4094 				; optimize OK (service.pas), line = 713
  4095
  4096 3D60 A9 14			lda #$14
  4097 3D62 20 D7 33			jsr VBXE.SETTOPBORDER
  4098
  4099 				; optimize OK (service.pas), line = 714
  4100
  4101 3D65 A9 C8			lda #$C8
  4102 3D67 20 F0 33			jsr VBXE.SETXDLHEIGHT
  4103
  4104 				; optimize OK (service.pas), line = 716
  4105
  4106 3D6A A9 00			lda #$00
  4107 3D6C 8D 65 9E			sta VBXE_RAM.POSITION
  4108 3D6F A9 50			lda #$50
  4109 3D71 8D 66 9E			sta VBXE_RAM.POSITION+1
  4110 3D74 A9 00			lda #$00
  4111 3D76 8D 67 9E			sta VBXE_RAM.POSITION+2
  4112 3D79 8D 68 9E			sta VBXE_RAM.POSITION+3
  4113
  4114 				; optimize OK (service.pas), line = 717
  4115
  4116 3D7C 8D 69 9E			sta VBXE_RAM.SIZE
  4117 3D7F A9 FA			lda #$FA
  4118 3D81 8D 6A 9E			sta VBXE_RAM.SIZE+1
  4119 3D84 A9 00			lda #$00
  4120 3D86 8D 6B 9E			sta VBXE_RAM.SIZE+2
  4121 3D89 8D 6C 9E			sta VBXE_RAM.SIZE+3
  4122
  4123 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 718
  4124
  4125 3D8C AD 28 9D			lda VBXE_RAM
  4126 3D8F AC 29 9D			ldy VBXE_RAM+1
  4127 3D92 20 62 36			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4128
  4129 				; optimize OK (service.pas), line = 720
  4130
  4131 3D95 A9 00			lda #$00
  4132 3D97 8D 00 D4			sta ATARI.DMACTL
  4133
  4134 				; -------------------  ASM Block 00000148  -------------------
  4135
  4136 3D9A				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3D9A A9 80		        lda     #$80
     3 3D9C A0 5F		        ldy     #FX_MEMS
     4 3D9E 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4137 					
  4138 				; optimize OK (service.pas), line = 726
  4139
  4140 3DA0 AD 22 9D			lda BLT
  4141 3DA3 85 84			sta :bp2
  4142 3DA5 AD 23 9D			lda BLT+1
  4143 3DA8 85 85			sta :bp2+1
  4144 3DAA A9 00			lda #$00
  4145 3DAC A0 14			ldy #$14
  4146 3DAE 91 84 88 10 FB		sta:rpl (:bp2),y-
  4147
  4148 				; -------------------  ASM Block 00000149  -------------------
  4149
  4150 3DB3				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3DB3 A9 00		        lda     #$00
     3 3DB5 A0 5F		        ldy     #FX_MEMS
     4 3DB7 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4151 					
  4152 3DB9			@exit
  4153 					.ifdef @new
  4154 					lda <@VarData
  4155 					sta :ztmp
  4156 					lda >@VarData
  4157 					ldy #@VarDataSize-1
  4158 					jmp @FreeMem
  4159 					els
  4160 3DB9 60				rts						; ret
  4161 					eif
  4162 				.endl
  4163
  4164 3DBA			.local	SHINE_BLOCK					; PROCEDURE
  4165
  4166 				; optimize OK (service.pas), line = 770
  4167
  4168 3DBA AD 66 9F			lda SHINEREC.XB
  4169 3DBD 8D D2 9F			sta XB
  4170 3DC0 A9 00			lda #$00
  4171 3DC2 8D D3 9F			sta XB+1
  4172
  4173 				; optimize OK (service.pas), line = 771
  4174
  4175 3DC5 AD 67 9F			lda SHINEREC.YB
  4176 3DC8 8D D4 9F			sta YB
  4177 3DCB A9 00			lda #$00
  4178 3DCD 8D D5 9F			sta YB+1
  4179
  4180 				; optimize OK (service.pas), line = 773
  4181
  4182 3DD0 AD D4 9F			lda YB
  4183 3DD3 0A				asl @
  4184 3DD4 0A				asl @
  4185 3DD5 0A				asl @
  4186 3DD6 0A				asl @
  4187 3DD7 18 6D D2 9F			add XB
  4188 3DDB 8D E1 9F			sta I
  4189
  4190 				; optimize OK (service.pas), line = 775
  4191
  4192 3DDE A8				tay
  4193 3DDF B9 00 DB			lda adr.WALL,y
  4194 3DE2 C9 09			cmp #$09
  4195 3DE4 B0 03 4C 37 3F		jcc l_07AC
  4196
  4197 				; optimize OK (service.pas), line = 777
  4198
  4199 3DE9 AD 68 9F			lda SHINEREC.FRAME
  4200 3DEC 4A				lsr @
  4201 3DED 8D D6 9F			sta FRAME
  4202 3DF0 A9 00			lda #$00
  4203 3DF2 8D D7 9F			sta FRAME+1
  4204
  4205 				; optimize OK (service.pas), line = 778
  4206
  4207 3DF5 B9 00 DB			lda adr.WALL,y
  4208 3DF8 C9 0A			cmp #$0A
  4209 3DFA F0 0E			jeq l_07CC
  4210 3DFC AD D6 9F			lda FRAME
  4211 3DFF 18 69 05			add #$05
  4212 3E02 8D D6 9F			sta FRAME
  4213 3E05 90 03			scc
  4214 3E07 EE D7 9F			inc FRAME+1
  4215 3E0A			l_07CC
  4216
  4217 				; optimize OK (service.pas), line = 780
  4218
  4219 3E0A AD D2 9F			lda XB
  4220 3E0D 85 A0			sta :STACKORIGIN+10
  4221 3E0F AD D3 9F			lda XB+1
  4222 3E12 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4223 3E14 06 A0			asl :STACKORIGIN+10
  4224 3E16 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4225 3E18 06 A0			asl :STACKORIGIN+10
  4226 3E1A 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4227 3E1C 06 A0			asl :STACKORIGIN+10
  4228 3E1E 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4229 3E20 06 A0			asl :STACKORIGIN+10
  4230 3E22 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4231 3E24 A9 09			lda #$09
  4232 3E26 18 65 A0			add :STACKORIGIN+10
  4233 3E29 8D D8 9F			sta XF
  4234 3E2C A9 00			lda #$00
  4235 3E2E 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4236 3E30 8D D9 9F			sta XF+1
  4237
  4238 				; optimize OK (service.pas), line = 781
  4239
  4240 3E33 AD D4 9F			lda YB
  4241 3E36 85 A0			sta :STACKORIGIN+10
  4242 3E38 AD D5 9F			lda YB+1
  4243 3E3B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4244 3E3D 06 A0			asl :STACKORIGIN+10
  4245 3E3F 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4246 3E41 06 A0			asl :STACKORIGIN+10
  4247 3E43 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4248 3E45 06 A0			asl :STACKORIGIN+10
  4249 3E47 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4250 3E49 A9 16			lda #$16
  4251 3E4B 18 65 A0			add :STACKORIGIN+10
  4252 3E4E 8D DA 9F			sta YF
  4253 3E51 A9 00			lda #$00
  4254 3E53 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4255 3E55 8D DB 9F			sta YF+1
  4256
  4257 				; optimize OK (service.pas), line = 782
  4258
  4259 3E58 AD D6 9F			lda FRAME
  4260 3E5B 85 9F			sta :STACKORIGIN+9
  4261 3E5D AD D7 9F			lda FRAME+1
  4262 3E60 06 9F			asl :STACKORIGIN+9
  4263 3E62 2A				rol @
  4264 3E63 06 9F			asl :STACKORIGIN+9
  4265 3E65 2A				rol @
  4266 3E66 06 9F			asl :STACKORIGIN+9
  4267 3E68 2A				rol @
  4268 3E69 06 9F			asl :STACKORIGIN+9
  4269 3E6B 2A				rol @
  4270 3E6C 06 9F			asl :STACKORIGIN+9
  4271 3E6E 2A				rol @
  4272 3E6F 06 9F			asl :STACKORIGIN+9
  4273 3E71 2A				rol @
  4274 3E72 06 9F			asl :STACKORIGIN+9
  4275 3E74 2A				rol @
  4276 3E75 8D DD 9F			sta FR+1
  4277 3E78 A5 9F			lda :STACKORIGIN+9
  4278 3E7A 8D DC 9F			sta FR
  4279
  4280 				; optimize OK (service.pas), line = 784
  4281
  4282 3E7D A9 00			lda #$00
  4283 3E7F 8D E0 9F			sta Y
  4284
  4285 3E82			l_07FC
  4286 				; --- ForToDoCondition
  4287 3E82 AD E0 9F			lda Y
  4288 3E85 C9 08			cmp #$08
  4289 3E87 90 03 4C 37 3F		jcs l_080A
  4290
  4291 				; optimize OK (service.pas), line = 786
  4292
  4293 3E8C 85 9F			sta :STACKORIGIN+9
  4294 3E8E A9 00			lda #$00
  4295 3E90 06 9F			asl :STACKORIGIN+9
  4296 3E92 2A				rol @
  4297 3E93 06 9F			asl :STACKORIGIN+9
  4298 3E95 2A				rol @
  4299 3E96 06 9F			asl :STACKORIGIN+9
  4300 3E98 2A				rol @
  4301 3E99 06 9F			asl :STACKORIGIN+9
  4302 3E9B 2A				rol @
  4303 3E9C 8D DF 9F			sta OG+1
  4304 3E9F A5 9F			lda :STACKORIGIN+9
  4305 3EA1 8D DE 9F			sta OG
  4306
  4307 				; optimize OK (service.pas), line = 789
  4308
  4309 3EA4 AD D8 9F			lda XF
  4310 3EA7 85 A0			sta :STACKORIGIN+10
  4311 3EA9 A9 50			lda #$50
  4312 3EAB 18 6D D9 9F			add XF+1
  4313 3EAF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4314 3EB1 A9 00			lda #$00
  4315 3EB3 69 00			adc #$00
  4316 3EB5 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4317 3EB7 A9 00			lda #$00
  4318 3EB9 69 00			adc #$00
  4319 3EBB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4320 3EBD AD DA 9F			lda YF
  4321 3EC0 18 6D E0 9F			add Y
  4322 3EC4 A8				tay
  4323 3EC5 A5 A0			lda :STACKORIGIN+10
  4324 3EC7 18 79 00 C0			add adr.ROW,y
  4325 3ECB 8D B2 9F			sta BLITROW.DST
  4326 3ECE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4327 3ED0 79 00 C1			adc adr.ROW+256,y
  4328 3ED3 8D B3 9F			sta BLITROW.DST+1
  4329 3ED6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4330 3ED8 69 00			adc #$00
  4331 3EDA 8D B4 9F			sta BLITROW.DST+2
  4332 3EDD A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4333 3EDF 69 00			adc #$00
  4334 3EE1 8D B5 9F			sta BLITROW.DST+3
  4335 3EE4 AD DD 9E			lda SHINEWALL.OFS
  4336 3EE7 18 6D DC 9F			add FR
  4337 3EEB 85 A1			sta :STACKORIGIN+11
  4338 3EED AD DE 9E			lda SHINEWALL.OFS+1
  4339 3EF0 6D DD 9F			adc FR+1
  4340 3EF3 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4341 3EF5 AD DF 9E			lda SHINEWALL.OFS+2
  4342 3EF8 69 00			adc #$00
  4343 3EFA 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4344 3EFC AD E0 9E			lda SHINEWALL.OFS+3
  4345 3EFF 69 00			adc #$00
  4346 3F01 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4347 3F03 A5 A1			lda :STACKORIGIN+11
  4348 3F05 18 6D DE 9F			add OG
  4349 3F09 8D AE 9F			sta BLITROW.SRC
  4350 3F0C A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4351 3F0E 6D DF 9F			adc OG+1
  4352 3F11 8D AF 9F			sta BLITROW.SRC+1
  4353 3F14 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4354 3F16 69 00			adc #$00
  4355 3F18 8D B0 9F			sta BLITROW.SRC+2
  4356 3F1B A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4357 3F1D 69 00			adc #$00
  4358 3F1F 8D B1 9F			sta BLITROW.SRC+3
  4359 3F22 A9 10			lda #$10
  4360 3F24 8D B6 9F			sta BLITROW.SIZE
  4361 3F27 A9 00			lda #$00
  4362 3F29 8D B7 9F			sta BLITROW.SIZE+1
  4363 3F2C 20 CE 3B			jsr BLITROW
  4364
  4365 				; --- ForToDoEpilog
  4366 3F2F EE E0 9F			inc Y
  4367 3F32 F0 03 4C 82 3E		jne l_07FC
  4368 3F37			l_080A
  4369 3F37			l_07AC
  4370
  4371 				; optimize FAIL (0, service.pas), line = 793
  4372
  4373 3F37 EE 68 9F			inc SHINEREC.FRAME
  4374
  4375 				; optimize OK (service.pas), line = 794
  4376
  4377 3F3A AD 68 9F			lda SHINEREC.FRAME
  4378 3F3D C9 0A			cmp #$0A
  4379 3F3F D0 05			jne l_0851
  4380 3F41 A9 00			lda #$00
  4381 3F43 8D 6A 9F			sta SHINEREC.ACTIVE
  4382 3F46			l_0851
  4383
  4384 				; ------------------------------------------------------------
  4385
  4386 = 9FD2			XB	= DATAORIGIN+$023D
  4387 = 9FD4			YB	= DATAORIGIN+$023F
  4388 = 9FD6			FRAME	= DATAORIGIN+$0241
  4389 = 9FD8			XF	= DATAORIGIN+$0243
  4390 = 9FDA			YF	= DATAORIGIN+$0245
  4391 = 9FDC			FR	= DATAORIGIN+$0247
  4392 = 9FDE			OG	= DATAORIGIN+$0249
  4393 = 9FE0			Y	= DATAORIGIN+$024B
  4394 = 9FE1			I	= DATAORIGIN+$024C
  4395
  4396 = 9FD2			@VarData	= XB
  4397 = 0010			@VarDataSize	= 16
  4398
  4399 3F46			@exit
  4400 					.ifdef @new
  4401 					lda <@VarData
  4402 					sta :ztmp
  4403 					lda >@VarData
  4404 					ldy #@VarDataSize-1
  4405 					jmp @FreeMem
  4406 					els
  4407 3F46 60				rts						; ret
  4408 					eif
  4409 				.endl
  4410
  4411 3F47			.local	UNSHINE_BLOCK					; PROCEDURE
  4412
  4413 				; optimize OK (service.pas), line = 803
  4414
  4415 3F47 A9 09			lda #$09
  4416 3F49 8D 68 9F			sta SHINEREC.FRAME
  4417
  4418 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 804
  4419
  4420 3F4C 20 BA 3D			jsr SHINE_BLOCK
  4421
  4422 3F4F			@exit
  4423 					.ifdef @new
  4424 					lda <@VarData
  4425 					sta :ztmp
  4426 					lda >@VarData
  4427 					ldy #@VarDataSize-1
  4428 					jmp @FreeMem
  4429 					els
  4430 3F4F 60				rts						; ret
  4431 					eif
  4432 				.endl
  4433
  4434 3F50			.local	SHINE						; PROCEDURE
  4435
  4436 				; optimize OK (service.pas), line = 811
  4437
  4438 3F50 AD 6A 9F			lda SHINEREC.ACTIVE
  4439 3F53 F0 03			jeq l_0871
  4440 3F55 20 47 3F			jsr UNSHINE_BLOCK
  4441 3F58			l_0871
  4442
  4443 				; optimize OK (service.pas), line = 813
  4444
  4445 3F58 AD E2 9F			lda XB
  4446 3F5B 8D 66 9F			sta SHINEREC.XB
  4447
  4448 				; optimize OK (service.pas), line = 814
  4449
  4450 3F5E AD E3 9F			lda YB
  4451 3F61 8D 67 9F			sta SHINEREC.YB
  4452
  4453 				; optimize OK (service.pas), line = 815
  4454
  4455 3F64 A9 00			lda #$00
  4456 3F66 8D 68 9F			sta SHINEREC.FRAME
  4457
  4458 				; optimize OK (service.pas), line = 816
  4459
  4460 3F69 A9 01			lda #$01
  4461 3F6B 8D 6A 9F			sta SHINEREC.ACTIVE
  4462
  4463 				; optimize OK (service.pas), line = 817
  4464
  4465 3F6E AD E3 9F			lda YB
  4466 3F71 0A				asl @
  4467 3F72 0A				asl @
  4468 3F73 0A				asl @
  4469 3F74 0A				asl @
  4470 3F75 18 6D E2 9F			add XB
  4471 3F79 A8				tay
  4472 3F7A B9 00 DB			lda adr.WALL,y
  4473 3F7D 8D 69 9F			sta SHINEREC.BLOCK
  4474
  4475 				; ------------------------------------------------------------
  4476
  4477 = 9FE2			XB	= DATAORIGIN+$024D
  4478 = 9FE3			YB	= DATAORIGIN+$024E
  4479
  4480 = 9FE2			@VarData	= XB
  4481 = 0002			@VarDataSize	= 2
  4482
  4483 3F80			@exit
  4484 					.ifdef @new
  4485 					lda <@VarData
  4486 					sta :ztmp
  4487 					lda >@VarData
  4488 					ldy #@VarDataSize-1
  4489 					jmp @FreeMem
  4490 					els
  4491 3F80 60				rts						; ret
  4492 					eif
  4493 				.endl
  4494
  4495 3F81			.local	CHECKSHINE					; PROCEDURE
  4496
  4497 				; optimize OK (service.pas), line = 823
  4498
  4499 3F81 AD 6A 9F			lda SHINEREC.ACTIVE
  4500 3F84 C9 01			cmp #$01
  4501 3F86 D0 03			jne l_08B2
  4502 3F88 20 BA 3D			jsr SHINE_BLOCK
  4503 3F8B			l_08B2
  4504
  4505 3F8B			@exit
  4506 					.ifdef @new
  4507 					lda <@VarData
  4508 					sta :ztmp
  4509 					lda >@VarData
  4510 					ldy #@VarDataSize-1
  4511 					jmp @FreeMem
  4512 					els
  4513 3F8B 60				rts						; ret
  4514 					eif
  4515 				.endl
  4516
  4517 3F8C			.local	RANDOM_LETTER_DROP				; FUNCTION
  4518
  4519 				; --- RepeatUntilProlog
  4520 3F8C			l_08BB
  4521
  4522 				; optimize OK (service.pas), line = 831
  4523
  4524 3F8C A9 64			lda #$64
  4525 3F8E 20 41 33			jsr SYSTEM.RANDOM.@010180000
  4526 3F91 AD CC 9D			lda SYSTEM.RANDOM.@010180000.RESULT
  4527 3F94 8D E6 9F			sta RN
  4528 3F97 A9 00			lda #$00
  4529 3F99 8D E7 9F			sta RN+1
  4530
  4531 				; optimize OK (service.pas), line = 832
  4532
  4533 3F9C A9 00			lda #$00
  4534 3F9E 8D E8 9F			sta SUM
  4535 3FA1 8D E9 9F			sta SUM+1
  4536
  4537 				; optimize OK (service.pas), line = 833
  4538
  4539 3FA4 8D EA 9F			sta LETTER
  4540 3FA7 8D EB 9F			sta LETTER+1
  4541
  4542 				; --- RepeatUntilProlog
  4543 3FAA			l_08C9
  4544
  4545 				; optimize FAIL (0, service.pas), line = 838
  4546
  4547 3FAA EE EA 9F			inc LETTER
  4548 3FAD D0 03			sne
  4549 3FAF EE EB 9F			inc LETTER+1
  4550
  4551 				; optimize OK (service.pas), line = 839
  4552
  4553 3FB2 AC EA 9F			ldy LETTER
  4554 3FB5 B9 DD 20			lda adr.LETTER_DIS,y
  4555 3FB8 18 6D E8 9F			add SUM
  4556 3FBC 8D E8 9F			sta SUM
  4557 3FBF AD E9 9F			lda SUM+1
  4558 3FC2 69 00			adc #$00
  4559 3FC4 8D E9 9F			sta SUM+1
  4560
  4561 				; optimize OK (service.pas), line = 842
  4562
  4563 3FC7 AD E7 9F			lda RN+1
  4564 3FCA CD E9 9F			cmp SUM+1
  4565 3FCD D0 06			bne @+
  4566 3FCF AD E6 9F			lda RN
  4567 3FD2 CD E8 9F			cmp SUM
  4568 				@
  4569 3FD5 B0 D3			jcs l_08C9
  4570
  4571 				; optimize OK (service.pas), line = 846
  4572
  4573 3FD7 AD EA 9F			lda LETTER
  4574 3FDA 38 E9 01			sub #$01
  4575 3FDD 85 9F			sta :STACKORIGIN+9
  4576 3FDF AD EB 9F			lda LETTER+1
  4577 3FE2 E9 00			sbc #$00
  4578 3FE4 CD 7E 9F			cmp LETT.LAST+1
  4579 3FE7 D0 05			bne @+
  4580 3FE9 A5 9F			lda :STACKORIGIN+9
  4581 3FEB CD 7D 9F			cmp LETT.LAST
  4582 				@
  4583 3FEE F0 9C			jeq l_08BB
  4584
  4585 				; optimize OK (service.pas), line = 848
  4586
  4587 3FF0 AD EA 9F			lda LETTER
  4588 3FF3 38 E9 01			sub #$01
  4589 3FF6 8D E4 9F			sta RESULT
  4590 3FF9 AD EB 9F			lda LETTER+1
  4591 3FFC E9 00			sbc #$00
  4592 3FFE 8D E5 9F			sta RESULT+1
  4593 4001			@exit
  4594
  4595 				; ------------------------------------------------------------
  4596
  4597 = 9FE4			RESULT	= DATAORIGIN+$024F
  4598 = 9FE6			RN	= DATAORIGIN+$0251
  4599 = 9FE8			SUM	= DATAORIGIN+$0253
  4600 = 9FEA			LETTER	= DATAORIGIN+$0255
  4601
  4602 = 9FE6			@VarData	= RN
  4603 = 0006			@VarDataSize	= 6
  4604
  4605 4001 60				rts						; ret
  4606 				.endl
  4607
  4608 4002			.local	PUT_LETTER					; PROCEDURE
  4609
  4610 				; optimize OK (service.pas), line = 857
  4611
  4612 4002 A9 00			lda #$00
  4613 4004 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4614 4006 AD 71 9F			lda LETT.TYP+1
  4615 4009 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4616 400B AD 70 9F			lda LETT.TYP
  4617 400E 0A				asl @
  4618 400F 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4619 4011 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4620 4013 0A				asl @
  4621 4014 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4622 4016 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4623 4018 85 9F			sta :STACKORIGIN+9
  4624 401A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4625 401C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4626 401E A5 9F			lda :STACKORIGIN+9
  4627 4020 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4628 4022 AD 72 9F			lda LETT.FRAME
  4629 4025 85 A0			sta :STACKORIGIN+10
  4630 4027 A9 00			lda #$00
  4631 4029 06 A0			asl :STACKORIGIN+10
  4632 402B 2A				rol @
  4633 402C 06 A0			asl :STACKORIGIN+10
  4634 402E 2A				rol @
  4635 402F 06 A0			asl :STACKORIGIN+10
  4636 4031 2A				rol @
  4637 4032 06 A0			asl :STACKORIGIN+10
  4638 4034 2A				rol @
  4639 4035 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4640 4038 8D ED 9F			sta FL+1
  4641 403B A5 A0			lda :STACKORIGIN+10
  4642 403D 8D EC 9F			sta FL
  4643
  4644 				; optimize OK (service.pas), line = 859
  4645
  4646 4040 A9 00			lda #$00
  4647 4042 8D F0 9F			sta YL
  4648
  4649 4045			l_0919
  4650 				; --- ForToDoCondition
  4651 4045 AD F0 9F			lda YL
  4652 4048 C9 08			cmp #$08
  4653 404A 90 03 4C F0 40		jcs l_0927
  4654
  4655 				; optimize OK (service.pas), line = 861
  4656
  4657 404F 85 9F			sta :STACKORIGIN+9
  4658 4051 A9 00			lda #$00
  4659 4053 06 9F			asl :STACKORIGIN+9
  4660 4055 2A				rol @
  4661 4056 06 9F			asl :STACKORIGIN+9
  4662 4058 2A				rol @
  4663 4059 06 9F			asl :STACKORIGIN+9
  4664 405B 2A				rol @
  4665 405C 06 9F			asl :STACKORIGIN+9
  4666 405E 2A				rol @
  4667 405F 06 9F			asl :STACKORIGIN+9
  4668 4061 2A				rol @
  4669 4062 06 9F			asl :STACKORIGIN+9
  4670 4064 2A				rol @
  4671 4065 06 9F			asl :STACKORIGIN+9
  4672 4067 2A				rol @
  4673 4068 8D EF 9F			sta FW+1
  4674 406B A5 9F			lda :STACKORIGIN+9
  4675 406D 8D EE 9F			sta FW
  4676
  4677 				; optimize OK (service.pas), line = 863
  4678
  4679 4070 AD 6F 9F			lda LETT.Y
  4680 4073 18 6D F0 9F			add YL
  4681 4077 A8				tay
  4682 4078 AD 6E 9F			lda LETT.X
  4683 407B 18 79 00 C0			add adr.ROW,y
  4684 407F 8D A2 9F			sta BLITZERO.DST
  4685 4082 A9 50			lda #$50
  4686 4084 79 00 C1			adc adr.ROW+256,y
  4687 4087 8D A3 9F			sta BLITZERO.DST+1
  4688 408A A9 00			lda #$00
  4689 408C 69 00			adc #$00
  4690 408E 8D A4 9F			sta BLITZERO.DST+2
  4691 4091 A9 00			lda #$00
  4692 4093 69 00			adc #$00
  4693 4095 8D A5 9F			sta BLITZERO.DST+3
  4694 4098 AD F5 9E			lda LETTERS.OFS
  4695 409B 18 6D EE 9F			add FW
  4696 409F 85 A2			sta :STACKORIGIN+12
  4697 40A1 AD F6 9E			lda LETTERS.OFS+1
  4698 40A4 6D EF 9F			adc FW+1
  4699 40A7 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  4700 40A9 AD F7 9E			lda LETTERS.OFS+2
  4701 40AC 69 00			adc #$00
  4702 40AE 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
  4703 40B0 AD F8 9E			lda LETTERS.OFS+3
  4704 40B3 69 00			adc #$00
  4705 40B5 85 D2			sta :STACKORIGIN+STACKWIDTH*3+12
  4706 40B7 A5 A2			lda :STACKORIGIN+12
  4707 40B9 18 6D EC 9F			add FL
  4708 40BD 8D 9E 9F			sta BLITZERO.SRC
  4709 40C0 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  4710 40C2 6D ED 9F			adc FL+1
  4711 40C5 8D 9F 9F			sta BLITZERO.SRC+1
  4712 40C8 A5 C2			lda :STACKORIGIN+STACKWIDTH*2+12
  4713 40CA 69 00			adc #$00
  4714 40CC 8D A0 9F			sta BLITZERO.SRC+2
  4715 40CF A5 D2			lda :STACKORIGIN+STACKWIDTH*3+12
  4716 40D1 69 00			adc #$00
  4717 40D3 8D A1 9F			sta BLITZERO.SRC+3
  4718 40D6 A9 10			lda #$10
  4719 40D8 8D A6 9F			sta BLITZERO.W
  4720 40DB A9 00			lda #$00
  4721 40DD 8D A7 9F			sta BLITZERO.W+1
  4722 40E0 A9 01			lda #$01
  4723 40E2 8D A8 9F			sta BLITZERO.H
  4724 40E5 20 17 3B			jsr BLITZERO
  4725
  4726 				; --- ForToDoEpilog
  4727 40E8 EE F0 9F			inc YL
  4728 40EB F0 03 4C 45 40		jne l_0919
  4729 40F0			l_0927
  4730
  4731 				; ------------------------------------------------------------
  4732
  4733 = 9FEC			FL	= DATAORIGIN+$0257
  4734 = 9FEE			FW	= DATAORIGIN+$0259
  4735 = 9FF0			YL	= DATAORIGIN+$025B
  4736
  4737 = 9FEC			@VarData	= FL
  4738 = 0005			@VarDataSize	= 5
  4739
  4740 40F0			@exit
  4741 					.ifdef @new
  4742 					lda <@VarData
  4743 					sta :ztmp
  4744 					lda >@VarData
  4745 					ldy #@VarDataSize-1
  4746 					jmp @FreeMem
  4747 					els
  4748 40F0 60				rts						; ret
  4749 					eif
  4750 				.endl
  4751
  4752 40F1			.local	REMOVE_LETTER					; PROCEDURE
  4753
  4754 				; optimize OK (service.pas), line = 875
  4755
  4756 40F1 AC 6F 9F			ldy LETT.Y
  4757 40F4 AD 6E 9F			lda LETT.X
  4758 40F7 18 79 00 C0			add adr.ROW,y
  4759 40FB 8D 88 9F			sta HLP
  4760 40FE A9 00			lda #$00
  4761 4100 79 00 C1			adc adr.ROW+256,y
  4762 4103 8D 89 9F			sta HLP+1
  4763
  4764 				; optimize OK (service.pas), line = 877
  4765
  4766 4106 AD 6F 9F			lda LETT.Y
  4767 4109 C9 C8			cmp #$C8
  4768 410B B0 52			jcs l_097D
  4769
  4770 				; optimize OK (service.pas), line = 878
  4771
  4772 410D AD 88 9F			lda HLP
  4773 4110 8D 97 9F			sta BLITBOX.DST
  4774 4113 A9 50			lda #$50
  4775 4115 18 6D 89 9F			add HLP+1
  4776 4119 8D 98 9F			sta BLITBOX.DST+1
  4777 411C A9 00			lda #$00
  4778 411E 69 00			adc #$00
  4779 4120 8D 99 9F			sta BLITBOX.DST+2
  4780 4123 A9 00			lda #$00
  4781 4125 69 00			adc #$00
  4782 4127 8D 9A 9F			sta BLITBOX.DST+3
  4783 412A AD 95 9E			lda PLAYSCREEN.OFS
  4784 412D 18 6D 88 9F			add HLP
  4785 4131 8D 93 9F			sta BLITBOX.SRC
  4786 4134 AD 96 9E			lda PLAYSCREEN.OFS+1
  4787 4137 6D 89 9F			adc HLP+1
  4788 413A 8D 94 9F			sta BLITBOX.SRC+1
  4789 413D AD 97 9E			lda PLAYSCREEN.OFS+2
  4790 4140 69 00			adc #$00
  4791 4142 8D 95 9F			sta BLITBOX.SRC+2
  4792 4145 AD 98 9E			lda PLAYSCREEN.OFS+3
  4793 4148 69 00			adc #$00
  4794 414A 8D 96 9F			sta BLITBOX.SRC+3
  4795 414D A9 10			lda #$10
  4796 414F 8D 9B 9F			sta BLITBOX.W
  4797 4152 A9 00			lda #$00
  4798 4154 8D 9C 9F			sta BLITBOX.W+1
  4799 4157 A9 08			lda #$08
  4800 4159 8D 9D 9F			sta BLITBOX.H
  4801 415C 20 96 3A			jsr BLITBOX
  4802 415F			l_097D
  4803
  4804 				; ------------------------------------------------------------
  4805
  4806 = 9FF1			YL	= DATAORIGIN+$025C
  4807
  4808 = 9FF1			@VarData	= YL
  4809 = 0001			@VarDataSize	= 1
  4810
  4811 415F			@exit
  4812 					.ifdef @new
  4813 					lda <@VarData
  4814 					sta :ztmp
  4815 					lda >@VarData
  4816 					ldy #@VarDataSize-1
  4817 					jmp @FreeMem
  4818 					els
  4819 415F 60				rts						; ret
  4820 					eif
  4821 				.endl
  4822
  4823 4160			.local	DISABLE_LETTER					; PROCEDURE
  4824
  4825 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 896
  4826
  4827 4160 20 F1 40			jsr REMOVE_LETTER
  4828
  4829 				; optimize OK (service.pas), line = 897
  4830
  4831 4163 A9 00			lda #$00
  4832 4165 8D 74 9F			sta LETT.ACTIVE
  4833
  4834 4168			@exit
  4835 					.ifdef @new
  4836 					lda <@VarData
  4837 					sta :ztmp
  4838 					lda >@VarData
  4839 					ldy #@VarDataSize-1
  4840 					jmp @FreeMem
  4841 					els
  4842 4168 60				rts						; ret
  4843 					eif
  4844 				.endl
  4845
  4846 4169			.local	START_LETTER					; PROCEDURE
  4847
  4848 				; optimize OK (service.pas), line = 903
  4849
  4850 4169 AD 74 9F			lda LETT.ACTIVE
  4851 416C F0 03			jeq l_09A8
  4852 416E 20 60 41			jsr DISABLE_LETTER
  4853 4171			l_09A8
  4854
  4855 				; optimize OK (service.pas), line = 905
  4856
  4857 4171 AD F2 9F			lda XL
  4858 4174 8D 6E 9F			sta LETT.X
  4859
  4860 				; optimize OK (service.pas), line = 906
  4861
  4862 4177 AD F4 9F			lda YL
  4863 417A 8D 6F 9F			sta LETT.Y
  4864
  4865 				; optimize OK (service.pas), line = 907
  4866
  4867 417D AD F6 9F			lda LETTER
  4868 4180 8D 70 9F			sta LETT.TYP
  4869 4183 AD F7 9F			lda LETTER+1
  4870 4186 8D 71 9F			sta LETT.TYP+1
  4871
  4872 				; optimize OK (service.pas), line = 908
  4873
  4874 4189 A9 00			lda #$00
  4875 418B 8D 72 9F			sta LETT.FRAME
  4876
  4877 				; optimize OK (service.pas), line = 909
  4878
  4879 418E 8D 73 9F			sta LETT.SUBFRAME
  4880
  4881 				; optimize OK (service.pas), line = 910
  4882
  4883 4191 A9 01			lda #$01
  4884 4193 8D 74 9F			sta LETT.ACTIVE
  4885
  4886 				; ------------------------------------------------------------
  4887
  4888 = 9FF2			XL	= DATAORIGIN+$025D
  4889 = 9FF4			YL	= DATAORIGIN+$025F
  4890 = 9FF6			LETTER	= DATAORIGIN+$0261
  4891
  4892 = 9FF2			@VarData	= XL
  4893 = 0006			@VarDataSize	= 6
  4894
  4895 4196			@exit
  4896 					.ifdef @new
  4897 					lda <@VarData
  4898 					sta :ztmp
  4899 					lda >@VarData
  4900 					ldy #@VarDataSize-1
  4901 					jmp @FreeMem
  4902 					els
  4903 4196 60				rts						; ret
  4904 					eif
  4905 				.endl
  4906
  4907 4197			.local	CHECK_LETTER					; PROCEDURE
  4908
  4909 				; optimize OK (service.pas), line = 916
  4910
  4911 4197 AD 74 9F			lda LETT.ACTIVE
  4912 419A D0 03 4C 96 42		jeq l_09D7
  4913
  4914 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 918
  4915
  4916 419F 20 F1 40			jsr REMOVE_LETTER
  4917
  4918 				; optimize FAIL (0, service.pas), line = 919
  4919
  4920 41A2 EE 6F 9F			inc LETT.Y
  4921
  4922 				; optimize OK (service.pas), line = 920
  4923
  4924 41A5 AD 6F 9F			lda LETT.Y
  4925 41A8 C9 C8			cmp #$C8
  4926 41AA 90 03			jcc l_09EF
  4927 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 921
  4928 41AC 4C 88 42			jmp l_09FA
  4929 41AF			l_09EF
  4930
  4931 				; optimize FAIL ('PUT_LETTER', service.pas), line = 923
  4932
  4933 41AF 20 02 40			jsr PUT_LETTER
  4934
  4935 				; optimize FAIL (0, service.pas), line = 924
  4936
  4937 41B2 EE 73 9F			inc LETT.SUBFRAME
  4938
  4939 				; optimize OK (service.pas), line = 925
  4940
  4941 41B5 AD 73 9F			lda LETT.SUBFRAME
  4942 41B8 C9 05			cmp #$05
  4943 41BA D0 08			jne l_0A11
  4944
  4945 				; optimize OK (service.pas), line = 927
  4946
  4947 41BC A9 00			lda #$00
  4948 41BE 8D 73 9F			sta LETT.SUBFRAME
  4949
  4950 				; optimize FAIL (0, service.pas), line = 928
  4951
  4952 41C1 EE 72 9F			inc LETT.FRAME
  4953 41C4			l_0A11
  4954
  4955 				; optimize OK (service.pas), line = 931
  4956
  4957 41C4 AD 72 9F			lda LETT.FRAME
  4958 41C7 C9 08			cmp #$08
  4959 41C9 D0 05			jne l_0A2E
  4960 41CB A9 00			lda #$00
  4961 41CD 8D 72 9F			sta LETT.FRAME
  4962 41D0			l_0A2E
  4963
  4964 				; optimize OK (service.pas), line = 933
  4965
  4966 41D0 AD 6E 9F			lda LETT.X
  4967 41D3 18 69 10			add #$10
  4968 41D6 85 A0			sta :STACKORIGIN+10
  4969 41D8 A9 00			lda #$00
  4970 41DA 69 00			adc #$00
  4971 41DC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4972 41DE A9 00			lda #$00
  4973 41E0 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4974 41E2 D0 05			bne @+
  4975 41E4 AD 09 9F			lda VAUS.X
  4976 41E7 C5 A0			cmp :STACKORIGIN+10
  4977 				@
  4978 41E9 90 03 4C 8B 42		jcs l_0A87
  4979 				@
  4980 41EE AD 09 9F			lda VAUS.X
  4981 41F1 18 6D 11 9F			add VAUS.WIDTH
  4982 41F5 85 A0			sta :STACKORIGIN+10
  4983 41F7 A9 00			lda #$00
  4984 41F9 69 00			adc #$00
  4985 41FB C9 00			cmp #$00
  4986 41FD D0 05			bne @+
  4987 41FF A5 A0			lda :STACKORIGIN+10
  4988 4201 CD 6E 9F			cmp LETT.X
  4989 				@
  4990 4204 B0 03 4C 8B 42		jcc l_0A87
  4991 4209 D0 03 4C 8B 42		jeq l_0A87
  4992 				@
  4993 420E AD 6F 9F			lda LETT.Y
  4994 4211 18 69 08			add #$08
  4995 4214 85 A1			sta :STACKORIGIN+11
  4996 4216 A9 00			lda #$00
  4997 4218 69 00			adc #$00
  4998 421A 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4999 421C A9 00			lda #$00
  5000 421E C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5001 4220 D0 05			bne @+
  5002 4222 AD 0A 9F			lda VAUS.Y
  5003 4225 C5 A1			cmp :STACKORIGIN+11
  5004 				@
  5005 4227 B0 62			jcs l_0A87
  5006 				@
  5007 4229 AD 0A 9F			lda VAUS.Y
  5008 422C 18 6D 12 9F			add VAUS.HEIGHT
  5009 4230 85 A0			sta :STACKORIGIN+10
  5010 4232 A9 00			lda #$00
  5011 4234 69 00			adc #$00
  5012 4236 C9 00			cmp #$00
  5013 4238 D0 05			bne @+
  5014 423A A5 A0			lda :STACKORIGIN+10
  5015 423C CD 6F 9F			cmp LETT.Y
  5016 				@
  5017 423F 90 4A			jcc l_0A87
  5018 4241 F0 48			jeq l_0A87
  5019 				@
  5020
  5021 				; optimize OK (service.pas), line = 936
  5022
  5023 4243 A9 64			lda #$64
  5024 4245 8D 6F 9E			sta BALL_BLOCK_SOUND.A
  5025 4248 A9 00			lda #$00
  5026 424A 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
  5027 424D A9 0A			lda #$0A
  5028 424F 8D 71 9E			sta BALL_BLOCK_SOUND.B
  5029 4252 A9 00			lda #$00
  5030 4254 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
  5031 4257 20 7D 38			jsr BALL_BLOCK_SOUND
  5032
  5033 				; optimize OK (service.pas), line = 937
  5034
  5035 425A AC 70 9F			ldy LETT.TYP
  5036 425D C8				iny
  5037 425E 8C 15 9F			sty VAUS.LETTER
  5038
  5039 				; optimize OK (service.pas), line = 938
  5040
  5041 4261 AD 65 9F			lda CUR_PLAYER
  5042 4264 0A				asl @
  5043 4265 0A				asl @
  5044 4266 A8				tay
  5045 4267 B9 4A 9F			lda adr.SCORE.PLAYER,y
  5046 426A 18 69 E8			add #$E8
  5047 426D 99 4A 9F			sta adr.SCORE.PLAYER,y
  5048 4270 B9 4B 9F			lda adr.SCORE.PLAYER+1,y
  5049 4273 69 03			adc #$03
  5050 4275 99 4B 9F			sta adr.SCORE.PLAYER+1,y
  5051 4278 B9 4C 9F			lda adr.SCORE.PLAYER+2,y
  5052 427B 69 00			adc #$00
  5053 427D 99 4C 9F			sta adr.SCORE.PLAYER+2,y
  5054 4280 B9 4D 9F			lda adr.SCORE.PLAYER+3,y
  5055 4283 69 00			adc #$00
  5056 4285 99 4D 9F			sta adr.SCORE.PLAYER+3,y
  5057 4288			l_09FA
  5058
  5059 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 939
  5060
  5061 4288 20 60 41			jsr DISABLE_LETTER
  5062 428B			l_0A87
  5063
  5064 				; optimize OK (service.pas), line = 943
  5065
  5066 428B A9 00			lda #$00
  5067 428D 8D 75 9F			sta LETT.INCOMING
  5068 4290 8D 76 9F			sta LETT.INCOMING+1
  5069 4293 4C CD 42			jmp l_0AA8
  5070 4296			l_09D7
  5071
  5072 				; optimize OK (service.pas), line = 945
  5073
  5074 4296 AD 75 9F			lda LETT.INCOMING
  5075 4299 C9 E9			cmp #$E9
  5076 429B AD 76 9F			lda LETT.INCOMING+1
  5077 429E E9 03			sbc #$03
  5078 42A0 50 02			svc
  5079 42A2 49 80			eor #$80
  5080 42A4 30 27			jmi l_0AB9
  5081
  5082 				; optimize OK (service.pas), line = 946
  5083
  5084 42A6 AD 77 9F			lda LETT.NEXTX
  5085 42A9 8D F2 9F			sta START_LETTER.XL
  5086 42AC AD 78 9F			lda LETT.NEXTX+1
  5087 42AF 8D F3 9F			sta START_LETTER.XL+1
  5088 42B2 AD 79 9F			lda LETT.NEXTY
  5089 42B5 8D F4 9F			sta START_LETTER.YL
  5090 42B8 AD 7A 9F			lda LETT.NEXTY+1
  5091 42BB 8D F5 9F			sta START_LETTER.YL+1
  5092 42BE AD 7B 9F			lda LETT.NEXTTYPE
  5093 42C1 8D F6 9F			sta START_LETTER.LETTER
  5094 42C4 AD 7C 9F			lda LETT.NEXTTYPE+1
  5095 42C7 8D F7 9F			sta START_LETTER.LETTER+1
  5096 42CA 20 69 41			jsr START_LETTER
  5097 42CD			l_0AA8
  5098 42CD			l_0AB9
  5099
  5100 42CD			@exit
  5101 					.ifdef @new
  5102 					lda <@VarData
  5103 					sta :ztmp
  5104 					lda >@VarData
  5105 					ldy #@VarDataSize-1
  5106 					jmp @FreeMem
  5107 					els
  5108 42CD 60				rts						; ret
  5109 					eif
  5110 				.endl
  5111
  5112 42CE			.local	SHOWBTMPICTURE					; PROCEDURE
  5113
  5114 				; ------------------------------------------------------------
  5115
  5116 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5117 				; as Pointer
  5118 42CE B5 96			lda :STACKORIGIN,x
  5119 42D0 85 84			sta :bp2
  5120 42D2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5121 42D4 85 85			sta :bp2+1
  5122 42D6 A0 07			ldy #$07
  5123 42D8 B1 84 99 F8 9F 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5124 42E0 CA				dex
  5125 42E1			@main
  5126
  5127 				; optimize OK (service.pas), line = 956
  5128
  5129 42E1 AD FC 9F			lda BTM.OFS
  5130 42E4 8D 93 9F			sta BLITBOX.SRC
  5131 42E7 AD FD 9F			lda BTM.OFS+1
  5132 42EA 8D 94 9F			sta BLITBOX.SRC+1
  5133 42ED AD FE 9F			lda BTM.OFS+2
  5134 42F0 8D 95 9F			sta BLITBOX.SRC+2
  5135 42F3 AD FF 9F			lda BTM.OFS+3
  5136 42F6 8D 96 9F			sta BLITBOX.SRC+3
  5137 42F9 A9 00			lda #$00
  5138 42FB 8D 97 9F			sta BLITBOX.DST
  5139 42FE A9 50			lda #$50
  5140 4300 8D 98 9F			sta BLITBOX.DST+1
  5141 4303 A9 00			lda #$00
  5142 4305 8D 99 9F			sta BLITBOX.DST+2
  5143 4308 8D 9A 9F			sta BLITBOX.DST+3
  5144 430B AD F8 9F			lda BTM.WIDTH
  5145 430E 8D 9B 9F			sta BLITBOX.W
  5146 4311 AD F9 9F			lda BTM.WIDTH+1
  5147 4314 8D 9C 9F			sta BLITBOX.W+1
  5148 4317 AD FA 9F			lda BTM.HEIGHT
  5149 431A 8D 9D 9F			sta BLITBOX.H
  5150 431D 20 96 3A			jsr BLITBOX
  5151
  5152 				; ------------------------------------------------------------
  5153
  5154 = 9FF8			adr.BTM	= DATAORIGIN+$0263	; [8] RECORD
  5155 4320			.var BTM	= adr.BTM .word
  5156 = 9FF8			BTM.WIDTH	= DATAORIGIN+$0263
  5157 = 9FFA			BTM.HEIGHT	= DATAORIGIN+$0265
  5158 = 9FFC			BTM.OFS	= DATAORIGIN+$0267
  5159
  5160 = 9FF8			@VarData	= BTM.WIDTH
  5161 = 0008			@VarDataSize	= 8
  5162
  5163 4320			@exit
  5164 					.ifdef @new
  5165 					lda <@VarData
  5166 					sta :ztmp
  5167 					lda >@VarData
  5168 					ldy #@VarDataSize-1
  5169 					jmp @FreeMem
  5170 					els
  5171 4320 60				rts						; ret
  5172 					eif
  5173 = 4321 F8 9F		BTM
  5173 				.endl
  5174
  5175 4323			.local	PLACE_BALL					; PROCEDURE
  5176
  5177 				; optimize OK (service.pas), line = 977
  5178
  5179 4323 AC 00 A0 84 84 AC + 	mwy BALL :bp2
  5180 432D A0 00			ldy #BALL.X-DATAORIGIN
  5181 432F B1 84			lda (:bp2),y
  5182 4331 38 E9 03			sub #$03
  5183 4334 85 9F			sta :STACKORIGIN+9
  5184 4336 C8				iny
  5185 4337 B1 84			lda (:bp2),y
  5186 4339 E9 00			sbc #$00
  5187 433B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5188 433D A0 02			ldy #BALL.Y-DATAORIGIN
  5189 433F B1 84			lda (:bp2),y
  5190 4341 38 E9 03			sub #$03
  5191 4344 A8				tay
  5192 4345 A5 9F			lda :STACKORIGIN+9
  5193 4347 18 79 00 C0			add adr.ROW,y
  5194 434B 8D 88 9F			sta HLP
  5195 434E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5196 4350 79 00 C1			adc adr.ROW+256,y
  5197 4353 8D 89 9F			sta HLP+1
  5198
  5199 				; optimize OK (service.pas), line = 979
  5200
  5201 4356 AD 88 9F			lda HLP
  5202 4359 8D A2 9F			sta BLITZERO.DST
  5203 435C A9 50			lda #$50
  5204 435E 18 6D 89 9F			add HLP+1
  5205 4362 8D A3 9F			sta BLITZERO.DST+1
  5206 4365 A9 00			lda #$00
  5207 4367 69 00			adc #$00
  5208 4369 8D A4 9F			sta BLITZERO.DST+2
  5209 436C A9 00			lda #$00
  5210 436E 69 00			adc #$00
  5211 4370 8D A5 9F			sta BLITZERO.DST+3
  5212 4373 AD 8D 9E			lda BALLDATA.OFS
  5213 4376 8D 9E 9F			sta BLITZERO.SRC
  5214 4379 AD 8E 9E			lda BALLDATA.OFS+1
  5215 437C 8D 9F 9F			sta BLITZERO.SRC+1
  5216 437F AD 8F 9E			lda BALLDATA.OFS+2
  5217 4382 8D A0 9F			sta BLITZERO.SRC+2
  5218 4385 AD 90 9E			lda BALLDATA.OFS+3
  5219 4388 8D A1 9F			sta BLITZERO.SRC+3
  5220 438B A9 05			lda #$05
  5221 438D 8D A6 9F			sta BLITZERO.W
  5222 4390 A9 00			lda #$00
  5223 4392 8D A7 9F			sta BLITZERO.W+1
  5224 4395 A9 05			lda #$05
  5225 4397 8D A8 9F			sta BLITZERO.H
  5226 439A 20 17 3B			jsr BLITZERO
  5227
  5228 				; ------------------------------------------------------------
  5229
  5230 = A000			BALL	= DATAORIGIN+$026B
  5231 = 9D95			BALL.X	= DATAORIGIN+$0000
  5232 = 9D97			BALL.Y	= DATAORIGIN+$0002
  5233 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  5234 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  5235 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  5236 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  5237 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  5238 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  5239 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  5240 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  5241 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  5242 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  5243 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  5244 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  5245 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  5246 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  5247
  5248 = A000			@VarData	= BALL
  5249 = 0002			@VarDataSize	= 2
  5250
  5251 439D			@exit
  5252 					.ifdef @new
  5253 					lda <@VarData
  5254 					sta :ztmp
  5255 					lda >@VarData
  5256 					ldy #@VarDataSize-1
  5257 					jmp @FreeMem
  5258 					els
  5259 439D 60				rts						; ret
  5260 					eif
  5261 				.endl
  5262
  5263 439E			.local	REMOVE_BALL					; PROCEDURE
  5264
  5265 				; optimize OK (service.pas), line = 1006
  5266
  5267 439E AC 04 A0 84 84 AC + 	mwy BALL :bp2
  5268 43A8 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5269 43AA B1 84			lda (:bp2),y
  5270 43AC 38 E9 03			sub #$03
  5271 43AF 85 9F			sta :STACKORIGIN+9
  5272 43B1 C8				iny
  5273 43B2 B1 84			lda (:bp2),y
  5274 43B4 E9 00			sbc #$00
  5275 43B6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5276 43B8 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5277 43BA B1 84			lda (:bp2),y
  5278 43BC 38 E9 03			sub #$03
  5279 43BF A8				tay
  5280 43C0 A5 9F			lda :STACKORIGIN+9
  5281 43C2 18 79 00 C0			add adr.ROW,y
  5282 43C6 8D 88 9F			sta HLP
  5283 43C9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5284 43CB 79 00 C1			adc adr.ROW+256,y
  5285 43CE 8D 89 9F			sta HLP+1
  5286
  5287 				; optimize OK (service.pas), line = 1008
  5288
  5289 43D1 AD 88 9F			lda HLP
  5290 43D4 8D 97 9F			sta BLITBOX.DST
  5291 43D7 A9 50			lda #$50
  5292 43D9 18 6D 89 9F			add HLP+1
  5293 43DD 8D 98 9F			sta BLITBOX.DST+1
  5294 43E0 A9 00			lda #$00
  5295 43E2 69 00			adc #$00
  5296 43E4 8D 99 9F			sta BLITBOX.DST+2
  5297 43E7 A9 00			lda #$00
  5298 43E9 69 00			adc #$00
  5299 43EB 8D 9A 9F			sta BLITBOX.DST+3
  5300 43EE AD 95 9E			lda PLAYSCREEN.OFS
  5301 43F1 18 6D 88 9F			add HLP
  5302 43F5 8D 93 9F			sta BLITBOX.SRC
  5303 43F8 AD 96 9E			lda PLAYSCREEN.OFS+1
  5304 43FB 6D 89 9F			adc HLP+1
  5305 43FE 8D 94 9F			sta BLITBOX.SRC+1
  5306 4401 AD 97 9E			lda PLAYSCREEN.OFS+2
  5307 4404 69 00			adc #$00
  5308 4406 8D 95 9F			sta BLITBOX.SRC+2
  5309 4409 AD 98 9E			lda PLAYSCREEN.OFS+3
  5310 440C 69 00			adc #$00
  5311 440E 8D 96 9F			sta BLITBOX.SRC+3
  5312 4411 A9 05			lda #$05
  5313 4413 8D 9B 9F			sta BLITBOX.W
  5314 4416 A9 00			lda #$00
  5315 4418 8D 9C 9F			sta BLITBOX.W+1
  5316 441B A9 05			lda #$05
  5317 441D 8D 9D 9F			sta BLITBOX.H
  5318 4420 20 96 3A			jsr BLITBOX
  5319
  5320 				; ------------------------------------------------------------
  5321
  5322 = A004			BALL	= DATAORIGIN+$026F
  5323 = 9D95			BALL.X	= DATAORIGIN+$0000
  5324 = 9D97			BALL.Y	= DATAORIGIN+$0002
  5325 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  5326 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  5327 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  5328 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  5329 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  5330 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  5331 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  5332 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  5333 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  5334 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  5335 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  5336 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  5337 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  5338 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  5339
  5340 = A004			@VarData	= BALL
  5341 = 0002			@VarDataSize	= 2
  5342
  5343 4423			@exit
  5344 					.ifdef @new
  5345 					lda <@VarData
  5346 					sta :ztmp
  5347 					lda >@VarData
  5348 					ldy #@VarDataSize-1
  5349 					jmp @FreeMem
  5350 					els
  5351 4423 60				rts						; ret
  5352 					eif
  5353 				.endl
  5354
  5355 4424			.local	WAIT_VBL					; PROCEDURE
  5356
  5357 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1042
  5358
  5359 4424 20 2A 33			jsr SYSTEM.PAUSE.@00
  5360
  5361 4427			@exit
  5362 					.ifdef @new
  5363 					lda <@VarData
  5364 					sta :ztmp
  5365 					lda >@VarData
  5366 					ldy #@VarDataSize-1
  5367 					jmp @FreeMem
  5368 					els
  5369 4427 60				rts						; ret
  5370 					eif
  5371 				.endl
  5372
  5373 4428			.local	SET_BALL					; PROCEDURE
  5374
  5375 				; optimize OK (service.pas), line = 1054
  5376
  5377 4428 AC 08 A0 84 84 AC + 	mwy BALL :bp2
  5378 4432 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5379 4434 B1 84			lda (:bp2),y
  5380 4436 C9 FF			cmp #$FF
  5381 4438 D0 05			bne @+
  5382 443A 88				dey
  5383 443B B1 84			lda (:bp2),y
  5384 443D C9 FF			cmp #$FF
  5385 				@
  5386 443F F0 13			jeq l_0B39s
  5387 4441 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5388 4443 B1 84			lda (:bp2),y
  5389 4445 C9 FF			cmp #$FF
  5390 4447 D0 05			bne @+
  5391 4449 88				dey
  5392 444A B1 84			lda (:bp2),y
  5393 444C C9 FF			cmp #$FF
  5394 				@
  5395 444E F0 04			jeq l_0B39s
  5396 4450 A9 01 D0 02			lda:sne #$01
  5397 4454 A9 00		l_0B39s	lda #$00
  5398 4456 8D 0C A0			sta B0
  5399
  5400 				; optimize OK (service.pas), line = 1055
  5401
  5402 4459 AC 08 A0 84 84 AC + 	mwy BALL :bp2
  5403 4463 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5404 4465 B1 84			lda (:bp2),y
  5405 4467 85 9F			sta :STACKORIGIN+9
  5406 4469 C8				iny
  5407 446A B1 84			lda (:bp2),y
  5408 446C A0 01			ldy #BALL.X-DATAORIGIN+$01
  5409 446E D1 84			cmp (:bp2),y
  5410 4470 D0 05			bne @+
  5411 4472 88				dey
  5412 4473 A5 9F			lda :STACKORIGIN+9
  5413 4475 D1 84			cmp (:bp2),y
  5414 				@
  5415 4477 D0 03			bne @+
  5416 4479 4C 7F 44			jmp *+6
  5417 				@\	jmp l_0B51s
  5417 				@
  5417 447C 4C 9F 44			JMP L_0B51S
  5418 447F A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5419 4481 B1 84			lda (:bp2),y
  5420 4483 85 A0			sta :STACKORIGIN+10
  5421 4485 C8				iny
  5422 4486 B1 84			lda (:bp2),y
  5423 4488 A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5424 448A D1 84			cmp (:bp2),y
  5425 448C D0 05			bne @+
  5426 448E 88				dey
  5427 448F A5 A0			lda :STACKORIGIN+10
  5428 4491 D1 84			cmp (:bp2),y
  5429 				@
  5430 4493 D0 03			bne @+
  5431 4495 4C 9B 44			jmp *+6
  5432 				@\	jmp l_0B51s
  5432 				@
  5432 4498 4C 9F 44			JMP L_0B51S
  5433 449B A9 00 F0 02			lda:seq #$00
  5434 449F A9 01		l_0B51s	lda #$01
  5435 44A1 8D 0D A0			sta B1
  5436
  5437 				; optimize OK (service.pas), line = 1057
  5438
  5439 44A4 AD 0C A0			lda B0
  5440 44A7 2D 0D A0			and B1
  5441 44AA F0 0F			jeq l_0B63
  5442
  5443 				; optimize OK (service.pas), line = 1058
  5444
  5445 44AC AD 08 A0			lda BALL
  5446 44AF 8D 04 A0			sta REMOVE_BALL.BALL
  5447 44B2 AD 09 A0			lda BALL+1
  5448 44B5 8D 05 A0			sta REMOVE_BALL.BALL+1
  5449 44B8 20 9E 43			jsr REMOVE_BALL
  5450 44BB			l_0B63
  5451
  5452 				; optimize OK (service.pas), line = 1060
  5453
  5454 44BB AD 08 A0			lda BALL
  5455 44BE 8D 00 A0			sta PLACE_BALL.BALL
  5456 44C1 AD 09 A0			lda BALL+1
  5457 44C4 8D 01 A0			sta PLACE_BALL.BALL+1
  5458 44C7 20 23 43			jsr PLACE_BALL
  5459
  5460 				; optimize OK (service.pas), line = 1062
  5461
  5462 44CA AC 08 A0 84 84 AC + 	mwy BALL :bp2
  5463 44D4 A0 00			ldy #BALL.X-DATAORIGIN
  5464 44D6 B1 84			lda (:bp2),y
  5465 44D8 85 9F			sta :STACKORIGIN+9
  5466 44DA C8				iny
  5467 44DB B1 84			lda (:bp2),y
  5468 44DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5469 44DF A0 08			ldy #BALL.OLDX-DATAORIGIN
  5470 44E1 A5 9F			lda :STACKORIGIN+9
  5471 44E3 91 84			sta (:bp2),y
  5472 44E5 C8				iny
  5473 44E6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5474 44E8 91 84			sta (:bp2),y
  5475
  5476 				; optimize OK (service.pas), line = 1063
  5477
  5478 44EA A0 02			ldy #BALL.Y-DATAORIGIN
  5479 44EC B1 84			lda (:bp2),y
  5480 44EE 85 9F			sta :STACKORIGIN+9
  5481 44F0 C8				iny
  5482 44F1 B1 84			lda (:bp2),y
  5483 44F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5484 44F5 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5485 44F7 A5 9F			lda :STACKORIGIN+9
  5486 44F9 91 84			sta (:bp2),y
  5487 44FB C8				iny
  5488 44FC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5489 44FE 91 84			sta (:bp2),y
  5490
  5491 				; ------------------------------------------------------------
  5492
  5493 = A008			BALL	= DATAORIGIN+$0273
  5494 = 9D95			BALL.X	= DATAORIGIN+$0000
  5495 = 9D97			BALL.Y	= DATAORIGIN+$0002
  5496 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  5497 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  5498 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  5499 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  5500 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  5501 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  5502 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  5503 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  5504 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  5505 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  5506 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  5507 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  5508 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  5509 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  5510 = A00C			B0	= DATAORIGIN+$0277
  5511 = A00D			B1	= DATAORIGIN+$0278
  5512
  5513 = A008			@VarData	= BALL
  5514 = 0004			@VarDataSize	= 4
  5515
  5516 4500			@exit
  5517 					.ifdef @new
  5518 					lda <@VarData
  5519 					sta :ztmp
  5520 					lda >@VarData
  5521 					ldy #@VarDataSize-1
  5522 					jmp @FreeMem
  5523 					els
  5524 4500 60				rts						; ret
  5525 					eif
  5526 				.endl
  5527
  5528 4501			.local	SET_BALL_SPEED					; PROCEDURE
  5529
  5530 				; optimize OK (service.pas), line = 1076
  5531
  5532 4501 AC 0E A0 84 84 AC + 	mwy BALL :bp2
  5533 450B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5534 450D B1 84			lda (:bp2),y
  5535 450F 8D 14 A0			sta SX
  5536 4512 C8				iny
  5537 4513 B1 84			lda (:bp2),y
  5538 4515 8D 15 A0			sta SX+1
  5539
  5540 				; optimize OK (service.pas), line = 1077
  5541
  5542 4518 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5543 451A B1 84			lda (:bp2),y
  5544 451C 8D 16 A0			sta SY
  5545 451F C8				iny
  5546 4520 B1 84			lda (:bp2),y
  5547 4522 8D 17 A0			sta SY+1
  5548
  5549 				; optimize OK (service.pas), line = 1079
  5550
  5551 4525 AD 14 A0			lda SX
  5552 4528 85 8A			sta SYSTEM.ABS.@010184000.X
  5553 452A AD 15 A0			lda SX+1
  5554 452D 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5555 452F 20 0F 2B			jsr SYSTEM.ABS.@010184000
  5556 4532 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5557 4534 8D 20 A0			sta A
  5558 4537 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5559 4539 8D 21 A0			sta A+1
  5560
  5561 				; optimize OK (service.pas), line = 1080
  5562
  5563 453C AD 16 A0			lda SY
  5564 453F 85 8A			sta SYSTEM.ABS.@010184000.X
  5565 4541 AD 17 A0			lda SY+1
  5566 4544 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5567 4546 20 0F 2B			jsr SYSTEM.ABS.@010184000
  5568 4549 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5569 454B 8D 22 A0			sta B
  5570 454E A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5571 4550 8D 23 A0			sta B+1
  5572
  5573 				; optimize OK (service.pas), line = 1082
  5574
  5575 4553 AD 20 A0			lda A
  5576 4556 85 8E			sta :ecx
  5577 4558 85 86			sta :eax
  5578 455A AD 21 A0			lda A+1
  5579 455D 85 8F			sta :ecx+1
  5580 455F 85 87			sta :eax+1
  5581 					.ifdef fmulinit
  5582 					fmulu_16
  5583 					els
  5584 4561 20 3B 23			imulCX
  5585 					eif
  5586 4564 A5 86			lda :eax
  5587 4566 85 9F			sta :STACKORIGIN+9
  5588 4568 A5 87			lda :eax+1
  5589 456A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5590 456C A5 88			lda :eax+2
  5591 456E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5592 4570 A5 89			lda :eax+3
  5593 4572 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5594 4574 AD 22 A0			lda B
  5595 4577 85 8E			sta :ecx
  5596 4579 85 86			sta :eax
  5597 457B AD 23 A0			lda B+1
  5598 457E 85 8F			sta :ecx+1
  5599 4580 85 87			sta :eax+1
  5600 					.ifdef fmulinit
  5601 					fmulu_16
  5602 					els
  5603 4582 20 3B 23			imulCX
  5604 					eif
  5605 4585 A5 9F			lda :STACKORIGIN+9
  5606 4587 18 65 86			add :eax
  5607 458A 8D 1C A0			sta I
  5608 458D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5609 458F 65 87			adc :eax+1
  5610 4591 8D 1D A0			sta I+1
  5611 4594 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5612 4596 65 88			adc :eax+2
  5613 4598 8D 1E A0			sta I+2
  5614 459B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5615 459D 65 89			adc :eax+3
  5616 459F 8D 1F A0			sta I+3
  5617
  5618 				; optimize OK (service.pas), line = 1084
  5619
  5620 45A2 AD 1C A0			lda I
  5621 45A5 8D 73 9E			sta SQRT32.V
  5622 45A8 AD 1D A0			lda I+1
  5623 45AB 8D 74 9E			sta SQRT32.V+1
  5624 45AE AD 1E A0			lda I+2
  5625 45B1 8D 75 9E			sta SQRT32.V+2
  5626 45B4 AD 1F A0			lda I+3
  5627 45B7 8D 76 9E			sta SQRT32.V+3
  5628 45BA 20 7E 38			jsr SQRT32
  5629 45BD AD 77 9E			lda SQRT32.RESULT
  5630 45C0 8D 88 9F			sta HLP
  5631 45C3 AD 78 9E			lda SQRT32.RESULT+1
  5632 45C6 8D 89 9F			sta HLP+1
  5633
  5634 				; optimize OK (service.pas), line = 1086
  5635
  5636 45C9 AD 88 9F			lda HLP
  5637 45CC 85 8E			sta :FPMAN0
  5638 45CE AD 89 9F			lda HLP+1
  5639 45D1 85 8F			sta :FPMAN1
  5640 45D3 A9 00			lda #$00
  5641 45D5 85 90			sta :FPMAN2
  5642 45D7 85 91			sta :FPMAN3
  5643 45D9 20 D4 27			jsr @I2F
  5644 45DC A5 8E			lda :FPMAN0
  5645 45DE 85 A0			sta :STACKORIGIN+10
  5646 45E0 A5 8F			lda :FPMAN1
  5647 45E2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5648 45E4 A5 90			lda :FPMAN2
  5649 45E6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  5650 45E8 A5 91			lda :FPMAN3
  5651 45EA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  5652 45EC AD 12 A0			lda SPEED
  5653 45EF 85 8E			sta :FPMAN0
  5654 45F1 A0 00			ldy #$00
  5655 45F3 AD 13 A0			lda SPEED+1
  5656 45F6 10 01			spl
  5657 45F8 88				dey
  5658 45F9 85 8F			sta :FPMAN1
  5659 45FB 84 90			sty :FPMAN2
  5660 45FD 84 91			sty :FPMAN3
  5661 45FF 20 D4 27			jsr @I2F
  5662 4602 A5 8E			lda :FPMAN0
  5663 4604 85 86			sta :FP1MAN0
  5664 4606 A5 8F			lda :FPMAN1
  5665 4608 85 87			sta :FP1MAN1
  5666 460A A5 90			lda :FPMAN2
  5667 460C 85 88			sta :FP1MAN2
  5668 460E A5 91			lda :FPMAN3
  5669 4610 85 89			sta :FP1MAN3
  5670 4612 A5 A0			lda :STACKORIGIN+10
  5671 4614 85 8A			sta :FP2MAN0
  5672 4616 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5673 4618 85 8B			sta :FP2MAN1
  5674 461A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  5675 461C 85 8C			sta :FP2MAN2
  5676 461E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  5677 4620 85 8D			sta :FP2MAN3
  5678 4622 20 9B 26			jsr @FDIV
  5679 4625 A5 8E			lda :FPMAN0
  5680 4627 8D 18 A0			sta VM
  5681 462A A5 8F			lda :FPMAN1
  5682 462C 8D 19 A0			sta VM+1
  5683 462F A5 90			lda :FPMAN2
  5684 4631 8D 1A A0			sta VM+2
  5685 4634 A5 91			lda :FPMAN3
  5686 4636 8D 1B A0			sta VM+3
  5687
  5688 				; optimize OK (service.pas), line = 1091
  5689
  5690 4639 AD 14 A0			lda SX
  5691 463C 85 8E			sta :FPMAN0
  5692 463E A0 00			ldy #$00
  5693 4640 AD 15 A0			lda SX+1
  5694 4643 10 01			spl
  5695 4645 88				dey
  5696 4646 85 8F			sta :FPMAN1
  5697 4648 84 90			sty :FPMAN2
  5698 464A 84 91			sty :FPMAN3
  5699 464C 20 D4 27			jsr @I2F
  5700 464F A5 8E			lda :FPMAN0
  5701 4651 85 86			sta :FP1MAN0
  5702 4653 A5 8F			lda :FPMAN1
  5703 4655 85 87			sta :FP1MAN1
  5704 4657 A5 90			lda :FPMAN2
  5705 4659 85 88			sta :FP1MAN2
  5706 465B A5 91			lda :FPMAN3
  5707 465D 85 89			sta :FP1MAN3
  5708 465F AD 18 A0			lda VM
  5709 4662 85 8A			sta :FP2MAN0
  5710 4664 AD 19 A0			lda VM+1
  5711 4667 85 8B			sta :FP2MAN1
  5712 4669 AD 1A A0			lda VM+2
  5713 466C 85 8C			sta :FP2MAN2
  5714 466E AD 1B A0			lda VM+3
  5715 4671 85 8D			sta :FP2MAN3
  5716 4673 20 FA 25			jsr @FMUL
  5717 4676 20 63 27			jsr @F2I
  5718 4679 AC 0E A0 84 84 AC + 	mwy BALL :bp2
  5719 4683 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5720 4685 A5 8E			lda :FPMAN0
  5721 4687 91 84			sta (:bp2),y
  5722 4689 C8				iny
  5723 468A A5 8F			lda :FPMAN1
  5724 468C 91 84			sta (:bp2),y
  5725
  5726 				; optimize OK (service.pas), line = 1092
  5727
  5728 468E AD 16 A0			lda SY
  5729 4691 85 8E			sta :FPMAN0
  5730 4693 A0 00			ldy #$00
  5731 4695 AD 17 A0			lda SY+1
  5732 4698 10 01			spl
  5733 469A 88				dey
  5734 469B 85 8F			sta :FPMAN1
  5735 469D 84 90			sty :FPMAN2
  5736 469F 84 91			sty :FPMAN3
  5737 46A1 20 D4 27			jsr @I2F
  5738 46A4 A5 8E			lda :FPMAN0
  5739 46A6 85 86			sta :FP1MAN0
  5740 46A8 A5 8F			lda :FPMAN1
  5741 46AA 85 87			sta :FP1MAN1
  5742 46AC A5 90			lda :FPMAN2
  5743 46AE 85 88			sta :FP1MAN2
  5744 46B0 A5 91			lda :FPMAN3
  5745 46B2 85 89			sta :FP1MAN3
  5746 46B4 AD 18 A0			lda VM
  5747 46B7 85 8A			sta :FP2MAN0
  5748 46B9 AD 19 A0			lda VM+1
  5749 46BC 85 8B			sta :FP2MAN1
  5750 46BE AD 1A A0			lda VM+2
  5751 46C1 85 8C			sta :FP2MAN2
  5752 46C3 AD 1B A0			lda VM+3
  5753 46C6 85 8D			sta :FP2MAN3
  5754 46C8 20 FA 25			jsr @FMUL
  5755 46CB 20 63 27			jsr @F2I
  5756 46CE AC 0E A0 84 84 AC + 	mwy BALL :bp2
  5757 46D8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5758 46DA A5 8E			lda :FPMAN0
  5759 46DC 91 84			sta (:bp2),y
  5760 46DE C8				iny
  5761 46DF A5 8F			lda :FPMAN1
  5762 46E1 91 84			sta (:bp2),y
  5763
  5764 				; ------------------------------------------------------------
  5765
  5766 = A00E			BALL	= DATAORIGIN+$0279
  5767 = 9D95			BALL.X	= DATAORIGIN+$0000
  5768 = 9D97			BALL.Y	= DATAORIGIN+$0002
  5769 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  5770 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  5771 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  5772 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  5773 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  5774 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  5775 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  5776 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  5777 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  5778 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  5779 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  5780 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  5781 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  5782 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  5783 = A012			SPEED	= DATAORIGIN+$027D
  5784 = A014			SX	= DATAORIGIN+$027F
  5785 = A016			SY	= DATAORIGIN+$0281
  5786 = A018			VM	= DATAORIGIN+$0283
  5787 = A01C			I	= DATAORIGIN+$0287
  5788 = A020			A	= DATAORIGIN+$028B
  5789 = A022			B	= DATAORIGIN+$028D
  5790
  5791 = A00E			@VarData	= BALL
  5792 = 0014			@VarDataSize	= 20
  5793
  5794 46E3			@exit
  5795 					.ifdef @new
  5796 					lda <@VarData
  5797 					sta :ztmp
  5798 					lda >@VarData
  5799 					ldy #@VarDataSize-1
  5800 					jmp @FreeMem
  5801 					els
  5802 46E3 60				rts						; ret
  5803 					eif
  5804 				.endl
  5805
  5806 46E4			.local	SET_BALL_DIRECTION				; PROCEDURE
  5807
  5808 				; optimize OK (service.pas), line = 1100
  5809
  5810 46E4 AD 28 A0			lda ANGLE
  5811 46E7 85 8E			sta :FPMAN0
  5812 46E9 A0 00			ldy #$00
  5813 46EB AD 29 A0			lda ANGLE+1
  5814 46EE 10 01			spl
  5815 46F0 88				dey
  5816 46F1 85 8F			sta :FPMAN1
  5817 46F3 84 90			sty :FPMAN2
  5818 46F5 84 91			sty :FPMAN3
  5819 46F7 20 D4 27			jsr @I2F
  5820 46FA A5 8E			lda :FPMAN0
  5821 46FC 85 86			sta :FP1MAN0
  5822 46FE A5 8F			lda :FPMAN1
  5823 4700 85 87			sta :FP1MAN1
  5824 4702 A5 90			lda :FPMAN2
  5825 4704 85 88			sta :FP1MAN2
  5826 4706 A5 91			lda :FPMAN3
  5827 4708 85 89			sta :FP1MAN3
  5828 470A A9 35			lda #$35
  5829 470C 85 8A			sta :FP2MAN0
  5830 470E A9 FA			lda #$FA
  5831 4710 85 8B			sta :FP2MAN1
  5832 4712 A9 8E			lda #$8E
  5833 4714 85 8C			sta :FP2MAN2
  5834 4716 A9 3C			lda #$3C
  5835 4718 85 8D			sta :FP2MAN3
  5836 471A 20 FA 25			jsr @FMUL
  5837 471D A5 8E			lda :FPMAN0
  5838 471F 8D 2A A0			sta W
  5839 4722 A5 8F			lda :FPMAN1
  5840 4724 8D 2B A0			sta W+1
  5841 4727 A5 90			lda :FPMAN2
  5842 4729 8D 2C A0			sta W+2
  5843 472C A5 91			lda :FPMAN3
  5844 472E 8D 2D A0			sta W+3
  5845
  5846 				; optimize FAIL (1, service.pas), line = 1102
  5847
  5848 4731 E8				inx
  5849 4732 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5850 4736 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5851 473A AD 2A A0			lda W
  5852 473D 8D C3 9D			sta SYSTEM.COS.@01018F000.X
  5853 4740 AD 2B A0			lda W+1
  5854 4743 8D C4 9D			sta SYSTEM.COS.@01018F000.X+1
  5855 4746 AD 2C A0			lda W+2
  5856 4749 8D C5 9D			sta SYSTEM.COS.@01018F000.X+2
  5857 474C AD 2D A0			lda W+3
  5858 474F 8D C6 9D			sta SYSTEM.COS.@01018F000.X+3
  5859 4752 20 F1 32			jsr SYSTEM.COS.@01018F000
  5860 4755 E8				inx
  5861 4756 AD C7 9D 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  5862 475B AD C8 9D 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5863 4760 AD C9 9D 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5864 4765 AD CA 9D 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5865 476A A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5866 476E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5867 4770 B5 95			lda :STACKORIGIN-1,x
  5868 4772 85 8E			sta :FPMAN0
  5869 4774 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5870 4776 85 8F			sta :FPMAN1
  5871 4778 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5872 477A 85 90			sta :FPMAN2
  5873 477C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5874 477E 85 91			sta :FPMAN3
  5875 4780 20 D4 27			jsr @I2F
  5876 4783 A5 8E			lda :FPMAN0
  5877 4785 95 95			sta :STACKORIGIN-1,x
  5878 4787 A5 8F			lda :FPMAN1
  5879 4789 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5880 478B A5 90			lda :FPMAN2
  5881 478D 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5882 478F A5 91			lda :FPMAN3
  5883 4791 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5884 4793 B5 96			lda :STACKORIGIN,x
  5885 4795 85 8A			sta :FP2MAN0
  5886 4797 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5887 4799 85 8B			sta :FP2MAN1
  5888 479B B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5889 479D 85 8C			sta :FP2MAN2
  5890 479F B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5891 47A1 85 8D			sta :FP2MAN3
  5892 47A3 B5 95			lda :STACKORIGIN-1,x
  5893 47A5 85 86			sta :FP1MAN0
  5894 47A7 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5895 47A9 85 87			sta :FP1MAN1
  5896 47AB B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5897 47AD 85 88			sta :FP1MAN2
  5898 47AF B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5899 47B1 85 89			sta :FP1MAN3
  5900 47B3 20 FA 25			jsr @FMUL
  5901 47B6 CA				dex
  5902 47B7 A5 8E			lda :FPMAN0
  5903 47B9 85 8E			sta :FPMAN0
  5904 47BB A5 8F			lda :FPMAN1
  5905 47BD 85 8F			sta :FPMAN1
  5906 47BF A5 90			lda :FPMAN2
  5907 47C1 85 90			sta :FPMAN2
  5908 47C3 A5 91			lda :FPMAN3
  5909 47C5 85 91			sta :FPMAN3
  5910 47C7 20 63 27			jsr @F2I
  5911 47CA A5 8E			lda :FPMAN0
  5912 47CC 95 96			sta :STACKORIGIN,x
  5913 47CE A5 8F			lda :FPMAN1
  5914 47D0 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5915 47D2 A5 90			lda :FPMAN2
  5916 47D4 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5917 47D6 A5 91			lda :FPMAN3
  5918 47D8 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5919 47DA AC 24 A0 84 84 AC + 	mwy BALL :bp2
  5920 47E4 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5921 47E6 B5 96			lda :STACKORIGIN,x
  5922 47E8 91 84			sta (:bp2),y
  5923 47EA C8				iny
  5924 47EB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5925 47ED 91 84			sta (:bp2),y
  5926
  5927 				; optimize FAIL (1, service.pas), line = 1103
  5928
  5929 47EF A9 00 95 96			mva #$00 :STACKORIGIN,x
  5930 47F3 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5931 47F7 AD 2A A0			lda W
  5932 47FA 8D BB 9D			sta SYSTEM.SIN.@01018F000.X
  5933 47FD AD 2B A0			lda W+1
  5934 4800 8D BC 9D			sta SYSTEM.SIN.@01018F000.X+1
  5935 4803 AD 2C A0			lda W+2
  5936 4806 8D BD 9D			sta SYSTEM.SIN.@01018F000.X+2
  5937 4809 AD 2D A0			lda W+3
  5938 480C 8D BE 9D			sta SYSTEM.SIN.@01018F000.X+3
  5939 480F 20 B8 32			jsr SYSTEM.SIN.@01018F000
  5940 4812 E8				inx
  5941 4813 AD BF 9D 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  5942 4818 AD C0 9D 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5943 481D AD C1 9D 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5944 4822 AD C2 9D 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5945 4827 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5946 482B 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5947 482D B5 95			lda :STACKORIGIN-1,x
  5948 482F 85 8E			sta :FPMAN0
  5949 4831 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5950 4833 85 8F			sta :FPMAN1
  5951 4835 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5952 4837 85 90			sta :FPMAN2
  5953 4839 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5954 483B 85 91			sta :FPMAN3
  5955 483D 20 D4 27			jsr @I2F
  5956 4840 A5 8E			lda :FPMAN0
  5957 4842 95 95			sta :STACKORIGIN-1,x
  5958 4844 A5 8F			lda :FPMAN1
  5959 4846 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5960 4848 A5 90			lda :FPMAN2
  5961 484A 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5962 484C A5 91			lda :FPMAN3
  5963 484E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5964 4850 B5 96			lda :STACKORIGIN,x
  5965 4852 85 8A			sta :FP2MAN0
  5966 4854 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5967 4856 85 8B			sta :FP2MAN1
  5968 4858 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5969 485A 85 8C			sta :FP2MAN2
  5970 485C B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5971 485E 85 8D			sta :FP2MAN3
  5972 4860 B5 95			lda :STACKORIGIN-1,x
  5973 4862 85 86			sta :FP1MAN0
  5974 4864 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5975 4866 85 87			sta :FP1MAN1
  5976 4868 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5977 486A 85 88			sta :FP1MAN2
  5978 486C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5979 486E 85 89			sta :FP1MAN3
  5980 4870 20 FA 25			jsr @FMUL
  5981 4873 CA				dex
  5982 4874 A5 8E			lda :FPMAN0
  5983 4876 85 8E			sta :FPMAN0
  5984 4878 A5 8F			lda :FPMAN1
  5985 487A 85 8F			sta :FPMAN1
  5986 487C A5 90			lda :FPMAN2
  5987 487E 85 90			sta :FPMAN2
  5988 4880 A5 91			lda :FPMAN3
  5989 4882 85 91			sta :FPMAN3
  5990 4884 20 63 27			jsr @F2I
  5991 4887 A5 8E			lda :FPMAN0
  5992 4889 95 96			sta :STACKORIGIN,x
  5993 488B A5 8F			lda :FPMAN1
  5994 488D 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5995 488F A5 90			lda :FPMAN2
  5996 4891 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5997 4893 A5 91			lda :FPMAN3
  5998 4895 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5999 4897 A9 00			lda #$00
  6000 4899 38 F5 96			sub :STACKORIGIN,x
  6001 489C 95 96			sta :STACKORIGIN,x
  6002 489E A9 00			lda #$00
  6003 48A0 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6004 48A2 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6005 48A4 A9 00			lda #$00
  6006 48A6 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6007 48A8 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6008 48AA A9 00			lda #$00
  6009 48AC F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6010 48AE 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6011 48B0 AC 24 A0 84 84 AC + 	mwy BALL :bp2
  6012 48BA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6013 48BC B5 96			lda :STACKORIGIN,x
  6014 48BE 91 84			sta (:bp2),y
  6015 48C0 C8				iny
  6016 48C1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6017 48C3 91 84			sta (:bp2),y
  6018 48C5 CA				dex
  6019
  6020 				; ------------------------------------------------------------
  6021
  6022 = A024			BALL	= DATAORIGIN+$028F
  6023 = 9D95			BALL.X	= DATAORIGIN+$0000
  6024 = 9D97			BALL.Y	= DATAORIGIN+$0002
  6025 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  6026 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  6027 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  6028 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  6029 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  6030 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  6031 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  6032 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  6033 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  6034 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  6035 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  6036 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  6037 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  6038 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  6039 = A028			ANGLE	= DATAORIGIN+$0293
  6040 = A02A			W	= DATAORIGIN+$0295
  6041
  6042 = A024			@VarData	= BALL
  6043 = 0008			@VarDataSize	= 8
  6044
  6045 48C6			@exit
  6046 					.ifdef @new
  6047 					lda <@VarData
  6048 					sta :ztmp
  6049 					lda >@VarData
  6050 					ldy #@VarDataSize-1
  6051 					jmp @FreeMem
  6052 					els
  6053 48C6 60				rts						; ret
  6054 					eif
  6055 				.endl
  6056
  6057 48C7			.local	GET_BALL_DIRECTION				; FUNCTION
  6058
  6059 				; optimize OK (service.pas), line = 1111
  6060
  6061 48C7 AC 2E A0 84 84 AC + 	mwy BALL :bp2
  6062 48D1 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6063 48D3 B1 84			lda (:bp2),y
  6064 48D5 88				dey
  6065 48D6 11 84			ora (:bp2),y
  6066 48D8 D0 75			jne l_0BFC
  6067 48DA E8				inx
  6068 48DB A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6069 48DF E8				inx
  6070 48E0 AC 2E A0 84 84 AC + 	mwy BALL :bp2
  6071 48EA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6072 48EC B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6073 48F0 C8				iny
  6074 48F1 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6075 48F5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6076 48F7 B1 84			lda (:bp2),y
  6077 48F9 85 8A			sta SYSTEM.ABS.@010184000.X
  6078 48FB C8				iny
  6079 48FC B1 84			lda (:bp2),y
  6080 48FE 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6081 4900 20 0F 2B			jsr SYSTEM.ABS.@010184000
  6082 4903 E8				inx
  6083 4904 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6084 4906 85 8E			sta @SMALLINT.DIV.B
  6085 4908 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6086 490A 85 8F			sta @SMALLINT.DIV.B+1
  6087 490C B5 95			lda :STACKORIGIN-1,x
  6088 490E 85 86			sta @SMALLINT.DIV.A
  6089 4910 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6090 4912 85 87			sta @SMALLINT.DIV.A+1
  6091 4914 20 63 22			jsr @SMALLINT.DIV
  6092 4917 A5 86			lda :eax
  6093 4919 95 95			sta :STACKORIGIN-1,x
  6094 491B A5 87			lda :eax+1
  6095 491D 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6096 491F CA				dex
  6097 4920 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6098 4924 20 3B 22			jsr mulSMALLINT
  6099 4927 CA				dex
  6100 4928 A9 00			lda #$00
  6101 492A 38 F5 96			sub :STACKORIGIN,x
  6102 492D 95 96			sta :STACKORIGIN,x
  6103 492F A9 00			lda #$00
  6104 4931 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6105 4933 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6106 4935 A9 00			lda #$00
  6107 4937 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6108 4939 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6109 493B A9 00			lda #$00
  6110 493D F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6111 493F 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6112 4941 B5 96			lda :STACKORIGIN,x
  6113 4943 8D 34 A0			sta W
  6114 4946 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6115 4948 8D 35 A0			sta W+1
  6116 494B CA				dex
  6117 494C 4C D8 4A			jmp l_0C18
  6118 494F			l_0BFC
  6119
  6120 				; optimize OK (service.pas), line = 1117
  6121
  6122 494F AC 2E A0 84 84 AC + 	mwy BALL :bp2
  6123 4959 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6124 495B B1 84			lda (:bp2),y
  6125 495D 85 9F			sta :STACKORIGIN+9
  6126 495F C8				iny
  6127 4960 B1 84			lda (:bp2),y
  6128 4962 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6129 4964 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6130 4966 B1 84			lda (:bp2),y
  6131 4968 85 8E			sta :FPMAN0
  6132 496A C8				iny
  6133 496B B1 84			lda (:bp2),y
  6134 496D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6135 496F A0 00			ldy #$00
  6136 4971 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6137 4973 10 01			spl
  6138 4975 88				dey
  6139 4976 85 8F			sta :FPMAN1
  6140 4978 84 90			sty :FPMAN2
  6141 497A 84 91			sty :FPMAN3
  6142 497C 20 D4 27			jsr @I2F
  6143 497F A5 8E			lda :FPMAN0
  6144 4981 85 A0			sta :STACKORIGIN+10
  6145 4983 A5 8F			lda :FPMAN1
  6146 4985 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6147 4987 A5 90			lda :FPMAN2
  6148 4989 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6149 498B A5 91			lda :FPMAN3
  6150 498D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6151 498F A0 00			ldy #$00
  6152 4991 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6153 4993 10 01			spl
  6154 4995 88				dey
  6155 4996 85 8F			sta :FPMAN1
  6156 4998 84 90			sty :FPMAN2
  6157 499A 84 91			sty :FPMAN3
  6158 499C A5 9F			lda :STACKORIGIN+9
  6159 499E 85 8E			sta :FPMAN0
  6160 49A0 20 D4 27			jsr @I2F
  6161 49A3 A5 8E			lda :FPMAN0
  6162 49A5 85 86			sta :FP1MAN0
  6163 49A7 A5 8F			lda :FPMAN1
  6164 49A9 85 87			sta :FP1MAN1
  6165 49AB A5 90			lda :FPMAN2
  6166 49AD 85 88			sta :FP1MAN2
  6167 49AF A5 91			lda :FPMAN3
  6168 49B1 85 89			sta :FP1MAN3
  6169 49B3 A5 A0			lda :STACKORIGIN+10
  6170 49B5 85 8A			sta :FP2MAN0
  6171 49B7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6172 49B9 85 8B			sta :FP2MAN1
  6173 49BB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6174 49BD 85 8C			sta :FP2MAN2
  6175 49BF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6176 49C1 85 8D			sta :FP2MAN3
  6177 49C3 20 9B 26			jsr @FDIV
  6178 49C6 A5 8E			lda :FPMAN0
  6179 49C8 8D 8A 9F			sta F_HLP
  6180 49CB A5 8F			lda :FPMAN1
  6181 49CD 8D 8B 9F			sta F_HLP+1
  6182 49D0 A5 90			lda :FPMAN2
  6183 49D2 8D 8C 9F			sta F_HLP+2
  6184 49D5 A5 91			lda :FPMAN3
  6185 49D7 49 80			eor #$80
  6186 49D9 8D 8D 9F			sta F_HLP+3
  6187
  6188 				; optimize OK (service.pas), line = 1119
  6189
  6190 49DC AD 8A 9F			lda F_HLP
  6191 49DF 8D A0 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6192 49E2 AD 8B 9F			lda F_HLP+1
  6193 49E5 8D A1 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6194 49E8 AD 8C 9F			lda F_HLP+2
  6195 49EB 8D A2 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6196 49EE AD 8D 9F			lda F_HLP+3
  6197 49F1 8D A3 9D			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6198 49F4 20 3D 2B			jsr SYSTEM.ARCTAN.@01018F000
  6199 49F7 E8				inx
  6200 49F8 E8				inx
  6201 49F9 A9 00			lda #$00
  6202 49FB 85 8A			sta :FP2MAN0
  6203 49FD A9 00			lda #$00
  6204 49FF 85 8B			sta :FP2MAN1
  6205 4A01 A9 34			lda #$34
  6206 4A03 85 8C			sta :FP2MAN2
  6207 4A05 A9 43			lda #$43
  6208 4A07 85 8D			sta :FP2MAN3
  6209 4A09 AD A4 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6210 4A0C 85 86			sta :FP1MAN0
  6211 4A0E AD A5 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6212 4A11 85 87			sta :FP1MAN1
  6213 4A13 AD A6 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6214 4A16 85 88			sta :FP1MAN2
  6215 4A18 AD A7 9D			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6216 4A1B 85 89			sta :FP1MAN3
  6217 4A1D 20 FA 25			jsr @FMUL
  6218 4A20 A5 8E			lda :FPMAN0
  6219 4A22 95 95			sta :STACKORIGIN-1,x
  6220 4A24 A5 8F			lda :FPMAN1
  6221 4A26 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6222 4A28 A5 90			lda :FPMAN2
  6223 4A2A 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6224 4A2C A5 91			lda :FPMAN3
  6225 4A2E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6226 4A30 A9 DB			lda #$DB
  6227 4A32 85 8A			sta :FP2MAN0
  6228 4A34 A9 0F			lda #$0F
  6229 4A36 85 8B			sta :FP2MAN1
  6230 4A38 A9 49			lda #$49
  6231 4A3A 85 8C			sta :FP2MAN2
  6232 4A3C A9 40			lda #$40
  6233 4A3E 85 8D			sta :FP2MAN3
  6234 4A40 B5 95			lda :STACKORIGIN-1,x
  6235 4A42 85 86			sta :FP1MAN0
  6236 4A44 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6237 4A46 85 87			sta :FP1MAN1
  6238 4A48 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6239 4A4A 85 88			sta :FP1MAN2
  6240 4A4C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6241 4A4E 85 89			sta :FP1MAN3
  6242 4A50 20 9B 26			jsr @FDIV
  6243 4A53 CA				dex
  6244 4A54 A5 8E			lda :FPMAN0
  6245 4A56 8D 8A 9F			sta F_HLP
  6246 4A59 A5 8F			lda :FPMAN1
  6247 4A5B 8D 8B 9F			sta F_HLP+1
  6248 4A5E A5 90			lda :FPMAN2
  6249 4A60 8D 8C 9F			sta F_HLP+2
  6250 4A63 A5 91			lda :FPMAN3
  6251 4A65 8D 8D 9F			sta F_HLP+3
  6252 4A68 CA				dex
  6253
  6254 				; optimize OK (service.pas), line = 1121
  6255
  6256 4A69 AD 8A 9F			lda F_HLP
  6257 4A6C 85 8E			sta :FPMAN0
  6258 4A6E AD 8B 9F			lda F_HLP+1
  6259 4A71 85 8F			sta :FPMAN1
  6260 4A73 AD 8C 9F			lda F_HLP+2
  6261 4A76 85 90			sta :FPMAN2
  6262 4A78 AD 8D 9F			lda F_HLP+3
  6263 4A7B 85 91			sta :FPMAN3
  6264 4A7D 20 63 27			jsr @F2I
  6265 4A80 A5 8E			lda :FPMAN0
  6266 4A82 8D 34 A0			sta W
  6267 4A85 A5 8F			lda :FPMAN1
  6268 4A87 8D 35 A0			sta W+1
  6269
  6270 				; optimize OK (service.pas), line = 1123
  6271
  6272 4A8A AC 2E A0 84 84 AC + 	mwy BALL :bp2
  6273 4A94 A0 00			ldy #$00
  6274 4A96 B1 84			lda (:bp2),y
  6275 4A98 10 0E			jpl l_0C47
  6276 4A9A AD 34 A0			lda W
  6277 4A9D 18 69 B4			add #$B4
  6278 4AA0 8D 34 A0			sta W
  6279 4AA3 90 03			scc
  6280 4AA5 EE 35 A0			inc W+1
  6281 4AA8			l_0C47
  6282
  6283 				; optimize OK (service.pas), line = 1125
  6284
  6285 4AA8 AD 34 A0			lda W
  6286 4AAB 18 69 68			add #$68
  6287 4AAE 8D 34 A0			sta W
  6288 4AB1 AD 35 A0			lda W+1
  6289 4AB4 69 01			adc #$01
  6290 4AB6 8D 35 A0			sta W+1
  6291
  6292 				; optimize OK (service.pas), line = 1126
  6293
  6294 4AB9 A9 68			lda #$68
  6295 4ABB 85 8E			sta @SMALLINT.MOD.B
  6296 4ABD A9 01			lda #$01
  6297 4ABF 85 8F			sta @SMALLINT.MOD.B+1
  6298 4AC1 AD 34 A0			lda W
  6299 4AC4 85 86			sta @SMALLINT.MOD.A
  6300 4AC6 AD 35 A0			lda W+1
  6301 4AC9 85 87			sta @SMALLINT.MOD.A+1
  6302 4ACB 20 80 22			jsr @SMALLINT.MOD
  6303 4ACE A5 92			lda @SMALLINT.MOD.RESULT
  6304 4AD0 8D 34 A0			sta W
  6305 4AD3 A5 93			lda @SMALLINT.MOD.RESULT+1
  6306 4AD5 8D 35 A0			sta W+1
  6307 4AD8			l_0C18
  6308
  6309 				; optimize OK (service.pas), line = 1129
  6310
  6311 4AD8 AD 34 A0			lda W
  6312 4ADB 8D 32 A0			sta RESULT
  6313 4ADE AD 35 A0			lda W+1
  6314 4AE1 8D 33 A0			sta RESULT+1
  6315 4AE4			@exit
  6316
  6317 				; ------------------------------------------------------------
  6318
  6319 = A02E			BALL	= DATAORIGIN+$0299
  6320 = 9D95			BALL.X	= DATAORIGIN+$0000
  6321 = 9D97			BALL.Y	= DATAORIGIN+$0002
  6322 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  6323 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  6324 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  6325 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  6326 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  6327 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  6328 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  6329 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  6330 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  6331 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  6332 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  6333 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  6334 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  6335 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  6336 = A032			RESULT	= DATAORIGIN+$029D
  6337 = A034			W	= DATAORIGIN+$029F
  6338
  6339 = A02E			@VarData	= BALL
  6340 = 0004			@VarDataSize	= 4
  6341
  6342 4AE4 60				rts						; ret
  6343 				.endl
  6344
  6345 4AE5			.local	START_BALL					; PROCEDURE
  6346
  6347 				; optimize OK (service.pas), line = 1138
  6348
  6349 4AE5 AC 36 A0 84 84 AC + 	mwy BALL :bp2
  6350 4AEF A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6351 4AF1 AD 09 9F			lda VAUS.X
  6352 4AF4 18 71 84			add (:bp2),y
  6353 4AF7 85 9F			sta :STACKORIGIN+9
  6354 4AF9 C8				iny
  6355 4AFA A9 00			lda #$00
  6356 4AFC 71 84			adc (:bp2),y
  6357 4AFE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6358 4B00 A0 00			ldy #BALL.X-DATAORIGIN
  6359 4B02 A5 9F			lda :STACKORIGIN+9
  6360 4B04 91 84			sta (:bp2),y
  6361 4B06 C8				iny
  6362 4B07 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6363 4B09 91 84			sta (:bp2),y
  6364
  6365 				; optimize OK (service.pas), line = 1144
  6366
  6367 4B0B A0 02			ldy #BALL.Y-DATAORIGIN
  6368 4B0D AD 0A 9F			lda VAUS.Y
  6369 4B10 38 E9 03			sub #$03
  6370 4B13 91 84			sta (:bp2),y
  6371 4B15 C8				iny
  6372 4B16 A9 00			lda #$00
  6373 4B18 E9 00			sbc #$00
  6374 4B1A 91 84			sta (:bp2),y
  6375
  6376 				; optimize OK (service.pas), line = 1149
  6377
  6378 4B1C A0 04			ldy #BALL.FINEX-DATAORIGIN
  6379 4B1E A9 00			lda #$00
  6380 4B20 91 84			sta (:bp2),y
  6381 4B22 C8				iny
  6382 4B23 91 84			sta (:bp2),y
  6383
  6384 				; optimize OK (service.pas), line = 1150
  6385
  6386 4B25 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6387 4B27 91 84			sta (:bp2),y
  6388 4B29 C8				iny
  6389 4B2A 91 84			sta (:bp2),y
  6390
  6391 				; optimize OK (service.pas), line = 1152
  6392
  6393 4B2C A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6394 4B2E A9 01			lda #$01
  6395 4B30 91 84			sta (:bp2),y
  6396
  6397 				; optimize OK (service.pas), line = 1154
  6398
  6399 4B32 A0 14			ldy #BALL.SBD-DATAORIGIN
  6400 4B34 A9 00			lda #$00
  6401 4B36 91 84			sta (:bp2),y
  6402 4B38 C8				iny
  6403 4B39 91 84			sta (:bp2),y
  6404
  6405 				; optimize OK (service.pas), line = 1155
  6406
  6407 4B3B A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6408 4B3D 91 84			sta (:bp2),y
  6409
  6410 				; ------------------------------------------------------------
  6411
  6412 = A036			BALL	= DATAORIGIN+$02A1
  6413 = 9D95			BALL.X	= DATAORIGIN+$0000
  6414 = 9D97			BALL.Y	= DATAORIGIN+$0002
  6415 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  6416 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  6417 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  6418 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  6419 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  6420 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  6421 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  6422 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  6423 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  6424 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  6425 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  6426 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  6427 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  6428 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  6429
  6430 = A036			@VarData	= BALL
  6431 = 0002			@VarDataSize	= 2
  6432
  6433 4B3F			@exit
  6434 					.ifdef @new
  6435 					lda <@VarData
  6436 					sta :ztmp
  6437 					lda >@VarData
  6438 					ldy #@VarDataSize-1
  6439 					jmp @FreeMem
  6440 					els
  6441 4B3F 60				rts						; ret
  6442 					eif
  6443 				.endl
  6444
  6445 4B40			.local	BALL_SPEED					; FUNCTION
  6446
  6447 				; ------------------------------------------------------------
  6448
  6449 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6450 				; as Pointer
  6451 4B40 B5 96			lda :STACKORIGIN,x
  6452 4B42 85 84			sta :bp2
  6453 4B44 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6454 4B46 85 85			sta :bp2+1
  6455 4B48 A0 1B			ldy #$1B
  6456 4B4A B1 84 99 3A A0 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6457 4B52 CA				dex
  6458 4B53			@main
  6459
  6460 				; optimize OK (service.pas), line = 1166
  6461
  6462 4B53 AD 4A A0			lda BALL.SPEEDX
  6463 4B56 85 8A			sta SYSTEM.ABS.@010184000.X
  6464 4B58 AD 4B A0			lda BALL.SPEEDX+1
  6465 4B5B 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6466 4B5D 20 0F 2B			jsr SYSTEM.ABS.@010184000
  6467 4B60 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6468 4B62 8D 5C A0			sta A
  6469 4B65 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6470 4B67 8D 5D A0			sta A+1
  6471
  6472 				; optimize OK (service.pas), line = 1167
  6473
  6474 4B6A AD 4C A0			lda BALL.SPEEDY
  6475 4B6D 85 8A			sta SYSTEM.ABS.@010184000.X
  6476 4B6F AD 4D A0			lda BALL.SPEEDY+1
  6477 4B72 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6478 4B74 20 0F 2B			jsr SYSTEM.ABS.@010184000
  6479 4B77 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6480 4B79 8D 5E A0			sta B
  6481 4B7C A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6482 4B7E 8D 5F A0			sta B+1
  6483
  6484 				; optimize OK (service.pas), line = 1169
  6485
  6486 4B81 AD 5C A0			lda A
  6487 4B84 85 8E			sta :ecx
  6488 4B86 85 86			sta :eax
  6489 4B88 AD 5D A0			lda A+1
  6490 4B8B 85 8F			sta :ecx+1
  6491 4B8D 85 87			sta :eax+1
  6492 					.ifdef fmulinit
  6493 					fmulu_16
  6494 					els
  6495 4B8F 20 3B 23			imulCX
  6496 					eif
  6497 4B92 A5 86			lda :eax
  6498 4B94 85 9F			sta :STACKORIGIN+9
  6499 4B96 A5 87			lda :eax+1
  6500 4B98 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6501 4B9A A5 88			lda :eax+2
  6502 4B9C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6503 4B9E A5 89			lda :eax+3
  6504 4BA0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6505 4BA2 AD 5E A0			lda B
  6506 4BA5 85 8E			sta :ecx
  6507 4BA7 85 86			sta :eax
  6508 4BA9 AD 5F A0			lda B+1
  6509 4BAC 85 8F			sta :ecx+1
  6510 4BAE 85 87			sta :eax+1
  6511 					.ifdef fmulinit
  6512 					fmulu_16
  6513 					els
  6514 4BB0 20 3B 23			imulCX
  6515 					eif
  6516 4BB3 A5 9F			lda :STACKORIGIN+9
  6517 4BB5 18 65 86			add :eax
  6518 4BB8 8D 58 A0			sta I
  6519 4BBB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6520 4BBD 65 87			adc :eax+1
  6521 4BBF 8D 59 A0			sta I+1
  6522 4BC2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6523 4BC4 65 88			adc :eax+2
  6524 4BC6 8D 5A A0			sta I+2
  6525 4BC9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6526 4BCB 65 89			adc :eax+3
  6527 4BCD 8D 5B A0			sta I+3
  6528
  6529 				; optimize OK (service.pas), line = 1171
  6530
  6531 4BD0 AD 58 A0			lda I
  6532 4BD3 8D 73 9E			sta SQRT32.V
  6533 4BD6 AD 59 A0			lda I+1
  6534 4BD9 8D 74 9E			sta SQRT32.V+1
  6535 4BDC AD 5A A0			lda I+2
  6536 4BDF 8D 75 9E			sta SQRT32.V+2
  6537 4BE2 AD 5B A0			lda I+3
  6538 4BE5 8D 76 9E			sta SQRT32.V+3
  6539 4BE8 20 7E 38			jsr SQRT32
  6540 4BEB AD 77 9E			lda SQRT32.RESULT
  6541 4BEE 8D 56 A0			sta RESULT
  6542 4BF1 AD 78 9E			lda SQRT32.RESULT+1
  6543 4BF4 8D 57 A0			sta RESULT+1
  6544 4BF7			@exit
  6545
  6546 				; ------------------------------------------------------------
  6547
  6548 = A03A			adr.BALL	= DATAORIGIN+$02A5	; [28] RECORD
  6549 4BF7			.var BALL	= adr.BALL .word
  6550 = A03A			BALL.X	= DATAORIGIN+$02A5
  6551 = A03C			BALL.Y	= DATAORIGIN+$02A7
  6552 = A03E			BALL.FINEX	= DATAORIGIN+$02A9
  6553 = A040			BALL.FINEY	= DATAORIGIN+$02AB
  6554 = A042			BALL.OLDX	= DATAORIGIN+$02AD
  6555 = A044			BALL.OLDY	= DATAORIGIN+$02AF
  6556 = A046			BALL.SPEED	= DATAORIGIN+$02B1
  6557 = A048			BALL.FINESPEED	= DATAORIGIN+$02B3
  6558 = A04A			BALL.SPEEDX	= DATAORIGIN+$02B5
  6559 = A04C			BALL.SPEEDY	= DATAORIGIN+$02B7
  6560 = A04E			BALL.SBD	= DATAORIGIN+$02B9
  6561 = A050			BALL.BRWHIT	= DATAORIGIN+$02BB
  6562 = A051			BALL.INPLAY	= DATAORIGIN+$02BC
  6563 = A052			BALL.LAUNCH	= DATAORIGIN+$02BD
  6564 = A053			BALL.ONVAUS	= DATAORIGIN+$02BE
  6565 = A055			BALL.STM	= DATAORIGIN+$02C0
  6566 = A056			RESULT	= DATAORIGIN+$02C1
  6567 = A058			I	= DATAORIGIN+$02C3
  6568 = A05C			A	= DATAORIGIN+$02C7
  6569 = A05E			B	= DATAORIGIN+$02C9
  6570
  6571 = A03A			@VarData	= BALL.X
  6572 = 0024			@VarDataSize	= 36
  6573
  6574 4BF7 60				rts						; ret
  6575 = 4BF8 3A A0		BALL
  6575 				.endl
  6576
  6577 4BFA			.local	MOVE_BALL					; PROCEDURE
  6578
  6579 				; optimize OK (service.pas), line = 1189
  6580
  6581 4BFA AC 60 A0 84 84 AC + 	mwy BALL :bp2
  6582 4C04 A0 00			ldy #BALL.X-DATAORIGIN
  6583 4C06 B1 84			lda (:bp2),y
  6584 4C08 C8				iny
  6585 4C09 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6586 4C0B A9 00			lda #$00
  6587 4C0D A0 04			ldy #BALL.FINEX-DATAORIGIN
  6588 4C0F 18 71 84			add (:bp2),y
  6589 4C12 85 9F			sta :STACKORIGIN+9
  6590 4C14 C8				iny
  6591 4C15 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6592 4C17 71 84			adc (:bp2),y
  6593 4C19 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6594 4C1B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6595 4C1D A5 9F			lda :STACKORIGIN+9
  6596 4C1F 18 71 84			add (:bp2),y
  6597 4C22 8D 67 A0			sta X
  6598 4C25 C8				iny
  6599 4C26 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6600 4C28 71 84			adc (:bp2),y
  6601 4C2A 8D 68 A0			sta X+1
  6602
  6603 				; optimize OK (service.pas), line = 1190
  6604
  6605 4C2D A0 02			ldy #BALL.Y-DATAORIGIN
  6606 4C2F B1 84			lda (:bp2),y
  6607 4C31 C8				iny
  6608 4C32 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6609 4C34 A9 00			lda #$00
  6610 4C36 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6611 4C38 18 71 84			add (:bp2),y
  6612 4C3B 85 9F			sta :STACKORIGIN+9
  6613 4C3D C8				iny
  6614 4C3E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6615 4C40 71 84			adc (:bp2),y
  6616 4C42 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6617 4C44 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6618 4C46 A5 9F			lda :STACKORIGIN+9
  6619 4C48 18 71 84			add (:bp2),y
  6620 4C4B 8D 69 A0			sta Y
  6621 4C4E C8				iny
  6622 4C4F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6623 4C51 71 84			adc (:bp2),y
  6624 4C53 8D 6A A0			sta Y+1
  6625
  6626 				; optimize OK (service.pas), line = 1192
  6627
  6628 4C56 A0 00			ldy #BALL.X-DATAORIGIN
  6629 4C58 AD 68 A0			lda X+1
  6630 4C5B 91 84			sta (:bp2),y
  6631 4C5D C8				iny
  6632 4C5E A9 00			lda #$00
  6633 4C60 91 84			sta (:bp2),y
  6634
  6635 				; optimize OK (service.pas), line = 1193
  6636
  6637 4C62 A0 02			ldy #BALL.Y-DATAORIGIN
  6638 4C64 AD 6A A0			lda Y+1
  6639 4C67 91 84			sta (:bp2),y
  6640 4C69 C8				iny
  6641 4C6A A9 00			lda #$00
  6642 4C6C 91 84			sta (:bp2),y
  6643
  6644 				; optimize OK (service.pas), line = 1195
  6645
  6646 4C6E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6647 4C70 AD 67 A0			lda X
  6648 4C73 91 84			sta (:bp2),y
  6649 4C75 C8				iny
  6650 4C76 A9 00			lda #$00
  6651 4C78 91 84			sta (:bp2),y
  6652
  6653 				; optimize OK (service.pas), line = 1196
  6654
  6655 4C7A A0 06			ldy #BALL.FINEY-DATAORIGIN
  6656 4C7C AD 69 A0			lda Y
  6657 4C7F 91 84			sta (:bp2),y
  6658 4C81 C8				iny
  6659 4C82 A9 00			lda #$00
  6660 4C84 91 84			sta (:bp2),y
  6661
  6662 				; optimize OK (service.pas), line = 1201
  6663
  6664 4C86 A0 00			ldy #BALL.X-DATAORIGIN
  6665 4C88 B1 84			lda (:bp2),y
  6666 4C8A C8				iny
  6667 4C8B C9 D9			cmp #$D9
  6668 4C8D B1 84			lda (:bp2),y
  6669 4C8F E9 00			sbc #$00
  6670 4C91 50 02			svc
  6671 4C93 49 80			eor #$80
  6672 4C95 30 67			jmi l_0D12
  6673
  6674 				; optimize OK (service.pas), line = 1203
  6675
  6676 4C97 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6677 4C99 A9 00			lda #$00
  6678 4C9B 38 F1 84			sub (:bp2),y
  6679 4C9E 85 9F			sta :STACKORIGIN+9
  6680 4CA0 C8				iny
  6681 4CA1 A9 00			lda #$00
  6682 4CA3 F1 84			sbc (:bp2),y
  6683 4CA5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6684 4CA7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6685 4CA9 A5 9F			lda :STACKORIGIN+9
  6686 4CAB 91 84			sta (:bp2),y
  6687 4CAD C8				iny
  6688 4CAE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6689 4CB0 91 84			sta (:bp2),y
  6690
  6691 				; optimize OK (service.pas), line = 1204
  6692
  6693 4CB2 A0 00			ldy #BALL.X-DATAORIGIN
  6694 4CB4 A9 B0			lda #$B0
  6695 4CB6 38 F1 84			sub (:bp2),y
  6696 4CB9 85 9F			sta :STACKORIGIN+9
  6697 4CBB C8				iny
  6698 4CBC A9 01			lda #$01
  6699 4CBE F1 84			sbc (:bp2),y
  6700 4CC0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6701 4CC2 A0 00			ldy #BALL.X-DATAORIGIN
  6702 4CC4 A5 9F			lda :STACKORIGIN+9
  6703 4CC6 91 84			sta (:bp2),y
  6704 4CC8 C8				iny
  6705 4CC9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6706 4CCB 91 84			sta (:bp2),y
  6707
  6708 				; optimize OK (service.pas), line = 1205
  6709
  6710 4CCD A0 04			ldy #BALL.FINEX-DATAORIGIN
  6711 4CCF A9 FF			lda #$FF
  6712 4CD1 51 84			eor (:bp2),y
  6713 4CD3 85 9F			sta :STACKORIGIN+9
  6714 4CD5 C8				iny
  6715 4CD6 A9 00			lda #$00
  6716 4CD8 F1 84			sbc (:bp2),y
  6717 4CDA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6718 4CDC A0 04			ldy #BALL.FINEX-DATAORIGIN
  6719 4CDE A5 9F			lda :STACKORIGIN+9
  6720 4CE0 91 84			sta (:bp2),y
  6721 4CE2 C8				iny
  6722 4CE3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6723 4CE5 91 84			sta (:bp2),y
  6724
  6725 				; optimize OK (service.pas), line = 1206
  6726
  6727 4CE7 A9 F0			lda #$F0
  6728 4CE9 8D 6F 9E			sta BALL_BLOCK_SOUND.A
  6729 4CEC A9 00			lda #$00
  6730 4CEE 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
  6731 4CF1 A9 05			lda #$05
  6732 4CF3 8D 71 9E			sta BALL_BLOCK_SOUND.B
  6733 4CF6 A9 00			lda #$00
  6734 4CF8 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
  6735 4CFB 20 7D 38			jsr BALL_BLOCK_SOUND
  6736 4CFE			l_0D12
  6737
  6738 				; optimize OK (service.pas), line = 1211
  6739
  6740 4CFE AC 60 A0 84 84 AC + 	mwy BALL :bp2
  6741 4D08 A0 00			ldy #BALL.X-DATAORIGIN
  6742 4D0A B1 84			lda (:bp2),y
  6743 4D0C C8				iny
  6744 4D0D C9 0A			cmp #$0A
  6745 4D0F B1 84			lda (:bp2),y
  6746 4D11 E9 00			sbc #$00
  6747 4D13 50 02			svc
  6748 4D15 49 80			eor #$80
  6749 4D17 10 67			jpl l_0D47
  6750
  6751 				; optimize OK (service.pas), line = 1213
  6752
  6753 4D19 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6754 4D1B A9 00			lda #$00
  6755 4D1D 38 F1 84			sub (:bp2),y
  6756 4D20 85 9F			sta :STACKORIGIN+9
  6757 4D22 C8				iny
  6758 4D23 A9 00			lda #$00
  6759 4D25 F1 84			sbc (:bp2),y
  6760 4D27 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6761 4D29 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6762 4D2B A5 9F			lda :STACKORIGIN+9
  6763 4D2D 91 84			sta (:bp2),y
  6764 4D2F C8				iny
  6765 4D30 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6766 4D32 91 84			sta (:bp2),y
  6767
  6768 				; optimize OK (service.pas), line = 1214
  6769
  6770 4D34 A0 00			ldy #BALL.X-DATAORIGIN
  6771 4D36 A9 14			lda #$14
  6772 4D38 38 F1 84			sub (:bp2),y
  6773 4D3B 85 9F			sta :STACKORIGIN+9
  6774 4D3D C8				iny
  6775 4D3E A9 00			lda #$00
  6776 4D40 F1 84			sbc (:bp2),y
  6777 4D42 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6778 4D44 A0 00			ldy #BALL.X-DATAORIGIN
  6779 4D46 A5 9F			lda :STACKORIGIN+9
  6780 4D48 91 84			sta (:bp2),y
  6781 4D4A C8				iny
  6782 4D4B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6783 4D4D 91 84			sta (:bp2),y
  6784
  6785 				; optimize OK (service.pas), line = 1215
  6786
  6787 4D4F A0 04			ldy #BALL.FINEX-DATAORIGIN
  6788 4D51 A9 FF			lda #$FF
  6789 4D53 51 84			eor (:bp2),y
  6790 4D55 85 9F			sta :STACKORIGIN+9
  6791 4D57 C8				iny
  6792 4D58 A9 00			lda #$00
  6793 4D5A F1 84			sbc (:bp2),y
  6794 4D5C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6795 4D5E A0 04			ldy #BALL.FINEX-DATAORIGIN
  6796 4D60 A5 9F			lda :STACKORIGIN+9
  6797 4D62 91 84			sta (:bp2),y
  6798 4D64 C8				iny
  6799 4D65 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6800 4D67 91 84			sta (:bp2),y
  6801
  6802 				; optimize OK (service.pas), line = 1216
  6803
  6804 4D69 A9 F0			lda #$F0
  6805 4D6B 8D 6F 9E			sta BALL_BLOCK_SOUND.A
  6806 4D6E A9 00			lda #$00
  6807 4D70 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
  6808 4D73 A9 05			lda #$05
  6809 4D75 8D 71 9E			sta BALL_BLOCK_SOUND.B
  6810 4D78 A9 00			lda #$00
  6811 4D7A 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
  6812 4D7D 20 7D 38			jsr BALL_BLOCK_SOUND
  6813 4D80			l_0D47
  6814
  6815 				; optimize OK (service.pas), line = 1221
  6816
  6817 4D80 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  6818 4D8A A0 02			ldy #BALL.Y-DATAORIGIN
  6819 4D8C B1 84			lda (:bp2),y
  6820 4D8E C8				iny
  6821 4D8F C9 0C			cmp #$0C
  6822 4D91 B1 84			lda (:bp2),y
  6823 4D93 E9 00			sbc #$00
  6824 4D95 50 02			svc
  6825 4D97 49 80			eor #$80
  6826 4D99 10 67			jpl l_0D7C
  6827
  6828 				; optimize OK (service.pas), line = 1223
  6829
  6830 4D9B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6831 4D9D A9 00			lda #$00
  6832 4D9F 38 F1 84			sub (:bp2),y
  6833 4DA2 85 9F			sta :STACKORIGIN+9
  6834 4DA4 C8				iny
  6835 4DA5 A9 00			lda #$00
  6836 4DA7 F1 84			sbc (:bp2),y
  6837 4DA9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6838 4DAB A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6839 4DAD A5 9F			lda :STACKORIGIN+9
  6840 4DAF 91 84			sta (:bp2),y
  6841 4DB1 C8				iny
  6842 4DB2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6843 4DB4 91 84			sta (:bp2),y
  6844
  6845 				; optimize OK (service.pas), line = 1224
  6846
  6847 4DB6 A0 02			ldy #BALL.Y-DATAORIGIN
  6848 4DB8 A9 18			lda #$18
  6849 4DBA 38 F1 84			sub (:bp2),y
  6850 4DBD 85 9F			sta :STACKORIGIN+9
  6851 4DBF C8				iny
  6852 4DC0 A9 00			lda #$00
  6853 4DC2 F1 84			sbc (:bp2),y
  6854 4DC4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6855 4DC6 A0 02			ldy #BALL.Y-DATAORIGIN
  6856 4DC8 A5 9F			lda :STACKORIGIN+9
  6857 4DCA 91 84			sta (:bp2),y
  6858 4DCC C8				iny
  6859 4DCD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6860 4DCF 91 84			sta (:bp2),y
  6861
  6862 				; optimize OK (service.pas), line = 1225
  6863
  6864 4DD1 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6865 4DD3 A9 FF			lda #$FF
  6866 4DD5 51 84			eor (:bp2),y
  6867 4DD7 85 9F			sta :STACKORIGIN+9
  6868 4DD9 C8				iny
  6869 4DDA A9 00			lda #$00
  6870 4DDC F1 84			sbc (:bp2),y
  6871 4DDE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6872 4DE0 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6873 4DE2 A5 9F			lda :STACKORIGIN+9
  6874 4DE4 91 84			sta (:bp2),y
  6875 4DE6 C8				iny
  6876 4DE7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6877 4DE9 91 84			sta (:bp2),y
  6878
  6879 				; optimize OK (service.pas), line = 1226
  6880
  6881 4DEB A9 F0			lda #$F0
  6882 4DED 8D 6F 9E			sta BALL_BLOCK_SOUND.A
  6883 4DF0 A9 00			lda #$00
  6884 4DF2 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
  6885 4DF5 A9 05			lda #$05
  6886 4DF7 8D 71 9E			sta BALL_BLOCK_SOUND.B
  6887 4DFA A9 00			lda #$00
  6888 4DFC 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
  6889 4DFF 20 7D 38			jsr BALL_BLOCK_SOUND
  6890 4E02			l_0D7C
  6891
  6892 				; optimize OK (service.pas), line = 1234
  6893
  6894 4E02 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  6895 4E0C A0 02			ldy #BALL.Y-DATAORIGIN
  6896 4E0E B1 84			lda (:bp2),y
  6897 4E10 18 69 03			add #$03
  6898 4E13 85 9F			sta :STACKORIGIN+9
  6899 4E15 C8				iny
  6900 4E16 B1 84			lda (:bp2),y
  6901 4E18 69 00			adc #$00
  6902 4E1A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6903 4E1C A0 01			ldy #1
  6904 4E1E A5 9F			lda :STACKORIGIN+9
  6905 4E20 C9 B9			cmp #$B9
  6906 4E22 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6907 4E24 E9 00			sbc #$00
  6908 4E26 50 02			svc
  6909 4E28 49 80			eor #$80
  6910 4E2A 10 01			bpl @+
  6911 4E2C 88				dey
  6912 				@
  6913 4E2D 98				tya
  6914 4E2E 8D 64 A0			sta B0
  6915
  6916 				; optimize OK (service.pas), line = 1235
  6917
  6918 4E31 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6919 4E33 B1 84			lda (:bp2),y
  6920 4E35 85 9F			sta :STACKORIGIN+9
  6921 4E37 C8				iny
  6922 4E38 B1 84			lda (:bp2),y
  6923 4E3A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6924 4E3C A0 01			ldy #1
  6925 4E3E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6926 4E40 30 04			bmi @+
  6927 4E42 05 9F			ora :STACKORIGIN+9
  6928 4E44 D0 01			sne
  6929 				@
  6930 4E46 88				dey
  6931 				@
  6932 4E47 98				tya
  6933 4E48 8D 65 A0			sta B1
  6934
  6935 				; optimize OK (service.pas), line = 1236
  6936
  6937 4E4B A0 0A			ldy #BALL.OLDY-DATAORIGIN
  6938 4E4D B1 84			lda (:bp2),y
  6939 4E4F 85 9F			sta :STACKORIGIN+9
  6940 4E51 C8				iny
  6941 4E52 B1 84			lda (:bp2),y
  6942 4E54 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6943 4E56 A0 01			ldy #1
  6944 4E58 A5 9F			lda :STACKORIGIN+9
  6945 4E5A C9 B9			cmp #$B9
  6946 4E5C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6947 4E5E E9 00			sbc #$00
  6948 4E60 50 02			svc
  6949 4E62 49 80			eor #$80
  6950 4E64 30 01			bmi @+
  6951 4E66 88				dey
  6952 				@
  6953 4E67 98				tya
  6954 4E68 8D 66 A0			sta B2
  6955
  6956 				; optimize OK (service.pas), line = 1239
  6957
  6958 4E6B AD 64 A0			lda B0
  6959 4E6E 2D 65 A0			and B1
  6960 4E71 2D 66 A0			and B2
  6961 4E74 D0 03 4C 22 51		jeq l_0DDD
  6962
  6963 				; optimize OK (service.pas), line = 1243
  6964
  6965 4E79 A0 00			ldy #BALL.X-DATAORIGIN
  6966 4E7B B1 84			lda (:bp2),y
  6967 4E7D 85 9F			sta :STACKORIGIN+9
  6968 4E7F C8				iny
  6969 4E80 AD 09 9F			lda VAUS.X
  6970 4E83 38 E9 03			sub #$03
  6971 4E86 85 A0			sta :STACKORIGIN+10
  6972 4E88 A9 00			lda #$00
  6973 4E8A E9 00			sbc #$00
  6974 4E8C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6975 4E8E A5 A0			lda :STACKORIGIN+10
  6976 4E90 C5 9F			cmp :STACKORIGIN+9
  6977 4E92 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6978 4E94 F1 84			sbc (:bp2),y
  6979 4E96 50 02			svc
  6980 4E98 49 80			eor #$80
  6981 4E9A 30 03 4C 22 51		jpl l_0E0C
  6982 4E9F A0 00			ldy #BALL.X-DATAORIGIN
  6983 4EA1 B1 84			lda (:bp2),y
  6984 4EA3 85 A0			sta :STACKORIGIN+10
  6985 4EA5 C8				iny
  6986 4EA6 AD 09 9F			lda VAUS.X
  6987 4EA9 18 6D 11 9F			add VAUS.WIDTH
  6988 4EAD 85 A1			sta :STACKORIGIN+11
  6989 4EAF A9 00			lda #$00
  6990 4EB1 69 00			adc #$00
  6991 4EB3 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6992 4EB5 A5 A1			lda :STACKORIGIN+11
  6993 4EB7 18 69 03			add #$03
  6994 4EBA 85 A1			sta :STACKORIGIN+11
  6995 4EBC A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  6996 4EBE 69 00			adc #$00
  6997 4EC0 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6998 4EC2 A5 A0			lda :STACKORIGIN+10
  6999 4EC4 C5 A1			cmp :STACKORIGIN+11
  7000 4EC6 B1 84			lda (:bp2),y
  7001 4EC8 E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7002 4ECA 50 02			svc
  7003 4ECC 49 80			eor #$80
  7004 4ECE 30 03 4C 22 51		jpl l_0E0C
  7005
  7006 				; optimize OK (service.pas), line = 1246
  7007
  7008 4ED3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7009 4ED5 A9 00			lda #$00
  7010 4ED7 38 F1 84			sub (:bp2),y
  7011 4EDA 85 9F			sta :STACKORIGIN+9
  7012 4EDC C8				iny
  7013 4EDD A9 00			lda #$00
  7014 4EDF F1 84			sbc (:bp2),y
  7015 4EE1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7016 4EE3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7017 4EE5 A5 9F			lda :STACKORIGIN+9
  7018 4EE7 91 84			sta (:bp2),y
  7019 4EE9 C8				iny
  7020 4EEA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7021 4EEC 91 84			sta (:bp2),y
  7022
  7023 				; optimize OK (service.pas), line = 1248
  7024
  7025 4EEE AD 15 9F			lda VAUS.LETTER
  7026 4EF1 C9 06			cmp #$06
  7027 4EF3 D0 2C			jne l_0E30
  7028 4EF5 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7029 4EF7 B1 84			lda (:bp2),y
  7030 4EF9 D0 26			jne l_0E30
  7031
  7032 				; optimize OK (service.pas), line = 1250
  7033
  7034 4EFB A0 1B			ldy #BALL.STM-DATAORIGIN
  7035 4EFD 91 84			sta (:bp2),y
  7036
  7037 				; optimize OK (service.pas), line = 1251
  7038
  7039 4EFF A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7040 4F01 A9 01			lda #$01
  7041 4F03 91 84			sta (:bp2),y
  7042
  7043 				; optimize OK (service.pas), line = 1252
  7044
  7045 4F05 A0 00			ldy #BALL.X-DATAORIGIN
  7046 4F07 B1 84			lda (:bp2),y
  7047 4F09 38 ED 09 9F			sub VAUS.X
  7048 4F0D 85 9F			sta :STACKORIGIN+9
  7049 4F0F C8				iny
  7050 4F10 B1 84			lda (:bp2),y
  7051 4F12 E9 00			sbc #$00
  7052 4F14 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7053 4F16 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7054 4F18 A5 9F			lda :STACKORIGIN+9
  7055 4F1A 91 84			sta (:bp2),y
  7056 4F1C C8				iny
  7057 4F1D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7058 4F1F 91 84			sta (:bp2),y
  7059 4F21			l_0E30
  7060
  7061 				; optimize OK (service.pas), line = 1255
  7062
  7063 4F21 A9 2C			lda #$2C
  7064 4F23 8D 6F 9E			sta BALL_BLOCK_SOUND.A
  7065 4F26 A9 01			lda #$01
  7066 4F28 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
  7067 4F2B A9 06			lda #$06
  7068 4F2D 8D 71 9E			sta BALL_BLOCK_SOUND.B
  7069 4F30 A9 00			lda #$00
  7070 4F32 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
  7071 4F35 20 7D 38			jsr BALL_BLOCK_SOUND
  7072
  7073 				; optimize OK (service.pas), line = 1259
  7074
  7075 4F38 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  7076 4F42 A0 00			ldy #BALL.X-DATAORIGIN
  7077 4F44 B1 84			lda (:bp2),y
  7078 4F46 85 9F			sta :STACKORIGIN+9
  7079 4F48 C8				iny
  7080 4F49 AD 09 9F			lda VAUS.X
  7081 4F4C 18 69 0A			add #$0A
  7082 4F4F 85 A0			sta :STACKORIGIN+10
  7083 4F51 A9 00			lda #$00
  7084 4F53 69 00			adc #$00
  7085 4F55 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7086 4F57 A5 9F			lda :STACKORIGIN+9
  7087 4F59 C5 A0			cmp :STACKORIGIN+10
  7088 4F5B B1 84			lda (:bp2),y
  7089 4F5D E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7090 4F5F 50 02			svc
  7091 4F61 49 80			eor #$80
  7092 4F63 30 03 4C 26 50		jpl l_0E60
  7093
  7094 				; optimize OK (service.pas), line = 1262
  7095
  7096 4F68 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7097 4F6A A9 00			lda #$00
  7098 4F6C 38 F1 84			sub (:bp2),y
  7099 4F6F 85 9F			sta :STACKORIGIN+9
  7100 4F71 C8				iny
  7101 4F72 A9 00			lda #$00
  7102 4F74 F1 84			sbc (:bp2),y
  7103 4F76 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7104 4F78 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7105 4F7A A5 9F			lda :STACKORIGIN+9
  7106 4F7C 91 84			sta (:bp2),y
  7107 4F7E C8				iny
  7108 4F7F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7109 4F81 91 84			sta (:bp2),y
  7110
  7111 				; optimize OK (service.pas), line = 1266
  7112
  7113 4F83 AD 60 A0			lda BALL
  7114 4F86 8D 2E A0			sta GET_BALL_DIRECTION.BALL
  7115 4F89 AD 61 A0			lda BALL+1
  7116 4F8C 8D 2F A0			sta GET_BALL_DIRECTION.BALL+1
  7117 4F8F 20 C7 48			jsr GET_BALL_DIRECTION
  7118 4F92 E8				inx
  7119 4F93 AD 32 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7120 4F98 AD 33 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7121 4F9D A9 1E			lda #$1E
  7122 4F9F 20 41 33			jsr SYSTEM.RANDOM.@010180000
  7123 4FA2 B5 96			lda :STACKORIGIN,x
  7124 4FA4 18 6D CC 9D			add SYSTEM.RANDOM.@010180000.RESULT
  7125 4FA8 8D 6B A0			sta ANGLE
  7126 4FAB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7127 4FAD 69 00			adc #$00
  7128 4FAF 8D 6C A0			sta ANGLE+1
  7129 4FB2 CA				dex
  7130
  7131 				; optimize OK (service.pas), line = 1274
  7132
  7133 4FB3 A9 A0			lda #$A0
  7134 4FB5 8D CA 9F			sta MIN.A
  7135 4FB8 A9 00			lda #$00
  7136 4FBA 8D CB 9F			sta MIN.A+1
  7137 4FBD AD 6B A0			lda ANGLE
  7138 4FC0 8D CC 9F			sta MIN.B
  7139 4FC3 AD 6C A0			lda ANGLE+1
  7140 4FC6 8D CD 9F			sta MIN.B+1
  7141 4FC9 20 BD 3C			jsr MIN
  7142 4FCC A9 78			lda #$78
  7143 4FCE 8D C4 9F			sta MAX.A
  7144 4FD1 A9 00			lda #$00
  7145 4FD3 8D C5 9F			sta MAX.A+1
  7146 4FD6 AD CE 9F			lda MIN.RESULT
  7147 4FD9 8D C6 9F			sta MAX.B
  7148 4FDC AD CF 9F			lda MIN.RESULT+1
  7149 4FDF 8D C7 9F			sta MAX.B+1
  7150 4FE2 20 92 3C			jsr MAX
  7151 4FE5 AD 60 A0			lda BALL
  7152 4FE8 8D 24 A0			sta SET_BALL_DIRECTION.BALL
  7153 4FEB AD 61 A0			lda BALL+1
  7154 4FEE 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
  7155 4FF1 AD C8 9F			lda MAX.RESULT
  7156 4FF4 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
  7157 4FF7 AD C9 9F			lda MAX.RESULT+1
  7158 4FFA 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7159 4FFD 20 E4 46			jsr SET_BALL_DIRECTION
  7160
  7161 				; optimize OK (service.pas), line = 1279
  7162
  7163 5000 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  7164 500A A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7165 500C B1 84			lda (:bp2),y
  7166 500E 8D 12 A0			sta SET_BALL_SPEED.SPEED
  7167 5011 C8				iny
  7168 5012 B1 84			lda (:bp2),y
  7169 5014 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
  7170 5017 AD 60 A0			lda BALL
  7171 501A 8D 0E A0			sta SET_BALL_SPEED.BALL
  7172 501D AD 61 A0			lda BALL+1
  7173 5020 8D 0F A0			sta SET_BALL_SPEED.BALL+1
  7174 5023 20 01 45			jsr SET_BALL_SPEED
  7175 5026			l_0E60
  7176
  7177 				; optimize OK (service.pas), line = 1285
  7178
  7179 5026 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  7180 5030 A0 00			ldy #BALL.X-DATAORIGIN
  7181 5032 B1 84			lda (:bp2),y
  7182 5034 85 9F			sta :STACKORIGIN+9
  7183 5036 C8				iny
  7184 5037 AD 09 9F			lda VAUS.X
  7185 503A 18 6D 11 9F			add VAUS.WIDTH
  7186 503E 85 A0			sta :STACKORIGIN+10
  7187 5040 A9 00			lda #$00
  7188 5042 69 00			adc #$00
  7189 5044 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7190 5046 A5 A0			lda :STACKORIGIN+10
  7191 5048 38 E9 0A			sub #$0A
  7192 504B 85 A0			sta :STACKORIGIN+10
  7193 504D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7194 504F E9 00			sbc #$00
  7195 5051 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7196 5053 A5 A0			lda :STACKORIGIN+10
  7197 5055 C5 9F			cmp :STACKORIGIN+9
  7198 5057 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7199 5059 F1 84			sbc (:bp2),y
  7200 505B 50 02			svc
  7201 505D 49 80			eor #$80
  7202 505F 30 03 4C 22 51		jpl l_0EA1
  7203
  7204 				; optimize OK (service.pas), line = 1287
  7205
  7206 5064 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7207 5066 A9 00			lda #$00
  7208 5068 38 F1 84			sub (:bp2),y
  7209 506B 85 9F			sta :STACKORIGIN+9
  7210 506D C8				iny
  7211 506E A9 00			lda #$00
  7212 5070 F1 84			sbc (:bp2),y
  7213 5072 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7214 5074 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7215 5076 A5 9F			lda :STACKORIGIN+9
  7216 5078 91 84			sta (:bp2),y
  7217 507A C8				iny
  7218 507B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7219 507D 91 84			sta (:bp2),y
  7220
  7221 				; optimize OK (service.pas), line = 1288
  7222
  7223 507F AD 60 A0			lda BALL
  7224 5082 8D 2E A0			sta GET_BALL_DIRECTION.BALL
  7225 5085 AD 61 A0			lda BALL+1
  7226 5088 8D 2F A0			sta GET_BALL_DIRECTION.BALL+1
  7227 508B 20 C7 48			jsr GET_BALL_DIRECTION
  7228 508E E8				inx
  7229 508F AD 32 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7230 5094 AD 33 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7231 5099 A9 1E			lda #$1E
  7232 509B 20 41 33			jsr SYSTEM.RANDOM.@010180000
  7233 509E B5 96			lda :STACKORIGIN,x
  7234 50A0 38 ED CC 9D			sub SYSTEM.RANDOM.@010180000.RESULT
  7235 50A4 8D 6B A0			sta ANGLE
  7236 50A7 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7237 50A9 E9 00			sbc #$00
  7238 50AB 8D 6C A0			sta ANGLE+1
  7239 50AE CA				dex
  7240
  7241 				; optimize OK (service.pas), line = 1289
  7242
  7243 50AF A9 14			lda #$14
  7244 50B1 8D C4 9F			sta MAX.A
  7245 50B4 A9 00			lda #$00
  7246 50B6 8D C5 9F			sta MAX.A+1
  7247 50B9 AD 6B A0			lda ANGLE
  7248 50BC 8D C6 9F			sta MAX.B
  7249 50BF AD 6C A0			lda ANGLE+1
  7250 50C2 8D C7 9F			sta MAX.B+1
  7251 50C5 20 92 3C			jsr MAX
  7252 50C8 A9 3C			lda #$3C
  7253 50CA 8D CA 9F			sta MIN.A
  7254 50CD A9 00			lda #$00
  7255 50CF 8D CB 9F			sta MIN.A+1
  7256 50D2 AD C8 9F			lda MAX.RESULT
  7257 50D5 8D CC 9F			sta MIN.B
  7258 50D8 AD C9 9F			lda MAX.RESULT+1
  7259 50DB 8D CD 9F			sta MIN.B+1
  7260 50DE 20 BD 3C			jsr MIN
  7261 50E1 AD 60 A0			lda BALL
  7262 50E4 8D 24 A0			sta SET_BALL_DIRECTION.BALL
  7263 50E7 AD 61 A0			lda BALL+1
  7264 50EA 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
  7265 50ED AD CE 9F			lda MIN.RESULT
  7266 50F0 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
  7267 50F3 AD CF 9F			lda MIN.RESULT+1
  7268 50F6 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7269 50F9 20 E4 46			jsr SET_BALL_DIRECTION
  7270
  7271 				; optimize OK (service.pas), line = 1290
  7272
  7273 50FC AC 60 A0 84 84 AC + 	mwy BALL :bp2
  7274 5106 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7275 5108 B1 84			lda (:bp2),y
  7276 510A 8D 12 A0			sta SET_BALL_SPEED.SPEED
  7277 510D C8				iny
  7278 510E B1 84			lda (:bp2),y
  7279 5110 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
  7280 5113 AD 60 A0			lda BALL
  7281 5116 8D 0E A0			sta SET_BALL_SPEED.BALL
  7282 5119 AD 61 A0			lda BALL+1
  7283 511C 8D 0F A0			sta SET_BALL_SPEED.BALL+1
  7284 511F 20 01 45			jsr SET_BALL_SPEED
  7285 5122			l_0EA1
  7286 5122			l_0E0C
  7287 5122			l_0DDD
  7288
  7289 				; optimize OK (service.pas), line = 1302
  7290
  7291 5122 AC 60 A0 84 84 AC + 	mwy BALL :bp2
  7292 512C A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7293 512E B1 84			lda (:bp2),y
  7294 5130 85 9F			sta :STACKORIGIN+9
  7295 5132 C8				iny
  7296 5133 B1 84			lda (:bp2),y
  7297 5135 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7298 5137 A0 01			ldy #1
  7299 5139 A5 9F			lda :STACKORIGIN+9
  7300 513B C9 B9			cmp #$B9
  7301 513D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7302 513F E9 00			sbc #$00
  7303 5141 50 02			svc
  7304 5143 49 80			eor #$80
  7305 5145 10 01			bpl @+
  7306 5147 88				dey
  7307 				@
  7308 5148 84 9F			sty :STACKORIGIN+9
  7309 514A A0 02			ldy #BALL.Y-DATAORIGIN
  7310 514C B1 84			lda (:bp2),y
  7311 514E 85 A0			sta :STACKORIGIN+10
  7312 5150 C8				iny
  7313 5151 B1 84			lda (:bp2),y
  7314 5153 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7315 5155 A0 01			ldy #1
  7316 5157 A5 A0			lda :STACKORIGIN+10
  7317 5159 C9 C9			cmp #$C9
  7318 515B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7319 515D E9 00			sbc #$00
  7320 515F 50 02			svc
  7321 5161 49 80			eor #$80
  7322 5163 10 01			bpl @+
  7323 5165 88				dey
  7324 				@
  7325 5166 98				tya
  7326 5167 25 9F			and :STACKORIGIN+9
  7327 5169 85 9F			sta :STACKORIGIN+9
  7328 516B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7329 516D B1 84			lda (:bp2),y
  7330 516F 85 A0			sta :STACKORIGIN+10
  7331 5171 C8				iny
  7332 5172 B1 84			lda (:bp2),y
  7333 5174 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7334 5176 A0 01			ldy #1
  7335 5178 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7336 517A 30 04			bmi @+
  7337 517C 05 A0			ora :STACKORIGIN+10
  7338 517E D0 01			sne
  7339 				@
  7340 5180 88				dey
  7341 				@
  7342 5181 98				tya
  7343 5182 25 9F			and :STACKORIGIN+9
  7344 5184 F0 15			jeq l_0EF0
  7345
  7346 				; optimize OK (service.pas), line = 1304
  7347
  7348 5186 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7349 5188 A9 00			lda #$00
  7350 518A 91 84			sta (:bp2),y
  7351
  7352 				; optimize OK (service.pas), line = 1306
  7353
  7354 518C AD 60 A0			lda BALL
  7355 518F 8D 04 A0			sta REMOVE_BALL.BALL
  7356 5192 AD 61 A0			lda BALL+1
  7357 5195 8D 05 A0			sta REMOVE_BALL.BALL+1
  7358 5198 20 9E 43			jsr REMOVE_BALL
  7359 519B			l_0EF0
  7360
  7361 				; ------------------------------------------------------------
  7362
  7363 = A060			BALL	= DATAORIGIN+$02CB
  7364 = 9D95			BALL.X	= DATAORIGIN+$0000
  7365 = 9D97			BALL.Y	= DATAORIGIN+$0002
  7366 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
  7367 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
  7368 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
  7369 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
  7370 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
  7371 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
  7372 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
  7373 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
  7374 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
  7375 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
  7376 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
  7377 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
  7378 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
  7379 = 9DB0			BALL.STM	= DATAORIGIN+$001B
  7380 = A064			B0	= DATAORIGIN+$02CF
  7381 = A065			B1	= DATAORIGIN+$02D0
  7382 = A066			B2	= DATAORIGIN+$02D1
  7383 = A067			X	= DATAORIGIN+$02D2
  7384 = A069			Y	= DATAORIGIN+$02D4
  7385 = A06B			ANGLE	= DATAORIGIN+$02D6
  7386
  7387 = A060			@VarData	= BALL
  7388 = 000B			@VarDataSize	= 11
  7389
  7390 519B			@exit
  7391 					.ifdef @new
  7392 					lda <@VarData
  7393 					sta :ztmp
  7394 					lda >@VarData
  7395 					ldy #@VarDataSize-1
  7396 					jmp @FreeMem
  7397 					els
  7398 519B 60				rts						; ret
  7399 					eif
  7400 				.endl
  7401
  7402 519C			.local	MODIFY_VAUS					; PROCEDURE
  7403
  7404 				; optimize OK (service.pas), line = 1313
  7405
  7406 519C AD 11 9F			lda VAUS.WIDTH
  7407 519F 8D 0F 9F			sta VAUS.OLDLEN
  7408 51A2 A9 00			lda #$00
  7409 51A4 8D 10 9F			sta VAUS.OLDLEN+1
  7410
  7411 				; optimize OK (service.pas), line = 1314
  7412
  7413 51A7 AD 99 9E			lda PLAYVAUS.WIDTH
  7414 51AA 8D 11 9F			sta VAUS.WIDTH
  7415
  7416 				; optimize OK (service.pas), line = 1315
  7417
  7418 51AD AD 9B 9E			lda PLAYVAUS.HEIGHT
  7419 51B0 8D 12 9F			sta VAUS.HEIGHT
  7420
  7421 51B3			@exit
  7422 					.ifdef @new
  7423 					lda <@VarData
  7424 					sta :ztmp
  7425 					lda >@VarData
  7426 					ldy #@VarDataSize-1
  7427 					jmp @FreeMem
  7428 					els
  7429 51B3 60				rts						; ret
  7430 					eif
  7431 				.endl
  7432
  7433 51B4			.local	SET_VAUS					; PROCEDURE
  7434
  7435 				; optimize OK (service.pas), line = 1320
  7436
  7437 51B4 A9 5F			lda #$5F
  7438 51B6 8D 09 9F			sta VAUS.X
  7439
  7440 				; optimize OK (service.pas), line = 1321
  7441
  7442 51B9 A9 B8			lda #$B8
  7443 51BB 8D 0A 9F			sta VAUS.Y
  7444
  7445 				; optimize OK (service.pas), line = 1323
  7446
  7447 51BE A9 FF			lda #$FF
  7448 51C0 8D 0B 9F			sta VAUS.OLDX
  7449 51C3 8D 0C 9F			sta VAUS.OLDX+1
  7450
  7451 				; optimize OK (service.pas), line = 1324
  7452
  7453 51C6 8D 0D 9F			sta VAUS.OLDY
  7454 51C9 8D 0E 9F			sta VAUS.OLDY+1
  7455
  7456 				; optimize OK (service.pas), line = 1325
  7457
  7458 51CC A9 00			lda #$00
  7459 51CE 8D 14 9F			sta VAUS.IFLASH
  7460
  7461 				; optimize OK (service.pas), line = 1329
  7462
  7463 51D1 8D 13 9F			sta VAUS.FLASH
  7464
  7465 				; optimize OK (service.pas), line = 1333
  7466
  7467 51D4 AD 99 9E			lda PLAYVAUS.WIDTH
  7468 51D7 8D 11 9F			sta VAUS.WIDTH
  7469
  7470 				; optimize OK (service.pas), line = 1334
  7471
  7472 51DA AD 9B 9E			lda PLAYVAUS.HEIGHT
  7473 51DD 8D 12 9F			sta VAUS.HEIGHT
  7474
  7475 				; optimize OK (service.pas), line = 1335
  7476
  7477 51E0 AD 11 9F			lda VAUS.WIDTH
  7478 51E3 8D 0F 9F			sta VAUS.OLDLEN
  7479 51E6 A9 00			lda #$00
  7480 51E8 8D 10 9F			sta VAUS.OLDLEN+1
  7481
  7482 				; optimize OK (service.pas), line = 1336
  7483
  7484 51EB A9 FF			lda #$FF
  7485 51ED 8D 15 9F			sta VAUS.LETTER
  7486
  7487 51F0			@exit
  7488 					.ifdef @new
  7489 					lda <@VarData
  7490 					sta :ztmp
  7491 					lda >@VarData
  7492 					ldy #@VarDataSize-1
  7493 					jmp @FreeMem
  7494 					els
  7495 51F0 60				rts						; ret
  7496 					eif
  7497 				.endl
  7498
  7499 51F1			.local	START_VAUS					; PROCEDURE
  7500
  7501 				; optimize OK (service.pas), line = 1345
  7502
  7503 51F1 A9 5F			lda #$5F
  7504 51F3 8D 09 9F			sta VAUS.X
  7505
  7506 				; optimize OK (service.pas), line = 1346
  7507
  7508 51F6 A9 B8			lda #$B8
  7509 51F8 8D 0A 9F			sta VAUS.Y
  7510
  7511 51FB			@exit
  7512 					.ifdef @new
  7513 					lda <@VarData
  7514 					sta :ztmp
  7515 					lda >@VarData
  7516 					ldy #@VarDataSize-1
  7517 					jmp @FreeMem
  7518 					els
  7519 51FB 60				rts						; ret
  7520 					eif
  7521 				.endl
  7522
  7523 51FC			.local	REMOVE_VAUS					; PROCEDURE
  7524
  7525 				; optimize OK (service.pas), line = 1360
  7526
  7527 51FC AC 0D 9F			ldy VAUS.OLDY
  7528 51FF AD 0B 9F			lda VAUS.OLDX
  7529 5202 18 79 00 C0			add adr.ROW,y
  7530 5206 8D 88 9F			sta HLP
  7531 5209 AD 0C 9F			lda VAUS.OLDX+1
  7532 520C 79 00 C1			adc adr.ROW+256,y
  7533 520F 8D 89 9F			sta HLP+1
  7534
  7535 				; optimize OK (service.pas), line = 1362
  7536
  7537 5212 AD 88 9F			lda HLP
  7538 5215 8D 97 9F			sta BLITBOX.DST
  7539 5218 A9 50			lda #$50
  7540 521A 18 6D 89 9F			add HLP+1
  7541 521E 8D 98 9F			sta BLITBOX.DST+1
  7542 5221 A9 00			lda #$00
  7543 5223 69 00			adc #$00
  7544 5225 8D 99 9F			sta BLITBOX.DST+2
  7545 5228 A9 00			lda #$00
  7546 522A 69 00			adc #$00
  7547 522C 8D 9A 9F			sta BLITBOX.DST+3
  7548 522F AD 95 9E			lda PLAYSCREEN.OFS
  7549 5232 18 6D 88 9F			add HLP
  7550 5236 8D 93 9F			sta BLITBOX.SRC
  7551 5239 AD 96 9E			lda PLAYSCREEN.OFS+1
  7552 523C 6D 89 9F			adc HLP+1
  7553 523F 8D 94 9F			sta BLITBOX.SRC+1
  7554 5242 AD 97 9E			lda PLAYSCREEN.OFS+2
  7555 5245 69 00			adc #$00
  7556 5247 8D 95 9F			sta BLITBOX.SRC+2
  7557 524A AD 98 9E			lda PLAYSCREEN.OFS+3
  7558 524D 69 00			adc #$00
  7559 524F 8D 96 9F			sta BLITBOX.SRC+3
  7560 5252 AD 0F 9F			lda VAUS.OLDLEN
  7561 5255 8D 9B 9F			sta BLITBOX.W
  7562 5258 AD 10 9F			lda VAUS.OLDLEN+1
  7563 525B 8D 9C 9F			sta BLITBOX.W+1
  7564 525E AD 12 9F			lda VAUS.HEIGHT
  7565 5261 8D 9D 9F			sta BLITBOX.H
  7566 5264 20 96 3A			jsr BLITBOX
  7567
  7568 				; optimize OK (service.pas), line = 1370
  7569
  7570 5267 AD 11 9F			lda VAUS.WIDTH
  7571 526A 8D 0F 9F			sta VAUS.OLDLEN
  7572 526D A9 00			lda #$00
  7573 526F 8D 10 9F			sta VAUS.OLDLEN+1
  7574
  7575 5272			@exit
  7576 					.ifdef @new
  7577 					lda <@VarData
  7578 					sta :ztmp
  7579 					lda >@VarData
  7580 					ldy #@VarDataSize-1
  7581 					jmp @FreeMem
  7582 					els
  7583 5272 60				rts						; ret
  7584 					eif
  7585 				.endl
  7586
  7587 5273			.local	PLACE_VAUS					; PROCEDURE
  7588
  7589 				; optimize FAIL (0, service.pas), line = 1379
  7590
  7591 5273 EE 14 9F			inc VAUS.IFLASH
  7592
  7593 				; optimize OK (service.pas), line = 1381
  7594
  7595 5276 AD 14 9F			lda VAUS.IFLASH
  7596 5279 C9 0B			cmp #$0B
  7597 527B 90 08			jcc l_0F8C
  7598
  7599 				; optimize FAIL (0, service.pas), line = 1383
  7600
  7601 527D EE 13 9F			inc VAUS.FLASH
  7602
  7603 				; optimize OK (service.pas), line = 1384
  7604
  7605 5280 A9 00			lda #$00
  7606 5282 8D 14 9F			sta VAUS.IFLASH
  7607 5285			l_0F8C
  7608
  7609 				; optimize OK (service.pas), line = 1387
  7610
  7611 5285 AD 13 9F			lda VAUS.FLASH
  7612 5288 C9 0B			cmp #$0B
  7613 528A 90 05			jcc l_0FA9
  7614 528C A9 00			lda #$00
  7615 528E 8D 13 9F			sta VAUS.FLASH
  7616 5291			l_0FA9
  7617
  7618 				; optimize OK (service.pas), line = 1397
  7619
  7620 5291 A9 00			lda #$00
  7621 5293 8D 88 9F			sta HLP
  7622 5296 8D 89 9F			sta HLP+1
  7623
  7624 				; optimize OK (service.pas), line = 1399
  7625
  7626 5299 8D 6D A0			sta Y
  7627 529C AC 12 9F			ldy VAUS.HEIGHT
  7628 529F 88				dey
  7629 52A0 8C A4 52			sty @FORTMP_0FC0_0
  7630
  7631 52A3			l_0FC3
  7632 				; --- ForToDoCondition
  7633 52A3 A9 00			lda @FORTMP_0FC0_0::#$00
  7634 52A5 CD 6D A0			cmp Y
  7635 52A8 B0 03 4C E6 53		jcc l_0FD1
  7636
  7637 				; optimize OK (service.pas), line = 1405
  7638
  7639 52AD AD 6D A0			lda Y
  7640 52B0 18 6D 0A 9F			add VAUS.Y
  7641 52B4 A8				tay
  7642 52B5 AD 09 9F			lda VAUS.X
  7643 52B8 18 79 00 C0			add adr.ROW,y
  7644 52BC 8D A2 9F			sta BLITZERO.DST
  7645 52BF A9 50			lda #$50
  7646 52C1 79 00 C1			adc adr.ROW+256,y
  7647 52C4 8D A3 9F			sta BLITZERO.DST+1
  7648 52C7 A9 00			lda #$00
  7649 52C9 69 00			adc #$00
  7650 52CB 8D A4 9F			sta BLITZERO.DST+2
  7651 52CE A9 00			lda #$00
  7652 52D0 69 00			adc #$00
  7653 52D2 8D A5 9F			sta BLITZERO.DST+3
  7654 52D5 AD 9D 9E			lda PLAYVAUS.OFS
  7655 52D8 18 6D 88 9F			add HLP
  7656 52DC 8D 9E 9F			sta BLITZERO.SRC
  7657 52DF AD 9E 9E			lda PLAYVAUS.OFS+1
  7658 52E2 6D 89 9F			adc HLP+1
  7659 52E5 8D 9F 9F			sta BLITZERO.SRC+1
  7660 52E8 AD 9F 9E			lda PLAYVAUS.OFS+2
  7661 52EB 69 00			adc #$00
  7662 52ED 8D A0 9F			sta BLITZERO.SRC+2
  7663 52F0 AD A0 9E			lda PLAYVAUS.OFS+3
  7664 52F3 69 00			adc #$00
  7665 52F5 8D A1 9F			sta BLITZERO.SRC+3
  7666 52F8 AD 11 9F			lda VAUS.WIDTH
  7667 52FB 8D A6 9F			sta BLITZERO.W
  7668 52FE A9 00			lda #$00
  7669 5300 8D A7 9F			sta BLITZERO.W+1
  7670 5303 A9 01			lda #$01
  7671 5305 8D A8 9F			sta BLITZERO.H
  7672 5308 20 17 3B			jsr BLITZERO
  7673
  7674 				; optimize OK (service.pas), line = 1407
  7675
  7676 530B AD 6D A0			lda Y
  7677 530E C9 02			cmp #$02
  7678 5310 B0 03 4C CF 53		jcc l_1015
  7679 5315 AD 12 9F			lda VAUS.HEIGHT
  7680 5318 E9 02			sbc #$02
  7681 531A 85 A1			sta :STACKORIGIN+11
  7682 531C A9 00			lda #$00
  7683 531E E9 00			sbc #$00
  7684 5320 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7685 5322 AD 6D A0			lda Y
  7686 5325 C5 A1			cmp :STACKORIGIN+11
  7687 5327 A9 00			lda #$00
  7688 5329 E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7689 532B 50 02			svc
  7690 532D 49 80			eor #$80
  7691 532F 30 03 4C CF 53		jpl l_1015
  7692
  7693 				; optimize OK (service.pas), line = 1410
  7694
  7695 5334 AC 13 9F			ldy VAUS.FLASH
  7696 5337 B9 8E 20			lda adr.FLASH,y
  7697 533A 8D BC 9F			sta PUTBYTE.V
  7698 533D AD 6D A0			lda Y
  7699 5340 18 6D 0A 9F			add VAUS.Y
  7700 5344 A8				tay
  7701 5345 AD 09 9F			lda VAUS.X
  7702 5348 18 79 00 C0			add adr.ROW,y
  7703 534C 8D B8 9F			sta PUTBYTE.DST
  7704 534F A9 50			lda #$50
  7705 5351 79 00 C1			adc adr.ROW+256,y
  7706 5354 8D B9 9F			sta PUTBYTE.DST+1
  7707 5357 A9 00			lda #$00
  7708 5359 69 00			adc #$00
  7709 535B 8D BA 9F			sta PUTBYTE.DST+2
  7710 535E A9 00			lda #$00
  7711 5360 69 00			adc #$00
  7712 5362 8D BB 9F			sta PUTBYTE.DST+3
  7713 5365 20 40 3C			jsr PUTBYTE
  7714
  7715 				; optimize OK (service.pas), line = 1413
  7716
  7717 5368 AC 13 9F			ldy VAUS.FLASH
  7718 536B B9 8E 20			lda adr.FLASH,y
  7719 536E 8D BC 9F			sta PUTBYTE.V
  7720 5371 AD 09 9F			lda VAUS.X
  7721 5374 18 6D 11 9F			add VAUS.WIDTH
  7722 5378 85 A0			sta :STACKORIGIN+10
  7723 537A A9 50			lda #$50
  7724 537C 69 00			adc #$00
  7725 537E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7726 5380 A9 00			lda #$00
  7727 5382 69 00			adc #$00
  7728 5384 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7729 5386 A9 00			lda #$00
  7730 5388 69 00			adc #$00
  7731 538A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7732 538C A5 A0			lda :STACKORIGIN+10
  7733 538E 38 E9 01			sub #$01
  7734 5391 85 A0			sta :STACKORIGIN+10
  7735 5393 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7736 5395 E9 00			sbc #$00
  7737 5397 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7738 5399 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7739 539B E9 00			sbc #$00
  7740 539D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7741 539F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7742 53A1 E9 00			sbc #$00
  7743 53A3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7744 53A5 AD 6D A0			lda Y
  7745 53A8 18 6D 0A 9F			add VAUS.Y
  7746 53AC A8				tay
  7747 53AD A5 A0			lda :STACKORIGIN+10
  7748 53AF 18 79 00 C0			add adr.ROW,y
  7749 53B3 8D B8 9F			sta PUTBYTE.DST
  7750 53B6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7751 53B8 79 00 C1			adc adr.ROW+256,y
  7752 53BB 8D B9 9F			sta PUTBYTE.DST+1
  7753 53BE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7754 53C0 69 00			adc #$00
  7755 53C2 8D BA 9F			sta PUTBYTE.DST+2
  7756 53C5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7757 53C7 69 00			adc #$00
  7758 53C9 8D BB 9F			sta PUTBYTE.DST+3
  7759 53CC 20 40 3C			jsr PUTBYTE
  7760 53CF			l_1015
  7761
  7762 				; optimize OK (service.pas), line = 1416
  7763
  7764 53CF AD 88 9F			lda HLP
  7765 53D2 18 6D 11 9F			add VAUS.WIDTH
  7766 53D6 8D 88 9F			sta HLP
  7767 53D9 90 03			scc
  7768 53DB EE 89 9F			inc HLP+1
  7769
  7770 				; --- ForToDoEpilog
  7771 53DE EE 6D A0			inc Y
  7772 53E1 F0 03 4C A3 52		jne l_0FC3
  7773 53E6			l_0FD1
  7774
  7775 				; ------------------------------------------------------------
  7776
  7777 = A06D			Y	= DATAORIGIN+$02D8
  7778
  7779 = A06D			@VarData	= Y
  7780 = 0001			@VarDataSize	= 1
  7781
  7782 53E6			@exit
  7783 					.ifdef @new
  7784 					lda <@VarData
  7785 					sta :ztmp
  7786 					lda >@VarData
  7787 					ldy #@VarDataSize-1
  7788 					jmp @FreeMem
  7789 					els
  7790 53E6 60				rts						; ret
  7791 					eif
  7792 				.endl
  7793
  7794 53E7			.local	MOVE_VAUS					; PROCEDURE
  7795
  7796 				; optimize OK (service.pas), line = 1427
  7797
  7798 53E7 A0 01			ldy #1
  7799 53E9 AD 0C 9F			lda VAUS.OLDX+1
  7800 53EC C9 FF			cmp #$FF
  7801 53EE D0 05			bne @+
  7802 53F0 AD 0B 9F			lda VAUS.OLDX
  7803 53F3 C9 FF			cmp #$FF
  7804 				@
  7805 53F5 D0 01			bne @+
  7806 53F7 88				dey
  7807 				@
  7808 53F8 84 9F			sty :STACKORIGIN+9
  7809 53FA A0 01			ldy #1
  7810 53FC AD 0C 9F			lda VAUS.OLDX+1
  7811 53FF C9 00			cmp #$00
  7812 5401 D0 06			bne @+
  7813 5403 AD 0B 9F			lda VAUS.OLDX
  7814 5406 CD 09 9F			cmp VAUS.X
  7815 				@
  7816 5409 D0 01			bne @+
  7817 540B 88				dey
  7818 				@
  7819 540C 98				tya
  7820 540D 25 9F			and :STACKORIGIN+9
  7821 540F 85 9F			sta :STACKORIGIN+9
  7822 5411 A0 01			ldy #1
  7823 5413 A9 00			lda #$00
  7824 5415 CD 10 9F			cmp VAUS.OLDLEN+1
  7825 5418 D0 06			bne @+
  7826 541A AD 11 9F			lda VAUS.WIDTH
  7827 541D CD 0F 9F			cmp VAUS.OLDLEN
  7828 				@
  7829 5420 D0 01			bne @+
  7830 5422 88				dey
  7831 				@
  7832 5423 98				tya
  7833 5424 05 9F			ora :STACKORIGIN+9
  7834 5426 F0 03			jeq l_1091
  7835
  7836 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1428
  7837
  7838 5428 20 FC 51			jsr REMOVE_VAUS
  7839 542B			l_1091
  7840
  7841 				; optimize OK (service.pas), line = 1430
  7842
  7843 542B AD 09 9F			lda VAUS.X
  7844 542E 8D 0B 9F			sta VAUS.OLDX
  7845 5431 A9 00			lda #$00
  7846 5433 8D 0C 9F			sta VAUS.OLDX+1
  7847
  7848 				; optimize OK (service.pas), line = 1431
  7849
  7850 5436 AD 0A 9F			lda VAUS.Y
  7851 5439 8D 0D 9F			sta VAUS.OLDY
  7852 543C A9 00			lda #$00
  7853 543E 8D 0E 9F			sta VAUS.OLDY+1
  7854
  7855 				; optimize OK (service.pas), line = 1438
  7856
  7857 5441 A9 D8			lda #$D8
  7858 5443 38 ED 11 9F			sub VAUS.WIDTH
  7859 5447 8D CC 9F			sta MIN.B
  7860 544A A9 00			lda #$00
  7861 544C E9 00			sbc #$00
  7862 544E 8D CD 9F			sta MIN.B+1
  7863 5451 AD 6F A0			lda X
  7864 5454 8D CA 9F			sta MIN.A
  7865 5457 AD 70 A0			lda X+1
  7866 545A 8D CB 9F			sta MIN.A+1
  7867 545D 20 BD 3C			jsr MIN
  7868 5460 A9 0A			lda #$0A
  7869 5462 8D C4 9F			sta MAX.A
  7870 5465 A9 00			lda #$00
  7871 5467 8D C5 9F			sta MAX.A+1
  7872 546A AD CE 9F			lda MIN.RESULT
  7873 546D 8D C6 9F			sta MAX.B
  7874 5470 AD CF 9F			lda MIN.RESULT+1
  7875 5473 8D C7 9F			sta MAX.B+1
  7876 5476 20 92 3C			jsr MAX
  7877 5479 AD C8 9F			lda MAX.RESULT
  7878 547C 8D 09 9F			sta VAUS.X
  7879
  7880 				; optimize OK (service.pas), line = 1439
  7881
  7882 547F A9 C8			lda #$C8
  7883 5481 38 ED 12 9F			sub VAUS.HEIGHT
  7884 5485 8D CC 9F			sta MIN.B
  7885 5488 A9 00			lda #$00
  7886 548A E9 00			sbc #$00
  7887 548C 8D CD 9F			sta MIN.B+1
  7888 548F AD 71 A0			lda Y
  7889 5492 8D CA 9F			sta MIN.A
  7890 5495 AD 72 A0			lda Y+1
  7891 5498 8D CB 9F			sta MIN.A+1
  7892 549B 20 BD 3C			jsr MIN
  7893 549E A9 0C			lda #$0C
  7894 54A0 8D C4 9F			sta MAX.A
  7895 54A3 A9 00			lda #$00
  7896 54A5 8D C5 9F			sta MAX.A+1
  7897 54A8 AD CE 9F			lda MIN.RESULT
  7898 54AB 8D C6 9F			sta MAX.B
  7899 54AE AD CF 9F			lda MIN.RESULT+1
  7900 54B1 8D C7 9F			sta MAX.B+1
  7901 54B4 20 92 3C			jsr MAX
  7902 54B7 AD C8 9F			lda MAX.RESULT
  7903 54BA 8D 0A 9F			sta VAUS.Y
  7904
  7905 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1441
  7906
  7907 54BD 20 73 52			jsr PLACE_VAUS
  7908
  7909 				; ------------------------------------------------------------
  7910
  7911 = A06F			X	= DATAORIGIN+$02DA
  7912 = A071			Y	= DATAORIGIN+$02DC
  7913
  7914 = A06F			@VarData	= X
  7915 = 0004			@VarDataSize	= 4
  7916
  7917 54C0			@exit
  7918 					.ifdef @new
  7919 					lda <@VarData
  7920 					sta :ztmp
  7921 					lda >@VarData
  7922 					ldy #@VarDataSize-1
  7923 					jmp @FreeMem
  7924 					els
  7925 54C0 60				rts						; ret
  7926 					eif
  7927 				.endl
  7928
  7929 54C1			.local	REMOVE_BLOCK					; PROCEDURE
  7930
  7931 				; optimize OK (service.pas), line = 1456
  7932
  7933 54C1 AD 73 A0			lda XA
  7934 54C4 85 9F			sta :STACKORIGIN+9
  7935 54C6 A9 00			lda #$00
  7936 54C8 06 9F			asl :STACKORIGIN+9
  7937 54CA 2A				rol @
  7938 54CB 06 9F			asl :STACKORIGIN+9
  7939 54CD 2A				rol @
  7940 54CE 06 9F			asl :STACKORIGIN+9
  7941 54D0 2A				rol @
  7942 54D1 06 9F			asl :STACKORIGIN+9
  7943 54D3 2A				rol @
  7944 54D4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7945 54D6 A5 9F			lda :STACKORIGIN+9
  7946 54D8 18 69 09			add #$09
  7947 54DB 8D 78 A0			sta XS
  7948 54DE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7949 54E0 69 00			adc #$00
  7950 54E2 8D 79 A0			sta XS+1
  7951
  7952 				; optimize OK (service.pas), line = 1457
  7953
  7954 54E5 AD 74 A0			lda YA
  7955 54E8 85 9F			sta :STACKORIGIN+9
  7956 54EA A9 00			lda #$00
  7957 54EC 06 9F			asl :STACKORIGIN+9
  7958 54EE 2A				rol @
  7959 54EF 06 9F			asl :STACKORIGIN+9
  7960 54F1 2A				rol @
  7961 54F2 06 9F			asl :STACKORIGIN+9
  7962 54F4 2A				rol @
  7963 54F5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7964 54F7 A5 9F			lda :STACKORIGIN+9
  7965 54F9 18 69 16			add #$16
  7966 54FC 8D 7A A0			sta YS
  7967 54FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7968 5501 69 00			adc #$00
  7969 5503 8D 7B A0			sta YS+1
  7970
  7971 				; optimize OK (service.pas), line = 1459
  7972
  7973 5506 A9 00			lda #$00
  7974 5508 8D 76 A0			sta Y
  7975
  7976 550B			l_10E9
  7977 				; --- ForToDoCondition
  7978 550B AD 76 A0			lda Y
  7979 550E C9 08			cmp #$08
  7980 5510 90 03 4C 8A 56		jcs l_10F7
  7981
  7982 				; optimize OK (service.pas), line = 1461
  7983
  7984 5515 AD 7A A0			lda YS
  7985 5518 6D 76 A0			adc Y
  7986 551B A8				tay
  7987 551C B9 00 C3			lda adr.MODY,y
  7988 551F 85 86			sta :eax
  7989 5521 A9 00			lda #$00
  7990 5523 85 87			sta :eax+1
  7991 5525 AD 16 9F			lda PATTERN.WIDTH
  7992 5528 85 8E			sta :ecx
  7993 552A AD 17 9F			lda PATTERN.WIDTH+1
  7994 552D 85 8F			sta :ecx+1
  7995 					.ifdef fmulinit
  7996 					fmulu_16
  7997 					els
  7998 552F 20 7F 23			imulCX_AL
  7999 					eif
  8000 5532 A5 86			lda :eax
  8001 5534 8D 7C A0			sta YH
  8002 5537 A5 87			lda :eax+1
  8003 5539 8D 7D A0			sta YH+1
  8004
  8005 				; optimize OK (service.pas), line = 1469
  8006
  8007 553C AD 76 A0			lda Y
  8008 553F 18 6D 7A A0			add YS
  8009 5543 A8				tay
  8010 5544 AD 78 A0			lda XS
  8011 5547 18 79 00 C0			add adr.ROW,y
  8012 554B 8D 88 9F			sta HLP
  8013 554E AD 79 A0			lda XS+1
  8014 5551 79 00 C1			adc adr.ROW+256,y
  8015 5554 8D 89 9F			sta HLP+1
  8016
  8017 				; optimize OK (service.pas), line = 1471
  8018
  8019 5557 A9 00			lda #$00
  8020 5559 8D 77 A0			sta I
  8021
  8022 				; optimize OK (service.pas), line = 1473
  8023
  8024 555C 8D 75 A0			sta X
  8025
  8026 555F			l_1129
  8027 				; --- ForToDoCondition
  8028 555F AD 75 A0			lda X
  8029 5562 C9 10			cmp #$10
  8030 5564 90 03 4C 30 56		jcs l_1137
  8031
  8032 				; optimize OK (service.pas), line = 1474
  8033
  8034 5569 6D 78 A0			adc XS
  8035 556C 85 9F			sta :STACKORIGIN+9
  8036 556E A9 00			lda #$00
  8037 5570 6D 79 A0			adc XS+1
  8038 5573 C9 00			cmp #$00
  8039 5575 D0 04			bne @+
  8040 5577 A5 9F			lda :STACKORIGIN+9
  8041 5579 C9 D8			cmp #$D8
  8042 				@
  8043 557B 90 03 4C 28 56		jcs l_114E
  8044
  8045 				; optimize OK (service.pas), line = 1480
  8046
  8047 5580 AD 95 9E			lda PLAYSCREEN.OFS
  8048 5583 6D 88 9F			adc HLP
  8049 5586 85 9F			sta :STACKORIGIN+9
  8050 5588 AD 96 9E			lda PLAYSCREEN.OFS+1
  8051 558B 6D 89 9F			adc HLP+1
  8052 558E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8053 5590 AD 97 9E			lda PLAYSCREEN.OFS+2
  8054 5593 69 00			adc #$00
  8055 5595 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8056 5597 AD 98 9E			lda PLAYSCREEN.OFS+3
  8057 559A 69 00			adc #$00
  8058 559C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8059 559E A5 9F			lda :STACKORIGIN+9
  8060 55A0 18 6D 75 A0			add X
  8061 55A4 8D BD 9F			sta GETBYTE.SRC
  8062 55A7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8063 55A9 69 00			adc #$00
  8064 55AB 8D BE 9F			sta GETBYTE.SRC+1
  8065 55AE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8066 55B0 69 00			adc #$00
  8067 55B2 8D BF 9F			sta GETBYTE.SRC+2
  8068 55B5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8069 55B7 69 00			adc #$00
  8070 55B9 8D C0 9F			sta GETBYTE.SRC+3
  8071 55BC 20 68 3C			jsr GETBYTE
  8072 55BF AD C1 9F			lda GETBYTE.RESULT
  8073 55C2 29 80			and #$80
  8074 55C4 8D 7F A0			sta SHADOW
  8075
  8076 				; optimize OK (service.pas), line = 1484
  8077
  8078 55C7 AD 75 A0			lda X
  8079 55CA 18 6D 78 A0			add XS
  8080 55CE A8				tay
  8081 55CF B9 00 C4			lda adr.MODX,y
  8082 55D2 18 6D 1A 9F			add PATTERN.OFS
  8083 55D6 85 9F			sta :STACKORIGIN+9
  8084 55D8 AD 1B 9F			lda PATTERN.OFS+1
  8085 55DB 69 00			adc #$00
  8086 55DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8087 55DF AD 1C 9F			lda PATTERN.OFS+2
  8088 55E2 69 00			adc #$00
  8089 55E4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8090 55E6 AD 1D 9F			lda PATTERN.OFS+3
  8091 55E9 69 00			adc #$00
  8092 55EB 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8093 55ED A5 9F			lda :STACKORIGIN+9
  8094 55EF 18 6D 7C A0			add YH
  8095 55F3 8D BD 9F			sta GETBYTE.SRC
  8096 55F6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8097 55F8 6D 7D A0			adc YH+1
  8098 55FB 8D BE 9F			sta GETBYTE.SRC+1
  8099 55FE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8100 5600 69 00			adc #$00
  8101 5602 8D BF 9F			sta GETBYTE.SRC+2
  8102 5605 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8103 5607 69 00			adc #$00
  8104 5609 8D C0 9F			sta GETBYTE.SRC+3
  8105 560C 20 68 3C			jsr GETBYTE
  8106 560F E8				inx
  8107 5610 AD C1 9F			lda GETBYTE.RESULT
  8108 5613 29 7F			and #$7F
  8109 5615 0D 7F A0			ora SHADOW
  8110 5618 8D 7E A0			sta CL
  8111 561B CA				dex
  8112
  8113 				; optimize OK (service.pas), line = 1486
  8114
  8115 561C AC 77 A0			ldy I
  8116 561F AD 7E A0			lda CL
  8117 5622 99 00 C2			sta adr.TMP,y
  8118
  8119 				; optimize FAIL (0, service.pas), line = 1487
  8120
  8121 5625 EE 77 A0			inc I
  8122 5628			l_114E
  8123
  8124 				; --- ForToDoEpilog
  8125 5628 EE 75 A0			inc X
  8126 562B F0 03 4C 5F 55		jne l_1129
  8127 5630			l_1137
  8128
  8129 				; optimize OK (service.pas), line = 1499
  8130
  8131 5630 AD 88 9F			lda HLP
  8132 5633 8D A9 9F			sta BLITTMP.DST
  8133 5636 A9 50			lda #$50
  8134 5638 18 6D 89 9F			add HLP+1
  8135 563C 8D AA 9F			sta BLITTMP.DST+1
  8136 563F A9 00			lda #$00
  8137 5641 69 00			adc #$00
  8138 5643 8D AB 9F			sta BLITTMP.DST+2
  8139 5646 A9 00			lda #$00
  8140 5648 69 00			adc #$00
  8141 564A 8D AC 9F			sta BLITTMP.DST+3
  8142 564D AD 77 A0			lda I
  8143 5650 8D AD 9F			sta BLITTMP.SIZE
  8144 5653 20 95 3B			jsr BLITTMP
  8145
  8146 				; optimize OK (service.pas), line = 1500
  8147
  8148 5656 AD 95 9E			lda PLAYSCREEN.OFS
  8149 5659 18 6D 88 9F			add HLP
  8150 565D 8D A9 9F			sta BLITTMP.DST
  8151 5660 AD 96 9E			lda PLAYSCREEN.OFS+1
  8152 5663 6D 89 9F			adc HLP+1
  8153 5666 8D AA 9F			sta BLITTMP.DST+1
  8154 5669 AD 97 9E			lda PLAYSCREEN.OFS+2
  8155 566C 69 00			adc #$00
  8156 566E 8D AB 9F			sta BLITTMP.DST+2
  8157 5671 AD 98 9E			lda PLAYSCREEN.OFS+3
  8158 5674 69 00			adc #$00
  8159 5676 8D AC 9F			sta BLITTMP.DST+3
  8160 5679 AD 77 A0			lda I
  8161 567C 8D AD 9F			sta BLITTMP.SIZE
  8162 567F 20 95 3B			jsr BLITTMP
  8163
  8164 				; --- ForToDoEpilog
  8165 5682 EE 76 A0			inc Y
  8166 5685 F0 03 4C 0B 55		jne l_10E9
  8167 568A			l_10F7
  8168
  8169 				; optimize OK (service.pas), line = 1510
  8170
  8171 568A AD 7A A0			lda YS
  8172 568D 18 69 04			add #$04
  8173 5690 8D 76 A0			sta Y
  8174 5693 AD 7A A0			lda YS
  8175 5696 18 69 0C			add #$0C
  8176 5699 8D 9D 56			sta @FORTMP_11C2_0
  8177
  8178 569C			l_11C5
  8179 				; --- ForToDoCondition
  8180 569C A9 00			lda @FORTMP_11C2_0::#$00
  8181 569E CD 76 A0			cmp Y
  8182 56A1 B0 03 4C AC 57		jcc l_11D3
  8183
  8184 				; optimize OK (service.pas), line = 1512
  8185
  8186 56A6 A9 00			lda #$00
  8187 56A8 8D 77 A0			sta I
  8188
  8189 				; optimize OK (service.pas), line = 1513
  8190
  8191 56AB AC 76 A0			ldy Y
  8192 56AE B9 00 C0			lda adr.ROW,y
  8193 56B1 8D 88 9F			sta HLP
  8194 56B4 B9 00 C1			lda adr.ROW+256,y
  8195 56B7 8D 89 9F			sta HLP+1
  8196
  8197 				; optimize OK (service.pas), line = 1515
  8198
  8199 56BA AD 78 A0			lda XS
  8200 56BD 18 69 08			add #$08
  8201 56C0 8D 75 A0			sta X
  8202 56C3 AD 78 A0			lda XS
  8203 56C6 18 69 18			add #$18
  8204 56C9 8D CD 56			sta @FORTMP_11EF_0
  8205
  8206 56CC			l_11F2
  8207 				; --- ForToDoCondition
  8208 56CC A9 00			lda @FORTMP_11EF_0::#$00
  8209 56CE CD 75 A0			cmp X
  8210 56D1 90 5F			jcc l_1200
  8211
  8212 				; optimize OK (service.pas), line = 1531
  8213
  8214 56D3 AD 75 A0			lda X
  8215 56D6 C9 D8			cmp #$D8
  8216 56D8 B0 53			jcs l_1212
  8217
  8218 				; optimize OK (service.pas), line = 1535
  8219
  8220 56DA AD 95 9E			lda PLAYSCREEN.OFS
  8221 56DD 6D 88 9F			adc HLP
  8222 56E0 85 9F			sta :STACKORIGIN+9
  8223 56E2 AD 96 9E			lda PLAYSCREEN.OFS+1
  8224 56E5 6D 89 9F			adc HLP+1
  8225 56E8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8226 56EA AD 97 9E			lda PLAYSCREEN.OFS+2
  8227 56ED 69 00			adc #$00
  8228 56EF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8229 56F1 AD 98 9E			lda PLAYSCREEN.OFS+3
  8230 56F4 69 00			adc #$00
  8231 56F6 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8232 56F8 A5 9F			lda :STACKORIGIN+9
  8233 56FA 18 6D 75 A0			add X
  8234 56FE 8D BD 9F			sta GETBYTE.SRC
  8235 5701 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8236 5703 69 00			adc #$00
  8237 5705 8D BE 9F			sta GETBYTE.SRC+1
  8238 5708 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8239 570A 69 00			adc #$00
  8240 570C 8D BF 9F			sta GETBYTE.SRC+2
  8241 570F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8242 5711 69 00			adc #$00
  8243 5713 8D C0 9F			sta GETBYTE.SRC+3
  8244 5716 20 68 3C			jsr GETBYTE
  8245 5719 AD C1 9F			lda GETBYTE.RESULT
  8246 571C 09 80			ora #$80
  8247 571E 8D 7E A0			sta CL
  8248
  8249 				; optimize OK (service.pas), line = 1537
  8250
  8251 5721 AC 77 A0			ldy I
  8252 5724 AD 7E A0			lda CL
  8253 5727 99 00 C2			sta adr.TMP,y
  8254
  8255 				; optimize FAIL (0, service.pas), line = 1538
  8256
  8257 572A EE 77 A0			inc I
  8258 572D			l_1212
  8259
  8260 				; --- ForToDoEpilog
  8261 572D EE 75 A0			inc X
  8262 5730 D0 9A			jne l_11F2
  8263 5732			l_1200
  8264
  8265 				; optimize OK (service.pas), line = 1550
  8266
  8267 5732 AD 78 A0			lda XS
  8268 5735 18 69 08			add #$08
  8269 5738 85 9F			sta :STACKORIGIN+9
  8270 573A AD 79 A0			lda XS+1
  8271 573D 69 00			adc #$00
  8272 573F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8273 5741 AD 88 9F			lda HLP
  8274 5744 18 65 9F			add :STACKORIGIN+9
  8275 5747 8D 88 9F			sta HLP
  8276 574A AD 89 9F			lda HLP+1
  8277 574D 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8278 574F 8D 89 9F			sta HLP+1
  8279
  8280 				; optimize OK (service.pas), line = 1552
  8281
  8282 5752 AD 88 9F			lda HLP
  8283 5755 8D A9 9F			sta BLITTMP.DST
  8284 5758 A9 50			lda #$50
  8285 575A 18 6D 89 9F			add HLP+1
  8286 575E 8D AA 9F			sta BLITTMP.DST+1
  8287 5761 A9 00			lda #$00
  8288 5763 69 00			adc #$00
  8289 5765 8D AB 9F			sta BLITTMP.DST+2
  8290 5768 A9 00			lda #$00
  8291 576A 69 00			adc #$00
  8292 576C 8D AC 9F			sta BLITTMP.DST+3
  8293 576F AD 77 A0			lda I
  8294 5772 8D AD 9F			sta BLITTMP.SIZE
  8295 5775 20 95 3B			jsr BLITTMP
  8296
  8297 				; optimize OK (service.pas), line = 1553
  8298
  8299 5778 AD 95 9E			lda PLAYSCREEN.OFS
  8300 577B 18 6D 88 9F			add HLP
  8301 577F 8D A9 9F			sta BLITTMP.DST
  8302 5782 AD 96 9E			lda PLAYSCREEN.OFS+1
  8303 5785 6D 89 9F			adc HLP+1
  8304 5788 8D AA 9F			sta BLITTMP.DST+1
  8305 578B AD 97 9E			lda PLAYSCREEN.OFS+2
  8306 578E 69 00			adc #$00
  8307 5790 8D AB 9F			sta BLITTMP.DST+2
  8308 5793 AD 98 9E			lda PLAYSCREEN.OFS+3
  8309 5796 69 00			adc #$00
  8310 5798 8D AC 9F			sta BLITTMP.DST+3
  8311 579B AD 77 A0			lda I
  8312 579E 8D AD 9F			sta BLITTMP.SIZE
  8313 57A1 20 95 3B			jsr BLITTMP
  8314
  8315 				; --- ForToDoEpilog
  8316 57A4 EE 76 A0			inc Y
  8317 57A7 F0 03 4C 9C 56		jne l_11C5
  8318 57AC			l_11D3
  8319
  8320 				; ------------------------------------------------------------
  8321
  8322 = A073			XA	= DATAORIGIN+$02DE
  8323 = A074			YA	= DATAORIGIN+$02DF
  8324 = A075			X	= DATAORIGIN+$02E0
  8325 = A076			Y	= DATAORIGIN+$02E1
  8326 = A077			I	= DATAORIGIN+$02E2
  8327 = A078			XS	= DATAORIGIN+$02E3
  8328 = A07A			YS	= DATAORIGIN+$02E5
  8329 = A07C			YH	= DATAORIGIN+$02E7
  8330 = A07E			CL	= DATAORIGIN+$02E9
  8331 = A07F			SHADOW	= DATAORIGIN+$02EA
  8332
  8333 = A073			@VarData	= XA
  8334 = 000D			@VarDataSize	= 13
  8335
  8336 57AC			@exit
  8337 					.ifdef @new
  8338 					lda <@VarData
  8339 					sta :ztmp
  8340 					lda >@VarData
  8341 					ldy #@VarDataSize-1
  8342 					jmp @FreeMem
  8343 					els
  8344 57AC 60				rts						; ret
  8345 					eif
  8346 				.endl
  8347
  8348 57AD			.local	PLACE_BLOCK					; PROCEDURE
  8349
  8350 				; optimize OK (service.pas), line = 1570
  8351
  8352 57AD AD 82 A0			lda XA
  8353 57B0 85 9F			sta :STACKORIGIN+9
  8354 57B2 A9 00			lda #$00
  8355 57B4 06 9F			asl :STACKORIGIN+9
  8356 57B6 2A				rol @
  8357 57B7 06 9F			asl :STACKORIGIN+9
  8358 57B9 2A				rol @
  8359 57BA 06 9F			asl :STACKORIGIN+9
  8360 57BC 2A				rol @
  8361 57BD 06 9F			asl :STACKORIGIN+9
  8362 57BF 2A				rol @
  8363 57C0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8364 57C2 A5 9F			lda :STACKORIGIN+9
  8365 57C4 18 69 09			add #$09
  8366 57C7 8D 88 A0			sta XS
  8367 57CA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8368 57CC 69 00			adc #$00
  8369 57CE 8D 89 A0			sta XS+1
  8370
  8371 				; optimize OK (service.pas), line = 1571
  8372
  8373 57D1 AD 83 A0			lda YA
  8374 57D4 85 9F			sta :STACKORIGIN+9
  8375 57D6 A9 00			lda #$00
  8376 57D8 06 9F			asl :STACKORIGIN+9
  8377 57DA 2A				rol @
  8378 57DB 06 9F			asl :STACKORIGIN+9
  8379 57DD 2A				rol @
  8380 57DE 06 9F			asl :STACKORIGIN+9
  8381 57E0 2A				rol @
  8382 57E1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8383 57E3 A5 9F			lda :STACKORIGIN+9
  8384 57E5 18 69 16			add #$16
  8385 57E8 8D 8A A0			sta YS
  8386 57EB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8387 57ED 69 00			adc #$00
  8388 57EF 8D 8B A0			sta YS+1
  8389
  8390 				; optimize OK (service.pas), line = 1573
  8391
  8392 57F2 A9 00			lda #$00
  8393 57F4 8D 86 A0			sta Y
  8394
  8395 57F7			l_1283
  8396 				; --- ForToDoCondition
  8397 57F7 AD 86 A0			lda Y
  8398 57FA C9 08			cmp #$08
  8399 57FC 90 03 4C 0A 59		jcs l_1291
  8400
  8401 				; optimize OK (service.pas), line = 1575
  8402
  8403 5801 AD 8A A0			lda YS
  8404 5804 6D 86 A0			adc Y
  8405 5807 A8				tay
  8406 5808 AD 88 A0			lda XS
  8407 580B 18 79 00 C0			add adr.ROW,y
  8408 580F 8D 88 9F			sta HLP
  8409 5812 AD 89 A0			lda XS+1
  8410 5815 79 00 C1			adc adr.ROW+256,y
  8411 5818 8D 89 9F			sta HLP+1
  8412
  8413 				; optimize OK (service.pas), line = 1577
  8414
  8415 581B A9 00			lda #$00
  8416 581D 8D 85 A0			sta X
  8417
  8418 5820			l_12AC
  8419 				; --- ForToDoCondition
  8420 5820 AD 85 A0			lda X
  8421 5823 C9 10			cmp #$10
  8422 5825 90 03 4C B2 58		jcs l_12BA
  8423
  8424 				; optimize OK (service.pas), line = 1582
  8425
  8426 582A AD 95 9E			lda PLAYSCREEN.OFS
  8427 582D 6D 88 9F			adc HLP
  8428 5830 85 9F			sta :STACKORIGIN+9
  8429 5832 AD 96 9E			lda PLAYSCREEN.OFS+1
  8430 5835 6D 89 9F			adc HLP+1
  8431 5838 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8432 583A AD 97 9E			lda PLAYSCREEN.OFS+2
  8433 583D 69 00			adc #$00
  8434 583F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8435 5841 AD 98 9E			lda PLAYSCREEN.OFS+3
  8436 5844 69 00			adc #$00
  8437 5846 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8438 5848 A5 9F			lda :STACKORIGIN+9
  8439 584A 18 6D 85 A0			add X
  8440 584E 8D BD 9F			sta GETBYTE.SRC
  8441 5851 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8442 5853 69 00			adc #$00
  8443 5855 8D BE 9F			sta GETBYTE.SRC+1
  8444 5858 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8445 585A 69 00			adc #$00
  8446 585C 8D BF 9F			sta GETBYTE.SRC+2
  8447 585F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8448 5861 69 00			adc #$00
  8449 5863 8D C0 9F			sta GETBYTE.SRC+3
  8450 5866 20 68 3C			jsr GETBYTE
  8451 5869 AD C1 9F			lda GETBYTE.RESULT
  8452 586C 29 80			and #$80
  8453 586E 8D 8E A0			sta SHADOW
  8454
  8455 				; optimize OK (service.pas), line = 1584
  8456
  8457 5871 AD 86 A0			lda Y
  8458 5874 C9 07			cmp #$07
  8459 5876 B0 29			jcs l_12EC
  8460 5878 AD 85 A0			lda X
  8461 587B C9 0F			cmp #$0F
  8462 587D B0 22			jcs l_12EC
  8463
  8464 				; optimize OK (service.pas), line = 1589
  8465
  8466 587F AD 84 A0			lda BLOCK
  8467 5882 38 E9 01			sub #$01
  8468 5885 85 9F			sta :STACKORIGIN+9
  8469 5887 A9 00			lda #$00
  8470 5889 E9 00			sbc #$00
  8471 588B A5 9F			lda :STACKORIGIN+9
  8472 588D 29 0F			and #$0F
  8473 588F A8				tay
  8474 5890 B9 B8 20			lda adr.COLORBLOCK,y
  8475 5893 29 7F			and #$7F
  8476 5895 0D 8E A0			ora SHADOW
  8477 5898 8D 8C A0			sta CL
  8478
  8479 				; optimize OK (service.pas), line = 1591
  8480
  8481 589B AC 85 A0			ldy X
  8482 589E 4C A7 58			jmp l_131A
  8483 58A1			l_12EC
  8484
  8485 				; optimize OK (service.pas), line = 1604
  8486
  8487 58A1 AC 85 A0			ldy X
  8488 58A4 AD 8E A0			lda SHADOW
  8489 58A7			l_131A
  8490 58A7 99 00 C2			sta adr.TMP,y
  8491
  8492 				; --- ForToDoEpilog
  8493 58AA EE 85 A0			inc X
  8494 58AD F0 03 4C 20 58		jne l_12AC
  8495 58B2			l_12BA
  8496
  8497 				; optimize OK (service.pas), line = 1615
  8498
  8499 58B2 AD 88 9F			lda HLP
  8500 58B5 8D A9 9F			sta BLITTMP.DST
  8501 58B8 A9 50			lda #$50
  8502 58BA 18 6D 89 9F			add HLP+1
  8503 58BE 8D AA 9F			sta BLITTMP.DST+1
  8504 58C1 A9 00			lda #$00
  8505 58C3 69 00			adc #$00
  8506 58C5 8D AB 9F			sta BLITTMP.DST+2
  8507 58C8 A9 00			lda #$00
  8508 58CA 69 00			adc #$00
  8509 58CC 8D AC 9F			sta BLITTMP.DST+3
  8510 58CF A9 10			lda #$10
  8511 58D1 8D AD 9F			sta BLITTMP.SIZE
  8512 58D4 20 95 3B			jsr BLITTMP
  8513
  8514 				; optimize OK (service.pas), line = 1616
  8515
  8516 58D7 AD 95 9E			lda PLAYSCREEN.OFS
  8517 58DA 18 6D 88 9F			add HLP
  8518 58DE 8D A9 9F			sta BLITTMP.DST
  8519 58E1 AD 96 9E			lda PLAYSCREEN.OFS+1
  8520 58E4 6D 89 9F			adc HLP+1
  8521 58E7 8D AA 9F			sta BLITTMP.DST+1
  8522 58EA AD 97 9E			lda PLAYSCREEN.OFS+2
  8523 58ED 69 00			adc #$00
  8524 58EF 8D AB 9F			sta BLITTMP.DST+2
  8525 58F2 AD 98 9E			lda PLAYSCREEN.OFS+3
  8526 58F5 69 00			adc #$00
  8527 58F7 8D AC 9F			sta BLITTMP.DST+3
  8528 58FA A9 10			lda #$10
  8529 58FC 8D AD 9F			sta BLITTMP.SIZE
  8530 58FF 20 95 3B			jsr BLITTMP
  8531
  8532 				; --- ForToDoEpilog
  8533 5902 EE 86 A0			inc Y
  8534 5905 F0 03 4C F7 57		jne l_1283
  8535 590A			l_1291
  8536
  8537 				; optimize OK (service.pas), line = 1622
  8538
  8539 590A AD 8A A0			lda YS
  8540 590D 18 69 04			add #$04
  8541 5910 8D 86 A0			sta Y
  8542 5913 AD 8A A0			lda YS
  8543 5916 18 69 0C			add #$0C
  8544 5919 8D 1D 59			sta @FORTMP_134D_0
  8545
  8546 591C			l_1350
  8547 				; --- ForToDoCondition
  8548 591C A9 00			lda @FORTMP_134D_0::#$00
  8549 591E CD 86 A0			cmp Y
  8550 5921 B0 03 4C 2C 5A		jcc l_135E
  8551
  8552 				; optimize OK (service.pas), line = 1624
  8553
  8554 5926 A9 00			lda #$00
  8555 5928 8D 87 A0			sta I
  8556
  8557 				; optimize OK (service.pas), line = 1625
  8558
  8559 592B AC 86 A0			ldy Y
  8560 592E B9 00 C0			lda adr.ROW,y
  8561 5931 8D 88 9F			sta HLP
  8562 5934 B9 00 C1			lda adr.ROW+256,y
  8563 5937 8D 89 9F			sta HLP+1
  8564
  8565 				; optimize OK (service.pas), line = 1627
  8566
  8567 593A AD 88 A0			lda XS
  8568 593D 18 69 08			add #$08
  8569 5940 8D 85 A0			sta X
  8570 5943 AD 88 A0			lda XS
  8571 5946 18 69 18			add #$18
  8572 5949 8D 4D 59			sta @FORTMP_137A_0
  8573
  8574 594C			l_137D
  8575 				; --- ForToDoCondition
  8576 594C A9 00			lda @FORTMP_137A_0::#$00
  8577 594E CD 85 A0			cmp X
  8578 5951 90 5F			jcc l_138B
  8579
  8580 				; optimize OK (service.pas), line = 1628
  8581
  8582 5953 AD 85 A0			lda X
  8583 5956 C9 D8			cmp #$D8
  8584 5958 B0 53			jcs l_139D
  8585
  8586 				; optimize OK (service.pas), line = 1636
  8587
  8588 595A AD 95 9E			lda PLAYSCREEN.OFS
  8589 595D 6D 88 9F			adc HLP
  8590 5960 85 9F			sta :STACKORIGIN+9
  8591 5962 AD 96 9E			lda PLAYSCREEN.OFS+1
  8592 5965 6D 89 9F			adc HLP+1
  8593 5968 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8594 596A AD 97 9E			lda PLAYSCREEN.OFS+2
  8595 596D 69 00			adc #$00
  8596 596F 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8597 5971 AD 98 9E			lda PLAYSCREEN.OFS+3
  8598 5974 69 00			adc #$00
  8599 5976 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8600 5978 A5 9F			lda :STACKORIGIN+9
  8601 597A 18 6D 85 A0			add X
  8602 597E 8D BD 9F			sta GETBYTE.SRC
  8603 5981 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8604 5983 69 00			adc #$00
  8605 5985 8D BE 9F			sta GETBYTE.SRC+1
  8606 5988 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8607 598A 69 00			adc #$00
  8608 598C 8D BF 9F			sta GETBYTE.SRC+2
  8609 598F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8610 5991 69 00			adc #$00
  8611 5993 8D C0 9F			sta GETBYTE.SRC+3
  8612 5996 20 68 3C			jsr GETBYTE
  8613 5999 AD C1 9F			lda GETBYTE.RESULT
  8614 599C 29 7F			and #$7F
  8615 599E 8D 8C A0			sta CL
  8616
  8617 				; optimize OK (service.pas), line = 1638
  8618
  8619 59A1 AC 87 A0			ldy I
  8620 59A4 AD 8C A0			lda CL
  8621 59A7 99 00 C2			sta adr.TMP,y
  8622
  8623 				; optimize FAIL (0, service.pas), line = 1640
  8624
  8625 59AA EE 87 A0			inc I
  8626 59AD			l_139D
  8627
  8628 				; --- ForToDoEpilog
  8629 59AD EE 85 A0			inc X
  8630 59B0 D0 9A			jne l_137D
  8631 59B2			l_138B
  8632
  8633 				; optimize OK (service.pas), line = 1651
  8634
  8635 59B2 AD 88 A0			lda XS
  8636 59B5 18 69 08			add #$08
  8637 59B8 85 9F			sta :STACKORIGIN+9
  8638 59BA AD 89 A0			lda XS+1
  8639 59BD 69 00			adc #$00
  8640 59BF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8641 59C1 AD 88 9F			lda HLP
  8642 59C4 18 65 9F			add :STACKORIGIN+9
  8643 59C7 8D 88 9F			sta HLP
  8644 59CA AD 89 9F			lda HLP+1
  8645 59CD 65 AF			adc :STACKORIGIN+STACKWIDTH+9
  8646 59CF 8D 89 9F			sta HLP+1
  8647
  8648 				; optimize OK (service.pas), line = 1653
  8649
  8650 59D2 AD 88 9F			lda HLP
  8651 59D5 8D A9 9F			sta BLITTMP.DST
  8652 59D8 A9 50			lda #$50
  8653 59DA 18 6D 89 9F			add HLP+1
  8654 59DE 8D AA 9F			sta BLITTMP.DST+1
  8655 59E1 A9 00			lda #$00
  8656 59E3 69 00			adc #$00
  8657 59E5 8D AB 9F			sta BLITTMP.DST+2
  8658 59E8 A9 00			lda #$00
  8659 59EA 69 00			adc #$00
  8660 59EC 8D AC 9F			sta BLITTMP.DST+3
  8661 59EF AD 87 A0			lda I
  8662 59F2 8D AD 9F			sta BLITTMP.SIZE
  8663 59F5 20 95 3B			jsr BLITTMP
  8664
  8665 				; optimize OK (service.pas), line = 1654
  8666
  8667 59F8 AD 95 9E			lda PLAYSCREEN.OFS
  8668 59FB 18 6D 88 9F			add HLP
  8669 59FF 8D A9 9F			sta BLITTMP.DST
  8670 5A02 AD 96 9E			lda PLAYSCREEN.OFS+1
  8671 5A05 6D 89 9F			adc HLP+1
  8672 5A08 8D AA 9F			sta BLITTMP.DST+1
  8673 5A0B AD 97 9E			lda PLAYSCREEN.OFS+2
  8674 5A0E 69 00			adc #$00
  8675 5A10 8D AB 9F			sta BLITTMP.DST+2
  8676 5A13 AD 98 9E			lda PLAYSCREEN.OFS+3
  8677 5A16 69 00			adc #$00
  8678 5A18 8D AC 9F			sta BLITTMP.DST+3
  8679 5A1B AD 87 A0			lda I
  8680 5A1E 8D AD 9F			sta BLITTMP.SIZE
  8681 5A21 20 95 3B			jsr BLITTMP
  8682
  8683 				; --- ForToDoEpilog
  8684 5A24 EE 86 A0			inc Y
  8685 5A27 F0 03 4C 1C 59		jne l_1350
  8686 5A2C			l_135E
  8687
  8688 				; optimize OK (service.pas), line = 1659
  8689
  8690 5A2C AD 84 A0			lda BLOCK
  8691 5A2F C9 09			cmp #$09
  8692 5A31 B0 03 4C EA 5B		jcc l_13F7
  8693
  8694 				; optimize OK (service.pas), line = 1661
  8695
  8696 5A36 A9 00			lda #$00
  8697 5A38 8D 8D A0			sta CL2
  8698
  8699 				; optimize OK (service.pas), line = 1662
  8700
  8701 5A3B AD 84 A0			lda BLOCK
  8702 5A3E 29 0F			and #$0F
  8703 5A40 C9 09			cmp #$09
  8704 5A42 D0 19			jne l_1412
  8705
  8706 				; optimize OK (service.pas), line = 1664
  8707
  8708 5A44 A9 CA			lda #$CA
  8709 5A46 8D 8D A0			sta CL2
  8710
  8711 				; optimize OK (service.pas), line = 1665
  8712
  8713 5A49 AD 83 A0			lda YA
  8714 5A4C 0A				asl @
  8715 5A4D 0A				asl @
  8716 5A4E 0A				asl @
  8717 5A4F 0A				asl @
  8718 5A50 18 6D 82 A0			add XA
  8719 5A54 A8				tay
  8720 5A55 A9 19			lda #$19
  8721 5A57 99 00 DB			sta adr.WALL,y
  8722 5A5A 4C 69 5A			jmp l_1431
  8723 5A5D			l_1412
  8724
  8725 				; optimize OK (service.pas), line = 1671
  8726
  8727 5A5D AD 84 A0			lda BLOCK
  8728 5A60 C9 0A			cmp #$0A
  8729 5A62 D0 05			jne l_1443
  8730 5A64 A9 C9			lda #$C9
  8731 5A66 8D 8D A0			sta CL2
  8732 5A69			l_1431
  8733 5A69			l_1443
  8734
  8735 				; optimize OK (service.pas), line = 1675
  8736
  8737 5A69 A9 00			lda #$00
  8738 5A6B 8D 86 A0			sta Y
  8739
  8740 5A6E			l_1453
  8741 				; --- ForToDoCondition
  8742 5A6E AD 86 A0			lda Y
  8743 5A71 C9 07			cmp #$07
  8744 5A73 90 03 4C 22 5B		jcs l_1461
  8745
  8746 				; optimize OK (service.pas), line = 1678
  8747
  8748 5A78 6D 8A A0			adc YS
  8749 5A7B A8				tay
  8750 5A7C AD 88 A0			lda XS
  8751 5A7F 18 79 00 C0			add adr.ROW,y
  8752 5A83 8D 88 9F			sta HLP
  8753 5A86 AD 89 A0			lda XS+1
  8754 5A89 79 00 C1			adc adr.ROW+256,y
  8755 5A8C 8D 89 9F			sta HLP+1
  8756
  8757 				; optimize OK (service.pas), line = 1683
  8758
  8759 5A8F AD 95 9E			lda PLAYSCREEN.OFS
  8760 5A92 18 6D 88 9F			add HLP
  8761 5A96 8D BD 9F			sta GETBYTE.SRC
  8762 5A99 AD 96 9E			lda PLAYSCREEN.OFS+1
  8763 5A9C 6D 89 9F			adc HLP+1
  8764 5A9F 8D BE 9F			sta GETBYTE.SRC+1
  8765 5AA2 AD 97 9E			lda PLAYSCREEN.OFS+2
  8766 5AA5 69 00			adc #$00
  8767 5AA7 8D BF 9F			sta GETBYTE.SRC+2
  8768 5AAA AD 98 9E			lda PLAYSCREEN.OFS+3
  8769 5AAD 69 00			adc #$00
  8770 5AAF 8D C0 9F			sta GETBYTE.SRC+3
  8771 5AB2 20 68 3C			jsr GETBYTE
  8772 5AB5 AD C1 9F			lda GETBYTE.RESULT
  8773 5AB8 29 80			and #$80
  8774 5ABA 8D 8C A0			sta CL
  8775
  8776 				; optimize OK (service.pas), line = 1685
  8777
  8778 5ABD AD 8D A0			lda CL2
  8779 5AC0 29 7F			and #$7F
  8780 5AC2 0D 8C A0			ora CL
  8781 5AC5 8D 8D A0			sta CL2
  8782
  8783 				; optimize OK (service.pas), line = 1689
  8784
  8785 5AC8 AD 88 9F			lda HLP
  8786 5ACB 8D B8 9F			sta PUTBYTE.DST
  8787 5ACE A9 50			lda #$50
  8788 5AD0 18 6D 89 9F			add HLP+1
  8789 5AD4 8D B9 9F			sta PUTBYTE.DST+1
  8790 5AD7 A9 00			lda #$00
  8791 5AD9 69 00			adc #$00
  8792 5ADB 8D BA 9F			sta PUTBYTE.DST+2
  8793 5ADE A9 00			lda #$00
  8794 5AE0 69 00			adc #$00
  8795 5AE2 8D BB 9F			sta PUTBYTE.DST+3
  8796 5AE5 AD 8D A0			lda CL2
  8797 5AE8 8D BC 9F			sta PUTBYTE.V
  8798 5AEB 20 40 3C			jsr PUTBYTE
  8799
  8800 				; optimize OK (service.pas), line = 1693
  8801
  8802 5AEE AD 95 9E			lda PLAYSCREEN.OFS
  8803 5AF1 18 6D 88 9F			add HLP
  8804 5AF5 8D B8 9F			sta PUTBYTE.DST
  8805 5AF8 AD 96 9E			lda PLAYSCREEN.OFS+1
  8806 5AFB 6D 89 9F			adc HLP+1
  8807 5AFE 8D B9 9F			sta PUTBYTE.DST+1
  8808 5B01 AD 97 9E			lda PLAYSCREEN.OFS+2
  8809 5B04 69 00			adc #$00
  8810 5B06 8D BA 9F			sta PUTBYTE.DST+2
  8811 5B09 AD 98 9E			lda PLAYSCREEN.OFS+3
  8812 5B0C 69 00			adc #$00
  8813 5B0E 8D BB 9F			sta PUTBYTE.DST+3
  8814 5B11 AD 8D A0			lda CL2
  8815 5B14 8D BC 9F			sta PUTBYTE.V
  8816 5B17 20 40 3C			jsr PUTBYTE
  8817
  8818 				; --- ForToDoEpilog
  8819 5B1A EE 86 A0			inc Y
  8820 5B1D F0 03 4C 6E 5A		jne l_1453
  8821 5B22			l_1461
  8822
  8823 				; optimize OK (service.pas), line = 1696
  8824
  8825 5B22 AC 8A A0			ldy YS
  8826 5B25 AD 88 A0			lda XS
  8827 5B28 18 79 00 C0			add adr.ROW,y
  8828 5B2C 8D 88 9F			sta HLP
  8829 5B2F AD 89 A0			lda XS+1
  8830 5B32 79 00 C1			adc adr.ROW+256,y
  8831 5B35 8D 89 9F			sta HLP+1
  8832
  8833 				; optimize OK (service.pas), line = 1699
  8834
  8835 5B38 A9 00			lda #$00
  8836 5B3A A8				tay
  8837
  8838 5B3B			l_14BF
  8839 				; --- ForToDoCondition
  8840 5B3B 8C 85 A0			sty X
  8841 5B3E C0 0F			cpy #$0F
  8842 5B40 B0 58			jcs l_14CD
  8843
  8844 				; optimize OK (service.pas), line = 1704
  8845
  8846 5B42 AD 95 9E			lda PLAYSCREEN.OFS
  8847 5B45 6D 88 9F			adc HLP
  8848 5B48 85 9F			sta :STACKORIGIN+9
  8849 5B4A AD 96 9E			lda PLAYSCREEN.OFS+1
  8850 5B4D 6D 89 9F			adc HLP+1
  8851 5B50 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8852 5B52 AD 97 9E			lda PLAYSCREEN.OFS+2
  8853 5B55 69 00			adc #$00
  8854 5B57 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8855 5B59 AD 98 9E			lda PLAYSCREEN.OFS+3
  8856 5B5C 69 00			adc #$00
  8857 5B5E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8858 5B60 A5 9F			lda :STACKORIGIN+9
  8859 5B62 18 6D 85 A0			add X
  8860 5B66 8D BD 9F			sta GETBYTE.SRC
  8861 5B69 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8862 5B6B 69 00			adc #$00
  8863 5B6D 8D BE 9F			sta GETBYTE.SRC+1
  8864 5B70 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8865 5B72 69 00			adc #$00
  8866 5B74 8D BF 9F			sta GETBYTE.SRC+2
  8867 5B77 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8868 5B79 69 00			adc #$00
  8869 5B7B 8D C0 9F			sta GETBYTE.SRC+3
  8870 5B7E 20 68 3C			jsr GETBYTE
  8871 5B81 AD C1 9F			lda GETBYTE.RESULT
  8872 5B84 29 80			and #$80
  8873 5B86 8D 8C A0			sta CL
  8874
  8875 				; optimize OK (service.pas), line = 1706
  8876
  8877 5B89 AD 8D A0			lda CL2
  8878 5B8C 29 7F			and #$7F
  8879 5B8E 0D 8C A0			ora CL
  8880 5B91 AC 85 A0			ldy X
  8881 5B94 99 00 C2			sta adr.TMP,y
  8882
  8883 				; --- ForToDoEpilog
  8884 5B97 C8				iny
  8885 5B98 D0 A1			jne l_14BF
  8886 5B9A			l_14CD
  8887
  8888 				; optimize OK (service.pas), line = 1715
  8889
  8890 5B9A AD 88 9F			lda HLP
  8891 5B9D 8D A9 9F			sta BLITTMP.DST
  8892 5BA0 A9 50			lda #$50
  8893 5BA2 18 6D 89 9F			add HLP+1
  8894 5BA6 8D AA 9F			sta BLITTMP.DST+1
  8895 5BA9 A9 00			lda #$00
  8896 5BAB 69 00			adc #$00
  8897 5BAD 8D AB 9F			sta BLITTMP.DST+2
  8898 5BB0 A9 00			lda #$00
  8899 5BB2 69 00			adc #$00
  8900 5BB4 8D AC 9F			sta BLITTMP.DST+3
  8901 5BB7 A9 0F			lda #$0F
  8902 5BB9 8D AD 9F			sta BLITTMP.SIZE
  8903 5BBC 20 95 3B			jsr BLITTMP
  8904
  8905 				; optimize OK (service.pas), line = 1716
  8906
  8907 5BBF AD 95 9E			lda PLAYSCREEN.OFS
  8908 5BC2 18 6D 88 9F			add HLP
  8909 5BC6 8D A9 9F			sta BLITTMP.DST
  8910 5BC9 AD 96 9E			lda PLAYSCREEN.OFS+1
  8911 5BCC 6D 89 9F			adc HLP+1
  8912 5BCF 8D AA 9F			sta BLITTMP.DST+1
  8913 5BD2 AD 97 9E			lda PLAYSCREEN.OFS+2
  8914 5BD5 69 00			adc #$00
  8915 5BD7 8D AB 9F			sta BLITTMP.DST+2
  8916 5BDA AD 98 9E			lda PLAYSCREEN.OFS+3
  8917 5BDD 69 00			adc #$00
  8918 5BDF 8D AC 9F			sta BLITTMP.DST+3
  8919 5BE2 A9 0F			lda #$0F
  8920 5BE4 8D AD 9F			sta BLITTMP.SIZE
  8921 5BE7 20 95 3B			jsr BLITTMP
  8922 5BEA			l_13F7
  8923
  8924 				; ------------------------------------------------------------
  8925
  8926 = A082			XA	= DATAORIGIN+$02ED
  8927 = A083			YA	= DATAORIGIN+$02EE
  8928 = A084			BLOCK	= DATAORIGIN+$02EF
  8929 = A085			X	= DATAORIGIN+$02F0
  8930 = A086			Y	= DATAORIGIN+$02F1
  8931 = A087			I	= DATAORIGIN+$02F2
  8932 = A088			XS	= DATAORIGIN+$02F3
  8933 = A08A			YS	= DATAORIGIN+$02F5
  8934 = A08C			CL	= DATAORIGIN+$02F7
  8935 = A08D			CL2	= DATAORIGIN+$02F8
  8936 = A08E			SHADOW	= DATAORIGIN+$02F9
  8937
  8938 = A082			@VarData	= XA
  8939 = 000D			@VarDataSize	= 13
  8940
  8941 5BEA			@exit
  8942 					.ifdef @new
  8943 					lda <@VarData
  8944 					sta :ztmp
  8945 					lda >@VarData
  8946 					ldy #@VarDataSize-1
  8947 					jmp @FreeMem
  8948 					els
  8949 5BEA 60				rts						; ret
  8950 					eif
  8951 				.endl
  8952
  8953 5BEB			.local	PUT_WALL					; PROCEDURE
  8954
  8955 				; optimize OK (service.pas), line = 1728
  8956
  8957 5BEB A9 00			lda #$00
  8958 5BED 8D 92 A0			sta Y
  8959
  8960 5BF0			l_1518
  8961 				; --- ForToDoCondition
  8962 5BF0 AD 92 A0			lda Y
  8963 5BF3 C9 0F			cmp #$0F
  8964 5BF5 B0 48			jcs l_1526
  8965
  8966 				; optimize OK (service.pas), line = 1729
  8967
  8968 5BF7 A9 00			lda #$00
  8969 5BF9 8D 91 A0			sta X
  8970
  8971 5BFC			l_152F
  8972 				; --- ForToDoCondition
  8973 5BFC AD 91 A0			lda X
  8974 5BFF C9 0D			cmp #$0D
  8975 5C01 B0 37			jcs l_153D
  8976
  8977 				; optimize OK (service.pas), line = 1730
  8978
  8979 5C03 AD 92 A0			lda Y
  8980 5C06 0A				asl @
  8981 5C07 0A				asl @
  8982 5C08 0A				asl @
  8983 5C09 0A				asl @
  8984 5C0A 18 6D 91 A0			add X
  8985 5C0E A8				tay
  8986 5C0F B9 00 DB			lda adr.WALL,y
  8987 5C12 F0 21			jeq l_155C
  8988 5C14 AD 92 A0			lda Y
  8989 5C17 0A				asl @
  8990 5C18 0A				asl @
  8991 5C19 0A				asl @
  8992 5C1A 0A				asl @
  8993 5C1B 18 6D 91 A0			add X
  8994 5C1F A8				tay
  8995 5C20 B9 00 DB			lda adr.WALL,y
  8996 5C23 8D 84 A0			sta PLACE_BLOCK.BLOCK
  8997 5C26 AD 91 A0			lda X
  8998 5C29 8D 82 A0			sta PLACE_BLOCK.XA
  8999 5C2C AD 92 A0			lda Y
  9000 5C2F 8D 83 A0			sta PLACE_BLOCK.YA
  9001 5C32 20 AD 57			jsr PLACE_BLOCK
  9002 5C35			l_155C
  9003
  9004 				; --- ForToDoEpilog
  9005 5C35 EE 91 A0			inc X
  9006 5C38 D0 C2			jne l_152F
  9007 5C3A			l_153D
  9008
  9009 				; --- ForToDoEpilog
  9010 5C3A EE 92 A0			inc Y
  9011 5C3D D0 B1			jne l_1518
  9012 5C3F			l_1526
  9013
  9014 				; ------------------------------------------------------------
  9015
  9016 = A091			X	= DATAORIGIN+$02FC
  9017 = A092			Y	= DATAORIGIN+$02FD
  9018
  9019 = A091			@VarData	= X
  9020 = 0002			@VarDataSize	= 2
  9021
  9022 5C3F			@exit
  9023 					.ifdef @new
  9024 					lda <@VarData
  9025 					sta :ztmp
  9026 					lda >@VarData
  9027 					ldy #@VarDataSize-1
  9028 					jmp @FreeMem
  9029 					els
  9030 5C3F 60				rts						; ret
  9031 					eif
  9032 				.endl
  9033
  9034 5C40			.local	SET_WALL					; PROCEDURE
  9035
  9036 				; optimize OK (service.pas), line = 1739
  9037
  9038 5C40 A9 00			lda #$00
  9039 5C42 8D 48 9F			sta REMAIN_BLK
  9040
  9041 				; optimize OK (service.pas), line = 1740
  9042
  9043 5C45 AC 65 9F			ldy CUR_PLAYER
  9044 5C48 B9 56 9F			lda adr.SCORE.WALL_N,y
  9045 5C4B 8D 95 A0			sta WL
  9046
  9047 				; optimize OK (service.pas), line = 1743
  9048
  9049 5C4E A9 00			lda #$00
  9050 5C50 8D 94 A0			sta Y
  9051
  9052 5C53			l_159A
  9053 				; --- ForToDoCondition
  9054 5C53 AD 94 A0			lda Y
  9055 5C56 C9 0F			cmp #$0F
  9056 5C58 B0 3D			jcs l_15A8
  9057
  9058 				; optimize OK (service.pas), line = 1744
  9059
  9060 5C5A A9 00			lda #$00
  9061 5C5C 8D 93 A0			sta X
  9062
  9063 5C5F			l_15B1
  9064 				; --- ForToDoCondition
  9065 5C5F AD 93 A0			lda X
  9066 5C62 C9 0D			cmp #$0D
  9067 5C64 B0 2C			jcs l_15BF
  9068
  9069 				; optimize OK (service.pas), line = 1747
  9070
  9071 5C66 AD 94 A0			lda Y
  9072 5C69 0A				asl @
  9073 5C6A 0A				asl @
  9074 5C6B 0A				asl @
  9075 5C6C 0A				asl @
  9076 5C6D 18 6D 93 A0			add X
  9077 5C71 A8				tay
  9078 5C72 B9 00 DB			lda adr.WALL,y
  9079 5C75 F0 16			jeq l_15F7
  9080 5C77 AD 94 A0			lda Y
  9081 5C7A 0A				asl @
  9082 5C7B 0A				asl @
  9083 5C7C 0A				asl @
  9084 5C7D 0A				asl @
  9085 5C7E 18 6D 93 A0			add X
  9086 5C82 A8				tay
  9087 5C83 B9 00 DB			lda adr.WALL,y
  9088 5C86 C9 0A			cmp #$0A
  9089 5C88 F0 03			jeq l_15F7
  9090 5C8A EE 48 9F			inc REMAIN_BLK
  9091 5C8D			l_15F7
  9092
  9093 				; --- ForToDoEpilog
  9094 5C8D EE 93 A0			inc X
  9095 5C90 D0 CD			jne l_15B1
  9096 5C92			l_15BF
  9097
  9098 				; --- ForToDoEpilog
  9099 5C92 EE 94 A0			inc Y
  9100 5C95 D0 BC			jne l_159A
  9101 5C97			l_15A8
  9102
  9103 				; optimize OK (service.pas), line = 1749
  9104
  9105 5C97 AD 95 A0			lda WL
  9106 5C9A 38 E9 01			sub #$01
  9107 5C9D 85 86			sta @SMALLINT.MOD.A
  9108 5C9F A9 00			lda #$00
  9109 5CA1 E9 00			sbc #$00
  9110 5CA3 85 87			sta @SMALLINT.MOD.A+1
  9111 5CA5 A9 04			lda #$04
  9112 5CA7 85 8E			sta @SMALLINT.MOD.B
  9113 5CA9 A9 00			lda #$00
  9114 5CAB 85 8F			sta @SMALLINT.MOD.B+1
  9115 5CAD 20 80 22			jsr @SMALLINT.MOD
  9116 5CB0 A5 92			lda @SMALLINT.MOD.RESULT
  9117 5CB2 8D 95 A0			sta WL
  9118
  9119 				; optimize OK (service.pas), line = 1751
  9120
  9121 5CB5 8D 96 A0			sta @CASETMP_0008
  9122 5CB8 C9 00			cmp #$00
  9123 5CBA D0 33			jne l_1621
  9124 				@
  9125
  9126 				; optimize OK (service.pas), line = 1752
  9127
  9128 5CBC AD 1E 9F 8D 16 9F + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9129 5CEC 4C C8 5D			jmp a_0008
  9130 5CEF			l_1621
  9131 5CEF C9 01			cmp #$01
  9132 5CF1 D0 33			jne l_162A
  9133
  9134 				; optimize OK (service.pas), line = 1753
  9135
  9136 5CF3 AD 26 9F 8D 16 9F + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9137 5D23 4C C8 5D			jmp a_0008
  9138 5D26			l_162A
  9139 5D26 C9 02			cmp #$02
  9140 5D28 D0 33			jne l_1633
  9141
  9142 				; optimize OK (service.pas), line = 1754
  9143
  9144 5D2A AD 2E 9F 8D 16 9F + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9145 5D5A 4C C8 5D			jmp a_0008
  9146 5D5D			l_1633
  9147 5D5D C9 03			cmp #$03
  9148 5D5F D0 33			jne l_163C
  9149
  9150 				; optimize OK (service.pas), line = 1755
  9151
  9152 5D61 AD 36 9F 8D 16 9F + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9153 5D91 4C C8 5D			jmp a_0008
  9154 5D94			l_163C
  9155 5D94 C9 04			cmp #$04
  9156 5D96 D0 30			jne l_1645
  9157
  9158 				; optimize OK (service.pas), line = 1756
  9159
  9160 5D98 AD 3E 9F 8D 16 9F + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9161 5DC8			l_1645
  9162 5DC8			a_0008
  9163
  9164 				; ------------------------------------------------------------
  9165
  9166 = A093			X	= DATAORIGIN+$02FE
  9167 = A094			Y	= DATAORIGIN+$02FF
  9168 = A095			WL	= DATAORIGIN+$0300
  9169 = A096			@CASETMP_0008	= DATAORIGIN+$0301
  9170
  9171 = A093			@VarData	= X
  9172 = 0004			@VarDataSize	= 4
  9173
  9174 5DC8			@exit
  9175 					.ifdef @new
  9176 					lda <@VarData
  9177 					sta :ztmp
  9178 					lda >@VarData
  9179 					ldy #@VarDataSize-1
  9180 					jmp @FreeMem
  9181 					els
  9182 5DC8 60				rts						; ret
  9183 					eif
  9184 				.endl
  9185
  9186 5DC9			.local	SPLIT_LINE					; FUNCTION
  9187
  9188 				; optimize OK (service.pas), line = 1795
  9189
  9190 5DC9 AC 97 A0 84 84 AC + 	mwy X1 :bp2
  9191 5DD3 A0 00			ldy #$00
  9192 5DD5 B1 84			lda (:bp2),y
  9193 5DD7 18 69 10			add #$10
  9194 5DDA 91 84			sta (:bp2),y
  9195 5DDC C8				iny
  9196 5DDD B1 84			lda (:bp2),y
  9197 5DDF 69 00			adc #$00
  9198 5DE1 91 84			sta (:bp2),y
  9199
  9200 				; optimize OK (service.pas), line = 1796
  9201
  9202 5DE3 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
  9203 5DED A0 00			ldy #$00
  9204 5DEF B1 84			lda (:bp2),y
  9205 5DF1 18 69 18			add #$18
  9206 5DF4 91 84			sta (:bp2),y
  9207 5DF6 C8				iny
  9208 5DF7 B1 84			lda (:bp2),y
  9209 5DF9 69 00			adc #$00
  9210 5DFB 91 84			sta (:bp2),y
  9211
  9212 				; optimize OK (service.pas), line = 1797
  9213
  9214 5DFD AC 9B A0 84 84 AC + 	mwy X2 :bp2
  9215 5E07 A0 00			ldy #$00
  9216 5E09 B1 84			lda (:bp2),y
  9217 5E0B 18 69 10			add #$10
  9218 5E0E 91 84			sta (:bp2),y
  9219 5E10 C8				iny
  9220 5E11 B1 84			lda (:bp2),y
  9221 5E13 69 00			adc #$00
  9222 5E15 91 84			sta (:bp2),y
  9223
  9224 				; optimize OK (service.pas), line = 1798
  9225
  9226 5E17 AC 9D A0 84 84 AC + 	mwy Y2 :bp2
  9227 5E21 A0 00			ldy #$00
  9228 5E23 B1 84			lda (:bp2),y
  9229 5E25 18 69 18			add #$18
  9230 5E28 91 84			sta (:bp2),y
  9231 5E2A C8				iny
  9232 5E2B B1 84			lda (:bp2),y
  9233 5E2D 69 00			adc #$00
  9234 5E2F 91 84			sta (:bp2),y
  9235
  9236 				; optimize OK (service.pas), line = 1800
  9237
  9238 5E31 A9 00			lda #$00
  9239 5E33 8D C0 A0			sta COLLISION
  9240
  9241 				; optimize OK (service.pas), line = 1802
  9242
  9243 5E36 AC 97 A0 84 84 AC + 	mwy X1 :bp2
  9244 5E40 A0 00			ldy #$00
  9245 5E42 B1 84			lda (:bp2),y
  9246 5E44 85 9F			sta :STACKORIGIN+9
  9247 5E46 C8				iny
  9248 5E47 B1 84			lda (:bp2),y
  9249 5E49 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9250 5E4B A0 00			ldy #$00
  9251 5E4D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9252 5E4F 10 01			spl
  9253 5E51 88				dey
  9254 5E52 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9255 5E54 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9256 5E56 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9257 5E58 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9258 5E5A 66 9F			ror :STACKORIGIN+9
  9259 5E5C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9260 5E5E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9261 5E60 66 9F			ror :STACKORIGIN+9
  9262 5E62 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9263 5E64 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9264 5E66 66 9F			ror :STACKORIGIN+9
  9265 5E68 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9266 5E6A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9267 5E6C 66 9F			ror :STACKORIGIN+9
  9268 5E6E A5 9F			lda :STACKORIGIN+9
  9269 5E70 8D B4 A0			sta XP1
  9270 5E73 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9271 5E75 8D B5 A0			sta XP1+1
  9272
  9273 				; optimize OK (service.pas), line = 1803
  9274
  9275 5E78 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
  9276 5E82 A0 00			ldy #$00
  9277 5E84 B1 84			lda (:bp2),y
  9278 5E86 85 9F			sta :STACKORIGIN+9
  9279 5E88 C8				iny
  9280 5E89 B1 84			lda (:bp2),y
  9281 5E8B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9282 5E8D A0 00			ldy #$00
  9283 5E8F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9284 5E91 10 01			spl
  9285 5E93 88				dey
  9286 5E94 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9287 5E96 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9288 5E98 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9289 5E9A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9290 5E9C 66 9F			ror :STACKORIGIN+9
  9291 5E9E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9292 5EA0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9293 5EA2 66 9F			ror :STACKORIGIN+9
  9294 5EA4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9295 5EA6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9296 5EA8 66 9F			ror :STACKORIGIN+9
  9297 5EAA A5 9F			lda :STACKORIGIN+9
  9298 5EAC 8D B6 A0			sta YP1
  9299 5EAF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9300 5EB1 8D B7 A0			sta YP1+1
  9301
  9302 				; optimize OK (service.pas), line = 1804
  9303
  9304 5EB4 AC 9B A0 84 84 AC + 	mwy X2 :bp2
  9305 5EBE A0 00			ldy #$00
  9306 5EC0 B1 84			lda (:bp2),y
  9307 5EC2 85 9F			sta :STACKORIGIN+9
  9308 5EC4 C8				iny
  9309 5EC5 B1 84			lda (:bp2),y
  9310 5EC7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9311 5EC9 A0 00			ldy #$00
  9312 5ECB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9313 5ECD 10 01			spl
  9314 5ECF 88				dey
  9315 5ED0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9316 5ED2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9317 5ED4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9318 5ED6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9319 5ED8 66 9F			ror :STACKORIGIN+9
  9320 5EDA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9321 5EDC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9322 5EDE 66 9F			ror :STACKORIGIN+9
  9323 5EE0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9324 5EE2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9325 5EE4 66 9F			ror :STACKORIGIN+9
  9326 5EE6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9327 5EE8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9328 5EEA 66 9F			ror :STACKORIGIN+9
  9329 5EEC A5 9F			lda :STACKORIGIN+9
  9330 5EEE 8D B8 A0			sta XP2
  9331 5EF1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9332 5EF3 8D B9 A0			sta XP2+1
  9333
  9334 				; optimize OK (service.pas), line = 1805
  9335
  9336 5EF6 AC 9D A0 84 84 AC + 	mwy Y2 :bp2
  9337 5F00 A0 00			ldy #$00
  9338 5F02 B1 84			lda (:bp2),y
  9339 5F04 85 9F			sta :STACKORIGIN+9
  9340 5F06 C8				iny
  9341 5F07 B1 84			lda (:bp2),y
  9342 5F09 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9343 5F0B A0 00			ldy #$00
  9344 5F0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9345 5F0F 10 01			spl
  9346 5F11 88				dey
  9347 5F12 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9348 5F14 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9349 5F16 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9350 5F18 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9351 5F1A 66 9F			ror :STACKORIGIN+9
  9352 5F1C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9353 5F1E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9354 5F20 66 9F			ror :STACKORIGIN+9
  9355 5F22 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9356 5F24 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9357 5F26 66 9F			ror :STACKORIGIN+9
  9358 5F28 A5 9F			lda :STACKORIGIN+9
  9359 5F2A 8D BA A0			sta YP2
  9360 5F2D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9361 5F2F 8D BB A0			sta YP2+1
  9362
  9363 				; optimize OK (service.pas), line = 1807
  9364
  9365 5F32 AC 97 A0 84 84 AC + 	mwy X1 :bp2
  9366 5F3C A0 00			ldy #$00
  9367 5F3E B1 84			lda (:bp2),y
  9368 5F40 8D A4 A0			sta XK
  9369 5F43 C8				iny
  9370 5F44 B1 84			lda (:bp2),y
  9371 5F46 8D A5 A0			sta XK+1
  9372
  9373 				; optimize OK (service.pas), line = 1808
  9374
  9375 5F49 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
  9376 5F53 A0 00			ldy #$00
  9377 5F55 B1 84			lda (:bp2),y
  9378 5F57 8D A6 A0			sta YK
  9379 5F5A C8				iny
  9380 5F5B B1 84			lda (:bp2),y
  9381 5F5D 8D A7 A0			sta YK+1
  9382
  9383 				; optimize OK (service.pas), line = 1809
  9384
  9385 5F60 AC 9B A0 84 84 AC + 	mwy X2 :bp2
  9386 5F6A A0 00			ldy #$00
  9387 5F6C B1 84			lda (:bp2),y
  9388 5F6E 8D A8 A0			sta XJ
  9389 5F71 C8				iny
  9390 5F72 B1 84			lda (:bp2),y
  9391 5F74 8D A9 A0			sta XJ+1
  9392
  9393 				; optimize OK (service.pas), line = 1810
  9394
  9395 5F77 AC 9D A0 84 84 AC + 	mwy Y2 :bp2
  9396 5F81 A0 00			ldy #$00
  9397 5F83 B1 84			lda (:bp2),y
  9398 5F85 8D AA A0			sta YJ
  9399 5F88 C8				iny
  9400 5F89 B1 84			lda (:bp2),y
  9401 5F8B 8D AB A0			sta YJ+1
  9402
  9403 				; optimize OK (service.pas), line = 1812
  9404
  9405 5F8E AC 97 A0 84 84 AC + 	mwy X1 :bp2
  9406 5F98 A0 00			ldy #$00
  9407 5F9A B1 84			lda (:bp2),y
  9408 5F9C 8D AC A0			sta XH
  9409 5F9F C8				iny
  9410 5FA0 B1 84			lda (:bp2),y
  9411 5FA2 8D AD A0			sta XH+1
  9412
  9413 				; optimize OK (service.pas), line = 1813
  9414
  9415 5FA5 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
  9416 5FAF A0 00			ldy #$00
  9417 5FB1 B1 84			lda (:bp2),y
  9418 5FB3 8D AE A0			sta YH
  9419 5FB6 C8				iny
  9420 5FB7 B1 84			lda (:bp2),y
  9421 5FB9 8D AF A0			sta YH+1
  9422
  9423 				; optimize OK (service.pas), line = 1814
  9424
  9425 5FBC AC 9B A0 84 84 AC + 	mwy X2 :bp2
  9426 5FC6 A0 00			ldy #$00
  9427 5FC8 B1 84			lda (:bp2),y
  9428 5FCA 8D B0 A0			sta XN
  9429 5FCD C8				iny
  9430 5FCE B1 84			lda (:bp2),y
  9431 5FD0 8D B1 A0			sta XN+1
  9432
  9433 				; optimize OK (service.pas), line = 1815
  9434
  9435 5FD3 AC 9D A0 84 84 AC + 	mwy Y2 :bp2
  9436 5FDD A0 00			ldy #$00
  9437 5FDF B1 84			lda (:bp2),y
  9438 5FE1 8D B2 A0			sta YN
  9439 5FE4 C8				iny
  9440 5FE5 B1 84			lda (:bp2),y
  9441 5FE7 8D B3 A0			sta YN+1
  9442
  9443 				; optimize OK (service.pas), line = 1822
  9444
  9445 5FEA AC 97 A0 84 84 AC + 	mwy X1 :bp2
  9446 5FF4 A0 00			ldy #$00
  9447 5FF6 B1 84			lda (:bp2),y
  9448 5FF8 85 9F			sta :STACKORIGIN+9
  9449 5FFA C8				iny
  9450 5FFB B1 84			lda (:bp2),y
  9451 5FFD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9452 5FFF AC 9B A0 84 84 AC + 	mwy X2 :bp2
  9453 6009 A0 00			ldy #$00
  9454 600B B1 84			lda (:bp2),y
  9455 600D 85 A0			sta :STACKORIGIN+10
  9456 600F C8				iny
  9457 6010 B1 84			lda (:bp2),y
  9458 6012 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9459 6014 A0 00			ldy #$00
  9460 6016 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9461 6018 10 01			spl
  9462 601A 88				dey
  9463 601B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9464 601D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9465 601F 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9466 6021 A0 00			ldy #$00
  9467 6023 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9468 6025 10 01			spl
  9469 6027 88				dey
  9470 6028 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9471 602A 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9472 602C 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9473 602E A5 9F			lda :STACKORIGIN+9
  9474 6030 38 E5 A0			sub :STACKORIGIN+10
  9475 6033 85 8A			sta SYSTEM.ABS.@010185000.X
  9476 6035 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9477 6037 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9478 6039 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9479 603B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9480 603D E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9481 603F 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9482 6041 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9483 6043 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9484 6045 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9485 6047 20 27 2B			jsr SYSTEM.ABS.@010185000
  9486 604A E8				inx
  9487 604B A0 01			ldy #1
  9488 604D				.LOCAL
  9489 604D A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9490 604F 38 E9 00			sub #$00
  9491 6052 D0 1C			bne L4
  9492 6054 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9493 6056 C9 00			cmp #$00
  9494 6058 D0 0A			bne L1
  9495 605A A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9496 605C C9 00			cmp #$00
  9497 605E D0 04			bne L1
  9498 6060 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9499 6062 C9 10			cmp #$10
  9500 6064 F0 10		L1	beq L5
  9501 6066 B0 04			bcs L3
  9502 6068 A9 FF			lda #$FF
  9503 606A D0 0A			bne L5
  9504 606C A9 01		L3	lda #$01
  9505 606E D0 06			bne L5
  9506 6070 50 04		L4	bvc L5
  9507 6072 49 FF			eor #$FF
  9508 6074 09 01			ora #$01
  9509 6076			L5
  9510 					.ENDL
  9511 6076 F0 02			seq
  9512 6078 10 01			bpl @+
  9513 607A 88				dey
  9514 				@
  9515 607B 94 96			sty :STACKORIGIN,x
  9516 607D AC 9D A0 84 84 AC + 	mwy Y2 :bp2
  9517 6087 A0 00			ldy #$00
  9518 6089 B1 84			lda (:bp2),y
  9519 608B 85 9F			sta :STACKORIGIN+9
  9520 608D C8				iny
  9521 608E B1 84			lda (:bp2),y
  9522 6090 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9523 6092 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
  9524 609C A0 00			ldy #$00
  9525 609E B1 84			lda (:bp2),y
  9526 60A0 85 A0			sta :STACKORIGIN+10
  9527 60A2 C8				iny
  9528 60A3 B1 84			lda (:bp2),y
  9529 60A5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9530 60A7 A0 00			ldy #$00
  9531 60A9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9532 60AB 10 01			spl
  9533 60AD 88				dey
  9534 60AE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9535 60B0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9536 60B2 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9537 60B4 A0 00			ldy #$00
  9538 60B6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9539 60B8 10 01			spl
  9540 60BA 88				dey
  9541 60BB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9542 60BD 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9543 60BF 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9544 60C1 A5 9F			lda :STACKORIGIN+9
  9545 60C3 38 E5 A0			sub :STACKORIGIN+10
  9546 60C6 85 8A			sta SYSTEM.ABS.@010185000.X
  9547 60C8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9548 60CA E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9549 60CC 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9550 60CE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9551 60D0 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9552 60D2 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9553 60D4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9554 60D6 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9555 60D8 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9556 60DA 20 27 2B			jsr SYSTEM.ABS.@010185000
  9557 60DD CA				dex
  9558 60DE A0 01			ldy #1
  9559 60E0				.LOCAL
  9560 60E0 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9561 60E2 38 E9 00			sub #$00
  9562 60E5 D0 1C			bne L4
  9563 60E7 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9564 60E9 C9 00			cmp #$00
  9565 60EB D0 0A			bne L1
  9566 60ED A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9567 60EF C9 00			cmp #$00
  9568 60F1 D0 04			bne L1
  9569 60F3 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9570 60F5 C9 08			cmp #$08
  9571 60F7 F0 10		L1	beq L5
  9572 60F9 B0 04			bcs L3
  9573 60FB A9 FF			lda #$FF
  9574 60FD D0 0A			bne L5
  9575 60FF A9 01		L3	lda #$01
  9576 6101 D0 06			bne L5
  9577 6103 50 04		L4	bvc L5
  9578 6105 49 FF			eor #$FF
  9579 6107 09 01			ora #$01
  9580 6109			L5
  9581 					.ENDL
  9582 6109 F0 02			seq
  9583 610B 10 01			bpl @+
  9584 610D 88				dey
  9585 				@
  9586 610E 98				tya
  9587 610F 15 97			ora :STACKORIGIN+1,x
  9588 6111 F0 05			jeq l_16CE
  9589
  9590 				; optimize OK (service.pas), line = 1823
  9591
  9592 6113 A9 01			lda #$01
  9593 6115 20 E8 3C			jsr FATAL_ERROR
  9594 6118			l_16CE
  9595
  9596 				; optimize OK (service.pas), line = 1826
  9597
  9598 6118 AD B5 A0			lda XP1+1
  9599 611B CD B9 A0			cmp XP2+1
  9600 611E D0 06			bne @+
  9601 6120 AD B4 A0			lda XP1
  9602 6123 CD B8 A0			cmp XP2
  9603 				@
  9604 6126 D0 13			jne l_16F1x
  9605 6128 AD B7 A0			lda YP1+1
  9606 612B CD BB A0			cmp YP2+1
  9607 612E D0 06			bne @+
  9608 6130 AD B6 A0			lda YP1
  9609 6133 CD BA A0			cmp YP2
  9610 				@
  9611 6136 D0 03 4C 79 64		jeq l_16F1
  9612 613B			l_16F1x
  9613
  9614 				; optimize OK (service.pas), line = 1828
  9615
  9616 613B AD B7 A0			lda YP1+1
  9617 613E CD BB A0			cmp YP2+1
  9618 6141 D0 06			bne @+
  9619 6143 AD B6 A0			lda YP1
  9620 6146 CD BA A0			cmp YP2
  9621 				@
  9622 6149 D0 03 4C 84 62		jeq l_1704
  9623
  9624 				; optimize OK (service.pas), line = 1830
  9625
  9626 614E AD C0 A0			lda COLLISION
  9627 6151 09 01			ora #$01
  9628 6153 8D C0 A0			sta COLLISION
  9629
  9630 				; --- WhileProlog
  9631 6156 4C 71 62			jmp l_1711
  9632 6159			l_1712
  9633
  9634 				; optimize OK (service.pas), line = 1834
  9635
  9636 6159 AD AC A0			lda XH
  9637 615C 85 9F			sta :STACKORIGIN+9
  9638 615E A0 00			ldy #$00
  9639 6160 AD AD A0			lda XH+1
  9640 6163 10 01			spl
  9641 6165 88				dey
  9642 6166 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9643 6168 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9644 616A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9645 616C AD B0 A0			lda XN
  9646 616F 85 A0			sta :STACKORIGIN+10
  9647 6171 A0 00			ldy #$00
  9648 6173 AD B1 A0			lda XN+1
  9649 6176 10 01			spl
  9650 6178 88				dey
  9651 6179 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9652 617B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9653 617D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9654 617F A5 9F			lda :STACKORIGIN+9
  9655 6181 18 65 A0			add :STACKORIGIN+10
  9656 6184 85 9F			sta :STACKORIGIN+9
  9657 6186 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9658 6188 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9659 618A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9660 618C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9661 618E 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9662 6190 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9663 6192 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9664 6194 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9665 6196 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9666 6198 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9667 619A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9668 619C 66 9F			ror :STACKORIGIN+9
  9669 619E A5 9F			lda :STACKORIGIN+9
  9670 61A0 8D A0 A0			sta X
  9671 61A3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9672 61A5 8D A1 A0			sta X+1
  9673
  9674 				; optimize OK (service.pas), line = 1835
  9675
  9676 61A8 AD AE A0			lda YH
  9677 61AB 85 9F			sta :STACKORIGIN+9
  9678 61AD A0 00			ldy #$00
  9679 61AF AD AF A0			lda YH+1
  9680 61B2 10 01			spl
  9681 61B4 88				dey
  9682 61B5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9683 61B7 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9684 61B9 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9685 61BB AD B2 A0			lda YN
  9686 61BE 85 A0			sta :STACKORIGIN+10
  9687 61C0 A0 00			ldy #$00
  9688 61C2 AD B3 A0			lda YN+1
  9689 61C5 10 01			spl
  9690 61C7 88				dey
  9691 61C8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9692 61CA 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9693 61CC 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9694 61CE A5 9F			lda :STACKORIGIN+9
  9695 61D0 18 65 A0			add :STACKORIGIN+10
  9696 61D3 85 9F			sta :STACKORIGIN+9
  9697 61D5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9698 61D7 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9699 61D9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9700 61DB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9701 61DD 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9702 61DF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9703 61E1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9704 61E3 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9705 61E5 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9706 61E7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9707 61E9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9708 61EB 66 9F			ror :STACKORIGIN+9
  9709 61ED A5 9F			lda :STACKORIGIN+9
  9710 61EF 8D A2 A0			sta Y
  9711 61F2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9712 61F4 8D A3 A0			sta Y+1
  9713
  9714 				; optimize OK (service.pas), line = 1837
  9715
  9716 61F7 AD A2 A0			lda Y
  9717 61FA 85 9F			sta :STACKORIGIN+9
  9718 61FC A0 00			ldy #$00
  9719 61FE AD A3 A0			lda Y+1
  9720 6201 10 01			spl
  9721 6203 88				dey
  9722 6204 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9723 6206 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9724 6208 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9725 620A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9726 620C 66 9F			ror :STACKORIGIN+9
  9727 620E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9728 6210 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9729 6212 66 9F			ror :STACKORIGIN+9
  9730 6214 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9731 6216 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9732 6218 66 9F			ror :STACKORIGIN+9
  9733 621A A5 9F			lda :STACKORIGIN+9
  9734 621C 8D BE A0			sta YP
  9735 621F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9736 6221 8D BF A0			sta YP+1
  9737
  9738 				; optimize OK (service.pas), line = 1839
  9739
  9740 6224 CD B7 A0			cmp YP1+1
  9741 6227 D0 06			bne @+
  9742 6229 AD BE A0			lda YP
  9743 622C CD B6 A0			cmp YP1
  9744 				@
  9745 622F D0 18			jne l_1749
  9746
  9747 				; optimize OK (service.pas), line = 1841
  9748
  9749 6231 AD A0 A0			lda X
  9750 6234 8D AC A0			sta XH
  9751 6237 AD A1 A0			lda X+1
  9752 623A 8D AD A0			sta XH+1
  9753
  9754 				; optimize OK (service.pas), line = 1842
  9755
  9756 623D AD A2 A0			lda Y
  9757 6240 8D AE A0			sta YH
  9758 6243 AD A3 A0			lda Y+1
  9759 6246 8D AF A0			sta YH+1
  9760 6249			l_1749
  9761
  9762 				; optimize OK (service.pas), line = 1845
  9763
  9764 6249 AD BF A0			lda YP+1
  9765 624C CD BB A0			cmp YP2+1
  9766 624F D0 06			bne @+
  9767 6251 AD BE A0			lda YP
  9768 6254 CD BA A0			cmp YP2
  9769 				@
  9770 6257 D0 18			jne l_1768
  9771
  9772 				; optimize OK (service.pas), line = 1847
  9773
  9774 6259 AD A0 A0			lda X
  9775 625C 8D B0 A0			sta XN
  9776 625F AD A1 A0			lda X+1
  9777 6262 8D B1 A0			sta XN+1
  9778
  9779 				; optimize OK (service.pas), line = 1848
  9780
  9781 6265 AD A2 A0			lda Y
  9782 6268 8D B2 A0			sta YN
  9783 626B AD A3 A0			lda Y+1
  9784 626E 8D B3 A0			sta YN+1
  9785 6271			l_1768
  9786 6271			l_1711
  9787
  9788 				; optimize OK (service.pas), line = 1832
  9789
  9790 6271 AD B2 A0			lda YN
  9791 6274 29 07			and #$07
  9792 6276 F0 0C			jeq l_1712w
  9793 6278 AD B2 A0			lda YN
  9794 627B 29 07			and #$07
  9795 627D C9 07			cmp #$07
  9796 627F F0 03 4C 59 61		jne l_1712
  9797 6284			l_1712w
  9798 6284			l_1704
  9799
  9800 				; optimize OK (service.pas), line = 1854
  9801
  9802 6284 AD B5 A0			lda XP1+1
  9803 6287 CD B9 A0			cmp XP2+1
  9804 628A D0 06			bne @+
  9805 628C AD B4 A0			lda XP1
  9806 628F CD B8 A0			cmp XP2
  9807 				@
  9808 6292 D0 03 4C D3 63		jeq l_17A7
  9809
  9810 				; optimize OK (service.pas), line = 1856
  9811
  9812 6297 AD C0 A0			lda COLLISION
  9813 629A 09 02			ora #$02
  9814 629C 8D C0 A0			sta COLLISION
  9815
  9816 				; --- WhileProlog
  9817 629F 4C C0 63			jmp l_17B4
  9818 62A2			l_17B5
  9819
  9820 				; optimize OK (service.pas), line = 1860
  9821
  9822 62A2 AD A4 A0			lda XK
  9823 62A5 85 9F			sta :STACKORIGIN+9
  9824 62A7 A0 00			ldy #$00
  9825 62A9 AD A5 A0			lda XK+1
  9826 62AC 10 01			spl
  9827 62AE 88				dey
  9828 62AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9829 62B1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9830 62B3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9831 62B5 AD A8 A0			lda XJ
  9832 62B8 85 A0			sta :STACKORIGIN+10
  9833 62BA A0 00			ldy #$00
  9834 62BC AD A9 A0			lda XJ+1
  9835 62BF 10 01			spl
  9836 62C1 88				dey
  9837 62C2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9838 62C4 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9839 62C6 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9840 62C8 A5 9F			lda :STACKORIGIN+9
  9841 62CA 18 65 A0			add :STACKORIGIN+10
  9842 62CD 85 9F			sta :STACKORIGIN+9
  9843 62CF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9844 62D1 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9845 62D3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9846 62D5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9847 62D7 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9848 62D9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9849 62DB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9850 62DD 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9851 62DF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9852 62E1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9853 62E3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9854 62E5 66 9F			ror :STACKORIGIN+9
  9855 62E7 A5 9F			lda :STACKORIGIN+9
  9856 62E9 8D A0 A0			sta X
  9857 62EC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9858 62EE 8D A1 A0			sta X+1
  9859
  9860 				; optimize OK (service.pas), line = 1861
  9861
  9862 62F1 AD A6 A0			lda YK
  9863 62F4 85 9F			sta :STACKORIGIN+9
  9864 62F6 A0 00			ldy #$00
  9865 62F8 AD A7 A0			lda YK+1
  9866 62FB 10 01			spl
  9867 62FD 88				dey
  9868 62FE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9869 6300 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9870 6302 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9871 6304 AD AA A0			lda YJ
  9872 6307 85 A0			sta :STACKORIGIN+10
  9873 6309 A0 00			ldy #$00
  9874 630B AD AB A0			lda YJ+1
  9875 630E 10 01			spl
  9876 6310 88				dey
  9877 6311 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9878 6313 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9879 6315 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9880 6317 A5 9F			lda :STACKORIGIN+9
  9881 6319 18 65 A0			add :STACKORIGIN+10
  9882 631C 85 9F			sta :STACKORIGIN+9
  9883 631E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9884 6320 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9885 6322 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9886 6324 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9887 6326 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9888 6328 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9889 632A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9890 632C 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9891 632E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9892 6330 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9893 6332 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9894 6334 66 9F			ror :STACKORIGIN+9
  9895 6336 A5 9F			lda :STACKORIGIN+9
  9896 6338 8D A2 A0			sta Y
  9897 633B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9898 633D 8D A3 A0			sta Y+1
  9899
  9900 				; optimize OK (service.pas), line = 1863
  9901
  9902 6340 AD A0 A0			lda X
  9903 6343 85 9F			sta :STACKORIGIN+9
  9904 6345 A0 00			ldy #$00
  9905 6347 AD A1 A0			lda X+1
  9906 634A 10 01			spl
  9907 634C 88				dey
  9908 634D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9909 634F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9910 6351 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9911 6353 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9912 6355 66 9F			ror :STACKORIGIN+9
  9913 6357 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9914 6359 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9915 635B 66 9F			ror :STACKORIGIN+9
  9916 635D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9917 635F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9918 6361 66 9F			ror :STACKORIGIN+9
  9919 6363 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9920 6365 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9921 6367 66 9F			ror :STACKORIGIN+9
  9922 6369 A5 9F			lda :STACKORIGIN+9
  9923 636B 8D BC A0			sta XP
  9924 636E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9925 6370 8D BD A0			sta XP+1
  9926
  9927 				; optimize OK (service.pas), line = 1865
  9928
  9929 6373 CD B5 A0			cmp XP1+1
  9930 6376 D0 06			bne @+
  9931 6378 AD BC A0			lda XP
  9932 637B CD B4 A0			cmp XP1
  9933 				@
  9934 637E D0 18			jne l_17EC
  9935
  9936 				; optimize OK (service.pas), line = 1867
  9937
  9938 6380 AD A0 A0			lda X
  9939 6383 8D A4 A0			sta XK
  9940 6386 AD A1 A0			lda X+1
  9941 6389 8D A5 A0			sta XK+1
  9942
  9943 				; optimize OK (service.pas), line = 1868
  9944
  9945 638C AD A2 A0			lda Y
  9946 638F 8D A6 A0			sta YK
  9947 6392 AD A3 A0			lda Y+1
  9948 6395 8D A7 A0			sta YK+1
  9949 6398			l_17EC
  9950
  9951 				; optimize OK (service.pas), line = 1871
  9952
  9953 6398 AD BD A0			lda XP+1
  9954 639B CD B9 A0			cmp XP2+1
  9955 639E D0 06			bne @+
  9956 63A0 AD BC A0			lda XP
  9957 63A3 CD B8 A0			cmp XP2
  9958 				@
  9959 63A6 D0 18			jne l_180B
  9960
  9961 				; optimize OK (service.pas), line = 1873
  9962
  9963 63A8 AD A0 A0			lda X
  9964 63AB 8D A8 A0			sta XJ
  9965 63AE AD A1 A0			lda X+1
  9966 63B1 8D A9 A0			sta XJ+1
  9967
  9968 				; optimize OK (service.pas), line = 1874
  9969
  9970 63B4 AD A2 A0			lda Y
  9971 63B7 8D AA A0			sta YJ
  9972 63BA AD A3 A0			lda Y+1
  9973 63BD 8D AB A0			sta YJ+1
  9974 63C0			l_180B
  9975 63C0			l_17B4
  9976
  9977 				; optimize OK (service.pas), line = 1858
  9978
  9979 63C0 AD A8 A0			lda XJ
  9980 63C3 29 0F			and #$0F
  9981 63C5 F0 0C			jeq l_17B5w
  9982 63C7 AD A8 A0			lda XJ
  9983 63CA 29 0F			and #$0F
  9984 63CC C9 0F			cmp #$0F
  9985 63CE F0 03 4C A2 62		jne l_17B5
  9986 63D3			l_17B5w
  9987 63D3			l_17A7
  9988
  9989 				; optimize OK (service.pas), line = 1885
  9990
  9991 63D3 AD C0 A0			lda COLLISION
  9992 63D6 C9 01			cmp #$01
  9993 63D8 D0 03			jne l_184A
  9994 				; optimize OK (service.pas), line = 1887
  9995 				; optimize OK (service.pas), line = 1888
  9996 63DA 4C 48 64			jmp l_185E
  9997 63DD			l_184A
  9998
  9999 				; optimize OK (service.pas), line = 1890
 10000
 10001 63DD AD C0 A0			lda COLLISION
 10002 63E0 C9 02			cmp #$02
 10003 63E2 D0 2F			jne l_1870
 10004
 10005 				; optimize OK (service.pas), line = 1892
 10006
 10007 63E4 AC 9B A0 84 84 AC + 	mwy X2 :bp2
 10008 63EE A0 00			ldy #$00
 10009 63F0 AD A8 A0			lda XJ
 10010 63F3 91 84			sta (:bp2),y
 10011 63F5 C8				iny
 10012 63F6 AD A9 A0			lda XJ+1
 10013 63F9 91 84			sta (:bp2),y
 10014
 10015 				; optimize OK (service.pas), line = 1893
 10016
 10017 63FB AC 9D A0 84 84 AC + 	mwy Y2 :bp2
 10018 6405 A0 00			ldy #$00
 10019 6407 AD AA A0			lda YJ
 10020 640A 91 84			sta (:bp2),y
 10021 640C C8				iny
 10022 640D AD AB A0			lda YJ+1
 10023 6410 4C 74 64			jmp l_1884
 10024 6413			l_1870
 10025
 10026 				; optimize OK (service.pas), line = 1895
 10027
 10028 6413 AD C0 A0			lda COLLISION
 10029 6416 C9 03			cmp #$03
 10030 6418 D0 5C			jne l_1896
 10031
 10032 				; optimize OK (service.pas), line = 1897
 10033
 10034 641A AC 97 A0 84 84 AC + 	mwy X1 :bp2
 10035 6424 A0 00			ldy #$00
 10036 6426 AD A8 A0			lda XJ
 10037 6429 91 84			sta (:bp2),y
 10038 642B C8				iny
 10039 642C AD A9 A0			lda XJ+1
 10040 642F 91 84			sta (:bp2),y
 10041
 10042 				; optimize OK (service.pas), line = 1898
 10043
 10044 6431 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
 10045 643B A0 00			ldy #$00
 10046 643D AD AA A0			lda YJ
 10047 6440 91 84			sta (:bp2),y
 10048 6442 C8				iny
 10049 6443 AD AB A0			lda YJ+1
 10050 6446 91 84			sta (:bp2),y
 10051 6448			l_185E
 10052
 10053 				; optimize OK (service.pas), line = 1899
 10054
 10055 6448 AC 9B A0 84 84 AC + 	mwy X2 :bp2
 10056 6452 A0 00			ldy #$00
 10057 6454 AD B0 A0			lda XN
 10058 6457 91 84			sta (:bp2),y
 10059 6459 C8				iny
 10060 645A AD B1 A0			lda XN+1
 10061 645D 91 84			sta (:bp2),y
 10062
 10063 				; optimize OK (service.pas), line = 1900
 10064
 10065 645F AC 9D A0 84 84 AC + 	mwy Y2 :bp2
 10066 6469 A0 00			ldy #$00
 10067 646B AD B2 A0			lda YN
 10068 646E 91 84			sta (:bp2),y
 10069 6470 C8				iny
 10070 6471 AD B3 A0			lda YN+1
 10071 6474			l_1884
 10072 6474 91 84			sta (:bp2),y
 10073 6476			l_1896
 10074 6476 4C 7E 64			jmp l_18B6
 10075 6479			l_16F1
 10076
 10077 				; optimize OK (service.pas), line = 1905
 10078
 10079 6479 A9 02			lda #$02
 10080 647B 20 E8 3C			jsr FATAL_ERROR
 10081 647E			l_18B6
 10082
 10083 				; optimize OK (service.pas), line = 1908
 10084
 10085 647E AC 97 A0 84 84 AC + 	mwy X1 :bp2
 10086 6488 A0 00			ldy #$00
 10087 648A B1 84			lda (:bp2),y
 10088 648C 38 E9 10			sub #$10
 10089 648F 91 84			sta (:bp2),y
 10090 6491 C8				iny
 10091 6492 B1 84			lda (:bp2),y
 10092 6494 E9 00			sbc #$00
 10093 6496 91 84			sta (:bp2),y
 10094
 10095 				; optimize OK (service.pas), line = 1909
 10096
 10097 6498 AC 99 A0 84 84 AC + 	mwy Y1 :bp2
 10098 64A2 A0 00			ldy #$00
 10099 64A4 B1 84			lda (:bp2),y
 10100 64A6 38 E9 18			sub #$18
 10101 64A9 91 84			sta (:bp2),y
 10102 64AB C8				iny
 10103 64AC B1 84			lda (:bp2),y
 10104 64AE E9 00			sbc #$00
 10105 64B0 91 84			sta (:bp2),y
 10106
 10107 				; optimize OK (service.pas), line = 1910
 10108
 10109 64B2 AC 9B A0 84 84 AC + 	mwy X2 :bp2
 10110 64BC A0 00			ldy #$00
 10111 64BE B1 84			lda (:bp2),y
 10112 64C0 38 E9 10			sub #$10
 10113 64C3 91 84			sta (:bp2),y
 10114 64C5 C8				iny
 10115 64C6 B1 84			lda (:bp2),y
 10116 64C8 E9 00			sbc #$00
 10117 64CA 91 84			sta (:bp2),y
 10118
 10119 				; optimize OK (service.pas), line = 1911
 10120
 10121 64CC AC 9D A0 84 84 AC + 	mwy Y2 :bp2
 10122 64D6 A0 00			ldy #$00
 10123 64D8 B1 84			lda (:bp2),y
 10124 64DA 38 E9 18			sub #$18
 10125 64DD 91 84			sta (:bp2),y
 10126 64DF C8				iny
 10127 64E0 B1 84			lda (:bp2),y
 10128 64E2 E9 00			sbc #$00
 10129 64E4 91 84			sta (:bp2),y
 10130
 10131 				; optimize OK (service.pas), line = 1914
 10132
 10133 64E6 AC 97 A0 84 84 AC + 	mwy X1 :bp2
 10134 64F0 A0 00			ldy #$00
 10135 64F2 B1 84			lda (:bp2),y
 10136 64F4 8D C6 9F			sta MAX.B
 10137 64F7 C8				iny
 10138 64F8 B1 84			lda (:bp2),y
 10139 64FA 8D C7 9F			sta MAX.B+1
 10140 64FD A9 00			lda #$00
 10141 64FF 8D C4 9F			sta MAX.A
 10142 6502 8D C5 9F			sta MAX.A+1
 10143 6505 20 92 3C			jsr MAX
 10144 6508 A9 CF			lda #$CF
 10145 650A 8D CA 9F			sta MIN.A
 10146 650D A9 00			lda #$00
 10147 650F 8D CB 9F			sta MIN.A+1
 10148 6512 AD C8 9F			lda MAX.RESULT
 10149 6515 8D CC 9F			sta MIN.B
 10150 6518 AD C9 9F			lda MAX.RESULT+1
 10151 651B 8D CD 9F			sta MIN.B+1
 10152 651E 20 BD 3C			jsr MIN
 10153 6521 AC 97 A0 84 84 AC + 	mwy X1 :bp2
 10154 652B A0 00			ldy #$00
 10155 652D AD CE 9F			lda MIN.RESULT
 10156 6530 91 84			sta (:bp2),y
 10157 6532 C8				iny
 10158 6533 AD CF 9F			lda MIN.RESULT+1
 10159 6536 91 84			sta (:bp2),y
 10160
 10161 				; optimize OK (service.pas), line = 1915
 10162
 10163 6538 AC 9B A0 84 84 AC + 	mwy X2 :bp2
 10164 6542 A0 00			ldy #$00
 10165 6544 B1 84			lda (:bp2),y
 10166 6546 8D C6 9F			sta MAX.B
 10167 6549 C8				iny
 10168 654A B1 84			lda (:bp2),y
 10169 654C 8D C7 9F			sta MAX.B+1
 10170 654F A9 00			lda #$00
 10171 6551 8D C4 9F			sta MAX.A
 10172 6554 8D C5 9F			sta MAX.A+1
 10173 6557 20 92 3C			jsr MAX
 10174 655A A9 CF			lda #$CF
 10175 655C 8D CA 9F			sta MIN.A
 10176 655F A9 00			lda #$00
 10177 6561 8D CB 9F			sta MIN.A+1
 10178 6564 AD C8 9F			lda MAX.RESULT
 10179 6567 8D CC 9F			sta MIN.B
 10180 656A AD C9 9F			lda MAX.RESULT+1
 10181 656D 8D CD 9F			sta MIN.B+1
 10182 6570 20 BD 3C			jsr MIN
 10183 6573 AC 9B A0 84 84 AC + 	mwy X2 :bp2
 10184 657D A0 00			ldy #$00
 10185 657F AD CE 9F			lda MIN.RESULT
 10186 6582 91 84			sta (:bp2),y
 10187 6584 C8				iny
 10188 6585 AD CF 9F			lda MIN.RESULT+1
 10189 6588 91 84			sta (:bp2),y
 10190
 10191 				; optimize OK (service.pas), line = 1922
 10192
 10193 658A AD C0 A0			lda COLLISION
 10194 658D 8D 9F A0			sta RESULT
 10195 6590			@exit
 10196
 10197 				; ------------------------------------------------------------
 10198
 10199 = A097			X1	= DATAORIGIN+$0302
 10200 = A099			Y1	= DATAORIGIN+$0304
 10201 = A09B			X2	= DATAORIGIN+$0306
 10202 = A09D			Y2	= DATAORIGIN+$0308
 10203 = A09F			RESULT	= DATAORIGIN+$030A
 10204 = A0A0			X	= DATAORIGIN+$030B
 10205 = A0A2			Y	= DATAORIGIN+$030D
 10206 = A0A4			XK	= DATAORIGIN+$030F
 10207 = A0A6			YK	= DATAORIGIN+$0311
 10208 = A0A8			XJ	= DATAORIGIN+$0313
 10209 = A0AA			YJ	= DATAORIGIN+$0315
 10210 = A0AC			XH	= DATAORIGIN+$0317
 10211 = A0AE			YH	= DATAORIGIN+$0319
 10212 = A0B0			XN	= DATAORIGIN+$031B
 10213 = A0B2			YN	= DATAORIGIN+$031D
 10214 = A0B4			XP1	= DATAORIGIN+$031F
 10215 = A0B6			YP1	= DATAORIGIN+$0321
 10216 = A0B8			XP2	= DATAORIGIN+$0323
 10217 = A0BA			YP2	= DATAORIGIN+$0325
 10218 = A0BC			XP	= DATAORIGIN+$0327
 10219 = A0BE			YP	= DATAORIGIN+$0329
 10220 = A0C0			COLLISION	= DATAORIGIN+$032B
 10221
 10222 = A097			@VarData	= X1
 10223 = 0029			@VarDataSize	= 41
 10224
 10225 6590 60				rts						; ret
 10226 				.endl
 10227
 10228 6591			.local	SHOOT_BLOCK					; PROCEDURE
 10229
 10230 				; optimize OK (service.pas), line = 1933
 10231
 10232 6591 AD C2 A0			lda XB+1
 10233 6594 10 03 4C A2 67		jmi l_190A
 10234 6599 AD C1 A0			lda XB
 10235 659C C9 0D			cmp #$0D
 10236 659E AD C2 A0			lda XB+1
 10237 65A1 E9 00			sbc #$00
 10238 65A3 50 02			svc
 10239 65A5 49 80			eor #$80
 10240 65A7 30 03 4C A2 67		jpl l_190A
 10241 65AC AD C4 A0			lda YB+1
 10242 65AF 10 03 4C A2 67		jmi l_190A
 10243 65B4 AD C3 A0			lda YB
 10244 65B7 C9 0F			cmp #$0F
 10245 65B9 AD C4 A0			lda YB+1
 10246 65BC E9 00			sbc #$00
 10247 65BE 50 02			svc
 10248 65C0 49 80			eor #$80
 10249 65C2 30 03 4C A2 67		jpl l_190A
 10250
 10251 				; optimize OK (service.pas), line = 1936
 10252
 10253 65C7 AD C3 A0			lda YB
 10254 65CA 0A				asl @
 10255 65CB 0A				asl @
 10256 65CC 0A				asl @
 10257 65CD 0A				asl @
 10258 65CE 18 6D C1 A0			add XB
 10259 65D2 8D C9 A0			sta I
 10260
 10261 				; optimize OK (service.pas), line = 1938
 10262
 10263 65D5 A8				tay
 10264 65D6 B9 00 DB			lda adr.WALL,y
 10265 65D9 D0 03 4C A2 67		jeq l_192E
 10266
 10267 				; optimize OK (service.pas), line = 1940
 10268
 10269 65DE C9 0A			cmp #$0A
 10270 65E0 90 03 4C 18 67		jcs l_1944
 10271
 10272 				; optimize OK (service.pas), line = 1942
 10273
 10274 65E5 AD C1 A0			lda XB
 10275 65E8 8D 73 A0			sta REMOVE_BLOCK.XA
 10276 65EB AD C3 A0			lda YB
 10277 65EE 8D 74 A0			sta REMOVE_BLOCK.YA
 10278 65F1 20 C1 54			jsr REMOVE_BLOCK
 10279
 10280 				; optimize FAIL (0, service.pas), line = 1943
 10281
 10282 65F4 CE 48 9F			dec REMAIN_BLK
 10283
 10284 				; optimize OK (service.pas), line = 1947
 10285
 10286 65F7 AD 65 9F			lda CUR_PLAYER
 10287 65FA 0A				asl @
 10288 65FB 0A				asl @
 10289 65FC 85 9F			sta :STACKORIGIN+9
 10290 65FE AC C9 A0			ldy I
 10291 6601 B9 00 DB			lda adr.WALL,y
 10292 6604 0A				asl @
 10293 6605 A8				tay
 10294 6606 B9 99 20			lda adr.SCORE_WALL,y
 10295 6609 85 A0			sta :STACKORIGIN+10
 10296 660B B9 9A 20			lda adr.SCORE_WALL+1,y
 10297 660E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10298 6610 A4 9F			ldy :STACKORIGIN+9
 10299 6612 B9 4A 9F			lda adr.SCORE.PLAYER,y
 10300 6615 18 65 A0			add :STACKORIGIN+10
 10301 6618 99 4A 9F			sta adr.SCORE.PLAYER,y
 10302 661B B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 10303 661E 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10304 6620 99 4B 9F			sta adr.SCORE.PLAYER+1,y
 10305 6623 B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 10306 6626 69 00			adc #$00
 10307 6628 99 4C 9F			sta adr.SCORE.PLAYER+2,y
 10308 662B B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 10309 662E 69 00			adc #$00
 10310 6630 99 4D 9F			sta adr.SCORE.PLAYER+3,y
 10311
 10312 				; optimize OK (service.pas), line = 1949
 10313
 10314 6633 A9 2C			lda #$2C
 10315 6635 8D CD 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 10316 6638 A9 01			lda #$01
 10317 663A 8D CE 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10318 663D 20 58 33			jsr SYSTEM.RANDOM.@010184000
 10319 6640 AD 75 9F			lda LETT.INCOMING
 10320 6643 18 6D CF 9D			add SYSTEM.RANDOM.@010184000.RESULT
 10321 6647 8D 75 9F			sta LETT.INCOMING
 10322 664A AD 76 9F			lda LETT.INCOMING+1
 10323 664D 6D D0 9D			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10324 6650 8D 76 9F			sta LETT.INCOMING+1
 10325
 10326 				; optimize OK (service.pas), line = 1951
 10327
 10328 6653 AD C1 A0			lda XB
 10329 6656 85 9F			sta :STACKORIGIN+9
 10330 6658 A0 00			ldy #$00
 10331 665A AD C2 A0			lda XB+1
 10332 665D 10 01			spl
 10333 665F 88				dey
 10334 6660 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10335 6662 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10336 6664 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10337 6666 06 9F			asl :STACKORIGIN+9
 10338 6668 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10339 666A 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10340 666C 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10341 666E 06 9F			asl :STACKORIGIN+9
 10342 6670 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10343 6672 06 9F			asl :STACKORIGIN+9
 10344 6674 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10345 6676 06 9F			asl :STACKORIGIN+9
 10346 6678 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10347 667A A5 9F			lda :STACKORIGIN+9
 10348 667C 18 69 09			add #$09
 10349 667F 8D 77 9F			sta LETT.NEXTX
 10350 6682 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10351 6684 69 00			adc #$00
 10352 6686 8D 78 9F			sta LETT.NEXTX+1
 10353
 10354 				; optimize OK (service.pas), line = 1952
 10355
 10356 6689 AD C3 A0			lda YB
 10357 668C 85 9F			sta :STACKORIGIN+9
 10358 668E A0 00			ldy #$00
 10359 6690 AD C4 A0			lda YB+1
 10360 6693 10 01			spl
 10361 6695 88				dey
 10362 6696 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10363 6698 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10364 669A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10365 669C A5 9F			lda :STACKORIGIN+9
 10366 669E 18 69 01			add #$01
 10367 66A1 85 9F			sta :STACKORIGIN+9
 10368 66A3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10369 66A5 69 00			adc #$00
 10370 66A7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10371 66A9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10372 66AB 69 00			adc #$00
 10373 66AD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10374 66AF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10375 66B1 69 00			adc #$00
 10376 66B3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10377 66B5 06 9F			asl :STACKORIGIN+9
 10378 66B7 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10379 66B9 06 9F			asl :STACKORIGIN+9
 10380 66BB 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10381 66BD 06 9F			asl :STACKORIGIN+9
 10382 66BF 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10383 66C1 A5 9F			lda :STACKORIGIN+9
 10384 66C3 18 69 16			add #$16
 10385 66C6 8D 79 9F			sta LETT.NEXTY
 10386 66C9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10387 66CB 69 00			adc #$00
 10388 66CD 8D 7A 9F			sta LETT.NEXTY+1
 10389
 10390 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1953
 10391
 10392 66D0 20 8C 3F			jsr RANDOM_LETTER_DROP
 10393 66D3 AD E4 9F			lda RANDOM_LETTER_DROP.RESULT
 10394 66D6 8D 7B 9F			sta LETT.NEXTTYPE
 10395 66D9 AD E5 9F			lda RANDOM_LETTER_DROP.RESULT+1
 10396 66DC 8D 7C 9F			sta LETT.NEXTTYPE+1
 10397
 10398 				; optimize OK (service.pas), line = 1955
 10399
 10400 66DF AC C9 A0			ldy I
 10401 66E2 A9 00			lda #$00
 10402 66E4 99 00 DB			sta adr.WALL,y
 10403
 10404 				; optimize OK (service.pas), line = 1956
 10405
 10406 66E7 A9 B8			lda #$B8
 10407 66E9 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10408 66EC A9 01			lda #$01
 10409 66EE 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10410 66F1 A9 03			lda #$03
 10411 66F3 8D 71 9E			sta BALL_BLOCK_SOUND.B
 10412 66F6 A9 00			lda #$00
 10413 66F8 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 10414 66FB 20 7D 38			jsr BALL_BLOCK_SOUND
 10415
 10416 				; optimize OK (service.pas), line = 1957
 10417
 10418 66FE AC C5 A0 84 84 AC + 	mwy BALL :bp2
 10419 6708 A0 14			ldy #BALL.SBD-DATAORIGIN
 10420 670A A9 00			lda #$00
 10421 670C 91 84			sta (:bp2),y
 10422 670E C8				iny
 10423 670F 91 84			sta (:bp2),y
 10424
 10425 				; optimize OK (service.pas), line = 1958
 10426
 10427 6711 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10428 6713 91 84			sta (:bp2),y
 10429 6715 4C A2 67			jmp l_1998
 10430 6718			l_1944
 10431
 10432 				; optimize OK (service.pas), line = 1963
 10433
 10434 6718 AC C9 A0			ldy I
 10435 671B B9 00 DB			lda adr.WALL,y
 10436 671E 29 0F			and #$0F
 10437 6720 C9 09			cmp #$09
 10438 6722 D0 45			jne l_19B1
 10439
 10440 				; optimize OK (service.pas), line = 1965
 10441
 10442 6724 AC C5 A0 84 84 AC + 	mwy BALL :bp2
 10443 672E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10444 6730 A9 00			lda #$00
 10445 6732 91 84			sta (:bp2),y
 10446
 10447 				; optimize OK (service.pas), line = 1966
 10448
 10449 6734 AC C9 A0			ldy I
 10450 6737 B9 00 DB			lda adr.WALL,y
 10451 673A 38 E9 10			sub #$10
 10452 673D 99 00 DB			sta adr.WALL,y
 10453
 10454 				; optimize OK (service.pas), line = 1968
 10455
 10456 6740 A9 72			lda #$72
 10457 6742 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10458 6745 A9 01			lda #$01
 10459 6747 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10460 674A A9 04			lda #$04
 10461 674C 8D 71 9E			sta BALL_BLOCK_SOUND.B
 10462 674F A9 00			lda #$00
 10463 6751 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 10464 6754 20 7D 38			jsr BALL_BLOCK_SOUND
 10465
 10466 				; optimize OK (service.pas), line = 1969
 10467
 10468 6757 AD C1 A0			lda XB
 10469 675A 8D E2 9F			sta SHINE.XB
 10470 675D AD C3 A0			lda YB
 10471 6760 8D E3 9F			sta SHINE.YB
 10472 6763 20 50 3F			jsr SHINE
 10473 6766 4C A2 67			jmp l_19CB
 10474 6769			l_19B1
 10475
 10476 				; optimize OK (service.pas), line = 1973
 10477
 10478 6769 AC C5 A0 84 84 AC + 	mwy BALL :bp2
 10479 6773 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10480 6775 B1 84			lda (:bp2),y
 10481 6777 18 69 01			add #$01
 10482 677A 91 84			sta (:bp2),y
 10483
 10484 				; optimize OK (service.pas), line = 1974
 10485
 10486 677C AD C1 A0			lda XB
 10487 677F 8D E2 9F			sta SHINE.XB
 10488 6782 AD C3 A0			lda YB
 10489 6785 8D E3 9F			sta SHINE.YB
 10490 6788 20 50 3F			jsr SHINE
 10491
 10492 				; optimize OK (service.pas), line = 1976
 10493
 10494 678B A9 C8			lda #$C8
 10495 678D 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10496 6790 A9 00			lda #$00
 10497 6792 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10498 6795 A9 07			lda #$07
 10499 6797 8D 71 9E			sta BALL_BLOCK_SOUND.B
 10500 679A A9 00			lda #$00
 10501 679C 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 10502 679F 20 7D 38			jsr BALL_BLOCK_SOUND
 10503 67A2			l_19CB
 10504 67A2			l_1998
 10505 67A2			l_192E
 10506 67A2			l_190A
 10507
 10508 				; ------------------------------------------------------------
 10509
 10510 = A0C1			XB	= DATAORIGIN+$032C
 10511 = A0C3			YB	= DATAORIGIN+$032E
 10512 = A0C5			BALL	= DATAORIGIN+$0330
 10513 = 9D95			BALL.X	= DATAORIGIN+$0000
 10514 = 9D97			BALL.Y	= DATAORIGIN+$0002
 10515 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
 10516 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
 10517 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
 10518 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
 10519 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
 10520 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
 10521 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
 10522 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
 10523 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
 10524 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
 10525 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
 10526 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
 10527 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
 10528 = 9DB0			BALL.STM	= DATAORIGIN+$001B
 10529 = A0C9			I	= DATAORIGIN+$0334
 10530
 10531 = A0C1			@VarData	= XB
 10532 = 0007			@VarDataSize	= 7
 10533
 10534 67A2			@exit
 10535 					.ifdef @new
 10536 					lda <@VarData
 10537 					sta :ztmp
 10538 					lda >@VarData
 10539 					ldy #@VarDataSize-1
 10540 					jmp @FreeMem
 10541 					els
 10542 67A2 60				rts						; ret
 10543 					eif
 10544 				.endl
 10545
 10546 67A3			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10547
 10548 				; optimize OK (service.pas), line = 1987
 10549
 10550 67A3 AD CB A0			lda XB+1
 10551 67A6 10 03 4C BD 68		jmi l_1A0E
 10552 67AB AD CA A0			lda XB
 10553 67AE C9 0D			cmp #$0D
 10554 67B0 AD CB A0			lda XB+1
 10555 67B3 E9 00			sbc #$00
 10556 67B5 50 02			svc
 10557 67B7 49 80			eor #$80
 10558 67B9 30 03 4C BD 68		jpl l_1A0E
 10559 67BE AD CD A0			lda YB+1
 10560 67C1 10 03 4C BD 68		jmi l_1A0E
 10561 67C6 AD CC A0			lda YB
 10562 67C9 C9 0F			cmp #$0F
 10563 67CB AD CD A0			lda YB+1
 10564 67CE E9 00			sbc #$00
 10565 67D0 50 02			svc
 10566 67D2 49 80			eor #$80
 10567 67D4 30 03 4C BD 68		jpl l_1A0E
 10568
 10569 				; optimize OK (service.pas), line = 1990
 10570
 10571 67D9 AD CC A0			lda YB
 10572 67DC 0A				asl @
 10573 67DD 0A				asl @
 10574 67DE 0A				asl @
 10575 67DF 0A				asl @
 10576 67E0 18 6D CA A0			add XB
 10577 67E4 8D CE A0			sta I
 10578
 10579 				; optimize OK (service.pas), line = 1992
 10580
 10581 67E7 A8				tay
 10582 67E8 B9 00 DB			lda adr.WALL,y
 10583 67EB D0 03 4C BD 68		jeq l_1A32
 10584
 10585 				; optimize OK (service.pas), line = 1994
 10586
 10587 67F0 C9 0A			cmp #$0A
 10588 67F2 B0 65			jcs l_1A48
 10589
 10590 				; optimize OK (service.pas), line = 1996
 10591
 10592 67F4 AD CA A0			lda XB
 10593 67F7 8D 73 A0			sta REMOVE_BLOCK.XA
 10594 67FA AD CC A0			lda YB
 10595 67FD 8D 74 A0			sta REMOVE_BLOCK.YA
 10596 6800 20 C1 54			jsr REMOVE_BLOCK
 10597
 10598 				; optimize FAIL (0, service.pas), line = 1997
 10599
 10600 6803 CE 48 9F			dec REMAIN_BLK
 10601
 10602 				; optimize OK (service.pas), line = 1998
 10603
 10604 6806 AD 65 9F			lda CUR_PLAYER
 10605 6809 0A				asl @
 10606 680A 0A				asl @
 10607 680B 85 9F			sta :STACKORIGIN+9
 10608 680D AC CE A0			ldy I
 10609 6810 B9 00 DB			lda adr.WALL,y
 10610 6813 0A				asl @
 10611 6814 A8				tay
 10612 6815 B9 99 20			lda adr.SCORE_WALL,y
 10613 6818 85 A0			sta :STACKORIGIN+10
 10614 681A B9 9A 20			lda adr.SCORE_WALL+1,y
 10615 681D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10616 681F A4 9F			ldy :STACKORIGIN+9
 10617 6821 B9 4A 9F			lda adr.SCORE.PLAYER,y
 10618 6824 18 65 A0			add :STACKORIGIN+10
 10619 6827 99 4A 9F			sta adr.SCORE.PLAYER,y
 10620 682A B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 10621 682D 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10622 682F 99 4B 9F			sta adr.SCORE.PLAYER+1,y
 10623 6832 B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 10624 6835 69 00			adc #$00
 10625 6837 99 4C 9F			sta adr.SCORE.PLAYER+2,y
 10626 683A B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 10627 683D 69 00			adc #$00
 10628 683F 99 4D 9F			sta adr.SCORE.PLAYER+3,y
 10629
 10630 				; optimize OK (service.pas), line = 1999
 10631
 10632 6842 AC CE A0			ldy I
 10633 6845 A9 00			lda #$00
 10634 6847 99 00 DB			sta adr.WALL,y
 10635
 10636 				; optimize OK (service.pas), line = 2000
 10637
 10638 684A A9 B8			lda #$B8
 10639 684C 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10640 684F A9 01			lda #$01
 10641 6851 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10642 6854 A9 03			lda #$03
 10643 6856 4C B2 68			jmp l_1A70
 10644 6859			l_1A48
 10645
 10646 				; optimize OK (service.pas), line = 2005
 10647
 10648 6859 AC CE A0			ldy I
 10649 685C B9 00 DB			lda adr.WALL,y
 10650 685F 29 0F			and #$0F
 10651 6861 C9 09			cmp #$09
 10652 6863 D0 32			jne l_1A89
 10653
 10654 				; optimize OK (service.pas), line = 2007
 10655
 10656 6865 B9 00 DB			lda adr.WALL,y
 10657 6868 38 E9 10			sub #$10
 10658 686B 99 00 DB			sta adr.WALL,y
 10659
 10660 				; optimize OK (service.pas), line = 2008
 10661
 10662 686E A9 72			lda #$72
 10663 6870 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10664 6873 A9 01			lda #$01
 10665 6875 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10666 6878 A9 04			lda #$04
 10667 687A 8D 71 9E			sta BALL_BLOCK_SOUND.B
 10668 687D A9 00			lda #$00
 10669 687F 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 10670 6882 20 7D 38			jsr BALL_BLOCK_SOUND
 10671
 10672 				; optimize OK (service.pas), line = 2009
 10673
 10674 6885 AD CA A0			lda XB
 10675 6888 8D E2 9F			sta SHINE.XB
 10676 688B AD CC A0			lda YB
 10677 688E 8D E3 9F			sta SHINE.YB
 10678 6891 20 50 3F			jsr SHINE
 10679 6894 4C BD 68			jmp l_1A9F
 10680 6897			l_1A89
 10681
 10682 				; optimize OK (service.pas), line = 2013
 10683
 10684 6897 AD CA A0			lda XB
 10685 689A 8D E2 9F			sta SHINE.XB
 10686 689D AD CC A0			lda YB
 10687 68A0 8D E3 9F			sta SHINE.YB
 10688 68A3 20 50 3F			jsr SHINE
 10689
 10690 				; optimize OK (service.pas), line = 2014
 10691
 10692 68A6 A9 C8			lda #$C8
 10693 68A8 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 10694 68AB A9 00			lda #$00
 10695 68AD 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 10696 68B0 A9 07			lda #$07
 10697 68B2			l_1A70
 10698 68B2 8D 71 9E			sta BALL_BLOCK_SOUND.B
 10699 68B5 A9 00			lda #$00
 10700 68B7 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 10701 68BA 20 7D 38			jsr BALL_BLOCK_SOUND
 10702 68BD			l_1A9F
 10703 68BD			l_1A32
 10704 68BD			l_1A0E
 10705
 10706 				; ------------------------------------------------------------
 10707
 10708 = A0CA			XB	= DATAORIGIN+$0335
 10709 = A0CC			YB	= DATAORIGIN+$0337
 10710 = A0CE			I	= DATAORIGIN+$0339
 10711
 10712 = A0CA			@VarData	= XB
 10713 = 0005			@VarDataSize	= 5
 10714
 10715 68BD			@exit
 10716 					.ifdef @new
 10717 					lda <@VarData
 10718 					sta :ztmp
 10719 					lda >@VarData
 10720 					ldy #@VarDataSize-1
 10721 					jmp @FreeMem
 10722 					els
 10723 68BD 60				rts						; ret
 10724 					eif
 10725 				.endl
 10726
 10727 68BE			.local	BALL_HIT_BLOCK					; PROCEDURE
 10728
 10729 				; optimize OK (service.pas), line = 2048
 10730
 10731 68BE A9 FF			lda #$FF
 10732 68C0 8D F1 A0			sta EMERGENCY
 10733
 10734 				; optimize OK (service.pas), line = 2050
 10735
 10736 68C3 AC CF A0 84 84 AC + 	mwy BALL :bp2
 10737 68CD A0 00			ldy #BALL.X-DATAORIGIN
 10738 68CF B1 84			lda (:bp2),y
 10739 68D1 38 E9 09			sub #$09
 10740 68D4 8D DD A0			sta NX
 10741 68D7 C8				iny
 10742 68D8 B1 84			lda (:bp2),y
 10743 68DA E9 00			sbc #$00
 10744 68DC 8D DE A0			sta NX+1
 10745
 10746 				; optimize OK (service.pas), line = 2051
 10747
 10748 68DF A0 02			ldy #BALL.Y-DATAORIGIN
 10749 68E1 B1 84			lda (:bp2),y
 10750 68E3 38 E9 16			sub #$16
 10751 68E6 8D DF A0			sta NY
 10752 68E9 C8				iny
 10753 68EA B1 84			lda (:bp2),y
 10754 68EC E9 00			sbc #$00
 10755 68EE 8D E0 A0			sta NY+1
 10756
 10757 				; optimize OK (service.pas), line = 2054
 10758
 10759 68F1 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10760 68F3 B1 84			lda (:bp2),y
 10761 68F5 38 E9 09			sub #$09
 10762 68F8 8D D9 A0			sta OX
 10763 68FB C8				iny
 10764 68FC B1 84			lda (:bp2),y
 10765 68FE E9 00			sbc #$00
 10766 6900 8D DA A0			sta OX+1
 10767
 10768 				; optimize OK (service.pas), line = 2055
 10769
 10770 6903 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10771 6905 B1 84			lda (:bp2),y
 10772 6907 38 E9 16			sub #$16
 10773 690A 8D DB A0			sta OY
 10774 690D C8				iny
 10775 690E B1 84			lda (:bp2),y
 10776 6910 E9 00			sbc #$00
 10777 6912 8D DC A0			sta OY+1
 10778
 10779 				; optimize OK (service.pas), line = 2057
 10780
 10781 6915 AD DE A0			lda NX+1
 10782 6918 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10783 691A AD DD A0			lda NX
 10784 691D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10785 691F 6A				ror @
 10786 6920 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10787 6922 6A				ror @
 10788 6923 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10789 6925 6A				ror @
 10790 6926 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10791 6928 6A				ror @
 10792 6929 8D D7 A0			sta XB
 10793
 10794 				; optimize OK (service.pas), line = 2058
 10795
 10796 692C AD E0 A0			lda NY+1
 10797 692F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10798 6931 AD DF A0			lda NY
 10799 6934 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10800 6936 6A				ror @
 10801 6937 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10802 6939 6A				ror @
 10803 693A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 10804 693C 6A				ror @
 10805 693D 8D D8 A0			sta YB
 10806
 10807 				; optimize OK (service.pas), line = 2062
 10808
 10809 6940 A9 10			lda #$10
 10810 6942 85 8E			sta :ecx
 10811 6944 85 92			sta :ztmp8
 10812 6946 AD D8 A0			lda YB
 10813 6949 85 86			sta :eax
 10814 694B 85 94			sta :ztmp10
 10815 					.ifdef fmulinit
 10816 					fmulu_8
 10817 					els
 10818 694D 20 EF 22			imulCL
 10819 					eif
 10820 6950 24 94			bit :ztmp10
 10821 6952 10 03			bpl @+
 10822 6954 38 E5 92			sub :ztmp8
 10823 				@
 10824 6957 24 92			bit :ztmp8
 10825 6959 10 03			bpl @+
 10826 695B 38 E5 94			sub :ztmp10
 10827 				@
 10828 695E 85 87			sta :eax+1
 10829 6960 A5 86			lda :eax
 10830 6962 18 6D D7 A0			add XB
 10831 6966 A8				tay
 10832 6967 B9 00 DB			lda adr.WALL,y
 10833 696A D0 03 4C 55 74		jeq l_1B08
 10834
 10835 				; optimize OK (service.pas), line = 2064
 10836
 10837 696F A9 D9			lda <OX
 10838 6971 8D 97 A0			sta SPLIT_LINE.X1
 10839 6974 A9 A0			lda >OX
 10840 6976 8D 98 A0			sta SPLIT_LINE.X1+1
 10841 6979 A9 DB			lda <OY
 10842 697B 8D 99 A0			sta SPLIT_LINE.Y1
 10843 697E A9 A0			lda >OY
 10844 6980 8D 9A A0			sta SPLIT_LINE.Y1+1
 10845 6983 A9 DD			lda <NX
 10846 6985 8D 9B A0			sta SPLIT_LINE.X2
 10847 6988 A9 A0			lda >NX
 10848 698A 8D 9C A0			sta SPLIT_LINE.X2+1
 10849 698D A9 DF			lda <NY
 10850 698F 8D 9D A0			sta SPLIT_LINE.Y2
 10851 6992 A9 A0			lda >NY
 10852 6994 8D 9E A0			sta SPLIT_LINE.Y2+1
 10853 6997 20 C9 5D			jsr SPLIT_LINE
 10854 699A AD 9F A0			lda SPLIT_LINE.RESULT
 10855 699D 8D F5 A0			sta COLLISION
 10856
 10857 				; optimize OK (service.pas), line = 2070
 10858
 10859 69A0 C9 03			cmp #$03
 10860 69A2 F0 03 4C 96 6C		jne l_1B23
 10861
 10862 				; optimize OK (service.pas), line = 2072
 10863
 10864 69A7 AC CF A0 84 84 AC + 	mwy BALL :bp2
 10865 69B1 A0 08			ldy #BALL.OLDX-DATAORIGIN
 10866 69B3 B1 84			lda (:bp2),y
 10867 69B5 C8				iny
 10868 69B6 38 ED D9 A0			sub OX
 10869 69BA 38 E9 09			sub #$09
 10870 69BD 8D D5 A0			sta LX
 10871
 10872 				; optimize OK (service.pas), line = 2073
 10873
 10874 69C0 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10875 69C2 B1 84			lda (:bp2),y
 10876 69C4 C8				iny
 10877 69C5 38 ED DB A0			sub OY
 10878 69C9 38 E9 16			sub #$16
 10879 69CC 8D D6 A0			sta LY
 10880
 10881 				; optimize OK (service.pas), line = 2075
 10882
 10883 69CF A0 08			ldy #BALL.OLDX-DATAORIGIN
 10884 69D1 B1 84			lda (:bp2),y
 10885 69D3 38 ED DD A0			sub NX
 10886 69D7 85 9F			sta :STACKORIGIN+9
 10887 69D9 C8				iny
 10888 69DA B1 84			lda (:bp2),y
 10889 69DC ED DE A0			sbc NX+1
 10890 69DF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10891 69E1 A5 9F			lda :STACKORIGIN+9
 10892 69E3 38 E9 09			sub #$09
 10893 69E6 8D E1 A0			sta MX
 10894 69E9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10895 69EB E9 00			sbc #$00
 10896 69ED 8D E2 A0			sta MX+1
 10897
 10898 				; optimize OK (service.pas), line = 2076
 10899
 10900 69F0 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 10901 69F2 B1 84			lda (:bp2),y
 10902 69F4 38 ED DF A0			sub NY
 10903 69F8 85 9F			sta :STACKORIGIN+9
 10904 69FA C8				iny
 10905 69FB B1 84			lda (:bp2),y
 10906 69FD ED E0 A0			sbc NY+1
 10907 6A00 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10908 6A02 A5 9F			lda :STACKORIGIN+9
 10909 6A04 38 E9 16			sub #$16
 10910 6A07 8D E3 A0			sta MY
 10911 6A0A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10912 6A0C E9 00			sbc #$00
 10913 6A0E 8D E4 A0			sta MY+1
 10914
 10915 				; optimize OK (service.pas), line = 2078
 10916
 10917 6A11 AD D5 A0			lda LX
 10918 6A14 20 01 2B			jsr SYSTEM.ABS.@010183000
 10919 6A17 A5 92			lda SYSTEM.ABS.@010183000.RESULT
 10920 6A19 8D EF A0			sta A
 10921 6A1C AD D6 A0			lda LY
 10922 6A1F 20 01 2B			jsr SYSTEM.ABS.@010183000
 10923 6A22 A5 92			lda SYSTEM.ABS.@010183000.RESULT
 10924 6A24 8D F0 A0			sta B
 10925
 10926 				; optimize OK (service.pas), line = 2080
 10927
 10928 6A27 AD EF A0			lda A
 10929 6A2A 85 8E			sta :ecx
 10930 6A2C 85 86			sta :eax
 10931 					.ifdef fmulinit
 10932 					fmulu_8
 10933 					els
 10934 6A2E 20 EF 22			imulCL
 10935 					eif
 10936 6A31 A5 86			lda :eax
 10937 6A33 85 9F			sta :STACKORIGIN+9
 10938 6A35 A5 87			lda :eax+1
 10939 6A37 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10940 6A39 AD F0 A0			lda B
 10941 6A3C 85 8E			sta :ecx
 10942 6A3E 85 86			sta :eax
 10943 					.ifdef fmulinit
 10944 					fmulu_8
 10945 					els
 10946 6A40 20 EF 22			imulCL
 10947 					eif
 10948 6A43 A5 86			lda :eax
 10949 6A45 18 65 9F			add :STACKORIGIN+9
 10950 6A48 8D EB A0			sta F1
 10951 6A4B A5 87			lda :eax+1
 10952 6A4D 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 10953 6A4F 8D EC A0			sta F1+1
 10954
 10955 				; optimize OK (service.pas), line = 2082
 10956
 10957 6A52 AD E1 A0			lda MX
 10958 6A55 85 8A			sta SYSTEM.ABS.@010184000.X
 10959 6A57 AD E2 A0			lda MX+1
 10960 6A5A 85 8B			sta SYSTEM.ABS.@010184000.X+1
 10961 6A5C 20 0F 2B			jsr SYSTEM.ABS.@010184000
 10962 6A5F A5 92			lda SYSTEM.ABS.@010184000.RESULT
 10963 6A61 8D EF A0			sta A
 10964 6A64 AD E3 A0			lda MY
 10965 6A67 85 8A			sta SYSTEM.ABS.@010184000.X
 10966 6A69 AD E4 A0			lda MY+1
 10967 6A6C 85 8B			sta SYSTEM.ABS.@010184000.X+1
 10968 6A6E 20 0F 2B			jsr SYSTEM.ABS.@010184000
 10969 6A71 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 10970 6A73 8D F0 A0			sta B
 10971
 10972 				; optimize OK (service.pas), line = 2084
 10973
 10974 6A76 AD EF A0			lda A
 10975 6A79 85 8E			sta :ecx
 10976 6A7B 85 86			sta :eax
 10977 					.ifdef fmulinit
 10978 					fmulu_8
 10979 					els
 10980 6A7D 20 EF 22			imulCL
 10981 					eif
 10982 6A80 A5 86			lda :eax
 10983 6A82 85 9F			sta :STACKORIGIN+9
 10984 6A84 A5 87			lda :eax+1
 10985 6A86 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10986 6A88 AD F0 A0			lda B
 10987 6A8B 85 8E			sta :ecx
 10988 6A8D 85 86			sta :eax
 10989 					.ifdef fmulinit
 10990 					fmulu_8
 10991 					els
 10992 6A8F 20 EF 22			imulCL
 10993 					eif
 10994 6A92 A5 86			lda :eax
 10995 6A94 18 65 9F			add :STACKORIGIN+9
 10996 6A97 8D ED A0			sta F2
 10997 6A9A A5 87			lda :eax+1
 10998 6A9C 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 10999 6A9E 8D EE A0			sta F2+1
 11000
 11001 				; optimize OK (service.pas), line = 2086
 11002
 11003 6AA1 AD EC A0			lda F1+1
 11004 6AA4 CD EE A0			cmp F2+1
 11005 6AA7 D0 06			bne @+
 11006 6AA9 AD EB A0			lda F1
 11007 6AAC CD ED A0			cmp F2
 11008 				@
 11009 6AAF 90 03 4C A8 6B		jcs l_1BB8
 11010
 11011 				; optimize OK (service.pas), line = 2092
 11012
 11013 6AB4 AD DA A0			lda OX+1
 11014 6AB7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11015 6AB9 AD D9 A0			lda OX
 11016 6ABC 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11017 6ABE 6A				ror @
 11018 6ABF 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11019 6AC1 6A				ror @
 11020 6AC2 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11021 6AC4 6A				ror @
 11022 6AC5 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11023 6AC7 6A				ror @
 11024 6AC8 8D C4 9F			sta MAX.A
 11025 6ACB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11026 6ACD 8D C5 9F			sta MAX.A+1
 11027 6AD0 A9 00			lda #$00
 11028 6AD2 8D C6 9F			sta MAX.B
 11029 6AD5 8D C7 9F			sta MAX.B+1
 11030 6AD8 20 92 3C			jsr MAX
 11031 6ADB A9 0C			lda #$0C
 11032 6ADD 8D CA 9F			sta MIN.A
 11033 6AE0 A9 00			lda #$00
 11034 6AE2 8D CB 9F			sta MIN.A+1
 11035 6AE5 AD C8 9F			lda MAX.RESULT
 11036 6AE8 8D CC 9F			sta MIN.B
 11037 6AEB AD C9 9F			lda MAX.RESULT+1
 11038 6AEE 8D CD 9F			sta MIN.B+1
 11039 6AF1 20 BD 3C			jsr MIN
 11040 6AF4 AD CE 9F			lda MIN.RESULT
 11041 6AF7 8D D7 A0			sta XB
 11042
 11043 				; optimize OK (service.pas), line = 2093
 11044
 11045 6AFA AD DB A0			lda OY
 11046 6AFD 18 69 18			add #$18
 11047 6B00 4A				lsr @
 11048 6B01 4A				lsr @
 11049 6B02 4A				lsr @
 11050 6B03 38 E9 03			sub #$03
 11051 6B06 8D D8 A0			sta YB
 11052
 11053 				; optimize OK (service.pas), line = 2096
 11054
 11055 6B09 A9 10			lda #$10
 11056 6B0B 85 8E			sta :ecx
 11057 6B0D 85 92			sta :ztmp8
 11058 6B0F AD D8 A0			lda YB
 11059 6B12 85 86			sta :eax
 11060 6B14 85 94			sta :ztmp10
 11061 					.ifdef fmulinit
 11062 					fmulu_8
 11063 					els
 11064 6B16 20 EF 22			imulCL
 11065 					eif
 11066 6B19 24 94			bit :ztmp10
 11067 6B1B 10 03			bpl @+
 11068 6B1D 38 E5 92			sub :ztmp8
 11069 				@
 11070 6B20 24 92			bit :ztmp8
 11071 6B22 10 03			bpl @+
 11072 6B24 38 E5 94			sub :ztmp10
 11073 				@
 11074 6B27 85 87			sta :eax+1
 11075 6B29 A5 86			lda :eax
 11076 6B2B 18 6D D7 A0			add XB
 11077 6B2F A8				tay
 11078 6B30 B9 00 DB			lda adr.WALL,y
 11079 6B33 D0 58			jne l_1BF6
 11080
 11081 				; optimize OK (service.pas), line = 2098
 11082
 11083 6B35 AD DE A0			lda NX+1
 11084 6B38 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11085 6B3A AD DD A0			lda NX
 11086 6B3D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11087 6B3F 6A				ror @
 11088 6B40 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11089 6B42 6A				ror @
 11090 6B43 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11091 6B45 6A				ror @
 11092 6B46 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11093 6B48 6A				ror @
 11094 6B49 8D C6 9F			sta MAX.B
 11095 6B4C A9 00			lda #$00
 11096 6B4E 8D C4 9F			sta MAX.A
 11097 6B51 8D C5 9F			sta MAX.A+1
 11098 6B54 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11099 6B56 8D C7 9F			sta MAX.B+1
 11100 6B59 20 92 3C			jsr MAX
 11101 6B5C A9 0C			lda #$0C
 11102 6B5E 8D CA 9F			sta MIN.A
 11103 6B61 A9 00			lda #$00
 11104 6B63 8D CB 9F			sta MIN.A+1
 11105 6B66 AD C8 9F			lda MAX.RESULT
 11106 6B69 8D CC 9F			sta MIN.B
 11107 6B6C AD C9 9F			lda MAX.RESULT+1
 11108 6B6F 8D CD 9F			sta MIN.B+1
 11109 6B72 20 BD 3C			jsr MIN
 11110 6B75 AD CE 9F			lda MIN.RESULT
 11111 6B78 8D D7 A0			sta XB
 11112
 11113 				; optimize OK (service.pas), line = 2099
 11114
 11115 6B7B AD DF A0			lda NY
 11116 6B7E 18 69 18			add #$18
 11117 6B81 4A				lsr @
 11118 6B82 4A				lsr @
 11119 6B83 4A				lsr @
 11120 6B84 38 E9 03			sub #$03
 11121 6B87 8D D8 A0			sta YB
 11122 6B8A 4C A5 6B			jmp l_1C1E
 11123 6B8D			l_1BF6
 11124
 11125 				; optimize OK (service.pas), line = 2103
 11126
 11127 6B8D AD D9 A0			lda OX
 11128 6B90 8D DD A0			sta NX
 11129 6B93 AD DA A0			lda OX+1
 11130 6B96 8D DE A0			sta NX+1
 11131
 11132 				; optimize OK (service.pas), line = 2104
 11133
 11134 6B99 AD DB A0			lda OY
 11135 6B9C 8D DF A0			sta NY
 11136 6B9F AD DC A0			lda OY+1
 11137 6BA2 8D E0 A0			sta NY+1
 11138 6BA5			l_1C1E
 11139 6BA5 4C 96 6C			jmp l_1C31
 11140 6BA8			l_1BB8
 11141
 11142 				; optimize OK (service.pas), line = 2114
 11143
 11144 6BA8 AD DE A0			lda NX+1
 11145 6BAB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11146 6BAD AD DD A0			lda NX
 11147 6BB0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11148 6BB2 6A				ror @
 11149 6BB3 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11150 6BB5 6A				ror @
 11151 6BB6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11152 6BB8 6A				ror @
 11153 6BB9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11154 6BBB 6A				ror @
 11155 6BBC 8D C6 9F			sta MAX.B
 11156 6BBF A9 00			lda #$00
 11157 6BC1 8D C4 9F			sta MAX.A
 11158 6BC4 8D C5 9F			sta MAX.A+1
 11159 6BC7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11160 6BC9 8D C7 9F			sta MAX.B+1
 11161 6BCC 20 92 3C			jsr MAX
 11162 6BCF A9 0C			lda #$0C
 11163 6BD1 8D CA 9F			sta MIN.A
 11164 6BD4 A9 00			lda #$00
 11165 6BD6 8D CB 9F			sta MIN.A+1
 11166 6BD9 AD C8 9F			lda MAX.RESULT
 11167 6BDC 8D CC 9F			sta MIN.B
 11168 6BDF AD C9 9F			lda MAX.RESULT+1
 11169 6BE2 8D CD 9F			sta MIN.B+1
 11170 6BE5 20 BD 3C			jsr MIN
 11171 6BE8 AD CE 9F			lda MIN.RESULT
 11172 6BEB 8D D7 A0			sta XB
 11173
 11174 				; optimize OK (service.pas), line = 2115
 11175
 11176 6BEE AD DF A0			lda NY
 11177 6BF1 18 69 18			add #$18
 11178 6BF4 4A				lsr @
 11179 6BF5 4A				lsr @
 11180 6BF6 4A				lsr @
 11181 6BF7 38 E9 03			sub #$03
 11182 6BFA 8D D8 A0			sta YB
 11183
 11184 				; optimize OK (service.pas), line = 2117
 11185
 11186 6BFD A9 10			lda #$10
 11187 6BFF 85 8E			sta :ecx
 11188 6C01 85 92			sta :ztmp8
 11189 6C03 AD D8 A0			lda YB
 11190 6C06 85 86			sta :eax
 11191 6C08 85 94			sta :ztmp10
 11192 					.ifdef fmulinit
 11193 					fmulu_8
 11194 					els
 11195 6C0A 20 EF 22			imulCL
 11196 					eif
 11197 6C0D 24 94			bit :ztmp10
 11198 6C0F 10 03			bpl @+
 11199 6C11 38 E5 92			sub :ztmp8
 11200 				@
 11201 6C14 24 92			bit :ztmp8
 11202 6C16 10 03			bpl @+
 11203 6C18 38 E5 94			sub :ztmp10
 11204 				@
 11205 6C1B 85 87			sta :eax+1
 11206 6C1D A5 86			lda :eax
 11207 6C1F 18 6D D7 A0			add XB
 11208 6C23 A8				tay
 11209 6C24 B9 00 DB			lda adr.WALL,y
 11210 6C27 D0 6D			jne l_1C6E
 11211
 11212 				; optimize OK (service.pas), line = 2119
 11213
 11214 6C29 AD D9 A0			lda OX
 11215 6C2C 8D DD A0			sta NX
 11216 6C2F AD DA A0			lda OX+1
 11217 6C32 8D DE A0			sta NX+1
 11218
 11219 				; optimize OK (service.pas), line = 2120
 11220
 11221 6C35 AD DB A0			lda OY
 11222 6C38 8D DF A0			sta NY
 11223 6C3B AD DC A0			lda OY+1
 11224 6C3E 8D E0 A0			sta NY+1
 11225
 11226 				; optimize OK (service.pas), line = 2122
 11227
 11228 6C41 AD DE A0			lda NX+1
 11229 6C44 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11230 6C46 AD DD A0			lda NX
 11231 6C49 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11232 6C4B 6A				ror @
 11233 6C4C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11234 6C4E 6A				ror @
 11235 6C4F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11236 6C51 6A				ror @
 11237 6C52 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11238 6C54 6A				ror @
 11239 6C55 8D C6 9F			sta MAX.B
 11240 6C58 A9 00			lda #$00
 11241 6C5A 8D C4 9F			sta MAX.A
 11242 6C5D 8D C5 9F			sta MAX.A+1
 11243 6C60 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11244 6C62 8D C7 9F			sta MAX.B+1
 11245 6C65 20 92 3C			jsr MAX
 11246 6C68 A9 0C			lda #$0C
 11247 6C6A 8D CA 9F			sta MIN.A
 11248 6C6D A9 00			lda #$00
 11249 6C6F 8D CB 9F			sta MIN.A+1
 11250 6C72 AD C8 9F			lda MAX.RESULT
 11251 6C75 8D CC 9F			sta MIN.B
 11252 6C78 AD C9 9F			lda MAX.RESULT+1
 11253 6C7B 8D CD 9F			sta MIN.B+1
 11254 6C7E 20 BD 3C			jsr MIN
 11255 6C81 AD CE 9F			lda MIN.RESULT
 11256 6C84 8D D7 A0			sta XB
 11257
 11258 				; optimize OK (service.pas), line = 2123
 11259
 11260 6C87 AD DF A0			lda NY
 11261 6C8A 18 69 18			add #$18
 11262 6C8D 4A				lsr @
 11263 6C8E 4A				lsr @
 11264 6C8F 4A				lsr @
 11265 6C90 38 E9 03			sub #$03
 11266 6C93 8D D8 A0			sta YB
 11267 6C96			l_1C6E
 11268 6C96			l_1C31
 11269 6C96			l_1B23
 11270
 11271 				; optimize OK (service.pas), line = 2129
 11272
 11273 6C96 AC CF A0 84 84 AC + 	mwy BALL :bp2
 11274 6CA0 A0 00			ldy #BALL.X-DATAORIGIN
 11275 6CA2 AD DD A0			lda NX
 11276 6CA5 18 69 09			add #$09
 11277 6CA8 91 84			sta (:bp2),y
 11278 6CAA C8				iny
 11279 6CAB AD DE A0			lda NX+1
 11280 6CAE 69 00			adc #$00
 11281 6CB0 91 84			sta (:bp2),y
 11282
 11283 				; optimize OK (service.pas), line = 2130
 11284
 11285 6CB2 A0 02			ldy #BALL.Y-DATAORIGIN
 11286 6CB4 AD DF A0			lda NY
 11287 6CB7 18 69 16			add #$16
 11288 6CBA 91 84			sta (:bp2),y
 11289 6CBC C8				iny
 11290 6CBD AD E0 A0			lda NY+1
 11291 6CC0 69 00			adc #$00
 11292 6CC2 91 84			sta (:bp2),y
 11293
 11294 				; optimize OK (service.pas), line = 2134
 11295
 11296 6CC4 A0 00			ldy #$00
 11297 6CC6 AD D8 A0			lda YB
 11298 6CC9 10 01			spl
 11299 6CCB 88				dey
 11300 6CCC 8C C4 A0			sty SHOOT_BLOCK.YB+1
 11301 6CCF 8D C3 A0			sta SHOOT_BLOCK.YB
 11302 6CD2 A0 00			ldy #$00
 11303 6CD4 AD D7 A0			lda XB
 11304 6CD7 10 01			spl
 11305 6CD9 88				dey
 11306 6CDA 8C C2 A0			sty SHOOT_BLOCK.XB+1
 11307 6CDD 8D C1 A0			sta SHOOT_BLOCK.XB
 11308 6CE0 AD CF A0			lda BALL
 11309 6CE3 8D C5 A0			sta SHOOT_BLOCK.BALL
 11310 6CE6 AD D0 A0			lda BALL+1
 11311 6CE9 8D C6 A0			sta SHOOT_BLOCK.BALL+1
 11312 6CEC 20 91 65			jsr SHOOT_BLOCK
 11313
 11314 				; optimize OK (service.pas), line = 2136
 11315
 11316 6CEF AD DD A0			lda NX
 11317 6CF2 29 0F			and #$0F
 11318 6CF4 85 9F			sta :STACKORIGIN+9
 11319 6CF6 A9 00			lda #$00
 11320 6CF8 4A				lsr @
 11321 6CF9 66 9F			ror :STACKORIGIN+9
 11322 6CFB A5 9F			lda :STACKORIGIN+9
 11323 6CFD 8D D3 A0			sta X
 11324
 11325 				; optimize OK (service.pas), line = 2137
 11326
 11327 6D00 AD DF A0			lda NY
 11328 6D03 29 07			and #$07
 11329 6D05 8D D4 A0			sta Y
 11330
 11331 				; optimize OK (service.pas), line = 2149
 11332
 11333 6D08 AD D3 A0			lda X
 11334 6D0B F0 12			jeq l_1D02
 11335 6D0D C9 07			cmp #$07
 11336 6D0F F0 0E			jeq l_1D02
 11337 6D11 AD D4 A0			lda Y
 11338 6D14 F0 09			jeq l_1D02
 11339 6D16 C9 07			cmp #$07
 11340 6D18 F0 05			jeq l_1D02
 11341
 11342 				; optimize OK (service.pas), line = 2150
 11343
 11344 6D1A A9 03			lda #$03
 11345 6D1C 20 E8 3C			jsr FATAL_ERROR
 11346 6D1F			l_1D02
 11347
 11348 				; optimize OK (service.pas), line = 2165
 11349
 11350 6D1F AD D4 A0			lda Y
 11351 6D22 38 ED D3 A0			sub X
 11352 6D26 50 02			svc
 11353 6D28 49 80			eor #$80
 11354 6D2A 10 3E			jpl l_1D2D
 11355 6D2C A9 07			lda #$07
 11356 6D2E 38 ED D4 A0			sub Y
 11357 6D32 85 A1			sta :STACKORIGIN+11
 11358 6D34 AD D3 A0			lda X
 11359 6D37 38 E5 A1			sub :STACKORIGIN+11
 11360 6D3A 50 02			svc
 11361 6D3C 49 80			eor #$80
 11362 6D3E 10 2A			jpl l_1D2D
 11363
 11364 				; optimize OK (service.pas), line = 2167
 11365
 11366 6D40 AC CF A0 84 84 AC + 	mwy BALL :bp2
 11367 6D4A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11368 6D4C A9 00			lda #$00
 11369 6D4E 38 F1 84			sub (:bp2),y
 11370 6D51 85 9F			sta :STACKORIGIN+9
 11371 6D53 C8				iny
 11372 6D54 A9 00			lda #$00
 11373 6D56 F1 84			sbc (:bp2),y
 11374 6D58 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11375 6D5A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11376 6D5C A5 9F			lda :STACKORIGIN+9
 11377 6D5E 91 84			sta (:bp2),y
 11378 6D60 C8				iny
 11379 6D61 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11380 6D63 91 84			sta (:bp2),y
 11381
 11382 				; optimize OK (service.pas), line = 2168
 11383
 11384 6D65 A9 01			lda #$01
 11385 6D67 8D F1 A0			sta EMERGENCY
 11386 6D6A			l_1D2D
 11387
 11388 				; optimize OK (service.pas), line = 2172
 11389
 11390 6D6A A9 07			lda #$07
 11391 6D6C 38 ED D4 A0			sub Y
 11392 6D70 38 ED D3 A0			sub X
 11393 6D74 50 02			svc
 11394 6D76 49 80			eor #$80
 11395 6D78 10 37			jpl l_1D62
 11396 6D7A AD D3 A0			lda X
 11397 6D7D 38 ED D4 A0			sub Y
 11398 6D81 50 02			svc
 11399 6D83 49 80			eor #$80
 11400 6D85 10 2A			jpl l_1D62
 11401
 11402 				; optimize OK (service.pas), line = 2174
 11403
 11404 6D87 AC CF A0 84 84 AC + 	mwy BALL :bp2
 11405 6D91 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11406 6D93 A9 00			lda #$00
 11407 6D95 38 F1 84			sub (:bp2),y
 11408 6D98 85 9F			sta :STACKORIGIN+9
 11409 6D9A C8				iny
 11410 6D9B A9 00			lda #$00
 11411 6D9D F1 84			sbc (:bp2),y
 11412 6D9F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11413 6DA1 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11414 6DA3 A5 9F			lda :STACKORIGIN+9
 11415 6DA5 91 84			sta (:bp2),y
 11416 6DA7 C8				iny
 11417 6DA8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11418 6DAA 91 84			sta (:bp2),y
 11419
 11420 				; optimize OK (service.pas), line = 2175
 11421
 11422 6DAC A9 03			lda #$03
 11423 6DAE 8D F1 A0			sta EMERGENCY
 11424 6DB1			l_1D62
 11425
 11426 				; optimize OK (service.pas), line = 2179
 11427
 11428 6DB1 AD D3 A0			lda X
 11429 6DB4 38 ED D4 A0			sub Y
 11430 6DB8 50 02			svc
 11431 6DBA 49 80			eor #$80
 11432 6DBC 10 3E			jpl l_1D97
 11433 6DBE A9 07			lda #$07
 11434 6DC0 38 ED D3 A0			sub X
 11435 6DC4 85 A1			sta :STACKORIGIN+11
 11436 6DC6 AD D4 A0			lda Y
 11437 6DC9 38 E5 A1			sub :STACKORIGIN+11
 11438 6DCC 50 02			svc
 11439 6DCE 49 80			eor #$80
 11440 6DD0 10 2A			jpl l_1D97
 11441
 11442 				; optimize OK (service.pas), line = 2181
 11443
 11444 6DD2 AC CF A0 84 84 AC + 	mwy BALL :bp2
 11445 6DDC A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11446 6DDE A9 00			lda #$00
 11447 6DE0 38 F1 84			sub (:bp2),y
 11448 6DE3 85 9F			sta :STACKORIGIN+9
 11449 6DE5 C8				iny
 11450 6DE6 A9 00			lda #$00
 11451 6DE8 F1 84			sbc (:bp2),y
 11452 6DEA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11453 6DEC A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11454 6DEE A5 9F			lda :STACKORIGIN+9
 11455 6DF0 91 84			sta (:bp2),y
 11456 6DF2 C8				iny
 11457 6DF3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11458 6DF5 91 84			sta (:bp2),y
 11459
 11460 				; optimize OK (service.pas), line = 2182
 11461
 11462 6DF7 A9 02			lda #$02
 11463 6DF9 8D F1 A0			sta EMERGENCY
 11464 6DFC			l_1D97
 11465
 11466 				; optimize OK (service.pas), line = 2186
 11467
 11468 6DFC A9 07			lda #$07
 11469 6DFE 38 ED D3 A0			sub X
 11470 6E02 38 ED D4 A0			sub Y
 11471 6E06 50 02			svc
 11472 6E08 49 80			eor #$80
 11473 6E0A 10 37			jpl l_1DCC
 11474 6E0C AD D4 A0			lda Y
 11475 6E0F 38 ED D3 A0			sub X
 11476 6E13 50 02			svc
 11477 6E15 49 80			eor #$80
 11478 6E17 10 2A			jpl l_1DCC
 11479
 11480 				; optimize OK (service.pas), line = 2188
 11481
 11482 6E19 AC CF A0 84 84 AC + 	mwy BALL :bp2
 11483 6E23 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11484 6E25 A9 00			lda #$00
 11485 6E27 38 F1 84			sub (:bp2),y
 11486 6E2A 85 9F			sta :STACKORIGIN+9
 11487 6E2C C8				iny
 11488 6E2D A9 00			lda #$00
 11489 6E2F F1 84			sbc (:bp2),y
 11490 6E31 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11491 6E33 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11492 6E35 A5 9F			lda :STACKORIGIN+9
 11493 6E37 91 84			sta (:bp2),y
 11494 6E39 C8				iny
 11495 6E3A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11496 6E3C 91 84			sta (:bp2),y
 11497
 11498 				; optimize OK (service.pas), line = 2189
 11499
 11500 6E3E A9 04			lda #$04
 11501 6E40 8D F1 A0			sta EMERGENCY
 11502 6E43			l_1DCC
 11503
 11504 				; optimize OK (service.pas), line = 2193
 11505
 11506 6E43 AD D3 A0			lda X
 11507 6E46 CD D4 A0			cmp Y
 11508 6E49 F0 0E			jeq l_1E01x
 11509 6E4B A9 07			lda #$07
 11510 6E4D 38 ED D4 A0			sub Y
 11511 6E51 CD D3 A0			cmp X
 11512 6E54 F0 03 4C 55 74		jne l_1E01
 11513 6E59			l_1E01x
 11514
 11515 				; optimize OK (service.pas), line = 2195
 11516
 11517 6E59 A9 00			lda #$00
 11518 6E5B 8D F3 A0			sta DEFLECT
 11519
 11520 				; optimize OK (service.pas), line = 2196
 11521
 11522 6E5E 8D F6 A0			sta TOUCH
 11523
 11524 				; optimize OK (service.pas), line = 2204
 11525
 11526 6E61 AD D3 A0			lda X
 11527 6E64 38 E9 05			sub #$05
 11528 6E67 50 02			svc
 11529 6E69 49 80			eor #$80
 11530 6E6B 30 08			jmi l_1E1C
 11531 6E6D AD F6 A0			lda TOUCH
 11532 6E70 09 01			ora #$01
 11533 6E72 8D F6 A0			sta TOUCH
 11534 6E75			l_1E1C
 11535
 11536 				; optimize OK (service.pas), line = 2205
 11537
 11538 6E75 AD D4 A0			lda Y
 11539 6E78 38 E9 05			sub #$05
 11540 6E7B 50 02			svc
 11541 6E7D 49 80			eor #$80
 11542 6E7F 30 08			jmi l_1E3B
 11543 6E81 AD F6 A0			lda TOUCH
 11544 6E84 09 02			ora #$02
 11545 6E86 8D F6 A0			sta TOUCH
 11546 6E89			l_1E3B
 11547
 11548 				; optimize OK (service.pas), line = 2214
 11549
 11550 6E89 A9 FF			lda #$FF
 11551 6E8B 8D D5 A0			sta LX
 11552
 11553 6E8E			l_1E51
 11554 				; --- ForToDoCondition
 11555 6E8E AD D5 A0			lda LX
 11556 6E91 38 E9 02			sub #$02
 11557 6E94 50 02			svc
 11558 6E96 49 80			eor #$80
 11559 6E98 0A				asl @
 11560 6E99 B0 03 4C C4 6F		jcc l_1E5F
 11561
 11562 				; optimize OK (service.pas), line = 2215
 11563
 11564 6E9E A9 FF			lda #$FF
 11565 6EA0 8D D6 A0			sta LY
 11566
 11567 6EA3			l_1E68
 11568 				; --- ForToDoCondition
 11569 6EA3 AD D6 A0			lda LY
 11570 6EA6 38 E9 02			sub #$02
 11571 6EA9 50 02			svc
 11572 6EAB 49 80			eor #$80
 11573 6EAD 0A				asl @
 11574 6EAE B0 03 4C B7 6F		jcc l_1E76
 11575
 11576 				; optimize FAIL (1, service.pas), line = 2217
 11577
 11578 6EB3 E8				inx
 11579 6EB4 A9 00 95 96			mva #$00 :STACKORIGIN,x
 11580 6EB8 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11581 6EBA E8				inx
 11582 6EBB A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11583 6EBF A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11584 6EC3 E8				inx
 11585 6EC4 AD D7 A0 95 96		mva XB :STACKORIGIN,x
 11586 6EC9 E8				inx
 11587 6ECA AD D5 A0 95 96		mva LX :STACKORIGIN,x
 11588 6ECF 20 71 21			jsr @expandSHORT2SMALL1
 11589 6ED2 20 66 21			jsr @expandSHORT2SMALL
 11590 6ED5 20 E5 20			jsr addAX_CX
 11591 6ED8 CA				dex
 11592 6ED9 B5 96			lda :STACKORIGIN,x
 11593 6EDB 8D CA 9F			sta MIN.A
 11594 6EDE B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11595 6EE0 8D CB 9F			sta MIN.A+1
 11596 6EE3 CA				dex
 11597 6EE4 B5 96			lda :STACKORIGIN,x
 11598 6EE6 8D CC 9F			sta MIN.B
 11599 6EE9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11600 6EEB 8D CD 9F			sta MIN.B+1
 11601 6EEE CA				dex
 11602 6EEF 20 BD 3C			jsr MIN
 11603 6EF2 AD CE 9F			lda MIN.RESULT
 11604 6EF5 8D C4 9F			sta MAX.A
 11605 6EF8 AD CF 9F			lda MIN.RESULT+1
 11606 6EFB 8D C5 9F			sta MAX.A+1
 11607 6EFE B5 96			lda :STACKORIGIN,x
 11608 6F00 8D C6 9F			sta MAX.B
 11609 6F03 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11610 6F05 8D C7 9F			sta MAX.B+1
 11611 6F08 CA				dex
 11612 6F09 20 92 3C			jsr MAX
 11613 6F0C AD C8 9F			lda MAX.RESULT
 11614 6F0F 8D E1 A0			sta MX
 11615 6F12 AD C9 9F			lda MAX.RESULT+1
 11616 6F15 8D E2 A0			sta MX+1
 11617
 11618 				; optimize OK (service.pas), line = 2218
 11619
 11620 6F18 A0 00			ldy #$00
 11621 6F1A AD D8 A0			lda YB
 11622 6F1D 10 01			spl
 11623 6F1F 88				dey
 11624 6F20 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11625 6F22 85 9F			sta :STACKORIGIN+9
 11626 6F24 A0 00			ldy #$00
 11627 6F26 AD D6 A0			lda LY
 11628 6F29 10 01			spl
 11629 6F2B 88				dey
 11630 6F2C 18 65 9F			add :STACKORIGIN+9
 11631 6F2F 8D E3 A0			sta MY
 11632 6F32 98				tya
 11633 6F33 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11634 6F35 8D E4 A0			sta MY+1
 11635
 11636 				; optimize OK (service.pas), line = 2222
 11637
 11638 6F38 AD D7 A0			lda XB
 11639 6F3B 18 6D D5 A0			add LX
 11640 6F3F 30 21			jmi l_1ED3x
 11641 6F41 AD D7 A0			lda XB
 11642 6F44 18 6D D5 A0			add LX
 11643 6F48 38 E9 0D			sub #$0D
 11644 6F4B 50 02			svc
 11645 6F4D 49 80			eor #$80
 11646 6F4F 10 11			jpl l_1ED3x
 11647 6F51 AD E3 A0			lda MY
 11648 6F54 0A				asl @
 11649 6F55 0A				asl @
 11650 6F56 0A				asl @
 11651 6F57 0A				asl @
 11652 6F58 18 6D E1 A0			add MX
 11653 6F5C A8				tay
 11654 6F5D B9 00 DB			lda adr.WALL,y
 11655 6F60 F0 24			jeq l_1ED3
 11656 6F62			l_1ED3x
 11657
 11658 				; optimize OK (service.pas), line = 2225
 11659
 11660 6F62 A0 00			ldy #$00
 11661 6F64 AD D5 A0			lda LX
 11662 6F67 10 01			spl
 11663 6F69 88				dey
 11664 6F6A 18 69 01			add #$01
 11665 6F6D 85 86			sta :eax
 11666 6F6F 90 01			scc
 11667 6F71 C8				iny
 11668 6F72 84 87			sty :eax+1
 11669 6F74 A9 03			lda #$03
 11670 6F76 85 8E			sta :ecx
 11671 6F78 A9 00			lda #$00
 11672 6F7A 85 8F			sta :ecx+1
 11673 					.ifdef fmulinit
 11674 					fmulu_16
 11675 					els
 11676 6F7C 20 3B 23			imulCX
 11677 					eif
 11678 6F7F A4 86			ldy :eax
 11679 6F81 A9 01			lda #$01
 11680 6F83 4C A7 6F			jmp l_1EF6
 11681 6F86			l_1ED3
 11682
 11683 				; optimize OK (service.pas), line = 2227
 11684
 11685 6F86 A0 00			ldy #$00
 11686 6F88 AD D5 A0			lda LX
 11687 6F8B 10 01			spl
 11688 6F8D 88				dey
 11689 6F8E 18 69 01			add #$01
 11690 6F91 85 86			sta :eax
 11691 6F93 90 01			scc
 11692 6F95 C8				iny
 11693 6F96 84 87			sty :eax+1
 11694 6F98 A9 03			lda #$03
 11695 6F9A 85 8E			sta :ecx
 11696 6F9C A9 00			lda #$00
 11697 6F9E 85 8F			sta :ecx+1
 11698 					.ifdef fmulinit
 11699 					fmulu_16
 11700 					els
 11701 6FA0 20 3B 23			imulCX
 11702 					eif
 11703 6FA3 A4 86			ldy :eax
 11704 6FA5 A9 00			lda #$00
 11705 6FA7			l_1EF6
 11706 6FA7 99 F8 A0			sta adr.ADJW+$01,y
 11707
 11708 				; --- ForToDoEpilog
 11709 6FAA EE D6 A0			inc LY
 11710 6FAD AD D6 A0			lda LY
 11711 6FB0 C9 80			cmp #$80
 11712 6FB2 F0 03 4C A3 6E		jne l_1E68
 11713 6FB7			l_1E76
 11714
 11715 				; --- ForToDoEpilog
 11716 6FB7 EE D5 A0			inc LX
 11717 6FBA AD D5 A0			lda LX
 11718 6FBD C9 80			cmp #$80
 11719 6FBF F0 03 4C 8E 6E		jne l_1E51
 11720 6FC4			l_1E5F
 11721
 11722 				; optimize OK (service.pas), line = 2246
 11723
 11724 6FC4 AD F7 A0			lda adr.ADJW
 11725 6FC7 85 9F			sta :STACKORIGIN+9
 11726 6FC9 AD FA A0			lda adr.ADJW+$03
 11727 6FCC 0A				asl @
 11728 6FCD 05 9F			ora :STACKORIGIN+9
 11729 6FCF 85 9F			sta :STACKORIGIN+9
 11730 6FD1 AD FD A0			lda adr.ADJW+$06
 11731 6FD4 0A				asl @
 11732 6FD5 0A				asl @
 11733 6FD6 05 9F			ora :STACKORIGIN+9
 11734 6FD8 85 9F			sta :STACKORIGIN+9
 11735 6FDA AD FE A0			lda adr.ADJW+$07
 11736 6FDD 0A				asl @
 11737 6FDE 0A				asl @
 11738 6FDF 0A				asl @
 11739 6FE0 05 9F			ora :STACKORIGIN+9
 11740 6FE2 85 9F			sta :STACKORIGIN+9
 11741 6FE4 AD FF A0			lda adr.ADJW+$08
 11742 6FE7 0A				asl @
 11743 6FE8 0A				asl @
 11744 6FE9 0A				asl @
 11745 6FEA 0A				asl @
 11746 6FEB 05 9F			ora :STACKORIGIN+9
 11747 6FED 85 9F			sta :STACKORIGIN+9
 11748 6FEF AD FC A0			lda adr.ADJW+$05
 11749 6FF2 0A				asl @
 11750 6FF3 0A				asl @
 11751 6FF4 0A				asl @
 11752 6FF5 0A				asl @
 11753 6FF6 0A				asl @
 11754 6FF7 05 9F			ora :STACKORIGIN+9
 11755 6FF9 85 9F			sta :STACKORIGIN+9
 11756 6FFB AD F9 A0			lda adr.ADJW+$02
 11757 6FFE 0A				asl @
 11758 6FFF 0A				asl @
 11759 7000 0A				asl @
 11760 7001 0A				asl @
 11761 7002 0A				asl @
 11762 7003 0A				asl @
 11763 7004 05 9F			ora :STACKORIGIN+9
 11764 7006 85 9F			sta :STACKORIGIN+9
 11765 7008 AD F8 A0			lda adr.ADJW+$01
 11766 700B 0A				asl @
 11767 700C 0A				asl @
 11768 700D 0A				asl @
 11769 700E 0A				asl @
 11770 700F 0A				asl @
 11771 7010 0A				asl @
 11772 7011 0A				asl @
 11773 7012 05 9F			ora :STACKORIGIN+9
 11774 7014 8D F4 A0			sta AROUND
 11775
 11776 				; optimize OK (service.pas), line = 2277
 11777
 11778 7017 AD F6 A0			lda TOUCH
 11779 701A F0 03 4C BB 70		jne l_1F9F
 11780
 11781 				; optimize OK (service.pas), line = 2279
 11782
 11783 701F AD F4 A0			lda AROUND
 11784 7022 29 83			and #$83
 11785 7024 D0 05			jne l_1FB6
 11786 7026 A9 11			lda #$11
 11787 7028 8D F3 A0			sta DEFLECT
 11788 702B			l_1FB6
 11789
 11790 				; optimize OK (service.pas), line = 2280
 11791
 11792 702B AD F4 A0			lda AROUND
 11793 702E 29 83			and #$83
 11794 7030 C9 01			cmp #$01
 11795 7032 D0 05			jne l_1FD3
 11796 7034 A9 33			lda #$33
 11797 7036 8D F3 A0			sta DEFLECT
 11798 7039			l_1FD3
 11799
 11800 				; optimize OK (service.pas), line = 2281
 11801
 11802 7039 AD F4 A0			lda AROUND
 11803 703C 29 83			and #$83
 11804 703E C9 02			cmp #$02
 11805 7040 D0 05			jne l_1FF0
 11806 7042 A9 10			lda #$10
 11807 7044 8D F3 A0			sta DEFLECT
 11808 7047			l_1FF0
 11809
 11810 				; optimize OK (service.pas), line = 2282
 11811
 11812 7047 AD F4 A0			lda AROUND
 11813 704A 29 83			and #$83
 11814 704C C9 03			cmp #$03
 11815 704E D0 05			jne l_200D
 11816 7050 A9 12			lda #$12
 11817 7052 8D F3 A0			sta DEFLECT
 11818 7055			l_200D
 11819
 11820 				; optimize OK (service.pas), line = 2283
 11821
 11822 7055 AD F4 A0			lda AROUND
 11823 7058 29 83			and #$83
 11824 705A C9 80			cmp #$80
 11825 705C D0 05			jne l_202A
 11826 705E A9 01			lda #$01
 11827 7060 8D F3 A0			sta DEFLECT
 11828 7063			l_202A
 11829
 11830 				; optimize OK (service.pas), line = 2284
 11831
 11832 7063 AD F4 A0			lda AROUND
 11833 7066 29 83			and #$83
 11834 7068 C9 81			cmp #$81
 11835 706A D0 05			jne l_2047
 11836 706C A9 21			lda #$21
 11837 706E 8D F3 A0			sta DEFLECT
 11838 7071			l_2047
 11839
 11840 				; optimize OK (service.pas), line = 2285
 11841
 11842 7071 AD F4 A0			lda AROUND
 11843 7074 29 83			and #$83
 11844 7076 C9 82			cmp #$82
 11845 7078 D0 05			jne l_2064
 11846 707A A9 11			lda #$11
 11847 707C 8D F3 A0			sta DEFLECT
 11848 707F			l_2064
 11849
 11850 				; optimize OK (service.pas), line = 2287
 11851
 11852 707F A9 05			lda #$05
 11853 7081 8D F1 A0			sta EMERGENCY
 11854
 11855 				; optimize OK (service.pas), line = 2288
 11856
 11857 7084 A0 00			ldy #$00
 11858 7086 AD D8 A0			lda YB
 11859 7089 10 01			spl
 11860 708B 88				dey
 11861 708C 38 E9 01			sub #$01
 11862 708F 8D C3 A0			sta SHOOT_BLOCK.YB
 11863 7092 98				tya
 11864 7093 E9 00			sbc #$00
 11865 7095 8D C4 A0			sta SHOOT_BLOCK.YB+1
 11866 7098 A0 00			ldy #$00
 11867 709A AD D7 A0			lda XB
 11868 709D 10 01			spl
 11869 709F 88				dey
 11870 70A0 38 E9 01			sub #$01
 11871 70A3 8D C1 A0			sta SHOOT_BLOCK.XB
 11872 70A6 98				tya
 11873 70A7 E9 00			sbc #$00
 11874 70A9 8D C2 A0			sta SHOOT_BLOCK.XB+1
 11875 70AC AD CF A0			lda BALL
 11876 70AF 8D C5 A0			sta SHOOT_BLOCK.BALL
 11877 70B2 AD D0 A0			lda BALL+1
 11878 70B5 8D C6 A0			sta SHOOT_BLOCK.BALL+1
 11879 70B8 20 91 65			jsr SHOOT_BLOCK
 11880 70BB			l_1F9F
 11881
 11882 				; optimize OK (service.pas), line = 2293
 11883
 11884 70BB AD F6 A0			lda TOUCH
 11885 70BE C9 01			cmp #$01
 11886 70C0 F0 03 4C 61 71		jne l_2094
 11887
 11888 				; optimize OK (service.pas), line = 2295
 11889
 11890 70C5 AD F4 A0			lda AROUND
 11891 70C8 29 0E			and #$0E
 11892 70CA D0 05			jne l_20AB
 11893 70CC A9 21			lda #$21
 11894 70CE 8D F3 A0			sta DEFLECT
 11895 70D1			l_20AB
 11896
 11897 				; optimize OK (service.pas), line = 2296
 11898
 11899 70D1 AD F4 A0			lda AROUND
 11900 70D4 29 0E			and #$0E
 11901 70D6 C9 02			cmp #$02
 11902 70D8 D0 05			jne l_20C8
 11903 70DA A9 20			lda #$20
 11904 70DC 8D F3 A0			sta DEFLECT
 11905 70DF			l_20C8
 11906
 11907 				; optimize OK (service.pas), line = 2297
 11908
 11909 70DF AD F4 A0			lda AROUND
 11910 70E2 29 0E			and #$0E
 11911 70E4 C9 04			cmp #$04
 11912 70E6 D0 05			jne l_20E5
 11913 70E8 A9 33			lda #$33
 11914 70EA 8D F3 A0			sta DEFLECT
 11915 70ED			l_20E5
 11916
 11917 				; optimize OK (service.pas), line = 2298
 11918
 11919 70ED AD F4 A0			lda AROUND
 11920 70F0 29 0E			and #$0E
 11921 70F2 C9 06			cmp #$06
 11922 70F4 D0 05			jne l_2102
 11923 70F6 A9 22			lda #$22
 11924 70F8 8D F3 A0			sta DEFLECT
 11925 70FB			l_2102
 11926
 11927 				; optimize OK (service.pas), line = 2299
 11928
 11929 70FB AD F4 A0			lda AROUND
 11930 70FE 29 0E			and #$0E
 11931 7100 C9 08			cmp #$08
 11932 7102 D0 05			jne l_211F
 11933 7104 A9 01			lda #$01
 11934 7106 8D F3 A0			sta DEFLECT
 11935 7109			l_211F
 11936
 11937 				; optimize OK (service.pas), line = 2300
 11938
 11939 7109 AD F4 A0			lda AROUND
 11940 710C 29 0E			and #$0E
 11941 710E C9 0A			cmp #$0A
 11942 7110 D0 05			jne l_213C
 11943 7112 A9 21			lda #$21
 11944 7114 8D F3 A0			sta DEFLECT
 11945 7117			l_213C
 11946
 11947 				; optimize OK (service.pas), line = 2301
 11948
 11949 7117 AD F4 A0			lda AROUND
 11950 711A 29 0E			and #$0E
 11951 711C C9 0C			cmp #$0C
 11952 711E D0 05			jne l_2159
 11953 7120 A9 11			lda #$11
 11954 7122 8D F3 A0			sta DEFLECT
 11955 7125			l_2159
 11956
 11957 				; optimize OK (service.pas), line = 2303
 11958
 11959 7125 A9 08			lda #$08
 11960 7127 8D F1 A0			sta EMERGENCY
 11961
 11962 				; optimize OK (service.pas), line = 2304
 11963
 11964 712A A0 00			ldy #$00
 11965 712C AD D8 A0			lda YB
 11966 712F 10 01			spl
 11967 7131 88				dey
 11968 7132 38 E9 01			sub #$01
 11969 7135 8D C3 A0			sta SHOOT_BLOCK.YB
 11970 7138 98				tya
 11971 7139 E9 00			sbc #$00
 11972 713B 8D C4 A0			sta SHOOT_BLOCK.YB+1
 11973 713E A0 00			ldy #$00
 11974 7140 AD D7 A0			lda XB
 11975 7143 10 01			spl
 11976 7145 88				dey
 11977 7146 18 69 01			add #$01
 11978 7149 8D C1 A0			sta SHOOT_BLOCK.XB
 11979 714C 90 01			scc
 11980 714E C8				iny
 11981 714F 8C C2 A0			sty SHOOT_BLOCK.XB+1
 11982 7152 AD CF A0			lda BALL
 11983 7155 8D C5 A0			sta SHOOT_BLOCK.BALL
 11984 7158 AD D0 A0			lda BALL+1
 11985 715B 8D C6 A0			sta SHOOT_BLOCK.BALL+1
 11986 715E 20 91 65			jsr SHOOT_BLOCK
 11987 7161			l_2094
 11988
 11989 				; optimize OK (service.pas), line = 2307
 11990
 11991 7161 AD F6 A0			lda TOUCH
 11992 7164 C9 02			cmp #$02
 11993 7166 F0 03 4C 07 72		jne l_2189
 11994
 11995 				; optimize OK (service.pas), line = 2309
 11996
 11997 716B AD F4 A0			lda AROUND
 11998 716E 29 E0			and #$E0
 11999 7170 D0 05			jne l_21A0
 12000 7172 A9 12			lda #$12
 12001 7174 8D F3 A0			sta DEFLECT
 12002 7177			l_21A0
 12003
 12004 				; optimize OK (service.pas), line = 2310
 12005
 12006 7177 AD F4 A0			lda AROUND
 12007 717A 29 E0			and #$E0
 12008 717C C9 20			cmp #$20
 12009 717E D0 05			jne l_21BD
 12010 7180 A9 10			lda #$10
 12011 7182 8D F3 A0			sta DEFLECT
 12012 7185			l_21BD
 12013
 12014 				; optimize OK (service.pas), line = 2311
 12015
 12016 7185 AD F4 A0			lda AROUND
 12017 7188 29 E0			and #$E0
 12018 718A C9 40			cmp #$40
 12019 718C D0 05			jne l_21DA
 12020 718E A9 33			lda #$33
 12021 7190 8D F3 A0			sta DEFLECT
 12022 7193			l_21DA
 12023
 12024 				; optimize OK (service.pas), line = 2312
 12025
 12026 7193 AD F4 A0			lda AROUND
 12027 7196 29 E0			and #$E0
 12028 7198 C9 60			cmp #$60
 12029 719A D0 05			jne l_21F7
 12030 719C A9 11			lda #$11
 12031 719E 8D F3 A0			sta DEFLECT
 12032 71A1			l_21F7
 12033
 12034 				; optimize OK (service.pas), line = 2313
 12035
 12036 71A1 AD F4 A0			lda AROUND
 12037 71A4 29 E0			and #$E0
 12038 71A6 C9 80			cmp #$80
 12039 71A8 D0 05			jne l_2214
 12040 71AA A9 02			lda #$02
 12041 71AC 8D F3 A0			sta DEFLECT
 12042 71AF			l_2214
 12043
 12044 				; optimize OK (service.pas), line = 2314
 12045
 12046 71AF AD F4 A0			lda AROUND
 12047 71B2 29 E0			and #$E0
 12048 71B4 C9 A0			cmp #$A0
 12049 71B6 D0 05			jne l_2231
 12050 71B8 A9 12			lda #$12
 12051 71BA 8D F3 A0			sta DEFLECT
 12052 71BD			l_2231
 12053
 12054 				; optimize OK (service.pas), line = 2315
 12055
 12056 71BD AD F4 A0			lda AROUND
 12057 71C0 29 E0			and #$E0
 12058 71C2 C9 C0			cmp #$C0
 12059 71C4 D0 05			jne l_224E
 12060 71C6 A9 22			lda #$22
 12061 71C8 8D F3 A0			sta DEFLECT
 12062 71CB			l_224E
 12063
 12064 				; optimize OK (service.pas), line = 2317
 12065
 12066 71CB A9 06			lda #$06
 12067 71CD 8D F1 A0			sta EMERGENCY
 12068
 12069 				; optimize OK (service.pas), line = 2318
 12070
 12071 71D0 A0 00			ldy #$00
 12072 71D2 AD D8 A0			lda YB
 12073 71D5 10 01			spl
 12074 71D7 88				dey
 12075 71D8 18 69 01			add #$01
 12076 71DB 8D C3 A0			sta SHOOT_BLOCK.YB
 12077 71DE 90 01			scc
 12078 71E0 C8				iny
 12079 71E1 8C C4 A0			sty SHOOT_BLOCK.YB+1
 12080 71E4 A0 00			ldy #$00
 12081 71E6 AD D7 A0			lda XB
 12082 71E9 10 01			spl
 12083 71EB 88				dey
 12084 71EC 38 E9 01			sub #$01
 12085 71EF 8D C1 A0			sta SHOOT_BLOCK.XB
 12086 71F2 98				tya
 12087 71F3 E9 00			sbc #$00
 12088 71F5 8D C2 A0			sta SHOOT_BLOCK.XB+1
 12089 71F8 AD CF A0			lda BALL
 12090 71FB 8D C5 A0			sta SHOOT_BLOCK.BALL
 12091 71FE AD D0 A0			lda BALL+1
 12092 7201 8D C6 A0			sta SHOOT_BLOCK.BALL+1
 12093 7204 20 91 65			jsr SHOOT_BLOCK
 12094 7207			l_2189
 12095
 12096 				; optimize OK (service.pas), line = 2321
 12097
 12098 7207 AD F6 A0			lda TOUCH
 12099 720A C9 03			cmp #$03
 12100 720C F0 03 4C AD 72		jne l_227E
 12101
 12102 				; optimize OK (service.pas), line = 2323
 12103
 12104 7211 AD F4 A0			lda AROUND
 12105 7214 29 38			and #$38
 12106 7216 D0 05			jne l_2295
 12107 7218 A9 22			lda #$22
 12108 721A 8D F3 A0			sta DEFLECT
 12109 721D			l_2295
 12110
 12111 				; optimize OK (service.pas), line = 2324
 12112
 12113 721D AD F4 A0			lda AROUND
 12114 7220 29 38			and #$38
 12115 7222 C9 08			cmp #$08
 12116 7224 D0 05			jne l_22B2
 12117 7226 A9 02			lda #$02
 12118 7228 8D F3 A0			sta DEFLECT
 12119 722B			l_22B2
 12120
 12121 				; optimize OK (service.pas), line = 2325
 12122
 12123 722B AD F4 A0			lda AROUND
 12124 722E 29 38			and #$38
 12125 7230 C9 10			cmp #$10
 12126 7232 D0 05			jne l_22CF
 12127 7234 A9 33			lda #$33
 12128 7236 8D F3 A0			sta DEFLECT
 12129 7239			l_22CF
 12130
 12131 				; optimize OK (service.pas), line = 2326
 12132
 12133 7239 AD F4 A0			lda AROUND
 12134 723C 29 38			and #$38
 12135 723E C9 18			cmp #$18
 12136 7240 D0 05			jne l_22EC
 12137 7242 A9 12			lda #$12
 12138 7244 8D F3 A0			sta DEFLECT
 12139 7247			l_22EC
 12140
 12141 				; optimize OK (service.pas), line = 2327
 12142
 12143 7247 AD F4 A0			lda AROUND
 12144 724A 29 38			and #$38
 12145 724C C9 20			cmp #$20
 12146 724E D0 05			jne l_2309
 12147 7250 A9 20			lda #$20
 12148 7252 8D F3 A0			sta DEFLECT
 12149 7255			l_2309
 12150
 12151 				; optimize OK (service.pas), line = 2328
 12152
 12153 7255 AD F4 A0			lda AROUND
 12154 7258 29 38			and #$38
 12155 725A C9 28			cmp #$28
 12156 725C D0 05			jne l_2326
 12157 725E A9 22			lda #$22
 12158 7260 8D F3 A0			sta DEFLECT
 12159 7263			l_2326
 12160
 12161 				; optimize OK (service.pas), line = 2329
 12162
 12163 7263 AD F4 A0			lda AROUND
 12164 7266 29 38			and #$38
 12165 7268 C9 30			cmp #$30
 12166 726A D0 05			jne l_2343
 12167 726C A9 21			lda #$21
 12168 726E 8D F3 A0			sta DEFLECT
 12169 7271			l_2343
 12170
 12171 				; optimize OK (service.pas), line = 2331
 12172
 12173 7271 A9 07			lda #$07
 12174 7273 8D F1 A0			sta EMERGENCY
 12175
 12176 				; optimize OK (service.pas), line = 2332
 12177
 12178 7276 A0 00			ldy #$00
 12179 7278 AD D8 A0			lda YB
 12180 727B 10 01			spl
 12181 727D 88				dey
 12182 727E 18 69 01			add #$01
 12183 7281 8D C3 A0			sta SHOOT_BLOCK.YB
 12184 7284 90 01			scc
 12185 7286 C8				iny
 12186 7287 8C C4 A0			sty SHOOT_BLOCK.YB+1
 12187 728A A0 00			ldy #$00
 12188 728C AD D7 A0			lda XB
 12189 728F 10 01			spl
 12190 7291 88				dey
 12191 7292 18 69 01			add #$01
 12192 7295 8D C1 A0			sta SHOOT_BLOCK.XB
 12193 7298 90 01			scc
 12194 729A C8				iny
 12195 729B 8C C2 A0			sty SHOOT_BLOCK.XB+1
 12196 729E AD CF A0			lda BALL
 12197 72A1 8D C5 A0			sta SHOOT_BLOCK.BALL
 12198 72A4 AD D0 A0			lda BALL+1
 12199 72A7 8D C6 A0			sta SHOOT_BLOCK.BALL+1
 12200 72AA 20 91 65			jsr SHOOT_BLOCK
 12201 72AD			l_227E
 12202
 12203 				; optimize OK (service.pas), line = 2338
 12204
 12205 72AD AD F3 A0			lda DEFLECT
 12206 72B0 4A				lsr @
 12207 72B1 4A				lsr @
 12208 72B2 4A				lsr @
 12209 72B3 4A				lsr @
 12210 72B4 8D E7 A0			sta MYX
 12211 72B7 A9 00			lda #$00
 12212 72B9 8D E8 A0			sta MYX+1
 12213
 12214 				; optimize OK (service.pas), line = 2339
 12215
 12216 72BC AD F3 A0			lda DEFLECT
 12217 72BF 29 0F			and #$0F
 12218 72C1 8D E9 A0			sta MYY
 12219 72C4 A9 00			lda #$00
 12220 72C6 8D EA A0			sta MYY+1
 12221
 12222 				; optimize OK (service.pas), line = 2341
 12223
 12224 72C9 AD E8 A0			lda MYX+1
 12225 72CC D0 05			bne @+
 12226 72CE AD E7 A0			lda MYX
 12227 72D1 C9 01			cmp #$01
 12228 				@
 12229 72D3 D0 50			jne l_2386
 12230 72D5 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12231 72DF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12232 72E1 B1 84			lda (:bp2),y
 12233 72E3 85 8A			sta SYSTEM.ABS.@010184000.X
 12234 72E5 C8				iny
 12235 72E6 B1 84			lda (:bp2),y
 12236 72E8 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12237 72EA 20 0F 2B			jsr SYSTEM.ABS.@010184000
 12238 72ED E8				inx
 12239 72EE A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12240 72F2 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12241 72F6 A9 00			lda #$00
 12242 72F8 38 F5 96			sub :STACKORIGIN,x
 12243 72FB 95 96			sta :STACKORIGIN,x
 12244 72FD A9 00			lda #$00
 12245 72FF F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12246 7301 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12247 7303 A9 00			lda #$00
 12248 7305 E9 00			sbc #$00
 12249 7307 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12250 7309 A9 00			lda #$00
 12251 730B E9 00			sbc #$00
 12252 730D 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12253 730F AC CF A0 84 84 AC + 	mwy BALL :bp2
 12254 7319 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12255 731B B5 96			lda :STACKORIGIN,x
 12256 731D 91 84			sta (:bp2),y
 12257 731F C8				iny
 12258 7320 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12259 7322 91 84			sta (:bp2),y
 12260 7324 CA				dex
 12261 7325			l_2386
 12262
 12263 				; optimize OK (service.pas), line = 2342
 12264
 12265 7325 AD E8 A0			lda MYX+1
 12266 7328 D0 05			bne @+
 12267 732A AD E7 A0			lda MYX
 12268 732D C9 02			cmp #$02
 12269 				@
 12270 732F D0 2D			jne l_23A3
 12271 7331 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12272 733B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12273 733D B1 84			lda (:bp2),y
 12274 733F 85 8A			sta SYSTEM.ABS.@010184000.X
 12275 7341 C8				iny
 12276 7342 B1 84			lda (:bp2),y
 12277 7344 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12278 7346 20 0F 2B			jsr SYSTEM.ABS.@010184000
 12279 7349 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12280 7353 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12281 7355 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12282 7357 91 84			sta (:bp2),y
 12283 7359 C8				iny
 12284 735A A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12285 735C 91 84			sta (:bp2),y
 12286 735E			l_23A3
 12287
 12288 				; optimize OK (service.pas), line = 2343
 12289
 12290 735E AD E8 A0			lda MYX+1
 12291 7361 D0 05			bne @+
 12292 7363 AD E7 A0			lda MYX
 12293 7366 C9 03			cmp #$03
 12294 				@
 12295 7368 D0 25			jne l_23BD
 12296 736A AC CF A0 84 84 AC + 	mwy BALL :bp2
 12297 7374 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12298 7376 A9 00			lda #$00
 12299 7378 38 F1 84			sub (:bp2),y
 12300 737B 85 9F			sta :STACKORIGIN+9
 12301 737D C8				iny
 12302 737E A9 00			lda #$00
 12303 7380 F1 84			sbc (:bp2),y
 12304 7382 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12305 7384 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12306 7386 A5 9F			lda :STACKORIGIN+9
 12307 7388 91 84			sta (:bp2),y
 12308 738A C8				iny
 12309 738B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12310 738D 91 84			sta (:bp2),y
 12311 738F			l_23BD
 12312
 12313 				; optimize OK (service.pas), line = 2345
 12314
 12315 738F AD EA A0			lda MYY+1
 12316 7392 D0 05			bne @+
 12317 7394 AD E9 A0			lda MYY
 12318 7397 C9 01			cmp #$01
 12319 				@
 12320 7399 D0 50			jne l_23D9
 12321 739B AC CF A0 84 84 AC + 	mwy BALL :bp2
 12322 73A5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12323 73A7 B1 84			lda (:bp2),y
 12324 73A9 85 8A			sta SYSTEM.ABS.@010184000.X
 12325 73AB C8				iny
 12326 73AC B1 84			lda (:bp2),y
 12327 73AE 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12328 73B0 20 0F 2B			jsr SYSTEM.ABS.@010184000
 12329 73B3 E8				inx
 12330 73B4 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12331 73B8 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12332 73BC A9 00			lda #$00
 12333 73BE 38 F5 96			sub :STACKORIGIN,x
 12334 73C1 95 96			sta :STACKORIGIN,x
 12335 73C3 A9 00			lda #$00
 12336 73C5 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12337 73C7 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12338 73C9 A9 00			lda #$00
 12339 73CB E9 00			sbc #$00
 12340 73CD 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12341 73CF A9 00			lda #$00
 12342 73D1 E9 00			sbc #$00
 12343 73D3 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12344 73D5 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12345 73DF A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12346 73E1 B5 96			lda :STACKORIGIN,x
 12347 73E3 91 84			sta (:bp2),y
 12348 73E5 C8				iny
 12349 73E6 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12350 73E8 91 84			sta (:bp2),y
 12351 73EA CA				dex
 12352 73EB			l_23D9
 12353
 12354 				; optimize OK (service.pas), line = 2346
 12355
 12356 73EB AD EA A0			lda MYY+1
 12357 73EE D0 05			bne @+
 12358 73F0 AD E9 A0			lda MYY
 12359 73F3 C9 02			cmp #$02
 12360 				@
 12361 73F5 D0 2D			jne l_23F6
 12362 73F7 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12363 7401 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12364 7403 B1 84			lda (:bp2),y
 12365 7405 85 8A			sta SYSTEM.ABS.@010184000.X
 12366 7407 C8				iny
 12367 7408 B1 84			lda (:bp2),y
 12368 740A 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12369 740C 20 0F 2B			jsr SYSTEM.ABS.@010184000
 12370 740F AC CF A0 84 84 AC + 	mwy BALL :bp2
 12371 7419 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12372 741B A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12373 741D 91 84			sta (:bp2),y
 12374 741F C8				iny
 12375 7420 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12376 7422 91 84			sta (:bp2),y
 12377 7424			l_23F6
 12378
 12379 				; optimize OK (service.pas), line = 2347
 12380
 12381 7424 AD EA A0			lda MYY+1
 12382 7427 D0 05			bne @+
 12383 7429 AD E9 A0			lda MYY
 12384 742C C9 03			cmp #$03
 12385 				@
 12386 742E D0 25			jne l_2410
 12387 7430 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12388 743A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12389 743C A9 00			lda #$00
 12390 743E 38 F1 84			sub (:bp2),y
 12391 7441 85 9F			sta :STACKORIGIN+9
 12392 7443 C8				iny
 12393 7444 A9 00			lda #$00
 12394 7446 F1 84			sbc (:bp2),y
 12395 7448 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12396 744A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12397 744C A5 9F			lda :STACKORIGIN+9
 12398 744E 91 84			sta (:bp2),y
 12399 7450 C8				iny
 12400 7451 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12401 7453 91 84			sta (:bp2),y
 12402 7455			l_2410
 12403 7455			l_1E01
 12404 7455			l_1B08
 12405
 12406 				; optimize OK (service.pas), line = 2357
 12407
 12408 7455 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12409 745F A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12410 7461 B1 84			lda (:bp2),y
 12411 7463 C9 65			cmp #$65
 12412 7465 B0 03 4C 30 76		jcc l_2431
 12413
 12414 				; optimize OK (service.pas), line = 2360
 12415
 12416 746A AD F1 A0			lda EMERGENCY
 12417 746D C9 FF			cmp #$FF
 12418 746F D0 05			jne l_2444
 12419 7471 A9 04			lda #$04
 12420 7473 20 E8 3C			jsr FATAL_ERROR
 12421 7476			l_2444
 12422
 12423 				; optimize OK (service.pas), line = 2362
 12424
 12425 7476 AC F1 A0			ldy EMERGENCY
 12426 7479 B9 AF 20			lda adr.EMERG_DEV,y
 12427 747C 8D F2 A0			sta MIMAX
 12428
 12429 				; optimize OK (service.pas), line = 2388
 12430
 12431 747F 98				tya
 12432 7480 8D 00 A1			sta @CASETMP_0009
 12433 7483 C9 05			cmp #$05
 12434 7485 D0 1F			jne l_245D
 12435 				@
 12436
 12437 				; optimize OK (service.pas), line = 2391
 12438
 12439 7487 AD FA A0			lda adr.ADJW+$03
 12440 748A D0 08			jne l_2474
 12441 748C AD F2 A0			lda MIMAX
 12442 748F 29 0F			and #$0F
 12443 7491 8D F2 A0			sta MIMAX
 12444 7494			l_2474
 12445
 12446 				; optimize OK (service.pas), line = 2392
 12447
 12448 7494 AD F8 A0			lda adr.ADJW+$01
 12449 7497 D0 0A			jne l_249C
 12450 7499 AD F2 A0			lda MIMAX
 12451 749C 29 F0			and #$F0
 12452 749E 09 03			ora #$03
 12453 74A0 8D F2 A0			sta MIMAX
 12454 74A3			l_249C
 12455 74A3 4C 12 75			jmp a_0009
 12456 74A6			l_245D
 12457 74A6 C9 06			cmp #$06
 12458 74A8 D0 21			jne l_24B4
 12459
 12460 				; optimize OK (service.pas), line = 2396
 12461
 12462 74AA AD F8 A0			lda adr.ADJW+$01
 12463 74AD D0 0A			jne l_24CB
 12464 74AF AD F2 A0			lda MIMAX
 12465 74B2 29 0F			and #$0F
 12466 74B4 09 10			ora #$10
 12467 74B6 8D F2 A0			sta MIMAX
 12468 74B9			l_24CB
 12469
 12470 				; optimize OK (service.pas), line = 2397
 12471
 12472 74B9 AD FC A0			lda adr.ADJW+$05
 12473 74BC D0 0A			jne l_24F3
 12474 74BE AD F2 A0			lda MIMAX
 12475 74C1 29 F0			and #$F0
 12476 74C3 09 04			ora #$04
 12477 74C5 8D F2 A0			sta MIMAX
 12478 74C8			l_24F3
 12479 74C8 4C 12 75			jmp a_0009
 12480 74CB			l_24B4
 12481 74CB C9 07			cmp #$07
 12482 74CD D0 21			jne l_250B
 12483
 12484 				; optimize OK (service.pas), line = 2401
 12485
 12486 74CF AD FC A0			lda adr.ADJW+$05
 12487 74D2 D0 0A			jne l_2522
 12488 74D4 AD F2 A0			lda MIMAX
 12489 74D7 29 0F			and #$0F
 12490 74D9 09 20			ora #$20
 12491 74DB 8D F2 A0			sta MIMAX
 12492 74DE			l_2522
 12493
 12494 				; optimize OK (service.pas), line = 2402
 12495
 12496 74DE AD FE A0			lda adr.ADJW+$07
 12497 74E1 D0 0A			jne l_254A
 12498 74E3 AD F2 A0			lda MIMAX
 12499 74E6 29 F0			and #$F0
 12500 74E8 09 05			ora #$05
 12501 74EA 8D F2 A0			sta MIMAX
 12502 74ED			l_254A
 12503 74ED 4C 12 75			jmp a_0009
 12504 74F0			l_250B
 12505 74F0 C9 08			cmp #$08
 12506 74F2 D0 1E			jne l_2562
 12507
 12508 				; optimize OK (service.pas), line = 2406
 12509
 12510 74F4 AD FE A0			lda adr.ADJW+$07
 12511 74F7 D0 0A			jne l_2579
 12512 74F9 AD F2 A0			lda MIMAX
 12513 74FC 29 0F			and #$0F
 12514 74FE 09 30			ora #$30
 12515 7500 8D F2 A0			sta MIMAX
 12516 7503			l_2579
 12517
 12518 				; optimize OK (service.pas), line = 2407
 12519
 12520 7503 AD FA A0			lda adr.ADJW+$03
 12521 7506 D0 0A			jne l_25A1
 12522 7508 AD F2 A0			lda MIMAX
 12523 750B 29 F0			and #$F0
 12524 750D 09 06			ora #$06
 12525 750F 8D F2 A0			sta MIMAX
 12526 7512			l_25A1
 12527 7512			l_2562
 12528 7512			a_0009
 12529
 12530 				; --- RepeatUntilProlog
 12531 7512			l_25B9
 12532
 12533 				; optimize OK (service.pas), line = 2414
 12534
 12535 7512 AD F2 A0			lda MIMAX
 12536 7515 4A				lsr @
 12537 7516 4A				lsr @
 12538 7517 4A				lsr @
 12539 7518 4A				lsr @
 12540 7519 85 8E			sta :ecx
 12541 751B A9 5A			lda #$5A
 12542 751D 85 86			sta :eax
 12543 					.ifdef fmulinit
 12544 					fmulu_8
 12545 					els
 12546 751F 20 EF 22			imulCL
 12547 					eif
 12548 7522 A5 86			lda :eax
 12549 7524 8D D5 A0			sta LX
 12550
 12551 				; optimize OK (service.pas), line = 2415
 12552
 12553 7527 AD F2 A0			lda MIMAX
 12554 752A 29 0F			and #$0F
 12555 752C 85 8E			sta :ecx
 12556 752E A9 5A			lda #$5A
 12557 7530 85 86			sta :eax
 12558 					.ifdef fmulinit
 12559 					fmulu_8
 12560 					els
 12561 7532 20 EF 22			imulCL
 12562 					eif
 12563 7535 8D E2 A0			sta MX+1
 12564 7538 A5 86			lda :eax
 12565 753A 8D E1 A0			sta MX
 12566
 12567 				; optimize OK (service.pas), line = 2417
 12568
 12569 753D A0 00			ldy #$00
 12570 753F AD D5 A0			lda LX
 12571 7542 10 01			spl
 12572 7544 88				dey
 12573 7545 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12574 7547 85 A0			sta :STACKORIGIN+10
 12575 7549 AD E1 A0			lda MX
 12576 754C 38 E5 A0			sub :STACKORIGIN+10
 12577 754F 8D CD 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 12578 7552 AD E2 A0			lda MX+1
 12579 7555 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12580 7557 8D CE 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12581 755A 20 58 33			jsr SYSTEM.RANDOM.@010184000
 12582 755D E8				inx
 12583 755E AD CF 9D 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12584 7563 AD D0 9D 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12585 7568 E8				inx
 12586 7569 AD D5 A0 95 96		mva LX :STACKORIGIN,x
 12587 756E 20 66 21			jsr @expandSHORT2SMALL
 12588 7571 20 E5 20			jsr addAX_CX
 12589 7574 CA				dex
 12590 7575 B5 96			lda :STACKORIGIN,x
 12591 7577 8D E5 A0			sta ANGLE
 12592 757A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12593 757C 8D E6 A0			sta ANGLE+1
 12594 757F CA				dex
 12595
 12596 				; optimize OK (service.pas), line = 2422
 12597
 12598 7580 A9 5A			lda #$5A
 12599 7582 85 8E			sta @SMALLINT.MOD.B
 12600 7584 A9 00			lda #$00
 12601 7586 85 8F			sta @SMALLINT.MOD.B+1
 12602 7588 AD E5 A0			lda ANGLE
 12603 758B 85 86			sta @SMALLINT.MOD.A
 12604 758D AD E6 A0			lda ANGLE+1
 12605 7590 85 87			sta @SMALLINT.MOD.A+1
 12606 7592 20 80 22			jsr @SMALLINT.MOD
 12607 7595 A5 92			lda @SMALLINT.MOD.RESULT
 12608 7597 C9 1F			cmp #$1F
 12609 7599 A5 93			lda @SMALLINT.MOD.RESULT+1
 12610 759B E9 00			sbc #$00
 12611 759D 50 02			svc
 12612 759F 49 80			eor #$80
 12613 75A1 10 03 4C 12 75		jmi l_25B9
 12614 75A6 A9 5A			lda #$5A
 12615 75A8 85 8E			sta @SMALLINT.MOD.B
 12616 75AA A9 00			lda #$00
 12617 75AC 85 8F			sta @SMALLINT.MOD.B+1
 12618 75AE AD E5 A0			lda ANGLE
 12619 75B1 85 86			sta @SMALLINT.MOD.A
 12620 75B3 AD E6 A0			lda ANGLE+1
 12621 75B6 85 87			sta @SMALLINT.MOD.A+1
 12622 75B8 20 80 22			jsr @SMALLINT.MOD
 12623 75BB A5 92			lda @SMALLINT.MOD.RESULT
 12624 75BD C9 3C			cmp #$3C
 12625 75BF A5 93			lda @SMALLINT.MOD.RESULT+1
 12626 75C1 E9 00			sbc #$00
 12627 75C3 50 02			svc
 12628 75C5 49 80			eor #$80
 12629 75C7 30 03 4C 12 75		jpl l_25B9
 12630
 12631 				; optimize OK (service.pas), line = 2426
 12632
 12633 75CC A9 68			lda #$68
 12634 75CE 85 8E			sta @SMALLINT.MOD.B
 12635 75D0 A9 01			lda #$01
 12636 75D2 85 8F			sta @SMALLINT.MOD.B+1
 12637 75D4 AD E5 A0			lda ANGLE
 12638 75D7 85 86			sta @SMALLINT.MOD.A
 12639 75D9 AD E6 A0			lda ANGLE+1
 12640 75DC 85 87			sta @SMALLINT.MOD.A+1
 12641 75DE 20 80 22			jsr @SMALLINT.MOD
 12642 75E1 A5 92			lda @SMALLINT.MOD.RESULT
 12643 75E3 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 12644 75E6 A5 93			lda @SMALLINT.MOD.RESULT+1
 12645 75E8 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 12646 75EB AD CF A0			lda BALL
 12647 75EE 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 12648 75F1 AD D0 A0			lda BALL+1
 12649 75F4 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 12650 75F7 20 E4 46			jsr SET_BALL_DIRECTION
 12651
 12652 				; optimize OK (service.pas), line = 2427
 12653
 12654 75FA AC CF A0 84 84 AC + 	mwy BALL :bp2
 12655 7604 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12656 7606 B1 84			lda (:bp2),y
 12657 7608 8D 12 A0			sta SET_BALL_SPEED.SPEED
 12658 760B C8				iny
 12659 760C B1 84			lda (:bp2),y
 12660 760E 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 12661 7611 AD CF A0			lda BALL
 12662 7614 8D 0E A0			sta SET_BALL_SPEED.BALL
 12663 7617 AD D0 A0			lda BALL+1
 12664 761A 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 12665 761D 20 01 45			jsr SET_BALL_SPEED
 12666
 12667 				; optimize OK (service.pas), line = 2429
 12668
 12669 7620 AC CF A0 84 84 AC + 	mwy BALL :bp2
 12670 762A A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12671 762C A9 00			lda #$00
 12672 762E 91 84			sta (:bp2),y
 12673 7630			l_2431
 12674
 12675 				; ------------------------------------------------------------
 12676
 12677 = A0CF			BALL	= DATAORIGIN+$033A
 12678 = 9D95			BALL.X	= DATAORIGIN+$0000
 12679 = 9D97			BALL.Y	= DATAORIGIN+$0002
 12680 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
 12681 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
 12682 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
 12683 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
 12684 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
 12685 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
 12686 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
 12687 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
 12688 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
 12689 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
 12690 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
 12691 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
 12692 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
 12693 = 9DB0			BALL.STM	= DATAORIGIN+$001B
 12694 = A0D3			X	= DATAORIGIN+$033E
 12695 = A0D4			Y	= DATAORIGIN+$033F
 12696 = A0D5			LX	= DATAORIGIN+$0340
 12697 = A0D6			LY	= DATAORIGIN+$0341
 12698 = A0D7			XB	= DATAORIGIN+$0342
 12699 = A0D8			YB	= DATAORIGIN+$0343
 12700 = A0D9			OX	= DATAORIGIN+$0344
 12701 = A0DB			OY	= DATAORIGIN+$0346
 12702 = A0DD			NX	= DATAORIGIN+$0348
 12703 = A0DF			NY	= DATAORIGIN+$034A
 12704 = A0E1			MX	= DATAORIGIN+$034C
 12705 = A0E3			MY	= DATAORIGIN+$034E
 12706 = A0E5			ANGLE	= DATAORIGIN+$0350
 12707 = A0E7			MYX	= DATAORIGIN+$0352
 12708 = A0E9			MYY	= DATAORIGIN+$0354
 12709 = A0EB			F1	= DATAORIGIN+$0356
 12710 = A0ED			F2	= DATAORIGIN+$0358
 12711 = A0EF			A	= DATAORIGIN+$035A
 12712 = A0F0			B	= DATAORIGIN+$035B
 12713 = A0F1			EMERGENCY	= DATAORIGIN+$035C
 12714 = A0F2			MIMAX	= DATAORIGIN+$035D
 12715 = A0F3			DEFLECT	= DATAORIGIN+$035E
 12716 = A0F4			AROUND	= DATAORIGIN+$035F
 12717 = A0F5			COLLISION	= DATAORIGIN+$0360
 12718 = A0F6			TOUCH	= DATAORIGIN+$0361
 12719 = A0F7			adr.ADJW	= [DATAORIGIN+$0362] .array [3] [3]
 12720 7630			.var ADJW	= adr.ADJW .word
 12721 = A100			@CASETMP_0009	= DATAORIGIN+$036B
 12722
 12723 = A0CF			@VarData	= BALL
 12724 = 002A			@VarDataSize	= 42
 12725
 12726 7630			@exit
 12727 					.ifdef @new
 12728 					lda <@VarData
 12729 					sta :ztmp
 12730 					lda >@VarData
 12731 					ldy #@VarDataSize-1
 12732 					jmp @FreeMem
 12733 					els
 12734 7630 60				rts						; ret
 12735 					eif
 12736 = 7631 F7 A0		ADJW
 12736 				.endl
 12737
 12738 7633			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 12739
 12740 				; optimize OK (service.pas), line = 2444
 12741
 12742 7633 A9 00			lda #$00
 12743 7635 8D 08 A1			sta Y
 12744
 12745 7638			l_2627
 12746 				; --- ForToDoCondition
 12747 7638 AC 01 A1 84 84 AC + 	mwy PATT :bp2
 12748 7642 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12749 7644 B1 84			lda (:bp2),y
 12750 7646 85 8E			sta @WORD.MOD.B
 12751 7648 C8				iny
 12752 7649 B1 84			lda (:bp2),y
 12753 764B 85 8F			sta @WORD.MOD.B+1
 12754 764D AD 08 A1			lda Y
 12755 7650 85 86			sta @WORD.MOD.A
 12756 7652 A9 00			lda #$00
 12757 7654 85 87			sta @WORD.MOD.A+1
 12758 7656 20 D0 23			jsr @WORD.MOD
 12759 7659 A5 92			lda @WORD.MOD.RESULT
 12760 765B AC 08 A1			ldy Y
 12761 765E 99 00 C4			sta adr.MODX,y
 12762
 12763 				; optimize OK (service.pas), line = 2450
 12764
 12765 7661 AC 01 A1 84 84 AC + 	mwy PATT :bp2
 12766 766B A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 12767 766D B1 84			lda (:bp2),y
 12768 766F 85 8E			sta @WORD.MOD.B
 12769 7671 C8				iny
 12770 7672 B1 84			lda (:bp2),y
 12771 7674 85 8F			sta @WORD.MOD.B+1
 12772 7676 AD 08 A1			lda Y
 12773 7679 85 86			sta @WORD.MOD.A
 12774 767B A9 00			lda #$00
 12775 767D 85 87			sta @WORD.MOD.A+1
 12776 767F 20 D0 23			jsr @WORD.MOD
 12777 7682 A5 92			lda @WORD.MOD.RESULT
 12778 7684 AC 08 A1			ldy Y
 12779 7687 99 00 C3			sta adr.MODY,y
 12780
 12781 				; --- ForToDoEpilog
 12782 768A EE 08 A1			inc Y
 12783 768D D0 A9			jne l_2627
 12784 768F			l_2635
 12785
 12786 				; optimize OK (service.pas), line = 2456
 12787
 12788 768F A9 0A			lda #$0A
 12789 7691 8D 08 A1			sta Y
 12790
 12791 7694			l_265F
 12792 				; --- ForToDoCondition
 12793 7694 AC 08 A1			ldy Y
 12794 7697 C0 C7			cpy #$C7
 12795 7699 90 03 4C C2 77		jcs l_266D
 12796
 12797 				; optimize OK (service.pas), line = 2459
 12798
 12799 769E B9 00 C3			lda adr.MODY,y
 12800 76A1 85 86			sta :eax
 12801 76A3 AC 01 A1 84 84 AC + 	mwy PATT :bp2
 12802 76AD A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12803 76AF B1 84			lda (:bp2),y
 12804 76B1 85 8E			sta :ecx
 12805 76B3 C8				iny
 12806 76B4 B1 84			lda (:bp2),y
 12807 76B6 85 8F			sta :ecx+1
 12808 76B8 A9 00			lda #$00
 12809 76BA 85 87			sta :eax+1
 12810 					.ifdef fmulinit
 12811 					fmulu_16
 12812 					els
 12813 76BC 20 3B 23			imulCX
 12814 					eif
 12815 76BF A5 86			lda :eax
 12816 76C1 8D 05 A1			sta YB
 12817 76C4 A5 87			lda :eax+1
 12818 76C6 8D 06 A1			sta YB+1
 12819
 12820 				; optimize OK (service.pas), line = 2461
 12821
 12822 76C9 A9 00			lda #$00
 12823 76CB 8D 0B A1			sta K
 12824
 12825 				; optimize OK (service.pas), line = 2462
 12826
 12827 76CE A9 09			lda #$09
 12828 76D0 8D 07 A1			sta X
 12829
 12830 76D3			l_2688
 12831 				; --- ForToDoCondition
 12832 76D3 AD 07 A1			lda X
 12833 76D6 C9 D8			cmp #$D8
 12834 76D8 90 03 4C 72 77		jcs l_2696
 12835
 12836 				; optimize OK (service.pas), line = 2465
 12837
 12838 76DD AC 01 A1 84 84 AC + 	mwy PATT :bp2
 12839 76E7 A0 04			ldy #PATT.OFS-DATAORIGIN
 12840 76E9 B1 84			lda (:bp2),y
 12841 76EB 85 9F			sta :STACKORIGIN+9
 12842 76ED C8				iny
 12843 76EE B1 84			lda (:bp2),y
 12844 76F0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12845 76F2 C8				iny
 12846 76F3 B1 84			lda (:bp2),y
 12847 76F5 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12848 76F7 C8				iny
 12849 76F8 B1 84			lda (:bp2),y
 12850 76FA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12851 76FC AC 07 A1			ldy X
 12852 76FF A5 9F			lda :STACKORIGIN+9
 12853 7701 18 79 00 C4			add adr.MODX,y
 12854 7705 85 9F			sta :STACKORIGIN+9
 12855 7707 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12856 7709 69 00			adc #$00
 12857 770B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12858 770D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12859 770F 69 00			adc #$00
 12860 7711 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12861 7713 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12862 7715 69 00			adc #$00
 12863 7717 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12864 7719 A5 9F			lda :STACKORIGIN+9
 12865 771B 18 6D 05 A1			add YB
 12866 771F 8D BD 9F			sta GETBYTE.SRC
 12867 7722 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12868 7724 6D 06 A1			adc YB+1
 12869 7727 8D BE 9F			sta GETBYTE.SRC+1
 12870 772A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12871 772C 69 00			adc #$00
 12872 772E 8D BF 9F			sta GETBYTE.SRC+2
 12873 7731 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12874 7733 69 00			adc #$00
 12875 7735 8D C0 9F			sta GETBYTE.SRC+3
 12876 7738 20 68 3C			jsr GETBYTE
 12877 773B AD C1 9F			lda GETBYTE.RESULT
 12878 773E 8D 09 A1			sta CL
 12879
 12880 				; optimize OK (service.pas), line = 2467
 12881
 12882 7741 A9 80			lda #$80
 12883 7743 8D 0A A1			sta SHADOW
 12884
 12885 				; optimize OK (service.pas), line = 2472
 12886
 12887 7746 AD 08 A1			lda Y
 12888 7749 C9 10			cmp #$10
 12889 774B 90 07			jcc l_26CBx
 12890 774D AD 07 A1			lda X
 12891 7750 C9 12			cmp #$12
 12892 7752 B0 05			jcs l_26CB
 12893 7754			l_26CBx
 12894 7754 A9 00			lda #$00
 12895 7756 8D 0A A1			sta SHADOW
 12896 7759			l_26CB
 12897
 12898 				; optimize OK (service.pas), line = 2477
 12899
 12900 7759 AD 09 A1			lda CL
 12901 775C 29 7F			and #$7F
 12902 775E 0D 0A A1			ora SHADOW
 12903 7761 AC 0B A1			ldy K
 12904 7764 99 00 C2			sta adr.TMP,y
 12905
 12906 				; optimize FAIL (0, service.pas), line = 2479
 12907
 12908 7767 EE 0B A1			inc K
 12909
 12910 				; --- ForToDoEpilog
 12911 776A EE 07 A1			inc X
 12912 776D F0 03 4C D3 76		jne l_2688
 12913 7772			l_2696
 12914
 12915 				; optimize OK (service.pas), line = 2482
 12916
 12917 7772 AC 08 A1			ldy Y
 12918 7775 AD 95 9E			lda PLAYSCREEN.OFS
 12919 7778 18 79 00 C0			add adr.ROW,y
 12920 777C 85 A0			sta :STACKORIGIN+10
 12921 777E AD 96 9E			lda PLAYSCREEN.OFS+1
 12922 7781 79 00 C1			adc adr.ROW+256,y
 12923 7784 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12924 7786 AD 97 9E			lda PLAYSCREEN.OFS+2
 12925 7789 69 00			adc #$00
 12926 778B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 12927 778D AD 98 9E			lda PLAYSCREEN.OFS+3
 12928 7790 69 00			adc #$00
 12929 7792 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 12930 7794 A5 A0			lda :STACKORIGIN+10
 12931 7796 18 69 09			add #$09
 12932 7799 8D A9 9F			sta BLITTMP.DST
 12933 779C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12934 779E 69 00			adc #$00
 12935 77A0 8D AA 9F			sta BLITTMP.DST+1
 12936 77A3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12937 77A5 69 00			adc #$00
 12938 77A7 8D AB 9F			sta BLITTMP.DST+2
 12939 77AA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12940 77AC 69 00			adc #$00
 12941 77AE 8D AC 9F			sta BLITTMP.DST+3
 12942 77B1 AD 0B A1			lda K
 12943 77B4 8D AD 9F			sta BLITTMP.SIZE
 12944 77B7 20 95 3B			jsr BLITTMP
 12945
 12946 				; --- ForToDoEpilog
 12947 77BA EE 08 A1			inc Y
 12948 77BD F0 03 4C 94 76		jne l_265F
 12949 77C2			l_266D
 12950
 12951 				; ------------------------------------------------------------
 12952
 12953 = A101			PATT	= DATAORIGIN+$036C
 12954 = 9D95			PATT.WIDTH	= DATAORIGIN+$0000
 12955 = 9D97			PATT.HEIGHT	= DATAORIGIN+$0002
 12956 = 9D99			PATT.OFS	= DATAORIGIN+$0004
 12957 = A105			YB	= DATAORIGIN+$0370
 12958 = A107			X	= DATAORIGIN+$0372
 12959 = A108			Y	= DATAORIGIN+$0373
 12960 = A109			CL	= DATAORIGIN+$0374
 12961 = A10A			SHADOW	= DATAORIGIN+$0375
 12962 = A10B			K	= DATAORIGIN+$0376
 12963
 12964 = A101			@VarData	= PATT
 12965 = 0009			@VarDataSize	= 9
 12966
 12967 77C2			@exit
 12968 					.ifdef @new
 12969 					lda <@VarData
 12970 					sta :ztmp
 12971 					lda >@VarData
 12972 					ldy #@VarDataSize-1
 12973 					jmp @FreeMem
 12974 					els
 12975 77C2 60				rts						; ret
 12976 					eif
 12977 				.endl
 12978
 12979 77C3			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 12980
 12981 				; ------------------------------------------------------------
 12982
 12983 = A10C			X	= DATAORIGIN+$0377
 12984 = A10E			Y	= DATAORIGIN+$0379
 12985
 12986 = A10C			@VarData	= X
 12987 = 0004			@VarDataSize	= 4
 12988
 12989 77C3			@exit
 12990 					.ifdef @new
 12991 					lda <@VarData
 12992 					sta :ztmp
 12993 					lda >@VarData
 12994 					ldy #@VarDataSize-1
 12995 					jmp @FreeMem
 12996 					els
 12997 77C3 60				rts						; ret
 12998 					eif
 12999 				.endl
 13000
 13001 77C4			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13002
 13003 				; optimize OK (service.pas), line = 2598
 13004
 13005 77C4 AD 81 C0			lda adr.ROW+$81
 13006 77C7 18 69 48			add #$48
 13007 77CA 8D 88 9F			sta HLP
 13008 77CD AD 81 C1			lda adr.ROW+256+$81
 13009 77D0 69 00			adc #$00
 13010 77D2 8D 89 9F			sta HLP+1
 13011
 13012 				; optimize OK (service.pas), line = 2600
 13013
 13014 77D5 AD 88 9F			lda HLP
 13015 77D8 8D 97 9F			sta BLITBOX.DST
 13016 77DB A9 50			lda #$50
 13017 77DD 18 6D 89 9F			add HLP+1
 13018 77E1 8D 98 9F			sta BLITBOX.DST+1
 13019 77E4 A9 00			lda #$00
 13020 77E6 69 00			adc #$00
 13021 77E8 8D 99 9F			sta BLITBOX.DST+2
 13022 77EB A9 00			lda #$00
 13023 77ED 69 00			adc #$00
 13024 77EF 8D 9A 9F			sta BLITBOX.DST+3
 13025 77F2 AD 95 9E			lda PLAYSCREEN.OFS
 13026 77F5 18 6D 88 9F			add HLP
 13027 77F9 8D 93 9F			sta BLITBOX.SRC
 13028 77FC AD 96 9E			lda PLAYSCREEN.OFS+1
 13029 77FF 6D 89 9F			adc HLP+1
 13030 7802 8D 94 9F			sta BLITBOX.SRC+1
 13031 7805 AD 97 9E			lda PLAYSCREEN.OFS+2
 13032 7808 69 00			adc #$00
 13033 780A 8D 95 9F			sta BLITBOX.SRC+2
 13034 780D AD 98 9E			lda PLAYSCREEN.OFS+3
 13035 7810 69 00			adc #$00
 13036 7812 8D 96 9F			sta BLITBOX.SRC+3
 13037 7815 A9 58			lda #$58
 13038 7817 8D 9B 9F			sta BLITBOX.W
 13039 781A A9 00			lda #$00
 13040 781C 8D 9C 9F			sta BLITBOX.W+1
 13041 781F A9 1F			lda #$1F
 13042 7821 8D 9D 9F			sta BLITBOX.H
 13043 7824 20 96 3A			jsr BLITBOX
 13044
 13045 7827			@exit
 13046 					.ifdef @new
 13047 					lda <@VarData
 13048 					sta :ztmp
 13049 					lda >@VarData
 13050 					ldy #@VarDataSize-1
 13051 					jmp @FreeMem
 13052 					els
 13053 7827 60				rts						; ret
 13054 					eif
 13055 				.endl
 13056
 13057 7828			.local	GAME_OVER					; PROCEDURE
 13058
 13059 				; ------------------------------------------------------------
 13060
 13061 = A110			X	= DATAORIGIN+$037B
 13062 = A112			Y	= DATAORIGIN+$037D
 13063 = A114			adr.SC	= [DATAORIGIN+$037F] .array [21]
 13064 7828			.var SC	= adr.SC .word
 13065
 13066 = A110			@VarData	= X
 13067 = 0019			@VarDataSize	= 25
 13068
 13069 7828			@exit
 13070 					.ifdef @new
 13071 					lda <@VarData
 13072 					sta :ztmp
 13073 					lda >@VarData
 13074 					ldy #@VarDataSize-1
 13075 					jmp @FreeMem
 13076 					els
 13077 7828 60				rts						; ret
 13078 					eif
 13079 = 7829 14 A1		SC
 13079 				.endl
 13080
 13081 782B			.local	DESTROY_VAUS					; PROCEDURE
 13082
 13083 				; optimize OK (service.pas), line = 2654
 13084
 13085 782B AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13086
 13087 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2655
 13088
 13089 785B 20 9C 51			jsr MODIFY_VAUS
 13090
 13091 				; optimize OK (service.pas), line = 2657
 13092
 13093 785E AD 09 9F			lda VAUS.X
 13094 7861 8D 6F A0			sta MOVE_VAUS.X
 13095 7864 A9 00			lda #$00
 13096 7866 8D 70 A0			sta MOVE_VAUS.X+1
 13097 7869 AD 0A 9F			lda VAUS.Y
 13098 786C 8D 71 A0			sta MOVE_VAUS.Y
 13099 786F A9 00			lda #$00
 13100 7871 8D 72 A0			sta MOVE_VAUS.Y+1
 13101 7874 20 E7 53			jsr MOVE_VAUS
 13102
 13103 				; optimize OK (service.pas), line = 2659
 13104
 13105 7877 AD 09 9F			lda VAUS.X
 13106 787A 38 E9 04			sub #$04
 13107 787D 8D 2B A1			sta A
 13108 7880 A9 00			lda #$00
 13109 7882 E9 00			sbc #$00
 13110 7884 8D 2C A1			sta A+1
 13111
 13112 				; optimize OK (service.pas), line = 2660
 13113
 13114 7887 AD 0A 9F			lda VAUS.Y
 13115 788A 38 E9 05			sub #$05
 13116 788D 8D 2D A1			sta B
 13117 7890 A9 00			lda #$00
 13118 7892 E9 00			sbc #$00
 13119 7894 8D 2E A1			sta B+1
 13120
 13121 				; optimize OK (service.pas), line = 2663
 13122
 13123 7897 A9 00			lda #$00
 13124 7899 8D 2F A1			sta W
 13125
 13126 789C			l_2758
 13127 				; --- ForToDoCondition
 13128 789C AD 2F A1			lda W
 13129 789F C9 07			cmp #$07
 13130 78A1 90 03 4C 89 7A		jcs l_2766
 13131
 13132 				; optimize OK (service.pas), line = 2665
 13133
 13134 78A6 A9 00			lda #$00
 13135 78A8 8D 31 A1			sta Y
 13136
 13137 78AB			l_276F
 13138 				; --- ForToDoCondition
 13139 78AB AD 31 A1			lda Y
 13140 78AE C9 10			cmp #$10
 13141 78B0 90 03 4C 73 7A		jcs l_277D
 13142
 13143 				; optimize OK (service.pas), line = 2668
 13144
 13145 78B5 AD B9 9E			lda EXPLOSION.WIDTH
 13146 78B8 85 8E			sta :ecx
 13147 78BA AD BA 9E			lda EXPLOSION.WIDTH+1
 13148 78BD 85 8F			sta :ecx+1
 13149 78BF AD 31 A1			lda Y
 13150 78C2 85 86			sta :eax
 13151 78C4 A9 00			lda #$00
 13152 78C6 85 87			sta :eax+1
 13153 					.ifdef fmulinit
 13154 					fmulu_16
 13155 					els
 13156 78C8 20 7F 23			imulCX_AL
 13157 					eif
 13158 78CB A5 86			lda :eax
 13159 78CD 85 9F			sta :STACKORIGIN+9
 13160 78CF A5 87			lda :eax+1
 13161 78D1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13162 78D3 AD B9 9E			lda EXPLOSION.WIDTH
 13163 78D6 85 A1			sta :STACKORIGIN+11
 13164 78D8 AD BA 9E			lda EXPLOSION.WIDTH+1
 13165 78DB 06 A1			asl :STACKORIGIN+11
 13166 78DD 2A				rol @
 13167 78DE 06 A1			asl :STACKORIGIN+11
 13168 78E0 2A				rol @
 13169 78E1 06 A1			asl :STACKORIGIN+11
 13170 78E3 2A				rol @
 13171 78E4 06 A1			asl :STACKORIGIN+11
 13172 78E6 2A				rol @
 13173 78E7 85 8F			sta :ecx+1
 13174 78E9 A5 A1			lda :STACKORIGIN+11
 13175 78EB 85 8E			sta :ecx
 13176 78ED AD 2F A1			lda W
 13177 78F0 85 86			sta :eax
 13178 78F2 A9 00			lda #$00
 13179 78F4 85 87			sta :eax+1
 13180 					.ifdef fmulinit
 13181 					fmulu_16
 13182 					els
 13183 78F6 20 3B 23			imulCX
 13184 					eif
 13185 78F9 A5 86			lda :eax
 13186 78FB 18 65 9F			add :STACKORIGIN+9
 13187 78FE 8D 29 A1			sta Z
 13188 7901 A5 87			lda :eax+1
 13189 7903 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13190 7905 8D 2A A1			sta Z+1
 13191
 13192 				; optimize OK (service.pas), line = 2670
 13193
 13194 7908 AD 31 A1			lda Y
 13195 790B 18 6D 2D A1			add B
 13196 790F A8				tay
 13197 7910 AD 2B A1			lda A
 13198 7913 18 79 00 C0			add adr.ROW,y
 13199 7917 8D 88 9F			sta HLP
 13200 791A AD 2C A1			lda A+1
 13201 791D 79 00 C1			adc adr.ROW+256,y
 13202 7920 8D 89 9F			sta HLP+1
 13203
 13204 				; optimize OK (service.pas), line = 2672
 13205
 13206 7923 A9 00			lda #$00
 13207 7925 8D 30 A1			sta X
 13208 7928 AC B9 9E			ldy EXPLOSION.WIDTH
 13209 792B 88				dey
 13210 792C 8C 30 79			sty @FORTMP_27B4_0
 13211
 13212 792F			l_27B7
 13213 				; --- ForToDoCondition
 13214 792F A9 00			lda @FORTMP_27B4_0::#$00
 13215 7931 CD 30 A1			cmp X
 13216 7934 B0 03 4C 45 7A		jcc l_27C5
 13217
 13218 				; optimize FAIL (1, service.pas), line = 2676
 13219
 13220 7939 E8				inx
 13221 793A A0 01			ldy #1
 13222 793C AD 2F A1			lda W
 13223 793F C9 06			cmp #$06
 13224 7941 F0 01			beq @+
 13225 7943 88				dey
 13226 				@
 13227 7944 94 96			sty :STACKORIGIN,x
 13228 7946 AD BD 9E			lda EXPLOSION.OFS
 13229 7949 18 6D 30 A1			add X
 13230 794D 85 9F			sta :STACKORIGIN+9
 13231 794F AD BE 9E			lda EXPLOSION.OFS+1
 13232 7952 69 00			adc #$00
 13233 7954 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13234 7956 AD BF 9E			lda EXPLOSION.OFS+2
 13235 7959 69 00			adc #$00
 13236 795B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13237 795D AD C0 9E			lda EXPLOSION.OFS+3
 13238 7960 69 00			adc #$00
 13239 7962 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13240 7964 A5 9F			lda :STACKORIGIN+9
 13241 7966 18 6D 29 A1			add Z
 13242 796A 8D BD 9F			sta GETBYTE.SRC
 13243 796D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13244 796F 6D 2A A1			adc Z+1
 13245 7972 8D BE 9F			sta GETBYTE.SRC+1
 13246 7975 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13247 7977 69 00			adc #$00
 13248 7979 8D BF 9F			sta GETBYTE.SRC+2
 13249 797C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13250 797E 69 00			adc #$00
 13251 7980 8D C0 9F			sta GETBYTE.SRC+3
 13252 7983 20 68 3C			jsr GETBYTE
 13253 7986 CA				dex
 13254 7987 A0 01			ldy #1
 13255 7989 AD C1 9F			lda GETBYTE.RESULT
 13256 798C F0 01			beq @+
 13257 798E 88				dey
 13258 				@
 13259 798F 98				tya
 13260 7990 15 97			ora :STACKORIGIN+1,x
 13261 7992 F0 56			jeq l_27ED
 13262
 13263 				; optimize FAIL (1, service.pas), line = 2680
 13264
 13265 7994 E8				inx
 13266 7995 AD 30 A1 95 96		mva X :STACKORIGIN,x
 13267 799A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13268 799E AD 95 9E			lda PLAYSCREEN.OFS
 13269 79A1 18 6D 88 9F			add HLP
 13270 79A5 85 9F			sta :STACKORIGIN+9
 13271 79A7 AD 96 9E			lda PLAYSCREEN.OFS+1
 13272 79AA 6D 89 9F			adc HLP+1
 13273 79AD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13274 79AF AD 97 9E			lda PLAYSCREEN.OFS+2
 13275 79B2 69 00			adc #$00
 13276 79B4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13277 79B6 AD 98 9E			lda PLAYSCREEN.OFS+3
 13278 79B9 69 00			adc #$00
 13279 79BB 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13280 79BD A5 9F			lda :STACKORIGIN+9
 13281 79BF 18 6D 30 A1			add X
 13282 79C3 8D BD 9F			sta GETBYTE.SRC
 13283 79C6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13284 79C8 69 00			adc #$00
 13285 79CA 8D BE 9F			sta GETBYTE.SRC+1
 13286 79CD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13287 79CF 69 00			adc #$00
 13288 79D1 8D BF 9F			sta GETBYTE.SRC+2
 13289 79D4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13290 79D6 69 00			adc #$00
 13291 79D8 8D C0 9F			sta GETBYTE.SRC+3
 13292 79DB 20 68 3C			jsr GETBYTE
 13293 79DE B4 96			ldy :STACKORIGIN,x
 13294 79E0 AD C1 9F			lda GETBYTE.RESULT
 13295 79E3 99 00 C2			sta adr.TMP,y
 13296 79E6 CA				dex
 13297 79E7 4C 3D 7A			jmp l_280A
 13298 79EA			l_27ED
 13299
 13300 				; optimize FAIL (1, service.pas), line = 2685
 13301
 13302 79EA E8				inx
 13303 79EB AD 30 A1 95 96		mva X :STACKORIGIN,x
 13304 79F0 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13305 79F4 AD BD 9E			lda EXPLOSION.OFS
 13306 79F7 18 6D 30 A1			add X
 13307 79FB 85 9F			sta :STACKORIGIN+9
 13308 79FD AD BE 9E			lda EXPLOSION.OFS+1
 13309 7A00 69 00			adc #$00
 13310 7A02 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13311 7A04 AD BF 9E			lda EXPLOSION.OFS+2
 13312 7A07 69 00			adc #$00
 13313 7A09 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13314 7A0B AD C0 9E			lda EXPLOSION.OFS+3
 13315 7A0E 69 00			adc #$00
 13316 7A10 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13317 7A12 A5 9F			lda :STACKORIGIN+9
 13318 7A14 18 6D 29 A1			add Z
 13319 7A18 8D BD 9F			sta GETBYTE.SRC
 13320 7A1B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13321 7A1D 6D 2A A1			adc Z+1
 13322 7A20 8D BE 9F			sta GETBYTE.SRC+1
 13323 7A23 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13324 7A25 69 00			adc #$00
 13325 7A27 8D BF 9F			sta GETBYTE.SRC+2
 13326 7A2A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13327 7A2C 69 00			adc #$00
 13328 7A2E 8D C0 9F			sta GETBYTE.SRC+3
 13329 7A31 20 68 3C			jsr GETBYTE
 13330 7A34 B4 96			ldy :STACKORIGIN,x
 13331 7A36 AD C1 9F			lda GETBYTE.RESULT
 13332 7A39 99 00 C2			sta adr.TMP,y
 13333 7A3C CA				dex
 13334 7A3D			l_280A
 13335
 13336 				; --- ForToDoEpilog
 13337 7A3D EE 30 A1			inc X
 13338 7A40 F0 03 4C 2F 79		jne l_27B7
 13339 7A45			l_27C5
 13340
 13341 				; optimize OK (service.pas), line = 2688
 13342
 13343 7A45 AD 88 9F			lda HLP
 13344 7A48 8D A9 9F			sta BLITTMP.DST
 13345 7A4B A9 50			lda #$50
 13346 7A4D 18 6D 89 9F			add HLP+1
 13347 7A51 8D AA 9F			sta BLITTMP.DST+1
 13348 7A54 A9 00			lda #$00
 13349 7A56 69 00			adc #$00
 13350 7A58 8D AB 9F			sta BLITTMP.DST+2
 13351 7A5B A9 00			lda #$00
 13352 7A5D 69 00			adc #$00
 13353 7A5F 8D AC 9F			sta BLITTMP.DST+3
 13354 7A62 AD B9 9E			lda EXPLOSION.WIDTH
 13355 7A65 8D AD 9F			sta BLITTMP.SIZE
 13356 7A68 20 95 3B			jsr BLITTMP
 13357
 13358 				; --- ForToDoEpilog
 13359 7A6B EE 31 A1			inc Y
 13360 7A6E F0 03 4C AB 78		jne l_276F
 13361 7A73			l_277D
 13362
 13363 				; optimize OK (service.pas), line = 2691
 13364
 13365 7A73 AD 2F A1			lda W
 13366 7A76 8D 6D 9E			sta DEATH_SOUND.A
 13367 7A79 A9 00			lda #$00
 13368 7A7B 8D 6E 9E			sta DEATH_SOUND.A+1
 13369 7A7E 20 7C 38			jsr DEATH_SOUND
 13370
 13371 				; --- ForToDoEpilog
 13372 7A81 EE 2F A1			inc W
 13373 7A84 F0 03 4C 9C 78		jne l_2758
 13374 7A89			l_2766
 13375
 13376 				; optimize OK (service.pas), line = 2695
 13377
 13378 7A89 A9 07			lda #$07
 13379 7A8B 8D 6D 9E			sta DEATH_SOUND.A
 13380 7A8E A9 00			lda #$00
 13381 7A90 8D 6E 9E			sta DEATH_SOUND.A+1
 13382 7A93 20 7C 38			jsr DEATH_SOUND
 13383
 13384 				; optimize OK (service.pas), line = 2696
 13385
 13386 7A96 A9 96			lda #$96
 13387 7A98 8D C2 9F			sta MYDELAY.A
 13388 7A9B A9 00			lda #$00
 13389 7A9D 8D C3 9F			sta MYDELAY.A+1
 13390 7AA0 20 91 3C			jsr MYDELAY
 13391
 13392 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2697
 13393
 13394 7AA3 20 60 41			jsr DISABLE_LETTER
 13395
 13396 				; ------------------------------------------------------------
 13397
 13398 = A129			Z	= DATAORIGIN+$0394
 13399 = A12B			A	= DATAORIGIN+$0396
 13400 = A12D			B	= DATAORIGIN+$0398
 13401 = A12F			W	= DATAORIGIN+$039A
 13402 = A130			X	= DATAORIGIN+$039B
 13403 = A131			Y	= DATAORIGIN+$039C
 13404
 13405 = A129			@VarData	= Z
 13406 = 0009			@VarDataSize	= 9
 13407
 13408 7AA6			@exit
 13409 					.ifdef @new
 13410 					lda <@VarData
 13411 					sta :ztmp
 13412 					lda >@VarData
 13413 					ldy #@VarDataSize-1
 13414 					jmp @FreeMem
 13415 					els
 13416 7AA6 60				rts						; ret
 13417 					eif
 13418 				.endl
 13419
 13420 7AA7			.local	CREATE_VAUS					; PROCEDURE
 13421
 13422 				; optimize FAIL ('NOSOUND', service.pas), line = 2709
 13423
 13424 7AA7 20 90 3C			jsr NOSOUND
 13425
 13426 				; optimize OK (service.pas), line = 2710
 13427
 13428 7AAA A9 5B			lda #$5B
 13429 7AAC 8D 38 A1			sta A
 13430 7AAF A9 00			lda #$00
 13431 7AB1 8D 39 A1			sta A+1
 13432
 13433 				; optimize OK (service.pas), line = 2711
 13434
 13435 7AB4 A9 B3			lda #$B3
 13436 7AB6 8D 3A A1			sta B
 13437 7AB9 A9 00			lda #$00
 13438 7ABB 8D 3B A1			sta B+1
 13439
 13440 				; optimize OK (service.pas), line = 2713
 13441
 13442 7ABE A9 0B			lda #$0B
 13443 7AC0 8D 35 A1			sta W
 13444
 13445 7AC3			l_2854
 13446 				; --- ForToDoCondition
 13447 7AC3 A9 00			lda #$00
 13448 7AC5 8D 34 A1			sta Y
 13449
 13450 7AC8			l_286B
 13451 				; --- ForToDoCondition
 13452 7AC8 AD 34 A1			lda Y
 13453 7ACB C9 10			cmp #$10
 13454 7ACD 90 03 4C 7D 7C		jcs l_2879
 13455
 13456 				; optimize OK (service.pas), line = 2718
 13457
 13458 7AD2 AD C1 9E			lda NEWVAUS.WIDTH
 13459 7AD5 85 8E			sta :ecx
 13460 7AD7 AD C2 9E			lda NEWVAUS.WIDTH+1
 13461 7ADA 85 8F			sta :ecx+1
 13462 7ADC AD 34 A1			lda Y
 13463 7ADF 85 86			sta :eax
 13464 7AE1 A9 00			lda #$00
 13465 7AE3 85 87			sta :eax+1
 13466 					.ifdef fmulinit
 13467 					fmulu_16
 13468 					els
 13469 7AE5 20 7F 23			imulCX_AL
 13470 					eif
 13471 7AE8 A5 86			lda :eax
 13472 7AEA 85 9F			sta :STACKORIGIN+9
 13473 7AEC A5 87			lda :eax+1
 13474 7AEE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13475 7AF0 A9 10			lda #$10
 13476 7AF2 85 8E			sta :ecx
 13477 7AF4 A9 00			lda #$00
 13478 7AF6 85 8F			sta :ecx+1
 13479 7AF8 AD C1 9E			lda NEWVAUS.WIDTH
 13480 7AFB 85 86			sta :eax
 13481 7AFD AD C2 9E			lda NEWVAUS.WIDTH+1
 13482 7B00 85 87			sta :eax+1
 13483 					.ifdef fmulinit
 13484 					fmulu_16
 13485 					els
 13486 7B02 20 3B 23			imulCX
 13487 					eif
 13488 7B05 A5 86			lda :eax
 13489 7B07 85 8E			sta :ecx
 13490 7B09 A5 87			lda :eax+1
 13491 7B0B 85 8F			sta :ecx+1
 13492 7B0D AD 35 A1			lda W
 13493 7B10 85 86			sta :eax
 13494 7B12 A9 00			lda #$00
 13495 7B14 85 87			sta :eax+1
 13496 					.ifdef fmulinit
 13497 					fmulu_16
 13498 					els
 13499 7B16 20 7F 23			imulCX_AL
 13500 					eif
 13501 7B19 A5 86			lda :eax
 13502 7B1B 18 65 9F			add :STACKORIGIN+9
 13503 7B1E 8D 36 A1			sta Z
 13504 7B21 A5 87			lda :eax+1
 13505 7B23 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13506 7B25 8D 37 A1			sta Z+1
 13507
 13508 				; optimize OK (service.pas), line = 2720
 13509
 13510 7B28 AD 34 A1			lda Y
 13511 7B2B 18 6D 3A A1			add B
 13512 7B2F A8				tay
 13513 7B30 AD 38 A1			lda A
 13514 7B33 18 79 00 C0			add adr.ROW,y
 13515 7B37 8D 88 9F			sta HLP
 13516 7B3A AD 39 A1			lda A+1
 13517 7B3D 79 00 C1			adc adr.ROW+256,y
 13518 7B40 8D 89 9F			sta HLP+1
 13519
 13520 				; optimize OK (service.pas), line = 2722
 13521
 13522 7B43 A9 00			lda #$00
 13523 7B45 8D 33 A1			sta X
 13524 7B48 AC C1 9E			ldy NEWVAUS.WIDTH
 13525 7B4B 88				dey
 13526 7B4C 8C 50 7B			sty @FORTMP_28B0_0
 13527
 13528 7B4F			l_28B3
 13529 				; --- ForToDoCondition
 13530 7B4F A9 00			lda @FORTMP_28B0_0::#$00
 13531 7B51 CD 33 A1			cmp X
 13532 7B54 B0 03 4C 4F 7C		jcc l_28C1
 13533
 13534 				; optimize OK (service.pas), line = 2724
 13535
 13536 7B59 AD C5 9E			lda NEWVAUS.OFS
 13537 7B5C 18 6D 33 A1			add X
 13538 7B60 85 9F			sta :STACKORIGIN+9
 13539 7B62 AD C6 9E			lda NEWVAUS.OFS+1
 13540 7B65 69 00			adc #$00
 13541 7B67 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13542 7B69 AD C7 9E			lda NEWVAUS.OFS+2
 13543 7B6C 69 00			adc #$00
 13544 7B6E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13545 7B70 AD C8 9E			lda NEWVAUS.OFS+3
 13546 7B73 69 00			adc #$00
 13547 7B75 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13548 7B77 A5 9F			lda :STACKORIGIN+9
 13549 7B79 18 6D 36 A1			add Z
 13550 7B7D 8D BD 9F			sta GETBYTE.SRC
 13551 7B80 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13552 7B82 6D 37 A1			adc Z+1
 13553 7B85 8D BE 9F			sta GETBYTE.SRC+1
 13554 7B88 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13555 7B8A 69 00			adc #$00
 13556 7B8C 8D BF 9F			sta GETBYTE.SRC+2
 13557 7B8F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13558 7B91 69 00			adc #$00
 13559 7B93 8D C0 9F			sta GETBYTE.SRC+3
 13560 7B96 20 68 3C			jsr GETBYTE
 13561 7B99 AD C1 9F			lda GETBYTE.RESULT
 13562 7B9C D0 56			jne l_28DD
 13563
 13564 				; optimize FAIL (1, service.pas), line = 2728
 13565
 13566 7B9E E8				inx
 13567 7B9F AD 33 A1 95 96		mva X :STACKORIGIN,x
 13568 7BA4 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13569 7BA8 AD 95 9E			lda PLAYSCREEN.OFS
 13570 7BAB 18 6D 88 9F			add HLP
 13571 7BAF 85 9F			sta :STACKORIGIN+9
 13572 7BB1 AD 96 9E			lda PLAYSCREEN.OFS+1
 13573 7BB4 6D 89 9F			adc HLP+1
 13574 7BB7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13575 7BB9 AD 97 9E			lda PLAYSCREEN.OFS+2
 13576 7BBC 69 00			adc #$00
 13577 7BBE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13578 7BC0 AD 98 9E			lda PLAYSCREEN.OFS+3
 13579 7BC3 69 00			adc #$00
 13580 7BC5 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13581 7BC7 A5 9F			lda :STACKORIGIN+9
 13582 7BC9 18 6D 33 A1			add X
 13583 7BCD 8D BD 9F			sta GETBYTE.SRC
 13584 7BD0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13585 7BD2 69 00			adc #$00
 13586 7BD4 8D BE 9F			sta GETBYTE.SRC+1
 13587 7BD7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13588 7BD9 69 00			adc #$00
 13589 7BDB 8D BF 9F			sta GETBYTE.SRC+2
 13590 7BDE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13591 7BE0 69 00			adc #$00
 13592 7BE2 8D C0 9F			sta GETBYTE.SRC+3
 13593 7BE5 20 68 3C			jsr GETBYTE
 13594 7BE8 B4 96			ldy :STACKORIGIN,x
 13595 7BEA AD C1 9F			lda GETBYTE.RESULT
 13596 7BED 99 00 C2			sta adr.TMP,y
 13597 7BF0 CA				dex
 13598 7BF1 4C 47 7C			jmp l_28FA
 13599 7BF4			l_28DD
 13600
 13601 				; optimize FAIL (1, service.pas), line = 2733
 13602
 13603 7BF4 E8				inx
 13604 7BF5 AD 33 A1 95 96		mva X :STACKORIGIN,x
 13605 7BFA A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13606 7BFE AD C5 9E			lda NEWVAUS.OFS
 13607 7C01 18 6D 33 A1			add X
 13608 7C05 85 9F			sta :STACKORIGIN+9
 13609 7C07 AD C6 9E			lda NEWVAUS.OFS+1
 13610 7C0A 69 00			adc #$00
 13611 7C0C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13612 7C0E AD C7 9E			lda NEWVAUS.OFS+2
 13613 7C11 69 00			adc #$00
 13614 7C13 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13615 7C15 AD C8 9E			lda NEWVAUS.OFS+3
 13616 7C18 69 00			adc #$00
 13617 7C1A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13618 7C1C A5 9F			lda :STACKORIGIN+9
 13619 7C1E 18 6D 36 A1			add Z
 13620 7C22 8D BD 9F			sta GETBYTE.SRC
 13621 7C25 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13622 7C27 6D 37 A1			adc Z+1
 13623 7C2A 8D BE 9F			sta GETBYTE.SRC+1
 13624 7C2D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13625 7C2F 69 00			adc #$00
 13626 7C31 8D BF 9F			sta GETBYTE.SRC+2
 13627 7C34 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13628 7C36 69 00			adc #$00
 13629 7C38 8D C0 9F			sta GETBYTE.SRC+3
 13630 7C3B 20 68 3C			jsr GETBYTE
 13631 7C3E B4 96			ldy :STACKORIGIN,x
 13632 7C40 AD C1 9F			lda GETBYTE.RESULT
 13633 7C43 99 00 C2			sta adr.TMP,y
 13634 7C46 CA				dex
 13635 7C47			l_28FA
 13636
 13637 				; --- ForToDoEpilog
 13638 7C47 EE 33 A1			inc X
 13639 7C4A F0 03 4C 4F 7B		jne l_28B3
 13640 7C4F			l_28C1
 13641
 13642 				; optimize OK (service.pas), line = 2736
 13643
 13644 7C4F AD 88 9F			lda HLP
 13645 7C52 8D A9 9F			sta BLITTMP.DST
 13646 7C55 A9 50			lda #$50
 13647 7C57 18 6D 89 9F			add HLP+1
 13648 7C5B 8D AA 9F			sta BLITTMP.DST+1
 13649 7C5E A9 00			lda #$00
 13650 7C60 69 00			adc #$00
 13651 7C62 8D AB 9F			sta BLITTMP.DST+2
 13652 7C65 A9 00			lda #$00
 13653 7C67 69 00			adc #$00
 13654 7C69 8D AC 9F			sta BLITTMP.DST+3
 13655 7C6C AD C1 9E			lda NEWVAUS.WIDTH
 13656 7C6F 8D AD 9F			sta BLITTMP.SIZE
 13657 7C72 20 95 3B			jsr BLITTMP
 13658
 13659 				; --- ForToDoEpilog
 13660 7C75 EE 34 A1			inc Y
 13661 7C78 F0 03 4C C8 7A		jne l_286B
 13662 7C7D			l_2879
 13663
 13664 				; optimize OK (service.pas), line = 2739
 13665
 13666 7C7D A9 01			lda #$01
 13667 7C7F 8D C2 9F			sta MYDELAY.A
 13668 7C82 A9 00			lda #$00
 13669 7C84 8D C3 9F			sta MYDELAY.A+1
 13670 7C87 20 91 3C			jsr MYDELAY
 13671
 13672 				; --- ForToDoEpilog
 13673 7C8A CE 35 A1			dec W
 13674 7C8D 30 03 4C C3 7A		jpl l_2854
 13675 7C92			l_2862
 13676
 13677 				; ------------------------------------------------------------
 13678
 13679 = A133			X	= DATAORIGIN+$039E
 13680 = A134			Y	= DATAORIGIN+$039F
 13681 = A135			W	= DATAORIGIN+$03A0
 13682 = A136			Z	= DATAORIGIN+$03A1
 13683 = A138			A	= DATAORIGIN+$03A3
 13684 = A13A			B	= DATAORIGIN+$03A5
 13685
 13686 = A133			@VarData	= X
 13687 = 0009			@VarDataSize	= 9
 13688
 13689 7C92			@exit
 13690 					.ifdef @new
 13691 					lda <@VarData
 13692 					sta :ztmp
 13693 					lda >@VarData
 13694 					ldy #@VarDataSize-1
 13695 					jmp @FreeMem
 13696 					els
 13697 7C92 60				rts						; ret
 13698 					eif
 13699 				.endl
 13700
 13701 7C93			.local	PUT_DIGIT					; PROCEDURE
 13702
 13703 				; optimize OK (service.pas), line = 2749
 13704
 13705 7C93 A9 DE			lda #$DE
 13706 7C95 8D 45 A1			sta A
 13707
 13708 				; optimize OK (service.pas), line = 2773
 13709
 13710 7C98 AC 41 A1			ldy NUM
 13711 7C9B B9 C6 20			lda adr.DIGITS,y
 13712 7C9E 29 01			and #$01
 13713 7CA0 C9 01			cmp #$01
 13714 7CA2 D0 05			jne l_2947
 13715 7CA4 A9 DF			lda #$DF
 13716 7CA6 8D 45 A1			sta A
 13717 7CA9			l_2947
 13718
 13719 				; optimize OK (service.pas), line = 2774
 13720
 13721 7CA9 A9 01			lda #$01
 13722 7CAB 8D 43 A1			sta X
 13723
 13724 7CAE			l_2957
 13725 				; --- ForToDoCondition
 13726 7CAE AD 43 A1			lda X
 13727 7CB1 C9 05			cmp #$05
 13728 7CB3 B0 63			jcs l_2965
 13729
 13730 				; optimize OK (service.pas), line = 2776
 13731
 13732 7CB5 AD 3D A1			lda PX
 13733 7CB8 85 A0			sta :STACKORIGIN+10
 13734 7CBA A9 50			lda #$50
 13735 7CBC 18 6D 3E A1			add PX+1
 13736 7CC0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13737 7CC2 A9 00			lda #$00
 13738 7CC4 69 00			adc #$00
 13739 7CC6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13740 7CC8 A9 00			lda #$00
 13741 7CCA 69 00			adc #$00
 13742 7CCC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13743 7CCE A5 A0			lda :STACKORIGIN+10
 13744 7CD0 18 6D 43 A1			add X
 13745 7CD4 85 A0			sta :STACKORIGIN+10
 13746 7CD6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13747 7CD8 69 00			adc #$00
 13748 7CDA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13749 7CDC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13750 7CDE 69 00			adc #$00
 13751 7CE0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13752 7CE2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13753 7CE4 69 00			adc #$00
 13754 7CE6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13755 7CE8 AC 3F A1			ldy PY
 13756 7CEB A5 A0			lda :STACKORIGIN+10
 13757 7CED 18 79 00 C0			add adr.ROW,y
 13758 7CF1 8D B8 9F			sta PUTBYTE.DST
 13759 7CF4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13760 7CF6 79 00 C1			adc adr.ROW+256,y
 13761 7CF9 8D B9 9F			sta PUTBYTE.DST+1
 13762 7CFC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13763 7CFE 69 00			adc #$00
 13764 7D00 8D BA 9F			sta PUTBYTE.DST+2
 13765 7D03 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13766 7D05 69 00			adc #$00
 13767 7D07 8D BB 9F			sta PUTBYTE.DST+3
 13768 7D0A AD 45 A1			lda A
 13769 7D0D 8D BC 9F			sta PUTBYTE.V
 13770 7D10 20 40 3C			jsr PUTBYTE
 13771
 13772 				; --- ForToDoEpilog
 13773 7D13 EE 43 A1			inc X
 13774 7D16 D0 96			jne l_2957
 13775 7D18			l_2965
 13776
 13777 				; optimize OK (service.pas), line = 2780
 13778
 13779 7D18 A9 DE			lda #$DE
 13780 7D1A 8D 45 A1			sta A
 13781
 13782 				; optimize OK (service.pas), line = 2781
 13783
 13784 7D1D AC 41 A1			ldy NUM
 13785 7D20 B9 C6 20			lda adr.DIGITS,y
 13786 7D23 29 02			and #$02
 13787 7D25 C9 02			cmp #$02
 13788 7D27 D0 05			jne l_299D
 13789 7D29 A9 DF			lda #$DF
 13790 7D2B 8D 45 A1			sta A
 13791 7D2E			l_299D
 13792
 13793 				; optimize OK (service.pas), line = 2782
 13794
 13795 7D2E A9 01			lda #$01
 13796 7D30 8D 43 A1			sta X
 13797
 13798 7D33			l_29AD
 13799 				; --- ForToDoCondition
 13800 7D33 AD 43 A1			lda X
 13801 7D36 C9 05			cmp #$05
 13802 7D38 B0 63			jcs l_29BB
 13803
 13804 				; optimize OK (service.pas), line = 2784
 13805
 13806 7D3A AD 3D A1			lda PX
 13807 7D3D 85 A0			sta :STACKORIGIN+10
 13808 7D3F A9 50			lda #$50
 13809 7D41 18 6D 3E A1			add PX+1
 13810 7D45 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13811 7D47 A9 00			lda #$00
 13812 7D49 69 00			adc #$00
 13813 7D4B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13814 7D4D A9 00			lda #$00
 13815 7D4F 69 00			adc #$00
 13816 7D51 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13817 7D53 A5 A0			lda :STACKORIGIN+10
 13818 7D55 18 6D 43 A1			add X
 13819 7D59 85 A0			sta :STACKORIGIN+10
 13820 7D5B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13821 7D5D 69 00			adc #$00
 13822 7D5F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13823 7D61 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13824 7D63 69 00			adc #$00
 13825 7D65 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13826 7D67 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13827 7D69 69 00			adc #$00
 13828 7D6B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13829 7D6D AC 3F A1			ldy PY
 13830 7D70 A5 A0			lda :STACKORIGIN+10
 13831 7D72 18 79 05 C0			add adr.ROW+$05,y
 13832 7D76 8D B8 9F			sta PUTBYTE.DST
 13833 7D79 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13834 7D7B 79 05 C1			adc adr.ROW+256+$05,y
 13835 7D7E 8D B9 9F			sta PUTBYTE.DST+1
 13836 7D81 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13837 7D83 69 00			adc #$00
 13838 7D85 8D BA 9F			sta PUTBYTE.DST+2
 13839 7D88 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13840 7D8A 69 00			adc #$00
 13841 7D8C 8D BB 9F			sta PUTBYTE.DST+3
 13842 7D8F AD 45 A1			lda A
 13843 7D92 8D BC 9F			sta PUTBYTE.V
 13844 7D95 20 40 3C			jsr PUTBYTE
 13845
 13846 				; --- ForToDoEpilog
 13847 7D98 EE 43 A1			inc X
 13848 7D9B D0 96			jne l_29AD
 13849 7D9D			l_29BB
 13850
 13851 				; optimize OK (service.pas), line = 2788
 13852
 13853 7D9D A9 DE			lda #$DE
 13854 7D9F 8D 45 A1			sta A
 13855
 13856 				; optimize OK (service.pas), line = 2789
 13857
 13858 7DA2 AC 41 A1			ldy NUM
 13859 7DA5 B9 C6 20			lda adr.DIGITS,y
 13860 7DA8 29 04			and #$04
 13861 7DAA C9 04			cmp #$04
 13862 7DAC D0 05			jne l_29F7
 13863 7DAE A9 DF			lda #$DF
 13864 7DB0 8D 45 A1			sta A
 13865 7DB3			l_29F7
 13866
 13867 				; optimize OK (service.pas), line = 2790
 13868
 13869 7DB3 A9 01			lda #$01
 13870 7DB5 8D 43 A1			sta X
 13871
 13872 7DB8			l_2A07
 13873 				; --- ForToDoCondition
 13874 7DB8 AD 43 A1			lda X
 13875 7DBB C9 05			cmp #$05
 13876 7DBD B0 63			jcs l_2A15
 13877
 13878 				; optimize OK (service.pas), line = 2792
 13879
 13880 7DBF AD 3D A1			lda PX
 13881 7DC2 85 A0			sta :STACKORIGIN+10
 13882 7DC4 A9 50			lda #$50
 13883 7DC6 18 6D 3E A1			add PX+1
 13884 7DCA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13885 7DCC A9 00			lda #$00
 13886 7DCE 69 00			adc #$00
 13887 7DD0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13888 7DD2 A9 00			lda #$00
 13889 7DD4 69 00			adc #$00
 13890 7DD6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13891 7DD8 A5 A0			lda :STACKORIGIN+10
 13892 7DDA 18 6D 43 A1			add X
 13893 7DDE 85 A0			sta :STACKORIGIN+10
 13894 7DE0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13895 7DE2 69 00			adc #$00
 13896 7DE4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13897 7DE6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13898 7DE8 69 00			adc #$00
 13899 7DEA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13900 7DEC A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13901 7DEE 69 00			adc #$00
 13902 7DF0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13903 7DF2 AC 3F A1			ldy PY
 13904 7DF5 A5 A0			lda :STACKORIGIN+10
 13905 7DF7 18 79 0A C0			add adr.ROW+$0A,y
 13906 7DFB 8D B8 9F			sta PUTBYTE.DST
 13907 7DFE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13908 7E00 79 0A C1			adc adr.ROW+256+$0A,y
 13909 7E03 8D B9 9F			sta PUTBYTE.DST+1
 13910 7E06 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13911 7E08 69 00			adc #$00
 13912 7E0A 8D BA 9F			sta PUTBYTE.DST+2
 13913 7E0D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13914 7E0F 69 00			adc #$00
 13915 7E11 8D BB 9F			sta PUTBYTE.DST+3
 13916 7E14 AD 45 A1			lda A
 13917 7E17 8D BC 9F			sta PUTBYTE.V
 13918 7E1A 20 40 3C			jsr PUTBYTE
 13919
 13920 				; --- ForToDoEpilog
 13921 7E1D EE 43 A1			inc X
 13922 7E20 D0 96			jne l_2A07
 13923 7E22			l_2A15
 13924
 13925 				; optimize OK (service.pas), line = 2795
 13926
 13927 7E22 A9 DE			lda #$DE
 13928 7E24 8D 45 A1			sta A
 13929
 13930 				; optimize OK (service.pas), line = 2796
 13931
 13932 7E27 AC 41 A1			ldy NUM
 13933 7E2A B9 C6 20			lda adr.DIGITS,y
 13934 7E2D 29 08			and #$08
 13935 7E2F C9 08			cmp #$08
 13936 7E31 D0 05			jne l_2A51
 13937 7E33 A9 DF			lda #$DF
 13938 7E35 8D 45 A1			sta A
 13939 7E38			l_2A51
 13940
 13941 				; optimize OK (service.pas), line = 2797
 13942
 13943 7E38 A9 01			lda #$01
 13944 7E3A 8D 44 A1			sta Y
 13945
 13946 7E3D			l_2A61
 13947 				; --- ForToDoCondition
 13948 7E3D AD 44 A1			lda Y
 13949 7E40 C9 05			cmp #$05
 13950 7E42 B0 4E			jcs l_2A6F
 13951
 13952 				; optimize OK (service.pas), line = 2799
 13953
 13954 7E44 AD 3D A1			lda PX
 13955 7E47 85 A0			sta :STACKORIGIN+10
 13956 7E49 A9 50			lda #$50
 13957 7E4B 18 6D 3E A1			add PX+1
 13958 7E4F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13959 7E51 A9 00			lda #$00
 13960 7E53 69 00			adc #$00
 13961 7E55 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13962 7E57 A9 00			lda #$00
 13963 7E59 69 00			adc #$00
 13964 7E5B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13965 7E5D AD 3F A1			lda PY
 13966 7E60 18 6D 44 A1			add Y
 13967 7E64 A8				tay
 13968 7E65 A5 A0			lda :STACKORIGIN+10
 13969 7E67 18 79 00 C0			add adr.ROW,y
 13970 7E6B 8D B8 9F			sta PUTBYTE.DST
 13971 7E6E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13972 7E70 79 00 C1			adc adr.ROW+256,y
 13973 7E73 8D B9 9F			sta PUTBYTE.DST+1
 13974 7E76 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13975 7E78 69 00			adc #$00
 13976 7E7A 8D BA 9F			sta PUTBYTE.DST+2
 13977 7E7D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13978 7E7F 69 00			adc #$00
 13979 7E81 8D BB 9F			sta PUTBYTE.DST+3
 13980 7E84 AD 45 A1			lda A
 13981 7E87 8D BC 9F			sta PUTBYTE.V
 13982 7E8A 20 40 3C			jsr PUTBYTE
 13983
 13984 				; --- ForToDoEpilog
 13985 7E8D EE 44 A1			inc Y
 13986 7E90 D0 AB			jne l_2A61
 13987 7E92			l_2A6F
 13988
 13989 				; optimize OK (service.pas), line = 2802
 13990
 13991 7E92 A9 DE			lda #$DE
 13992 7E94 8D 45 A1			sta A
 13993
 13994 				; optimize OK (service.pas), line = 2803
 13995
 13996 7E97 AC 41 A1			ldy NUM
 13997 7E9A B9 C6 20			lda adr.DIGITS,y
 13998 7E9D 29 10			and #$10
 13999 7E9F C9 10			cmp #$10
 14000 7EA1 D0 05			jne l_2AA7
 14001 7EA3 A9 DF			lda #$DF
 14002 7EA5 8D 45 A1			sta A
 14003 7EA8			l_2AA7
 14004
 14005 				; optimize OK (service.pas), line = 2804
 14006
 14007 7EA8 A9 01			lda #$01
 14008 7EAA 8D 44 A1			sta Y
 14009
 14010 7EAD			l_2AB7
 14011 				; --- ForToDoCondition
 14012 7EAD AD 44 A1			lda Y
 14013 7EB0 C9 05			cmp #$05
 14014 7EB2 B0 4E			jcs l_2AC5
 14015
 14016 				; optimize OK (service.pas), line = 2806
 14017
 14018 7EB4 AD 3D A1			lda PX
 14019 7EB7 85 A0			sta :STACKORIGIN+10
 14020 7EB9 A9 50			lda #$50
 14021 7EBB 18 6D 3E A1			add PX+1
 14022 7EBF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14023 7EC1 A9 00			lda #$00
 14024 7EC3 69 00			adc #$00
 14025 7EC5 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14026 7EC7 A9 00			lda #$00
 14027 7EC9 69 00			adc #$00
 14028 7ECB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14029 7ECD AD 3F A1			lda PY
 14030 7ED0 18 6D 44 A1			add Y
 14031 7ED4 A8				tay
 14032 7ED5 A5 A0			lda :STACKORIGIN+10
 14033 7ED7 18 79 05 C0			add adr.ROW+$05,y
 14034 7EDB 8D B8 9F			sta PUTBYTE.DST
 14035 7EDE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14036 7EE0 79 05 C1			adc adr.ROW+256+$05,y
 14037 7EE3 8D B9 9F			sta PUTBYTE.DST+1
 14038 7EE6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14039 7EE8 69 00			adc #$00
 14040 7EEA 8D BA 9F			sta PUTBYTE.DST+2
 14041 7EED A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14042 7EEF 69 00			adc #$00
 14043 7EF1 8D BB 9F			sta PUTBYTE.DST+3
 14044 7EF4 AD 45 A1			lda A
 14045 7EF7 8D BC 9F			sta PUTBYTE.V
 14046 7EFA 20 40 3C			jsr PUTBYTE
 14047
 14048 				; --- ForToDoEpilog
 14049 7EFD EE 44 A1			inc Y
 14050 7F00 D0 AB			jne l_2AB7
 14051 7F02			l_2AC5
 14052
 14053 				; optimize OK (service.pas), line = 2809
 14054
 14055 7F02 A9 DE			lda #$DE
 14056 7F04 8D 45 A1			sta A
 14057
 14058 				; optimize OK (service.pas), line = 2810
 14059
 14060 7F07 AC 41 A1			ldy NUM
 14061 7F0A B9 C6 20			lda adr.DIGITS,y
 14062 7F0D 29 20			and #$20
 14063 7F0F C9 20			cmp #$20
 14064 7F11 D0 05			jne l_2B01
 14065 7F13 A9 DF			lda #$DF
 14066 7F15 8D 45 A1			sta A
 14067 7F18			l_2B01
 14068
 14069 				; optimize OK (service.pas), line = 2811
 14070
 14071 7F18 A9 01			lda #$01
 14072 7F1A 8D 44 A1			sta Y
 14073
 14074 7F1D			l_2B11
 14075 				; --- ForToDoCondition
 14076 7F1D AD 44 A1			lda Y
 14077 7F20 C9 05			cmp #$05
 14078 7F22 B0 4F			jcs l_2B1F
 14079
 14080 				; optimize OK (service.pas), line = 2813
 14081
 14082 7F24 A9 05			lda #$05
 14083 7F26 6D 3D A1			adc PX
 14084 7F29 85 A0			sta :STACKORIGIN+10
 14085 7F2B A9 50			lda #$50
 14086 7F2D 6D 3E A1			adc PX+1
 14087 7F30 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14088 7F32 A9 00			lda #$00
 14089 7F34 69 00			adc #$00
 14090 7F36 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14091 7F38 A9 00			lda #$00
 14092 7F3A 69 00			adc #$00
 14093 7F3C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14094 7F3E AD 3F A1			lda PY
 14095 7F41 18 6D 44 A1			add Y
 14096 7F45 A8				tay
 14097 7F46 A5 A0			lda :STACKORIGIN+10
 14098 7F48 18 79 00 C0			add adr.ROW,y
 14099 7F4C 8D B8 9F			sta PUTBYTE.DST
 14100 7F4F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14101 7F51 79 00 C1			adc adr.ROW+256,y
 14102 7F54 8D B9 9F			sta PUTBYTE.DST+1
 14103 7F57 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14104 7F59 69 00			adc #$00
 14105 7F5B 8D BA 9F			sta PUTBYTE.DST+2
 14106 7F5E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14107 7F60 69 00			adc #$00
 14108 7F62 8D BB 9F			sta PUTBYTE.DST+3
 14109 7F65 AD 45 A1			lda A
 14110 7F68 8D BC 9F			sta PUTBYTE.V
 14111 7F6B 20 40 3C			jsr PUTBYTE
 14112
 14113 				; --- ForToDoEpilog
 14114 7F6E EE 44 A1			inc Y
 14115 7F71 D0 AA			jne l_2B11
 14116 7F73			l_2B1F
 14117
 14118 				; optimize OK (service.pas), line = 2816
 14119
 14120 7F73 A9 DE			lda #$DE
 14121 7F75 8D 45 A1			sta A
 14122
 14123 				; optimize OK (service.pas), line = 2817
 14124
 14125 7F78 AC 41 A1			ldy NUM
 14126 7F7B B9 C6 20			lda adr.DIGITS,y
 14127 7F7E 29 40			and #$40
 14128 7F80 C9 40			cmp #$40
 14129 7F82 D0 05			jne l_2B5B
 14130 7F84 A9 DF			lda #$DF
 14131 7F86 8D 45 A1			sta A
 14132 7F89			l_2B5B
 14133
 14134 				; optimize OK (service.pas), line = 2818
 14135
 14136 7F89 A9 01			lda #$01
 14137 7F8B 8D 44 A1			sta Y
 14138
 14139 7F8E			l_2B6B
 14140 				; --- ForToDoCondition
 14141 7F8E AD 44 A1			lda Y
 14142 7F91 C9 05			cmp #$05
 14143 7F93 B0 4F			jcs l_2B79
 14144
 14145 				; optimize OK (service.pas), line = 2820
 14146
 14147 7F95 A9 05			lda #$05
 14148 7F97 6D 3D A1			adc PX
 14149 7F9A 85 A0			sta :STACKORIGIN+10
 14150 7F9C A9 50			lda #$50
 14151 7F9E 6D 3E A1			adc PX+1
 14152 7FA1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14153 7FA3 A9 00			lda #$00
 14154 7FA5 69 00			adc #$00
 14155 7FA7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14156 7FA9 A9 00			lda #$00
 14157 7FAB 69 00			adc #$00
 14158 7FAD 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14159 7FAF AD 3F A1			lda PY
 14160 7FB2 18 6D 44 A1			add Y
 14161 7FB6 A8				tay
 14162 7FB7 A5 A0			lda :STACKORIGIN+10
 14163 7FB9 18 79 05 C0			add adr.ROW+$05,y
 14164 7FBD 8D B8 9F			sta PUTBYTE.DST
 14165 7FC0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14166 7FC2 79 05 C1			adc adr.ROW+256+$05,y
 14167 7FC5 8D B9 9F			sta PUTBYTE.DST+1
 14168 7FC8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14169 7FCA 69 00			adc #$00
 14170 7FCC 8D BA 9F			sta PUTBYTE.DST+2
 14171 7FCF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14172 7FD1 69 00			adc #$00
 14173 7FD3 8D BB 9F			sta PUTBYTE.DST+3
 14174 7FD6 AD 45 A1			lda A
 14175 7FD9 8D BC 9F			sta PUTBYTE.V
 14176 7FDC 20 40 3C			jsr PUTBYTE
 14177
 14178 				; --- ForToDoEpilog
 14179 7FDF EE 44 A1			inc Y
 14180 7FE2 D0 AA			jne l_2B6B
 14181 7FE4			l_2B79
 14182
 14183 				; ------------------------------------------------------------
 14184
 14185 = A13D			PX	= DATAORIGIN+$03A8
 14186 = A13F			PY	= DATAORIGIN+$03AA
 14187 = A141			NUM	= DATAORIGIN+$03AC
 14188 = A143			X	= DATAORIGIN+$03AE
 14189 = A144			Y	= DATAORIGIN+$03AF
 14190 = A145			A	= DATAORIGIN+$03B0
 14191
 14192 = A13D			@VarData	= PX
 14193 = 0009			@VarDataSize	= 9
 14194
 14195 7FE4			@exit
 14196 					.ifdef @new
 14197 					lda <@VarData
 14198 					sta :ztmp
 14199 					lda >@VarData
 14200 					ldy #@VarDataSize-1
 14201 					jmp @FreeMem
 14202 					els
 14203 7FE4 60				rts						; ret
 14204 					eif
 14205 				.endl
 14206
 14207 7FE5			.local	WRITE_SCORE					; PROCEDURE
 14208
 14209 				; optimize OK (service.pas), line = 2831
 14210
 14211 7FE5 A9 00			lda #$00
 14212 7FE7 8D 52 A1			sta F
 14213
 14214 				; optimize OK (service.pas), line = 2836
 14215
 14216 7FEA A9 A0			lda #$A0
 14217 7FEC 85 8E			sta @INTEGER.DIV.B
 14218 7FEE A9 86			lda #$86
 14219 7FF0 85 8F			sta @INTEGER.DIV.B+1
 14220 7FF2 A9 01			lda #$01
 14221 7FF4 85 90			sta @INTEGER.DIV.B+2
 14222 7FF6 A9 00			lda #$00
 14223 7FF8 85 91			sta @INTEGER.DIV.B+3
 14224 7FFA AD 4A A1			lda SC
 14225 7FFD 85 86			sta @INTEGER.DIV.A
 14226 7FFF AD 4B A1			lda SC+1
 14227 8002 85 87			sta @INTEGER.DIV.A+1
 14228 8004 AD 4C A1			lda SC+2
 14229 8007 85 88			sta @INTEGER.DIV.A+2
 14230 8009 AD 4D A1			lda SC+3
 14231 800C 85 89			sta @INTEGER.DIV.A+3
 14232 800E 20 A3 22			jsr @INTEGER.DIV
 14233 8011 A9 0A			lda #$0A
 14234 8013 85 8E			sta @INTEGER.MOD.B
 14235 8015 A9 00			lda #$00
 14236 8017 85 8F			sta @INTEGER.MOD.B+1
 14237 8019 85 90			sta @INTEGER.MOD.B+2
 14238 801B 85 91			sta @INTEGER.MOD.B+3
 14239 801D 20 C0 22			jsr @INTEGER.MOD
 14240 8020 A5 8A			lda @INTEGER.MOD.RESULT
 14241 8022 8D 4E A1			sta N1
 14242 8025 A5 8B			lda @INTEGER.MOD.RESULT+1
 14243 8027 8D 4F A1			sta N1+1
 14244 802A A5 8C			lda @INTEGER.MOD.RESULT+2
 14245 802C 8D 50 A1			sta N1+2
 14246 802F A5 8D			lda @INTEGER.MOD.RESULT+3
 14247 8031 8D 51 A1			sta N1+3
 14248
 14249 				; optimize OK (service.pas), line = 2837
 14250
 14251 8034 30 10			jmi l_2BC1
 14252 8036 0D 50 A1			ora N1+2
 14253 8039 0D 4F A1			ora N1+1
 14254 803C 0D 4E A1			ora N1
 14255 803F F0 05			jeq l_2BC1
 14256 8041 A9 01			lda #$01
 14257 8043 8D 52 A1			sta F
 14258 8046			l_2BC1
 14259
 14260 				; optimize OK (service.pas), line = 2838
 14261
 14262 8046 AD 52 A1			lda F
 14263 8049 F0 24			jeq l_2BD4
 14264 804B AD 46 A1			lda PX
 14265 804E 8D 3D A1			sta PUT_DIGIT.PX
 14266 8051 AD 47 A1			lda PX+1
 14267 8054 8D 3E A1			sta PUT_DIGIT.PX+1
 14268 8057 AD 48 A1			lda PY
 14269 805A 8D 3F A1			sta PUT_DIGIT.PY
 14270 805D AD 49 A1			lda PY+1
 14271 8060 8D 40 A1			sta PUT_DIGIT.PY+1
 14272 8063 AD 4E A1			lda N1
 14273 8066 8D 41 A1			sta PUT_DIGIT.NUM
 14274 8069 AD 4F A1			lda N1+1
 14275 806C 4C 8E 80			jmp l_2BE4
 14276 806F			l_2BD4
 14277
 14278 				; optimize OK (service.pas), line = 2839
 14279
 14280 806F AD 46 A1			lda PX
 14281 8072 8D 3D A1			sta PUT_DIGIT.PX
 14282 8075 AD 47 A1			lda PX+1
 14283 8078 8D 3E A1			sta PUT_DIGIT.PX+1
 14284 807B AD 48 A1			lda PY
 14285 807E 8D 3F A1			sta PUT_DIGIT.PY
 14286 8081 AD 49 A1			lda PY+1
 14287 8084 8D 40 A1			sta PUT_DIGIT.PY+1
 14288 8087 A9 0A			lda #$0A
 14289 8089 8D 41 A1			sta PUT_DIGIT.NUM
 14290 808C A9 00			lda #$00
 14291 808E			l_2BE4
 14292 808E 8D 42 A1			sta PUT_DIGIT.NUM+1
 14293 8091 20 93 7C			jsr PUT_DIGIT
 14294
 14295 				; optimize OK (service.pas), line = 2842
 14296
 14297 8094 A9 10			lda #$10
 14298 8096 85 8E			sta @INTEGER.DIV.B
 14299 8098 A9 27			lda #$27
 14300 809A 85 8F			sta @INTEGER.DIV.B+1
 14301 809C A9 00			lda #$00
 14302 809E 85 90			sta @INTEGER.DIV.B+2
 14303 80A0 85 91			sta @INTEGER.DIV.B+3
 14304 80A2 AD 4A A1			lda SC
 14305 80A5 85 86			sta @INTEGER.DIV.A
 14306 80A7 AD 4B A1			lda SC+1
 14307 80AA 85 87			sta @INTEGER.DIV.A+1
 14308 80AC AD 4C A1			lda SC+2
 14309 80AF 85 88			sta @INTEGER.DIV.A+2
 14310 80B1 AD 4D A1			lda SC+3
 14311 80B4 85 89			sta @INTEGER.DIV.A+3
 14312 80B6 20 A3 22			jsr @INTEGER.DIV
 14313 80B9 A9 0A			lda #$0A
 14314 80BB 85 8E			sta @INTEGER.MOD.B
 14315 80BD A9 00			lda #$00
 14316 80BF 85 8F			sta @INTEGER.MOD.B+1
 14317 80C1 85 90			sta @INTEGER.MOD.B+2
 14318 80C3 85 91			sta @INTEGER.MOD.B+3
 14319 80C5 20 C0 22			jsr @INTEGER.MOD
 14320 80C8 A5 8A			lda @INTEGER.MOD.RESULT
 14321 80CA 8D 4E A1			sta N1
 14322 80CD A5 8B			lda @INTEGER.MOD.RESULT+1
 14323 80CF 8D 4F A1			sta N1+1
 14324 80D2 A5 8C			lda @INTEGER.MOD.RESULT+2
 14325 80D4 8D 50 A1			sta N1+2
 14326 80D7 A5 8D			lda @INTEGER.MOD.RESULT+3
 14327 80D9 8D 51 A1			sta N1+3
 14328
 14329 				; optimize OK (service.pas), line = 2843
 14330
 14331 80DC 30 10			jmi l_2C06
 14332 80DE 0D 50 A1			ora N1+2
 14333 80E1 0D 4F A1			ora N1+1
 14334 80E4 0D 4E A1			ora N1
 14335 80E7 F0 05			jeq l_2C06
 14336 80E9 A9 01			lda #$01
 14337 80EB 8D 52 A1			sta F
 14338 80EE			l_2C06
 14339
 14340 				; optimize OK (service.pas), line = 2844
 14341
 14342 80EE AD 52 A1			lda F
 14343 80F1 F0 29			jeq l_2C19
 14344 80F3 AD 46 A1			lda PX
 14345 80F6 18 69 07			add #$07
 14346 80F9 8D 3D A1			sta PUT_DIGIT.PX
 14347 80FC AD 47 A1			lda PX+1
 14348 80FF 69 00			adc #$00
 14349 8101 8D 3E A1			sta PUT_DIGIT.PX+1
 14350 8104 AD 48 A1			lda PY
 14351 8107 8D 3F A1			sta PUT_DIGIT.PY
 14352 810A AD 49 A1			lda PY+1
 14353 810D 8D 40 A1			sta PUT_DIGIT.PY+1
 14354 8110 AD 4E A1			lda N1
 14355 8113 8D 41 A1			sta PUT_DIGIT.NUM
 14356 8116 AD 4F A1			lda N1+1
 14357 8119 4C 40 81			jmp l_2C2D
 14358 811C			l_2C19
 14359
 14360 				; optimize OK (service.pas), line = 2845
 14361
 14362 811C AD 46 A1			lda PX
 14363 811F 18 69 07			add #$07
 14364 8122 8D 3D A1			sta PUT_DIGIT.PX
 14365 8125 AD 47 A1			lda PX+1
 14366 8128 69 00			adc #$00
 14367 812A 8D 3E A1			sta PUT_DIGIT.PX+1
 14368 812D AD 48 A1			lda PY
 14369 8130 8D 3F A1			sta PUT_DIGIT.PY
 14370 8133 AD 49 A1			lda PY+1
 14371 8136 8D 40 A1			sta PUT_DIGIT.PY+1
 14372 8139 A9 0A			lda #$0A
 14373 813B 8D 41 A1			sta PUT_DIGIT.NUM
 14374 813E A9 00			lda #$00
 14375 8140			l_2C2D
 14376 8140 8D 42 A1			sta PUT_DIGIT.NUM+1
 14377 8143 20 93 7C			jsr PUT_DIGIT
 14378
 14379 				; optimize OK (service.pas), line = 2848
 14380
 14381 8146 A9 E8			lda #$E8
 14382 8148 85 8E			sta @INTEGER.DIV.B
 14383 814A A9 03			lda #$03
 14384 814C 85 8F			sta @INTEGER.DIV.B+1
 14385 814E A9 00			lda #$00
 14386 8150 85 90			sta @INTEGER.DIV.B+2
 14387 8152 85 91			sta @INTEGER.DIV.B+3
 14388 8154 AD 4A A1			lda SC
 14389 8157 85 86			sta @INTEGER.DIV.A
 14390 8159 AD 4B A1			lda SC+1
 14391 815C 85 87			sta @INTEGER.DIV.A+1
 14392 815E AD 4C A1			lda SC+2
 14393 8161 85 88			sta @INTEGER.DIV.A+2
 14394 8163 AD 4D A1			lda SC+3
 14395 8166 85 89			sta @INTEGER.DIV.A+3
 14396 8168 20 A3 22			jsr @INTEGER.DIV
 14397 816B A9 0A			lda #$0A
 14398 816D 85 8E			sta @INTEGER.MOD.B
 14399 816F A9 00			lda #$00
 14400 8171 85 8F			sta @INTEGER.MOD.B+1
 14401 8173 85 90			sta @INTEGER.MOD.B+2
 14402 8175 85 91			sta @INTEGER.MOD.B+3
 14403 8177 20 C0 22			jsr @INTEGER.MOD
 14404 817A A5 8A			lda @INTEGER.MOD.RESULT
 14405 817C 8D 4E A1			sta N1
 14406 817F A5 8B			lda @INTEGER.MOD.RESULT+1
 14407 8181 8D 4F A1			sta N1+1
 14408 8184 A5 8C			lda @INTEGER.MOD.RESULT+2
 14409 8186 8D 50 A1			sta N1+2
 14410 8189 A5 8D			lda @INTEGER.MOD.RESULT+3
 14411 818B 8D 51 A1			sta N1+3
 14412
 14413 				; optimize OK (service.pas), line = 2849
 14414
 14415 818E 30 10			jmi l_2C53
 14416 8190 0D 50 A1			ora N1+2
 14417 8193 0D 4F A1			ora N1+1
 14418 8196 0D 4E A1			ora N1
 14419 8199 F0 05			jeq l_2C53
 14420 819B A9 01			lda #$01
 14421 819D 8D 52 A1			sta F
 14422 81A0			l_2C53
 14423
 14424 				; optimize OK (service.pas), line = 2850
 14425
 14426 81A0 AD 52 A1			lda F
 14427 81A3 F0 29			jeq l_2C66
 14428 81A5 AD 46 A1			lda PX
 14429 81A8 18 69 0E			add #$0E
 14430 81AB 8D 3D A1			sta PUT_DIGIT.PX
 14431 81AE AD 47 A1			lda PX+1
 14432 81B1 69 00			adc #$00
 14433 81B3 8D 3E A1			sta PUT_DIGIT.PX+1
 14434 81B6 AD 48 A1			lda PY
 14435 81B9 8D 3F A1			sta PUT_DIGIT.PY
 14436 81BC AD 49 A1			lda PY+1
 14437 81BF 8D 40 A1			sta PUT_DIGIT.PY+1
 14438 81C2 AD 4E A1			lda N1
 14439 81C5 8D 41 A1			sta PUT_DIGIT.NUM
 14440 81C8 AD 4F A1			lda N1+1
 14441 81CB 4C F2 81			jmp l_2C7A
 14442 81CE			l_2C66
 14443
 14444 				; optimize OK (service.pas), line = 2851
 14445
 14446 81CE AD 46 A1			lda PX
 14447 81D1 18 69 0E			add #$0E
 14448 81D4 8D 3D A1			sta PUT_DIGIT.PX
 14449 81D7 AD 47 A1			lda PX+1
 14450 81DA 69 00			adc #$00
 14451 81DC 8D 3E A1			sta PUT_DIGIT.PX+1
 14452 81DF AD 48 A1			lda PY
 14453 81E2 8D 3F A1			sta PUT_DIGIT.PY
 14454 81E5 AD 49 A1			lda PY+1
 14455 81E8 8D 40 A1			sta PUT_DIGIT.PY+1
 14456 81EB A9 0A			lda #$0A
 14457 81ED 8D 41 A1			sta PUT_DIGIT.NUM
 14458 81F0 A9 00			lda #$00
 14459 81F2			l_2C7A
 14460 81F2 8D 42 A1			sta PUT_DIGIT.NUM+1
 14461 81F5 20 93 7C			jsr PUT_DIGIT
 14462
 14463 				; optimize OK (service.pas), line = 2854
 14464
 14465 81F8 A9 64			lda #$64
 14466 81FA 85 8E			sta @INTEGER.DIV.B
 14467 81FC A9 00			lda #$00
 14468 81FE 85 8F			sta @INTEGER.DIV.B+1
 14469 8200 85 90			sta @INTEGER.DIV.B+2
 14470 8202 85 91			sta @INTEGER.DIV.B+3
 14471 8204 AD 4A A1			lda SC
 14472 8207 85 86			sta @INTEGER.DIV.A
 14473 8209 AD 4B A1			lda SC+1
 14474 820C 85 87			sta @INTEGER.DIV.A+1
 14475 820E AD 4C A1			lda SC+2
 14476 8211 85 88			sta @INTEGER.DIV.A+2
 14477 8213 AD 4D A1			lda SC+3
 14478 8216 85 89			sta @INTEGER.DIV.A+3
 14479 8218 20 A3 22			jsr @INTEGER.DIV
 14480 821B A9 0A			lda #$0A
 14481 821D 85 8E			sta @INTEGER.MOD.B
 14482 821F A9 00			lda #$00
 14483 8221 85 8F			sta @INTEGER.MOD.B+1
 14484 8223 85 90			sta @INTEGER.MOD.B+2
 14485 8225 85 91			sta @INTEGER.MOD.B+3
 14486 8227 20 C0 22			jsr @INTEGER.MOD
 14487 822A A5 8A			lda @INTEGER.MOD.RESULT
 14488 822C 8D 4E A1			sta N1
 14489 822F A5 8B			lda @INTEGER.MOD.RESULT+1
 14490 8231 8D 4F A1			sta N1+1
 14491 8234 A5 8C			lda @INTEGER.MOD.RESULT+2
 14492 8236 8D 50 A1			sta N1+2
 14493 8239 A5 8D			lda @INTEGER.MOD.RESULT+3
 14494 823B 8D 51 A1			sta N1+3
 14495
 14496 				; optimize OK (service.pas), line = 2855
 14497
 14498 823E 30 10			jmi l_2CA0
 14499 8240 0D 50 A1			ora N1+2
 14500 8243 0D 4F A1			ora N1+1
 14501 8246 0D 4E A1			ora N1
 14502 8249 F0 05			jeq l_2CA0
 14503 824B A9 01			lda #$01
 14504 824D 8D 52 A1			sta F
 14505 8250			l_2CA0
 14506
 14507 				; optimize OK (service.pas), line = 2856
 14508
 14509 8250 AD 52 A1			lda F
 14510 8253 F0 29			jeq l_2CB3
 14511 8255 AD 46 A1			lda PX
 14512 8258 18 69 15			add #$15
 14513 825B 8D 3D A1			sta PUT_DIGIT.PX
 14514 825E AD 47 A1			lda PX+1
 14515 8261 69 00			adc #$00
 14516 8263 8D 3E A1			sta PUT_DIGIT.PX+1
 14517 8266 AD 48 A1			lda PY
 14518 8269 8D 3F A1			sta PUT_DIGIT.PY
 14519 826C AD 49 A1			lda PY+1
 14520 826F 8D 40 A1			sta PUT_DIGIT.PY+1
 14521 8272 AD 4E A1			lda N1
 14522 8275 8D 41 A1			sta PUT_DIGIT.NUM
 14523 8278 AD 4F A1			lda N1+1
 14524 827B 4C A2 82			jmp l_2CC7
 14525 827E			l_2CB3
 14526
 14527 				; optimize OK (service.pas), line = 2857
 14528
 14529 827E AD 46 A1			lda PX
 14530 8281 18 69 15			add #$15
 14531 8284 8D 3D A1			sta PUT_DIGIT.PX
 14532 8287 AD 47 A1			lda PX+1
 14533 828A 69 00			adc #$00
 14534 828C 8D 3E A1			sta PUT_DIGIT.PX+1
 14535 828F AD 48 A1			lda PY
 14536 8292 8D 3F A1			sta PUT_DIGIT.PY
 14537 8295 AD 49 A1			lda PY+1
 14538 8298 8D 40 A1			sta PUT_DIGIT.PY+1
 14539 829B A9 0A			lda #$0A
 14540 829D 8D 41 A1			sta PUT_DIGIT.NUM
 14541 82A0 A9 00			lda #$00
 14542 82A2			l_2CC7
 14543 82A2 8D 42 A1			sta PUT_DIGIT.NUM+1
 14544 82A5 20 93 7C			jsr PUT_DIGIT
 14545
 14546 				; optimize OK (service.pas), line = 2860
 14547
 14548 82A8 A9 0A			lda #$0A
 14549 82AA 85 8E			sta @INTEGER.DIV.B
 14550 82AC A9 00			lda #$00
 14551 82AE 85 8F			sta @INTEGER.DIV.B+1
 14552 82B0 85 90			sta @INTEGER.DIV.B+2
 14553 82B2 85 91			sta @INTEGER.DIV.B+3
 14554 82B4 AD 4A A1			lda SC
 14555 82B7 85 86			sta @INTEGER.DIV.A
 14556 82B9 AD 4B A1			lda SC+1
 14557 82BC 85 87			sta @INTEGER.DIV.A+1
 14558 82BE AD 4C A1			lda SC+2
 14559 82C1 85 88			sta @INTEGER.DIV.A+2
 14560 82C3 AD 4D A1			lda SC+3
 14561 82C6 85 89			sta @INTEGER.DIV.A+3
 14562 82C8 20 A3 22			jsr @INTEGER.DIV
 14563 82CB A9 0A			lda #$0A
 14564 82CD 85 8E			sta @INTEGER.MOD.B
 14565 82CF A9 00			lda #$00
 14566 82D1 85 8F			sta @INTEGER.MOD.B+1
 14567 82D3 85 90			sta @INTEGER.MOD.B+2
 14568 82D5 85 91			sta @INTEGER.MOD.B+3
 14569 82D7 20 C0 22			jsr @INTEGER.MOD
 14570 82DA A5 8A			lda @INTEGER.MOD.RESULT
 14571 82DC 8D 4E A1			sta N1
 14572 82DF A5 8B			lda @INTEGER.MOD.RESULT+1
 14573 82E1 8D 4F A1			sta N1+1
 14574 82E4 A5 8C			lda @INTEGER.MOD.RESULT+2
 14575 82E6 8D 50 A1			sta N1+2
 14576 82E9 A5 8D			lda @INTEGER.MOD.RESULT+3
 14577 82EB 8D 51 A1			sta N1+3
 14578
 14579 				; optimize OK (service.pas), line = 2861
 14580
 14581 82EE AD 46 A1			lda PX
 14582 82F1 18 69 1C			add #$1C
 14583 82F4 8D 3D A1			sta PUT_DIGIT.PX
 14584 82F7 AD 47 A1			lda PX+1
 14585 82FA 69 00			adc #$00
 14586 82FC 8D 3E A1			sta PUT_DIGIT.PX+1
 14587 82FF AD 48 A1			lda PY
 14588 8302 8D 3F A1			sta PUT_DIGIT.PY
 14589 8305 AD 49 A1			lda PY+1
 14590 8308 8D 40 A1			sta PUT_DIGIT.PY+1
 14591 830B AD 4E A1			lda N1
 14592 830E 8D 41 A1			sta PUT_DIGIT.NUM
 14593 8311 AD 4F A1			lda N1+1
 14594 8314 8D 42 A1			sta PUT_DIGIT.NUM+1
 14595 8317 20 93 7C			jsr PUT_DIGIT
 14596
 14597 				; optimize OK (service.pas), line = 2865
 14598
 14599 831A AD 46 A1			lda PX
 14600 831D 18 69 23			add #$23
 14601 8320 8D 3D A1			sta PUT_DIGIT.PX
 14602 8323 AD 47 A1			lda PX+1
 14603 8326 69 00			adc #$00
 14604 8328 8D 3E A1			sta PUT_DIGIT.PX+1
 14605 832B AD 48 A1			lda PY
 14606 832E 8D 3F A1			sta PUT_DIGIT.PY
 14607 8331 AD 49 A1			lda PY+1
 14608 8334 8D 40 A1			sta PUT_DIGIT.PY+1
 14609 8337 A9 00			lda #$00
 14610 8339 8D 41 A1			sta PUT_DIGIT.NUM
 14611 833C 8D 42 A1			sta PUT_DIGIT.NUM+1
 14612 833F 20 93 7C			jsr PUT_DIGIT
 14613
 14614 				; ------------------------------------------------------------
 14615
 14616 = A146			PX	= DATAORIGIN+$03B1
 14617 = A148			PY	= DATAORIGIN+$03B3
 14618 = A14A			SC	= DATAORIGIN+$03B5
 14619 = A14E			N1	= DATAORIGIN+$03B9
 14620 = A152			F	= DATAORIGIN+$03BD
 14621
 14622 = A146			@VarData	= PX
 14623 = 000D			@VarDataSize	= 13
 14624
 14625 8342			@exit
 14626 					.ifdef @new
 14627 					lda <@VarData
 14628 					sta :ztmp
 14629 					lda >@VarData
 14630 					ldy #@VarDataSize-1
 14631 					jmp @FreeMem
 14632 					els
 14633 8342 60				rts						; ret
 14634 					eif
 14635 				.endl
 14636
 14637 8343			.local	PLOT_LIVES					; PROCEDURE
 14638
 14639 				; optimize FAIL (0, service.pas), line = 2911
 14640
 14641 8343 AD 53 A1			lda LIVES
 14642 8346 D0 03			bne @+
 14643 8348 CE 54 A1			dec LIVES+1
 14644 				@
 14645 834B CE 53 A1			dec LIVES
 14646
 14647 				; optimize OK (service.pas), line = 2914
 14648
 14649 834E A9 00			lda #$00
 14650 8350 8D 57 A1			sta CN
 14651
 14652 8353			l_2D06
 14653 				; --- ForToDoCondition
 14654 8353 AD 57 A1			lda CN
 14655 8356 C9 08			cmp #$08
 14656 8358 90 03 4C 13 86		jcs l_2D14
 14657
 14658 				; optimize OK (service.pas), line = 2915
 14659
 14660 835D A9 00			lda #$00
 14661 835F 8D 56 A1			sta Y
 14662 8362 AC E3 9E			ldy MINIVAUS.HEIGHT
 14663 8365 88				dey
 14664 8366 8C 6A 83			sty @FORTMP_2D1F_0
 14665
 14666 8369			l_2D22
 14667 				; --- ForToDoCondition
 14668 8369 A9 00			lda @FORTMP_2D1F_0::#$00
 14669 836B CD 56 A1			cmp Y
 14670 836E B0 03 4C 0B 86		jcc l_2D30
 14671
 14672 				; optimize OK (service.pas), line = 2916
 14673
 14674 8373 A9 00			lda #$00
 14675 8375 8D 55 A1			sta X
 14676 8378 AC E1 9E			ldy MINIVAUS.WIDTH
 14677 837B 88				dey
 14678 837C 8C 80 83			sty @FORTMP_2D3B_0
 14679
 14680 837F			l_2D3E
 14681 				; --- ForToDoCondition
 14682 837F A9 00			lda @FORTMP_2D3B_0::#$00
 14683 8381 CD 55 A1			cmp X
 14684 8384 B0 03 4C 03 86		jcc l_2D4C
 14685
 14686 				; optimize OK (service.pas), line = 2918
 14687
 14688 8389 AD 55 A1			lda X
 14689 838C 18 69 0B			add #$0B
 14690 838F 85 9F			sta :STACKORIGIN+9
 14691 8391 A9 00			lda #$00
 14692 8393 69 00			adc #$00
 14693 8395 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14694 8397 AD E1 9E			lda MINIVAUS.WIDTH
 14695 839A 85 8E			sta :ecx
 14696 839C AD E2 9E			lda MINIVAUS.WIDTH+1
 14697 839F 85 8F			sta :ecx+1
 14698 83A1 AD 57 A1			lda CN
 14699 83A4 85 86			sta :eax
 14700 83A6 A9 00			lda #$00
 14701 83A8 85 87			sta :eax+1
 14702 					.ifdef fmulinit
 14703 					fmulu_16
 14704 					els
 14705 83AA 20 7F 23			imulCX_AL
 14706 					eif
 14707 83AD A5 86			lda :eax
 14708 83AF 18 65 9F			add :STACKORIGIN+9
 14709 83B2 8D 5C A1			sta XL
 14710 83B5 A5 87			lda :eax+1
 14711 83B7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14712 83B9 8D 5D A1			sta XL+1
 14713
 14714 				; optimize OK (service.pas), line = 2919
 14715
 14716 83BC AD 56 A1			lda Y
 14717 83BF 18 69 C0			add #$C0
 14718 83C2 8D 5E A1			sta YL
 14719 83C5 A9 00			lda #$00
 14720 83C7 69 00			adc #$00
 14721 83C9 8D 5F A1			sta YL+1
 14722
 14723 				; optimize OK (service.pas), line = 2921
 14724
 14725 83CC AC 5C A1			ldy XL
 14726 83CF B9 00 C4			lda adr.MODX,y
 14727 83D2 8D 58 A1			sta XP
 14728 83D5 A9 00			lda #$00
 14729 83D7 8D 59 A1			sta XP+1
 14730
 14731 				; optimize OK (service.pas), line = 2922
 14732
 14733 83DA AC 5E A1			ldy YL
 14734 83DD B9 00 C3			lda adr.MODY,y
 14735 83E0 85 86			sta :eax
 14736 83E2 A9 00			lda #$00
 14737 83E4 85 87			sta :eax+1
 14738 83E6 AD 16 9F			lda PATTERN.WIDTH
 14739 83E9 85 8E			sta :ecx
 14740 83EB AD 17 9F			lda PATTERN.WIDTH+1
 14741 83EE 85 8F			sta :ecx+1
 14742 					.ifdef fmulinit
 14743 					fmulu_16
 14744 					els
 14745 83F0 20 7F 23			imulCX_AL
 14746 					eif
 14747 83F3 A5 86			lda :eax
 14748 83F5 8D 5A A1			sta YP
 14749 83F8 A5 87			lda :eax+1
 14750 83FA 8D 5B A1			sta YP+1
 14751
 14752 				; optimize FAIL (1, service.pas), line = 2926
 14753
 14754 83FD E8				inx
 14755 83FE A0 01			ldy #1
 14756 8400 AD 57 A1			lda CN
 14757 8403 CD 53 A1			cmp LIVES
 14758 8406 A9 00			lda #$00
 14759 8408 ED 54 A1			sbc LIVES+1
 14760 840B 50 02			svc
 14761 840D 49 80			eor #$80
 14762 840F 30 01			bmi @+
 14763 8411 88				dey
 14764 				@
 14765 8412 94 96			sty :STACKORIGIN,x
 14766 8414 AD E5 9E			lda MINIVAUS.OFS
 14767 8417 18 6D 55 A1			add X
 14768 841B 85 9F			sta :STACKORIGIN+9
 14769 841D AD E6 9E			lda MINIVAUS.OFS+1
 14770 8420 69 00			adc #$00
 14771 8422 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14772 8424 AD E7 9E			lda MINIVAUS.OFS+2
 14773 8427 69 00			adc #$00
 14774 8429 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14775 842B AD E8 9E			lda MINIVAUS.OFS+3
 14776 842E 69 00			adc #$00
 14777 8430 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14778 8432 AD E1 9E			lda MINIVAUS.WIDTH
 14779 8435 85 8E			sta :ecx
 14780 8437 AD E2 9E			lda MINIVAUS.WIDTH+1
 14781 843A 85 8F			sta :ecx+1
 14782 843C AD 56 A1			lda Y
 14783 843F 85 86			sta :eax
 14784 8441 A9 00			lda #$00
 14785 8443 85 87			sta :eax+1
 14786 					.ifdef fmulinit
 14787 					fmulu_16
 14788 					els
 14789 8445 20 7F 23			imulCX_AL
 14790 					eif
 14791 8448 A5 9F			lda :STACKORIGIN+9
 14792 844A 18 65 86			add :eax
 14793 844D 8D BD 9F			sta GETBYTE.SRC
 14794 8450 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14795 8452 65 87			adc :eax+1
 14796 8454 8D BE 9F			sta GETBYTE.SRC+1
 14797 8457 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14798 8459 65 88			adc :eax+2
 14799 845B 8D BF 9F			sta GETBYTE.SRC+2
 14800 845E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14801 8460 65 89			adc :eax+3
 14802 8462 8D C0 9F			sta GETBYTE.SRC+3
 14803 8465 20 68 3C			jsr GETBYTE
 14804 8468 CA				dex
 14805 8469 A0 01			ldy #1
 14806 846B AD C1 9F			lda GETBYTE.RESULT
 14807 846E D0 01			bne @+
 14808 8470 88				dey
 14809 				@
 14810 8471 98				tya
 14811 8472 35 97			and :STACKORIGIN+1,x
 14812 8474 F0 5D			jeq l_2DAF
 14813
 14814 				; optimize OK (service.pas), line = 2929
 14815
 14816 8476 AD E5 9E			lda MINIVAUS.OFS
 14817 8479 18 6D 55 A1			add X
 14818 847D 85 9F			sta :STACKORIGIN+9
 14819 847F AD E6 9E			lda MINIVAUS.OFS+1
 14820 8482 69 00			adc #$00
 14821 8484 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14822 8486 AD E7 9E			lda MINIVAUS.OFS+2
 14823 8489 69 00			adc #$00
 14824 848B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14825 848D AD E8 9E			lda MINIVAUS.OFS+3
 14826 8490 69 00			adc #$00
 14827 8492 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14828 8494 AD E1 9E			lda MINIVAUS.WIDTH
 14829 8497 85 8E			sta :ecx
 14830 8499 AD E2 9E			lda MINIVAUS.WIDTH+1
 14831 849C 85 8F			sta :ecx+1
 14832 849E AD 56 A1			lda Y
 14833 84A1 85 86			sta :eax
 14834 84A3 A9 00			lda #$00
 14835 84A5 85 87			sta :eax+1
 14836 					.ifdef fmulinit
 14837 					fmulu_16
 14838 					els
 14839 84A7 20 7F 23			imulCX_AL
 14840 					eif
 14841 84AA A5 9F			lda :STACKORIGIN+9
 14842 84AC 18 65 86			add :eax
 14843 84AF 8D BD 9F			sta GETBYTE.SRC
 14844 84B2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14845 84B4 65 87			adc :eax+1
 14846 84B6 8D BE 9F			sta GETBYTE.SRC+1
 14847 84B9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14848 84BB 65 88			adc :eax+2
 14849 84BD 8D BF 9F			sta GETBYTE.SRC+2
 14850 84C0 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14851 84C2 65 89			adc :eax+3
 14852 84C4 8D C0 9F			sta GETBYTE.SRC+3
 14853 84C7 20 68 3C			jsr GETBYTE
 14854 84CA AD C1 9F			lda GETBYTE.RESULT
 14855 84CD 8D 61 A1			sta CL
 14856 				; optimize OK (service.pas), line = 2932
 14857 				; optimize OK (service.pas), line = 2935
 14858 84D0 4C 6D 85			jmp l_2DF1
 14859 84D3			l_2DAF
 14860
 14861 				; optimize OK (service.pas), line = 2944
 14862
 14863 84D3 AD 95 9E			lda PLAYSCREEN.OFS
 14864 84D6 18 6D 5C A1			add XL
 14865 84DA 85 9F			sta :STACKORIGIN+9
 14866 84DC AD 96 9E			lda PLAYSCREEN.OFS+1
 14867 84DF 6D 5D A1			adc XL+1
 14868 84E2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14869 84E4 AD 97 9E			lda PLAYSCREEN.OFS+2
 14870 84E7 69 00			adc #$00
 14871 84E9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14872 84EB AD 98 9E			lda PLAYSCREEN.OFS+3
 14873 84EE 69 00			adc #$00
 14874 84F0 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14875 84F2 AC 5E A1			ldy YL
 14876 84F5 A5 9F			lda :STACKORIGIN+9
 14877 84F7 18 79 00 C0			add adr.ROW,y
 14878 84FB 8D BD 9F			sta GETBYTE.SRC
 14879 84FE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14880 8500 79 00 C1			adc adr.ROW+256,y
 14881 8503 8D BE 9F			sta GETBYTE.SRC+1
 14882 8506 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14883 8508 69 00			adc #$00
 14884 850A 8D BF 9F			sta GETBYTE.SRC+2
 14885 850D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14886 850F 69 00			adc #$00
 14887 8511 8D C0 9F			sta GETBYTE.SRC+3
 14888 8514 20 68 3C			jsr GETBYTE
 14889 8517 AD C1 9F			lda GETBYTE.RESULT
 14890 851A 29 80			and #$80
 14891 851C 8D 60 A1			sta SHADOW
 14892
 14893 				; optimize OK (service.pas), line = 2947
 14894
 14895 851F AD 1A 9F			lda PATTERN.OFS
 14896 8522 18 6D 58 A1			add XP
 14897 8526 85 9F			sta :STACKORIGIN+9
 14898 8528 AD 1B 9F			lda PATTERN.OFS+1
 14899 852B 6D 59 A1			adc XP+1
 14900 852E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14901 8530 AD 1C 9F			lda PATTERN.OFS+2
 14902 8533 69 00			adc #$00
 14903 8535 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14904 8537 AD 1D 9F			lda PATTERN.OFS+3
 14905 853A 69 00			adc #$00
 14906 853C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14907 853E A5 9F			lda :STACKORIGIN+9
 14908 8540 18 6D 5A A1			add YP
 14909 8544 8D BD 9F			sta GETBYTE.SRC
 14910 8547 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14911 8549 6D 5B A1			adc YP+1
 14912 854C 8D BE 9F			sta GETBYTE.SRC+1
 14913 854F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14914 8551 69 00			adc #$00
 14915 8553 8D BF 9F			sta GETBYTE.SRC+2
 14916 8556 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14917 8558 69 00			adc #$00
 14918 855A 8D C0 9F			sta GETBYTE.SRC+3
 14919 855D 20 68 3C			jsr GETBYTE
 14920 8560 E8				inx
 14921 8561 AD C1 9F			lda GETBYTE.RESULT
 14922 8564 29 7F			and #$7F
 14923 8566 0D 60 A1			ora SHADOW
 14924 8569 8D 61 A1			sta CL
 14925 856C CA				dex
 14926 856D			l_2DF1
 14927
 14928 				; optimize OK (service.pas), line = 2950
 14929
 14930 856D AD 5C A1			lda XL
 14931 8570 85 A0			sta :STACKORIGIN+10
 14932 8572 A9 50			lda #$50
 14933 8574 18 6D 5D A1			add XL+1
 14934 8578 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14935 857A A9 00			lda #$00
 14936 857C 69 00			adc #$00
 14937 857E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14938 8580 A9 00			lda #$00
 14939 8582 69 00			adc #$00
 14940 8584 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14941 8586 AC 5E A1			ldy YL
 14942 8589 A5 A0			lda :STACKORIGIN+10
 14943 858B 18 79 00 C0			add adr.ROW,y
 14944 858F 8D B8 9F			sta PUTBYTE.DST
 14945 8592 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14946 8594 79 00 C1			adc adr.ROW+256,y
 14947 8597 8D B9 9F			sta PUTBYTE.DST+1
 14948 859A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14949 859C 69 00			adc #$00
 14950 859E 8D BA 9F			sta PUTBYTE.DST+2
 14951 85A1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14952 85A3 69 00			adc #$00
 14953 85A5 8D BB 9F			sta PUTBYTE.DST+3
 14954 85A8 AD 61 A1			lda CL
 14955 85AB 8D BC 9F			sta PUTBYTE.V
 14956 85AE 20 40 3C			jsr PUTBYTE
 14957
 14958 				; optimize OK (service.pas), line = 2953
 14959
 14960 85B1 AD 95 9E			lda PLAYSCREEN.OFS
 14961 85B4 18 6D 5C A1			add XL
 14962 85B8 85 A0			sta :STACKORIGIN+10
 14963 85BA AD 96 9E			lda PLAYSCREEN.OFS+1
 14964 85BD 6D 5D A1			adc XL+1
 14965 85C0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14966 85C2 AD 97 9E			lda PLAYSCREEN.OFS+2
 14967 85C5 69 00			adc #$00
 14968 85C7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14969 85C9 AD 98 9E			lda PLAYSCREEN.OFS+3
 14970 85CC 69 00			adc #$00
 14971 85CE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14972 85D0 AC 5E A1			ldy YL
 14973 85D3 A5 A0			lda :STACKORIGIN+10
 14974 85D5 18 79 00 C0			add adr.ROW,y
 14975 85D9 8D B8 9F			sta PUTBYTE.DST
 14976 85DC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14977 85DE 79 00 C1			adc adr.ROW+256,y
 14978 85E1 8D B9 9F			sta PUTBYTE.DST+1
 14979 85E4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14980 85E6 69 00			adc #$00
 14981 85E8 8D BA 9F			sta PUTBYTE.DST+2
 14982 85EB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14983 85ED 69 00			adc #$00
 14984 85EF 8D BB 9F			sta PUTBYTE.DST+3
 14985 85F2 AD 61 A1			lda CL
 14986 85F5 8D BC 9F			sta PUTBYTE.V
 14987 85F8 20 40 3C			jsr PUTBYTE
 14988
 14989 				; --- ForToDoEpilog
 14990 85FB EE 55 A1			inc X
 14991 85FE F0 03 4C 7F 83		jne l_2D3E
 14992 8603			l_2D4C
 14993
 14994 				; --- ForToDoEpilog
 14995 8603 EE 56 A1			inc Y
 14996 8606 F0 03 4C 69 83		jne l_2D22
 14997 860B			l_2D30
 14998
 14999 				; --- ForToDoEpilog
 15000 860B EE 57 A1			inc CN
 15001 860E F0 03 4C 53 83		jne l_2D06
 15002 8613			l_2D14
 15003
 15004 				; ------------------------------------------------------------
 15005
 15006 = A153			LIVES	= DATAORIGIN+$03BE
 15007 = 000B			XLIVES	= $0B
 15008 = 00C0			YLIVES	= $C0
 15009 = A155			X	= DATAORIGIN+$03C0
 15010 = A156			Y	= DATAORIGIN+$03C1
 15011 = A157			CN	= DATAORIGIN+$03C2
 15012 = A158			XP	= DATAORIGIN+$03C3
 15013 = A15A			YP	= DATAORIGIN+$03C5
 15014 = A15C			XL	= DATAORIGIN+$03C7
 15015 = A15E			YL	= DATAORIGIN+$03C9
 15016 = A160			SHADOW	= DATAORIGIN+$03CB
 15017 = A161			CL	= DATAORIGIN+$03CC
 15018
 15019 = A153			@VarData	= LIVES
 15020 = 000F			@VarDataSize	= 15
 15021
 15022 8613			@exit
 15023 					.ifdef @new
 15024 					lda <@VarData
 15025 					sta :ztmp
 15026 					lda >@VarData
 15027 					ldy #@VarDataSize-1
 15028 					jmp @FreeMem
 15029 					els
 15030 8613 60				rts						; ret
 15031 					eif
 15032 				.endl
 15033
 15034 8614			.local	PLACE_FIRE					; PROCEDURE
 15035
 15036 				; optimize OK (service.pas), line = 2964
 15037
 15038 8614 AC 80 9F			ldy FIRE.Y
 15039 8617 AD 7F 9F			lda FIRE.X
 15040 861A 18 79 00 C0			add adr.ROW,y
 15041 861E 8D 88 9F			sta HLP
 15042 8621 A9 00			lda #$00
 15043 8623 79 00 C1			adc adr.ROW+256,y
 15044 8626 8D 89 9F			sta HLP+1
 15045
 15046 				; optimize OK (service.pas), line = 2966
 15047
 15048 8629 AD 88 9F			lda HLP
 15049 862C 8D A2 9F			sta BLITZERO.DST
 15050 862F A9 50			lda #$50
 15051 8631 18 6D 89 9F			add HLP+1
 15052 8635 8D A3 9F			sta BLITZERO.DST+1
 15053 8638 A9 00			lda #$00
 15054 863A 69 00			adc #$00
 15055 863C 8D A4 9F			sta BLITZERO.DST+2
 15056 863F A9 00			lda #$00
 15057 8641 69 00			adc #$00
 15058 8643 8D A5 9F			sta BLITZERO.DST+3
 15059 8646 AD FD 9E			lda SHOOTS.OFS
 15060 8649 8D 9E 9F			sta BLITZERO.SRC
 15061 864C AD FE 9E			lda SHOOTS.OFS+1
 15062 864F 8D 9F 9F			sta BLITZERO.SRC+1
 15063 8652 AD FF 9E			lda SHOOTS.OFS+2
 15064 8655 8D A0 9F			sta BLITZERO.SRC+2
 15065 8658 AD 00 9F			lda SHOOTS.OFS+3
 15066 865B 8D A1 9F			sta BLITZERO.SRC+3
 15067 865E AD F9 9E			lda SHOOTS.WIDTH
 15068 8661 8D A6 9F			sta BLITZERO.W
 15069 8664 AD FA 9E			lda SHOOTS.WIDTH+1
 15070 8667 8D A7 9F			sta BLITZERO.W+1
 15071 866A AD FB 9E			lda SHOOTS.HEIGHT
 15072 866D 8D A8 9F			sta BLITZERO.H
 15073 8670 20 17 3B			jsr BLITZERO
 15074
 15075 8673			@exit
 15076 					.ifdef @new
 15077 					lda <@VarData
 15078 					sta :ztmp
 15079 					lda >@VarData
 15080 					ldy #@VarDataSize-1
 15081 					jmp @FreeMem
 15082 					els
 15083 8673 60				rts						; ret
 15084 					eif
 15085 				.endl
 15086
 15087 8674			.local	REMOVE_FIRE					; PROCEDURE
 15088
 15089 				; optimize OK (service.pas), line = 2984
 15090
 15091 8674 AC 80 9F			ldy FIRE.Y
 15092 8677 AD 7F 9F			lda FIRE.X
 15093 867A 18 79 00 C0			add adr.ROW,y
 15094 867E 8D 88 9F			sta HLP
 15095 8681 A9 00			lda #$00
 15096 8683 79 00 C1			adc adr.ROW+256,y
 15097 8686 8D 89 9F			sta HLP+1
 15098
 15099 				; optimize OK (service.pas), line = 2986
 15100
 15101 8689 AD 88 9F			lda HLP
 15102 868C 8D 97 9F			sta BLITBOX.DST
 15103 868F A9 50			lda #$50
 15104 8691 18 6D 89 9F			add HLP+1
 15105 8695 8D 98 9F			sta BLITBOX.DST+1
 15106 8698 A9 00			lda #$00
 15107 869A 69 00			adc #$00
 15108 869C 8D 99 9F			sta BLITBOX.DST+2
 15109 869F A9 00			lda #$00
 15110 86A1 69 00			adc #$00
 15111 86A3 8D 9A 9F			sta BLITBOX.DST+3
 15112 86A6 AD 95 9E			lda PLAYSCREEN.OFS
 15113 86A9 18 6D 88 9F			add HLP
 15114 86AD 8D 93 9F			sta BLITBOX.SRC
 15115 86B0 AD 96 9E			lda PLAYSCREEN.OFS+1
 15116 86B3 6D 89 9F			adc HLP+1
 15117 86B6 8D 94 9F			sta BLITBOX.SRC+1
 15118 86B9 AD 97 9E			lda PLAYSCREEN.OFS+2
 15119 86BC 69 00			adc #$00
 15120 86BE 8D 95 9F			sta BLITBOX.SRC+2
 15121 86C1 AD 98 9E			lda PLAYSCREEN.OFS+3
 15122 86C4 69 00			adc #$00
 15123 86C6 8D 96 9F			sta BLITBOX.SRC+3
 15124 86C9 AD F9 9E			lda SHOOTS.WIDTH
 15125 86CC 8D 9B 9F			sta BLITBOX.W
 15126 86CF AD FA 9E			lda SHOOTS.WIDTH+1
 15127 86D2 8D 9C 9F			sta BLITBOX.W+1
 15128 86D5 AD FB 9E			lda SHOOTS.HEIGHT
 15129 86D8 8D 9D 9F			sta BLITBOX.H
 15130 86DB 20 96 3A			jsr BLITBOX
 15131
 15132 86DE			@exit
 15133 					.ifdef @new
 15134 					lda <@VarData
 15135 					sta :ztmp
 15136 					lda >@VarData
 15137 					ldy #@VarDataSize-1
 15138 					jmp @FreeMem
 15139 					els
 15140 86DE 60				rts						; ret
 15141 					eif
 15142 				.endl
 15143
 15144 86DF			.local	CHECK_FIRE					; PROCEDURE
 15145
 15146 				; optimize OK (service.pas), line = 3002
 15147
 15148 86DF AD 82 9F			lda FIRE.AVL
 15149 86E2 D0 03 4C 41 88		jeq l_2EA1
 15150
 15151 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3004
 15152
 15153 86E7 20 8D 3A			jsr MOUSECLICK
 15154 86EA E8				inx
 15155 86EB E8				inx
 15156 86EC A0 01			ldy #1
 15157 86EE AD 92 9F			lda MOUSECLICK.RESULT
 15158 86F1 C9 01			cmp #$01
 15159 86F3 F0 01			beq @+
 15160 86F5 88				dey
 15161 				@
 15162 86F6 98				tya
 15163 86F7 2D 82 9F			and FIRE.AVL
 15164 86FA 95 95			sta :STACKORIGIN-1,x
 15165 86FC CA				dex
 15166 86FD CA				dex
 15167 86FE A0 01			ldy #1
 15168 8700 AD 81 9F			lda FIRE.SHOT
 15169 8703 F0 01			beq @+
 15170 8705 88				dey
 15171 				@
 15172 8706 98				tya
 15173 8707 35 97			and :STACKORIGIN+1,x
 15174 8709 F0 3A			jeq l_2EC1
 15175
 15176 				; optimize OK (service.pas), line = 3006
 15177
 15178 870B AD 11 9F			lda VAUS.WIDTH
 15179 870E 38 ED F9 9E			sub SHOOTS.WIDTH
 15180 8712 4A				lsr @
 15181 8713 18 6D 09 9F			add VAUS.X
 15182 8717 8D 7F 9F			sta FIRE.X
 15183
 15184 				; optimize OK (service.pas), line = 3007
 15185
 15186 871A AD 0A 9F			lda VAUS.Y
 15187 871D 38 ED FB 9E			sub SHOOTS.HEIGHT
 15188 8721 8D 80 9F			sta FIRE.Y
 15189
 15190 				; optimize OK (service.pas), line = 3008
 15191
 15192 8724 A9 01			lda #$01
 15193 8726 8D 81 9F			sta FIRE.SHOT
 15194
 15195 				; optimize OK (service.pas), line = 3009
 15196
 15197 8729 A9 00			lda #$00
 15198 872B 8D 83 9F			sta FIRE.NW
 15199
 15200 				; optimize OK (service.pas), line = 3010
 15201
 15202 872E A9 BC			lda #$BC
 15203 8730 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 15204 8733 A9 02			lda #$02
 15205 8735 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 15206 8738 A9 05			lda #$05
 15207 873A 8D 71 9E			sta BALL_BLOCK_SOUND.B
 15208 873D A9 00			lda #$00
 15209 873F 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 15210 8742 20 7D 38			jsr BALL_BLOCK_SOUND
 15211 8745			l_2EC1
 15212
 15213 				; optimize OK (service.pas), line = 3013
 15214
 15215 8745 AD 81 9F			lda FIRE.SHOT
 15216 8748 D0 03 4C 41 88		jeq l_2EFB
 15217
 15218 				; optimize OK (service.pas), line = 3015
 15219
 15220 874D AD 83 9F			lda FIRE.NW
 15221 8750 F0 03			jeq l_2F08
 15222 8752 20 74 86			jsr REMOVE_FIRE
 15223 8755			l_2F08
 15224
 15225 				; optimize OK (service.pas), line = 3016
 15226
 15227 8755 A9 01			lda #$01
 15228 8757 8D 83 9F			sta FIRE.NW
 15229
 15230 				; optimize OK (service.pas), line = 3018
 15231
 15232 875A AD 80 9F			lda FIRE.Y
 15233 875D 38 E9 04			sub #$04
 15234 8760 8D 80 9F			sta FIRE.Y
 15235
 15236 				; optimize OK (service.pas), line = 3019
 15237
 15238 8763 C9 16			cmp #$16
 15239 8765 B0 08			jcs l_2F23
 15240 8767 A9 00			lda #$00
 15241 8769 8D 81 9F			sta FIRE.SHOT
 15242 876C 4C 41 88			jmp l_2F31
 15243 876F			l_2F23
 15244
 15245 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3022
 15246
 15247 876F 20 14 86			jsr PLACE_FIRE
 15248
 15249 				; optimize OK (service.pas), line = 3024
 15250
 15251 8772 AD 80 9F			lda FIRE.Y
 15252 8775 38 E9 16			sub #$16
 15253 8778 10 03 4C 41 88		jmi l_2F58
 15254 877D AD 80 9F			lda FIRE.Y
 15255 8780 38 E9 16			sub #$16
 15256 8783 85 A0			sta :STACKORIGIN+10
 15257 8785 A9 00			lda #$00
 15258 8787 E9 00			sbc #$00
 15259 8789 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15260 878B A5 A0			lda :STACKORIGIN+10
 15261 878D C9 78			cmp #$78
 15262 878F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15263 8791 E9 00			sbc #$00
 15264 8793 50 02			svc
 15265 8795 49 80			eor #$80
 15266 8797 30 03 4C 41 88		jpl l_2F58
 15267
 15268 				; optimize OK (service.pas), line = 3026
 15269
 15270 879C AD 7F 9F			lda FIRE.X
 15271 879F 38 E9 09			sub #$09
 15272 87A2 4A				lsr @
 15273 87A3 4A				lsr @
 15274 87A4 4A				lsr @
 15275 87A5 4A				lsr @
 15276 87A6 8D 64 A1			sta X1
 15277 87A9 A9 00			lda #$00
 15278 87AB 8D 65 A1			sta X1+1
 15279
 15280 				; optimize OK (service.pas), line = 3027
 15281
 15282 87AE AD 80 9F			lda FIRE.Y
 15283 87B1 38 E9 16			sub #$16
 15284 87B4 4A				lsr @
 15285 87B5 4A				lsr @
 15286 87B6 4A				lsr @
 15287 87B7 8D 68 A1			sta Y1
 15288 87BA A9 00			lda #$00
 15289 87BC 8D 69 A1			sta Y1+1
 15290
 15291 				; optimize OK (service.pas), line = 3029
 15292
 15293 87BF AD 7F 9F			lda FIRE.X
 15294 87C2 18 6D F9 9E			add SHOOTS.WIDTH
 15295 87C6 38 E9 09			sub #$09
 15296 87C9 4A				lsr @
 15297 87CA 4A				lsr @
 15298 87CB 4A				lsr @
 15299 87CC 4A				lsr @
 15300 87CD 8D 66 A1			sta X2
 15301 87D0 A9 00			lda #$00
 15302 87D2 8D 67 A1			sta X2+1
 15303
 15304 				; optimize OK (service.pas), line = 3030
 15305
 15306 87D5 AD 68 A1			lda Y1
 15307 87D8 8D 6A A1			sta Y2
 15308 87DB AD 69 A1			lda Y1+1
 15309 87DE 8D 6B A1			sta Y2+1
 15310
 15311 				; optimize OK (service.pas), line = 3032
 15312
 15313 87E1 AD 68 A1			lda Y1
 15314 87E4 0A				asl @
 15315 87E5 0A				asl @
 15316 87E6 0A				asl @
 15317 87E7 0A				asl @
 15318 87E8 18 6D 64 A1			add X1
 15319 87EC A8				tay
 15320 87ED B9 00 DB			lda adr.WALL,y
 15321 87F0 D0 11			jne l_2FC1x
 15322 87F2 AD 6A A1			lda Y2
 15323 87F5 0A				asl @
 15324 87F6 0A				asl @
 15325 87F7 0A				asl @
 15326 87F8 0A				asl @
 15327 87F9 18 6D 66 A1			add X2
 15328 87FD A8				tay
 15329 87FE B9 00 DB			lda adr.WALL,y
 15330 8801 F0 3E			jeq l_2FC1
 15331 8803			l_2FC1x
 15332
 15333 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3034
 15334
 15335 8803 20 74 86			jsr REMOVE_FIRE
 15336
 15337 				; optimize OK (service.pas), line = 3035
 15338
 15339 8806 A9 00			lda #$00
 15340 8808 8D 81 9F			sta FIRE.SHOT
 15341
 15342 				; optimize OK (service.pas), line = 3037
 15343
 15344 880B AD 64 A1			lda X1
 15345 880E 8D CA A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15346 8811 AD 65 A1			lda X1+1
 15347 8814 8D CB A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15348 8817 AD 68 A1			lda Y1
 15349 881A 8D CC A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15350 881D AD 69 A1			lda Y1+1
 15351 8820 8D CD A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15352 8823 20 A3 67			jsr SHOOT_BLOCK_WITH_FIRE
 15353
 15354 				; optimize OK (service.pas), line = 3038
 15355
 15356 8826 AD 66 A1			lda X2
 15357 8829 8D CA A0			sta SHOOT_BLOCK_WITH_FIRE.XB
 15358 882C AD 67 A1			lda X2+1
 15359 882F 8D CB A0			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15360 8832 AD 6A A1			lda Y2
 15361 8835 8D CC A0			sta SHOOT_BLOCK_WITH_FIRE.YB
 15362 8838 AD 6B A1			lda Y2+1
 15363 883B 8D CD A0			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15364 883E 20 A3 67			jsr SHOOT_BLOCK_WITH_FIRE
 15365 8841			l_2F31
 15366 8841			l_2FC1
 15367 8841			l_2F58
 15368 8841			l_2EFB
 15369 8841			l_2EA1
 15370
 15371 				; ------------------------------------------------------------
 15372
 15373 = A164			X1	= DATAORIGIN+$03CF
 15374 = A166			X2	= DATAORIGIN+$03D1
 15375 = A168			Y1	= DATAORIGIN+$03D3
 15376 = A16A			Y2	= DATAORIGIN+$03D5
 15377
 15378 = A164			@VarData	= X1
 15379 = 0008			@VarDataSize	= 8
 15380
 15381 8841			@exit
 15382 					.ifdef @new
 15383 					lda <@VarData
 15384 					sta :ztmp
 15385 					lda >@VarData
 15386 					ldy #@VarDataSize-1
 15387 					jmp @FreeMem
 15388 					els
 15389 8841 60				rts						; ret
 15390 					eif
 15391 				.endl
 15392
 15393 8842			.local	REMOVE_FLUX					; PROCEDURE
 15394
 15395 				; optimize OK (service.pas), line = 3050
 15396
 15397 8842 AD B0 C0			lda adr.ROW+$B0
 15398 8845 18 69 D9			add #$D9
 15399 8848 8D 88 9F			sta HLP
 15400 884B AD B0 C1			lda adr.ROW+256+$B0
 15401 884E 69 00			adc #$00
 15402 8850 8D 89 9F			sta HLP+1
 15403
 15404 				; optimize OK (service.pas), line = 3052
 15405
 15406 8853 AD 88 9F			lda HLP
 15407 8856 8D 97 9F			sta BLITBOX.DST
 15408 8859 A9 50			lda #$50
 15409 885B 18 6D 89 9F			add HLP+1
 15410 885F 8D 98 9F			sta BLITBOX.DST+1
 15411 8862 A9 00			lda #$00
 15412 8864 69 00			adc #$00
 15413 8866 8D 99 9F			sta BLITBOX.DST+2
 15414 8869 A9 00			lda #$00
 15415 886B 69 00			adc #$00
 15416 886D 8D 9A 9F			sta BLITBOX.DST+3
 15417 8870 AD 95 9E			lda PLAYSCREEN.OFS
 15418 8873 18 6D 88 9F			add HLP
 15419 8877 8D 93 9F			sta BLITBOX.SRC
 15420 887A AD 96 9E			lda PLAYSCREEN.OFS+1
 15421 887D 6D 89 9F			adc HLP+1
 15422 8880 8D 94 9F			sta BLITBOX.SRC+1
 15423 8883 AD 97 9E			lda PLAYSCREEN.OFS+2
 15424 8886 69 00			adc #$00
 15425 8888 8D 95 9F			sta BLITBOX.SRC+2
 15426 888B AD 98 9E			lda PLAYSCREEN.OFS+3
 15427 888E 69 00			adc #$00
 15428 8890 8D 96 9F			sta BLITBOX.SRC+3
 15429 8893 A9 08			lda #$08
 15430 8895 8D 9B 9F			sta BLITBOX.W
 15431 8898 A9 00			lda #$00
 15432 889A 8D 9C 9F			sta BLITBOX.W+1
 15433 889D A9 14			lda #$14
 15434 889F 8D 9D 9F			sta BLITBOX.H
 15435 88A2 20 96 3A			jsr BLITBOX
 15436
 15437 88A5			@exit
 15438 					.ifdef @new
 15439 					lda <@VarData
 15440 					sta :ztmp
 15441 					lda >@VarData
 15442 					ldy #@VarDataSize-1
 15443 					jmp @FreeMem
 15444 					els
 15445 88A5 60				rts						; ret
 15446 					eif
 15447 				.endl
 15448
 15449 88A6			.local	CHECK_FLUX					; PROCEDURE
 15450
 15451 				; optimize OK (service.pas), line = 3066
 15452
 15453 88A6 AD 86 9F			lda SCRFLUXCNT
 15454 88A9 8D 6D A1			sta FX
 15455
 15456 				; optimize OK (service.pas), line = 3068
 15457
 15458 88AC AD 85 9F			lda SCRFLUX
 15459 88AF D0 03 4C 42 89		jeq l_300C
 15460
 15461 				; optimize OK (service.pas), line = 3071
 15462
 15463 88B4 A9 00			lda #$00
 15464 88B6 8D 6C A1			sta Y
 15465
 15466 88B9			l_3016
 15467 				; --- ForToDoCondition
 15468 88B9 AC 6C A1			ldy Y
 15469 88BC C0 14			cpy #$14
 15470 88BE B0 73			jcs l_3024
 15471
 15472 				; optimize OK (service.pas), line = 3073
 15473
 15474 88C0 A9 D9			lda #$D9
 15475 88C2 79 B0 C0			adc adr.ROW+$B0,y
 15476 88C5 8D B2 9F			sta BLITROW.DST
 15477 88C8 A9 50			lda #$50
 15478 88CA 79 B0 C1			adc adr.ROW+256+$B0,y
 15479 88CD 8D B3 9F			sta BLITROW.DST+1
 15480 88D0 A9 00			lda #$00
 15481 88D2 69 00			adc #$00
 15482 88D4 8D B4 9F			sta BLITROW.DST+2
 15483 88D7 A9 00			lda #$00
 15484 88D9 69 00			adc #$00
 15485 88DB 8D B5 9F			sta BLITROW.DST+3
 15486 88DE AD 6C A1			lda Y
 15487 88E1 18 6D 6D A1			add FX
 15488 88E5 85 A2			sta :STACKORIGIN+12
 15489 88E7 A9 00			lda #$00
 15490 88E9 69 00			adc #$00
 15491 88EB 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15492 88ED A9 00			lda #$00
 15493 88EF 06 A2			asl :STACKORIGIN+12
 15494 88F1 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15495 88F3 2A				rol @
 15496 88F4 06 A2			asl :STACKORIGIN+12
 15497 88F6 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15498 88F8 2A				rol @
 15499 88F9 06 A2			asl :STACKORIGIN+12
 15500 88FB 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15501 88FD 2A				rol @
 15502 88FE 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15503 8900 AD 05 9F			lda FLUX.OFS
 15504 8903 18 65 A2			add :STACKORIGIN+12
 15505 8906 8D AE 9F			sta BLITROW.SRC
 15506 8909 AD 06 9F			lda FLUX.OFS+1
 15507 890C 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15508 890E 8D AF 9F			sta BLITROW.SRC+1
 15509 8911 AD 07 9F			lda FLUX.OFS+2
 15510 8914 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15511 8916 8D B0 9F			sta BLITROW.SRC+2
 15512 8919 AD 08 9F			lda FLUX.OFS+3
 15513 891C 69 00			adc #$00
 15514 891E 8D B1 9F			sta BLITROW.SRC+3
 15515 8921 A9 08			lda #$08
 15516 8923 8D B6 9F			sta BLITROW.SIZE
 15517 8926 A9 00			lda #$00
 15518 8928 8D B7 9F			sta BLITROW.SIZE+1
 15519 892B 20 CE 3B			jsr BLITROW
 15520
 15521 				; --- ForToDoEpilog
 15522 892E EE 6C A1			inc Y
 15523 8931 D0 86			jne l_3016
 15524 8933			l_3024
 15525
 15526 				; optimize FAIL (0, service.pas), line = 3075
 15527
 15528 8933 EE 86 9F			inc SCRFLUXCNT
 15529
 15530 				; optimize OK (service.pas), line = 3076
 15531
 15532 8936 AD 86 9F			lda SCRFLUXCNT
 15533 8939 C9 15			cmp #$15
 15534 893B 90 05			jcc l_3063
 15535 893D A9 00			lda #$00
 15536 893F 8D 86 9F			sta SCRFLUXCNT
 15537 8942			l_3063
 15538 8942			l_300C
 15539
 15540 				; ------------------------------------------------------------
 15541
 15542 = A16C			Y	= DATAORIGIN+$03D7
 15543 = A16D			FX	= DATAORIGIN+$03D8
 15544
 15545 = A16C			@VarData	= Y
 15546 = 0002			@VarDataSize	= 2
 15547
 15548 8942			@exit
 15549 					.ifdef @new
 15550 					lda <@VarData
 15551 					sta :ztmp
 15552 					lda >@VarData
 15553 					ldy #@VarDataSize-1
 15554 					jmp @FreeMem
 15555 					els
 15556 8942 60				rts						; ret
 15557 					eif
 15558 				.endl
 15559
 15560 8943			.local	VAUS_OUT					; PROCEDURE
 15561
 15562 				; optimize FAIL ('NOSOUND', service.pas), line = 3084
 15563
 15564 8943 20 90 3C			jsr NOSOUND
 15565
 15566 				; optimize OK (service.pas), line = 3086
 15567
 15568 8946 AD 65 9F			lda CUR_PLAYER
 15569 8949 0A				asl @
 15570 894A 0A				asl @
 15571 894B A8				tay
 15572 894C B9 4A 9F			lda adr.SCORE.PLAYER,y
 15573 894F 18 69 10			add #$10
 15574 8952 99 4A 9F			sta adr.SCORE.PLAYER,y
 15575 8955 B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 15576 8958 69 27			adc #$27
 15577 895A 99 4B 9F			sta adr.SCORE.PLAYER+1,y
 15578 895D B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 15579 8960 69 00			adc #$00
 15580 8962 99 4C 9F			sta adr.SCORE.PLAYER+2,y
 15581 8965 B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 15582 8968 69 00			adc #$00
 15583 896A 99 4D 9F			sta adr.SCORE.PLAYER+3,y
 15584
 15585 				; optimize OK (service.pas), line = 3087
 15586
 15587 896D A9 00			lda #$00
 15588 896F 8D 48 9F			sta REMAIN_BLK
 15589
 15590 				; optimize OK (service.pas), line = 3089
 15591
 15592 8972 AD 09 9F			lda VAUS.X
 15593 8975 8D 72 A1			sta Z
 15594 8978 A9 00			lda #$00
 15595 897A 8D 73 A1			sta Z+1
 15596
 15597 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3091
 15598
 15599 897D 20 24 44			jsr WAIT_VBL
 15600
 15601 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3092
 15602
 15603 8980 20 FC 51			jsr REMOVE_VAUS
 15604
 15605 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3093
 15606
 15607 8983 20 73 52			jsr PLACE_VAUS
 15608
 15609 				; optimize OK (service.pas), line = 3095
 15610
 15611 8986 AD 72 A1			lda Z
 15612 8989 8D 6E A1			sta X
 15613 898C AD 73 A1			lda Z+1
 15614 898F 8D 6F A1			sta X+1
 15615 8992 AD 72 A1			lda Z
 15616 8995 18 69 2C			add #$2C
 15617 8998 8D AB 89			sta @FORTMP_308E_0
 15618 899B AD 73 A1			lda Z+1
 15619 899E 69 00			adc #$00
 15620 89A0 8D A4 89			sta @FORTMP_308E_1
 15621
 15622 89A3			l_3091
 15623 				; --- ForToDoCondition
 15624 89A3 A9 00			lda @FORTMP_308E_1::#$00
 15625 89A5 CD 6F A1			cmp X+1
 15626 89A8 D0 05			bne @+
 15627 89AA A9 00			lda @FORTMP_308E_0::#$00
 15628 89AC CD 6E A1			cmp X
 15629 				@
 15630 89AF B0 03 4C 48 8A		jcc l_309D
 15631
 15632 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3097
 15633
 15634 89B4 20 24 44			jsr WAIT_VBL
 15635
 15636 				; optimize OK (service.pas), line = 3099
 15637
 15638 89B7 AD 09 9F			lda VAUS.X
 15639 89BA 8D 0B 9F			sta VAUS.OLDX
 15640 89BD A9 00			lda #$00
 15641 89BF 8D 0C 9F			sta VAUS.OLDX+1
 15642
 15643 				; optimize OK (service.pas), line = 3100
 15644
 15645 89C2 AD 6E A1			lda X
 15646 89C5 8D 09 9F			sta VAUS.X
 15647
 15648 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3101
 15649
 15650 89C8 20 FC 51			jsr REMOVE_VAUS
 15651
 15652 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3102
 15653
 15654 89CB 20 A6 88			jsr CHECK_FLUX
 15655
 15656 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3103
 15657
 15658 89CE 20 73 52			jsr PLACE_VAUS
 15659
 15660 				; optimize OK (service.pas), line = 3105
 15661
 15662 89D1 AC 0A 9F			ldy VAUS.Y
 15663 89D4 B9 00 C0			lda adr.ROW,y
 15664 89D7 18 69 E1			add #$E1
 15665 89DA 8D 88 9F			sta HLP
 15666 89DD B9 00 C1			lda adr.ROW+256,y
 15667 89E0 69 00			adc #$00
 15668 89E2 8D 89 9F			sta HLP+1
 15669
 15670 				; optimize OK (service.pas), line = 3107
 15671
 15672 89E5 AD 88 9F			lda HLP
 15673 89E8 8D 97 9F			sta BLITBOX.DST
 15674 89EB A9 50			lda #$50
 15675 89ED 18 6D 89 9F			add HLP+1
 15676 89F1 8D 98 9F			sta BLITBOX.DST+1
 15677 89F4 A9 00			lda #$00
 15678 89F6 69 00			adc #$00
 15679 89F8 8D 99 9F			sta BLITBOX.DST+2
 15680 89FB A9 00			lda #$00
 15681 89FD 69 00			adc #$00
 15682 89FF 8D 9A 9F			sta BLITBOX.DST+3
 15683 8A02 AD 95 9E			lda PLAYSCREEN.OFS
 15684 8A05 18 6D 88 9F			add HLP
 15685 8A09 8D 93 9F			sta BLITBOX.SRC
 15686 8A0C AD 96 9E			lda PLAYSCREEN.OFS+1
 15687 8A0F 6D 89 9F			adc HLP+1
 15688 8A12 8D 94 9F			sta BLITBOX.SRC+1
 15689 8A15 AD 97 9E			lda PLAYSCREEN.OFS+2
 15690 8A18 69 00			adc #$00
 15691 8A1A 8D 95 9F			sta BLITBOX.SRC+2
 15692 8A1D AD 98 9E			lda PLAYSCREEN.OFS+3
 15693 8A20 69 00			adc #$00
 15694 8A22 8D 96 9F			sta BLITBOX.SRC+3
 15695 8A25 A9 28			lda #$28
 15696 8A27 8D 9B 9F			sta BLITBOX.W
 15697 8A2A A9 00			lda #$00
 15698 8A2C 8D 9C 9F			sta BLITBOX.W+1
 15699 8A2F AD 12 9F			lda VAUS.HEIGHT
 15700 8A32 8D 9D 9F			sta BLITBOX.H
 15701 8A35 20 96 3A			jsr BLITBOX
 15702
 15703 				; --- ForToDoEpilog
 15704 8A38 EE 6E A1			inc X
 15705 8A3B F0 03 4C A3 89		jne l_3091
 15706 8A40 EE 6F A1			inc X+1
 15707 8A43 F0 03 4C A3 89		jne l_3091
 15708 8A48			l_309D
 15709
 15710 				; ------------------------------------------------------------
 15711
 15712 = A16E			X	= DATAORIGIN+$03D9
 15713 = A170			Y	= DATAORIGIN+$03DB
 15714 = A172			Z	= DATAORIGIN+$03DD
 15715
 15716 = A16E			@VarData	= X
 15717 = 0006			@VarDataSize	= 6
 15718
 15719 8A48			@exit
 15720 					.ifdef @new
 15721 					lda <@VarData
 15722 					sta :ztmp
 15723 					lda >@VarData
 15724 					ldy #@VarDataSize-1
 15725 					jmp @FreeMem
 15726 					els
 15727 8A48 60				rts						; ret
 15728 					eif
 15729 				.endl
 15730
 15731 8A49			.local	CHECK_BONUS_TYPE				; PROCEDURE
 15732
 15733 				; optimize OK (service.pas), line = 3122
 15734
 15735 8A49 AD 15 9F			lda VAUS.LETTER
 15736 8A4C 10 03 4C FF 8A		jmi l_30E4
 15737 8A51 D0 03 4C FF 8A		jeq l_30E4
 15738
 15739 				; optimize OK (service.pas), line = 3124
 15740
 15741 8A56 A0 00			ldy #$00
 15742 8A58 AD 15 9F			lda VAUS.LETTER
 15743 8A5B 10 01			spl
 15744 8A5D 88				dey
 15745 8A5E 38 E9 01			sub #$01
 15746 8A61 8D 7D 9F			sta LETT.LAST
 15747 8A64 98				tya
 15748 8A65 E9 00			sbc #$00
 15749 8A67 8D 7E 9F			sta LETT.LAST+1
 15750
 15751 				; optimize OK (service.pas), line = 3125
 15752
 15753 8A6A AC 7A A1 84 84 AC + 	mwy B2 :bp2
 15754 8A74 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15755 8A76 B1 84			lda (:bp2),y
 15756 8A78 F0 0F			jeq l_30FB
 15757 8A7A AD 7A A1			lda B2
 15758 8A7D 8D 04 A0			sta REMOVE_BALL.BALL
 15759 8A80 AD 7B A1			lda B2+1
 15760 8A83 8D 05 A0			sta REMOVE_BALL.BALL+1
 15761 8A86 20 9E 43			jsr REMOVE_BALL
 15762 8A89			l_30FB
 15763
 15764 				; optimize OK (service.pas), line = 3126
 15765
 15766 8A89 AC 7E A1 84 84 AC + 	mwy B3 :bp2
 15767 8A93 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15768 8A95 B1 84			lda (:bp2),y
 15769 8A97 F0 0F			jeq l_310D
 15770 8A99 AD 7E A1			lda B3
 15771 8A9C 8D 04 A0			sta REMOVE_BALL.BALL
 15772 8A9F AD 7F A1			lda B3+1
 15773 8AA2 8D 05 A0			sta REMOVE_BALL.BALL+1
 15774 8AA5 20 9E 43			jsr REMOVE_BALL
 15775 8AA8			l_310D
 15776
 15777 				; optimize OK (service.pas), line = 3127
 15778
 15779 8AA8 AC 7A A1 84 84 AC + 	mwy B2 :bp2
 15780 8AB2 A0 17			ldy #B2.INPLAY-DATAORIGIN
 15781 8AB4 A9 00			lda #$00
 15782 8AB6 91 84			sta (:bp2),y
 15783
 15784 				; optimize OK (service.pas), line = 3128
 15785
 15786 8AB8 AC 7E A1 84 84 AC + 	mwy B3 :bp2
 15787 8AC2 A0 17			ldy #B3.INPLAY-DATAORIGIN
 15788 8AC4 91 84			sta (:bp2),y
 15789
 15790 				; optimize OK (service.pas), line = 3129
 15791
 15792 8AC6 8D 85 9F			sta SCRFLUX
 15793
 15794 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3130
 15795
 15796 8AC9 20 42 88			jsr REMOVE_FLUX
 15797
 15798 				; optimize OK (service.pas), line = 3132
 15799
 15800 8ACC AD 15 9F			lda VAUS.LETTER
 15801 8ACF C9 06			cmp #$06
 15802 8AD1 F0 2C			jeq l_3132
 15803
 15804 				; optimize OK (service.pas), line = 3134
 15805
 15806 8AD3 AC 76 A1 84 84 AC + 	mwy B1 :bp2
 15807 8ADD A0 18			ldy #B1.LAUNCH-DATAORIGIN
 15808 8ADF A9 00			lda #$00
 15809 8AE1 91 84			sta (:bp2),y
 15810
 15811 				; optimize OK (service.pas), line = 3135
 15812
 15813 8AE3 AC 7A A1 84 84 AC + 	mwy B2 :bp2
 15814 8AED A0 18			ldy #B2.LAUNCH-DATAORIGIN
 15815 8AEF 91 84			sta (:bp2),y
 15816
 15817 				; optimize OK (service.pas), line = 3136
 15818
 15819 8AF1 AC 7E A1 84 84 AC + 	mwy B3 :bp2
 15820 8AFB A0 18			ldy #B3.LAUNCH-DATAORIGIN
 15821 8AFD 91 84			sta (:bp2),y
 15822 8AFF			l_3132
 15823 8AFF			l_30E4
 15824
 15825 				; optimize OK (service.pas), line = 3140
 15826
 15827 8AFF AD 15 9F			lda VAUS.LETTER
 15828 8B02 8D 84 A1			sta @CASETMP_000A
 15829 8B05 C9 01			cmp #$01
 15830 8B07 D0 4D			jne l_314E
 15831 				@
 15832
 15833 				; optimize OK (service.pas), line = 3143
 15834
 15835 8B09 AD 81 9F			lda FIRE.SHOT
 15836 8B0C F0 03			jeq l_315A
 15837 8B0E 20 74 86			jsr REMOVE_FIRE
 15838 8B11			l_315A
 15839
 15840 				; optimize OK (service.pas), line = 3144
 15841
 15842 8B11 AD B1 9E 8D 99 9E + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 15843
 15844 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3145
 15845
 15846 8B41 20 9C 51			jsr MODIFY_VAUS
 15847
 15848 				; optimize OK (service.pas), line = 3146
 15849
 15850 8B44 A9 00			lda #$00
 15851 8B46 8D 15 9F			sta VAUS.LETTER
 15852
 15853 				; optimize OK (service.pas), line = 3147
 15854
 15855 8B49 A9 01			lda #$01
 15856 8B4B 8D 82 9F			sta FIRE.AVL
 15857
 15858 				; optimize OK (service.pas), line = 3148
 15859
 15860 8B4E A9 00			lda #$00
 15861 8B50 8D 81 9F			sta FIRE.SHOT
 15862 8B53 4C 84 8D			jmp a_000A
 15863 8B56			l_314E
 15864 8B56 C9 02			cmp #$02
 15865 8B58 D0 46			jne l_3174
 15866
 15867 				; optimize OK (service.pas), line = 3152
 15868
 15869 8B5A AD 81 9F			lda FIRE.SHOT
 15870 8B5D F0 03			jeq l_3180
 15871 8B5F 20 74 86			jsr REMOVE_FIRE
 15872 8B62			l_3180
 15873
 15874 				; optimize OK (service.pas), line = 3153
 15875
 15876 8B62 AD A9 9E 8D 99 9E + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 15877
 15878 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3154
 15879
 15880 8B92 20 9C 51			jsr MODIFY_VAUS
 15881
 15882 				; optimize OK (service.pas), line = 3155
 15883
 15884 8B95 A9 00			lda #$00
 15885 8B97 8D 15 9F			sta VAUS.LETTER
 15886
 15887 				; optimize OK (service.pas), line = 3156
 15888
 15889 8B9A 8D 82 9F			sta FIRE.AVL
 15890 8B9D 4C 84 8D			jmp a_000A
 15891 8BA0			l_3174
 15892 8BA0 C9 03			cmp #$03
 15893 8BA2 D0 4B			jne l_3196
 15894
 15895 				; optimize OK (service.pas), line = 3160
 15896
 15897 8BA4 AD 81 9F			lda FIRE.SHOT
 15898 8BA7 F0 03			jeq l_31A2
 15899 8BA9 20 74 86			jsr REMOVE_FIRE
 15900 8BAC			l_31A2
 15901
 15902 				; optimize OK (service.pas), line = 3161
 15903
 15904 8BAC AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15905
 15906 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3162
 15907
 15908 8BDC 20 9C 51			jsr MODIFY_VAUS
 15909
 15910 				; optimize OK (service.pas), line = 3163
 15911
 15912 8BDF A9 00			lda #$00
 15913 8BE1 8D 15 9F			sta VAUS.LETTER
 15914
 15915 				; optimize OK (service.pas), line = 3164
 15916
 15917 8BE4 8D 82 9F			sta FIRE.AVL
 15918
 15919 				; optimize OK (service.pas), line = 3165
 15920
 15921 8BE7 A9 01			lda #$01
 15922 8BE9 8D 85 9F			sta SCRFLUX
 15923 8BEC 4C 84 8D			jmp a_000A
 15924 8BEF			l_3196
 15925 8BEF C9 04			cmp #$04
 15926 8BF1 D0 3E			jne l_31BC
 15927
 15928 				; optimize OK (service.pas), line = 3169
 15929
 15930 8BF3 AD 81 9F			lda FIRE.SHOT
 15931 8BF6 F0 03			jeq l_31C8
 15932 8BF8 20 74 86			jsr REMOVE_FIRE
 15933 8BFB			l_31C8
 15934
 15935 				; optimize OK (service.pas), line = 3170
 15936
 15937 8BFB AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15938
 15939 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3171
 15940
 15941 8C2B 20 9C 51			jsr MODIFY_VAUS
 15942 				; optimize OK (service.pas), line = 3172
 15943 8C2E 4C C8 8C			jmp s_3205
 15944 8C31			l_31BC
 15945 8C31 C9 05			cmp #$05
 15946 8C33 F0 03 4C CB 8C		jne l_31DA
 15947
 15948 				; optimize OK (service.pas), line = 3176
 15949
 15950 8C38 AD 81 9F			lda FIRE.SHOT
 15951 8C3B F0 03			jeq l_31E6
 15952 8C3D 20 74 86			jsr REMOVE_FIRE
 15953 8C40			l_31E6
 15954
 15955 				; optimize OK (service.pas), line = 3177
 15956
 15957 8C40 AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 15958
 15959 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3178
 15960
 15961 8C70 20 9C 51			jsr MODIFY_VAUS
 15962
 15963 				; optimize OK (service.pas), line = 3179
 15964
 15965 8C73 A9 00			lda #$00
 15966 8C75 8D 15 9F			sta VAUS.LETTER
 15967
 15968 				; optimize OK (service.pas), line = 3180
 15969
 15970 8C78 AC 76 A1 84 84 AC + 	mwy B1 :bp2
 15971 8C82 A0 0C			ldy #B1.SPEED-DATAORIGIN
 15972 8C84 B1 84			lda (:bp2),y
 15973 8C86 38 E9 F4			sub #$F4
 15974 8C89 8D C4 9F			sta MAX.A
 15975 8C8C C8				iny
 15976 8C8D B1 84			lda (:bp2),y
 15977 8C8F E9 01			sbc #$01
 15978 8C91 8D C5 9F			sta MAX.A+1
 15979 8C94 A9 F4			lda #$F4
 15980 8C96 8D C6 9F			sta MAX.B
 15981 8C99 A9 01			lda #$01
 15982 8C9B 8D C7 9F			sta MAX.B+1
 15983 8C9E 20 92 3C			jsr MAX
 15984 8CA1 AD C8 9F			lda MAX.RESULT
 15985 8CA4 8D 82 A1			sta X
 15986 8CA7 AD C9 9F			lda MAX.RESULT+1
 15987 8CAA 8D 83 A1			sta X+1
 15988
 15989 				; optimize OK (service.pas), line = 3181
 15990
 15991 8CAD AD 76 A1			lda B1
 15992 8CB0 8D 0E A0			sta SET_BALL_SPEED.BALL
 15993 8CB3 AD 77 A1			lda B1+1
 15994 8CB6 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 15995 8CB9 AD 82 A1			lda X
 15996 8CBC 8D 12 A0			sta SET_BALL_SPEED.SPEED
 15997 8CBF AD 83 A1			lda X+1
 15998 8CC2 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 15999 8CC5 20 01 45			jsr SET_BALL_SPEED
 16000 8CC8			s_3205
 16001 				; optimize OK (service.pas), line = 3182
 16002 8CC8 4C 0A 8D			jmp s_3223
 16003 8CCB			l_31DA
 16004 8CCB C9 06			cmp #$06
 16005 8CCD D0 3E			jne l_320C
 16006
 16007 				; optimize OK (service.pas), line = 3186
 16008
 16009 8CCF AD 81 9F			lda FIRE.SHOT
 16010 8CD2 F0 03			jeq l_3218
 16011 8CD4 20 74 86			jsr REMOVE_FIRE
 16012 8CD7			l_3218
 16013
 16014 				; optimize OK (service.pas), line = 3187
 16015
 16016 8CD7 AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16017
 16018 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3188
 16019
 16020 8D07 20 9C 51			jsr MODIFY_VAUS
 16021 8D0A			s_3223
 16022 				; optimize OK (service.pas), line = 3189
 16023 8D0A 4C 7F 8D			jmp s_3253
 16024 8D0D			l_320C
 16025 8D0D C9 07			cmp #$07
 16026 8D0F D0 73			jne l_322A
 16027
 16028 				; optimize OK (service.pas), line = 3193
 16029
 16030 8D11 AD 81 9F			lda FIRE.SHOT
 16031 8D14 F0 03			jeq l_3236
 16032 8D16 20 74 86			jsr REMOVE_FIRE
 16033 8D19			l_3236
 16034
 16035 				; optimize OK (service.pas), line = 3194
 16036
 16037 8D19 AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16038
 16039 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3195
 16040
 16041 8D49 20 9C 51			jsr MODIFY_VAUS
 16042
 16043 				; optimize OK (service.pas), line = 3196
 16044
 16045 8D4C A9 00			lda #$00
 16046 8D4E 8D 15 9F			sta VAUS.LETTER
 16047
 16048 				; optimize OK (service.pas), line = 3197
 16049
 16050 8D51 AC 65 9F			ldy CUR_PLAYER
 16051 8D54 B9 59 9F			lda adr.SCORE.LIVES,y
 16052 8D57 18 69 01			add #$01
 16053 8D5A 99 59 9F			sta adr.SCORE.LIVES,y
 16054
 16055 				; optimize OK (service.pas), line = 3198
 16056
 16057 8D5D 8D 53 A1			sta PLOT_LIVES.LIVES
 16058 8D60 A9 00			lda #$00
 16059 8D62 8D 54 A1			sta PLOT_LIVES.LIVES+1
 16060 8D65 20 43 83			jsr PLOT_LIVES
 16061
 16062 				; optimize OK (service.pas), line = 3199
 16063
 16064 8D68 A9 D0			lda #$D0
 16065 8D6A 8D 6F 9E			sta BALL_BLOCK_SOUND.A
 16066 8D6D A9 07			lda #$07
 16067 8D6F 8D 70 9E			sta BALL_BLOCK_SOUND.A+1
 16068 8D72 A9 0A			lda #$0A
 16069 8D74 8D 71 9E			sta BALL_BLOCK_SOUND.B
 16070 8D77 A9 00			lda #$00
 16071 8D79 8D 72 9E			sta BALL_BLOCK_SOUND.B+1
 16072 8D7C 20 7D 38			jsr BALL_BLOCK_SOUND
 16073 8D7F			s_3253
 16074
 16075 				; optimize OK (service.pas), line = 3200
 16076
 16077 8D7F A9 00			lda #$00
 16078 8D81 8D 82 9F			sta FIRE.AVL
 16079 8D84			l_322A
 16080 8D84			a_000A
 16081
 16082 				; ------------------------------------------------------------
 16083
 16084 = A176			B1	= DATAORIGIN+$03E1
 16085 = 9D95			B1.X	= DATAORIGIN+$0000
 16086 = 9D97			B1.Y	= DATAORIGIN+$0002
 16087 = 9D99			B1.FINEX	= DATAORIGIN+$0004
 16088 = 9D9B			B1.FINEY	= DATAORIGIN+$0006
 16089 = 9D9D			B1.OLDX	= DATAORIGIN+$0008
 16090 = 9D9F			B1.OLDY	= DATAORIGIN+$000A
 16091 = 9DA1			B1.SPEED	= DATAORIGIN+$000C
 16092 = 9DA3			B1.FINESPEED	= DATAORIGIN+$000E
 16093 = 9DA5			B1.SPEEDX	= DATAORIGIN+$0010
 16094 = 9DA7			B1.SPEEDY	= DATAORIGIN+$0012
 16095 = 9DA9			B1.SBD	= DATAORIGIN+$0014
 16096 = 9DAB			B1.BRWHIT	= DATAORIGIN+$0016
 16097 = 9DAC			B1.INPLAY	= DATAORIGIN+$0017
 16098 = 9DAD			B1.LAUNCH	= DATAORIGIN+$0018
 16099 = 9DAE			B1.ONVAUS	= DATAORIGIN+$0019
 16100 = 9DB0			B1.STM	= DATAORIGIN+$001B
 16101 = A17A			B2	= DATAORIGIN+$03E5
 16102 = 9D95			B2.X	= DATAORIGIN+$0000
 16103 = 9D97			B2.Y	= DATAORIGIN+$0002
 16104 = 9D99			B2.FINEX	= DATAORIGIN+$0004
 16105 = 9D9B			B2.FINEY	= DATAORIGIN+$0006
 16106 = 9D9D			B2.OLDX	= DATAORIGIN+$0008
 16107 = 9D9F			B2.OLDY	= DATAORIGIN+$000A
 16108 = 9DA1			B2.SPEED	= DATAORIGIN+$000C
 16109 = 9DA3			B2.FINESPEED	= DATAORIGIN+$000E
 16110 = 9DA5			B2.SPEEDX	= DATAORIGIN+$0010
 16111 = 9DA7			B2.SPEEDY	= DATAORIGIN+$0012
 16112 = 9DA9			B2.SBD	= DATAORIGIN+$0014
 16113 = 9DAB			B2.BRWHIT	= DATAORIGIN+$0016
 16114 = 9DAC			B2.INPLAY	= DATAORIGIN+$0017
 16115 = 9DAD			B2.LAUNCH	= DATAORIGIN+$0018
 16116 = 9DAE			B2.ONVAUS	= DATAORIGIN+$0019
 16117 = 9DB0			B2.STM	= DATAORIGIN+$001B
 16118 = A17E			B3	= DATAORIGIN+$03E9
 16119 = 9D95			B3.X	= DATAORIGIN+$0000
 16120 = 9D97			B3.Y	= DATAORIGIN+$0002
 16121 = 9D99			B3.FINEX	= DATAORIGIN+$0004
 16122 = 9D9B			B3.FINEY	= DATAORIGIN+$0006
 16123 = 9D9D			B3.OLDX	= DATAORIGIN+$0008
 16124 = 9D9F			B3.OLDY	= DATAORIGIN+$000A
 16125 = 9DA1			B3.SPEED	= DATAORIGIN+$000C
 16126 = 9DA3			B3.FINESPEED	= DATAORIGIN+$000E
 16127 = 9DA5			B3.SPEEDX	= DATAORIGIN+$0010
 16128 = 9DA7			B3.SPEEDY	= DATAORIGIN+$0012
 16129 = 9DA9			B3.SBD	= DATAORIGIN+$0014
 16130 = 9DAB			B3.BRWHIT	= DATAORIGIN+$0016
 16131 = 9DAC			B3.INPLAY	= DATAORIGIN+$0017
 16132 = 9DAD			B3.LAUNCH	= DATAORIGIN+$0018
 16133 = 9DAE			B3.ONVAUS	= DATAORIGIN+$0019
 16134 = 9DB0			B3.STM	= DATAORIGIN+$001B
 16135 = A182			X	= DATAORIGIN+$03ED
 16136 = A184			@CASETMP_000A	= DATAORIGIN+$03EF
 16137
 16138 = A176			@VarData	= B1
 16139 = 0009			@VarDataSize	= 9
 16140
 16141 8D84			@exit
 16142 					.ifdef @new
 16143 					lda <@VarData
 16144 					sta :ztmp
 16145 					lda >@VarData
 16146 					ldy #@VarDataSize-1
 16147 					jmp @FreeMem
 16148 					els
 16149 8D84 60				rts						; ret
 16150 					eif
 16151 				.endl
 16152
 16153 8D85			.local	DEVIATE_BALL					; PROCEDURE
 16154
 16155 				; --- RepeatUntilProlog
 16156 8D85			l_3261
 16157
 16158 				; optimize OK (service.pas), line = 3213
 16159
 16160 8D85 AD 85 A1			lda BALL
 16161 8D88 8D 2E A0			sta GET_BALL_DIRECTION.BALL
 16162 8D8B AD 86 A1			lda BALL+1
 16163 8D8E 8D 2F A0			sta GET_BALL_DIRECTION.BALL+1
 16164 8D91 20 C7 48			jsr GET_BALL_DIRECTION
 16165 8D94 E8				inx
 16166 8D95 AD 32 A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16167 8D9A AD 33 A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16168 8D9F A9 1E			lda #$1E
 16169 8DA1 20 41 33			jsr SYSTEM.RANDOM.@010180000
 16170 8DA4 E8				inx
 16171 8DA5 AD CC 9D 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16172 8DAA A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16173 8DAE 20 E5 20			jsr addAX_CX
 16174 8DB1 B5 95			lda :STACKORIGIN-1,x
 16175 8DB3 38 E9 0F			sub #$0F
 16176 8DB6 8D 89 A1			sta TEMP
 16177 8DB9 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16178 8DBB E9 00			sbc #$00
 16179 8DBD 8D 8A A1			sta TEMP+1
 16180 8DC0 CA				dex
 16181 8DC1 CA				dex
 16182
 16183 				; optimize OK (service.pas), line = 3214
 16184
 16185 8DC2 A9 5A			lda #$5A
 16186 8DC4 85 8E			sta @SMALLINT.MOD.B
 16187 8DC6 A9 00			lda #$00
 16188 8DC8 85 8F			sta @SMALLINT.MOD.B+1
 16189 8DCA AD 89 A1			lda TEMP
 16190 8DCD 85 86			sta @SMALLINT.MOD.A
 16191 8DCF AD 8A A1			lda TEMP+1
 16192 8DD2 85 87			sta @SMALLINT.MOD.A+1
 16193 8DD4 20 80 22			jsr @SMALLINT.MOD
 16194 8DD7 A5 92			lda @SMALLINT.MOD.RESULT
 16195 8DD9 C9 1F			cmp #$1F
 16196 8DDB A5 93			lda @SMALLINT.MOD.RESULT+1
 16197 8DDD E9 00			sbc #$00
 16198 8DDF 50 02			svc
 16199 8DE1 49 80			eor #$80
 16200 8DE3 30 A0			jmi l_3261
 16201 8DE5 A9 5A			lda #$5A
 16202 8DE7 85 8E			sta @SMALLINT.MOD.B
 16203 8DE9 A9 00			lda #$00
 16204 8DEB 85 8F			sta @SMALLINT.MOD.B+1
 16205 8DED AD 89 A1			lda TEMP
 16206 8DF0 85 86			sta @SMALLINT.MOD.A
 16207 8DF2 AD 8A A1			lda TEMP+1
 16208 8DF5 85 87			sta @SMALLINT.MOD.A+1
 16209 8DF7 20 80 22			jsr @SMALLINT.MOD
 16210 8DFA A5 92			lda @SMALLINT.MOD.RESULT
 16211 8DFC C9 3C			cmp #$3C
 16212 8DFE A5 93			lda @SMALLINT.MOD.RESULT+1
 16213 8E00 E9 00			sbc #$00
 16214 8E02 50 02			svc
 16215 8E04 49 80			eor #$80
 16216 8E06 30 03 4C 85 8D		jpl l_3261
 16217
 16218 				; optimize OK (service.pas), line = 3216
 16219
 16220 8E0B AD 85 A1			lda BALL
 16221 8E0E 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 16222 8E11 AD 86 A1			lda BALL+1
 16223 8E14 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 16224 8E17 AD 89 A1			lda TEMP
 16225 8E1A 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 16226 8E1D AD 8A A1			lda TEMP+1
 16227 8E20 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 16228 8E23 20 E4 46			jsr SET_BALL_DIRECTION
 16229
 16230 				; optimize OK (service.pas), line = 3217
 16231
 16232 8E26 AC 85 A1 84 84 AC + 	mwy BALL :bp2
 16233 8E30 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16234 8E32 B1 84			lda (:bp2),y
 16235 8E34 8D 12 A0			sta SET_BALL_SPEED.SPEED
 16236 8E37 C8				iny
 16237 8E38 B1 84			lda (:bp2),y
 16238 8E3A 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 16239 8E3D AD 85 A1			lda BALL
 16240 8E40 8D 0E A0			sta SET_BALL_SPEED.BALL
 16241 8E43 AD 86 A1			lda BALL+1
 16242 8E46 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 16243 8E49 20 01 45			jsr SET_BALL_SPEED
 16244
 16245 				; optimize OK (service.pas), line = 3218
 16246
 16247 8E4C AC 85 A1 84 84 AC + 	mwy BALL :bp2
 16248 8E56 A0 14			ldy #BALL.SBD-DATAORIGIN
 16249 8E58 A9 00			lda #$00
 16250 8E5A 91 84			sta (:bp2),y
 16251 8E5C C8				iny
 16252 8E5D 91 84			sta (:bp2),y
 16253
 16254 				; ------------------------------------------------------------
 16255
 16256 = A185			BALL	= DATAORIGIN+$03F0
 16257 = 9D95			BALL.X	= DATAORIGIN+$0000
 16258 = 9D97			BALL.Y	= DATAORIGIN+$0002
 16259 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
 16260 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
 16261 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
 16262 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
 16263 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
 16264 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
 16265 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
 16266 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
 16267 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
 16268 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
 16269 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
 16270 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
 16271 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
 16272 = 9DB0			BALL.STM	= DATAORIGIN+$001B
 16273 = A189			TEMP	= DATAORIGIN+$03F4
 16274
 16275 = A185			@VarData	= BALL
 16276 = 0004			@VarDataSize	= 4
 16277
 16278 8E5F			@exit
 16279 					.ifdef @new
 16280 					lda <@VarData
 16281 					sta :ztmp
 16282 					lda >@VarData
 16283 					ldy #@VarDataSize-1
 16284 					jmp @FreeMem
 16285 					els
 16286 8E5F 60				rts						; ret
 16287 					eif
 16288 				.endl
 16289
 16290 8E60			.local	BOUNCEBALL					; FUNCTION
 16291
 16292 8E60 4C D5 8F			jmp l_32A1
 16293
 16294 8E63			.local	CHECK_BALL					; PROCEDURE
 16295
 16296 				; optimize OK (service.pas), line = 3248
 16297
 16298 8E63 AC ED A1 84 84 AC + 	mwy BALL :bp2
 16299 8E6D A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16300 8E6F B1 84			lda (:bp2),y
 16301 8E71 F0 65			jeq l_32B0
 16302
 16303 				; optimize OK (service.pas), line = 3251
 16304
 16305 8E73 A0 02			ldy #BALL.Y-DATAORIGIN
 16306 8E75 B1 84			lda (:bp2),y
 16307 8E77 C8				iny
 16308 8E78 C9 16			cmp #$16
 16309 8E7A B1 84			lda (:bp2),y
 16310 8E7C E9 00			sbc #$00
 16311 8E7E 50 02			svc
 16312 8E80 49 80			eor #$80
 16313 8E82 30 20			jmi l_32CD
 16314 8E84 A0 02			ldy #BALL.Y-DATAORIGIN
 16315 8E86 B1 84			lda (:bp2),y
 16316 8E88 C8				iny
 16317 8E89 C9 8E			cmp #$8E
 16318 8E8B B1 84			lda (:bp2),y
 16319 8E8D E9 00			sbc #$00
 16320 8E8F 50 02			svc
 16321 8E91 49 80			eor #$80
 16322 8E93 10 0F			jpl l_32CD
 16323
 16324 				; optimize OK (service.pas), line = 3252
 16325
 16326 8E95 AD ED A1			lda BALL
 16327 8E98 8D CF A0			sta BALL_HIT_BLOCK.BALL
 16328 8E9B AD EE A1			lda BALL+1
 16329 8E9E 8D D0 A0			sta BALL_HIT_BLOCK.BALL+1
 16330 8EA1 20 BE 68			jsr BALL_HIT_BLOCK
 16331 8EA4			l_32CD
 16332
 16333 				; optimize OK (service.pas), line = 3254
 16334
 16335 8EA4 AD ED A1			lda BALL
 16336 8EA7 8D 08 A0			sta SET_BALL.BALL
 16337 8EAA AD EE A1			lda BALL+1
 16338 8EAD 8D 09 A0			sta SET_BALL.BALL+1
 16339 8EB0 20 28 44			jsr SET_BALL
 16340
 16341 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3255
 16342
 16343 8EB3 E8				inx
 16344 8EB4 AD ED A1 95 96		mva BALL :STACKORIGIN,x
 16345 8EB9 AD EE A1 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16346 8EBE 20 40 4B			jsr BALL_SPEED
 16347 8EC1 AC ED A1 84 84 AC + 	mwy BALL :bp2
 16348 8ECB A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16349 8ECD AD 56 A0			lda BALL_SPEED.RESULT
 16350 8ED0 91 84			sta (:bp2),y
 16351 8ED2 C8				iny
 16352 8ED3 AD 57 A0			lda BALL_SPEED.RESULT+1
 16353 8ED6 91 84			sta (:bp2),y
 16354 8ED8			l_32B0
 16355
 16356 				; ------------------------------------------------------------
 16357
 16358 = A1ED			BALL	= DATAORIGIN+$0458
 16359 = 9D95			BALL.X	= DATAORIGIN+$0000
 16360 = 9D97			BALL.Y	= DATAORIGIN+$0002
 16361 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
 16362 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
 16363 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
 16364 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
 16365 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
 16366 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
 16367 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
 16368 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
 16369 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
 16370 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
 16371 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
 16372 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
 16373 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
 16374 = 9DB0			BALL.STM	= DATAORIGIN+$001B
 16375
 16376 = A1ED			@VarData	= BALL
 16377 = 0002			@VarDataSize	= 2
 16378
 16379 8ED8			@exit
 16380 					.ifdef @new
 16381 					lda <@VarData
 16382 					sta :ztmp
 16383 					lda >@VarData
 16384 					ldy #@VarDataSize-1
 16385 					jmp @FreeMem
 16386 					els
 16387 8ED8 60				rts						; ret
 16388 					eif
 16389 				.endl
 16390
 16391 8ED9			.local	TEST_BALL					; PROCEDURE
 16392
 16393 				; optimize OK (service.pas), line = 3263
 16394
 16395 8ED9 AC F1 A1 84 84 AC + 	mwy BALL :bp2
 16396 8EE3 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16397 8EE5 B1 84			lda (:bp2),y
 16398 8EE7 D0 03 4C D4 8F		jeq l_32EE
 16399
 16400 				; optimize OK (service.pas), line = 3265
 16401
 16402 8EEC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16403 8EEE B1 84			lda (:bp2),y
 16404 8EF0 18 69 01			add #$01
 16405 8EF3 91 84			sta (:bp2),y
 16406 8EF5 C8				iny
 16407 8EF6 B1 84			lda (:bp2),y
 16408 8EF8 69 00			adc #$00
 16409 8EFA 91 84			sta (:bp2),y
 16410
 16411 				; optimize OK (service.pas), line = 3267
 16412
 16413 8EFC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16414 8EFE B1 84			lda (:bp2),y
 16415 8F00 85 9F			sta :STACKORIGIN+9
 16416 8F02 C8				iny
 16417 8F03 B1 84			lda (:bp2),y
 16418 8F05 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16419 8F07 AD 6B 9F			lda LV
 16420 8F0A 0A				asl @
 16421 8F0B A8				tay
 16422 8F0C B9 D1 20			lda adr.LEVEL,y
 16423 8F0F 85 A0			sta :STACKORIGIN+10
 16424 8F11 B9 D2 20			lda adr.LEVEL+1,y
 16425 8F14 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16426 8F16 A0 00			ldy #$00
 16427 8F18 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16428 8F1A 10 01			spl
 16429 8F1C 88				dey
 16430 8F1D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16431 8F1F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16432 8F21 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16433 8F23				.LOCAL
 16434 8F23 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16435 8F25 38 E9 00			sub #$00
 16436 8F28 D0 1C			bne L4
 16437 8F2A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16438 8F2C C9 00			cmp #$00
 16439 8F2E D0 0A			bne L1
 16440 8F30 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16441 8F32 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16442 8F34 D0 04			bne L1
 16443 8F36 A5 9F			lda :STACKORIGIN+9
 16444 8F38 C5 A0			cmp :STACKORIGIN+10
 16445 8F3A F0 10		L1	beq L5
 16446 8F3C B0 04			bcs L3
 16447 8F3E A9 FF			lda #$FF
 16448 8F40 D0 0A			bne L5
 16449 8F42 A9 01		L3	lda #$01
 16450 8F44 D0 06			bne L5
 16451 8F46 50 04		L4	bvc L5
 16452 8F48 49 FF			eor #$FF
 16453 8F4A 09 01			ora #$01
 16454 8F4C			L5
 16455 					.ENDL
 16456 8F4C 30 48			jmi l_3304
 16457 8F4E F0 46			jeq l_3304
 16458
 16459 				; optimize OK (service.pas), line = 3269
 16460
 16461 8F50 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16462 8F52 A9 00			lda #$00
 16463 8F54 91 84			sta (:bp2),y
 16464 8F56 C8				iny
 16465 8F57 91 84			sta (:bp2),y
 16466
 16467 				; optimize OK (service.pas), line = 3272
 16468
 16469 8F59 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16470 8F5B B1 84			lda (:bp2),y
 16471 8F5D C8				iny
 16472 8F5E C9 D0			cmp #$D0
 16473 8F60 B1 84			lda (:bp2),y
 16474 8F62 E9 07			sbc #$07
 16475 8F64 50 02			svc
 16476 8F66 49 80			eor #$80
 16477 8F68 10 2C			jpl l_331A
 16478
 16479 				; optimize OK (service.pas), line = 3274
 16480
 16481 8F6A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16482 8F6C B1 84			lda (:bp2),y
 16483 8F6E 18 69 0A			add #$0A
 16484 8F71 91 84			sta (:bp2),y
 16485 8F73 C8				iny
 16486 8F74 B1 84			lda (:bp2),y
 16487 8F76 69 00			adc #$00
 16488 8F78 91 84			sta (:bp2),y
 16489
 16490 				; optimize OK (service.pas), line = 3275
 16491
 16492 8F7A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16493 8F7C B1 84			lda (:bp2),y
 16494 8F7E 8D 12 A0			sta SET_BALL_SPEED.SPEED
 16495 8F81 C8				iny
 16496 8F82 B1 84			lda (:bp2),y
 16497 8F84 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 16498 8F87 AD F1 A1			lda BALL
 16499 8F8A 8D 0E A0			sta SET_BALL_SPEED.BALL
 16500 8F8D AD F2 A1			lda BALL+1
 16501 8F90 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 16502 8F93 20 01 45			jsr SET_BALL_SPEED
 16503 8F96			l_331A
 16504 8F96			l_3304
 16505
 16506 				; optimize OK (service.pas), line = 3279
 16507
 16508 8F96 AC F1 A1 84 84 AC + 	mwy BALL :bp2
 16509 8FA0 A0 14			ldy #BALL.SBD-DATAORIGIN
 16510 8FA2 B1 84			lda (:bp2),y
 16511 8FA4 18 69 01			add #$01
 16512 8FA7 91 84			sta (:bp2),y
 16513 8FA9 C8				iny
 16514 8FAA B1 84			lda (:bp2),y
 16515 8FAC 69 00			adc #$00
 16516 8FAE 91 84			sta (:bp2),y
 16517
 16518 				; optimize OK (service.pas), line = 3283
 16519
 16520 8FB0 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16521 8FB2 B1 84			lda (:bp2),y
 16522 8FB4 C9 02			cmp #$02
 16523 8FB6 D0 05			bne @+
 16524 8FB8 88				dey
 16525 8FB9 B1 84			lda (:bp2),y
 16526 8FBB C9 58			cmp #$58
 16527 				@
 16528 8FBD 90 15			jcc l_3342
 16529 				@
 16530 8FBF A0 00			ldy #$00
 16531 8FC1 B1 84			lda (:bp2),y
 16532 8FC3 10 0F			jpl l_3342
 16533 				@
 16534
 16535 				; optimize OK (service.pas), line = 3284
 16536
 16537 8FC5 AD F1 A1			lda BALL
 16538 8FC8 8D 85 A1			sta DEVIATE_BALL.BALL
 16539 8FCB AD F2 A1			lda BALL+1
 16540 8FCE 8D 86 A1			sta DEVIATE_BALL.BALL+1
 16541 8FD1 20 85 8D			jsr DEVIATE_BALL
 16542 8FD4			l_3342
 16543 8FD4			l_32EE
 16544
 16545 				; ------------------------------------------------------------
 16546
 16547 = A1F1			BALL	= DATAORIGIN+$045C
 16548 = 9D95			BALL.X	= DATAORIGIN+$0000
 16549 = 9D97			BALL.Y	= DATAORIGIN+$0002
 16550 = 9D99			BALL.FINEX	= DATAORIGIN+$0004
 16551 = 9D9B			BALL.FINEY	= DATAORIGIN+$0006
 16552 = 9D9D			BALL.OLDX	= DATAORIGIN+$0008
 16553 = 9D9F			BALL.OLDY	= DATAORIGIN+$000A
 16554 = 9DA1			BALL.SPEED	= DATAORIGIN+$000C
 16555 = 9DA3			BALL.FINESPEED	= DATAORIGIN+$000E
 16556 = 9DA5			BALL.SPEEDX	= DATAORIGIN+$0010
 16557 = 9DA7			BALL.SPEEDY	= DATAORIGIN+$0012
 16558 = 9DA9			BALL.SBD	= DATAORIGIN+$0014
 16559 = 9DAB			BALL.BRWHIT	= DATAORIGIN+$0016
 16560 = 9DAC			BALL.INPLAY	= DATAORIGIN+$0017
 16561 = 9DAD			BALL.LAUNCH	= DATAORIGIN+$0018
 16562 = 9DAE			BALL.ONVAUS	= DATAORIGIN+$0019
 16563 = 9DB0			BALL.STM	= DATAORIGIN+$001B
 16564
 16565 = A1F1			@VarData	= BALL
 16566 = 0002			@VarDataSize	= 2
 16567
 16568 8FD4			@exit
 16569 					.ifdef @new
 16570 					lda <@VarData
 16571 					sta :ztmp
 16572 					lda >@VarData
 16573 					ldy #@VarDataSize-1
 16574 					jmp @FreeMem
 16575 					els
 16576 8FD4 60				rts						; ret
 16577 					eif
 16578 				.endl
 16579 8FD5			l_32A1
 16580
 16581 				; optimize OK (service.pas), line = 3292
 16582
 16583 8FD5 A9 00			lda #$00
 16584 8FD7 8D 86 9F			sta SCRFLUXCNT
 16585
 16586 				; optimize OK (service.pas), line = 3293
 16587
 16588 8FDA 8D 85 9F			sta SCRFLUX
 16589
 16590 				; optimize OK (service.pas), line = 3295
 16591
 16592 8FDD A9 01			lda #$01
 16593 8FDF 8D 84 9F			sta BALLS_IN_PLAY
 16594
 16595 				; optimize OK (service.pas), line = 3297
 16596
 16597 8FE2 A9 00			lda #$00
 16598 8FE4 8D 82 9F			sta FIRE.AVL
 16599
 16600 				; optimize OK (service.pas), line = 3298
 16601
 16602 8FE7 AD A1 9E 8D 99 9E + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16603
 16604 				; optimize OK (service.pas), line = 3300
 16605
 16606 9017 A9 FF			lda #$FF
 16607 9019 8D 7D 9F			sta LETT.LAST
 16608 901C 8D 7E 9F			sta LETT.LAST+1
 16609
 16610 				; optimize OK (service.pas), line = 3301
 16611
 16612 901F A9 00			lda #$00
 16613 9021 8D 74 9F			sta LETT.ACTIVE
 16614
 16615 				; optimize OK (service.pas), line = 3304
 16616
 16617 9024 AD 5C 9D			lda PATTERN
 16618 9027 8D 01 A1			sta FILL_PICTURE_WITH_PATTERN.PATT
 16619 902A AD 5D 9D			lda PATTERN+1
 16620 902D 8D 02 A1			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16621 9030 20 33 76			jsr FILL_PICTURE_WITH_PATTERN
 16622
 16623 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3307
 16624
 16625 9033 E8				inx
 16626 9034 AD 3C 9D 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16627 9039 AD 3D 9D 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16628 903E 20 CE 42			jsr SHOWBTMPICTURE
 16629
 16630 				; optimize OK (service.pas), line = 3311
 16631
 16632 9041 AC 65 9F			ldy CUR_PLAYER
 16633 9044 B9 59 9F			lda adr.SCORE.LIVES,y
 16634 9047 8D 53 A1			sta PLOT_LIVES.LIVES
 16635 904A A9 00			lda #$00
 16636 904C 8D 54 A1			sta PLOT_LIVES.LIVES+1
 16637 904F 20 43 83			jsr PLOT_LIVES
 16638
 16639 				; optimize OK (service.pas), line = 3317
 16640
 16641 9052 AD 4E 9F			lda adr.SCORE.PLAYER+$04
 16642 9055 8D 4A A1			sta WRITE_SCORE.SC
 16643 9058 AD 4F 9F			lda adr.SCORE.PLAYER+1+$04
 16644 905B 8D 4B A1			sta WRITE_SCORE.SC+1
 16645 905E AD 50 9F			lda adr.SCORE.PLAYER+2+$04
 16646 9061 8D 4C A1			sta WRITE_SCORE.SC+2
 16647 9064 AD 51 9F			lda adr.SCORE.PLAYER+3+$04
 16648 9067 8D 4D A1			sta WRITE_SCORE.SC+3
 16649 906A A9 FD			lda #$FD
 16650 906C 8D 46 A1			sta WRITE_SCORE.PX
 16651 906F A9 00			lda #$00
 16652 9071 8D 47 A1			sta WRITE_SCORE.PX+1
 16653 9074 A9 3C			lda #$3C
 16654 9076 8D 48 A1			sta WRITE_SCORE.PY
 16655 9079 A9 00			lda #$00
 16656 907B 8D 49 A1			sta WRITE_SCORE.PY+1
 16657 907E 20 E5 7F			jsr WRITE_SCORE
 16658
 16659 				; optimize OK (service.pas), line = 3318
 16660
 16661 9081 AD 52 9F			lda adr.SCORE.PLAYER+$08
 16662 9084 8D 4A A1			sta WRITE_SCORE.SC
 16663 9087 AD 53 9F			lda adr.SCORE.PLAYER+1+$08
 16664 908A 8D 4B A1			sta WRITE_SCORE.SC+1
 16665 908D AD 54 9F			lda adr.SCORE.PLAYER+2+$08
 16666 9090 8D 4C A1			sta WRITE_SCORE.SC+2
 16667 9093 AD 55 9F			lda adr.SCORE.PLAYER+3+$08
 16668 9096 8D 4D A1			sta WRITE_SCORE.SC+3
 16669 9099 A9 FD			lda #$FD
 16670 909B 8D 46 A1			sta WRITE_SCORE.PX
 16671 909E A9 00			lda #$00
 16672 90A0 8D 47 A1			sta WRITE_SCORE.PX+1
 16673 90A3 A9 5D			lda #$5D
 16674 90A5 8D 48 A1			sta WRITE_SCORE.PY
 16675 90A8 A9 00			lda #$00
 16676 90AA 8D 49 A1			sta WRITE_SCORE.PY+1
 16677 90AD 20 E5 7F			jsr WRITE_SCORE
 16678
 16679 				; optimize OK (service.pas), line = 3319
 16680
 16681 90B0 A9 FD			lda #$FD
 16682 90B2 8D 46 A1			sta WRITE_SCORE.PX
 16683 90B5 A9 00			lda #$00
 16684 90B7 8D 47 A1			sta WRITE_SCORE.PX+1
 16685 90BA A9 80			lda #$80
 16686 90BC 8D 48 A1			sta WRITE_SCORE.PY
 16687 90BF A9 00			lda #$00
 16688 90C1 8D 49 A1			sta WRITE_SCORE.PY+1
 16689 90C4 AD 5C 9F			lda SCORE.HISCORE
 16690 90C7 8D 4A A1			sta WRITE_SCORE.SC
 16691 90CA AD 5D 9F			lda SCORE.HISCORE+1
 16692 90CD 8D 4B A1			sta WRITE_SCORE.SC+1
 16693 90D0 AD 5E 9F			lda SCORE.HISCORE+2
 16694 90D3 8D 4C A1			sta WRITE_SCORE.SC+2
 16695 90D6 AD 5F 9F			lda SCORE.HISCORE+3
 16696 90D9 8D 4D A1			sta WRITE_SCORE.SC+3
 16697 90DC 20 E5 7F			jsr WRITE_SCORE
 16698
 16699 				; optimize FAIL ('PUT_WALL', service.pas), line = 3322
 16700
 16701 90DF 20 EB 5B			jsr PUT_WALL
 16702
 16703 				; optimize OK (service.pas), line = 3329
 16704
 16705 90E2 A9 01			lda #$01
 16706 90E4 8D B0 A1			sta BALL0.INPLAY
 16707
 16708 				; optimize OK (service.pas), line = 3330
 16709
 16710 90E7 8D B1 A1			sta BALL0.LAUNCH
 16711
 16712 				; optimize OK (service.pas), line = 3333
 16713
 16714 90EA A9 6F			lda #$6F
 16715 90EC 8D 99 A1			sta BALL0.X
 16716 90EF A9 00			lda #$00
 16717 90F1 8D 9A A1			sta BALL0.X+1
 16718
 16719 				; optimize OK (service.pas), line = 3334
 16720
 16721 90F4 A9 B5			lda #$B5
 16722 90F6 8D 9B A1			sta BALL0.Y
 16723 90F9 A9 00			lda #$00
 16724 90FB 8D 9C A1			sta BALL0.Y+1
 16725
 16726 				; optimize OK (service.pas), line = 3337
 16727
 16728 90FE A9 FF			lda #$FF
 16729 9100 8D A1 A1			sta BALL0.OLDX
 16730 9103 8D A2 A1			sta BALL0.OLDX+1
 16731
 16732 				; optimize OK (service.pas), line = 3338
 16733
 16734 9106 8D A3 A1			sta BALL0.OLDY
 16735 9109 8D A4 A1			sta BALL0.OLDY+1
 16736
 16737 				; optimize OK (service.pas), line = 3341
 16738
 16739 910C A9 00			lda #$00
 16740 910E 8D AD A1			sta BALL0.SBD
 16741 9111 8D AE A1			sta BALL0.SBD+1
 16742
 16743 				; optimize OK (service.pas), line = 3345
 16744
 16745 9114 A9 10			lda #$10
 16746 9116 8D B2 A1			sta BALL0.ONVAUS
 16747 9119 A9 00			lda #$00
 16748 911B 8D B3 A1			sta BALL0.ONVAUS+1
 16749
 16750 				; optimize OK (service.pas), line = 3350
 16751
 16752 911E 8D B4 A1			sta BALL0.STM
 16753
 16754 				; optimize OK (service.pas), line = 3354
 16755
 16756 9121 A9 E8			lda #$E8
 16757 9123 8D CD 9D			sta SYSTEM.RANDOM.@010184000.RANGE
 16758 9126 A9 03			lda #$03
 16759 9128 8D CE 9D			sta SYSTEM.RANDOM.@010184000.RANGE+1
 16760 912B 20 58 33			jsr SYSTEM.RANDOM.@010184000
 16761 912E AD CF 9D			lda SYSTEM.RANDOM.@010184000.RESULT
 16762 9131 8D 75 9F			sta LETT.INCOMING
 16763 9134 AD D0 9D			lda SYSTEM.RANDOM.@010184000.RESULT+1
 16764 9137 8D 76 9F			sta LETT.INCOMING+1
 16765
 16766 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3357
 16767
 16768 913A 20 A7 7A			jsr CREATE_VAUS
 16769
 16770 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3360
 16771
 16772 913D 20 C3 77			jsr WRITE_ROUND_LEVEL
 16773
 16774 				; optimize FAIL ('SET_VAUS', service.pas), line = 3362
 16775
 16776 9140 20 B4 51			jsr SET_VAUS
 16777
 16778 				; optimize FAIL ('START_VAUS', service.pas), line = 3363
 16779
 16780 9143 20 F1 51			jsr START_VAUS
 16781
 16782 				; optimize OK (service.pas), line = 3364
 16783
 16784 9146 AD 09 9F			lda VAUS.X
 16785 9149 8D 6F A0			sta MOVE_VAUS.X
 16786 914C A9 00			lda #$00
 16787 914E 8D 70 A0			sta MOVE_VAUS.X+1
 16788 9151 A9 B8			lda #$B8
 16789 9153 8D 71 A0			sta MOVE_VAUS.Y
 16790 9156 A9 00			lda #$00
 16791 9158 8D 72 A0			sta MOVE_VAUS.Y+1
 16792 915B 20 E7 53			jsr MOVE_VAUS
 16793
 16794 				; optimize FAIL ('START_LEVEL', service.pas), line = 3365
 16795
 16796 915E 20 7B 38			jsr START_LEVEL
 16797
 16798 				; optimize FAIL ('START_VAUS', service.pas), line = 3366
 16799
 16800 9161 20 F1 51			jsr START_VAUS
 16801
 16802 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3367
 16803
 16804 9164 20 C4 77			jsr REMOVE_ROUND_LEVEL
 16805
 16806 				; optimize OK (service.pas), line = 3368
 16807
 16808 9167 AD 68 96			lda BALL0
 16809 916A 8D 08 A0			sta SET_BALL.BALL
 16810 916D AD 69 96			lda BALL0+1
 16811 9170 8D 09 A0			sta SET_BALL.BALL+1
 16812 9173 20 28 44			jsr SET_BALL
 16813
 16814 				; optimize OK (service.pas), line = 3375
 16815
 16816 9176 A9 0F			lda #$0F
 16817 9178 20 41 33			jsr SYSTEM.RANDOM.@010180000
 16818 917B E8				inx
 16819 917C E8				inx
 16820 917D AD CC 9D			lda SYSTEM.RANDOM.@010180000.RESULT
 16821 9180 18 69 3C			add #$3C
 16822 9183 95 95			sta :STACKORIGIN-1,x
 16823 9185 A9 00			lda #$00
 16824 9187 69 00			adc #$00
 16825 9189 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 16826 918B AD 68 96			lda BALL0
 16827 918E 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 16828 9191 AD 69 96			lda BALL0+1
 16829 9194 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 16830 9197 CA				dex
 16831 9198 B5 96			lda :STACKORIGIN,x
 16832 919A 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 16833 919D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16834 919F 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 16835 91A2 CA				dex
 16836 91A3 20 E4 46			jsr SET_BALL_DIRECTION
 16837
 16838 				; optimize OK (service.pas), line = 3377
 16839
 16840 91A6 AD 68 96			lda BALL0
 16841 91A9 8D 0E A0			sta SET_BALL_SPEED.BALL
 16842 91AC AD 69 96			lda BALL0+1
 16843 91AF 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 16844 91B2 A9 F4			lda #$F4
 16845 91B4 8D 12 A0			sta SET_BALL_SPEED.SPEED
 16846 91B7 A9 01			lda #$01
 16847 91B9 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 16848 91BC 20 01 45			jsr SET_BALL_SPEED
 16849
 16850 				; optimize OK (service.pas), line = 3380
 16851
 16852 91BF A9 00			lda #$00
 16853 91C1 8D A7 A1			sta BALL0.FINESPEED
 16854 91C4 8D A8 A1			sta BALL0.FINESPEED+1
 16855
 16856 				; optimize OK (service.pas), line = 3382
 16857
 16858 91C7 8D CC A1			sta BALL1.INPLAY
 16859
 16860 				; optimize OK (service.pas), line = 3383
 16861
 16862 91CA 8D E8 A1			sta BALL2.INPLAY
 16863
 16864 				; optimize OK (service.pas), line = 3385
 16865
 16866 91CD AD 09 9F			lda VAUS.X
 16867 91D0 8D 8C A1			sta X
 16868 91D3 A9 00			lda #$00
 16869 91D5 8D 8D A1			sta X+1
 16870
 16871 				; --- WhileProlog
 16872 91D8 4C 46 96			jmp l_33DA
 16873 91DB			l_33DB
 16874
 16875 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3389
 16876
 16877 91DB 20 24 44			jsr WAIT_VBL
 16878
 16879 				; optimize OK (service.pas), line = 3398
 16880
 16881 91DE A9 8C			lda <X
 16882 91E0 8D 8E 9F			sta MOUSECOORDS.X
 16883 91E3 A9 A1			lda >X
 16884 91E5 8D 8F 9F			sta MOUSECOORDS.X+1
 16885 91E8 20 0C 3A			jsr MOUSECOORDS
 16886
 16887 				; optimize OK (service.pas), line = 3403
 16888
 16889 91EB AD 6D 9F			lda TRAINER
 16890 91EE D0 19			jne l_33F0
 16891 91F0 AD 8C A1			lda X
 16892 91F3 8D 6F A0			sta MOVE_VAUS.X
 16893 91F6 AD 8D A1			lda X+1
 16894 91F9 8D 70 A0			sta MOVE_VAUS.X+1
 16895 91FC A9 B8			lda #$B8
 16896 91FE 8D 71 A0			sta MOVE_VAUS.Y
 16897 9201 A9 00			lda #$00
 16898 9203 8D 72 A0			sta MOVE_VAUS.Y+1
 16899 9206 4C 73 92			jmp l_33FE
 16900 9209			l_33F0
 16901
 16902 				; optimize OK (service.pas), line = 3409
 16903
 16904 9209 AD 6D 9F			lda TRAINER
 16905 920C C9 01			cmp #$01
 16906 920E D0 66			jne l_3410
 16907
 16908 				; optimize FAIL (1, service.pas), line = 3410
 16909
 16910 9210 E8				inx
 16911 9211 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 16912 9215 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16913 9219 E8				inx
 16914 921A A9 0A 95 96			mva #$0A :STACKORIGIN,x
 16915 921E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16916 9222 AD 99 A1			lda BALL0.X
 16917 9225 38 ED B2 A1			sub BALL0.ONVAUS
 16918 9229 8D C4 9F			sta MAX.A
 16919 922C AD 9A A1			lda BALL0.X+1
 16920 922F ED B3 A1			sbc BALL0.ONVAUS+1
 16921 9232 8D C5 9F			sta MAX.A+1
 16922 9235 B5 96			lda :STACKORIGIN,x
 16923 9237 8D C6 9F			sta MAX.B
 16924 923A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16925 923C 8D C7 9F			sta MAX.B+1
 16926 923F CA				dex
 16927 9240 20 92 3C			jsr MAX
 16928 9243 A9 B8			lda #$B8
 16929 9245 8D CA 9F			sta MIN.A
 16930 9248 A9 00			lda #$00
 16931 924A 8D CB 9F			sta MIN.A+1
 16932 924D AD C8 9F			lda MAX.RESULT
 16933 9250 8D CC 9F			sta MIN.B
 16934 9253 AD C9 9F			lda MAX.RESULT+1
 16935 9256 8D CD 9F			sta MIN.B+1
 16936 9259 20 BD 3C			jsr MIN
 16937 925C AD CE 9F			lda MIN.RESULT
 16938 925F 8D 6F A0			sta MOVE_VAUS.X
 16939 9262 AD CF 9F			lda MIN.RESULT+1
 16940 9265 8D 70 A0			sta MOVE_VAUS.X+1
 16941 9268 B5 96			lda :STACKORIGIN,x
 16942 926A 8D 71 A0			sta MOVE_VAUS.Y
 16943 926D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 16944 926F 8D 72 A0			sta MOVE_VAUS.Y+1
 16945 9272 CA				dex
 16946 9273			l_33FE
 16947 9273 20 E7 53			jsr MOVE_VAUS
 16948 9276			l_3410
 16949
 16950 				; optimize OK (service.pas), line = 3415
 16951
 16952 9276 AD B1 A1			lda BALL0.LAUNCH
 16953 9279 C9 01			cmp #$01
 16954 927B D0 30			jne l_3432
 16955
 16956 				; optimize FAIL (0, service.pas), line = 3417
 16957
 16958 927D EE B4 A1			inc BALL0.STM
 16959
 16960 				; optimize OK (service.pas), line = 3422
 16961
 16962 9280 AD B4 A1			lda BALL0.STM
 16963 9283 C9 FA			cmp #$FA
 16964 9285 D0 05			jne l_3449
 16965 9287 A9 00			lda #$00
 16966 9289 8D B1 A1			sta BALL0.LAUNCH
 16967 928C			l_3449
 16968
 16969 				; optimize OK (service.pas), line = 3425
 16970
 16971 928C AD 68 96			lda BALL0
 16972 928F 8D 36 A0			sta START_BALL.BALL
 16973 9292 AD 69 96			lda BALL0+1
 16974 9295 8D 37 A0			sta START_BALL.BALL+1
 16975 9298 20 E5 4A			jsr START_BALL
 16976
 16977 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3428
 16978
 16979 929B 20 8D 3A			jsr MOUSECLICK
 16980 929E AD 92 9F			lda MOUSECLICK.RESULT
 16981 92A1 C9 01			cmp #$01
 16982 92A3 D0 05			jne l_3463
 16983 92A5 A9 00			lda #$00
 16984 92A7 8D B1 A1			sta BALL0.LAUNCH
 16985 92AA			l_3463
 16986 92AA 4C E9 92			jmp l_3473
 16987 92AD			l_3432
 16988
 16989 				; optimize OK (service.pas), line = 3436
 16990
 16991 92AD AD B0 A1			lda BALL0.INPLAY
 16992 92B0 F0 0F			jeq l_347F
 16993 92B2 AD 68 96			lda BALL0
 16994 92B5 8D 60 A0			sta MOVE_BALL.BALL
 16995 92B8 AD 69 96			lda BALL0+1
 16996 92BB 8D 61 A0			sta MOVE_BALL.BALL+1
 16997 92BE 20 FA 4B			jsr MOVE_BALL
 16998 92C1			l_347F
 16999
 17000 				; optimize OK (service.pas), line = 3437
 17001
 17002 92C1 AD CC A1			lda BALL1.INPLAY
 17003 92C4 F0 0F			jeq l_3491
 17004 92C6 AD 6A 96			lda BALL1
 17005 92C9 8D 60 A0			sta MOVE_BALL.BALL
 17006 92CC AD 6B 96			lda BALL1+1
 17007 92CF 8D 61 A0			sta MOVE_BALL.BALL+1
 17008 92D2 20 FA 4B			jsr MOVE_BALL
 17009 92D5			l_3491
 17010
 17011 				; optimize OK (service.pas), line = 3438
 17012
 17013 92D5 AD E8 A1			lda BALL2.INPLAY
 17014 92D8 F0 0F			jeq l_34A3
 17015 92DA AD 6C 96			lda BALL2
 17016 92DD 8D 60 A0			sta MOVE_BALL.BALL
 17017 92E0 AD 6D 96			lda BALL2+1
 17018 92E3 8D 61 A0			sta MOVE_BALL.BALL+1
 17019 92E6 20 FA 4B			jsr MOVE_BALL
 17020 92E9			l_34A3
 17021 92E9			l_3473
 17022
 17023 				; optimize OK (service.pas), line = 3446
 17024
 17025 92E9 AD 68 96			lda BALL0
 17026 92EC 8D ED A1			sta CHECK_BALL.BALL
 17027 92EF AD 69 96			lda BALL0+1
 17028 92F2 8D EE A1			sta CHECK_BALL.BALL+1
 17029 92F5 20 63 8E			jsr CHECK_BALL
 17030
 17031 				; optimize OK (service.pas), line = 3447
 17032
 17033 92F8 AD 6A 96			lda BALL1
 17034 92FB 8D ED A1			sta CHECK_BALL.BALL
 17035 92FE AD 6B 96			lda BALL1+1
 17036 9301 8D EE A1			sta CHECK_BALL.BALL+1
 17037 9304 20 63 8E			jsr CHECK_BALL
 17038
 17039 				; optimize OK (service.pas), line = 3448
 17040
 17041 9307 AD 6C 96			lda BALL2
 17042 930A 8D ED A1			sta CHECK_BALL.BALL
 17043 930D AD 6D 96			lda BALL2+1
 17044 9310 8D EE A1			sta CHECK_BALL.BALL+1
 17045 9313 20 63 8E			jsr CHECK_BALL
 17046
 17047 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3463
 17048
 17049 9316 20 81 3F			jsr CHECKSHINE
 17050
 17051 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3464
 17052
 17053 9319 20 97 41			jsr CHECK_LETTER
 17054
 17055 				; optimize OK (service.pas), line = 3465
 17056
 17057 931C AD 68 96			lda BALL0
 17058 931F 8D 76 A1			sta CHECK_BONUS_TYPE.B1
 17059 9322 AD 69 96			lda BALL0+1
 17060 9325 8D 77 A1			sta CHECK_BONUS_TYPE.B1+1
 17061 9328 AD 6A 96			lda BALL1
 17062 932B 8D 7A A1			sta CHECK_BONUS_TYPE.B2
 17063 932E AD 6B 96			lda BALL1+1
 17064 9331 8D 7B A1			sta CHECK_BONUS_TYPE.B2+1
 17065 9334 AD 6C 96			lda BALL2
 17066 9337 8D 7E A1			sta CHECK_BONUS_TYPE.B3
 17067 933A AD 6D 96			lda BALL2+1
 17068 933D 8D 7F A1			sta CHECK_BONUS_TYPE.B3+1
 17069 9340 20 49 8A			jsr CHECK_BONUS_TYPE
 17070
 17071 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3466
 17072
 17073 9343 20 DF 86			jsr CHECK_FIRE
 17074
 17075 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3467
 17076
 17077 9346 20 A6 88			jsr CHECK_FLUX
 17078
 17079 				; optimize OK (service.pas), line = 3469
 17080
 17081 9349 AD 09 9F			lda VAUS.X
 17082 934C 18 6D 11 9F			add VAUS.WIDTH
 17083 9350 85 9F			sta :STACKORIGIN+9
 17084 9352 A9 00			lda #$00
 17085 9354 69 00			adc #$00
 17086 9356 A0 01			ldy #1
 17087 9358 C9 00			cmp #$00
 17088 935A D0 04			bne @+
 17089 935C A5 9F			lda :STACKORIGIN+9
 17090 935E C9 D7			cmp #$D7
 17091 				@
 17092 9360 F0 01			beq @+
 17093 9362 88				dey
 17094 				@
 17095 9363 98				tya
 17096 9364 2D 85 9F			and SCRFLUX
 17097 9367 F0 03			jeq l_34DB
 17098 9369 20 43 89			jsr VAUS_OUT
 17099 936C			l_34DB
 17100
 17101 				; optimize OK (service.pas), line = 3471
 17102
 17103 936C AD 15 9F			lda VAUS.LETTER
 17104 936F C9 04			cmp #$04
 17105 9371 F0 03 4C B6 94		jne l_34F1
 17106
 17107 				; optimize OK (service.pas), line = 3473
 17108
 17109 9376 A9 03			lda #$03
 17110 9378 8D 84 9F			sta BALLS_IN_PLAY
 17111
 17112 				; optimize OK (service.pas), line = 3475
 17113
 17114 937B AC 6A 96 84 84 AC + 	mwy BALL1 :bp2
 17115 9385 A0 1B			ldy #$1B
 17116 9387 B9 99 A1 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17117
 17118 				; optimize OK (service.pas), line = 3476
 17119
 17120 938F AC 6C 96 84 84 AC + 	mwy BALL2 :bp2
 17121 9399 A0 1B			ldy #$1B
 17122 939B B9 99 A1 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17123
 17124 				; optimize OK (service.pas), line = 3478
 17125
 17126 93A3 AD 68 96			lda BALL0
 17127 93A6 8D 2E A0			sta GET_BALL_DIRECTION.BALL
 17128 93A9 AD 69 96			lda BALL0+1
 17129 93AC 8D 2F A0			sta GET_BALL_DIRECTION.BALL+1
 17130 93AF 20 C7 48			jsr GET_BALL_DIRECTION
 17131 93B2 E8				inx
 17132 93B3 E8				inx
 17133 93B4 A9 5A			lda #$5A
 17134 93B6 85 8E			sta @SMALLINT.DIV.B
 17135 93B8 A9 00			lda #$00
 17136 93BA 85 8F			sta @SMALLINT.DIV.B+1
 17137 93BC AD 32 A0			lda GET_BALL_DIRECTION.RESULT
 17138 93BF 85 86			sta @SMALLINT.DIV.A
 17139 93C1 AD 33 A0			lda GET_BALL_DIRECTION.RESULT+1
 17140 93C4 85 87			sta @SMALLINT.DIV.A+1
 17141 93C6 20 63 22			jsr @SMALLINT.DIV
 17142 93C9 CA				dex
 17143 93CA A5 86			lda :eax
 17144 93CC 8D 92 A1			sta T1
 17145 93CF A5 87			lda :eax+1
 17146 93D1 8D 93 A1			sta T1+1
 17147 93D4 CA				dex
 17148
 17149 				; optimize OK (service.pas), line = 3480
 17150
 17151 93D5 AD A5 A1			lda BALL0.SPEED
 17152 93D8 8D 94 A1			sta T2
 17153 93DB AD A6 A1			lda BALL0.SPEED+1
 17154 93DE 8D 95 A1			sta T2+1
 17155
 17156 				; optimize OK (service.pas), line = 3487
 17157
 17158 93E1 A9 5A			lda #$5A
 17159 93E3 85 8E			sta :ecx
 17160 93E5 A9 00			lda #$00
 17161 93E7 85 8F			sta :ecx+1
 17162 93E9 AD 92 A1			lda T1
 17163 93EC 85 86			sta :eax
 17164 93EE AD 93 A1			lda T1+1
 17165 93F1 85 87			sta :eax+1
 17166 					.ifdef fmulinit
 17167 					fmulu_16
 17168 					els
 17169 93F3 20 3B 23			imulCX
 17170 					eif
 17171 93F6 A5 86			lda :eax
 17172 93F8 8D 96 A1			sta HLP
 17173 93FB A5 87			lda :eax+1
 17174 93FD 8D 97 A1			sta HLP+1
 17175
 17176 				; optimize OK (service.pas), line = 3489
 17177
 17178 9400 AD 96 A1			lda HLP
 17179 9403 18 69 1E			add #$1E
 17180 9406 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 17181 9409 AD 97 A1			lda HLP+1
 17182 940C 69 00			adc #$00
 17183 940E 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 17184 9411 AD 68 96			lda BALL0
 17185 9414 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 17186 9417 AD 69 96			lda BALL0+1
 17187 941A 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 17188 941D 20 E4 46			jsr SET_BALL_DIRECTION
 17189
 17190 				; optimize OK (service.pas), line = 3490
 17191
 17192 9420 AD 96 A1			lda HLP
 17193 9423 18 69 2D			add #$2D
 17194 9426 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 17195 9429 AD 97 A1			lda HLP+1
 17196 942C 69 00			adc #$00
 17197 942E 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 17198 9431 AD 6A 96			lda BALL1
 17199 9434 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 17200 9437 AD 6B 96			lda BALL1+1
 17201 943A 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 17202 943D 20 E4 46			jsr SET_BALL_DIRECTION
 17203
 17204 				; optimize OK (service.pas), line = 3491
 17205
 17206 9440 AD 96 A1			lda HLP
 17207 9443 18 69 3C			add #$3C
 17208 9446 8D 28 A0			sta SET_BALL_DIRECTION.ANGLE
 17209 9449 AD 97 A1			lda HLP+1
 17210 944C 69 00			adc #$00
 17211 944E 8D 29 A0			sta SET_BALL_DIRECTION.ANGLE+1
 17212 9451 AD 6C 96			lda BALL2
 17213 9454 8D 24 A0			sta SET_BALL_DIRECTION.BALL
 17214 9457 AD 6D 96			lda BALL2+1
 17215 945A 8D 25 A0			sta SET_BALL_DIRECTION.BALL+1
 17216 945D 20 E4 46			jsr SET_BALL_DIRECTION
 17217
 17218 				; optimize OK (service.pas), line = 3495
 17219
 17220 9460 AD 68 96			lda BALL0
 17221 9463 8D 0E A0			sta SET_BALL_SPEED.BALL
 17222 9466 AD 69 96			lda BALL0+1
 17223 9469 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 17224 946C AD 94 A1			lda T2
 17225 946F 8D 12 A0			sta SET_BALL_SPEED.SPEED
 17226 9472 AD 95 A1			lda T2+1
 17227 9475 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 17228 9478 20 01 45			jsr SET_BALL_SPEED
 17229
 17230 				; optimize OK (service.pas), line = 3496
 17231
 17232 947B AD 6A 96			lda BALL1
 17233 947E 8D 0E A0			sta SET_BALL_SPEED.BALL
 17234 9481 AD 6B 96			lda BALL1+1
 17235 9484 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 17236 9487 AD 94 A1			lda T2
 17237 948A 8D 12 A0			sta SET_BALL_SPEED.SPEED
 17238 948D AD 95 A1			lda T2+1
 17239 9490 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 17240 9493 20 01 45			jsr SET_BALL_SPEED
 17241
 17242 				; optimize OK (service.pas), line = 3497
 17243
 17244 9496 AD 6C 96			lda BALL2
 17245 9499 8D 0E A0			sta SET_BALL_SPEED.BALL
 17246 949C AD 6D 96			lda BALL2+1
 17247 949F 8D 0F A0			sta SET_BALL_SPEED.BALL+1
 17248 94A2 AD 94 A1			lda T2
 17249 94A5 8D 12 A0			sta SET_BALL_SPEED.SPEED
 17250 94A8 AD 95 A1			lda T2+1
 17251 94AB 8D 13 A0			sta SET_BALL_SPEED.SPEED+1
 17252 94AE 20 01 45			jsr SET_BALL_SPEED
 17253
 17254 				; optimize OK (service.pas), line = 3499
 17255
 17256 94B1 A9 00			lda #$00
 17257 94B3 8D 15 9F			sta VAUS.LETTER
 17258 94B6			l_34F1
 17259
 17260 				; optimize OK (service.pas), line = 3503
 17261
 17262 94B6 AD 84 9F			lda BALLS_IN_PLAY
 17263 94B9 C9 02			cmp #$02
 17264 94BB 90 08			jcc l_3554
 17265 94BD A9 00			lda #$00
 17266 94BF 8D 75 9F			sta LETT.INCOMING
 17267 94C2 8D 76 9F			sta LETT.INCOMING+1
 17268 94C5			l_3554
 17269
 17270 				; optimize OK (service.pas), line = 3506
 17271
 17272 94C5 AD 65 9F			lda CUR_PLAYER
 17273 94C8 0A				asl @
 17274 94C9 0A				asl @
 17275 94CA A8				tay
 17276 94CB B9 4A 9F			lda adr.SCORE.PLAYER,y
 17277 94CE 8D 4A A1			sta WRITE_SCORE.SC
 17278 94D1 B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 17279 94D4 8D 4B A1			sta WRITE_SCORE.SC+1
 17280 94D7 B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 17281 94DA 8D 4C A1			sta WRITE_SCORE.SC+2
 17282 94DD B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 17283 94E0 8D 4D A1			sta WRITE_SCORE.SC+3
 17284 94E3 AC 65 9F			ldy CUR_PLAYER
 17285 94E6 B9 C2 20			lda adr.POS_DIGIT,y
 17286 94E9 8D 48 A1			sta WRITE_SCORE.PY
 17287 94EC A9 FD			lda #$FD
 17288 94EE 8D 46 A1			sta WRITE_SCORE.PX
 17289 94F1 A9 00			lda #$00
 17290 94F3 8D 47 A1			sta WRITE_SCORE.PX+1
 17291 94F6 8D 49 A1			sta WRITE_SCORE.PY+1
 17292 94F9 20 E5 7F			jsr WRITE_SCORE
 17293
 17294 				; optimize OK (service.pas), line = 3509
 17295
 17296 94FC AD 65 9F			lda CUR_PLAYER
 17297 94FF 0A				asl @
 17298 9500 0A				asl @
 17299 9501 A8				tay
 17300 9502				.LOCAL
 17301 9502 B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 17302 9505 38 ED 5F 9F			sub SCORE.HISCORE+3
 17303 9509 D0 22			bne L4
 17304 950B B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 17305 950E CD 5E 9F			cmp SCORE.HISCORE+2
 17306 9511 D0 0E			bne L1
 17307 9513 B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 17308 9516 CD 5D 9F			cmp SCORE.HISCORE+1
 17309 9519 D0 06			bne L1
 17310 951B B9 4A 9F			lda adr.SCORE.PLAYER,y
 17311 951E CD 5C 9F			cmp SCORE.HISCORE
 17312 9521 F0 10		L1	beq L5
 17313 9523 B0 04			bcs L3
 17314 9525 A9 FF			lda #$FF
 17315 9527 D0 0A			bne L5
 17316 9529 A9 01		L3	lda #$01
 17317 952B D0 06			bne L5
 17318 952D 50 04		L4	bvc L5
 17319 952F 49 FF			eor #$FF
 17320 9531 09 01			ora #$01
 17321 9533			L5
 17322 					.ENDL
 17323 9533 30 49			jmi l_357A
 17324 9535 F0 47			jeq l_357A
 17325
 17326 				; optimize OK (service.pas), line = 3512
 17327
 17328 9537 B9 4A 9F			lda adr.SCORE.PLAYER,y
 17329 953A 8D 5C 9F			sta SCORE.HISCORE
 17330 953D B9 4B 9F			lda adr.SCORE.PLAYER+1,y
 17331 9540 8D 5D 9F			sta SCORE.HISCORE+1
 17332 9543 B9 4C 9F			lda adr.SCORE.PLAYER+2,y
 17333 9546 8D 5E 9F			sta SCORE.HISCORE+2
 17334 9549 B9 4D 9F			lda adr.SCORE.PLAYER+3,y
 17335 954C 8D 5F 9F			sta SCORE.HISCORE+3
 17336
 17337 				; optimize OK (service.pas), line = 3514
 17338
 17339 954F A9 FD			lda #$FD
 17340 9551 8D 46 A1			sta WRITE_SCORE.PX
 17341 9554 A9 00			lda #$00
 17342 9556 8D 47 A1			sta WRITE_SCORE.PX+1
 17343 9559 A9 80			lda #$80
 17344 955B 8D 48 A1			sta WRITE_SCORE.PY
 17345 955E A9 00			lda #$00
 17346 9560 8D 49 A1			sta WRITE_SCORE.PY+1
 17347 9563 AD 5C 9F			lda SCORE.HISCORE
 17348 9566 8D 4A A1			sta WRITE_SCORE.SC
 17349 9569 AD 5D 9F			lda SCORE.HISCORE+1
 17350 956C 8D 4B A1			sta WRITE_SCORE.SC+1
 17351 956F AD 5E 9F			lda SCORE.HISCORE+2
 17352 9572 8D 4C A1			sta WRITE_SCORE.SC+2
 17353 9575 AD 5F 9F			lda SCORE.HISCORE+3
 17354 9578 8D 4D A1			sta WRITE_SCORE.SC+3
 17355 957B 20 E5 7F			jsr WRITE_SCORE
 17356 957E			l_357A
 17357
 17358 				; optimize OK (service.pas), line = 3521
 17359
 17360 957E AD 68 96			lda BALL0
 17361 9581 8D F1 A1			sta TEST_BALL.BALL
 17362 9584 AD 69 96			lda BALL0+1
 17363 9587 8D F2 A1			sta TEST_BALL.BALL+1
 17364 958A 20 D9 8E			jsr TEST_BALL
 17365
 17366 				; optimize OK (service.pas), line = 3522
 17367
 17368 958D AD 6A 96			lda BALL1
 17369 9590 8D F1 A1			sta TEST_BALL.BALL
 17370 9593 AD 6B 96			lda BALL1+1
 17371 9596 8D F2 A1			sta TEST_BALL.BALL+1
 17372 9599 20 D9 8E			jsr TEST_BALL
 17373
 17374 				; optimize OK (service.pas), line = 3523
 17375
 17376 959C AD 6C 96			lda BALL2
 17377 959F 8D F1 A1			sta TEST_BALL.BALL
 17378 95A2 AD 6D 96			lda BALL2+1
 17379 95A5 8D F2 A1			sta TEST_BALL.BALL+1
 17380 95A8 20 D9 8E			jsr TEST_BALL
 17381
 17382 				; optimize OK (service.pas), line = 3564
 17383
 17384 95AB AD B0 A1			lda BALL0.INPLAY
 17385 95AE D0 2B			jne l_35A0
 17386
 17387 				; optimize OK (service.pas), line = 3566
 17388
 17389 95B0 AC 68 96 84 84 AC + 	mwy BALL0 :bp2
 17390 95BA A0 1B			ldy #$1B
 17391 95BC B9 B5 A1 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17392
 17393 				; optimize OK (service.pas), line = 3567
 17394
 17395 95C4 AC 6A 96 84 84 AC + 	mwy BALL1 :bp2
 17396 95CE A0 1B			ldy #$1B
 17397 95D0 B9 D1 A1 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17398
 17399 				; optimize OK (service.pas), line = 3568
 17400
 17401 95D8 8D E8 A1			sta BALL2.INPLAY
 17402 95DB			l_35A0
 17403
 17404 				; optimize OK (service.pas), line = 3571
 17405
 17406 95DB A9 00			lda #$00
 17407 95DD 8D 84 9F			sta BALLS_IN_PLAY
 17408
 17409 				; optimize OK (service.pas), line = 3573
 17410
 17411 95E0 AD B0 A1			lda BALL0.INPLAY
 17412 95E3 F0 03			jeq l_35BB
 17413 95E5 EE 84 9F			inc BALLS_IN_PLAY
 17414 95E8			l_35BB
 17415
 17416 				; optimize OK (service.pas), line = 3574
 17417
 17418 95E8 AD CC A1			lda BALL1.INPLAY
 17419 95EB F0 03			jeq l_35CE
 17420 95ED EE 84 9F			inc BALLS_IN_PLAY
 17421 95F0			l_35CE
 17422
 17423 				; optimize OK (service.pas), line = 3575
 17424
 17425 95F0 AD E8 A1			lda BALL2.INPLAY
 17426 95F3 F0 03			jeq l_35E1
 17427 95F5 EE 84 9F			inc BALLS_IN_PLAY
 17428 95F8			l_35E1
 17429
 17430 				; optimize OK (service.pas), line = 3578
 17431
 17432 95F8 AD B0 A1			lda BALL0.INPLAY
 17433 95FB D0 49			jne l_35F7
 17434
 17435 				; optimize OK (service.pas), line = 3580
 17436
 17437 95FD A9 01			lda #$01
 17438 95FF 8D B1 A1			sta BALL0.LAUNCH
 17439
 17440 				; optimize OK (service.pas), line = 3581
 17441
 17442 9602 AD 68 96			lda BALL0
 17443 9605 8D 04 A0			sta REMOVE_BALL.BALL
 17444 9608 AD 69 96			lda BALL0+1
 17445 960B 8D 05 A0			sta REMOVE_BALL.BALL+1
 17446 960E 20 9E 43			jsr REMOVE_BALL
 17447
 17448 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3582
 17449
 17450 9611 20 2B 78			jsr DESTROY_VAUS
 17451
 17452 				; optimize OK (service.pas), line = 3583
 17453
 17454 9614 AC 65 9F			ldy CUR_PLAYER
 17455 9617 B9 59 9F			lda adr.SCORE.LIVES,y
 17456 961A 38 E9 01			sub #$01
 17457 961D 99 59 9F			sta adr.SCORE.LIVES,y
 17458
 17459 				; optimize OK (service.pas), line = 3584
 17460
 17461 9620 AD 80 9D			lda WALL_P
 17462 9623 85 8E			sta @move.dst
 17463 9625 AD 65 9F			lda CUR_PLAYER
 17464 9628 18 6D 81 9D			add WALL_P+1
 17465 962C 85 8F			sta @move.dst+1
 17466 962E AD 82 9D			lda WALL
 17467 9631 85 8A			sta @move.src
 17468 9633 AD 83 9D			lda WALL+1
 17469 9636 85 8B			sta @move.src+1
 17470 9638 A9 00			lda <256
 17471 963A 85 86			sta @move.cnt
 17472 963C A9 01			lda >256
 17473 963E 85 87			sta @move.cnt+1
 17474 9640 20 E6 21			jsr @move
 17475
 17476 				; optimize FAIL ('NOSOUND', service.pas), line = 3592
 17477
 17478 9643 20 90 3C			jsr NOSOUND
 17479 9646			l_35F7
 17480 9646			l_33DA
 17481
 17482 				; optimize OK (service.pas), line = 3387
 17483
 17484 9646 AD 48 9F			lda REMAIN_BLK
 17485 9649 F0 0D			jeq l_33DBw
 17486 964B AD B0 A1			lda BALL0.INPLAY
 17487 964E F0 08			jeq l_33DBw
 17488 9650 AD 64 9F			lda SCORE.ABORTPLAY
 17489 9653 D0 03 4C DB 91		jeq l_33DB
 17490 9658			l_33DBw
 17491
 17492 				; optimize OK (service.pas), line = 3648
 17493
 17494 9658 A9 00			lda #$00
 17495 965A 8D 8B A1			sta RESULT
 17496
 17497 				; optimize OK (service.pas), line = 3649
 17498
 17499 965D AD 48 9F			lda REMAIN_BLK
 17500 9660 D0 05			jne l_3645
 17501 9662 A9 01			lda #$01
 17502 9664 8D 8B A1			sta RESULT
 17503 9667			l_3645
 17504 9667			@exit
 17505
 17506 				; ------------------------------------------------------------
 17507
 17508 = A18B			RESULT	= DATAORIGIN+$03F6
 17509 = A18C			X	= DATAORIGIN+$03F7
 17510 = A18E			Y	= DATAORIGIN+$03F9
 17511 = A190			KEY	= DATAORIGIN+$03FB
 17512 = A192			T1	= DATAORIGIN+$03FD
 17513 = A194			T2	= DATAORIGIN+$03FF
 17514 = A196			HLP	= DATAORIGIN+$0401
 17515 = A198			CN	= DATAORIGIN+$0403
 17516 = A199			adr.BALL0	= DATAORIGIN+$0404	; [28] RECORD
 17517 9667			.var BALL0	= adr.BALL0 .word
 17518 = A199			BALL0.X	= DATAORIGIN+$0404
 17519 = A19B			BALL0.Y	= DATAORIGIN+$0406
 17520 = A19D			BALL0.FINEX	= DATAORIGIN+$0408
 17521 = A19F			BALL0.FINEY	= DATAORIGIN+$040A
 17522 = A1A1			BALL0.OLDX	= DATAORIGIN+$040C
 17523 = A1A3			BALL0.OLDY	= DATAORIGIN+$040E
 17524 = A1A5			BALL0.SPEED	= DATAORIGIN+$0410
 17525 = A1A7			BALL0.FINESPEED	= DATAORIGIN+$0412
 17526 = A1A9			BALL0.SPEEDX	= DATAORIGIN+$0414
 17527 = A1AB			BALL0.SPEEDY	= DATAORIGIN+$0416
 17528 = A1AD			BALL0.SBD	= DATAORIGIN+$0418
 17529 = A1AF			BALL0.BRWHIT	= DATAORIGIN+$041A
 17530 = A1B0			BALL0.INPLAY	= DATAORIGIN+$041B
 17531 = A1B1			BALL0.LAUNCH	= DATAORIGIN+$041C
 17532 = A1B2			BALL0.ONVAUS	= DATAORIGIN+$041D
 17533 = A1B4			BALL0.STM	= DATAORIGIN+$041F
 17534 = A1B5			adr.BALL1	= DATAORIGIN+$0420	; [28] RECORD
 17535 9667			.var BALL1	= adr.BALL1 .word
 17536 = A1B5			BALL1.X	= DATAORIGIN+$0420
 17537 = A1B7			BALL1.Y	= DATAORIGIN+$0422
 17538 = A1B9			BALL1.FINEX	= DATAORIGIN+$0424
 17539 = A1BB			BALL1.FINEY	= DATAORIGIN+$0426
 17540 = A1BD			BALL1.OLDX	= DATAORIGIN+$0428
 17541 = A1BF			BALL1.OLDY	= DATAORIGIN+$042A
 17542 = A1C1			BALL1.SPEED	= DATAORIGIN+$042C
 17543 = A1C3			BALL1.FINESPEED	= DATAORIGIN+$042E
 17544 = A1C5			BALL1.SPEEDX	= DATAORIGIN+$0430
 17545 = A1C7			BALL1.SPEEDY	= DATAORIGIN+$0432
 17546 = A1C9			BALL1.SBD	= DATAORIGIN+$0434
 17547 = A1CB			BALL1.BRWHIT	= DATAORIGIN+$0436
 17548 = A1CC			BALL1.INPLAY	= DATAORIGIN+$0437
 17549 = A1CD			BALL1.LAUNCH	= DATAORIGIN+$0438
 17550 = A1CE			BALL1.ONVAUS	= DATAORIGIN+$0439
 17551 = A1D0			BALL1.STM	= DATAORIGIN+$043B
 17552 = A1D1			adr.BALL2	= DATAORIGIN+$043C	; [28] RECORD
 17553 9667			.var BALL2	= adr.BALL2 .word
 17554 = A1D1			BALL2.X	= DATAORIGIN+$043C
 17555 = A1D3			BALL2.Y	= DATAORIGIN+$043E
 17556 = A1D5			BALL2.FINEX	= DATAORIGIN+$0440
 17557 = A1D7			BALL2.FINEY	= DATAORIGIN+$0442
 17558 = A1D9			BALL2.OLDX	= DATAORIGIN+$0444
 17559 = A1DB			BALL2.OLDY	= DATAORIGIN+$0446
 17560 = A1DD			BALL2.SPEED	= DATAORIGIN+$0448
 17561 = A1DF			BALL2.FINESPEED	= DATAORIGIN+$044A
 17562 = A1E1			BALL2.SPEEDX	= DATAORIGIN+$044C
 17563 = A1E3			BALL2.SPEEDY	= DATAORIGIN+$044E
 17564 = A1E5			BALL2.SBD	= DATAORIGIN+$0450
 17565 = A1E7			BALL2.BRWHIT	= DATAORIGIN+$0452
 17566 = A1E8			BALL2.INPLAY	= DATAORIGIN+$0453
 17567 = A1E9			BALL2.LAUNCH	= DATAORIGIN+$0454
 17568 = A1EA			BALL2.ONVAUS	= DATAORIGIN+$0455
 17569 = A1EC			BALL2.STM	= DATAORIGIN+$0457
 17570
 17571 = A18C			@VarData	= X
 17572 = 0061			@VarDataSize	= 97
 17573
 17574 9667 60				rts						; ret
 17575 = 9668 99 A1		BALL0
 17575 = 966A B5 A1		BALL1
 17575 = 966C D1 A1		BALL2
 17575 				.endl
 17576
 17577 966E			.local	CHOOSE_START_WALL				; FUNCTION
 17578
 17579 				; optimize OK (service.pas), line = 3672
 17580
 17581 966E A9 01			lda #$01
 17582 9670 8D FB A1			sta ST
 17583 9673 A9 00			lda #$00
 17584 9675 8D FC A1			sta ST+1
 17585
 17586 				; optimize OK (service.pas), line = 3730
 17587
 17588 9678 AD FB A1			lda ST
 17589 967B 8D F5 A1			sta RESULT
 17590 967E AD FC A1			lda ST+1
 17591 9681 8D F6 A1			sta RESULT+1
 17592 9684			@exit
 17593
 17594 				; ------------------------------------------------------------
 17595
 17596 = A1F5			RESULT	= DATAORIGIN+$0460
 17597 = 0046			PX	= $46
 17598 = 0064			PY	= $64
 17599 = 0022			DX	= $22
 17600 = 0023			DY	= $23
 17601 = 0013			DDX	= $13
 17602 = 000E			DDY	= $0E
 17603 = A1F7			X	= DATAORIGIN+$0462
 17604 = A1F9			Y	= DATAORIGIN+$0464
 17605 = A1FB			ST	= DATAORIGIN+$0466
 17606 = A1FD			OLDX	= DATAORIGIN+$0468
 17607 = A1FF			OLDY	= DATAORIGIN+$046A
 17608 = A201			NEWX	= DATAORIGIN+$046C
 17609 = A203			NEWY	= DATAORIGIN+$046E
 17610
 17611 = A1F7			@VarData	= X
 17612 = 000E			@VarDataSize	= 14
 17613
 17614 9684 60				rts						; ret
 17615 				.endl
 17616
 17617 9685			.local	SET_START_PARAMETERS				; PROCEDURE
 17618
 17619 				; optimize OK (service.pas), line = 3739
 17620
 17621 9685 A9 01			lda #$01
 17622 9687 8D 05 A2			sta X
 17623
 17624 968A			l_3666
 17625 				; --- ForToDoCondition
 17626 968A AD 05 A2			lda X
 17627 968D C9 03			cmp #$03
 17628 968F B0 4E			jcs l_3674
 17629
 17630 				; optimize OK (service.pas), line = 3741
 17631
 17632 9691 0A				asl @
 17633 9692 0A				asl @
 17634 9693 A8				tay
 17635 9694 A9 00			lda #$00
 17636 9696 99 4A 9F			sta adr.SCORE.PLAYER,y
 17637 9699 99 4B 9F			sta adr.SCORE.PLAYER+1,y
 17638 969C 99 4C 9F			sta adr.SCORE.PLAYER+2,y
 17639 969F 99 4D 9F			sta adr.SCORE.PLAYER+3,y
 17640
 17641 				; optimize OK (service.pas), line = 3742
 17642
 17643 96A2 AC 05 A2			ldy X
 17644 96A5 A9 05			lda #$05
 17645 96A7 99 59 9F			sta adr.SCORE.LIVES,y
 17646
 17647 				; optimize OK (service.pas), line = 3743
 17648
 17649 96AA A9 01			lda #$01
 17650 96AC 99 56 9F			sta adr.SCORE.WALL_N,y
 17651
 17652 				; optimize OK (service.pas), line = 3744
 17653
 17654 96AF AD 80 9D			lda WALL_P
 17655 96B2 85 8E			sta @move.dst
 17656 96B4 AD 05 A2			lda X
 17657 96B7 18 6D 81 9D			add WALL_P+1
 17658 96BB 85 8F			sta @move.dst+1
 17659 96BD AD 84 9D			lda ALL_WALLS
 17660 96C0 85 8A			sta @move.src
 17661 96C2 AD 85 9D			lda ALL_WALLS+1
 17662 96C5 85 8B			sta @move.src+1
 17663 96C7 A9 00			lda <256
 17664 96C9 85 86			sta @move.cnt
 17665 96CB A9 01			lda >256
 17666 96CD 85 87			sta @move.cnt+1
 17667 96CF 20 E6 21			jsr @move
 17668
 17669 				; optimize OK (service.pas), line = 3746
 17670
 17671 96D2 AC 05 A2			ldy X
 17672 96D5 A9 00			lda #$00
 17673 96D7 99 61 9F			sta adr.SCORE.ROUNDSEL,y
 17674
 17675 				; --- ForToDoEpilog
 17676 96DA EE 05 A2			inc X
 17677 96DD D0 AB			jne l_3666
 17678 96DF			l_3674
 17679
 17680 				; optimize OK (service.pas), line = 3749
 17681
 17682 96DF A9 01			lda #$01
 17683 96E1 8D 65 9F			sta CUR_PLAYER
 17684
 17685 				; ------------------------------------------------------------
 17686
 17687 = A205			X	= DATAORIGIN+$0470
 17688
 17689 = A205			@VarData	= X
 17690 = 0001			@VarDataSize	= 1
 17691
 17692 96E4			@exit
 17693 					.ifdef @new
 17694 					lda <@VarData
 17695 					sta :ztmp
 17696 					lda >@VarData
 17697 					ldy #@VarDataSize-1
 17698 					jmp @FreeMem
 17699 					els
 17700 96E4 60				rts						; ret
 17701 					eif
 17702 				.endl
 17703
 17704 96E5			.local	MAINSCREEN					; FUNCTION
 17705
 17706 				; optimize FAIL ('NOSOUND', service.pas), line = 3809
 17707
 17708 96E5 20 90 3C			jsr NOSOUND
 17709
 17710 				; optimize OK (service.pas), line = 3810
 17711
 17712 96E8 A9 00			lda #$00
 17713 96EA 8D 64 9F			sta SCORE.ABORTPLAY
 17714
 17715 				; optimize OK (service.pas), line = 3821
 17716
 17717 96ED AD CD 9E			lda PRESENTS.OFS
 17718 96F0 8D 93 9F			sta BLITBOX.SRC
 17719 96F3 AD CE 9E			lda PRESENTS.OFS+1
 17720 96F6 8D 94 9F			sta BLITBOX.SRC+1
 17721 96F9 AD CF 9E			lda PRESENTS.OFS+2
 17722 96FC 8D 95 9F			sta BLITBOX.SRC+2
 17723 96FF AD D0 9E			lda PRESENTS.OFS+3
 17724 9702 8D 96 9F			sta BLITBOX.SRC+3
 17725 9705 A9 00			lda #$00
 17726 9707 8D 97 9F			sta BLITBOX.DST
 17727 970A A9 50			lda #$50
 17728 970C 8D 98 9F			sta BLITBOX.DST+1
 17729 970F A9 00			lda #$00
 17730 9711 8D 99 9F			sta BLITBOX.DST+2
 17731 9714 8D 9A 9F			sta BLITBOX.DST+3
 17732 9717 A9 40			lda #$40
 17733 9719 8D 9B 9F			sta BLITBOX.W
 17734 971C A9 01			lda #$01
 17735 971E 8D 9C 9F			sta BLITBOX.W+1
 17736 9721 A9 C8			lda #$C8
 17737 9723 8D 9D 9F			sta BLITBOX.H
 17738 9726 20 96 3A			jsr BLITBOX
 17739
 17740 				; optimize OK (service.pas), line = 3859
 17741
 17742 9729 A9 01			lda #$01
 17743 972B 8D 06 A2			sta RESULT
 17744 972E A9 00			lda #$00
 17745 9730 8D 07 A2			sta RESULT+1
 17746 9733			@exit
 17747
 17748 				; ------------------------------------------------------------
 17749
 17750 = A206			RESULT	= DATAORIGIN+$0471
 17751 = A208			X	= DATAORIGIN+$0473
 17752 = A20A			Y	= DATAORIGIN+$0475
 17753 = A20C			Z	= DATAORIGIN+$0477
 17754 = A20E			K	= DATAORIGIN+$0479
 17755 = A210			IK	= DATAORIGIN+$047B
 17756
 17757 = A208			@VarData	= X
 17758 = 000A			@VarDataSize	= 10
 17759
 17760 9733 60				rts						; ret
 17761 				.endl
 17762
 17763 9734			.local	START_GAME					; PROCEDURE
 17764
 17765 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3867
 17766
 17767 9734 20 85 96			jsr SET_START_PARAMETERS
 17768
 17769 				; optimize OK (service.pas), line = 3868
 17770
 17771 9737 AD 13 A2			lda PLAYERS+1
 17772 973A D0 05			bne @+
 17773 973C AD 12 A2			lda PLAYERS
 17774 973F C9 01			cmp #$01
 17775 				@
 17776 9741 D0 05			jne l_36D3
 17777 9743 A9 00			lda #$00
 17778 9745 8D 5B 9F			sta adr.SCORE.LIVES+$02
 17779 9748			l_36D3
 17780
 17781 				; optimize OK (service.pas), line = 3871
 17782
 17783 9748 A9 00			lda #$00
 17784 974A 8D 6D 9F			sta TRAINER
 17785
 17786 				; optimize OK (service.pas), line = 3872
 17787
 17788 974D AD 82 9D			lda WALL
 17789 9750 85 8E			sta @move.dst
 17790 9752 AD 83 9D			lda WALL+1
 17791 9755 85 8F			sta @move.dst+1
 17792 9757 AD 80 9D			lda WALL_P
 17793 975A 85 8A			sta @move.src
 17794 975C AD 65 9F			lda CUR_PLAYER
 17795 975F 18 6D 81 9D			add WALL_P+1
 17796 9763 85 8B			sta @move.src+1
 17797 9765 A9 00			lda <256
 17798 9767 85 86			sta @move.cnt
 17799 9769 A9 01			lda >256
 17800 976B 85 87			sta @move.cnt+1
 17801 976D 20 E6 21			jsr @move
 17802
 17803 				; optimize FAIL ('SET_WALL', service.pas), line = 3876
 17804
 17805 9770 20 40 5C			jsr SET_WALL
 17806
 17807 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3879
 17808
 17809 9773 E8				inx
 17810 9774 AD 3C 9D 95 96		mva PLAYSCREEN :STACKORIGIN,x
 17811 9779 AD 3D 9D 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 17812 977E 20 CE 42			jsr SHOWBTMPICTURE
 17813
 17814 				; optimize OK (service.pas), line = 3886
 17815
 17816 9781 AD 4E 9F			lda adr.SCORE.PLAYER+$04
 17817 9784 8D 4A A1			sta WRITE_SCORE.SC
 17818 9787 AD 4F 9F			lda adr.SCORE.PLAYER+1+$04
 17819 978A 8D 4B A1			sta WRITE_SCORE.SC+1
 17820 978D AD 50 9F			lda adr.SCORE.PLAYER+2+$04
 17821 9790 8D 4C A1			sta WRITE_SCORE.SC+2
 17822 9793 AD 51 9F			lda adr.SCORE.PLAYER+3+$04
 17823 9796 8D 4D A1			sta WRITE_SCORE.SC+3
 17824 9799 A9 FD			lda #$FD
 17825 979B 8D 46 A1			sta WRITE_SCORE.PX
 17826 979E A9 00			lda #$00
 17827 97A0 8D 47 A1			sta WRITE_SCORE.PX+1
 17828 97A3 A9 3C			lda #$3C
 17829 97A5 8D 48 A1			sta WRITE_SCORE.PY
 17830 97A8 A9 00			lda #$00
 17831 97AA 8D 49 A1			sta WRITE_SCORE.PY+1
 17832 97AD 20 E5 7F			jsr WRITE_SCORE
 17833
 17834 				; optimize OK (service.pas), line = 3887
 17835
 17836 97B0 AD 52 9F			lda adr.SCORE.PLAYER+$08
 17837 97B3 8D 4A A1			sta WRITE_SCORE.SC
 17838 97B6 AD 53 9F			lda adr.SCORE.PLAYER+1+$08
 17839 97B9 8D 4B A1			sta WRITE_SCORE.SC+1
 17840 97BC AD 54 9F			lda adr.SCORE.PLAYER+2+$08
 17841 97BF 8D 4C A1			sta WRITE_SCORE.SC+2
 17842 97C2 AD 55 9F			lda adr.SCORE.PLAYER+3+$08
 17843 97C5 8D 4D A1			sta WRITE_SCORE.SC+3
 17844 97C8 A9 FD			lda #$FD
 17845 97CA 8D 46 A1			sta WRITE_SCORE.PX
 17846 97CD A9 00			lda #$00
 17847 97CF 8D 47 A1			sta WRITE_SCORE.PX+1
 17848 97D2 A9 5D			lda #$5D
 17849 97D4 8D 48 A1			sta WRITE_SCORE.PY
 17850 97D7 A9 00			lda #$00
 17851 97D9 8D 49 A1			sta WRITE_SCORE.PY+1
 17852 97DC 20 E5 7F			jsr WRITE_SCORE
 17853
 17854 				; optimize OK (service.pas), line = 3888
 17855
 17856 97DF A9 FD			lda #$FD
 17857 97E1 8D 46 A1			sta WRITE_SCORE.PX
 17858 97E4 A9 00			lda #$00
 17859 97E6 8D 47 A1			sta WRITE_SCORE.PX+1
 17860 97E9 A9 80			lda #$80
 17861 97EB 8D 48 A1			sta WRITE_SCORE.PY
 17862 97EE A9 00			lda #$00
 17863 97F0 8D 49 A1			sta WRITE_SCORE.PY+1
 17864 97F3 AD 5C 9F			lda SCORE.HISCORE
 17865 97F6 8D 4A A1			sta WRITE_SCORE.SC
 17866 97F9 AD 5D 9F			lda SCORE.HISCORE+1
 17867 97FC 8D 4B A1			sta WRITE_SCORE.SC+1
 17868 97FF AD 5E 9F			lda SCORE.HISCORE+2
 17869 9802 8D 4C A1			sta WRITE_SCORE.SC+2
 17870 9805 AD 5F 9F			lda SCORE.HISCORE+3
 17871 9808 8D 4D A1			sta WRITE_SCORE.SC+3
 17872 980B 20 E5 7F			jsr WRITE_SCORE
 17873
 17874 				; --- RepeatUntilProlog
 17875 980E			l_36FF
 17876
 17877 				; --- RepeatUntilProlog
 17878 980E			l_3700
 17879
 17880 				; optimize OK (service.pas), line = 3898
 17881
 17882 980E AC 65 9F			ldy CUR_PLAYER
 17883 9811 B9 61 9F			lda adr.SCORE.ROUNDSEL,y
 17884 9814 D0 77			jne l_3712
 17885
 17886 				; optimize FAIL (1, service.pas), line = 3900
 17887
 17888 9816 E8				inx
 17889 9817 AD 65 9F 95 96		mva CUR_PLAYER :STACKORIGIN,x
 17890 981C A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17891 9820 20 6E 96			jsr CHOOSE_START_WALL
 17892 9823 E8				inx
 17893 9824 AD F5 A1 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 17894 9829 AD F6 A1 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17895 982E B4 95			ldy :STACKORIGIN-1,x
 17896 9830 B5 96			lda :STACKORIGIN,x
 17897 9832 99 56 9F			sta adr.SCORE.WALL_N,y
 17898 9835 CA				dex
 17899 9836 CA				dex
 17900
 17901 				; optimize OK (service.pas), line = 3903
 17902
 17903 9837 A9 00			lda #$00
 17904 9839 85 9F			sta :STACKORIGIN+9
 17905 983B AD 65 9F			lda CUR_PLAYER
 17906 983E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17907 9840 AC 65 9F			ldy CUR_PLAYER
 17908 9843 B9 56 9F			lda adr.SCORE.WALL_N,y
 17909 9846 38 E9 01			sub #$01
 17910 9849 85 86			sta :eax
 17911 984B A9 00			lda #$00
 17912 984D E9 00			sbc #$00
 17913 984F 85 87			sta :eax+1
 17914 9851 A9 00			lda #$00
 17915 9853 85 8E			sta :ecx
 17916 9855 A9 01			lda #$01
 17917 9857 85 8F			sta :ecx+1
 17918 					.ifdef fmulinit
 17919 					fmulu_16
 17920 					els
 17921 9859 20 3B 23			imulCX
 17922 					eif
 17923 985C AD 80 9D			lda WALL_P
 17924 985F 18 65 9F			add :STACKORIGIN+9
 17925 9862 85 8E			sta @move.dst
 17926 9864 AD 81 9D			lda WALL_P+1
 17927 9867 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 17928 9869 85 8F			sta @move.dst+1
 17929 986B A5 86			lda :eax
 17930 986D 18 6D 84 9D			add ALL_WALLS
 17931 9871 85 8A			sta @move.src
 17932 9873 A5 87			lda :eax+1
 17933 9875 6D 85 9D			adc ALL_WALLS+1
 17934 9878 85 8B			sta @move.src+1
 17935 987A A9 00			lda <256
 17936 987C 85 86			sta @move.cnt
 17937 987E A9 01			lda >256
 17938 9880 85 87			sta @move.cnt+1
 17939 9882 20 E6 21			jsr @move
 17940
 17941 				; optimize OK (service.pas), line = 3907
 17942
 17943 9885 AC 65 9F			ldy CUR_PLAYER
 17944 9888 A9 01			lda #$01
 17945 988A 99 61 9F			sta adr.SCORE.ROUNDSEL,y
 17946 988D			l_3712
 17947
 17948 				; optimize OK (service.pas), line = 3911
 17949
 17950 988D AD 82 9D			lda WALL
 17951 9890 85 8E			sta @move.dst
 17952 9892 AD 83 9D			lda WALL+1
 17953 9895 85 8F			sta @move.dst+1
 17954 9897 AD 80 9D			lda WALL_P
 17955 989A 85 8A			sta @move.src
 17956 989C AD 65 9F			lda CUR_PLAYER
 17957 989F 18 6D 81 9D			add WALL_P+1
 17958 98A3 85 8B			sta @move.src+1
 17959 98A5 A9 00			lda <256
 17960 98A7 85 86			sta @move.cnt
 17961 98A9 A9 01			lda >256
 17962 98AB 85 87			sta @move.cnt+1
 17963 98AD 20 E6 21			jsr @move
 17964
 17965 				; optimize FAIL ('SET_WALL', service.pas), line = 3912
 17966
 17967 98B0 20 40 5C			jsr SET_WALL
 17968
 17969 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3917
 17970
 17971 98B3 20 60 8E			jsr BOUNCEBALL
 17972 98B6 AD 8B A1			lda BOUNCEBALL.RESULT
 17973 98B9 8D 14 A2			sta NWALL
 17974
 17975 				; optimize OK (service.pas), line = 3920
 17976
 17977 98BC F0 6A			jeq l_3760
 17978
 17979 				; optimize OK (service.pas), line = 3923
 17980
 17981 98BE AC 65 9F			ldy CUR_PLAYER
 17982 98C1 B9 56 9F			lda adr.SCORE.WALL_N,y
 17983 98C4 18 69 01			add #$01
 17984 98C7 99 56 9F			sta adr.SCORE.WALL_N,y
 17985
 17986 				; optimize OK (service.pas), line = 3926
 17987
 17988 98CA AD 49 9F			lda TOTALWALL
 17989 98CD D9 56 9F			cmp adr.SCORE.WALL_N,y
 17990 98D0 B0 05			jcs l_377C
 17991
 17992 				; optimize OK (service.pas), line = 3927
 17993
 17994 98D2 A9 01			lda #$01
 17995 98D4 99 56 9F			sta adr.SCORE.WALL_N,y
 17996 98D7			l_377C
 17997
 17998 				; optimize OK (service.pas), line = 3930
 17999
 18000 98D7 A9 00			lda #$00
 18001 98D9 85 9F			sta :STACKORIGIN+9
 18002 98DB AD 65 9F			lda CUR_PLAYER
 18003 98DE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18004 98E0 AC 65 9F			ldy CUR_PLAYER
 18005 98E3 B9 56 9F			lda adr.SCORE.WALL_N,y
 18006 98E6 38 E9 01			sub #$01
 18007 98E9 85 86			sta :eax
 18008 98EB A9 00			lda #$00
 18009 98ED E9 00			sbc #$00
 18010 98EF 85 87			sta :eax+1
 18011 98F1 A9 00			lda #$00
 18012 98F3 85 8E			sta :ecx
 18013 98F5 A9 01			lda #$01
 18014 98F7 85 8F			sta :ecx+1
 18015 					.ifdef fmulinit
 18016 					fmulu_16
 18017 					els
 18018 98F9 20 3B 23			imulCX
 18019 					eif
 18020 98FC AD 80 9D			lda WALL_P
 18021 98FF 18 65 9F			add :STACKORIGIN+9
 18022 9902 85 8E			sta @move.dst
 18023 9904 AD 81 9D			lda WALL_P+1
 18024 9907 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18025 9909 85 8F			sta @move.dst+1
 18026 990B A5 86			lda :eax
 18027 990D 18 6D 84 9D			add ALL_WALLS
 18028 9911 85 8A			sta @move.src
 18029 9913 A5 87			lda :eax+1
 18030 9915 6D 85 9D			adc ALL_WALLS+1
 18031 9918 85 8B			sta @move.src+1
 18032 991A A9 00			lda <256
 18033 991C 85 86			sta @move.cnt
 18034 991E A9 01			lda >256
 18035 9920 85 87			sta @move.cnt+1
 18036 9922 20 E6 21			jsr @move
 18037 9925 4C 33 99			jmp l_37AE
 18038 9928			l_3760
 18039
 18040 				; optimize OK (service.pas), line = 3936
 18041
 18042 9928 AC 65 9F			ldy CUR_PLAYER
 18043 992B B9 59 9F			lda adr.SCORE.LIVES,y
 18044 992E D0 03			jne l_37C3
 18045 9930 20 28 78			jsr GAME_OVER
 18046 9933			l_37AE
 18047 9933			l_37C3
 18048
 18049 				; optimize OK (service.pas), line = 3941
 18050
 18051 9933 AD 14 A2			lda NWALL
 18052 9936 F0 03 4C 0E 98		jne l_3700
 18053
 18054 				; optimize FAIL (0, service.pas), line = 3944
 18055
 18056 993B EE 65 9F			inc CUR_PLAYER
 18057
 18058 				; optimize OK (service.pas), line = 3945
 18059
 18060 993E AD 12 A2			lda PLAYERS
 18061 9941 CD 65 9F			cmp CUR_PLAYER
 18062 9944 AD 13 A2			lda PLAYERS+1
 18063 9947 E9 00			sbc #$00
 18064 9949 50 02			svc
 18065 994B 49 80			eor #$80
 18066 994D 10 05			jpl l_37EB
 18067 994F A9 01			lda #$01
 18068 9951 8D 65 9F			sta CUR_PLAYER
 18069 9954			l_37EB
 18070
 18071 				; optimize OK (service.pas), line = 3951
 18072
 18073 9954 AC 65 9F			ldy CUR_PLAYER
 18074 9957 B9 59 9F			lda adr.SCORE.LIVES,y
 18075 995A D0 09			jne l_3807
 18076 995C A9 03			lda #$03
 18077 995E 38 ED 65 9F			sub CUR_PLAYER
 18078 9962 8D 65 9F			sta CUR_PLAYER
 18079 9965			l_3807
 18080
 18081 				; optimize OK (service.pas), line = 3956
 18082
 18083 9965 A0 01			ldy #1
 18084 9967 AD 5A 9F			lda adr.SCORE.LIVES+$01
 18085 996A F0 01			beq @+
 18086 996C 88				dey
 18087 				@
 18088 996D 84 9F			sty :STACKORIGIN+9
 18089 996F A0 01			ldy #1
 18090 9971 AD 5B 9F			lda adr.SCORE.LIVES+$02
 18091 9974 F0 01			beq @+
 18092 9976 88				dey
 18093 				@
 18094 9977 98				tya
 18095 9978 25 9F			and :STACKORIGIN+9
 18096 997A 0D 64 9F			ora SCORE.ABORTPLAY
 18097 997D D0 03 4C 0E 98		jeq l_36FF
 18098
 18099 				; ------------------------------------------------------------
 18100
 18101 = A212			PLAYERS	= DATAORIGIN+$047D
 18102 = A214			NWALL	= DATAORIGIN+$047F
 18103
 18104 = A212			@VarData	= PLAYERS
 18105 = 0003			@VarDataSize	= 3
 18106
 18107 9982			@exit
 18108 					.ifdef @new
 18109 					lda <@VarData
 18110 					sta :ztmp
 18111 					lda >@VarData
 18112 					ldy #@VarDataSize-1
 18113 					jmp @FreeMem
 18114 					els
 18115 9982 60				rts						; ret
 18116 					eif
 18117 				.endl
 18118
 18119 9983			.local	INIT_GAME					; PROCEDURE
 18120
 18121 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 123
 18122
 18123 9983 20 35 33			jsr SYSTEM.RANDOMIZE
 18124
 18125 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 125
 18126
 18127 9986 20 3D 3D			jsr INITSVGA
 18128
 18129 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 126
 18130
 18131 9989 20 FB 3C			jsr INITROWARRAY
 18132
 18133 				; optimize OK (btm.inc), line = 1
 18134
 18135 998C A9 00			lda #$00
 18136 998E 8D 95 9E			sta PLAYSCREEN.OFS
 18137 9991 A9 5E			lda #$5E
 18138 9993 8D 96 9E			sta PLAYSCREEN.OFS+1
 18139 9996 A9 01			lda #$01
 18140 9998 8D 97 9E			sta PLAYSCREEN.OFS+2
 18141 999B A9 00			lda #$00
 18142 999D 8D 98 9E			sta PLAYSCREEN.OFS+3
 18143
 18144 				; optimize OK (btm.inc), line = 2
 18145
 18146 99A0 A9 40			lda #$40
 18147 99A2 8D 91 9E			sta PLAYSCREEN.WIDTH
 18148 99A5 A9 01			lda #$01
 18149 99A7 8D 92 9E			sta PLAYSCREEN.WIDTH+1
 18150
 18151 				; optimize OK (btm.inc), line = 3
 18152
 18153 99AA A9 C8			lda #$C8
 18154 99AC 8D 93 9E			sta PLAYSCREEN.HEIGHT
 18155 99AF A9 00			lda #$00
 18156 99B1 8D 94 9E			sta PLAYSCREEN.HEIGHT+1
 18157
 18158 				; optimize OK (btm.inc), line = 5
 18159
 18160 99B4 8D CD 9E			sta PRESENTS.OFS
 18161 99B7 A9 58			lda #$58
 18162 99B9 8D CE 9E			sta PRESENTS.OFS+1
 18163 99BC A9 02			lda #$02
 18164 99BE 8D CF 9E			sta PRESENTS.OFS+2
 18165 99C1 A9 00			lda #$00
 18166 99C3 8D D0 9E			sta PRESENTS.OFS+3
 18167
 18168 				; optimize OK (btm.inc), line = 6
 18169
 18170 99C6 A9 40			lda #$40
 18171 99C8 8D C9 9E			sta PRESENTS.WIDTH
 18172 99CB A9 01			lda #$01
 18173 99CD 8D CA 9E			sta PRESENTS.WIDTH+1
 18174
 18175 				; optimize OK (btm.inc), line = 7
 18176
 18177 99D0 A9 C8			lda #$C8
 18178 99D2 8D CB 9E			sta PRESENTS.HEIGHT
 18179 99D5 A9 00			lda #$00
 18180 99D7 8D CC 9E			sta PRESENTS.HEIGHT+1
 18181
 18182 				; optimize OK (btm.inc), line = 9
 18183
 18184 99DA 8D BD 9E			sta EXPLOSION.OFS
 18185 99DD A9 52			lda #$52
 18186 99DF 8D BE 9E			sta EXPLOSION.OFS+1
 18187 99E2 A9 03			lda #$03
 18188 99E4 8D BF 9E			sta EXPLOSION.OFS+2
 18189 99E7 A9 00			lda #$00
 18190 99E9 8D C0 9E			sta EXPLOSION.OFS+3
 18191
 18192 				; optimize OK (btm.inc), line = 10
 18193
 18194 99EC A9 2A			lda #$2A
 18195 99EE 8D B9 9E			sta EXPLOSION.WIDTH
 18196 99F1 A9 00			lda #$00
 18197 99F3 8D BA 9E			sta EXPLOSION.WIDTH+1
 18198
 18199 				; optimize OK (btm.inc), line = 11
 18200
 18201 99F6 A9 72			lda #$72
 18202 99F8 8D BB 9E			sta EXPLOSION.HEIGHT
 18203 99FB A9 00			lda #$00
 18204 99FD 8D BC 9E			sta EXPLOSION.HEIGHT+1
 18205
 18206 				; optimize OK (btm.inc), line = 13
 18207
 18208 9A00 A9 B4			lda #$B4
 18209 9A02 8D C5 9E			sta NEWVAUS.OFS
 18210 9A05 A9 64			lda #$64
 18211 9A07 8D C6 9E			sta NEWVAUS.OFS+1
 18212 9A0A A9 03			lda #$03
 18213 9A0C 8D C7 9E			sta NEWVAUS.OFS+2
 18214 9A0F A9 00			lda #$00
 18215 9A11 8D C8 9E			sta NEWVAUS.OFS+3
 18216
 18217 				; optimize OK (btm.inc), line = 14
 18218
 18219 9A14 A9 29			lda #$29
 18220 9A16 8D C1 9E			sta NEWVAUS.WIDTH
 18221 9A19 A9 00			lda #$00
 18222 9A1B 8D C2 9E			sta NEWVAUS.WIDTH+1
 18223
 18224 				; optimize OK (btm.inc), line = 15
 18225
 18226 9A1E A9 C1			lda #$C1
 18227 9A20 8D C3 9E			sta NEWVAUS.HEIGHT
 18228 9A23 A9 00			lda #$00
 18229 9A25 8D C4 9E			sta NEWVAUS.HEIGHT+1
 18230
 18231 				; optimize OK (btm.inc), line = 17
 18232
 18233 9A28 A9 9D			lda #$9D
 18234 9A2A 8D D5 9E			sta SOUNDFX.OFS
 18235 9A2D A9 83			lda #$83
 18236 9A2F 8D D6 9E			sta SOUNDFX.OFS+1
 18237 9A32 A9 03			lda #$03
 18238 9A34 8D D7 9E			sta SOUNDFX.OFS+2
 18239 9A37 A9 00			lda #$00
 18240 9A39 8D D8 9E			sta SOUNDFX.OFS+3
 18241
 18242 				; optimize OK (btm.inc), line = 18
 18243
 18244 9A3C A9 15			lda #$15
 18245 9A3E 8D D1 9E			sta SOUNDFX.WIDTH
 18246 9A41 A9 00			lda #$00
 18247 9A43 8D D2 9E			sta SOUNDFX.WIDTH+1
 18248
 18249 				; optimize OK (btm.inc), line = 19
 18250
 18251 9A46 A9 26			lda #$26
 18252 9A48 8D D3 9E			sta SOUNDFX.HEIGHT
 18253 9A4B A9 00			lda #$00
 18254 9A4D 8D D4 9E			sta SOUNDFX.HEIGHT+1
 18255
 18256 				; optimize OK (btm.inc), line = 21
 18257
 18258 9A50 A9 BB			lda #$BB
 18259 9A52 8D DD 9E			sta SHINEWALL.OFS
 18260 9A55 A9 86			lda #$86
 18261 9A57 8D DE 9E			sta SHINEWALL.OFS+1
 18262 9A5A A9 03			lda #$03
 18263 9A5C 8D DF 9E			sta SHINEWALL.OFS+2
 18264 9A5F A9 00			lda #$00
 18265 9A61 8D E0 9E			sta SHINEWALL.OFS+3
 18266
 18267 				; optimize OK (btm.inc), line = 22
 18268
 18269 9A64 A9 10			lda #$10
 18270 9A66 8D D9 9E			sta SHINEWALL.WIDTH
 18271 9A69 A9 00			lda #$00
 18272 9A6B 8D DA 9E			sta SHINEWALL.WIDTH+1
 18273
 18274 				; optimize OK (btm.inc), line = 23
 18275
 18276 9A6E A9 50			lda #$50
 18277 9A70 8D DB 9E			sta SHINEWALL.HEIGHT
 18278 9A73 A9 00			lda #$00
 18279 9A75 8D DC 9E			sta SHINEWALL.HEIGHT+1
 18280
 18281 				; optimize OK (btm.inc), line = 25
 18282
 18283 9A78 A9 BB			lda #$BB
 18284 9A7A 8D E5 9E			sta MINIVAUS.OFS
 18285 9A7D A9 8B			lda #$8B
 18286 9A7F 8D E6 9E			sta MINIVAUS.OFS+1
 18287 9A82 A9 03			lda #$03
 18288 9A84 8D E7 9E			sta MINIVAUS.OFS+2
 18289 9A87 A9 00			lda #$00
 18290 9A89 8D E8 9E			sta MINIVAUS.OFS+3
 18291
 18292 				; optimize OK (btm.inc), line = 26
 18293
 18294 9A8C A9 14			lda #$14
 18295 9A8E 8D E1 9E			sta MINIVAUS.WIDTH
 18296 9A91 A9 00			lda #$00
 18297 9A93 8D E2 9E			sta MINIVAUS.WIDTH+1
 18298
 18299 				; optimize OK (btm.inc), line = 27
 18300
 18301 9A96 A9 05			lda #$05
 18302 9A98 8D E3 9E			sta MINIVAUS.HEIGHT
 18303 9A9B A9 00			lda #$00
 18304 9A9D 8D E4 9E			sta MINIVAUS.HEIGHT+1
 18305
 18306 				; optimize OK (btm.inc), line = 29
 18307
 18308 9AA0 A9 1F			lda #$1F
 18309 9AA2 8D ED 9E			sta LEVELSEL.OFS
 18310 9AA5 A9 8C			lda #$8C
 18311 9AA7 8D EE 9E			sta LEVELSEL.OFS+1
 18312 9AAA A9 03			lda #$03
 18313 9AAC 8D EF 9E			sta LEVELSEL.OFS+2
 18314 9AAF A9 00			lda #$00
 18315 9AB1 8D F0 9E			sta LEVELSEL.OFS+3
 18316
 18317 				; optimize OK (btm.inc), line = 30
 18318
 18319 9AB4 A9 15			lda #$15
 18320 9AB6 8D E9 9E			sta LEVELSEL.WIDTH
 18321 9AB9 A9 00			lda #$00
 18322 9ABB 8D EA 9E			sta LEVELSEL.WIDTH+1
 18323
 18324 				; optimize OK (btm.inc), line = 31
 18325
 18326 9ABE A9 5F			lda #$5F
 18327 9AC0 8D EB 9E			sta LEVELSEL.HEIGHT
 18328 9AC3 A9 00			lda #$00
 18329 9AC5 8D EC 9E			sta LEVELSEL.HEIGHT+1
 18330
 18331 				; optimize OK (btm.inc), line = 33
 18332
 18333 9AC8 A9 EA			lda #$EA
 18334 9ACA 8D F5 9E			sta LETTERS.OFS
 18335 9ACD A9 93			lda #$93
 18336 9ACF 8D F6 9E			sta LETTERS.OFS+1
 18337 9AD2 A9 03			lda #$03
 18338 9AD4 8D F7 9E			sta LETTERS.OFS+2
 18339 9AD7 A9 00			lda #$00
 18340 9AD9 8D F8 9E			sta LETTERS.OFS+3
 18341
 18342 				; optimize OK (btm.inc), line = 34
 18343
 18344 9ADC A9 80			lda #$80
 18345 9ADE 8D F1 9E			sta LETTERS.WIDTH
 18346 9AE1 A9 00			lda #$00
 18347 9AE3 8D F2 9E			sta LETTERS.WIDTH+1
 18348
 18349 				; optimize OK (btm.inc), line = 35
 18350
 18351 9AE6 A9 38			lda #$38
 18352 9AE8 8D F3 9E			sta LETTERS.HEIGHT
 18353 9AEB A9 00			lda #$00
 18354 9AED 8D F4 9E			sta LETTERS.HEIGHT+1
 18355
 18356 				; optimize OK (btm.inc), line = 37
 18357
 18358 9AF0 A9 EA			lda #$EA
 18359 9AF2 8D A5 9E			sta NORMAL.OFS
 18360 9AF5 A9 AF			lda #$AF
 18361 9AF7 8D A6 9E			sta NORMAL.OFS+1
 18362 9AFA A9 03			lda #$03
 18363 9AFC 8D A7 9E			sta NORMAL.OFS+2
 18364 9AFF A9 00			lda #$00
 18365 9B01 8D A8 9E			sta NORMAL.OFS+3
 18366
 18367 				; optimize OK (btm.inc), line = 38
 18368
 18369 9B04 A9 20			lda #$20
 18370 9B06 8D A1 9E			sta NORMAL.WIDTH
 18371 9B09 A9 00			lda #$00
 18372 9B0B 8D A2 9E			sta NORMAL.WIDTH+1
 18373
 18374 				; optimize OK (btm.inc), line = 39
 18375
 18376 9B0E A9 07			lda #$07
 18377 9B10 8D A3 9E			sta NORMAL.HEIGHT
 18378 9B13 A9 00			lda #$00
 18379 9B15 8D A4 9E			sta NORMAL.HEIGHT+1
 18380
 18381 				; optimize OK (btm.inc), line = 41
 18382
 18383 9B18 A9 CA			lda #$CA
 18384 9B1A 8D B5 9E			sta LASERS.OFS
 18385 9B1D A9 B0			lda #$B0
 18386 9B1F 8D B6 9E			sta LASERS.OFS+1
 18387 9B22 A9 03			lda #$03
 18388 9B24 8D B7 9E			sta LASERS.OFS+2
 18389 9B27 A9 00			lda #$00
 18390 9B29 8D B8 9E			sta LASERS.OFS+3
 18391
 18392 				; optimize OK (btm.inc), line = 42
 18393
 18394 9B2C A9 20			lda #$20
 18395 9B2E 8D B1 9E			sta LASERS.WIDTH
 18396 9B31 A9 00			lda #$00
 18397 9B33 8D B2 9E			sta LASERS.WIDTH+1
 18398
 18399 				; optimize OK (btm.inc), line = 43
 18400
 18401 9B36 A9 07			lda #$07
 18402 9B38 8D B3 9E			sta LASERS.HEIGHT
 18403 9B3B A9 00			lda #$00
 18404 9B3D 8D B4 9E			sta LASERS.HEIGHT+1
 18405
 18406 				; optimize OK (btm.inc), line = 45
 18407
 18408 9B40 A9 AA			lda #$AA
 18409 9B42 8D AD 9E			sta ENLARGED.OFS
 18410 9B45 A9 B1			lda #$B1
 18411 9B47 8D AE 9E			sta ENLARGED.OFS+1
 18412 9B4A A9 03			lda #$03
 18413 9B4C 8D AF 9E			sta ENLARGED.OFS+2
 18414 9B4F A9 00			lda #$00
 18415 9B51 8D B0 9E			sta ENLARGED.OFS+3
 18416
 18417 				; optimize OK (btm.inc), line = 46
 18418
 18419 9B54 A9 40			lda #$40
 18420 9B56 8D A9 9E			sta ENLARGED.WIDTH
 18421 9B59 A9 00			lda #$00
 18422 9B5B 8D AA 9E			sta ENLARGED.WIDTH+1
 18423
 18424 				; optimize OK (btm.inc), line = 47
 18425
 18426 9B5E A9 07			lda #$07
 18427 9B60 8D AB 9E			sta ENLARGED.HEIGHT
 18428 9B63 A9 00			lda #$00
 18429 9B65 8D AC 9E			sta ENLARGED.HEIGHT+1
 18430
 18431 				; optimize OK (btm.inc), line = 49
 18432
 18433 9B68 A9 6A			lda #$6A
 18434 9B6A 8D FD 9E			sta SHOOTS.OFS
 18435 9B6D A9 B3			lda #$B3
 18436 9B6F 8D FE 9E			sta SHOOTS.OFS+1
 18437 9B72 A9 03			lda #$03
 18438 9B74 8D FF 9E			sta SHOOTS.OFS+2
 18439 9B77 A9 00			lda #$00
 18440 9B79 8D 00 9F			sta SHOOTS.OFS+3
 18441
 18442 				; optimize OK (btm.inc), line = 50
 18443
 18444 9B7C A9 0D			lda #$0D
 18445 9B7E 8D F9 9E			sta SHOOTS.WIDTH
 18446 9B81 A9 00			lda #$00
 18447 9B83 8D FA 9E			sta SHOOTS.WIDTH+1
 18448
 18449 				; optimize OK (btm.inc), line = 51
 18450
 18451 9B86 A9 08			lda #$08
 18452 9B88 8D FB 9E			sta SHOOTS.HEIGHT
 18453 9B8B A9 00			lda #$00
 18454 9B8D 8D FC 9E			sta SHOOTS.HEIGHT+1
 18455
 18456 				; optimize OK (btm.inc), line = 53
 18457
 18458 9B90 A9 D2			lda #$D2
 18459 9B92 8D 05 9F			sta FLUX.OFS
 18460 9B95 A9 B3			lda #$B3
 18461 9B97 8D 06 9F			sta FLUX.OFS+1
 18462 9B9A A9 03			lda #$03
 18463 9B9C 8D 07 9F			sta FLUX.OFS+2
 18464 9B9F A9 00			lda #$00
 18465 9BA1 8D 08 9F			sta FLUX.OFS+3
 18466
 18467 				; optimize OK (btm.inc), line = 54
 18468
 18469 9BA4 A9 08			lda #$08
 18470 9BA6 8D 01 9F			sta FLUX.WIDTH
 18471 9BA9 A9 00			lda #$00
 18472 9BAB 8D 02 9F			sta FLUX.WIDTH+1
 18473
 18474 				; optimize OK (btm.inc), line = 55
 18475
 18476 9BAE A9 29			lda #$29
 18477 9BB0 8D 03 9F			sta FLUX.HEIGHT
 18478 9BB3 A9 00			lda #$00
 18479 9BB5 8D 04 9F			sta FLUX.HEIGHT+1
 18480
 18481 				; optimize OK (btm.inc), line = 57
 18482
 18483 9BB8 A9 1A			lda #$1A
 18484 9BBA 8D 8D 9E			sta BALLDATA.OFS
 18485 9BBD A9 B5			lda #$B5
 18486 9BBF 8D 8E 9E			sta BALLDATA.OFS+1
 18487 9BC2 A9 03			lda #$03
 18488 9BC4 8D 8F 9E			sta BALLDATA.OFS+2
 18489 9BC7 A9 00			lda #$00
 18490 9BC9 8D 90 9E			sta BALLDATA.OFS+3
 18491
 18492 				; optimize OK (btm.inc), line = 58
 18493
 18494 9BCC A9 05			lda #$05
 18495 9BCE 8D 89 9E			sta BALLDATA.WIDTH
 18496 9BD1 A9 00			lda #$00
 18497 9BD3 8D 8A 9E			sta BALLDATA.WIDTH+1
 18498
 18499 				; optimize OK (btm.inc), line = 59
 18500
 18501 9BD6 A9 05			lda #$05
 18502 9BD8 8D 8B 9E			sta BALLDATA.HEIGHT
 18503 9BDB A9 00			lda #$00
 18504 9BDD 8D 8C 9E			sta BALLDATA.HEIGHT+1
 18505
 18506 				; optimize OK (btm.inc), line = 61
 18507
 18508 9BE0 A9 33			lda #$33
 18509 9BE2 8D 1A 9F			sta PATTERN.OFS
 18510 9BE5 A9 B5			lda #$B5
 18511 9BE7 8D 1B 9F			sta PATTERN.OFS+1
 18512 9BEA A9 03			lda #$03
 18513 9BEC 8D 1C 9F			sta PATTERN.OFS+2
 18514 9BEF A9 00			lda #$00
 18515 9BF1 8D 1D 9F			sta PATTERN.OFS+3
 18516
 18517 				; optimize OK (btm.inc), line = 62
 18518
 18519 9BF4 A9 1A			lda #$1A
 18520 9BF6 8D 16 9F			sta PATTERN.WIDTH
 18521 9BF9 A9 00			lda #$00
 18522 9BFB 8D 17 9F			sta PATTERN.WIDTH+1
 18523
 18524 				; optimize OK (btm.inc), line = 63
 18525
 18526 9BFE A9 18			lda #$18
 18527 9C00 8D 18 9F			sta PATTERN.HEIGHT
 18528 9C03 A9 00			lda #$00
 18529 9C05 8D 19 9F			sta PATTERN.HEIGHT+1
 18530
 18531 				; optimize OK (btm.inc), line = 65
 18532
 18533 9C08 A9 A3			lda #$A3
 18534 9C0A 8D 22 9F			sta PATTERN0.OFS
 18535 9C0D A9 B7			lda #$B7
 18536 9C0F 8D 23 9F			sta PATTERN0.OFS+1
 18537 9C12 A9 03			lda #$03
 18538 9C14 8D 24 9F			sta PATTERN0.OFS+2
 18539 9C17 A9 00			lda #$00
 18540 9C19 8D 25 9F			sta PATTERN0.OFS+3
 18541
 18542 				; optimize OK (btm.inc), line = 66
 18543
 18544 9C1C A9 1A			lda #$1A
 18545 9C1E 8D 1E 9F			sta PATTERN0.WIDTH
 18546 9C21 A9 00			lda #$00
 18547 9C23 8D 1F 9F			sta PATTERN0.WIDTH+1
 18548
 18549 				; optimize OK (btm.inc), line = 67
 18550
 18551 9C26 A9 18			lda #$18
 18552 9C28 8D 20 9F			sta PATTERN0.HEIGHT
 18553 9C2B A9 00			lda #$00
 18554 9C2D 8D 21 9F			sta PATTERN0.HEIGHT+1
 18555
 18556 				; optimize OK (btm.inc), line = 69
 18557
 18558 9C30 A9 13			lda #$13
 18559 9C32 8D 2A 9F			sta PATTERN1.OFS
 18560 9C35 A9 BA			lda #$BA
 18561 9C37 8D 2B 9F			sta PATTERN1.OFS+1
 18562 9C3A A9 03			lda #$03
 18563 9C3C 8D 2C 9F			sta PATTERN1.OFS+2
 18564 9C3F A9 00			lda #$00
 18565 9C41 8D 2D 9F			sta PATTERN1.OFS+3
 18566
 18567 				; optimize OK (btm.inc), line = 70
 18568
 18569 9C44 A9 0E			lda #$0E
 18570 9C46 8D 26 9F			sta PATTERN1.WIDTH
 18571 9C49 A9 00			lda #$00
 18572 9C4B 8D 27 9F			sta PATTERN1.WIDTH+1
 18573
 18574 				; optimize OK (btm.inc), line = 71
 18575
 18576 9C4E A9 0E			lda #$0E
 18577 9C50 8D 28 9F			sta PATTERN1.HEIGHT
 18578 9C53 A9 00			lda #$00
 18579 9C55 8D 29 9F			sta PATTERN1.HEIGHT+1
 18580
 18581 				; optimize OK (btm.inc), line = 73
 18582
 18583 9C58 A9 D7			lda #$D7
 18584 9C5A 8D 32 9F			sta PATTERN2.OFS
 18585 9C5D A9 BA			lda #$BA
 18586 9C5F 8D 33 9F			sta PATTERN2.OFS+1
 18587 9C62 A9 03			lda #$03
 18588 9C64 8D 34 9F			sta PATTERN2.OFS+2
 18589 9C67 A9 00			lda #$00
 18590 9C69 8D 35 9F			sta PATTERN2.OFS+3
 18591
 18592 				; optimize OK (btm.inc), line = 74
 18593
 18594 9C6C A9 26			lda #$26
 18595 9C6E 8D 2E 9F			sta PATTERN2.WIDTH
 18596 9C71 A9 00			lda #$00
 18597 9C73 8D 2F 9F			sta PATTERN2.WIDTH+1
 18598
 18599 				; optimize OK (btm.inc), line = 75
 18600
 18601 9C76 A9 23			lda #$23
 18602 9C78 8D 30 9F			sta PATTERN2.HEIGHT
 18603 9C7B A9 00			lda #$00
 18604 9C7D 8D 31 9F			sta PATTERN2.HEIGHT+1
 18605
 18606 				; optimize OK (btm.inc), line = 77
 18607
 18608 9C80 A9 09			lda #$09
 18609 9C82 8D 3A 9F			sta PATTERN3.OFS
 18610 9C85 A9 C0			lda #$C0
 18611 9C87 8D 3B 9F			sta PATTERN3.OFS+1
 18612 9C8A A9 03			lda #$03
 18613 9C8C 8D 3C 9F			sta PATTERN3.OFS+2
 18614 9C8F A9 00			lda #$00
 18615 9C91 8D 3D 9F			sta PATTERN3.OFS+3
 18616
 18617 				; optimize OK (btm.inc), line = 78
 18618
 18619 9C94 A9 1C			lda #$1C
 18620 9C96 8D 36 9F			sta PATTERN3.WIDTH
 18621 9C99 A9 00			lda #$00
 18622 9C9B 8D 37 9F			sta PATTERN3.WIDTH+1
 18623
 18624 				; optimize OK (btm.inc), line = 79
 18625
 18626 9C9E A9 1D			lda #$1D
 18627 9CA0 8D 38 9F			sta PATTERN3.HEIGHT
 18628 9CA3 A9 00			lda #$00
 18629 9CA5 8D 39 9F			sta PATTERN3.HEIGHT+1
 18630
 18631 				; optimize OK (btm.inc), line = 81
 18632
 18633 9CA8 A9 35			lda #$35
 18634 9CAA 8D 42 9F			sta PATTERN4.OFS
 18635 9CAD A9 C3			lda #$C3
 18636 9CAF 8D 43 9F			sta PATTERN4.OFS+1
 18637 9CB2 A9 03			lda #$03
 18638 9CB4 8D 44 9F			sta PATTERN4.OFS+2
 18639 9CB7 A9 00			lda #$00
 18640 9CB9 8D 45 9F			sta PATTERN4.OFS+3
 18641
 18642 				; optimize OK (btm.inc), line = 82
 18643
 18644 9CBC A9 1E			lda #$1E
 18645 9CBE 8D 3E 9F			sta PATTERN4.WIDTH
 18646 9CC1 A9 00			lda #$00
 18647 9CC3 8D 3F 9F			sta PATTERN4.WIDTH+1
 18648
 18649 				; optimize OK (btm.inc), line = 83
 18650
 18651 9CC6 A9 1E			lda #$1E
 18652 9CC8 8D 40 9F			sta PATTERN4.HEIGHT
 18653 9CCB A9 00			lda #$00
 18654 9CCD 8D 41 9F			sta PATTERN4.HEIGHT+1
 18655
 18656 				; optimize OK (arkanoid_vbxe.pas), line = 133
 18657
 18658 9CD0 A9 20			lda #$20
 18659 9CD2 8D 49 9F			sta TOTALWALL
 18660
 18661 				; optimize OK (arkanoid_vbxe.pas), line = 135
 18662
 18663 9CD5 A9 50			lda #$50
 18664 9CD7 8D 5C 9F			sta SCORE.HISCORE
 18665 9CDA A9 C3			lda #$C3
 18666 9CDC 8D 5D 9F			sta SCORE.HISCORE+1
 18667 9CDF A9 00			lda #$00
 18668 9CE1 8D 5E 9F			sta SCORE.HISCORE+2
 18669 9CE4 8D 5F 9F			sta SCORE.HISCORE+3
 18670
 18671 				; optimize OK (arkanoid_vbxe.pas), line = 138
 18672
 18673 9CE7 A9 01			lda #$01
 18674 9CE9 8D 87 9F			sta SOUND_ON
 18675
 18676 				; optimize OK (arkanoid_vbxe.pas), line = 139
 18677
 18678 9CEC A9 03			lda #$03
 18679 9CEE 8D 6B 9F			sta LV
 18680 9CF1 A9 00			lda #$00
 18681 9CF3 8D 6C 9F			sta LV+1
 18682
 18683 				; --- RepeatUntilProlog
 18684 9CF6			l_3949
 18685
 18686 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 146
 18687
 18688 9CF6 20 E5 96			jsr MAINSCREEN
 18689 9CF9 AD 06 A2			lda MAINSCREEN.RESULT
 18690 9CFC 8D 60 9F			sta SCORE.PL_NUMB
 18691
 18692 				; optimize OK (arkanoid_vbxe.pas), line = 148
 18693
 18694 9CFF F0 0D			jeq l_395F
 18695 9D01 A9 01			lda #$01
 18696 9D03 8D 12 A2			sta START_GAME.PLAYERS
 18697 9D06 A9 00			lda #$00
 18698 9D08 8D 13 A2			sta START_GAME.PLAYERS+1
 18699 9D0B 20 34 97			jsr START_GAME
 18700 9D0E			l_395F
 18701
 18702 				; optimize OK (arkanoid_vbxe.pas), line = 151
 18703
 18704 9D0E AD 60 9F			lda SCORE.PL_NUMB
 18705 9D11 C9 01			cmp #$01
 18706 9D13 B0 E1			jcs l_3949
 18707
 18708 9D15			@exit
 18709 					.ifdef @new
 18710 					lda <@VarData
 18711 					sta :ztmp
 18712 					lda >@VarData
 18713 					ldy #@VarDataSize-1
 18714 					jmp @FreeMem
 18715 					els
 18716 9D15 60				rts						; ret
 18717 					eif
 18718 				.endl
 18719 9D16			l_0022
 18720
 18721 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 159
 18722
 18723 9D16 20 83 99			jsr INIT_GAME
 18724
 18725 				; ------------------------------------------------------------
 18726
 18727 = 015E00			VBXE_DATA	= $15E00
 18728 = B100			adr.BLT	= $B100
 18729 9D19			.var BLT	= adr.BLT .word
 18730 = B100			adr.BLT.SRC_ADR	= $B100
 18731 9D19			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 18732 = B100			BLT.SRC_ADR.BYTE0	= $B100
 18733 = B101			BLT.SRC_ADR.BYTE1	= $B101
 18734 = B102			BLT.SRC_ADR.BYTE2	= $B102
 18735 = B103			BLT.SRC_STEP_Y	= $B103
 18736 = B105			BLT.SRC_STEP_X	= $B105
 18737 = B106			adr.BLT.DST_ADR	= $B106
 18738 9D19			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 18739 = B106			BLT.DST_ADR.BYTE0	= $B106
 18740 = B107			BLT.DST_ADR.BYTE1	= $B107
 18741 = B108			BLT.DST_ADR.BYTE2	= $B108
 18742 = B109			BLT.DST_STEP_Y	= $B109
 18743 = B10B			BLT.DST_STEP_X	= $B10B
 18744 = B10C			BLT.BLT_WIDTH	= $B10C
 18745 = B10E			BLT.BLT_HEIGHT	= $B10E
 18746 = B10F			BLT.BLT_AND_MASK	= $B10F
 18747 = B110			BLT.BLT_XOR_MASK	= $B110
 18748 = B111			BLT.BLT_COLLISION_MASK	= $B111
 18749 = B112			BLT.BLT_ZOOM	= $B112
 18750 = B113			BLT.PATTERN_FEATURE	= $B113
 18751 = B114			BLT.BLT_CONTROL	= $B114
 18752 = 9E65			adr.VBXE_RAM	= DATAORIGIN+$00D0	; [8] OBJECT
 18753 9D19			.var VBXE_RAM	= adr.VBXE_RAM .word
 18754 = 9E65			VBXE_RAM.POSITION	= DATAORIGIN+$00D0
 18755 = 9E69			VBXE_RAM.SIZE	= DATAORIGIN+$00D4
 18756 = 5000			VRAM	= $5000
 18757 = 0001			ERR1	= $01
 18758 = 0002			ERR2	= $02
 18759 = 0003			ERR3	= $03
 18760 = 0004			ERR4	= $04
 18761 = 000A			SCRMIN	= $0A
 18762 = 00D8			SCRMAX	= $D8
 18763 = 000C			SCRTOP	= $0C
 18764 = 00C8			SCRBOT	= $C8
 18765 = 0022			VAUS_W	= $22
 18766 = 0004			VAUS_H	= $04
 18767 = 00B8			VAUS_LINE	= $B8
 18768 = 00FF			EMP	= $FF
 18769 = 0005			BALLDIM	= $05
 18770 = 0003			BALLSPOT	= $03
 18771 = 001E			BALLDEV	= $1E
 18772 = 000A			SPEEDFLASH	= $0A
 18773 = 208E			adr.FLASH	= CODEORIGIN+$008E
 18774 9D19			.var FLASH	= adr.FLASH .word
 18775 = 2099			adr.SCORE_WALL	= CODEORIGIN+$0099
 18776 9D19			.var SCORE_WALL	= adr.SCORE_WALL .word
 18777 = 20AF			adr.EMERG_DEV	= CODEORIGIN+$00AF
 18778 9D19			.var EMERG_DEV	= adr.EMERG_DEV .word
 18779 = 20B8			adr.COLORBLOCK	= CODEORIGIN+$00B8
 18780 9D19			.var COLORBLOCK	= adr.COLORBLOCK .word
 18781 = 0001			GRAYDOWN	= $01
 18782 = 0001			STARTWALL	= $01
 18783 = 01F4			BALLSPEED	= $01F4
 18784 = 07D0			MAXSPEED	= $07D0
 18785 = 0064			MAXBRWHIT	= $64
 18786 = 0004			PATNUMBER	= $04
 18787 = 20C2			adr.POS_DIGIT	= CODEORIGIN+$00C2
 18788 9D19			.var POS_DIGIT	= adr.POS_DIGIT .word
 18789 = 20C6			adr.DIGITS	= CODEORIGIN+$00C6
 18790 9D19			.var DIGITS	= adr.DIGITS .word
 18791 = 20D1			adr.LEVEL	= CODEORIGIN+$00D1
 18792 9D19			.var LEVEL	= adr.LEVEL .word
 18793 = 0258			SBDIR	= $0258
 18794 = 0003			DEFLEVEL	= $03
 18795 = 012C			LETTER_PROB	= $012C
 18796 = 03E8			LETTER_DROP	= $03E8
 18797 = 0008			LETTER_NUMB	= $08
 18798 = 0008			LETTER_FRM	= $08
 18799 = 0005			LETTER_SBF	= $05
 18800 = 20DD			adr.LETTER_DIS	= CODEORIGIN+$00DD
 18801 9D19			.var LETTER_DIS	= adr.LETTER_DIS .word
 18802 = 00B0			FLUXLEVEL	= $B0
 18803 = 9E89			adr.BALLDATA	= DATAORIGIN+$00F4	; [8] RECORD
 18804 9D19			.var BALLDATA	= adr.BALLDATA .word
 18805 = 9E89			BALLDATA.WIDTH	= DATAORIGIN+$00F4
 18806 = 9E8B			BALLDATA.HEIGHT	= DATAORIGIN+$00F6
 18807 = 9E8D			BALLDATA.OFS	= DATAORIGIN+$00F8
 18808 = 9E91			adr.PLAYSCREEN	= DATAORIGIN+$00FC	; [8] RECORD
 18809 9D19			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 18810 = 9E91			PLAYSCREEN.WIDTH	= DATAORIGIN+$00FC
 18811 = 9E93			PLAYSCREEN.HEIGHT	= DATAORIGIN+$00FE
 18812 = 9E95			PLAYSCREEN.OFS	= DATAORIGIN+$0100
 18813 = 9E99			adr.PLAYVAUS	= DATAORIGIN+$0104	; [8] RECORD
 18814 9D19			.var PLAYVAUS	= adr.PLAYVAUS .word
 18815 = 9E99			PLAYVAUS.WIDTH	= DATAORIGIN+$0104
 18816 = 9E9B			PLAYVAUS.HEIGHT	= DATAORIGIN+$0106
 18817 = 9E9D			PLAYVAUS.OFS	= DATAORIGIN+$0108
 18818 = 9EA1			adr.NORMAL	= DATAORIGIN+$010C	; [8] RECORD
 18819 9D19			.var NORMAL	= adr.NORMAL .word
 18820 = 9EA1			NORMAL.WIDTH	= DATAORIGIN+$010C
 18821 = 9EA3			NORMAL.HEIGHT	= DATAORIGIN+$010E
 18822 = 9EA5			NORMAL.OFS	= DATAORIGIN+$0110
 18823 = 9EA9			adr.ENLARGED	= DATAORIGIN+$0114	; [8] RECORD
 18824 9D19			.var ENLARGED	= adr.ENLARGED .word
 18825 = 9EA9			ENLARGED.WIDTH	= DATAORIGIN+$0114
 18826 = 9EAB			ENLARGED.HEIGHT	= DATAORIGIN+$0116
 18827 = 9EAD			ENLARGED.OFS	= DATAORIGIN+$0118
 18828 = 9EB1			adr.LASERS	= DATAORIGIN+$011C	; [8] RECORD
 18829 9D19			.var LASERS	= adr.LASERS .word
 18830 = 9EB1			LASERS.WIDTH	= DATAORIGIN+$011C
 18831 = 9EB3			LASERS.HEIGHT	= DATAORIGIN+$011E
 18832 = 9EB5			LASERS.OFS	= DATAORIGIN+$0120
 18833 = 9EB9			adr.EXPLOSION	= DATAORIGIN+$0124	; [8] RECORD
 18834 9D19			.var EXPLOSION	= adr.EXPLOSION .word
 18835 = 9EB9			EXPLOSION.WIDTH	= DATAORIGIN+$0124
 18836 = 9EBB			EXPLOSION.HEIGHT	= DATAORIGIN+$0126
 18837 = 9EBD			EXPLOSION.OFS	= DATAORIGIN+$0128
 18838 = 9EC1			adr.NEWVAUS	= DATAORIGIN+$012C	; [8] RECORD
 18839 9D19			.var NEWVAUS	= adr.NEWVAUS .word
 18840 = 9EC1			NEWVAUS.WIDTH	= DATAORIGIN+$012C
 18841 = 9EC3			NEWVAUS.HEIGHT	= DATAORIGIN+$012E
 18842 = 9EC5			NEWVAUS.OFS	= DATAORIGIN+$0130
 18843 = 9EC9			adr.PRESENTS	= DATAORIGIN+$0134	; [8] RECORD
 18844 9D19			.var PRESENTS	= adr.PRESENTS .word
 18845 = 9EC9			PRESENTS.WIDTH	= DATAORIGIN+$0134
 18846 = 9ECB			PRESENTS.HEIGHT	= DATAORIGIN+$0136
 18847 = 9ECD			PRESENTS.OFS	= DATAORIGIN+$0138
 18848 = 9ED1			adr.SOUNDFX	= DATAORIGIN+$013C	; [8] RECORD
 18849 9D19			.var SOUNDFX	= adr.SOUNDFX .word
 18850 = 9ED1			SOUNDFX.WIDTH	= DATAORIGIN+$013C
 18851 = 9ED3			SOUNDFX.HEIGHT	= DATAORIGIN+$013E
 18852 = 9ED5			SOUNDFX.OFS	= DATAORIGIN+$0140
 18853 = 9ED9			adr.SHINEWALL	= DATAORIGIN+$0144	; [8] RECORD
 18854 9D19			.var SHINEWALL	= adr.SHINEWALL .word
 18855 = 9ED9			SHINEWALL.WIDTH	= DATAORIGIN+$0144
 18856 = 9EDB			SHINEWALL.HEIGHT	= DATAORIGIN+$0146
 18857 = 9EDD			SHINEWALL.OFS	= DATAORIGIN+$0148
 18858 = 9EE1			adr.MINIVAUS	= DATAORIGIN+$014C	; [8] RECORD
 18859 9D19			.var MINIVAUS	= adr.MINIVAUS .word
 18860 = 9EE1			MINIVAUS.WIDTH	= DATAORIGIN+$014C
 18861 = 9EE3			MINIVAUS.HEIGHT	= DATAORIGIN+$014E
 18862 = 9EE5			MINIVAUS.OFS	= DATAORIGIN+$0150
 18863 = 9EE9			adr.LEVELSEL	= DATAORIGIN+$0154	; [8] RECORD
 18864 9D19			.var LEVELSEL	= adr.LEVELSEL .word
 18865 = 9EE9			LEVELSEL.WIDTH	= DATAORIGIN+$0154
 18866 = 9EEB			LEVELSEL.HEIGHT	= DATAORIGIN+$0156
 18867 = 9EED			LEVELSEL.OFS	= DATAORIGIN+$0158
 18868 = 9EF1			adr.LETTERS	= DATAORIGIN+$015C	; [8] RECORD
 18869 9D19			.var LETTERS	= adr.LETTERS .word
 18870 = 9EF1			LETTERS.WIDTH	= DATAORIGIN+$015C
 18871 = 9EF3			LETTERS.HEIGHT	= DATAORIGIN+$015E
 18872 = 9EF5			LETTERS.OFS	= DATAORIGIN+$0160
 18873 = 9EF9			adr.SHOOTS	= DATAORIGIN+$0164	; [8] RECORD
 18874 9D19			.var SHOOTS	= adr.SHOOTS .word
 18875 = 9EF9			SHOOTS.WIDTH	= DATAORIGIN+$0164
 18876 = 9EFB			SHOOTS.HEIGHT	= DATAORIGIN+$0166
 18877 = 9EFD			SHOOTS.OFS	= DATAORIGIN+$0168
 18878 = 9F01			adr.FLUX	= DATAORIGIN+$016C	; [8] RECORD
 18879 9D19			.var FLUX	= adr.FLUX .word
 18880 = 9F01			FLUX.WIDTH	= DATAORIGIN+$016C
 18881 = 9F03			FLUX.HEIGHT	= DATAORIGIN+$016E
 18882 = 9F05			FLUX.OFS	= DATAORIGIN+$0170
 18883 = 9F09			adr.VAUS	= DATAORIGIN+$0174	; [13] RECORD
 18884 9D19			.var VAUS	= adr.VAUS .word
 18885 = 9F09			VAUS.X	= DATAORIGIN+$0174
 18886 = 9F0A			VAUS.Y	= DATAORIGIN+$0175
 18887 = 9F0B			VAUS.OLDX	= DATAORIGIN+$0176
 18888 = 9F0D			VAUS.OLDY	= DATAORIGIN+$0178
 18889 = 9F0F			VAUS.OLDLEN	= DATAORIGIN+$017A
 18890 = 9F11			VAUS.WIDTH	= DATAORIGIN+$017C
 18891 = 9F12			VAUS.HEIGHT	= DATAORIGIN+$017D
 18892 = 9F13			VAUS.FLASH	= DATAORIGIN+$017E
 18893 = 9F14			VAUS.IFLASH	= DATAORIGIN+$017F
 18894 = 9F15			VAUS.LETTER	= DATAORIGIN+$0180
 18895 = 9F16			adr.PATTERN	= DATAORIGIN+$0181	; [8] RECORD
 18896 9D19			.var PATTERN	= adr.PATTERN .word
 18897 = 9F16			PATTERN.WIDTH	= DATAORIGIN+$0181
 18898 = 9F18			PATTERN.HEIGHT	= DATAORIGIN+$0183
 18899 = 9F1A			PATTERN.OFS	= DATAORIGIN+$0185
 18900 = 9F1E			adr.PATTERN0	= DATAORIGIN+$0189	; [8] RECORD
 18901 9D19			.var PATTERN0	= adr.PATTERN0 .word
 18902 = 9F1E			PATTERN0.WIDTH	= DATAORIGIN+$0189
 18903 = 9F20			PATTERN0.HEIGHT	= DATAORIGIN+$018B
 18904 = 9F22			PATTERN0.OFS	= DATAORIGIN+$018D
 18905 = 9F26			adr.PATTERN1	= DATAORIGIN+$0191	; [8] RECORD
 18906 9D19			.var PATTERN1	= adr.PATTERN1 .word
 18907 = 9F26			PATTERN1.WIDTH	= DATAORIGIN+$0191
 18908 = 9F28			PATTERN1.HEIGHT	= DATAORIGIN+$0193
 18909 = 9F2A			PATTERN1.OFS	= DATAORIGIN+$0195
 18910 = 9F2E			adr.PATTERN2	= DATAORIGIN+$0199	; [8] RECORD
 18911 9D19			.var PATTERN2	= adr.PATTERN2 .word
 18912 = 9F2E			PATTERN2.WIDTH	= DATAORIGIN+$0199
 18913 = 9F30			PATTERN2.HEIGHT	= DATAORIGIN+$019B
 18914 = 9F32			PATTERN2.OFS	= DATAORIGIN+$019D
 18915 = 9F36			adr.PATTERN3	= DATAORIGIN+$01A1	; [8] RECORD
 18916 9D19			.var PATTERN3	= adr.PATTERN3 .word
 18917 = 9F36			PATTERN3.WIDTH	= DATAORIGIN+$01A1
 18918 = 9F38			PATTERN3.HEIGHT	= DATAORIGIN+$01A3
 18919 = 9F3A			PATTERN3.OFS	= DATAORIGIN+$01A5
 18920 = 9F3E			adr.PATTERN4	= DATAORIGIN+$01A9	; [8] RECORD
 18921 9D19			.var PATTERN4	= adr.PATTERN4 .word
 18922 = 9F3E			PATTERN4.WIDTH	= DATAORIGIN+$01A9
 18923 = 9F40			PATTERN4.HEIGHT	= DATAORIGIN+$01AB
 18924 = 9F42			PATTERN4.OFS	= DATAORIGIN+$01AD
 18925 = 9F46			STATUS	= DATAORIGIN+$01B1
 18926 = 9F47			SUCCESS	= DATAORIGIN+$01B2
 18927 = 9F48			REMAIN_BLK	= DATAORIGIN+$01B3
 18928 = 9F49			TOTALWALL	= DATAORIGIN+$01B4
 18929 = 9F4A			adr.SCORE	= DATAORIGIN+$01B5	; [27] RECORD
 18930 9D19			.var SCORE	= adr.SCORE .word
 18931 = 9F4A			adr.SCORE.PLAYER	= [DATAORIGIN+$01B5] .array [3] .dword
 18932 9D19			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 18933 = 9F56			adr.SCORE.WALL_N	= [DATAORIGIN+$01C1] .array [3]
 18934 9D19			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 18935 = 9F59			adr.SCORE.LIVES	= [DATAORIGIN+$01C4] .array [3]
 18936 9D19			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 18937 = 9F5C			SCORE.HISCORE	= DATAORIGIN+$01C7
 18938 = 9F60			SCORE.PL_NUMB	= DATAORIGIN+$01CB
 18939 = 9F61			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01CC] .array [3]
 18940 9D19			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 18941 = 9F64			SCORE.ABORTPLAY	= DATAORIGIN+$01CF
 18942 = 9F65			CUR_PLAYER	= DATAORIGIN+$01D0
 18943 = 9F66			adr.SHINEREC	= DATAORIGIN+$01D1	; [5] RECORD
 18944 9D19			.var SHINEREC	= adr.SHINEREC .word
 18945 = 9F66			SHINEREC.XB	= DATAORIGIN+$01D1
 18946 = 9F67			SHINEREC.YB	= DATAORIGIN+$01D2
 18947 = 9F68			SHINEREC.FRAME	= DATAORIGIN+$01D3
 18948 = 9F69			SHINEREC.BLOCK	= DATAORIGIN+$01D4
 18949 = 9F6A			SHINEREC.ACTIVE	= DATAORIGIN+$01D5
 18950 = 9F6B			LV	= DATAORIGIN+$01D6
 18951 = 9F6D			TRAINER	= DATAORIGIN+$01D8
 18952 = 9F6E			adr.LETT	= DATAORIGIN+$01D9	; [17] RECORD
 18953 9D19			.var LETT	= adr.LETT .word
 18954 = 9F6E			LETT.X	= DATAORIGIN+$01D9
 18955 = 9F6F			LETT.Y	= DATAORIGIN+$01DA
 18956 = 9F70			LETT.TYP	= DATAORIGIN+$01DB
 18957 = 9F72			LETT.FRAME	= DATAORIGIN+$01DD
 18958 = 9F73			LETT.SUBFRAME	= DATAORIGIN+$01DE
 18959 = 9F74			LETT.ACTIVE	= DATAORIGIN+$01DF
 18960 = 9F75			LETT.INCOMING	= DATAORIGIN+$01E0
 18961 = 9F77			LETT.NEXTX	= DATAORIGIN+$01E2
 18962 = 9F79			LETT.NEXTY	= DATAORIGIN+$01E4
 18963 = 9F7B			LETT.NEXTTYPE	= DATAORIGIN+$01E6
 18964 = 9F7D			LETT.LAST	= DATAORIGIN+$01E8
 18965 = 9F7F			adr.FIRE	= DATAORIGIN+$01EA	; [5] RECORD
 18966 9D19			.var FIRE	= adr.FIRE .word
 18967 = 9F7F			FIRE.X	= DATAORIGIN+$01EA
 18968 = 9F80			FIRE.Y	= DATAORIGIN+$01EB
 18969 = 9F81			FIRE.SHOT	= DATAORIGIN+$01EC
 18970 = 9F82			FIRE.AVL	= DATAORIGIN+$01ED
 18971 = 9F83			FIRE.NW	= DATAORIGIN+$01EE
 18972 = 9F84			BALLS_IN_PLAY	= DATAORIGIN+$01EF
 18973 = 9F85			SCRFLUX	= DATAORIGIN+$01F0
 18974 = 9F86			SCRFLUXCNT	= DATAORIGIN+$01F1
 18975 = 9F87			SOUND_ON	= DATAORIGIN+$01F2
 18976 = 9F88			HLP	= DATAORIGIN+$01F3
 18977 = 9F8A			F_HLP	= DATAORIGIN+$01F5
 18978 = C000			adr.ROW	= $C000
 18979 9D19			.var ROW	= adr.ROW .word
 18980 = C200			adr.TMP	= $C200
 18981 9D19			.var TMP	= adr.TMP .word
 18982 = C300			adr.MODY	= $C300
 18983 9D19			.var MODY	= adr.MODY .word
 18984 = C400			adr.MODX	= $C400
 18985 9D19			.var MODX	= adr.MODX .word
 18986 = D800			adr.WALL_P	= $D800
 18987 9D19			.var WALL_P	= adr.WALL_P .word
 18988 = DB00			adr.WALL	= $DB00
 18989 9D19			.var WALL	= adr.WALL .word
 18990 = DC00			adr.ALL_WALLS	= $DC00
 18991 9D19			.var ALL_WALLS	= adr.ALL_WALLS .word
 18992 9D19			@exit
 18993
 18994 9D19 A2 00		@halt	ldx #$00
 18995 9D1B 9A				txs
 18996
 18997 					.ifdef MAIN.@DEFINES.ROMOFF
 18998 9D1C EE 01 D3			inc portb
 18999 					.fi
 19000
 19001 9D1F A0 01			ldy #$01
 19002
 19003 9D21 60				rts
 19004
 19005 				; ------------------------------------------------------------
 19006
 19007 9D22			.local	@DEFINES
 19008 9D22			ATARI
 19009 9D22			CPU_6502
 19010 9D22			ROMOFF
 19011 				.endl
 19012
 19013 9D22			.local	@RESOURCE
 19014 				.endl
 19015
 19016 = 9D22 00 B1		BLT
 19016 = 9D24 00 B1		BLT.SRC_ADR
 19016 = 9D26 06 B1		BLT.DST_ADR
 19016 = 9D28 65 9E		VBXE_RAM
 19016 = 9D2A 8E 20		FLASH
 19016 = 9D2C 99 20		SCORE_WALL
 19016 = 9D2E AF 20		EMERG_DEV
 19016 = 9D30 B8 20		COLORBLOCK
 19016 = 9D32 C2 20		POS_DIGIT
 19016 = 9D34 C6 20		DIGITS
 19016 = 9D36 D1 20		LEVEL
 19016 = 9D38 DD 20		LETTER_DIS
 19016 = 9D3A 89 9E		BALLDATA
 19016 = 9D3C 91 9E		PLAYSCREEN
 19016 = 9D3E 99 9E		PLAYVAUS
 19016 = 9D40 A1 9E		NORMAL
 19016 = 9D42 A9 9E		ENLARGED
 19016 = 9D44 B1 9E		LASERS
 19016 = 9D46 B9 9E		EXPLOSION
 19016 = 9D48 C1 9E		NEWVAUS
 19016 = 9D4A C9 9E		PRESENTS
 19016 = 9D4C D1 9E		SOUNDFX
 19016 = 9D4E D9 9E		SHINEWALL
 19016 = 9D50 E1 9E		MINIVAUS
 19016 = 9D52 E9 9E		LEVELSEL
 19016 = 9D54 F1 9E		LETTERS
 19016 = 9D56 F9 9E		SHOOTS
 19016 = 9D58 01 9F		FLUX
 19016 = 9D5A 09 9F		VAUS
 19016 = 9D5C 16 9F		PATTERN
 19016 = 9D5E 1E 9F		PATTERN0
 19016 = 9D60 26 9F		PATTERN1
 19016 = 9D62 2E 9F		PATTERN2
 19016 = 9D64 36 9F		PATTERN3
 19016 = 9D66 3E 9F		PATTERN4
 19016 = 9D68 4A 9F		SCORE
 19016 = 9D6A 4A 9F		SCORE.PLAYER
 19016 = 9D6C 56 9F		SCORE.WALL_N
 19016 = 9D6E 59 9F		SCORE.LIVES
 19016 = 9D70 61 9F		SCORE.ROUNDSEL
 19016 = 9D72 66 9F		SHINEREC
 19016 = 9D74 6E 9F		LETT
 19016 = 9D76 7F 9F		FIRE
 19016 = 9D78 00 C0		ROW
 19016 = 9D7A 00 C2		TMP
 19016 = 9D7C 00 C3		MODY
 19016 = 9D7E 00 C4		MODX
 19016 = 9D80 00 D8		WALL_P
 19016 = 9D82 00 DB		WALL
 19016 = 9D84 00 DC		ALL_WALLS
 19016 				.endl							; MAIN
 19017
 19018 				; ------------------------------------------------------------
 19019 				; ------------------------------------------------------------
 19020
 19021 				.macro	UNITINITIALIZATION
 19022 				
 19023 					.ifdef MAIN.SYSTEM.@UnitInit
 19024 					jsr MAIN.SYSTEM.@UnitInit
 19025 					.fi
 19026 				
 19027 					.ifdef MAIN.ATARI.@UnitInit
 19028 					jsr MAIN.ATARI.@UnitInit
 19029 					.fi
 19030 				
 19031 					.ifdef MAIN.CRT.@UnitInit
 19032 					jsr MAIN.CRT.@UnitInit
 19033 					.fi
 19034 				
 19035 					.ifdef MAIN.TYPES.@UnitInit
 19036 					jsr MAIN.TYPES.@UnitInit
 19037 					.fi
 19038 				
 19039 					.ifdef MAIN.GRAPH.@UnitInit
 19040 					jsr MAIN.GRAPH.@UnitInit
 19041 					.fi
 19042 				
 19043 					.ifdef MAIN.VBXE.@UnitInit
 19044 					jsr MAIN.VBXE.@UnitInit
 19045 					.fi
 19046 				
 19047 					.ifdef MAIN.JOYSTICK.@UnitInit
 19048 					jsr MAIN.JOYSTICK.@UnitInit
 19049 					.fi
 19050 				.endm
 19051
 19052 				; ------------------------------------------------------------
 19053
 19054 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19055 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19055 				SYSTEM: $2AEC..$33D4
 19056 					eif
 19057
 19058 					ift .SIZEOF(MAIN.ATARI) > 0
 19059 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19060 					eif
 19061
 19062 					ift .SIZEOF(MAIN.CRT) > 0
 19063 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19064 					eif
 19065
 19066 					ift .SIZEOF(MAIN.TYPES) > 0
 19067 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19068 					eif
 19069
 19070 					ift .SIZEOF(MAIN.GRAPH) > 0
 19071 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19071 				GRAPH: $33D5..$33D6
 19072 					eif
 19073
 19074 					ift .SIZEOF(MAIN.VBXE) > 0
 19075 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19075 				VBXE: $33D7..$3872
 19076 					eif
 19077
 19078 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19079 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19079 				JOYSTICK: $3873..$387A
 19080 					eif
 19081
 19082 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19082 				CODE: $2000..$9D21
 19083
 19084 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19085 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19086 					eif
 19087
 19088 9D86			@end
 19089
 19090 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19090 				VARS: $9D22..$9D85
 19091
 19092 				; ------------------------------------------------------------
 19093
 19094 = 9D86				?adr = *
 19095 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19096 = 9D95				?adr = ?old_adr
 19097 					eif
 19098
 19099 					org ?adr
 19100 = 9D95				?old_adr = *
 19101
 19102 9D95			DATAORIGIN
 19103 9D95-9DE8> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19104 9DAD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19105 9DC5 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19106 9DDD 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
 19107
 19108 = 0054			VARINITSIZE	= *-DATAORIGIN
 19109 = 0480			VARDATASIZE	= 1152
 19110
 19111 = A215			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19112
 19113 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19113 				DATA: $9D95..$A215
 19114
 19115 					ert DATAORIGIN<@end,'DATA memory overlap'
 19116
 19117 02E0-02E1> 5F 2A			run START
 19118
 19119 				; ------------------------------------------------------------
 19120
 19121 				.macro	STATICDATA
 19122 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19123 				.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
 19124 				.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
 19125 				.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19126 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19127 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19128 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19129 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19130 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19131 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19132 				.endm
 19133
 19134 					end
