mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/25] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 1000			CODEORIGIN	= $1000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 10BB				RCDATA 'walls.dat' LEVELS_WALL 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 10BB				org RESORIGIN
    10 10BB 20 87 10		mcpy	jsr sys.off
    12 10BE A9 DC 85 8A A9 10 +  MWA #DATA EDX
    12 10C6 A9 00 85 8E A9 DC +  MWA #MAIN.LEVELS_WALL ECX
    12 10CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 10D6 20 2B 10		 JSR RESOURCE.MEMCPY
    14 10D9 4C AB 10			jmp sys.on
    16 10DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.LEVELS_WALL,'..',main.LEVELS_WALL+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 10			ini mcpy
Source: arkanoid_vbxe.a65
   119 31DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 31DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 31DC				org RESORIGIN
    22 10BB			lbmp
    25 10BB-1552> 20 00 10		jsr vbxe_detect
    26 10BE 90 4B			bcc ok
    28 10C0 A0 10		 LDY> NOTVBXE
    28 10C2 A9 DF		 LDA< NOTVBXE
    28 10C4 20 6C 10		 JSR RESOURCE.@PRINT
    29 10C7 A0 10		 LDY> _EOL
    29 10C9 A9 F0		 LDA< _EOL
    29 10CB 20 6C 10		 JSR RESOURCE.@PRINT
    30 10CE A0 10		 LDY> ANYKEY
    30 10D0 A9 F1		 LDA< ANYKEY
    30 10D2 20 6C 10		 JSR RESOURCE.@PRINT
    32 10D5 AD 0F D2		keypres	lda $d20f
    33 10D8 29 04			and #4
    34 10DA D0 F9			bne keypres
    36 10DC 68				pla
    37 10DD 68				pla
    38 10DE 60				rts
    40 10DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 10F0 9B			_eol	dta $9b
    42 10F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 110B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 110B A9 B8		        lda     #%1000+$B0
     3 110D A0 5E		        ldy     #FX_MEMC
     4 110F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1111 A9 01		        lda     #1
     3 1113 A0 45		        ldy     #FX_PSEL
     4 1115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1117 A9 00		        lda     #0
     3 1119 A0 44		        ldy     #FX_CSEL
     4 111B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 111D A2 00			ldx #0
    55 111F 20 47 11		paloop	jsr pal
    56 1122 85 92			sta ztmp
    57 1124 20 47 11			jsr pal
    58 1127 85 93			sta ztmp+1
    59 1129 20 47 11			jsr pal
    60 112C 85 94			sta ztmp+2
    61 112E 20 47 11			jsr pal
    63 1131 A5 94			lda ztmp+2
     2 1133 A0 46		        ldy     #FX_CR
     3 1135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 1137 A5 93			lda ztmp+1
     2 1139 A0 47		        ldy     #FX_CG
     3 113B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 113D A5 92			lda ztmp
     2 113F A0 48		        ldy     #FX_CB
     3 1141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 1143 E8				inx
    73 1144 D0 D9			bne paloop
    75 1146 60				rts
    77 1147 AD 53 11		pal	lda cpal
    78 = 1148			paladr	equ *-2
    79 114A EE 48 11 D0 03 EE + 	inw paladr
    80 1152 60				rts
    82 1153 00 00 00 00 3F 3F + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 10			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0014			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 1553				org RESORIGIN
     2 10BB-10C1> A9 94		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 10C1 60				rts
    94 02E2-02E3> BB 10			ini RESORIGIN
    96 10C2				org main.VBXE_DATA%$1000+$B000
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0003				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0015				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 95		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0006				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0010				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 96		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0013				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 97		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0020				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0029				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 98		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 002D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0036				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 99		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0039				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0043				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9A		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0046				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0050				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9B		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0053				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9C		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0060				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0069				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9D		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 006D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0076				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9E		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0079				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0083				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9F		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0086				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0090				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0093				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00F9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0103				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0106				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0110				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0113				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0120				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0129				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AC		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 012D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0136				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AD		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0139				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0143				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AE		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0146				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0150				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AF		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0153				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0160				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0169				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 016D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0176				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0179				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0183				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0186				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0190				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0193				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B380				org RESORIGIN
     2 10BB-10C5> A9 00		        lda     #0
     3 10BD A0 5E		        ldy     #FX_MEMC
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 10C1 A0 5F		        ldy     #FX_MEMS
     3 10C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 10C5 60				rts
   125 02E2-02E3> BB 10			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $014A00..$03B37F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 10C6				org CODEORIGIN
   125
   126 1000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 1000-9BFD> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 1018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 1030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 1048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 1060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 1078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 1090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 10A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 10B5			RTLIB
   131 10B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $10B5..$1C06
   138
   139 				; ------------------------------------------------------------
   140
   141 1C07			START
   142 1C07 BA				tsx
   143 1C08 8E 2C 9B			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 1C0B				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 1C0B			.local	rominit
     5
     6 1C0B 78			        sei
     7 1C0C A9 00		        lda #%00000000
     8 1C0E 8D 0E D4		        sta NMIEN       ;$D40E
     9 1C11 A9 FE		        lda #%11111110
    10 1C13 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 1C16 A2 33		        ldx #<nmiint
    33 1C18 A0 1C		        ldy #>nmiint
    34 1C1A 8E FA FF		        stx NMIVEC      ;$FFFA
    35 1C1D 8C FB FF		        sty NMIVEC+1
    36
    37 1C20 A2 3D		        ldx #<irqint
    38 1C22 A0 1C		        ldy #>irqint
    39 1C24 8E FE FF		        stx IRQVEC      ;$FFFE
    40 1C27 8C FF FF		        sty IRQVEC+1
    41
    42 1C2A A9 40		        lda #%01000000
    43 1C2C 8D 0E D4		        sta NMIEN       ;$D40E
    44 1C2F 58			        cli
    45
    46 1C30 4C 5E 1C			jmp skp
    47
    48
    49 1C33 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 1C36 10 03		        spl
    51 1C38 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 1C3B 38			        sec
    54 1C3C 24			        .byte $24        ;BIT $18
    55
    56 1C3D 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 1C3E EE 01 D3		        inc PORTB       ;$D301
    61
    62 1C41 48			        pha
    63 1C42 8A			        txa
    64 1C43 48			        pha
    65 1C44 BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 1C45 A9 1C		        lda #>iret      ;adres procedury iret
    70 1C47 48			        pha
    71 1C48 A9 57		        lda #<iret
    72 1C4A 48			        pha
    73 1C4B BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 1C4E 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 1C4F 90 03		        scc
    79 1C51 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 1C54 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 1C57 68			iret	pla
    83 1C58 AA				tax
    84 1C59 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 1C5A CE 01 D3		        dec PORTB       ;$D301
    89 1C5D 40			        rti
    90
    91 1C5E			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0758			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9BFE			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 1C5E				m@init
Macro: M@INIT [Source: macros.asm]
     2 1C5E A0 FE			ldy <VADR
     3 1C60 A2 9B			ldx >VADR
     5 1C62 A9 00			lda #$00
     6 1C64 F0 07			beq skp_
     8 1C66 99 00 10		clr	sta adr: $1000,y
    10 1C69 C8				iny
    11 1C6A D0 04			bne skp
    12 1C6C E8				inx
    13 1C6D 8E 68 1C		skp_	stx adr+1
    15 1C70 E0 A3		skp	cpx >VADR+VLEN
    16 1C72 D0 F2			bne clr
    17 1C74 C0 56			cpy <VADR+VLEN
    18 1C76 D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 1C78 A2 00			ldx #$00					; X = 0
   169 1C7A 86 82			stx bp						; BP = 0
   170
   171 1C7C 8E 08 D2			stx audctl					; reset POKEY
   172 1C7F 8E 18 D2			stx audctl+$10
   173 1C82 A9 03			lda #3
   174 1C84 8D 0F D2			sta skctl
   175 1C87 8D 1F D2			sta skctl+$10
   176
   177 1C8A CA				dex						; X = 255
   178
   179 1C8B				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 1C8B 20 C8 25			jsr MAIN.SYSTEM.@UnitInit
    23 1C8E 20 4F 2A			jsr MAIN.VBXE.@UnitInit
   180
   181 1C91			.local	MAIN						; PROCEDURE
   182
   183 1C91 4C 28 9B			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 1C94			.local	SYSTEM						; UNIT
   188
   189 1C94			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 1C94 B5 96			lda :STACKORIGIN,x
   196 1C96 85 8A			sta A
   197 1C98 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 1C9A 85 8B			sta A+1
   199 1C9C CA				dex
   200 1C9D			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 1C9D A0 00			ldy #0
   205 1C9F B1 8A 85 92			mva (:edx),y Result
   206
   207 1CA3			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 1CA3 E8				inx
   215 1CA4 A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 1CA8 60				rts						; ret
   231 				.endl
   232
   233 1CA9			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 1CA9			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 1CA9 A5 8B			lda :edx+1
   239 1CAB 10 0D			bpl @+
   240
   241 1CAD A9 00			lda #$00
   242 1CAF 38 E5 8A			sub :edx
   243 1CB2 85 8A			sta :edx
   244 1CB4 A9 00			lda #$00
   245 1CB6 E5 8B			sbc :edx+1
   246 1CB8 85 8B			sta :edx+1
   247 				@
   248 1CBA 85 93			sta Result+1
   249
   250 1CBC A5 8A 85 92			mva :edx Result
   251
   252 1CC0			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 1CC0 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 1CC1			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 1CC1			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 1CC1 A5 8D			lda :edx+3
   269 1CC3 10 03			spl
   270 1CC5 20 33 11			jsr @negEDX
   271
   272 1CC8 85 95			sta Result+3
   273
   274 1CCA A5 8A 85 92			mva :edx Result
   275 1CCE A5 8B 85 93			mva :edx+1 Result+1
   276 1CD2 A5 8C 85 94			mva :edx+2 Result+2
   277
   278 1CD6			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 1CD6 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 1CD7			.local	SQRT						; FUNCTION | OVERLOAD
   290 1CD7			.local	@010185000
   291
   292 				; optimize OK (SYSTEM), line = 801
   293
   294 1CD7 AD AA 9B			lda X+3
   295 1CDA 30 0B			bmi @+
   296 1CDC 0D A9 9B			ora X+2
   297 1CDF 0D A8 9B			ora X+1
   298 1CE2 0D A7 9B			ora X
   299 1CE5 D0 11			jne l_0042
   300 				@
   301 1CE7 A9 00			lda #$00
   302 1CE9 8D AB 9B			sta RESULT
   303 1CEC 8D AC 9B			sta RESULT+1
   304 1CEF 8D AD 9B			sta RESULT+2
   305 1CF2 8D AE 9B			sta RESULT+3
   306 1CF5 4C 6B 1F			jmp @exit
   307 1CF8			l_0042
   308
   309 				; optimize OK (SYSTEM), line = 803
   310
   311 1CF8 A9 B1			lda <C
   312 1CFA 8D AF 9B			sta SP
   313 1CFD A9 9B			lda >C
   314 1CFF 8D B0 9B			sta SP+1
   315
   316 				; optimize OK (SYSTEM), line = 805
   317
   318 1D02 AD A7 9B			lda X
   319 1D05 85 8E			sta :FPMAN0
   320 1D07 AD A8 9B			lda X+1
   321 1D0A 85 8F			sta :FPMAN1
   322 1D0C AD A9 9B			lda X+2
   323 1D0F 85 90			sta :FPMAN2
   324 1D11 AD AA 9B			lda X+3
   325 1D14 85 91			sta :FPMAN3
   326 1D16 20 52 19			jsr @I2F
   327 1D19 A5 8E			lda :FPMAN0
   328 1D1B 8D B1 9B			sta C
   329 1D1E A5 8F			lda :FPMAN1
   330 1D20 8D B2 9B			sta C+1
   331 1D23 A5 90			lda :FPMAN2
   332 1D25 8D B3 9B			sta C+2
   333 1D28 A5 91			lda :FPMAN3
   334 1D2A 8D B4 9B			sta C+3
   335
   336 				; optimize OK (SYSTEM), line = 807
   337
   338 1D2D C9 3F			cmp #$3F
   339 1D2F D0 13			bne @+
   340 1D31 AD B3 9B			lda C+2
   341 1D34 C9 80			cmp #$80
   342 1D36 D0 0C			bne @+
   343 1D38 AD B2 9B			lda C+1
   344 1D3B C9 00			cmp #$00
   345 1D3D D0 05			bne @+
   346 1D3F AD B1 9B			lda C
   347 1D42 C9 01			cmp #$01
   348 				@
   349 1D44 90 3A			jcc l_0061
   350 1D46 AD B1 9B			lda C
   351 1D49 85 9F			sta :STACKORIGIN+9
   352 1D4B AD B2 9B			lda C+1
   353 1D4E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   354 1D50 AD B3 9B			lda C+2
   355 1D53 38 E9 80			sub #$80
   356 1D56 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   357 1D58 AD B4 9B			lda C+3
   358 1D5B E9 3F			sbc #$3F
   359 1D5D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   360 1D5F 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
   361 1D61 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
   362 1D63 66 AF			ror :STACKORIGIN+STACKWIDTH+9
   363 1D65 66 9F			ror :STACKORIGIN+9
   364 1D67 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   365 1D69 18 69 80			add #$80
   366 1D6C 8D B3 9B			sta C+2
   367 1D6F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   368 1D71 69 3F			adc #$3F
   369 1D73 8D B4 9B			sta C+3
   370 1D76 A5 9F			lda :STACKORIGIN+9
   371 1D78 8D B1 9B			sta C
   372 1D7B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   373 1D7D 8D B2 9B			sta C+1
   374 1D80			l_0061
   375
   376 				; optimize OK (SYSTEM), line = 809
   377
   378 1D80 AC AF 9B 84 84 AC + 	mwy SP :bp2
   379 1D8A A0 00			ldy #$00
   380 1D8C B1 84			lda (:bp2),y
   381 1D8E 8D AB 9B			sta RESULT
   382 1D91 C8				iny
   383 1D92 B1 84			lda (:bp2),y
   384 1D94 8D AC 9B			sta RESULT+1
   385 1D97 C8				iny
   386 1D98 B1 84			lda (:bp2),y
   387 1D9A 8D AD 9B			sta RESULT+2
   388 1D9D C8				iny
   389 1D9E B1 84			lda (:bp2),y
   390 1DA0 8D AE 9B			sta RESULT+3
   391
   392 				; optimize OK (SYSTEM), line = 811
   393
   394 1DA3 AD A7 9B			lda X
   395 1DA6 85 8E			sta :FPMAN0
   396 1DA8 AD A8 9B			lda X+1
   397 1DAB 85 8F			sta :FPMAN1
   398 1DAD AD A9 9B			lda X+2
   399 1DB0 85 90			sta :FPMAN2
   400 1DB2 AD AA 9B			lda X+3
   401 1DB5 85 91			sta :FPMAN3
   402 1DB7 20 52 19			jsr @I2F
   403 1DBA A5 8E			lda :FPMAN0
   404 1DBC 85 86			sta :FP1MAN0
   405 1DBE A5 8F			lda :FPMAN1
   406 1DC0 85 87			sta :FP1MAN1
   407 1DC2 A5 90			lda :FPMAN2
   408 1DC4 85 88			sta :FP1MAN2
   409 1DC6 A5 91			lda :FPMAN3
   410 1DC8 85 89			sta :FP1MAN3
   411 1DCA AD AB 9B			lda RESULT
   412 1DCD 85 8A			sta :FP2MAN0
   413 1DCF AD AC 9B			lda RESULT+1
   414 1DD2 85 8B			sta :FP2MAN1
   415 1DD4 AD AD 9B			lda RESULT+2
   416 1DD7 85 8C			sta :FP2MAN2
   417 1DD9 AD AE 9B			lda RESULT+3
   418 1DDC 85 8D			sta :FP2MAN3
   419 1DDE 20 65 18			jsr @FDIV
   420 1DE1 A5 8E			lda :FPMAN0
   421 1DE3 85 8A			sta :FP2MAN0
   422 1DE5 A5 8F			lda :FPMAN1
   423 1DE7 85 8B			sta :FP2MAN1
   424 1DE9 A5 90			lda :FPMAN2
   425 1DEB 85 8C			sta :FP2MAN2
   426 1DED A5 91			lda :FPMAN3
   427 1DEF 85 8D			sta :FP2MAN3
   428 1DF1 AD AB 9B			lda RESULT
   429 1DF4 85 86			sta :FP1MAN0
   430 1DF6 AD AC 9B			lda RESULT+1
   431 1DF9 85 87			sta :FP1MAN1
   432 1DFB AD AD 9B			lda RESULT+2
   433 1DFE 85 88			sta :FP1MAN2
   434 1E00 AD AE 9B			lda RESULT+3
   435 1E03 85 89			sta :FP1MAN3
   436 1E05 20 58 16			jsr @FADD
   437 1E08 A5 8E			lda :FPMAN0
   438 1E0A 85 86			sta :FP1MAN0
   439 1E0C A5 8F			lda :FPMAN1
   440 1E0E 85 87			sta :FP1MAN1
   441 1E10 A5 90			lda :FPMAN2
   442 1E12 85 88			sta :FP1MAN2
   443 1E14 A5 91			lda :FPMAN3
   444 1E16 85 89			sta :FP1MAN3
   445 1E18 A9 00			lda #$00
   446 1E1A 85 8A			sta :FP2MAN0
   447 1E1C 85 8B			sta :FP2MAN1
   448 1E1E 85 8C			sta :FP2MAN2
   449 1E20 A9 3F			lda #$3F
   450 1E22 85 8D			sta :FP2MAN3
   451 1E24 20 C4 17			jsr @FMUL
   452 1E27 A5 8E			lda :FPMAN0
   453 1E29 8D AB 9B			sta RESULT
   454 1E2C A5 8F			lda :FPMAN1
   455 1E2E 8D AC 9B			sta RESULT+1
   456 1E31 A5 90			lda :FPMAN2
   457 1E33 8D AD 9B			sta RESULT+2
   458 1E36 A5 91			lda :FPMAN3
   459 1E38 8D AE 9B			sta RESULT+3
   460
   461 				; optimize OK (SYSTEM), line = 812
   462
   463 1E3B AD A7 9B			lda X
   464 1E3E 85 8E			sta :FPMAN0
   465 1E40 AD A8 9B			lda X+1
   466 1E43 85 8F			sta :FPMAN1
   467 1E45 AD A9 9B			lda X+2
   468 1E48 85 90			sta :FPMAN2
   469 1E4A AD AA 9B			lda X+3
   470 1E4D 85 91			sta :FPMAN3
   471 1E4F 20 52 19			jsr @I2F
   472 1E52 A5 8E			lda :FPMAN0
   473 1E54 85 86			sta :FP1MAN0
   474 1E56 A5 8F			lda :FPMAN1
   475 1E58 85 87			sta :FP1MAN1
   476 1E5A A5 90			lda :FPMAN2
   477 1E5C 85 88			sta :FP1MAN2
   478 1E5E A5 91			lda :FPMAN3
   479 1E60 85 89			sta :FP1MAN3
   480 1E62 AD AB 9B			lda RESULT
   481 1E65 85 8A			sta :FP2MAN0
   482 1E67 AD AC 9B			lda RESULT+1
   483 1E6A 85 8B			sta :FP2MAN1
   484 1E6C AD AD 9B			lda RESULT+2
   485 1E6F 85 8C			sta :FP2MAN2
   486 1E71 AD AE 9B			lda RESULT+3
   487 1E74 85 8D			sta :FP2MAN3
   488 1E76 20 65 18			jsr @FDIV
   489 1E79 A5 8E			lda :FPMAN0
   490 1E7B 85 8A			sta :FP2MAN0
   491 1E7D A5 8F			lda :FPMAN1
   492 1E7F 85 8B			sta :FP2MAN1
   493 1E81 A5 90			lda :FPMAN2
   494 1E83 85 8C			sta :FP2MAN2
   495 1E85 A5 91			lda :FPMAN3
   496 1E87 85 8D			sta :FP2MAN3
   497 1E89 AD AB 9B			lda RESULT
   498 1E8C 85 86			sta :FP1MAN0
   499 1E8E AD AC 9B			lda RESULT+1
   500 1E91 85 87			sta :FP1MAN1
   501 1E93 AD AD 9B			lda RESULT+2
   502 1E96 85 88			sta :FP1MAN2
   503 1E98 AD AE 9B			lda RESULT+3
   504 1E9B 85 89			sta :FP1MAN3
   505 1E9D 20 58 16			jsr @FADD
   506 1EA0 A5 8E			lda :FPMAN0
   507 1EA2 85 86			sta :FP1MAN0
   508 1EA4 A5 8F			lda :FPMAN1
   509 1EA6 85 87			sta :FP1MAN1
   510 1EA8 A5 90			lda :FPMAN2
   511 1EAA 85 88			sta :FP1MAN2
   512 1EAC A5 91			lda :FPMAN3
   513 1EAE 85 89			sta :FP1MAN3
   514 1EB0 A9 00			lda #$00
   515 1EB2 85 8A			sta :FP2MAN0
   516 1EB4 85 8B			sta :FP2MAN1
   517 1EB6 85 8C			sta :FP2MAN2
   518 1EB8 A9 3F			lda #$3F
   519 1EBA 85 8D			sta :FP2MAN3
   520 1EBC 20 C4 17			jsr @FMUL
   521 1EBF A5 8E			lda :FPMAN0
   522 1EC1 8D AB 9B			sta RESULT
   523 1EC4 A5 8F			lda :FPMAN1
   524 1EC6 8D AC 9B			sta RESULT+1
   525 1EC9 A5 90			lda :FPMAN2
   526 1ECB 8D AD 9B			sta RESULT+2
   527 1ECE A5 91			lda :FPMAN3
   528 1ED0 8D AE 9B			sta RESULT+3
   529
   530 				; optimize OK (SYSTEM), line = 813
   531
   532 1ED3 AD A7 9B			lda X
   533 1ED6 85 8E			sta :FPMAN0
   534 1ED8 AD A8 9B			lda X+1
   535 1EDB 85 8F			sta :FPMAN1
   536 1EDD AD A9 9B			lda X+2
   537 1EE0 85 90			sta :FPMAN2
   538 1EE2 AD AA 9B			lda X+3
   539 1EE5 85 91			sta :FPMAN3
   540 1EE7 20 52 19			jsr @I2F
   541 1EEA A5 8E			lda :FPMAN0
   542 1EEC 85 86			sta :FP1MAN0
   543 1EEE A5 8F			lda :FPMAN1
   544 1EF0 85 87			sta :FP1MAN1
   545 1EF2 A5 90			lda :FPMAN2
   546 1EF4 85 88			sta :FP1MAN2
   547 1EF6 A5 91			lda :FPMAN3
   548 1EF8 85 89			sta :FP1MAN3
   549 1EFA AD AB 9B			lda RESULT
   550 1EFD 85 8A			sta :FP2MAN0
   551 1EFF AD AC 9B			lda RESULT+1
   552 1F02 85 8B			sta :FP2MAN1
   553 1F04 AD AD 9B			lda RESULT+2
   554 1F07 85 8C			sta :FP2MAN2
   555 1F09 AD AE 9B			lda RESULT+3
   556 1F0C 85 8D			sta :FP2MAN3
   557 1F0E 20 65 18			jsr @FDIV
   558 1F11 A5 8E			lda :FPMAN0
   559 1F13 85 8A			sta :FP2MAN0
   560 1F15 A5 8F			lda :FPMAN1
   561 1F17 85 8B			sta :FP2MAN1
   562 1F19 A5 90			lda :FPMAN2
   563 1F1B 85 8C			sta :FP2MAN2
   564 1F1D A5 91			lda :FPMAN3
   565 1F1F 85 8D			sta :FP2MAN3
   566 1F21 AD AB 9B			lda RESULT
   567 1F24 85 86			sta :FP1MAN0
   568 1F26 AD AC 9B			lda RESULT+1
   569 1F29 85 87			sta :FP1MAN1
   570 1F2B AD AD 9B			lda RESULT+2
   571 1F2E 85 88			sta :FP1MAN2
   572 1F30 AD AE 9B			lda RESULT+3
   573 1F33 85 89			sta :FP1MAN3
   574 1F35 20 58 16			jsr @FADD
   575 1F38 A5 8E			lda :FPMAN0
   576 1F3A 85 86			sta :FP1MAN0
   577 1F3C A5 8F			lda :FPMAN1
   578 1F3E 85 87			sta :FP1MAN1
   579 1F40 A5 90			lda :FPMAN2
   580 1F42 85 88			sta :FP1MAN2
   581 1F44 A5 91			lda :FPMAN3
   582 1F46 85 89			sta :FP1MAN3
   583 1F48 A9 00			lda #$00
   584 1F4A 85 8A			sta :FP2MAN0
   585 1F4C 85 8B			sta :FP2MAN1
   586 1F4E 85 8C			sta :FP2MAN2
   587 1F50 A9 3F			lda #$3F
   588 1F52 85 8D			sta :FP2MAN3
   589 1F54 20 C4 17			jsr @FMUL
   590 1F57 A5 8E			lda :FPMAN0
   591 1F59 8D AB 9B			sta RESULT
   592 1F5C A5 8F			lda :FPMAN1
   593 1F5E 8D AC 9B			sta RESULT+1
   594 1F61 A5 90			lda :FPMAN2
   595 1F63 8D AD 9B			sta RESULT+2
   596 1F66 A5 91			lda :FPMAN3
   597 1F68 8D AE 9B			sta RESULT+3
   598 1F6B			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = 9BA7			X	= DATAORIGIN+$000B
   603 = 9BAB			RESULT	= DATAORIGIN+$000F
   604 = 9BAF			SP	= DATAORIGIN+$0013
   605 = 9BB1			C	= DATAORIGIN+$0015
   606
   607 = 9BA7			@VarData	= X
   608 = 000A			@VarDataSize	= 10
   609
   610 1F6B 60				rts						; ret
   611 				.endl
   612 				.endl							; overload
   613
   614 1F6C			.local	ARCTAN						; FUNCTION | OVERLOAD
   615 1F6C			.local	@01018E000
   616
   617 				; optimize OK (SYSTEM), line = 862
   618
   619 1F6C A9 00			lda #$00
   620 1F6E 8D C5 9B			sta SIGN
   621
   622 				; optimize OK (SYSTEM), line = 863
   623
   624 1F71 AD B5 9B			lda VALUE
   625 1F74 8D BD 9B			sta X
   626 1F77 AD B6 9B			lda VALUE+1
   627 1F7A 8D BE 9B			sta X+1
   628 1F7D AD B7 9B			lda VALUE+2
   629 1F80 8D BF 9B			sta X+2
   630 1F83 AD B8 9B			lda VALUE+3
   631 1F86 8D C0 9B			sta X+3
   632
   633 				; optimize OK (SYSTEM), line = 864
   634
   635 1F89 A9 00			lda #$00
   636 1F8B 8D C1 9B			sta Y
   637 1F8E 8D C2 9B			sta Y+1
   638 1F91 8D C3 9B			sta Y+2
   639 1F94 8D C4 9B			sta Y+3
   640
   641 				; optimize OK (SYSTEM), line = 866
   642
   643 1F97 AD B8 9B			lda VALUE+3
   644 1F9A 0D B7 9B			ora VALUE+2
   645 1F9D 0D B6 9B			ora VALUE+1
   646 1FA0 0D B5 9B			ora VALUE
   647 1FA3 D0 11			jne l_00C8
   648
   649 				; optimize OK (SYSTEM), line = 867
   650
   651 1FA5 A9 00			lda #$00
   652 1FA7 8D B9 9B			sta RESULT
   653 1FAA 8D BA 9B			sta RESULT+1
   654 1FAD 8D BB 9B			sta RESULT+2
   655 1FB0 8D BC 9B			sta RESULT+3
   656 1FB3 4C 7D 22			jmp @exit
   657 1FB6			l_00C8
   658
   659 				; optimize OK (SYSTEM), line = 870
   660
   661 1FB6 AD C0 9B			lda X+3
   662 1FB9 10 26			jpl l_00E6
   663
   664 				; optimize OK (SYSTEM), line = 871
   665
   666 1FBB A9 01			lda #$01
   667 1FBD 8D C5 9B			sta SIGN
   668
   669 				; optimize OK (SYSTEM), line = 872
   670
   671 1FC0 A9 00			lda #$00
   672 1FC2 38 ED BD 9B			sub X
   673 1FC6 8D BD 9B			sta X
   674 1FC9 A9 00			lda #$00
   675 1FCB ED BE 9B			sbc X+1
   676 1FCE 8D BE 9B			sta X+1
   677 1FD1 A9 00			lda #$00
   678 1FD3 ED BF 9B			sbc X+2
   679 1FD6 8D BF 9B			sta X+2
   680 1FD9 A9 00			lda #$00
   681 1FDB ED C0 9B			sbc X+3
   682 1FDE 8D C0 9B			sta X+3
   683 1FE1			l_00E6
   684 1FE1			l_00D6
   685
   686 				; optimize OK (SYSTEM), line = 875
   687
   688 1FE1 AD BD 9B			lda X
   689 1FE4 85 86			sta @REAL_DIV.A
   690 1FE6 AD BE 9B			lda X+1
   691 1FE9 38 E9 01			sub #$01
   692 1FEC 85 87			sta @REAL_DIV.A+1
   693 1FEE AD BF 9B			lda X+2
   694 1FF1 E9 00			sbc #$00
   695 1FF3 85 88			sta @REAL_DIV.A+2
   696 1FF5 AD C0 9B			lda X+3
   697 1FF8 E9 00			sbc #$00
   698 1FFA 85 89			sta @REAL_DIV.A+3
   699 1FFC AD BD 9B			lda X
   700 1FFF 85 8E			sta @REAL_DIV.B
   701 2001 AD BE 9B			lda X+1
   702 2004 18 69 01			add #$01
   703 2007 85 8F			sta @REAL_DIV.B+1
   704 2009 AD BF 9B			lda X+2
   705 200C 69 00			adc #$00
   706 200E 85 90			sta @REAL_DIV.B+2
   707 2010 AD C0 9B			lda X+3
   708 2013 69 00			adc #$00
   709 2015 85 91			sta @REAL_DIV.B+3
   710 2017 20 32 15			jsr @REAL_DIV
   711 201A A5 86			lda :eax
   712 201C 8D BD 9B			sta X
   713 201F A5 87			lda :eax+1
   714 2021 8D BE 9B			sta X+1
   715 2024 A5 88			lda :eax+2
   716 2026 8D BF 9B			sta X+2
   717 2029 A5 89			lda :eax+3
   718 202B 8D C0 9B			sta X+3
   719
   720 				; optimize OK (SYSTEM), line = 876
   721
   722 202E AD BD 9B			lda X
   723 2031 85 8E			sta @REAL_MUL.B
   724 2033 AD BE 9B			lda X+1
   725 2036 85 8F			sta @REAL_MUL.B+1
   726 2038 AD BF 9B			lda X+2
   727 203B 85 90			sta @REAL_MUL.B+2
   728 203D AD C0 9B			lda X+3
   729 2040 85 91			sta @REAL_MUL.B+3
   730 2042 AD BD 9B			lda X
   731 2045 85 86			sta @REAL_MUL.A
   732 2047 AD BE 9B			lda X+1
   733 204A 85 87			sta @REAL_MUL.A+1
   734 204C AD BF 9B			lda X+2
   735 204F 85 88			sta @REAL_MUL.A+2
   736 2051 AD C0 9B			lda X+3
   737 2054 85 89			sta @REAL_MUL.A+3
   738 2056 20 73 14			jsr @REAL_MUL
   739 2059 A5 86			lda :eax
   740 205B 8D C1 9B			sta Y
   741 205E A5 87			lda :eax+1
   742 2060 8D C2 9B			sta Y+1
   743 2063 A5 88			lda :eax+2
   744 2065 8D C3 9B			sta Y+2
   745 2068 A5 89			lda :eax+3
   746 206A 8D C4 9B			sta Y+3
   747
   748 				; optimize OK (SYSTEM), line = 877
   749
   750 206D AD C1 9B			lda Y
   751 2070 85 8E			sta @REAL_MUL.B
   752 2072 AD C2 9B			lda Y+1
   753 2075 85 8F			sta @REAL_MUL.B+1
   754 2077 AD C3 9B			lda Y+2
   755 207A 85 90			sta @REAL_MUL.B+2
   756 207C AD C4 9B			lda Y+3
   757 207F 85 91			sta @REAL_MUL.B+3
   758 2081 A9 01			lda #$01
   759 2083 85 86			sta @REAL_MUL.A
   760 2085 A9 00			lda #$00
   761 2087 85 87			sta @REAL_MUL.A+1
   762 2089 85 88			sta @REAL_MUL.A+2
   763 208B 85 89			sta @REAL_MUL.A+3
   764 208D 20 73 14			jsr @REAL_MUL
   765 2090 A5 86			lda :eax
   766 2092 38 E9 04			sub #$04
   767 2095 85 86			sta @REAL_MUL.A
   768 2097 A5 87			lda :eax+1
   769 2099 E9 00			sbc #$00
   770 209B 85 87			sta @REAL_MUL.A+1
   771 209D A5 88			lda :eax+2
   772 209F E9 00			sbc #$00
   773 20A1 85 88			sta @REAL_MUL.A+2
   774 20A3 A5 89			lda :eax+3
   775 20A5 E9 00			sbc #$00
   776 20A7 85 89			sta @REAL_MUL.A+3
   777 20A9 AD C1 9B			lda Y
   778 20AC 85 8E			sta @REAL_MUL.B
   779 20AE AD C2 9B			lda Y+1
   780 20B1 85 8F			sta @REAL_MUL.B+1
   781 20B3 AD C3 9B			lda Y+2
   782 20B6 85 90			sta @REAL_MUL.B+2
   783 20B8 AD C4 9B			lda Y+3
   784 20BB 85 91			sta @REAL_MUL.B+3
   785 20BD 20 73 14			jsr @REAL_MUL
   786 20C0 A5 86			lda :eax
   787 20C2 18 69 0B			add #$0B
   788 20C5 85 86			sta @REAL_MUL.A
   789 20C7 A5 87			lda :eax+1
   790 20C9 69 00			adc #$00
   791 20CB 85 87			sta @REAL_MUL.A+1
   792 20CD A5 88			lda :eax+2
   793 20CF 69 00			adc #$00
   794 20D1 85 88			sta @REAL_MUL.A+2
   795 20D3 A5 89			lda :eax+3
   796 20D5 69 00			adc #$00
   797 20D7 85 89			sta @REAL_MUL.A+3
   798 20D9 AD C1 9B			lda Y
   799 20DC 85 8E			sta @REAL_MUL.B
   800 20DE AD C2 9B			lda Y+1
   801 20E1 85 8F			sta @REAL_MUL.B+1
   802 20E3 AD C3 9B			lda Y+2
   803 20E6 85 90			sta @REAL_MUL.B+2
   804 20E8 AD C4 9B			lda Y+3
   805 20EB 85 91			sta @REAL_MUL.B+3
   806 20ED 20 73 14			jsr @REAL_MUL
   807 20F0 A5 86			lda :eax
   808 20F2 38 E9 13			sub #$13
   809 20F5 85 86			sta @REAL_MUL.A
   810 20F7 A5 87			lda :eax+1
   811 20F9 E9 00			sbc #$00
   812 20FB 85 87			sta @REAL_MUL.A+1
   813 20FD A5 88			lda :eax+2
   814 20FF E9 00			sbc #$00
   815 2101 85 88			sta @REAL_MUL.A+2
   816 2103 A5 89			lda :eax+3
   817 2105 E9 00			sbc #$00
   818 2107 85 89			sta @REAL_MUL.A+3
   819 2109 AD C1 9B			lda Y
   820 210C 85 8E			sta @REAL_MUL.B
   821 210E AD C2 9B			lda Y+1
   822 2111 85 8F			sta @REAL_MUL.B+1
   823 2113 AD C3 9B			lda Y+2
   824 2116 85 90			sta @REAL_MUL.B+2
   825 2118 AD C4 9B			lda Y+3
   826 211B 85 91			sta @REAL_MUL.B+3
   827 211D 20 73 14			jsr @REAL_MUL
   828 2120 A5 86			lda :eax
   829 2122 18 69 1B			add #$1B
   830 2125 85 86			sta @REAL_MUL.A
   831 2127 A5 87			lda :eax+1
   832 2129 69 00			adc #$00
   833 212B 85 87			sta @REAL_MUL.A+1
   834 212D A5 88			lda :eax+2
   835 212F 69 00			adc #$00
   836 2131 85 88			sta @REAL_MUL.A+2
   837 2133 A5 89			lda :eax+3
   838 2135 69 00			adc #$00
   839 2137 85 89			sta @REAL_MUL.A+3
   840 2139 AD C1 9B			lda Y
   841 213C 85 8E			sta @REAL_MUL.B
   842 213E AD C2 9B			lda Y+1
   843 2141 85 8F			sta @REAL_MUL.B+1
   844 2143 AD C3 9B			lda Y+2
   845 2146 85 90			sta @REAL_MUL.B+2
   846 2148 AD C4 9B			lda Y+3
   847 214B 85 91			sta @REAL_MUL.B+3
   848 214D 20 73 14			jsr @REAL_MUL
   849 2150 A5 86			lda :eax
   850 2152 38 E9 24			sub #$24
   851 2155 85 86			sta @REAL_MUL.A
   852 2157 A5 87			lda :eax+1
   853 2159 E9 00			sbc #$00
   854 215B 85 87			sta @REAL_MUL.A+1
   855 215D A5 88			lda :eax+2
   856 215F E9 00			sbc #$00
   857 2161 85 88			sta @REAL_MUL.A+2
   858 2163 A5 89			lda :eax+3
   859 2165 E9 00			sbc #$00
   860 2167 85 89			sta @REAL_MUL.A+3
   861 2169 AD C1 9B			lda Y
   862 216C 85 8E			sta @REAL_MUL.B
   863 216E AD C2 9B			lda Y+1
   864 2171 85 8F			sta @REAL_MUL.B+1
   865 2173 AD C3 9B			lda Y+2
   866 2176 85 90			sta @REAL_MUL.B+2
   867 2178 AD C4 9B			lda Y+3
   868 217B 85 91			sta @REAL_MUL.B+3
   869 217D 20 73 14			jsr @REAL_MUL
   870 2180 A5 86			lda :eax
   871 2182 18 69 33			add #$33
   872 2185 85 86			sta @REAL_MUL.A
   873 2187 A5 87			lda :eax+1
   874 2189 69 00			adc #$00
   875 218B 85 87			sta @REAL_MUL.A+1
   876 218D A5 88			lda :eax+2
   877 218F 69 00			adc #$00
   878 2191 85 88			sta @REAL_MUL.A+2
   879 2193 A5 89			lda :eax+3
   880 2195 69 00			adc #$00
   881 2197 85 89			sta @REAL_MUL.A+3
   882 2199 AD C1 9B			lda Y
   883 219C 85 8E			sta @REAL_MUL.B
   884 219E AD C2 9B			lda Y+1
   885 21A1 85 8F			sta @REAL_MUL.B+1
   886 21A3 AD C3 9B			lda Y+2
   887 21A6 85 90			sta @REAL_MUL.B+2
   888 21A8 AD C4 9B			lda Y+3
   889 21AB 85 91			sta @REAL_MUL.B+3
   890 21AD 20 73 14			jsr @REAL_MUL
   891 21B0 A5 86			lda :eax
   892 21B2 38 E9 55			sub #$55
   893 21B5 85 86			sta @REAL_MUL.A
   894 21B7 A5 87			lda :eax+1
   895 21B9 E9 00			sbc #$00
   896 21BB 85 87			sta @REAL_MUL.A+1
   897 21BD A5 88			lda :eax+2
   898 21BF E9 00			sbc #$00
   899 21C1 85 88			sta @REAL_MUL.A+2
   900 21C3 A5 89			lda :eax+3
   901 21C5 E9 00			sbc #$00
   902 21C7 85 89			sta @REAL_MUL.A+3
   903 21C9 AD C1 9B			lda Y
   904 21CC 85 8E			sta @REAL_MUL.B
   905 21CE AD C2 9B			lda Y+1
   906 21D1 85 8F			sta @REAL_MUL.B+1
   907 21D3 AD C3 9B			lda Y+2
   908 21D6 85 90			sta @REAL_MUL.B+2
   909 21D8 AD C4 9B			lda Y+3
   910 21DB 85 91			sta @REAL_MUL.B+3
   911 21DD 20 73 14			jsr @REAL_MUL
   912 21E0 A5 87			lda :eax+1
   913 21E2 18 69 01			add #$01
   914 21E5 85 87			sta @REAL_MUL.A+1
   915 21E7 A5 88			lda :eax+2
   916 21E9 69 00			adc #$00
   917 21EB 85 88			sta @REAL_MUL.A+2
   918 21ED A5 89			lda :eax+3
   919 21EF 69 00			adc #$00
   920 21F1 85 89			sta @REAL_MUL.A+3
   921 21F3 AD BD 9B			lda X
   922 21F6 85 8E			sta @REAL_MUL.B
   923 21F8 AD BE 9B			lda X+1
   924 21FB 85 8F			sta @REAL_MUL.B+1
   925 21FD AD BF 9B			lda X+2
   926 2200 85 90			sta @REAL_MUL.B+2
   927 2202 AD C0 9B			lda X+3
   928 2205 85 91			sta @REAL_MUL.B+3
   929 2207 20 73 14			jsr @REAL_MUL
   930 220A A5 86			lda :eax
   931 220C 8D BD 9B			sta X
   932 220F A5 87			lda :eax+1
   933 2211 8D BE 9B			sta X+1
   934 2214 A5 88			lda :eax+2
   935 2216 8D BF 9B			sta X+2
   936 2219 A5 89			lda :eax+3
   937 221B 8D C0 9B			sta X+3
   938
   939 				; optimize OK (SYSTEM), line = 880
   940
   941 221E A9 C9			lda #$C9
   942 2220 18 6D BD 9B			add X
   943 2224 8D BD 9B			sta X
   944 2227 A9 00			lda #$00
   945 2229 6D BE 9B			adc X+1
   946 222C 8D BE 9B			sta X+1
   947 222F A9 00			lda #$00
   948 2231 6D BF 9B			adc X+2
   949 2234 8D BF 9B			sta X+2
   950 2237 A9 00			lda #$00
   951 2239 6D C0 9B			adc X+3
   952 223C 8D C0 9B			sta X+3
   953
   954 				; optimize OK (SYSTEM), line = 882
   955
   956 223F AD C5 9B			lda SIGN
   957 2242 F0 21			jeq l_0168
   958
   959 				; optimize OK (SYSTEM), line = 883
   960
   961 2244 A9 00			lda #$00
   962 2246 38 ED BD 9B			sub X
   963 224A 8D B9 9B			sta RESULT
   964 224D A9 00			lda #$00
   965 224F ED BE 9B			sbc X+1
   966 2252 8D BA 9B			sta RESULT+1
   967 2255 A9 00			lda #$00
   968 2257 ED BF 9B			sbc X+2
   969 225A 8D BB 9B			sta RESULT+2
   970 225D A9 00			lda #$00
   971 225F ED C0 9B			sbc X+3
   972 2262 4C 7A 22			jmp l_0179
   973 2265			l_0168
   974
   975 				; optimize OK (SYSTEM), line = 885
   976
   977 2265 AD BD 9B			lda X
   978 2268 8D B9 9B			sta RESULT
   979 226B AD BE 9B			lda X+1
   980 226E 8D BA 9B			sta RESULT+1
   981 2271 AD BF 9B			lda X+2
   982 2274 8D BB 9B			sta RESULT+2
   983 2277 AD C0 9B			lda X+3
   984 227A			l_0179
   985 227A 8D BC 9B			sta RESULT+3
   986 227D			@exit
   987
   988 				; ------------------------------------------------------------
   989
   990 = 9BB5			VALUE	= DATAORIGIN+$0019
   991 = 9BB9			RESULT	= DATAORIGIN+$001D
   992 = 9BBD			X	= DATAORIGIN+$0021
   993 = 9BC1			Y	= DATAORIGIN+$0025
   994 = 9BC5			SIGN	= DATAORIGIN+$0029
   995
   996 = 9BB5			@VarData	= VALUE
   997 = 000D			@VarDataSize	= 13
   998
   999 227D 60				rts						; ret
  1000 				.endl
  1001 				.endl							; overload
  1002
  1003 227E			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1008 				; as Pointer
  1009 227E B5 96			lda :STACKORIGIN,x
  1010 2280 85 8A			sta A
  1011 2282 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  1012 2284 85 8B			sta A+1
  1013 2286 CA				dex
  1014 2287 30 05			jmi @main
  1015
  1016 				; ------------------------------------------------------------
  1017
  1018 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1019 				; as Pointer
  1020 2289 B5 96			lda :STACKORIGIN,x
  1021 228B 85 8E			sta VALUE
  1022 228D CA				dex
  1023 228E			@main
  1024
  1025 				; -------------------  ASM Block 00000025  -------------------
  1026
  1027 228E A0 00			ldy #0
  1028 2290 A5 8E 91 8A			mva value (:edx),y
  1029
  1030 				; ------------------------------------------------------------
  1031
  1032 = 008A			A	= :EDX
  1033 = 008E			VALUE	= :ECX
  1034
  1035 2294			@exit
  1036 					.ifdef @new
  1037 					lda <@VarData
  1038 					sta :ztmp
  1039 					lda >@VarData
  1040 					ldy #@VarDataSize-1
  1041 					jmp @FreeMem
  1042 					els
  1043 2294 60				rts						; ret
  1044 					eif
  1045 				.endl
  1046
  1047 2295			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
  1048 2295			.local	@03018000001810000300000
  1049
  1050 					.MACRO m@INLINE
  1051 				
  1052 				; -------------------  ASM Block 00000033  -------------------
  1053 				
  1054 					jsr @fill
  1055 				
  1056 					.ENDM
  1057
  1058 				; ------------------------------------------------------------
  1059
  1060 = 008A			A	= :EDX
  1061 = 008E			COUNT	= :ECX
  1062 = 0086			VALUE	= :EAX
  1063
  1064 2295			@exit
  1065 				.endl
  1066 				.endl							; overload
  1067
  1068 2295			.local	RSINCOS						; FUNCTION
  1069
  1070 				; --- WhileProlog
  1071 2295 4C B9 22			jmp l_01BE
  1072 2298			l_01BF
  1073
  1074 				; optimize OK (SYSTEM), line = 1776
  1075
  1076 2298 AD C6 9B			lda X
  1077 229B 38 E9 48			sub #$48
  1078 229E 8D C6 9B			sta X
  1079 22A1 AD C7 9B			lda X+1
  1080 22A4 E9 06			sbc #$06
  1081 22A6 8D C7 9B			sta X+1
  1082 22A9 AD C8 9B			lda X+2
  1083 22AC E9 00			sbc #$00
  1084 22AE 8D C8 9B			sta X+2
  1085 22B1 AD C9 9B			lda X+3
  1086 22B4 E9 00			sbc #$00
  1087 22B6 8D C9 9B			sta X+3
  1088 22B9			l_01BE
  1089 22B9				.LOCAL
  1090 22B9 AD C9 9B			lda X+3
  1091 22BC 38 E9 00			sub #$00
  1092 22BF D0 1F			bne L4
  1093 22C1 AD C8 9B			lda X+2
  1094 22C4 C9 00			cmp #$00
  1095 22C6 D0 0C			bne L1
  1096 22C8 AD C7 9B			lda X+1
  1097 22CB C9 06			cmp #$06
  1098 22CD D0 05			bne L1
  1099 22CF AD C6 9B			lda X
  1100 22D2 C9 48			cmp #$48
  1101 22D4 F0 10		L1	beq L5
  1102 22D6 B0 04			bcs L3
  1103 22D8 A9 FF			lda #$FF
  1104 22DA D0 0A			bne L5
  1105 22DC A9 01		L3	lda #$01
  1106 22DE D0 06			bne L5
  1107 22E0 50 04		L4	bvc L5
  1108 22E2 49 FF			eor #$FF
  1109 22E4 09 01			ora #$01
  1110 22E6			L5
  1111 					.ENDL
  1112 22E6 30 02			smi
  1113 22E8 D0 AE			jne l_01BF
  1114
  1115 				; --- WhileProlog
  1116 22EA 4C 0E 23			jmp l_01D3
  1117 22ED			l_01D4
  1118
  1119 				; optimize OK (SYSTEM), line = 1777
  1120
  1121 22ED AD C6 9B			lda X
  1122 22F0 18 69 48			add #$48
  1123 22F3 8D C6 9B			sta X
  1124 22F6 AD C7 9B			lda X+1
  1125 22F9 69 06			adc #$06
  1126 22FB 8D C7 9B			sta X+1
  1127 22FE AD C8 9B			lda X+2
  1128 2301 69 00			adc #$00
  1129 2303 8D C8 9B			sta X+2
  1130 2306 AD C9 9B			lda X+3
  1131 2309 69 00			adc #$00
  1132 230B 8D C9 9B			sta X+3
  1133 230E			l_01D3
  1134 230E AD C9 9B			lda X+3
  1135 2311 30 DA			jmi l_01D4
  1136
  1137 				; optimize OK (SYSTEM), line = 1780
  1138
  1139 2313 A9 A3			lda #$A3
  1140 2315 85 8E			sta @REAL_MUL.B
  1141 2317 A9 00			lda #$00
  1142 2319 85 8F			sta @REAL_MUL.B+1
  1143 231B 85 90			sta @REAL_MUL.B+2
  1144 231D 85 91			sta @REAL_MUL.B+3
  1145 231F AD C6 9B			lda X
  1146 2322 85 86			sta @REAL_MUL.A
  1147 2324 AD C7 9B			lda X+1
  1148 2327 85 87			sta @REAL_MUL.A+1
  1149 2329 AD C8 9B			lda X+2
  1150 232C 85 88			sta @REAL_MUL.A+2
  1151 232E AD C9 9B			lda X+3
  1152 2331 85 89			sta @REAL_MUL.A+3
  1153 2333 20 73 14			jsr @REAL_MUL
  1154 2336 A5 86			lda :eax
  1155 2338 8D C6 9B			sta X
  1156 233B A5 87			lda :eax+1
  1157 233D 8D C7 9B			sta X+1
  1158 2340 A5 88			lda :eax+2
  1159 2342 8D C8 9B			sta X+2
  1160 2345 A5 89			lda :eax+3
  1161 2347 8D C9 9B			sta X+3
  1162
  1163 				; optimize OK (SYSTEM), line = 1783
  1164
  1165 234A AD C6 9B			lda X
  1166 234D 85 86			sta @REAL_TRUNC.A
  1167 234F AD C7 9B			lda X+1
  1168 2352 85 87			sta @REAL_TRUNC.A+1
  1169 2354 AD C8 9B			lda X+2
  1170 2357 85 88			sta @REAL_TRUNC.A+2
  1171 2359 AD C9 9B			lda X+3
  1172 235C 85 89			sta @REAL_TRUNC.A+3
  1173 235E 20 BC 15			jsr @REAL_TRUNC
  1174 2361 A5 86			lda :eax
  1175 2363 8D CF 9B			sta I
  1176
  1177 				; optimize OK (SYSTEM), line = 1786
  1178
  1179 2366 AD C9 9B			lda X+3
  1180 2369 10 03			jpl l_0202
  1181 236B CE CF 9B			dec I
  1182 236E			l_0202
  1183
  1184 				; optimize OK (SYSTEM), line = 1789
  1185
  1186 236E A0 00			ldy #$00
  1187 2370 AD CF 9B			lda I
  1188 2373 10 01			spl
  1189 2375 88				dey
  1190 2376 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  1191 2378 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  1192 237A 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  1193 237C AD C7 9B			lda X+1
  1194 237F 38 E5 B0			sub :STACKORIGIN+STACKWIDTH+10
  1195 2382 8D C7 9B			sta X+1
  1196 2385 AD C8 9B			lda X+2
  1197 2388 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  1198 238A 8D C8 9B			sta X+2
  1199 238D AD C9 9B			lda X+3
  1200 2390 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  1201 2392 8D C9 9B			sta X+3
  1202
  1203 				; optimize OK (SYSTEM), line = 1792
  1204
  1205 2395 AD CA 9B			lda SC
  1206 2398 F0 03			jeq l_021F
  1207 239A EE CF 9B			inc I
  1208 239D			l_021F
  1209
  1210 				; optimize OK (SYSTEM), line = 1795
  1211
  1212 239D AD CF 9B			lda I
  1213 23A0 29 01			and #$01
  1214 23A2 D0 21			jne l_023C
  1215 23A4 A9 00			lda #$00
  1216 23A6 38 ED C6 9B			sub X
  1217 23AA 8D C6 9B			sta X
  1218 23AD A9 01			lda #$01
  1219 23AF ED C7 9B			sbc X+1
  1220 23B2 8D C7 9B			sta X+1
  1221 23B5 A9 00			lda #$00
  1222 23B7 ED C8 9B			sbc X+2
  1223 23BA 8D C8 9B			sta X+2
  1224 23BD A9 00			lda #$00
  1225 23BF ED C9 9B			sbc X+3
  1226 23C2 8D C9 9B			sta X+3
  1227 23C5			l_023C
  1228
  1229 				; optimize OK (SYSTEM), line = 1798
  1230
  1231 23C5 AD C6 9B			lda X
  1232 23C8 85 8E			sta @REAL_MUL.B
  1233 23CA AD C7 9B			lda X+1
  1234 23CD 85 8F			sta @REAL_MUL.B+1
  1235 23CF AD C8 9B			lda X+2
  1236 23D2 85 90			sta @REAL_MUL.B+2
  1237 23D4 AD C9 9B			lda X+3
  1238 23D7 85 91			sta @REAL_MUL.B+3
  1239 23D9 AD C6 9B			lda X
  1240 23DC 85 86			sta @REAL_MUL.A
  1241 23DE AD C7 9B			lda X+1
  1242 23E1 85 87			sta @REAL_MUL.A+1
  1243 23E3 AD C8 9B			lda X+2
  1244 23E6 85 88			sta @REAL_MUL.A+2
  1245 23E8 AD C9 9B			lda X+3
  1246 23EB 85 89			sta @REAL_MUL.A+3
  1247 23ED 20 73 14			jsr @REAL_MUL
  1248 23F0 A5 86			lda :eax
  1249 23F2 8D C6 9B			sta X
  1250 23F5 A5 87			lda :eax+1
  1251 23F7 8D C7 9B			sta X+1
  1252 23FA A5 88			lda :eax+2
  1253 23FC 8D C8 9B			sta X+2
  1254 23FF A5 89			lda :eax+3
  1255 2401 8D C9 9B			sta X+3
  1256
  1257 				; optimize OK (SYSTEM), line = 1799
  1258
  1259 2404 AD C6 9B			lda X
  1260 2407 85 8E			sta @REAL_MUL.B
  1261 2409 AD C7 9B			lda X+1
  1262 240C 85 8F			sta @REAL_MUL.B+1
  1263 240E AD C8 9B			lda X+2
  1264 2411 85 90			sta @REAL_MUL.B+2
  1265 2413 AD C9 9B			lda X+3
  1266 2416 85 91			sta @REAL_MUL.B+3
  1267 2418 A9 05			lda #$05
  1268 241A 85 86			sta @REAL_MUL.A
  1269 241C A9 00			lda #$00
  1270 241E 85 87			sta @REAL_MUL.A+1
  1271 2420 85 88			sta @REAL_MUL.A+2
  1272 2422 85 89			sta @REAL_MUL.A+3
  1273 2424 20 73 14			jsr @REAL_MUL
  1274 2427 A5 86			lda :eax
  1275 2429 38 E9 3C			sub #$3C
  1276 242C 85 86			sta @REAL_MUL.A
  1277 242E A5 87			lda :eax+1
  1278 2430 E9 00			sbc #$00
  1279 2432 85 87			sta @REAL_MUL.A+1
  1280 2434 A5 88			lda :eax+2
  1281 2436 E9 00			sbc #$00
  1282 2438 85 88			sta @REAL_MUL.A+2
  1283 243A A5 89			lda :eax+3
  1284 243C E9 00			sbc #$00
  1285 243E 85 89			sta @REAL_MUL.A+3
  1286 2440 AD C6 9B			lda X
  1287 2443 85 8E			sta @REAL_MUL.B
  1288 2445 AD C7 9B			lda X+1
  1289 2448 85 8F			sta @REAL_MUL.B+1
  1290 244A AD C8 9B			lda X+2
  1291 244D 85 90			sta @REAL_MUL.B+2
  1292 244F AD C9 9B			lda X+3
  1293 2452 85 91			sta @REAL_MUL.B+3
  1294 2454 20 73 14			jsr @REAL_MUL
  1295 2457 A5 87			lda :eax+1
  1296 2459 18 69 01			add #$01
  1297 245C 85 87			sta @REAL_MUL.A+1
  1298 245E A5 88			lda :eax+2
  1299 2460 69 00			adc #$00
  1300 2462 85 88			sta @REAL_MUL.A+2
  1301 2464 A5 89			lda :eax+3
  1302 2466 69 00			adc #$00
  1303 2468 85 89			sta @REAL_MUL.A+3
  1304 246A A9 00			lda #$00
  1305 246C 38 ED C6 9B			sub X
  1306 2470 85 8E			sta @REAL_MUL.B
  1307 2472 A9 01			lda #$01
  1308 2474 ED C7 9B			sbc X+1
  1309 2477 85 8F			sta @REAL_MUL.B+1
  1310 2479 A9 00			lda #$00
  1311 247B ED C8 9B			sbc X+2
  1312 247E 85 90			sta @REAL_MUL.B+2
  1313 2480 A9 00			lda #$00
  1314 2482 ED C9 9B			sbc X+3
  1315 2485 85 91			sta @REAL_MUL.B+3
  1316 2487 20 73 14			jsr @REAL_MUL
  1317 248A A5 86			lda :eax
  1318 248C 8D CB 9B			sta RESULT
  1319 248F A5 87			lda :eax+1
  1320 2491 8D CC 9B			sta RESULT+1
  1321 2494 A5 88			lda :eax+2
  1322 2496 8D CD 9B			sta RESULT+2
  1323 2499 A5 89			lda :eax+3
  1324 249B 8D CE 9B			sta RESULT+3
  1325
  1326 				; optimize OK (SYSTEM), line = 1802
  1327
  1328 249E AD CF 9B			lda I
  1329 24A1 29 02			and #$02
  1330 24A3 C9 02			cmp #$02
  1331 24A5 D0 21			jne l_0281
  1332 24A7 A9 00			lda #$00
  1333 24A9 38 ED CB 9B			sub RESULT
  1334 24AD 8D CB 9B			sta RESULT
  1335 24B0 A9 00			lda #$00
  1336 24B2 ED CC 9B			sbc RESULT+1
  1337 24B5 8D CC 9B			sta RESULT+1
  1338 24B8 A9 00			lda #$00
  1339 24BA ED CD 9B			sbc RESULT+2
  1340 24BD 8D CD 9B			sta RESULT+2
  1341 24C0 A9 00			lda #$00
  1342 24C2 ED CE 9B			sbc RESULT+3
  1343 24C5 8D CE 9B			sta RESULT+3
  1344 24C8			l_0281
  1345 24C8			@exit
  1346
  1347 				; ------------------------------------------------------------
  1348
  1349 = 9BC6			X	= DATAORIGIN+$002A
  1350 = 9BCA			SC	= DATAORIGIN+$002E
  1351 = 9BCB			RESULT	= DATAORIGIN+$002F
  1352 = 9BCF			I	= DATAORIGIN+$0033
  1353
  1354 = 9BC6			@VarData	= X
  1355 = 0006			@VarDataSize	= 6
  1356
  1357 24C8 60				rts						; ret
  1358 				.endl
  1359
  1360 24C9			.local	SIN						; FUNCTION | OVERLOAD
  1361 24C9			.local	@01018E000
  1362
  1363 				; optimize OK (SYSTEM), line = 1817
  1364
  1365 24C9 AD D0 9B			lda X
  1366 24CC 8D C6 9B			sta RSINCOS.X
  1367 24CF AD D1 9B			lda X+1
  1368 24D2 8D C7 9B			sta RSINCOS.X+1
  1369 24D5 AD D2 9B			lda X+2
  1370 24D8 8D C8 9B			sta RSINCOS.X+2
  1371 24DB AD D3 9B			lda X+3
  1372 24DE 8D C9 9B			sta RSINCOS.X+3
  1373 24E1 A9 00			lda #$00
  1374 24E3 8D CA 9B			sta RSINCOS.SC
  1375 24E6 20 95 22			jsr RSINCOS
  1376 24E9 AD CB 9B			lda RSINCOS.RESULT
  1377 24EC 8D D4 9B			sta RESULT
  1378 24EF AD CC 9B			lda RSINCOS.RESULT+1
  1379 24F2 8D D5 9B			sta RESULT+1
  1380 24F5 AD CD 9B			lda RSINCOS.RESULT+2
  1381 24F8 8D D6 9B			sta RESULT+2
  1382 24FB AD CE 9B			lda RSINCOS.RESULT+3
  1383 24FE 8D D7 9B			sta RESULT+3
  1384 2501			@exit
  1385
  1386 				; ------------------------------------------------------------
  1387
  1388 = 9BD0			X	= DATAORIGIN+$0034
  1389 = 9BD4			RESULT	= DATAORIGIN+$0038
  1390
  1391 = 9BD0			@VarData	= X
  1392 = 0004			@VarDataSize	= 4
  1393
  1394 2501 60				rts						; ret
  1395 				.endl
  1396 				.endl							; overload
  1397
  1398 2502			.local	COS						; FUNCTION | OVERLOAD
  1399 2502			.local	@01018E000
  1400
  1401 				; optimize OK (SYSTEM), line = 1831
  1402
  1403 2502 AD D8 9B			lda X
  1404 2505 8D C6 9B			sta RSINCOS.X
  1405 2508 AD D9 9B			lda X+1
  1406 250B 8D C7 9B			sta RSINCOS.X+1
  1407 250E AD DA 9B			lda X+2
  1408 2511 8D C8 9B			sta RSINCOS.X+2
  1409 2514 AD DB 9B			lda X+3
  1410 2517 8D C9 9B			sta RSINCOS.X+3
  1411 251A A9 01			lda #$01
  1412 251C 8D CA 9B			sta RSINCOS.SC
  1413 251F 20 95 22			jsr RSINCOS
  1414 2522 AD CB 9B			lda RSINCOS.RESULT
  1415 2525 8D DC 9B			sta RESULT
  1416 2528 AD CC 9B			lda RSINCOS.RESULT+1
  1417 252B 8D DD 9B			sta RESULT+1
  1418 252E AD CD 9B			lda RSINCOS.RESULT+2
  1419 2531 8D DE 9B			sta RESULT+2
  1420 2534 AD CE 9B			lda RSINCOS.RESULT+3
  1421 2537 8D DF 9B			sta RESULT+3
  1422 253A			@exit
  1423
  1424 				; ------------------------------------------------------------
  1425
  1426 = 9BD8			X	= DATAORIGIN+$003C
  1427 = 9BDC			RESULT	= DATAORIGIN+$0040
  1428
  1429 = 9BD8			@VarData	= X
  1430 = 0004			@VarDataSize	= 4
  1431
  1432 253A 60				rts						; ret
  1433 				.endl
  1434 				.endl							; overload
  1435
  1436 253B			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1437 253B			.local	@010180000
  1438 253B 8D E0 9B			sta RANGE
  1439
  1440 				; -------------------  ASM Block 00000049  -------------------
  1441
  1442
  1443 				;BYTE FUNC Rand(BYTE range)
  1444 				; returns random number between 0 and
  1445 				; range-1.  If range=0, then a random
  1446 				; number between 0 and 255 is returned
  1447
  1448 253E AC 0A D2		  ldy $d20a   ; RANDOM
  1449
  1450 2541 AD E0 9B		  lda range
  1451 2544 F0 08		  beq stop
  1452
  1453 2546 85 8E		  sta :ecx
  1454 2548 84 86		  sty :eax
  1455
  1456 254A 20 EE 12		  jsr imulCL
  1457 254D A8			  tay
  1458
  1459 254E 8C E1 9B		stop  sty Result
  1460
  1461
  1462 2551			@exit
  1463
  1464 				; ------------------------------------------------------------
  1465
  1466 = 9BE0			RANGE	= DATAORIGIN+$0044
  1467 = 9BE1			RESULT	= DATAORIGIN+$0045
  1468
  1469 = 9BE0			@VarData	= RANGE
  1470 = 0001			@VarDataSize	= 1
  1471
  1472 2551 60				rts						; ret
  1473 				.endl
  1474 				.endl							; overload
  1475
  1476 2552			.local	RANDOM						; FUNCTION | OVERLOAD
  1477 2552			.local	@010184000
  1478
  1479 				; optimize OK (system_atari.inc), line = 179
  1480
  1481 2552 AD E3 9B			lda RANGE+1
  1482 2555 0D E2 9B			ora RANGE
  1483 2558 D0 0B			jne l_02D3
  1484
  1485 				; optimize OK (system_atari.inc), line = 180
  1486
  1487 255A A9 00			lda #$00
  1488 255C 8D E4 9B			sta RESULT
  1489 255F 8D E5 9B			sta RESULT+1
  1490 2562 4C C7 25			jmp l_02E1
  1491 2565			l_02D3
  1492
  1493 				; optimize OK (system_atari.inc), line = 183
  1494
  1495 2565 AD A5 9B			lda RNDSEED
  1496 2568 85 8E			sta :ecx
  1497 256A AD A6 9B			lda RNDSEED+1
  1498 256D 85 8F			sta :ecx+1
  1499 256F A9 95			lda #$95
  1500 2571 85 86			sta :eax
  1501 2573 A9 45			lda #$45
  1502 2575 85 87			sta :eax+1
  1503 					.ifdef fmulinit
  1504 					fmulu_16
  1505 					els
  1506 2577 20 3A 13			imulCX
  1507 					eif
  1508 257A A5 86			lda :eax
  1509 257C 8D A5 9B			sta RNDSEED
  1510 257F A5 87			lda :eax+1
  1511 2581 8D A6 9B			sta RNDSEED+1
  1512
  1513 				; optimize OK (system_atari.inc), line = 184
  1514
  1515 2584 AD E2 9B			lda RANGE
  1516 2587 85 8E			sta @SMALLINT.MOD.B
  1517 2589 AD E3 9B			lda RANGE+1
  1518 258C 85 8F			sta @SMALLINT.MOD.B+1
  1519 258E AD A5 9B			lda RNDSEED
  1520 2591 85 86			sta @SMALLINT.MOD.A
  1521 2593 AD A6 9B			lda RNDSEED+1
  1522 2596 85 87			sta @SMALLINT.MOD.A+1
  1523 2598 20 7F 12			jsr @SMALLINT.MOD
  1524 259B A5 92			lda @SMALLINT.MOD.RESULT
  1525 259D 8D E4 9B			sta RESULT
  1526 25A0 A5 93			lda @SMALLINT.MOD.RESULT+1
  1527 25A2 8D E5 9B			sta RESULT+1
  1528
  1529 				; -------------------  ASM Block 00000050  -------------------
  1530
  1531 25A5 AD E3 9B			lda range+1
  1532 25A8 10 07			bpl plus
  1533
  1534 25AA AD E5 9B			lda Result+1
  1535 25AD 30 18			bmi ok
  1536 25AF 10 05			bpl sign
  1537
  1538 25B1 AD E5 9B		plus	lda Result+1
  1539 25B4 10 11			bpl ok
  1540
  1541 25B6 A9 00		sign 	lda #0
  1542 25B8 38 ED E4 9B			sub Result
  1543 25BC 8D E4 9B			sta Result
  1544
  1545 25BF A9 00			lda #0
  1546 25C1 ED E5 9B			sbc Result+1
  1547 25C4 8D E5 9B			sta Result+1
  1548 25C7			ok
  1549
  1550 25C7			l_02E1
  1551 25C7			@exit
  1552
  1553 				; ------------------------------------------------------------
  1554
  1555 = 9BE2			RANGE	= DATAORIGIN+$0046
  1556 = 9BE4			RESULT	= DATAORIGIN+$0048
  1557
  1558 = 9BE2			@VarData	= RANGE
  1559 = 0002			@VarDataSize	= 2
  1560
  1561 25C7 60				rts						; ret
  1562 				.endl
  1563 				.endl							; overload
  1564
  1565 				; ------------------------------------------------------------
  1566 				; ------------------------------------------------------------
  1567 25C8			@UnitInit
  1568
  1569 				; -------------------  ASM Block 00000060  -------------------
  1570
  1571 					.ifdef @CmdLine
  1572
  1573 					ldx #$0F
  1574 					mva:rpl $340,x IOCB@COPY,x-
  1575 					rts
  1576
  1577 				IOCB@COPY	:16 brk
  1578 					eif
  1579
  1580
  1581 25C8 60				rts
  1582
  1583 				; ------------------------------------------------------------
  1584
  1585 = 0648			M_PI_2	= $0648
  1586 = 0192			D_PI_2	= $0192
  1587 = 0004			D_PI_180	= $04
  1588 = 0101			__PORTB_BANKS	= $0101
  1589 = 0000			MGTIA	= $00
  1590 = 0080			MVBXE	= $80
  1591 = 0000			VBXE_XDLADR	= $00
  1592 = 00E0			VBXE_BCBTMP	= $E0
  1593 = 0100			VBXE_BCBADR	= $0100
  1594 = 1000			VBXE_MAPADR	= $1000
  1595 = 1000			VBXE_CHBASE	= $1000
  1596 = 5000			VBXE_OVRADR	= $5000
  1597 = B000			VBXE_WINDOW	= $B000
  1598 = 0000			IDLI	= $00
  1599 = 0001			IVBL	= $01
  1600 = 0001			IVBLD	= $01
  1601 = 0002			IVBLI	= $02
  1602 = 0003			ITIM1	= $03
  1603 = 0004			ITIM2	= $04
  1604 = 0005			ITIM4	= $05
  1605 = 00FE			CH_DELCHR	= $FE
  1606 = 009B			CH_ENTER	= $9B
  1607 = 001B			CH_ESC	= $1B
  1608 = 001C			CH_CURS_UP	= $1C
  1609 = 001D			CH_CURS_DOWN	= $1D
  1610 = 001E			CH_CURS_LEFT	= $1E
  1611 = 001F			CH_CURS_RIGHT	= $1F
  1612 = 007F			CH_TAB	= $7F
  1613 = 009B			CH_EOL	= $9B
  1614 = 007D			CH_CLR	= $7D
  1615 = 00FD			CH_BELL	= $FD
  1616 = 007E			CH_DEL	= $7E
  1617 = 009C			CH_DELLINE	= $9C
  1618 = 009D			CH_INSLINE	= $9D
  1619 = 0000			PAL_PMCOLOR0	= $00
  1620 = 0001			PAL_PMCOLOR1	= $01
  1621 = 0002			PAL_PMCOLOR2	= $02
  1622 = 0003			PAL_PMCOLOR3	= $03
  1623 = 0004			PAL_COLOR0	= $04
  1624 = 0005			PAL_COLOR1	= $05
  1625 = 0006			PAL_COLOR2	= $06
  1626 = 0007			PAL_COLOR3	= $07
  1627 = 0008			PAL_COLBAK	= $08
  1628 = 0000			COLOR_BLACK	= $00
  1629 = 000E			COLOR_WHITE	= $0E
  1630 = 0032			COLOR_RED	= $32
  1631 = 0096			COLOR_CYAN	= $96
  1632 = 0068			COLOR_VIOLET	= $68
  1633 = 00C4			COLOR_GREEN	= $C4
  1634 = 0074			COLOR_BLUE	= $74
  1635 = 00EE			COLOR_YELLOW	= $EE
  1636 = 0028			COLOR_ORANGE	= $28
  1637 = 00E4			COLOR_BROWN	= $E4
  1638 = 003C			COLOR_LIGHTRED	= $3C
  1639 = 0004			COLOR_GRAY1	= $04
  1640 = 0006			COLOR_GRAY2	= $06
  1641 = 000A			COLOR_GRAY3	= $0A
  1642 = 00CC			COLOR_LIGHTGREEN	= $CC
  1643 = 007C			COLOR_LIGHTBLUE	= $7C
  1644 = 0004			FMOPENREAD	= $04
  1645 = 0008			FMOPENWRITE	= $08
  1646 = 0009			FMOPENAPPEND	= $09
  1647 = 000C			FMOPENREADWRITE	= $0C
  1648 = 9B9C			DATESEPARATOR	= DATAORIGIN+$0000
  1649 = D20A			RND	= $D20A
  1650 = 02C0			adr.PALETTE	= $02C0
  1651 25C9			.var PALETTE	= adr.PALETTE .word
  1652 = D012			adr.HPALETTE	= $D012
  1653 25C9			.var HPALETTE	= adr.HPALETTE .word
  1654 = 9B9D			FILEMODE	= DATAORIGIN+$0001
  1655 = 9B9E			GRAPHMODE	= DATAORIGIN+$0002
  1656 = 9B9F			IORESULT	= DATAORIGIN+$0003
  1657 = 9BA0			EOLN	= DATAORIGIN+$0004
  1658 = 9BA1			SCREENWIDTH	= DATAORIGIN+$0005
  1659 = 9BA3			SCREENHEIGHT	= DATAORIGIN+$0007
  1660 = 0000			adr.MEM	= $00
  1661 25C9			.var MEM	= adr.MEM .word
  1662 = 9BA5			RNDSEED	= DATAORIGIN+$0009
  1663
  1664 = 25C9 C0 02		PALETTE
  1664 = 25CB 12 D0		HPALETTE
  1664 = 25CD 00 00		MEM
  1664 				.endl							; UNIT SYSTEM
  1665
  1666 				; ------------------------------------------------------------
  1667
  1668 25CF			.local	ATARI						; UNIT
  1669
  1670 				; ------------------------------------------------------------
  1671
  1672 = 0000			DL_BLANK1	= $00
  1673 = 0010			DL_BLANK2	= $10
  1674 = 0020			DL_BLANK3	= $20
  1675 = 0030			DL_BLANK4	= $30
  1676 = 0040			DL_BLANK5	= $40
  1677 = 0050			DL_BLANK6	= $50
  1678 = 0060			DL_BLANK7	= $60
  1679 = 0070			DL_BLANK8	= $70
  1680 = 0080			DL_DLI	= $80
  1681 = 0040			DL_LMS	= $40
  1682 = 0020			DL_VSCROLL	= $20
  1683 = 0010			DL_HSCROLL	= $10
  1684 = 0001			DL_JMP	= $01
  1685 = 0041			DL_JVB	= $41
  1686 = 0002			DL_MODE_2	= $02
  1687 = 0003			DL_MODE_3	= $03
  1688 = 0004			DL_MODE_4	= $04
  1689 = 0005			DL_MODE_5	= $05
  1690 = 000E			DL_MODE_E	= $0E
  1691 = 000F			DL_MODE_F	= $0F
  1692 = 0010			IRQENS	= $10
  1693 = 0012			RTCLOK	= $12
  1694 = 0012			RTCLOK1	= $12
  1695 = 0013			RTCLOK2	= $13
  1696 = 0014			RTCLOK3	= $14
  1697 = 004D			ATRACT	= $4D
  1698 = 0052			LMARGIN	= $52
  1699 = 0053			RMARGIN	= $53
  1700 = 0054			ROWCRS	= $54
  1701 = 0055			COLCRS	= $55
  1702 = 0057			DINDEX	= $57
  1703 = 0058			SAVMSC	= $58
  1704 = 0062			PALNTS	= $62
  1705 = 006A			RAMTOP	= $6A
  1706 = 0200			VDSLST	= $0200
  1707 = 0230			SDLSTL	= $0230
  1708 = 0290			TXTROW	= $0290
  1709 = 0291			TXTCOL	= $0291
  1710 = 0293			TINDEX	= $0293
  1711 = 0294			TXTMSC	= $0294
  1712 = 022F			SDMCTL	= $022F
  1713 = 026F			GPRIOR	= $026F
  1714 = 02F0			CRSINH	= $02F0
  1715 = 02F3			CHACT	= $02F3
  1716 = 02F4			CHBAS	= $02F4
  1717 = 02FC			CH	= $02FC
  1718 = 02FD			FILDAT	= $02FD
  1719 = 02C0			PCOLR0	= $02C0
  1720 = 02C1			PCOLR1	= $02C1
  1721 = 02C2			PCOLR2	= $02C2
  1722 = 02C3			PCOLR3	= $02C3
  1723 = 02C4			COLOR0	= $02C4
  1724 = 02C5			COLOR1	= $02C5
  1725 = 02C6			COLOR2	= $02C6
  1726 = 02C7			COLOR3	= $02C7
  1727 = 02C8			COLOR4	= $02C8
  1728 = 02C8			COLBAKS	= $02C8
  1729 = D000			HPOSP0	= $D000
  1730 = D001			HPOSP1	= $D001
  1731 = D002			HPOSP2	= $D002
  1732 = D003			HPOSP3	= $D003
  1733 = D004			HPOSM0	= $D004
  1734 = D005			HPOSM1	= $D005
  1735 = D006			HPOSM2	= $D006
  1736 = D007			HPOSM3	= $D007
  1737 = D008			SIZEP0	= $D008
  1738 = D009			SIZEP1	= $D009
  1739 = D00A			SIZEP2	= $D00A
  1740 = D00B			SIZEP3	= $D00B
  1741 = D00C			SIZEM	= $D00C
  1742 = D00D			GRAFP0	= $D00D
  1743 = D00E			GRAFP1	= $D00E
  1744 = D00F			GRAFP2	= $D00F
  1745 = D010			GRAFP3	= $D010
  1746 = D011			GRAFM	= $D011
  1747 = D004			P0PF	= $D004
  1748 = D014			PAL	= $D014
  1749 = D013			TRIG3	= $D013
  1750 = D012			COLPM0	= $D012
  1751 = D013			COLPM1	= $D013
  1752 = D014			COLPM2	= $D014
  1753 = D015			COLPM3	= $D015
  1754 = D016			COLPF0	= $D016
  1755 = D017			COLPF1	= $D017
  1756 = D018			COLPF2	= $D018
  1757 = D019			COLPF3	= $D019
  1758 = D01A			COLBAK	= $D01A
  1759 = D01A			COLBK	= $D01A
  1760 = D01B			PRIOR	= $D01B
  1761 = D01D			GRACTL	= $D01D
  1762 = D01D			PMCNTL	= $D01D
  1763 = D01E			HITCLR	= $D01E
  1764 = D01F			CONSOL	= $D01F
  1765 = D200			AUDF1	= $D200
  1766 = D201			AUDC1	= $D201
  1767 = D202			AUDF2	= $D202
  1768 = D203			AUDC2	= $D203
  1769 = D204			AUDF3	= $D204
  1770 = D205			AUDC3	= $D205
  1771 = D206			AUDF4	= $D206
  1772 = D207			AUDC4	= $D207
  1773 = D208			AUDCTL	= $D208
  1774 = D209			KBCODE	= $D209
  1775 = D20E			IRQEN	= $D20E
  1776 = D20F			SKSTAT	= $D20F
  1777 = D300			PORTA	= $D300
  1778 = D301			PORTB	= $D301
  1779 = D302			PACTL	= $D302
  1780 = D400			DMACTL	= $D400
  1781 = D401			CHACTL	= $D401
  1782 = D402			DLISTL	= $D402
  1783 = D404			HSCROL	= $D404
  1784 = D405			VSCROL	= $D405
  1785 = D407			PMBASE	= $D407
  1786 = D409			CHBASE	= $D409
  1787 = D40A			WSYNC	= $D40A
  1788 = D40B			VCOUNT	= $D40B
  1789 = D40C			PENH	= $D40C
  1790 = D40D			PENV	= $D40D
  1791 = D40E			NMIEN	= $D40E
  1792 = FFFA			NMIVEC	= $FFFA
  1793 = FFFC			RESETVEC	= $FFFC
  1794 = FFFE			IRQVEC	= $FFFE
  1795
  1796 				.endl							; UNIT ATARI
  1797
  1798 				; ------------------------------------------------------------
  1799
  1800 25CF			.local	CRT						; UNIT
  1801
  1802 				; ------------------------------------------------------------
  1803
  1804 = 9BE6			TEXTATTR	= DATAORIGIN+$004A
  1805 = D01F			CONSOL	= $D01F
  1806 = 0000			CN_START_SELECT_OPTION	= $00
  1807 = 0001			CN_SELECT_OPTION	= $01
  1808 = 0002			CN_START_OPTION	= $02
  1809 = 0003			CN_OPTION	= $03
  1810 = 0004			CN_START_SELECT	= $04
  1811 = 0005			CN_SELECT	= $05
  1812 = 0006			CN_START	= $06
  1813 = 0007			CN_NONE	= $07
  1814 = 0000			BLACK	= $00
  1815 = 000F			WHITE	= $0F
  1816 = 0026			RED	= $26
  1817 = 00AC			CYAN	= $AC
  1818 = 0048			PURPLE	= $48
  1819 = 00B6			GREEN	= $B6
  1820 = 0086			BLUE	= $86
  1821 = 00DC			YELLOW	= $DC
  1822 = 0018			ORANGE	= $18
  1823 = 00F4			BROWN	= $F4
  1824 = 002A			LIGHT_RED	= $2A
  1825 = 0004			DARK_GREY	= $04
  1826 = 0008			GREY	= $08
  1827 = 00BC			LIGHT_GREEN	= $BC
  1828 = 009A			LIGHT_BLUE	= $9A
  1829 = 000C			LIGHT_GREY	= $0C
  1830 = 0000			BW40	= $00
  1831 = 0001			CO40	= $01
  1832 = 0002			BW80	= $02
  1833 = 0003			CO80	= $03
  1834 = 0007			MONO	= $07
  1835 = 0001			C40	= $01
  1836 = 0003			C80	= $03
  1837 = 0080			BLINK	= $80
  1838
  1839 				.endl							; UNIT CRT
  1840
  1841 				; ------------------------------------------------------------
  1842
  1843 25CF			.local	TYPES						; UNIT
  1844
  1845 				; ------------------------------------------------------------
  1846
  1847 				.endl							; UNIT TYPES
  1848
  1849 				; ------------------------------------------------------------
  1850
  1851 25CF			.local	GRAPH						; UNIT
  1852
  1853 				; ------------------------------------------------------------
  1854
  1855 = 0080			CURRENTDRIVER	= $80
  1856 = 0000			DETECT	= $00
  1857 = 0001			CGA	= $01
  1858 = 0002			MCGA	= $02
  1859 = 0003			EGA	= $03
  1860 = 0004			EGA64	= $04
  1861 = 0005			EGAMONO	= $05
  1862 = 0006			LOWRES	= $06
  1863 = 0007			HERCMONO	= $07
  1864 = 0009			VGA	= $09
  1865 = 000A			VESA	= $0A
  1866 = 000B			D1BIT	= $0B
  1867 = 000C			D2BIT	= $0C
  1868 = 000D			D4BIT	= $0D
  1869 = 000E			D6BIT	= $0E
  1870 = 000F			D8BIT	= $0F
  1871 = 0010			D12BIT	= $10
  1872 = 0018			M640X400	= $18
  1873 = 0018			M640X480	= $18
  1874 = 0001			GROK	= $01
  1875 = 00FF			GRNOINITGRAPH	= $FF
  1876 = 00FE			GRNOTDETECTED	= $FE
  1877 = 00FD			GRFILENOTFOUND	= $FD
  1878 = 00FC			GRINVALIDDRIVER	= $FC
  1879 = 00FB			GRNOLOADMEM	= $FB
  1880 = 00FA			GRNOSCANMEM	= $FA
  1881 = 00F9			GRNOFLOODMEM	= $F9
  1882 = 00F8			GRFONTNOTFOUND	= $F8
  1883 = 00F7			GRNOFONTMEM	= $F7
  1884 = 00F6			GRINVALIDMODE	= $F6
  1885 = 00F5			GRERROR	= $F5
  1886 = 00F4			GRIOERROR	= $F4
  1887 = 00F3			GRINVALIDFONT	= $F3
  1888 = 00F2			GRINVALIDFONTNUM	= $F2
  1889 = 00EE			GRINVALIDVERSION	= $EE
  1890 = 0000			CGAC0	= $00
  1891 = 0001			CGAC1	= $01
  1892 = 0002			CGAC2	= $02
  1893 = 0003			CGAC3	= $03
  1894 = 0004			CGAHI	= $04
  1895 = 0000			MCGAC0	= $00
  1896 = 0001			MCGAC1	= $01
  1897 = 0002			MCGAC2	= $02
  1898 = 0003			MCGAC3	= $03
  1899 = 0004			MCGAMED	= $04
  1900 = 0005			MCGAHI	= $05
  1901 = 0000			EGALO	= $00
  1902 = 0001			EGAHI	= $01
  1903 = 0000			EGA64LO	= $00
  1904 = 0001			EGA64HI	= $01
  1905 = 0003			EGAMONOHI	= $03
  1906 = 000A			VGALO	= $0A
  1907 = 001F			VGAMED	= $1F
  1908 = 0018			VGAHI	= $18
  1909 = 9BE7			GRAPHRESULT	= DATAORIGIN+$004B
  1910 = 9BE8			GETCOLOR	= DATAORIGIN+$004C
  1911 = 9BE9			VIDEORAM	= DATAORIGIN+$004D
  1912 = 9BEB			adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
  1913 25CF			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1914 = 9BEB			LASTARCCOORDS.X	= DATAORIGIN+$004F
  1915 = 9BED			LASTARCCOORDS.Y	= DATAORIGIN+$0051
  1916 = 9BEF			LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
  1917 = 9BF1			LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
  1918 = 9BF3			LASTARCCOORDS.XEND	= DATAORIGIN+$0057
  1919 = 9BF5			LASTARCCOORDS.YEND	= DATAORIGIN+$0059
  1920 = 9BF7			WIN_LEFT	= DATAORIGIN+$005B
  1921 = 9BF9			WIN_RIGHT	= DATAORIGIN+$005D
  1922 = 9BFB			WIN_TOP	= DATAORIGIN+$005F
  1923 = 9BFD			WIN_BOTTOM	= DATAORIGIN+$0061
  1924 = 9BFF			SCANLINE_WIDTH	= DATAORIGIN+$0063
  1925 = 9C00			CURRENTX	= DATAORIGIN+$0064
  1926 = 9C02			CURRENTY	= DATAORIGIN+$0066
  1927
  1928 = 25CF EB 9B		LASTARCCOORDS
  1928 				.endl							; UNIT GRAPH
  1929
  1930 				; ------------------------------------------------------------
  1931
  1932 25D1			.local	VBXE						; UNIT
  1933
  1934 25D1			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  1935 25D1 8D 18 9C			sta B
  1936
  1937 				; -------------------  ASM Block 00000113  -------------------
  1938
  1939 25D4				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 25D4 AD 18 9C		        lda     B
     3 25D7 A0 5F		        ldy     #FX_MEMS
     4 25D9 91 80		        sta     (fxptr),y
  1940
  1941 				; ------------------------------------------------------------
  1942
  1943 = 9C18			B	= DATAORIGIN+$007C
  1944
  1945 = 9C18			@VarData	= B
  1946 = 0001			@VarDataSize	= 1
  1947
  1948 25DB			@exit
  1949 					.ifdef @new
  1950 					lda <@VarData
  1951 					sta :ztmp
  1952 					lda >@VarData
  1953 					ldy #@VarDataSize-1
  1954 					jmp @FreeMem
  1955 					els
  1956 25DB 60				rts						; ret
  1957 					eif
  1958 				.endl
  1959
  1960 25DC			.local	READVBXEMEMORYBYTE				; FUNCTION
  1961
  1962 				; optimize OK (vbxe_memorystream.inc), line = 20
  1963
  1964 25DC AC 19 9C 84 84 AC + 	mwy POSITION :bp2
  1965 25E6 A0 02			ldy #$02
  1966 25E8 B1 84			lda (:bp2),y
  1967 25EA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1968 25EC 88				dey
  1969 25ED B1 84			lda (:bp2),y
  1970 25EF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1971 25F1 6A				ror @
  1972 25F2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1973 25F4 6A				ror @
  1974 25F5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1975 25F7 6A				ror @
  1976 25F8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  1977 25FA 6A				ror @
  1978 25FB 09 80			ora #$80
  1979 25FD 8D 1C 9C			sta BNK
  1980
  1981 				; optimize OK (vbxe_memorystream.inc), line = 21
  1982
  1983 2600 88				dey
  1984 2601 B1 84			lda (:bp2),y
  1985 2603 8D 1D 9C			sta ADR
  1986 2606 C8				iny
  1987 2607 B1 84			lda (:bp2),y
  1988 2609 29 0F			and #$0F
  1989 260B 09 B0			ora #$B0
  1990 260D 8D 1E 9C			sta ADR+1
  1991
  1992 				; optimize OK (vbxe_memorystream.inc), line = 23
  1993
  1994 2610 AD 1C 9C			lda BNK
  1995 2613 20 D1 25			jsr VBXEMEMORYBANK
  1996
  1997 				; optimize OK (vbxe_memorystream.inc), line = 25
  1998
  1999 2616 AC 1E 9C			ldy ADR+1
  2000 2619 84 83			sty :bp+1
  2001 261B AC 1D 9C			ldy ADR
  2002 261E B1 82			lda (:bp),y
  2003 2620 8D 1B 9C			sta RESULT
  2004
  2005 				; optimize OK (vbxe_memorystream.inc), line = 27
  2006
  2007 2623 AC 19 9C 84 84 AC + 	mwy POSITION :bp2
  2008 262D A0 00			ldy #$00
  2009 262F B1 84			lda (:bp2),y
  2010 2631 18 69 01			add #$01
  2011 2634 91 84			sta (:bp2),y
  2012 2636 C8				iny
  2013 2637 B1 84			lda (:bp2),y
  2014 2639 69 00			adc #$00
  2015 263B 91 84			sta (:bp2),y
  2016 263D C8				iny
  2017 263E B1 84			lda (:bp2),y
  2018 2640 69 00			adc #$00
  2019 2642 91 84			sta (:bp2),y
  2020 2644 C8				iny
  2021 2645 B1 84			lda (:bp2),y
  2022 2647 69 00			adc #$00
  2023 2649 91 84			sta (:bp2),y
  2024 264B			@exit
  2025
  2026 				; ------------------------------------------------------------
  2027
  2028 = 9C19			POSITION	= DATAORIGIN+$007D
  2029 = 9C1B			RESULT	= DATAORIGIN+$007F
  2030 = 9C1C			BNK	= DATAORIGIN+$0080
  2031 = 9C1D			ADR	= DATAORIGIN+$0081
  2032
  2033 = 9C19			@VarData	= POSITION
  2034 = 0005			@VarDataSize	= 5
  2035
  2036 264B 60				rts						; ret
  2037 				.endl
  2038
  2039 264C			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2040
  2041 				; optimize OK (vbxe_memorystream.inc), line = 39
  2042
  2043 264C AC 1F 9C 84 84 AC + 	mwy POSITION :bp2
  2044 2656 A0 02			ldy #$02
  2045 2658 B1 84			lda (:bp2),y
  2046 265A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2047 265C 88				dey
  2048 265D B1 84			lda (:bp2),y
  2049 265F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2050 2661 6A				ror @
  2051 2662 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2052 2664 6A				ror @
  2053 2665 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2054 2667 6A				ror @
  2055 2668 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2056 266A 6A				ror @
  2057 266B 09 80			ora #$80
  2058 266D 8D 22 9C			sta BNK
  2059
  2060 				; optimize OK (vbxe_memorystream.inc), line = 40
  2061
  2062 2670 88				dey
  2063 2671 B1 84			lda (:bp2),y
  2064 2673 8D 23 9C			sta ADR
  2065 2676 C8				iny
  2066 2677 B1 84			lda (:bp2),y
  2067 2679 29 0F			and #$0F
  2068 267B 09 B0			ora #$B0
  2069 267D 8D 24 9C			sta ADR+1
  2070
  2071 				; optimize OK (vbxe_memorystream.inc), line = 42
  2072
  2073 2680 AD 22 9C			lda BNK
  2074 2683 20 D1 25			jsr VBXEMEMORYBANK
  2075
  2076 				; optimize OK (vbxe_memorystream.inc), line = 44
  2077
  2078 2686 AC 24 9C			ldy ADR+1
  2079 2689 84 83			sty :bp+1
  2080 268B AC 23 9C			ldy ADR
  2081 268E AD 21 9C			lda A
  2082 2691 91 82			sta (:bp),y
  2083
  2084 				; optimize OK (vbxe_memorystream.inc), line = 46
  2085
  2086 2693 AC 1F 9C 84 84 AC + 	mwy POSITION :bp2
  2087 269D A0 00			ldy #$00
  2088 269F B1 84			lda (:bp2),y
  2089 26A1 18 69 01			add #$01
  2090 26A4 91 84			sta (:bp2),y
  2091 26A6 C8				iny
  2092 26A7 B1 84			lda (:bp2),y
  2093 26A9 69 00			adc #$00
  2094 26AB 91 84			sta (:bp2),y
  2095 26AD C8				iny
  2096 26AE B1 84			lda (:bp2),y
  2097 26B0 69 00			adc #$00
  2098 26B2 91 84			sta (:bp2),y
  2099 26B4 C8				iny
  2100 26B5 B1 84			lda (:bp2),y
  2101 26B7 69 00			adc #$00
  2102 26B9 91 84			sta (:bp2),y
  2103
  2104 				; ------------------------------------------------------------
  2105
  2106 = 9C1F			POSITION	= DATAORIGIN+$0083
  2107 = 9C21			A	= DATAORIGIN+$0085
  2108 = 9C22			BNK	= DATAORIGIN+$0086
  2109 = 9C23			ADR	= DATAORIGIN+$0087
  2110
  2111 = 9C1F			@VarData	= POSITION
  2112 = 0006			@VarDataSize	= 6
  2113
  2114 26BB			@exit
  2115 					.ifdef @new
  2116 					lda <@VarData
  2117 					sta :ztmp
  2118 					lda >@VarData
  2119 					ldy #@VarDataSize-1
  2120 					jmp @FreeMem
  2121 					els
  2122 26BB 60				rts						; ret
  2123 					eif
  2124 				.endl
  2125
  2126 26BC			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2127 26BC 8D 31 9C			sta TVBXEMEMORYSTREAM
  2128 26BF 8C 32 9C			sty TVBXEMEMORYSTREAM+1
  2129 26C2 8D 37 9C			sta POSITION
  2130 26C5 8C 38 9C			sty POSITION+1
  2131 26C8 18 69 04			add #4
  2132 26CB 90 01			scc
  2133 26CD C8				iny
  2134 26CE 8D 39 9C			sta SIZE
  2135 26D1 8C 3A 9C			sty SIZE+1
  2136
  2137 				; optimize OK (vbxe_memorystream.inc), line = 124
  2138
  2139 26D4 AC 37 9C 84 84 AC + 	mwy POSITION :bp2
  2140 26DE A0 02			ldy #$02
  2141 26E0 B1 84			lda (:bp2),y
  2142 26E2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2143 26E4 88				dey
  2144 26E5 B1 84			lda (:bp2),y
  2145 26E7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2146 26E9 6A				ror @
  2147 26EA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2148 26EC 6A				ror @
  2149 26ED 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2150 26EF 6A				ror @
  2151 26F0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2152 26F2 6A				ror @
  2153 26F3 09 80			ora #$80
  2154 26F5 8D 3B 9C			sta BNK
  2155
  2156 				; optimize OK (vbxe_memorystream.inc), line = 125
  2157
  2158 26F8 88				dey
  2159 26F9 B1 84			lda (:bp2),y
  2160 26FB 8D 3C 9C			sta ADR
  2161 26FE C8				iny
  2162 26FF B1 84			lda (:bp2),y
  2163 2701 29 0F			and #$0F
  2164 2703 09 B0			ora #$B0
  2165 2705 8D 3D 9C			sta ADR+1
  2166
  2167 				; optimize OK (vbxe_memorystream.inc), line = 127
  2168
  2169 2708 AD 3B 9C			lda BNK
  2170 270B 20 D1 25			jsr VBXEMEMORYBANK
  2171
  2172 				; optimize OK (vbxe_memorystream.inc), line = 129
  2173
  2174 270E AD 33 9C			lda BUFFER
  2175 2711 8D 40 9C			sta SRC
  2176 2714 AD 34 9C			lda BUFFER+1
  2177 2717 8D 41 9C			sta SRC+1
  2178
  2179 				; optimize OK (vbxe_memorystream.inc), line = 131
  2180
  2181 271A A9 00			lda #$00
  2182 271C 8D 3E 9C			sta I
  2183 271F 8D 3F 9C			sta I+1
  2184 2722 AD 35 9C			lda COUNT
  2185 2725 38 E9 01			sub #$01
  2186 2728 8D 3B 27			sta @FORTMP_0400_0
  2187 272B AD 36 9C			lda COUNT+1
  2188 272E E9 00			sbc #$00
  2189 2730 8D 34 27			sta @FORTMP_0400_1
  2190
  2191 2733			l_0403
  2192 				; --- ForToDoCondition
  2193 2733 A9 00			lda @FORTMP_0400_1::#$00
  2194 2735 CD 3F 9C			cmp I+1
  2195 2738 D0 05			bne @+
  2196 273A A9 00			lda @FORTMP_0400_0::#$00
  2197 273C CD 3E 9C			cmp I
  2198 				@
  2199 273F 90 53			jcc l_040F
  2200
  2201 				; optimize OK (vbxe_memorystream.inc), line = 133
  2202
  2203 2741 AC 40 9C 84 84 AC + 	mwy SRC :bp2
  2204 274B A0 00			ldy #$00
  2205 274D B1 84			lda (:bp2),y
  2206 274F AC 3D 9C			ldy ADR+1
  2207 2752 84 83			sty :bp+1
  2208 2754 AC 3C 9C			ldy ADR
  2209 2757 91 82			sta (:bp),y
  2210
  2211 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2212
  2213 2759 EE 3C 9C			inc ADR
  2214 275C D0 03			sne
  2215 275E EE 3D 9C			inc ADR+1
  2216
  2217 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2218
  2219 2761 EE 40 9C			inc SRC
  2220 2764 D0 03			sne
  2221 2766 EE 41 9C			inc SRC+1
  2222
  2223 				; optimize OK (vbxe_memorystream.inc), line = 138
  2224
  2225 2769 AD 3D 9C			lda ADR+1
  2226 276C C9 C0			cmp #$C0
  2227 276E 90 1A			jcc l_042E
  2228 2770 D0 05			bne @+
  2229 2772 AD 3C 9C			lda ADR
  2230 2775 90 13			jcc l_042E
  2231 				@
  2232
  2233 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2234
  2235 2777 EE 3B 9C			inc BNK
  2236
  2237 				; optimize OK (vbxe_memorystream.inc), line = 140
  2238
  2239 277A AD 3B 9C			lda BNK
  2240 277D 20 D1 25			jsr VBXEMEMORYBANK
  2241
  2242 				; optimize OK (vbxe_memorystream.inc), line = 141
  2243
  2244 2780 A9 00			lda #$00
  2245 2782 8D 3C 9C			sta ADR
  2246 2785 A9 B0			lda #$B0
  2247 2787 8D 3D 9C			sta ADR+1
  2248 278A			l_042E
  2249
  2250 				; --- ForToDoEpilog
  2251 278A EE 3E 9C			inc I
  2252 278D D0 A4			jne l_0403
  2253 278F EE 3F 9C			inc I+1
  2254 2792 D0 9F			jne l_0403
  2255 2794			l_040F
  2256
  2257 				; optimize OK (vbxe_memorystream.inc), line = 146
  2258
  2259 2794 A9 00			lda #$00
  2260 2796 20 D1 25			jsr VBXEMEMORYBANK
  2261
  2262 				; optimize OK (vbxe_memorystream.inc), line = 148
  2263
  2264 2799 AC 37 9C 84 84 AC + 	mwy POSITION :bp2
  2265 27A3 A0 00			ldy #$00
  2266 27A5 B1 84			lda (:bp2),y
  2267 27A7 18 6D 35 9C			add COUNT
  2268 27AB 91 84			sta (:bp2),y
  2269 27AD C8				iny
  2270 27AE B1 84			lda (:bp2),y
  2271 27B0 6D 36 9C			adc COUNT+1
  2272 27B3 91 84			sta (:bp2),y
  2273 27B5 C8				iny
  2274 27B6 B1 84			lda (:bp2),y
  2275 27B8 69 00			adc #$00
  2276 27BA 91 84			sta (:bp2),y
  2277 27BC C8				iny
  2278 27BD B1 84			lda (:bp2),y
  2279 27BF 69 00			adc #$00
  2280 27C1 91 84			sta (:bp2),y
  2281
  2282 				; ------------------------------------------------------------
  2283
  2284 = 9C31			TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
  2285 = 9C33			BUFFER	= DATAORIGIN+$0097
  2286 = 9C35			COUNT	= DATAORIGIN+$0099
  2287 = 9C37			POSITION	= DATAORIGIN+$009B
  2288 = 9C39			SIZE	= DATAORIGIN+$009D
  2289 = 9C3B			BNK	= DATAORIGIN+$009F
  2290 = 9C3C			ADR	= DATAORIGIN+$00A0
  2291 = 9C3E			I	= DATAORIGIN+$00A2
  2292 = 9C40			SRC	= DATAORIGIN+$00A4
  2293
  2294 = 9C31			@VarData	= TVBXEMEMORYSTREAM
  2295 = 0011			@VarDataSize	= 17
  2296
  2297 27C3			@exit
  2298 					.ifdef @new
  2299 					lda <@VarData
  2300 					sta :ztmp
  2301 					lda >@VarData
  2302 					ldy #@VarDataSize-1
  2303 					jmp @FreeMem
  2304 					els
  2305 27C3 60				rts						; ret
  2306 					eif
  2307 				.endl
  2308
  2309 27C4			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2310 27C4 8D 44 9C			sta TVBXEMEMORYSTREAM
  2311 27C7 8C 45 9C			sty TVBXEMEMORYSTREAM+1
  2312 27CA 8D 47 9C			sta POSITION
  2313 27CD 8C 48 9C			sty POSITION+1
  2314 27D0 18 69 04			add #4
  2315 27D3 90 01			scc
  2316 27D5 C8				iny
  2317 27D6 8D 49 9C			sta SIZE
  2318 27D9 8C 4A 9C			sty SIZE+1
  2319
  2320 				; optimize OK (vbxe_memorystream.inc), line = 158
  2321
  2322 27DC AD 47 9C			lda POSITION
  2323 27DF 8D 19 9C			sta READVBXEMEMORYBYTE.POSITION
  2324 27E2 AD 48 9C			lda POSITION+1
  2325 27E5 8D 1A 9C			sta READVBXEMEMORYBYTE.POSITION+1
  2326 27E8 20 DC 25			jsr READVBXEMEMORYBYTE
  2327 27EB AD 1B 9C			lda READVBXEMEMORYBYTE.RESULT
  2328 27EE 8D 46 9C			sta RESULT
  2329
  2330 				; optimize OK (vbxe_memorystream.inc), line = 160
  2331
  2332 27F1 A9 00			lda #$00
  2333 27F3 20 D1 25			jsr VBXEMEMORYBANK
  2334 27F6			@exit
  2335
  2336 				; ------------------------------------------------------------
  2337
  2338 = 9C44			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
  2339 = 9C46			RESULT	= DATAORIGIN+$00AA
  2340 = 9C47			POSITION	= DATAORIGIN+$00AB
  2341 = 9C49			SIZE	= DATAORIGIN+$00AD
  2342
  2343 = 9C44			@VarData	= TVBXEMEMORYSTREAM
  2344 = 0006			@VarDataSize	= 6
  2345
  2346 27F6 60				rts						; ret
  2347 				.endl
  2348
  2349 27F7			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2350 27F7 8D 53 9C			sta TVBXEMEMORYSTREAM
  2351 27FA 8C 54 9C			sty TVBXEMEMORYSTREAM+1
  2352 27FD 8D 56 9C			sta POSITION
  2353 2800 8C 57 9C			sty POSITION+1
  2354 2803 18 69 04			add #4
  2355 2806 90 01			scc
  2356 2808 C8				iny
  2357 2809 8D 58 9C			sta SIZE
  2358 280C 8C 59 9C			sty SIZE+1
  2359
  2360 				; optimize OK (vbxe_memorystream.inc), line = 198
  2361
  2362 280F AD 56 9C			lda POSITION
  2363 2812 8D 1F 9C			sta WRITEVBXEMEMORYBYTE.POSITION
  2364 2815 AD 57 9C			lda POSITION+1
  2365 2818 8D 20 9C			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2366 281B AD 55 9C			lda B
  2367 281E 8D 21 9C			sta WRITEVBXEMEMORYBYTE.A
  2368 2821 20 4C 26			jsr WRITEVBXEMEMORYBYTE
  2369
  2370 				; optimize OK (vbxe_memorystream.inc), line = 200
  2371
  2372 2824 A9 00			lda #$00
  2373 2826 20 D1 25			jsr VBXEMEMORYBANK
  2374
  2375 				; ------------------------------------------------------------
  2376
  2377 = 9C53			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
  2378 = 9C55			B	= DATAORIGIN+$00B9
  2379 = 9C56			POSITION	= DATAORIGIN+$00BA
  2380 = 9C58			SIZE	= DATAORIGIN+$00BC
  2381
  2382 = 9C53			@VarData	= TVBXEMEMORYSTREAM
  2383 = 0007			@VarDataSize	= 7
  2384
  2385 2829			@exit
  2386 					.ifdef @new
  2387 					lda <@VarData
  2388 					sta :ztmp
  2389 					lda >@VarData
  2390 					ldy #@VarDataSize-1
  2391 					jmp @FreeMem
  2392 					els
  2393 2829 60				rts						; ret
  2394 					eif
  2395 				.endl
  2396
  2397 282A			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2398 282A 8D 62 9C			sta TVBXEMEMORYSTREAM
  2399 282D 8C 63 9C			sty TVBXEMEMORYSTREAM+1
  2400 2830 8D 64 9C			sta POSITION
  2401 2833 8C 65 9C			sty POSITION+1
  2402 2836 18 69 04			add #4
  2403 2839 90 01			scc
  2404 283B C8				iny
  2405 283C 8D 66 9C			sta SIZE
  2406 283F 8C 67 9C			sty SIZE+1
  2407
  2408 				; optimize OK (vbxe_memorystream.inc), line = 239
  2409
  2410 2842 AC 64 9C 84 84 AC + 	mwy POSITION :bp2
  2411 284C A0 00			ldy #$00
  2412 284E B1 84			lda (:bp2),y
  2413 2850 8D 68 9C			sta ADR
  2414 2853 C8				iny
  2415 2854 B1 84			lda (:bp2),y
  2416 2856 8D 69 9C			sta ADR+1
  2417 2859 C8				iny
  2418 285A B1 84			lda (:bp2),y
  2419 285C 8D 6A 9C			sta ADR+2
  2420 285F C8				iny
  2421 2860 B1 84			lda (:bp2),y
  2422 2862 8D 6B 9C			sta ADR+3
  2423
  2424 				; optimize OK (vbxe_memorystream.inc), line = 240
  2425
  2426 2865 AC 66 9C 84 84 AC + 	mwy SIZE :bp2
  2427 286F A0 00			ldy #$00
  2428 2871 B1 84			lda (:bp2),y
  2429 2873 8D 6C 9C			sta SIZ
  2430 2876 C8				iny
  2431 2877 B1 84			lda (:bp2),y
  2432 2879 8D 6D 9C			sta SIZ+1
  2433 287C C8				iny
  2434 287D B1 84			lda (:bp2),y
  2435 287F 8D 6E 9C			sta SIZ+2
  2436 2882 C8				iny
  2437 2883 B1 84			lda (:bp2),y
  2438 2885 8D 6F 9C			sta SIZ+3
  2439
  2440 				; -------------------  ASM Block 00000114  -------------------
  2441
  2442 2888 8A 48			txa:pha
  2443
  2444 288A AD 68 9C 8D F8 28		mva adr _adr
  2445 2890 AD 69 9C 8D F9 28		mva adr+1 _adr+1
  2446 2896 AD 6A 9C 8D FA 28		mva adr+2 _adr+2
  2447
  2448 289C				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 289C A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 289E A0 5F		        ldy     #FX_MEMS
     4 28A0 91 80		        sta     (fxptr),y
  2449
  2450 28A2 AD FA 28 CD 6E 9C + loop	cpw _adr+1 siz+1
  2451 28B0 B0 37			bcs skp
  2452
  2453 28B2 A0 14			ldy #20
  2454 28B4 B9 F2 28 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2455
  2456 28BD				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 28BD A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 28BF A0 50		        ldy     #FX_BL_ADR0
     4 28C1 91 80		        sta     (fxptr),y
  2457 28C3				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 28C3 A9 00		        lda     #$00
     3 28C5 A0 51		        ldy     #FX_BL_ADR1
     4 28C7 91 80		        sta     (fxptr),y
  2458 28C9				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 28C9 A0 52		        ldy     #FX_BL_ADR2
     3 28CB 91 80		        sta     (fxptr),y
  2459
  2460 28CD				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 28CD A9 01		        lda     #$01
     3 28CF A0 53		        ldy     #FX_BLITTER_START
     4 28D1 91 80		        sta     (fxptr),y
  2461
  2462 28D3			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 28D3 A0 53		        ldy     #FX_BLITTER_BUSY
     3 28D5 B1 80		        lda     (fxptr),y
  2463 28D7 D0 FA			bne wait
  2464
  2465 28D9 A9 00			lda #$00
  2466 28DB 8D F8 28			sta _adr
  2467 28DE EE F9 28 D0 03 EE + 	inw _adr+1
  2468
  2469 28E6 4C A2 28			jmp loop
  2470
  2471 28E9			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 28E9 A9 00		        lda     #$00
     3 28EB A0 5F		        ldy     #FX_MEMS
     4 28ED 91 80		        sta     (fxptr),y
  2472
  2473 28EF 4C 07 29			jmp stop
  2474
  2475 28F2 00 00 00		bltClr	.long 0x00	; source address
  2476 28F5 00 00			.word 0x00	; source step y
  2477 28F7 00				.byte 0x00	; source step x
  2478 28F8 00 00 00		_adr	.long 0x00	; destination address
  2479 28FB 00 01			.word 0x0100	; destination step y
  2480 28FD 01				.byte 0x01	; destination step x
  2481 28FE FF 00		_siz	.word 0xff	; width
  2482 2900 00				.byte 0x00	; height
  2483 2901 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2484 2902 00				dta 0x00	; xor mask
  2485 2903 00				dta 0x00	; collision and mask
  2486 2904 00				dta 0x00	; zoom
  2487 2905 00				dta 0x00	; pattern feature
  2488 2906 00				dta 0x00	; control
  2489
  2490 2907 68 AA		stop	pla:tax
  2491
  2492 				; optimize OK (vbxe_memorystream.inc), line = 292
  2493
  2494 2909 AC 64 9C 84 84 AC + 	mwy POSITION :bp2
  2495 2913 A0 00			ldy #$00
  2496 2915 98				tya
  2497 2916 91 84			sta (:bp2),y
  2498 2918 C8				iny
  2499 2919 91 84			sta (:bp2),y
  2500 291B C8				iny
  2501 291C 91 84			sta (:bp2),y
  2502 291E C8				iny
  2503 291F 91 84			sta (:bp2),y
  2504
  2505 				; optimize OK (vbxe_memorystream.inc), line = 293
  2506
  2507 2921 AC 66 9C 84 84 AC + 	mwy SIZE :bp2
  2508 292B A0 00			ldy #$00
  2509 292D 91 84			sta (:bp2),y
  2510 292F C8				iny
  2511 2930 91 84			sta (:bp2),y
  2512 2932 C8				iny
  2513 2933 A9 08			lda #$08
  2514 2935 91 84			sta (:bp2),y
  2515 2937 C8				iny
  2516 2938 A9 00			lda #$00
  2517 293A 91 84			sta (:bp2),y
  2518
  2519 				; ------------------------------------------------------------
  2520
  2521 = 9C62			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
  2522 = 9C64			POSITION	= DATAORIGIN+$00C8
  2523 = 9C66			SIZE	= DATAORIGIN+$00CA
  2524 = 9C68			ADR	= DATAORIGIN+$00CC
  2525 = 9C6C			SIZ	= DATAORIGIN+$00D0
  2526
  2527 = 9C62			@VarData	= TVBXEMEMORYSTREAM
  2528 = 000E			@VarDataSize	= 14
  2529
  2530 293C			@exit
  2531 					.ifdef @new
  2532 					lda <@VarData
  2533 					sta :ztmp
  2534 					lda >@VarData
  2535 					ldy #@VarDataSize-1
  2536 					jmp @FreeMem
  2537 					els
  2538 293C 60				rts						; ret
  2539 					eif
  2540 				.endl
  2541
  2542 293D			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2543
  2544 				; -------------------  ASM Block 00000123  -------------------
  2545
  2546 					@setxdl #e@xdl.mapoff
  2546 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2546 293D A9 05		 LDA# E@XDL.MAPOFF
  2546 293F 20 3E 1B		 JSR @SETXDL
  2547
  2548 2942			@exit
  2549 					.ifdef @new
  2550 					lda <@VarData
  2551 					sta :ztmp
  2552 					lda >@VarData
  2553 					ldy #@VarDataSize-1
  2554 					jmp @FreeMem
  2555 					els
  2556 2942 60				rts						; ret
  2557 					eif
  2558 				.endl
  2559
  2560 2943			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2561 2943			.local	@0201810000180000
  2562
  2563 				; optimize OK (VBXE), line = 643
  2564
  2565 2943 AD 70 9C			lda A
  2566 2946 8D 9E 9B			sta SYSTEM.GRAPHMODE
  2567
  2568 				; optimize OK (VBXE), line = 645
  2569
  2570 2949 A9 C0			lda #$C0
  2571 294B 8D A3 9B			sta SYSTEM.SCREENHEIGHT
  2572 294E A9 00			lda #$00
  2573 2950 8D A4 9B			sta SYSTEM.SCREENHEIGHT+1
  2574
  2575 				; optimize OK (VBXE), line = 647
  2576
  2577 2953 AD 70 9C			lda A
  2578 2956 8D 73 9C			sta @CASETMP_0005
  2579 2959 C9 0A			cmp #$0A
  2580 295B D0 12			jne l_04A5
  2581 				@
  2582
  2583 				; optimize OK (VBXE), line = 648
  2584
  2585 295D A9 A0			lda #$A0
  2586 295F 8D A1 9B			sta SYSTEM.SCREENWIDTH
  2587 2962 A9 00			lda #$00
  2588 2964 8D A2 9B			sta SYSTEM.SCREENWIDTH+1
  2589 2967 A9 01			lda #$01
  2590 2969 8D 70 9C			sta A
  2591 296C 4C B4 29			jmp a_0005
  2592 296F			l_04A5
  2593 296F C9 1F			cmp #$1F
  2594 2971 D0 12			jne l_04B4
  2595
  2596 				; optimize OK (VBXE), line = 649
  2597
  2598 2973 A9 40			lda #$40
  2599 2975 8D A1 9B			sta SYSTEM.SCREENWIDTH
  2600 2978 A9 01			lda #$01
  2601 297A 8D A2 9B			sta SYSTEM.SCREENWIDTH+1
  2602 297D A9 02			lda #$02
  2603 297F 8D 70 9C			sta A
  2604 2982 4C B4 29			jmp a_0005
  2605 2985			l_04B4
  2606 2985 C9 18			cmp #$18
  2607 2987 D0 12			jne l_04C3
  2608
  2609 				; optimize OK (VBXE), line = 650
  2610
  2611 2989 A9 80			lda #$80
  2612 298B 8D A1 9B			sta SYSTEM.SCREENWIDTH
  2613 298E A9 02			lda #$02
  2614 2990 8D A2 9B			sta SYSTEM.SCREENWIDTH+1
  2615 2993 A9 03			lda #$03
  2616 2995 8D 70 9C			sta A
  2617 2998 4C B4 29			jmp a_0005
  2618 299B			l_04C3
  2619
  2620 				; optimize OK (VBXE), line = 654
  2621
  2622 299B A9 50			lda #$50
  2623 299D 8D A1 9B			sta SYSTEM.SCREENWIDTH
  2624 29A0 A9 00			lda #$00
  2625 29A2 8D A2 9B			sta SYSTEM.SCREENWIDTH+1
  2626
  2627 				; optimize OK (VBXE), line = 655
  2628
  2629 29A5 A9 18			lda #$18
  2630 29A7 8D A3 9B			sta SYSTEM.SCREENHEIGHT
  2631 29AA A9 00			lda #$00
  2632 29AC 8D A4 9B			sta SYSTEM.SCREENHEIGHT+1
  2633
  2634 				; optimize OK (VBXE), line = 656
  2635
  2636 29AF A9 02			lda #$02
  2637 29B1 8D 70 9C			sta A
  2638 29B4			a_0005
  2639
  2640 				; -------------------  ASM Block 00000124  -------------------
  2641
  2642 29B4 8A 48			txa:pha
  2643
  2644 29B6 AD A1 9B			lda MAIN.SYSTEM.ScreenWidth
  2645 29B9 AE A2 9B			ldx MAIN.SYSTEM.ScreenWidth+1
  2646
  2647 29BC AC A3 9B			ldy MAIN.SYSTEM.ScreenHeight
  2648
  2649 29BF 20 8C 11			@SCREENSIZE
  2650
  2651 					@setxdl a
  2651 				 LDA A\ JSR @SETXDL
  2651 29C2 AD 70 9C		 LDA A
  2651 29C5 20 3E 1B		 JSR @SETXDL
  2652
  2653 29C8				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 29C8 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 29CA A0 5F		        ldy     #FX_MEMS
     4 29CC 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2654
  2655 29CE A0 09			ldy #s@xdl.ovstep
  2656
  2657 29D0 AD 71 9C			lda s
  2658 29D3 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2659
  2660 29D6 AD 72 9C			lda s+1
  2661 29D9 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2662
  2663 29DC				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 29DC A9 00		        lda     #$00
     3 29DE A0 5F		        ldy     #FX_MEMS
     4 29E0 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2664
  2665 29E2 68 AA			pla:tax
  2666
  2667 				; ------------------------------------------------------------
  2668
  2669 = 9C70			A	= DATAORIGIN+$00D4
  2670 = 9C71			S	= DATAORIGIN+$00D5
  2671 = 9C73			@CASETMP_0005	= DATAORIGIN+$00D7
  2672
  2673 = 9C70			@VarData	= A
  2674 = 0004			@VarDataSize	= 4
  2675
  2676 29E4			@exit
  2677 					.ifdef @new
  2678 					lda <@VarData
  2679 					sta :ztmp
  2680 					lda >@VarData
  2681 					ldy #@VarDataSize-1
  2682 					jmp @FreeMem
  2683 					els
  2684 29E4 60				rts						; ret
  2685 					eif
  2686 				.endl
  2687 				.endl							; overload
  2688
  2689 29E5			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2690 29E5			.local	@010180000
  2691 29E5 8D 74 9C			sta A
  2692
  2693 				; optimize OK (VBXE), line = 698
  2694
  2695 29E8 8D 70 9C			sta SETHORIZONTALRES.@0201810000180000.A
  2696 29EB A9 40			lda #$40
  2697 29ED 8D 71 9C			sta SETHORIZONTALRES.@0201810000180000.S
  2698 29F0 A9 01			lda #$01
  2699 29F2 8D 72 9C			sta SETHORIZONTALRES.@0201810000180000.S+1
  2700 29F5 20 43 29			jsr SETHORIZONTALRES.@0201810000180000
  2701
  2702 				; ------------------------------------------------------------
  2703
  2704 = 9C74			A	= DATAORIGIN+$00D8
  2705
  2706 = 9C74			@VarData	= A
  2707 = 0001			@VarDataSize	= 1
  2708
  2709 29F8			@exit
  2710 					.ifdef @new
  2711 					lda <@VarData
  2712 					sta :ztmp
  2713 					lda >@VarData
  2714 					ldy #@VarDataSize-1
  2715 					jmp @FreeMem
  2716 					els
  2717 29F8 60				rts						; ret
  2718 					eif
  2719 				.endl
  2720 				.endl							; overload
  2721
  2722 29F9			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2723
  2724 				; -------------------  ASM Block 00000126  -------------------
  2725
  2726 29F9				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 29F9 AD 75 9C		        lda     A
     3 29FC A0 50		        ldy     #FX_BL_ADR0
     4 29FE 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2727 2A00 AD 76 9C			lda	a+1
  2728 2A03 29 0F			and	#$0f
  2729 2A05				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 2A05 A0 51		        ldy     #FX_BL_ADR1
     3 2A07 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2730 2A09				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 2A09 A9 00		        lda     #$00
     3 2A0B A0 52		        ldy     #FX_BL_ADR2
     4 2A0D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2731
  2732 2A0F				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 2A0F A9 01		        lda     #$01
     3 2A11 A0 53		        ldy     #FX_BLITTER_START
     4 2A13 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2733
  2734 				;wait	fxla	FX_BLITTER_BUSY
  2735 				;	bne	wait
  2736
  2737 				; ------------------------------------------------------------
  2738
  2739 = 9C75			A	= DATAORIGIN+$00D9
  2740 = 9B9C			A.SRC_ADR	= DATAORIGIN+$0000
  2741 = 9B9C			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  2742 = 9B9D			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  2743 = 9B9E			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  2744 = 9B9F			A.SRC_STEP_Y	= DATAORIGIN+$0003
  2745 = 9BA1			A.SRC_STEP_X	= DATAORIGIN+$0005
  2746 = 9BA2			A.DST_ADR	= DATAORIGIN+$0006
  2747 = 9BA2			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  2748 = 9BA3			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  2749 = 9BA4			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  2750 = 9BA5			A.DST_STEP_Y	= DATAORIGIN+$0009
  2751 = 9BA7			A.DST_STEP_X	= DATAORIGIN+$000B
  2752 = 9BA8			A.BLT_WIDTH	= DATAORIGIN+$000C
  2753 = 9BAA			A.BLT_HEIGHT	= DATAORIGIN+$000E
  2754 = 9BAB			A.BLT_AND_MASK	= DATAORIGIN+$000F
  2755 = 9BAC			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  2756 = 9BAD			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  2757 = 9BAE			A.BLT_ZOOM	= DATAORIGIN+$0012
  2758 = 9BAF			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  2759 = 9BB0			A.BLT_CONTROL	= DATAORIGIN+$0014
  2760
  2761 = 9C75			@VarData	= A
  2762 = 0002			@VarDataSize	= 2
  2763
  2764 2A15			@exit
  2765 					.ifdef @new
  2766 					lda <@VarData
  2767 					sta :ztmp
  2768 					lda >@VarData
  2769 					ldy #@VarDataSize-1
  2770 					jmp @FreeMem
  2771 					els
  2772 2A15 60				rts						; ret
  2773 					eif
  2774 				.endl
  2775
  2776 2A16			.local	GETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  2777
  2778 				; -------------------  ASM Block 00000127  -------------------
  2779
  2780 2A16				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2A16 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2A18 A0 5F		        ldy     #FX_MEMS
     4 2A1A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2781
  2782 2A1C A0 16			ldy #.sizeof(s@xdl)-1
  2783
  2784 2A1E B9 00 B0		lp	lda MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  2785 2A21 91 8A			sta (a),y
  2786 2A23 88				dey
  2787 2A24 10 F8			bpl lp
  2788
  2789 2A26				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2A26 A9 00		        lda     #0
     3 2A28 A0 5F		        ldy     #FX_MEMS
     4 2A2A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2790
  2791 				; ------------------------------------------------------------
  2792
  2793 = 008A			A	= :EDX
  2794 = 9B9C			A.XDLC_	= DATAORIGIN+$0000
  2795 = 9B9E			A.RPTL_	= DATAORIGIN+$0002
  2796 = 9B9F			A.XDLC	= DATAORIGIN+$0003
  2797 = 9BA1			A.RPTL	= DATAORIGIN+$0005
  2798 = 9BA2			A.OV_ADR	= DATAORIGIN+$0006
  2799 = 9BA2			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  2800 = 9BA3			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  2801 = 9BA4			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  2802 = 9BA5			A.OV_STEP	= DATAORIGIN+$0009
  2803 = 9BA7			A.OV_CHBASE	= DATAORIGIN+$000B
  2804 = 9BA8			A.MP_ADR	= DATAORIGIN+$000C
  2805 = 9BA8			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  2806 = 9BA9			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  2807 = 9BAA			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  2808 = 9BAB			A.MP_STEP	= DATAORIGIN+$000F
  2809 = 9BAD			A.MP_HSCROL	= DATAORIGIN+$0011
  2810 = 9BAE			A.MP_VSCROL	= DATAORIGIN+$0012
  2811 = 9BAF			A.MP_WIDTH	= DATAORIGIN+$0013
  2812 = 9BB0			A.MP_HEIGHT	= DATAORIGIN+$0014
  2813 = 9BB1			A.OV_WIDTH	= DATAORIGIN+$0015
  2814 = 9BB2			A.OV_PRIOR	= DATAORIGIN+$0016
  2815
  2816 2A2C			@exit
  2817 					.ifdef @new
  2818 					lda <@VarData
  2819 					sta :ztmp
  2820 					lda >@VarData
  2821 					ldy #@VarDataSize-1
  2822 					jmp @FreeMem
  2823 					els
  2824 2A2C 60				rts						; ret
  2825 					eif
  2826 				.endl
  2827
  2828 2A2D			.local	SETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  2829
  2830 				; -------------------  ASM Block 00000128  -------------------
  2831
  2832 2A2D				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2A2D A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2A2F A0 5F		        ldy     #FX_MEMS
     4 2A31 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2833
  2834 2A33 A0 16			ldy #.sizeof(s@xdl)-1
  2835
  2836 2A35 B1 8A		lp	lda (a),y
  2837 2A37 99 00 B0			sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  2838 2A3A 88				dey
  2839 2A3B 10 F8			bpl lp
  2840
  2841 2A3D				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2A3D A9 00		        lda     #0
     3 2A3F A0 5F		        ldy     #FX_MEMS
     4 2A41 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2842
  2843 				; ------------------------------------------------------------
  2844
  2845 = 008A			A	= :EDX
  2846 = 9B9C			A.XDLC_	= DATAORIGIN+$0000
  2847 = 9B9E			A.RPTL_	= DATAORIGIN+$0002
  2848 = 9B9F			A.XDLC	= DATAORIGIN+$0003
  2849 = 9BA1			A.RPTL	= DATAORIGIN+$0005
  2850 = 9BA2			A.OV_ADR	= DATAORIGIN+$0006
  2851 = 9BA2			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  2852 = 9BA3			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  2853 = 9BA4			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  2854 = 9BA5			A.OV_STEP	= DATAORIGIN+$0009
  2855 = 9BA7			A.OV_CHBASE	= DATAORIGIN+$000B
  2856 = 9BA8			A.MP_ADR	= DATAORIGIN+$000C
  2857 = 9BA8			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  2858 = 9BA9			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  2859 = 9BAA			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  2860 = 9BAB			A.MP_STEP	= DATAORIGIN+$000F
  2861 = 9BAD			A.MP_HSCROL	= DATAORIGIN+$0011
  2862 = 9BAE			A.MP_VSCROL	= DATAORIGIN+$0012
  2863 = 9BAF			A.MP_WIDTH	= DATAORIGIN+$0013
  2864 = 9BB0			A.MP_HEIGHT	= DATAORIGIN+$0014
  2865 = 9BB1			A.OV_WIDTH	= DATAORIGIN+$0015
  2866 = 9BB2			A.OV_PRIOR	= DATAORIGIN+$0016
  2867
  2868 2A43			@exit
  2869 					.ifdef @new
  2870 					lda <@VarData
  2871 					sta :ztmp
  2872 					lda >@VarData
  2873 					ldy #@VarDataSize-1
  2874 					jmp @FreeMem
  2875 					els
  2876 2A43 60				rts						; ret
  2877 					eif
  2878 				.endl
  2879
  2880 2A44			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  2881 2A44 8D 79 9C			sta A
  2882
  2883 				; -------------------  ASM Block 00000130  -------------------
  2884
  2885 2A47				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 2A47 AD 79 9C		        lda     A
     3 2A4A A0 40		        ldy     #FX_VIDEO_CONTROL
     4 2A4C 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2886
  2887 				; ------------------------------------------------------------
  2888
  2889 = 9C79			A	= DATAORIGIN+$00DD
  2890
  2891 = 9C79			@VarData	= A
  2892 = 0001			@VarDataSize	= 1
  2893
  2894 2A4E			@exit
  2895 					.ifdef @new
  2896 					lda <@VarData
  2897 					sta :ztmp
  2898 					lda >@VarData
  2899 					ldy #@VarDataSize-1
  2900 					jmp @FreeMem
  2901 					els
  2902 2A4E 60				rts						; ret
  2903 					eif
  2904 				.endl
  2905
  2906 				; ------------------------------------------------------------
  2907 				; ------------------------------------------------------------
  2908 2A4F			@UnitInit
  2909
  2910 				; -------------------  ASM Block 00000138  -------------------
  2911
  2912 2A4F 8A 48			txa:pha
  2913
  2914 2A51 20 F2 19			jsr @vbxe_detect
  2915 2A54 90 04			bcc ok
  2916
  2917 2A56 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  2918 2A58 D0 05			bne status
  2919
  2920 2A5A 20 48 1A		ok	jsr @vbxe_init
  2921
  2922 2A5D A2 01			ldx #MAIN.GRAPH.grOK
  2923 2A5F 8E E7 9B		status	stx MAIN.GRAPH.GraphResult
  2924
  2925 2A62 68 AA			pla:tax
  2926
  2927 2A64 60				rts
  2928
  2929 				; ------------------------------------------------------------
  2930
  2931 = 0001			VC_XDL	= $01
  2932 = 0002			VC_XCOLOR	= $02
  2933 = 0004			VC_NO_TRANS	= $04
  2934 = 0008			VC_TRANS15	= $08
  2935 = 0000			TCBLACK	= $00
  2936 = 0001			TCRED	= $01
  2937 = 0002			TCGREEN	= $02
  2938 = 0003			TCYELLOW	= $03
  2939 = 0004			TCBLUE	= $04
  2940 = 0005			TCMAGENTA	= $05
  2941 = 0006			TCCYAN	= $06
  2942 = 0007			TCWHITE	= $07
  2943 = 0008			TCBRIGHTBLACK	= $08
  2944 = 0009			TCBRIGHTRED	= $09
  2945 = 000A			TCBRIGHTGREEN	= $0A
  2946 = 000B			TCBRIGHTYELLOW	= $0B
  2947 = 000C			TCBRIGHTBLUE	= $0C
  2948 = 000D			TCBRIGHTMAGENTA	= $0D
  2949 = 000E			TCBRIGHTCYAN	= $0E
  2950 = 000F			TCBRIGHTWHITE	= $0F
  2951 = 0080			TBBLACK	= $80
  2952 = 0090			TBRED	= $90
  2953 = 00A0			TBGREEN	= $A0
  2954 = 00B0			TBYELLOW	= $B0
  2955 = 00C0			TBBLUE	= $C0
  2956 = 00D0			TBMAGENTA	= $D0
  2957 = 00E0			TBCYAN	= $E0
  2958 = 00F0			TBWHITE	= $F0
  2959 = 9C10			adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
  2960 2A65			.var VRAM	= adr.VRAM .word
  2961 = 9C10			VRAM.POSITION	= DATAORIGIN+$0074
  2962 = 9C14			VRAM.SIZE	= DATAORIGIN+$0078
  2963 = 0063			SCROLLBACK_FILL	= $63
  2964 = 1B34			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  2965 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  2966 2A65			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  2967 = 02FD			FILDAT	= $02FD
  2968 = 0054			ROWCRS	= $54
  2969 = 0055			COLCRS	= $55
  2970 = 0068			CRSADR	= $68
  2971
  2972 = 2A65 10 9C		VRAM
  2972 = 2A67 00 04		SCROLLBACK_BUFFER
  2972 				.endl							; UNIT VBXE
  2973
  2974 2A69			.local	START_LEVEL					; PROCEDURE
  2975
  2976 2A69			@exit
  2977 					.ifdef @new
  2978 					lda <@VarData
  2979 					sta :ztmp
  2980 					lda >@VarData
  2981 					ldy #@VarDataSize-1
  2982 					jmp @FreeMem
  2983 					els
  2984 2A69 60				rts						; ret
  2985 					eif
  2986 				.endl
  2987
  2988 2A6A			.local	DEATH_SOUND					; PROCEDURE
  2989
  2990 				; ------------------------------------------------------------
  2991
  2992 = 9C87			A	= DATAORIGIN+$00EB
  2993
  2994 = 9C87			@VarData	= A
  2995 = 0002			@VarDataSize	= 2
  2996
  2997 2A6A			@exit
  2998 					.ifdef @new
  2999 					lda <@VarData
  3000 					sta :ztmp
  3001 					lda >@VarData
  3002 					ldy #@VarDataSize-1
  3003 					jmp @FreeMem
  3004 					els
  3005 2A6A 60				rts						; ret
  3006 					eif
  3007 				.endl
  3008
  3009 2A6B			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3010
  3011 				; ------------------------------------------------------------
  3012
  3013 = 9C89			A	= DATAORIGIN+$00ED
  3014 = 9C8B			B	= DATAORIGIN+$00EF
  3015
  3016 = 9C89			@VarData	= A
  3017 = 0004			@VarDataSize	= 4
  3018
  3019 2A6B			@exit
  3020 					.ifdef @new
  3021 					lda <@VarData
  3022 					sta :ztmp
  3023 					lda >@VarData
  3024 					ldy #@VarDataSize-1
  3025 					jmp @FreeMem
  3026 					els
  3027 2A6B 60				rts						; ret
  3028 					eif
  3029 				.endl
  3030
  3031 2A6C			.local	MOUSERESET					; PROCEDURE
  3032
  3033 2A6C			@exit
  3034 					.ifdef @new
  3035 					lda <@VarData
  3036 					sta :ztmp
  3037 					lda >@VarData
  3038 					ldy #@VarDataSize-1
  3039 					jmp @FreeMem
  3040 					els
  3041 2A6C 60				rts						; ret
  3042 					eif
  3043 				.endl
  3044
  3045 2A6D			.local	MOUSECLICK					; FUNCTION
  3046
  3047 				; optimize OK (arkanoid_vbxe.pas), line = 105
  3048
  3049 2A6D AD 7E 9C			lda MOUS.FIRE
  3050 2A70 8D 8D 9C			sta RESULT
  3051 2A73 A9 00			lda #$00
  3052 2A75 8D 8E 9C			sta RESULT+1
  3053
  3054 				; optimize OK (arkanoid_vbxe.pas), line = 107
  3055
  3056 2A78 A0 01			ldy #1
  3057 2A7A AD 7E 9C			lda MOUS.FIRE
  3058 2A7D F0 01			beq @+
  3059 2A7F 88				dey
  3060 				@
  3061 2A80 98				tya
  3062 2A81 8D 7E 9C			sta MOUS.FIRE
  3063 2A84			@exit
  3064
  3065 				; ------------------------------------------------------------
  3066
  3067 = 9C8D			RESULT	= DATAORIGIN+$00F1
  3068
  3069 2A84 60				rts						; ret
  3070 				.endl
  3071
  3072 2A85			.local	MOUSECOORDS					; PROCEDURE
  3073
  3074 				; optimize OK (arkanoid_vbxe.pas), line = 120
  3075
  3076 2A85 AC 8F 9C 84 84 AC + 	mwy X :bp2
  3077 2A8F A0 00			ldy #$00
  3078 2A91 AD 7A 9C			lda MOUS.X
  3079 2A94 91 84			sta (:bp2),y
  3080 2A96 C8				iny
  3081 2A97 AD 7B 9C			lda MOUS.X+1
  3082 2A9A 91 84			sta (:bp2),y
  3083
  3084 				; optimize OK (arkanoid_vbxe.pas), line = 121
  3085
  3086 2A9C AC 91 9C 84 84 AC + 	mwy Y :bp2
  3087 2AA6 A0 00			ldy #$00
  3088 2AA8 A9 BE			lda #$BE
  3089 2AAA 91 84			sta (:bp2),y
  3090 2AAC C8				iny
  3091 2AAD A9 00			lda #$00
  3092 2AAF 91 84			sta (:bp2),y
  3093
  3094 				; ------------------------------------------------------------
  3095
  3096 = 9C8F			X	= DATAORIGIN+$00F3
  3097 = 9C91			Y	= DATAORIGIN+$00F5
  3098
  3099 = 9C8F			@VarData	= X
  3100 = 0004			@VarDataSize	= 4
  3101
  3102 2AB1			@exit
  3103 					.ifdef @new
  3104 					lda <@VarData
  3105 					sta :ztmp
  3106 					lda >@VarData
  3107 					ldy #@VarDataSize-1
  3108 					jmp @FreeMem
  3109 					els
  3110 2AB1 60				rts						; ret
  3111 					eif
  3112 				.endl
  3113
  3114 2AB2			.local	MOUSE_X_LIMIT					; PROCEDURE
  3115
  3116 				; ------------------------------------------------------------
  3117
  3118 = 9C93			MN	= DATAORIGIN+$00F7
  3119 = 9C95			MX	= DATAORIGIN+$00F9
  3120
  3121 = 9C93			@VarData	= MN
  3122 = 0004			@VarDataSize	= 4
  3123
  3124 2AB2			@exit
  3125 					.ifdef @new
  3126 					lda <@VarData
  3127 					sta :ztmp
  3128 					lda >@VarData
  3129 					ldy #@VarDataSize-1
  3130 					jmp @FreeMem
  3131 					els
  3132 2AB2 60				rts						; ret
  3133 					eif
  3134 				.endl
  3135
  3136 2AB3			.local	MOUSEMOVE					; PROCEDURE
  3137
  3138 				; ------------------------------------------------------------
  3139
  3140 = 9C97			X	= DATAORIGIN+$00FB
  3141 = 9C99			Y	= DATAORIGIN+$00FD
  3142
  3143 = 9C97			@VarData	= X
  3144 = 0004			@VarDataSize	= 4
  3145
  3146 2AB3			@exit
  3147 					.ifdef @new
  3148 					lda <@VarData
  3149 					sta :ztmp
  3150 					lda >@VarData
  3151 					ldy #@VarDataSize-1
  3152 					jmp @FreeMem
  3153 					els
  3154 2AB3 60				rts						; ret
  3155 					eif
  3156 				.endl
  3157
  3158 2AB4			.local	BLITBOX						; PROCEDURE
  3159
  3160 				; -------------------  ASM Block 00000139  -------------------
  3161
  3162 2AB4				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2AB4 A9 80		        lda     #$80
     3 2AB6 A0 5F		        ldy     #FX_MEMS
     4 2AB8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3163 					
  3164 				; optimize OK (service.pas), line = 299
  3165
  3166 2ABA AD 9C A0			lda SRC+2
  3167 2ABD 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3168
  3169 				; optimize OK (service.pas), line = 300
  3170
  3171 2AC0 AD 9B A0			lda SRC+1
  3172 2AC3 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3173
  3174 				; optimize OK (service.pas), line = 301
  3175
  3176 2AC6 AD 9A A0			lda SRC
  3177 2AC9 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3178
  3179 				; optimize OK (service.pas), line = 303
  3180
  3181 2ACC AD A0 A0			lda DST+2
  3182 2ACF 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3183
  3184 				; optimize OK (service.pas), line = 304
  3185
  3186 2AD2 AD 9F A0			lda DST+1
  3187 2AD5 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3188
  3189 				; optimize OK (service.pas), line = 305
  3190
  3191 2AD8 AD 9E A0			lda DST
  3192 2ADB 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3193
  3194 				; optimize OK (service.pas), line = 307
  3195
  3196 2ADE A9 01			lda #$01
  3197 2AE0 8D 05 B1			sta BLT.SRC_STEP_X
  3198
  3199 				; optimize OK (service.pas), line = 308
  3200
  3201 2AE3 AD A2 A0			lda W
  3202 2AE6 38 E9 01			sub #$01
  3203 2AE9 8D 03 B1			sta BLT.SRC_STEP_Y
  3204 2AEC AD A3 A0			lda W+1
  3205 2AEF E9 00			sbc #$00
  3206 2AF1 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3207
  3208 				; optimize OK (service.pas), line = 310
  3209
  3210 2AF4 A9 01			lda #$01
  3211 2AF6 8D 0B B1			sta BLT.DST_STEP_X
  3212
  3213 				; optimize OK (service.pas), line = 311
  3214
  3215 2AF9 AD A2 A0			lda W
  3216 2AFC 38 E9 01			sub #$01
  3217 2AFF 8D 09 B1			sta BLT.DST_STEP_Y
  3218 2B02 AD A3 A0			lda W+1
  3219 2B05 E9 00			sbc #$00
  3220 2B07 8D 0A B1			sta BLT.DST_STEP_Y+1
  3221
  3222 				; optimize OK (service.pas), line = 313
  3223
  3224 2B0A AD A2 A0			lda W
  3225 2B0D 38 E9 01			sub #$01
  3226 2B10 8D 0C B1			sta BLT.BLT_WIDTH
  3227 2B13 AD A3 A0			lda W+1
  3228 2B16 E9 00			sbc #$00
  3229 2B18 8D 0D B1			sta BLT.BLT_WIDTH+1
  3230
  3231 				; optimize OK (service.pas), line = 314
  3232
  3233 2B1B AC A4 A0			ldy H
  3234 2B1E 88				dey
  3235 2B1F 8C 0E B1			sty BLT.BLT_HEIGHT
  3236
  3237 				; optimize OK (service.pas), line = 316
  3238
  3239 2B22 A9 FF			lda #$FF
  3240 2B24 8D 0F B1			sta BLT.BLT_AND_MASK
  3241
  3242 				; optimize OK (service.pas), line = 318
  3243
  3244 2B27 A9 00			lda #$00
  3245 2B29 8D 12 B1			sta BLT.BLT_ZOOM
  3246
  3247 				; optimize OK (service.pas), line = 320
  3248
  3249 2B2C 8D 14 B1			sta BLT.BLT_CONTROL
  3250
  3251 				; -------------------  ASM Block 00000140  -------------------
  3252
  3253 2B2F				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2B2F A9 00		        lda     #$00
     3 2B31 A0 5F		        ldy     #FX_MEMS
     4 2B33 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3254 					
  3255 				; optimize OK (service.pas), line = 326
  3256
  3257 2B35 AD 36 9B			lda BLT
  3258 2B38 8D 75 9C			sta VBXE.RUNBCB.A
  3259 2B3B AD 37 9B			lda BLT+1
  3260 2B3E 8D 76 9C			sta VBXE.RUNBCB.A+1
  3261 2B41 20 F9 29			jsr VBXE.RUNBCB
  3262
  3263 				; ------------------------------------------------------------
  3264
  3265 = A09A			SRC	= DATAORIGIN+$04FE
  3266 = A09E			DST	= DATAORIGIN+$0502
  3267 = A0A2			W	= DATAORIGIN+$0506
  3268 = A0A4			H	= DATAORIGIN+$0508
  3269
  3270 = A09A			@VarData	= SRC
  3271 = 000B			@VarDataSize	= 11
  3272
  3273 2B44			@exit
  3274 					.ifdef @new
  3275 					lda <@VarData
  3276 					sta :ztmp
  3277 					lda >@VarData
  3278 					ldy #@VarDataSize-1
  3279 					jmp @FreeMem
  3280 					els
  3281 2B44 60				rts						; ret
  3282 					eif
  3283 				.endl
  3284
  3285 2B45			.local	BLITZERO					; PROCEDURE
  3286
  3287 				; -------------------  ASM Block 00000141  -------------------
  3288
  3289 2B45				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2B45 A9 80		        lda     #$80
     3 2B47 A0 5F		        ldy     #FX_MEMS
     4 2B49 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3290 					
  3291 				; optimize OK (service.pas), line = 342
  3292
  3293 2B4B AD A7 A0			lda SRC+2
  3294 2B4E 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3295
  3296 				; optimize OK (service.pas), line = 343
  3297
  3298 2B51 AD A6 A0			lda SRC+1
  3299 2B54 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3300
  3301 				; optimize OK (service.pas), line = 344
  3302
  3303 2B57 AD A5 A0			lda SRC
  3304 2B5A 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3305
  3306 				; optimize OK (service.pas), line = 346
  3307
  3308 2B5D AD AB A0			lda DST+2
  3309 2B60 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3310
  3311 				; optimize OK (service.pas), line = 347
  3312
  3313 2B63 AD AA A0			lda DST+1
  3314 2B66 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3315
  3316 				; optimize OK (service.pas), line = 348
  3317
  3318 2B69 AD A9 A0			lda DST
  3319 2B6C 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3320
  3321 				; optimize OK (service.pas), line = 350
  3322
  3323 2B6F A9 01			lda #$01
  3324 2B71 8D 05 B1			sta BLT.SRC_STEP_X
  3325
  3326 				; optimize OK (service.pas), line = 351
  3327
  3328 2B74 8D 03 B1			sta BLT.SRC_STEP_Y
  3329 2B77 A9 00			lda #$00
  3330 2B79 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3331
  3332 				; optimize OK (service.pas), line = 353
  3333
  3334 2B7C A9 01			lda #$01
  3335 2B7E 8D 0B B1			sta BLT.DST_STEP_X
  3336
  3337 				; optimize OK (service.pas), line = 354
  3338
  3339 2B81 8D 09 B1			sta BLT.DST_STEP_Y
  3340 2B84 A9 00			lda #$00
  3341 2B86 8D 0A B1			sta BLT.DST_STEP_Y+1
  3342
  3343 				; optimize OK (service.pas), line = 356
  3344
  3345 2B89 AD AD A0			lda SIZE
  3346 2B8C 38 E9 01			sub #$01
  3347 2B8F 8D 0C B1			sta BLT.BLT_WIDTH
  3348 2B92 AD AE A0			lda SIZE+1
  3349 2B95 E9 00			sbc #$00
  3350 2B97 8D 0D B1			sta BLT.BLT_WIDTH+1
  3351
  3352 				; optimize OK (service.pas), line = 357
  3353
  3354 2B9A A9 00			lda #$00
  3355 2B9C 8D 0E B1			sta BLT.BLT_HEIGHT
  3356
  3357 				; optimize OK (service.pas), line = 359
  3358
  3359 2B9F A9 01			lda #$01
  3360 2BA1 8D 14 B1			sta BLT.BLT_CONTROL
  3361
  3362 				; optimize OK (service.pas), line = 360
  3363
  3364 2BA4 A9 FF			lda #$FF
  3365 2BA6 8D 0F B1			sta BLT.BLT_AND_MASK
  3366
  3367 				; -------------------  ASM Block 00000142  -------------------
  3368
  3369 2BA9				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2BA9 A9 00		        lda     #$00
     3 2BAB A0 5F		        ldy     #FX_MEMS
     4 2BAD 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3370 					
  3371 				; optimize OK (service.pas), line = 367
  3372
  3373 2BAF AD 36 9B			lda BLT
  3374 2BB2 8D 75 9C			sta VBXE.RUNBCB.A
  3375 2BB5 AD 37 9B			lda BLT+1
  3376 2BB8 8D 76 9C			sta VBXE.RUNBCB.A+1
  3377 2BBB 20 F9 29			jsr VBXE.RUNBCB
  3378
  3379 				; ------------------------------------------------------------
  3380
  3381 = A0A5			SRC	= DATAORIGIN+$0509
  3382 = A0A9			DST	= DATAORIGIN+$050D
  3383 = A0AD			SIZE	= DATAORIGIN+$0511
  3384 = A0AF			I	= DATAORIGIN+$0513
  3385
  3386 = A0A5			@VarData	= SRC
  3387 = 000C			@VarDataSize	= 12
  3388
  3389 2BBE			@exit
  3390 					.ifdef @new
  3391 					lda <@VarData
  3392 					sta :ztmp
  3393 					lda >@VarData
  3394 					ldy #@VarDataSize-1
  3395 					jmp @FreeMem
  3396 					els
  3397 2BBE 60				rts						; ret
  3398 					eif
  3399 				.endl
  3400
  3401 2BBF			.local	BLITTMP						; PROCEDURE
  3402
  3403 				; optimize OK (service.pas), line = 379
  3404
  3405 2BBF AD B1 A0			lda DST
  3406 2BC2 8D 7F 9C			sta VBXE_RAM.POSITION
  3407 2BC5 AD B2 A0			lda DST+1
  3408 2BC8 8D 80 9C			sta VBXE_RAM.POSITION+1
  3409 2BCB AD B3 A0			lda DST+2
  3410 2BCE 8D 81 9C			sta VBXE_RAM.POSITION+2
  3411 2BD1 AD B4 A0			lda DST+3
  3412 2BD4 8D 82 9C			sta VBXE_RAM.POSITION+3
  3413
  3414 				; optimize OK (service.pas), line = 381
  3415
  3416 2BD7 AD 90 9B			lda TMP
  3417 2BDA 8D 33 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3418 2BDD AD 91 9B			lda TMP+1
  3419 2BE0 8D 34 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3420 2BE3 AD B5 A0			lda SIZE
  3421 2BE6 8D 35 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3422 2BE9 A9 00			lda #$00
  3423 2BEB 8D 36 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3424 2BEE AD 3C 9B			lda VBXE_RAM
  3425 2BF1 AC 3D 9B			ldy VBXE_RAM+1
  3426 2BF4 20 BC 26			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3427
  3428 				; ------------------------------------------------------------
  3429
  3430 = A0B1			DST	= DATAORIGIN+$0515
  3431 = A0B5			SIZE	= DATAORIGIN+$0519
  3432 = A0B6			X	= DATAORIGIN+$051A
  3433
  3434 = A0B1			@VarData	= DST
  3435 = 0006			@VarDataSize	= 6
  3436
  3437 2BF7			@exit
  3438 					.ifdef @new
  3439 					lda <@VarData
  3440 					sta :ztmp
  3441 					lda >@VarData
  3442 					ldy #@VarDataSize-1
  3443 					jmp @FreeMem
  3444 					els
  3445 2BF7 60				rts						; ret
  3446 					eif
  3447 				.endl
  3448
  3449 2BF8			.local	BLITROW						; PROCEDURE
  3450
  3451 				; -------------------  ASM Block 00000143  -------------------
  3452
  3453 2BF8				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2BF8 A9 80		        lda     #$80
     3 2BFA A0 5F		        ldy     #FX_MEMS
     4 2BFC 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3454 					
  3455 				; optimize OK (service.pas), line = 397
  3456
  3457 2BFE AD B9 A0			lda SRC+2
  3458 2C01 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3459
  3460 				; optimize OK (service.pas), line = 398
  3461
  3462 2C04 AD B8 A0			lda SRC+1
  3463 2C07 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3464
  3465 				; optimize OK (service.pas), line = 399
  3466
  3467 2C0A AD B7 A0			lda SRC
  3468 2C0D 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3469
  3470 				; optimize OK (service.pas), line = 401
  3471
  3472 2C10 AD BD A0			lda DST+2
  3473 2C13 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3474
  3475 				; optimize OK (service.pas), line = 402
  3476
  3477 2C16 AD BC A0			lda DST+1
  3478 2C19 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3479
  3480 				; optimize OK (service.pas), line = 403
  3481
  3482 2C1C AD BB A0			lda DST
  3483 2C1F 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3484
  3485 				; optimize OK (service.pas), line = 405
  3486
  3487 2C22 A9 01			lda #$01
  3488 2C24 8D 05 B1			sta BLT.SRC_STEP_X
  3489
  3490 				; optimize OK (service.pas), line = 406
  3491
  3492 2C27 8D 03 B1			sta BLT.SRC_STEP_Y
  3493 2C2A A9 00			lda #$00
  3494 2C2C 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3495
  3496 				; optimize OK (service.pas), line = 408
  3497
  3498 2C2F A9 01			lda #$01
  3499 2C31 8D 0B B1			sta BLT.DST_STEP_X
  3500
  3501 				; optimize OK (service.pas), line = 409
  3502
  3503 2C34 8D 09 B1			sta BLT.DST_STEP_Y
  3504 2C37 A9 00			lda #$00
  3505 2C39 8D 0A B1			sta BLT.DST_STEP_Y+1
  3506
  3507 				; optimize OK (service.pas), line = 411
  3508
  3509 2C3C AD BF A0			lda SIZE
  3510 2C3F 38 E9 01			sub #$01
  3511 2C42 8D 0C B1			sta BLT.BLT_WIDTH
  3512 2C45 AD C0 A0			lda SIZE+1
  3513 2C48 E9 00			sbc #$00
  3514 2C4A 8D 0D B1			sta BLT.BLT_WIDTH+1
  3515
  3516 				; optimize OK (service.pas), line = 412
  3517
  3518 2C4D A9 00			lda #$00
  3519 2C4F 8D 0E B1			sta BLT.BLT_HEIGHT
  3520
  3521 				; optimize OK (service.pas), line = 414
  3522
  3523 2C52 8D 14 B1			sta BLT.BLT_CONTROL
  3524
  3525 				; optimize OK (service.pas), line = 415
  3526
  3527 2C55 A9 FF			lda #$FF
  3528 2C57 8D 0F B1			sta BLT.BLT_AND_MASK
  3529
  3530 				; -------------------  ASM Block 00000144  -------------------
  3531
  3532 2C5A				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2C5A A9 00		        lda     #$00
     3 2C5C A0 5F		        ldy     #FX_MEMS
     4 2C5E 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3533 					
  3534 				; optimize OK (service.pas), line = 421
  3535
  3536 2C60 AD 36 9B			lda BLT
  3537 2C63 8D 75 9C			sta VBXE.RUNBCB.A
  3538 2C66 AD 37 9B			lda BLT+1
  3539 2C69 8D 76 9C			sta VBXE.RUNBCB.A+1
  3540 2C6C 20 F9 29			jsr VBXE.RUNBCB
  3541
  3542 				; ------------------------------------------------------------
  3543
  3544 = A0B7			SRC	= DATAORIGIN+$051B
  3545 = A0BB			DST	= DATAORIGIN+$051F
  3546 = A0BF			SIZE	= DATAORIGIN+$0523
  3547 = A0C1			X	= DATAORIGIN+$0525
  3548
  3549 = A0B7			@VarData	= SRC
  3550 = 000C			@VarDataSize	= 12
  3551
  3552 2C6F			@exit
  3553 					.ifdef @new
  3554 					lda <@VarData
  3555 					sta :ztmp
  3556 					lda >@VarData
  3557 					ldy #@VarDataSize-1
  3558 					jmp @FreeMem
  3559 					els
  3560 2C6F 60				rts						; ret
  3561 					eif
  3562 				.endl
  3563
  3564 2C70			.local	BLITBYTE					; PROCEDURE
  3565
  3566 				; optimize OK (service.pas), line = 432
  3567
  3568 2C70 AD C3 A0			lda SRC
  3569 2C73 8D 7F 9C			sta VBXE_RAM.POSITION
  3570 2C76 AD C4 A0			lda SRC+1
  3571 2C79 8D 80 9C			sta VBXE_RAM.POSITION+1
  3572 2C7C AD C5 A0			lda SRC+2
  3573 2C7F 8D 81 9C			sta VBXE_RAM.POSITION+2
  3574 2C82 AD C6 A0			lda SRC+3
  3575 2C85 8D 82 9C			sta VBXE_RAM.POSITION+3
  3576
  3577 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 433
  3578
  3579 2C88 AD 3C 9B			lda VBXE_RAM
  3580 2C8B AC 3D 9B			ldy VBXE_RAM+1
  3581 2C8E 20 C4 27			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3582 2C91 AD 46 9C			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3583 2C94 8D CB A0			sta A
  3584
  3585 				; optimize OK (service.pas), line = 435
  3586
  3587 2C97 AD C7 A0			lda DST
  3588 2C9A 8D 7F 9C			sta VBXE_RAM.POSITION
  3589 2C9D AD C8 A0			lda DST+1
  3590 2CA0 8D 80 9C			sta VBXE_RAM.POSITION+1
  3591 2CA3 AD C9 A0			lda DST+2
  3592 2CA6 8D 81 9C			sta VBXE_RAM.POSITION+2
  3593 2CA9 AD CA A0			lda DST+3
  3594 2CAC 8D 82 9C			sta VBXE_RAM.POSITION+3
  3595
  3596 				; optimize OK (service.pas), line = 436
  3597
  3598 2CAF AD CB A0			lda A
  3599 2CB2 8D 55 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3600 2CB5 AD 3C 9B			lda VBXE_RAM
  3601 2CB8 AC 3D 9B			ldy VBXE_RAM+1
  3602 2CBB 20 F7 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3603
  3604 				; ------------------------------------------------------------
  3605
  3606 = A0C3			SRC	= DATAORIGIN+$0527
  3607 = A0C7			DST	= DATAORIGIN+$052B
  3608 = A0CB			A	= DATAORIGIN+$052F
  3609
  3610 = A0C3			@VarData	= SRC
  3611 = 0009			@VarDataSize	= 9
  3612
  3613 2CBE			@exit
  3614 					.ifdef @new
  3615 					lda <@VarData
  3616 					sta :ztmp
  3617 					lda >@VarData
  3618 					ldy #@VarDataSize-1
  3619 					jmp @FreeMem
  3620 					els
  3621 2CBE 60				rts						; ret
  3622 					eif
  3623 				.endl
  3624
  3625 2CBF			.local	PUTBYTE						; PROCEDURE
  3626
  3627 				; optimize OK (service.pas), line = 446
  3628
  3629 2CBF AD CC A0			lda DST
  3630 2CC2 8D 7F 9C			sta VBXE_RAM.POSITION
  3631 2CC5 AD CD A0			lda DST+1
  3632 2CC8 8D 80 9C			sta VBXE_RAM.POSITION+1
  3633 2CCB AD CE A0			lda DST+2
  3634 2CCE 8D 81 9C			sta VBXE_RAM.POSITION+2
  3635 2CD1 AD CF A0			lda DST+3
  3636 2CD4 8D 82 9C			sta VBXE_RAM.POSITION+3
  3637
  3638 				; optimize OK (service.pas), line = 447
  3639
  3640 2CD7 AD D0 A0			lda V
  3641 2CDA 8D 55 9C			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3642 2CDD AD 3C 9B			lda VBXE_RAM
  3643 2CE0 AC 3D 9B			ldy VBXE_RAM+1
  3644 2CE3 20 F7 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3645
  3646 				; ------------------------------------------------------------
  3647
  3648 = A0CC			DST	= DATAORIGIN+$0530
  3649 = A0D0			V	= DATAORIGIN+$0534
  3650
  3651 = A0CC			@VarData	= DST
  3652 = 0005			@VarDataSize	= 5
  3653
  3654 2CE6			@exit
  3655 					.ifdef @new
  3656 					lda <@VarData
  3657 					sta :ztmp
  3658 					lda >@VarData
  3659 					ldy #@VarDataSize-1
  3660 					jmp @FreeMem
  3661 					els
  3662 2CE6 60				rts						; ret
  3663 					eif
  3664 				.endl
  3665
  3666 2CE7			.local	GETBYTE						; FUNCTION
  3667
  3668 				; optimize OK (service.pas), line = 457
  3669
  3670 2CE7 AD D1 A0			lda SRC
  3671 2CEA 8D 7F 9C			sta VBXE_RAM.POSITION
  3672 2CED AD D2 A0			lda SRC+1
  3673 2CF0 8D 80 9C			sta VBXE_RAM.POSITION+1
  3674 2CF3 AD D3 A0			lda SRC+2
  3675 2CF6 8D 81 9C			sta VBXE_RAM.POSITION+2
  3676 2CF9 AD D4 A0			lda SRC+3
  3677 2CFC 8D 82 9C			sta VBXE_RAM.POSITION+3
  3678
  3679 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 458
  3680
  3681 2CFF AD 3C 9B			lda VBXE_RAM
  3682 2D02 AC 3D 9B			ldy VBXE_RAM+1
  3683 2D05 20 C4 27			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3684 2D08 AD 46 9C			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3685 2D0B 8D D5 A0			sta RESULT
  3686 2D0E			@exit
  3687
  3688 				; ------------------------------------------------------------
  3689
  3690 = A0D1			SRC	= DATAORIGIN+$0535
  3691 = A0D5			RESULT	= DATAORIGIN+$0539
  3692
  3693 = A0D1			@VarData	= SRC
  3694 = 0004			@VarDataSize	= 4
  3695
  3696 2D0E 60				rts						; ret
  3697 				.endl
  3698
  3699 2D0F			.local	NOSOUND						; PROCEDURE
  3700
  3701 2D0F			@exit
  3702 					.ifdef @new
  3703 					lda <@VarData
  3704 					sta :ztmp
  3705 					lda >@VarData
  3706 					ldy #@VarDataSize-1
  3707 					jmp @FreeMem
  3708 					els
  3709 2D0F 60				rts						; ret
  3710 					eif
  3711 				.endl
  3712
  3713 2D10			.local	MYDELAY						; PROCEDURE
  3714
  3715 				; ------------------------------------------------------------
  3716
  3717 = A0D6			A	= DATAORIGIN+$053A
  3718
  3719 = A0D6			@VarData	= A
  3720 = 0002			@VarDataSize	= 2
  3721
  3722 2D10			@exit
  3723 					.ifdef @new
  3724 					lda <@VarData
  3725 					sta :ztmp
  3726 					lda >@VarData
  3727 					ldy #@VarDataSize-1
  3728 					jmp @FreeMem
  3729 					els
  3730 2D10 60				rts						; ret
  3731 					eif
  3732 				.endl
  3733
  3734 2D11			.local	MAX						; FUNCTION
  3735
  3736 				; optimize OK (service.pas), line = 583
  3737
  3738 2D11 AD DA A0			lda B
  3739 2D14 CD D8 A0			cmp A
  3740 2D17 AD DB A0			lda B+1
  3741 2D1A ED D9 A0			sbc A+1
  3742 2D1D 50 02			svc
  3743 2D1F 49 80			eor #$80
  3744 2D21 10 0C			jpl l_068E
  3745 2D23 AD D8 A0			lda A
  3746 2D26 8D DC A0			sta RESULT
  3747 2D29 AD D9 A0			lda A+1
  3748 2D2C 4C 38 2D			jmp l_069D
  3749 2D2F			l_068E
  3750
  3751 				; optimize OK (service.pas), line = 584
  3752
  3753 2D2F AD DA A0			lda B
  3754 2D32 8D DC A0			sta RESULT
  3755 2D35 AD DB A0			lda B+1
  3756 2D38			l_069D
  3757 2D38 8D DD A0			sta RESULT+1
  3758 2D3B			@exit
  3759
  3760 				; ------------------------------------------------------------
  3761
  3762 = A0D8			A	= DATAORIGIN+$053C
  3763 = A0DA			B	= DATAORIGIN+$053E
  3764 = A0DC			RESULT	= DATAORIGIN+$0540
  3765
  3766 = A0D8			@VarData	= A
  3767 = 0004			@VarDataSize	= 4
  3768
  3769 2D3B 60				rts						; ret
  3770 				.endl
  3771
  3772 2D3C			.local	MIN						; FUNCTION
  3773
  3774 				; optimize OK (service.pas), line = 590
  3775
  3776 2D3C AD DE A0			lda A
  3777 2D3F CD E0 A0			cmp B
  3778 2D42 AD DF A0			lda A+1
  3779 2D45 ED E1 A0			sbc B+1
  3780 2D48 50 02			svc
  3781 2D4A 49 80			eor #$80
  3782 2D4C 10 0C			jpl l_06B8
  3783 2D4E AD DE A0			lda A
  3784 2D51 8D E2 A0			sta RESULT
  3785 2D54 AD DF A0			lda A+1
  3786 2D57 4C 63 2D			jmp l_06C7
  3787 2D5A			l_06B8
  3788
  3789 				; optimize OK (service.pas), line = 591
  3790
  3791 2D5A AD E0 A0			lda B
  3792 2D5D 8D E2 A0			sta RESULT
  3793 2D60 AD E1 A0			lda B+1
  3794 2D63			l_06C7
  3795 2D63 8D E3 A0			sta RESULT+1
  3796 2D66			@exit
  3797
  3798 				; ------------------------------------------------------------
  3799
  3800 = A0DE			A	= DATAORIGIN+$0542
  3801 = A0E0			B	= DATAORIGIN+$0544
  3802 = A0E2			RESULT	= DATAORIGIN+$0546
  3803
  3804 = A0DE			@VarData	= A
  3805 = 0004			@VarDataSize	= 4
  3806
  3807 2D66 60				rts						; ret
  3808 				.endl
  3809
  3810 2D67			.local	FATAL_ERROR					; PROCEDURE
  3811 2D67 8D E4 A0			sta ERR_TYPE
  3812
  3813 				; optimize OK (service.pas), line = 600
  3814
  3815 2D6A 8D 58 9D			sta STATUS
  3816
  3817 				; ------------------------------------------------------------
  3818
  3819 = A0E4			ERR_TYPE	= DATAORIGIN+$0548
  3820
  3821 = A0E4			@VarData	= ERR_TYPE
  3822 = 0001			@VarDataSize	= 1
  3823
  3824 2D6D			@exit
  3825 					.ifdef @new
  3826 					lda <@VarData
  3827 					sta :ztmp
  3828 					lda >@VarData
  3829 					ldy #@VarDataSize-1
  3830 					jmp @FreeMem
  3831 					els
  3832 2D6D 60				rts						; ret
  3833 					eif
  3834 				.endl
  3835
  3836 2D6E			.local	INITROWARRAY					; PROCEDURE
  3837
  3838 				; optimize OK (service.pas), line = 638
  3839
  3840 2D6E A9 00			lda #$00
  3841 2D70 8D E5 A0			sta Y
  3842
  3843 2D73			l_06E3
  3844 				; --- ForToDoCondition
  3845 2D73 AD E5 A0			lda Y
  3846 2D76 C9 C8			cmp #$C8
  3847 2D78 B0 1B			jcs l_06F1
  3848
  3849 				; optimize OK (service.pas), line = 639
  3850
  3851 2D7A 85 86			sta :eax
  3852 2D7C A9 00			lda #$00
  3853 2D7E 85 87			sta :eax+1
  3854 2D80 20 68 19			jsr @mul320
  3855 2D83 AC E5 A0			ldy Y
  3856 2D86 A5 86			lda :eax
  3857 2D88 99 00 C0			sta adr.ROW,y
  3858 2D8B A5 87			lda :eax+1
  3859 2D8D 99 FB C0			sta adr.ROW+251,y
  3860
  3861 				; --- ForToDoEpilog
  3862 2D90 EE E5 A0			inc Y
  3863 2D93 D0 DE			jne l_06E3
  3864 2D95			l_06F1
  3865
  3866 				; optimize OK (service.pas), line = 641
  3867
  3868 2D95 A9 C8			lda #$C8
  3869 2D97 A8				tay
  3870
  3871 2D98			l_070C
  3872 				; --- ForToDoCondition
  3873 2D98 C0 FB			cpy #$FB
  3874 2D9A B0 0D			jcs l_071A
  3875
  3876 				; optimize OK (service.pas), line = 642
  3877
  3878 2D9C A9 00			lda #$00
  3879 2D9E 99 00 C0			sta adr.ROW,y
  3880 2DA1 A9 FA			lda #$FA
  3881 2DA3 99 FB C0			sta adr.ROW+251,y
  3882
  3883 				; --- ForToDoEpilog
  3884 2DA6 C8				iny
  3885 2DA7 D0 EF			jne l_070C
  3886 2DA9			l_071A
  3887 2DA9 8C E5 A0			sty Y
  3888
  3889 				; ------------------------------------------------------------
  3890
  3891 = A0E5			Y	= DATAORIGIN+$0549
  3892
  3893 = A0E5			@VarData	= Y
  3894 = 0001			@VarDataSize	= 1
  3895
  3896 2DAC			@exit
  3897 					.ifdef @new
  3898 					lda <@VarData
  3899 					sta :ztmp
  3900 					lda >@VarData
  3901 					ldy #@VarDataSize-1
  3902 					jmp @FreeMem
  3903 					els
  3904 2DAC 60				rts						; ret
  3905 					eif
  3906 				.endl
  3907
  3908 2DAD			.local	INITSVGA					; PROCEDURE
  3909
  3910 				; optimize OK (service.pas), line = 667
  3911
  3912 2DAD AD E7 9B			lda GRAPH.GRAPHRESULT
  3913 2DB0 C9 01			cmp #$01
  3914 2DB2 F0 0F			jeq l_073C
  3915
  3916 				; optimize FAIL ('@print', service.pas), line = 668
  3917
  3918 					@printSTRING #CODEORIGIN+$0000
  3918 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  3918 2DB4 A0 10		 LDY> CODEORIGIN+$0000
  3918 2DB6 A9 00		 LDA< CODEORIGIN+$0000
  3918 2DB8 20 A8 19		 JSR @PRINTSTRING
  3919 2DBB 20 92 19			@printEOL
  3920 2DBE A9 00			lda #$00
  3921 2DC0 4C 2B 9B			jmp @halt
  3922 2DC3			l_073C
  3923
  3924 				; optimize OK (service.pas), line = 672
  3925
  3926 2DC3 A9 1F			lda #$1F
  3927 2DC5 20 E5 29			jsr VBXE.SETHORIZONTALRES.@010180000
  3928
  3929 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 673
  3930
  3931 2DC8 20 3D 29			jsr VBXE.COLORMAPOFF
  3932
  3933 				; optimize OK (service.pas), line = 675
  3934
  3935 2DCB A9 07			lda #$07
  3936 2DCD 20 44 2A			jsr VBXE.VBXECONTROL
  3937
  3938 				; optimize OK (service.pas), line = 677
  3939
  3940 2DD0 AD 44 2E			lda XDL
  3941 2DD3 85 8A			sta VBXE.GETXDL.A
  3942 2DD5 AD 45 2E			lda XDL+1
  3943 2DD8 85 8B			sta VBXE.GETXDL.A+1
  3944 2DDA 20 16 2A			jsr VBXE.GETXDL
  3945
  3946 				; optimize OK (service.pas), line = 678
  3947
  3948 2DDD A9 13			lda #$13
  3949 2DDF 8D E8 A0			sta XDL.RPTL_
  3950
  3951 				; optimize OK (service.pas), line = 679
  3952
  3953 2DE2 A9 C6			lda #$C6
  3954 2DE4 8D EB A0			sta XDL.RPTL
  3955
  3956 				; optimize OK (service.pas), line = 680
  3957
  3958 2DE7 AD 44 2E			lda XDL
  3959 2DEA 85 8A			sta VBXE.SETXDL.A
  3960 2DEC AD 45 2E			lda XDL+1
  3961 2DEF 85 8B			sta VBXE.SETXDL.A+1
  3962 2DF1 20 2D 2A			jsr VBXE.SETXDL
  3963
  3964 				; optimize OK (service.pas), line = 682
  3965
  3966 2DF4 A9 00			lda #$00
  3967 2DF6 8D 7F 9C			sta VBXE_RAM.POSITION
  3968 2DF9 A9 50			lda #$50
  3969 2DFB 8D 80 9C			sta VBXE_RAM.POSITION+1
  3970 2DFE A9 00			lda #$00
  3971 2E00 8D 81 9C			sta VBXE_RAM.POSITION+2
  3972 2E03 8D 82 9C			sta VBXE_RAM.POSITION+3
  3973
  3974 				; optimize OK (service.pas), line = 683
  3975
  3976 2E06 8D 83 9C			sta VBXE_RAM.SIZE
  3977 2E09 A9 FA			lda #$FA
  3978 2E0B 8D 84 9C			sta VBXE_RAM.SIZE+1
  3979 2E0E A9 00			lda #$00
  3980 2E10 8D 85 9C			sta VBXE_RAM.SIZE+2
  3981 2E13 8D 86 9C			sta VBXE_RAM.SIZE+3
  3982
  3983 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 684
  3984
  3985 2E16 AD 3C 9B			lda VBXE_RAM
  3986 2E19 AC 3D 9B			ldy VBXE_RAM+1
  3987 2E1C 20 2A 28			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  3988
  3989 				; optimize OK (service.pas), line = 686
  3990
  3991 2E1F A9 00			lda #$00
  3992 2E21 8D 00 D4			sta ATARI.DMACTL
  3993
  3994 				; -------------------  ASM Block 00000145  -------------------
  3995
  3996 2E24				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2E24 A9 80		        lda     #$80
     3 2E26 A0 5F		        ldy     #FX_MEMS
     4 2E28 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3997 					
  3998 				; optimize OK (service.pas), line = 692
  3999
  4000 2E2A AD 36 9B			lda BLT
  4001 2E2D 85 84			sta :bp2
  4002 2E2F AD 37 9B			lda BLT+1
  4003 2E32 85 85			sta :bp2+1
  4004 2E34 A9 00			lda #$00
  4005 2E36 A0 14			ldy #$14
  4006 2E38 91 84 88 10 FB		sta:rpl (:bp2),y-
  4007
  4008 				; -------------------  ASM Block 00000146  -------------------
  4009
  4010 2E3D				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2E3D A9 00		        lda     #$00
     3 2E3F A0 5F		        ldy     #FX_MEMS
     4 2E41 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4011 					
  4012 				; ------------------------------------------------------------
  4013
  4014 = A0E6			adr.XDL	= DATAORIGIN+$054A	; [23] RECORD
  4015 2E43			.var XDL	= adr.XDL .word
  4016 = A0E6			XDL.XDLC_	= DATAORIGIN+$054A
  4017 = A0E8			XDL.RPTL_	= DATAORIGIN+$054C
  4018 = A0E9			XDL.XDLC	= DATAORIGIN+$054D
  4019 = A0EB			XDL.RPTL	= DATAORIGIN+$054F
  4020 = A0EC			adr.XDL.OV_ADR	= DATAORIGIN+$0550	; [3] RECORD
  4021 2E43			.var XDL.OV_ADR	= adr.XDL.OV_ADR .word
  4022 = A0EC			XDL.OV_ADR.BYTE0	= DATAORIGIN+$0550
  4023 = A0ED			XDL.OV_ADR.BYTE1	= DATAORIGIN+$0551
  4024 = A0EE			XDL.OV_ADR.BYTE2	= DATAORIGIN+$0552
  4025 = A0EF			XDL.OV_STEP	= DATAORIGIN+$0553
  4026 = A0F1			XDL.OV_CHBASE	= DATAORIGIN+$0555
  4027 = A0F2			adr.XDL.MP_ADR	= DATAORIGIN+$0556	; [3] RECORD
  4028 2E43			.var XDL.MP_ADR	= adr.XDL.MP_ADR .word
  4029 = A0F2			XDL.MP_ADR.BYTE0	= DATAORIGIN+$0556
  4030 = A0F3			XDL.MP_ADR.BYTE1	= DATAORIGIN+$0557
  4031 = A0F4			XDL.MP_ADR.BYTE2	= DATAORIGIN+$0558
  4032 = A0F5			XDL.MP_STEP	= DATAORIGIN+$0559
  4033 = A0F7			XDL.MP_HSCROL	= DATAORIGIN+$055B
  4034 = A0F8			XDL.MP_VSCROL	= DATAORIGIN+$055C
  4035 = A0F9			XDL.MP_WIDTH	= DATAORIGIN+$055D
  4036 = A0FA			XDL.MP_HEIGHT	= DATAORIGIN+$055E
  4037 = A0FB			XDL.OV_WIDTH	= DATAORIGIN+$055F
  4038 = A0FC			XDL.OV_PRIOR	= DATAORIGIN+$0560
  4039
  4040 = A0E6			@VarData	= XDL.XDLC_
  4041 = 0017			@VarDataSize	= 23
  4042
  4043 2E43			@exit
  4044 					.ifdef @new
  4045 					lda <@VarData
  4046 					sta :ztmp
  4047 					lda >@VarData
  4048 					ldy #@VarDataSize-1
  4049 					jmp @FreeMem
  4050 					els
  4051 2E43 60				rts						; ret
  4052 					eif
  4053 = 2E44 E6 A0		XDL
  4053 = 2E46 EC A0		XDL.OV_ADR
  4053 = 2E48 F2 A0		XDL.MP_ADR
  4053 				.endl
  4054
  4055 2E4A			.local	SHINE_BLOCK					; PROCEDURE
  4056
  4057 				; optimize OK (service.pas), line = 736
  4058
  4059 2E4A AD 78 9D			lda SHINEREC.XB
  4060 2E4D 8D FD A0			sta XB
  4061 2E50 A9 00			lda #$00
  4062 2E52 8D FE A0			sta XB+1
  4063
  4064 				; optimize OK (service.pas), line = 737
  4065
  4066 2E55 AD 79 9D			lda SHINEREC.YB
  4067 2E58 8D FF A0			sta YB
  4068 2E5B A9 00			lda #$00
  4069 2E5D 8D 00 A1			sta YB+1
  4070
  4071 				; optimize OK (service.pas), line = 739
  4072
  4073 2E60 AD FF A0			lda YB
  4074 2E63 0A				asl @
  4075 2E64 0A				asl @
  4076 2E65 0A				asl @
  4077 2E66 0A				asl @
  4078 2E67 18 6D FD A0			add XB
  4079 2E6B 8D 0C A1			sta I
  4080
  4081 				; optimize OK (service.pas), line = 741
  4082
  4083 2E6E A8				tay
  4084 2E6F B9 00 DB			lda adr.WALL,y
  4085 2E72 C9 09			cmp #$09
  4086 2E74 B0 03 4C C7 2F		jcc l_0799
  4087
  4088 				; optimize OK (service.pas), line = 743
  4089
  4090 2E79 AD 7A 9D			lda SHINEREC.FRAME
  4091 2E7C 4A				lsr @
  4092 2E7D 8D 01 A1			sta FRAME
  4093 2E80 A9 00			lda #$00
  4094 2E82 8D 02 A1			sta FRAME+1
  4095
  4096 				; optimize OK (service.pas), line = 744
  4097
  4098 2E85 B9 00 DB			lda adr.WALL,y
  4099 2E88 C9 0A			cmp #$0A
  4100 2E8A F0 0E			jeq l_07B9
  4101 2E8C AD 01 A1			lda FRAME
  4102 2E8F 18 69 05			add #$05
  4103 2E92 8D 01 A1			sta FRAME
  4104 2E95 90 03			scc
  4105 2E97 EE 02 A1			inc FRAME+1
  4106 2E9A			l_07B9
  4107
  4108 				; optimize OK (service.pas), line = 746
  4109
  4110 2E9A AD FD A0			lda XB
  4111 2E9D 85 A0			sta :STACKORIGIN+10
  4112 2E9F AD FE A0			lda XB+1
  4113 2EA2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4114 2EA4 06 A0			asl :STACKORIGIN+10
  4115 2EA6 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4116 2EA8 06 A0			asl :STACKORIGIN+10
  4117 2EAA 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4118 2EAC 06 A0			asl :STACKORIGIN+10
  4119 2EAE 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4120 2EB0 06 A0			asl :STACKORIGIN+10
  4121 2EB2 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4122 2EB4 A9 09			lda #$09
  4123 2EB6 18 65 A0			add :STACKORIGIN+10
  4124 2EB9 8D 03 A1			sta XF
  4125 2EBC A9 00			lda #$00
  4126 2EBE 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4127 2EC0 8D 04 A1			sta XF+1
  4128
  4129 				; optimize OK (service.pas), line = 747
  4130
  4131 2EC3 AD FF A0			lda YB
  4132 2EC6 85 A0			sta :STACKORIGIN+10
  4133 2EC8 AD 00 A1			lda YB+1
  4134 2ECB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4135 2ECD 06 A0			asl :STACKORIGIN+10
  4136 2ECF 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4137 2ED1 06 A0			asl :STACKORIGIN+10
  4138 2ED3 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4139 2ED5 06 A0			asl :STACKORIGIN+10
  4140 2ED7 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4141 2ED9 A9 16			lda #$16
  4142 2EDB 18 65 A0			add :STACKORIGIN+10
  4143 2EDE 8D 05 A1			sta YF
  4144 2EE1 A9 00			lda #$00
  4145 2EE3 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4146 2EE5 8D 06 A1			sta YF+1
  4147
  4148 				; optimize OK (service.pas), line = 748
  4149
  4150 2EE8 AD 01 A1			lda FRAME
  4151 2EEB 85 9F			sta :STACKORIGIN+9
  4152 2EED AD 02 A1			lda FRAME+1
  4153 2EF0 06 9F			asl :STACKORIGIN+9
  4154 2EF2 2A				rol @
  4155 2EF3 06 9F			asl :STACKORIGIN+9
  4156 2EF5 2A				rol @
  4157 2EF6 06 9F			asl :STACKORIGIN+9
  4158 2EF8 2A				rol @
  4159 2EF9 06 9F			asl :STACKORIGIN+9
  4160 2EFB 2A				rol @
  4161 2EFC 06 9F			asl :STACKORIGIN+9
  4162 2EFE 2A				rol @
  4163 2EFF 06 9F			asl :STACKORIGIN+9
  4164 2F01 2A				rol @
  4165 2F02 06 9F			asl :STACKORIGIN+9
  4166 2F04 2A				rol @
  4167 2F05 8D 08 A1			sta FR+1
  4168 2F08 A5 9F			lda :STACKORIGIN+9
  4169 2F0A 8D 07 A1			sta FR
  4170
  4171 				; optimize OK (service.pas), line = 750
  4172
  4173 2F0D A9 00			lda #$00
  4174 2F0F 8D 0B A1			sta Y
  4175
  4176 2F12			l_07E9
  4177 				; --- ForToDoCondition
  4178 2F12 AD 0B A1			lda Y
  4179 2F15 C9 08			cmp #$08
  4180 2F17 90 03 4C C7 2F		jcs l_07F7
  4181
  4182 				; optimize OK (service.pas), line = 752
  4183
  4184 2F1C 85 9F			sta :STACKORIGIN+9
  4185 2F1E A9 00			lda #$00
  4186 2F20 06 9F			asl :STACKORIGIN+9
  4187 2F22 2A				rol @
  4188 2F23 06 9F			asl :STACKORIGIN+9
  4189 2F25 2A				rol @
  4190 2F26 06 9F			asl :STACKORIGIN+9
  4191 2F28 2A				rol @
  4192 2F29 06 9F			asl :STACKORIGIN+9
  4193 2F2B 2A				rol @
  4194 2F2C 8D 0A A1			sta OG+1
  4195 2F2F A5 9F			lda :STACKORIGIN+9
  4196 2F31 8D 09 A1			sta OG
  4197
  4198 				; optimize OK (service.pas), line = 755
  4199
  4200 2F34 AD 03 A1			lda XF
  4201 2F37 85 A0			sta :STACKORIGIN+10
  4202 2F39 A9 50			lda #$50
  4203 2F3B 18 6D 04 A1			add XF+1
  4204 2F3F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4205 2F41 A9 00			lda #$00
  4206 2F43 69 00			adc #$00
  4207 2F45 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4208 2F47 A9 00			lda #$00
  4209 2F49 69 00			adc #$00
  4210 2F4B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4211 2F4D AD 05 A1			lda YF
  4212 2F50 18 6D 0B A1			add Y
  4213 2F54 A8				tay
  4214 2F55 A5 A0			lda :STACKORIGIN+10
  4215 2F57 18 79 00 C0			add adr.ROW,y
  4216 2F5B 8D BB A0			sta BLITROW.DST
  4217 2F5E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4218 2F60 79 FB C0			adc adr.ROW+251,y
  4219 2F63 8D BC A0			sta BLITROW.DST+1
  4220 2F66 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4221 2F68 69 00			adc #$00
  4222 2F6A 8D BD A0			sta BLITROW.DST+2
  4223 2F6D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4224 2F6F 69 00			adc #$00
  4225 2F71 8D BE A0			sta BLITROW.DST+3
  4226 2F74 AD EF 9C			lda SHINEWALL.OFS
  4227 2F77 18 6D 07 A1			add FR
  4228 2F7B 85 A1			sta :STACKORIGIN+11
  4229 2F7D AD F0 9C			lda SHINEWALL.OFS+1
  4230 2F80 6D 08 A1			adc FR+1
  4231 2F83 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4232 2F85 AD F1 9C			lda SHINEWALL.OFS+2
  4233 2F88 69 00			adc #$00
  4234 2F8A 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4235 2F8C AD F2 9C			lda SHINEWALL.OFS+3
  4236 2F8F 69 00			adc #$00
  4237 2F91 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4238 2F93 A5 A1			lda :STACKORIGIN+11
  4239 2F95 18 6D 09 A1			add OG
  4240 2F99 8D B7 A0			sta BLITROW.SRC
  4241 2F9C A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4242 2F9E 6D 0A A1			adc OG+1
  4243 2FA1 8D B8 A0			sta BLITROW.SRC+1
  4244 2FA4 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4245 2FA6 69 00			adc #$00
  4246 2FA8 8D B9 A0			sta BLITROW.SRC+2
  4247 2FAB A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4248 2FAD 69 00			adc #$00
  4249 2FAF 8D BA A0			sta BLITROW.SRC+3
  4250 2FB2 A9 10			lda #$10
  4251 2FB4 8D BF A0			sta BLITROW.SIZE
  4252 2FB7 A9 00			lda #$00
  4253 2FB9 8D C0 A0			sta BLITROW.SIZE+1
  4254 2FBC 20 F8 2B			jsr BLITROW
  4255
  4256 				; --- ForToDoEpilog
  4257 2FBF EE 0B A1			inc Y
  4258 2FC2 F0 03 4C 12 2F		jne l_07E9
  4259 2FC7			l_07F7
  4260 2FC7			l_0799
  4261
  4262 				; optimize FAIL (0, service.pas), line = 759
  4263
  4264 2FC7 EE 7A 9D			inc SHINEREC.FRAME
  4265
  4266 				; optimize OK (service.pas), line = 760
  4267
  4268 2FCA AD 7A 9D			lda SHINEREC.FRAME
  4269 2FCD C9 0A			cmp #$0A
  4270 2FCF D0 05			jne l_083E
  4271 2FD1 A9 00			lda #$00
  4272 2FD3 8D 7C 9D			sta SHINEREC.ACTIVE
  4273 2FD6			l_083E
  4274
  4275 				; ------------------------------------------------------------
  4276
  4277 = A0FD			XB	= DATAORIGIN+$0561
  4278 = A0FF			YB	= DATAORIGIN+$0563
  4279 = A101			FRAME	= DATAORIGIN+$0565
  4280 = A103			XF	= DATAORIGIN+$0567
  4281 = A105			YF	= DATAORIGIN+$0569
  4282 = A107			FR	= DATAORIGIN+$056B
  4283 = A109			OG	= DATAORIGIN+$056D
  4284 = A10B			Y	= DATAORIGIN+$056F
  4285 = A10C			I	= DATAORIGIN+$0570
  4286
  4287 = A0FD			@VarData	= XB
  4288 = 0010			@VarDataSize	= 16
  4289
  4290 2FD6			@exit
  4291 					.ifdef @new
  4292 					lda <@VarData
  4293 					sta :ztmp
  4294 					lda >@VarData
  4295 					ldy #@VarDataSize-1
  4296 					jmp @FreeMem
  4297 					els
  4298 2FD6 60				rts						; ret
  4299 					eif
  4300 				.endl
  4301
  4302 2FD7			.local	UNSHINE_BLOCK					; PROCEDURE
  4303
  4304 				; optimize OK (service.pas), line = 769
  4305
  4306 2FD7 A9 09			lda #$09
  4307 2FD9 8D 7A 9D			sta SHINEREC.FRAME
  4308
  4309 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 770
  4310
  4311 2FDC 20 4A 2E			jsr SHINE_BLOCK
  4312
  4313 2FDF			@exit
  4314 					.ifdef @new
  4315 					lda <@VarData
  4316 					sta :ztmp
  4317 					lda >@VarData
  4318 					ldy #@VarDataSize-1
  4319 					jmp @FreeMem
  4320 					els
  4321 2FDF 60				rts						; ret
  4322 					eif
  4323 				.endl
  4324
  4325 2FE0			.local	SHINE						; PROCEDURE
  4326
  4327 				; optimize OK (service.pas), line = 777
  4328
  4329 2FE0 AD 7C 9D			lda SHINEREC.ACTIVE
  4330 2FE3 F0 03			jeq l_085E
  4331 2FE5 20 D7 2F			jsr UNSHINE_BLOCK
  4332 2FE8			l_085E
  4333
  4334 				; optimize OK (service.pas), line = 779
  4335
  4336 2FE8 AD 0D A1			lda XB
  4337 2FEB 8D 78 9D			sta SHINEREC.XB
  4338
  4339 				; optimize OK (service.pas), line = 780
  4340
  4341 2FEE AD 0E A1			lda YB
  4342 2FF1 8D 79 9D			sta SHINEREC.YB
  4343
  4344 				; optimize OK (service.pas), line = 781
  4345
  4346 2FF4 A9 00			lda #$00
  4347 2FF6 8D 7A 9D			sta SHINEREC.FRAME
  4348
  4349 				; optimize OK (service.pas), line = 782
  4350
  4351 2FF9 A9 01			lda #$01
  4352 2FFB 8D 7C 9D			sta SHINEREC.ACTIVE
  4353
  4354 				; optimize OK (service.pas), line = 783
  4355
  4356 2FFE AD 0E A1			lda YB
  4357 3001 0A				asl @
  4358 3002 0A				asl @
  4359 3003 0A				asl @
  4360 3004 0A				asl @
  4361 3005 18 6D 0D A1			add XB
  4362 3009 A8				tay
  4363 300A B9 00 DB			lda adr.WALL,y
  4364 300D 8D 7B 9D			sta SHINEREC.BLOCK
  4365
  4366 				; ------------------------------------------------------------
  4367
  4368 = A10D			XB	= DATAORIGIN+$0571
  4369 = A10E			YB	= DATAORIGIN+$0572
  4370
  4371 = A10D			@VarData	= XB
  4372 = 0002			@VarDataSize	= 2
  4373
  4374 3010			@exit
  4375 					.ifdef @new
  4376 					lda <@VarData
  4377 					sta :ztmp
  4378 					lda >@VarData
  4379 					ldy #@VarDataSize-1
  4380 					jmp @FreeMem
  4381 					els
  4382 3010 60				rts						; ret
  4383 					eif
  4384 				.endl
  4385
  4386 3011			.local	CHECKSHINE					; PROCEDURE
  4387
  4388 				; optimize OK (service.pas), line = 789
  4389
  4390 3011 AD 7C 9D			lda SHINEREC.ACTIVE
  4391 3014 C9 01			cmp #$01
  4392 3016 D0 03			jne l_089F
  4393 3018 20 4A 2E			jsr SHINE_BLOCK
  4394 301B			l_089F
  4395
  4396 301B			@exit
  4397 					.ifdef @new
  4398 					lda <@VarData
  4399 					sta :ztmp
  4400 					lda >@VarData
  4401 					ldy #@VarDataSize-1
  4402 					jmp @FreeMem
  4403 					els
  4404 301B 60				rts						; ret
  4405 					eif
  4406 				.endl
  4407
  4408 301C			.local	RANDOM_LETTER_DROP				; FUNCTION
  4409
  4410 				; --- RepeatUntilProlog
  4411 301C			l_08A8
  4412
  4413 				; optimize OK (service.pas), line = 797
  4414
  4415 301C A9 64			lda #$64
  4416 301E 20 3B 25			jsr SYSTEM.RANDOM.@010180000
  4417 3021 AD E1 9B			lda SYSTEM.RANDOM.@010180000.RESULT
  4418 3024 8D 11 A1			sta RN
  4419 3027 A9 00			lda #$00
  4420 3029 8D 12 A1			sta RN+1
  4421
  4422 				; optimize OK (service.pas), line = 798
  4423
  4424 302C A9 00			lda #$00
  4425 302E 8D 13 A1			sta SUM
  4426 3031 8D 14 A1			sta SUM+1
  4427
  4428 				; optimize OK (service.pas), line = 799
  4429
  4430 3034 8D 15 A1			sta LETTER
  4431 3037 8D 16 A1			sta LETTER+1
  4432
  4433 				; --- RepeatUntilProlog
  4434 303A			l_08B6
  4435
  4436 				; optimize FAIL (0, service.pas), line = 804
  4437
  4438 303A EE 15 A1			inc LETTER
  4439 303D D0 03			sne
  4440 303F EE 16 A1			inc LETTER+1
  4441
  4442 				; optimize OK (service.pas), line = 805
  4443
  4444 3042 AC 15 A1			ldy LETTER
  4445 3045 B9 AD 10			lda adr.LETTER_DIS,y
  4446 3048 18 6D 13 A1			add SUM
  4447 304C 8D 13 A1			sta SUM
  4448 304F AD 14 A1			lda SUM+1
  4449 3052 69 00			adc #$00
  4450 3054 8D 14 A1			sta SUM+1
  4451
  4452 				; optimize OK (service.pas), line = 808
  4453
  4454 3057 AD 12 A1			lda RN+1
  4455 305A CD 14 A1			cmp SUM+1
  4456 305D D0 06			bne @+
  4457 305F AD 11 A1			lda RN
  4458 3062 CD 13 A1			cmp SUM
  4459 				@
  4460 3065 B0 D3			jcs l_08B6
  4461
  4462 				; optimize OK (service.pas), line = 812
  4463
  4464 3067 AD 15 A1			lda LETTER
  4465 306A 38 E9 01			sub #$01
  4466 306D 85 9F			sta :STACKORIGIN+9
  4467 306F AD 16 A1			lda LETTER+1
  4468 3072 E9 00			sbc #$00
  4469 3074 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4470 3076 A9 00			lda #$00
  4471 3078 E9 00			sbc #$00
  4472 307A 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4473 307C A9 00			lda #$00
  4474 307E E9 00			sbc #$00
  4475 3080 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  4476 3082 AD 8F 9D			lda LETT.LAST
  4477 3085 85 A0			sta :STACKORIGIN+10
  4478 3087 A0 00			ldy #$00
  4479 3089 AD 90 9D			lda LETT.LAST+1
  4480 308C 10 01			spl
  4481 308E 88				dey
  4482 308F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4483 3091 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  4484 3093 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  4485 3095 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  4486 3097 C5 D0			cmp :STACKORIGIN+STACKWIDTH*3+10
  4487 3099 D0 10			bne @+
  4488 309B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  4489 309D C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  4490 309F D0 0A			bne @+
  4491 30A1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4492 30A3 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4493 30A5 D0 04			bne @+
  4494 30A7 A5 9F			lda :STACKORIGIN+9
  4495 30A9 C5 A0			cmp :STACKORIGIN+10
  4496 				@
  4497 30AB D0 03 4C 1C 30		jeq l_08A8
  4498
  4499 				; optimize OK (service.pas), line = 814
  4500
  4501 30B0 AD 15 A1			lda LETTER
  4502 30B3 38 E9 01			sub #$01
  4503 30B6 8D 0F A1			sta RESULT
  4504 30B9 AD 16 A1			lda LETTER+1
  4505 30BC E9 00			sbc #$00
  4506 30BE 8D 10 A1			sta RESULT+1
  4507 30C1			@exit
  4508
  4509 				; ------------------------------------------------------------
  4510
  4511 = A10F			RESULT	= DATAORIGIN+$0573
  4512 = A111			RN	= DATAORIGIN+$0575
  4513 = A113			SUM	= DATAORIGIN+$0577
  4514 = A115			LETTER	= DATAORIGIN+$0579
  4515
  4516 = A111			@VarData	= RN
  4517 = 0006			@VarDataSize	= 6
  4518
  4519 30C1 60				rts						; ret
  4520 				.endl
  4521
  4522 30C2			.local	PUT_LETTER					; PROCEDURE
  4523
  4524 				; optimize OK (service.pas), line = 823
  4525
  4526 30C2 A9 00			lda #$00
  4527 30C4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4528 30C6 AD 83 9D			lda LETT.TYP+1
  4529 30C9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4530 30CB AD 82 9D			lda LETT.TYP
  4531 30CE 0A				asl @
  4532 30CF 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4533 30D1 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4534 30D3 0A				asl @
  4535 30D4 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4536 30D6 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4537 30D8 85 9F			sta :STACKORIGIN+9
  4538 30DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4539 30DC 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4540 30DE A5 9F			lda :STACKORIGIN+9
  4541 30E0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4542 30E2 AD 84 9D			lda LETT.FRAME
  4543 30E5 85 A0			sta :STACKORIGIN+10
  4544 30E7 A9 00			lda #$00
  4545 30E9 06 A0			asl :STACKORIGIN+10
  4546 30EB 2A				rol @
  4547 30EC 06 A0			asl :STACKORIGIN+10
  4548 30EE 2A				rol @
  4549 30EF 06 A0			asl :STACKORIGIN+10
  4550 30F1 2A				rol @
  4551 30F2 06 A0			asl :STACKORIGIN+10
  4552 30F4 2A				rol @
  4553 30F5 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4554 30F8 8D 18 A1			sta FL+1
  4555 30FB A5 A0			lda :STACKORIGIN+10
  4556 30FD 8D 17 A1			sta FL
  4557
  4558 				; optimize OK (service.pas), line = 825
  4559
  4560 3100 A9 00			lda #$00
  4561 3102 8D 1B A1			sta YL
  4562
  4563 3105			l_0906
  4564 				; --- ForToDoCondition
  4565 3105 AD 1B A1			lda YL
  4566 3108 C9 08			cmp #$08
  4567 310A 90 03 4C AB 31		jcs l_0914
  4568
  4569 				; optimize OK (service.pas), line = 827
  4570
  4571 310F 85 9F			sta :STACKORIGIN+9
  4572 3111 A9 00			lda #$00
  4573 3113 06 9F			asl :STACKORIGIN+9
  4574 3115 2A				rol @
  4575 3116 06 9F			asl :STACKORIGIN+9
  4576 3118 2A				rol @
  4577 3119 06 9F			asl :STACKORIGIN+9
  4578 311B 2A				rol @
  4579 311C 06 9F			asl :STACKORIGIN+9
  4580 311E 2A				rol @
  4581 311F 06 9F			asl :STACKORIGIN+9
  4582 3121 2A				rol @
  4583 3122 06 9F			asl :STACKORIGIN+9
  4584 3124 2A				rol @
  4585 3125 06 9F			asl :STACKORIGIN+9
  4586 3127 2A				rol @
  4587 3128 8D 1A A1			sta FW+1
  4588 312B A5 9F			lda :STACKORIGIN+9
  4589 312D 8D 19 A1			sta FW
  4590
  4591 				; optimize OK (service.pas), line = 829
  4592
  4593 3130 AD 81 9D			lda LETT.Y
  4594 3133 18 6D 1B A1			add YL
  4595 3137 A8				tay
  4596 3138 AD 80 9D			lda LETT.X
  4597 313B 18 79 00 C0			add adr.ROW,y
  4598 313F 8D A9 A0			sta BLITZERO.DST
  4599 3142 A9 50			lda #$50
  4600 3144 79 FB C0			adc adr.ROW+251,y
  4601 3147 8D AA A0			sta BLITZERO.DST+1
  4602 314A A9 00			lda #$00
  4603 314C 69 00			adc #$00
  4604 314E 8D AB A0			sta BLITZERO.DST+2
  4605 3151 A9 00			lda #$00
  4606 3153 69 00			adc #$00
  4607 3155 8D AC A0			sta BLITZERO.DST+3
  4608 3158 AD 07 9D			lda LETTERS.OFS
  4609 315B 18 6D 19 A1			add FW
  4610 315F 85 A1			sta :STACKORIGIN+11
  4611 3161 AD 08 9D			lda LETTERS.OFS+1
  4612 3164 6D 1A A1			adc FW+1
  4613 3167 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4614 3169 AD 09 9D			lda LETTERS.OFS+2
  4615 316C 69 00			adc #$00
  4616 316E 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4617 3170 AD 0A 9D			lda LETTERS.OFS+3
  4618 3173 69 00			adc #$00
  4619 3175 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4620 3177 A5 A1			lda :STACKORIGIN+11
  4621 3179 18 6D 17 A1			add FL
  4622 317D 8D A5 A0			sta BLITZERO.SRC
  4623 3180 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4624 3182 6D 18 A1			adc FL+1
  4625 3185 8D A6 A0			sta BLITZERO.SRC+1
  4626 3188 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4627 318A 69 00			adc #$00
  4628 318C 8D A7 A0			sta BLITZERO.SRC+2
  4629 318F A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4630 3191 69 00			adc #$00
  4631 3193 8D A8 A0			sta BLITZERO.SRC+3
  4632 3196 A9 10			lda #$10
  4633 3198 8D AD A0			sta BLITZERO.SIZE
  4634 319B A9 00			lda #$00
  4635 319D 8D AE A0			sta BLITZERO.SIZE+1
  4636 31A0 20 45 2B			jsr BLITZERO
  4637
  4638 				; --- ForToDoEpilog
  4639 31A3 EE 1B A1			inc YL
  4640 31A6 F0 03 4C 05 31		jne l_0906
  4641 31AB			l_0914
  4642
  4643 				; ------------------------------------------------------------
  4644
  4645 = A117			FL	= DATAORIGIN+$057B
  4646 = A119			FW	= DATAORIGIN+$057D
  4647 = A11B			YL	= DATAORIGIN+$057F
  4648
  4649 = A117			@VarData	= FL
  4650 = 0005			@VarDataSize	= 5
  4651
  4652 31AB			@exit
  4653 					.ifdef @new
  4654 					lda <@VarData
  4655 					sta :ztmp
  4656 					lda >@VarData
  4657 					ldy #@VarDataSize-1
  4658 					jmp @FreeMem
  4659 					els
  4660 31AB 60				rts						; ret
  4661 					eif
  4662 				.endl
  4663
  4664 31AC			.local	REMOVE_LETTER					; PROCEDURE
  4665
  4666 				; optimize OK (service.pas), line = 841
  4667
  4668 31AC A9 00			lda #$00
  4669 31AE 8D 1E A1			sta YL
  4670
  4671 31B1			l_0952
  4672 				; --- ForToDoCondition
  4673 31B1 AD 1E A1			lda YL
  4674 31B4 C9 08			cmp #$08
  4675 31B6 B0 6F			jcs l_0960
  4676
  4677 				; optimize OK (service.pas), line = 843
  4678
  4679 31B8 AD 81 9D			lda LETT.Y
  4680 31BB 6D 1E A1			adc YL
  4681 31BE A8				tay
  4682 31BF AD 80 9D			lda LETT.X
  4683 31C2 18 79 00 C0			add adr.ROW,y
  4684 31C6 8D 1C A1			sta AD
  4685 31C9 A9 00			lda #$00
  4686 31CB 79 FB C0			adc adr.ROW+251,y
  4687 31CE 8D 1D A1			sta AD+1
  4688
  4689 				; optimize OK (service.pas), line = 844
  4690
  4691 31D1 C9 FA			cmp #$FA
  4692 31D3 B0 4D			jcs l_0985
  4693
  4694 				; optimize OK (service.pas), line = 847
  4695
  4696 31D5 AD 1C A1			lda AD
  4697 31D8 8D BB A0			sta BLITROW.DST
  4698 31DB A9 50			lda #$50
  4699 31DD 18 6D 1D A1			add AD+1
  4700 31E1 8D BC A0			sta BLITROW.DST+1
  4701 31E4 A9 00			lda #$00
  4702 31E6 69 00			adc #$00
  4703 31E8 8D BD A0			sta BLITROW.DST+2
  4704 31EB A9 00			lda #$00
  4705 31ED 69 00			adc #$00
  4706 31EF 8D BE A0			sta BLITROW.DST+3
  4707 31F2 AD A7 9C			lda PLAYSCREEN.OFS
  4708 31F5 18 6D 1C A1			add AD
  4709 31F9 8D B7 A0			sta BLITROW.SRC
  4710 31FC AD A8 9C			lda PLAYSCREEN.OFS+1
  4711 31FF 6D 1D A1			adc AD+1
  4712 3202 8D B8 A0			sta BLITROW.SRC+1
  4713 3205 AD A9 9C			lda PLAYSCREEN.OFS+2
  4714 3208 69 00			adc #$00
  4715 320A 8D B9 A0			sta BLITROW.SRC+2
  4716 320D AD AA 9C			lda PLAYSCREEN.OFS+3
  4717 3210 69 00			adc #$00
  4718 3212 8D BA A0			sta BLITROW.SRC+3
  4719 3215 A9 10			lda #$10
  4720 3217 8D BF A0			sta BLITROW.SIZE
  4721 321A A9 00			lda #$00
  4722 321C 8D C0 A0			sta BLITROW.SIZE+1
  4723 321F 20 F8 2B			jsr BLITROW
  4724 3222			l_0985
  4725
  4726 				; --- ForToDoEpilog
  4727 3222 EE 1E A1			inc YL
  4728 3225 D0 8A			jne l_0952
  4729 3227			l_0960
  4730
  4731 				; ------------------------------------------------------------
  4732
  4733 = A11C			AD	= DATAORIGIN+$0580
  4734 = A11E			YL	= DATAORIGIN+$0582
  4735
  4736 = A11C			@VarData	= AD
  4737 = 0003			@VarDataSize	= 3
  4738
  4739 3227			@exit
  4740 					.ifdef @new
  4741 					lda <@VarData
  4742 					sta :ztmp
  4743 					lda >@VarData
  4744 					ldy #@VarDataSize-1
  4745 					jmp @FreeMem
  4746 					els
  4747 3227 60				rts						; ret
  4748 					eif
  4749 				.endl
  4750
  4751 3228			.local	DISABLE_LETTER					; PROCEDURE
  4752
  4753 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 855
  4754
  4755 3228 20 AC 31			jsr REMOVE_LETTER
  4756
  4757 				; optimize OK (service.pas), line = 856
  4758
  4759 322B A9 00			lda #$00
  4760 322D 8D 86 9D			sta LETT.ACTIVE
  4761
  4762 3230			@exit
  4763 					.ifdef @new
  4764 					lda <@VarData
  4765 					sta :ztmp
  4766 					lda >@VarData
  4767 					ldy #@VarDataSize-1
  4768 					jmp @FreeMem
  4769 					els
  4770 3230 60				rts						; ret
  4771 					eif
  4772 				.endl
  4773
  4774 3231			.local	START_LETTER					; PROCEDURE
  4775
  4776 				; optimize OK (service.pas), line = 862
  4777
  4778 3231 AD 86 9D			lda LETT.ACTIVE
  4779 3234 F0 03			jeq l_09B4
  4780 3236 20 28 32			jsr DISABLE_LETTER
  4781 3239			l_09B4
  4782
  4783 				; optimize OK (service.pas), line = 864
  4784
  4785 3239 AD 1F A1			lda XL
  4786 323C 8D 80 9D			sta LETT.X
  4787
  4788 				; optimize OK (service.pas), line = 865
  4789
  4790 323F AD 21 A1			lda YL
  4791 3242 8D 81 9D			sta LETT.Y
  4792
  4793 				; optimize OK (service.pas), line = 866
  4794
  4795 3245 AD 23 A1			lda LETTER
  4796 3248 8D 82 9D			sta LETT.TYP
  4797 324B AD 24 A1			lda LETTER+1
  4798 324E 8D 83 9D			sta LETT.TYP+1
  4799
  4800 				; optimize OK (service.pas), line = 867
  4801
  4802 3251 A9 00			lda #$00
  4803 3253 8D 84 9D			sta LETT.FRAME
  4804
  4805 				; optimize OK (service.pas), line = 868
  4806
  4807 3256 8D 85 9D			sta LETT.SUBFRAME
  4808
  4809 				; optimize OK (service.pas), line = 869
  4810
  4811 3259 A9 01			lda #$01
  4812 325B 8D 86 9D			sta LETT.ACTIVE
  4813
  4814 				; ------------------------------------------------------------
  4815
  4816 = A11F			XL	= DATAORIGIN+$0583
  4817 = A121			YL	= DATAORIGIN+$0585
  4818 = A123			LETTER	= DATAORIGIN+$0587
  4819
  4820 = A11F			@VarData	= XL
  4821 = 0006			@VarDataSize	= 6
  4822
  4823 325E			@exit
  4824 					.ifdef @new
  4825 					lda <@VarData
  4826 					sta :ztmp
  4827 					lda >@VarData
  4828 					ldy #@VarDataSize-1
  4829 					jmp @FreeMem
  4830 					els
  4831 325E 60				rts						; ret
  4832 					eif
  4833 				.endl
  4834
  4835 325F			.local	CHECK_LETTER					; PROCEDURE
  4836
  4837 				; optimize OK (service.pas), line = 875
  4838
  4839 325F AD 86 9D			lda LETT.ACTIVE
  4840 3262 D0 03 4C 5E 33		jeq l_09E3
  4841
  4842 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 877
  4843
  4844 3267 20 AC 31			jsr REMOVE_LETTER
  4845
  4846 				; optimize FAIL (0, service.pas), line = 878
  4847
  4848 326A EE 81 9D			inc LETT.Y
  4849
  4850 				; optimize OK (service.pas), line = 879
  4851
  4852 326D AD 81 9D			lda LETT.Y
  4853 3270 C9 C8			cmp #$C8
  4854 3272 90 03			jcc l_09FB
  4855 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 880
  4856 3274 4C 50 33			jmp l_0A06
  4857 3277			l_09FB
  4858
  4859 				; optimize FAIL ('PUT_LETTER', service.pas), line = 882
  4860
  4861 3277 20 C2 30			jsr PUT_LETTER
  4862
  4863 				; optimize FAIL (0, service.pas), line = 883
  4864
  4865 327A EE 85 9D			inc LETT.SUBFRAME
  4866
  4867 				; optimize OK (service.pas), line = 884
  4868
  4869 327D AD 85 9D			lda LETT.SUBFRAME
  4870 3280 C9 05			cmp #$05
  4871 3282 D0 08			jne l_0A1D
  4872
  4873 				; optimize OK (service.pas), line = 886
  4874
  4875 3284 A9 00			lda #$00
  4876 3286 8D 85 9D			sta LETT.SUBFRAME
  4877
  4878 				; optimize FAIL (0, service.pas), line = 887
  4879
  4880 3289 EE 84 9D			inc LETT.FRAME
  4881 328C			l_0A1D
  4882
  4883 				; optimize OK (service.pas), line = 890
  4884
  4885 328C AD 84 9D			lda LETT.FRAME
  4886 328F C9 08			cmp #$08
  4887 3291 D0 05			jne l_0A3A
  4888 3293 A9 00			lda #$00
  4889 3295 8D 84 9D			sta LETT.FRAME
  4890 3298			l_0A3A
  4891
  4892 				; optimize OK (service.pas), line = 892
  4893
  4894 3298 AD 80 9D			lda LETT.X
  4895 329B 18 69 10			add #$10
  4896 329E 85 A0			sta :STACKORIGIN+10
  4897 32A0 A9 00			lda #$00
  4898 32A2 69 00			adc #$00
  4899 32A4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4900 32A6 A9 00			lda #$00
  4901 32A8 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4902 32AA D0 05			bne @+
  4903 32AC AD 1B 9D			lda VAUS.X
  4904 32AF C5 A0			cmp :STACKORIGIN+10
  4905 				@
  4906 32B1 90 03 4C 53 33		jcs l_0A93
  4907 				@
  4908 32B6 AD 1B 9D			lda VAUS.X
  4909 32B9 18 6D 23 9D			add VAUS.WIDTH
  4910 32BD 85 A0			sta :STACKORIGIN+10
  4911 32BF A9 00			lda #$00
  4912 32C1 69 00			adc #$00
  4913 32C3 C9 00			cmp #$00
  4914 32C5 D0 05			bne @+
  4915 32C7 A5 A0			lda :STACKORIGIN+10
  4916 32C9 CD 80 9D			cmp LETT.X
  4917 				@
  4918 32CC B0 03 4C 53 33		jcc l_0A93
  4919 32D1 D0 03 4C 53 33		jeq l_0A93
  4920 				@
  4921 32D6 AD 81 9D			lda LETT.Y
  4922 32D9 18 69 08			add #$08
  4923 32DC 85 A1			sta :STACKORIGIN+11
  4924 32DE A9 00			lda #$00
  4925 32E0 69 00			adc #$00
  4926 32E2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4927 32E4 A9 00			lda #$00
  4928 32E6 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  4929 32E8 D0 05			bne @+
  4930 32EA AD 1C 9D			lda VAUS.Y
  4931 32ED C5 A1			cmp :STACKORIGIN+11
  4932 				@
  4933 32EF B0 62			jcs l_0A93
  4934 				@
  4935 32F1 AD 1C 9D			lda VAUS.Y
  4936 32F4 18 6D 24 9D			add VAUS.HEIGHT
  4937 32F8 85 A0			sta :STACKORIGIN+10
  4938 32FA A9 00			lda #$00
  4939 32FC 69 00			adc #$00
  4940 32FE C9 00			cmp #$00
  4941 3300 D0 05			bne @+
  4942 3302 A5 A0			lda :STACKORIGIN+10
  4943 3304 CD 81 9D			cmp LETT.Y
  4944 				@
  4945 3307 90 4A			jcc l_0A93
  4946 3309 F0 48			jeq l_0A93
  4947 				@
  4948
  4949 				; optimize OK (service.pas), line = 895
  4950
  4951 330B A9 64			lda #$64
  4952 330D 8D 89 9C			sta BALL_BLOCK_SOUND.A
  4953 3310 A9 00			lda #$00
  4954 3312 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
  4955 3315 A9 0A			lda #$0A
  4956 3317 8D 8B 9C			sta BALL_BLOCK_SOUND.B
  4957 331A A9 00			lda #$00
  4958 331C 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
  4959 331F 20 6B 2A			jsr BALL_BLOCK_SOUND
  4960
  4961 				; optimize OK (service.pas), line = 896
  4962
  4963 3322 AC 82 9D			ldy LETT.TYP
  4964 3325 C8				iny
  4965 3326 8C 27 9D			sty VAUS.LETTER
  4966
  4967 				; optimize OK (service.pas), line = 897
  4968
  4969 3329 AD 77 9D			lda CUR_PLAYER
  4970 332C 0A				asl @
  4971 332D 0A				asl @
  4972 332E A8				tay
  4973 332F B9 5C 9D			lda adr.SCORE.PLAYER,y
  4974 3332 18 69 E8			add #$E8
  4975 3335 99 5C 9D			sta adr.SCORE.PLAYER,y
  4976 3338 B9 5D 9D			lda adr.SCORE.PLAYER+1,y
  4977 333B 69 03			adc #$03
  4978 333D 99 5D 9D			sta adr.SCORE.PLAYER+1,y
  4979 3340 B9 5E 9D			lda adr.SCORE.PLAYER+2,y
  4980 3343 69 00			adc #$00
  4981 3345 99 5E 9D			sta adr.SCORE.PLAYER+2,y
  4982 3348 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
  4983 334B 69 00			adc #$00
  4984 334D 99 5F 9D			sta adr.SCORE.PLAYER+3,y
  4985 3350			l_0A06
  4986
  4987 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 898
  4988
  4989 3350 20 28 32			jsr DISABLE_LETTER
  4990 3353			l_0A93
  4991
  4992 				; optimize OK (service.pas), line = 902
  4993
  4994 3353 A9 00			lda #$00
  4995 3355 8D 87 9D			sta LETT.INCOMING
  4996 3358 8D 88 9D			sta LETT.INCOMING+1
  4997 335B 4C 95 33			jmp l_0AB4
  4998 335E			l_09E3
  4999
  5000 				; optimize OK (service.pas), line = 904
  5001
  5002 335E AD 87 9D			lda LETT.INCOMING
  5003 3361 C9 E9			cmp #$E9
  5004 3363 AD 88 9D			lda LETT.INCOMING+1
  5005 3366 E9 03			sbc #$03
  5006 3368 50 02			svc
  5007 336A 49 80			eor #$80
  5008 336C 30 27			jmi l_0AC5
  5009
  5010 				; optimize OK (service.pas), line = 905
  5011
  5012 336E AD 89 9D			lda LETT.NEXTX
  5013 3371 8D 1F A1			sta START_LETTER.XL
  5014 3374 AD 8A 9D			lda LETT.NEXTX+1
  5015 3377 8D 20 A1			sta START_LETTER.XL+1
  5016 337A AD 8B 9D			lda LETT.NEXTY
  5017 337D 8D 21 A1			sta START_LETTER.YL
  5018 3380 AD 8C 9D			lda LETT.NEXTY+1
  5019 3383 8D 22 A1			sta START_LETTER.YL+1
  5020 3386 AD 8D 9D			lda LETT.NEXTTYPE
  5021 3389 8D 23 A1			sta START_LETTER.LETTER
  5022 338C AD 8E 9D			lda LETT.NEXTTYPE+1
  5023 338F 8D 24 A1			sta START_LETTER.LETTER+1
  5024 3392 20 31 32			jsr START_LETTER
  5025 3395			l_0AB4
  5026 3395			l_0AC5
  5027
  5028 3395			@exit
  5029 					.ifdef @new
  5030 					lda <@VarData
  5031 					sta :ztmp
  5032 					lda >@VarData
  5033 					ldy #@VarDataSize-1
  5034 					jmp @FreeMem
  5035 					els
  5036 3395 60				rts						; ret
  5037 					eif
  5038 				.endl
  5039
  5040 3396			.local	SHOWBTMPICTURE					; PROCEDURE
  5041
  5042 				; ------------------------------------------------------------
  5043
  5044 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5045 				; as Pointer
  5046 3396 B5 96			lda :STACKORIGIN,x
  5047 3398 85 84			sta :bp2
  5048 339A B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5049 339C 85 85			sta :bp2+1
  5050 339E A0 07			ldy #$07
  5051 33A0 B1 84 99 25 A1 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5052 33A8 CA				dex
  5053 33A9			@main
  5054
  5055 				; optimize OK (service.pas), line = 915
  5056
  5057 33A9 AD 29 A1			lda BTM.OFS
  5058 33AC 8D 9A A0			sta BLITBOX.SRC
  5059 33AF AD 2A A1			lda BTM.OFS+1
  5060 33B2 8D 9B A0			sta BLITBOX.SRC+1
  5061 33B5 AD 2B A1			lda BTM.OFS+2
  5062 33B8 8D 9C A0			sta BLITBOX.SRC+2
  5063 33BB AD 2C A1			lda BTM.OFS+3
  5064 33BE 8D 9D A0			sta BLITBOX.SRC+3
  5065 33C1 A9 00			lda #$00
  5066 33C3 8D 9E A0			sta BLITBOX.DST
  5067 33C6 A9 50			lda #$50
  5068 33C8 8D 9F A0			sta BLITBOX.DST+1
  5069 33CB A9 00			lda #$00
  5070 33CD 8D A0 A0			sta BLITBOX.DST+2
  5071 33D0 8D A1 A0			sta BLITBOX.DST+3
  5072 33D3 AD 25 A1			lda BTM.WIDTH
  5073 33D6 8D A2 A0			sta BLITBOX.W
  5074 33D9 AD 26 A1			lda BTM.WIDTH+1
  5075 33DC 8D A3 A0			sta BLITBOX.W+1
  5076 33DF AD 27 A1			lda BTM.HEIGHT
  5077 33E2 8D A4 A0			sta BLITBOX.H
  5078 33E5 20 B4 2A			jsr BLITBOX
  5079
  5080 				; ------------------------------------------------------------
  5081
  5082 = A125			adr.BTM	= DATAORIGIN+$0589	; [8] RECORD
  5083 33E8			.var BTM	= adr.BTM .word
  5084 = A125			BTM.WIDTH	= DATAORIGIN+$0589
  5085 = A127			BTM.HEIGHT	= DATAORIGIN+$058B
  5086 = A129			BTM.OFS	= DATAORIGIN+$058D
  5087 = A12D			X	= DATAORIGIN+$0591
  5088 = A12F			Y	= DATAORIGIN+$0593
  5089 = A131			OFST	= DATAORIGIN+$0595
  5090
  5091 = A125			@VarData	= BTM.WIDTH
  5092 = 000E			@VarDataSize	= 14
  5093
  5094 33E8			@exit
  5095 					.ifdef @new
  5096 					lda <@VarData
  5097 					sta :ztmp
  5098 					lda >@VarData
  5099 					ldy #@VarDataSize-1
  5100 					jmp @FreeMem
  5101 					els
  5102 33E8 60				rts						; ret
  5103 					eif
  5104 = 33E9 25 A1		BTM
  5104 				.endl
  5105
  5106 33EB			.local	SETPALETTE					; PROCEDURE
  5107
  5108 				; ------------------------------------------------------------
  5109
  5110 = A133			BTM	= DATAORIGIN+$0597
  5111 = 9B9C			BTM.WIDTH	= DATAORIGIN+$0000
  5112 = 9B9E			BTM.HEIGHT	= DATAORIGIN+$0002
  5113 = 9BA0			BTM.OFS	= DATAORIGIN+$0004
  5114
  5115 = A133			@VarData	= BTM
  5116 = 0002			@VarDataSize	= 2
  5117
  5118 33EB			@exit
  5119 					.ifdef @new
  5120 					lda <@VarData
  5121 					sta :ztmp
  5122 					lda >@VarData
  5123 					ldy #@VarDataSize-1
  5124 					jmp @FreeMem
  5125 					els
  5126 33EB 60				rts						; ret
  5127 					eif
  5128 				.endl
  5129
  5130 33EC			.local	PLACE_BALL					; PROCEDURE
  5131
  5132 				; optimize OK (service.pas), line = 1010
  5133
  5134 33EC A9 00			lda #$00
  5135 33EE 8D 3B A1			sta YP
  5136
  5137 33F1			l_0AEE
  5138 				; --- ForToDoCondition
  5139 33F1 AD 3B A1			lda YP
  5140 33F4 C9 05			cmp #$05
  5141 33F6 90 03 4C B2 34		jcs l_0AFC
  5142
  5143 				; optimize OK (service.pas), line = 1012
  5144
  5145 33FB AC 37 A1 84 84 AC + 	mwy BALL :bp2
  5146 3405 A0 00			ldy #BALL.X-DATAORIGIN
  5147 3407 B1 84			lda (:bp2),y
  5148 3409 38 E9 03			sub #$03
  5149 340C 85 9F			sta :STACKORIGIN+9
  5150 340E C8				iny
  5151 340F B1 84			lda (:bp2),y
  5152 3411 E9 00			sbc #$00
  5153 3413 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5154 3415 AD 3B A1			lda YP
  5155 3418 38 E9 03			sub #$03
  5156 341B 85 A0			sta :STACKORIGIN+10
  5157 341D A9 00			lda #$00
  5158 341F E9 00			sbc #$00
  5159 3421 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5160 3423 A0 02			ldy #BALL.Y-DATAORIGIN
  5161 3425 A5 A0			lda :STACKORIGIN+10
  5162 3427 18 71 84			add (:bp2),y
  5163 342A 85 A0			sta :STACKORIGIN+10
  5164 342C C8				iny
  5165 342D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5166 342F 71 84			adc (:bp2),y
  5167 3431 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5168 3433 A4 A0			ldy :STACKORIGIN+10
  5169 3435 A5 9F			lda :STACKORIGIN+9
  5170 3437 18 79 00 C0			add adr.ROW,y
  5171 343B 8D 3C A1			sta ADR
  5172 343E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5173 3440 79 FB C0			adc adr.ROW+251,y
  5174 3443 8D 3D A1			sta ADR+1
  5175
  5176 				; optimize OK (service.pas), line = 1015
  5177
  5178 3446 AD 3C A1			lda ADR
  5179 3449 8D A9 A0			sta BLITZERO.DST
  5180 344C A9 50			lda #$50
  5181 344E 18 6D 3D A1			add ADR+1
  5182 3452 8D AA A0			sta BLITZERO.DST+1
  5183 3455 A9 00			lda #$00
  5184 3457 69 00			adc #$00
  5185 3459 8D AB A0			sta BLITZERO.DST+2
  5186 345C A9 00			lda #$00
  5187 345E 69 00			adc #$00
  5188 3460 8D AC A0			sta BLITZERO.DST+3
  5189 3463 A9 00			lda #$00
  5190 3465 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5191 3467 AD 3B A1			lda YP
  5192 346A 0A				asl @
  5193 346B 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5194 346D 0A				asl @
  5195 346E 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5196 3470 18 6D 3B A1			add YP
  5197 3474 85 A2			sta :STACKORIGIN+12
  5198 3476 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  5199 3478 69 00			adc #$00
  5200 347A 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5201 347C AD 9F 9C			lda BALLDATA.OFS
  5202 347F 18 65 A2			add :STACKORIGIN+12
  5203 3482 8D A5 A0			sta BLITZERO.SRC
  5204 3485 AD A0 9C			lda BALLDATA.OFS+1
  5205 3488 65 B2			adc :STACKORIGIN+STACKWIDTH+12
  5206 348A 8D A6 A0			sta BLITZERO.SRC+1
  5207 348D AD A1 9C			lda BALLDATA.OFS+2
  5208 3490 69 00			adc #$00
  5209 3492 8D A7 A0			sta BLITZERO.SRC+2
  5210 3495 AD A2 9C			lda BALLDATA.OFS+3
  5211 3498 69 00			adc #$00
  5212 349A 8D A8 A0			sta BLITZERO.SRC+3
  5213 349D A9 05			lda #$05
  5214 349F 8D AD A0			sta BLITZERO.SIZE
  5215 34A2 A9 00			lda #$00
  5216 34A4 8D AE A0			sta BLITZERO.SIZE+1
  5217 34A7 20 45 2B			jsr BLITZERO
  5218
  5219 				; --- ForToDoEpilog
  5220 34AA EE 3B A1			inc YP
  5221 34AD F0 03 4C F1 33		jne l_0AEE
  5222 34B2			l_0AFC
  5223
  5224 				; ------------------------------------------------------------
  5225
  5226 = A137			BALL	= DATAORIGIN+$059B
  5227 = 9B9C			BALL.X	= DATAORIGIN+$0000
  5228 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  5229 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  5230 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  5231 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  5232 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  5233 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  5234 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  5235 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  5236 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  5237 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  5238 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  5239 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  5240 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  5241 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  5242 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  5243 = A13B			YP	= DATAORIGIN+$059F
  5244 = A13C			ADR	= DATAORIGIN+$05A0
  5245
  5246 = A137			@VarData	= BALL
  5247 = 0005			@VarDataSize	= 5
  5248
  5249 34B2			@exit
  5250 					.ifdef @new
  5251 					lda <@VarData
  5252 					sta :ztmp
  5253 					lda >@VarData
  5254 					ldy #@VarDataSize-1
  5255 					jmp @FreeMem
  5256 					els
  5257 34B2 60				rts						; ret
  5258 					eif
  5259 				.endl
  5260
  5261 34B3			.local	REMOVE_BALL					; PROCEDURE
  5262
  5263 				; optimize OK (service.pas), line = 1029
  5264
  5265 34B3 A9 00			lda #$00
  5266 34B5 8D 42 A1			sta YP
  5267
  5268 34B8			l_0B3B
  5269 				; --- ForToDoCondition
  5270 34B8 AD 42 A1			lda YP
  5271 34BB C9 05			cmp #$05
  5272 34BD 90 03 4C 6E 35		jcs l_0B49
  5273
  5274 				; optimize OK (service.pas), line = 1031
  5275
  5276 34C2 AC 3E A1 84 84 AC + 	mwy BALL :bp2
  5277 34CC A0 08			ldy #BALL.OLDX-DATAORIGIN
  5278 34CE B1 84			lda (:bp2),y
  5279 34D0 38 E9 03			sub #$03
  5280 34D3 85 9F			sta :STACKORIGIN+9
  5281 34D5 C8				iny
  5282 34D6 B1 84			lda (:bp2),y
  5283 34D8 E9 00			sbc #$00
  5284 34DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5285 34DC AD 42 A1			lda YP
  5286 34DF 38 E9 03			sub #$03
  5287 34E2 85 A0			sta :STACKORIGIN+10
  5288 34E4 A9 00			lda #$00
  5289 34E6 E9 00			sbc #$00
  5290 34E8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5291 34EA A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5292 34EC A5 A0			lda :STACKORIGIN+10
  5293 34EE 18 71 84			add (:bp2),y
  5294 34F1 85 A0			sta :STACKORIGIN+10
  5295 34F3 C8				iny
  5296 34F4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5297 34F6 71 84			adc (:bp2),y
  5298 34F8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5299 34FA A4 A0			ldy :STACKORIGIN+10
  5300 34FC A5 9F			lda :STACKORIGIN+9
  5301 34FE 18 79 00 C0			add adr.ROW,y
  5302 3502 8D 43 A1			sta TEMP
  5303 3505 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5304 3507 79 FB C0			adc adr.ROW+251,y
  5305 350A 8D 44 A1			sta TEMP+1
  5306
  5307 				; optimize OK (service.pas), line = 1033
  5308
  5309 350D 0D 43 A1			ora TEMP
  5310 3510 F0 54			jeq l_0B7F
  5311 3512 AD 44 A1			lda TEMP+1
  5312 3515 C9 FA			cmp #$FA
  5313 3517 B0 4D			jcs l_0B7F
  5314
  5315 				; optimize OK (service.pas), line = 1036
  5316
  5317 3519 AD 43 A1			lda TEMP
  5318 351C 8D BB A0			sta BLITROW.DST
  5319 351F A9 50			lda #$50
  5320 3521 18 6D 44 A1			add TEMP+1
  5321 3525 8D BC A0			sta BLITROW.DST+1
  5322 3528 A9 00			lda #$00
  5323 352A 69 00			adc #$00
  5324 352C 8D BD A0			sta BLITROW.DST+2
  5325 352F A9 00			lda #$00
  5326 3531 69 00			adc #$00
  5327 3533 8D BE A0			sta BLITROW.DST+3
  5328 3536 AD A7 9C			lda PLAYSCREEN.OFS
  5329 3539 18 6D 43 A1			add TEMP
  5330 353D 8D B7 A0			sta BLITROW.SRC
  5331 3540 AD A8 9C			lda PLAYSCREEN.OFS+1
  5332 3543 6D 44 A1			adc TEMP+1
  5333 3546 8D B8 A0			sta BLITROW.SRC+1
  5334 3549 AD A9 9C			lda PLAYSCREEN.OFS+2
  5335 354C 69 00			adc #$00
  5336 354E 8D B9 A0			sta BLITROW.SRC+2
  5337 3551 AD AA 9C			lda PLAYSCREEN.OFS+3
  5338 3554 69 00			adc #$00
  5339 3556 8D BA A0			sta BLITROW.SRC+3
  5340 3559 A9 05			lda #$05
  5341 355B 8D BF A0			sta BLITROW.SIZE
  5342 355E A9 00			lda #$00
  5343 3560 8D C0 A0			sta BLITROW.SIZE+1
  5344 3563 20 F8 2B			jsr BLITROW
  5345 3566			l_0B7F
  5346
  5347 				; --- ForToDoEpilog
  5348 3566 EE 42 A1			inc YP
  5349 3569 F0 03 4C B8 34		jne l_0B3B
  5350 356E			l_0B49
  5351
  5352 				; ------------------------------------------------------------
  5353
  5354 = A13E			BALL	= DATAORIGIN+$05A2
  5355 = 9B9C			BALL.X	= DATAORIGIN+$0000
  5356 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  5357 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  5358 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  5359 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  5360 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  5361 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  5362 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  5363 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  5364 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  5365 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  5366 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  5367 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  5368 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  5369 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  5370 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  5371 = A142			YP	= DATAORIGIN+$05A6
  5372 = A143			TEMP	= DATAORIGIN+$05A7
  5373
  5374 = A13E			@VarData	= BALL
  5375 = 0005			@VarDataSize	= 5
  5376
  5377 356E			@exit
  5378 					.ifdef @new
  5379 					lda <@VarData
  5380 					sta :ztmp
  5381 					lda >@VarData
  5382 					ldy #@VarDataSize-1
  5383 					jmp @FreeMem
  5384 					els
  5385 356E 60				rts						; ret
  5386 					eif
  5387 				.endl
  5388
  5389 356F			.local	WAIT_VBL					; PROCEDURE
  5390
  5391 356F			@exit
  5392 					.ifdef @new
  5393 					lda <@VarData
  5394 					sta :ztmp
  5395 					lda >@VarData
  5396 					ldy #@VarDataSize-1
  5397 					jmp @FreeMem
  5398 					els
  5399 356F 60				rts						; ret
  5400 					eif
  5401 				.endl
  5402
  5403 3570			.local	SET_BALL					; PROCEDURE
  5404
  5405 				; optimize OK (service.pas), line = 1083
  5406
  5407 3570 AC 45 A1 84 84 AC + 	mwy BALL :bp2
  5408 357A A0 08			ldy #BALL.OLDX-DATAORIGIN
  5409 357C B1 84			lda (:bp2),y
  5410 357E 85 9F			sta :STACKORIGIN+9
  5411 3580 C8				iny
  5412 3581 B1 84			lda (:bp2),y
  5413 3583 A0 01			ldy #1
  5414 3585 C9 FF			cmp #$FF
  5415 3587 D0 04			bne @+
  5416 3589 A5 9F			lda :STACKORIGIN+9
  5417 358B C9 FF			cmp #$FF
  5418 				@
  5419 358D D0 01			bne @+
  5420 358F 88				dey
  5421 				@
  5422 3590 84 9F			sty :STACKORIGIN+9
  5423 3592 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5424 3594 B1 84			lda (:bp2),y
  5425 3596 85 A0			sta :STACKORIGIN+10
  5426 3598 C8				iny
  5427 3599 B1 84			lda (:bp2),y
  5428 359B A0 01			ldy #1
  5429 359D C9 FF			cmp #$FF
  5430 359F D0 04			bne @+
  5431 35A1 A5 A0			lda :STACKORIGIN+10
  5432 35A3 C9 FF			cmp #$FF
  5433 				@
  5434 35A5 D0 01			bne @+
  5435 35A7 88				dey
  5436 				@
  5437 35A8 98				tya
  5438 35A9 25 9F			and :STACKORIGIN+9
  5439 35AB 85 9F			sta :STACKORIGIN+9
  5440 35AD A0 08			ldy #BALL.OLDX-DATAORIGIN
  5441 35AF B1 84			lda (:bp2),y
  5442 35B1 85 A0			sta :STACKORIGIN+10
  5443 35B3 C8				iny
  5444 35B4 B1 84			lda (:bp2),y
  5445 35B6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5446 35B8 A0 00			ldy #BALL.X-DATAORIGIN
  5447 35BA B1 84			lda (:bp2),y
  5448 35BC 85 A1			sta :STACKORIGIN+11
  5449 35BE C8				iny
  5450 35BF B1 84			lda (:bp2),y
  5451 35C1 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5452 35C3 A0 01			ldy #1
  5453 35C5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5454 35C7 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5455 35C9 D0 04			bne @+
  5456 35CB A5 A0			lda :STACKORIGIN+10
  5457 35CD C5 A1			cmp :STACKORIGIN+11
  5458 				@
  5459 35CF D0 01			bne @+
  5460 35D1 88				dey
  5461 				@
  5462 35D2 84 A0			sty :STACKORIGIN+10
  5463 35D4 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5464 35D6 B1 84			lda (:bp2),y
  5465 35D8 85 A1			sta :STACKORIGIN+11
  5466 35DA C8				iny
  5467 35DB B1 84			lda (:bp2),y
  5468 35DD 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5469 35DF A0 02			ldy #BALL.Y-DATAORIGIN
  5470 35E1 B1 84			lda (:bp2),y
  5471 35E3 85 A2			sta :STACKORIGIN+12
  5472 35E5 C8				iny
  5473 35E6 B1 84			lda (:bp2),y
  5474 35E8 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5475 35EA A0 01			ldy #1
  5476 35EC A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  5477 35EE C5 B2			cmp :STACKORIGIN+STACKWIDTH+12
  5478 35F0 D0 04			bne @+
  5479 35F2 A5 A1			lda :STACKORIGIN+11
  5480 35F4 C5 A2			cmp :STACKORIGIN+12
  5481 				@
  5482 35F6 D0 01			bne @+
  5483 35F8 88				dey
  5484 				@
  5485 35F9 98				tya
  5486 35FA 05 A0			ora :STACKORIGIN+10
  5487 35FC 25 9F			and :STACKORIGIN+9
  5488 35FE F0 0F			jeq l_0BD1
  5489
  5490 				; optimize OK (service.pas), line = 1085
  5491
  5492 3600 AD 45 A1			lda BALL
  5493 3603 8D 3E A1			sta REMOVE_BALL.BALL
  5494 3606 AD 46 A1			lda BALL+1
  5495 3609 8D 3F A1			sta REMOVE_BALL.BALL+1
  5496 360C 20 B3 34			jsr REMOVE_BALL
  5497 360F			l_0BD1
  5498
  5499 				; optimize OK (service.pas), line = 1087
  5500
  5501 360F AD 45 A1			lda BALL
  5502 3612 8D 37 A1			sta PLACE_BALL.BALL
  5503 3615 AD 46 A1			lda BALL+1
  5504 3618 8D 38 A1			sta PLACE_BALL.BALL+1
  5505 361B 20 EC 33			jsr PLACE_BALL
  5506
  5507 				; optimize OK (service.pas), line = 1089
  5508
  5509 361E AC 45 A1 84 84 AC + 	mwy BALL :bp2
  5510 3628 A0 00			ldy #BALL.X-DATAORIGIN
  5511 362A B1 84			lda (:bp2),y
  5512 362C 85 9F			sta :STACKORIGIN+9
  5513 362E C8				iny
  5514 362F B1 84			lda (:bp2),y
  5515 3631 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5516 3633 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5517 3635 A5 9F			lda :STACKORIGIN+9
  5518 3637 91 84			sta (:bp2),y
  5519 3639 C8				iny
  5520 363A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5521 363C 91 84			sta (:bp2),y
  5522
  5523 				; optimize OK (service.pas), line = 1090
  5524
  5525 363E A0 02			ldy #BALL.Y-DATAORIGIN
  5526 3640 B1 84			lda (:bp2),y
  5527 3642 85 9F			sta :STACKORIGIN+9
  5528 3644 C8				iny
  5529 3645 B1 84			lda (:bp2),y
  5530 3647 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5531 3649 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5532 364B A5 9F			lda :STACKORIGIN+9
  5533 364D 91 84			sta (:bp2),y
  5534 364F C8				iny
  5535 3650 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5536 3652 91 84			sta (:bp2),y
  5537
  5538 				; ------------------------------------------------------------
  5539
  5540 = A145			BALL	= DATAORIGIN+$05A9
  5541 = 9B9C			BALL.X	= DATAORIGIN+$0000
  5542 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  5543 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  5544 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  5545 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  5546 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  5547 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  5548 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  5549 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  5550 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  5551 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  5552 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  5553 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  5554 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  5555 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  5556 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  5557
  5558 = A145			@VarData	= BALL
  5559 = 0002			@VarDataSize	= 2
  5560
  5561 3654			@exit
  5562 					.ifdef @new
  5563 					lda <@VarData
  5564 					sta :ztmp
  5565 					lda >@VarData
  5566 					ldy #@VarDataSize-1
  5567 					jmp @FreeMem
  5568 					els
  5569 3654 60				rts						; ret
  5570 					eif
  5571 				.endl
  5572
  5573 3655			.local	SET_BALL_SPEED					; PROCEDURE
  5574
  5575 				; optimize OK (service.pas), line = 1100
  5576
  5577 3655 AC 49 A1 84 84 AC + 	mwy BALL :bp2
  5578 365F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5579 3661 B1 84			lda (:bp2),y
  5580 3663 8D 4F A1			sta SX
  5581 3666 C8				iny
  5582 3667 B1 84			lda (:bp2),y
  5583 3669 8D 50 A1			sta SX+1
  5584
  5585 				; optimize OK (service.pas), line = 1101
  5586
  5587 366C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5588 366E B1 84			lda (:bp2),y
  5589 3670 8D 51 A1			sta SY
  5590 3673 C8				iny
  5591 3674 B1 84			lda (:bp2),y
  5592 3676 8D 52 A1			sta SY+1
  5593
  5594 				; optimize FAIL (1, service.pas), line = 1103
  5595
  5596 3679 E8				inx
  5597 367A AD 4D A1 95 96		mva SPEED :STACKORIGIN,x
  5598 367F AD 4E A1 95 A6		mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
  5599 3684 AD 4F A1			lda SX
  5600 3687 85 8E			sta :ecx
  5601 3689 85 92			sta :ztmp8
  5602 368B AD 50 A1			lda SX+1
  5603 368E 85 8F			sta :ecx+1
  5604 3690 85 93			sta :ztmp9
  5605 3692 AD 4F A1			lda SX
  5606 3695 85 86			sta :eax
  5607 3697 85 94			sta :ztmp10
  5608 3699 AD 50 A1			lda SX+1
  5609 369C 85 87			sta :eax+1
  5610 369E 85 95			sta :ztmp11
  5611 					.ifdef fmulinit
  5612 					fmulu_16
  5613 					els
  5614 36A0 20 3A 13			imulCX
  5615 					eif
  5616 36A3 A5 95			lda :ztmp11
  5617 36A5 10 0D			bpl @+
  5618 36A7 A5 88			lda :eax+2
  5619 36A9 38 E5 92			sub :ztmp8
  5620 36AC 85 88			sta :eax+2
  5621 36AE A5 89			lda :eax+3
  5622 36B0 E5 93			sbc :ztmp9
  5623 36B2 85 89			sta :eax+3
  5624 				@
  5625 36B4 A5 93			lda :ztmp9
  5626 36B6 10 0D			bpl @+
  5627 36B8 A5 88			lda :eax+2
  5628 36BA 38 E5 94			sub :ztmp10
  5629 36BD 85 88			sta :eax+2
  5630 36BF A5 89			lda :eax+3
  5631 36C1 E5 95			sbc :ztmp11
  5632 36C3 85 89			sta :eax+3
  5633 				@
  5634 36C5 A5 86			lda :eax
  5635 36C7 85 9F			sta :STACKORIGIN+9
  5636 36C9 A5 87			lda :eax+1
  5637 36CB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5638 36CD A5 88			lda :eax+2
  5639 36CF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5640 36D1 A5 89			lda :eax+3
  5641 36D3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5642 36D5 AD 51 A1			lda SY
  5643 36D8 85 8E			sta :ecx
  5644 36DA 85 92			sta :ztmp8
  5645 36DC AD 52 A1			lda SY+1
  5646 36DF 85 8F			sta :ecx+1
  5647 36E1 85 93			sta :ztmp9
  5648 36E3 AD 51 A1			lda SY
  5649 36E6 85 86			sta :eax
  5650 36E8 85 94			sta :ztmp10
  5651 36EA AD 52 A1			lda SY+1
  5652 36ED 85 87			sta :eax+1
  5653 36EF 85 95			sta :ztmp11
  5654 					.ifdef fmulinit
  5655 					fmulu_16
  5656 					els
  5657 36F1 20 3A 13			imulCX
  5658 					eif
  5659 36F4 A5 95			lda :ztmp11
  5660 36F6 10 0D			bpl @+
  5661 36F8 A5 88			lda :eax+2
  5662 36FA 38 E5 92			sub :ztmp8
  5663 36FD 85 88			sta :eax+2
  5664 36FF A5 89			lda :eax+3
  5665 3701 E5 93			sbc :ztmp9
  5666 3703 85 89			sta :eax+3
  5667 				@
  5668 3705 A5 93			lda :ztmp9
  5669 3707 10 0D			bpl @+
  5670 3709 A5 88			lda :eax+2
  5671 370B 38 E5 94			sub :ztmp10
  5672 370E 85 88			sta :eax+2
  5673 3710 A5 89			lda :eax+3
  5674 3712 E5 95			sbc :ztmp11
  5675 3714 85 89			sta :eax+3
  5676 				@
  5677 3716 A5 9F			lda :STACKORIGIN+9
  5678 3718 18 65 86			add :eax
  5679 371B 8D A7 9B			sta SYSTEM.SQRT.@010185000.X
  5680 371E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5681 3720 65 87			adc :eax+1
  5682 3722 8D A8 9B			sta SYSTEM.SQRT.@010185000.X+1
  5683 3725 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5684 3727 65 88			adc :eax+2
  5685 3729 8D A9 9B			sta SYSTEM.SQRT.@010185000.X+2
  5686 372C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5687 372E 65 89			adc :eax+3
  5688 3730 8D AA 9B			sta SYSTEM.SQRT.@010185000.X+3
  5689 3733 20 D7 1C			jsr SYSTEM.SQRT.@010185000
  5690 3736 E8				inx
  5691 3737 AD AB 9B 95 96		mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
  5692 373C AD AC 9B 95 A6		mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5693 3741 AD AD 9B 95 B6		mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5694 3746 AD AE 9B 95 C6		mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5695 374B 20 4D 11			jsr @expandToCARD1.SMALL
  5696 374E B5 95			lda :STACKORIGIN-1,x
  5697 3750 85 8E			sta :FPMAN0
  5698 3752 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5699 3754 85 8F			sta :FPMAN1
  5700 3756 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5701 3758 85 90			sta :FPMAN2
  5702 375A B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5703 375C 85 91			sta :FPMAN3
  5704 375E 20 52 19			jsr @I2F
  5705 3761 A5 8E			lda :FPMAN0
  5706 3763 85 8A			sta :FP2MAN0
  5707 3765 A5 8F			lda :FPMAN1
  5708 3767 85 8B			sta :FP2MAN1
  5709 3769 A5 90			lda :FPMAN2
  5710 376B 85 8C			sta :FP2MAN2
  5711 376D A5 91			lda :FPMAN3
  5712 376F 85 8D			sta :FP2MAN3
  5713 3771 B5 95			lda :STACKORIGIN-1,x
  5714 3773 85 86			sta :FP1MAN0
  5715 3775 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5716 3777 85 87			sta :FP1MAN1
  5717 3779 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5718 377B 85 88			sta :FP1MAN2
  5719 377D B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5720 377F 85 89			sta :FP1MAN3
  5721 3781 20 65 18			jsr @FDIV
  5722 3784 CA				dex
  5723 3785 A5 8E			lda :FPMAN0
  5724 3787 8D 53 A1			sta VM
  5725 378A A5 8F			lda :FPMAN1
  5726 378C 8D 54 A1			sta VM+1
  5727 378F A5 90			lda :FPMAN2
  5728 3791 8D 55 A1			sta VM+2
  5729 3794 A5 91			lda :FPMAN3
  5730 3796 8D 56 A1			sta VM+3
  5731 3799 CA				dex
  5732
  5733 				; optimize OK (service.pas), line = 1108
  5734
  5735 379A AD 4F A1			lda SX
  5736 379D 85 8E			sta :FPMAN0
  5737 379F A0 00			ldy #$00
  5738 37A1 AD 50 A1			lda SX+1
  5739 37A4 10 01			spl
  5740 37A6 88				dey
  5741 37A7 85 8F			sta :FPMAN1
  5742 37A9 84 90			sty :FPMAN2
  5743 37AB 84 91			sty :FPMAN3
  5744 37AD 20 52 19			jsr @I2F
  5745 37B0 A5 8E			lda :FPMAN0
  5746 37B2 85 86			sta :FP1MAN0
  5747 37B4 A5 8F			lda :FPMAN1
  5748 37B6 85 87			sta :FP1MAN1
  5749 37B8 A5 90			lda :FPMAN2
  5750 37BA 85 88			sta :FP1MAN2
  5751 37BC A5 91			lda :FPMAN3
  5752 37BE 85 89			sta :FP1MAN3
  5753 37C0 AD 53 A1			lda VM
  5754 37C3 85 8A			sta :FP2MAN0
  5755 37C5 AD 54 A1			lda VM+1
  5756 37C8 85 8B			sta :FP2MAN1
  5757 37CA AD 55 A1			lda VM+2
  5758 37CD 85 8C			sta :FP2MAN2
  5759 37CF AD 56 A1			lda VM+3
  5760 37D2 85 8D			sta :FP2MAN3
  5761 37D4 20 C4 17			jsr @FMUL
  5762 37D7 A5 8E			lda :FPMAN0
  5763 37D9 85 8A			sta :FP2MAN0
  5764 37DB A5 8F			lda :FPMAN1
  5765 37DD 85 8B			sta :FP2MAN1
  5766 37DF A5 90			lda :FPMAN2
  5767 37E1 85 8C			sta :FP2MAN2
  5768 37E3 A5 91			lda :FPMAN3
  5769 37E5 85 8D			sta :FP2MAN3
  5770 37E7 20 1C 16			jsr @FROUND
  5771 37EA AC 49 A1 84 84 AC + 	mwy BALL :bp2
  5772 37F4 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5773 37F6 A5 8E			lda :FPMAN0
  5774 37F8 91 84			sta (:bp2),y
  5775 37FA C8				iny
  5776 37FB A5 8F			lda :FPMAN1
  5777 37FD 91 84			sta (:bp2),y
  5778
  5779 				; optimize OK (service.pas), line = 1109
  5780
  5781 37FF AD 51 A1			lda SY
  5782 3802 85 8E			sta :FPMAN0
  5783 3804 A0 00			ldy #$00
  5784 3806 AD 52 A1			lda SY+1
  5785 3809 10 01			spl
  5786 380B 88				dey
  5787 380C 85 8F			sta :FPMAN1
  5788 380E 84 90			sty :FPMAN2
  5789 3810 84 91			sty :FPMAN3
  5790 3812 20 52 19			jsr @I2F
  5791 3815 A5 8E			lda :FPMAN0
  5792 3817 85 86			sta :FP1MAN0
  5793 3819 A5 8F			lda :FPMAN1
  5794 381B 85 87			sta :FP1MAN1
  5795 381D A5 90			lda :FPMAN2
  5796 381F 85 88			sta :FP1MAN2
  5797 3821 A5 91			lda :FPMAN3
  5798 3823 85 89			sta :FP1MAN3
  5799 3825 AD 53 A1			lda VM
  5800 3828 85 8A			sta :FP2MAN0
  5801 382A AD 54 A1			lda VM+1
  5802 382D 85 8B			sta :FP2MAN1
  5803 382F AD 55 A1			lda VM+2
  5804 3832 85 8C			sta :FP2MAN2
  5805 3834 AD 56 A1			lda VM+3
  5806 3837 85 8D			sta :FP2MAN3
  5807 3839 20 C4 17			jsr @FMUL
  5808 383C A5 8E			lda :FPMAN0
  5809 383E 85 8A			sta :FP2MAN0
  5810 3840 A5 8F			lda :FPMAN1
  5811 3842 85 8B			sta :FP2MAN1
  5812 3844 A5 90			lda :FPMAN2
  5813 3846 85 8C			sta :FP2MAN2
  5814 3848 A5 91			lda :FPMAN3
  5815 384A 85 8D			sta :FP2MAN3
  5816 384C 20 1C 16			jsr @FROUND
  5817 384F AC 49 A1 84 84 AC + 	mwy BALL :bp2
  5818 3859 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5819 385B A5 8E			lda :FPMAN0
  5820 385D 91 84			sta (:bp2),y
  5821 385F C8				iny
  5822 3860 A5 8F			lda :FPMAN1
  5823 3862 91 84			sta (:bp2),y
  5824
  5825 				; ------------------------------------------------------------
  5826
  5827 = A149			BALL	= DATAORIGIN+$05AD
  5828 = 9B9C			BALL.X	= DATAORIGIN+$0000
  5829 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  5830 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  5831 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  5832 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  5833 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  5834 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  5835 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  5836 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  5837 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  5838 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  5839 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  5840 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  5841 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  5842 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  5843 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  5844 = A14D			SPEED	= DATAORIGIN+$05B1
  5845 = A14F			SX	= DATAORIGIN+$05B3
  5846 = A151			SY	= DATAORIGIN+$05B5
  5847 = A153			VM	= DATAORIGIN+$05B7
  5848
  5849 = A149			@VarData	= BALL
  5850 = 000C			@VarDataSize	= 12
  5851
  5852 3864			@exit
  5853 					.ifdef @new
  5854 					lda <@VarData
  5855 					sta :ztmp
  5856 					lda >@VarData
  5857 					ldy #@VarDataSize-1
  5858 					jmp @FreeMem
  5859 					els
  5860 3864 60				rts						; ret
  5861 					eif
  5862 				.endl
  5863
  5864 3865			.local	SET_BALL_DIRECTION				; PROCEDURE
  5865
  5866 				; optimize OK (service.pas), line = 1116
  5867
  5868 3865 AD 5B A1			lda ANGLE
  5869 3868 85 9F			sta :STACKORIGIN+9
  5870 386A A0 00			ldy #$00
  5871 386C AD 5C A1			lda ANGLE+1
  5872 386F 10 01			spl
  5873 3871 88				dey
  5874 3872 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5875 3874 85 88			sta @REAL_MUL.A+2
  5876 3876 84 89			sty @REAL_MUL.A+3
  5877 3878 A5 9F			lda :STACKORIGIN+9
  5878 387A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5879 387C A9 00			lda #$00
  5880 387E 85 86			sta @REAL_MUL.A
  5881 3880 A9 24			lda #$24
  5882 3882 85 8E			sta @REAL_MUL.B
  5883 3884 A9 03			lda #$03
  5884 3886 85 8F			sta @REAL_MUL.B+1
  5885 3888 A9 00			lda #$00
  5886 388A 85 90			sta @REAL_MUL.B+2
  5887 388C 85 91			sta @REAL_MUL.B+3
  5888 388E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5889 3890 85 87			sta @REAL_MUL.A+1
  5890 3892 20 73 14			jsr @REAL_MUL
  5891 3895 A9 00			lda #$00
  5892 3897 85 8E			sta @REAL_DIV.B
  5893 3899 A9 B4			lda #$B4
  5894 389B 85 8F			sta @REAL_DIV.B+1
  5895 389D A9 00			lda #$00
  5896 389F 85 90			sta @REAL_DIV.B+2
  5897 38A1 85 91			sta @REAL_DIV.B+3
  5898 38A3 20 32 15			jsr @REAL_DIV
  5899 38A6 A5 86			lda :eax
  5900 38A8 8D 5D A1			sta W
  5901 38AB A5 87			lda :eax+1
  5902 38AD 8D 5E A1			sta W+1
  5903 38B0 A5 88			lda :eax+2
  5904 38B2 8D 5F A1			sta W+2
  5905 38B5 A5 89			lda :eax+3
  5906 38B7 8D 60 A1			sta W+3
  5907
  5908 				; optimize FAIL (1, service.pas), line = 1118
  5909
  5910 38BA E8				inx
  5911 38BB A9 00 95 96			mva #$00 :STACKORIGIN,x
  5912 38BF A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5913 38C3 AD 5D A1			lda W
  5914 38C6 8D D8 9B			sta SYSTEM.COS.@01018E000.X
  5915 38C9 AD 5E A1			lda W+1
  5916 38CC 8D D9 9B			sta SYSTEM.COS.@01018E000.X+1
  5917 38CF AD 5F A1			lda W+2
  5918 38D2 8D DA 9B			sta SYSTEM.COS.@01018E000.X+2
  5919 38D5 AD 60 A1			lda W+3
  5920 38D8 8D DB 9B			sta SYSTEM.COS.@01018E000.X+3
  5921 38DB 20 02 25			jsr SYSTEM.COS.@01018E000
  5922 38DE E8				inx
  5923 38DF AD DC 9B 95 96		mva SYSTEM.COS.@01018E000.RESULT :STACKORIGIN,x
  5924 38E4 AD DD 9B 95 A6		mva SYSTEM.COS.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5925 38E9 AD DE 9B 95 B6		mva SYSTEM.COS.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5926 38EE AD DF 9B 95 C6		mva SYSTEM.COS.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5927 38F3 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5928 38F7 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5929 38F9 20 6A 11			jsr @expandToREAL1
  5930 38FC B5 96			lda :STACKORIGIN,x
  5931 38FE 85 8E			sta @REAL_MUL.B
  5932 3900 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5933 3902 85 8F			sta @REAL_MUL.B+1
  5934 3904 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5935 3906 85 90			sta @REAL_MUL.B+2
  5936 3908 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5937 390A 85 91			sta @REAL_MUL.B+3
  5938 390C B5 95			lda :STACKORIGIN-1,x
  5939 390E 85 86			sta @REAL_MUL.A
  5940 3910 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5941 3912 85 87			sta @REAL_MUL.A+1
  5942 3914 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5943 3916 85 88			sta @REAL_MUL.A+2
  5944 3918 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5945 391A 85 89			sta @REAL_MUL.A+3
  5946 391C 20 73 14			jsr @REAL_MUL
  5947 391F CA				dex
  5948 3920 20 DA 15			jsr @REAL_ROUND
  5949 3923 A5 86			lda :eax
  5950 3925 95 96			sta :STACKORIGIN,x
  5951 3927 A5 87			lda :eax+1
  5952 3929 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  5953 392B A5 88			lda :eax+2
  5954 392D 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  5955 392F A5 89			lda :eax+3
  5956 3931 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  5957 3933 AC 57 A1 84 84 AC + 	mwy BALL :bp2
  5958 393D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5959 393F B5 96			lda :STACKORIGIN,x
  5960 3941 91 84			sta (:bp2),y
  5961 3943 C8				iny
  5962 3944 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5963 3946 91 84			sta (:bp2),y
  5964
  5965 				; optimize FAIL (1, service.pas), line = 1119
  5966
  5967 3948 A9 00 95 96			mva #$00 :STACKORIGIN,x
  5968 394C A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  5969 3950 AD 5D A1			lda W
  5970 3953 8D D0 9B			sta SYSTEM.SIN.@01018E000.X
  5971 3956 AD 5E A1			lda W+1
  5972 3959 8D D1 9B			sta SYSTEM.SIN.@01018E000.X+1
  5973 395C AD 5F A1			lda W+2
  5974 395F 8D D2 9B			sta SYSTEM.SIN.@01018E000.X+2
  5975 3962 AD 60 A1			lda W+3
  5976 3965 8D D3 9B			sta SYSTEM.SIN.@01018E000.X+3
  5977 3968 20 C9 24			jsr SYSTEM.SIN.@01018E000
  5978 396B E8				inx
  5979 396C AD D4 9B 95 96		mva SYSTEM.SIN.@01018E000.RESULT :STACKORIGIN,x
  5980 3971 AD D5 9B 95 A6		mva SYSTEM.SIN.@01018E000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5981 3976 AD D6 9B 95 B6		mva SYSTEM.SIN.@01018E000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5982 397B AD D7 9B 95 C6		mva SYSTEM.SIN.@01018E000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5983 3980 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  5984 3984 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5985 3986 20 6A 11			jsr @expandToREAL1
  5986 3989 B5 96			lda :STACKORIGIN,x
  5987 398B 85 8E			sta @REAL_MUL.B
  5988 398D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5989 398F 85 8F			sta @REAL_MUL.B+1
  5990 3991 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5991 3993 85 90			sta @REAL_MUL.B+2
  5992 3995 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5993 3997 85 91			sta @REAL_MUL.B+3
  5994 3999 B5 95			lda :STACKORIGIN-1,x
  5995 399B 85 86			sta @REAL_MUL.A
  5996 399D B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5997 399F 85 87			sta @REAL_MUL.A+1
  5998 39A1 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5999 39A3 85 88			sta @REAL_MUL.A+2
  6000 39A5 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6001 39A7 85 89			sta @REAL_MUL.A+3
  6002 39A9 20 73 14			jsr @REAL_MUL
  6003 39AC CA				dex
  6004 39AD 20 DA 15			jsr @REAL_ROUND
  6005 39B0 A5 86			lda :eax
  6006 39B2 95 96			sta :STACKORIGIN,x
  6007 39B4 A5 87			lda :eax+1
  6008 39B6 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6009 39B8 A5 88			lda :eax+2
  6010 39BA 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6011 39BC A5 89			lda :eax+3
  6012 39BE 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6013 39C0 A9 00			lda #$00
  6014 39C2 38 F5 96			sub :STACKORIGIN,x
  6015 39C5 95 96			sta :STACKORIGIN,x
  6016 39C7 A9 00			lda #$00
  6017 39C9 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6018 39CB 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6019 39CD A9 00			lda #$00
  6020 39CF F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6021 39D1 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6022 39D3 A9 00			lda #$00
  6023 39D5 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6024 39D7 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6025 39D9 AC 57 A1 84 84 AC + 	mwy BALL :bp2
  6026 39E3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6027 39E5 B5 96			lda :STACKORIGIN,x
  6028 39E7 91 84			sta (:bp2),y
  6029 39E9 C8				iny
  6030 39EA B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6031 39EC 91 84			sta (:bp2),y
  6032 39EE CA				dex
  6033
  6034 				; ------------------------------------------------------------
  6035
  6036 = A157			BALL	= DATAORIGIN+$05BB
  6037 = 9B9C			BALL.X	= DATAORIGIN+$0000
  6038 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  6039 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  6040 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  6041 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  6042 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  6043 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  6044 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  6045 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  6046 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  6047 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  6048 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  6049 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  6050 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  6051 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  6052 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  6053 = A15B			ANGLE	= DATAORIGIN+$05BF
  6054 = A15D			W	= DATAORIGIN+$05C1
  6055
  6056 = A157			@VarData	= BALL
  6057 = 0008			@VarDataSize	= 8
  6058
  6059 39EF			@exit
  6060 					.ifdef @new
  6061 					lda <@VarData
  6062 					sta :ztmp
  6063 					lda >@VarData
  6064 					ldy #@VarDataSize-1
  6065 					jmp @FreeMem
  6066 					els
  6067 39EF 60				rts						; ret
  6068 					eif
  6069 				.endl
  6070
  6071 39F0			.local	GET_BALL_DIRECTION				; FUNCTION
  6072
  6073 				; optimize OK (service.pas), line = 1127
  6074
  6075 39F0 AC 61 A1 84 84 AC + 	mwy BALL :bp2
  6076 39FA A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6077 39FC B1 84			lda (:bp2),y
  6078 39FE 88				dey
  6079 39FF 11 84			ora (:bp2),y
  6080 3A01 D0 75			jne l_0C59
  6081 3A03 E8				inx
  6082 3A04 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6083 3A08 E8				inx
  6084 3A09 AC 61 A1 84 84 AC + 	mwy BALL :bp2
  6085 3A13 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6086 3A15 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6087 3A19 C8				iny
  6088 3A1A B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6089 3A1E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6090 3A20 B1 84			lda (:bp2),y
  6091 3A22 85 8A			sta SYSTEM.ABS.@010184000.X
  6092 3A24 C8				iny
  6093 3A25 B1 84			lda (:bp2),y
  6094 3A27 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6095 3A29 20 A9 1C			jsr SYSTEM.ABS.@010184000
  6096 3A2C E8				inx
  6097 3A2D A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6098 3A2F 85 8E			sta @SMALLINT.DIV.B
  6099 3A31 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6100 3A33 85 8F			sta @SMALLINT.DIV.B+1
  6101 3A35 B5 95			lda :STACKORIGIN-1,x
  6102 3A37 85 86			sta @SMALLINT.DIV.A
  6103 3A39 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6104 3A3B 85 87			sta @SMALLINT.DIV.A+1
  6105 3A3D 20 62 12			jsr @SMALLINT.DIV
  6106 3A40 A5 86			lda :eax
  6107 3A42 95 95			sta :STACKORIGIN-1,x
  6108 3A44 A5 87			lda :eax+1
  6109 3A46 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6110 3A48 CA				dex
  6111 3A49 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6112 3A4D 20 3A 12			jsr mulSMALLINT
  6113 3A50 CA				dex
  6114 3A51 A9 00			lda #$00
  6115 3A53 38 F5 96			sub :STACKORIGIN,x
  6116 3A56 95 96			sta :STACKORIGIN,x
  6117 3A58 A9 00			lda #$00
  6118 3A5A F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6119 3A5C 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6120 3A5E A9 00			lda #$00
  6121 3A60 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6122 3A62 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6123 3A64 A9 00			lda #$00
  6124 3A66 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6125 3A68 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6126 3A6A B5 96			lda :STACKORIGIN,x
  6127 3A6C 8D 67 A1			sta W
  6128 3A6F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6129 3A71 8D 68 A1			sta W+1
  6130 3A74 CA				dex
  6131 3A75 4C 9E 3B			jmp l_0C75
  6132 3A78			l_0C59
  6133
  6134 				; optimize OK (service.pas), line = 1133
  6135
  6136 3A78 AC 61 A1 84 84 AC + 	mwy BALL :bp2
  6137 3A82 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6138 3A84 B1 84			lda (:bp2),y
  6139 3A86 85 87			sta @REAL_DIV.A+1
  6140 3A88 C8				iny
  6141 3A89 B1 84			lda (:bp2),y
  6142 3A8B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6143 3A8D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6144 3A8F B1 84			lda (:bp2),y
  6145 3A91 85 A0			sta :STACKORIGIN+10
  6146 3A93 C8				iny
  6147 3A94 B1 84			lda (:bp2),y
  6148 3A96 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6149 3A98 A0 00			ldy #$00
  6150 3A9A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6151 3A9C 10 01			spl
  6152 3A9E 88				dey
  6153 3A9F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6154 3AA1 85 90			sta @REAL_DIV.B+2
  6155 3AA3 84 91			sty @REAL_DIV.B+3
  6156 3AA5 A5 A0			lda :STACKORIGIN+10
  6157 3AA7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6158 3AA9 A9 00			lda #$00
  6159 3AAB 85 8E			sta @REAL_DIV.B
  6160 3AAD A0 00			ldy #$00
  6161 3AAF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6162 3AB1 10 01			spl
  6163 3AB3 88				dey
  6164 3AB4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6165 3AB6 85 88			sta @REAL_DIV.A+2
  6166 3AB8 84 89			sty @REAL_DIV.A+3
  6167 3ABA A9 00			lda #$00
  6168 3ABC 85 86			sta @REAL_DIV.A
  6169 3ABE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6170 3AC0 85 8F			sta @REAL_DIV.B+1
  6171 3AC2 20 32 15			jsr @REAL_DIV
  6172 3AC5 A9 00			lda #$00
  6173 3AC7 38 E5 86			sub :eax
  6174 3ACA 8D B5 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE
  6175 3ACD A9 00			lda #$00
  6176 3ACF E5 87			sbc :eax+1
  6177 3AD1 8D B6 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+1
  6178 3AD4 A9 00			lda #$00
  6179 3AD6 E5 88			sbc :eax+2
  6180 3AD8 8D B7 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+2
  6181 3ADB A9 00			lda #$00
  6182 3ADD E5 89			sbc :eax+3
  6183 3ADF 8D B8 9B			sta SYSTEM.ARCTAN.@01018E000.VALUE+3
  6184 3AE2 20 6C 1F			jsr SYSTEM.ARCTAN.@01018E000
  6185 3AE5 E8				inx
  6186 3AE6 E8				inx
  6187 3AE7 A9 00			lda #$00
  6188 3AE9 85 8E			sta @REAL_MUL.B
  6189 3AEB A9 B4			lda #$B4
  6190 3AED 85 8F			sta @REAL_MUL.B+1
  6191 3AEF A9 00			lda #$00
  6192 3AF1 85 90			sta @REAL_MUL.B+2
  6193 3AF3 A9 00			lda #$00
  6194 3AF5 85 91			sta @REAL_MUL.B+3
  6195 3AF7 AD B9 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT
  6196 3AFA 85 86			sta @REAL_MUL.A
  6197 3AFC AD BA 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+1
  6198 3AFF 85 87			sta @REAL_MUL.A+1
  6199 3B01 AD BB 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+2
  6200 3B04 85 88			sta @REAL_MUL.A+2
  6201 3B06 AD BC 9B			lda SYSTEM.ARCTAN.@01018E000.RESULT+3
  6202 3B09 85 89			sta @REAL_MUL.A+3
  6203 3B0B 20 73 14			jsr @REAL_MUL
  6204 3B0E A5 86			lda :eax
  6205 3B10 95 95			sta :STACKORIGIN-1,x
  6206 3B12 A5 87			lda :eax+1
  6207 3B14 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6208 3B16 A5 88			lda :eax+2
  6209 3B18 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6210 3B1A A5 89			lda :eax+3
  6211 3B1C 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6212 3B1E A9 24			lda #$24
  6213 3B20 85 8E			sta @REAL_DIV.B
  6214 3B22 A9 03			lda #$03
  6215 3B24 85 8F			sta @REAL_DIV.B+1
  6216 3B26 A9 00			lda #$00
  6217 3B28 85 90			sta @REAL_DIV.B+2
  6218 3B2A A9 00			lda #$00
  6219 3B2C 85 91			sta @REAL_DIV.B+3
  6220 3B2E B5 95			lda :STACKORIGIN-1,x
  6221 3B30 85 86			sta @REAL_DIV.A
  6222 3B32 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6223 3B34 85 87			sta @REAL_DIV.A+1
  6224 3B36 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6225 3B38 85 88			sta @REAL_DIV.A+2
  6226 3B3A B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6227 3B3C 85 89			sta @REAL_DIV.A+3
  6228 3B3E 20 32 15			jsr @REAL_DIV
  6229 3B41 CA				dex
  6230 3B42 20 DA 15			jsr @REAL_ROUND
  6231 3B45 A5 86			lda :eax
  6232 3B47 8D 67 A1			sta W
  6233 3B4A A5 87			lda :eax+1
  6234 3B4C 8D 68 A1			sta W+1
  6235 3B4F CA				dex
  6236
  6237 				; optimize OK (service.pas), line = 1136
  6238
  6239 3B50 AC 61 A1 84 84 AC + 	mwy BALL :bp2
  6240 3B5A A0 00			ldy #$00
  6241 3B5C B1 84			lda (:bp2),y
  6242 3B5E 10 0E			jpl l_0C9C
  6243 3B60 AD 67 A1			lda W
  6244 3B63 18 69 B4			add #$B4
  6245 3B66 8D 67 A1			sta W
  6246 3B69 90 03			scc
  6247 3B6B EE 68 A1			inc W+1
  6248 3B6E			l_0C9C
  6249
  6250 				; optimize OK (service.pas), line = 1138
  6251
  6252 3B6E AD 67 A1			lda W
  6253 3B71 18 69 68			add #$68
  6254 3B74 8D 67 A1			sta W
  6255 3B77 AD 68 A1			lda W+1
  6256 3B7A 69 01			adc #$01
  6257 3B7C 8D 68 A1			sta W+1
  6258
  6259 				; optimize OK (service.pas), line = 1139
  6260
  6261 3B7F A9 68			lda #$68
  6262 3B81 85 8E			sta @SMALLINT.MOD.B
  6263 3B83 A9 01			lda #$01
  6264 3B85 85 8F			sta @SMALLINT.MOD.B+1
  6265 3B87 AD 67 A1			lda W
  6266 3B8A 85 86			sta @SMALLINT.MOD.A
  6267 3B8C AD 68 A1			lda W+1
  6268 3B8F 85 87			sta @SMALLINT.MOD.A+1
  6269 3B91 20 7F 12			jsr @SMALLINT.MOD
  6270 3B94 A5 92			lda @SMALLINT.MOD.RESULT
  6271 3B96 8D 67 A1			sta W
  6272 3B99 A5 93			lda @SMALLINT.MOD.RESULT+1
  6273 3B9B 8D 68 A1			sta W+1
  6274 3B9E			l_0C75
  6275
  6276 				; optimize OK (service.pas), line = 1142
  6277
  6278 3B9E AD 67 A1			lda W
  6279 3BA1 8D 65 A1			sta RESULT
  6280 3BA4 AD 68 A1			lda W+1
  6281 3BA7 8D 66 A1			sta RESULT+1
  6282 3BAA			@exit
  6283
  6284 				; ------------------------------------------------------------
  6285
  6286 = A161			BALL	= DATAORIGIN+$05C5
  6287 = 9B9C			BALL.X	= DATAORIGIN+$0000
  6288 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  6289 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  6290 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  6291 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  6292 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  6293 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  6294 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  6295 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  6296 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  6297 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  6298 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  6299 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  6300 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  6301 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  6302 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  6303 = A165			RESULT	= DATAORIGIN+$05C9
  6304 = A167			W	= DATAORIGIN+$05CB
  6305
  6306 = A161			@VarData	= BALL
  6307 = 0004			@VarDataSize	= 4
  6308
  6309 3BAA 60				rts						; ret
  6310 				.endl
  6311
  6312 3BAB			.local	START_BALL					; PROCEDURE
  6313
  6314 				; optimize OK (service.pas), line = 1150
  6315
  6316 3BAB AC 69 A1 84 84 AC + 	mwy BALL :bp2
  6317 3BB5 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6318 3BB7 A0 00			ldy #BALL.X-DATAORIGIN
  6319 3BB9 AD 1B 9D			lda VAUS.X
  6320 3BBC 18 71 84			add (:bp2),y
  6321 3BBF 91 84			sta (:bp2),y
  6322 3BC1 C8				iny
  6323 3BC2 A9 00			lda #$00
  6324 3BC4 69 00			adc #$00
  6325 3BC6 91 84			sta (:bp2),y
  6326
  6327 				; optimize OK (service.pas), line = 1156
  6328
  6329 3BC8 A0 02			ldy #BALL.Y-DATAORIGIN
  6330 3BCA AD 1C 9D			lda VAUS.Y
  6331 3BCD 38 E9 03			sub #$03
  6332 3BD0 91 84			sta (:bp2),y
  6333 3BD2 C8				iny
  6334 3BD3 A9 00			lda #$00
  6335 3BD5 E9 00			sbc #$00
  6336 3BD7 91 84			sta (:bp2),y
  6337
  6338 				; optimize OK (service.pas), line = 1161
  6339
  6340 3BD9 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6341 3BDB A9 00			lda #$00
  6342 3BDD 91 84			sta (:bp2),y
  6343 3BDF C8				iny
  6344 3BE0 91 84			sta (:bp2),y
  6345
  6346 				; optimize OK (service.pas), line = 1162
  6347
  6348 3BE2 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6349 3BE4 91 84			sta (:bp2),y
  6350 3BE6 C8				iny
  6351 3BE7 91 84			sta (:bp2),y
  6352
  6353 				; optimize OK (service.pas), line = 1164
  6354
  6355 3BE9 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6356 3BEB A9 01			lda #$01
  6357 3BED 91 84			sta (:bp2),y
  6358
  6359 				; optimize OK (service.pas), line = 1166
  6360
  6361 3BEF A0 14			ldy #BALL.SBD-DATAORIGIN
  6362 3BF1 A9 00			lda #$00
  6363 3BF3 91 84			sta (:bp2),y
  6364 3BF5 C8				iny
  6365 3BF6 91 84			sta (:bp2),y
  6366
  6367 				; optimize OK (service.pas), line = 1167
  6368
  6369 3BF8 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6370 3BFA 91 84			sta (:bp2),y
  6371
  6372 				; ------------------------------------------------------------
  6373
  6374 = A169			BALL	= DATAORIGIN+$05CD
  6375 = 9B9C			BALL.X	= DATAORIGIN+$0000
  6376 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  6377 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  6378 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  6379 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  6380 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  6381 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  6382 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  6383 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  6384 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  6385 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  6386 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  6387 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  6388 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  6389 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  6390 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  6391
  6392 = A169			@VarData	= BALL
  6393 = 0002			@VarDataSize	= 2
  6394
  6395 3BFC			@exit
  6396 					.ifdef @new
  6397 					lda <@VarData
  6398 					sta :ztmp
  6399 					lda >@VarData
  6400 					ldy #@VarDataSize-1
  6401 					jmp @FreeMem
  6402 					els
  6403 3BFC 60				rts						; ret
  6404 					eif
  6405 				.endl
  6406
  6407 3BFD			.local	BALL_SPEED					; FUNCTION
  6408
  6409 				; ------------------------------------------------------------
  6410
  6411 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6412 				; as Pointer
  6413 3BFD B5 96			lda :STACKORIGIN,x
  6414 3BFF 85 84			sta :bp2
  6415 3C01 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6416 3C03 85 85			sta :bp2+1
  6417 3C05 A0 1A			ldy #$1A
  6418 3C07 B1 84 99 6D A1 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6419 3C0F CA				dex
  6420 3C10			@main
  6421
  6422 				; optimize OK (service.pas), line = 1175
  6423
  6424 3C10 AD 7D A1			lda BALL.SPEEDX
  6425 3C13 85 8E			sta :ecx
  6426 3C15 85 92			sta :ztmp8
  6427 3C17 AD 7E A1			lda BALL.SPEEDX+1
  6428 3C1A 85 8F			sta :ecx+1
  6429 3C1C 85 93			sta :ztmp9
  6430 3C1E AD 7D A1			lda BALL.SPEEDX
  6431 3C21 85 86			sta :eax
  6432 3C23 85 94			sta :ztmp10
  6433 3C25 AD 7E A1			lda BALL.SPEEDX+1
  6434 3C28 85 87			sta :eax+1
  6435 3C2A 85 95			sta :ztmp11
  6436 					.ifdef fmulinit
  6437 					fmulu_16
  6438 					els
  6439 3C2C 20 3A 13			imulCX
  6440 					eif
  6441 3C2F A5 95			lda :ztmp11
  6442 3C31 10 0D			bpl @+
  6443 3C33 A5 88			lda :eax+2
  6444 3C35 38 E5 92			sub :ztmp8
  6445 3C38 85 88			sta :eax+2
  6446 3C3A A5 89			lda :eax+3
  6447 3C3C E5 93			sbc :ztmp9
  6448 3C3E 85 89			sta :eax+3
  6449 				@
  6450 3C40 A5 93			lda :ztmp9
  6451 3C42 10 0D			bpl @+
  6452 3C44 A5 88			lda :eax+2
  6453 3C46 38 E5 94			sub :ztmp10
  6454 3C49 85 88			sta :eax+2
  6455 3C4B A5 89			lda :eax+3
  6456 3C4D E5 95			sbc :ztmp11
  6457 3C4F 85 89			sta :eax+3
  6458 				@
  6459 3C51 A5 86			lda :eax
  6460 3C53 85 9F			sta :STACKORIGIN+9
  6461 3C55 A5 87			lda :eax+1
  6462 3C57 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6463 3C59 A5 88			lda :eax+2
  6464 3C5B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6465 3C5D A5 89			lda :eax+3
  6466 3C5F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6467 3C61 AD 7F A1			lda BALL.SPEEDY
  6468 3C64 85 8E			sta :ecx
  6469 3C66 85 92			sta :ztmp8
  6470 3C68 AD 80 A1			lda BALL.SPEEDY+1
  6471 3C6B 85 8F			sta :ecx+1
  6472 3C6D 85 93			sta :ztmp9
  6473 3C6F AD 7F A1			lda BALL.SPEEDY
  6474 3C72 85 86			sta :eax
  6475 3C74 85 94			sta :ztmp10
  6476 3C76 AD 80 A1			lda BALL.SPEEDY+1
  6477 3C79 85 87			sta :eax+1
  6478 3C7B 85 95			sta :ztmp11
  6479 					.ifdef fmulinit
  6480 					fmulu_16
  6481 					els
  6482 3C7D 20 3A 13			imulCX
  6483 					eif
  6484 3C80 A5 95			lda :ztmp11
  6485 3C82 10 0D			bpl @+
  6486 3C84 A5 88			lda :eax+2
  6487 3C86 38 E5 92			sub :ztmp8
  6488 3C89 85 88			sta :eax+2
  6489 3C8B A5 89			lda :eax+3
  6490 3C8D E5 93			sbc :ztmp9
  6491 3C8F 85 89			sta :eax+3
  6492 				@
  6493 3C91 A5 93			lda :ztmp9
  6494 3C93 10 0D			bpl @+
  6495 3C95 A5 88			lda :eax+2
  6496 3C97 38 E5 94			sub :ztmp10
  6497 3C9A 85 88			sta :eax+2
  6498 3C9C A5 89			lda :eax+3
  6499 3C9E E5 95			sbc :ztmp11
  6500 3CA0 85 89			sta :eax+3
  6501 				@
  6502 3CA2 A5 9F			lda :STACKORIGIN+9
  6503 3CA4 18 65 86			add :eax
  6504 3CA7 8D A7 9B			sta SYSTEM.SQRT.@010185000.X
  6505 3CAA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6506 3CAC 65 87			adc :eax+1
  6507 3CAE 8D A8 9B			sta SYSTEM.SQRT.@010185000.X+1
  6508 3CB1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6509 3CB3 65 88			adc :eax+2
  6510 3CB5 8D A9 9B			sta SYSTEM.SQRT.@010185000.X+2
  6511 3CB8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6512 3CBA 65 89			adc :eax+3
  6513 3CBC 8D AA 9B			sta SYSTEM.SQRT.@010185000.X+3
  6514 3CBF 20 D7 1C			jsr SYSTEM.SQRT.@010185000
  6515 3CC2 E8				inx
  6516 3CC3 AD AB 9B			lda SYSTEM.SQRT.@010185000.RESULT
  6517 3CC6 85 8A			sta :FP2MAN0
  6518 3CC8 AD AC 9B			lda SYSTEM.SQRT.@010185000.RESULT+1
  6519 3CCB 85 8B			sta :FP2MAN1
  6520 3CCD AD AD 9B			lda SYSTEM.SQRT.@010185000.RESULT+2
  6521 3CD0 85 8C			sta :FP2MAN2
  6522 3CD2 AD AE 9B			lda SYSTEM.SQRT.@010185000.RESULT+3
  6523 3CD5 85 8D			sta :FP2MAN3
  6524 3CD7 20 1C 16			jsr @FROUND
  6525 3CDA A5 8E			lda :FPMAN0
  6526 3CDC 8D 88 A1			sta RESULT
  6527 3CDF A5 8F			lda :FPMAN1
  6528 3CE1 8D 89 A1			sta RESULT+1
  6529 3CE4 CA				dex
  6530 3CE5			@exit
  6531
  6532 				; ------------------------------------------------------------
  6533
  6534 = A16D			adr.BALL	= DATAORIGIN+$05D1	; [27] RECORD
  6535 3CE5			.var BALL	= adr.BALL .word
  6536 = A16D			BALL.X	= DATAORIGIN+$05D1
  6537 = A16F			BALL.Y	= DATAORIGIN+$05D3
  6538 = A171			BALL.FINEX	= DATAORIGIN+$05D5
  6539 = A173			BALL.FINEY	= DATAORIGIN+$05D7
  6540 = A175			BALL.OLDX	= DATAORIGIN+$05D9
  6541 = A177			BALL.OLDY	= DATAORIGIN+$05DB
  6542 = A179			BALL.SPEED	= DATAORIGIN+$05DD
  6543 = A17B			BALL.FINESPEED	= DATAORIGIN+$05DF
  6544 = A17D			BALL.SPEEDX	= DATAORIGIN+$05E1
  6545 = A17F			BALL.SPEEDY	= DATAORIGIN+$05E3
  6546 = A181			BALL.SBD	= DATAORIGIN+$05E5
  6547 = A183			BALL.BRWHIT	= DATAORIGIN+$05E7
  6548 = A184			BALL.INPLAY	= DATAORIGIN+$05E8
  6549 = A185			BALL.LAUNCH	= DATAORIGIN+$05E9
  6550 = A186			BALL.ONVAUS	= DATAORIGIN+$05EA
  6551 = A187			BALL.STM	= DATAORIGIN+$05EB
  6552 = A188			RESULT	= DATAORIGIN+$05EC
  6553
  6554 = A16D			@VarData	= BALL.X
  6555 = 001B			@VarDataSize	= 27
  6556
  6557 3CE5 60				rts						; ret
  6558 = 3CE6 6D A1		BALL
  6558 				.endl
  6559
  6560 3CE8			.local	MOVE_BALL					; PROCEDURE
  6561
  6562 				; optimize OK (service.pas), line = 1189
  6563
  6564 3CE8 AC 8A A1 84 84 AC + 	mwy BALL :bp2
  6565 3CF2 A0 00			ldy #BALL.X-DATAORIGIN
  6566 3CF4 B1 84			lda (:bp2),y
  6567 3CF6 C8				iny
  6568 3CF7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6569 3CF9 A9 00			lda #$00
  6570 3CFB A0 04			ldy #BALL.FINEX-DATAORIGIN
  6571 3CFD 18 71 84			add (:bp2),y
  6572 3D00 85 9F			sta :STACKORIGIN+9
  6573 3D02 C8				iny
  6574 3D03 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6575 3D05 71 84			adc (:bp2),y
  6576 3D07 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6577 3D09 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6578 3D0B A5 9F			lda :STACKORIGIN+9
  6579 3D0D 18 71 84			add (:bp2),y
  6580 3D10 8D 8E A1			sta X
  6581 3D13 C8				iny
  6582 3D14 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6583 3D16 71 84			adc (:bp2),y
  6584 3D18 8D 8F A1			sta X+1
  6585
  6586 				; optimize OK (service.pas), line = 1190
  6587
  6588 3D1B A0 02			ldy #BALL.Y-DATAORIGIN
  6589 3D1D B1 84			lda (:bp2),y
  6590 3D1F C8				iny
  6591 3D20 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6592 3D22 A9 00			lda #$00
  6593 3D24 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6594 3D26 18 71 84			add (:bp2),y
  6595 3D29 85 9F			sta :STACKORIGIN+9
  6596 3D2B C8				iny
  6597 3D2C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6598 3D2E 71 84			adc (:bp2),y
  6599 3D30 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6600 3D32 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6601 3D34 A5 9F			lda :STACKORIGIN+9
  6602 3D36 18 71 84			add (:bp2),y
  6603 3D39 8D 90 A1			sta Y
  6604 3D3C C8				iny
  6605 3D3D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6606 3D3F 71 84			adc (:bp2),y
  6607 3D41 8D 91 A1			sta Y+1
  6608
  6609 				; optimize OK (service.pas), line = 1192
  6610
  6611 3D44 A0 00			ldy #BALL.X-DATAORIGIN
  6612 3D46 AD 8F A1			lda X+1
  6613 3D49 91 84			sta (:bp2),y
  6614 3D4B C8				iny
  6615 3D4C A9 00			lda #$00
  6616 3D4E 91 84			sta (:bp2),y
  6617
  6618 				; optimize OK (service.pas), line = 1193
  6619
  6620 3D50 A0 02			ldy #BALL.Y-DATAORIGIN
  6621 3D52 AD 91 A1			lda Y+1
  6622 3D55 91 84			sta (:bp2),y
  6623 3D57 C8				iny
  6624 3D58 A9 00			lda #$00
  6625 3D5A 91 84			sta (:bp2),y
  6626
  6627 				; optimize OK (service.pas), line = 1195
  6628
  6629 3D5C A0 04			ldy #BALL.FINEX-DATAORIGIN
  6630 3D5E AD 8E A1			lda X
  6631 3D61 91 84			sta (:bp2),y
  6632 3D63 C8				iny
  6633 3D64 A9 00			lda #$00
  6634 3D66 91 84			sta (:bp2),y
  6635
  6636 				; optimize OK (service.pas), line = 1196
  6637
  6638 3D68 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6639 3D6A AD 90 A1			lda Y
  6640 3D6D 91 84			sta (:bp2),y
  6641 3D6F C8				iny
  6642 3D70 A9 00			lda #$00
  6643 3D72 91 84			sta (:bp2),y
  6644
  6645 				; optimize OK (service.pas), line = 1202
  6646
  6647 3D74 A0 00			ldy #BALL.X-DATAORIGIN
  6648 3D76 B1 84			lda (:bp2),y
  6649 3D78 C8				iny
  6650 3D79 C9 D9			cmp #$D9
  6651 3D7B B1 84			lda (:bp2),y
  6652 3D7D E9 00			sbc #$00
  6653 3D7F 50 02			svc
  6654 3D81 49 80			eor #$80
  6655 3D83 30 67			jmi l_0D58
  6656
  6657 				; optimize OK (service.pas), line = 1204
  6658
  6659 3D85 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6660 3D87 A9 00			lda #$00
  6661 3D89 38 F1 84			sub (:bp2),y
  6662 3D8C 85 9F			sta :STACKORIGIN+9
  6663 3D8E C8				iny
  6664 3D8F A9 00			lda #$00
  6665 3D91 F1 84			sbc (:bp2),y
  6666 3D93 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6667 3D95 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6668 3D97 A5 9F			lda :STACKORIGIN+9
  6669 3D99 91 84			sta (:bp2),y
  6670 3D9B C8				iny
  6671 3D9C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6672 3D9E 91 84			sta (:bp2),y
  6673
  6674 				; optimize OK (service.pas), line = 1205
  6675
  6676 3DA0 A0 00			ldy #BALL.X-DATAORIGIN
  6677 3DA2 A9 B0			lda #$B0
  6678 3DA4 38 F1 84			sub (:bp2),y
  6679 3DA7 85 9F			sta :STACKORIGIN+9
  6680 3DA9 C8				iny
  6681 3DAA A9 01			lda #$01
  6682 3DAC F1 84			sbc (:bp2),y
  6683 3DAE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6684 3DB0 A0 00			ldy #BALL.X-DATAORIGIN
  6685 3DB2 A5 9F			lda :STACKORIGIN+9
  6686 3DB4 91 84			sta (:bp2),y
  6687 3DB6 C8				iny
  6688 3DB7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6689 3DB9 91 84			sta (:bp2),y
  6690
  6691 				; optimize OK (service.pas), line = 1206
  6692
  6693 3DBB A0 04			ldy #BALL.FINEX-DATAORIGIN
  6694 3DBD A9 FF			lda #$FF
  6695 3DBF 51 84			eor (:bp2),y
  6696 3DC1 85 9F			sta :STACKORIGIN+9
  6697 3DC3 C8				iny
  6698 3DC4 A9 00			lda #$00
  6699 3DC6 F1 84			sbc (:bp2),y
  6700 3DC8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6701 3DCA A0 04			ldy #BALL.FINEX-DATAORIGIN
  6702 3DCC A5 9F			lda :STACKORIGIN+9
  6703 3DCE 91 84			sta (:bp2),y
  6704 3DD0 C8				iny
  6705 3DD1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6706 3DD3 91 84			sta (:bp2),y
  6707
  6708 				; optimize OK (service.pas), line = 1207
  6709
  6710 3DD5 A9 F0			lda #$F0
  6711 3DD7 8D 89 9C			sta BALL_BLOCK_SOUND.A
  6712 3DDA A9 00			lda #$00
  6713 3DDC 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
  6714 3DDF A9 05			lda #$05
  6715 3DE1 8D 8B 9C			sta BALL_BLOCK_SOUND.B
  6716 3DE4 A9 00			lda #$00
  6717 3DE6 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
  6718 3DE9 20 6B 2A			jsr BALL_BLOCK_SOUND
  6719 3DEC			l_0D58
  6720
  6721 				; optimize OK (service.pas), line = 1212
  6722
  6723 3DEC AC 8A A1 84 84 AC + 	mwy BALL :bp2
  6724 3DF6 A0 00			ldy #BALL.X-DATAORIGIN
  6725 3DF8 B1 84			lda (:bp2),y
  6726 3DFA C8				iny
  6727 3DFB C9 0A			cmp #$0A
  6728 3DFD B1 84			lda (:bp2),y
  6729 3DFF E9 00			sbc #$00
  6730 3E01 50 02			svc
  6731 3E03 49 80			eor #$80
  6732 3E05 10 67			jpl l_0D8D
  6733
  6734 				; optimize OK (service.pas), line = 1214
  6735
  6736 3E07 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6737 3E09 A9 00			lda #$00
  6738 3E0B 38 F1 84			sub (:bp2),y
  6739 3E0E 85 9F			sta :STACKORIGIN+9
  6740 3E10 C8				iny
  6741 3E11 A9 00			lda #$00
  6742 3E13 F1 84			sbc (:bp2),y
  6743 3E15 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6744 3E17 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6745 3E19 A5 9F			lda :STACKORIGIN+9
  6746 3E1B 91 84			sta (:bp2),y
  6747 3E1D C8				iny
  6748 3E1E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6749 3E20 91 84			sta (:bp2),y
  6750
  6751 				; optimize OK (service.pas), line = 1215
  6752
  6753 3E22 A0 00			ldy #BALL.X-DATAORIGIN
  6754 3E24 A9 14			lda #$14
  6755 3E26 38 F1 84			sub (:bp2),y
  6756 3E29 85 9F			sta :STACKORIGIN+9
  6757 3E2B C8				iny
  6758 3E2C A9 00			lda #$00
  6759 3E2E F1 84			sbc (:bp2),y
  6760 3E30 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6761 3E32 A0 00			ldy #BALL.X-DATAORIGIN
  6762 3E34 A5 9F			lda :STACKORIGIN+9
  6763 3E36 91 84			sta (:bp2),y
  6764 3E38 C8				iny
  6765 3E39 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6766 3E3B 91 84			sta (:bp2),y
  6767
  6768 				; optimize OK (service.pas), line = 1216
  6769
  6770 3E3D A0 04			ldy #BALL.FINEX-DATAORIGIN
  6771 3E3F A9 FF			lda #$FF
  6772 3E41 51 84			eor (:bp2),y
  6773 3E43 85 9F			sta :STACKORIGIN+9
  6774 3E45 C8				iny
  6775 3E46 A9 00			lda #$00
  6776 3E48 F1 84			sbc (:bp2),y
  6777 3E4A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6778 3E4C A0 04			ldy #BALL.FINEX-DATAORIGIN
  6779 3E4E A5 9F			lda :STACKORIGIN+9
  6780 3E50 91 84			sta (:bp2),y
  6781 3E52 C8				iny
  6782 3E53 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6783 3E55 91 84			sta (:bp2),y
  6784
  6785 				; optimize OK (service.pas), line = 1217
  6786
  6787 3E57 A9 F0			lda #$F0
  6788 3E59 8D 89 9C			sta BALL_BLOCK_SOUND.A
  6789 3E5C A9 00			lda #$00
  6790 3E5E 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
  6791 3E61 A9 05			lda #$05
  6792 3E63 8D 8B 9C			sta BALL_BLOCK_SOUND.B
  6793 3E66 A9 00			lda #$00
  6794 3E68 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
  6795 3E6B 20 6B 2A			jsr BALL_BLOCK_SOUND
  6796 3E6E			l_0D8D
  6797
  6798 				; optimize OK (service.pas), line = 1222
  6799
  6800 3E6E AC 8A A1 84 84 AC + 	mwy BALL :bp2
  6801 3E78 A0 02			ldy #BALL.Y-DATAORIGIN
  6802 3E7A B1 84			lda (:bp2),y
  6803 3E7C C8				iny
  6804 3E7D C9 0C			cmp #$0C
  6805 3E7F B1 84			lda (:bp2),y
  6806 3E81 E9 00			sbc #$00
  6807 3E83 50 02			svc
  6808 3E85 49 80			eor #$80
  6809 3E87 10 67			jpl l_0DC2
  6810
  6811 				; optimize OK (service.pas), line = 1224
  6812
  6813 3E89 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6814 3E8B A9 00			lda #$00
  6815 3E8D 38 F1 84			sub (:bp2),y
  6816 3E90 85 9F			sta :STACKORIGIN+9
  6817 3E92 C8				iny
  6818 3E93 A9 00			lda #$00
  6819 3E95 F1 84			sbc (:bp2),y
  6820 3E97 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6821 3E99 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6822 3E9B A5 9F			lda :STACKORIGIN+9
  6823 3E9D 91 84			sta (:bp2),y
  6824 3E9F C8				iny
  6825 3EA0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6826 3EA2 91 84			sta (:bp2),y
  6827
  6828 				; optimize OK (service.pas), line = 1225
  6829
  6830 3EA4 A0 02			ldy #BALL.Y-DATAORIGIN
  6831 3EA6 A9 18			lda #$18
  6832 3EA8 38 F1 84			sub (:bp2),y
  6833 3EAB 85 9F			sta :STACKORIGIN+9
  6834 3EAD C8				iny
  6835 3EAE A9 00			lda #$00
  6836 3EB0 F1 84			sbc (:bp2),y
  6837 3EB2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6838 3EB4 A0 02			ldy #BALL.Y-DATAORIGIN
  6839 3EB6 A5 9F			lda :STACKORIGIN+9
  6840 3EB8 91 84			sta (:bp2),y
  6841 3EBA C8				iny
  6842 3EBB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6843 3EBD 91 84			sta (:bp2),y
  6844
  6845 				; optimize OK (service.pas), line = 1226
  6846
  6847 3EBF A0 06			ldy #BALL.FINEY-DATAORIGIN
  6848 3EC1 A9 FF			lda #$FF
  6849 3EC3 51 84			eor (:bp2),y
  6850 3EC5 85 9F			sta :STACKORIGIN+9
  6851 3EC7 C8				iny
  6852 3EC8 A9 00			lda #$00
  6853 3ECA F1 84			sbc (:bp2),y
  6854 3ECC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6855 3ECE A0 06			ldy #BALL.FINEY-DATAORIGIN
  6856 3ED0 A5 9F			lda :STACKORIGIN+9
  6857 3ED2 91 84			sta (:bp2),y
  6858 3ED4 C8				iny
  6859 3ED5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6860 3ED7 91 84			sta (:bp2),y
  6861
  6862 				; optimize OK (service.pas), line = 1227
  6863
  6864 3ED9 A9 F0			lda #$F0
  6865 3EDB 8D 89 9C			sta BALL_BLOCK_SOUND.A
  6866 3EDE A9 00			lda #$00
  6867 3EE0 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
  6868 3EE3 A9 05			lda #$05
  6869 3EE5 8D 8B 9C			sta BALL_BLOCK_SOUND.B
  6870 3EE8 A9 00			lda #$00
  6871 3EEA 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
  6872 3EED 20 6B 2A			jsr BALL_BLOCK_SOUND
  6873 3EF0			l_0DC2
  6874
  6875 				; optimize OK (service.pas), line = 1235
  6876
  6877 3EF0 AC 8A A1 84 84 AC + 	mwy BALL :bp2
  6878 3EFA A0 02			ldy #BALL.Y-DATAORIGIN
  6879 3EFC B1 84			lda (:bp2),y
  6880 3EFE 18 69 03			add #$03
  6881 3F01 85 9F			sta :STACKORIGIN+9
  6882 3F03 C8				iny
  6883 3F04 B1 84			lda (:bp2),y
  6884 3F06 69 00			adc #$00
  6885 3F08 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6886 3F0A A0 01			ldy #1
  6887 3F0C A5 9F			lda :STACKORIGIN+9
  6888 3F0E C9 B9			cmp #$B9
  6889 3F10 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6890 3F12 E9 00			sbc #$00
  6891 3F14 50 02			svc
  6892 3F16 49 80			eor #$80
  6893 3F18 10 01			bpl @+
  6894 3F1A 88				dey
  6895 				@
  6896 3F1B 84 9F			sty :STACKORIGIN+9
  6897 3F1D A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6898 3F1F B1 84			lda (:bp2),y
  6899 3F21 85 A0			sta :STACKORIGIN+10
  6900 3F23 C8				iny
  6901 3F24 B1 84			lda (:bp2),y
  6902 3F26 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6903 3F28 A0 01			ldy #1
  6904 3F2A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6905 3F2C 30 04			bmi @+
  6906 3F2E 05 A0			ora :STACKORIGIN+10
  6907 3F30 D0 01			sne
  6908 				@
  6909 3F32 88				dey
  6910 				@
  6911 3F33 98				tya
  6912 3F34 25 9F			and :STACKORIGIN+9
  6913 3F36 85 9F			sta :STACKORIGIN+9
  6914 3F38 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  6915 3F3A B1 84			lda (:bp2),y
  6916 3F3C 85 A0			sta :STACKORIGIN+10
  6917 3F3E C8				iny
  6918 3F3F B1 84			lda (:bp2),y
  6919 3F41 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6920 3F43 A0 01			ldy #1
  6921 3F45 A5 A0			lda :STACKORIGIN+10
  6922 3F47 C9 B9			cmp #$B9
  6923 3F49 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6924 3F4B E9 00			sbc #$00
  6925 3F4D 50 02			svc
  6926 3F4F 49 80			eor #$80
  6927 3F51 30 01			bmi @+
  6928 3F53 88				dey
  6929 				@
  6930 3F54 98				tya
  6931 3F55 25 9F			and :STACKORIGIN+9
  6932 3F57 D0 03 4C 8A 42		jeq l_0E11
  6933
  6934 				; optimize OK (service.pas), line = 1239
  6935
  6936 3F5C A0 00			ldy #BALL.X-DATAORIGIN
  6937 3F5E B1 84			lda (:bp2),y
  6938 3F60 85 9F			sta :STACKORIGIN+9
  6939 3F62 C8				iny
  6940 3F63 AD 1B 9D			lda VAUS.X
  6941 3F66 38 E9 03			sub #$03
  6942 3F69 85 A0			sta :STACKORIGIN+10
  6943 3F6B A9 00			lda #$00
  6944 3F6D E9 00			sbc #$00
  6945 3F6F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6946 3F71 A5 A0			lda :STACKORIGIN+10
  6947 3F73 C5 9F			cmp :STACKORIGIN+9
  6948 3F75 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6949 3F77 F1 84			sbc (:bp2),y
  6950 3F79 50 02			svc
  6951 3F7B 49 80			eor #$80
  6952 3F7D 30 03 4C 8A 42		jpl l_0E40
  6953 3F82 A0 00			ldy #BALL.X-DATAORIGIN
  6954 3F84 B1 84			lda (:bp2),y
  6955 3F86 85 A0			sta :STACKORIGIN+10
  6956 3F88 C8				iny
  6957 3F89 B1 84			lda (:bp2),y
  6958 3F8B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6959 3F8D AD 1B 9D			lda VAUS.X
  6960 3F90 18 6D 23 9D			add VAUS.WIDTH
  6961 3F94 85 A1			sta :STACKORIGIN+11
  6962 3F96 A9 00			lda #$00
  6963 3F98 69 00			adc #$00
  6964 3F9A 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6965 3F9C A5 A1			lda :STACKORIGIN+11
  6966 3F9E 18 69 03			add #$03
  6967 3FA1 85 A1			sta :STACKORIGIN+11
  6968 3FA3 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  6969 3FA5 69 00			adc #$00
  6970 3FA7 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  6971 3FA9 A9 00			lda #$00
  6972 3FAB 69 00			adc #$00
  6973 3FAD 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  6974 3FAF A9 00			lda #$00
  6975 3FB1 69 00			adc #$00
  6976 3FB3 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  6977 3FB5 A0 00			ldy #$00
  6978 3FB7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6979 3FB9 10 01			spl
  6980 3FBB 88				dey
  6981 3FBC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6982 3FBE 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  6983 3FC0 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  6984 3FC2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6985 3FC4 C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
  6986 3FC6 D0 10			bne @+
  6987 3FC8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6988 3FCA C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
  6989 3FCC D0 0A			bne @+
  6990 3FCE A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6991 3FD0 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  6992 3FD2 D0 04			bne @+
  6993 3FD4 A5 A0			lda :STACKORIGIN+10
  6994 3FD6 C5 A1			cmp :STACKORIGIN+11
  6995 				@
  6996 3FD8 90 03 4C 8A 42		jcs l_0E40
  6997 				@
  6998
  6999 				; optimize OK (service.pas), line = 1242
  7000
  7001 3FDD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7002 3FDF A9 00			lda #$00
  7003 3FE1 38 F1 84			sub (:bp2),y
  7004 3FE4 85 9F			sta :STACKORIGIN+9
  7005 3FE6 C8				iny
  7006 3FE7 A9 00			lda #$00
  7007 3FE9 F1 84			sbc (:bp2),y
  7008 3FEB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7009 3FED A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7010 3FEF A5 9F			lda :STACKORIGIN+9
  7011 3FF1 91 84			sta (:bp2),y
  7012 3FF3 C8				iny
  7013 3FF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7014 3FF6 91 84			sta (:bp2),y
  7015
  7016 				; optimize OK (service.pas), line = 1244
  7017
  7018 3FF8 AD 27 9D			lda VAUS.LETTER
  7019 3FFB C9 06			cmp #$06
  7020 3FFD D0 1D			jne l_0E64
  7021 3FFF A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7022 4001 B1 84			lda (:bp2),y
  7023 4003 D0 17			jne l_0E64
  7024
  7025 				; optimize OK (service.pas), line = 1246
  7026
  7027 4005 A0 1A			ldy #BALL.STM-DATAORIGIN
  7028 4007 91 84			sta (:bp2),y
  7029
  7030 				; optimize OK (service.pas), line = 1247
  7031
  7032 4009 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7033 400B A9 01			lda #$01
  7034 400D 91 84			sta (:bp2),y
  7035
  7036 				; optimize OK (service.pas), line = 1248
  7037
  7038 400F A0 00			ldy #BALL.X-DATAORIGIN
  7039 4011 B1 84			lda (:bp2),y
  7040 4013 C8				iny
  7041 4014 38 ED 1B 9D			sub VAUS.X
  7042 4018 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7043 401A 91 84			sta (:bp2),y
  7044 401C			l_0E64
  7045
  7046 				; optimize OK (service.pas), line = 1251
  7047
  7048 401C A9 2C			lda #$2C
  7049 401E 8D 89 9C			sta BALL_BLOCK_SOUND.A
  7050 4021 A9 01			lda #$01
  7051 4023 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
  7052 4026 A9 06			lda #$06
  7053 4028 8D 8B 9C			sta BALL_BLOCK_SOUND.B
  7054 402B A9 00			lda #$00
  7055 402D 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
  7056 4030 20 6B 2A			jsr BALL_BLOCK_SOUND
  7057
  7058 				; optimize OK (service.pas), line = 1255
  7059
  7060 4033 AC 8A A1 84 84 AC + 	mwy BALL :bp2
  7061 403D A0 00			ldy #BALL.X-DATAORIGIN
  7062 403F B1 84			lda (:bp2),y
  7063 4041 85 9F			sta :STACKORIGIN+9
  7064 4043 C8				iny
  7065 4044 B1 84			lda (:bp2),y
  7066 4046 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7067 4048 AD 1B 9D			lda VAUS.X
  7068 404B 18 69 0A			add #$0A
  7069 404E 85 A0			sta :STACKORIGIN+10
  7070 4050 A9 00			lda #$00
  7071 4052 69 00			adc #$00
  7072 4054 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7073 4056 A0 00			ldy #$00
  7074 4058 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7075 405A 10 01			spl
  7076 405C 88				dey
  7077 405D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7078 405F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7079 4061 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7080 4063				.LOCAL
  7081 4063 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7082 4065 38 E9 00			sub #$00
  7083 4068 D0 1C			bne L4
  7084 406A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7085 406C C9 00			cmp #$00
  7086 406E D0 0A			bne L1
  7087 4070 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7088 4072 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7089 4074 D0 04			bne L1
  7090 4076 A5 9F			lda :STACKORIGIN+9
  7091 4078 C5 A0			cmp :STACKORIGIN+10
  7092 407A F0 10		L1	beq L5
  7093 407C B0 04			bcs L3
  7094 407E A9 FF			lda #$FF
  7095 4080 D0 0A			bne L5
  7096 4082 A9 01		L3	lda #$01
  7097 4084 D0 06			bne L5
  7098 4086 50 04		L4	bvc L5
  7099 4088 49 FF			eor #$FF
  7100 408A 09 01			ora #$01
  7101 408C			L5
  7102 					.ENDL
  7103 408C 30 03 4C 4F 41		jpl l_0E94
  7104
  7105 				; optimize OK (service.pas), line = 1258
  7106
  7107 4091 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7108 4093 A9 00			lda #$00
  7109 4095 38 F1 84			sub (:bp2),y
  7110 4098 85 9F			sta :STACKORIGIN+9
  7111 409A C8				iny
  7112 409B A9 00			lda #$00
  7113 409D F1 84			sbc (:bp2),y
  7114 409F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7115 40A1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7116 40A3 A5 9F			lda :STACKORIGIN+9
  7117 40A5 91 84			sta (:bp2),y
  7118 40A7 C8				iny
  7119 40A8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7120 40AA 91 84			sta (:bp2),y
  7121
  7122 				; optimize OK (service.pas), line = 1262
  7123
  7124 40AC AD 8A A1			lda BALL
  7125 40AF 8D 61 A1			sta GET_BALL_DIRECTION.BALL
  7126 40B2 AD 8B A1			lda BALL+1
  7127 40B5 8D 62 A1			sta GET_BALL_DIRECTION.BALL+1
  7128 40B8 20 F0 39			jsr GET_BALL_DIRECTION
  7129 40BB E8				inx
  7130 40BC AD 65 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7131 40C1 AD 66 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7132 40C6 A9 1E			lda #$1E
  7133 40C8 20 3B 25			jsr SYSTEM.RANDOM.@010180000
  7134 40CB B5 96			lda :STACKORIGIN,x
  7135 40CD 18 6D E1 9B			add SYSTEM.RANDOM.@010180000.RESULT
  7136 40D1 8D 92 A1			sta ANGLE
  7137 40D4 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7138 40D6 69 00			adc #$00
  7139 40D8 8D 93 A1			sta ANGLE+1
  7140 40DB CA				dex
  7141
  7142 				; optimize OK (service.pas), line = 1270
  7143
  7144 40DC A9 A0			lda #$A0
  7145 40DE 8D DE A0			sta MIN.A
  7146 40E1 A9 00			lda #$00
  7147 40E3 8D DF A0			sta MIN.A+1
  7148 40E6 AD 92 A1			lda ANGLE
  7149 40E9 8D E0 A0			sta MIN.B
  7150 40EC AD 93 A1			lda ANGLE+1
  7151 40EF 8D E1 A0			sta MIN.B+1
  7152 40F2 20 3C 2D			jsr MIN
  7153 40F5 A9 78			lda #$78
  7154 40F7 8D D8 A0			sta MAX.A
  7155 40FA A9 00			lda #$00
  7156 40FC 8D D9 A0			sta MAX.A+1
  7157 40FF AD E2 A0			lda MIN.RESULT
  7158 4102 8D DA A0			sta MAX.B
  7159 4105 AD E3 A0			lda MIN.RESULT+1
  7160 4108 8D DB A0			sta MAX.B+1
  7161 410B 20 11 2D			jsr MAX
  7162 410E AD 8A A1			lda BALL
  7163 4111 8D 57 A1			sta SET_BALL_DIRECTION.BALL
  7164 4114 AD 8B A1			lda BALL+1
  7165 4117 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
  7166 411A AD DC A0			lda MAX.RESULT
  7167 411D 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
  7168 4120 AD DD A0			lda MAX.RESULT+1
  7169 4123 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
  7170 4126 20 65 38			jsr SET_BALL_DIRECTION
  7171
  7172 				; optimize OK (service.pas), line = 1275
  7173
  7174 4129 AC 8A A1 84 84 AC + 	mwy BALL :bp2
  7175 4133 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7176 4135 B1 84			lda (:bp2),y
  7177 4137 8D 4D A1			sta SET_BALL_SPEED.SPEED
  7178 413A C8				iny
  7179 413B B1 84			lda (:bp2),y
  7180 413D 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
  7181 4140 AD 8A A1			lda BALL
  7182 4143 8D 49 A1			sta SET_BALL_SPEED.BALL
  7183 4146 AD 8B A1			lda BALL+1
  7184 4149 8D 4A A1			sta SET_BALL_SPEED.BALL+1
  7185 414C 20 55 36			jsr SET_BALL_SPEED
  7186 414F			l_0E94
  7187
  7188 				; optimize OK (service.pas), line = 1281
  7189
  7190 414F AC 8A A1 84 84 AC + 	mwy BALL :bp2
  7191 4159 A0 00			ldy #BALL.X-DATAORIGIN
  7192 415B B1 84			lda (:bp2),y
  7193 415D 85 9F			sta :STACKORIGIN+9
  7194 415F C8				iny
  7195 4160 B1 84			lda (:bp2),y
  7196 4162 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7197 4164 AD 1B 9D			lda VAUS.X
  7198 4167 18 6D 23 9D			add VAUS.WIDTH
  7199 416B 85 A0			sta :STACKORIGIN+10
  7200 416D A9 00			lda #$00
  7201 416F 69 00			adc #$00
  7202 4171 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7203 4173 A5 A0			lda :STACKORIGIN+10
  7204 4175 38 E9 0A			sub #$0A
  7205 4178 85 A0			sta :STACKORIGIN+10
  7206 417A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7207 417C E9 00			sbc #$00
  7208 417E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7209 4180 A9 00			lda #$00
  7210 4182 E9 00			sbc #$00
  7211 4184 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7212 4186 A9 00			lda #$00
  7213 4188 E9 00			sbc #$00
  7214 418A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7215 418C A0 00			ldy #$00
  7216 418E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7217 4190 10 01			spl
  7218 4192 88				dey
  7219 4193 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7220 4195 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7221 4197 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7222 4199				.LOCAL
  7223 4199 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7224 419B 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
  7225 419E D0 1C			bne L4
  7226 41A0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7227 41A2 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  7228 41A4 D0 0A			bne L1
  7229 41A6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7230 41A8 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7231 41AA D0 04			bne L1
  7232 41AC A5 9F			lda :STACKORIGIN+9
  7233 41AE C5 A0			cmp :STACKORIGIN+10
  7234 41B0 F0 10		L1	beq L5
  7235 41B2 B0 04			bcs L3
  7236 41B4 A9 FF			lda #$FF
  7237 41B6 D0 0A			bne L5
  7238 41B8 A9 01		L3	lda #$01
  7239 41BA D0 06			bne L5
  7240 41BC 50 04		L4	bvc L5
  7241 41BE 49 FF			eor #$FF
  7242 41C0 09 01			ora #$01
  7243 41C2			L5
  7244 					.ENDL
  7245 41C2 10 03 4C 8A 42		jmi l_0ED5
  7246 41C7 D0 03 4C 8A 42		jeq l_0ED5
  7247
  7248 				; optimize OK (service.pas), line = 1283
  7249
  7250 41CC A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7251 41CE A9 00			lda #$00
  7252 41D0 38 F1 84			sub (:bp2),y
  7253 41D3 85 9F			sta :STACKORIGIN+9
  7254 41D5 C8				iny
  7255 41D6 A9 00			lda #$00
  7256 41D8 F1 84			sbc (:bp2),y
  7257 41DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7258 41DC A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7259 41DE A5 9F			lda :STACKORIGIN+9
  7260 41E0 91 84			sta (:bp2),y
  7261 41E2 C8				iny
  7262 41E3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7263 41E5 91 84			sta (:bp2),y
  7264
  7265 				; optimize OK (service.pas), line = 1284
  7266
  7267 41E7 AD 8A A1			lda BALL
  7268 41EA 8D 61 A1			sta GET_BALL_DIRECTION.BALL
  7269 41ED AD 8B A1			lda BALL+1
  7270 41F0 8D 62 A1			sta GET_BALL_DIRECTION.BALL+1
  7271 41F3 20 F0 39			jsr GET_BALL_DIRECTION
  7272 41F6 E8				inx
  7273 41F7 AD 65 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7274 41FC AD 66 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7275 4201 A9 1E			lda #$1E
  7276 4203 20 3B 25			jsr SYSTEM.RANDOM.@010180000
  7277 4206 B5 96			lda :STACKORIGIN,x
  7278 4208 38 ED E1 9B			sub SYSTEM.RANDOM.@010180000.RESULT
  7279 420C 8D 92 A1			sta ANGLE
  7280 420F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7281 4211 E9 00			sbc #$00
  7282 4213 8D 93 A1			sta ANGLE+1
  7283 4216 CA				dex
  7284
  7285 				; optimize OK (service.pas), line = 1285
  7286
  7287 4217 A9 14			lda #$14
  7288 4219 8D D8 A0			sta MAX.A
  7289 421C A9 00			lda #$00
  7290 421E 8D D9 A0			sta MAX.A+1
  7291 4221 AD 92 A1			lda ANGLE
  7292 4224 8D DA A0			sta MAX.B
  7293 4227 AD 93 A1			lda ANGLE+1
  7294 422A 8D DB A0			sta MAX.B+1
  7295 422D 20 11 2D			jsr MAX
  7296 4230 A9 3C			lda #$3C
  7297 4232 8D DE A0			sta MIN.A
  7298 4235 A9 00			lda #$00
  7299 4237 8D DF A0			sta MIN.A+1
  7300 423A AD DC A0			lda MAX.RESULT
  7301 423D 8D E0 A0			sta MIN.B
  7302 4240 AD DD A0			lda MAX.RESULT+1
  7303 4243 8D E1 A0			sta MIN.B+1
  7304 4246 20 3C 2D			jsr MIN
  7305 4249 AD 8A A1			lda BALL
  7306 424C 8D 57 A1			sta SET_BALL_DIRECTION.BALL
  7307 424F AD 8B A1			lda BALL+1
  7308 4252 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
  7309 4255 AD E2 A0			lda MIN.RESULT
  7310 4258 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
  7311 425B AD E3 A0			lda MIN.RESULT+1
  7312 425E 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
  7313 4261 20 65 38			jsr SET_BALL_DIRECTION
  7314
  7315 				; optimize OK (service.pas), line = 1286
  7316
  7317 4264 AC 8A A1 84 84 AC + 	mwy BALL :bp2
  7318 426E A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7319 4270 B1 84			lda (:bp2),y
  7320 4272 8D 4D A1			sta SET_BALL_SPEED.SPEED
  7321 4275 C8				iny
  7322 4276 B1 84			lda (:bp2),y
  7323 4278 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
  7324 427B AD 8A A1			lda BALL
  7325 427E 8D 49 A1			sta SET_BALL_SPEED.BALL
  7326 4281 AD 8B A1			lda BALL+1
  7327 4284 8D 4A A1			sta SET_BALL_SPEED.BALL+1
  7328 4287 20 55 36			jsr SET_BALL_SPEED
  7329 428A			l_0ED5
  7330 428A			l_0E40
  7331 428A			l_0E11
  7332
  7333 				; optimize OK (service.pas), line = 1298
  7334
  7335 428A AC 8A A1 84 84 AC + 	mwy BALL :bp2
  7336 4294 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7337 4296 B1 84			lda (:bp2),y
  7338 4298 85 9F			sta :STACKORIGIN+9
  7339 429A C8				iny
  7340 429B B1 84			lda (:bp2),y
  7341 429D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7342 429F A0 01			ldy #1
  7343 42A1 A5 9F			lda :STACKORIGIN+9
  7344 42A3 C9 B9			cmp #$B9
  7345 42A5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7346 42A7 E9 00			sbc #$00
  7347 42A9 50 02			svc
  7348 42AB 49 80			eor #$80
  7349 42AD 10 01			bpl @+
  7350 42AF 88				dey
  7351 				@
  7352 42B0 84 9F			sty :STACKORIGIN+9
  7353 42B2 A0 02			ldy #BALL.Y-DATAORIGIN
  7354 42B4 B1 84			lda (:bp2),y
  7355 42B6 85 A0			sta :STACKORIGIN+10
  7356 42B8 C8				iny
  7357 42B9 B1 84			lda (:bp2),y
  7358 42BB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7359 42BD A0 01			ldy #1
  7360 42BF A5 A0			lda :STACKORIGIN+10
  7361 42C1 C9 C9			cmp #$C9
  7362 42C3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7363 42C5 E9 00			sbc #$00
  7364 42C7 50 02			svc
  7365 42C9 49 80			eor #$80
  7366 42CB 10 01			bpl @+
  7367 42CD 88				dey
  7368 				@
  7369 42CE 98				tya
  7370 42CF 25 9F			and :STACKORIGIN+9
  7371 42D1 85 9F			sta :STACKORIGIN+9
  7372 42D3 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7373 42D5 B1 84			lda (:bp2),y
  7374 42D7 85 A0			sta :STACKORIGIN+10
  7375 42D9 C8				iny
  7376 42DA B1 84			lda (:bp2),y
  7377 42DC 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7378 42DE A0 01			ldy #1
  7379 42E0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7380 42E2 30 04			bmi @+
  7381 42E4 05 A0			ora :STACKORIGIN+10
  7382 42E6 D0 01			sne
  7383 				@
  7384 42E8 88				dey
  7385 				@
  7386 42E9 98				tya
  7387 42EA 25 9F			and :STACKORIGIN+9
  7388 42EC F0 15			jeq l_0F24
  7389
  7390 				; optimize OK (service.pas), line = 1300
  7391
  7392 42EE A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7393 42F0 A9 00			lda #$00
  7394 42F2 91 84			sta (:bp2),y
  7395
  7396 				; optimize OK (service.pas), line = 1302
  7397
  7398 42F4 AD 8A A1			lda BALL
  7399 42F7 8D 3E A1			sta REMOVE_BALL.BALL
  7400 42FA AD 8B A1			lda BALL+1
  7401 42FD 8D 3F A1			sta REMOVE_BALL.BALL+1
  7402 4300 20 B3 34			jsr REMOVE_BALL
  7403 4303			l_0F24
  7404
  7405 				; ------------------------------------------------------------
  7406
  7407 = A18A			BALL	= DATAORIGIN+$05EE
  7408 = 9B9C			BALL.X	= DATAORIGIN+$0000
  7409 = 9B9E			BALL.Y	= DATAORIGIN+$0002
  7410 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
  7411 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
  7412 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
  7413 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
  7414 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
  7415 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
  7416 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
  7417 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
  7418 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
  7419 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
  7420 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
  7421 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
  7422 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
  7423 = 9BB6			BALL.STM	= DATAORIGIN+$001A
  7424 = A18E			X	= DATAORIGIN+$05F2
  7425 = A190			Y	= DATAORIGIN+$05F4
  7426 = A192			ANGLE	= DATAORIGIN+$05F6
  7427
  7428 = A18A			@VarData	= BALL
  7429 = 0008			@VarDataSize	= 8
  7430
  7431 4303			@exit
  7432 					.ifdef @new
  7433 					lda <@VarData
  7434 					sta :ztmp
  7435 					lda >@VarData
  7436 					ldy #@VarDataSize-1
  7437 					jmp @FreeMem
  7438 					els
  7439 4303 60				rts						; ret
  7440 					eif
  7441 				.endl
  7442
  7443 4304			.local	MODIFY_VAUS					; PROCEDURE
  7444
  7445 				; optimize OK (service.pas), line = 1309
  7446
  7447 4304 AD 23 9D			lda VAUS.WIDTH
  7448 4307 8D 21 9D			sta VAUS.OLDLEN
  7449 430A A9 00			lda #$00
  7450 430C 8D 22 9D			sta VAUS.OLDLEN+1
  7451
  7452 				; optimize OK (service.pas), line = 1310
  7453
  7454 430F AD AB 9C			lda PLAYVAUS.WIDTH
  7455 4312 8D 23 9D			sta VAUS.WIDTH
  7456
  7457 				; optimize OK (service.pas), line = 1311
  7458
  7459 4315 AD AD 9C			lda PLAYVAUS.HEIGHT
  7460 4318 8D 24 9D			sta VAUS.HEIGHT
  7461
  7462 431B			@exit
  7463 					.ifdef @new
  7464 					lda <@VarData
  7465 					sta :ztmp
  7466 					lda >@VarData
  7467 					ldy #@VarDataSize-1
  7468 					jmp @FreeMem
  7469 					els
  7470 431B 60				rts						; ret
  7471 					eif
  7472 				.endl
  7473
  7474 431C			.local	SET_VAUS					; PROCEDURE
  7475
  7476 				; optimize OK (service.pas), line = 1316
  7477
  7478 431C A9 5F			lda #$5F
  7479 431E 8D 1B 9D			sta VAUS.X
  7480
  7481 				; optimize OK (service.pas), line = 1317
  7482
  7483 4321 A9 B8			lda #$B8
  7484 4323 8D 1C 9D			sta VAUS.Y
  7485
  7486 				; optimize OK (service.pas), line = 1319
  7487
  7488 4326 A9 FF			lda #$FF
  7489 4328 8D 1D 9D			sta VAUS.OLDX
  7490 432B 8D 1E 9D			sta VAUS.OLDX+1
  7491
  7492 				; optimize OK (service.pas), line = 1320
  7493
  7494 432E 8D 1F 9D			sta VAUS.OLDY
  7495 4331 8D 20 9D			sta VAUS.OLDY+1
  7496
  7497 				; optimize OK (service.pas), line = 1321
  7498
  7499 4334 A9 00			lda #$00
  7500 4336 8D 26 9D			sta VAUS.IFLASH
  7501
  7502 				; optimize OK (service.pas), line = 1325
  7503
  7504 4339 8D 25 9D			sta VAUS.FLASH
  7505
  7506 				; optimize OK (service.pas), line = 1329
  7507
  7508 433C AD AB 9C			lda PLAYVAUS.WIDTH
  7509 433F 8D 23 9D			sta VAUS.WIDTH
  7510
  7511 				; optimize OK (service.pas), line = 1330
  7512
  7513 4342 AD AD 9C			lda PLAYVAUS.HEIGHT
  7514 4345 8D 24 9D			sta VAUS.HEIGHT
  7515
  7516 				; optimize OK (service.pas), line = 1331
  7517
  7518 4348 AD 23 9D			lda VAUS.WIDTH
  7519 434B 8D 21 9D			sta VAUS.OLDLEN
  7520 434E A9 00			lda #$00
  7521 4350 8D 22 9D			sta VAUS.OLDLEN+1
  7522
  7523 				; optimize OK (service.pas), line = 1332
  7524
  7525 4353 A9 FF			lda #$FF
  7526 4355 8D 27 9D			sta VAUS.LETTER
  7527
  7528 4358			@exit
  7529 					.ifdef @new
  7530 					lda <@VarData
  7531 					sta :ztmp
  7532 					lda >@VarData
  7533 					ldy #@VarDataSize-1
  7534 					jmp @FreeMem
  7535 					els
  7536 4358 60				rts						; ret
  7537 					eif
  7538 				.endl
  7539
  7540 4359			.local	START_VAUS					; PROCEDURE
  7541
  7542 				; optimize OK (service.pas), line = 1339
  7543
  7544 4359 A9 D8			lda #$D8
  7545 435B 38 ED 23 9D			sub VAUS.WIDTH
  7546 435F 85 9F			sta :STACKORIGIN+9
  7547 4361 A9 00			lda #$00
  7548 4363 E9 00			sbc #$00
  7549 4365 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7550 4367 A0 00			ldy #$00
  7551 4369 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7552 436B 10 01			spl
  7553 436D 88				dey
  7554 436E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7555 4370 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7556 4372 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7557 4374 A5 9F			lda :STACKORIGIN+9
  7558 4376 38 E9 01			sub #$01
  7559 4379 85 9F			sta :STACKORIGIN+9
  7560 437B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7561 437D E9 00			sbc #$00
  7562 437F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7563 4381 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7564 4383 E9 00			sbc #$00
  7565 4385 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  7566 4387 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7567 4389 E9 00			sbc #$00
  7568 438B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  7569 438D 06 9F			asl :STACKORIGIN+9
  7570 438F 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  7571 4391 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  7572 4393 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
  7573 4395 A9 14			lda #$14
  7574 4397 8D 93 9C			sta MOUSE_X_LIMIT.MN
  7575 439A A9 00			lda #$00
  7576 439C 8D 94 9C			sta MOUSE_X_LIMIT.MN+1
  7577 439F A5 9F			lda :STACKORIGIN+9
  7578 43A1 8D 95 9C			sta MOUSE_X_LIMIT.MX
  7579 43A4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7580 43A6 8D 96 9C			sta MOUSE_X_LIMIT.MX+1
  7581 43A9 20 B2 2A			jsr MOUSE_X_LIMIT
  7582
  7583 				; optimize OK (service.pas), line = 1340
  7584
  7585 43AC A9 BE			lda #$BE
  7586 43AE 8D 97 9C			sta MOUSEMOVE.X
  7587 43B1 A9 00			lda #$00
  7588 43B3 8D 98 9C			sta MOUSEMOVE.X+1
  7589 43B6 A9 B8			lda #$B8
  7590 43B8 8D 99 9C			sta MOUSEMOVE.Y
  7591 43BB A9 00			lda #$00
  7592 43BD 8D 9A 9C			sta MOUSEMOVE.Y+1
  7593 43C0 20 B3 2A			jsr MOUSEMOVE
  7594
  7595 				; optimize OK (service.pas), line = 1341
  7596
  7597 43C3 A9 5F			lda #$5F
  7598 43C5 8D 1B 9D			sta VAUS.X
  7599
  7600 				; optimize OK (service.pas), line = 1342
  7601
  7602 43C8 A9 B8			lda #$B8
  7603 43CA 8D 1C 9D			sta VAUS.Y
  7604
  7605 43CD			@exit
  7606 					.ifdef @new
  7607 					lda <@VarData
  7608 					sta :ztmp
  7609 					lda >@VarData
  7610 					ldy #@VarDataSize-1
  7611 					jmp @FreeMem
  7612 					els
  7613 43CD 60				rts						; ret
  7614 					eif
  7615 				.endl
  7616
  7617 43CE			.local	REMOVE_VAUS					; PROCEDURE
  7618
  7619 				; optimize OK (service.pas), line = 1356
  7620
  7621 43CE AD 1F 9D			lda VAUS.OLDY
  7622 43D1 8D 94 A1			sta Y
  7623 43D4 18 6D 24 9D			add VAUS.HEIGHT
  7624 43D8 8D DC 43			sta @FORTMP_0FA4_0
  7625
  7626 43DB			l_0FA7
  7627 				; --- ForToDoCondition
  7628 43DB A9 00			lda @FORTMP_0FA4_0::#$00
  7629 43DD CD 94 A1			cmp Y
  7630 43E0 B0 03 4C 96 44		jcc l_0FB5
  7631
  7632 				; optimize OK (service.pas), line = 1359
  7633
  7634 43E5 AD 1D 9D			lda VAUS.OLDX
  7635 43E8 85 A0			sta :STACKORIGIN+10
  7636 43EA A0 00			ldy #$00
  7637 43EC AD 1E 9D			lda VAUS.OLDX+1
  7638 43EF 10 01			spl
  7639 43F1 88				dey
  7640 43F2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7641 43F4 84 C1			sty :STACKORIGIN+STACKWIDTH*2+11
  7642 43F6 84 D1			sty :STACKORIGIN+STACKWIDTH*3+11
  7643 43F8 A9 50			lda #$50
  7644 43FA 18 65 B1			add :STACKORIGIN+STACKWIDTH+11
  7645 43FD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7646 43FF A9 00			lda #$00
  7647 4401 65 C1			adc :STACKORIGIN+STACKWIDTH*2+11
  7648 4403 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7649 4405 A9 00			lda #$00
  7650 4407 65 D1			adc :STACKORIGIN+STACKWIDTH*3+11
  7651 4409 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7652 440B AC 94 A1			ldy Y
  7653 440E A5 A0			lda :STACKORIGIN+10
  7654 4410 18 79 00 C0			add adr.ROW,y
  7655 4414 8D BB A0			sta BLITROW.DST
  7656 4417 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7657 4419 79 FB C0			adc adr.ROW+251,y
  7658 441C 8D BC A0			sta BLITROW.DST+1
  7659 441F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7660 4421 69 00			adc #$00
  7661 4423 8D BD A0			sta BLITROW.DST+2
  7662 4426 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7663 4428 69 00			adc #$00
  7664 442A 8D BE A0			sta BLITROW.DST+3
  7665 442D AD 1D 9D			lda VAUS.OLDX
  7666 4430 85 A2			sta :STACKORIGIN+12
  7667 4432 A0 00			ldy #$00
  7668 4434 AD 1E 9D			lda VAUS.OLDX+1
  7669 4437 10 01			spl
  7670 4439 88				dey
  7671 443A 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  7672 443C 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
  7673 443E 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
  7674 4440 AD A7 9C			lda PLAYSCREEN.OFS
  7675 4443 18 65 A2			add :STACKORIGIN+12
  7676 4446 85 A1			sta :STACKORIGIN+11
  7677 4448 AD A8 9C			lda PLAYSCREEN.OFS+1
  7678 444B 65 B2			adc :STACKORIGIN+STACKWIDTH+12
  7679 444D 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7680 444F AD A9 9C			lda PLAYSCREEN.OFS+2
  7681 4452 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
  7682 4454 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  7683 4456 AD AA 9C			lda PLAYSCREEN.OFS+3
  7684 4459 65 D2			adc :STACKORIGIN+STACKWIDTH*3+12
  7685 445B 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  7686 445D AC 94 A1			ldy Y
  7687 4460 A5 A1			lda :STACKORIGIN+11
  7688 4462 18 79 00 C0			add adr.ROW,y
  7689 4466 8D B7 A0			sta BLITROW.SRC
  7690 4469 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7691 446B 79 FB C0			adc adr.ROW+251,y
  7692 446E 8D B8 A0			sta BLITROW.SRC+1
  7693 4471 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  7694 4473 69 00			adc #$00
  7695 4475 8D B9 A0			sta BLITROW.SRC+2
  7696 4478 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  7697 447A 69 00			adc #$00
  7698 447C 8D BA A0			sta BLITROW.SRC+3
  7699 447F AD 21 9D			lda VAUS.OLDLEN
  7700 4482 8D BF A0			sta BLITROW.SIZE
  7701 4485 AD 22 9D			lda VAUS.OLDLEN+1
  7702 4488 8D C0 A0			sta BLITROW.SIZE+1
  7703 448B 20 F8 2B			jsr BLITROW
  7704
  7705 				; --- ForToDoEpilog
  7706 448E EE 94 A1			inc Y
  7707 4491 F0 03 4C DB 43		jne l_0FA7
  7708 4496			l_0FB5
  7709
  7710 				; optimize OK (service.pas), line = 1361
  7711
  7712 4496 AD 23 9D			lda VAUS.WIDTH
  7713 4499 8D 21 9D			sta VAUS.OLDLEN
  7714 449C A9 00			lda #$00
  7715 449E 8D 22 9D			sta VAUS.OLDLEN+1
  7716
  7717 				; ------------------------------------------------------------
  7718
  7719 = A194			Y	= DATAORIGIN+$05F8
  7720
  7721 = A194			@VarData	= Y
  7722 = 0001			@VarDataSize	= 1
  7723
  7724 44A1			@exit
  7725 					.ifdef @new
  7726 					lda <@VarData
  7727 					sta :ztmp
  7728 					lda >@VarData
  7729 					ldy #@VarDataSize-1
  7730 					jmp @FreeMem
  7731 					els
  7732 44A1 60				rts						; ret
  7733 					eif
  7734 				.endl
  7735
  7736 44A2			.local	PLACE_VAUS					; PROCEDURE
  7737
  7738 				; optimize FAIL (0, service.pas), line = 1371
  7739
  7740 44A2 EE 26 9D			inc VAUS.IFLASH
  7741
  7742 				; optimize OK (service.pas), line = 1373
  7743
  7744 44A5 AD 26 9D			lda VAUS.IFLASH
  7745 44A8 C9 0B			cmp #$0B
  7746 44AA 90 08			jcc l_0FF9
  7747
  7748 				; optimize FAIL (0, service.pas), line = 1375
  7749
  7750 44AC EE 25 9D			inc VAUS.FLASH
  7751
  7752 				; optimize OK (service.pas), line = 1376
  7753
  7754 44AF A9 00			lda #$00
  7755 44B1 8D 26 9D			sta VAUS.IFLASH
  7756 44B4			l_0FF9
  7757
  7758 				; optimize OK (service.pas), line = 1379
  7759
  7760 44B4 AD 25 9D			lda VAUS.FLASH
  7761 44B7 C9 0B			cmp #$0B
  7762 44B9 90 05			jcc l_1016
  7763 44BB A9 00			lda #$00
  7764 44BD 8D 25 9D			sta VAUS.FLASH
  7765 44C0			l_1016
  7766
  7767 				; optimize OK (service.pas), line = 1389
  7768
  7769 44C0 A9 00			lda #$00
  7770 44C2 8D 96 A1			sta Y
  7771 44C5 AC 24 9D			ldy VAUS.HEIGHT
  7772 44C8 88				dey
  7773 44C9 8C CD 44			sty @FORTMP_1029_0
  7774
  7775 44CC			l_102C
  7776 				; --- ForToDoCondition
  7777 44CC A9 00			lda @FORTMP_1029_0::#$00
  7778 44CE CD 96 A1			cmp Y
  7779 44D1 B0 03 4C 10 46		jcc l_103A
  7780
  7781 				; optimize OK (service.pas), line = 1393
  7782
  7783 44D6 AD 23 9D			lda VAUS.WIDTH
  7784 44D9 85 8E			sta :ecx
  7785 44DB AD 96 A1			lda Y
  7786 44DE 85 86			sta :eax
  7787 					.ifdef fmulinit
  7788 					fmulu_8
  7789 					els
  7790 44E0 20 EE 12			imulCL
  7791 					eif
  7792 44E3 8D 98 A1			sta CNT+1
  7793 44E6 A5 86			lda :eax
  7794 44E8 8D 97 A1			sta CNT
  7795
  7796 				; optimize OK (service.pas), line = 1395
  7797
  7798 44EB AD 96 A1			lda Y
  7799 44EE 18 6D 1C 9D			add VAUS.Y
  7800 44F2 A8				tay
  7801 44F3 AD 1B 9D			lda VAUS.X
  7802 44F6 18 79 00 C0			add adr.ROW,y
  7803 44FA 8D A9 A0			sta BLITZERO.DST
  7804 44FD A9 50			lda #$50
  7805 44FF 79 FB C0			adc adr.ROW+251,y
  7806 4502 8D AA A0			sta BLITZERO.DST+1
  7807 4505 A9 00			lda #$00
  7808 4507 69 00			adc #$00
  7809 4509 8D AB A0			sta BLITZERO.DST+2
  7810 450C A9 00			lda #$00
  7811 450E 69 00			adc #$00
  7812 4510 8D AC A0			sta BLITZERO.DST+3
  7813 4513 AD AF 9C			lda PLAYVAUS.OFS
  7814 4516 18 6D 97 A1			add CNT
  7815 451A 8D A5 A0			sta BLITZERO.SRC
  7816 451D AD B0 9C			lda PLAYVAUS.OFS+1
  7817 4520 6D 98 A1			adc CNT+1
  7818 4523 8D A6 A0			sta BLITZERO.SRC+1
  7819 4526 AD B1 9C			lda PLAYVAUS.OFS+2
  7820 4529 69 00			adc #$00
  7821 452B 8D A7 A0			sta BLITZERO.SRC+2
  7822 452E AD B2 9C			lda PLAYVAUS.OFS+3
  7823 4531 69 00			adc #$00
  7824 4533 8D A8 A0			sta BLITZERO.SRC+3
  7825 4536 AD 23 9D			lda VAUS.WIDTH
  7826 4539 8D AD A0			sta BLITZERO.SIZE
  7827 453C A9 00			lda #$00
  7828 453E 8D AE A0			sta BLITZERO.SIZE+1
  7829 4541 20 45 2B			jsr BLITZERO
  7830
  7831 				; optimize OK (service.pas), line = 1397
  7832
  7833 4544 AD 96 A1			lda Y
  7834 4547 C9 02			cmp #$02
  7835 4549 B0 03 4C 08 46		jcc l_1089
  7836 454E AD 24 9D			lda VAUS.HEIGHT
  7837 4551 E9 02			sbc #$02
  7838 4553 85 A1			sta :STACKORIGIN+11
  7839 4555 A9 00			lda #$00
  7840 4557 E9 00			sbc #$00
  7841 4559 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7842 455B AD 96 A1			lda Y
  7843 455E C5 A1			cmp :STACKORIGIN+11
  7844 4560 A9 00			lda #$00
  7845 4562 E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7846 4564 50 02			svc
  7847 4566 49 80			eor #$80
  7848 4568 30 03 4C 08 46		jpl l_1089
  7849
  7850 				; optimize OK (service.pas), line = 1400
  7851
  7852 456D AC 25 9D			ldy VAUS.FLASH
  7853 4570 B9 5E 10			lda adr.FLASH,y
  7854 4573 8D D0 A0			sta PUTBYTE.V
  7855 4576 AD 96 A1			lda Y
  7856 4579 18 6D 1C 9D			add VAUS.Y
  7857 457D A8				tay
  7858 457E AD 1B 9D			lda VAUS.X
  7859 4581 18 79 00 C0			add adr.ROW,y
  7860 4585 8D CC A0			sta PUTBYTE.DST
  7861 4588 A9 50			lda #$50
  7862 458A 79 FB C0			adc adr.ROW+251,y
  7863 458D 8D CD A0			sta PUTBYTE.DST+1
  7864 4590 A9 00			lda #$00
  7865 4592 69 00			adc #$00
  7866 4594 8D CE A0			sta PUTBYTE.DST+2
  7867 4597 A9 00			lda #$00
  7868 4599 69 00			adc #$00
  7869 459B 8D CF A0			sta PUTBYTE.DST+3
  7870 459E 20 BF 2C			jsr PUTBYTE
  7871
  7872 				; optimize OK (service.pas), line = 1403
  7873
  7874 45A1 AC 25 9D			ldy VAUS.FLASH
  7875 45A4 B9 5E 10			lda adr.FLASH,y
  7876 45A7 8D D0 A0			sta PUTBYTE.V
  7877 45AA AD 1B 9D			lda VAUS.X
  7878 45AD 18 6D 23 9D			add VAUS.WIDTH
  7879 45B1 85 A0			sta :STACKORIGIN+10
  7880 45B3 A9 50			lda #$50
  7881 45B5 69 00			adc #$00
  7882 45B7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7883 45B9 A9 00			lda #$00
  7884 45BB 69 00			adc #$00
  7885 45BD 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7886 45BF A9 00			lda #$00
  7887 45C1 69 00			adc #$00
  7888 45C3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7889 45C5 A5 A0			lda :STACKORIGIN+10
  7890 45C7 38 E9 01			sub #$01
  7891 45CA 85 A0			sta :STACKORIGIN+10
  7892 45CC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7893 45CE E9 00			sbc #$00
  7894 45D0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7895 45D2 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7896 45D4 E9 00			sbc #$00
  7897 45D6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7898 45D8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7899 45DA E9 00			sbc #$00
  7900 45DC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7901 45DE AD 96 A1			lda Y
  7902 45E1 18 6D 1C 9D			add VAUS.Y
  7903 45E5 A8				tay
  7904 45E6 A5 A0			lda :STACKORIGIN+10
  7905 45E8 18 79 00 C0			add adr.ROW,y
  7906 45EC 8D CC A0			sta PUTBYTE.DST
  7907 45EF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7908 45F1 79 FB C0			adc adr.ROW+251,y
  7909 45F4 8D CD A0			sta PUTBYTE.DST+1
  7910 45F7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7911 45F9 69 00			adc #$00
  7912 45FB 8D CE A0			sta PUTBYTE.DST+2
  7913 45FE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7914 4600 69 00			adc #$00
  7915 4602 8D CF A0			sta PUTBYTE.DST+3
  7916 4605 20 BF 2C			jsr PUTBYTE
  7917 4608			l_1089
  7918
  7919 				; --- ForToDoEpilog
  7920 4608 EE 96 A1			inc Y
  7921 460B F0 03 4C CC 44		jne l_102C
  7922 4610			l_103A
  7923
  7924 				; ------------------------------------------------------------
  7925
  7926 = A196			Y	= DATAORIGIN+$05FA
  7927 = A197			CNT	= DATAORIGIN+$05FB
  7928
  7929 = A196			@VarData	= Y
  7930 = 0003			@VarDataSize	= 3
  7931
  7932 4610			@exit
  7933 					.ifdef @new
  7934 					lda <@VarData
  7935 					sta :ztmp
  7936 					lda >@VarData
  7937 					ldy #@VarDataSize-1
  7938 					jmp @FreeMem
  7939 					els
  7940 4610 60				rts						; ret
  7941 					eif
  7942 				.endl
  7943
  7944 4611			.local	MOVE_VAUS					; PROCEDURE
  7945
  7946 				; optimize OK (service.pas), line = 1414
  7947
  7948 4611 A0 01			ldy #1
  7949 4613 AD 1E 9D			lda VAUS.OLDX+1
  7950 4616 C9 FF			cmp #$FF
  7951 4618 D0 05			bne @+
  7952 461A AD 1D 9D			lda VAUS.OLDX
  7953 461D C9 FF			cmp #$FF
  7954 				@
  7955 461F D0 01			bne @+
  7956 4621 88				dey
  7957 				@
  7958 4622 84 9F			sty :STACKORIGIN+9
  7959 4624 A0 01			ldy #1
  7960 4626 AD 1E 9D			lda VAUS.OLDX+1
  7961 4629 C9 00			cmp #$00
  7962 462B D0 06			bne @+
  7963 462D AD 1D 9D			lda VAUS.OLDX
  7964 4630 CD 1B 9D			cmp VAUS.X
  7965 				@
  7966 4633 D0 01			bne @+
  7967 4635 88				dey
  7968 				@
  7969 4636 98				tya
  7970 4637 25 9F			and :STACKORIGIN+9
  7971 4639 85 9F			sta :STACKORIGIN+9
  7972 463B A0 01			ldy #1
  7973 463D A9 00			lda #$00
  7974 463F CD 22 9D			cmp VAUS.OLDLEN+1
  7975 4642 D0 06			bne @+
  7976 4644 AD 23 9D			lda VAUS.WIDTH
  7977 4647 CD 21 9D			cmp VAUS.OLDLEN
  7978 				@
  7979 464A D0 01			bne @+
  7980 464C 88				dey
  7981 				@
  7982 464D 98				tya
  7983 464E 05 9F			ora :STACKORIGIN+9
  7984 4650 F0 03			jeq l_1102
  7985
  7986 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1415
  7987
  7988 4652 20 CE 43			jsr REMOVE_VAUS
  7989 4655			l_1102
  7990
  7991 				; optimize OK (service.pas), line = 1417
  7992
  7993 4655 AD 1B 9D			lda VAUS.X
  7994 4658 8D 1D 9D			sta VAUS.OLDX
  7995 465B A9 00			lda #$00
  7996 465D 8D 1E 9D			sta VAUS.OLDX+1
  7997
  7998 				; optimize OK (service.pas), line = 1418
  7999
  8000 4660 AD 1C 9D			lda VAUS.Y
  8001 4663 8D 1F 9D			sta VAUS.OLDY
  8002 4666 A9 00			lda #$00
  8003 4668 8D 20 9D			sta VAUS.OLDY+1
  8004
  8005 				; optimize OK (service.pas), line = 1425
  8006
  8007 466B A9 D8			lda #$D8
  8008 466D 38 ED 23 9D			sub VAUS.WIDTH
  8009 4671 8D E0 A0			sta MIN.B
  8010 4674 A9 00			lda #$00
  8011 4676 E9 00			sbc #$00
  8012 4678 8D E1 A0			sta MIN.B+1
  8013 467B AD 9A A1			lda X
  8014 467E 8D DE A0			sta MIN.A
  8015 4681 AD 9B A1			lda X+1
  8016 4684 8D DF A0			sta MIN.A+1
  8017 4687 20 3C 2D			jsr MIN
  8018 468A A9 0A			lda #$0A
  8019 468C 8D D8 A0			sta MAX.A
  8020 468F A9 00			lda #$00
  8021 4691 8D D9 A0			sta MAX.A+1
  8022 4694 AD E2 A0			lda MIN.RESULT
  8023 4697 8D DA A0			sta MAX.B
  8024 469A AD E3 A0			lda MIN.RESULT+1
  8025 469D 8D DB A0			sta MAX.B+1
  8026 46A0 20 11 2D			jsr MAX
  8027 46A3 AD DC A0			lda MAX.RESULT
  8028 46A6 8D 1B 9D			sta VAUS.X
  8029
  8030 				; optimize OK (service.pas), line = 1426
  8031
  8032 46A9 A9 C8			lda #$C8
  8033 46AB 38 ED 24 9D			sub VAUS.HEIGHT
  8034 46AF 8D E0 A0			sta MIN.B
  8035 46B2 A9 00			lda #$00
  8036 46B4 E9 00			sbc #$00
  8037 46B6 8D E1 A0			sta MIN.B+1
  8038 46B9 AD 9C A1			lda Y
  8039 46BC 8D DE A0			sta MIN.A
  8040 46BF AD 9D A1			lda Y+1
  8041 46C2 8D DF A0			sta MIN.A+1
  8042 46C5 20 3C 2D			jsr MIN
  8043 46C8 A9 0C			lda #$0C
  8044 46CA 8D D8 A0			sta MAX.A
  8045 46CD A9 00			lda #$00
  8046 46CF 8D D9 A0			sta MAX.A+1
  8047 46D2 AD E2 A0			lda MIN.RESULT
  8048 46D5 8D DA A0			sta MAX.B
  8049 46D8 AD E3 A0			lda MIN.RESULT+1
  8050 46DB 8D DB A0			sta MAX.B+1
  8051 46DE 20 11 2D			jsr MAX
  8052 46E1 AD DC A0			lda MAX.RESULT
  8053 46E4 8D 1C 9D			sta VAUS.Y
  8054
  8055 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1428
  8056
  8057 46E7 20 A2 44			jsr PLACE_VAUS
  8058
  8059 				; ------------------------------------------------------------
  8060
  8061 = A19A			X	= DATAORIGIN+$05FE
  8062 = A19C			Y	= DATAORIGIN+$0600
  8063
  8064 = A19A			@VarData	= X
  8065 = 0004			@VarDataSize	= 4
  8066
  8067 46EA			@exit
  8068 					.ifdef @new
  8069 					lda <@VarData
  8070 					sta :ztmp
  8071 					lda >@VarData
  8072 					ldy #@VarDataSize-1
  8073 					jmp @FreeMem
  8074 					els
  8075 46EA 60				rts						; ret
  8076 					eif
  8077 				.endl
  8078
  8079 46EB			.local	REMOVE_BLOCK					; PROCEDURE
  8080
  8081 				; optimize OK (service.pas), line = 1442
  8082
  8083 46EB AD 9E A1			lda XA
  8084 46EE 85 9F			sta :STACKORIGIN+9
  8085 46F0 A9 00			lda #$00
  8086 46F2 06 9F			asl :STACKORIGIN+9
  8087 46F4 2A				rol @
  8088 46F5 06 9F			asl :STACKORIGIN+9
  8089 46F7 2A				rol @
  8090 46F8 06 9F			asl :STACKORIGIN+9
  8091 46FA 2A				rol @
  8092 46FB 06 9F			asl :STACKORIGIN+9
  8093 46FD 2A				rol @
  8094 46FE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8095 4700 A5 9F			lda :STACKORIGIN+9
  8096 4702 18 69 09			add #$09
  8097 4705 8D A2 A1			sta XS
  8098 4708 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8099 470A 69 00			adc #$00
  8100 470C 8D A3 A1			sta XS+1
  8101
  8102 				; optimize OK (service.pas), line = 1443
  8103
  8104 470F AD 9F A1			lda YA
  8105 4712 85 9F			sta :STACKORIGIN+9
  8106 4714 A9 00			lda #$00
  8107 4716 06 9F			asl :STACKORIGIN+9
  8108 4718 2A				rol @
  8109 4719 06 9F			asl :STACKORIGIN+9
  8110 471B 2A				rol @
  8111 471C 06 9F			asl :STACKORIGIN+9
  8112 471E 2A				rol @
  8113 471F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8114 4721 A5 9F			lda :STACKORIGIN+9
  8115 4723 18 69 16			add #$16
  8116 4726 8D A4 A1			sta YS
  8117 4729 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8118 472B 69 00			adc #$00
  8119 472D 8D A5 A1			sta YS+1
  8120
  8121 				; optimize OK (service.pas), line = 1445
  8122
  8123 4730 A9 00			lda #$00
  8124 4732 8D A1 A1			sta Y
  8125
  8126 4735			l_115A
  8127 				; --- ForToDoCondition
  8128 4735 AD A1 A1			lda Y
  8129 4738 C9 08			cmp #$08
  8130 473A 90 03 4C 23 49		jcs l_1168
  8131
  8132 				; optimize OK (service.pas), line = 1447
  8133
  8134 473F AD A4 A1			lda YS
  8135 4742 6D A1 A1			adc Y
  8136 4745 A8				tay
  8137 4746 B9 00 C3			lda adr.MODY,y
  8138 4749 85 86			sta :eax
  8139 474B A9 00			lda #$00
  8140 474D 85 87			sta :eax+1
  8141 474F AD 28 9D			lda PATTERN.WIDTH
  8142 4752 85 8E			sta :ecx
  8143 4754 AD 29 9D			lda PATTERN.WIDTH+1
  8144 4757 85 8F			sta :ecx+1
  8145 					.ifdef fmulinit
  8146 					fmulu_16
  8147 					els
  8148 4759 20 7E 13			imulCX_AL
  8149 					eif
  8150 475C A5 86			lda :eax
  8151 475E 8D A6 A1			sta YH
  8152 4761 A5 87			lda :eax+1
  8153 4763 8D A7 A1			sta YH+1
  8154
  8155 				; optimize OK (service.pas), line = 1455
  8156
  8157 4766 A9 00			lda #$00
  8158 4768 8D A0 A1			sta X
  8159
  8160 476B			l_1184
  8161 				; --- ForToDoCondition
  8162 476B AD A0 A1			lda X
  8163 476E C9 10			cmp #$10
  8164 4770 90 03 4C 1B 49		jcs l_1192
  8165
  8166 				; optimize OK (service.pas), line = 1456
  8167
  8168 4775 6D A2 A1			adc XS
  8169 4778 85 9F			sta :STACKORIGIN+9
  8170 477A A9 00			lda #$00
  8171 477C 6D A3 A1			adc XS+1
  8172 477F C9 00			cmp #$00
  8173 4781 D0 04			bne @+
  8174 4783 A5 9F			lda :STACKORIGIN+9
  8175 4785 C9 D8			cmp #$D8
  8176 				@
  8177 4787 90 03 4C 13 49		jcs l_11A9
  8178
  8179 				; optimize OK (service.pas), line = 1462
  8180
  8181 478C AD A7 9C			lda PLAYSCREEN.OFS
  8182 478F 6D A0 A1			adc X
  8183 4792 85 9F			sta :STACKORIGIN+9
  8184 4794 AD A8 9C			lda PLAYSCREEN.OFS+1
  8185 4797 69 00			adc #$00
  8186 4799 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8187 479B AD A9 9C			lda PLAYSCREEN.OFS+2
  8188 479E 69 00			adc #$00
  8189 47A0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8190 47A2 AD AA 9C			lda PLAYSCREEN.OFS+3
  8191 47A5 69 00			adc #$00
  8192 47A7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8193 47A9 A5 9F			lda :STACKORIGIN+9
  8194 47AB 18 6D A2 A1			add XS
  8195 47AF 85 9F			sta :STACKORIGIN+9
  8196 47B1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8197 47B3 6D A3 A1			adc XS+1
  8198 47B6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8199 47B8 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8200 47BA 69 00			adc #$00
  8201 47BC 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8202 47BE A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8203 47C0 69 00			adc #$00
  8204 47C2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8205 47C4 AD A1 A1			lda Y
  8206 47C7 18 6D A4 A1			add YS
  8207 47CB A8				tay
  8208 47CC A5 9F			lda :STACKORIGIN+9
  8209 47CE 18 79 00 C0			add adr.ROW,y
  8210 47D2 8D D1 A0			sta GETBYTE.SRC
  8211 47D5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8212 47D7 79 FB C0			adc adr.ROW+251,y
  8213 47DA 8D D2 A0			sta GETBYTE.SRC+1
  8214 47DD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8215 47DF 69 00			adc #$00
  8216 47E1 8D D3 A0			sta GETBYTE.SRC+2
  8217 47E4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8218 47E6 69 00			adc #$00
  8219 47E8 8D D4 A0			sta GETBYTE.SRC+3
  8220 47EB 20 E7 2C			jsr GETBYTE
  8221 47EE AD D5 A0			lda GETBYTE.RESULT
  8222 47F1 29 80			and #$80
  8223 47F3 8D A9 A1			sta SHADOW
  8224
  8225 				; optimize OK (service.pas), line = 1466
  8226
  8227 47F6 AD A0 A1			lda X
  8228 47F9 18 6D A2 A1			add XS
  8229 47FD 85 A0			sta :STACKORIGIN+10
  8230 47FF A9 00			lda #$00
  8231 4801 6D A3 A1			adc XS+1
  8232 4804 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8233 4806 A9 00			lda #$00
  8234 4808 18 65 A0			add :STACKORIGIN+10
  8235 480B A8				tay
  8236 480C A9 C4			lda #$C4
  8237 480E 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  8238 4810 85 83			sta :bp+1
  8239 4812 AD 2C 9D			lda PATTERN.OFS
  8240 4815 18 71 82			add (:bp),y
  8241 4818 85 9F			sta :STACKORIGIN+9
  8242 481A AD 2D 9D			lda PATTERN.OFS+1
  8243 481D 69 00			adc #$00
  8244 481F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8245 4821 AD 2E 9D			lda PATTERN.OFS+2
  8246 4824 69 00			adc #$00
  8247 4826 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8248 4828 AD 2F 9D			lda PATTERN.OFS+3
  8249 482B 69 00			adc #$00
  8250 482D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8251 482F A5 9F			lda :STACKORIGIN+9
  8252 4831 18 6D A6 A1			add YH
  8253 4835 8D D1 A0			sta GETBYTE.SRC
  8254 4838 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8255 483A 6D A7 A1			adc YH+1
  8256 483D 8D D2 A0			sta GETBYTE.SRC+1
  8257 4840 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8258 4842 69 00			adc #$00
  8259 4844 8D D3 A0			sta GETBYTE.SRC+2
  8260 4847 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8261 4849 69 00			adc #$00
  8262 484B 8D D4 A0			sta GETBYTE.SRC+3
  8263 484E 20 E7 2C			jsr GETBYTE
  8264 4851 E8				inx
  8265 4852 AD D5 A0			lda GETBYTE.RESULT
  8266 4855 29 7F			and #$7F
  8267 4857 0D A9 A1			ora SHADOW
  8268 485A 8D A8 A1			sta CL
  8269 485D CA				dex
  8270
  8271 				; optimize OK (service.pas), line = 1470
  8272
  8273 485E AD A0 A1			lda X
  8274 4861 18 6D A2 A1			add XS
  8275 4865 85 A0			sta :STACKORIGIN+10
  8276 4867 A9 50			lda #$50
  8277 4869 6D A3 A1			adc XS+1
  8278 486C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8279 486E A9 00			lda #$00
  8280 4870 69 00			adc #$00
  8281 4872 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8282 4874 A9 00			lda #$00
  8283 4876 69 00			adc #$00
  8284 4878 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8285 487A AD A1 A1			lda Y
  8286 487D 18 6D A4 A1			add YS
  8287 4881 A8				tay
  8288 4882 A5 A0			lda :STACKORIGIN+10
  8289 4884 18 79 00 C0			add adr.ROW,y
  8290 4888 8D CC A0			sta PUTBYTE.DST
  8291 488B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8292 488D 79 FB C0			adc adr.ROW+251,y
  8293 4890 8D CD A0			sta PUTBYTE.DST+1
  8294 4893 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8295 4895 69 00			adc #$00
  8296 4897 8D CE A0			sta PUTBYTE.DST+2
  8297 489A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8298 489C 69 00			adc #$00
  8299 489E 8D CF A0			sta PUTBYTE.DST+3
  8300 48A1 AD A8 A1			lda CL
  8301 48A4 8D D0 A0			sta PUTBYTE.V
  8302 48A7 20 BF 2C			jsr PUTBYTE
  8303
  8304 				; optimize OK (service.pas), line = 1475
  8305
  8306 48AA AD A7 9C			lda PLAYSCREEN.OFS
  8307 48AD 18 6D A0 A1			add X
  8308 48B1 85 A0			sta :STACKORIGIN+10
  8309 48B3 AD A8 9C			lda PLAYSCREEN.OFS+1
  8310 48B6 69 00			adc #$00
  8311 48B8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8312 48BA AD A9 9C			lda PLAYSCREEN.OFS+2
  8313 48BD 69 00			adc #$00
  8314 48BF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8315 48C1 AD AA 9C			lda PLAYSCREEN.OFS+3
  8316 48C4 69 00			adc #$00
  8317 48C6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8318 48C8 A5 A0			lda :STACKORIGIN+10
  8319 48CA 18 6D A2 A1			add XS
  8320 48CE 85 A0			sta :STACKORIGIN+10
  8321 48D0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8322 48D2 6D A3 A1			adc XS+1
  8323 48D5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8324 48D7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8325 48D9 69 00			adc #$00
  8326 48DB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8327 48DD A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8328 48DF 69 00			adc #$00
  8329 48E1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8330 48E3 AD A1 A1			lda Y
  8331 48E6 18 6D A4 A1			add YS
  8332 48EA A8				tay
  8333 48EB A5 A0			lda :STACKORIGIN+10
  8334 48ED 18 79 00 C0			add adr.ROW,y
  8335 48F1 8D CC A0			sta PUTBYTE.DST
  8336 48F4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8337 48F6 79 FB C0			adc adr.ROW+251,y
  8338 48F9 8D CD A0			sta PUTBYTE.DST+1
  8339 48FC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8340 48FE 69 00			adc #$00
  8341 4900 8D CE A0			sta PUTBYTE.DST+2
  8342 4903 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8343 4905 69 00			adc #$00
  8344 4907 8D CF A0			sta PUTBYTE.DST+3
  8345 490A AD A8 A1			lda CL
  8346 490D 8D D0 A0			sta PUTBYTE.V
  8347 4910 20 BF 2C			jsr PUTBYTE
  8348 4913			l_11A9
  8349
  8350 				; --- ForToDoEpilog
  8351 4913 EE A0 A1			inc X
  8352 4916 F0 03 4C 6B 47		jne l_1184
  8353 491B			l_1192
  8354
  8355 				; --- ForToDoEpilog
  8356 491B EE A1 A1			inc Y
  8357 491E F0 03 4C 35 47		jne l_115A
  8358 4923			l_1168
  8359
  8360 				; optimize OK (service.pas), line = 1485
  8361
  8362 4923 AD A4 A1			lda YS
  8363 4926 18 69 04			add #$04
  8364 4929 8D A1 A1			sta Y
  8365 492C AD A4 A1			lda YS
  8366 492F 18 69 0C			add #$0C
  8367 4932 8D 36 49			sta @FORTMP_1243_0
  8368
  8369 4935			l_1246
  8370 				; --- ForToDoCondition
  8371 4935 A9 00			lda @FORTMP_1243_0::#$00
  8372 4937 CD A1 A1			cmp Y
  8373 493A B0 03 4C 34 4A		jcc l_1254
  8374
  8375 				; optimize OK (service.pas), line = 1486
  8376
  8377 493F AD A2 A1			lda XS
  8378 4942 18 69 08			add #$08
  8379 4945 8D A0 A1			sta X
  8380 4948 AD A2 A1			lda XS
  8381 494B 18 69 18			add #$18
  8382 494E 8D 52 49			sta @FORTMP_1264_0
  8383
  8384 4951			l_1267
  8385 				; --- ForToDoCondition
  8386 4951 A9 00			lda @FORTMP_1264_0::#$00
  8387 4953 CD A0 A1			cmp X
  8388 4956 B0 03 4C 2C 4A		jcc l_1275
  8389
  8390 				; optimize OK (service.pas), line = 1502
  8391
  8392 495B AD A0 A1			lda X
  8393 495E C9 D8			cmp #$D8
  8394 4960 90 03 4C 24 4A		jcs l_1287
  8395
  8396 				; optimize OK (service.pas), line = 1506
  8397
  8398 4965 AD A7 9C			lda PLAYSCREEN.OFS
  8399 4968 6D A0 A1			adc X
  8400 496B 85 9F			sta :STACKORIGIN+9
  8401 496D AD A8 9C			lda PLAYSCREEN.OFS+1
  8402 4970 69 00			adc #$00
  8403 4972 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8404 4974 AD A9 9C			lda PLAYSCREEN.OFS+2
  8405 4977 69 00			adc #$00
  8406 4979 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8407 497B AD AA 9C			lda PLAYSCREEN.OFS+3
  8408 497E 69 00			adc #$00
  8409 4980 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8410 4982 AC A1 A1			ldy Y
  8411 4985 A5 9F			lda :STACKORIGIN+9
  8412 4987 18 79 00 C0			add adr.ROW,y
  8413 498B 8D D1 A0			sta GETBYTE.SRC
  8414 498E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8415 4990 79 FB C0			adc adr.ROW+251,y
  8416 4993 8D D2 A0			sta GETBYTE.SRC+1
  8417 4996 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8418 4998 69 00			adc #$00
  8419 499A 8D D3 A0			sta GETBYTE.SRC+2
  8420 499D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8421 499F 69 00			adc #$00
  8422 49A1 8D D4 A0			sta GETBYTE.SRC+3
  8423 49A4 20 E7 2C			jsr GETBYTE
  8424 49A7 AD D5 A0			lda GETBYTE.RESULT
  8425 49AA 09 80			ora #$80
  8426 49AC 8D A8 A1			sta CL
  8427
  8428 				; optimize OK (service.pas), line = 1510
  8429
  8430 49AF AC A1 A1			ldy Y
  8431 49B2 AD A0 A1			lda X
  8432 49B5 18 79 00 C0			add adr.ROW,y
  8433 49B9 8D CC A0			sta PUTBYTE.DST
  8434 49BC A9 50			lda #$50
  8435 49BE 79 FB C0			adc adr.ROW+251,y
  8436 49C1 8D CD A0			sta PUTBYTE.DST+1
  8437 49C4 A9 00			lda #$00
  8438 49C6 69 00			adc #$00
  8439 49C8 8D CE A0			sta PUTBYTE.DST+2
  8440 49CB A9 00			lda #$00
  8441 49CD 69 00			adc #$00
  8442 49CF 8D CF A0			sta PUTBYTE.DST+3
  8443 49D2 AD A8 A1			lda CL
  8444 49D5 8D D0 A0			sta PUTBYTE.V
  8445 49D8 20 BF 2C			jsr PUTBYTE
  8446
  8447 				; optimize OK (service.pas), line = 1515
  8448
  8449 49DB AD A7 9C			lda PLAYSCREEN.OFS
  8450 49DE 18 6D A0 A1			add X
  8451 49E2 85 A0			sta :STACKORIGIN+10
  8452 49E4 AD A8 9C			lda PLAYSCREEN.OFS+1
  8453 49E7 69 00			adc #$00
  8454 49E9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8455 49EB AD A9 9C			lda PLAYSCREEN.OFS+2
  8456 49EE 69 00			adc #$00
  8457 49F0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8458 49F2 AD AA 9C			lda PLAYSCREEN.OFS+3
  8459 49F5 69 00			adc #$00
  8460 49F7 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8461 49F9 AC A1 A1			ldy Y
  8462 49FC A5 A0			lda :STACKORIGIN+10
  8463 49FE 18 79 00 C0			add adr.ROW,y
  8464 4A02 8D CC A0			sta PUTBYTE.DST
  8465 4A05 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8466 4A07 79 FB C0			adc adr.ROW+251,y
  8467 4A0A 8D CD A0			sta PUTBYTE.DST+1
  8468 4A0D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8469 4A0F 69 00			adc #$00
  8470 4A11 8D CE A0			sta PUTBYTE.DST+2
  8471 4A14 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8472 4A16 69 00			adc #$00
  8473 4A18 8D CF A0			sta PUTBYTE.DST+3
  8474 4A1B AD A8 A1			lda CL
  8475 4A1E 8D D0 A0			sta PUTBYTE.V
  8476 4A21 20 BF 2C			jsr PUTBYTE
  8477 4A24			l_1287
  8478
  8479 				; --- ForToDoEpilog
  8480 4A24 EE A0 A1			inc X
  8481 4A27 F0 03 4C 51 49		jne l_1267
  8482 4A2C			l_1275
  8483
  8484 				; --- ForToDoEpilog
  8485 4A2C EE A1 A1			inc Y
  8486 4A2F F0 03 4C 35 49		jne l_1246
  8487 4A34			l_1254
  8488
  8489 				; ------------------------------------------------------------
  8490
  8491 = A19E			XA	= DATAORIGIN+$0602
  8492 = A19F			YA	= DATAORIGIN+$0603
  8493 = A1A0			X	= DATAORIGIN+$0604
  8494 = A1A1			Y	= DATAORIGIN+$0605
  8495 = A1A2			XS	= DATAORIGIN+$0606
  8496 = A1A4			YS	= DATAORIGIN+$0608
  8497 = A1A6			YH	= DATAORIGIN+$060A
  8498 = A1A8			CL	= DATAORIGIN+$060C
  8499 = A1A9			SHADOW	= DATAORIGIN+$060D
  8500
  8501 = A19E			@VarData	= XA
  8502 = 000C			@VarDataSize	= 12
  8503
  8504 4A34			@exit
  8505 					.ifdef @new
  8506 					lda <@VarData
  8507 					sta :ztmp
  8508 					lda >@VarData
  8509 					ldy #@VarDataSize-1
  8510 					jmp @FreeMem
  8511 					els
  8512 4A34 60				rts						; ret
  8513 					eif
  8514 				.endl
  8515
  8516 4A35			.local	PLACE_BLOCK					; PROCEDURE
  8517
  8518 				; optimize OK (service.pas), line = 1530
  8519
  8520 4A35 AD AC A1			lda XA
  8521 4A38 85 9F			sta :STACKORIGIN+9
  8522 4A3A A9 00			lda #$00
  8523 4A3C 06 9F			asl :STACKORIGIN+9
  8524 4A3E 2A				rol @
  8525 4A3F 06 9F			asl :STACKORIGIN+9
  8526 4A41 2A				rol @
  8527 4A42 06 9F			asl :STACKORIGIN+9
  8528 4A44 2A				rol @
  8529 4A45 06 9F			asl :STACKORIGIN+9
  8530 4A47 2A				rol @
  8531 4A48 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8532 4A4A A5 9F			lda :STACKORIGIN+9
  8533 4A4C 18 69 09			add #$09
  8534 4A4F 8D B1 A1			sta XS
  8535 4A52 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8536 4A54 69 00			adc #$00
  8537 4A56 8D B2 A1			sta XS+1
  8538
  8539 				; optimize OK (service.pas), line = 1531
  8540
  8541 4A59 AD AD A1			lda YA
  8542 4A5C 85 9F			sta :STACKORIGIN+9
  8543 4A5E A9 00			lda #$00
  8544 4A60 06 9F			asl :STACKORIGIN+9
  8545 4A62 2A				rol @
  8546 4A63 06 9F			asl :STACKORIGIN+9
  8547 4A65 2A				rol @
  8548 4A66 06 9F			asl :STACKORIGIN+9
  8549 4A68 2A				rol @
  8550 4A69 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8551 4A6B A5 9F			lda :STACKORIGIN+9
  8552 4A6D 18 69 16			add #$16
  8553 4A70 8D B3 A1			sta YS
  8554 4A73 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8555 4A75 69 00			adc #$00
  8556 4A77 8D B4 A1			sta YS+1
  8557
  8558 				; optimize OK (service.pas), line = 1533
  8559
  8560 4A7A A9 00			lda #$00
  8561 4A7C 8D B0 A1			sta Y
  8562
  8563 4A7F			l_12FA
  8564 				; --- ForToDoCondition
  8565 4A7F AD B0 A1			lda Y
  8566 4A82 C9 08			cmp #$08
  8567 4A84 90 03 4C D7 4C		jcs l_1308
  8568
  8569 				; optimize OK (service.pas), line = 1534
  8570
  8571 4A89 A9 00			lda #$00
  8572 4A8B 8D AF A1			sta X
  8573
  8574 4A8E			l_1311
  8575 				; --- ForToDoCondition
  8576 4A8E AD AF A1			lda X
  8577 4A91 C9 10			cmp #$10
  8578 4A93 90 03 4C CF 4C		jcs l_131F
  8579
  8580 				; optimize OK (service.pas), line = 1539
  8581
  8582 4A98 AD A7 9C			lda PLAYSCREEN.OFS
  8583 4A9B 6D B1 A1			adc XS
  8584 4A9E 85 9F			sta :STACKORIGIN+9
  8585 4AA0 AD A8 9C			lda PLAYSCREEN.OFS+1
  8586 4AA3 6D B2 A1			adc XS+1
  8587 4AA6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8588 4AA8 AD A9 9C			lda PLAYSCREEN.OFS+2
  8589 4AAB 69 00			adc #$00
  8590 4AAD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8591 4AAF AD AA 9C			lda PLAYSCREEN.OFS+3
  8592 4AB2 69 00			adc #$00
  8593 4AB4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8594 4AB6 A5 9F			lda :STACKORIGIN+9
  8595 4AB8 18 6D AF A1			add X
  8596 4ABC 85 9F			sta :STACKORIGIN+9
  8597 4ABE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8598 4AC0 69 00			adc #$00
  8599 4AC2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8600 4AC4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8601 4AC6 69 00			adc #$00
  8602 4AC8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8603 4ACA A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8604 4ACC 69 00			adc #$00
  8605 4ACE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8606 4AD0 AD B3 A1			lda YS
  8607 4AD3 18 6D B0 A1			add Y
  8608 4AD7 A8				tay
  8609 4AD8 A5 9F			lda :STACKORIGIN+9
  8610 4ADA 18 79 00 C0			add adr.ROW,y
  8611 4ADE 8D D1 A0			sta GETBYTE.SRC
  8612 4AE1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8613 4AE3 79 FB C0			adc adr.ROW+251,y
  8614 4AE6 8D D2 A0			sta GETBYTE.SRC+1
  8615 4AE9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8616 4AEB 69 00			adc #$00
  8617 4AED 8D D3 A0			sta GETBYTE.SRC+2
  8618 4AF0 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8619 4AF2 69 00			adc #$00
  8620 4AF4 8D D4 A0			sta GETBYTE.SRC+3
  8621 4AF7 20 E7 2C			jsr GETBYTE
  8622 4AFA AD D5 A0			lda GETBYTE.RESULT
  8623 4AFD 29 80			and #$80
  8624 4AFF 8D B7 A1			sta SHADOW
  8625
  8626 				; optimize OK (service.pas), line = 1541
  8627
  8628 4B02 AD B0 A1			lda Y
  8629 4B05 C9 07			cmp #$07
  8630 4B07 90 03 4C FB 4B		jcs l_135E
  8631 4B0C AD AF A1			lda X
  8632 4B0F C9 0F			cmp #$0F
  8633 4B11 90 03 4C FB 4B		jcs l_135E
  8634
  8635 				; optimize OK (service.pas), line = 1546
  8636
  8637 4B16 AD AE A1			lda BLOCK
  8638 4B19 38 E9 01			sub #$01
  8639 4B1C 85 9F			sta :STACKORIGIN+9
  8640 4B1E A9 00			lda #$00
  8641 4B20 E9 00			sbc #$00
  8642 4B22 A5 9F			lda :STACKORIGIN+9
  8643 4B24 29 0F			and #$0F
  8644 4B26 A8				tay
  8645 4B27 B9 88 10			lda adr.COLORBLOCK,y
  8646 4B2A 29 7F			and #$7F
  8647 4B2C 0D B7 A1			ora SHADOW
  8648 4B2F 8D B5 A1			sta CL
  8649
  8650 				; optimize OK (service.pas), line = 1549
  8651
  8652 4B32 AD B1 A1			lda XS
  8653 4B35 85 A0			sta :STACKORIGIN+10
  8654 4B37 A9 50			lda #$50
  8655 4B39 18 6D B2 A1			add XS+1
  8656 4B3D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8657 4B3F A9 00			lda #$00
  8658 4B41 69 00			adc #$00
  8659 4B43 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8660 4B45 A9 00			lda #$00
  8661 4B47 69 00			adc #$00
  8662 4B49 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8663 4B4B A5 A0			lda :STACKORIGIN+10
  8664 4B4D 18 6D AF A1			add X
  8665 4B51 85 A0			sta :STACKORIGIN+10
  8666 4B53 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8667 4B55 69 00			adc #$00
  8668 4B57 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8669 4B59 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8670 4B5B 69 00			adc #$00
  8671 4B5D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8672 4B5F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8673 4B61 69 00			adc #$00
  8674 4B63 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8675 4B65 AD B3 A1			lda YS
  8676 4B68 18 6D B0 A1			add Y
  8677 4B6C A8				tay
  8678 4B6D A5 A0			lda :STACKORIGIN+10
  8679 4B6F 18 79 00 C0			add adr.ROW,y
  8680 4B73 8D CC A0			sta PUTBYTE.DST
  8681 4B76 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8682 4B78 79 FB C0			adc adr.ROW+251,y
  8683 4B7B 8D CD A0			sta PUTBYTE.DST+1
  8684 4B7E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8685 4B80 69 00			adc #$00
  8686 4B82 8D CE A0			sta PUTBYTE.DST+2
  8687 4B85 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8688 4B87 69 00			adc #$00
  8689 4B89 8D CF A0			sta PUTBYTE.DST+3
  8690 4B8C AD B5 A1			lda CL
  8691 4B8F 8D D0 A0			sta PUTBYTE.V
  8692 4B92 20 BF 2C			jsr PUTBYTE
  8693
  8694 				; optimize OK (service.pas), line = 1552
  8695
  8696 4B95 AD A7 9C			lda PLAYSCREEN.OFS
  8697 4B98 18 6D B1 A1			add XS
  8698 4B9C 85 A0			sta :STACKORIGIN+10
  8699 4B9E AD A8 9C			lda PLAYSCREEN.OFS+1
  8700 4BA1 6D B2 A1			adc XS+1
  8701 4BA4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8702 4BA6 AD A9 9C			lda PLAYSCREEN.OFS+2
  8703 4BA9 69 00			adc #$00
  8704 4BAB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8705 4BAD AD AA 9C			lda PLAYSCREEN.OFS+3
  8706 4BB0 69 00			adc #$00
  8707 4BB2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8708 4BB4 A5 A0			lda :STACKORIGIN+10
  8709 4BB6 18 6D AF A1			add X
  8710 4BBA 85 A0			sta :STACKORIGIN+10
  8711 4BBC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8712 4BBE 69 00			adc #$00
  8713 4BC0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8714 4BC2 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8715 4BC4 69 00			adc #$00
  8716 4BC6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8717 4BC8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8718 4BCA 69 00			adc #$00
  8719 4BCC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8720 4BCE AD B3 A1			lda YS
  8721 4BD1 18 6D B0 A1			add Y
  8722 4BD5 A8				tay
  8723 4BD6 A5 A0			lda :STACKORIGIN+10
  8724 4BD8 18 79 00 C0			add adr.ROW,y
  8725 4BDC 8D CC A0			sta PUTBYTE.DST
  8726 4BDF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8727 4BE1 79 FB C0			adc adr.ROW+251,y
  8728 4BE4 8D CD A0			sta PUTBYTE.DST+1
  8729 4BE7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8730 4BE9 69 00			adc #$00
  8731 4BEB 8D CE A0			sta PUTBYTE.DST+2
  8732 4BEE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8733 4BF0 69 00			adc #$00
  8734 4BF2 8D CF A0			sta PUTBYTE.DST+3
  8735 4BF5 AD B5 A1			lda CL
  8736 4BF8 4C C1 4C			jmp l_13BD
  8737 4BFB			l_135E
  8738
  8739 				; optimize OK (service.pas), line = 1560
  8740
  8741 4BFB AD B1 A1			lda XS
  8742 4BFE 85 A0			sta :STACKORIGIN+10
  8743 4C00 A9 50			lda #$50
  8744 4C02 18 6D B2 A1			add XS+1
  8745 4C06 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8746 4C08 A9 00			lda #$00
  8747 4C0A 69 00			adc #$00
  8748 4C0C 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8749 4C0E A9 00			lda #$00
  8750 4C10 69 00			adc #$00
  8751 4C12 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8752 4C14 A5 A0			lda :STACKORIGIN+10
  8753 4C16 18 6D AF A1			add X
  8754 4C1A 85 A0			sta :STACKORIGIN+10
  8755 4C1C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8756 4C1E 69 00			adc #$00
  8757 4C20 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8758 4C22 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8759 4C24 69 00			adc #$00
  8760 4C26 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8761 4C28 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8762 4C2A 69 00			adc #$00
  8763 4C2C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8764 4C2E AD B3 A1			lda YS
  8765 4C31 18 6D B0 A1			add Y
  8766 4C35 A8				tay
  8767 4C36 A5 A0			lda :STACKORIGIN+10
  8768 4C38 18 79 00 C0			add adr.ROW,y
  8769 4C3C 8D CC A0			sta PUTBYTE.DST
  8770 4C3F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8771 4C41 79 FB C0			adc adr.ROW+251,y
  8772 4C44 8D CD A0			sta PUTBYTE.DST+1
  8773 4C47 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8774 4C49 69 00			adc #$00
  8775 4C4B 8D CE A0			sta PUTBYTE.DST+2
  8776 4C4E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8777 4C50 69 00			adc #$00
  8778 4C52 8D CF A0			sta PUTBYTE.DST+3
  8779 4C55 AD B7 A1			lda SHADOW
  8780 4C58 8D D0 A0			sta PUTBYTE.V
  8781 4C5B 20 BF 2C			jsr PUTBYTE
  8782
  8783 				; optimize OK (service.pas), line = 1563
  8784
  8785 4C5E AD A7 9C			lda PLAYSCREEN.OFS
  8786 4C61 18 6D B1 A1			add XS
  8787 4C65 85 A0			sta :STACKORIGIN+10
  8788 4C67 AD A8 9C			lda PLAYSCREEN.OFS+1
  8789 4C6A 6D B2 A1			adc XS+1
  8790 4C6D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8791 4C6F AD A9 9C			lda PLAYSCREEN.OFS+2
  8792 4C72 69 00			adc #$00
  8793 4C74 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8794 4C76 AD AA 9C			lda PLAYSCREEN.OFS+3
  8795 4C79 69 00			adc #$00
  8796 4C7B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8797 4C7D A5 A0			lda :STACKORIGIN+10
  8798 4C7F 18 6D AF A1			add X
  8799 4C83 85 A0			sta :STACKORIGIN+10
  8800 4C85 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8801 4C87 69 00			adc #$00
  8802 4C89 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8803 4C8B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8804 4C8D 69 00			adc #$00
  8805 4C8F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8806 4C91 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8807 4C93 69 00			adc #$00
  8808 4C95 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8809 4C97 AD B3 A1			lda YS
  8810 4C9A 18 6D B0 A1			add Y
  8811 4C9E A8				tay
  8812 4C9F A5 A0			lda :STACKORIGIN+10
  8813 4CA1 18 79 00 C0			add adr.ROW,y
  8814 4CA5 8D CC A0			sta PUTBYTE.DST
  8815 4CA8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8816 4CAA 79 FB C0			adc adr.ROW+251,y
  8817 4CAD 8D CD A0			sta PUTBYTE.DST+1
  8818 4CB0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8819 4CB2 69 00			adc #$00
  8820 4CB4 8D CE A0			sta PUTBYTE.DST+2
  8821 4CB7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8822 4CB9 69 00			adc #$00
  8823 4CBB 8D CF A0			sta PUTBYTE.DST+3
  8824 4CBE AD B7 A1			lda SHADOW
  8825 4CC1			l_13BD
  8826 4CC1 8D D0 A0			sta PUTBYTE.V
  8827 4CC4 20 BF 2C			jsr PUTBYTE
  8828
  8829 				; --- ForToDoEpilog
  8830 4CC7 EE AF A1			inc X
  8831 4CCA F0 03 4C 8E 4A		jne l_1311
  8832 4CCF			l_131F
  8833
  8834 				; --- ForToDoEpilog
  8835 4CCF EE B0 A1			inc Y
  8836 4CD2 F0 03 4C 7F 4A		jne l_12FA
  8837 4CD7			l_1308
  8838
  8839 				; optimize OK (service.pas), line = 1568
  8840
  8841 4CD7 AD B3 A1			lda YS
  8842 4CDA 18 69 04			add #$04
  8843 4CDD 8D B0 A1			sta Y
  8844 4CE0 AD B3 A1			lda YS
  8845 4CE3 18 69 0C			add #$0C
  8846 4CE6 8D EA 4C			sta @FORTMP_1411_0
  8847
  8848 4CE9			l_1414
  8849 				; --- ForToDoCondition
  8850 4CE9 A9 00			lda @FORTMP_1411_0::#$00
  8851 4CEB CD B0 A1			cmp Y
  8852 4CEE B0 03 4C E8 4D		jcc l_1422
  8853
  8854 				; optimize OK (service.pas), line = 1569
  8855
  8856 4CF3 AD B1 A1			lda XS
  8857 4CF6 18 69 08			add #$08
  8858 4CF9 8D AF A1			sta X
  8859 4CFC AD B1 A1			lda XS
  8860 4CFF 18 69 18			add #$18
  8861 4D02 8D 06 4D			sta @FORTMP_1432_0
  8862
  8863 4D05			l_1435
  8864 				; --- ForToDoCondition
  8865 4D05 A9 00			lda @FORTMP_1432_0::#$00
  8866 4D07 CD AF A1			cmp X
  8867 4D0A B0 03 4C E0 4D		jcc l_1443
  8868
  8869 				; optimize OK (service.pas), line = 1570
  8870
  8871 4D0F AD AF A1			lda X
  8872 4D12 C9 D8			cmp #$D8
  8873 4D14 90 03 4C D8 4D		jcs l_1455
  8874
  8875 				; optimize OK (service.pas), line = 1577
  8876
  8877 4D19 AD A7 9C			lda PLAYSCREEN.OFS
  8878 4D1C 6D AF A1			adc X
  8879 4D1F 85 9F			sta :STACKORIGIN+9
  8880 4D21 AD A8 9C			lda PLAYSCREEN.OFS+1
  8881 4D24 69 00			adc #$00
  8882 4D26 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8883 4D28 AD A9 9C			lda PLAYSCREEN.OFS+2
  8884 4D2B 69 00			adc #$00
  8885 4D2D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8886 4D2F AD AA 9C			lda PLAYSCREEN.OFS+3
  8887 4D32 69 00			adc #$00
  8888 4D34 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8889 4D36 AC B0 A1			ldy Y
  8890 4D39 A5 9F			lda :STACKORIGIN+9
  8891 4D3B 18 79 00 C0			add adr.ROW,y
  8892 4D3F 8D D1 A0			sta GETBYTE.SRC
  8893 4D42 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8894 4D44 79 FB C0			adc adr.ROW+251,y
  8895 4D47 8D D2 A0			sta GETBYTE.SRC+1
  8896 4D4A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8897 4D4C 69 00			adc #$00
  8898 4D4E 8D D3 A0			sta GETBYTE.SRC+2
  8899 4D51 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8900 4D53 69 00			adc #$00
  8901 4D55 8D D4 A0			sta GETBYTE.SRC+3
  8902 4D58 20 E7 2C			jsr GETBYTE
  8903 4D5B AD D5 A0			lda GETBYTE.RESULT
  8904 4D5E 29 7F			and #$7F
  8905 4D60 8D B5 A1			sta CL
  8906
  8907 				; optimize OK (service.pas), line = 1581
  8908
  8909 4D63 AC B0 A1			ldy Y
  8910 4D66 AD AF A1			lda X
  8911 4D69 18 79 00 C0			add adr.ROW,y
  8912 4D6D 8D CC A0			sta PUTBYTE.DST
  8913 4D70 A9 50			lda #$50
  8914 4D72 79 FB C0			adc adr.ROW+251,y
  8915 4D75 8D CD A0			sta PUTBYTE.DST+1
  8916 4D78 A9 00			lda #$00
  8917 4D7A 69 00			adc #$00
  8918 4D7C 8D CE A0			sta PUTBYTE.DST+2
  8919 4D7F A9 00			lda #$00
  8920 4D81 69 00			adc #$00
  8921 4D83 8D CF A0			sta PUTBYTE.DST+3
  8922 4D86 AD B5 A1			lda CL
  8923 4D89 8D D0 A0			sta PUTBYTE.V
  8924 4D8C 20 BF 2C			jsr PUTBYTE
  8925
  8926 				; optimize OK (service.pas), line = 1585
  8927
  8928 4D8F AD A7 9C			lda PLAYSCREEN.OFS
  8929 4D92 18 6D AF A1			add X
  8930 4D96 85 A0			sta :STACKORIGIN+10
  8931 4D98 AD A8 9C			lda PLAYSCREEN.OFS+1
  8932 4D9B 69 00			adc #$00
  8933 4D9D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8934 4D9F AD A9 9C			lda PLAYSCREEN.OFS+2
  8935 4DA2 69 00			adc #$00
  8936 4DA4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8937 4DA6 AD AA 9C			lda PLAYSCREEN.OFS+3
  8938 4DA9 69 00			adc #$00
  8939 4DAB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8940 4DAD AC B0 A1			ldy Y
  8941 4DB0 A5 A0			lda :STACKORIGIN+10
  8942 4DB2 18 79 00 C0			add adr.ROW,y
  8943 4DB6 8D CC A0			sta PUTBYTE.DST
  8944 4DB9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8945 4DBB 79 FB C0			adc adr.ROW+251,y
  8946 4DBE 8D CD A0			sta PUTBYTE.DST+1
  8947 4DC1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8948 4DC3 69 00			adc #$00
  8949 4DC5 8D CE A0			sta PUTBYTE.DST+2
  8950 4DC8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8951 4DCA 69 00			adc #$00
  8952 4DCC 8D CF A0			sta PUTBYTE.DST+3
  8953 4DCF AD B5 A1			lda CL
  8954 4DD2 8D D0 A0			sta PUTBYTE.V
  8955 4DD5 20 BF 2C			jsr PUTBYTE
  8956 4DD8			l_1455
  8957
  8958 				; --- ForToDoEpilog
  8959 4DD8 EE AF A1			inc X
  8960 4DDB F0 03 4C 05 4D		jne l_1435
  8961 4DE0			l_1443
  8962
  8963 				; --- ForToDoEpilog
  8964 4DE0 EE B0 A1			inc Y
  8965 4DE3 F0 03 4C E9 4C		jne l_1414
  8966 4DE8			l_1422
  8967
  8968 				; optimize OK (service.pas), line = 1588
  8969
  8970 4DE8 AD AE A1			lda BLOCK
  8971 4DEB C9 09			cmp #$09
  8972 4DED B0 03 4C 78 50		jcc l_14B1
  8973
  8974 				; optimize OK (service.pas), line = 1590
  8975
  8976 4DF2 A9 00			lda #$00
  8977 4DF4 8D B6 A1			sta CL2
  8978
  8979 				; optimize OK (service.pas), line = 1591
  8980
  8981 4DF7 AD AE A1			lda BLOCK
  8982 4DFA 29 0F			and #$0F
  8983 4DFC C9 09			cmp #$09
  8984 4DFE D0 19			jne l_14CC
  8985
  8986 				; optimize OK (service.pas), line = 1593
  8987
  8988 4E00 A9 CA			lda #$CA
  8989 4E02 8D B6 A1			sta CL2
  8990
  8991 				; optimize OK (service.pas), line = 1594
  8992
  8993 4E05 AD AD A1			lda YA
  8994 4E08 0A				asl @
  8995 4E09 0A				asl @
  8996 4E0A 0A				asl @
  8997 4E0B 0A				asl @
  8998 4E0C 18 6D AC A1			add XA
  8999 4E10 A8				tay
  9000 4E11 A9 19			lda #$19
  9001 4E13 99 00 DB			sta adr.WALL,y
  9002 4E16 4C 25 4E			jmp l_14EB
  9003 4E19			l_14CC
  9004
  9005 				; optimize OK (service.pas), line = 1600
  9006
  9007 4E19 AD AE A1			lda BLOCK
  9008 4E1C C9 0A			cmp #$0A
  9009 4E1E D0 05			jne l_14FD
  9010 4E20 A9 C9			lda #$C9
  9011 4E22 8D B6 A1			sta CL2
  9012 4E25			l_14EB
  9013 4E25			l_14FD
  9014
  9015 				; optimize OK (service.pas), line = 1604
  9016
  9017 4E25 A9 00			lda #$00
  9018 4E27 8D B0 A1			sta Y
  9019
  9020 4E2A			l_150D
  9021 				; --- ForToDoCondition
  9022 4E2A AD B0 A1			lda Y
  9023 4E2D C9 07			cmp #$07
  9024 4E2F 90 03 4C 2F 4F		jcs l_151B
  9025
  9026 				; optimize OK (service.pas), line = 1610
  9027
  9028 4E34 AD A7 9C			lda PLAYSCREEN.OFS
  9029 4E37 6D B1 A1			adc XS
  9030 4E3A 85 9F			sta :STACKORIGIN+9
  9031 4E3C AD A8 9C			lda PLAYSCREEN.OFS+1
  9032 4E3F 6D B2 A1			adc XS+1
  9033 4E42 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9034 4E44 AD A9 9C			lda PLAYSCREEN.OFS+2
  9035 4E47 69 00			adc #$00
  9036 4E49 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9037 4E4B AD AA 9C			lda PLAYSCREEN.OFS+3
  9038 4E4E 69 00			adc #$00
  9039 4E50 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9040 4E52 AD B0 A1			lda Y
  9041 4E55 18 6D B3 A1			add YS
  9042 4E59 A8				tay
  9043 4E5A A5 9F			lda :STACKORIGIN+9
  9044 4E5C 18 79 00 C0			add adr.ROW,y
  9045 4E60 8D D1 A0			sta GETBYTE.SRC
  9046 4E63 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9047 4E65 79 FB C0			adc adr.ROW+251,y
  9048 4E68 8D D2 A0			sta GETBYTE.SRC+1
  9049 4E6B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9050 4E6D 69 00			adc #$00
  9051 4E6F 8D D3 A0			sta GETBYTE.SRC+2
  9052 4E72 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9053 4E74 69 00			adc #$00
  9054 4E76 8D D4 A0			sta GETBYTE.SRC+3
  9055 4E79 20 E7 2C			jsr GETBYTE
  9056 4E7C AD D5 A0			lda GETBYTE.RESULT
  9057 4E7F 29 80			and #$80
  9058 4E81 8D B5 A1			sta CL
  9059
  9060 				; optimize OK (service.pas), line = 1612
  9061
  9062 4E84 AD B6 A1			lda CL2
  9063 4E87 29 7F			and #$7F
  9064 4E89 0D B5 A1			ora CL
  9065 4E8C 8D B6 A1			sta CL2
  9066
  9067 				; optimize OK (service.pas), line = 1616
  9068
  9069 4E8F AD B1 A1			lda XS
  9070 4E92 85 A0			sta :STACKORIGIN+10
  9071 4E94 A9 50			lda #$50
  9072 4E96 18 6D B2 A1			add XS+1
  9073 4E9A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9074 4E9C A9 00			lda #$00
  9075 4E9E 69 00			adc #$00
  9076 4EA0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9077 4EA2 A9 00			lda #$00
  9078 4EA4 69 00			adc #$00
  9079 4EA6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9080 4EA8 AD B3 A1			lda YS
  9081 4EAB 18 6D B0 A1			add Y
  9082 4EAF A8				tay
  9083 4EB0 A5 A0			lda :STACKORIGIN+10
  9084 4EB2 18 79 00 C0			add adr.ROW,y
  9085 4EB6 8D CC A0			sta PUTBYTE.DST
  9086 4EB9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9087 4EBB 79 FB C0			adc adr.ROW+251,y
  9088 4EBE 8D CD A0			sta PUTBYTE.DST+1
  9089 4EC1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9090 4EC3 69 00			adc #$00
  9091 4EC5 8D CE A0			sta PUTBYTE.DST+2
  9092 4EC8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9093 4ECA 69 00			adc #$00
  9094 4ECC 8D CF A0			sta PUTBYTE.DST+3
  9095 4ECF AD B6 A1			lda CL2
  9096 4ED2 8D D0 A0			sta PUTBYTE.V
  9097 4ED5 20 BF 2C			jsr PUTBYTE
  9098
  9099 				; optimize OK (service.pas), line = 1620
  9100
  9101 4ED8 AD A7 9C			lda PLAYSCREEN.OFS
  9102 4EDB 18 6D B1 A1			add XS
  9103 4EDF 85 A0			sta :STACKORIGIN+10
  9104 4EE1 AD A8 9C			lda PLAYSCREEN.OFS+1
  9105 4EE4 6D B2 A1			adc XS+1
  9106 4EE7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9107 4EE9 AD A9 9C			lda PLAYSCREEN.OFS+2
  9108 4EEC 69 00			adc #$00
  9109 4EEE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9110 4EF0 AD AA 9C			lda PLAYSCREEN.OFS+3
  9111 4EF3 69 00			adc #$00
  9112 4EF5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9113 4EF7 AD B3 A1			lda YS
  9114 4EFA 18 6D B0 A1			add Y
  9115 4EFE A8				tay
  9116 4EFF A5 A0			lda :STACKORIGIN+10
  9117 4F01 18 79 00 C0			add adr.ROW,y
  9118 4F05 8D CC A0			sta PUTBYTE.DST
  9119 4F08 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9120 4F0A 79 FB C0			adc adr.ROW+251,y
  9121 4F0D 8D CD A0			sta PUTBYTE.DST+1
  9122 4F10 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9123 4F12 69 00			adc #$00
  9124 4F14 8D CE A0			sta PUTBYTE.DST+2
  9125 4F17 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9126 4F19 69 00			adc #$00
  9127 4F1B 8D CF A0			sta PUTBYTE.DST+3
  9128 4F1E AD B6 A1			lda CL2
  9129 4F21 8D D0 A0			sta PUTBYTE.V
  9130 4F24 20 BF 2C			jsr PUTBYTE
  9131
  9132 				; --- ForToDoEpilog
  9133 4F27 EE B0 A1			inc Y
  9134 4F2A F0 03 4C 2A 4E		jne l_150D
  9135 4F2F			l_151B
  9136
  9137 				; optimize OK (service.pas), line = 1624
  9138
  9139 4F2F A9 00			lda #$00
  9140 4F31 8D AF A1			sta X
  9141
  9142 4F34			l_1582
  9143 				; --- ForToDoCondition
  9144 4F34 AD AF A1			lda X
  9145 4F37 C9 0F			cmp #$0F
  9146 4F39 90 03 4C 78 50		jcs l_1590
  9147
  9148 				; optimize OK (service.pas), line = 1628
  9149
  9150 4F3E AD A7 9C			lda PLAYSCREEN.OFS
  9151 4F41 6D B1 A1			adc XS
  9152 4F44 85 9F			sta :STACKORIGIN+9
  9153 4F46 AD A8 9C			lda PLAYSCREEN.OFS+1
  9154 4F49 6D B2 A1			adc XS+1
  9155 4F4C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9156 4F4E AD A9 9C			lda PLAYSCREEN.OFS+2
  9157 4F51 69 00			adc #$00
  9158 4F53 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9159 4F55 AD AA 9C			lda PLAYSCREEN.OFS+3
  9160 4F58 69 00			adc #$00
  9161 4F5A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9162 4F5C A5 9F			lda :STACKORIGIN+9
  9163 4F5E 18 6D AF A1			add X
  9164 4F62 85 9F			sta :STACKORIGIN+9
  9165 4F64 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9166 4F66 69 00			adc #$00
  9167 4F68 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9168 4F6A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9169 4F6C 69 00			adc #$00
  9170 4F6E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9171 4F70 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9172 4F72 69 00			adc #$00
  9173 4F74 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9174 4F76 AC B3 A1			ldy YS
  9175 4F79 A5 9F			lda :STACKORIGIN+9
  9176 4F7B 18 79 00 C0			add adr.ROW,y
  9177 4F7F 8D D1 A0			sta GETBYTE.SRC
  9178 4F82 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9179 4F84 79 FB C0			adc adr.ROW+251,y
  9180 4F87 8D D2 A0			sta GETBYTE.SRC+1
  9181 4F8A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9182 4F8C 69 00			adc #$00
  9183 4F8E 8D D3 A0			sta GETBYTE.SRC+2
  9184 4F91 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9185 4F93 69 00			adc #$00
  9186 4F95 8D D4 A0			sta GETBYTE.SRC+3
  9187 4F98 20 E7 2C			jsr GETBYTE
  9188 4F9B AD D5 A0			lda GETBYTE.RESULT
  9189 4F9E 29 80			and #$80
  9190 4FA0 8D B5 A1			sta CL
  9191
  9192 				; optimize OK (service.pas), line = 1630
  9193
  9194 4FA3 AD B6 A1			lda CL2
  9195 4FA6 29 7F			and #$7F
  9196 4FA8 0D B5 A1			ora CL
  9197 4FAB 8D B6 A1			sta CL2
  9198
  9199 				; optimize OK (service.pas), line = 1633
  9200
  9201 4FAE AD B1 A1			lda XS
  9202 4FB1 85 A0			sta :STACKORIGIN+10
  9203 4FB3 A9 50			lda #$50
  9204 4FB5 18 6D B2 A1			add XS+1
  9205 4FB9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9206 4FBB A9 00			lda #$00
  9207 4FBD 69 00			adc #$00
  9208 4FBF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9209 4FC1 A9 00			lda #$00
  9210 4FC3 69 00			adc #$00
  9211 4FC5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9212 4FC7 A5 A0			lda :STACKORIGIN+10
  9213 4FC9 18 6D AF A1			add X
  9214 4FCD 85 A0			sta :STACKORIGIN+10
  9215 4FCF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9216 4FD1 69 00			adc #$00
  9217 4FD3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9218 4FD5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9219 4FD7 69 00			adc #$00
  9220 4FD9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9221 4FDB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9222 4FDD 69 00			adc #$00
  9223 4FDF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9224 4FE1 AC B3 A1			ldy YS
  9225 4FE4 A5 A0			lda :STACKORIGIN+10
  9226 4FE6 18 79 00 C0			add adr.ROW,y
  9227 4FEA 8D CC A0			sta PUTBYTE.DST
  9228 4FED A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9229 4FEF 79 FB C0			adc adr.ROW+251,y
  9230 4FF2 8D CD A0			sta PUTBYTE.DST+1
  9231 4FF5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9232 4FF7 69 00			adc #$00
  9233 4FF9 8D CE A0			sta PUTBYTE.DST+2
  9234 4FFC A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9235 4FFE 69 00			adc #$00
  9236 5000 8D CF A0			sta PUTBYTE.DST+3
  9237 5003 AD B6 A1			lda CL2
  9238 5006 8D D0 A0			sta PUTBYTE.V
  9239 5009 20 BF 2C			jsr PUTBYTE
  9240
  9241 				; optimize OK (service.pas), line = 1636
  9242
  9243 500C AD A7 9C			lda PLAYSCREEN.OFS
  9244 500F 18 6D B1 A1			add XS
  9245 5013 85 A0			sta :STACKORIGIN+10
  9246 5015 AD A8 9C			lda PLAYSCREEN.OFS+1
  9247 5018 6D B2 A1			adc XS+1
  9248 501B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9249 501D AD A9 9C			lda PLAYSCREEN.OFS+2
  9250 5020 69 00			adc #$00
  9251 5022 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9252 5024 AD AA 9C			lda PLAYSCREEN.OFS+3
  9253 5027 69 00			adc #$00
  9254 5029 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9255 502B A5 A0			lda :STACKORIGIN+10
  9256 502D 18 6D AF A1			add X
  9257 5031 85 A0			sta :STACKORIGIN+10
  9258 5033 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9259 5035 69 00			adc #$00
  9260 5037 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9261 5039 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9262 503B 69 00			adc #$00
  9263 503D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9264 503F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9265 5041 69 00			adc #$00
  9266 5043 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9267 5045 AC B3 A1			ldy YS
  9268 5048 A5 A0			lda :STACKORIGIN+10
  9269 504A 18 79 00 C0			add adr.ROW,y
  9270 504E 8D CC A0			sta PUTBYTE.DST
  9271 5051 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9272 5053 79 FB C0			adc adr.ROW+251,y
  9273 5056 8D CD A0			sta PUTBYTE.DST+1
  9274 5059 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9275 505B 69 00			adc #$00
  9276 505D 8D CE A0			sta PUTBYTE.DST+2
  9277 5060 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9278 5062 69 00			adc #$00
  9279 5064 8D CF A0			sta PUTBYTE.DST+3
  9280 5067 AD B6 A1			lda CL2
  9281 506A 8D D0 A0			sta PUTBYTE.V
  9282 506D 20 BF 2C			jsr PUTBYTE
  9283
  9284 				; --- ForToDoEpilog
  9285 5070 EE AF A1			inc X
  9286 5073 F0 03 4C 34 4F		jne l_1582
  9287 5078			l_1590
  9288 5078			l_14B1
  9289
  9290 				; ------------------------------------------------------------
  9291
  9292 = A1AC			XA	= DATAORIGIN+$0610
  9293 = A1AD			YA	= DATAORIGIN+$0611
  9294 = A1AE			BLOCK	= DATAORIGIN+$0612
  9295 = A1AF			X	= DATAORIGIN+$0613
  9296 = A1B0			Y	= DATAORIGIN+$0614
  9297 = A1B1			XS	= DATAORIGIN+$0615
  9298 = A1B3			YS	= DATAORIGIN+$0617
  9299 = A1B5			CL	= DATAORIGIN+$0619
  9300 = A1B6			CL2	= DATAORIGIN+$061A
  9301 = A1B7			SHADOW	= DATAORIGIN+$061B
  9302
  9303 = A1AC			@VarData	= XA
  9304 = 000C			@VarDataSize	= 12
  9305
  9306 5078			@exit
  9307 					.ifdef @new
  9308 					lda <@VarData
  9309 					sta :ztmp
  9310 					lda >@VarData
  9311 					ldy #@VarDataSize-1
  9312 					jmp @FreeMem
  9313 					els
  9314 5078 60				rts						; ret
  9315 					eif
  9316 				.endl
  9317
  9318 5079			.local	PUT_WALL					; PROCEDURE
  9319
  9320 				; optimize OK (service.pas), line = 1646
  9321
  9322 5079 A9 00			lda #$00
  9323 507B 8D BB A1			sta Y
  9324
  9325 507E			l_15FD
  9326 				; --- ForToDoCondition
  9327 507E AD BB A1			lda Y
  9328 5081 C9 0F			cmp #$0F
  9329 5083 B0 48			jcs l_160B
  9330
  9331 				; optimize OK (service.pas), line = 1647
  9332
  9333 5085 A9 00			lda #$00
  9334 5087 8D BA A1			sta X
  9335
  9336 508A			l_1614
  9337 				; --- ForToDoCondition
  9338 508A AD BA A1			lda X
  9339 508D C9 0D			cmp #$0D
  9340 508F B0 37			jcs l_1622
  9341
  9342 				; optimize OK (service.pas), line = 1648
  9343
  9344 5091 AD BB A1			lda Y
  9345 5094 0A				asl @
  9346 5095 0A				asl @
  9347 5096 0A				asl @
  9348 5097 0A				asl @
  9349 5098 18 6D BA A1			add X
  9350 509C A8				tay
  9351 509D B9 00 DB			lda adr.WALL,y
  9352 50A0 F0 21			jeq l_1641
  9353 50A2 AD BB A1			lda Y
  9354 50A5 0A				asl @
  9355 50A6 0A				asl @
  9356 50A7 0A				asl @
  9357 50A8 0A				asl @
  9358 50A9 18 6D BA A1			add X
  9359 50AD A8				tay
  9360 50AE B9 00 DB			lda adr.WALL,y
  9361 50B1 8D AE A1			sta PLACE_BLOCK.BLOCK
  9362 50B4 AD BA A1			lda X
  9363 50B7 8D AC A1			sta PLACE_BLOCK.XA
  9364 50BA AD BB A1			lda Y
  9365 50BD 8D AD A1			sta PLACE_BLOCK.YA
  9366 50C0 20 35 4A			jsr PLACE_BLOCK
  9367 50C3			l_1641
  9368
  9369 				; --- ForToDoEpilog
  9370 50C3 EE BA A1			inc X
  9371 50C6 D0 C2			jne l_1614
  9372 50C8			l_1622
  9373
  9374 				; --- ForToDoEpilog
  9375 50C8 EE BB A1			inc Y
  9376 50CB D0 B1			jne l_15FD
  9377 50CD			l_160B
  9378
  9379 				; ------------------------------------------------------------
  9380
  9381 = A1BA			X	= DATAORIGIN+$061E
  9382 = A1BB			Y	= DATAORIGIN+$061F
  9383
  9384 = A1BA			@VarData	= X
  9385 = 0002			@VarDataSize	= 2
  9386
  9387 50CD			@exit
  9388 					.ifdef @new
  9389 					lda <@VarData
  9390 					sta :ztmp
  9391 					lda >@VarData
  9392 					ldy #@VarDataSize-1
  9393 					jmp @FreeMem
  9394 					els
  9395 50CD 60				rts						; ret
  9396 					eif
  9397 				.endl
  9398
  9399 50CE			.local	SET_WALL					; PROCEDURE
  9400
  9401 				; optimize OK (service.pas), line = 1657
  9402
  9403 50CE A9 00			lda #$00
  9404 50D0 8D 5A 9D			sta REMAIN_BLK
  9405
  9406 				; optimize OK (service.pas), line = 1658
  9407
  9408 50D3 AC 77 9D			ldy CUR_PLAYER
  9409 50D6 B9 68 9D			lda adr.SCORE.WALL_N,y
  9410 50D9 8D BE A1			sta WL
  9411
  9412 				; optimize OK (service.pas), line = 1661
  9413
  9414 50DC A9 00			lda #$00
  9415 50DE 8D BD A1			sta Y
  9416
  9417 50E1			l_167F
  9418 				; --- ForToDoCondition
  9419 50E1 AD BD A1			lda Y
  9420 50E4 C9 0F			cmp #$0F
  9421 50E6 B0 3D			jcs l_168D
  9422
  9423 				; optimize OK (service.pas), line = 1662
  9424
  9425 50E8 A9 00			lda #$00
  9426 50EA 8D BC A1			sta X
  9427
  9428 50ED			l_1696
  9429 				; --- ForToDoCondition
  9430 50ED AD BC A1			lda X
  9431 50F0 C9 0D			cmp #$0D
  9432 50F2 B0 2C			jcs l_16A4
  9433
  9434 				; optimize OK (service.pas), line = 1665
  9435
  9436 50F4 AD BD A1			lda Y
  9437 50F7 0A				asl @
  9438 50F8 0A				asl @
  9439 50F9 0A				asl @
  9440 50FA 0A				asl @
  9441 50FB 18 6D BC A1			add X
  9442 50FF A8				tay
  9443 5100 B9 00 DB			lda adr.WALL,y
  9444 5103 F0 16			jeq l_16DC
  9445 5105 AD BD A1			lda Y
  9446 5108 0A				asl @
  9447 5109 0A				asl @
  9448 510A 0A				asl @
  9449 510B 0A				asl @
  9450 510C 18 6D BC A1			add X
  9451 5110 A8				tay
  9452 5111 B9 00 DB			lda adr.WALL,y
  9453 5114 C9 0A			cmp #$0A
  9454 5116 F0 03			jeq l_16DC
  9455 5118 EE 5A 9D			inc REMAIN_BLK
  9456 511B			l_16DC
  9457
  9458 				; --- ForToDoEpilog
  9459 511B EE BC A1			inc X
  9460 511E D0 CD			jne l_1696
  9461 5120			l_16A4
  9462
  9463 				; --- ForToDoEpilog
  9464 5120 EE BD A1			inc Y
  9465 5123 D0 BC			jne l_167F
  9466 5125			l_168D
  9467
  9468 				; optimize OK (service.pas), line = 1667
  9469
  9470 5125 AD BE A1			lda WL
  9471 5128 38 E9 01			sub #$01
  9472 512B 85 86			sta @SMALLINT.MOD.A
  9473 512D A9 00			lda #$00
  9474 512F E9 00			sbc #$00
  9475 5131 85 87			sta @SMALLINT.MOD.A+1
  9476 5133 A9 04			lda #$04
  9477 5135 85 8E			sta @SMALLINT.MOD.B
  9478 5137 A9 00			lda #$00
  9479 5139 85 8F			sta @SMALLINT.MOD.B+1
  9480 513B 20 7F 12			jsr @SMALLINT.MOD
  9481 513E A5 92			lda @SMALLINT.MOD.RESULT
  9482 5140 8D BE A1			sta WL
  9483
  9484 				; optimize OK (service.pas), line = 1669
  9485
  9486 5143 8D BF A1			sta @CASETMP_0007
  9487 5146 C9 00			cmp #$00
  9488 5148 D0 33			jne l_1706
  9489 				@
  9490
  9491 				; optimize OK (service.pas), line = 1670
  9492
  9493 514A AD 30 9D 8D 28 9D + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9494 517A 4C 56 52			jmp a_0007
  9495 517D			l_1706
  9496 517D C9 01			cmp #$01
  9497 517F D0 33			jne l_170F
  9498
  9499 				; optimize OK (service.pas), line = 1671
  9500
  9501 5181 AD 38 9D 8D 28 9D + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9502 51B1 4C 56 52			jmp a_0007
  9503 51B4			l_170F
  9504 51B4 C9 02			cmp #$02
  9505 51B6 D0 33			jne l_1718
  9506
  9507 				; optimize OK (service.pas), line = 1672
  9508
  9509 51B8 AD 40 9D 8D 28 9D + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9510 51E8 4C 56 52			jmp a_0007
  9511 51EB			l_1718
  9512 51EB C9 03			cmp #$03
  9513 51ED D0 33			jne l_1721
  9514
  9515 				; optimize OK (service.pas), line = 1673
  9516
  9517 51EF AD 48 9D 8D 28 9D + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9518 521F 4C 56 52			jmp a_0007
  9519 5222			l_1721
  9520 5222 C9 04			cmp #$04
  9521 5224 D0 30			jne l_172A
  9522
  9523 				; optimize OK (service.pas), line = 1674
  9524
  9525 5226 AD 50 9D 8D 28 9D + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9526 5256			l_172A
  9527 5256			a_0007
  9528
  9529 				; ------------------------------------------------------------
  9530
  9531 = A1BC			X	= DATAORIGIN+$0620
  9532 = A1BD			Y	= DATAORIGIN+$0621
  9533 = A1BE			WL	= DATAORIGIN+$0622
  9534 = A1BF			@CASETMP_0007	= DATAORIGIN+$0623
  9535
  9536 = A1BC			@VarData	= X
  9537 = 0004			@VarDataSize	= 4
  9538
  9539 5256			@exit
  9540 					.ifdef @new
  9541 					lda <@VarData
  9542 					sta :ztmp
  9543 					lda >@VarData
  9544 					ldy #@VarDataSize-1
  9545 					jmp @FreeMem
  9546 					els
  9547 5256 60				rts						; ret
  9548 					eif
  9549 				.endl
  9550
  9551 5257			.local	SPLIT_LINE					; FUNCTION
  9552
  9553 				; optimize OK (service.pas), line = 1713
  9554
  9555 5257 AC C0 A1 84 84 AC + 	mwy X1 :bp2
  9556 5261 A0 00			ldy #$00
  9557 5263 B1 84			lda (:bp2),y
  9558 5265 18 69 10			add #$10
  9559 5268 91 84			sta (:bp2),y
  9560 526A C8				iny
  9561 526B B1 84			lda (:bp2),y
  9562 526D 69 00			adc #$00
  9563 526F 91 84			sta (:bp2),y
  9564
  9565 				; optimize OK (service.pas), line = 1714
  9566
  9567 5271 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
  9568 527B A0 00			ldy #$00
  9569 527D B1 84			lda (:bp2),y
  9570 527F 18 69 18			add #$18
  9571 5282 91 84			sta (:bp2),y
  9572 5284 C8				iny
  9573 5285 B1 84			lda (:bp2),y
  9574 5287 69 00			adc #$00
  9575 5289 91 84			sta (:bp2),y
  9576
  9577 				; optimize OK (service.pas), line = 1715
  9578
  9579 528B AC C4 A1 84 84 AC + 	mwy X2 :bp2
  9580 5295 A0 00			ldy #$00
  9581 5297 B1 84			lda (:bp2),y
  9582 5299 18 69 10			add #$10
  9583 529C 91 84			sta (:bp2),y
  9584 529E C8				iny
  9585 529F B1 84			lda (:bp2),y
  9586 52A1 69 00			adc #$00
  9587 52A3 91 84			sta (:bp2),y
  9588
  9589 				; optimize OK (service.pas), line = 1716
  9590
  9591 52A5 AC C6 A1 84 84 AC + 	mwy Y2 :bp2
  9592 52AF A0 00			ldy #$00
  9593 52B1 B1 84			lda (:bp2),y
  9594 52B3 18 69 18			add #$18
  9595 52B6 91 84			sta (:bp2),y
  9596 52B8 C8				iny
  9597 52B9 B1 84			lda (:bp2),y
  9598 52BB 69 00			adc #$00
  9599 52BD 91 84			sta (:bp2),y
  9600
  9601 				; optimize OK (service.pas), line = 1718
  9602
  9603 52BF A9 00			lda #$00
  9604 52C1 8D E9 A1			sta COLLISION
  9605
  9606 				; optimize OK (service.pas), line = 1720
  9607
  9608 52C4 AC C0 A1 84 84 AC + 	mwy X1 :bp2
  9609 52CE A0 00			ldy #$00
  9610 52D0 B1 84			lda (:bp2),y
  9611 52D2 85 9F			sta :STACKORIGIN+9
  9612 52D4 C8				iny
  9613 52D5 B1 84			lda (:bp2),y
  9614 52D7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9615 52D9 A0 00			ldy #$00
  9616 52DB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9617 52DD 10 01			spl
  9618 52DF 88				dey
  9619 52E0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9620 52E2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9621 52E4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9622 52E6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9623 52E8 66 9F			ror :STACKORIGIN+9
  9624 52EA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9625 52EC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9626 52EE 66 9F			ror :STACKORIGIN+9
  9627 52F0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9628 52F2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9629 52F4 66 9F			ror :STACKORIGIN+9
  9630 52F6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9631 52F8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9632 52FA 66 9F			ror :STACKORIGIN+9
  9633 52FC A5 9F			lda :STACKORIGIN+9
  9634 52FE 8D DD A1			sta XP1
  9635 5301 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9636 5303 8D DE A1			sta XP1+1
  9637
  9638 				; optimize OK (service.pas), line = 1721
  9639
  9640 5306 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
  9641 5310 A0 00			ldy #$00
  9642 5312 B1 84			lda (:bp2),y
  9643 5314 85 9F			sta :STACKORIGIN+9
  9644 5316 C8				iny
  9645 5317 B1 84			lda (:bp2),y
  9646 5319 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9647 531B A0 00			ldy #$00
  9648 531D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9649 531F 10 01			spl
  9650 5321 88				dey
  9651 5322 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9652 5324 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9653 5326 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9654 5328 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9655 532A 66 9F			ror :STACKORIGIN+9
  9656 532C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9657 532E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9658 5330 66 9F			ror :STACKORIGIN+9
  9659 5332 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9660 5334 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9661 5336 66 9F			ror :STACKORIGIN+9
  9662 5338 A5 9F			lda :STACKORIGIN+9
  9663 533A 8D DF A1			sta YP1
  9664 533D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9665 533F 8D E0 A1			sta YP1+1
  9666
  9667 				; optimize OK (service.pas), line = 1722
  9668
  9669 5342 AC C4 A1 84 84 AC + 	mwy X2 :bp2
  9670 534C A0 00			ldy #$00
  9671 534E B1 84			lda (:bp2),y
  9672 5350 85 9F			sta :STACKORIGIN+9
  9673 5352 C8				iny
  9674 5353 B1 84			lda (:bp2),y
  9675 5355 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9676 5357 A0 00			ldy #$00
  9677 5359 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9678 535B 10 01			spl
  9679 535D 88				dey
  9680 535E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9681 5360 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9682 5362 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9683 5364 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9684 5366 66 9F			ror :STACKORIGIN+9
  9685 5368 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9686 536A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9687 536C 66 9F			ror :STACKORIGIN+9
  9688 536E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9689 5370 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9690 5372 66 9F			ror :STACKORIGIN+9
  9691 5374 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9692 5376 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9693 5378 66 9F			ror :STACKORIGIN+9
  9694 537A A5 9F			lda :STACKORIGIN+9
  9695 537C 8D E1 A1			sta XP2
  9696 537F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9697 5381 8D E2 A1			sta XP2+1
  9698
  9699 				; optimize OK (service.pas), line = 1723
  9700
  9701 5384 AC C6 A1 84 84 AC + 	mwy Y2 :bp2
  9702 538E A0 00			ldy #$00
  9703 5390 B1 84			lda (:bp2),y
  9704 5392 85 9F			sta :STACKORIGIN+9
  9705 5394 C8				iny
  9706 5395 B1 84			lda (:bp2),y
  9707 5397 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9708 5399 A0 00			ldy #$00
  9709 539B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9710 539D 10 01			spl
  9711 539F 88				dey
  9712 53A0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9713 53A2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9714 53A4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9715 53A6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9716 53A8 66 9F			ror :STACKORIGIN+9
  9717 53AA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9718 53AC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9719 53AE 66 9F			ror :STACKORIGIN+9
  9720 53B0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9721 53B2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9722 53B4 66 9F			ror :STACKORIGIN+9
  9723 53B6 A5 9F			lda :STACKORIGIN+9
  9724 53B8 8D E3 A1			sta YP2
  9725 53BB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9726 53BD 8D E4 A1			sta YP2+1
  9727
  9728 				; optimize OK (service.pas), line = 1725
  9729
  9730 53C0 AC C0 A1 84 84 AC + 	mwy X1 :bp2
  9731 53CA A0 00			ldy #$00
  9732 53CC B1 84			lda (:bp2),y
  9733 53CE 8D CD A1			sta XK
  9734 53D1 C8				iny
  9735 53D2 B1 84			lda (:bp2),y
  9736 53D4 8D CE A1			sta XK+1
  9737
  9738 				; optimize OK (service.pas), line = 1726
  9739
  9740 53D7 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
  9741 53E1 A0 00			ldy #$00
  9742 53E3 B1 84			lda (:bp2),y
  9743 53E5 8D CF A1			sta YK
  9744 53E8 C8				iny
  9745 53E9 B1 84			lda (:bp2),y
  9746 53EB 8D D0 A1			sta YK+1
  9747
  9748 				; optimize OK (service.pas), line = 1727
  9749
  9750 53EE AC C4 A1 84 84 AC + 	mwy X2 :bp2
  9751 53F8 A0 00			ldy #$00
  9752 53FA B1 84			lda (:bp2),y
  9753 53FC 8D D1 A1			sta XJ
  9754 53FF C8				iny
  9755 5400 B1 84			lda (:bp2),y
  9756 5402 8D D2 A1			sta XJ+1
  9757
  9758 				; optimize OK (service.pas), line = 1728
  9759
  9760 5405 AC C6 A1 84 84 AC + 	mwy Y2 :bp2
  9761 540F A0 00			ldy #$00
  9762 5411 B1 84			lda (:bp2),y
  9763 5413 8D D3 A1			sta YJ
  9764 5416 C8				iny
  9765 5417 B1 84			lda (:bp2),y
  9766 5419 8D D4 A1			sta YJ+1
  9767
  9768 				; optimize OK (service.pas), line = 1730
  9769
  9770 541C AC C0 A1 84 84 AC + 	mwy X1 :bp2
  9771 5426 A0 00			ldy #$00
  9772 5428 B1 84			lda (:bp2),y
  9773 542A 8D D5 A1			sta XH
  9774 542D C8				iny
  9775 542E B1 84			lda (:bp2),y
  9776 5430 8D D6 A1			sta XH+1
  9777
  9778 				; optimize OK (service.pas), line = 1731
  9779
  9780 5433 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
  9781 543D A0 00			ldy #$00
  9782 543F B1 84			lda (:bp2),y
  9783 5441 8D D7 A1			sta YH
  9784 5444 C8				iny
  9785 5445 B1 84			lda (:bp2),y
  9786 5447 8D D8 A1			sta YH+1
  9787
  9788 				; optimize OK (service.pas), line = 1732
  9789
  9790 544A AC C4 A1 84 84 AC + 	mwy X2 :bp2
  9791 5454 A0 00			ldy #$00
  9792 5456 B1 84			lda (:bp2),y
  9793 5458 8D D9 A1			sta XN
  9794 545B C8				iny
  9795 545C B1 84			lda (:bp2),y
  9796 545E 8D DA A1			sta XN+1
  9797
  9798 				; optimize OK (service.pas), line = 1733
  9799
  9800 5461 AC C6 A1 84 84 AC + 	mwy Y2 :bp2
  9801 546B A0 00			ldy #$00
  9802 546D B1 84			lda (:bp2),y
  9803 546F 8D DB A1			sta YN
  9804 5472 C8				iny
  9805 5473 B1 84			lda (:bp2),y
  9806 5475 8D DC A1			sta YN+1
  9807
  9808 				; optimize OK (service.pas), line = 1740
  9809
  9810 5478 AC C0 A1 84 84 AC + 	mwy X1 :bp2
  9811 5482 A0 00			ldy #$00
  9812 5484 B1 84			lda (:bp2),y
  9813 5486 85 9F			sta :STACKORIGIN+9
  9814 5488 C8				iny
  9815 5489 B1 84			lda (:bp2),y
  9816 548B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9817 548D AC C4 A1 84 84 AC + 	mwy X2 :bp2
  9818 5497 A0 00			ldy #$00
  9819 5499 B1 84			lda (:bp2),y
  9820 549B 85 A0			sta :STACKORIGIN+10
  9821 549D C8				iny
  9822 549E B1 84			lda (:bp2),y
  9823 54A0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9824 54A2 A0 00			ldy #$00
  9825 54A4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9826 54A6 10 01			spl
  9827 54A8 88				dey
  9828 54A9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9829 54AB 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9830 54AD 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9831 54AF A0 00			ldy #$00
  9832 54B1 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9833 54B3 10 01			spl
  9834 54B5 88				dey
  9835 54B6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9836 54B8 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9837 54BA 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9838 54BC A5 9F			lda :STACKORIGIN+9
  9839 54BE 38 E5 A0			sub :STACKORIGIN+10
  9840 54C1 85 8A			sta SYSTEM.ABS.@010185000.X
  9841 54C3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9842 54C5 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9843 54C7 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9844 54C9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9845 54CB E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9846 54CD 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9847 54CF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9848 54D1 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9849 54D3 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9850 54D5 20 C1 1C			jsr SYSTEM.ABS.@010185000
  9851 54D8 E8				inx
  9852 54D9 A0 01			ldy #1
  9853 54DB				.LOCAL
  9854 54DB A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9855 54DD 38 E9 00			sub #$00
  9856 54E0 D0 1C			bne L4
  9857 54E2 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9858 54E4 C9 00			cmp #$00
  9859 54E6 D0 0A			bne L1
  9860 54E8 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9861 54EA C9 00			cmp #$00
  9862 54EC D0 04			bne L1
  9863 54EE A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9864 54F0 C9 10			cmp #$10
  9865 54F2 F0 10		L1	beq L5
  9866 54F4 B0 04			bcs L3
  9867 54F6 A9 FF			lda #$FF
  9868 54F8 D0 0A			bne L5
  9869 54FA A9 01		L3	lda #$01
  9870 54FC D0 06			bne L5
  9871 54FE 50 04		L4	bvc L5
  9872 5500 49 FF			eor #$FF
  9873 5502 09 01			ora #$01
  9874 5504			L5
  9875 					.ENDL
  9876 5504 F0 02			seq
  9877 5506 10 01			bpl @+
  9878 5508 88				dey
  9879 				@
  9880 5509 94 96			sty :STACKORIGIN,x
  9881 550B AC C6 A1 84 84 AC + 	mwy Y2 :bp2
  9882 5515 A0 00			ldy #$00
  9883 5517 B1 84			lda (:bp2),y
  9884 5519 85 9F			sta :STACKORIGIN+9
  9885 551B C8				iny
  9886 551C B1 84			lda (:bp2),y
  9887 551E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9888 5520 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
  9889 552A A0 00			ldy #$00
  9890 552C B1 84			lda (:bp2),y
  9891 552E 85 A0			sta :STACKORIGIN+10
  9892 5530 C8				iny
  9893 5531 B1 84			lda (:bp2),y
  9894 5533 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9895 5535 A0 00			ldy #$00
  9896 5537 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9897 5539 10 01			spl
  9898 553B 88				dey
  9899 553C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9900 553E 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9901 5540 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9902 5542 A0 00			ldy #$00
  9903 5544 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9904 5546 10 01			spl
  9905 5548 88				dey
  9906 5549 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9907 554B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9908 554D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9909 554F A5 9F			lda :STACKORIGIN+9
  9910 5551 38 E5 A0			sub :STACKORIGIN+10
  9911 5554 85 8A			sta SYSTEM.ABS.@010185000.X
  9912 5556 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9913 5558 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9914 555A 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9915 555C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9916 555E E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9917 5560 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9918 5562 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9919 5564 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9920 5566 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9921 5568 20 C1 1C			jsr SYSTEM.ABS.@010185000
  9922 556B CA				dex
  9923 556C A0 01			ldy #1
  9924 556E				.LOCAL
  9925 556E A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9926 5570 38 E9 00			sub #$00
  9927 5573 D0 1C			bne L4
  9928 5575 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9929 5577 C9 00			cmp #$00
  9930 5579 D0 0A			bne L1
  9931 557B A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9932 557D C9 00			cmp #$00
  9933 557F D0 04			bne L1
  9934 5581 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9935 5583 C9 08			cmp #$08
  9936 5585 F0 10		L1	beq L5
  9937 5587 B0 04			bcs L3
  9938 5589 A9 FF			lda #$FF
  9939 558B D0 0A			bne L5
  9940 558D A9 01		L3	lda #$01
  9941 558F D0 06			bne L5
  9942 5591 50 04		L4	bvc L5
  9943 5593 49 FF			eor #$FF
  9944 5595 09 01			ora #$01
  9945 5597			L5
  9946 					.ENDL
  9947 5597 F0 02			seq
  9948 5599 10 01			bpl @+
  9949 559B 88				dey
  9950 				@
  9951 559C 98				tya
  9952 559D 15 97			ora :STACKORIGIN+1,x
  9953 559F F0 05			jeq l_17B3
  9954
  9955 				; optimize OK (service.pas), line = 1741
  9956
  9957 55A1 A9 01			lda #$01
  9958 55A3 20 67 2D			jsr FATAL_ERROR
  9959 55A6			l_17B3
  9960
  9961 				; optimize OK (service.pas), line = 1744
  9962
  9963 55A6 AD DE A1			lda XP1+1
  9964 55A9 CD E2 A1			cmp XP2+1
  9965 55AC D0 06			bne @+
  9966 55AE AD DD A1			lda XP1
  9967 55B1 CD E1 A1			cmp XP2
  9968 				@
  9969 55B4 D0 13			jne l_17D6x
  9970 55B6 AD E0 A1			lda YP1+1
  9971 55B9 CD E4 A1			cmp YP2+1
  9972 55BC D0 06			bne @+
  9973 55BE AD DF A1			lda YP1
  9974 55C1 CD E3 A1			cmp YP2
  9975 				@
  9976 55C4 D0 03 4C 07 59		jeq l_17D6
  9977 55C9			l_17D6x
  9978
  9979 				; optimize OK (service.pas), line = 1746
  9980
  9981 55C9 AD E0 A1			lda YP1+1
  9982 55CC CD E4 A1			cmp YP2+1
  9983 55CF D0 06			bne @+
  9984 55D1 AD DF A1			lda YP1
  9985 55D4 CD E3 A1			cmp YP2
  9986 				@
  9987 55D7 D0 03 4C 12 57		jeq l_17E9
  9988
  9989 				; optimize OK (service.pas), line = 1748
  9990
  9991 55DC AD E9 A1			lda COLLISION
  9992 55DF 09 01			ora #$01
  9993 55E1 8D E9 A1			sta COLLISION
  9994
  9995 				; --- WhileProlog
  9996 55E4 4C FF 56			jmp l_17F6
  9997 55E7			l_17F7
  9998
  9999 				; optimize OK (service.pas), line = 1752
 10000
 10001 55E7 AD D5 A1			lda XH
 10002 55EA 85 9F			sta :STACKORIGIN+9
 10003 55EC A0 00			ldy #$00
 10004 55EE AD D6 A1			lda XH+1
 10005 55F1 10 01			spl
 10006 55F3 88				dey
 10007 55F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10008 55F6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10009 55F8 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10010 55FA AD D9 A1			lda XN
 10011 55FD 85 A0			sta :STACKORIGIN+10
 10012 55FF A0 00			ldy #$00
 10013 5601 AD DA A1			lda XN+1
 10014 5604 10 01			spl
 10015 5606 88				dey
 10016 5607 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10017 5609 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10018 560B 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10019 560D A5 9F			lda :STACKORIGIN+9
 10020 560F 18 65 A0			add :STACKORIGIN+10
 10021 5612 85 9F			sta :STACKORIGIN+9
 10022 5614 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10023 5616 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10024 5618 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10025 561A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10026 561C 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10027 561E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10028 5620 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10029 5622 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10030 5624 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10031 5626 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10032 5628 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10033 562A 66 9F			ror :STACKORIGIN+9
 10034 562C A5 9F			lda :STACKORIGIN+9
 10035 562E 8D C9 A1			sta X
 10036 5631 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10037 5633 8D CA A1			sta X+1
 10038
 10039 				; optimize OK (service.pas), line = 1753
 10040
 10041 5636 AD D7 A1			lda YH
 10042 5639 85 9F			sta :STACKORIGIN+9
 10043 563B A0 00			ldy #$00
 10044 563D AD D8 A1			lda YH+1
 10045 5640 10 01			spl
 10046 5642 88				dey
 10047 5643 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10048 5645 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10049 5647 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10050 5649 AD DB A1			lda YN
 10051 564C 85 A0			sta :STACKORIGIN+10
 10052 564E A0 00			ldy #$00
 10053 5650 AD DC A1			lda YN+1
 10054 5653 10 01			spl
 10055 5655 88				dey
 10056 5656 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10057 5658 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10058 565A 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10059 565C A5 9F			lda :STACKORIGIN+9
 10060 565E 18 65 A0			add :STACKORIGIN+10
 10061 5661 85 9F			sta :STACKORIGIN+9
 10062 5663 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10063 5665 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10064 5667 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10065 5669 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10066 566B 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10067 566D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10068 566F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10069 5671 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10070 5673 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10071 5675 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10072 5677 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10073 5679 66 9F			ror :STACKORIGIN+9
 10074 567B A5 9F			lda :STACKORIGIN+9
 10075 567D 8D CB A1			sta Y
 10076 5680 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10077 5682 8D CC A1			sta Y+1
 10078
 10079 				; optimize OK (service.pas), line = 1755
 10080
 10081 5685 AD CB A1			lda Y
 10082 5688 85 9F			sta :STACKORIGIN+9
 10083 568A A0 00			ldy #$00
 10084 568C AD CC A1			lda Y+1
 10085 568F 10 01			spl
 10086 5691 88				dey
 10087 5692 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10088 5694 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10089 5696 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10090 5698 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10091 569A 66 9F			ror :STACKORIGIN+9
 10092 569C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10093 569E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10094 56A0 66 9F			ror :STACKORIGIN+9
 10095 56A2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10096 56A4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10097 56A6 66 9F			ror :STACKORIGIN+9
 10098 56A8 A5 9F			lda :STACKORIGIN+9
 10099 56AA 8D E7 A1			sta YP
 10100 56AD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10101 56AF 8D E8 A1			sta YP+1
 10102
 10103 				; optimize OK (service.pas), line = 1757
 10104
 10105 56B2 CD E0 A1			cmp YP1+1
 10106 56B5 D0 06			bne @+
 10107 56B7 AD E7 A1			lda YP
 10108 56BA CD DF A1			cmp YP1
 10109 				@
 10110 56BD D0 18			jne l_182E
 10111
 10112 				; optimize OK (service.pas), line = 1759
 10113
 10114 56BF AD C9 A1			lda X
 10115 56C2 8D D5 A1			sta XH
 10116 56C5 AD CA A1			lda X+1
 10117 56C8 8D D6 A1			sta XH+1
 10118
 10119 				; optimize OK (service.pas), line = 1760
 10120
 10121 56CB AD CB A1			lda Y
 10122 56CE 8D D7 A1			sta YH
 10123 56D1 AD CC A1			lda Y+1
 10124 56D4 8D D8 A1			sta YH+1
 10125 56D7			l_182E
 10126
 10127 				; optimize OK (service.pas), line = 1763
 10128
 10129 56D7 AD E8 A1			lda YP+1
 10130 56DA CD E4 A1			cmp YP2+1
 10131 56DD D0 06			bne @+
 10132 56DF AD E7 A1			lda YP
 10133 56E2 CD E3 A1			cmp YP2
 10134 				@
 10135 56E5 D0 18			jne l_184D
 10136
 10137 				; optimize OK (service.pas), line = 1765
 10138
 10139 56E7 AD C9 A1			lda X
 10140 56EA 8D D9 A1			sta XN
 10141 56ED AD CA A1			lda X+1
 10142 56F0 8D DA A1			sta XN+1
 10143
 10144 				; optimize OK (service.pas), line = 1766
 10145
 10146 56F3 AD CB A1			lda Y
 10147 56F6 8D DB A1			sta YN
 10148 56F9 AD CC A1			lda Y+1
 10149 56FC 8D DC A1			sta YN+1
 10150 56FF			l_184D
 10151 56FF			l_17F6
 10152
 10153 				; optimize OK (service.pas), line = 1750
 10154
 10155 56FF AD DB A1			lda YN
 10156 5702 29 07			and #$07
 10157 5704 F0 0C			jeq l_17F7w
 10158 5706 AD DB A1			lda YN
 10159 5709 29 07			and #$07
 10160 570B C9 07			cmp #$07
 10161 570D F0 03 4C E7 55		jne l_17F7
 10162 5712			l_17F7w
 10163 5712			l_17E9
 10164
 10165 				; optimize OK (service.pas), line = 1772
 10166
 10167 5712 AD DE A1			lda XP1+1
 10168 5715 CD E2 A1			cmp XP2+1
 10169 5718 D0 06			bne @+
 10170 571A AD DD A1			lda XP1
 10171 571D CD E1 A1			cmp XP2
 10172 				@
 10173 5720 D0 03 4C 61 58		jeq l_188C
 10174
 10175 				; optimize OK (service.pas), line = 1774
 10176
 10177 5725 AD E9 A1			lda COLLISION
 10178 5728 09 02			ora #$02
 10179 572A 8D E9 A1			sta COLLISION
 10180
 10181 				; --- WhileProlog
 10182 572D 4C 4E 58			jmp l_1899
 10183 5730			l_189A
 10184
 10185 				; optimize OK (service.pas), line = 1778
 10186
 10187 5730 AD CD A1			lda XK
 10188 5733 85 9F			sta :STACKORIGIN+9
 10189 5735 A0 00			ldy #$00
 10190 5737 AD CE A1			lda XK+1
 10191 573A 10 01			spl
 10192 573C 88				dey
 10193 573D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10194 573F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10195 5741 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10196 5743 AD D1 A1			lda XJ
 10197 5746 85 A0			sta :STACKORIGIN+10
 10198 5748 A0 00			ldy #$00
 10199 574A AD D2 A1			lda XJ+1
 10200 574D 10 01			spl
 10201 574F 88				dey
 10202 5750 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10203 5752 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10204 5754 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10205 5756 A5 9F			lda :STACKORIGIN+9
 10206 5758 18 65 A0			add :STACKORIGIN+10
 10207 575B 85 9F			sta :STACKORIGIN+9
 10208 575D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10209 575F 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10210 5761 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10211 5763 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10212 5765 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10213 5767 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10214 5769 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10215 576B 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10216 576D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10217 576F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10218 5771 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10219 5773 66 9F			ror :STACKORIGIN+9
 10220 5775 A5 9F			lda :STACKORIGIN+9
 10221 5777 8D C9 A1			sta X
 10222 577A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10223 577C 8D CA A1			sta X+1
 10224
 10225 				; optimize OK (service.pas), line = 1779
 10226
 10227 577F AD CF A1			lda YK
 10228 5782 85 9F			sta :STACKORIGIN+9
 10229 5784 A0 00			ldy #$00
 10230 5786 AD D0 A1			lda YK+1
 10231 5789 10 01			spl
 10232 578B 88				dey
 10233 578C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10234 578E 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10235 5790 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10236 5792 AD D3 A1			lda YJ
 10237 5795 85 A0			sta :STACKORIGIN+10
 10238 5797 A0 00			ldy #$00
 10239 5799 AD D4 A1			lda YJ+1
 10240 579C 10 01			spl
 10241 579E 88				dey
 10242 579F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10243 57A1 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10244 57A3 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10245 57A5 A5 9F			lda :STACKORIGIN+9
 10246 57A7 18 65 A0			add :STACKORIGIN+10
 10247 57AA 85 9F			sta :STACKORIGIN+9
 10248 57AC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10249 57AE 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10250 57B0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10251 57B2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10252 57B4 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10253 57B6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10254 57B8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10255 57BA 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10256 57BC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10257 57BE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10258 57C0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10259 57C2 66 9F			ror :STACKORIGIN+9
 10260 57C4 A5 9F			lda :STACKORIGIN+9
 10261 57C6 8D CB A1			sta Y
 10262 57C9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10263 57CB 8D CC A1			sta Y+1
 10264
 10265 				; optimize OK (service.pas), line = 1781
 10266
 10267 57CE AD C9 A1			lda X
 10268 57D1 85 9F			sta :STACKORIGIN+9
 10269 57D3 A0 00			ldy #$00
 10270 57D5 AD CA A1			lda X+1
 10271 57D8 10 01			spl
 10272 57DA 88				dey
 10273 57DB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10274 57DD 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10275 57DF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10276 57E1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10277 57E3 66 9F			ror :STACKORIGIN+9
 10278 57E5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10279 57E7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10280 57E9 66 9F			ror :STACKORIGIN+9
 10281 57EB 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10282 57ED 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10283 57EF 66 9F			ror :STACKORIGIN+9
 10284 57F1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10285 57F3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10286 57F5 66 9F			ror :STACKORIGIN+9
 10287 57F7 A5 9F			lda :STACKORIGIN+9
 10288 57F9 8D E5 A1			sta XP
 10289 57FC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10290 57FE 8D E6 A1			sta XP+1
 10291
 10292 				; optimize OK (service.pas), line = 1783
 10293
 10294 5801 CD DE A1			cmp XP1+1
 10295 5804 D0 06			bne @+
 10296 5806 AD E5 A1			lda XP
 10297 5809 CD DD A1			cmp XP1
 10298 				@
 10299 580C D0 18			jne l_18D1
 10300
 10301 				; optimize OK (service.pas), line = 1785
 10302
 10303 580E AD C9 A1			lda X
 10304 5811 8D CD A1			sta XK
 10305 5814 AD CA A1			lda X+1
 10306 5817 8D CE A1			sta XK+1
 10307
 10308 				; optimize OK (service.pas), line = 1786
 10309
 10310 581A AD CB A1			lda Y
 10311 581D 8D CF A1			sta YK
 10312 5820 AD CC A1			lda Y+1
 10313 5823 8D D0 A1			sta YK+1
 10314 5826			l_18D1
 10315
 10316 				; optimize OK (service.pas), line = 1789
 10317
 10318 5826 AD E6 A1			lda XP+1
 10319 5829 CD E2 A1			cmp XP2+1
 10320 582C D0 06			bne @+
 10321 582E AD E5 A1			lda XP
 10322 5831 CD E1 A1			cmp XP2
 10323 				@
 10324 5834 D0 18			jne l_18F0
 10325
 10326 				; optimize OK (service.pas), line = 1791
 10327
 10328 5836 AD C9 A1			lda X
 10329 5839 8D D1 A1			sta XJ
 10330 583C AD CA A1			lda X+1
 10331 583F 8D D2 A1			sta XJ+1
 10332
 10333 				; optimize OK (service.pas), line = 1792
 10334
 10335 5842 AD CB A1			lda Y
 10336 5845 8D D3 A1			sta YJ
 10337 5848 AD CC A1			lda Y+1
 10338 584B 8D D4 A1			sta YJ+1
 10339 584E			l_18F0
 10340 584E			l_1899
 10341
 10342 				; optimize OK (service.pas), line = 1776
 10343
 10344 584E AD D1 A1			lda XJ
 10345 5851 29 0F			and #$0F
 10346 5853 F0 0C			jeq l_189Aw
 10347 5855 AD D1 A1			lda XJ
 10348 5858 29 0F			and #$0F
 10349 585A C9 0F			cmp #$0F
 10350 585C F0 03 4C 30 57		jne l_189A
 10351 5861			l_189Aw
 10352 5861			l_188C
 10353
 10354 				; optimize OK (service.pas), line = 1803
 10355
 10356 5861 AD E9 A1			lda COLLISION
 10357 5864 C9 01			cmp #$01
 10358 5866 D0 03			jne l_192F
 10359 				; optimize OK (service.pas), line = 1805
 10360 				; optimize OK (service.pas), line = 1806
 10361 5868 4C D6 58			jmp l_1943
 10362 586B			l_192F
 10363
 10364 				; optimize OK (service.pas), line = 1808
 10365
 10366 586B AD E9 A1			lda COLLISION
 10367 586E C9 02			cmp #$02
 10368 5870 D0 2F			jne l_1955
 10369
 10370 				; optimize OK (service.pas), line = 1810
 10371
 10372 5872 AC C4 A1 84 84 AC + 	mwy X2 :bp2
 10373 587C A0 00			ldy #$00
 10374 587E AD D1 A1			lda XJ
 10375 5881 91 84			sta (:bp2),y
 10376 5883 C8				iny
 10377 5884 AD D2 A1			lda XJ+1
 10378 5887 91 84			sta (:bp2),y
 10379
 10380 				; optimize OK (service.pas), line = 1811
 10381
 10382 5889 AC C6 A1 84 84 AC + 	mwy Y2 :bp2
 10383 5893 A0 00			ldy #$00
 10384 5895 AD D3 A1			lda YJ
 10385 5898 91 84			sta (:bp2),y
 10386 589A C8				iny
 10387 589B AD D4 A1			lda YJ+1
 10388 589E 4C 02 59			jmp l_1969
 10389 58A1			l_1955
 10390
 10391 				; optimize OK (service.pas), line = 1813
 10392
 10393 58A1 AD E9 A1			lda COLLISION
 10394 58A4 C9 03			cmp #$03
 10395 58A6 D0 5C			jne l_197B
 10396
 10397 				; optimize OK (service.pas), line = 1815
 10398
 10399 58A8 AC C0 A1 84 84 AC + 	mwy X1 :bp2
 10400 58B2 A0 00			ldy #$00
 10401 58B4 AD D1 A1			lda XJ
 10402 58B7 91 84			sta (:bp2),y
 10403 58B9 C8				iny
 10404 58BA AD D2 A1			lda XJ+1
 10405 58BD 91 84			sta (:bp2),y
 10406
 10407 				; optimize OK (service.pas), line = 1816
 10408
 10409 58BF AC C2 A1 84 84 AC + 	mwy Y1 :bp2
 10410 58C9 A0 00			ldy #$00
 10411 58CB AD D3 A1			lda YJ
 10412 58CE 91 84			sta (:bp2),y
 10413 58D0 C8				iny
 10414 58D1 AD D4 A1			lda YJ+1
 10415 58D4 91 84			sta (:bp2),y
 10416 58D6			l_1943
 10417
 10418 				; optimize OK (service.pas), line = 1817
 10419
 10420 58D6 AC C4 A1 84 84 AC + 	mwy X2 :bp2
 10421 58E0 A0 00			ldy #$00
 10422 58E2 AD D9 A1			lda XN
 10423 58E5 91 84			sta (:bp2),y
 10424 58E7 C8				iny
 10425 58E8 AD DA A1			lda XN+1
 10426 58EB 91 84			sta (:bp2),y
 10427
 10428 				; optimize OK (service.pas), line = 1818
 10429
 10430 58ED AC C6 A1 84 84 AC + 	mwy Y2 :bp2
 10431 58F7 A0 00			ldy #$00
 10432 58F9 AD DB A1			lda YN
 10433 58FC 91 84			sta (:bp2),y
 10434 58FE C8				iny
 10435 58FF AD DC A1			lda YN+1
 10436 5902			l_1969
 10437 5902 91 84			sta (:bp2),y
 10438 5904			l_197B
 10439 5904 4C 0C 59			jmp l_199B
 10440 5907			l_17D6
 10441
 10442 				; optimize OK (service.pas), line = 1823
 10443
 10444 5907 A9 02			lda #$02
 10445 5909 20 67 2D			jsr FATAL_ERROR
 10446 590C			l_199B
 10447
 10448 				; optimize OK (service.pas), line = 1826
 10449
 10450 590C AC C0 A1 84 84 AC + 	mwy X1 :bp2
 10451 5916 A0 00			ldy #$00
 10452 5918 B1 84			lda (:bp2),y
 10453 591A 38 E9 10			sub #$10
 10454 591D 91 84			sta (:bp2),y
 10455 591F C8				iny
 10456 5920 B1 84			lda (:bp2),y
 10457 5922 E9 00			sbc #$00
 10458 5924 91 84			sta (:bp2),y
 10459
 10460 				; optimize OK (service.pas), line = 1827
 10461
 10462 5926 AC C2 A1 84 84 AC + 	mwy Y1 :bp2
 10463 5930 A0 00			ldy #$00
 10464 5932 B1 84			lda (:bp2),y
 10465 5934 38 E9 18			sub #$18
 10466 5937 91 84			sta (:bp2),y
 10467 5939 C8				iny
 10468 593A B1 84			lda (:bp2),y
 10469 593C E9 00			sbc #$00
 10470 593E 91 84			sta (:bp2),y
 10471
 10472 				; optimize OK (service.pas), line = 1828
 10473
 10474 5940 AC C4 A1 84 84 AC + 	mwy X2 :bp2
 10475 594A A0 00			ldy #$00
 10476 594C B1 84			lda (:bp2),y
 10477 594E 38 E9 10			sub #$10
 10478 5951 91 84			sta (:bp2),y
 10479 5953 C8				iny
 10480 5954 B1 84			lda (:bp2),y
 10481 5956 E9 00			sbc #$00
 10482 5958 91 84			sta (:bp2),y
 10483
 10484 				; optimize OK (service.pas), line = 1829
 10485
 10486 595A AC C6 A1 84 84 AC + 	mwy Y2 :bp2
 10487 5964 A0 00			ldy #$00
 10488 5966 B1 84			lda (:bp2),y
 10489 5968 38 E9 18			sub #$18
 10490 596B 91 84			sta (:bp2),y
 10491 596D C8				iny
 10492 596E B1 84			lda (:bp2),y
 10493 5970 E9 00			sbc #$00
 10494 5972 91 84			sta (:bp2),y
 10495
 10496 				; optimize OK (service.pas), line = 1832
 10497
 10498 5974 AC C0 A1 84 84 AC + 	mwy X1 :bp2
 10499 597E A0 00			ldy #$00
 10500 5980 B1 84			lda (:bp2),y
 10501 5982 8D DA A0			sta MAX.B
 10502 5985 C8				iny
 10503 5986 B1 84			lda (:bp2),y
 10504 5988 8D DB A0			sta MAX.B+1
 10505 598B A9 00			lda #$00
 10506 598D 8D D8 A0			sta MAX.A
 10507 5990 8D D9 A0			sta MAX.A+1
 10508 5993 20 11 2D			jsr MAX
 10509 5996 A9 CF			lda #$CF
 10510 5998 8D DE A0			sta MIN.A
 10511 599B A9 00			lda #$00
 10512 599D 8D DF A0			sta MIN.A+1
 10513 59A0 AD DC A0			lda MAX.RESULT
 10514 59A3 8D E0 A0			sta MIN.B
 10515 59A6 AD DD A0			lda MAX.RESULT+1
 10516 59A9 8D E1 A0			sta MIN.B+1
 10517 59AC 20 3C 2D			jsr MIN
 10518 59AF AC C0 A1 84 84 AC + 	mwy X1 :bp2
 10519 59B9 A0 00			ldy #$00
 10520 59BB AD E2 A0			lda MIN.RESULT
 10521 59BE 91 84			sta (:bp2),y
 10522 59C0 C8				iny
 10523 59C1 AD E3 A0			lda MIN.RESULT+1
 10524 59C4 91 84			sta (:bp2),y
 10525
 10526 				; optimize OK (service.pas), line = 1833
 10527
 10528 59C6 AC C4 A1 84 84 AC + 	mwy X2 :bp2
 10529 59D0 A0 00			ldy #$00
 10530 59D2 B1 84			lda (:bp2),y
 10531 59D4 8D DA A0			sta MAX.B
 10532 59D7 C8				iny
 10533 59D8 B1 84			lda (:bp2),y
 10534 59DA 8D DB A0			sta MAX.B+1
 10535 59DD A9 00			lda #$00
 10536 59DF 8D D8 A0			sta MAX.A
 10537 59E2 8D D9 A0			sta MAX.A+1
 10538 59E5 20 11 2D			jsr MAX
 10539 59E8 A9 CF			lda #$CF
 10540 59EA 8D DE A0			sta MIN.A
 10541 59ED A9 00			lda #$00
 10542 59EF 8D DF A0			sta MIN.A+1
 10543 59F2 AD DC A0			lda MAX.RESULT
 10544 59F5 8D E0 A0			sta MIN.B
 10545 59F8 AD DD A0			lda MAX.RESULT+1
 10546 59FB 8D E1 A0			sta MIN.B+1
 10547 59FE 20 3C 2D			jsr MIN
 10548 5A01 AC C4 A1 84 84 AC + 	mwy X2 :bp2
 10549 5A0B A0 00			ldy #$00
 10550 5A0D AD E2 A0			lda MIN.RESULT
 10551 5A10 91 84			sta (:bp2),y
 10552 5A12 C8				iny
 10553 5A13 AD E3 A0			lda MIN.RESULT+1
 10554 5A16 91 84			sta (:bp2),y
 10555
 10556 				; optimize OK (service.pas), line = 1840
 10557
 10558 5A18 AD E9 A1			lda COLLISION
 10559 5A1B 8D C8 A1			sta RESULT
 10560 5A1E			@exit
 10561
 10562 				; ------------------------------------------------------------
 10563
 10564 = A1C0			X1	= DATAORIGIN+$0624
 10565 = A1C2			Y1	= DATAORIGIN+$0626
 10566 = A1C4			X2	= DATAORIGIN+$0628
 10567 = A1C6			Y2	= DATAORIGIN+$062A
 10568 = A1C8			RESULT	= DATAORIGIN+$062C
 10569 = A1C9			X	= DATAORIGIN+$062D
 10570 = A1CB			Y	= DATAORIGIN+$062F
 10571 = A1CD			XK	= DATAORIGIN+$0631
 10572 = A1CF			YK	= DATAORIGIN+$0633
 10573 = A1D1			XJ	= DATAORIGIN+$0635
 10574 = A1D3			YJ	= DATAORIGIN+$0637
 10575 = A1D5			XH	= DATAORIGIN+$0639
 10576 = A1D7			YH	= DATAORIGIN+$063B
 10577 = A1D9			XN	= DATAORIGIN+$063D
 10578 = A1DB			YN	= DATAORIGIN+$063F
 10579 = A1DD			XP1	= DATAORIGIN+$0641
 10580 = A1DF			YP1	= DATAORIGIN+$0643
 10581 = A1E1			XP2	= DATAORIGIN+$0645
 10582 = A1E3			YP2	= DATAORIGIN+$0647
 10583 = A1E5			XP	= DATAORIGIN+$0649
 10584 = A1E7			YP	= DATAORIGIN+$064B
 10585 = A1E9			COLLISION	= DATAORIGIN+$064D
 10586
 10587 = A1C0			@VarData	= X1
 10588 = 0029			@VarDataSize	= 41
 10589
 10590 5A1E 60				rts						; ret
 10591 				.endl
 10592
 10593 5A1F			.local	SHOOT_BLOCK					; PROCEDURE
 10594
 10595 				; optimize OK (service.pas), line = 1851
 10596
 10597 5A1F AD EB A1			lda XB+1
 10598 5A22 10 03 4C 30 5C		jmi l_19EF
 10599 5A27 AD EA A1			lda XB
 10600 5A2A C9 0D			cmp #$0D
 10601 5A2C AD EB A1			lda XB+1
 10602 5A2F E9 00			sbc #$00
 10603 5A31 50 02			svc
 10604 5A33 49 80			eor #$80
 10605 5A35 30 03 4C 30 5C		jpl l_19EF
 10606 5A3A AD ED A1			lda YB+1
 10607 5A3D 10 03 4C 30 5C		jmi l_19EF
 10608 5A42 AD EC A1			lda YB
 10609 5A45 C9 0F			cmp #$0F
 10610 5A47 AD ED A1			lda YB+1
 10611 5A4A E9 00			sbc #$00
 10612 5A4C 50 02			svc
 10613 5A4E 49 80			eor #$80
 10614 5A50 30 03 4C 30 5C		jpl l_19EF
 10615
 10616 				; optimize OK (service.pas), line = 1854
 10617
 10618 5A55 AD EC A1			lda YB
 10619 5A58 0A				asl @
 10620 5A59 0A				asl @
 10621 5A5A 0A				asl @
 10622 5A5B 0A				asl @
 10623 5A5C 18 6D EA A1			add XB
 10624 5A60 8D F2 A1			sta I
 10625
 10626 				; optimize OK (service.pas), line = 1856
 10627
 10628 5A63 A8				tay
 10629 5A64 B9 00 DB			lda adr.WALL,y
 10630 5A67 D0 03 4C 30 5C		jeq l_1A13
 10631
 10632 				; optimize OK (service.pas), line = 1858
 10633
 10634 5A6C C9 0A			cmp #$0A
 10635 5A6E 90 03 4C A6 5B		jcs l_1A29
 10636
 10637 				; optimize OK (service.pas), line = 1860
 10638
 10639 5A73 AD EA A1			lda XB
 10640 5A76 8D 9E A1			sta REMOVE_BLOCK.XA
 10641 5A79 AD EC A1			lda YB
 10642 5A7C 8D 9F A1			sta REMOVE_BLOCK.YA
 10643 5A7F 20 EB 46			jsr REMOVE_BLOCK
 10644
 10645 				; optimize FAIL (0, service.pas), line = 1861
 10646
 10647 5A82 CE 5A 9D			dec REMAIN_BLK
 10648
 10649 				; optimize OK (service.pas), line = 1865
 10650
 10651 5A85 AD 77 9D			lda CUR_PLAYER
 10652 5A88 0A				asl @
 10653 5A89 0A				asl @
 10654 5A8A 85 9F			sta :STACKORIGIN+9
 10655 5A8C AC F2 A1			ldy I
 10656 5A8F B9 00 DB			lda adr.WALL,y
 10657 5A92 0A				asl @
 10658 5A93 A8				tay
 10659 5A94 B9 69 10			lda adr.SCORE_WALL,y
 10660 5A97 85 A0			sta :STACKORIGIN+10
 10661 5A99 B9 6A 10			lda adr.SCORE_WALL+1,y
 10662 5A9C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10663 5A9E A4 9F			ldy :STACKORIGIN+9
 10664 5AA0 B9 5C 9D			lda adr.SCORE.PLAYER,y
 10665 5AA3 18 65 A0			add :STACKORIGIN+10
 10666 5AA6 99 5C 9D			sta adr.SCORE.PLAYER,y
 10667 5AA9 B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 10668 5AAC 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10669 5AAE 99 5D 9D			sta adr.SCORE.PLAYER+1,y
 10670 5AB1 B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 10671 5AB4 69 00			adc #$00
 10672 5AB6 99 5E 9D			sta adr.SCORE.PLAYER+2,y
 10673 5AB9 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 10674 5ABC 69 00			adc #$00
 10675 5ABE 99 5F 9D			sta adr.SCORE.PLAYER+3,y
 10676
 10677 				; optimize OK (service.pas), line = 1867
 10678
 10679 5AC1 A9 2C			lda #$2C
 10680 5AC3 8D E2 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 10681 5AC6 A9 01			lda #$01
 10682 5AC8 8D E3 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10683 5ACB 20 52 25			jsr SYSTEM.RANDOM.@010184000
 10684 5ACE AD 87 9D			lda LETT.INCOMING
 10685 5AD1 18 6D E4 9B			add SYSTEM.RANDOM.@010184000.RESULT
 10686 5AD5 8D 87 9D			sta LETT.INCOMING
 10687 5AD8 AD 88 9D			lda LETT.INCOMING+1
 10688 5ADB 6D E5 9B			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10689 5ADE 8D 88 9D			sta LETT.INCOMING+1
 10690
 10691 				; optimize OK (service.pas), line = 1869
 10692
 10693 5AE1 AD EA A1			lda XB
 10694 5AE4 85 9F			sta :STACKORIGIN+9
 10695 5AE6 A0 00			ldy #$00
 10696 5AE8 AD EB A1			lda XB+1
 10697 5AEB 10 01			spl
 10698 5AED 88				dey
 10699 5AEE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10700 5AF0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10701 5AF2 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10702 5AF4 06 9F			asl :STACKORIGIN+9
 10703 5AF6 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10704 5AF8 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10705 5AFA 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10706 5AFC 06 9F			asl :STACKORIGIN+9
 10707 5AFE 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10708 5B00 06 9F			asl :STACKORIGIN+9
 10709 5B02 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10710 5B04 06 9F			asl :STACKORIGIN+9
 10711 5B06 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10712 5B08 A5 9F			lda :STACKORIGIN+9
 10713 5B0A 18 69 09			add #$09
 10714 5B0D 8D 89 9D			sta LETT.NEXTX
 10715 5B10 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10716 5B12 69 00			adc #$00
 10717 5B14 8D 8A 9D			sta LETT.NEXTX+1
 10718
 10719 				; optimize OK (service.pas), line = 1870
 10720
 10721 5B17 AD EC A1			lda YB
 10722 5B1A 85 9F			sta :STACKORIGIN+9
 10723 5B1C A0 00			ldy #$00
 10724 5B1E AD ED A1			lda YB+1
 10725 5B21 10 01			spl
 10726 5B23 88				dey
 10727 5B24 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10728 5B26 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10729 5B28 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10730 5B2A A5 9F			lda :STACKORIGIN+9
 10731 5B2C 18 69 01			add #$01
 10732 5B2F 85 9F			sta :STACKORIGIN+9
 10733 5B31 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10734 5B33 69 00			adc #$00
 10735 5B35 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10736 5B37 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10737 5B39 69 00			adc #$00
 10738 5B3B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10739 5B3D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10740 5B3F 69 00			adc #$00
 10741 5B41 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10742 5B43 06 9F			asl :STACKORIGIN+9
 10743 5B45 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10744 5B47 06 9F			asl :STACKORIGIN+9
 10745 5B49 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10746 5B4B 06 9F			asl :STACKORIGIN+9
 10747 5B4D 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10748 5B4F A5 9F			lda :STACKORIGIN+9
 10749 5B51 18 69 16			add #$16
 10750 5B54 8D 8B 9D			sta LETT.NEXTY
 10751 5B57 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10752 5B59 69 00			adc #$00
 10753 5B5B 8D 8C 9D			sta LETT.NEXTY+1
 10754
 10755 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1871
 10756
 10757 5B5E 20 1C 30			jsr RANDOM_LETTER_DROP
 10758 5B61 AD 0F A1			lda RANDOM_LETTER_DROP.RESULT
 10759 5B64 8D 8D 9D			sta LETT.NEXTTYPE
 10760 5B67 AD 10 A1			lda RANDOM_LETTER_DROP.RESULT+1
 10761 5B6A 8D 8E 9D			sta LETT.NEXTTYPE+1
 10762
 10763 				; optimize OK (service.pas), line = 1873
 10764
 10765 5B6D AC F2 A1			ldy I
 10766 5B70 A9 00			lda #$00
 10767 5B72 99 00 DB			sta adr.WALL,y
 10768
 10769 				; optimize OK (service.pas), line = 1874
 10770
 10771 5B75 A9 B8			lda #$B8
 10772 5B77 8D 89 9C			sta BALL_BLOCK_SOUND.A
 10773 5B7A A9 01			lda #$01
 10774 5B7C 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 10775 5B7F A9 03			lda #$03
 10776 5B81 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 10777 5B84 A9 00			lda #$00
 10778 5B86 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 10779 5B89 20 6B 2A			jsr BALL_BLOCK_SOUND
 10780
 10781 				; optimize OK (service.pas), line = 1875
 10782
 10783 5B8C AC EE A1 84 84 AC + 	mwy BALL :bp2
 10784 5B96 A0 14			ldy #BALL.SBD-DATAORIGIN
 10785 5B98 A9 00			lda #$00
 10786 5B9A 91 84			sta (:bp2),y
 10787 5B9C C8				iny
 10788 5B9D 91 84			sta (:bp2),y
 10789
 10790 				; optimize OK (service.pas), line = 1876
 10791
 10792 5B9F A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10793 5BA1 91 84			sta (:bp2),y
 10794 5BA3 4C 30 5C			jmp l_1A7D
 10795 5BA6			l_1A29
 10796
 10797 				; optimize OK (service.pas), line = 1881
 10798
 10799 5BA6 AC F2 A1			ldy I
 10800 5BA9 B9 00 DB			lda adr.WALL,y
 10801 5BAC 29 0F			and #$0F
 10802 5BAE C9 09			cmp #$09
 10803 5BB0 D0 45			jne l_1A96
 10804
 10805 				; optimize OK (service.pas), line = 1883
 10806
 10807 5BB2 AC EE A1 84 84 AC + 	mwy BALL :bp2
 10808 5BBC A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10809 5BBE A9 00			lda #$00
 10810 5BC0 91 84			sta (:bp2),y
 10811
 10812 				; optimize OK (service.pas), line = 1884
 10813
 10814 5BC2 AC F2 A1			ldy I
 10815 5BC5 B9 00 DB			lda adr.WALL,y
 10816 5BC8 38 E9 10			sub #$10
 10817 5BCB 99 00 DB			sta adr.WALL,y
 10818
 10819 				; optimize OK (service.pas), line = 1886
 10820
 10821 5BCE A9 72			lda #$72
 10822 5BD0 8D 89 9C			sta BALL_BLOCK_SOUND.A
 10823 5BD3 A9 01			lda #$01
 10824 5BD5 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 10825 5BD8 A9 04			lda #$04
 10826 5BDA 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 10827 5BDD A9 00			lda #$00
 10828 5BDF 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 10829 5BE2 20 6B 2A			jsr BALL_BLOCK_SOUND
 10830
 10831 				; optimize OK (service.pas), line = 1887
 10832
 10833 5BE5 AD EA A1			lda XB
 10834 5BE8 8D 0D A1			sta SHINE.XB
 10835 5BEB AD EC A1			lda YB
 10836 5BEE 8D 0E A1			sta SHINE.YB
 10837 5BF1 20 E0 2F			jsr SHINE
 10838 5BF4 4C 30 5C			jmp l_1AB0
 10839 5BF7			l_1A96
 10840
 10841 				; optimize OK (service.pas), line = 1891
 10842
 10843 5BF7 AC EE A1 84 84 AC + 	mwy BALL :bp2
 10844 5C01 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10845 5C03 B1 84			lda (:bp2),y
 10846 5C05 18 69 01			add #$01
 10847 5C08 91 84			sta (:bp2),y
 10848
 10849 				; optimize OK (service.pas), line = 1892
 10850
 10851 5C0A AD EA A1			lda XB
 10852 5C0D 8D 0D A1			sta SHINE.XB
 10853 5C10 AD EC A1			lda YB
 10854 5C13 8D 0E A1			sta SHINE.YB
 10855 5C16 20 E0 2F			jsr SHINE
 10856
 10857 				; optimize OK (service.pas), line = 1894
 10858
 10859 5C19 A9 C8			lda #$C8
 10860 5C1B 8D 89 9C			sta BALL_BLOCK_SOUND.A
 10861 5C1E A9 00			lda #$00
 10862 5C20 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 10863 5C23 A9 07			lda #$07
 10864 5C25 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 10865 5C28 A9 00			lda #$00
 10866 5C2A 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 10867 5C2D 20 6B 2A			jsr BALL_BLOCK_SOUND
 10868 5C30			l_1AB0
 10869 5C30			l_1A7D
 10870 5C30			l_1A13
 10871 5C30			l_19EF
 10872
 10873 				; ------------------------------------------------------------
 10874
 10875 = A1EA			XB	= DATAORIGIN+$064E
 10876 = A1EC			YB	= DATAORIGIN+$0650
 10877 = A1EE			BALL	= DATAORIGIN+$0652
 10878 = 9B9C			BALL.X	= DATAORIGIN+$0000
 10879 = 9B9E			BALL.Y	= DATAORIGIN+$0002
 10880 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
 10881 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
 10882 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
 10883 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
 10884 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
 10885 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
 10886 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
 10887 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
 10888 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
 10889 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
 10890 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
 10891 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
 10892 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
 10893 = 9BB6			BALL.STM	= DATAORIGIN+$001A
 10894 = A1F2			I	= DATAORIGIN+$0656
 10895
 10896 = A1EA			@VarData	= XB
 10897 = 0007			@VarDataSize	= 7
 10898
 10899 5C30			@exit
 10900 					.ifdef @new
 10901 					lda <@VarData
 10902 					sta :ztmp
 10903 					lda >@VarData
 10904 					ldy #@VarDataSize-1
 10905 					jmp @FreeMem
 10906 					els
 10907 5C30 60				rts						; ret
 10908 					eif
 10909 				.endl
 10910
 10911 5C31			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10912
 10913 				; optimize OK (service.pas), line = 1905
 10914
 10915 5C31 AD F4 A1			lda XB+1
 10916 5C34 10 03 4C 4B 5D		jmi l_1AF3
 10917 5C39 AD F3 A1			lda XB
 10918 5C3C C9 0D			cmp #$0D
 10919 5C3E AD F4 A1			lda XB+1
 10920 5C41 E9 00			sbc #$00
 10921 5C43 50 02			svc
 10922 5C45 49 80			eor #$80
 10923 5C47 30 03 4C 4B 5D		jpl l_1AF3
 10924 5C4C AD F6 A1			lda YB+1
 10925 5C4F 10 03 4C 4B 5D		jmi l_1AF3
 10926 5C54 AD F5 A1			lda YB
 10927 5C57 C9 0F			cmp #$0F
 10928 5C59 AD F6 A1			lda YB+1
 10929 5C5C E9 00			sbc #$00
 10930 5C5E 50 02			svc
 10931 5C60 49 80			eor #$80
 10932 5C62 30 03 4C 4B 5D		jpl l_1AF3
 10933
 10934 				; optimize OK (service.pas), line = 1908
 10935
 10936 5C67 AD F5 A1			lda YB
 10937 5C6A 0A				asl @
 10938 5C6B 0A				asl @
 10939 5C6C 0A				asl @
 10940 5C6D 0A				asl @
 10941 5C6E 18 6D F3 A1			add XB
 10942 5C72 8D F7 A1			sta I
 10943
 10944 				; optimize OK (service.pas), line = 1910
 10945
 10946 5C75 A8				tay
 10947 5C76 B9 00 DB			lda adr.WALL,y
 10948 5C79 D0 03 4C 4B 5D		jeq l_1B17
 10949
 10950 				; optimize OK (service.pas), line = 1912
 10951
 10952 5C7E C9 0A			cmp #$0A
 10953 5C80 B0 65			jcs l_1B2D
 10954
 10955 				; optimize OK (service.pas), line = 1914
 10956
 10957 5C82 AD F3 A1			lda XB
 10958 5C85 8D 9E A1			sta REMOVE_BLOCK.XA
 10959 5C88 AD F5 A1			lda YB
 10960 5C8B 8D 9F A1			sta REMOVE_BLOCK.YA
 10961 5C8E 20 EB 46			jsr REMOVE_BLOCK
 10962
 10963 				; optimize FAIL (0, service.pas), line = 1915
 10964
 10965 5C91 CE 5A 9D			dec REMAIN_BLK
 10966
 10967 				; optimize OK (service.pas), line = 1916
 10968
 10969 5C94 AD 77 9D			lda CUR_PLAYER
 10970 5C97 0A				asl @
 10971 5C98 0A				asl @
 10972 5C99 85 9F			sta :STACKORIGIN+9
 10973 5C9B AC F7 A1			ldy I
 10974 5C9E B9 00 DB			lda adr.WALL,y
 10975 5CA1 0A				asl @
 10976 5CA2 A8				tay
 10977 5CA3 B9 69 10			lda adr.SCORE_WALL,y
 10978 5CA6 85 A0			sta :STACKORIGIN+10
 10979 5CA8 B9 6A 10			lda adr.SCORE_WALL+1,y
 10980 5CAB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10981 5CAD A4 9F			ldy :STACKORIGIN+9
 10982 5CAF B9 5C 9D			lda adr.SCORE.PLAYER,y
 10983 5CB2 18 65 A0			add :STACKORIGIN+10
 10984 5CB5 99 5C 9D			sta adr.SCORE.PLAYER,y
 10985 5CB8 B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 10986 5CBB 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10987 5CBD 99 5D 9D			sta adr.SCORE.PLAYER+1,y
 10988 5CC0 B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 10989 5CC3 69 00			adc #$00
 10990 5CC5 99 5E 9D			sta adr.SCORE.PLAYER+2,y
 10991 5CC8 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 10992 5CCB 69 00			adc #$00
 10993 5CCD 99 5F 9D			sta adr.SCORE.PLAYER+3,y
 10994
 10995 				; optimize OK (service.pas), line = 1917
 10996
 10997 5CD0 AC F7 A1			ldy I
 10998 5CD3 A9 00			lda #$00
 10999 5CD5 99 00 DB			sta adr.WALL,y
 11000
 11001 				; optimize OK (service.pas), line = 1918
 11002
 11003 5CD8 A9 B8			lda #$B8
 11004 5CDA 8D 89 9C			sta BALL_BLOCK_SOUND.A
 11005 5CDD A9 01			lda #$01
 11006 5CDF 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 11007 5CE2 A9 03			lda #$03
 11008 5CE4 4C 40 5D			jmp l_1B55
 11009 5CE7			l_1B2D
 11010
 11011 				; optimize OK (service.pas), line = 1923
 11012
 11013 5CE7 AC F7 A1			ldy I
 11014 5CEA B9 00 DB			lda adr.WALL,y
 11015 5CED 29 0F			and #$0F
 11016 5CEF C9 09			cmp #$09
 11017 5CF1 D0 32			jne l_1B6E
 11018
 11019 				; optimize OK (service.pas), line = 1925
 11020
 11021 5CF3 B9 00 DB			lda adr.WALL,y
 11022 5CF6 38 E9 10			sub #$10
 11023 5CF9 99 00 DB			sta adr.WALL,y
 11024
 11025 				; optimize OK (service.pas), line = 1926
 11026
 11027 5CFC A9 72			lda #$72
 11028 5CFE 8D 89 9C			sta BALL_BLOCK_SOUND.A
 11029 5D01 A9 01			lda #$01
 11030 5D03 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 11031 5D06 A9 04			lda #$04
 11032 5D08 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 11033 5D0B A9 00			lda #$00
 11034 5D0D 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 11035 5D10 20 6B 2A			jsr BALL_BLOCK_SOUND
 11036
 11037 				; optimize OK (service.pas), line = 1927
 11038
 11039 5D13 AD F3 A1			lda XB
 11040 5D16 8D 0D A1			sta SHINE.XB
 11041 5D19 AD F5 A1			lda YB
 11042 5D1C 8D 0E A1			sta SHINE.YB
 11043 5D1F 20 E0 2F			jsr SHINE
 11044 5D22 4C 4B 5D			jmp l_1B84
 11045 5D25			l_1B6E
 11046
 11047 				; optimize OK (service.pas), line = 1931
 11048
 11049 5D25 AD F3 A1			lda XB
 11050 5D28 8D 0D A1			sta SHINE.XB
 11051 5D2B AD F5 A1			lda YB
 11052 5D2E 8D 0E A1			sta SHINE.YB
 11053 5D31 20 E0 2F			jsr SHINE
 11054
 11055 				; optimize OK (service.pas), line = 1932
 11056
 11057 5D34 A9 C8			lda #$C8
 11058 5D36 8D 89 9C			sta BALL_BLOCK_SOUND.A
 11059 5D39 A9 00			lda #$00
 11060 5D3B 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 11061 5D3E A9 07			lda #$07
 11062 5D40			l_1B55
 11063 5D40 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 11064 5D43 A9 00			lda #$00
 11065 5D45 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 11066 5D48 20 6B 2A			jsr BALL_BLOCK_SOUND
 11067 5D4B			l_1B84
 11068 5D4B			l_1B17
 11069 5D4B			l_1AF3
 11070
 11071 				; ------------------------------------------------------------
 11072
 11073 = A1F3			XB	= DATAORIGIN+$0657
 11074 = A1F5			YB	= DATAORIGIN+$0659
 11075 = A1F7			I	= DATAORIGIN+$065B
 11076
 11077 = A1F3			@VarData	= XB
 11078 = 0005			@VarDataSize	= 5
 11079
 11080 5D4B			@exit
 11081 					.ifdef @new
 11082 					lda <@VarData
 11083 					sta :ztmp
 11084 					lda >@VarData
 11085 					ldy #@VarDataSize-1
 11086 					jmp @FreeMem
 11087 					els
 11088 5D4B 60				rts						; ret
 11089 					eif
 11090 				.endl
 11091
 11092 5D4C			.local	BALL_HIT_BLOCK					; PROCEDURE
 11093
 11094 				; optimize OK (service.pas), line = 1964
 11095
 11096 5D4C A9 FF			lda #$FF
 11097 5D4E 8D 24 A2			sta EMERGENCY
 11098
 11099 				; optimize OK (service.pas), line = 1966
 11100
 11101 5D51 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 11102 5D5B A0 00			ldy #BALL.X-DATAORIGIN
 11103 5D5D B1 84			lda (:bp2),y
 11104 5D5F 38 E9 09			sub #$09
 11105 5D62 8D 10 A2			sta NX
 11106 5D65 C8				iny
 11107 5D66 B1 84			lda (:bp2),y
 11108 5D68 E9 00			sbc #$00
 11109 5D6A 8D 11 A2			sta NX+1
 11110
 11111 				; optimize OK (service.pas), line = 1967
 11112
 11113 5D6D A0 02			ldy #BALL.Y-DATAORIGIN
 11114 5D6F B1 84			lda (:bp2),y
 11115 5D71 38 E9 16			sub #$16
 11116 5D74 8D 12 A2			sta NY
 11117 5D77 C8				iny
 11118 5D78 B1 84			lda (:bp2),y
 11119 5D7A E9 00			sbc #$00
 11120 5D7C 8D 13 A2			sta NY+1
 11121
 11122 				; optimize OK (service.pas), line = 1970
 11123
 11124 5D7F A0 08			ldy #BALL.OLDX-DATAORIGIN
 11125 5D81 B1 84			lda (:bp2),y
 11126 5D83 38 E9 09			sub #$09
 11127 5D86 8D 04 A2			sta OX
 11128 5D89 C8				iny
 11129 5D8A B1 84			lda (:bp2),y
 11130 5D8C E9 00			sbc #$00
 11131 5D8E 8D 05 A2			sta OX+1
 11132
 11133 				; optimize OK (service.pas), line = 1971
 11134
 11135 5D91 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11136 5D93 B1 84			lda (:bp2),y
 11137 5D95 38 E9 16			sub #$16
 11138 5D98 8D 06 A2			sta OY
 11139 5D9B C8				iny
 11140 5D9C B1 84			lda (:bp2),y
 11141 5D9E E9 00			sbc #$00
 11142 5DA0 8D 07 A2			sta OY+1
 11143
 11144 				; optimize OK (service.pas), line = 1973
 11145
 11146 5DA3 AD 10 A2			lda NX
 11147 5DA6 85 9F			sta :STACKORIGIN+9
 11148 5DA8 A0 00			ldy #$00
 11149 5DAA AD 11 A2			lda NX+1
 11150 5DAD 10 01			spl
 11151 5DAF 88				dey
 11152 5DB0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11153 5DB2 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11154 5DB4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11155 5DB6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11156 5DB8 66 9F			ror :STACKORIGIN+9
 11157 5DBA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11158 5DBC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11159 5DBE 66 9F			ror :STACKORIGIN+9
 11160 5DC0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11161 5DC2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11162 5DC4 66 9F			ror :STACKORIGIN+9
 11163 5DC6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11164 5DC8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11165 5DCA 66 9F			ror :STACKORIGIN+9
 11166 5DCC A5 9F			lda :STACKORIGIN+9
 11167 5DCE 8D 00 A2			sta XB
 11168 5DD1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11169 5DD3 8D 01 A2			sta XB+1
 11170
 11171 				; optimize OK (service.pas), line = 1974
 11172
 11173 5DD6 AD 12 A2			lda NY
 11174 5DD9 85 9F			sta :STACKORIGIN+9
 11175 5DDB A0 00			ldy #$00
 11176 5DDD AD 13 A2			lda NY+1
 11177 5DE0 10 01			spl
 11178 5DE2 88				dey
 11179 5DE3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11180 5DE5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11181 5DE7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11182 5DE9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11183 5DEB 66 9F			ror :STACKORIGIN+9
 11184 5DED 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11185 5DEF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11186 5DF1 66 9F			ror :STACKORIGIN+9
 11187 5DF3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11188 5DF5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11189 5DF7 66 9F			ror :STACKORIGIN+9
 11190 5DF9 A5 9F			lda :STACKORIGIN+9
 11191 5DFB 8D 02 A2			sta YB
 11192 5DFE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11193 5E00 8D 03 A2			sta YB+1
 11194
 11195 				; optimize OK (service.pas), line = 1978
 11196
 11197 5E03 AD 02 A2			lda YB
 11198 5E06 0A				asl @
 11199 5E07 0A				asl @
 11200 5E08 0A				asl @
 11201 5E09 0A				asl @
 11202 5E0A 18 6D 00 A2			add XB
 11203 5E0E A8				tay
 11204 5E0F B9 00 DB			lda adr.WALL,y
 11205 5E12 D0 03 4C 11 6F		jeq l_1BEB
 11206
 11207 				; optimize OK (service.pas), line = 1980
 11208
 11209 5E17 A9 04			lda <OX
 11210 5E19 8D C0 A1			sta SPLIT_LINE.X1
 11211 5E1C A9 A2			lda >OX
 11212 5E1E 8D C1 A1			sta SPLIT_LINE.X1+1
 11213 5E21 A9 06			lda <OY
 11214 5E23 8D C2 A1			sta SPLIT_LINE.Y1
 11215 5E26 A9 A2			lda >OY
 11216 5E28 8D C3 A1			sta SPLIT_LINE.Y1+1
 11217 5E2B A9 10			lda <NX
 11218 5E2D 8D C4 A1			sta SPLIT_LINE.X2
 11219 5E30 A9 A2			lda >NX
 11220 5E32 8D C5 A1			sta SPLIT_LINE.X2+1
 11221 5E35 A9 12			lda <NY
 11222 5E37 8D C6 A1			sta SPLIT_LINE.Y2
 11223 5E3A A9 A2			lda >NY
 11224 5E3C 8D C7 A1			sta SPLIT_LINE.Y2+1
 11225 5E3F 20 57 52			jsr SPLIT_LINE
 11226 5E42 AD C8 A1			lda SPLIT_LINE.RESULT
 11227 5E45 8D 25 A2			sta COLLISION
 11228
 11229 				; optimize OK (service.pas), line = 1986
 11230
 11231 5E48 C9 03			cmp #$03
 11232 5E4A F0 03 4C A0 62		jne l_1C06
 11233
 11234 				; optimize OK (service.pas), line = 1988
 11235
 11236 5E4F AC F8 A1 84 84 AC + 	mwy BALL :bp2
 11237 5E59 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11238 5E5B B1 84			lda (:bp2),y
 11239 5E5D 38 ED 04 A2			sub OX
 11240 5E61 85 9F			sta :STACKORIGIN+9
 11241 5E63 C8				iny
 11242 5E64 B1 84			lda (:bp2),y
 11243 5E66 ED 05 A2			sbc OX+1
 11244 5E69 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11245 5E6B A5 9F			lda :STACKORIGIN+9
 11246 5E6D 38 E9 09			sub #$09
 11247 5E70 8D 08 A2			sta LX
 11248 5E73 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11249 5E75 E9 00			sbc #$00
 11250 5E77 8D 09 A2			sta LX+1
 11251
 11252 				; optimize OK (service.pas), line = 1989
 11253
 11254 5E7A A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11255 5E7C B1 84			lda (:bp2),y
 11256 5E7E 38 ED 06 A2			sub OY
 11257 5E82 85 9F			sta :STACKORIGIN+9
 11258 5E84 C8				iny
 11259 5E85 B1 84			lda (:bp2),y
 11260 5E87 ED 07 A2			sbc OY+1
 11261 5E8A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11262 5E8C A5 9F			lda :STACKORIGIN+9
 11263 5E8E 38 E9 16			sub #$16
 11264 5E91 8D 0A A2			sta LY
 11265 5E94 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11266 5E96 E9 00			sbc #$00
 11267 5E98 8D 0B A2			sta LY+1
 11268
 11269 				; optimize OK (service.pas), line = 1991
 11270
 11271 5E9B A0 08			ldy #BALL.OLDX-DATAORIGIN
 11272 5E9D B1 84			lda (:bp2),y
 11273 5E9F 38 ED 10 A2			sub NX
 11274 5EA3 85 9F			sta :STACKORIGIN+9
 11275 5EA5 C8				iny
 11276 5EA6 B1 84			lda (:bp2),y
 11277 5EA8 ED 11 A2			sbc NX+1
 11278 5EAB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11279 5EAD A5 9F			lda :STACKORIGIN+9
 11280 5EAF 38 E9 09			sub #$09
 11281 5EB2 8D 0C A2			sta MX
 11282 5EB5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11283 5EB7 E9 00			sbc #$00
 11284 5EB9 8D 0D A2			sta MX+1
 11285
 11286 				; optimize OK (service.pas), line = 1992
 11287
 11288 5EBC A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11289 5EBE B1 84			lda (:bp2),y
 11290 5EC0 38 ED 12 A2			sub NY
 11291 5EC4 85 9F			sta :STACKORIGIN+9
 11292 5EC6 C8				iny
 11293 5EC7 B1 84			lda (:bp2),y
 11294 5EC9 ED 13 A2			sbc NY+1
 11295 5ECC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11296 5ECE A5 9F			lda :STACKORIGIN+9
 11297 5ED0 38 E9 16			sub #$16
 11298 5ED3 8D 0E A2			sta MY
 11299 5ED6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11300 5ED8 E9 00			sbc #$00
 11301 5EDA 8D 0F A2			sta MY+1
 11302
 11303 				; optimize OK (service.pas), line = 1994
 11304
 11305 5EDD AD 08 A2			lda LX
 11306 5EE0 85 8E			sta :ecx
 11307 5EE2 85 86			sta :eax
 11308 5EE4 AD 09 A2			lda LX+1
 11309 5EE7 85 8F			sta :ecx+1
 11310 5EE9 85 87			sta :eax+1
 11311 					.ifdef fmulinit
 11312 					fmulu_16
 11313 					els
 11314 5EEB 20 3A 13			imulCX
 11315 					eif
 11316 5EEE A5 86			lda :eax
 11317 5EF0 85 9F			sta :STACKORIGIN+9
 11318 5EF2 A5 87			lda :eax+1
 11319 5EF4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11320 5EF6 AD 0A A2			lda LY
 11321 5EF9 85 8E			sta :ecx
 11322 5EFB 85 86			sta :eax
 11323 5EFD AD 0B A2			lda LY+1
 11324 5F00 85 8F			sta :ecx+1
 11325 5F02 85 87			sta :eax+1
 11326 					.ifdef fmulinit
 11327 					fmulu_16
 11328 					els
 11329 5F04 20 3A 13			imulCX
 11330 					eif
 11331 5F07 A5 86			lda :eax
 11332 5F09 18 65 9F			add :STACKORIGIN+9
 11333 5F0C 8D 14 A2			sta F1
 11334 5F0F A5 87			lda :eax+1
 11335 5F11 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11336 5F13 8D 15 A2			sta F1+1
 11337
 11338 				; optimize OK (service.pas), line = 1995
 11339
 11340 5F16 AD 0C A2			lda MX
 11341 5F19 85 8E			sta :ecx
 11342 5F1B 85 86			sta :eax
 11343 5F1D AD 0D A2			lda MX+1
 11344 5F20 85 8F			sta :ecx+1
 11345 5F22 85 87			sta :eax+1
 11346 					.ifdef fmulinit
 11347 					fmulu_16
 11348 					els
 11349 5F24 20 3A 13			imulCX
 11350 					eif
 11351 5F27 A5 86			lda :eax
 11352 5F29 85 9F			sta :STACKORIGIN+9
 11353 5F2B A5 87			lda :eax+1
 11354 5F2D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11355 5F2F AD 0E A2			lda MY
 11356 5F32 85 8E			sta :ecx
 11357 5F34 85 86			sta :eax
 11358 5F36 AD 0F A2			lda MY+1
 11359 5F39 85 8F			sta :ecx+1
 11360 5F3B 85 87			sta :eax+1
 11361 					.ifdef fmulinit
 11362 					fmulu_16
 11363 					els
 11364 5F3D 20 3A 13			imulCX
 11365 					eif
 11366 5F40 A5 86			lda :eax
 11367 5F42 18 65 9F			add :STACKORIGIN+9
 11368 5F45 8D 16 A2			sta F2
 11369 5F48 A5 87			lda :eax+1
 11370 5F4A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11371 5F4C 8D 17 A2			sta F2+1
 11372
 11373 				; optimize OK (service.pas), line = 1997
 11374
 11375 5F4F AD 14 A2			lda F1
 11376 5F52 CD 16 A2			cmp F2
 11377 5F55 AD 15 A2			lda F1+1
 11378 5F58 ED 17 A2			sbc F2+1
 11379 5F5B 50 02			svc
 11380 5F5D 49 80			eor #$80
 11381 5F5F 30 03 4C 00 61		jpl l_1C79
 11382
 11383 				; optimize OK (service.pas), line = 2003
 11384
 11385 5F64 AD 04 A2			lda OX
 11386 5F67 85 A0			sta :STACKORIGIN+10
 11387 5F69 A0 00			ldy #$00
 11388 5F6B AD 05 A2			lda OX+1
 11389 5F6E 10 01			spl
 11390 5F70 88				dey
 11391 5F71 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11392 5F73 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11393 5F75 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11394 5F77 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11395 5F79 66 A0			ror :STACKORIGIN+10
 11396 5F7B 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11397 5F7D 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11398 5F7F 66 A0			ror :STACKORIGIN+10
 11399 5F81 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11400 5F83 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11401 5F85 66 A0			ror :STACKORIGIN+10
 11402 5F87 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11403 5F89 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11404 5F8B 66 A0			ror :STACKORIGIN+10
 11405 5F8D A5 A0			lda :STACKORIGIN+10
 11406 5F8F 8D D8 A0			sta MAX.A
 11407 5F92 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11408 5F94 8D D9 A0			sta MAX.A+1
 11409 5F97 A9 00			lda #$00
 11410 5F99 8D DA A0			sta MAX.B
 11411 5F9C 8D DB A0			sta MAX.B+1
 11412 5F9F 20 11 2D			jsr MAX
 11413 5FA2 A9 0C			lda #$0C
 11414 5FA4 8D DE A0			sta MIN.A
 11415 5FA7 A9 00			lda #$00
 11416 5FA9 8D DF A0			sta MIN.A+1
 11417 5FAC AD DC A0			lda MAX.RESULT
 11418 5FAF 8D E0 A0			sta MIN.B
 11419 5FB2 AD DD A0			lda MAX.RESULT+1
 11420 5FB5 8D E1 A0			sta MIN.B+1
 11421 5FB8 20 3C 2D			jsr MIN
 11422 5FBB AD E2 A0			lda MIN.RESULT
 11423 5FBE 8D 00 A2			sta XB
 11424 5FC1 AD E3 A0			lda MIN.RESULT+1
 11425 5FC4 8D 01 A2			sta XB+1
 11426
 11427 				; optimize OK (service.pas), line = 2004
 11428
 11429 5FC7 AD 06 A2			lda OY
 11430 5FCA 85 9F			sta :STACKORIGIN+9
 11431 5FCC A0 00			ldy #$00
 11432 5FCE AD 07 A2			lda OY+1
 11433 5FD1 10 01			spl
 11434 5FD3 88				dey
 11435 5FD4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11436 5FD6 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11437 5FD8 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11438 5FDA A5 9F			lda :STACKORIGIN+9
 11439 5FDC 18 69 18			add #$18
 11440 5FDF 85 9F			sta :STACKORIGIN+9
 11441 5FE1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11442 5FE3 69 00			adc #$00
 11443 5FE5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11444 5FE7 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11445 5FE9 69 00			adc #$00
 11446 5FEB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11447 5FED A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11448 5FEF 69 00			adc #$00
 11449 5FF1 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11450 5FF3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11451 5FF5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11452 5FF7 66 9F			ror :STACKORIGIN+9
 11453 5FF9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11454 5FFB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11455 5FFD 66 9F			ror :STACKORIGIN+9
 11456 5FFF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11457 6001 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11458 6003 66 9F			ror :STACKORIGIN+9
 11459 6005 A5 9F			lda :STACKORIGIN+9
 11460 6007 38 E9 03			sub #$03
 11461 600A 8D 02 A2			sta YB
 11462 600D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11463 600F E9 00			sbc #$00
 11464 6011 8D 03 A2			sta YB+1
 11465
 11466 				; optimize OK (service.pas), line = 2007
 11467
 11468 6014 AD 02 A2			lda YB
 11469 6017 0A				asl @
 11470 6018 0A				asl @
 11471 6019 0A				asl @
 11472 601A 0A				asl @
 11473 601B 18 6D 00 A2			add XB
 11474 601F A8				tay
 11475 6020 B9 00 DB			lda adr.WALL,y
 11476 6023 F0 03 4C E5 60		jne l_1CB5
 11477
 11478 				; optimize OK (service.pas), line = 2009
 11479
 11480 6028 AD 10 A2			lda NX
 11481 602B 85 9F			sta :STACKORIGIN+9
 11482 602D A0 00			ldy #$00
 11483 602F AD 11 A2			lda NX+1
 11484 6032 10 01			spl
 11485 6034 88				dey
 11486 6035 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11487 6037 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11488 6039 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11489 603B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11490 603D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11491 603F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11492 6041 66 9F			ror :STACKORIGIN+9
 11493 6043 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11494 6045 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11495 6047 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11496 6049 66 9F			ror :STACKORIGIN+9
 11497 604B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11498 604D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11499 604F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11500 6051 66 9F			ror :STACKORIGIN+9
 11501 6053 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11502 6055 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11503 6057 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11504 6059 66 9F			ror :STACKORIGIN+9
 11505 605B A9 00			lda #$00
 11506 605D 8D D8 A0			sta MAX.A
 11507 6060 8D D9 A0			sta MAX.A+1
 11508 6063 A5 9F			lda :STACKORIGIN+9
 11509 6065 8D DA A0			sta MAX.B
 11510 6068 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11511 606A 8D DB A0			sta MAX.B+1
 11512 606D 20 11 2D			jsr MAX
 11513 6070 A9 0C			lda #$0C
 11514 6072 8D DE A0			sta MIN.A
 11515 6075 A9 00			lda #$00
 11516 6077 8D DF A0			sta MIN.A+1
 11517 607A AD DC A0			lda MAX.RESULT
 11518 607D 8D E0 A0			sta MIN.B
 11519 6080 AD DD A0			lda MAX.RESULT+1
 11520 6083 8D E1 A0			sta MIN.B+1
 11521 6086 20 3C 2D			jsr MIN
 11522 6089 AD E2 A0			lda MIN.RESULT
 11523 608C 8D 00 A2			sta XB
 11524 608F AD E3 A0			lda MIN.RESULT+1
 11525 6092 8D 01 A2			sta XB+1
 11526
 11527 				; optimize OK (service.pas), line = 2010
 11528
 11529 6095 AD 12 A2			lda NY
 11530 6098 85 9F			sta :STACKORIGIN+9
 11531 609A A0 00			ldy #$00
 11532 609C AD 13 A2			lda NY+1
 11533 609F 10 01			spl
 11534 60A1 88				dey
 11535 60A2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11536 60A4 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11537 60A6 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11538 60A8 A5 9F			lda :STACKORIGIN+9
 11539 60AA 18 69 18			add #$18
 11540 60AD 85 9F			sta :STACKORIGIN+9
 11541 60AF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11542 60B1 69 00			adc #$00
 11543 60B3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11544 60B5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11545 60B7 69 00			adc #$00
 11546 60B9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11547 60BB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11548 60BD 69 00			adc #$00
 11549 60BF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11550 60C1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11551 60C3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11552 60C5 66 9F			ror :STACKORIGIN+9
 11553 60C7 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11554 60C9 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11555 60CB 66 9F			ror :STACKORIGIN+9
 11556 60CD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11557 60CF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11558 60D1 66 9F			ror :STACKORIGIN+9
 11559 60D3 A5 9F			lda :STACKORIGIN+9
 11560 60D5 38 E9 03			sub #$03
 11561 60D8 8D 02 A2			sta YB
 11562 60DB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11563 60DD E9 00			sbc #$00
 11564 60DF 8D 03 A2			sta YB+1
 11565 60E2 4C FD 60			jmp l_1CDD
 11566 60E5			l_1CB5
 11567
 11568 				; optimize OK (service.pas), line = 2014
 11569
 11570 60E5 AD 04 A2			lda OX
 11571 60E8 8D 10 A2			sta NX
 11572 60EB AD 05 A2			lda OX+1
 11573 60EE 8D 11 A2			sta NX+1
 11574
 11575 				; optimize OK (service.pas), line = 2015
 11576
 11577 60F1 AD 06 A2			lda OY
 11578 60F4 8D 12 A2			sta NY
 11579 60F7 AD 07 A2			lda OY+1
 11580 60FA 8D 13 A2			sta NY+1
 11581 60FD			l_1CDD
 11582 60FD 4C A0 62			jmp l_1CF0
 11583 6100			l_1C79
 11584
 11585 				; optimize OK (service.pas), line = 2025
 11586
 11587 6100 AD 10 A2			lda NX
 11588 6103 85 9F			sta :STACKORIGIN+9
 11589 6105 A0 00			ldy #$00
 11590 6107 AD 11 A2			lda NX+1
 11591 610A 10 01			spl
 11592 610C 88				dey
 11593 610D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11594 610F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11595 6111 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11596 6113 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11597 6115 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11598 6117 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11599 6119 66 9F			ror :STACKORIGIN+9
 11600 611B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11601 611D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11602 611F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11603 6121 66 9F			ror :STACKORIGIN+9
 11604 6123 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11605 6125 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11606 6127 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11607 6129 66 9F			ror :STACKORIGIN+9
 11608 612B 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11609 612D 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11610 612F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11611 6131 66 9F			ror :STACKORIGIN+9
 11612 6133 A9 00			lda #$00
 11613 6135 8D D8 A0			sta MAX.A
 11614 6138 8D D9 A0			sta MAX.A+1
 11615 613B A5 9F			lda :STACKORIGIN+9
 11616 613D 8D DA A0			sta MAX.B
 11617 6140 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11618 6142 8D DB A0			sta MAX.B+1
 11619 6145 20 11 2D			jsr MAX
 11620 6148 A9 0C			lda #$0C
 11621 614A 8D DE A0			sta MIN.A
 11622 614D A9 00			lda #$00
 11623 614F 8D DF A0			sta MIN.A+1
 11624 6152 AD DC A0			lda MAX.RESULT
 11625 6155 8D E0 A0			sta MIN.B
 11626 6158 AD DD A0			lda MAX.RESULT+1
 11627 615B 8D E1 A0			sta MIN.B+1
 11628 615E 20 3C 2D			jsr MIN
 11629 6161 AD E2 A0			lda MIN.RESULT
 11630 6164 8D 00 A2			sta XB
 11631 6167 AD E3 A0			lda MIN.RESULT+1
 11632 616A 8D 01 A2			sta XB+1
 11633
 11634 				; optimize OK (service.pas), line = 2026
 11635
 11636 616D AD 12 A2			lda NY
 11637 6170 85 9F			sta :STACKORIGIN+9
 11638 6172 A0 00			ldy #$00
 11639 6174 AD 13 A2			lda NY+1
 11640 6177 10 01			spl
 11641 6179 88				dey
 11642 617A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11643 617C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11644 617E 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11645 6180 A5 9F			lda :STACKORIGIN+9
 11646 6182 18 69 18			add #$18
 11647 6185 85 9F			sta :STACKORIGIN+9
 11648 6187 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11649 6189 69 00			adc #$00
 11650 618B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11651 618D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11652 618F 69 00			adc #$00
 11653 6191 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11654 6193 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11655 6195 69 00			adc #$00
 11656 6197 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11657 6199 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11658 619B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11659 619D 66 9F			ror :STACKORIGIN+9
 11660 619F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11661 61A1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11662 61A3 66 9F			ror :STACKORIGIN+9
 11663 61A5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11664 61A7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11665 61A9 66 9F			ror :STACKORIGIN+9
 11666 61AB A5 9F			lda :STACKORIGIN+9
 11667 61AD 38 E9 03			sub #$03
 11668 61B0 8D 02 A2			sta YB
 11669 61B3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11670 61B5 E9 00			sbc #$00
 11671 61B7 8D 03 A2			sta YB+1
 11672
 11673 				; optimize OK (service.pas), line = 2028
 11674
 11675 61BA AD 02 A2			lda YB
 11676 61BD 0A				asl @
 11677 61BE 0A				asl @
 11678 61BF 0A				asl @
 11679 61C0 0A				asl @
 11680 61C1 18 6D 00 A2			add XB
 11681 61C5 A8				tay
 11682 61C6 B9 00 DB			lda adr.WALL,y
 11683 61C9 F0 03 4C A0 62		jne l_1D2B
 11684
 11685 				; optimize OK (service.pas), line = 2030
 11686
 11687 61CE AD 04 A2			lda OX
 11688 61D1 8D 10 A2			sta NX
 11689 61D4 AD 05 A2			lda OX+1
 11690 61D7 8D 11 A2			sta NX+1
 11691
 11692 				; optimize OK (service.pas), line = 2031
 11693
 11694 61DA AD 06 A2			lda OY
 11695 61DD 8D 12 A2			sta NY
 11696 61E0 AD 07 A2			lda OY+1
 11697 61E3 8D 13 A2			sta NY+1
 11698
 11699 				; optimize OK (service.pas), line = 2033
 11700
 11701 61E6 AD 10 A2			lda NX
 11702 61E9 85 9F			sta :STACKORIGIN+9
 11703 61EB A0 00			ldy #$00
 11704 61ED AD 11 A2			lda NX+1
 11705 61F0 10 01			spl
 11706 61F2 88				dey
 11707 61F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11708 61F5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11709 61F7 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11710 61F9 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11711 61FB 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11712 61FD 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11713 61FF 66 9F			ror :STACKORIGIN+9
 11714 6201 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11715 6203 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11716 6205 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11717 6207 66 9F			ror :STACKORIGIN+9
 11718 6209 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11719 620B 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11720 620D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11721 620F 66 9F			ror :STACKORIGIN+9
 11722 6211 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11723 6213 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11724 6215 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11725 6217 66 9F			ror :STACKORIGIN+9
 11726 6219 A9 00			lda #$00
 11727 621B 8D D8 A0			sta MAX.A
 11728 621E 8D D9 A0			sta MAX.A+1
 11729 6221 A5 9F			lda :STACKORIGIN+9
 11730 6223 8D DA A0			sta MAX.B
 11731 6226 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11732 6228 8D DB A0			sta MAX.B+1
 11733 622B 20 11 2D			jsr MAX
 11734 622E A9 0C			lda #$0C
 11735 6230 8D DE A0			sta MIN.A
 11736 6233 A9 00			lda #$00
 11737 6235 8D DF A0			sta MIN.A+1
 11738 6238 AD DC A0			lda MAX.RESULT
 11739 623B 8D E0 A0			sta MIN.B
 11740 623E AD DD A0			lda MAX.RESULT+1
 11741 6241 8D E1 A0			sta MIN.B+1
 11742 6244 20 3C 2D			jsr MIN
 11743 6247 AD E2 A0			lda MIN.RESULT
 11744 624A 8D 00 A2			sta XB
 11745 624D AD E3 A0			lda MIN.RESULT+1
 11746 6250 8D 01 A2			sta XB+1
 11747
 11748 				; optimize OK (service.pas), line = 2034
 11749
 11750 6253 AD 12 A2			lda NY
 11751 6256 85 9F			sta :STACKORIGIN+9
 11752 6258 A0 00			ldy #$00
 11753 625A AD 13 A2			lda NY+1
 11754 625D 10 01			spl
 11755 625F 88				dey
 11756 6260 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11757 6262 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11758 6264 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11759 6266 A5 9F			lda :STACKORIGIN+9
 11760 6268 18 69 18			add #$18
 11761 626B 85 9F			sta :STACKORIGIN+9
 11762 626D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11763 626F 69 00			adc #$00
 11764 6271 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11765 6273 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11766 6275 69 00			adc #$00
 11767 6277 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11768 6279 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11769 627B 69 00			adc #$00
 11770 627D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11771 627F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11772 6281 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11773 6283 66 9F			ror :STACKORIGIN+9
 11774 6285 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11775 6287 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11776 6289 66 9F			ror :STACKORIGIN+9
 11777 628B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11778 628D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11779 628F 66 9F			ror :STACKORIGIN+9
 11780 6291 A5 9F			lda :STACKORIGIN+9
 11781 6293 38 E9 03			sub #$03
 11782 6296 8D 02 A2			sta YB
 11783 6299 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11784 629B E9 00			sbc #$00
 11785 629D 8D 03 A2			sta YB+1
 11786 62A0			l_1D2B
 11787 62A0			l_1CF0
 11788 62A0			l_1C06
 11789
 11790 				; optimize OK (service.pas), line = 2040
 11791
 11792 62A0 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 11793 62AA A0 00			ldy #BALL.X-DATAORIGIN
 11794 62AC AD 10 A2			lda NX
 11795 62AF 18 69 09			add #$09
 11796 62B2 91 84			sta (:bp2),y
 11797 62B4 C8				iny
 11798 62B5 AD 11 A2			lda NX+1
 11799 62B8 69 00			adc #$00
 11800 62BA 91 84			sta (:bp2),y
 11801
 11802 				; optimize OK (service.pas), line = 2041
 11803
 11804 62BC A0 02			ldy #BALL.Y-DATAORIGIN
 11805 62BE AD 12 A2			lda NY
 11806 62C1 18 69 16			add #$16
 11807 62C4 91 84			sta (:bp2),y
 11808 62C6 C8				iny
 11809 62C7 AD 13 A2			lda NY+1
 11810 62CA 69 00			adc #$00
 11811 62CC 91 84			sta (:bp2),y
 11812
 11813 				; optimize OK (service.pas), line = 2045
 11814
 11815 62CE AD 00 A2			lda XB
 11816 62D1 8D EA A1			sta SHOOT_BLOCK.XB
 11817 62D4 AD 01 A2			lda XB+1
 11818 62D7 8D EB A1			sta SHOOT_BLOCK.XB+1
 11819 62DA AD 02 A2			lda YB
 11820 62DD 8D EC A1			sta SHOOT_BLOCK.YB
 11821 62E0 AD 03 A2			lda YB+1
 11822 62E3 8D ED A1			sta SHOOT_BLOCK.YB+1
 11823 62E6 AD F8 A1			lda BALL
 11824 62E9 8D EE A1			sta SHOOT_BLOCK.BALL
 11825 62EC AD F9 A1			lda BALL+1
 11826 62EF 8D EF A1			sta SHOOT_BLOCK.BALL+1
 11827 62F2 20 1F 5A			jsr SHOOT_BLOCK
 11828
 11829 				; optimize OK (service.pas), line = 2047
 11830
 11831 62F5 AD 10 A2			lda NX
 11832 62F8 29 0F			and #$0F
 11833 62FA 85 9F			sta :STACKORIGIN+9
 11834 62FC A9 00			lda #$00
 11835 62FE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11836 6300 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11837 6302 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11838 6304 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11839 6306 66 9F			ror :STACKORIGIN+9
 11840 6308 A5 9F			lda :STACKORIGIN+9
 11841 630A 8D FC A1			sta X
 11842 630D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11843 630F 8D FD A1			sta X+1
 11844
 11845 				; optimize OK (service.pas), line = 2048
 11846
 11847 6312 AD 12 A2			lda NY
 11848 6315 29 07			and #$07
 11849 6317 8D FE A1			sta Y
 11850 631A A9 00			lda #$00
 11851 631C 8D FF A1			sta Y+1
 11852
 11853 				; optimize OK (service.pas), line = 2060
 11854
 11855 631F AD FD A1			lda X+1
 11856 6322 0D FC A1			ora X
 11857 6325 F0 25			jeq l_1DB9
 11858 6327 AD FD A1			lda X+1
 11859 632A D0 05			bne @+
 11860 632C AD FC A1			lda X
 11861 632F C9 07			cmp #$07
 11862 				@
 11863 6331 F0 19			jeq l_1DB9
 11864 6333 AD FF A1			lda Y+1
 11865 6336 0D FE A1			ora Y
 11866 6339 F0 11			jeq l_1DB9
 11867 				@
 11868 633B AD FF A1			lda Y+1
 11869 633E D0 05			bne @+
 11870 6340 AD FE A1			lda Y
 11871 6343 C9 07			cmp #$07
 11872 				@
 11873 6345 F0 05			jeq l_1DB9
 11874
 11875 				; optimize OK (service.pas), line = 2061
 11876
 11877 6347 A9 03			lda #$03
 11878 6349 20 67 2D			jsr FATAL_ERROR
 11879 634C			l_1DB9
 11880
 11881 				; optimize OK (service.pas), line = 2076
 11882
 11883 634C AD FE A1			lda Y
 11884 634F CD FC A1			cmp X
 11885 6352 AD FF A1			lda Y+1
 11886 6355 ED FD A1			sbc X+1
 11887 6358 50 02			svc
 11888 635A 49 80			eor #$80
 11889 635C 30 03 4C F5 63		jpl l_1DE0
 11890 6361 AD FE A1			lda Y
 11891 6364 85 A2			sta :STACKORIGIN+12
 11892 6366 A0 00			ldy #$00
 11893 6368 AD FF A1			lda Y+1
 11894 636B 10 01			spl
 11895 636D 88				dey
 11896 636E 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 11897 6370 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 11898 6372 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 11899 6374 A9 07			lda #$07
 11900 6376 38 E5 A2			sub :STACKORIGIN+12
 11901 6379 85 A1			sta :STACKORIGIN+11
 11902 637B A9 00			lda #$00
 11903 637D E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 11904 637F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 11905 6381 A9 00			lda #$00
 11906 6383 E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 11907 6385 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 11908 6387 A9 00			lda #$00
 11909 6389 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 11910 638B 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 11911 638D AD FC A1			lda X
 11912 6390 85 A0			sta :STACKORIGIN+10
 11913 6392 A0 00			ldy #$00
 11914 6394 AD FD A1			lda X+1
 11915 6397 10 01			spl
 11916 6399 88				dey
 11917 639A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11918 639C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11919 639E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 11920 63A0				.LOCAL
 11921 63A0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 11922 63A2 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 11923 63A5 D0 1C			bne L4
 11924 63A7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 11925 63A9 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 11926 63AB D0 0A			bne L1
 11927 63AD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11928 63AF C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 11929 63B1 D0 04			bne L1
 11930 63B3 A5 A0			lda :STACKORIGIN+10
 11931 63B5 C5 A1			cmp :STACKORIGIN+11
 11932 63B7 F0 10		L1	beq L5
 11933 63B9 B0 04			bcs L3
 11934 63BB A9 FF			lda #$FF
 11935 63BD D0 0A			bne L5
 11936 63BF A9 01		L3	lda #$01
 11937 63C1 D0 06			bne L5
 11938 63C3 50 04		L4	bvc L5
 11939 63C5 49 FF			eor #$FF
 11940 63C7 09 01			ora #$01
 11941 63C9			L5
 11942 					.ENDL
 11943 63C9 10 2A			jpl l_1DE0
 11944
 11945 				; optimize OK (service.pas), line = 2078
 11946
 11947 63CB AC F8 A1 84 84 AC + 	mwy BALL :bp2
 11948 63D5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11949 63D7 A9 00			lda #$00
 11950 63D9 38 F1 84			sub (:bp2),y
 11951 63DC 85 9F			sta :STACKORIGIN+9
 11952 63DE C8				iny
 11953 63DF A9 00			lda #$00
 11954 63E1 F1 84			sbc (:bp2),y
 11955 63E3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11956 63E5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11957 63E7 A5 9F			lda :STACKORIGIN+9
 11958 63E9 91 84			sta (:bp2),y
 11959 63EB C8				iny
 11960 63EC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11961 63EE 91 84			sta (:bp2),y
 11962
 11963 				; optimize OK (service.pas), line = 2079
 11964
 11965 63F0 A9 01			lda #$01
 11966 63F2 8D 24 A2			sta EMERGENCY
 11967 63F5			l_1DE0
 11968
 11969 				; optimize OK (service.pas), line = 2083
 11970
 11971 63F5 AD FE A1			lda Y
 11972 63F8 85 A0			sta :STACKORIGIN+10
 11973 63FA A0 00			ldy #$00
 11974 63FC AD FF A1			lda Y+1
 11975 63FF 10 01			spl
 11976 6401 88				dey
 11977 6402 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11978 6404 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11979 6406 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 11980 6408 A9 07			lda #$07
 11981 640A 38 E5 A0			sub :STACKORIGIN+10
 11982 640D 85 9F			sta :STACKORIGIN+9
 11983 640F A9 00			lda #$00
 11984 6411 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 11985 6413 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11986 6415 A9 00			lda #$00
 11987 6417 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 11988 6419 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11989 641B A9 00			lda #$00
 11990 641D E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 11991 641F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11992 6421 AD FC A1			lda X
 11993 6424 85 A0			sta :STACKORIGIN+10
 11994 6426 A0 00			ldy #$00
 11995 6428 AD FD A1			lda X+1
 11996 642B 10 01			spl
 11997 642D 88				dey
 11998 642E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11999 6430 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12000 6432 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12001 6434				.LOCAL
 12002 6434 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12003 6436 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12004 6439 D0 1C			bne L4
 12005 643B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12006 643D C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12007 643F D0 0A			bne L1
 12008 6441 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12009 6443 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12010 6445 D0 04			bne L1
 12011 6447 A5 9F			lda :STACKORIGIN+9
 12012 6449 C5 A0			cmp :STACKORIGIN+10
 12013 644B F0 10		L1	beq L5
 12014 644D B0 04			bcs L3
 12015 644F A9 FF			lda #$FF
 12016 6451 D0 0A			bne L5
 12017 6453 A9 01		L3	lda #$01
 12018 6455 D0 06			bne L5
 12019 6457 50 04		L4	bvc L5
 12020 6459 49 FF			eor #$FF
 12021 645B 09 01			ora #$01
 12022 645D			L5
 12023 					.ENDL
 12024 645D 10 3C			jpl l_1E11
 12025 645F AD FC A1			lda X
 12026 6462 CD FE A1			cmp Y
 12027 6465 AD FD A1			lda X+1
 12028 6468 ED FF A1			sbc Y+1
 12029 646B 50 02			svc
 12030 646D 49 80			eor #$80
 12031 646F 10 2A			jpl l_1E11
 12032
 12033 				; optimize OK (service.pas), line = 2085
 12034
 12035 6471 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 12036 647B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12037 647D A9 00			lda #$00
 12038 647F 38 F1 84			sub (:bp2),y
 12039 6482 85 9F			sta :STACKORIGIN+9
 12040 6484 C8				iny
 12041 6485 A9 00			lda #$00
 12042 6487 F1 84			sbc (:bp2),y
 12043 6489 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12044 648B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12045 648D A5 9F			lda :STACKORIGIN+9
 12046 648F 91 84			sta (:bp2),y
 12047 6491 C8				iny
 12048 6492 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12049 6494 91 84			sta (:bp2),y
 12050
 12051 				; optimize OK (service.pas), line = 2086
 12052
 12053 6496 A9 03			lda #$03
 12054 6498 8D 24 A2			sta EMERGENCY
 12055 649B			l_1E11
 12056
 12057 				; optimize OK (service.pas), line = 2090
 12058
 12059 649B AD FC A1			lda X
 12060 649E CD FE A1			cmp Y
 12061 64A1 AD FD A1			lda X+1
 12062 64A4 ED FF A1			sbc Y+1
 12063 64A7 50 02			svc
 12064 64A9 49 80			eor #$80
 12065 64AB 30 03 4C 44 65		jpl l_1E42
 12066 64B0 AD FC A1			lda X
 12067 64B3 85 A2			sta :STACKORIGIN+12
 12068 64B5 A0 00			ldy #$00
 12069 64B7 AD FD A1			lda X+1
 12070 64BA 10 01			spl
 12071 64BC 88				dey
 12072 64BD 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12073 64BF 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12074 64C1 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12075 64C3 A9 07			lda #$07
 12076 64C5 38 E5 A2			sub :STACKORIGIN+12
 12077 64C8 85 A1			sta :STACKORIGIN+11
 12078 64CA A9 00			lda #$00
 12079 64CC E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12080 64CE 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12081 64D0 A9 00			lda #$00
 12082 64D2 E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12083 64D4 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12084 64D6 A9 00			lda #$00
 12085 64D8 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12086 64DA 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12087 64DC AD FE A1			lda Y
 12088 64DF 85 A0			sta :STACKORIGIN+10
 12089 64E1 A0 00			ldy #$00
 12090 64E3 AD FF A1			lda Y+1
 12091 64E6 10 01			spl
 12092 64E8 88				dey
 12093 64E9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12094 64EB 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12095 64ED 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12096 64EF				.LOCAL
 12097 64EF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12098 64F1 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 12099 64F4 D0 1C			bne L4
 12100 64F6 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12101 64F8 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12102 64FA D0 0A			bne L1
 12103 64FC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12104 64FE C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12105 6500 D0 04			bne L1
 12106 6502 A5 A0			lda :STACKORIGIN+10
 12107 6504 C5 A1			cmp :STACKORIGIN+11
 12108 6506 F0 10		L1	beq L5
 12109 6508 B0 04			bcs L3
 12110 650A A9 FF			lda #$FF
 12111 650C D0 0A			bne L5
 12112 650E A9 01		L3	lda #$01
 12113 6510 D0 06			bne L5
 12114 6512 50 04		L4	bvc L5
 12115 6514 49 FF			eor #$FF
 12116 6516 09 01			ora #$01
 12117 6518			L5
 12118 					.ENDL
 12119 6518 10 2A			jpl l_1E42
 12120
 12121 				; optimize OK (service.pas), line = 2092
 12122
 12123 651A AC F8 A1 84 84 AC + 	mwy BALL :bp2
 12124 6524 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12125 6526 A9 00			lda #$00
 12126 6528 38 F1 84			sub (:bp2),y
 12127 652B 85 9F			sta :STACKORIGIN+9
 12128 652D C8				iny
 12129 652E A9 00			lda #$00
 12130 6530 F1 84			sbc (:bp2),y
 12131 6532 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12132 6534 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12133 6536 A5 9F			lda :STACKORIGIN+9
 12134 6538 91 84			sta (:bp2),y
 12135 653A C8				iny
 12136 653B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12137 653D 91 84			sta (:bp2),y
 12138
 12139 				; optimize OK (service.pas), line = 2093
 12140
 12141 653F A9 02			lda #$02
 12142 6541 8D 24 A2			sta EMERGENCY
 12143 6544			l_1E42
 12144
 12145 				; optimize OK (service.pas), line = 2097
 12146
 12147 6544 AD FC A1			lda X
 12148 6547 85 A0			sta :STACKORIGIN+10
 12149 6549 A0 00			ldy #$00
 12150 654B AD FD A1			lda X+1
 12151 654E 10 01			spl
 12152 6550 88				dey
 12153 6551 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12154 6553 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12155 6555 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12156 6557 A9 07			lda #$07
 12157 6559 38 E5 A0			sub :STACKORIGIN+10
 12158 655C 85 9F			sta :STACKORIGIN+9
 12159 655E A9 00			lda #$00
 12160 6560 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12161 6562 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12162 6564 A9 00			lda #$00
 12163 6566 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 12164 6568 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12165 656A A9 00			lda #$00
 12166 656C E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 12167 656E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12168 6570 AD FE A1			lda Y
 12169 6573 85 A0			sta :STACKORIGIN+10
 12170 6575 A0 00			ldy #$00
 12171 6577 AD FF A1			lda Y+1
 12172 657A 10 01			spl
 12173 657C 88				dey
 12174 657D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12175 657F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12176 6581 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12177 6583				.LOCAL
 12178 6583 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12179 6585 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12180 6588 D0 1C			bne L4
 12181 658A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12182 658C C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12183 658E D0 0A			bne L1
 12184 6590 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12185 6592 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12186 6594 D0 04			bne L1
 12187 6596 A5 9F			lda :STACKORIGIN+9
 12188 6598 C5 A0			cmp :STACKORIGIN+10
 12189 659A F0 10		L1	beq L5
 12190 659C B0 04			bcs L3
 12191 659E A9 FF			lda #$FF
 12192 65A0 D0 0A			bne L5
 12193 65A2 A9 01		L3	lda #$01
 12194 65A4 D0 06			bne L5
 12195 65A6 50 04		L4	bvc L5
 12196 65A8 49 FF			eor #$FF
 12197 65AA 09 01			ora #$01
 12198 65AC			L5
 12199 					.ENDL
 12200 65AC 10 3C			jpl l_1E73
 12201 65AE AD FE A1			lda Y
 12202 65B1 CD FC A1			cmp X
 12203 65B4 AD FF A1			lda Y+1
 12204 65B7 ED FD A1			sbc X+1
 12205 65BA 50 02			svc
 12206 65BC 49 80			eor #$80
 12207 65BE 10 2A			jpl l_1E73
 12208
 12209 				; optimize OK (service.pas), line = 2099
 12210
 12211 65C0 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 12212 65CA A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12213 65CC A9 00			lda #$00
 12214 65CE 38 F1 84			sub (:bp2),y
 12215 65D1 85 9F			sta :STACKORIGIN+9
 12216 65D3 C8				iny
 12217 65D4 A9 00			lda #$00
 12218 65D6 F1 84			sbc (:bp2),y
 12219 65D8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12220 65DA A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12221 65DC A5 9F			lda :STACKORIGIN+9
 12222 65DE 91 84			sta (:bp2),y
 12223 65E0 C8				iny
 12224 65E1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12225 65E3 91 84			sta (:bp2),y
 12226
 12227 				; optimize OK (service.pas), line = 2100
 12228
 12229 65E5 A9 04			lda #$04
 12230 65E7 8D 24 A2			sta EMERGENCY
 12231 65EA			l_1E73
 12232
 12233 				; optimize OK (service.pas), line = 2104
 12234
 12235 65EA AD FD A1			lda X+1
 12236 65ED CD FF A1			cmp Y+1
 12237 65F0 D0 06			bne @+
 12238 65F2 AD FC A1			lda X
 12239 65F5 CD FE A1			cmp Y
 12240 				@
 12241 65F8 F0 5A			jeq l_1EA4x
 12242 65FA AD FE A1			lda Y
 12243 65FD 85 A2			sta :STACKORIGIN+12
 12244 65FF A0 00			ldy #$00
 12245 6601 AD FF A1			lda Y+1
 12246 6604 10 01			spl
 12247 6606 88				dey
 12248 6607 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12249 6609 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12250 660B 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12251 660D A9 07			lda #$07
 12252 660F 38 E5 A2			sub :STACKORIGIN+12
 12253 6612 85 A1			sta :STACKORIGIN+11
 12254 6614 A9 00			lda #$00
 12255 6616 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12256 6618 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12257 661A A9 00			lda #$00
 12258 661C E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12259 661E 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12260 6620 A9 00			lda #$00
 12261 6622 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12262 6624 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12263 6626 AD FC A1			lda X
 12264 6629 85 A0			sta :STACKORIGIN+10
 12265 662B A0 00			ldy #$00
 12266 662D AD FD A1			lda X+1
 12267 6630 10 01			spl
 12268 6632 88				dey
 12269 6633 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12270 6635 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12271 6637 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12272 6639 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12273 663B C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
 12274 663D D0 10			bne @+
 12275 663F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12276 6641 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12277 6643 D0 0A			bne @+
 12278 6645 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12279 6647 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12280 6649 D0 04			bne @+
 12281 664B A5 A0			lda :STACKORIGIN+10
 12282 664D C5 A1			cmp :STACKORIGIN+11
 12283 				@
 12284 664F F0 03 4C 11 6F		jne l_1EA4
 12285 6654			l_1EA4x
 12286
 12287 				; optimize OK (service.pas), line = 2106
 12288
 12289 6654 A9 00			lda #$00
 12290 6656 8D 18 A2			sta DEFLECT
 12291 6659 8D 19 A2			sta DEFLECT+1
 12292
 12293 				; optimize OK (service.pas), line = 2107
 12294
 12295 665C 8D 26 A2			sta TOUCH
 12296
 12297 				; optimize OK (service.pas), line = 2115
 12298
 12299 665F AD FC A1			lda X
 12300 6662 C9 05			cmp #$05
 12301 6664 AD FD A1			lda X+1
 12302 6667 E9 00			sbc #$00
 12303 6669 50 02			svc
 12304 666B 49 80			eor #$80
 12305 666D 30 08			jmi l_1EBE
 12306 666F AD 26 A2			lda TOUCH
 12307 6672 09 01			ora #$01
 12308 6674 8D 26 A2			sta TOUCH
 12309 6677			l_1EBE
 12310
 12311 				; optimize OK (service.pas), line = 2116
 12312
 12313 6677 AD FE A1			lda Y
 12314 667A C9 05			cmp #$05
 12315 667C AD FF A1			lda Y+1
 12316 667F E9 00			sbc #$00
 12317 6681 50 02			svc
 12318 6683 49 80			eor #$80
 12319 6685 30 08			jmi l_1EDC
 12320 6687 AD 26 A2			lda TOUCH
 12321 668A 09 02			ora #$02
 12322 668C 8D 26 A2			sta TOUCH
 12323 668F			l_1EDC
 12324
 12325 				; optimize OK (service.pas), line = 2126
 12326
 12327 668F A9 FF			lda #$FF
 12328 6691 8D 08 A2			sta LX
 12329 6694 8D 09 A2			sta LX+1
 12330
 12331 6697			l_1EF2
 12332 				; --- ForToDoCondition
 12333 6697 AD 08 A2			lda LX
 12334 669A C9 02			cmp #$02
 12335 669C AD 09 A2			lda LX+1
 12336 669F E9 00			sbc #$00
 12337 66A1 50 02			svc
 12338 66A3 49 80			eor #$80
 12339 66A5 0A				asl @
 12340 66A6 B0 03 4C 1E 69		jcc l_1EFE
 12341
 12342 				; optimize OK (service.pas), line = 2127
 12343
 12344 66AB A9 FF			lda #$FF
 12345 66AD 8D 0A A2			sta LY
 12346 66B0 8D 0B A2			sta LY+1
 12347
 12348 66B3			l_1F07
 12349 				; --- ForToDoCondition
 12350 66B3 AD 0A A2			lda LY
 12351 66B6 C9 02			cmp #$02
 12352 66B8 AD 0B A2			lda LY+1
 12353 66BB E9 00			sbc #$00
 12354 66BD 50 02			svc
 12355 66BF 49 80			eor #$80
 12356 66C1 0A				asl @
 12357 66C2 B0 03 4C 10 69		jcc l_1F13
 12358
 12359 				; optimize FAIL (1, service.pas), line = 2129
 12360
 12361 66C7 E8				inx
 12362 66C8 A9 00 95 96			mva #$00 :STACKORIGIN,x
 12363 66CC 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12364 66CE E8				inx
 12365 66CF A9 0C 95 96			mva #$0C :STACKORIGIN,x
 12366 66D3 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 12367 66D7 AD 00 A2			lda XB
 12368 66DA 18 6D 08 A2			add LX
 12369 66DE 8D DE A0			sta MIN.A
 12370 66E1 AD 01 A2			lda XB+1
 12371 66E4 6D 09 A2			adc LX+1
 12372 66E7 8D DF A0			sta MIN.A+1
 12373 66EA B5 96			lda :STACKORIGIN,x
 12374 66EC 8D E0 A0			sta MIN.B
 12375 66EF B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12376 66F1 8D E1 A0			sta MIN.B+1
 12377 66F4 CA				dex
 12378 66F5 20 3C 2D			jsr MIN
 12379 66F8 AD E2 A0			lda MIN.RESULT
 12380 66FB 8D D8 A0			sta MAX.A
 12381 66FE AD E3 A0			lda MIN.RESULT+1
 12382 6701 8D D9 A0			sta MAX.A+1
 12383 6704 B5 96			lda :STACKORIGIN,x
 12384 6706 8D DA A0			sta MAX.B
 12385 6709 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12386 670B 8D DB A0			sta MAX.B+1
 12387 670E CA				dex
 12388 670F 20 11 2D			jsr MAX
 12389 6712 AD DC A0			lda MAX.RESULT
 12390 6715 8D 0C A2			sta MX
 12391 6718 AD DD A0			lda MAX.RESULT+1
 12392 671B 8D 0D A2			sta MX+1
 12393
 12394 				; optimize OK (service.pas), line = 2130
 12395
 12396 671E AD 02 A2			lda YB
 12397 6721 18 6D 0A A2			add LY
 12398 6725 8D 0E A2			sta MY
 12399 6728 AD 03 A2			lda YB+1
 12400 672B 6D 0B A2			adc LY+1
 12401 672E 8D 0F A2			sta MY+1
 12402
 12403 				; optimize OK (service.pas), line = 2134
 12404
 12405 6731 AD 00 A2			lda XB
 12406 6734 85 9F			sta :STACKORIGIN+9
 12407 6736 A0 00			ldy #$00
 12408 6738 AD 01 A2			lda XB+1
 12409 673B 10 01			spl
 12410 673D 88				dey
 12411 673E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12412 6740 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12413 6742 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12414 6744 AD 08 A2			lda LX
 12415 6747 85 A0			sta :STACKORIGIN+10
 12416 6749 A0 00			ldy #$00
 12417 674B AD 09 A2			lda LX+1
 12418 674E 10 01			spl
 12419 6750 88				dey
 12420 6751 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12421 6753 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12422 6755 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12423 6757 A5 9F			lda :STACKORIGIN+9
 12424 6759 18 65 A0			add :STACKORIGIN+10
 12425 675C F0 03 4C 6A 68		jne l_1F68x
 12426 6761 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12427 6763 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12428 6765 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12429 6767 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12430 6769 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 12431 676B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12432 676D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12433 676F 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 12434 6771 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12435 6773 10 03 4C 6A 68		jmi l_1F68x
 12436 6778 AD 00 A2			lda XB
 12437 677B 85 A0			sta :STACKORIGIN+10
 12438 677D A0 00			ldy #$00
 12439 677F AD 01 A2			lda XB+1
 12440 6782 10 01			spl
 12441 6784 88				dey
 12442 6785 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12443 6787 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12444 6789 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12445 678B AD 08 A2			lda LX
 12446 678E 85 A1			sta :STACKORIGIN+11
 12447 6790 A0 00			ldy #$00
 12448 6792 AD 09 A2			lda LX+1
 12449 6795 10 01			spl
 12450 6797 88				dey
 12451 6798 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12452 679A 84 C1			sty :STACKORIGIN+STACKWIDTH*2+11
 12453 679C 84 D1			sty :STACKORIGIN+STACKWIDTH*3+11
 12454 679E A5 A0			lda :STACKORIGIN+10
 12455 67A0 18 65 A1			add :STACKORIGIN+11
 12456 67A3 85 A0			sta :STACKORIGIN+10
 12457 67A5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12458 67A7 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 12459 67A9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12460 67AB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12461 67AD 65 C1			adc :STACKORIGIN+STACKWIDTH*2+11
 12462 67AF 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 12463 67B1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12464 67B3 65 D1			adc :STACKORIGIN+STACKWIDTH*3+11
 12465 67B5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 12466 67B7				.LOCAL
 12467 67B7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12468 67B9 38 E9 00			sub #$00
 12469 67BC D0 1C			bne L4
 12470 67BE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12471 67C0 C9 00			cmp #$00
 12472 67C2 D0 0A			bne L1
 12473 67C4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12474 67C6 C9 00			cmp #$00
 12475 67C8 D0 04			bne L1
 12476 67CA A5 A0			lda :STACKORIGIN+10
 12477 67CC C9 0C			cmp #$0C
 12478 67CE F0 10		L1	beq L5
 12479 67D0 B0 04			bcs L3
 12480 67D2 A9 FF			lda #$FF
 12481 67D4 D0 0A			bne L5
 12482 67D6 A9 01		L3	lda #$01
 12483 67D8 D0 06			bne L5
 12484 67DA 50 04		L4	bvc L5
 12485 67DC 49 FF			eor #$FF
 12486 67DE 09 01			ora #$01
 12487 67E0			L5
 12488 					.ENDL
 12489 67E0 F0 02			seq
 12490 67E2 10 03			bpl @+
 12491 67E4 4C EA 67			jmp *+6
 12492 67E7 4C 6A 68		@	jmp l_1F68x
 12493 67EA A9 10			lda #$10
 12494 67EC 85 8E			sta :ecx
 12495 67EE 85 92			sta :ztmp8
 12496 67F0 A9 00			lda #$00
 12497 67F2 85 8F			sta :ecx+1
 12498 67F4 85 93			sta :ztmp9
 12499 67F6 AD 0E A2			lda MY
 12500 67F9 85 86			sta :eax
 12501 67FB 85 94			sta :ztmp10
 12502 67FD AD 0F A2			lda MY+1
 12503 6800 85 87			sta :eax+1
 12504 6802 85 95			sta :ztmp11
 12505 					.ifdef fmulinit
 12506 					fmulu_16
 12507 					els
 12508 6804 20 3A 13			imulCX
 12509 					eif
 12510 6807 A5 95			lda :ztmp11
 12511 6809 10 0D			bpl @+
 12512 680B A5 88			lda :eax+2
 12513 680D 38 E5 92			sub :ztmp8
 12514 6810 85 88			sta :eax+2
 12515 6812 A5 89			lda :eax+3
 12516 6814 E5 93			sbc :ztmp9
 12517 6816 85 89			sta :eax+3
 12518 				@
 12519 6818 A5 93			lda :ztmp9
 12520 681A 10 0D			bpl @+
 12521 681C A5 88			lda :eax+2
 12522 681E 38 E5 94			sub :ztmp10
 12523 6821 85 88			sta :eax+2
 12524 6823 A5 89			lda :eax+3
 12525 6825 E5 95			sbc :ztmp11
 12526 6827 85 89			sta :eax+3
 12527 				@
 12528 6829 A5 86			lda :eax
 12529 682B 85 A1			sta :STACKORIGIN+11
 12530 682D A5 87			lda :eax+1
 12531 682F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12532 6831 A5 88			lda :eax+2
 12533 6833 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12534 6835 A5 89			lda :eax+3
 12535 6837 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12536 6839 AD 0C A2			lda MX
 12537 683C 85 A0			sta :STACKORIGIN+10
 12538 683E A0 00			ldy #$00
 12539 6840 AD 0D A2			lda MX+1
 12540 6843 10 01			spl
 12541 6845 88				dey
 12542 6846 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12543 6848 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12544 684A 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12545 684C A5 A0			lda :STACKORIGIN+10
 12546 684E 18 65 A1			add :STACKORIGIN+11
 12547 6851 85 A0			sta :STACKORIGIN+10
 12548 6853 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12549 6855 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 12550 6857 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12551 6859 A5 A0			lda :STACKORIGIN+10
 12552 685B 18 69 00			add #$00
 12553 685E A8				tay
 12554 685F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12555 6861 69 00			adc #$00
 12556 6863 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12557 6865 B9 00 DB			lda adr.WALL,y
 12558 6868 F0 4D			jeq l_1F68
 12559 				@
 12560 686A			l_1F68x
 12561
 12562 				; optimize OK (service.pas), line = 2137
 12563
 12564 686A AD 08 A2			lda LX
 12565 686D 18 69 01			add #$01
 12566 6870 85 86			sta :eax
 12567 6872 AD 09 A2			lda LX+1
 12568 6875 69 00			adc #$00
 12569 6877 85 87			sta :eax+1
 12570 6879 A9 06			lda #$06
 12571 687B 85 8E			sta :ecx
 12572 687D A9 00			lda #$00
 12573 687F 85 8F			sta :ecx+1
 12574 					.ifdef fmulinit
 12575 					fmulu_16
 12576 					els
 12577 6881 20 3A 13			imulCX
 12578 					eif
 12579 6884 AD 0A A2			lda LY
 12580 6887 18 69 01			add #$01
 12581 688A 85 A0			sta :STACKORIGIN+10
 12582 688C AD 0B A2			lda LY+1
 12583 688F 69 00			adc #$00
 12584 6891 06 A0			asl :STACKORIGIN+10
 12585 6893 2A				rol @
 12586 6894 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12587 6896 A5 86			lda :eax
 12588 6898 18 65 A0			add :STACKORIGIN+10
 12589 689B 85 9F			sta :STACKORIGIN+9
 12590 689D A5 87			lda :eax+1
 12591 689F 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12592 68A1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12593 68A3 A5 9F			lda :STACKORIGIN+9
 12594 68A5 18 69 00			add #$00
 12595 68A8 A8				tay
 12596 68A9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12597 68AB 69 00			adc #$00
 12598 68AD A9 01			lda #$01
 12599 68AF 99 27 A2			sta adr.ADJW,y
 12600 68B2 A9 00			lda #$00
 12601 68B4 4C FF 68			jmp l_1F89
 12602 68B7			l_1F68
 12603
 12604 				; optimize OK (service.pas), line = 2139
 12605
 12606 68B7 AD 08 A2			lda LX
 12607 68BA 18 69 01			add #$01
 12608 68BD 85 86			sta :eax
 12609 68BF AD 09 A2			lda LX+1
 12610 68C2 69 00			adc #$00
 12611 68C4 85 87			sta :eax+1
 12612 68C6 A9 06			lda #$06
 12613 68C8 85 8E			sta :ecx
 12614 68CA A9 00			lda #$00
 12615 68CC 85 8F			sta :ecx+1
 12616 					.ifdef fmulinit
 12617 					fmulu_16
 12618 					els
 12619 68CE 20 3A 13			imulCX
 12620 					eif
 12621 68D1 AD 0A A2			lda LY
 12622 68D4 18 69 01			add #$01
 12623 68D7 85 A0			sta :STACKORIGIN+10
 12624 68D9 AD 0B A2			lda LY+1
 12625 68DC 69 00			adc #$00
 12626 68DE 06 A0			asl :STACKORIGIN+10
 12627 68E0 2A				rol @
 12628 68E1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12629 68E3 A5 86			lda :eax
 12630 68E5 18 65 A0			add :STACKORIGIN+10
 12631 68E8 85 9F			sta :STACKORIGIN+9
 12632 68EA A5 87			lda :eax+1
 12633 68EC 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12634 68EE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12635 68F0 A5 9F			lda :STACKORIGIN+9
 12636 68F2 18 69 00			add #$00
 12637 68F5 A8				tay
 12638 68F6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12639 68F8 69 00			adc #$00
 12640 68FA A9 00			lda #$00
 12641 68FC 99 27 A2			sta adr.ADJW,y
 12642 68FF			l_1F89
 12643 68FF 99 28 A2			sta adr.ADJW+1,y
 12644
 12645 				; --- ForToDoEpilog
 12646 6902 EE 0A A2			inc LY
 12647 6905 F0 03 4C B3 66		jne l_1F07
 12648 690A EE 0B A2			inc LY+1
 12649 690D 4C B3 66			jmp l_1F07
 12650 6910			l_1F13
 12651
 12652 				; --- ForToDoEpilog
 12653 6910 EE 08 A2			inc LX
 12654 6913 F0 03 4C 97 66		jne l_1EF2
 12655 6918 EE 09 A2			inc LX+1
 12656 691B 4C 97 66			jmp l_1EF2
 12657 691E			l_1EFE
 12658
 12659 				; optimize OK (service.pas), line = 2158
 12660
 12661 691E AD 27 A2			lda adr.ADJW
 12662 6921 85 9F			sta :STACKORIGIN+9
 12663 6923 AD 28 A2			lda adr.ADJW+1
 12664 6926 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12665 6928 AD 2D A2			lda adr.ADJW+$06
 12666 692B 85 A0			sta :STACKORIGIN+10
 12667 692D AD 2E A2			lda adr.ADJW+1+$06
 12668 6930 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12669 6932 06 A0			asl :STACKORIGIN+10
 12670 6934 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12671 6936 A5 9F			lda :STACKORIGIN+9
 12672 6938 18 65 A0			add :STACKORIGIN+10
 12673 693B 85 9F			sta :STACKORIGIN+9
 12674 693D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12675 693F 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12676 6941 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12677 6943 AD 33 A2			lda adr.ADJW+$0C
 12678 6946 85 A0			sta :STACKORIGIN+10
 12679 6948 AD 34 A2			lda adr.ADJW+1+$0C
 12680 694B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12681 694D 06 A0			asl :STACKORIGIN+10
 12682 694F 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12683 6951 06 A0			asl :STACKORIGIN+10
 12684 6953 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12685 6955 A5 9F			lda :STACKORIGIN+9
 12686 6957 18 65 A0			add :STACKORIGIN+10
 12687 695A 85 9F			sta :STACKORIGIN+9
 12688 695C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12689 695E 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12690 6960 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12691 6962 AD 35 A2			lda adr.ADJW+$0E
 12692 6965 85 A0			sta :STACKORIGIN+10
 12693 6967 AD 36 A2			lda adr.ADJW+1+$0E
 12694 696A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12695 696C 06 A0			asl :STACKORIGIN+10
 12696 696E 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12697 6970 06 A0			asl :STACKORIGIN+10
 12698 6972 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12699 6974 06 A0			asl :STACKORIGIN+10
 12700 6976 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12701 6978 A5 9F			lda :STACKORIGIN+9
 12702 697A 18 65 A0			add :STACKORIGIN+10
 12703 697D 85 9F			sta :STACKORIGIN+9
 12704 697F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12705 6981 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12706 6983 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12707 6985 AD 37 A2			lda adr.ADJW+$10
 12708 6988 85 A0			sta :STACKORIGIN+10
 12709 698A AD 38 A2			lda adr.ADJW+1+$10
 12710 698D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12711 698F 06 A0			asl :STACKORIGIN+10
 12712 6991 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12713 6993 06 A0			asl :STACKORIGIN+10
 12714 6995 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12715 6997 06 A0			asl :STACKORIGIN+10
 12716 6999 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12717 699B 06 A0			asl :STACKORIGIN+10
 12718 699D 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12719 699F A5 9F			lda :STACKORIGIN+9
 12720 69A1 18 65 A0			add :STACKORIGIN+10
 12721 69A4 85 9F			sta :STACKORIGIN+9
 12722 69A6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12723 69A8 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12724 69AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12725 69AC AD 31 A2			lda adr.ADJW+$0A
 12726 69AF 85 A0			sta :STACKORIGIN+10
 12727 69B1 AD 32 A2			lda adr.ADJW+1+$0A
 12728 69B4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12729 69B6 06 A0			asl :STACKORIGIN+10
 12730 69B8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12731 69BA 06 A0			asl :STACKORIGIN+10
 12732 69BC 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12733 69BE 06 A0			asl :STACKORIGIN+10
 12734 69C0 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12735 69C2 06 A0			asl :STACKORIGIN+10
 12736 69C4 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12737 69C6 06 A0			asl :STACKORIGIN+10
 12738 69C8 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12739 69CA A5 9F			lda :STACKORIGIN+9
 12740 69CC 18 65 A0			add :STACKORIGIN+10
 12741 69CF 85 9F			sta :STACKORIGIN+9
 12742 69D1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12743 69D3 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12744 69D5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12745 69D7 AD 2B A2			lda adr.ADJW+$04
 12746 69DA 85 A0			sta :STACKORIGIN+10
 12747 69DC AD 2C A2			lda adr.ADJW+1+$04
 12748 69DF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12749 69E1 06 A0			asl :STACKORIGIN+10
 12750 69E3 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12751 69E5 06 A0			asl :STACKORIGIN+10
 12752 69E7 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12753 69E9 06 A0			asl :STACKORIGIN+10
 12754 69EB 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12755 69ED 06 A0			asl :STACKORIGIN+10
 12756 69EF 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12757 69F1 06 A0			asl :STACKORIGIN+10
 12758 69F3 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12759 69F5 06 A0			asl :STACKORIGIN+10
 12760 69F7 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12761 69F9 A5 9F			lda :STACKORIGIN+9
 12762 69FB 18 65 A0			add :STACKORIGIN+10
 12763 69FE 85 9F			sta :STACKORIGIN+9
 12764 6A00 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12765 6A02 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12766 6A04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12767 6A06 AD 29 A2			lda adr.ADJW+$02
 12768 6A09 85 A0			sta :STACKORIGIN+10
 12769 6A0B AD 2A A2			lda adr.ADJW+1+$02
 12770 6A0E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12771 6A10 06 A0			asl :STACKORIGIN+10
 12772 6A12 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12773 6A14 06 A0			asl :STACKORIGIN+10
 12774 6A16 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12775 6A18 06 A0			asl :STACKORIGIN+10
 12776 6A1A 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12777 6A1C 06 A0			asl :STACKORIGIN+10
 12778 6A1E 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12779 6A20 06 A0			asl :STACKORIGIN+10
 12780 6A22 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12781 6A24 06 A0			asl :STACKORIGIN+10
 12782 6A26 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12783 6A28 06 A0			asl :STACKORIGIN+10
 12784 6A2A 26 B0			rol :STACKORIGIN+STACKWIDTH+10
 12785 6A2C A5 9F			lda :STACKORIGIN+9
 12786 6A2E 18 65 A0			add :STACKORIGIN+10
 12787 6A31 8D 1A A2			sta AROUND
 12788 6A34 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12789 6A36 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12790 6A38 8D 1B A2			sta AROUND+1
 12791
 12792 				; optimize OK (service.pas), line = 2189
 12793
 12794 6A3B AD 26 A2			lda TOUCH
 12795 6A3E F0 03 4C FC 6A		jne l_2028
 12796
 12797 				; optimize OK (service.pas), line = 2191
 12798
 12799 6A43 AD 1A A2			lda AROUND
 12800 6A46 29 83			and #$83
 12801 6A48 D0 0A			jne l_203E
 12802 6A4A A9 11			lda #$11
 12803 6A4C 8D 18 A2			sta DEFLECT
 12804 6A4F A9 00			lda #$00
 12805 6A51 8D 19 A2			sta DEFLECT+1
 12806 6A54			l_203E
 12807
 12808 				; optimize OK (service.pas), line = 2192
 12809
 12810 6A54 AD 1A A2			lda AROUND
 12811 6A57 29 83			and #$83
 12812 6A59 C9 01			cmp #$01
 12813 6A5B D0 0A			jne l_205A
 12814 6A5D A9 33			lda #$33
 12815 6A5F 8D 18 A2			sta DEFLECT
 12816 6A62 A9 00			lda #$00
 12817 6A64 8D 19 A2			sta DEFLECT+1
 12818 6A67			l_205A
 12819
 12820 				; optimize OK (service.pas), line = 2193
 12821
 12822 6A67 AD 1A A2			lda AROUND
 12823 6A6A 29 83			and #$83
 12824 6A6C C9 02			cmp #$02
 12825 6A6E D0 0A			jne l_2076
 12826 6A70 A9 10			lda #$10
 12827 6A72 8D 18 A2			sta DEFLECT
 12828 6A75 A9 00			lda #$00
 12829 6A77 8D 19 A2			sta DEFLECT+1
 12830 6A7A			l_2076
 12831
 12832 				; optimize OK (service.pas), line = 2194
 12833
 12834 6A7A AD 1A A2			lda AROUND
 12835 6A7D 29 83			and #$83
 12836 6A7F C9 03			cmp #$03
 12837 6A81 D0 0A			jne l_2092
 12838 6A83 A9 12			lda #$12
 12839 6A85 8D 18 A2			sta DEFLECT
 12840 6A88 A9 00			lda #$00
 12841 6A8A 8D 19 A2			sta DEFLECT+1
 12842 6A8D			l_2092
 12843
 12844 				; optimize OK (service.pas), line = 2195
 12845
 12846 6A8D AD 1A A2			lda AROUND
 12847 6A90 29 83			and #$83
 12848 6A92 C9 80			cmp #$80
 12849 6A94 D0 0A			jne l_20AE
 12850 6A96 A9 01			lda #$01
 12851 6A98 8D 18 A2			sta DEFLECT
 12852 6A9B A9 00			lda #$00
 12853 6A9D 8D 19 A2			sta DEFLECT+1
 12854 6AA0			l_20AE
 12855
 12856 				; optimize OK (service.pas), line = 2196
 12857
 12858 6AA0 AD 1A A2			lda AROUND
 12859 6AA3 29 83			and #$83
 12860 6AA5 C9 81			cmp #$81
 12861 6AA7 D0 0A			jne l_20CA
 12862 6AA9 A9 21			lda #$21
 12863 6AAB 8D 18 A2			sta DEFLECT
 12864 6AAE A9 00			lda #$00
 12865 6AB0 8D 19 A2			sta DEFLECT+1
 12866 6AB3			l_20CA
 12867
 12868 				; optimize OK (service.pas), line = 2197
 12869
 12870 6AB3 AD 1A A2			lda AROUND
 12871 6AB6 29 83			and #$83
 12872 6AB8 C9 82			cmp #$82
 12873 6ABA D0 0A			jne l_20E6
 12874 6ABC A9 11			lda #$11
 12875 6ABE 8D 18 A2			sta DEFLECT
 12876 6AC1 A9 00			lda #$00
 12877 6AC3 8D 19 A2			sta DEFLECT+1
 12878 6AC6			l_20E6
 12879
 12880 				; optimize OK (service.pas), line = 2199
 12881
 12882 6AC6 A9 05			lda #$05
 12883 6AC8 8D 24 A2			sta EMERGENCY
 12884
 12885 				; optimize OK (service.pas), line = 2200
 12886
 12887 6ACB AD 02 A2			lda YB
 12888 6ACE 38 E9 01			sub #$01
 12889 6AD1 8D EC A1			sta SHOOT_BLOCK.YB
 12890 6AD4 AD 03 A2			lda YB+1
 12891 6AD7 E9 00			sbc #$00
 12892 6AD9 8D ED A1			sta SHOOT_BLOCK.YB+1
 12893 6ADC AD 00 A2			lda XB
 12894 6ADF 38 E9 01			sub #$01
 12895 6AE2 8D EA A1			sta SHOOT_BLOCK.XB
 12896 6AE5 AD 01 A2			lda XB+1
 12897 6AE8 E9 00			sbc #$00
 12898 6AEA 8D EB A1			sta SHOOT_BLOCK.XB+1
 12899 6AED AD F8 A1			lda BALL
 12900 6AF0 8D EE A1			sta SHOOT_BLOCK.BALL
 12901 6AF3 AD F9 A1			lda BALL+1
 12902 6AF6 8D EF A1			sta SHOOT_BLOCK.BALL+1
 12903 6AF9 20 1F 5A			jsr SHOOT_BLOCK
 12904 6AFC			l_2028
 12905
 12906 				; optimize OK (service.pas), line = 2205
 12907
 12908 6AFC AD 26 A2			lda TOUCH
 12909 6AFF C9 01			cmp #$01
 12910 6B01 F0 03 4C BF 6B		jne l_2114
 12911
 12912 				; optimize OK (service.pas), line = 2207
 12913
 12914 6B06 AD 1A A2			lda AROUND
 12915 6B09 29 0E			and #$0E
 12916 6B0B D0 0A			jne l_212A
 12917 6B0D A9 21			lda #$21
 12918 6B0F 8D 18 A2			sta DEFLECT
 12919 6B12 A9 00			lda #$00
 12920 6B14 8D 19 A2			sta DEFLECT+1
 12921 6B17			l_212A
 12922
 12923 				; optimize OK (service.pas), line = 2208
 12924
 12925 6B17 AD 1A A2			lda AROUND
 12926 6B1A 29 0E			and #$0E
 12927 6B1C C9 02			cmp #$02
 12928 6B1E D0 0A			jne l_2146
 12929 6B20 A9 20			lda #$20
 12930 6B22 8D 18 A2			sta DEFLECT
 12931 6B25 A9 00			lda #$00
 12932 6B27 8D 19 A2			sta DEFLECT+1
 12933 6B2A			l_2146
 12934
 12935 				; optimize OK (service.pas), line = 2209
 12936
 12937 6B2A AD 1A A2			lda AROUND
 12938 6B2D 29 0E			and #$0E
 12939 6B2F C9 04			cmp #$04
 12940 6B31 D0 0A			jne l_2162
 12941 6B33 A9 33			lda #$33
 12942 6B35 8D 18 A2			sta DEFLECT
 12943 6B38 A9 00			lda #$00
 12944 6B3A 8D 19 A2			sta DEFLECT+1
 12945 6B3D			l_2162
 12946
 12947 				; optimize OK (service.pas), line = 2210
 12948
 12949 6B3D AD 1A A2			lda AROUND
 12950 6B40 29 0E			and #$0E
 12951 6B42 C9 06			cmp #$06
 12952 6B44 D0 0A			jne l_217E
 12953 6B46 A9 22			lda #$22
 12954 6B48 8D 18 A2			sta DEFLECT
 12955 6B4B A9 00			lda #$00
 12956 6B4D 8D 19 A2			sta DEFLECT+1
 12957 6B50			l_217E
 12958
 12959 				; optimize OK (service.pas), line = 2211
 12960
 12961 6B50 AD 1A A2			lda AROUND
 12962 6B53 29 0E			and #$0E
 12963 6B55 C9 08			cmp #$08
 12964 6B57 D0 0A			jne l_219A
 12965 6B59 A9 01			lda #$01
 12966 6B5B 8D 18 A2			sta DEFLECT
 12967 6B5E A9 00			lda #$00
 12968 6B60 8D 19 A2			sta DEFLECT+1
 12969 6B63			l_219A
 12970
 12971 				; optimize OK (service.pas), line = 2212
 12972
 12973 6B63 AD 1A A2			lda AROUND
 12974 6B66 29 0E			and #$0E
 12975 6B68 C9 0A			cmp #$0A
 12976 6B6A D0 0A			jne l_21B6
 12977 6B6C A9 21			lda #$21
 12978 6B6E 8D 18 A2			sta DEFLECT
 12979 6B71 A9 00			lda #$00
 12980 6B73 8D 19 A2			sta DEFLECT+1
 12981 6B76			l_21B6
 12982
 12983 				; optimize OK (service.pas), line = 2213
 12984
 12985 6B76 AD 1A A2			lda AROUND
 12986 6B79 29 0E			and #$0E
 12987 6B7B C9 0C			cmp #$0C
 12988 6B7D D0 0A			jne l_21D2
 12989 6B7F A9 11			lda #$11
 12990 6B81 8D 18 A2			sta DEFLECT
 12991 6B84 A9 00			lda #$00
 12992 6B86 8D 19 A2			sta DEFLECT+1
 12993 6B89			l_21D2
 12994
 12995 				; optimize OK (service.pas), line = 2215
 12996
 12997 6B89 A9 08			lda #$08
 12998 6B8B 8D 24 A2			sta EMERGENCY
 12999
 13000 				; optimize OK (service.pas), line = 2216
 13001
 13002 6B8E AD 02 A2			lda YB
 13003 6B91 38 E9 01			sub #$01
 13004 6B94 8D EC A1			sta SHOOT_BLOCK.YB
 13005 6B97 AD 03 A2			lda YB+1
 13006 6B9A E9 00			sbc #$00
 13007 6B9C 8D ED A1			sta SHOOT_BLOCK.YB+1
 13008 6B9F AD 00 A2			lda XB
 13009 6BA2 18 69 01			add #$01
 13010 6BA5 8D EA A1			sta SHOOT_BLOCK.XB
 13011 6BA8 AD 01 A2			lda XB+1
 13012 6BAB 69 00			adc #$00
 13013 6BAD 8D EB A1			sta SHOOT_BLOCK.XB+1
 13014 6BB0 AD F8 A1			lda BALL
 13015 6BB3 8D EE A1			sta SHOOT_BLOCK.BALL
 13016 6BB6 AD F9 A1			lda BALL+1
 13017 6BB9 8D EF A1			sta SHOOT_BLOCK.BALL+1
 13018 6BBC 20 1F 5A			jsr SHOOT_BLOCK
 13019 6BBF			l_2114
 13020
 13021 				; optimize OK (service.pas), line = 2219
 13022
 13023 6BBF AD 26 A2			lda TOUCH
 13024 6BC2 C9 02			cmp #$02
 13025 6BC4 F0 03 4C 82 6C		jne l_2200
 13026
 13027 				; optimize OK (service.pas), line = 2221
 13028
 13029 6BC9 AD 1A A2			lda AROUND
 13030 6BCC 29 E0			and #$E0
 13031 6BCE D0 0A			jne l_2216
 13032 6BD0 A9 12			lda #$12
 13033 6BD2 8D 18 A2			sta DEFLECT
 13034 6BD5 A9 00			lda #$00
 13035 6BD7 8D 19 A2			sta DEFLECT+1
 13036 6BDA			l_2216
 13037
 13038 				; optimize OK (service.pas), line = 2222
 13039
 13040 6BDA AD 1A A2			lda AROUND
 13041 6BDD 29 E0			and #$E0
 13042 6BDF C9 20			cmp #$20
 13043 6BE1 D0 0A			jne l_2232
 13044 6BE3 A9 10			lda #$10
 13045 6BE5 8D 18 A2			sta DEFLECT
 13046 6BE8 A9 00			lda #$00
 13047 6BEA 8D 19 A2			sta DEFLECT+1
 13048 6BED			l_2232
 13049
 13050 				; optimize OK (service.pas), line = 2223
 13051
 13052 6BED AD 1A A2			lda AROUND
 13053 6BF0 29 E0			and #$E0
 13054 6BF2 C9 40			cmp #$40
 13055 6BF4 D0 0A			jne l_224E
 13056 6BF6 A9 33			lda #$33
 13057 6BF8 8D 18 A2			sta DEFLECT
 13058 6BFB A9 00			lda #$00
 13059 6BFD 8D 19 A2			sta DEFLECT+1
 13060 6C00			l_224E
 13061
 13062 				; optimize OK (service.pas), line = 2224
 13063
 13064 6C00 AD 1A A2			lda AROUND
 13065 6C03 29 E0			and #$E0
 13066 6C05 C9 60			cmp #$60
 13067 6C07 D0 0A			jne l_226A
 13068 6C09 A9 11			lda #$11
 13069 6C0B 8D 18 A2			sta DEFLECT
 13070 6C0E A9 00			lda #$00
 13071 6C10 8D 19 A2			sta DEFLECT+1
 13072 6C13			l_226A
 13073
 13074 				; optimize OK (service.pas), line = 2225
 13075
 13076 6C13 AD 1A A2			lda AROUND
 13077 6C16 29 E0			and #$E0
 13078 6C18 C9 80			cmp #$80
 13079 6C1A D0 0A			jne l_2286
 13080 6C1C A9 02			lda #$02
 13081 6C1E 8D 18 A2			sta DEFLECT
 13082 6C21 A9 00			lda #$00
 13083 6C23 8D 19 A2			sta DEFLECT+1
 13084 6C26			l_2286
 13085
 13086 				; optimize OK (service.pas), line = 2226
 13087
 13088 6C26 AD 1A A2			lda AROUND
 13089 6C29 29 E0			and #$E0
 13090 6C2B C9 A0			cmp #$A0
 13091 6C2D D0 0A			jne l_22A2
 13092 6C2F A9 12			lda #$12
 13093 6C31 8D 18 A2			sta DEFLECT
 13094 6C34 A9 00			lda #$00
 13095 6C36 8D 19 A2			sta DEFLECT+1
 13096 6C39			l_22A2
 13097
 13098 				; optimize OK (service.pas), line = 2227
 13099
 13100 6C39 AD 1A A2			lda AROUND
 13101 6C3C 29 E0			and #$E0
 13102 6C3E C9 C0			cmp #$C0
 13103 6C40 D0 0A			jne l_22BE
 13104 6C42 A9 22			lda #$22
 13105 6C44 8D 18 A2			sta DEFLECT
 13106 6C47 A9 00			lda #$00
 13107 6C49 8D 19 A2			sta DEFLECT+1
 13108 6C4C			l_22BE
 13109
 13110 				; optimize OK (service.pas), line = 2229
 13111
 13112 6C4C A9 06			lda #$06
 13113 6C4E 8D 24 A2			sta EMERGENCY
 13114
 13115 				; optimize OK (service.pas), line = 2230
 13116
 13117 6C51 AD 02 A2			lda YB
 13118 6C54 18 69 01			add #$01
 13119 6C57 8D EC A1			sta SHOOT_BLOCK.YB
 13120 6C5A AD 03 A2			lda YB+1
 13121 6C5D 69 00			adc #$00
 13122 6C5F 8D ED A1			sta SHOOT_BLOCK.YB+1
 13123 6C62 AD 00 A2			lda XB
 13124 6C65 38 E9 01			sub #$01
 13125 6C68 8D EA A1			sta SHOOT_BLOCK.XB
 13126 6C6B AD 01 A2			lda XB+1
 13127 6C6E E9 00			sbc #$00
 13128 6C70 8D EB A1			sta SHOOT_BLOCK.XB+1
 13129 6C73 AD F8 A1			lda BALL
 13130 6C76 8D EE A1			sta SHOOT_BLOCK.BALL
 13131 6C79 AD F9 A1			lda BALL+1
 13132 6C7C 8D EF A1			sta SHOOT_BLOCK.BALL+1
 13133 6C7F 20 1F 5A			jsr SHOOT_BLOCK
 13134 6C82			l_2200
 13135
 13136 				; optimize OK (service.pas), line = 2233
 13137
 13138 6C82 AD 26 A2			lda TOUCH
 13139 6C85 C9 03			cmp #$03
 13140 6C87 F0 03 4C 45 6D		jne l_22EC
 13141
 13142 				; optimize OK (service.pas), line = 2235
 13143
 13144 6C8C AD 1A A2			lda AROUND
 13145 6C8F 29 38			and #$38
 13146 6C91 D0 0A			jne l_2302
 13147 6C93 A9 22			lda #$22
 13148 6C95 8D 18 A2			sta DEFLECT
 13149 6C98 A9 00			lda #$00
 13150 6C9A 8D 19 A2			sta DEFLECT+1
 13151 6C9D			l_2302
 13152
 13153 				; optimize OK (service.pas), line = 2236
 13154
 13155 6C9D AD 1A A2			lda AROUND
 13156 6CA0 29 38			and #$38
 13157 6CA2 C9 08			cmp #$08
 13158 6CA4 D0 0A			jne l_231E
 13159 6CA6 A9 02			lda #$02
 13160 6CA8 8D 18 A2			sta DEFLECT
 13161 6CAB A9 00			lda #$00
 13162 6CAD 8D 19 A2			sta DEFLECT+1
 13163 6CB0			l_231E
 13164
 13165 				; optimize OK (service.pas), line = 2237
 13166
 13167 6CB0 AD 1A A2			lda AROUND
 13168 6CB3 29 38			and #$38
 13169 6CB5 C9 10			cmp #$10
 13170 6CB7 D0 0A			jne l_233A
 13171 6CB9 A9 33			lda #$33
 13172 6CBB 8D 18 A2			sta DEFLECT
 13173 6CBE A9 00			lda #$00
 13174 6CC0 8D 19 A2			sta DEFLECT+1
 13175 6CC3			l_233A
 13176
 13177 				; optimize OK (service.pas), line = 2238
 13178
 13179 6CC3 AD 1A A2			lda AROUND
 13180 6CC6 29 38			and #$38
 13181 6CC8 C9 18			cmp #$18
 13182 6CCA D0 0A			jne l_2356
 13183 6CCC A9 12			lda #$12
 13184 6CCE 8D 18 A2			sta DEFLECT
 13185 6CD1 A9 00			lda #$00
 13186 6CD3 8D 19 A2			sta DEFLECT+1
 13187 6CD6			l_2356
 13188
 13189 				; optimize OK (service.pas), line = 2239
 13190
 13191 6CD6 AD 1A A2			lda AROUND
 13192 6CD9 29 38			and #$38
 13193 6CDB C9 20			cmp #$20
 13194 6CDD D0 0A			jne l_2372
 13195 6CDF A9 20			lda #$20
 13196 6CE1 8D 18 A2			sta DEFLECT
 13197 6CE4 A9 00			lda #$00
 13198 6CE6 8D 19 A2			sta DEFLECT+1
 13199 6CE9			l_2372
 13200
 13201 				; optimize OK (service.pas), line = 2240
 13202
 13203 6CE9 AD 1A A2			lda AROUND
 13204 6CEC 29 38			and #$38
 13205 6CEE C9 28			cmp #$28
 13206 6CF0 D0 0A			jne l_238E
 13207 6CF2 A9 22			lda #$22
 13208 6CF4 8D 18 A2			sta DEFLECT
 13209 6CF7 A9 00			lda #$00
 13210 6CF9 8D 19 A2			sta DEFLECT+1
 13211 6CFC			l_238E
 13212
 13213 				; optimize OK (service.pas), line = 2241
 13214
 13215 6CFC AD 1A A2			lda AROUND
 13216 6CFF 29 38			and #$38
 13217 6D01 C9 30			cmp #$30
 13218 6D03 D0 0A			jne l_23AA
 13219 6D05 A9 21			lda #$21
 13220 6D07 8D 18 A2			sta DEFLECT
 13221 6D0A A9 00			lda #$00
 13222 6D0C 8D 19 A2			sta DEFLECT+1
 13223 6D0F			l_23AA
 13224
 13225 				; optimize OK (service.pas), line = 2243
 13226
 13227 6D0F A9 07			lda #$07
 13228 6D11 8D 24 A2			sta EMERGENCY
 13229
 13230 				; optimize OK (service.pas), line = 2244
 13231
 13232 6D14 AD 02 A2			lda YB
 13233 6D17 18 69 01			add #$01
 13234 6D1A 8D EC A1			sta SHOOT_BLOCK.YB
 13235 6D1D AD 03 A2			lda YB+1
 13236 6D20 69 00			adc #$00
 13237 6D22 8D ED A1			sta SHOOT_BLOCK.YB+1
 13238 6D25 AD 00 A2			lda XB
 13239 6D28 18 69 01			add #$01
 13240 6D2B 8D EA A1			sta SHOOT_BLOCK.XB
 13241 6D2E AD 01 A2			lda XB+1
 13242 6D31 69 00			adc #$00
 13243 6D33 8D EB A1			sta SHOOT_BLOCK.XB+1
 13244 6D36 AD F8 A1			lda BALL
 13245 6D39 8D EE A1			sta SHOOT_BLOCK.BALL
 13246 6D3C AD F9 A1			lda BALL+1
 13247 6D3F 8D EF A1			sta SHOOT_BLOCK.BALL+1
 13248 6D42 20 1F 5A			jsr SHOOT_BLOCK
 13249 6D45			l_22EC
 13250
 13251 				; optimize OK (service.pas), line = 2250
 13252
 13253 6D45 AD 18 A2			lda DEFLECT
 13254 6D48 85 9F			sta :STACKORIGIN+9
 13255 6D4A A0 00			ldy #$00
 13256 6D4C AD 19 A2			lda DEFLECT+1
 13257 6D4F 10 01			spl
 13258 6D51 88				dey
 13259 6D52 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13260 6D54 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 13261 6D56 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13262 6D58 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13263 6D5A 66 9F			ror :STACKORIGIN+9
 13264 6D5C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13265 6D5E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13266 6D60 66 9F			ror :STACKORIGIN+9
 13267 6D62 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13268 6D64 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13269 6D66 66 9F			ror :STACKORIGIN+9
 13270 6D68 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 13271 6D6A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 13272 6D6C 66 9F			ror :STACKORIGIN+9
 13273 6D6E A5 9F			lda :STACKORIGIN+9
 13274 6D70 8D 20 A2			sta MYX
 13275 6D73 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13276 6D75 8D 21 A2			sta MYX+1
 13277
 13278 				; optimize OK (service.pas), line = 2251
 13279
 13280 6D78 AD 18 A2			lda DEFLECT
 13281 6D7B 29 0F			and #$0F
 13282 6D7D 8D 22 A2			sta MYY
 13283 6D80 A9 00			lda #$00
 13284 6D82 8D 23 A2			sta MYY+1
 13285
 13286 				; optimize OK (service.pas), line = 2253
 13287
 13288 6D85 AD 21 A2			lda MYX+1
 13289 6D88 D0 05			bne @+
 13290 6D8A AD 20 A2			lda MYX
 13291 6D8D C9 01			cmp #$01
 13292 				@
 13293 6D8F D0 50			jne l_23E9
 13294 6D91 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13295 6D9B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13296 6D9D B1 84			lda (:bp2),y
 13297 6D9F 85 8A			sta SYSTEM.ABS.@010184000.X
 13298 6DA1 C8				iny
 13299 6DA2 B1 84			lda (:bp2),y
 13300 6DA4 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13301 6DA6 20 A9 1C			jsr SYSTEM.ABS.@010184000
 13302 6DA9 E8				inx
 13303 6DAA A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13304 6DAE A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13305 6DB2 A9 00			lda #$00
 13306 6DB4 38 F5 96			sub :STACKORIGIN,x
 13307 6DB7 95 96			sta :STACKORIGIN,x
 13308 6DB9 A9 00			lda #$00
 13309 6DBB F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13310 6DBD 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13311 6DBF A9 00			lda #$00
 13312 6DC1 E9 00			sbc #$00
 13313 6DC3 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13314 6DC5 A9 00			lda #$00
 13315 6DC7 E9 00			sbc #$00
 13316 6DC9 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13317 6DCB AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13318 6DD5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13319 6DD7 B5 96			lda :STACKORIGIN,x
 13320 6DD9 91 84			sta (:bp2),y
 13321 6DDB C8				iny
 13322 6DDC B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13323 6DDE 91 84			sta (:bp2),y
 13324 6DE0 CA				dex
 13325 6DE1			l_23E9
 13326
 13327 				; optimize OK (service.pas), line = 2254
 13328
 13329 6DE1 AD 21 A2			lda MYX+1
 13330 6DE4 D0 05			bne @+
 13331 6DE6 AD 20 A2			lda MYX
 13332 6DE9 C9 02			cmp #$02
 13333 				@
 13334 6DEB D0 2D			jne l_2406
 13335 6DED AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13336 6DF7 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13337 6DF9 B1 84			lda (:bp2),y
 13338 6DFB 85 8A			sta SYSTEM.ABS.@010184000.X
 13339 6DFD C8				iny
 13340 6DFE B1 84			lda (:bp2),y
 13341 6E00 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13342 6E02 20 A9 1C			jsr SYSTEM.ABS.@010184000
 13343 6E05 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13344 6E0F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13345 6E11 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13346 6E13 91 84			sta (:bp2),y
 13347 6E15 C8				iny
 13348 6E16 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13349 6E18 91 84			sta (:bp2),y
 13350 6E1A			l_2406
 13351
 13352 				; optimize OK (service.pas), line = 2255
 13353
 13354 6E1A AD 21 A2			lda MYX+1
 13355 6E1D D0 05			bne @+
 13356 6E1F AD 20 A2			lda MYX
 13357 6E22 C9 03			cmp #$03
 13358 				@
 13359 6E24 D0 25			jne l_2420
 13360 6E26 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13361 6E30 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13362 6E32 A9 00			lda #$00
 13363 6E34 38 F1 84			sub (:bp2),y
 13364 6E37 85 9F			sta :STACKORIGIN+9
 13365 6E39 C8				iny
 13366 6E3A A9 00			lda #$00
 13367 6E3C F1 84			sbc (:bp2),y
 13368 6E3E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13369 6E40 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13370 6E42 A5 9F			lda :STACKORIGIN+9
 13371 6E44 91 84			sta (:bp2),y
 13372 6E46 C8				iny
 13373 6E47 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13374 6E49 91 84			sta (:bp2),y
 13375 6E4B			l_2420
 13376
 13377 				; optimize OK (service.pas), line = 2257
 13378
 13379 6E4B AD 23 A2			lda MYY+1
 13380 6E4E D0 05			bne @+
 13381 6E50 AD 22 A2			lda MYY
 13382 6E53 C9 01			cmp #$01
 13383 				@
 13384 6E55 D0 50			jne l_243C
 13385 6E57 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13386 6E61 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13387 6E63 B1 84			lda (:bp2),y
 13388 6E65 85 8A			sta SYSTEM.ABS.@010184000.X
 13389 6E67 C8				iny
 13390 6E68 B1 84			lda (:bp2),y
 13391 6E6A 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13392 6E6C 20 A9 1C			jsr SYSTEM.ABS.@010184000
 13393 6E6F E8				inx
 13394 6E70 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13395 6E74 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13396 6E78 A9 00			lda #$00
 13397 6E7A 38 F5 96			sub :STACKORIGIN,x
 13398 6E7D 95 96			sta :STACKORIGIN,x
 13399 6E7F A9 00			lda #$00
 13400 6E81 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13401 6E83 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13402 6E85 A9 00			lda #$00
 13403 6E87 E9 00			sbc #$00
 13404 6E89 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13405 6E8B A9 00			lda #$00
 13406 6E8D E9 00			sbc #$00
 13407 6E8F 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13408 6E91 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13409 6E9B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13410 6E9D B5 96			lda :STACKORIGIN,x
 13411 6E9F 91 84			sta (:bp2),y
 13412 6EA1 C8				iny
 13413 6EA2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13414 6EA4 91 84			sta (:bp2),y
 13415 6EA6 CA				dex
 13416 6EA7			l_243C
 13417
 13418 				; optimize OK (service.pas), line = 2258
 13419
 13420 6EA7 AD 23 A2			lda MYY+1
 13421 6EAA D0 05			bne @+
 13422 6EAC AD 22 A2			lda MYY
 13423 6EAF C9 02			cmp #$02
 13424 				@
 13425 6EB1 D0 2D			jne l_2459
 13426 6EB3 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13427 6EBD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13428 6EBF B1 84			lda (:bp2),y
 13429 6EC1 85 8A			sta SYSTEM.ABS.@010184000.X
 13430 6EC3 C8				iny
 13431 6EC4 B1 84			lda (:bp2),y
 13432 6EC6 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13433 6EC8 20 A9 1C			jsr SYSTEM.ABS.@010184000
 13434 6ECB AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13435 6ED5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13436 6ED7 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13437 6ED9 91 84			sta (:bp2),y
 13438 6EDB C8				iny
 13439 6EDC A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13440 6EDE 91 84			sta (:bp2),y
 13441 6EE0			l_2459
 13442
 13443 				; optimize OK (service.pas), line = 2259
 13444
 13445 6EE0 AD 23 A2			lda MYY+1
 13446 6EE3 D0 05			bne @+
 13447 6EE5 AD 22 A2			lda MYY
 13448 6EE8 C9 03			cmp #$03
 13449 				@
 13450 6EEA D0 25			jne l_2473
 13451 6EEC AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13452 6EF6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13453 6EF8 A9 00			lda #$00
 13454 6EFA 38 F1 84			sub (:bp2),y
 13455 6EFD 85 9F			sta :STACKORIGIN+9
 13456 6EFF C8				iny
 13457 6F00 A9 00			lda #$00
 13458 6F02 F1 84			sbc (:bp2),y
 13459 6F04 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13460 6F06 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13461 6F08 A5 9F			lda :STACKORIGIN+9
 13462 6F0A 91 84			sta (:bp2),y
 13463 6F0C C8				iny
 13464 6F0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13465 6F0F 91 84			sta (:bp2),y
 13466 6F11			l_2473
 13467 6F11			l_1EA4
 13468 6F11			l_1BEB
 13469
 13470 				; optimize OK (service.pas), line = 2269
 13471
 13472 6F11 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13473 6F1B A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13474 6F1D B1 84			lda (:bp2),y
 13475 6F1F C9 65			cmp #$65
 13476 6F21 B0 03 4C 45 71		jcc l_2494
 13477
 13478 				; optimize OK (service.pas), line = 2272
 13479
 13480 6F26 AD 24 A2			lda EMERGENCY
 13481 6F29 C9 FF			cmp #$FF
 13482 6F2B D0 05			jne l_24A7
 13483 6F2D A9 04			lda #$04
 13484 6F2F 20 67 2D			jsr FATAL_ERROR
 13485 6F32			l_24A7
 13486
 13487 				; optimize OK (service.pas), line = 2274
 13488
 13489 6F32 AC 24 A2			ldy EMERGENCY
 13490 6F35 B9 7F 10			lda adr.EMERG_DEV,y
 13491 6F38 8D 1C A2			sta MIMAX
 13492 6F3B A9 00			lda #$00
 13493 6F3D 8D 1D A2			sta MIMAX+1
 13494
 13495 				; optimize OK (service.pas), line = 2300
 13496
 13497 6F40 AD 24 A2			lda EMERGENCY
 13498 6F43 8D 39 A2			sta @CASETMP_0008
 13499 6F46 C9 05			cmp #$05
 13500 6F48 D0 2F			jne l_24C0
 13501 				@
 13502
 13503 				; optimize OK (service.pas), line = 2303
 13504
 13505 6F4A AD 2D A2			lda adr.ADJW+$06
 13506 6F4D 0D 2E A2			ora adr.ADJW+1+$06
 13507 6F50 D0 0D			jne l_24D6
 13508 6F52 AD 1C A2			lda MIMAX
 13509 6F55 29 0F			and #$0F
 13510 6F57 8D 1C A2			sta MIMAX
 13511 6F5A A9 00			lda #$00
 13512 6F5C 8D 1D A2			sta MIMAX+1
 13513 6F5F			l_24D6
 13514
 13515 				; optimize OK (service.pas), line = 2304
 13516
 13517 6F5F AD 29 A2			lda adr.ADJW+$02
 13518 6F62 0D 2A A2			ora adr.ADJW+1+$02
 13519 6F65 D0 0F			jne l_24FC
 13520 6F67 AD 1C A2			lda MIMAX
 13521 6F6A 29 F0			and #$F0
 13522 6F6C 09 03			ora #$03
 13523 6F6E 8D 1C A2			sta MIMAX
 13524 6F71 A9 00			lda #$00
 13525 6F73 8D 1D A2			sta MIMAX+1
 13526 6F76			l_24FC
 13527 6F76 4C 15 70			jmp a_0008
 13528 6F79			l_24C0
 13529 6F79 C9 06			cmp #$06
 13530 6F7B D0 31			jne l_2513
 13531
 13532 				; optimize OK (service.pas), line = 2308
 13533
 13534 6F7D AD 29 A2			lda adr.ADJW+$02
 13535 6F80 0D 2A A2			ora adr.ADJW+1+$02
 13536 6F83 D0 0F			jne l_2529
 13537 6F85 AD 1C A2			lda MIMAX
 13538 6F88 29 0F			and #$0F
 13539 6F8A 09 10			ora #$10
 13540 6F8C 8D 1C A2			sta MIMAX
 13541 6F8F A9 00			lda #$00
 13542 6F91 8D 1D A2			sta MIMAX+1
 13543 6F94			l_2529
 13544
 13545 				; optimize OK (service.pas), line = 2309
 13546
 13547 6F94 AD 31 A2			lda adr.ADJW+$0A
 13548 6F97 0D 32 A2			ora adr.ADJW+1+$0A
 13549 6F9A D0 0F			jne l_254F
 13550 6F9C AD 1C A2			lda MIMAX
 13551 6F9F 29 F0			and #$F0
 13552 6FA1 09 04			ora #$04
 13553 6FA3 8D 1C A2			sta MIMAX
 13554 6FA6 A9 00			lda #$00
 13555 6FA8 8D 1D A2			sta MIMAX+1
 13556 6FAB			l_254F
 13557 6FAB 4C 15 70			jmp a_0008
 13558 6FAE			l_2513
 13559 6FAE C9 07			cmp #$07
 13560 6FB0 D0 31			jne l_2566
 13561
 13562 				; optimize OK (service.pas), line = 2313
 13563
 13564 6FB2 AD 31 A2			lda adr.ADJW+$0A
 13565 6FB5 0D 32 A2			ora adr.ADJW+1+$0A
 13566 6FB8 D0 0F			jne l_257C
 13567 6FBA AD 1C A2			lda MIMAX
 13568 6FBD 29 0F			and #$0F
 13569 6FBF 09 20			ora #$20
 13570 6FC1 8D 1C A2			sta MIMAX
 13571 6FC4 A9 00			lda #$00
 13572 6FC6 8D 1D A2			sta MIMAX+1
 13573 6FC9			l_257C
 13574
 13575 				; optimize OK (service.pas), line = 2314
 13576
 13577 6FC9 AD 35 A2			lda adr.ADJW+$0E
 13578 6FCC 0D 36 A2			ora adr.ADJW+1+$0E
 13579 6FCF D0 0F			jne l_25A2
 13580 6FD1 AD 1C A2			lda MIMAX
 13581 6FD4 29 F0			and #$F0
 13582 6FD6 09 05			ora #$05
 13583 6FD8 8D 1C A2			sta MIMAX
 13584 6FDB A9 00			lda #$00
 13585 6FDD 8D 1D A2			sta MIMAX+1
 13586 6FE0			l_25A2
 13587 6FE0 4C 15 70			jmp a_0008
 13588 6FE3			l_2566
 13589 6FE3 C9 08			cmp #$08
 13590 6FE5 D0 2E			jne l_25B9
 13591
 13592 				; optimize OK (service.pas), line = 2318
 13593
 13594 6FE7 AD 35 A2			lda adr.ADJW+$0E
 13595 6FEA 0D 36 A2			ora adr.ADJW+1+$0E
 13596 6FED D0 0F			jne l_25CF
 13597 6FEF AD 1C A2			lda MIMAX
 13598 6FF2 29 0F			and #$0F
 13599 6FF4 09 30			ora #$30
 13600 6FF6 8D 1C A2			sta MIMAX
 13601 6FF9 A9 00			lda #$00
 13602 6FFB 8D 1D A2			sta MIMAX+1
 13603 6FFE			l_25CF
 13604
 13605 				; optimize OK (service.pas), line = 2319
 13606
 13607 6FFE AD 2D A2			lda adr.ADJW+$06
 13608 7001 0D 2E A2			ora adr.ADJW+1+$06
 13609 7004 D0 0F			jne l_25F5
 13610 7006 AD 1C A2			lda MIMAX
 13611 7009 29 F0			and #$F0
 13612 700B 09 06			ora #$06
 13613 700D 8D 1C A2			sta MIMAX
 13614 7010 A9 00			lda #$00
 13615 7012 8D 1D A2			sta MIMAX+1
 13616 7015			l_25F5
 13617 7015			l_25B9
 13618 7015			a_0008
 13619
 13620 				; --- RepeatUntilProlog
 13621 7015			l_260C
 13622
 13623 				; optimize OK (service.pas), line = 2326
 13624
 13625 7015 AD 1C A2			lda MIMAX
 13626 7018 85 A0			sta :STACKORIGIN+10
 13627 701A AD 1D A2			lda MIMAX+1
 13628 701D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13629 701F 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13630 7021 66 A0			ror :STACKORIGIN+10
 13631 7023 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13632 7025 66 A0			ror :STACKORIGIN+10
 13633 7027 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13634 7029 66 A0			ror :STACKORIGIN+10
 13635 702B 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13636 702D 66 A0			ror :STACKORIGIN+10
 13637 702F A9 5A			lda #$5A
 13638 7031 85 8E			sta :ecx
 13639 7033 A9 00			lda #$00
 13640 7035 85 8F			sta :ecx+1
 13641 7037 A5 A0			lda :STACKORIGIN+10
 13642 7039 85 86			sta :eax
 13643 703B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13644 703D 85 87			sta :eax+1
 13645 					.ifdef fmulinit
 13646 					fmulu_16
 13647 					els
 13648 703F 20 3A 13			imulCX
 13649 					eif
 13650 7042 A5 86			lda :eax
 13651 7044 8D 08 A2			sta LX
 13652 7047 A5 87			lda :eax+1
 13653 7049 8D 09 A2			sta LX+1
 13654
 13655 				; optimize OK (service.pas), line = 2327
 13656
 13657 704C AD 1C A2			lda MIMAX
 13658 704F 29 0F			and #$0F
 13659 7051 85 86			sta :eax
 13660 7053 A9 00			lda #$00
 13661 7055 85 87			sta :eax+1
 13662 7057 A9 5A			lda #$5A
 13663 7059 85 8E			sta :ecx
 13664 705B A9 00			lda #$00
 13665 705D 85 8F			sta :ecx+1
 13666 					.ifdef fmulinit
 13667 					fmulu_16
 13668 					els
 13669 705F 20 7E 13			imulCX_AL
 13670 					eif
 13671 7062 A5 86			lda :eax
 13672 7064 8D 0C A2			sta MX
 13673 7067 A5 87			lda :eax+1
 13674 7069 8D 0D A2			sta MX+1
 13675
 13676 				; optimize OK (service.pas), line = 2328
 13677
 13678 706C AD 0C A2			lda MX
 13679 706F 38 ED 08 A2			sub LX
 13680 7073 8D E2 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 13681 7076 AD 0D A2			lda MX+1
 13682 7079 ED 09 A2			sbc LX+1
 13683 707C 8D E3 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 13684 707F 20 52 25			jsr SYSTEM.RANDOM.@010184000
 13685 7082 AD E4 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 13686 7085 18 6D 08 A2			add LX
 13687 7089 8D 1E A2			sta ANGLE
 13688 708C AD E5 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 13689 708F 6D 09 A2			adc LX+1
 13690 7092 8D 1F A2			sta ANGLE+1
 13691
 13692 				; optimize OK (service.pas), line = 2331
 13693
 13694 7095 A9 5A			lda #$5A
 13695 7097 85 8E			sta @SMALLINT.MOD.B
 13696 7099 A9 00			lda #$00
 13697 709B 85 8F			sta @SMALLINT.MOD.B+1
 13698 709D AD 1E A2			lda ANGLE
 13699 70A0 85 86			sta @SMALLINT.MOD.A
 13700 70A2 AD 1F A2			lda ANGLE+1
 13701 70A5 85 87			sta @SMALLINT.MOD.A+1
 13702 70A7 20 7F 12			jsr @SMALLINT.MOD
 13703 70AA A5 92			lda @SMALLINT.MOD.RESULT
 13704 70AC C9 1F			cmp #$1F
 13705 70AE A5 93			lda @SMALLINT.MOD.RESULT+1
 13706 70B0 E9 00			sbc #$00
 13707 70B2 50 02			svc
 13708 70B4 49 80			eor #$80
 13709 70B6 10 03 4C 15 70		jmi l_260C
 13710 70BB A9 5A			lda #$5A
 13711 70BD 85 8E			sta @SMALLINT.MOD.B
 13712 70BF A9 00			lda #$00
 13713 70C1 85 8F			sta @SMALLINT.MOD.B+1
 13714 70C3 AD 1E A2			lda ANGLE
 13715 70C6 85 86			sta @SMALLINT.MOD.A
 13716 70C8 AD 1F A2			lda ANGLE+1
 13717 70CB 85 87			sta @SMALLINT.MOD.A+1
 13718 70CD 20 7F 12			jsr @SMALLINT.MOD
 13719 70D0 A5 92			lda @SMALLINT.MOD.RESULT
 13720 70D2 C9 3C			cmp #$3C
 13721 70D4 A5 93			lda @SMALLINT.MOD.RESULT+1
 13722 70D6 E9 00			sbc #$00
 13723 70D8 50 02			svc
 13724 70DA 49 80			eor #$80
 13725 70DC 30 03 4C 15 70		jpl l_260C
 13726
 13727 				; optimize OK (service.pas), line = 2335
 13728
 13729 70E1 A9 68			lda #$68
 13730 70E3 85 8E			sta @SMALLINT.MOD.B
 13731 70E5 A9 01			lda #$01
 13732 70E7 85 8F			sta @SMALLINT.MOD.B+1
 13733 70E9 AD 1E A2			lda ANGLE
 13734 70EC 85 86			sta @SMALLINT.MOD.A
 13735 70EE AD 1F A2			lda ANGLE+1
 13736 70F1 85 87			sta @SMALLINT.MOD.A+1
 13737 70F3 20 7F 12			jsr @SMALLINT.MOD
 13738 70F6 A5 92			lda @SMALLINT.MOD.RESULT
 13739 70F8 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 13740 70FB A5 93			lda @SMALLINT.MOD.RESULT+1
 13741 70FD 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 13742 7100 AD F8 A1			lda BALL
 13743 7103 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 13744 7106 AD F9 A1			lda BALL+1
 13745 7109 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 13746 710C 20 65 38			jsr SET_BALL_DIRECTION
 13747
 13748 				; optimize OK (service.pas), line = 2336
 13749
 13750 710F AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13751 7119 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 13752 711B B1 84			lda (:bp2),y
 13753 711D 8D 4D A1			sta SET_BALL_SPEED.SPEED
 13754 7120 C8				iny
 13755 7121 B1 84			lda (:bp2),y
 13756 7123 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 13757 7126 AD F8 A1			lda BALL
 13758 7129 8D 49 A1			sta SET_BALL_SPEED.BALL
 13759 712C AD F9 A1			lda BALL+1
 13760 712F 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 13761 7132 20 55 36			jsr SET_BALL_SPEED
 13762
 13763 				; optimize OK (service.pas), line = 2338
 13764
 13765 7135 AC F8 A1 84 84 AC + 	mwy BALL :bp2
 13766 713F A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13767 7141 A9 00			lda #$00
 13768 7143 91 84			sta (:bp2),y
 13769 7145			l_2494
 13770
 13771 				; ------------------------------------------------------------
 13772
 13773 = A1F8			BALL	= DATAORIGIN+$065C
 13774 = 9B9C			BALL.X	= DATAORIGIN+$0000
 13775 = 9B9E			BALL.Y	= DATAORIGIN+$0002
 13776 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
 13777 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
 13778 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
 13779 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
 13780 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
 13781 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
 13782 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
 13783 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
 13784 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
 13785 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
 13786 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
 13787 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
 13788 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
 13789 = 9BB6			BALL.STM	= DATAORIGIN+$001A
 13790 = A1FC			X	= DATAORIGIN+$0660
 13791 = A1FE			Y	= DATAORIGIN+$0662
 13792 = A200			XB	= DATAORIGIN+$0664
 13793 = A202			YB	= DATAORIGIN+$0666
 13794 = A204			OX	= DATAORIGIN+$0668
 13795 = A206			OY	= DATAORIGIN+$066A
 13796 = A208			LX	= DATAORIGIN+$066C
 13797 = A20A			LY	= DATAORIGIN+$066E
 13798 = A20C			MX	= DATAORIGIN+$0670
 13799 = A20E			MY	= DATAORIGIN+$0672
 13800 = A210			NX	= DATAORIGIN+$0674
 13801 = A212			NY	= DATAORIGIN+$0676
 13802 = A214			F1	= DATAORIGIN+$0678
 13803 = A216			F2	= DATAORIGIN+$067A
 13804 = A218			DEFLECT	= DATAORIGIN+$067C
 13805 = A21A			AROUND	= DATAORIGIN+$067E
 13806 = A21C			MIMAX	= DATAORIGIN+$0680
 13807 = A21E			ANGLE	= DATAORIGIN+$0682
 13808 = A220			MYX	= DATAORIGIN+$0684
 13809 = A222			MYY	= DATAORIGIN+$0686
 13810 = A224			EMERGENCY	= DATAORIGIN+$0688
 13811 = A225			COLLISION	= DATAORIGIN+$0689
 13812 = A226			TOUCH	= DATAORIGIN+$068A
 13813 = A227			adr.ADJW	= [DATAORIGIN+$068B] .array [3] [3] .word
 13814 7145			.var ADJW	= adr.ADJW .word
 13815 = A239			@CASETMP_0008	= DATAORIGIN+$069D
 13816
 13817 = A1F8			@VarData	= BALL
 13818 = 0034			@VarDataSize	= 52
 13819
 13820 7145			@exit
 13821 					.ifdef @new
 13822 					lda <@VarData
 13823 					sta :ztmp
 13824 					lda >@VarData
 13825 					ldy #@VarDataSize-1
 13826 					jmp @FreeMem
 13827 					els
 13828 7145 60				rts						; ret
 13829 					eif
 13830 = 7146 27 A2		ADJW
 13830 				.endl
 13831
 13832 7148			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 13833
 13834 				; optimize OK (service.pas), line = 2353
 13835
 13836 7148 A9 00			lda #$00
 13837 714A 8D 40 A2			sta K
 13838 714D 8D 41 A2			sta K+1
 13839
 13840 7150			l_2676
 13841 				; --- ForToDoCondition
 13842 7150 AD 41 A2			lda K+1
 13843 7153 C9 01			cmp #$01
 13844 7155 90 0B			bcc @+
 13845 7157 D0 48			jne l_2682
 13846 7159 AD 40 A2			lda K
 13847 715C C9 3F			cmp #$3F
 13848 715E 90 02			bcc @+
 13849 7160 D0 3F			jne l_2682
 13850 				@
 13851
 13852 				; optimize OK (service.pas), line = 2354
 13853
 13854 7162 AC 3A A2 84 84 AC + 	mwy PATT :bp2
 13855 716C A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13856 716E B1 84			lda (:bp2),y
 13857 7170 85 8E			sta @WORD.MOD.B
 13858 7172 C8				iny
 13859 7173 B1 84			lda (:bp2),y
 13860 7175 85 8F			sta @WORD.MOD.B+1
 13861 7177 AD 40 A2			lda K
 13862 717A 85 86			sta @WORD.MOD.A
 13863 717C AD 41 A2			lda K+1
 13864 717F 85 87			sta @WORD.MOD.A+1
 13865 7181 20 CF 13			jsr @WORD.MOD
 13866 7184 A5 92			lda @WORD.MOD.RESULT
 13867 7186 85 A0			sta :STACKORIGIN+10
 13868 7188 AC 40 A2			ldy K
 13869 718B A9 C4			lda #$C4
 13870 718D 18 6D 41 A2			add K+1
 13871 7191 85 83			sta :bp+1
 13872 7193 A5 A0			lda :STACKORIGIN+10
 13873 7195 91 82			sta (:bp),y
 13874
 13875 				; --- ForToDoEpilog
 13876 7197 EE 40 A2			inc K
 13877 719A D0 B4			jne l_2676
 13878 719C EE 41 A2			inc K+1
 13879 719F D0 AF			jne l_2676
 13880 71A1			l_2682
 13881
 13882 				; optimize OK (service.pas), line = 2358
 13883
 13884 71A1 A9 00			lda #$00
 13885 71A3 8D 43 A2			sta Y
 13886
 13887 71A6			l_269C
 13888 				; --- ForToDoCondition
 13889 71A6 AD 43 A2			lda Y
 13890 71A9 C9 C8			cmp #$C8
 13891 71AB B0 2E			jcs l_26AA
 13892
 13893 				; optimize OK (service.pas), line = 2359
 13894
 13895 71AD AC 3A A2 84 84 AC + 	mwy PATT :bp2
 13896 71B7 A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 13897 71B9 B1 84			lda (:bp2),y
 13898 71BB 85 8E			sta @WORD.MOD.B
 13899 71BD C8				iny
 13900 71BE B1 84			lda (:bp2),y
 13901 71C0 85 8F			sta @WORD.MOD.B+1
 13902 71C2 AD 43 A2			lda Y
 13903 71C5 85 86			sta @WORD.MOD.A
 13904 71C7 A9 00			lda #$00
 13905 71C9 85 87			sta @WORD.MOD.A+1
 13906 71CB 20 CF 13			jsr @WORD.MOD
 13907 71CE A5 92			lda @WORD.MOD.RESULT
 13908 71D0 AC 43 A2			ldy Y
 13909 71D3 99 00 C3			sta adr.MODY,y
 13910
 13911 				; --- ForToDoEpilog
 13912 71D6 EE 43 A2			inc Y
 13913 71D9 D0 CB			jne l_269C
 13914 71DB			l_26AA
 13915
 13916 				; optimize OK (service.pas), line = 2364
 13917
 13918 71DB A9 0A			lda #$0A
 13919 71DD 8D 43 A2			sta Y
 13920
 13921 71E0			l_26C6
 13922 				; --- ForToDoCondition
 13923 71E0 AC 43 A2			ldy Y
 13924 71E3 C0 C7			cpy #$C7
 13925 71E5 90 03 4C 1D 73		jcs l_26D4
 13926
 13927 				; optimize OK (service.pas), line = 2366
 13928
 13929 71EA B9 00 C3			lda adr.MODY,y
 13930 71ED 85 86			sta :eax
 13931 71EF AC 3A A2 84 84 AC + 	mwy PATT :bp2
 13932 71F9 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13933 71FB B1 84			lda (:bp2),y
 13934 71FD 85 8E			sta :ecx
 13935 71FF C8				iny
 13936 7200 B1 84			lda (:bp2),y
 13937 7202 85 8F			sta :ecx+1
 13938 7204 A9 00			lda #$00
 13939 7206 85 87			sta :eax+1
 13940 					.ifdef fmulinit
 13941 					fmulu_16
 13942 					els
 13943 7208 20 3A 13			imulCX
 13944 					eif
 13945 720B A5 86			lda :eax
 13946 720D 8D 3E A2			sta YB
 13947 7210 A5 87			lda :eax+1
 13948 7212 8D 3F A2			sta YB+1
 13949
 13950 				; optimize OK (service.pas), line = 2367
 13951
 13952 7215 A9 00			lda #$00
 13953 7217 8D 40 A2			sta K
 13954 721A 8D 41 A2			sta K+1
 13955
 13956 				; optimize OK (service.pas), line = 2368
 13957
 13958 721D A9 09			lda #$09
 13959 721F 8D 42 A2			sta X
 13960
 13961 7222			l_26EF
 13962 				; --- ForToDoCondition
 13963 7222 AD 42 A2			lda X
 13964 7225 C9 D8			cmp #$D8
 13965 7227 90 03 4C C6 72		jcs l_26FD
 13966
 13967 				; optimize OK (service.pas), line = 2371
 13968
 13969 722C AC 3A A2 84 84 AC + 	mwy PATT :bp2
 13970 7236 A0 04			ldy #PATT.OFS-DATAORIGIN
 13971 7238 B1 84			lda (:bp2),y
 13972 723A 85 9F			sta :STACKORIGIN+9
 13973 723C C8				iny
 13974 723D B1 84			lda (:bp2),y
 13975 723F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13976 7241 C8				iny
 13977 7242 B1 84			lda (:bp2),y
 13978 7244 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13979 7246 C8				iny
 13980 7247 B1 84			lda (:bp2),y
 13981 7249 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13982 724B AC 42 A2			ldy X
 13983 724E A5 9F			lda :STACKORIGIN+9
 13984 7250 18 79 00 C4			add $C400,y
 13985 7254 85 9F			sta :STACKORIGIN+9
 13986 7256 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13987 7258 69 00			adc #$00
 13988 725A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13989 725C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13990 725E 69 00			adc #$00
 13991 7260 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13992 7262 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13993 7264 69 00			adc #$00
 13994 7266 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13995 7268 A5 9F			lda :STACKORIGIN+9
 13996 726A 18 6D 3E A2			add YB
 13997 726E 8D D1 A0			sta GETBYTE.SRC
 13998 7271 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13999 7273 6D 3F A2			adc YB+1
 14000 7276 8D D2 A0			sta GETBYTE.SRC+1
 14001 7279 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14002 727B 69 00			adc #$00
 14003 727D 8D D3 A0			sta GETBYTE.SRC+2
 14004 7280 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14005 7282 69 00			adc #$00
 14006 7284 8D D4 A0			sta GETBYTE.SRC+3
 14007 7287 20 E7 2C			jsr GETBYTE
 14008 728A AD D5 A0			lda GETBYTE.RESULT
 14009 728D 8D 44 A2			sta CL
 14010
 14011 				; optimize OK (service.pas), line = 2373
 14012
 14013 7290 A9 80			lda #$80
 14014 7292 8D 45 A2			sta SHADOW
 14015
 14016 				; optimize OK (service.pas), line = 2378
 14017
 14018 7295 AD 43 A2			lda Y
 14019 7298 C9 10			cmp #$10
 14020 729A 90 07			jcc l_2732x
 14021 729C AD 42 A2			lda X
 14022 729F C9 12			cmp #$12
 14023 72A1 B0 05			jcs l_2732
 14024 72A3			l_2732x
 14025 72A3 A9 00			lda #$00
 14026 72A5 8D 45 A2			sta SHADOW
 14027 72A8			l_2732
 14028
 14029 				; optimize OK (service.pas), line = 2383
 14030
 14031 72A8 AD 44 A2			lda CL
 14032 72AB 29 7F			and #$7F
 14033 72AD 0D 45 A2			ora SHADOW
 14034 72B0 AC 40 A2			ldy K
 14035 72B3 99 00 C2			sta adr.TMP,y
 14036
 14037 				; optimize FAIL (0, service.pas), line = 2384
 14038
 14039 72B6 EE 40 A2			inc K
 14040 72B9 D0 03			sne
 14041 72BB EE 41 A2			inc K+1
 14042
 14043 				; --- ForToDoEpilog
 14044 72BE EE 42 A2			inc X
 14045 72C1 F0 03 4C 22 72		jne l_26EF
 14046 72C6			l_26FD
 14047
 14048 				; optimize OK (service.pas), line = 2387
 14049
 14050 72C6 AD A7 9C			lda PLAYSCREEN.OFS
 14051 72C9 18 69 09			add #$09
 14052 72CC 85 A0			sta :STACKORIGIN+10
 14053 72CE AD A8 9C			lda PLAYSCREEN.OFS+1
 14054 72D1 69 00			adc #$00
 14055 72D3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14056 72D5 AD A9 9C			lda PLAYSCREEN.OFS+2
 14057 72D8 69 00			adc #$00
 14058 72DA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14059 72DC AD AA 9C			lda PLAYSCREEN.OFS+3
 14060 72DF 69 00			adc #$00
 14061 72E1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14062 72E3 AD 43 A2			lda Y
 14063 72E6 85 86			sta :eax
 14064 72E8 A9 00			lda #$00
 14065 72EA 85 87			sta :eax+1
 14066 72EC 20 68 19			jsr @mul320
 14067 72EF A5 A0			lda :STACKORIGIN+10
 14068 72F1 18 65 86			add :eax
 14069 72F4 8D B1 A0			sta BLITTMP.DST
 14070 72F7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14071 72F9 65 87			adc :eax+1
 14072 72FB 8D B2 A0			sta BLITTMP.DST+1
 14073 72FE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14074 7300 65 88			adc :eax+2
 14075 7302 8D B3 A0			sta BLITTMP.DST+2
 14076 7305 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14077 7307 65 89			adc :eax+3
 14078 7309 8D B4 A0			sta BLITTMP.DST+3
 14079 730C AD 40 A2			lda K
 14080 730F 8D B5 A0			sta BLITTMP.SIZE
 14081 7312 20 BF 2B			jsr BLITTMP
 14082
 14083 				; --- ForToDoEpilog
 14084 7315 EE 43 A2			inc Y
 14085 7318 F0 03 4C E0 71		jne l_26C6
 14086 731D			l_26D4
 14087
 14088 				; ------------------------------------------------------------
 14089
 14090 = A23A			PATT	= DATAORIGIN+$069E
 14091 = 9B9C			PATT.WIDTH	= DATAORIGIN+$0000
 14092 = 9B9E			PATT.HEIGHT	= DATAORIGIN+$0002
 14093 = 9BA0			PATT.OFS	= DATAORIGIN+$0004
 14094 = A23E			YB	= DATAORIGIN+$06A2
 14095 = A240			K	= DATAORIGIN+$06A4
 14096 = A242			X	= DATAORIGIN+$06A6
 14097 = A243			Y	= DATAORIGIN+$06A7
 14098 = A244			CL	= DATAORIGIN+$06A8
 14099 = A245			SHADOW	= DATAORIGIN+$06A9
 14100
 14101 = A23A			@VarData	= PATT
 14102 = 000A			@VarDataSize	= 10
 14103
 14104 731D			@exit
 14105 					.ifdef @new
 14106 					lda <@VarData
 14107 					sta :ztmp
 14108 					lda >@VarData
 14109 					ldy #@VarDataSize-1
 14110 					jmp @FreeMem
 14111 					els
 14112 731D 60				rts						; ret
 14113 					eif
 14114 				.endl
 14115
 14116 731E			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 14117
 14118 				; ------------------------------------------------------------
 14119
 14120 = A246			X	= DATAORIGIN+$06AA
 14121 = A248			Y	= DATAORIGIN+$06AC
 14122
 14123 = A246			@VarData	= X
 14124 = 0004			@VarDataSize	= 4
 14125
 14126 731E			@exit
 14127 					.ifdef @new
 14128 					lda <@VarData
 14129 					sta :ztmp
 14130 					lda >@VarData
 14131 					ldy #@VarDataSize-1
 14132 					jmp @FreeMem
 14133 					els
 14134 731E 60				rts						; ret
 14135 					eif
 14136 				.endl
 14137
 14138 731F			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 14139
 14140 				; optimize OK (service.pas), line = 2502
 14141
 14142 731F A9 81			lda #$81
 14143 7321 8D 4A A2			sta Y
 14144
 14145 7324			l_2780
 14146 				; --- ForToDoCondition
 14147 7324 AC 4A A2			ldy Y
 14148 7327 C0 A1			cpy #$A1
 14149 7329 B0 6C			jcs l_278E
 14150
 14151 				; optimize OK (service.pas), line = 2505
 14152
 14153 732B A9 48			lda #$48
 14154 732D 79 00 C0			adc adr.ROW,y
 14155 7330 8D BB A0			sta BLITROW.DST
 14156 7333 A9 50			lda #$50
 14157 7335 79 FB C0			adc adr.ROW+251,y
 14158 7338 8D BC A0			sta BLITROW.DST+1
 14159 733B A9 00			lda #$00
 14160 733D 69 00			adc #$00
 14161 733F 8D BD A0			sta BLITROW.DST+2
 14162 7342 A9 00			lda #$00
 14163 7344 69 00			adc #$00
 14164 7346 8D BE A0			sta BLITROW.DST+3
 14165 7349 AD A7 9C			lda PLAYSCREEN.OFS
 14166 734C 18 69 48			add #$48
 14167 734F 85 A1			sta :STACKORIGIN+11
 14168 7351 AD A8 9C			lda PLAYSCREEN.OFS+1
 14169 7354 69 00			adc #$00
 14170 7356 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 14171 7358 AD A9 9C			lda PLAYSCREEN.OFS+2
 14172 735B 69 00			adc #$00
 14173 735D 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 14174 735F AD AA 9C			lda PLAYSCREEN.OFS+3
 14175 7362 69 00			adc #$00
 14176 7364 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 14177 7366 A5 A1			lda :STACKORIGIN+11
 14178 7368 18 79 00 C0			add adr.ROW,y
 14179 736C 8D B7 A0			sta BLITROW.SRC
 14180 736F A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 14181 7371 79 FB C0			adc adr.ROW+251,y
 14182 7374 8D B8 A0			sta BLITROW.SRC+1
 14183 7377 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 14184 7379 69 00			adc #$00
 14185 737B 8D B9 A0			sta BLITROW.SRC+2
 14186 737E A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 14187 7380 69 00			adc #$00
 14188 7382 8D BA A0			sta BLITROW.SRC+3
 14189 7385 A9 58			lda #$58
 14190 7387 8D BF A0			sta BLITROW.SIZE
 14191 738A A9 00			lda #$00
 14192 738C 8D C0 A0			sta BLITROW.SIZE+1
 14193 738F 20 F8 2B			jsr BLITROW
 14194
 14195 				; --- ForToDoEpilog
 14196 7392 EE 4A A2			inc Y
 14197 7395 D0 8D			jne l_2780
 14198 7397			l_278E
 14199
 14200 				; ------------------------------------------------------------
 14201
 14202 = A24A			Y	= DATAORIGIN+$06AE
 14203
 14204 = A24A			@VarData	= Y
 14205 = 0001			@VarDataSize	= 1
 14206
 14207 7397			@exit
 14208 					.ifdef @new
 14209 					lda <@VarData
 14210 					sta :ztmp
 14211 					lda >@VarData
 14212 					ldy #@VarDataSize-1
 14213 					jmp @FreeMem
 14214 					els
 14215 7397 60				rts						; ret
 14216 					eif
 14217 				.endl
 14218
 14219 7398			.local	GAME_OVER					; PROCEDURE
 14220
 14221 				; ------------------------------------------------------------
 14222
 14223 = A24B			X	= DATAORIGIN+$06AF
 14224 = A24D			Y	= DATAORIGIN+$06B1
 14225 = A24F			adr.SC	= [DATAORIGIN+$06B3] .array [21]
 14226 7398			.var SC	= adr.SC .word
 14227
 14228 = A24B			@VarData	= X
 14229 = 0019			@VarDataSize	= 25
 14230
 14231 7398			@exit
 14232 					.ifdef @new
 14233 					lda <@VarData
 14234 					sta :ztmp
 14235 					lda >@VarData
 14236 					ldy #@VarDataSize-1
 14237 					jmp @FreeMem
 14238 					els
 14239 7398 60				rts						; ret
 14240 					eif
 14241 = 7399 4F A2		SC
 14241 				.endl
 14242
 14243 739B			.local	DESTROY_VAUS					; PROCEDURE
 14244
 14245 				; optimize OK (service.pas), line = 2549
 14246
 14247 739B AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 14248
 14249 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2550
 14250
 14251 73CB 20 04 43			jsr MODIFY_VAUS
 14252
 14253 				; optimize OK (service.pas), line = 2552
 14254
 14255 73CE AD 1B 9D			lda VAUS.X
 14256 73D1 8D 9A A1			sta MOVE_VAUS.X
 14257 73D4 A9 00			lda #$00
 14258 73D6 8D 9B A1			sta MOVE_VAUS.X+1
 14259 73D9 AD 1C 9D			lda VAUS.Y
 14260 73DC 8D 9C A1			sta MOVE_VAUS.Y
 14261 73DF A9 00			lda #$00
 14262 73E1 8D 9D A1			sta MOVE_VAUS.Y+1
 14263 73E4 20 11 46			jsr MOVE_VAUS
 14264
 14265 				; optimize OK (service.pas), line = 2554
 14266
 14267 73E7 AD 1B 9D			lda VAUS.X
 14268 73EA 38 E9 04			sub #$04
 14269 73ED 8D 66 A2			sta A
 14270 73F0 A9 00			lda #$00
 14271 73F2 E9 00			sbc #$00
 14272 73F4 8D 67 A2			sta A+1
 14273
 14274 				; optimize OK (service.pas), line = 2555
 14275
 14276 73F7 AD 1C 9D			lda VAUS.Y
 14277 73FA 38 E9 05			sub #$05
 14278 73FD 8D 68 A2			sta B
 14279 7400 A9 00			lda #$00
 14280 7402 E9 00			sbc #$00
 14281 7404 8D 69 A2			sta B+1
 14282
 14283 				; optimize OK (service.pas), line = 2558
 14284
 14285 7407 A9 00			lda #$00
 14286 7409 8D 6A A2			sta W
 14287
 14288 740C			l_27DE
 14289 				; --- ForToDoCondition
 14290 740C AD 6A A2			lda W
 14291 740F C9 07			cmp #$07
 14292 7411 90 03 4C 22 76		jcs l_27EC
 14293
 14294 				; optimize OK (service.pas), line = 2560
 14295
 14296 7416 A9 00			lda #$00
 14297 7418 8D 6C A2			sta Y
 14298
 14299 741B			l_27F5
 14300 				; --- ForToDoCondition
 14301 741B AD 6C A2			lda Y
 14302 741E C9 10			cmp #$10
 14303 7420 90 03 4C 0C 76		jcs l_2803
 14304
 14305 				; optimize OK (service.pas), line = 2562
 14306
 14307 7425 AD CB 9C			lda EXPLOSION.WIDTH
 14308 7428 85 8E			sta :ecx
 14309 742A AD CC 9C			lda EXPLOSION.WIDTH+1
 14310 742D 85 8F			sta :ecx+1
 14311 742F AD 6C A2			lda Y
 14312 7432 85 86			sta :eax
 14313 7434 A9 00			lda #$00
 14314 7436 85 87			sta :eax+1
 14315 					.ifdef fmulinit
 14316 					fmulu_16
 14317 					els
 14318 7438 20 7E 13			imulCX_AL
 14319 					eif
 14320 743B A5 86			lda :eax
 14321 743D 85 9F			sta :STACKORIGIN+9
 14322 743F A5 87			lda :eax+1
 14323 7441 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14324 7443 AD CB 9C			lda EXPLOSION.WIDTH
 14325 7446 85 A1			sta :STACKORIGIN+11
 14326 7448 AD CC 9C			lda EXPLOSION.WIDTH+1
 14327 744B 06 A1			asl :STACKORIGIN+11
 14328 744D 2A				rol @
 14329 744E 06 A1			asl :STACKORIGIN+11
 14330 7450 2A				rol @
 14331 7451 06 A1			asl :STACKORIGIN+11
 14332 7453 2A				rol @
 14333 7454 06 A1			asl :STACKORIGIN+11
 14334 7456 2A				rol @
 14335 7457 85 8F			sta :ecx+1
 14336 7459 A5 A1			lda :STACKORIGIN+11
 14337 745B 85 8E			sta :ecx
 14338 745D AD 6A A2			lda W
 14339 7460 85 86			sta :eax
 14340 7462 A9 00			lda #$00
 14341 7464 85 87			sta :eax+1
 14342 					.ifdef fmulinit
 14343 					fmulu_16
 14344 					els
 14345 7466 20 3A 13			imulCX
 14346 					eif
 14347 7469 A5 86			lda :eax
 14348 746B 18 65 9F			add :STACKORIGIN+9
 14349 746E 8D 64 A2			sta Z
 14350 7471 A5 87			lda :eax+1
 14351 7473 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14352 7475 8D 65 A2			sta Z+1
 14353
 14354 				; optimize OK (service.pas), line = 2563
 14355
 14356 7478 A9 00			lda #$00
 14357 747A 8D 6B A2			sta X
 14358 747D AC CB 9C			ldy EXPLOSION.WIDTH
 14359 7480 88				dey
 14360 7481 8C 85 74			sty @FORTMP_2828_0
 14361
 14362 7484			l_282B
 14363 				; --- ForToDoCondition
 14364 7484 A9 00			lda @FORTMP_2828_0::#$00
 14365 7486 CD 6B A2			cmp X
 14366 7489 B0 03 4C 04 76		jcc l_2839
 14367
 14368 				; optimize FAIL (1, service.pas), line = 2567
 14369
 14370 748E E8				inx
 14371 748F A0 01			ldy #1
 14372 7491 AD 6A A2			lda W
 14373 7494 C9 06			cmp #$06
 14374 7496 F0 01			beq @+
 14375 7498 88				dey
 14376 				@
 14377 7499 94 96			sty :STACKORIGIN,x
 14378 749B AD CF 9C			lda EXPLOSION.OFS
 14379 749E 18 6D 6B A2			add X
 14380 74A2 85 9F			sta :STACKORIGIN+9
 14381 74A4 AD D0 9C			lda EXPLOSION.OFS+1
 14382 74A7 69 00			adc #$00
 14383 74A9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14384 74AB AD D1 9C			lda EXPLOSION.OFS+2
 14385 74AE 69 00			adc #$00
 14386 74B0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14387 74B2 AD D2 9C			lda EXPLOSION.OFS+3
 14388 74B5 69 00			adc #$00
 14389 74B7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14390 74B9 A5 9F			lda :STACKORIGIN+9
 14391 74BB 18 6D 64 A2			add Z
 14392 74BF 8D D1 A0			sta GETBYTE.SRC
 14393 74C2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14394 74C4 6D 65 A2			adc Z+1
 14395 74C7 8D D2 A0			sta GETBYTE.SRC+1
 14396 74CA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14397 74CC 69 00			adc #$00
 14398 74CE 8D D3 A0			sta GETBYTE.SRC+2
 14399 74D1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14400 74D3 69 00			adc #$00
 14401 74D5 8D D4 A0			sta GETBYTE.SRC+3
 14402 74D8 20 E7 2C			jsr GETBYTE
 14403 74DB CA				dex
 14404 74DC A0 01			ldy #1
 14405 74DE AD D5 A0			lda GETBYTE.RESULT
 14406 74E1 F0 01			beq @+
 14407 74E3 88				dey
 14408 				@
 14409 74E4 98				tya
 14410 74E5 15 97			ora :STACKORIGIN+1,x
 14411 74E7 D0 03 4C 79 75		jeq l_2861
 14412
 14413 				; optimize OK (service.pas), line = 2569
 14414
 14415 74EC AD 6B A2			lda X
 14416 74EF 18 6D 66 A2			add A
 14417 74F3 85 9F			sta :STACKORIGIN+9
 14418 74F5 A9 50			lda #$50
 14419 74F7 6D 67 A2			adc A+1
 14420 74FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14421 74FC A9 00			lda #$00
 14422 74FE 69 00			adc #$00
 14423 7500 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14424 7502 A9 00			lda #$00
 14425 7504 69 00			adc #$00
 14426 7506 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14427 7508 AD 6C A2			lda Y
 14428 750B 18 6D 68 A2			add B
 14429 750F A8				tay
 14430 7510 A5 9F			lda :STACKORIGIN+9
 14431 7512 18 79 00 C0			add adr.ROW,y
 14432 7516 8D C7 A0			sta BLITBYTE.DST
 14433 7519 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14434 751B 79 FB C0			adc adr.ROW+251,y
 14435 751E 8D C8 A0			sta BLITBYTE.DST+1
 14436 7521 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14437 7523 69 00			adc #$00
 14438 7525 8D C9 A0			sta BLITBYTE.DST+2
 14439 7528 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14440 752A 69 00			adc #$00
 14441 752C 8D CA A0			sta BLITBYTE.DST+3
 14442 752F AD A7 9C			lda PLAYSCREEN.OFS
 14443 7532 18 6D 6B A2			add X
 14444 7536 85 A0			sta :STACKORIGIN+10
 14445 7538 AD A8 9C			lda PLAYSCREEN.OFS+1
 14446 753B 69 00			adc #$00
 14447 753D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14448 753F AD A9 9C			lda PLAYSCREEN.OFS+2
 14449 7542 69 00			adc #$00
 14450 7544 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14451 7546 AD AA 9C			lda PLAYSCREEN.OFS+3
 14452 7549 69 00			adc #$00
 14453 754B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14454 754D A5 A0			lda :STACKORIGIN+10
 14455 754F 18 6D 66 A2			add A
 14456 7553 85 A0			sta :STACKORIGIN+10
 14457 7555 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14458 7557 6D 67 A2			adc A+1
 14459 755A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14460 755C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14461 755E 69 00			adc #$00
 14462 7560 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14463 7562 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14464 7564 69 00			adc #$00
 14465 7566 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14466 7568 A5 A0			lda :STACKORIGIN+10
 14467 756A 18 79 00 C0			add adr.ROW,y
 14468 756E 8D C3 A0			sta BLITBYTE.SRC
 14469 7571 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14470 7573 79 FB C0			adc adr.ROW+251,y
 14471 7576 4C E8 75			jmp l_289E
 14472 7579			l_2861
 14473
 14474 				; optimize OK (service.pas), line = 2572
 14475
 14476 7579 AD 6B A2			lda X
 14477 757C 18 6D 66 A2			add A
 14478 7580 85 9F			sta :STACKORIGIN+9
 14479 7582 A9 50			lda #$50
 14480 7584 6D 67 A2			adc A+1
 14481 7587 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14482 7589 A9 00			lda #$00
 14483 758B 69 00			adc #$00
 14484 758D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14485 758F A9 00			lda #$00
 14486 7591 69 00			adc #$00
 14487 7593 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14488 7595 AD 6C A2			lda Y
 14489 7598 18 6D 68 A2			add B
 14490 759C A8				tay
 14491 759D A5 9F			lda :STACKORIGIN+9
 14492 759F 18 79 00 C0			add adr.ROW,y
 14493 75A3 8D C7 A0			sta BLITBYTE.DST
 14494 75A6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14495 75A8 79 FB C0			adc adr.ROW+251,y
 14496 75AB 8D C8 A0			sta BLITBYTE.DST+1
 14497 75AE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14498 75B0 69 00			adc #$00
 14499 75B2 8D C9 A0			sta BLITBYTE.DST+2
 14500 75B5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14501 75B7 69 00			adc #$00
 14502 75B9 8D CA A0			sta BLITBYTE.DST+3
 14503 75BC AD CF 9C			lda EXPLOSION.OFS
 14504 75BF 18 6D 6B A2			add X
 14505 75C3 85 A0			sta :STACKORIGIN+10
 14506 75C5 AD D0 9C			lda EXPLOSION.OFS+1
 14507 75C8 69 00			adc #$00
 14508 75CA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14509 75CC AD D1 9C			lda EXPLOSION.OFS+2
 14510 75CF 69 00			adc #$00
 14511 75D1 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14512 75D3 AD D2 9C			lda EXPLOSION.OFS+3
 14513 75D6 69 00			adc #$00
 14514 75D8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14515 75DA A5 A0			lda :STACKORIGIN+10
 14516 75DC 18 6D 64 A2			add Z
 14517 75E0 8D C3 A0			sta BLITBYTE.SRC
 14518 75E3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14519 75E5 6D 65 A2			adc Z+1
 14520 75E8			l_289E
 14521 75E8 8D C4 A0			sta BLITBYTE.SRC+1
 14522 75EB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14523 75ED 69 00			adc #$00
 14524 75EF 8D C5 A0			sta BLITBYTE.SRC+2
 14525 75F2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14526 75F4 69 00			adc #$00
 14527 75F6 8D C6 A0			sta BLITBYTE.SRC+3
 14528 75F9 20 70 2C			jsr BLITBYTE
 14529
 14530 				; --- ForToDoEpilog
 14531 75FC EE 6B A2			inc X
 14532 75FF F0 03 4C 84 74		jne l_282B
 14533 7604			l_2839
 14534
 14535 				; --- ForToDoEpilog
 14536 7604 EE 6C A2			inc Y
 14537 7607 F0 03 4C 1B 74		jne l_27F5
 14538 760C			l_2803
 14539
 14540 				; optimize OK (service.pas), line = 2576
 14541
 14542 760C AD 6A A2			lda W
 14543 760F 8D 87 9C			sta DEATH_SOUND.A
 14544 7612 A9 00			lda #$00
 14545 7614 8D 88 9C			sta DEATH_SOUND.A+1
 14546 7617 20 6A 2A			jsr DEATH_SOUND
 14547
 14548 				; --- ForToDoEpilog
 14549 761A EE 6A A2			inc W
 14550 761D F0 03 4C 0C 74		jne l_27DE
 14551 7622			l_27EC
 14552
 14553 				; optimize OK (service.pas), line = 2580
 14554
 14555 7622 A9 07			lda #$07
 14556 7624 8D 87 9C			sta DEATH_SOUND.A
 14557 7627 A9 00			lda #$00
 14558 7629 8D 88 9C			sta DEATH_SOUND.A+1
 14559 762C 20 6A 2A			jsr DEATH_SOUND
 14560
 14561 				; optimize OK (service.pas), line = 2581
 14562
 14563 762F A9 96			lda #$96
 14564 7631 8D D6 A0			sta MYDELAY.A
 14565 7634 A9 00			lda #$00
 14566 7636 8D D7 A0			sta MYDELAY.A+1
 14567 7639 20 10 2D			jsr MYDELAY
 14568
 14569 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2582
 14570
 14571 763C 20 28 32			jsr DISABLE_LETTER
 14572
 14573 				; ------------------------------------------------------------
 14574
 14575 = A264			Z	= DATAORIGIN+$06C8
 14576 = A266			A	= DATAORIGIN+$06CA
 14577 = A268			B	= DATAORIGIN+$06CC
 14578 = A26A			W	= DATAORIGIN+$06CE
 14579 = A26B			X	= DATAORIGIN+$06CF
 14580 = A26C			Y	= DATAORIGIN+$06D0
 14581
 14582 = A264			@VarData	= Z
 14583 = 0009			@VarDataSize	= 9
 14584
 14585 763F			@exit
 14586 					.ifdef @new
 14587 					lda <@VarData
 14588 					sta :ztmp
 14589 					lda >@VarData
 14590 					ldy #@VarDataSize-1
 14591 					jmp @FreeMem
 14592 					els
 14593 763F 60				rts						; ret
 14594 					eif
 14595 				.endl
 14596
 14597 7640			.local	CREATE_VAUS					; PROCEDURE
 14598
 14599 				; optimize FAIL ('NOSOUND', service.pas), line = 2593
 14600
 14601 7640 20 0F 2D			jsr NOSOUND
 14602
 14603 				; optimize OK (service.pas), line = 2594
 14604
 14605 7643 A9 5B			lda #$5B
 14606 7645 8D 73 A2			sta A
 14607 7648 A9 00			lda #$00
 14608 764A 8D 74 A2			sta A+1
 14609
 14610 				; optimize OK (service.pas), line = 2595
 14611
 14612 764D A9 B3			lda #$B3
 14613 764F 8D 75 A2			sta B
 14614 7652 A9 00			lda #$00
 14615 7654 8D 76 A2			sta B+1
 14616
 14617 				; optimize OK (service.pas), line = 2597
 14618
 14619 7657 A9 0B			lda #$0B
 14620 7659 8D 70 A2			sta W
 14621
 14622 765C			l_28F2
 14623 				; --- ForToDoCondition
 14624 765C A9 00			lda #$00
 14625 765E 8D 6F A2			sta Y
 14626
 14627 7661			l_2909
 14628 				; --- ForToDoCondition
 14629 7661 AD 6F A2			lda Y
 14630 7664 C9 10			cmp #$10
 14631 7666 90 03 4C 3F 78		jcs l_2917
 14632
 14633 				; optimize OK (service.pas), line = 2601
 14634
 14635 766B AD D3 9C			lda NEWVAUS.WIDTH
 14636 766E 85 8E			sta :ecx
 14637 7670 AD D4 9C			lda NEWVAUS.WIDTH+1
 14638 7673 85 8F			sta :ecx+1
 14639 7675 AD 6F A2			lda Y
 14640 7678 85 86			sta :eax
 14641 767A A9 00			lda #$00
 14642 767C 85 87			sta :eax+1
 14643 					.ifdef fmulinit
 14644 					fmulu_16
 14645 					els
 14646 767E 20 7E 13			imulCX_AL
 14647 					eif
 14648 7681 A5 86			lda :eax
 14649 7683 85 9F			sta :STACKORIGIN+9
 14650 7685 A5 87			lda :eax+1
 14651 7687 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14652 7689 A9 10			lda #$10
 14653 768B 85 8E			sta :ecx
 14654 768D A9 00			lda #$00
 14655 768F 85 8F			sta :ecx+1
 14656 7691 AD D3 9C			lda NEWVAUS.WIDTH
 14657 7694 85 86			sta :eax
 14658 7696 AD D4 9C			lda NEWVAUS.WIDTH+1
 14659 7699 85 87			sta :eax+1
 14660 					.ifdef fmulinit
 14661 					fmulu_16
 14662 					els
 14663 769B 20 3A 13			imulCX
 14664 					eif
 14665 769E A5 86			lda :eax
 14666 76A0 85 8E			sta :ecx
 14667 76A2 A5 87			lda :eax+1
 14668 76A4 85 8F			sta :ecx+1
 14669 76A6 AD 70 A2			lda W
 14670 76A9 85 86			sta :eax
 14671 76AB A9 00			lda #$00
 14672 76AD 85 87			sta :eax+1
 14673 					.ifdef fmulinit
 14674 					fmulu_16
 14675 					els
 14676 76AF 20 7E 13			imulCX_AL
 14677 					eif
 14678 76B2 A5 86			lda :eax
 14679 76B4 18 65 9F			add :STACKORIGIN+9
 14680 76B7 8D 71 A2			sta Z
 14681 76BA A5 87			lda :eax+1
 14682 76BC 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14683 76BE 8D 72 A2			sta Z+1
 14684
 14685 				; optimize OK (service.pas), line = 2602
 14686
 14687 76C1 A9 00			lda #$00
 14688 76C3 8D 6E A2			sta X
 14689 76C6 AC D3 9C			ldy NEWVAUS.WIDTH
 14690 76C9 88				dey
 14691 76CA 8C CE 76			sty @FORTMP_293C_0
 14692
 14693 76CD			l_293F
 14694 				; --- ForToDoCondition
 14695 76CD A9 00			lda @FORTMP_293C_0::#$00
 14696 76CF CD 6E A2			cmp X
 14697 76D2 B0 03 4C 37 78		jcc l_294D
 14698
 14699 				; optimize OK (service.pas), line = 2604
 14700
 14701 76D7 AD D7 9C			lda NEWVAUS.OFS
 14702 76DA 18 6D 6E A2			add X
 14703 76DE 85 9F			sta :STACKORIGIN+9
 14704 76E0 AD D8 9C			lda NEWVAUS.OFS+1
 14705 76E3 69 00			adc #$00
 14706 76E5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14707 76E7 AD D9 9C			lda NEWVAUS.OFS+2
 14708 76EA 69 00			adc #$00
 14709 76EC 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14710 76EE AD DA 9C			lda NEWVAUS.OFS+3
 14711 76F1 69 00			adc #$00
 14712 76F3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14713 76F5 A5 9F			lda :STACKORIGIN+9
 14714 76F7 18 6D 71 A2			add Z
 14715 76FB 8D D1 A0			sta GETBYTE.SRC
 14716 76FE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14717 7700 6D 72 A2			adc Z+1
 14718 7703 8D D2 A0			sta GETBYTE.SRC+1
 14719 7706 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14720 7708 69 00			adc #$00
 14721 770A 8D D3 A0			sta GETBYTE.SRC+2
 14722 770D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14723 770F 69 00			adc #$00
 14724 7711 8D D4 A0			sta GETBYTE.SRC+3
 14725 7714 20 E7 2C			jsr GETBYTE
 14726 7717 AD D5 A0			lda GETBYTE.RESULT
 14727 771A F0 03 4C AC 77		jne l_2969
 14728
 14729 				; optimize OK (service.pas), line = 2606
 14730
 14731 771F AD 6E A2			lda X
 14732 7722 18 6D 73 A2			add A
 14733 7726 85 9F			sta :STACKORIGIN+9
 14734 7728 A9 50			lda #$50
 14735 772A 6D 74 A2			adc A+1
 14736 772D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14737 772F A9 00			lda #$00
 14738 7731 69 00			adc #$00
 14739 7733 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14740 7735 A9 00			lda #$00
 14741 7737 69 00			adc #$00
 14742 7739 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14743 773B AD 6F A2			lda Y
 14744 773E 18 6D 75 A2			add B
 14745 7742 A8				tay
 14746 7743 A5 9F			lda :STACKORIGIN+9
 14747 7745 18 79 00 C0			add adr.ROW,y
 14748 7749 8D C7 A0			sta BLITBYTE.DST
 14749 774C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14750 774E 79 FB C0			adc adr.ROW+251,y
 14751 7751 8D C8 A0			sta BLITBYTE.DST+1
 14752 7754 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14753 7756 69 00			adc #$00
 14754 7758 8D C9 A0			sta BLITBYTE.DST+2
 14755 775B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14756 775D 69 00			adc #$00
 14757 775F 8D CA A0			sta BLITBYTE.DST+3
 14758 7762 AD A7 9C			lda PLAYSCREEN.OFS
 14759 7765 18 6D 6E A2			add X
 14760 7769 85 A0			sta :STACKORIGIN+10
 14761 776B AD A8 9C			lda PLAYSCREEN.OFS+1
 14762 776E 69 00			adc #$00
 14763 7770 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14764 7772 AD A9 9C			lda PLAYSCREEN.OFS+2
 14765 7775 69 00			adc #$00
 14766 7777 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14767 7779 AD AA 9C			lda PLAYSCREEN.OFS+3
 14768 777C 69 00			adc #$00
 14769 777E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14770 7780 A5 A0			lda :STACKORIGIN+10
 14771 7782 18 6D 73 A2			add A
 14772 7786 85 A0			sta :STACKORIGIN+10
 14773 7788 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14774 778A 6D 74 A2			adc A+1
 14775 778D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14776 778F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14777 7791 69 00			adc #$00
 14778 7793 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14779 7795 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14780 7797 69 00			adc #$00
 14781 7799 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14782 779B A5 A0			lda :STACKORIGIN+10
 14783 779D 18 79 00 C0			add adr.ROW,y
 14784 77A1 8D C3 A0			sta BLITBYTE.SRC
 14785 77A4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14786 77A6 79 FB C0			adc adr.ROW+251,y
 14787 77A9 4C 1B 78			jmp l_29A6
 14788 77AC			l_2969
 14789
 14790 				; optimize OK (service.pas), line = 2609
 14791
 14792 77AC AD 6E A2			lda X
 14793 77AF 18 6D 73 A2			add A
 14794 77B3 85 9F			sta :STACKORIGIN+9
 14795 77B5 A9 50			lda #$50
 14796 77B7 6D 74 A2			adc A+1
 14797 77BA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14798 77BC A9 00			lda #$00
 14799 77BE 69 00			adc #$00
 14800 77C0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14801 77C2 A9 00			lda #$00
 14802 77C4 69 00			adc #$00
 14803 77C6 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14804 77C8 AD 6F A2			lda Y
 14805 77CB 18 6D 75 A2			add B
 14806 77CF A8				tay
 14807 77D0 A5 9F			lda :STACKORIGIN+9
 14808 77D2 18 79 00 C0			add adr.ROW,y
 14809 77D6 8D C7 A0			sta BLITBYTE.DST
 14810 77D9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14811 77DB 79 FB C0			adc adr.ROW+251,y
 14812 77DE 8D C8 A0			sta BLITBYTE.DST+1
 14813 77E1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14814 77E3 69 00			adc #$00
 14815 77E5 8D C9 A0			sta BLITBYTE.DST+2
 14816 77E8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14817 77EA 69 00			adc #$00
 14818 77EC 8D CA A0			sta BLITBYTE.DST+3
 14819 77EF AD D7 9C			lda NEWVAUS.OFS
 14820 77F2 18 6D 6E A2			add X
 14821 77F6 85 A0			sta :STACKORIGIN+10
 14822 77F8 AD D8 9C			lda NEWVAUS.OFS+1
 14823 77FB 69 00			adc #$00
 14824 77FD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14825 77FF AD D9 9C			lda NEWVAUS.OFS+2
 14826 7802 69 00			adc #$00
 14827 7804 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14828 7806 AD DA 9C			lda NEWVAUS.OFS+3
 14829 7809 69 00			adc #$00
 14830 780B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14831 780D A5 A0			lda :STACKORIGIN+10
 14832 780F 18 6D 71 A2			add Z
 14833 7813 8D C3 A0			sta BLITBYTE.SRC
 14834 7816 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14835 7818 6D 72 A2			adc Z+1
 14836 781B			l_29A6
 14837 781B 8D C4 A0			sta BLITBYTE.SRC+1
 14838 781E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14839 7820 69 00			adc #$00
 14840 7822 8D C5 A0			sta BLITBYTE.SRC+2
 14841 7825 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14842 7827 69 00			adc #$00
 14843 7829 8D C6 A0			sta BLITBYTE.SRC+3
 14844 782C 20 70 2C			jsr BLITBYTE
 14845
 14846 				; --- ForToDoEpilog
 14847 782F EE 6E A2			inc X
 14848 7832 F0 03 4C CD 76		jne l_293F
 14849 7837			l_294D
 14850
 14851 				; --- ForToDoEpilog
 14852 7837 EE 6F A2			inc Y
 14853 783A F0 03 4C 61 76		jne l_2909
 14854 783F			l_2917
 14855
 14856 				; optimize OK (service.pas), line = 2613
 14857
 14858 783F A9 01			lda #$01
 14859 7841 8D D6 A0			sta MYDELAY.A
 14860 7844 A9 00			lda #$00
 14861 7846 8D D7 A0			sta MYDELAY.A+1
 14862 7849 20 10 2D			jsr MYDELAY
 14863
 14864 				; --- ForToDoEpilog
 14865 784C CE 70 A2			dec W
 14866 784F 30 03 4C 5C 76		jpl l_28F2
 14867 7854			l_2900
 14868
 14869 				; ------------------------------------------------------------
 14870
 14871 = A26E			X	= DATAORIGIN+$06D2
 14872 = A26F			Y	= DATAORIGIN+$06D3
 14873 = A270			W	= DATAORIGIN+$06D4
 14874 = A271			Z	= DATAORIGIN+$06D5
 14875 = A273			A	= DATAORIGIN+$06D7
 14876 = A275			B	= DATAORIGIN+$06D9
 14877
 14878 = A26E			@VarData	= X
 14879 = 0009			@VarDataSize	= 9
 14880
 14881 7854			@exit
 14882 					.ifdef @new
 14883 					lda <@VarData
 14884 					sta :ztmp
 14885 					lda >@VarData
 14886 					ldy #@VarDataSize-1
 14887 					jmp @FreeMem
 14888 					els
 14889 7854 60				rts						; ret
 14890 					eif
 14891 				.endl
 14892
 14893 7855			.local	PUT_DIGIT					; PROCEDURE
 14894
 14895 				; optimize OK (service.pas), line = 2623
 14896
 14897 7855 A9 DE			lda #$DE
 14898 7857 8D 80 A2			sta A
 14899
 14900 				; optimize OK (service.pas), line = 2647
 14901
 14902 785A AC 7C A2			ldy NUM
 14903 785D B9 96 10			lda adr.DIGITS,y
 14904 7860 29 01			and #$01
 14905 7862 C9 01			cmp #$01
 14906 7864 D0 05			jne l_29FD
 14907 7866 A9 DF			lda #$DF
 14908 7868 8D 80 A2			sta A
 14909 786B			l_29FD
 14910
 14911 				; optimize OK (service.pas), line = 2648
 14912
 14913 786B A9 01			lda #$01
 14914 786D 8D 7E A2			sta X
 14915
 14916 7870			l_2A0D
 14917 				; --- ForToDoCondition
 14918 7870 AD 7E A2			lda X
 14919 7873 C9 05			cmp #$05
 14920 7875 B0 63			jcs l_2A1B
 14921
 14922 				; optimize OK (service.pas), line = 2650
 14923
 14924 7877 AD 78 A2			lda PX
 14925 787A 85 A0			sta :STACKORIGIN+10
 14926 787C A9 50			lda #$50
 14927 787E 18 6D 79 A2			add PX+1
 14928 7882 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14929 7884 A9 00			lda #$00
 14930 7886 69 00			adc #$00
 14931 7888 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14932 788A A9 00			lda #$00
 14933 788C 69 00			adc #$00
 14934 788E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14935 7890 A5 A0			lda :STACKORIGIN+10
 14936 7892 18 6D 7E A2			add X
 14937 7896 85 A0			sta :STACKORIGIN+10
 14938 7898 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14939 789A 69 00			adc #$00
 14940 789C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14941 789E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14942 78A0 69 00			adc #$00
 14943 78A2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14944 78A4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14945 78A6 69 00			adc #$00
 14946 78A8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14947 78AA AC 7A A2			ldy PY
 14948 78AD A5 A0			lda :STACKORIGIN+10
 14949 78AF 18 79 00 C0			add adr.ROW,y
 14950 78B3 8D CC A0			sta PUTBYTE.DST
 14951 78B6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14952 78B8 79 FB C0			adc adr.ROW+251,y
 14953 78BB 8D CD A0			sta PUTBYTE.DST+1
 14954 78BE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14955 78C0 69 00			adc #$00
 14956 78C2 8D CE A0			sta PUTBYTE.DST+2
 14957 78C5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14958 78C7 69 00			adc #$00
 14959 78C9 8D CF A0			sta PUTBYTE.DST+3
 14960 78CC AD 80 A2			lda A
 14961 78CF 8D D0 A0			sta PUTBYTE.V
 14962 78D2 20 BF 2C			jsr PUTBYTE
 14963
 14964 				; --- ForToDoEpilog
 14965 78D5 EE 7E A2			inc X
 14966 78D8 D0 96			jne l_2A0D
 14967 78DA			l_2A1B
 14968
 14969 				; optimize OK (service.pas), line = 2654
 14970
 14971 78DA A9 DE			lda #$DE
 14972 78DC 8D 80 A2			sta A
 14973
 14974 				; optimize OK (service.pas), line = 2655
 14975
 14976 78DF AC 7C A2			ldy NUM
 14977 78E2 B9 96 10			lda adr.DIGITS,y
 14978 78E5 29 02			and #$02
 14979 78E7 C9 02			cmp #$02
 14980 78E9 D0 05			jne l_2A53
 14981 78EB A9 DF			lda #$DF
 14982 78ED 8D 80 A2			sta A
 14983 78F0			l_2A53
 14984
 14985 				; optimize OK (service.pas), line = 2656
 14986
 14987 78F0 A9 01			lda #$01
 14988 78F2 8D 7E A2			sta X
 14989
 14990 78F5			l_2A63
 14991 				; --- ForToDoCondition
 14992 78F5 AD 7E A2			lda X
 14993 78F8 C9 05			cmp #$05
 14994 78FA B0 63			jcs l_2A71
 14995
 14996 				; optimize OK (service.pas), line = 2658
 14997
 14998 78FC AD 78 A2			lda PX
 14999 78FF 85 A0			sta :STACKORIGIN+10
 15000 7901 A9 50			lda #$50
 15001 7903 18 6D 79 A2			add PX+1
 15002 7907 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15003 7909 A9 00			lda #$00
 15004 790B 69 00			adc #$00
 15005 790D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15006 790F A9 00			lda #$00
 15007 7911 69 00			adc #$00
 15008 7913 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15009 7915 A5 A0			lda :STACKORIGIN+10
 15010 7917 18 6D 7E A2			add X
 15011 791B 85 A0			sta :STACKORIGIN+10
 15012 791D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15013 791F 69 00			adc #$00
 15014 7921 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15015 7923 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15016 7925 69 00			adc #$00
 15017 7927 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15018 7929 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15019 792B 69 00			adc #$00
 15020 792D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15021 792F AC 7A A2			ldy PY
 15022 7932 A5 A0			lda :STACKORIGIN+10
 15023 7934 18 79 05 C0			add adr.ROW+$05,y
 15024 7938 8D CC A0			sta PUTBYTE.DST
 15025 793B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15026 793D 79 00 C1			adc adr.ROW+251+$05,y
 15027 7940 8D CD A0			sta PUTBYTE.DST+1
 15028 7943 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15029 7945 69 00			adc #$00
 15030 7947 8D CE A0			sta PUTBYTE.DST+2
 15031 794A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15032 794C 69 00			adc #$00
 15033 794E 8D CF A0			sta PUTBYTE.DST+3
 15034 7951 AD 80 A2			lda A
 15035 7954 8D D0 A0			sta PUTBYTE.V
 15036 7957 20 BF 2C			jsr PUTBYTE
 15037
 15038 				; --- ForToDoEpilog
 15039 795A EE 7E A2			inc X
 15040 795D D0 96			jne l_2A63
 15041 795F			l_2A71
 15042
 15043 				; optimize OK (service.pas), line = 2662
 15044
 15045 795F A9 DE			lda #$DE
 15046 7961 8D 80 A2			sta A
 15047
 15048 				; optimize OK (service.pas), line = 2663
 15049
 15050 7964 AC 7C A2			ldy NUM
 15051 7967 B9 96 10			lda adr.DIGITS,y
 15052 796A 29 04			and #$04
 15053 796C C9 04			cmp #$04
 15054 796E D0 05			jne l_2AAD
 15055 7970 A9 DF			lda #$DF
 15056 7972 8D 80 A2			sta A
 15057 7975			l_2AAD
 15058
 15059 				; optimize OK (service.pas), line = 2664
 15060
 15061 7975 A9 01			lda #$01
 15062 7977 8D 7E A2			sta X
 15063
 15064 797A			l_2ABD
 15065 				; --- ForToDoCondition
 15066 797A AD 7E A2			lda X
 15067 797D C9 05			cmp #$05
 15068 797F B0 63			jcs l_2ACB
 15069
 15070 				; optimize OK (service.pas), line = 2666
 15071
 15072 7981 AD 78 A2			lda PX
 15073 7984 85 A0			sta :STACKORIGIN+10
 15074 7986 A9 50			lda #$50
 15075 7988 18 6D 79 A2			add PX+1
 15076 798C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15077 798E A9 00			lda #$00
 15078 7990 69 00			adc #$00
 15079 7992 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15080 7994 A9 00			lda #$00
 15081 7996 69 00			adc #$00
 15082 7998 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15083 799A A5 A0			lda :STACKORIGIN+10
 15084 799C 18 6D 7E A2			add X
 15085 79A0 85 A0			sta :STACKORIGIN+10
 15086 79A2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15087 79A4 69 00			adc #$00
 15088 79A6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15089 79A8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15090 79AA 69 00			adc #$00
 15091 79AC 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15092 79AE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15093 79B0 69 00			adc #$00
 15094 79B2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15095 79B4 AC 7A A2			ldy PY
 15096 79B7 A5 A0			lda :STACKORIGIN+10
 15097 79B9 18 79 0A C0			add adr.ROW+$0A,y
 15098 79BD 8D CC A0			sta PUTBYTE.DST
 15099 79C0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15100 79C2 79 05 C1			adc adr.ROW+251+$0A,y
 15101 79C5 8D CD A0			sta PUTBYTE.DST+1
 15102 79C8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15103 79CA 69 00			adc #$00
 15104 79CC 8D CE A0			sta PUTBYTE.DST+2
 15105 79CF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15106 79D1 69 00			adc #$00
 15107 79D3 8D CF A0			sta PUTBYTE.DST+3
 15108 79D6 AD 80 A2			lda A
 15109 79D9 8D D0 A0			sta PUTBYTE.V
 15110 79DC 20 BF 2C			jsr PUTBYTE
 15111
 15112 				; --- ForToDoEpilog
 15113 79DF EE 7E A2			inc X
 15114 79E2 D0 96			jne l_2ABD
 15115 79E4			l_2ACB
 15116
 15117 				; optimize OK (service.pas), line = 2669
 15118
 15119 79E4 A9 DE			lda #$DE
 15120 79E6 8D 80 A2			sta A
 15121
 15122 				; optimize OK (service.pas), line = 2670
 15123
 15124 79E9 AC 7C A2			ldy NUM
 15125 79EC B9 96 10			lda adr.DIGITS,y
 15126 79EF 29 08			and #$08
 15127 79F1 C9 08			cmp #$08
 15128 79F3 D0 05			jne l_2B07
 15129 79F5 A9 DF			lda #$DF
 15130 79F7 8D 80 A2			sta A
 15131 79FA			l_2B07
 15132
 15133 				; optimize OK (service.pas), line = 2671
 15134
 15135 79FA A9 01			lda #$01
 15136 79FC 8D 7F A2			sta Y
 15137
 15138 79FF			l_2B17
 15139 				; --- ForToDoCondition
 15140 79FF AD 7F A2			lda Y
 15141 7A02 C9 05			cmp #$05
 15142 7A04 B0 4E			jcs l_2B25
 15143
 15144 				; optimize OK (service.pas), line = 2673
 15145
 15146 7A06 AD 78 A2			lda PX
 15147 7A09 85 A0			sta :STACKORIGIN+10
 15148 7A0B A9 50			lda #$50
 15149 7A0D 18 6D 79 A2			add PX+1
 15150 7A11 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15151 7A13 A9 00			lda #$00
 15152 7A15 69 00			adc #$00
 15153 7A17 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15154 7A19 A9 00			lda #$00
 15155 7A1B 69 00			adc #$00
 15156 7A1D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15157 7A1F AD 7A A2			lda PY
 15158 7A22 18 6D 7F A2			add Y
 15159 7A26 A8				tay
 15160 7A27 A5 A0			lda :STACKORIGIN+10
 15161 7A29 18 79 00 C0			add adr.ROW,y
 15162 7A2D 8D CC A0			sta PUTBYTE.DST
 15163 7A30 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15164 7A32 79 FB C0			adc adr.ROW+251,y
 15165 7A35 8D CD A0			sta PUTBYTE.DST+1
 15166 7A38 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15167 7A3A 69 00			adc #$00
 15168 7A3C 8D CE A0			sta PUTBYTE.DST+2
 15169 7A3F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15170 7A41 69 00			adc #$00
 15171 7A43 8D CF A0			sta PUTBYTE.DST+3
 15172 7A46 AD 80 A2			lda A
 15173 7A49 8D D0 A0			sta PUTBYTE.V
 15174 7A4C 20 BF 2C			jsr PUTBYTE
 15175
 15176 				; --- ForToDoEpilog
 15177 7A4F EE 7F A2			inc Y
 15178 7A52 D0 AB			jne l_2B17
 15179 7A54			l_2B25
 15180
 15181 				; optimize OK (service.pas), line = 2676
 15182
 15183 7A54 A9 DE			lda #$DE
 15184 7A56 8D 80 A2			sta A
 15185
 15186 				; optimize OK (service.pas), line = 2677
 15187
 15188 7A59 AC 7C A2			ldy NUM
 15189 7A5C B9 96 10			lda adr.DIGITS,y
 15190 7A5F 29 10			and #$10
 15191 7A61 C9 10			cmp #$10
 15192 7A63 D0 05			jne l_2B5D
 15193 7A65 A9 DF			lda #$DF
 15194 7A67 8D 80 A2			sta A
 15195 7A6A			l_2B5D
 15196
 15197 				; optimize OK (service.pas), line = 2678
 15198
 15199 7A6A A9 01			lda #$01
 15200 7A6C 8D 7F A2			sta Y
 15201
 15202 7A6F			l_2B6D
 15203 				; --- ForToDoCondition
 15204 7A6F AD 7F A2			lda Y
 15205 7A72 C9 05			cmp #$05
 15206 7A74 B0 4E			jcs l_2B7B
 15207
 15208 				; optimize OK (service.pas), line = 2680
 15209
 15210 7A76 AD 78 A2			lda PX
 15211 7A79 85 A0			sta :STACKORIGIN+10
 15212 7A7B A9 50			lda #$50
 15213 7A7D 18 6D 79 A2			add PX+1
 15214 7A81 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15215 7A83 A9 00			lda #$00
 15216 7A85 69 00			adc #$00
 15217 7A87 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15218 7A89 A9 00			lda #$00
 15219 7A8B 69 00			adc #$00
 15220 7A8D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15221 7A8F AD 7A A2			lda PY
 15222 7A92 18 6D 7F A2			add Y
 15223 7A96 A8				tay
 15224 7A97 A5 A0			lda :STACKORIGIN+10
 15225 7A99 18 79 05 C0			add adr.ROW+$05,y
 15226 7A9D 8D CC A0			sta PUTBYTE.DST
 15227 7AA0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15228 7AA2 79 00 C1			adc adr.ROW+251+$05,y
 15229 7AA5 8D CD A0			sta PUTBYTE.DST+1
 15230 7AA8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15231 7AAA 69 00			adc #$00
 15232 7AAC 8D CE A0			sta PUTBYTE.DST+2
 15233 7AAF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15234 7AB1 69 00			adc #$00
 15235 7AB3 8D CF A0			sta PUTBYTE.DST+3
 15236 7AB6 AD 80 A2			lda A
 15237 7AB9 8D D0 A0			sta PUTBYTE.V
 15238 7ABC 20 BF 2C			jsr PUTBYTE
 15239
 15240 				; --- ForToDoEpilog
 15241 7ABF EE 7F A2			inc Y
 15242 7AC2 D0 AB			jne l_2B6D
 15243 7AC4			l_2B7B
 15244
 15245 				; optimize OK (service.pas), line = 2683
 15246
 15247 7AC4 A9 DE			lda #$DE
 15248 7AC6 8D 80 A2			sta A
 15249
 15250 				; optimize OK (service.pas), line = 2684
 15251
 15252 7AC9 AC 7C A2			ldy NUM
 15253 7ACC B9 96 10			lda adr.DIGITS,y
 15254 7ACF 29 20			and #$20
 15255 7AD1 C9 20			cmp #$20
 15256 7AD3 D0 05			jne l_2BB7
 15257 7AD5 A9 DF			lda #$DF
 15258 7AD7 8D 80 A2			sta A
 15259 7ADA			l_2BB7
 15260
 15261 				; optimize OK (service.pas), line = 2685
 15262
 15263 7ADA A9 01			lda #$01
 15264 7ADC 8D 7F A2			sta Y
 15265
 15266 7ADF			l_2BC7
 15267 				; --- ForToDoCondition
 15268 7ADF AD 7F A2			lda Y
 15269 7AE2 C9 05			cmp #$05
 15270 7AE4 B0 4F			jcs l_2BD5
 15271
 15272 				; optimize OK (service.pas), line = 2687
 15273
 15274 7AE6 A9 05			lda #$05
 15275 7AE8 6D 78 A2			adc PX
 15276 7AEB 85 A0			sta :STACKORIGIN+10
 15277 7AED A9 50			lda #$50
 15278 7AEF 6D 79 A2			adc PX+1
 15279 7AF2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15280 7AF4 A9 00			lda #$00
 15281 7AF6 69 00			adc #$00
 15282 7AF8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15283 7AFA A9 00			lda #$00
 15284 7AFC 69 00			adc #$00
 15285 7AFE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15286 7B00 AD 7A A2			lda PY
 15287 7B03 18 6D 7F A2			add Y
 15288 7B07 A8				tay
 15289 7B08 A5 A0			lda :STACKORIGIN+10
 15290 7B0A 18 79 00 C0			add adr.ROW,y
 15291 7B0E 8D CC A0			sta PUTBYTE.DST
 15292 7B11 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15293 7B13 79 FB C0			adc adr.ROW+251,y
 15294 7B16 8D CD A0			sta PUTBYTE.DST+1
 15295 7B19 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15296 7B1B 69 00			adc #$00
 15297 7B1D 8D CE A0			sta PUTBYTE.DST+2
 15298 7B20 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15299 7B22 69 00			adc #$00
 15300 7B24 8D CF A0			sta PUTBYTE.DST+3
 15301 7B27 AD 80 A2			lda A
 15302 7B2A 8D D0 A0			sta PUTBYTE.V
 15303 7B2D 20 BF 2C			jsr PUTBYTE
 15304
 15305 				; --- ForToDoEpilog
 15306 7B30 EE 7F A2			inc Y
 15307 7B33 D0 AA			jne l_2BC7
 15308 7B35			l_2BD5
 15309
 15310 				; optimize OK (service.pas), line = 2690
 15311
 15312 7B35 A9 DE			lda #$DE
 15313 7B37 8D 80 A2			sta A
 15314
 15315 				; optimize OK (service.pas), line = 2691
 15316
 15317 7B3A AC 7C A2			ldy NUM
 15318 7B3D B9 96 10			lda adr.DIGITS,y
 15319 7B40 29 40			and #$40
 15320 7B42 C9 40			cmp #$40
 15321 7B44 D0 05			jne l_2C11
 15322 7B46 A9 DF			lda #$DF
 15323 7B48 8D 80 A2			sta A
 15324 7B4B			l_2C11
 15325
 15326 				; optimize OK (service.pas), line = 2692
 15327
 15328 7B4B A9 01			lda #$01
 15329 7B4D 8D 7F A2			sta Y
 15330
 15331 7B50			l_2C21
 15332 				; --- ForToDoCondition
 15333 7B50 AD 7F A2			lda Y
 15334 7B53 C9 05			cmp #$05
 15335 7B55 B0 4F			jcs l_2C2F
 15336
 15337 				; optimize OK (service.pas), line = 2694
 15338
 15339 7B57 A9 05			lda #$05
 15340 7B59 6D 78 A2			adc PX
 15341 7B5C 85 A0			sta :STACKORIGIN+10
 15342 7B5E A9 50			lda #$50
 15343 7B60 6D 79 A2			adc PX+1
 15344 7B63 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15345 7B65 A9 00			lda #$00
 15346 7B67 69 00			adc #$00
 15347 7B69 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15348 7B6B A9 00			lda #$00
 15349 7B6D 69 00			adc #$00
 15350 7B6F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15351 7B71 AD 7A A2			lda PY
 15352 7B74 18 6D 7F A2			add Y
 15353 7B78 A8				tay
 15354 7B79 A5 A0			lda :STACKORIGIN+10
 15355 7B7B 18 79 05 C0			add adr.ROW+$05,y
 15356 7B7F 8D CC A0			sta PUTBYTE.DST
 15357 7B82 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15358 7B84 79 00 C1			adc adr.ROW+251+$05,y
 15359 7B87 8D CD A0			sta PUTBYTE.DST+1
 15360 7B8A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15361 7B8C 69 00			adc #$00
 15362 7B8E 8D CE A0			sta PUTBYTE.DST+2
 15363 7B91 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15364 7B93 69 00			adc #$00
 15365 7B95 8D CF A0			sta PUTBYTE.DST+3
 15366 7B98 AD 80 A2			lda A
 15367 7B9B 8D D0 A0			sta PUTBYTE.V
 15368 7B9E 20 BF 2C			jsr PUTBYTE
 15369
 15370 				; --- ForToDoEpilog
 15371 7BA1 EE 7F A2			inc Y
 15372 7BA4 D0 AA			jne l_2C21
 15373 7BA6			l_2C2F
 15374
 15375 				; ------------------------------------------------------------
 15376
 15377 = A278			PX	= DATAORIGIN+$06DC
 15378 = A27A			PY	= DATAORIGIN+$06DE
 15379 = A27C			NUM	= DATAORIGIN+$06E0
 15380 = A27E			X	= DATAORIGIN+$06E2
 15381 = A27F			Y	= DATAORIGIN+$06E3
 15382 = A280			A	= DATAORIGIN+$06E4
 15383
 15384 = A278			@VarData	= PX
 15385 = 0009			@VarDataSize	= 9
 15386
 15387 7BA6			@exit
 15388 					.ifdef @new
 15389 					lda <@VarData
 15390 					sta :ztmp
 15391 					lda >@VarData
 15392 					ldy #@VarDataSize-1
 15393 					jmp @FreeMem
 15394 					els
 15395 7BA6 60				rts						; ret
 15396 					eif
 15397 				.endl
 15398
 15399 7BA7			.local	WRITE_SCORE					; PROCEDURE
 15400
 15401 				; optimize OK (service.pas), line = 2705
 15402
 15403 7BA7 A9 00			lda #$00
 15404 7BA9 8D 8D A2			sta F
 15405
 15406 				; optimize OK (service.pas), line = 2710
 15407
 15408 7BAC A9 A0			lda #$A0
 15409 7BAE 85 8E			sta @INTEGER.DIV.B
 15410 7BB0 A9 86			lda #$86
 15411 7BB2 85 8F			sta @INTEGER.DIV.B+1
 15412 7BB4 A9 01			lda #$01
 15413 7BB6 85 90			sta @INTEGER.DIV.B+2
 15414 7BB8 A9 00			lda #$00
 15415 7BBA 85 91			sta @INTEGER.DIV.B+3
 15416 7BBC AD 85 A2			lda SC
 15417 7BBF 85 86			sta @INTEGER.DIV.A
 15418 7BC1 AD 86 A2			lda SC+1
 15419 7BC4 85 87			sta @INTEGER.DIV.A+1
 15420 7BC6 AD 87 A2			lda SC+2
 15421 7BC9 85 88			sta @INTEGER.DIV.A+2
 15422 7BCB AD 88 A2			lda SC+3
 15423 7BCE 85 89			sta @INTEGER.DIV.A+3
 15424 7BD0 20 A2 12			jsr @INTEGER.DIV
 15425 7BD3 A9 0A			lda #$0A
 15426 7BD5 85 8E			sta @INTEGER.MOD.B
 15427 7BD7 A9 00			lda #$00
 15428 7BD9 85 8F			sta @INTEGER.MOD.B+1
 15429 7BDB 85 90			sta @INTEGER.MOD.B+2
 15430 7BDD 85 91			sta @INTEGER.MOD.B+3
 15431 7BDF 20 BF 12			jsr @INTEGER.MOD
 15432 7BE2 A5 8A			lda @INTEGER.MOD.RESULT
 15433 7BE4 8D 89 A2			sta N1
 15434 7BE7 A5 8B			lda @INTEGER.MOD.RESULT+1
 15435 7BE9 8D 8A A2			sta N1+1
 15436 7BEC A5 8C			lda @INTEGER.MOD.RESULT+2
 15437 7BEE 8D 8B A2			sta N1+2
 15438 7BF1 A5 8D			lda @INTEGER.MOD.RESULT+3
 15439 7BF3 8D 8C A2			sta N1+3
 15440
 15441 				; optimize OK (service.pas), line = 2711
 15442
 15443 7BF6 30 10			jmi l_2C77
 15444 7BF8 0D 8B A2			ora N1+2
 15445 7BFB 0D 8A A2			ora N1+1
 15446 7BFE 0D 89 A2			ora N1
 15447 7C01 F0 05			jeq l_2C77
 15448 7C03 A9 01			lda #$01
 15449 7C05 8D 8D A2			sta F
 15450 7C08			l_2C77
 15451
 15452 				; optimize OK (service.pas), line = 2712
 15453
 15454 7C08 AD 8D A2			lda F
 15455 7C0B F0 24			jeq l_2C8A
 15456 7C0D AD 81 A2			lda PX
 15457 7C10 8D 78 A2			sta PUT_DIGIT.PX
 15458 7C13 AD 82 A2			lda PX+1
 15459 7C16 8D 79 A2			sta PUT_DIGIT.PX+1
 15460 7C19 AD 83 A2			lda PY
 15461 7C1C 8D 7A A2			sta PUT_DIGIT.PY
 15462 7C1F AD 84 A2			lda PY+1
 15463 7C22 8D 7B A2			sta PUT_DIGIT.PY+1
 15464 7C25 AD 89 A2			lda N1
 15465 7C28 8D 7C A2			sta PUT_DIGIT.NUM
 15466 7C2B AD 8A A2			lda N1+1
 15467 7C2E 4C 50 7C			jmp l_2C9A
 15468 7C31			l_2C8A
 15469
 15470 				; optimize OK (service.pas), line = 2713
 15471
 15472 7C31 AD 81 A2			lda PX
 15473 7C34 8D 78 A2			sta PUT_DIGIT.PX
 15474 7C37 AD 82 A2			lda PX+1
 15475 7C3A 8D 79 A2			sta PUT_DIGIT.PX+1
 15476 7C3D AD 83 A2			lda PY
 15477 7C40 8D 7A A2			sta PUT_DIGIT.PY
 15478 7C43 AD 84 A2			lda PY+1
 15479 7C46 8D 7B A2			sta PUT_DIGIT.PY+1
 15480 7C49 A9 0A			lda #$0A
 15481 7C4B 8D 7C A2			sta PUT_DIGIT.NUM
 15482 7C4E A9 00			lda #$00
 15483 7C50			l_2C9A
 15484 7C50 8D 7D A2			sta PUT_DIGIT.NUM+1
 15485 7C53 20 55 78			jsr PUT_DIGIT
 15486
 15487 				; optimize OK (service.pas), line = 2716
 15488
 15489 7C56 A9 10			lda #$10
 15490 7C58 85 8E			sta @INTEGER.DIV.B
 15491 7C5A A9 27			lda #$27
 15492 7C5C 85 8F			sta @INTEGER.DIV.B+1
 15493 7C5E A9 00			lda #$00
 15494 7C60 85 90			sta @INTEGER.DIV.B+2
 15495 7C62 85 91			sta @INTEGER.DIV.B+3
 15496 7C64 AD 85 A2			lda SC
 15497 7C67 85 86			sta @INTEGER.DIV.A
 15498 7C69 AD 86 A2			lda SC+1
 15499 7C6C 85 87			sta @INTEGER.DIV.A+1
 15500 7C6E AD 87 A2			lda SC+2
 15501 7C71 85 88			sta @INTEGER.DIV.A+2
 15502 7C73 AD 88 A2			lda SC+3
 15503 7C76 85 89			sta @INTEGER.DIV.A+3
 15504 7C78 20 A2 12			jsr @INTEGER.DIV
 15505 7C7B A9 0A			lda #$0A
 15506 7C7D 85 8E			sta @INTEGER.MOD.B
 15507 7C7F A9 00			lda #$00
 15508 7C81 85 8F			sta @INTEGER.MOD.B+1
 15509 7C83 85 90			sta @INTEGER.MOD.B+2
 15510 7C85 85 91			sta @INTEGER.MOD.B+3
 15511 7C87 20 BF 12			jsr @INTEGER.MOD
 15512 7C8A A5 8A			lda @INTEGER.MOD.RESULT
 15513 7C8C 8D 89 A2			sta N1
 15514 7C8F A5 8B			lda @INTEGER.MOD.RESULT+1
 15515 7C91 8D 8A A2			sta N1+1
 15516 7C94 A5 8C			lda @INTEGER.MOD.RESULT+2
 15517 7C96 8D 8B A2			sta N1+2
 15518 7C99 A5 8D			lda @INTEGER.MOD.RESULT+3
 15519 7C9B 8D 8C A2			sta N1+3
 15520
 15521 				; optimize OK (service.pas), line = 2717
 15522
 15523 7C9E 30 10			jmi l_2CBC
 15524 7CA0 0D 8B A2			ora N1+2
 15525 7CA3 0D 8A A2			ora N1+1
 15526 7CA6 0D 89 A2			ora N1
 15527 7CA9 F0 05			jeq l_2CBC
 15528 7CAB A9 01			lda #$01
 15529 7CAD 8D 8D A2			sta F
 15530 7CB0			l_2CBC
 15531
 15532 				; optimize OK (service.pas), line = 2718
 15533
 15534 7CB0 AD 8D A2			lda F
 15535 7CB3 F0 29			jeq l_2CCF
 15536 7CB5 AD 81 A2			lda PX
 15537 7CB8 18 69 07			add #$07
 15538 7CBB 8D 78 A2			sta PUT_DIGIT.PX
 15539 7CBE AD 82 A2			lda PX+1
 15540 7CC1 69 00			adc #$00
 15541 7CC3 8D 79 A2			sta PUT_DIGIT.PX+1
 15542 7CC6 AD 83 A2			lda PY
 15543 7CC9 8D 7A A2			sta PUT_DIGIT.PY
 15544 7CCC AD 84 A2			lda PY+1
 15545 7CCF 8D 7B A2			sta PUT_DIGIT.PY+1
 15546 7CD2 AD 89 A2			lda N1
 15547 7CD5 8D 7C A2			sta PUT_DIGIT.NUM
 15548 7CD8 AD 8A A2			lda N1+1
 15549 7CDB 4C 02 7D			jmp l_2CE3
 15550 7CDE			l_2CCF
 15551
 15552 				; optimize OK (service.pas), line = 2719
 15553
 15554 7CDE AD 81 A2			lda PX
 15555 7CE1 18 69 07			add #$07
 15556 7CE4 8D 78 A2			sta PUT_DIGIT.PX
 15557 7CE7 AD 82 A2			lda PX+1
 15558 7CEA 69 00			adc #$00
 15559 7CEC 8D 79 A2			sta PUT_DIGIT.PX+1
 15560 7CEF AD 83 A2			lda PY
 15561 7CF2 8D 7A A2			sta PUT_DIGIT.PY
 15562 7CF5 AD 84 A2			lda PY+1
 15563 7CF8 8D 7B A2			sta PUT_DIGIT.PY+1
 15564 7CFB A9 0A			lda #$0A
 15565 7CFD 8D 7C A2			sta PUT_DIGIT.NUM
 15566 7D00 A9 00			lda #$00
 15567 7D02			l_2CE3
 15568 7D02 8D 7D A2			sta PUT_DIGIT.NUM+1
 15569 7D05 20 55 78			jsr PUT_DIGIT
 15570
 15571 				; optimize OK (service.pas), line = 2722
 15572
 15573 7D08 A9 E8			lda #$E8
 15574 7D0A 85 8E			sta @INTEGER.DIV.B
 15575 7D0C A9 03			lda #$03
 15576 7D0E 85 8F			sta @INTEGER.DIV.B+1
 15577 7D10 A9 00			lda #$00
 15578 7D12 85 90			sta @INTEGER.DIV.B+2
 15579 7D14 85 91			sta @INTEGER.DIV.B+3
 15580 7D16 AD 85 A2			lda SC
 15581 7D19 85 86			sta @INTEGER.DIV.A
 15582 7D1B AD 86 A2			lda SC+1
 15583 7D1E 85 87			sta @INTEGER.DIV.A+1
 15584 7D20 AD 87 A2			lda SC+2
 15585 7D23 85 88			sta @INTEGER.DIV.A+2
 15586 7D25 AD 88 A2			lda SC+3
 15587 7D28 85 89			sta @INTEGER.DIV.A+3
 15588 7D2A 20 A2 12			jsr @INTEGER.DIV
 15589 7D2D A9 0A			lda #$0A
 15590 7D2F 85 8E			sta @INTEGER.MOD.B
 15591 7D31 A9 00			lda #$00
 15592 7D33 85 8F			sta @INTEGER.MOD.B+1
 15593 7D35 85 90			sta @INTEGER.MOD.B+2
 15594 7D37 85 91			sta @INTEGER.MOD.B+3
 15595 7D39 20 BF 12			jsr @INTEGER.MOD
 15596 7D3C A5 8A			lda @INTEGER.MOD.RESULT
 15597 7D3E 8D 89 A2			sta N1
 15598 7D41 A5 8B			lda @INTEGER.MOD.RESULT+1
 15599 7D43 8D 8A A2			sta N1+1
 15600 7D46 A5 8C			lda @INTEGER.MOD.RESULT+2
 15601 7D48 8D 8B A2			sta N1+2
 15602 7D4B A5 8D			lda @INTEGER.MOD.RESULT+3
 15603 7D4D 8D 8C A2			sta N1+3
 15604
 15605 				; optimize OK (service.pas), line = 2723
 15606
 15607 7D50 30 10			jmi l_2D09
 15608 7D52 0D 8B A2			ora N1+2
 15609 7D55 0D 8A A2			ora N1+1
 15610 7D58 0D 89 A2			ora N1
 15611 7D5B F0 05			jeq l_2D09
 15612 7D5D A9 01			lda #$01
 15613 7D5F 8D 8D A2			sta F
 15614 7D62			l_2D09
 15615
 15616 				; optimize OK (service.pas), line = 2724
 15617
 15618 7D62 AD 8D A2			lda F
 15619 7D65 F0 29			jeq l_2D1C
 15620 7D67 AD 81 A2			lda PX
 15621 7D6A 18 69 0E			add #$0E
 15622 7D6D 8D 78 A2			sta PUT_DIGIT.PX
 15623 7D70 AD 82 A2			lda PX+1
 15624 7D73 69 00			adc #$00
 15625 7D75 8D 79 A2			sta PUT_DIGIT.PX+1
 15626 7D78 AD 83 A2			lda PY
 15627 7D7B 8D 7A A2			sta PUT_DIGIT.PY
 15628 7D7E AD 84 A2			lda PY+1
 15629 7D81 8D 7B A2			sta PUT_DIGIT.PY+1
 15630 7D84 AD 89 A2			lda N1
 15631 7D87 8D 7C A2			sta PUT_DIGIT.NUM
 15632 7D8A AD 8A A2			lda N1+1
 15633 7D8D 4C B4 7D			jmp l_2D30
 15634 7D90			l_2D1C
 15635
 15636 				; optimize OK (service.pas), line = 2725
 15637
 15638 7D90 AD 81 A2			lda PX
 15639 7D93 18 69 0E			add #$0E
 15640 7D96 8D 78 A2			sta PUT_DIGIT.PX
 15641 7D99 AD 82 A2			lda PX+1
 15642 7D9C 69 00			adc #$00
 15643 7D9E 8D 79 A2			sta PUT_DIGIT.PX+1
 15644 7DA1 AD 83 A2			lda PY
 15645 7DA4 8D 7A A2			sta PUT_DIGIT.PY
 15646 7DA7 AD 84 A2			lda PY+1
 15647 7DAA 8D 7B A2			sta PUT_DIGIT.PY+1
 15648 7DAD A9 0A			lda #$0A
 15649 7DAF 8D 7C A2			sta PUT_DIGIT.NUM
 15650 7DB2 A9 00			lda #$00
 15651 7DB4			l_2D30
 15652 7DB4 8D 7D A2			sta PUT_DIGIT.NUM+1
 15653 7DB7 20 55 78			jsr PUT_DIGIT
 15654
 15655 				; optimize OK (service.pas), line = 2728
 15656
 15657 7DBA A9 64			lda #$64
 15658 7DBC 85 8E			sta @INTEGER.DIV.B
 15659 7DBE A9 00			lda #$00
 15660 7DC0 85 8F			sta @INTEGER.DIV.B+1
 15661 7DC2 85 90			sta @INTEGER.DIV.B+2
 15662 7DC4 85 91			sta @INTEGER.DIV.B+3
 15663 7DC6 AD 85 A2			lda SC
 15664 7DC9 85 86			sta @INTEGER.DIV.A
 15665 7DCB AD 86 A2			lda SC+1
 15666 7DCE 85 87			sta @INTEGER.DIV.A+1
 15667 7DD0 AD 87 A2			lda SC+2
 15668 7DD3 85 88			sta @INTEGER.DIV.A+2
 15669 7DD5 AD 88 A2			lda SC+3
 15670 7DD8 85 89			sta @INTEGER.DIV.A+3
 15671 7DDA 20 A2 12			jsr @INTEGER.DIV
 15672 7DDD A9 0A			lda #$0A
 15673 7DDF 85 8E			sta @INTEGER.MOD.B
 15674 7DE1 A9 00			lda #$00
 15675 7DE3 85 8F			sta @INTEGER.MOD.B+1
 15676 7DE5 85 90			sta @INTEGER.MOD.B+2
 15677 7DE7 85 91			sta @INTEGER.MOD.B+3
 15678 7DE9 20 BF 12			jsr @INTEGER.MOD
 15679 7DEC A5 8A			lda @INTEGER.MOD.RESULT
 15680 7DEE 8D 89 A2			sta N1
 15681 7DF1 A5 8B			lda @INTEGER.MOD.RESULT+1
 15682 7DF3 8D 8A A2			sta N1+1
 15683 7DF6 A5 8C			lda @INTEGER.MOD.RESULT+2
 15684 7DF8 8D 8B A2			sta N1+2
 15685 7DFB A5 8D			lda @INTEGER.MOD.RESULT+3
 15686 7DFD 8D 8C A2			sta N1+3
 15687
 15688 				; optimize OK (service.pas), line = 2729
 15689
 15690 7E00 30 10			jmi l_2D56
 15691 7E02 0D 8B A2			ora N1+2
 15692 7E05 0D 8A A2			ora N1+1
 15693 7E08 0D 89 A2			ora N1
 15694 7E0B F0 05			jeq l_2D56
 15695 7E0D A9 01			lda #$01
 15696 7E0F 8D 8D A2			sta F
 15697 7E12			l_2D56
 15698
 15699 				; optimize OK (service.pas), line = 2730
 15700
 15701 7E12 AD 8D A2			lda F
 15702 7E15 F0 29			jeq l_2D69
 15703 7E17 AD 81 A2			lda PX
 15704 7E1A 18 69 15			add #$15
 15705 7E1D 8D 78 A2			sta PUT_DIGIT.PX
 15706 7E20 AD 82 A2			lda PX+1
 15707 7E23 69 00			adc #$00
 15708 7E25 8D 79 A2			sta PUT_DIGIT.PX+1
 15709 7E28 AD 83 A2			lda PY
 15710 7E2B 8D 7A A2			sta PUT_DIGIT.PY
 15711 7E2E AD 84 A2			lda PY+1
 15712 7E31 8D 7B A2			sta PUT_DIGIT.PY+1
 15713 7E34 AD 89 A2			lda N1
 15714 7E37 8D 7C A2			sta PUT_DIGIT.NUM
 15715 7E3A AD 8A A2			lda N1+1
 15716 7E3D 4C 64 7E			jmp l_2D7D
 15717 7E40			l_2D69
 15718
 15719 				; optimize OK (service.pas), line = 2731
 15720
 15721 7E40 AD 81 A2			lda PX
 15722 7E43 18 69 15			add #$15
 15723 7E46 8D 78 A2			sta PUT_DIGIT.PX
 15724 7E49 AD 82 A2			lda PX+1
 15725 7E4C 69 00			adc #$00
 15726 7E4E 8D 79 A2			sta PUT_DIGIT.PX+1
 15727 7E51 AD 83 A2			lda PY
 15728 7E54 8D 7A A2			sta PUT_DIGIT.PY
 15729 7E57 AD 84 A2			lda PY+1
 15730 7E5A 8D 7B A2			sta PUT_DIGIT.PY+1
 15731 7E5D A9 0A			lda #$0A
 15732 7E5F 8D 7C A2			sta PUT_DIGIT.NUM
 15733 7E62 A9 00			lda #$00
 15734 7E64			l_2D7D
 15735 7E64 8D 7D A2			sta PUT_DIGIT.NUM+1
 15736 7E67 20 55 78			jsr PUT_DIGIT
 15737
 15738 				; optimize OK (service.pas), line = 2734
 15739
 15740 7E6A A9 0A			lda #$0A
 15741 7E6C 85 8E			sta @INTEGER.DIV.B
 15742 7E6E A9 00			lda #$00
 15743 7E70 85 8F			sta @INTEGER.DIV.B+1
 15744 7E72 85 90			sta @INTEGER.DIV.B+2
 15745 7E74 85 91			sta @INTEGER.DIV.B+3
 15746 7E76 AD 85 A2			lda SC
 15747 7E79 85 86			sta @INTEGER.DIV.A
 15748 7E7B AD 86 A2			lda SC+1
 15749 7E7E 85 87			sta @INTEGER.DIV.A+1
 15750 7E80 AD 87 A2			lda SC+2
 15751 7E83 85 88			sta @INTEGER.DIV.A+2
 15752 7E85 AD 88 A2			lda SC+3
 15753 7E88 85 89			sta @INTEGER.DIV.A+3
 15754 7E8A 20 A2 12			jsr @INTEGER.DIV
 15755 7E8D A9 0A			lda #$0A
 15756 7E8F 85 8E			sta @INTEGER.MOD.B
 15757 7E91 A9 00			lda #$00
 15758 7E93 85 8F			sta @INTEGER.MOD.B+1
 15759 7E95 85 90			sta @INTEGER.MOD.B+2
 15760 7E97 85 91			sta @INTEGER.MOD.B+3
 15761 7E99 20 BF 12			jsr @INTEGER.MOD
 15762 7E9C A5 8A			lda @INTEGER.MOD.RESULT
 15763 7E9E 8D 89 A2			sta N1
 15764 7EA1 A5 8B			lda @INTEGER.MOD.RESULT+1
 15765 7EA3 8D 8A A2			sta N1+1
 15766 7EA6 A5 8C			lda @INTEGER.MOD.RESULT+2
 15767 7EA8 8D 8B A2			sta N1+2
 15768 7EAB A5 8D			lda @INTEGER.MOD.RESULT+3
 15769 7EAD 8D 8C A2			sta N1+3
 15770
 15771 				; optimize OK (service.pas), line = 2735
 15772
 15773 7EB0 AD 81 A2			lda PX
 15774 7EB3 18 69 1C			add #$1C
 15775 7EB6 8D 78 A2			sta PUT_DIGIT.PX
 15776 7EB9 AD 82 A2			lda PX+1
 15777 7EBC 69 00			adc #$00
 15778 7EBE 8D 79 A2			sta PUT_DIGIT.PX+1
 15779 7EC1 AD 83 A2			lda PY
 15780 7EC4 8D 7A A2			sta PUT_DIGIT.PY
 15781 7EC7 AD 84 A2			lda PY+1
 15782 7ECA 8D 7B A2			sta PUT_DIGIT.PY+1
 15783 7ECD AD 89 A2			lda N1
 15784 7ED0 8D 7C A2			sta PUT_DIGIT.NUM
 15785 7ED3 AD 8A A2			lda N1+1
 15786 7ED6 8D 7D A2			sta PUT_DIGIT.NUM+1
 15787 7ED9 20 55 78			jsr PUT_DIGIT
 15788
 15789 				; optimize OK (service.pas), line = 2739
 15790
 15791 7EDC AD 81 A2			lda PX
 15792 7EDF 18 69 23			add #$23
 15793 7EE2 8D 78 A2			sta PUT_DIGIT.PX
 15794 7EE5 AD 82 A2			lda PX+1
 15795 7EE8 69 00			adc #$00
 15796 7EEA 8D 79 A2			sta PUT_DIGIT.PX+1
 15797 7EED AD 83 A2			lda PY
 15798 7EF0 8D 7A A2			sta PUT_DIGIT.PY
 15799 7EF3 AD 84 A2			lda PY+1
 15800 7EF6 8D 7B A2			sta PUT_DIGIT.PY+1
 15801 7EF9 A9 00			lda #$00
 15802 7EFB 8D 7C A2			sta PUT_DIGIT.NUM
 15803 7EFE 8D 7D A2			sta PUT_DIGIT.NUM+1
 15804 7F01 20 55 78			jsr PUT_DIGIT
 15805
 15806 				; ------------------------------------------------------------
 15807
 15808 = A281			PX	= DATAORIGIN+$06E5
 15809 = A283			PY	= DATAORIGIN+$06E7
 15810 = A285			SC	= DATAORIGIN+$06E9
 15811 = A289			N1	= DATAORIGIN+$06ED
 15812 = A28D			F	= DATAORIGIN+$06F1
 15813
 15814 = A281			@VarData	= PX
 15815 = 000D			@VarDataSize	= 13
 15816
 15817 7F04			@exit
 15818 					.ifdef @new
 15819 					lda <@VarData
 15820 					sta :ztmp
 15821 					lda >@VarData
 15822 					ldy #@VarDataSize-1
 15823 					jmp @FreeMem
 15824 					els
 15825 7F04 60				rts						; ret
 15826 					eif
 15827 				.endl
 15828
 15829 7F05			.local	PLOT_LIVES					; PROCEDURE
 15830
 15831 				; optimize FAIL (0, service.pas), line = 2785
 15832
 15833 7F05 AD 8E A2			lda LIVES
 15834 7F08 D0 03			bne @+
 15835 7F0A CE 8F A2			dec LIVES+1
 15836 				@
 15837 7F0D CE 8E A2			dec LIVES
 15838
 15839 				; optimize OK (service.pas), line = 2788
 15840
 15841 7F10 A9 00			lda #$00
 15842 7F12 8D 92 A2			sta CN
 15843
 15844 7F15			l_2DBC
 15845 				; --- ForToDoCondition
 15846 7F15 AD 92 A2			lda CN
 15847 7F18 C9 08			cmp #$08
 15848 7F1A 90 03 4C DC 81		jcs l_2DCA
 15849
 15850 				; optimize OK (service.pas), line = 2789
 15851
 15852 7F1F A9 00			lda #$00
 15853 7F21 8D 91 A2			sta Y
 15854 7F24 AC F5 9C			ldy MINIVAUS.HEIGHT
 15855 7F27 88				dey
 15856 7F28 8C 2C 7F			sty @FORTMP_2DD5_0
 15857
 15858 7F2B			l_2DD8
 15859 				; --- ForToDoCondition
 15860 7F2B A9 00			lda @FORTMP_2DD5_0::#$00
 15861 7F2D CD 91 A2			cmp Y
 15862 7F30 B0 03 4C D4 81		jcc l_2DE6
 15863
 15864 				; optimize OK (service.pas), line = 2790
 15865
 15866 7F35 A9 00			lda #$00
 15867 7F37 8D 90 A2			sta X
 15868 7F3A AC F3 9C			ldy MINIVAUS.WIDTH
 15869 7F3D 88				dey
 15870 7F3E 8C 42 7F			sty @FORTMP_2DF1_0
 15871
 15872 7F41			l_2DF4
 15873 				; --- ForToDoCondition
 15874 7F41 A9 00			lda @FORTMP_2DF1_0::#$00
 15875 7F43 CD 90 A2			cmp X
 15876 7F46 B0 03 4C CC 81		jcc l_2E02
 15877
 15878 				; optimize OK (service.pas), line = 2792
 15879
 15880 7F4B AD 90 A2			lda X
 15881 7F4E 18 69 0B			add #$0B
 15882 7F51 85 9F			sta :STACKORIGIN+9
 15883 7F53 A9 00			lda #$00
 15884 7F55 69 00			adc #$00
 15885 7F57 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15886 7F59 AD F3 9C			lda MINIVAUS.WIDTH
 15887 7F5C 85 8E			sta :ecx
 15888 7F5E AD F4 9C			lda MINIVAUS.WIDTH+1
 15889 7F61 85 8F			sta :ecx+1
 15890 7F63 AD 92 A2			lda CN
 15891 7F66 85 86			sta :eax
 15892 7F68 A9 00			lda #$00
 15893 7F6A 85 87			sta :eax+1
 15894 					.ifdef fmulinit
 15895 					fmulu_16
 15896 					els
 15897 7F6C 20 7E 13			imulCX_AL
 15898 					eif
 15899 7F6F A5 86			lda :eax
 15900 7F71 18 65 9F			add :STACKORIGIN+9
 15901 7F74 8D 97 A2			sta XL
 15902 7F77 A5 87			lda :eax+1
 15903 7F79 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 15904 7F7B 8D 98 A2			sta XL+1
 15905
 15906 				; optimize OK (service.pas), line = 2793
 15907
 15908 7F7E AD 91 A2			lda Y
 15909 7F81 18 69 C0			add #$C0
 15910 7F84 8D 99 A2			sta YL
 15911 7F87 A9 00			lda #$00
 15912 7F89 69 00			adc #$00
 15913 7F8B 8D 9A A2			sta YL+1
 15914
 15915 				; optimize OK (service.pas), line = 2795
 15916
 15917 7F8E AC 97 A2			ldy XL
 15918 7F91 A9 C4			lda #$C4
 15919 7F93 18 6D 98 A2			add XL+1
 15920 7F97 85 83			sta :bp+1
 15921 7F99 B1 82			lda (:bp),y
 15922 7F9B 8D 93 A2			sta XP
 15923 7F9E A9 00			lda #$00
 15924 7FA0 8D 94 A2			sta XP+1
 15925
 15926 				; optimize OK (service.pas), line = 2796
 15927
 15928 7FA3 AC 99 A2			ldy YL
 15929 7FA6 B9 00 C3			lda adr.MODY,y
 15930 7FA9 85 86			sta :eax
 15931 7FAB A9 00			lda #$00
 15932 7FAD 85 87			sta :eax+1
 15933 7FAF AD 28 9D			lda PATTERN.WIDTH
 15934 7FB2 85 8E			sta :ecx
 15935 7FB4 AD 29 9D			lda PATTERN.WIDTH+1
 15936 7FB7 85 8F			sta :ecx+1
 15937 					.ifdef fmulinit
 15938 					fmulu_16
 15939 					els
 15940 7FB9 20 7E 13			imulCX_AL
 15941 					eif
 15942 7FBC A5 86			lda :eax
 15943 7FBE 8D 95 A2			sta YP
 15944 7FC1 A5 87			lda :eax+1
 15945 7FC3 8D 96 A2			sta YP+1
 15946
 15947 				; optimize FAIL (1, service.pas), line = 2800
 15948
 15949 7FC6 E8				inx
 15950 7FC7 A0 01			ldy #1
 15951 7FC9 AD 92 A2			lda CN
 15952 7FCC CD 8E A2			cmp LIVES
 15953 7FCF A9 00			lda #$00
 15954 7FD1 ED 8F A2			sbc LIVES+1
 15955 7FD4 50 02			svc
 15956 7FD6 49 80			eor #$80
 15957 7FD8 30 01			bmi @+
 15958 7FDA 88				dey
 15959 				@
 15960 7FDB 94 96			sty :STACKORIGIN,x
 15961 7FDD AD F7 9C			lda MINIVAUS.OFS
 15962 7FE0 18 6D 90 A2			add X
 15963 7FE4 85 9F			sta :STACKORIGIN+9
 15964 7FE6 AD F8 9C			lda MINIVAUS.OFS+1
 15965 7FE9 69 00			adc #$00
 15966 7FEB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15967 7FED AD F9 9C			lda MINIVAUS.OFS+2
 15968 7FF0 69 00			adc #$00
 15969 7FF2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15970 7FF4 AD FA 9C			lda MINIVAUS.OFS+3
 15971 7FF7 69 00			adc #$00
 15972 7FF9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15973 7FFB AD F3 9C			lda MINIVAUS.WIDTH
 15974 7FFE 85 8E			sta :ecx
 15975 8000 AD F4 9C			lda MINIVAUS.WIDTH+1
 15976 8003 85 8F			sta :ecx+1
 15977 8005 AD 91 A2			lda Y
 15978 8008 85 86			sta :eax
 15979 800A A9 00			lda #$00
 15980 800C 85 87			sta :eax+1
 15981 					.ifdef fmulinit
 15982 					fmulu_16
 15983 					els
 15984 800E 20 7E 13			imulCX_AL
 15985 					eif
 15986 8011 A5 9F			lda :STACKORIGIN+9
 15987 8013 18 65 86			add :eax
 15988 8016 8D D1 A0			sta GETBYTE.SRC
 15989 8019 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15990 801B 65 87			adc :eax+1
 15991 801D 8D D2 A0			sta GETBYTE.SRC+1
 15992 8020 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15993 8022 65 88			adc :eax+2
 15994 8024 8D D3 A0			sta GETBYTE.SRC+2
 15995 8027 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15996 8029 65 89			adc :eax+3
 15997 802B 8D D4 A0			sta GETBYTE.SRC+3
 15998 802E 20 E7 2C			jsr GETBYTE
 15999 8031 CA				dex
 16000 8032 A0 01			ldy #1
 16001 8034 AD D5 A0			lda GETBYTE.RESULT
 16002 8037 D0 01			bne @+
 16003 8039 88				dey
 16004 				@
 16005 803A 98				tya
 16006 803B 35 97			and :STACKORIGIN+1,x
 16007 803D F0 5D			jeq l_2E65
 16008
 16009 				; optimize OK (service.pas), line = 2803
 16010
 16011 803F AD F7 9C			lda MINIVAUS.OFS
 16012 8042 18 6D 90 A2			add X
 16013 8046 85 9F			sta :STACKORIGIN+9
 16014 8048 AD F8 9C			lda MINIVAUS.OFS+1
 16015 804B 69 00			adc #$00
 16016 804D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16017 804F AD F9 9C			lda MINIVAUS.OFS+2
 16018 8052 69 00			adc #$00
 16019 8054 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16020 8056 AD FA 9C			lda MINIVAUS.OFS+3
 16021 8059 69 00			adc #$00
 16022 805B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16023 805D AD F3 9C			lda MINIVAUS.WIDTH
 16024 8060 85 8E			sta :ecx
 16025 8062 AD F4 9C			lda MINIVAUS.WIDTH+1
 16026 8065 85 8F			sta :ecx+1
 16027 8067 AD 91 A2			lda Y
 16028 806A 85 86			sta :eax
 16029 806C A9 00			lda #$00
 16030 806E 85 87			sta :eax+1
 16031 					.ifdef fmulinit
 16032 					fmulu_16
 16033 					els
 16034 8070 20 7E 13			imulCX_AL
 16035 					eif
 16036 8073 A5 9F			lda :STACKORIGIN+9
 16037 8075 18 65 86			add :eax
 16038 8078 8D D1 A0			sta GETBYTE.SRC
 16039 807B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16040 807D 65 87			adc :eax+1
 16041 807F 8D D2 A0			sta GETBYTE.SRC+1
 16042 8082 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16043 8084 65 88			adc :eax+2
 16044 8086 8D D3 A0			sta GETBYTE.SRC+2
 16045 8089 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16046 808B 65 89			adc :eax+3
 16047 808D 8D D4 A0			sta GETBYTE.SRC+3
 16048 8090 20 E7 2C			jsr GETBYTE
 16049 8093 AD D5 A0			lda GETBYTE.RESULT
 16050 8096 8D 9C A2			sta CL
 16051 				; optimize OK (service.pas), line = 2806
 16052 				; optimize OK (service.pas), line = 2809
 16053 8099 4C 36 81			jmp l_2EA7
 16054 809C			l_2E65
 16055
 16056 				; optimize OK (service.pas), line = 2818
 16057
 16058 809C AD A7 9C			lda PLAYSCREEN.OFS
 16059 809F 18 6D 97 A2			add XL
 16060 80A3 85 9F			sta :STACKORIGIN+9
 16061 80A5 AD A8 9C			lda PLAYSCREEN.OFS+1
 16062 80A8 6D 98 A2			adc XL+1
 16063 80AB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16064 80AD AD A9 9C			lda PLAYSCREEN.OFS+2
 16065 80B0 69 00			adc #$00
 16066 80B2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16067 80B4 AD AA 9C			lda PLAYSCREEN.OFS+3
 16068 80B7 69 00			adc #$00
 16069 80B9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16070 80BB AC 99 A2			ldy YL
 16071 80BE A5 9F			lda :STACKORIGIN+9
 16072 80C0 18 79 00 C0			add adr.ROW,y
 16073 80C4 8D D1 A0			sta GETBYTE.SRC
 16074 80C7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16075 80C9 79 FB C0			adc adr.ROW+251,y
 16076 80CC 8D D2 A0			sta GETBYTE.SRC+1
 16077 80CF A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16078 80D1 69 00			adc #$00
 16079 80D3 8D D3 A0			sta GETBYTE.SRC+2
 16080 80D6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16081 80D8 69 00			adc #$00
 16082 80DA 8D D4 A0			sta GETBYTE.SRC+3
 16083 80DD 20 E7 2C			jsr GETBYTE
 16084 80E0 AD D5 A0			lda GETBYTE.RESULT
 16085 80E3 29 80			and #$80
 16086 80E5 8D 9B A2			sta SHADOW
 16087
 16088 				; optimize OK (service.pas), line = 2821
 16089
 16090 80E8 AD 2C 9D			lda PATTERN.OFS
 16091 80EB 18 6D 93 A2			add XP
 16092 80EF 85 9F			sta :STACKORIGIN+9
 16093 80F1 AD 2D 9D			lda PATTERN.OFS+1
 16094 80F4 6D 94 A2			adc XP+1
 16095 80F7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16096 80F9 AD 2E 9D			lda PATTERN.OFS+2
 16097 80FC 69 00			adc #$00
 16098 80FE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16099 8100 AD 2F 9D			lda PATTERN.OFS+3
 16100 8103 69 00			adc #$00
 16101 8105 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16102 8107 A5 9F			lda :STACKORIGIN+9
 16103 8109 18 6D 95 A2			add YP
 16104 810D 8D D1 A0			sta GETBYTE.SRC
 16105 8110 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16106 8112 6D 96 A2			adc YP+1
 16107 8115 8D D2 A0			sta GETBYTE.SRC+1
 16108 8118 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16109 811A 69 00			adc #$00
 16110 811C 8D D3 A0			sta GETBYTE.SRC+2
 16111 811F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16112 8121 69 00			adc #$00
 16113 8123 8D D4 A0			sta GETBYTE.SRC+3
 16114 8126 20 E7 2C			jsr GETBYTE
 16115 8129 E8				inx
 16116 812A AD D5 A0			lda GETBYTE.RESULT
 16117 812D 29 7F			and #$7F
 16118 812F 0D 9B A2			ora SHADOW
 16119 8132 8D 9C A2			sta CL
 16120 8135 CA				dex
 16121 8136			l_2EA7
 16122
 16123 				; optimize OK (service.pas), line = 2824
 16124
 16125 8136 AD 97 A2			lda XL
 16126 8139 85 A0			sta :STACKORIGIN+10
 16127 813B A9 50			lda #$50
 16128 813D 18 6D 98 A2			add XL+1
 16129 8141 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16130 8143 A9 00			lda #$00
 16131 8145 69 00			adc #$00
 16132 8147 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16133 8149 A9 00			lda #$00
 16134 814B 69 00			adc #$00
 16135 814D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16136 814F AC 99 A2			ldy YL
 16137 8152 A5 A0			lda :STACKORIGIN+10
 16138 8154 18 79 00 C0			add adr.ROW,y
 16139 8158 8D CC A0			sta PUTBYTE.DST
 16140 815B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16141 815D 79 FB C0			adc adr.ROW+251,y
 16142 8160 8D CD A0			sta PUTBYTE.DST+1
 16143 8163 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16144 8165 69 00			adc #$00
 16145 8167 8D CE A0			sta PUTBYTE.DST+2
 16146 816A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16147 816C 69 00			adc #$00
 16148 816E 8D CF A0			sta PUTBYTE.DST+3
 16149 8171 AD 9C A2			lda CL
 16150 8174 8D D0 A0			sta PUTBYTE.V
 16151 8177 20 BF 2C			jsr PUTBYTE
 16152
 16153 				; optimize OK (service.pas), line = 2827
 16154
 16155 817A AD A7 9C			lda PLAYSCREEN.OFS
 16156 817D 18 6D 97 A2			add XL
 16157 8181 85 A0			sta :STACKORIGIN+10
 16158 8183 AD A8 9C			lda PLAYSCREEN.OFS+1
 16159 8186 6D 98 A2			adc XL+1
 16160 8189 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16161 818B AD A9 9C			lda PLAYSCREEN.OFS+2
 16162 818E 69 00			adc #$00
 16163 8190 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16164 8192 AD AA 9C			lda PLAYSCREEN.OFS+3
 16165 8195 69 00			adc #$00
 16166 8197 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16167 8199 AC 99 A2			ldy YL
 16168 819C A5 A0			lda :STACKORIGIN+10
 16169 819E 18 79 00 C0			add adr.ROW,y
 16170 81A2 8D CC A0			sta PUTBYTE.DST
 16171 81A5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16172 81A7 79 FB C0			adc adr.ROW+251,y
 16173 81AA 8D CD A0			sta PUTBYTE.DST+1
 16174 81AD A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16175 81AF 69 00			adc #$00
 16176 81B1 8D CE A0			sta PUTBYTE.DST+2
 16177 81B4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16178 81B6 69 00			adc #$00
 16179 81B8 8D CF A0			sta PUTBYTE.DST+3
 16180 81BB AD 9C A2			lda CL
 16181 81BE 8D D0 A0			sta PUTBYTE.V
 16182 81C1 20 BF 2C			jsr PUTBYTE
 16183
 16184 				; --- ForToDoEpilog
 16185 81C4 EE 90 A2			inc X
 16186 81C7 F0 03 4C 41 7F		jne l_2DF4
 16187 81CC			l_2E02
 16188
 16189 				; --- ForToDoEpilog
 16190 81CC EE 91 A2			inc Y
 16191 81CF F0 03 4C 2B 7F		jne l_2DD8
 16192 81D4			l_2DE6
 16193
 16194 				; --- ForToDoEpilog
 16195 81D4 EE 92 A2			inc CN
 16196 81D7 F0 03 4C 15 7F		jne l_2DBC
 16197 81DC			l_2DCA
 16198
 16199 				; ------------------------------------------------------------
 16200
 16201 = A28E			LIVES	= DATAORIGIN+$06F2
 16202 = 000B			XLIVES	= $0B
 16203 = 00C0			YLIVES	= $C0
 16204 = A290			X	= DATAORIGIN+$06F4
 16205 = A291			Y	= DATAORIGIN+$06F5
 16206 = A292			CN	= DATAORIGIN+$06F6
 16207 = A293			XP	= DATAORIGIN+$06F7
 16208 = A295			YP	= DATAORIGIN+$06F9
 16209 = A297			XL	= DATAORIGIN+$06FB
 16210 = A299			YL	= DATAORIGIN+$06FD
 16211 = A29B			SHADOW	= DATAORIGIN+$06FF
 16212 = A29C			CL	= DATAORIGIN+$0700
 16213
 16214 = A28E			@VarData	= LIVES
 16215 = 000F			@VarDataSize	= 15
 16216
 16217 81DC			@exit
 16218 					.ifdef @new
 16219 					lda <@VarData
 16220 					sta :ztmp
 16221 					lda >@VarData
 16222 					ldy #@VarDataSize-1
 16223 					jmp @FreeMem
 16224 					els
 16225 81DC 60				rts						; ret
 16226 					eif
 16227 				.endl
 16228
 16229 81DD			.local	PLACE_FIRE					; PROCEDURE
 16230
 16231 				; optimize OK (service.pas), line = 2836
 16232
 16233 81DD A9 00			lda #$00
 16234 81DF 8D A1 A2			sta Y
 16235 81E2 AC 0D 9D			ldy SHOOTS.HEIGHT
 16236 81E5 88				dey
 16237 81E6 8C EA 81			sty @FORTMP_2F15_0
 16238
 16239 81E9			l_2F18
 16240 				; --- ForToDoCondition
 16241 81E9 A9 00			lda @FORTMP_2F15_0::#$00
 16242 81EB CD A1 A2			cmp Y
 16243 81EE B0 03 4C 75 82		jcc l_2F26
 16244
 16245 				; optimize OK (service.pas), line = 2838
 16246
 16247 81F3 AD A1 A2			lda Y
 16248 81F6 85 86			sta :eax
 16249 81F8 A9 00			lda #$00
 16250 81FA 85 87			sta :eax+1
 16251 81FC AD 0B 9D			lda SHOOTS.WIDTH
 16252 81FF 85 8E			sta :ecx
 16253 8201 AD 0C 9D			lda SHOOTS.WIDTH+1
 16254 8204 85 8F			sta :ecx+1
 16255 					.ifdef fmulinit
 16256 					fmulu_16
 16257 					els
 16258 8206 20 7E 13			imulCX_AL
 16259 					eif
 16260 8209 A5 86			lda :eax
 16261 820B 8D 9F A2			sta FW
 16262 820E A5 87			lda :eax+1
 16263 8210 8D A0 A2			sta FW+1
 16264
 16265 				; optimize OK (service.pas), line = 2840
 16266
 16267 8213 AD A1 A2			lda Y
 16268 8216 18 6D 92 9D			add FIRE.Y
 16269 821A A8				tay
 16270 821B AD 91 9D			lda FIRE.X
 16271 821E 18 79 00 C0			add adr.ROW,y
 16272 8222 8D A9 A0			sta BLITZERO.DST
 16273 8225 A9 50			lda #$50
 16274 8227 79 FB C0			adc adr.ROW+251,y
 16275 822A 8D AA A0			sta BLITZERO.DST+1
 16276 822D A9 00			lda #$00
 16277 822F 69 00			adc #$00
 16278 8231 8D AB A0			sta BLITZERO.DST+2
 16279 8234 A9 00			lda #$00
 16280 8236 69 00			adc #$00
 16281 8238 8D AC A0			sta BLITZERO.DST+3
 16282 823B AD 0F 9D			lda SHOOTS.OFS
 16283 823E 18 6D 9F A2			add FW
 16284 8242 8D A5 A0			sta BLITZERO.SRC
 16285 8245 AD 10 9D			lda SHOOTS.OFS+1
 16286 8248 6D A0 A2			adc FW+1
 16287 824B 8D A6 A0			sta BLITZERO.SRC+1
 16288 824E AD 11 9D			lda SHOOTS.OFS+2
 16289 8251 69 00			adc #$00
 16290 8253 8D A7 A0			sta BLITZERO.SRC+2
 16291 8256 AD 12 9D			lda SHOOTS.OFS+3
 16292 8259 69 00			adc #$00
 16293 825B 8D A8 A0			sta BLITZERO.SRC+3
 16294 825E AD 0B 9D			lda SHOOTS.WIDTH
 16295 8261 8D AD A0			sta BLITZERO.SIZE
 16296 8264 AD 0C 9D			lda SHOOTS.WIDTH+1
 16297 8267 8D AE A0			sta BLITZERO.SIZE+1
 16298 826A 20 45 2B			jsr BLITZERO
 16299
 16300 				; --- ForToDoEpilog
 16301 826D EE A1 A2			inc Y
 16302 8270 F0 03 4C E9 81		jne l_2F18
 16303 8275			l_2F26
 16304
 16305 				; ------------------------------------------------------------
 16306
 16307 = A29F			FW	= DATAORIGIN+$0703
 16308 = A2A1			Y	= DATAORIGIN+$0705
 16309
 16310 = A29F			@VarData	= FW
 16311 = 0003			@VarDataSize	= 3
 16312
 16313 8275			@exit
 16314 					.ifdef @new
 16315 					lda <@VarData
 16316 					sta :ztmp
 16317 					lda >@VarData
 16318 					ldy #@VarDataSize-1
 16319 					jmp @FreeMem
 16320 					els
 16321 8275 60				rts						; ret
 16322 					eif
 16323 				.endl
 16324
 16325 8276			.local	REMOVE_FIRE					; PROCEDURE
 16326
 16327 				; optimize OK (service.pas), line = 2848
 16328
 16329 8276 A9 00			lda #$00
 16330 8278 8D A3 A2			sta Y
 16331 827B AC 0D 9D			ldy SHOOTS.HEIGHT
 16332 827E 88				dey
 16333 827F 8C 83 82			sty @FORTMP_2F63_0
 16334
 16335 8282			l_2F66
 16336 				; --- ForToDoCondition
 16337 8282 A9 00			lda @FORTMP_2F63_0::#$00
 16338 8284 CD A3 A2			cmp Y
 16339 8287 90 79			jcc l_2F74
 16340
 16341 				; optimize OK (service.pas), line = 2852
 16342
 16343 8289 AD A3 A2			lda Y
 16344 828C 18 6D 92 9D			add FIRE.Y
 16345 8290 A8				tay
 16346 8291 AD 91 9D			lda FIRE.X
 16347 8294 18 79 00 C0			add adr.ROW,y
 16348 8298 8D BB A0			sta BLITROW.DST
 16349 829B A9 50			lda #$50
 16350 829D 79 FB C0			adc adr.ROW+251,y
 16351 82A0 8D BC A0			sta BLITROW.DST+1
 16352 82A3 A9 00			lda #$00
 16353 82A5 69 00			adc #$00
 16354 82A7 8D BD A0			sta BLITROW.DST+2
 16355 82AA A9 00			lda #$00
 16356 82AC 69 00			adc #$00
 16357 82AE 8D BE A0			sta BLITROW.DST+3
 16358 82B1 AD A7 9C			lda PLAYSCREEN.OFS
 16359 82B4 18 6D 91 9D			add FIRE.X
 16360 82B8 85 A1			sta :STACKORIGIN+11
 16361 82BA AD A8 9C			lda PLAYSCREEN.OFS+1
 16362 82BD 69 00			adc #$00
 16363 82BF 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16364 82C1 AD A9 9C			lda PLAYSCREEN.OFS+2
 16365 82C4 69 00			adc #$00
 16366 82C6 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16367 82C8 AD AA 9C			lda PLAYSCREEN.OFS+3
 16368 82CB 69 00			adc #$00
 16369 82CD 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16370 82CF A5 A1			lda :STACKORIGIN+11
 16371 82D1 18 79 00 C0			add adr.ROW,y
 16372 82D5 8D B7 A0			sta BLITROW.SRC
 16373 82D8 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16374 82DA 79 FB C0			adc adr.ROW+251,y
 16375 82DD 8D B8 A0			sta BLITROW.SRC+1
 16376 82E0 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16377 82E2 69 00			adc #$00
 16378 82E4 8D B9 A0			sta BLITROW.SRC+2
 16379 82E7 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16380 82E9 69 00			adc #$00
 16381 82EB 8D BA A0			sta BLITROW.SRC+3
 16382 82EE AD 0B 9D			lda SHOOTS.WIDTH
 16383 82F1 8D BF A0			sta BLITROW.SIZE
 16384 82F4 AD 0C 9D			lda SHOOTS.WIDTH+1
 16385 82F7 8D C0 A0			sta BLITROW.SIZE+1
 16386 82FA 20 F8 2B			jsr BLITROW
 16387
 16388 				; --- ForToDoEpilog
 16389 82FD EE A3 A2			inc Y
 16390 8300 D0 80			jne l_2F66
 16391 8302			l_2F74
 16392
 16393 				; ------------------------------------------------------------
 16394
 16395 = A2A3			Y	= DATAORIGIN+$0707
 16396
 16397 = A2A3			@VarData	= Y
 16398 = 0001			@VarDataSize	= 1
 16399
 16400 8302			@exit
 16401 					.ifdef @new
 16402 					lda <@VarData
 16403 					sta :ztmp
 16404 					lda >@VarData
 16405 					ldy #@VarDataSize-1
 16406 					jmp @FreeMem
 16407 					els
 16408 8302 60				rts						; ret
 16409 					eif
 16410 				.endl
 16411
 16412 8303			.local	CHECK_FIRE					; PROCEDURE
 16413
 16414 				; optimize OK (service.pas), line = 2859
 16415
 16416 8303 AD 94 9D			lda FIRE.AVL
 16417 8306 D0 03 4C 0D 85		jeq l_2FB6
 16418
 16419 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2861
 16420
 16421 830B 20 6D 2A			jsr MOUSECLICK
 16422 830E E8				inx
 16423 830F E8				inx
 16424 8310 A0 01			ldy #1
 16425 8312 AD 8E 9C			lda MOUSECLICK.RESULT+1
 16426 8315 C9 00			cmp #$00
 16427 8317 D0 05			bne @+
 16428 8319 AD 8D 9C			lda MOUSECLICK.RESULT
 16429 831C C9 01			cmp #$01
 16430 				@
 16431 831E F0 01			beq @+
 16432 8320 88				dey
 16433 				@
 16434 8321 98				tya
 16435 8322 2D 94 9D			and FIRE.AVL
 16436 8325 95 95			sta :STACKORIGIN-1,x
 16437 8327 CA				dex
 16438 8328 CA				dex
 16439 8329 A0 01			ldy #1
 16440 832B AD 93 9D			lda FIRE.SHOT
 16441 832E F0 01			beq @+
 16442 8330 88				dey
 16443 				@
 16444 8331 98				tya
 16445 8332 35 97			and :STACKORIGIN+1,x
 16446 8334 F0 48			jeq l_2FD6
 16447
 16448 				; optimize OK (service.pas), line = 2863
 16449
 16450 8336 AD 23 9D			lda VAUS.WIDTH
 16451 8339 38 ED 0B 9D			sub SHOOTS.WIDTH
 16452 833D 85 A0			sta :STACKORIGIN+10
 16453 833F A9 00			lda #$00
 16454 8341 ED 0C 9D			sbc SHOOTS.WIDTH+1
 16455 8344 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16456 8346 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 16457 8348 66 A0			ror :STACKORIGIN+10
 16458 834A AD 1B 9D			lda VAUS.X
 16459 834D 18 65 A0			add :STACKORIGIN+10
 16460 8350 8D 91 9D			sta FIRE.X
 16461
 16462 				; optimize OK (service.pas), line = 2864
 16463
 16464 8353 AD 1C 9D			lda VAUS.Y
 16465 8356 38 ED 0D 9D			sub SHOOTS.HEIGHT
 16466 835A 8D 92 9D			sta FIRE.Y
 16467
 16468 				; optimize OK (service.pas), line = 2865
 16469
 16470 835D A9 01			lda #$01
 16471 835F 8D 93 9D			sta FIRE.SHOT
 16472
 16473 				; optimize OK (service.pas), line = 2866
 16474
 16475 8362 A9 00			lda #$00
 16476 8364 8D 95 9D			sta FIRE.NW
 16477
 16478 				; optimize OK (service.pas), line = 2867
 16479
 16480 8367 A9 BC			lda #$BC
 16481 8369 8D 89 9C			sta BALL_BLOCK_SOUND.A
 16482 836C A9 02			lda #$02
 16483 836E 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 16484 8371 A9 05			lda #$05
 16485 8373 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 16486 8376 A9 00			lda #$00
 16487 8378 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 16488 837B 20 6B 2A			jsr BALL_BLOCK_SOUND
 16489 837E			l_2FD6
 16490
 16491 				; optimize OK (service.pas), line = 2870
 16492
 16493 837E AD 93 9D			lda FIRE.SHOT
 16494 8381 D0 03 4C 0D 85		jeq l_3010
 16495
 16496 				; optimize OK (service.pas), line = 2872
 16497
 16498 8386 AD 95 9D			lda FIRE.NW
 16499 8389 F0 03			jeq l_301D
 16500 838B 20 76 82			jsr REMOVE_FIRE
 16501 838E			l_301D
 16502
 16503 				; optimize OK (service.pas), line = 2873
 16504
 16505 838E A9 01			lda #$01
 16506 8390 8D 95 9D			sta FIRE.NW
 16507
 16508 				; optimize OK (service.pas), line = 2875
 16509
 16510 8393 AD 92 9D			lda FIRE.Y
 16511 8396 38 E9 04			sub #$04
 16512 8399 8D 92 9D			sta FIRE.Y
 16513
 16514 				; optimize OK (service.pas), line = 2876
 16515
 16516 839C C9 16			cmp #$16
 16517 839E B0 08			jcs l_3038
 16518 83A0 A9 00			lda #$00
 16519 83A2 8D 93 9D			sta FIRE.SHOT
 16520 83A5 4C 0D 85			jmp l_3046
 16521 83A8			l_3038
 16522
 16523 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 2879
 16524
 16525 83A8 20 DD 81			jsr PLACE_FIRE
 16526
 16527 				; optimize OK (service.pas), line = 2881
 16528
 16529 83AB AD 92 9D			lda FIRE.Y
 16530 83AE 38 E9 16			sub #$16
 16531 83B1 D0 03 4C 0D 85		jeq l_306D
 16532 83B6 10 03			bpl @+
 16533 83B8 4C 0D 85			jmp l_306D
 16534 				@
 16535 83BB AD 92 9D			lda FIRE.Y
 16536 83BE 38 E9 16			sub #$16
 16537 83C1 85 A0			sta :STACKORIGIN+10
 16538 83C3 A9 00			lda #$00
 16539 83C5 E9 00			sbc #$00
 16540 83C7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16541 83C9 A5 A0			lda :STACKORIGIN+10
 16542 83CB C9 78			cmp #$78
 16543 83CD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16544 83CF E9 00			sbc #$00
 16545 83D1 50 02			svc
 16546 83D3 49 80			eor #$80
 16547 83D5 30 03 4C 0D 85		jpl l_306D
 16548 				@
 16549
 16550 				; optimize OK (service.pas), line = 2883
 16551
 16552 83DA AD 91 9D			lda FIRE.X
 16553 83DD 38 E9 09			sub #$09
 16554 83E0 85 9F			sta :STACKORIGIN+9
 16555 83E2 A9 00			lda #$00
 16556 83E4 E9 00			sbc #$00
 16557 83E6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16558 83E8 A0 00			ldy #$00
 16559 83EA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16560 83EC 10 01			spl
 16561 83EE 88				dey
 16562 83EF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16563 83F1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16564 83F3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16565 83F5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16566 83F7 66 9F			ror :STACKORIGIN+9
 16567 83F9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16568 83FB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16569 83FD 66 9F			ror :STACKORIGIN+9
 16570 83FF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16571 8401 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16572 8403 66 9F			ror :STACKORIGIN+9
 16573 8405 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16574 8407 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16575 8409 66 9F			ror :STACKORIGIN+9
 16576 840B A5 9F			lda :STACKORIGIN+9
 16577 840D 8D A5 A2			sta X1
 16578 8410 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16579 8412 8D A6 A2			sta X1+1
 16580
 16581 				; optimize OK (service.pas), line = 2884
 16582
 16583 8415 AD 92 9D			lda FIRE.Y
 16584 8418 38 E9 16			sub #$16
 16585 841B 85 9F			sta :STACKORIGIN+9
 16586 841D A9 00			lda #$00
 16587 841F E9 00			sbc #$00
 16588 8421 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16589 8423 A0 00			ldy #$00
 16590 8425 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16591 8427 10 01			spl
 16592 8429 88				dey
 16593 842A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16594 842C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16595 842E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16596 8430 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16597 8432 66 9F			ror :STACKORIGIN+9
 16598 8434 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16599 8436 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16600 8438 66 9F			ror :STACKORIGIN+9
 16601 843A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16602 843C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16603 843E 66 9F			ror :STACKORIGIN+9
 16604 8440 A5 9F			lda :STACKORIGIN+9
 16605 8442 8D A9 A2			sta Y1
 16606 8445 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16607 8447 8D AA A2			sta Y1+1
 16608
 16609 				; optimize OK (service.pas), line = 2886
 16610
 16611 844A AD 91 9D			lda FIRE.X
 16612 844D 18 6D 0B 9D			add SHOOTS.WIDTH
 16613 8451 85 9F			sta :STACKORIGIN+9
 16614 8453 A9 00			lda #$00
 16615 8455 6D 0C 9D			adc SHOOTS.WIDTH+1
 16616 8458 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16617 845A A9 00			lda #$00
 16618 845C 69 00			adc #$00
 16619 845E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16620 8460 A9 00			lda #$00
 16621 8462 69 00			adc #$00
 16622 8464 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16623 8466 A5 9F			lda :STACKORIGIN+9
 16624 8468 38 E9 09			sub #$09
 16625 846B 85 9F			sta :STACKORIGIN+9
 16626 846D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16627 846F E9 00			sbc #$00
 16628 8471 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16629 8473 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16630 8475 E9 00			sbc #$00
 16631 8477 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16632 8479 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16633 847B E9 00			sbc #$00
 16634 847D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16635 847F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16636 8481 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16637 8483 66 9F			ror :STACKORIGIN+9
 16638 8485 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16639 8487 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16640 8489 66 9F			ror :STACKORIGIN+9
 16641 848B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16642 848D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16643 848F 66 9F			ror :STACKORIGIN+9
 16644 8491 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16645 8493 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16646 8495 66 9F			ror :STACKORIGIN+9
 16647 8497 A5 9F			lda :STACKORIGIN+9
 16648 8499 8D A7 A2			sta X2
 16649 849C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16650 849E 8D A8 A2			sta X2+1
 16651
 16652 				; optimize OK (service.pas), line = 2887
 16653
 16654 84A1 AD A9 A2			lda Y1
 16655 84A4 8D AB A2			sta Y2
 16656 84A7 AD AA A2			lda Y1+1
 16657 84AA 8D AC A2			sta Y2+1
 16658
 16659 				; optimize OK (service.pas), line = 2889
 16660
 16661 84AD AD A9 A2			lda Y1
 16662 84B0 0A				asl @
 16663 84B1 0A				asl @
 16664 84B2 0A				asl @
 16665 84B3 0A				asl @
 16666 84B4 18 6D A5 A2			add X1
 16667 84B8 A8				tay
 16668 84B9 B9 00 DB			lda adr.WALL,y
 16669 84BC D0 11			jne l_30D6x
 16670 84BE AD AB A2			lda Y2
 16671 84C1 0A				asl @
 16672 84C2 0A				asl @
 16673 84C3 0A				asl @
 16674 84C4 0A				asl @
 16675 84C5 18 6D A7 A2			add X2
 16676 84C9 A8				tay
 16677 84CA B9 00 DB			lda adr.WALL,y
 16678 84CD F0 3E			jeq l_30D6
 16679 84CF			l_30D6x
 16680
 16681 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2891
 16682
 16683 84CF 20 76 82			jsr REMOVE_FIRE
 16684
 16685 				; optimize OK (service.pas), line = 2892
 16686
 16687 84D2 A9 00			lda #$00
 16688 84D4 8D 93 9D			sta FIRE.SHOT
 16689
 16690 				; optimize OK (service.pas), line = 2894
 16691
 16692 84D7 AD A5 A2			lda X1
 16693 84DA 8D F3 A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16694 84DD AD A6 A2			lda X1+1
 16695 84E0 8D F4 A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16696 84E3 AD A9 A2			lda Y1
 16697 84E6 8D F5 A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16698 84E9 AD AA A2			lda Y1+1
 16699 84EC 8D F6 A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16700 84EF 20 31 5C			jsr SHOOT_BLOCK_WITH_FIRE
 16701
 16702 				; optimize OK (service.pas), line = 2895
 16703
 16704 84F2 AD A7 A2			lda X2
 16705 84F5 8D F3 A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16706 84F8 AD A8 A2			lda X2+1
 16707 84FB 8D F4 A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16708 84FE AD AB A2			lda Y2
 16709 8501 8D F5 A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16710 8504 AD AC A2			lda Y2+1
 16711 8507 8D F6 A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16712 850A 20 31 5C			jsr SHOOT_BLOCK_WITH_FIRE
 16713 850D			l_3046
 16714 850D			l_30D6
 16715 850D			l_306D
 16716 850D			l_3010
 16717 850D			l_2FB6
 16718
 16719 				; ------------------------------------------------------------
 16720
 16721 = A2A5			X1	= DATAORIGIN+$0709
 16722 = A2A7			X2	= DATAORIGIN+$070B
 16723 = A2A9			Y1	= DATAORIGIN+$070D
 16724 = A2AB			Y2	= DATAORIGIN+$070F
 16725
 16726 = A2A5			@VarData	= X1
 16727 = 0008			@VarDataSize	= 8
 16728
 16729 850D			@exit
 16730 					.ifdef @new
 16731 					lda <@VarData
 16732 					sta :ztmp
 16733 					lda >@VarData
 16734 					ldy #@VarDataSize-1
 16735 					jmp @FreeMem
 16736 					els
 16737 850D 60				rts						; ret
 16738 					eif
 16739 				.endl
 16740
 16741 850E			.local	REMOVE_FLUX					; PROCEDURE
 16742
 16743 				; optimize OK (service.pas), line = 2907
 16744
 16745 850E A9 00			lda #$00
 16746 8510 8D AD A2			sta Y
 16747
 16748 8513			l_30FB
 16749 				; --- ForToDoCondition
 16750 8513 AC AD A2			ldy Y
 16751 8516 C0 14			cpy #$14
 16752 8518 B0 6C			jcs l_3109
 16753
 16754 				; optimize OK (service.pas), line = 2909
 16755
 16756 851A A9 D9			lda #$D9
 16757 851C 79 B0 C0			adc adr.ROW+$B0,y
 16758 851F 8D BB A0			sta BLITROW.DST
 16759 8522 A9 50			lda #$50
 16760 8524 79 AB C1			adc adr.ROW+251+$B0,y
 16761 8527 8D BC A0			sta BLITROW.DST+1
 16762 852A A9 00			lda #$00
 16763 852C 69 00			adc #$00
 16764 852E 8D BD A0			sta BLITROW.DST+2
 16765 8531 A9 00			lda #$00
 16766 8533 69 00			adc #$00
 16767 8535 8D BE A0			sta BLITROW.DST+3
 16768 8538 AD A7 9C			lda PLAYSCREEN.OFS
 16769 853B 18 69 D9			add #$D9
 16770 853E 85 A1			sta :STACKORIGIN+11
 16771 8540 AD A8 9C			lda PLAYSCREEN.OFS+1
 16772 8543 69 00			adc #$00
 16773 8545 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16774 8547 AD A9 9C			lda PLAYSCREEN.OFS+2
 16775 854A 69 00			adc #$00
 16776 854C 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16777 854E AD AA 9C			lda PLAYSCREEN.OFS+3
 16778 8551 69 00			adc #$00
 16779 8553 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16780 8555 A5 A1			lda :STACKORIGIN+11
 16781 8557 18 79 B0 C0			add adr.ROW+$B0,y
 16782 855B 8D B7 A0			sta BLITROW.SRC
 16783 855E A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16784 8560 79 AB C1			adc adr.ROW+251+$B0,y
 16785 8563 8D B8 A0			sta BLITROW.SRC+1
 16786 8566 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16787 8568 69 00			adc #$00
 16788 856A 8D B9 A0			sta BLITROW.SRC+2
 16789 856D A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16790 856F 69 00			adc #$00
 16791 8571 8D BA A0			sta BLITROW.SRC+3
 16792 8574 A9 08			lda #$08
 16793 8576 8D BF A0			sta BLITROW.SIZE
 16794 8579 A9 00			lda #$00
 16795 857B 8D C0 A0			sta BLITROW.SIZE+1
 16796 857E 20 F8 2B			jsr BLITROW
 16797
 16798 				; --- ForToDoEpilog
 16799 8581 EE AD A2			inc Y
 16800 8584 D0 8D			jne l_30FB
 16801 8586			l_3109
 16802
 16803 				; ------------------------------------------------------------
 16804
 16805 = A2AD			Y	= DATAORIGIN+$0711
 16806
 16807 = A2AD			@VarData	= Y
 16808 = 0001			@VarDataSize	= 1
 16809
 16810 8586			@exit
 16811 					.ifdef @new
 16812 					lda <@VarData
 16813 					sta :ztmp
 16814 					lda >@VarData
 16815 					ldy #@VarDataSize-1
 16816 					jmp @FreeMem
 16817 					els
 16818 8586 60				rts						; ret
 16819 					eif
 16820 				.endl
 16821
 16822 8587			.local	CHECK_FLUX					; PROCEDURE
 16823
 16824 				; optimize OK (service.pas), line = 2917
 16825
 16826 8587 AD 98 9D			lda SCRFLUXCNT
 16827 858A 8D AF A2			sta FX
 16828
 16829 				; optimize OK (service.pas), line = 2918
 16830
 16831 858D AD 97 9D			lda SCRFLUX
 16832 8590 D0 03 4C 23 86		jeq l_3148
 16833
 16834 				; optimize OK (service.pas), line = 2920
 16835
 16836 8595 A9 00			lda #$00
 16837 8597 8D AE A2			sta Y
 16838
 16839 859A			l_3152
 16840 				; --- ForToDoCondition
 16841 859A AC AE A2			ldy Y
 16842 859D C0 14			cpy #$14
 16843 859F B0 73			jcs l_3160
 16844
 16845 				; optimize OK (service.pas), line = 2922
 16846
 16847 85A1 A9 D9			lda #$D9
 16848 85A3 79 B0 C0			adc adr.ROW+$B0,y
 16849 85A6 8D BB A0			sta BLITROW.DST
 16850 85A9 A9 50			lda #$50
 16851 85AB 79 AB C1			adc adr.ROW+251+$B0,y
 16852 85AE 8D BC A0			sta BLITROW.DST+1
 16853 85B1 A9 00			lda #$00
 16854 85B3 69 00			adc #$00
 16855 85B5 8D BD A0			sta BLITROW.DST+2
 16856 85B8 A9 00			lda #$00
 16857 85BA 69 00			adc #$00
 16858 85BC 8D BE A0			sta BLITROW.DST+3
 16859 85BF AD AE A2			lda Y
 16860 85C2 18 6D AF A2			add FX
 16861 85C6 85 A2			sta :STACKORIGIN+12
 16862 85C8 A9 00			lda #$00
 16863 85CA 69 00			adc #$00
 16864 85CC 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 16865 85CE A9 00			lda #$00
 16866 85D0 06 A2			asl :STACKORIGIN+12
 16867 85D2 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16868 85D4 2A				rol @
 16869 85D5 06 A2			asl :STACKORIGIN+12
 16870 85D7 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16871 85D9 2A				rol @
 16872 85DA 06 A2			asl :STACKORIGIN+12
 16873 85DC 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16874 85DE 2A				rol @
 16875 85DF 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 16876 85E1 AD 17 9D			lda FLUX.OFS
 16877 85E4 18 65 A2			add :STACKORIGIN+12
 16878 85E7 8D B7 A0			sta BLITROW.SRC
 16879 85EA AD 18 9D			lda FLUX.OFS+1
 16880 85ED 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 16881 85EF 8D B8 A0			sta BLITROW.SRC+1
 16882 85F2 AD 19 9D			lda FLUX.OFS+2
 16883 85F5 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 16884 85F7 8D B9 A0			sta BLITROW.SRC+2
 16885 85FA AD 1A 9D			lda FLUX.OFS+3
 16886 85FD 69 00			adc #$00
 16887 85FF 8D BA A0			sta BLITROW.SRC+3
 16888 8602 A9 08			lda #$08
 16889 8604 8D BF A0			sta BLITROW.SIZE
 16890 8607 A9 00			lda #$00
 16891 8609 8D C0 A0			sta BLITROW.SIZE+1
 16892 860C 20 F8 2B			jsr BLITROW
 16893
 16894 				; --- ForToDoEpilog
 16895 860F EE AE A2			inc Y
 16896 8612 D0 86			jne l_3152
 16897 8614			l_3160
 16898
 16899 				; optimize FAIL (0, service.pas), line = 2924
 16900
 16901 8614 EE 98 9D			inc SCRFLUXCNT
 16902
 16903 				; optimize OK (service.pas), line = 2925
 16904
 16905 8617 AD 98 9D			lda SCRFLUXCNT
 16906 861A C9 15			cmp #$15
 16907 861C 90 05			jcc l_319F
 16908 861E A9 00			lda #$00
 16909 8620 8D 98 9D			sta SCRFLUXCNT
 16910 8623			l_319F
 16911 8623			l_3148
 16912
 16913 				; ------------------------------------------------------------
 16914
 16915 = A2AE			Y	= DATAORIGIN+$0712
 16916 = A2AF			FX	= DATAORIGIN+$0713
 16917
 16918 = A2AE			@VarData	= Y
 16919 = 0002			@VarDataSize	= 2
 16920
 16921 8623			@exit
 16922 					.ifdef @new
 16923 					lda <@VarData
 16924 					sta :ztmp
 16925 					lda >@VarData
 16926 					ldy #@VarDataSize-1
 16927 					jmp @FreeMem
 16928 					els
 16929 8623 60				rts						; ret
 16930 					eif
 16931 				.endl
 16932
 16933 8624			.local	VAUS_OUT					; PROCEDURE
 16934
 16935 				; optimize FAIL ('NOSOUND', service.pas), line = 2933
 16936
 16937 8624 20 0F 2D			jsr NOSOUND
 16938
 16939 				; optimize OK (service.pas), line = 2935
 16940
 16941 8627 AD 77 9D			lda CUR_PLAYER
 16942 862A 0A				asl @
 16943 862B 0A				asl @
 16944 862C A8				tay
 16945 862D B9 5C 9D			lda adr.SCORE.PLAYER,y
 16946 8630 18 69 10			add #$10
 16947 8633 99 5C 9D			sta adr.SCORE.PLAYER,y
 16948 8636 B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 16949 8639 69 27			adc #$27
 16950 863B 99 5D 9D			sta adr.SCORE.PLAYER+1,y
 16951 863E B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 16952 8641 69 00			adc #$00
 16953 8643 99 5E 9D			sta adr.SCORE.PLAYER+2,y
 16954 8646 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 16955 8649 69 00			adc #$00
 16956 864B 99 5F 9D			sta adr.SCORE.PLAYER+3,y
 16957
 16958 				; optimize OK (service.pas), line = 2936
 16959
 16960 864E A9 00			lda #$00
 16961 8650 8D 5A 9D			sta REMAIN_BLK
 16962
 16963 				; optimize OK (service.pas), line = 2938
 16964
 16965 8653 AD 1B 9D			lda VAUS.X
 16966 8656 8D B4 A2			sta Z
 16967 8659 A9 00			lda #$00
 16968 865B 8D B5 A2			sta Z+1
 16969
 16970 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2940
 16971
 16972 865E 20 6F 35			jsr WAIT_VBL
 16973
 16974 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2941
 16975
 16976 8661 20 CE 43			jsr REMOVE_VAUS
 16977
 16978 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2942
 16979
 16980 8664 20 A2 44			jsr PLACE_VAUS
 16981
 16982 				; optimize OK (service.pas), line = 2944
 16983
 16984 8667 AD B4 A2			lda Z
 16985 866A 8D B0 A2			sta X
 16986 866D AD B5 A2			lda Z+1
 16987 8670 8D B1 A2			sta X+1
 16988 8673 AD B4 A2			lda Z
 16989 8676 18 69 2C			add #$2C
 16990 8679 8D 8C 86			sta @FORTMP_31CA_0
 16991 867C AD B5 A2			lda Z+1
 16992 867F 69 00			adc #$00
 16993 8681 8D 85 86			sta @FORTMP_31CA_1
 16994
 16995 8684			l_31CD
 16996 				; --- ForToDoCondition
 16997 8684 A9 00			lda @FORTMP_31CA_1::#$00
 16998 8686 CD B1 A2			cmp X+1
 16999 8689 D0 05			bne @+
 17000 868B A9 00			lda @FORTMP_31CA_0::#$00
 17001 868D CD B0 A2			cmp X
 17002 				@
 17003 8690 B0 03 4C 64 87		jcc l_31D9
 17004
 17005 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2946
 17006
 17007 8695 20 6F 35			jsr WAIT_VBL
 17008
 17009 				; optimize OK (service.pas), line = 2948
 17010
 17011 8698 AD 1B 9D			lda VAUS.X
 17012 869B 8D 1D 9D			sta VAUS.OLDX
 17013 869E A9 00			lda #$00
 17014 86A0 8D 1E 9D			sta VAUS.OLDX+1
 17015
 17016 				; optimize OK (service.pas), line = 2949
 17017
 17018 86A3 AD B0 A2			lda X
 17019 86A6 8D 1B 9D			sta VAUS.X
 17020
 17021 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2950
 17022
 17023 86A9 20 CE 43			jsr REMOVE_VAUS
 17024
 17025 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 2951
 17026
 17027 86AC 20 87 85			jsr CHECK_FLUX
 17028
 17029 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2952
 17030
 17031 86AF 20 A2 44			jsr PLACE_VAUS
 17032
 17033 				; optimize OK (service.pas), line = 2954
 17034
 17035 86B2 AD 1C 9D			lda VAUS.Y
 17036 86B5 8D B2 A2			sta Y
 17037 86B8 A9 00			lda #$00
 17038 86BA 8D B3 A2			sta Y+1
 17039 86BD AD 1C 9D			lda VAUS.Y
 17040 86C0 18 6D 24 9D			add VAUS.HEIGHT
 17041 86C4 8D D6 86			sta @FORTMP_31F8_0
 17042 86C7 A9 00			lda #$00
 17043 86C9 69 00			adc #$00
 17044 86CB 8D CF 86			sta @FORTMP_31F8_1
 17045
 17046 86CE			l_31FB
 17047 				; --- ForToDoCondition
 17048 86CE A9 00			lda @FORTMP_31F8_1::#$00
 17049 86D0 CD B3 A2			cmp Y+1
 17050 86D3 D0 05			bne @+
 17051 86D5 A9 00			lda @FORTMP_31F8_0::#$00
 17052 86D7 CD B2 A2			cmp Y
 17053 				@
 17054 86DA 90 78			jcc l_3207
 17055
 17056 				; optimize OK (service.pas), line = 2956
 17057
 17058 86DC AC B2 A2			ldy Y
 17059 86DF A9 E1			lda #$E1
 17060 86E1 18 79 00 C0			add adr.ROW,y
 17061 86E5 8D BB A0			sta BLITROW.DST
 17062 86E8 A9 50			lda #$50
 17063 86EA 79 FB C0			adc adr.ROW+251,y
 17064 86ED 8D BC A0			sta BLITROW.DST+1
 17065 86F0 A9 00			lda #$00
 17066 86F2 69 00			adc #$00
 17067 86F4 8D BD A0			sta BLITROW.DST+2
 17068 86F7 A9 00			lda #$00
 17069 86F9 69 00			adc #$00
 17070 86FB 8D BE A0			sta BLITROW.DST+3
 17071 86FE AD A7 9C			lda PLAYSCREEN.OFS
 17072 8701 18 69 E1			add #$E1
 17073 8704 85 A1			sta :STACKORIGIN+11
 17074 8706 AD A8 9C			lda PLAYSCREEN.OFS+1
 17075 8709 69 00			adc #$00
 17076 870B 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 17077 870D AD A9 9C			lda PLAYSCREEN.OFS+2
 17078 8710 69 00			adc #$00
 17079 8712 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 17080 8714 AD AA 9C			lda PLAYSCREEN.OFS+3
 17081 8717 69 00			adc #$00
 17082 8719 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 17083 871B A5 A1			lda :STACKORIGIN+11
 17084 871D 18 79 00 C0			add adr.ROW,y
 17085 8721 8D B7 A0			sta BLITROW.SRC
 17086 8724 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 17087 8726 79 FB C0			adc adr.ROW+251,y
 17088 8729 8D B8 A0			sta BLITROW.SRC+1
 17089 872C A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 17090 872E 69 00			adc #$00
 17091 8730 8D B9 A0			sta BLITROW.SRC+2
 17092 8733 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 17093 8735 69 00			adc #$00
 17094 8737 8D BA A0			sta BLITROW.SRC+3
 17095 873A A9 28			lda #$28
 17096 873C 8D BF A0			sta BLITROW.SIZE
 17097 873F A9 00			lda #$00
 17098 8741 8D C0 A0			sta BLITROW.SIZE+1
 17099 8744 20 F8 2B			jsr BLITROW
 17100
 17101 				; --- ForToDoEpilog
 17102 8747 EE B2 A2			inc Y
 17103 874A D0 82			jne l_31FB
 17104 874C EE B3 A2			inc Y+1
 17105 874F F0 03 4C CE 86		jne l_31FB
 17106 8754			l_3207
 17107
 17108 				; --- ForToDoEpilog
 17109 8754 EE B0 A2			inc X
 17110 8757 F0 03 4C 84 86		jne l_31CD
 17111 875C EE B1 A2			inc X+1
 17112 875F F0 03 4C 84 86		jne l_31CD
 17113 8764			l_31D9
 17114
 17115 				; ------------------------------------------------------------
 17116
 17117 = A2B0			X	= DATAORIGIN+$0714
 17118 = A2B2			Y	= DATAORIGIN+$0716
 17119 = A2B4			Z	= DATAORIGIN+$0718
 17120
 17121 = A2B0			@VarData	= X
 17122 = 0006			@VarDataSize	= 6
 17123
 17124 8764			@exit
 17125 					.ifdef @new
 17126 					lda <@VarData
 17127 					sta :ztmp
 17128 					lda >@VarData
 17129 					ldy #@VarDataSize-1
 17130 					jmp @FreeMem
 17131 					els
 17132 8764 60				rts						; ret
 17133 					eif
 17134 				.endl
 17135
 17136 8765			.local	CHECK_BONUS_TYPE				; PROCEDURE
 17137
 17138 				; optimize OK (service.pas), line = 2966
 17139
 17140 8765 AD 27 9D			lda VAUS.LETTER
 17141 8768 10 03 4C 1B 88		jmi l_3241
 17142 876D D0 03 4C 1B 88		jeq l_3241
 17143
 17144 				; optimize OK (service.pas), line = 2968
 17145
 17146 8772 A0 00			ldy #$00
 17147 8774 AD 27 9D			lda VAUS.LETTER
 17148 8777 10 01			spl
 17149 8779 88				dey
 17150 877A 38 E9 01			sub #$01
 17151 877D 8D 8F 9D			sta LETT.LAST
 17152 8780 98				tya
 17153 8781 E9 00			sbc #$00
 17154 8783 8D 90 9D			sta LETT.LAST+1
 17155
 17156 				; optimize OK (service.pas), line = 2969
 17157
 17158 8786 AC BE A2 84 84 AC + 	mwy B2 :bp2
 17159 8790 A0 17			ldy #B2.INPLAY-DATAORIGIN
 17160 8792 B1 84			lda (:bp2),y
 17161 8794 F0 0F			jeq l_3258
 17162 8796 AD BE A2			lda B2
 17163 8799 8D 3E A1			sta REMOVE_BALL.BALL
 17164 879C AD BF A2			lda B2+1
 17165 879F 8D 3F A1			sta REMOVE_BALL.BALL+1
 17166 87A2 20 B3 34			jsr REMOVE_BALL
 17167 87A5			l_3258
 17168
 17169 				; optimize OK (service.pas), line = 2970
 17170
 17171 87A5 AC C2 A2 84 84 AC + 	mwy B3 :bp2
 17172 87AF A0 17			ldy #B3.INPLAY-DATAORIGIN
 17173 87B1 B1 84			lda (:bp2),y
 17174 87B3 F0 0F			jeq l_326A
 17175 87B5 AD C2 A2			lda B3
 17176 87B8 8D 3E A1			sta REMOVE_BALL.BALL
 17177 87BB AD C3 A2			lda B3+1
 17178 87BE 8D 3F A1			sta REMOVE_BALL.BALL+1
 17179 87C1 20 B3 34			jsr REMOVE_BALL
 17180 87C4			l_326A
 17181
 17182 				; optimize OK (service.pas), line = 2971
 17183
 17184 87C4 AC BE A2 84 84 AC + 	mwy B2 :bp2
 17185 87CE A0 17			ldy #B2.INPLAY-DATAORIGIN
 17186 87D0 A9 00			lda #$00
 17187 87D2 91 84			sta (:bp2),y
 17188
 17189 				; optimize OK (service.pas), line = 2972
 17190
 17191 87D4 AC C2 A2 84 84 AC + 	mwy B3 :bp2
 17192 87DE A0 17			ldy #B3.INPLAY-DATAORIGIN
 17193 87E0 91 84			sta (:bp2),y
 17194
 17195 				; optimize OK (service.pas), line = 2973
 17196
 17197 87E2 8D 97 9D			sta SCRFLUX
 17198
 17199 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 2974
 17200
 17201 87E5 20 0E 85			jsr REMOVE_FLUX
 17202
 17203 				; optimize OK (service.pas), line = 2976
 17204
 17205 87E8 AD 27 9D			lda VAUS.LETTER
 17206 87EB C9 06			cmp #$06
 17207 87ED F0 2C			jeq l_328F
 17208
 17209 				; optimize OK (service.pas), line = 2978
 17210
 17211 87EF AC BA A2 84 84 AC + 	mwy B1 :bp2
 17212 87F9 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 17213 87FB A9 00			lda #$00
 17214 87FD 91 84			sta (:bp2),y
 17215
 17216 				; optimize OK (service.pas), line = 2979
 17217
 17218 87FF AC BE A2 84 84 AC + 	mwy B2 :bp2
 17219 8809 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 17220 880B 91 84			sta (:bp2),y
 17221
 17222 				; optimize OK (service.pas), line = 2980
 17223
 17224 880D AC C2 A2 84 84 AC + 	mwy B3 :bp2
 17225 8817 A0 18			ldy #B3.LAUNCH-DATAORIGIN
 17226 8819 91 84			sta (:bp2),y
 17227 881B			l_328F
 17228 881B			l_3241
 17229
 17230 				; optimize OK (service.pas), line = 2984
 17231
 17232 881B AD 27 9D			lda VAUS.LETTER
 17233 881E 8D C8 A2			sta @CASETMP_0009
 17234 8821 C9 01			cmp #$01
 17235 8823 D0 4D			jne l_32AB
 17236 				@
 17237
 17238 				; optimize OK (service.pas), line = 2987
 17239
 17240 8825 AD 93 9D			lda FIRE.SHOT
 17241 8828 F0 03			jeq l_32B7
 17242 882A 20 76 82			jsr REMOVE_FIRE
 17243 882D			l_32B7
 17244
 17245 				; optimize OK (service.pas), line = 2988
 17246
 17247 882D AD C3 9C 8D AB 9C + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 17248
 17249 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2989
 17250
 17251 885D 20 04 43			jsr MODIFY_VAUS
 17252
 17253 				; optimize OK (service.pas), line = 2990
 17254
 17255 8860 A9 00			lda #$00
 17256 8862 8D 27 9D			sta VAUS.LETTER
 17257
 17258 				; optimize OK (service.pas), line = 2991
 17259
 17260 8865 A9 01			lda #$01
 17261 8867 8D 94 9D			sta FIRE.AVL
 17262
 17263 				; optimize OK (service.pas), line = 2992
 17264
 17265 886A A9 00			lda #$00
 17266 886C 8D 93 9D			sta FIRE.SHOT
 17267 886F 4C A0 8A			jmp a_0009
 17268 8872			l_32AB
 17269 8872 C9 02			cmp #$02
 17270 8874 D0 46			jne l_32D1
 17271
 17272 				; optimize OK (service.pas), line = 2996
 17273
 17274 8876 AD 93 9D			lda FIRE.SHOT
 17275 8879 F0 03			jeq l_32DD
 17276 887B 20 76 82			jsr REMOVE_FIRE
 17277 887E			l_32DD
 17278
 17279 				; optimize OK (service.pas), line = 2997
 17280
 17281 887E AD BB 9C 8D AB 9C + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 17282
 17283 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2998
 17284
 17285 88AE 20 04 43			jsr MODIFY_VAUS
 17286
 17287 				; optimize OK (service.pas), line = 2999
 17288
 17289 88B1 A9 00			lda #$00
 17290 88B3 8D 27 9D			sta VAUS.LETTER
 17291
 17292 				; optimize OK (service.pas), line = 3000
 17293
 17294 88B6 8D 94 9D			sta FIRE.AVL
 17295 88B9 4C A0 8A			jmp a_0009
 17296 88BC			l_32D1
 17297 88BC C9 03			cmp #$03
 17298 88BE D0 4B			jne l_32F3
 17299
 17300 				; optimize OK (service.pas), line = 3004
 17301
 17302 88C0 AD 93 9D			lda FIRE.SHOT
 17303 88C3 F0 03			jeq l_32FF
 17304 88C5 20 76 82			jsr REMOVE_FIRE
 17305 88C8			l_32FF
 17306
 17307 				; optimize OK (service.pas), line = 3005
 17308
 17309 88C8 AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17310
 17311 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3006
 17312
 17313 88F8 20 04 43			jsr MODIFY_VAUS
 17314
 17315 				; optimize OK (service.pas), line = 3007
 17316
 17317 88FB A9 00			lda #$00
 17318 88FD 8D 27 9D			sta VAUS.LETTER
 17319
 17320 				; optimize OK (service.pas), line = 3008
 17321
 17322 8900 8D 94 9D			sta FIRE.AVL
 17323
 17324 				; optimize OK (service.pas), line = 3009
 17325
 17326 8903 A9 01			lda #$01
 17327 8905 8D 97 9D			sta SCRFLUX
 17328 8908 4C A0 8A			jmp a_0009
 17329 890B			l_32F3
 17330 890B C9 04			cmp #$04
 17331 890D D0 3E			jne l_3319
 17332
 17333 				; optimize OK (service.pas), line = 3013
 17334
 17335 890F AD 93 9D			lda FIRE.SHOT
 17336 8912 F0 03			jeq l_3325
 17337 8914 20 76 82			jsr REMOVE_FIRE
 17338 8917			l_3325
 17339
 17340 				; optimize OK (service.pas), line = 3014
 17341
 17342 8917 AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17343
 17344 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3015
 17345
 17346 8947 20 04 43			jsr MODIFY_VAUS
 17347 				; optimize OK (service.pas), line = 3016
 17348 894A 4C E4 89			jmp s_3362
 17349 894D			l_3319
 17350 894D C9 05			cmp #$05
 17351 894F F0 03 4C E7 89		jne l_3337
 17352
 17353 				; optimize OK (service.pas), line = 3020
 17354
 17355 8954 AD 93 9D			lda FIRE.SHOT
 17356 8957 F0 03			jeq l_3343
 17357 8959 20 76 82			jsr REMOVE_FIRE
 17358 895C			l_3343
 17359
 17360 				; optimize OK (service.pas), line = 3021
 17361
 17362 895C AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17363
 17364 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3022
 17365
 17366 898C 20 04 43			jsr MODIFY_VAUS
 17367
 17368 				; optimize OK (service.pas), line = 3023
 17369
 17370 898F A9 00			lda #$00
 17371 8991 8D 27 9D			sta VAUS.LETTER
 17372
 17373 				; optimize OK (service.pas), line = 3024
 17374
 17375 8994 AC BA A2 84 84 AC + 	mwy B1 :bp2
 17376 899E A0 0C			ldy #B1.SPEED-DATAORIGIN
 17377 89A0 B1 84			lda (:bp2),y
 17378 89A2 38 E9 F4			sub #$F4
 17379 89A5 8D D8 A0			sta MAX.A
 17380 89A8 C8				iny
 17381 89A9 B1 84			lda (:bp2),y
 17382 89AB E9 01			sbc #$01
 17383 89AD 8D D9 A0			sta MAX.A+1
 17384 89B0 A9 F4			lda #$F4
 17385 89B2 8D DA A0			sta MAX.B
 17386 89B5 A9 01			lda #$01
 17387 89B7 8D DB A0			sta MAX.B+1
 17388 89BA 20 11 2D			jsr MAX
 17389 89BD AD DC A0			lda MAX.RESULT
 17390 89C0 8D C6 A2			sta X
 17391 89C3 AD DD A0			lda MAX.RESULT+1
 17392 89C6 8D C7 A2			sta X+1
 17393
 17394 				; optimize OK (service.pas), line = 3025
 17395
 17396 89C9 AD BA A2			lda B1
 17397 89CC 8D 49 A1			sta SET_BALL_SPEED.BALL
 17398 89CF AD BB A2			lda B1+1
 17399 89D2 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 17400 89D5 AD C6 A2			lda X
 17401 89D8 8D 4D A1			sta SET_BALL_SPEED.SPEED
 17402 89DB AD C7 A2			lda X+1
 17403 89DE 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 17404 89E1 20 55 36			jsr SET_BALL_SPEED
 17405 89E4			s_3362
 17406 				; optimize OK (service.pas), line = 3026
 17407 89E4 4C 26 8A			jmp s_3380
 17408 89E7			l_3337
 17409 89E7 C9 06			cmp #$06
 17410 89E9 D0 3E			jne l_3369
 17411
 17412 				; optimize OK (service.pas), line = 3030
 17413
 17414 89EB AD 93 9D			lda FIRE.SHOT
 17415 89EE F0 03			jeq l_3375
 17416 89F0 20 76 82			jsr REMOVE_FIRE
 17417 89F3			l_3375
 17418
 17419 				; optimize OK (service.pas), line = 3031
 17420
 17421 89F3 AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17422
 17423 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3032
 17424
 17425 8A23 20 04 43			jsr MODIFY_VAUS
 17426 8A26			s_3380
 17427 				; optimize OK (service.pas), line = 3033
 17428 8A26 4C 9B 8A			jmp s_33B0
 17429 8A29			l_3369
 17430 8A29 C9 07			cmp #$07
 17431 8A2B D0 73			jne l_3387
 17432
 17433 				; optimize OK (service.pas), line = 3037
 17434
 17435 8A2D AD 93 9D			lda FIRE.SHOT
 17436 8A30 F0 03			jeq l_3393
 17437 8A32 20 76 82			jsr REMOVE_FIRE
 17438 8A35			l_3393
 17439
 17440 				; optimize OK (service.pas), line = 3038
 17441
 17442 8A35 AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17443
 17444 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3039
 17445
 17446 8A65 20 04 43			jsr MODIFY_VAUS
 17447
 17448 				; optimize OK (service.pas), line = 3040
 17449
 17450 8A68 A9 00			lda #$00
 17451 8A6A 8D 27 9D			sta VAUS.LETTER
 17452
 17453 				; optimize OK (service.pas), line = 3041
 17454
 17455 8A6D AC 77 9D			ldy CUR_PLAYER
 17456 8A70 B9 6B 9D			lda adr.SCORE.LIVES,y
 17457 8A73 18 69 01			add #$01
 17458 8A76 99 6B 9D			sta adr.SCORE.LIVES,y
 17459
 17460 				; optimize OK (service.pas), line = 3042
 17461
 17462 8A79 8D 8E A2			sta PLOT_LIVES.LIVES
 17463 8A7C A9 00			lda #$00
 17464 8A7E 8D 8F A2			sta PLOT_LIVES.LIVES+1
 17465 8A81 20 05 7F			jsr PLOT_LIVES
 17466
 17467 				; optimize OK (service.pas), line = 3043
 17468
 17469 8A84 A9 D0			lda #$D0
 17470 8A86 8D 89 9C			sta BALL_BLOCK_SOUND.A
 17471 8A89 A9 07			lda #$07
 17472 8A8B 8D 8A 9C			sta BALL_BLOCK_SOUND.A+1
 17473 8A8E A9 0A			lda #$0A
 17474 8A90 8D 8B 9C			sta BALL_BLOCK_SOUND.B
 17475 8A93 A9 00			lda #$00
 17476 8A95 8D 8C 9C			sta BALL_BLOCK_SOUND.B+1
 17477 8A98 20 6B 2A			jsr BALL_BLOCK_SOUND
 17478 8A9B			s_33B0
 17479
 17480 				; optimize OK (service.pas), line = 3044
 17481
 17482 8A9B A9 00			lda #$00
 17483 8A9D 8D 94 9D			sta FIRE.AVL
 17484 8AA0			l_3387
 17485 8AA0			a_0009
 17486
 17487 				; ------------------------------------------------------------
 17488
 17489 = A2BA			B1	= DATAORIGIN+$071E
 17490 = 9B9C			B1.X	= DATAORIGIN+$0000
 17491 = 9B9E			B1.Y	= DATAORIGIN+$0002
 17492 = 9BA0			B1.FINEX	= DATAORIGIN+$0004
 17493 = 9BA2			B1.FINEY	= DATAORIGIN+$0006
 17494 = 9BA4			B1.OLDX	= DATAORIGIN+$0008
 17495 = 9BA6			B1.OLDY	= DATAORIGIN+$000A
 17496 = 9BA8			B1.SPEED	= DATAORIGIN+$000C
 17497 = 9BAA			B1.FINESPEED	= DATAORIGIN+$000E
 17498 = 9BAC			B1.SPEEDX	= DATAORIGIN+$0010
 17499 = 9BAE			B1.SPEEDY	= DATAORIGIN+$0012
 17500 = 9BB0			B1.SBD	= DATAORIGIN+$0014
 17501 = 9BB2			B1.BRWHIT	= DATAORIGIN+$0016
 17502 = 9BB3			B1.INPLAY	= DATAORIGIN+$0017
 17503 = 9BB4			B1.LAUNCH	= DATAORIGIN+$0018
 17504 = 9BB5			B1.ONVAUS	= DATAORIGIN+$0019
 17505 = 9BB6			B1.STM	= DATAORIGIN+$001A
 17506 = A2BE			B2	= DATAORIGIN+$0722
 17507 = 9B9C			B2.X	= DATAORIGIN+$0000
 17508 = 9B9E			B2.Y	= DATAORIGIN+$0002
 17509 = 9BA0			B2.FINEX	= DATAORIGIN+$0004
 17510 = 9BA2			B2.FINEY	= DATAORIGIN+$0006
 17511 = 9BA4			B2.OLDX	= DATAORIGIN+$0008
 17512 = 9BA6			B2.OLDY	= DATAORIGIN+$000A
 17513 = 9BA8			B2.SPEED	= DATAORIGIN+$000C
 17514 = 9BAA			B2.FINESPEED	= DATAORIGIN+$000E
 17515 = 9BAC			B2.SPEEDX	= DATAORIGIN+$0010
 17516 = 9BAE			B2.SPEEDY	= DATAORIGIN+$0012
 17517 = 9BB0			B2.SBD	= DATAORIGIN+$0014
 17518 = 9BB2			B2.BRWHIT	= DATAORIGIN+$0016
 17519 = 9BB3			B2.INPLAY	= DATAORIGIN+$0017
 17520 = 9BB4			B2.LAUNCH	= DATAORIGIN+$0018
 17521 = 9BB5			B2.ONVAUS	= DATAORIGIN+$0019
 17522 = 9BB6			B2.STM	= DATAORIGIN+$001A
 17523 = A2C2			B3	= DATAORIGIN+$0726
 17524 = 9B9C			B3.X	= DATAORIGIN+$0000
 17525 = 9B9E			B3.Y	= DATAORIGIN+$0002
 17526 = 9BA0			B3.FINEX	= DATAORIGIN+$0004
 17527 = 9BA2			B3.FINEY	= DATAORIGIN+$0006
 17528 = 9BA4			B3.OLDX	= DATAORIGIN+$0008
 17529 = 9BA6			B3.OLDY	= DATAORIGIN+$000A
 17530 = 9BA8			B3.SPEED	= DATAORIGIN+$000C
 17531 = 9BAA			B3.FINESPEED	= DATAORIGIN+$000E
 17532 = 9BAC			B3.SPEEDX	= DATAORIGIN+$0010
 17533 = 9BAE			B3.SPEEDY	= DATAORIGIN+$0012
 17534 = 9BB0			B3.SBD	= DATAORIGIN+$0014
 17535 = 9BB2			B3.BRWHIT	= DATAORIGIN+$0016
 17536 = 9BB3			B3.INPLAY	= DATAORIGIN+$0017
 17537 = 9BB4			B3.LAUNCH	= DATAORIGIN+$0018
 17538 = 9BB5			B3.ONVAUS	= DATAORIGIN+$0019
 17539 = 9BB6			B3.STM	= DATAORIGIN+$001A
 17540 = A2C6			X	= DATAORIGIN+$072A
 17541 = A2C8			@CASETMP_0009	= DATAORIGIN+$072C
 17542
 17543 = A2BA			@VarData	= B1
 17544 = 0009			@VarDataSize	= 9
 17545
 17546 8AA0			@exit
 17547 					.ifdef @new
 17548 					lda <@VarData
 17549 					sta :ztmp
 17550 					lda >@VarData
 17551 					ldy #@VarDataSize-1
 17552 					jmp @FreeMem
 17553 					els
 17554 8AA0 60				rts						; ret
 17555 					eif
 17556 				.endl
 17557
 17558 8AA1			.local	DEVIATE_BALL					; PROCEDURE
 17559
 17560 				; --- RepeatUntilProlog
 17561 8AA1			l_33BE
 17562
 17563 				; optimize OK (service.pas), line = 3057
 17564
 17565 8AA1 AD C9 A2			lda BALL
 17566 8AA4 8D 61 A1			sta GET_BALL_DIRECTION.BALL
 17567 8AA7 AD CA A2			lda BALL+1
 17568 8AAA 8D 62 A1			sta GET_BALL_DIRECTION.BALL+1
 17569 8AAD 20 F0 39			jsr GET_BALL_DIRECTION
 17570 8AB0 E8				inx
 17571 8AB1 AD 65 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 17572 8AB6 AD 66 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17573 8ABB A9 1E			lda #$1E
 17574 8ABD 20 3B 25			jsr SYSTEM.RANDOM.@010180000
 17575 8AC0 E8				inx
 17576 8AC1 AD E1 9B 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 17577 8AC6 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17578 8ACA 20 B5 10			jsr addAX_CX
 17579 8ACD B5 95			lda :STACKORIGIN-1,x
 17580 8ACF 38 E9 0F			sub #$0F
 17581 8AD2 8D CD A2			sta TEMP
 17582 8AD5 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 17583 8AD7 E9 00			sbc #$00
 17584 8AD9 8D CE A2			sta TEMP+1
 17585 8ADC CA				dex
 17586 8ADD CA				dex
 17587
 17588 				; optimize OK (service.pas), line = 3058
 17589
 17590 8ADE A9 5A			lda #$5A
 17591 8AE0 85 8E			sta @SMALLINT.MOD.B
 17592 8AE2 A9 00			lda #$00
 17593 8AE4 85 8F			sta @SMALLINT.MOD.B+1
 17594 8AE6 AD CD A2			lda TEMP
 17595 8AE9 85 86			sta @SMALLINT.MOD.A
 17596 8AEB AD CE A2			lda TEMP+1
 17597 8AEE 85 87			sta @SMALLINT.MOD.A+1
 17598 8AF0 20 7F 12			jsr @SMALLINT.MOD
 17599 8AF3 A5 92			lda @SMALLINT.MOD.RESULT
 17600 8AF5 C9 1F			cmp #$1F
 17601 8AF7 A5 93			lda @SMALLINT.MOD.RESULT+1
 17602 8AF9 E9 00			sbc #$00
 17603 8AFB 50 02			svc
 17604 8AFD 49 80			eor #$80
 17605 8AFF 30 A0			jmi l_33BE
 17606 8B01 A9 5A			lda #$5A
 17607 8B03 85 8E			sta @SMALLINT.MOD.B
 17608 8B05 A9 00			lda #$00
 17609 8B07 85 8F			sta @SMALLINT.MOD.B+1
 17610 8B09 AD CD A2			lda TEMP
 17611 8B0C 85 86			sta @SMALLINT.MOD.A
 17612 8B0E AD CE A2			lda TEMP+1
 17613 8B11 85 87			sta @SMALLINT.MOD.A+1
 17614 8B13 20 7F 12			jsr @SMALLINT.MOD
 17615 8B16 A5 92			lda @SMALLINT.MOD.RESULT
 17616 8B18 C9 3C			cmp #$3C
 17617 8B1A A5 93			lda @SMALLINT.MOD.RESULT+1
 17618 8B1C E9 00			sbc #$00
 17619 8B1E 50 02			svc
 17620 8B20 49 80			eor #$80
 17621 8B22 30 03 4C A1 8A		jpl l_33BE
 17622
 17623 				; optimize OK (service.pas), line = 3060
 17624
 17625 8B27 AD C9 A2			lda BALL
 17626 8B2A 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 17627 8B2D AD CA A2			lda BALL+1
 17628 8B30 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 17629 8B33 AD CD A2			lda TEMP
 17630 8B36 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 17631 8B39 AD CE A2			lda TEMP+1
 17632 8B3C 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 17633 8B3F 20 65 38			jsr SET_BALL_DIRECTION
 17634
 17635 				; optimize OK (service.pas), line = 3061
 17636
 17637 8B42 AC C9 A2 84 84 AC + 	mwy BALL :bp2
 17638 8B4C A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17639 8B4E B1 84			lda (:bp2),y
 17640 8B50 8D 4D A1			sta SET_BALL_SPEED.SPEED
 17641 8B53 C8				iny
 17642 8B54 B1 84			lda (:bp2),y
 17643 8B56 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 17644 8B59 AD C9 A2			lda BALL
 17645 8B5C 8D 49 A1			sta SET_BALL_SPEED.BALL
 17646 8B5F AD CA A2			lda BALL+1
 17647 8B62 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 17648 8B65 20 55 36			jsr SET_BALL_SPEED
 17649
 17650 				; optimize OK (service.pas), line = 3062
 17651
 17652 8B68 AC C9 A2 84 84 AC + 	mwy BALL :bp2
 17653 8B72 A0 14			ldy #BALL.SBD-DATAORIGIN
 17654 8B74 A9 00			lda #$00
 17655 8B76 91 84			sta (:bp2),y
 17656 8B78 C8				iny
 17657 8B79 91 84			sta (:bp2),y
 17658
 17659 				; ------------------------------------------------------------
 17660
 17661 = A2C9			BALL	= DATAORIGIN+$072D
 17662 = 9B9C			BALL.X	= DATAORIGIN+$0000
 17663 = 9B9E			BALL.Y	= DATAORIGIN+$0002
 17664 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
 17665 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
 17666 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
 17667 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
 17668 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
 17669 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
 17670 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
 17671 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
 17672 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
 17673 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
 17674 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
 17675 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
 17676 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
 17677 = 9BB6			BALL.STM	= DATAORIGIN+$001A
 17678 = A2CD			TEMP	= DATAORIGIN+$0731
 17679
 17680 = A2C9			@VarData	= BALL
 17681 = 0004			@VarDataSize	= 4
 17682
 17683 8B7B			@exit
 17684 					.ifdef @new
 17685 					lda <@VarData
 17686 					sta :ztmp
 17687 					lda >@VarData
 17688 					ldy #@VarDataSize-1
 17689 					jmp @FreeMem
 17690 					els
 17691 8B7B 60				rts						; ret
 17692 					eif
 17693 				.endl
 17694
 17695 8B7C			.local	BOUNCEBALL					; FUNCTION
 17696
 17697 8B7C 4C F1 8C			jmp l_33FE
 17698
 17699 8B7F			.local	CHECK_BALL					; PROCEDURE
 17700
 17701 				; optimize OK (service.pas), line = 3092
 17702
 17703 8B7F AC 2E A3 84 84 AC + 	mwy BALL :bp2
 17704 8B89 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17705 8B8B B1 84			lda (:bp2),y
 17706 8B8D F0 65			jeq l_340D
 17707
 17708 				; optimize OK (service.pas), line = 3095
 17709
 17710 8B8F A0 02			ldy #BALL.Y-DATAORIGIN
 17711 8B91 B1 84			lda (:bp2),y
 17712 8B93 C8				iny
 17713 8B94 C9 16			cmp #$16
 17714 8B96 B1 84			lda (:bp2),y
 17715 8B98 E9 00			sbc #$00
 17716 8B9A 50 02			svc
 17717 8B9C 49 80			eor #$80
 17718 8B9E 30 20			jmi l_342A
 17719 8BA0 A0 02			ldy #BALL.Y-DATAORIGIN
 17720 8BA2 B1 84			lda (:bp2),y
 17721 8BA4 C8				iny
 17722 8BA5 C9 8E			cmp #$8E
 17723 8BA7 B1 84			lda (:bp2),y
 17724 8BA9 E9 00			sbc #$00
 17725 8BAB 50 02			svc
 17726 8BAD 49 80			eor #$80
 17727 8BAF 10 0F			jpl l_342A
 17728
 17729 				; optimize OK (service.pas), line = 3096
 17730
 17731 8BB1 AD 2E A3			lda BALL
 17732 8BB4 8D F8 A1			sta BALL_HIT_BLOCK.BALL
 17733 8BB7 AD 2F A3			lda BALL+1
 17734 8BBA 8D F9 A1			sta BALL_HIT_BLOCK.BALL+1
 17735 8BBD 20 4C 5D			jsr BALL_HIT_BLOCK
 17736 8BC0			l_342A
 17737
 17738 				; optimize OK (service.pas), line = 3098
 17739
 17740 8BC0 AD 2E A3			lda BALL
 17741 8BC3 8D 45 A1			sta SET_BALL.BALL
 17742 8BC6 AD 2F A3			lda BALL+1
 17743 8BC9 8D 46 A1			sta SET_BALL.BALL+1
 17744 8BCC 20 70 35			jsr SET_BALL
 17745
 17746 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3099
 17747
 17748 8BCF E8				inx
 17749 8BD0 AD 2E A3 95 96		mva BALL :STACKORIGIN,x
 17750 8BD5 AD 2F A3 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 17751 8BDA 20 FD 3B			jsr BALL_SPEED
 17752 8BDD AC 2E A3 84 84 AC + 	mwy BALL :bp2
 17753 8BE7 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17754 8BE9 AD 88 A1			lda BALL_SPEED.RESULT
 17755 8BEC 91 84			sta (:bp2),y
 17756 8BEE C8				iny
 17757 8BEF AD 89 A1			lda BALL_SPEED.RESULT+1
 17758 8BF2 91 84			sta (:bp2),y
 17759 8BF4			l_340D
 17760
 17761 				; ------------------------------------------------------------
 17762
 17763 = A32E			BALL	= DATAORIGIN+$0792
 17764 = 9B9C			BALL.X	= DATAORIGIN+$0000
 17765 = 9B9E			BALL.Y	= DATAORIGIN+$0002
 17766 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
 17767 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
 17768 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
 17769 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
 17770 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
 17771 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
 17772 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
 17773 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
 17774 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
 17775 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
 17776 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
 17777 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
 17778 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
 17779 = 9BB6			BALL.STM	= DATAORIGIN+$001A
 17780
 17781 = A32E			@VarData	= BALL
 17782 = 0002			@VarDataSize	= 2
 17783
 17784 8BF4			@exit
 17785 					.ifdef @new
 17786 					lda <@VarData
 17787 					sta :ztmp
 17788 					lda >@VarData
 17789 					ldy #@VarDataSize-1
 17790 					jmp @FreeMem
 17791 					els
 17792 8BF4 60				rts						; ret
 17793 					eif
 17794 				.endl
 17795
 17796 8BF5			.local	TEST_BALL					; PROCEDURE
 17797
 17798 				; optimize OK (service.pas), line = 3107
 17799
 17800 8BF5 AC 32 A3 84 84 AC + 	mwy BALL :bp2
 17801 8BFF A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17802 8C01 B1 84			lda (:bp2),y
 17803 8C03 D0 03 4C F0 8C		jeq l_344B
 17804
 17805 				; optimize OK (service.pas), line = 3109
 17806
 17807 8C08 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17808 8C0A B1 84			lda (:bp2),y
 17809 8C0C 18 69 01			add #$01
 17810 8C0F 91 84			sta (:bp2),y
 17811 8C11 C8				iny
 17812 8C12 B1 84			lda (:bp2),y
 17813 8C14 69 00			adc #$00
 17814 8C16 91 84			sta (:bp2),y
 17815
 17816 				; optimize OK (service.pas), line = 3111
 17817
 17818 8C18 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17819 8C1A B1 84			lda (:bp2),y
 17820 8C1C 85 9F			sta :STACKORIGIN+9
 17821 8C1E C8				iny
 17822 8C1F B1 84			lda (:bp2),y
 17823 8C21 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17824 8C23 AD 7D 9D			lda LV
 17825 8C26 0A				asl @
 17826 8C27 A8				tay
 17827 8C28 B9 A1 10			lda adr.LEVEL,y
 17828 8C2B 85 A0			sta :STACKORIGIN+10
 17829 8C2D B9 A2 10			lda adr.LEVEL+1,y
 17830 8C30 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 17831 8C32 A0 00			ldy #$00
 17832 8C34 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17833 8C36 10 01			spl
 17834 8C38 88				dey
 17835 8C39 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17836 8C3B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 17837 8C3D 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 17838 8C3F				.LOCAL
 17839 8C3F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 17840 8C41 38 E9 00			sub #$00
 17841 8C44 D0 1C			bne L4
 17842 8C46 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 17843 8C48 C9 00			cmp #$00
 17844 8C4A D0 0A			bne L1
 17845 8C4C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17846 8C4E C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 17847 8C50 D0 04			bne L1
 17848 8C52 A5 9F			lda :STACKORIGIN+9
 17849 8C54 C5 A0			cmp :STACKORIGIN+10
 17850 8C56 F0 10		L1	beq L5
 17851 8C58 B0 04			bcs L3
 17852 8C5A A9 FF			lda #$FF
 17853 8C5C D0 0A			bne L5
 17854 8C5E A9 01		L3	lda #$01
 17855 8C60 D0 06			bne L5
 17856 8C62 50 04		L4	bvc L5
 17857 8C64 49 FF			eor #$FF
 17858 8C66 09 01			ora #$01
 17859 8C68			L5
 17860 					.ENDL
 17861 8C68 30 48			jmi l_3461
 17862 8C6A F0 46			jeq l_3461
 17863
 17864 				; optimize OK (service.pas), line = 3113
 17865
 17866 8C6C A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17867 8C6E A9 00			lda #$00
 17868 8C70 91 84			sta (:bp2),y
 17869 8C72 C8				iny
 17870 8C73 91 84			sta (:bp2),y
 17871
 17872 				; optimize OK (service.pas), line = 3116
 17873
 17874 8C75 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17875 8C77 B1 84			lda (:bp2),y
 17876 8C79 C8				iny
 17877 8C7A C9 D0			cmp #$D0
 17878 8C7C B1 84			lda (:bp2),y
 17879 8C7E E9 07			sbc #$07
 17880 8C80 50 02			svc
 17881 8C82 49 80			eor #$80
 17882 8C84 10 2C			jpl l_3477
 17883
 17884 				; optimize OK (service.pas), line = 3118
 17885
 17886 8C86 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17887 8C88 B1 84			lda (:bp2),y
 17888 8C8A 18 69 0A			add #$0A
 17889 8C8D 91 84			sta (:bp2),y
 17890 8C8F C8				iny
 17891 8C90 B1 84			lda (:bp2),y
 17892 8C92 69 00			adc #$00
 17893 8C94 91 84			sta (:bp2),y
 17894
 17895 				; optimize OK (service.pas), line = 3119
 17896
 17897 8C96 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17898 8C98 B1 84			lda (:bp2),y
 17899 8C9A 8D 4D A1			sta SET_BALL_SPEED.SPEED
 17900 8C9D C8				iny
 17901 8C9E B1 84			lda (:bp2),y
 17902 8CA0 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 17903 8CA3 AD 32 A3			lda BALL
 17904 8CA6 8D 49 A1			sta SET_BALL_SPEED.BALL
 17905 8CA9 AD 33 A3			lda BALL+1
 17906 8CAC 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 17907 8CAF 20 55 36			jsr SET_BALL_SPEED
 17908 8CB2			l_3477
 17909 8CB2			l_3461
 17910
 17911 				; optimize OK (service.pas), line = 3123
 17912
 17913 8CB2 AC 32 A3 84 84 AC + 	mwy BALL :bp2
 17914 8CBC A0 14			ldy #BALL.SBD-DATAORIGIN
 17915 8CBE B1 84			lda (:bp2),y
 17916 8CC0 18 69 01			add #$01
 17917 8CC3 91 84			sta (:bp2),y
 17918 8CC5 C8				iny
 17919 8CC6 B1 84			lda (:bp2),y
 17920 8CC8 69 00			adc #$00
 17921 8CCA 91 84			sta (:bp2),y
 17922
 17923 				; optimize OK (service.pas), line = 3127
 17924
 17925 8CCC A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 17926 8CCE B1 84			lda (:bp2),y
 17927 8CD0 C9 02			cmp #$02
 17928 8CD2 D0 05			bne @+
 17929 8CD4 88				dey
 17930 8CD5 B1 84			lda (:bp2),y
 17931 8CD7 C9 58			cmp #$58
 17932 				@
 17933 8CD9 90 15			jcc l_349F
 17934 				@
 17935 8CDB A0 00			ldy #$00
 17936 8CDD B1 84			lda (:bp2),y
 17937 8CDF 10 0F			jpl l_349F
 17938 				@
 17939
 17940 				; optimize OK (service.pas), line = 3128
 17941
 17942 8CE1 AD 32 A3			lda BALL
 17943 8CE4 8D C9 A2			sta DEVIATE_BALL.BALL
 17944 8CE7 AD 33 A3			lda BALL+1
 17945 8CEA 8D CA A2			sta DEVIATE_BALL.BALL+1
 17946 8CED 20 A1 8A			jsr DEVIATE_BALL
 17947 8CF0			l_349F
 17948 8CF0			l_344B
 17949
 17950 				; ------------------------------------------------------------
 17951
 17952 = A332			BALL	= DATAORIGIN+$0796
 17953 = 9B9C			BALL.X	= DATAORIGIN+$0000
 17954 = 9B9E			BALL.Y	= DATAORIGIN+$0002
 17955 = 9BA0			BALL.FINEX	= DATAORIGIN+$0004
 17956 = 9BA2			BALL.FINEY	= DATAORIGIN+$0006
 17957 = 9BA4			BALL.OLDX	= DATAORIGIN+$0008
 17958 = 9BA6			BALL.OLDY	= DATAORIGIN+$000A
 17959 = 9BA8			BALL.SPEED	= DATAORIGIN+$000C
 17960 = 9BAA			BALL.FINESPEED	= DATAORIGIN+$000E
 17961 = 9BAC			BALL.SPEEDX	= DATAORIGIN+$0010
 17962 = 9BAE			BALL.SPEEDY	= DATAORIGIN+$0012
 17963 = 9BB0			BALL.SBD	= DATAORIGIN+$0014
 17964 = 9BB2			BALL.BRWHIT	= DATAORIGIN+$0016
 17965 = 9BB3			BALL.INPLAY	= DATAORIGIN+$0017
 17966 = 9BB4			BALL.LAUNCH	= DATAORIGIN+$0018
 17967 = 9BB5			BALL.ONVAUS	= DATAORIGIN+$0019
 17968 = 9BB6			BALL.STM	= DATAORIGIN+$001A
 17969
 17970 = A332			@VarData	= BALL
 17971 = 0002			@VarDataSize	= 2
 17972
 17973 8CF0			@exit
 17974 					.ifdef @new
 17975 					lda <@VarData
 17976 					sta :ztmp
 17977 					lda >@VarData
 17978 					ldy #@VarDataSize-1
 17979 					jmp @FreeMem
 17980 					els
 17981 8CF0 60				rts						; ret
 17982 					eif
 17983 				.endl
 17984 8CF1			l_33FE
 17985
 17986 				; optimize OK (service.pas), line = 3136
 17987
 17988 8CF1 A9 00			lda #$00
 17989 8CF3 8D 98 9D			sta SCRFLUXCNT
 17990
 17991 				; optimize OK (service.pas), line = 3137
 17992
 17993 8CF6 8D 97 9D			sta SCRFLUX
 17994
 17995 				; optimize OK (service.pas), line = 3139
 17996
 17997 8CF9 A9 01			lda #$01
 17998 8CFB 8D 96 9D			sta BALLS_IN_PLAY
 17999
 18000 				; optimize OK (service.pas), line = 3141
 18001
 18002 8CFE A9 00			lda #$00
 18003 8D00 8D 94 9D			sta FIRE.AVL
 18004
 18005 				; optimize OK (service.pas), line = 3142
 18006
 18007 8D03 AD B3 9C 8D AB 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 18008
 18009 				; optimize OK (service.pas), line = 3144
 18010
 18011 8D33 A9 FF			lda #$FF
 18012 8D35 8D 8F 9D			sta LETT.LAST
 18013 8D38 8D 90 9D			sta LETT.LAST+1
 18014
 18015 				; optimize OK (service.pas), line = 3145
 18016
 18017 8D3B A9 00			lda #$00
 18018 8D3D 8D 86 9D			sta LETT.ACTIVE
 18019
 18020 				; optimize OK (service.pas), line = 3148
 18021
 18022 8D40 AD 70 9B			lda PATTERN
 18023 8D43 8D 3A A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 18024 8D46 AD 71 9B			lda PATTERN+1
 18025 8D49 8D 3B A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 18026 8D4C 20 48 71			jsr FILL_PICTURE_WITH_PATTERN
 18027
 18028 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3151
 18029
 18030 8D4F E8				inx
 18031 8D50 AD 50 9B 95 96		mva PLAYSCREEN :STACKORIGIN,x
 18032 8D55 AD 51 9B 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 18033 8D5A 20 96 33			jsr SHOWBTMPICTURE
 18034
 18035 				; optimize OK (service.pas), line = 3155
 18036
 18037 8D5D AC 77 9D			ldy CUR_PLAYER
 18038 8D60 B9 6B 9D			lda adr.SCORE.LIVES,y
 18039 8D63 8D 8E A2			sta PLOT_LIVES.LIVES
 18040 8D66 A9 00			lda #$00
 18041 8D68 8D 8F A2			sta PLOT_LIVES.LIVES+1
 18042 8D6B 20 05 7F			jsr PLOT_LIVES
 18043
 18044 				; optimize OK (service.pas), line = 3158
 18045
 18046 8D6E AD 50 9B			lda PLAYSCREEN
 18047 8D71 8D 33 A1			sta SETPALETTE.BTM
 18048 8D74 AD 51 9B			lda PLAYSCREEN+1
 18049 8D77 8D 34 A1			sta SETPALETTE.BTM+1
 18050 8D7A 20 EB 33			jsr SETPALETTE
 18051
 18052 				; optimize OK (service.pas), line = 3161
 18053
 18054 8D7D AD 60 9D			lda adr.SCORE.PLAYER+$04
 18055 8D80 8D 85 A2			sta WRITE_SCORE.SC
 18056 8D83 AD 61 9D			lda adr.SCORE.PLAYER+1+$04
 18057 8D86 8D 86 A2			sta WRITE_SCORE.SC+1
 18058 8D89 AD 62 9D			lda adr.SCORE.PLAYER+2+$04
 18059 8D8C 8D 87 A2			sta WRITE_SCORE.SC+2
 18060 8D8F AD 63 9D			lda adr.SCORE.PLAYER+3+$04
 18061 8D92 8D 88 A2			sta WRITE_SCORE.SC+3
 18062 8D95 A9 FD			lda #$FD
 18063 8D97 8D 81 A2			sta WRITE_SCORE.PX
 18064 8D9A A9 00			lda #$00
 18065 8D9C 8D 82 A2			sta WRITE_SCORE.PX+1
 18066 8D9F A9 3C			lda #$3C
 18067 8DA1 8D 83 A2			sta WRITE_SCORE.PY
 18068 8DA4 A9 00			lda #$00
 18069 8DA6 8D 84 A2			sta WRITE_SCORE.PY+1
 18070 8DA9 20 A7 7B			jsr WRITE_SCORE
 18071
 18072 				; optimize OK (service.pas), line = 3162
 18073
 18074 8DAC AD 64 9D			lda adr.SCORE.PLAYER+$08
 18075 8DAF 8D 85 A2			sta WRITE_SCORE.SC
 18076 8DB2 AD 65 9D			lda adr.SCORE.PLAYER+1+$08
 18077 8DB5 8D 86 A2			sta WRITE_SCORE.SC+1
 18078 8DB8 AD 66 9D			lda adr.SCORE.PLAYER+2+$08
 18079 8DBB 8D 87 A2			sta WRITE_SCORE.SC+2
 18080 8DBE AD 67 9D			lda adr.SCORE.PLAYER+3+$08
 18081 8DC1 8D 88 A2			sta WRITE_SCORE.SC+3
 18082 8DC4 A9 FD			lda #$FD
 18083 8DC6 8D 81 A2			sta WRITE_SCORE.PX
 18084 8DC9 A9 00			lda #$00
 18085 8DCB 8D 82 A2			sta WRITE_SCORE.PX+1
 18086 8DCE A9 5D			lda #$5D
 18087 8DD0 8D 83 A2			sta WRITE_SCORE.PY
 18088 8DD3 A9 00			lda #$00
 18089 8DD5 8D 84 A2			sta WRITE_SCORE.PY+1
 18090 8DD8 20 A7 7B			jsr WRITE_SCORE
 18091
 18092 				; optimize OK (service.pas), line = 3163
 18093
 18094 8DDB A9 FD			lda #$FD
 18095 8DDD 8D 81 A2			sta WRITE_SCORE.PX
 18096 8DE0 A9 00			lda #$00
 18097 8DE2 8D 82 A2			sta WRITE_SCORE.PX+1
 18098 8DE5 A9 80			lda #$80
 18099 8DE7 8D 83 A2			sta WRITE_SCORE.PY
 18100 8DEA A9 00			lda #$00
 18101 8DEC 8D 84 A2			sta WRITE_SCORE.PY+1
 18102 8DEF AD 6E 9D			lda SCORE.HISCORE
 18103 8DF2 8D 85 A2			sta WRITE_SCORE.SC
 18104 8DF5 AD 6F 9D			lda SCORE.HISCORE+1
 18105 8DF8 8D 86 A2			sta WRITE_SCORE.SC+1
 18106 8DFB AD 70 9D			lda SCORE.HISCORE+2
 18107 8DFE 8D 87 A2			sta WRITE_SCORE.SC+2
 18108 8E01 AD 71 9D			lda SCORE.HISCORE+3
 18109 8E04 8D 88 A2			sta WRITE_SCORE.SC+3
 18110 8E07 20 A7 7B			jsr WRITE_SCORE
 18111
 18112 				; optimize FAIL ('PUT_WALL', service.pas), line = 3166
 18113
 18114 8E0A 20 79 50			jsr PUT_WALL
 18115
 18116 				; optimize FAIL ('MOUSERESET', service.pas), line = 3170
 18117
 18118 8E0D 20 6C 2A			jsr MOUSERESET
 18119
 18120 				; optimize OK (service.pas), line = 3173
 18121
 18122 8E10 A9 01			lda #$01
 18123 8E12 8D F4 A2			sta BALL0.INPLAY
 18124
 18125 				; optimize OK (service.pas), line = 3174
 18126
 18127 8E15 8D F5 A2			sta BALL0.LAUNCH
 18128
 18129 				; optimize OK (service.pas), line = 3177
 18130
 18131 8E18 A9 6F			lda #$6F
 18132 8E1A 8D DD A2			sta BALL0.X
 18133 8E1D A9 00			lda #$00
 18134 8E1F 8D DE A2			sta BALL0.X+1
 18135
 18136 				; optimize OK (service.pas), line = 3178
 18137
 18138 8E22 A9 B5			lda #$B5
 18139 8E24 8D DF A2			sta BALL0.Y
 18140 8E27 A9 00			lda #$00
 18141 8E29 8D E0 A2			sta BALL0.Y+1
 18142
 18143 				; optimize OK (service.pas), line = 3181
 18144
 18145 8E2C A9 FF			lda #$FF
 18146 8E2E 8D E5 A2			sta BALL0.OLDX
 18147 8E31 8D E6 A2			sta BALL0.OLDX+1
 18148
 18149 				; optimize OK (service.pas), line = 3182
 18150
 18151 8E34 8D E7 A2			sta BALL0.OLDY
 18152 8E37 8D E8 A2			sta BALL0.OLDY+1
 18153
 18154 				; optimize OK (service.pas), line = 3185
 18155
 18156 8E3A A9 00			lda #$00
 18157 8E3C 8D F1 A2			sta BALL0.SBD
 18158 8E3F 8D F2 A2			sta BALL0.SBD+1
 18159
 18160 				; optimize OK (service.pas), line = 3189
 18161
 18162 8E42 A9 10			lda #$10
 18163 8E44 8D F6 A2			sta BALL0.ONVAUS
 18164
 18165 				; optimize OK (service.pas), line = 3194
 18166
 18167 8E47 A9 00			lda #$00
 18168 8E49 8D F7 A2			sta BALL0.STM
 18169
 18170 				; optimize OK (service.pas), line = 3198
 18171
 18172 8E4C A9 E8			lda #$E8
 18173 8E4E 8D E2 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 18174 8E51 A9 03			lda #$03
 18175 8E53 8D E3 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 18176 8E56 20 52 25			jsr SYSTEM.RANDOM.@010184000
 18177 8E59 AD E4 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 18178 8E5C 8D 87 9D			sta LETT.INCOMING
 18179 8E5F AD E5 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 18180 8E62 8D 88 9D			sta LETT.INCOMING+1
 18181
 18182 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3201
 18183
 18184 8E65 20 40 76			jsr CREATE_VAUS
 18185
 18186 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3204
 18187
 18188 8E68 20 1E 73			jsr WRITE_ROUND_LEVEL
 18189
 18190 				; optimize FAIL ('SET_VAUS', service.pas), line = 3206
 18191
 18192 8E6B 20 1C 43			jsr SET_VAUS
 18193
 18194 				; optimize FAIL ('START_VAUS', service.pas), line = 3207
 18195
 18196 8E6E 20 59 43			jsr START_VAUS
 18197
 18198 				; optimize OK (service.pas), line = 3208
 18199
 18200 8E71 AD 1B 9D			lda VAUS.X
 18201 8E74 8D 9A A1			sta MOVE_VAUS.X
 18202 8E77 A9 00			lda #$00
 18203 8E79 8D 9B A1			sta MOVE_VAUS.X+1
 18204 8E7C A9 B8			lda #$B8
 18205 8E7E 8D 9C A1			sta MOVE_VAUS.Y
 18206 8E81 A9 00			lda #$00
 18207 8E83 8D 9D A1			sta MOVE_VAUS.Y+1
 18208 8E86 20 11 46			jsr MOVE_VAUS
 18209
 18210 				; optimize FAIL ('START_LEVEL', service.pas), line = 3209
 18211
 18212 8E89 20 69 2A			jsr START_LEVEL
 18213
 18214 				; optimize FAIL ('START_VAUS', service.pas), line = 3210
 18215
 18216 8E8C 20 59 43			jsr START_VAUS
 18217
 18218 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3211
 18219
 18220 8E8F 20 1F 73			jsr REMOVE_ROUND_LEVEL
 18221
 18222 				; optimize OK (service.pas), line = 3212
 18223
 18224 8E92 AD A0 93			lda BALL0
 18225 8E95 8D 45 A1			sta SET_BALL.BALL
 18226 8E98 AD A1 93			lda BALL0+1
 18227 8E9B 8D 46 A1			sta SET_BALL.BALL+1
 18228 8E9E 20 70 35			jsr SET_BALL
 18229
 18230 				; optimize OK (service.pas), line = 3219
 18231
 18232 8EA1 A9 0F			lda #$0F
 18233 8EA3 20 3B 25			jsr SYSTEM.RANDOM.@010180000
 18234 8EA6 E8				inx
 18235 8EA7 E8				inx
 18236 8EA8 AD E1 9B			lda SYSTEM.RANDOM.@010180000.RESULT
 18237 8EAB 18 69 3C			add #$3C
 18238 8EAE 95 95			sta :STACKORIGIN-1,x
 18239 8EB0 A9 00			lda #$00
 18240 8EB2 69 00			adc #$00
 18241 8EB4 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 18242 8EB6 AD A0 93			lda BALL0
 18243 8EB9 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 18244 8EBC AD A1 93			lda BALL0+1
 18245 8EBF 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 18246 8EC2 CA				dex
 18247 8EC3 B5 96			lda :STACKORIGIN,x
 18248 8EC5 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 18249 8EC8 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18250 8ECA 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 18251 8ECD CA				dex
 18252 8ECE 20 65 38			jsr SET_BALL_DIRECTION
 18253
 18254 				; optimize OK (service.pas), line = 3221
 18255
 18256 8ED1 AD A0 93			lda BALL0
 18257 8ED4 8D 49 A1			sta SET_BALL_SPEED.BALL
 18258 8ED7 AD A1 93			lda BALL0+1
 18259 8EDA 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 18260 8EDD A9 F4			lda #$F4
 18261 8EDF 8D 4D A1			sta SET_BALL_SPEED.SPEED
 18262 8EE2 A9 01			lda #$01
 18263 8EE4 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 18264 8EE7 20 55 36			jsr SET_BALL_SPEED
 18265
 18266 				; optimize OK (service.pas), line = 3224
 18267
 18268 8EEA A9 00			lda #$00
 18269 8EEC 8D EB A2			sta BALL0.FINESPEED
 18270 8EEF 8D EC A2			sta BALL0.FINESPEED+1
 18271
 18272 				; optimize OK (service.pas), line = 3226
 18273
 18274 8EF2 8D 0F A3			sta BALL1.INPLAY
 18275
 18276 				; optimize OK (service.pas), line = 3227
 18277
 18278 8EF5 8D 2A A3			sta BALL2.INPLAY
 18279
 18280 				; --- WhileProlog
 18281 8EF8 4C 7E 93			jmp l_3535
 18282 8EFB			l_3536
 18283
 18284 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3231
 18285
 18286 8EFB 20 6F 35			jsr WAIT_VBL
 18287
 18288 				; optimize OK (service.pas), line = 3240
 18289
 18290 8EFE AD DD A2			lda BALL0.X
 18291 8F01 8D 7A 9C			sta MOUS.X
 18292 8F04 AD DE A2			lda BALL0.X+1
 18293 8F07 8D 7B 9C			sta MOUS.X+1
 18294
 18295 				; optimize OK (service.pas), line = 3242
 18296
 18297 8F0A A9 D0			lda <X
 18298 8F0C 8D 8F 9C			sta MOUSECOORDS.X
 18299 8F0F A9 A2			lda >X
 18300 8F11 8D 90 9C			sta MOUSECOORDS.X+1
 18301 8F14 A9 D2			lda <Y
 18302 8F16 8D 91 9C			sta MOUSECOORDS.Y
 18303 8F19 A9 A2			lda >Y
 18304 8F1B 8D 92 9C			sta MOUSECOORDS.Y+1
 18305 8F1E 20 85 2A			jsr MOUSECOORDS
 18306
 18307 				; optimize OK (service.pas), line = 3247
 18308
 18309 8F21 AD 7F 9D			lda TRAINER
 18310 8F24 D0 19			jne l_3551
 18311 8F26 AD D0 A2			lda X
 18312 8F29 8D 9A A1			sta MOVE_VAUS.X
 18313 8F2C AD D1 A2			lda X+1
 18314 8F2F 8D 9B A1			sta MOVE_VAUS.X+1
 18315 8F32 A9 B8			lda #$B8
 18316 8F34 8D 9C A1			sta MOVE_VAUS.Y
 18317 8F37 A9 00			lda #$00
 18318 8F39 8D 9D A1			sta MOVE_VAUS.Y+1
 18319 8F3C 4C A8 8F			jmp l_355F
 18320 8F3F			l_3551
 18321
 18322 				; optimize OK (service.pas), line = 3253
 18323
 18324 8F3F AD 7F 9D			lda TRAINER
 18325 8F42 C9 01			cmp #$01
 18326 8F44 D0 65			jne l_3571
 18327
 18328 				; optimize FAIL (1, service.pas), line = 3254
 18329
 18330 8F46 E8				inx
 18331 8F47 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 18332 8F4B A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18333 8F4F E8				inx
 18334 8F50 A9 0A 95 96			mva #$0A :STACKORIGIN,x
 18335 8F54 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18336 8F58 AD DD A2			lda BALL0.X
 18337 8F5B 38 ED F6 A2			sub BALL0.ONVAUS
 18338 8F5F 8D D8 A0			sta MAX.A
 18339 8F62 AD DE A2			lda BALL0.X+1
 18340 8F65 E9 00			sbc #$00
 18341 8F67 8D D9 A0			sta MAX.A+1
 18342 8F6A B5 96			lda :STACKORIGIN,x
 18343 8F6C 8D DA A0			sta MAX.B
 18344 8F6F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18345 8F71 8D DB A0			sta MAX.B+1
 18346 8F74 CA				dex
 18347 8F75 20 11 2D			jsr MAX
 18348 8F78 A9 B8			lda #$B8
 18349 8F7A 8D DE A0			sta MIN.A
 18350 8F7D A9 00			lda #$00
 18351 8F7F 8D DF A0			sta MIN.A+1
 18352 8F82 AD DC A0			lda MAX.RESULT
 18353 8F85 8D E0 A0			sta MIN.B
 18354 8F88 AD DD A0			lda MAX.RESULT+1
 18355 8F8B 8D E1 A0			sta MIN.B+1
 18356 8F8E 20 3C 2D			jsr MIN
 18357 8F91 AD E2 A0			lda MIN.RESULT
 18358 8F94 8D 9A A1			sta MOVE_VAUS.X
 18359 8F97 AD E3 A0			lda MIN.RESULT+1
 18360 8F9A 8D 9B A1			sta MOVE_VAUS.X+1
 18361 8F9D B5 96			lda :STACKORIGIN,x
 18362 8F9F 8D 9C A1			sta MOVE_VAUS.Y
 18363 8FA2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18364 8FA4 8D 9D A1			sta MOVE_VAUS.Y+1
 18365 8FA7 CA				dex
 18366 8FA8			l_355F
 18367 8FA8 20 11 46			jsr MOVE_VAUS
 18368 8FAB			l_3571
 18369
 18370 				; optimize OK (service.pas), line = 3259
 18371
 18372 8FAB AD F5 A2			lda BALL0.LAUNCH
 18373 8FAE C9 01			cmp #$01
 18374 8FB0 D0 35			jne l_3594
 18375
 18376 				; optimize FAIL (0, service.pas), line = 3261
 18377
 18378 8FB2 EE F7 A2			inc BALL0.STM
 18379
 18380 				; optimize OK (service.pas), line = 3266
 18381
 18382 8FB5 AD F7 A2			lda BALL0.STM
 18383 8FB8 C9 FA			cmp #$FA
 18384 8FBA D0 05			jne l_35AB
 18385 8FBC A9 00			lda #$00
 18386 8FBE 8D F5 A2			sta BALL0.LAUNCH
 18387 8FC1			l_35AB
 18388
 18389 				; optimize OK (service.pas), line = 3269
 18390
 18391 8FC1 AD A0 93			lda BALL0
 18392 8FC4 8D 69 A1			sta START_BALL.BALL
 18393 8FC7 AD A1 93			lda BALL0+1
 18394 8FCA 8D 6A A1			sta START_BALL.BALL+1
 18395 8FCD 20 AB 3B			jsr START_BALL
 18396
 18397 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3272
 18398
 18399 8FD0 20 6D 2A			jsr MOUSECLICK
 18400 8FD3 AD 8E 9C			lda MOUSECLICK.RESULT+1
 18401 8FD6 D0 05			bne @+
 18402 8FD8 AD 8D 9C			lda MOUSECLICK.RESULT
 18403 8FDB C9 01			cmp #$01
 18404 				@
 18405 8FDD D0 05			jne l_35C5
 18406 8FDF A9 00			lda #$00
 18407 8FE1 8D F5 A2			sta BALL0.LAUNCH
 18408 8FE4			l_35C5
 18409 8FE4 4C FB 8F			jmp l_35D5
 18410 8FE7			l_3594
 18411
 18412 				; optimize OK (service.pas), line = 3280
 18413
 18414 8FE7 AD F4 A2			lda BALL0.INPLAY
 18415 8FEA F0 0F			jeq l_35E1
 18416 8FEC AD A0 93			lda BALL0
 18417 8FEF 8D 8A A1			sta MOVE_BALL.BALL
 18418 8FF2 AD A1 93			lda BALL0+1
 18419 8FF5 8D 8B A1			sta MOVE_BALL.BALL+1
 18420 8FF8 20 E8 3C			jsr MOVE_BALL
 18421 8FFB			l_35E1
 18422 8FFB			l_35D5
 18423
 18424 				; optimize OK (service.pas), line = 3281
 18425
 18426 8FFB AD 0F A3			lda BALL1.INPLAY
 18427 8FFE F0 0F			jeq l_35F3
 18428 9000 AD A2 93			lda BALL1
 18429 9003 8D 8A A1			sta MOVE_BALL.BALL
 18430 9006 AD A3 93			lda BALL1+1
 18431 9009 8D 8B A1			sta MOVE_BALL.BALL+1
 18432 900C 20 E8 3C			jsr MOVE_BALL
 18433 900F			l_35F3
 18434
 18435 				; optimize OK (service.pas), line = 3282
 18436
 18437 900F AD 2A A3			lda BALL2.INPLAY
 18438 9012 F0 0F			jeq l_3605
 18439 9014 AD A4 93			lda BALL2
 18440 9017 8D 8A A1			sta MOVE_BALL.BALL
 18441 901A AD A5 93			lda BALL2+1
 18442 901D 8D 8B A1			sta MOVE_BALL.BALL+1
 18443 9020 20 E8 3C			jsr MOVE_BALL
 18444 9023			l_3605
 18445
 18446 				; optimize OK (service.pas), line = 3288
 18447
 18448 9023 AD A0 93			lda BALL0
 18449 9026 8D 2E A3			sta CHECK_BALL.BALL
 18450 9029 AD A1 93			lda BALL0+1
 18451 902C 8D 2F A3			sta CHECK_BALL.BALL+1
 18452 902F 20 7F 8B			jsr CHECK_BALL
 18453
 18454 				; optimize OK (service.pas), line = 3289
 18455
 18456 9032 AD A2 93			lda BALL1
 18457 9035 8D 2E A3			sta CHECK_BALL.BALL
 18458 9038 AD A3 93			lda BALL1+1
 18459 903B 8D 2F A3			sta CHECK_BALL.BALL+1
 18460 903E 20 7F 8B			jsr CHECK_BALL
 18461
 18462 				; optimize OK (service.pas), line = 3290
 18463
 18464 9041 AD A4 93			lda BALL2
 18465 9044 8D 2E A3			sta CHECK_BALL.BALL
 18466 9047 AD A5 93			lda BALL2+1
 18467 904A 8D 2F A3			sta CHECK_BALL.BALL+1
 18468 904D 20 7F 8B			jsr CHECK_BALL
 18469
 18470 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3305
 18471
 18472 9050 20 11 30			jsr CHECKSHINE
 18473
 18474 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3306
 18475
 18476 9053 20 5F 32			jsr CHECK_LETTER
 18477
 18478 				; optimize OK (service.pas), line = 3307
 18479
 18480 9056 AD A0 93			lda BALL0
 18481 9059 8D BA A2			sta CHECK_BONUS_TYPE.B1
 18482 905C AD A1 93			lda BALL0+1
 18483 905F 8D BB A2			sta CHECK_BONUS_TYPE.B1+1
 18484 9062 AD A2 93			lda BALL1
 18485 9065 8D BE A2			sta CHECK_BONUS_TYPE.B2
 18486 9068 AD A3 93			lda BALL1+1
 18487 906B 8D BF A2			sta CHECK_BONUS_TYPE.B2+1
 18488 906E AD A4 93			lda BALL2
 18489 9071 8D C2 A2			sta CHECK_BONUS_TYPE.B3
 18490 9074 AD A5 93			lda BALL2+1
 18491 9077 8D C3 A2			sta CHECK_BONUS_TYPE.B3+1
 18492 907A 20 65 87			jsr CHECK_BONUS_TYPE
 18493
 18494 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3308
 18495
 18496 907D 20 03 83			jsr CHECK_FIRE
 18497
 18498 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3309
 18499
 18500 9080 20 87 85			jsr CHECK_FLUX
 18501
 18502 				; optimize OK (service.pas), line = 3311
 18503
 18504 9083 AD 1B 9D			lda VAUS.X
 18505 9086 18 6D 23 9D			add VAUS.WIDTH
 18506 908A 85 9F			sta :STACKORIGIN+9
 18507 908C A9 00			lda #$00
 18508 908E 69 00			adc #$00
 18509 9090 A0 01			ldy #1
 18510 9092 C9 00			cmp #$00
 18511 9094 D0 04			bne @+
 18512 9096 A5 9F			lda :STACKORIGIN+9
 18513 9098 C9 D7			cmp #$D7
 18514 				@
 18515 909A F0 01			beq @+
 18516 909C 88				dey
 18517 				@
 18518 909D 98				tya
 18519 909E 2D 97 9D			and SCRFLUX
 18520 90A1 F0 03			jeq l_363D
 18521 90A3 20 24 86			jsr VAUS_OUT
 18522 90A6			l_363D
 18523
 18524 				; optimize OK (service.pas), line = 3313
 18525
 18526 90A6 AD 27 9D			lda VAUS.LETTER
 18527 90A9 C9 04			cmp #$04
 18528 90AB F0 03 4C F0 91		jne l_3653
 18529
 18530 				; optimize OK (service.pas), line = 3315
 18531
 18532 90B0 A9 03			lda #$03
 18533 90B2 8D 96 9D			sta BALLS_IN_PLAY
 18534
 18535 				; optimize OK (service.pas), line = 3317
 18536
 18537 90B5 AC A2 93 84 84 AC + 	mwy BALL1 :bp2
 18538 90BF A0 1A			ldy #$1A
 18539 90C1 B9 DD A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18540
 18541 				; optimize OK (service.pas), line = 3318
 18542
 18543 90C9 AC A4 93 84 84 AC + 	mwy BALL2 :bp2
 18544 90D3 A0 1A			ldy #$1A
 18545 90D5 B9 DD A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18546
 18547 				; optimize OK (service.pas), line = 3320
 18548
 18549 90DD AD A0 93			lda BALL0
 18550 90E0 8D 61 A1			sta GET_BALL_DIRECTION.BALL
 18551 90E3 AD A1 93			lda BALL0+1
 18552 90E6 8D 62 A1			sta GET_BALL_DIRECTION.BALL+1
 18553 90E9 20 F0 39			jsr GET_BALL_DIRECTION
 18554 90EC E8				inx
 18555 90ED E8				inx
 18556 90EE A9 5A			lda #$5A
 18557 90F0 85 8E			sta @SMALLINT.DIV.B
 18558 90F2 A9 00			lda #$00
 18559 90F4 85 8F			sta @SMALLINT.DIV.B+1
 18560 90F6 AD 65 A1			lda GET_BALL_DIRECTION.RESULT
 18561 90F9 85 86			sta @SMALLINT.DIV.A
 18562 90FB AD 66 A1			lda GET_BALL_DIRECTION.RESULT+1
 18563 90FE 85 87			sta @SMALLINT.DIV.A+1
 18564 9100 20 62 12			jsr @SMALLINT.DIV
 18565 9103 CA				dex
 18566 9104 A5 86			lda :eax
 18567 9106 8D D6 A2			sta T1
 18568 9109 A5 87			lda :eax+1
 18569 910B 8D D7 A2			sta T1+1
 18570 910E CA				dex
 18571
 18572 				; optimize OK (service.pas), line = 3322
 18573
 18574 910F AD E9 A2			lda BALL0.SPEED
 18575 9112 8D D8 A2			sta T2
 18576 9115 AD EA A2			lda BALL0.SPEED+1
 18577 9118 8D D9 A2			sta T2+1
 18578
 18579 				; optimize OK (service.pas), line = 3329
 18580
 18581 911B A9 5A			lda #$5A
 18582 911D 85 8E			sta :ecx
 18583 911F A9 00			lda #$00
 18584 9121 85 8F			sta :ecx+1
 18585 9123 AD D6 A2			lda T1
 18586 9126 85 86			sta :eax
 18587 9128 AD D7 A2			lda T1+1
 18588 912B 85 87			sta :eax+1
 18589 					.ifdef fmulinit
 18590 					fmulu_16
 18591 					els
 18592 912D 20 3A 13			imulCX
 18593 					eif
 18594 9130 A5 86			lda :eax
 18595 9132 8D DA A2			sta HLP
 18596 9135 A5 87			lda :eax+1
 18597 9137 8D DB A2			sta HLP+1
 18598
 18599 				; optimize OK (service.pas), line = 3331
 18600
 18601 913A AD DA A2			lda HLP
 18602 913D 18 69 1E			add #$1E
 18603 9140 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 18604 9143 AD DB A2			lda HLP+1
 18605 9146 69 00			adc #$00
 18606 9148 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 18607 914B AD A0 93			lda BALL0
 18608 914E 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 18609 9151 AD A1 93			lda BALL0+1
 18610 9154 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 18611 9157 20 65 38			jsr SET_BALL_DIRECTION
 18612
 18613 				; optimize OK (service.pas), line = 3332
 18614
 18615 915A AD DA A2			lda HLP
 18616 915D 18 69 2D			add #$2D
 18617 9160 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 18618 9163 AD DB A2			lda HLP+1
 18619 9166 69 00			adc #$00
 18620 9168 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 18621 916B AD A2 93			lda BALL1
 18622 916E 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 18623 9171 AD A3 93			lda BALL1+1
 18624 9174 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 18625 9177 20 65 38			jsr SET_BALL_DIRECTION
 18626
 18627 				; optimize OK (service.pas), line = 3333
 18628
 18629 917A AD DA A2			lda HLP
 18630 917D 18 69 3C			add #$3C
 18631 9180 8D 5B A1			sta SET_BALL_DIRECTION.ANGLE
 18632 9183 AD DB A2			lda HLP+1
 18633 9186 69 00			adc #$00
 18634 9188 8D 5C A1			sta SET_BALL_DIRECTION.ANGLE+1
 18635 918B AD A4 93			lda BALL2
 18636 918E 8D 57 A1			sta SET_BALL_DIRECTION.BALL
 18637 9191 AD A5 93			lda BALL2+1
 18638 9194 8D 58 A1			sta SET_BALL_DIRECTION.BALL+1
 18639 9197 20 65 38			jsr SET_BALL_DIRECTION
 18640
 18641 				; optimize OK (service.pas), line = 3337
 18642
 18643 919A AD A0 93			lda BALL0
 18644 919D 8D 49 A1			sta SET_BALL_SPEED.BALL
 18645 91A0 AD A1 93			lda BALL0+1
 18646 91A3 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 18647 91A6 AD D8 A2			lda T2
 18648 91A9 8D 4D A1			sta SET_BALL_SPEED.SPEED
 18649 91AC AD D9 A2			lda T2+1
 18650 91AF 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 18651 91B2 20 55 36			jsr SET_BALL_SPEED
 18652
 18653 				; optimize OK (service.pas), line = 3338
 18654
 18655 91B5 AD A2 93			lda BALL1
 18656 91B8 8D 49 A1			sta SET_BALL_SPEED.BALL
 18657 91BB AD A3 93			lda BALL1+1
 18658 91BE 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 18659 91C1 AD D8 A2			lda T2
 18660 91C4 8D 4D A1			sta SET_BALL_SPEED.SPEED
 18661 91C7 AD D9 A2			lda T2+1
 18662 91CA 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 18663 91CD 20 55 36			jsr SET_BALL_SPEED
 18664
 18665 				; optimize OK (service.pas), line = 3339
 18666
 18667 91D0 AD A4 93			lda BALL2
 18668 91D3 8D 49 A1			sta SET_BALL_SPEED.BALL
 18669 91D6 AD A5 93			lda BALL2+1
 18670 91D9 8D 4A A1			sta SET_BALL_SPEED.BALL+1
 18671 91DC AD D8 A2			lda T2
 18672 91DF 8D 4D A1			sta SET_BALL_SPEED.SPEED
 18673 91E2 AD D9 A2			lda T2+1
 18674 91E5 8D 4E A1			sta SET_BALL_SPEED.SPEED+1
 18675 91E8 20 55 36			jsr SET_BALL_SPEED
 18676
 18677 				; optimize OK (service.pas), line = 3342
 18678
 18679 91EB A9 00			lda #$00
 18680 91ED 8D 27 9D			sta VAUS.LETTER
 18681 91F0			l_3653
 18682
 18683 				; optimize OK (service.pas), line = 3346
 18684
 18685 91F0 AD 96 9D			lda BALLS_IN_PLAY
 18686 91F3 C9 02			cmp #$02
 18687 91F5 90 08			jcc l_36B6
 18688 91F7 A9 00			lda #$00
 18689 91F9 8D 87 9D			sta LETT.INCOMING
 18690 91FC 8D 88 9D			sta LETT.INCOMING+1
 18691 91FF			l_36B6
 18692
 18693 				; optimize OK (service.pas), line = 3349
 18694
 18695 91FF AD 77 9D			lda CUR_PLAYER
 18696 9202 0A				asl @
 18697 9203 0A				asl @
 18698 9204 A8				tay
 18699 9205 B9 5C 9D			lda adr.SCORE.PLAYER,y
 18700 9208 8D 85 A2			sta WRITE_SCORE.SC
 18701 920B B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 18702 920E 8D 86 A2			sta WRITE_SCORE.SC+1
 18703 9211 B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 18704 9214 8D 87 A2			sta WRITE_SCORE.SC+2
 18705 9217 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 18706 921A 8D 88 A2			sta WRITE_SCORE.SC+3
 18707 921D AC 77 9D			ldy CUR_PLAYER
 18708 9220 B9 92 10			lda adr.POS_DIGIT,y
 18709 9223 8D 83 A2			sta WRITE_SCORE.PY
 18710 9226 A9 FD			lda #$FD
 18711 9228 8D 81 A2			sta WRITE_SCORE.PX
 18712 922B A9 00			lda #$00
 18713 922D 8D 82 A2			sta WRITE_SCORE.PX+1
 18714 9230 8D 84 A2			sta WRITE_SCORE.PY+1
 18715 9233 20 A7 7B			jsr WRITE_SCORE
 18716
 18717 				; optimize OK (service.pas), line = 3352
 18718
 18719 9236 AD 77 9D			lda CUR_PLAYER
 18720 9239 0A				asl @
 18721 923A 0A				asl @
 18722 923B A8				tay
 18723 923C				.LOCAL
 18724 923C B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 18725 923F 38 ED 71 9D			sub SCORE.HISCORE+3
 18726 9243 D0 22			bne L4
 18727 9245 B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 18728 9248 CD 70 9D			cmp SCORE.HISCORE+2
 18729 924B D0 0E			bne L1
 18730 924D B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 18731 9250 CD 6F 9D			cmp SCORE.HISCORE+1
 18732 9253 D0 06			bne L1
 18733 9255 B9 5C 9D			lda adr.SCORE.PLAYER,y
 18734 9258 CD 6E 9D			cmp SCORE.HISCORE
 18735 925B F0 10		L1	beq L5
 18736 925D B0 04			bcs L3
 18737 925F A9 FF			lda #$FF
 18738 9261 D0 0A			bne L5
 18739 9263 A9 01		L3	lda #$01
 18740 9265 D0 06			bne L5
 18741 9267 50 04		L4	bvc L5
 18742 9269 49 FF			eor #$FF
 18743 926B 09 01			ora #$01
 18744 926D			L5
 18745 					.ENDL
 18746 926D 30 49			jmi l_36DC
 18747 926F F0 47			jeq l_36DC
 18748
 18749 				; optimize OK (service.pas), line = 3355
 18750
 18751 9271 B9 5C 9D			lda adr.SCORE.PLAYER,y
 18752 9274 8D 6E 9D			sta SCORE.HISCORE
 18753 9277 B9 5D 9D			lda adr.SCORE.PLAYER+1,y
 18754 927A 8D 6F 9D			sta SCORE.HISCORE+1
 18755 927D B9 5E 9D			lda adr.SCORE.PLAYER+2,y
 18756 9280 8D 70 9D			sta SCORE.HISCORE+2
 18757 9283 B9 5F 9D			lda adr.SCORE.PLAYER+3,y
 18758 9286 8D 71 9D			sta SCORE.HISCORE+3
 18759
 18760 				; optimize OK (service.pas), line = 3357
 18761
 18762 9289 A9 FD			lda #$FD
 18763 928B 8D 81 A2			sta WRITE_SCORE.PX
 18764 928E A9 00			lda #$00
 18765 9290 8D 82 A2			sta WRITE_SCORE.PX+1
 18766 9293 A9 80			lda #$80
 18767 9295 8D 83 A2			sta WRITE_SCORE.PY
 18768 9298 A9 00			lda #$00
 18769 929A 8D 84 A2			sta WRITE_SCORE.PY+1
 18770 929D AD 6E 9D			lda SCORE.HISCORE
 18771 92A0 8D 85 A2			sta WRITE_SCORE.SC
 18772 92A3 AD 6F 9D			lda SCORE.HISCORE+1
 18773 92A6 8D 86 A2			sta WRITE_SCORE.SC+1
 18774 92A9 AD 70 9D			lda SCORE.HISCORE+2
 18775 92AC 8D 87 A2			sta WRITE_SCORE.SC+2
 18776 92AF AD 71 9D			lda SCORE.HISCORE+3
 18777 92B2 8D 88 A2			sta WRITE_SCORE.SC+3
 18778 92B5 20 A7 7B			jsr WRITE_SCORE
 18779 92B8			l_36DC
 18780
 18781 				; optimize OK (service.pas), line = 3364
 18782
 18783 92B8 AD A0 93			lda BALL0
 18784 92BB 8D 32 A3			sta TEST_BALL.BALL
 18785 92BE AD A1 93			lda BALL0+1
 18786 92C1 8D 33 A3			sta TEST_BALL.BALL+1
 18787 92C4 20 F5 8B			jsr TEST_BALL
 18788
 18789 				; optimize OK (service.pas), line = 3365
 18790
 18791 92C7 AD A2 93			lda BALL1
 18792 92CA 8D 32 A3			sta TEST_BALL.BALL
 18793 92CD AD A3 93			lda BALL1+1
 18794 92D0 8D 33 A3			sta TEST_BALL.BALL+1
 18795 92D3 20 F5 8B			jsr TEST_BALL
 18796
 18797 				; optimize OK (service.pas), line = 3366
 18798
 18799 92D6 AD A4 93			lda BALL2
 18800 92D9 8D 32 A3			sta TEST_BALL.BALL
 18801 92DC AD A5 93			lda BALL2+1
 18802 92DF 8D 33 A3			sta TEST_BALL.BALL+1
 18803 92E2 20 F5 8B			jsr TEST_BALL
 18804
 18805 				; optimize OK (service.pas), line = 3407
 18806
 18807 92E5 AD F4 A2			lda BALL0.INPLAY
 18808 92E8 D0 2B			jne l_3702
 18809
 18810 				; optimize OK (service.pas), line = 3409
 18811
 18812 92EA AC A0 93 84 84 AC + 	mwy BALL0 :bp2
 18813 92F4 A0 1A			ldy #$1A
 18814 92F6 B9 F8 A2 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 18815
 18816 				; optimize OK (service.pas), line = 3410
 18817
 18818 92FE AC A2 93 84 84 AC + 	mwy BALL1 :bp2
 18819 9308 A0 1A			ldy #$1A
 18820 930A B9 13 A3 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 18821
 18822 				; optimize OK (service.pas), line = 3411
 18823
 18824 9312 8D 2A A3			sta BALL2.INPLAY
 18825 9315			l_3702
 18826
 18827 				; optimize OK (service.pas), line = 3414
 18828
 18829 9315 A9 00			lda #$00
 18830 9317 8D 96 9D			sta BALLS_IN_PLAY
 18831
 18832 				; optimize OK (service.pas), line = 3416
 18833
 18834 931A AD F4 A2			lda BALL0.INPLAY
 18835 931D F0 03			jeq l_371D
 18836 931F EE 96 9D			inc BALLS_IN_PLAY
 18837 9322			l_371D
 18838
 18839 				; optimize OK (service.pas), line = 3417
 18840
 18841 9322 AD 0F A3			lda BALL1.INPLAY
 18842 9325 F0 03			jeq l_3730
 18843 9327 EE 96 9D			inc BALLS_IN_PLAY
 18844 932A			l_3730
 18845
 18846 				; optimize OK (service.pas), line = 3418
 18847
 18848 932A AD 2A A3			lda BALL2.INPLAY
 18849 932D F0 03			jeq l_3743
 18850 932F EE 96 9D			inc BALLS_IN_PLAY
 18851 9332			l_3743
 18852
 18853 				; optimize OK (service.pas), line = 3421
 18854
 18855 9332 AD F4 A2			lda BALL0.INPLAY
 18856 9335 D0 47			jne l_3759
 18857
 18858 				; optimize OK (service.pas), line = 3423
 18859
 18860 9337 A9 01			lda #$01
 18861 9339 8D F5 A2			sta BALL0.LAUNCH
 18862
 18863 				; optimize OK (service.pas), line = 3424
 18864
 18865 933C AD A0 93			lda BALL0
 18866 933F 8D 3E A1			sta REMOVE_BALL.BALL
 18867 9342 AD A1 93			lda BALL0+1
 18868 9345 8D 3F A1			sta REMOVE_BALL.BALL+1
 18869 9348 20 B3 34			jsr REMOVE_BALL
 18870
 18871 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3425
 18872
 18873 934B 20 9B 73			jsr DESTROY_VAUS
 18874
 18875 				; optimize OK (service.pas), line = 3426
 18876
 18877 934E AC 77 9D			ldy CUR_PLAYER
 18878 9351 B9 6B 9D			lda adr.SCORE.LIVES,y
 18879 9354 38 E9 01			sub #$01
 18880 9357 99 6B 9D			sta adr.SCORE.LIVES,y
 18881
 18882 				; optimize OK (service.pas), line = 3427
 18883
 18884 935A A9 00			lda <adr.WALL_P
 18885 935C 85 8E			sta @move.dst
 18886 935E AD 77 9D			lda CUR_PLAYER
 18887 9361 18 69 D8			add >adr.WALL_P
 18888 9364 85 8F			sta @move.dst+1
 18889 9366 AD 98 9B			lda WALL
 18890 9369 85 8A			sta @move.src
 18891 936B AD 99 9B			lda WALL+1
 18892 936E 85 8B			sta @move.src+1
 18893 9370 A9 00			lda <256
 18894 9372 85 86			sta @move.cnt
 18895 9374 A9 01			lda >256
 18896 9376 85 87			sta @move.cnt+1
 18897 9378 20 E5 11			jsr @move
 18898
 18899 				; optimize FAIL ('NOSOUND', service.pas), line = 3435
 18900
 18901 937B 20 0F 2D			jsr NOSOUND
 18902 937E			l_3759
 18903 937E			l_3535
 18904
 18905 				; optimize OK (service.pas), line = 3229
 18906
 18907 937E AD 5A 9D			lda REMAIN_BLK
 18908 9381 F0 0D			jeq l_3536w
 18909 9383 AD F4 A2			lda BALL0.INPLAY
 18910 9386 F0 08			jeq l_3536w
 18911 9388 AD 76 9D			lda SCORE.ABORTPLAY
 18912 938B D0 03 4C FB 8E		jeq l_3536
 18913 9390			l_3536w
 18914
 18915 				; optimize OK (service.pas), line = 3491
 18916
 18917 9390 A9 00			lda #$00
 18918 9392 8D CF A2			sta RESULT
 18919
 18920 				; optimize OK (service.pas), line = 3492
 18921
 18922 9395 AD 5A 9D			lda REMAIN_BLK
 18923 9398 D0 05			jne l_37A3
 18924 939A A9 01			lda #$01
 18925 939C 8D CF A2			sta RESULT
 18926 939F			l_37A3
 18927 939F			@exit
 18928
 18929 				; ------------------------------------------------------------
 18930
 18931 = A2CF			RESULT	= DATAORIGIN+$0733
 18932 = A2D0			X	= DATAORIGIN+$0734
 18933 = A2D2			Y	= DATAORIGIN+$0736
 18934 = A2D4			KEY	= DATAORIGIN+$0738
 18935 = A2D6			T1	= DATAORIGIN+$073A
 18936 = A2D8			T2	= DATAORIGIN+$073C
 18937 = A2DA			HLP	= DATAORIGIN+$073E
 18938 = A2DC			CN	= DATAORIGIN+$0740
 18939 = A2DD			adr.BALL0	= DATAORIGIN+$0741	; [27] RECORD
 18940 939F			.var BALL0	= adr.BALL0 .word
 18941 = A2DD			BALL0.X	= DATAORIGIN+$0741
 18942 = A2DF			BALL0.Y	= DATAORIGIN+$0743
 18943 = A2E1			BALL0.FINEX	= DATAORIGIN+$0745
 18944 = A2E3			BALL0.FINEY	= DATAORIGIN+$0747
 18945 = A2E5			BALL0.OLDX	= DATAORIGIN+$0749
 18946 = A2E7			BALL0.OLDY	= DATAORIGIN+$074B
 18947 = A2E9			BALL0.SPEED	= DATAORIGIN+$074D
 18948 = A2EB			BALL0.FINESPEED	= DATAORIGIN+$074F
 18949 = A2ED			BALL0.SPEEDX	= DATAORIGIN+$0751
 18950 = A2EF			BALL0.SPEEDY	= DATAORIGIN+$0753
 18951 = A2F1			BALL0.SBD	= DATAORIGIN+$0755
 18952 = A2F3			BALL0.BRWHIT	= DATAORIGIN+$0757
 18953 = A2F4			BALL0.INPLAY	= DATAORIGIN+$0758
 18954 = A2F5			BALL0.LAUNCH	= DATAORIGIN+$0759
 18955 = A2F6			BALL0.ONVAUS	= DATAORIGIN+$075A
 18956 = A2F7			BALL0.STM	= DATAORIGIN+$075B
 18957 = A2F8			adr.BALL1	= DATAORIGIN+$075C	; [27] RECORD
 18958 939F			.var BALL1	= adr.BALL1 .word
 18959 = A2F8			BALL1.X	= DATAORIGIN+$075C
 18960 = A2FA			BALL1.Y	= DATAORIGIN+$075E
 18961 = A2FC			BALL1.FINEX	= DATAORIGIN+$0760
 18962 = A2FE			BALL1.FINEY	= DATAORIGIN+$0762
 18963 = A300			BALL1.OLDX	= DATAORIGIN+$0764
 18964 = A302			BALL1.OLDY	= DATAORIGIN+$0766
 18965 = A304			BALL1.SPEED	= DATAORIGIN+$0768
 18966 = A306			BALL1.FINESPEED	= DATAORIGIN+$076A
 18967 = A308			BALL1.SPEEDX	= DATAORIGIN+$076C
 18968 = A30A			BALL1.SPEEDY	= DATAORIGIN+$076E
 18969 = A30C			BALL1.SBD	= DATAORIGIN+$0770
 18970 = A30E			BALL1.BRWHIT	= DATAORIGIN+$0772
 18971 = A30F			BALL1.INPLAY	= DATAORIGIN+$0773
 18972 = A310			BALL1.LAUNCH	= DATAORIGIN+$0774
 18973 = A311			BALL1.ONVAUS	= DATAORIGIN+$0775
 18974 = A312			BALL1.STM	= DATAORIGIN+$0776
 18975 = A313			adr.BALL2	= DATAORIGIN+$0777	; [27] RECORD
 18976 939F			.var BALL2	= adr.BALL2 .word
 18977 = A313			BALL2.X	= DATAORIGIN+$0777
 18978 = A315			BALL2.Y	= DATAORIGIN+$0779
 18979 = A317			BALL2.FINEX	= DATAORIGIN+$077B
 18980 = A319			BALL2.FINEY	= DATAORIGIN+$077D
 18981 = A31B			BALL2.OLDX	= DATAORIGIN+$077F
 18982 = A31D			BALL2.OLDY	= DATAORIGIN+$0781
 18983 = A31F			BALL2.SPEED	= DATAORIGIN+$0783
 18984 = A321			BALL2.FINESPEED	= DATAORIGIN+$0785
 18985 = A323			BALL2.SPEEDX	= DATAORIGIN+$0787
 18986 = A325			BALL2.SPEEDY	= DATAORIGIN+$0789
 18987 = A327			BALL2.SBD	= DATAORIGIN+$078B
 18988 = A329			BALL2.BRWHIT	= DATAORIGIN+$078D
 18989 = A32A			BALL2.INPLAY	= DATAORIGIN+$078E
 18990 = A32B			BALL2.LAUNCH	= DATAORIGIN+$078F
 18991 = A32C			BALL2.ONVAUS	= DATAORIGIN+$0790
 18992 = A32D			BALL2.STM	= DATAORIGIN+$0791
 18993
 18994 = A2D0			@VarData	= X
 18995 = 005E			@VarDataSize	= 94
 18996
 18997 939F 60				rts						; ret
 18998 = 93A0 DD A2		BALL0
 18998 = 93A2 F8 A2		BALL1
 18998 = 93A4 13 A3		BALL2
 18998 				.endl
 18999
 19000 93A6			.local	CHOOSE_START_WALL				; FUNCTION
 19001
 19002 				; optimize OK (service.pas), line = 3515
 19003
 19004 93A6 A9 01			lda #$01
 19005 93A8 8D 3C A3			sta ST
 19006 93AB A9 00			lda #$00
 19007 93AD 8D 3D A3			sta ST+1
 19008
 19009 				; optimize OK (service.pas), line = 3573
 19010
 19011 93B0 AD 3C A3			lda ST
 19012 93B3 8D 36 A3			sta RESULT
 19013 93B6 AD 3D A3			lda ST+1
 19014 93B9 8D 37 A3			sta RESULT+1
 19015 93BC			@exit
 19016
 19017 				; ------------------------------------------------------------
 19018
 19019 = A336			RESULT	= DATAORIGIN+$079A
 19020 = 0046			PX	= $46
 19021 = 0064			PY	= $64
 19022 = 0022			DX	= $22
 19023 = 0023			DY	= $23
 19024 = 0013			DDX	= $13
 19025 = 000E			DDY	= $0E
 19026 = A338			X	= DATAORIGIN+$079C
 19027 = A33A			Y	= DATAORIGIN+$079E
 19028 = A33C			ST	= DATAORIGIN+$07A0
 19029 = A33E			OLDX	= DATAORIGIN+$07A2
 19030 = A340			OLDY	= DATAORIGIN+$07A4
 19031 = A342			NEWX	= DATAORIGIN+$07A6
 19032 = A344			NEWY	= DATAORIGIN+$07A8
 19033
 19034 = A338			@VarData	= X
 19035 = 000E			@VarDataSize	= 14
 19036
 19037 93BC 60				rts						; ret
 19038 				.endl
 19039
 19040 93BD			.local	SET_START_PARAMETERS				; PROCEDURE
 19041
 19042 				; optimize OK (service.pas), line = 3582
 19043
 19044 93BD A9 01			lda #$01
 19045 93BF 8D 46 A3			sta X
 19046
 19047 93C2			l_37C4
 19048 				; --- ForToDoCondition
 19049 93C2 AD 46 A3			lda X
 19050 93C5 C9 03			cmp #$03
 19051 93C7 90 03 4C 53 94		jcs l_37D2
 19052
 19053 				; optimize OK (service.pas), line = 3584
 19054
 19055 93CC 0A				asl @
 19056 93CD 0A				asl @
 19057 93CE A8				tay
 19058 93CF A9 00			lda #$00
 19059 93D1 99 5C 9D			sta adr.SCORE.PLAYER,y
 19060 93D4 99 5D 9D			sta adr.SCORE.PLAYER+1,y
 19061 93D7 99 5E 9D			sta adr.SCORE.PLAYER+2,y
 19062 93DA 99 5F 9D			sta adr.SCORE.PLAYER+3,y
 19063
 19064 				; optimize OK (service.pas), line = 3585
 19065
 19066 93DD AC 46 A3			ldy X
 19067 93E0 A9 05			lda #$05
 19068 93E2 99 6B 9D			sta adr.SCORE.LIVES,y
 19069
 19070 				; optimize OK (service.pas), line = 3586
 19071
 19072 93E5 A9 01			lda #$01
 19073 93E7 99 68 9D			sta adr.SCORE.WALL_N,y
 19074
 19075 				; optimize FAIL (1, service.pas), line = 3587
 19076
 19077 93EA E8				inx
 19078 93EB AD 46 A3 95 96		mva X :STACKORIGIN,x
 19079 93F0 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19080 93F4 E8				inx
 19081 93F5 A9 00 95 96			mva #$00 :STACKORIGIN,x
 19082 93F9 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
 19083 93FD 20 27 13			jsr imulWORD
 19084 9400 A5 86			lda :eax
 19085 9402 95 95			sta :STACKORIGIN-1,x
 19086 9404 A5 87			lda :eax+1
 19087 9406 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 19088 9408 A5 88			lda :eax+2
 19089 940A 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
 19090 940C A5 89			lda :eax+3
 19091 940E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
 19092 9410 A9 00 95 96			mva #$00 :STACKORIGIN,x
 19093 9414 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 19094 9416 E8				inx
 19095 9417 AD 9A 9B 95 96		mva ALL_WALLS :STACKORIGIN,x
 19096 941C AD 9B 9B 95 A6		mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
 19097 9421 A9 00			lda <adr.WALL_P
 19098 9423 18 75 94			add :STACKORIGIN-2,x
 19099 9426 85 8E			sta @move.dst
 19100 9428 A9 D8			lda >adr.WALL_P
 19101 942A 75 A4			adc :STACKORIGIN-2+STACKWIDTH,x
 19102 942C 85 8F			sta @move.dst+1
 19103 942E B5 96			lda :STACKORIGIN,x
 19104 9430 85 8A			sta @move.src
 19105 9432 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 19106 9434 85 8B			sta @move.src+1
 19107 9436 CA				dex
 19108 9437 CA				dex
 19109 9438 A9 00			lda <256
 19110 943A 85 86			sta @move.cnt
 19111 943C A9 01			lda >256
 19112 943E 85 87			sta @move.cnt+1
 19113 9440 20 E5 11			jsr @move
 19114
 19115 				; optimize OK (service.pas), line = 3589
 19116
 19117 9443 AC 46 A3			ldy X
 19118 9446 A9 00			lda #$00
 19119 9448 99 73 9D			sta adr.SCORE.ROUNDSEL,y
 19120
 19121 				; --- ForToDoEpilog
 19122 944B EE 46 A3			inc X
 19123 944E F0 03 4C C2 93		jne l_37C4
 19124 9453			l_37D2
 19125
 19126 				; optimize OK (service.pas), line = 3592
 19127
 19128 9453 A9 01			lda #$01
 19129 9455 8D 77 9D			sta CUR_PLAYER
 19130
 19131 				; ------------------------------------------------------------
 19132
 19133 = A346			X	= DATAORIGIN+$07AA
 19134
 19135 = A346			@VarData	= X
 19136 = 0001			@VarDataSize	= 1
 19137
 19138 9458			@exit
 19139 					.ifdef @new
 19140 					lda <@VarData
 19141 					sta :ztmp
 19142 					lda >@VarData
 19143 					ldy #@VarDataSize-1
 19144 					jmp @FreeMem
 19145 					els
 19146 9458 60				rts						; ret
 19147 					eif
 19148 				.endl
 19149
 19150 9459			.local	MAINSCREEN					; FUNCTION
 19151
 19152 				; optimize FAIL ('NOSOUND', service.pas), line = 3652
 19153
 19154 9459 20 0F 2D			jsr NOSOUND
 19155
 19156 				; optimize OK (service.pas), line = 3653
 19157
 19158 945C A9 00			lda #$00
 19159 945E 8D 76 9D			sta SCORE.ABORTPLAY
 19160
 19161 				; optimize OK (service.pas), line = 3658
 19162
 19163 9461 AD 50 9B			lda PLAYSCREEN
 19164 9464 8D 33 A1			sta SETPALETTE.BTM
 19165 9467 AD 51 9B			lda PLAYSCREEN+1
 19166 946A 8D 34 A1			sta SETPALETTE.BTM+1
 19167 946D 20 EB 33			jsr SETPALETTE
 19168
 19169 				; optimize OK (service.pas), line = 3664
 19170
 19171 9470 AD DF 9C			lda PRESENTS.OFS
 19172 9473 8D 9A A0			sta BLITBOX.SRC
 19173 9476 AD E0 9C			lda PRESENTS.OFS+1
 19174 9479 8D 9B A0			sta BLITBOX.SRC+1
 19175 947C AD E1 9C			lda PRESENTS.OFS+2
 19176 947F 8D 9C A0			sta BLITBOX.SRC+2
 19177 9482 AD E2 9C			lda PRESENTS.OFS+3
 19178 9485 8D 9D A0			sta BLITBOX.SRC+3
 19179 9488 A9 00			lda #$00
 19180 948A 8D 9E A0			sta BLITBOX.DST
 19181 948D A9 50			lda #$50
 19182 948F 8D 9F A0			sta BLITBOX.DST+1
 19183 9492 A9 00			lda #$00
 19184 9494 8D A0 A0			sta BLITBOX.DST+2
 19185 9497 8D A1 A0			sta BLITBOX.DST+3
 19186 949A A9 40			lda #$40
 19187 949C 8D A2 A0			sta BLITBOX.W
 19188 949F A9 01			lda #$01
 19189 94A1 8D A3 A0			sta BLITBOX.W+1
 19190 94A4 A9 C8			lda #$C8
 19191 94A6 8D A4 A0			sta BLITBOX.H
 19192 94A9 20 B4 2A			jsr BLITBOX
 19193
 19194 				; optimize OK (service.pas), line = 3702
 19195
 19196 94AC A9 01			lda #$01
 19197 94AE 8D 47 A3			sta RESULT
 19198 94B1 A9 00			lda #$00
 19199 94B3 8D 48 A3			sta RESULT+1
 19200 94B6			@exit
 19201
 19202 				; ------------------------------------------------------------
 19203
 19204 = A347			RESULT	= DATAORIGIN+$07AB
 19205 = A349			X	= DATAORIGIN+$07AD
 19206 = A34B			Y	= DATAORIGIN+$07AF
 19207 = A34D			Z	= DATAORIGIN+$07B1
 19208 = A34F			K	= DATAORIGIN+$07B3
 19209 = A351			IK	= DATAORIGIN+$07B5
 19210
 19211 = A349			@VarData	= X
 19212 = 000A			@VarDataSize	= 10
 19213
 19214 94B6 60				rts						; ret
 19215 				.endl
 19216
 19217 94B7			.local	START_GAME					; PROCEDURE
 19218
 19219 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3710
 19220
 19221 94B7 20 BD 93			jsr SET_START_PARAMETERS
 19222
 19223 				; optimize OK (service.pas), line = 3711
 19224
 19225 94BA AD 54 A3			lda PLAYERS+1
 19226 94BD D0 05			bne @+
 19227 94BF AD 53 A3			lda PLAYERS
 19228 94C2 C9 01			cmp #$01
 19229 				@
 19230 94C4 D0 05			jne l_382C
 19231 94C6 A9 00			lda #$00
 19232 94C8 8D 6D 9D			sta adr.SCORE.LIVES+$02
 19233 94CB			l_382C
 19234
 19235 				; optimize OK (service.pas), line = 3714
 19236
 19237 94CB A9 00			lda #$00
 19238 94CD 8D 7F 9D			sta TRAINER
 19239
 19240 				; optimize OK (service.pas), line = 3715
 19241
 19242 94D0 A9 00			lda <adr.WALL
 19243 94D2 85 8E			sta @move.dst
 19244 94D4 A9 DB			lda >adr.WALL
 19245 94D6 85 8F			sta @move.dst+1
 19246 94D8 AD 96 9B			lda WALL_P
 19247 94DB 85 8A			sta @move.src
 19248 94DD AD 77 9D			lda CUR_PLAYER
 19249 94E0 18 6D 97 9B			add WALL_P+1
 19250 94E4 85 8B			sta @move.src+1
 19251 94E6 A9 00			lda <256
 19252 94E8 85 86			sta @move.cnt
 19253 94EA A9 01			lda >256
 19254 94EC 85 87			sta @move.cnt+1
 19255 94EE 20 E5 11			jsr @move
 19256
 19257 				; optimize FAIL ('SET_WALL', service.pas), line = 3719
 19258
 19259 94F1 20 CE 50			jsr SET_WALL
 19260
 19261 				; optimize OK (service.pas), line = 3721
 19262
 19263 94F4 AD 70 9B			lda PATTERN
 19264 94F7 8D 3A A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 19265 94FA AD 71 9B			lda PATTERN+1
 19266 94FD 8D 3B A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 19267 9500 20 48 71			jsr FILL_PICTURE_WITH_PATTERN
 19268
 19269 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3722
 19270
 19271 9503 E8				inx
 19272 9504 AD 50 9B 95 96		mva PLAYSCREEN :STACKORIGIN,x
 19273 9509 AD 51 9B 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 19274 950E 20 96 33			jsr SHOWBTMPICTURE
 19275
 19276 				; optimize OK (service.pas), line = 3725
 19277
 19278 9511 AD 50 9B			lda PLAYSCREEN
 19279 9514 8D 33 A1			sta SETPALETTE.BTM
 19280 9517 AD 51 9B			lda PLAYSCREEN+1
 19281 951A 8D 34 A1			sta SETPALETTE.BTM+1
 19282 951D 20 EB 33			jsr SETPALETTE
 19283
 19284 				; optimize OK (service.pas), line = 3729
 19285
 19286 9520 AD 60 9D			lda adr.SCORE.PLAYER+$04
 19287 9523 8D 85 A2			sta WRITE_SCORE.SC
 19288 9526 AD 61 9D			lda adr.SCORE.PLAYER+1+$04
 19289 9529 8D 86 A2			sta WRITE_SCORE.SC+1
 19290 952C AD 62 9D			lda adr.SCORE.PLAYER+2+$04
 19291 952F 8D 87 A2			sta WRITE_SCORE.SC+2
 19292 9532 AD 63 9D			lda adr.SCORE.PLAYER+3+$04
 19293 9535 8D 88 A2			sta WRITE_SCORE.SC+3
 19294 9538 A9 FD			lda #$FD
 19295 953A 8D 81 A2			sta WRITE_SCORE.PX
 19296 953D A9 00			lda #$00
 19297 953F 8D 82 A2			sta WRITE_SCORE.PX+1
 19298 9542 A9 3C			lda #$3C
 19299 9544 8D 83 A2			sta WRITE_SCORE.PY
 19300 9547 A9 00			lda #$00
 19301 9549 8D 84 A2			sta WRITE_SCORE.PY+1
 19302 954C 20 A7 7B			jsr WRITE_SCORE
 19303
 19304 				; optimize OK (service.pas), line = 3730
 19305
 19306 954F AD 64 9D			lda adr.SCORE.PLAYER+$08
 19307 9552 8D 85 A2			sta WRITE_SCORE.SC
 19308 9555 AD 65 9D			lda adr.SCORE.PLAYER+1+$08
 19309 9558 8D 86 A2			sta WRITE_SCORE.SC+1
 19310 955B AD 66 9D			lda adr.SCORE.PLAYER+2+$08
 19311 955E 8D 87 A2			sta WRITE_SCORE.SC+2
 19312 9561 AD 67 9D			lda adr.SCORE.PLAYER+3+$08
 19313 9564 8D 88 A2			sta WRITE_SCORE.SC+3
 19314 9567 A9 FD			lda #$FD
 19315 9569 8D 81 A2			sta WRITE_SCORE.PX
 19316 956C A9 00			lda #$00
 19317 956E 8D 82 A2			sta WRITE_SCORE.PX+1
 19318 9571 A9 5D			lda #$5D
 19319 9573 8D 83 A2			sta WRITE_SCORE.PY
 19320 9576 A9 00			lda #$00
 19321 9578 8D 84 A2			sta WRITE_SCORE.PY+1
 19322 957B 20 A7 7B			jsr WRITE_SCORE
 19323
 19324 				; optimize OK (service.pas), line = 3731
 19325
 19326 957E A9 FD			lda #$FD
 19327 9580 8D 81 A2			sta WRITE_SCORE.PX
 19328 9583 A9 00			lda #$00
 19329 9585 8D 82 A2			sta WRITE_SCORE.PX+1
 19330 9588 A9 80			lda #$80
 19331 958A 8D 83 A2			sta WRITE_SCORE.PY
 19332 958D A9 00			lda #$00
 19333 958F 8D 84 A2			sta WRITE_SCORE.PY+1
 19334 9592 AD 6E 9D			lda SCORE.HISCORE
 19335 9595 8D 85 A2			sta WRITE_SCORE.SC
 19336 9598 AD 6F 9D			lda SCORE.HISCORE+1
 19337 959B 8D 86 A2			sta WRITE_SCORE.SC+1
 19338 959E AD 70 9D			lda SCORE.HISCORE+2
 19339 95A1 8D 87 A2			sta WRITE_SCORE.SC+2
 19340 95A4 AD 71 9D			lda SCORE.HISCORE+3
 19341 95A7 8D 88 A2			sta WRITE_SCORE.SC+3
 19342 95AA 20 A7 7B			jsr WRITE_SCORE
 19343
 19344 				; --- RepeatUntilProlog
 19345 95AD			l_385A
 19346
 19347 				; --- RepeatUntilProlog
 19348 95AD			l_385B
 19349
 19350 				; optimize OK (service.pas), line = 3749
 19351
 19352 95AD AC 77 9D			ldy CUR_PLAYER
 19353 95B0 B9 73 9D			lda adr.SCORE.ROUNDSEL,y
 19354 95B3 F0 03 4C 64 96		jne l_386D
 19355
 19356 				; optimize FAIL (1, service.pas), line = 3751
 19357
 19358 95B8 E8				inx
 19359 95B9 AD 77 9D 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19360 95BE A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19361 95C2 20 A6 93			jsr CHOOSE_START_WALL
 19362 95C5 E8				inx
 19363 95C6 AD 36 A3 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 19364 95CB AD 37 A3 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 19365 95D0 B4 95			ldy :STACKORIGIN-1,x
 19366 95D2 B5 96			lda :STACKORIGIN,x
 19367 95D4 99 68 9D			sta adr.SCORE.WALL_N,y
 19368 95D7 CA				dex
 19369
 19370 				; optimize FAIL (1, service.pas), line = 3754
 19371
 19372 95D8 AD 77 9D 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19373 95DD A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19374 95E1 E8				inx
 19375 95E2 A9 00 95 96			mva #$00 :STACKORIGIN,x
 19376 95E6 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
 19377 95EA 20 27 13			jsr imulWORD
 19378 95ED A5 86			lda :eax
 19379 95EF 95 95			sta :STACKORIGIN-1,x
 19380 95F1 A5 87			lda :eax+1
 19381 95F3 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 19382 95F5 A5 88			lda :eax+2
 19383 95F7 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
 19384 95F9 A5 89			lda :eax+3
 19385 95FB 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
 19386 95FD AC 77 9D			ldy CUR_PLAYER
 19387 9600 B9 68 9D			lda adr.SCORE.WALL_N,y
 19388 9603 95 96			sta :STACKORIGIN,x
 19389 9605 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19390 9609 E8				inx
 19391 960A A9 01 95 96			mva #$01 :STACKORIGIN,x
 19392 960E A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19393 9612 20 CC 10			jsr subAX_CX
 19394 9615 A9 00 95 96			mva #$00 :STACKORIGIN,x
 19395 9619 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
 19396 961D 20 27 13			jsr imulWORD
 19397 9620 A5 86			lda :eax
 19398 9622 95 95			sta :STACKORIGIN-1,x
 19399 9624 A5 87			lda :eax+1
 19400 9626 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 19401 9628 A5 88			lda :eax+2
 19402 962A 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
 19403 962C A5 89			lda :eax+3
 19404 962E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
 19405 9630 AD 9A 9B 95 96		mva ALL_WALLS :STACKORIGIN,x
 19406 9635 AD 9B 9B 95 A6		mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
 19407 963A A9 00			lda <adr.WALL_P
 19408 963C 18 75 94			add :STACKORIGIN-2,x
 19409 963F 85 8E			sta @move.dst
 19410 9641 A9 D8			lda >adr.WALL_P
 19411 9643 75 A4			adc :STACKORIGIN-2+STACKWIDTH,x
 19412 9645 85 8F			sta @move.dst+1
 19413 9647 B5 96			lda :STACKORIGIN,x
 19414 9649 85 8A			sta @move.src
 19415 964B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 19416 964D 85 8B			sta @move.src+1
 19417 964F CA				dex
 19418 9650 CA				dex
 19419 9651 A9 00			lda <256
 19420 9653 85 86			sta @move.cnt
 19421 9655 A9 01			lda >256
 19422 9657 85 87			sta @move.cnt+1
 19423 9659 20 E5 11			jsr @move
 19424
 19425 				; optimize OK (service.pas), line = 3758
 19426
 19427 965C AC 77 9D			ldy CUR_PLAYER
 19428 965F A9 01			lda #$01
 19429 9661 99 73 9D			sta adr.SCORE.ROUNDSEL,y
 19430 9664			l_386D
 19431
 19432 				; optimize OK (service.pas), line = 3762
 19433
 19434 9664 A9 00			lda <adr.WALL
 19435 9666 85 8E			sta @move.dst
 19436 9668 A9 DB			lda >adr.WALL
 19437 966A 85 8F			sta @move.dst+1
 19438 966C AD 96 9B			lda WALL_P
 19439 966F 85 8A			sta @move.src
 19440 9671 AD 77 9D			lda CUR_PLAYER
 19441 9674 18 6D 97 9B			add WALL_P+1
 19442 9678 85 8B			sta @move.src+1
 19443 967A A9 00			lda <256
 19444 967C 85 86			sta @move.cnt
 19445 967E A9 01			lda >256
 19446 9680 85 87			sta @move.cnt+1
 19447 9682 20 E5 11			jsr @move
 19448
 19449 				; optimize FAIL ('SET_WALL', service.pas), line = 3763
 19450
 19451 9685 20 CE 50			jsr SET_WALL
 19452
 19453 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3768
 19454
 19455 9688 20 7C 8B			jsr BOUNCEBALL
 19456 968B AD CF A2			lda BOUNCEBALL.RESULT
 19457 968E 8D 55 A3			sta NWALL
 19458
 19459 				; optimize OK (service.pas), line = 3771
 19460
 19461 9691 D0 03 4C 37 97		jeq l_38AF
 19462
 19463 				; optimize OK (service.pas), line = 3774
 19464
 19465 9696 AC 77 9D			ldy CUR_PLAYER
 19466 9699 B9 68 9D			lda adr.SCORE.WALL_N,y
 19467 969C 18 69 01			add #$01
 19468 969F 99 68 9D			sta adr.SCORE.WALL_N,y
 19469
 19470 				; optimize OK (service.pas), line = 3777
 19471
 19472 96A2 AD 5B 9D			lda TOTALWALL
 19473 96A5 D9 68 9D			cmp adr.SCORE.WALL_N,y
 19474 96A8 B0 05			jcs l_38CB
 19475
 19476 				; optimize OK (service.pas), line = 3778
 19477
 19478 96AA A9 01			lda #$01
 19479 96AC 99 68 9D			sta adr.SCORE.WALL_N,y
 19480 96AF			l_38CB
 19481
 19482 				; optimize FAIL (1, service.pas), line = 3781
 19483
 19484 96AF E8				inx
 19485 96B0 AD 77 9D 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19486 96B5 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19487 96B9 E8				inx
 19488 96BA A9 00 95 96			mva #$00 :STACKORIGIN,x
 19489 96BE A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
 19490 96C2 20 27 13			jsr imulWORD
 19491 96C5 A5 86			lda :eax
 19492 96C7 95 95			sta :STACKORIGIN-1,x
 19493 96C9 A5 87			lda :eax+1
 19494 96CB 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 19495 96CD A5 88			lda :eax+2
 19496 96CF 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
 19497 96D1 A5 89			lda :eax+3
 19498 96D3 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
 19499 96D5 AC 77 9D			ldy CUR_PLAYER
 19500 96D8 B9 68 9D			lda adr.SCORE.WALL_N,y
 19501 96DB 95 96			sta :STACKORIGIN,x
 19502 96DD A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19503 96E1 E8				inx
 19504 96E2 A9 01 95 96			mva #$01 :STACKORIGIN,x
 19505 96E6 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19506 96EA 20 CC 10			jsr subAX_CX
 19507 96ED A9 00 95 96			mva #$00 :STACKORIGIN,x
 19508 96F1 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
 19509 96F5 20 27 13			jsr imulWORD
 19510 96F8 A5 86			lda :eax
 19511 96FA 95 95			sta :STACKORIGIN-1,x
 19512 96FC A5 87			lda :eax+1
 19513 96FE 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 19514 9700 A5 88			lda :eax+2
 19515 9702 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
 19516 9704 A5 89			lda :eax+3
 19517 9706 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
 19518 9708 AD 9A 9B 95 96		mva ALL_WALLS :STACKORIGIN,x
 19519 970D AD 9B 9B 95 A6		mva ALL_WALLS+1 :STACKORIGIN+STACKWIDTH,x
 19520 9712 A9 00			lda <adr.WALL_P
 19521 9714 18 75 94			add :STACKORIGIN-2,x
 19522 9717 85 8E			sta @move.dst
 19523 9719 A9 D8			lda >adr.WALL_P
 19524 971B 75 A4			adc :STACKORIGIN-2+STACKWIDTH,x
 19525 971D 85 8F			sta @move.dst+1
 19526 971F B5 96			lda :STACKORIGIN,x
 19527 9721 85 8A			sta @move.src
 19528 9723 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 19529 9725 85 8B			sta @move.src+1
 19530 9727 CA				dex
 19531 9728 CA				dex
 19532 9729 A9 00			lda <256
 19533 972B 85 86			sta @move.cnt
 19534 972D A9 01			lda >256
 19535 972F 85 87			sta @move.cnt+1
 19536 9731 20 E5 11			jsr @move
 19537 9734 4C 42 97			jmp l_38F5
 19538 9737			l_38AF
 19539
 19540 				; optimize OK (service.pas), line = 3787
 19541
 19542 9737 AC 77 9D			ldy CUR_PLAYER
 19543 973A B9 6B 9D			lda adr.SCORE.LIVES,y
 19544 973D D0 03			jne l_390A
 19545 973F 20 98 73			jsr GAME_OVER
 19546 9742			l_38F5
 19547 9742			l_390A
 19548
 19549 				; optimize OK (service.pas), line = 3792
 19550
 19551 9742 AD 55 A3			lda NWALL
 19552 9745 F0 03 4C AD 95		jne l_385B
 19553
 19554 				; optimize FAIL (0, service.pas), line = 3795
 19555
 19556 974A EE 77 9D			inc CUR_PLAYER
 19557
 19558 				; optimize OK (service.pas), line = 3796
 19559
 19560 974D AD 53 A3			lda PLAYERS
 19561 9750 CD 77 9D			cmp CUR_PLAYER
 19562 9753 AD 54 A3			lda PLAYERS+1
 19563 9756 E9 00			sbc #$00
 19564 9758 50 02			svc
 19565 975A 49 80			eor #$80
 19566 975C 10 05			jpl l_3932
 19567 975E A9 01			lda #$01
 19568 9760 8D 77 9D			sta CUR_PLAYER
 19569 9763			l_3932
 19570
 19571 				; optimize OK (service.pas), line = 3802
 19572
 19573 9763 AC 77 9D			ldy CUR_PLAYER
 19574 9766 B9 6B 9D			lda adr.SCORE.LIVES,y
 19575 9769 D0 09			jne l_394E
 19576 976B A9 03			lda #$03
 19577 976D 38 ED 77 9D			sub CUR_PLAYER
 19578 9771 8D 77 9D			sta CUR_PLAYER
 19579 9774			l_394E
 19580
 19581 				; optimize OK (service.pas), line = 3807
 19582
 19583 9774 A0 01			ldy #1
 19584 9776 AD 6C 9D			lda adr.SCORE.LIVES+$01
 19585 9779 F0 01			beq @+
 19586 977B 88				dey
 19587 				@
 19588 977C 84 9F			sty :STACKORIGIN+9
 19589 977E A0 01			ldy #1
 19590 9780 AD 6D 9D			lda adr.SCORE.LIVES+$02
 19591 9783 F0 01			beq @+
 19592 9785 88				dey
 19593 				@
 19594 9786 98				tya
 19595 9787 25 9F			and :STACKORIGIN+9
 19596 9789 0D 76 9D			ora SCORE.ABORTPLAY
 19597 978C D0 03 4C AD 95		jeq l_385A
 19598
 19599 				; ------------------------------------------------------------
 19600
 19601 = A353			PLAYERS	= DATAORIGIN+$07B7
 19602 = A355			NWALL	= DATAORIGIN+$07B9
 19603
 19604 = A353			@VarData	= PLAYERS
 19605 = 0003			@VarDataSize	= 3
 19606
 19607 9791			@exit
 19608 					.ifdef @new
 19609 					lda <@VarData
 19610 					sta :ztmp
 19611 					lda >@VarData
 19612 					ldy #@VarDataSize-1
 19613 					jmp @FreeMem
 19614 					els
 19615 9791 60				rts						; ret
 19616 					eif
 19617 				.endl
 19618
 19619 9792			.local	INIT_GAME					; PROCEDURE
 19620
 19621 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 166
 19622
 19623 9792 20 AD 2D			jsr INITSVGA
 19624
 19625 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 167
 19626
 19627 9795 20 6E 2D			jsr INITROWARRAY
 19628
 19629 				; optimize OK (btm.inc), line = 1
 19630
 19631 9798 A9 00			lda #$00
 19632 979A 8D A7 9C			sta PLAYSCREEN.OFS
 19633 979D A9 4A			lda #$4A
 19634 979F 8D A8 9C			sta PLAYSCREEN.OFS+1
 19635 97A2 A9 01			lda #$01
 19636 97A4 8D A9 9C			sta PLAYSCREEN.OFS+2
 19637 97A7 A9 00			lda #$00
 19638 97A9 8D AA 9C			sta PLAYSCREEN.OFS+3
 19639
 19640 				; optimize OK (btm.inc), line = 2
 19641
 19642 97AC A9 40			lda #$40
 19643 97AE 8D A3 9C			sta PLAYSCREEN.WIDTH
 19644 97B1 A9 01			lda #$01
 19645 97B3 8D A4 9C			sta PLAYSCREEN.WIDTH+1
 19646
 19647 				; optimize OK (btm.inc), line = 3
 19648
 19649 97B6 A9 C8			lda #$C8
 19650 97B8 8D A5 9C			sta PLAYSCREEN.HEIGHT
 19651 97BB A9 00			lda #$00
 19652 97BD 8D A6 9C			sta PLAYSCREEN.HEIGHT+1
 19653
 19654 				; optimize OK (btm.inc), line = 5
 19655
 19656 97C0 8D DF 9C			sta PRESENTS.OFS
 19657 97C3 A9 44			lda #$44
 19658 97C5 8D E0 9C			sta PRESENTS.OFS+1
 19659 97C8 A9 02			lda #$02
 19660 97CA 8D E1 9C			sta PRESENTS.OFS+2
 19661 97CD A9 00			lda #$00
 19662 97CF 8D E2 9C			sta PRESENTS.OFS+3
 19663
 19664 				; optimize OK (btm.inc), line = 6
 19665
 19666 97D2 A9 40			lda #$40
 19667 97D4 8D DB 9C			sta PRESENTS.WIDTH
 19668 97D7 A9 01			lda #$01
 19669 97D9 8D DC 9C			sta PRESENTS.WIDTH+1
 19670
 19671 				; optimize OK (btm.inc), line = 7
 19672
 19673 97DC A9 C8			lda #$C8
 19674 97DE 8D DD 9C			sta PRESENTS.HEIGHT
 19675 97E1 A9 00			lda #$00
 19676 97E3 8D DE 9C			sta PRESENTS.HEIGHT+1
 19677
 19678 				; optimize OK (btm.inc), line = 9
 19679
 19680 97E6 8D CF 9C			sta EXPLOSION.OFS
 19681 97E9 A9 3E			lda #$3E
 19682 97EB 8D D0 9C			sta EXPLOSION.OFS+1
 19683 97EE A9 03			lda #$03
 19684 97F0 8D D1 9C			sta EXPLOSION.OFS+2
 19685 97F3 A9 00			lda #$00
 19686 97F5 8D D2 9C			sta EXPLOSION.OFS+3
 19687
 19688 				; optimize OK (btm.inc), line = 10
 19689
 19690 97F8 A9 2A			lda #$2A
 19691 97FA 8D CB 9C			sta EXPLOSION.WIDTH
 19692 97FD A9 00			lda #$00
 19693 97FF 8D CC 9C			sta EXPLOSION.WIDTH+1
 19694
 19695 				; optimize OK (btm.inc), line = 11
 19696
 19697 9802 A9 72			lda #$72
 19698 9804 8D CD 9C			sta EXPLOSION.HEIGHT
 19699 9807 A9 00			lda #$00
 19700 9809 8D CE 9C			sta EXPLOSION.HEIGHT+1
 19701
 19702 				; optimize OK (btm.inc), line = 13
 19703
 19704 980C A9 B4			lda #$B4
 19705 980E 8D D7 9C			sta NEWVAUS.OFS
 19706 9811 A9 50			lda #$50
 19707 9813 8D D8 9C			sta NEWVAUS.OFS+1
 19708 9816 A9 03			lda #$03
 19709 9818 8D D9 9C			sta NEWVAUS.OFS+2
 19710 981B A9 00			lda #$00
 19711 981D 8D DA 9C			sta NEWVAUS.OFS+3
 19712
 19713 				; optimize OK (btm.inc), line = 14
 19714
 19715 9820 A9 29			lda #$29
 19716 9822 8D D3 9C			sta NEWVAUS.WIDTH
 19717 9825 A9 00			lda #$00
 19718 9827 8D D4 9C			sta NEWVAUS.WIDTH+1
 19719
 19720 				; optimize OK (btm.inc), line = 15
 19721
 19722 982A A9 C1			lda #$C1
 19723 982C 8D D5 9C			sta NEWVAUS.HEIGHT
 19724 982F A9 00			lda #$00
 19725 9831 8D D6 9C			sta NEWVAUS.HEIGHT+1
 19726
 19727 				; optimize OK (btm.inc), line = 17
 19728
 19729 9834 A9 9D			lda #$9D
 19730 9836 8D E7 9C			sta SOUNDFX.OFS
 19731 9839 A9 6F			lda #$6F
 19732 983B 8D E8 9C			sta SOUNDFX.OFS+1
 19733 983E A9 03			lda #$03
 19734 9840 8D E9 9C			sta SOUNDFX.OFS+2
 19735 9843 A9 00			lda #$00
 19736 9845 8D EA 9C			sta SOUNDFX.OFS+3
 19737
 19738 				; optimize OK (btm.inc), line = 18
 19739
 19740 9848 A9 15			lda #$15
 19741 984A 8D E3 9C			sta SOUNDFX.WIDTH
 19742 984D A9 00			lda #$00
 19743 984F 8D E4 9C			sta SOUNDFX.WIDTH+1
 19744
 19745 				; optimize OK (btm.inc), line = 19
 19746
 19747 9852 A9 26			lda #$26
 19748 9854 8D E5 9C			sta SOUNDFX.HEIGHT
 19749 9857 A9 00			lda #$00
 19750 9859 8D E6 9C			sta SOUNDFX.HEIGHT+1
 19751
 19752 				; optimize OK (btm.inc), line = 21
 19753
 19754 985C A9 BB			lda #$BB
 19755 985E 8D EF 9C			sta SHINEWALL.OFS
 19756 9861 A9 72			lda #$72
 19757 9863 8D F0 9C			sta SHINEWALL.OFS+1
 19758 9866 A9 03			lda #$03
 19759 9868 8D F1 9C			sta SHINEWALL.OFS+2
 19760 986B A9 00			lda #$00
 19761 986D 8D F2 9C			sta SHINEWALL.OFS+3
 19762
 19763 				; optimize OK (btm.inc), line = 22
 19764
 19765 9870 A9 10			lda #$10
 19766 9872 8D EB 9C			sta SHINEWALL.WIDTH
 19767 9875 A9 00			lda #$00
 19768 9877 8D EC 9C			sta SHINEWALL.WIDTH+1
 19769
 19770 				; optimize OK (btm.inc), line = 23
 19771
 19772 987A A9 50			lda #$50
 19773 987C 8D ED 9C			sta SHINEWALL.HEIGHT
 19774 987F A9 00			lda #$00
 19775 9881 8D EE 9C			sta SHINEWALL.HEIGHT+1
 19776
 19777 				; optimize OK (btm.inc), line = 25
 19778
 19779 9884 A9 BB			lda #$BB
 19780 9886 8D F7 9C			sta MINIVAUS.OFS
 19781 9889 A9 77			lda #$77
 19782 988B 8D F8 9C			sta MINIVAUS.OFS+1
 19783 988E A9 03			lda #$03
 19784 9890 8D F9 9C			sta MINIVAUS.OFS+2
 19785 9893 A9 00			lda #$00
 19786 9895 8D FA 9C			sta MINIVAUS.OFS+3
 19787
 19788 				; optimize OK (btm.inc), line = 26
 19789
 19790 9898 A9 14			lda #$14
 19791 989A 8D F3 9C			sta MINIVAUS.WIDTH
 19792 989D A9 00			lda #$00
 19793 989F 8D F4 9C			sta MINIVAUS.WIDTH+1
 19794
 19795 				; optimize OK (btm.inc), line = 27
 19796
 19797 98A2 A9 05			lda #$05
 19798 98A4 8D F5 9C			sta MINIVAUS.HEIGHT
 19799 98A7 A9 00			lda #$00
 19800 98A9 8D F6 9C			sta MINIVAUS.HEIGHT+1
 19801
 19802 				; optimize OK (btm.inc), line = 29
 19803
 19804 98AC A9 1F			lda #$1F
 19805 98AE 8D FF 9C			sta LEVELSEL.OFS
 19806 98B1 A9 78			lda #$78
 19807 98B3 8D 00 9D			sta LEVELSEL.OFS+1
 19808 98B6 A9 03			lda #$03
 19809 98B8 8D 01 9D			sta LEVELSEL.OFS+2
 19810 98BB A9 00			lda #$00
 19811 98BD 8D 02 9D			sta LEVELSEL.OFS+3
 19812
 19813 				; optimize OK (btm.inc), line = 30
 19814
 19815 98C0 A9 15			lda #$15
 19816 98C2 8D FB 9C			sta LEVELSEL.WIDTH
 19817 98C5 A9 00			lda #$00
 19818 98C7 8D FC 9C			sta LEVELSEL.WIDTH+1
 19819
 19820 				; optimize OK (btm.inc), line = 31
 19821
 19822 98CA A9 5F			lda #$5F
 19823 98CC 8D FD 9C			sta LEVELSEL.HEIGHT
 19824 98CF A9 00			lda #$00
 19825 98D1 8D FE 9C			sta LEVELSEL.HEIGHT+1
 19826
 19827 				; optimize OK (btm.inc), line = 33
 19828
 19829 98D4 A9 EA			lda #$EA
 19830 98D6 8D 07 9D			sta LETTERS.OFS
 19831 98D9 A9 7F			lda #$7F
 19832 98DB 8D 08 9D			sta LETTERS.OFS+1
 19833 98DE A9 03			lda #$03
 19834 98E0 8D 09 9D			sta LETTERS.OFS+2
 19835 98E3 A9 00			lda #$00
 19836 98E5 8D 0A 9D			sta LETTERS.OFS+3
 19837
 19838 				; optimize OK (btm.inc), line = 34
 19839
 19840 98E8 A9 80			lda #$80
 19841 98EA 8D 03 9D			sta LETTERS.WIDTH
 19842 98ED A9 00			lda #$00
 19843 98EF 8D 04 9D			sta LETTERS.WIDTH+1
 19844
 19845 				; optimize OK (btm.inc), line = 35
 19846
 19847 98F2 A9 38			lda #$38
 19848 98F4 8D 05 9D			sta LETTERS.HEIGHT
 19849 98F7 A9 00			lda #$00
 19850 98F9 8D 06 9D			sta LETTERS.HEIGHT+1
 19851
 19852 				; optimize OK (btm.inc), line = 37
 19853
 19854 98FC A9 EA			lda #$EA
 19855 98FE 8D B7 9C			sta NORMAL.OFS
 19856 9901 A9 9B			lda #$9B
 19857 9903 8D B8 9C			sta NORMAL.OFS+1
 19858 9906 A9 03			lda #$03
 19859 9908 8D B9 9C			sta NORMAL.OFS+2
 19860 990B A9 00			lda #$00
 19861 990D 8D BA 9C			sta NORMAL.OFS+3
 19862
 19863 				; optimize OK (btm.inc), line = 38
 19864
 19865 9910 A9 20			lda #$20
 19866 9912 8D B3 9C			sta NORMAL.WIDTH
 19867 9915 A9 00			lda #$00
 19868 9917 8D B4 9C			sta NORMAL.WIDTH+1
 19869
 19870 				; optimize OK (btm.inc), line = 39
 19871
 19872 991A A9 07			lda #$07
 19873 991C 8D B5 9C			sta NORMAL.HEIGHT
 19874 991F A9 00			lda #$00
 19875 9921 8D B6 9C			sta NORMAL.HEIGHT+1
 19876
 19877 				; optimize OK (btm.inc), line = 41
 19878
 19879 9924 A9 CA			lda #$CA
 19880 9926 8D C7 9C			sta LASERS.OFS
 19881 9929 A9 9C			lda #$9C
 19882 992B 8D C8 9C			sta LASERS.OFS+1
 19883 992E A9 03			lda #$03
 19884 9930 8D C9 9C			sta LASERS.OFS+2
 19885 9933 A9 00			lda #$00
 19886 9935 8D CA 9C			sta LASERS.OFS+3
 19887
 19888 				; optimize OK (btm.inc), line = 42
 19889
 19890 9938 A9 20			lda #$20
 19891 993A 8D C3 9C			sta LASERS.WIDTH
 19892 993D A9 00			lda #$00
 19893 993F 8D C4 9C			sta LASERS.WIDTH+1
 19894
 19895 				; optimize OK (btm.inc), line = 43
 19896
 19897 9942 A9 07			lda #$07
 19898 9944 8D C5 9C			sta LASERS.HEIGHT
 19899 9947 A9 00			lda #$00
 19900 9949 8D C6 9C			sta LASERS.HEIGHT+1
 19901
 19902 				; optimize OK (btm.inc), line = 45
 19903
 19904 994C A9 AA			lda #$AA
 19905 994E 8D BF 9C			sta ENLARGED.OFS
 19906 9951 A9 9D			lda #$9D
 19907 9953 8D C0 9C			sta ENLARGED.OFS+1
 19908 9956 A9 03			lda #$03
 19909 9958 8D C1 9C			sta ENLARGED.OFS+2
 19910 995B A9 00			lda #$00
 19911 995D 8D C2 9C			sta ENLARGED.OFS+3
 19912
 19913 				; optimize OK (btm.inc), line = 46
 19914
 19915 9960 A9 40			lda #$40
 19916 9962 8D BB 9C			sta ENLARGED.WIDTH
 19917 9965 A9 00			lda #$00
 19918 9967 8D BC 9C			sta ENLARGED.WIDTH+1
 19919
 19920 				; optimize OK (btm.inc), line = 47
 19921
 19922 996A A9 07			lda #$07
 19923 996C 8D BD 9C			sta ENLARGED.HEIGHT
 19924 996F A9 00			lda #$00
 19925 9971 8D BE 9C			sta ENLARGED.HEIGHT+1
 19926
 19927 				; optimize OK (btm.inc), line = 49
 19928
 19929 9974 A9 6A			lda #$6A
 19930 9976 8D 0F 9D			sta SHOOTS.OFS
 19931 9979 A9 9F			lda #$9F
 19932 997B 8D 10 9D			sta SHOOTS.OFS+1
 19933 997E A9 03			lda #$03
 19934 9980 8D 11 9D			sta SHOOTS.OFS+2
 19935 9983 A9 00			lda #$00
 19936 9985 8D 12 9D			sta SHOOTS.OFS+3
 19937
 19938 				; optimize OK (btm.inc), line = 50
 19939
 19940 9988 A9 0D			lda #$0D
 19941 998A 8D 0B 9D			sta SHOOTS.WIDTH
 19942 998D A9 00			lda #$00
 19943 998F 8D 0C 9D			sta SHOOTS.WIDTH+1
 19944
 19945 				; optimize OK (btm.inc), line = 51
 19946
 19947 9992 A9 08			lda #$08
 19948 9994 8D 0D 9D			sta SHOOTS.HEIGHT
 19949 9997 A9 00			lda #$00
 19950 9999 8D 0E 9D			sta SHOOTS.HEIGHT+1
 19951
 19952 				; optimize OK (btm.inc), line = 53
 19953
 19954 999C A9 D2			lda #$D2
 19955 999E 8D 17 9D			sta FLUX.OFS
 19956 99A1 A9 9F			lda #$9F
 19957 99A3 8D 18 9D			sta FLUX.OFS+1
 19958 99A6 A9 03			lda #$03
 19959 99A8 8D 19 9D			sta FLUX.OFS+2
 19960 99AB A9 00			lda #$00
 19961 99AD 8D 1A 9D			sta FLUX.OFS+3
 19962
 19963 				; optimize OK (btm.inc), line = 54
 19964
 19965 99B0 A9 08			lda #$08
 19966 99B2 8D 13 9D			sta FLUX.WIDTH
 19967 99B5 A9 00			lda #$00
 19968 99B7 8D 14 9D			sta FLUX.WIDTH+1
 19969
 19970 				; optimize OK (btm.inc), line = 55
 19971
 19972 99BA A9 29			lda #$29
 19973 99BC 8D 15 9D			sta FLUX.HEIGHT
 19974 99BF A9 00			lda #$00
 19975 99C1 8D 16 9D			sta FLUX.HEIGHT+1
 19976
 19977 				; optimize OK (btm.inc), line = 57
 19978
 19979 99C4 A9 1A			lda #$1A
 19980 99C6 8D 9F 9C			sta BALLDATA.OFS
 19981 99C9 A9 A1			lda #$A1
 19982 99CB 8D A0 9C			sta BALLDATA.OFS+1
 19983 99CE A9 03			lda #$03
 19984 99D0 8D A1 9C			sta BALLDATA.OFS+2
 19985 99D3 A9 00			lda #$00
 19986 99D5 8D A2 9C			sta BALLDATA.OFS+3
 19987
 19988 				; optimize OK (btm.inc), line = 58
 19989
 19990 99D8 A9 05			lda #$05
 19991 99DA 8D 9B 9C			sta BALLDATA.WIDTH
 19992 99DD A9 00			lda #$00
 19993 99DF 8D 9C 9C			sta BALLDATA.WIDTH+1
 19994
 19995 				; optimize OK (btm.inc), line = 59
 19996
 19997 99E2 A9 05			lda #$05
 19998 99E4 8D 9D 9C			sta BALLDATA.HEIGHT
 19999 99E7 A9 00			lda #$00
 20000 99E9 8D 9E 9C			sta BALLDATA.HEIGHT+1
 20001
 20002 				; optimize OK (btm.inc), line = 61
 20003
 20004 99EC A9 33			lda #$33
 20005 99EE 8D 2C 9D			sta PATTERN.OFS
 20006 99F1 A9 A1			lda #$A1
 20007 99F3 8D 2D 9D			sta PATTERN.OFS+1
 20008 99F6 A9 03			lda #$03
 20009 99F8 8D 2E 9D			sta PATTERN.OFS+2
 20010 99FB A9 00			lda #$00
 20011 99FD 8D 2F 9D			sta PATTERN.OFS+3
 20012
 20013 				; optimize OK (btm.inc), line = 62
 20014
 20015 9A00 A9 1A			lda #$1A
 20016 9A02 8D 28 9D			sta PATTERN.WIDTH
 20017 9A05 A9 00			lda #$00
 20018 9A07 8D 29 9D			sta PATTERN.WIDTH+1
 20019
 20020 				; optimize OK (btm.inc), line = 63
 20021
 20022 9A0A A9 18			lda #$18
 20023 9A0C 8D 2A 9D			sta PATTERN.HEIGHT
 20024 9A0F A9 00			lda #$00
 20025 9A11 8D 2B 9D			sta PATTERN.HEIGHT+1
 20026
 20027 				; optimize OK (btm.inc), line = 65
 20028
 20029 9A14 A9 A3			lda #$A3
 20030 9A16 8D 34 9D			sta PATTERN0.OFS
 20031 9A19 8D 35 9D			sta PATTERN0.OFS+1
 20032 9A1C A9 03			lda #$03
 20033 9A1E 8D 36 9D			sta PATTERN0.OFS+2
 20034 9A21 A9 00			lda #$00
 20035 9A23 8D 37 9D			sta PATTERN0.OFS+3
 20036
 20037 				; optimize OK (btm.inc), line = 66
 20038
 20039 9A26 A9 1A			lda #$1A
 20040 9A28 8D 30 9D			sta PATTERN0.WIDTH
 20041 9A2B A9 00			lda #$00
 20042 9A2D 8D 31 9D			sta PATTERN0.WIDTH+1
 20043
 20044 				; optimize OK (btm.inc), line = 67
 20045
 20046 9A30 A9 18			lda #$18
 20047 9A32 8D 32 9D			sta PATTERN0.HEIGHT
 20048 9A35 A9 00			lda #$00
 20049 9A37 8D 33 9D			sta PATTERN0.HEIGHT+1
 20050
 20051 				; optimize OK (btm.inc), line = 69
 20052
 20053 9A3A A9 13			lda #$13
 20054 9A3C 8D 3C 9D			sta PATTERN1.OFS
 20055 9A3F A9 A6			lda #$A6
 20056 9A41 8D 3D 9D			sta PATTERN1.OFS+1
 20057 9A44 A9 03			lda #$03
 20058 9A46 8D 3E 9D			sta PATTERN1.OFS+2
 20059 9A49 A9 00			lda #$00
 20060 9A4B 8D 3F 9D			sta PATTERN1.OFS+3
 20061
 20062 				; optimize OK (btm.inc), line = 70
 20063
 20064 9A4E A9 0E			lda #$0E
 20065 9A50 8D 38 9D			sta PATTERN1.WIDTH
 20066 9A53 A9 00			lda #$00
 20067 9A55 8D 39 9D			sta PATTERN1.WIDTH+1
 20068
 20069 				; optimize OK (btm.inc), line = 71
 20070
 20071 9A58 A9 0E			lda #$0E
 20072 9A5A 8D 3A 9D			sta PATTERN1.HEIGHT
 20073 9A5D A9 00			lda #$00
 20074 9A5F 8D 3B 9D			sta PATTERN1.HEIGHT+1
 20075
 20076 				; optimize OK (btm.inc), line = 73
 20077
 20078 9A62 A9 D7			lda #$D7
 20079 9A64 8D 44 9D			sta PATTERN2.OFS
 20080 9A67 A9 A6			lda #$A6
 20081 9A69 8D 45 9D			sta PATTERN2.OFS+1
 20082 9A6C A9 03			lda #$03
 20083 9A6E 8D 46 9D			sta PATTERN2.OFS+2
 20084 9A71 A9 00			lda #$00
 20085 9A73 8D 47 9D			sta PATTERN2.OFS+3
 20086
 20087 				; optimize OK (btm.inc), line = 74
 20088
 20089 9A76 A9 26			lda #$26
 20090 9A78 8D 40 9D			sta PATTERN2.WIDTH
 20091 9A7B A9 00			lda #$00
 20092 9A7D 8D 41 9D			sta PATTERN2.WIDTH+1
 20093
 20094 				; optimize OK (btm.inc), line = 75
 20095
 20096 9A80 A9 23			lda #$23
 20097 9A82 8D 42 9D			sta PATTERN2.HEIGHT
 20098 9A85 A9 00			lda #$00
 20099 9A87 8D 43 9D			sta PATTERN2.HEIGHT+1
 20100
 20101 				; optimize OK (btm.inc), line = 77
 20102
 20103 9A8A A9 09			lda #$09
 20104 9A8C 8D 4C 9D			sta PATTERN3.OFS
 20105 9A8F A9 AC			lda #$AC
 20106 9A91 8D 4D 9D			sta PATTERN3.OFS+1
 20107 9A94 A9 03			lda #$03
 20108 9A96 8D 4E 9D			sta PATTERN3.OFS+2
 20109 9A99 A9 00			lda #$00
 20110 9A9B 8D 4F 9D			sta PATTERN3.OFS+3
 20111
 20112 				; optimize OK (btm.inc), line = 78
 20113
 20114 9A9E A9 1C			lda #$1C
 20115 9AA0 8D 48 9D			sta PATTERN3.WIDTH
 20116 9AA3 A9 00			lda #$00
 20117 9AA5 8D 49 9D			sta PATTERN3.WIDTH+1
 20118
 20119 				; optimize OK (btm.inc), line = 79
 20120
 20121 9AA8 A9 1D			lda #$1D
 20122 9AAA 8D 4A 9D			sta PATTERN3.HEIGHT
 20123 9AAD A9 00			lda #$00
 20124 9AAF 8D 4B 9D			sta PATTERN3.HEIGHT+1
 20125
 20126 				; optimize OK (btm.inc), line = 81
 20127
 20128 9AB2 A9 35			lda #$35
 20129 9AB4 8D 54 9D			sta PATTERN4.OFS
 20130 9AB7 A9 AF			lda #$AF
 20131 9AB9 8D 55 9D			sta PATTERN4.OFS+1
 20132 9ABC A9 03			lda #$03
 20133 9ABE 8D 56 9D			sta PATTERN4.OFS+2
 20134 9AC1 A9 00			lda #$00
 20135 9AC3 8D 57 9D			sta PATTERN4.OFS+3
 20136
 20137 				; optimize OK (btm.inc), line = 82
 20138
 20139 9AC6 A9 1E			lda #$1E
 20140 9AC8 8D 50 9D			sta PATTERN4.WIDTH
 20141 9ACB A9 00			lda #$00
 20142 9ACD 8D 51 9D			sta PATTERN4.WIDTH+1
 20143
 20144 				; optimize OK (btm.inc), line = 83
 20145
 20146 9AD0 A9 1E			lda #$1E
 20147 9AD2 8D 52 9D			sta PATTERN4.HEIGHT
 20148 9AD5 A9 00			lda #$00
 20149 9AD7 8D 53 9D			sta PATTERN4.HEIGHT+1
 20150
 20151 				; optimize OK (arkanoid_vbxe.pas), line = 174
 20152
 20153 9ADA A9 01			lda #$01
 20154 9ADC 8D 7E 9C			sta MOUS.FIRE
 20155
 20156 				; optimize OK (arkanoid_vbxe.pas), line = 176
 20157
 20158 9ADF A9 20			lda #$20
 20159 9AE1 8D 5B 9D			sta TOTALWALL
 20160
 20161 				; optimize OK (arkanoid_vbxe.pas), line = 178
 20162
 20163 9AE4 A9 50			lda #$50
 20164 9AE6 8D 6E 9D			sta SCORE.HISCORE
 20165 9AE9 A9 C3			lda #$C3
 20166 9AEB 8D 6F 9D			sta SCORE.HISCORE+1
 20167 9AEE A9 00			lda #$00
 20168 9AF0 8D 70 9D			sta SCORE.HISCORE+2
 20169 9AF3 8D 71 9D			sta SCORE.HISCORE+3
 20170
 20171 				; optimize OK (arkanoid_vbxe.pas), line = 181
 20172
 20173 9AF6 A9 01			lda #$01
 20174 9AF8 8D 99 9D			sta SOUND_ON
 20175
 20176 				; optimize OK (arkanoid_vbxe.pas), line = 182
 20177
 20178 9AFB A9 03			lda #$03
 20179 9AFD 8D 7D 9D			sta LV
 20180 9B00 A9 00			lda #$00
 20181 9B02 8D 7E 9D			sta LV+1
 20182
 20183 				; --- RepeatUntilProlog
 20184 9B05			l_3A93
 20185
 20186 				; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 186
 20187
 20188 9B05 20 6C 2A			jsr MOUSERESET
 20189
 20190 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 189
 20191
 20192 9B08 20 59 94			jsr MAINSCREEN
 20193 9B0B AD 47 A3			lda MAINSCREEN.RESULT
 20194 9B0E 8D 72 9D			sta SCORE.PL_NUMB
 20195
 20196 				; optimize OK (arkanoid_vbxe.pas), line = 191
 20197
 20198 9B11 F0 0D			jeq l_3AAA
 20199 9B13 A9 01			lda #$01
 20200 9B15 8D 53 A3			sta START_GAME.PLAYERS
 20201 9B18 A9 00			lda #$00
 20202 9B1A 8D 54 A3			sta START_GAME.PLAYERS+1
 20203 9B1D 20 B7 94			jsr START_GAME
 20204 9B20			l_3AAA
 20205
 20206 				; optimize OK (arkanoid_vbxe.pas), line = 193
 20207
 20208 9B20 AD 72 9D			lda SCORE.PL_NUMB
 20209 9B23 C9 01			cmp #$01
 20210 9B25 B0 DE			jcs l_3A93
 20211
 20212 9B27			@exit
 20213 					.ifdef @new
 20214 					lda <@VarData
 20215 					sta :ztmp
 20216 					lda >@VarData
 20217 					ldy #@VarDataSize-1
 20218 					jmp @FreeMem
 20219 					els
 20220 9B27 60				rts						; ret
 20221 					eif
 20222 				.endl
 20223 9B28			l_0022
 20224
 20225 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 201
 20226
 20227 9B28 20 92 97			jsr INIT_GAME
 20228
 20229 				; ------------------------------------------------------------
 20230
 20231 = 5000			VBXE_OVRADR	= $5000
 20232 = 014A00			VBXE_DATA	= $14A00
 20233 = DC00			LEVELS_WALL	= $DC00
 20234 = 9C7A			adr.MOUS	= DATAORIGIN+$00DE	; [5] RECORD
 20235 9B2B			.var MOUS	= adr.MOUS .word
 20236 = 9C7A			MOUS.X	= DATAORIGIN+$00DE
 20237 = 9C7C			MOUS.Y	= DATAORIGIN+$00E0
 20238 = 9C7E			MOUS.FIRE	= DATAORIGIN+$00E2
 20239 = B100			adr.BLT	= $B100
 20240 9B2B			.var BLT	= adr.BLT .word
 20241 = B100			adr.BLT.SRC_ADR	= $B100
 20242 9B2B			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 20243 = B100			BLT.SRC_ADR.BYTE0	= $B100
 20244 = B101			BLT.SRC_ADR.BYTE1	= $B101
 20245 = B102			BLT.SRC_ADR.BYTE2	= $B102
 20246 = B103			BLT.SRC_STEP_Y	= $B103
 20247 = B105			BLT.SRC_STEP_X	= $B105
 20248 = B106			adr.BLT.DST_ADR	= $B106
 20249 9B2B			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 20250 = B106			BLT.DST_ADR.BYTE0	= $B106
 20251 = B107			BLT.DST_ADR.BYTE1	= $B107
 20252 = B108			BLT.DST_ADR.BYTE2	= $B108
 20253 = B109			BLT.DST_STEP_Y	= $B109
 20254 = B10B			BLT.DST_STEP_X	= $B10B
 20255 = B10C			BLT.BLT_WIDTH	= $B10C
 20256 = B10E			BLT.BLT_HEIGHT	= $B10E
 20257 = B10F			BLT.BLT_AND_MASK	= $B10F
 20258 = B110			BLT.BLT_XOR_MASK	= $B110
 20259 = B111			BLT.BLT_COLLISION_MASK	= $B111
 20260 = B112			BLT.BLT_ZOOM	= $B112
 20261 = B113			BLT.PATTERN_FEATURE	= $B113
 20262 = B114			BLT.BLT_CONTROL	= $B114
 20263 = 9C7F			adr.VBXE_RAM	= DATAORIGIN+$00E3	; [8] OBJECT
 20264 9B2B			.var VBXE_RAM	= adr.VBXE_RAM .word
 20265 = 9C7F			VBXE_RAM.POSITION	= DATAORIGIN+$00E3
 20266 = 9C83			VBXE_RAM.SIZE	= DATAORIGIN+$00E7
 20267 = 5000			VRAM	= $5000
 20268 = 0001			ERR1	= $01
 20269 = 0002			ERR2	= $02
 20270 = 0003			ERR3	= $03
 20271 = 0004			ERR4	= $04
 20272 = 000A			SCRMIN	= $0A
 20273 = 00D8			SCRMAX	= $D8
 20274 = 000C			SCRTOP	= $0C
 20275 = 00C8			SCRBOT	= $C8
 20276 = 0022			VAUS_W	= $22
 20277 = 0004			VAUS_H	= $04
 20278 = 00B8			VAUS_LINE	= $B8
 20279 = 00FF			EMP	= $FF
 20280 = 0005			BALLDIM	= $05
 20281 = 0003			BALLSPOT	= $03
 20282 = 001E			BALLDEV	= $1E
 20283 = 000A			SPEEDFLASH	= $0A
 20284 = 105E			adr.FLASH	= CODEORIGIN+$005E
 20285 9B2B			.var FLASH	= adr.FLASH .word
 20286 = 1069			adr.SCORE_WALL	= CODEORIGIN+$0069
 20287 9B2B			.var SCORE_WALL	= adr.SCORE_WALL .word
 20288 = 107F			adr.EMERG_DEV	= CODEORIGIN+$007F
 20289 9B2B			.var EMERG_DEV	= adr.EMERG_DEV .word
 20290 = 1088			adr.COLORBLOCK	= CODEORIGIN+$0088
 20291 9B2B			.var COLORBLOCK	= adr.COLORBLOCK .word
 20292 = 0001			GRAYDOWN	= $01
 20293 = 0001			STARTWALL	= $01
 20294 = 01F4			BALLSPEED	= $01F4
 20295 = 07D0			MAXSPEED	= $07D0
 20296 = 0064			MAXBRWHIT	= $64
 20297 = 0004			PATNUMBER	= $04
 20298 = 1092			adr.POS_DIGIT	= CODEORIGIN+$0092
 20299 9B2B			.var POS_DIGIT	= adr.POS_DIGIT .word
 20300 = 1096			adr.DIGITS	= CODEORIGIN+$0096
 20301 9B2B			.var DIGITS	= adr.DIGITS .word
 20302 = 10A1			adr.LEVEL	= CODEORIGIN+$00A1
 20303 9B2B			.var LEVEL	= adr.LEVEL .word
 20304 = 0258			SBDIR	= $0258
 20305 = 0003			DEFLEVEL	= $03
 20306 = 012C			LETTER_PROB	= $012C
 20307 = 03E8			LETTER_DROP	= $03E8
 20308 = 0008			LETTER_NUMB	= $08
 20309 = 0008			LETTER_FRM	= $08
 20310 = 0005			LETTER_SBF	= $05
 20311 = 10AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 20312 9B2B			.var LETTER_DIS	= adr.LETTER_DIS .word
 20313 = 00B0			FLUXLEVEL	= $B0
 20314 = 9C9B			adr.BALLDATA	= DATAORIGIN+$00FF	; [8] RECORD
 20315 9B2B			.var BALLDATA	= adr.BALLDATA .word
 20316 = 9C9B			BALLDATA.WIDTH	= DATAORIGIN+$00FF
 20317 = 9C9D			BALLDATA.HEIGHT	= DATAORIGIN+$0101
 20318 = 9C9F			BALLDATA.OFS	= DATAORIGIN+$0103
 20319 = 9CA3			adr.PLAYSCREEN	= DATAORIGIN+$0107	; [8] RECORD
 20320 9B2B			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 20321 = 9CA3			PLAYSCREEN.WIDTH	= DATAORIGIN+$0107
 20322 = 9CA5			PLAYSCREEN.HEIGHT	= DATAORIGIN+$0109
 20323 = 9CA7			PLAYSCREEN.OFS	= DATAORIGIN+$010B
 20324 = 9CAB			adr.PLAYVAUS	= DATAORIGIN+$010F	; [8] RECORD
 20325 9B2B			.var PLAYVAUS	= adr.PLAYVAUS .word
 20326 = 9CAB			PLAYVAUS.WIDTH	= DATAORIGIN+$010F
 20327 = 9CAD			PLAYVAUS.HEIGHT	= DATAORIGIN+$0111
 20328 = 9CAF			PLAYVAUS.OFS	= DATAORIGIN+$0113
 20329 = 9CB3			adr.NORMAL	= DATAORIGIN+$0117	; [8] RECORD
 20330 9B2B			.var NORMAL	= adr.NORMAL .word
 20331 = 9CB3			NORMAL.WIDTH	= DATAORIGIN+$0117
 20332 = 9CB5			NORMAL.HEIGHT	= DATAORIGIN+$0119
 20333 = 9CB7			NORMAL.OFS	= DATAORIGIN+$011B
 20334 = 9CBB			adr.ENLARGED	= DATAORIGIN+$011F	; [8] RECORD
 20335 9B2B			.var ENLARGED	= adr.ENLARGED .word
 20336 = 9CBB			ENLARGED.WIDTH	= DATAORIGIN+$011F
 20337 = 9CBD			ENLARGED.HEIGHT	= DATAORIGIN+$0121
 20338 = 9CBF			ENLARGED.OFS	= DATAORIGIN+$0123
 20339 = 9CC3			adr.LASERS	= DATAORIGIN+$0127	; [8] RECORD
 20340 9B2B			.var LASERS	= adr.LASERS .word
 20341 = 9CC3			LASERS.WIDTH	= DATAORIGIN+$0127
 20342 = 9CC5			LASERS.HEIGHT	= DATAORIGIN+$0129
 20343 = 9CC7			LASERS.OFS	= DATAORIGIN+$012B
 20344 = 9CCB			adr.EXPLOSION	= DATAORIGIN+$012F	; [8] RECORD
 20345 9B2B			.var EXPLOSION	= adr.EXPLOSION .word
 20346 = 9CCB			EXPLOSION.WIDTH	= DATAORIGIN+$012F
 20347 = 9CCD			EXPLOSION.HEIGHT	= DATAORIGIN+$0131
 20348 = 9CCF			EXPLOSION.OFS	= DATAORIGIN+$0133
 20349 = 9CD3			adr.NEWVAUS	= DATAORIGIN+$0137	; [8] RECORD
 20350 9B2B			.var NEWVAUS	= adr.NEWVAUS .word
 20351 = 9CD3			NEWVAUS.WIDTH	= DATAORIGIN+$0137
 20352 = 9CD5			NEWVAUS.HEIGHT	= DATAORIGIN+$0139
 20353 = 9CD7			NEWVAUS.OFS	= DATAORIGIN+$013B
 20354 = 9CDB			adr.PRESENTS	= DATAORIGIN+$013F	; [8] RECORD
 20355 9B2B			.var PRESENTS	= adr.PRESENTS .word
 20356 = 9CDB			PRESENTS.WIDTH	= DATAORIGIN+$013F
 20357 = 9CDD			PRESENTS.HEIGHT	= DATAORIGIN+$0141
 20358 = 9CDF			PRESENTS.OFS	= DATAORIGIN+$0143
 20359 = 9CE3			adr.SOUNDFX	= DATAORIGIN+$0147	; [8] RECORD
 20360 9B2B			.var SOUNDFX	= adr.SOUNDFX .word
 20361 = 9CE3			SOUNDFX.WIDTH	= DATAORIGIN+$0147
 20362 = 9CE5			SOUNDFX.HEIGHT	= DATAORIGIN+$0149
 20363 = 9CE7			SOUNDFX.OFS	= DATAORIGIN+$014B
 20364 = 9CEB			adr.SHINEWALL	= DATAORIGIN+$014F	; [8] RECORD
 20365 9B2B			.var SHINEWALL	= adr.SHINEWALL .word
 20366 = 9CEB			SHINEWALL.WIDTH	= DATAORIGIN+$014F
 20367 = 9CED			SHINEWALL.HEIGHT	= DATAORIGIN+$0151
 20368 = 9CEF			SHINEWALL.OFS	= DATAORIGIN+$0153
 20369 = 9CF3			adr.MINIVAUS	= DATAORIGIN+$0157	; [8] RECORD
 20370 9B2B			.var MINIVAUS	= adr.MINIVAUS .word
 20371 = 9CF3			MINIVAUS.WIDTH	= DATAORIGIN+$0157
 20372 = 9CF5			MINIVAUS.HEIGHT	= DATAORIGIN+$0159
 20373 = 9CF7			MINIVAUS.OFS	= DATAORIGIN+$015B
 20374 = 9CFB			adr.LEVELSEL	= DATAORIGIN+$015F	; [8] RECORD
 20375 9B2B			.var LEVELSEL	= adr.LEVELSEL .word
 20376 = 9CFB			LEVELSEL.WIDTH	= DATAORIGIN+$015F
 20377 = 9CFD			LEVELSEL.HEIGHT	= DATAORIGIN+$0161
 20378 = 9CFF			LEVELSEL.OFS	= DATAORIGIN+$0163
 20379 = 9D03			adr.LETTERS	= DATAORIGIN+$0167	; [8] RECORD
 20380 9B2B			.var LETTERS	= adr.LETTERS .word
 20381 = 9D03			LETTERS.WIDTH	= DATAORIGIN+$0167
 20382 = 9D05			LETTERS.HEIGHT	= DATAORIGIN+$0169
 20383 = 9D07			LETTERS.OFS	= DATAORIGIN+$016B
 20384 = 9D0B			adr.SHOOTS	= DATAORIGIN+$016F	; [8] RECORD
 20385 9B2B			.var SHOOTS	= adr.SHOOTS .word
 20386 = 9D0B			SHOOTS.WIDTH	= DATAORIGIN+$016F
 20387 = 9D0D			SHOOTS.HEIGHT	= DATAORIGIN+$0171
 20388 = 9D0F			SHOOTS.OFS	= DATAORIGIN+$0173
 20389 = 9D13			adr.FLUX	= DATAORIGIN+$0177	; [8] RECORD
 20390 9B2B			.var FLUX	= adr.FLUX .word
 20391 = 9D13			FLUX.WIDTH	= DATAORIGIN+$0177
 20392 = 9D15			FLUX.HEIGHT	= DATAORIGIN+$0179
 20393 = 9D17			FLUX.OFS	= DATAORIGIN+$017B
 20394 = 9D1B			adr.VAUS	= DATAORIGIN+$017F	; [13] RECORD
 20395 9B2B			.var VAUS	= adr.VAUS .word
 20396 = 9D1B			VAUS.X	= DATAORIGIN+$017F
 20397 = 9D1C			VAUS.Y	= DATAORIGIN+$0180
 20398 = 9D1D			VAUS.OLDX	= DATAORIGIN+$0181
 20399 = 9D1F			VAUS.OLDY	= DATAORIGIN+$0183
 20400 = 9D21			VAUS.OLDLEN	= DATAORIGIN+$0185
 20401 = 9D23			VAUS.WIDTH	= DATAORIGIN+$0187
 20402 = 9D24			VAUS.HEIGHT	= DATAORIGIN+$0188
 20403 = 9D25			VAUS.FLASH	= DATAORIGIN+$0189
 20404 = 9D26			VAUS.IFLASH	= DATAORIGIN+$018A
 20405 = 9D27			VAUS.LETTER	= DATAORIGIN+$018B
 20406 = 9D28			adr.PATTERN	= DATAORIGIN+$018C	; [8] RECORD
 20407 9B2B			.var PATTERN	= adr.PATTERN .word
 20408 = 9D28			PATTERN.WIDTH	= DATAORIGIN+$018C
 20409 = 9D2A			PATTERN.HEIGHT	= DATAORIGIN+$018E
 20410 = 9D2C			PATTERN.OFS	= DATAORIGIN+$0190
 20411 = 9D30			adr.PATTERN0	= DATAORIGIN+$0194	; [8] RECORD
 20412 9B2B			.var PATTERN0	= adr.PATTERN0 .word
 20413 = 9D30			PATTERN0.WIDTH	= DATAORIGIN+$0194
 20414 = 9D32			PATTERN0.HEIGHT	= DATAORIGIN+$0196
 20415 = 9D34			PATTERN0.OFS	= DATAORIGIN+$0198
 20416 = 9D38			adr.PATTERN1	= DATAORIGIN+$019C	; [8] RECORD
 20417 9B2B			.var PATTERN1	= adr.PATTERN1 .word
 20418 = 9D38			PATTERN1.WIDTH	= DATAORIGIN+$019C
 20419 = 9D3A			PATTERN1.HEIGHT	= DATAORIGIN+$019E
 20420 = 9D3C			PATTERN1.OFS	= DATAORIGIN+$01A0
 20421 = 9D40			adr.PATTERN2	= DATAORIGIN+$01A4	; [8] RECORD
 20422 9B2B			.var PATTERN2	= adr.PATTERN2 .word
 20423 = 9D40			PATTERN2.WIDTH	= DATAORIGIN+$01A4
 20424 = 9D42			PATTERN2.HEIGHT	= DATAORIGIN+$01A6
 20425 = 9D44			PATTERN2.OFS	= DATAORIGIN+$01A8
 20426 = 9D48			adr.PATTERN3	= DATAORIGIN+$01AC	; [8] RECORD
 20427 9B2B			.var PATTERN3	= adr.PATTERN3 .word
 20428 = 9D48			PATTERN3.WIDTH	= DATAORIGIN+$01AC
 20429 = 9D4A			PATTERN3.HEIGHT	= DATAORIGIN+$01AE
 20430 = 9D4C			PATTERN3.OFS	= DATAORIGIN+$01B0
 20431 = 9D50			adr.PATTERN4	= DATAORIGIN+$01B4	; [8] RECORD
 20432 9B2B			.var PATTERN4	= adr.PATTERN4 .word
 20433 = 9D50			PATTERN4.WIDTH	= DATAORIGIN+$01B4
 20434 = 9D52			PATTERN4.HEIGHT	= DATAORIGIN+$01B6
 20435 = 9D54			PATTERN4.OFS	= DATAORIGIN+$01B8
 20436 = 9D58			STATUS	= DATAORIGIN+$01BC
 20437 = 9D59			SUCCESS	= DATAORIGIN+$01BD
 20438 = 9D5A			REMAIN_BLK	= DATAORIGIN+$01BE
 20439 = 9D5B			TOTALWALL	= DATAORIGIN+$01BF
 20440 = 9D5C			adr.SCORE	= DATAORIGIN+$01C0	; [27] RECORD
 20441 9B2B			.var SCORE	= adr.SCORE .word
 20442 = 9D5C			adr.SCORE.PLAYER	= [DATAORIGIN+$01C0] .array [3] .dword
 20443 9B2B			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 20444 = 9D68			adr.SCORE.WALL_N	= [DATAORIGIN+$01CC] .array [3]
 20445 9B2B			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 20446 = 9D6B			adr.SCORE.LIVES	= [DATAORIGIN+$01CF] .array [3]
 20447 9B2B			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 20448 = 9D6E			SCORE.HISCORE	= DATAORIGIN+$01D2
 20449 = 9D72			SCORE.PL_NUMB	= DATAORIGIN+$01D6
 20450 = 9D73			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01D7] .array [3]
 20451 9B2B			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 20452 = 9D76			SCORE.ABORTPLAY	= DATAORIGIN+$01DA
 20453 = 9D77			CUR_PLAYER	= DATAORIGIN+$01DB
 20454 = 9D78			adr.SHINEREC	= DATAORIGIN+$01DC	; [5] RECORD
 20455 9B2B			.var SHINEREC	= adr.SHINEREC .word
 20456 = 9D78			SHINEREC.XB	= DATAORIGIN+$01DC
 20457 = 9D79			SHINEREC.YB	= DATAORIGIN+$01DD
 20458 = 9D7A			SHINEREC.FRAME	= DATAORIGIN+$01DE
 20459 = 9D7B			SHINEREC.BLOCK	= DATAORIGIN+$01DF
 20460 = 9D7C			SHINEREC.ACTIVE	= DATAORIGIN+$01E0
 20461 = 9D7D			LV	= DATAORIGIN+$01E1
 20462 = 9D7F			TRAINER	= DATAORIGIN+$01E3
 20463 = 9D80			adr.LETT	= DATAORIGIN+$01E4	; [17] RECORD
 20464 9B2B			.var LETT	= adr.LETT .word
 20465 = 9D80			LETT.X	= DATAORIGIN+$01E4
 20466 = 9D81			LETT.Y	= DATAORIGIN+$01E5
 20467 = 9D82			LETT.TYP	= DATAORIGIN+$01E6
 20468 = 9D84			LETT.FRAME	= DATAORIGIN+$01E8
 20469 = 9D85			LETT.SUBFRAME	= DATAORIGIN+$01E9
 20470 = 9D86			LETT.ACTIVE	= DATAORIGIN+$01EA
 20471 = 9D87			LETT.INCOMING	= DATAORIGIN+$01EB
 20472 = 9D89			LETT.NEXTX	= DATAORIGIN+$01ED
 20473 = 9D8B			LETT.NEXTY	= DATAORIGIN+$01EF
 20474 = 9D8D			LETT.NEXTTYPE	= DATAORIGIN+$01F1
 20475 = 9D8F			LETT.LAST	= DATAORIGIN+$01F3
 20476 = 9D91			adr.FIRE	= DATAORIGIN+$01F5	; [5] RECORD
 20477 9B2B			.var FIRE	= adr.FIRE .word
 20478 = 9D91			FIRE.X	= DATAORIGIN+$01F5
 20479 = 9D92			FIRE.Y	= DATAORIGIN+$01F6
 20480 = 9D93			FIRE.SHOT	= DATAORIGIN+$01F7
 20481 = 9D94			FIRE.AVL	= DATAORIGIN+$01F8
 20482 = 9D95			FIRE.NW	= DATAORIGIN+$01F9
 20483 = 9D96			BALLS_IN_PLAY	= DATAORIGIN+$01FA
 20484 = 9D97			SCRFLUX	= DATAORIGIN+$01FB
 20485 = 9D98			SCRFLUXCNT	= DATAORIGIN+$01FC
 20486 = 9D99			SOUND_ON	= DATAORIGIN+$01FD
 20487 = 9D9A			adr.DEF_PAL	= [DATAORIGIN+$01FE] .array [768]
 20488 9B2B			.var DEF_PAL	= adr.DEF_PAL .word
 20489 = C000			adr.ROW	= $C000
 20490 9B2B			.var ROW	= adr.ROW .word
 20491 = C200			adr.TMP	= $C200
 20492 9B2B			.var TMP	= adr.TMP .word
 20493 = C300			adr.MODY	= $C300
 20494 9B2B			.var MODY	= adr.MODY .word
 20495 = C400			adr.MODX	= $C400
 20496 9B2B			.var MODX	= adr.MODX .word
 20497 = D800			adr.WALL_P	= $D800
 20498 9B2B			.var WALL_P	= adr.WALL_P .word
 20499 = DB00			adr.WALL	= $DB00
 20500 9B2B			.var WALL	= adr.WALL .word
 20501 = DC00			adr.ALL_WALLS	= $DC00
 20502 9B2B			.var ALL_WALLS	= adr.ALL_WALLS .word
 20503 9B2B			@exit
 20504
 20505 9B2B A2 00		@halt	ldx #$00
 20506 9B2D 9A				txs
 20507
 20508 					.ifdef MAIN.@DEFINES.ROMOFF
 20509 9B2E EE 01 D3			inc portb
 20510 					.fi
 20511
 20512 9B31 A0 01			ldy #$01
 20513
 20514 9B33 60				rts
 20515
 20516 				; ------------------------------------------------------------
 20517
 20518 9B34			.local	@DEFINES
 20519 9B34			ATARI
 20520 9B34			CPU_6502
 20521 9B34			ROMOFF
 20522 				.endl
 20523
 20524 9B34			.local	@RESOURCE
 20525 				.endl
 20526
 20527 = 9B34 7A 9C		MOUS
 20527 = 9B36 00 B1		BLT
 20527 = 9B38 00 B1		BLT.SRC_ADR
 20527 = 9B3A 06 B1		BLT.DST_ADR
 20527 = 9B3C 7F 9C		VBXE_RAM
 20527 = 9B3E 5E 10		FLASH
 20527 = 9B40 69 10		SCORE_WALL
 20527 = 9B42 7F 10		EMERG_DEV
 20527 = 9B44 88 10		COLORBLOCK
 20527 = 9B46 92 10		POS_DIGIT
 20527 = 9B48 96 10		DIGITS
 20527 = 9B4A A1 10		LEVEL
 20527 = 9B4C AD 10		LETTER_DIS
 20527 = 9B4E 9B 9C		BALLDATA
 20527 = 9B50 A3 9C		PLAYSCREEN
 20527 = 9B52 AB 9C		PLAYVAUS
 20527 = 9B54 B3 9C		NORMAL
 20527 = 9B56 BB 9C		ENLARGED
 20527 = 9B58 C3 9C		LASERS
 20527 = 9B5A CB 9C		EXPLOSION
 20527 = 9B5C D3 9C		NEWVAUS
 20527 = 9B5E DB 9C		PRESENTS
 20527 = 9B60 E3 9C		SOUNDFX
 20527 = 9B62 EB 9C		SHINEWALL
 20527 = 9B64 F3 9C		MINIVAUS
 20527 = 9B66 FB 9C		LEVELSEL
 20527 = 9B68 03 9D		LETTERS
 20527 = 9B6A 0B 9D		SHOOTS
 20527 = 9B6C 13 9D		FLUX
 20527 = 9B6E 1B 9D		VAUS
 20527 = 9B70 28 9D		PATTERN
 20527 = 9B72 30 9D		PATTERN0
 20527 = 9B74 38 9D		PATTERN1
 20527 = 9B76 40 9D		PATTERN2
 20527 = 9B78 48 9D		PATTERN3
 20527 = 9B7A 50 9D		PATTERN4
 20527 = 9B7C 5C 9D		SCORE
 20527 = 9B7E 5C 9D		SCORE.PLAYER
 20527 = 9B80 68 9D		SCORE.WALL_N
 20527 = 9B82 6B 9D		SCORE.LIVES
 20527 = 9B84 73 9D		SCORE.ROUNDSEL
 20527 = 9B86 78 9D		SHINEREC
 20527 = 9B88 80 9D		LETT
 20527 = 9B8A 91 9D		FIRE
 20527 = 9B8C 9A 9D		DEF_PAL
 20527 = 9B8E 00 C0		ROW
 20527 = 9B90 00 C2		TMP
 20527 = 9B92 00 C3		MODY
 20527 = 9B94 00 C4		MODX
 20527 = 9B96 00 D8		WALL_P
 20527 = 9B98 00 DB		WALL
 20527 = 9B9A 00 DC		ALL_WALLS
 20527 				.endl							; MAIN
 20528
 20529 				; ------------------------------------------------------------
 20530 				; ------------------------------------------------------------
 20531
 20532 				.macro	UNITINITIALIZATION
 20533 				
 20534 					.ifdef MAIN.SYSTEM.@UnitInit
 20535 					jsr MAIN.SYSTEM.@UnitInit
 20536 					.fi
 20537 				
 20538 					.ifdef MAIN.ATARI.@UnitInit
 20539 					jsr MAIN.ATARI.@UnitInit
 20540 					.fi
 20541 				
 20542 					.ifdef MAIN.CRT.@UnitInit
 20543 					jsr MAIN.CRT.@UnitInit
 20544 					.fi
 20545 				
 20546 					.ifdef MAIN.TYPES.@UnitInit
 20547 					jsr MAIN.TYPES.@UnitInit
 20548 					.fi
 20549 				
 20550 					.ifdef MAIN.GRAPH.@UnitInit
 20551 					jsr MAIN.GRAPH.@UnitInit
 20552 					.fi
 20553 				
 20554 					.ifdef MAIN.VBXE.@UnitInit
 20555 					jsr MAIN.VBXE.@UnitInit
 20556 					.fi
 20557 				.endm
 20558
 20559 				; ------------------------------------------------------------
 20560
 20561 					ift .SIZEOF(MAIN.SYSTEM) > 0
 20562 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 20562 				SYSTEM: $1C94..$25CE
 20563 					eif
 20564
 20565 					ift .SIZEOF(MAIN.ATARI) > 0
 20566 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 20567 					eif
 20568
 20569 					ift .SIZEOF(MAIN.CRT) > 0
 20570 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 20571 					eif
 20572
 20573 					ift .SIZEOF(MAIN.TYPES) > 0
 20574 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 20575 					eif
 20576
 20577 					ift .SIZEOF(MAIN.GRAPH) > 0
 20578 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 20578 				GRAPH: $25CF..$25D0
 20579 					eif
 20580
 20581 					ift .SIZEOF(MAIN.VBXE) > 0
 20582 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 20582 				VBXE: $25D1..$2A68
 20583 					eif
 20584
 20585 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 20585 				CODE: $1000..$9B33
 20586
 20587 					ift .SIZEOF(MAIN.@RESOURCE)>0
 20588 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 20589 					eif
 20590
 20591 9B9C			@end
 20592
 20593 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 20593 				VARS: $9B34..$9B9B
 20594
 20595 				; ------------------------------------------------------------
 20596
 20597 = 9B9C				?adr = *
 20598 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 20599 					?adr = ?old_adr
 20600 					eif
 20601
 20602 					org ?adr
 20603 = 9B9C				?old_adr = *
 20604
 20605 9B9C			DATAORIGIN
 20606 9B9C 2D 0C 00 00 00 28 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20607 9BB4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20608 9BCC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20609 9BE4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
 20610 9BFC 00 17		.by  $00 $17
 20611
 20612 = 0062			VARINITSIZE	= *-DATAORIGIN
 20613 = 07BA			VARDATASIZE	= 1978
 20614
 20615 = A356			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 20616
 20617 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 20617 				DATA: $9B9C..$A356
 20618
 20619 					ert DATAORIGIN<@end,'DATA memory overlap'
 20620
 20621 02E0-02E1> 07 1C			run START
 20622
 20623 				; ------------------------------------------------------------
 20624
 20625 				.macro	STATICDATA
 20626 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 20627 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 20628 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 20629 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 20630 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 20631 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 20632 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 20633 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 20634 				.endm
 20635
 20636 					end
