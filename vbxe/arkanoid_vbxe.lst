mads 2.1.8
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base\ 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/27] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 1000			CODEORIGIN	= $1000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 10BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 10BB				org RESORIGIN
    10 10BB 20 87 10		mcpy	jsr sys.off
    12 10BE A9 DC 85 8A A9 10 +  MWA #DATA EDX
    12 10C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 10CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 10D6 20 2B 10		 JSR RESOURCE.MEMCPY
    14 10D9 4C AB 10			jmp sys.on
    16 10DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 10			ini mcpy
Source: arkanoid_vbxe.a65
   119 31DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 31DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 31DC				org RESORIGIN
    22 10BB			lbmp
    25 10BB-1552> 20 00 10		jsr vbxe_detect
    26 10BE 90 4B			bcc ok
    28 10C0 A0 10		 LDY> NOTVBXE
    28 10C2 A9 DF		 LDA< NOTVBXE
    28 10C4 20 6C 10		 JSR RESOURCE.@PRINT
    29 10C7 A0 10		 LDY> _EOL
    29 10C9 A9 F0		 LDA< _EOL
    29 10CB 20 6C 10		 JSR RESOURCE.@PRINT
    30 10CE A0 10		 LDY> ANYKEY
    30 10D0 A9 F1		 LDA< ANYKEY
    30 10D2 20 6C 10		 JSR RESOURCE.@PRINT
    32 10D5 AD 0F D2		keypres	lda $d20f
    33 10D8 29 04			and #4
    34 10DA D0 F9			bne keypres
    36 10DC 68				pla
    37 10DD 68				pla
    38 10DE 60				rts
    40 10DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 10F0 9B			_eol	dta $9b
    42 10F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 110B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 110B A9 B8		        lda     #%1000+$B0
     3 110D A0 5E		        ldy     #FX_MEMC
     4 110F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1111 A9 01		        lda     #1
     3 1113 A0 45		        ldy     #FX_PSEL
     4 1115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1117 A9 00		        lda     #0
     3 1119 A0 44		        ldy     #FX_CSEL
     4 111B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 111D A2 00			ldx #0
    55 111F 20 47 11		paloop	jsr pal
    56 1122 85 92			sta ztmp
    57 1124 20 47 11			jsr pal
    58 1127 85 93			sta ztmp+1
    59 1129 20 47 11			jsr pal
    60 112C 85 94			sta ztmp+2
    61 112E 20 47 11			jsr pal
    63 1131 A5 94			lda ztmp+2
     2 1133 A0 46		        ldy     #FX_CR
     3 1135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 1137 A5 93			lda ztmp+1
     2 1139 A0 47		        ldy     #FX_CG
     3 113B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 113D A5 92			lda ztmp
     2 113F A0 48		        ldy     #FX_CB
     3 1141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 1143 E8				inx
    73 1144 D0 D9			bne paloop
    75 1146 60				rts
    77 1147 AD 53 11		pal	lda cpal
    78 = 1148			paladr	equ *-2
    79 114A EE 48 11 D0 03 EE + 	inw paladr
    80 1152 60				rts
    82 1153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 10			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0014			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 1553				org RESORIGIN
     2 10BB-10C1> A9 94		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 10C1 60				rts
    94 02E2-02E3> BB 10			ini RESORIGIN
    96 10C2				org main.VBXE_DATA%$1000+$B000
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0003				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0015				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 95		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0006				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0010				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 96		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0013				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 97		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0020				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0029				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 98		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 002D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0036				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 99		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0039				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0043				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9A		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0046				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0050				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9B		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0053				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9C		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0060				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0069				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9D		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 006D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0076				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9E		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0079				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0083				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9F		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0086				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0090				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0093				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00F9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0103				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0106				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0110				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0113				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0120				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0129				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AC		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 012D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0136				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AD		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0139				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0143				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AE		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0146				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0150				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AF		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0153				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0160				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0169				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 016D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0176				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0179				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0183				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0186				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0190				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0193				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B380				org RESORIGIN
     2 10BB-10C5> A9 00		        lda     #0
     3 10BD A0 5E		        ldy     #FX_MEMC
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 10C1 A0 5F		        ldy     #FX_MEMS
     3 10C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 10C5 60				rts
   125 02E2-02E3> BB 10			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $014A00..$03B37F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 10C6				org CODEORIGIN
   125
   126 1000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 1000-977C> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 1018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
     3 1030 14 28 50 50 A0 A0 + .by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
     4 1048 C0 C0 18 0C C0 C0 + .by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     5 1060 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     6 1078 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     7 1090 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     8 10A8 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     9 10C0 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
    10 10D8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 10E5			RTLIB
   131 10E5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $10E5..$1AB7
   138
   139 				; ------------------------------------------------------------
   140
   141 1AB8			START
   142 1AB8 BA				tsx
   143 1AB9 8E 0D 97			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 1ABC				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 1ABC			.local	rominit
     5
     6 1ABC 78			        sei
     7 1ABD A9 00		        lda #%00000000
     8 1ABF 8D 0E D4		        sta NMIEN       ;$D40E
     9 1AC2 A9 FE		        lda #%11111110
    10 1AC4 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 1AC7 A2 E4		        ldx #<nmiint
    33 1AC9 A0 1A		        ldy #>nmiint
    34 1ACB 8E FA FF		        stx NMIVEC      ;$FFFA
    35 1ACE 8C FB FF		        sty NMIVEC+1
    36
    37 1AD1 A2 EE		        ldx #<irqint
    38 1AD3 A0 1A		        ldy #>irqint
    39 1AD5 8E FE FF		        stx IRQVEC      ;$FFFE
    40 1AD8 8C FF FF		        sty IRQVEC+1
    41
    42 1ADB A9 40		        lda #%01000000
    43 1ADD 8D 0E D4		        sta NMIEN       ;$D40E
    44 1AE0 58			        cli
    45
    46 1AE1 4C 0F 1B			jmp skp
    47
    48
    49 1AE4 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 1AE7 10 03		        spl
    51 1AE9 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 1AEC 38			        sec
    54 1AED 24			        .byte $24        ;BIT $18
    55
    56 1AEE 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 1AEF EE 01 D3		        inc PORTB       ;$D301
    61
    62 1AF2 48			        pha
    63 1AF3 8A			        txa
    64 1AF4 48			        pha
    65 1AF5 BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 1AF6 A9 1B		        lda #>iret      ;adres procedury iret
    70 1AF8 48			        pha
    71 1AF9 A9 08		        lda #<iret
    72 1AFB 48			        pha
    73 1AFC BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 1AFF 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 1B00 90 03		        scc
    79 1B02 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 1B05 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 1B08 68			iret	pla
    83 1B09 AA				tax
    84 1B0A 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 1B0B CE 01 D3		        dec PORTB       ;$D301
    89 1B0E 40			        rti
    90
    91 1B0F			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0736			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 97EE			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 1B0F				m@init
Macro: M@INIT [Source: macros.asm]
     2 1B0F A0 EE			ldy <VADR
     3 1B11 A2 97			ldx >VADR
     5 1B13 A9 00			lda #$00
     6 1B15 F0 07			beq skp_
     8 1B17 99 00 10		clr	sta adr: $1000,y
    10 1B1A C8				iny
    11 1B1B D0 04			bne skp
    12 1B1D E8				inx
    13 1B1E 8E 19 1B		skp_	stx adr+1
    15 1B21 E0 9F		skp	cpx >VADR+VLEN
    16 1B23 D0 F2			bne clr
    17 1B25 C0 24			cpy <VADR+VLEN
    18 1B27 D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 1B29 A2 00			ldx #$00					; X = 0
   169 1B2B 86 82			stx bp						; BP = 0
   170
   171 1B2D 8E 08 D2			stx audctl					; reset POKEY
   172 1B30 8E 18 D2			stx audctl+$10
   173 1B33 A9 03			lda #3
   174 1B35 8D 0F D2			sta skctl
   175 1B38 8D 1F D2			sta skctl+$10
   176
   177 1B3B CA				dex						; X = 255
   178
   179 1B3C				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 1B3C 20 AE 26			jsr MAIN.SYSTEM.@UnitInit
    23 1B3F 20 39 2B			jsr MAIN.VBXE.@UnitInit
   180
   181 1B42			.local	MAIN						; PROCEDURE
   182
   183 1B42 4C 09 97			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 1B45			.local	SYSTEM						; UNIT
   188
   189 1B45			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 1B45 B5 96			lda :STACKORIGIN,x
   196 1B47 85 8A			sta A
   197 1B49 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 1B4B 85 8B			sta A+1
   199 1B4D CA				dex
   200 1B4E			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 1B4E A0 00			ldy #0
   205 1B50 B1 8A 85 92			mva (:edx),y Result
   206
   207 1B54			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 1B54 E8				inx
   215 1B55 A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 1B59 60				rts						; ret
   231 				.endl
   232
   233 1B5A			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 1B5A			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 1B5A A5 8B			lda :edx+1
   239 1B5C 10 0D			bpl @+
   240
   241 1B5E A9 00			lda #$00
   242 1B60 38 E5 8A			sub :edx
   243 1B63 85 8A			sta :edx
   244 1B65 A9 00			lda #$00
   245 1B67 E5 8B			sbc :edx+1
   246 1B69 85 8B			sta :edx+1
   247 				@
   248 1B6B 85 93			sta Result+1
   249
   250 1B6D A5 8A 85 92			mva :edx Result
   251
   252 1B71			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 1B71 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 1B72			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 1B72			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 1B72 A5 8D			lda :edx+3
   269 1B74 10 03			spl
   270 1B76 20 4C 11			jsr @negEDX
   271
   272 1B79 85 95			sta Result+3
   273
   274 1B7B A5 8A 85 92			mva :edx Result
   275 1B7F A5 8B 85 93			mva :edx+1 Result+1
   276 1B83 A5 8C 85 94			mva :edx+2 Result+2
   277
   278 1B87			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 1B87 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 1B88			.local	SQRT						; FUNCTION | OVERLOAD
   290 1B88			.local	@010185000
   291
   292 				; optimize OK (SYSTEM), line = 801
   293
   294 1B88 AD 9A 97			lda X+3
   295 1B8B 30 0B			bmi @+
   296 1B8D 0D 99 97			ora X+2
   297 1B90 0D 98 97			ora X+1
   298 1B93 0D 97 97			ora X
   299 1B96 D0 11			jne l_0042
   300 				@
   301 1B98 A9 00			lda #$00
   302 1B9A 8D 9B 97			sta RESULT
   303 1B9D 8D 9C 97			sta RESULT+1
   304 1BA0 8D 9D 97			sta RESULT+2
   305 1BA3 8D 9E 97			sta RESULT+3
   306 1BA6 4C 1C 1E			jmp @exit
   307 1BA9			l_0042
   308
   309 				; optimize OK (SYSTEM), line = 803
   310
   311 1BA9 A9 A1			lda <C
   312 1BAB 8D 9F 97			sta SP
   313 1BAE A9 97			lda >C
   314 1BB0 8D A0 97			sta SP+1
   315
   316 				; optimize OK (SYSTEM), line = 805
   317
   318 1BB3 AD 97 97			lda X
   319 1BB6 85 8E			sta :FPMAN0
   320 1BB8 AD 98 97			lda X+1
   321 1BBB 85 8F			sta :FPMAN1
   322 1BBD AD 99 97			lda X+2
   323 1BC0 85 90			sta :FPMAN2
   324 1BC2 AD 9A 97			lda X+3
   325 1BC5 85 91			sta :FPMAN3
   326 1BC7 20 2D 18			jsr @I2F
   327 1BCA A5 8E			lda :FPMAN0
   328 1BCC 8D A1 97			sta C
   329 1BCF A5 8F			lda :FPMAN1
   330 1BD1 8D A2 97			sta C+1
   331 1BD4 A5 90			lda :FPMAN2
   332 1BD6 8D A3 97			sta C+2
   333 1BD9 A5 91			lda :FPMAN3
   334 1BDB 8D A4 97			sta C+3
   335
   336 				; optimize OK (SYSTEM), line = 807
   337
   338 1BDE C9 3F			cmp #$3F
   339 1BE0 D0 13			bne @+
   340 1BE2 AD A3 97			lda C+2
   341 1BE5 C9 80			cmp #$80
   342 1BE7 D0 0C			bne @+
   343 1BE9 AD A2 97			lda C+1
   344 1BEC C9 00			cmp #$00
   345 1BEE D0 05			bne @+
   346 1BF0 AD A1 97			lda C
   347 1BF3 C9 01			cmp #$01
   348 				@
   349 1BF5 90 3A			jcc l_0061
   350 1BF7 AD A1 97			lda C
   351 1BFA 85 9F			sta :STACKORIGIN+9
   352 1BFC AD A2 97			lda C+1
   353 1BFF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   354 1C01 AD A3 97			lda C+2
   355 1C04 38 E9 80			sub #$80
   356 1C07 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   357 1C09 AD A4 97			lda C+3
   358 1C0C E9 3F			sbc #$3F
   359 1C0E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   360 1C10 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
   361 1C12 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
   362 1C14 66 AF			ror :STACKORIGIN+STACKWIDTH+9
   363 1C16 66 9F			ror :STACKORIGIN+9
   364 1C18 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   365 1C1A 18 69 80			add #$80
   366 1C1D 8D A3 97			sta C+2
   367 1C20 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   368 1C22 69 3F			adc #$3F
   369 1C24 8D A4 97			sta C+3
   370 1C27 A5 9F			lda :STACKORIGIN+9
   371 1C29 8D A1 97			sta C
   372 1C2C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   373 1C2E 8D A2 97			sta C+1
   374 1C31			l_0061
   375
   376 				; optimize OK (SYSTEM), line = 809
   377
   378 1C31 AC 9F 97 84 84 AC + 	mwy SP :bp2
   379 1C3B A0 00			ldy #$00
   380 1C3D B1 84			lda (:bp2),y
   381 1C3F 8D 9B 97			sta RESULT
   382 1C42 C8				iny
   383 1C43 B1 84			lda (:bp2),y
   384 1C45 8D 9C 97			sta RESULT+1
   385 1C48 C8				iny
   386 1C49 B1 84			lda (:bp2),y
   387 1C4B 8D 9D 97			sta RESULT+2
   388 1C4E C8				iny
   389 1C4F B1 84			lda (:bp2),y
   390 1C51 8D 9E 97			sta RESULT+3
   391
   392 				; optimize OK (SYSTEM), line = 811
   393
   394 1C54 AD 97 97			lda X
   395 1C57 85 8E			sta :FPMAN0
   396 1C59 AD 98 97			lda X+1
   397 1C5C 85 8F			sta :FPMAN1
   398 1C5E AD 99 97			lda X+2
   399 1C61 85 90			sta :FPMAN2
   400 1C63 AD 9A 97			lda X+3
   401 1C66 85 91			sta :FPMAN3
   402 1C68 20 2D 18			jsr @I2F
   403 1C6B A5 8E			lda :FPMAN0
   404 1C6D 85 86			sta :FP1MAN0
   405 1C6F A5 8F			lda :FPMAN1
   406 1C71 85 87			sta :FP1MAN1
   407 1C73 A5 90			lda :FPMAN2
   408 1C75 85 88			sta :FP1MAN2
   409 1C77 A5 91			lda :FPMAN3
   410 1C79 85 89			sta :FP1MAN3
   411 1C7B AD 9B 97			lda RESULT
   412 1C7E 85 8A			sta :FP2MAN0
   413 1C80 AD 9C 97			lda RESULT+1
   414 1C83 85 8B			sta :FP2MAN1
   415 1C85 AD 9D 97			lda RESULT+2
   416 1C88 85 8C			sta :FP2MAN2
   417 1C8A AD 9E 97			lda RESULT+3
   418 1C8D 85 8D			sta :FP2MAN3
   419 1C8F 20 F4 16			jsr @FDIV
   420 1C92 A5 8E			lda :FPMAN0
   421 1C94 85 8A			sta :FP2MAN0
   422 1C96 A5 8F			lda :FPMAN1
   423 1C98 85 8B			sta :FP2MAN1
   424 1C9A A5 90			lda :FPMAN2
   425 1C9C 85 8C			sta :FP2MAN2
   426 1C9E A5 91			lda :FPMAN3
   427 1CA0 85 8D			sta :FP2MAN3
   428 1CA2 AD 9B 97			lda RESULT
   429 1CA5 85 86			sta :FP1MAN0
   430 1CA7 AD 9C 97			lda RESULT+1
   431 1CAA 85 87			sta :FP1MAN1
   432 1CAC AD 9D 97			lda RESULT+2
   433 1CAF 85 88			sta :FP1MAN2
   434 1CB1 AD 9E 97			lda RESULT+3
   435 1CB4 85 89			sta :FP1MAN3
   436 1CB6 20 E7 14			jsr @FADD
   437 1CB9 A5 8E			lda :FPMAN0
   438 1CBB 85 86			sta :FP1MAN0
   439 1CBD A5 8F			lda :FPMAN1
   440 1CBF 85 87			sta :FP1MAN1
   441 1CC1 A5 90			lda :FPMAN2
   442 1CC3 85 88			sta :FP1MAN2
   443 1CC5 A5 91			lda :FPMAN3
   444 1CC7 85 89			sta :FP1MAN3
   445 1CC9 A9 00			lda #$00
   446 1CCB 85 8A			sta :FP2MAN0
   447 1CCD 85 8B			sta :FP2MAN1
   448 1CCF 85 8C			sta :FP2MAN2
   449 1CD1 A9 3F			lda #$3F
   450 1CD3 85 8D			sta :FP2MAN3
   451 1CD5 20 53 16			jsr @FMUL
   452 1CD8 A5 8E			lda :FPMAN0
   453 1CDA 8D 9B 97			sta RESULT
   454 1CDD A5 8F			lda :FPMAN1
   455 1CDF 8D 9C 97			sta RESULT+1
   456 1CE2 A5 90			lda :FPMAN2
   457 1CE4 8D 9D 97			sta RESULT+2
   458 1CE7 A5 91			lda :FPMAN3
   459 1CE9 8D 9E 97			sta RESULT+3
   460
   461 				; optimize OK (SYSTEM), line = 812
   462
   463 1CEC AD 97 97			lda X
   464 1CEF 85 8E			sta :FPMAN0
   465 1CF1 AD 98 97			lda X+1
   466 1CF4 85 8F			sta :FPMAN1
   467 1CF6 AD 99 97			lda X+2
   468 1CF9 85 90			sta :FPMAN2
   469 1CFB AD 9A 97			lda X+3
   470 1CFE 85 91			sta :FPMAN3
   471 1D00 20 2D 18			jsr @I2F
   472 1D03 A5 8E			lda :FPMAN0
   473 1D05 85 86			sta :FP1MAN0
   474 1D07 A5 8F			lda :FPMAN1
   475 1D09 85 87			sta :FP1MAN1
   476 1D0B A5 90			lda :FPMAN2
   477 1D0D 85 88			sta :FP1MAN2
   478 1D0F A5 91			lda :FPMAN3
   479 1D11 85 89			sta :FP1MAN3
   480 1D13 AD 9B 97			lda RESULT
   481 1D16 85 8A			sta :FP2MAN0
   482 1D18 AD 9C 97			lda RESULT+1
   483 1D1B 85 8B			sta :FP2MAN1
   484 1D1D AD 9D 97			lda RESULT+2
   485 1D20 85 8C			sta :FP2MAN2
   486 1D22 AD 9E 97			lda RESULT+3
   487 1D25 85 8D			sta :FP2MAN3
   488 1D27 20 F4 16			jsr @FDIV
   489 1D2A A5 8E			lda :FPMAN0
   490 1D2C 85 8A			sta :FP2MAN0
   491 1D2E A5 8F			lda :FPMAN1
   492 1D30 85 8B			sta :FP2MAN1
   493 1D32 A5 90			lda :FPMAN2
   494 1D34 85 8C			sta :FP2MAN2
   495 1D36 A5 91			lda :FPMAN3
   496 1D38 85 8D			sta :FP2MAN3
   497 1D3A AD 9B 97			lda RESULT
   498 1D3D 85 86			sta :FP1MAN0
   499 1D3F AD 9C 97			lda RESULT+1
   500 1D42 85 87			sta :FP1MAN1
   501 1D44 AD 9D 97			lda RESULT+2
   502 1D47 85 88			sta :FP1MAN2
   503 1D49 AD 9E 97			lda RESULT+3
   504 1D4C 85 89			sta :FP1MAN3
   505 1D4E 20 E7 14			jsr @FADD
   506 1D51 A5 8E			lda :FPMAN0
   507 1D53 85 86			sta :FP1MAN0
   508 1D55 A5 8F			lda :FPMAN1
   509 1D57 85 87			sta :FP1MAN1
   510 1D59 A5 90			lda :FPMAN2
   511 1D5B 85 88			sta :FP1MAN2
   512 1D5D A5 91			lda :FPMAN3
   513 1D5F 85 89			sta :FP1MAN3
   514 1D61 A9 00			lda #$00
   515 1D63 85 8A			sta :FP2MAN0
   516 1D65 85 8B			sta :FP2MAN1
   517 1D67 85 8C			sta :FP2MAN2
   518 1D69 A9 3F			lda #$3F
   519 1D6B 85 8D			sta :FP2MAN3
   520 1D6D 20 53 16			jsr @FMUL
   521 1D70 A5 8E			lda :FPMAN0
   522 1D72 8D 9B 97			sta RESULT
   523 1D75 A5 8F			lda :FPMAN1
   524 1D77 8D 9C 97			sta RESULT+1
   525 1D7A A5 90			lda :FPMAN2
   526 1D7C 8D 9D 97			sta RESULT+2
   527 1D7F A5 91			lda :FPMAN3
   528 1D81 8D 9E 97			sta RESULT+3
   529
   530 				; optimize OK (SYSTEM), line = 813
   531
   532 1D84 AD 97 97			lda X
   533 1D87 85 8E			sta :FPMAN0
   534 1D89 AD 98 97			lda X+1
   535 1D8C 85 8F			sta :FPMAN1
   536 1D8E AD 99 97			lda X+2
   537 1D91 85 90			sta :FPMAN2
   538 1D93 AD 9A 97			lda X+3
   539 1D96 85 91			sta :FPMAN3
   540 1D98 20 2D 18			jsr @I2F
   541 1D9B A5 8E			lda :FPMAN0
   542 1D9D 85 86			sta :FP1MAN0
   543 1D9F A5 8F			lda :FPMAN1
   544 1DA1 85 87			sta :FP1MAN1
   545 1DA3 A5 90			lda :FPMAN2
   546 1DA5 85 88			sta :FP1MAN2
   547 1DA7 A5 91			lda :FPMAN3
   548 1DA9 85 89			sta :FP1MAN3
   549 1DAB AD 9B 97			lda RESULT
   550 1DAE 85 8A			sta :FP2MAN0
   551 1DB0 AD 9C 97			lda RESULT+1
   552 1DB3 85 8B			sta :FP2MAN1
   553 1DB5 AD 9D 97			lda RESULT+2
   554 1DB8 85 8C			sta :FP2MAN2
   555 1DBA AD 9E 97			lda RESULT+3
   556 1DBD 85 8D			sta :FP2MAN3
   557 1DBF 20 F4 16			jsr @FDIV
   558 1DC2 A5 8E			lda :FPMAN0
   559 1DC4 85 8A			sta :FP2MAN0
   560 1DC6 A5 8F			lda :FPMAN1
   561 1DC8 85 8B			sta :FP2MAN1
   562 1DCA A5 90			lda :FPMAN2
   563 1DCC 85 8C			sta :FP2MAN2
   564 1DCE A5 91			lda :FPMAN3
   565 1DD0 85 8D			sta :FP2MAN3
   566 1DD2 AD 9B 97			lda RESULT
   567 1DD5 85 86			sta :FP1MAN0
   568 1DD7 AD 9C 97			lda RESULT+1
   569 1DDA 85 87			sta :FP1MAN1
   570 1DDC AD 9D 97			lda RESULT+2
   571 1DDF 85 88			sta :FP1MAN2
   572 1DE1 AD 9E 97			lda RESULT+3
   573 1DE4 85 89			sta :FP1MAN3
   574 1DE6 20 E7 14			jsr @FADD
   575 1DE9 A5 8E			lda :FPMAN0
   576 1DEB 85 86			sta :FP1MAN0
   577 1DED A5 8F			lda :FPMAN1
   578 1DEF 85 87			sta :FP1MAN1
   579 1DF1 A5 90			lda :FPMAN2
   580 1DF3 85 88			sta :FP1MAN2
   581 1DF5 A5 91			lda :FPMAN3
   582 1DF7 85 89			sta :FP1MAN3
   583 1DF9 A9 00			lda #$00
   584 1DFB 85 8A			sta :FP2MAN0
   585 1DFD 85 8B			sta :FP2MAN1
   586 1DFF 85 8C			sta :FP2MAN2
   587 1E01 A9 3F			lda #$3F
   588 1E03 85 8D			sta :FP2MAN3
   589 1E05 20 53 16			jsr @FMUL
   590 1E08 A5 8E			lda :FPMAN0
   591 1E0A 8D 9B 97			sta RESULT
   592 1E0D A5 8F			lda :FPMAN1
   593 1E0F 8D 9C 97			sta RESULT+1
   594 1E12 A5 90			lda :FPMAN2
   595 1E14 8D 9D 97			sta RESULT+2
   596 1E17 A5 91			lda :FPMAN3
   597 1E19 8D 9E 97			sta RESULT+3
   598 1E1C			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = 9797			X	= DATAORIGIN+$000B
   603 = 979B			RESULT	= DATAORIGIN+$000F
   604 = 979F			SP	= DATAORIGIN+$0013
   605 = 97A1			C	= DATAORIGIN+$0015
   606
   607 = 9797			@VarData	= X
   608 = 000A			@VarDataSize	= 10
   609
   610 1E1C 60				rts						; ret
   611 				.endl
   612 				.endl							; overload
   613
   614 1E1D			.local	ARCTAN						; FUNCTION | OVERLOAD
   615 1E1D			.local	@01018F000
   616
   617 				; optimize OK (SYSTEM), line = 904
   618
   619 1E1D A9 00			lda #$00
   620 1E1F 8D B5 97			sta SIGN
   621
   622 				; optimize OK (SYSTEM), line = 905
   623
   624 1E22 AD A5 97			lda VALUE
   625 1E25 8D AD 97			sta X
   626 1E28 AD A6 97			lda VALUE+1
   627 1E2B 8D AE 97			sta X+1
   628 1E2E AD A7 97			lda VALUE+2
   629 1E31 8D AF 97			sta X+2
   630 1E34 AD A8 97			lda VALUE+3
   631 1E37 8D B0 97			sta X+3
   632
   633 				; optimize OK (SYSTEM), line = 906
   634
   635 1E3A A9 00			lda #$00
   636 1E3C 8D B1 97			sta Y
   637 1E3F 8D B2 97			sta Y+1
   638 1E42 8D B3 97			sta Y+2
   639 1E45 8D B4 97			sta Y+3
   640
   641 				; optimize OK (SYSTEM), line = 908
   642
   643 1E48 AD A8 97			lda VALUE+3
   644 1E4B D0 0D			bne @+
   645 1E4D AD A7 97			lda VALUE+2
   646 1E50 D0 08			bne @+
   647 1E52 AD A6 97			lda VALUE+1
   648 1E55 D0 03			bne @+
   649 1E57 AD A5 97			lda VALUE
   650 				@
   651 1E5A D0 11			jne l_00CB
   652
   653 				; optimize OK (SYSTEM), line = 909
   654
   655 1E5C A9 00			lda #$00
   656 1E5E 8D A9 97			sta RESULT
   657 1E61 8D AA 97			sta RESULT+1
   658 1E64 8D AB 97			sta RESULT+2
   659 1E67 8D AC 97			sta RESULT+3
   660 1E6A 4C 46 22			jmp @exit
   661 1E6D			l_00CB
   662
   663 				; optimize OK (SYSTEM), line = 912
   664
   665 1E6D AD B0 97			lda X+3
   666 1E70 10 0D			jpl l_00E9
   667
   668 				; optimize OK (SYSTEM), line = 913
   669
   670 1E72 A9 01			lda #$01
   671 1E74 8D B5 97			sta SIGN
   672
   673 				; optimize OK (SYSTEM), line = 914
   674
   675 1E77 AD B0 97			lda X+3
   676 1E7A 49 80			eor #$80
   677 1E7C 8D B0 97			sta X+3
   678 1E7F			l_00E9
   679 1E7F			l_00D9
   680
   681 				; optimize OK (SYSTEM), line = 917
   682
   683 1E7F A9 00			lda #$00
   684 1E81 85 8A			sta :FP2MAN0
   685 1E83 85 8B			sta :FP2MAN1
   686 1E85 A9 80			lda #$80
   687 1E87 85 8C			sta :FP2MAN2
   688 1E89 A9 3F			lda #$3F
   689 1E8B 85 8D			sta :FP2MAN3
   690 1E8D AD AD 97			lda X
   691 1E90 85 86			sta :FP1MAN0
   692 1E92 AD AE 97			lda X+1
   693 1E95 85 87			sta :FP1MAN1
   694 1E97 AD AF 97			lda X+2
   695 1E9A 85 88			sta :FP1MAN2
   696 1E9C AD B0 97			lda X+3
   697 1E9F 85 89			sta :FP1MAN3
   698 1EA1 20 EC 14			jsr @FSUB
   699 1EA4 A5 8E			lda :FPMAN0
   700 1EA6 85 9F			sta :STACKORIGIN+9
   701 1EA8 A5 8F			lda :FPMAN1
   702 1EAA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   703 1EAC A5 90			lda :FPMAN2
   704 1EAE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   705 1EB0 A5 91			lda :FPMAN3
   706 1EB2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   707 1EB4 A9 00			lda #$00
   708 1EB6 85 8A			sta :FP2MAN0
   709 1EB8 85 8B			sta :FP2MAN1
   710 1EBA A9 80			lda #$80
   711 1EBC 85 8C			sta :FP2MAN2
   712 1EBE A9 3F			lda #$3F
   713 1EC0 85 8D			sta :FP2MAN3
   714 1EC2 AD AD 97			lda X
   715 1EC5 85 86			sta :FP1MAN0
   716 1EC7 AD AE 97			lda X+1
   717 1ECA 85 87			sta :FP1MAN1
   718 1ECC AD AF 97			lda X+2
   719 1ECF 85 88			sta :FP1MAN2
   720 1ED1 AD B0 97			lda X+3
   721 1ED4 85 89			sta :FP1MAN3
   722 1ED6 20 E7 14			jsr @FADD
   723 1ED9 A5 8E			lda :FPMAN0
   724 1EDB 85 8A			sta :FP2MAN0
   725 1EDD A5 8F			lda :FPMAN1
   726 1EDF 85 8B			sta :FP2MAN1
   727 1EE1 A5 90			lda :FPMAN2
   728 1EE3 85 8C			sta :FP2MAN2
   729 1EE5 A5 91			lda :FPMAN3
   730 1EE7 85 8D			sta :FP2MAN3
   731 1EE9 A5 9F			lda :STACKORIGIN+9
   732 1EEB 85 86			sta :FP1MAN0
   733 1EED A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   734 1EEF 85 87			sta :FP1MAN1
   735 1EF1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   736 1EF3 85 88			sta :FP1MAN2
   737 1EF5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   738 1EF7 85 89			sta :FP1MAN3
   739 1EF9 20 F4 16			jsr @FDIV
   740 1EFC A5 8E			lda :FPMAN0
   741 1EFE 8D AD 97			sta X
   742 1F01 A5 8F			lda :FPMAN1
   743 1F03 8D AE 97			sta X+1
   744 1F06 A5 90			lda :FPMAN2
   745 1F08 8D AF 97			sta X+2
   746 1F0B A5 91			lda :FPMAN3
   747 1F0D 8D B0 97			sta X+3
   748
   749 				; optimize OK (SYSTEM), line = 918
   750
   751 1F10 AD AD 97			lda X
   752 1F13 85 8A			sta :FP2MAN0
   753 1F15 AD AE 97			lda X+1
   754 1F18 85 8B			sta :FP2MAN1
   755 1F1A AD AF 97			lda X+2
   756 1F1D 85 8C			sta :FP2MAN2
   757 1F1F AD B0 97			lda X+3
   758 1F22 85 8D			sta :FP2MAN3
   759 1F24 AD AD 97			lda X
   760 1F27 85 86			sta :FP1MAN0
   761 1F29 AD AE 97			lda X+1
   762 1F2C 85 87			sta :FP1MAN1
   763 1F2E AD AF 97			lda X+2
   764 1F31 85 88			sta :FP1MAN2
   765 1F33 AD B0 97			lda X+3
   766 1F36 85 89			sta :FP1MAN3
   767 1F38 20 53 16			jsr @FMUL
   768 1F3B A5 8E			lda :FPMAN0
   769 1F3D 8D B1 97			sta Y
   770 1F40 A5 8F			lda :FPMAN1
   771 1F42 8D B2 97			sta Y+1
   772 1F45 A5 90			lda :FPMAN2
   773 1F47 8D B3 97			sta Y+2
   774 1F4A A5 91			lda :FPMAN3
   775 1F4C 8D B4 97			sta Y+3
   776
   777 				; optimize OK (SYSTEM), line = 919
   778
   779 1F4F AD B1 97			lda Y
   780 1F52 85 8A			sta :FP2MAN0
   781 1F54 AD B2 97			lda Y+1
   782 1F57 85 8B			sta :FP2MAN1
   783 1F59 AD B3 97			lda Y+2
   784 1F5C 85 8C			sta :FP2MAN2
   785 1F5E AD B4 97			lda Y+3
   786 1F61 85 8D			sta :FP2MAN3
   787 1F63 A9 4A			lda #$4A
   788 1F65 85 86			sta :FP1MAN0
   789 1F67 A9 D7			lda #$D7
   790 1F69 85 87			sta :FP1MAN1
   791 1F6B A9 3B			lda #$3B
   792 1F6D 85 88			sta :FP1MAN2
   793 1F6F 85 89			sta :FP1MAN3
   794 1F71 20 53 16			jsr @FMUL
   795 1F74 A5 8E			lda :FPMAN0
   796 1F76 85 86			sta :FP1MAN0
   797 1F78 A5 8F			lda :FPMAN1
   798 1F7A 85 87			sta :FP1MAN1
   799 1F7C A5 90			lda :FPMAN2
   800 1F7E 85 88			sta :FP1MAN2
   801 1F80 A5 91			lda :FPMAN3
   802 1F82 85 89			sta :FP1MAN3
   803 1F84 A9 02			lda #$02
   804 1F86 85 8A			sta :FP2MAN0
   805 1F88 A9 6E			lda #$6E
   806 1F8A 85 8B			sta :FP2MAN1
   807 1F8C A9 84			lda #$84
   808 1F8E 85 8C			sta :FP2MAN2
   809 1F90 A9 3C			lda #$3C
   810 1F92 85 8D			sta :FP2MAN3
   811 1F94 20 EC 14			jsr @FSUB
   812 1F97 A5 8E			lda :FPMAN0
   813 1F99 85 86			sta :FP1MAN0
   814 1F9B A5 8F			lda :FPMAN1
   815 1F9D 85 87			sta :FP1MAN1
   816 1F9F A5 90			lda :FPMAN2
   817 1FA1 85 88			sta :FP1MAN2
   818 1FA3 A5 91			lda :FPMAN3
   819 1FA5 85 89			sta :FP1MAN3
   820 1FA7 AD B1 97			lda Y
   821 1FAA 85 8A			sta :FP2MAN0
   822 1FAC AD B2 97			lda Y+1
   823 1FAF 85 8B			sta :FP2MAN1
   824 1FB1 AD B3 97			lda Y+2
   825 1FB4 85 8C			sta :FP2MAN2
   826 1FB6 AD B4 97			lda Y+3
   827 1FB9 85 8D			sta :FP2MAN3
   828 1FBB 20 53 16			jsr @FMUL
   829 1FBE A5 8E			lda :FPMAN0
   830 1FC0 85 86			sta :FP1MAN0
   831 1FC2 A5 8F			lda :FPMAN1
   832 1FC4 85 87			sta :FP1MAN1
   833 1FC6 A5 90			lda :FPMAN2
   834 1FC8 85 88			sta :FP1MAN2
   835 1FCA A5 91			lda :FPMAN3
   836 1FCC 85 89			sta :FP1MAN3
   837 1FCE A9 FE			lda #$FE
   838 1FD0 85 8A			sta :FP2MAN0
   839 1FD2 A9 C1			lda #$C1
   840 1FD4 85 8B			sta :FP2MAN1
   841 1FD6 A9 2F			lda #$2F
   842 1FD8 85 8C			sta :FP2MAN2
   843 1FDA A9 3D			lda #$3D
   844 1FDC 85 8D			sta :FP2MAN3
   845 1FDE 20 E7 14			jsr @FADD
   846 1FE1 A5 8E			lda :FPMAN0
   847 1FE3 85 86			sta :FP1MAN0
   848 1FE5 A5 8F			lda :FPMAN1
   849 1FE7 85 87			sta :FP1MAN1
   850 1FE9 A5 90			lda :FPMAN2
   851 1FEB 85 88			sta :FP1MAN2
   852 1FED A5 91			lda :FPMAN3
   853 1FEF 85 89			sta :FP1MAN3
   854 1FF1 AD B1 97			lda Y
   855 1FF4 85 8A			sta :FP2MAN0
   856 1FF6 AD B2 97			lda Y+1
   857 1FF9 85 8B			sta :FP2MAN1
   858 1FFB AD B3 97			lda Y+2
   859 1FFE 85 8C			sta :FP2MAN2
   860 2000 AD B4 97			lda Y+3
   861 2003 85 8D			sta :FP2MAN3
   862 2005 20 53 16			jsr @FMUL
   863 2008 A5 8E			lda :FPMAN0
   864 200A 85 86			sta :FP1MAN0
   865 200C A5 8F			lda :FPMAN1
   866 200E 85 87			sta :FP1MAN1
   867 2010 A5 90			lda :FPMAN2
   868 2012 85 88			sta :FP1MAN2
   869 2014 A5 91			lda :FPMAN3
   870 2016 85 89			sta :FP1MAN3
   871 2018 A9 74			lda #$74
   872 201A 85 8A			sta :FP2MAN0
   873 201C A9 31			lda #$31
   874 201E 85 8B			sta :FP2MAN1
   875 2020 A9 9A			lda #$9A
   876 2022 85 8C			sta :FP2MAN2
   877 2024 A9 3D			lda #$3D
   878 2026 85 8D			sta :FP2MAN3
   879 2028 20 EC 14			jsr @FSUB
   880 202B A5 8E			lda :FPMAN0
   881 202D 85 86			sta :FP1MAN0
   882 202F A5 8F			lda :FPMAN1
   883 2031 85 87			sta :FP1MAN1
   884 2033 A5 90			lda :FPMAN2
   885 2035 85 88			sta :FP1MAN2
   886 2037 A5 91			lda :FPMAN3
   887 2039 85 89			sta :FP1MAN3
   888 203B AD B1 97			lda Y
   889 203E 85 8A			sta :FP2MAN0
   890 2040 AD B2 97			lda Y+1
   891 2043 85 8B			sta :FP2MAN1
   892 2045 AD B3 97			lda Y+2
   893 2048 85 8C			sta :FP2MAN2
   894 204A AD B4 97			lda Y+3
   895 204D 85 8D			sta :FP2MAN3
   896 204F 20 53 16			jsr @FMUL
   897 2052 A5 8E			lda :FPMAN0
   898 2054 85 86			sta :FP1MAN0
   899 2056 A5 8F			lda :FPMAN1
   900 2058 85 87			sta :FP1MAN1
   901 205A A5 90			lda :FPMAN2
   902 205C 85 88			sta :FP1MAN2
   903 205E A5 91			lda :FPMAN3
   904 2060 85 89			sta :FP1MAN3
   905 2062 A9 83			lda #$83
   906 2064 85 8A			sta :FP2MAN0
   907 2066 A9 3D			lda #$3D
   908 2068 85 8B			sta :FP2MAN1
   909 206A A9 DA			lda #$DA
   910 206C 85 8C			sta :FP2MAN2
   911 206E A9 3D			lda #$3D
   912 2070 85 8D			sta :FP2MAN3
   913 2072 20 E7 14			jsr @FADD
   914 2075 A5 8E			lda :FPMAN0
   915 2077 85 86			sta :FP1MAN0
   916 2079 A5 8F			lda :FPMAN1
   917 207B 85 87			sta :FP1MAN1
   918 207D A5 90			lda :FPMAN2
   919 207F 85 88			sta :FP1MAN2
   920 2081 A5 91			lda :FPMAN3
   921 2083 85 89			sta :FP1MAN3
   922 2085 AD B1 97			lda Y
   923 2088 85 8A			sta :FP2MAN0
   924 208A AD B2 97			lda Y+1
   925 208D 85 8B			sta :FP2MAN1
   926 208F AD B3 97			lda Y+2
   927 2092 85 8C			sta :FP2MAN2
   928 2094 AD B4 97			lda Y+3
   929 2097 85 8D			sta :FP2MAN3
   930 2099 20 53 16			jsr @FMUL
   931 209C A5 8E			lda :FPMAN0
   932 209E 85 86			sta :FP1MAN0
   933 20A0 A5 8F			lda :FPMAN1
   934 20A2 85 87			sta :FP1MAN1
   935 20A4 A5 90			lda :FPMAN2
   936 20A6 85 88			sta :FP1MAN2
   937 20A8 A5 91			lda :FPMAN3
   938 20AA 85 89			sta :FP1MAN3
   939 20AC A9 C7			lda #$C7
   940 20AE 85 8A			sta :FP2MAN0
   941 20B0 A9 7F			lda #$7F
   942 20B2 85 8B			sta :FP2MAN1
   943 20B4 A9 11			lda #$11
   944 20B6 85 8C			sta :FP2MAN2
   945 20B8 A9 3E			lda #$3E
   946 20BA 85 8D			sta :FP2MAN3
   947 20BC 20 EC 14			jsr @FSUB
   948 20BF A5 8E			lda :FPMAN0
   949 20C1 85 86			sta :FP1MAN0
   950 20C3 A5 8F			lda :FPMAN1
   951 20C5 85 87			sta :FP1MAN1
   952 20C7 A5 90			lda :FPMAN2
   953 20C9 85 88			sta :FP1MAN2
   954 20CB A5 91			lda :FPMAN3
   955 20CD 85 89			sta :FP1MAN3
   956 20CF AD B1 97			lda Y
   957 20D2 85 8A			sta :FP2MAN0
   958 20D4 AD B2 97			lda Y+1
   959 20D7 85 8B			sta :FP2MAN1
   960 20D9 AD B3 97			lda Y+2
   961 20DC 85 8C			sta :FP2MAN2
   962 20DE AD B4 97			lda Y+3
   963 20E1 85 8D			sta :FP2MAN3
   964 20E3 20 53 16			jsr @FMUL
   965 20E6 A5 8E			lda :FPMAN0
   966 20E8 85 86			sta :FP1MAN0
   967 20EA A5 8F			lda :FPMAN1
   968 20EC 85 87			sta :FP1MAN1
   969 20EE A5 90			lda :FPMAN2
   970 20F0 85 88			sta :FP1MAN2
   971 20F2 A5 91			lda :FPMAN3
   972 20F4 85 89			sta :FP1MAN3
   973 20F6 A9 E5			lda #$E5
   974 20F8 85 8A			sta :FP2MAN0
   975 20FA A9 BB			lda #$BB
   976 20FC 85 8B			sta :FP2MAN1
   977 20FE A9 4C			lda #$4C
   978 2100 85 8C			sta :FP2MAN2
   979 2102 A9 3E			lda #$3E
   980 2104 85 8D			sta :FP2MAN3
   981 2106 20 E7 14			jsr @FADD
   982 2109 A5 8E			lda :FPMAN0
   983 210B 85 86			sta :FP1MAN0
   984 210D A5 8F			lda :FPMAN1
   985 210F 85 87			sta :FP1MAN1
   986 2111 A5 90			lda :FPMAN2
   987 2113 85 88			sta :FP1MAN2
   988 2115 A5 91			lda :FPMAN3
   989 2117 85 89			sta :FP1MAN3
   990 2119 AD B1 97			lda Y
   991 211C 85 8A			sta :FP2MAN0
   992 211E AD B2 97			lda Y+1
   993 2121 85 8B			sta :FP2MAN1
   994 2123 AD B3 97			lda Y+2
   995 2126 85 8C			sta :FP2MAN2
   996 2128 AD B4 97			lda Y+3
   997 212B 85 8D			sta :FP2MAN3
   998 212D 20 53 16			jsr @FMUL
   999 2130 A5 8E			lda :FPMAN0
  1000 2132 85 86			sta :FP1MAN0
  1001 2134 A5 8F			lda :FPMAN1
  1002 2136 85 87			sta :FP1MAN1
  1003 2138 A5 90			lda :FPMAN2
  1004 213A 85 88			sta :FP1MAN2
  1005 213C A5 91			lda :FPMAN3
  1006 213E 85 89			sta :FP1MAN3
  1007 2140 A9 6C			lda #$6C
  1008 2142 85 8A			sta :FP2MAN0
  1009 2144 A9 AA			lda #$AA
  1010 2146 85 8B			sta :FP2MAN1
  1011 2148 85 8C			sta :FP2MAN2
  1012 214A A9 3E			lda #$3E
  1013 214C 85 8D			sta :FP2MAN3
  1014 214E 20 EC 14			jsr @FSUB
  1015 2151 A5 8E			lda :FPMAN0
  1016 2153 85 86			sta :FP1MAN0
  1017 2155 A5 8F			lda :FPMAN1
  1018 2157 85 87			sta :FP1MAN1
  1019 2159 A5 90			lda :FPMAN2
  1020 215B 85 88			sta :FP1MAN2
  1021 215D A5 91			lda :FPMAN3
  1022 215F 85 89			sta :FP1MAN3
  1023 2161 AD B1 97			lda Y
  1024 2164 85 8A			sta :FP2MAN0
  1025 2166 AD B2 97			lda Y+1
  1026 2169 85 8B			sta :FP2MAN1
  1027 216B AD B3 97			lda Y+2
  1028 216E 85 8C			sta :FP2MAN2
  1029 2170 AD B4 97			lda Y+3
  1030 2173 85 8D			sta :FP2MAN3
  1031 2175 20 53 16			jsr @FMUL
  1032 2178 A5 8E			lda :FPMAN0
  1033 217A 85 86			sta :FP1MAN0
  1034 217C A5 8F			lda :FPMAN1
  1035 217E 85 87			sta :FP1MAN1
  1036 2180 A5 90			lda :FPMAN2
  1037 2182 85 88			sta :FP1MAN2
  1038 2184 A5 91			lda :FPMAN3
  1039 2186 85 89			sta :FP1MAN3
  1040 2188 A9 00			lda #$00
  1041 218A 85 8A			sta :FP2MAN0
  1042 218C 85 8B			sta :FP2MAN1
  1043 218E A9 80			lda #$80
  1044 2190 85 8C			sta :FP2MAN2
  1045 2192 A9 3F			lda #$3F
  1046 2194 85 8D			sta :FP2MAN3
  1047 2196 20 E7 14			jsr @FADD
  1048 2199 A5 8E			lda :FPMAN0
  1049 219B 85 86			sta :FP1MAN0
  1050 219D A5 8F			lda :FPMAN1
  1051 219F 85 87			sta :FP1MAN1
  1052 21A1 A5 90			lda :FPMAN2
  1053 21A3 85 88			sta :FP1MAN2
  1054 21A5 A5 91			lda :FPMAN3
  1055 21A7 85 89			sta :FP1MAN3
  1056 21A9 AD AD 97			lda X
  1057 21AC 85 8A			sta :FP2MAN0
  1058 21AE AD AE 97			lda X+1
  1059 21B1 85 8B			sta :FP2MAN1
  1060 21B3 AD AF 97			lda X+2
  1061 21B6 85 8C			sta :FP2MAN2
  1062 21B8 AD B0 97			lda X+3
  1063 21BB 85 8D			sta :FP2MAN3
  1064 21BD 20 53 16			jsr @FMUL
  1065 21C0 A5 8E			lda :FPMAN0
  1066 21C2 8D AD 97			sta X
  1067 21C5 A5 8F			lda :FPMAN1
  1068 21C7 8D AE 97			sta X+1
  1069 21CA A5 90			lda :FPMAN2
  1070 21CC 8D AF 97			sta X+2
  1071 21CF A5 91			lda :FPMAN3
  1072 21D1 8D B0 97			sta X+3
  1073
  1074 				; optimize OK (SYSTEM), line = 922
  1075
  1076 21D4 AD AD 97			lda X
  1077 21D7 85 8A			sta :FP2MAN0
  1078 21D9 AD AE 97			lda X+1
  1079 21DC 85 8B			sta :FP2MAN1
  1080 21DE AD AF 97			lda X+2
  1081 21E1 85 8C			sta :FP2MAN2
  1082 21E3 AD B0 97			lda X+3
  1083 21E6 85 8D			sta :FP2MAN3
  1084 21E8 A9 DB			lda #$DB
  1085 21EA 85 86			sta :FP1MAN0
  1086 21EC A9 0F			lda #$0F
  1087 21EE 85 87			sta :FP1MAN1
  1088 21F0 A9 49			lda #$49
  1089 21F2 85 88			sta :FP1MAN2
  1090 21F4 A9 3F			lda #$3F
  1091 21F6 85 89			sta :FP1MAN3
  1092 21F8 20 E7 14			jsr @FADD
  1093 21FB A5 8E			lda :FPMAN0
  1094 21FD 8D AD 97			sta X
  1095 2200 A5 8F			lda :FPMAN1
  1096 2202 8D AE 97			sta X+1
  1097 2205 A5 90			lda :FPMAN2
  1098 2207 8D AF 97			sta X+2
  1099 220A A5 91			lda :FPMAN3
  1100 220C 8D B0 97			sta X+3
  1101
  1102 				; optimize OK (SYSTEM), line = 924
  1103
  1104 220F AD B5 97			lda SIGN
  1105 2212 F0 1A			jeq l_016B
  1106
  1107 				; optimize OK (SYSTEM), line = 925
  1108
  1109 2214 AD AD 97			lda X
  1110 2217 8D A9 97			sta RESULT
  1111 221A AD AE 97			lda X+1
  1112 221D 8D AA 97			sta RESULT+1
  1113 2220 AD AF 97			lda X+2
  1114 2223 8D AB 97			sta RESULT+2
  1115 2226 AD B0 97			lda X+3
  1116 2229 49 80			eor #$80
  1117 222B 4C 43 22			jmp l_017C
  1118 222E			l_016B
  1119
  1120 				; optimize OK (SYSTEM), line = 927
  1121
  1122 222E AD AD 97			lda X
  1123 2231 8D A9 97			sta RESULT
  1124 2234 AD AE 97			lda X+1
  1125 2237 8D AA 97			sta RESULT+1
  1126 223A AD AF 97			lda X+2
  1127 223D 8D AB 97			sta RESULT+2
  1128 2240 AD B0 97			lda X+3
  1129 2243			l_017C
  1130 2243 8D AC 97			sta RESULT+3
  1131 2246			@exit
  1132
  1133 				; ------------------------------------------------------------
  1134
  1135 = 97A5			VALUE	= DATAORIGIN+$0019
  1136 = 97A9			RESULT	= DATAORIGIN+$001D
  1137 = 97AD			X	= DATAORIGIN+$0021
  1138 = 97B1			Y	= DATAORIGIN+$0025
  1139 = 97B5			SIGN	= DATAORIGIN+$0029
  1140
  1141 = 97A5			@VarData	= VALUE
  1142 = 000D			@VarDataSize	= 13
  1143
  1144 2246 60				rts						; ret
  1145 				.endl
  1146 				.endl							; overload
  1147
  1148 2247			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
  1149
  1150 				; ------------------------------------------------------------
  1151
  1152 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1153 				; as Pointer
  1154 2247 B5 96			lda :STACKORIGIN,x
  1155 2249 85 8A			sta A
  1156 224B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  1157 224D 85 8B			sta A+1
  1158 224F CA				dex
  1159 2250 30 05			jmi @main
  1160
  1161 				; ------------------------------------------------------------
  1162
  1163 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1164 				; as Pointer
  1165 2252 B5 96			lda :STACKORIGIN,x
  1166 2254 85 8E			sta VALUE
  1167 2256 CA				dex
  1168 2257			@main
  1169
  1170 				; -------------------  ASM Block 00000025  -------------------
  1171
  1172 2257 A0 00			ldy #0
  1173 2259 A5 8E 91 8A			mva value (:edx),y
  1174
  1175 				; ------------------------------------------------------------
  1176
  1177 = 008A			A	= :EDX
  1178 = 008E			VALUE	= :ECX
  1179
  1180 225D			@exit
  1181 					.ifdef @new
  1182 					lda <@VarData
  1183 					sta :ztmp
  1184 					lda >@VarData
  1185 					ldy #@VarDataSize-1
  1186 					jmp @FreeMem
  1187 					els
  1188 225D 60				rts						; ret
  1189 					eif
  1190 				.endl
  1191
  1192 225E			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
  1193 225E			.local	@03018000001810000300000
  1194
  1195 					.MACRO m@INLINE
  1196 				
  1197 				; -------------------  ASM Block 00000033  -------------------
  1198 				
  1199 					jsr @fill
  1200 				
  1201 					.ENDM
  1202
  1203 				; ------------------------------------------------------------
  1204
  1205 = 008A			A	= :EDX
  1206 = 008E			COUNT	= :ECX
  1207 = 0086			VALUE	= :EAX
  1208
  1209 225E			@exit
  1210 				.endl
  1211 				.endl							; overload
  1212
  1213 225E			.local	FSINCOS						; FUNCTION
  1214
  1215 				; --- WhileProlog
  1216 225E 4C 9C 22			jmp l_01D2
  1217 2261			l_01D3
  1218
  1219 				; optimize OK (SYSTEM), line = 1909
  1220
  1221 2261 A9 DB			lda #$DB
  1222 2263 85 8A			sta :FP2MAN0
  1223 2265 A9 0F			lda #$0F
  1224 2267 85 8B			sta :FP2MAN1
  1225 2269 A9 C9			lda #$C9
  1226 226B 85 8C			sta :FP2MAN2
  1227 226D A9 40			lda #$40
  1228 226F 85 8D			sta :FP2MAN3
  1229 2271 AD B6 97			lda X
  1230 2274 85 86			sta :FP1MAN0
  1231 2276 AD B7 97			lda X+1
  1232 2279 85 87			sta :FP1MAN1
  1233 227B AD B8 97			lda X+2
  1234 227E 85 88			sta :FP1MAN2
  1235 2280 AD B9 97			lda X+3
  1236 2283 85 89			sta :FP1MAN3
  1237 2285 20 EC 14			jsr @FSUB
  1238 2288 A5 8E			lda :FPMAN0
  1239 228A 8D B6 97			sta X
  1240 228D A5 8F			lda :FPMAN1
  1241 228F 8D B7 97			sta X+1
  1242 2292 A5 90			lda :FPMAN2
  1243 2294 8D B8 97			sta X+2
  1244 2297 A5 91			lda :FPMAN3
  1245 2299 8D B9 97			sta X+3
  1246 229C			l_01D2
  1247 229C A9 DB			lda #$DB
  1248 229E 85 86			sta @FCMPL.A
  1249 22A0 A9 0F			lda #$0F
  1250 22A2 85 87			sta @FCMPL.A+1
  1251 22A4 A9 C9			lda #$C9
  1252 22A6 85 88			sta @FCMPL.A+2
  1253 22A8 A9 40			lda #$40
  1254 22AA 85 89			sta @FCMPL.A+3
  1255 22AC AD B6 97			lda X
  1256 22AF 85 8E			sta @FCMPL.B
  1257 22B1 AD B7 97			lda X+1
  1258 22B4 85 8F			sta @FCMPL.B+1
  1259 22B6 AD B8 97			lda X+2
  1260 22B9 85 90			sta @FCMPL.B+2
  1261 22BB AD B9 97			lda X+3
  1262 22BE 85 91			sta @FCMPL.B+3
  1263 22C0 20 70 17			jsr @FCMPL
  1264 22C3 30 02			smi
  1265 22C5 D0 9A			jne l_01D3
  1266
  1267 				; --- WhileProlog
  1268 22C7 4C 05 23			jmp l_01E7
  1269 22CA			l_01E8
  1270
  1271 				; optimize OK (SYSTEM), line = 1910
  1272
  1273 22CA A9 DB			lda #$DB
  1274 22CC 85 8A			sta :FP2MAN0
  1275 22CE A9 0F			lda #$0F
  1276 22D0 85 8B			sta :FP2MAN1
  1277 22D2 A9 C9			lda #$C9
  1278 22D4 85 8C			sta :FP2MAN2
  1279 22D6 A9 40			lda #$40
  1280 22D8 85 8D			sta :FP2MAN3
  1281 22DA AD B6 97			lda X
  1282 22DD 85 86			sta :FP1MAN0
  1283 22DF AD B7 97			lda X+1
  1284 22E2 85 87			sta :FP1MAN1
  1285 22E4 AD B8 97			lda X+2
  1286 22E7 85 88			sta :FP1MAN2
  1287 22E9 AD B9 97			lda X+3
  1288 22EC 85 89			sta :FP1MAN3
  1289 22EE 20 E7 14			jsr @FADD
  1290 22F1 A5 8E			lda :FPMAN0
  1291 22F3 8D B6 97			sta X
  1292 22F6 A5 8F			lda :FPMAN1
  1293 22F8 8D B7 97			sta X+1
  1294 22FB A5 90			lda :FPMAN2
  1295 22FD 8D B8 97			sta X+2
  1296 2300 A5 91			lda :FPMAN3
  1297 2302 8D B9 97			sta X+3
  1298 2305			l_01E7
  1299 2305 AD B9 97			lda X+3
  1300 2308 30 C0			jmi l_01E8
  1301
  1302 				; optimize OK (SYSTEM), line = 1913
  1303
  1304 230A A9 83			lda #$83
  1305 230C 85 8A			sta :FP2MAN0
  1306 230E A9 F9			lda #$F9
  1307 2310 85 8B			sta :FP2MAN1
  1308 2312 A9 22			lda #$22
  1309 2314 85 8C			sta :FP2MAN2
  1310 2316 A9 3F			lda #$3F
  1311 2318 85 8D			sta :FP2MAN3
  1312 231A AD B6 97			lda X
  1313 231D 85 86			sta :FP1MAN0
  1314 231F AD B7 97			lda X+1
  1315 2322 85 87			sta :FP1MAN1
  1316 2324 AD B8 97			lda X+2
  1317 2327 85 88			sta :FP1MAN2
  1318 2329 AD B9 97			lda X+3
  1319 232C 85 89			sta :FP1MAN3
  1320 232E 20 53 16			jsr @FMUL
  1321 2331 A5 8E			lda :FPMAN0
  1322 2333 8D B6 97			sta X
  1323 2336 A5 8F			lda :FPMAN1
  1324 2338 8D B7 97			sta X+1
  1325 233B A5 90			lda :FPMAN2
  1326 233D 8D B8 97			sta X+2
  1327 2340 A5 91			lda :FPMAN3
  1328 2342 8D B9 97			sta X+3
  1329
  1330 				; optimize OK (SYSTEM), line = 1916
  1331
  1332 2345 AD B6 97			lda X
  1333 2348 85 8E			sta :FPMAN0
  1334 234A AD B7 97			lda X+1
  1335 234D 85 8F			sta :FPMAN1
  1336 234F AD B8 97			lda X+2
  1337 2352 85 90			sta :FPMAN2
  1338 2354 AD B9 97			lda X+3
  1339 2357 85 91			sta :FPMAN3
  1340 2359 20 BC 17			jsr @F2I
  1341 235C A5 8E			lda :FPMAN0
  1342 235E 8D BF 97			sta I
  1343
  1344 				; optimize OK (SYSTEM), line = 1919
  1345
  1346 2361 AD B9 97			lda X+3
  1347 2364 10 03			jpl l_0216
  1348 2366 CE BF 97			dec I
  1349 2369			l_0216
  1350
  1351 				; optimize OK (SYSTEM), line = 1922
  1352
  1353 2369 A0 00			ldy #$00
  1354 236B AD BF 97			lda I
  1355 236E 10 01			spl
  1356 2370 88				dey
  1357 2371 85 8E			sta :FPMAN0
  1358 2373 84 8F			sty :FPMAN1
  1359 2375 84 90			sty :FPMAN2
  1360 2377 84 91			sty :FPMAN3
  1361 2379 20 2D 18			jsr @I2F
  1362 237C A5 8E			lda :FPMAN0
  1363 237E 85 8A			sta :FP2MAN0
  1364 2380 A5 8F			lda :FPMAN1
  1365 2382 85 8B			sta :FP2MAN1
  1366 2384 A5 90			lda :FPMAN2
  1367 2386 85 8C			sta :FP2MAN2
  1368 2388 A5 91			lda :FPMAN3
  1369 238A 85 8D			sta :FP2MAN3
  1370 238C AD B6 97			lda X
  1371 238F 85 86			sta :FP1MAN0
  1372 2391 AD B7 97			lda X+1
  1373 2394 85 87			sta :FP1MAN1
  1374 2396 AD B8 97			lda X+2
  1375 2399 85 88			sta :FP1MAN2
  1376 239B AD B9 97			lda X+3
  1377 239E 85 89			sta :FP1MAN3
  1378 23A0 20 EC 14			jsr @FSUB
  1379 23A3 A5 8E			lda :FPMAN0
  1380 23A5 8D B6 97			sta X
  1381 23A8 A5 8F			lda :FPMAN1
  1382 23AA 8D B7 97			sta X+1
  1383 23AD A5 90			lda :FPMAN2
  1384 23AF 8D B8 97			sta X+2
  1385 23B2 A5 91			lda :FPMAN3
  1386 23B4 8D B9 97			sta X+3
  1387
  1388 				; optimize OK (SYSTEM), line = 1925
  1389
  1390 23B7 AD BA 97			lda SC
  1391 23BA F0 03			jeq l_0233
  1392 23BC EE BF 97			inc I
  1393 23BF			l_0233
  1394
  1395 				; optimize OK (SYSTEM), line = 1928
  1396
  1397 23BF AD BF 97			lda I
  1398 23C2 29 01			and #$01
  1399 23C4 D0 39			jne l_0250
  1400 23C6 AD B6 97			lda X
  1401 23C9 85 8A			sta :FP2MAN0
  1402 23CB AD B7 97			lda X+1
  1403 23CE 85 8B			sta :FP2MAN1
  1404 23D0 AD B8 97			lda X+2
  1405 23D3 85 8C			sta :FP2MAN2
  1406 23D5 AD B9 97			lda X+3
  1407 23D8 85 8D			sta :FP2MAN3
  1408 23DA A9 00			lda #$00
  1409 23DC 85 86			sta :FP1MAN0
  1410 23DE 85 87			sta :FP1MAN1
  1411 23E0 A9 80			lda #$80
  1412 23E2 85 88			sta :FP1MAN2
  1413 23E4 A9 3F			lda #$3F
  1414 23E6 85 89			sta :FP1MAN3
  1415 23E8 20 EC 14			jsr @FSUB
  1416 23EB A5 8E			lda :FPMAN0
  1417 23ED 8D B6 97			sta X
  1418 23F0 A5 8F			lda :FPMAN1
  1419 23F2 8D B7 97			sta X+1
  1420 23F5 A5 90			lda :FPMAN2
  1421 23F7 8D B8 97			sta X+2
  1422 23FA A5 91			lda :FPMAN3
  1423 23FC 8D B9 97			sta X+3
  1424 23FF			l_0250
  1425
  1426 				; optimize OK (SYSTEM), line = 1931
  1427
  1428 23FF AD B6 97			lda X
  1429 2402 85 8A			sta :FP2MAN0
  1430 2404 AD B7 97			lda X+1
  1431 2407 85 8B			sta :FP2MAN1
  1432 2409 AD B8 97			lda X+2
  1433 240C 85 8C			sta :FP2MAN2
  1434 240E AD B9 97			lda X+3
  1435 2411 85 8D			sta :FP2MAN3
  1436 2413 AD B6 97			lda X
  1437 2416 85 86			sta :FP1MAN0
  1438 2418 AD B7 97			lda X+1
  1439 241B 85 87			sta :FP1MAN1
  1440 241D AD B8 97			lda X+2
  1441 2420 85 88			sta :FP1MAN2
  1442 2422 AD B9 97			lda X+3
  1443 2425 85 89			sta :FP1MAN3
  1444 2427 20 53 16			jsr @FMUL
  1445 242A A5 8E			lda :FPMAN0
  1446 242C 8D B6 97			sta X
  1447 242F A5 8F			lda :FPMAN1
  1448 2431 8D B7 97			sta X+1
  1449 2434 A5 90			lda :FPMAN2
  1450 2436 8D B8 97			sta X+2
  1451 2439 A5 91			lda :FPMAN3
  1452 243B 8D B9 97			sta X+3
  1453
  1454 				; optimize OK (SYSTEM), line = 1932
  1455
  1456 243E A9 42			lda #$42
  1457 2440 85 8A			sta :FP2MAN0
  1458 2442 A9 01			lda #$01
  1459 2444 85 8B			sta :FP2MAN1
  1460 2446 A9 5E			lda #$5E
  1461 2448 85 8C			sta :FP2MAN2
  1462 244A A9 3A			lda #$3A
  1463 244C 85 8D			sta :FP2MAN3
  1464 244E AD B6 97			lda X
  1465 2451 85 86			sta :FP1MAN0
  1466 2453 AD B7 97			lda X+1
  1467 2456 85 87			sta :FP1MAN1
  1468 2458 AD B8 97			lda X+2
  1469 245B 85 88			sta :FP1MAN2
  1470 245D AD B9 97			lda X+3
  1471 2460 85 89			sta :FP1MAN3
  1472 2462 20 53 16			jsr @FMUL
  1473 2465 A5 8E			lda :FPMAN0
  1474 2467 85 8A			sta :FP2MAN0
  1475 2469 A5 8F			lda :FPMAN1
  1476 246B 85 8B			sta :FP2MAN1
  1477 246D A5 90			lda :FPMAN2
  1478 246F 85 8C			sta :FP2MAN2
  1479 2471 A5 91			lda :FPMAN3
  1480 2473 85 8D			sta :FP2MAN3
  1481 2475 A9 D3			lda #$D3
  1482 2477 85 86			sta :FP1MAN0
  1483 2479 A9 59			lda #$59
  1484 247B 85 87			sta :FP1MAN1
  1485 247D A9 A3			lda #$A3
  1486 247F 85 88			sta :FP1MAN2
  1487 2481 A9 3C			lda #$3C
  1488 2483 85 89			sta :FP1MAN3
  1489 2485 20 EC 14			jsr @FSUB
  1490 2488 A5 8E			lda :FPMAN0
  1491 248A 85 86			sta :FP1MAN0
  1492 248C A5 8F			lda :FPMAN1
  1493 248E 85 87			sta :FP1MAN1
  1494 2490 A5 90			lda :FPMAN2
  1495 2492 85 88			sta :FP1MAN2
  1496 2494 A5 91			lda :FPMAN3
  1497 2496 85 89			sta :FP1MAN3
  1498 2498 AD B6 97			lda X
  1499 249B 85 8A			sta :FP2MAN0
  1500 249D AD B7 97			lda X+1
  1501 24A0 85 8B			sta :FP2MAN1
  1502 24A2 AD B8 97			lda X+2
  1503 24A5 85 8C			sta :FP2MAN2
  1504 24A7 AD B9 97			lda X+3
  1505 24AA 85 8D			sta :FP2MAN3
  1506 24AC 20 53 16			jsr @FMUL
  1507 24AF A5 8E			lda :FPMAN0
  1508 24B1 85 86			sta :FP1MAN0
  1509 24B3 A5 8F			lda :FPMAN1
  1510 24B5 85 87			sta :FP1MAN1
  1511 24B7 A5 90			lda :FPMAN2
  1512 24B9 85 88			sta :FP1MAN2
  1513 24BB A5 91			lda :FPMAN3
  1514 24BD 85 89			sta :FP1MAN3
  1515 24BF A9 DE			lda #$DE
  1516 24C1 85 8A			sta :FP2MAN0
  1517 24C3 A9 4D			lda #$4D
  1518 24C5 85 8B			sta :FP2MAN1
  1519 24C7 A9 6F			lda #$6F
  1520 24C9 85 8C			sta :FP2MAN2
  1521 24CB A9 3E			lda #$3E
  1522 24CD 85 8D			sta :FP2MAN3
  1523 24CF 20 EC 14			jsr @FSUB
  1524 24D2 A5 8E			lda :FPMAN0
  1525 24D4 85 86			sta :FP1MAN0
  1526 24D6 A5 8F			lda :FPMAN1
  1527 24D8 85 87			sta :FP1MAN1
  1528 24DA A5 90			lda :FPMAN2
  1529 24DC 85 88			sta :FP1MAN2
  1530 24DE A5 91			lda :FPMAN3
  1531 24E0 85 89			sta :FP1MAN3
  1532 24E2 AD B6 97			lda X
  1533 24E5 85 8A			sta :FP2MAN0
  1534 24E7 AD B7 97			lda X+1
  1535 24EA 85 8B			sta :FP2MAN1
  1536 24EC AD B8 97			lda X+2
  1537 24EF 85 8C			sta :FP2MAN2
  1538 24F1 AD B9 97			lda X+3
  1539 24F4 85 8D			sta :FP2MAN3
  1540 24F6 20 53 16			jsr @FMUL
  1541 24F9 A5 8E			lda :FPMAN0
  1542 24FB 85 86			sta :FP1MAN0
  1543 24FD A5 8F			lda :FPMAN1
  1544 24FF 85 87			sta :FP1MAN1
  1545 2501 A5 90			lda :FPMAN2
  1546 2503 85 88			sta :FP1MAN2
  1547 2505 A5 91			lda :FPMAN3
  1548 2507 85 89			sta :FP1MAN3
  1549 2509 A9 00			lda #$00
  1550 250B 85 8A			sta :FP2MAN0
  1551 250D 85 8B			sta :FP2MAN1
  1552 250F A9 80			lda #$80
  1553 2511 85 8C			sta :FP2MAN2
  1554 2513 A9 3F			lda #$3F
  1555 2515 85 8D			sta :FP2MAN3
  1556 2517 20 E7 14			jsr @FADD
  1557 251A A5 8E			lda :FPMAN0
  1558 251C 85 9F			sta :STACKORIGIN+9
  1559 251E A5 8F			lda :FPMAN1
  1560 2520 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1561 2522 A5 90			lda :FPMAN2
  1562 2524 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1563 2526 A5 91			lda :FPMAN3
  1564 2528 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1565 252A AD B6 97			lda X
  1566 252D 85 8A			sta :FP2MAN0
  1567 252F AD B7 97			lda X+1
  1568 2532 85 8B			sta :FP2MAN1
  1569 2534 AD B8 97			lda X+2
  1570 2537 85 8C			sta :FP2MAN2
  1571 2539 AD B9 97			lda X+3
  1572 253C 85 8D			sta :FP2MAN3
  1573 253E A9 00			lda #$00
  1574 2540 85 86			sta :FP1MAN0
  1575 2542 85 87			sta :FP1MAN1
  1576 2544 A9 80			lda #$80
  1577 2546 85 88			sta :FP1MAN2
  1578 2548 A9 3F			lda #$3F
  1579 254A 85 89			sta :FP1MAN3
  1580 254C 20 EC 14			jsr @FSUB
  1581 254F A5 8E			lda :FPMAN0
  1582 2551 85 8A			sta :FP2MAN0
  1583 2553 A5 8F			lda :FPMAN1
  1584 2555 85 8B			sta :FP2MAN1
  1585 2557 A5 90			lda :FPMAN2
  1586 2559 85 8C			sta :FP2MAN2
  1587 255B A5 91			lda :FPMAN3
  1588 255D 85 8D			sta :FP2MAN3
  1589 255F A5 9F			lda :STACKORIGIN+9
  1590 2561 85 86			sta :FP1MAN0
  1591 2563 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1592 2565 85 87			sta :FP1MAN1
  1593 2567 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1594 2569 85 88			sta :FP1MAN2
  1595 256B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1596 256D 85 89			sta :FP1MAN3
  1597 256F 20 53 16			jsr @FMUL
  1598 2572 A5 8E			lda :FPMAN0
  1599 2574 8D BB 97			sta RESULT
  1600 2577 A5 8F			lda :FPMAN1
  1601 2579 8D BC 97			sta RESULT+1
  1602 257C A5 90			lda :FPMAN2
  1603 257E 8D BD 97			sta RESULT+2
  1604 2581 A5 91			lda :FPMAN3
  1605 2583 8D BE 97			sta RESULT+3
  1606
  1607 				; optimize OK (SYSTEM), line = 1935
  1608
  1609 2586 AD BF 97			lda I
  1610 2589 29 02			and #$02
  1611 258B C9 02			cmp #$02
  1612 258D D0 08			jne l_029D
  1613 258F AD BE 97			lda RESULT+3
  1614 2592 49 80			eor #$80
  1615 2594 8D BE 97			sta RESULT+3
  1616 2597			l_029D
  1617 2597			@exit
  1618
  1619 				; ------------------------------------------------------------
  1620
  1621 = 97B6			X	= DATAORIGIN+$002A
  1622 = 97BA			SC	= DATAORIGIN+$002E
  1623 = 97BB			RESULT	= DATAORIGIN+$002F
  1624 = 97BF			I	= DATAORIGIN+$0033
  1625
  1626 = 97B6			@VarData	= X
  1627 = 0006			@VarDataSize	= 6
  1628
  1629 2597 60				rts						; ret
  1630 				.endl
  1631
  1632 2598			.local	SIN						; FUNCTION | OVERLOAD
  1633 2598			.local	@01018F000
  1634
  1635 				; optimize OK (SYSTEM), line = 1949
  1636
  1637 2598 AD C0 97			lda X
  1638 259B 8D B6 97			sta FSINCOS.X
  1639 259E AD C1 97			lda X+1
  1640 25A1 8D B7 97			sta FSINCOS.X+1
  1641 25A4 AD C2 97			lda X+2
  1642 25A7 8D B8 97			sta FSINCOS.X+2
  1643 25AA AD C3 97			lda X+3
  1644 25AD 8D B9 97			sta FSINCOS.X+3
  1645 25B0 A9 00			lda #$00
  1646 25B2 8D BA 97			sta FSINCOS.SC
  1647 25B5 20 5E 22			jsr FSINCOS
  1648 25B8 AD BB 97			lda FSINCOS.RESULT
  1649 25BB 8D C4 97			sta RESULT
  1650 25BE AD BC 97			lda FSINCOS.RESULT+1
  1651 25C1 8D C5 97			sta RESULT+1
  1652 25C4 AD BD 97			lda FSINCOS.RESULT+2
  1653 25C7 8D C6 97			sta RESULT+2
  1654 25CA AD BE 97			lda FSINCOS.RESULT+3
  1655 25CD 8D C7 97			sta RESULT+3
  1656 25D0			@exit
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 = 97C0			X	= DATAORIGIN+$0034
  1661 = 97C4			RESULT	= DATAORIGIN+$0038
  1662
  1663 = 97C0			@VarData	= X
  1664 = 0004			@VarDataSize	= 4
  1665
  1666 25D0 60				rts						; ret
  1667 				.endl
  1668 				.endl							; overload
  1669
  1670 25D1			.local	COS						; FUNCTION | OVERLOAD
  1671 25D1			.local	@01018F000
  1672
  1673 				; optimize OK (SYSTEM), line = 1963
  1674
  1675 25D1 AD C8 97			lda X
  1676 25D4 8D B6 97			sta FSINCOS.X
  1677 25D7 AD C9 97			lda X+1
  1678 25DA 8D B7 97			sta FSINCOS.X+1
  1679 25DD AD CA 97			lda X+2
  1680 25E0 8D B8 97			sta FSINCOS.X+2
  1681 25E3 AD CB 97			lda X+3
  1682 25E6 8D B9 97			sta FSINCOS.X+3
  1683 25E9 A9 01			lda #$01
  1684 25EB 8D BA 97			sta FSINCOS.SC
  1685 25EE 20 5E 22			jsr FSINCOS
  1686 25F1 AD BB 97			lda FSINCOS.RESULT
  1687 25F4 8D CC 97			sta RESULT
  1688 25F7 AD BC 97			lda FSINCOS.RESULT+1
  1689 25FA 8D CD 97			sta RESULT+1
  1690 25FD AD BD 97			lda FSINCOS.RESULT+2
  1691 2600 8D CE 97			sta RESULT+2
  1692 2603 AD BE 97			lda FSINCOS.RESULT+3
  1693 2606 8D CF 97			sta RESULT+3
  1694 2609			@exit
  1695
  1696 				; ------------------------------------------------------------
  1697
  1698 = 97C8			X	= DATAORIGIN+$003C
  1699 = 97CC			RESULT	= DATAORIGIN+$0040
  1700
  1701 = 97C8			@VarData	= X
  1702 = 0004			@VarDataSize	= 4
  1703
  1704 2609 60				rts						; ret
  1705 				.endl
  1706 				.endl							; overload
  1707
  1708 260A			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1709 260A			.local	@00
  1710
  1711 				; -------------------  ASM Block 00000043  -------------------
  1712
  1713 260A 2C 0B D4			bit VCOUNT
  1714 260D 30 FB			bmi *-3
  1715 260F 2C 0B D4			bit VCOUNT
  1716 2612 10 FB			bpl *-3
  1717
  1718 2614			@exit
  1719 					.ifdef @new
  1720 					lda <@VarData
  1721 					sta :ztmp
  1722 					lda >@VarData
  1723 					ldy #@VarDataSize-1
  1724 					jmp @FreeMem
  1725 					els
  1726 2614 60				rts						; ret
  1727 					eif
  1728 				.endl
  1729 				.endl							; overload
  1730
  1731 2615			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1732
  1733 				; -------------------  ASM Block 00000045  -------------------
  1734
  1735
  1736 2615 AD 0A D2 8D 95 97	  mva $d20a RndSeed
  1737 261B A9 00 8D 96 97	  mva #$00  RndSeed+1
  1738
  1739
  1740 2620			@exit
  1741 					.ifdef @new
  1742 					lda <@VarData
  1743 					sta :ztmp
  1744 					lda >@VarData
  1745 					ldy #@VarDataSize-1
  1746 					jmp @FreeMem
  1747 					els
  1748 2620 60				rts						; ret
  1749 					eif
  1750 				.endl
  1751
  1752 2621			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1753 2621			.local	@010180000
  1754 2621 8D D0 97			sta RANGE
  1755
  1756 				; -------------------  ASM Block 00000049  -------------------
  1757
  1758
  1759 				;BYTE FUNC Rand(BYTE range)
  1760 				; returns random number between 0 and
  1761 				; range-1.  If range=0, then a random
  1762 				; number between 0 and 255 is returned
  1763
  1764 2624 AC 0A D2		  ldy $d20a   ; RANDOM
  1765
  1766 2627 AD D0 97		  lda range
  1767 262A F0 08		  beq stop
  1768
  1769 262C 85 8E		  sta :ecx
  1770 262E 84 86		  sty :eax
  1771
  1772 2630 20 0C 13		  jsr imulCL
  1773 2633 A8			  tay
  1774
  1775 2634 8C D1 97		stop  sty Result
  1776
  1777
  1778 2637			@exit
  1779
  1780 				; ------------------------------------------------------------
  1781
  1782 = 97D0			RANGE	= DATAORIGIN+$0044
  1783 = 97D1			RESULT	= DATAORIGIN+$0045
  1784
  1785 = 97D0			@VarData	= RANGE
  1786 = 0001			@VarDataSize	= 1
  1787
  1788 2637 60				rts						; ret
  1789 				.endl
  1790 				.endl							; overload
  1791
  1792 2638			.local	RANDOM						; FUNCTION | OVERLOAD
  1793 2638			.local	@010184000
  1794
  1795 				; optimize OK (system_atari.inc), line = 179
  1796
  1797 2638 AD D3 97			lda RANGE+1
  1798 263B 0D D2 97			ora RANGE
  1799 263E D0 0B			jne l_02DD
  1800
  1801 				; optimize OK (system_atari.inc), line = 180
  1802
  1803 2640 A9 00			lda #$00
  1804 2642 8D D4 97			sta RESULT
  1805 2645 8D D5 97			sta RESULT+1
  1806 2648 4C AD 26			jmp l_02EB
  1807 264B			l_02DD
  1808
  1809 				; optimize OK (system_atari.inc), line = 183
  1810
  1811 264B AD 95 97			lda RNDSEED
  1812 264E 85 8E			sta :ecx
  1813 2650 AD 96 97			lda RNDSEED+1
  1814 2653 85 8F			sta :ecx+1
  1815 2655 A9 95			lda #$95
  1816 2657 85 86			sta :eax
  1817 2659 A9 45			lda #$45
  1818 265B 85 87			sta :eax+1
  1819 					.ifdef fmulinit
  1820 					fmulu_16
  1821 					els
  1822 265D 20 58 13			imulCX
  1823 					eif
  1824 2660 A5 86			lda :eax
  1825 2662 8D 95 97			sta RNDSEED
  1826 2665 A5 87			lda :eax+1
  1827 2667 8D 96 97			sta RNDSEED+1
  1828
  1829 				; optimize OK (system_atari.inc), line = 184
  1830
  1831 266A AD D2 97			lda RANGE
  1832 266D 85 8E			sta @SMALLINT.MOD.B
  1833 266F AD D3 97			lda RANGE+1
  1834 2672 85 8F			sta @SMALLINT.MOD.B+1
  1835 2674 AD 95 97			lda RNDSEED
  1836 2677 85 86			sta @SMALLINT.MOD.A
  1837 2679 AD 96 97			lda RNDSEED+1
  1838 267C 85 87			sta @SMALLINT.MOD.A+1
  1839 267E 20 9D 12			jsr @SMALLINT.MOD
  1840 2681 A5 92			lda @SMALLINT.MOD.RESULT
  1841 2683 8D D4 97			sta RESULT
  1842 2686 A5 93			lda @SMALLINT.MOD.RESULT+1
  1843 2688 8D D5 97			sta RESULT+1
  1844
  1845 				; -------------------  ASM Block 00000050  -------------------
  1846
  1847 268B AD D3 97			lda range+1
  1848 268E 10 07			bpl plus
  1849
  1850 2690 AD D5 97			lda Result+1
  1851 2693 30 18			bmi ok
  1852 2695 10 05			bpl sign
  1853
  1854 2697 AD D5 97		plus	lda Result+1
  1855 269A 10 11			bpl ok
  1856
  1857 269C A9 00		sign 	lda #0
  1858 269E 38 ED D4 97			sub Result
  1859 26A2 8D D4 97			sta Result
  1860
  1861 26A5 A9 00			lda #0
  1862 26A7 ED D5 97			sbc Result+1
  1863 26AA 8D D5 97			sta Result+1
  1864 26AD			ok
  1865
  1866 26AD			l_02EB
  1867 26AD			@exit
  1868
  1869 				; ------------------------------------------------------------
  1870
  1871 = 97D2			RANGE	= DATAORIGIN+$0046
  1872 = 97D4			RESULT	= DATAORIGIN+$0048
  1873
  1874 = 97D2			@VarData	= RANGE
  1875 = 0002			@VarDataSize	= 2
  1876
  1877 26AD 60				rts						; ret
  1878 				.endl
  1879 				.endl							; overload
  1880
  1881 				; ------------------------------------------------------------
  1882 				; ------------------------------------------------------------
  1883 26AE			@UnitInit
  1884
  1885 				; -------------------  ASM Block 00000060  -------------------
  1886
  1887 					.ifdef @CmdLine
  1888
  1889 					ldx #$0F
  1890 					mva:rpl $340,x IOCB@COPY,x-
  1891 					rts
  1892
  1893 				IOCB@COPY	:16 brk
  1894 					eif
  1895
  1896
  1897 26AE 60				rts
  1898
  1899 				; ------------------------------------------------------------
  1900
  1901 = 0648			M_PI_2	= $0648
  1902 = 0192			D_PI_2	= $0192
  1903 = 0004			D_PI_180	= $04
  1904 = 0101			__PORTB_BANKS	= $0101
  1905 = 0000			MGTIA	= $00
  1906 = 0080			MVBXE	= $80
  1907 = 0000			VBXE_XDLADR	= $00
  1908 = 00E0			VBXE_BCBTMP	= $E0
  1909 = 0100			VBXE_BCBADR	= $0100
  1910 = 1000			VBXE_MAPADR	= $1000
  1911 = 1000			VBXE_CHBASE	= $1000
  1912 = 5000			VBXE_OVRADR	= $5000
  1913 = B000			VBXE_WINDOW	= $B000
  1914 = 0000			IDLI	= $00
  1915 = 0001			IVBL	= $01
  1916 = 0001			IVBLD	= $01
  1917 = 0002			IVBLI	= $02
  1918 = 0003			ITIM1	= $03
  1919 = 0004			ITIM2	= $04
  1920 = 0005			ITIM4	= $05
  1921 = 00FE			CH_DELCHR	= $FE
  1922 = 009B			CH_ENTER	= $9B
  1923 = 001B			CH_ESC	= $1B
  1924 = 001C			CH_CURS_UP	= $1C
  1925 = 001D			CH_CURS_DOWN	= $1D
  1926 = 001E			CH_CURS_LEFT	= $1E
  1927 = 001F			CH_CURS_RIGHT	= $1F
  1928 = 007F			CH_TAB	= $7F
  1929 = 009B			CH_EOL	= $9B
  1930 = 007D			CH_CLR	= $7D
  1931 = 00FD			CH_BELL	= $FD
  1932 = 007E			CH_DEL	= $7E
  1933 = 009C			CH_DELLINE	= $9C
  1934 = 009D			CH_INSLINE	= $9D
  1935 = 0000			PAL_PMCOLOR0	= $00
  1936 = 0001			PAL_PMCOLOR1	= $01
  1937 = 0002			PAL_PMCOLOR2	= $02
  1938 = 0003			PAL_PMCOLOR3	= $03
  1939 = 0004			PAL_COLOR0	= $04
  1940 = 0005			PAL_COLOR1	= $05
  1941 = 0006			PAL_COLOR2	= $06
  1942 = 0007			PAL_COLOR3	= $07
  1943 = 0008			PAL_COLBAK	= $08
  1944 = 0000			COLOR_BLACK	= $00
  1945 = 000E			COLOR_WHITE	= $0E
  1946 = 0032			COLOR_RED	= $32
  1947 = 0096			COLOR_CYAN	= $96
  1948 = 0068			COLOR_VIOLET	= $68
  1949 = 00C4			COLOR_GREEN	= $C4
  1950 = 0074			COLOR_BLUE	= $74
  1951 = 00EE			COLOR_YELLOW	= $EE
  1952 = 0028			COLOR_ORANGE	= $28
  1953 = 00E4			COLOR_BROWN	= $E4
  1954 = 003C			COLOR_LIGHTRED	= $3C
  1955 = 0004			COLOR_GRAY1	= $04
  1956 = 0006			COLOR_GRAY2	= $06
  1957 = 000A			COLOR_GRAY3	= $0A
  1958 = 00CC			COLOR_LIGHTGREEN	= $CC
  1959 = 007C			COLOR_LIGHTBLUE	= $7C
  1960 = 0004			FMOPENREAD	= $04
  1961 = 0008			FMOPENWRITE	= $08
  1962 = 0009			FMOPENAPPEND	= $09
  1963 = 000C			FMOPENREADWRITE	= $0C
  1964 = 978C			DATESEPARATOR	= DATAORIGIN+$0000
  1965 = D20A			RND	= $D20A
  1966 = 02C0			adr.PALETTE	= $02C0
  1967 26AF			.var PALETTE	= adr.PALETTE .word
  1968 = D012			adr.HPALETTE	= $D012
  1969 26AF			.var HPALETTE	= adr.HPALETTE .word
  1970 = 978D			FILEMODE	= DATAORIGIN+$0001
  1971 = 978E			GRAPHMODE	= DATAORIGIN+$0002
  1972 = 978F			IORESULT	= DATAORIGIN+$0003
  1973 = 9790			EOLN	= DATAORIGIN+$0004
  1974 = 9791			SCREENWIDTH	= DATAORIGIN+$0005
  1975 = 9793			SCREENHEIGHT	= DATAORIGIN+$0007
  1976 = 0000			adr.MEM	= $00
  1977 26AF			.var MEM	= adr.MEM .word
  1978 = 9795			RNDSEED	= DATAORIGIN+$0009
  1979
  1980 = 26AF C0 02		PALETTE
  1980 = 26B1 12 D0		HPALETTE
  1980 = 26B3 00 00		MEM
  1980 				.endl							; UNIT SYSTEM
  1981
  1982 				; ------------------------------------------------------------
  1983
  1984 26B5			.local	ATARI						; UNIT
  1985
  1986 				; ------------------------------------------------------------
  1987
  1988 = 0000			DL_BLANK1	= $00
  1989 = 0010			DL_BLANK2	= $10
  1990 = 0020			DL_BLANK3	= $20
  1991 = 0030			DL_BLANK4	= $30
  1992 = 0040			DL_BLANK5	= $40
  1993 = 0050			DL_BLANK6	= $50
  1994 = 0060			DL_BLANK7	= $60
  1995 = 0070			DL_BLANK8	= $70
  1996 = 0080			DL_DLI	= $80
  1997 = 0040			DL_LMS	= $40
  1998 = 0020			DL_VSCROLL	= $20
  1999 = 0010			DL_HSCROLL	= $10
  2000 = 0001			DL_JMP	= $01
  2001 = 0041			DL_JVB	= $41
  2002 = 0002			DL_MODE_2	= $02
  2003 = 0003			DL_MODE_3	= $03
  2004 = 0004			DL_MODE_4	= $04
  2005 = 0005			DL_MODE_5	= $05
  2006 = 000E			DL_MODE_E	= $0E
  2007 = 000F			DL_MODE_F	= $0F
  2008 = 0010			IRQENS	= $10
  2009 = 0012			RTCLOK	= $12
  2010 = 0012			RTCLOK1	= $12
  2011 = 0013			RTCLOK2	= $13
  2012 = 0014			RTCLOK3	= $14
  2013 = 004D			ATRACT	= $4D
  2014 = 0052			LMARGIN	= $52
  2015 = 0053			RMARGIN	= $53
  2016 = 0054			ROWCRS	= $54
  2017 = 0055			COLCRS	= $55
  2018 = 0057			DINDEX	= $57
  2019 = 0058			SAVMSC	= $58
  2020 = 0062			PALNTS	= $62
  2021 = 006A			RAMTOP	= $6A
  2022 = 0200			VDSLST	= $0200
  2023 = 0230			SDLSTL	= $0230
  2024 = 0290			TXTROW	= $0290
  2025 = 0291			TXTCOL	= $0291
  2026 = 0293			TINDEX	= $0293
  2027 = 0294			TXTMSC	= $0294
  2028 = 022F			SDMCTL	= $022F
  2029 = 026F			GPRIOR	= $026F
  2030 = 02F0			CRSINH	= $02F0
  2031 = 02F3			CHACT	= $02F3
  2032 = 02F4			CHBAS	= $02F4
  2033 = 02FC			CH	= $02FC
  2034 = 02FD			FILDAT	= $02FD
  2035 = 02C0			PCOLR0	= $02C0
  2036 = 02C1			PCOLR1	= $02C1
  2037 = 02C2			PCOLR2	= $02C2
  2038 = 02C3			PCOLR3	= $02C3
  2039 = 02C4			COLOR0	= $02C4
  2040 = 02C5			COLOR1	= $02C5
  2041 = 02C6			COLOR2	= $02C6
  2042 = 02C7			COLOR3	= $02C7
  2043 = 02C8			COLOR4	= $02C8
  2044 = 02C8			COLBAKS	= $02C8
  2045 = D000			HPOSP0	= $D000
  2046 = D001			HPOSP1	= $D001
  2047 = D002			HPOSP2	= $D002
  2048 = D003			HPOSP3	= $D003
  2049 = D004			HPOSM0	= $D004
  2050 = D005			HPOSM1	= $D005
  2051 = D006			HPOSM2	= $D006
  2052 = D007			HPOSM3	= $D007
  2053 = D008			SIZEP0	= $D008
  2054 = D009			SIZEP1	= $D009
  2055 = D00A			SIZEP2	= $D00A
  2056 = D00B			SIZEP3	= $D00B
  2057 = D00C			SIZEM	= $D00C
  2058 = D00D			GRAFP0	= $D00D
  2059 = D00E			GRAFP1	= $D00E
  2060 = D00F			GRAFP2	= $D00F
  2061 = D010			GRAFP3	= $D010
  2062 = D011			GRAFM	= $D011
  2063 = D004			P0PF	= $D004
  2064 = D014			PAL	= $D014
  2065 = D013			TRIG3	= $D013
  2066 = D012			COLPM0	= $D012
  2067 = D013			COLPM1	= $D013
  2068 = D014			COLPM2	= $D014
  2069 = D015			COLPM3	= $D015
  2070 = D016			COLPF0	= $D016
  2071 = D017			COLPF1	= $D017
  2072 = D018			COLPF2	= $D018
  2073 = D019			COLPF3	= $D019
  2074 = D01A			COLBAK	= $D01A
  2075 = D01A			COLBK	= $D01A
  2076 = D01B			PRIOR	= $D01B
  2077 = D01D			GRACTL	= $D01D
  2078 = D01D			PMCNTL	= $D01D
  2079 = D01E			HITCLR	= $D01E
  2080 = D01F			CONSOL	= $D01F
  2081 = D200			AUDF1	= $D200
  2082 = D201			AUDC1	= $D201
  2083 = D202			AUDF2	= $D202
  2084 = D203			AUDC2	= $D203
  2085 = D204			AUDF3	= $D204
  2086 = D205			AUDC3	= $D205
  2087 = D206			AUDF4	= $D206
  2088 = D207			AUDC4	= $D207
  2089 = D208			AUDCTL	= $D208
  2090 = D209			KBCODE	= $D209
  2091 = D20E			IRQEN	= $D20E
  2092 = D20F			SKSTAT	= $D20F
  2093 = D300			PORTA	= $D300
  2094 = D301			PORTB	= $D301
  2095 = D302			PACTL	= $D302
  2096 = D400			DMACTL	= $D400
  2097 = D401			CHACTL	= $D401
  2098 = D402			DLISTL	= $D402
  2099 = D404			HSCROL	= $D404
  2100 = D405			VSCROL	= $D405
  2101 = D407			PMBASE	= $D407
  2102 = D409			CHBASE	= $D409
  2103 = D40A			WSYNC	= $D40A
  2104 = D40B			VCOUNT	= $D40B
  2105 = D40C			PENH	= $D40C
  2106 = D40D			PENV	= $D40D
  2107 = D40E			NMIEN	= $D40E
  2108 = FFFA			NMIVEC	= $FFFA
  2109 = FFFC			RESETVEC	= $FFFC
  2110 = FFFE			IRQVEC	= $FFFE
  2111
  2112 				.endl							; UNIT ATARI
  2113
  2114 				; ------------------------------------------------------------
  2115
  2116 26B5			.local	CRT						; UNIT
  2117
  2118 				; ------------------------------------------------------------
  2119
  2120 = 97D6			TEXTATTR	= DATAORIGIN+$004A
  2121 = D01F			CONSOL	= $D01F
  2122 = 0000			CN_START_SELECT_OPTION	= $00
  2123 = 0001			CN_SELECT_OPTION	= $01
  2124 = 0002			CN_START_OPTION	= $02
  2125 = 0003			CN_OPTION	= $03
  2126 = 0004			CN_START_SELECT	= $04
  2127 = 0005			CN_SELECT	= $05
  2128 = 0006			CN_START	= $06
  2129 = 0007			CN_NONE	= $07
  2130 = 0000			BLACK	= $00
  2131 = 000F			WHITE	= $0F
  2132 = 0026			RED	= $26
  2133 = 00AC			CYAN	= $AC
  2134 = 0048			PURPLE	= $48
  2135 = 00B6			GREEN	= $B6
  2136 = 0086			BLUE	= $86
  2137 = 00DC			YELLOW	= $DC
  2138 = 0018			ORANGE	= $18
  2139 = 00F4			BROWN	= $F4
  2140 = 002A			LIGHT_RED	= $2A
  2141 = 0004			DARK_GREY	= $04
  2142 = 0008			GREY	= $08
  2143 = 00BC			LIGHT_GREEN	= $BC
  2144 = 009A			LIGHT_BLUE	= $9A
  2145 = 000C			LIGHT_GREY	= $0C
  2146 = 0000			BW40	= $00
  2147 = 0001			CO40	= $01
  2148 = 0002			BW80	= $02
  2149 = 0003			CO80	= $03
  2150 = 0007			MONO	= $07
  2151 = 0001			C40	= $01
  2152 = 0003			C80	= $03
  2153 = 0080			BLINK	= $80
  2154
  2155 				.endl							; UNIT CRT
  2156
  2157 				; ------------------------------------------------------------
  2158
  2159 26B5			.local	TYPES						; UNIT
  2160
  2161 				; ------------------------------------------------------------
  2162
  2163 				.endl							; UNIT TYPES
  2164
  2165 				; ------------------------------------------------------------
  2166
  2167 26B5			.local	GRAPH						; UNIT
  2168
  2169 				; ------------------------------------------------------------
  2170
  2171 = 0080			CURRENTDRIVER	= $80
  2172 = 0000			DETECT	= $00
  2173 = 0001			CGA	= $01
  2174 = 0002			MCGA	= $02
  2175 = 0003			EGA	= $03
  2176 = 0004			EGA64	= $04
  2177 = 0005			EGAMONO	= $05
  2178 = 0006			LOWRES	= $06
  2179 = 0007			HERCMONO	= $07
  2180 = 0009			VGA	= $09
  2181 = 000A			VESA	= $0A
  2182 = 000B			D1BIT	= $0B
  2183 = 000C			D2BIT	= $0C
  2184 = 000D			D4BIT	= $0D
  2185 = 000E			D6BIT	= $0E
  2186 = 000F			D8BIT	= $0F
  2187 = 0010			D12BIT	= $10
  2188 = 0018			M640X400	= $18
  2189 = 0018			M640X480	= $18
  2190 = 0001			GROK	= $01
  2191 = 00FF			GRNOINITGRAPH	= $FF
  2192 = 00FE			GRNOTDETECTED	= $FE
  2193 = 00FD			GRFILENOTFOUND	= $FD
  2194 = 00FC			GRINVALIDDRIVER	= $FC
  2195 = 00FB			GRNOLOADMEM	= $FB
  2196 = 00FA			GRNOSCANMEM	= $FA
  2197 = 00F9			GRNOFLOODMEM	= $F9
  2198 = 00F8			GRFONTNOTFOUND	= $F8
  2199 = 00F7			GRNOFONTMEM	= $F7
  2200 = 00F6			GRINVALIDMODE	= $F6
  2201 = 00F5			GRERROR	= $F5
  2202 = 00F4			GRIOERROR	= $F4
  2203 = 00F3			GRINVALIDFONT	= $F3
  2204 = 00F2			GRINVALIDFONTNUM	= $F2
  2205 = 00EE			GRINVALIDVERSION	= $EE
  2206 = 0000			CGAC0	= $00
  2207 = 0001			CGAC1	= $01
  2208 = 0002			CGAC2	= $02
  2209 = 0003			CGAC3	= $03
  2210 = 0004			CGAHI	= $04
  2211 = 0000			MCGAC0	= $00
  2212 = 0001			MCGAC1	= $01
  2213 = 0002			MCGAC2	= $02
  2214 = 0003			MCGAC3	= $03
  2215 = 0004			MCGAMED	= $04
  2216 = 0005			MCGAHI	= $05
  2217 = 0000			EGALO	= $00
  2218 = 0001			EGAHI	= $01
  2219 = 0000			EGA64LO	= $00
  2220 = 0001			EGA64HI	= $01
  2221 = 0003			EGAMONOHI	= $03
  2222 = 000A			VGALO	= $0A
  2223 = 001F			VGAMED	= $1F
  2224 = 0018			VGAHI	= $18
  2225 = 97D7			GRAPHRESULT	= DATAORIGIN+$004B
  2226 = 97D8			GETCOLOR	= DATAORIGIN+$004C
  2227 = 97D9			VIDEORAM	= DATAORIGIN+$004D
  2228 = 97DB			adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
  2229 26B5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  2230 = 97DB			LASTARCCOORDS.X	= DATAORIGIN+$004F
  2231 = 97DD			LASTARCCOORDS.Y	= DATAORIGIN+$0051
  2232 = 97DF			LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
  2233 = 97E1			LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
  2234 = 97E3			LASTARCCOORDS.XEND	= DATAORIGIN+$0057
  2235 = 97E5			LASTARCCOORDS.YEND	= DATAORIGIN+$0059
  2236 = 97E7			WIN_LEFT	= DATAORIGIN+$005B
  2237 = 97E9			WIN_RIGHT	= DATAORIGIN+$005D
  2238 = 97EB			WIN_TOP	= DATAORIGIN+$005F
  2239 = 97ED			WIN_BOTTOM	= DATAORIGIN+$0061
  2240 = 97EF			SCANLINE_WIDTH	= DATAORIGIN+$0063
  2241 = 97F0			CURRENTX	= DATAORIGIN+$0064
  2242 = 97F2			CURRENTY	= DATAORIGIN+$0066
  2243
  2244 = 26B5 DB 97		LASTARCCOORDS
  2244 				.endl							; UNIT GRAPH
  2245
  2246 				; ------------------------------------------------------------
  2247
  2248 26B7			.local	VBXE						; UNIT
  2249
  2250 26B7			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  2251 26B7 85 8A			sta A
  2252
  2253 				; -------------------  ASM Block 00000100  -------------------
  2254
  2255 26B9				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 26B9 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 26BB A0 5F		        ldy     #FX_MEMS
     4 26BD 91 80		        sta     (fxptr),y
  2256
  2257 26BF A5 8A			lda a
  2258 26C1 38 E9 01			sub #1
  2259
  2260 26C4 A0 02			ldy #s@xdl.RPTL_
  2261 26C6 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2262
  2263 26C9				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 26C9 A9 00		        lda     #$00
     3 26CB A0 5F		        ldy     #FX_MEMS
     4 26CD 91 80		        sta     (fxptr),y
  2264
  2265 				; ------------------------------------------------------------
  2266
  2267 = 008A			A	= :EDX
  2268
  2269 26CF			@exit
  2270 					.ifdef @new
  2271 					lda <@VarData
  2272 					sta :ztmp
  2273 					lda >@VarData
  2274 					ldy #@VarDataSize-1
  2275 					jmp @FreeMem
  2276 					els
  2277 26CF 60				rts						; ret
  2278 					eif
  2279 				.endl
  2280
  2281 26D0			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  2282 26D0 85 8A			sta A
  2283
  2284 				; -------------------  ASM Block 00000101  -------------------
  2285
  2286 26D2				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 26D2 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 26D4 A0 5F		        ldy     #FX_MEMS
     4 26D6 91 80		        sta     (fxptr),y
  2287
  2288 26D8 A5 8A			lda a
  2289 26DA 38 E9 01			sub #1
  2290
  2291 26DD A0 05			ldy #s@xdl.RPTL
  2292 26DF 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2293
  2294 26E2				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 26E2 A9 00		        lda     #$00
     3 26E4 A0 5F		        ldy     #FX_MEMS
     4 26E6 91 80		        sta     (fxptr),y
  2295
  2296 				; ------------------------------------------------------------
  2297
  2298 = 008A			A	= :EDX
  2299
  2300 26E8			@exit
  2301 					.ifdef @new
  2302 					lda <@VarData
  2303 					sta :ztmp
  2304 					lda >@VarData
  2305 					ldy #@VarDataSize-1
  2306 					jmp @FreeMem
  2307 					els
  2308 26E8 60				rts						; ret
  2309 					eif
  2310 				.endl
  2311
  2312 26E9			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2313 26E9 8D 08 98			sta B
  2314
  2315 				; -------------------  ASM Block 00000113  -------------------
  2316
  2317 26EC				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 26EC AD 08 98		        lda     B
     3 26EF A0 5F		        ldy     #FX_MEMS
     4 26F1 91 80		        sta     (fxptr),y
  2318
  2319 				; ------------------------------------------------------------
  2320
  2321 = 9808			B	= DATAORIGIN+$007C
  2322
  2323 = 9808			@VarData	= B
  2324 = 0001			@VarDataSize	= 1
  2325
  2326 26F3			@exit
  2327 					.ifdef @new
  2328 					lda <@VarData
  2329 					sta :ztmp
  2330 					lda >@VarData
  2331 					ldy #@VarDataSize-1
  2332 					jmp @FreeMem
  2333 					els
  2334 26F3 60				rts						; ret
  2335 					eif
  2336 				.endl
  2337
  2338 26F4			.local	READVBXEMEMORYBYTE				; FUNCTION
  2339
  2340 				; optimize OK (vbxe_memorystream.inc), line = 20
  2341
  2342 26F4 AC 09 98 84 84 AC + 	mwy POSITION :bp2
  2343 26FE A0 02			ldy #$02
  2344 2700 B1 84			lda (:bp2),y
  2345 2702 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2346 2704 88				dey
  2347 2705 B1 84			lda (:bp2),y
  2348 2707 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2349 2709 6A				ror @
  2350 270A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2351 270C 6A				ror @
  2352 270D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2353 270F 6A				ror @
  2354 2710 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2355 2712 6A				ror @
  2356 2713 09 80			ora #$80
  2357 2715 8D 0C 98			sta BNK
  2358
  2359 				; optimize OK (vbxe_memorystream.inc), line = 21
  2360
  2361 2718 88				dey
  2362 2719 B1 84			lda (:bp2),y
  2363 271B 8D 0D 98			sta ADR
  2364 271E C8				iny
  2365 271F B1 84			lda (:bp2),y
  2366 2721 29 0F			and #$0F
  2367 2723 09 B0			ora #$B0
  2368 2725 8D 0E 98			sta ADR+1
  2369
  2370 				; optimize OK (vbxe_memorystream.inc), line = 23
  2371
  2372 2728 AD 0C 98			lda BNK
  2373 272B 20 E9 26			jsr VBXEMEMORYBANK
  2374
  2375 				; optimize OK (vbxe_memorystream.inc), line = 25
  2376
  2377 272E AC 0E 98			ldy ADR+1
  2378 2731 84 83			sty :bp+1
  2379 2733 AC 0D 98			ldy ADR
  2380 2736 B1 82			lda (:bp),y
  2381 2738 8D 0B 98			sta RESULT
  2382
  2383 				; optimize OK (vbxe_memorystream.inc), line = 27
  2384
  2385 273B AC 09 98 84 84 AC + 	mwy POSITION :bp2
  2386 2745 A0 00			ldy #$00
  2387 2747 B1 84			lda (:bp2),y
  2388 2749 18 69 01			add #$01
  2389 274C 91 84			sta (:bp2),y
  2390 274E C8				iny
  2391 274F B1 84			lda (:bp2),y
  2392 2751 69 00			adc #$00
  2393 2753 91 84			sta (:bp2),y
  2394 2755 C8				iny
  2395 2756 B1 84			lda (:bp2),y
  2396 2758 69 00			adc #$00
  2397 275A 91 84			sta (:bp2),y
  2398 275C C8				iny
  2399 275D B1 84			lda (:bp2),y
  2400 275F 69 00			adc #$00
  2401 2761 91 84			sta (:bp2),y
  2402 2763			@exit
  2403
  2404 				; ------------------------------------------------------------
  2405
  2406 = 9809			POSITION	= DATAORIGIN+$007D
  2407 = 980B			RESULT	= DATAORIGIN+$007F
  2408 = 980C			BNK	= DATAORIGIN+$0080
  2409 = 980D			ADR	= DATAORIGIN+$0081
  2410
  2411 = 9809			@VarData	= POSITION
  2412 = 0005			@VarDataSize	= 5
  2413
  2414 2763 60				rts						; ret
  2415 				.endl
  2416
  2417 2764			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2418
  2419 				; optimize OK (vbxe_memorystream.inc), line = 39
  2420
  2421 2764 AC 0F 98 84 84 AC + 	mwy POSITION :bp2
  2422 276E A0 02			ldy #$02
  2423 2770 B1 84			lda (:bp2),y
  2424 2772 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2425 2774 88				dey
  2426 2775 B1 84			lda (:bp2),y
  2427 2777 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2428 2779 6A				ror @
  2429 277A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2430 277C 6A				ror @
  2431 277D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2432 277F 6A				ror @
  2433 2780 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2434 2782 6A				ror @
  2435 2783 09 80			ora #$80
  2436 2785 8D 12 98			sta BNK
  2437
  2438 				; optimize OK (vbxe_memorystream.inc), line = 40
  2439
  2440 2788 88				dey
  2441 2789 B1 84			lda (:bp2),y
  2442 278B 8D 13 98			sta ADR
  2443 278E C8				iny
  2444 278F B1 84			lda (:bp2),y
  2445 2791 29 0F			and #$0F
  2446 2793 09 B0			ora #$B0
  2447 2795 8D 14 98			sta ADR+1
  2448
  2449 				; optimize OK (vbxe_memorystream.inc), line = 42
  2450
  2451 2798 AD 12 98			lda BNK
  2452 279B 20 E9 26			jsr VBXEMEMORYBANK
  2453
  2454 				; optimize OK (vbxe_memorystream.inc), line = 44
  2455
  2456 279E AC 14 98			ldy ADR+1
  2457 27A1 84 83			sty :bp+1
  2458 27A3 AC 13 98			ldy ADR
  2459 27A6 AD 11 98			lda A
  2460 27A9 91 82			sta (:bp),y
  2461
  2462 				; optimize OK (vbxe_memorystream.inc), line = 46
  2463
  2464 27AB AC 0F 98 84 84 AC + 	mwy POSITION :bp2
  2465 27B5 A0 00			ldy #$00
  2466 27B7 B1 84			lda (:bp2),y
  2467 27B9 18 69 01			add #$01
  2468 27BC 91 84			sta (:bp2),y
  2469 27BE C8				iny
  2470 27BF B1 84			lda (:bp2),y
  2471 27C1 69 00			adc #$00
  2472 27C3 91 84			sta (:bp2),y
  2473 27C5 C8				iny
  2474 27C6 B1 84			lda (:bp2),y
  2475 27C8 69 00			adc #$00
  2476 27CA 91 84			sta (:bp2),y
  2477 27CC C8				iny
  2478 27CD B1 84			lda (:bp2),y
  2479 27CF 69 00			adc #$00
  2480 27D1 91 84			sta (:bp2),y
  2481
  2482 				; ------------------------------------------------------------
  2483
  2484 = 980F			POSITION	= DATAORIGIN+$0083
  2485 = 9811			A	= DATAORIGIN+$0085
  2486 = 9812			BNK	= DATAORIGIN+$0086
  2487 = 9813			ADR	= DATAORIGIN+$0087
  2488
  2489 = 980F			@VarData	= POSITION
  2490 = 0006			@VarDataSize	= 6
  2491
  2492 27D3			@exit
  2493 					.ifdef @new
  2494 					lda <@VarData
  2495 					sta :ztmp
  2496 					lda >@VarData
  2497 					ldy #@VarDataSize-1
  2498 					jmp @FreeMem
  2499 					els
  2500 27D3 60				rts						; ret
  2501 					eif
  2502 				.endl
  2503
  2504 27D4			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2505 27D4 8D 21 98			sta TVBXEMEMORYSTREAM
  2506 27D7 8C 22 98			sty TVBXEMEMORYSTREAM+1
  2507 27DA 8D 27 98			sta POSITION
  2508 27DD 8C 28 98			sty POSITION+1
  2509 27E0 18 69 04			add #4
  2510 27E3 90 01			scc
  2511 27E5 C8				iny
  2512 27E6 8D 29 98			sta SIZE
  2513 27E9 8C 2A 98			sty SIZE+1
  2514
  2515 				; optimize OK (vbxe_memorystream.inc), line = 124
  2516
  2517 27EC AC 27 98 84 84 AC + 	mwy POSITION :bp2
  2518 27F6 A0 02			ldy #$02
  2519 27F8 B1 84			lda (:bp2),y
  2520 27FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2521 27FC 88				dey
  2522 27FD B1 84			lda (:bp2),y
  2523 27FF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2524 2801 6A				ror @
  2525 2802 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2526 2804 6A				ror @
  2527 2805 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2528 2807 6A				ror @
  2529 2808 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2530 280A 6A				ror @
  2531 280B 09 80			ora #$80
  2532 280D 8D 2B 98			sta BNK
  2533
  2534 				; optimize OK (vbxe_memorystream.inc), line = 125
  2535
  2536 2810 88				dey
  2537 2811 B1 84			lda (:bp2),y
  2538 2813 8D 2C 98			sta ADR
  2539 2816 C8				iny
  2540 2817 B1 84			lda (:bp2),y
  2541 2819 29 0F			and #$0F
  2542 281B 09 B0			ora #$B0
  2543 281D 8D 2D 98			sta ADR+1
  2544
  2545 				; optimize OK (vbxe_memorystream.inc), line = 127
  2546
  2547 2820 AD 2B 98			lda BNK
  2548 2823 20 E9 26			jsr VBXEMEMORYBANK
  2549
  2550 				; optimize OK (vbxe_memorystream.inc), line = 129
  2551
  2552 2826 AD 23 98			lda BUFFER
  2553 2829 8D 30 98			sta SRC
  2554 282C AD 24 98			lda BUFFER+1
  2555 282F 8D 31 98			sta SRC+1
  2556
  2557 				; optimize OK (vbxe_memorystream.inc), line = 131
  2558
  2559 2832 A9 00			lda #$00
  2560 2834 8D 2E 98			sta I
  2561 2837 8D 2F 98			sta I+1
  2562 283A AD 25 98			lda COUNT
  2563 283D 38 E9 01			sub #$01
  2564 2840 8D 53 28			sta @FORTMP_040C_0
  2565 2843 AD 26 98			lda COUNT+1
  2566 2846 E9 00			sbc #$00
  2567 2848 8D 4C 28			sta @FORTMP_040C_1
  2568
  2569 284B			l_040F
  2570 				; --- ForToDoCondition
  2571 284B A9 00			lda @FORTMP_040C_1::#$00
  2572 284D CD 2F 98			cmp I+1
  2573 2850 D0 05			bne @+
  2574 2852 A9 00			lda @FORTMP_040C_0::#$00
  2575 2854 CD 2E 98			cmp I
  2576 				@
  2577 2857 90 53			jcc l_041B
  2578
  2579 				; optimize OK (vbxe_memorystream.inc), line = 133
  2580
  2581 2859 AC 30 98 84 84 AC + 	mwy SRC :bp2
  2582 2863 A0 00			ldy #$00
  2583 2865 B1 84			lda (:bp2),y
  2584 2867 AC 2D 98			ldy ADR+1
  2585 286A 84 83			sty :bp+1
  2586 286C AC 2C 98			ldy ADR
  2587 286F 91 82			sta (:bp),y
  2588
  2589 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2590
  2591 2871 EE 2C 98			inc ADR
  2592 2874 D0 03			sne
  2593 2876 EE 2D 98			inc ADR+1
  2594
  2595 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2596
  2597 2879 EE 30 98			inc SRC
  2598 287C D0 03			sne
  2599 287E EE 31 98			inc SRC+1
  2600
  2601 				; optimize OK (vbxe_memorystream.inc), line = 138
  2602
  2603 2881 AD 2D 98			lda ADR+1
  2604 2884 C9 C0			cmp #$C0
  2605 2886 90 1A			jcc l_043A
  2606 2888 D0 05			bne @+
  2607 288A AD 2C 98			lda ADR
  2608 288D 90 13			jcc l_043A
  2609 				@
  2610
  2611 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2612
  2613 288F EE 2B 98			inc BNK
  2614
  2615 				; optimize OK (vbxe_memorystream.inc), line = 140
  2616
  2617 2892 AD 2B 98			lda BNK
  2618 2895 20 E9 26			jsr VBXEMEMORYBANK
  2619
  2620 				; optimize OK (vbxe_memorystream.inc), line = 141
  2621
  2622 2898 A9 00			lda #$00
  2623 289A 8D 2C 98			sta ADR
  2624 289D A9 B0			lda #$B0
  2625 289F 8D 2D 98			sta ADR+1
  2626 28A2			l_043A
  2627
  2628 				; --- ForToDoEpilog
  2629 28A2 EE 2E 98			inc I
  2630 28A5 D0 A4			jne l_040F
  2631 28A7 EE 2F 98			inc I+1
  2632 28AA D0 9F			jne l_040F
  2633 28AC			l_041B
  2634
  2635 				; optimize OK (vbxe_memorystream.inc), line = 146
  2636
  2637 28AC A9 00			lda #$00
  2638 28AE 20 E9 26			jsr VBXEMEMORYBANK
  2639
  2640 				; optimize OK (vbxe_memorystream.inc), line = 148
  2641
  2642 28B1 AC 27 98 84 84 AC + 	mwy POSITION :bp2
  2643 28BB A0 00			ldy #$00
  2644 28BD B1 84			lda (:bp2),y
  2645 28BF 18 6D 25 98			add COUNT
  2646 28C3 91 84			sta (:bp2),y
  2647 28C5 C8				iny
  2648 28C6 B1 84			lda (:bp2),y
  2649 28C8 6D 26 98			adc COUNT+1
  2650 28CB 91 84			sta (:bp2),y
  2651 28CD C8				iny
  2652 28CE B1 84			lda (:bp2),y
  2653 28D0 69 00			adc #$00
  2654 28D2 91 84			sta (:bp2),y
  2655 28D4 C8				iny
  2656 28D5 B1 84			lda (:bp2),y
  2657 28D7 69 00			adc #$00
  2658 28D9 91 84			sta (:bp2),y
  2659
  2660 				; ------------------------------------------------------------
  2661
  2662 = 9821			TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
  2663 = 9823			BUFFER	= DATAORIGIN+$0097
  2664 = 9825			COUNT	= DATAORIGIN+$0099
  2665 = 9827			POSITION	= DATAORIGIN+$009B
  2666 = 9829			SIZE	= DATAORIGIN+$009D
  2667 = 982B			BNK	= DATAORIGIN+$009F
  2668 = 982C			ADR	= DATAORIGIN+$00A0
  2669 = 982E			I	= DATAORIGIN+$00A2
  2670 = 9830			SRC	= DATAORIGIN+$00A4
  2671
  2672 = 9821			@VarData	= TVBXEMEMORYSTREAM
  2673 = 0011			@VarDataSize	= 17
  2674
  2675 28DB			@exit
  2676 					.ifdef @new
  2677 					lda <@VarData
  2678 					sta :ztmp
  2679 					lda >@VarData
  2680 					ldy #@VarDataSize-1
  2681 					jmp @FreeMem
  2682 					els
  2683 28DB 60				rts						; ret
  2684 					eif
  2685 				.endl
  2686
  2687 28DC			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2688 28DC 8D 34 98			sta TVBXEMEMORYSTREAM
  2689 28DF 8C 35 98			sty TVBXEMEMORYSTREAM+1
  2690 28E2 8D 37 98			sta POSITION
  2691 28E5 8C 38 98			sty POSITION+1
  2692 28E8 18 69 04			add #4
  2693 28EB 90 01			scc
  2694 28ED C8				iny
  2695 28EE 8D 39 98			sta SIZE
  2696 28F1 8C 3A 98			sty SIZE+1
  2697
  2698 				; optimize OK (vbxe_memorystream.inc), line = 158
  2699
  2700 28F4 AD 37 98			lda POSITION
  2701 28F7 8D 09 98			sta READVBXEMEMORYBYTE.POSITION
  2702 28FA AD 38 98			lda POSITION+1
  2703 28FD 8D 0A 98			sta READVBXEMEMORYBYTE.POSITION+1
  2704 2900 20 F4 26			jsr READVBXEMEMORYBYTE
  2705 2903 AD 0B 98			lda READVBXEMEMORYBYTE.RESULT
  2706 2906 8D 36 98			sta RESULT
  2707
  2708 				; optimize OK (vbxe_memorystream.inc), line = 160
  2709
  2710 2909 A9 00			lda #$00
  2711 290B 20 E9 26			jsr VBXEMEMORYBANK
  2712 290E			@exit
  2713
  2714 				; ------------------------------------------------------------
  2715
  2716 = 9834			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
  2717 = 9836			RESULT	= DATAORIGIN+$00AA
  2718 = 9837			POSITION	= DATAORIGIN+$00AB
  2719 = 9839			SIZE	= DATAORIGIN+$00AD
  2720
  2721 = 9834			@VarData	= TVBXEMEMORYSTREAM
  2722 = 0006			@VarDataSize	= 6
  2723
  2724 290E 60				rts						; ret
  2725 				.endl
  2726
  2727 290F			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2728 290F 8D 43 98			sta TVBXEMEMORYSTREAM
  2729 2912 8C 44 98			sty TVBXEMEMORYSTREAM+1
  2730 2915 8D 46 98			sta POSITION
  2731 2918 8C 47 98			sty POSITION+1
  2732 291B 18 69 04			add #4
  2733 291E 90 01			scc
  2734 2920 C8				iny
  2735 2921 8D 48 98			sta SIZE
  2736 2924 8C 49 98			sty SIZE+1
  2737
  2738 				; optimize OK (vbxe_memorystream.inc), line = 198
  2739
  2740 2927 AD 46 98			lda POSITION
  2741 292A 8D 0F 98			sta WRITEVBXEMEMORYBYTE.POSITION
  2742 292D AD 47 98			lda POSITION+1
  2743 2930 8D 10 98			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2744 2933 AD 45 98			lda B
  2745 2936 8D 11 98			sta WRITEVBXEMEMORYBYTE.A
  2746 2939 20 64 27			jsr WRITEVBXEMEMORYBYTE
  2747
  2748 				; optimize OK (vbxe_memorystream.inc), line = 200
  2749
  2750 293C A9 00			lda #$00
  2751 293E 20 E9 26			jsr VBXEMEMORYBANK
  2752
  2753 				; ------------------------------------------------------------
  2754
  2755 = 9843			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
  2756 = 9845			B	= DATAORIGIN+$00B9
  2757 = 9846			POSITION	= DATAORIGIN+$00BA
  2758 = 9848			SIZE	= DATAORIGIN+$00BC
  2759
  2760 = 9843			@VarData	= TVBXEMEMORYSTREAM
  2761 = 0007			@VarDataSize	= 7
  2762
  2763 2941			@exit
  2764 					.ifdef @new
  2765 					lda <@VarData
  2766 					sta :ztmp
  2767 					lda >@VarData
  2768 					ldy #@VarDataSize-1
  2769 					jmp @FreeMem
  2770 					els
  2771 2941 60				rts						; ret
  2772 					eif
  2773 				.endl
  2774
  2775 2942			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2776 2942 8D 52 98			sta TVBXEMEMORYSTREAM
  2777 2945 8C 53 98			sty TVBXEMEMORYSTREAM+1
  2778 2948 8D 54 98			sta POSITION
  2779 294B 8C 55 98			sty POSITION+1
  2780 294E 18 69 04			add #4
  2781 2951 90 01			scc
  2782 2953 C8				iny
  2783 2954 8D 56 98			sta SIZE
  2784 2957 8C 57 98			sty SIZE+1
  2785
  2786 				; optimize OK (vbxe_memorystream.inc), line = 239
  2787
  2788 295A AC 54 98 84 84 AC + 	mwy POSITION :bp2
  2789 2964 A0 00			ldy #$00
  2790 2966 B1 84			lda (:bp2),y
  2791 2968 8D 58 98			sta ADR
  2792 296B C8				iny
  2793 296C B1 84			lda (:bp2),y
  2794 296E 8D 59 98			sta ADR+1
  2795 2971 C8				iny
  2796 2972 B1 84			lda (:bp2),y
  2797 2974 8D 5A 98			sta ADR+2
  2798 2977 C8				iny
  2799 2978 B1 84			lda (:bp2),y
  2800 297A 8D 5B 98			sta ADR+3
  2801
  2802 				; optimize OK (vbxe_memorystream.inc), line = 240
  2803
  2804 297D AC 56 98 84 84 AC + 	mwy SIZE :bp2
  2805 2987 A0 00			ldy #$00
  2806 2989 B1 84			lda (:bp2),y
  2807 298B 8D 5C 98			sta SIZ
  2808 298E C8				iny
  2809 298F B1 84			lda (:bp2),y
  2810 2991 8D 5D 98			sta SIZ+1
  2811 2994 C8				iny
  2812 2995 B1 84			lda (:bp2),y
  2813 2997 8D 5E 98			sta SIZ+2
  2814 299A C8				iny
  2815 299B B1 84			lda (:bp2),y
  2816 299D 8D 5F 98			sta SIZ+3
  2817
  2818 				; -------------------  ASM Block 00000114  -------------------
  2819
  2820 29A0 8A 48			txa:pha
  2821
  2822 29A2 AD 58 98 8D 10 2A		mva adr _adr
  2823 29A8 AD 59 98 8D 11 2A		mva adr+1 _adr+1
  2824 29AE AD 5A 98 8D 12 2A		mva adr+2 _adr+2
  2825
  2826 29B4				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 29B4 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 29B6 A0 5F		        ldy     #FX_MEMS
     4 29B8 91 80		        sta     (fxptr),y
  2827
  2828 29BA AD 12 2A CD 5E 98 + loop	cpw _adr+1 siz+1
  2829 29C8 B0 37			bcs skp
  2830
  2831 29CA A0 14			ldy #20
  2832 29CC B9 0A 2A 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2833
  2834 29D5				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 29D5 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 29D7 A0 50		        ldy     #FX_BL_ADR0
     4 29D9 91 80		        sta     (fxptr),y
  2835 29DB				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 29DB A9 00		        lda     #$00
     3 29DD A0 51		        ldy     #FX_BL_ADR1
     4 29DF 91 80		        sta     (fxptr),y
  2836 29E1				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 29E1 A0 52		        ldy     #FX_BL_ADR2
     3 29E3 91 80		        sta     (fxptr),y
  2837
  2838 29E5				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 29E5 A9 01		        lda     #$01
     3 29E7 A0 53		        ldy     #FX_BLITTER_START
     4 29E9 91 80		        sta     (fxptr),y
  2839
  2840 29EB			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 29EB A0 53		        ldy     #FX_BLITTER_BUSY
     3 29ED B1 80		        lda     (fxptr),y
  2841 29EF D0 FA			bne wait
  2842
  2843 29F1 A9 00			lda #$00
  2844 29F3 8D 10 2A			sta _adr
  2845 29F6 EE 11 2A D0 03 EE + 	inw _adr+1
  2846
  2847 29FE 4C BA 29			jmp loop
  2848
  2849 2A01			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 2A01 A9 00		        lda     #$00
     3 2A03 A0 5F		        ldy     #FX_MEMS
     4 2A05 91 80		        sta     (fxptr),y
  2850
  2851 2A07 4C 1F 2A			jmp stop
  2852
  2853 2A0A 00 00 00		bltClr	.long 0x00	; source address
  2854 2A0D 00 00			.word 0x00	; source step y
  2855 2A0F 00				.byte 0x00	; source step x
  2856 2A10 00 00 00		_adr	.long 0x00	; destination address
  2857 2A13 00 01			.word 0x0100	; destination step y
  2858 2A15 01				.byte 0x01	; destination step x
  2859 2A16 FF 00		_siz	.word 0xff	; width
  2860 2A18 00				.byte 0x00	; height
  2861 2A19 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2862 2A1A 00				dta 0x00	; xor mask
  2863 2A1B 00				dta 0x00	; collision and mask
  2864 2A1C 00				dta 0x00	; zoom
  2865 2A1D 00				dta 0x00	; pattern feature
  2866 2A1E 00				dta 0x00	; control
  2867
  2868 2A1F 68 AA		stop	pla:tax
  2869
  2870 				; optimize OK (vbxe_memorystream.inc), line = 292
  2871
  2872 2A21 AC 54 98 84 84 AC + 	mwy POSITION :bp2
  2873 2A2B A0 00			ldy #$00
  2874 2A2D 98				tya
  2875 2A2E 91 84			sta (:bp2),y
  2876 2A30 C8				iny
  2877 2A31 91 84			sta (:bp2),y
  2878 2A33 C8				iny
  2879 2A34 91 84			sta (:bp2),y
  2880 2A36 C8				iny
  2881 2A37 91 84			sta (:bp2),y
  2882
  2883 				; optimize OK (vbxe_memorystream.inc), line = 293
  2884
  2885 2A39 AC 56 98 84 84 AC + 	mwy SIZE :bp2
  2886 2A43 A0 00			ldy #$00
  2887 2A45 91 84			sta (:bp2),y
  2888 2A47 C8				iny
  2889 2A48 91 84			sta (:bp2),y
  2890 2A4A C8				iny
  2891 2A4B A9 08			lda #$08
  2892 2A4D 91 84			sta (:bp2),y
  2893 2A4F C8				iny
  2894 2A50 A9 00			lda #$00
  2895 2A52 91 84			sta (:bp2),y
  2896
  2897 				; ------------------------------------------------------------
  2898
  2899 = 9852			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
  2900 = 9854			POSITION	= DATAORIGIN+$00C8
  2901 = 9856			SIZE	= DATAORIGIN+$00CA
  2902 = 9858			ADR	= DATAORIGIN+$00CC
  2903 = 985C			SIZ	= DATAORIGIN+$00D0
  2904
  2905 = 9852			@VarData	= TVBXEMEMORYSTREAM
  2906 = 000E			@VarDataSize	= 14
  2907
  2908 2A54			@exit
  2909 					.ifdef @new
  2910 					lda <@VarData
  2911 					sta :ztmp
  2912 					lda >@VarData
  2913 					ldy #@VarDataSize-1
  2914 					jmp @FreeMem
  2915 					els
  2916 2A54 60				rts						; ret
  2917 					eif
  2918 				.endl
  2919
  2920 2A55			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2921
  2922 				; -------------------  ASM Block 00000123  -------------------
  2923
  2924 					@setxdl #e@xdl.mapoff
  2924 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2924 2A55 A9 05		 LDA# E@XDL.MAPOFF
  2924 2A57 20 EF 19		 JSR @SETXDL
  2925
  2926 2A5A			@exit
  2927 					.ifdef @new
  2928 					lda <@VarData
  2929 					sta :ztmp
  2930 					lda >@VarData
  2931 					ldy #@VarDataSize-1
  2932 					jmp @FreeMem
  2933 					els
  2934 2A5A 60				rts						; ret
  2935 					eif
  2936 				.endl
  2937
  2938 2A5B			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2939 2A5B			.local	@0201810000180000
  2940
  2941 				; optimize OK (VBXE), line = 643
  2942
  2943 2A5B AD 60 98			lda A
  2944 2A5E 8D 8E 97			sta SYSTEM.GRAPHMODE
  2945
  2946 				; optimize OK (VBXE), line = 645
  2947
  2948 2A61 A9 C0			lda #$C0
  2949 2A63 8D 93 97			sta SYSTEM.SCREENHEIGHT
  2950 2A66 A9 00			lda #$00
  2951 2A68 8D 94 97			sta SYSTEM.SCREENHEIGHT+1
  2952
  2953 				; optimize OK (VBXE), line = 647
  2954
  2955 2A6B AD 60 98			lda A
  2956 2A6E 8D 63 98			sta @CASETMP_0005
  2957 2A71 C9 0A			cmp #$0A
  2958 2A73 D0 12			jne l_04B1
  2959 				@
  2960
  2961 				; optimize OK (VBXE), line = 648
  2962
  2963 2A75 A9 A0			lda #$A0
  2964 2A77 8D 91 97			sta SYSTEM.SCREENWIDTH
  2965 2A7A A9 00			lda #$00
  2966 2A7C 8D 92 97			sta SYSTEM.SCREENWIDTH+1
  2967 2A7F A9 01			lda #$01
  2968 2A81 8D 60 98			sta A
  2969 2A84 4C CC 2A			jmp a_0005
  2970 2A87			l_04B1
  2971 2A87 C9 1F			cmp #$1F
  2972 2A89 D0 12			jne l_04C0
  2973
  2974 				; optimize OK (VBXE), line = 649
  2975
  2976 2A8B A9 40			lda #$40
  2977 2A8D 8D 91 97			sta SYSTEM.SCREENWIDTH
  2978 2A90 A9 01			lda #$01
  2979 2A92 8D 92 97			sta SYSTEM.SCREENWIDTH+1
  2980 2A95 A9 02			lda #$02
  2981 2A97 8D 60 98			sta A
  2982 2A9A 4C CC 2A			jmp a_0005
  2983 2A9D			l_04C0
  2984 2A9D C9 18			cmp #$18
  2985 2A9F D0 12			jne l_04CF
  2986
  2987 				; optimize OK (VBXE), line = 650
  2988
  2989 2AA1 A9 80			lda #$80
  2990 2AA3 8D 91 97			sta SYSTEM.SCREENWIDTH
  2991 2AA6 A9 02			lda #$02
  2992 2AA8 8D 92 97			sta SYSTEM.SCREENWIDTH+1
  2993 2AAB A9 03			lda #$03
  2994 2AAD 8D 60 98			sta A
  2995 2AB0 4C CC 2A			jmp a_0005
  2996 2AB3			l_04CF
  2997
  2998 				; optimize OK (VBXE), line = 654
  2999
  3000 2AB3 A9 50			lda #$50
  3001 2AB5 8D 91 97			sta SYSTEM.SCREENWIDTH
  3002 2AB8 A9 00			lda #$00
  3003 2ABA 8D 92 97			sta SYSTEM.SCREENWIDTH+1
  3004
  3005 				; optimize OK (VBXE), line = 655
  3006
  3007 2ABD A9 18			lda #$18
  3008 2ABF 8D 93 97			sta SYSTEM.SCREENHEIGHT
  3009 2AC2 A9 00			lda #$00
  3010 2AC4 8D 94 97			sta SYSTEM.SCREENHEIGHT+1
  3011
  3012 				; optimize OK (VBXE), line = 656
  3013
  3014 2AC7 A9 02			lda #$02
  3015 2AC9 8D 60 98			sta A
  3016 2ACC			a_0005
  3017
  3018 				; -------------------  ASM Block 00000124  -------------------
  3019
  3020 2ACC 8A 48			txa:pha
  3021
  3022 2ACE AD 91 97			lda MAIN.SYSTEM.ScreenWidth
  3023 2AD1 AE 92 97			ldx MAIN.SYSTEM.ScreenWidth+1
  3024
  3025 2AD4 AC 93 97			ldy MAIN.SYSTEM.ScreenHeight
  3026
  3027 2AD7 20 AA 11			@SCREENSIZE
  3028
  3029 					@setxdl a
  3029 				 LDA A\ JSR @SETXDL
  3029 2ADA AD 60 98		 LDA A
  3029 2ADD 20 EF 19		 JSR @SETXDL
  3030
  3031 2AE0				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2AE0 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2AE2 A0 5F		        ldy     #FX_MEMS
     4 2AE4 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3032
  3033 2AE6 A0 09			ldy #s@xdl.ovstep
  3034
  3035 2AE8 AD 61 98			lda s
  3036 2AEB 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  3037
  3038 2AEE AD 62 98			lda s+1
  3039 2AF1 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  3040
  3041 2AF4				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2AF4 A9 00		        lda     #$00
     3 2AF6 A0 5F		        ldy     #FX_MEMS
     4 2AF8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3042
  3043 2AFA 68 AA			pla:tax
  3044
  3045 				; ------------------------------------------------------------
  3046
  3047 = 9860			A	= DATAORIGIN+$00D4
  3048 = 9861			S	= DATAORIGIN+$00D5
  3049 = 9863			@CASETMP_0005	= DATAORIGIN+$00D7
  3050
  3051 = 9860			@VarData	= A
  3052 = 0004			@VarDataSize	= 4
  3053
  3054 2AFC			@exit
  3055 					.ifdef @new
  3056 					lda <@VarData
  3057 					sta :ztmp
  3058 					lda >@VarData
  3059 					ldy #@VarDataSize-1
  3060 					jmp @FreeMem
  3061 					els
  3062 2AFC 60				rts						; ret
  3063 					eif
  3064 				.endl
  3065 				.endl							; overload
  3066
  3067 2AFD			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  3068 2AFD			.local	@010180000
  3069 2AFD 8D 64 98			sta A
  3070
  3071 				; optimize OK (VBXE), line = 698
  3072
  3073 2B00 8D 60 98			sta SETHORIZONTALRES.@0201810000180000.A
  3074 2B03 A9 40			lda #$40
  3075 2B05 8D 61 98			sta SETHORIZONTALRES.@0201810000180000.S
  3076 2B08 A9 01			lda #$01
  3077 2B0A 8D 62 98			sta SETHORIZONTALRES.@0201810000180000.S+1
  3078 2B0D 20 5B 2A			jsr SETHORIZONTALRES.@0201810000180000
  3079
  3080 				; ------------------------------------------------------------
  3081
  3082 = 9864			A	= DATAORIGIN+$00D8
  3083
  3084 = 9864			@VarData	= A
  3085 = 0001			@VarDataSize	= 1
  3086
  3087 2B10			@exit
  3088 					.ifdef @new
  3089 					lda <@VarData
  3090 					sta :ztmp
  3091 					lda >@VarData
  3092 					ldy #@VarDataSize-1
  3093 					jmp @FreeMem
  3094 					els
  3095 2B10 60				rts						; ret
  3096 					eif
  3097 				.endl
  3098 				.endl							; overload
  3099
  3100 2B11			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  3101
  3102 				; -------------------  ASM Block 00000126  -------------------
  3103
  3104 2B11				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 2B11 AD 65 98		        lda     A
     3 2B14 A0 50		        ldy     #FX_BL_ADR0
     4 2B16 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3105 2B18 AD 66 98			lda	a+1
  3106 2B1B 29 0F			and	#$0f
  3107 2B1D				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 2B1D A0 51		        ldy     #FX_BL_ADR1
     3 2B1F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3108 2B21				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 2B21 A9 00		        lda     #$00
     3 2B23 A0 52		        ldy     #FX_BL_ADR2
     4 2B25 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3109
  3110 2B27				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 2B27 A9 01		        lda     #$01
     3 2B29 A0 53		        ldy     #FX_BLITTER_START
     4 2B2B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3111
  3112 				;wait	fxla	FX_BLITTER_BUSY
  3113 				;	bne	wait
  3114
  3115 				; ------------------------------------------------------------
  3116
  3117 = 9865			A	= DATAORIGIN+$00D9
  3118 = 978C			A.SRC_ADR	= DATAORIGIN+$0000
  3119 = 978C			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  3120 = 978D			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  3121 = 978E			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  3122 = 978F			A.SRC_STEP_Y	= DATAORIGIN+$0003
  3123 = 9791			A.SRC_STEP_X	= DATAORIGIN+$0005
  3124 = 9792			A.DST_ADR	= DATAORIGIN+$0006
  3125 = 9792			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  3126 = 9793			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  3127 = 9794			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  3128 = 9795			A.DST_STEP_Y	= DATAORIGIN+$0009
  3129 = 9797			A.DST_STEP_X	= DATAORIGIN+$000B
  3130 = 9798			A.BLT_WIDTH	= DATAORIGIN+$000C
  3131 = 979A			A.BLT_HEIGHT	= DATAORIGIN+$000E
  3132 = 979B			A.BLT_AND_MASK	= DATAORIGIN+$000F
  3133 = 979C			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  3134 = 979D			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  3135 = 979E			A.BLT_ZOOM	= DATAORIGIN+$0012
  3136 = 979F			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  3137 = 97A0			A.BLT_CONTROL	= DATAORIGIN+$0014
  3138
  3139 = 9865			@VarData	= A
  3140 = 0002			@VarDataSize	= 2
  3141
  3142 2B2D			@exit
  3143 					.ifdef @new
  3144 					lda <@VarData
  3145 					sta :ztmp
  3146 					lda >@VarData
  3147 					ldy #@VarDataSize-1
  3148 					jmp @FreeMem
  3149 					els
  3150 2B2D 60				rts						; ret
  3151 					eif
  3152 				.endl
  3153
  3154 2B2E			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  3155 2B2E 8D 69 98			sta A
  3156
  3157 				; -------------------  ASM Block 00000130  -------------------
  3158
  3159 2B31				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 2B31 AD 69 98		        lda     A
     3 2B34 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 2B36 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3160
  3161 				; ------------------------------------------------------------
  3162
  3163 = 9869			A	= DATAORIGIN+$00DD
  3164
  3165 = 9869			@VarData	= A
  3166 = 0001			@VarDataSize	= 1
  3167
  3168 2B38			@exit
  3169 					.ifdef @new
  3170 					lda <@VarData
  3171 					sta :ztmp
  3172 					lda >@VarData
  3173 					ldy #@VarDataSize-1
  3174 					jmp @FreeMem
  3175 					els
  3176 2B38 60				rts						; ret
  3177 					eif
  3178 				.endl
  3179
  3180 				; ------------------------------------------------------------
  3181 				; ------------------------------------------------------------
  3182 2B39			@UnitInit
  3183
  3184 				; -------------------  ASM Block 00000138  -------------------
  3185
  3186 2B39 8A 48			txa:pha
  3187
  3188 2B3B 20 A3 18			jsr @vbxe_detect
  3189 2B3E 90 04			bcc ok
  3190
  3191 2B40 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  3192 2B42 D0 05			bne status
  3193
  3194 2B44 20 F9 18		ok	jsr @vbxe_init
  3195
  3196 2B47 A2 01			ldx #MAIN.GRAPH.grOK
  3197 2B49 8E D7 97		status	stx MAIN.GRAPH.GraphResult
  3198
  3199 2B4C 68 AA			pla:tax
  3200
  3201 2B4E 60				rts
  3202
  3203 				; ------------------------------------------------------------
  3204
  3205 = 0001			VC_XDL	= $01
  3206 = 0002			VC_XCOLOR	= $02
  3207 = 0004			VC_NO_TRANS	= $04
  3208 = 0008			VC_TRANS15	= $08
  3209 = 0000			TCBLACK	= $00
  3210 = 0001			TCRED	= $01
  3211 = 0002			TCGREEN	= $02
  3212 = 0003			TCYELLOW	= $03
  3213 = 0004			TCBLUE	= $04
  3214 = 0005			TCMAGENTA	= $05
  3215 = 0006			TCCYAN	= $06
  3216 = 0007			TCWHITE	= $07
  3217 = 0008			TCBRIGHTBLACK	= $08
  3218 = 0009			TCBRIGHTRED	= $09
  3219 = 000A			TCBRIGHTGREEN	= $0A
  3220 = 000B			TCBRIGHTYELLOW	= $0B
  3221 = 000C			TCBRIGHTBLUE	= $0C
  3222 = 000D			TCBRIGHTMAGENTA	= $0D
  3223 = 000E			TCBRIGHTCYAN	= $0E
  3224 = 000F			TCBRIGHTWHITE	= $0F
  3225 = 0080			TBBLACK	= $80
  3226 = 0090			TBRED	= $90
  3227 = 00A0			TBGREEN	= $A0
  3228 = 00B0			TBYELLOW	= $B0
  3229 = 00C0			TBBLUE	= $C0
  3230 = 00D0			TBMAGENTA	= $D0
  3231 = 00E0			TBCYAN	= $E0
  3232 = 00F0			TBWHITE	= $F0
  3233 = 9800			adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
  3234 2B4F			.var VRAM	= adr.VRAM .word
  3235 = 9800			VRAM.POSITION	= DATAORIGIN+$0074
  3236 = 9804			VRAM.SIZE	= DATAORIGIN+$0078
  3237 = 0063			SCROLLBACK_FILL	= $63
  3238 = 19E5			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  3239 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  3240 2B4F			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  3241 = 02FD			FILDAT	= $02FD
  3242 = 0054			ROWCRS	= $54
  3243 = 0055			COLCRS	= $55
  3244 = 0068			CRSADR	= $68
  3245
  3246 = 2B4F 00 98		VRAM
  3246 = 2B51 00 04		SCROLLBACK_BUFFER
  3246 				.endl							; UNIT VBXE
  3247
  3248 				; ------------------------------------------------------------
  3249
  3250 2B53			.local	JOYSTICK					; UNIT
  3251
  3252 				; ------------------------------------------------------------
  3253
  3254 = 000F			JOY_NONE	= $0F
  3255 = 000E			JOY_UP	= $0E
  3256 = 000D			JOY_DOWN	= $0D
  3257 = 000B			JOY_LEFT	= $0B
  3258 = 000A			JOY_LEFT_UP	= $0A
  3259 = 0009			JOY_LEFT_DOWN	= $09
  3260 = 0007			JOY_RIGHT	= $07
  3261 = 0006			JOY_RIGHT_UP	= $06
  3262 = 0005			JOY_RIGHT_DOWN	= $05
  3263 = 0278			JOY_1	= $0278
  3264 = 0279			JOY_2	= $0279
  3265 = 0278			adr.STICK	= $0278
  3266 2B53			.var STICK	= adr.STICK .word
  3267 = 0278			STICK0	= $0278
  3268 = 0279			STICK1	= $0279
  3269 = 0284			adr.STRIG	= $0284
  3270 2B53			.var STRIG	= adr.STRIG .word
  3271 = 0284			STRIG0	= $0284
  3272 = 0285			STRIG1	= $0285
  3273 = 0270			adr.PADDL	= $0270
  3274 2B53			.var PADDL	= adr.PADDL .word
  3275 = 0270			PADDL0	= $0270
  3276 = 0271			PADDL1	= $0271
  3277 = 0272			PADDL2	= $0272
  3278 = 0273			PADDL3	= $0273
  3279 = 0274			PADDL4	= $0274
  3280 = 0275			PADDL5	= $0275
  3281 = 0276			PADDL6	= $0276
  3282 = 0277			PADDL7	= $0277
  3283 = 027C			adr.PTRIG	= $027C
  3284 2B53			.var PTRIG	= adr.PTRIG .word
  3285 = 027C			PTRIG0	= $027C
  3286 = 027D			PTRIG1	= $027D
  3287 = 027E			PTRIG2	= $027E
  3288 = 027F			PTRIG3	= $027F
  3289 = 0280			PTRIG4	= $0280
  3290 = 0281			PTRIG5	= $0281
  3291 = 0282			PTRIG6	= $0282
  3292 = 0283			PTRIG7	= $0283
  3293 = D010			TRIG0	= $D010
  3294 = D011			TRIG1	= $D011
  3295 = D200			POT0	= $D200
  3296 = D208			ALLPOT	= $D208
  3297 = D20B			POTGO	= $D20B
  3298
  3299 = 2B53 78 02		STICK
  3299 = 2B55 84 02		STRIG
  3299 = 2B57 70 02		PADDL
  3299 = 2B59 7C 02		PTRIG
  3299 				.endl							; UNIT JOYSTICK
  3300
  3301 2B5B			.local	START_LEVEL					; PROCEDURE
  3302
  3303 2B5B			@exit
  3304 					.ifdef @new
  3305 					lda <@VarData
  3306 					sta :ztmp
  3307 					lda >@VarData
  3308 					ldy #@VarDataSize-1
  3309 					jmp @FreeMem
  3310 					els
  3311 2B5B 60				rts						; ret
  3312 					eif
  3313 				.endl
  3314
  3315 2B5C			.local	DEATH_SOUND					; PROCEDURE
  3316
  3317 				; ------------------------------------------------------------
  3318
  3319 = 987F			A	= DATAORIGIN+$00F3
  3320
  3321 = 987F			@VarData	= A
  3322 = 0002			@VarDataSize	= 2
  3323
  3324 2B5C			@exit
  3325 					.ifdef @new
  3326 					lda <@VarData
  3327 					sta :ztmp
  3328 					lda >@VarData
  3329 					ldy #@VarDataSize-1
  3330 					jmp @FreeMem
  3331 					els
  3332 2B5C 60				rts						; ret
  3333 					eif
  3334 				.endl
  3335
  3336 2B5D			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3337
  3338 				; ------------------------------------------------------------
  3339
  3340 = 9881			A	= DATAORIGIN+$00F5
  3341 = 9883			B	= DATAORIGIN+$00F7
  3342
  3343 = 9881			@VarData	= A
  3344 = 0004			@VarDataSize	= 4
  3345
  3346 2B5D			@exit
  3347 					.ifdef @new
  3348 					lda <@VarData
  3349 					sta :ztmp
  3350 					lda >@VarData
  3351 					ldy #@VarDataSize-1
  3352 					jmp @FreeMem
  3353 					els
  3354 2B5D 60				rts						; ret
  3355 					eif
  3356 				.endl
  3357
  3358 2B5E			.local	MOUSECOORDS					; PROCEDURE
  3359
  3360 				; optimize OK (service.pas), line = 298
  3361
  3362 2B5E AD 00 D3			lda ATARI.PORTA
  3363 2B61 29 0F			and #$0F
  3364 2B63 8D 8E 9C			sta A
  3365
  3366 				; optimize OK (service.pas), line = 300
  3367
  3368 2B66 8D 8F 9C			sta @CASETMP_0007
  3369 2B69 C9 0B			cmp #$0B
  3370 2B6B D0 38			jne l_051D
  3371 				@
  3372
  3373 				; optimize OK (service.pas), line = 301
  3374
  3375 2B6D AC 8A 9C 84 84 AC + 	mwy X :bp2
  3376 2B77 A0 00			ldy #$00
  3377 2B79 B1 84			lda (:bp2),y
  3378 2B7B C8				iny
  3379 2B7C C9 0B			cmp #$0B
  3380 2B7E B1 84			lda (:bp2),y
  3381 2B80 E9 00			sbc #$00
  3382 2B82 50 02			svc
  3383 2B84 49 80			eor #$80
  3384 2B86 30 1A			jmi l_052E
  3385 2B88 AC 8A 9C 84 84 AC + 	mwy X :bp2
  3386 2B92 A0 00			ldy #$00
  3387 2B94 B1 84			lda (:bp2),y
  3388 2B96 38 E9 04			sub #$04
  3389 2B99 91 84			sta (:bp2),y
  3390 2B9B C8				iny
  3391 2B9C B1 84			lda (:bp2),y
  3392 2B9E E9 00			sbc #$00
  3393 2BA0 91 84			sta (:bp2),y
  3394 2BA2			l_052E
  3395 2BA2 4C DE 2B			jmp a_0007
  3396 2BA5			l_051D
  3397 2BA5 C9 07			cmp #$07
  3398 2BA7 D0 35			jne l_0539
  3399
  3400 				; optimize OK (service.pas), line = 302
  3401
  3402 2BA9 AC 8A 9C 84 84 AC + 	mwy X :bp2
  3403 2BB3 A0 00			ldy #$00
  3404 2BB5 B1 84			lda (:bp2),y
  3405 2BB7 C8				iny
  3406 2BB8 C9 D8			cmp #$D8
  3407 2BBA B1 84			lda (:bp2),y
  3408 2BBC E9 00			sbc #$00
  3409 2BBE 50 02			svc
  3410 2BC0 49 80			eor #$80
  3411 2BC2 10 1A			jpl l_054A
  3412 2BC4 AC 8A 9C 84 84 AC + 	mwy X :bp2
  3413 2BCE A0 00			ldy #$00
  3414 2BD0 B1 84			lda (:bp2),y
  3415 2BD2 18 69 04			add #$04
  3416 2BD5 91 84			sta (:bp2),y
  3417 2BD7 C8				iny
  3418 2BD8 B1 84			lda (:bp2),y
  3419 2BDA 69 00			adc #$00
  3420 2BDC 91 84			sta (:bp2),y
  3421 2BDE			l_054A
  3422 2BDE			l_0539
  3423 2BDE			a_0007
  3424
  3425 				; ------------------------------------------------------------
  3426
  3427 = 9C8A			X	= DATAORIGIN+$04FE
  3428 = 9C8C			Y	= DATAORIGIN+$0500
  3429 = 9C8E			A	= DATAORIGIN+$0502
  3430 = 9C8F			@CASETMP_0007	= DATAORIGIN+$0503
  3431
  3432 = 9C8A			@VarData	= X
  3433 = 0006			@VarDataSize	= 6
  3434
  3435 2BDE			@exit
  3436 					.ifdef @new
  3437 					lda <@VarData
  3438 					sta :ztmp
  3439 					lda >@VarData
  3440 					ldy #@VarDataSize-1
  3441 					jmp @FreeMem
  3442 					els
  3443 2BDE 60				rts						; ret
  3444 					eif
  3445 				.endl
  3446
  3447 2BDF			.local	MOUSECLICK					; FUNCTION
  3448
  3449 				; optimize OK (service.pas), line = 312
  3450
  3451 2BDF			?volatile:
  3452 2BDF AD 10 D0			lda JOYSTICK.TRIG0
  3453 2BE2 49 01			eor #$01
  3454 2BE4 8D 90 9C			sta RESULT
  3455 2BE7			@exit
  3456
  3457 				; ------------------------------------------------------------
  3458
  3459 = 9C90			RESULT	= DATAORIGIN+$0504
  3460
  3461 2BE7 60				rts						; ret
  3462 				.endl
  3463
  3464 2BE8			.local	BLITBOX						; PROCEDURE
  3465
  3466 				; -------------------  ASM Block 00000141  -------------------
  3467
  3468 2BE8				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2BE8 A9 80		        lda     #$80
     3 2BEA A0 5F		        ldy     #FX_MEMS
     4 2BEC 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3469 					
  3470 				; optimize OK (service.pas), line = 325
  3471
  3472 2BEE AD 93 9C			lda SRC+2
  3473 2BF1 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3474
  3475 				; optimize OK (service.pas), line = 326
  3476
  3477 2BF4 AD 92 9C			lda SRC+1
  3478 2BF7 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3479
  3480 				; optimize OK (service.pas), line = 327
  3481
  3482 2BFA AD 91 9C			lda SRC
  3483 2BFD 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3484
  3485 				; optimize OK (service.pas), line = 329
  3486
  3487 2C00 AD 97 9C			lda DST+2
  3488 2C03 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3489
  3490 				; optimize OK (service.pas), line = 330
  3491
  3492 2C06 AD 96 9C			lda DST+1
  3493 2C09 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3494
  3495 				; optimize OK (service.pas), line = 331
  3496
  3497 2C0C AD 95 9C			lda DST
  3498 2C0F 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3499
  3500 				; optimize OK (service.pas), line = 333
  3501
  3502 2C12 A9 01			lda #$01
  3503 2C14 8D 05 B1			sta BLT.SRC_STEP_X
  3504
  3505 				; optimize OK (service.pas), line = 334
  3506
  3507 2C17 AD 99 9C			lda W
  3508 2C1A 38 E9 01			sub #$01
  3509 2C1D 8D 03 B1			sta BLT.SRC_STEP_Y
  3510 2C20 AD 9A 9C			lda W+1
  3511 2C23 E9 00			sbc #$00
  3512 2C25 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3513
  3514 				; optimize OK (service.pas), line = 336
  3515
  3516 2C28 A9 01			lda #$01
  3517 2C2A 8D 0B B1			sta BLT.DST_STEP_X
  3518
  3519 				; optimize OK (service.pas), line = 337
  3520
  3521 2C2D AD 99 9C			lda W
  3522 2C30 38 E9 01			sub #$01
  3523 2C33 8D 09 B1			sta BLT.DST_STEP_Y
  3524 2C36 AD 9A 9C			lda W+1
  3525 2C39 E9 00			sbc #$00
  3526 2C3B 8D 0A B1			sta BLT.DST_STEP_Y+1
  3527
  3528 				; optimize OK (service.pas), line = 339
  3529
  3530 2C3E AD 99 9C			lda W
  3531 2C41 38 E9 01			sub #$01
  3532 2C44 8D 0C B1			sta BLT.BLT_WIDTH
  3533 2C47 AD 9A 9C			lda W+1
  3534 2C4A E9 00			sbc #$00
  3535 2C4C 8D 0D B1			sta BLT.BLT_WIDTH+1
  3536
  3537 				; optimize OK (service.pas), line = 340
  3538
  3539 2C4F AC 9B 9C			ldy H
  3540 2C52 88				dey
  3541 2C53 8C 0E B1			sty BLT.BLT_HEIGHT
  3542
  3543 				; optimize OK (service.pas), line = 342
  3544
  3545 2C56 A9 FF			lda #$FF
  3546 2C58 8D 0F B1			sta BLT.BLT_AND_MASK
  3547
  3548 				; optimize OK (service.pas), line = 344
  3549
  3550 2C5B A9 00			lda #$00
  3551 2C5D 8D 12 B1			sta BLT.BLT_ZOOM
  3552
  3553 				; optimize OK (service.pas), line = 346
  3554
  3555 2C60 8D 14 B1			sta BLT.BLT_CONTROL
  3556
  3557 				; -------------------  ASM Block 00000142  -------------------
  3558
  3559 2C63				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2C63 A9 00		        lda     #$00
     3 2C65 A0 5F		        ldy     #FX_MEMS
     4 2C67 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3560 					
  3561 				; optimize OK (service.pas), line = 352
  3562
  3563 2C69 AD 17 97			lda BLT
  3564 2C6C 8D 65 98			sta VBXE.RUNBCB.A
  3565 2C6F AD 18 97			lda BLT+1
  3566 2C72 8D 66 98			sta VBXE.RUNBCB.A+1
  3567 2C75 20 11 2B			jsr VBXE.RUNBCB
  3568
  3569 				; ------------------------------------------------------------
  3570
  3571 = 9C91			SRC	= DATAORIGIN+$0505
  3572 = 9C95			DST	= DATAORIGIN+$0509
  3573 = 9C99			W	= DATAORIGIN+$050D
  3574 = 9C9B			H	= DATAORIGIN+$050F
  3575
  3576 = 9C91			@VarData	= SRC
  3577 = 000B			@VarDataSize	= 11
  3578
  3579 2C78			@exit
  3580 					.ifdef @new
  3581 					lda <@VarData
  3582 					sta :ztmp
  3583 					lda >@VarData
  3584 					ldy #@VarDataSize-1
  3585 					jmp @FreeMem
  3586 					els
  3587 2C78 60				rts						; ret
  3588 					eif
  3589 				.endl
  3590
  3591 2C79			.local	BLITZERO					; PROCEDURE
  3592
  3593 				; -------------------  ASM Block 00000143  -------------------
  3594
  3595 2C79				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2C79 A9 80		        lda     #$80
     3 2C7B A0 5F		        ldy     #FX_MEMS
     4 2C7D 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3596 					
  3597 				; optimize OK (service.pas), line = 368
  3598
  3599 2C7F AD 9E 9C			lda SRC+2
  3600 2C82 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3601
  3602 				; optimize OK (service.pas), line = 369
  3603
  3604 2C85 AD 9D 9C			lda SRC+1
  3605 2C88 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3606
  3607 				; optimize OK (service.pas), line = 370
  3608
  3609 2C8B AD 9C 9C			lda SRC
  3610 2C8E 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3611
  3612 				; optimize OK (service.pas), line = 372
  3613
  3614 2C91 AD A2 9C			lda DST+2
  3615 2C94 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3616
  3617 				; optimize OK (service.pas), line = 373
  3618
  3619 2C97 AD A1 9C			lda DST+1
  3620 2C9A 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3621
  3622 				; optimize OK (service.pas), line = 374
  3623
  3624 2C9D AD A0 9C			lda DST
  3625 2CA0 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3626
  3627 				; optimize OK (service.pas), line = 376
  3628
  3629 2CA3 A9 01			lda #$01
  3630 2CA5 8D 05 B1			sta BLT.SRC_STEP_X
  3631
  3632 				; optimize OK (service.pas), line = 377
  3633
  3634 2CA8 8D 03 B1			sta BLT.SRC_STEP_Y
  3635 2CAB A9 00			lda #$00
  3636 2CAD 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3637
  3638 				; optimize OK (service.pas), line = 379
  3639
  3640 2CB0 A9 01			lda #$01
  3641 2CB2 8D 0B B1			sta BLT.DST_STEP_X
  3642
  3643 				; optimize OK (service.pas), line = 380
  3644
  3645 2CB5 8D 09 B1			sta BLT.DST_STEP_Y
  3646 2CB8 A9 00			lda #$00
  3647 2CBA 8D 0A B1			sta BLT.DST_STEP_Y+1
  3648
  3649 				; optimize OK (service.pas), line = 382
  3650
  3651 2CBD AD A4 9C			lda SIZE
  3652 2CC0 38 E9 01			sub #$01
  3653 2CC3 8D 0C B1			sta BLT.BLT_WIDTH
  3654 2CC6 AD A5 9C			lda SIZE+1
  3655 2CC9 E9 00			sbc #$00
  3656 2CCB 8D 0D B1			sta BLT.BLT_WIDTH+1
  3657
  3658 				; optimize OK (service.pas), line = 383
  3659
  3660 2CCE A9 00			lda #$00
  3661 2CD0 8D 0E B1			sta BLT.BLT_HEIGHT
  3662
  3663 				; optimize OK (service.pas), line = 385
  3664
  3665 2CD3 A9 01			lda #$01
  3666 2CD5 8D 14 B1			sta BLT.BLT_CONTROL
  3667
  3668 				; optimize OK (service.pas), line = 386
  3669
  3670 2CD8 A9 FF			lda #$FF
  3671 2CDA 8D 0F B1			sta BLT.BLT_AND_MASK
  3672
  3673 				; -------------------  ASM Block 00000144  -------------------
  3674
  3675 2CDD				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2CDD A9 00		        lda     #$00
     3 2CDF A0 5F		        ldy     #FX_MEMS
     4 2CE1 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3676 					
  3677 				; optimize OK (service.pas), line = 393
  3678
  3679 2CE3 AD 17 97			lda BLT
  3680 2CE6 8D 65 98			sta VBXE.RUNBCB.A
  3681 2CE9 AD 18 97			lda BLT+1
  3682 2CEC 8D 66 98			sta VBXE.RUNBCB.A+1
  3683 2CEF 20 11 2B			jsr VBXE.RUNBCB
  3684
  3685 				; ------------------------------------------------------------
  3686
  3687 = 9C9C			SRC	= DATAORIGIN+$0510
  3688 = 9CA0			DST	= DATAORIGIN+$0514
  3689 = 9CA4			SIZE	= DATAORIGIN+$0518
  3690 = 9CA6			I	= DATAORIGIN+$051A
  3691
  3692 = 9C9C			@VarData	= SRC
  3693 = 000C			@VarDataSize	= 12
  3694
  3695 2CF2			@exit
  3696 					.ifdef @new
  3697 					lda <@VarData
  3698 					sta :ztmp
  3699 					lda >@VarData
  3700 					ldy #@VarDataSize-1
  3701 					jmp @FreeMem
  3702 					els
  3703 2CF2 60				rts						; ret
  3704 					eif
  3705 				.endl
  3706
  3707 2CF3			.local	BLITTMP						; PROCEDURE
  3708
  3709 				; optimize OK (service.pas), line = 405
  3710
  3711 2CF3 AD A8 9C			lda DST
  3712 2CF6 8D 77 98			sta VBXE_RAM.POSITION
  3713 2CF9 AD A9 9C			lda DST+1
  3714 2CFC 8D 78 98			sta VBXE_RAM.POSITION+1
  3715 2CFF AD AA 9C			lda DST+2
  3716 2D02 8D 79 98			sta VBXE_RAM.POSITION+2
  3717 2D05 AD AB 9C			lda DST+3
  3718 2D08 8D 7A 98			sta VBXE_RAM.POSITION+3
  3719
  3720 				; optimize OK (service.pas), line = 407
  3721
  3722 2D0B AD 71 97			lda TMP
  3723 2D0E 8D 23 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3724 2D11 AD 72 97			lda TMP+1
  3725 2D14 8D 24 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3726 2D17 AD AC 9C			lda SIZE
  3727 2D1A 8D 25 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3728 2D1D A9 00			lda #$00
  3729 2D1F 8D 26 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3730 2D22 AD 1D 97			lda VBXE_RAM
  3731 2D25 AC 1E 97			ldy VBXE_RAM+1
  3732 2D28 20 D4 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3733
  3734 				; ------------------------------------------------------------
  3735
  3736 = 9CA8			DST	= DATAORIGIN+$051C
  3737 = 9CAC			SIZE	= DATAORIGIN+$0520
  3738 = 9CAD			X	= DATAORIGIN+$0521
  3739
  3740 = 9CA8			@VarData	= DST
  3741 = 0006			@VarDataSize	= 6
  3742
  3743 2D2B			@exit
  3744 					.ifdef @new
  3745 					lda <@VarData
  3746 					sta :ztmp
  3747 					lda >@VarData
  3748 					ldy #@VarDataSize-1
  3749 					jmp @FreeMem
  3750 					els
  3751 2D2B 60				rts						; ret
  3752 					eif
  3753 				.endl
  3754
  3755 2D2C			.local	BLITROW						; PROCEDURE
  3756
  3757 				; -------------------  ASM Block 00000145  -------------------
  3758
  3759 2D2C				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2D2C A9 80		        lda     #$80
     3 2D2E A0 5F		        ldy     #FX_MEMS
     4 2D30 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3760 					
  3761 				; optimize OK (service.pas), line = 423
  3762
  3763 2D32 AD B0 9C			lda SRC+2
  3764 2D35 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3765
  3766 				; optimize OK (service.pas), line = 424
  3767
  3768 2D38 AD AF 9C			lda SRC+1
  3769 2D3B 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3770
  3771 				; optimize OK (service.pas), line = 425
  3772
  3773 2D3E AD AE 9C			lda SRC
  3774 2D41 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3775
  3776 				; optimize OK (service.pas), line = 427
  3777
  3778 2D44 AD B4 9C			lda DST+2
  3779 2D47 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3780
  3781 				; optimize OK (service.pas), line = 428
  3782
  3783 2D4A AD B3 9C			lda DST+1
  3784 2D4D 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3785
  3786 				; optimize OK (service.pas), line = 429
  3787
  3788 2D50 AD B2 9C			lda DST
  3789 2D53 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3790
  3791 				; optimize OK (service.pas), line = 431
  3792
  3793 2D56 A9 01			lda #$01
  3794 2D58 8D 05 B1			sta BLT.SRC_STEP_X
  3795
  3796 				; optimize OK (service.pas), line = 432
  3797
  3798 2D5B A9 00			lda #$00
  3799 2D5D 8D 03 B1			sta BLT.SRC_STEP_Y
  3800 2D60 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3801
  3802 				; optimize OK (service.pas), line = 434
  3803
  3804 2D63 A9 01			lda #$01
  3805 2D65 8D 0B B1			sta BLT.DST_STEP_X
  3806
  3807 				; optimize OK (service.pas), line = 435
  3808
  3809 2D68 A9 00			lda #$00
  3810 2D6A 8D 09 B1			sta BLT.DST_STEP_Y
  3811 2D6D 8D 0A B1			sta BLT.DST_STEP_Y+1
  3812
  3813 				; optimize OK (service.pas), line = 437
  3814
  3815 2D70 AD B6 9C			lda SIZE
  3816 2D73 38 E9 01			sub #$01
  3817 2D76 8D 0C B1			sta BLT.BLT_WIDTH
  3818 2D79 AD B7 9C			lda SIZE+1
  3819 2D7C E9 00			sbc #$00
  3820 2D7E 8D 0D B1			sta BLT.BLT_WIDTH+1
  3821
  3822 				; optimize OK (service.pas), line = 438
  3823
  3824 2D81 A9 00			lda #$00
  3825 2D83 8D 0E B1			sta BLT.BLT_HEIGHT
  3826
  3827 				; optimize OK (service.pas), line = 440
  3828
  3829 2D86 8D 14 B1			sta BLT.BLT_CONTROL
  3830
  3831 				; optimize OK (service.pas), line = 442
  3832
  3833 2D89 A9 FF			lda #$FF
  3834 2D8B 8D 0F B1			sta BLT.BLT_AND_MASK
  3835
  3836 				; -------------------  ASM Block 00000146  -------------------
  3837
  3838 2D8E				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2D8E A9 00		        lda     #$00
     3 2D90 A0 5F		        ldy     #FX_MEMS
     4 2D92 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3839 					
  3840 				; optimize OK (service.pas), line = 448
  3841
  3842 2D94 AD 17 97			lda BLT
  3843 2D97 8D 65 98			sta VBXE.RUNBCB.A
  3844 2D9A AD 18 97			lda BLT+1
  3845 2D9D 8D 66 98			sta VBXE.RUNBCB.A+1
  3846 2DA0 20 11 2B			jsr VBXE.RUNBCB
  3847
  3848 				; ------------------------------------------------------------
  3849
  3850 = 9CAE			SRC	= DATAORIGIN+$0522
  3851 = 9CB2			DST	= DATAORIGIN+$0526
  3852 = 9CB6			SIZE	= DATAORIGIN+$052A
  3853 = 9CB8			X	= DATAORIGIN+$052C
  3854
  3855 = 9CAE			@VarData	= SRC
  3856 = 000C			@VarDataSize	= 12
  3857
  3858 2DA3			@exit
  3859 					.ifdef @new
  3860 					lda <@VarData
  3861 					sta :ztmp
  3862 					lda >@VarData
  3863 					ldy #@VarDataSize-1
  3864 					jmp @FreeMem
  3865 					els
  3866 2DA3 60				rts						; ret
  3867 					eif
  3868 				.endl
  3869
  3870 2DA4			.local	BLITBYTE					; PROCEDURE
  3871
  3872 				; optimize OK (service.pas), line = 459
  3873
  3874 2DA4 AD BA 9C			lda SRC
  3875 2DA7 8D 77 98			sta VBXE_RAM.POSITION
  3876 2DAA AD BB 9C			lda SRC+1
  3877 2DAD 8D 78 98			sta VBXE_RAM.POSITION+1
  3878 2DB0 AD BC 9C			lda SRC+2
  3879 2DB3 8D 79 98			sta VBXE_RAM.POSITION+2
  3880 2DB6 AD BD 9C			lda SRC+3
  3881 2DB9 8D 7A 98			sta VBXE_RAM.POSITION+3
  3882
  3883 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 460
  3884
  3885 2DBC AD 1D 97			lda VBXE_RAM
  3886 2DBF AC 1E 97			ldy VBXE_RAM+1
  3887 2DC2 20 DC 28			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3888 2DC5 AD 36 98			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3889 2DC8 8D C2 9C			sta A
  3890
  3891 				; optimize OK (service.pas), line = 462
  3892
  3893 2DCB AD BE 9C			lda DST
  3894 2DCE 8D 77 98			sta VBXE_RAM.POSITION
  3895 2DD1 AD BF 9C			lda DST+1
  3896 2DD4 8D 78 98			sta VBXE_RAM.POSITION+1
  3897 2DD7 AD C0 9C			lda DST+2
  3898 2DDA 8D 79 98			sta VBXE_RAM.POSITION+2
  3899 2DDD AD C1 9C			lda DST+3
  3900 2DE0 8D 7A 98			sta VBXE_RAM.POSITION+3
  3901
  3902 				; optimize OK (service.pas), line = 463
  3903
  3904 2DE3 AD C2 9C			lda A
  3905 2DE6 8D 45 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3906 2DE9 AD 1D 97			lda VBXE_RAM
  3907 2DEC AC 1E 97			ldy VBXE_RAM+1
  3908 2DEF 20 0F 29			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3909
  3910 				; ------------------------------------------------------------
  3911
  3912 = 9CBA			SRC	= DATAORIGIN+$052E
  3913 = 9CBE			DST	= DATAORIGIN+$0532
  3914 = 9CC2			A	= DATAORIGIN+$0536
  3915
  3916 = 9CBA			@VarData	= SRC
  3917 = 0009			@VarDataSize	= 9
  3918
  3919 2DF2			@exit
  3920 					.ifdef @new
  3921 					lda <@VarData
  3922 					sta :ztmp
  3923 					lda >@VarData
  3924 					ldy #@VarDataSize-1
  3925 					jmp @FreeMem
  3926 					els
  3927 2DF2 60				rts						; ret
  3928 					eif
  3929 				.endl
  3930
  3931 2DF3			.local	PUTBYTE						; PROCEDURE
  3932
  3933 				; optimize OK (service.pas), line = 473
  3934
  3935 2DF3 AD C3 9C			lda DST
  3936 2DF6 8D 77 98			sta VBXE_RAM.POSITION
  3937 2DF9 AD C4 9C			lda DST+1
  3938 2DFC 8D 78 98			sta VBXE_RAM.POSITION+1
  3939 2DFF AD C5 9C			lda DST+2
  3940 2E02 8D 79 98			sta VBXE_RAM.POSITION+2
  3941 2E05 AD C6 9C			lda DST+3
  3942 2E08 8D 7A 98			sta VBXE_RAM.POSITION+3
  3943
  3944 				; optimize OK (service.pas), line = 474
  3945
  3946 2E0B AD C7 9C			lda V
  3947 2E0E 8D 45 98			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3948 2E11 AD 1D 97			lda VBXE_RAM
  3949 2E14 AC 1E 97			ldy VBXE_RAM+1
  3950 2E17 20 0F 29			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3951
  3952 				; ------------------------------------------------------------
  3953
  3954 = 9CC3			DST	= DATAORIGIN+$0537
  3955 = 9CC7			V	= DATAORIGIN+$053B
  3956
  3957 = 9CC3			@VarData	= DST
  3958 = 0005			@VarDataSize	= 5
  3959
  3960 2E1A			@exit
  3961 					.ifdef @new
  3962 					lda <@VarData
  3963 					sta :ztmp
  3964 					lda >@VarData
  3965 					ldy #@VarDataSize-1
  3966 					jmp @FreeMem
  3967 					els
  3968 2E1A 60				rts						; ret
  3969 					eif
  3970 				.endl
  3971
  3972 2E1B			.local	GETBYTE						; FUNCTION
  3973
  3974 				; optimize OK (service.pas), line = 484
  3975
  3976 2E1B AD C8 9C			lda SRC
  3977 2E1E 8D 77 98			sta VBXE_RAM.POSITION
  3978 2E21 AD C9 9C			lda SRC+1
  3979 2E24 8D 78 98			sta VBXE_RAM.POSITION+1
  3980 2E27 AD CA 9C			lda SRC+2
  3981 2E2A 8D 79 98			sta VBXE_RAM.POSITION+2
  3982 2E2D AD CB 9C			lda SRC+3
  3983 2E30 8D 7A 98			sta VBXE_RAM.POSITION+3
  3984
  3985 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 485
  3986
  3987 2E33 AD 1D 97			lda VBXE_RAM
  3988 2E36 AC 1E 97			ldy VBXE_RAM+1
  3989 2E39 20 DC 28			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3990 2E3C AD 36 98			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3991 2E3F 8D CC 9C			sta RESULT
  3992 2E42			@exit
  3993
  3994 				; ------------------------------------------------------------
  3995
  3996 = 9CC8			SRC	= DATAORIGIN+$053C
  3997 = 9CCC			RESULT	= DATAORIGIN+$0540
  3998
  3999 = 9CC8			@VarData	= SRC
  4000 = 0004			@VarDataSize	= 4
  4001
  4002 2E42 60				rts						; ret
  4003 				.endl
  4004
  4005 2E43			.local	NOSOUND						; PROCEDURE
  4006
  4007 2E43			@exit
  4008 					.ifdef @new
  4009 					lda <@VarData
  4010 					sta :ztmp
  4011 					lda >@VarData
  4012 					ldy #@VarDataSize-1
  4013 					jmp @FreeMem
  4014 					els
  4015 2E43 60				rts						; ret
  4016 					eif
  4017 				.endl
  4018
  4019 2E44			.local	MYDELAY						; PROCEDURE
  4020
  4021 				; ------------------------------------------------------------
  4022
  4023 = 9CCD			A	= DATAORIGIN+$0541
  4024
  4025 = 9CCD			@VarData	= A
  4026 = 0002			@VarDataSize	= 2
  4027
  4028 2E44			@exit
  4029 					.ifdef @new
  4030 					lda <@VarData
  4031 					sta :ztmp
  4032 					lda >@VarData
  4033 					ldy #@VarDataSize-1
  4034 					jmp @FreeMem
  4035 					els
  4036 2E44 60				rts						; ret
  4037 					eif
  4038 				.endl
  4039
  4040 2E45			.local	MAX						; FUNCTION
  4041
  4042 				; optimize OK (service.pas), line = 611
  4043
  4044 2E45 AD D1 9C			lda B
  4045 2E48 CD CF 9C			cmp A
  4046 2E4B AD D2 9C			lda B+1
  4047 2E4E ED D0 9C			sbc A+1
  4048 2E51 50 02			svc
  4049 2E53 49 80			eor #$80
  4050 2E55 10 0C			jpl l_06C8
  4051 2E57 AD CF 9C			lda A
  4052 2E5A 8D D3 9C			sta RESULT
  4053 2E5D AD D0 9C			lda A+1
  4054 2E60 4C 6C 2E			jmp l_06D7
  4055 2E63			l_06C8
  4056
  4057 				; optimize OK (service.pas), line = 612
  4058
  4059 2E63 AD D1 9C			lda B
  4060 2E66 8D D3 9C			sta RESULT
  4061 2E69 AD D2 9C			lda B+1
  4062 2E6C			l_06D7
  4063 2E6C 8D D4 9C			sta RESULT+1
  4064 2E6F			@exit
  4065
  4066 				; ------------------------------------------------------------
  4067
  4068 = 9CCF			A	= DATAORIGIN+$0543
  4069 = 9CD1			B	= DATAORIGIN+$0545
  4070 = 9CD3			RESULT	= DATAORIGIN+$0547
  4071
  4072 = 9CCF			@VarData	= A
  4073 = 0004			@VarDataSize	= 4
  4074
  4075 2E6F 60				rts						; ret
  4076 				.endl
  4077
  4078 2E70			.local	MIN						; FUNCTION
  4079
  4080 				; optimize OK (service.pas), line = 618
  4081
  4082 2E70 AD D5 9C			lda A
  4083 2E73 CD D7 9C			cmp B
  4084 2E76 AD D6 9C			lda A+1
  4085 2E79 ED D8 9C			sbc B+1
  4086 2E7C 50 02			svc
  4087 2E7E 49 80			eor #$80
  4088 2E80 10 0C			jpl l_06F2
  4089 2E82 AD D5 9C			lda A
  4090 2E85 8D D9 9C			sta RESULT
  4091 2E88 AD D6 9C			lda A+1
  4092 2E8B 4C 97 2E			jmp l_0701
  4093 2E8E			l_06F2
  4094
  4095 				; optimize OK (service.pas), line = 619
  4096
  4097 2E8E AD D7 9C			lda B
  4098 2E91 8D D9 9C			sta RESULT
  4099 2E94 AD D8 9C			lda B+1
  4100 2E97			l_0701
  4101 2E97 8D DA 9C			sta RESULT+1
  4102 2E9A			@exit
  4103
  4104 				; ------------------------------------------------------------
  4105
  4106 = 9CD5			A	= DATAORIGIN+$0549
  4107 = 9CD7			B	= DATAORIGIN+$054B
  4108 = 9CD9			RESULT	= DATAORIGIN+$054D
  4109
  4110 = 9CD5			@VarData	= A
  4111 = 0004			@VarDataSize	= 4
  4112
  4113 2E9A 60				rts						; ret
  4114 				.endl
  4115
  4116 2E9B			.local	FATAL_ERROR					; PROCEDURE
  4117 2E9B 8D DB 9C			sta ERR_TYPE
  4118
  4119 				; optimize OK (service.pas), line = 628
  4120
  4121 2E9E 8D 42 99			sta STATUS
  4122
  4123 				; -------------------  ASM Block 00000147  -------------------
  4124
  4125 2EA1 8D 00 01		      sta $100
  4126 				      
  4127 2EA4 AD 0A D2		      kk: lda $d20a
  4128 2EA7 8D 1A D0		      sta $d01a
  4129 2EAA 4C A4 2E		      jmp kk
  4130 				    
  4131 				    
  4132 				; ------------------------------------------------------------
  4133
  4134 = 9CDB			ERR_TYPE	= DATAORIGIN+$054F
  4135
  4136 = 9CDB			@VarData	= ERR_TYPE
  4137 = 0001			@VarDataSize	= 1
  4138
  4139 2EAD			@exit
  4140 					.ifdef @new
  4141 					lda <@VarData
  4142 					sta :ztmp
  4143 					lda >@VarData
  4144 					ldy #@VarDataSize-1
  4145 					jmp @FreeMem
  4146 					els
  4147 2EAD 60				rts						; ret
  4148 					eif
  4149 				.endl
  4150
  4151 2EAE			.local	INITROWARRAY					; PROCEDURE
  4152
  4153 				; optimize OK (service.pas), line = 676
  4154
  4155 2EAE A9 00			lda #$00
  4156 2EB0 8D 84 99			sta HLP
  4157 2EB3 8D 85 99			sta HLP+1
  4158
  4159 				; optimize OK (service.pas), line = 678
  4160
  4161 2EB6 8D DC 9C			sta Y
  4162
  4163 2EB9			l_0721
  4164 				; --- ForToDoCondition
  4165 2EB9 AC DC 9C			ldy Y
  4166 2EBC C0 C8			cpy #$C8
  4167 2EBE 90 0A			jcc l_0741
  4168
  4169 				; optimize OK (service.pas), line = 681
  4170
  4171 2EC0 A9 00			lda #$00
  4172 2EC2 99 00 C0			sta adr.ROW,y
  4173 2EC5 A9 FA			lda #$FA
  4174 2EC7 4C D6 2E			jmp l_0752
  4175 2ECA			l_0741
  4176
  4177 				; optimize OK (service.pas), line = 683
  4178
  4179 2ECA AC DC 9C			ldy Y
  4180 2ECD AD 84 99			lda HLP
  4181 2ED0 99 00 C0			sta adr.ROW,y
  4182 2ED3 AD 85 99			lda HLP+1
  4183 2ED6			l_0752
  4184 2ED6 99 00 C1			sta adr.ROW+256,y
  4185
  4186 				; optimize OK (service.pas), line = 685
  4187
  4188 2ED9 AD 84 99			lda HLP
  4189 2EDC 18 69 40			add #$40
  4190 2EDF 8D 84 99			sta HLP
  4191 2EE2 AD 85 99			lda HLP+1
  4192 2EE5 69 01			adc #$01
  4193 2EE7 8D 85 99			sta HLP+1
  4194
  4195 				; --- ForToDoEpilog
  4196 2EEA EE DC 9C			inc Y
  4197 2EED D0 CA			jne l_0721
  4198 2EEF			l_072F
  4199
  4200 				; ------------------------------------------------------------
  4201
  4202 = 9CDC			Y	= DATAORIGIN+$0550
  4203
  4204 = 9CDC			@VarData	= Y
  4205 = 0001			@VarDataSize	= 1
  4206
  4207 2EEF			@exit
  4208 					.ifdef @new
  4209 					lda <@VarData
  4210 					sta :ztmp
  4211 					lda >@VarData
  4212 					ldy #@VarDataSize-1
  4213 					jmp @FreeMem
  4214 					els
  4215 2EEF 60				rts						; ret
  4216 					eif
  4217 				.endl
  4218
  4219 2EF0			.local	INITSVGA					; PROCEDURE
  4220
  4221 				; optimize OK (service.pas), line = 701
  4222
  4223 2EF0 AD D7 97			lda GRAPH.GRAPHRESULT
  4224 2EF3 C9 01			cmp #$01
  4225 2EF5 F0 0F			jeq l_0776
  4226
  4227 				; optimize FAIL ('@print', service.pas), line = 702
  4228
  4229 					@printSTRING #CODEORIGIN+$0000
  4229 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4229 2EF7 A0 10		 LDY> CODEORIGIN+$0000
  4229 2EF9 A9 00		 LDA< CODEORIGIN+$0000
  4229 2EFB 20 59 18		 JSR @PRINTSTRING
  4230 2EFE 20 43 18			@printEOL
  4231 2F01 A9 00			lda #$00
  4232 2F03 4C 0C 97			jmp @halt
  4233 2F06			l_0776
  4234
  4235 				; optimize OK (service.pas), line = 706
  4236
  4237 2F06 A9 1F			lda #$1F
  4238 2F08 20 FD 2A			jsr VBXE.SETHORIZONTALRES.@010180000
  4239
  4240 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 707
  4241
  4242 2F0B 20 55 2A			jsr VBXE.COLORMAPOFF
  4243
  4244 				; optimize OK (service.pas), line = 709
  4245
  4246 2F0E A9 07			lda #$07
  4247 2F10 20 2E 2B			jsr VBXE.VBXECONTROL
  4248
  4249 				; optimize OK (service.pas), line = 711
  4250
  4251 2F13 A9 14			lda #$14
  4252 2F15 20 B7 26			jsr VBXE.SETTOPBORDER
  4253
  4254 				; optimize OK (service.pas), line = 712
  4255
  4256 2F18 A9 C8			lda #$C8
  4257 2F1A 20 D0 26			jsr VBXE.SETXDLHEIGHT
  4258
  4259 				; optimize OK (service.pas), line = 714
  4260
  4261 2F1D A9 00			lda #$00
  4262 2F1F 8D 77 98			sta VBXE_RAM.POSITION
  4263 2F22 A9 50			lda #$50
  4264 2F24 8D 78 98			sta VBXE_RAM.POSITION+1
  4265 2F27 A9 00			lda #$00
  4266 2F29 8D 79 98			sta VBXE_RAM.POSITION+2
  4267 2F2C 8D 7A 98			sta VBXE_RAM.POSITION+3
  4268
  4269 				; optimize OK (service.pas), line = 715
  4270
  4271 2F2F 8D 7B 98			sta VBXE_RAM.SIZE
  4272 2F32 A9 FA			lda #$FA
  4273 2F34 8D 7C 98			sta VBXE_RAM.SIZE+1
  4274 2F37 A9 00			lda #$00
  4275 2F39 8D 7D 98			sta VBXE_RAM.SIZE+2
  4276 2F3C 8D 7E 98			sta VBXE_RAM.SIZE+3
  4277
  4278 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 716
  4279
  4280 2F3F AD 1D 97			lda VBXE_RAM
  4281 2F42 AC 1E 97			ldy VBXE_RAM+1
  4282 2F45 20 42 29			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4283
  4284 				; optimize OK (service.pas), line = 718
  4285
  4286 2F48 A9 00			lda #$00
  4287 2F4A 8D 00 D4			sta ATARI.DMACTL
  4288
  4289 				; -------------------  ASM Block 00000148  -------------------
  4290
  4291 2F4D				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2F4D A9 80		        lda     #$80
     3 2F4F A0 5F		        ldy     #FX_MEMS
     4 2F51 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4292 					
  4293 				; optimize OK (service.pas), line = 724
  4294
  4295 2F53 AD 17 97			lda BLT
  4296 2F56 85 84			sta :bp2
  4297 2F58 AD 18 97			lda BLT+1
  4298 2F5B 85 85			sta :bp2+1
  4299 2F5D A9 00			lda #$00
  4300 2F5F A0 14			ldy #$14
  4301 2F61 91 84 88 10 FB		sta:rpl (:bp2),y-
  4302
  4303 				; -------------------  ASM Block 00000149  -------------------
  4304
  4305 2F66				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2F66 A9 00		        lda     #$00
     3 2F68 A0 5F		        ldy     #FX_MEMS
     4 2F6A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4306 					
  4307 2F6C			@exit
  4308 					.ifdef @new
  4309 					lda <@VarData
  4310 					sta :ztmp
  4311 					lda >@VarData
  4312 					ldy #@VarDataSize-1
  4313 					jmp @FreeMem
  4314 					els
  4315 2F6C 60				rts						; ret
  4316 					eif
  4317 				.endl
  4318
  4319 2F6D			.local	SHINE_BLOCK					; PROCEDURE
  4320
  4321 				; optimize OK (service.pas), line = 768
  4322
  4323 2F6D AD 62 99			lda SHINEREC.XB
  4324 2F70 8D DD 9C			sta XB
  4325 2F73 A9 00			lda #$00
  4326 2F75 8D DE 9C			sta XB+1
  4327
  4328 				; optimize OK (service.pas), line = 769
  4329
  4330 2F78 AD 63 99			lda SHINEREC.YB
  4331 2F7B 8D DF 9C			sta YB
  4332 2F7E A9 00			lda #$00
  4333 2F80 8D E0 9C			sta YB+1
  4334
  4335 				; optimize OK (service.pas), line = 771
  4336
  4337 2F83 AD DF 9C			lda YB
  4338 2F86 0A				asl @
  4339 2F87 0A				asl @
  4340 2F88 0A				asl @
  4341 2F89 0A				asl @
  4342 2F8A 18 6D DD 9C			add XB
  4343 2F8E 8D EC 9C			sta I
  4344
  4345 				; optimize OK (service.pas), line = 773
  4346
  4347 2F91 A8				tay
  4348 2F92 B9 00 DB			lda adr.WALL,y
  4349 2F95 C9 09			cmp #$09
  4350 2F97 B0 03 4C EA 30		jcc l_07C9
  4351
  4352 				; optimize OK (service.pas), line = 775
  4353
  4354 2F9C AD 64 99			lda SHINEREC.FRAME
  4355 2F9F 4A				lsr @
  4356 2FA0 8D E1 9C			sta FRAME
  4357 2FA3 A9 00			lda #$00
  4358 2FA5 8D E2 9C			sta FRAME+1
  4359
  4360 				; optimize OK (service.pas), line = 776
  4361
  4362 2FA8 B9 00 DB			lda adr.WALL,y
  4363 2FAB C9 0A			cmp #$0A
  4364 2FAD F0 0E			jeq l_07E9
  4365 2FAF AD E1 9C			lda FRAME
  4366 2FB2 18 69 05			add #$05
  4367 2FB5 8D E1 9C			sta FRAME
  4368 2FB8 90 03			scc
  4369 2FBA EE E2 9C			inc FRAME+1
  4370 2FBD			l_07E9
  4371
  4372 				; optimize OK (service.pas), line = 778
  4373
  4374 2FBD AD DD 9C			lda XB
  4375 2FC0 85 A0			sta :STACKORIGIN+10
  4376 2FC2 AD DE 9C			lda XB+1
  4377 2FC5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4378 2FC7 06 A0			asl :STACKORIGIN+10
  4379 2FC9 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4380 2FCB 06 A0			asl :STACKORIGIN+10
  4381 2FCD 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4382 2FCF 06 A0			asl :STACKORIGIN+10
  4383 2FD1 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4384 2FD3 06 A0			asl :STACKORIGIN+10
  4385 2FD5 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4386 2FD7 A9 09			lda #$09
  4387 2FD9 18 65 A0			add :STACKORIGIN+10
  4388 2FDC 8D E3 9C			sta XF
  4389 2FDF A9 00			lda #$00
  4390 2FE1 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4391 2FE3 8D E4 9C			sta XF+1
  4392
  4393 				; optimize OK (service.pas), line = 779
  4394
  4395 2FE6 AD DF 9C			lda YB
  4396 2FE9 85 A0			sta :STACKORIGIN+10
  4397 2FEB AD E0 9C			lda YB+1
  4398 2FEE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4399 2FF0 06 A0			asl :STACKORIGIN+10
  4400 2FF2 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4401 2FF4 06 A0			asl :STACKORIGIN+10
  4402 2FF6 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4403 2FF8 06 A0			asl :STACKORIGIN+10
  4404 2FFA 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4405 2FFC A9 16			lda #$16
  4406 2FFE 18 65 A0			add :STACKORIGIN+10
  4407 3001 8D E5 9C			sta YF
  4408 3004 A9 00			lda #$00
  4409 3006 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4410 3008 8D E6 9C			sta YF+1
  4411
  4412 				; optimize OK (service.pas), line = 780
  4413
  4414 300B AD E1 9C			lda FRAME
  4415 300E 85 9F			sta :STACKORIGIN+9
  4416 3010 AD E2 9C			lda FRAME+1
  4417 3013 06 9F			asl :STACKORIGIN+9
  4418 3015 2A				rol @
  4419 3016 06 9F			asl :STACKORIGIN+9
  4420 3018 2A				rol @
  4421 3019 06 9F			asl :STACKORIGIN+9
  4422 301B 2A				rol @
  4423 301C 06 9F			asl :STACKORIGIN+9
  4424 301E 2A				rol @
  4425 301F 06 9F			asl :STACKORIGIN+9
  4426 3021 2A				rol @
  4427 3022 06 9F			asl :STACKORIGIN+9
  4428 3024 2A				rol @
  4429 3025 06 9F			asl :STACKORIGIN+9
  4430 3027 2A				rol @
  4431 3028 8D E8 9C			sta FR+1
  4432 302B A5 9F			lda :STACKORIGIN+9
  4433 302D 8D E7 9C			sta FR
  4434
  4435 				; optimize OK (service.pas), line = 782
  4436
  4437 3030 A9 00			lda #$00
  4438 3032 8D EB 9C			sta Y
  4439
  4440 3035			l_0819
  4441 				; --- ForToDoCondition
  4442 3035 AD EB 9C			lda Y
  4443 3038 C9 08			cmp #$08
  4444 303A 90 03 4C EA 30		jcs l_0827
  4445
  4446 				; optimize OK (service.pas), line = 784
  4447
  4448 303F 85 9F			sta :STACKORIGIN+9
  4449 3041 A9 00			lda #$00
  4450 3043 06 9F			asl :STACKORIGIN+9
  4451 3045 2A				rol @
  4452 3046 06 9F			asl :STACKORIGIN+9
  4453 3048 2A				rol @
  4454 3049 06 9F			asl :STACKORIGIN+9
  4455 304B 2A				rol @
  4456 304C 06 9F			asl :STACKORIGIN+9
  4457 304E 2A				rol @
  4458 304F 8D EA 9C			sta OG+1
  4459 3052 A5 9F			lda :STACKORIGIN+9
  4460 3054 8D E9 9C			sta OG
  4461
  4462 				; optimize OK (service.pas), line = 787
  4463
  4464 3057 AD E3 9C			lda XF
  4465 305A 85 A0			sta :STACKORIGIN+10
  4466 305C A9 50			lda #$50
  4467 305E 18 6D E4 9C			add XF+1
  4468 3062 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4469 3064 A9 00			lda #$00
  4470 3066 69 00			adc #$00
  4471 3068 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4472 306A A9 00			lda #$00
  4473 306C 69 00			adc #$00
  4474 306E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4475 3070 AD E5 9C			lda YF
  4476 3073 18 6D EB 9C			add Y
  4477 3077 A8				tay
  4478 3078 A5 A0			lda :STACKORIGIN+10
  4479 307A 18 79 00 C0			add adr.ROW,y
  4480 307E 8D B2 9C			sta BLITROW.DST
  4481 3081 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4482 3083 79 00 C1			adc adr.ROW+256,y
  4483 3086 8D B3 9C			sta BLITROW.DST+1
  4484 3089 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4485 308B 69 00			adc #$00
  4486 308D 8D B4 9C			sta BLITROW.DST+2
  4487 3090 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4488 3092 69 00			adc #$00
  4489 3094 8D B5 9C			sta BLITROW.DST+3
  4490 3097 AD D9 98			lda SHINEWALL.OFS
  4491 309A 18 6D E7 9C			add FR
  4492 309E 85 A1			sta :STACKORIGIN+11
  4493 30A0 AD DA 98			lda SHINEWALL.OFS+1
  4494 30A3 6D E8 9C			adc FR+1
  4495 30A6 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4496 30A8 AD DB 98			lda SHINEWALL.OFS+2
  4497 30AB 69 00			adc #$00
  4498 30AD 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4499 30AF AD DC 98			lda SHINEWALL.OFS+3
  4500 30B2 69 00			adc #$00
  4501 30B4 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4502 30B6 A5 A1			lda :STACKORIGIN+11
  4503 30B8 18 6D E9 9C			add OG
  4504 30BC 8D AE 9C			sta BLITROW.SRC
  4505 30BF A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4506 30C1 6D EA 9C			adc OG+1
  4507 30C4 8D AF 9C			sta BLITROW.SRC+1
  4508 30C7 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4509 30C9 69 00			adc #$00
  4510 30CB 8D B0 9C			sta BLITROW.SRC+2
  4511 30CE A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4512 30D0 69 00			adc #$00
  4513 30D2 8D B1 9C			sta BLITROW.SRC+3
  4514 30D5 A9 10			lda #$10
  4515 30D7 8D B6 9C			sta BLITROW.SIZE
  4516 30DA A9 00			lda #$00
  4517 30DC 8D B7 9C			sta BLITROW.SIZE+1
  4518 30DF 20 2C 2D			jsr BLITROW
  4519
  4520 				; --- ForToDoEpilog
  4521 30E2 EE EB 9C			inc Y
  4522 30E5 F0 03 4C 35 30		jne l_0819
  4523 30EA			l_0827
  4524 30EA			l_07C9
  4525
  4526 				; optimize FAIL (0, service.pas), line = 791
  4527
  4528 30EA EE 64 99			inc SHINEREC.FRAME
  4529
  4530 				; optimize OK (service.pas), line = 792
  4531
  4532 30ED AD 64 99			lda SHINEREC.FRAME
  4533 30F0 C9 0A			cmp #$0A
  4534 30F2 D0 05			jne l_086E
  4535 30F4 A9 00			lda #$00
  4536 30F6 8D 66 99			sta SHINEREC.ACTIVE
  4537 30F9			l_086E
  4538
  4539 				; ------------------------------------------------------------
  4540
  4541 = 9CDD			XB	= DATAORIGIN+$0551
  4542 = 9CDF			YB	= DATAORIGIN+$0553
  4543 = 9CE1			FRAME	= DATAORIGIN+$0555
  4544 = 9CE3			XF	= DATAORIGIN+$0557
  4545 = 9CE5			YF	= DATAORIGIN+$0559
  4546 = 9CE7			FR	= DATAORIGIN+$055B
  4547 = 9CE9			OG	= DATAORIGIN+$055D
  4548 = 9CEB			Y	= DATAORIGIN+$055F
  4549 = 9CEC			I	= DATAORIGIN+$0560
  4550
  4551 = 9CDD			@VarData	= XB
  4552 = 0010			@VarDataSize	= 16
  4553
  4554 30F9			@exit
  4555 					.ifdef @new
  4556 					lda <@VarData
  4557 					sta :ztmp
  4558 					lda >@VarData
  4559 					ldy #@VarDataSize-1
  4560 					jmp @FreeMem
  4561 					els
  4562 30F9 60				rts						; ret
  4563 					eif
  4564 				.endl
  4565
  4566 30FA			.local	UNSHINE_BLOCK					; PROCEDURE
  4567
  4568 				; optimize OK (service.pas), line = 801
  4569
  4570 30FA A9 09			lda #$09
  4571 30FC 8D 64 99			sta SHINEREC.FRAME
  4572
  4573 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 802
  4574
  4575 30FF 20 6D 2F			jsr SHINE_BLOCK
  4576
  4577 3102			@exit
  4578 					.ifdef @new
  4579 					lda <@VarData
  4580 					sta :ztmp
  4581 					lda >@VarData
  4582 					ldy #@VarDataSize-1
  4583 					jmp @FreeMem
  4584 					els
  4585 3102 60				rts						; ret
  4586 					eif
  4587 				.endl
  4588
  4589 3103			.local	SHINE						; PROCEDURE
  4590
  4591 				; optimize OK (service.pas), line = 809
  4592
  4593 3103 AD 66 99			lda SHINEREC.ACTIVE
  4594 3106 F0 03			jeq l_088E
  4595 3108 20 FA 30			jsr UNSHINE_BLOCK
  4596 310B			l_088E
  4597
  4598 				; optimize OK (service.pas), line = 811
  4599
  4600 310B AD ED 9C			lda XB
  4601 310E 8D 62 99			sta SHINEREC.XB
  4602
  4603 				; optimize OK (service.pas), line = 812
  4604
  4605 3111 AD EE 9C			lda YB
  4606 3114 8D 63 99			sta SHINEREC.YB
  4607
  4608 				; optimize OK (service.pas), line = 813
  4609
  4610 3117 A9 00			lda #$00
  4611 3119 8D 64 99			sta SHINEREC.FRAME
  4612
  4613 				; optimize OK (service.pas), line = 814
  4614
  4615 311C A9 01			lda #$01
  4616 311E 8D 66 99			sta SHINEREC.ACTIVE
  4617
  4618 				; optimize OK (service.pas), line = 815
  4619
  4620 3121 AD EE 9C			lda YB
  4621 3124 0A				asl @
  4622 3125 0A				asl @
  4623 3126 0A				asl @
  4624 3127 0A				asl @
  4625 3128 18 6D ED 9C			add XB
  4626 312C A8				tay
  4627 312D B9 00 DB			lda adr.WALL,y
  4628 3130 8D 65 99			sta SHINEREC.BLOCK
  4629
  4630 				; ------------------------------------------------------------
  4631
  4632 = 9CED			XB	= DATAORIGIN+$0561
  4633 = 9CEE			YB	= DATAORIGIN+$0562
  4634
  4635 = 9CED			@VarData	= XB
  4636 = 0002			@VarDataSize	= 2
  4637
  4638 3133			@exit
  4639 					.ifdef @new
  4640 					lda <@VarData
  4641 					sta :ztmp
  4642 					lda >@VarData
  4643 					ldy #@VarDataSize-1
  4644 					jmp @FreeMem
  4645 					els
  4646 3133 60				rts						; ret
  4647 					eif
  4648 				.endl
  4649
  4650 3134			.local	CHECKSHINE					; PROCEDURE
  4651
  4652 				; optimize OK (service.pas), line = 821
  4653
  4654 3134 AD 66 99			lda SHINEREC.ACTIVE
  4655 3137 C9 01			cmp #$01
  4656 3139 D0 03			jne l_08CF
  4657 313B 20 6D 2F			jsr SHINE_BLOCK
  4658 313E			l_08CF
  4659
  4660 313E			@exit
  4661 					.ifdef @new
  4662 					lda <@VarData
  4663 					sta :ztmp
  4664 					lda >@VarData
  4665 					ldy #@VarDataSize-1
  4666 					jmp @FreeMem
  4667 					els
  4668 313E 60				rts						; ret
  4669 					eif
  4670 				.endl
  4671
  4672 313F			.local	RANDOM_LETTER_DROP				; FUNCTION
  4673
  4674 				; --- RepeatUntilProlog
  4675 313F			l_08D8
  4676
  4677 				; optimize OK (service.pas), line = 829
  4678
  4679 313F A9 64			lda #$64
  4680 3141 20 21 26			jsr SYSTEM.RANDOM.@010180000
  4681 3144 AD D1 97			lda SYSTEM.RANDOM.@010180000.RESULT
  4682 3147 8D F1 9C			sta RN
  4683 314A A9 00			lda #$00
  4684 314C 8D F2 9C			sta RN+1
  4685
  4686 				; optimize OK (service.pas), line = 830
  4687
  4688 314F A9 00			lda #$00
  4689 3151 8D F3 9C			sta SUM
  4690 3154 8D F4 9C			sta SUM+1
  4691
  4692 				; optimize OK (service.pas), line = 831
  4693
  4694 3157 8D F5 9C			sta LETTER
  4695 315A 8D F6 9C			sta LETTER+1
  4696
  4697 				; --- RepeatUntilProlog
  4698 315D			l_08E6
  4699
  4700 				; optimize FAIL (0, service.pas), line = 836
  4701
  4702 315D EE F5 9C			inc LETTER
  4703 3160 D0 03			sne
  4704 3162 EE F6 9C			inc LETTER+1
  4705
  4706 				; optimize OK (service.pas), line = 837
  4707
  4708 3165 AC F5 9C			ldy LETTER
  4709 3168 B9 DD 10			lda adr.LETTER_DIS,y
  4710 316B 18 6D F3 9C			add SUM
  4711 316F 8D F3 9C			sta SUM
  4712 3172 AD F4 9C			lda SUM+1
  4713 3175 69 00			adc #$00
  4714 3177 8D F4 9C			sta SUM+1
  4715
  4716 				; optimize OK (service.pas), line = 840
  4717
  4718 317A AD F2 9C			lda RN+1
  4719 317D CD F4 9C			cmp SUM+1
  4720 3180 D0 06			bne @+
  4721 3182 AD F1 9C			lda RN
  4722 3185 CD F3 9C			cmp SUM
  4723 				@
  4724 3188 B0 D3			jcs l_08E6
  4725
  4726 				; optimize OK (service.pas), line = 844
  4727
  4728 318A AD F5 9C			lda LETTER
  4729 318D 38 E9 01			sub #$01
  4730 3190 85 9F			sta :STACKORIGIN+9
  4731 3192 AD F6 9C			lda LETTER+1
  4732 3195 E9 00			sbc #$00
  4733 3197 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4734 3199 A9 00			lda #$00
  4735 319B E9 00			sbc #$00
  4736 319D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4737 319F A9 00			lda #$00
  4738 31A1 E9 00			sbc #$00
  4739 31A3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  4740 31A5 AD 79 99			lda LETT.LAST
  4741 31A8 85 A0			sta :STACKORIGIN+10
  4742 31AA A0 00			ldy #$00
  4743 31AC AD 7A 99			lda LETT.LAST+1
  4744 31AF 10 01			spl
  4745 31B1 88				dey
  4746 31B2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4747 31B4 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  4748 31B6 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  4749 31B8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  4750 31BA C5 D0			cmp :STACKORIGIN+STACKWIDTH*3+10
  4751 31BC D0 10			bne @+
  4752 31BE A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  4753 31C0 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  4754 31C2 D0 0A			bne @+
  4755 31C4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4756 31C6 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4757 31C8 D0 04			bne @+
  4758 31CA A5 9F			lda :STACKORIGIN+9
  4759 31CC C5 A0			cmp :STACKORIGIN+10
  4760 				@
  4761 31CE D0 03 4C 3F 31		jeq l_08D8
  4762
  4763 				; optimize OK (service.pas), line = 846
  4764
  4765 31D3 AD F5 9C			lda LETTER
  4766 31D6 38 E9 01			sub #$01
  4767 31D9 8D EF 9C			sta RESULT
  4768 31DC AD F6 9C			lda LETTER+1
  4769 31DF E9 00			sbc #$00
  4770 31E1 8D F0 9C			sta RESULT+1
  4771 31E4			@exit
  4772
  4773 				; ------------------------------------------------------------
  4774
  4775 = 9CEF			RESULT	= DATAORIGIN+$0563
  4776 = 9CF1			RN	= DATAORIGIN+$0565
  4777 = 9CF3			SUM	= DATAORIGIN+$0567
  4778 = 9CF5			LETTER	= DATAORIGIN+$0569
  4779
  4780 = 9CF1			@VarData	= RN
  4781 = 0006			@VarDataSize	= 6
  4782
  4783 31E4 60				rts						; ret
  4784 				.endl
  4785
  4786 31E5			.local	PUT_LETTER					; PROCEDURE
  4787
  4788 				; optimize OK (service.pas), line = 855
  4789
  4790 31E5 A9 00			lda #$00
  4791 31E7 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4792 31E9 AD 6D 99			lda LETT.TYP+1
  4793 31EC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4794 31EE AD 6C 99			lda LETT.TYP
  4795 31F1 0A				asl @
  4796 31F2 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4797 31F4 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4798 31F6 0A				asl @
  4799 31F7 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4800 31F9 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4801 31FB 85 9F			sta :STACKORIGIN+9
  4802 31FD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4803 31FF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4804 3201 A5 9F			lda :STACKORIGIN+9
  4805 3203 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4806 3205 AD 6E 99			lda LETT.FRAME
  4807 3208 85 A0			sta :STACKORIGIN+10
  4808 320A A9 00			lda #$00
  4809 320C 06 A0			asl :STACKORIGIN+10
  4810 320E 2A				rol @
  4811 320F 06 A0			asl :STACKORIGIN+10
  4812 3211 2A				rol @
  4813 3212 06 A0			asl :STACKORIGIN+10
  4814 3214 2A				rol @
  4815 3215 06 A0			asl :STACKORIGIN+10
  4816 3217 2A				rol @
  4817 3218 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4818 321B 8D F8 9C			sta FL+1
  4819 321E A5 A0			lda :STACKORIGIN+10
  4820 3220 8D F7 9C			sta FL
  4821
  4822 				; optimize OK (service.pas), line = 857
  4823
  4824 3223 A9 00			lda #$00
  4825 3225 8D FB 9C			sta YL
  4826
  4827 3228			l_0936
  4828 				; --- ForToDoCondition
  4829 3228 AD FB 9C			lda YL
  4830 322B C9 08			cmp #$08
  4831 322D 90 03 4C CE 32		jcs l_0944
  4832
  4833 				; optimize OK (service.pas), line = 859
  4834
  4835 3232 85 9F			sta :STACKORIGIN+9
  4836 3234 A9 00			lda #$00
  4837 3236 06 9F			asl :STACKORIGIN+9
  4838 3238 2A				rol @
  4839 3239 06 9F			asl :STACKORIGIN+9
  4840 323B 2A				rol @
  4841 323C 06 9F			asl :STACKORIGIN+9
  4842 323E 2A				rol @
  4843 323F 06 9F			asl :STACKORIGIN+9
  4844 3241 2A				rol @
  4845 3242 06 9F			asl :STACKORIGIN+9
  4846 3244 2A				rol @
  4847 3245 06 9F			asl :STACKORIGIN+9
  4848 3247 2A				rol @
  4849 3248 06 9F			asl :STACKORIGIN+9
  4850 324A 2A				rol @
  4851 324B 8D FA 9C			sta FW+1
  4852 324E A5 9F			lda :STACKORIGIN+9
  4853 3250 8D F9 9C			sta FW
  4854
  4855 				; optimize OK (service.pas), line = 861
  4856
  4857 3253 AD 6B 99			lda LETT.Y
  4858 3256 18 6D FB 9C			add YL
  4859 325A A8				tay
  4860 325B AD 6A 99			lda LETT.X
  4861 325E 18 79 00 C0			add adr.ROW,y
  4862 3262 8D A0 9C			sta BLITZERO.DST
  4863 3265 A9 50			lda #$50
  4864 3267 79 00 C1			adc adr.ROW+256,y
  4865 326A 8D A1 9C			sta BLITZERO.DST+1
  4866 326D A9 00			lda #$00
  4867 326F 69 00			adc #$00
  4868 3271 8D A2 9C			sta BLITZERO.DST+2
  4869 3274 A9 00			lda #$00
  4870 3276 69 00			adc #$00
  4871 3278 8D A3 9C			sta BLITZERO.DST+3
  4872 327B AD F1 98			lda LETTERS.OFS
  4873 327E 18 6D F9 9C			add FW
  4874 3282 85 A1			sta :STACKORIGIN+11
  4875 3284 AD F2 98			lda LETTERS.OFS+1
  4876 3287 6D FA 9C			adc FW+1
  4877 328A 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4878 328C AD F3 98			lda LETTERS.OFS+2
  4879 328F 69 00			adc #$00
  4880 3291 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4881 3293 AD F4 98			lda LETTERS.OFS+3
  4882 3296 69 00			adc #$00
  4883 3298 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4884 329A A5 A1			lda :STACKORIGIN+11
  4885 329C 18 6D F7 9C			add FL
  4886 32A0 8D 9C 9C			sta BLITZERO.SRC
  4887 32A3 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4888 32A5 6D F8 9C			adc FL+1
  4889 32A8 8D 9D 9C			sta BLITZERO.SRC+1
  4890 32AB A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4891 32AD 69 00			adc #$00
  4892 32AF 8D 9E 9C			sta BLITZERO.SRC+2
  4893 32B2 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4894 32B4 69 00			adc #$00
  4895 32B6 8D 9F 9C			sta BLITZERO.SRC+3
  4896 32B9 A9 10			lda #$10
  4897 32BB 8D A4 9C			sta BLITZERO.SIZE
  4898 32BE A9 00			lda #$00
  4899 32C0 8D A5 9C			sta BLITZERO.SIZE+1
  4900 32C3 20 79 2C			jsr BLITZERO
  4901
  4902 				; --- ForToDoEpilog
  4903 32C6 EE FB 9C			inc YL
  4904 32C9 F0 03 4C 28 32		jne l_0936
  4905 32CE			l_0944
  4906
  4907 				; ------------------------------------------------------------
  4908
  4909 = 9CF7			FL	= DATAORIGIN+$056B
  4910 = 9CF9			FW	= DATAORIGIN+$056D
  4911 = 9CFB			YL	= DATAORIGIN+$056F
  4912
  4913 = 9CF7			@VarData	= FL
  4914 = 0005			@VarDataSize	= 5
  4915
  4916 32CE			@exit
  4917 					.ifdef @new
  4918 					lda <@VarData
  4919 					sta :ztmp
  4920 					lda >@VarData
  4921 					ldy #@VarDataSize-1
  4922 					jmp @FreeMem
  4923 					els
  4924 32CE 60				rts						; ret
  4925 					eif
  4926 				.endl
  4927
  4928 32CF			.local	REMOVE_LETTER					; PROCEDURE
  4929
  4930 				; optimize OK (service.pas), line = 873
  4931
  4932 32CF A9 00			lda #$00
  4933 32D1 8D FE 9C			sta YL
  4934
  4935 32D4			l_0982
  4936 				; --- ForToDoCondition
  4937 32D4 AD FE 9C			lda YL
  4938 32D7 C9 08			cmp #$08
  4939 32D9 B0 6F			jcs l_0990
  4940
  4941 				; optimize OK (service.pas), line = 875
  4942
  4943 32DB AD 6B 99			lda LETT.Y
  4944 32DE 6D FE 9C			adc YL
  4945 32E1 A8				tay
  4946 32E2 AD 6A 99			lda LETT.X
  4947 32E5 18 79 00 C0			add adr.ROW,y
  4948 32E9 8D FC 9C			sta AD
  4949 32EC A9 00			lda #$00
  4950 32EE 79 00 C1			adc adr.ROW+256,y
  4951 32F1 8D FD 9C			sta AD+1
  4952
  4953 				; optimize OK (service.pas), line = 876
  4954
  4955 32F4 C9 FA			cmp #$FA
  4956 32F6 B0 4D			jcs l_09B5
  4957
  4958 				; optimize OK (service.pas), line = 879
  4959
  4960 32F8 AD FC 9C			lda AD
  4961 32FB 8D B2 9C			sta BLITROW.DST
  4962 32FE A9 50			lda #$50
  4963 3300 18 6D FD 9C			add AD+1
  4964 3304 8D B3 9C			sta BLITROW.DST+1
  4965 3307 A9 00			lda #$00
  4966 3309 69 00			adc #$00
  4967 330B 8D B4 9C			sta BLITROW.DST+2
  4968 330E A9 00			lda #$00
  4969 3310 69 00			adc #$00
  4970 3312 8D B5 9C			sta BLITROW.DST+3
  4971 3315 AD 91 98			lda PLAYSCREEN.OFS
  4972 3318 18 6D FC 9C			add AD
  4973 331C 8D AE 9C			sta BLITROW.SRC
  4974 331F AD 92 98			lda PLAYSCREEN.OFS+1
  4975 3322 6D FD 9C			adc AD+1
  4976 3325 8D AF 9C			sta BLITROW.SRC+1
  4977 3328 AD 93 98			lda PLAYSCREEN.OFS+2
  4978 332B 69 00			adc #$00
  4979 332D 8D B0 9C			sta BLITROW.SRC+2
  4980 3330 AD 94 98			lda PLAYSCREEN.OFS+3
  4981 3333 69 00			adc #$00
  4982 3335 8D B1 9C			sta BLITROW.SRC+3
  4983 3338 A9 10			lda #$10
  4984 333A 8D B6 9C			sta BLITROW.SIZE
  4985 333D A9 00			lda #$00
  4986 333F 8D B7 9C			sta BLITROW.SIZE+1
  4987 3342 20 2C 2D			jsr BLITROW
  4988 3345			l_09B5
  4989
  4990 				; --- ForToDoEpilog
  4991 3345 EE FE 9C			inc YL
  4992 3348 D0 8A			jne l_0982
  4993 334A			l_0990
  4994
  4995 				; ------------------------------------------------------------
  4996
  4997 = 9CFC			AD	= DATAORIGIN+$0570
  4998 = 9CFE			YL	= DATAORIGIN+$0572
  4999
  5000 = 9CFC			@VarData	= AD
  5001 = 0003			@VarDataSize	= 3
  5002
  5003 334A			@exit
  5004 					.ifdef @new
  5005 					lda <@VarData
  5006 					sta :ztmp
  5007 					lda >@VarData
  5008 					ldy #@VarDataSize-1
  5009 					jmp @FreeMem
  5010 					els
  5011 334A 60				rts						; ret
  5012 					eif
  5013 				.endl
  5014
  5015 334B			.local	DISABLE_LETTER					; PROCEDURE
  5016
  5017 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 887
  5018
  5019 334B 20 CF 32			jsr REMOVE_LETTER
  5020
  5021 				; optimize OK (service.pas), line = 888
  5022
  5023 334E A9 00			lda #$00
  5024 3350 8D 70 99			sta LETT.ACTIVE
  5025
  5026 3353			@exit
  5027 					.ifdef @new
  5028 					lda <@VarData
  5029 					sta :ztmp
  5030 					lda >@VarData
  5031 					ldy #@VarDataSize-1
  5032 					jmp @FreeMem
  5033 					els
  5034 3353 60				rts						; ret
  5035 					eif
  5036 				.endl
  5037
  5038 3354			.local	START_LETTER					; PROCEDURE
  5039
  5040 				; optimize OK (service.pas), line = 894
  5041
  5042 3354 AD 70 99			lda LETT.ACTIVE
  5043 3357 F0 03			jeq l_09E4
  5044 3359 20 4B 33			jsr DISABLE_LETTER
  5045 335C			l_09E4
  5046
  5047 				; optimize OK (service.pas), line = 896
  5048
  5049 335C AD FF 9C			lda XL
  5050 335F 8D 6A 99			sta LETT.X
  5051
  5052 				; optimize OK (service.pas), line = 897
  5053
  5054 3362 AD 01 9D			lda YL
  5055 3365 8D 6B 99			sta LETT.Y
  5056
  5057 				; optimize OK (service.pas), line = 898
  5058
  5059 3368 AD 03 9D			lda LETTER
  5060 336B 8D 6C 99			sta LETT.TYP
  5061 336E AD 04 9D			lda LETTER+1
  5062 3371 8D 6D 99			sta LETT.TYP+1
  5063
  5064 				; optimize OK (service.pas), line = 899
  5065
  5066 3374 A9 00			lda #$00
  5067 3376 8D 6E 99			sta LETT.FRAME
  5068
  5069 				; optimize OK (service.pas), line = 900
  5070
  5071 3379 8D 6F 99			sta LETT.SUBFRAME
  5072
  5073 				; optimize OK (service.pas), line = 901
  5074
  5075 337C A9 01			lda #$01
  5076 337E 8D 70 99			sta LETT.ACTIVE
  5077
  5078 				; ------------------------------------------------------------
  5079
  5080 = 9CFF			XL	= DATAORIGIN+$0573
  5081 = 9D01			YL	= DATAORIGIN+$0575
  5082 = 9D03			LETTER	= DATAORIGIN+$0577
  5083
  5084 = 9CFF			@VarData	= XL
  5085 = 0006			@VarDataSize	= 6
  5086
  5087 3381			@exit
  5088 					.ifdef @new
  5089 					lda <@VarData
  5090 					sta :ztmp
  5091 					lda >@VarData
  5092 					ldy #@VarDataSize-1
  5093 					jmp @FreeMem
  5094 					els
  5095 3381 60				rts						; ret
  5096 					eif
  5097 				.endl
  5098
  5099 3382			.local	CHECK_LETTER					; PROCEDURE
  5100
  5101 				; optimize OK (service.pas), line = 907
  5102
  5103 3382 AD 70 99			lda LETT.ACTIVE
  5104 3385 D0 03 4C 81 34		jeq l_0A13
  5105
  5106 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 909
  5107
  5108 338A 20 CF 32			jsr REMOVE_LETTER
  5109
  5110 				; optimize FAIL (0, service.pas), line = 910
  5111
  5112 338D EE 6B 99			inc LETT.Y
  5113
  5114 				; optimize OK (service.pas), line = 911
  5115
  5116 3390 AD 6B 99			lda LETT.Y
  5117 3393 C9 C8			cmp #$C8
  5118 3395 90 03			jcc l_0A2B
  5119 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 912
  5120 3397 4C 73 34			jmp l_0A36
  5121 339A			l_0A2B
  5122
  5123 				; optimize FAIL ('PUT_LETTER', service.pas), line = 914
  5124
  5125 339A 20 E5 31			jsr PUT_LETTER
  5126
  5127 				; optimize FAIL (0, service.pas), line = 915
  5128
  5129 339D EE 6F 99			inc LETT.SUBFRAME
  5130
  5131 				; optimize OK (service.pas), line = 916
  5132
  5133 33A0 AD 6F 99			lda LETT.SUBFRAME
  5134 33A3 C9 05			cmp #$05
  5135 33A5 D0 08			jne l_0A4D
  5136
  5137 				; optimize OK (service.pas), line = 918
  5138
  5139 33A7 A9 00			lda #$00
  5140 33A9 8D 6F 99			sta LETT.SUBFRAME
  5141
  5142 				; optimize FAIL (0, service.pas), line = 919
  5143
  5144 33AC EE 6E 99			inc LETT.FRAME
  5145 33AF			l_0A4D
  5146
  5147 				; optimize OK (service.pas), line = 922
  5148
  5149 33AF AD 6E 99			lda LETT.FRAME
  5150 33B2 C9 08			cmp #$08
  5151 33B4 D0 05			jne l_0A6A
  5152 33B6 A9 00			lda #$00
  5153 33B8 8D 6E 99			sta LETT.FRAME
  5154 33BB			l_0A6A
  5155
  5156 				; optimize OK (service.pas), line = 924
  5157
  5158 33BB AD 6A 99			lda LETT.X
  5159 33BE 18 69 10			add #$10
  5160 33C1 85 A0			sta :STACKORIGIN+10
  5161 33C3 A9 00			lda #$00
  5162 33C5 69 00			adc #$00
  5163 33C7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5164 33C9 A9 00			lda #$00
  5165 33CB C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5166 33CD D0 05			bne @+
  5167 33CF AD 05 99			lda VAUS.X
  5168 33D2 C5 A0			cmp :STACKORIGIN+10
  5169 				@
  5170 33D4 90 03 4C 76 34		jcs l_0AC3
  5171 				@
  5172 33D9 AD 05 99			lda VAUS.X
  5173 33DC 18 6D 0D 99			add VAUS.WIDTH
  5174 33E0 85 A0			sta :STACKORIGIN+10
  5175 33E2 A9 00			lda #$00
  5176 33E4 69 00			adc #$00
  5177 33E6 C9 00			cmp #$00
  5178 33E8 D0 05			bne @+
  5179 33EA A5 A0			lda :STACKORIGIN+10
  5180 33EC CD 6A 99			cmp LETT.X
  5181 				@
  5182 33EF B0 03 4C 76 34		jcc l_0AC3
  5183 33F4 D0 03 4C 76 34		jeq l_0AC3
  5184 				@
  5185 33F9 AD 6B 99			lda LETT.Y
  5186 33FC 18 69 08			add #$08
  5187 33FF 85 A1			sta :STACKORIGIN+11
  5188 3401 A9 00			lda #$00
  5189 3403 69 00			adc #$00
  5190 3405 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5191 3407 A9 00			lda #$00
  5192 3409 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5193 340B D0 05			bne @+
  5194 340D AD 06 99			lda VAUS.Y
  5195 3410 C5 A1			cmp :STACKORIGIN+11
  5196 				@
  5197 3412 B0 62			jcs l_0AC3
  5198 				@
  5199 3414 AD 06 99			lda VAUS.Y
  5200 3417 18 6D 0E 99			add VAUS.HEIGHT
  5201 341B 85 A0			sta :STACKORIGIN+10
  5202 341D A9 00			lda #$00
  5203 341F 69 00			adc #$00
  5204 3421 C9 00			cmp #$00
  5205 3423 D0 05			bne @+
  5206 3425 A5 A0			lda :STACKORIGIN+10
  5207 3427 CD 6B 99			cmp LETT.Y
  5208 				@
  5209 342A 90 4A			jcc l_0AC3
  5210 342C F0 48			jeq l_0AC3
  5211 				@
  5212
  5213 				; optimize OK (service.pas), line = 927
  5214
  5215 342E A9 64			lda #$64
  5216 3430 8D 81 98			sta BALL_BLOCK_SOUND.A
  5217 3433 A9 00			lda #$00
  5218 3435 8D 82 98			sta BALL_BLOCK_SOUND.A+1
  5219 3438 A9 0A			lda #$0A
  5220 343A 8D 83 98			sta BALL_BLOCK_SOUND.B
  5221 343D A9 00			lda #$00
  5222 343F 8D 84 98			sta BALL_BLOCK_SOUND.B+1
  5223 3442 20 5D 2B			jsr BALL_BLOCK_SOUND
  5224
  5225 				; optimize OK (service.pas), line = 928
  5226
  5227 3445 AC 6C 99			ldy LETT.TYP
  5228 3448 C8				iny
  5229 3449 8C 11 99			sty VAUS.LETTER
  5230
  5231 				; optimize OK (service.pas), line = 929
  5232
  5233 344C AD 61 99			lda CUR_PLAYER
  5234 344F 0A				asl @
  5235 3450 0A				asl @
  5236 3451 A8				tay
  5237 3452 B9 46 99			lda adr.SCORE.PLAYER,y
  5238 3455 18 69 E8			add #$E8
  5239 3458 99 46 99			sta adr.SCORE.PLAYER,y
  5240 345B B9 47 99			lda adr.SCORE.PLAYER+1,y
  5241 345E 69 03			adc #$03
  5242 3460 99 47 99			sta adr.SCORE.PLAYER+1,y
  5243 3463 B9 48 99			lda adr.SCORE.PLAYER+2,y
  5244 3466 69 00			adc #$00
  5245 3468 99 48 99			sta adr.SCORE.PLAYER+2,y
  5246 346B B9 49 99			lda adr.SCORE.PLAYER+3,y
  5247 346E 69 00			adc #$00
  5248 3470 99 49 99			sta adr.SCORE.PLAYER+3,y
  5249 3473			l_0A36
  5250
  5251 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 930
  5252
  5253 3473 20 4B 33			jsr DISABLE_LETTER
  5254 3476			l_0AC3
  5255
  5256 				; optimize OK (service.pas), line = 934
  5257
  5258 3476 A9 00			lda #$00
  5259 3478 8D 71 99			sta LETT.INCOMING
  5260 347B 8D 72 99			sta LETT.INCOMING+1
  5261 347E 4C B8 34			jmp l_0AE4
  5262 3481			l_0A13
  5263
  5264 				; optimize OK (service.pas), line = 936
  5265
  5266 3481 AD 71 99			lda LETT.INCOMING
  5267 3484 C9 E9			cmp #$E9
  5268 3486 AD 72 99			lda LETT.INCOMING+1
  5269 3489 E9 03			sbc #$03
  5270 348B 50 02			svc
  5271 348D 49 80			eor #$80
  5272 348F 30 27			jmi l_0AF5
  5273
  5274 				; optimize OK (service.pas), line = 937
  5275
  5276 3491 AD 73 99			lda LETT.NEXTX
  5277 3494 8D FF 9C			sta START_LETTER.XL
  5278 3497 AD 74 99			lda LETT.NEXTX+1
  5279 349A 8D 00 9D			sta START_LETTER.XL+1
  5280 349D AD 75 99			lda LETT.NEXTY
  5281 34A0 8D 01 9D			sta START_LETTER.YL
  5282 34A3 AD 76 99			lda LETT.NEXTY+1
  5283 34A6 8D 02 9D			sta START_LETTER.YL+1
  5284 34A9 AD 77 99			lda LETT.NEXTTYPE
  5285 34AC 8D 03 9D			sta START_LETTER.LETTER
  5286 34AF AD 78 99			lda LETT.NEXTTYPE+1
  5287 34B2 8D 04 9D			sta START_LETTER.LETTER+1
  5288 34B5 20 54 33			jsr START_LETTER
  5289 34B8			l_0AE4
  5290 34B8			l_0AF5
  5291
  5292 34B8			@exit
  5293 					.ifdef @new
  5294 					lda <@VarData
  5295 					sta :ztmp
  5296 					lda >@VarData
  5297 					ldy #@VarDataSize-1
  5298 					jmp @FreeMem
  5299 					els
  5300 34B8 60				rts						; ret
  5301 					eif
  5302 				.endl
  5303
  5304 34B9			.local	SHOWBTMPICTURE					; PROCEDURE
  5305
  5306 				; ------------------------------------------------------------
  5307
  5308 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5309 				; as Pointer
  5310 34B9 B5 96			lda :STACKORIGIN,x
  5311 34BB 85 84			sta :bp2
  5312 34BD B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5313 34BF 85 85			sta :bp2+1
  5314 34C1 A0 07			ldy #$07
  5315 34C3 B1 84 99 05 9D 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5316 34CB CA				dex
  5317 34CC			@main
  5318
  5319 				; optimize OK (service.pas), line = 947
  5320
  5321 34CC AD 09 9D			lda BTM.OFS
  5322 34CF 8D 91 9C			sta BLITBOX.SRC
  5323 34D2 AD 0A 9D			lda BTM.OFS+1
  5324 34D5 8D 92 9C			sta BLITBOX.SRC+1
  5325 34D8 AD 0B 9D			lda BTM.OFS+2
  5326 34DB 8D 93 9C			sta BLITBOX.SRC+2
  5327 34DE AD 0C 9D			lda BTM.OFS+3
  5328 34E1 8D 94 9C			sta BLITBOX.SRC+3
  5329 34E4 A9 00			lda #$00
  5330 34E6 8D 95 9C			sta BLITBOX.DST
  5331 34E9 A9 50			lda #$50
  5332 34EB 8D 96 9C			sta BLITBOX.DST+1
  5333 34EE A9 00			lda #$00
  5334 34F0 8D 97 9C			sta BLITBOX.DST+2
  5335 34F3 8D 98 9C			sta BLITBOX.DST+3
  5336 34F6 AD 05 9D			lda BTM.WIDTH
  5337 34F9 8D 99 9C			sta BLITBOX.W
  5338 34FC AD 06 9D			lda BTM.WIDTH+1
  5339 34FF 8D 9A 9C			sta BLITBOX.W+1
  5340 3502 AD 07 9D			lda BTM.HEIGHT
  5341 3505 8D 9B 9C			sta BLITBOX.H
  5342 3508 20 E8 2B			jsr BLITBOX
  5343
  5344 				; ------------------------------------------------------------
  5345
  5346 = 9D05			adr.BTM	= DATAORIGIN+$0579	; [8] RECORD
  5347 350B			.var BTM	= adr.BTM .word
  5348 = 9D05			BTM.WIDTH	= DATAORIGIN+$0579
  5349 = 9D07			BTM.HEIGHT	= DATAORIGIN+$057B
  5350 = 9D09			BTM.OFS	= DATAORIGIN+$057D
  5351 = 9D0D			X	= DATAORIGIN+$0581
  5352 = 9D0F			Y	= DATAORIGIN+$0583
  5353 = 9D11			OFST	= DATAORIGIN+$0585
  5354
  5355 = 9D05			@VarData	= BTM.WIDTH
  5356 = 000E			@VarDataSize	= 14
  5357
  5358 350B			@exit
  5359 					.ifdef @new
  5360 					lda <@VarData
  5361 					sta :ztmp
  5362 					lda >@VarData
  5363 					ldy #@VarDataSize-1
  5364 					jmp @FreeMem
  5365 					els
  5366 350B 60				rts						; ret
  5367 					eif
  5368 = 350C 05 9D		BTM
  5368 				.endl
  5369
  5370 350E			.local	SETPALETTE					; PROCEDURE
  5371
  5372 				; ------------------------------------------------------------
  5373
  5374 = 9D13			BTM	= DATAORIGIN+$0587
  5375 = 978C			BTM.WIDTH	= DATAORIGIN+$0000
  5376 = 978E			BTM.HEIGHT	= DATAORIGIN+$0002
  5377 = 9790			BTM.OFS	= DATAORIGIN+$0004
  5378
  5379 = 9D13			@VarData	= BTM
  5380 = 0002			@VarDataSize	= 2
  5381
  5382 350E			@exit
  5383 					.ifdef @new
  5384 					lda <@VarData
  5385 					sta :ztmp
  5386 					lda >@VarData
  5387 					ldy #@VarDataSize-1
  5388 					jmp @FreeMem
  5389 					els
  5390 350E 60				rts						; ret
  5391 					eif
  5392 				.endl
  5393
  5394 350F			.local	PLACE_BALL					; PROCEDURE
  5395
  5396 				; optimize OK (service.pas), line = 1041
  5397
  5398 350F A9 00			lda #$00
  5399 3511 8D 1C 9D			sta X
  5400
  5401 				; optimize OK (service.pas), line = 1043
  5402
  5403 3514 8D 1B 9D			sta YP
  5404
  5405 3517			l_0B22
  5406 				; --- ForToDoCondition
  5407 3517 AD 1B 9D			lda YP
  5408 351A C9 05			cmp #$05
  5409 351C 90 03 4C B2 35		jcs l_0B30
  5410
  5411 				; optimize OK (service.pas), line = 1045
  5412
  5413 3521 AC 17 9D 84 84 AC + 	mwy BALL :bp2
  5414 352B A0 00			ldy #BALL.X-DATAORIGIN
  5415 352D B1 84			lda (:bp2),y
  5416 352F 38 E9 03			sub #$03
  5417 3532 85 9F			sta :STACKORIGIN+9
  5418 3534 C8				iny
  5419 3535 B1 84			lda (:bp2),y
  5420 3537 E9 00			sbc #$00
  5421 3539 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5422 353B A0 02			ldy #BALL.Y-DATAORIGIN
  5423 353D B1 84			lda (:bp2),y
  5424 353F 18 6D 1B 9D			add YP
  5425 3543 A8				tay
  5426 3544 A5 9F			lda :STACKORIGIN+9
  5427 3546 18 79 FD BF			add adr.ROW-$03,y
  5428 354A 8D 84 99			sta HLP
  5429 354D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5430 354F 79 FD C0			adc adr.ROW+256-$03,y
  5431 3552 8D 85 99			sta HLP+1
  5432
  5433 				; optimize OK (service.pas), line = 1048
  5434
  5435 3555 AD 84 99			lda HLP
  5436 3558 8D A0 9C			sta BLITZERO.DST
  5437 355B A9 50			lda #$50
  5438 355D 18 6D 85 99			add HLP+1
  5439 3561 8D A1 9C			sta BLITZERO.DST+1
  5440 3564 A9 00			lda #$00
  5441 3566 69 00			adc #$00
  5442 3568 8D A2 9C			sta BLITZERO.DST+2
  5443 356B A9 00			lda #$00
  5444 356D 69 00			adc #$00
  5445 356F 8D A3 9C			sta BLITZERO.DST+3
  5446 3572 AD 89 98			lda BALLDATA.OFS
  5447 3575 18 6D 1C 9D			add X
  5448 3579 8D 9C 9C			sta BLITZERO.SRC
  5449 357C AD 8A 98			lda BALLDATA.OFS+1
  5450 357F 69 00			adc #$00
  5451 3581 8D 9D 9C			sta BLITZERO.SRC+1
  5452 3584 AD 8B 98			lda BALLDATA.OFS+2
  5453 3587 69 00			adc #$00
  5454 3589 8D 9E 9C			sta BLITZERO.SRC+2
  5455 358C AD 8C 98			lda BALLDATA.OFS+3
  5456 358F 69 00			adc #$00
  5457 3591 8D 9F 9C			sta BLITZERO.SRC+3
  5458 3594 A9 05			lda #$05
  5459 3596 8D A4 9C			sta BLITZERO.SIZE
  5460 3599 A9 00			lda #$00
  5461 359B 8D A5 9C			sta BLITZERO.SIZE+1
  5462 359E 20 79 2C			jsr BLITZERO
  5463
  5464 				; optimize OK (service.pas), line = 1050
  5465
  5466 35A1 AD 1C 9D			lda X
  5467 35A4 18 69 05			add #$05
  5468 35A7 8D 1C 9D			sta X
  5469
  5470 				; --- ForToDoEpilog
  5471 35AA EE 1B 9D			inc YP
  5472 35AD F0 03 4C 17 35		jne l_0B22
  5473 35B2			l_0B30
  5474
  5475 				; ------------------------------------------------------------
  5476
  5477 = 9D17			BALL	= DATAORIGIN+$058B
  5478 = 978C			BALL.X	= DATAORIGIN+$0000
  5479 = 978E			BALL.Y	= DATAORIGIN+$0002
  5480 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  5481 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  5482 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  5483 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  5484 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  5485 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  5486 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  5487 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  5488 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  5489 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  5490 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  5491 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  5492 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  5493 = 97A6			BALL.STM	= DATAORIGIN+$001A
  5494 = 9D1B			YP	= DATAORIGIN+$058F
  5495 = 9D1C			X	= DATAORIGIN+$0590
  5496
  5497 = 9D17			@VarData	= BALL
  5498 = 0004			@VarDataSize	= 4
  5499
  5500 35B2			@exit
  5501 					.ifdef @new
  5502 					lda <@VarData
  5503 					sta :ztmp
  5504 					lda >@VarData
  5505 					ldy #@VarDataSize-1
  5506 					jmp @FreeMem
  5507 					els
  5508 35B2 60				rts						; ret
  5509 					eif
  5510 				.endl
  5511
  5512 35B3			.local	REMOVE_BALL					; PROCEDURE
  5513
  5514 				; optimize OK (service.pas), line = 1063
  5515
  5516 35B3 A9 00			lda #$00
  5517 35B5 8D 21 9D			sta YP
  5518
  5519 35B8			l_0B6C
  5520 				; --- ForToDoCondition
  5521 35B8 AD 21 9D			lda YP
  5522 35BB C9 05			cmp #$05
  5523 35BD 90 03 4C 62 36		jcs l_0B7A
  5524
  5525 				; optimize OK (service.pas), line = 1065
  5526
  5527 35C2 AC 1D 9D 84 84 AC + 	mwy BALL :bp2
  5528 35CC A0 08			ldy #BALL.OLDX-DATAORIGIN
  5529 35CE B1 84			lda (:bp2),y
  5530 35D0 38 E9 03			sub #$03
  5531 35D3 85 9F			sta :STACKORIGIN+9
  5532 35D5 C8				iny
  5533 35D6 B1 84			lda (:bp2),y
  5534 35D8 E9 00			sbc #$00
  5535 35DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5536 35DC AD 21 9D			lda YP
  5537 35DF 38 E9 03			sub #$03
  5538 35E2 85 A0			sta :STACKORIGIN+10
  5539 35E4 A9 00			lda #$00
  5540 35E6 E9 00			sbc #$00
  5541 35E8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5542 35EA A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5543 35EC A5 A0			lda :STACKORIGIN+10
  5544 35EE 18 71 84			add (:bp2),y
  5545 35F1 85 A0			sta :STACKORIGIN+10
  5546 35F3 C8				iny
  5547 35F4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5548 35F6 71 84			adc (:bp2),y
  5549 35F8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5550 35FA A4 A0			ldy :STACKORIGIN+10
  5551 35FC A5 9F			lda :STACKORIGIN+9
  5552 35FE 18 79 00 C0			add adr.ROW,y
  5553 3602 8D 84 99			sta HLP
  5554 3605 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5555 3607 79 00 C1			adc adr.ROW+256,y
  5556 360A 8D 85 99			sta HLP+1
  5557
  5558 				; optimize OK (service.pas), line = 1070
  5559
  5560 360D AD 84 99			lda HLP
  5561 3610 8D B2 9C			sta BLITROW.DST
  5562 3613 A9 50			lda #$50
  5563 3615 18 6D 85 99			add HLP+1
  5564 3619 8D B3 9C			sta BLITROW.DST+1
  5565 361C A9 00			lda #$00
  5566 361E 69 00			adc #$00
  5567 3620 8D B4 9C			sta BLITROW.DST+2
  5568 3623 A9 00			lda #$00
  5569 3625 69 00			adc #$00
  5570 3627 8D B5 9C			sta BLITROW.DST+3
  5571 362A AD 91 98			lda PLAYSCREEN.OFS
  5572 362D 18 6D 84 99			add HLP
  5573 3631 8D AE 9C			sta BLITROW.SRC
  5574 3634 AD 92 98			lda PLAYSCREEN.OFS+1
  5575 3637 6D 85 99			adc HLP+1
  5576 363A 8D AF 9C			sta BLITROW.SRC+1
  5577 363D AD 93 98			lda PLAYSCREEN.OFS+2
  5578 3640 69 00			adc #$00
  5579 3642 8D B0 9C			sta BLITROW.SRC+2
  5580 3645 AD 94 98			lda PLAYSCREEN.OFS+3
  5581 3648 69 00			adc #$00
  5582 364A 8D B1 9C			sta BLITROW.SRC+3
  5583 364D A9 05			lda #$05
  5584 364F 8D B6 9C			sta BLITROW.SIZE
  5585 3652 A9 00			lda #$00
  5586 3654 8D B7 9C			sta BLITROW.SIZE+1
  5587 3657 20 2C 2D			jsr BLITROW
  5588
  5589 				; --- ForToDoEpilog
  5590 365A EE 21 9D			inc YP
  5591 365D F0 03 4C B8 35		jne l_0B6C
  5592 3662			l_0B7A
  5593
  5594 				; ------------------------------------------------------------
  5595
  5596 = 9D1D			BALL	= DATAORIGIN+$0591
  5597 = 978C			BALL.X	= DATAORIGIN+$0000
  5598 = 978E			BALL.Y	= DATAORIGIN+$0002
  5599 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  5600 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  5601 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  5602 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  5603 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  5604 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  5605 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  5606 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  5607 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  5608 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  5609 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  5610 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  5611 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  5612 = 97A6			BALL.STM	= DATAORIGIN+$001A
  5613 = 9D21			YP	= DATAORIGIN+$0595
  5614
  5615 = 9D1D			@VarData	= BALL
  5616 = 0003			@VarDataSize	= 3
  5617
  5618 3662			@exit
  5619 					.ifdef @new
  5620 					lda <@VarData
  5621 					sta :ztmp
  5622 					lda >@VarData
  5623 					ldy #@VarDataSize-1
  5624 					jmp @FreeMem
  5625 					els
  5626 3662 60				rts						; ret
  5627 					eif
  5628 				.endl
  5629
  5630 3663			.local	WAIT_VBL					; PROCEDURE
  5631
  5632 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1093
  5633
  5634 3663 20 0A 26			jsr SYSTEM.PAUSE.@00
  5635
  5636 3666			@exit
  5637 					.ifdef @new
  5638 					lda <@VarData
  5639 					sta :ztmp
  5640 					lda >@VarData
  5641 					ldy #@VarDataSize-1
  5642 					jmp @FreeMem
  5643 					els
  5644 3666 60				rts						; ret
  5645 					eif
  5646 				.endl
  5647
  5648 3667			.local	SET_BALL					; PROCEDURE
  5649
  5650 				; optimize OK (service.pas), line = 1105
  5651
  5652 3667 AC 22 9D 84 84 AC + 	mwy BALL :bp2
  5653 3671 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5654 3673 B1 84			lda (:bp2),y
  5655 3675 C9 FF			cmp #$FF
  5656 3677 D0 05			bne @+
  5657 3679 88				dey
  5658 367A B1 84			lda (:bp2),y
  5659 367C C9 FF			cmp #$FF
  5660 				@
  5661 367E F0 13			jeq l_0BC6s
  5662 3680 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5663 3682 B1 84			lda (:bp2),y
  5664 3684 C9 FF			cmp #$FF
  5665 3686 D0 05			bne @+
  5666 3688 88				dey
  5667 3689 B1 84			lda (:bp2),y
  5668 368B C9 FF			cmp #$FF
  5669 				@
  5670 368D F0 04			jeq l_0BC6s
  5671 368F A9 01 D0 02			lda:sne #$01
  5672 3693 A9 00		l_0BC6s	lda #$00
  5673 3695 8D 26 9D			sta B0
  5674
  5675 				; optimize OK (service.pas), line = 1106
  5676
  5677 3698 AC 22 9D 84 84 AC + 	mwy BALL :bp2
  5678 36A2 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5679 36A4 B1 84			lda (:bp2),y
  5680 36A6 85 9F			sta :STACKORIGIN+9
  5681 36A8 C8				iny
  5682 36A9 B1 84			lda (:bp2),y
  5683 36AB A0 01			ldy #BALL.X-DATAORIGIN+$01
  5684 36AD D1 84			cmp (:bp2),y
  5685 36AF D0 05			bne @+
  5686 36B1 88				dey
  5687 36B2 A5 9F			lda :STACKORIGIN+9
  5688 36B4 D1 84			cmp (:bp2),y
  5689 				@
  5690 36B6 D0 03			bne @+
  5691 36B8 4C BE 36			jmp *+6
  5692 				@\	jmp l_0BDEs
  5692 				@
  5692 36BB 4C DE 36			JMP L_0BDES
  5693 36BE A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5694 36C0 B1 84			lda (:bp2),y
  5695 36C2 85 A0			sta :STACKORIGIN+10
  5696 36C4 C8				iny
  5697 36C5 B1 84			lda (:bp2),y
  5698 36C7 A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5699 36C9 D1 84			cmp (:bp2),y
  5700 36CB D0 05			bne @+
  5701 36CD 88				dey
  5702 36CE A5 A0			lda :STACKORIGIN+10
  5703 36D0 D1 84			cmp (:bp2),y
  5704 				@
  5705 36D2 D0 03			bne @+
  5706 36D4 4C DA 36			jmp *+6
  5707 				@\	jmp l_0BDEs
  5707 				@
  5707 36D7 4C DE 36			JMP L_0BDES
  5708 36DA A9 00 F0 02			lda:seq #$00
  5709 36DE A9 01		l_0BDEs	lda #$01
  5710 36E0 8D 27 9D			sta B1
  5711
  5712 				; optimize OK (service.pas), line = 1108
  5713
  5714 36E3 AD 26 9D			lda B0
  5715 36E6 2D 27 9D			and B1
  5716 36E9 F0 0F			jeq l_0BF0
  5717
  5718 				; optimize OK (service.pas), line = 1109
  5719
  5720 36EB AD 22 9D			lda BALL
  5721 36EE 8D 1D 9D			sta REMOVE_BALL.BALL
  5722 36F1 AD 23 9D			lda BALL+1
  5723 36F4 8D 1E 9D			sta REMOVE_BALL.BALL+1
  5724 36F7 20 B3 35			jsr REMOVE_BALL
  5725 36FA			l_0BF0
  5726
  5727 				; optimize OK (service.pas), line = 1111
  5728
  5729 36FA AD 22 9D			lda BALL
  5730 36FD 8D 17 9D			sta PLACE_BALL.BALL
  5731 3700 AD 23 9D			lda BALL+1
  5732 3703 8D 18 9D			sta PLACE_BALL.BALL+1
  5733 3706 20 0F 35			jsr PLACE_BALL
  5734
  5735 				; optimize OK (service.pas), line = 1113
  5736
  5737 3709 AC 22 9D 84 84 AC + 	mwy BALL :bp2
  5738 3713 A0 00			ldy #BALL.X-DATAORIGIN
  5739 3715 B1 84			lda (:bp2),y
  5740 3717 85 9F			sta :STACKORIGIN+9
  5741 3719 C8				iny
  5742 371A B1 84			lda (:bp2),y
  5743 371C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5744 371E A0 08			ldy #BALL.OLDX-DATAORIGIN
  5745 3720 A5 9F			lda :STACKORIGIN+9
  5746 3722 91 84			sta (:bp2),y
  5747 3724 C8				iny
  5748 3725 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5749 3727 91 84			sta (:bp2),y
  5750
  5751 				; optimize OK (service.pas), line = 1114
  5752
  5753 3729 A0 02			ldy #BALL.Y-DATAORIGIN
  5754 372B B1 84			lda (:bp2),y
  5755 372D 85 9F			sta :STACKORIGIN+9
  5756 372F C8				iny
  5757 3730 B1 84			lda (:bp2),y
  5758 3732 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5759 3734 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5760 3736 A5 9F			lda :STACKORIGIN+9
  5761 3738 91 84			sta (:bp2),y
  5762 373A C8				iny
  5763 373B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5764 373D 91 84			sta (:bp2),y
  5765
  5766 				; ------------------------------------------------------------
  5767
  5768 = 9D22			BALL	= DATAORIGIN+$0596
  5769 = 978C			BALL.X	= DATAORIGIN+$0000
  5770 = 978E			BALL.Y	= DATAORIGIN+$0002
  5771 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  5772 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  5773 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  5774 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  5775 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  5776 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  5777 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  5778 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  5779 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  5780 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  5781 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  5782 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  5783 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  5784 = 97A6			BALL.STM	= DATAORIGIN+$001A
  5785 = 9D26			B0	= DATAORIGIN+$059A
  5786 = 9D27			B1	= DATAORIGIN+$059B
  5787
  5788 = 9D22			@VarData	= BALL
  5789 = 0004			@VarDataSize	= 4
  5790
  5791 373F			@exit
  5792 					.ifdef @new
  5793 					lda <@VarData
  5794 					sta :ztmp
  5795 					lda >@VarData
  5796 					ldy #@VarDataSize-1
  5797 					jmp @FreeMem
  5798 					els
  5799 373F 60				rts						; ret
  5800 					eif
  5801 				.endl
  5802
  5803 3740			.local	SET_BALL_SPEED					; PROCEDURE
  5804
  5805 				; optimize OK (service.pas), line = 1124
  5806
  5807 3740 AC 28 9D 84 84 AC + 	mwy BALL :bp2
  5808 374A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5809 374C B1 84			lda (:bp2),y
  5810 374E 8D 2E 9D			sta SX
  5811 3751 C8				iny
  5812 3752 B1 84			lda (:bp2),y
  5813 3754 8D 2F 9D			sta SX+1
  5814
  5815 				; optimize OK (service.pas), line = 1125
  5816
  5817 3757 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5818 3759 B1 84			lda (:bp2),y
  5819 375B 8D 30 9D			sta SY
  5820 375E C8				iny
  5821 375F B1 84			lda (:bp2),y
  5822 3761 8D 31 9D			sta SY+1
  5823
  5824 				; optimize FAIL (1, service.pas), line = 1127
  5825
  5826 3764 E8				inx
  5827 3765 AD 2C 9D 95 96		mva SPEED :STACKORIGIN,x
  5828 376A AD 2D 9D 95 A6		mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
  5829 376F AD 2E 9D			lda SX
  5830 3772 85 8E			sta :ecx
  5831 3774 85 92			sta :ztmp8
  5832 3776 AD 2F 9D			lda SX+1
  5833 3779 85 8F			sta :ecx+1
  5834 377B 85 93			sta :ztmp9
  5835 377D AD 2E 9D			lda SX
  5836 3780 85 86			sta :eax
  5837 3782 85 94			sta :ztmp10
  5838 3784 AD 2F 9D			lda SX+1
  5839 3787 85 87			sta :eax+1
  5840 3789 85 95			sta :ztmp11
  5841 					.ifdef fmulinit
  5842 					fmulu_16
  5843 					els
  5844 378B 20 58 13			imulCX
  5845 					eif
  5846 378E A5 95			lda :ztmp11
  5847 3790 10 0D			bpl @+
  5848 3792 A5 88			lda :eax+2
  5849 3794 38 E5 92			sub :ztmp8
  5850 3797 85 88			sta :eax+2
  5851 3799 A5 89			lda :eax+3
  5852 379B E5 93			sbc :ztmp9
  5853 379D 85 89			sta :eax+3
  5854 				@
  5855 379F A5 93			lda :ztmp9
  5856 37A1 10 0D			bpl @+
  5857 37A3 A5 88			lda :eax+2
  5858 37A5 38 E5 94			sub :ztmp10
  5859 37A8 85 88			sta :eax+2
  5860 37AA A5 89			lda :eax+3
  5861 37AC E5 95			sbc :ztmp11
  5862 37AE 85 89			sta :eax+3
  5863 				@
  5864 37B0 A5 86			lda :eax
  5865 37B2 85 9F			sta :STACKORIGIN+9
  5866 37B4 A5 87			lda :eax+1
  5867 37B6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5868 37B8 A5 88			lda :eax+2
  5869 37BA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5870 37BC A5 89			lda :eax+3
  5871 37BE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5872 37C0 AD 30 9D			lda SY
  5873 37C3 85 8E			sta :ecx
  5874 37C5 85 92			sta :ztmp8
  5875 37C7 AD 31 9D			lda SY+1
  5876 37CA 85 8F			sta :ecx+1
  5877 37CC 85 93			sta :ztmp9
  5878 37CE AD 30 9D			lda SY
  5879 37D1 85 86			sta :eax
  5880 37D3 85 94			sta :ztmp10
  5881 37D5 AD 31 9D			lda SY+1
  5882 37D8 85 87			sta :eax+1
  5883 37DA 85 95			sta :ztmp11
  5884 					.ifdef fmulinit
  5885 					fmulu_16
  5886 					els
  5887 37DC 20 58 13			imulCX
  5888 					eif
  5889 37DF A5 95			lda :ztmp11
  5890 37E1 10 0D			bpl @+
  5891 37E3 A5 88			lda :eax+2
  5892 37E5 38 E5 92			sub :ztmp8
  5893 37E8 85 88			sta :eax+2
  5894 37EA A5 89			lda :eax+3
  5895 37EC E5 93			sbc :ztmp9
  5896 37EE 85 89			sta :eax+3
  5897 				@
  5898 37F0 A5 93			lda :ztmp9
  5899 37F2 10 0D			bpl @+
  5900 37F4 A5 88			lda :eax+2
  5901 37F6 38 E5 94			sub :ztmp10
  5902 37F9 85 88			sta :eax+2
  5903 37FB A5 89			lda :eax+3
  5904 37FD E5 95			sbc :ztmp11
  5905 37FF 85 89			sta :eax+3
  5906 				@
  5907 3801 A5 9F			lda :STACKORIGIN+9
  5908 3803 18 65 86			add :eax
  5909 3806 8D 97 97			sta SYSTEM.SQRT.@010185000.X
  5910 3809 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5911 380B 65 87			adc :eax+1
  5912 380D 8D 98 97			sta SYSTEM.SQRT.@010185000.X+1
  5913 3810 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5914 3812 65 88			adc :eax+2
  5915 3814 8D 99 97			sta SYSTEM.SQRT.@010185000.X+2
  5916 3817 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5917 3819 65 89			adc :eax+3
  5918 381B 8D 9A 97			sta SYSTEM.SQRT.@010185000.X+3
  5919 381E 20 88 1B			jsr SYSTEM.SQRT.@010185000
  5920 3821 E8				inx
  5921 3822 AD 9B 97 95 96		mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
  5922 3827 AD 9C 97 95 A6		mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  5923 382C AD 9D 97 95 B6		mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  5924 3831 AD 9E 97 95 C6		mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  5925 3836 20 7C 11			jsr @expandToCARD1.SMALL
  5926 3839 B5 95			lda :STACKORIGIN-1,x
  5927 383B 85 8E			sta :FPMAN0
  5928 383D B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5929 383F 85 8F			sta :FPMAN1
  5930 3841 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5931 3843 85 90			sta :FPMAN2
  5932 3845 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5933 3847 85 91			sta :FPMAN3
  5934 3849 20 2D 18			jsr @I2F
  5935 384C A5 8E			lda :FPMAN0
  5936 384E 95 95			sta :STACKORIGIN-1,x
  5937 3850 A5 8F			lda :FPMAN1
  5938 3852 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  5939 3854 A5 90			lda :FPMAN2
  5940 3856 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  5941 3858 A5 91			lda :FPMAN3
  5942 385A 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  5943 385C B5 96			lda :STACKORIGIN,x
  5944 385E 85 8A			sta :FP2MAN0
  5945 3860 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5946 3862 85 8B			sta :FP2MAN1
  5947 3864 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  5948 3866 85 8C			sta :FP2MAN2
  5949 3868 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  5950 386A 85 8D			sta :FP2MAN3
  5951 386C B5 95			lda :STACKORIGIN-1,x
  5952 386E 85 86			sta :FP1MAN0
  5953 3870 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  5954 3872 85 87			sta :FP1MAN1
  5955 3874 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  5956 3876 85 88			sta :FP1MAN2
  5957 3878 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  5958 387A 85 89			sta :FP1MAN3
  5959 387C 20 F4 16			jsr @FDIV
  5960 387F CA				dex
  5961 3880 A5 8E			lda :FPMAN0
  5962 3882 8D 32 9D			sta VM
  5963 3885 A5 8F			lda :FPMAN1
  5964 3887 8D 33 9D			sta VM+1
  5965 388A A5 90			lda :FPMAN2
  5966 388C 8D 34 9D			sta VM+2
  5967 388F A5 91			lda :FPMAN3
  5968 3891 8D 35 9D			sta VM+3
  5969 3894 CA				dex
  5970
  5971 				; optimize OK (service.pas), line = 1132
  5972
  5973 3895 AD 2E 9D			lda SX
  5974 3898 85 8E			sta :FPMAN0
  5975 389A A0 00			ldy #$00
  5976 389C AD 2F 9D			lda SX+1
  5977 389F 10 01			spl
  5978 38A1 88				dey
  5979 38A2 85 8F			sta :FPMAN1
  5980 38A4 84 90			sty :FPMAN2
  5981 38A6 84 91			sty :FPMAN3
  5982 38A8 20 2D 18			jsr @I2F
  5983 38AB A5 8E			lda :FPMAN0
  5984 38AD 85 86			sta :FP1MAN0
  5985 38AF A5 8F			lda :FPMAN1
  5986 38B1 85 87			sta :FP1MAN1
  5987 38B3 A5 90			lda :FPMAN2
  5988 38B5 85 88			sta :FP1MAN2
  5989 38B7 A5 91			lda :FPMAN3
  5990 38B9 85 89			sta :FP1MAN3
  5991 38BB AD 32 9D			lda VM
  5992 38BE 85 8A			sta :FP2MAN0
  5993 38C0 AD 33 9D			lda VM+1
  5994 38C3 85 8B			sta :FP2MAN1
  5995 38C5 AD 34 9D			lda VM+2
  5996 38C8 85 8C			sta :FP2MAN2
  5997 38CA AD 35 9D			lda VM+3
  5998 38CD 85 8D			sta :FP2MAN3
  5999 38CF 20 53 16			jsr @FMUL
  6000 38D2 A5 8E			lda :FPMAN0
  6001 38D4 85 8A			sta :FP2MAN0
  6002 38D6 A5 8F			lda :FPMAN1
  6003 38D8 85 8B			sta :FP2MAN1
  6004 38DA A5 90			lda :FPMAN2
  6005 38DC 85 8C			sta :FP2MAN2
  6006 38DE A5 91			lda :FPMAN3
  6007 38E0 85 8D			sta :FP2MAN3
  6008 38E2 20 AB 14			jsr @FROUND
  6009 38E5 AC 28 9D 84 84 AC + 	mwy BALL :bp2
  6010 38EF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6011 38F1 A5 8E			lda :FPMAN0
  6012 38F3 91 84			sta (:bp2),y
  6013 38F5 C8				iny
  6014 38F6 A5 8F			lda :FPMAN1
  6015 38F8 91 84			sta (:bp2),y
  6016
  6017 				; optimize OK (service.pas), line = 1133
  6018
  6019 38FA AD 30 9D			lda SY
  6020 38FD 85 8E			sta :FPMAN0
  6021 38FF A0 00			ldy #$00
  6022 3901 AD 31 9D			lda SY+1
  6023 3904 10 01			spl
  6024 3906 88				dey
  6025 3907 85 8F			sta :FPMAN1
  6026 3909 84 90			sty :FPMAN2
  6027 390B 84 91			sty :FPMAN3
  6028 390D 20 2D 18			jsr @I2F
  6029 3910 A5 8E			lda :FPMAN0
  6030 3912 85 86			sta :FP1MAN0
  6031 3914 A5 8F			lda :FPMAN1
  6032 3916 85 87			sta :FP1MAN1
  6033 3918 A5 90			lda :FPMAN2
  6034 391A 85 88			sta :FP1MAN2
  6035 391C A5 91			lda :FPMAN3
  6036 391E 85 89			sta :FP1MAN3
  6037 3920 AD 32 9D			lda VM
  6038 3923 85 8A			sta :FP2MAN0
  6039 3925 AD 33 9D			lda VM+1
  6040 3928 85 8B			sta :FP2MAN1
  6041 392A AD 34 9D			lda VM+2
  6042 392D 85 8C			sta :FP2MAN2
  6043 392F AD 35 9D			lda VM+3
  6044 3932 85 8D			sta :FP2MAN3
  6045 3934 20 53 16			jsr @FMUL
  6046 3937 A5 8E			lda :FPMAN0
  6047 3939 85 8A			sta :FP2MAN0
  6048 393B A5 8F			lda :FPMAN1
  6049 393D 85 8B			sta :FP2MAN1
  6050 393F A5 90			lda :FPMAN2
  6051 3941 85 8C			sta :FP2MAN2
  6052 3943 A5 91			lda :FPMAN3
  6053 3945 85 8D			sta :FP2MAN3
  6054 3947 20 AB 14			jsr @FROUND
  6055 394A AC 28 9D 84 84 AC + 	mwy BALL :bp2
  6056 3954 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6057 3956 A5 8E			lda :FPMAN0
  6058 3958 91 84			sta (:bp2),y
  6059 395A C8				iny
  6060 395B A5 8F			lda :FPMAN1
  6061 395D 91 84			sta (:bp2),y
  6062
  6063 				; ------------------------------------------------------------
  6064
  6065 = 9D28			BALL	= DATAORIGIN+$059C
  6066 = 978C			BALL.X	= DATAORIGIN+$0000
  6067 = 978E			BALL.Y	= DATAORIGIN+$0002
  6068 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  6069 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  6070 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  6071 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  6072 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  6073 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  6074 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  6075 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  6076 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  6077 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  6078 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  6079 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  6080 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  6081 = 97A6			BALL.STM	= DATAORIGIN+$001A
  6082 = 9D2C			SPEED	= DATAORIGIN+$05A0
  6083 = 9D2E			SX	= DATAORIGIN+$05A2
  6084 = 9D30			SY	= DATAORIGIN+$05A4
  6085 = 9D32			VM	= DATAORIGIN+$05A6
  6086
  6087 = 9D28			@VarData	= BALL
  6088 = 000C			@VarDataSize	= 12
  6089
  6090 395F			@exit
  6091 					.ifdef @new
  6092 					lda <@VarData
  6093 					sta :ztmp
  6094 					lda >@VarData
  6095 					ldy #@VarDataSize-1
  6096 					jmp @FreeMem
  6097 					els
  6098 395F 60				rts						; ret
  6099 					eif
  6100 				.endl
  6101
  6102 3960			.local	SET_BALL_DIRECTION				; PROCEDURE
  6103
  6104 				; optimize OK (service.pas), line = 1140
  6105
  6106 3960 AD 3A 9D			lda ANGLE
  6107 3963 85 8E			sta :FPMAN0
  6108 3965 A0 00			ldy #$00
  6109 3967 AD 3B 9D			lda ANGLE+1
  6110 396A 10 01			spl
  6111 396C 88				dey
  6112 396D 85 8F			sta :FPMAN1
  6113 396F 84 90			sty :FPMAN2
  6114 3971 84 91			sty :FPMAN3
  6115 3973 20 2D 18			jsr @I2F
  6116 3976 A5 8E			lda :FPMAN0
  6117 3978 85 86			sta :FP1MAN0
  6118 397A A5 8F			lda :FPMAN1
  6119 397C 85 87			sta :FP1MAN1
  6120 397E A5 90			lda :FPMAN2
  6121 3980 85 88			sta :FP1MAN2
  6122 3982 A5 91			lda :FPMAN3
  6123 3984 85 89			sta :FP1MAN3
  6124 3986 A9 C3			lda #$C3
  6125 3988 85 8A			sta :FP2MAN0
  6126 398A A9 F5			lda #$F5
  6127 398C 85 8B			sta :FP2MAN1
  6128 398E A9 48			lda #$48
  6129 3990 85 8C			sta :FP2MAN2
  6130 3992 A9 40			lda #$40
  6131 3994 85 8D			sta :FP2MAN3
  6132 3996 20 53 16			jsr @FMUL
  6133 3999 A5 8E			lda :FPMAN0
  6134 399B 85 86			sta :FP1MAN0
  6135 399D A5 8F			lda :FPMAN1
  6136 399F 85 87			sta :FP1MAN1
  6137 39A1 A5 90			lda :FPMAN2
  6138 39A3 85 88			sta :FP1MAN2
  6139 39A5 A5 91			lda :FPMAN3
  6140 39A7 85 89			sta :FP1MAN3
  6141 39A9 A9 00			lda #$00
  6142 39AB 85 8A			sta :FP2MAN0
  6143 39AD 85 8B			sta :FP2MAN1
  6144 39AF A9 34			lda #$34
  6145 39B1 85 8C			sta :FP2MAN2
  6146 39B3 A9 43			lda #$43
  6147 39B5 85 8D			sta :FP2MAN3
  6148 39B7 20 F4 16			jsr @FDIV
  6149 39BA A5 8E			lda :FPMAN0
  6150 39BC 8D 3C 9D			sta W
  6151 39BF A5 8F			lda :FPMAN1
  6152 39C1 8D 3D 9D			sta W+1
  6153 39C4 A5 90			lda :FPMAN2
  6154 39C6 8D 3E 9D			sta W+2
  6155 39C9 A5 91			lda :FPMAN3
  6156 39CB 8D 3F 9D			sta W+3
  6157
  6158 				; optimize FAIL (1, service.pas), line = 1142
  6159
  6160 39CE E8				inx
  6161 39CF A9 00 95 96			mva #$00 :STACKORIGIN,x
  6162 39D3 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6163 39D7 AD 3C 9D			lda W
  6164 39DA 8D C8 97			sta SYSTEM.COS.@01018F000.X
  6165 39DD AD 3D 9D			lda W+1
  6166 39E0 8D C9 97			sta SYSTEM.COS.@01018F000.X+1
  6167 39E3 AD 3E 9D			lda W+2
  6168 39E6 8D CA 97			sta SYSTEM.COS.@01018F000.X+2
  6169 39E9 AD 3F 9D			lda W+3
  6170 39EC 8D CB 97			sta SYSTEM.COS.@01018F000.X+3
  6171 39EF 20 D1 25			jsr SYSTEM.COS.@01018F000
  6172 39F2 E8				inx
  6173 39F3 AD CC 97 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  6174 39F8 AD CD 97 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6175 39FD AD CE 97 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6176 3A02 AD CF 97 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6177 3A07 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6178 3A0B 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6179 3A0D B5 95			lda :STACKORIGIN-1,x
  6180 3A0F 85 8E			sta :FPMAN0
  6181 3A11 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6182 3A13 85 8F			sta :FPMAN1
  6183 3A15 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6184 3A17 85 90			sta :FPMAN2
  6185 3A19 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6186 3A1B 85 91			sta :FPMAN3
  6187 3A1D 20 2D 18			jsr @I2F
  6188 3A20 A5 8E			lda :FPMAN0
  6189 3A22 95 95			sta :STACKORIGIN-1,x
  6190 3A24 A5 8F			lda :FPMAN1
  6191 3A26 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6192 3A28 A5 90			lda :FPMAN2
  6193 3A2A 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6194 3A2C A5 91			lda :FPMAN3
  6195 3A2E 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6196 3A30 B5 96			lda :STACKORIGIN,x
  6197 3A32 85 8A			sta :FP2MAN0
  6198 3A34 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6199 3A36 85 8B			sta :FP2MAN1
  6200 3A38 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6201 3A3A 85 8C			sta :FP2MAN2
  6202 3A3C B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6203 3A3E 85 8D			sta :FP2MAN3
  6204 3A40 B5 95			lda :STACKORIGIN-1,x
  6205 3A42 85 86			sta :FP1MAN0
  6206 3A44 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6207 3A46 85 87			sta :FP1MAN1
  6208 3A48 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6209 3A4A 85 88			sta :FP1MAN2
  6210 3A4C B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6211 3A4E 85 89			sta :FP1MAN3
  6212 3A50 20 53 16			jsr @FMUL
  6213 3A53 CA				dex
  6214 3A54 A5 8E			lda :FPMAN0
  6215 3A56 85 8A			sta :FP2MAN0
  6216 3A58 A5 8F			lda :FPMAN1
  6217 3A5A 85 8B			sta :FP2MAN1
  6218 3A5C A5 90			lda :FPMAN2
  6219 3A5E 85 8C			sta :FP2MAN2
  6220 3A60 A5 91			lda :FPMAN3
  6221 3A62 85 8D			sta :FP2MAN3
  6222 3A64 20 AB 14			jsr @FROUND
  6223 3A67 A5 8E			lda :FPMAN0
  6224 3A69 95 96			sta :STACKORIGIN,x
  6225 3A6B A5 8F			lda :FPMAN1
  6226 3A6D 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6227 3A6F A5 90			lda :FPMAN2
  6228 3A71 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6229 3A73 A5 91			lda :FPMAN3
  6230 3A75 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6231 3A77 AC 36 9D 84 84 AC + 	mwy BALL :bp2
  6232 3A81 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6233 3A83 B5 96			lda :STACKORIGIN,x
  6234 3A85 91 84			sta (:bp2),y
  6235 3A87 C8				iny
  6236 3A88 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6237 3A8A 91 84			sta (:bp2),y
  6238
  6239 				; optimize FAIL (1, service.pas), line = 1143
  6240
  6241 3A8C A9 00 95 96			mva #$00 :STACKORIGIN,x
  6242 3A90 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6243 3A94 AD 3C 9D			lda W
  6244 3A97 8D C0 97			sta SYSTEM.SIN.@01018F000.X
  6245 3A9A AD 3D 9D			lda W+1
  6246 3A9D 8D C1 97			sta SYSTEM.SIN.@01018F000.X+1
  6247 3AA0 AD 3E 9D			lda W+2
  6248 3AA3 8D C2 97			sta SYSTEM.SIN.@01018F000.X+2
  6249 3AA6 AD 3F 9D			lda W+3
  6250 3AA9 8D C3 97			sta SYSTEM.SIN.@01018F000.X+3
  6251 3AAC 20 98 25			jsr SYSTEM.SIN.@01018F000
  6252 3AAF E8				inx
  6253 3AB0 AD C4 97 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  6254 3AB5 AD C5 97 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6255 3ABA AD C6 97 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6256 3ABF AD C7 97 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6257 3AC4 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6258 3AC8 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6259 3ACA B5 95			lda :STACKORIGIN-1,x
  6260 3ACC 85 8E			sta :FPMAN0
  6261 3ACE B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6262 3AD0 85 8F			sta :FPMAN1
  6263 3AD2 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6264 3AD4 85 90			sta :FPMAN2
  6265 3AD6 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6266 3AD8 85 91			sta :FPMAN3
  6267 3ADA 20 2D 18			jsr @I2F
  6268 3ADD A5 8E			lda :FPMAN0
  6269 3ADF 95 95			sta :STACKORIGIN-1,x
  6270 3AE1 A5 8F			lda :FPMAN1
  6271 3AE3 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6272 3AE5 A5 90			lda :FPMAN2
  6273 3AE7 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6274 3AE9 A5 91			lda :FPMAN3
  6275 3AEB 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6276 3AED B5 96			lda :STACKORIGIN,x
  6277 3AEF 85 8A			sta :FP2MAN0
  6278 3AF1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6279 3AF3 85 8B			sta :FP2MAN1
  6280 3AF5 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6281 3AF7 85 8C			sta :FP2MAN2
  6282 3AF9 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6283 3AFB 85 8D			sta :FP2MAN3
  6284 3AFD B5 95			lda :STACKORIGIN-1,x
  6285 3AFF 85 86			sta :FP1MAN0
  6286 3B01 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6287 3B03 85 87			sta :FP1MAN1
  6288 3B05 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6289 3B07 85 88			sta :FP1MAN2
  6290 3B09 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6291 3B0B 85 89			sta :FP1MAN3
  6292 3B0D 20 53 16			jsr @FMUL
  6293 3B10 CA				dex
  6294 3B11 A5 8E			lda :FPMAN0
  6295 3B13 85 8A			sta :FP2MAN0
  6296 3B15 A5 8F			lda :FPMAN1
  6297 3B17 85 8B			sta :FP2MAN1
  6298 3B19 A5 90			lda :FPMAN2
  6299 3B1B 85 8C			sta :FP2MAN2
  6300 3B1D A5 91			lda :FPMAN3
  6301 3B1F 85 8D			sta :FP2MAN3
  6302 3B21 20 AB 14			jsr @FROUND
  6303 3B24 A5 8E			lda :FPMAN0
  6304 3B26 95 96			sta :STACKORIGIN,x
  6305 3B28 A5 8F			lda :FPMAN1
  6306 3B2A 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6307 3B2C A5 90			lda :FPMAN2
  6308 3B2E 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6309 3B30 A5 91			lda :FPMAN3
  6310 3B32 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6311 3B34 A9 00			lda #$00
  6312 3B36 38 F5 96			sub :STACKORIGIN,x
  6313 3B39 95 96			sta :STACKORIGIN,x
  6314 3B3B A9 00			lda #$00
  6315 3B3D F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6316 3B3F 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6317 3B41 A9 00			lda #$00
  6318 3B43 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6319 3B45 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6320 3B47 A9 00			lda #$00
  6321 3B49 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6322 3B4B 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6323 3B4D AC 36 9D 84 84 AC + 	mwy BALL :bp2
  6324 3B57 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6325 3B59 B5 96			lda :STACKORIGIN,x
  6326 3B5B 91 84			sta (:bp2),y
  6327 3B5D C8				iny
  6328 3B5E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6329 3B60 91 84			sta (:bp2),y
  6330 3B62 CA				dex
  6331
  6332 				; ------------------------------------------------------------
  6333
  6334 = 9D36			BALL	= DATAORIGIN+$05AA
  6335 = 978C			BALL.X	= DATAORIGIN+$0000
  6336 = 978E			BALL.Y	= DATAORIGIN+$0002
  6337 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  6338 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  6339 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  6340 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  6341 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  6342 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  6343 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  6344 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  6345 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  6346 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  6347 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  6348 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  6349 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  6350 = 97A6			BALL.STM	= DATAORIGIN+$001A
  6351 = 9D3A			ANGLE	= DATAORIGIN+$05AE
  6352 = 9D3C			W	= DATAORIGIN+$05B0
  6353
  6354 = 9D36			@VarData	= BALL
  6355 = 0008			@VarDataSize	= 8
  6356
  6357 3B63			@exit
  6358 					.ifdef @new
  6359 					lda <@VarData
  6360 					sta :ztmp
  6361 					lda >@VarData
  6362 					ldy #@VarDataSize-1
  6363 					jmp @FreeMem
  6364 					els
  6365 3B63 60				rts						; ret
  6366 					eif
  6367 				.endl
  6368
  6369 3B64			.local	GET_BALL_DIRECTION				; FUNCTION
  6370
  6371 				; optimize OK (service.pas), line = 1151
  6372
  6373 3B64 AC 40 9D 84 84 AC + 	mwy BALL :bp2
  6374 3B6E A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6375 3B70 B1 84			lda (:bp2),y
  6376 3B72 88				dey
  6377 3B73 11 84			ora (:bp2),y
  6378 3B75 D0 75			jne l_0C78
  6379 3B77 E8				inx
  6380 3B78 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6381 3B7C E8				inx
  6382 3B7D AC 40 9D 84 84 AC + 	mwy BALL :bp2
  6383 3B87 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6384 3B89 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6385 3B8D C8				iny
  6386 3B8E B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6387 3B92 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6388 3B94 B1 84			lda (:bp2),y
  6389 3B96 85 8A			sta SYSTEM.ABS.@010184000.X
  6390 3B98 C8				iny
  6391 3B99 B1 84			lda (:bp2),y
  6392 3B9B 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6393 3B9D 20 5A 1B			jsr SYSTEM.ABS.@010184000
  6394 3BA0 E8				inx
  6395 3BA1 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6396 3BA3 85 8E			sta @SMALLINT.DIV.B
  6397 3BA5 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6398 3BA7 85 8F			sta @SMALLINT.DIV.B+1
  6399 3BA9 B5 95			lda :STACKORIGIN-1,x
  6400 3BAB 85 86			sta @SMALLINT.DIV.A
  6401 3BAD B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6402 3BAF 85 87			sta @SMALLINT.DIV.A+1
  6403 3BB1 20 80 12			jsr @SMALLINT.DIV
  6404 3BB4 A5 86			lda :eax
  6405 3BB6 95 95			sta :STACKORIGIN-1,x
  6406 3BB8 A5 87			lda :eax+1
  6407 3BBA 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6408 3BBC CA				dex
  6409 3BBD A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6410 3BC1 20 58 12			jsr mulSMALLINT
  6411 3BC4 CA				dex
  6412 3BC5 A9 00			lda #$00
  6413 3BC7 38 F5 96			sub :STACKORIGIN,x
  6414 3BCA 95 96			sta :STACKORIGIN,x
  6415 3BCC A9 00			lda #$00
  6416 3BCE F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6417 3BD0 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6418 3BD2 A9 00			lda #$00
  6419 3BD4 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6420 3BD6 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6421 3BD8 A9 00			lda #$00
  6422 3BDA F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6423 3BDC 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6424 3BDE B5 96			lda :STACKORIGIN,x
  6425 3BE0 8D 46 9D			sta W
  6426 3BE3 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6427 3BE5 8D 47 9D			sta W+1
  6428 3BE8 CA				dex
  6429 3BE9 4C 75 3D			jmp l_0C94
  6430 3BEC			l_0C78
  6431
  6432 				; optimize OK (service.pas), line = 1157
  6433
  6434 3BEC AC 40 9D 84 84 AC + 	mwy BALL :bp2
  6435 3BF6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6436 3BF8 B1 84			lda (:bp2),y
  6437 3BFA 85 9F			sta :STACKORIGIN+9
  6438 3BFC C8				iny
  6439 3BFD B1 84			lda (:bp2),y
  6440 3BFF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6441 3C01 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6442 3C03 B1 84			lda (:bp2),y
  6443 3C05 85 8E			sta :FPMAN0
  6444 3C07 C8				iny
  6445 3C08 B1 84			lda (:bp2),y
  6446 3C0A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6447 3C0C A0 00			ldy #$00
  6448 3C0E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6449 3C10 10 01			spl
  6450 3C12 88				dey
  6451 3C13 85 8F			sta :FPMAN1
  6452 3C15 84 90			sty :FPMAN2
  6453 3C17 84 91			sty :FPMAN3
  6454 3C19 20 2D 18			jsr @I2F
  6455 3C1C A5 8E			lda :FPMAN0
  6456 3C1E 85 A0			sta :STACKORIGIN+10
  6457 3C20 A5 8F			lda :FPMAN1
  6458 3C22 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6459 3C24 A5 90			lda :FPMAN2
  6460 3C26 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6461 3C28 A5 91			lda :FPMAN3
  6462 3C2A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6463 3C2C A0 00			ldy #$00
  6464 3C2E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6465 3C30 10 01			spl
  6466 3C32 88				dey
  6467 3C33 85 8F			sta :FPMAN1
  6468 3C35 84 90			sty :FPMAN2
  6469 3C37 84 91			sty :FPMAN3
  6470 3C39 A5 9F			lda :STACKORIGIN+9
  6471 3C3B 85 8E			sta :FPMAN0
  6472 3C3D 20 2D 18			jsr @I2F
  6473 3C40 A5 8E			lda :FPMAN0
  6474 3C42 85 86			sta :FP1MAN0
  6475 3C44 A5 8F			lda :FPMAN1
  6476 3C46 85 87			sta :FP1MAN1
  6477 3C48 A5 90			lda :FPMAN2
  6478 3C4A 85 88			sta :FP1MAN2
  6479 3C4C A5 91			lda :FPMAN3
  6480 3C4E 85 89			sta :FP1MAN3
  6481 3C50 A5 A0			lda :STACKORIGIN+10
  6482 3C52 85 8A			sta :FP2MAN0
  6483 3C54 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6484 3C56 85 8B			sta :FP2MAN1
  6485 3C58 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6486 3C5A 85 8C			sta :FP2MAN2
  6487 3C5C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6488 3C5E 85 8D			sta :FP2MAN3
  6489 3C60 20 F4 16			jsr @FDIV
  6490 3C63 A5 8E			lda :FPMAN0
  6491 3C65 8D 86 99			sta F_HLP
  6492 3C68 A5 8F			lda :FPMAN1
  6493 3C6A 8D 87 99			sta F_HLP+1
  6494 3C6D A5 90			lda :FPMAN2
  6495 3C6F 8D 88 99			sta F_HLP+2
  6496 3C72 A5 91			lda :FPMAN3
  6497 3C74 49 80			eor #$80
  6498 3C76 8D 89 99			sta F_HLP+3
  6499
  6500 				; optimize OK (service.pas), line = 1159
  6501
  6502 3C79 AD 86 99			lda F_HLP
  6503 3C7C 8D A5 97			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6504 3C7F AD 87 99			lda F_HLP+1
  6505 3C82 8D A6 97			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6506 3C85 AD 88 99			lda F_HLP+2
  6507 3C88 8D A7 97			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6508 3C8B AD 89 99			lda F_HLP+3
  6509 3C8E 8D A8 97			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6510 3C91 20 1D 1E			jsr SYSTEM.ARCTAN.@01018F000
  6511 3C94 E8				inx
  6512 3C95 E8				inx
  6513 3C96 A9 00			lda #$00
  6514 3C98 85 8A			sta :FP2MAN0
  6515 3C9A A9 00			lda #$00
  6516 3C9C 85 8B			sta :FP2MAN1
  6517 3C9E A9 34			lda #$34
  6518 3CA0 85 8C			sta :FP2MAN2
  6519 3CA2 A9 43			lda #$43
  6520 3CA4 85 8D			sta :FP2MAN3
  6521 3CA6 AD A9 97			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6522 3CA9 85 86			sta :FP1MAN0
  6523 3CAB AD AA 97			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6524 3CAE 85 87			sta :FP1MAN1
  6525 3CB0 AD AB 97			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6526 3CB3 85 88			sta :FP1MAN2
  6527 3CB5 AD AC 97			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6528 3CB8 85 89			sta :FP1MAN3
  6529 3CBA 20 53 16			jsr @FMUL
  6530 3CBD A5 8E			lda :FPMAN0
  6531 3CBF 95 95			sta :STACKORIGIN-1,x
  6532 3CC1 A5 8F			lda :FPMAN1
  6533 3CC3 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6534 3CC5 A5 90			lda :FPMAN2
  6535 3CC7 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6536 3CC9 A5 91			lda :FPMAN3
  6537 3CCB 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6538 3CCD A9 C3			lda #$C3
  6539 3CCF 85 8A			sta :FP2MAN0
  6540 3CD1 A9 F5			lda #$F5
  6541 3CD3 85 8B			sta :FP2MAN1
  6542 3CD5 A9 48			lda #$48
  6543 3CD7 85 8C			sta :FP2MAN2
  6544 3CD9 A9 40			lda #$40
  6545 3CDB 85 8D			sta :FP2MAN3
  6546 3CDD B5 95			lda :STACKORIGIN-1,x
  6547 3CDF 85 86			sta :FP1MAN0
  6548 3CE1 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6549 3CE3 85 87			sta :FP1MAN1
  6550 3CE5 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6551 3CE7 85 88			sta :FP1MAN2
  6552 3CE9 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6553 3CEB 85 89			sta :FP1MAN3
  6554 3CED 20 F4 16			jsr @FDIV
  6555 3CF0 CA				dex
  6556 3CF1 A5 8E			lda :FPMAN0
  6557 3CF3 8D 86 99			sta F_HLP
  6558 3CF6 A5 8F			lda :FPMAN1
  6559 3CF8 8D 87 99			sta F_HLP+1
  6560 3CFB A5 90			lda :FPMAN2
  6561 3CFD 8D 88 99			sta F_HLP+2
  6562 3D00 A5 91			lda :FPMAN3
  6563 3D02 8D 89 99			sta F_HLP+3
  6564 3D05 CA				dex
  6565
  6566 				; optimize OK (service.pas), line = 1161
  6567
  6568 3D06 AD 86 99			lda F_HLP
  6569 3D09 85 8E			sta :FPMAN0
  6570 3D0B AD 87 99			lda F_HLP+1
  6571 3D0E 85 8F			sta :FPMAN1
  6572 3D10 AD 88 99			lda F_HLP+2
  6573 3D13 85 90			sta :FPMAN2
  6574 3D15 AD 89 99			lda F_HLP+3
  6575 3D18 85 91			sta :FPMAN3
  6576 3D1A 20 BC 17			jsr @F2I
  6577 3D1D A5 8E			lda :FPMAN0
  6578 3D1F 8D 46 9D			sta W
  6579 3D22 A5 8F			lda :FPMAN1
  6580 3D24 8D 47 9D			sta W+1
  6581
  6582 				; optimize OK (service.pas), line = 1163
  6583
  6584 3D27 AC 40 9D 84 84 AC + 	mwy BALL :bp2
  6585 3D31 A0 00			ldy #$00
  6586 3D33 B1 84			lda (:bp2),y
  6587 3D35 10 0E			jpl l_0CC3
  6588 3D37 AD 46 9D			lda W
  6589 3D3A 18 69 B4			add #$B4
  6590 3D3D 8D 46 9D			sta W
  6591 3D40 90 03			scc
  6592 3D42 EE 47 9D			inc W+1
  6593 3D45			l_0CC3
  6594
  6595 				; optimize OK (service.pas), line = 1165
  6596
  6597 3D45 AD 46 9D			lda W
  6598 3D48 18 69 68			add #$68
  6599 3D4B 8D 46 9D			sta W
  6600 3D4E AD 47 9D			lda W+1
  6601 3D51 69 01			adc #$01
  6602 3D53 8D 47 9D			sta W+1
  6603
  6604 				; optimize OK (service.pas), line = 1166
  6605
  6606 3D56 A9 68			lda #$68
  6607 3D58 85 8E			sta @SMALLINT.MOD.B
  6608 3D5A A9 01			lda #$01
  6609 3D5C 85 8F			sta @SMALLINT.MOD.B+1
  6610 3D5E AD 46 9D			lda W
  6611 3D61 85 86			sta @SMALLINT.MOD.A
  6612 3D63 AD 47 9D			lda W+1
  6613 3D66 85 87			sta @SMALLINT.MOD.A+1
  6614 3D68 20 9D 12			jsr @SMALLINT.MOD
  6615 3D6B A5 92			lda @SMALLINT.MOD.RESULT
  6616 3D6D 8D 46 9D			sta W
  6617 3D70 A5 93			lda @SMALLINT.MOD.RESULT+1
  6618 3D72 8D 47 9D			sta W+1
  6619 3D75			l_0C94
  6620
  6621 				; optimize OK (service.pas), line = 1169
  6622
  6623 3D75 AD 46 9D			lda W
  6624 3D78 8D 44 9D			sta RESULT
  6625 3D7B AD 47 9D			lda W+1
  6626 3D7E 8D 45 9D			sta RESULT+1
  6627 3D81			@exit
  6628
  6629 				; ------------------------------------------------------------
  6630
  6631 = 9D40			BALL	= DATAORIGIN+$05B4
  6632 = 978C			BALL.X	= DATAORIGIN+$0000
  6633 = 978E			BALL.Y	= DATAORIGIN+$0002
  6634 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  6635 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  6636 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  6637 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  6638 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  6639 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  6640 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  6641 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  6642 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  6643 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  6644 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  6645 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  6646 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  6647 = 97A6			BALL.STM	= DATAORIGIN+$001A
  6648 = 9D44			RESULT	= DATAORIGIN+$05B8
  6649 = 9D46			W	= DATAORIGIN+$05BA
  6650
  6651 = 9D40			@VarData	= BALL
  6652 = 0004			@VarDataSize	= 4
  6653
  6654 3D81 60				rts						; ret
  6655 				.endl
  6656
  6657 3D82			.local	START_BALL					; PROCEDURE
  6658
  6659 				; optimize OK (service.pas), line = 1178
  6660
  6661 3D82 AC 48 9D 84 84 AC + 	mwy BALL :bp2
  6662 3D8C A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6663 3D8E A0 00			ldy #BALL.X-DATAORIGIN
  6664 3D90 AD 05 99			lda VAUS.X
  6665 3D93 18 71 84			add (:bp2),y
  6666 3D96 91 84			sta (:bp2),y
  6667 3D98 C8				iny
  6668 3D99 A9 00			lda #$00
  6669 3D9B 69 00			adc #$00
  6670 3D9D 91 84			sta (:bp2),y
  6671
  6672 				; optimize OK (service.pas), line = 1184
  6673
  6674 3D9F A0 02			ldy #BALL.Y-DATAORIGIN
  6675 3DA1 AD 06 99			lda VAUS.Y
  6676 3DA4 38 E9 03			sub #$03
  6677 3DA7 91 84			sta (:bp2),y
  6678 3DA9 C8				iny
  6679 3DAA A9 00			lda #$00
  6680 3DAC E9 00			sbc #$00
  6681 3DAE 91 84			sta (:bp2),y
  6682
  6683 				; optimize OK (service.pas), line = 1189
  6684
  6685 3DB0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6686 3DB2 A9 00			lda #$00
  6687 3DB4 91 84			sta (:bp2),y
  6688 3DB6 C8				iny
  6689 3DB7 91 84			sta (:bp2),y
  6690
  6691 				; optimize OK (service.pas), line = 1190
  6692
  6693 3DB9 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6694 3DBB 91 84			sta (:bp2),y
  6695 3DBD C8				iny
  6696 3DBE 91 84			sta (:bp2),y
  6697
  6698 				; optimize OK (service.pas), line = 1192
  6699
  6700 3DC0 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6701 3DC2 A9 01			lda #$01
  6702 3DC4 91 84			sta (:bp2),y
  6703
  6704 				; optimize OK (service.pas), line = 1194
  6705
  6706 3DC6 A0 14			ldy #BALL.SBD-DATAORIGIN
  6707 3DC8 A9 00			lda #$00
  6708 3DCA 91 84			sta (:bp2),y
  6709 3DCC C8				iny
  6710 3DCD 91 84			sta (:bp2),y
  6711
  6712 				; optimize OK (service.pas), line = 1195
  6713
  6714 3DCF A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6715 3DD1 91 84			sta (:bp2),y
  6716
  6717 				; ------------------------------------------------------------
  6718
  6719 = 9D48			BALL	= DATAORIGIN+$05BC
  6720 = 978C			BALL.X	= DATAORIGIN+$0000
  6721 = 978E			BALL.Y	= DATAORIGIN+$0002
  6722 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  6723 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  6724 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  6725 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  6726 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  6727 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  6728 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  6729 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  6730 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  6731 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  6732 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  6733 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  6734 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  6735 = 97A6			BALL.STM	= DATAORIGIN+$001A
  6736
  6737 = 9D48			@VarData	= BALL
  6738 = 0002			@VarDataSize	= 2
  6739
  6740 3DD3			@exit
  6741 					.ifdef @new
  6742 					lda <@VarData
  6743 					sta :ztmp
  6744 					lda >@VarData
  6745 					ldy #@VarDataSize-1
  6746 					jmp @FreeMem
  6747 					els
  6748 3DD3 60				rts						; ret
  6749 					eif
  6750 				.endl
  6751
  6752 3DD4			.local	BALL_SPEED					; FUNCTION
  6753
  6754 				; ------------------------------------------------------------
  6755
  6756 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6757 				; as Pointer
  6758 3DD4 B5 96			lda :STACKORIGIN,x
  6759 3DD6 85 84			sta :bp2
  6760 3DD8 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6761 3DDA 85 85			sta :bp2+1
  6762 3DDC A0 1A			ldy #$1A
  6763 3DDE B1 84 99 4C 9D 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6764 3DE6 CA				dex
  6765 3DE7			@main
  6766
  6767 				; optimize OK (service.pas), line = 1205
  6768
  6769 3DE7 AD 5C 9D			lda BALL.SPEEDX
  6770 3DEA 85 8E			sta :ecx
  6771 3DEC 85 92			sta :ztmp8
  6772 3DEE AD 5D 9D			lda BALL.SPEEDX+1
  6773 3DF1 85 8F			sta :ecx+1
  6774 3DF3 85 93			sta :ztmp9
  6775 3DF5 AD 5C 9D			lda BALL.SPEEDX
  6776 3DF8 85 86			sta :eax
  6777 3DFA 85 94			sta :ztmp10
  6778 3DFC AD 5D 9D			lda BALL.SPEEDX+1
  6779 3DFF 85 87			sta :eax+1
  6780 3E01 85 95			sta :ztmp11
  6781 					.ifdef fmulinit
  6782 					fmulu_16
  6783 					els
  6784 3E03 20 58 13			imulCX
  6785 					eif
  6786 3E06 A5 95			lda :ztmp11
  6787 3E08 10 0D			bpl @+
  6788 3E0A A5 88			lda :eax+2
  6789 3E0C 38 E5 92			sub :ztmp8
  6790 3E0F 85 88			sta :eax+2
  6791 3E11 A5 89			lda :eax+3
  6792 3E13 E5 93			sbc :ztmp9
  6793 3E15 85 89			sta :eax+3
  6794 				@
  6795 3E17 A5 93			lda :ztmp9
  6796 3E19 10 0D			bpl @+
  6797 3E1B A5 88			lda :eax+2
  6798 3E1D 38 E5 94			sub :ztmp10
  6799 3E20 85 88			sta :eax+2
  6800 3E22 A5 89			lda :eax+3
  6801 3E24 E5 95			sbc :ztmp11
  6802 3E26 85 89			sta :eax+3
  6803 				@
  6804 3E28 A5 86			lda :eax
  6805 3E2A 85 9F			sta :STACKORIGIN+9
  6806 3E2C A5 87			lda :eax+1
  6807 3E2E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6808 3E30 A5 88			lda :eax+2
  6809 3E32 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6810 3E34 A5 89			lda :eax+3
  6811 3E36 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6812 3E38 AD 5E 9D			lda BALL.SPEEDY
  6813 3E3B 85 8E			sta :ecx
  6814 3E3D 85 92			sta :ztmp8
  6815 3E3F AD 5F 9D			lda BALL.SPEEDY+1
  6816 3E42 85 8F			sta :ecx+1
  6817 3E44 85 93			sta :ztmp9
  6818 3E46 AD 5E 9D			lda BALL.SPEEDY
  6819 3E49 85 86			sta :eax
  6820 3E4B 85 94			sta :ztmp10
  6821 3E4D AD 5F 9D			lda BALL.SPEEDY+1
  6822 3E50 85 87			sta :eax+1
  6823 3E52 85 95			sta :ztmp11
  6824 					.ifdef fmulinit
  6825 					fmulu_16
  6826 					els
  6827 3E54 20 58 13			imulCX
  6828 					eif
  6829 3E57 A5 95			lda :ztmp11
  6830 3E59 10 0D			bpl @+
  6831 3E5B A5 88			lda :eax+2
  6832 3E5D 38 E5 92			sub :ztmp8
  6833 3E60 85 88			sta :eax+2
  6834 3E62 A5 89			lda :eax+3
  6835 3E64 E5 93			sbc :ztmp9
  6836 3E66 85 89			sta :eax+3
  6837 				@
  6838 3E68 A5 93			lda :ztmp9
  6839 3E6A 10 0D			bpl @+
  6840 3E6C A5 88			lda :eax+2
  6841 3E6E 38 E5 94			sub :ztmp10
  6842 3E71 85 88			sta :eax+2
  6843 3E73 A5 89			lda :eax+3
  6844 3E75 E5 95			sbc :ztmp11
  6845 3E77 85 89			sta :eax+3
  6846 				@
  6847 3E79 A5 9F			lda :STACKORIGIN+9
  6848 3E7B 18 65 86			add :eax
  6849 3E7E 8D 69 9D			sta I
  6850 3E81 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6851 3E83 65 87			adc :eax+1
  6852 3E85 8D 6A 9D			sta I+1
  6853 3E88 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6854 3E8A 65 88			adc :eax+2
  6855 3E8C 8D 6B 9D			sta I+2
  6856 3E8F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6857 3E91 65 89			adc :eax+3
  6858 3E93 8D 6C 9D			sta I+3
  6859
  6860 				; optimize OK (service.pas), line = 1207
  6861
  6862 3E96 AD 69 9D			lda I
  6863 3E99 8D 97 97			sta SYSTEM.SQRT.@010185000.X
  6864 3E9C AD 6A 9D			lda I+1
  6865 3E9F 8D 98 97			sta SYSTEM.SQRT.@010185000.X+1
  6866 3EA2 AD 6B 9D			lda I+2
  6867 3EA5 8D 99 97			sta SYSTEM.SQRT.@010185000.X+2
  6868 3EA8 AD 6C 9D			lda I+3
  6869 3EAB 8D 9A 97			sta SYSTEM.SQRT.@010185000.X+3
  6870 3EAE 20 88 1B			jsr SYSTEM.SQRT.@010185000
  6871 3EB1 AD 9B 97			lda SYSTEM.SQRT.@010185000.RESULT
  6872 3EB4 8D 86 99			sta F_HLP
  6873 3EB7 AD 9C 97			lda SYSTEM.SQRT.@010185000.RESULT+1
  6874 3EBA 8D 87 99			sta F_HLP+1
  6875 3EBD AD 9D 97			lda SYSTEM.SQRT.@010185000.RESULT+2
  6876 3EC0 8D 88 99			sta F_HLP+2
  6877 3EC3 AD 9E 97			lda SYSTEM.SQRT.@010185000.RESULT+3
  6878 3EC6 8D 89 99			sta F_HLP+3
  6879
  6880 				; optimize OK (service.pas), line = 1209
  6881
  6882 3EC9 AD 86 99			lda F_HLP
  6883 3ECC 85 8E			sta :FPMAN0
  6884 3ECE AD 87 99			lda F_HLP+1
  6885 3ED1 85 8F			sta :FPMAN1
  6886 3ED3 AD 88 99			lda F_HLP+2
  6887 3ED6 85 90			sta :FPMAN2
  6888 3ED8 AD 89 99			lda F_HLP+3
  6889 3EDB 85 91			sta :FPMAN3
  6890 3EDD 20 BC 17			jsr @F2I
  6891 3EE0 A5 8E			lda :FPMAN0
  6892 3EE2 8D 67 9D			sta RESULT
  6893 3EE5 A5 8F			lda :FPMAN1
  6894 3EE7 8D 68 9D			sta RESULT+1
  6895 3EEA			@exit
  6896
  6897 				; ------------------------------------------------------------
  6898
  6899 = 9D4C			adr.BALL	= DATAORIGIN+$05C0	; [27] RECORD
  6900 3EEA			.var BALL	= adr.BALL .word
  6901 = 9D4C			BALL.X	= DATAORIGIN+$05C0
  6902 = 9D4E			BALL.Y	= DATAORIGIN+$05C2
  6903 = 9D50			BALL.FINEX	= DATAORIGIN+$05C4
  6904 = 9D52			BALL.FINEY	= DATAORIGIN+$05C6
  6905 = 9D54			BALL.OLDX	= DATAORIGIN+$05C8
  6906 = 9D56			BALL.OLDY	= DATAORIGIN+$05CA
  6907 = 9D58			BALL.SPEED	= DATAORIGIN+$05CC
  6908 = 9D5A			BALL.FINESPEED	= DATAORIGIN+$05CE
  6909 = 9D5C			BALL.SPEEDX	= DATAORIGIN+$05D0
  6910 = 9D5E			BALL.SPEEDY	= DATAORIGIN+$05D2
  6911 = 9D60			BALL.SBD	= DATAORIGIN+$05D4
  6912 = 9D62			BALL.BRWHIT	= DATAORIGIN+$05D6
  6913 = 9D63			BALL.INPLAY	= DATAORIGIN+$05D7
  6914 = 9D64			BALL.LAUNCH	= DATAORIGIN+$05D8
  6915 = 9D65			BALL.ONVAUS	= DATAORIGIN+$05D9
  6916 = 9D66			BALL.STM	= DATAORIGIN+$05DA
  6917 = 9D67			RESULT	= DATAORIGIN+$05DB
  6918 = 9D69			I	= DATAORIGIN+$05DD
  6919
  6920 = 9D4C			@VarData	= BALL.X
  6921 = 001F			@VarDataSize	= 31
  6922
  6923 3EEA 60				rts						; ret
  6924 = 3EEB 4C 9D		BALL
  6924 				.endl
  6925
  6926 3EED			.local	MOVE_BALL					; PROCEDURE
  6927
  6928 				; optimize OK (service.pas), line = 1224
  6929
  6930 3EED AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  6931 3EF7 A0 00			ldy #BALL.X-DATAORIGIN
  6932 3EF9 B1 84			lda (:bp2),y
  6933 3EFB C8				iny
  6934 3EFC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6935 3EFE A9 00			lda #$00
  6936 3F00 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6937 3F02 18 71 84			add (:bp2),y
  6938 3F05 85 9F			sta :STACKORIGIN+9
  6939 3F07 C8				iny
  6940 3F08 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6941 3F0A 71 84			adc (:bp2),y
  6942 3F0C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6943 3F0E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6944 3F10 A5 9F			lda :STACKORIGIN+9
  6945 3F12 18 71 84			add (:bp2),y
  6946 3F15 8D 71 9D			sta X
  6947 3F18 C8				iny
  6948 3F19 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6949 3F1B 71 84			adc (:bp2),y
  6950 3F1D 8D 72 9D			sta X+1
  6951
  6952 				; optimize OK (service.pas), line = 1225
  6953
  6954 3F20 A0 02			ldy #BALL.Y-DATAORIGIN
  6955 3F22 B1 84			lda (:bp2),y
  6956 3F24 C8				iny
  6957 3F25 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6958 3F27 A9 00			lda #$00
  6959 3F29 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6960 3F2B 18 71 84			add (:bp2),y
  6961 3F2E 85 9F			sta :STACKORIGIN+9
  6962 3F30 C8				iny
  6963 3F31 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6964 3F33 71 84			adc (:bp2),y
  6965 3F35 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6966 3F37 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6967 3F39 A5 9F			lda :STACKORIGIN+9
  6968 3F3B 18 71 84			add (:bp2),y
  6969 3F3E 8D 73 9D			sta Y
  6970 3F41 C8				iny
  6971 3F42 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6972 3F44 71 84			adc (:bp2),y
  6973 3F46 8D 74 9D			sta Y+1
  6974
  6975 				; optimize OK (service.pas), line = 1227
  6976
  6977 3F49 A0 00			ldy #BALL.X-DATAORIGIN
  6978 3F4B AD 72 9D			lda X+1
  6979 3F4E 91 84			sta (:bp2),y
  6980 3F50 C8				iny
  6981 3F51 A9 00			lda #$00
  6982 3F53 91 84			sta (:bp2),y
  6983
  6984 				; optimize OK (service.pas), line = 1228
  6985
  6986 3F55 A0 02			ldy #BALL.Y-DATAORIGIN
  6987 3F57 AD 74 9D			lda Y+1
  6988 3F5A 91 84			sta (:bp2),y
  6989 3F5C C8				iny
  6990 3F5D A9 00			lda #$00
  6991 3F5F 91 84			sta (:bp2),y
  6992
  6993 				; optimize OK (service.pas), line = 1230
  6994
  6995 3F61 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6996 3F63 AD 71 9D			lda X
  6997 3F66 91 84			sta (:bp2),y
  6998 3F68 C8				iny
  6999 3F69 A9 00			lda #$00
  7000 3F6B 91 84			sta (:bp2),y
  7001
  7002 				; optimize OK (service.pas), line = 1231
  7003
  7004 3F6D A0 06			ldy #BALL.FINEY-DATAORIGIN
  7005 3F6F AD 73 9D			lda Y
  7006 3F72 91 84			sta (:bp2),y
  7007 3F74 C8				iny
  7008 3F75 A9 00			lda #$00
  7009 3F77 91 84			sta (:bp2),y
  7010
  7011 				; optimize OK (service.pas), line = 1237
  7012
  7013 3F79 A0 00			ldy #BALL.X-DATAORIGIN
  7014 3F7B B1 84			lda (:bp2),y
  7015 3F7D C8				iny
  7016 3F7E C9 D9			cmp #$D9
  7017 3F80 B1 84			lda (:bp2),y
  7018 3F82 E9 00			sbc #$00
  7019 3F84 50 02			svc
  7020 3F86 49 80			eor #$80
  7021 3F88 30 67			jmi l_0D87
  7022
  7023 				; optimize OK (service.pas), line = 1239
  7024
  7025 3F8A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7026 3F8C A9 00			lda #$00
  7027 3F8E 38 F1 84			sub (:bp2),y
  7028 3F91 85 9F			sta :STACKORIGIN+9
  7029 3F93 C8				iny
  7030 3F94 A9 00			lda #$00
  7031 3F96 F1 84			sbc (:bp2),y
  7032 3F98 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7033 3F9A A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7034 3F9C A5 9F			lda :STACKORIGIN+9
  7035 3F9E 91 84			sta (:bp2),y
  7036 3FA0 C8				iny
  7037 3FA1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7038 3FA3 91 84			sta (:bp2),y
  7039
  7040 				; optimize OK (service.pas), line = 1240
  7041
  7042 3FA5 A0 00			ldy #BALL.X-DATAORIGIN
  7043 3FA7 A9 B0			lda #$B0
  7044 3FA9 38 F1 84			sub (:bp2),y
  7045 3FAC 85 9F			sta :STACKORIGIN+9
  7046 3FAE C8				iny
  7047 3FAF A9 01			lda #$01
  7048 3FB1 F1 84			sbc (:bp2),y
  7049 3FB3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7050 3FB5 A0 00			ldy #BALL.X-DATAORIGIN
  7051 3FB7 A5 9F			lda :STACKORIGIN+9
  7052 3FB9 91 84			sta (:bp2),y
  7053 3FBB C8				iny
  7054 3FBC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7055 3FBE 91 84			sta (:bp2),y
  7056
  7057 				; optimize OK (service.pas), line = 1241
  7058
  7059 3FC0 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7060 3FC2 A9 FF			lda #$FF
  7061 3FC4 51 84			eor (:bp2),y
  7062 3FC6 85 9F			sta :STACKORIGIN+9
  7063 3FC8 C8				iny
  7064 3FC9 A9 00			lda #$00
  7065 3FCB F1 84			sbc (:bp2),y
  7066 3FCD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7067 3FCF A0 04			ldy #BALL.FINEX-DATAORIGIN
  7068 3FD1 A5 9F			lda :STACKORIGIN+9
  7069 3FD3 91 84			sta (:bp2),y
  7070 3FD5 C8				iny
  7071 3FD6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7072 3FD8 91 84			sta (:bp2),y
  7073
  7074 				; optimize OK (service.pas), line = 1242
  7075
  7076 3FDA A9 F0			lda #$F0
  7077 3FDC 8D 81 98			sta BALL_BLOCK_SOUND.A
  7078 3FDF A9 00			lda #$00
  7079 3FE1 8D 82 98			sta BALL_BLOCK_SOUND.A+1
  7080 3FE4 A9 05			lda #$05
  7081 3FE6 8D 83 98			sta BALL_BLOCK_SOUND.B
  7082 3FE9 A9 00			lda #$00
  7083 3FEB 8D 84 98			sta BALL_BLOCK_SOUND.B+1
  7084 3FEE 20 5D 2B			jsr BALL_BLOCK_SOUND
  7085 3FF1			l_0D87
  7086
  7087 				; optimize OK (service.pas), line = 1247
  7088
  7089 3FF1 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7090 3FFB A0 00			ldy #BALL.X-DATAORIGIN
  7091 3FFD B1 84			lda (:bp2),y
  7092 3FFF C8				iny
  7093 4000 C9 0A			cmp #$0A
  7094 4002 B1 84			lda (:bp2),y
  7095 4004 E9 00			sbc #$00
  7096 4006 50 02			svc
  7097 4008 49 80			eor #$80
  7098 400A 10 67			jpl l_0DBC
  7099
  7100 				; optimize OK (service.pas), line = 1249
  7101
  7102 400C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7103 400E A9 00			lda #$00
  7104 4010 38 F1 84			sub (:bp2),y
  7105 4013 85 9F			sta :STACKORIGIN+9
  7106 4015 C8				iny
  7107 4016 A9 00			lda #$00
  7108 4018 F1 84			sbc (:bp2),y
  7109 401A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7110 401C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7111 401E A5 9F			lda :STACKORIGIN+9
  7112 4020 91 84			sta (:bp2),y
  7113 4022 C8				iny
  7114 4023 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7115 4025 91 84			sta (:bp2),y
  7116
  7117 				; optimize OK (service.pas), line = 1250
  7118
  7119 4027 A0 00			ldy #BALL.X-DATAORIGIN
  7120 4029 A9 14			lda #$14
  7121 402B 38 F1 84			sub (:bp2),y
  7122 402E 85 9F			sta :STACKORIGIN+9
  7123 4030 C8				iny
  7124 4031 A9 00			lda #$00
  7125 4033 F1 84			sbc (:bp2),y
  7126 4035 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7127 4037 A0 00			ldy #BALL.X-DATAORIGIN
  7128 4039 A5 9F			lda :STACKORIGIN+9
  7129 403B 91 84			sta (:bp2),y
  7130 403D C8				iny
  7131 403E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7132 4040 91 84			sta (:bp2),y
  7133
  7134 				; optimize OK (service.pas), line = 1251
  7135
  7136 4042 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7137 4044 A9 FF			lda #$FF
  7138 4046 51 84			eor (:bp2),y
  7139 4048 85 9F			sta :STACKORIGIN+9
  7140 404A C8				iny
  7141 404B A9 00			lda #$00
  7142 404D F1 84			sbc (:bp2),y
  7143 404F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7144 4051 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7145 4053 A5 9F			lda :STACKORIGIN+9
  7146 4055 91 84			sta (:bp2),y
  7147 4057 C8				iny
  7148 4058 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7149 405A 91 84			sta (:bp2),y
  7150
  7151 				; optimize OK (service.pas), line = 1252
  7152
  7153 405C A9 F0			lda #$F0
  7154 405E 8D 81 98			sta BALL_BLOCK_SOUND.A
  7155 4061 A9 00			lda #$00
  7156 4063 8D 82 98			sta BALL_BLOCK_SOUND.A+1
  7157 4066 A9 05			lda #$05
  7158 4068 8D 83 98			sta BALL_BLOCK_SOUND.B
  7159 406B A9 00			lda #$00
  7160 406D 8D 84 98			sta BALL_BLOCK_SOUND.B+1
  7161 4070 20 5D 2B			jsr BALL_BLOCK_SOUND
  7162 4073			l_0DBC
  7163
  7164 				; optimize OK (service.pas), line = 1257
  7165
  7166 4073 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7167 407D A0 02			ldy #BALL.Y-DATAORIGIN
  7168 407F B1 84			lda (:bp2),y
  7169 4081 C8				iny
  7170 4082 C9 0C			cmp #$0C
  7171 4084 B1 84			lda (:bp2),y
  7172 4086 E9 00			sbc #$00
  7173 4088 50 02			svc
  7174 408A 49 80			eor #$80
  7175 408C 10 67			jpl l_0DF1
  7176
  7177 				; optimize OK (service.pas), line = 1259
  7178
  7179 408E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7180 4090 A9 00			lda #$00
  7181 4092 38 F1 84			sub (:bp2),y
  7182 4095 85 9F			sta :STACKORIGIN+9
  7183 4097 C8				iny
  7184 4098 A9 00			lda #$00
  7185 409A F1 84			sbc (:bp2),y
  7186 409C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7187 409E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7188 40A0 A5 9F			lda :STACKORIGIN+9
  7189 40A2 91 84			sta (:bp2),y
  7190 40A4 C8				iny
  7191 40A5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7192 40A7 91 84			sta (:bp2),y
  7193
  7194 				; optimize OK (service.pas), line = 1260
  7195
  7196 40A9 A0 02			ldy #BALL.Y-DATAORIGIN
  7197 40AB A9 18			lda #$18
  7198 40AD 38 F1 84			sub (:bp2),y
  7199 40B0 85 9F			sta :STACKORIGIN+9
  7200 40B2 C8				iny
  7201 40B3 A9 00			lda #$00
  7202 40B5 F1 84			sbc (:bp2),y
  7203 40B7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7204 40B9 A0 02			ldy #BALL.Y-DATAORIGIN
  7205 40BB A5 9F			lda :STACKORIGIN+9
  7206 40BD 91 84			sta (:bp2),y
  7207 40BF C8				iny
  7208 40C0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7209 40C2 91 84			sta (:bp2),y
  7210
  7211 				; optimize OK (service.pas), line = 1261
  7212
  7213 40C4 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7214 40C6 A9 FF			lda #$FF
  7215 40C8 51 84			eor (:bp2),y
  7216 40CA 85 9F			sta :STACKORIGIN+9
  7217 40CC C8				iny
  7218 40CD A9 00			lda #$00
  7219 40CF F1 84			sbc (:bp2),y
  7220 40D1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7221 40D3 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7222 40D5 A5 9F			lda :STACKORIGIN+9
  7223 40D7 91 84			sta (:bp2),y
  7224 40D9 C8				iny
  7225 40DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7226 40DC 91 84			sta (:bp2),y
  7227
  7228 				; optimize OK (service.pas), line = 1262
  7229
  7230 40DE A9 F0			lda #$F0
  7231 40E0 8D 81 98			sta BALL_BLOCK_SOUND.A
  7232 40E3 A9 00			lda #$00
  7233 40E5 8D 82 98			sta BALL_BLOCK_SOUND.A+1
  7234 40E8 A9 05			lda #$05
  7235 40EA 8D 83 98			sta BALL_BLOCK_SOUND.B
  7236 40ED A9 00			lda #$00
  7237 40EF 8D 84 98			sta BALL_BLOCK_SOUND.B+1
  7238 40F2 20 5D 2B			jsr BALL_BLOCK_SOUND
  7239 40F5			l_0DF1
  7240
  7241 				; optimize OK (service.pas), line = 1270
  7242
  7243 40F5 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7244 40FF A0 02			ldy #BALL.Y-DATAORIGIN
  7245 4101 B1 84			lda (:bp2),y
  7246 4103 18 69 03			add #$03
  7247 4106 85 9F			sta :STACKORIGIN+9
  7248 4108 C8				iny
  7249 4109 B1 84			lda (:bp2),y
  7250 410B 69 00			adc #$00
  7251 410D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7252 410F A0 01			ldy #1
  7253 4111 A5 9F			lda :STACKORIGIN+9
  7254 4113 C9 B9			cmp #$B9
  7255 4115 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7256 4117 E9 00			sbc #$00
  7257 4119 50 02			svc
  7258 411B 49 80			eor #$80
  7259 411D 10 01			bpl @+
  7260 411F 88				dey
  7261 				@
  7262 4120 84 9F			sty :STACKORIGIN+9
  7263 4122 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7264 4124 B1 84			lda (:bp2),y
  7265 4126 85 A0			sta :STACKORIGIN+10
  7266 4128 C8				iny
  7267 4129 B1 84			lda (:bp2),y
  7268 412B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7269 412D A0 01			ldy #1
  7270 412F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7271 4131 30 04			bmi @+
  7272 4133 05 A0			ora :STACKORIGIN+10
  7273 4135 D0 01			sne
  7274 				@
  7275 4137 88				dey
  7276 				@
  7277 4138 98				tya
  7278 4139 25 9F			and :STACKORIGIN+9
  7279 413B 85 9F			sta :STACKORIGIN+9
  7280 413D A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7281 413F B1 84			lda (:bp2),y
  7282 4141 85 A0			sta :STACKORIGIN+10
  7283 4143 C8				iny
  7284 4144 B1 84			lda (:bp2),y
  7285 4146 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7286 4148 A0 01			ldy #1
  7287 414A A5 A0			lda :STACKORIGIN+10
  7288 414C C9 B9			cmp #$B9
  7289 414E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7290 4150 E9 00			sbc #$00
  7291 4152 50 02			svc
  7292 4154 49 80			eor #$80
  7293 4156 30 01			bmi @+
  7294 4158 88				dey
  7295 				@
  7296 4159 98				tya
  7297 415A 25 9F			and :STACKORIGIN+9
  7298 415C D0 03 4C 8F 44		jeq l_0E40
  7299
  7300 				; optimize OK (service.pas), line = 1274
  7301
  7302 4161 A0 00			ldy #BALL.X-DATAORIGIN
  7303 4163 B1 84			lda (:bp2),y
  7304 4165 85 9F			sta :STACKORIGIN+9
  7305 4167 C8				iny
  7306 4168 AD 05 99			lda VAUS.X
  7307 416B 38 E9 03			sub #$03
  7308 416E 85 A0			sta :STACKORIGIN+10
  7309 4170 A9 00			lda #$00
  7310 4172 E9 00			sbc #$00
  7311 4174 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7312 4176 A5 A0			lda :STACKORIGIN+10
  7313 4178 C5 9F			cmp :STACKORIGIN+9
  7314 417A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7315 417C F1 84			sbc (:bp2),y
  7316 417E 50 02			svc
  7317 4180 49 80			eor #$80
  7318 4182 30 03 4C 8F 44		jpl l_0E6F
  7319 4187 A0 00			ldy #BALL.X-DATAORIGIN
  7320 4189 B1 84			lda (:bp2),y
  7321 418B 85 A0			sta :STACKORIGIN+10
  7322 418D C8				iny
  7323 418E B1 84			lda (:bp2),y
  7324 4190 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7325 4192 AD 05 99			lda VAUS.X
  7326 4195 18 6D 0D 99			add VAUS.WIDTH
  7327 4199 85 A1			sta :STACKORIGIN+11
  7328 419B A9 00			lda #$00
  7329 419D 69 00			adc #$00
  7330 419F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7331 41A1 A5 A1			lda :STACKORIGIN+11
  7332 41A3 18 69 03			add #$03
  7333 41A6 85 A1			sta :STACKORIGIN+11
  7334 41A8 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7335 41AA 69 00			adc #$00
  7336 41AC 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7337 41AE A9 00			lda #$00
  7338 41B0 69 00			adc #$00
  7339 41B2 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  7340 41B4 A9 00			lda #$00
  7341 41B6 69 00			adc #$00
  7342 41B8 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  7343 41BA A0 00			ldy #$00
  7344 41BC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7345 41BE 10 01			spl
  7346 41C0 88				dey
  7347 41C1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7348 41C3 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  7349 41C5 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  7350 41C7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7351 41C9 C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
  7352 41CB D0 10			bne @+
  7353 41CD A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7354 41CF C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
  7355 41D1 D0 0A			bne @+
  7356 41D3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7357 41D5 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  7358 41D7 D0 04			bne @+
  7359 41D9 A5 A0			lda :STACKORIGIN+10
  7360 41DB C5 A1			cmp :STACKORIGIN+11
  7361 				@
  7362 41DD 90 03 4C 8F 44		jcs l_0E6F
  7363 				@
  7364
  7365 				; optimize OK (service.pas), line = 1277
  7366
  7367 41E2 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7368 41E4 A9 00			lda #$00
  7369 41E6 38 F1 84			sub (:bp2),y
  7370 41E9 85 9F			sta :STACKORIGIN+9
  7371 41EB C8				iny
  7372 41EC A9 00			lda #$00
  7373 41EE F1 84			sbc (:bp2),y
  7374 41F0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7375 41F2 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7376 41F4 A5 9F			lda :STACKORIGIN+9
  7377 41F6 91 84			sta (:bp2),y
  7378 41F8 C8				iny
  7379 41F9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7380 41FB 91 84			sta (:bp2),y
  7381
  7382 				; optimize OK (service.pas), line = 1279
  7383
  7384 41FD AD 11 99			lda VAUS.LETTER
  7385 4200 C9 06			cmp #$06
  7386 4202 D0 1D			jne l_0E93
  7387 4204 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7388 4206 B1 84			lda (:bp2),y
  7389 4208 D0 17			jne l_0E93
  7390
  7391 				; optimize OK (service.pas), line = 1281
  7392
  7393 420A A0 1A			ldy #BALL.STM-DATAORIGIN
  7394 420C 91 84			sta (:bp2),y
  7395
  7396 				; optimize OK (service.pas), line = 1282
  7397
  7398 420E A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7399 4210 A9 01			lda #$01
  7400 4212 91 84			sta (:bp2),y
  7401
  7402 				; optimize OK (service.pas), line = 1283
  7403
  7404 4214 A0 00			ldy #BALL.X-DATAORIGIN
  7405 4216 B1 84			lda (:bp2),y
  7406 4218 C8				iny
  7407 4219 38 ED 05 99			sub VAUS.X
  7408 421D A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7409 421F 91 84			sta (:bp2),y
  7410 4221			l_0E93
  7411
  7412 				; optimize OK (service.pas), line = 1286
  7413
  7414 4221 A9 2C			lda #$2C
  7415 4223 8D 81 98			sta BALL_BLOCK_SOUND.A
  7416 4226 A9 01			lda #$01
  7417 4228 8D 82 98			sta BALL_BLOCK_SOUND.A+1
  7418 422B A9 06			lda #$06
  7419 422D 8D 83 98			sta BALL_BLOCK_SOUND.B
  7420 4230 A9 00			lda #$00
  7421 4232 8D 84 98			sta BALL_BLOCK_SOUND.B+1
  7422 4235 20 5D 2B			jsr BALL_BLOCK_SOUND
  7423
  7424 				; optimize OK (service.pas), line = 1290
  7425
  7426 4238 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7427 4242 A0 00			ldy #BALL.X-DATAORIGIN
  7428 4244 B1 84			lda (:bp2),y
  7429 4246 85 9F			sta :STACKORIGIN+9
  7430 4248 C8				iny
  7431 4249 B1 84			lda (:bp2),y
  7432 424B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7433 424D AD 05 99			lda VAUS.X
  7434 4250 18 69 0A			add #$0A
  7435 4253 85 A0			sta :STACKORIGIN+10
  7436 4255 A9 00			lda #$00
  7437 4257 69 00			adc #$00
  7438 4259 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7439 425B A0 00			ldy #$00
  7440 425D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7441 425F 10 01			spl
  7442 4261 88				dey
  7443 4262 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7444 4264 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7445 4266 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7446 4268				.LOCAL
  7447 4268 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7448 426A 38 E9 00			sub #$00
  7449 426D D0 1C			bne L4
  7450 426F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7451 4271 C9 00			cmp #$00
  7452 4273 D0 0A			bne L1
  7453 4275 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7454 4277 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7455 4279 D0 04			bne L1
  7456 427B A5 9F			lda :STACKORIGIN+9
  7457 427D C5 A0			cmp :STACKORIGIN+10
  7458 427F F0 10		L1	beq L5
  7459 4281 B0 04			bcs L3
  7460 4283 A9 FF			lda #$FF
  7461 4285 D0 0A			bne L5
  7462 4287 A9 01		L3	lda #$01
  7463 4289 D0 06			bne L5
  7464 428B 50 04		L4	bvc L5
  7465 428D 49 FF			eor #$FF
  7466 428F 09 01			ora #$01
  7467 4291			L5
  7468 					.ENDL
  7469 4291 30 03 4C 54 43		jpl l_0EC3
  7470
  7471 				; optimize OK (service.pas), line = 1293
  7472
  7473 4296 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7474 4298 A9 00			lda #$00
  7475 429A 38 F1 84			sub (:bp2),y
  7476 429D 85 9F			sta :STACKORIGIN+9
  7477 429F C8				iny
  7478 42A0 A9 00			lda #$00
  7479 42A2 F1 84			sbc (:bp2),y
  7480 42A4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7481 42A6 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7482 42A8 A5 9F			lda :STACKORIGIN+9
  7483 42AA 91 84			sta (:bp2),y
  7484 42AC C8				iny
  7485 42AD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7486 42AF 91 84			sta (:bp2),y
  7487
  7488 				; optimize OK (service.pas), line = 1297
  7489
  7490 42B1 AD 6D 9D			lda BALL
  7491 42B4 8D 40 9D			sta GET_BALL_DIRECTION.BALL
  7492 42B7 AD 6E 9D			lda BALL+1
  7493 42BA 8D 41 9D			sta GET_BALL_DIRECTION.BALL+1
  7494 42BD 20 64 3B			jsr GET_BALL_DIRECTION
  7495 42C0 E8				inx
  7496 42C1 AD 44 9D 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7497 42C6 AD 45 9D 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7498 42CB A9 1E			lda #$1E
  7499 42CD 20 21 26			jsr SYSTEM.RANDOM.@010180000
  7500 42D0 B5 96			lda :STACKORIGIN,x
  7501 42D2 18 6D D1 97			add SYSTEM.RANDOM.@010180000.RESULT
  7502 42D6 8D 75 9D			sta ANGLE
  7503 42D9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7504 42DB 69 00			adc #$00
  7505 42DD 8D 76 9D			sta ANGLE+1
  7506 42E0 CA				dex
  7507
  7508 				; optimize OK (service.pas), line = 1305
  7509
  7510 42E1 A9 A0			lda #$A0
  7511 42E3 8D D5 9C			sta MIN.A
  7512 42E6 A9 00			lda #$00
  7513 42E8 8D D6 9C			sta MIN.A+1
  7514 42EB AD 75 9D			lda ANGLE
  7515 42EE 8D D7 9C			sta MIN.B
  7516 42F1 AD 76 9D			lda ANGLE+1
  7517 42F4 8D D8 9C			sta MIN.B+1
  7518 42F7 20 70 2E			jsr MIN
  7519 42FA A9 78			lda #$78
  7520 42FC 8D CF 9C			sta MAX.A
  7521 42FF A9 00			lda #$00
  7522 4301 8D D0 9C			sta MAX.A+1
  7523 4304 AD D9 9C			lda MIN.RESULT
  7524 4307 8D D1 9C			sta MAX.B
  7525 430A AD DA 9C			lda MIN.RESULT+1
  7526 430D 8D D2 9C			sta MAX.B+1
  7527 4310 20 45 2E			jsr MAX
  7528 4313 AD 6D 9D			lda BALL
  7529 4316 8D 36 9D			sta SET_BALL_DIRECTION.BALL
  7530 4319 AD 6E 9D			lda BALL+1
  7531 431C 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
  7532 431F AD D3 9C			lda MAX.RESULT
  7533 4322 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
  7534 4325 AD D4 9C			lda MAX.RESULT+1
  7535 4328 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
  7536 432B 20 60 39			jsr SET_BALL_DIRECTION
  7537
  7538 				; optimize OK (service.pas), line = 1310
  7539
  7540 432E AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7541 4338 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7542 433A B1 84			lda (:bp2),y
  7543 433C 8D 2C 9D			sta SET_BALL_SPEED.SPEED
  7544 433F C8				iny
  7545 4340 B1 84			lda (:bp2),y
  7546 4342 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
  7547 4345 AD 6D 9D			lda BALL
  7548 4348 8D 28 9D			sta SET_BALL_SPEED.BALL
  7549 434B AD 6E 9D			lda BALL+1
  7550 434E 8D 29 9D			sta SET_BALL_SPEED.BALL+1
  7551 4351 20 40 37			jsr SET_BALL_SPEED
  7552 4354			l_0EC3
  7553
  7554 				; optimize OK (service.pas), line = 1316
  7555
  7556 4354 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7557 435E A0 00			ldy #BALL.X-DATAORIGIN
  7558 4360 B1 84			lda (:bp2),y
  7559 4362 85 9F			sta :STACKORIGIN+9
  7560 4364 C8				iny
  7561 4365 B1 84			lda (:bp2),y
  7562 4367 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7563 4369 AD 05 99			lda VAUS.X
  7564 436C 18 6D 0D 99			add VAUS.WIDTH
  7565 4370 85 A0			sta :STACKORIGIN+10
  7566 4372 A9 00			lda #$00
  7567 4374 69 00			adc #$00
  7568 4376 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7569 4378 A5 A0			lda :STACKORIGIN+10
  7570 437A 38 E9 0A			sub #$0A
  7571 437D 85 A0			sta :STACKORIGIN+10
  7572 437F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7573 4381 E9 00			sbc #$00
  7574 4383 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7575 4385 A9 00			lda #$00
  7576 4387 E9 00			sbc #$00
  7577 4389 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7578 438B A9 00			lda #$00
  7579 438D E9 00			sbc #$00
  7580 438F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7581 4391 A0 00			ldy #$00
  7582 4393 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7583 4395 10 01			spl
  7584 4397 88				dey
  7585 4398 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7586 439A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7587 439C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7588 439E				.LOCAL
  7589 439E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7590 43A0 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
  7591 43A3 D0 1C			bne L4
  7592 43A5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7593 43A7 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  7594 43A9 D0 0A			bne L1
  7595 43AB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7596 43AD C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7597 43AF D0 04			bne L1
  7598 43B1 A5 9F			lda :STACKORIGIN+9
  7599 43B3 C5 A0			cmp :STACKORIGIN+10
  7600 43B5 F0 10		L1	beq L5
  7601 43B7 B0 04			bcs L3
  7602 43B9 A9 FF			lda #$FF
  7603 43BB D0 0A			bne L5
  7604 43BD A9 01		L3	lda #$01
  7605 43BF D0 06			bne L5
  7606 43C1 50 04		L4	bvc L5
  7607 43C3 49 FF			eor #$FF
  7608 43C5 09 01			ora #$01
  7609 43C7			L5
  7610 					.ENDL
  7611 43C7 10 03 4C 8F 44		jmi l_0F04
  7612 43CC D0 03 4C 8F 44		jeq l_0F04
  7613
  7614 				; optimize OK (service.pas), line = 1318
  7615
  7616 43D1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7617 43D3 A9 00			lda #$00
  7618 43D5 38 F1 84			sub (:bp2),y
  7619 43D8 85 9F			sta :STACKORIGIN+9
  7620 43DA C8				iny
  7621 43DB A9 00			lda #$00
  7622 43DD F1 84			sbc (:bp2),y
  7623 43DF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7624 43E1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7625 43E3 A5 9F			lda :STACKORIGIN+9
  7626 43E5 91 84			sta (:bp2),y
  7627 43E7 C8				iny
  7628 43E8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7629 43EA 91 84			sta (:bp2),y
  7630
  7631 				; optimize OK (service.pas), line = 1319
  7632
  7633 43EC AD 6D 9D			lda BALL
  7634 43EF 8D 40 9D			sta GET_BALL_DIRECTION.BALL
  7635 43F2 AD 6E 9D			lda BALL+1
  7636 43F5 8D 41 9D			sta GET_BALL_DIRECTION.BALL+1
  7637 43F8 20 64 3B			jsr GET_BALL_DIRECTION
  7638 43FB E8				inx
  7639 43FC AD 44 9D 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7640 4401 AD 45 9D 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7641 4406 A9 1E			lda #$1E
  7642 4408 20 21 26			jsr SYSTEM.RANDOM.@010180000
  7643 440B B5 96			lda :STACKORIGIN,x
  7644 440D 38 ED D1 97			sub SYSTEM.RANDOM.@010180000.RESULT
  7645 4411 8D 75 9D			sta ANGLE
  7646 4414 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7647 4416 E9 00			sbc #$00
  7648 4418 8D 76 9D			sta ANGLE+1
  7649 441B CA				dex
  7650
  7651 				; optimize OK (service.pas), line = 1320
  7652
  7653 441C A9 14			lda #$14
  7654 441E 8D CF 9C			sta MAX.A
  7655 4421 A9 00			lda #$00
  7656 4423 8D D0 9C			sta MAX.A+1
  7657 4426 AD 75 9D			lda ANGLE
  7658 4429 8D D1 9C			sta MAX.B
  7659 442C AD 76 9D			lda ANGLE+1
  7660 442F 8D D2 9C			sta MAX.B+1
  7661 4432 20 45 2E			jsr MAX
  7662 4435 A9 3C			lda #$3C
  7663 4437 8D D5 9C			sta MIN.A
  7664 443A A9 00			lda #$00
  7665 443C 8D D6 9C			sta MIN.A+1
  7666 443F AD D3 9C			lda MAX.RESULT
  7667 4442 8D D7 9C			sta MIN.B
  7668 4445 AD D4 9C			lda MAX.RESULT+1
  7669 4448 8D D8 9C			sta MIN.B+1
  7670 444B 20 70 2E			jsr MIN
  7671 444E AD 6D 9D			lda BALL
  7672 4451 8D 36 9D			sta SET_BALL_DIRECTION.BALL
  7673 4454 AD 6E 9D			lda BALL+1
  7674 4457 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
  7675 445A AD D9 9C			lda MIN.RESULT
  7676 445D 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
  7677 4460 AD DA 9C			lda MIN.RESULT+1
  7678 4463 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
  7679 4466 20 60 39			jsr SET_BALL_DIRECTION
  7680
  7681 				; optimize OK (service.pas), line = 1321
  7682
  7683 4469 AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7684 4473 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7685 4475 B1 84			lda (:bp2),y
  7686 4477 8D 2C 9D			sta SET_BALL_SPEED.SPEED
  7687 447A C8				iny
  7688 447B B1 84			lda (:bp2),y
  7689 447D 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
  7690 4480 AD 6D 9D			lda BALL
  7691 4483 8D 28 9D			sta SET_BALL_SPEED.BALL
  7692 4486 AD 6E 9D			lda BALL+1
  7693 4489 8D 29 9D			sta SET_BALL_SPEED.BALL+1
  7694 448C 20 40 37			jsr SET_BALL_SPEED
  7695 448F			l_0F04
  7696 448F			l_0E6F
  7697 448F			l_0E40
  7698
  7699 				; optimize OK (service.pas), line = 1333
  7700
  7701 448F AC 6D 9D 84 84 AC + 	mwy BALL :bp2
  7702 4499 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7703 449B B1 84			lda (:bp2),y
  7704 449D 85 9F			sta :STACKORIGIN+9
  7705 449F C8				iny
  7706 44A0 B1 84			lda (:bp2),y
  7707 44A2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7708 44A4 A0 01			ldy #1
  7709 44A6 A5 9F			lda :STACKORIGIN+9
  7710 44A8 C9 B9			cmp #$B9
  7711 44AA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7712 44AC E9 00			sbc #$00
  7713 44AE 50 02			svc
  7714 44B0 49 80			eor #$80
  7715 44B2 10 01			bpl @+
  7716 44B4 88				dey
  7717 				@
  7718 44B5 84 9F			sty :STACKORIGIN+9
  7719 44B7 A0 02			ldy #BALL.Y-DATAORIGIN
  7720 44B9 B1 84			lda (:bp2),y
  7721 44BB 85 A0			sta :STACKORIGIN+10
  7722 44BD C8				iny
  7723 44BE B1 84			lda (:bp2),y
  7724 44C0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7725 44C2 A0 01			ldy #1
  7726 44C4 A5 A0			lda :STACKORIGIN+10
  7727 44C6 C9 C9			cmp #$C9
  7728 44C8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7729 44CA E9 00			sbc #$00
  7730 44CC 50 02			svc
  7731 44CE 49 80			eor #$80
  7732 44D0 10 01			bpl @+
  7733 44D2 88				dey
  7734 				@
  7735 44D3 98				tya
  7736 44D4 25 9F			and :STACKORIGIN+9
  7737 44D6 85 9F			sta :STACKORIGIN+9
  7738 44D8 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7739 44DA B1 84			lda (:bp2),y
  7740 44DC 85 A0			sta :STACKORIGIN+10
  7741 44DE C8				iny
  7742 44DF B1 84			lda (:bp2),y
  7743 44E1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7744 44E3 A0 01			ldy #1
  7745 44E5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7746 44E7 30 04			bmi @+
  7747 44E9 05 A0			ora :STACKORIGIN+10
  7748 44EB D0 01			sne
  7749 				@
  7750 44ED 88				dey
  7751 				@
  7752 44EE 98				tya
  7753 44EF 25 9F			and :STACKORIGIN+9
  7754 44F1 F0 15			jeq l_0F53
  7755
  7756 				; optimize OK (service.pas), line = 1335
  7757
  7758 44F3 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7759 44F5 A9 00			lda #$00
  7760 44F7 91 84			sta (:bp2),y
  7761
  7762 				; optimize OK (service.pas), line = 1337
  7763
  7764 44F9 AD 6D 9D			lda BALL
  7765 44FC 8D 1D 9D			sta REMOVE_BALL.BALL
  7766 44FF AD 6E 9D			lda BALL+1
  7767 4502 8D 1E 9D			sta REMOVE_BALL.BALL+1
  7768 4505 20 B3 35			jsr REMOVE_BALL
  7769 4508			l_0F53
  7770
  7771 				; ------------------------------------------------------------
  7772
  7773 = 9D6D			BALL	= DATAORIGIN+$05E1
  7774 = 978C			BALL.X	= DATAORIGIN+$0000
  7775 = 978E			BALL.Y	= DATAORIGIN+$0002
  7776 = 9790			BALL.FINEX	= DATAORIGIN+$0004
  7777 = 9792			BALL.FINEY	= DATAORIGIN+$0006
  7778 = 9794			BALL.OLDX	= DATAORIGIN+$0008
  7779 = 9796			BALL.OLDY	= DATAORIGIN+$000A
  7780 = 9798			BALL.SPEED	= DATAORIGIN+$000C
  7781 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
  7782 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
  7783 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
  7784 = 97A0			BALL.SBD	= DATAORIGIN+$0014
  7785 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
  7786 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
  7787 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
  7788 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
  7789 = 97A6			BALL.STM	= DATAORIGIN+$001A
  7790 = 9D71			X	= DATAORIGIN+$05E5
  7791 = 9D73			Y	= DATAORIGIN+$05E7
  7792 = 9D75			ANGLE	= DATAORIGIN+$05E9
  7793
  7794 = 9D6D			@VarData	= BALL
  7795 = 0008			@VarDataSize	= 8
  7796
  7797 4508			@exit
  7798 					.ifdef @new
  7799 					lda <@VarData
  7800 					sta :ztmp
  7801 					lda >@VarData
  7802 					ldy #@VarDataSize-1
  7803 					jmp @FreeMem
  7804 					els
  7805 4508 60				rts						; ret
  7806 					eif
  7807 				.endl
  7808
  7809 4509			.local	MODIFY_VAUS					; PROCEDURE
  7810
  7811 				; optimize OK (service.pas), line = 1344
  7812
  7813 4509 AD 0D 99			lda VAUS.WIDTH
  7814 450C 8D 0B 99			sta VAUS.OLDLEN
  7815 450F A9 00			lda #$00
  7816 4511 8D 0C 99			sta VAUS.OLDLEN+1
  7817
  7818 				; optimize OK (service.pas), line = 1345
  7819
  7820 4514 AD 95 98			lda PLAYVAUS.WIDTH
  7821 4517 8D 0D 99			sta VAUS.WIDTH
  7822
  7823 				; optimize OK (service.pas), line = 1346
  7824
  7825 451A AD 97 98			lda PLAYVAUS.HEIGHT
  7826 451D 8D 0E 99			sta VAUS.HEIGHT
  7827
  7828 4520			@exit
  7829 					.ifdef @new
  7830 					lda <@VarData
  7831 					sta :ztmp
  7832 					lda >@VarData
  7833 					ldy #@VarDataSize-1
  7834 					jmp @FreeMem
  7835 					els
  7836 4520 60				rts						; ret
  7837 					eif
  7838 				.endl
  7839
  7840 4521			.local	SET_VAUS					; PROCEDURE
  7841
  7842 				; optimize OK (service.pas), line = 1351
  7843
  7844 4521 A9 5F			lda #$5F
  7845 4523 8D 05 99			sta VAUS.X
  7846
  7847 				; optimize OK (service.pas), line = 1352
  7848
  7849 4526 A9 B8			lda #$B8
  7850 4528 8D 06 99			sta VAUS.Y
  7851
  7852 				; optimize OK (service.pas), line = 1354
  7853
  7854 452B A9 FF			lda #$FF
  7855 452D 8D 07 99			sta VAUS.OLDX
  7856 4530 8D 08 99			sta VAUS.OLDX+1
  7857
  7858 				; optimize OK (service.pas), line = 1355
  7859
  7860 4533 8D 09 99			sta VAUS.OLDY
  7861 4536 8D 0A 99			sta VAUS.OLDY+1
  7862
  7863 				; optimize OK (service.pas), line = 1356
  7864
  7865 4539 A9 00			lda #$00
  7866 453B 8D 10 99			sta VAUS.IFLASH
  7867
  7868 				; optimize OK (service.pas), line = 1360
  7869
  7870 453E 8D 0F 99			sta VAUS.FLASH
  7871
  7872 				; optimize OK (service.pas), line = 1364
  7873
  7874 4541 AD 95 98			lda PLAYVAUS.WIDTH
  7875 4544 8D 0D 99			sta VAUS.WIDTH
  7876
  7877 				; optimize OK (service.pas), line = 1365
  7878
  7879 4547 AD 97 98			lda PLAYVAUS.HEIGHT
  7880 454A 8D 0E 99			sta VAUS.HEIGHT
  7881
  7882 				; optimize OK (service.pas), line = 1366
  7883
  7884 454D AD 0D 99			lda VAUS.WIDTH
  7885 4550 8D 0B 99			sta VAUS.OLDLEN
  7886 4553 A9 00			lda #$00
  7887 4555 8D 0C 99			sta VAUS.OLDLEN+1
  7888
  7889 				; optimize OK (service.pas), line = 1367
  7890
  7891 4558 A9 FF			lda #$FF
  7892 455A 8D 11 99			sta VAUS.LETTER
  7893
  7894 455D			@exit
  7895 					.ifdef @new
  7896 					lda <@VarData
  7897 					sta :ztmp
  7898 					lda >@VarData
  7899 					ldy #@VarDataSize-1
  7900 					jmp @FreeMem
  7901 					els
  7902 455D 60				rts						; ret
  7903 					eif
  7904 				.endl
  7905
  7906 455E			.local	START_VAUS					; PROCEDURE
  7907
  7908 				; optimize OK (service.pas), line = 1376
  7909
  7910 455E A9 5F			lda #$5F
  7911 4560 8D 05 99			sta VAUS.X
  7912
  7913 				; optimize OK (service.pas), line = 1377
  7914
  7915 4563 A9 B8			lda #$B8
  7916 4565 8D 06 99			sta VAUS.Y
  7917
  7918 4568			@exit
  7919 					.ifdef @new
  7920 					lda <@VarData
  7921 					sta :ztmp
  7922 					lda >@VarData
  7923 					ldy #@VarDataSize-1
  7924 					jmp @FreeMem
  7925 					els
  7926 4568 60				rts						; ret
  7927 					eif
  7928 				.endl
  7929
  7930 4569			.local	REMOVE_VAUS					; PROCEDURE
  7931
  7932 				; optimize OK (service.pas), line = 1391
  7933
  7934 4569 AC 09 99			ldy VAUS.OLDY
  7935 456C AD 07 99			lda VAUS.OLDX
  7936 456F 18 79 00 C0			add adr.ROW,y
  7937 4573 8D 84 99			sta HLP
  7938 4576 AD 08 99			lda VAUS.OLDX+1
  7939 4579 79 00 C1			adc adr.ROW+256,y
  7940 457C 8D 85 99			sta HLP+1
  7941
  7942 				; optimize OK (service.pas), line = 1393
  7943
  7944 457F AD 0E 99			lda VAUS.HEIGHT
  7945 4582 8D 77 9D			sta Y
  7946 4585 4C 8B 45			jmp l_0FC8f
  7947 4588			l_0FC8
  7948 				; --- ForToDoCondition
  7949 4588 CE 77 9D			dec Y
  7950 458B			l_0FC8f
  7951 458B AD 84 99			lda HLP
  7952 458E 8D B2 9C			sta BLITROW.DST
  7953 4591 A9 50			lda #$50
  7954 4593 18 6D 85 99			add HLP+1
  7955 4597 8D B3 9C			sta BLITROW.DST+1
  7956 459A A9 00			lda #$00
  7957 459C 69 00			adc #$00
  7958 459E 8D B4 9C			sta BLITROW.DST+2
  7959 45A1 A9 00			lda #$00
  7960 45A3 69 00			adc #$00
  7961 45A5 8D B5 9C			sta BLITROW.DST+3
  7962 45A8 AD 91 98			lda PLAYSCREEN.OFS
  7963 45AB 18 6D 84 99			add HLP
  7964 45AF 8D AE 9C			sta BLITROW.SRC
  7965 45B2 AD 92 98			lda PLAYSCREEN.OFS+1
  7966 45B5 6D 85 99			adc HLP+1
  7967 45B8 8D AF 9C			sta BLITROW.SRC+1
  7968 45BB AD 93 98			lda PLAYSCREEN.OFS+2
  7969 45BE 69 00			adc #$00
  7970 45C0 8D B0 9C			sta BLITROW.SRC+2
  7971 45C3 AD 94 98			lda PLAYSCREEN.OFS+3
  7972 45C6 69 00			adc #$00
  7973 45C8 8D B1 9C			sta BLITROW.SRC+3
  7974 45CB AD 0B 99			lda VAUS.OLDLEN
  7975 45CE 8D B6 9C			sta BLITROW.SIZE
  7976 45D1 AD 0C 99			lda VAUS.OLDLEN+1
  7977 45D4 8D B7 9C			sta BLITROW.SIZE+1
  7978 45D7 20 2C 2D			jsr BLITROW
  7979
  7980 				; optimize OK (service.pas), line = 1396
  7981
  7982 45DA AD 84 99			lda HLP
  7983 45DD 18 69 40			add #$40
  7984 45E0 8D 84 99			sta HLP
  7985 45E3 AD 85 99			lda HLP+1
  7986 45E6 69 01			adc #$01
  7987 45E8 8D 85 99			sta HLP+1
  7988
  7989 				; --- ForToDoEpilog
  7990 45EB AD 77 9D			lda Y
  7991 45EE D0 98			jne l_0FC8
  7992 45F0			l_0FD6
  7993
  7994 				; optimize OK (service.pas), line = 1399
  7995
  7996 45F0 AD 0D 99			lda VAUS.WIDTH
  7997 45F3 8D 0B 99			sta VAUS.OLDLEN
  7998 45F6 A9 00			lda #$00
  7999 45F8 8D 0C 99			sta VAUS.OLDLEN+1
  8000
  8001 				; ------------------------------------------------------------
  8002
  8003 = 9D77			Y	= DATAORIGIN+$05EB
  8004
  8005 = 9D77			@VarData	= Y
  8006 = 0001			@VarDataSize	= 1
  8007
  8008 45FB			@exit
  8009 					.ifdef @new
  8010 					lda <@VarData
  8011 					sta :ztmp
  8012 					lda >@VarData
  8013 					ldy #@VarDataSize-1
  8014 					jmp @FreeMem
  8015 					els
  8016 45FB 60				rts						; ret
  8017 					eif
  8018 				.endl
  8019
  8020 45FC			.local	PLACE_VAUS					; PROCEDURE
  8021
  8022 				; optimize FAIL (0, service.pas), line = 1408
  8023
  8024 45FC EE 10 99			inc VAUS.IFLASH
  8025
  8026 				; optimize OK (service.pas), line = 1410
  8027
  8028 45FF AD 10 99			lda VAUS.IFLASH
  8029 4602 C9 0B			cmp #$0B
  8030 4604 90 08			jcc l_100B
  8031
  8032 				; optimize FAIL (0, service.pas), line = 1412
  8033
  8034 4606 EE 0F 99			inc VAUS.FLASH
  8035
  8036 				; optimize OK (service.pas), line = 1413
  8037
  8038 4609 A9 00			lda #$00
  8039 460B 8D 10 99			sta VAUS.IFLASH
  8040 460E			l_100B
  8041
  8042 				; optimize OK (service.pas), line = 1416
  8043
  8044 460E AD 0F 99			lda VAUS.FLASH
  8045 4611 C9 0B			cmp #$0B
  8046 4613 90 05			jcc l_1028
  8047 4615 A9 00			lda #$00
  8048 4617 8D 0F 99			sta VAUS.FLASH
  8049 461A			l_1028
  8050
  8051 				; optimize OK (service.pas), line = 1426
  8052
  8053 461A A9 00			lda #$00
  8054 461C 8D 84 99			sta HLP
  8055 461F 8D 85 99			sta HLP+1
  8056
  8057 				; optimize OK (service.pas), line = 1428
  8058
  8059 4622 8D 78 9D			sta Y
  8060 4625 AC 0E 99			ldy VAUS.HEIGHT
  8061 4628 88				dey
  8062 4629 8C 2D 46			sty @FORTMP_103F_0
  8063
  8064 462C			l_1042
  8065 				; --- ForToDoCondition
  8066 462C A9 00			lda @FORTMP_103F_0::#$00
  8067 462E CD 78 9D			cmp Y
  8068 4631 B0 03 4C 6A 47		jcc l_1050
  8069
  8070 				; optimize OK (service.pas), line = 1434
  8071
  8072 4636 AD 78 9D			lda Y
  8073 4639 18 6D 06 99			add VAUS.Y
  8074 463D A8				tay
  8075 463E AD 05 99			lda VAUS.X
  8076 4641 18 79 00 C0			add adr.ROW,y
  8077 4645 8D A0 9C			sta BLITZERO.DST
  8078 4648 A9 50			lda #$50
  8079 464A 79 00 C1			adc adr.ROW+256,y
  8080 464D 8D A1 9C			sta BLITZERO.DST+1
  8081 4650 A9 00			lda #$00
  8082 4652 69 00			adc #$00
  8083 4654 8D A2 9C			sta BLITZERO.DST+2
  8084 4657 A9 00			lda #$00
  8085 4659 69 00			adc #$00
  8086 465B 8D A3 9C			sta BLITZERO.DST+3
  8087 465E AD 99 98			lda PLAYVAUS.OFS
  8088 4661 18 6D 84 99			add HLP
  8089 4665 8D 9C 9C			sta BLITZERO.SRC
  8090 4668 AD 9A 98			lda PLAYVAUS.OFS+1
  8091 466B 6D 85 99			adc HLP+1
  8092 466E 8D 9D 9C			sta BLITZERO.SRC+1
  8093 4671 AD 9B 98			lda PLAYVAUS.OFS+2
  8094 4674 69 00			adc #$00
  8095 4676 8D 9E 9C			sta BLITZERO.SRC+2
  8096 4679 AD 9C 98			lda PLAYVAUS.OFS+3
  8097 467C 69 00			adc #$00
  8098 467E 8D 9F 9C			sta BLITZERO.SRC+3
  8099 4681 AD 0D 99			lda VAUS.WIDTH
  8100 4684 8D A4 9C			sta BLITZERO.SIZE
  8101 4687 A9 00			lda #$00
  8102 4689 8D A5 9C			sta BLITZERO.SIZE+1
  8103 468C 20 79 2C			jsr BLITZERO
  8104
  8105 				; optimize OK (service.pas), line = 1436
  8106
  8107 468F AD 78 9D			lda Y
  8108 4692 C9 02			cmp #$02
  8109 4694 B0 03 4C 53 47		jcc l_1093
  8110 4699 AD 0E 99			lda VAUS.HEIGHT
  8111 469C E9 02			sbc #$02
  8112 469E 85 A1			sta :STACKORIGIN+11
  8113 46A0 A9 00			lda #$00
  8114 46A2 E9 00			sbc #$00
  8115 46A4 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  8116 46A6 AD 78 9D			lda Y
  8117 46A9 C5 A1			cmp :STACKORIGIN+11
  8118 46AB A9 00			lda #$00
  8119 46AD E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  8120 46AF 50 02			svc
  8121 46B1 49 80			eor #$80
  8122 46B3 30 03 4C 53 47		jpl l_1093
  8123
  8124 				; optimize OK (service.pas), line = 1439
  8125
  8126 46B8 AC 0F 99			ldy VAUS.FLASH
  8127 46BB B9 8E 10			lda adr.FLASH,y
  8128 46BE 8D C7 9C			sta PUTBYTE.V
  8129 46C1 AD 78 9D			lda Y
  8130 46C4 18 6D 06 99			add VAUS.Y
  8131 46C8 A8				tay
  8132 46C9 AD 05 99			lda VAUS.X
  8133 46CC 18 79 00 C0			add adr.ROW,y
  8134 46D0 8D C3 9C			sta PUTBYTE.DST
  8135 46D3 A9 50			lda #$50
  8136 46D5 79 00 C1			adc adr.ROW+256,y
  8137 46D8 8D C4 9C			sta PUTBYTE.DST+1
  8138 46DB A9 00			lda #$00
  8139 46DD 69 00			adc #$00
  8140 46DF 8D C5 9C			sta PUTBYTE.DST+2
  8141 46E2 A9 00			lda #$00
  8142 46E4 69 00			adc #$00
  8143 46E6 8D C6 9C			sta PUTBYTE.DST+3
  8144 46E9 20 F3 2D			jsr PUTBYTE
  8145
  8146 				; optimize OK (service.pas), line = 1442
  8147
  8148 46EC AC 0F 99			ldy VAUS.FLASH
  8149 46EF B9 8E 10			lda adr.FLASH,y
  8150 46F2 8D C7 9C			sta PUTBYTE.V
  8151 46F5 AD 05 99			lda VAUS.X
  8152 46F8 18 6D 0D 99			add VAUS.WIDTH
  8153 46FC 85 A0			sta :STACKORIGIN+10
  8154 46FE A9 50			lda #$50
  8155 4700 69 00			adc #$00
  8156 4702 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8157 4704 A9 00			lda #$00
  8158 4706 69 00			adc #$00
  8159 4708 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8160 470A A9 00			lda #$00
  8161 470C 69 00			adc #$00
  8162 470E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8163 4710 A5 A0			lda :STACKORIGIN+10
  8164 4712 38 E9 01			sub #$01
  8165 4715 85 A0			sta :STACKORIGIN+10
  8166 4717 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8167 4719 E9 00			sbc #$00
  8168 471B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8169 471D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8170 471F E9 00			sbc #$00
  8171 4721 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8172 4723 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8173 4725 E9 00			sbc #$00
  8174 4727 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8175 4729 AD 78 9D			lda Y
  8176 472C 18 6D 06 99			add VAUS.Y
  8177 4730 A8				tay
  8178 4731 A5 A0			lda :STACKORIGIN+10
  8179 4733 18 79 00 C0			add adr.ROW,y
  8180 4737 8D C3 9C			sta PUTBYTE.DST
  8181 473A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8182 473C 79 00 C1			adc adr.ROW+256,y
  8183 473F 8D C4 9C			sta PUTBYTE.DST+1
  8184 4742 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8185 4744 69 00			adc #$00
  8186 4746 8D C5 9C			sta PUTBYTE.DST+2
  8187 4749 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8188 474B 69 00			adc #$00
  8189 474D 8D C6 9C			sta PUTBYTE.DST+3
  8190 4750 20 F3 2D			jsr PUTBYTE
  8191 4753			l_1093
  8192
  8193 				; optimize OK (service.pas), line = 1445
  8194
  8195 4753 AD 84 99			lda HLP
  8196 4756 18 6D 0D 99			add VAUS.WIDTH
  8197 475A 8D 84 99			sta HLP
  8198 475D 90 03			scc
  8199 475F EE 85 99			inc HLP+1
  8200
  8201 				; --- ForToDoEpilog
  8202 4762 EE 78 9D			inc Y
  8203 4765 F0 03 4C 2C 46		jne l_1042
  8204 476A			l_1050
  8205
  8206 				; ------------------------------------------------------------
  8207
  8208 = 9D78			Y	= DATAORIGIN+$05EC
  8209
  8210 = 9D78			@VarData	= Y
  8211 = 0001			@VarDataSize	= 1
  8212
  8213 476A			@exit
  8214 					.ifdef @new
  8215 					lda <@VarData
  8216 					sta :ztmp
  8217 					lda >@VarData
  8218 					ldy #@VarDataSize-1
  8219 					jmp @FreeMem
  8220 					els
  8221 476A 60				rts						; ret
  8222 					eif
  8223 				.endl
  8224
  8225 476B			.local	MOVE_VAUS					; PROCEDURE
  8226
  8227 				; optimize OK (service.pas), line = 1455
  8228
  8229 476B A0 01			ldy #1
  8230 476D AD 08 99			lda VAUS.OLDX+1
  8231 4770 C9 FF			cmp #$FF
  8232 4772 D0 05			bne @+
  8233 4774 AD 07 99			lda VAUS.OLDX
  8234 4777 C9 FF			cmp #$FF
  8235 				@
  8236 4779 D0 01			bne @+
  8237 477B 88				dey
  8238 				@
  8239 477C 84 9F			sty :STACKORIGIN+9
  8240 477E A0 01			ldy #1
  8241 4780 AD 08 99			lda VAUS.OLDX+1
  8242 4783 C9 00			cmp #$00
  8243 4785 D0 06			bne @+
  8244 4787 AD 07 99			lda VAUS.OLDX
  8245 478A CD 05 99			cmp VAUS.X
  8246 				@
  8247 478D D0 01			bne @+
  8248 478F 88				dey
  8249 				@
  8250 4790 98				tya
  8251 4791 25 9F			and :STACKORIGIN+9
  8252 4793 85 9F			sta :STACKORIGIN+9
  8253 4795 A0 01			ldy #1
  8254 4797 A9 00			lda #$00
  8255 4799 CD 0C 99			cmp VAUS.OLDLEN+1
  8256 479C D0 06			bne @+
  8257 479E AD 0D 99			lda VAUS.WIDTH
  8258 47A1 CD 0B 99			cmp VAUS.OLDLEN
  8259 				@
  8260 47A4 D0 01			bne @+
  8261 47A6 88				dey
  8262 				@
  8263 47A7 98				tya
  8264 47A8 05 9F			ora :STACKORIGIN+9
  8265 47AA F0 03			jeq l_110F
  8266
  8267 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1456
  8268
  8269 47AC 20 69 45			jsr REMOVE_VAUS
  8270 47AF			l_110F
  8271
  8272 				; optimize OK (service.pas), line = 1458
  8273
  8274 47AF AD 05 99			lda VAUS.X
  8275 47B2 8D 07 99			sta VAUS.OLDX
  8276 47B5 A9 00			lda #$00
  8277 47B7 8D 08 99			sta VAUS.OLDX+1
  8278
  8279 				; optimize OK (service.pas), line = 1459
  8280
  8281 47BA AD 06 99			lda VAUS.Y
  8282 47BD 8D 09 99			sta VAUS.OLDY
  8283 47C0 A9 00			lda #$00
  8284 47C2 8D 0A 99			sta VAUS.OLDY+1
  8285
  8286 				; optimize OK (service.pas), line = 1466
  8287
  8288 47C5 A9 D8			lda #$D8
  8289 47C7 38 ED 0D 99			sub VAUS.WIDTH
  8290 47CB 8D D7 9C			sta MIN.B
  8291 47CE A9 00			lda #$00
  8292 47D0 E9 00			sbc #$00
  8293 47D2 8D D8 9C			sta MIN.B+1
  8294 47D5 AD 7A 9D			lda X
  8295 47D8 8D D5 9C			sta MIN.A
  8296 47DB AD 7B 9D			lda X+1
  8297 47DE 8D D6 9C			sta MIN.A+1
  8298 47E1 20 70 2E			jsr MIN
  8299 47E4 A9 0A			lda #$0A
  8300 47E6 8D CF 9C			sta MAX.A
  8301 47E9 A9 00			lda #$00
  8302 47EB 8D D0 9C			sta MAX.A+1
  8303 47EE AD D9 9C			lda MIN.RESULT
  8304 47F1 8D D1 9C			sta MAX.B
  8305 47F4 AD DA 9C			lda MIN.RESULT+1
  8306 47F7 8D D2 9C			sta MAX.B+1
  8307 47FA 20 45 2E			jsr MAX
  8308 47FD AD D3 9C			lda MAX.RESULT
  8309 4800 8D 05 99			sta VAUS.X
  8310
  8311 				; optimize OK (service.pas), line = 1467
  8312
  8313 4803 A9 C8			lda #$C8
  8314 4805 38 ED 0E 99			sub VAUS.HEIGHT
  8315 4809 8D D7 9C			sta MIN.B
  8316 480C A9 00			lda #$00
  8317 480E E9 00			sbc #$00
  8318 4810 8D D8 9C			sta MIN.B+1
  8319 4813 AD 7C 9D			lda Y
  8320 4816 8D D5 9C			sta MIN.A
  8321 4819 AD 7D 9D			lda Y+1
  8322 481C 8D D6 9C			sta MIN.A+1
  8323 481F 20 70 2E			jsr MIN
  8324 4822 A9 0C			lda #$0C
  8325 4824 8D CF 9C			sta MAX.A
  8326 4827 A9 00			lda #$00
  8327 4829 8D D0 9C			sta MAX.A+1
  8328 482C AD D9 9C			lda MIN.RESULT
  8329 482F 8D D1 9C			sta MAX.B
  8330 4832 AD DA 9C			lda MIN.RESULT+1
  8331 4835 8D D2 9C			sta MAX.B+1
  8332 4838 20 45 2E			jsr MAX
  8333 483B AD D3 9C			lda MAX.RESULT
  8334 483E 8D 06 99			sta VAUS.Y
  8335
  8336 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1469
  8337
  8338 4841 20 FC 45			jsr PLACE_VAUS
  8339
  8340 				; ------------------------------------------------------------
  8341
  8342 = 9D7A			X	= DATAORIGIN+$05EE
  8343 = 9D7C			Y	= DATAORIGIN+$05F0
  8344
  8345 = 9D7A			@VarData	= X
  8346 = 0004			@VarDataSize	= 4
  8347
  8348 4844			@exit
  8349 					.ifdef @new
  8350 					lda <@VarData
  8351 					sta :ztmp
  8352 					lda >@VarData
  8353 					ldy #@VarDataSize-1
  8354 					jmp @FreeMem
  8355 					els
  8356 4844 60				rts						; ret
  8357 					eif
  8358 				.endl
  8359
  8360 4845			.local	REMOVE_BLOCK					; PROCEDURE
  8361
  8362 				; optimize OK (service.pas), line = 1483
  8363
  8364 4845 AD 7E 9D			lda XA
  8365 4848 85 9F			sta :STACKORIGIN+9
  8366 484A A9 00			lda #$00
  8367 484C 06 9F			asl :STACKORIGIN+9
  8368 484E 2A				rol @
  8369 484F 06 9F			asl :STACKORIGIN+9
  8370 4851 2A				rol @
  8371 4852 06 9F			asl :STACKORIGIN+9
  8372 4854 2A				rol @
  8373 4855 06 9F			asl :STACKORIGIN+9
  8374 4857 2A				rol @
  8375 4858 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8376 485A A5 9F			lda :STACKORIGIN+9
  8377 485C 18 69 09			add #$09
  8378 485F 8D 82 9D			sta XS
  8379 4862 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8380 4864 69 00			adc #$00
  8381 4866 8D 83 9D			sta XS+1
  8382
  8383 				; optimize OK (service.pas), line = 1484
  8384
  8385 4869 AD 7F 9D			lda YA
  8386 486C 85 9F			sta :STACKORIGIN+9
  8387 486E A9 00			lda #$00
  8388 4870 06 9F			asl :STACKORIGIN+9
  8389 4872 2A				rol @
  8390 4873 06 9F			asl :STACKORIGIN+9
  8391 4875 2A				rol @
  8392 4876 06 9F			asl :STACKORIGIN+9
  8393 4878 2A				rol @
  8394 4879 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8395 487B A5 9F			lda :STACKORIGIN+9
  8396 487D 18 69 16			add #$16
  8397 4880 8D 84 9D			sta YS
  8398 4883 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8399 4885 69 00			adc #$00
  8400 4887 8D 85 9D			sta YS+1
  8401
  8402 				; optimize OK (service.pas), line = 1486
  8403
  8404 488A A9 00			lda #$00
  8405 488C 8D 81 9D			sta Y
  8406
  8407 488F			l_1167
  8408 				; --- ForToDoCondition
  8409 488F AD 81 9D			lda Y
  8410 4892 C9 08			cmp #$08
  8411 4894 90 03 4C 7D 4A		jcs l_1175
  8412
  8413 				; optimize OK (service.pas), line = 1488
  8414
  8415 4899 AD 84 9D			lda YS
  8416 489C 6D 81 9D			adc Y
  8417 489F A8				tay
  8418 48A0 B9 00 C3			lda adr.MODY,y
  8419 48A3 85 86			sta :eax
  8420 48A5 A9 00			lda #$00
  8421 48A7 85 87			sta :eax+1
  8422 48A9 AD 12 99			lda PATTERN.WIDTH
  8423 48AC 85 8E			sta :ecx
  8424 48AE AD 13 99			lda PATTERN.WIDTH+1
  8425 48B1 85 8F			sta :ecx+1
  8426 					.ifdef fmulinit
  8427 					fmulu_16
  8428 					els
  8429 48B3 20 9C 13			imulCX_AL
  8430 					eif
  8431 48B6 A5 86			lda :eax
  8432 48B8 8D 86 9D			sta YH
  8433 48BB A5 87			lda :eax+1
  8434 48BD 8D 87 9D			sta YH+1
  8435
  8436 				; optimize OK (service.pas), line = 1496
  8437
  8438 48C0 A9 00			lda #$00
  8439 48C2 8D 80 9D			sta X
  8440
  8441 48C5			l_1191
  8442 				; --- ForToDoCondition
  8443 48C5 AD 80 9D			lda X
  8444 48C8 C9 10			cmp #$10
  8445 48CA 90 03 4C 75 4A		jcs l_119F
  8446
  8447 				; optimize OK (service.pas), line = 1497
  8448
  8449 48CF 6D 82 9D			adc XS
  8450 48D2 85 9F			sta :STACKORIGIN+9
  8451 48D4 A9 00			lda #$00
  8452 48D6 6D 83 9D			adc XS+1
  8453 48D9 C9 00			cmp #$00
  8454 48DB D0 04			bne @+
  8455 48DD A5 9F			lda :STACKORIGIN+9
  8456 48DF C9 D8			cmp #$D8
  8457 				@
  8458 48E1 90 03 4C 6D 4A		jcs l_11B6
  8459
  8460 				; optimize OK (service.pas), line = 1503
  8461
  8462 48E6 AD 91 98			lda PLAYSCREEN.OFS
  8463 48E9 6D 80 9D			adc X
  8464 48EC 85 9F			sta :STACKORIGIN+9
  8465 48EE AD 92 98			lda PLAYSCREEN.OFS+1
  8466 48F1 69 00			adc #$00
  8467 48F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8468 48F5 AD 93 98			lda PLAYSCREEN.OFS+2
  8469 48F8 69 00			adc #$00
  8470 48FA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8471 48FC AD 94 98			lda PLAYSCREEN.OFS+3
  8472 48FF 69 00			adc #$00
  8473 4901 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8474 4903 A5 9F			lda :STACKORIGIN+9
  8475 4905 18 6D 82 9D			add XS
  8476 4909 85 9F			sta :STACKORIGIN+9
  8477 490B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8478 490D 6D 83 9D			adc XS+1
  8479 4910 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8480 4912 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8481 4914 69 00			adc #$00
  8482 4916 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8483 4918 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8484 491A 69 00			adc #$00
  8485 491C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8486 491E AD 81 9D			lda Y
  8487 4921 18 6D 84 9D			add YS
  8488 4925 A8				tay
  8489 4926 A5 9F			lda :STACKORIGIN+9
  8490 4928 18 79 00 C0			add adr.ROW,y
  8491 492C 8D C8 9C			sta GETBYTE.SRC
  8492 492F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8493 4931 79 00 C1			adc adr.ROW+256,y
  8494 4934 8D C9 9C			sta GETBYTE.SRC+1
  8495 4937 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8496 4939 69 00			adc #$00
  8497 493B 8D CA 9C			sta GETBYTE.SRC+2
  8498 493E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8499 4940 69 00			adc #$00
  8500 4942 8D CB 9C			sta GETBYTE.SRC+3
  8501 4945 20 1B 2E			jsr GETBYTE
  8502 4948 AD CC 9C			lda GETBYTE.RESULT
  8503 494B 29 80			and #$80
  8504 494D 8D 89 9D			sta SHADOW
  8505
  8506 				; optimize OK (service.pas), line = 1507
  8507
  8508 4950 AD 80 9D			lda X
  8509 4953 18 6D 82 9D			add XS
  8510 4957 85 A0			sta :STACKORIGIN+10
  8511 4959 A9 00			lda #$00
  8512 495B 6D 83 9D			adc XS+1
  8513 495E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8514 4960 A9 00			lda #$00
  8515 4962 18 65 A0			add :STACKORIGIN+10
  8516 4965 A8				tay
  8517 4966 A9 C4			lda #$C4
  8518 4968 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  8519 496A 85 83			sta :bp+1
  8520 496C AD 16 99			lda PATTERN.OFS
  8521 496F 18 71 82			add (:bp),y
  8522 4972 85 9F			sta :STACKORIGIN+9
  8523 4974 AD 17 99			lda PATTERN.OFS+1
  8524 4977 69 00			adc #$00
  8525 4979 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8526 497B AD 18 99			lda PATTERN.OFS+2
  8527 497E 69 00			adc #$00
  8528 4980 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8529 4982 AD 19 99			lda PATTERN.OFS+3
  8530 4985 69 00			adc #$00
  8531 4987 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8532 4989 A5 9F			lda :STACKORIGIN+9
  8533 498B 18 6D 86 9D			add YH
  8534 498F 8D C8 9C			sta GETBYTE.SRC
  8535 4992 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8536 4994 6D 87 9D			adc YH+1
  8537 4997 8D C9 9C			sta GETBYTE.SRC+1
  8538 499A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8539 499C 69 00			adc #$00
  8540 499E 8D CA 9C			sta GETBYTE.SRC+2
  8541 49A1 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8542 49A3 69 00			adc #$00
  8543 49A5 8D CB 9C			sta GETBYTE.SRC+3
  8544 49A8 20 1B 2E			jsr GETBYTE
  8545 49AB E8				inx
  8546 49AC AD CC 9C			lda GETBYTE.RESULT
  8547 49AF 29 7F			and #$7F
  8548 49B1 0D 89 9D			ora SHADOW
  8549 49B4 8D 88 9D			sta CL
  8550 49B7 CA				dex
  8551
  8552 				; optimize OK (service.pas), line = 1511
  8553
  8554 49B8 AD 80 9D			lda X
  8555 49BB 18 6D 82 9D			add XS
  8556 49BF 85 A0			sta :STACKORIGIN+10
  8557 49C1 A9 50			lda #$50
  8558 49C3 6D 83 9D			adc XS+1
  8559 49C6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8560 49C8 A9 00			lda #$00
  8561 49CA 69 00			adc #$00
  8562 49CC 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8563 49CE A9 00			lda #$00
  8564 49D0 69 00			adc #$00
  8565 49D2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8566 49D4 AD 81 9D			lda Y
  8567 49D7 18 6D 84 9D			add YS
  8568 49DB A8				tay
  8569 49DC A5 A0			lda :STACKORIGIN+10
  8570 49DE 18 79 00 C0			add adr.ROW,y
  8571 49E2 8D C3 9C			sta PUTBYTE.DST
  8572 49E5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8573 49E7 79 00 C1			adc adr.ROW+256,y
  8574 49EA 8D C4 9C			sta PUTBYTE.DST+1
  8575 49ED A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8576 49EF 69 00			adc #$00
  8577 49F1 8D C5 9C			sta PUTBYTE.DST+2
  8578 49F4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8579 49F6 69 00			adc #$00
  8580 49F8 8D C6 9C			sta PUTBYTE.DST+3
  8581 49FB AD 88 9D			lda CL
  8582 49FE 8D C7 9C			sta PUTBYTE.V
  8583 4A01 20 F3 2D			jsr PUTBYTE
  8584
  8585 				; optimize OK (service.pas), line = 1516
  8586
  8587 4A04 AD 91 98			lda PLAYSCREEN.OFS
  8588 4A07 18 6D 80 9D			add X
  8589 4A0B 85 A0			sta :STACKORIGIN+10
  8590 4A0D AD 92 98			lda PLAYSCREEN.OFS+1
  8591 4A10 69 00			adc #$00
  8592 4A12 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8593 4A14 AD 93 98			lda PLAYSCREEN.OFS+2
  8594 4A17 69 00			adc #$00
  8595 4A19 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8596 4A1B AD 94 98			lda PLAYSCREEN.OFS+3
  8597 4A1E 69 00			adc #$00
  8598 4A20 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8599 4A22 A5 A0			lda :STACKORIGIN+10
  8600 4A24 18 6D 82 9D			add XS
  8601 4A28 85 A0			sta :STACKORIGIN+10
  8602 4A2A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8603 4A2C 6D 83 9D			adc XS+1
  8604 4A2F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8605 4A31 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8606 4A33 69 00			adc #$00
  8607 4A35 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8608 4A37 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8609 4A39 69 00			adc #$00
  8610 4A3B 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8611 4A3D AD 81 9D			lda Y
  8612 4A40 18 6D 84 9D			add YS
  8613 4A44 A8				tay
  8614 4A45 A5 A0			lda :STACKORIGIN+10
  8615 4A47 18 79 00 C0			add adr.ROW,y
  8616 4A4B 8D C3 9C			sta PUTBYTE.DST
  8617 4A4E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8618 4A50 79 00 C1			adc adr.ROW+256,y
  8619 4A53 8D C4 9C			sta PUTBYTE.DST+1
  8620 4A56 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8621 4A58 69 00			adc #$00
  8622 4A5A 8D C5 9C			sta PUTBYTE.DST+2
  8623 4A5D A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8624 4A5F 69 00			adc #$00
  8625 4A61 8D C6 9C			sta PUTBYTE.DST+3
  8626 4A64 AD 88 9D			lda CL
  8627 4A67 8D C7 9C			sta PUTBYTE.V
  8628 4A6A 20 F3 2D			jsr PUTBYTE
  8629 4A6D			l_11B6
  8630
  8631 				; --- ForToDoEpilog
  8632 4A6D EE 80 9D			inc X
  8633 4A70 F0 03 4C C5 48		jne l_1191
  8634 4A75			l_119F
  8635
  8636 				; --- ForToDoEpilog
  8637 4A75 EE 81 9D			inc Y
  8638 4A78 F0 03 4C 8F 48		jne l_1167
  8639 4A7D			l_1175
  8640
  8641 				; optimize OK (service.pas), line = 1526
  8642
  8643 4A7D AD 84 9D			lda YS
  8644 4A80 18 69 04			add #$04
  8645 4A83 8D 81 9D			sta Y
  8646 4A86 AD 84 9D			lda YS
  8647 4A89 18 69 0C			add #$0C
  8648 4A8C 8D 90 4A			sta @FORTMP_1250_0
  8649
  8650 4A8F			l_1253
  8651 				; --- ForToDoCondition
  8652 4A8F A9 00			lda @FORTMP_1250_0::#$00
  8653 4A91 CD 81 9D			cmp Y
  8654 4A94 B0 03 4C 8E 4B		jcc l_1261
  8655
  8656 				; optimize OK (service.pas), line = 1527
  8657
  8658 4A99 AD 82 9D			lda XS
  8659 4A9C 18 69 08			add #$08
  8660 4A9F 8D 80 9D			sta X
  8661 4AA2 AD 82 9D			lda XS
  8662 4AA5 18 69 18			add #$18
  8663 4AA8 8D AC 4A			sta @FORTMP_1271_0
  8664
  8665 4AAB			l_1274
  8666 				; --- ForToDoCondition
  8667 4AAB A9 00			lda @FORTMP_1271_0::#$00
  8668 4AAD CD 80 9D			cmp X
  8669 4AB0 B0 03 4C 86 4B		jcc l_1282
  8670
  8671 				; optimize OK (service.pas), line = 1543
  8672
  8673 4AB5 AD 80 9D			lda X
  8674 4AB8 C9 D8			cmp #$D8
  8675 4ABA 90 03 4C 7E 4B		jcs l_1294
  8676
  8677 				; optimize OK (service.pas), line = 1547
  8678
  8679 4ABF AD 91 98			lda PLAYSCREEN.OFS
  8680 4AC2 6D 80 9D			adc X
  8681 4AC5 85 9F			sta :STACKORIGIN+9
  8682 4AC7 AD 92 98			lda PLAYSCREEN.OFS+1
  8683 4ACA 69 00			adc #$00
  8684 4ACC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8685 4ACE AD 93 98			lda PLAYSCREEN.OFS+2
  8686 4AD1 69 00			adc #$00
  8687 4AD3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8688 4AD5 AD 94 98			lda PLAYSCREEN.OFS+3
  8689 4AD8 69 00			adc #$00
  8690 4ADA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8691 4ADC AC 81 9D			ldy Y
  8692 4ADF A5 9F			lda :STACKORIGIN+9
  8693 4AE1 18 79 00 C0			add adr.ROW,y
  8694 4AE5 8D C8 9C			sta GETBYTE.SRC
  8695 4AE8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8696 4AEA 79 00 C1			adc adr.ROW+256,y
  8697 4AED 8D C9 9C			sta GETBYTE.SRC+1
  8698 4AF0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8699 4AF2 69 00			adc #$00
  8700 4AF4 8D CA 9C			sta GETBYTE.SRC+2
  8701 4AF7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8702 4AF9 69 00			adc #$00
  8703 4AFB 8D CB 9C			sta GETBYTE.SRC+3
  8704 4AFE 20 1B 2E			jsr GETBYTE
  8705 4B01 AD CC 9C			lda GETBYTE.RESULT
  8706 4B04 09 80			ora #$80
  8707 4B06 8D 88 9D			sta CL
  8708
  8709 				; optimize OK (service.pas), line = 1551
  8710
  8711 4B09 AC 81 9D			ldy Y
  8712 4B0C AD 80 9D			lda X
  8713 4B0F 18 79 00 C0			add adr.ROW,y
  8714 4B13 8D C3 9C			sta PUTBYTE.DST
  8715 4B16 A9 50			lda #$50
  8716 4B18 79 00 C1			adc adr.ROW+256,y
  8717 4B1B 8D C4 9C			sta PUTBYTE.DST+1
  8718 4B1E A9 00			lda #$00
  8719 4B20 69 00			adc #$00
  8720 4B22 8D C5 9C			sta PUTBYTE.DST+2
  8721 4B25 A9 00			lda #$00
  8722 4B27 69 00			adc #$00
  8723 4B29 8D C6 9C			sta PUTBYTE.DST+3
  8724 4B2C AD 88 9D			lda CL
  8725 4B2F 8D C7 9C			sta PUTBYTE.V
  8726 4B32 20 F3 2D			jsr PUTBYTE
  8727
  8728 				; optimize OK (service.pas), line = 1556
  8729
  8730 4B35 AD 91 98			lda PLAYSCREEN.OFS
  8731 4B38 18 6D 80 9D			add X
  8732 4B3C 85 A0			sta :STACKORIGIN+10
  8733 4B3E AD 92 98			lda PLAYSCREEN.OFS+1
  8734 4B41 69 00			adc #$00
  8735 4B43 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8736 4B45 AD 93 98			lda PLAYSCREEN.OFS+2
  8737 4B48 69 00			adc #$00
  8738 4B4A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8739 4B4C AD 94 98			lda PLAYSCREEN.OFS+3
  8740 4B4F 69 00			adc #$00
  8741 4B51 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8742 4B53 AC 81 9D			ldy Y
  8743 4B56 A5 A0			lda :STACKORIGIN+10
  8744 4B58 18 79 00 C0			add adr.ROW,y
  8745 4B5C 8D C3 9C			sta PUTBYTE.DST
  8746 4B5F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8747 4B61 79 00 C1			adc adr.ROW+256,y
  8748 4B64 8D C4 9C			sta PUTBYTE.DST+1
  8749 4B67 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8750 4B69 69 00			adc #$00
  8751 4B6B 8D C5 9C			sta PUTBYTE.DST+2
  8752 4B6E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8753 4B70 69 00			adc #$00
  8754 4B72 8D C6 9C			sta PUTBYTE.DST+3
  8755 4B75 AD 88 9D			lda CL
  8756 4B78 8D C7 9C			sta PUTBYTE.V
  8757 4B7B 20 F3 2D			jsr PUTBYTE
  8758 4B7E			l_1294
  8759
  8760 				; --- ForToDoEpilog
  8761 4B7E EE 80 9D			inc X
  8762 4B81 F0 03 4C AB 4A		jne l_1274
  8763 4B86			l_1282
  8764
  8765 				; --- ForToDoEpilog
  8766 4B86 EE 81 9D			inc Y
  8767 4B89 F0 03 4C 8F 4A		jne l_1253
  8768 4B8E			l_1261
  8769
  8770 				; ------------------------------------------------------------
  8771
  8772 = 9D7E			XA	= DATAORIGIN+$05F2
  8773 = 9D7F			YA	= DATAORIGIN+$05F3
  8774 = 9D80			X	= DATAORIGIN+$05F4
  8775 = 9D81			Y	= DATAORIGIN+$05F5
  8776 = 9D82			XS	= DATAORIGIN+$05F6
  8777 = 9D84			YS	= DATAORIGIN+$05F8
  8778 = 9D86			YH	= DATAORIGIN+$05FA
  8779 = 9D88			CL	= DATAORIGIN+$05FC
  8780 = 9D89			SHADOW	= DATAORIGIN+$05FD
  8781
  8782 = 9D7E			@VarData	= XA
  8783 = 000C			@VarDataSize	= 12
  8784
  8785 4B8E			@exit
  8786 					.ifdef @new
  8787 					lda <@VarData
  8788 					sta :ztmp
  8789 					lda >@VarData
  8790 					ldy #@VarDataSize-1
  8791 					jmp @FreeMem
  8792 					els
  8793 4B8E 60				rts						; ret
  8794 					eif
  8795 				.endl
  8796
  8797 4B8F			.local	PLACE_BLOCK					; PROCEDURE
  8798
  8799 				; optimize OK (service.pas), line = 1571
  8800
  8801 4B8F AD 8C 9D			lda XA
  8802 4B92 85 9F			sta :STACKORIGIN+9
  8803 4B94 A9 00			lda #$00
  8804 4B96 06 9F			asl :STACKORIGIN+9
  8805 4B98 2A				rol @
  8806 4B99 06 9F			asl :STACKORIGIN+9
  8807 4B9B 2A				rol @
  8808 4B9C 06 9F			asl :STACKORIGIN+9
  8809 4B9E 2A				rol @
  8810 4B9F 06 9F			asl :STACKORIGIN+9
  8811 4BA1 2A				rol @
  8812 4BA2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8813 4BA4 A5 9F			lda :STACKORIGIN+9
  8814 4BA6 18 69 09			add #$09
  8815 4BA9 8D 91 9D			sta XS
  8816 4BAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8817 4BAE 69 00			adc #$00
  8818 4BB0 8D 92 9D			sta XS+1
  8819
  8820 				; optimize OK (service.pas), line = 1572
  8821
  8822 4BB3 AD 8D 9D			lda YA
  8823 4BB6 85 9F			sta :STACKORIGIN+9
  8824 4BB8 A9 00			lda #$00
  8825 4BBA 06 9F			asl :STACKORIGIN+9
  8826 4BBC 2A				rol @
  8827 4BBD 06 9F			asl :STACKORIGIN+9
  8828 4BBF 2A				rol @
  8829 4BC0 06 9F			asl :STACKORIGIN+9
  8830 4BC2 2A				rol @
  8831 4BC3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8832 4BC5 A5 9F			lda :STACKORIGIN+9
  8833 4BC7 18 69 16			add #$16
  8834 4BCA 8D 93 9D			sta YS
  8835 4BCD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8836 4BCF 69 00			adc #$00
  8837 4BD1 8D 94 9D			sta YS+1
  8838
  8839 				; optimize OK (service.pas), line = 1574
  8840
  8841 4BD4 A9 00			lda #$00
  8842 4BD6 8D 90 9D			sta Y
  8843
  8844 4BD9			l_1307
  8845 				; --- ForToDoCondition
  8846 4BD9 AD 90 9D			lda Y
  8847 4BDC C9 08			cmp #$08
  8848 4BDE 90 03 4C 31 4E		jcs l_1315
  8849
  8850 				; optimize OK (service.pas), line = 1575
  8851
  8852 4BE3 A9 00			lda #$00
  8853 4BE5 8D 8F 9D			sta X
  8854
  8855 4BE8			l_131E
  8856 				; --- ForToDoCondition
  8857 4BE8 AD 8F 9D			lda X
  8858 4BEB C9 10			cmp #$10
  8859 4BED 90 03 4C 29 4E		jcs l_132C
  8860
  8861 				; optimize OK (service.pas), line = 1580
  8862
  8863 4BF2 AD 91 98			lda PLAYSCREEN.OFS
  8864 4BF5 6D 91 9D			adc XS
  8865 4BF8 85 9F			sta :STACKORIGIN+9
  8866 4BFA AD 92 98			lda PLAYSCREEN.OFS+1
  8867 4BFD 6D 92 9D			adc XS+1
  8868 4C00 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8869 4C02 AD 93 98			lda PLAYSCREEN.OFS+2
  8870 4C05 69 00			adc #$00
  8871 4C07 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8872 4C09 AD 94 98			lda PLAYSCREEN.OFS+3
  8873 4C0C 69 00			adc #$00
  8874 4C0E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8875 4C10 A5 9F			lda :STACKORIGIN+9
  8876 4C12 18 6D 8F 9D			add X
  8877 4C16 85 9F			sta :STACKORIGIN+9
  8878 4C18 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8879 4C1A 69 00			adc #$00
  8880 4C1C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8881 4C1E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8882 4C20 69 00			adc #$00
  8883 4C22 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8884 4C24 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8885 4C26 69 00			adc #$00
  8886 4C28 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8887 4C2A AD 93 9D			lda YS
  8888 4C2D 18 6D 90 9D			add Y
  8889 4C31 A8				tay
  8890 4C32 A5 9F			lda :STACKORIGIN+9
  8891 4C34 18 79 00 C0			add adr.ROW,y
  8892 4C38 8D C8 9C			sta GETBYTE.SRC
  8893 4C3B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8894 4C3D 79 00 C1			adc adr.ROW+256,y
  8895 4C40 8D C9 9C			sta GETBYTE.SRC+1
  8896 4C43 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8897 4C45 69 00			adc #$00
  8898 4C47 8D CA 9C			sta GETBYTE.SRC+2
  8899 4C4A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8900 4C4C 69 00			adc #$00
  8901 4C4E 8D CB 9C			sta GETBYTE.SRC+3
  8902 4C51 20 1B 2E			jsr GETBYTE
  8903 4C54 AD CC 9C			lda GETBYTE.RESULT
  8904 4C57 29 80			and #$80
  8905 4C59 8D 97 9D			sta SHADOW
  8906
  8907 				; optimize OK (service.pas), line = 1582
  8908
  8909 4C5C AD 90 9D			lda Y
  8910 4C5F C9 07			cmp #$07
  8911 4C61 90 03 4C 55 4D		jcs l_136B
  8912 4C66 AD 8F 9D			lda X
  8913 4C69 C9 0F			cmp #$0F
  8914 4C6B 90 03 4C 55 4D		jcs l_136B
  8915
  8916 				; optimize OK (service.pas), line = 1587
  8917
  8918 4C70 AD 8E 9D			lda BLOCK
  8919 4C73 38 E9 01			sub #$01
  8920 4C76 85 9F			sta :STACKORIGIN+9
  8921 4C78 A9 00			lda #$00
  8922 4C7A E9 00			sbc #$00
  8923 4C7C A5 9F			lda :STACKORIGIN+9
  8924 4C7E 29 0F			and #$0F
  8925 4C80 A8				tay
  8926 4C81 B9 B8 10			lda adr.COLORBLOCK,y
  8927 4C84 29 7F			and #$7F
  8928 4C86 0D 97 9D			ora SHADOW
  8929 4C89 8D 95 9D			sta CL
  8930
  8931 				; optimize OK (service.pas), line = 1590
  8932
  8933 4C8C AD 91 9D			lda XS
  8934 4C8F 85 A0			sta :STACKORIGIN+10
  8935 4C91 A9 50			lda #$50
  8936 4C93 18 6D 92 9D			add XS+1
  8937 4C97 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8938 4C99 A9 00			lda #$00
  8939 4C9B 69 00			adc #$00
  8940 4C9D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8941 4C9F A9 00			lda #$00
  8942 4CA1 69 00			adc #$00
  8943 4CA3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8944 4CA5 A5 A0			lda :STACKORIGIN+10
  8945 4CA7 18 6D 8F 9D			add X
  8946 4CAB 85 A0			sta :STACKORIGIN+10
  8947 4CAD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8948 4CAF 69 00			adc #$00
  8949 4CB1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8950 4CB3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8951 4CB5 69 00			adc #$00
  8952 4CB7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8953 4CB9 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8954 4CBB 69 00			adc #$00
  8955 4CBD 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8956 4CBF AD 93 9D			lda YS
  8957 4CC2 18 6D 90 9D			add Y
  8958 4CC6 A8				tay
  8959 4CC7 A5 A0			lda :STACKORIGIN+10
  8960 4CC9 18 79 00 C0			add adr.ROW,y
  8961 4CCD 8D C3 9C			sta PUTBYTE.DST
  8962 4CD0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8963 4CD2 79 00 C1			adc adr.ROW+256,y
  8964 4CD5 8D C4 9C			sta PUTBYTE.DST+1
  8965 4CD8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8966 4CDA 69 00			adc #$00
  8967 4CDC 8D C5 9C			sta PUTBYTE.DST+2
  8968 4CDF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8969 4CE1 69 00			adc #$00
  8970 4CE3 8D C6 9C			sta PUTBYTE.DST+3
  8971 4CE6 AD 95 9D			lda CL
  8972 4CE9 8D C7 9C			sta PUTBYTE.V
  8973 4CEC 20 F3 2D			jsr PUTBYTE
  8974
  8975 				; optimize OK (service.pas), line = 1593
  8976
  8977 4CEF AD 91 98			lda PLAYSCREEN.OFS
  8978 4CF2 18 6D 91 9D			add XS
  8979 4CF6 85 A0			sta :STACKORIGIN+10
  8980 4CF8 AD 92 98			lda PLAYSCREEN.OFS+1
  8981 4CFB 6D 92 9D			adc XS+1
  8982 4CFE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8983 4D00 AD 93 98			lda PLAYSCREEN.OFS+2
  8984 4D03 69 00			adc #$00
  8985 4D05 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8986 4D07 AD 94 98			lda PLAYSCREEN.OFS+3
  8987 4D0A 69 00			adc #$00
  8988 4D0C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8989 4D0E A5 A0			lda :STACKORIGIN+10
  8990 4D10 18 6D 8F 9D			add X
  8991 4D14 85 A0			sta :STACKORIGIN+10
  8992 4D16 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8993 4D18 69 00			adc #$00
  8994 4D1A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8995 4D1C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8996 4D1E 69 00			adc #$00
  8997 4D20 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8998 4D22 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8999 4D24 69 00			adc #$00
  9000 4D26 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9001 4D28 AD 93 9D			lda YS
  9002 4D2B 18 6D 90 9D			add Y
  9003 4D2F A8				tay
  9004 4D30 A5 A0			lda :STACKORIGIN+10
  9005 4D32 18 79 00 C0			add adr.ROW,y
  9006 4D36 8D C3 9C			sta PUTBYTE.DST
  9007 4D39 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9008 4D3B 79 00 C1			adc adr.ROW+256,y
  9009 4D3E 8D C4 9C			sta PUTBYTE.DST+1
  9010 4D41 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9011 4D43 69 00			adc #$00
  9012 4D45 8D C5 9C			sta PUTBYTE.DST+2
  9013 4D48 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9014 4D4A 69 00			adc #$00
  9015 4D4C 8D C6 9C			sta PUTBYTE.DST+3
  9016 4D4F AD 95 9D			lda CL
  9017 4D52 4C 1B 4E			jmp l_13CA
  9018 4D55			l_136B
  9019
  9020 				; optimize OK (service.pas), line = 1601
  9021
  9022 4D55 AD 91 9D			lda XS
  9023 4D58 85 A0			sta :STACKORIGIN+10
  9024 4D5A A9 50			lda #$50
  9025 4D5C 18 6D 92 9D			add XS+1
  9026 4D60 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9027 4D62 A9 00			lda #$00
  9028 4D64 69 00			adc #$00
  9029 4D66 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9030 4D68 A9 00			lda #$00
  9031 4D6A 69 00			adc #$00
  9032 4D6C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9033 4D6E A5 A0			lda :STACKORIGIN+10
  9034 4D70 18 6D 8F 9D			add X
  9035 4D74 85 A0			sta :STACKORIGIN+10
  9036 4D76 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9037 4D78 69 00			adc #$00
  9038 4D7A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9039 4D7C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9040 4D7E 69 00			adc #$00
  9041 4D80 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9042 4D82 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9043 4D84 69 00			adc #$00
  9044 4D86 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9045 4D88 AD 93 9D			lda YS
  9046 4D8B 18 6D 90 9D			add Y
  9047 4D8F A8				tay
  9048 4D90 A5 A0			lda :STACKORIGIN+10
  9049 4D92 18 79 00 C0			add adr.ROW,y
  9050 4D96 8D C3 9C			sta PUTBYTE.DST
  9051 4D99 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9052 4D9B 79 00 C1			adc adr.ROW+256,y
  9053 4D9E 8D C4 9C			sta PUTBYTE.DST+1
  9054 4DA1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9055 4DA3 69 00			adc #$00
  9056 4DA5 8D C5 9C			sta PUTBYTE.DST+2
  9057 4DA8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9058 4DAA 69 00			adc #$00
  9059 4DAC 8D C6 9C			sta PUTBYTE.DST+3
  9060 4DAF AD 97 9D			lda SHADOW
  9061 4DB2 8D C7 9C			sta PUTBYTE.V
  9062 4DB5 20 F3 2D			jsr PUTBYTE
  9063
  9064 				; optimize OK (service.pas), line = 1604
  9065
  9066 4DB8 AD 91 98			lda PLAYSCREEN.OFS
  9067 4DBB 18 6D 91 9D			add XS
  9068 4DBF 85 A0			sta :STACKORIGIN+10
  9069 4DC1 AD 92 98			lda PLAYSCREEN.OFS+1
  9070 4DC4 6D 92 9D			adc XS+1
  9071 4DC7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9072 4DC9 AD 93 98			lda PLAYSCREEN.OFS+2
  9073 4DCC 69 00			adc #$00
  9074 4DCE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9075 4DD0 AD 94 98			lda PLAYSCREEN.OFS+3
  9076 4DD3 69 00			adc #$00
  9077 4DD5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9078 4DD7 A5 A0			lda :STACKORIGIN+10
  9079 4DD9 18 6D 8F 9D			add X
  9080 4DDD 85 A0			sta :STACKORIGIN+10
  9081 4DDF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9082 4DE1 69 00			adc #$00
  9083 4DE3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9084 4DE5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9085 4DE7 69 00			adc #$00
  9086 4DE9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9087 4DEB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9088 4DED 69 00			adc #$00
  9089 4DEF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9090 4DF1 AD 93 9D			lda YS
  9091 4DF4 18 6D 90 9D			add Y
  9092 4DF8 A8				tay
  9093 4DF9 A5 A0			lda :STACKORIGIN+10
  9094 4DFB 18 79 00 C0			add adr.ROW,y
  9095 4DFF 8D C3 9C			sta PUTBYTE.DST
  9096 4E02 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9097 4E04 79 00 C1			adc adr.ROW+256,y
  9098 4E07 8D C4 9C			sta PUTBYTE.DST+1
  9099 4E0A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9100 4E0C 69 00			adc #$00
  9101 4E0E 8D C5 9C			sta PUTBYTE.DST+2
  9102 4E11 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9103 4E13 69 00			adc #$00
  9104 4E15 8D C6 9C			sta PUTBYTE.DST+3
  9105 4E18 AD 97 9D			lda SHADOW
  9106 4E1B			l_13CA
  9107 4E1B 8D C7 9C			sta PUTBYTE.V
  9108 4E1E 20 F3 2D			jsr PUTBYTE
  9109
  9110 				; --- ForToDoEpilog
  9111 4E21 EE 8F 9D			inc X
  9112 4E24 F0 03 4C E8 4B		jne l_131E
  9113 4E29			l_132C
  9114
  9115 				; --- ForToDoEpilog
  9116 4E29 EE 90 9D			inc Y
  9117 4E2C F0 03 4C D9 4B		jne l_1307
  9118 4E31			l_1315
  9119
  9120 				; optimize OK (service.pas), line = 1609
  9121
  9122 4E31 AD 93 9D			lda YS
  9123 4E34 18 69 04			add #$04
  9124 4E37 8D 90 9D			sta Y
  9125 4E3A AD 93 9D			lda YS
  9126 4E3D 18 69 0C			add #$0C
  9127 4E40 8D 44 4E			sta @FORTMP_141E_0
  9128
  9129 4E43			l_1421
  9130 				; --- ForToDoCondition
  9131 4E43 A9 00			lda @FORTMP_141E_0::#$00
  9132 4E45 CD 90 9D			cmp Y
  9133 4E48 B0 03 4C 42 4F		jcc l_142F
  9134
  9135 				; optimize OK (service.pas), line = 1610
  9136
  9137 4E4D AD 91 9D			lda XS
  9138 4E50 18 69 08			add #$08
  9139 4E53 8D 8F 9D			sta X
  9140 4E56 AD 91 9D			lda XS
  9141 4E59 18 69 18			add #$18
  9142 4E5C 8D 60 4E			sta @FORTMP_143F_0
  9143
  9144 4E5F			l_1442
  9145 				; --- ForToDoCondition
  9146 4E5F A9 00			lda @FORTMP_143F_0::#$00
  9147 4E61 CD 8F 9D			cmp X
  9148 4E64 B0 03 4C 3A 4F		jcc l_1450
  9149
  9150 				; optimize OK (service.pas), line = 1611
  9151
  9152 4E69 AD 8F 9D			lda X
  9153 4E6C C9 D8			cmp #$D8
  9154 4E6E 90 03 4C 32 4F		jcs l_1462
  9155
  9156 				; optimize OK (service.pas), line = 1618
  9157
  9158 4E73 AD 91 98			lda PLAYSCREEN.OFS
  9159 4E76 6D 8F 9D			adc X
  9160 4E79 85 9F			sta :STACKORIGIN+9
  9161 4E7B AD 92 98			lda PLAYSCREEN.OFS+1
  9162 4E7E 69 00			adc #$00
  9163 4E80 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9164 4E82 AD 93 98			lda PLAYSCREEN.OFS+2
  9165 4E85 69 00			adc #$00
  9166 4E87 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9167 4E89 AD 94 98			lda PLAYSCREEN.OFS+3
  9168 4E8C 69 00			adc #$00
  9169 4E8E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9170 4E90 AC 90 9D			ldy Y
  9171 4E93 A5 9F			lda :STACKORIGIN+9
  9172 4E95 18 79 00 C0			add adr.ROW,y
  9173 4E99 8D C8 9C			sta GETBYTE.SRC
  9174 4E9C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9175 4E9E 79 00 C1			adc adr.ROW+256,y
  9176 4EA1 8D C9 9C			sta GETBYTE.SRC+1
  9177 4EA4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9178 4EA6 69 00			adc #$00
  9179 4EA8 8D CA 9C			sta GETBYTE.SRC+2
  9180 4EAB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9181 4EAD 69 00			adc #$00
  9182 4EAF 8D CB 9C			sta GETBYTE.SRC+3
  9183 4EB2 20 1B 2E			jsr GETBYTE
  9184 4EB5 AD CC 9C			lda GETBYTE.RESULT
  9185 4EB8 29 7F			and #$7F
  9186 4EBA 8D 95 9D			sta CL
  9187
  9188 				; optimize OK (service.pas), line = 1622
  9189
  9190 4EBD AC 90 9D			ldy Y
  9191 4EC0 AD 8F 9D			lda X
  9192 4EC3 18 79 00 C0			add adr.ROW,y
  9193 4EC7 8D C3 9C			sta PUTBYTE.DST
  9194 4ECA A9 50			lda #$50
  9195 4ECC 79 00 C1			adc adr.ROW+256,y
  9196 4ECF 8D C4 9C			sta PUTBYTE.DST+1
  9197 4ED2 A9 00			lda #$00
  9198 4ED4 69 00			adc #$00
  9199 4ED6 8D C5 9C			sta PUTBYTE.DST+2
  9200 4ED9 A9 00			lda #$00
  9201 4EDB 69 00			adc #$00
  9202 4EDD 8D C6 9C			sta PUTBYTE.DST+3
  9203 4EE0 AD 95 9D			lda CL
  9204 4EE3 8D C7 9C			sta PUTBYTE.V
  9205 4EE6 20 F3 2D			jsr PUTBYTE
  9206
  9207 				; optimize OK (service.pas), line = 1626
  9208
  9209 4EE9 AD 91 98			lda PLAYSCREEN.OFS
  9210 4EEC 18 6D 8F 9D			add X
  9211 4EF0 85 A0			sta :STACKORIGIN+10
  9212 4EF2 AD 92 98			lda PLAYSCREEN.OFS+1
  9213 4EF5 69 00			adc #$00
  9214 4EF7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9215 4EF9 AD 93 98			lda PLAYSCREEN.OFS+2
  9216 4EFC 69 00			adc #$00
  9217 4EFE 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9218 4F00 AD 94 98			lda PLAYSCREEN.OFS+3
  9219 4F03 69 00			adc #$00
  9220 4F05 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9221 4F07 AC 90 9D			ldy Y
  9222 4F0A A5 A0			lda :STACKORIGIN+10
  9223 4F0C 18 79 00 C0			add adr.ROW,y
  9224 4F10 8D C3 9C			sta PUTBYTE.DST
  9225 4F13 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9226 4F15 79 00 C1			adc adr.ROW+256,y
  9227 4F18 8D C4 9C			sta PUTBYTE.DST+1
  9228 4F1B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9229 4F1D 69 00			adc #$00
  9230 4F1F 8D C5 9C			sta PUTBYTE.DST+2
  9231 4F22 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9232 4F24 69 00			adc #$00
  9233 4F26 8D C6 9C			sta PUTBYTE.DST+3
  9234 4F29 AD 95 9D			lda CL
  9235 4F2C 8D C7 9C			sta PUTBYTE.V
  9236 4F2F 20 F3 2D			jsr PUTBYTE
  9237 4F32			l_1462
  9238
  9239 				; --- ForToDoEpilog
  9240 4F32 EE 8F 9D			inc X
  9241 4F35 F0 03 4C 5F 4E		jne l_1442
  9242 4F3A			l_1450
  9243
  9244 				; --- ForToDoEpilog
  9245 4F3A EE 90 9D			inc Y
  9246 4F3D F0 03 4C 43 4E		jne l_1421
  9247 4F42			l_142F
  9248
  9249 				; optimize OK (service.pas), line = 1629
  9250
  9251 4F42 AD 8E 9D			lda BLOCK
  9252 4F45 C9 09			cmp #$09
  9253 4F47 B0 03 4C D2 51		jcc l_14BE
  9254
  9255 				; optimize OK (service.pas), line = 1631
  9256
  9257 4F4C A9 00			lda #$00
  9258 4F4E 8D 96 9D			sta CL2
  9259
  9260 				; optimize OK (service.pas), line = 1632
  9261
  9262 4F51 AD 8E 9D			lda BLOCK
  9263 4F54 29 0F			and #$0F
  9264 4F56 C9 09			cmp #$09
  9265 4F58 D0 19			jne l_14D9
  9266
  9267 				; optimize OK (service.pas), line = 1634
  9268
  9269 4F5A A9 CA			lda #$CA
  9270 4F5C 8D 96 9D			sta CL2
  9271
  9272 				; optimize OK (service.pas), line = 1635
  9273
  9274 4F5F AD 8D 9D			lda YA
  9275 4F62 0A				asl @
  9276 4F63 0A				asl @
  9277 4F64 0A				asl @
  9278 4F65 0A				asl @
  9279 4F66 18 6D 8C 9D			add XA
  9280 4F6A A8				tay
  9281 4F6B A9 19			lda #$19
  9282 4F6D 99 00 DB			sta adr.WALL,y
  9283 4F70 4C 7F 4F			jmp l_14F8
  9284 4F73			l_14D9
  9285
  9286 				; optimize OK (service.pas), line = 1641
  9287
  9288 4F73 AD 8E 9D			lda BLOCK
  9289 4F76 C9 0A			cmp #$0A
  9290 4F78 D0 05			jne l_150A
  9291 4F7A A9 C9			lda #$C9
  9292 4F7C 8D 96 9D			sta CL2
  9293 4F7F			l_14F8
  9294 4F7F			l_150A
  9295
  9296 				; optimize OK (service.pas), line = 1645
  9297
  9298 4F7F A9 00			lda #$00
  9299 4F81 8D 90 9D			sta Y
  9300
  9301 4F84			l_151A
  9302 				; --- ForToDoCondition
  9303 4F84 AD 90 9D			lda Y
  9304 4F87 C9 07			cmp #$07
  9305 4F89 90 03 4C 89 50		jcs l_1528
  9306
  9307 				; optimize OK (service.pas), line = 1651
  9308
  9309 4F8E AD 91 98			lda PLAYSCREEN.OFS
  9310 4F91 6D 91 9D			adc XS
  9311 4F94 85 9F			sta :STACKORIGIN+9
  9312 4F96 AD 92 98			lda PLAYSCREEN.OFS+1
  9313 4F99 6D 92 9D			adc XS+1
  9314 4F9C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9315 4F9E AD 93 98			lda PLAYSCREEN.OFS+2
  9316 4FA1 69 00			adc #$00
  9317 4FA3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9318 4FA5 AD 94 98			lda PLAYSCREEN.OFS+3
  9319 4FA8 69 00			adc #$00
  9320 4FAA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9321 4FAC AD 90 9D			lda Y
  9322 4FAF 18 6D 93 9D			add YS
  9323 4FB3 A8				tay
  9324 4FB4 A5 9F			lda :STACKORIGIN+9
  9325 4FB6 18 79 00 C0			add adr.ROW,y
  9326 4FBA 8D C8 9C			sta GETBYTE.SRC
  9327 4FBD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9328 4FBF 79 00 C1			adc adr.ROW+256,y
  9329 4FC2 8D C9 9C			sta GETBYTE.SRC+1
  9330 4FC5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9331 4FC7 69 00			adc #$00
  9332 4FC9 8D CA 9C			sta GETBYTE.SRC+2
  9333 4FCC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9334 4FCE 69 00			adc #$00
  9335 4FD0 8D CB 9C			sta GETBYTE.SRC+3
  9336 4FD3 20 1B 2E			jsr GETBYTE
  9337 4FD6 AD CC 9C			lda GETBYTE.RESULT
  9338 4FD9 29 80			and #$80
  9339 4FDB 8D 95 9D			sta CL
  9340
  9341 				; optimize OK (service.pas), line = 1653
  9342
  9343 4FDE AD 96 9D			lda CL2
  9344 4FE1 29 7F			and #$7F
  9345 4FE3 0D 95 9D			ora CL
  9346 4FE6 8D 96 9D			sta CL2
  9347
  9348 				; optimize OK (service.pas), line = 1657
  9349
  9350 4FE9 AD 91 9D			lda XS
  9351 4FEC 85 A0			sta :STACKORIGIN+10
  9352 4FEE A9 50			lda #$50
  9353 4FF0 18 6D 92 9D			add XS+1
  9354 4FF4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9355 4FF6 A9 00			lda #$00
  9356 4FF8 69 00			adc #$00
  9357 4FFA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9358 4FFC A9 00			lda #$00
  9359 4FFE 69 00			adc #$00
  9360 5000 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9361 5002 AD 93 9D			lda YS
  9362 5005 18 6D 90 9D			add Y
  9363 5009 A8				tay
  9364 500A A5 A0			lda :STACKORIGIN+10
  9365 500C 18 79 00 C0			add adr.ROW,y
  9366 5010 8D C3 9C			sta PUTBYTE.DST
  9367 5013 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9368 5015 79 00 C1			adc adr.ROW+256,y
  9369 5018 8D C4 9C			sta PUTBYTE.DST+1
  9370 501B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9371 501D 69 00			adc #$00
  9372 501F 8D C5 9C			sta PUTBYTE.DST+2
  9373 5022 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9374 5024 69 00			adc #$00
  9375 5026 8D C6 9C			sta PUTBYTE.DST+3
  9376 5029 AD 96 9D			lda CL2
  9377 502C 8D C7 9C			sta PUTBYTE.V
  9378 502F 20 F3 2D			jsr PUTBYTE
  9379
  9380 				; optimize OK (service.pas), line = 1661
  9381
  9382 5032 AD 91 98			lda PLAYSCREEN.OFS
  9383 5035 18 6D 91 9D			add XS
  9384 5039 85 A0			sta :STACKORIGIN+10
  9385 503B AD 92 98			lda PLAYSCREEN.OFS+1
  9386 503E 6D 92 9D			adc XS+1
  9387 5041 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9388 5043 AD 93 98			lda PLAYSCREEN.OFS+2
  9389 5046 69 00			adc #$00
  9390 5048 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9391 504A AD 94 98			lda PLAYSCREEN.OFS+3
  9392 504D 69 00			adc #$00
  9393 504F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9394 5051 AD 93 9D			lda YS
  9395 5054 18 6D 90 9D			add Y
  9396 5058 A8				tay
  9397 5059 A5 A0			lda :STACKORIGIN+10
  9398 505B 18 79 00 C0			add adr.ROW,y
  9399 505F 8D C3 9C			sta PUTBYTE.DST
  9400 5062 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9401 5064 79 00 C1			adc adr.ROW+256,y
  9402 5067 8D C4 9C			sta PUTBYTE.DST+1
  9403 506A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9404 506C 69 00			adc #$00
  9405 506E 8D C5 9C			sta PUTBYTE.DST+2
  9406 5071 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9407 5073 69 00			adc #$00
  9408 5075 8D C6 9C			sta PUTBYTE.DST+3
  9409 5078 AD 96 9D			lda CL2
  9410 507B 8D C7 9C			sta PUTBYTE.V
  9411 507E 20 F3 2D			jsr PUTBYTE
  9412
  9413 				; --- ForToDoEpilog
  9414 5081 EE 90 9D			inc Y
  9415 5084 F0 03 4C 84 4F		jne l_151A
  9416 5089			l_1528
  9417
  9418 				; optimize OK (service.pas), line = 1665
  9419
  9420 5089 A9 00			lda #$00
  9421 508B 8D 8F 9D			sta X
  9422
  9423 508E			l_158F
  9424 				; --- ForToDoCondition
  9425 508E AD 8F 9D			lda X
  9426 5091 C9 0F			cmp #$0F
  9427 5093 90 03 4C D2 51		jcs l_159D
  9428
  9429 				; optimize OK (service.pas), line = 1669
  9430
  9431 5098 AD 91 98			lda PLAYSCREEN.OFS
  9432 509B 6D 91 9D			adc XS
  9433 509E 85 9F			sta :STACKORIGIN+9
  9434 50A0 AD 92 98			lda PLAYSCREEN.OFS+1
  9435 50A3 6D 92 9D			adc XS+1
  9436 50A6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9437 50A8 AD 93 98			lda PLAYSCREEN.OFS+2
  9438 50AB 69 00			adc #$00
  9439 50AD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9440 50AF AD 94 98			lda PLAYSCREEN.OFS+3
  9441 50B2 69 00			adc #$00
  9442 50B4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9443 50B6 A5 9F			lda :STACKORIGIN+9
  9444 50B8 18 6D 8F 9D			add X
  9445 50BC 85 9F			sta :STACKORIGIN+9
  9446 50BE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9447 50C0 69 00			adc #$00
  9448 50C2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9449 50C4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9450 50C6 69 00			adc #$00
  9451 50C8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9452 50CA A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9453 50CC 69 00			adc #$00
  9454 50CE 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9455 50D0 AC 93 9D			ldy YS
  9456 50D3 A5 9F			lda :STACKORIGIN+9
  9457 50D5 18 79 00 C0			add adr.ROW,y
  9458 50D9 8D C8 9C			sta GETBYTE.SRC
  9459 50DC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9460 50DE 79 00 C1			adc adr.ROW+256,y
  9461 50E1 8D C9 9C			sta GETBYTE.SRC+1
  9462 50E4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9463 50E6 69 00			adc #$00
  9464 50E8 8D CA 9C			sta GETBYTE.SRC+2
  9465 50EB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9466 50ED 69 00			adc #$00
  9467 50EF 8D CB 9C			sta GETBYTE.SRC+3
  9468 50F2 20 1B 2E			jsr GETBYTE
  9469 50F5 AD CC 9C			lda GETBYTE.RESULT
  9470 50F8 29 80			and #$80
  9471 50FA 8D 95 9D			sta CL
  9472
  9473 				; optimize OK (service.pas), line = 1671
  9474
  9475 50FD AD 96 9D			lda CL2
  9476 5100 29 7F			and #$7F
  9477 5102 0D 95 9D			ora CL
  9478 5105 8D 96 9D			sta CL2
  9479
  9480 				; optimize OK (service.pas), line = 1674
  9481
  9482 5108 AD 91 9D			lda XS
  9483 510B 85 A0			sta :STACKORIGIN+10
  9484 510D A9 50			lda #$50
  9485 510F 18 6D 92 9D			add XS+1
  9486 5113 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9487 5115 A9 00			lda #$00
  9488 5117 69 00			adc #$00
  9489 5119 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9490 511B A9 00			lda #$00
  9491 511D 69 00			adc #$00
  9492 511F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9493 5121 A5 A0			lda :STACKORIGIN+10
  9494 5123 18 6D 8F 9D			add X
  9495 5127 85 A0			sta :STACKORIGIN+10
  9496 5129 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9497 512B 69 00			adc #$00
  9498 512D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9499 512F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9500 5131 69 00			adc #$00
  9501 5133 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9502 5135 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9503 5137 69 00			adc #$00
  9504 5139 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9505 513B AC 93 9D			ldy YS
  9506 513E A5 A0			lda :STACKORIGIN+10
  9507 5140 18 79 00 C0			add adr.ROW,y
  9508 5144 8D C3 9C			sta PUTBYTE.DST
  9509 5147 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9510 5149 79 00 C1			adc adr.ROW+256,y
  9511 514C 8D C4 9C			sta PUTBYTE.DST+1
  9512 514F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9513 5151 69 00			adc #$00
  9514 5153 8D C5 9C			sta PUTBYTE.DST+2
  9515 5156 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9516 5158 69 00			adc #$00
  9517 515A 8D C6 9C			sta PUTBYTE.DST+3
  9518 515D AD 96 9D			lda CL2
  9519 5160 8D C7 9C			sta PUTBYTE.V
  9520 5163 20 F3 2D			jsr PUTBYTE
  9521
  9522 				; optimize OK (service.pas), line = 1677
  9523
  9524 5166 AD 91 98			lda PLAYSCREEN.OFS
  9525 5169 18 6D 91 9D			add XS
  9526 516D 85 A0			sta :STACKORIGIN+10
  9527 516F AD 92 98			lda PLAYSCREEN.OFS+1
  9528 5172 6D 92 9D			adc XS+1
  9529 5175 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9530 5177 AD 93 98			lda PLAYSCREEN.OFS+2
  9531 517A 69 00			adc #$00
  9532 517C 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9533 517E AD 94 98			lda PLAYSCREEN.OFS+3
  9534 5181 69 00			adc #$00
  9535 5183 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9536 5185 A5 A0			lda :STACKORIGIN+10
  9537 5187 18 6D 8F 9D			add X
  9538 518B 85 A0			sta :STACKORIGIN+10
  9539 518D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9540 518F 69 00			adc #$00
  9541 5191 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9542 5193 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9543 5195 69 00			adc #$00
  9544 5197 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9545 5199 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9546 519B 69 00			adc #$00
  9547 519D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9548 519F AC 93 9D			ldy YS
  9549 51A2 A5 A0			lda :STACKORIGIN+10
  9550 51A4 18 79 00 C0			add adr.ROW,y
  9551 51A8 8D C3 9C			sta PUTBYTE.DST
  9552 51AB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9553 51AD 79 00 C1			adc adr.ROW+256,y
  9554 51B0 8D C4 9C			sta PUTBYTE.DST+1
  9555 51B3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9556 51B5 69 00			adc #$00
  9557 51B7 8D C5 9C			sta PUTBYTE.DST+2
  9558 51BA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9559 51BC 69 00			adc #$00
  9560 51BE 8D C6 9C			sta PUTBYTE.DST+3
  9561 51C1 AD 96 9D			lda CL2
  9562 51C4 8D C7 9C			sta PUTBYTE.V
  9563 51C7 20 F3 2D			jsr PUTBYTE
  9564
  9565 				; --- ForToDoEpilog
  9566 51CA EE 8F 9D			inc X
  9567 51CD F0 03 4C 8E 50		jne l_158F
  9568 51D2			l_159D
  9569 51D2			l_14BE
  9570
  9571 				; ------------------------------------------------------------
  9572
  9573 = 9D8C			XA	= DATAORIGIN+$0600
  9574 = 9D8D			YA	= DATAORIGIN+$0601
  9575 = 9D8E			BLOCK	= DATAORIGIN+$0602
  9576 = 9D8F			X	= DATAORIGIN+$0603
  9577 = 9D90			Y	= DATAORIGIN+$0604
  9578 = 9D91			XS	= DATAORIGIN+$0605
  9579 = 9D93			YS	= DATAORIGIN+$0607
  9580 = 9D95			CL	= DATAORIGIN+$0609
  9581 = 9D96			CL2	= DATAORIGIN+$060A
  9582 = 9D97			SHADOW	= DATAORIGIN+$060B
  9583
  9584 = 9D8C			@VarData	= XA
  9585 = 000C			@VarDataSize	= 12
  9586
  9587 51D2			@exit
  9588 					.ifdef @new
  9589 					lda <@VarData
  9590 					sta :ztmp
  9591 					lda >@VarData
  9592 					ldy #@VarDataSize-1
  9593 					jmp @FreeMem
  9594 					els
  9595 51D2 60				rts						; ret
  9596 					eif
  9597 				.endl
  9598
  9599 51D3			.local	PUT_WALL					; PROCEDURE
  9600
  9601 				; optimize OK (service.pas), line = 1687
  9602
  9603 51D3 A9 00			lda #$00
  9604 51D5 8D 9B 9D			sta Y
  9605
  9606 51D8			l_160A
  9607 				; --- ForToDoCondition
  9608 51D8 AD 9B 9D			lda Y
  9609 51DB C9 0F			cmp #$0F
  9610 51DD B0 48			jcs l_1618
  9611
  9612 				; optimize OK (service.pas), line = 1688
  9613
  9614 51DF A9 00			lda #$00
  9615 51E1 8D 9A 9D			sta X
  9616
  9617 51E4			l_1621
  9618 				; --- ForToDoCondition
  9619 51E4 AD 9A 9D			lda X
  9620 51E7 C9 0D			cmp #$0D
  9621 51E9 B0 37			jcs l_162F
  9622
  9623 				; optimize OK (service.pas), line = 1689
  9624
  9625 51EB AD 9B 9D			lda Y
  9626 51EE 0A				asl @
  9627 51EF 0A				asl @
  9628 51F0 0A				asl @
  9629 51F1 0A				asl @
  9630 51F2 18 6D 9A 9D			add X
  9631 51F6 A8				tay
  9632 51F7 B9 00 DB			lda adr.WALL,y
  9633 51FA F0 21			jeq l_164E
  9634 51FC AD 9B 9D			lda Y
  9635 51FF 0A				asl @
  9636 5200 0A				asl @
  9637 5201 0A				asl @
  9638 5202 0A				asl @
  9639 5203 18 6D 9A 9D			add X
  9640 5207 A8				tay
  9641 5208 B9 00 DB			lda adr.WALL,y
  9642 520B 8D 8E 9D			sta PLACE_BLOCK.BLOCK
  9643 520E AD 9A 9D			lda X
  9644 5211 8D 8C 9D			sta PLACE_BLOCK.XA
  9645 5214 AD 9B 9D			lda Y
  9646 5217 8D 8D 9D			sta PLACE_BLOCK.YA
  9647 521A 20 8F 4B			jsr PLACE_BLOCK
  9648 521D			l_164E
  9649
  9650 				; --- ForToDoEpilog
  9651 521D EE 9A 9D			inc X
  9652 5220 D0 C2			jne l_1621
  9653 5222			l_162F
  9654
  9655 				; --- ForToDoEpilog
  9656 5222 EE 9B 9D			inc Y
  9657 5225 D0 B1			jne l_160A
  9658 5227			l_1618
  9659
  9660 				; ------------------------------------------------------------
  9661
  9662 = 9D9A			X	= DATAORIGIN+$060E
  9663 = 9D9B			Y	= DATAORIGIN+$060F
  9664
  9665 = 9D9A			@VarData	= X
  9666 = 0002			@VarDataSize	= 2
  9667
  9668 5227			@exit
  9669 					.ifdef @new
  9670 					lda <@VarData
  9671 					sta :ztmp
  9672 					lda >@VarData
  9673 					ldy #@VarDataSize-1
  9674 					jmp @FreeMem
  9675 					els
  9676 5227 60				rts						; ret
  9677 					eif
  9678 				.endl
  9679
  9680 5228			.local	SET_WALL					; PROCEDURE
  9681
  9682 				; optimize OK (service.pas), line = 1698
  9683
  9684 5228 A9 00			lda #$00
  9685 522A 8D 44 99			sta REMAIN_BLK
  9686
  9687 				; optimize OK (service.pas), line = 1699
  9688
  9689 522D AC 61 99			ldy CUR_PLAYER
  9690 5230 B9 52 99			lda adr.SCORE.WALL_N,y
  9691 5233 8D 9E 9D			sta WL
  9692
  9693 				; optimize OK (service.pas), line = 1702
  9694
  9695 5236 A9 00			lda #$00
  9696 5238 8D 9D 9D			sta Y
  9697
  9698 523B			l_168C
  9699 				; --- ForToDoCondition
  9700 523B AD 9D 9D			lda Y
  9701 523E C9 0F			cmp #$0F
  9702 5240 B0 3D			jcs l_169A
  9703
  9704 				; optimize OK (service.pas), line = 1703
  9705
  9706 5242 A9 00			lda #$00
  9707 5244 8D 9C 9D			sta X
  9708
  9709 5247			l_16A3
  9710 				; --- ForToDoCondition
  9711 5247 AD 9C 9D			lda X
  9712 524A C9 0D			cmp #$0D
  9713 524C B0 2C			jcs l_16B1
  9714
  9715 				; optimize OK (service.pas), line = 1706
  9716
  9717 524E AD 9D 9D			lda Y
  9718 5251 0A				asl @
  9719 5252 0A				asl @
  9720 5253 0A				asl @
  9721 5254 0A				asl @
  9722 5255 18 6D 9C 9D			add X
  9723 5259 A8				tay
  9724 525A B9 00 DB			lda adr.WALL,y
  9725 525D F0 16			jeq l_16E9
  9726 525F AD 9D 9D			lda Y
  9727 5262 0A				asl @
  9728 5263 0A				asl @
  9729 5264 0A				asl @
  9730 5265 0A				asl @
  9731 5266 18 6D 9C 9D			add X
  9732 526A A8				tay
  9733 526B B9 00 DB			lda adr.WALL,y
  9734 526E C9 0A			cmp #$0A
  9735 5270 F0 03			jeq l_16E9
  9736 5272 EE 44 99			inc REMAIN_BLK
  9737 5275			l_16E9
  9738
  9739 				; --- ForToDoEpilog
  9740 5275 EE 9C 9D			inc X
  9741 5278 D0 CD			jne l_16A3
  9742 527A			l_16B1
  9743
  9744 				; --- ForToDoEpilog
  9745 527A EE 9D 9D			inc Y
  9746 527D D0 BC			jne l_168C
  9747 527F			l_169A
  9748
  9749 				; optimize OK (service.pas), line = 1708
  9750
  9751 527F AD 9E 9D			lda WL
  9752 5282 38 E9 01			sub #$01
  9753 5285 85 86			sta @SMALLINT.MOD.A
  9754 5287 A9 00			lda #$00
  9755 5289 E9 00			sbc #$00
  9756 528B 85 87			sta @SMALLINT.MOD.A+1
  9757 528D A9 04			lda #$04
  9758 528F 85 8E			sta @SMALLINT.MOD.B
  9759 5291 A9 00			lda #$00
  9760 5293 85 8F			sta @SMALLINT.MOD.B+1
  9761 5295 20 9D 12			jsr @SMALLINT.MOD
  9762 5298 A5 92			lda @SMALLINT.MOD.RESULT
  9763 529A 8D 9E 9D			sta WL
  9764
  9765 				; optimize OK (service.pas), line = 1710
  9766
  9767 529D 8D 9F 9D			sta @CASETMP_0008
  9768 52A0 C9 00			cmp #$00
  9769 52A2 D0 33			jne l_1713
  9770 				@
  9771
  9772 				; optimize OK (service.pas), line = 1711
  9773
  9774 52A4 AD 1A 99 8D 12 99 + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9775 52D4 4C B0 53			jmp a_0008
  9776 52D7			l_1713
  9777 52D7 C9 01			cmp #$01
  9778 52D9 D0 33			jne l_171C
  9779
  9780 				; optimize OK (service.pas), line = 1712
  9781
  9782 52DB AD 22 99 8D 12 99 + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9783 530B 4C B0 53			jmp a_0008
  9784 530E			l_171C
  9785 530E C9 02			cmp #$02
  9786 5310 D0 33			jne l_1725
  9787
  9788 				; optimize OK (service.pas), line = 1713
  9789
  9790 5312 AD 2A 99 8D 12 99 + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9791 5342 4C B0 53			jmp a_0008
  9792 5345			l_1725
  9793 5345 C9 03			cmp #$03
  9794 5347 D0 33			jne l_172E
  9795
  9796 				; optimize OK (service.pas), line = 1714
  9797
  9798 5349 AD 32 99 8D 12 99 + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9799 5379 4C B0 53			jmp a_0008
  9800 537C			l_172E
  9801 537C C9 04			cmp #$04
  9802 537E D0 30			jne l_1737
  9803
  9804 				; optimize OK (service.pas), line = 1715
  9805
  9806 5380 AD 3A 99 8D 12 99 + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9807 53B0			l_1737
  9808 53B0			a_0008
  9809
  9810 				; ------------------------------------------------------------
  9811
  9812 = 9D9C			X	= DATAORIGIN+$0610
  9813 = 9D9D			Y	= DATAORIGIN+$0611
  9814 = 9D9E			WL	= DATAORIGIN+$0612
  9815 = 9D9F			@CASETMP_0008	= DATAORIGIN+$0613
  9816
  9817 = 9D9C			@VarData	= X
  9818 = 0004			@VarDataSize	= 4
  9819
  9820 53B0			@exit
  9821 					.ifdef @new
  9822 					lda <@VarData
  9823 					sta :ztmp
  9824 					lda >@VarData
  9825 					ldy #@VarDataSize-1
  9826 					jmp @FreeMem
  9827 					els
  9828 53B0 60				rts						; ret
  9829 					eif
  9830 				.endl
  9831
  9832 53B1			.local	SPLIT_LINE					; FUNCTION
  9833
  9834 				; optimize OK (service.pas), line = 1754
  9835
  9836 53B1 AC A0 9D 84 84 AC + 	mwy X1 :bp2
  9837 53BB A0 00			ldy #$00
  9838 53BD B1 84			lda (:bp2),y
  9839 53BF 18 69 10			add #$10
  9840 53C2 91 84			sta (:bp2),y
  9841 53C4 C8				iny
  9842 53C5 B1 84			lda (:bp2),y
  9843 53C7 69 00			adc #$00
  9844 53C9 91 84			sta (:bp2),y
  9845
  9846 				; optimize OK (service.pas), line = 1755
  9847
  9848 53CB AC A2 9D 84 84 AC + 	mwy Y1 :bp2
  9849 53D5 A0 00			ldy #$00
  9850 53D7 B1 84			lda (:bp2),y
  9851 53D9 18 69 18			add #$18
  9852 53DC 91 84			sta (:bp2),y
  9853 53DE C8				iny
  9854 53DF B1 84			lda (:bp2),y
  9855 53E1 69 00			adc #$00
  9856 53E3 91 84			sta (:bp2),y
  9857
  9858 				; optimize OK (service.pas), line = 1756
  9859
  9860 53E5 AC A4 9D 84 84 AC + 	mwy X2 :bp2
  9861 53EF A0 00			ldy #$00
  9862 53F1 B1 84			lda (:bp2),y
  9863 53F3 18 69 10			add #$10
  9864 53F6 91 84			sta (:bp2),y
  9865 53F8 C8				iny
  9866 53F9 B1 84			lda (:bp2),y
  9867 53FB 69 00			adc #$00
  9868 53FD 91 84			sta (:bp2),y
  9869
  9870 				; optimize OK (service.pas), line = 1757
  9871
  9872 53FF AC A6 9D 84 84 AC + 	mwy Y2 :bp2
  9873 5409 A0 00			ldy #$00
  9874 540B B1 84			lda (:bp2),y
  9875 540D 18 69 18			add #$18
  9876 5410 91 84			sta (:bp2),y
  9877 5412 C8				iny
  9878 5413 B1 84			lda (:bp2),y
  9879 5415 69 00			adc #$00
  9880 5417 91 84			sta (:bp2),y
  9881
  9882 				; optimize OK (service.pas), line = 1759
  9883
  9884 5419 A9 00			lda #$00
  9885 541B 8D C9 9D			sta COLLISION
  9886
  9887 				; optimize OK (service.pas), line = 1761
  9888
  9889 541E AC A0 9D 84 84 AC + 	mwy X1 :bp2
  9890 5428 A0 00			ldy #$00
  9891 542A B1 84			lda (:bp2),y
  9892 542C 85 9F			sta :STACKORIGIN+9
  9893 542E C8				iny
  9894 542F B1 84			lda (:bp2),y
  9895 5431 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9896 5433 A0 00			ldy #$00
  9897 5435 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9898 5437 10 01			spl
  9899 5439 88				dey
  9900 543A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9901 543C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9902 543E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9903 5440 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9904 5442 66 9F			ror :STACKORIGIN+9
  9905 5444 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9906 5446 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9907 5448 66 9F			ror :STACKORIGIN+9
  9908 544A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9909 544C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9910 544E 66 9F			ror :STACKORIGIN+9
  9911 5450 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9912 5452 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9913 5454 66 9F			ror :STACKORIGIN+9
  9914 5456 A5 9F			lda :STACKORIGIN+9
  9915 5458 8D BD 9D			sta XP1
  9916 545B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9917 545D 8D BE 9D			sta XP1+1
  9918
  9919 				; optimize OK (service.pas), line = 1762
  9920
  9921 5460 AC A2 9D 84 84 AC + 	mwy Y1 :bp2
  9922 546A A0 00			ldy #$00
  9923 546C B1 84			lda (:bp2),y
  9924 546E 85 9F			sta :STACKORIGIN+9
  9925 5470 C8				iny
  9926 5471 B1 84			lda (:bp2),y
  9927 5473 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9928 5475 A0 00			ldy #$00
  9929 5477 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9930 5479 10 01			spl
  9931 547B 88				dey
  9932 547C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9933 547E 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9934 5480 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9935 5482 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9936 5484 66 9F			ror :STACKORIGIN+9
  9937 5486 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9938 5488 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9939 548A 66 9F			ror :STACKORIGIN+9
  9940 548C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9941 548E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9942 5490 66 9F			ror :STACKORIGIN+9
  9943 5492 A5 9F			lda :STACKORIGIN+9
  9944 5494 8D BF 9D			sta YP1
  9945 5497 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9946 5499 8D C0 9D			sta YP1+1
  9947
  9948 				; optimize OK (service.pas), line = 1763
  9949
  9950 549C AC A4 9D 84 84 AC + 	mwy X2 :bp2
  9951 54A6 A0 00			ldy #$00
  9952 54A8 B1 84			lda (:bp2),y
  9953 54AA 85 9F			sta :STACKORIGIN+9
  9954 54AC C8				iny
  9955 54AD B1 84			lda (:bp2),y
  9956 54AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9957 54B1 A0 00			ldy #$00
  9958 54B3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9959 54B5 10 01			spl
  9960 54B7 88				dey
  9961 54B8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9962 54BA 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9963 54BC 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9964 54BE 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9965 54C0 66 9F			ror :STACKORIGIN+9
  9966 54C2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9967 54C4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9968 54C6 66 9F			ror :STACKORIGIN+9
  9969 54C8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9970 54CA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9971 54CC 66 9F			ror :STACKORIGIN+9
  9972 54CE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9973 54D0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9974 54D2 66 9F			ror :STACKORIGIN+9
  9975 54D4 A5 9F			lda :STACKORIGIN+9
  9976 54D6 8D C1 9D			sta XP2
  9977 54D9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9978 54DB 8D C2 9D			sta XP2+1
  9979
  9980 				; optimize OK (service.pas), line = 1764
  9981
  9982 54DE AC A6 9D 84 84 AC + 	mwy Y2 :bp2
  9983 54E8 A0 00			ldy #$00
  9984 54EA B1 84			lda (:bp2),y
  9985 54EC 85 9F			sta :STACKORIGIN+9
  9986 54EE C8				iny
  9987 54EF B1 84			lda (:bp2),y
  9988 54F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9989 54F3 A0 00			ldy #$00
  9990 54F5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9991 54F7 10 01			spl
  9992 54F9 88				dey
  9993 54FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9994 54FC 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9995 54FE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9996 5500 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9997 5502 66 9F			ror :STACKORIGIN+9
  9998 5504 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9999 5506 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10000 5508 66 9F			ror :STACKORIGIN+9
 10001 550A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10002 550C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10003 550E 66 9F			ror :STACKORIGIN+9
 10004 5510 A5 9F			lda :STACKORIGIN+9
 10005 5512 8D C3 9D			sta YP2
 10006 5515 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10007 5517 8D C4 9D			sta YP2+1
 10008
 10009 				; optimize OK (service.pas), line = 1766
 10010
 10011 551A AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10012 5524 A0 00			ldy #$00
 10013 5526 B1 84			lda (:bp2),y
 10014 5528 8D AD 9D			sta XK
 10015 552B C8				iny
 10016 552C B1 84			lda (:bp2),y
 10017 552E 8D AE 9D			sta XK+1
 10018
 10019 				; optimize OK (service.pas), line = 1767
 10020
 10021 5531 AC A2 9D 84 84 AC + 	mwy Y1 :bp2
 10022 553B A0 00			ldy #$00
 10023 553D B1 84			lda (:bp2),y
 10024 553F 8D AF 9D			sta YK
 10025 5542 C8				iny
 10026 5543 B1 84			lda (:bp2),y
 10027 5545 8D B0 9D			sta YK+1
 10028
 10029 				; optimize OK (service.pas), line = 1768
 10030
 10031 5548 AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10032 5552 A0 00			ldy #$00
 10033 5554 B1 84			lda (:bp2),y
 10034 5556 8D B1 9D			sta XJ
 10035 5559 C8				iny
 10036 555A B1 84			lda (:bp2),y
 10037 555C 8D B2 9D			sta XJ+1
 10038
 10039 				; optimize OK (service.pas), line = 1769
 10040
 10041 555F AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10042 5569 A0 00			ldy #$00
 10043 556B B1 84			lda (:bp2),y
 10044 556D 8D B3 9D			sta YJ
 10045 5570 C8				iny
 10046 5571 B1 84			lda (:bp2),y
 10047 5573 8D B4 9D			sta YJ+1
 10048
 10049 				; optimize OK (service.pas), line = 1771
 10050
 10051 5576 AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10052 5580 A0 00			ldy #$00
 10053 5582 B1 84			lda (:bp2),y
 10054 5584 8D B5 9D			sta XH
 10055 5587 C8				iny
 10056 5588 B1 84			lda (:bp2),y
 10057 558A 8D B6 9D			sta XH+1
 10058
 10059 				; optimize OK (service.pas), line = 1772
 10060
 10061 558D AC A2 9D 84 84 AC + 	mwy Y1 :bp2
 10062 5597 A0 00			ldy #$00
 10063 5599 B1 84			lda (:bp2),y
 10064 559B 8D B7 9D			sta YH
 10065 559E C8				iny
 10066 559F B1 84			lda (:bp2),y
 10067 55A1 8D B8 9D			sta YH+1
 10068
 10069 				; optimize OK (service.pas), line = 1773
 10070
 10071 55A4 AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10072 55AE A0 00			ldy #$00
 10073 55B0 B1 84			lda (:bp2),y
 10074 55B2 8D B9 9D			sta XN
 10075 55B5 C8				iny
 10076 55B6 B1 84			lda (:bp2),y
 10077 55B8 8D BA 9D			sta XN+1
 10078
 10079 				; optimize OK (service.pas), line = 1774
 10080
 10081 55BB AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10082 55C5 A0 00			ldy #$00
 10083 55C7 B1 84			lda (:bp2),y
 10084 55C9 8D BB 9D			sta YN
 10085 55CC C8				iny
 10086 55CD B1 84			lda (:bp2),y
 10087 55CF 8D BC 9D			sta YN+1
 10088
 10089 				; optimize OK (service.pas), line = 1781
 10090
 10091 55D2 AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10092 55DC A0 00			ldy #$00
 10093 55DE B1 84			lda (:bp2),y
 10094 55E0 85 9F			sta :STACKORIGIN+9
 10095 55E2 C8				iny
 10096 55E3 B1 84			lda (:bp2),y
 10097 55E5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10098 55E7 AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10099 55F1 A0 00			ldy #$00
 10100 55F3 B1 84			lda (:bp2),y
 10101 55F5 85 A0			sta :STACKORIGIN+10
 10102 55F7 C8				iny
 10103 55F8 B1 84			lda (:bp2),y
 10104 55FA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10105 55FC A0 00			ldy #$00
 10106 55FE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10107 5600 10 01			spl
 10108 5602 88				dey
 10109 5603 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10110 5605 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10111 5607 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10112 5609 A0 00			ldy #$00
 10113 560B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 10114 560D 10 01			spl
 10115 560F 88				dey
 10116 5610 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10117 5612 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10118 5614 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10119 5616 A5 9F			lda :STACKORIGIN+9
 10120 5618 38 E5 A0			sub :STACKORIGIN+10
 10121 561B 85 8A			sta SYSTEM.ABS.@010185000.X
 10122 561D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10123 561F E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 10124 5621 85 8B			sta SYSTEM.ABS.@010185000.X+1
 10125 5623 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10126 5625 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 10127 5627 85 8C			sta SYSTEM.ABS.@010185000.X+2
 10128 5629 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10129 562B E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 10130 562D 85 8D			sta SYSTEM.ABS.@010185000.X+3
 10131 562F 20 72 1B			jsr SYSTEM.ABS.@010185000
 10132 5632 E8				inx
 10133 5633 A0 01			ldy #1
 10134 5635				.LOCAL
 10135 5635 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
 10136 5637 38 E9 00			sub #$00
 10137 563A D0 1C			bne L4
 10138 563C A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
 10139 563E C9 00			cmp #$00
 10140 5640 D0 0A			bne L1
 10141 5642 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
 10142 5644 C9 00			cmp #$00
 10143 5646 D0 04			bne L1
 10144 5648 A5 92			lda SYSTEM.ABS.@010185000.RESULT
 10145 564A C9 10			cmp #$10
 10146 564C F0 10		L1	beq L5
 10147 564E B0 04			bcs L3
 10148 5650 A9 FF			lda #$FF
 10149 5652 D0 0A			bne L5
 10150 5654 A9 01		L3	lda #$01
 10151 5656 D0 06			bne L5
 10152 5658 50 04		L4	bvc L5
 10153 565A 49 FF			eor #$FF
 10154 565C 09 01			ora #$01
 10155 565E			L5
 10156 					.ENDL
 10157 565E F0 02			seq
 10158 5660 10 01			bpl @+
 10159 5662 88				dey
 10160 				@
 10161 5663 94 96			sty :STACKORIGIN,x
 10162 5665 AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10163 566F A0 00			ldy #$00
 10164 5671 B1 84			lda (:bp2),y
 10165 5673 85 9F			sta :STACKORIGIN+9
 10166 5675 C8				iny
 10167 5676 B1 84			lda (:bp2),y
 10168 5678 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10169 567A AC A2 9D 84 84 AC + 	mwy Y1 :bp2
 10170 5684 A0 00			ldy #$00
 10171 5686 B1 84			lda (:bp2),y
 10172 5688 85 A0			sta :STACKORIGIN+10
 10173 568A C8				iny
 10174 568B B1 84			lda (:bp2),y
 10175 568D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10176 568F A0 00			ldy #$00
 10177 5691 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10178 5693 10 01			spl
 10179 5695 88				dey
 10180 5696 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10181 5698 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10182 569A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10183 569C A0 00			ldy #$00
 10184 569E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 10185 56A0 10 01			spl
 10186 56A2 88				dey
 10187 56A3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10188 56A5 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10189 56A7 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10190 56A9 A5 9F			lda :STACKORIGIN+9
 10191 56AB 38 E5 A0			sub :STACKORIGIN+10
 10192 56AE 85 8A			sta SYSTEM.ABS.@010185000.X
 10193 56B0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10194 56B2 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 10195 56B4 85 8B			sta SYSTEM.ABS.@010185000.X+1
 10196 56B6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10197 56B8 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 10198 56BA 85 8C			sta SYSTEM.ABS.@010185000.X+2
 10199 56BC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10200 56BE E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 10201 56C0 85 8D			sta SYSTEM.ABS.@010185000.X+3
 10202 56C2 20 72 1B			jsr SYSTEM.ABS.@010185000
 10203 56C5 CA				dex
 10204 56C6 A0 01			ldy #1
 10205 56C8				.LOCAL
 10206 56C8 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
 10207 56CA 38 E9 00			sub #$00
 10208 56CD D0 1C			bne L4
 10209 56CF A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
 10210 56D1 C9 00			cmp #$00
 10211 56D3 D0 0A			bne L1
 10212 56D5 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
 10213 56D7 C9 00			cmp #$00
 10214 56D9 D0 04			bne L1
 10215 56DB A5 92			lda SYSTEM.ABS.@010185000.RESULT
 10216 56DD C9 08			cmp #$08
 10217 56DF F0 10		L1	beq L5
 10218 56E1 B0 04			bcs L3
 10219 56E3 A9 FF			lda #$FF
 10220 56E5 D0 0A			bne L5
 10221 56E7 A9 01		L3	lda #$01
 10222 56E9 D0 06			bne L5
 10223 56EB 50 04		L4	bvc L5
 10224 56ED 49 FF			eor #$FF
 10225 56EF 09 01			ora #$01
 10226 56F1			L5
 10227 					.ENDL
 10228 56F1 F0 02			seq
 10229 56F3 10 01			bpl @+
 10230 56F5 88				dey
 10231 				@
 10232 56F6 98				tya
 10233 56F7 15 97			ora :STACKORIGIN+1,x
 10234 56F9 F0 05			jeq l_17C0
 10235
 10236 				; optimize OK (service.pas), line = 1782
 10237
 10238 56FB A9 01			lda #$01
 10239 56FD 20 9B 2E			jsr FATAL_ERROR
 10240 5700			l_17C0
 10241
 10242 				; optimize OK (service.pas), line = 1785
 10243
 10244 5700 AD BE 9D			lda XP1+1
 10245 5703 CD C2 9D			cmp XP2+1
 10246 5706 D0 06			bne @+
 10247 5708 AD BD 9D			lda XP1
 10248 570B CD C1 9D			cmp XP2
 10249 				@
 10250 570E D0 13			jne l_17E3x
 10251 5710 AD C0 9D			lda YP1+1
 10252 5713 CD C4 9D			cmp YP2+1
 10253 5716 D0 06			bne @+
 10254 5718 AD BF 9D			lda YP1
 10255 571B CD C3 9D			cmp YP2
 10256 				@
 10257 571E D0 03 4C 61 5A		jeq l_17E3
 10258 5723			l_17E3x
 10259
 10260 				; optimize OK (service.pas), line = 1787
 10261
 10262 5723 AD C0 9D			lda YP1+1
 10263 5726 CD C4 9D			cmp YP2+1
 10264 5729 D0 06			bne @+
 10265 572B AD BF 9D			lda YP1
 10266 572E CD C3 9D			cmp YP2
 10267 				@
 10268 5731 D0 03 4C 6C 58		jeq l_17F6
 10269
 10270 				; optimize OK (service.pas), line = 1789
 10271
 10272 5736 AD C9 9D			lda COLLISION
 10273 5739 09 01			ora #$01
 10274 573B 8D C9 9D			sta COLLISION
 10275
 10276 				; --- WhileProlog
 10277 573E 4C 59 58			jmp l_1803
 10278 5741			l_1804
 10279
 10280 				; optimize OK (service.pas), line = 1793
 10281
 10282 5741 AD B5 9D			lda XH
 10283 5744 85 9F			sta :STACKORIGIN+9
 10284 5746 A0 00			ldy #$00
 10285 5748 AD B6 9D			lda XH+1
 10286 574B 10 01			spl
 10287 574D 88				dey
 10288 574E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10289 5750 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10290 5752 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10291 5754 AD B9 9D			lda XN
 10292 5757 85 A0			sta :STACKORIGIN+10
 10293 5759 A0 00			ldy #$00
 10294 575B AD BA 9D			lda XN+1
 10295 575E 10 01			spl
 10296 5760 88				dey
 10297 5761 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10298 5763 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10299 5765 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10300 5767 A5 9F			lda :STACKORIGIN+9
 10301 5769 18 65 A0			add :STACKORIGIN+10
 10302 576C 85 9F			sta :STACKORIGIN+9
 10303 576E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10304 5770 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10305 5772 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10306 5774 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10307 5776 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10308 5778 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10309 577A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10310 577C 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10311 577E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10312 5780 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10313 5782 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10314 5784 66 9F			ror :STACKORIGIN+9
 10315 5786 A5 9F			lda :STACKORIGIN+9
 10316 5788 8D A9 9D			sta X
 10317 578B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10318 578D 8D AA 9D			sta X+1
 10319
 10320 				; optimize OK (service.pas), line = 1794
 10321
 10322 5790 AD B7 9D			lda YH
 10323 5793 85 9F			sta :STACKORIGIN+9
 10324 5795 A0 00			ldy #$00
 10325 5797 AD B8 9D			lda YH+1
 10326 579A 10 01			spl
 10327 579C 88				dey
 10328 579D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10329 579F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10330 57A1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10331 57A3 AD BB 9D			lda YN
 10332 57A6 85 A0			sta :STACKORIGIN+10
 10333 57A8 A0 00			ldy #$00
 10334 57AA AD BC 9D			lda YN+1
 10335 57AD 10 01			spl
 10336 57AF 88				dey
 10337 57B0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10338 57B2 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10339 57B4 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10340 57B6 A5 9F			lda :STACKORIGIN+9
 10341 57B8 18 65 A0			add :STACKORIGIN+10
 10342 57BB 85 9F			sta :STACKORIGIN+9
 10343 57BD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10344 57BF 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10345 57C1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10346 57C3 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10347 57C5 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10348 57C7 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10349 57C9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10350 57CB 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10351 57CD 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10352 57CF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10353 57D1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10354 57D3 66 9F			ror :STACKORIGIN+9
 10355 57D5 A5 9F			lda :STACKORIGIN+9
 10356 57D7 8D AB 9D			sta Y
 10357 57DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10358 57DC 8D AC 9D			sta Y+1
 10359
 10360 				; optimize OK (service.pas), line = 1796
 10361
 10362 57DF AD AB 9D			lda Y
 10363 57E2 85 9F			sta :STACKORIGIN+9
 10364 57E4 A0 00			ldy #$00
 10365 57E6 AD AC 9D			lda Y+1
 10366 57E9 10 01			spl
 10367 57EB 88				dey
 10368 57EC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10369 57EE 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10370 57F0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10371 57F2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10372 57F4 66 9F			ror :STACKORIGIN+9
 10373 57F6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10374 57F8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10375 57FA 66 9F			ror :STACKORIGIN+9
 10376 57FC 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10377 57FE 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10378 5800 66 9F			ror :STACKORIGIN+9
 10379 5802 A5 9F			lda :STACKORIGIN+9
 10380 5804 8D C7 9D			sta YP
 10381 5807 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10382 5809 8D C8 9D			sta YP+1
 10383
 10384 				; optimize OK (service.pas), line = 1798
 10385
 10386 580C CD C0 9D			cmp YP1+1
 10387 580F D0 06			bne @+
 10388 5811 AD C7 9D			lda YP
 10389 5814 CD BF 9D			cmp YP1
 10390 				@
 10391 5817 D0 18			jne l_183B
 10392
 10393 				; optimize OK (service.pas), line = 1800
 10394
 10395 5819 AD A9 9D			lda X
 10396 581C 8D B5 9D			sta XH
 10397 581F AD AA 9D			lda X+1
 10398 5822 8D B6 9D			sta XH+1
 10399
 10400 				; optimize OK (service.pas), line = 1801
 10401
 10402 5825 AD AB 9D			lda Y
 10403 5828 8D B7 9D			sta YH
 10404 582B AD AC 9D			lda Y+1
 10405 582E 8D B8 9D			sta YH+1
 10406 5831			l_183B
 10407
 10408 				; optimize OK (service.pas), line = 1804
 10409
 10410 5831 AD C8 9D			lda YP+1
 10411 5834 CD C4 9D			cmp YP2+1
 10412 5837 D0 06			bne @+
 10413 5839 AD C7 9D			lda YP
 10414 583C CD C3 9D			cmp YP2
 10415 				@
 10416 583F D0 18			jne l_185A
 10417
 10418 				; optimize OK (service.pas), line = 1806
 10419
 10420 5841 AD A9 9D			lda X
 10421 5844 8D B9 9D			sta XN
 10422 5847 AD AA 9D			lda X+1
 10423 584A 8D BA 9D			sta XN+1
 10424
 10425 				; optimize OK (service.pas), line = 1807
 10426
 10427 584D AD AB 9D			lda Y
 10428 5850 8D BB 9D			sta YN
 10429 5853 AD AC 9D			lda Y+1
 10430 5856 8D BC 9D			sta YN+1
 10431 5859			l_185A
 10432 5859			l_1803
 10433
 10434 				; optimize OK (service.pas), line = 1791
 10435
 10436 5859 AD BB 9D			lda YN
 10437 585C 29 07			and #$07
 10438 585E F0 0C			jeq l_1804w
 10439 5860 AD BB 9D			lda YN
 10440 5863 29 07			and #$07
 10441 5865 C9 07			cmp #$07
 10442 5867 F0 03 4C 41 57		jne l_1804
 10443 586C			l_1804w
 10444 586C			l_17F6
 10445
 10446 				; optimize OK (service.pas), line = 1813
 10447
 10448 586C AD BE 9D			lda XP1+1
 10449 586F CD C2 9D			cmp XP2+1
 10450 5872 D0 06			bne @+
 10451 5874 AD BD 9D			lda XP1
 10452 5877 CD C1 9D			cmp XP2
 10453 				@
 10454 587A D0 03 4C BB 59		jeq l_1899
 10455
 10456 				; optimize OK (service.pas), line = 1815
 10457
 10458 587F AD C9 9D			lda COLLISION
 10459 5882 09 02			ora #$02
 10460 5884 8D C9 9D			sta COLLISION
 10461
 10462 				; --- WhileProlog
 10463 5887 4C A8 59			jmp l_18A6
 10464 588A			l_18A7
 10465
 10466 				; optimize OK (service.pas), line = 1819
 10467
 10468 588A AD AD 9D			lda XK
 10469 588D 85 9F			sta :STACKORIGIN+9
 10470 588F A0 00			ldy #$00
 10471 5891 AD AE 9D			lda XK+1
 10472 5894 10 01			spl
 10473 5896 88				dey
 10474 5897 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10475 5899 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10476 589B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10477 589D AD B1 9D			lda XJ
 10478 58A0 85 A0			sta :STACKORIGIN+10
 10479 58A2 A0 00			ldy #$00
 10480 58A4 AD B2 9D			lda XJ+1
 10481 58A7 10 01			spl
 10482 58A9 88				dey
 10483 58AA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10484 58AC 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10485 58AE 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10486 58B0 A5 9F			lda :STACKORIGIN+9
 10487 58B2 18 65 A0			add :STACKORIGIN+10
 10488 58B5 85 9F			sta :STACKORIGIN+9
 10489 58B7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10490 58B9 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10491 58BB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10492 58BD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10493 58BF 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10494 58C1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10495 58C3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10496 58C5 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10497 58C7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10498 58C9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10499 58CB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10500 58CD 66 9F			ror :STACKORIGIN+9
 10501 58CF A5 9F			lda :STACKORIGIN+9
 10502 58D1 8D A9 9D			sta X
 10503 58D4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10504 58D6 8D AA 9D			sta X+1
 10505
 10506 				; optimize OK (service.pas), line = 1820
 10507
 10508 58D9 AD AF 9D			lda YK
 10509 58DC 85 9F			sta :STACKORIGIN+9
 10510 58DE A0 00			ldy #$00
 10511 58E0 AD B0 9D			lda YK+1
 10512 58E3 10 01			spl
 10513 58E5 88				dey
 10514 58E6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10515 58E8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10516 58EA 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10517 58EC AD B3 9D			lda YJ
 10518 58EF 85 A0			sta :STACKORIGIN+10
 10519 58F1 A0 00			ldy #$00
 10520 58F3 AD B4 9D			lda YJ+1
 10521 58F6 10 01			spl
 10522 58F8 88				dey
 10523 58F9 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10524 58FB 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10525 58FD 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10526 58FF A5 9F			lda :STACKORIGIN+9
 10527 5901 18 65 A0			add :STACKORIGIN+10
 10528 5904 85 9F			sta :STACKORIGIN+9
 10529 5906 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10530 5908 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10531 590A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10532 590C A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10533 590E 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10534 5910 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10535 5912 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10536 5914 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10537 5916 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10538 5918 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10539 591A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10540 591C 66 9F			ror :STACKORIGIN+9
 10541 591E A5 9F			lda :STACKORIGIN+9
 10542 5920 8D AB 9D			sta Y
 10543 5923 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10544 5925 8D AC 9D			sta Y+1
 10545
 10546 				; optimize OK (service.pas), line = 1822
 10547
 10548 5928 AD A9 9D			lda X
 10549 592B 85 9F			sta :STACKORIGIN+9
 10550 592D A0 00			ldy #$00
 10551 592F AD AA 9D			lda X+1
 10552 5932 10 01			spl
 10553 5934 88				dey
 10554 5935 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10555 5937 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10556 5939 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10557 593B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10558 593D 66 9F			ror :STACKORIGIN+9
 10559 593F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10560 5941 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10561 5943 66 9F			ror :STACKORIGIN+9
 10562 5945 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10563 5947 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10564 5949 66 9F			ror :STACKORIGIN+9
 10565 594B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10566 594D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10567 594F 66 9F			ror :STACKORIGIN+9
 10568 5951 A5 9F			lda :STACKORIGIN+9
 10569 5953 8D C5 9D			sta XP
 10570 5956 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10571 5958 8D C6 9D			sta XP+1
 10572
 10573 				; optimize OK (service.pas), line = 1824
 10574
 10575 595B CD BE 9D			cmp XP1+1
 10576 595E D0 06			bne @+
 10577 5960 AD C5 9D			lda XP
 10578 5963 CD BD 9D			cmp XP1
 10579 				@
 10580 5966 D0 18			jne l_18DE
 10581
 10582 				; optimize OK (service.pas), line = 1826
 10583
 10584 5968 AD A9 9D			lda X
 10585 596B 8D AD 9D			sta XK
 10586 596E AD AA 9D			lda X+1
 10587 5971 8D AE 9D			sta XK+1
 10588
 10589 				; optimize OK (service.pas), line = 1827
 10590
 10591 5974 AD AB 9D			lda Y
 10592 5977 8D AF 9D			sta YK
 10593 597A AD AC 9D			lda Y+1
 10594 597D 8D B0 9D			sta YK+1
 10595 5980			l_18DE
 10596
 10597 				; optimize OK (service.pas), line = 1830
 10598
 10599 5980 AD C6 9D			lda XP+1
 10600 5983 CD C2 9D			cmp XP2+1
 10601 5986 D0 06			bne @+
 10602 5988 AD C5 9D			lda XP
 10603 598B CD C1 9D			cmp XP2
 10604 				@
 10605 598E D0 18			jne l_18FD
 10606
 10607 				; optimize OK (service.pas), line = 1832
 10608
 10609 5990 AD A9 9D			lda X
 10610 5993 8D B1 9D			sta XJ
 10611 5996 AD AA 9D			lda X+1
 10612 5999 8D B2 9D			sta XJ+1
 10613
 10614 				; optimize OK (service.pas), line = 1833
 10615
 10616 599C AD AB 9D			lda Y
 10617 599F 8D B3 9D			sta YJ
 10618 59A2 AD AC 9D			lda Y+1
 10619 59A5 8D B4 9D			sta YJ+1
 10620 59A8			l_18FD
 10621 59A8			l_18A6
 10622
 10623 				; optimize OK (service.pas), line = 1817
 10624
 10625 59A8 AD B1 9D			lda XJ
 10626 59AB 29 0F			and #$0F
 10627 59AD F0 0C			jeq l_18A7w
 10628 59AF AD B1 9D			lda XJ
 10629 59B2 29 0F			and #$0F
 10630 59B4 C9 0F			cmp #$0F
 10631 59B6 F0 03 4C 8A 58		jne l_18A7
 10632 59BB			l_18A7w
 10633 59BB			l_1899
 10634
 10635 				; optimize OK (service.pas), line = 1844
 10636
 10637 59BB AD C9 9D			lda COLLISION
 10638 59BE C9 01			cmp #$01
 10639 59C0 D0 03			jne l_193C
 10640 				; optimize OK (service.pas), line = 1846
 10641 				; optimize OK (service.pas), line = 1847
 10642 59C2 4C 30 5A			jmp l_1950
 10643 59C5			l_193C
 10644
 10645 				; optimize OK (service.pas), line = 1849
 10646
 10647 59C5 AD C9 9D			lda COLLISION
 10648 59C8 C9 02			cmp #$02
 10649 59CA D0 2F			jne l_1962
 10650
 10651 				; optimize OK (service.pas), line = 1851
 10652
 10653 59CC AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10654 59D6 A0 00			ldy #$00
 10655 59D8 AD B1 9D			lda XJ
 10656 59DB 91 84			sta (:bp2),y
 10657 59DD C8				iny
 10658 59DE AD B2 9D			lda XJ+1
 10659 59E1 91 84			sta (:bp2),y
 10660
 10661 				; optimize OK (service.pas), line = 1852
 10662
 10663 59E3 AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10664 59ED A0 00			ldy #$00
 10665 59EF AD B3 9D			lda YJ
 10666 59F2 91 84			sta (:bp2),y
 10667 59F4 C8				iny
 10668 59F5 AD B4 9D			lda YJ+1
 10669 59F8 4C 5C 5A			jmp l_1976
 10670 59FB			l_1962
 10671
 10672 				; optimize OK (service.pas), line = 1854
 10673
 10674 59FB AD C9 9D			lda COLLISION
 10675 59FE C9 03			cmp #$03
 10676 5A00 D0 5C			jne l_1988
 10677
 10678 				; optimize OK (service.pas), line = 1856
 10679
 10680 5A02 AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10681 5A0C A0 00			ldy #$00
 10682 5A0E AD B1 9D			lda XJ
 10683 5A11 91 84			sta (:bp2),y
 10684 5A13 C8				iny
 10685 5A14 AD B2 9D			lda XJ+1
 10686 5A17 91 84			sta (:bp2),y
 10687
 10688 				; optimize OK (service.pas), line = 1857
 10689
 10690 5A19 AC A2 9D 84 84 AC + 	mwy Y1 :bp2
 10691 5A23 A0 00			ldy #$00
 10692 5A25 AD B3 9D			lda YJ
 10693 5A28 91 84			sta (:bp2),y
 10694 5A2A C8				iny
 10695 5A2B AD B4 9D			lda YJ+1
 10696 5A2E 91 84			sta (:bp2),y
 10697 5A30			l_1950
 10698
 10699 				; optimize OK (service.pas), line = 1858
 10700
 10701 5A30 AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10702 5A3A A0 00			ldy #$00
 10703 5A3C AD B9 9D			lda XN
 10704 5A3F 91 84			sta (:bp2),y
 10705 5A41 C8				iny
 10706 5A42 AD BA 9D			lda XN+1
 10707 5A45 91 84			sta (:bp2),y
 10708
 10709 				; optimize OK (service.pas), line = 1859
 10710
 10711 5A47 AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10712 5A51 A0 00			ldy #$00
 10713 5A53 AD BB 9D			lda YN
 10714 5A56 91 84			sta (:bp2),y
 10715 5A58 C8				iny
 10716 5A59 AD BC 9D			lda YN+1
 10717 5A5C			l_1976
 10718 5A5C 91 84			sta (:bp2),y
 10719 5A5E			l_1988
 10720 5A5E 4C 66 5A			jmp l_19A8
 10721 5A61			l_17E3
 10722
 10723 				; optimize OK (service.pas), line = 1864
 10724
 10725 5A61 A9 02			lda #$02
 10726 5A63 20 9B 2E			jsr FATAL_ERROR
 10727 5A66			l_19A8
 10728
 10729 				; optimize OK (service.pas), line = 1867
 10730
 10731 5A66 AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10732 5A70 A0 00			ldy #$00
 10733 5A72 B1 84			lda (:bp2),y
 10734 5A74 38 E9 10			sub #$10
 10735 5A77 91 84			sta (:bp2),y
 10736 5A79 C8				iny
 10737 5A7A B1 84			lda (:bp2),y
 10738 5A7C E9 00			sbc #$00
 10739 5A7E 91 84			sta (:bp2),y
 10740
 10741 				; optimize OK (service.pas), line = 1868
 10742
 10743 5A80 AC A2 9D 84 84 AC + 	mwy Y1 :bp2
 10744 5A8A A0 00			ldy #$00
 10745 5A8C B1 84			lda (:bp2),y
 10746 5A8E 38 E9 18			sub #$18
 10747 5A91 91 84			sta (:bp2),y
 10748 5A93 C8				iny
 10749 5A94 B1 84			lda (:bp2),y
 10750 5A96 E9 00			sbc #$00
 10751 5A98 91 84			sta (:bp2),y
 10752
 10753 				; optimize OK (service.pas), line = 1869
 10754
 10755 5A9A AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10756 5AA4 A0 00			ldy #$00
 10757 5AA6 B1 84			lda (:bp2),y
 10758 5AA8 38 E9 10			sub #$10
 10759 5AAB 91 84			sta (:bp2),y
 10760 5AAD C8				iny
 10761 5AAE B1 84			lda (:bp2),y
 10762 5AB0 E9 00			sbc #$00
 10763 5AB2 91 84			sta (:bp2),y
 10764
 10765 				; optimize OK (service.pas), line = 1870
 10766
 10767 5AB4 AC A6 9D 84 84 AC + 	mwy Y2 :bp2
 10768 5ABE A0 00			ldy #$00
 10769 5AC0 B1 84			lda (:bp2),y
 10770 5AC2 38 E9 18			sub #$18
 10771 5AC5 91 84			sta (:bp2),y
 10772 5AC7 C8				iny
 10773 5AC8 B1 84			lda (:bp2),y
 10774 5ACA E9 00			sbc #$00
 10775 5ACC 91 84			sta (:bp2),y
 10776
 10777 				; optimize OK (service.pas), line = 1873
 10778
 10779 5ACE AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10780 5AD8 A0 00			ldy #$00
 10781 5ADA B1 84			lda (:bp2),y
 10782 5ADC 8D D1 9C			sta MAX.B
 10783 5ADF C8				iny
 10784 5AE0 B1 84			lda (:bp2),y
 10785 5AE2 8D D2 9C			sta MAX.B+1
 10786 5AE5 A9 00			lda #$00
 10787 5AE7 8D CF 9C			sta MAX.A
 10788 5AEA 8D D0 9C			sta MAX.A+1
 10789 5AED 20 45 2E			jsr MAX
 10790 5AF0 A9 CF			lda #$CF
 10791 5AF2 8D D5 9C			sta MIN.A
 10792 5AF5 A9 00			lda #$00
 10793 5AF7 8D D6 9C			sta MIN.A+1
 10794 5AFA AD D3 9C			lda MAX.RESULT
 10795 5AFD 8D D7 9C			sta MIN.B
 10796 5B00 AD D4 9C			lda MAX.RESULT+1
 10797 5B03 8D D8 9C			sta MIN.B+1
 10798 5B06 20 70 2E			jsr MIN
 10799 5B09 AC A0 9D 84 84 AC + 	mwy X1 :bp2
 10800 5B13 A0 00			ldy #$00
 10801 5B15 AD D9 9C			lda MIN.RESULT
 10802 5B18 91 84			sta (:bp2),y
 10803 5B1A C8				iny
 10804 5B1B AD DA 9C			lda MIN.RESULT+1
 10805 5B1E 91 84			sta (:bp2),y
 10806
 10807 				; optimize OK (service.pas), line = 1874
 10808
 10809 5B20 AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10810 5B2A A0 00			ldy #$00
 10811 5B2C B1 84			lda (:bp2),y
 10812 5B2E 8D D1 9C			sta MAX.B
 10813 5B31 C8				iny
 10814 5B32 B1 84			lda (:bp2),y
 10815 5B34 8D D2 9C			sta MAX.B+1
 10816 5B37 A9 00			lda #$00
 10817 5B39 8D CF 9C			sta MAX.A
 10818 5B3C 8D D0 9C			sta MAX.A+1
 10819 5B3F 20 45 2E			jsr MAX
 10820 5B42 A9 CF			lda #$CF
 10821 5B44 8D D5 9C			sta MIN.A
 10822 5B47 A9 00			lda #$00
 10823 5B49 8D D6 9C			sta MIN.A+1
 10824 5B4C AD D3 9C			lda MAX.RESULT
 10825 5B4F 8D D7 9C			sta MIN.B
 10826 5B52 AD D4 9C			lda MAX.RESULT+1
 10827 5B55 8D D8 9C			sta MIN.B+1
 10828 5B58 20 70 2E			jsr MIN
 10829 5B5B AC A4 9D 84 84 AC + 	mwy X2 :bp2
 10830 5B65 A0 00			ldy #$00
 10831 5B67 AD D9 9C			lda MIN.RESULT
 10832 5B6A 91 84			sta (:bp2),y
 10833 5B6C C8				iny
 10834 5B6D AD DA 9C			lda MIN.RESULT+1
 10835 5B70 91 84			sta (:bp2),y
 10836
 10837 				; optimize OK (service.pas), line = 1881
 10838
 10839 5B72 AD C9 9D			lda COLLISION
 10840 5B75 8D A8 9D			sta RESULT
 10841 5B78			@exit
 10842
 10843 				; ------------------------------------------------------------
 10844
 10845 = 9DA0			X1	= DATAORIGIN+$0614
 10846 = 9DA2			Y1	= DATAORIGIN+$0616
 10847 = 9DA4			X2	= DATAORIGIN+$0618
 10848 = 9DA6			Y2	= DATAORIGIN+$061A
 10849 = 9DA8			RESULT	= DATAORIGIN+$061C
 10850 = 9DA9			X	= DATAORIGIN+$061D
 10851 = 9DAB			Y	= DATAORIGIN+$061F
 10852 = 9DAD			XK	= DATAORIGIN+$0621
 10853 = 9DAF			YK	= DATAORIGIN+$0623
 10854 = 9DB1			XJ	= DATAORIGIN+$0625
 10855 = 9DB3			YJ	= DATAORIGIN+$0627
 10856 = 9DB5			XH	= DATAORIGIN+$0629
 10857 = 9DB7			YH	= DATAORIGIN+$062B
 10858 = 9DB9			XN	= DATAORIGIN+$062D
 10859 = 9DBB			YN	= DATAORIGIN+$062F
 10860 = 9DBD			XP1	= DATAORIGIN+$0631
 10861 = 9DBF			YP1	= DATAORIGIN+$0633
 10862 = 9DC1			XP2	= DATAORIGIN+$0635
 10863 = 9DC3			YP2	= DATAORIGIN+$0637
 10864 = 9DC5			XP	= DATAORIGIN+$0639
 10865 = 9DC7			YP	= DATAORIGIN+$063B
 10866 = 9DC9			COLLISION	= DATAORIGIN+$063D
 10867
 10868 = 9DA0			@VarData	= X1
 10869 = 0029			@VarDataSize	= 41
 10870
 10871 5B78 60				rts						; ret
 10872 				.endl
 10873
 10874 5B79			.local	SHOOT_BLOCK					; PROCEDURE
 10875
 10876 				; optimize OK (service.pas), line = 1892
 10877
 10878 5B79 AD CB 9D			lda XB+1
 10879 5B7C 10 03 4C 8A 5D		jmi l_19FC
 10880 5B81 AD CA 9D			lda XB
 10881 5B84 C9 0D			cmp #$0D
 10882 5B86 AD CB 9D			lda XB+1
 10883 5B89 E9 00			sbc #$00
 10884 5B8B 50 02			svc
 10885 5B8D 49 80			eor #$80
 10886 5B8F 30 03 4C 8A 5D		jpl l_19FC
 10887 5B94 AD CD 9D			lda YB+1
 10888 5B97 10 03 4C 8A 5D		jmi l_19FC
 10889 5B9C AD CC 9D			lda YB
 10890 5B9F C9 0F			cmp #$0F
 10891 5BA1 AD CD 9D			lda YB+1
 10892 5BA4 E9 00			sbc #$00
 10893 5BA6 50 02			svc
 10894 5BA8 49 80			eor #$80
 10895 5BAA 30 03 4C 8A 5D		jpl l_19FC
 10896
 10897 				; optimize OK (service.pas), line = 1895
 10898
 10899 5BAF AD CC 9D			lda YB
 10900 5BB2 0A				asl @
 10901 5BB3 0A				asl @
 10902 5BB4 0A				asl @
 10903 5BB5 0A				asl @
 10904 5BB6 18 6D CA 9D			add XB
 10905 5BBA 8D D2 9D			sta I
 10906
 10907 				; optimize OK (service.pas), line = 1897
 10908
 10909 5BBD A8				tay
 10910 5BBE B9 00 DB			lda adr.WALL,y
 10911 5BC1 D0 03 4C 8A 5D		jeq l_1A20
 10912
 10913 				; optimize OK (service.pas), line = 1899
 10914
 10915 5BC6 C9 0A			cmp #$0A
 10916 5BC8 90 03 4C 00 5D		jcs l_1A36
 10917
 10918 				; optimize OK (service.pas), line = 1901
 10919
 10920 5BCD AD CA 9D			lda XB
 10921 5BD0 8D 7E 9D			sta REMOVE_BLOCK.XA
 10922 5BD3 AD CC 9D			lda YB
 10923 5BD6 8D 7F 9D			sta REMOVE_BLOCK.YA
 10924 5BD9 20 45 48			jsr REMOVE_BLOCK
 10925
 10926 				; optimize FAIL (0, service.pas), line = 1902
 10927
 10928 5BDC CE 44 99			dec REMAIN_BLK
 10929
 10930 				; optimize OK (service.pas), line = 1906
 10931
 10932 5BDF AD 61 99			lda CUR_PLAYER
 10933 5BE2 0A				asl @
 10934 5BE3 0A				asl @
 10935 5BE4 85 9F			sta :STACKORIGIN+9
 10936 5BE6 AC D2 9D			ldy I
 10937 5BE9 B9 00 DB			lda adr.WALL,y
 10938 5BEC 0A				asl @
 10939 5BED A8				tay
 10940 5BEE B9 99 10			lda adr.SCORE_WALL,y
 10941 5BF1 85 A0			sta :STACKORIGIN+10
 10942 5BF3 B9 9A 10			lda adr.SCORE_WALL+1,y
 10943 5BF6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10944 5BF8 A4 9F			ldy :STACKORIGIN+9
 10945 5BFA B9 46 99			lda adr.SCORE.PLAYER,y
 10946 5BFD 18 65 A0			add :STACKORIGIN+10
 10947 5C00 99 46 99			sta adr.SCORE.PLAYER,y
 10948 5C03 B9 47 99			lda adr.SCORE.PLAYER+1,y
 10949 5C06 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10950 5C08 99 47 99			sta adr.SCORE.PLAYER+1,y
 10951 5C0B B9 48 99			lda adr.SCORE.PLAYER+2,y
 10952 5C0E 69 00			adc #$00
 10953 5C10 99 48 99			sta adr.SCORE.PLAYER+2,y
 10954 5C13 B9 49 99			lda adr.SCORE.PLAYER+3,y
 10955 5C16 69 00			adc #$00
 10956 5C18 99 49 99			sta adr.SCORE.PLAYER+3,y
 10957
 10958 				; optimize OK (service.pas), line = 1908
 10959
 10960 5C1B A9 2C			lda #$2C
 10961 5C1D 8D D2 97			sta SYSTEM.RANDOM.@010184000.RANGE
 10962 5C20 A9 01			lda #$01
 10963 5C22 8D D3 97			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10964 5C25 20 38 26			jsr SYSTEM.RANDOM.@010184000
 10965 5C28 AD 71 99			lda LETT.INCOMING
 10966 5C2B 18 6D D4 97			add SYSTEM.RANDOM.@010184000.RESULT
 10967 5C2F 8D 71 99			sta LETT.INCOMING
 10968 5C32 AD 72 99			lda LETT.INCOMING+1
 10969 5C35 6D D5 97			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10970 5C38 8D 72 99			sta LETT.INCOMING+1
 10971
 10972 				; optimize OK (service.pas), line = 1910
 10973
 10974 5C3B AD CA 9D			lda XB
 10975 5C3E 85 9F			sta :STACKORIGIN+9
 10976 5C40 A0 00			ldy #$00
 10977 5C42 AD CB 9D			lda XB+1
 10978 5C45 10 01			spl
 10979 5C47 88				dey
 10980 5C48 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10981 5C4A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10982 5C4C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10983 5C4E 06 9F			asl :STACKORIGIN+9
 10984 5C50 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10985 5C52 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10986 5C54 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10987 5C56 06 9F			asl :STACKORIGIN+9
 10988 5C58 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10989 5C5A 06 9F			asl :STACKORIGIN+9
 10990 5C5C 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10991 5C5E 06 9F			asl :STACKORIGIN+9
 10992 5C60 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10993 5C62 A5 9F			lda :STACKORIGIN+9
 10994 5C64 18 69 09			add #$09
 10995 5C67 8D 73 99			sta LETT.NEXTX
 10996 5C6A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10997 5C6C 69 00			adc #$00
 10998 5C6E 8D 74 99			sta LETT.NEXTX+1
 10999
 11000 				; optimize OK (service.pas), line = 1911
 11001
 11002 5C71 AD CC 9D			lda YB
 11003 5C74 85 9F			sta :STACKORIGIN+9
 11004 5C76 A0 00			ldy #$00
 11005 5C78 AD CD 9D			lda YB+1
 11006 5C7B 10 01			spl
 11007 5C7D 88				dey
 11008 5C7E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11009 5C80 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11010 5C82 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11011 5C84 A5 9F			lda :STACKORIGIN+9
 11012 5C86 18 69 01			add #$01
 11013 5C89 85 9F			sta :STACKORIGIN+9
 11014 5C8B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11015 5C8D 69 00			adc #$00
 11016 5C8F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11017 5C91 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11018 5C93 69 00			adc #$00
 11019 5C95 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11020 5C97 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11021 5C99 69 00			adc #$00
 11022 5C9B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11023 5C9D 06 9F			asl :STACKORIGIN+9
 11024 5C9F 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11025 5CA1 06 9F			asl :STACKORIGIN+9
 11026 5CA3 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11027 5CA5 06 9F			asl :STACKORIGIN+9
 11028 5CA7 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11029 5CA9 A5 9F			lda :STACKORIGIN+9
 11030 5CAB 18 69 16			add #$16
 11031 5CAE 8D 75 99			sta LETT.NEXTY
 11032 5CB1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11033 5CB3 69 00			adc #$00
 11034 5CB5 8D 76 99			sta LETT.NEXTY+1
 11035
 11036 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1912
 11037
 11038 5CB8 20 3F 31			jsr RANDOM_LETTER_DROP
 11039 5CBB AD EF 9C			lda RANDOM_LETTER_DROP.RESULT
 11040 5CBE 8D 77 99			sta LETT.NEXTTYPE
 11041 5CC1 AD F0 9C			lda RANDOM_LETTER_DROP.RESULT+1
 11042 5CC4 8D 78 99			sta LETT.NEXTTYPE+1
 11043
 11044 				; optimize OK (service.pas), line = 1914
 11045
 11046 5CC7 AC D2 9D			ldy I
 11047 5CCA A9 00			lda #$00
 11048 5CCC 99 00 DB			sta adr.WALL,y
 11049
 11050 				; optimize OK (service.pas), line = 1915
 11051
 11052 5CCF A9 B8			lda #$B8
 11053 5CD1 8D 81 98			sta BALL_BLOCK_SOUND.A
 11054 5CD4 A9 01			lda #$01
 11055 5CD6 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11056 5CD9 A9 03			lda #$03
 11057 5CDB 8D 83 98			sta BALL_BLOCK_SOUND.B
 11058 5CDE A9 00			lda #$00
 11059 5CE0 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 11060 5CE3 20 5D 2B			jsr BALL_BLOCK_SOUND
 11061
 11062 				; optimize OK (service.pas), line = 1916
 11063
 11064 5CE6 AC CE 9D 84 84 AC + 	mwy BALL :bp2
 11065 5CF0 A0 14			ldy #BALL.SBD-DATAORIGIN
 11066 5CF2 A9 00			lda #$00
 11067 5CF4 91 84			sta (:bp2),y
 11068 5CF6 C8				iny
 11069 5CF7 91 84			sta (:bp2),y
 11070
 11071 				; optimize OK (service.pas), line = 1917
 11072
 11073 5CF9 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11074 5CFB 91 84			sta (:bp2),y
 11075 5CFD 4C 8A 5D			jmp l_1A8A
 11076 5D00			l_1A36
 11077
 11078 				; optimize OK (service.pas), line = 1922
 11079
 11080 5D00 AC D2 9D			ldy I
 11081 5D03 B9 00 DB			lda adr.WALL,y
 11082 5D06 29 0F			and #$0F
 11083 5D08 C9 09			cmp #$09
 11084 5D0A D0 45			jne l_1AA3
 11085
 11086 				; optimize OK (service.pas), line = 1924
 11087
 11088 5D0C AC CE 9D 84 84 AC + 	mwy BALL :bp2
 11089 5D16 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11090 5D18 A9 00			lda #$00
 11091 5D1A 91 84			sta (:bp2),y
 11092
 11093 				; optimize OK (service.pas), line = 1925
 11094
 11095 5D1C AC D2 9D			ldy I
 11096 5D1F B9 00 DB			lda adr.WALL,y
 11097 5D22 38 E9 10			sub #$10
 11098 5D25 99 00 DB			sta adr.WALL,y
 11099
 11100 				; optimize OK (service.pas), line = 1927
 11101
 11102 5D28 A9 72			lda #$72
 11103 5D2A 8D 81 98			sta BALL_BLOCK_SOUND.A
 11104 5D2D A9 01			lda #$01
 11105 5D2F 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11106 5D32 A9 04			lda #$04
 11107 5D34 8D 83 98			sta BALL_BLOCK_SOUND.B
 11108 5D37 A9 00			lda #$00
 11109 5D39 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 11110 5D3C 20 5D 2B			jsr BALL_BLOCK_SOUND
 11111
 11112 				; optimize OK (service.pas), line = 1928
 11113
 11114 5D3F AD CA 9D			lda XB
 11115 5D42 8D ED 9C			sta SHINE.XB
 11116 5D45 AD CC 9D			lda YB
 11117 5D48 8D EE 9C			sta SHINE.YB
 11118 5D4B 20 03 31			jsr SHINE
 11119 5D4E 4C 8A 5D			jmp l_1ABD
 11120 5D51			l_1AA3
 11121
 11122 				; optimize OK (service.pas), line = 1932
 11123
 11124 5D51 AC CE 9D 84 84 AC + 	mwy BALL :bp2
 11125 5D5B A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11126 5D5D B1 84			lda (:bp2),y
 11127 5D5F 18 69 01			add #$01
 11128 5D62 91 84			sta (:bp2),y
 11129
 11130 				; optimize OK (service.pas), line = 1933
 11131
 11132 5D64 AD CA 9D			lda XB
 11133 5D67 8D ED 9C			sta SHINE.XB
 11134 5D6A AD CC 9D			lda YB
 11135 5D6D 8D EE 9C			sta SHINE.YB
 11136 5D70 20 03 31			jsr SHINE
 11137
 11138 				; optimize OK (service.pas), line = 1935
 11139
 11140 5D73 A9 C8			lda #$C8
 11141 5D75 8D 81 98			sta BALL_BLOCK_SOUND.A
 11142 5D78 A9 00			lda #$00
 11143 5D7A 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11144 5D7D A9 07			lda #$07
 11145 5D7F 8D 83 98			sta BALL_BLOCK_SOUND.B
 11146 5D82 A9 00			lda #$00
 11147 5D84 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 11148 5D87 20 5D 2B			jsr BALL_BLOCK_SOUND
 11149 5D8A			l_1ABD
 11150 5D8A			l_1A8A
 11151 5D8A			l_1A20
 11152 5D8A			l_19FC
 11153
 11154 				; ------------------------------------------------------------
 11155
 11156 = 9DCA			XB	= DATAORIGIN+$063E
 11157 = 9DCC			YB	= DATAORIGIN+$0640
 11158 = 9DCE			BALL	= DATAORIGIN+$0642
 11159 = 978C			BALL.X	= DATAORIGIN+$0000
 11160 = 978E			BALL.Y	= DATAORIGIN+$0002
 11161 = 9790			BALL.FINEX	= DATAORIGIN+$0004
 11162 = 9792			BALL.FINEY	= DATAORIGIN+$0006
 11163 = 9794			BALL.OLDX	= DATAORIGIN+$0008
 11164 = 9796			BALL.OLDY	= DATAORIGIN+$000A
 11165 = 9798			BALL.SPEED	= DATAORIGIN+$000C
 11166 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
 11167 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
 11168 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
 11169 = 97A0			BALL.SBD	= DATAORIGIN+$0014
 11170 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
 11171 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
 11172 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
 11173 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
 11174 = 97A6			BALL.STM	= DATAORIGIN+$001A
 11175 = 9DD2			I	= DATAORIGIN+$0646
 11176
 11177 = 9DCA			@VarData	= XB
 11178 = 0007			@VarDataSize	= 7
 11179
 11180 5D8A			@exit
 11181 					.ifdef @new
 11182 					lda <@VarData
 11183 					sta :ztmp
 11184 					lda >@VarData
 11185 					ldy #@VarDataSize-1
 11186 					jmp @FreeMem
 11187 					els
 11188 5D8A 60				rts						; ret
 11189 					eif
 11190 				.endl
 11191
 11192 5D8B			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 11193
 11194 				; optimize OK (service.pas), line = 1946
 11195
 11196 5D8B AD D4 9D			lda XB+1
 11197 5D8E 10 03 4C A5 5E		jmi l_1B00
 11198 5D93 AD D3 9D			lda XB
 11199 5D96 C9 0D			cmp #$0D
 11200 5D98 AD D4 9D			lda XB+1
 11201 5D9B E9 00			sbc #$00
 11202 5D9D 50 02			svc
 11203 5D9F 49 80			eor #$80
 11204 5DA1 30 03 4C A5 5E		jpl l_1B00
 11205 5DA6 AD D6 9D			lda YB+1
 11206 5DA9 10 03 4C A5 5E		jmi l_1B00
 11207 5DAE AD D5 9D			lda YB
 11208 5DB1 C9 0F			cmp #$0F
 11209 5DB3 AD D6 9D			lda YB+1
 11210 5DB6 E9 00			sbc #$00
 11211 5DB8 50 02			svc
 11212 5DBA 49 80			eor #$80
 11213 5DBC 30 03 4C A5 5E		jpl l_1B00
 11214
 11215 				; optimize OK (service.pas), line = 1949
 11216
 11217 5DC1 AD D5 9D			lda YB
 11218 5DC4 0A				asl @
 11219 5DC5 0A				asl @
 11220 5DC6 0A				asl @
 11221 5DC7 0A				asl @
 11222 5DC8 18 6D D3 9D			add XB
 11223 5DCC 8D D7 9D			sta I
 11224
 11225 				; optimize OK (service.pas), line = 1951
 11226
 11227 5DCF A8				tay
 11228 5DD0 B9 00 DB			lda adr.WALL,y
 11229 5DD3 D0 03 4C A5 5E		jeq l_1B24
 11230
 11231 				; optimize OK (service.pas), line = 1953
 11232
 11233 5DD8 C9 0A			cmp #$0A
 11234 5DDA B0 65			jcs l_1B3A
 11235
 11236 				; optimize OK (service.pas), line = 1955
 11237
 11238 5DDC AD D3 9D			lda XB
 11239 5DDF 8D 7E 9D			sta REMOVE_BLOCK.XA
 11240 5DE2 AD D5 9D			lda YB
 11241 5DE5 8D 7F 9D			sta REMOVE_BLOCK.YA
 11242 5DE8 20 45 48			jsr REMOVE_BLOCK
 11243
 11244 				; optimize FAIL (0, service.pas), line = 1956
 11245
 11246 5DEB CE 44 99			dec REMAIN_BLK
 11247
 11248 				; optimize OK (service.pas), line = 1957
 11249
 11250 5DEE AD 61 99			lda CUR_PLAYER
 11251 5DF1 0A				asl @
 11252 5DF2 0A				asl @
 11253 5DF3 85 9F			sta :STACKORIGIN+9
 11254 5DF5 AC D7 9D			ldy I
 11255 5DF8 B9 00 DB			lda adr.WALL,y
 11256 5DFB 0A				asl @
 11257 5DFC A8				tay
 11258 5DFD B9 99 10			lda adr.SCORE_WALL,y
 11259 5E00 85 A0			sta :STACKORIGIN+10
 11260 5E02 B9 9A 10			lda adr.SCORE_WALL+1,y
 11261 5E05 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11262 5E07 A4 9F			ldy :STACKORIGIN+9
 11263 5E09 B9 46 99			lda adr.SCORE.PLAYER,y
 11264 5E0C 18 65 A0			add :STACKORIGIN+10
 11265 5E0F 99 46 99			sta adr.SCORE.PLAYER,y
 11266 5E12 B9 47 99			lda adr.SCORE.PLAYER+1,y
 11267 5E15 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 11268 5E17 99 47 99			sta adr.SCORE.PLAYER+1,y
 11269 5E1A B9 48 99			lda adr.SCORE.PLAYER+2,y
 11270 5E1D 69 00			adc #$00
 11271 5E1F 99 48 99			sta adr.SCORE.PLAYER+2,y
 11272 5E22 B9 49 99			lda adr.SCORE.PLAYER+3,y
 11273 5E25 69 00			adc #$00
 11274 5E27 99 49 99			sta adr.SCORE.PLAYER+3,y
 11275
 11276 				; optimize OK (service.pas), line = 1958
 11277
 11278 5E2A AC D7 9D			ldy I
 11279 5E2D A9 00			lda #$00
 11280 5E2F 99 00 DB			sta adr.WALL,y
 11281
 11282 				; optimize OK (service.pas), line = 1959
 11283
 11284 5E32 A9 B8			lda #$B8
 11285 5E34 8D 81 98			sta BALL_BLOCK_SOUND.A
 11286 5E37 A9 01			lda #$01
 11287 5E39 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11288 5E3C A9 03			lda #$03
 11289 5E3E 4C 9A 5E			jmp l_1B62
 11290 5E41			l_1B3A
 11291
 11292 				; optimize OK (service.pas), line = 1964
 11293
 11294 5E41 AC D7 9D			ldy I
 11295 5E44 B9 00 DB			lda adr.WALL,y
 11296 5E47 29 0F			and #$0F
 11297 5E49 C9 09			cmp #$09
 11298 5E4B D0 32			jne l_1B7B
 11299
 11300 				; optimize OK (service.pas), line = 1966
 11301
 11302 5E4D B9 00 DB			lda adr.WALL,y
 11303 5E50 38 E9 10			sub #$10
 11304 5E53 99 00 DB			sta adr.WALL,y
 11305
 11306 				; optimize OK (service.pas), line = 1967
 11307
 11308 5E56 A9 72			lda #$72
 11309 5E58 8D 81 98			sta BALL_BLOCK_SOUND.A
 11310 5E5B A9 01			lda #$01
 11311 5E5D 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11312 5E60 A9 04			lda #$04
 11313 5E62 8D 83 98			sta BALL_BLOCK_SOUND.B
 11314 5E65 A9 00			lda #$00
 11315 5E67 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 11316 5E6A 20 5D 2B			jsr BALL_BLOCK_SOUND
 11317
 11318 				; optimize OK (service.pas), line = 1968
 11319
 11320 5E6D AD D3 9D			lda XB
 11321 5E70 8D ED 9C			sta SHINE.XB
 11322 5E73 AD D5 9D			lda YB
 11323 5E76 8D EE 9C			sta SHINE.YB
 11324 5E79 20 03 31			jsr SHINE
 11325 5E7C 4C A5 5E			jmp l_1B91
 11326 5E7F			l_1B7B
 11327
 11328 				; optimize OK (service.pas), line = 1972
 11329
 11330 5E7F AD D3 9D			lda XB
 11331 5E82 8D ED 9C			sta SHINE.XB
 11332 5E85 AD D5 9D			lda YB
 11333 5E88 8D EE 9C			sta SHINE.YB
 11334 5E8B 20 03 31			jsr SHINE
 11335
 11336 				; optimize OK (service.pas), line = 1973
 11337
 11338 5E8E A9 C8			lda #$C8
 11339 5E90 8D 81 98			sta BALL_BLOCK_SOUND.A
 11340 5E93 A9 00			lda #$00
 11341 5E95 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 11342 5E98 A9 07			lda #$07
 11343 5E9A			l_1B62
 11344 5E9A 8D 83 98			sta BALL_BLOCK_SOUND.B
 11345 5E9D A9 00			lda #$00
 11346 5E9F 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 11347 5EA2 20 5D 2B			jsr BALL_BLOCK_SOUND
 11348 5EA5			l_1B91
 11349 5EA5			l_1B24
 11350 5EA5			l_1B00
 11351
 11352 				; ------------------------------------------------------------
 11353
 11354 = 9DD3			XB	= DATAORIGIN+$0647
 11355 = 9DD5			YB	= DATAORIGIN+$0649
 11356 = 9DD7			I	= DATAORIGIN+$064B
 11357
 11358 = 9DD3			@VarData	= XB
 11359 = 0005			@VarDataSize	= 5
 11360
 11361 5EA5			@exit
 11362 					.ifdef @new
 11363 					lda <@VarData
 11364 					sta :ztmp
 11365 					lda >@VarData
 11366 					ldy #@VarDataSize-1
 11367 					jmp @FreeMem
 11368 					els
 11369 5EA5 60				rts						; ret
 11370 					eif
 11371 				.endl
 11372
 11373 5EA6			.local	BALL_HIT_BLOCK					; PROCEDURE
 11374
 11375 				; optimize OK (service.pas), line = 2005
 11376
 11377 5EA6 A9 FF			lda #$FF
 11378 5EA8 8D F8 9D			sta EMERGENCY
 11379
 11380 				; optimize OK (service.pas), line = 2007
 11381
 11382 5EAB AC D8 9D 84 84 AC + 	mwy BALL :bp2
 11383 5EB5 A0 00			ldy #BALL.X-DATAORIGIN
 11384 5EB7 B1 84			lda (:bp2),y
 11385 5EB9 38 E9 09			sub #$09
 11386 5EBC 8D E6 9D			sta NX
 11387 5EBF C8				iny
 11388 5EC0 B1 84			lda (:bp2),y
 11389 5EC2 E9 00			sbc #$00
 11390 5EC4 8D E7 9D			sta NX+1
 11391
 11392 				; optimize OK (service.pas), line = 2008
 11393
 11394 5EC7 A0 02			ldy #BALL.Y-DATAORIGIN
 11395 5EC9 B1 84			lda (:bp2),y
 11396 5ECB 38 E9 16			sub #$16
 11397 5ECE 8D E8 9D			sta NY
 11398 5ED1 C8				iny
 11399 5ED2 B1 84			lda (:bp2),y
 11400 5ED4 E9 00			sbc #$00
 11401 5ED6 8D E9 9D			sta NY+1
 11402
 11403 				; optimize OK (service.pas), line = 2011
 11404
 11405 5ED9 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11406 5EDB B1 84			lda (:bp2),y
 11407 5EDD 38 E9 09			sub #$09
 11408 5EE0 8D E2 9D			sta OX
 11409 5EE3 C8				iny
 11410 5EE4 B1 84			lda (:bp2),y
 11411 5EE6 E9 00			sbc #$00
 11412 5EE8 8D E3 9D			sta OX+1
 11413
 11414 				; optimize OK (service.pas), line = 2012
 11415
 11416 5EEB A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11417 5EED B1 84			lda (:bp2),y
 11418 5EEF 38 E9 16			sub #$16
 11419 5EF2 8D E4 9D			sta OY
 11420 5EF5 C8				iny
 11421 5EF6 B1 84			lda (:bp2),y
 11422 5EF8 E9 00			sbc #$00
 11423 5EFA 8D E5 9D			sta OY+1
 11424
 11425 				; optimize OK (service.pas), line = 2014
 11426
 11427 5EFD AD E7 9D			lda NX+1
 11428 5F00 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11429 5F02 AD E6 9D			lda NX
 11430 5F05 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11431 5F07 6A				ror @
 11432 5F08 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11433 5F0A 6A				ror @
 11434 5F0B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11435 5F0D 6A				ror @
 11436 5F0E 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11437 5F10 6A				ror @
 11438 5F11 8D E0 9D			sta XB
 11439
 11440 				; optimize OK (service.pas), line = 2015
 11441
 11442 5F14 AD E9 9D			lda NY+1
 11443 5F17 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11444 5F19 AD E8 9D			lda NY
 11445 5F1C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11446 5F1E 6A				ror @
 11447 5F1F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11448 5F21 6A				ror @
 11449 5F22 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11450 5F24 6A				ror @
 11451 5F25 8D E1 9D			sta YB
 11452
 11453 				; optimize OK (service.pas), line = 2019
 11454
 11455 5F28 A9 10			lda #$10
 11456 5F2A 85 8E			sta :ecx
 11457 5F2C 85 92			sta :ztmp8
 11458 5F2E AD E1 9D			lda YB
 11459 5F31 85 86			sta :eax
 11460 5F33 85 94			sta :ztmp10
 11461 					.ifdef fmulinit
 11462 					fmulu_8
 11463 					els
 11464 5F35 20 0C 13			imulCL
 11465 					eif
 11466 5F38 24 94			bit :ztmp10
 11467 5F3A 10 03			bpl @+
 11468 5F3C 38 E5 92			sub :ztmp8
 11469 				@
 11470 5F3F 24 92			bit :ztmp8
 11471 5F41 10 03			bpl @+
 11472 5F43 38 E5 94			sub :ztmp10
 11473 				@
 11474 5F46 85 87			sta :eax+1
 11475 5F48 A5 86			lda :eax
 11476 5F4A 18 6D E0 9D			add XB
 11477 5F4E A8				tay
 11478 5F4F B9 00 DB			lda adr.WALL,y
 11479 5F52 D0 03 4C 21 6C		jeq l_1BFA
 11480
 11481 				; optimize OK (service.pas), line = 2021
 11482
 11483 5F57 A9 E2			lda <OX
 11484 5F59 8D A0 9D			sta SPLIT_LINE.X1
 11485 5F5C A9 9D			lda >OX
 11486 5F5E 8D A1 9D			sta SPLIT_LINE.X1+1
 11487 5F61 A9 E4			lda <OY
 11488 5F63 8D A2 9D			sta SPLIT_LINE.Y1
 11489 5F66 A9 9D			lda >OY
 11490 5F68 8D A3 9D			sta SPLIT_LINE.Y1+1
 11491 5F6B A9 E6			lda <NX
 11492 5F6D 8D A4 9D			sta SPLIT_LINE.X2
 11493 5F70 A9 9D			lda >NX
 11494 5F72 8D A5 9D			sta SPLIT_LINE.X2+1
 11495 5F75 A9 E8			lda <NY
 11496 5F77 8D A6 9D			sta SPLIT_LINE.Y2
 11497 5F7A A9 9D			lda >NY
 11498 5F7C 8D A7 9D			sta SPLIT_LINE.Y2+1
 11499 5F7F 20 B1 53			jsr SPLIT_LINE
 11500 5F82 AD A8 9D			lda SPLIT_LINE.RESULT
 11501 5F85 8D FC 9D			sta COLLISION
 11502
 11503 				; optimize OK (service.pas), line = 2027
 11504
 11505 5F88 C9 03			cmp #$03
 11506 5F8A F0 03 4C C0 63		jne l_1C15
 11507
 11508 				; optimize OK (service.pas), line = 2029
 11509
 11510 5F8F AC D8 9D 84 84 AC + 	mwy BALL :bp2
 11511 5F99 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11512 5F9B B1 84			lda (:bp2),y
 11513 5F9D C8				iny
 11514 5F9E 38 ED E2 9D			sub OX
 11515 5FA2 38 E9 09			sub #$09
 11516 5FA5 8D DE 9D			sta LX
 11517
 11518 				; optimize OK (service.pas), line = 2030
 11519
 11520 5FA8 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11521 5FAA B1 84			lda (:bp2),y
 11522 5FAC C8				iny
 11523 5FAD 38 ED E4 9D			sub OY
 11524 5FB1 38 E9 16			sub #$16
 11525 5FB4 8D DF 9D			sta LY
 11526
 11527 				; optimize OK (service.pas), line = 2032
 11528
 11529 5FB7 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11530 5FB9 B1 84			lda (:bp2),y
 11531 5FBB 38 ED E6 9D			sub NX
 11532 5FBF 85 9F			sta :STACKORIGIN+9
 11533 5FC1 C8				iny
 11534 5FC2 B1 84			lda (:bp2),y
 11535 5FC4 ED E7 9D			sbc NX+1
 11536 5FC7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11537 5FC9 A5 9F			lda :STACKORIGIN+9
 11538 5FCB 38 E9 09			sub #$09
 11539 5FCE 8D EA 9D			sta MX
 11540 5FD1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11541 5FD3 E9 00			sbc #$00
 11542 5FD5 8D EB 9D			sta MX+1
 11543
 11544 				; optimize OK (service.pas), line = 2033
 11545
 11546 5FD8 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11547 5FDA B1 84			lda (:bp2),y
 11548 5FDC 38 ED E8 9D			sub NY
 11549 5FE0 85 9F			sta :STACKORIGIN+9
 11550 5FE2 C8				iny
 11551 5FE3 B1 84			lda (:bp2),y
 11552 5FE5 ED E9 9D			sbc NY+1
 11553 5FE8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11554 5FEA A5 9F			lda :STACKORIGIN+9
 11555 5FEC 38 E9 16			sub #$16
 11556 5FEF 8D EC 9D			sta MY
 11557 5FF2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11558 5FF4 E9 00			sbc #$00
 11559 5FF6 8D ED 9D			sta MY+1
 11560
 11561 				; optimize OK (service.pas), line = 2035
 11562
 11563 5FF9 AD DE 9D			lda LX
 11564 5FFC 85 8E			sta :ecx
 11565 5FFE 85 92			sta :ztmp8
 11566 6000 85 86			sta :eax
 11567 6002 85 94			sta :ztmp10
 11568 					.ifdef fmulinit
 11569 					fmulu_8
 11570 					els
 11571 6004 20 0C 13			imulCL
 11572 					eif
 11573 6007 24 94			bit :ztmp10
 11574 6009 10 03			bpl @+
 11575 600B 38 E5 92			sub :ztmp8
 11576 				@
 11577 600E 24 92			bit :ztmp8
 11578 6010 10 03			bpl @+
 11579 6012 38 E5 94			sub :ztmp10
 11580 				@
 11581 6015 85 87			sta :eax+1
 11582 6017 A5 86			lda :eax
 11583 6019 85 9F			sta :STACKORIGIN+9
 11584 601B A5 87			lda :eax+1
 11585 601D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11586 601F AD DF 9D			lda LY
 11587 6022 85 8E			sta :ecx
 11588 6024 85 92			sta :ztmp8
 11589 6026 85 86			sta :eax
 11590 6028 85 94			sta :ztmp10
 11591 					.ifdef fmulinit
 11592 					fmulu_8
 11593 					els
 11594 602A 20 0C 13			imulCL
 11595 					eif
 11596 602D 24 94			bit :ztmp10
 11597 602F 10 03			bpl @+
 11598 6031 38 E5 92			sub :ztmp8
 11599 				@
 11600 6034 24 92			bit :ztmp8
 11601 6036 10 03			bpl @+
 11602 6038 38 E5 94			sub :ztmp10
 11603 				@
 11604 603B 85 87			sta :eax+1
 11605 603D A5 9F			lda :STACKORIGIN+9
 11606 603F 18 65 86			add :eax
 11607 6042 8D EE 9D			sta F1
 11608 6045 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11609 6047 65 87			adc :eax+1
 11610 6049 8D EF 9D			sta F1+1
 11611
 11612 				; optimize OK (service.pas), line = 2036
 11613
 11614 604C AD EA 9D			lda MX
 11615 604F 85 8E			sta :ecx
 11616 6051 85 86			sta :eax
 11617 6053 AD EB 9D			lda MX+1
 11618 6056 85 8F			sta :ecx+1
 11619 6058 85 87			sta :eax+1
 11620 					.ifdef fmulinit
 11621 					fmulu_16
 11622 					els
 11623 605A 20 58 13			imulCX
 11624 					eif
 11625 605D A5 86			lda :eax
 11626 605F 85 9F			sta :STACKORIGIN+9
 11627 6061 A5 87			lda :eax+1
 11628 6063 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11629 6065 AD EC 9D			lda MY
 11630 6068 85 8E			sta :ecx
 11631 606A 85 86			sta :eax
 11632 606C AD ED 9D			lda MY+1
 11633 606F 85 8F			sta :ecx+1
 11634 6071 85 87			sta :eax+1
 11635 					.ifdef fmulinit
 11636 					fmulu_16
 11637 					els
 11638 6073 20 58 13			imulCX
 11639 					eif
 11640 6076 A5 86			lda :eax
 11641 6078 18 65 9F			add :STACKORIGIN+9
 11642 607B 8D F0 9D			sta F2
 11643 607E A5 87			lda :eax+1
 11644 6080 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11645 6082 8D F1 9D			sta F2+1
 11646
 11647 				; optimize OK (service.pas), line = 2038
 11648
 11649 6085 AD EE 9D			lda F1
 11650 6088 CD F0 9D			cmp F2
 11651 608B AD EF 9D			lda F1+1
 11652 608E ED F1 9D			sbc F2+1
 11653 6091 50 02			svc
 11654 6093 49 80			eor #$80
 11655 6095 30 03 4C 2B 62		jpl l_1C8C
 11656
 11657 				; optimize OK (service.pas), line = 2044
 11658
 11659 609A AD E2 9D			lda OX
 11660 609D 85 A0			sta :STACKORIGIN+10
 11661 609F A0 00			ldy #$00
 11662 60A1 AD E3 9D			lda OX+1
 11663 60A4 10 01			spl
 11664 60A6 88				dey
 11665 60A7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11666 60A9 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11667 60AB 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11668 60AD 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11669 60AF 66 A0			ror :STACKORIGIN+10
 11670 60B1 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11671 60B3 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11672 60B5 66 A0			ror :STACKORIGIN+10
 11673 60B7 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11674 60B9 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11675 60BB 66 A0			ror :STACKORIGIN+10
 11676 60BD 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11677 60BF 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11678 60C1 66 A0			ror :STACKORIGIN+10
 11679 60C3 A5 A0			lda :STACKORIGIN+10
 11680 60C5 8D CF 9C			sta MAX.A
 11681 60C8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11682 60CA 8D D0 9C			sta MAX.A+1
 11683 60CD A9 00			lda #$00
 11684 60CF 8D D1 9C			sta MAX.B
 11685 60D2 8D D2 9C			sta MAX.B+1
 11686 60D5 20 45 2E			jsr MAX
 11687 60D8 A9 0C			lda #$0C
 11688 60DA 8D D5 9C			sta MIN.A
 11689 60DD A9 00			lda #$00
 11690 60DF 8D D6 9C			sta MIN.A+1
 11691 60E2 AD D3 9C			lda MAX.RESULT
 11692 60E5 8D D7 9C			sta MIN.B
 11693 60E8 AD D4 9C			lda MAX.RESULT+1
 11694 60EB 8D D8 9C			sta MIN.B+1
 11695 60EE 20 70 2E			jsr MIN
 11696 60F1 AD D9 9C			lda MIN.RESULT
 11697 60F4 8D E0 9D			sta XB
 11698
 11699 				; optimize OK (service.pas), line = 2045
 11700
 11701 60F7 AD E4 9D			lda OY
 11702 60FA 85 9F			sta :STACKORIGIN+9
 11703 60FC A0 00			ldy #$00
 11704 60FE AD E5 9D			lda OY+1
 11705 6101 10 01			spl
 11706 6103 88				dey
 11707 6104 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11708 6106 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11709 6108 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11710 610A A5 9F			lda :STACKORIGIN+9
 11711 610C 18 69 18			add #$18
 11712 610F 85 9F			sta :STACKORIGIN+9
 11713 6111 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11714 6113 69 00			adc #$00
 11715 6115 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11716 6117 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11717 6119 69 00			adc #$00
 11718 611B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11719 611D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11720 611F 69 00			adc #$00
 11721 6121 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11722 6123 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11723 6125 66 9F			ror :STACKORIGIN+9
 11724 6127 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11725 6129 66 9F			ror :STACKORIGIN+9
 11726 612B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11727 612D 66 9F			ror :STACKORIGIN+9
 11728 612F A5 9F			lda :STACKORIGIN+9
 11729 6131 38 E9 03			sub #$03
 11730 6134 8D E1 9D			sta YB
 11731
 11732 				; optimize OK (service.pas), line = 2048
 11733
 11734 6137 A9 10			lda #$10
 11735 6139 85 8E			sta :ecx
 11736 613B 85 92			sta :ztmp8
 11737 613D AD E1 9D			lda YB
 11738 6140 85 86			sta :eax
 11739 6142 85 94			sta :ztmp10
 11740 					.ifdef fmulinit
 11741 					fmulu_8
 11742 					els
 11743 6144 20 0C 13			imulCL
 11744 					eif
 11745 6147 24 94			bit :ztmp10
 11746 6149 10 03			bpl @+
 11747 614B 38 E5 92			sub :ztmp8
 11748 				@
 11749 614E 24 92			bit :ztmp8
 11750 6150 10 03			bpl @+
 11751 6152 38 E5 94			sub :ztmp10
 11752 				@
 11753 6155 85 87			sta :eax+1
 11754 6157 A5 86			lda :eax
 11755 6159 18 6D E0 9D			add XB
 11756 615D A8				tay
 11757 615E B9 00 DB			lda adr.WALL,y
 11758 6161 F0 03 4C 10 62		jne l_1CCA
 11759
 11760 				; optimize OK (service.pas), line = 2050
 11761
 11762 6166 AD E6 9D			lda NX
 11763 6169 85 9F			sta :STACKORIGIN+9
 11764 616B A0 00			ldy #$00
 11765 616D AD E7 9D			lda NX+1
 11766 6170 10 01			spl
 11767 6172 88				dey
 11768 6173 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11769 6175 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11770 6177 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11771 6179 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11772 617B 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11773 617D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11774 617F 66 9F			ror :STACKORIGIN+9
 11775 6181 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11776 6183 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11777 6185 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11778 6187 66 9F			ror :STACKORIGIN+9
 11779 6189 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11780 618B 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11781 618D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11782 618F 66 9F			ror :STACKORIGIN+9
 11783 6191 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11784 6193 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11785 6195 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11786 6197 66 9F			ror :STACKORIGIN+9
 11787 6199 A9 00			lda #$00
 11788 619B 8D CF 9C			sta MAX.A
 11789 619E 8D D0 9C			sta MAX.A+1
 11790 61A1 A5 9F			lda :STACKORIGIN+9
 11791 61A3 8D D1 9C			sta MAX.B
 11792 61A6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11793 61A8 8D D2 9C			sta MAX.B+1
 11794 61AB 20 45 2E			jsr MAX
 11795 61AE A9 0C			lda #$0C
 11796 61B0 8D D5 9C			sta MIN.A
 11797 61B3 A9 00			lda #$00
 11798 61B5 8D D6 9C			sta MIN.A+1
 11799 61B8 AD D3 9C			lda MAX.RESULT
 11800 61BB 8D D7 9C			sta MIN.B
 11801 61BE AD D4 9C			lda MAX.RESULT+1
 11802 61C1 8D D8 9C			sta MIN.B+1
 11803 61C4 20 70 2E			jsr MIN
 11804 61C7 AD D9 9C			lda MIN.RESULT
 11805 61CA 8D E0 9D			sta XB
 11806
 11807 				; optimize OK (service.pas), line = 2051
 11808
 11809 61CD AD E8 9D			lda NY
 11810 61D0 85 9F			sta :STACKORIGIN+9
 11811 61D2 A0 00			ldy #$00
 11812 61D4 AD E9 9D			lda NY+1
 11813 61D7 10 01			spl
 11814 61D9 88				dey
 11815 61DA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11816 61DC 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11817 61DE 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11818 61E0 A5 9F			lda :STACKORIGIN+9
 11819 61E2 18 69 18			add #$18
 11820 61E5 85 9F			sta :STACKORIGIN+9
 11821 61E7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11822 61E9 69 00			adc #$00
 11823 61EB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11824 61ED A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11825 61EF 69 00			adc #$00
 11826 61F1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11827 61F3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11828 61F5 69 00			adc #$00
 11829 61F7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11830 61F9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11831 61FB 66 9F			ror :STACKORIGIN+9
 11832 61FD 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11833 61FF 66 9F			ror :STACKORIGIN+9
 11834 6201 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11835 6203 66 9F			ror :STACKORIGIN+9
 11836 6205 A5 9F			lda :STACKORIGIN+9
 11837 6207 38 E9 03			sub #$03
 11838 620A 8D E1 9D			sta YB
 11839 620D 4C 28 62			jmp l_1CF2
 11840 6210			l_1CCA
 11841
 11842 				; optimize OK (service.pas), line = 2055
 11843
 11844 6210 AD E2 9D			lda OX
 11845 6213 8D E6 9D			sta NX
 11846 6216 AD E3 9D			lda OX+1
 11847 6219 8D E7 9D			sta NX+1
 11848
 11849 				; optimize OK (service.pas), line = 2056
 11850
 11851 621C AD E4 9D			lda OY
 11852 621F 8D E8 9D			sta NY
 11853 6222 AD E5 9D			lda OY+1
 11854 6225 8D E9 9D			sta NY+1
 11855 6228			l_1CF2
 11856 6228 4C C0 63			jmp l_1D05
 11857 622B			l_1C8C
 11858
 11859 				; optimize OK (service.pas), line = 2066
 11860
 11861 622B AD E6 9D			lda NX
 11862 622E 85 9F			sta :STACKORIGIN+9
 11863 6230 A0 00			ldy #$00
 11864 6232 AD E7 9D			lda NX+1
 11865 6235 10 01			spl
 11866 6237 88				dey
 11867 6238 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11868 623A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11869 623C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11870 623E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11871 6240 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11872 6242 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11873 6244 66 9F			ror :STACKORIGIN+9
 11874 6246 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11875 6248 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11876 624A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11877 624C 66 9F			ror :STACKORIGIN+9
 11878 624E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11879 6250 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11880 6252 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11881 6254 66 9F			ror :STACKORIGIN+9
 11882 6256 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11883 6258 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11884 625A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11885 625C 66 9F			ror :STACKORIGIN+9
 11886 625E A9 00			lda #$00
 11887 6260 8D CF 9C			sta MAX.A
 11888 6263 8D D0 9C			sta MAX.A+1
 11889 6266 A5 9F			lda :STACKORIGIN+9
 11890 6268 8D D1 9C			sta MAX.B
 11891 626B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11892 626D 8D D2 9C			sta MAX.B+1
 11893 6270 20 45 2E			jsr MAX
 11894 6273 A9 0C			lda #$0C
 11895 6275 8D D5 9C			sta MIN.A
 11896 6278 A9 00			lda #$00
 11897 627A 8D D6 9C			sta MIN.A+1
 11898 627D AD D3 9C			lda MAX.RESULT
 11899 6280 8D D7 9C			sta MIN.B
 11900 6283 AD D4 9C			lda MAX.RESULT+1
 11901 6286 8D D8 9C			sta MIN.B+1
 11902 6289 20 70 2E			jsr MIN
 11903 628C AD D9 9C			lda MIN.RESULT
 11904 628F 8D E0 9D			sta XB
 11905
 11906 				; optimize OK (service.pas), line = 2067
 11907
 11908 6292 AD E8 9D			lda NY
 11909 6295 85 9F			sta :STACKORIGIN+9
 11910 6297 A0 00			ldy #$00
 11911 6299 AD E9 9D			lda NY+1
 11912 629C 10 01			spl
 11913 629E 88				dey
 11914 629F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11915 62A1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11916 62A3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11917 62A5 A5 9F			lda :STACKORIGIN+9
 11918 62A7 18 69 18			add #$18
 11919 62AA 85 9F			sta :STACKORIGIN+9
 11920 62AC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11921 62AE 69 00			adc #$00
 11922 62B0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11923 62B2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11924 62B4 69 00			adc #$00
 11925 62B6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11926 62B8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11927 62BA 69 00			adc #$00
 11928 62BC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11929 62BE 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11930 62C0 66 9F			ror :STACKORIGIN+9
 11931 62C2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11932 62C4 66 9F			ror :STACKORIGIN+9
 11933 62C6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11934 62C8 66 9F			ror :STACKORIGIN+9
 11935 62CA A5 9F			lda :STACKORIGIN+9
 11936 62CC 38 E9 03			sub #$03
 11937 62CF 8D E1 9D			sta YB
 11938
 11939 				; optimize OK (service.pas), line = 2069
 11940
 11941 62D2 A9 10			lda #$10
 11942 62D4 85 8E			sta :ecx
 11943 62D6 85 92			sta :ztmp8
 11944 62D8 AD E1 9D			lda YB
 11945 62DB 85 86			sta :eax
 11946 62DD 85 94			sta :ztmp10
 11947 					.ifdef fmulinit
 11948 					fmulu_8
 11949 					els
 11950 62DF 20 0C 13			imulCL
 11951 					eif
 11952 62E2 24 94			bit :ztmp10
 11953 62E4 10 03			bpl @+
 11954 62E6 38 E5 92			sub :ztmp8
 11955 				@
 11956 62E9 24 92			bit :ztmp8
 11957 62EB 10 03			bpl @+
 11958 62ED 38 E5 94			sub :ztmp10
 11959 				@
 11960 62F0 85 87			sta :eax+1
 11961 62F2 A5 86			lda :eax
 11962 62F4 18 6D E0 9D			add XB
 11963 62F8 A8				tay
 11964 62F9 B9 00 DB			lda adr.WALL,y
 11965 62FC F0 03 4C C0 63		jne l_1D42
 11966
 11967 				; optimize OK (service.pas), line = 2071
 11968
 11969 6301 AD E2 9D			lda OX
 11970 6304 8D E6 9D			sta NX
 11971 6307 AD E3 9D			lda OX+1
 11972 630A 8D E7 9D			sta NX+1
 11973
 11974 				; optimize OK (service.pas), line = 2072
 11975
 11976 630D AD E4 9D			lda OY
 11977 6310 8D E8 9D			sta NY
 11978 6313 AD E5 9D			lda OY+1
 11979 6316 8D E9 9D			sta NY+1
 11980
 11981 				; optimize OK (service.pas), line = 2074
 11982
 11983 6319 AD E6 9D			lda NX
 11984 631C 85 9F			sta :STACKORIGIN+9
 11985 631E A0 00			ldy #$00
 11986 6320 AD E7 9D			lda NX+1
 11987 6323 10 01			spl
 11988 6325 88				dey
 11989 6326 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11990 6328 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11991 632A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11992 632C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11993 632E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11994 6330 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11995 6332 66 9F			ror :STACKORIGIN+9
 11996 6334 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11997 6336 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11998 6338 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11999 633A 66 9F			ror :STACKORIGIN+9
 12000 633C 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12001 633E 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12002 6340 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12003 6342 66 9F			ror :STACKORIGIN+9
 12004 6344 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12005 6346 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12006 6348 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12007 634A 66 9F			ror :STACKORIGIN+9
 12008 634C A9 00			lda #$00
 12009 634E 8D CF 9C			sta MAX.A
 12010 6351 8D D0 9C			sta MAX.A+1
 12011 6354 A5 9F			lda :STACKORIGIN+9
 12012 6356 8D D1 9C			sta MAX.B
 12013 6359 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12014 635B 8D D2 9C			sta MAX.B+1
 12015 635E 20 45 2E			jsr MAX
 12016 6361 A9 0C			lda #$0C
 12017 6363 8D D5 9C			sta MIN.A
 12018 6366 A9 00			lda #$00
 12019 6368 8D D6 9C			sta MIN.A+1
 12020 636B AD D3 9C			lda MAX.RESULT
 12021 636E 8D D7 9C			sta MIN.B
 12022 6371 AD D4 9C			lda MAX.RESULT+1
 12023 6374 8D D8 9C			sta MIN.B+1
 12024 6377 20 70 2E			jsr MIN
 12025 637A AD D9 9C			lda MIN.RESULT
 12026 637D 8D E0 9D			sta XB
 12027
 12028 				; optimize OK (service.pas), line = 2075
 12029
 12030 6380 AD E8 9D			lda NY
 12031 6383 85 9F			sta :STACKORIGIN+9
 12032 6385 A0 00			ldy #$00
 12033 6387 AD E9 9D			lda NY+1
 12034 638A 10 01			spl
 12035 638C 88				dey
 12036 638D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12037 638F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12038 6391 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12039 6393 A5 9F			lda :STACKORIGIN+9
 12040 6395 18 69 18			add #$18
 12041 6398 85 9F			sta :STACKORIGIN+9
 12042 639A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12043 639C 69 00			adc #$00
 12044 639E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12045 63A0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12046 63A2 69 00			adc #$00
 12047 63A4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12048 63A6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12049 63A8 69 00			adc #$00
 12050 63AA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12051 63AC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 12052 63AE 66 9F			ror :STACKORIGIN+9
 12053 63B0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 12054 63B2 66 9F			ror :STACKORIGIN+9
 12055 63B4 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 12056 63B6 66 9F			ror :STACKORIGIN+9
 12057 63B8 A5 9F			lda :STACKORIGIN+9
 12058 63BA 38 E9 03			sub #$03
 12059 63BD 8D E1 9D			sta YB
 12060 63C0			l_1D42
 12061 63C0			l_1D05
 12062 63C0			l_1C15
 12063
 12064 				; optimize OK (service.pas), line = 2081
 12065
 12066 63C0 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 12067 63CA A0 00			ldy #BALL.X-DATAORIGIN
 12068 63CC AD E6 9D			lda NX
 12069 63CF 18 69 09			add #$09
 12070 63D2 91 84			sta (:bp2),y
 12071 63D4 C8				iny
 12072 63D5 AD E7 9D			lda NX+1
 12073 63D8 69 00			adc #$00
 12074 63DA 91 84			sta (:bp2),y
 12075
 12076 				; optimize OK (service.pas), line = 2082
 12077
 12078 63DC A0 02			ldy #BALL.Y-DATAORIGIN
 12079 63DE AD E8 9D			lda NY
 12080 63E1 18 69 16			add #$16
 12081 63E4 91 84			sta (:bp2),y
 12082 63E6 C8				iny
 12083 63E7 AD E9 9D			lda NY+1
 12084 63EA 69 00			adc #$00
 12085 63EC 91 84			sta (:bp2),y
 12086
 12087 				; optimize OK (service.pas), line = 2086
 12088
 12089 63EE A0 00			ldy #$00
 12090 63F0 AD E1 9D			lda YB
 12091 63F3 10 01			spl
 12092 63F5 88				dey
 12093 63F6 8C CD 9D			sty SHOOT_BLOCK.YB+1
 12094 63F9 8D CC 9D			sta SHOOT_BLOCK.YB
 12095 63FC A0 00			ldy #$00
 12096 63FE AD E0 9D			lda XB
 12097 6401 10 01			spl
 12098 6403 88				dey
 12099 6404 8C CB 9D			sty SHOOT_BLOCK.XB+1
 12100 6407 8D CA 9D			sta SHOOT_BLOCK.XB
 12101 640A AD D8 9D			lda BALL
 12102 640D 8D CE 9D			sta SHOOT_BLOCK.BALL
 12103 6410 AD D9 9D			lda BALL+1
 12104 6413 8D CF 9D			sta SHOOT_BLOCK.BALL+1
 12105 6416 20 79 5B			jsr SHOOT_BLOCK
 12106
 12107 				; optimize OK (service.pas), line = 2088
 12108
 12109 6419 AD E6 9D			lda NX
 12110 641C 29 0F			and #$0F
 12111 641E 85 9F			sta :STACKORIGIN+9
 12112 6420 A9 00			lda #$00
 12113 6422 4A				lsr @
 12114 6423 66 9F			ror :STACKORIGIN+9
 12115 6425 A5 9F			lda :STACKORIGIN+9
 12116 6427 8D DC 9D			sta X
 12117
 12118 				; optimize OK (service.pas), line = 2089
 12119
 12120 642A AD E8 9D			lda NY
 12121 642D 29 07			and #$07
 12122 642F 8D DD 9D			sta Y
 12123
 12124 				; optimize OK (service.pas), line = 2101
 12125
 12126 6432 AD DC 9D			lda X
 12127 6435 F0 12			jeq l_1DD6
 12128 6437 C9 07			cmp #$07
 12129 6439 F0 0E			jeq l_1DD6
 12130 643B AD DD 9D			lda Y
 12131 643E F0 09			jeq l_1DD6
 12132 6440 C9 07			cmp #$07
 12133 6442 F0 05			jeq l_1DD6
 12134
 12135 				; optimize OK (service.pas), line = 2102
 12136
 12137 6444 A9 03			lda #$03
 12138 6446 20 9B 2E			jsr FATAL_ERROR
 12139 6449			l_1DD6
 12140
 12141 				; optimize OK (service.pas), line = 2117
 12142
 12143 6449 AD DD 9D			lda Y
 12144 644C 38 ED DC 9D			sub X
 12145 6450 50 02			svc
 12146 6452 49 80			eor #$80
 12147 6454 10 59			jpl l_1E01
 12148 6456 A0 00			ldy #$00
 12149 6458 AD DD 9D			lda Y
 12150 645B 10 01			spl
 12151 645D 88				dey
 12152 645E 84 B2			sty :STACKORIGIN+STACKWIDTH+12
 12153 6460 85 A2			sta :STACKORIGIN+12
 12154 6462 A9 07			lda #$07
 12155 6464 38 E5 A2			sub :STACKORIGIN+12
 12156 6467 85 A1			sta :STACKORIGIN+11
 12157 6469 A9 00			lda #$00
 12158 646B E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12159 646D 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12160 646F A0 00			ldy #$00
 12161 6471 AD DC 9D			lda X
 12162 6474 10 01			spl
 12163 6476 88				dey
 12164 6477 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12165 6479 C5 A1			cmp :STACKORIGIN+11
 12166 647B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12167 647D E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
 12168 647F 50 02			svc
 12169 6481 49 80			eor #$80
 12170 6483 10 2A			jpl l_1E01
 12171
 12172 				; optimize OK (service.pas), line = 2119
 12173
 12174 6485 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 12175 648F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12176 6491 A9 00			lda #$00
 12177 6493 38 F1 84			sub (:bp2),y
 12178 6496 85 9F			sta :STACKORIGIN+9
 12179 6498 C8				iny
 12180 6499 A9 00			lda #$00
 12181 649B F1 84			sbc (:bp2),y
 12182 649D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12183 649F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12184 64A1 A5 9F			lda :STACKORIGIN+9
 12185 64A3 91 84			sta (:bp2),y
 12186 64A5 C8				iny
 12187 64A6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12188 64A8 91 84			sta (:bp2),y
 12189
 12190 				; optimize OK (service.pas), line = 2120
 12191
 12192 64AA A9 01			lda #$01
 12193 64AC 8D F8 9D			sta EMERGENCY
 12194 64AF			l_1E01
 12195
 12196 				; optimize OK (service.pas), line = 2124
 12197
 12198 64AF A0 00			ldy #$00
 12199 64B1 AD DD 9D			lda Y
 12200 64B4 10 01			spl
 12201 64B6 88				dey
 12202 64B7 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12203 64B9 85 A0			sta :STACKORIGIN+10
 12204 64BB A9 07			lda #$07
 12205 64BD 38 E5 A0			sub :STACKORIGIN+10
 12206 64C0 85 9F			sta :STACKORIGIN+9
 12207 64C2 A9 00			lda #$00
 12208 64C4 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12209 64C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12210 64C8 A0 00			ldy #$00
 12211 64CA AD DC 9D			lda X
 12212 64CD 10 01			spl
 12213 64CF 88				dey
 12214 64D0 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12215 64D2 85 A0			sta :STACKORIGIN+10
 12216 64D4 A5 9F			lda :STACKORIGIN+9
 12217 64D6 C5 A0			cmp :STACKORIGIN+10
 12218 64D8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12219 64DA E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12220 64DC 50 02			svc
 12221 64DE 49 80			eor #$80
 12222 64E0 10 37			jpl l_1E36
 12223 64E2 AD DC 9D			lda X
 12224 64E5 38 ED DD 9D			sub Y
 12225 64E9 50 02			svc
 12226 64EB 49 80			eor #$80
 12227 64ED 10 2A			jpl l_1E36
 12228
 12229 				; optimize OK (service.pas), line = 2126
 12230
 12231 64EF AC D8 9D 84 84 AC + 	mwy BALL :bp2
 12232 64F9 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12233 64FB A9 00			lda #$00
 12234 64FD 38 F1 84			sub (:bp2),y
 12235 6500 85 9F			sta :STACKORIGIN+9
 12236 6502 C8				iny
 12237 6503 A9 00			lda #$00
 12238 6505 F1 84			sbc (:bp2),y
 12239 6507 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12240 6509 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12241 650B A5 9F			lda :STACKORIGIN+9
 12242 650D 91 84			sta (:bp2),y
 12243 650F C8				iny
 12244 6510 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12245 6512 91 84			sta (:bp2),y
 12246
 12247 				; optimize OK (service.pas), line = 2127
 12248
 12249 6514 A9 03			lda #$03
 12250 6516 8D F8 9D			sta EMERGENCY
 12251 6519			l_1E36
 12252
 12253 				; optimize OK (service.pas), line = 2131
 12254
 12255 6519 AD DC 9D			lda X
 12256 651C 38 ED DD 9D			sub Y
 12257 6520 50 02			svc
 12258 6522 49 80			eor #$80
 12259 6524 10 59			jpl l_1E6B
 12260 6526 A0 00			ldy #$00
 12261 6528 AD DC 9D			lda X
 12262 652B 10 01			spl
 12263 652D 88				dey
 12264 652E 84 B2			sty :STACKORIGIN+STACKWIDTH+12
 12265 6530 85 A2			sta :STACKORIGIN+12
 12266 6532 A9 07			lda #$07
 12267 6534 38 E5 A2			sub :STACKORIGIN+12
 12268 6537 85 A1			sta :STACKORIGIN+11
 12269 6539 A9 00			lda #$00
 12270 653B E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12271 653D 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12272 653F A0 00			ldy #$00
 12273 6541 AD DD 9D			lda Y
 12274 6544 10 01			spl
 12275 6546 88				dey
 12276 6547 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12277 6549 C5 A1			cmp :STACKORIGIN+11
 12278 654B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12279 654D E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
 12280 654F 50 02			svc
 12281 6551 49 80			eor #$80
 12282 6553 10 2A			jpl l_1E6B
 12283
 12284 				; optimize OK (service.pas), line = 2133
 12285
 12286 6555 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 12287 655F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12288 6561 A9 00			lda #$00
 12289 6563 38 F1 84			sub (:bp2),y
 12290 6566 85 9F			sta :STACKORIGIN+9
 12291 6568 C8				iny
 12292 6569 A9 00			lda #$00
 12293 656B F1 84			sbc (:bp2),y
 12294 656D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12295 656F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12296 6571 A5 9F			lda :STACKORIGIN+9
 12297 6573 91 84			sta (:bp2),y
 12298 6575 C8				iny
 12299 6576 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12300 6578 91 84			sta (:bp2),y
 12301
 12302 				; optimize OK (service.pas), line = 2134
 12303
 12304 657A A9 02			lda #$02
 12305 657C 8D F8 9D			sta EMERGENCY
 12306 657F			l_1E6B
 12307
 12308 				; optimize OK (service.pas), line = 2138
 12309
 12310 657F A0 00			ldy #$00
 12311 6581 AD DC 9D			lda X
 12312 6584 10 01			spl
 12313 6586 88				dey
 12314 6587 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12315 6589 85 A0			sta :STACKORIGIN+10
 12316 658B A9 07			lda #$07
 12317 658D 38 E5 A0			sub :STACKORIGIN+10
 12318 6590 85 9F			sta :STACKORIGIN+9
 12319 6592 A9 00			lda #$00
 12320 6594 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12321 6596 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12322 6598 A0 00			ldy #$00
 12323 659A AD DD 9D			lda Y
 12324 659D 10 01			spl
 12325 659F 88				dey
 12326 65A0 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12327 65A2 85 A0			sta :STACKORIGIN+10
 12328 65A4 A5 9F			lda :STACKORIGIN+9
 12329 65A6 C5 A0			cmp :STACKORIGIN+10
 12330 65A8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12331 65AA E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12332 65AC 50 02			svc
 12333 65AE 49 80			eor #$80
 12334 65B0 10 37			jpl l_1EA0
 12335 65B2 AD DD 9D			lda Y
 12336 65B5 38 ED DC 9D			sub X
 12337 65B9 50 02			svc
 12338 65BB 49 80			eor #$80
 12339 65BD 10 2A			jpl l_1EA0
 12340
 12341 				; optimize OK (service.pas), line = 2140
 12342
 12343 65BF AC D8 9D 84 84 AC + 	mwy BALL :bp2
 12344 65C9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12345 65CB A9 00			lda #$00
 12346 65CD 38 F1 84			sub (:bp2),y
 12347 65D0 85 9F			sta :STACKORIGIN+9
 12348 65D2 C8				iny
 12349 65D3 A9 00			lda #$00
 12350 65D5 F1 84			sbc (:bp2),y
 12351 65D7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12352 65D9 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12353 65DB A5 9F			lda :STACKORIGIN+9
 12354 65DD 91 84			sta (:bp2),y
 12355 65DF C8				iny
 12356 65E0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12357 65E2 91 84			sta (:bp2),y
 12358
 12359 				; optimize OK (service.pas), line = 2141
 12360
 12361 65E4 A9 04			lda #$04
 12362 65E6 8D F8 9D			sta EMERGENCY
 12363 65E9			l_1EA0
 12364
 12365 				; optimize OK (service.pas), line = 2145
 12366
 12367 65E9 AD DC 9D			lda X
 12368 65EC CD DD 9D			cmp Y
 12369 65EF F0 34			jeq l_1ED5x
 12370 65F1 A0 00			ldy #$00
 12371 65F3 AD DD 9D			lda Y
 12372 65F6 10 01			spl
 12373 65F8 88				dey
 12374 65F9 84 B2			sty :STACKORIGIN+STACKWIDTH+12
 12375 65FB 85 A2			sta :STACKORIGIN+12
 12376 65FD A9 07			lda #$07
 12377 65FF 38 E5 A2			sub :STACKORIGIN+12
 12378 6602 85 A1			sta :STACKORIGIN+11
 12379 6604 A9 00			lda #$00
 12380 6606 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12381 6608 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12382 660A A0 00			ldy #$00
 12383 660C AD DC 9D			lda X
 12384 660F 10 01			spl
 12385 6611 88				dey
 12386 6612 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12387 6614 85 A0			sta :STACKORIGIN+10
 12388 6616 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12389 6618 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12390 661A D0 04			bne @+
 12391 661C A5 A0			lda :STACKORIGIN+10
 12392 661E C5 A1			cmp :STACKORIGIN+11
 12393 				@
 12394 6620 F0 03 4C 21 6C		jne l_1ED5
 12395 6625			l_1ED5x
 12396
 12397 				; optimize OK (service.pas), line = 2147
 12398
 12399 6625 A9 00			lda #$00
 12400 6627 8D FA 9D			sta DEFLECT
 12401
 12402 				; optimize OK (service.pas), line = 2148
 12403
 12404 662A 8D FD 9D			sta TOUCH
 12405
 12406 				; optimize OK (service.pas), line = 2156
 12407
 12408 662D AD DC 9D			lda X
 12409 6630 38 E9 05			sub #$05
 12410 6633 50 02			svc
 12411 6635 49 80			eor #$80
 12412 6637 30 08			jmi l_1EF0
 12413 6639 AD FD 9D			lda TOUCH
 12414 663C 09 01			ora #$01
 12415 663E 8D FD 9D			sta TOUCH
 12416 6641			l_1EF0
 12417
 12418 				; optimize OK (service.pas), line = 2157
 12419
 12420 6641 AD DD 9D			lda Y
 12421 6644 38 E9 05			sub #$05
 12422 6647 50 02			svc
 12423 6649 49 80			eor #$80
 12424 664B 30 08			jmi l_1F0F
 12425 664D AD FD 9D			lda TOUCH
 12426 6650 09 02			ora #$02
 12427 6652 8D FD 9D			sta TOUCH
 12428 6655			l_1F0F
 12429
 12430 				; optimize OK (service.pas), line = 2167
 12431
 12432 6655 A9 FF			lda #$FF
 12433 6657 8D DE 9D			sta LX
 12434
 12435 665A			l_1F25
 12436 				; --- ForToDoCondition
 12437 665A AD DE 9D			lda LX
 12438 665D 38 E9 02			sub #$02
 12439 6660 50 02			svc
 12440 6662 49 80			eor #$80
 12441 6664 0A				asl @
 12442 6665 B0 03 4C 90 67		jcc l_1F33
 12443
 12444 				; optimize OK (service.pas), line = 2168
 12445
 12446 666A A9 FF			lda #$FF
 12447 666C 8D DF 9D			sta LY
 12448
 12449 666F			l_1F3C
 12450 				; --- ForToDoCondition
 12451 666F AD DF 9D			lda LY
 12452 6672 38 E9 02			sub #$02
 12453 6675 50 02			svc
 12454 6677 49 80			eor #$80
 12455 6679 0A				asl @
 12456 667A B0 03 4C 83 67		jcc l_1F4A
 12457
 12458 				; optimize FAIL (1, service.pas), line = 2170
 12459
 12460 667F E8				inx
 12461 6680 A9 00 95 96			mva #$00 :STACKORIGIN,x
 12462 6684 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12463 6686 E8				inx
 12464 6687 A9 0C 95 96			mva #$0C :STACKORIGIN,x
 12465 668B A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 12466 668F E8				inx
 12467 6690 AD E0 9D 95 96		mva XB :STACKORIGIN,x
 12468 6695 E8				inx
 12469 6696 AD DE 9D 95 96		mva LX :STACKORIGIN,x
 12470 669B 20 71 11			jsr @expandSHORT2SMALL1
 12471 669E 20 66 11			jsr @expandSHORT2SMALL
 12472 66A1 20 E5 10			jsr addAX_CX
 12473 66A4 CA				dex
 12474 66A5 B5 96			lda :STACKORIGIN,x
 12475 66A7 8D D5 9C			sta MIN.A
 12476 66AA B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12477 66AC 8D D6 9C			sta MIN.A+1
 12478 66AF CA				dex
 12479 66B0 B5 96			lda :STACKORIGIN,x
 12480 66B2 8D D7 9C			sta MIN.B
 12481 66B5 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12482 66B7 8D D8 9C			sta MIN.B+1
 12483 66BA CA				dex
 12484 66BB 20 70 2E			jsr MIN
 12485 66BE AD D9 9C			lda MIN.RESULT
 12486 66C1 8D CF 9C			sta MAX.A
 12487 66C4 AD DA 9C			lda MIN.RESULT+1
 12488 66C7 8D D0 9C			sta MAX.A+1
 12489 66CA B5 96			lda :STACKORIGIN,x
 12490 66CC 8D D1 9C			sta MAX.B
 12491 66CF B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12492 66D1 8D D2 9C			sta MAX.B+1
 12493 66D4 CA				dex
 12494 66D5 20 45 2E			jsr MAX
 12495 66D8 AD D3 9C			lda MAX.RESULT
 12496 66DB 8D EA 9D			sta MX
 12497 66DE AD D4 9C			lda MAX.RESULT+1
 12498 66E1 8D EB 9D			sta MX+1
 12499
 12500 				; optimize OK (service.pas), line = 2171
 12501
 12502 66E4 A0 00			ldy #$00
 12503 66E6 AD E1 9D			lda YB
 12504 66E9 10 01			spl
 12505 66EB 88				dey
 12506 66EC 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 12507 66EE 85 9F			sta :STACKORIGIN+9
 12508 66F0 A0 00			ldy #$00
 12509 66F2 AD DF 9D			lda LY
 12510 66F5 10 01			spl
 12511 66F7 88				dey
 12512 66F8 18 65 9F			add :STACKORIGIN+9
 12513 66FB 8D EC 9D			sta MY
 12514 66FE 98				tya
 12515 66FF 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 12516 6701 8D ED 9D			sta MY+1
 12517
 12518 				; optimize OK (service.pas), line = 2175
 12519
 12520 6704 AD E0 9D			lda XB
 12521 6707 18 6D DE 9D			add LX
 12522 670B 30 21			jmi l_1FA7x
 12523 670D AD E0 9D			lda XB
 12524 6710 18 6D DE 9D			add LX
 12525 6714 38 E9 0D			sub #$0D
 12526 6717 50 02			svc
 12527 6719 49 80			eor #$80
 12528 671B 10 11			jpl l_1FA7x
 12529 671D AD EC 9D			lda MY
 12530 6720 0A				asl @
 12531 6721 0A				asl @
 12532 6722 0A				asl @
 12533 6723 0A				asl @
 12534 6724 18 6D EA 9D			add MX
 12535 6728 A8				tay
 12536 6729 B9 00 DB			lda adr.WALL,y
 12537 672C F0 24			jeq l_1FA7
 12538 672E			l_1FA7x
 12539
 12540 				; optimize OK (service.pas), line = 2178
 12541
 12542 672E A0 00			ldy #$00
 12543 6730 AD DE 9D			lda LX
 12544 6733 10 01			spl
 12545 6735 88				dey
 12546 6736 18 69 01			add #$01
 12547 6739 85 86			sta :eax
 12548 673B 90 01			scc
 12549 673D C8				iny
 12550 673E 84 87			sty :eax+1
 12551 6740 A9 03			lda #$03
 12552 6742 85 8E			sta :ecx
 12553 6744 A9 00			lda #$00
 12554 6746 85 8F			sta :ecx+1
 12555 					.ifdef fmulinit
 12556 					fmulu_16
 12557 					els
 12558 6748 20 58 13			imulCX
 12559 					eif
 12560 674B A4 86			ldy :eax
 12561 674D A9 01			lda #$01
 12562 674F 4C 73 67			jmp l_1FCA
 12563 6752			l_1FA7
 12564
 12565 				; optimize OK (service.pas), line = 2180
 12566
 12567 6752 A0 00			ldy #$00
 12568 6754 AD DE 9D			lda LX
 12569 6757 10 01			spl
 12570 6759 88				dey
 12571 675A 18 69 01			add #$01
 12572 675D 85 86			sta :eax
 12573 675F 90 01			scc
 12574 6761 C8				iny
 12575 6762 84 87			sty :eax+1
 12576 6764 A9 03			lda #$03
 12577 6766 85 8E			sta :ecx
 12578 6768 A9 00			lda #$00
 12579 676A 85 8F			sta :ecx+1
 12580 					.ifdef fmulinit
 12581 					fmulu_16
 12582 					els
 12583 676C 20 58 13			imulCX
 12584 					eif
 12585 676F A4 86			ldy :eax
 12586 6771 A9 00			lda #$00
 12587 6773			l_1FCA
 12588 6773 99 FF 9D			sta adr.ADJW+$01,y
 12589
 12590 				; --- ForToDoEpilog
 12591 6776 EE DF 9D			inc LY
 12592 6779 AD DF 9D			lda LY
 12593 677C C9 80			cmp #$80
 12594 677E F0 03 4C 6F 66		jne l_1F3C
 12595 6783			l_1F4A
 12596
 12597 				; --- ForToDoEpilog
 12598 6783 EE DE 9D			inc LX
 12599 6786 AD DE 9D			lda LX
 12600 6789 C9 80			cmp #$80
 12601 678B F0 03 4C 5A 66		jne l_1F25
 12602 6790			l_1F33
 12603
 12604 				; optimize OK (service.pas), line = 2199
 12605
 12606 6790 AD FE 9D			lda adr.ADJW
 12607 6793 85 9F			sta :STACKORIGIN+9
 12608 6795 AD 01 9E			lda adr.ADJW+$03
 12609 6798 0A				asl @
 12610 6799 05 9F			ora :STACKORIGIN+9
 12611 679B 85 9F			sta :STACKORIGIN+9
 12612 679D AD 04 9E			lda adr.ADJW+$06
 12613 67A0 0A				asl @
 12614 67A1 0A				asl @
 12615 67A2 05 9F			ora :STACKORIGIN+9
 12616 67A4 85 9F			sta :STACKORIGIN+9
 12617 67A6 AD 05 9E			lda adr.ADJW+$07
 12618 67A9 0A				asl @
 12619 67AA 0A				asl @
 12620 67AB 0A				asl @
 12621 67AC 05 9F			ora :STACKORIGIN+9
 12622 67AE 85 9F			sta :STACKORIGIN+9
 12623 67B0 AD 06 9E			lda adr.ADJW+$08
 12624 67B3 0A				asl @
 12625 67B4 0A				asl @
 12626 67B5 0A				asl @
 12627 67B6 0A				asl @
 12628 67B7 05 9F			ora :STACKORIGIN+9
 12629 67B9 85 9F			sta :STACKORIGIN+9
 12630 67BB AD 03 9E			lda adr.ADJW+$05
 12631 67BE 0A				asl @
 12632 67BF 0A				asl @
 12633 67C0 0A				asl @
 12634 67C1 0A				asl @
 12635 67C2 0A				asl @
 12636 67C3 05 9F			ora :STACKORIGIN+9
 12637 67C5 85 9F			sta :STACKORIGIN+9
 12638 67C7 AD 00 9E			lda adr.ADJW+$02
 12639 67CA 0A				asl @
 12640 67CB 0A				asl @
 12641 67CC 0A				asl @
 12642 67CD 0A				asl @
 12643 67CE 0A				asl @
 12644 67CF 0A				asl @
 12645 67D0 05 9F			ora :STACKORIGIN+9
 12646 67D2 85 9F			sta :STACKORIGIN+9
 12647 67D4 AD FF 9D			lda adr.ADJW+$01
 12648 67D7 0A				asl @
 12649 67D8 0A				asl @
 12650 67D9 0A				asl @
 12651 67DA 0A				asl @
 12652 67DB 0A				asl @
 12653 67DC 0A				asl @
 12654 67DD 0A				asl @
 12655 67DE 05 9F			ora :STACKORIGIN+9
 12656 67E0 8D FB 9D			sta AROUND
 12657
 12658 				; optimize OK (service.pas), line = 2230
 12659
 12660 67E3 AD FD 9D			lda TOUCH
 12661 67E6 F0 03 4C 87 68		jne l_2073
 12662
 12663 				; optimize OK (service.pas), line = 2232
 12664
 12665 67EB AD FB 9D			lda AROUND
 12666 67EE 29 83			and #$83
 12667 67F0 D0 05			jne l_208A
 12668 67F2 A9 11			lda #$11
 12669 67F4 8D FA 9D			sta DEFLECT
 12670 67F7			l_208A
 12671
 12672 				; optimize OK (service.pas), line = 2233
 12673
 12674 67F7 AD FB 9D			lda AROUND
 12675 67FA 29 83			and #$83
 12676 67FC C9 01			cmp #$01
 12677 67FE D0 05			jne l_20A7
 12678 6800 A9 33			lda #$33
 12679 6802 8D FA 9D			sta DEFLECT
 12680 6805			l_20A7
 12681
 12682 				; optimize OK (service.pas), line = 2234
 12683
 12684 6805 AD FB 9D			lda AROUND
 12685 6808 29 83			and #$83
 12686 680A C9 02			cmp #$02
 12687 680C D0 05			jne l_20C4
 12688 680E A9 10			lda #$10
 12689 6810 8D FA 9D			sta DEFLECT
 12690 6813			l_20C4
 12691
 12692 				; optimize OK (service.pas), line = 2235
 12693
 12694 6813 AD FB 9D			lda AROUND
 12695 6816 29 83			and #$83
 12696 6818 C9 03			cmp #$03
 12697 681A D0 05			jne l_20E1
 12698 681C A9 12			lda #$12
 12699 681E 8D FA 9D			sta DEFLECT
 12700 6821			l_20E1
 12701
 12702 				; optimize OK (service.pas), line = 2236
 12703
 12704 6821 AD FB 9D			lda AROUND
 12705 6824 29 83			and #$83
 12706 6826 C9 80			cmp #$80
 12707 6828 D0 05			jne l_20FE
 12708 682A A9 01			lda #$01
 12709 682C 8D FA 9D			sta DEFLECT
 12710 682F			l_20FE
 12711
 12712 				; optimize OK (service.pas), line = 2237
 12713
 12714 682F AD FB 9D			lda AROUND
 12715 6832 29 83			and #$83
 12716 6834 C9 81			cmp #$81
 12717 6836 D0 05			jne l_211B
 12718 6838 A9 21			lda #$21
 12719 683A 8D FA 9D			sta DEFLECT
 12720 683D			l_211B
 12721
 12722 				; optimize OK (service.pas), line = 2238
 12723
 12724 683D AD FB 9D			lda AROUND
 12725 6840 29 83			and #$83
 12726 6842 C9 82			cmp #$82
 12727 6844 D0 05			jne l_2138
 12728 6846 A9 11			lda #$11
 12729 6848 8D FA 9D			sta DEFLECT
 12730 684B			l_2138
 12731
 12732 				; optimize OK (service.pas), line = 2240
 12733
 12734 684B A9 05			lda #$05
 12735 684D 8D F8 9D			sta EMERGENCY
 12736
 12737 				; optimize OK (service.pas), line = 2241
 12738
 12739 6850 A0 00			ldy #$00
 12740 6852 AD E1 9D			lda YB
 12741 6855 10 01			spl
 12742 6857 88				dey
 12743 6858 38 E9 01			sub #$01
 12744 685B 8D CC 9D			sta SHOOT_BLOCK.YB
 12745 685E 98				tya
 12746 685F E9 00			sbc #$00
 12747 6861 8D CD 9D			sta SHOOT_BLOCK.YB+1
 12748 6864 A0 00			ldy #$00
 12749 6866 AD E0 9D			lda XB
 12750 6869 10 01			spl
 12751 686B 88				dey
 12752 686C 38 E9 01			sub #$01
 12753 686F 8D CA 9D			sta SHOOT_BLOCK.XB
 12754 6872 98				tya
 12755 6873 E9 00			sbc #$00
 12756 6875 8D CB 9D			sta SHOOT_BLOCK.XB+1
 12757 6878 AD D8 9D			lda BALL
 12758 687B 8D CE 9D			sta SHOOT_BLOCK.BALL
 12759 687E AD D9 9D			lda BALL+1
 12760 6881 8D CF 9D			sta SHOOT_BLOCK.BALL+1
 12761 6884 20 79 5B			jsr SHOOT_BLOCK
 12762 6887			l_2073
 12763
 12764 				; optimize OK (service.pas), line = 2246
 12765
 12766 6887 AD FD 9D			lda TOUCH
 12767 688A C9 01			cmp #$01
 12768 688C F0 03 4C 2D 69		jne l_2168
 12769
 12770 				; optimize OK (service.pas), line = 2248
 12771
 12772 6891 AD FB 9D			lda AROUND
 12773 6894 29 0E			and #$0E
 12774 6896 D0 05			jne l_217F
 12775 6898 A9 21			lda #$21
 12776 689A 8D FA 9D			sta DEFLECT
 12777 689D			l_217F
 12778
 12779 				; optimize OK (service.pas), line = 2249
 12780
 12781 689D AD FB 9D			lda AROUND
 12782 68A0 29 0E			and #$0E
 12783 68A2 C9 02			cmp #$02
 12784 68A4 D0 05			jne l_219C
 12785 68A6 A9 20			lda #$20
 12786 68A8 8D FA 9D			sta DEFLECT
 12787 68AB			l_219C
 12788
 12789 				; optimize OK (service.pas), line = 2250
 12790
 12791 68AB AD FB 9D			lda AROUND
 12792 68AE 29 0E			and #$0E
 12793 68B0 C9 04			cmp #$04
 12794 68B2 D0 05			jne l_21B9
 12795 68B4 A9 33			lda #$33
 12796 68B6 8D FA 9D			sta DEFLECT
 12797 68B9			l_21B9
 12798
 12799 				; optimize OK (service.pas), line = 2251
 12800
 12801 68B9 AD FB 9D			lda AROUND
 12802 68BC 29 0E			and #$0E
 12803 68BE C9 06			cmp #$06
 12804 68C0 D0 05			jne l_21D6
 12805 68C2 A9 22			lda #$22
 12806 68C4 8D FA 9D			sta DEFLECT
 12807 68C7			l_21D6
 12808
 12809 				; optimize OK (service.pas), line = 2252
 12810
 12811 68C7 AD FB 9D			lda AROUND
 12812 68CA 29 0E			and #$0E
 12813 68CC C9 08			cmp #$08
 12814 68CE D0 05			jne l_21F3
 12815 68D0 A9 01			lda #$01
 12816 68D2 8D FA 9D			sta DEFLECT
 12817 68D5			l_21F3
 12818
 12819 				; optimize OK (service.pas), line = 2253
 12820
 12821 68D5 AD FB 9D			lda AROUND
 12822 68D8 29 0E			and #$0E
 12823 68DA C9 0A			cmp #$0A
 12824 68DC D0 05			jne l_2210
 12825 68DE A9 21			lda #$21
 12826 68E0 8D FA 9D			sta DEFLECT
 12827 68E3			l_2210
 12828
 12829 				; optimize OK (service.pas), line = 2254
 12830
 12831 68E3 AD FB 9D			lda AROUND
 12832 68E6 29 0E			and #$0E
 12833 68E8 C9 0C			cmp #$0C
 12834 68EA D0 05			jne l_222D
 12835 68EC A9 11			lda #$11
 12836 68EE 8D FA 9D			sta DEFLECT
 12837 68F1			l_222D
 12838
 12839 				; optimize OK (service.pas), line = 2256
 12840
 12841 68F1 A9 08			lda #$08
 12842 68F3 8D F8 9D			sta EMERGENCY
 12843
 12844 				; optimize OK (service.pas), line = 2257
 12845
 12846 68F6 A0 00			ldy #$00
 12847 68F8 AD E1 9D			lda YB
 12848 68FB 10 01			spl
 12849 68FD 88				dey
 12850 68FE 38 E9 01			sub #$01
 12851 6901 8D CC 9D			sta SHOOT_BLOCK.YB
 12852 6904 98				tya
 12853 6905 E9 00			sbc #$00
 12854 6907 8D CD 9D			sta SHOOT_BLOCK.YB+1
 12855 690A A0 00			ldy #$00
 12856 690C AD E0 9D			lda XB
 12857 690F 10 01			spl
 12858 6911 88				dey
 12859 6912 18 69 01			add #$01
 12860 6915 8D CA 9D			sta SHOOT_BLOCK.XB
 12861 6918 90 01			scc
 12862 691A C8				iny
 12863 691B 8C CB 9D			sty SHOOT_BLOCK.XB+1
 12864 691E AD D8 9D			lda BALL
 12865 6921 8D CE 9D			sta SHOOT_BLOCK.BALL
 12866 6924 AD D9 9D			lda BALL+1
 12867 6927 8D CF 9D			sta SHOOT_BLOCK.BALL+1
 12868 692A 20 79 5B			jsr SHOOT_BLOCK
 12869 692D			l_2168
 12870
 12871 				; optimize OK (service.pas), line = 2260
 12872
 12873 692D AD FD 9D			lda TOUCH
 12874 6930 C9 02			cmp #$02
 12875 6932 F0 03 4C D3 69		jne l_225D
 12876
 12877 				; optimize OK (service.pas), line = 2262
 12878
 12879 6937 AD FB 9D			lda AROUND
 12880 693A 29 E0			and #$E0
 12881 693C D0 05			jne l_2274
 12882 693E A9 12			lda #$12
 12883 6940 8D FA 9D			sta DEFLECT
 12884 6943			l_2274
 12885
 12886 				; optimize OK (service.pas), line = 2263
 12887
 12888 6943 AD FB 9D			lda AROUND
 12889 6946 29 E0			and #$E0
 12890 6948 C9 20			cmp #$20
 12891 694A D0 05			jne l_2291
 12892 694C A9 10			lda #$10
 12893 694E 8D FA 9D			sta DEFLECT
 12894 6951			l_2291
 12895
 12896 				; optimize OK (service.pas), line = 2264
 12897
 12898 6951 AD FB 9D			lda AROUND
 12899 6954 29 E0			and #$E0
 12900 6956 C9 40			cmp #$40
 12901 6958 D0 05			jne l_22AE
 12902 695A A9 33			lda #$33
 12903 695C 8D FA 9D			sta DEFLECT
 12904 695F			l_22AE
 12905
 12906 				; optimize OK (service.pas), line = 2265
 12907
 12908 695F AD FB 9D			lda AROUND
 12909 6962 29 E0			and #$E0
 12910 6964 C9 60			cmp #$60
 12911 6966 D0 05			jne l_22CB
 12912 6968 A9 11			lda #$11
 12913 696A 8D FA 9D			sta DEFLECT
 12914 696D			l_22CB
 12915
 12916 				; optimize OK (service.pas), line = 2266
 12917
 12918 696D AD FB 9D			lda AROUND
 12919 6970 29 E0			and #$E0
 12920 6972 C9 80			cmp #$80
 12921 6974 D0 05			jne l_22E8
 12922 6976 A9 02			lda #$02
 12923 6978 8D FA 9D			sta DEFLECT
 12924 697B			l_22E8
 12925
 12926 				; optimize OK (service.pas), line = 2267
 12927
 12928 697B AD FB 9D			lda AROUND
 12929 697E 29 E0			and #$E0
 12930 6980 C9 A0			cmp #$A0
 12931 6982 D0 05			jne l_2305
 12932 6984 A9 12			lda #$12
 12933 6986 8D FA 9D			sta DEFLECT
 12934 6989			l_2305
 12935
 12936 				; optimize OK (service.pas), line = 2268
 12937
 12938 6989 AD FB 9D			lda AROUND
 12939 698C 29 E0			and #$E0
 12940 698E C9 C0			cmp #$C0
 12941 6990 D0 05			jne l_2322
 12942 6992 A9 22			lda #$22
 12943 6994 8D FA 9D			sta DEFLECT
 12944 6997			l_2322
 12945
 12946 				; optimize OK (service.pas), line = 2270
 12947
 12948 6997 A9 06			lda #$06
 12949 6999 8D F8 9D			sta EMERGENCY
 12950
 12951 				; optimize OK (service.pas), line = 2271
 12952
 12953 699C A0 00			ldy #$00
 12954 699E AD E1 9D			lda YB
 12955 69A1 10 01			spl
 12956 69A3 88				dey
 12957 69A4 18 69 01			add #$01
 12958 69A7 8D CC 9D			sta SHOOT_BLOCK.YB
 12959 69AA 90 01			scc
 12960 69AC C8				iny
 12961 69AD 8C CD 9D			sty SHOOT_BLOCK.YB+1
 12962 69B0 A0 00			ldy #$00
 12963 69B2 AD E0 9D			lda XB
 12964 69B5 10 01			spl
 12965 69B7 88				dey
 12966 69B8 38 E9 01			sub #$01
 12967 69BB 8D CA 9D			sta SHOOT_BLOCK.XB
 12968 69BE 98				tya
 12969 69BF E9 00			sbc #$00
 12970 69C1 8D CB 9D			sta SHOOT_BLOCK.XB+1
 12971 69C4 AD D8 9D			lda BALL
 12972 69C7 8D CE 9D			sta SHOOT_BLOCK.BALL
 12973 69CA AD D9 9D			lda BALL+1
 12974 69CD 8D CF 9D			sta SHOOT_BLOCK.BALL+1
 12975 69D0 20 79 5B			jsr SHOOT_BLOCK
 12976 69D3			l_225D
 12977
 12978 				; optimize OK (service.pas), line = 2274
 12979
 12980 69D3 AD FD 9D			lda TOUCH
 12981 69D6 C9 03			cmp #$03
 12982 69D8 F0 03 4C 79 6A		jne l_2352
 12983
 12984 				; optimize OK (service.pas), line = 2276
 12985
 12986 69DD AD FB 9D			lda AROUND
 12987 69E0 29 38			and #$38
 12988 69E2 D0 05			jne l_2369
 12989 69E4 A9 22			lda #$22
 12990 69E6 8D FA 9D			sta DEFLECT
 12991 69E9			l_2369
 12992
 12993 				; optimize OK (service.pas), line = 2277
 12994
 12995 69E9 AD FB 9D			lda AROUND
 12996 69EC 29 38			and #$38
 12997 69EE C9 08			cmp #$08
 12998 69F0 D0 05			jne l_2386
 12999 69F2 A9 02			lda #$02
 13000 69F4 8D FA 9D			sta DEFLECT
 13001 69F7			l_2386
 13002
 13003 				; optimize OK (service.pas), line = 2278
 13004
 13005 69F7 AD FB 9D			lda AROUND
 13006 69FA 29 38			and #$38
 13007 69FC C9 10			cmp #$10
 13008 69FE D0 05			jne l_23A3
 13009 6A00 A9 33			lda #$33
 13010 6A02 8D FA 9D			sta DEFLECT
 13011 6A05			l_23A3
 13012
 13013 				; optimize OK (service.pas), line = 2279
 13014
 13015 6A05 AD FB 9D			lda AROUND
 13016 6A08 29 38			and #$38
 13017 6A0A C9 18			cmp #$18
 13018 6A0C D0 05			jne l_23C0
 13019 6A0E A9 12			lda #$12
 13020 6A10 8D FA 9D			sta DEFLECT
 13021 6A13			l_23C0
 13022
 13023 				; optimize OK (service.pas), line = 2280
 13024
 13025 6A13 AD FB 9D			lda AROUND
 13026 6A16 29 38			and #$38
 13027 6A18 C9 20			cmp #$20
 13028 6A1A D0 05			jne l_23DD
 13029 6A1C A9 20			lda #$20
 13030 6A1E 8D FA 9D			sta DEFLECT
 13031 6A21			l_23DD
 13032
 13033 				; optimize OK (service.pas), line = 2281
 13034
 13035 6A21 AD FB 9D			lda AROUND
 13036 6A24 29 38			and #$38
 13037 6A26 C9 28			cmp #$28
 13038 6A28 D0 05			jne l_23FA
 13039 6A2A A9 22			lda #$22
 13040 6A2C 8D FA 9D			sta DEFLECT
 13041 6A2F			l_23FA
 13042
 13043 				; optimize OK (service.pas), line = 2282
 13044
 13045 6A2F AD FB 9D			lda AROUND
 13046 6A32 29 38			and #$38
 13047 6A34 C9 30			cmp #$30
 13048 6A36 D0 05			jne l_2417
 13049 6A38 A9 21			lda #$21
 13050 6A3A 8D FA 9D			sta DEFLECT
 13051 6A3D			l_2417
 13052
 13053 				; optimize OK (service.pas), line = 2284
 13054
 13055 6A3D A9 07			lda #$07
 13056 6A3F 8D F8 9D			sta EMERGENCY
 13057
 13058 				; optimize OK (service.pas), line = 2285
 13059
 13060 6A42 A0 00			ldy #$00
 13061 6A44 AD E1 9D			lda YB
 13062 6A47 10 01			spl
 13063 6A49 88				dey
 13064 6A4A 18 69 01			add #$01
 13065 6A4D 8D CC 9D			sta SHOOT_BLOCK.YB
 13066 6A50 90 01			scc
 13067 6A52 C8				iny
 13068 6A53 8C CD 9D			sty SHOOT_BLOCK.YB+1
 13069 6A56 A0 00			ldy #$00
 13070 6A58 AD E0 9D			lda XB
 13071 6A5B 10 01			spl
 13072 6A5D 88				dey
 13073 6A5E 18 69 01			add #$01
 13074 6A61 8D CA 9D			sta SHOOT_BLOCK.XB
 13075 6A64 90 01			scc
 13076 6A66 C8				iny
 13077 6A67 8C CB 9D			sty SHOOT_BLOCK.XB+1
 13078 6A6A AD D8 9D			lda BALL
 13079 6A6D 8D CE 9D			sta SHOOT_BLOCK.BALL
 13080 6A70 AD D9 9D			lda BALL+1
 13081 6A73 8D CF 9D			sta SHOOT_BLOCK.BALL+1
 13082 6A76 20 79 5B			jsr SHOOT_BLOCK
 13083 6A79			l_2352
 13084
 13085 				; optimize OK (service.pas), line = 2291
 13086
 13087 6A79 AD FA 9D			lda DEFLECT
 13088 6A7C 4A				lsr @
 13089 6A7D 4A				lsr @
 13090 6A7E 4A				lsr @
 13091 6A7F 4A				lsr @
 13092 6A80 8D F4 9D			sta MYX
 13093 6A83 A9 00			lda #$00
 13094 6A85 8D F5 9D			sta MYX+1
 13095
 13096 				; optimize OK (service.pas), line = 2292
 13097
 13098 6A88 AD FA 9D			lda DEFLECT
 13099 6A8B 29 0F			and #$0F
 13100 6A8D 8D F6 9D			sta MYY
 13101 6A90 A9 00			lda #$00
 13102 6A92 8D F7 9D			sta MYY+1
 13103
 13104 				; optimize OK (service.pas), line = 2294
 13105
 13106 6A95 AD F5 9D			lda MYX+1
 13107 6A98 D0 05			bne @+
 13108 6A9A AD F4 9D			lda MYX
 13109 6A9D C9 01			cmp #$01
 13110 				@
 13111 6A9F D0 50			jne l_245A
 13112 6AA1 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13113 6AAB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13114 6AAD B1 84			lda (:bp2),y
 13115 6AAF 85 8A			sta SYSTEM.ABS.@010184000.X
 13116 6AB1 C8				iny
 13117 6AB2 B1 84			lda (:bp2),y
 13118 6AB4 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13119 6AB6 20 5A 1B			jsr SYSTEM.ABS.@010184000
 13120 6AB9 E8				inx
 13121 6ABA A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13122 6ABE A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13123 6AC2 A9 00			lda #$00
 13124 6AC4 38 F5 96			sub :STACKORIGIN,x
 13125 6AC7 95 96			sta :STACKORIGIN,x
 13126 6AC9 A9 00			lda #$00
 13127 6ACB F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13128 6ACD 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13129 6ACF A9 00			lda #$00
 13130 6AD1 E9 00			sbc #$00
 13131 6AD3 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13132 6AD5 A9 00			lda #$00
 13133 6AD7 E9 00			sbc #$00
 13134 6AD9 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13135 6ADB AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13136 6AE5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13137 6AE7 B5 96			lda :STACKORIGIN,x
 13138 6AE9 91 84			sta (:bp2),y
 13139 6AEB C8				iny
 13140 6AEC B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13141 6AEE 91 84			sta (:bp2),y
 13142 6AF0 CA				dex
 13143 6AF1			l_245A
 13144
 13145 				; optimize OK (service.pas), line = 2295
 13146
 13147 6AF1 AD F5 9D			lda MYX+1
 13148 6AF4 D0 05			bne @+
 13149 6AF6 AD F4 9D			lda MYX
 13150 6AF9 C9 02			cmp #$02
 13151 				@
 13152 6AFB D0 2D			jne l_2477
 13153 6AFD AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13154 6B07 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13155 6B09 B1 84			lda (:bp2),y
 13156 6B0B 85 8A			sta SYSTEM.ABS.@010184000.X
 13157 6B0D C8				iny
 13158 6B0E B1 84			lda (:bp2),y
 13159 6B10 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13160 6B12 20 5A 1B			jsr SYSTEM.ABS.@010184000
 13161 6B15 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13162 6B1F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13163 6B21 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13164 6B23 91 84			sta (:bp2),y
 13165 6B25 C8				iny
 13166 6B26 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13167 6B28 91 84			sta (:bp2),y
 13168 6B2A			l_2477
 13169
 13170 				; optimize OK (service.pas), line = 2296
 13171
 13172 6B2A AD F5 9D			lda MYX+1
 13173 6B2D D0 05			bne @+
 13174 6B2F AD F4 9D			lda MYX
 13175 6B32 C9 03			cmp #$03
 13176 				@
 13177 6B34 D0 25			jne l_2491
 13178 6B36 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13179 6B40 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13180 6B42 A9 00			lda #$00
 13181 6B44 38 F1 84			sub (:bp2),y
 13182 6B47 85 9F			sta :STACKORIGIN+9
 13183 6B49 C8				iny
 13184 6B4A A9 00			lda #$00
 13185 6B4C F1 84			sbc (:bp2),y
 13186 6B4E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13187 6B50 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13188 6B52 A5 9F			lda :STACKORIGIN+9
 13189 6B54 91 84			sta (:bp2),y
 13190 6B56 C8				iny
 13191 6B57 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13192 6B59 91 84			sta (:bp2),y
 13193 6B5B			l_2491
 13194
 13195 				; optimize OK (service.pas), line = 2298
 13196
 13197 6B5B AD F7 9D			lda MYY+1
 13198 6B5E D0 05			bne @+
 13199 6B60 AD F6 9D			lda MYY
 13200 6B63 C9 01			cmp #$01
 13201 				@
 13202 6B65 D0 50			jne l_24AD
 13203 6B67 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13204 6B71 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13205 6B73 B1 84			lda (:bp2),y
 13206 6B75 85 8A			sta SYSTEM.ABS.@010184000.X
 13207 6B77 C8				iny
 13208 6B78 B1 84			lda (:bp2),y
 13209 6B7A 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13210 6B7C 20 5A 1B			jsr SYSTEM.ABS.@010184000
 13211 6B7F E8				inx
 13212 6B80 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13213 6B84 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13214 6B88 A9 00			lda #$00
 13215 6B8A 38 F5 96			sub :STACKORIGIN,x
 13216 6B8D 95 96			sta :STACKORIGIN,x
 13217 6B8F A9 00			lda #$00
 13218 6B91 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13219 6B93 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13220 6B95 A9 00			lda #$00
 13221 6B97 E9 00			sbc #$00
 13222 6B99 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13223 6B9B A9 00			lda #$00
 13224 6B9D E9 00			sbc #$00
 13225 6B9F 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13226 6BA1 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13227 6BAB A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13228 6BAD B5 96			lda :STACKORIGIN,x
 13229 6BAF 91 84			sta (:bp2),y
 13230 6BB1 C8				iny
 13231 6BB2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13232 6BB4 91 84			sta (:bp2),y
 13233 6BB6 CA				dex
 13234 6BB7			l_24AD
 13235
 13236 				; optimize OK (service.pas), line = 2299
 13237
 13238 6BB7 AD F7 9D			lda MYY+1
 13239 6BBA D0 05			bne @+
 13240 6BBC AD F6 9D			lda MYY
 13241 6BBF C9 02			cmp #$02
 13242 				@
 13243 6BC1 D0 2D			jne l_24CA
 13244 6BC3 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13245 6BCD A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13246 6BCF B1 84			lda (:bp2),y
 13247 6BD1 85 8A			sta SYSTEM.ABS.@010184000.X
 13248 6BD3 C8				iny
 13249 6BD4 B1 84			lda (:bp2),y
 13250 6BD6 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13251 6BD8 20 5A 1B			jsr SYSTEM.ABS.@010184000
 13252 6BDB AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13253 6BE5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13254 6BE7 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13255 6BE9 91 84			sta (:bp2),y
 13256 6BEB C8				iny
 13257 6BEC A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13258 6BEE 91 84			sta (:bp2),y
 13259 6BF0			l_24CA
 13260
 13261 				; optimize OK (service.pas), line = 2300
 13262
 13263 6BF0 AD F7 9D			lda MYY+1
 13264 6BF3 D0 05			bne @+
 13265 6BF5 AD F6 9D			lda MYY
 13266 6BF8 C9 03			cmp #$03
 13267 				@
 13268 6BFA D0 25			jne l_24E4
 13269 6BFC AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13270 6C06 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13271 6C08 A9 00			lda #$00
 13272 6C0A 38 F1 84			sub (:bp2),y
 13273 6C0D 85 9F			sta :STACKORIGIN+9
 13274 6C0F C8				iny
 13275 6C10 A9 00			lda #$00
 13276 6C12 F1 84			sbc (:bp2),y
 13277 6C14 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13278 6C16 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13279 6C18 A5 9F			lda :STACKORIGIN+9
 13280 6C1A 91 84			sta (:bp2),y
 13281 6C1C C8				iny
 13282 6C1D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13283 6C1F 91 84			sta (:bp2),y
 13284 6C21			l_24E4
 13285 6C21			l_1ED5
 13286 6C21			l_1BFA
 13287
 13288 				; optimize OK (service.pas), line = 2310
 13289
 13290 6C21 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13291 6C2B A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13292 6C2D B1 84			lda (:bp2),y
 13293 6C2F C9 65			cmp #$65
 13294 6C31 B0 03 4C FC 6D		jcc l_2505
 13295
 13296 				; optimize OK (service.pas), line = 2313
 13297
 13298 6C36 AD F8 9D			lda EMERGENCY
 13299 6C39 C9 FF			cmp #$FF
 13300 6C3B D0 05			jne l_2518
 13301 6C3D A9 04			lda #$04
 13302 6C3F 20 9B 2E			jsr FATAL_ERROR
 13303 6C42			l_2518
 13304
 13305 				; optimize OK (service.pas), line = 2315
 13306
 13307 6C42 AC F8 9D			ldy EMERGENCY
 13308 6C45 B9 AF 10			lda adr.EMERG_DEV,y
 13309 6C48 8D F9 9D			sta MIMAX
 13310
 13311 				; optimize OK (service.pas), line = 2341
 13312
 13313 6C4B 98				tya
 13314 6C4C 8D 07 9E			sta @CASETMP_0009
 13315 6C4F C9 05			cmp #$05
 13316 6C51 D0 1F			jne l_2531
 13317 				@
 13318
 13319 				; optimize OK (service.pas), line = 2344
 13320
 13321 6C53 AD 01 9E			lda adr.ADJW+$03
 13322 6C56 D0 08			jne l_2548
 13323 6C58 AD F9 9D			lda MIMAX
 13324 6C5B 29 0F			and #$0F
 13325 6C5D 8D F9 9D			sta MIMAX
 13326 6C60			l_2548
 13327
 13328 				; optimize OK (service.pas), line = 2345
 13329
 13330 6C60 AD FF 9D			lda adr.ADJW+$01
 13331 6C63 D0 0A			jne l_2570
 13332 6C65 AD F9 9D			lda MIMAX
 13333 6C68 29 F0			and #$F0
 13334 6C6A 09 03			ora #$03
 13335 6C6C 8D F9 9D			sta MIMAX
 13336 6C6F			l_2570
 13337 6C6F 4C DE 6C			jmp a_0009
 13338 6C72			l_2531
 13339 6C72 C9 06			cmp #$06
 13340 6C74 D0 21			jne l_2588
 13341
 13342 				; optimize OK (service.pas), line = 2349
 13343
 13344 6C76 AD FF 9D			lda adr.ADJW+$01
 13345 6C79 D0 0A			jne l_259F
 13346 6C7B AD F9 9D			lda MIMAX
 13347 6C7E 29 0F			and #$0F
 13348 6C80 09 10			ora #$10
 13349 6C82 8D F9 9D			sta MIMAX
 13350 6C85			l_259F
 13351
 13352 				; optimize OK (service.pas), line = 2350
 13353
 13354 6C85 AD 03 9E			lda adr.ADJW+$05
 13355 6C88 D0 0A			jne l_25C7
 13356 6C8A AD F9 9D			lda MIMAX
 13357 6C8D 29 F0			and #$F0
 13358 6C8F 09 04			ora #$04
 13359 6C91 8D F9 9D			sta MIMAX
 13360 6C94			l_25C7
 13361 6C94 4C DE 6C			jmp a_0009
 13362 6C97			l_2588
 13363 6C97 C9 07			cmp #$07
 13364 6C99 D0 21			jne l_25DF
 13365
 13366 				; optimize OK (service.pas), line = 2354
 13367
 13368 6C9B AD 03 9E			lda adr.ADJW+$05
 13369 6C9E D0 0A			jne l_25F6
 13370 6CA0 AD F9 9D			lda MIMAX
 13371 6CA3 29 0F			and #$0F
 13372 6CA5 09 20			ora #$20
 13373 6CA7 8D F9 9D			sta MIMAX
 13374 6CAA			l_25F6
 13375
 13376 				; optimize OK (service.pas), line = 2355
 13377
 13378 6CAA AD 05 9E			lda adr.ADJW+$07
 13379 6CAD D0 0A			jne l_261E
 13380 6CAF AD F9 9D			lda MIMAX
 13381 6CB2 29 F0			and #$F0
 13382 6CB4 09 05			ora #$05
 13383 6CB6 8D F9 9D			sta MIMAX
 13384 6CB9			l_261E
 13385 6CB9 4C DE 6C			jmp a_0009
 13386 6CBC			l_25DF
 13387 6CBC C9 08			cmp #$08
 13388 6CBE D0 1E			jne l_2636
 13389
 13390 				; optimize OK (service.pas), line = 2359
 13391
 13392 6CC0 AD 05 9E			lda adr.ADJW+$07
 13393 6CC3 D0 0A			jne l_264D
 13394 6CC5 AD F9 9D			lda MIMAX
 13395 6CC8 29 0F			and #$0F
 13396 6CCA 09 30			ora #$30
 13397 6CCC 8D F9 9D			sta MIMAX
 13398 6CCF			l_264D
 13399
 13400 				; optimize OK (service.pas), line = 2360
 13401
 13402 6CCF AD 01 9E			lda adr.ADJW+$03
 13403 6CD2 D0 0A			jne l_2675
 13404 6CD4 AD F9 9D			lda MIMAX
 13405 6CD7 29 F0			and #$F0
 13406 6CD9 09 06			ora #$06
 13407 6CDB 8D F9 9D			sta MIMAX
 13408 6CDE			l_2675
 13409 6CDE			l_2636
 13410 6CDE			a_0009
 13411
 13412 				; --- RepeatUntilProlog
 13413 6CDE			l_268D
 13414
 13415 				; optimize OK (service.pas), line = 2367
 13416
 13417 6CDE AD F9 9D			lda MIMAX
 13418 6CE1 4A				lsr @
 13419 6CE2 4A				lsr @
 13420 6CE3 4A				lsr @
 13421 6CE4 4A				lsr @
 13422 6CE5 85 8E			sta :ecx
 13423 6CE7 A9 5A			lda #$5A
 13424 6CE9 85 86			sta :eax
 13425 					.ifdef fmulinit
 13426 					fmulu_8
 13427 					els
 13428 6CEB 20 0C 13			imulCL
 13429 					eif
 13430 6CEE A5 86			lda :eax
 13431 6CF0 8D DE 9D			sta LX
 13432
 13433 				; optimize OK (service.pas), line = 2368
 13434
 13435 6CF3 AD F9 9D			lda MIMAX
 13436 6CF6 29 0F			and #$0F
 13437 6CF8 85 8E			sta :ecx
 13438 6CFA A9 5A			lda #$5A
 13439 6CFC 85 86			sta :eax
 13440 					.ifdef fmulinit
 13441 					fmulu_8
 13442 					els
 13443 6CFE 20 0C 13			imulCL
 13444 					eif
 13445 6D01 8D EB 9D			sta MX+1
 13446 6D04 A5 86			lda :eax
 13447 6D06 8D EA 9D			sta MX
 13448
 13449 				; optimize OK (service.pas), line = 2370
 13450
 13451 6D09 A0 00			ldy #$00
 13452 6D0B AD DE 9D			lda LX
 13453 6D0E 10 01			spl
 13454 6D10 88				dey
 13455 6D11 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 13456 6D13 85 A0			sta :STACKORIGIN+10
 13457 6D15 AD EA 9D			lda MX
 13458 6D18 38 E5 A0			sub :STACKORIGIN+10
 13459 6D1B 8D D2 97			sta SYSTEM.RANDOM.@010184000.RANGE
 13460 6D1E AD EB 9D			lda MX+1
 13461 6D21 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 13462 6D23 8D D3 97			sta SYSTEM.RANDOM.@010184000.RANGE+1
 13463 6D26 20 38 26			jsr SYSTEM.RANDOM.@010184000
 13464 6D29 E8				inx
 13465 6D2A AD D4 97 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 13466 6D2F AD D5 97 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13467 6D34 E8				inx
 13468 6D35 AD DE 9D 95 96		mva LX :STACKORIGIN,x
 13469 6D3A 20 66 11			jsr @expandSHORT2SMALL
 13470 6D3D 20 E5 10			jsr addAX_CX
 13471 6D40 CA				dex
 13472 6D41 B5 96			lda :STACKORIGIN,x
 13473 6D43 8D F2 9D			sta ANGLE
 13474 6D46 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13475 6D48 8D F3 9D			sta ANGLE+1
 13476 6D4B CA				dex
 13477
 13478 				; optimize OK (service.pas), line = 2375
 13479
 13480 6D4C A9 5A			lda #$5A
 13481 6D4E 85 8E			sta @SMALLINT.MOD.B
 13482 6D50 A9 00			lda #$00
 13483 6D52 85 8F			sta @SMALLINT.MOD.B+1
 13484 6D54 AD F2 9D			lda ANGLE
 13485 6D57 85 86			sta @SMALLINT.MOD.A
 13486 6D59 AD F3 9D			lda ANGLE+1
 13487 6D5C 85 87			sta @SMALLINT.MOD.A+1
 13488 6D5E 20 9D 12			jsr @SMALLINT.MOD
 13489 6D61 A5 92			lda @SMALLINT.MOD.RESULT
 13490 6D63 C9 1F			cmp #$1F
 13491 6D65 A5 93			lda @SMALLINT.MOD.RESULT+1
 13492 6D67 E9 00			sbc #$00
 13493 6D69 50 02			svc
 13494 6D6B 49 80			eor #$80
 13495 6D6D 10 03 4C DE 6C		jmi l_268D
 13496 6D72 A9 5A			lda #$5A
 13497 6D74 85 8E			sta @SMALLINT.MOD.B
 13498 6D76 A9 00			lda #$00
 13499 6D78 85 8F			sta @SMALLINT.MOD.B+1
 13500 6D7A AD F2 9D			lda ANGLE
 13501 6D7D 85 86			sta @SMALLINT.MOD.A
 13502 6D7F AD F3 9D			lda ANGLE+1
 13503 6D82 85 87			sta @SMALLINT.MOD.A+1
 13504 6D84 20 9D 12			jsr @SMALLINT.MOD
 13505 6D87 A5 92			lda @SMALLINT.MOD.RESULT
 13506 6D89 C9 3C			cmp #$3C
 13507 6D8B A5 93			lda @SMALLINT.MOD.RESULT+1
 13508 6D8D E9 00			sbc #$00
 13509 6D8F 50 02			svc
 13510 6D91 49 80			eor #$80
 13511 6D93 30 03 4C DE 6C		jpl l_268D
 13512
 13513 				; optimize OK (service.pas), line = 2379
 13514
 13515 6D98 A9 68			lda #$68
 13516 6D9A 85 8E			sta @SMALLINT.MOD.B
 13517 6D9C A9 01			lda #$01
 13518 6D9E 85 8F			sta @SMALLINT.MOD.B+1
 13519 6DA0 AD F2 9D			lda ANGLE
 13520 6DA3 85 86			sta @SMALLINT.MOD.A
 13521 6DA5 AD F3 9D			lda ANGLE+1
 13522 6DA8 85 87			sta @SMALLINT.MOD.A+1
 13523 6DAA 20 9D 12			jsr @SMALLINT.MOD
 13524 6DAD A5 92			lda @SMALLINT.MOD.RESULT
 13525 6DAF 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 13526 6DB2 A5 93			lda @SMALLINT.MOD.RESULT+1
 13527 6DB4 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 13528 6DB7 AD D8 9D			lda BALL
 13529 6DBA 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 13530 6DBD AD D9 9D			lda BALL+1
 13531 6DC0 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 13532 6DC3 20 60 39			jsr SET_BALL_DIRECTION
 13533
 13534 				; optimize OK (service.pas), line = 2380
 13535
 13536 6DC6 AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13537 6DD0 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 13538 6DD2 B1 84			lda (:bp2),y
 13539 6DD4 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 13540 6DD7 C8				iny
 13541 6DD8 B1 84			lda (:bp2),y
 13542 6DDA 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 13543 6DDD AD D8 9D			lda BALL
 13544 6DE0 8D 28 9D			sta SET_BALL_SPEED.BALL
 13545 6DE3 AD D9 9D			lda BALL+1
 13546 6DE6 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 13547 6DE9 20 40 37			jsr SET_BALL_SPEED
 13548
 13549 				; optimize OK (service.pas), line = 2382
 13550
 13551 6DEC AC D8 9D 84 84 AC + 	mwy BALL :bp2
 13552 6DF6 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13553 6DF8 A9 00			lda #$00
 13554 6DFA 91 84			sta (:bp2),y
 13555 6DFC			l_2505
 13556
 13557 				; ------------------------------------------------------------
 13558
 13559 = 9DD8			BALL	= DATAORIGIN+$064C
 13560 = 978C			BALL.X	= DATAORIGIN+$0000
 13561 = 978E			BALL.Y	= DATAORIGIN+$0002
 13562 = 9790			BALL.FINEX	= DATAORIGIN+$0004
 13563 = 9792			BALL.FINEY	= DATAORIGIN+$0006
 13564 = 9794			BALL.OLDX	= DATAORIGIN+$0008
 13565 = 9796			BALL.OLDY	= DATAORIGIN+$000A
 13566 = 9798			BALL.SPEED	= DATAORIGIN+$000C
 13567 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
 13568 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
 13569 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
 13570 = 97A0			BALL.SBD	= DATAORIGIN+$0014
 13571 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
 13572 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
 13573 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
 13574 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
 13575 = 97A6			BALL.STM	= DATAORIGIN+$001A
 13576 = 9DDC			X	= DATAORIGIN+$0650
 13577 = 9DDD			Y	= DATAORIGIN+$0651
 13578 = 9DDE			LX	= DATAORIGIN+$0652
 13579 = 9DDF			LY	= DATAORIGIN+$0653
 13580 = 9DE0			XB	= DATAORIGIN+$0654
 13581 = 9DE1			YB	= DATAORIGIN+$0655
 13582 = 9DE2			OX	= DATAORIGIN+$0656
 13583 = 9DE4			OY	= DATAORIGIN+$0658
 13584 = 9DE6			NX	= DATAORIGIN+$065A
 13585 = 9DE8			NY	= DATAORIGIN+$065C
 13586 = 9DEA			MX	= DATAORIGIN+$065E
 13587 = 9DEC			MY	= DATAORIGIN+$0660
 13588 = 9DEE			F1	= DATAORIGIN+$0662
 13589 = 9DF0			F2	= DATAORIGIN+$0664
 13590 = 9DF2			ANGLE	= DATAORIGIN+$0666
 13591 = 9DF4			MYX	= DATAORIGIN+$0668
 13592 = 9DF6			MYY	= DATAORIGIN+$066A
 13593 = 9DF8			EMERGENCY	= DATAORIGIN+$066C
 13594 = 9DF9			MIMAX	= DATAORIGIN+$066D
 13595 = 9DFA			DEFLECT	= DATAORIGIN+$066E
 13596 = 9DFB			AROUND	= DATAORIGIN+$066F
 13597 = 9DFC			COLLISION	= DATAORIGIN+$0670
 13598 = 9DFD			TOUCH	= DATAORIGIN+$0671
 13599 = 9DFE			adr.ADJW	= [DATAORIGIN+$0672] .array [3] [3]
 13600 6DFC			.var ADJW	= adr.ADJW .word
 13601 = 9E07			@CASETMP_0009	= DATAORIGIN+$067B
 13602
 13603 = 9DD8			@VarData	= BALL
 13604 = 0028			@VarDataSize	= 40
 13605
 13606 6DFC			@exit
 13607 					.ifdef @new
 13608 					lda <@VarData
 13609 					sta :ztmp
 13610 					lda >@VarData
 13611 					ldy #@VarDataSize-1
 13612 					jmp @FreeMem
 13613 					els
 13614 6DFC 60				rts						; ret
 13615 					eif
 13616 = 6DFD FE 9D		ADJW
 13616 				.endl
 13617
 13618 6DFF			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 13619
 13620 				; optimize OK (service.pas), line = 2397
 13621
 13622 6DFF A9 00			lda #$00
 13623 6E01 8D 0E 9E			sta K
 13624 6E04 8D 0F 9E			sta K+1
 13625
 13626 6E07			l_26FB
 13627 				; --- ForToDoCondition
 13628 6E07 AD 0F 9E			lda K+1
 13629 6E0A C9 01			cmp #$01
 13630 6E0C 90 0B			bcc @+
 13631 6E0E D0 48			jne l_2707
 13632 6E10 AD 0E 9E			lda K
 13633 6E13 C9 3F			cmp #$3F
 13634 6E15 90 02			bcc @+
 13635 6E17 D0 3F			jne l_2707
 13636 				@
 13637
 13638 				; optimize OK (service.pas), line = 2398
 13639
 13640 6E19 AC 08 9E 84 84 AC + 	mwy PATT :bp2
 13641 6E23 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13642 6E25 B1 84			lda (:bp2),y
 13643 6E27 85 8E			sta @WORD.MOD.B
 13644 6E29 C8				iny
 13645 6E2A B1 84			lda (:bp2),y
 13646 6E2C 85 8F			sta @WORD.MOD.B+1
 13647 6E2E AD 0E 9E			lda K
 13648 6E31 85 86			sta @WORD.MOD.A
 13649 6E33 AD 0F 9E			lda K+1
 13650 6E36 85 87			sta @WORD.MOD.A+1
 13651 6E38 20 ED 13			jsr @WORD.MOD
 13652 6E3B A5 92			lda @WORD.MOD.RESULT
 13653 6E3D 85 A0			sta :STACKORIGIN+10
 13654 6E3F AC 0E 9E			ldy K
 13655 6E42 A9 C4			lda #$C4
 13656 6E44 18 6D 0F 9E			add K+1
 13657 6E48 85 83			sta :bp+1
 13658 6E4A A5 A0			lda :STACKORIGIN+10
 13659 6E4C 91 82			sta (:bp),y
 13660
 13661 				; --- ForToDoEpilog
 13662 6E4E EE 0E 9E			inc K
 13663 6E51 D0 B4			jne l_26FB
 13664 6E53 EE 0F 9E			inc K+1
 13665 6E56 D0 AF			jne l_26FB
 13666 6E58			l_2707
 13667
 13668 				; optimize OK (service.pas), line = 2402
 13669
 13670 6E58 A9 00			lda #$00
 13671 6E5A 8D 11 9E			sta Y
 13672
 13673 6E5D			l_2721
 13674 				; --- ForToDoCondition
 13675 6E5D AD 11 9E			lda Y
 13676 6E60 C9 C8			cmp #$C8
 13677 6E62 B0 2E			jcs l_272F
 13678
 13679 				; optimize OK (service.pas), line = 2403
 13680
 13681 6E64 AC 08 9E 84 84 AC + 	mwy PATT :bp2
 13682 6E6E A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 13683 6E70 B1 84			lda (:bp2),y
 13684 6E72 85 8E			sta @WORD.MOD.B
 13685 6E74 C8				iny
 13686 6E75 B1 84			lda (:bp2),y
 13687 6E77 85 8F			sta @WORD.MOD.B+1
 13688 6E79 AD 11 9E			lda Y
 13689 6E7C 85 86			sta @WORD.MOD.A
 13690 6E7E A9 00			lda #$00
 13691 6E80 85 87			sta @WORD.MOD.A+1
 13692 6E82 20 ED 13			jsr @WORD.MOD
 13693 6E85 A5 92			lda @WORD.MOD.RESULT
 13694 6E87 AC 11 9E			ldy Y
 13695 6E8A 99 00 C3			sta adr.MODY,y
 13696
 13697 				; --- ForToDoEpilog
 13698 6E8D EE 11 9E			inc Y
 13699 6E90 D0 CB			jne l_2721
 13700 6E92			l_272F
 13701
 13702 				; optimize OK (service.pas), line = 2408
 13703
 13704 6E92 A9 0A			lda #$0A
 13705 6E94 8D 11 9E			sta Y
 13706
 13707 6E97			l_274B
 13708 				; --- ForToDoCondition
 13709 6E97 AC 11 9E			ldy Y
 13710 6E9A C0 C7			cpy #$C7
 13711 6E9C 90 03 4C CD 6F		jcs l_2759
 13712
 13713 				; optimize OK (service.pas), line = 2410
 13714
 13715 6EA1 B9 00 C3			lda adr.MODY,y
 13716 6EA4 85 86			sta :eax
 13717 6EA6 AC 08 9E 84 84 AC + 	mwy PATT :bp2
 13718 6EB0 A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13719 6EB2 B1 84			lda (:bp2),y
 13720 6EB4 85 8E			sta :ecx
 13721 6EB6 C8				iny
 13722 6EB7 B1 84			lda (:bp2),y
 13723 6EB9 85 8F			sta :ecx+1
 13724 6EBB A9 00			lda #$00
 13725 6EBD 85 87			sta :eax+1
 13726 					.ifdef fmulinit
 13727 					fmulu_16
 13728 					els
 13729 6EBF 20 58 13			imulCX
 13730 					eif
 13731 6EC2 A5 86			lda :eax
 13732 6EC4 8D 0C 9E			sta YB
 13733 6EC7 A5 87			lda :eax+1
 13734 6EC9 8D 0D 9E			sta YB+1
 13735
 13736 				; optimize OK (service.pas), line = 2411
 13737
 13738 6ECC A9 00			lda #$00
 13739 6ECE 8D 0E 9E			sta K
 13740 6ED1 8D 0F 9E			sta K+1
 13741
 13742 				; optimize OK (service.pas), line = 2412
 13743
 13744 6ED4 A9 09			lda #$09
 13745 6ED6 8D 10 9E			sta X
 13746
 13747 6ED9			l_2774
 13748 				; --- ForToDoCondition
 13749 6ED9 AD 10 9E			lda X
 13750 6EDC C9 D8			cmp #$D8
 13751 6EDE 90 03 4C 7D 6F		jcs l_2782
 13752
 13753 				; optimize OK (service.pas), line = 2415
 13754
 13755 6EE3 AC 08 9E 84 84 AC + 	mwy PATT :bp2
 13756 6EED A0 04			ldy #PATT.OFS-DATAORIGIN
 13757 6EEF B1 84			lda (:bp2),y
 13758 6EF1 85 9F			sta :STACKORIGIN+9
 13759 6EF3 C8				iny
 13760 6EF4 B1 84			lda (:bp2),y
 13761 6EF6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13762 6EF8 C8				iny
 13763 6EF9 B1 84			lda (:bp2),y
 13764 6EFB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13765 6EFD C8				iny
 13766 6EFE B1 84			lda (:bp2),y
 13767 6F00 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13768 6F02 AC 10 9E			ldy X
 13769 6F05 A5 9F			lda :STACKORIGIN+9
 13770 6F07 18 79 00 C4			add $C400,y
 13771 6F0B 85 9F			sta :STACKORIGIN+9
 13772 6F0D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13773 6F0F 69 00			adc #$00
 13774 6F11 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13775 6F13 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13776 6F15 69 00			adc #$00
 13777 6F17 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13778 6F19 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13779 6F1B 69 00			adc #$00
 13780 6F1D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13781 6F1F A5 9F			lda :STACKORIGIN+9
 13782 6F21 18 6D 0C 9E			add YB
 13783 6F25 8D C8 9C			sta GETBYTE.SRC
 13784 6F28 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13785 6F2A 6D 0D 9E			adc YB+1
 13786 6F2D 8D C9 9C			sta GETBYTE.SRC+1
 13787 6F30 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13788 6F32 69 00			adc #$00
 13789 6F34 8D CA 9C			sta GETBYTE.SRC+2
 13790 6F37 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13791 6F39 69 00			adc #$00
 13792 6F3B 8D CB 9C			sta GETBYTE.SRC+3
 13793 6F3E 20 1B 2E			jsr GETBYTE
 13794 6F41 AD CC 9C			lda GETBYTE.RESULT
 13795 6F44 8D 12 9E			sta CL
 13796
 13797 				; optimize OK (service.pas), line = 2417
 13798
 13799 6F47 A9 80			lda #$80
 13800 6F49 8D 13 9E			sta SHADOW
 13801
 13802 				; optimize OK (service.pas), line = 2422
 13803
 13804 6F4C AD 11 9E			lda Y
 13805 6F4F C9 10			cmp #$10
 13806 6F51 90 07			jcc l_27B7x
 13807 6F53 AD 10 9E			lda X
 13808 6F56 C9 12			cmp #$12
 13809 6F58 B0 05			jcs l_27B7
 13810 6F5A			l_27B7x
 13811 6F5A A9 00			lda #$00
 13812 6F5C 8D 13 9E			sta SHADOW
 13813 6F5F			l_27B7
 13814
 13815 				; optimize OK (service.pas), line = 2427
 13816
 13817 6F5F AD 12 9E			lda CL
 13818 6F62 29 7F			and #$7F
 13819 6F64 0D 13 9E			ora SHADOW
 13820 6F67 AC 0E 9E			ldy K
 13821 6F6A 99 00 C2			sta adr.TMP,y
 13822
 13823 				; optimize FAIL (0, service.pas), line = 2428
 13824
 13825 6F6D EE 0E 9E			inc K
 13826 6F70 D0 03			sne
 13827 6F72 EE 0F 9E			inc K+1
 13828
 13829 				; --- ForToDoEpilog
 13830 6F75 EE 10 9E			inc X
 13831 6F78 F0 03 4C D9 6E		jne l_2774
 13832 6F7D			l_2782
 13833
 13834 				; optimize OK (service.pas), line = 2431
 13835
 13836 6F7D AD 91 98			lda PLAYSCREEN.OFS
 13837 6F80 18 69 09			add #$09
 13838 6F83 85 A0			sta :STACKORIGIN+10
 13839 6F85 AD 92 98			lda PLAYSCREEN.OFS+1
 13840 6F88 69 00			adc #$00
 13841 6F8A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13842 6F8C AD 93 98			lda PLAYSCREEN.OFS+2
 13843 6F8F 69 00			adc #$00
 13844 6F91 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13845 6F93 AD 94 98			lda PLAYSCREEN.OFS+3
 13846 6F96 69 00			adc #$00
 13847 6F98 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13848 6F9A AC 11 9E			ldy Y
 13849 6F9D A5 A0			lda :STACKORIGIN+10
 13850 6F9F 18 79 00 C0			add adr.ROW,y
 13851 6FA3 8D A8 9C			sta BLITTMP.DST
 13852 6FA6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13853 6FA8 79 00 C1			adc adr.ROW+256,y
 13854 6FAB 8D A9 9C			sta BLITTMP.DST+1
 13855 6FAE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13856 6FB0 69 00			adc #$00
 13857 6FB2 8D AA 9C			sta BLITTMP.DST+2
 13858 6FB5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13859 6FB7 69 00			adc #$00
 13860 6FB9 8D AB 9C			sta BLITTMP.DST+3
 13861 6FBC AD 0E 9E			lda K
 13862 6FBF 8D AC 9C			sta BLITTMP.SIZE
 13863 6FC2 20 F3 2C			jsr BLITTMP
 13864
 13865 				; --- ForToDoEpilog
 13866 6FC5 EE 11 9E			inc Y
 13867 6FC8 F0 03 4C 97 6E		jne l_274B
 13868 6FCD			l_2759
 13869
 13870 				; ------------------------------------------------------------
 13871
 13872 = 9E08			PATT	= DATAORIGIN+$067C
 13873 = 978C			PATT.WIDTH	= DATAORIGIN+$0000
 13874 = 978E			PATT.HEIGHT	= DATAORIGIN+$0002
 13875 = 9790			PATT.OFS	= DATAORIGIN+$0004
 13876 = 9E0C			YB	= DATAORIGIN+$0680
 13877 = 9E0E			K	= DATAORIGIN+$0682
 13878 = 9E10			X	= DATAORIGIN+$0684
 13879 = 9E11			Y	= DATAORIGIN+$0685
 13880 = 9E12			CL	= DATAORIGIN+$0686
 13881 = 9E13			SHADOW	= DATAORIGIN+$0687
 13882
 13883 = 9E08			@VarData	= PATT
 13884 = 000A			@VarDataSize	= 10
 13885
 13886 6FCD			@exit
 13887 					.ifdef @new
 13888 					lda <@VarData
 13889 					sta :ztmp
 13890 					lda >@VarData
 13891 					ldy #@VarDataSize-1
 13892 					jmp @FreeMem
 13893 					els
 13894 6FCD 60				rts						; ret
 13895 					eif
 13896 				.endl
 13897
 13898 6FCE			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 13899
 13900 				; ------------------------------------------------------------
 13901
 13902 = 9E14			X	= DATAORIGIN+$0688
 13903 = 9E16			Y	= DATAORIGIN+$068A
 13904
 13905 = 9E14			@VarData	= X
 13906 = 0004			@VarDataSize	= 4
 13907
 13908 6FCE			@exit
 13909 					.ifdef @new
 13910 					lda <@VarData
 13911 					sta :ztmp
 13912 					lda >@VarData
 13913 					ldy #@VarDataSize-1
 13914 					jmp @FreeMem
 13915 					els
 13916 6FCE 60				rts						; ret
 13917 					eif
 13918 				.endl
 13919
 13920 6FCF			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13921
 13922 				; optimize OK (service.pas), line = 2546
 13923
 13924 6FCF A9 81			lda #$81
 13925 6FD1 8D 18 9E			sta Y
 13926
 13927 6FD4			l_2803
 13928 				; --- ForToDoCondition
 13929 6FD4 AC 18 9E			ldy Y
 13930 6FD7 C0 A1			cpy #$A1
 13931 6FD9 B0 6C			jcs l_2811
 13932
 13933 				; optimize OK (service.pas), line = 2549
 13934
 13935 6FDB A9 48			lda #$48
 13936 6FDD 79 00 C0			adc adr.ROW,y
 13937 6FE0 8D B2 9C			sta BLITROW.DST
 13938 6FE3 A9 50			lda #$50
 13939 6FE5 79 00 C1			adc adr.ROW+256,y
 13940 6FE8 8D B3 9C			sta BLITROW.DST+1
 13941 6FEB A9 00			lda #$00
 13942 6FED 69 00			adc #$00
 13943 6FEF 8D B4 9C			sta BLITROW.DST+2
 13944 6FF2 A9 00			lda #$00
 13945 6FF4 69 00			adc #$00
 13946 6FF6 8D B5 9C			sta BLITROW.DST+3
 13947 6FF9 AD 91 98			lda PLAYSCREEN.OFS
 13948 6FFC 18 69 48			add #$48
 13949 6FFF 85 A1			sta :STACKORIGIN+11
 13950 7001 AD 92 98			lda PLAYSCREEN.OFS+1
 13951 7004 69 00			adc #$00
 13952 7006 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 13953 7008 AD 93 98			lda PLAYSCREEN.OFS+2
 13954 700B 69 00			adc #$00
 13955 700D 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 13956 700F AD 94 98			lda PLAYSCREEN.OFS+3
 13957 7012 69 00			adc #$00
 13958 7014 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 13959 7016 A5 A1			lda :STACKORIGIN+11
 13960 7018 18 79 00 C0			add adr.ROW,y
 13961 701C 8D AE 9C			sta BLITROW.SRC
 13962 701F A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 13963 7021 79 00 C1			adc adr.ROW+256,y
 13964 7024 8D AF 9C			sta BLITROW.SRC+1
 13965 7027 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 13966 7029 69 00			adc #$00
 13967 702B 8D B0 9C			sta BLITROW.SRC+2
 13968 702E A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 13969 7030 69 00			adc #$00
 13970 7032 8D B1 9C			sta BLITROW.SRC+3
 13971 7035 A9 58			lda #$58
 13972 7037 8D B6 9C			sta BLITROW.SIZE
 13973 703A A9 00			lda #$00
 13974 703C 8D B7 9C			sta BLITROW.SIZE+1
 13975 703F 20 2C 2D			jsr BLITROW
 13976
 13977 				; --- ForToDoEpilog
 13978 7042 EE 18 9E			inc Y
 13979 7045 D0 8D			jne l_2803
 13980 7047			l_2811
 13981
 13982 				; ------------------------------------------------------------
 13983
 13984 = 9E18			Y	= DATAORIGIN+$068C
 13985
 13986 = 9E18			@VarData	= Y
 13987 = 0001			@VarDataSize	= 1
 13988
 13989 7047			@exit
 13990 					.ifdef @new
 13991 					lda <@VarData
 13992 					sta :ztmp
 13993 					lda >@VarData
 13994 					ldy #@VarDataSize-1
 13995 					jmp @FreeMem
 13996 					els
 13997 7047 60				rts						; ret
 13998 					eif
 13999 				.endl
 14000
 14001 7048			.local	GAME_OVER					; PROCEDURE
 14002
 14003 				; ------------------------------------------------------------
 14004
 14005 = 9E19			X	= DATAORIGIN+$068D
 14006 = 9E1B			Y	= DATAORIGIN+$068F
 14007 = 9E1D			adr.SC	= [DATAORIGIN+$0691] .array [21]
 14008 7048			.var SC	= adr.SC .word
 14009
 14010 = 9E19			@VarData	= X
 14011 = 0019			@VarDataSize	= 25
 14012
 14013 7048			@exit
 14014 					.ifdef @new
 14015 					lda <@VarData
 14016 					sta :ztmp
 14017 					lda >@VarData
 14018 					ldy #@VarDataSize-1
 14019 					jmp @FreeMem
 14020 					els
 14021 7048 60				rts						; ret
 14022 					eif
 14023 = 7049 1D 9E		SC
 14023 				.endl
 14024
 14025 704B			.local	DESTROY_VAUS					; PROCEDURE
 14026
 14027 				; optimize OK (service.pas), line = 2593
 14028
 14029 704B AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 14030
 14031 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2594
 14032
 14033 707B 20 09 45			jsr MODIFY_VAUS
 14034
 14035 				; optimize OK (service.pas), line = 2596
 14036
 14037 707E AD 05 99			lda VAUS.X
 14038 7081 8D 7A 9D			sta MOVE_VAUS.X
 14039 7084 A9 00			lda #$00
 14040 7086 8D 7B 9D			sta MOVE_VAUS.X+1
 14041 7089 AD 06 99			lda VAUS.Y
 14042 708C 8D 7C 9D			sta MOVE_VAUS.Y
 14043 708F A9 00			lda #$00
 14044 7091 8D 7D 9D			sta MOVE_VAUS.Y+1
 14045 7094 20 6B 47			jsr MOVE_VAUS
 14046
 14047 				; optimize OK (service.pas), line = 2598
 14048
 14049 7097 AD 05 99			lda VAUS.X
 14050 709A 38 E9 04			sub #$04
 14051 709D 8D 34 9E			sta A
 14052 70A0 A9 00			lda #$00
 14053 70A2 E9 00			sbc #$00
 14054 70A4 8D 35 9E			sta A+1
 14055
 14056 				; optimize OK (service.pas), line = 2599
 14057
 14058 70A7 AD 06 99			lda VAUS.Y
 14059 70AA 38 E9 05			sub #$05
 14060 70AD 8D 36 9E			sta B
 14061 70B0 A9 00			lda #$00
 14062 70B2 E9 00			sbc #$00
 14063 70B4 8D 37 9E			sta B+1
 14064
 14065 				; optimize OK (service.pas), line = 2602
 14066
 14067 70B7 A9 00			lda #$00
 14068 70B9 8D 38 9E			sta W
 14069
 14070 70BC			l_2861
 14071 				; --- ForToDoCondition
 14072 70BC AD 38 9E			lda W
 14073 70BF C9 07			cmp #$07
 14074 70C1 90 03 4C D2 72		jcs l_286F
 14075
 14076 				; optimize OK (service.pas), line = 2604
 14077
 14078 70C6 A9 00			lda #$00
 14079 70C8 8D 3A 9E			sta Y
 14080
 14081 70CB			l_2878
 14082 				; --- ForToDoCondition
 14083 70CB AD 3A 9E			lda Y
 14084 70CE C9 10			cmp #$10
 14085 70D0 90 03 4C BC 72		jcs l_2886
 14086
 14087 				; optimize OK (service.pas), line = 2606
 14088
 14089 70D5 AD B5 98			lda EXPLOSION.WIDTH
 14090 70D8 85 8E			sta :ecx
 14091 70DA AD B6 98			lda EXPLOSION.WIDTH+1
 14092 70DD 85 8F			sta :ecx+1
 14093 70DF AD 3A 9E			lda Y
 14094 70E2 85 86			sta :eax
 14095 70E4 A9 00			lda #$00
 14096 70E6 85 87			sta :eax+1
 14097 					.ifdef fmulinit
 14098 					fmulu_16
 14099 					els
 14100 70E8 20 9C 13			imulCX_AL
 14101 					eif
 14102 70EB A5 86			lda :eax
 14103 70ED 85 9F			sta :STACKORIGIN+9
 14104 70EF A5 87			lda :eax+1
 14105 70F1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14106 70F3 AD B5 98			lda EXPLOSION.WIDTH
 14107 70F6 85 A1			sta :STACKORIGIN+11
 14108 70F8 AD B6 98			lda EXPLOSION.WIDTH+1
 14109 70FB 06 A1			asl :STACKORIGIN+11
 14110 70FD 2A				rol @
 14111 70FE 06 A1			asl :STACKORIGIN+11
 14112 7100 2A				rol @
 14113 7101 06 A1			asl :STACKORIGIN+11
 14114 7103 2A				rol @
 14115 7104 06 A1			asl :STACKORIGIN+11
 14116 7106 2A				rol @
 14117 7107 85 8F			sta :ecx+1
 14118 7109 A5 A1			lda :STACKORIGIN+11
 14119 710B 85 8E			sta :ecx
 14120 710D AD 38 9E			lda W
 14121 7110 85 86			sta :eax
 14122 7112 A9 00			lda #$00
 14123 7114 85 87			sta :eax+1
 14124 					.ifdef fmulinit
 14125 					fmulu_16
 14126 					els
 14127 7116 20 58 13			imulCX
 14128 					eif
 14129 7119 A5 86			lda :eax
 14130 711B 18 65 9F			add :STACKORIGIN+9
 14131 711E 8D 32 9E			sta Z
 14132 7121 A5 87			lda :eax+1
 14133 7123 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14134 7125 8D 33 9E			sta Z+1
 14135
 14136 				; optimize OK (service.pas), line = 2607
 14137
 14138 7128 A9 00			lda #$00
 14139 712A 8D 39 9E			sta X
 14140 712D AC B5 98			ldy EXPLOSION.WIDTH
 14141 7130 88				dey
 14142 7131 8C 35 71			sty @FORTMP_28AB_0
 14143
 14144 7134			l_28AE
 14145 				; --- ForToDoCondition
 14146 7134 A9 00			lda @FORTMP_28AB_0::#$00
 14147 7136 CD 39 9E			cmp X
 14148 7139 B0 03 4C B4 72		jcc l_28BC
 14149
 14150 				; optimize FAIL (1, service.pas), line = 2611
 14151
 14152 713E E8				inx
 14153 713F A0 01			ldy #1
 14154 7141 AD 38 9E			lda W
 14155 7144 C9 06			cmp #$06
 14156 7146 F0 01			beq @+
 14157 7148 88				dey
 14158 				@
 14159 7149 94 96			sty :STACKORIGIN,x
 14160 714B AD B9 98			lda EXPLOSION.OFS
 14161 714E 18 6D 39 9E			add X
 14162 7152 85 9F			sta :STACKORIGIN+9
 14163 7154 AD BA 98			lda EXPLOSION.OFS+1
 14164 7157 69 00			adc #$00
 14165 7159 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14166 715B AD BB 98			lda EXPLOSION.OFS+2
 14167 715E 69 00			adc #$00
 14168 7160 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14169 7162 AD BC 98			lda EXPLOSION.OFS+3
 14170 7165 69 00			adc #$00
 14171 7167 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14172 7169 A5 9F			lda :STACKORIGIN+9
 14173 716B 18 6D 32 9E			add Z
 14174 716F 8D C8 9C			sta GETBYTE.SRC
 14175 7172 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14176 7174 6D 33 9E			adc Z+1
 14177 7177 8D C9 9C			sta GETBYTE.SRC+1
 14178 717A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14179 717C 69 00			adc #$00
 14180 717E 8D CA 9C			sta GETBYTE.SRC+2
 14181 7181 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14182 7183 69 00			adc #$00
 14183 7185 8D CB 9C			sta GETBYTE.SRC+3
 14184 7188 20 1B 2E			jsr GETBYTE
 14185 718B CA				dex
 14186 718C A0 01			ldy #1
 14187 718E AD CC 9C			lda GETBYTE.RESULT
 14188 7191 F0 01			beq @+
 14189 7193 88				dey
 14190 				@
 14191 7194 98				tya
 14192 7195 15 97			ora :STACKORIGIN+1,x
 14193 7197 D0 03 4C 29 72		jeq l_28E4
 14194
 14195 				; optimize OK (service.pas), line = 2613
 14196
 14197 719C AD 39 9E			lda X
 14198 719F 18 6D 34 9E			add A
 14199 71A3 85 9F			sta :STACKORIGIN+9
 14200 71A5 A9 50			lda #$50
 14201 71A7 6D 35 9E			adc A+1
 14202 71AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14203 71AC A9 00			lda #$00
 14204 71AE 69 00			adc #$00
 14205 71B0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14206 71B2 A9 00			lda #$00
 14207 71B4 69 00			adc #$00
 14208 71B6 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14209 71B8 AD 3A 9E			lda Y
 14210 71BB 18 6D 36 9E			add B
 14211 71BF A8				tay
 14212 71C0 A5 9F			lda :STACKORIGIN+9
 14213 71C2 18 79 00 C0			add adr.ROW,y
 14214 71C6 8D BE 9C			sta BLITBYTE.DST
 14215 71C9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14216 71CB 79 00 C1			adc adr.ROW+256,y
 14217 71CE 8D BF 9C			sta BLITBYTE.DST+1
 14218 71D1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14219 71D3 69 00			adc #$00
 14220 71D5 8D C0 9C			sta BLITBYTE.DST+2
 14221 71D8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14222 71DA 69 00			adc #$00
 14223 71DC 8D C1 9C			sta BLITBYTE.DST+3
 14224 71DF AD 91 98			lda PLAYSCREEN.OFS
 14225 71E2 18 6D 39 9E			add X
 14226 71E6 85 A0			sta :STACKORIGIN+10
 14227 71E8 AD 92 98			lda PLAYSCREEN.OFS+1
 14228 71EB 69 00			adc #$00
 14229 71ED 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14230 71EF AD 93 98			lda PLAYSCREEN.OFS+2
 14231 71F2 69 00			adc #$00
 14232 71F4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14233 71F6 AD 94 98			lda PLAYSCREEN.OFS+3
 14234 71F9 69 00			adc #$00
 14235 71FB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14236 71FD A5 A0			lda :STACKORIGIN+10
 14237 71FF 18 6D 34 9E			add A
 14238 7203 85 A0			sta :STACKORIGIN+10
 14239 7205 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14240 7207 6D 35 9E			adc A+1
 14241 720A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14242 720C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14243 720E 69 00			adc #$00
 14244 7210 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14245 7212 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14246 7214 69 00			adc #$00
 14247 7216 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14248 7218 A5 A0			lda :STACKORIGIN+10
 14249 721A 18 79 00 C0			add adr.ROW,y
 14250 721E 8D BA 9C			sta BLITBYTE.SRC
 14251 7221 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14252 7223 79 00 C1			adc adr.ROW+256,y
 14253 7226 4C 98 72			jmp l_2921
 14254 7229			l_28E4
 14255
 14256 				; optimize OK (service.pas), line = 2616
 14257
 14258 7229 AD 39 9E			lda X
 14259 722C 18 6D 34 9E			add A
 14260 7230 85 9F			sta :STACKORIGIN+9
 14261 7232 A9 50			lda #$50
 14262 7234 6D 35 9E			adc A+1
 14263 7237 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14264 7239 A9 00			lda #$00
 14265 723B 69 00			adc #$00
 14266 723D 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14267 723F A9 00			lda #$00
 14268 7241 69 00			adc #$00
 14269 7243 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14270 7245 AD 3A 9E			lda Y
 14271 7248 18 6D 36 9E			add B
 14272 724C A8				tay
 14273 724D A5 9F			lda :STACKORIGIN+9
 14274 724F 18 79 00 C0			add adr.ROW,y
 14275 7253 8D BE 9C			sta BLITBYTE.DST
 14276 7256 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14277 7258 79 00 C1			adc adr.ROW+256,y
 14278 725B 8D BF 9C			sta BLITBYTE.DST+1
 14279 725E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14280 7260 69 00			adc #$00
 14281 7262 8D C0 9C			sta BLITBYTE.DST+2
 14282 7265 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14283 7267 69 00			adc #$00
 14284 7269 8D C1 9C			sta BLITBYTE.DST+3
 14285 726C AD B9 98			lda EXPLOSION.OFS
 14286 726F 18 6D 39 9E			add X
 14287 7273 85 A0			sta :STACKORIGIN+10
 14288 7275 AD BA 98			lda EXPLOSION.OFS+1
 14289 7278 69 00			adc #$00
 14290 727A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14291 727C AD BB 98			lda EXPLOSION.OFS+2
 14292 727F 69 00			adc #$00
 14293 7281 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14294 7283 AD BC 98			lda EXPLOSION.OFS+3
 14295 7286 69 00			adc #$00
 14296 7288 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14297 728A A5 A0			lda :STACKORIGIN+10
 14298 728C 18 6D 32 9E			add Z
 14299 7290 8D BA 9C			sta BLITBYTE.SRC
 14300 7293 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14301 7295 6D 33 9E			adc Z+1
 14302 7298			l_2921
 14303 7298 8D BB 9C			sta BLITBYTE.SRC+1
 14304 729B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14305 729D 69 00			adc #$00
 14306 729F 8D BC 9C			sta BLITBYTE.SRC+2
 14307 72A2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14308 72A4 69 00			adc #$00
 14309 72A6 8D BD 9C			sta BLITBYTE.SRC+3
 14310 72A9 20 A4 2D			jsr BLITBYTE
 14311
 14312 				; --- ForToDoEpilog
 14313 72AC EE 39 9E			inc X
 14314 72AF F0 03 4C 34 71		jne l_28AE
 14315 72B4			l_28BC
 14316
 14317 				; --- ForToDoEpilog
 14318 72B4 EE 3A 9E			inc Y
 14319 72B7 F0 03 4C CB 70		jne l_2878
 14320 72BC			l_2886
 14321
 14322 				; optimize OK (service.pas), line = 2620
 14323
 14324 72BC AD 38 9E			lda W
 14325 72BF 8D 7F 98			sta DEATH_SOUND.A
 14326 72C2 A9 00			lda #$00
 14327 72C4 8D 80 98			sta DEATH_SOUND.A+1
 14328 72C7 20 5C 2B			jsr DEATH_SOUND
 14329
 14330 				; --- ForToDoEpilog
 14331 72CA EE 38 9E			inc W
 14332 72CD F0 03 4C BC 70		jne l_2861
 14333 72D2			l_286F
 14334
 14335 				; optimize OK (service.pas), line = 2624
 14336
 14337 72D2 A9 07			lda #$07
 14338 72D4 8D 7F 98			sta DEATH_SOUND.A
 14339 72D7 A9 00			lda #$00
 14340 72D9 8D 80 98			sta DEATH_SOUND.A+1
 14341 72DC 20 5C 2B			jsr DEATH_SOUND
 14342
 14343 				; optimize OK (service.pas), line = 2625
 14344
 14345 72DF A9 96			lda #$96
 14346 72E1 8D CD 9C			sta MYDELAY.A
 14347 72E4 A9 00			lda #$00
 14348 72E6 8D CE 9C			sta MYDELAY.A+1
 14349 72E9 20 44 2E			jsr MYDELAY
 14350
 14351 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2626
 14352
 14353 72EC 20 4B 33			jsr DISABLE_LETTER
 14354
 14355 				; ------------------------------------------------------------
 14356
 14357 = 9E32			Z	= DATAORIGIN+$06A6
 14358 = 9E34			A	= DATAORIGIN+$06A8
 14359 = 9E36			B	= DATAORIGIN+$06AA
 14360 = 9E38			W	= DATAORIGIN+$06AC
 14361 = 9E39			X	= DATAORIGIN+$06AD
 14362 = 9E3A			Y	= DATAORIGIN+$06AE
 14363
 14364 = 9E32			@VarData	= Z
 14365 = 0009			@VarDataSize	= 9
 14366
 14367 72EF			@exit
 14368 					.ifdef @new
 14369 					lda <@VarData
 14370 					sta :ztmp
 14371 					lda >@VarData
 14372 					ldy #@VarDataSize-1
 14373 					jmp @FreeMem
 14374 					els
 14375 72EF 60				rts						; ret
 14376 					eif
 14377 				.endl
 14378
 14379 72F0			.local	CREATE_VAUS					; PROCEDURE
 14380
 14381 				; optimize FAIL ('NOSOUND', service.pas), line = 2637
 14382
 14383 72F0 20 43 2E			jsr NOSOUND
 14384
 14385 				; optimize OK (service.pas), line = 2638
 14386
 14387 72F3 A9 5B			lda #$5B
 14388 72F5 8D 41 9E			sta A
 14389 72F8 A9 00			lda #$00
 14390 72FA 8D 42 9E			sta A+1
 14391
 14392 				; optimize OK (service.pas), line = 2639
 14393
 14394 72FD A9 B3			lda #$B3
 14395 72FF 8D 43 9E			sta B
 14396 7302 A9 00			lda #$00
 14397 7304 8D 44 9E			sta B+1
 14398
 14399 				; optimize OK (service.pas), line = 2641
 14400
 14401 7307 A9 0B			lda #$0B
 14402 7309 8D 3E 9E			sta W
 14403
 14404 730C			l_2975
 14405 				; --- ForToDoCondition
 14406 730C A9 00			lda #$00
 14407 730E 8D 3D 9E			sta Y
 14408
 14409 7311			l_298C
 14410 				; --- ForToDoCondition
 14411 7311 AD 3D 9E			lda Y
 14412 7314 C9 10			cmp #$10
 14413 7316 90 03 4C EF 74		jcs l_299A
 14414
 14415 				; optimize OK (service.pas), line = 2645
 14416
 14417 731B AD BD 98			lda NEWVAUS.WIDTH
 14418 731E 85 8E			sta :ecx
 14419 7320 AD BE 98			lda NEWVAUS.WIDTH+1
 14420 7323 85 8F			sta :ecx+1
 14421 7325 AD 3D 9E			lda Y
 14422 7328 85 86			sta :eax
 14423 732A A9 00			lda #$00
 14424 732C 85 87			sta :eax+1
 14425 					.ifdef fmulinit
 14426 					fmulu_16
 14427 					els
 14428 732E 20 9C 13			imulCX_AL
 14429 					eif
 14430 7331 A5 86			lda :eax
 14431 7333 85 9F			sta :STACKORIGIN+9
 14432 7335 A5 87			lda :eax+1
 14433 7337 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14434 7339 A9 10			lda #$10
 14435 733B 85 8E			sta :ecx
 14436 733D A9 00			lda #$00
 14437 733F 85 8F			sta :ecx+1
 14438 7341 AD BD 98			lda NEWVAUS.WIDTH
 14439 7344 85 86			sta :eax
 14440 7346 AD BE 98			lda NEWVAUS.WIDTH+1
 14441 7349 85 87			sta :eax+1
 14442 					.ifdef fmulinit
 14443 					fmulu_16
 14444 					els
 14445 734B 20 58 13			imulCX
 14446 					eif
 14447 734E A5 86			lda :eax
 14448 7350 85 8E			sta :ecx
 14449 7352 A5 87			lda :eax+1
 14450 7354 85 8F			sta :ecx+1
 14451 7356 AD 3E 9E			lda W
 14452 7359 85 86			sta :eax
 14453 735B A9 00			lda #$00
 14454 735D 85 87			sta :eax+1
 14455 					.ifdef fmulinit
 14456 					fmulu_16
 14457 					els
 14458 735F 20 9C 13			imulCX_AL
 14459 					eif
 14460 7362 A5 86			lda :eax
 14461 7364 18 65 9F			add :STACKORIGIN+9
 14462 7367 8D 3F 9E			sta Z
 14463 736A A5 87			lda :eax+1
 14464 736C 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14465 736E 8D 40 9E			sta Z+1
 14466
 14467 				; optimize OK (service.pas), line = 2646
 14468
 14469 7371 A9 00			lda #$00
 14470 7373 8D 3C 9E			sta X
 14471 7376 AC BD 98			ldy NEWVAUS.WIDTH
 14472 7379 88				dey
 14473 737A 8C 7E 73			sty @FORTMP_29BF_0
 14474
 14475 737D			l_29C2
 14476 				; --- ForToDoCondition
 14477 737D A9 00			lda @FORTMP_29BF_0::#$00
 14478 737F CD 3C 9E			cmp X
 14479 7382 B0 03 4C E7 74		jcc l_29D0
 14480
 14481 				; optimize OK (service.pas), line = 2648
 14482
 14483 7387 AD C1 98			lda NEWVAUS.OFS
 14484 738A 18 6D 3C 9E			add X
 14485 738E 85 9F			sta :STACKORIGIN+9
 14486 7390 AD C2 98			lda NEWVAUS.OFS+1
 14487 7393 69 00			adc #$00
 14488 7395 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14489 7397 AD C3 98			lda NEWVAUS.OFS+2
 14490 739A 69 00			adc #$00
 14491 739C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14492 739E AD C4 98			lda NEWVAUS.OFS+3
 14493 73A1 69 00			adc #$00
 14494 73A3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14495 73A5 A5 9F			lda :STACKORIGIN+9
 14496 73A7 18 6D 3F 9E			add Z
 14497 73AB 8D C8 9C			sta GETBYTE.SRC
 14498 73AE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14499 73B0 6D 40 9E			adc Z+1
 14500 73B3 8D C9 9C			sta GETBYTE.SRC+1
 14501 73B6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14502 73B8 69 00			adc #$00
 14503 73BA 8D CA 9C			sta GETBYTE.SRC+2
 14504 73BD A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14505 73BF 69 00			adc #$00
 14506 73C1 8D CB 9C			sta GETBYTE.SRC+3
 14507 73C4 20 1B 2E			jsr GETBYTE
 14508 73C7 AD CC 9C			lda GETBYTE.RESULT
 14509 73CA F0 03 4C 5C 74		jne l_29EC
 14510
 14511 				; optimize OK (service.pas), line = 2650
 14512
 14513 73CF AD 3C 9E			lda X
 14514 73D2 18 6D 41 9E			add A
 14515 73D6 85 9F			sta :STACKORIGIN+9
 14516 73D8 A9 50			lda #$50
 14517 73DA 6D 42 9E			adc A+1
 14518 73DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14519 73DF A9 00			lda #$00
 14520 73E1 69 00			adc #$00
 14521 73E3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14522 73E5 A9 00			lda #$00
 14523 73E7 69 00			adc #$00
 14524 73E9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14525 73EB AD 3D 9E			lda Y
 14526 73EE 18 6D 43 9E			add B
 14527 73F2 A8				tay
 14528 73F3 A5 9F			lda :STACKORIGIN+9
 14529 73F5 18 79 00 C0			add adr.ROW,y
 14530 73F9 8D BE 9C			sta BLITBYTE.DST
 14531 73FC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14532 73FE 79 00 C1			adc adr.ROW+256,y
 14533 7401 8D BF 9C			sta BLITBYTE.DST+1
 14534 7404 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14535 7406 69 00			adc #$00
 14536 7408 8D C0 9C			sta BLITBYTE.DST+2
 14537 740B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14538 740D 69 00			adc #$00
 14539 740F 8D C1 9C			sta BLITBYTE.DST+3
 14540 7412 AD 91 98			lda PLAYSCREEN.OFS
 14541 7415 18 6D 3C 9E			add X
 14542 7419 85 A0			sta :STACKORIGIN+10
 14543 741B AD 92 98			lda PLAYSCREEN.OFS+1
 14544 741E 69 00			adc #$00
 14545 7420 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14546 7422 AD 93 98			lda PLAYSCREEN.OFS+2
 14547 7425 69 00			adc #$00
 14548 7427 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14549 7429 AD 94 98			lda PLAYSCREEN.OFS+3
 14550 742C 69 00			adc #$00
 14551 742E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14552 7430 A5 A0			lda :STACKORIGIN+10
 14553 7432 18 6D 41 9E			add A
 14554 7436 85 A0			sta :STACKORIGIN+10
 14555 7438 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14556 743A 6D 42 9E			adc A+1
 14557 743D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14558 743F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14559 7441 69 00			adc #$00
 14560 7443 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14561 7445 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14562 7447 69 00			adc #$00
 14563 7449 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14564 744B A5 A0			lda :STACKORIGIN+10
 14565 744D 18 79 00 C0			add adr.ROW,y
 14566 7451 8D BA 9C			sta BLITBYTE.SRC
 14567 7454 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14568 7456 79 00 C1			adc adr.ROW+256,y
 14569 7459 4C CB 74			jmp l_2A29
 14570 745C			l_29EC
 14571
 14572 				; optimize OK (service.pas), line = 2653
 14573
 14574 745C AD 3C 9E			lda X
 14575 745F 18 6D 41 9E			add A
 14576 7463 85 9F			sta :STACKORIGIN+9
 14577 7465 A9 50			lda #$50
 14578 7467 6D 42 9E			adc A+1
 14579 746A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14580 746C A9 00			lda #$00
 14581 746E 69 00			adc #$00
 14582 7470 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14583 7472 A9 00			lda #$00
 14584 7474 69 00			adc #$00
 14585 7476 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14586 7478 AD 3D 9E			lda Y
 14587 747B 18 6D 43 9E			add B
 14588 747F A8				tay
 14589 7480 A5 9F			lda :STACKORIGIN+9
 14590 7482 18 79 00 C0			add adr.ROW,y
 14591 7486 8D BE 9C			sta BLITBYTE.DST
 14592 7489 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14593 748B 79 00 C1			adc adr.ROW+256,y
 14594 748E 8D BF 9C			sta BLITBYTE.DST+1
 14595 7491 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14596 7493 69 00			adc #$00
 14597 7495 8D C0 9C			sta BLITBYTE.DST+2
 14598 7498 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14599 749A 69 00			adc #$00
 14600 749C 8D C1 9C			sta BLITBYTE.DST+3
 14601 749F AD C1 98			lda NEWVAUS.OFS
 14602 74A2 18 6D 3C 9E			add X
 14603 74A6 85 A0			sta :STACKORIGIN+10
 14604 74A8 AD C2 98			lda NEWVAUS.OFS+1
 14605 74AB 69 00			adc #$00
 14606 74AD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14607 74AF AD C3 98			lda NEWVAUS.OFS+2
 14608 74B2 69 00			adc #$00
 14609 74B4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14610 74B6 AD C4 98			lda NEWVAUS.OFS+3
 14611 74B9 69 00			adc #$00
 14612 74BB 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14613 74BD A5 A0			lda :STACKORIGIN+10
 14614 74BF 18 6D 3F 9E			add Z
 14615 74C3 8D BA 9C			sta BLITBYTE.SRC
 14616 74C6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14617 74C8 6D 40 9E			adc Z+1
 14618 74CB			l_2A29
 14619 74CB 8D BB 9C			sta BLITBYTE.SRC+1
 14620 74CE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14621 74D0 69 00			adc #$00
 14622 74D2 8D BC 9C			sta BLITBYTE.SRC+2
 14623 74D5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14624 74D7 69 00			adc #$00
 14625 74D9 8D BD 9C			sta BLITBYTE.SRC+3
 14626 74DC 20 A4 2D			jsr BLITBYTE
 14627
 14628 				; --- ForToDoEpilog
 14629 74DF EE 3C 9E			inc X
 14630 74E2 F0 03 4C 7D 73		jne l_29C2
 14631 74E7			l_29D0
 14632
 14633 				; --- ForToDoEpilog
 14634 74E7 EE 3D 9E			inc Y
 14635 74EA F0 03 4C 11 73		jne l_298C
 14636 74EF			l_299A
 14637
 14638 				; optimize OK (service.pas), line = 2657
 14639
 14640 74EF A9 01			lda #$01
 14641 74F1 8D CD 9C			sta MYDELAY.A
 14642 74F4 A9 00			lda #$00
 14643 74F6 8D CE 9C			sta MYDELAY.A+1
 14644 74F9 20 44 2E			jsr MYDELAY
 14645
 14646 				; --- ForToDoEpilog
 14647 74FC CE 3E 9E			dec W
 14648 74FF 30 03 4C 0C 73		jpl l_2975
 14649 7504			l_2983
 14650
 14651 				; ------------------------------------------------------------
 14652
 14653 = 9E3C			X	= DATAORIGIN+$06B0
 14654 = 9E3D			Y	= DATAORIGIN+$06B1
 14655 = 9E3E			W	= DATAORIGIN+$06B2
 14656 = 9E3F			Z	= DATAORIGIN+$06B3
 14657 = 9E41			A	= DATAORIGIN+$06B5
 14658 = 9E43			B	= DATAORIGIN+$06B7
 14659
 14660 = 9E3C			@VarData	= X
 14661 = 0009			@VarDataSize	= 9
 14662
 14663 7504			@exit
 14664 					.ifdef @new
 14665 					lda <@VarData
 14666 					sta :ztmp
 14667 					lda >@VarData
 14668 					ldy #@VarDataSize-1
 14669 					jmp @FreeMem
 14670 					els
 14671 7504 60				rts						; ret
 14672 					eif
 14673 				.endl
 14674
 14675 7505			.local	PUT_DIGIT					; PROCEDURE
 14676
 14677 				; optimize OK (service.pas), line = 2667
 14678
 14679 7505 A9 DE			lda #$DE
 14680 7507 8D 4E 9E			sta A
 14681
 14682 				; optimize OK (service.pas), line = 2691
 14683
 14684 750A AC 4A 9E			ldy NUM
 14685 750D B9 C6 10			lda adr.DIGITS,y
 14686 7510 29 01			and #$01
 14687 7512 C9 01			cmp #$01
 14688 7514 D0 05			jne l_2A80
 14689 7516 A9 DF			lda #$DF
 14690 7518 8D 4E 9E			sta A
 14691 751B			l_2A80
 14692
 14693 				; optimize OK (service.pas), line = 2692
 14694
 14695 751B A9 01			lda #$01
 14696 751D 8D 4C 9E			sta X
 14697
 14698 7520			l_2A90
 14699 				; --- ForToDoCondition
 14700 7520 AD 4C 9E			lda X
 14701 7523 C9 05			cmp #$05
 14702 7525 B0 63			jcs l_2A9E
 14703
 14704 				; optimize OK (service.pas), line = 2694
 14705
 14706 7527 AD 46 9E			lda PX
 14707 752A 85 A0			sta :STACKORIGIN+10
 14708 752C A9 50			lda #$50
 14709 752E 18 6D 47 9E			add PX+1
 14710 7532 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14711 7534 A9 00			lda #$00
 14712 7536 69 00			adc #$00
 14713 7538 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14714 753A A9 00			lda #$00
 14715 753C 69 00			adc #$00
 14716 753E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14717 7540 A5 A0			lda :STACKORIGIN+10
 14718 7542 18 6D 4C 9E			add X
 14719 7546 85 A0			sta :STACKORIGIN+10
 14720 7548 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14721 754A 69 00			adc #$00
 14722 754C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14723 754E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14724 7550 69 00			adc #$00
 14725 7552 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14726 7554 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14727 7556 69 00			adc #$00
 14728 7558 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14729 755A AC 48 9E			ldy PY
 14730 755D A5 A0			lda :STACKORIGIN+10
 14731 755F 18 79 00 C0			add adr.ROW,y
 14732 7563 8D C3 9C			sta PUTBYTE.DST
 14733 7566 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14734 7568 79 00 C1			adc adr.ROW+256,y
 14735 756B 8D C4 9C			sta PUTBYTE.DST+1
 14736 756E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14737 7570 69 00			adc #$00
 14738 7572 8D C5 9C			sta PUTBYTE.DST+2
 14739 7575 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14740 7577 69 00			adc #$00
 14741 7579 8D C6 9C			sta PUTBYTE.DST+3
 14742 757C AD 4E 9E			lda A
 14743 757F 8D C7 9C			sta PUTBYTE.V
 14744 7582 20 F3 2D			jsr PUTBYTE
 14745
 14746 				; --- ForToDoEpilog
 14747 7585 EE 4C 9E			inc X
 14748 7588 D0 96			jne l_2A90
 14749 758A			l_2A9E
 14750
 14751 				; optimize OK (service.pas), line = 2698
 14752
 14753 758A A9 DE			lda #$DE
 14754 758C 8D 4E 9E			sta A
 14755
 14756 				; optimize OK (service.pas), line = 2699
 14757
 14758 758F AC 4A 9E			ldy NUM
 14759 7592 B9 C6 10			lda adr.DIGITS,y
 14760 7595 29 02			and #$02
 14761 7597 C9 02			cmp #$02
 14762 7599 D0 05			jne l_2AD6
 14763 759B A9 DF			lda #$DF
 14764 759D 8D 4E 9E			sta A
 14765 75A0			l_2AD6
 14766
 14767 				; optimize OK (service.pas), line = 2700
 14768
 14769 75A0 A9 01			lda #$01
 14770 75A2 8D 4C 9E			sta X
 14771
 14772 75A5			l_2AE6
 14773 				; --- ForToDoCondition
 14774 75A5 AD 4C 9E			lda X
 14775 75A8 C9 05			cmp #$05
 14776 75AA B0 63			jcs l_2AF4
 14777
 14778 				; optimize OK (service.pas), line = 2702
 14779
 14780 75AC AD 46 9E			lda PX
 14781 75AF 85 A0			sta :STACKORIGIN+10
 14782 75B1 A9 50			lda #$50
 14783 75B3 18 6D 47 9E			add PX+1
 14784 75B7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14785 75B9 A9 00			lda #$00
 14786 75BB 69 00			adc #$00
 14787 75BD 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14788 75BF A9 00			lda #$00
 14789 75C1 69 00			adc #$00
 14790 75C3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14791 75C5 A5 A0			lda :STACKORIGIN+10
 14792 75C7 18 6D 4C 9E			add X
 14793 75CB 85 A0			sta :STACKORIGIN+10
 14794 75CD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14795 75CF 69 00			adc #$00
 14796 75D1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14797 75D3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14798 75D5 69 00			adc #$00
 14799 75D7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14800 75D9 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14801 75DB 69 00			adc #$00
 14802 75DD 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14803 75DF AC 48 9E			ldy PY
 14804 75E2 A5 A0			lda :STACKORIGIN+10
 14805 75E4 18 79 05 C0			add adr.ROW+$05,y
 14806 75E8 8D C3 9C			sta PUTBYTE.DST
 14807 75EB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14808 75ED 79 05 C1			adc adr.ROW+256+$05,y
 14809 75F0 8D C4 9C			sta PUTBYTE.DST+1
 14810 75F3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14811 75F5 69 00			adc #$00
 14812 75F7 8D C5 9C			sta PUTBYTE.DST+2
 14813 75FA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14814 75FC 69 00			adc #$00
 14815 75FE 8D C6 9C			sta PUTBYTE.DST+3
 14816 7601 AD 4E 9E			lda A
 14817 7604 8D C7 9C			sta PUTBYTE.V
 14818 7607 20 F3 2D			jsr PUTBYTE
 14819
 14820 				; --- ForToDoEpilog
 14821 760A EE 4C 9E			inc X
 14822 760D D0 96			jne l_2AE6
 14823 760F			l_2AF4
 14824
 14825 				; optimize OK (service.pas), line = 2706
 14826
 14827 760F A9 DE			lda #$DE
 14828 7611 8D 4E 9E			sta A
 14829
 14830 				; optimize OK (service.pas), line = 2707
 14831
 14832 7614 AC 4A 9E			ldy NUM
 14833 7617 B9 C6 10			lda adr.DIGITS,y
 14834 761A 29 04			and #$04
 14835 761C C9 04			cmp #$04
 14836 761E D0 05			jne l_2B30
 14837 7620 A9 DF			lda #$DF
 14838 7622 8D 4E 9E			sta A
 14839 7625			l_2B30
 14840
 14841 				; optimize OK (service.pas), line = 2708
 14842
 14843 7625 A9 01			lda #$01
 14844 7627 8D 4C 9E			sta X
 14845
 14846 762A			l_2B40
 14847 				; --- ForToDoCondition
 14848 762A AD 4C 9E			lda X
 14849 762D C9 05			cmp #$05
 14850 762F B0 63			jcs l_2B4E
 14851
 14852 				; optimize OK (service.pas), line = 2710
 14853
 14854 7631 AD 46 9E			lda PX
 14855 7634 85 A0			sta :STACKORIGIN+10
 14856 7636 A9 50			lda #$50
 14857 7638 18 6D 47 9E			add PX+1
 14858 763C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14859 763E A9 00			lda #$00
 14860 7640 69 00			adc #$00
 14861 7642 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14862 7644 A9 00			lda #$00
 14863 7646 69 00			adc #$00
 14864 7648 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14865 764A A5 A0			lda :STACKORIGIN+10
 14866 764C 18 6D 4C 9E			add X
 14867 7650 85 A0			sta :STACKORIGIN+10
 14868 7652 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14869 7654 69 00			adc #$00
 14870 7656 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14871 7658 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14872 765A 69 00			adc #$00
 14873 765C 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14874 765E A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14875 7660 69 00			adc #$00
 14876 7662 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14877 7664 AC 48 9E			ldy PY
 14878 7667 A5 A0			lda :STACKORIGIN+10
 14879 7669 18 79 0A C0			add adr.ROW+$0A,y
 14880 766D 8D C3 9C			sta PUTBYTE.DST
 14881 7670 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14882 7672 79 0A C1			adc adr.ROW+256+$0A,y
 14883 7675 8D C4 9C			sta PUTBYTE.DST+1
 14884 7678 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14885 767A 69 00			adc #$00
 14886 767C 8D C5 9C			sta PUTBYTE.DST+2
 14887 767F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14888 7681 69 00			adc #$00
 14889 7683 8D C6 9C			sta PUTBYTE.DST+3
 14890 7686 AD 4E 9E			lda A
 14891 7689 8D C7 9C			sta PUTBYTE.V
 14892 768C 20 F3 2D			jsr PUTBYTE
 14893
 14894 				; --- ForToDoEpilog
 14895 768F EE 4C 9E			inc X
 14896 7692 D0 96			jne l_2B40
 14897 7694			l_2B4E
 14898
 14899 				; optimize OK (service.pas), line = 2713
 14900
 14901 7694 A9 DE			lda #$DE
 14902 7696 8D 4E 9E			sta A
 14903
 14904 				; optimize OK (service.pas), line = 2714
 14905
 14906 7699 AC 4A 9E			ldy NUM
 14907 769C B9 C6 10			lda adr.DIGITS,y
 14908 769F 29 08			and #$08
 14909 76A1 C9 08			cmp #$08
 14910 76A3 D0 05			jne l_2B8A
 14911 76A5 A9 DF			lda #$DF
 14912 76A7 8D 4E 9E			sta A
 14913 76AA			l_2B8A
 14914
 14915 				; optimize OK (service.pas), line = 2715
 14916
 14917 76AA A9 01			lda #$01
 14918 76AC 8D 4D 9E			sta Y
 14919
 14920 76AF			l_2B9A
 14921 				; --- ForToDoCondition
 14922 76AF AD 4D 9E			lda Y
 14923 76B2 C9 05			cmp #$05
 14924 76B4 B0 4E			jcs l_2BA8
 14925
 14926 				; optimize OK (service.pas), line = 2717
 14927
 14928 76B6 AD 46 9E			lda PX
 14929 76B9 85 A0			sta :STACKORIGIN+10
 14930 76BB A9 50			lda #$50
 14931 76BD 18 6D 47 9E			add PX+1
 14932 76C1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14933 76C3 A9 00			lda #$00
 14934 76C5 69 00			adc #$00
 14935 76C7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14936 76C9 A9 00			lda #$00
 14937 76CB 69 00			adc #$00
 14938 76CD 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14939 76CF AD 48 9E			lda PY
 14940 76D2 18 6D 4D 9E			add Y
 14941 76D6 A8				tay
 14942 76D7 A5 A0			lda :STACKORIGIN+10
 14943 76D9 18 79 00 C0			add adr.ROW,y
 14944 76DD 8D C3 9C			sta PUTBYTE.DST
 14945 76E0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14946 76E2 79 00 C1			adc adr.ROW+256,y
 14947 76E5 8D C4 9C			sta PUTBYTE.DST+1
 14948 76E8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14949 76EA 69 00			adc #$00
 14950 76EC 8D C5 9C			sta PUTBYTE.DST+2
 14951 76EF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14952 76F1 69 00			adc #$00
 14953 76F3 8D C6 9C			sta PUTBYTE.DST+3
 14954 76F6 AD 4E 9E			lda A
 14955 76F9 8D C7 9C			sta PUTBYTE.V
 14956 76FC 20 F3 2D			jsr PUTBYTE
 14957
 14958 				; --- ForToDoEpilog
 14959 76FF EE 4D 9E			inc Y
 14960 7702 D0 AB			jne l_2B9A
 14961 7704			l_2BA8
 14962
 14963 				; optimize OK (service.pas), line = 2720
 14964
 14965 7704 A9 DE			lda #$DE
 14966 7706 8D 4E 9E			sta A
 14967
 14968 				; optimize OK (service.pas), line = 2721
 14969
 14970 7709 AC 4A 9E			ldy NUM
 14971 770C B9 C6 10			lda adr.DIGITS,y
 14972 770F 29 10			and #$10
 14973 7711 C9 10			cmp #$10
 14974 7713 D0 05			jne l_2BE0
 14975 7715 A9 DF			lda #$DF
 14976 7717 8D 4E 9E			sta A
 14977 771A			l_2BE0
 14978
 14979 				; optimize OK (service.pas), line = 2722
 14980
 14981 771A A9 01			lda #$01
 14982 771C 8D 4D 9E			sta Y
 14983
 14984 771F			l_2BF0
 14985 				; --- ForToDoCondition
 14986 771F AD 4D 9E			lda Y
 14987 7722 C9 05			cmp #$05
 14988 7724 B0 4E			jcs l_2BFE
 14989
 14990 				; optimize OK (service.pas), line = 2724
 14991
 14992 7726 AD 46 9E			lda PX
 14993 7729 85 A0			sta :STACKORIGIN+10
 14994 772B A9 50			lda #$50
 14995 772D 18 6D 47 9E			add PX+1
 14996 7731 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14997 7733 A9 00			lda #$00
 14998 7735 69 00			adc #$00
 14999 7737 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15000 7739 A9 00			lda #$00
 15001 773B 69 00			adc #$00
 15002 773D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15003 773F AD 48 9E			lda PY
 15004 7742 18 6D 4D 9E			add Y
 15005 7746 A8				tay
 15006 7747 A5 A0			lda :STACKORIGIN+10
 15007 7749 18 79 05 C0			add adr.ROW+$05,y
 15008 774D 8D C3 9C			sta PUTBYTE.DST
 15009 7750 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15010 7752 79 05 C1			adc adr.ROW+256+$05,y
 15011 7755 8D C4 9C			sta PUTBYTE.DST+1
 15012 7758 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15013 775A 69 00			adc #$00
 15014 775C 8D C5 9C			sta PUTBYTE.DST+2
 15015 775F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15016 7761 69 00			adc #$00
 15017 7763 8D C6 9C			sta PUTBYTE.DST+3
 15018 7766 AD 4E 9E			lda A
 15019 7769 8D C7 9C			sta PUTBYTE.V
 15020 776C 20 F3 2D			jsr PUTBYTE
 15021
 15022 				; --- ForToDoEpilog
 15023 776F EE 4D 9E			inc Y
 15024 7772 D0 AB			jne l_2BF0
 15025 7774			l_2BFE
 15026
 15027 				; optimize OK (service.pas), line = 2727
 15028
 15029 7774 A9 DE			lda #$DE
 15030 7776 8D 4E 9E			sta A
 15031
 15032 				; optimize OK (service.pas), line = 2728
 15033
 15034 7779 AC 4A 9E			ldy NUM
 15035 777C B9 C6 10			lda adr.DIGITS,y
 15036 777F 29 20			and #$20
 15037 7781 C9 20			cmp #$20
 15038 7783 D0 05			jne l_2C3A
 15039 7785 A9 DF			lda #$DF
 15040 7787 8D 4E 9E			sta A
 15041 778A			l_2C3A
 15042
 15043 				; optimize OK (service.pas), line = 2729
 15044
 15045 778A A9 01			lda #$01
 15046 778C 8D 4D 9E			sta Y
 15047
 15048 778F			l_2C4A
 15049 				; --- ForToDoCondition
 15050 778F AD 4D 9E			lda Y
 15051 7792 C9 05			cmp #$05
 15052 7794 B0 4F			jcs l_2C58
 15053
 15054 				; optimize OK (service.pas), line = 2731
 15055
 15056 7796 A9 05			lda #$05
 15057 7798 6D 46 9E			adc PX
 15058 779B 85 A0			sta :STACKORIGIN+10
 15059 779D A9 50			lda #$50
 15060 779F 6D 47 9E			adc PX+1
 15061 77A2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15062 77A4 A9 00			lda #$00
 15063 77A6 69 00			adc #$00
 15064 77A8 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15065 77AA A9 00			lda #$00
 15066 77AC 69 00			adc #$00
 15067 77AE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15068 77B0 AD 48 9E			lda PY
 15069 77B3 18 6D 4D 9E			add Y
 15070 77B7 A8				tay
 15071 77B8 A5 A0			lda :STACKORIGIN+10
 15072 77BA 18 79 00 C0			add adr.ROW,y
 15073 77BE 8D C3 9C			sta PUTBYTE.DST
 15074 77C1 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15075 77C3 79 00 C1			adc adr.ROW+256,y
 15076 77C6 8D C4 9C			sta PUTBYTE.DST+1
 15077 77C9 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15078 77CB 69 00			adc #$00
 15079 77CD 8D C5 9C			sta PUTBYTE.DST+2
 15080 77D0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15081 77D2 69 00			adc #$00
 15082 77D4 8D C6 9C			sta PUTBYTE.DST+3
 15083 77D7 AD 4E 9E			lda A
 15084 77DA 8D C7 9C			sta PUTBYTE.V
 15085 77DD 20 F3 2D			jsr PUTBYTE
 15086
 15087 				; --- ForToDoEpilog
 15088 77E0 EE 4D 9E			inc Y
 15089 77E3 D0 AA			jne l_2C4A
 15090 77E5			l_2C58
 15091
 15092 				; optimize OK (service.pas), line = 2734
 15093
 15094 77E5 A9 DE			lda #$DE
 15095 77E7 8D 4E 9E			sta A
 15096
 15097 				; optimize OK (service.pas), line = 2735
 15098
 15099 77EA AC 4A 9E			ldy NUM
 15100 77ED B9 C6 10			lda adr.DIGITS,y
 15101 77F0 29 40			and #$40
 15102 77F2 C9 40			cmp #$40
 15103 77F4 D0 05			jne l_2C94
 15104 77F6 A9 DF			lda #$DF
 15105 77F8 8D 4E 9E			sta A
 15106 77FB			l_2C94
 15107
 15108 				; optimize OK (service.pas), line = 2736
 15109
 15110 77FB A9 01			lda #$01
 15111 77FD 8D 4D 9E			sta Y
 15112
 15113 7800			l_2CA4
 15114 				; --- ForToDoCondition
 15115 7800 AD 4D 9E			lda Y
 15116 7803 C9 05			cmp #$05
 15117 7805 B0 4F			jcs l_2CB2
 15118
 15119 				; optimize OK (service.pas), line = 2738
 15120
 15121 7807 A9 05			lda #$05
 15122 7809 6D 46 9E			adc PX
 15123 780C 85 A0			sta :STACKORIGIN+10
 15124 780E A9 50			lda #$50
 15125 7810 6D 47 9E			adc PX+1
 15126 7813 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15127 7815 A9 00			lda #$00
 15128 7817 69 00			adc #$00
 15129 7819 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15130 781B A9 00			lda #$00
 15131 781D 69 00			adc #$00
 15132 781F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15133 7821 AD 48 9E			lda PY
 15134 7824 18 6D 4D 9E			add Y
 15135 7828 A8				tay
 15136 7829 A5 A0			lda :STACKORIGIN+10
 15137 782B 18 79 05 C0			add adr.ROW+$05,y
 15138 782F 8D C3 9C			sta PUTBYTE.DST
 15139 7832 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15140 7834 79 05 C1			adc adr.ROW+256+$05,y
 15141 7837 8D C4 9C			sta PUTBYTE.DST+1
 15142 783A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15143 783C 69 00			adc #$00
 15144 783E 8D C5 9C			sta PUTBYTE.DST+2
 15145 7841 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15146 7843 69 00			adc #$00
 15147 7845 8D C6 9C			sta PUTBYTE.DST+3
 15148 7848 AD 4E 9E			lda A
 15149 784B 8D C7 9C			sta PUTBYTE.V
 15150 784E 20 F3 2D			jsr PUTBYTE
 15151
 15152 				; --- ForToDoEpilog
 15153 7851 EE 4D 9E			inc Y
 15154 7854 D0 AA			jne l_2CA4
 15155 7856			l_2CB2
 15156
 15157 				; ------------------------------------------------------------
 15158
 15159 = 9E46			PX	= DATAORIGIN+$06BA
 15160 = 9E48			PY	= DATAORIGIN+$06BC
 15161 = 9E4A			NUM	= DATAORIGIN+$06BE
 15162 = 9E4C			X	= DATAORIGIN+$06C0
 15163 = 9E4D			Y	= DATAORIGIN+$06C1
 15164 = 9E4E			A	= DATAORIGIN+$06C2
 15165
 15166 = 9E46			@VarData	= PX
 15167 = 0009			@VarDataSize	= 9
 15168
 15169 7856			@exit
 15170 					.ifdef @new
 15171 					lda <@VarData
 15172 					sta :ztmp
 15173 					lda >@VarData
 15174 					ldy #@VarDataSize-1
 15175 					jmp @FreeMem
 15176 					els
 15177 7856 60				rts						; ret
 15178 					eif
 15179 				.endl
 15180
 15181 7857			.local	WRITE_SCORE					; PROCEDURE
 15182
 15183 				; optimize OK (service.pas), line = 2749
 15184
 15185 7857 A9 00			lda #$00
 15186 7859 8D 5B 9E			sta F
 15187
 15188 				; optimize OK (service.pas), line = 2754
 15189
 15190 785C A9 A0			lda #$A0
 15191 785E 85 8E			sta @INTEGER.DIV.B
 15192 7860 A9 86			lda #$86
 15193 7862 85 8F			sta @INTEGER.DIV.B+1
 15194 7864 A9 01			lda #$01
 15195 7866 85 90			sta @INTEGER.DIV.B+2
 15196 7868 A9 00			lda #$00
 15197 786A 85 91			sta @INTEGER.DIV.B+3
 15198 786C AD 53 9E			lda SC
 15199 786F 85 86			sta @INTEGER.DIV.A
 15200 7871 AD 54 9E			lda SC+1
 15201 7874 85 87			sta @INTEGER.DIV.A+1
 15202 7876 AD 55 9E			lda SC+2
 15203 7879 85 88			sta @INTEGER.DIV.A+2
 15204 787B AD 56 9E			lda SC+3
 15205 787E 85 89			sta @INTEGER.DIV.A+3
 15206 7880 20 C0 12			jsr @INTEGER.DIV
 15207 7883 A9 0A			lda #$0A
 15208 7885 85 8E			sta @INTEGER.MOD.B
 15209 7887 A9 00			lda #$00
 15210 7889 85 8F			sta @INTEGER.MOD.B+1
 15211 788B 85 90			sta @INTEGER.MOD.B+2
 15212 788D 85 91			sta @INTEGER.MOD.B+3
 15213 788F 20 DD 12			jsr @INTEGER.MOD
 15214 7892 A5 8A			lda @INTEGER.MOD.RESULT
 15215 7894 8D 57 9E			sta N1
 15216 7897 A5 8B			lda @INTEGER.MOD.RESULT+1
 15217 7899 8D 58 9E			sta N1+1
 15218 789C A5 8C			lda @INTEGER.MOD.RESULT+2
 15219 789E 8D 59 9E			sta N1+2
 15220 78A1 A5 8D			lda @INTEGER.MOD.RESULT+3
 15221 78A3 8D 5A 9E			sta N1+3
 15222
 15223 				; optimize OK (service.pas), line = 2755
 15224
 15225 78A6 30 10			jmi l_2CFA
 15226 78A8 0D 59 9E			ora N1+2
 15227 78AB 0D 58 9E			ora N1+1
 15228 78AE 0D 57 9E			ora N1
 15229 78B1 F0 05			jeq l_2CFA
 15230 78B3 A9 01			lda #$01
 15231 78B5 8D 5B 9E			sta F
 15232 78B8			l_2CFA
 15233
 15234 				; optimize OK (service.pas), line = 2756
 15235
 15236 78B8 AD 5B 9E			lda F
 15237 78BB F0 24			jeq l_2D0D
 15238 78BD AD 4F 9E			lda PX
 15239 78C0 8D 46 9E			sta PUT_DIGIT.PX
 15240 78C3 AD 50 9E			lda PX+1
 15241 78C6 8D 47 9E			sta PUT_DIGIT.PX+1
 15242 78C9 AD 51 9E			lda PY
 15243 78CC 8D 48 9E			sta PUT_DIGIT.PY
 15244 78CF AD 52 9E			lda PY+1
 15245 78D2 8D 49 9E			sta PUT_DIGIT.PY+1
 15246 78D5 AD 57 9E			lda N1
 15247 78D8 8D 4A 9E			sta PUT_DIGIT.NUM
 15248 78DB AD 58 9E			lda N1+1
 15249 78DE 4C 00 79			jmp l_2D1D
 15250 78E1			l_2D0D
 15251
 15252 				; optimize OK (service.pas), line = 2757
 15253
 15254 78E1 AD 4F 9E			lda PX
 15255 78E4 8D 46 9E			sta PUT_DIGIT.PX
 15256 78E7 AD 50 9E			lda PX+1
 15257 78EA 8D 47 9E			sta PUT_DIGIT.PX+1
 15258 78ED AD 51 9E			lda PY
 15259 78F0 8D 48 9E			sta PUT_DIGIT.PY
 15260 78F3 AD 52 9E			lda PY+1
 15261 78F6 8D 49 9E			sta PUT_DIGIT.PY+1
 15262 78F9 A9 0A			lda #$0A
 15263 78FB 8D 4A 9E			sta PUT_DIGIT.NUM
 15264 78FE A9 00			lda #$00
 15265 7900			l_2D1D
 15266 7900 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15267 7903 20 05 75			jsr PUT_DIGIT
 15268
 15269 				; optimize OK (service.pas), line = 2760
 15270
 15271 7906 A9 10			lda #$10
 15272 7908 85 8E			sta @INTEGER.DIV.B
 15273 790A A9 27			lda #$27
 15274 790C 85 8F			sta @INTEGER.DIV.B+1
 15275 790E A9 00			lda #$00
 15276 7910 85 90			sta @INTEGER.DIV.B+2
 15277 7912 85 91			sta @INTEGER.DIV.B+3
 15278 7914 AD 53 9E			lda SC
 15279 7917 85 86			sta @INTEGER.DIV.A
 15280 7919 AD 54 9E			lda SC+1
 15281 791C 85 87			sta @INTEGER.DIV.A+1
 15282 791E AD 55 9E			lda SC+2
 15283 7921 85 88			sta @INTEGER.DIV.A+2
 15284 7923 AD 56 9E			lda SC+3
 15285 7926 85 89			sta @INTEGER.DIV.A+3
 15286 7928 20 C0 12			jsr @INTEGER.DIV
 15287 792B A9 0A			lda #$0A
 15288 792D 85 8E			sta @INTEGER.MOD.B
 15289 792F A9 00			lda #$00
 15290 7931 85 8F			sta @INTEGER.MOD.B+1
 15291 7933 85 90			sta @INTEGER.MOD.B+2
 15292 7935 85 91			sta @INTEGER.MOD.B+3
 15293 7937 20 DD 12			jsr @INTEGER.MOD
 15294 793A A5 8A			lda @INTEGER.MOD.RESULT
 15295 793C 8D 57 9E			sta N1
 15296 793F A5 8B			lda @INTEGER.MOD.RESULT+1
 15297 7941 8D 58 9E			sta N1+1
 15298 7944 A5 8C			lda @INTEGER.MOD.RESULT+2
 15299 7946 8D 59 9E			sta N1+2
 15300 7949 A5 8D			lda @INTEGER.MOD.RESULT+3
 15301 794B 8D 5A 9E			sta N1+3
 15302
 15303 				; optimize OK (service.pas), line = 2761
 15304
 15305 794E 30 10			jmi l_2D3F
 15306 7950 0D 59 9E			ora N1+2
 15307 7953 0D 58 9E			ora N1+1
 15308 7956 0D 57 9E			ora N1
 15309 7959 F0 05			jeq l_2D3F
 15310 795B A9 01			lda #$01
 15311 795D 8D 5B 9E			sta F
 15312 7960			l_2D3F
 15313
 15314 				; optimize OK (service.pas), line = 2762
 15315
 15316 7960 AD 5B 9E			lda F
 15317 7963 F0 29			jeq l_2D52
 15318 7965 AD 4F 9E			lda PX
 15319 7968 18 69 07			add #$07
 15320 796B 8D 46 9E			sta PUT_DIGIT.PX
 15321 796E AD 50 9E			lda PX+1
 15322 7971 69 00			adc #$00
 15323 7973 8D 47 9E			sta PUT_DIGIT.PX+1
 15324 7976 AD 51 9E			lda PY
 15325 7979 8D 48 9E			sta PUT_DIGIT.PY
 15326 797C AD 52 9E			lda PY+1
 15327 797F 8D 49 9E			sta PUT_DIGIT.PY+1
 15328 7982 AD 57 9E			lda N1
 15329 7985 8D 4A 9E			sta PUT_DIGIT.NUM
 15330 7988 AD 58 9E			lda N1+1
 15331 798B 4C B2 79			jmp l_2D66
 15332 798E			l_2D52
 15333
 15334 				; optimize OK (service.pas), line = 2763
 15335
 15336 798E AD 4F 9E			lda PX
 15337 7991 18 69 07			add #$07
 15338 7994 8D 46 9E			sta PUT_DIGIT.PX
 15339 7997 AD 50 9E			lda PX+1
 15340 799A 69 00			adc #$00
 15341 799C 8D 47 9E			sta PUT_DIGIT.PX+1
 15342 799F AD 51 9E			lda PY
 15343 79A2 8D 48 9E			sta PUT_DIGIT.PY
 15344 79A5 AD 52 9E			lda PY+1
 15345 79A8 8D 49 9E			sta PUT_DIGIT.PY+1
 15346 79AB A9 0A			lda #$0A
 15347 79AD 8D 4A 9E			sta PUT_DIGIT.NUM
 15348 79B0 A9 00			lda #$00
 15349 79B2			l_2D66
 15350 79B2 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15351 79B5 20 05 75			jsr PUT_DIGIT
 15352
 15353 				; optimize OK (service.pas), line = 2766
 15354
 15355 79B8 A9 E8			lda #$E8
 15356 79BA 85 8E			sta @INTEGER.DIV.B
 15357 79BC A9 03			lda #$03
 15358 79BE 85 8F			sta @INTEGER.DIV.B+1
 15359 79C0 A9 00			lda #$00
 15360 79C2 85 90			sta @INTEGER.DIV.B+2
 15361 79C4 85 91			sta @INTEGER.DIV.B+3
 15362 79C6 AD 53 9E			lda SC
 15363 79C9 85 86			sta @INTEGER.DIV.A
 15364 79CB AD 54 9E			lda SC+1
 15365 79CE 85 87			sta @INTEGER.DIV.A+1
 15366 79D0 AD 55 9E			lda SC+2
 15367 79D3 85 88			sta @INTEGER.DIV.A+2
 15368 79D5 AD 56 9E			lda SC+3
 15369 79D8 85 89			sta @INTEGER.DIV.A+3
 15370 79DA 20 C0 12			jsr @INTEGER.DIV
 15371 79DD A9 0A			lda #$0A
 15372 79DF 85 8E			sta @INTEGER.MOD.B
 15373 79E1 A9 00			lda #$00
 15374 79E3 85 8F			sta @INTEGER.MOD.B+1
 15375 79E5 85 90			sta @INTEGER.MOD.B+2
 15376 79E7 85 91			sta @INTEGER.MOD.B+3
 15377 79E9 20 DD 12			jsr @INTEGER.MOD
 15378 79EC A5 8A			lda @INTEGER.MOD.RESULT
 15379 79EE 8D 57 9E			sta N1
 15380 79F1 A5 8B			lda @INTEGER.MOD.RESULT+1
 15381 79F3 8D 58 9E			sta N1+1
 15382 79F6 A5 8C			lda @INTEGER.MOD.RESULT+2
 15383 79F8 8D 59 9E			sta N1+2
 15384 79FB A5 8D			lda @INTEGER.MOD.RESULT+3
 15385 79FD 8D 5A 9E			sta N1+3
 15386
 15387 				; optimize OK (service.pas), line = 2767
 15388
 15389 7A00 30 10			jmi l_2D8C
 15390 7A02 0D 59 9E			ora N1+2
 15391 7A05 0D 58 9E			ora N1+1
 15392 7A08 0D 57 9E			ora N1
 15393 7A0B F0 05			jeq l_2D8C
 15394 7A0D A9 01			lda #$01
 15395 7A0F 8D 5B 9E			sta F
 15396 7A12			l_2D8C
 15397
 15398 				; optimize OK (service.pas), line = 2768
 15399
 15400 7A12 AD 5B 9E			lda F
 15401 7A15 F0 29			jeq l_2D9F
 15402 7A17 AD 4F 9E			lda PX
 15403 7A1A 18 69 0E			add #$0E
 15404 7A1D 8D 46 9E			sta PUT_DIGIT.PX
 15405 7A20 AD 50 9E			lda PX+1
 15406 7A23 69 00			adc #$00
 15407 7A25 8D 47 9E			sta PUT_DIGIT.PX+1
 15408 7A28 AD 51 9E			lda PY
 15409 7A2B 8D 48 9E			sta PUT_DIGIT.PY
 15410 7A2E AD 52 9E			lda PY+1
 15411 7A31 8D 49 9E			sta PUT_DIGIT.PY+1
 15412 7A34 AD 57 9E			lda N1
 15413 7A37 8D 4A 9E			sta PUT_DIGIT.NUM
 15414 7A3A AD 58 9E			lda N1+1
 15415 7A3D 4C 64 7A			jmp l_2DB3
 15416 7A40			l_2D9F
 15417
 15418 				; optimize OK (service.pas), line = 2769
 15419
 15420 7A40 AD 4F 9E			lda PX
 15421 7A43 18 69 0E			add #$0E
 15422 7A46 8D 46 9E			sta PUT_DIGIT.PX
 15423 7A49 AD 50 9E			lda PX+1
 15424 7A4C 69 00			adc #$00
 15425 7A4E 8D 47 9E			sta PUT_DIGIT.PX+1
 15426 7A51 AD 51 9E			lda PY
 15427 7A54 8D 48 9E			sta PUT_DIGIT.PY
 15428 7A57 AD 52 9E			lda PY+1
 15429 7A5A 8D 49 9E			sta PUT_DIGIT.PY+1
 15430 7A5D A9 0A			lda #$0A
 15431 7A5F 8D 4A 9E			sta PUT_DIGIT.NUM
 15432 7A62 A9 00			lda #$00
 15433 7A64			l_2DB3
 15434 7A64 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15435 7A67 20 05 75			jsr PUT_DIGIT
 15436
 15437 				; optimize OK (service.pas), line = 2772
 15438
 15439 7A6A A9 64			lda #$64
 15440 7A6C 85 8E			sta @INTEGER.DIV.B
 15441 7A6E A9 00			lda #$00
 15442 7A70 85 8F			sta @INTEGER.DIV.B+1
 15443 7A72 85 90			sta @INTEGER.DIV.B+2
 15444 7A74 85 91			sta @INTEGER.DIV.B+3
 15445 7A76 AD 53 9E			lda SC
 15446 7A79 85 86			sta @INTEGER.DIV.A
 15447 7A7B AD 54 9E			lda SC+1
 15448 7A7E 85 87			sta @INTEGER.DIV.A+1
 15449 7A80 AD 55 9E			lda SC+2
 15450 7A83 85 88			sta @INTEGER.DIV.A+2
 15451 7A85 AD 56 9E			lda SC+3
 15452 7A88 85 89			sta @INTEGER.DIV.A+3
 15453 7A8A 20 C0 12			jsr @INTEGER.DIV
 15454 7A8D A9 0A			lda #$0A
 15455 7A8F 85 8E			sta @INTEGER.MOD.B
 15456 7A91 A9 00			lda #$00
 15457 7A93 85 8F			sta @INTEGER.MOD.B+1
 15458 7A95 85 90			sta @INTEGER.MOD.B+2
 15459 7A97 85 91			sta @INTEGER.MOD.B+3
 15460 7A99 20 DD 12			jsr @INTEGER.MOD
 15461 7A9C A5 8A			lda @INTEGER.MOD.RESULT
 15462 7A9E 8D 57 9E			sta N1
 15463 7AA1 A5 8B			lda @INTEGER.MOD.RESULT+1
 15464 7AA3 8D 58 9E			sta N1+1
 15465 7AA6 A5 8C			lda @INTEGER.MOD.RESULT+2
 15466 7AA8 8D 59 9E			sta N1+2
 15467 7AAB A5 8D			lda @INTEGER.MOD.RESULT+3
 15468 7AAD 8D 5A 9E			sta N1+3
 15469
 15470 				; optimize OK (service.pas), line = 2773
 15471
 15472 7AB0 30 10			jmi l_2DD9
 15473 7AB2 0D 59 9E			ora N1+2
 15474 7AB5 0D 58 9E			ora N1+1
 15475 7AB8 0D 57 9E			ora N1
 15476 7ABB F0 05			jeq l_2DD9
 15477 7ABD A9 01			lda #$01
 15478 7ABF 8D 5B 9E			sta F
 15479 7AC2			l_2DD9
 15480
 15481 				; optimize OK (service.pas), line = 2774
 15482
 15483 7AC2 AD 5B 9E			lda F
 15484 7AC5 F0 29			jeq l_2DEC
 15485 7AC7 AD 4F 9E			lda PX
 15486 7ACA 18 69 15			add #$15
 15487 7ACD 8D 46 9E			sta PUT_DIGIT.PX
 15488 7AD0 AD 50 9E			lda PX+1
 15489 7AD3 69 00			adc #$00
 15490 7AD5 8D 47 9E			sta PUT_DIGIT.PX+1
 15491 7AD8 AD 51 9E			lda PY
 15492 7ADB 8D 48 9E			sta PUT_DIGIT.PY
 15493 7ADE AD 52 9E			lda PY+1
 15494 7AE1 8D 49 9E			sta PUT_DIGIT.PY+1
 15495 7AE4 AD 57 9E			lda N1
 15496 7AE7 8D 4A 9E			sta PUT_DIGIT.NUM
 15497 7AEA AD 58 9E			lda N1+1
 15498 7AED 4C 14 7B			jmp l_2E00
 15499 7AF0			l_2DEC
 15500
 15501 				; optimize OK (service.pas), line = 2775
 15502
 15503 7AF0 AD 4F 9E			lda PX
 15504 7AF3 18 69 15			add #$15
 15505 7AF6 8D 46 9E			sta PUT_DIGIT.PX
 15506 7AF9 AD 50 9E			lda PX+1
 15507 7AFC 69 00			adc #$00
 15508 7AFE 8D 47 9E			sta PUT_DIGIT.PX+1
 15509 7B01 AD 51 9E			lda PY
 15510 7B04 8D 48 9E			sta PUT_DIGIT.PY
 15511 7B07 AD 52 9E			lda PY+1
 15512 7B0A 8D 49 9E			sta PUT_DIGIT.PY+1
 15513 7B0D A9 0A			lda #$0A
 15514 7B0F 8D 4A 9E			sta PUT_DIGIT.NUM
 15515 7B12 A9 00			lda #$00
 15516 7B14			l_2E00
 15517 7B14 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15518 7B17 20 05 75			jsr PUT_DIGIT
 15519
 15520 				; optimize OK (service.pas), line = 2778
 15521
 15522 7B1A A9 0A			lda #$0A
 15523 7B1C 85 8E			sta @INTEGER.DIV.B
 15524 7B1E A9 00			lda #$00
 15525 7B20 85 8F			sta @INTEGER.DIV.B+1
 15526 7B22 85 90			sta @INTEGER.DIV.B+2
 15527 7B24 85 91			sta @INTEGER.DIV.B+3
 15528 7B26 AD 53 9E			lda SC
 15529 7B29 85 86			sta @INTEGER.DIV.A
 15530 7B2B AD 54 9E			lda SC+1
 15531 7B2E 85 87			sta @INTEGER.DIV.A+1
 15532 7B30 AD 55 9E			lda SC+2
 15533 7B33 85 88			sta @INTEGER.DIV.A+2
 15534 7B35 AD 56 9E			lda SC+3
 15535 7B38 85 89			sta @INTEGER.DIV.A+3
 15536 7B3A 20 C0 12			jsr @INTEGER.DIV
 15537 7B3D A9 0A			lda #$0A
 15538 7B3F 85 8E			sta @INTEGER.MOD.B
 15539 7B41 A9 00			lda #$00
 15540 7B43 85 8F			sta @INTEGER.MOD.B+1
 15541 7B45 85 90			sta @INTEGER.MOD.B+2
 15542 7B47 85 91			sta @INTEGER.MOD.B+3
 15543 7B49 20 DD 12			jsr @INTEGER.MOD
 15544 7B4C A5 8A			lda @INTEGER.MOD.RESULT
 15545 7B4E 8D 57 9E			sta N1
 15546 7B51 A5 8B			lda @INTEGER.MOD.RESULT+1
 15547 7B53 8D 58 9E			sta N1+1
 15548 7B56 A5 8C			lda @INTEGER.MOD.RESULT+2
 15549 7B58 8D 59 9E			sta N1+2
 15550 7B5B A5 8D			lda @INTEGER.MOD.RESULT+3
 15551 7B5D 8D 5A 9E			sta N1+3
 15552
 15553 				; optimize OK (service.pas), line = 2779
 15554
 15555 7B60 AD 4F 9E			lda PX
 15556 7B63 18 69 1C			add #$1C
 15557 7B66 8D 46 9E			sta PUT_DIGIT.PX
 15558 7B69 AD 50 9E			lda PX+1
 15559 7B6C 69 00			adc #$00
 15560 7B6E 8D 47 9E			sta PUT_DIGIT.PX+1
 15561 7B71 AD 51 9E			lda PY
 15562 7B74 8D 48 9E			sta PUT_DIGIT.PY
 15563 7B77 AD 52 9E			lda PY+1
 15564 7B7A 8D 49 9E			sta PUT_DIGIT.PY+1
 15565 7B7D AD 57 9E			lda N1
 15566 7B80 8D 4A 9E			sta PUT_DIGIT.NUM
 15567 7B83 AD 58 9E			lda N1+1
 15568 7B86 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15569 7B89 20 05 75			jsr PUT_DIGIT
 15570
 15571 				; optimize OK (service.pas), line = 2783
 15572
 15573 7B8C AD 4F 9E			lda PX
 15574 7B8F 18 69 23			add #$23
 15575 7B92 8D 46 9E			sta PUT_DIGIT.PX
 15576 7B95 AD 50 9E			lda PX+1
 15577 7B98 69 00			adc #$00
 15578 7B9A 8D 47 9E			sta PUT_DIGIT.PX+1
 15579 7B9D AD 51 9E			lda PY
 15580 7BA0 8D 48 9E			sta PUT_DIGIT.PY
 15581 7BA3 AD 52 9E			lda PY+1
 15582 7BA6 8D 49 9E			sta PUT_DIGIT.PY+1
 15583 7BA9 A9 00			lda #$00
 15584 7BAB 8D 4A 9E			sta PUT_DIGIT.NUM
 15585 7BAE 8D 4B 9E			sta PUT_DIGIT.NUM+1
 15586 7BB1 20 05 75			jsr PUT_DIGIT
 15587
 15588 				; ------------------------------------------------------------
 15589
 15590 = 9E4F			PX	= DATAORIGIN+$06C3
 15591 = 9E51			PY	= DATAORIGIN+$06C5
 15592 = 9E53			SC	= DATAORIGIN+$06C7
 15593 = 9E57			N1	= DATAORIGIN+$06CB
 15594 = 9E5B			F	= DATAORIGIN+$06CF
 15595
 15596 = 9E4F			@VarData	= PX
 15597 = 000D			@VarDataSize	= 13
 15598
 15599 7BB4			@exit
 15600 					.ifdef @new
 15601 					lda <@VarData
 15602 					sta :ztmp
 15603 					lda >@VarData
 15604 					ldy #@VarDataSize-1
 15605 					jmp @FreeMem
 15606 					els
 15607 7BB4 60				rts						; ret
 15608 					eif
 15609 				.endl
 15610
 15611 7BB5			.local	PLOT_LIVES					; PROCEDURE
 15612
 15613 				; optimize FAIL (0, service.pas), line = 2829
 15614
 15615 7BB5 AD 5C 9E			lda LIVES
 15616 7BB8 D0 03			bne @+
 15617 7BBA CE 5D 9E			dec LIVES+1
 15618 				@
 15619 7BBD CE 5C 9E			dec LIVES
 15620
 15621 				; optimize OK (service.pas), line = 2832
 15622
 15623 7BC0 A9 00			lda #$00
 15624 7BC2 8D 60 9E			sta CN
 15625
 15626 7BC5			l_2E3F
 15627 				; --- ForToDoCondition
 15628 7BC5 AD 60 9E			lda CN
 15629 7BC8 C9 08			cmp #$08
 15630 7BCA 90 03 4C 8C 7E		jcs l_2E4D
 15631
 15632 				; optimize OK (service.pas), line = 2833
 15633
 15634 7BCF A9 00			lda #$00
 15635 7BD1 8D 5F 9E			sta Y
 15636 7BD4 AC DF 98			ldy MINIVAUS.HEIGHT
 15637 7BD7 88				dey
 15638 7BD8 8C DC 7B			sty @FORTMP_2E58_0
 15639
 15640 7BDB			l_2E5B
 15641 				; --- ForToDoCondition
 15642 7BDB A9 00			lda @FORTMP_2E58_0::#$00
 15643 7BDD CD 5F 9E			cmp Y
 15644 7BE0 B0 03 4C 84 7E		jcc l_2E69
 15645
 15646 				; optimize OK (service.pas), line = 2834
 15647
 15648 7BE5 A9 00			lda #$00
 15649 7BE7 8D 5E 9E			sta X
 15650 7BEA AC DD 98			ldy MINIVAUS.WIDTH
 15651 7BED 88				dey
 15652 7BEE 8C F2 7B			sty @FORTMP_2E74_0
 15653
 15654 7BF1			l_2E77
 15655 				; --- ForToDoCondition
 15656 7BF1 A9 00			lda @FORTMP_2E74_0::#$00
 15657 7BF3 CD 5E 9E			cmp X
 15658 7BF6 B0 03 4C 7C 7E		jcc l_2E85
 15659
 15660 				; optimize OK (service.pas), line = 2836
 15661
 15662 7BFB AD 5E 9E			lda X
 15663 7BFE 18 69 0B			add #$0B
 15664 7C01 85 9F			sta :STACKORIGIN+9
 15665 7C03 A9 00			lda #$00
 15666 7C05 69 00			adc #$00
 15667 7C07 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15668 7C09 AD DD 98			lda MINIVAUS.WIDTH
 15669 7C0C 85 8E			sta :ecx
 15670 7C0E AD DE 98			lda MINIVAUS.WIDTH+1
 15671 7C11 85 8F			sta :ecx+1
 15672 7C13 AD 60 9E			lda CN
 15673 7C16 85 86			sta :eax
 15674 7C18 A9 00			lda #$00
 15675 7C1A 85 87			sta :eax+1
 15676 					.ifdef fmulinit
 15677 					fmulu_16
 15678 					els
 15679 7C1C 20 9C 13			imulCX_AL
 15680 					eif
 15681 7C1F A5 86			lda :eax
 15682 7C21 18 65 9F			add :STACKORIGIN+9
 15683 7C24 8D 65 9E			sta XL
 15684 7C27 A5 87			lda :eax+1
 15685 7C29 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 15686 7C2B 8D 66 9E			sta XL+1
 15687
 15688 				; optimize OK (service.pas), line = 2837
 15689
 15690 7C2E AD 5F 9E			lda Y
 15691 7C31 18 69 C0			add #$C0
 15692 7C34 8D 67 9E			sta YL
 15693 7C37 A9 00			lda #$00
 15694 7C39 69 00			adc #$00
 15695 7C3B 8D 68 9E			sta YL+1
 15696
 15697 				; optimize OK (service.pas), line = 2839
 15698
 15699 7C3E AC 65 9E			ldy XL
 15700 7C41 A9 C4			lda #$C4
 15701 7C43 18 6D 66 9E			add XL+1
 15702 7C47 85 83			sta :bp+1
 15703 7C49 B1 82			lda (:bp),y
 15704 7C4B 8D 61 9E			sta XP
 15705 7C4E A9 00			lda #$00
 15706 7C50 8D 62 9E			sta XP+1
 15707
 15708 				; optimize OK (service.pas), line = 2840
 15709
 15710 7C53 AC 67 9E			ldy YL
 15711 7C56 B9 00 C3			lda adr.MODY,y
 15712 7C59 85 86			sta :eax
 15713 7C5B A9 00			lda #$00
 15714 7C5D 85 87			sta :eax+1
 15715 7C5F AD 12 99			lda PATTERN.WIDTH
 15716 7C62 85 8E			sta :ecx
 15717 7C64 AD 13 99			lda PATTERN.WIDTH+1
 15718 7C67 85 8F			sta :ecx+1
 15719 					.ifdef fmulinit
 15720 					fmulu_16
 15721 					els
 15722 7C69 20 9C 13			imulCX_AL
 15723 					eif
 15724 7C6C A5 86			lda :eax
 15725 7C6E 8D 63 9E			sta YP
 15726 7C71 A5 87			lda :eax+1
 15727 7C73 8D 64 9E			sta YP+1
 15728
 15729 				; optimize FAIL (1, service.pas), line = 2844
 15730
 15731 7C76 E8				inx
 15732 7C77 A0 01			ldy #1
 15733 7C79 AD 60 9E			lda CN
 15734 7C7C CD 5C 9E			cmp LIVES
 15735 7C7F A9 00			lda #$00
 15736 7C81 ED 5D 9E			sbc LIVES+1
 15737 7C84 50 02			svc
 15738 7C86 49 80			eor #$80
 15739 7C88 30 01			bmi @+
 15740 7C8A 88				dey
 15741 				@
 15742 7C8B 94 96			sty :STACKORIGIN,x
 15743 7C8D AD E1 98			lda MINIVAUS.OFS
 15744 7C90 18 6D 5E 9E			add X
 15745 7C94 85 9F			sta :STACKORIGIN+9
 15746 7C96 AD E2 98			lda MINIVAUS.OFS+1
 15747 7C99 69 00			adc #$00
 15748 7C9B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15749 7C9D AD E3 98			lda MINIVAUS.OFS+2
 15750 7CA0 69 00			adc #$00
 15751 7CA2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15752 7CA4 AD E4 98			lda MINIVAUS.OFS+3
 15753 7CA7 69 00			adc #$00
 15754 7CA9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15755 7CAB AD DD 98			lda MINIVAUS.WIDTH
 15756 7CAE 85 8E			sta :ecx
 15757 7CB0 AD DE 98			lda MINIVAUS.WIDTH+1
 15758 7CB3 85 8F			sta :ecx+1
 15759 7CB5 AD 5F 9E			lda Y
 15760 7CB8 85 86			sta :eax
 15761 7CBA A9 00			lda #$00
 15762 7CBC 85 87			sta :eax+1
 15763 					.ifdef fmulinit
 15764 					fmulu_16
 15765 					els
 15766 7CBE 20 9C 13			imulCX_AL
 15767 					eif
 15768 7CC1 A5 9F			lda :STACKORIGIN+9
 15769 7CC3 18 65 86			add :eax
 15770 7CC6 8D C8 9C			sta GETBYTE.SRC
 15771 7CC9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15772 7CCB 65 87			adc :eax+1
 15773 7CCD 8D C9 9C			sta GETBYTE.SRC+1
 15774 7CD0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15775 7CD2 65 88			adc :eax+2
 15776 7CD4 8D CA 9C			sta GETBYTE.SRC+2
 15777 7CD7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15778 7CD9 65 89			adc :eax+3
 15779 7CDB 8D CB 9C			sta GETBYTE.SRC+3
 15780 7CDE 20 1B 2E			jsr GETBYTE
 15781 7CE1 CA				dex
 15782 7CE2 A0 01			ldy #1
 15783 7CE4 AD CC 9C			lda GETBYTE.RESULT
 15784 7CE7 D0 01			bne @+
 15785 7CE9 88				dey
 15786 				@
 15787 7CEA 98				tya
 15788 7CEB 35 97			and :STACKORIGIN+1,x
 15789 7CED F0 5D			jeq l_2EE8
 15790
 15791 				; optimize OK (service.pas), line = 2847
 15792
 15793 7CEF AD E1 98			lda MINIVAUS.OFS
 15794 7CF2 18 6D 5E 9E			add X
 15795 7CF6 85 9F			sta :STACKORIGIN+9
 15796 7CF8 AD E2 98			lda MINIVAUS.OFS+1
 15797 7CFB 69 00			adc #$00
 15798 7CFD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15799 7CFF AD E3 98			lda MINIVAUS.OFS+2
 15800 7D02 69 00			adc #$00
 15801 7D04 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15802 7D06 AD E4 98			lda MINIVAUS.OFS+3
 15803 7D09 69 00			adc #$00
 15804 7D0B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15805 7D0D AD DD 98			lda MINIVAUS.WIDTH
 15806 7D10 85 8E			sta :ecx
 15807 7D12 AD DE 98			lda MINIVAUS.WIDTH+1
 15808 7D15 85 8F			sta :ecx+1
 15809 7D17 AD 5F 9E			lda Y
 15810 7D1A 85 86			sta :eax
 15811 7D1C A9 00			lda #$00
 15812 7D1E 85 87			sta :eax+1
 15813 					.ifdef fmulinit
 15814 					fmulu_16
 15815 					els
 15816 7D20 20 9C 13			imulCX_AL
 15817 					eif
 15818 7D23 A5 9F			lda :STACKORIGIN+9
 15819 7D25 18 65 86			add :eax
 15820 7D28 8D C8 9C			sta GETBYTE.SRC
 15821 7D2B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15822 7D2D 65 87			adc :eax+1
 15823 7D2F 8D C9 9C			sta GETBYTE.SRC+1
 15824 7D32 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15825 7D34 65 88			adc :eax+2
 15826 7D36 8D CA 9C			sta GETBYTE.SRC+2
 15827 7D39 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15828 7D3B 65 89			adc :eax+3
 15829 7D3D 8D CB 9C			sta GETBYTE.SRC+3
 15830 7D40 20 1B 2E			jsr GETBYTE
 15831 7D43 AD CC 9C			lda GETBYTE.RESULT
 15832 7D46 8D 6A 9E			sta CL
 15833 				; optimize OK (service.pas), line = 2850
 15834 				; optimize OK (service.pas), line = 2853
 15835 7D49 4C E6 7D			jmp l_2F2A
 15836 7D4C			l_2EE8
 15837
 15838 				; optimize OK (service.pas), line = 2862
 15839
 15840 7D4C AD 91 98			lda PLAYSCREEN.OFS
 15841 7D4F 18 6D 65 9E			add XL
 15842 7D53 85 9F			sta :STACKORIGIN+9
 15843 7D55 AD 92 98			lda PLAYSCREEN.OFS+1
 15844 7D58 6D 66 9E			adc XL+1
 15845 7D5B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15846 7D5D AD 93 98			lda PLAYSCREEN.OFS+2
 15847 7D60 69 00			adc #$00
 15848 7D62 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15849 7D64 AD 94 98			lda PLAYSCREEN.OFS+3
 15850 7D67 69 00			adc #$00
 15851 7D69 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15852 7D6B AC 67 9E			ldy YL
 15853 7D6E A5 9F			lda :STACKORIGIN+9
 15854 7D70 18 79 00 C0			add adr.ROW,y
 15855 7D74 8D C8 9C			sta GETBYTE.SRC
 15856 7D77 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15857 7D79 79 00 C1			adc adr.ROW+256,y
 15858 7D7C 8D C9 9C			sta GETBYTE.SRC+1
 15859 7D7F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15860 7D81 69 00			adc #$00
 15861 7D83 8D CA 9C			sta GETBYTE.SRC+2
 15862 7D86 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15863 7D88 69 00			adc #$00
 15864 7D8A 8D CB 9C			sta GETBYTE.SRC+3
 15865 7D8D 20 1B 2E			jsr GETBYTE
 15866 7D90 AD CC 9C			lda GETBYTE.RESULT
 15867 7D93 29 80			and #$80
 15868 7D95 8D 69 9E			sta SHADOW
 15869
 15870 				; optimize OK (service.pas), line = 2865
 15871
 15872 7D98 AD 16 99			lda PATTERN.OFS
 15873 7D9B 18 6D 61 9E			add XP
 15874 7D9F 85 9F			sta :STACKORIGIN+9
 15875 7DA1 AD 17 99			lda PATTERN.OFS+1
 15876 7DA4 6D 62 9E			adc XP+1
 15877 7DA7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15878 7DA9 AD 18 99			lda PATTERN.OFS+2
 15879 7DAC 69 00			adc #$00
 15880 7DAE 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15881 7DB0 AD 19 99			lda PATTERN.OFS+3
 15882 7DB3 69 00			adc #$00
 15883 7DB5 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15884 7DB7 A5 9F			lda :STACKORIGIN+9
 15885 7DB9 18 6D 63 9E			add YP
 15886 7DBD 8D C8 9C			sta GETBYTE.SRC
 15887 7DC0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15888 7DC2 6D 64 9E			adc YP+1
 15889 7DC5 8D C9 9C			sta GETBYTE.SRC+1
 15890 7DC8 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15891 7DCA 69 00			adc #$00
 15892 7DCC 8D CA 9C			sta GETBYTE.SRC+2
 15893 7DCF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15894 7DD1 69 00			adc #$00
 15895 7DD3 8D CB 9C			sta GETBYTE.SRC+3
 15896 7DD6 20 1B 2E			jsr GETBYTE
 15897 7DD9 E8				inx
 15898 7DDA AD CC 9C			lda GETBYTE.RESULT
 15899 7DDD 29 7F			and #$7F
 15900 7DDF 0D 69 9E			ora SHADOW
 15901 7DE2 8D 6A 9E			sta CL
 15902 7DE5 CA				dex
 15903 7DE6			l_2F2A
 15904
 15905 				; optimize OK (service.pas), line = 2868
 15906
 15907 7DE6 AD 65 9E			lda XL
 15908 7DE9 85 A0			sta :STACKORIGIN+10
 15909 7DEB A9 50			lda #$50
 15910 7DED 18 6D 66 9E			add XL+1
 15911 7DF1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15912 7DF3 A9 00			lda #$00
 15913 7DF5 69 00			adc #$00
 15914 7DF7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15915 7DF9 A9 00			lda #$00
 15916 7DFB 69 00			adc #$00
 15917 7DFD 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15918 7DFF AC 67 9E			ldy YL
 15919 7E02 A5 A0			lda :STACKORIGIN+10
 15920 7E04 18 79 00 C0			add adr.ROW,y
 15921 7E08 8D C3 9C			sta PUTBYTE.DST
 15922 7E0B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15923 7E0D 79 00 C1			adc adr.ROW+256,y
 15924 7E10 8D C4 9C			sta PUTBYTE.DST+1
 15925 7E13 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15926 7E15 69 00			adc #$00
 15927 7E17 8D C5 9C			sta PUTBYTE.DST+2
 15928 7E1A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15929 7E1C 69 00			adc #$00
 15930 7E1E 8D C6 9C			sta PUTBYTE.DST+3
 15931 7E21 AD 6A 9E			lda CL
 15932 7E24 8D C7 9C			sta PUTBYTE.V
 15933 7E27 20 F3 2D			jsr PUTBYTE
 15934
 15935 				; optimize OK (service.pas), line = 2871
 15936
 15937 7E2A AD 91 98			lda PLAYSCREEN.OFS
 15938 7E2D 18 6D 65 9E			add XL
 15939 7E31 85 A0			sta :STACKORIGIN+10
 15940 7E33 AD 92 98			lda PLAYSCREEN.OFS+1
 15941 7E36 6D 66 9E			adc XL+1
 15942 7E39 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15943 7E3B AD 93 98			lda PLAYSCREEN.OFS+2
 15944 7E3E 69 00			adc #$00
 15945 7E40 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15946 7E42 AD 94 98			lda PLAYSCREEN.OFS+3
 15947 7E45 69 00			adc #$00
 15948 7E47 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15949 7E49 AC 67 9E			ldy YL
 15950 7E4C A5 A0			lda :STACKORIGIN+10
 15951 7E4E 18 79 00 C0			add adr.ROW,y
 15952 7E52 8D C3 9C			sta PUTBYTE.DST
 15953 7E55 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15954 7E57 79 00 C1			adc adr.ROW+256,y
 15955 7E5A 8D C4 9C			sta PUTBYTE.DST+1
 15956 7E5D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15957 7E5F 69 00			adc #$00
 15958 7E61 8D C5 9C			sta PUTBYTE.DST+2
 15959 7E64 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15960 7E66 69 00			adc #$00
 15961 7E68 8D C6 9C			sta PUTBYTE.DST+3
 15962 7E6B AD 6A 9E			lda CL
 15963 7E6E 8D C7 9C			sta PUTBYTE.V
 15964 7E71 20 F3 2D			jsr PUTBYTE
 15965
 15966 				; --- ForToDoEpilog
 15967 7E74 EE 5E 9E			inc X
 15968 7E77 F0 03 4C F1 7B		jne l_2E77
 15969 7E7C			l_2E85
 15970
 15971 				; --- ForToDoEpilog
 15972 7E7C EE 5F 9E			inc Y
 15973 7E7F F0 03 4C DB 7B		jne l_2E5B
 15974 7E84			l_2E69
 15975
 15976 				; --- ForToDoEpilog
 15977 7E84 EE 60 9E			inc CN
 15978 7E87 F0 03 4C C5 7B		jne l_2E3F
 15979 7E8C			l_2E4D
 15980
 15981 				; ------------------------------------------------------------
 15982
 15983 = 9E5C			LIVES	= DATAORIGIN+$06D0
 15984 = 000B			XLIVES	= $0B
 15985 = 00C0			YLIVES	= $C0
 15986 = 9E5E			X	= DATAORIGIN+$06D2
 15987 = 9E5F			Y	= DATAORIGIN+$06D3
 15988 = 9E60			CN	= DATAORIGIN+$06D4
 15989 = 9E61			XP	= DATAORIGIN+$06D5
 15990 = 9E63			YP	= DATAORIGIN+$06D7
 15991 = 9E65			XL	= DATAORIGIN+$06D9
 15992 = 9E67			YL	= DATAORIGIN+$06DB
 15993 = 9E69			SHADOW	= DATAORIGIN+$06DD
 15994 = 9E6A			CL	= DATAORIGIN+$06DE
 15995
 15996 = 9E5C			@VarData	= LIVES
 15997 = 000F			@VarDataSize	= 15
 15998
 15999 7E8C			@exit
 16000 					.ifdef @new
 16001 					lda <@VarData
 16002 					sta :ztmp
 16003 					lda >@VarData
 16004 					ldy #@VarDataSize-1
 16005 					jmp @FreeMem
 16006 					els
 16007 7E8C 60				rts						; ret
 16008 					eif
 16009 				.endl
 16010
 16011 7E8D			.local	PLACE_FIRE					; PROCEDURE
 16012
 16013 				; optimize OK (service.pas), line = 2880
 16014
 16015 7E8D A9 00			lda #$00
 16016 7E8F 8D 6F 9E			sta Y
 16017 7E92 AC F7 98			ldy SHOOTS.HEIGHT
 16018 7E95 88				dey
 16019 7E96 8C 9A 7E			sty @FORTMP_2F98_0
 16020
 16021 7E99			l_2F9B
 16022 				; --- ForToDoCondition
 16023 7E99 A9 00			lda @FORTMP_2F98_0::#$00
 16024 7E9B CD 6F 9E			cmp Y
 16025 7E9E B0 03 4C 25 7F		jcc l_2FA9
 16026
 16027 				; optimize OK (service.pas), line = 2882
 16028
 16029 7EA3 AD 6F 9E			lda Y
 16030 7EA6 85 86			sta :eax
 16031 7EA8 A9 00			lda #$00
 16032 7EAA 85 87			sta :eax+1
 16033 7EAC AD F5 98			lda SHOOTS.WIDTH
 16034 7EAF 85 8E			sta :ecx
 16035 7EB1 AD F6 98			lda SHOOTS.WIDTH+1
 16036 7EB4 85 8F			sta :ecx+1
 16037 					.ifdef fmulinit
 16038 					fmulu_16
 16039 					els
 16040 7EB6 20 9C 13			imulCX_AL
 16041 					eif
 16042 7EB9 A5 86			lda :eax
 16043 7EBB 8D 6D 9E			sta FW
 16044 7EBE A5 87			lda :eax+1
 16045 7EC0 8D 6E 9E			sta FW+1
 16046
 16047 				; optimize OK (service.pas), line = 2884
 16048
 16049 7EC3 AD 6F 9E			lda Y
 16050 7EC6 18 6D 7C 99			add FIRE.Y
 16051 7ECA A8				tay
 16052 7ECB AD 7B 99			lda FIRE.X
 16053 7ECE 18 79 00 C0			add adr.ROW,y
 16054 7ED2 8D A0 9C			sta BLITZERO.DST
 16055 7ED5 A9 50			lda #$50
 16056 7ED7 79 00 C1			adc adr.ROW+256,y
 16057 7EDA 8D A1 9C			sta BLITZERO.DST+1
 16058 7EDD A9 00			lda #$00
 16059 7EDF 69 00			adc #$00
 16060 7EE1 8D A2 9C			sta BLITZERO.DST+2
 16061 7EE4 A9 00			lda #$00
 16062 7EE6 69 00			adc #$00
 16063 7EE8 8D A3 9C			sta BLITZERO.DST+3
 16064 7EEB AD F9 98			lda SHOOTS.OFS
 16065 7EEE 18 6D 6D 9E			add FW
 16066 7EF2 8D 9C 9C			sta BLITZERO.SRC
 16067 7EF5 AD FA 98			lda SHOOTS.OFS+1
 16068 7EF8 6D 6E 9E			adc FW+1
 16069 7EFB 8D 9D 9C			sta BLITZERO.SRC+1
 16070 7EFE AD FB 98			lda SHOOTS.OFS+2
 16071 7F01 69 00			adc #$00
 16072 7F03 8D 9E 9C			sta BLITZERO.SRC+2
 16073 7F06 AD FC 98			lda SHOOTS.OFS+3
 16074 7F09 69 00			adc #$00
 16075 7F0B 8D 9F 9C			sta BLITZERO.SRC+3
 16076 7F0E AD F5 98			lda SHOOTS.WIDTH
 16077 7F11 8D A4 9C			sta BLITZERO.SIZE
 16078 7F14 AD F6 98			lda SHOOTS.WIDTH+1
 16079 7F17 8D A5 9C			sta BLITZERO.SIZE+1
 16080 7F1A 20 79 2C			jsr BLITZERO
 16081
 16082 				; --- ForToDoEpilog
 16083 7F1D EE 6F 9E			inc Y
 16084 7F20 F0 03 4C 99 7E		jne l_2F9B
 16085 7F25			l_2FA9
 16086
 16087 				; ------------------------------------------------------------
 16088
 16089 = 9E6D			FW	= DATAORIGIN+$06E1
 16090 = 9E6F			Y	= DATAORIGIN+$06E3
 16091
 16092 = 9E6D			@VarData	= FW
 16093 = 0003			@VarDataSize	= 3
 16094
 16095 7F25			@exit
 16096 					.ifdef @new
 16097 					lda <@VarData
 16098 					sta :ztmp
 16099 					lda >@VarData
 16100 					ldy #@VarDataSize-1
 16101 					jmp @FreeMem
 16102 					els
 16103 7F25 60				rts						; ret
 16104 					eif
 16105 				.endl
 16106
 16107 7F26			.local	REMOVE_FIRE					; PROCEDURE
 16108
 16109 				; optimize OK (service.pas), line = 2892
 16110
 16111 7F26 A9 00			lda #$00
 16112 7F28 8D 71 9E			sta Y
 16113 7F2B AC F7 98			ldy SHOOTS.HEIGHT
 16114 7F2E 88				dey
 16115 7F2F 8C 33 7F			sty @FORTMP_2FE6_0
 16116
 16117 7F32			l_2FE9
 16118 				; --- ForToDoCondition
 16119 7F32 A9 00			lda @FORTMP_2FE6_0::#$00
 16120 7F34 CD 71 9E			cmp Y
 16121 7F37 90 79			jcc l_2FF7
 16122
 16123 				; optimize OK (service.pas), line = 2896
 16124
 16125 7F39 AD 71 9E			lda Y
 16126 7F3C 18 6D 7C 99			add FIRE.Y
 16127 7F40 A8				tay
 16128 7F41 AD 7B 99			lda FIRE.X
 16129 7F44 18 79 00 C0			add adr.ROW,y
 16130 7F48 8D B2 9C			sta BLITROW.DST
 16131 7F4B A9 50			lda #$50
 16132 7F4D 79 00 C1			adc adr.ROW+256,y
 16133 7F50 8D B3 9C			sta BLITROW.DST+1
 16134 7F53 A9 00			lda #$00
 16135 7F55 69 00			adc #$00
 16136 7F57 8D B4 9C			sta BLITROW.DST+2
 16137 7F5A A9 00			lda #$00
 16138 7F5C 69 00			adc #$00
 16139 7F5E 8D B5 9C			sta BLITROW.DST+3
 16140 7F61 AD 91 98			lda PLAYSCREEN.OFS
 16141 7F64 18 6D 7B 99			add FIRE.X
 16142 7F68 85 A1			sta :STACKORIGIN+11
 16143 7F6A AD 92 98			lda PLAYSCREEN.OFS+1
 16144 7F6D 69 00			adc #$00
 16145 7F6F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16146 7F71 AD 93 98			lda PLAYSCREEN.OFS+2
 16147 7F74 69 00			adc #$00
 16148 7F76 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16149 7F78 AD 94 98			lda PLAYSCREEN.OFS+3
 16150 7F7B 69 00			adc #$00
 16151 7F7D 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16152 7F7F A5 A1			lda :STACKORIGIN+11
 16153 7F81 18 79 00 C0			add adr.ROW,y
 16154 7F85 8D AE 9C			sta BLITROW.SRC
 16155 7F88 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16156 7F8A 79 00 C1			adc adr.ROW+256,y
 16157 7F8D 8D AF 9C			sta BLITROW.SRC+1
 16158 7F90 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16159 7F92 69 00			adc #$00
 16160 7F94 8D B0 9C			sta BLITROW.SRC+2
 16161 7F97 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16162 7F99 69 00			adc #$00
 16163 7F9B 8D B1 9C			sta BLITROW.SRC+3
 16164 7F9E AD F5 98			lda SHOOTS.WIDTH
 16165 7FA1 8D B6 9C			sta BLITROW.SIZE
 16166 7FA4 AD F6 98			lda SHOOTS.WIDTH+1
 16167 7FA7 8D B7 9C			sta BLITROW.SIZE+1
 16168 7FAA 20 2C 2D			jsr BLITROW
 16169
 16170 				; --- ForToDoEpilog
 16171 7FAD EE 71 9E			inc Y
 16172 7FB0 D0 80			jne l_2FE9
 16173 7FB2			l_2FF7
 16174
 16175 				; ------------------------------------------------------------
 16176
 16177 = 9E71			Y	= DATAORIGIN+$06E5
 16178
 16179 = 9E71			@VarData	= Y
 16180 = 0001			@VarDataSize	= 1
 16181
 16182 7FB2			@exit
 16183 					.ifdef @new
 16184 					lda <@VarData
 16185 					sta :ztmp
 16186 					lda >@VarData
 16187 					ldy #@VarDataSize-1
 16188 					jmp @FreeMem
 16189 					els
 16190 7FB2 60				rts						; ret
 16191 					eif
 16192 				.endl
 16193
 16194 7FB3			.local	CHECK_FIRE					; PROCEDURE
 16195
 16196 				; optimize OK (service.pas), line = 2903
 16197
 16198 7FB3 AD 7E 99			lda FIRE.AVL
 16199 7FB6 D0 03 4C B1 81		jeq l_3039
 16200
 16201 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2905
 16202
 16203 7FBB 20 DF 2B			jsr MOUSECLICK
 16204 7FBE E8				inx
 16205 7FBF E8				inx
 16206 7FC0 A0 01			ldy #1
 16207 7FC2 AD 90 9C			lda MOUSECLICK.RESULT
 16208 7FC5 C9 01			cmp #$01
 16209 7FC7 F0 01			beq @+
 16210 7FC9 88				dey
 16211 				@
 16212 7FCA 98				tya
 16213 7FCB 2D 7E 99			and FIRE.AVL
 16214 7FCE 95 95			sta :STACKORIGIN-1,x
 16215 7FD0 CA				dex
 16216 7FD1 CA				dex
 16217 7FD2 A0 01			ldy #1
 16218 7FD4 AD 7D 99			lda FIRE.SHOT
 16219 7FD7 F0 01			beq @+
 16220 7FD9 88				dey
 16221 				@
 16222 7FDA 98				tya
 16223 7FDB 35 97			and :STACKORIGIN+1,x
 16224 7FDD F0 48			jeq l_3059
 16225
 16226 				; optimize OK (service.pas), line = 2907
 16227
 16228 7FDF AD 0D 99			lda VAUS.WIDTH
 16229 7FE2 38 ED F5 98			sub SHOOTS.WIDTH
 16230 7FE6 85 A0			sta :STACKORIGIN+10
 16231 7FE8 A9 00			lda #$00
 16232 7FEA ED F6 98			sbc SHOOTS.WIDTH+1
 16233 7FED 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16234 7FEF 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 16235 7FF1 66 A0			ror :STACKORIGIN+10
 16236 7FF3 AD 05 99			lda VAUS.X
 16237 7FF6 18 65 A0			add :STACKORIGIN+10
 16238 7FF9 8D 7B 99			sta FIRE.X
 16239
 16240 				; optimize OK (service.pas), line = 2908
 16241
 16242 7FFC AD 06 99			lda VAUS.Y
 16243 7FFF 38 ED F7 98			sub SHOOTS.HEIGHT
 16244 8003 8D 7C 99			sta FIRE.Y
 16245
 16246 				; optimize OK (service.pas), line = 2909
 16247
 16248 8006 A9 01			lda #$01
 16249 8008 8D 7D 99			sta FIRE.SHOT
 16250
 16251 				; optimize OK (service.pas), line = 2910
 16252
 16253 800B A9 00			lda #$00
 16254 800D 8D 7F 99			sta FIRE.NW
 16255
 16256 				; optimize OK (service.pas), line = 2911
 16257
 16258 8010 A9 BC			lda #$BC
 16259 8012 8D 81 98			sta BALL_BLOCK_SOUND.A
 16260 8015 A9 02			lda #$02
 16261 8017 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 16262 801A A9 05			lda #$05
 16263 801C 8D 83 98			sta BALL_BLOCK_SOUND.B
 16264 801F A9 00			lda #$00
 16265 8021 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 16266 8024 20 5D 2B			jsr BALL_BLOCK_SOUND
 16267 8027			l_3059
 16268
 16269 				; optimize OK (service.pas), line = 2914
 16270
 16271 8027 AD 7D 99			lda FIRE.SHOT
 16272 802A D0 03 4C B1 81		jeq l_3093
 16273
 16274 				; optimize OK (service.pas), line = 2916
 16275
 16276 802F AD 7F 99			lda FIRE.NW
 16277 8032 F0 03			jeq l_30A0
 16278 8034 20 26 7F			jsr REMOVE_FIRE
 16279 8037			l_30A0
 16280
 16281 				; optimize OK (service.pas), line = 2917
 16282
 16283 8037 A9 01			lda #$01
 16284 8039 8D 7F 99			sta FIRE.NW
 16285
 16286 				; optimize OK (service.pas), line = 2919
 16287
 16288 803C AD 7C 99			lda FIRE.Y
 16289 803F 38 E9 04			sub #$04
 16290 8042 8D 7C 99			sta FIRE.Y
 16291
 16292 				; optimize OK (service.pas), line = 2920
 16293
 16294 8045 C9 16			cmp #$16
 16295 8047 B0 08			jcs l_30BB
 16296 8049 A9 00			lda #$00
 16297 804B 8D 7D 99			sta FIRE.SHOT
 16298 804E 4C B1 81			jmp l_30C9
 16299 8051			l_30BB
 16300
 16301 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 2923
 16302
 16303 8051 20 8D 7E			jsr PLACE_FIRE
 16304
 16305 				; optimize OK (service.pas), line = 2925
 16306
 16307 8054 AD 7C 99			lda FIRE.Y
 16308 8057 38 E9 16			sub #$16
 16309 805A 10 03 4C B1 81		jmi l_30F0
 16310 805F AD 7C 99			lda FIRE.Y
 16311 8062 38 E9 16			sub #$16
 16312 8065 85 A0			sta :STACKORIGIN+10
 16313 8067 A9 00			lda #$00
 16314 8069 E9 00			sbc #$00
 16315 806B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16316 806D A5 A0			lda :STACKORIGIN+10
 16317 806F C9 78			cmp #$78
 16318 8071 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16319 8073 E9 00			sbc #$00
 16320 8075 50 02			svc
 16321 8077 49 80			eor #$80
 16322 8079 30 03 4C B1 81		jpl l_30F0
 16323
 16324 				; optimize OK (service.pas), line = 2927
 16325
 16326 807E AD 7B 99			lda FIRE.X
 16327 8081 38 E9 09			sub #$09
 16328 8084 85 9F			sta :STACKORIGIN+9
 16329 8086 A9 00			lda #$00
 16330 8088 E9 00			sbc #$00
 16331 808A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16332 808C A0 00			ldy #$00
 16333 808E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16334 8090 10 01			spl
 16335 8092 88				dey
 16336 8093 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16337 8095 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16338 8097 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16339 8099 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16340 809B 66 9F			ror :STACKORIGIN+9
 16341 809D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16342 809F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16343 80A1 66 9F			ror :STACKORIGIN+9
 16344 80A3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16345 80A5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16346 80A7 66 9F			ror :STACKORIGIN+9
 16347 80A9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16348 80AB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16349 80AD 66 9F			ror :STACKORIGIN+9
 16350 80AF A5 9F			lda :STACKORIGIN+9
 16351 80B1 8D 73 9E			sta X1
 16352 80B4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16353 80B6 8D 74 9E			sta X1+1
 16354
 16355 				; optimize OK (service.pas), line = 2928
 16356
 16357 80B9 AD 7C 99			lda FIRE.Y
 16358 80BC 38 E9 16			sub #$16
 16359 80BF 85 9F			sta :STACKORIGIN+9
 16360 80C1 A9 00			lda #$00
 16361 80C3 E9 00			sbc #$00
 16362 80C5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16363 80C7 A0 00			ldy #$00
 16364 80C9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16365 80CB 10 01			spl
 16366 80CD 88				dey
 16367 80CE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16368 80D0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16369 80D2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16370 80D4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16371 80D6 66 9F			ror :STACKORIGIN+9
 16372 80D8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16373 80DA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16374 80DC 66 9F			ror :STACKORIGIN+9
 16375 80DE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16376 80E0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16377 80E2 66 9F			ror :STACKORIGIN+9
 16378 80E4 A5 9F			lda :STACKORIGIN+9
 16379 80E6 8D 77 9E			sta Y1
 16380 80E9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16381 80EB 8D 78 9E			sta Y1+1
 16382
 16383 				; optimize OK (service.pas), line = 2930
 16384
 16385 80EE AD 7B 99			lda FIRE.X
 16386 80F1 18 6D F5 98			add SHOOTS.WIDTH
 16387 80F5 85 9F			sta :STACKORIGIN+9
 16388 80F7 A9 00			lda #$00
 16389 80F9 6D F6 98			adc SHOOTS.WIDTH+1
 16390 80FC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16391 80FE A9 00			lda #$00
 16392 8100 69 00			adc #$00
 16393 8102 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16394 8104 A9 00			lda #$00
 16395 8106 69 00			adc #$00
 16396 8108 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16397 810A A5 9F			lda :STACKORIGIN+9
 16398 810C 38 E9 09			sub #$09
 16399 810F 85 9F			sta :STACKORIGIN+9
 16400 8111 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16401 8113 E9 00			sbc #$00
 16402 8115 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16403 8117 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16404 8119 E9 00			sbc #$00
 16405 811B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16406 811D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16407 811F E9 00			sbc #$00
 16408 8121 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16409 8123 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16410 8125 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16411 8127 66 9F			ror :STACKORIGIN+9
 16412 8129 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16413 812B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16414 812D 66 9F			ror :STACKORIGIN+9
 16415 812F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16416 8131 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16417 8133 66 9F			ror :STACKORIGIN+9
 16418 8135 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16419 8137 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16420 8139 66 9F			ror :STACKORIGIN+9
 16421 813B A5 9F			lda :STACKORIGIN+9
 16422 813D 8D 75 9E			sta X2
 16423 8140 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16424 8142 8D 76 9E			sta X2+1
 16425
 16426 				; optimize OK (service.pas), line = 2931
 16427
 16428 8145 AD 77 9E			lda Y1
 16429 8148 8D 79 9E			sta Y2
 16430 814B AD 78 9E			lda Y1+1
 16431 814E 8D 7A 9E			sta Y2+1
 16432
 16433 				; optimize OK (service.pas), line = 2933
 16434
 16435 8151 AD 77 9E			lda Y1
 16436 8154 0A				asl @
 16437 8155 0A				asl @
 16438 8156 0A				asl @
 16439 8157 0A				asl @
 16440 8158 18 6D 73 9E			add X1
 16441 815C A8				tay
 16442 815D B9 00 DB			lda adr.WALL,y
 16443 8160 D0 11			jne l_3159x
 16444 8162 AD 79 9E			lda Y2
 16445 8165 0A				asl @
 16446 8166 0A				asl @
 16447 8167 0A				asl @
 16448 8168 0A				asl @
 16449 8169 18 6D 75 9E			add X2
 16450 816D A8				tay
 16451 816E B9 00 DB			lda adr.WALL,y
 16452 8171 F0 3E			jeq l_3159
 16453 8173			l_3159x
 16454
 16455 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2935
 16456
 16457 8173 20 26 7F			jsr REMOVE_FIRE
 16458
 16459 				; optimize OK (service.pas), line = 2936
 16460
 16461 8176 A9 00			lda #$00
 16462 8178 8D 7D 99			sta FIRE.SHOT
 16463
 16464 				; optimize OK (service.pas), line = 2938
 16465
 16466 817B AD 73 9E			lda X1
 16467 817E 8D D3 9D			sta SHOOT_BLOCK_WITH_FIRE.XB
 16468 8181 AD 74 9E			lda X1+1
 16469 8184 8D D4 9D			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16470 8187 AD 77 9E			lda Y1
 16471 818A 8D D5 9D			sta SHOOT_BLOCK_WITH_FIRE.YB
 16472 818D AD 78 9E			lda Y1+1
 16473 8190 8D D6 9D			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16474 8193 20 8B 5D			jsr SHOOT_BLOCK_WITH_FIRE
 16475
 16476 				; optimize OK (service.pas), line = 2939
 16477
 16478 8196 AD 75 9E			lda X2
 16479 8199 8D D3 9D			sta SHOOT_BLOCK_WITH_FIRE.XB
 16480 819C AD 76 9E			lda X2+1
 16481 819F 8D D4 9D			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16482 81A2 AD 79 9E			lda Y2
 16483 81A5 8D D5 9D			sta SHOOT_BLOCK_WITH_FIRE.YB
 16484 81A8 AD 7A 9E			lda Y2+1
 16485 81AB 8D D6 9D			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16486 81AE 20 8B 5D			jsr SHOOT_BLOCK_WITH_FIRE
 16487 81B1			l_30C9
 16488 81B1			l_3159
 16489 81B1			l_30F0
 16490 81B1			l_3093
 16491 81B1			l_3039
 16492
 16493 				; ------------------------------------------------------------
 16494
 16495 = 9E73			X1	= DATAORIGIN+$06E7
 16496 = 9E75			X2	= DATAORIGIN+$06E9
 16497 = 9E77			Y1	= DATAORIGIN+$06EB
 16498 = 9E79			Y2	= DATAORIGIN+$06ED
 16499
 16500 = 9E73			@VarData	= X1
 16501 = 0008			@VarDataSize	= 8
 16502
 16503 81B1			@exit
 16504 					.ifdef @new
 16505 					lda <@VarData
 16506 					sta :ztmp
 16507 					lda >@VarData
 16508 					ldy #@VarDataSize-1
 16509 					jmp @FreeMem
 16510 					els
 16511 81B1 60				rts						; ret
 16512 					eif
 16513 				.endl
 16514
 16515 81B2			.local	REMOVE_FLUX					; PROCEDURE
 16516
 16517 				; optimize OK (service.pas), line = 2951
 16518
 16519 81B2 A9 00			lda #$00
 16520 81B4 8D 7B 9E			sta Y
 16521
 16522 81B7			l_317E
 16523 				; --- ForToDoCondition
 16524 81B7 AC 7B 9E			ldy Y
 16525 81BA C0 14			cpy #$14
 16526 81BC B0 6C			jcs l_318C
 16527
 16528 				; optimize OK (service.pas), line = 2953
 16529
 16530 81BE A9 D9			lda #$D9
 16531 81C0 79 B0 C0			adc adr.ROW+$B0,y
 16532 81C3 8D B2 9C			sta BLITROW.DST
 16533 81C6 A9 50			lda #$50
 16534 81C8 79 B0 C1			adc adr.ROW+256+$B0,y
 16535 81CB 8D B3 9C			sta BLITROW.DST+1
 16536 81CE A9 00			lda #$00
 16537 81D0 69 00			adc #$00
 16538 81D2 8D B4 9C			sta BLITROW.DST+2
 16539 81D5 A9 00			lda #$00
 16540 81D7 69 00			adc #$00
 16541 81D9 8D B5 9C			sta BLITROW.DST+3
 16542 81DC AD 91 98			lda PLAYSCREEN.OFS
 16543 81DF 18 69 D9			add #$D9
 16544 81E2 85 A1			sta :STACKORIGIN+11
 16545 81E4 AD 92 98			lda PLAYSCREEN.OFS+1
 16546 81E7 69 00			adc #$00
 16547 81E9 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16548 81EB AD 93 98			lda PLAYSCREEN.OFS+2
 16549 81EE 69 00			adc #$00
 16550 81F0 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16551 81F2 AD 94 98			lda PLAYSCREEN.OFS+3
 16552 81F5 69 00			adc #$00
 16553 81F7 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16554 81F9 A5 A1			lda :STACKORIGIN+11
 16555 81FB 18 79 B0 C0			add adr.ROW+$B0,y
 16556 81FF 8D AE 9C			sta BLITROW.SRC
 16557 8202 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16558 8204 79 B0 C1			adc adr.ROW+256+$B0,y
 16559 8207 8D AF 9C			sta BLITROW.SRC+1
 16560 820A A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16561 820C 69 00			adc #$00
 16562 820E 8D B0 9C			sta BLITROW.SRC+2
 16563 8211 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16564 8213 69 00			adc #$00
 16565 8215 8D B1 9C			sta BLITROW.SRC+3
 16566 8218 A9 08			lda #$08
 16567 821A 8D B6 9C			sta BLITROW.SIZE
 16568 821D A9 00			lda #$00
 16569 821F 8D B7 9C			sta BLITROW.SIZE+1
 16570 8222 20 2C 2D			jsr BLITROW
 16571
 16572 				; --- ForToDoEpilog
 16573 8225 EE 7B 9E			inc Y
 16574 8228 D0 8D			jne l_317E
 16575 822A			l_318C
 16576
 16577 				; ------------------------------------------------------------
 16578
 16579 = 9E7B			Y	= DATAORIGIN+$06EF
 16580
 16581 = 9E7B			@VarData	= Y
 16582 = 0001			@VarDataSize	= 1
 16583
 16584 822A			@exit
 16585 					.ifdef @new
 16586 					lda <@VarData
 16587 					sta :ztmp
 16588 					lda >@VarData
 16589 					ldy #@VarDataSize-1
 16590 					jmp @FreeMem
 16591 					els
 16592 822A 60				rts						; ret
 16593 					eif
 16594 				.endl
 16595
 16596 822B			.local	CHECK_FLUX					; PROCEDURE
 16597
 16598 				; optimize OK (service.pas), line = 2961
 16599
 16600 822B AD 82 99			lda SCRFLUXCNT
 16601 822E 8D 7D 9E			sta FX
 16602
 16603 				; optimize OK (service.pas), line = 2962
 16604
 16605 8231 AD 81 99			lda SCRFLUX
 16606 8234 D0 03 4C C7 82		jeq l_31CB
 16607
 16608 				; optimize OK (service.pas), line = 2964
 16609
 16610 8239 A9 00			lda #$00
 16611 823B 8D 7C 9E			sta Y
 16612
 16613 823E			l_31D5
 16614 				; --- ForToDoCondition
 16615 823E AC 7C 9E			ldy Y
 16616 8241 C0 14			cpy #$14
 16617 8243 B0 73			jcs l_31E3
 16618
 16619 				; optimize OK (service.pas), line = 2966
 16620
 16621 8245 A9 D9			lda #$D9
 16622 8247 79 B0 C0			adc adr.ROW+$B0,y
 16623 824A 8D B2 9C			sta BLITROW.DST
 16624 824D A9 50			lda #$50
 16625 824F 79 B0 C1			adc adr.ROW+256+$B0,y
 16626 8252 8D B3 9C			sta BLITROW.DST+1
 16627 8255 A9 00			lda #$00
 16628 8257 69 00			adc #$00
 16629 8259 8D B4 9C			sta BLITROW.DST+2
 16630 825C A9 00			lda #$00
 16631 825E 69 00			adc #$00
 16632 8260 8D B5 9C			sta BLITROW.DST+3
 16633 8263 AD 7C 9E			lda Y
 16634 8266 18 6D 7D 9E			add FX
 16635 826A 85 A2			sta :STACKORIGIN+12
 16636 826C A9 00			lda #$00
 16637 826E 69 00			adc #$00
 16638 8270 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 16639 8272 A9 00			lda #$00
 16640 8274 06 A2			asl :STACKORIGIN+12
 16641 8276 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16642 8278 2A				rol @
 16643 8279 06 A2			asl :STACKORIGIN+12
 16644 827B 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16645 827D 2A				rol @
 16646 827E 06 A2			asl :STACKORIGIN+12
 16647 8280 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 16648 8282 2A				rol @
 16649 8283 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 16650 8285 AD 01 99			lda FLUX.OFS
 16651 8288 18 65 A2			add :STACKORIGIN+12
 16652 828B 8D AE 9C			sta BLITROW.SRC
 16653 828E AD 02 99			lda FLUX.OFS+1
 16654 8291 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 16655 8293 8D AF 9C			sta BLITROW.SRC+1
 16656 8296 AD 03 99			lda FLUX.OFS+2
 16657 8299 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 16658 829B 8D B0 9C			sta BLITROW.SRC+2
 16659 829E AD 04 99			lda FLUX.OFS+3
 16660 82A1 69 00			adc #$00
 16661 82A3 8D B1 9C			sta BLITROW.SRC+3
 16662 82A6 A9 08			lda #$08
 16663 82A8 8D B6 9C			sta BLITROW.SIZE
 16664 82AB A9 00			lda #$00
 16665 82AD 8D B7 9C			sta BLITROW.SIZE+1
 16666 82B0 20 2C 2D			jsr BLITROW
 16667
 16668 				; --- ForToDoEpilog
 16669 82B3 EE 7C 9E			inc Y
 16670 82B6 D0 86			jne l_31D5
 16671 82B8			l_31E3
 16672
 16673 				; optimize FAIL (0, service.pas), line = 2968
 16674
 16675 82B8 EE 82 99			inc SCRFLUXCNT
 16676
 16677 				; optimize OK (service.pas), line = 2969
 16678
 16679 82BB AD 82 99			lda SCRFLUXCNT
 16680 82BE C9 15			cmp #$15
 16681 82C0 90 05			jcc l_3222
 16682 82C2 A9 00			lda #$00
 16683 82C4 8D 82 99			sta SCRFLUXCNT
 16684 82C7			l_3222
 16685 82C7			l_31CB
 16686
 16687 				; ------------------------------------------------------------
 16688
 16689 = 9E7C			Y	= DATAORIGIN+$06F0
 16690 = 9E7D			FX	= DATAORIGIN+$06F1
 16691
 16692 = 9E7C			@VarData	= Y
 16693 = 0002			@VarDataSize	= 2
 16694
 16695 82C7			@exit
 16696 					.ifdef @new
 16697 					lda <@VarData
 16698 					sta :ztmp
 16699 					lda >@VarData
 16700 					ldy #@VarDataSize-1
 16701 					jmp @FreeMem
 16702 					els
 16703 82C7 60				rts						; ret
 16704 					eif
 16705 				.endl
 16706
 16707 82C8			.local	VAUS_OUT					; PROCEDURE
 16708
 16709 				; optimize FAIL ('NOSOUND', service.pas), line = 2977
 16710
 16711 82C8 20 43 2E			jsr NOSOUND
 16712
 16713 				; optimize OK (service.pas), line = 2979
 16714
 16715 82CB AD 61 99			lda CUR_PLAYER
 16716 82CE 0A				asl @
 16717 82CF 0A				asl @
 16718 82D0 A8				tay
 16719 82D1 B9 46 99			lda adr.SCORE.PLAYER,y
 16720 82D4 18 69 10			add #$10
 16721 82D7 99 46 99			sta adr.SCORE.PLAYER,y
 16722 82DA B9 47 99			lda adr.SCORE.PLAYER+1,y
 16723 82DD 69 27			adc #$27
 16724 82DF 99 47 99			sta adr.SCORE.PLAYER+1,y
 16725 82E2 B9 48 99			lda adr.SCORE.PLAYER+2,y
 16726 82E5 69 00			adc #$00
 16727 82E7 99 48 99			sta adr.SCORE.PLAYER+2,y
 16728 82EA B9 49 99			lda adr.SCORE.PLAYER+3,y
 16729 82ED 69 00			adc #$00
 16730 82EF 99 49 99			sta adr.SCORE.PLAYER+3,y
 16731
 16732 				; optimize OK (service.pas), line = 2980
 16733
 16734 82F2 A9 00			lda #$00
 16735 82F4 8D 44 99			sta REMAIN_BLK
 16736
 16737 				; optimize OK (service.pas), line = 2982
 16738
 16739 82F7 AD 05 99			lda VAUS.X
 16740 82FA 8D 82 9E			sta Z
 16741 82FD A9 00			lda #$00
 16742 82FF 8D 83 9E			sta Z+1
 16743
 16744 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2984
 16745
 16746 8302 20 63 36			jsr WAIT_VBL
 16747
 16748 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2985
 16749
 16750 8305 20 69 45			jsr REMOVE_VAUS
 16751
 16752 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2986
 16753
 16754 8308 20 FC 45			jsr PLACE_VAUS
 16755
 16756 				; optimize OK (service.pas), line = 2988
 16757
 16758 830B AD 82 9E			lda Z
 16759 830E 8D 7E 9E			sta X
 16760 8311 AD 83 9E			lda Z+1
 16761 8314 8D 7F 9E			sta X+1
 16762 8317 AD 82 9E			lda Z
 16763 831A 18 69 2C			add #$2C
 16764 831D 8D 30 83			sta @FORTMP_324D_0
 16765 8320 AD 83 9E			lda Z+1
 16766 8323 69 00			adc #$00
 16767 8325 8D 29 83			sta @FORTMP_324D_1
 16768
 16769 8328			l_3250
 16770 				; --- ForToDoCondition
 16771 8328 A9 00			lda @FORTMP_324D_1::#$00
 16772 832A CD 7F 9E			cmp X+1
 16773 832D D0 05			bne @+
 16774 832F A9 00			lda @FORTMP_324D_0::#$00
 16775 8331 CD 7E 9E			cmp X
 16776 				@
 16777 8334 B0 03 4C 08 84		jcc l_325C
 16778
 16779 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2990
 16780
 16781 8339 20 63 36			jsr WAIT_VBL
 16782
 16783 				; optimize OK (service.pas), line = 2992
 16784
 16785 833C AD 05 99			lda VAUS.X
 16786 833F 8D 07 99			sta VAUS.OLDX
 16787 8342 A9 00			lda #$00
 16788 8344 8D 08 99			sta VAUS.OLDX+1
 16789
 16790 				; optimize OK (service.pas), line = 2993
 16791
 16792 8347 AD 7E 9E			lda X
 16793 834A 8D 05 99			sta VAUS.X
 16794
 16795 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2994
 16796
 16797 834D 20 69 45			jsr REMOVE_VAUS
 16798
 16799 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 2995
 16800
 16801 8350 20 2B 82			jsr CHECK_FLUX
 16802
 16803 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2996
 16804
 16805 8353 20 FC 45			jsr PLACE_VAUS
 16806
 16807 				; optimize OK (service.pas), line = 2998
 16808
 16809 8356 AD 06 99			lda VAUS.Y
 16810 8359 8D 80 9E			sta Y
 16811 835C A9 00			lda #$00
 16812 835E 8D 81 9E			sta Y+1
 16813 8361 AD 06 99			lda VAUS.Y
 16814 8364 18 6D 0E 99			add VAUS.HEIGHT
 16815 8368 8D 7A 83			sta @FORTMP_327B_0
 16816 836B A9 00			lda #$00
 16817 836D 69 00			adc #$00
 16818 836F 8D 73 83			sta @FORTMP_327B_1
 16819
 16820 8372			l_327E
 16821 				; --- ForToDoCondition
 16822 8372 A9 00			lda @FORTMP_327B_1::#$00
 16823 8374 CD 81 9E			cmp Y+1
 16824 8377 D0 05			bne @+
 16825 8379 A9 00			lda @FORTMP_327B_0::#$00
 16826 837B CD 80 9E			cmp Y
 16827 				@
 16828 837E 90 78			jcc l_328A
 16829
 16830 				; optimize OK (service.pas), line = 3000
 16831
 16832 8380 AC 80 9E			ldy Y
 16833 8383 A9 E1			lda #$E1
 16834 8385 18 79 00 C0			add adr.ROW,y
 16835 8389 8D B2 9C			sta BLITROW.DST
 16836 838C A9 50			lda #$50
 16837 838E 79 00 C1			adc adr.ROW+256,y
 16838 8391 8D B3 9C			sta BLITROW.DST+1
 16839 8394 A9 00			lda #$00
 16840 8396 69 00			adc #$00
 16841 8398 8D B4 9C			sta BLITROW.DST+2
 16842 839B A9 00			lda #$00
 16843 839D 69 00			adc #$00
 16844 839F 8D B5 9C			sta BLITROW.DST+3
 16845 83A2 AD 91 98			lda PLAYSCREEN.OFS
 16846 83A5 18 69 E1			add #$E1
 16847 83A8 85 A1			sta :STACKORIGIN+11
 16848 83AA AD 92 98			lda PLAYSCREEN.OFS+1
 16849 83AD 69 00			adc #$00
 16850 83AF 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16851 83B1 AD 93 98			lda PLAYSCREEN.OFS+2
 16852 83B4 69 00			adc #$00
 16853 83B6 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16854 83B8 AD 94 98			lda PLAYSCREEN.OFS+3
 16855 83BB 69 00			adc #$00
 16856 83BD 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16857 83BF A5 A1			lda :STACKORIGIN+11
 16858 83C1 18 79 00 C0			add adr.ROW,y
 16859 83C5 8D AE 9C			sta BLITROW.SRC
 16860 83C8 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16861 83CA 79 00 C1			adc adr.ROW+256,y
 16862 83CD 8D AF 9C			sta BLITROW.SRC+1
 16863 83D0 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16864 83D2 69 00			adc #$00
 16865 83D4 8D B0 9C			sta BLITROW.SRC+2
 16866 83D7 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16867 83D9 69 00			adc #$00
 16868 83DB 8D B1 9C			sta BLITROW.SRC+3
 16869 83DE A9 28			lda #$28
 16870 83E0 8D B6 9C			sta BLITROW.SIZE
 16871 83E3 A9 00			lda #$00
 16872 83E5 8D B7 9C			sta BLITROW.SIZE+1
 16873 83E8 20 2C 2D			jsr BLITROW
 16874
 16875 				; --- ForToDoEpilog
 16876 83EB EE 80 9E			inc Y
 16877 83EE D0 82			jne l_327E
 16878 83F0 EE 81 9E			inc Y+1
 16879 83F3 F0 03 4C 72 83		jne l_327E
 16880 83F8			l_328A
 16881
 16882 				; --- ForToDoEpilog
 16883 83F8 EE 7E 9E			inc X
 16884 83FB F0 03 4C 28 83		jne l_3250
 16885 8400 EE 7F 9E			inc X+1
 16886 8403 F0 03 4C 28 83		jne l_3250
 16887 8408			l_325C
 16888
 16889 				; ------------------------------------------------------------
 16890
 16891 = 9E7E			X	= DATAORIGIN+$06F2
 16892 = 9E80			Y	= DATAORIGIN+$06F4
 16893 = 9E82			Z	= DATAORIGIN+$06F6
 16894
 16895 = 9E7E			@VarData	= X
 16896 = 0006			@VarDataSize	= 6
 16897
 16898 8408			@exit
 16899 					.ifdef @new
 16900 					lda <@VarData
 16901 					sta :ztmp
 16902 					lda >@VarData
 16903 					ldy #@VarDataSize-1
 16904 					jmp @FreeMem
 16905 					els
 16906 8408 60				rts						; ret
 16907 					eif
 16908 				.endl
 16909
 16910 8409			.local	CHECK_BONUS_TYPE				; PROCEDURE
 16911
 16912 				; optimize OK (service.pas), line = 3010
 16913
 16914 8409 AD 11 99			lda VAUS.LETTER
 16915 840C 10 03 4C BF 84		jmi l_32C4
 16916 8411 D0 03 4C BF 84		jeq l_32C4
 16917
 16918 				; optimize OK (service.pas), line = 3012
 16919
 16920 8416 A0 00			ldy #$00
 16921 8418 AD 11 99			lda VAUS.LETTER
 16922 841B 10 01			spl
 16923 841D 88				dey
 16924 841E 38 E9 01			sub #$01
 16925 8421 8D 79 99			sta LETT.LAST
 16926 8424 98				tya
 16927 8425 E9 00			sbc #$00
 16928 8427 8D 7A 99			sta LETT.LAST+1
 16929
 16930 				; optimize OK (service.pas), line = 3013
 16931
 16932 842A AC 8C 9E 84 84 AC + 	mwy B2 :bp2
 16933 8434 A0 17			ldy #B2.INPLAY-DATAORIGIN
 16934 8436 B1 84			lda (:bp2),y
 16935 8438 F0 0F			jeq l_32DB
 16936 843A AD 8C 9E			lda B2
 16937 843D 8D 1D 9D			sta REMOVE_BALL.BALL
 16938 8440 AD 8D 9E			lda B2+1
 16939 8443 8D 1E 9D			sta REMOVE_BALL.BALL+1
 16940 8446 20 B3 35			jsr REMOVE_BALL
 16941 8449			l_32DB
 16942
 16943 				; optimize OK (service.pas), line = 3014
 16944
 16945 8449 AC 90 9E 84 84 AC + 	mwy B3 :bp2
 16946 8453 A0 17			ldy #B3.INPLAY-DATAORIGIN
 16947 8455 B1 84			lda (:bp2),y
 16948 8457 F0 0F			jeq l_32ED
 16949 8459 AD 90 9E			lda B3
 16950 845C 8D 1D 9D			sta REMOVE_BALL.BALL
 16951 845F AD 91 9E			lda B3+1
 16952 8462 8D 1E 9D			sta REMOVE_BALL.BALL+1
 16953 8465 20 B3 35			jsr REMOVE_BALL
 16954 8468			l_32ED
 16955
 16956 				; optimize OK (service.pas), line = 3015
 16957
 16958 8468 AC 8C 9E 84 84 AC + 	mwy B2 :bp2
 16959 8472 A0 17			ldy #B2.INPLAY-DATAORIGIN
 16960 8474 A9 00			lda #$00
 16961 8476 91 84			sta (:bp2),y
 16962
 16963 				; optimize OK (service.pas), line = 3016
 16964
 16965 8478 AC 90 9E 84 84 AC + 	mwy B3 :bp2
 16966 8482 A0 17			ldy #B3.INPLAY-DATAORIGIN
 16967 8484 91 84			sta (:bp2),y
 16968
 16969 				; optimize OK (service.pas), line = 3017
 16970
 16971 8486 8D 81 99			sta SCRFLUX
 16972
 16973 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3018
 16974
 16975 8489 20 B2 81			jsr REMOVE_FLUX
 16976
 16977 				; optimize OK (service.pas), line = 3020
 16978
 16979 848C AD 11 99			lda VAUS.LETTER
 16980 848F C9 06			cmp #$06
 16981 8491 F0 2C			jeq l_3312
 16982
 16983 				; optimize OK (service.pas), line = 3022
 16984
 16985 8493 AC 88 9E 84 84 AC + 	mwy B1 :bp2
 16986 849D A0 18			ldy #B1.LAUNCH-DATAORIGIN
 16987 849F A9 00			lda #$00
 16988 84A1 91 84			sta (:bp2),y
 16989
 16990 				; optimize OK (service.pas), line = 3023
 16991
 16992 84A3 AC 8C 9E 84 84 AC + 	mwy B2 :bp2
 16993 84AD A0 18			ldy #B2.LAUNCH-DATAORIGIN
 16994 84AF 91 84			sta (:bp2),y
 16995
 16996 				; optimize OK (service.pas), line = 3024
 16997
 16998 84B1 AC 90 9E 84 84 AC + 	mwy B3 :bp2
 16999 84BB A0 18			ldy #B3.LAUNCH-DATAORIGIN
 17000 84BD 91 84			sta (:bp2),y
 17001 84BF			l_3312
 17002 84BF			l_32C4
 17003
 17004 				; optimize OK (service.pas), line = 3028
 17005
 17006 84BF AD 11 99			lda VAUS.LETTER
 17007 84C2 8D 96 9E			sta @CASETMP_000A
 17008 84C5 C9 01			cmp #$01
 17009 84C7 D0 4D			jne l_332E
 17010 				@
 17011
 17012 				; optimize OK (service.pas), line = 3031
 17013
 17014 84C9 AD 7D 99			lda FIRE.SHOT
 17015 84CC F0 03			jeq l_333A
 17016 84CE 20 26 7F			jsr REMOVE_FIRE
 17017 84D1			l_333A
 17018
 17019 				; optimize OK (service.pas), line = 3032
 17020
 17021 84D1 AD AD 98 8D 95 98 + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 17022
 17023 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3033
 17024
 17025 8501 20 09 45			jsr MODIFY_VAUS
 17026
 17027 				; optimize OK (service.pas), line = 3034
 17028
 17029 8504 A9 00			lda #$00
 17030 8506 8D 11 99			sta VAUS.LETTER
 17031
 17032 				; optimize OK (service.pas), line = 3035
 17033
 17034 8509 A9 01			lda #$01
 17035 850B 8D 7E 99			sta FIRE.AVL
 17036
 17037 				; optimize OK (service.pas), line = 3036
 17038
 17039 850E A9 00			lda #$00
 17040 8510 8D 7D 99			sta FIRE.SHOT
 17041 8513 4C 44 87			jmp a_000A
 17042 8516			l_332E
 17043 8516 C9 02			cmp #$02
 17044 8518 D0 46			jne l_3354
 17045
 17046 				; optimize OK (service.pas), line = 3040
 17047
 17048 851A AD 7D 99			lda FIRE.SHOT
 17049 851D F0 03			jeq l_3360
 17050 851F 20 26 7F			jsr REMOVE_FIRE
 17051 8522			l_3360
 17052
 17053 				; optimize OK (service.pas), line = 3041
 17054
 17055 8522 AD A5 98 8D 95 98 + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 17056
 17057 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3042
 17058
 17059 8552 20 09 45			jsr MODIFY_VAUS
 17060
 17061 				; optimize OK (service.pas), line = 3043
 17062
 17063 8555 A9 00			lda #$00
 17064 8557 8D 11 99			sta VAUS.LETTER
 17065
 17066 				; optimize OK (service.pas), line = 3044
 17067
 17068 855A 8D 7E 99			sta FIRE.AVL
 17069 855D 4C 44 87			jmp a_000A
 17070 8560			l_3354
 17071 8560 C9 03			cmp #$03
 17072 8562 D0 4B			jne l_3376
 17073
 17074 				; optimize OK (service.pas), line = 3048
 17075
 17076 8564 AD 7D 99			lda FIRE.SHOT
 17077 8567 F0 03			jeq l_3382
 17078 8569 20 26 7F			jsr REMOVE_FIRE
 17079 856C			l_3382
 17080
 17081 				; optimize OK (service.pas), line = 3049
 17082
 17083 856C AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17084
 17085 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3050
 17086
 17087 859C 20 09 45			jsr MODIFY_VAUS
 17088
 17089 				; optimize OK (service.pas), line = 3051
 17090
 17091 859F A9 00			lda #$00
 17092 85A1 8D 11 99			sta VAUS.LETTER
 17093
 17094 				; optimize OK (service.pas), line = 3052
 17095
 17096 85A4 8D 7E 99			sta FIRE.AVL
 17097
 17098 				; optimize OK (service.pas), line = 3053
 17099
 17100 85A7 A9 01			lda #$01
 17101 85A9 8D 81 99			sta SCRFLUX
 17102 85AC 4C 44 87			jmp a_000A
 17103 85AF			l_3376
 17104 85AF C9 04			cmp #$04
 17105 85B1 D0 3E			jne l_339C
 17106
 17107 				; optimize OK (service.pas), line = 3057
 17108
 17109 85B3 AD 7D 99			lda FIRE.SHOT
 17110 85B6 F0 03			jeq l_33A8
 17111 85B8 20 26 7F			jsr REMOVE_FIRE
 17112 85BB			l_33A8
 17113
 17114 				; optimize OK (service.pas), line = 3058
 17115
 17116 85BB AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17117
 17118 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3059
 17119
 17120 85EB 20 09 45			jsr MODIFY_VAUS
 17121 				; optimize OK (service.pas), line = 3060
 17122 85EE 4C 88 86			jmp s_33E5
 17123 85F1			l_339C
 17124 85F1 C9 05			cmp #$05
 17125 85F3 F0 03 4C 8B 86		jne l_33BA
 17126
 17127 				; optimize OK (service.pas), line = 3064
 17128
 17129 85F8 AD 7D 99			lda FIRE.SHOT
 17130 85FB F0 03			jeq l_33C6
 17131 85FD 20 26 7F			jsr REMOVE_FIRE
 17132 8600			l_33C6
 17133
 17134 				; optimize OK (service.pas), line = 3065
 17135
 17136 8600 AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17137
 17138 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3066
 17139
 17140 8630 20 09 45			jsr MODIFY_VAUS
 17141
 17142 				; optimize OK (service.pas), line = 3067
 17143
 17144 8633 A9 00			lda #$00
 17145 8635 8D 11 99			sta VAUS.LETTER
 17146
 17147 				; optimize OK (service.pas), line = 3068
 17148
 17149 8638 AC 88 9E 84 84 AC + 	mwy B1 :bp2
 17150 8642 A0 0C			ldy #B1.SPEED-DATAORIGIN
 17151 8644 B1 84			lda (:bp2),y
 17152 8646 38 E9 F4			sub #$F4
 17153 8649 8D CF 9C			sta MAX.A
 17154 864C C8				iny
 17155 864D B1 84			lda (:bp2),y
 17156 864F E9 01			sbc #$01
 17157 8651 8D D0 9C			sta MAX.A+1
 17158 8654 A9 F4			lda #$F4
 17159 8656 8D D1 9C			sta MAX.B
 17160 8659 A9 01			lda #$01
 17161 865B 8D D2 9C			sta MAX.B+1
 17162 865E 20 45 2E			jsr MAX
 17163 8661 AD D3 9C			lda MAX.RESULT
 17164 8664 8D 94 9E			sta X
 17165 8667 AD D4 9C			lda MAX.RESULT+1
 17166 866A 8D 95 9E			sta X+1
 17167
 17168 				; optimize OK (service.pas), line = 3069
 17169
 17170 866D AD 88 9E			lda B1
 17171 8670 8D 28 9D			sta SET_BALL_SPEED.BALL
 17172 8673 AD 89 9E			lda B1+1
 17173 8676 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 17174 8679 AD 94 9E			lda X
 17175 867C 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 17176 867F AD 95 9E			lda X+1
 17177 8682 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 17178 8685 20 40 37			jsr SET_BALL_SPEED
 17179 8688			s_33E5
 17180 				; optimize OK (service.pas), line = 3070
 17181 8688 4C CA 86			jmp s_3403
 17182 868B			l_33BA
 17183 868B C9 06			cmp #$06
 17184 868D D0 3E			jne l_33EC
 17185
 17186 				; optimize OK (service.pas), line = 3074
 17187
 17188 868F AD 7D 99			lda FIRE.SHOT
 17189 8692 F0 03			jeq l_33F8
 17190 8694 20 26 7F			jsr REMOVE_FIRE
 17191 8697			l_33F8
 17192
 17193 				; optimize OK (service.pas), line = 3075
 17194
 17195 8697 AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17196
 17197 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3076
 17198
 17199 86C7 20 09 45			jsr MODIFY_VAUS
 17200 86CA			s_3403
 17201 				; optimize OK (service.pas), line = 3077
 17202 86CA 4C 3F 87			jmp s_3433
 17203 86CD			l_33EC
 17204 86CD C9 07			cmp #$07
 17205 86CF D0 73			jne l_340A
 17206
 17207 				; optimize OK (service.pas), line = 3081
 17208
 17209 86D1 AD 7D 99			lda FIRE.SHOT
 17210 86D4 F0 03			jeq l_3416
 17211 86D6 20 26 7F			jsr REMOVE_FIRE
 17212 86D9			l_3416
 17213
 17214 				; optimize OK (service.pas), line = 3082
 17215
 17216 86D9 AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17217
 17218 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3083
 17219
 17220 8709 20 09 45			jsr MODIFY_VAUS
 17221
 17222 				; optimize OK (service.pas), line = 3084
 17223
 17224 870C A9 00			lda #$00
 17225 870E 8D 11 99			sta VAUS.LETTER
 17226
 17227 				; optimize OK (service.pas), line = 3085
 17228
 17229 8711 AC 61 99			ldy CUR_PLAYER
 17230 8714 B9 55 99			lda adr.SCORE.LIVES,y
 17231 8717 18 69 01			add #$01
 17232 871A 99 55 99			sta adr.SCORE.LIVES,y
 17233
 17234 				; optimize OK (service.pas), line = 3086
 17235
 17236 871D 8D 5C 9E			sta PLOT_LIVES.LIVES
 17237 8720 A9 00			lda #$00
 17238 8722 8D 5D 9E			sta PLOT_LIVES.LIVES+1
 17239 8725 20 B5 7B			jsr PLOT_LIVES
 17240
 17241 				; optimize OK (service.pas), line = 3087
 17242
 17243 8728 A9 D0			lda #$D0
 17244 872A 8D 81 98			sta BALL_BLOCK_SOUND.A
 17245 872D A9 07			lda #$07
 17246 872F 8D 82 98			sta BALL_BLOCK_SOUND.A+1
 17247 8732 A9 0A			lda #$0A
 17248 8734 8D 83 98			sta BALL_BLOCK_SOUND.B
 17249 8737 A9 00			lda #$00
 17250 8739 8D 84 98			sta BALL_BLOCK_SOUND.B+1
 17251 873C 20 5D 2B			jsr BALL_BLOCK_SOUND
 17252 873F			s_3433
 17253
 17254 				; optimize OK (service.pas), line = 3088
 17255
 17256 873F A9 00			lda #$00
 17257 8741 8D 7E 99			sta FIRE.AVL
 17258 8744			l_340A
 17259 8744			a_000A
 17260
 17261 				; ------------------------------------------------------------
 17262
 17263 = 9E88			B1	= DATAORIGIN+$06FC
 17264 = 978C			B1.X	= DATAORIGIN+$0000
 17265 = 978E			B1.Y	= DATAORIGIN+$0002
 17266 = 9790			B1.FINEX	= DATAORIGIN+$0004
 17267 = 9792			B1.FINEY	= DATAORIGIN+$0006
 17268 = 9794			B1.OLDX	= DATAORIGIN+$0008
 17269 = 9796			B1.OLDY	= DATAORIGIN+$000A
 17270 = 9798			B1.SPEED	= DATAORIGIN+$000C
 17271 = 979A			B1.FINESPEED	= DATAORIGIN+$000E
 17272 = 979C			B1.SPEEDX	= DATAORIGIN+$0010
 17273 = 979E			B1.SPEEDY	= DATAORIGIN+$0012
 17274 = 97A0			B1.SBD	= DATAORIGIN+$0014
 17275 = 97A2			B1.BRWHIT	= DATAORIGIN+$0016
 17276 = 97A3			B1.INPLAY	= DATAORIGIN+$0017
 17277 = 97A4			B1.LAUNCH	= DATAORIGIN+$0018
 17278 = 97A5			B1.ONVAUS	= DATAORIGIN+$0019
 17279 = 97A6			B1.STM	= DATAORIGIN+$001A
 17280 = 9E8C			B2	= DATAORIGIN+$0700
 17281 = 978C			B2.X	= DATAORIGIN+$0000
 17282 = 978E			B2.Y	= DATAORIGIN+$0002
 17283 = 9790			B2.FINEX	= DATAORIGIN+$0004
 17284 = 9792			B2.FINEY	= DATAORIGIN+$0006
 17285 = 9794			B2.OLDX	= DATAORIGIN+$0008
 17286 = 9796			B2.OLDY	= DATAORIGIN+$000A
 17287 = 9798			B2.SPEED	= DATAORIGIN+$000C
 17288 = 979A			B2.FINESPEED	= DATAORIGIN+$000E
 17289 = 979C			B2.SPEEDX	= DATAORIGIN+$0010
 17290 = 979E			B2.SPEEDY	= DATAORIGIN+$0012
 17291 = 97A0			B2.SBD	= DATAORIGIN+$0014
 17292 = 97A2			B2.BRWHIT	= DATAORIGIN+$0016
 17293 = 97A3			B2.INPLAY	= DATAORIGIN+$0017
 17294 = 97A4			B2.LAUNCH	= DATAORIGIN+$0018
 17295 = 97A5			B2.ONVAUS	= DATAORIGIN+$0019
 17296 = 97A6			B2.STM	= DATAORIGIN+$001A
 17297 = 9E90			B3	= DATAORIGIN+$0704
 17298 = 978C			B3.X	= DATAORIGIN+$0000
 17299 = 978E			B3.Y	= DATAORIGIN+$0002
 17300 = 9790			B3.FINEX	= DATAORIGIN+$0004
 17301 = 9792			B3.FINEY	= DATAORIGIN+$0006
 17302 = 9794			B3.OLDX	= DATAORIGIN+$0008
 17303 = 9796			B3.OLDY	= DATAORIGIN+$000A
 17304 = 9798			B3.SPEED	= DATAORIGIN+$000C
 17305 = 979A			B3.FINESPEED	= DATAORIGIN+$000E
 17306 = 979C			B3.SPEEDX	= DATAORIGIN+$0010
 17307 = 979E			B3.SPEEDY	= DATAORIGIN+$0012
 17308 = 97A0			B3.SBD	= DATAORIGIN+$0014
 17309 = 97A2			B3.BRWHIT	= DATAORIGIN+$0016
 17310 = 97A3			B3.INPLAY	= DATAORIGIN+$0017
 17311 = 97A4			B3.LAUNCH	= DATAORIGIN+$0018
 17312 = 97A5			B3.ONVAUS	= DATAORIGIN+$0019
 17313 = 97A6			B3.STM	= DATAORIGIN+$001A
 17314 = 9E94			X	= DATAORIGIN+$0708
 17315 = 9E96			@CASETMP_000A	= DATAORIGIN+$070A
 17316
 17317 = 9E88			@VarData	= B1
 17318 = 0009			@VarDataSize	= 9
 17319
 17320 8744			@exit
 17321 					.ifdef @new
 17322 					lda <@VarData
 17323 					sta :ztmp
 17324 					lda >@VarData
 17325 					ldy #@VarDataSize-1
 17326 					jmp @FreeMem
 17327 					els
 17328 8744 60				rts						; ret
 17329 					eif
 17330 				.endl
 17331
 17332 8745			.local	DEVIATE_BALL					; PROCEDURE
 17333
 17334 				; --- RepeatUntilProlog
 17335 8745			l_3441
 17336
 17337 				; optimize OK (service.pas), line = 3101
 17338
 17339 8745 AD 97 9E			lda BALL
 17340 8748 8D 40 9D			sta GET_BALL_DIRECTION.BALL
 17341 874B AD 98 9E			lda BALL+1
 17342 874E 8D 41 9D			sta GET_BALL_DIRECTION.BALL+1
 17343 8751 20 64 3B			jsr GET_BALL_DIRECTION
 17344 8754 E8				inx
 17345 8755 AD 44 9D 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 17346 875A AD 45 9D 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17347 875F A9 1E			lda #$1E
 17348 8761 20 21 26			jsr SYSTEM.RANDOM.@010180000
 17349 8764 E8				inx
 17350 8765 AD D1 97 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 17351 876A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17352 876E 20 E5 10			jsr addAX_CX
 17353 8771 B5 95			lda :STACKORIGIN-1,x
 17354 8773 38 E9 0F			sub #$0F
 17355 8776 8D 9B 9E			sta TEMP
 17356 8779 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 17357 877B E9 00			sbc #$00
 17358 877D 8D 9C 9E			sta TEMP+1
 17359 8780 CA				dex
 17360 8781 CA				dex
 17361
 17362 				; optimize OK (service.pas), line = 3102
 17363
 17364 8782 A9 5A			lda #$5A
 17365 8784 85 8E			sta @SMALLINT.MOD.B
 17366 8786 A9 00			lda #$00
 17367 8788 85 8F			sta @SMALLINT.MOD.B+1
 17368 878A AD 9B 9E			lda TEMP
 17369 878D 85 86			sta @SMALLINT.MOD.A
 17370 878F AD 9C 9E			lda TEMP+1
 17371 8792 85 87			sta @SMALLINT.MOD.A+1
 17372 8794 20 9D 12			jsr @SMALLINT.MOD
 17373 8797 A5 92			lda @SMALLINT.MOD.RESULT
 17374 8799 C9 1F			cmp #$1F
 17375 879B A5 93			lda @SMALLINT.MOD.RESULT+1
 17376 879D E9 00			sbc #$00
 17377 879F 50 02			svc
 17378 87A1 49 80			eor #$80
 17379 87A3 30 A0			jmi l_3441
 17380 87A5 A9 5A			lda #$5A
 17381 87A7 85 8E			sta @SMALLINT.MOD.B
 17382 87A9 A9 00			lda #$00
 17383 87AB 85 8F			sta @SMALLINT.MOD.B+1
 17384 87AD AD 9B 9E			lda TEMP
 17385 87B0 85 86			sta @SMALLINT.MOD.A
 17386 87B2 AD 9C 9E			lda TEMP+1
 17387 87B5 85 87			sta @SMALLINT.MOD.A+1
 17388 87B7 20 9D 12			jsr @SMALLINT.MOD
 17389 87BA A5 92			lda @SMALLINT.MOD.RESULT
 17390 87BC C9 3C			cmp #$3C
 17391 87BE A5 93			lda @SMALLINT.MOD.RESULT+1
 17392 87C0 E9 00			sbc #$00
 17393 87C2 50 02			svc
 17394 87C4 49 80			eor #$80
 17395 87C6 30 03 4C 45 87		jpl l_3441
 17396
 17397 				; optimize OK (service.pas), line = 3104
 17398
 17399 87CB AD 97 9E			lda BALL
 17400 87CE 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 17401 87D1 AD 98 9E			lda BALL+1
 17402 87D4 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 17403 87D7 AD 9B 9E			lda TEMP
 17404 87DA 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 17405 87DD AD 9C 9E			lda TEMP+1
 17406 87E0 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 17407 87E3 20 60 39			jsr SET_BALL_DIRECTION
 17408
 17409 				; optimize OK (service.pas), line = 3105
 17410
 17411 87E6 AC 97 9E 84 84 AC + 	mwy BALL :bp2
 17412 87F0 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17413 87F2 B1 84			lda (:bp2),y
 17414 87F4 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 17415 87F7 C8				iny
 17416 87F8 B1 84			lda (:bp2),y
 17417 87FA 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 17418 87FD AD 97 9E			lda BALL
 17419 8800 8D 28 9D			sta SET_BALL_SPEED.BALL
 17420 8803 AD 98 9E			lda BALL+1
 17421 8806 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 17422 8809 20 40 37			jsr SET_BALL_SPEED
 17423
 17424 				; optimize OK (service.pas), line = 3106
 17425
 17426 880C AC 97 9E 84 84 AC + 	mwy BALL :bp2
 17427 8816 A0 14			ldy #BALL.SBD-DATAORIGIN
 17428 8818 A9 00			lda #$00
 17429 881A 91 84			sta (:bp2),y
 17430 881C C8				iny
 17431 881D 91 84			sta (:bp2),y
 17432
 17433 				; ------------------------------------------------------------
 17434
 17435 = 9E97			BALL	= DATAORIGIN+$070B
 17436 = 978C			BALL.X	= DATAORIGIN+$0000
 17437 = 978E			BALL.Y	= DATAORIGIN+$0002
 17438 = 9790			BALL.FINEX	= DATAORIGIN+$0004
 17439 = 9792			BALL.FINEY	= DATAORIGIN+$0006
 17440 = 9794			BALL.OLDX	= DATAORIGIN+$0008
 17441 = 9796			BALL.OLDY	= DATAORIGIN+$000A
 17442 = 9798			BALL.SPEED	= DATAORIGIN+$000C
 17443 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
 17444 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
 17445 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
 17446 = 97A0			BALL.SBD	= DATAORIGIN+$0014
 17447 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
 17448 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
 17449 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
 17450 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
 17451 = 97A6			BALL.STM	= DATAORIGIN+$001A
 17452 = 9E9B			TEMP	= DATAORIGIN+$070F
 17453
 17454 = 9E97			@VarData	= BALL
 17455 = 0004			@VarDataSize	= 4
 17456
 17457 881F			@exit
 17458 					.ifdef @new
 17459 					lda <@VarData
 17460 					sta :ztmp
 17461 					lda >@VarData
 17462 					ldy #@VarDataSize-1
 17463 					jmp @FreeMem
 17464 					els
 17465 881F 60				rts						; ret
 17466 					eif
 17467 				.endl
 17468
 17469 8820			.local	BOUNCEBALL					; FUNCTION
 17470
 17471 8820 4C 95 89			jmp l_3481
 17472
 17473 8823			.local	CHECK_BALL					; PROCEDURE
 17474
 17475 				; optimize OK (service.pas), line = 3136
 17476
 17477 8823 AC FC 9E 84 84 AC + 	mwy BALL :bp2
 17478 882D A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17479 882F B1 84			lda (:bp2),y
 17480 8831 F0 65			jeq l_3490
 17481
 17482 				; optimize OK (service.pas), line = 3139
 17483
 17484 8833 A0 02			ldy #BALL.Y-DATAORIGIN
 17485 8835 B1 84			lda (:bp2),y
 17486 8837 C8				iny
 17487 8838 C9 16			cmp #$16
 17488 883A B1 84			lda (:bp2),y
 17489 883C E9 00			sbc #$00
 17490 883E 50 02			svc
 17491 8840 49 80			eor #$80
 17492 8842 30 20			jmi l_34AD
 17493 8844 A0 02			ldy #BALL.Y-DATAORIGIN
 17494 8846 B1 84			lda (:bp2),y
 17495 8848 C8				iny
 17496 8849 C9 8E			cmp #$8E
 17497 884B B1 84			lda (:bp2),y
 17498 884D E9 00			sbc #$00
 17499 884F 50 02			svc
 17500 8851 49 80			eor #$80
 17501 8853 10 0F			jpl l_34AD
 17502
 17503 				; optimize OK (service.pas), line = 3140
 17504
 17505 8855 AD FC 9E			lda BALL
 17506 8858 8D D8 9D			sta BALL_HIT_BLOCK.BALL
 17507 885B AD FD 9E			lda BALL+1
 17508 885E 8D D9 9D			sta BALL_HIT_BLOCK.BALL+1
 17509 8861 20 A6 5E			jsr BALL_HIT_BLOCK
 17510 8864			l_34AD
 17511
 17512 				; optimize OK (service.pas), line = 3142
 17513
 17514 8864 AD FC 9E			lda BALL
 17515 8867 8D 22 9D			sta SET_BALL.BALL
 17516 886A AD FD 9E			lda BALL+1
 17517 886D 8D 23 9D			sta SET_BALL.BALL+1
 17518 8870 20 67 36			jsr SET_BALL
 17519
 17520 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3143
 17521
 17522 8873 E8				inx
 17523 8874 AD FC 9E 95 96		mva BALL :STACKORIGIN,x
 17524 8879 AD FD 9E 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 17525 887E 20 D4 3D			jsr BALL_SPEED
 17526 8881 AC FC 9E 84 84 AC + 	mwy BALL :bp2
 17527 888B A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17528 888D AD 67 9D			lda BALL_SPEED.RESULT
 17529 8890 91 84			sta (:bp2),y
 17530 8892 C8				iny
 17531 8893 AD 68 9D			lda BALL_SPEED.RESULT+1
 17532 8896 91 84			sta (:bp2),y
 17533 8898			l_3490
 17534
 17535 				; ------------------------------------------------------------
 17536
 17537 = 9EFC			BALL	= DATAORIGIN+$0770
 17538 = 978C			BALL.X	= DATAORIGIN+$0000
 17539 = 978E			BALL.Y	= DATAORIGIN+$0002
 17540 = 9790			BALL.FINEX	= DATAORIGIN+$0004
 17541 = 9792			BALL.FINEY	= DATAORIGIN+$0006
 17542 = 9794			BALL.OLDX	= DATAORIGIN+$0008
 17543 = 9796			BALL.OLDY	= DATAORIGIN+$000A
 17544 = 9798			BALL.SPEED	= DATAORIGIN+$000C
 17545 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
 17546 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
 17547 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
 17548 = 97A0			BALL.SBD	= DATAORIGIN+$0014
 17549 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
 17550 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
 17551 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
 17552 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
 17553 = 97A6			BALL.STM	= DATAORIGIN+$001A
 17554
 17555 = 9EFC			@VarData	= BALL
 17556 = 0002			@VarDataSize	= 2
 17557
 17558 8898			@exit
 17559 					.ifdef @new
 17560 					lda <@VarData
 17561 					sta :ztmp
 17562 					lda >@VarData
 17563 					ldy #@VarDataSize-1
 17564 					jmp @FreeMem
 17565 					els
 17566 8898 60				rts						; ret
 17567 					eif
 17568 				.endl
 17569
 17570 8899			.local	TEST_BALL					; PROCEDURE
 17571
 17572 				; optimize OK (service.pas), line = 3151
 17573
 17574 8899 AC 00 9F 84 84 AC + 	mwy BALL :bp2
 17575 88A3 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17576 88A5 B1 84			lda (:bp2),y
 17577 88A7 D0 03 4C 94 89		jeq l_34CE
 17578
 17579 				; optimize OK (service.pas), line = 3153
 17580
 17581 88AC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17582 88AE B1 84			lda (:bp2),y
 17583 88B0 18 69 01			add #$01
 17584 88B3 91 84			sta (:bp2),y
 17585 88B5 C8				iny
 17586 88B6 B1 84			lda (:bp2),y
 17587 88B8 69 00			adc #$00
 17588 88BA 91 84			sta (:bp2),y
 17589
 17590 				; optimize OK (service.pas), line = 3155
 17591
 17592 88BC A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17593 88BE B1 84			lda (:bp2),y
 17594 88C0 85 9F			sta :STACKORIGIN+9
 17595 88C2 C8				iny
 17596 88C3 B1 84			lda (:bp2),y
 17597 88C5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17598 88C7 AD 67 99			lda LV
 17599 88CA 0A				asl @
 17600 88CB A8				tay
 17601 88CC B9 D1 10			lda adr.LEVEL,y
 17602 88CF 85 A0			sta :STACKORIGIN+10
 17603 88D1 B9 D2 10			lda adr.LEVEL+1,y
 17604 88D4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 17605 88D6 A0 00			ldy #$00
 17606 88D8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17607 88DA 10 01			spl
 17608 88DC 88				dey
 17609 88DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 17610 88DF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 17611 88E1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 17612 88E3				.LOCAL
 17613 88E3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 17614 88E5 38 E9 00			sub #$00
 17615 88E8 D0 1C			bne L4
 17616 88EA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 17617 88EC C9 00			cmp #$00
 17618 88EE D0 0A			bne L1
 17619 88F0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 17620 88F2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 17621 88F4 D0 04			bne L1
 17622 88F6 A5 9F			lda :STACKORIGIN+9
 17623 88F8 C5 A0			cmp :STACKORIGIN+10
 17624 88FA F0 10		L1	beq L5
 17625 88FC B0 04			bcs L3
 17626 88FE A9 FF			lda #$FF
 17627 8900 D0 0A			bne L5
 17628 8902 A9 01		L3	lda #$01
 17629 8904 D0 06			bne L5
 17630 8906 50 04		L4	bvc L5
 17631 8908 49 FF			eor #$FF
 17632 890A 09 01			ora #$01
 17633 890C			L5
 17634 					.ENDL
 17635 890C 30 48			jmi l_34E4
 17636 890E F0 46			jeq l_34E4
 17637
 17638 				; optimize OK (service.pas), line = 3157
 17639
 17640 8910 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 17641 8912 A9 00			lda #$00
 17642 8914 91 84			sta (:bp2),y
 17643 8916 C8				iny
 17644 8917 91 84			sta (:bp2),y
 17645
 17646 				; optimize OK (service.pas), line = 3160
 17647
 17648 8919 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17649 891B B1 84			lda (:bp2),y
 17650 891D C8				iny
 17651 891E C9 D0			cmp #$D0
 17652 8920 B1 84			lda (:bp2),y
 17653 8922 E9 07			sbc #$07
 17654 8924 50 02			svc
 17655 8926 49 80			eor #$80
 17656 8928 10 2C			jpl l_34FA
 17657
 17658 				; optimize OK (service.pas), line = 3162
 17659
 17660 892A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17661 892C B1 84			lda (:bp2),y
 17662 892E 18 69 0A			add #$0A
 17663 8931 91 84			sta (:bp2),y
 17664 8933 C8				iny
 17665 8934 B1 84			lda (:bp2),y
 17666 8936 69 00			adc #$00
 17667 8938 91 84			sta (:bp2),y
 17668
 17669 				; optimize OK (service.pas), line = 3163
 17670
 17671 893A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17672 893C B1 84			lda (:bp2),y
 17673 893E 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 17674 8941 C8				iny
 17675 8942 B1 84			lda (:bp2),y
 17676 8944 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 17677 8947 AD 00 9F			lda BALL
 17678 894A 8D 28 9D			sta SET_BALL_SPEED.BALL
 17679 894D AD 01 9F			lda BALL+1
 17680 8950 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 17681 8953 20 40 37			jsr SET_BALL_SPEED
 17682 8956			l_34FA
 17683 8956			l_34E4
 17684
 17685 				; optimize OK (service.pas), line = 3167
 17686
 17687 8956 AC 00 9F 84 84 AC + 	mwy BALL :bp2
 17688 8960 A0 14			ldy #BALL.SBD-DATAORIGIN
 17689 8962 B1 84			lda (:bp2),y
 17690 8964 18 69 01			add #$01
 17691 8967 91 84			sta (:bp2),y
 17692 8969 C8				iny
 17693 896A B1 84			lda (:bp2),y
 17694 896C 69 00			adc #$00
 17695 896E 91 84			sta (:bp2),y
 17696
 17697 				; optimize OK (service.pas), line = 3171
 17698
 17699 8970 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 17700 8972 B1 84			lda (:bp2),y
 17701 8974 C9 02			cmp #$02
 17702 8976 D0 05			bne @+
 17703 8978 88				dey
 17704 8979 B1 84			lda (:bp2),y
 17705 897B C9 58			cmp #$58
 17706 				@
 17707 897D 90 15			jcc l_3522
 17708 				@
 17709 897F A0 00			ldy #$00
 17710 8981 B1 84			lda (:bp2),y
 17711 8983 10 0F			jpl l_3522
 17712 				@
 17713
 17714 				; optimize OK (service.pas), line = 3172
 17715
 17716 8985 AD 00 9F			lda BALL
 17717 8988 8D 97 9E			sta DEVIATE_BALL.BALL
 17718 898B AD 01 9F			lda BALL+1
 17719 898E 8D 98 9E			sta DEVIATE_BALL.BALL+1
 17720 8991 20 45 87			jsr DEVIATE_BALL
 17721 8994			l_3522
 17722 8994			l_34CE
 17723
 17724 				; ------------------------------------------------------------
 17725
 17726 = 9F00			BALL	= DATAORIGIN+$0774
 17727 = 978C			BALL.X	= DATAORIGIN+$0000
 17728 = 978E			BALL.Y	= DATAORIGIN+$0002
 17729 = 9790			BALL.FINEX	= DATAORIGIN+$0004
 17730 = 9792			BALL.FINEY	= DATAORIGIN+$0006
 17731 = 9794			BALL.OLDX	= DATAORIGIN+$0008
 17732 = 9796			BALL.OLDY	= DATAORIGIN+$000A
 17733 = 9798			BALL.SPEED	= DATAORIGIN+$000C
 17734 = 979A			BALL.FINESPEED	= DATAORIGIN+$000E
 17735 = 979C			BALL.SPEEDX	= DATAORIGIN+$0010
 17736 = 979E			BALL.SPEEDY	= DATAORIGIN+$0012
 17737 = 97A0			BALL.SBD	= DATAORIGIN+$0014
 17738 = 97A2			BALL.BRWHIT	= DATAORIGIN+$0016
 17739 = 97A3			BALL.INPLAY	= DATAORIGIN+$0017
 17740 = 97A4			BALL.LAUNCH	= DATAORIGIN+$0018
 17741 = 97A5			BALL.ONVAUS	= DATAORIGIN+$0019
 17742 = 97A6			BALL.STM	= DATAORIGIN+$001A
 17743
 17744 = 9F00			@VarData	= BALL
 17745 = 0002			@VarDataSize	= 2
 17746
 17747 8994			@exit
 17748 					.ifdef @new
 17749 					lda <@VarData
 17750 					sta :ztmp
 17751 					lda >@VarData
 17752 					ldy #@VarDataSize-1
 17753 					jmp @FreeMem
 17754 					els
 17755 8994 60				rts						; ret
 17756 					eif
 17757 				.endl
 17758 8995			l_3481
 17759
 17760 				; optimize OK (service.pas), line = 3180
 17761
 17762 8995 A9 00			lda #$00
 17763 8997 8D 82 99			sta SCRFLUXCNT
 17764
 17765 				; optimize OK (service.pas), line = 3181
 17766
 17767 899A 8D 81 99			sta SCRFLUX
 17768
 17769 				; optimize OK (service.pas), line = 3183
 17770
 17771 899D A9 01			lda #$01
 17772 899F 8D 80 99			sta BALLS_IN_PLAY
 17773
 17774 				; optimize OK (service.pas), line = 3185
 17775
 17776 89A2 A9 00			lda #$00
 17777 89A4 8D 7E 99			sta FIRE.AVL
 17778
 17779 				; optimize OK (service.pas), line = 3186
 17780
 17781 89A7 AD 9D 98 8D 95 98 + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17782
 17783 				; optimize OK (service.pas), line = 3188
 17784
 17785 89D7 A9 FF			lda #$FF
 17786 89D9 8D 79 99			sta LETT.LAST
 17787 89DC 8D 7A 99			sta LETT.LAST+1
 17788
 17789 				; optimize OK (service.pas), line = 3189
 17790
 17791 89DF A9 00			lda #$00
 17792 89E1 8D 70 99			sta LETT.ACTIVE
 17793
 17794 				; optimize OK (service.pas), line = 3192
 17795
 17796 89E4 AD 51 97			lda PATTERN
 17797 89E7 8D 08 9E			sta FILL_PICTURE_WITH_PATTERN.PATT
 17798 89EA AD 52 97			lda PATTERN+1
 17799 89ED 8D 09 9E			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 17800 89F0 20 FF 6D			jsr FILL_PICTURE_WITH_PATTERN
 17801
 17802 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3195
 17803
 17804 89F3 E8				inx
 17805 89F4 AD 31 97 95 96		mva PLAYSCREEN :STACKORIGIN,x
 17806 89F9 AD 32 97 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 17807 89FE 20 B9 34			jsr SHOWBTMPICTURE
 17808
 17809 				; optimize OK (service.pas), line = 3199
 17810
 17811 8A01 AC 61 99			ldy CUR_PLAYER
 17812 8A04 B9 55 99			lda adr.SCORE.LIVES,y
 17813 8A07 8D 5C 9E			sta PLOT_LIVES.LIVES
 17814 8A0A A9 00			lda #$00
 17815 8A0C 8D 5D 9E			sta PLOT_LIVES.LIVES+1
 17816 8A0F 20 B5 7B			jsr PLOT_LIVES
 17817
 17818 				; optimize OK (service.pas), line = 3202
 17819
 17820 8A12 AD 31 97			lda PLAYSCREEN
 17821 8A15 8D 13 9D			sta SETPALETTE.BTM
 17822 8A18 AD 32 97			lda PLAYSCREEN+1
 17823 8A1B 8D 14 9D			sta SETPALETTE.BTM+1
 17824 8A1E 20 0E 35			jsr SETPALETTE
 17825
 17826 				; optimize OK (service.pas), line = 3205
 17827
 17828 8A21 AD 4A 99			lda adr.SCORE.PLAYER+$04
 17829 8A24 8D 53 9E			sta WRITE_SCORE.SC
 17830 8A27 AD 4B 99			lda adr.SCORE.PLAYER+1+$04
 17831 8A2A 8D 54 9E			sta WRITE_SCORE.SC+1
 17832 8A2D AD 4C 99			lda adr.SCORE.PLAYER+2+$04
 17833 8A30 8D 55 9E			sta WRITE_SCORE.SC+2
 17834 8A33 AD 4D 99			lda adr.SCORE.PLAYER+3+$04
 17835 8A36 8D 56 9E			sta WRITE_SCORE.SC+3
 17836 8A39 A9 FD			lda #$FD
 17837 8A3B 8D 4F 9E			sta WRITE_SCORE.PX
 17838 8A3E A9 00			lda #$00
 17839 8A40 8D 50 9E			sta WRITE_SCORE.PX+1
 17840 8A43 A9 3C			lda #$3C
 17841 8A45 8D 51 9E			sta WRITE_SCORE.PY
 17842 8A48 A9 00			lda #$00
 17843 8A4A 8D 52 9E			sta WRITE_SCORE.PY+1
 17844 8A4D 20 57 78			jsr WRITE_SCORE
 17845
 17846 				; optimize OK (service.pas), line = 3206
 17847
 17848 8A50 AD 4E 99			lda adr.SCORE.PLAYER+$08
 17849 8A53 8D 53 9E			sta WRITE_SCORE.SC
 17850 8A56 AD 4F 99			lda adr.SCORE.PLAYER+1+$08
 17851 8A59 8D 54 9E			sta WRITE_SCORE.SC+1
 17852 8A5C AD 50 99			lda adr.SCORE.PLAYER+2+$08
 17853 8A5F 8D 55 9E			sta WRITE_SCORE.SC+2
 17854 8A62 AD 51 99			lda adr.SCORE.PLAYER+3+$08
 17855 8A65 8D 56 9E			sta WRITE_SCORE.SC+3
 17856 8A68 A9 FD			lda #$FD
 17857 8A6A 8D 4F 9E			sta WRITE_SCORE.PX
 17858 8A6D A9 00			lda #$00
 17859 8A6F 8D 50 9E			sta WRITE_SCORE.PX+1
 17860 8A72 A9 5D			lda #$5D
 17861 8A74 8D 51 9E			sta WRITE_SCORE.PY
 17862 8A77 A9 00			lda #$00
 17863 8A79 8D 52 9E			sta WRITE_SCORE.PY+1
 17864 8A7C 20 57 78			jsr WRITE_SCORE
 17865
 17866 				; optimize OK (service.pas), line = 3207
 17867
 17868 8A7F A9 FD			lda #$FD
 17869 8A81 8D 4F 9E			sta WRITE_SCORE.PX
 17870 8A84 A9 00			lda #$00
 17871 8A86 8D 50 9E			sta WRITE_SCORE.PX+1
 17872 8A89 A9 80			lda #$80
 17873 8A8B 8D 51 9E			sta WRITE_SCORE.PY
 17874 8A8E A9 00			lda #$00
 17875 8A90 8D 52 9E			sta WRITE_SCORE.PY+1
 17876 8A93 AD 58 99			lda SCORE.HISCORE
 17877 8A96 8D 53 9E			sta WRITE_SCORE.SC
 17878 8A99 AD 59 99			lda SCORE.HISCORE+1
 17879 8A9C 8D 54 9E			sta WRITE_SCORE.SC+1
 17880 8A9F AD 5A 99			lda SCORE.HISCORE+2
 17881 8AA2 8D 55 9E			sta WRITE_SCORE.SC+2
 17882 8AA5 AD 5B 99			lda SCORE.HISCORE+3
 17883 8AA8 8D 56 9E			sta WRITE_SCORE.SC+3
 17884 8AAB 20 57 78			jsr WRITE_SCORE
 17885
 17886 				; optimize FAIL ('PUT_WALL', service.pas), line = 3210
 17887
 17888 8AAE 20 D3 51			jsr PUT_WALL
 17889
 17890 				; optimize OK (service.pas), line = 3215
 17891
 17892 8AB1 A9 00			lda #$00
 17893 8AB3 8D 9E 9E			sta X
 17894 8AB6 8D 9F 9E			sta X+1
 17895
 17896 				; optimize OK (service.pas), line = 3218
 17897
 17898 8AB9 A9 01			lda #$01
 17899 8ABB 8D C2 9E			sta BALL0.INPLAY
 17900
 17901 				; optimize OK (service.pas), line = 3219
 17902
 17903 8ABE 8D C3 9E			sta BALL0.LAUNCH
 17904
 17905 				; optimize OK (service.pas), line = 3222
 17906
 17907 8AC1 A9 6F			lda #$6F
 17908 8AC3 8D AB 9E			sta BALL0.X
 17909 8AC6 A9 00			lda #$00
 17910 8AC8 8D AC 9E			sta BALL0.X+1
 17911
 17912 				; optimize OK (service.pas), line = 3223
 17913
 17914 8ACB A9 B5			lda #$B5
 17915 8ACD 8D AD 9E			sta BALL0.Y
 17916 8AD0 A9 00			lda #$00
 17917 8AD2 8D AE 9E			sta BALL0.Y+1
 17918
 17919 				; optimize OK (service.pas), line = 3226
 17920
 17921 8AD5 A9 FF			lda #$FF
 17922 8AD7 8D B3 9E			sta BALL0.OLDX
 17923 8ADA 8D B4 9E			sta BALL0.OLDX+1
 17924
 17925 				; optimize OK (service.pas), line = 3227
 17926
 17927 8ADD 8D B5 9E			sta BALL0.OLDY
 17928 8AE0 8D B6 9E			sta BALL0.OLDY+1
 17929
 17930 				; optimize OK (service.pas), line = 3230
 17931
 17932 8AE3 A9 00			lda #$00
 17933 8AE5 8D BF 9E			sta BALL0.SBD
 17934 8AE8 8D C0 9E			sta BALL0.SBD+1
 17935
 17936 				; optimize OK (service.pas), line = 3234
 17937
 17938 8AEB A9 10			lda #$10
 17939 8AED 8D C4 9E			sta BALL0.ONVAUS
 17940
 17941 				; optimize OK (service.pas), line = 3239
 17942
 17943 8AF0 A9 00			lda #$00
 17944 8AF2 8D C5 9E			sta BALL0.STM
 17945
 17946 				; optimize OK (service.pas), line = 3243
 17947
 17948 8AF5 A9 E8			lda #$E8
 17949 8AF7 8D D2 97			sta SYSTEM.RANDOM.@010184000.RANGE
 17950 8AFA A9 03			lda #$03
 17951 8AFC 8D D3 97			sta SYSTEM.RANDOM.@010184000.RANGE+1
 17952 8AFF 20 38 26			jsr SYSTEM.RANDOM.@010184000
 17953 8B02 AD D4 97			lda SYSTEM.RANDOM.@010184000.RESULT
 17954 8B05 8D 71 99			sta LETT.INCOMING
 17955 8B08 AD D5 97			lda SYSTEM.RANDOM.@010184000.RESULT+1
 17956 8B0B 8D 72 99			sta LETT.INCOMING+1
 17957
 17958 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3246
 17959
 17960 8B0E 20 F0 72			jsr CREATE_VAUS
 17961
 17962 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3249
 17963
 17964 8B11 20 CE 6F			jsr WRITE_ROUND_LEVEL
 17965
 17966 				; optimize FAIL ('SET_VAUS', service.pas), line = 3251
 17967
 17968 8B14 20 21 45			jsr SET_VAUS
 17969
 17970 				; optimize FAIL ('START_VAUS', service.pas), line = 3252
 17971
 17972 8B17 20 5E 45			jsr START_VAUS
 17973
 17974 				; optimize OK (service.pas), line = 3253
 17975
 17976 8B1A AD 05 99			lda VAUS.X
 17977 8B1D 8D 7A 9D			sta MOVE_VAUS.X
 17978 8B20 A9 00			lda #$00
 17979 8B22 8D 7B 9D			sta MOVE_VAUS.X+1
 17980 8B25 A9 B8			lda #$B8
 17981 8B27 8D 7C 9D			sta MOVE_VAUS.Y
 17982 8B2A A9 00			lda #$00
 17983 8B2C 8D 7D 9D			sta MOVE_VAUS.Y+1
 17984 8B2F 20 6B 47			jsr MOVE_VAUS
 17985
 17986 				; optimize FAIL ('START_LEVEL', service.pas), line = 3254
 17987
 17988 8B32 20 5B 2B			jsr START_LEVEL
 17989
 17990 				; optimize FAIL ('START_VAUS', service.pas), line = 3255
 17991
 17992 8B35 20 5E 45			jsr START_VAUS
 17993
 17994 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3256
 17995
 17996 8B38 20 CF 6F			jsr REMOVE_ROUND_LEVEL
 17997
 17998 				; optimize OK (service.pas), line = 3257
 17999
 18000 8B3B AD 2B 90			lda BALL0
 18001 8B3E 8D 22 9D			sta SET_BALL.BALL
 18002 8B41 AD 2C 90			lda BALL0+1
 18003 8B44 8D 23 9D			sta SET_BALL.BALL+1
 18004 8B47 20 67 36			jsr SET_BALL
 18005
 18006 				; optimize OK (service.pas), line = 3264
 18007
 18008 8B4A AD 0A D2			lda RND
 18009 8B4D 29 0F			and #$0F
 18010 8B4F 18 69 3C			add #$3C
 18011 8B52 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 18012 8B55 A9 00			lda #$00
 18013 8B57 69 00			adc #$00
 18014 8B59 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 18015 8B5C AD 2B 90			lda BALL0
 18016 8B5F 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 18017 8B62 AD 2C 90			lda BALL0+1
 18018 8B65 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 18019 8B68 20 60 39			jsr SET_BALL_DIRECTION
 18020
 18021 				; optimize OK (service.pas), line = 3266
 18022
 18023 8B6B AD 2B 90			lda BALL0
 18024 8B6E 8D 28 9D			sta SET_BALL_SPEED.BALL
 18025 8B71 AD 2C 90			lda BALL0+1
 18026 8B74 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 18027 8B77 A9 F4			lda #$F4
 18028 8B79 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 18029 8B7C A9 01			lda #$01
 18030 8B7E 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 18031 8B81 20 40 37			jsr SET_BALL_SPEED
 18032
 18033 				; optimize OK (service.pas), line = 3269
 18034
 18035 8B84 A9 00			lda #$00
 18036 8B86 8D B9 9E			sta BALL0.FINESPEED
 18037 8B89 8D BA 9E			sta BALL0.FINESPEED+1
 18038
 18039 				; optimize OK (service.pas), line = 3271
 18040
 18041 8B8C 8D DD 9E			sta BALL1.INPLAY
 18042
 18043 				; optimize OK (service.pas), line = 3272
 18044
 18045 8B8F 8D F8 9E			sta BALL2.INPLAY
 18046
 18047 				; --- WhileProlog
 18048 8B92 4C 09 90			jmp l_35C0
 18049 8B95			l_35C1
 18050
 18051 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3276
 18052
 18053 8B95 20 63 36			jsr WAIT_VBL
 18054
 18055 				; optimize OK (service.pas), line = 3285
 18056
 18057 8B98 A9 9E			lda <X
 18058 8B9A 8D 8A 9C			sta MOUSECOORDS.X
 18059 8B9D A9 9E			lda >X
 18060 8B9F 8D 8B 9C			sta MOUSECOORDS.X+1
 18061 8BA2 A9 A0			lda <Y
 18062 8BA4 8D 8C 9C			sta MOUSECOORDS.Y
 18063 8BA7 A9 9E			lda >Y
 18064 8BA9 8D 8D 9C			sta MOUSECOORDS.Y+1
 18065 8BAC 20 5E 2B			jsr MOUSECOORDS
 18066
 18067 				; optimize OK (service.pas), line = 3290
 18068
 18069 8BAF AD 69 99			lda TRAINER
 18070 8BB2 D0 19			jne l_35D7
 18071 8BB4 AD 9E 9E			lda X
 18072 8BB7 8D 7A 9D			sta MOVE_VAUS.X
 18073 8BBA AD 9F 9E			lda X+1
 18074 8BBD 8D 7B 9D			sta MOVE_VAUS.X+1
 18075 8BC0 A9 B8			lda #$B8
 18076 8BC2 8D 7C 9D			sta MOVE_VAUS.Y
 18077 8BC5 A9 00			lda #$00
 18078 8BC7 8D 7D 9D			sta MOVE_VAUS.Y+1
 18079 8BCA 4C 36 8C			jmp l_35E5
 18080 8BCD			l_35D7
 18081
 18082 				; optimize OK (service.pas), line = 3296
 18083
 18084 8BCD AD 69 99			lda TRAINER
 18085 8BD0 C9 01			cmp #$01
 18086 8BD2 D0 65			jne l_35F7
 18087
 18088 				; optimize FAIL (1, service.pas), line = 3297
 18089
 18090 8BD4 E8				inx
 18091 8BD5 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 18092 8BD9 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18093 8BDD E8				inx
 18094 8BDE A9 0A 95 96			mva #$0A :STACKORIGIN,x
 18095 8BE2 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18096 8BE6 AD AB 9E			lda BALL0.X
 18097 8BE9 38 ED C4 9E			sub BALL0.ONVAUS
 18098 8BED 8D CF 9C			sta MAX.A
 18099 8BF0 AD AC 9E			lda BALL0.X+1
 18100 8BF3 E9 00			sbc #$00
 18101 8BF5 8D D0 9C			sta MAX.A+1
 18102 8BF8 B5 96			lda :STACKORIGIN,x
 18103 8BFA 8D D1 9C			sta MAX.B
 18104 8BFD B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18105 8BFF 8D D2 9C			sta MAX.B+1
 18106 8C02 CA				dex
 18107 8C03 20 45 2E			jsr MAX
 18108 8C06 A9 B8			lda #$B8
 18109 8C08 8D D5 9C			sta MIN.A
 18110 8C0B A9 00			lda #$00
 18111 8C0D 8D D6 9C			sta MIN.A+1
 18112 8C10 AD D3 9C			lda MAX.RESULT
 18113 8C13 8D D7 9C			sta MIN.B
 18114 8C16 AD D4 9C			lda MAX.RESULT+1
 18115 8C19 8D D8 9C			sta MIN.B+1
 18116 8C1C 20 70 2E			jsr MIN
 18117 8C1F AD D9 9C			lda MIN.RESULT
 18118 8C22 8D 7A 9D			sta MOVE_VAUS.X
 18119 8C25 AD DA 9C			lda MIN.RESULT+1
 18120 8C28 8D 7B 9D			sta MOVE_VAUS.X+1
 18121 8C2B B5 96			lda :STACKORIGIN,x
 18122 8C2D 8D 7C 9D			sta MOVE_VAUS.Y
 18123 8C30 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18124 8C32 8D 7D 9D			sta MOVE_VAUS.Y+1
 18125 8C35 CA				dex
 18126 8C36			l_35E5
 18127 8C36 20 6B 47			jsr MOVE_VAUS
 18128 8C39			l_35F7
 18129
 18130 				; optimize OK (service.pas), line = 3302
 18131
 18132 8C39 AD C3 9E			lda BALL0.LAUNCH
 18133 8C3C C9 01			cmp #$01
 18134 8C3E D0 30			jne l_361A
 18135
 18136 				; optimize FAIL (0, service.pas), line = 3304
 18137
 18138 8C40 EE C5 9E			inc BALL0.STM
 18139
 18140 				; optimize OK (service.pas), line = 3309
 18141
 18142 8C43 AD C5 9E			lda BALL0.STM
 18143 8C46 C9 FA			cmp #$FA
 18144 8C48 D0 05			jne l_3631
 18145 8C4A A9 00			lda #$00
 18146 8C4C 8D C3 9E			sta BALL0.LAUNCH
 18147 8C4F			l_3631
 18148
 18149 				; optimize OK (service.pas), line = 3312
 18150
 18151 8C4F AD 2B 90			lda BALL0
 18152 8C52 8D 48 9D			sta START_BALL.BALL
 18153 8C55 AD 2C 90			lda BALL0+1
 18154 8C58 8D 49 9D			sta START_BALL.BALL+1
 18155 8C5B 20 82 3D			jsr START_BALL
 18156
 18157 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3315
 18158
 18159 8C5E 20 DF 2B			jsr MOUSECLICK
 18160 8C61 AD 90 9C			lda MOUSECLICK.RESULT
 18161 8C64 C9 01			cmp #$01
 18162 8C66 D0 05			jne l_364B
 18163 8C68 A9 00			lda #$00
 18164 8C6A 8D C3 9E			sta BALL0.LAUNCH
 18165 8C6D			l_364B
 18166 8C6D 4C AC 8C			jmp l_365B
 18167 8C70			l_361A
 18168
 18169 				; optimize OK (service.pas), line = 3323
 18170
 18171 8C70 AD C2 9E			lda BALL0.INPLAY
 18172 8C73 F0 0F			jeq l_3667
 18173 8C75 AD 2B 90			lda BALL0
 18174 8C78 8D 6D 9D			sta MOVE_BALL.BALL
 18175 8C7B AD 2C 90			lda BALL0+1
 18176 8C7E 8D 6E 9D			sta MOVE_BALL.BALL+1
 18177 8C81 20 ED 3E			jsr MOVE_BALL
 18178 8C84			l_3667
 18179
 18180 				; optimize OK (service.pas), line = 3324
 18181
 18182 8C84 AD DD 9E			lda BALL1.INPLAY
 18183 8C87 F0 0F			jeq l_3679
 18184 8C89 AD 2D 90			lda BALL1
 18185 8C8C 8D 6D 9D			sta MOVE_BALL.BALL
 18186 8C8F AD 2E 90			lda BALL1+1
 18187 8C92 8D 6E 9D			sta MOVE_BALL.BALL+1
 18188 8C95 20 ED 3E			jsr MOVE_BALL
 18189 8C98			l_3679
 18190
 18191 				; optimize OK (service.pas), line = 3325
 18192
 18193 8C98 AD F8 9E			lda BALL2.INPLAY
 18194 8C9B F0 0F			jeq l_368B
 18195 8C9D AD 2F 90			lda BALL2
 18196 8CA0 8D 6D 9D			sta MOVE_BALL.BALL
 18197 8CA3 AD 30 90			lda BALL2+1
 18198 8CA6 8D 6E 9D			sta MOVE_BALL.BALL+1
 18199 8CA9 20 ED 3E			jsr MOVE_BALL
 18200 8CAC			l_368B
 18201 8CAC			l_365B
 18202
 18203 				; optimize OK (service.pas), line = 3333
 18204
 18205 8CAC AD 2B 90			lda BALL0
 18206 8CAF 8D FC 9E			sta CHECK_BALL.BALL
 18207 8CB2 AD 2C 90			lda BALL0+1
 18208 8CB5 8D FD 9E			sta CHECK_BALL.BALL+1
 18209 8CB8 20 23 88			jsr CHECK_BALL
 18210
 18211 				; optimize OK (service.pas), line = 3334
 18212
 18213 8CBB AD 2D 90			lda BALL1
 18214 8CBE 8D FC 9E			sta CHECK_BALL.BALL
 18215 8CC1 AD 2E 90			lda BALL1+1
 18216 8CC4 8D FD 9E			sta CHECK_BALL.BALL+1
 18217 8CC7 20 23 88			jsr CHECK_BALL
 18218
 18219 				; optimize OK (service.pas), line = 3335
 18220
 18221 8CCA AD 2F 90			lda BALL2
 18222 8CCD 8D FC 9E			sta CHECK_BALL.BALL
 18223 8CD0 AD 30 90			lda BALL2+1
 18224 8CD3 8D FD 9E			sta CHECK_BALL.BALL+1
 18225 8CD6 20 23 88			jsr CHECK_BALL
 18226
 18227 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3350
 18228
 18229 8CD9 20 34 31			jsr CHECKSHINE
 18230
 18231 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3351
 18232
 18233 8CDC 20 82 33			jsr CHECK_LETTER
 18234
 18235 				; optimize OK (service.pas), line = 3352
 18236
 18237 8CDF AD 2B 90			lda BALL0
 18238 8CE2 8D 88 9E			sta CHECK_BONUS_TYPE.B1
 18239 8CE5 AD 2C 90			lda BALL0+1
 18240 8CE8 8D 89 9E			sta CHECK_BONUS_TYPE.B1+1
 18241 8CEB AD 2D 90			lda BALL1
 18242 8CEE 8D 8C 9E			sta CHECK_BONUS_TYPE.B2
 18243 8CF1 AD 2E 90			lda BALL1+1
 18244 8CF4 8D 8D 9E			sta CHECK_BONUS_TYPE.B2+1
 18245 8CF7 AD 2F 90			lda BALL2
 18246 8CFA 8D 90 9E			sta CHECK_BONUS_TYPE.B3
 18247 8CFD AD 30 90			lda BALL2+1
 18248 8D00 8D 91 9E			sta CHECK_BONUS_TYPE.B3+1
 18249 8D03 20 09 84			jsr CHECK_BONUS_TYPE
 18250
 18251 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3353
 18252
 18253 8D06 20 B3 7F			jsr CHECK_FIRE
 18254
 18255 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3354
 18256
 18257 8D09 20 2B 82			jsr CHECK_FLUX
 18258
 18259 				; optimize OK (service.pas), line = 3356
 18260
 18261 8D0C AD 05 99			lda VAUS.X
 18262 8D0F 18 6D 0D 99			add VAUS.WIDTH
 18263 8D13 85 9F			sta :STACKORIGIN+9
 18264 8D15 A9 00			lda #$00
 18265 8D17 69 00			adc #$00
 18266 8D19 A0 01			ldy #1
 18267 8D1B C9 00			cmp #$00
 18268 8D1D D0 04			bne @+
 18269 8D1F A5 9F			lda :STACKORIGIN+9
 18270 8D21 C9 D7			cmp #$D7
 18271 				@
 18272 8D23 F0 01			beq @+
 18273 8D25 88				dey
 18274 				@
 18275 8D26 98				tya
 18276 8D27 2D 81 99			and SCRFLUX
 18277 8D2A F0 03			jeq l_36C3
 18278 8D2C 20 C8 82			jsr VAUS_OUT
 18279 8D2F			l_36C3
 18280
 18281 				; optimize OK (service.pas), line = 3358
 18282
 18283 8D2F AD 11 99			lda VAUS.LETTER
 18284 8D32 C9 04			cmp #$04
 18285 8D34 F0 03 4C 79 8E		jne l_36D9
 18286
 18287 				; optimize OK (service.pas), line = 3360
 18288
 18289 8D39 A9 03			lda #$03
 18290 8D3B 8D 80 99			sta BALLS_IN_PLAY
 18291
 18292 				; optimize OK (service.pas), line = 3362
 18293
 18294 8D3E AC 2D 90 84 84 AC + 	mwy BALL1 :bp2
 18295 8D48 A0 1A			ldy #$1A
 18296 8D4A B9 AB 9E 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18297
 18298 				; optimize OK (service.pas), line = 3363
 18299
 18300 8D52 AC 2F 90 84 84 AC + 	mwy BALL2 :bp2
 18301 8D5C A0 1A			ldy #$1A
 18302 8D5E B9 AB 9E 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18303
 18304 				; optimize OK (service.pas), line = 3365
 18305
 18306 8D66 AD 2B 90			lda BALL0
 18307 8D69 8D 40 9D			sta GET_BALL_DIRECTION.BALL
 18308 8D6C AD 2C 90			lda BALL0+1
 18309 8D6F 8D 41 9D			sta GET_BALL_DIRECTION.BALL+1
 18310 8D72 20 64 3B			jsr GET_BALL_DIRECTION
 18311 8D75 E8				inx
 18312 8D76 E8				inx
 18313 8D77 A9 5A			lda #$5A
 18314 8D79 85 8E			sta @SMALLINT.DIV.B
 18315 8D7B A9 00			lda #$00
 18316 8D7D 85 8F			sta @SMALLINT.DIV.B+1
 18317 8D7F AD 44 9D			lda GET_BALL_DIRECTION.RESULT
 18318 8D82 85 86			sta @SMALLINT.DIV.A
 18319 8D84 AD 45 9D			lda GET_BALL_DIRECTION.RESULT+1
 18320 8D87 85 87			sta @SMALLINT.DIV.A+1
 18321 8D89 20 80 12			jsr @SMALLINT.DIV
 18322 8D8C CA				dex
 18323 8D8D A5 86			lda :eax
 18324 8D8F 8D A4 9E			sta T1
 18325 8D92 A5 87			lda :eax+1
 18326 8D94 8D A5 9E			sta T1+1
 18327 8D97 CA				dex
 18328
 18329 				; optimize OK (service.pas), line = 3367
 18330
 18331 8D98 AD B7 9E			lda BALL0.SPEED
 18332 8D9B 8D A6 9E			sta T2
 18333 8D9E AD B8 9E			lda BALL0.SPEED+1
 18334 8DA1 8D A7 9E			sta T2+1
 18335
 18336 				; optimize OK (service.pas), line = 3374
 18337
 18338 8DA4 A9 5A			lda #$5A
 18339 8DA6 85 8E			sta :ecx
 18340 8DA8 A9 00			lda #$00
 18341 8DAA 85 8F			sta :ecx+1
 18342 8DAC AD A4 9E			lda T1
 18343 8DAF 85 86			sta :eax
 18344 8DB1 AD A5 9E			lda T1+1
 18345 8DB4 85 87			sta :eax+1
 18346 					.ifdef fmulinit
 18347 					fmulu_16
 18348 					els
 18349 8DB6 20 58 13			imulCX
 18350 					eif
 18351 8DB9 A5 86			lda :eax
 18352 8DBB 8D A8 9E			sta HLP
 18353 8DBE A5 87			lda :eax+1
 18354 8DC0 8D A9 9E			sta HLP+1
 18355
 18356 				; optimize OK (service.pas), line = 3376
 18357
 18358 8DC3 AD A8 9E			lda HLP
 18359 8DC6 18 69 1E			add #$1E
 18360 8DC9 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 18361 8DCC AD A9 9E			lda HLP+1
 18362 8DCF 69 00			adc #$00
 18363 8DD1 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 18364 8DD4 AD 2B 90			lda BALL0
 18365 8DD7 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 18366 8DDA AD 2C 90			lda BALL0+1
 18367 8DDD 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 18368 8DE0 20 60 39			jsr SET_BALL_DIRECTION
 18369
 18370 				; optimize OK (service.pas), line = 3377
 18371
 18372 8DE3 AD A8 9E			lda HLP
 18373 8DE6 18 69 2D			add #$2D
 18374 8DE9 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 18375 8DEC AD A9 9E			lda HLP+1
 18376 8DEF 69 00			adc #$00
 18377 8DF1 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 18378 8DF4 AD 2D 90			lda BALL1
 18379 8DF7 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 18380 8DFA AD 2E 90			lda BALL1+1
 18381 8DFD 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 18382 8E00 20 60 39			jsr SET_BALL_DIRECTION
 18383
 18384 				; optimize OK (service.pas), line = 3378
 18385
 18386 8E03 AD A8 9E			lda HLP
 18387 8E06 18 69 3C			add #$3C
 18388 8E09 8D 3A 9D			sta SET_BALL_DIRECTION.ANGLE
 18389 8E0C AD A9 9E			lda HLP+1
 18390 8E0F 69 00			adc #$00
 18391 8E11 8D 3B 9D			sta SET_BALL_DIRECTION.ANGLE+1
 18392 8E14 AD 2F 90			lda BALL2
 18393 8E17 8D 36 9D			sta SET_BALL_DIRECTION.BALL
 18394 8E1A AD 30 90			lda BALL2+1
 18395 8E1D 8D 37 9D			sta SET_BALL_DIRECTION.BALL+1
 18396 8E20 20 60 39			jsr SET_BALL_DIRECTION
 18397
 18398 				; optimize OK (service.pas), line = 3382
 18399
 18400 8E23 AD 2B 90			lda BALL0
 18401 8E26 8D 28 9D			sta SET_BALL_SPEED.BALL
 18402 8E29 AD 2C 90			lda BALL0+1
 18403 8E2C 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 18404 8E2F AD A6 9E			lda T2
 18405 8E32 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 18406 8E35 AD A7 9E			lda T2+1
 18407 8E38 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 18408 8E3B 20 40 37			jsr SET_BALL_SPEED
 18409
 18410 				; optimize OK (service.pas), line = 3383
 18411
 18412 8E3E AD 2D 90			lda BALL1
 18413 8E41 8D 28 9D			sta SET_BALL_SPEED.BALL
 18414 8E44 AD 2E 90			lda BALL1+1
 18415 8E47 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 18416 8E4A AD A6 9E			lda T2
 18417 8E4D 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 18418 8E50 AD A7 9E			lda T2+1
 18419 8E53 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 18420 8E56 20 40 37			jsr SET_BALL_SPEED
 18421
 18422 				; optimize OK (service.pas), line = 3384
 18423
 18424 8E59 AD 2F 90			lda BALL2
 18425 8E5C 8D 28 9D			sta SET_BALL_SPEED.BALL
 18426 8E5F AD 30 90			lda BALL2+1
 18427 8E62 8D 29 9D			sta SET_BALL_SPEED.BALL+1
 18428 8E65 AD A6 9E			lda T2
 18429 8E68 8D 2C 9D			sta SET_BALL_SPEED.SPEED
 18430 8E6B AD A7 9E			lda T2+1
 18431 8E6E 8D 2D 9D			sta SET_BALL_SPEED.SPEED+1
 18432 8E71 20 40 37			jsr SET_BALL_SPEED
 18433
 18434 				; optimize OK (service.pas), line = 3386
 18435
 18436 8E74 A9 00			lda #$00
 18437 8E76 8D 11 99			sta VAUS.LETTER
 18438 8E79			l_36D9
 18439
 18440 				; optimize OK (service.pas), line = 3390
 18441
 18442 8E79 AD 80 99			lda BALLS_IN_PLAY
 18443 8E7C C9 02			cmp #$02
 18444 8E7E 90 08			jcc l_373C
 18445 8E80 A9 00			lda #$00
 18446 8E82 8D 71 99			sta LETT.INCOMING
 18447 8E85 8D 72 99			sta LETT.INCOMING+1
 18448 8E88			l_373C
 18449
 18450 				; optimize OK (service.pas), line = 3393
 18451
 18452 8E88 AD 61 99			lda CUR_PLAYER
 18453 8E8B 0A				asl @
 18454 8E8C 0A				asl @
 18455 8E8D A8				tay
 18456 8E8E B9 46 99			lda adr.SCORE.PLAYER,y
 18457 8E91 8D 53 9E			sta WRITE_SCORE.SC
 18458 8E94 B9 47 99			lda adr.SCORE.PLAYER+1,y
 18459 8E97 8D 54 9E			sta WRITE_SCORE.SC+1
 18460 8E9A B9 48 99			lda adr.SCORE.PLAYER+2,y
 18461 8E9D 8D 55 9E			sta WRITE_SCORE.SC+2
 18462 8EA0 B9 49 99			lda adr.SCORE.PLAYER+3,y
 18463 8EA3 8D 56 9E			sta WRITE_SCORE.SC+3
 18464 8EA6 AC 61 99			ldy CUR_PLAYER
 18465 8EA9 B9 C2 10			lda adr.POS_DIGIT,y
 18466 8EAC 8D 51 9E			sta WRITE_SCORE.PY
 18467 8EAF A9 FD			lda #$FD
 18468 8EB1 8D 4F 9E			sta WRITE_SCORE.PX
 18469 8EB4 A9 00			lda #$00
 18470 8EB6 8D 50 9E			sta WRITE_SCORE.PX+1
 18471 8EB9 8D 52 9E			sta WRITE_SCORE.PY+1
 18472 8EBC 20 57 78			jsr WRITE_SCORE
 18473
 18474 				; optimize OK (service.pas), line = 3396
 18475
 18476 8EBF AD 61 99			lda CUR_PLAYER
 18477 8EC2 0A				asl @
 18478 8EC3 0A				asl @
 18479 8EC4 A8				tay
 18480 8EC5				.LOCAL
 18481 8EC5 B9 49 99			lda adr.SCORE.PLAYER+3,y
 18482 8EC8 38 ED 5B 99			sub SCORE.HISCORE+3
 18483 8ECC D0 22			bne L4
 18484 8ECE B9 48 99			lda adr.SCORE.PLAYER+2,y
 18485 8ED1 CD 5A 99			cmp SCORE.HISCORE+2
 18486 8ED4 D0 0E			bne L1
 18487 8ED6 B9 47 99			lda adr.SCORE.PLAYER+1,y
 18488 8ED9 CD 59 99			cmp SCORE.HISCORE+1
 18489 8EDC D0 06			bne L1
 18490 8EDE B9 46 99			lda adr.SCORE.PLAYER,y
 18491 8EE1 CD 58 99			cmp SCORE.HISCORE
 18492 8EE4 F0 10		L1	beq L5
 18493 8EE6 B0 04			bcs L3
 18494 8EE8 A9 FF			lda #$FF
 18495 8EEA D0 0A			bne L5
 18496 8EEC A9 01		L3	lda #$01
 18497 8EEE D0 06			bne L5
 18498 8EF0 50 04		L4	bvc L5
 18499 8EF2 49 FF			eor #$FF
 18500 8EF4 09 01			ora #$01
 18501 8EF6			L5
 18502 					.ENDL
 18503 8EF6 30 49			jmi l_3762
 18504 8EF8 F0 47			jeq l_3762
 18505
 18506 				; optimize OK (service.pas), line = 3399
 18507
 18508 8EFA B9 46 99			lda adr.SCORE.PLAYER,y
 18509 8EFD 8D 58 99			sta SCORE.HISCORE
 18510 8F00 B9 47 99			lda adr.SCORE.PLAYER+1,y
 18511 8F03 8D 59 99			sta SCORE.HISCORE+1
 18512 8F06 B9 48 99			lda adr.SCORE.PLAYER+2,y
 18513 8F09 8D 5A 99			sta SCORE.HISCORE+2
 18514 8F0C B9 49 99			lda adr.SCORE.PLAYER+3,y
 18515 8F0F 8D 5B 99			sta SCORE.HISCORE+3
 18516
 18517 				; optimize OK (service.pas), line = 3401
 18518
 18519 8F12 A9 FD			lda #$FD
 18520 8F14 8D 4F 9E			sta WRITE_SCORE.PX
 18521 8F17 A9 00			lda #$00
 18522 8F19 8D 50 9E			sta WRITE_SCORE.PX+1
 18523 8F1C A9 80			lda #$80
 18524 8F1E 8D 51 9E			sta WRITE_SCORE.PY
 18525 8F21 A9 00			lda #$00
 18526 8F23 8D 52 9E			sta WRITE_SCORE.PY+1
 18527 8F26 AD 58 99			lda SCORE.HISCORE
 18528 8F29 8D 53 9E			sta WRITE_SCORE.SC
 18529 8F2C AD 59 99			lda SCORE.HISCORE+1
 18530 8F2F 8D 54 9E			sta WRITE_SCORE.SC+1
 18531 8F32 AD 5A 99			lda SCORE.HISCORE+2
 18532 8F35 8D 55 9E			sta WRITE_SCORE.SC+2
 18533 8F38 AD 5B 99			lda SCORE.HISCORE+3
 18534 8F3B 8D 56 9E			sta WRITE_SCORE.SC+3
 18535 8F3E 20 57 78			jsr WRITE_SCORE
 18536 8F41			l_3762
 18537
 18538 				; optimize OK (service.pas), line = 3408
 18539
 18540 8F41 AD 2B 90			lda BALL0
 18541 8F44 8D 00 9F			sta TEST_BALL.BALL
 18542 8F47 AD 2C 90			lda BALL0+1
 18543 8F4A 8D 01 9F			sta TEST_BALL.BALL+1
 18544 8F4D 20 99 88			jsr TEST_BALL
 18545
 18546 				; optimize OK (service.pas), line = 3409
 18547
 18548 8F50 AD 2D 90			lda BALL1
 18549 8F53 8D 00 9F			sta TEST_BALL.BALL
 18550 8F56 AD 2E 90			lda BALL1+1
 18551 8F59 8D 01 9F			sta TEST_BALL.BALL+1
 18552 8F5C 20 99 88			jsr TEST_BALL
 18553
 18554 				; optimize OK (service.pas), line = 3410
 18555
 18556 8F5F AD 2F 90			lda BALL2
 18557 8F62 8D 00 9F			sta TEST_BALL.BALL
 18558 8F65 AD 30 90			lda BALL2+1
 18559 8F68 8D 01 9F			sta TEST_BALL.BALL+1
 18560 8F6B 20 99 88			jsr TEST_BALL
 18561
 18562 				; optimize OK (service.pas), line = 3451
 18563
 18564 8F6E AD C2 9E			lda BALL0.INPLAY
 18565 8F71 D0 2B			jne l_3788
 18566
 18567 				; optimize OK (service.pas), line = 3453
 18568
 18569 8F73 AC 2B 90 84 84 AC + 	mwy BALL0 :bp2
 18570 8F7D A0 1A			ldy #$1A
 18571 8F7F B9 C6 9E 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 18572
 18573 				; optimize OK (service.pas), line = 3454
 18574
 18575 8F87 AC 2D 90 84 84 AC + 	mwy BALL1 :bp2
 18576 8F91 A0 1A			ldy #$1A
 18577 8F93 B9 E1 9E 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 18578
 18579 				; optimize OK (service.pas), line = 3455
 18580
 18581 8F9B 8D F8 9E			sta BALL2.INPLAY
 18582 8F9E			l_3788
 18583
 18584 				; optimize OK (service.pas), line = 3458
 18585
 18586 8F9E A9 00			lda #$00
 18587 8FA0 8D 80 99			sta BALLS_IN_PLAY
 18588
 18589 				; optimize OK (service.pas), line = 3460
 18590
 18591 8FA3 AD C2 9E			lda BALL0.INPLAY
 18592 8FA6 F0 03			jeq l_37A3
 18593 8FA8 EE 80 99			inc BALLS_IN_PLAY
 18594 8FAB			l_37A3
 18595
 18596 				; optimize OK (service.pas), line = 3461
 18597
 18598 8FAB AD DD 9E			lda BALL1.INPLAY
 18599 8FAE F0 03			jeq l_37B6
 18600 8FB0 EE 80 99			inc BALLS_IN_PLAY
 18601 8FB3			l_37B6
 18602
 18603 				; optimize OK (service.pas), line = 3462
 18604
 18605 8FB3 AD F8 9E			lda BALL2.INPLAY
 18606 8FB6 F0 03			jeq l_37C9
 18607 8FB8 EE 80 99			inc BALLS_IN_PLAY
 18608 8FBB			l_37C9
 18609
 18610 				; optimize OK (service.pas), line = 3465
 18611
 18612 8FBB AD C2 9E			lda BALL0.INPLAY
 18613 8FBE D0 49			jne l_37DF
 18614
 18615 				; optimize OK (service.pas), line = 3467
 18616
 18617 8FC0 A9 01			lda #$01
 18618 8FC2 8D C3 9E			sta BALL0.LAUNCH
 18619
 18620 				; optimize OK (service.pas), line = 3468
 18621
 18622 8FC5 AD 2B 90			lda BALL0
 18623 8FC8 8D 1D 9D			sta REMOVE_BALL.BALL
 18624 8FCB AD 2C 90			lda BALL0+1
 18625 8FCE 8D 1E 9D			sta REMOVE_BALL.BALL+1
 18626 8FD1 20 B3 35			jsr REMOVE_BALL
 18627
 18628 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3469
 18629
 18630 8FD4 20 4B 70			jsr DESTROY_VAUS
 18631
 18632 				; optimize OK (service.pas), line = 3470
 18633
 18634 8FD7 AC 61 99			ldy CUR_PLAYER
 18635 8FDA B9 55 99			lda adr.SCORE.LIVES,y
 18636 8FDD 38 E9 01			sub #$01
 18637 8FE0 99 55 99			sta adr.SCORE.LIVES,y
 18638
 18639 				; optimize OK (service.pas), line = 3471
 18640
 18641 8FE3 AD 77 97			lda WALL_P
 18642 8FE6 85 8E			sta @move.dst
 18643 8FE8 AD 61 99			lda CUR_PLAYER
 18644 8FEB 18 6D 78 97			add WALL_P+1
 18645 8FEF 85 8F			sta @move.dst+1
 18646 8FF1 AD 79 97			lda WALL
 18647 8FF4 85 8A			sta @move.src
 18648 8FF6 AD 7A 97			lda WALL+1
 18649 8FF9 85 8B			sta @move.src+1
 18650 8FFB A9 00			lda <256
 18651 8FFD 85 86			sta @move.cnt
 18652 8FFF A9 01			lda >256
 18653 9001 85 87			sta @move.cnt+1
 18654 9003 20 03 12			jsr @move
 18655
 18656 				; optimize FAIL ('NOSOUND', service.pas), line = 3479
 18657
 18658 9006 20 43 2E			jsr NOSOUND
 18659 9009			l_37DF
 18660 9009			l_35C0
 18661
 18662 				; optimize OK (service.pas), line = 3274
 18663
 18664 9009 AD 44 99			lda REMAIN_BLK
 18665 900C F0 0D			jeq l_35C1w
 18666 900E AD C2 9E			lda BALL0.INPLAY
 18667 9011 F0 08			jeq l_35C1w
 18668 9013 AD 60 99			lda SCORE.ABORTPLAY
 18669 9016 D0 03 4C 95 8B		jeq l_35C1
 18670 901B			l_35C1w
 18671
 18672 				; optimize OK (service.pas), line = 3535
 18673
 18674 901B A9 00			lda #$00
 18675 901D 8D 9D 9E			sta RESULT
 18676
 18677 				; optimize OK (service.pas), line = 3536
 18678
 18679 9020 AD 44 99			lda REMAIN_BLK
 18680 9023 D0 05			jne l_382D
 18681 9025 A9 01			lda #$01
 18682 9027 8D 9D 9E			sta RESULT
 18683 902A			l_382D
 18684 902A			@exit
 18685
 18686 				; ------------------------------------------------------------
 18687
 18688 = 9E9D			RESULT	= DATAORIGIN+$0711
 18689 = 9E9E			X	= DATAORIGIN+$0712
 18690 = 9EA0			Y	= DATAORIGIN+$0714
 18691 = 9EA2			KEY	= DATAORIGIN+$0716
 18692 = 9EA4			T1	= DATAORIGIN+$0718
 18693 = 9EA6			T2	= DATAORIGIN+$071A
 18694 = 9EA8			HLP	= DATAORIGIN+$071C
 18695 = 9EAA			CN	= DATAORIGIN+$071E
 18696 = 9EAB			adr.BALL0	= DATAORIGIN+$071F	; [27] RECORD
 18697 902A			.var BALL0	= adr.BALL0 .word
 18698 = 9EAB			BALL0.X	= DATAORIGIN+$071F
 18699 = 9EAD			BALL0.Y	= DATAORIGIN+$0721
 18700 = 9EAF			BALL0.FINEX	= DATAORIGIN+$0723
 18701 = 9EB1			BALL0.FINEY	= DATAORIGIN+$0725
 18702 = 9EB3			BALL0.OLDX	= DATAORIGIN+$0727
 18703 = 9EB5			BALL0.OLDY	= DATAORIGIN+$0729
 18704 = 9EB7			BALL0.SPEED	= DATAORIGIN+$072B
 18705 = 9EB9			BALL0.FINESPEED	= DATAORIGIN+$072D
 18706 = 9EBB			BALL0.SPEEDX	= DATAORIGIN+$072F
 18707 = 9EBD			BALL0.SPEEDY	= DATAORIGIN+$0731
 18708 = 9EBF			BALL0.SBD	= DATAORIGIN+$0733
 18709 = 9EC1			BALL0.BRWHIT	= DATAORIGIN+$0735
 18710 = 9EC2			BALL0.INPLAY	= DATAORIGIN+$0736
 18711 = 9EC3			BALL0.LAUNCH	= DATAORIGIN+$0737
 18712 = 9EC4			BALL0.ONVAUS	= DATAORIGIN+$0738
 18713 = 9EC5			BALL0.STM	= DATAORIGIN+$0739
 18714 = 9EC6			adr.BALL1	= DATAORIGIN+$073A	; [27] RECORD
 18715 902A			.var BALL1	= adr.BALL1 .word
 18716 = 9EC6			BALL1.X	= DATAORIGIN+$073A
 18717 = 9EC8			BALL1.Y	= DATAORIGIN+$073C
 18718 = 9ECA			BALL1.FINEX	= DATAORIGIN+$073E
 18719 = 9ECC			BALL1.FINEY	= DATAORIGIN+$0740
 18720 = 9ECE			BALL1.OLDX	= DATAORIGIN+$0742
 18721 = 9ED0			BALL1.OLDY	= DATAORIGIN+$0744
 18722 = 9ED2			BALL1.SPEED	= DATAORIGIN+$0746
 18723 = 9ED4			BALL1.FINESPEED	= DATAORIGIN+$0748
 18724 = 9ED6			BALL1.SPEEDX	= DATAORIGIN+$074A
 18725 = 9ED8			BALL1.SPEEDY	= DATAORIGIN+$074C
 18726 = 9EDA			BALL1.SBD	= DATAORIGIN+$074E
 18727 = 9EDC			BALL1.BRWHIT	= DATAORIGIN+$0750
 18728 = 9EDD			BALL1.INPLAY	= DATAORIGIN+$0751
 18729 = 9EDE			BALL1.LAUNCH	= DATAORIGIN+$0752
 18730 = 9EDF			BALL1.ONVAUS	= DATAORIGIN+$0753
 18731 = 9EE0			BALL1.STM	= DATAORIGIN+$0754
 18732 = 9EE1			adr.BALL2	= DATAORIGIN+$0755	; [27] RECORD
 18733 902A			.var BALL2	= adr.BALL2 .word
 18734 = 9EE1			BALL2.X	= DATAORIGIN+$0755
 18735 = 9EE3			BALL2.Y	= DATAORIGIN+$0757
 18736 = 9EE5			BALL2.FINEX	= DATAORIGIN+$0759
 18737 = 9EE7			BALL2.FINEY	= DATAORIGIN+$075B
 18738 = 9EE9			BALL2.OLDX	= DATAORIGIN+$075D
 18739 = 9EEB			BALL2.OLDY	= DATAORIGIN+$075F
 18740 = 9EED			BALL2.SPEED	= DATAORIGIN+$0761
 18741 = 9EEF			BALL2.FINESPEED	= DATAORIGIN+$0763
 18742 = 9EF1			BALL2.SPEEDX	= DATAORIGIN+$0765
 18743 = 9EF3			BALL2.SPEEDY	= DATAORIGIN+$0767
 18744 = 9EF5			BALL2.SBD	= DATAORIGIN+$0769
 18745 = 9EF7			BALL2.BRWHIT	= DATAORIGIN+$076B
 18746 = 9EF8			BALL2.INPLAY	= DATAORIGIN+$076C
 18747 = 9EF9			BALL2.LAUNCH	= DATAORIGIN+$076D
 18748 = 9EFA			BALL2.ONVAUS	= DATAORIGIN+$076E
 18749 = 9EFB			BALL2.STM	= DATAORIGIN+$076F
 18750
 18751 = 9E9E			@VarData	= X
 18752 = 005E			@VarDataSize	= 94
 18753
 18754 902A 60				rts						; ret
 18755 = 902B AB 9E		BALL0
 18755 = 902D C6 9E		BALL1
 18755 = 902F E1 9E		BALL2
 18755 				.endl
 18756
 18757 9031			.local	CHOOSE_START_WALL				; FUNCTION
 18758
 18759 				; optimize OK (service.pas), line = 3559
 18760
 18761 9031 A9 01			lda #$01
 18762 9033 8D 0A 9F			sta ST
 18763 9036 A9 00			lda #$00
 18764 9038 8D 0B 9F			sta ST+1
 18765
 18766 				; optimize OK (service.pas), line = 3617
 18767
 18768 903B AD 0A 9F			lda ST
 18769 903E 8D 04 9F			sta RESULT
 18770 9041 AD 0B 9F			lda ST+1
 18771 9044 8D 05 9F			sta RESULT+1
 18772 9047			@exit
 18773
 18774 				; ------------------------------------------------------------
 18775
 18776 = 9F04			RESULT	= DATAORIGIN+$0778
 18777 = 0046			PX	= $46
 18778 = 0064			PY	= $64
 18779 = 0022			DX	= $22
 18780 = 0023			DY	= $23
 18781 = 0013			DDX	= $13
 18782 = 000E			DDY	= $0E
 18783 = 9F06			X	= DATAORIGIN+$077A
 18784 = 9F08			Y	= DATAORIGIN+$077C
 18785 = 9F0A			ST	= DATAORIGIN+$077E
 18786 = 9F0C			OLDX	= DATAORIGIN+$0780
 18787 = 9F0E			OLDY	= DATAORIGIN+$0782
 18788 = 9F10			NEWX	= DATAORIGIN+$0784
 18789 = 9F12			NEWY	= DATAORIGIN+$0786
 18790
 18791 = 9F06			@VarData	= X
 18792 = 000E			@VarDataSize	= 14
 18793
 18794 9047 60				rts						; ret
 18795 				.endl
 18796
 18797 9048			.local	SET_START_PARAMETERS				; PROCEDURE
 18798
 18799 				; optimize OK (service.pas), line = 3626
 18800
 18801 9048 A9 01			lda #$01
 18802 904A 8D 14 9F			sta X
 18803
 18804 904D			l_384E
 18805 				; --- ForToDoCondition
 18806 904D AD 14 9F			lda X
 18807 9050 C9 03			cmp #$03
 18808 9052 B0 4E			jcs l_385C
 18809
 18810 				; optimize OK (service.pas), line = 3628
 18811
 18812 9054 0A				asl @
 18813 9055 0A				asl @
 18814 9056 A8				tay
 18815 9057 A9 00			lda #$00
 18816 9059 99 46 99			sta adr.SCORE.PLAYER,y
 18817 905C 99 47 99			sta adr.SCORE.PLAYER+1,y
 18818 905F 99 48 99			sta adr.SCORE.PLAYER+2,y
 18819 9062 99 49 99			sta adr.SCORE.PLAYER+3,y
 18820
 18821 				; optimize OK (service.pas), line = 3629
 18822
 18823 9065 AC 14 9F			ldy X
 18824 9068 A9 05			lda #$05
 18825 906A 99 55 99			sta adr.SCORE.LIVES,y
 18826
 18827 				; optimize OK (service.pas), line = 3630
 18828
 18829 906D A9 01			lda #$01
 18830 906F 99 52 99			sta adr.SCORE.WALL_N,y
 18831
 18832 				; optimize OK (service.pas), line = 3631
 18833
 18834 9072 AD 77 97			lda WALL_P
 18835 9075 85 8E			sta @move.dst
 18836 9077 AD 14 9F			lda X
 18837 907A 18 6D 78 97			add WALL_P+1
 18838 907E 85 8F			sta @move.dst+1
 18839 9080 AD 7B 97			lda ALL_WALLS
 18840 9083 85 8A			sta @move.src
 18841 9085 AD 7C 97			lda ALL_WALLS+1
 18842 9088 85 8B			sta @move.src+1
 18843 908A A9 00			lda <256
 18844 908C 85 86			sta @move.cnt
 18845 908E A9 01			lda >256
 18846 9090 85 87			sta @move.cnt+1
 18847 9092 20 03 12			jsr @move
 18848
 18849 				; optimize OK (service.pas), line = 3633
 18850
 18851 9095 AC 14 9F			ldy X
 18852 9098 A9 00			lda #$00
 18853 909A 99 5D 99			sta adr.SCORE.ROUNDSEL,y
 18854
 18855 				; --- ForToDoEpilog
 18856 909D EE 14 9F			inc X
 18857 90A0 D0 AB			jne l_384E
 18858 90A2			l_385C
 18859
 18860 				; optimize OK (service.pas), line = 3636
 18861
 18862 90A2 A9 01			lda #$01
 18863 90A4 8D 61 99			sta CUR_PLAYER
 18864
 18865 				; ------------------------------------------------------------
 18866
 18867 = 9F14			X	= DATAORIGIN+$0788
 18868
 18869 = 9F14			@VarData	= X
 18870 = 0001			@VarDataSize	= 1
 18871
 18872 90A7			@exit
 18873 					.ifdef @new
 18874 					lda <@VarData
 18875 					sta :ztmp
 18876 					lda >@VarData
 18877 					ldy #@VarDataSize-1
 18878 					jmp @FreeMem
 18879 					els
 18880 90A7 60				rts						; ret
 18881 					eif
 18882 				.endl
 18883
 18884 90A8			.local	MAINSCREEN					; FUNCTION
 18885
 18886 				; optimize FAIL ('NOSOUND', service.pas), line = 3696
 18887
 18888 90A8 20 43 2E			jsr NOSOUND
 18889
 18890 				; optimize OK (service.pas), line = 3697
 18891
 18892 90AB A9 00			lda #$00
 18893 90AD 8D 60 99			sta SCORE.ABORTPLAY
 18894
 18895 				; optimize OK (service.pas), line = 3702
 18896
 18897 90B0 AD 31 97			lda PLAYSCREEN
 18898 90B3 8D 13 9D			sta SETPALETTE.BTM
 18899 90B6 AD 32 97			lda PLAYSCREEN+1
 18900 90B9 8D 14 9D			sta SETPALETTE.BTM+1
 18901 90BC 20 0E 35			jsr SETPALETTE
 18902
 18903 				; optimize OK (service.pas), line = 3708
 18904
 18905 90BF AD C9 98			lda PRESENTS.OFS
 18906 90C2 8D 91 9C			sta BLITBOX.SRC
 18907 90C5 AD CA 98			lda PRESENTS.OFS+1
 18908 90C8 8D 92 9C			sta BLITBOX.SRC+1
 18909 90CB AD CB 98			lda PRESENTS.OFS+2
 18910 90CE 8D 93 9C			sta BLITBOX.SRC+2
 18911 90D1 AD CC 98			lda PRESENTS.OFS+3
 18912 90D4 8D 94 9C			sta BLITBOX.SRC+3
 18913 90D7 A9 00			lda #$00
 18914 90D9 8D 95 9C			sta BLITBOX.DST
 18915 90DC A9 50			lda #$50
 18916 90DE 8D 96 9C			sta BLITBOX.DST+1
 18917 90E1 A9 00			lda #$00
 18918 90E3 8D 97 9C			sta BLITBOX.DST+2
 18919 90E6 8D 98 9C			sta BLITBOX.DST+3
 18920 90E9 A9 40			lda #$40
 18921 90EB 8D 99 9C			sta BLITBOX.W
 18922 90EE A9 01			lda #$01
 18923 90F0 8D 9A 9C			sta BLITBOX.W+1
 18924 90F3 A9 C8			lda #$C8
 18925 90F5 8D 9B 9C			sta BLITBOX.H
 18926 90F8 20 E8 2B			jsr BLITBOX
 18927
 18928 				; optimize OK (service.pas), line = 3746
 18929
 18930 90FB A9 01			lda #$01
 18931 90FD 8D 15 9F			sta RESULT
 18932 9100 A9 00			lda #$00
 18933 9102 8D 16 9F			sta RESULT+1
 18934 9105			@exit
 18935
 18936 				; ------------------------------------------------------------
 18937
 18938 = 9F15			RESULT	= DATAORIGIN+$0789
 18939 = 9F17			X	= DATAORIGIN+$078B
 18940 = 9F19			Y	= DATAORIGIN+$078D
 18941 = 9F1B			Z	= DATAORIGIN+$078F
 18942 = 9F1D			K	= DATAORIGIN+$0791
 18943 = 9F1F			IK	= DATAORIGIN+$0793
 18944
 18945 = 9F17			@VarData	= X
 18946 = 000A			@VarDataSize	= 10
 18947
 18948 9105 60				rts						; ret
 18949 				.endl
 18950
 18951 9106			.local	START_GAME					; PROCEDURE
 18952
 18953 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3754
 18954
 18955 9106 20 48 90			jsr SET_START_PARAMETERS
 18956
 18957 				; optimize OK (service.pas), line = 3755
 18958
 18959 9109 AD 22 9F			lda PLAYERS+1
 18960 910C D0 05			bne @+
 18961 910E AD 21 9F			lda PLAYERS
 18962 9111 C9 01			cmp #$01
 18963 				@
 18964 9113 D0 05			jne l_38BE
 18965 9115 A9 00			lda #$00
 18966 9117 8D 57 99			sta adr.SCORE.LIVES+$02
 18967 911A			l_38BE
 18968
 18969 				; optimize OK (service.pas), line = 3758
 18970
 18971 911A A9 00			lda #$00
 18972 911C 8D 69 99			sta TRAINER
 18973
 18974 				; optimize OK (service.pas), line = 3759
 18975
 18976 911F AD 79 97			lda WALL
 18977 9122 85 8E			sta @move.dst
 18978 9124 AD 7A 97			lda WALL+1
 18979 9127 85 8F			sta @move.dst+1
 18980 9129 AD 77 97			lda WALL_P
 18981 912C 85 8A			sta @move.src
 18982 912E AD 61 99			lda CUR_PLAYER
 18983 9131 18 6D 78 97			add WALL_P+1
 18984 9135 85 8B			sta @move.src+1
 18985 9137 A9 00			lda <256
 18986 9139 85 86			sta @move.cnt
 18987 913B A9 01			lda >256
 18988 913D 85 87			sta @move.cnt+1
 18989 913F 20 03 12			jsr @move
 18990
 18991 				; optimize FAIL ('SET_WALL', service.pas), line = 3763
 18992
 18993 9142 20 28 52			jsr SET_WALL
 18994
 18995 				; optimize OK (service.pas), line = 3765
 18996
 18997 9145 AD 51 97			lda PATTERN
 18998 9148 8D 08 9E			sta FILL_PICTURE_WITH_PATTERN.PATT
 18999 914B AD 52 97			lda PATTERN+1
 19000 914E 8D 09 9E			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 19001 9151 20 FF 6D			jsr FILL_PICTURE_WITH_PATTERN
 19002
 19003 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3766
 19004
 19005 9154 E8				inx
 19006 9155 AD 31 97 95 96		mva PLAYSCREEN :STACKORIGIN,x
 19007 915A AD 32 97 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 19008 915F 20 B9 34			jsr SHOWBTMPICTURE
 19009
 19010 				; optimize OK (service.pas), line = 3769
 19011
 19012 9162 AD 31 97			lda PLAYSCREEN
 19013 9165 8D 13 9D			sta SETPALETTE.BTM
 19014 9168 AD 32 97			lda PLAYSCREEN+1
 19015 916B 8D 14 9D			sta SETPALETTE.BTM+1
 19016 916E 20 0E 35			jsr SETPALETTE
 19017
 19018 				; optimize OK (service.pas), line = 3773
 19019
 19020 9171 AD 4A 99			lda adr.SCORE.PLAYER+$04
 19021 9174 8D 53 9E			sta WRITE_SCORE.SC
 19022 9177 AD 4B 99			lda adr.SCORE.PLAYER+1+$04
 19023 917A 8D 54 9E			sta WRITE_SCORE.SC+1
 19024 917D AD 4C 99			lda adr.SCORE.PLAYER+2+$04
 19025 9180 8D 55 9E			sta WRITE_SCORE.SC+2
 19026 9183 AD 4D 99			lda adr.SCORE.PLAYER+3+$04
 19027 9186 8D 56 9E			sta WRITE_SCORE.SC+3
 19028 9189 A9 FD			lda #$FD
 19029 918B 8D 4F 9E			sta WRITE_SCORE.PX
 19030 918E A9 00			lda #$00
 19031 9190 8D 50 9E			sta WRITE_SCORE.PX+1
 19032 9193 A9 3C			lda #$3C
 19033 9195 8D 51 9E			sta WRITE_SCORE.PY
 19034 9198 A9 00			lda #$00
 19035 919A 8D 52 9E			sta WRITE_SCORE.PY+1
 19036 919D 20 57 78			jsr WRITE_SCORE
 19037
 19038 				; optimize OK (service.pas), line = 3774
 19039
 19040 91A0 AD 4E 99			lda adr.SCORE.PLAYER+$08
 19041 91A3 8D 53 9E			sta WRITE_SCORE.SC
 19042 91A6 AD 4F 99			lda adr.SCORE.PLAYER+1+$08
 19043 91A9 8D 54 9E			sta WRITE_SCORE.SC+1
 19044 91AC AD 50 99			lda adr.SCORE.PLAYER+2+$08
 19045 91AF 8D 55 9E			sta WRITE_SCORE.SC+2
 19046 91B2 AD 51 99			lda adr.SCORE.PLAYER+3+$08
 19047 91B5 8D 56 9E			sta WRITE_SCORE.SC+3
 19048 91B8 A9 FD			lda #$FD
 19049 91BA 8D 4F 9E			sta WRITE_SCORE.PX
 19050 91BD A9 00			lda #$00
 19051 91BF 8D 50 9E			sta WRITE_SCORE.PX+1
 19052 91C2 A9 5D			lda #$5D
 19053 91C4 8D 51 9E			sta WRITE_SCORE.PY
 19054 91C7 A9 00			lda #$00
 19055 91C9 8D 52 9E			sta WRITE_SCORE.PY+1
 19056 91CC 20 57 78			jsr WRITE_SCORE
 19057
 19058 				; optimize OK (service.pas), line = 3775
 19059
 19060 91CF A9 FD			lda #$FD
 19061 91D1 8D 4F 9E			sta WRITE_SCORE.PX
 19062 91D4 A9 00			lda #$00
 19063 91D6 8D 50 9E			sta WRITE_SCORE.PX+1
 19064 91D9 A9 80			lda #$80
 19065 91DB 8D 51 9E			sta WRITE_SCORE.PY
 19066 91DE A9 00			lda #$00
 19067 91E0 8D 52 9E			sta WRITE_SCORE.PY+1
 19068 91E3 AD 58 99			lda SCORE.HISCORE
 19069 91E6 8D 53 9E			sta WRITE_SCORE.SC
 19070 91E9 AD 59 99			lda SCORE.HISCORE+1
 19071 91EC 8D 54 9E			sta WRITE_SCORE.SC+1
 19072 91EF AD 5A 99			lda SCORE.HISCORE+2
 19073 91F2 8D 55 9E			sta WRITE_SCORE.SC+2
 19074 91F5 AD 5B 99			lda SCORE.HISCORE+3
 19075 91F8 8D 56 9E			sta WRITE_SCORE.SC+3
 19076 91FB 20 57 78			jsr WRITE_SCORE
 19077
 19078 				; --- RepeatUntilProlog
 19079 91FE			l_38F0
 19080
 19081 				; --- RepeatUntilProlog
 19082 91FE			l_38F1
 19083
 19084 				; optimize OK (service.pas), line = 3785
 19085
 19086 91FE AC 61 99			ldy CUR_PLAYER
 19087 9201 B9 5D 99			lda adr.SCORE.ROUNDSEL,y
 19088 9204 D0 77			jne l_3903
 19089
 19090 				; optimize FAIL (1, service.pas), line = 3787
 19091
 19092 9206 E8				inx
 19093 9207 AD 61 99 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19094 920C A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19095 9210 20 31 90			jsr CHOOSE_START_WALL
 19096 9213 E8				inx
 19097 9214 AD 04 9F 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 19098 9219 AD 05 9F 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 19099 921E B4 95			ldy :STACKORIGIN-1,x
 19100 9220 B5 96			lda :STACKORIGIN,x
 19101 9222 99 52 99			sta adr.SCORE.WALL_N,y
 19102 9225 CA				dex
 19103 9226 CA				dex
 19104
 19105 				; optimize OK (service.pas), line = 3790
 19106
 19107 9227 A9 00			lda #$00
 19108 9229 85 9F			sta :STACKORIGIN+9
 19109 922B AD 61 99			lda CUR_PLAYER
 19110 922E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19111 9230 AC 61 99			ldy CUR_PLAYER
 19112 9233 B9 52 99			lda adr.SCORE.WALL_N,y
 19113 9236 38 E9 01			sub #$01
 19114 9239 85 86			sta :eax
 19115 923B A9 00			lda #$00
 19116 923D E9 00			sbc #$00
 19117 923F 85 87			sta :eax+1
 19118 9241 A9 00			lda #$00
 19119 9243 85 8E			sta :ecx
 19120 9245 A9 01			lda #$01
 19121 9247 85 8F			sta :ecx+1
 19122 					.ifdef fmulinit
 19123 					fmulu_16
 19124 					els
 19125 9249 20 58 13			imulCX
 19126 					eif
 19127 924C AD 77 97			lda WALL_P
 19128 924F 18 65 9F			add :STACKORIGIN+9
 19129 9252 85 8E			sta @move.dst
 19130 9254 AD 78 97			lda WALL_P+1
 19131 9257 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19132 9259 85 8F			sta @move.dst+1
 19133 925B A5 86			lda :eax
 19134 925D 18 6D 7B 97			add ALL_WALLS
 19135 9261 85 8A			sta @move.src
 19136 9263 A5 87			lda :eax+1
 19137 9265 6D 7C 97			adc ALL_WALLS+1
 19138 9268 85 8B			sta @move.src+1
 19139 926A A9 00			lda <256
 19140 926C 85 86			sta @move.cnt
 19141 926E A9 01			lda >256
 19142 9270 85 87			sta @move.cnt+1
 19143 9272 20 03 12			jsr @move
 19144
 19145 				; optimize OK (service.pas), line = 3794
 19146
 19147 9275 AC 61 99			ldy CUR_PLAYER
 19148 9278 A9 01			lda #$01
 19149 927A 99 5D 99			sta adr.SCORE.ROUNDSEL,y
 19150 927D			l_3903
 19151
 19152 				; optimize OK (service.pas), line = 3798
 19153
 19154 927D AD 79 97			lda WALL
 19155 9280 85 8E			sta @move.dst
 19156 9282 AD 7A 97			lda WALL+1
 19157 9285 85 8F			sta @move.dst+1
 19158 9287 AD 77 97			lda WALL_P
 19159 928A 85 8A			sta @move.src
 19160 928C AD 61 99			lda CUR_PLAYER
 19161 928F 18 6D 78 97			add WALL_P+1
 19162 9293 85 8B			sta @move.src+1
 19163 9295 A9 00			lda <256
 19164 9297 85 86			sta @move.cnt
 19165 9299 A9 01			lda >256
 19166 929B 85 87			sta @move.cnt+1
 19167 929D 20 03 12			jsr @move
 19168
 19169 				; optimize FAIL ('SET_WALL', service.pas), line = 3799
 19170
 19171 92A0 20 28 52			jsr SET_WALL
 19172
 19173 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3804
 19174
 19175 92A3 20 20 88			jsr BOUNCEBALL
 19176 92A6 AD 9D 9E			lda BOUNCEBALL.RESULT
 19177 92A9 8D 23 9F			sta NWALL
 19178
 19179 				; optimize OK (service.pas), line = 3807
 19180
 19181 92AC F0 6A			jeq l_3951
 19182
 19183 				; optimize OK (service.pas), line = 3810
 19184
 19185 92AE AC 61 99			ldy CUR_PLAYER
 19186 92B1 B9 52 99			lda adr.SCORE.WALL_N,y
 19187 92B4 18 69 01			add #$01
 19188 92B7 99 52 99			sta adr.SCORE.WALL_N,y
 19189
 19190 				; optimize OK (service.pas), line = 3813
 19191
 19192 92BA AD 45 99			lda TOTALWALL
 19193 92BD D9 52 99			cmp adr.SCORE.WALL_N,y
 19194 92C0 B0 05			jcs l_396D
 19195
 19196 				; optimize OK (service.pas), line = 3814
 19197
 19198 92C2 A9 01			lda #$01
 19199 92C4 99 52 99			sta adr.SCORE.WALL_N,y
 19200 92C7			l_396D
 19201
 19202 				; optimize OK (service.pas), line = 3817
 19203
 19204 92C7 A9 00			lda #$00
 19205 92C9 85 9F			sta :STACKORIGIN+9
 19206 92CB AD 61 99			lda CUR_PLAYER
 19207 92CE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19208 92D0 AC 61 99			ldy CUR_PLAYER
 19209 92D3 B9 52 99			lda adr.SCORE.WALL_N,y
 19210 92D6 38 E9 01			sub #$01
 19211 92D9 85 86			sta :eax
 19212 92DB A9 00			lda #$00
 19213 92DD E9 00			sbc #$00
 19214 92DF 85 87			sta :eax+1
 19215 92E1 A9 00			lda #$00
 19216 92E3 85 8E			sta :ecx
 19217 92E5 A9 01			lda #$01
 19218 92E7 85 8F			sta :ecx+1
 19219 					.ifdef fmulinit
 19220 					fmulu_16
 19221 					els
 19222 92E9 20 58 13			imulCX
 19223 					eif
 19224 92EC AD 77 97			lda WALL_P
 19225 92EF 18 65 9F			add :STACKORIGIN+9
 19226 92F2 85 8E			sta @move.dst
 19227 92F4 AD 78 97			lda WALL_P+1
 19228 92F7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19229 92F9 85 8F			sta @move.dst+1
 19230 92FB A5 86			lda :eax
 19231 92FD 18 6D 7B 97			add ALL_WALLS
 19232 9301 85 8A			sta @move.src
 19233 9303 A5 87			lda :eax+1
 19234 9305 6D 7C 97			adc ALL_WALLS+1
 19235 9308 85 8B			sta @move.src+1
 19236 930A A9 00			lda <256
 19237 930C 85 86			sta @move.cnt
 19238 930E A9 01			lda >256
 19239 9310 85 87			sta @move.cnt+1
 19240 9312 20 03 12			jsr @move
 19241 9315 4C 23 93			jmp l_399F
 19242 9318			l_3951
 19243
 19244 				; optimize OK (service.pas), line = 3823
 19245
 19246 9318 AC 61 99			ldy CUR_PLAYER
 19247 931B B9 55 99			lda adr.SCORE.LIVES,y
 19248 931E D0 03			jne l_39B4
 19249 9320 20 48 70			jsr GAME_OVER
 19250 9323			l_399F
 19251 9323			l_39B4
 19252
 19253 				; optimize OK (service.pas), line = 3828
 19254
 19255 9323 AD 23 9F			lda NWALL
 19256 9326 F0 03 4C FE 91		jne l_38F1
 19257
 19258 				; optimize FAIL (0, service.pas), line = 3831
 19259
 19260 932B EE 61 99			inc CUR_PLAYER
 19261
 19262 				; optimize OK (service.pas), line = 3832
 19263
 19264 932E AD 21 9F			lda PLAYERS
 19265 9331 CD 61 99			cmp CUR_PLAYER
 19266 9334 AD 22 9F			lda PLAYERS+1
 19267 9337 E9 00			sbc #$00
 19268 9339 50 02			svc
 19269 933B 49 80			eor #$80
 19270 933D 10 05			jpl l_39DC
 19271 933F A9 01			lda #$01
 19272 9341 8D 61 99			sta CUR_PLAYER
 19273 9344			l_39DC
 19274
 19275 				; optimize OK (service.pas), line = 3838
 19276
 19277 9344 AC 61 99			ldy CUR_PLAYER
 19278 9347 B9 55 99			lda adr.SCORE.LIVES,y
 19279 934A D0 09			jne l_39F8
 19280 934C A9 03			lda #$03
 19281 934E 38 ED 61 99			sub CUR_PLAYER
 19282 9352 8D 61 99			sta CUR_PLAYER
 19283 9355			l_39F8
 19284
 19285 				; optimize OK (service.pas), line = 3843
 19286
 19287 9355 A0 01			ldy #1
 19288 9357 AD 56 99			lda adr.SCORE.LIVES+$01
 19289 935A F0 01			beq @+
 19290 935C 88				dey
 19291 				@
 19292 935D 84 9F			sty :STACKORIGIN+9
 19293 935F A0 01			ldy #1
 19294 9361 AD 57 99			lda adr.SCORE.LIVES+$02
 19295 9364 F0 01			beq @+
 19296 9366 88				dey
 19297 				@
 19298 9367 98				tya
 19299 9368 25 9F			and :STACKORIGIN+9
 19300 936A 0D 60 99			ora SCORE.ABORTPLAY
 19301 936D D0 03 4C FE 91		jeq l_38F0
 19302
 19303 				; ------------------------------------------------------------
 19304
 19305 = 9F21			PLAYERS	= DATAORIGIN+$0795
 19306 = 9F23			NWALL	= DATAORIGIN+$0797
 19307
 19308 = 9F21			@VarData	= PLAYERS
 19309 = 0003			@VarDataSize	= 3
 19310
 19311 9372			@exit
 19312 					.ifdef @new
 19313 					lda <@VarData
 19314 					sta :ztmp
 19315 					lda >@VarData
 19316 					ldy #@VarDataSize-1
 19317 					jmp @FreeMem
 19318 					els
 19319 9372 60				rts						; ret
 19320 					eif
 19321 				.endl
 19322
 19323 9373			.local	INIT_GAME					; PROCEDURE
 19324
 19325 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 73
 19326
 19327 9373 20 15 26			jsr SYSTEM.RANDOMIZE
 19328
 19329 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 75
 19330
 19331 9376 20 F0 2E			jsr INITSVGA
 19332
 19333 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 76
 19334
 19335 9379 20 AE 2E			jsr INITROWARRAY
 19336
 19337 				; optimize OK (btm.inc), line = 1
 19338
 19339 937C A9 00			lda #$00
 19340 937E 8D 91 98			sta PLAYSCREEN.OFS
 19341 9381 A9 4A			lda #$4A
 19342 9383 8D 92 98			sta PLAYSCREEN.OFS+1
 19343 9386 A9 01			lda #$01
 19344 9388 8D 93 98			sta PLAYSCREEN.OFS+2
 19345 938B A9 00			lda #$00
 19346 938D 8D 94 98			sta PLAYSCREEN.OFS+3
 19347
 19348 				; optimize OK (btm.inc), line = 2
 19349
 19350 9390 A9 40			lda #$40
 19351 9392 8D 8D 98			sta PLAYSCREEN.WIDTH
 19352 9395 A9 01			lda #$01
 19353 9397 8D 8E 98			sta PLAYSCREEN.WIDTH+1
 19354
 19355 				; optimize OK (btm.inc), line = 3
 19356
 19357 939A A9 C8			lda #$C8
 19358 939C 8D 8F 98			sta PLAYSCREEN.HEIGHT
 19359 939F A9 00			lda #$00
 19360 93A1 8D 90 98			sta PLAYSCREEN.HEIGHT+1
 19361
 19362 				; optimize OK (btm.inc), line = 5
 19363
 19364 93A4 8D C9 98			sta PRESENTS.OFS
 19365 93A7 A9 44			lda #$44
 19366 93A9 8D CA 98			sta PRESENTS.OFS+1
 19367 93AC A9 02			lda #$02
 19368 93AE 8D CB 98			sta PRESENTS.OFS+2
 19369 93B1 A9 00			lda #$00
 19370 93B3 8D CC 98			sta PRESENTS.OFS+3
 19371
 19372 				; optimize OK (btm.inc), line = 6
 19373
 19374 93B6 A9 40			lda #$40
 19375 93B8 8D C5 98			sta PRESENTS.WIDTH
 19376 93BB A9 01			lda #$01
 19377 93BD 8D C6 98			sta PRESENTS.WIDTH+1
 19378
 19379 				; optimize OK (btm.inc), line = 7
 19380
 19381 93C0 A9 C8			lda #$C8
 19382 93C2 8D C7 98			sta PRESENTS.HEIGHT
 19383 93C5 A9 00			lda #$00
 19384 93C7 8D C8 98			sta PRESENTS.HEIGHT+1
 19385
 19386 				; optimize OK (btm.inc), line = 9
 19387
 19388 93CA 8D B9 98			sta EXPLOSION.OFS
 19389 93CD A9 3E			lda #$3E
 19390 93CF 8D BA 98			sta EXPLOSION.OFS+1
 19391 93D2 A9 03			lda #$03
 19392 93D4 8D BB 98			sta EXPLOSION.OFS+2
 19393 93D7 A9 00			lda #$00
 19394 93D9 8D BC 98			sta EXPLOSION.OFS+3
 19395
 19396 				; optimize OK (btm.inc), line = 10
 19397
 19398 93DC A9 2A			lda #$2A
 19399 93DE 8D B5 98			sta EXPLOSION.WIDTH
 19400 93E1 A9 00			lda #$00
 19401 93E3 8D B6 98			sta EXPLOSION.WIDTH+1
 19402
 19403 				; optimize OK (btm.inc), line = 11
 19404
 19405 93E6 A9 72			lda #$72
 19406 93E8 8D B7 98			sta EXPLOSION.HEIGHT
 19407 93EB A9 00			lda #$00
 19408 93ED 8D B8 98			sta EXPLOSION.HEIGHT+1
 19409
 19410 				; optimize OK (btm.inc), line = 13
 19411
 19412 93F0 A9 B4			lda #$B4
 19413 93F2 8D C1 98			sta NEWVAUS.OFS
 19414 93F5 A9 50			lda #$50
 19415 93F7 8D C2 98			sta NEWVAUS.OFS+1
 19416 93FA A9 03			lda #$03
 19417 93FC 8D C3 98			sta NEWVAUS.OFS+2
 19418 93FF A9 00			lda #$00
 19419 9401 8D C4 98			sta NEWVAUS.OFS+3
 19420
 19421 				; optimize OK (btm.inc), line = 14
 19422
 19423 9404 A9 29			lda #$29
 19424 9406 8D BD 98			sta NEWVAUS.WIDTH
 19425 9409 A9 00			lda #$00
 19426 940B 8D BE 98			sta NEWVAUS.WIDTH+1
 19427
 19428 				; optimize OK (btm.inc), line = 15
 19429
 19430 940E A9 C1			lda #$C1
 19431 9410 8D BF 98			sta NEWVAUS.HEIGHT
 19432 9413 A9 00			lda #$00
 19433 9415 8D C0 98			sta NEWVAUS.HEIGHT+1
 19434
 19435 				; optimize OK (btm.inc), line = 17
 19436
 19437 9418 A9 9D			lda #$9D
 19438 941A 8D D1 98			sta SOUNDFX.OFS
 19439 941D A9 6F			lda #$6F
 19440 941F 8D D2 98			sta SOUNDFX.OFS+1
 19441 9422 A9 03			lda #$03
 19442 9424 8D D3 98			sta SOUNDFX.OFS+2
 19443 9427 A9 00			lda #$00
 19444 9429 8D D4 98			sta SOUNDFX.OFS+3
 19445
 19446 				; optimize OK (btm.inc), line = 18
 19447
 19448 942C A9 15			lda #$15
 19449 942E 8D CD 98			sta SOUNDFX.WIDTH
 19450 9431 A9 00			lda #$00
 19451 9433 8D CE 98			sta SOUNDFX.WIDTH+1
 19452
 19453 				; optimize OK (btm.inc), line = 19
 19454
 19455 9436 A9 26			lda #$26
 19456 9438 8D CF 98			sta SOUNDFX.HEIGHT
 19457 943B A9 00			lda #$00
 19458 943D 8D D0 98			sta SOUNDFX.HEIGHT+1
 19459
 19460 				; optimize OK (btm.inc), line = 21
 19461
 19462 9440 A9 BB			lda #$BB
 19463 9442 8D D9 98			sta SHINEWALL.OFS
 19464 9445 A9 72			lda #$72
 19465 9447 8D DA 98			sta SHINEWALL.OFS+1
 19466 944A A9 03			lda #$03
 19467 944C 8D DB 98			sta SHINEWALL.OFS+2
 19468 944F A9 00			lda #$00
 19469 9451 8D DC 98			sta SHINEWALL.OFS+3
 19470
 19471 				; optimize OK (btm.inc), line = 22
 19472
 19473 9454 A9 10			lda #$10
 19474 9456 8D D5 98			sta SHINEWALL.WIDTH
 19475 9459 A9 00			lda #$00
 19476 945B 8D D6 98			sta SHINEWALL.WIDTH+1
 19477
 19478 				; optimize OK (btm.inc), line = 23
 19479
 19480 945E A9 50			lda #$50
 19481 9460 8D D7 98			sta SHINEWALL.HEIGHT
 19482 9463 A9 00			lda #$00
 19483 9465 8D D8 98			sta SHINEWALL.HEIGHT+1
 19484
 19485 				; optimize OK (btm.inc), line = 25
 19486
 19487 9468 A9 BB			lda #$BB
 19488 946A 8D E1 98			sta MINIVAUS.OFS
 19489 946D A9 77			lda #$77
 19490 946F 8D E2 98			sta MINIVAUS.OFS+1
 19491 9472 A9 03			lda #$03
 19492 9474 8D E3 98			sta MINIVAUS.OFS+2
 19493 9477 A9 00			lda #$00
 19494 9479 8D E4 98			sta MINIVAUS.OFS+3
 19495
 19496 				; optimize OK (btm.inc), line = 26
 19497
 19498 947C A9 14			lda #$14
 19499 947E 8D DD 98			sta MINIVAUS.WIDTH
 19500 9481 A9 00			lda #$00
 19501 9483 8D DE 98			sta MINIVAUS.WIDTH+1
 19502
 19503 				; optimize OK (btm.inc), line = 27
 19504
 19505 9486 A9 05			lda #$05
 19506 9488 8D DF 98			sta MINIVAUS.HEIGHT
 19507 948B A9 00			lda #$00
 19508 948D 8D E0 98			sta MINIVAUS.HEIGHT+1
 19509
 19510 				; optimize OK (btm.inc), line = 29
 19511
 19512 9490 A9 1F			lda #$1F
 19513 9492 8D E9 98			sta LEVELSEL.OFS
 19514 9495 A9 78			lda #$78
 19515 9497 8D EA 98			sta LEVELSEL.OFS+1
 19516 949A A9 03			lda #$03
 19517 949C 8D EB 98			sta LEVELSEL.OFS+2
 19518 949F A9 00			lda #$00
 19519 94A1 8D EC 98			sta LEVELSEL.OFS+3
 19520
 19521 				; optimize OK (btm.inc), line = 30
 19522
 19523 94A4 A9 15			lda #$15
 19524 94A6 8D E5 98			sta LEVELSEL.WIDTH
 19525 94A9 A9 00			lda #$00
 19526 94AB 8D E6 98			sta LEVELSEL.WIDTH+1
 19527
 19528 				; optimize OK (btm.inc), line = 31
 19529
 19530 94AE A9 5F			lda #$5F
 19531 94B0 8D E7 98			sta LEVELSEL.HEIGHT
 19532 94B3 A9 00			lda #$00
 19533 94B5 8D E8 98			sta LEVELSEL.HEIGHT+1
 19534
 19535 				; optimize OK (btm.inc), line = 33
 19536
 19537 94B8 A9 EA			lda #$EA
 19538 94BA 8D F1 98			sta LETTERS.OFS
 19539 94BD A9 7F			lda #$7F
 19540 94BF 8D F2 98			sta LETTERS.OFS+1
 19541 94C2 A9 03			lda #$03
 19542 94C4 8D F3 98			sta LETTERS.OFS+2
 19543 94C7 A9 00			lda #$00
 19544 94C9 8D F4 98			sta LETTERS.OFS+3
 19545
 19546 				; optimize OK (btm.inc), line = 34
 19547
 19548 94CC A9 80			lda #$80
 19549 94CE 8D ED 98			sta LETTERS.WIDTH
 19550 94D1 A9 00			lda #$00
 19551 94D3 8D EE 98			sta LETTERS.WIDTH+1
 19552
 19553 				; optimize OK (btm.inc), line = 35
 19554
 19555 94D6 A9 38			lda #$38
 19556 94D8 8D EF 98			sta LETTERS.HEIGHT
 19557 94DB A9 00			lda #$00
 19558 94DD 8D F0 98			sta LETTERS.HEIGHT+1
 19559
 19560 				; optimize OK (btm.inc), line = 37
 19561
 19562 94E0 A9 EA			lda #$EA
 19563 94E2 8D A1 98			sta NORMAL.OFS
 19564 94E5 A9 9B			lda #$9B
 19565 94E7 8D A2 98			sta NORMAL.OFS+1
 19566 94EA A9 03			lda #$03
 19567 94EC 8D A3 98			sta NORMAL.OFS+2
 19568 94EF A9 00			lda #$00
 19569 94F1 8D A4 98			sta NORMAL.OFS+3
 19570
 19571 				; optimize OK (btm.inc), line = 38
 19572
 19573 94F4 A9 20			lda #$20
 19574 94F6 8D 9D 98			sta NORMAL.WIDTH
 19575 94F9 A9 00			lda #$00
 19576 94FB 8D 9E 98			sta NORMAL.WIDTH+1
 19577
 19578 				; optimize OK (btm.inc), line = 39
 19579
 19580 94FE A9 07			lda #$07
 19581 9500 8D 9F 98			sta NORMAL.HEIGHT
 19582 9503 A9 00			lda #$00
 19583 9505 8D A0 98			sta NORMAL.HEIGHT+1
 19584
 19585 				; optimize OK (btm.inc), line = 41
 19586
 19587 9508 A9 CA			lda #$CA
 19588 950A 8D B1 98			sta LASERS.OFS
 19589 950D A9 9C			lda #$9C
 19590 950F 8D B2 98			sta LASERS.OFS+1
 19591 9512 A9 03			lda #$03
 19592 9514 8D B3 98			sta LASERS.OFS+2
 19593 9517 A9 00			lda #$00
 19594 9519 8D B4 98			sta LASERS.OFS+3
 19595
 19596 				; optimize OK (btm.inc), line = 42
 19597
 19598 951C A9 20			lda #$20
 19599 951E 8D AD 98			sta LASERS.WIDTH
 19600 9521 A9 00			lda #$00
 19601 9523 8D AE 98			sta LASERS.WIDTH+1
 19602
 19603 				; optimize OK (btm.inc), line = 43
 19604
 19605 9526 A9 07			lda #$07
 19606 9528 8D AF 98			sta LASERS.HEIGHT
 19607 952B A9 00			lda #$00
 19608 952D 8D B0 98			sta LASERS.HEIGHT+1
 19609
 19610 				; optimize OK (btm.inc), line = 45
 19611
 19612 9530 A9 AA			lda #$AA
 19613 9532 8D A9 98			sta ENLARGED.OFS
 19614 9535 A9 9D			lda #$9D
 19615 9537 8D AA 98			sta ENLARGED.OFS+1
 19616 953A A9 03			lda #$03
 19617 953C 8D AB 98			sta ENLARGED.OFS+2
 19618 953F A9 00			lda #$00
 19619 9541 8D AC 98			sta ENLARGED.OFS+3
 19620
 19621 				; optimize OK (btm.inc), line = 46
 19622
 19623 9544 A9 40			lda #$40
 19624 9546 8D A5 98			sta ENLARGED.WIDTH
 19625 9549 A9 00			lda #$00
 19626 954B 8D A6 98			sta ENLARGED.WIDTH+1
 19627
 19628 				; optimize OK (btm.inc), line = 47
 19629
 19630 954E A9 07			lda #$07
 19631 9550 8D A7 98			sta ENLARGED.HEIGHT
 19632 9553 A9 00			lda #$00
 19633 9555 8D A8 98			sta ENLARGED.HEIGHT+1
 19634
 19635 				; optimize OK (btm.inc), line = 49
 19636
 19637 9558 A9 6A			lda #$6A
 19638 955A 8D F9 98			sta SHOOTS.OFS
 19639 955D A9 9F			lda #$9F
 19640 955F 8D FA 98			sta SHOOTS.OFS+1
 19641 9562 A9 03			lda #$03
 19642 9564 8D FB 98			sta SHOOTS.OFS+2
 19643 9567 A9 00			lda #$00
 19644 9569 8D FC 98			sta SHOOTS.OFS+3
 19645
 19646 				; optimize OK (btm.inc), line = 50
 19647
 19648 956C A9 0D			lda #$0D
 19649 956E 8D F5 98			sta SHOOTS.WIDTH
 19650 9571 A9 00			lda #$00
 19651 9573 8D F6 98			sta SHOOTS.WIDTH+1
 19652
 19653 				; optimize OK (btm.inc), line = 51
 19654
 19655 9576 A9 08			lda #$08
 19656 9578 8D F7 98			sta SHOOTS.HEIGHT
 19657 957B A9 00			lda #$00
 19658 957D 8D F8 98			sta SHOOTS.HEIGHT+1
 19659
 19660 				; optimize OK (btm.inc), line = 53
 19661
 19662 9580 A9 D2			lda #$D2
 19663 9582 8D 01 99			sta FLUX.OFS
 19664 9585 A9 9F			lda #$9F
 19665 9587 8D 02 99			sta FLUX.OFS+1
 19666 958A A9 03			lda #$03
 19667 958C 8D 03 99			sta FLUX.OFS+2
 19668 958F A9 00			lda #$00
 19669 9591 8D 04 99			sta FLUX.OFS+3
 19670
 19671 				; optimize OK (btm.inc), line = 54
 19672
 19673 9594 A9 08			lda #$08
 19674 9596 8D FD 98			sta FLUX.WIDTH
 19675 9599 A9 00			lda #$00
 19676 959B 8D FE 98			sta FLUX.WIDTH+1
 19677
 19678 				; optimize OK (btm.inc), line = 55
 19679
 19680 959E A9 29			lda #$29
 19681 95A0 8D FF 98			sta FLUX.HEIGHT
 19682 95A3 A9 00			lda #$00
 19683 95A5 8D 00 99			sta FLUX.HEIGHT+1
 19684
 19685 				; optimize OK (btm.inc), line = 57
 19686
 19687 95A8 A9 1A			lda #$1A
 19688 95AA 8D 89 98			sta BALLDATA.OFS
 19689 95AD A9 A1			lda #$A1
 19690 95AF 8D 8A 98			sta BALLDATA.OFS+1
 19691 95B2 A9 03			lda #$03
 19692 95B4 8D 8B 98			sta BALLDATA.OFS+2
 19693 95B7 A9 00			lda #$00
 19694 95B9 8D 8C 98			sta BALLDATA.OFS+3
 19695
 19696 				; optimize OK (btm.inc), line = 58
 19697
 19698 95BC A9 05			lda #$05
 19699 95BE 8D 85 98			sta BALLDATA.WIDTH
 19700 95C1 A9 00			lda #$00
 19701 95C3 8D 86 98			sta BALLDATA.WIDTH+1
 19702
 19703 				; optimize OK (btm.inc), line = 59
 19704
 19705 95C6 A9 05			lda #$05
 19706 95C8 8D 87 98			sta BALLDATA.HEIGHT
 19707 95CB A9 00			lda #$00
 19708 95CD 8D 88 98			sta BALLDATA.HEIGHT+1
 19709
 19710 				; optimize OK (btm.inc), line = 61
 19711
 19712 95D0 A9 33			lda #$33
 19713 95D2 8D 16 99			sta PATTERN.OFS
 19714 95D5 A9 A1			lda #$A1
 19715 95D7 8D 17 99			sta PATTERN.OFS+1
 19716 95DA A9 03			lda #$03
 19717 95DC 8D 18 99			sta PATTERN.OFS+2
 19718 95DF A9 00			lda #$00
 19719 95E1 8D 19 99			sta PATTERN.OFS+3
 19720
 19721 				; optimize OK (btm.inc), line = 62
 19722
 19723 95E4 A9 1A			lda #$1A
 19724 95E6 8D 12 99			sta PATTERN.WIDTH
 19725 95E9 A9 00			lda #$00
 19726 95EB 8D 13 99			sta PATTERN.WIDTH+1
 19727
 19728 				; optimize OK (btm.inc), line = 63
 19729
 19730 95EE A9 18			lda #$18
 19731 95F0 8D 14 99			sta PATTERN.HEIGHT
 19732 95F3 A9 00			lda #$00
 19733 95F5 8D 15 99			sta PATTERN.HEIGHT+1
 19734
 19735 				; optimize OK (btm.inc), line = 65
 19736
 19737 95F8 A9 A3			lda #$A3
 19738 95FA 8D 1E 99			sta PATTERN0.OFS
 19739 95FD 8D 1F 99			sta PATTERN0.OFS+1
 19740 9600 A9 03			lda #$03
 19741 9602 8D 20 99			sta PATTERN0.OFS+2
 19742 9605 A9 00			lda #$00
 19743 9607 8D 21 99			sta PATTERN0.OFS+3
 19744
 19745 				; optimize OK (btm.inc), line = 66
 19746
 19747 960A A9 1A			lda #$1A
 19748 960C 8D 1A 99			sta PATTERN0.WIDTH
 19749 960F A9 00			lda #$00
 19750 9611 8D 1B 99			sta PATTERN0.WIDTH+1
 19751
 19752 				; optimize OK (btm.inc), line = 67
 19753
 19754 9614 A9 18			lda #$18
 19755 9616 8D 1C 99			sta PATTERN0.HEIGHT
 19756 9619 A9 00			lda #$00
 19757 961B 8D 1D 99			sta PATTERN0.HEIGHT+1
 19758
 19759 				; optimize OK (btm.inc), line = 69
 19760
 19761 961E A9 13			lda #$13
 19762 9620 8D 26 99			sta PATTERN1.OFS
 19763 9623 A9 A6			lda #$A6
 19764 9625 8D 27 99			sta PATTERN1.OFS+1
 19765 9628 A9 03			lda #$03
 19766 962A 8D 28 99			sta PATTERN1.OFS+2
 19767 962D A9 00			lda #$00
 19768 962F 8D 29 99			sta PATTERN1.OFS+3
 19769
 19770 				; optimize OK (btm.inc), line = 70
 19771
 19772 9632 A9 0E			lda #$0E
 19773 9634 8D 22 99			sta PATTERN1.WIDTH
 19774 9637 A9 00			lda #$00
 19775 9639 8D 23 99			sta PATTERN1.WIDTH+1
 19776
 19777 				; optimize OK (btm.inc), line = 71
 19778
 19779 963C A9 0E			lda #$0E
 19780 963E 8D 24 99			sta PATTERN1.HEIGHT
 19781 9641 A9 00			lda #$00
 19782 9643 8D 25 99			sta PATTERN1.HEIGHT+1
 19783
 19784 				; optimize OK (btm.inc), line = 73
 19785
 19786 9646 A9 D7			lda #$D7
 19787 9648 8D 2E 99			sta PATTERN2.OFS
 19788 964B A9 A6			lda #$A6
 19789 964D 8D 2F 99			sta PATTERN2.OFS+1
 19790 9650 A9 03			lda #$03
 19791 9652 8D 30 99			sta PATTERN2.OFS+2
 19792 9655 A9 00			lda #$00
 19793 9657 8D 31 99			sta PATTERN2.OFS+3
 19794
 19795 				; optimize OK (btm.inc), line = 74
 19796
 19797 965A A9 26			lda #$26
 19798 965C 8D 2A 99			sta PATTERN2.WIDTH
 19799 965F A9 00			lda #$00
 19800 9661 8D 2B 99			sta PATTERN2.WIDTH+1
 19801
 19802 				; optimize OK (btm.inc), line = 75
 19803
 19804 9664 A9 23			lda #$23
 19805 9666 8D 2C 99			sta PATTERN2.HEIGHT
 19806 9669 A9 00			lda #$00
 19807 966B 8D 2D 99			sta PATTERN2.HEIGHT+1
 19808
 19809 				; optimize OK (btm.inc), line = 77
 19810
 19811 966E A9 09			lda #$09
 19812 9670 8D 36 99			sta PATTERN3.OFS
 19813 9673 A9 AC			lda #$AC
 19814 9675 8D 37 99			sta PATTERN3.OFS+1
 19815 9678 A9 03			lda #$03
 19816 967A 8D 38 99			sta PATTERN3.OFS+2
 19817 967D A9 00			lda #$00
 19818 967F 8D 39 99			sta PATTERN3.OFS+3
 19819
 19820 				; optimize OK (btm.inc), line = 78
 19821
 19822 9682 A9 1C			lda #$1C
 19823 9684 8D 32 99			sta PATTERN3.WIDTH
 19824 9687 A9 00			lda #$00
 19825 9689 8D 33 99			sta PATTERN3.WIDTH+1
 19826
 19827 				; optimize OK (btm.inc), line = 79
 19828
 19829 968C A9 1D			lda #$1D
 19830 968E 8D 34 99			sta PATTERN3.HEIGHT
 19831 9691 A9 00			lda #$00
 19832 9693 8D 35 99			sta PATTERN3.HEIGHT+1
 19833
 19834 				; optimize OK (btm.inc), line = 81
 19835
 19836 9696 A9 35			lda #$35
 19837 9698 8D 3E 99			sta PATTERN4.OFS
 19838 969B A9 AF			lda #$AF
 19839 969D 8D 3F 99			sta PATTERN4.OFS+1
 19840 96A0 A9 03			lda #$03
 19841 96A2 8D 40 99			sta PATTERN4.OFS+2
 19842 96A5 A9 00			lda #$00
 19843 96A7 8D 41 99			sta PATTERN4.OFS+3
 19844
 19845 				; optimize OK (btm.inc), line = 82
 19846
 19847 96AA A9 1E			lda #$1E
 19848 96AC 8D 3A 99			sta PATTERN4.WIDTH
 19849 96AF A9 00			lda #$00
 19850 96B1 8D 3B 99			sta PATTERN4.WIDTH+1
 19851
 19852 				; optimize OK (btm.inc), line = 83
 19853
 19854 96B4 A9 1E			lda #$1E
 19855 96B6 8D 3C 99			sta PATTERN4.HEIGHT
 19856 96B9 A9 00			lda #$00
 19857 96BB 8D 3D 99			sta PATTERN4.HEIGHT+1
 19858 96BE A9 01			lda #$01
 19859 96C0 8D 76 98			sta MOUS.FIRE
 19860
 19861 				; optimize OK (arkanoid_vbxe.pas), line = 85
 19862
 19863 96C3 A9 20			lda #$20
 19864 96C5 8D 45 99			sta TOTALWALL
 19865
 19866 				; optimize OK (arkanoid_vbxe.pas), line = 87
 19867
 19868 96C8 A9 50			lda #$50
 19869 96CA 8D 58 99			sta SCORE.HISCORE
 19870 96CD A9 C3			lda #$C3
 19871 96CF 8D 59 99			sta SCORE.HISCORE+1
 19872 96D2 A9 00			lda #$00
 19873 96D4 8D 5A 99			sta SCORE.HISCORE+2
 19874 96D7 8D 5B 99			sta SCORE.HISCORE+3
 19875
 19876 				; optimize OK (arkanoid_vbxe.pas), line = 90
 19877
 19878 96DA A9 01			lda #$01
 19879 96DC 8D 83 99			sta SOUND_ON
 19880
 19881 				; optimize OK (arkanoid_vbxe.pas), line = 91
 19882
 19883 96DF A9 03			lda #$03
 19884 96E1 8D 67 99			sta LV
 19885 96E4 A9 00			lda #$00
 19886 96E6 8D 68 99			sta LV+1
 19887
 19888 				; --- RepeatUntilProlog
 19889 96E9			l_3B3E
 19890
 19891 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 98
 19892
 19893 96E9 20 A8 90			jsr MAINSCREEN
 19894 96EC AD 15 9F			lda MAINSCREEN.RESULT
 19895 96EF 8D 5C 99			sta SCORE.PL_NUMB
 19896
 19897 				; optimize OK (arkanoid_vbxe.pas), line = 100
 19898
 19899 96F2 F0 0D			jeq l_3B54
 19900 96F4 A9 01			lda #$01
 19901 96F6 8D 21 9F			sta START_GAME.PLAYERS
 19902 96F9 A9 00			lda #$00
 19903 96FB 8D 22 9F			sta START_GAME.PLAYERS+1
 19904 96FE 20 06 91			jsr START_GAME
 19905 9701			l_3B54
 19906
 19907 				; optimize OK (arkanoid_vbxe.pas), line = 102
 19908
 19909 9701 AD 5C 99			lda SCORE.PL_NUMB
 19910 9704 C9 01			cmp #$01
 19911 9706 B0 E1			jcs l_3B3E
 19912
 19913 9708			@exit
 19914 					.ifdef @new
 19915 					lda <@VarData
 19916 					sta :ztmp
 19917 					lda >@VarData
 19918 					ldy #@VarDataSize-1
 19919 					jmp @FreeMem
 19920 					els
 19921 9708 60				rts						; ret
 19922 					eif
 19923 				.endl
 19924 9709			l_0022
 19925
 19926 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 110
 19927
 19928 9709 20 73 93			jsr INIT_GAME
 19929
 19930 				; ------------------------------------------------------------
 19931
 19932 = 014A00			VBXE_DATA	= $14A00
 19933 = 986A			adr.MOUS	= DATAORIGIN+$00DE	; [13] RECORD
 19934 970C			.var MOUS	= adr.MOUS .word
 19935 = 986A			MOUS.X	= DATAORIGIN+$00DE
 19936 = 986C			MOUS.Y	= DATAORIGIN+$00E0
 19937 = 986E			MOUS.LEFT	= DATAORIGIN+$00E2
 19938 = 9870			MOUS.RIGHT	= DATAORIGIN+$00E4
 19939 = 9872			MOUS.TOP	= DATAORIGIN+$00E6
 19940 = 9874			MOUS.BOTTOM	= DATAORIGIN+$00E8
 19941 = 9876			MOUS.FIRE	= DATAORIGIN+$00EA
 19942 = B100			adr.BLT	= $B100
 19943 970C			.var BLT	= adr.BLT .word
 19944 = B100			adr.BLT.SRC_ADR	= $B100
 19945 970C			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 19946 = B100			BLT.SRC_ADR.BYTE0	= $B100
 19947 = B101			BLT.SRC_ADR.BYTE1	= $B101
 19948 = B102			BLT.SRC_ADR.BYTE2	= $B102
 19949 = B103			BLT.SRC_STEP_Y	= $B103
 19950 = B105			BLT.SRC_STEP_X	= $B105
 19951 = B106			adr.BLT.DST_ADR	= $B106
 19952 970C			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 19953 = B106			BLT.DST_ADR.BYTE0	= $B106
 19954 = B107			BLT.DST_ADR.BYTE1	= $B107
 19955 = B108			BLT.DST_ADR.BYTE2	= $B108
 19956 = B109			BLT.DST_STEP_Y	= $B109
 19957 = B10B			BLT.DST_STEP_X	= $B10B
 19958 = B10C			BLT.BLT_WIDTH	= $B10C
 19959 = B10E			BLT.BLT_HEIGHT	= $B10E
 19960 = B10F			BLT.BLT_AND_MASK	= $B10F
 19961 = B110			BLT.BLT_XOR_MASK	= $B110
 19962 = B111			BLT.BLT_COLLISION_MASK	= $B111
 19963 = B112			BLT.BLT_ZOOM	= $B112
 19964 = B113			BLT.PATTERN_FEATURE	= $B113
 19965 = B114			BLT.BLT_CONTROL	= $B114
 19966 = 9877			adr.VBXE_RAM	= DATAORIGIN+$00EB	; [8] OBJECT
 19967 970C			.var VBXE_RAM	= adr.VBXE_RAM .word
 19968 = 9877			VBXE_RAM.POSITION	= DATAORIGIN+$00EB
 19969 = 987B			VBXE_RAM.SIZE	= DATAORIGIN+$00EF
 19970 = 5000			VRAM	= $5000
 19971 = 0001			ERR1	= $01
 19972 = 0002			ERR2	= $02
 19973 = 0003			ERR3	= $03
 19974 = 0004			ERR4	= $04
 19975 = 000A			SCRMIN	= $0A
 19976 = 00D8			SCRMAX	= $D8
 19977 = 000C			SCRTOP	= $0C
 19978 = 00C8			SCRBOT	= $C8
 19979 = 0022			VAUS_W	= $22
 19980 = 0004			VAUS_H	= $04
 19981 = 00B8			VAUS_LINE	= $B8
 19982 = 00FF			EMP	= $FF
 19983 = 0005			BALLDIM	= $05
 19984 = 0003			BALLSPOT	= $03
 19985 = 001E			BALLDEV	= $1E
 19986 = 000A			SPEEDFLASH	= $0A
 19987 = 108E			adr.FLASH	= CODEORIGIN+$008E
 19988 970C			.var FLASH	= adr.FLASH .word
 19989 = 1099			adr.SCORE_WALL	= CODEORIGIN+$0099
 19990 970C			.var SCORE_WALL	= adr.SCORE_WALL .word
 19991 = 10AF			adr.EMERG_DEV	= CODEORIGIN+$00AF
 19992 970C			.var EMERG_DEV	= adr.EMERG_DEV .word
 19993 = 10B8			adr.COLORBLOCK	= CODEORIGIN+$00B8
 19994 970C			.var COLORBLOCK	= adr.COLORBLOCK .word
 19995 = 0001			GRAYDOWN	= $01
 19996 = 0001			STARTWALL	= $01
 19997 = 01F4			BALLSPEED	= $01F4
 19998 = 07D0			MAXSPEED	= $07D0
 19999 = 0064			MAXBRWHIT	= $64
 20000 = 0004			PATNUMBER	= $04
 20001 = 10C2			adr.POS_DIGIT	= CODEORIGIN+$00C2
 20002 970C			.var POS_DIGIT	= adr.POS_DIGIT .word
 20003 = 10C6			adr.DIGITS	= CODEORIGIN+$00C6
 20004 970C			.var DIGITS	= adr.DIGITS .word
 20005 = 10D1			adr.LEVEL	= CODEORIGIN+$00D1
 20006 970C			.var LEVEL	= adr.LEVEL .word
 20007 = 0258			SBDIR	= $0258
 20008 = 0003			DEFLEVEL	= $03
 20009 = 012C			LETTER_PROB	= $012C
 20010 = 03E8			LETTER_DROP	= $03E8
 20011 = 0008			LETTER_NUMB	= $08
 20012 = 0008			LETTER_FRM	= $08
 20013 = 0005			LETTER_SBF	= $05
 20014 = 10DD			adr.LETTER_DIS	= CODEORIGIN+$00DD
 20015 970C			.var LETTER_DIS	= adr.LETTER_DIS .word
 20016 = 00B0			FLUXLEVEL	= $B0
 20017 = 9885			adr.BALLDATA	= DATAORIGIN+$00F9	; [8] RECORD
 20018 970C			.var BALLDATA	= adr.BALLDATA .word
 20019 = 9885			BALLDATA.WIDTH	= DATAORIGIN+$00F9
 20020 = 9887			BALLDATA.HEIGHT	= DATAORIGIN+$00FB
 20021 = 9889			BALLDATA.OFS	= DATAORIGIN+$00FD
 20022 = 988D			adr.PLAYSCREEN	= DATAORIGIN+$0101	; [8] RECORD
 20023 970C			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 20024 = 988D			PLAYSCREEN.WIDTH	= DATAORIGIN+$0101
 20025 = 988F			PLAYSCREEN.HEIGHT	= DATAORIGIN+$0103
 20026 = 9891			PLAYSCREEN.OFS	= DATAORIGIN+$0105
 20027 = 9895			adr.PLAYVAUS	= DATAORIGIN+$0109	; [8] RECORD
 20028 970C			.var PLAYVAUS	= adr.PLAYVAUS .word
 20029 = 9895			PLAYVAUS.WIDTH	= DATAORIGIN+$0109
 20030 = 9897			PLAYVAUS.HEIGHT	= DATAORIGIN+$010B
 20031 = 9899			PLAYVAUS.OFS	= DATAORIGIN+$010D
 20032 = 989D			adr.NORMAL	= DATAORIGIN+$0111	; [8] RECORD
 20033 970C			.var NORMAL	= adr.NORMAL .word
 20034 = 989D			NORMAL.WIDTH	= DATAORIGIN+$0111
 20035 = 989F			NORMAL.HEIGHT	= DATAORIGIN+$0113
 20036 = 98A1			NORMAL.OFS	= DATAORIGIN+$0115
 20037 = 98A5			adr.ENLARGED	= DATAORIGIN+$0119	; [8] RECORD
 20038 970C			.var ENLARGED	= adr.ENLARGED .word
 20039 = 98A5			ENLARGED.WIDTH	= DATAORIGIN+$0119
 20040 = 98A7			ENLARGED.HEIGHT	= DATAORIGIN+$011B
 20041 = 98A9			ENLARGED.OFS	= DATAORIGIN+$011D
 20042 = 98AD			adr.LASERS	= DATAORIGIN+$0121	; [8] RECORD
 20043 970C			.var LASERS	= adr.LASERS .word
 20044 = 98AD			LASERS.WIDTH	= DATAORIGIN+$0121
 20045 = 98AF			LASERS.HEIGHT	= DATAORIGIN+$0123
 20046 = 98B1			LASERS.OFS	= DATAORIGIN+$0125
 20047 = 98B5			adr.EXPLOSION	= DATAORIGIN+$0129	; [8] RECORD
 20048 970C			.var EXPLOSION	= adr.EXPLOSION .word
 20049 = 98B5			EXPLOSION.WIDTH	= DATAORIGIN+$0129
 20050 = 98B7			EXPLOSION.HEIGHT	= DATAORIGIN+$012B
 20051 = 98B9			EXPLOSION.OFS	= DATAORIGIN+$012D
 20052 = 98BD			adr.NEWVAUS	= DATAORIGIN+$0131	; [8] RECORD
 20053 970C			.var NEWVAUS	= adr.NEWVAUS .word
 20054 = 98BD			NEWVAUS.WIDTH	= DATAORIGIN+$0131
 20055 = 98BF			NEWVAUS.HEIGHT	= DATAORIGIN+$0133
 20056 = 98C1			NEWVAUS.OFS	= DATAORIGIN+$0135
 20057 = 98C5			adr.PRESENTS	= DATAORIGIN+$0139	; [8] RECORD
 20058 970C			.var PRESENTS	= adr.PRESENTS .word
 20059 = 98C5			PRESENTS.WIDTH	= DATAORIGIN+$0139
 20060 = 98C7			PRESENTS.HEIGHT	= DATAORIGIN+$013B
 20061 = 98C9			PRESENTS.OFS	= DATAORIGIN+$013D
 20062 = 98CD			adr.SOUNDFX	= DATAORIGIN+$0141	; [8] RECORD
 20063 970C			.var SOUNDFX	= adr.SOUNDFX .word
 20064 = 98CD			SOUNDFX.WIDTH	= DATAORIGIN+$0141
 20065 = 98CF			SOUNDFX.HEIGHT	= DATAORIGIN+$0143
 20066 = 98D1			SOUNDFX.OFS	= DATAORIGIN+$0145
 20067 = 98D5			adr.SHINEWALL	= DATAORIGIN+$0149	; [8] RECORD
 20068 970C			.var SHINEWALL	= adr.SHINEWALL .word
 20069 = 98D5			SHINEWALL.WIDTH	= DATAORIGIN+$0149
 20070 = 98D7			SHINEWALL.HEIGHT	= DATAORIGIN+$014B
 20071 = 98D9			SHINEWALL.OFS	= DATAORIGIN+$014D
 20072 = 98DD			adr.MINIVAUS	= DATAORIGIN+$0151	; [8] RECORD
 20073 970C			.var MINIVAUS	= adr.MINIVAUS .word
 20074 = 98DD			MINIVAUS.WIDTH	= DATAORIGIN+$0151
 20075 = 98DF			MINIVAUS.HEIGHT	= DATAORIGIN+$0153
 20076 = 98E1			MINIVAUS.OFS	= DATAORIGIN+$0155
 20077 = 98E5			adr.LEVELSEL	= DATAORIGIN+$0159	; [8] RECORD
 20078 970C			.var LEVELSEL	= adr.LEVELSEL .word
 20079 = 98E5			LEVELSEL.WIDTH	= DATAORIGIN+$0159
 20080 = 98E7			LEVELSEL.HEIGHT	= DATAORIGIN+$015B
 20081 = 98E9			LEVELSEL.OFS	= DATAORIGIN+$015D
 20082 = 98ED			adr.LETTERS	= DATAORIGIN+$0161	; [8] RECORD
 20083 970C			.var LETTERS	= adr.LETTERS .word
 20084 = 98ED			LETTERS.WIDTH	= DATAORIGIN+$0161
 20085 = 98EF			LETTERS.HEIGHT	= DATAORIGIN+$0163
 20086 = 98F1			LETTERS.OFS	= DATAORIGIN+$0165
 20087 = 98F5			adr.SHOOTS	= DATAORIGIN+$0169	; [8] RECORD
 20088 970C			.var SHOOTS	= adr.SHOOTS .word
 20089 = 98F5			SHOOTS.WIDTH	= DATAORIGIN+$0169
 20090 = 98F7			SHOOTS.HEIGHT	= DATAORIGIN+$016B
 20091 = 98F9			SHOOTS.OFS	= DATAORIGIN+$016D
 20092 = 98FD			adr.FLUX	= DATAORIGIN+$0171	; [8] RECORD
 20093 970C			.var FLUX	= adr.FLUX .word
 20094 = 98FD			FLUX.WIDTH	= DATAORIGIN+$0171
 20095 = 98FF			FLUX.HEIGHT	= DATAORIGIN+$0173
 20096 = 9901			FLUX.OFS	= DATAORIGIN+$0175
 20097 = 9905			adr.VAUS	= DATAORIGIN+$0179	; [13] RECORD
 20098 970C			.var VAUS	= adr.VAUS .word
 20099 = 9905			VAUS.X	= DATAORIGIN+$0179
 20100 = 9906			VAUS.Y	= DATAORIGIN+$017A
 20101 = 9907			VAUS.OLDX	= DATAORIGIN+$017B
 20102 = 9909			VAUS.OLDY	= DATAORIGIN+$017D
 20103 = 990B			VAUS.OLDLEN	= DATAORIGIN+$017F
 20104 = 990D			VAUS.WIDTH	= DATAORIGIN+$0181
 20105 = 990E			VAUS.HEIGHT	= DATAORIGIN+$0182
 20106 = 990F			VAUS.FLASH	= DATAORIGIN+$0183
 20107 = 9910			VAUS.IFLASH	= DATAORIGIN+$0184
 20108 = 9911			VAUS.LETTER	= DATAORIGIN+$0185
 20109 = 9912			adr.PATTERN	= DATAORIGIN+$0186	; [8] RECORD
 20110 970C			.var PATTERN	= adr.PATTERN .word
 20111 = 9912			PATTERN.WIDTH	= DATAORIGIN+$0186
 20112 = 9914			PATTERN.HEIGHT	= DATAORIGIN+$0188
 20113 = 9916			PATTERN.OFS	= DATAORIGIN+$018A
 20114 = 991A			adr.PATTERN0	= DATAORIGIN+$018E	; [8] RECORD
 20115 970C			.var PATTERN0	= adr.PATTERN0 .word
 20116 = 991A			PATTERN0.WIDTH	= DATAORIGIN+$018E
 20117 = 991C			PATTERN0.HEIGHT	= DATAORIGIN+$0190
 20118 = 991E			PATTERN0.OFS	= DATAORIGIN+$0192
 20119 = 9922			adr.PATTERN1	= DATAORIGIN+$0196	; [8] RECORD
 20120 970C			.var PATTERN1	= adr.PATTERN1 .word
 20121 = 9922			PATTERN1.WIDTH	= DATAORIGIN+$0196
 20122 = 9924			PATTERN1.HEIGHT	= DATAORIGIN+$0198
 20123 = 9926			PATTERN1.OFS	= DATAORIGIN+$019A
 20124 = 992A			adr.PATTERN2	= DATAORIGIN+$019E	; [8] RECORD
 20125 970C			.var PATTERN2	= adr.PATTERN2 .word
 20126 = 992A			PATTERN2.WIDTH	= DATAORIGIN+$019E
 20127 = 992C			PATTERN2.HEIGHT	= DATAORIGIN+$01A0
 20128 = 992E			PATTERN2.OFS	= DATAORIGIN+$01A2
 20129 = 9932			adr.PATTERN3	= DATAORIGIN+$01A6	; [8] RECORD
 20130 970C			.var PATTERN3	= adr.PATTERN3 .word
 20131 = 9932			PATTERN3.WIDTH	= DATAORIGIN+$01A6
 20132 = 9934			PATTERN3.HEIGHT	= DATAORIGIN+$01A8
 20133 = 9936			PATTERN3.OFS	= DATAORIGIN+$01AA
 20134 = 993A			adr.PATTERN4	= DATAORIGIN+$01AE	; [8] RECORD
 20135 970C			.var PATTERN4	= adr.PATTERN4 .word
 20136 = 993A			PATTERN4.WIDTH	= DATAORIGIN+$01AE
 20137 = 993C			PATTERN4.HEIGHT	= DATAORIGIN+$01B0
 20138 = 993E			PATTERN4.OFS	= DATAORIGIN+$01B2
 20139 = 9942			STATUS	= DATAORIGIN+$01B6
 20140 = 9943			SUCCESS	= DATAORIGIN+$01B7
 20141 = 9944			REMAIN_BLK	= DATAORIGIN+$01B8
 20142 = 9945			TOTALWALL	= DATAORIGIN+$01B9
 20143 = 9946			adr.SCORE	= DATAORIGIN+$01BA	; [27] RECORD
 20144 970C			.var SCORE	= adr.SCORE .word
 20145 = 9946			adr.SCORE.PLAYER	= [DATAORIGIN+$01BA] .array [3] .dword
 20146 970C			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 20147 = 9952			adr.SCORE.WALL_N	= [DATAORIGIN+$01C6] .array [3]
 20148 970C			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 20149 = 9955			adr.SCORE.LIVES	= [DATAORIGIN+$01C9] .array [3]
 20150 970C			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 20151 = 9958			SCORE.HISCORE	= DATAORIGIN+$01CC
 20152 = 995C			SCORE.PL_NUMB	= DATAORIGIN+$01D0
 20153 = 995D			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01D1] .array [3]
 20154 970C			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 20155 = 9960			SCORE.ABORTPLAY	= DATAORIGIN+$01D4
 20156 = 9961			CUR_PLAYER	= DATAORIGIN+$01D5
 20157 = 9962			adr.SHINEREC	= DATAORIGIN+$01D6	; [5] RECORD
 20158 970C			.var SHINEREC	= adr.SHINEREC .word
 20159 = 9962			SHINEREC.XB	= DATAORIGIN+$01D6
 20160 = 9963			SHINEREC.YB	= DATAORIGIN+$01D7
 20161 = 9964			SHINEREC.FRAME	= DATAORIGIN+$01D8
 20162 = 9965			SHINEREC.BLOCK	= DATAORIGIN+$01D9
 20163 = 9966			SHINEREC.ACTIVE	= DATAORIGIN+$01DA
 20164 = 9967			LV	= DATAORIGIN+$01DB
 20165 = 9969			TRAINER	= DATAORIGIN+$01DD
 20166 = 996A			adr.LETT	= DATAORIGIN+$01DE	; [17] RECORD
 20167 970C			.var LETT	= adr.LETT .word
 20168 = 996A			LETT.X	= DATAORIGIN+$01DE
 20169 = 996B			LETT.Y	= DATAORIGIN+$01DF
 20170 = 996C			LETT.TYP	= DATAORIGIN+$01E0
 20171 = 996E			LETT.FRAME	= DATAORIGIN+$01E2
 20172 = 996F			LETT.SUBFRAME	= DATAORIGIN+$01E3
 20173 = 9970			LETT.ACTIVE	= DATAORIGIN+$01E4
 20174 = 9971			LETT.INCOMING	= DATAORIGIN+$01E5
 20175 = 9973			LETT.NEXTX	= DATAORIGIN+$01E7
 20176 = 9975			LETT.NEXTY	= DATAORIGIN+$01E9
 20177 = 9977			LETT.NEXTTYPE	= DATAORIGIN+$01EB
 20178 = 9979			LETT.LAST	= DATAORIGIN+$01ED
 20179 = 997B			adr.FIRE	= DATAORIGIN+$01EF	; [5] RECORD
 20180 970C			.var FIRE	= adr.FIRE .word
 20181 = 997B			FIRE.X	= DATAORIGIN+$01EF
 20182 = 997C			FIRE.Y	= DATAORIGIN+$01F0
 20183 = 997D			FIRE.SHOT	= DATAORIGIN+$01F1
 20184 = 997E			FIRE.AVL	= DATAORIGIN+$01F2
 20185 = 997F			FIRE.NW	= DATAORIGIN+$01F3
 20186 = 9980			BALLS_IN_PLAY	= DATAORIGIN+$01F4
 20187 = 9981			SCRFLUX	= DATAORIGIN+$01F5
 20188 = 9982			SCRFLUXCNT	= DATAORIGIN+$01F6
 20189 = 9983			SOUND_ON	= DATAORIGIN+$01F7
 20190 = 9984			HLP	= DATAORIGIN+$01F8
 20191 = 9986			F_HLP	= DATAORIGIN+$01FA
 20192 = 998A			adr.DEF_PAL	= [DATAORIGIN+$01FE] .array [768]
 20193 970C			.var DEF_PAL	= adr.DEF_PAL .word
 20194 = C000			adr.ROW	= $C000
 20195 970C			.var ROW	= adr.ROW .word
 20196 = C200			adr.TMP	= $C200
 20197 970C			.var TMP	= adr.TMP .word
 20198 = C300			adr.MODY	= $C300
 20199 970C			.var MODY	= adr.MODY .word
 20200 = C400			adr.MODX	= $C400
 20201 970C			.var MODX	= adr.MODX .word
 20202 = D800			adr.WALL_P	= $D800
 20203 970C			.var WALL_P	= adr.WALL_P .word
 20204 = DB00			adr.WALL	= $DB00
 20205 970C			.var WALL	= adr.WALL .word
 20206 = DC00			adr.ALL_WALLS	= $DC00
 20207 970C			.var ALL_WALLS	= adr.ALL_WALLS .word
 20208 = D20A			RND	= $D20A
 20209 970C			@exit
 20210
 20211 970C A2 00		@halt	ldx #$00
 20212 970E 9A				txs
 20213
 20214 					.ifdef MAIN.@DEFINES.ROMOFF
 20215 970F EE 01 D3			inc portb
 20216 					.fi
 20217
 20218 9712 A0 01			ldy #$01
 20219
 20220 9714 60				rts
 20221
 20222 				; ------------------------------------------------------------
 20223
 20224 9715			.local	@DEFINES
 20225 9715			ATARI
 20226 9715			CPU_6502
 20227 9715			ROMOFF
 20228 				.endl
 20229
 20230 9715			.local	@RESOURCE
 20231 				.endl
 20232
 20233 = 9715 6A 98		MOUS
 20233 = 9717 00 B1		BLT
 20233 = 9719 00 B1		BLT.SRC_ADR
 20233 = 971B 06 B1		BLT.DST_ADR
 20233 = 971D 77 98		VBXE_RAM
 20233 = 971F 8E 10		FLASH
 20233 = 9721 99 10		SCORE_WALL
 20233 = 9723 AF 10		EMERG_DEV
 20233 = 9725 B8 10		COLORBLOCK
 20233 = 9727 C2 10		POS_DIGIT
 20233 = 9729 C6 10		DIGITS
 20233 = 972B D1 10		LEVEL
 20233 = 972D DD 10		LETTER_DIS
 20233 = 972F 85 98		BALLDATA
 20233 = 9731 8D 98		PLAYSCREEN
 20233 = 9733 95 98		PLAYVAUS
 20233 = 9735 9D 98		NORMAL
 20233 = 9737 A5 98		ENLARGED
 20233 = 9739 AD 98		LASERS
 20233 = 973B B5 98		EXPLOSION
 20233 = 973D BD 98		NEWVAUS
 20233 = 973F C5 98		PRESENTS
 20233 = 9741 CD 98		SOUNDFX
 20233 = 9743 D5 98		SHINEWALL
 20233 = 9745 DD 98		MINIVAUS
 20233 = 9747 E5 98		LEVELSEL
 20233 = 9749 ED 98		LETTERS
 20233 = 974B F5 98		SHOOTS
 20233 = 974D FD 98		FLUX
 20233 = 974F 05 99		VAUS
 20233 = 9751 12 99		PATTERN
 20233 = 9753 1A 99		PATTERN0
 20233 = 9755 22 99		PATTERN1
 20233 = 9757 2A 99		PATTERN2
 20233 = 9759 32 99		PATTERN3
 20233 = 975B 3A 99		PATTERN4
 20233 = 975D 46 99		SCORE
 20233 = 975F 46 99		SCORE.PLAYER
 20233 = 9761 52 99		SCORE.WALL_N
 20233 = 9763 55 99		SCORE.LIVES
 20233 = 9765 5D 99		SCORE.ROUNDSEL
 20233 = 9767 62 99		SHINEREC
 20233 = 9769 6A 99		LETT
 20233 = 976B 7B 99		FIRE
 20233 = 976D 8A 99		DEF_PAL
 20233 = 976F 00 C0		ROW
 20233 = 9771 00 C2		TMP
 20233 = 9773 00 C3		MODY
 20233 = 9775 00 C4		MODX
 20233 = 9777 00 D8		WALL_P
 20233 = 9779 00 DB		WALL
 20233 = 977B 00 DC		ALL_WALLS
 20233 				.endl							; MAIN
 20234
 20235 				; ------------------------------------------------------------
 20236 				; ------------------------------------------------------------
 20237
 20238 				.macro	UNITINITIALIZATION
 20239 				
 20240 					.ifdef MAIN.SYSTEM.@UnitInit
 20241 					jsr MAIN.SYSTEM.@UnitInit
 20242 					.fi
 20243 				
 20244 					.ifdef MAIN.ATARI.@UnitInit
 20245 					jsr MAIN.ATARI.@UnitInit
 20246 					.fi
 20247 				
 20248 					.ifdef MAIN.CRT.@UnitInit
 20249 					jsr MAIN.CRT.@UnitInit
 20250 					.fi
 20251 				
 20252 					.ifdef MAIN.TYPES.@UnitInit
 20253 					jsr MAIN.TYPES.@UnitInit
 20254 					.fi
 20255 				
 20256 					.ifdef MAIN.GRAPH.@UnitInit
 20257 					jsr MAIN.GRAPH.@UnitInit
 20258 					.fi
 20259 				
 20260 					.ifdef MAIN.VBXE.@UnitInit
 20261 					jsr MAIN.VBXE.@UnitInit
 20262 					.fi
 20263 				
 20264 					.ifdef MAIN.JOYSTICK.@UnitInit
 20265 					jsr MAIN.JOYSTICK.@UnitInit
 20266 					.fi
 20267 				.endm
 20268
 20269 				; ------------------------------------------------------------
 20270
 20271 					ift .SIZEOF(MAIN.SYSTEM) > 0
 20272 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 20272 				SYSTEM: $1B45..$26B4
 20273 					eif
 20274
 20275 					ift .SIZEOF(MAIN.ATARI) > 0
 20276 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 20277 					eif
 20278
 20279 					ift .SIZEOF(MAIN.CRT) > 0
 20280 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 20281 					eif
 20282
 20283 					ift .SIZEOF(MAIN.TYPES) > 0
 20284 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 20285 					eif
 20286
 20287 					ift .SIZEOF(MAIN.GRAPH) > 0
 20288 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 20288 				GRAPH: $26B5..$26B6
 20289 					eif
 20290
 20291 					ift .SIZEOF(MAIN.VBXE) > 0
 20292 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 20292 				VBXE: $26B7..$2B52
 20293 					eif
 20294
 20295 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 20296 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 20296 				JOYSTICK: $2B53..$2B5A
 20297 					eif
 20298
 20299 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 20299 				CODE: $1000..$9714
 20300
 20301 					ift .SIZEOF(MAIN.@RESOURCE)>0
 20302 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 20303 					eif
 20304
 20305 977D			@end
 20306
 20307 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 20307 				VARS: $9715..$977C
 20308
 20309 				; ------------------------------------------------------------
 20310
 20311 = 977D				?adr = *
 20312 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 20313 = 978C				?adr = ?old_adr
 20314 					eif
 20315
 20316 					org ?adr
 20317 = 978C				?old_adr = *
 20318
 20319 978C			DATAORIGIN
 20320 978C-97ED> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20321 97A4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20322 97BC 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20323 97D4 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
 20324 97EC 00 17		.by  $00 $17
 20325
 20326 = 0062			VARINITSIZE	= *-DATAORIGIN
 20327 = 0798			VARDATASIZE	= 1944
 20328
 20329 = 9F24			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 20330
 20331 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 20331 				DATA: $978C..$9F24
 20332
 20333 					ert DATAORIGIN<@end,'DATA memory overlap'
 20334
 20335 02E0-02E1> B8 1A			run START
 20336
 20337 				; ------------------------------------------------------------
 20338
 20339 				.macro	STATICDATA
 20340 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 20341 				.by  $50 $61 $75 $73 $65 $64 $03 $02  $02 $01 $01 $02 $02 $03 $03 $03  $03 $03 $03 $03 $02 $03 $28 $14
 20342 				.by  $14 $28 $50 $50 $A0 $A0 $40 $50  $50 $50 $28 $28 $A0 $A0 $18 $18  $0C $18 $30 $30 $60 $60 $C0 $C0
 20343 				.by  $C0 $C0 $18 $0C $C0 $C0 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 20344 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 20345 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 20346 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 20347 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 20348 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 20349 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 20350 				.endm
 20351
 20352 					end
