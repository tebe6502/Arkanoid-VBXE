mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/27] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 1000			CODEORIGIN	= $1000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 10BB				RCDATA 'walls.dat' LEVELS_WALL 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 10BB				org RESORIGIN
    10 10BB 20 87 10		mcpy	jsr sys.off
    12 10BE A9 DC 85 8A A9 10 +  MWA #DATA EDX
    12 10C6 A9 00 85 8E A9 DC +  MWA #MAIN.LEVELS_WALL ECX
    12 10CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 10D6 20 2B 10		 JSR RESOURCE.MEMCPY
    14 10D9 4C AB 10			jmp sys.on
    16 10DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.LEVELS_WALL,'..',main.LEVELS_WALL+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 10			ini mcpy
Source: arkanoid_vbxe.a65
   119 31DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 31DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 31DC				org RESORIGIN
    22 10BB			lbmp
    25 10BB-1552> 20 00 10		jsr vbxe_detect
    26 10BE 90 4B			bcc ok
    28 10C0 A0 10		 LDY> NOTVBXE
    28 10C2 A9 DF		 LDA< NOTVBXE
    28 10C4 20 6C 10		 JSR RESOURCE.@PRINT
    29 10C7 A0 10		 LDY> _EOL
    29 10C9 A9 F0		 LDA< _EOL
    29 10CB 20 6C 10		 JSR RESOURCE.@PRINT
    30 10CE A0 10		 LDY> ANYKEY
    30 10D0 A9 F1		 LDA< ANYKEY
    30 10D2 20 6C 10		 JSR RESOURCE.@PRINT
    32 10D5 AD 0F D2		keypres	lda $d20f
    33 10D8 29 04			and #4
    34 10DA D0 F9			bne keypres
    36 10DC 68				pla
    37 10DD 68				pla
    38 10DE 60				rts
    40 10DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 10F0 9B			_eol	dta $9b
    42 10F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 110B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 110B A9 B8		        lda     #%1000+$B0
     3 110D A0 5E		        ldy     #FX_MEMC
     4 110F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1111 A9 01		        lda     #1
     3 1113 A0 45		        ldy     #FX_PSEL
     4 1115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 1117 A9 00		        lda     #0
     3 1119 A0 44		        ldy     #FX_CSEL
     4 111B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 111D A2 00			ldx #0
    55 111F 20 47 11		paloop	jsr pal
    56 1122 85 92			sta ztmp
    57 1124 20 47 11			jsr pal
    58 1127 85 93			sta ztmp+1
    59 1129 20 47 11			jsr pal
    60 112C 85 94			sta ztmp+2
    61 112E 20 47 11			jsr pal
    63 1131 A5 94			lda ztmp+2
     2 1133 A0 46		        ldy     #FX_CR
     3 1135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 1137 A5 93			lda ztmp+1
     2 1139 A0 47		        ldy     #FX_CG
     3 113B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 113D A5 92			lda ztmp
     2 113F A0 48		        ldy     #FX_CB
     3 1141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 1143 E8				inx
    73 1144 D0 D9			bne paloop
    75 1146 60				rts
    77 1147 AD 53 11		pal	lda cpal
    78 = 1148			paladr	equ *-2
    79 114A EE 48 11 D0 03 EE + 	inw paladr
    80 1152 60				rts
    82 1153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 10			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0014			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 1553				org RESORIGIN
     2 10BB-10C1> A9 94		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 10C1 60				rts
    94 02E2-02E3> BB 10			ini RESORIGIN
    96 10C2				org main.VBXE_DATA%$1000+$B000
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0003				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0015				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 95		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0006				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0010				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 96		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0013				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 97		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0020				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0029				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 98		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 002D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0036				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 99		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0039				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0043				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9A		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0046				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0050				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9B		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0053				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9C		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0060				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0069				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9D		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 006D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0076				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9E		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0079				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0083				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 9F		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0086				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0090				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0093				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 00F9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0103				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 A9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0106				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0110				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0113				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0120				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0129				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AC		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 012D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0136				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AD		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0139				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0143				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AE		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0146				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0150				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 AF		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0153				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B0		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0160				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0169				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B1		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 016D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0176				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B2		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0179				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0183				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B3		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0186				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0190				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B4		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 0193				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B5		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01A0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B6		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01AD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B7		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01B9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B8		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01C6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 B9		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01D3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BA		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01E0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 10BB-10C1> A9 BB		        lda     #?BNK+$80
     3 10BD A0 5F		        ldy     #FX_MEMS
     4 10BF 91 80		        sta     (fxptr),y
    99 10C1 60				RTS
    99 02E2-02E3> BB 10			INI RESORIGIN
    99 10C2				ORG $B000
    99 = 01ED				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B380				org RESORIGIN
     2 10BB-10C5> A9 00		        lda     #0
     3 10BD A0 5E		        ldy     #FX_MEMC
     4 10BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 10C1 A0 5F		        ldy     #FX_MEMS
     3 10C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 10C5 60				rts
   125 02E2-02E3> BB 10			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $014A00..$03B37F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 10C6				org CODEORIGIN
   125
   126 1000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 1000-9ADC> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 1018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 1030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 1048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 1060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 1078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 1090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 10A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 10B5			RTLIB
   131 10B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $10B5..$1A9B
   138
   139 				; ------------------------------------------------------------
   140
   141 1A9C			START
   142 1A9C BA				tsx
   143 1A9D 8E 6D 9A			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 1AA0				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 1AA0			.local	rominit
     5
     6 1AA0 78			        sei
     7 1AA1 A9 00		        lda #%00000000
     8 1AA3 8D 0E D4		        sta NMIEN       ;$D40E
     9 1AA6 A9 FE		        lda #%11111110
    10 1AA8 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 1AAB A2 C8		        ldx #<nmiint
    33 1AAD A0 1A		        ldy #>nmiint
    34 1AAF 8E FA FF		        stx NMIVEC      ;$FFFA
    35 1AB2 8C FB FF		        sty NMIVEC+1
    36
    37 1AB5 A2 D2		        ldx #<irqint
    38 1AB7 A0 1A		        ldy #>irqint
    39 1AB9 8E FE FF		        stx IRQVEC      ;$FFFE
    40 1ABC 8C FF FF		        sty IRQVEC+1
    41
    42 1ABF A9 40		        lda #%01000000
    43 1AC1 8D 0E D4		        sta NMIEN       ;$D40E
    44 1AC4 58			        cli
    45
    46 1AC5 4C F3 1A			jmp skp
    47
    48
    49 1AC8 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 1ACB 10 03		        spl
    51 1ACD 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 1AD0 38			        sec
    54 1AD1 24			        .byte $24        ;BIT $18
    55
    56 1AD2 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 1AD3 EE 01 D3		        inc PORTB       ;$D301
    61
    62 1AD6 48			        pha
    63 1AD7 8A			        txa
    64 1AD8 48			        pha
    65 1AD9 BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 1ADA A9 1A		        lda #>iret      ;adres procedury iret
    70 1ADC 48			        pha
    71 1ADD A9 EC		        lda #<iret
    72 1ADF 48			        pha
    73 1AE0 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 1AE3 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 1AE4 90 03		        scc
    79 1AE6 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 1AE9 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 1AEC 68			iret	pla
    83 1AED AA				tax
    84 1AEE 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 1AEF CE 01 D3		        dec PORTB       ;$D301
    89 1AF2 40			        rti
    90
    91 1AF3			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 0759			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9B4B			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 1AF3				m@init
Macro: M@INIT [Source: macros.asm]
     2 1AF3 A0 4B			ldy <VADR
     3 1AF5 A2 9B			ldx >VADR
     5 1AF7 A9 00			lda #$00
     6 1AF9 F0 07			beq skp_
     8 1AFB 99 00 10		clr	sta adr: $1000,y
    10 1AFE C8				iny
    11 1AFF D0 04			bne skp
    12 1B01 E8				inx
    13 1B02 8E FD 1A		skp_	stx adr+1
    15 1B05 E0 A2		skp	cpx >VADR+VLEN
    16 1B07 D0 F2			bne clr
    17 1B09 C0 A4			cpy <VADR+VLEN
    18 1B0B D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 1B0D A2 00			ldx #$00					; X = 0
   169 1B0F 86 82			stx bp						; BP = 0
   170
   171 1B11 8E 08 D2			stx audctl					; reset POKEY
   172 1B14 8E 18 D2			stx audctl+$10
   173 1B17 A9 03			lda #3
   174 1B19 8D 0F D2			sta skctl
   175 1B1C 8D 1F D2			sta skctl+$10
   176
   177 1B1F CA				dex						; X = 255
   178
   179 1B20				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 1B20 20 7B 26			jsr MAIN.SYSTEM.@UnitInit
    23 1B23 20 02 2B			jsr MAIN.VBXE.@UnitInit
   180
   181 1B26			.local	MAIN						; PROCEDURE
   182
   183 1B26 4C 69 9A			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 1B29			.local	SYSTEM						; UNIT
   188
   189 1B29			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 1B29 B5 96			lda :STACKORIGIN,x
   196 1B2B 85 8A			sta A
   197 1B2D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 1B2F 85 8B			sta A+1
   199 1B31 CA				dex
   200 1B32			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 1B32 A0 00			ldy #0
   205 1B34 B1 8A 85 92			mva (:edx),y Result
   206
   207 1B38			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 1B38 E8				inx
   215 1B39 A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 1B3D 60				rts						; ret
   231 				.endl
   232
   233 1B3E			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 1B3E			.local	@010184000
   235
   236 				; -------------------  ASM Block 00000008  -------------------
   237
   238 1B3E A5 8B			lda :edx+1
   239 1B40 10 0D			bpl @+
   240
   241 1B42 A9 00			lda #$00
   242 1B44 38 E5 8A			sub :edx
   243 1B47 85 8A			sta :edx
   244 1B49 A9 00			lda #$00
   245 1B4B E5 8B			sbc :edx+1
   246 1B4D 85 8B			sta :edx+1
   247 				@
   248 1B4F 85 93			sta Result+1
   249
   250 1B51 A5 8A 85 92			mva :edx Result
   251
   252 1B55			@exit
   253
   254 				; ------------------------------------------------------------
   255
   256 = 008A			X	= :EDX
   257 = 0092			RESULT	= :STACKORIGIN-4
   258
   259 1B55 60				rts						; ret
   260 				.endl
   261 				.endl							; overload
   262
   263 1B56			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   264 1B56			.local	@010185000
   265
   266 				; -------------------  ASM Block 00000009  -------------------
   267
   268 1B56 A5 8D			lda :edx+3
   269 1B58 10 03			spl
   270 1B5A 20 1C 11			jsr @negEDX
   271
   272 1B5D 85 95			sta Result+3
   273
   274 1B5F A5 8A 85 92			mva :edx Result
   275 1B63 A5 8B 85 93			mva :edx+1 Result+1
   276 1B67 A5 8C 85 94			mva :edx+2 Result+2
   277
   278 1B6B			@exit
   279
   280 				; ------------------------------------------------------------
   281
   282 = 008A			X	= :EDX
   283 = 0092			RESULT	= :STACKORIGIN-4
   284
   285 1B6B 60				rts						; ret
   286 				.endl
   287 				.endl							; overload
   288
   289 1B6C			.local	SQRT						; FUNCTION | OVERLOAD
   290 1B6C			.local	@010185000
   291
   292 				; optimize OK (SYSTEM), line = 801
   293
   294 1B6C AD F7 9A			lda X+3
   295 1B6F 30 0B			bmi @+
   296 1B71 0D F6 9A			ora X+2
   297 1B74 0D F5 9A			ora X+1
   298 1B77 0D F4 9A			ora X
   299 1B7A D0 11			jne l_0042
   300 				@
   301 1B7C A9 00			lda #$00
   302 1B7E 8D F8 9A			sta RESULT
   303 1B81 8D F9 9A			sta RESULT+1
   304 1B84 8D FA 9A			sta RESULT+2
   305 1B87 8D FB 9A			sta RESULT+3
   306 1B8A 4C 00 1E			jmp @exit
   307 1B8D			l_0042
   308
   309 				; optimize OK (SYSTEM), line = 803
   310
   311 1B8D A9 FE			lda <C
   312 1B8F 8D FC 9A			sta SP
   313 1B92 A9 9A			lda >C
   314 1B94 8D FD 9A			sta SP+1
   315
   316 				; optimize OK (SYSTEM), line = 805
   317
   318 1B97 AD F4 9A			lda X
   319 1B9A 85 8E			sta :FPMAN0
   320 1B9C AD F5 9A			lda X+1
   321 1B9F 85 8F			sta :FPMAN1
   322 1BA1 AD F6 9A			lda X+2
   323 1BA4 85 90			sta :FPMAN2
   324 1BA6 AD F7 9A			lda X+3
   325 1BA9 85 91			sta :FPMAN3
   326 1BAB 20 E7 17			jsr @I2F
   327 1BAE A5 8E			lda :FPMAN0
   328 1BB0 8D FE 9A			sta C
   329 1BB3 A5 8F			lda :FPMAN1
   330 1BB5 8D FF 9A			sta C+1
   331 1BB8 A5 90			lda :FPMAN2
   332 1BBA 8D 00 9B			sta C+2
   333 1BBD A5 91			lda :FPMAN3
   334 1BBF 8D 01 9B			sta C+3
   335
   336 				; optimize OK (SYSTEM), line = 807
   337
   338 1BC2 C9 3F			cmp #$3F
   339 1BC4 D0 13			bne @+
   340 1BC6 AD 00 9B			lda C+2
   341 1BC9 C9 80			cmp #$80
   342 1BCB D0 0C			bne @+
   343 1BCD AD FF 9A			lda C+1
   344 1BD0 C9 00			cmp #$00
   345 1BD2 D0 05			bne @+
   346 1BD4 AD FE 9A			lda C
   347 1BD7 C9 01			cmp #$01
   348 				@
   349 1BD9 90 3A			jcc l_0061
   350 1BDB AD FE 9A			lda C
   351 1BDE 85 9F			sta :STACKORIGIN+9
   352 1BE0 AD FF 9A			lda C+1
   353 1BE3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   354 1BE5 AD 00 9B			lda C+2
   355 1BE8 38 E9 80			sub #$80
   356 1BEB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   357 1BED AD 01 9B			lda C+3
   358 1BF0 E9 3F			sbc #$3F
   359 1BF2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   360 1BF4 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
   361 1BF6 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
   362 1BF8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
   363 1BFA 66 9F			ror :STACKORIGIN+9
   364 1BFC A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   365 1BFE 18 69 80			add #$80
   366 1C01 8D 00 9B			sta C+2
   367 1C04 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   368 1C06 69 3F			adc #$3F
   369 1C08 8D 01 9B			sta C+3
   370 1C0B A5 9F			lda :STACKORIGIN+9
   371 1C0D 8D FE 9A			sta C
   372 1C10 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   373 1C12 8D FF 9A			sta C+1
   374 1C15			l_0061
   375
   376 				; optimize OK (SYSTEM), line = 809
   377
   378 1C15 AC FC 9A 84 84 AC + 	mwy SP :bp2
   379 1C1F A0 00			ldy #$00
   380 1C21 B1 84			lda (:bp2),y
   381 1C23 8D F8 9A			sta RESULT
   382 1C26 C8				iny
   383 1C27 B1 84			lda (:bp2),y
   384 1C29 8D F9 9A			sta RESULT+1
   385 1C2C C8				iny
   386 1C2D B1 84			lda (:bp2),y
   387 1C2F 8D FA 9A			sta RESULT+2
   388 1C32 C8				iny
   389 1C33 B1 84			lda (:bp2),y
   390 1C35 8D FB 9A			sta RESULT+3
   391
   392 				; optimize OK (SYSTEM), line = 811
   393
   394 1C38 AD F4 9A			lda X
   395 1C3B 85 8E			sta :FPMAN0
   396 1C3D AD F5 9A			lda X+1
   397 1C40 85 8F			sta :FPMAN1
   398 1C42 AD F6 9A			lda X+2
   399 1C45 85 90			sta :FPMAN2
   400 1C47 AD F7 9A			lda X+3
   401 1C4A 85 91			sta :FPMAN3
   402 1C4C 20 E7 17			jsr @I2F
   403 1C4F A5 8E			lda :FPMAN0
   404 1C51 85 86			sta :FP1MAN0
   405 1C53 A5 8F			lda :FPMAN1
   406 1C55 85 87			sta :FP1MAN1
   407 1C57 A5 90			lda :FPMAN2
   408 1C59 85 88			sta :FP1MAN2
   409 1C5B A5 91			lda :FPMAN3
   410 1C5D 85 89			sta :FP1MAN3
   411 1C5F AD F8 9A			lda RESULT
   412 1C62 85 8A			sta :FP2MAN0
   413 1C64 AD F9 9A			lda RESULT+1
   414 1C67 85 8B			sta :FP2MAN1
   415 1C69 AD FA 9A			lda RESULT+2
   416 1C6C 85 8C			sta :FP2MAN2
   417 1C6E AD FB 9A			lda RESULT+3
   418 1C71 85 8D			sta :FP2MAN3
   419 1C73 20 AE 16			jsr @FDIV
   420 1C76 A5 8E			lda :FPMAN0
   421 1C78 85 8A			sta :FP2MAN0
   422 1C7A A5 8F			lda :FPMAN1
   423 1C7C 85 8B			sta :FP2MAN1
   424 1C7E A5 90			lda :FPMAN2
   425 1C80 85 8C			sta :FP2MAN2
   426 1C82 A5 91			lda :FPMAN3
   427 1C84 85 8D			sta :FP2MAN3
   428 1C86 AD F8 9A			lda RESULT
   429 1C89 85 86			sta :FP1MAN0
   430 1C8B AD F9 9A			lda RESULT+1
   431 1C8E 85 87			sta :FP1MAN1
   432 1C90 AD FA 9A			lda RESULT+2
   433 1C93 85 88			sta :FP1MAN2
   434 1C95 AD FB 9A			lda RESULT+3
   435 1C98 85 89			sta :FP1MAN3
   436 1C9A 20 A1 14			jsr @FADD
   437 1C9D A5 8E			lda :FPMAN0
   438 1C9F 85 86			sta :FP1MAN0
   439 1CA1 A5 8F			lda :FPMAN1
   440 1CA3 85 87			sta :FP1MAN1
   441 1CA5 A5 90			lda :FPMAN2
   442 1CA7 85 88			sta :FP1MAN2
   443 1CA9 A5 91			lda :FPMAN3
   444 1CAB 85 89			sta :FP1MAN3
   445 1CAD A9 00			lda #$00
   446 1CAF 85 8A			sta :FP2MAN0
   447 1CB1 85 8B			sta :FP2MAN1
   448 1CB3 85 8C			sta :FP2MAN2
   449 1CB5 A9 3F			lda #$3F
   450 1CB7 85 8D			sta :FP2MAN3
   451 1CB9 20 0D 16			jsr @FMUL
   452 1CBC A5 8E			lda :FPMAN0
   453 1CBE 8D F8 9A			sta RESULT
   454 1CC1 A5 8F			lda :FPMAN1
   455 1CC3 8D F9 9A			sta RESULT+1
   456 1CC6 A5 90			lda :FPMAN2
   457 1CC8 8D FA 9A			sta RESULT+2
   458 1CCB A5 91			lda :FPMAN3
   459 1CCD 8D FB 9A			sta RESULT+3
   460
   461 				; optimize OK (SYSTEM), line = 812
   462
   463 1CD0 AD F4 9A			lda X
   464 1CD3 85 8E			sta :FPMAN0
   465 1CD5 AD F5 9A			lda X+1
   466 1CD8 85 8F			sta :FPMAN1
   467 1CDA AD F6 9A			lda X+2
   468 1CDD 85 90			sta :FPMAN2
   469 1CDF AD F7 9A			lda X+3
   470 1CE2 85 91			sta :FPMAN3
   471 1CE4 20 E7 17			jsr @I2F
   472 1CE7 A5 8E			lda :FPMAN0
   473 1CE9 85 86			sta :FP1MAN0
   474 1CEB A5 8F			lda :FPMAN1
   475 1CED 85 87			sta :FP1MAN1
   476 1CEF A5 90			lda :FPMAN2
   477 1CF1 85 88			sta :FP1MAN2
   478 1CF3 A5 91			lda :FPMAN3
   479 1CF5 85 89			sta :FP1MAN3
   480 1CF7 AD F8 9A			lda RESULT
   481 1CFA 85 8A			sta :FP2MAN0
   482 1CFC AD F9 9A			lda RESULT+1
   483 1CFF 85 8B			sta :FP2MAN1
   484 1D01 AD FA 9A			lda RESULT+2
   485 1D04 85 8C			sta :FP2MAN2
   486 1D06 AD FB 9A			lda RESULT+3
   487 1D09 85 8D			sta :FP2MAN3
   488 1D0B 20 AE 16			jsr @FDIV
   489 1D0E A5 8E			lda :FPMAN0
   490 1D10 85 8A			sta :FP2MAN0
   491 1D12 A5 8F			lda :FPMAN1
   492 1D14 85 8B			sta :FP2MAN1
   493 1D16 A5 90			lda :FPMAN2
   494 1D18 85 8C			sta :FP2MAN2
   495 1D1A A5 91			lda :FPMAN3
   496 1D1C 85 8D			sta :FP2MAN3
   497 1D1E AD F8 9A			lda RESULT
   498 1D21 85 86			sta :FP1MAN0
   499 1D23 AD F9 9A			lda RESULT+1
   500 1D26 85 87			sta :FP1MAN1
   501 1D28 AD FA 9A			lda RESULT+2
   502 1D2B 85 88			sta :FP1MAN2
   503 1D2D AD FB 9A			lda RESULT+3
   504 1D30 85 89			sta :FP1MAN3
   505 1D32 20 A1 14			jsr @FADD
   506 1D35 A5 8E			lda :FPMAN0
   507 1D37 85 86			sta :FP1MAN0
   508 1D39 A5 8F			lda :FPMAN1
   509 1D3B 85 87			sta :FP1MAN1
   510 1D3D A5 90			lda :FPMAN2
   511 1D3F 85 88			sta :FP1MAN2
   512 1D41 A5 91			lda :FPMAN3
   513 1D43 85 89			sta :FP1MAN3
   514 1D45 A9 00			lda #$00
   515 1D47 85 8A			sta :FP2MAN0
   516 1D49 85 8B			sta :FP2MAN1
   517 1D4B 85 8C			sta :FP2MAN2
   518 1D4D A9 3F			lda #$3F
   519 1D4F 85 8D			sta :FP2MAN3
   520 1D51 20 0D 16			jsr @FMUL
   521 1D54 A5 8E			lda :FPMAN0
   522 1D56 8D F8 9A			sta RESULT
   523 1D59 A5 8F			lda :FPMAN1
   524 1D5B 8D F9 9A			sta RESULT+1
   525 1D5E A5 90			lda :FPMAN2
   526 1D60 8D FA 9A			sta RESULT+2
   527 1D63 A5 91			lda :FPMAN3
   528 1D65 8D FB 9A			sta RESULT+3
   529
   530 				; optimize OK (SYSTEM), line = 813
   531
   532 1D68 AD F4 9A			lda X
   533 1D6B 85 8E			sta :FPMAN0
   534 1D6D AD F5 9A			lda X+1
   535 1D70 85 8F			sta :FPMAN1
   536 1D72 AD F6 9A			lda X+2
   537 1D75 85 90			sta :FPMAN2
   538 1D77 AD F7 9A			lda X+3
   539 1D7A 85 91			sta :FPMAN3
   540 1D7C 20 E7 17			jsr @I2F
   541 1D7F A5 8E			lda :FPMAN0
   542 1D81 85 86			sta :FP1MAN0
   543 1D83 A5 8F			lda :FPMAN1
   544 1D85 85 87			sta :FP1MAN1
   545 1D87 A5 90			lda :FPMAN2
   546 1D89 85 88			sta :FP1MAN2
   547 1D8B A5 91			lda :FPMAN3
   548 1D8D 85 89			sta :FP1MAN3
   549 1D8F AD F8 9A			lda RESULT
   550 1D92 85 8A			sta :FP2MAN0
   551 1D94 AD F9 9A			lda RESULT+1
   552 1D97 85 8B			sta :FP2MAN1
   553 1D99 AD FA 9A			lda RESULT+2
   554 1D9C 85 8C			sta :FP2MAN2
   555 1D9E AD FB 9A			lda RESULT+3
   556 1DA1 85 8D			sta :FP2MAN3
   557 1DA3 20 AE 16			jsr @FDIV
   558 1DA6 A5 8E			lda :FPMAN0
   559 1DA8 85 8A			sta :FP2MAN0
   560 1DAA A5 8F			lda :FPMAN1
   561 1DAC 85 8B			sta :FP2MAN1
   562 1DAE A5 90			lda :FPMAN2
   563 1DB0 85 8C			sta :FP2MAN2
   564 1DB2 A5 91			lda :FPMAN3
   565 1DB4 85 8D			sta :FP2MAN3
   566 1DB6 AD F8 9A			lda RESULT
   567 1DB9 85 86			sta :FP1MAN0
   568 1DBB AD F9 9A			lda RESULT+1
   569 1DBE 85 87			sta :FP1MAN1
   570 1DC0 AD FA 9A			lda RESULT+2
   571 1DC3 85 88			sta :FP1MAN2
   572 1DC5 AD FB 9A			lda RESULT+3
   573 1DC8 85 89			sta :FP1MAN3
   574 1DCA 20 A1 14			jsr @FADD
   575 1DCD A5 8E			lda :FPMAN0
   576 1DCF 85 86			sta :FP1MAN0
   577 1DD1 A5 8F			lda :FPMAN1
   578 1DD3 85 87			sta :FP1MAN1
   579 1DD5 A5 90			lda :FPMAN2
   580 1DD7 85 88			sta :FP1MAN2
   581 1DD9 A5 91			lda :FPMAN3
   582 1DDB 85 89			sta :FP1MAN3
   583 1DDD A9 00			lda #$00
   584 1DDF 85 8A			sta :FP2MAN0
   585 1DE1 85 8B			sta :FP2MAN1
   586 1DE3 85 8C			sta :FP2MAN2
   587 1DE5 A9 3F			lda #$3F
   588 1DE7 85 8D			sta :FP2MAN3
   589 1DE9 20 0D 16			jsr @FMUL
   590 1DEC A5 8E			lda :FPMAN0
   591 1DEE 8D F8 9A			sta RESULT
   592 1DF1 A5 8F			lda :FPMAN1
   593 1DF3 8D F9 9A			sta RESULT+1
   594 1DF6 A5 90			lda :FPMAN2
   595 1DF8 8D FA 9A			sta RESULT+2
   596 1DFB A5 91			lda :FPMAN3
   597 1DFD 8D FB 9A			sta RESULT+3
   598 1E00			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = 9AF4			X	= DATAORIGIN+$000B
   603 = 9AF8			RESULT	= DATAORIGIN+$000F
   604 = 9AFC			SP	= DATAORIGIN+$0013
   605 = 9AFE			C	= DATAORIGIN+$0015
   606
   607 = 9AF4			@VarData	= X
   608 = 000A			@VarDataSize	= 10
   609
   610 1E00 60				rts						; ret
   611 				.endl
   612 				.endl							; overload
   613
   614 1E01			.local	ARCTAN						; FUNCTION | OVERLOAD
   615 1E01			.local	@01018F000
   616
   617 				; optimize OK (SYSTEM), line = 904
   618
   619 1E01 A9 00			lda #$00
   620 1E03 8D 12 9B			sta SIGN
   621
   622 				; optimize OK (SYSTEM), line = 905
   623
   624 1E06 AD 02 9B			lda VALUE
   625 1E09 8D 0A 9B			sta X
   626 1E0C AD 03 9B			lda VALUE+1
   627 1E0F 8D 0B 9B			sta X+1
   628 1E12 AD 04 9B			lda VALUE+2
   629 1E15 8D 0C 9B			sta X+2
   630 1E18 AD 05 9B			lda VALUE+3
   631 1E1B 8D 0D 9B			sta X+3
   632
   633 				; optimize OK (SYSTEM), line = 906
   634
   635 1E1E A9 00			lda #$00
   636 1E20 8D 0E 9B			sta Y
   637 1E23 8D 0F 9B			sta Y+1
   638 1E26 8D 10 9B			sta Y+2
   639 1E29 8D 11 9B			sta Y+3
   640
   641 				; optimize OK (SYSTEM), line = 908
   642
   643 1E2C AD 05 9B			lda VALUE+3
   644 1E2F D0 0D			bne @+
   645 1E31 AD 04 9B			lda VALUE+2
   646 1E34 D0 08			bne @+
   647 1E36 AD 03 9B			lda VALUE+1
   648 1E39 D0 03			bne @+
   649 1E3B AD 02 9B			lda VALUE
   650 				@
   651 1E3E D0 11			jne l_00CB
   652
   653 				; optimize OK (SYSTEM), line = 909
   654
   655 1E40 A9 00			lda #$00
   656 1E42 8D 06 9B			sta RESULT
   657 1E45 8D 07 9B			sta RESULT+1
   658 1E48 8D 08 9B			sta RESULT+2
   659 1E4B 8D 09 9B			sta RESULT+3
   660 1E4E 4C 2A 22			jmp @exit
   661 1E51			l_00CB
   662
   663 				; optimize OK (SYSTEM), line = 912
   664
   665 1E51 AD 0D 9B			lda X+3
   666 1E54 10 0D			jpl l_00E9
   667
   668 				; optimize OK (SYSTEM), line = 913
   669
   670 1E56 A9 01			lda #$01
   671 1E58 8D 12 9B			sta SIGN
   672
   673 				; optimize OK (SYSTEM), line = 914
   674
   675 1E5B AD 0D 9B			lda X+3
   676 1E5E 49 80			eor #$80
   677 1E60 8D 0D 9B			sta X+3
   678 1E63			l_00E9
   679 1E63			l_00D9
   680
   681 				; optimize OK (SYSTEM), line = 917
   682
   683 1E63 A9 00			lda #$00
   684 1E65 85 8A			sta :FP2MAN0
   685 1E67 85 8B			sta :FP2MAN1
   686 1E69 A9 80			lda #$80
   687 1E6B 85 8C			sta :FP2MAN2
   688 1E6D A9 3F			lda #$3F
   689 1E6F 85 8D			sta :FP2MAN3
   690 1E71 AD 0A 9B			lda X
   691 1E74 85 86			sta :FP1MAN0
   692 1E76 AD 0B 9B			lda X+1
   693 1E79 85 87			sta :FP1MAN1
   694 1E7B AD 0C 9B			lda X+2
   695 1E7E 85 88			sta :FP1MAN2
   696 1E80 AD 0D 9B			lda X+3
   697 1E83 85 89			sta :FP1MAN3
   698 1E85 20 A6 14			jsr @FSUB
   699 1E88 A5 8E			lda :FPMAN0
   700 1E8A 85 9F			sta :STACKORIGIN+9
   701 1E8C A5 8F			lda :FPMAN1
   702 1E8E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   703 1E90 A5 90			lda :FPMAN2
   704 1E92 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   705 1E94 A5 91			lda :FPMAN3
   706 1E96 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   707 1E98 A9 00			lda #$00
   708 1E9A 85 8A			sta :FP2MAN0
   709 1E9C 85 8B			sta :FP2MAN1
   710 1E9E A9 80			lda #$80
   711 1EA0 85 8C			sta :FP2MAN2
   712 1EA2 A9 3F			lda #$3F
   713 1EA4 85 8D			sta :FP2MAN3
   714 1EA6 AD 0A 9B			lda X
   715 1EA9 85 86			sta :FP1MAN0
   716 1EAB AD 0B 9B			lda X+1
   717 1EAE 85 87			sta :FP1MAN1
   718 1EB0 AD 0C 9B			lda X+2
   719 1EB3 85 88			sta :FP1MAN2
   720 1EB5 AD 0D 9B			lda X+3
   721 1EB8 85 89			sta :FP1MAN3
   722 1EBA 20 A1 14			jsr @FADD
   723 1EBD A5 8E			lda :FPMAN0
   724 1EBF 85 8A			sta :FP2MAN0
   725 1EC1 A5 8F			lda :FPMAN1
   726 1EC3 85 8B			sta :FP2MAN1
   727 1EC5 A5 90			lda :FPMAN2
   728 1EC7 85 8C			sta :FP2MAN2
   729 1EC9 A5 91			lda :FPMAN3
   730 1ECB 85 8D			sta :FP2MAN3
   731 1ECD A5 9F			lda :STACKORIGIN+9
   732 1ECF 85 86			sta :FP1MAN0
   733 1ED1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   734 1ED3 85 87			sta :FP1MAN1
   735 1ED5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   736 1ED7 85 88			sta :FP1MAN2
   737 1ED9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   738 1EDB 85 89			sta :FP1MAN3
   739 1EDD 20 AE 16			jsr @FDIV
   740 1EE0 A5 8E			lda :FPMAN0
   741 1EE2 8D 0A 9B			sta X
   742 1EE5 A5 8F			lda :FPMAN1
   743 1EE7 8D 0B 9B			sta X+1
   744 1EEA A5 90			lda :FPMAN2
   745 1EEC 8D 0C 9B			sta X+2
   746 1EEF A5 91			lda :FPMAN3
   747 1EF1 8D 0D 9B			sta X+3
   748
   749 				; optimize OK (SYSTEM), line = 918
   750
   751 1EF4 AD 0A 9B			lda X
   752 1EF7 85 8A			sta :FP2MAN0
   753 1EF9 AD 0B 9B			lda X+1
   754 1EFC 85 8B			sta :FP2MAN1
   755 1EFE AD 0C 9B			lda X+2
   756 1F01 85 8C			sta :FP2MAN2
   757 1F03 AD 0D 9B			lda X+3
   758 1F06 85 8D			sta :FP2MAN3
   759 1F08 AD 0A 9B			lda X
   760 1F0B 85 86			sta :FP1MAN0
   761 1F0D AD 0B 9B			lda X+1
   762 1F10 85 87			sta :FP1MAN1
   763 1F12 AD 0C 9B			lda X+2
   764 1F15 85 88			sta :FP1MAN2
   765 1F17 AD 0D 9B			lda X+3
   766 1F1A 85 89			sta :FP1MAN3
   767 1F1C 20 0D 16			jsr @FMUL
   768 1F1F A5 8E			lda :FPMAN0
   769 1F21 8D 0E 9B			sta Y
   770 1F24 A5 8F			lda :FPMAN1
   771 1F26 8D 0F 9B			sta Y+1
   772 1F29 A5 90			lda :FPMAN2
   773 1F2B 8D 10 9B			sta Y+2
   774 1F2E A5 91			lda :FPMAN3
   775 1F30 8D 11 9B			sta Y+3
   776
   777 				; optimize OK (SYSTEM), line = 919
   778
   779 1F33 AD 0E 9B			lda Y
   780 1F36 85 8A			sta :FP2MAN0
   781 1F38 AD 0F 9B			lda Y+1
   782 1F3B 85 8B			sta :FP2MAN1
   783 1F3D AD 10 9B			lda Y+2
   784 1F40 85 8C			sta :FP2MAN2
   785 1F42 AD 11 9B			lda Y+3
   786 1F45 85 8D			sta :FP2MAN3
   787 1F47 A9 4A			lda #$4A
   788 1F49 85 86			sta :FP1MAN0
   789 1F4B A9 D7			lda #$D7
   790 1F4D 85 87			sta :FP1MAN1
   791 1F4F A9 3B			lda #$3B
   792 1F51 85 88			sta :FP1MAN2
   793 1F53 85 89			sta :FP1MAN3
   794 1F55 20 0D 16			jsr @FMUL
   795 1F58 A5 8E			lda :FPMAN0
   796 1F5A 85 86			sta :FP1MAN0
   797 1F5C A5 8F			lda :FPMAN1
   798 1F5E 85 87			sta :FP1MAN1
   799 1F60 A5 90			lda :FPMAN2
   800 1F62 85 88			sta :FP1MAN2
   801 1F64 A5 91			lda :FPMAN3
   802 1F66 85 89			sta :FP1MAN3
   803 1F68 A9 02			lda #$02
   804 1F6A 85 8A			sta :FP2MAN0
   805 1F6C A9 6E			lda #$6E
   806 1F6E 85 8B			sta :FP2MAN1
   807 1F70 A9 84			lda #$84
   808 1F72 85 8C			sta :FP2MAN2
   809 1F74 A9 3C			lda #$3C
   810 1F76 85 8D			sta :FP2MAN3
   811 1F78 20 A6 14			jsr @FSUB
   812 1F7B A5 8E			lda :FPMAN0
   813 1F7D 85 86			sta :FP1MAN0
   814 1F7F A5 8F			lda :FPMAN1
   815 1F81 85 87			sta :FP1MAN1
   816 1F83 A5 90			lda :FPMAN2
   817 1F85 85 88			sta :FP1MAN2
   818 1F87 A5 91			lda :FPMAN3
   819 1F89 85 89			sta :FP1MAN3
   820 1F8B AD 0E 9B			lda Y
   821 1F8E 85 8A			sta :FP2MAN0
   822 1F90 AD 0F 9B			lda Y+1
   823 1F93 85 8B			sta :FP2MAN1
   824 1F95 AD 10 9B			lda Y+2
   825 1F98 85 8C			sta :FP2MAN2
   826 1F9A AD 11 9B			lda Y+3
   827 1F9D 85 8D			sta :FP2MAN3
   828 1F9F 20 0D 16			jsr @FMUL
   829 1FA2 A5 8E			lda :FPMAN0
   830 1FA4 85 86			sta :FP1MAN0
   831 1FA6 A5 8F			lda :FPMAN1
   832 1FA8 85 87			sta :FP1MAN1
   833 1FAA A5 90			lda :FPMAN2
   834 1FAC 85 88			sta :FP1MAN2
   835 1FAE A5 91			lda :FPMAN3
   836 1FB0 85 89			sta :FP1MAN3
   837 1FB2 A9 FE			lda #$FE
   838 1FB4 85 8A			sta :FP2MAN0
   839 1FB6 A9 C1			lda #$C1
   840 1FB8 85 8B			sta :FP2MAN1
   841 1FBA A9 2F			lda #$2F
   842 1FBC 85 8C			sta :FP2MAN2
   843 1FBE A9 3D			lda #$3D
   844 1FC0 85 8D			sta :FP2MAN3
   845 1FC2 20 A1 14			jsr @FADD
   846 1FC5 A5 8E			lda :FPMAN0
   847 1FC7 85 86			sta :FP1MAN0
   848 1FC9 A5 8F			lda :FPMAN1
   849 1FCB 85 87			sta :FP1MAN1
   850 1FCD A5 90			lda :FPMAN2
   851 1FCF 85 88			sta :FP1MAN2
   852 1FD1 A5 91			lda :FPMAN3
   853 1FD3 85 89			sta :FP1MAN3
   854 1FD5 AD 0E 9B			lda Y
   855 1FD8 85 8A			sta :FP2MAN0
   856 1FDA AD 0F 9B			lda Y+1
   857 1FDD 85 8B			sta :FP2MAN1
   858 1FDF AD 10 9B			lda Y+2
   859 1FE2 85 8C			sta :FP2MAN2
   860 1FE4 AD 11 9B			lda Y+3
   861 1FE7 85 8D			sta :FP2MAN3
   862 1FE9 20 0D 16			jsr @FMUL
   863 1FEC A5 8E			lda :FPMAN0
   864 1FEE 85 86			sta :FP1MAN0
   865 1FF0 A5 8F			lda :FPMAN1
   866 1FF2 85 87			sta :FP1MAN1
   867 1FF4 A5 90			lda :FPMAN2
   868 1FF6 85 88			sta :FP1MAN2
   869 1FF8 A5 91			lda :FPMAN3
   870 1FFA 85 89			sta :FP1MAN3
   871 1FFC A9 74			lda #$74
   872 1FFE 85 8A			sta :FP2MAN0
   873 2000 A9 31			lda #$31
   874 2002 85 8B			sta :FP2MAN1
   875 2004 A9 9A			lda #$9A
   876 2006 85 8C			sta :FP2MAN2
   877 2008 A9 3D			lda #$3D
   878 200A 85 8D			sta :FP2MAN3
   879 200C 20 A6 14			jsr @FSUB
   880 200F A5 8E			lda :FPMAN0
   881 2011 85 86			sta :FP1MAN0
   882 2013 A5 8F			lda :FPMAN1
   883 2015 85 87			sta :FP1MAN1
   884 2017 A5 90			lda :FPMAN2
   885 2019 85 88			sta :FP1MAN2
   886 201B A5 91			lda :FPMAN3
   887 201D 85 89			sta :FP1MAN3
   888 201F AD 0E 9B			lda Y
   889 2022 85 8A			sta :FP2MAN0
   890 2024 AD 0F 9B			lda Y+1
   891 2027 85 8B			sta :FP2MAN1
   892 2029 AD 10 9B			lda Y+2
   893 202C 85 8C			sta :FP2MAN2
   894 202E AD 11 9B			lda Y+3
   895 2031 85 8D			sta :FP2MAN3
   896 2033 20 0D 16			jsr @FMUL
   897 2036 A5 8E			lda :FPMAN0
   898 2038 85 86			sta :FP1MAN0
   899 203A A5 8F			lda :FPMAN1
   900 203C 85 87			sta :FP1MAN1
   901 203E A5 90			lda :FPMAN2
   902 2040 85 88			sta :FP1MAN2
   903 2042 A5 91			lda :FPMAN3
   904 2044 85 89			sta :FP1MAN3
   905 2046 A9 83			lda #$83
   906 2048 85 8A			sta :FP2MAN0
   907 204A A9 3D			lda #$3D
   908 204C 85 8B			sta :FP2MAN1
   909 204E A9 DA			lda #$DA
   910 2050 85 8C			sta :FP2MAN2
   911 2052 A9 3D			lda #$3D
   912 2054 85 8D			sta :FP2MAN3
   913 2056 20 A1 14			jsr @FADD
   914 2059 A5 8E			lda :FPMAN0
   915 205B 85 86			sta :FP1MAN0
   916 205D A5 8F			lda :FPMAN1
   917 205F 85 87			sta :FP1MAN1
   918 2061 A5 90			lda :FPMAN2
   919 2063 85 88			sta :FP1MAN2
   920 2065 A5 91			lda :FPMAN3
   921 2067 85 89			sta :FP1MAN3
   922 2069 AD 0E 9B			lda Y
   923 206C 85 8A			sta :FP2MAN0
   924 206E AD 0F 9B			lda Y+1
   925 2071 85 8B			sta :FP2MAN1
   926 2073 AD 10 9B			lda Y+2
   927 2076 85 8C			sta :FP2MAN2
   928 2078 AD 11 9B			lda Y+3
   929 207B 85 8D			sta :FP2MAN3
   930 207D 20 0D 16			jsr @FMUL
   931 2080 A5 8E			lda :FPMAN0
   932 2082 85 86			sta :FP1MAN0
   933 2084 A5 8F			lda :FPMAN1
   934 2086 85 87			sta :FP1MAN1
   935 2088 A5 90			lda :FPMAN2
   936 208A 85 88			sta :FP1MAN2
   937 208C A5 91			lda :FPMAN3
   938 208E 85 89			sta :FP1MAN3
   939 2090 A9 C7			lda #$C7
   940 2092 85 8A			sta :FP2MAN0
   941 2094 A9 7F			lda #$7F
   942 2096 85 8B			sta :FP2MAN1
   943 2098 A9 11			lda #$11
   944 209A 85 8C			sta :FP2MAN2
   945 209C A9 3E			lda #$3E
   946 209E 85 8D			sta :FP2MAN3
   947 20A0 20 A6 14			jsr @FSUB
   948 20A3 A5 8E			lda :FPMAN0
   949 20A5 85 86			sta :FP1MAN0
   950 20A7 A5 8F			lda :FPMAN1
   951 20A9 85 87			sta :FP1MAN1
   952 20AB A5 90			lda :FPMAN2
   953 20AD 85 88			sta :FP1MAN2
   954 20AF A5 91			lda :FPMAN3
   955 20B1 85 89			sta :FP1MAN3
   956 20B3 AD 0E 9B			lda Y
   957 20B6 85 8A			sta :FP2MAN0
   958 20B8 AD 0F 9B			lda Y+1
   959 20BB 85 8B			sta :FP2MAN1
   960 20BD AD 10 9B			lda Y+2
   961 20C0 85 8C			sta :FP2MAN2
   962 20C2 AD 11 9B			lda Y+3
   963 20C5 85 8D			sta :FP2MAN3
   964 20C7 20 0D 16			jsr @FMUL
   965 20CA A5 8E			lda :FPMAN0
   966 20CC 85 86			sta :FP1MAN0
   967 20CE A5 8F			lda :FPMAN1
   968 20D0 85 87			sta :FP1MAN1
   969 20D2 A5 90			lda :FPMAN2
   970 20D4 85 88			sta :FP1MAN2
   971 20D6 A5 91			lda :FPMAN3
   972 20D8 85 89			sta :FP1MAN3
   973 20DA A9 E5			lda #$E5
   974 20DC 85 8A			sta :FP2MAN0
   975 20DE A9 BB			lda #$BB
   976 20E0 85 8B			sta :FP2MAN1
   977 20E2 A9 4C			lda #$4C
   978 20E4 85 8C			sta :FP2MAN2
   979 20E6 A9 3E			lda #$3E
   980 20E8 85 8D			sta :FP2MAN3
   981 20EA 20 A1 14			jsr @FADD
   982 20ED A5 8E			lda :FPMAN0
   983 20EF 85 86			sta :FP1MAN0
   984 20F1 A5 8F			lda :FPMAN1
   985 20F3 85 87			sta :FP1MAN1
   986 20F5 A5 90			lda :FPMAN2
   987 20F7 85 88			sta :FP1MAN2
   988 20F9 A5 91			lda :FPMAN3
   989 20FB 85 89			sta :FP1MAN3
   990 20FD AD 0E 9B			lda Y
   991 2100 85 8A			sta :FP2MAN0
   992 2102 AD 0F 9B			lda Y+1
   993 2105 85 8B			sta :FP2MAN1
   994 2107 AD 10 9B			lda Y+2
   995 210A 85 8C			sta :FP2MAN2
   996 210C AD 11 9B			lda Y+3
   997 210F 85 8D			sta :FP2MAN3
   998 2111 20 0D 16			jsr @FMUL
   999 2114 A5 8E			lda :FPMAN0
  1000 2116 85 86			sta :FP1MAN0
  1001 2118 A5 8F			lda :FPMAN1
  1002 211A 85 87			sta :FP1MAN1
  1003 211C A5 90			lda :FPMAN2
  1004 211E 85 88			sta :FP1MAN2
  1005 2120 A5 91			lda :FPMAN3
  1006 2122 85 89			sta :FP1MAN3
  1007 2124 A9 6C			lda #$6C
  1008 2126 85 8A			sta :FP2MAN0
  1009 2128 A9 AA			lda #$AA
  1010 212A 85 8B			sta :FP2MAN1
  1011 212C 85 8C			sta :FP2MAN2
  1012 212E A9 3E			lda #$3E
  1013 2130 85 8D			sta :FP2MAN3
  1014 2132 20 A6 14			jsr @FSUB
  1015 2135 A5 8E			lda :FPMAN0
  1016 2137 85 86			sta :FP1MAN0
  1017 2139 A5 8F			lda :FPMAN1
  1018 213B 85 87			sta :FP1MAN1
  1019 213D A5 90			lda :FPMAN2
  1020 213F 85 88			sta :FP1MAN2
  1021 2141 A5 91			lda :FPMAN3
  1022 2143 85 89			sta :FP1MAN3
  1023 2145 AD 0E 9B			lda Y
  1024 2148 85 8A			sta :FP2MAN0
  1025 214A AD 0F 9B			lda Y+1
  1026 214D 85 8B			sta :FP2MAN1
  1027 214F AD 10 9B			lda Y+2
  1028 2152 85 8C			sta :FP2MAN2
  1029 2154 AD 11 9B			lda Y+3
  1030 2157 85 8D			sta :FP2MAN3
  1031 2159 20 0D 16			jsr @FMUL
  1032 215C A5 8E			lda :FPMAN0
  1033 215E 85 86			sta :FP1MAN0
  1034 2160 A5 8F			lda :FPMAN1
  1035 2162 85 87			sta :FP1MAN1
  1036 2164 A5 90			lda :FPMAN2
  1037 2166 85 88			sta :FP1MAN2
  1038 2168 A5 91			lda :FPMAN3
  1039 216A 85 89			sta :FP1MAN3
  1040 216C A9 00			lda #$00
  1041 216E 85 8A			sta :FP2MAN0
  1042 2170 85 8B			sta :FP2MAN1
  1043 2172 A9 80			lda #$80
  1044 2174 85 8C			sta :FP2MAN2
  1045 2176 A9 3F			lda #$3F
  1046 2178 85 8D			sta :FP2MAN3
  1047 217A 20 A1 14			jsr @FADD
  1048 217D A5 8E			lda :FPMAN0
  1049 217F 85 86			sta :FP1MAN0
  1050 2181 A5 8F			lda :FPMAN1
  1051 2183 85 87			sta :FP1MAN1
  1052 2185 A5 90			lda :FPMAN2
  1053 2187 85 88			sta :FP1MAN2
  1054 2189 A5 91			lda :FPMAN3
  1055 218B 85 89			sta :FP1MAN3
  1056 218D AD 0A 9B			lda X
  1057 2190 85 8A			sta :FP2MAN0
  1058 2192 AD 0B 9B			lda X+1
  1059 2195 85 8B			sta :FP2MAN1
  1060 2197 AD 0C 9B			lda X+2
  1061 219A 85 8C			sta :FP2MAN2
  1062 219C AD 0D 9B			lda X+3
  1063 219F 85 8D			sta :FP2MAN3
  1064 21A1 20 0D 16			jsr @FMUL
  1065 21A4 A5 8E			lda :FPMAN0
  1066 21A6 8D 0A 9B			sta X
  1067 21A9 A5 8F			lda :FPMAN1
  1068 21AB 8D 0B 9B			sta X+1
  1069 21AE A5 90			lda :FPMAN2
  1070 21B0 8D 0C 9B			sta X+2
  1071 21B3 A5 91			lda :FPMAN3
  1072 21B5 8D 0D 9B			sta X+3
  1073
  1074 				; optimize OK (SYSTEM), line = 922
  1075
  1076 21B8 AD 0A 9B			lda X
  1077 21BB 85 8A			sta :FP2MAN0
  1078 21BD AD 0B 9B			lda X+1
  1079 21C0 85 8B			sta :FP2MAN1
  1080 21C2 AD 0C 9B			lda X+2
  1081 21C5 85 8C			sta :FP2MAN2
  1082 21C7 AD 0D 9B			lda X+3
  1083 21CA 85 8D			sta :FP2MAN3
  1084 21CC A9 DB			lda #$DB
  1085 21CE 85 86			sta :FP1MAN0
  1086 21D0 A9 0F			lda #$0F
  1087 21D2 85 87			sta :FP1MAN1
  1088 21D4 A9 49			lda #$49
  1089 21D6 85 88			sta :FP1MAN2
  1090 21D8 A9 3F			lda #$3F
  1091 21DA 85 89			sta :FP1MAN3
  1092 21DC 20 A1 14			jsr @FADD
  1093 21DF A5 8E			lda :FPMAN0
  1094 21E1 8D 0A 9B			sta X
  1095 21E4 A5 8F			lda :FPMAN1
  1096 21E6 8D 0B 9B			sta X+1
  1097 21E9 A5 90			lda :FPMAN2
  1098 21EB 8D 0C 9B			sta X+2
  1099 21EE A5 91			lda :FPMAN3
  1100 21F0 8D 0D 9B			sta X+3
  1101
  1102 				; optimize OK (SYSTEM), line = 924
  1103
  1104 21F3 AD 12 9B			lda SIGN
  1105 21F6 F0 1A			jeq l_016B
  1106
  1107 				; optimize OK (SYSTEM), line = 925
  1108
  1109 21F8 AD 0A 9B			lda X
  1110 21FB 8D 06 9B			sta RESULT
  1111 21FE AD 0B 9B			lda X+1
  1112 2201 8D 07 9B			sta RESULT+1
  1113 2204 AD 0C 9B			lda X+2
  1114 2207 8D 08 9B			sta RESULT+2
  1115 220A AD 0D 9B			lda X+3
  1116 220D 49 80			eor #$80
  1117 220F 4C 27 22			jmp l_017C
  1118 2212			l_016B
  1119
  1120 				; optimize OK (SYSTEM), line = 927
  1121
  1122 2212 AD 0A 9B			lda X
  1123 2215 8D 06 9B			sta RESULT
  1124 2218 AD 0B 9B			lda X+1
  1125 221B 8D 07 9B			sta RESULT+1
  1126 221E AD 0C 9B			lda X+2
  1127 2221 8D 08 9B			sta RESULT+2
  1128 2224 AD 0D 9B			lda X+3
  1129 2227			l_017C
  1130 2227 8D 09 9B			sta RESULT+3
  1131 222A			@exit
  1132
  1133 				; ------------------------------------------------------------
  1134
  1135 = 9B02			VALUE	= DATAORIGIN+$0019
  1136 = 9B06			RESULT	= DATAORIGIN+$001D
  1137 = 9B0A			X	= DATAORIGIN+$0021
  1138 = 9B0E			Y	= DATAORIGIN+$0025
  1139 = 9B12			SIGN	= DATAORIGIN+$0029
  1140
  1141 = 9B02			@VarData	= VALUE
  1142 = 000D			@VarDataSize	= 13
  1143
  1144 222A 60				rts						; ret
  1145 				.endl
  1146 				.endl							; overload
  1147
  1148 222B			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
  1149
  1150 				; ------------------------------------------------------------
  1151
  1152 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1153 				; as Pointer
  1154 222B B5 96			lda :STACKORIGIN,x
  1155 222D 85 8A			sta A
  1156 222F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  1157 2231 85 8B			sta A+1
  1158 2233 CA				dex
  1159 2234 30 05			jmi @main
  1160
  1161 				; ------------------------------------------------------------
  1162
  1163 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1164 				; as Pointer
  1165 2236 B5 96			lda :STACKORIGIN,x
  1166 2238 85 8E			sta VALUE
  1167 223A CA				dex
  1168 223B			@main
  1169
  1170 				; -------------------  ASM Block 00000025  -------------------
  1171
  1172 223B A0 00			ldy #0
  1173 223D A5 8E 91 8A			mva value (:edx),y
  1174
  1175 				; ------------------------------------------------------------
  1176
  1177 = 008A			A	= :EDX
  1178 = 008E			VALUE	= :ECX
  1179
  1180 2241			@exit
  1181 					.ifdef @new
  1182 					lda <@VarData
  1183 					sta :ztmp
  1184 					lda >@VarData
  1185 					ldy #@VarDataSize-1
  1186 					jmp @FreeMem
  1187 					els
  1188 2241 60				rts						; ret
  1189 					eif
  1190 				.endl
  1191
  1192 2242			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
  1193 2242			.local	@03018000001810000300000
  1194
  1195 					.MACRO m@INLINE
  1196 				
  1197 				; -------------------  ASM Block 00000033  -------------------
  1198 				
  1199 					jsr @fill
  1200 				
  1201 					.ENDM
  1202
  1203 				; ------------------------------------------------------------
  1204
  1205 = 008A			A	= :EDX
  1206 = 008E			COUNT	= :ECX
  1207 = 0086			VALUE	= :EAX
  1208
  1209 2242			@exit
  1210 				.endl
  1211 				.endl							; overload
  1212
  1213 2242			.local	FSINCOS						; FUNCTION
  1214
  1215 				; --- WhileProlog
  1216 2242 4C 80 22			jmp l_01D2
  1217 2245			l_01D3
  1218
  1219 				; optimize OK (SYSTEM), line = 1909
  1220
  1221 2245 A9 DB			lda #$DB
  1222 2247 85 8A			sta :FP2MAN0
  1223 2249 A9 0F			lda #$0F
  1224 224B 85 8B			sta :FP2MAN1
  1225 224D A9 C9			lda #$C9
  1226 224F 85 8C			sta :FP2MAN2
  1227 2251 A9 40			lda #$40
  1228 2253 85 8D			sta :FP2MAN3
  1229 2255 AD 13 9B			lda X
  1230 2258 85 86			sta :FP1MAN0
  1231 225A AD 14 9B			lda X+1
  1232 225D 85 87			sta :FP1MAN1
  1233 225F AD 15 9B			lda X+2
  1234 2262 85 88			sta :FP1MAN2
  1235 2264 AD 16 9B			lda X+3
  1236 2267 85 89			sta :FP1MAN3
  1237 2269 20 A6 14			jsr @FSUB
  1238 226C A5 8E			lda :FPMAN0
  1239 226E 8D 13 9B			sta X
  1240 2271 A5 8F			lda :FPMAN1
  1241 2273 8D 14 9B			sta X+1
  1242 2276 A5 90			lda :FPMAN2
  1243 2278 8D 15 9B			sta X+2
  1244 227B A5 91			lda :FPMAN3
  1245 227D 8D 16 9B			sta X+3
  1246 2280			l_01D2
  1247 2280 A9 DB			lda #$DB
  1248 2282 85 86			sta @FCMPL.A
  1249 2284 A9 0F			lda #$0F
  1250 2286 85 87			sta @FCMPL.A+1
  1251 2288 A9 C9			lda #$C9
  1252 228A 85 88			sta @FCMPL.A+2
  1253 228C A9 40			lda #$40
  1254 228E 85 89			sta @FCMPL.A+3
  1255 2290 AD 13 9B			lda X
  1256 2293 85 8E			sta @FCMPL.B
  1257 2295 AD 14 9B			lda X+1
  1258 2298 85 8F			sta @FCMPL.B+1
  1259 229A AD 15 9B			lda X+2
  1260 229D 85 90			sta @FCMPL.B+2
  1261 229F AD 16 9B			lda X+3
  1262 22A2 85 91			sta @FCMPL.B+3
  1263 22A4 20 2A 17			jsr @FCMPL
  1264 22A7 30 02			smi
  1265 22A9 D0 9A			jne l_01D3
  1266
  1267 				; --- WhileProlog
  1268 22AB 4C E9 22			jmp l_01E7
  1269 22AE			l_01E8
  1270
  1271 				; optimize OK (SYSTEM), line = 1910
  1272
  1273 22AE A9 DB			lda #$DB
  1274 22B0 85 8A			sta :FP2MAN0
  1275 22B2 A9 0F			lda #$0F
  1276 22B4 85 8B			sta :FP2MAN1
  1277 22B6 A9 C9			lda #$C9
  1278 22B8 85 8C			sta :FP2MAN2
  1279 22BA A9 40			lda #$40
  1280 22BC 85 8D			sta :FP2MAN3
  1281 22BE AD 13 9B			lda X
  1282 22C1 85 86			sta :FP1MAN0
  1283 22C3 AD 14 9B			lda X+1
  1284 22C6 85 87			sta :FP1MAN1
  1285 22C8 AD 15 9B			lda X+2
  1286 22CB 85 88			sta :FP1MAN2
  1287 22CD AD 16 9B			lda X+3
  1288 22D0 85 89			sta :FP1MAN3
  1289 22D2 20 A1 14			jsr @FADD
  1290 22D5 A5 8E			lda :FPMAN0
  1291 22D7 8D 13 9B			sta X
  1292 22DA A5 8F			lda :FPMAN1
  1293 22DC 8D 14 9B			sta X+1
  1294 22DF A5 90			lda :FPMAN2
  1295 22E1 8D 15 9B			sta X+2
  1296 22E4 A5 91			lda :FPMAN3
  1297 22E6 8D 16 9B			sta X+3
  1298 22E9			l_01E7
  1299 22E9 AD 16 9B			lda X+3
  1300 22EC 30 C0			jmi l_01E8
  1301
  1302 				; optimize OK (SYSTEM), line = 1913
  1303
  1304 22EE A9 83			lda #$83
  1305 22F0 85 8A			sta :FP2MAN0
  1306 22F2 A9 F9			lda #$F9
  1307 22F4 85 8B			sta :FP2MAN1
  1308 22F6 A9 22			lda #$22
  1309 22F8 85 8C			sta :FP2MAN2
  1310 22FA A9 3F			lda #$3F
  1311 22FC 85 8D			sta :FP2MAN3
  1312 22FE AD 13 9B			lda X
  1313 2301 85 86			sta :FP1MAN0
  1314 2303 AD 14 9B			lda X+1
  1315 2306 85 87			sta :FP1MAN1
  1316 2308 AD 15 9B			lda X+2
  1317 230B 85 88			sta :FP1MAN2
  1318 230D AD 16 9B			lda X+3
  1319 2310 85 89			sta :FP1MAN3
  1320 2312 20 0D 16			jsr @FMUL
  1321 2315 A5 8E			lda :FPMAN0
  1322 2317 8D 13 9B			sta X
  1323 231A A5 8F			lda :FPMAN1
  1324 231C 8D 14 9B			sta X+1
  1325 231F A5 90			lda :FPMAN2
  1326 2321 8D 15 9B			sta X+2
  1327 2324 A5 91			lda :FPMAN3
  1328 2326 8D 16 9B			sta X+3
  1329
  1330 				; optimize OK (SYSTEM), line = 1916
  1331
  1332 2329 AD 13 9B			lda X
  1333 232C 85 8E			sta :FPMAN0
  1334 232E AD 14 9B			lda X+1
  1335 2331 85 8F			sta :FPMAN1
  1336 2333 AD 15 9B			lda X+2
  1337 2336 85 90			sta :FPMAN2
  1338 2338 AD 16 9B			lda X+3
  1339 233B 85 91			sta :FPMAN3
  1340 233D 20 76 17			jsr @F2I
  1341 2340 A5 8E			lda :FPMAN0
  1342 2342 8D 1C 9B			sta I
  1343
  1344 				; optimize OK (SYSTEM), line = 1919
  1345
  1346 2345 AD 16 9B			lda X+3
  1347 2348 10 03			jpl l_0216
  1348 234A CE 1C 9B			dec I
  1349 234D			l_0216
  1350
  1351 				; optimize OK (SYSTEM), line = 1922
  1352
  1353 234D A0 00			ldy #$00
  1354 234F AD 1C 9B			lda I
  1355 2352 10 01			spl
  1356 2354 88				dey
  1357 2355 85 8E			sta :FPMAN0
  1358 2357 84 8F			sty :FPMAN1
  1359 2359 84 90			sty :FPMAN2
  1360 235B 84 91			sty :FPMAN3
  1361 235D 20 E7 17			jsr @I2F
  1362 2360 A5 8E			lda :FPMAN0
  1363 2362 85 8A			sta :FP2MAN0
  1364 2364 A5 8F			lda :FPMAN1
  1365 2366 85 8B			sta :FP2MAN1
  1366 2368 A5 90			lda :FPMAN2
  1367 236A 85 8C			sta :FP2MAN2
  1368 236C A5 91			lda :FPMAN3
  1369 236E 85 8D			sta :FP2MAN3
  1370 2370 AD 13 9B			lda X
  1371 2373 85 86			sta :FP1MAN0
  1372 2375 AD 14 9B			lda X+1
  1373 2378 85 87			sta :FP1MAN1
  1374 237A AD 15 9B			lda X+2
  1375 237D 85 88			sta :FP1MAN2
  1376 237F AD 16 9B			lda X+3
  1377 2382 85 89			sta :FP1MAN3
  1378 2384 20 A6 14			jsr @FSUB
  1379 2387 A5 8E			lda :FPMAN0
  1380 2389 8D 13 9B			sta X
  1381 238C A5 8F			lda :FPMAN1
  1382 238E 8D 14 9B			sta X+1
  1383 2391 A5 90			lda :FPMAN2
  1384 2393 8D 15 9B			sta X+2
  1385 2396 A5 91			lda :FPMAN3
  1386 2398 8D 16 9B			sta X+3
  1387
  1388 				; optimize OK (SYSTEM), line = 1925
  1389
  1390 239B AD 17 9B			lda SC
  1391 239E F0 03			jeq l_0233
  1392 23A0 EE 1C 9B			inc I
  1393 23A3			l_0233
  1394
  1395 				; optimize OK (SYSTEM), line = 1928
  1396
  1397 23A3 AD 1C 9B			lda I
  1398 23A6 29 01			and #$01
  1399 23A8 D0 39			jne l_0250
  1400 23AA AD 13 9B			lda X
  1401 23AD 85 8A			sta :FP2MAN0
  1402 23AF AD 14 9B			lda X+1
  1403 23B2 85 8B			sta :FP2MAN1
  1404 23B4 AD 15 9B			lda X+2
  1405 23B7 85 8C			sta :FP2MAN2
  1406 23B9 AD 16 9B			lda X+3
  1407 23BC 85 8D			sta :FP2MAN3
  1408 23BE A9 00			lda #$00
  1409 23C0 85 86			sta :FP1MAN0
  1410 23C2 85 87			sta :FP1MAN1
  1411 23C4 A9 80			lda #$80
  1412 23C6 85 88			sta :FP1MAN2
  1413 23C8 A9 3F			lda #$3F
  1414 23CA 85 89			sta :FP1MAN3
  1415 23CC 20 A6 14			jsr @FSUB
  1416 23CF A5 8E			lda :FPMAN0
  1417 23D1 8D 13 9B			sta X
  1418 23D4 A5 8F			lda :FPMAN1
  1419 23D6 8D 14 9B			sta X+1
  1420 23D9 A5 90			lda :FPMAN2
  1421 23DB 8D 15 9B			sta X+2
  1422 23DE A5 91			lda :FPMAN3
  1423 23E0 8D 16 9B			sta X+3
  1424 23E3			l_0250
  1425
  1426 				; optimize OK (SYSTEM), line = 1931
  1427
  1428 23E3 AD 13 9B			lda X
  1429 23E6 85 8A			sta :FP2MAN0
  1430 23E8 AD 14 9B			lda X+1
  1431 23EB 85 8B			sta :FP2MAN1
  1432 23ED AD 15 9B			lda X+2
  1433 23F0 85 8C			sta :FP2MAN2
  1434 23F2 AD 16 9B			lda X+3
  1435 23F5 85 8D			sta :FP2MAN3
  1436 23F7 AD 13 9B			lda X
  1437 23FA 85 86			sta :FP1MAN0
  1438 23FC AD 14 9B			lda X+1
  1439 23FF 85 87			sta :FP1MAN1
  1440 2401 AD 15 9B			lda X+2
  1441 2404 85 88			sta :FP1MAN2
  1442 2406 AD 16 9B			lda X+3
  1443 2409 85 89			sta :FP1MAN3
  1444 240B 20 0D 16			jsr @FMUL
  1445 240E A5 8E			lda :FPMAN0
  1446 2410 8D 13 9B			sta X
  1447 2413 A5 8F			lda :FPMAN1
  1448 2415 8D 14 9B			sta X+1
  1449 2418 A5 90			lda :FPMAN2
  1450 241A 8D 15 9B			sta X+2
  1451 241D A5 91			lda :FPMAN3
  1452 241F 8D 16 9B			sta X+3
  1453
  1454 				; optimize OK (SYSTEM), line = 1932
  1455
  1456 2422 A9 42			lda #$42
  1457 2424 85 8A			sta :FP2MAN0
  1458 2426 A9 01			lda #$01
  1459 2428 85 8B			sta :FP2MAN1
  1460 242A A9 5E			lda #$5E
  1461 242C 85 8C			sta :FP2MAN2
  1462 242E A9 3A			lda #$3A
  1463 2430 85 8D			sta :FP2MAN3
  1464 2432 AD 13 9B			lda X
  1465 2435 85 86			sta :FP1MAN0
  1466 2437 AD 14 9B			lda X+1
  1467 243A 85 87			sta :FP1MAN1
  1468 243C AD 15 9B			lda X+2
  1469 243F 85 88			sta :FP1MAN2
  1470 2441 AD 16 9B			lda X+3
  1471 2444 85 89			sta :FP1MAN3
  1472 2446 20 0D 16			jsr @FMUL
  1473 2449 A5 8E			lda :FPMAN0
  1474 244B 85 8A			sta :FP2MAN0
  1475 244D A5 8F			lda :FPMAN1
  1476 244F 85 8B			sta :FP2MAN1
  1477 2451 A5 90			lda :FPMAN2
  1478 2453 85 8C			sta :FP2MAN2
  1479 2455 A5 91			lda :FPMAN3
  1480 2457 85 8D			sta :FP2MAN3
  1481 2459 A9 D3			lda #$D3
  1482 245B 85 86			sta :FP1MAN0
  1483 245D A9 59			lda #$59
  1484 245F 85 87			sta :FP1MAN1
  1485 2461 A9 A3			lda #$A3
  1486 2463 85 88			sta :FP1MAN2
  1487 2465 A9 3C			lda #$3C
  1488 2467 85 89			sta :FP1MAN3
  1489 2469 20 A6 14			jsr @FSUB
  1490 246C A5 8E			lda :FPMAN0
  1491 246E 85 86			sta :FP1MAN0
  1492 2470 A5 8F			lda :FPMAN1
  1493 2472 85 87			sta :FP1MAN1
  1494 2474 A5 90			lda :FPMAN2
  1495 2476 85 88			sta :FP1MAN2
  1496 2478 A5 91			lda :FPMAN3
  1497 247A 85 89			sta :FP1MAN3
  1498 247C AD 13 9B			lda X
  1499 247F 85 8A			sta :FP2MAN0
  1500 2481 AD 14 9B			lda X+1
  1501 2484 85 8B			sta :FP2MAN1
  1502 2486 AD 15 9B			lda X+2
  1503 2489 85 8C			sta :FP2MAN2
  1504 248B AD 16 9B			lda X+3
  1505 248E 85 8D			sta :FP2MAN3
  1506 2490 20 0D 16			jsr @FMUL
  1507 2493 A5 8E			lda :FPMAN0
  1508 2495 85 86			sta :FP1MAN0
  1509 2497 A5 8F			lda :FPMAN1
  1510 2499 85 87			sta :FP1MAN1
  1511 249B A5 90			lda :FPMAN2
  1512 249D 85 88			sta :FP1MAN2
  1513 249F A5 91			lda :FPMAN3
  1514 24A1 85 89			sta :FP1MAN3
  1515 24A3 A9 DE			lda #$DE
  1516 24A5 85 8A			sta :FP2MAN0
  1517 24A7 A9 4D			lda #$4D
  1518 24A9 85 8B			sta :FP2MAN1
  1519 24AB A9 6F			lda #$6F
  1520 24AD 85 8C			sta :FP2MAN2
  1521 24AF A9 3E			lda #$3E
  1522 24B1 85 8D			sta :FP2MAN3
  1523 24B3 20 A6 14			jsr @FSUB
  1524 24B6 A5 8E			lda :FPMAN0
  1525 24B8 85 86			sta :FP1MAN0
  1526 24BA A5 8F			lda :FPMAN1
  1527 24BC 85 87			sta :FP1MAN1
  1528 24BE A5 90			lda :FPMAN2
  1529 24C0 85 88			sta :FP1MAN2
  1530 24C2 A5 91			lda :FPMAN3
  1531 24C4 85 89			sta :FP1MAN3
  1532 24C6 AD 13 9B			lda X
  1533 24C9 85 8A			sta :FP2MAN0
  1534 24CB AD 14 9B			lda X+1
  1535 24CE 85 8B			sta :FP2MAN1
  1536 24D0 AD 15 9B			lda X+2
  1537 24D3 85 8C			sta :FP2MAN2
  1538 24D5 AD 16 9B			lda X+3
  1539 24D8 85 8D			sta :FP2MAN3
  1540 24DA 20 0D 16			jsr @FMUL
  1541 24DD A5 8E			lda :FPMAN0
  1542 24DF 85 86			sta :FP1MAN0
  1543 24E1 A5 8F			lda :FPMAN1
  1544 24E3 85 87			sta :FP1MAN1
  1545 24E5 A5 90			lda :FPMAN2
  1546 24E7 85 88			sta :FP1MAN2
  1547 24E9 A5 91			lda :FPMAN3
  1548 24EB 85 89			sta :FP1MAN3
  1549 24ED A9 00			lda #$00
  1550 24EF 85 8A			sta :FP2MAN0
  1551 24F1 85 8B			sta :FP2MAN1
  1552 24F3 A9 80			lda #$80
  1553 24F5 85 8C			sta :FP2MAN2
  1554 24F7 A9 3F			lda #$3F
  1555 24F9 85 8D			sta :FP2MAN3
  1556 24FB 20 A1 14			jsr @FADD
  1557 24FE A5 8E			lda :FPMAN0
  1558 2500 85 9F			sta :STACKORIGIN+9
  1559 2502 A5 8F			lda :FPMAN1
  1560 2504 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1561 2506 A5 90			lda :FPMAN2
  1562 2508 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1563 250A A5 91			lda :FPMAN3
  1564 250C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1565 250E AD 13 9B			lda X
  1566 2511 85 8A			sta :FP2MAN0
  1567 2513 AD 14 9B			lda X+1
  1568 2516 85 8B			sta :FP2MAN1
  1569 2518 AD 15 9B			lda X+2
  1570 251B 85 8C			sta :FP2MAN2
  1571 251D AD 16 9B			lda X+3
  1572 2520 85 8D			sta :FP2MAN3
  1573 2522 A9 00			lda #$00
  1574 2524 85 86			sta :FP1MAN0
  1575 2526 85 87			sta :FP1MAN1
  1576 2528 A9 80			lda #$80
  1577 252A 85 88			sta :FP1MAN2
  1578 252C A9 3F			lda #$3F
  1579 252E 85 89			sta :FP1MAN3
  1580 2530 20 A6 14			jsr @FSUB
  1581 2533 A5 8E			lda :FPMAN0
  1582 2535 85 8A			sta :FP2MAN0
  1583 2537 A5 8F			lda :FPMAN1
  1584 2539 85 8B			sta :FP2MAN1
  1585 253B A5 90			lda :FPMAN2
  1586 253D 85 8C			sta :FP2MAN2
  1587 253F A5 91			lda :FPMAN3
  1588 2541 85 8D			sta :FP2MAN3
  1589 2543 A5 9F			lda :STACKORIGIN+9
  1590 2545 85 86			sta :FP1MAN0
  1591 2547 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1592 2549 85 87			sta :FP1MAN1
  1593 254B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1594 254D 85 88			sta :FP1MAN2
  1595 254F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1596 2551 85 89			sta :FP1MAN3
  1597 2553 20 0D 16			jsr @FMUL
  1598 2556 A5 8E			lda :FPMAN0
  1599 2558 8D 18 9B			sta RESULT
  1600 255B A5 8F			lda :FPMAN1
  1601 255D 8D 19 9B			sta RESULT+1
  1602 2560 A5 90			lda :FPMAN2
  1603 2562 8D 1A 9B			sta RESULT+2
  1604 2565 A5 91			lda :FPMAN3
  1605 2567 8D 1B 9B			sta RESULT+3
  1606
  1607 				; optimize OK (SYSTEM), line = 1935
  1608
  1609 256A AD 1C 9B			lda I
  1610 256D 29 02			and #$02
  1611 256F C9 02			cmp #$02
  1612 2571 D0 08			jne l_029D
  1613 2573 AD 1B 9B			lda RESULT+3
  1614 2576 49 80			eor #$80
  1615 2578 8D 1B 9B			sta RESULT+3
  1616 257B			l_029D
  1617 257B			@exit
  1618
  1619 				; ------------------------------------------------------------
  1620
  1621 = 9B13			X	= DATAORIGIN+$002A
  1622 = 9B17			SC	= DATAORIGIN+$002E
  1623 = 9B18			RESULT	= DATAORIGIN+$002F
  1624 = 9B1C			I	= DATAORIGIN+$0033
  1625
  1626 = 9B13			@VarData	= X
  1627 = 0006			@VarDataSize	= 6
  1628
  1629 257B 60				rts						; ret
  1630 				.endl
  1631
  1632 257C			.local	SIN						; FUNCTION | OVERLOAD
  1633 257C			.local	@01018F000
  1634
  1635 				; optimize OK (SYSTEM), line = 1949
  1636
  1637 257C AD 1D 9B			lda X
  1638 257F 8D 13 9B			sta FSINCOS.X
  1639 2582 AD 1E 9B			lda X+1
  1640 2585 8D 14 9B			sta FSINCOS.X+1
  1641 2588 AD 1F 9B			lda X+2
  1642 258B 8D 15 9B			sta FSINCOS.X+2
  1643 258E AD 20 9B			lda X+3
  1644 2591 8D 16 9B			sta FSINCOS.X+3
  1645 2594 A9 00			lda #$00
  1646 2596 8D 17 9B			sta FSINCOS.SC
  1647 2599 20 42 22			jsr FSINCOS
  1648 259C AD 18 9B			lda FSINCOS.RESULT
  1649 259F 8D 21 9B			sta RESULT
  1650 25A2 AD 19 9B			lda FSINCOS.RESULT+1
  1651 25A5 8D 22 9B			sta RESULT+1
  1652 25A8 AD 1A 9B			lda FSINCOS.RESULT+2
  1653 25AB 8D 23 9B			sta RESULT+2
  1654 25AE AD 1B 9B			lda FSINCOS.RESULT+3
  1655 25B1 8D 24 9B			sta RESULT+3
  1656 25B4			@exit
  1657
  1658 				; ------------------------------------------------------------
  1659
  1660 = 9B1D			X	= DATAORIGIN+$0034
  1661 = 9B21			RESULT	= DATAORIGIN+$0038
  1662
  1663 = 9B1D			@VarData	= X
  1664 = 0004			@VarDataSize	= 4
  1665
  1666 25B4 60				rts						; ret
  1667 				.endl
  1668 				.endl							; overload
  1669
  1670 25B5			.local	COS						; FUNCTION | OVERLOAD
  1671 25B5			.local	@01018F000
  1672
  1673 				; optimize OK (SYSTEM), line = 1963
  1674
  1675 25B5 AD 25 9B			lda X
  1676 25B8 8D 13 9B			sta FSINCOS.X
  1677 25BB AD 26 9B			lda X+1
  1678 25BE 8D 14 9B			sta FSINCOS.X+1
  1679 25C1 AD 27 9B			lda X+2
  1680 25C4 8D 15 9B			sta FSINCOS.X+2
  1681 25C7 AD 28 9B			lda X+3
  1682 25CA 8D 16 9B			sta FSINCOS.X+3
  1683 25CD A9 01			lda #$01
  1684 25CF 8D 17 9B			sta FSINCOS.SC
  1685 25D2 20 42 22			jsr FSINCOS
  1686 25D5 AD 18 9B			lda FSINCOS.RESULT
  1687 25D8 8D 29 9B			sta RESULT
  1688 25DB AD 19 9B			lda FSINCOS.RESULT+1
  1689 25DE 8D 2A 9B			sta RESULT+1
  1690 25E1 AD 1A 9B			lda FSINCOS.RESULT+2
  1691 25E4 8D 2B 9B			sta RESULT+2
  1692 25E7 AD 1B 9B			lda FSINCOS.RESULT+3
  1693 25EA 8D 2C 9B			sta RESULT+3
  1694 25ED			@exit
  1695
  1696 				; ------------------------------------------------------------
  1697
  1698 = 9B25			X	= DATAORIGIN+$003C
  1699 = 9B29			RESULT	= DATAORIGIN+$0040
  1700
  1701 = 9B25			@VarData	= X
  1702 = 0004			@VarDataSize	= 4
  1703
  1704 25ED 60				rts						; ret
  1705 				.endl
  1706 				.endl							; overload
  1707
  1708 25EE			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1709 25EE			.local	@010180000
  1710 25EE 8D 2D 9B			sta RANGE
  1711
  1712 				; -------------------  ASM Block 00000049  -------------------
  1713
  1714
  1715 				;BYTE FUNC Rand(BYTE range)
  1716 				; returns random number between 0 and
  1717 				; range-1.  If range=0, then a random
  1718 				; number between 0 and 255 is returned
  1719
  1720 25F1 AC 0A D2		  ldy $d20a   ; RANDOM
  1721
  1722 25F4 AD 2D 9B		  lda range
  1723 25F7 F0 08		  beq stop
  1724
  1725 25F9 85 8E		  sta :ecx
  1726 25FB 84 86		  sty :eax
  1727
  1728 25FD 20 C6 12		  jsr imulCL
  1729 2600 A8			  tay
  1730
  1731 2601 8C 2E 9B		stop  sty Result
  1732
  1733
  1734 2604			@exit
  1735
  1736 				; ------------------------------------------------------------
  1737
  1738 = 9B2D			RANGE	= DATAORIGIN+$0044
  1739 = 9B2E			RESULT	= DATAORIGIN+$0045
  1740
  1741 = 9B2D			@VarData	= RANGE
  1742 = 0001			@VarDataSize	= 1
  1743
  1744 2604 60				rts						; ret
  1745 				.endl
  1746 				.endl							; overload
  1747
  1748 2605			.local	RANDOM						; FUNCTION | OVERLOAD
  1749 2605			.local	@010184000
  1750
  1751 				; optimize OK (system_atari.inc), line = 179
  1752
  1753 2605 AD 30 9B			lda RANGE+1
  1754 2608 0D 2F 9B			ora RANGE
  1755 260B D0 0B			jne l_02DB
  1756
  1757 				; optimize OK (system_atari.inc), line = 180
  1758
  1759 260D A9 00			lda #$00
  1760 260F 8D 31 9B			sta RESULT
  1761 2612 8D 32 9B			sta RESULT+1
  1762 2615 4C 7A 26			jmp l_02E9
  1763 2618			l_02DB
  1764
  1765 				; optimize OK (system_atari.inc), line = 183
  1766
  1767 2618 AD F2 9A			lda RNDSEED
  1768 261B 85 8E			sta :ecx
  1769 261D AD F3 9A			lda RNDSEED+1
  1770 2620 85 8F			sta :ecx+1
  1771 2622 A9 95			lda #$95
  1772 2624 85 86			sta :eax
  1773 2626 A9 45			lda #$45
  1774 2628 85 87			sta :eax+1
  1775 					.ifdef fmulinit
  1776 					fmulu_16
  1777 					els
  1778 262A 20 12 13			imulCX
  1779 					eif
  1780 262D A5 86			lda :eax
  1781 262F 8D F2 9A			sta RNDSEED
  1782 2632 A5 87			lda :eax+1
  1783 2634 8D F3 9A			sta RNDSEED+1
  1784
  1785 				; optimize OK (system_atari.inc), line = 184
  1786
  1787 2637 AD 2F 9B			lda RANGE
  1788 263A 85 8E			sta @SMALLINT.MOD.B
  1789 263C AD 30 9B			lda RANGE+1
  1790 263F 85 8F			sta @SMALLINT.MOD.B+1
  1791 2641 AD F2 9A			lda RNDSEED
  1792 2644 85 86			sta @SMALLINT.MOD.A
  1793 2646 AD F3 9A			lda RNDSEED+1
  1794 2649 85 87			sta @SMALLINT.MOD.A+1
  1795 264B 20 57 12			jsr @SMALLINT.MOD
  1796 264E A5 92			lda @SMALLINT.MOD.RESULT
  1797 2650 8D 31 9B			sta RESULT
  1798 2653 A5 93			lda @SMALLINT.MOD.RESULT+1
  1799 2655 8D 32 9B			sta RESULT+1
  1800
  1801 				; -------------------  ASM Block 00000050  -------------------
  1802
  1803 2658 AD 30 9B			lda range+1
  1804 265B 10 07			bpl plus
  1805
  1806 265D AD 32 9B			lda Result+1
  1807 2660 30 18			bmi ok
  1808 2662 10 05			bpl sign
  1809
  1810 2664 AD 32 9B		plus	lda Result+1
  1811 2667 10 11			bpl ok
  1812
  1813 2669 A9 00		sign 	lda #0
  1814 266B 38 ED 31 9B			sub Result
  1815 266F 8D 31 9B			sta Result
  1816
  1817 2672 A9 00			lda #0
  1818 2674 ED 32 9B			sbc Result+1
  1819 2677 8D 32 9B			sta Result+1
  1820 267A			ok
  1821
  1822 267A			l_02E9
  1823 267A			@exit
  1824
  1825 				; ------------------------------------------------------------
  1826
  1827 = 9B2F			RANGE	= DATAORIGIN+$0046
  1828 = 9B31			RESULT	= DATAORIGIN+$0048
  1829
  1830 = 9B2F			@VarData	= RANGE
  1831 = 0002			@VarDataSize	= 2
  1832
  1833 267A 60				rts						; ret
  1834 				.endl
  1835 				.endl							; overload
  1836
  1837 				; ------------------------------------------------------------
  1838 				; ------------------------------------------------------------
  1839 267B			@UnitInit
  1840
  1841 				; -------------------  ASM Block 00000060  -------------------
  1842
  1843 					.ifdef @CmdLine
  1844
  1845 					ldx #$0F
  1846 					mva:rpl $340,x IOCB@COPY,x-
  1847 					rts
  1848
  1849 				IOCB@COPY	:16 brk
  1850 					eif
  1851
  1852
  1853 267B 60				rts
  1854
  1855 				; ------------------------------------------------------------
  1856
  1857 = 0648			M_PI_2	= $0648
  1858 = 0192			D_PI_2	= $0192
  1859 = 0004			D_PI_180	= $04
  1860 = 0101			__PORTB_BANKS	= $0101
  1861 = 0000			MGTIA	= $00
  1862 = 0080			MVBXE	= $80
  1863 = 0000			VBXE_XDLADR	= $00
  1864 = 00E0			VBXE_BCBTMP	= $E0
  1865 = 0100			VBXE_BCBADR	= $0100
  1866 = 1000			VBXE_MAPADR	= $1000
  1867 = 1000			VBXE_CHBASE	= $1000
  1868 = 5000			VBXE_OVRADR	= $5000
  1869 = B000			VBXE_WINDOW	= $B000
  1870 = 0000			IDLI	= $00
  1871 = 0001			IVBL	= $01
  1872 = 0001			IVBLD	= $01
  1873 = 0002			IVBLI	= $02
  1874 = 0003			ITIM1	= $03
  1875 = 0004			ITIM2	= $04
  1876 = 0005			ITIM4	= $05
  1877 = 00FE			CH_DELCHR	= $FE
  1878 = 009B			CH_ENTER	= $9B
  1879 = 001B			CH_ESC	= $1B
  1880 = 001C			CH_CURS_UP	= $1C
  1881 = 001D			CH_CURS_DOWN	= $1D
  1882 = 001E			CH_CURS_LEFT	= $1E
  1883 = 001F			CH_CURS_RIGHT	= $1F
  1884 = 007F			CH_TAB	= $7F
  1885 = 009B			CH_EOL	= $9B
  1886 = 007D			CH_CLR	= $7D
  1887 = 00FD			CH_BELL	= $FD
  1888 = 007E			CH_DEL	= $7E
  1889 = 009C			CH_DELLINE	= $9C
  1890 = 009D			CH_INSLINE	= $9D
  1891 = 0000			PAL_PMCOLOR0	= $00
  1892 = 0001			PAL_PMCOLOR1	= $01
  1893 = 0002			PAL_PMCOLOR2	= $02
  1894 = 0003			PAL_PMCOLOR3	= $03
  1895 = 0004			PAL_COLOR0	= $04
  1896 = 0005			PAL_COLOR1	= $05
  1897 = 0006			PAL_COLOR2	= $06
  1898 = 0007			PAL_COLOR3	= $07
  1899 = 0008			PAL_COLBAK	= $08
  1900 = 0000			COLOR_BLACK	= $00
  1901 = 000E			COLOR_WHITE	= $0E
  1902 = 0032			COLOR_RED	= $32
  1903 = 0096			COLOR_CYAN	= $96
  1904 = 0068			COLOR_VIOLET	= $68
  1905 = 00C4			COLOR_GREEN	= $C4
  1906 = 0074			COLOR_BLUE	= $74
  1907 = 00EE			COLOR_YELLOW	= $EE
  1908 = 0028			COLOR_ORANGE	= $28
  1909 = 00E4			COLOR_BROWN	= $E4
  1910 = 003C			COLOR_LIGHTRED	= $3C
  1911 = 0004			COLOR_GRAY1	= $04
  1912 = 0006			COLOR_GRAY2	= $06
  1913 = 000A			COLOR_GRAY3	= $0A
  1914 = 00CC			COLOR_LIGHTGREEN	= $CC
  1915 = 007C			COLOR_LIGHTBLUE	= $7C
  1916 = 0004			FMOPENREAD	= $04
  1917 = 0008			FMOPENWRITE	= $08
  1918 = 0009			FMOPENAPPEND	= $09
  1919 = 000C			FMOPENREADWRITE	= $0C
  1920 = 9AE9			DATESEPARATOR	= DATAORIGIN+$0000
  1921 = D20A			RND	= $D20A
  1922 = 02C0			adr.PALETTE	= $02C0
  1923 267C			.var PALETTE	= adr.PALETTE .word
  1924 = D012			adr.HPALETTE	= $D012
  1925 267C			.var HPALETTE	= adr.HPALETTE .word
  1926 = 9AEA			FILEMODE	= DATAORIGIN+$0001
  1927 = 9AEB			GRAPHMODE	= DATAORIGIN+$0002
  1928 = 9AEC			IORESULT	= DATAORIGIN+$0003
  1929 = 9AED			EOLN	= DATAORIGIN+$0004
  1930 = 9AEE			SCREENWIDTH	= DATAORIGIN+$0005
  1931 = 9AF0			SCREENHEIGHT	= DATAORIGIN+$0007
  1932 = 0000			adr.MEM	= $00
  1933 267C			.var MEM	= adr.MEM .word
  1934 = 9AF2			RNDSEED	= DATAORIGIN+$0009
  1935
  1936 = 267C C0 02		PALETTE
  1936 = 267E 12 D0		HPALETTE
  1936 = 2680 00 00		MEM
  1936 				.endl							; UNIT SYSTEM
  1937
  1938 				; ------------------------------------------------------------
  1939
  1940 2682			.local	ATARI						; UNIT
  1941
  1942 				; ------------------------------------------------------------
  1943
  1944 = 0000			DL_BLANK1	= $00
  1945 = 0010			DL_BLANK2	= $10
  1946 = 0020			DL_BLANK3	= $20
  1947 = 0030			DL_BLANK4	= $30
  1948 = 0040			DL_BLANK5	= $40
  1949 = 0050			DL_BLANK6	= $50
  1950 = 0060			DL_BLANK7	= $60
  1951 = 0070			DL_BLANK8	= $70
  1952 = 0080			DL_DLI	= $80
  1953 = 0040			DL_LMS	= $40
  1954 = 0020			DL_VSCROLL	= $20
  1955 = 0010			DL_HSCROLL	= $10
  1956 = 0001			DL_JMP	= $01
  1957 = 0041			DL_JVB	= $41
  1958 = 0002			DL_MODE_2	= $02
  1959 = 0003			DL_MODE_3	= $03
  1960 = 0004			DL_MODE_4	= $04
  1961 = 0005			DL_MODE_5	= $05
  1962 = 000E			DL_MODE_E	= $0E
  1963 = 000F			DL_MODE_F	= $0F
  1964 = 0010			IRQENS	= $10
  1965 = 0012			RTCLOK	= $12
  1966 = 0012			RTCLOK1	= $12
  1967 = 0013			RTCLOK2	= $13
  1968 = 0014			RTCLOK3	= $14
  1969 = 004D			ATRACT	= $4D
  1970 = 0052			LMARGIN	= $52
  1971 = 0053			RMARGIN	= $53
  1972 = 0054			ROWCRS	= $54
  1973 = 0055			COLCRS	= $55
  1974 = 0057			DINDEX	= $57
  1975 = 0058			SAVMSC	= $58
  1976 = 0062			PALNTS	= $62
  1977 = 006A			RAMTOP	= $6A
  1978 = 0200			VDSLST	= $0200
  1979 = 0230			SDLSTL	= $0230
  1980 = 0290			TXTROW	= $0290
  1981 = 0291			TXTCOL	= $0291
  1982 = 0293			TINDEX	= $0293
  1983 = 0294			TXTMSC	= $0294
  1984 = 022F			SDMCTL	= $022F
  1985 = 026F			GPRIOR	= $026F
  1986 = 02F0			CRSINH	= $02F0
  1987 = 02F3			CHACT	= $02F3
  1988 = 02F4			CHBAS	= $02F4
  1989 = 02FC			CH	= $02FC
  1990 = 02FD			FILDAT	= $02FD
  1991 = 02C0			PCOLR0	= $02C0
  1992 = 02C1			PCOLR1	= $02C1
  1993 = 02C2			PCOLR2	= $02C2
  1994 = 02C3			PCOLR3	= $02C3
  1995 = 02C4			COLOR0	= $02C4
  1996 = 02C5			COLOR1	= $02C5
  1997 = 02C6			COLOR2	= $02C6
  1998 = 02C7			COLOR3	= $02C7
  1999 = 02C8			COLOR4	= $02C8
  2000 = 02C8			COLBAKS	= $02C8
  2001 = D000			HPOSP0	= $D000
  2002 = D001			HPOSP1	= $D001
  2003 = D002			HPOSP2	= $D002
  2004 = D003			HPOSP3	= $D003
  2005 = D004			HPOSM0	= $D004
  2006 = D005			HPOSM1	= $D005
  2007 = D006			HPOSM2	= $D006
  2008 = D007			HPOSM3	= $D007
  2009 = D008			SIZEP0	= $D008
  2010 = D009			SIZEP1	= $D009
  2011 = D00A			SIZEP2	= $D00A
  2012 = D00B			SIZEP3	= $D00B
  2013 = D00C			SIZEM	= $D00C
  2014 = D00D			GRAFP0	= $D00D
  2015 = D00E			GRAFP1	= $D00E
  2016 = D00F			GRAFP2	= $D00F
  2017 = D010			GRAFP3	= $D010
  2018 = D011			GRAFM	= $D011
  2019 = D004			P0PF	= $D004
  2020 = D014			PAL	= $D014
  2021 = D013			TRIG3	= $D013
  2022 = D012			COLPM0	= $D012
  2023 = D013			COLPM1	= $D013
  2024 = D014			COLPM2	= $D014
  2025 = D015			COLPM3	= $D015
  2026 = D016			COLPF0	= $D016
  2027 = D017			COLPF1	= $D017
  2028 = D018			COLPF2	= $D018
  2029 = D019			COLPF3	= $D019
  2030 = D01A			COLBAK	= $D01A
  2031 = D01A			COLBK	= $D01A
  2032 = D01B			PRIOR	= $D01B
  2033 = D01D			GRACTL	= $D01D
  2034 = D01D			PMCNTL	= $D01D
  2035 = D01E			HITCLR	= $D01E
  2036 = D01F			CONSOL	= $D01F
  2037 = D200			AUDF1	= $D200
  2038 = D201			AUDC1	= $D201
  2039 = D202			AUDF2	= $D202
  2040 = D203			AUDC2	= $D203
  2041 = D204			AUDF3	= $D204
  2042 = D205			AUDC3	= $D205
  2043 = D206			AUDF4	= $D206
  2044 = D207			AUDC4	= $D207
  2045 = D208			AUDCTL	= $D208
  2046 = D209			KBCODE	= $D209
  2047 = D20E			IRQEN	= $D20E
  2048 = D20F			SKSTAT	= $D20F
  2049 = D300			PORTA	= $D300
  2050 = D301			PORTB	= $D301
  2051 = D302			PACTL	= $D302
  2052 = D400			DMACTL	= $D400
  2053 = D401			CHACTL	= $D401
  2054 = D402			DLISTL	= $D402
  2055 = D404			HSCROL	= $D404
  2056 = D405			VSCROL	= $D405
  2057 = D407			PMBASE	= $D407
  2058 = D409			CHBASE	= $D409
  2059 = D40A			WSYNC	= $D40A
  2060 = D40B			VCOUNT	= $D40B
  2061 = D40C			PENH	= $D40C
  2062 = D40D			PENV	= $D40D
  2063 = D40E			NMIEN	= $D40E
  2064 = FFFA			NMIVEC	= $FFFA
  2065 = FFFC			RESETVEC	= $FFFC
  2066 = FFFE			IRQVEC	= $FFFE
  2067
  2068 				.endl							; UNIT ATARI
  2069
  2070 				; ------------------------------------------------------------
  2071
  2072 2682			.local	CRT						; UNIT
  2073
  2074 				; ------------------------------------------------------------
  2075
  2076 = 9B33			TEXTATTR	= DATAORIGIN+$004A
  2077 = D01F			CONSOL	= $D01F
  2078 = 0000			CN_START_SELECT_OPTION	= $00
  2079 = 0001			CN_SELECT_OPTION	= $01
  2080 = 0002			CN_START_OPTION	= $02
  2081 = 0003			CN_OPTION	= $03
  2082 = 0004			CN_START_SELECT	= $04
  2083 = 0005			CN_SELECT	= $05
  2084 = 0006			CN_START	= $06
  2085 = 0007			CN_NONE	= $07
  2086 = 0000			BLACK	= $00
  2087 = 000F			WHITE	= $0F
  2088 = 0026			RED	= $26
  2089 = 00AC			CYAN	= $AC
  2090 = 0048			PURPLE	= $48
  2091 = 00B6			GREEN	= $B6
  2092 = 0086			BLUE	= $86
  2093 = 00DC			YELLOW	= $DC
  2094 = 0018			ORANGE	= $18
  2095 = 00F4			BROWN	= $F4
  2096 = 002A			LIGHT_RED	= $2A
  2097 = 0004			DARK_GREY	= $04
  2098 = 0008			GREY	= $08
  2099 = 00BC			LIGHT_GREEN	= $BC
  2100 = 009A			LIGHT_BLUE	= $9A
  2101 = 000C			LIGHT_GREY	= $0C
  2102 = 0000			BW40	= $00
  2103 = 0001			CO40	= $01
  2104 = 0002			BW80	= $02
  2105 = 0003			CO80	= $03
  2106 = 0007			MONO	= $07
  2107 = 0001			C40	= $01
  2108 = 0003			C80	= $03
  2109 = 0080			BLINK	= $80
  2110
  2111 				.endl							; UNIT CRT
  2112
  2113 				; ------------------------------------------------------------
  2114
  2115 2682			.local	TYPES						; UNIT
  2116
  2117 				; ------------------------------------------------------------
  2118
  2119 				.endl							; UNIT TYPES
  2120
  2121 				; ------------------------------------------------------------
  2122
  2123 2682			.local	GRAPH						; UNIT
  2124
  2125 				; ------------------------------------------------------------
  2126
  2127 = 0080			CURRENTDRIVER	= $80
  2128 = 0000			DETECT	= $00
  2129 = 0001			CGA	= $01
  2130 = 0002			MCGA	= $02
  2131 = 0003			EGA	= $03
  2132 = 0004			EGA64	= $04
  2133 = 0005			EGAMONO	= $05
  2134 = 0006			LOWRES	= $06
  2135 = 0007			HERCMONO	= $07
  2136 = 0009			VGA	= $09
  2137 = 000A			VESA	= $0A
  2138 = 000B			D1BIT	= $0B
  2139 = 000C			D2BIT	= $0C
  2140 = 000D			D4BIT	= $0D
  2141 = 000E			D6BIT	= $0E
  2142 = 000F			D8BIT	= $0F
  2143 = 0010			D12BIT	= $10
  2144 = 0018			M640X400	= $18
  2145 = 0018			M640X480	= $18
  2146 = 0001			GROK	= $01
  2147 = 00FF			GRNOINITGRAPH	= $FF
  2148 = 00FE			GRNOTDETECTED	= $FE
  2149 = 00FD			GRFILENOTFOUND	= $FD
  2150 = 00FC			GRINVALIDDRIVER	= $FC
  2151 = 00FB			GRNOLOADMEM	= $FB
  2152 = 00FA			GRNOSCANMEM	= $FA
  2153 = 00F9			GRNOFLOODMEM	= $F9
  2154 = 00F8			GRFONTNOTFOUND	= $F8
  2155 = 00F7			GRNOFONTMEM	= $F7
  2156 = 00F6			GRINVALIDMODE	= $F6
  2157 = 00F5			GRERROR	= $F5
  2158 = 00F4			GRIOERROR	= $F4
  2159 = 00F3			GRINVALIDFONT	= $F3
  2160 = 00F2			GRINVALIDFONTNUM	= $F2
  2161 = 00EE			GRINVALIDVERSION	= $EE
  2162 = 0000			CGAC0	= $00
  2163 = 0001			CGAC1	= $01
  2164 = 0002			CGAC2	= $02
  2165 = 0003			CGAC3	= $03
  2166 = 0004			CGAHI	= $04
  2167 = 0000			MCGAC0	= $00
  2168 = 0001			MCGAC1	= $01
  2169 = 0002			MCGAC2	= $02
  2170 = 0003			MCGAC3	= $03
  2171 = 0004			MCGAMED	= $04
  2172 = 0005			MCGAHI	= $05
  2173 = 0000			EGALO	= $00
  2174 = 0001			EGAHI	= $01
  2175 = 0000			EGA64LO	= $00
  2176 = 0001			EGA64HI	= $01
  2177 = 0003			EGAMONOHI	= $03
  2178 = 000A			VGALO	= $0A
  2179 = 001F			VGAMED	= $1F
  2180 = 0018			VGAHI	= $18
  2181 = 9B34			GRAPHRESULT	= DATAORIGIN+$004B
  2182 = 9B35			GETCOLOR	= DATAORIGIN+$004C
  2183 = 9B36			VIDEORAM	= DATAORIGIN+$004D
  2184 = 9B38			adr.LASTARCCOORDS	= DATAORIGIN+$004F	; [12] RECORD
  2185 2682			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  2186 = 9B38			LASTARCCOORDS.X	= DATAORIGIN+$004F
  2187 = 9B3A			LASTARCCOORDS.Y	= DATAORIGIN+$0051
  2188 = 9B3C			LASTARCCOORDS.XSTART	= DATAORIGIN+$0053
  2189 = 9B3E			LASTARCCOORDS.YSTART	= DATAORIGIN+$0055
  2190 = 9B40			LASTARCCOORDS.XEND	= DATAORIGIN+$0057
  2191 = 9B42			LASTARCCOORDS.YEND	= DATAORIGIN+$0059
  2192 = 9B44			WIN_LEFT	= DATAORIGIN+$005B
  2193 = 9B46			WIN_RIGHT	= DATAORIGIN+$005D
  2194 = 9B48			WIN_TOP	= DATAORIGIN+$005F
  2195 = 9B4A			WIN_BOTTOM	= DATAORIGIN+$0061
  2196 = 9B4C			SCANLINE_WIDTH	= DATAORIGIN+$0063
  2197 = 9B4D			CURRENTX	= DATAORIGIN+$0064
  2198 = 9B4F			CURRENTY	= DATAORIGIN+$0066
  2199
  2200 = 2682 38 9B		LASTARCCOORDS
  2200 				.endl							; UNIT GRAPH
  2201
  2202 				; ------------------------------------------------------------
  2203
  2204 2684			.local	VBXE						; UNIT
  2205
  2206 2684			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2207 2684 8D 65 9B			sta B
  2208
  2209 				; -------------------  ASM Block 00000113  -------------------
  2210
  2211 2687				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 2687 AD 65 9B		        lda     B
     3 268A A0 5F		        ldy     #FX_MEMS
     4 268C 91 80		        sta     (fxptr),y
  2212
  2213 				; ------------------------------------------------------------
  2214
  2215 = 9B65			B	= DATAORIGIN+$007C
  2216
  2217 = 9B65			@VarData	= B
  2218 = 0001			@VarDataSize	= 1
  2219
  2220 268E			@exit
  2221 					.ifdef @new
  2222 					lda <@VarData
  2223 					sta :ztmp
  2224 					lda >@VarData
  2225 					ldy #@VarDataSize-1
  2226 					jmp @FreeMem
  2227 					els
  2228 268E 60				rts						; ret
  2229 					eif
  2230 				.endl
  2231
  2232 268F			.local	READVBXEMEMORYBYTE				; FUNCTION
  2233
  2234 				; optimize OK (vbxe_memorystream.inc), line = 20
  2235
  2236 268F AC 66 9B 84 84 AC + 	mwy POSITION :bp2
  2237 2699 A0 02			ldy #$02
  2238 269B B1 84			lda (:bp2),y
  2239 269D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2240 269F 88				dey
  2241 26A0 B1 84			lda (:bp2),y
  2242 26A2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2243 26A4 6A				ror @
  2244 26A5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2245 26A7 6A				ror @
  2246 26A8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2247 26AA 6A				ror @
  2248 26AB 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2249 26AD 6A				ror @
  2250 26AE 09 80			ora #$80
  2251 26B0 8D 69 9B			sta BNK
  2252
  2253 				; optimize OK (vbxe_memorystream.inc), line = 21
  2254
  2255 26B3 88				dey
  2256 26B4 B1 84			lda (:bp2),y
  2257 26B6 8D 6A 9B			sta ADR
  2258 26B9 C8				iny
  2259 26BA B1 84			lda (:bp2),y
  2260 26BC 29 0F			and #$0F
  2261 26BE 09 B0			ora #$B0
  2262 26C0 8D 6B 9B			sta ADR+1
  2263
  2264 				; optimize OK (vbxe_memorystream.inc), line = 23
  2265
  2266 26C3 AD 69 9B			lda BNK
  2267 26C6 20 84 26			jsr VBXEMEMORYBANK
  2268
  2269 				; optimize OK (vbxe_memorystream.inc), line = 25
  2270
  2271 26C9 AC 6B 9B			ldy ADR+1
  2272 26CC 84 83			sty :bp+1
  2273 26CE AC 6A 9B			ldy ADR
  2274 26D1 B1 82			lda (:bp),y
  2275 26D3 8D 68 9B			sta RESULT
  2276
  2277 				; optimize OK (vbxe_memorystream.inc), line = 27
  2278
  2279 26D6 AC 66 9B 84 84 AC + 	mwy POSITION :bp2
  2280 26E0 A0 00			ldy #$00
  2281 26E2 B1 84			lda (:bp2),y
  2282 26E4 18 69 01			add #$01
  2283 26E7 91 84			sta (:bp2),y
  2284 26E9 C8				iny
  2285 26EA B1 84			lda (:bp2),y
  2286 26EC 69 00			adc #$00
  2287 26EE 91 84			sta (:bp2),y
  2288 26F0 C8				iny
  2289 26F1 B1 84			lda (:bp2),y
  2290 26F3 69 00			adc #$00
  2291 26F5 91 84			sta (:bp2),y
  2292 26F7 C8				iny
  2293 26F8 B1 84			lda (:bp2),y
  2294 26FA 69 00			adc #$00
  2295 26FC 91 84			sta (:bp2),y
  2296 26FE			@exit
  2297
  2298 				; ------------------------------------------------------------
  2299
  2300 = 9B66			POSITION	= DATAORIGIN+$007D
  2301 = 9B68			RESULT	= DATAORIGIN+$007F
  2302 = 9B69			BNK	= DATAORIGIN+$0080
  2303 = 9B6A			ADR	= DATAORIGIN+$0081
  2304
  2305 = 9B66			@VarData	= POSITION
  2306 = 0005			@VarDataSize	= 5
  2307
  2308 26FE 60				rts						; ret
  2309 				.endl
  2310
  2311 26FF			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2312
  2313 				; optimize OK (vbxe_memorystream.inc), line = 39
  2314
  2315 26FF AC 6C 9B 84 84 AC + 	mwy POSITION :bp2
  2316 2709 A0 02			ldy #$02
  2317 270B B1 84			lda (:bp2),y
  2318 270D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2319 270F 88				dey
  2320 2710 B1 84			lda (:bp2),y
  2321 2712 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2322 2714 6A				ror @
  2323 2715 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2324 2717 6A				ror @
  2325 2718 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2326 271A 6A				ror @
  2327 271B 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2328 271D 6A				ror @
  2329 271E 09 80			ora #$80
  2330 2720 8D 6F 9B			sta BNK
  2331
  2332 				; optimize OK (vbxe_memorystream.inc), line = 40
  2333
  2334 2723 88				dey
  2335 2724 B1 84			lda (:bp2),y
  2336 2726 8D 70 9B			sta ADR
  2337 2729 C8				iny
  2338 272A B1 84			lda (:bp2),y
  2339 272C 29 0F			and #$0F
  2340 272E 09 B0			ora #$B0
  2341 2730 8D 71 9B			sta ADR+1
  2342
  2343 				; optimize OK (vbxe_memorystream.inc), line = 42
  2344
  2345 2733 AD 6F 9B			lda BNK
  2346 2736 20 84 26			jsr VBXEMEMORYBANK
  2347
  2348 				; optimize OK (vbxe_memorystream.inc), line = 44
  2349
  2350 2739 AC 71 9B			ldy ADR+1
  2351 273C 84 83			sty :bp+1
  2352 273E AC 70 9B			ldy ADR
  2353 2741 AD 6E 9B			lda A
  2354 2744 91 82			sta (:bp),y
  2355
  2356 				; optimize OK (vbxe_memorystream.inc), line = 46
  2357
  2358 2746 AC 6C 9B 84 84 AC + 	mwy POSITION :bp2
  2359 2750 A0 00			ldy #$00
  2360 2752 B1 84			lda (:bp2),y
  2361 2754 18 69 01			add #$01
  2362 2757 91 84			sta (:bp2),y
  2363 2759 C8				iny
  2364 275A B1 84			lda (:bp2),y
  2365 275C 69 00			adc #$00
  2366 275E 91 84			sta (:bp2),y
  2367 2760 C8				iny
  2368 2761 B1 84			lda (:bp2),y
  2369 2763 69 00			adc #$00
  2370 2765 91 84			sta (:bp2),y
  2371 2767 C8				iny
  2372 2768 B1 84			lda (:bp2),y
  2373 276A 69 00			adc #$00
  2374 276C 91 84			sta (:bp2),y
  2375
  2376 				; ------------------------------------------------------------
  2377
  2378 = 9B6C			POSITION	= DATAORIGIN+$0083
  2379 = 9B6E			A	= DATAORIGIN+$0085
  2380 = 9B6F			BNK	= DATAORIGIN+$0086
  2381 = 9B70			ADR	= DATAORIGIN+$0087
  2382
  2383 = 9B6C			@VarData	= POSITION
  2384 = 0006			@VarDataSize	= 6
  2385
  2386 276E			@exit
  2387 					.ifdef @new
  2388 					lda <@VarData
  2389 					sta :ztmp
  2390 					lda >@VarData
  2391 					ldy #@VarDataSize-1
  2392 					jmp @FreeMem
  2393 					els
  2394 276E 60				rts						; ret
  2395 					eif
  2396 				.endl
  2397
  2398 276F			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2399 276F 8D 7E 9B			sta TVBXEMEMORYSTREAM
  2400 2772 8C 7F 9B			sty TVBXEMEMORYSTREAM+1
  2401 2775 8D 84 9B			sta POSITION
  2402 2778 8C 85 9B			sty POSITION+1
  2403 277B 18 69 04			add #4
  2404 277E 90 01			scc
  2405 2780 C8				iny
  2406 2781 8D 86 9B			sta SIZE
  2407 2784 8C 87 9B			sty SIZE+1
  2408
  2409 				; optimize OK (vbxe_memorystream.inc), line = 124
  2410
  2411 2787 AC 84 9B 84 84 AC + 	mwy POSITION :bp2
  2412 2791 A0 02			ldy #$02
  2413 2793 B1 84			lda (:bp2),y
  2414 2795 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2415 2797 88				dey
  2416 2798 B1 84			lda (:bp2),y
  2417 279A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2418 279C 6A				ror @
  2419 279D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2420 279F 6A				ror @
  2421 27A0 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2422 27A2 6A				ror @
  2423 27A3 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2424 27A5 6A				ror @
  2425 27A6 09 80			ora #$80
  2426 27A8 8D 88 9B			sta BNK
  2427
  2428 				; optimize OK (vbxe_memorystream.inc), line = 125
  2429
  2430 27AB 88				dey
  2431 27AC B1 84			lda (:bp2),y
  2432 27AE 8D 89 9B			sta ADR
  2433 27B1 C8				iny
  2434 27B2 B1 84			lda (:bp2),y
  2435 27B4 29 0F			and #$0F
  2436 27B6 09 B0			ora #$B0
  2437 27B8 8D 8A 9B			sta ADR+1
  2438
  2439 				; optimize OK (vbxe_memorystream.inc), line = 127
  2440
  2441 27BB AD 88 9B			lda BNK
  2442 27BE 20 84 26			jsr VBXEMEMORYBANK
  2443
  2444 				; optimize OK (vbxe_memorystream.inc), line = 129
  2445
  2446 27C1 AD 80 9B			lda BUFFER
  2447 27C4 8D 8D 9B			sta SRC
  2448 27C7 AD 81 9B			lda BUFFER+1
  2449 27CA 8D 8E 9B			sta SRC+1
  2450
  2451 				; optimize OK (vbxe_memorystream.inc), line = 131
  2452
  2453 27CD A9 00			lda #$00
  2454 27CF 8D 8B 9B			sta I
  2455 27D2 8D 8C 9B			sta I+1
  2456 27D5 AD 82 9B			lda COUNT
  2457 27D8 38 E9 01			sub #$01
  2458 27DB 8D EE 27			sta @FORTMP_0408_0
  2459 27DE AD 83 9B			lda COUNT+1
  2460 27E1 E9 00			sbc #$00
  2461 27E3 8D E7 27			sta @FORTMP_0408_1
  2462
  2463 27E6			l_040B
  2464 				; --- ForToDoCondition
  2465 27E6 A9 00			lda @FORTMP_0408_1::#$00
  2466 27E8 CD 8C 9B			cmp I+1
  2467 27EB D0 05			bne @+
  2468 27ED A9 00			lda @FORTMP_0408_0::#$00
  2469 27EF CD 8B 9B			cmp I
  2470 				@
  2471 27F2 90 53			jcc l_0417
  2472
  2473 				; optimize OK (vbxe_memorystream.inc), line = 133
  2474
  2475 27F4 AC 8D 9B 84 84 AC + 	mwy SRC :bp2
  2476 27FE A0 00			ldy #$00
  2477 2800 B1 84			lda (:bp2),y
  2478 2802 AC 8A 9B			ldy ADR+1
  2479 2805 84 83			sty :bp+1
  2480 2807 AC 89 9B			ldy ADR
  2481 280A 91 82			sta (:bp),y
  2482
  2483 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2484
  2485 280C EE 89 9B			inc ADR
  2486 280F D0 03			sne
  2487 2811 EE 8A 9B			inc ADR+1
  2488
  2489 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2490
  2491 2814 EE 8D 9B			inc SRC
  2492 2817 D0 03			sne
  2493 2819 EE 8E 9B			inc SRC+1
  2494
  2495 				; optimize OK (vbxe_memorystream.inc), line = 138
  2496
  2497 281C AD 8A 9B			lda ADR+1
  2498 281F C9 C0			cmp #$C0
  2499 2821 90 1A			jcc l_0436
  2500 2823 D0 05			bne @+
  2501 2825 AD 89 9B			lda ADR
  2502 2828 90 13			jcc l_0436
  2503 				@
  2504
  2505 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2506
  2507 282A EE 88 9B			inc BNK
  2508
  2509 				; optimize OK (vbxe_memorystream.inc), line = 140
  2510
  2511 282D AD 88 9B			lda BNK
  2512 2830 20 84 26			jsr VBXEMEMORYBANK
  2513
  2514 				; optimize OK (vbxe_memorystream.inc), line = 141
  2515
  2516 2833 A9 00			lda #$00
  2517 2835 8D 89 9B			sta ADR
  2518 2838 A9 B0			lda #$B0
  2519 283A 8D 8A 9B			sta ADR+1
  2520 283D			l_0436
  2521
  2522 				; --- ForToDoEpilog
  2523 283D EE 8B 9B			inc I
  2524 2840 D0 A4			jne l_040B
  2525 2842 EE 8C 9B			inc I+1
  2526 2845 D0 9F			jne l_040B
  2527 2847			l_0417
  2528
  2529 				; optimize OK (vbxe_memorystream.inc), line = 146
  2530
  2531 2847 A9 00			lda #$00
  2532 2849 20 84 26			jsr VBXEMEMORYBANK
  2533
  2534 				; optimize OK (vbxe_memorystream.inc), line = 148
  2535
  2536 284C AC 84 9B 84 84 AC + 	mwy POSITION :bp2
  2537 2856 A0 00			ldy #$00
  2538 2858 B1 84			lda (:bp2),y
  2539 285A 18 6D 82 9B			add COUNT
  2540 285E 91 84			sta (:bp2),y
  2541 2860 C8				iny
  2542 2861 B1 84			lda (:bp2),y
  2543 2863 6D 83 9B			adc COUNT+1
  2544 2866 91 84			sta (:bp2),y
  2545 2868 C8				iny
  2546 2869 B1 84			lda (:bp2),y
  2547 286B 69 00			adc #$00
  2548 286D 91 84			sta (:bp2),y
  2549 286F C8				iny
  2550 2870 B1 84			lda (:bp2),y
  2551 2872 69 00			adc #$00
  2552 2874 91 84			sta (:bp2),y
  2553
  2554 				; ------------------------------------------------------------
  2555
  2556 = 9B7E			TVBXEMEMORYSTREAM	= DATAORIGIN+$0095
  2557 = 9B80			BUFFER	= DATAORIGIN+$0097
  2558 = 9B82			COUNT	= DATAORIGIN+$0099
  2559 = 9B84			POSITION	= DATAORIGIN+$009B
  2560 = 9B86			SIZE	= DATAORIGIN+$009D
  2561 = 9B88			BNK	= DATAORIGIN+$009F
  2562 = 9B89			ADR	= DATAORIGIN+$00A0
  2563 = 9B8B			I	= DATAORIGIN+$00A2
  2564 = 9B8D			SRC	= DATAORIGIN+$00A4
  2565
  2566 = 9B7E			@VarData	= TVBXEMEMORYSTREAM
  2567 = 0011			@VarDataSize	= 17
  2568
  2569 2876			@exit
  2570 					.ifdef @new
  2571 					lda <@VarData
  2572 					sta :ztmp
  2573 					lda >@VarData
  2574 					ldy #@VarDataSize-1
  2575 					jmp @FreeMem
  2576 					els
  2577 2876 60				rts						; ret
  2578 					eif
  2579 				.endl
  2580
  2581 2877			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2582 2877 8D 91 9B			sta TVBXEMEMORYSTREAM
  2583 287A 8C 92 9B			sty TVBXEMEMORYSTREAM+1
  2584 287D 8D 94 9B			sta POSITION
  2585 2880 8C 95 9B			sty POSITION+1
  2586 2883 18 69 04			add #4
  2587 2886 90 01			scc
  2588 2888 C8				iny
  2589 2889 8D 96 9B			sta SIZE
  2590 288C 8C 97 9B			sty SIZE+1
  2591
  2592 				; optimize OK (vbxe_memorystream.inc), line = 158
  2593
  2594 288F AD 94 9B			lda POSITION
  2595 2892 8D 66 9B			sta READVBXEMEMORYBYTE.POSITION
  2596 2895 AD 95 9B			lda POSITION+1
  2597 2898 8D 67 9B			sta READVBXEMEMORYBYTE.POSITION+1
  2598 289B 20 8F 26			jsr READVBXEMEMORYBYTE
  2599 289E AD 68 9B			lda READVBXEMEMORYBYTE.RESULT
  2600 28A1 8D 93 9B			sta RESULT
  2601
  2602 				; optimize OK (vbxe_memorystream.inc), line = 160
  2603
  2604 28A4 A9 00			lda #$00
  2605 28A6 20 84 26			jsr VBXEMEMORYBANK
  2606 28A9			@exit
  2607
  2608 				; ------------------------------------------------------------
  2609
  2610 = 9B91			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A8
  2611 = 9B93			RESULT	= DATAORIGIN+$00AA
  2612 = 9B94			POSITION	= DATAORIGIN+$00AB
  2613 = 9B96			SIZE	= DATAORIGIN+$00AD
  2614
  2615 = 9B91			@VarData	= TVBXEMEMORYSTREAM
  2616 = 0006			@VarDataSize	= 6
  2617
  2618 28A9 60				rts						; ret
  2619 				.endl
  2620
  2621 28AA			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2622 28AA 8D A0 9B			sta TVBXEMEMORYSTREAM
  2623 28AD 8C A1 9B			sty TVBXEMEMORYSTREAM+1
  2624 28B0 8D A3 9B			sta POSITION
  2625 28B3 8C A4 9B			sty POSITION+1
  2626 28B6 18 69 04			add #4
  2627 28B9 90 01			scc
  2628 28BB C8				iny
  2629 28BC 8D A5 9B			sta SIZE
  2630 28BF 8C A6 9B			sty SIZE+1
  2631
  2632 				; optimize OK (vbxe_memorystream.inc), line = 198
  2633
  2634 28C2 AD A3 9B			lda POSITION
  2635 28C5 8D 6C 9B			sta WRITEVBXEMEMORYBYTE.POSITION
  2636 28C8 AD A4 9B			lda POSITION+1
  2637 28CB 8D 6D 9B			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2638 28CE AD A2 9B			lda B
  2639 28D1 8D 6E 9B			sta WRITEVBXEMEMORYBYTE.A
  2640 28D4 20 FF 26			jsr WRITEVBXEMEMORYBYTE
  2641
  2642 				; optimize OK (vbxe_memorystream.inc), line = 200
  2643
  2644 28D7 A9 00			lda #$00
  2645 28D9 20 84 26			jsr VBXEMEMORYBANK
  2646
  2647 				; ------------------------------------------------------------
  2648
  2649 = 9BA0			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B7
  2650 = 9BA2			B	= DATAORIGIN+$00B9
  2651 = 9BA3			POSITION	= DATAORIGIN+$00BA
  2652 = 9BA5			SIZE	= DATAORIGIN+$00BC
  2653
  2654 = 9BA0			@VarData	= TVBXEMEMORYSTREAM
  2655 = 0007			@VarDataSize	= 7
  2656
  2657 28DC			@exit
  2658 					.ifdef @new
  2659 					lda <@VarData
  2660 					sta :ztmp
  2661 					lda >@VarData
  2662 					ldy #@VarDataSize-1
  2663 					jmp @FreeMem
  2664 					els
  2665 28DC 60				rts						; ret
  2666 					eif
  2667 				.endl
  2668
  2669 28DD			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2670 28DD 8D AF 9B			sta TVBXEMEMORYSTREAM
  2671 28E0 8C B0 9B			sty TVBXEMEMORYSTREAM+1
  2672 28E3 8D B1 9B			sta POSITION
  2673 28E6 8C B2 9B			sty POSITION+1
  2674 28E9 18 69 04			add #4
  2675 28EC 90 01			scc
  2676 28EE C8				iny
  2677 28EF 8D B3 9B			sta SIZE
  2678 28F2 8C B4 9B			sty SIZE+1
  2679
  2680 				; optimize OK (vbxe_memorystream.inc), line = 239
  2681
  2682 28F5 AC B1 9B 84 84 AC + 	mwy POSITION :bp2
  2683 28FF A0 00			ldy #$00
  2684 2901 B1 84			lda (:bp2),y
  2685 2903 8D B5 9B			sta ADR
  2686 2906 C8				iny
  2687 2907 B1 84			lda (:bp2),y
  2688 2909 8D B6 9B			sta ADR+1
  2689 290C C8				iny
  2690 290D B1 84			lda (:bp2),y
  2691 290F 8D B7 9B			sta ADR+2
  2692 2912 C8				iny
  2693 2913 B1 84			lda (:bp2),y
  2694 2915 8D B8 9B			sta ADR+3
  2695
  2696 				; optimize OK (vbxe_memorystream.inc), line = 240
  2697
  2698 2918 AC B3 9B 84 84 AC + 	mwy SIZE :bp2
  2699 2922 A0 00			ldy #$00
  2700 2924 B1 84			lda (:bp2),y
  2701 2926 8D B9 9B			sta SIZ
  2702 2929 C8				iny
  2703 292A B1 84			lda (:bp2),y
  2704 292C 8D BA 9B			sta SIZ+1
  2705 292F C8				iny
  2706 2930 B1 84			lda (:bp2),y
  2707 2932 8D BB 9B			sta SIZ+2
  2708 2935 C8				iny
  2709 2936 B1 84			lda (:bp2),y
  2710 2938 8D BC 9B			sta SIZ+3
  2711
  2712 				; -------------------  ASM Block 00000114  -------------------
  2713
  2714 293B 8A 48			txa:pha
  2715
  2716 293D AD B5 9B 8D AB 29		mva adr _adr
  2717 2943 AD B6 9B 8D AC 29		mva adr+1 _adr+1
  2718 2949 AD B7 9B 8D AD 29		mva adr+2 _adr+2
  2719
  2720 294F				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 294F A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2951 A0 5F		        ldy     #FX_MEMS
     4 2953 91 80		        sta     (fxptr),y
  2721
  2722 2955 AD AD 29 CD BB 9B + loop	cpw _adr+1 siz+1
  2723 2963 B0 37			bcs skp
  2724
  2725 2965 A0 14			ldy #20
  2726 2967 B9 A5 29 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2727
  2728 2970				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 2970 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 2972 A0 50		        ldy     #FX_BL_ADR0
     4 2974 91 80		        sta     (fxptr),y
  2729 2976				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 2976 A9 00		        lda     #$00
     3 2978 A0 51		        ldy     #FX_BL_ADR1
     4 297A 91 80		        sta     (fxptr),y
  2730 297C				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 297C A0 52		        ldy     #FX_BL_ADR2
     3 297E 91 80		        sta     (fxptr),y
  2731
  2732 2980				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 2980 A9 01		        lda     #$01
     3 2982 A0 53		        ldy     #FX_BLITTER_START
     4 2984 91 80		        sta     (fxptr),y
  2733
  2734 2986			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 2986 A0 53		        ldy     #FX_BLITTER_BUSY
     3 2988 B1 80		        lda     (fxptr),y
  2735 298A D0 FA			bne wait
  2736
  2737 298C A9 00			lda #$00
  2738 298E 8D AB 29			sta _adr
  2739 2991 EE AC 29 D0 03 EE + 	inw _adr+1
  2740
  2741 2999 4C 55 29			jmp loop
  2742
  2743 299C			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 299C A9 00		        lda     #$00
     3 299E A0 5F		        ldy     #FX_MEMS
     4 29A0 91 80		        sta     (fxptr),y
  2744
  2745 29A2 4C BA 29			jmp stop
  2746
  2747 29A5 00 00 00		bltClr	.long 0x00	; source address
  2748 29A8 00 00			.word 0x00	; source step y
  2749 29AA 00				.byte 0x00	; source step x
  2750 29AB 00 00 00		_adr	.long 0x00	; destination address
  2751 29AE 00 01			.word 0x0100	; destination step y
  2752 29B0 01				.byte 0x01	; destination step x
  2753 29B1 FF 00		_siz	.word 0xff	; width
  2754 29B3 00				.byte 0x00	; height
  2755 29B4 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2756 29B5 00				dta 0x00	; xor mask
  2757 29B6 00				dta 0x00	; collision and mask
  2758 29B7 00				dta 0x00	; zoom
  2759 29B8 00				dta 0x00	; pattern feature
  2760 29B9 00				dta 0x00	; control
  2761
  2762 29BA 68 AA		stop	pla:tax
  2763
  2764 				; optimize OK (vbxe_memorystream.inc), line = 292
  2765
  2766 29BC AC B1 9B 84 84 AC + 	mwy POSITION :bp2
  2767 29C6 A0 00			ldy #$00
  2768 29C8 98				tya
  2769 29C9 91 84			sta (:bp2),y
  2770 29CB C8				iny
  2771 29CC 91 84			sta (:bp2),y
  2772 29CE C8				iny
  2773 29CF 91 84			sta (:bp2),y
  2774 29D1 C8				iny
  2775 29D2 91 84			sta (:bp2),y
  2776
  2777 				; optimize OK (vbxe_memorystream.inc), line = 293
  2778
  2779 29D4 AC B3 9B 84 84 AC + 	mwy SIZE :bp2
  2780 29DE A0 00			ldy #$00
  2781 29E0 91 84			sta (:bp2),y
  2782 29E2 C8				iny
  2783 29E3 91 84			sta (:bp2),y
  2784 29E5 C8				iny
  2785 29E6 A9 08			lda #$08
  2786 29E8 91 84			sta (:bp2),y
  2787 29EA C8				iny
  2788 29EB A9 00			lda #$00
  2789 29ED 91 84			sta (:bp2),y
  2790
  2791 				; ------------------------------------------------------------
  2792
  2793 = 9BAF			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C6
  2794 = 9BB1			POSITION	= DATAORIGIN+$00C8
  2795 = 9BB3			SIZE	= DATAORIGIN+$00CA
  2796 = 9BB5			ADR	= DATAORIGIN+$00CC
  2797 = 9BB9			SIZ	= DATAORIGIN+$00D0
  2798
  2799 = 9BAF			@VarData	= TVBXEMEMORYSTREAM
  2800 = 000E			@VarDataSize	= 14
  2801
  2802 29EF			@exit
  2803 					.ifdef @new
  2804 					lda <@VarData
  2805 					sta :ztmp
  2806 					lda >@VarData
  2807 					ldy #@VarDataSize-1
  2808 					jmp @FreeMem
  2809 					els
  2810 29EF 60				rts						; ret
  2811 					eif
  2812 				.endl
  2813
  2814 29F0			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2815
  2816 				; -------------------  ASM Block 00000123  -------------------
  2817
  2818 					@setxdl #e@xdl.mapoff
  2818 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2818 29F0 A9 05		 LDA# E@XDL.MAPOFF
  2818 29F2 20 D3 19		 JSR @SETXDL
  2819
  2820 29F5			@exit
  2821 					.ifdef @new
  2822 					lda <@VarData
  2823 					sta :ztmp
  2824 					lda >@VarData
  2825 					ldy #@VarDataSize-1
  2826 					jmp @FreeMem
  2827 					els
  2828 29F5 60				rts						; ret
  2829 					eif
  2830 				.endl
  2831
  2832 29F6			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2833 29F6			.local	@0201810000180000
  2834
  2835 				; optimize OK (VBXE), line = 643
  2836
  2837 29F6 AD BD 9B			lda A
  2838 29F9 8D EB 9A			sta SYSTEM.GRAPHMODE
  2839
  2840 				; optimize OK (VBXE), line = 645
  2841
  2842 29FC A9 C0			lda #$C0
  2843 29FE 8D F0 9A			sta SYSTEM.SCREENHEIGHT
  2844 2A01 A9 00			lda #$00
  2845 2A03 8D F1 9A			sta SYSTEM.SCREENHEIGHT+1
  2846
  2847 				; optimize OK (VBXE), line = 647
  2848
  2849 2A06 AD BD 9B			lda A
  2850 2A09 8D C0 9B			sta @CASETMP_0005
  2851 2A0C C9 0A			cmp #$0A
  2852 2A0E D0 12			jne l_04AD
  2853 				@
  2854
  2855 				; optimize OK (VBXE), line = 648
  2856
  2857 2A10 A9 A0			lda #$A0
  2858 2A12 8D EE 9A			sta SYSTEM.SCREENWIDTH
  2859 2A15 A9 00			lda #$00
  2860 2A17 8D EF 9A			sta SYSTEM.SCREENWIDTH+1
  2861 2A1A A9 01			lda #$01
  2862 2A1C 8D BD 9B			sta A
  2863 2A1F 4C 67 2A			jmp a_0005
  2864 2A22			l_04AD
  2865 2A22 C9 1F			cmp #$1F
  2866 2A24 D0 12			jne l_04BC
  2867
  2868 				; optimize OK (VBXE), line = 649
  2869
  2870 2A26 A9 40			lda #$40
  2871 2A28 8D EE 9A			sta SYSTEM.SCREENWIDTH
  2872 2A2B A9 01			lda #$01
  2873 2A2D 8D EF 9A			sta SYSTEM.SCREENWIDTH+1
  2874 2A30 A9 02			lda #$02
  2875 2A32 8D BD 9B			sta A
  2876 2A35 4C 67 2A			jmp a_0005
  2877 2A38			l_04BC
  2878 2A38 C9 18			cmp #$18
  2879 2A3A D0 12			jne l_04CB
  2880
  2881 				; optimize OK (VBXE), line = 650
  2882
  2883 2A3C A9 80			lda #$80
  2884 2A3E 8D EE 9A			sta SYSTEM.SCREENWIDTH
  2885 2A41 A9 02			lda #$02
  2886 2A43 8D EF 9A			sta SYSTEM.SCREENWIDTH+1
  2887 2A46 A9 03			lda #$03
  2888 2A48 8D BD 9B			sta A
  2889 2A4B 4C 67 2A			jmp a_0005
  2890 2A4E			l_04CB
  2891
  2892 				; optimize OK (VBXE), line = 654
  2893
  2894 2A4E A9 50			lda #$50
  2895 2A50 8D EE 9A			sta SYSTEM.SCREENWIDTH
  2896 2A53 A9 00			lda #$00
  2897 2A55 8D EF 9A			sta SYSTEM.SCREENWIDTH+1
  2898
  2899 				; optimize OK (VBXE), line = 655
  2900
  2901 2A58 A9 18			lda #$18
  2902 2A5A 8D F0 9A			sta SYSTEM.SCREENHEIGHT
  2903 2A5D A9 00			lda #$00
  2904 2A5F 8D F1 9A			sta SYSTEM.SCREENHEIGHT+1
  2905
  2906 				; optimize OK (VBXE), line = 656
  2907
  2908 2A62 A9 02			lda #$02
  2909 2A64 8D BD 9B			sta A
  2910 2A67			a_0005
  2911
  2912 				; -------------------  ASM Block 00000124  -------------------
  2913
  2914 2A67 8A 48			txa:pha
  2915
  2916 2A69 AD EE 9A			lda MAIN.SYSTEM.ScreenWidth
  2917 2A6C AE EF 9A			ldx MAIN.SYSTEM.ScreenWidth+1
  2918
  2919 2A6F AC F0 9A			ldy MAIN.SYSTEM.ScreenHeight
  2920
  2921 2A72 20 64 11			@SCREENSIZE
  2922
  2923 					@setxdl a
  2923 				 LDA A\ JSR @SETXDL
  2923 2A75 AD BD 9B		 LDA A
  2923 2A78 20 D3 19		 JSR @SETXDL
  2924
  2925 2A7B				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2A7B A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2A7D A0 5F		        ldy     #FX_MEMS
     4 2A7F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2926
  2927 2A81 A0 09			ldy #s@xdl.ovstep
  2928
  2929 2A83 AD BE 9B			lda s
  2930 2A86 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2931
  2932 2A89 AD BF 9B			lda s+1
  2933 2A8C 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2934
  2935 2A8F				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2A8F A9 00		        lda     #$00
     3 2A91 A0 5F		        ldy     #FX_MEMS
     4 2A93 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2936
  2937 2A95 68 AA			pla:tax
  2938
  2939 				; ------------------------------------------------------------
  2940
  2941 = 9BBD			A	= DATAORIGIN+$00D4
  2942 = 9BBE			S	= DATAORIGIN+$00D5
  2943 = 9BC0			@CASETMP_0005	= DATAORIGIN+$00D7
  2944
  2945 = 9BBD			@VarData	= A
  2946 = 0004			@VarDataSize	= 4
  2947
  2948 2A97			@exit
  2949 					.ifdef @new
  2950 					lda <@VarData
  2951 					sta :ztmp
  2952 					lda >@VarData
  2953 					ldy #@VarDataSize-1
  2954 					jmp @FreeMem
  2955 					els
  2956 2A97 60				rts						; ret
  2957 					eif
  2958 				.endl
  2959 				.endl							; overload
  2960
  2961 2A98			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2962 2A98			.local	@010180000
  2963 2A98 8D C1 9B			sta A
  2964
  2965 				; optimize OK (VBXE), line = 698
  2966
  2967 2A9B 8D BD 9B			sta SETHORIZONTALRES.@0201810000180000.A
  2968 2A9E A9 40			lda #$40
  2969 2AA0 8D BE 9B			sta SETHORIZONTALRES.@0201810000180000.S
  2970 2AA3 A9 01			lda #$01
  2971 2AA5 8D BF 9B			sta SETHORIZONTALRES.@0201810000180000.S+1
  2972 2AA8 20 F6 29			jsr SETHORIZONTALRES.@0201810000180000
  2973
  2974 				; ------------------------------------------------------------
  2975
  2976 = 9BC1			A	= DATAORIGIN+$00D8
  2977
  2978 = 9BC1			@VarData	= A
  2979 = 0001			@VarDataSize	= 1
  2980
  2981 2AAB			@exit
  2982 					.ifdef @new
  2983 					lda <@VarData
  2984 					sta :ztmp
  2985 					lda >@VarData
  2986 					ldy #@VarDataSize-1
  2987 					jmp @FreeMem
  2988 					els
  2989 2AAB 60				rts						; ret
  2990 					eif
  2991 				.endl
  2992 				.endl							; overload
  2993
  2994 2AAC			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2995
  2996 				; -------------------  ASM Block 00000126  -------------------
  2997
  2998 2AAC				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 2AAC AD C2 9B		        lda     A
     3 2AAF A0 50		        ldy     #FX_BL_ADR0
     4 2AB1 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2999 2AB3 AD C3 9B			lda	a+1
  3000 2AB6 29 0F			and	#$0f
  3001 2AB8				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 2AB8 A0 51		        ldy     #FX_BL_ADR1
     3 2ABA 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3002 2ABC				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 2ABC A9 00		        lda     #$00
     3 2ABE A0 52		        ldy     #FX_BL_ADR2
     4 2AC0 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3003
  3004 2AC2				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 2AC2 A9 01		        lda     #$01
     3 2AC4 A0 53		        ldy     #FX_BLITTER_START
     4 2AC6 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3005
  3006 				;wait	fxla	FX_BLITTER_BUSY
  3007 				;	bne	wait
  3008
  3009 				; ------------------------------------------------------------
  3010
  3011 = 9BC2			A	= DATAORIGIN+$00D9
  3012 = 9AE9			A.SRC_ADR	= DATAORIGIN+$0000
  3013 = 9AE9			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  3014 = 9AEA			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  3015 = 9AEB			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  3016 = 9AEC			A.SRC_STEP_Y	= DATAORIGIN+$0003
  3017 = 9AEE			A.SRC_STEP_X	= DATAORIGIN+$0005
  3018 = 9AEF			A.DST_ADR	= DATAORIGIN+$0006
  3019 = 9AEF			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  3020 = 9AF0			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  3021 = 9AF1			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  3022 = 9AF2			A.DST_STEP_Y	= DATAORIGIN+$0009
  3023 = 9AF4			A.DST_STEP_X	= DATAORIGIN+$000B
  3024 = 9AF5			A.BLT_WIDTH	= DATAORIGIN+$000C
  3025 = 9AF7			A.BLT_HEIGHT	= DATAORIGIN+$000E
  3026 = 9AF8			A.BLT_AND_MASK	= DATAORIGIN+$000F
  3027 = 9AF9			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  3028 = 9AFA			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  3029 = 9AFB			A.BLT_ZOOM	= DATAORIGIN+$0012
  3030 = 9AFC			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  3031 = 9AFD			A.BLT_CONTROL	= DATAORIGIN+$0014
  3032
  3033 = 9BC2			@VarData	= A
  3034 = 0002			@VarDataSize	= 2
  3035
  3036 2AC8			@exit
  3037 					.ifdef @new
  3038 					lda <@VarData
  3039 					sta :ztmp
  3040 					lda >@VarData
  3041 					ldy #@VarDataSize-1
  3042 					jmp @FreeMem
  3043 					els
  3044 2AC8 60				rts						; ret
  3045 					eif
  3046 				.endl
  3047
  3048 2AC9			.local	GETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  3049
  3050 				; -------------------  ASM Block 00000127  -------------------
  3051
  3052 2AC9				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2AC9 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2ACB A0 5F		        ldy     #FX_MEMS
     4 2ACD 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3053
  3054 2ACF A0 16			ldy #.sizeof(s@xdl)-1
  3055
  3056 2AD1 B9 00 B0		lp	lda MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  3057 2AD4 91 8A			sta (a),y
  3058 2AD6 88				dey
  3059 2AD7 10 F8			bpl lp
  3060
  3061 2AD9				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2AD9 A9 00		        lda     #0
     3 2ADB A0 5F		        ldy     #FX_MEMS
     4 2ADD 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3062
  3063 				; ------------------------------------------------------------
  3064
  3065 = 008A			A	= :EDX
  3066 = 9AE9			A.XDLC_	= DATAORIGIN+$0000
  3067 = 9AEB			A.RPTL_	= DATAORIGIN+$0002
  3068 = 9AEC			A.XDLC	= DATAORIGIN+$0003
  3069 = 9AEE			A.RPTL	= DATAORIGIN+$0005
  3070 = 9AEF			A.OV_ADR	= DATAORIGIN+$0006
  3071 = 9AEF			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  3072 = 9AF0			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  3073 = 9AF1			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  3074 = 9AF2			A.OV_STEP	= DATAORIGIN+$0009
  3075 = 9AF4			A.OV_CHBASE	= DATAORIGIN+$000B
  3076 = 9AF5			A.MP_ADR	= DATAORIGIN+$000C
  3077 = 9AF5			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  3078 = 9AF6			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  3079 = 9AF7			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  3080 = 9AF8			A.MP_STEP	= DATAORIGIN+$000F
  3081 = 9AFA			A.MP_HSCROL	= DATAORIGIN+$0011
  3082 = 9AFB			A.MP_VSCROL	= DATAORIGIN+$0012
  3083 = 9AFC			A.MP_WIDTH	= DATAORIGIN+$0013
  3084 = 9AFD			A.MP_HEIGHT	= DATAORIGIN+$0014
  3085 = 9AFE			A.OV_WIDTH	= DATAORIGIN+$0015
  3086 = 9AFF			A.OV_PRIOR	= DATAORIGIN+$0016
  3087
  3088 2ADF			@exit
  3089 					.ifdef @new
  3090 					lda <@VarData
  3091 					sta :ztmp
  3092 					lda >@VarData
  3093 					ldy #@VarDataSize-1
  3094 					jmp @FreeMem
  3095 					els
  3096 2ADF 60				rts						; ret
  3097 					eif
  3098 				.endl
  3099
  3100 2AE0			.local	SETXDL						; PROCEDURE | ASSEMBLER | REGISTER
  3101
  3102 				; -------------------  ASM Block 00000128  -------------------
  3103
  3104 2AE0				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 2AE0 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 2AE2 A0 5F		        ldy     #FX_MEMS
     4 2AE4 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3105
  3106 2AE6 A0 16			ldy #.sizeof(s@xdl)-1
  3107
  3108 2AE8 B1 8A		lp	lda (a),y
  3109 2AEA 99 00 B0			sta MAIN.SYSTEM.VBXE_XDLADR+MAIN.SYSTEM.VBXE_WINDOW,y
  3110 2AED 88				dey
  3111 2AEE 10 F8			bpl lp
  3112
  3113 2AF0				fxs FX_MEMS #0
Macro: FXS [Source: vbxe.hea]
     2 2AF0 A9 00		        lda     #0
     3 2AF2 A0 5F		        ldy     #FX_MEMS
     4 2AF4 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3114
  3115 				; ------------------------------------------------------------
  3116
  3117 = 008A			A	= :EDX
  3118 = 9AE9			A.XDLC_	= DATAORIGIN+$0000
  3119 = 9AEB			A.RPTL_	= DATAORIGIN+$0002
  3120 = 9AEC			A.XDLC	= DATAORIGIN+$0003
  3121 = 9AEE			A.RPTL	= DATAORIGIN+$0005
  3122 = 9AEF			A.OV_ADR	= DATAORIGIN+$0006
  3123 = 9AEF			A.OV_ADR.BYTE0	= DATAORIGIN+$0006
  3124 = 9AF0			A.OV_ADR.BYTE1	= DATAORIGIN+$0007
  3125 = 9AF1			A.OV_ADR.BYTE2	= DATAORIGIN+$0008
  3126 = 9AF2			A.OV_STEP	= DATAORIGIN+$0009
  3127 = 9AF4			A.OV_CHBASE	= DATAORIGIN+$000B
  3128 = 9AF5			A.MP_ADR	= DATAORIGIN+$000C
  3129 = 9AF5			A.MP_ADR.BYTE0	= DATAORIGIN+$000C
  3130 = 9AF6			A.MP_ADR.BYTE1	= DATAORIGIN+$000D
  3131 = 9AF7			A.MP_ADR.BYTE2	= DATAORIGIN+$000E
  3132 = 9AF8			A.MP_STEP	= DATAORIGIN+$000F
  3133 = 9AFA			A.MP_HSCROL	= DATAORIGIN+$0011
  3134 = 9AFB			A.MP_VSCROL	= DATAORIGIN+$0012
  3135 = 9AFC			A.MP_WIDTH	= DATAORIGIN+$0013
  3136 = 9AFD			A.MP_HEIGHT	= DATAORIGIN+$0014
  3137 = 9AFE			A.OV_WIDTH	= DATAORIGIN+$0015
  3138 = 9AFF			A.OV_PRIOR	= DATAORIGIN+$0016
  3139
  3140 2AF6			@exit
  3141 					.ifdef @new
  3142 					lda <@VarData
  3143 					sta :ztmp
  3144 					lda >@VarData
  3145 					ldy #@VarDataSize-1
  3146 					jmp @FreeMem
  3147 					els
  3148 2AF6 60				rts						; ret
  3149 					eif
  3150 				.endl
  3151
  3152 2AF7			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  3153 2AF7 8D C6 9B			sta A
  3154
  3155 				; -------------------  ASM Block 00000130  -------------------
  3156
  3157 2AFA				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 2AFA AD C6 9B		        lda     A
     3 2AFD A0 40		        ldy     #FX_VIDEO_CONTROL
     4 2AFF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3158
  3159 				; ------------------------------------------------------------
  3160
  3161 = 9BC6			A	= DATAORIGIN+$00DD
  3162
  3163 = 9BC6			@VarData	= A
  3164 = 0001			@VarDataSize	= 1
  3165
  3166 2B01			@exit
  3167 					.ifdef @new
  3168 					lda <@VarData
  3169 					sta :ztmp
  3170 					lda >@VarData
  3171 					ldy #@VarDataSize-1
  3172 					jmp @FreeMem
  3173 					els
  3174 2B01 60				rts						; ret
  3175 					eif
  3176 				.endl
  3177
  3178 				; ------------------------------------------------------------
  3179 				; ------------------------------------------------------------
  3180 2B02			@UnitInit
  3181
  3182 				; -------------------  ASM Block 00000138  -------------------
  3183
  3184 2B02 8A 48			txa:pha
  3185
  3186 2B04 20 87 18			jsr @vbxe_detect
  3187 2B07 90 04			bcc ok
  3188
  3189 2B09 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  3190 2B0B D0 05			bne status
  3191
  3192 2B0D 20 DD 18		ok	jsr @vbxe_init
  3193
  3194 2B10 A2 01			ldx #MAIN.GRAPH.grOK
  3195 2B12 8E 34 9B		status	stx MAIN.GRAPH.GraphResult
  3196
  3197 2B15 68 AA			pla:tax
  3198
  3199 2B17 60				rts
  3200
  3201 				; ------------------------------------------------------------
  3202
  3203 = 0001			VC_XDL	= $01
  3204 = 0002			VC_XCOLOR	= $02
  3205 = 0004			VC_NO_TRANS	= $04
  3206 = 0008			VC_TRANS15	= $08
  3207 = 0000			TCBLACK	= $00
  3208 = 0001			TCRED	= $01
  3209 = 0002			TCGREEN	= $02
  3210 = 0003			TCYELLOW	= $03
  3211 = 0004			TCBLUE	= $04
  3212 = 0005			TCMAGENTA	= $05
  3213 = 0006			TCCYAN	= $06
  3214 = 0007			TCWHITE	= $07
  3215 = 0008			TCBRIGHTBLACK	= $08
  3216 = 0009			TCBRIGHTRED	= $09
  3217 = 000A			TCBRIGHTGREEN	= $0A
  3218 = 000B			TCBRIGHTYELLOW	= $0B
  3219 = 000C			TCBRIGHTBLUE	= $0C
  3220 = 000D			TCBRIGHTMAGENTA	= $0D
  3221 = 000E			TCBRIGHTCYAN	= $0E
  3222 = 000F			TCBRIGHTWHITE	= $0F
  3223 = 0080			TBBLACK	= $80
  3224 = 0090			TBRED	= $90
  3225 = 00A0			TBGREEN	= $A0
  3226 = 00B0			TBYELLOW	= $B0
  3227 = 00C0			TBBLUE	= $C0
  3228 = 00D0			TBMAGENTA	= $D0
  3229 = 00E0			TBCYAN	= $E0
  3230 = 00F0			TBWHITE	= $F0
  3231 = 9B5D			adr.VRAM	= DATAORIGIN+$0074	; [8] OBJECT
  3232 2B18			.var VRAM	= adr.VRAM .word
  3233 = 9B5D			VRAM.POSITION	= DATAORIGIN+$0074
  3234 = 9B61			VRAM.SIZE	= DATAORIGIN+$0078
  3235 = 0063			SCROLLBACK_FILL	= $63
  3236 = 19C9			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  3237 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  3238 2B18			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  3239 = 02FD			FILDAT	= $02FD
  3240 = 0054			ROWCRS	= $54
  3241 = 0055			COLCRS	= $55
  3242 = 0068			CRSADR	= $68
  3243
  3244 = 2B18 5D 9B		VRAM
  3244 = 2B1A 00 04		SCROLLBACK_BUFFER
  3244 				.endl							; UNIT VBXE
  3245
  3246 				; ------------------------------------------------------------
  3247
  3248 2B1C			.local	JOYSTICK					; UNIT
  3249
  3250 				; ------------------------------------------------------------
  3251
  3252 = 000F			JOY_NONE	= $0F
  3253 = 000E			JOY_UP	= $0E
  3254 = 000D			JOY_DOWN	= $0D
  3255 = 000B			JOY_LEFT	= $0B
  3256 = 000A			JOY_LEFT_UP	= $0A
  3257 = 0009			JOY_LEFT_DOWN	= $09
  3258 = 0007			JOY_RIGHT	= $07
  3259 = 0006			JOY_RIGHT_UP	= $06
  3260 = 0005			JOY_RIGHT_DOWN	= $05
  3261 = 0278			JOY_1	= $0278
  3262 = 0279			JOY_2	= $0279
  3263 = 0278			adr.STICK	= $0278
  3264 2B1C			.var STICK	= adr.STICK .word
  3265 = 0278			STICK0	= $0278
  3266 = 0279			STICK1	= $0279
  3267 = 0284			adr.STRIG	= $0284
  3268 2B1C			.var STRIG	= adr.STRIG .word
  3269 = 0284			STRIG0	= $0284
  3270 = 0285			STRIG1	= $0285
  3271 = 0270			adr.PADDL	= $0270
  3272 2B1C			.var PADDL	= adr.PADDL .word
  3273 = 0270			PADDL0	= $0270
  3274 = 0271			PADDL1	= $0271
  3275 = 0272			PADDL2	= $0272
  3276 = 0273			PADDL3	= $0273
  3277 = 0274			PADDL4	= $0274
  3278 = 0275			PADDL5	= $0275
  3279 = 0276			PADDL6	= $0276
  3280 = 0277			PADDL7	= $0277
  3281 = 027C			adr.PTRIG	= $027C
  3282 2B1C			.var PTRIG	= adr.PTRIG .word
  3283 = 027C			PTRIG0	= $027C
  3284 = 027D			PTRIG1	= $027D
  3285 = 027E			PTRIG2	= $027E
  3286 = 027F			PTRIG3	= $027F
  3287 = 0280			PTRIG4	= $0280
  3288 = 0281			PTRIG5	= $0281
  3289 = 0282			PTRIG6	= $0282
  3290 = 0283			PTRIG7	= $0283
  3291 = D010			TRIG0	= $D010
  3292 = D011			TRIG1	= $D011
  3293 = D200			POT0	= $D200
  3294 = D208			ALLPOT	= $D208
  3295 = D20B			POTGO	= $D20B
  3296
  3297 = 2B1C 78 02		STICK
  3297 = 2B1E 84 02		STRIG
  3297 = 2B20 70 02		PADDL
  3297 = 2B22 7C 02		PTRIG
  3297 				.endl							; UNIT JOYSTICK
  3298
  3299 2B24			.local	START_LEVEL					; PROCEDURE
  3300
  3301 2B24			@exit
  3302 					.ifdef @new
  3303 					lda <@VarData
  3304 					sta :ztmp
  3305 					lda >@VarData
  3306 					ldy #@VarDataSize-1
  3307 					jmp @FreeMem
  3308 					els
  3309 2B24 60				rts						; ret
  3310 					eif
  3311 				.endl
  3312
  3313 2B25			.local	DEATH_SOUND					; PROCEDURE
  3314
  3315 				; ------------------------------------------------------------
  3316
  3317 = 9BDC			A	= DATAORIGIN+$00F3
  3318
  3319 = 9BDC			@VarData	= A
  3320 = 0002			@VarDataSize	= 2
  3321
  3322 2B25			@exit
  3323 					.ifdef @new
  3324 					lda <@VarData
  3325 					sta :ztmp
  3326 					lda >@VarData
  3327 					ldy #@VarDataSize-1
  3328 					jmp @FreeMem
  3329 					els
  3330 2B25 60				rts						; ret
  3331 					eif
  3332 				.endl
  3333
  3334 2B26			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3335
  3336 				; ------------------------------------------------------------
  3337
  3338 = 9BDE			A	= DATAORIGIN+$00F5
  3339 = 9BE0			B	= DATAORIGIN+$00F7
  3340
  3341 = 9BDE			@VarData	= A
  3342 = 0004			@VarDataSize	= 4
  3343
  3344 2B26			@exit
  3345 					.ifdef @new
  3346 					lda <@VarData
  3347 					sta :ztmp
  3348 					lda >@VarData
  3349 					ldy #@VarDataSize-1
  3350 					jmp @FreeMem
  3351 					els
  3352 2B26 60				rts						; ret
  3353 					eif
  3354 				.endl
  3355
  3356 2B27			.local	MOUSERESET					; PROCEDURE
  3357
  3358 2B27			@exit
  3359 					.ifdef @new
  3360 					lda <@VarData
  3361 					sta :ztmp
  3362 					lda >@VarData
  3363 					ldy #@VarDataSize-1
  3364 					jmp @FreeMem
  3365 					els
  3366 2B27 60				rts						; ret
  3367 					eif
  3368 				.endl
  3369
  3370 2B28			.local	MOUSECLICK					; FUNCTION
  3371
  3372 				; optimize OK (arkanoid_vbxe.pas), line = 83
  3373
  3374 2B28 A9 01			lda #$01
  3375 2B2A 8D E2 9B			sta RESULT
  3376
  3377 				; optimize OK (arkanoid_vbxe.pas), line = 85
  3378
  3379 2B2D 8D D3 9B			sta MOUS.FIRE
  3380 2B30			@exit
  3381
  3382 				; ------------------------------------------------------------
  3383
  3384 = 9BE2			RESULT	= DATAORIGIN+$00F9
  3385
  3386 2B30 60				rts						; ret
  3387 				.endl
  3388
  3389 2B31			.local	MOUSECOORDS					; PROCEDURE
  3390
  3391 				; optimize OK (arkanoid_vbxe.pas), line = 93
  3392
  3393 2B31 AD 00 D3			lda ATARI.PORTA
  3394 2B34 29 0F			and #$0F
  3395 2B36 8D E7 9B			sta A
  3396
  3397 				; optimize OK (arkanoid_vbxe.pas), line = 95
  3398
  3399 2B39 8D E8 9B			sta @CASETMP_0007
  3400 2B3C C9 0B			cmp #$0B
  3401 2B3E D0 23			jne l_052B
  3402 				@
  3403
  3404 				; optimize OK (arkanoid_vbxe.pas), line = 96
  3405
  3406 2B40 AD CB 9B			lda MOUS.LEFT
  3407 2B43 CD C7 9B			cmp MOUS.X
  3408 2B46 AD CC 9B			lda MOUS.LEFT+1
  3409 2B49 ED C8 9B			sbc MOUS.X+1
  3410 2B4C 50 02			svc
  3411 2B4E 49 80			eor #$80
  3412 2B50 10 0E			jpl l_053D
  3413 2B52 AD C7 9B			lda MOUS.X
  3414 2B55 38 E9 02			sub #$02
  3415 2B58 8D C7 9B			sta MOUS.X
  3416 2B5B B0 03			scs
  3417 2B5D CE C8 9B			dec MOUS.X+1
  3418 2B60			l_053D
  3419 2B60 4C 81 2B			jmp a_0007
  3420 2B63			l_052B
  3421 2B63 C9 07			cmp #$07
  3422 2B65 D0 1A			jne l_0548
  3423
  3424 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3425
  3426 2B67 AD C7 9B			lda MOUS.X
  3427 2B6A CD CD 9B			cmp MOUS.RIGHT
  3428 2B6D AD C8 9B			lda MOUS.X+1
  3429 2B70 ED CE 9B			sbc MOUS.RIGHT+1
  3430 2B73 50 02			svc
  3431 2B75 49 80			eor #$80
  3432 2B77 10 08			jpl l_055A
  3433 2B79 EE C7 9B			inc MOUS.X
  3434 2B7C D0 03			sne
  3435 2B7E EE C8 9B			inc MOUS.X+1
  3436 2B81			l_055A
  3437 2B81			l_0548
  3438 2B81			a_0007
  3439
  3440 				; optimize OK (arkanoid_vbxe.pas), line = 100
  3441
  3442 2B81 AC E3 9B 84 84 AC + 	mwy X :bp2
  3443 2B8B A0 00			ldy #$00
  3444 2B8D AD C7 9B			lda MOUS.X
  3445 2B90 91 84			sta (:bp2),y
  3446 2B92 C8				iny
  3447 2B93 AD C8 9B			lda MOUS.X+1
  3448 2B96 91 84			sta (:bp2),y
  3449
  3450 				; ------------------------------------------------------------
  3451
  3452 = 9BE3			X	= DATAORIGIN+$00FA
  3453 = 9BE5			Y	= DATAORIGIN+$00FC
  3454 = 9BE7			A	= DATAORIGIN+$00FE
  3455 = 9BE8			@CASETMP_0007	= DATAORIGIN+$00FF
  3456
  3457 = 9BE3			@VarData	= X
  3458 = 0006			@VarDataSize	= 6
  3459
  3460 2B98			@exit
  3461 					.ifdef @new
  3462 					lda <@VarData
  3463 					sta :ztmp
  3464 					lda >@VarData
  3465 					ldy #@VarDataSize-1
  3466 					jmp @FreeMem
  3467 					els
  3468 2B98 60				rts						; ret
  3469 					eif
  3470 				.endl
  3471
  3472 2B99			.local	MOUSE_X_LIMIT					; PROCEDURE
  3473
  3474 				; optimize OK (arkanoid_vbxe.pas), line = 107
  3475
  3476 2B99 AD E9 9B			lda MN
  3477 2B9C 8D CB 9B			sta MOUS.LEFT
  3478 2B9F AD EA 9B			lda MN+1
  3479 2BA2 8D CC 9B			sta MOUS.LEFT+1
  3480
  3481 				; optimize OK (arkanoid_vbxe.pas), line = 108
  3482
  3483 2BA5 AD EB 9B			lda MX
  3484 2BA8 8D CD 9B			sta MOUS.RIGHT
  3485 2BAB AD EC 9B			lda MX+1
  3486 2BAE 8D CE 9B			sta MOUS.RIGHT+1
  3487
  3488 				; ------------------------------------------------------------
  3489
  3490 = 9BE9			MN	= DATAORIGIN+$0100
  3491 = 9BEB			MX	= DATAORIGIN+$0102
  3492
  3493 = 9BE9			@VarData	= MN
  3494 = 0004			@VarDataSize	= 4
  3495
  3496 2BB1			@exit
  3497 					.ifdef @new
  3498 					lda <@VarData
  3499 					sta :ztmp
  3500 					lda >@VarData
  3501 					ldy #@VarDataSize-1
  3502 					jmp @FreeMem
  3503 					els
  3504 2BB1 60				rts						; ret
  3505 					eif
  3506 				.endl
  3507
  3508 2BB2			.local	MOUSEMOVE					; PROCEDURE
  3509
  3510 				; optimize OK (arkanoid_vbxe.pas), line = 123
  3511
  3512 2BB2 AD ED 9B			lda X
  3513 2BB5 8D C7 9B			sta MOUS.X
  3514 2BB8 AD EE 9B			lda X+1
  3515 2BBB 8D C8 9B			sta MOUS.X+1
  3516
  3517 				; optimize OK (arkanoid_vbxe.pas), line = 124
  3518
  3519 2BBE AD EF 9B			lda Y
  3520 2BC1 8D C9 9B			sta MOUS.Y
  3521 2BC4 AD F0 9B			lda Y+1
  3522 2BC7 8D CA 9B			sta MOUS.Y+1
  3523
  3524 				; ------------------------------------------------------------
  3525
  3526 = 9BED			X	= DATAORIGIN+$0104
  3527 = 9BEF			Y	= DATAORIGIN+$0106
  3528
  3529 = 9BED			@VarData	= X
  3530 = 0004			@VarDataSize	= 4
  3531
  3532 2BCA			@exit
  3533 					.ifdef @new
  3534 					lda <@VarData
  3535 					sta :ztmp
  3536 					lda >@VarData
  3537 					ldy #@VarDataSize-1
  3538 					jmp @FreeMem
  3539 					els
  3540 2BCA 60				rts						; ret
  3541 					eif
  3542 				.endl
  3543
  3544 2BCB			.local	BLITBOX						; PROCEDURE
  3545
  3546 				; -------------------  ASM Block 00000141  -------------------
  3547
  3548 2BCB				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2BCB A9 80		        lda     #$80
     3 2BCD A0 5F		        ldy     #FX_MEMS
     4 2BCF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3549 					
  3550 				; optimize OK (service.pas), line = 301
  3551
  3552 2BD1 AD F4 9F			lda SRC+2
  3553 2BD4 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3554
  3555 				; optimize OK (service.pas), line = 302
  3556
  3557 2BD7 AD F3 9F			lda SRC+1
  3558 2BDA 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3559
  3560 				; optimize OK (service.pas), line = 303
  3561
  3562 2BDD AD F2 9F			lda SRC
  3563 2BE0 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3564
  3565 				; optimize OK (service.pas), line = 305
  3566
  3567 2BE3 AD F8 9F			lda DST+2
  3568 2BE6 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3569
  3570 				; optimize OK (service.pas), line = 306
  3571
  3572 2BE9 AD F7 9F			lda DST+1
  3573 2BEC 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3574
  3575 				; optimize OK (service.pas), line = 307
  3576
  3577 2BEF AD F6 9F			lda DST
  3578 2BF2 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3579
  3580 				; optimize OK (service.pas), line = 309
  3581
  3582 2BF5 A9 01			lda #$01
  3583 2BF7 8D 05 B1			sta BLT.SRC_STEP_X
  3584
  3585 				; optimize OK (service.pas), line = 310
  3586
  3587 2BFA AD FA 9F			lda W
  3588 2BFD 38 E9 01			sub #$01
  3589 2C00 8D 03 B1			sta BLT.SRC_STEP_Y
  3590 2C03 AD FB 9F			lda W+1
  3591 2C06 E9 00			sbc #$00
  3592 2C08 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3593
  3594 				; optimize OK (service.pas), line = 312
  3595
  3596 2C0B A9 01			lda #$01
  3597 2C0D 8D 0B B1			sta BLT.DST_STEP_X
  3598
  3599 				; optimize OK (service.pas), line = 313
  3600
  3601 2C10 AD FA 9F			lda W
  3602 2C13 38 E9 01			sub #$01
  3603 2C16 8D 09 B1			sta BLT.DST_STEP_Y
  3604 2C19 AD FB 9F			lda W+1
  3605 2C1C E9 00			sbc #$00
  3606 2C1E 8D 0A B1			sta BLT.DST_STEP_Y+1
  3607
  3608 				; optimize OK (service.pas), line = 315
  3609
  3610 2C21 AD FA 9F			lda W
  3611 2C24 38 E9 01			sub #$01
  3612 2C27 8D 0C B1			sta BLT.BLT_WIDTH
  3613 2C2A AD FB 9F			lda W+1
  3614 2C2D E9 00			sbc #$00
  3615 2C2F 8D 0D B1			sta BLT.BLT_WIDTH+1
  3616
  3617 				; optimize OK (service.pas), line = 316
  3618
  3619 2C32 AC FC 9F			ldy H
  3620 2C35 88				dey
  3621 2C36 8C 0E B1			sty BLT.BLT_HEIGHT
  3622
  3623 				; optimize OK (service.pas), line = 318
  3624
  3625 2C39 A9 FF			lda #$FF
  3626 2C3B 8D 0F B1			sta BLT.BLT_AND_MASK
  3627
  3628 				; optimize OK (service.pas), line = 320
  3629
  3630 2C3E A9 00			lda #$00
  3631 2C40 8D 12 B1			sta BLT.BLT_ZOOM
  3632
  3633 				; optimize OK (service.pas), line = 322
  3634
  3635 2C43 8D 14 B1			sta BLT.BLT_CONTROL
  3636
  3637 				; -------------------  ASM Block 00000142  -------------------
  3638
  3639 2C46				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2C46 A9 00		        lda     #$00
     3 2C48 A0 5F		        ldy     #FX_MEMS
     4 2C4A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3640 					
  3641 				; optimize OK (service.pas), line = 328
  3642
  3643 2C4C AD 77 9A			lda BLT
  3644 2C4F 8D C2 9B			sta VBXE.RUNBCB.A
  3645 2C52 AD 78 9A			lda BLT+1
  3646 2C55 8D C3 9B			sta VBXE.RUNBCB.A+1
  3647 2C58 20 AC 2A			jsr VBXE.RUNBCB
  3648
  3649 				; ------------------------------------------------------------
  3650
  3651 = 9FF2			SRC	= DATAORIGIN+$0509
  3652 = 9FF6			DST	= DATAORIGIN+$050D
  3653 = 9FFA			W	= DATAORIGIN+$0511
  3654 = 9FFC			H	= DATAORIGIN+$0513
  3655
  3656 = 9FF2			@VarData	= SRC
  3657 = 000B			@VarDataSize	= 11
  3658
  3659 2C5B			@exit
  3660 					.ifdef @new
  3661 					lda <@VarData
  3662 					sta :ztmp
  3663 					lda >@VarData
  3664 					ldy #@VarDataSize-1
  3665 					jmp @FreeMem
  3666 					els
  3667 2C5B 60				rts						; ret
  3668 					eif
  3669 				.endl
  3670
  3671 2C5C			.local	BLITZERO					; PROCEDURE
  3672
  3673 				; -------------------  ASM Block 00000143  -------------------
  3674
  3675 2C5C				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2C5C A9 80		        lda     #$80
     3 2C5E A0 5F		        ldy     #FX_MEMS
     4 2C60 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3676 					
  3677 				; optimize OK (service.pas), line = 344
  3678
  3679 2C62 AD FF 9F			lda SRC+2
  3680 2C65 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3681
  3682 				; optimize OK (service.pas), line = 345
  3683
  3684 2C68 AD FE 9F			lda SRC+1
  3685 2C6B 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3686
  3687 				; optimize OK (service.pas), line = 346
  3688
  3689 2C6E AD FD 9F			lda SRC
  3690 2C71 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3691
  3692 				; optimize OK (service.pas), line = 348
  3693
  3694 2C74 AD 03 A0			lda DST+2
  3695 2C77 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3696
  3697 				; optimize OK (service.pas), line = 349
  3698
  3699 2C7A AD 02 A0			lda DST+1
  3700 2C7D 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3701
  3702 				; optimize OK (service.pas), line = 350
  3703
  3704 2C80 AD 01 A0			lda DST
  3705 2C83 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3706
  3707 				; optimize OK (service.pas), line = 352
  3708
  3709 2C86 A9 01			lda #$01
  3710 2C88 8D 05 B1			sta BLT.SRC_STEP_X
  3711
  3712 				; optimize OK (service.pas), line = 353
  3713
  3714 2C8B 8D 03 B1			sta BLT.SRC_STEP_Y
  3715 2C8E A9 00			lda #$00
  3716 2C90 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3717
  3718 				; optimize OK (service.pas), line = 355
  3719
  3720 2C93 A9 01			lda #$01
  3721 2C95 8D 0B B1			sta BLT.DST_STEP_X
  3722
  3723 				; optimize OK (service.pas), line = 356
  3724
  3725 2C98 8D 09 B1			sta BLT.DST_STEP_Y
  3726 2C9B A9 00			lda #$00
  3727 2C9D 8D 0A B1			sta BLT.DST_STEP_Y+1
  3728
  3729 				; optimize OK (service.pas), line = 358
  3730
  3731 2CA0 AD 05 A0			lda SIZE
  3732 2CA3 38 E9 01			sub #$01
  3733 2CA6 8D 0C B1			sta BLT.BLT_WIDTH
  3734 2CA9 AD 06 A0			lda SIZE+1
  3735 2CAC E9 00			sbc #$00
  3736 2CAE 8D 0D B1			sta BLT.BLT_WIDTH+1
  3737
  3738 				; optimize OK (service.pas), line = 359
  3739
  3740 2CB1 A9 00			lda #$00
  3741 2CB3 8D 0E B1			sta BLT.BLT_HEIGHT
  3742
  3743 				; optimize OK (service.pas), line = 361
  3744
  3745 2CB6 A9 01			lda #$01
  3746 2CB8 8D 14 B1			sta BLT.BLT_CONTROL
  3747
  3748 				; optimize OK (service.pas), line = 362
  3749
  3750 2CBB A9 FF			lda #$FF
  3751 2CBD 8D 0F B1			sta BLT.BLT_AND_MASK
  3752
  3753 				; -------------------  ASM Block 00000144  -------------------
  3754
  3755 2CC0				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2CC0 A9 00		        lda     #$00
     3 2CC2 A0 5F		        ldy     #FX_MEMS
     4 2CC4 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3756 					
  3757 				; optimize OK (service.pas), line = 369
  3758
  3759 2CC6 AD 77 9A			lda BLT
  3760 2CC9 8D C2 9B			sta VBXE.RUNBCB.A
  3761 2CCC AD 78 9A			lda BLT+1
  3762 2CCF 8D C3 9B			sta VBXE.RUNBCB.A+1
  3763 2CD2 20 AC 2A			jsr VBXE.RUNBCB
  3764
  3765 				; ------------------------------------------------------------
  3766
  3767 = 9FFD			SRC	= DATAORIGIN+$0514
  3768 = A001			DST	= DATAORIGIN+$0518
  3769 = A005			SIZE	= DATAORIGIN+$051C
  3770 = A007			I	= DATAORIGIN+$051E
  3771
  3772 = 9FFD			@VarData	= SRC
  3773 = 000C			@VarDataSize	= 12
  3774
  3775 2CD5			@exit
  3776 					.ifdef @new
  3777 					lda <@VarData
  3778 					sta :ztmp
  3779 					lda >@VarData
  3780 					ldy #@VarDataSize-1
  3781 					jmp @FreeMem
  3782 					els
  3783 2CD5 60				rts						; ret
  3784 					eif
  3785 				.endl
  3786
  3787 2CD6			.local	BLITTMP						; PROCEDURE
  3788
  3789 				; optimize OK (service.pas), line = 381
  3790
  3791 2CD6 AD 09 A0			lda DST
  3792 2CD9 8D D4 9B			sta VBXE_RAM.POSITION
  3793 2CDC AD 0A A0			lda DST+1
  3794 2CDF 8D D5 9B			sta VBXE_RAM.POSITION+1
  3795 2CE2 AD 0B A0			lda DST+2
  3796 2CE5 8D D6 9B			sta VBXE_RAM.POSITION+2
  3797 2CE8 AD 0C A0			lda DST+3
  3798 2CEB 8D D7 9B			sta VBXE_RAM.POSITION+3
  3799
  3800 				; optimize OK (service.pas), line = 383
  3801
  3802 2CEE AD D1 9A			lda TMP
  3803 2CF1 8D 80 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3804 2CF4 AD D2 9A			lda TMP+1
  3805 2CF7 8D 81 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3806 2CFA AD 0D A0			lda SIZE
  3807 2CFD 8D 82 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3808 2D00 A9 00			lda #$00
  3809 2D02 8D 83 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3810 2D05 AD 7D 9A			lda VBXE_RAM
  3811 2D08 AC 7E 9A			ldy VBXE_RAM+1
  3812 2D0B 20 6F 27			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3813
  3814 				; ------------------------------------------------------------
  3815
  3816 = A009			DST	= DATAORIGIN+$0520
  3817 = A00D			SIZE	= DATAORIGIN+$0524
  3818 = A00E			X	= DATAORIGIN+$0525
  3819
  3820 = A009			@VarData	= DST
  3821 = 0006			@VarDataSize	= 6
  3822
  3823 2D0E			@exit
  3824 					.ifdef @new
  3825 					lda <@VarData
  3826 					sta :ztmp
  3827 					lda >@VarData
  3828 					ldy #@VarDataSize-1
  3829 					jmp @FreeMem
  3830 					els
  3831 2D0E 60				rts						; ret
  3832 					eif
  3833 				.endl
  3834
  3835 2D0F			.local	BLITROW						; PROCEDURE
  3836
  3837 				; -------------------  ASM Block 00000145  -------------------
  3838
  3839 2D0F				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2D0F A9 80		        lda     #$80
     3 2D11 A0 5F		        ldy     #FX_MEMS
     4 2D13 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3840 					
  3841 				; optimize OK (service.pas), line = 399
  3842
  3843 2D15 AD 11 A0			lda SRC+2
  3844 2D18 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3845
  3846 				; optimize OK (service.pas), line = 400
  3847
  3848 2D1B AD 10 A0			lda SRC+1
  3849 2D1E 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3850
  3851 				; optimize OK (service.pas), line = 401
  3852
  3853 2D21 AD 0F A0			lda SRC
  3854 2D24 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3855
  3856 				; optimize OK (service.pas), line = 403
  3857
  3858 2D27 AD 15 A0			lda DST+2
  3859 2D2A 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3860
  3861 				; optimize OK (service.pas), line = 404
  3862
  3863 2D2D AD 14 A0			lda DST+1
  3864 2D30 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3865
  3866 				; optimize OK (service.pas), line = 405
  3867
  3868 2D33 AD 13 A0			lda DST
  3869 2D36 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3870
  3871 				; optimize OK (service.pas), line = 407
  3872
  3873 2D39 A9 01			lda #$01
  3874 2D3B 8D 05 B1			sta BLT.SRC_STEP_X
  3875
  3876 				; optimize OK (service.pas), line = 408
  3877
  3878 2D3E A9 00			lda #$00
  3879 2D40 8D 03 B1			sta BLT.SRC_STEP_Y
  3880 2D43 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3881
  3882 				; optimize OK (service.pas), line = 410
  3883
  3884 2D46 A9 01			lda #$01
  3885 2D48 8D 0B B1			sta BLT.DST_STEP_X
  3886
  3887 				; optimize OK (service.pas), line = 411
  3888
  3889 2D4B A9 00			lda #$00
  3890 2D4D 8D 09 B1			sta BLT.DST_STEP_Y
  3891 2D50 8D 0A B1			sta BLT.DST_STEP_Y+1
  3892
  3893 				; optimize OK (service.pas), line = 413
  3894
  3895 2D53 AD 17 A0			lda SIZE
  3896 2D56 38 E9 01			sub #$01
  3897 2D59 8D 0C B1			sta BLT.BLT_WIDTH
  3898 2D5C AD 18 A0			lda SIZE+1
  3899 2D5F E9 00			sbc #$00
  3900 2D61 8D 0D B1			sta BLT.BLT_WIDTH+1
  3901
  3902 				; optimize OK (service.pas), line = 414
  3903
  3904 2D64 A9 00			lda #$00
  3905 2D66 8D 0E B1			sta BLT.BLT_HEIGHT
  3906
  3907 				; optimize OK (service.pas), line = 416
  3908
  3909 2D69 8D 14 B1			sta BLT.BLT_CONTROL
  3910
  3911 				; optimize OK (service.pas), line = 418
  3912
  3913 2D6C A9 FF			lda #$FF
  3914 2D6E 8D 0F B1			sta BLT.BLT_AND_MASK
  3915
  3916 				; -------------------  ASM Block 00000146  -------------------
  3917
  3918 2D71				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2D71 A9 00		        lda     #$00
     3 2D73 A0 5F		        ldy     #FX_MEMS
     4 2D75 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3919 					
  3920 				; optimize OK (service.pas), line = 424
  3921
  3922 2D77 AD 77 9A			lda BLT
  3923 2D7A 8D C2 9B			sta VBXE.RUNBCB.A
  3924 2D7D AD 78 9A			lda BLT+1
  3925 2D80 8D C3 9B			sta VBXE.RUNBCB.A+1
  3926 2D83 20 AC 2A			jsr VBXE.RUNBCB
  3927
  3928 				; ------------------------------------------------------------
  3929
  3930 = A00F			SRC	= DATAORIGIN+$0526
  3931 = A013			DST	= DATAORIGIN+$052A
  3932 = A017			SIZE	= DATAORIGIN+$052E
  3933 = A019			X	= DATAORIGIN+$0530
  3934
  3935 = A00F			@VarData	= SRC
  3936 = 000C			@VarDataSize	= 12
  3937
  3938 2D86			@exit
  3939 					.ifdef @new
  3940 					lda <@VarData
  3941 					sta :ztmp
  3942 					lda >@VarData
  3943 					ldy #@VarDataSize-1
  3944 					jmp @FreeMem
  3945 					els
  3946 2D86 60				rts						; ret
  3947 					eif
  3948 				.endl
  3949
  3950 2D87			.local	BLITBYTE					; PROCEDURE
  3951
  3952 				; optimize OK (service.pas), line = 435
  3953
  3954 2D87 AD 1B A0			lda SRC
  3955 2D8A 8D D4 9B			sta VBXE_RAM.POSITION
  3956 2D8D AD 1C A0			lda SRC+1
  3957 2D90 8D D5 9B			sta VBXE_RAM.POSITION+1
  3958 2D93 AD 1D A0			lda SRC+2
  3959 2D96 8D D6 9B			sta VBXE_RAM.POSITION+2
  3960 2D99 AD 1E A0			lda SRC+3
  3961 2D9C 8D D7 9B			sta VBXE_RAM.POSITION+3
  3962
  3963 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 436
  3964
  3965 2D9F AD 7D 9A			lda VBXE_RAM
  3966 2DA2 AC 7E 9A			ldy VBXE_RAM+1
  3967 2DA5 20 77 28			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  3968 2DA8 AD 93 9B			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  3969 2DAB 8D 23 A0			sta A
  3970
  3971 				; optimize OK (service.pas), line = 438
  3972
  3973 2DAE AD 1F A0			lda DST
  3974 2DB1 8D D4 9B			sta VBXE_RAM.POSITION
  3975 2DB4 AD 20 A0			lda DST+1
  3976 2DB7 8D D5 9B			sta VBXE_RAM.POSITION+1
  3977 2DBA AD 21 A0			lda DST+2
  3978 2DBD 8D D6 9B			sta VBXE_RAM.POSITION+2
  3979 2DC0 AD 22 A0			lda DST+3
  3980 2DC3 8D D7 9B			sta VBXE_RAM.POSITION+3
  3981
  3982 				; optimize OK (service.pas), line = 439
  3983
  3984 2DC6 AD 23 A0			lda A
  3985 2DC9 8D A2 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3986 2DCC AD 7D 9A			lda VBXE_RAM
  3987 2DCF AC 7E 9A			ldy VBXE_RAM+1
  3988 2DD2 20 AA 28			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3989
  3990 				; ------------------------------------------------------------
  3991
  3992 = A01B			SRC	= DATAORIGIN+$0532
  3993 = A01F			DST	= DATAORIGIN+$0536
  3994 = A023			A	= DATAORIGIN+$053A
  3995
  3996 = A01B			@VarData	= SRC
  3997 = 0009			@VarDataSize	= 9
  3998
  3999 2DD5			@exit
  4000 					.ifdef @new
  4001 					lda <@VarData
  4002 					sta :ztmp
  4003 					lda >@VarData
  4004 					ldy #@VarDataSize-1
  4005 					jmp @FreeMem
  4006 					els
  4007 2DD5 60				rts						; ret
  4008 					eif
  4009 				.endl
  4010
  4011 2DD6			.local	PUTBYTE						; PROCEDURE
  4012
  4013 				; optimize OK (service.pas), line = 449
  4014
  4015 2DD6 AD 24 A0			lda DST
  4016 2DD9 8D D4 9B			sta VBXE_RAM.POSITION
  4017 2DDC AD 25 A0			lda DST+1
  4018 2DDF 8D D5 9B			sta VBXE_RAM.POSITION+1
  4019 2DE2 AD 26 A0			lda DST+2
  4020 2DE5 8D D6 9B			sta VBXE_RAM.POSITION+2
  4021 2DE8 AD 27 A0			lda DST+3
  4022 2DEB 8D D7 9B			sta VBXE_RAM.POSITION+3
  4023
  4024 				; optimize OK (service.pas), line = 450
  4025
  4026 2DEE AD 28 A0			lda V
  4027 2DF1 8D A2 9B			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  4028 2DF4 AD 7D 9A			lda VBXE_RAM
  4029 2DF7 AC 7E 9A			ldy VBXE_RAM+1
  4030 2DFA 20 AA 28			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  4031
  4032 				; ------------------------------------------------------------
  4033
  4034 = A024			DST	= DATAORIGIN+$053B
  4035 = A028			V	= DATAORIGIN+$053F
  4036
  4037 = A024			@VarData	= DST
  4038 = 0005			@VarDataSize	= 5
  4039
  4040 2DFD			@exit
  4041 					.ifdef @new
  4042 					lda <@VarData
  4043 					sta :ztmp
  4044 					lda >@VarData
  4045 					ldy #@VarDataSize-1
  4046 					jmp @FreeMem
  4047 					els
  4048 2DFD 60				rts						; ret
  4049 					eif
  4050 				.endl
  4051
  4052 2DFE			.local	GETBYTE						; FUNCTION
  4053
  4054 				; optimize OK (service.pas), line = 460
  4055
  4056 2DFE AD 29 A0			lda SRC
  4057 2E01 8D D4 9B			sta VBXE_RAM.POSITION
  4058 2E04 AD 2A A0			lda SRC+1
  4059 2E07 8D D5 9B			sta VBXE_RAM.POSITION+1
  4060 2E0A AD 2B A0			lda SRC+2
  4061 2E0D 8D D6 9B			sta VBXE_RAM.POSITION+2
  4062 2E10 AD 2C A0			lda SRC+3
  4063 2E13 8D D7 9B			sta VBXE_RAM.POSITION+3
  4064
  4065 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 461
  4066
  4067 2E16 AD 7D 9A			lda VBXE_RAM
  4068 2E19 AC 7E 9A			ldy VBXE_RAM+1
  4069 2E1C 20 77 28			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  4070 2E1F AD 93 9B			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  4071 2E22 8D 2D A0			sta RESULT
  4072 2E25			@exit
  4073
  4074 				; ------------------------------------------------------------
  4075
  4076 = A029			SRC	= DATAORIGIN+$0540
  4077 = A02D			RESULT	= DATAORIGIN+$0544
  4078
  4079 = A029			@VarData	= SRC
  4080 = 0004			@VarDataSize	= 4
  4081
  4082 2E25 60				rts						; ret
  4083 				.endl
  4084
  4085 2E26			.local	NOSOUND						; PROCEDURE
  4086
  4087 2E26			@exit
  4088 					.ifdef @new
  4089 					lda <@VarData
  4090 					sta :ztmp
  4091 					lda >@VarData
  4092 					ldy #@VarDataSize-1
  4093 					jmp @FreeMem
  4094 					els
  4095 2E26 60				rts						; ret
  4096 					eif
  4097 				.endl
  4098
  4099 2E27			.local	MYDELAY						; PROCEDURE
  4100
  4101 				; ------------------------------------------------------------
  4102
  4103 = A02E			A	= DATAORIGIN+$0545
  4104
  4105 = A02E			@VarData	= A
  4106 = 0002			@VarDataSize	= 2
  4107
  4108 2E27			@exit
  4109 					.ifdef @new
  4110 					lda <@VarData
  4111 					sta :ztmp
  4112 					lda >@VarData
  4113 					ldy #@VarDataSize-1
  4114 					jmp @FreeMem
  4115 					els
  4116 2E27 60				rts						; ret
  4117 					eif
  4118 				.endl
  4119
  4120 2E28			.local	MAX						; FUNCTION
  4121
  4122 				; optimize OK (service.pas), line = 586
  4123
  4124 2E28 AD 32 A0			lda B
  4125 2E2B CD 30 A0			cmp A
  4126 2E2E AD 33 A0			lda B+1
  4127 2E31 ED 31 A0			sbc A+1
  4128 2E34 50 02			svc
  4129 2E36 49 80			eor #$80
  4130 2E38 10 0C			jpl l_06EE
  4131 2E3A AD 30 A0			lda A
  4132 2E3D 8D 34 A0			sta RESULT
  4133 2E40 AD 31 A0			lda A+1
  4134 2E43 4C 4F 2E			jmp l_06FD
  4135 2E46			l_06EE
  4136
  4137 				; optimize OK (service.pas), line = 587
  4138
  4139 2E46 AD 32 A0			lda B
  4140 2E49 8D 34 A0			sta RESULT
  4141 2E4C AD 33 A0			lda B+1
  4142 2E4F			l_06FD
  4143 2E4F 8D 35 A0			sta RESULT+1
  4144 2E52			@exit
  4145
  4146 				; ------------------------------------------------------------
  4147
  4148 = A030			A	= DATAORIGIN+$0547
  4149 = A032			B	= DATAORIGIN+$0549
  4150 = A034			RESULT	= DATAORIGIN+$054B
  4151
  4152 = A030			@VarData	= A
  4153 = 0004			@VarDataSize	= 4
  4154
  4155 2E52 60				rts						; ret
  4156 				.endl
  4157
  4158 2E53			.local	MIN						; FUNCTION
  4159
  4160 				; optimize OK (service.pas), line = 593
  4161
  4162 2E53 AD 36 A0			lda A
  4163 2E56 CD 38 A0			cmp B
  4164 2E59 AD 37 A0			lda A+1
  4165 2E5C ED 39 A0			sbc B+1
  4166 2E5F 50 02			svc
  4167 2E61 49 80			eor #$80
  4168 2E63 10 0C			jpl l_0718
  4169 2E65 AD 36 A0			lda A
  4170 2E68 8D 3A A0			sta RESULT
  4171 2E6B AD 37 A0			lda A+1
  4172 2E6E 4C 7A 2E			jmp l_0727
  4173 2E71			l_0718
  4174
  4175 				; optimize OK (service.pas), line = 594
  4176
  4177 2E71 AD 38 A0			lda B
  4178 2E74 8D 3A A0			sta RESULT
  4179 2E77 AD 39 A0			lda B+1
  4180 2E7A			l_0727
  4181 2E7A 8D 3B A0			sta RESULT+1
  4182 2E7D			@exit
  4183
  4184 				; ------------------------------------------------------------
  4185
  4186 = A036			A	= DATAORIGIN+$054D
  4187 = A038			B	= DATAORIGIN+$054F
  4188 = A03A			RESULT	= DATAORIGIN+$0551
  4189
  4190 = A036			@VarData	= A
  4191 = 0004			@VarDataSize	= 4
  4192
  4193 2E7D 60				rts						; ret
  4194 				.endl
  4195
  4196 2E7E			.local	FATAL_ERROR					; PROCEDURE
  4197 2E7E 8D 3C A0			sta ERR_TYPE
  4198
  4199 				; optimize OK (service.pas), line = 603
  4200
  4201 2E81 8D AE 9C			sta STATUS
  4202
  4203 				; -------------------  ASM Block 00000147  -------------------
  4204
  4205 2E84 8D 00 01		      sta $100
  4206 				      
  4207 2E87 AD 0A D2		      kk: lda $d20a
  4208 2E8A 8D 1A D0		      sta $d01a
  4209 2E8D 4C 87 2E		      jmp kk
  4210 				    
  4211 				    
  4212 				; ------------------------------------------------------------
  4213
  4214 = A03C			ERR_TYPE	= DATAORIGIN+$0553
  4215
  4216 = A03C			@VarData	= ERR_TYPE
  4217 = 0001			@VarDataSize	= 1
  4218
  4219 2E90			@exit
  4220 					.ifdef @new
  4221 					lda <@VarData
  4222 					sta :ztmp
  4223 					lda >@VarData
  4224 					ldy #@VarDataSize-1
  4225 					jmp @FreeMem
  4226 					els
  4227 2E90 60				rts						; ret
  4228 					eif
  4229 				.endl
  4230
  4231 2E91			.local	INITROWARRAY					; PROCEDURE
  4232
  4233 				; optimize OK (service.pas), line = 650
  4234
  4235 2E91 A9 00			lda #$00
  4236 2E93 8D 3D A0			sta Y
  4237
  4238 2E96			l_0743
  4239 				; --- ForToDoCondition
  4240 2E96 AD 3D A0			lda Y
  4241 2E99 C9 C8			cmp #$C8
  4242 2E9B B0 1B			jcs l_0751
  4243
  4244 				; optimize OK (service.pas), line = 651
  4245
  4246 2E9D 85 86			sta :eax
  4247 2E9F A9 00			lda #$00
  4248 2EA1 85 87			sta :eax+1
  4249 2EA3 20 FD 17			jsr @mul320
  4250 2EA6 AC 3D A0			ldy Y
  4251 2EA9 A5 86			lda :eax
  4252 2EAB 99 00 C0			sta adr.ROW,y
  4253 2EAE A5 87			lda :eax+1
  4254 2EB0 99 00 C1			sta adr.ROW+256,y
  4255
  4256 				; --- ForToDoEpilog
  4257 2EB3 EE 3D A0			inc Y
  4258 2EB6 D0 DE			jne l_0743
  4259 2EB8			l_0751
  4260
  4261 				; optimize OK (service.pas), line = 653
  4262
  4263 2EB8 A9 C8			lda #$C8
  4264 2EBA A8				tay
  4265
  4266 2EBB			l_076C
  4267 				; --- ForToDoCondition
  4268 2EBB A9 00			lda #$00
  4269 2EBD 99 00 C0			sta adr.ROW,y
  4270 2EC0 A9 FA			lda #$FA
  4271 2EC2 99 00 C1			sta adr.ROW+256,y
  4272
  4273 				; --- ForToDoEpilog
  4274 2EC5 C8				iny
  4275 2EC6 D0 F3			jne l_076C
  4276 2EC8			l_077A
  4277 2EC8 8C 3D A0			sty Y
  4278
  4279 				; ------------------------------------------------------------
  4280
  4281 = A03D			Y	= DATAORIGIN+$0554
  4282
  4283 = A03D			@VarData	= Y
  4284 = 0001			@VarDataSize	= 1
  4285
  4286 2ECB			@exit
  4287 					.ifdef @new
  4288 					lda <@VarData
  4289 					sta :ztmp
  4290 					lda >@VarData
  4291 					ldy #@VarDataSize-1
  4292 					jmp @FreeMem
  4293 					els
  4294 2ECB 60				rts						; ret
  4295 					eif
  4296 				.endl
  4297
  4298 2ECC			.local	INITSVGA					; PROCEDURE
  4299
  4300 				; optimize OK (service.pas), line = 679
  4301
  4302 2ECC AD 34 9B			lda GRAPH.GRAPHRESULT
  4303 2ECF C9 01			cmp #$01
  4304 2ED1 F0 0F			jeq l_079C
  4305
  4306 				; optimize FAIL ('@print', service.pas), line = 680
  4307
  4308 					@printSTRING #CODEORIGIN+$0000
  4308 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4308 2ED3 A0 10		 LDY> CODEORIGIN+$0000
  4308 2ED5 A9 00		 LDA< CODEORIGIN+$0000
  4308 2ED7 20 3D 18		 JSR @PRINTSTRING
  4309 2EDA 20 27 18			@printEOL
  4310 2EDD A9 00			lda #$00
  4311 2EDF 4C 6C 9A			jmp @halt
  4312 2EE2			l_079C
  4313
  4314 				; optimize OK (service.pas), line = 684
  4315
  4316 2EE2 A9 1F			lda #$1F
  4317 2EE4 20 98 2A			jsr VBXE.SETHORIZONTALRES.@010180000
  4318
  4319 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 685
  4320
  4321 2EE7 20 F0 29			jsr VBXE.COLORMAPOFF
  4322
  4323 				; optimize OK (service.pas), line = 687
  4324
  4325 2EEA A9 07			lda #$07
  4326 2EEC 20 F7 2A			jsr VBXE.VBXECONTROL
  4327
  4328 				; optimize OK (service.pas), line = 689
  4329
  4330 2EEF AD 63 2F			lda XDL
  4331 2EF2 85 8A			sta VBXE.GETXDL.A
  4332 2EF4 AD 64 2F			lda XDL+1
  4333 2EF7 85 8B			sta VBXE.GETXDL.A+1
  4334 2EF9 20 C9 2A			jsr VBXE.GETXDL
  4335
  4336 				; optimize OK (service.pas), line = 690
  4337
  4338 2EFC A9 13			lda #$13
  4339 2EFE 8D 40 A0			sta XDL.RPTL_
  4340
  4341 				; optimize OK (service.pas), line = 691
  4342
  4343 2F01 A9 C6			lda #$C6
  4344 2F03 8D 43 A0			sta XDL.RPTL
  4345
  4346 				; optimize OK (service.pas), line = 692
  4347
  4348 2F06 AD 63 2F			lda XDL
  4349 2F09 85 8A			sta VBXE.SETXDL.A
  4350 2F0B AD 64 2F			lda XDL+1
  4351 2F0E 85 8B			sta VBXE.SETXDL.A+1
  4352 2F10 20 E0 2A			jsr VBXE.SETXDL
  4353
  4354 				; optimize OK (service.pas), line = 694
  4355
  4356 2F13 A9 00			lda #$00
  4357 2F15 8D D4 9B			sta VBXE_RAM.POSITION
  4358 2F18 A9 50			lda #$50
  4359 2F1A 8D D5 9B			sta VBXE_RAM.POSITION+1
  4360 2F1D A9 00			lda #$00
  4361 2F1F 8D D6 9B			sta VBXE_RAM.POSITION+2
  4362 2F22 8D D7 9B			sta VBXE_RAM.POSITION+3
  4363
  4364 				; optimize OK (service.pas), line = 695
  4365
  4366 2F25 8D D8 9B			sta VBXE_RAM.SIZE
  4367 2F28 A9 FA			lda #$FA
  4368 2F2A 8D D9 9B			sta VBXE_RAM.SIZE+1
  4369 2F2D A9 00			lda #$00
  4370 2F2F 8D DA 9B			sta VBXE_RAM.SIZE+2
  4371 2F32 8D DB 9B			sta VBXE_RAM.SIZE+3
  4372
  4373 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 696
  4374
  4375 2F35 AD 7D 9A			lda VBXE_RAM
  4376 2F38 AC 7E 9A			ldy VBXE_RAM+1
  4377 2F3B 20 DD 28			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4378
  4379 				; optimize OK (service.pas), line = 698
  4380
  4381 2F3E A9 00			lda #$00
  4382 2F40 8D 00 D4			sta ATARI.DMACTL
  4383
  4384 				; -------------------  ASM Block 00000148  -------------------
  4385
  4386 2F43				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 2F43 A9 80		        lda     #$80
     3 2F45 A0 5F		        ldy     #FX_MEMS
     4 2F47 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4387 					
  4388 				; optimize OK (service.pas), line = 704
  4389
  4390 2F49 AD 77 9A			lda BLT
  4391 2F4C 85 84			sta :bp2
  4392 2F4E AD 78 9A			lda BLT+1
  4393 2F51 85 85			sta :bp2+1
  4394 2F53 A9 00			lda #$00
  4395 2F55 A0 14			ldy #$14
  4396 2F57 91 84 88 10 FB		sta:rpl (:bp2),y-
  4397
  4398 				; -------------------  ASM Block 00000149  -------------------
  4399
  4400 2F5C				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 2F5C A9 00		        lda     #$00
     3 2F5E A0 5F		        ldy     #FX_MEMS
     4 2F60 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4401 					
  4402 				; ------------------------------------------------------------
  4403
  4404 = A03E			adr.XDL	= DATAORIGIN+$0555	; [23] RECORD
  4405 2F62			.var XDL	= adr.XDL .word
  4406 = A03E			XDL.XDLC_	= DATAORIGIN+$0555
  4407 = A040			XDL.RPTL_	= DATAORIGIN+$0557
  4408 = A041			XDL.XDLC	= DATAORIGIN+$0558
  4409 = A043			XDL.RPTL	= DATAORIGIN+$055A
  4410 = A044			adr.XDL.OV_ADR	= DATAORIGIN+$055B	; [3] RECORD
  4411 2F62			.var XDL.OV_ADR	= adr.XDL.OV_ADR .word
  4412 = A044			XDL.OV_ADR.BYTE0	= DATAORIGIN+$055B
  4413 = A045			XDL.OV_ADR.BYTE1	= DATAORIGIN+$055C
  4414 = A046			XDL.OV_ADR.BYTE2	= DATAORIGIN+$055D
  4415 = A047			XDL.OV_STEP	= DATAORIGIN+$055E
  4416 = A049			XDL.OV_CHBASE	= DATAORIGIN+$0560
  4417 = A04A			adr.XDL.MP_ADR	= DATAORIGIN+$0561	; [3] RECORD
  4418 2F62			.var XDL.MP_ADR	= adr.XDL.MP_ADR .word
  4419 = A04A			XDL.MP_ADR.BYTE0	= DATAORIGIN+$0561
  4420 = A04B			XDL.MP_ADR.BYTE1	= DATAORIGIN+$0562
  4421 = A04C			XDL.MP_ADR.BYTE2	= DATAORIGIN+$0563
  4422 = A04D			XDL.MP_STEP	= DATAORIGIN+$0564
  4423 = A04F			XDL.MP_HSCROL	= DATAORIGIN+$0566
  4424 = A050			XDL.MP_VSCROL	= DATAORIGIN+$0567
  4425 = A051			XDL.MP_WIDTH	= DATAORIGIN+$0568
  4426 = A052			XDL.MP_HEIGHT	= DATAORIGIN+$0569
  4427 = A053			XDL.OV_WIDTH	= DATAORIGIN+$056A
  4428 = A054			XDL.OV_PRIOR	= DATAORIGIN+$056B
  4429
  4430 = A03E			@VarData	= XDL.XDLC_
  4431 = 0017			@VarDataSize	= 23
  4432
  4433 2F62			@exit
  4434 					.ifdef @new
  4435 					lda <@VarData
  4436 					sta :ztmp
  4437 					lda >@VarData
  4438 					ldy #@VarDataSize-1
  4439 					jmp @FreeMem
  4440 					els
  4441 2F62 60				rts						; ret
  4442 					eif
  4443 = 2F63 3E A0		XDL
  4443 = 2F65 44 A0		XDL.OV_ADR
  4443 = 2F67 4A A0		XDL.MP_ADR
  4443 				.endl
  4444
  4445 2F69			.local	SHINE_BLOCK					; PROCEDURE
  4446
  4447 				; optimize OK (service.pas), line = 748
  4448
  4449 2F69 AD CE 9C			lda SHINEREC.XB
  4450 2F6C 8D 55 A0			sta XB
  4451 2F6F A9 00			lda #$00
  4452 2F71 8D 56 A0			sta XB+1
  4453
  4454 				; optimize OK (service.pas), line = 749
  4455
  4456 2F74 AD CF 9C			lda SHINEREC.YB
  4457 2F77 8D 57 A0			sta YB
  4458 2F7A A9 00			lda #$00
  4459 2F7C 8D 58 A0			sta YB+1
  4460
  4461 				; optimize OK (service.pas), line = 751
  4462
  4463 2F7F AD 57 A0			lda YB
  4464 2F82 0A				asl @
  4465 2F83 0A				asl @
  4466 2F84 0A				asl @
  4467 2F85 0A				asl @
  4468 2F86 18 6D 55 A0			add XB
  4469 2F8A 8D 64 A0			sta I
  4470
  4471 				; optimize OK (service.pas), line = 753
  4472
  4473 2F8D A8				tay
  4474 2F8E B9 00 DB			lda adr.WALL,y
  4475 2F91 C9 09			cmp #$09
  4476 2F93 B0 03 4C E6 30		jcc l_07F9
  4477
  4478 				; optimize OK (service.pas), line = 755
  4479
  4480 2F98 AD D0 9C			lda SHINEREC.FRAME
  4481 2F9B 4A				lsr @
  4482 2F9C 8D 59 A0			sta FRAME
  4483 2F9F A9 00			lda #$00
  4484 2FA1 8D 5A A0			sta FRAME+1
  4485
  4486 				; optimize OK (service.pas), line = 756
  4487
  4488 2FA4 B9 00 DB			lda adr.WALL,y
  4489 2FA7 C9 0A			cmp #$0A
  4490 2FA9 F0 0E			jeq l_0819
  4491 2FAB AD 59 A0			lda FRAME
  4492 2FAE 18 69 05			add #$05
  4493 2FB1 8D 59 A0			sta FRAME
  4494 2FB4 90 03			scc
  4495 2FB6 EE 5A A0			inc FRAME+1
  4496 2FB9			l_0819
  4497
  4498 				; optimize OK (service.pas), line = 758
  4499
  4500 2FB9 AD 55 A0			lda XB
  4501 2FBC 85 A0			sta :STACKORIGIN+10
  4502 2FBE AD 56 A0			lda XB+1
  4503 2FC1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4504 2FC3 06 A0			asl :STACKORIGIN+10
  4505 2FC5 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4506 2FC7 06 A0			asl :STACKORIGIN+10
  4507 2FC9 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4508 2FCB 06 A0			asl :STACKORIGIN+10
  4509 2FCD 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4510 2FCF 06 A0			asl :STACKORIGIN+10
  4511 2FD1 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4512 2FD3 A9 09			lda #$09
  4513 2FD5 18 65 A0			add :STACKORIGIN+10
  4514 2FD8 8D 5B A0			sta XF
  4515 2FDB A9 00			lda #$00
  4516 2FDD 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4517 2FDF 8D 5C A0			sta XF+1
  4518
  4519 				; optimize OK (service.pas), line = 759
  4520
  4521 2FE2 AD 57 A0			lda YB
  4522 2FE5 85 A0			sta :STACKORIGIN+10
  4523 2FE7 AD 58 A0			lda YB+1
  4524 2FEA 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4525 2FEC 06 A0			asl :STACKORIGIN+10
  4526 2FEE 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4527 2FF0 06 A0			asl :STACKORIGIN+10
  4528 2FF2 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4529 2FF4 06 A0			asl :STACKORIGIN+10
  4530 2FF6 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4531 2FF8 A9 16			lda #$16
  4532 2FFA 18 65 A0			add :STACKORIGIN+10
  4533 2FFD 8D 5D A0			sta YF
  4534 3000 A9 00			lda #$00
  4535 3002 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4536 3004 8D 5E A0			sta YF+1
  4537
  4538 				; optimize OK (service.pas), line = 760
  4539
  4540 3007 AD 59 A0			lda FRAME
  4541 300A 85 9F			sta :STACKORIGIN+9
  4542 300C AD 5A A0			lda FRAME+1
  4543 300F 06 9F			asl :STACKORIGIN+9
  4544 3011 2A				rol @
  4545 3012 06 9F			asl :STACKORIGIN+9
  4546 3014 2A				rol @
  4547 3015 06 9F			asl :STACKORIGIN+9
  4548 3017 2A				rol @
  4549 3018 06 9F			asl :STACKORIGIN+9
  4550 301A 2A				rol @
  4551 301B 06 9F			asl :STACKORIGIN+9
  4552 301D 2A				rol @
  4553 301E 06 9F			asl :STACKORIGIN+9
  4554 3020 2A				rol @
  4555 3021 06 9F			asl :STACKORIGIN+9
  4556 3023 2A				rol @
  4557 3024 8D 60 A0			sta FR+1
  4558 3027 A5 9F			lda :STACKORIGIN+9
  4559 3029 8D 5F A0			sta FR
  4560
  4561 				; optimize OK (service.pas), line = 762
  4562
  4563 302C A9 00			lda #$00
  4564 302E 8D 63 A0			sta Y
  4565
  4566 3031			l_0849
  4567 				; --- ForToDoCondition
  4568 3031 AD 63 A0			lda Y
  4569 3034 C9 08			cmp #$08
  4570 3036 90 03 4C E6 30		jcs l_0857
  4571
  4572 				; optimize OK (service.pas), line = 764
  4573
  4574 303B 85 9F			sta :STACKORIGIN+9
  4575 303D A9 00			lda #$00
  4576 303F 06 9F			asl :STACKORIGIN+9
  4577 3041 2A				rol @
  4578 3042 06 9F			asl :STACKORIGIN+9
  4579 3044 2A				rol @
  4580 3045 06 9F			asl :STACKORIGIN+9
  4581 3047 2A				rol @
  4582 3048 06 9F			asl :STACKORIGIN+9
  4583 304A 2A				rol @
  4584 304B 8D 62 A0			sta OG+1
  4585 304E A5 9F			lda :STACKORIGIN+9
  4586 3050 8D 61 A0			sta OG
  4587
  4588 				; optimize OK (service.pas), line = 767
  4589
  4590 3053 AD 5B A0			lda XF
  4591 3056 85 A0			sta :STACKORIGIN+10
  4592 3058 A9 50			lda #$50
  4593 305A 18 6D 5C A0			add XF+1
  4594 305E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4595 3060 A9 00			lda #$00
  4596 3062 69 00			adc #$00
  4597 3064 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4598 3066 A9 00			lda #$00
  4599 3068 69 00			adc #$00
  4600 306A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4601 306C AD 5D A0			lda YF
  4602 306F 18 6D 63 A0			add Y
  4603 3073 A8				tay
  4604 3074 A5 A0			lda :STACKORIGIN+10
  4605 3076 18 79 00 C0			add adr.ROW,y
  4606 307A 8D 13 A0			sta BLITROW.DST
  4607 307D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4608 307F 79 00 C1			adc adr.ROW+256,y
  4609 3082 8D 14 A0			sta BLITROW.DST+1
  4610 3085 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4611 3087 69 00			adc #$00
  4612 3089 8D 15 A0			sta BLITROW.DST+2
  4613 308C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4614 308E 69 00			adc #$00
  4615 3090 8D 16 A0			sta BLITROW.DST+3
  4616 3093 AD 45 9C			lda SHINEWALL.OFS
  4617 3096 18 6D 5F A0			add FR
  4618 309A 85 A1			sta :STACKORIGIN+11
  4619 309C AD 46 9C			lda SHINEWALL.OFS+1
  4620 309F 6D 60 A0			adc FR+1
  4621 30A2 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4622 30A4 AD 47 9C			lda SHINEWALL.OFS+2
  4623 30A7 69 00			adc #$00
  4624 30A9 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4625 30AB AD 48 9C			lda SHINEWALL.OFS+3
  4626 30AE 69 00			adc #$00
  4627 30B0 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4628 30B2 A5 A1			lda :STACKORIGIN+11
  4629 30B4 18 6D 61 A0			add OG
  4630 30B8 8D 0F A0			sta BLITROW.SRC
  4631 30BB A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4632 30BD 6D 62 A0			adc OG+1
  4633 30C0 8D 10 A0			sta BLITROW.SRC+1
  4634 30C3 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4635 30C5 69 00			adc #$00
  4636 30C7 8D 11 A0			sta BLITROW.SRC+2
  4637 30CA A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4638 30CC 69 00			adc #$00
  4639 30CE 8D 12 A0			sta BLITROW.SRC+3
  4640 30D1 A9 10			lda #$10
  4641 30D3 8D 17 A0			sta BLITROW.SIZE
  4642 30D6 A9 00			lda #$00
  4643 30D8 8D 18 A0			sta BLITROW.SIZE+1
  4644 30DB 20 0F 2D			jsr BLITROW
  4645
  4646 				; --- ForToDoEpilog
  4647 30DE EE 63 A0			inc Y
  4648 30E1 F0 03 4C 31 30		jne l_0849
  4649 30E6			l_0857
  4650 30E6			l_07F9
  4651
  4652 				; optimize FAIL (0, service.pas), line = 771
  4653
  4654 30E6 EE D0 9C			inc SHINEREC.FRAME
  4655
  4656 				; optimize OK (service.pas), line = 772
  4657
  4658 30E9 AD D0 9C			lda SHINEREC.FRAME
  4659 30EC C9 0A			cmp #$0A
  4660 30EE D0 05			jne l_089E
  4661 30F0 A9 00			lda #$00
  4662 30F2 8D D2 9C			sta SHINEREC.ACTIVE
  4663 30F5			l_089E
  4664
  4665 				; ------------------------------------------------------------
  4666
  4667 = A055			XB	= DATAORIGIN+$056C
  4668 = A057			YB	= DATAORIGIN+$056E
  4669 = A059			FRAME	= DATAORIGIN+$0570
  4670 = A05B			XF	= DATAORIGIN+$0572
  4671 = A05D			YF	= DATAORIGIN+$0574
  4672 = A05F			FR	= DATAORIGIN+$0576
  4673 = A061			OG	= DATAORIGIN+$0578
  4674 = A063			Y	= DATAORIGIN+$057A
  4675 = A064			I	= DATAORIGIN+$057B
  4676
  4677 = A055			@VarData	= XB
  4678 = 0010			@VarDataSize	= 16
  4679
  4680 30F5			@exit
  4681 					.ifdef @new
  4682 					lda <@VarData
  4683 					sta :ztmp
  4684 					lda >@VarData
  4685 					ldy #@VarDataSize-1
  4686 					jmp @FreeMem
  4687 					els
  4688 30F5 60				rts						; ret
  4689 					eif
  4690 				.endl
  4691
  4692 30F6			.local	UNSHINE_BLOCK					; PROCEDURE
  4693
  4694 				; optimize OK (service.pas), line = 781
  4695
  4696 30F6 A9 09			lda #$09
  4697 30F8 8D D0 9C			sta SHINEREC.FRAME
  4698
  4699 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 782
  4700
  4701 30FB 20 69 2F			jsr SHINE_BLOCK
  4702
  4703 30FE			@exit
  4704 					.ifdef @new
  4705 					lda <@VarData
  4706 					sta :ztmp
  4707 					lda >@VarData
  4708 					ldy #@VarDataSize-1
  4709 					jmp @FreeMem
  4710 					els
  4711 30FE 60				rts						; ret
  4712 					eif
  4713 				.endl
  4714
  4715 30FF			.local	SHINE						; PROCEDURE
  4716
  4717 				; optimize OK (service.pas), line = 789
  4718
  4719 30FF AD D2 9C			lda SHINEREC.ACTIVE
  4720 3102 F0 03			jeq l_08BE
  4721 3104 20 F6 30			jsr UNSHINE_BLOCK
  4722 3107			l_08BE
  4723
  4724 				; optimize OK (service.pas), line = 791
  4725
  4726 3107 AD 65 A0			lda XB
  4727 310A 8D CE 9C			sta SHINEREC.XB
  4728
  4729 				; optimize OK (service.pas), line = 792
  4730
  4731 310D AD 66 A0			lda YB
  4732 3110 8D CF 9C			sta SHINEREC.YB
  4733
  4734 				; optimize OK (service.pas), line = 793
  4735
  4736 3113 A9 00			lda #$00
  4737 3115 8D D0 9C			sta SHINEREC.FRAME
  4738
  4739 				; optimize OK (service.pas), line = 794
  4740
  4741 3118 A9 01			lda #$01
  4742 311A 8D D2 9C			sta SHINEREC.ACTIVE
  4743
  4744 				; optimize OK (service.pas), line = 795
  4745
  4746 311D AD 66 A0			lda YB
  4747 3120 0A				asl @
  4748 3121 0A				asl @
  4749 3122 0A				asl @
  4750 3123 0A				asl @
  4751 3124 18 6D 65 A0			add XB
  4752 3128 A8				tay
  4753 3129 B9 00 DB			lda adr.WALL,y
  4754 312C 8D D1 9C			sta SHINEREC.BLOCK
  4755
  4756 				; ------------------------------------------------------------
  4757
  4758 = A065			XB	= DATAORIGIN+$057C
  4759 = A066			YB	= DATAORIGIN+$057D
  4760
  4761 = A065			@VarData	= XB
  4762 = 0002			@VarDataSize	= 2
  4763
  4764 312F			@exit
  4765 					.ifdef @new
  4766 					lda <@VarData
  4767 					sta :ztmp
  4768 					lda >@VarData
  4769 					ldy #@VarDataSize-1
  4770 					jmp @FreeMem
  4771 					els
  4772 312F 60				rts						; ret
  4773 					eif
  4774 				.endl
  4775
  4776 3130			.local	CHECKSHINE					; PROCEDURE
  4777
  4778 				; optimize OK (service.pas), line = 801
  4779
  4780 3130 AD D2 9C			lda SHINEREC.ACTIVE
  4781 3133 C9 01			cmp #$01
  4782 3135 D0 03			jne l_08FF
  4783 3137 20 69 2F			jsr SHINE_BLOCK
  4784 313A			l_08FF
  4785
  4786 313A			@exit
  4787 					.ifdef @new
  4788 					lda <@VarData
  4789 					sta :ztmp
  4790 					lda >@VarData
  4791 					ldy #@VarDataSize-1
  4792 					jmp @FreeMem
  4793 					els
  4794 313A 60				rts						; ret
  4795 					eif
  4796 				.endl
  4797
  4798 313B			.local	RANDOM_LETTER_DROP				; FUNCTION
  4799
  4800 				; --- RepeatUntilProlog
  4801 313B			l_0908
  4802
  4803 				; optimize OK (service.pas), line = 809
  4804
  4805 313B A9 64			lda #$64
  4806 313D 20 EE 25			jsr SYSTEM.RANDOM.@010180000
  4807 3140 AD 2E 9B			lda SYSTEM.RANDOM.@010180000.RESULT
  4808 3143 8D 69 A0			sta RN
  4809 3146 A9 00			lda #$00
  4810 3148 8D 6A A0			sta RN+1
  4811
  4812 				; optimize OK (service.pas), line = 810
  4813
  4814 314B A9 00			lda #$00
  4815 314D 8D 6B A0			sta SUM
  4816 3150 8D 6C A0			sta SUM+1
  4817
  4818 				; optimize OK (service.pas), line = 811
  4819
  4820 3153 8D 6D A0			sta LETTER
  4821 3156 8D 6E A0			sta LETTER+1
  4822
  4823 				; --- RepeatUntilProlog
  4824 3159			l_0916
  4825
  4826 				; optimize FAIL (0, service.pas), line = 816
  4827
  4828 3159 EE 6D A0			inc LETTER
  4829 315C D0 03			sne
  4830 315E EE 6E A0			inc LETTER+1
  4831
  4832 				; optimize OK (service.pas), line = 817
  4833
  4834 3161 AC 6D A0			ldy LETTER
  4835 3164 B9 AD 10			lda adr.LETTER_DIS,y
  4836 3167 18 6D 6B A0			add SUM
  4837 316B 8D 6B A0			sta SUM
  4838 316E AD 6C A0			lda SUM+1
  4839 3171 69 00			adc #$00
  4840 3173 8D 6C A0			sta SUM+1
  4841
  4842 				; optimize OK (service.pas), line = 820
  4843
  4844 3176 AD 6A A0			lda RN+1
  4845 3179 CD 6C A0			cmp SUM+1
  4846 317C D0 06			bne @+
  4847 317E AD 69 A0			lda RN
  4848 3181 CD 6B A0			cmp SUM
  4849 				@
  4850 3184 B0 D3			jcs l_0916
  4851
  4852 				; optimize OK (service.pas), line = 824
  4853
  4854 3186 AD 6D A0			lda LETTER
  4855 3189 38 E9 01			sub #$01
  4856 318C 85 9F			sta :STACKORIGIN+9
  4857 318E AD 6E A0			lda LETTER+1
  4858 3191 E9 00			sbc #$00
  4859 3193 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4860 3195 A9 00			lda #$00
  4861 3197 E9 00			sbc #$00
  4862 3199 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4863 319B A9 00			lda #$00
  4864 319D E9 00			sbc #$00
  4865 319F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  4866 31A1 AD E5 9C			lda LETT.LAST
  4867 31A4 85 A0			sta :STACKORIGIN+10
  4868 31A6 A0 00			ldy #$00
  4869 31A8 AD E6 9C			lda LETT.LAST+1
  4870 31AB 10 01			spl
  4871 31AD 88				dey
  4872 31AE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4873 31B0 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  4874 31B2 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  4875 31B4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  4876 31B6 C5 D0			cmp :STACKORIGIN+STACKWIDTH*3+10
  4877 31B8 D0 10			bne @+
  4878 31BA A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  4879 31BC C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  4880 31BE D0 0A			bne @+
  4881 31C0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4882 31C2 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  4883 31C4 D0 04			bne @+
  4884 31C6 A5 9F			lda :STACKORIGIN+9
  4885 31C8 C5 A0			cmp :STACKORIGIN+10
  4886 				@
  4887 31CA D0 03 4C 3B 31		jeq l_0908
  4888
  4889 				; optimize OK (service.pas), line = 826
  4890
  4891 31CF AD 6D A0			lda LETTER
  4892 31D2 38 E9 01			sub #$01
  4893 31D5 8D 67 A0			sta RESULT
  4894 31D8 AD 6E A0			lda LETTER+1
  4895 31DB E9 00			sbc #$00
  4896 31DD 8D 68 A0			sta RESULT+1
  4897 31E0			@exit
  4898
  4899 				; ------------------------------------------------------------
  4900
  4901 = A067			RESULT	= DATAORIGIN+$057E
  4902 = A069			RN	= DATAORIGIN+$0580
  4903 = A06B			SUM	= DATAORIGIN+$0582
  4904 = A06D			LETTER	= DATAORIGIN+$0584
  4905
  4906 = A069			@VarData	= RN
  4907 = 0006			@VarDataSize	= 6
  4908
  4909 31E0 60				rts						; ret
  4910 				.endl
  4911
  4912 31E1			.local	PUT_LETTER					; PROCEDURE
  4913
  4914 				; optimize OK (service.pas), line = 835
  4915
  4916 31E1 A9 00			lda #$00
  4917 31E3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4918 31E5 AD D9 9C			lda LETT.TYP+1
  4919 31E8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4920 31EA AD D8 9C			lda LETT.TYP
  4921 31ED 0A				asl @
  4922 31EE 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4923 31F0 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4924 31F2 0A				asl @
  4925 31F3 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4926 31F5 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4927 31F7 85 9F			sta :STACKORIGIN+9
  4928 31F9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4929 31FB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4930 31FD A5 9F			lda :STACKORIGIN+9
  4931 31FF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4932 3201 AD DA 9C			lda LETT.FRAME
  4933 3204 85 A0			sta :STACKORIGIN+10
  4934 3206 A9 00			lda #$00
  4935 3208 06 A0			asl :STACKORIGIN+10
  4936 320A 2A				rol @
  4937 320B 06 A0			asl :STACKORIGIN+10
  4938 320D 2A				rol @
  4939 320E 06 A0			asl :STACKORIGIN+10
  4940 3210 2A				rol @
  4941 3211 06 A0			asl :STACKORIGIN+10
  4942 3213 2A				rol @
  4943 3214 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4944 3217 8D 70 A0			sta FL+1
  4945 321A A5 A0			lda :STACKORIGIN+10
  4946 321C 8D 6F A0			sta FL
  4947
  4948 				; optimize OK (service.pas), line = 837
  4949
  4950 321F A9 00			lda #$00
  4951 3221 8D 73 A0			sta YL
  4952
  4953 3224			l_0966
  4954 				; --- ForToDoCondition
  4955 3224 AD 73 A0			lda YL
  4956 3227 C9 08			cmp #$08
  4957 3229 90 03 4C CA 32		jcs l_0974
  4958
  4959 				; optimize OK (service.pas), line = 839
  4960
  4961 322E 85 9F			sta :STACKORIGIN+9
  4962 3230 A9 00			lda #$00
  4963 3232 06 9F			asl :STACKORIGIN+9
  4964 3234 2A				rol @
  4965 3235 06 9F			asl :STACKORIGIN+9
  4966 3237 2A				rol @
  4967 3238 06 9F			asl :STACKORIGIN+9
  4968 323A 2A				rol @
  4969 323B 06 9F			asl :STACKORIGIN+9
  4970 323D 2A				rol @
  4971 323E 06 9F			asl :STACKORIGIN+9
  4972 3240 2A				rol @
  4973 3241 06 9F			asl :STACKORIGIN+9
  4974 3243 2A				rol @
  4975 3244 06 9F			asl :STACKORIGIN+9
  4976 3246 2A				rol @
  4977 3247 8D 72 A0			sta FW+1
  4978 324A A5 9F			lda :STACKORIGIN+9
  4979 324C 8D 71 A0			sta FW
  4980
  4981 				; optimize OK (service.pas), line = 841
  4982
  4983 324F AD D7 9C			lda LETT.Y
  4984 3252 18 6D 73 A0			add YL
  4985 3256 A8				tay
  4986 3257 AD D6 9C			lda LETT.X
  4987 325A 18 79 00 C0			add adr.ROW,y
  4988 325E 8D 01 A0			sta BLITZERO.DST
  4989 3261 A9 50			lda #$50
  4990 3263 79 00 C1			adc adr.ROW+256,y
  4991 3266 8D 02 A0			sta BLITZERO.DST+1
  4992 3269 A9 00			lda #$00
  4993 326B 69 00			adc #$00
  4994 326D 8D 03 A0			sta BLITZERO.DST+2
  4995 3270 A9 00			lda #$00
  4996 3272 69 00			adc #$00
  4997 3274 8D 04 A0			sta BLITZERO.DST+3
  4998 3277 AD 5D 9C			lda LETTERS.OFS
  4999 327A 18 6D 71 A0			add FW
  5000 327E 85 A1			sta :STACKORIGIN+11
  5001 3280 AD 5E 9C			lda LETTERS.OFS+1
  5002 3283 6D 72 A0			adc FW+1
  5003 3286 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5004 3288 AD 5F 9C			lda LETTERS.OFS+2
  5005 328B 69 00			adc #$00
  5006 328D 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  5007 328F AD 60 9C			lda LETTERS.OFS+3
  5008 3292 69 00			adc #$00
  5009 3294 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  5010 3296 A5 A1			lda :STACKORIGIN+11
  5011 3298 18 6D 6F A0			add FL
  5012 329C 8D FD 9F			sta BLITZERO.SRC
  5013 329F A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  5014 32A1 6D 70 A0			adc FL+1
  5015 32A4 8D FE 9F			sta BLITZERO.SRC+1
  5016 32A7 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  5017 32A9 69 00			adc #$00
  5018 32AB 8D FF 9F			sta BLITZERO.SRC+2
  5019 32AE A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  5020 32B0 69 00			adc #$00
  5021 32B2 8D 00 A0			sta BLITZERO.SRC+3
  5022 32B5 A9 10			lda #$10
  5023 32B7 8D 05 A0			sta BLITZERO.SIZE
  5024 32BA A9 00			lda #$00
  5025 32BC 8D 06 A0			sta BLITZERO.SIZE+1
  5026 32BF 20 5C 2C			jsr BLITZERO
  5027
  5028 				; --- ForToDoEpilog
  5029 32C2 EE 73 A0			inc YL
  5030 32C5 F0 03 4C 24 32		jne l_0966
  5031 32CA			l_0974
  5032
  5033 				; ------------------------------------------------------------
  5034
  5035 = A06F			FL	= DATAORIGIN+$0586
  5036 = A071			FW	= DATAORIGIN+$0588
  5037 = A073			YL	= DATAORIGIN+$058A
  5038
  5039 = A06F			@VarData	= FL
  5040 = 0005			@VarDataSize	= 5
  5041
  5042 32CA			@exit
  5043 					.ifdef @new
  5044 					lda <@VarData
  5045 					sta :ztmp
  5046 					lda >@VarData
  5047 					ldy #@VarDataSize-1
  5048 					jmp @FreeMem
  5049 					els
  5050 32CA 60				rts						; ret
  5051 					eif
  5052 				.endl
  5053
  5054 32CB			.local	REMOVE_LETTER					; PROCEDURE
  5055
  5056 				; optimize OK (service.pas), line = 853
  5057
  5058 32CB A9 00			lda #$00
  5059 32CD 8D 76 A0			sta YL
  5060
  5061 32D0			l_09B2
  5062 				; --- ForToDoCondition
  5063 32D0 AD 76 A0			lda YL
  5064 32D3 C9 08			cmp #$08
  5065 32D5 B0 6F			jcs l_09C0
  5066
  5067 				; optimize OK (service.pas), line = 855
  5068
  5069 32D7 AD D7 9C			lda LETT.Y
  5070 32DA 6D 76 A0			adc YL
  5071 32DD A8				tay
  5072 32DE AD D6 9C			lda LETT.X
  5073 32E1 18 79 00 C0			add adr.ROW,y
  5074 32E5 8D 74 A0			sta AD
  5075 32E8 A9 00			lda #$00
  5076 32EA 79 00 C1			adc adr.ROW+256,y
  5077 32ED 8D 75 A0			sta AD+1
  5078
  5079 				; optimize OK (service.pas), line = 856
  5080
  5081 32F0 C9 FA			cmp #$FA
  5082 32F2 B0 4D			jcs l_09E5
  5083
  5084 				; optimize OK (service.pas), line = 859
  5085
  5086 32F4 AD 74 A0			lda AD
  5087 32F7 8D 13 A0			sta BLITROW.DST
  5088 32FA A9 50			lda #$50
  5089 32FC 18 6D 75 A0			add AD+1
  5090 3300 8D 14 A0			sta BLITROW.DST+1
  5091 3303 A9 00			lda #$00
  5092 3305 69 00			adc #$00
  5093 3307 8D 15 A0			sta BLITROW.DST+2
  5094 330A A9 00			lda #$00
  5095 330C 69 00			adc #$00
  5096 330E 8D 16 A0			sta BLITROW.DST+3
  5097 3311 AD FD 9B			lda PLAYSCREEN.OFS
  5098 3314 18 6D 74 A0			add AD
  5099 3318 8D 0F A0			sta BLITROW.SRC
  5100 331B AD FE 9B			lda PLAYSCREEN.OFS+1
  5101 331E 6D 75 A0			adc AD+1
  5102 3321 8D 10 A0			sta BLITROW.SRC+1
  5103 3324 AD FF 9B			lda PLAYSCREEN.OFS+2
  5104 3327 69 00			adc #$00
  5105 3329 8D 11 A0			sta BLITROW.SRC+2
  5106 332C AD 00 9C			lda PLAYSCREEN.OFS+3
  5107 332F 69 00			adc #$00
  5108 3331 8D 12 A0			sta BLITROW.SRC+3
  5109 3334 A9 10			lda #$10
  5110 3336 8D 17 A0			sta BLITROW.SIZE
  5111 3339 A9 00			lda #$00
  5112 333B 8D 18 A0			sta BLITROW.SIZE+1
  5113 333E 20 0F 2D			jsr BLITROW
  5114 3341			l_09E5
  5115
  5116 				; --- ForToDoEpilog
  5117 3341 EE 76 A0			inc YL
  5118 3344 D0 8A			jne l_09B2
  5119 3346			l_09C0
  5120
  5121 				; ------------------------------------------------------------
  5122
  5123 = A074			AD	= DATAORIGIN+$058B
  5124 = A076			YL	= DATAORIGIN+$058D
  5125
  5126 = A074			@VarData	= AD
  5127 = 0003			@VarDataSize	= 3
  5128
  5129 3346			@exit
  5130 					.ifdef @new
  5131 					lda <@VarData
  5132 					sta :ztmp
  5133 					lda >@VarData
  5134 					ldy #@VarDataSize-1
  5135 					jmp @FreeMem
  5136 					els
  5137 3346 60				rts						; ret
  5138 					eif
  5139 				.endl
  5140
  5141 3347			.local	DISABLE_LETTER					; PROCEDURE
  5142
  5143 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 867
  5144
  5145 3347 20 CB 32			jsr REMOVE_LETTER
  5146
  5147 				; optimize OK (service.pas), line = 868
  5148
  5149 334A A9 00			lda #$00
  5150 334C 8D DC 9C			sta LETT.ACTIVE
  5151
  5152 334F			@exit
  5153 					.ifdef @new
  5154 					lda <@VarData
  5155 					sta :ztmp
  5156 					lda >@VarData
  5157 					ldy #@VarDataSize-1
  5158 					jmp @FreeMem
  5159 					els
  5160 334F 60				rts						; ret
  5161 					eif
  5162 				.endl
  5163
  5164 3350			.local	START_LETTER					; PROCEDURE
  5165
  5166 				; optimize OK (service.pas), line = 874
  5167
  5168 3350 AD DC 9C			lda LETT.ACTIVE
  5169 3353 F0 03			jeq l_0A14
  5170 3355 20 47 33			jsr DISABLE_LETTER
  5171 3358			l_0A14
  5172
  5173 				; optimize OK (service.pas), line = 876
  5174
  5175 3358 AD 77 A0			lda XL
  5176 335B 8D D6 9C			sta LETT.X
  5177
  5178 				; optimize OK (service.pas), line = 877
  5179
  5180 335E AD 79 A0			lda YL
  5181 3361 8D D7 9C			sta LETT.Y
  5182
  5183 				; optimize OK (service.pas), line = 878
  5184
  5185 3364 AD 7B A0			lda LETTER
  5186 3367 8D D8 9C			sta LETT.TYP
  5187 336A AD 7C A0			lda LETTER+1
  5188 336D 8D D9 9C			sta LETT.TYP+1
  5189
  5190 				; optimize OK (service.pas), line = 879
  5191
  5192 3370 A9 00			lda #$00
  5193 3372 8D DA 9C			sta LETT.FRAME
  5194
  5195 				; optimize OK (service.pas), line = 880
  5196
  5197 3375 8D DB 9C			sta LETT.SUBFRAME
  5198
  5199 				; optimize OK (service.pas), line = 881
  5200
  5201 3378 A9 01			lda #$01
  5202 337A 8D DC 9C			sta LETT.ACTIVE
  5203
  5204 				; ------------------------------------------------------------
  5205
  5206 = A077			XL	= DATAORIGIN+$058E
  5207 = A079			YL	= DATAORIGIN+$0590
  5208 = A07B			LETTER	= DATAORIGIN+$0592
  5209
  5210 = A077			@VarData	= XL
  5211 = 0006			@VarDataSize	= 6
  5212
  5213 337D			@exit
  5214 					.ifdef @new
  5215 					lda <@VarData
  5216 					sta :ztmp
  5217 					lda >@VarData
  5218 					ldy #@VarDataSize-1
  5219 					jmp @FreeMem
  5220 					els
  5221 337D 60				rts						; ret
  5222 					eif
  5223 				.endl
  5224
  5225 337E			.local	CHECK_LETTER					; PROCEDURE
  5226
  5227 				; optimize OK (service.pas), line = 887
  5228
  5229 337E AD DC 9C			lda LETT.ACTIVE
  5230 3381 D0 03 4C 7D 34		jeq l_0A43
  5231
  5232 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 889
  5233
  5234 3386 20 CB 32			jsr REMOVE_LETTER
  5235
  5236 				; optimize FAIL (0, service.pas), line = 890
  5237
  5238 3389 EE D7 9C			inc LETT.Y
  5239
  5240 				; optimize OK (service.pas), line = 891
  5241
  5242 338C AD D7 9C			lda LETT.Y
  5243 338F C9 C8			cmp #$C8
  5244 3391 90 03			jcc l_0A5B
  5245 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 892
  5246 3393 4C 6F 34			jmp l_0A66
  5247 3396			l_0A5B
  5248
  5249 				; optimize FAIL ('PUT_LETTER', service.pas), line = 894
  5250
  5251 3396 20 E1 31			jsr PUT_LETTER
  5252
  5253 				; optimize FAIL (0, service.pas), line = 895
  5254
  5255 3399 EE DB 9C			inc LETT.SUBFRAME
  5256
  5257 				; optimize OK (service.pas), line = 896
  5258
  5259 339C AD DB 9C			lda LETT.SUBFRAME
  5260 339F C9 05			cmp #$05
  5261 33A1 D0 08			jne l_0A7D
  5262
  5263 				; optimize OK (service.pas), line = 898
  5264
  5265 33A3 A9 00			lda #$00
  5266 33A5 8D DB 9C			sta LETT.SUBFRAME
  5267
  5268 				; optimize FAIL (0, service.pas), line = 899
  5269
  5270 33A8 EE DA 9C			inc LETT.FRAME
  5271 33AB			l_0A7D
  5272
  5273 				; optimize OK (service.pas), line = 902
  5274
  5275 33AB AD DA 9C			lda LETT.FRAME
  5276 33AE C9 08			cmp #$08
  5277 33B0 D0 05			jne l_0A9A
  5278 33B2 A9 00			lda #$00
  5279 33B4 8D DA 9C			sta LETT.FRAME
  5280 33B7			l_0A9A
  5281
  5282 				; optimize OK (service.pas), line = 904
  5283
  5284 33B7 AD D6 9C			lda LETT.X
  5285 33BA 18 69 10			add #$10
  5286 33BD 85 A0			sta :STACKORIGIN+10
  5287 33BF A9 00			lda #$00
  5288 33C1 69 00			adc #$00
  5289 33C3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5290 33C5 A9 00			lda #$00
  5291 33C7 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5292 33C9 D0 05			bne @+
  5293 33CB AD 71 9C			lda VAUS.X
  5294 33CE C5 A0			cmp :STACKORIGIN+10
  5295 				@
  5296 33D0 90 03 4C 72 34		jcs l_0AF3
  5297 				@
  5298 33D5 AD 71 9C			lda VAUS.X
  5299 33D8 18 6D 79 9C			add VAUS.WIDTH
  5300 33DC 85 A0			sta :STACKORIGIN+10
  5301 33DE A9 00			lda #$00
  5302 33E0 69 00			adc #$00
  5303 33E2 C9 00			cmp #$00
  5304 33E4 D0 05			bne @+
  5305 33E6 A5 A0			lda :STACKORIGIN+10
  5306 33E8 CD D6 9C			cmp LETT.X
  5307 				@
  5308 33EB B0 03 4C 72 34		jcc l_0AF3
  5309 33F0 D0 03 4C 72 34		jeq l_0AF3
  5310 				@
  5311 33F5 AD D7 9C			lda LETT.Y
  5312 33F8 18 69 08			add #$08
  5313 33FB 85 A1			sta :STACKORIGIN+11
  5314 33FD A9 00			lda #$00
  5315 33FF 69 00			adc #$00
  5316 3401 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5317 3403 A9 00			lda #$00
  5318 3405 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5319 3407 D0 05			bne @+
  5320 3409 AD 72 9C			lda VAUS.Y
  5321 340C C5 A1			cmp :STACKORIGIN+11
  5322 				@
  5323 340E B0 62			jcs l_0AF3
  5324 				@
  5325 3410 AD 72 9C			lda VAUS.Y
  5326 3413 18 6D 7A 9C			add VAUS.HEIGHT
  5327 3417 85 A0			sta :STACKORIGIN+10
  5328 3419 A9 00			lda #$00
  5329 341B 69 00			adc #$00
  5330 341D C9 00			cmp #$00
  5331 341F D0 05			bne @+
  5332 3421 A5 A0			lda :STACKORIGIN+10
  5333 3423 CD D7 9C			cmp LETT.Y
  5334 				@
  5335 3426 90 4A			jcc l_0AF3
  5336 3428 F0 48			jeq l_0AF3
  5337 				@
  5338
  5339 				; optimize OK (service.pas), line = 907
  5340
  5341 342A A9 64			lda #$64
  5342 342C 8D DE 9B			sta BALL_BLOCK_SOUND.A
  5343 342F A9 00			lda #$00
  5344 3431 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
  5345 3434 A9 0A			lda #$0A
  5346 3436 8D E0 9B			sta BALL_BLOCK_SOUND.B
  5347 3439 A9 00			lda #$00
  5348 343B 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
  5349 343E 20 26 2B			jsr BALL_BLOCK_SOUND
  5350
  5351 				; optimize OK (service.pas), line = 908
  5352
  5353 3441 AC D8 9C			ldy LETT.TYP
  5354 3444 C8				iny
  5355 3445 8C 7D 9C			sty VAUS.LETTER
  5356
  5357 				; optimize OK (service.pas), line = 909
  5358
  5359 3448 AD CD 9C			lda CUR_PLAYER
  5360 344B 0A				asl @
  5361 344C 0A				asl @
  5362 344D A8				tay
  5363 344E B9 B2 9C			lda adr.SCORE.PLAYER,y
  5364 3451 18 69 E8			add #$E8
  5365 3454 99 B2 9C			sta adr.SCORE.PLAYER,y
  5366 3457 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
  5367 345A 69 03			adc #$03
  5368 345C 99 B3 9C			sta adr.SCORE.PLAYER+1,y
  5369 345F B9 B4 9C			lda adr.SCORE.PLAYER+2,y
  5370 3462 69 00			adc #$00
  5371 3464 99 B4 9C			sta adr.SCORE.PLAYER+2,y
  5372 3467 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
  5373 346A 69 00			adc #$00
  5374 346C 99 B5 9C			sta adr.SCORE.PLAYER+3,y
  5375 346F			l_0A66
  5376
  5377 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 910
  5378
  5379 346F 20 47 33			jsr DISABLE_LETTER
  5380 3472			l_0AF3
  5381
  5382 				; optimize OK (service.pas), line = 914
  5383
  5384 3472 A9 00			lda #$00
  5385 3474 8D DD 9C			sta LETT.INCOMING
  5386 3477 8D DE 9C			sta LETT.INCOMING+1
  5387 347A 4C B4 34			jmp l_0B14
  5388 347D			l_0A43
  5389
  5390 				; optimize OK (service.pas), line = 916
  5391
  5392 347D AD DD 9C			lda LETT.INCOMING
  5393 3480 C9 E9			cmp #$E9
  5394 3482 AD DE 9C			lda LETT.INCOMING+1
  5395 3485 E9 03			sbc #$03
  5396 3487 50 02			svc
  5397 3489 49 80			eor #$80
  5398 348B 30 27			jmi l_0B25
  5399
  5400 				; optimize OK (service.pas), line = 917
  5401
  5402 348D AD DF 9C			lda LETT.NEXTX
  5403 3490 8D 77 A0			sta START_LETTER.XL
  5404 3493 AD E0 9C			lda LETT.NEXTX+1
  5405 3496 8D 78 A0			sta START_LETTER.XL+1
  5406 3499 AD E1 9C			lda LETT.NEXTY
  5407 349C 8D 79 A0			sta START_LETTER.YL
  5408 349F AD E2 9C			lda LETT.NEXTY+1
  5409 34A2 8D 7A A0			sta START_LETTER.YL+1
  5410 34A5 AD E3 9C			lda LETT.NEXTTYPE
  5411 34A8 8D 7B A0			sta START_LETTER.LETTER
  5412 34AB AD E4 9C			lda LETT.NEXTTYPE+1
  5413 34AE 8D 7C A0			sta START_LETTER.LETTER+1
  5414 34B1 20 50 33			jsr START_LETTER
  5415 34B4			l_0B14
  5416 34B4			l_0B25
  5417
  5418 34B4			@exit
  5419 					.ifdef @new
  5420 					lda <@VarData
  5421 					sta :ztmp
  5422 					lda >@VarData
  5423 					ldy #@VarDataSize-1
  5424 					jmp @FreeMem
  5425 					els
  5426 34B4 60				rts						; ret
  5427 					eif
  5428 				.endl
  5429
  5430 34B5			.local	SHOWBTMPICTURE					; PROCEDURE
  5431
  5432 				; ------------------------------------------------------------
  5433
  5434 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5435 				; as Pointer
  5436 34B5 B5 96			lda :STACKORIGIN,x
  5437 34B7 85 84			sta :bp2
  5438 34B9 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5439 34BB 85 85			sta :bp2+1
  5440 34BD A0 07			ldy #$07
  5441 34BF B1 84 99 7D A0 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5442 34C7 CA				dex
  5443 34C8			@main
  5444
  5445 				; optimize OK (service.pas), line = 927
  5446
  5447 34C8 AD 81 A0			lda BTM.OFS
  5448 34CB 8D F2 9F			sta BLITBOX.SRC
  5449 34CE AD 82 A0			lda BTM.OFS+1
  5450 34D1 8D F3 9F			sta BLITBOX.SRC+1
  5451 34D4 AD 83 A0			lda BTM.OFS+2
  5452 34D7 8D F4 9F			sta BLITBOX.SRC+2
  5453 34DA AD 84 A0			lda BTM.OFS+3
  5454 34DD 8D F5 9F			sta BLITBOX.SRC+3
  5455 34E0 A9 00			lda #$00
  5456 34E2 8D F6 9F			sta BLITBOX.DST
  5457 34E5 A9 50			lda #$50
  5458 34E7 8D F7 9F			sta BLITBOX.DST+1
  5459 34EA A9 00			lda #$00
  5460 34EC 8D F8 9F			sta BLITBOX.DST+2
  5461 34EF 8D F9 9F			sta BLITBOX.DST+3
  5462 34F2 AD 7D A0			lda BTM.WIDTH
  5463 34F5 8D FA 9F			sta BLITBOX.W
  5464 34F8 AD 7E A0			lda BTM.WIDTH+1
  5465 34FB 8D FB 9F			sta BLITBOX.W+1
  5466 34FE AD 7F A0			lda BTM.HEIGHT
  5467 3501 8D FC 9F			sta BLITBOX.H
  5468 3504 20 CB 2B			jsr BLITBOX
  5469
  5470 				; ------------------------------------------------------------
  5471
  5472 = A07D			adr.BTM	= DATAORIGIN+$0594	; [8] RECORD
  5473 3507			.var BTM	= adr.BTM .word
  5474 = A07D			BTM.WIDTH	= DATAORIGIN+$0594
  5475 = A07F			BTM.HEIGHT	= DATAORIGIN+$0596
  5476 = A081			BTM.OFS	= DATAORIGIN+$0598
  5477 = A085			X	= DATAORIGIN+$059C
  5478 = A087			Y	= DATAORIGIN+$059E
  5479 = A089			OFST	= DATAORIGIN+$05A0
  5480
  5481 = A07D			@VarData	= BTM.WIDTH
  5482 = 000E			@VarDataSize	= 14
  5483
  5484 3507			@exit
  5485 					.ifdef @new
  5486 					lda <@VarData
  5487 					sta :ztmp
  5488 					lda >@VarData
  5489 					ldy #@VarDataSize-1
  5490 					jmp @FreeMem
  5491 					els
  5492 3507 60				rts						; ret
  5493 					eif
  5494 = 3508 7D A0		BTM
  5494 				.endl
  5495
  5496 350A			.local	SETPALETTE					; PROCEDURE
  5497
  5498 				; ------------------------------------------------------------
  5499
  5500 = A08B			BTM	= DATAORIGIN+$05A2
  5501 = 9AE9			BTM.WIDTH	= DATAORIGIN+$0000
  5502 = 9AEB			BTM.HEIGHT	= DATAORIGIN+$0002
  5503 = 9AED			BTM.OFS	= DATAORIGIN+$0004
  5504
  5505 = A08B			@VarData	= BTM
  5506 = 0002			@VarDataSize	= 2
  5507
  5508 350A			@exit
  5509 					.ifdef @new
  5510 					lda <@VarData
  5511 					sta :ztmp
  5512 					lda >@VarData
  5513 					ldy #@VarDataSize-1
  5514 					jmp @FreeMem
  5515 					els
  5516 350A 60				rts						; ret
  5517 					eif
  5518 				.endl
  5519
  5520 350B			.local	PLACE_BALL					; PROCEDURE
  5521
  5522 				; optimize OK (service.pas), line = 1022
  5523
  5524 350B A9 00			lda #$00
  5525 350D 8D 93 A0			sta YP
  5526
  5527 3510			l_0B4E
  5528 				; --- ForToDoCondition
  5529 3510 AD 93 A0			lda YP
  5530 3513 C9 05			cmp #$05
  5531 3515 90 03 4C D1 35		jcs l_0B5C
  5532
  5533 				; optimize OK (service.pas), line = 1024
  5534
  5535 351A AC 8F A0 84 84 AC + 	mwy BALL :bp2
  5536 3524 A0 00			ldy #BALL.X-DATAORIGIN
  5537 3526 B1 84			lda (:bp2),y
  5538 3528 38 E9 03			sub #$03
  5539 352B 85 9F			sta :STACKORIGIN+9
  5540 352D C8				iny
  5541 352E B1 84			lda (:bp2),y
  5542 3530 E9 00			sbc #$00
  5543 3532 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5544 3534 AD 93 A0			lda YP
  5545 3537 38 E9 03			sub #$03
  5546 353A 85 A0			sta :STACKORIGIN+10
  5547 353C A9 00			lda #$00
  5548 353E E9 00			sbc #$00
  5549 3540 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5550 3542 A0 02			ldy #BALL.Y-DATAORIGIN
  5551 3544 A5 A0			lda :STACKORIGIN+10
  5552 3546 18 71 84			add (:bp2),y
  5553 3549 85 A0			sta :STACKORIGIN+10
  5554 354B C8				iny
  5555 354C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5556 354E 71 84			adc (:bp2),y
  5557 3550 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5558 3552 A4 A0			ldy :STACKORIGIN+10
  5559 3554 A5 9F			lda :STACKORIGIN+9
  5560 3556 18 79 00 C0			add adr.ROW,y
  5561 355A 8D 94 A0			sta ADR
  5562 355D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5563 355F 79 00 C1			adc adr.ROW+256,y
  5564 3562 8D 95 A0			sta ADR+1
  5565
  5566 				; optimize OK (service.pas), line = 1027
  5567
  5568 3565 AD 94 A0			lda ADR
  5569 3568 8D 01 A0			sta BLITZERO.DST
  5570 356B A9 50			lda #$50
  5571 356D 18 6D 95 A0			add ADR+1
  5572 3571 8D 02 A0			sta BLITZERO.DST+1
  5573 3574 A9 00			lda #$00
  5574 3576 69 00			adc #$00
  5575 3578 8D 03 A0			sta BLITZERO.DST+2
  5576 357B A9 00			lda #$00
  5577 357D 69 00			adc #$00
  5578 357F 8D 04 A0			sta BLITZERO.DST+3
  5579 3582 A9 00			lda #$00
  5580 3584 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5581 3586 AD 93 A0			lda YP
  5582 3589 0A				asl @
  5583 358A 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5584 358C 0A				asl @
  5585 358D 26 B2			rol :STACKORIGIN+STACKWIDTH+12
  5586 358F 18 6D 93 A0			add YP
  5587 3593 85 A2			sta :STACKORIGIN+12
  5588 3595 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  5589 3597 69 00			adc #$00
  5590 3599 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5591 359B AD F5 9B			lda BALLDATA.OFS
  5592 359E 18 65 A2			add :STACKORIGIN+12
  5593 35A1 8D FD 9F			sta BLITZERO.SRC
  5594 35A4 AD F6 9B			lda BALLDATA.OFS+1
  5595 35A7 65 B2			adc :STACKORIGIN+STACKWIDTH+12
  5596 35A9 8D FE 9F			sta BLITZERO.SRC+1
  5597 35AC AD F7 9B			lda BALLDATA.OFS+2
  5598 35AF 69 00			adc #$00
  5599 35B1 8D FF 9F			sta BLITZERO.SRC+2
  5600 35B4 AD F8 9B			lda BALLDATA.OFS+3
  5601 35B7 69 00			adc #$00
  5602 35B9 8D 00 A0			sta BLITZERO.SRC+3
  5603 35BC A9 05			lda #$05
  5604 35BE 8D 05 A0			sta BLITZERO.SIZE
  5605 35C1 A9 00			lda #$00
  5606 35C3 8D 06 A0			sta BLITZERO.SIZE+1
  5607 35C6 20 5C 2C			jsr BLITZERO
  5608
  5609 				; --- ForToDoEpilog
  5610 35C9 EE 93 A0			inc YP
  5611 35CC F0 03 4C 10 35		jne l_0B4E
  5612 35D1			l_0B5C
  5613
  5614 				; ------------------------------------------------------------
  5615
  5616 = A08F			BALL	= DATAORIGIN+$05A6
  5617 = 9AE9			BALL.X	= DATAORIGIN+$0000
  5618 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  5619 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  5620 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  5621 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  5622 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  5623 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  5624 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  5625 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  5626 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  5627 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  5628 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  5629 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  5630 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  5631 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  5632 = 9B03			BALL.STM	= DATAORIGIN+$001A
  5633 = A093			YP	= DATAORIGIN+$05AA
  5634 = A094			ADR	= DATAORIGIN+$05AB
  5635
  5636 = A08F			@VarData	= BALL
  5637 = 0005			@VarDataSize	= 5
  5638
  5639 35D1			@exit
  5640 					.ifdef @new
  5641 					lda <@VarData
  5642 					sta :ztmp
  5643 					lda >@VarData
  5644 					ldy #@VarDataSize-1
  5645 					jmp @FreeMem
  5646 					els
  5647 35D1 60				rts						; ret
  5648 					eif
  5649 				.endl
  5650
  5651 35D2			.local	REMOVE_BALL					; PROCEDURE
  5652
  5653 				; optimize OK (service.pas), line = 1041
  5654
  5655 35D2 A9 00			lda #$00
  5656 35D4 8D 9A A0			sta YP
  5657
  5658 35D7			l_0B9B
  5659 				; --- ForToDoCondition
  5660 35D7 AD 9A A0			lda YP
  5661 35DA C9 05			cmp #$05
  5662 35DC 90 03 4C 8D 36		jcs l_0BA9
  5663
  5664 				; optimize OK (service.pas), line = 1043
  5665
  5666 35E1 AC 96 A0 84 84 AC + 	mwy BALL :bp2
  5667 35EB A0 08			ldy #BALL.OLDX-DATAORIGIN
  5668 35ED B1 84			lda (:bp2),y
  5669 35EF 38 E9 03			sub #$03
  5670 35F2 85 9F			sta :STACKORIGIN+9
  5671 35F4 C8				iny
  5672 35F5 B1 84			lda (:bp2),y
  5673 35F7 E9 00			sbc #$00
  5674 35F9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5675 35FB AD 9A A0			lda YP
  5676 35FE 38 E9 03			sub #$03
  5677 3601 85 A0			sta :STACKORIGIN+10
  5678 3603 A9 00			lda #$00
  5679 3605 E9 00			sbc #$00
  5680 3607 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5681 3609 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5682 360B A5 A0			lda :STACKORIGIN+10
  5683 360D 18 71 84			add (:bp2),y
  5684 3610 85 A0			sta :STACKORIGIN+10
  5685 3612 C8				iny
  5686 3613 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5687 3615 71 84			adc (:bp2),y
  5688 3617 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5689 3619 A4 A0			ldy :STACKORIGIN+10
  5690 361B A5 9F			lda :STACKORIGIN+9
  5691 361D 18 79 00 C0			add adr.ROW,y
  5692 3621 8D 9B A0			sta TEMP
  5693 3624 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5694 3626 79 00 C1			adc adr.ROW+256,y
  5695 3629 8D 9C A0			sta TEMP+1
  5696
  5697 				; optimize OK (service.pas), line = 1045
  5698
  5699 362C 0D 9B A0			ora TEMP
  5700 362F F0 54			jeq l_0BDF
  5701 3631 AD 9C A0			lda TEMP+1
  5702 3634 C9 FA			cmp #$FA
  5703 3636 B0 4D			jcs l_0BDF
  5704
  5705 				; optimize OK (service.pas), line = 1048
  5706
  5707 3638 AD 9B A0			lda TEMP
  5708 363B 8D 13 A0			sta BLITROW.DST
  5709 363E A9 50			lda #$50
  5710 3640 18 6D 9C A0			add TEMP+1
  5711 3644 8D 14 A0			sta BLITROW.DST+1
  5712 3647 A9 00			lda #$00
  5713 3649 69 00			adc #$00
  5714 364B 8D 15 A0			sta BLITROW.DST+2
  5715 364E A9 00			lda #$00
  5716 3650 69 00			adc #$00
  5717 3652 8D 16 A0			sta BLITROW.DST+3
  5718 3655 AD FD 9B			lda PLAYSCREEN.OFS
  5719 3658 18 6D 9B A0			add TEMP
  5720 365C 8D 0F A0			sta BLITROW.SRC
  5721 365F AD FE 9B			lda PLAYSCREEN.OFS+1
  5722 3662 6D 9C A0			adc TEMP+1
  5723 3665 8D 10 A0			sta BLITROW.SRC+1
  5724 3668 AD FF 9B			lda PLAYSCREEN.OFS+2
  5725 366B 69 00			adc #$00
  5726 366D 8D 11 A0			sta BLITROW.SRC+2
  5727 3670 AD 00 9C			lda PLAYSCREEN.OFS+3
  5728 3673 69 00			adc #$00
  5729 3675 8D 12 A0			sta BLITROW.SRC+3
  5730 3678 A9 05			lda #$05
  5731 367A 8D 17 A0			sta BLITROW.SIZE
  5732 367D A9 00			lda #$00
  5733 367F 8D 18 A0			sta BLITROW.SIZE+1
  5734 3682 20 0F 2D			jsr BLITROW
  5735 3685			l_0BDF
  5736
  5737 				; --- ForToDoEpilog
  5738 3685 EE 9A A0			inc YP
  5739 3688 F0 03 4C D7 35		jne l_0B9B
  5740 368D			l_0BA9
  5741
  5742 				; ------------------------------------------------------------
  5743
  5744 = A096			BALL	= DATAORIGIN+$05AD
  5745 = 9AE9			BALL.X	= DATAORIGIN+$0000
  5746 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  5747 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  5748 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  5749 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  5750 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  5751 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  5752 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  5753 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  5754 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  5755 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  5756 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  5757 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  5758 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  5759 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  5760 = 9B03			BALL.STM	= DATAORIGIN+$001A
  5761 = A09A			YP	= DATAORIGIN+$05B1
  5762 = A09B			TEMP	= DATAORIGIN+$05B2
  5763
  5764 = A096			@VarData	= BALL
  5765 = 0005			@VarDataSize	= 5
  5766
  5767 368D			@exit
  5768 					.ifdef @new
  5769 					lda <@VarData
  5770 					sta :ztmp
  5771 					lda >@VarData
  5772 					ldy #@VarDataSize-1
  5773 					jmp @FreeMem
  5774 					els
  5775 368D 60				rts						; ret
  5776 					eif
  5777 				.endl
  5778
  5779 368E			.local	WAIT_VBL					; PROCEDURE
  5780
  5781 368E			@exit
  5782 					.ifdef @new
  5783 					lda <@VarData
  5784 					sta :ztmp
  5785 					lda >@VarData
  5786 					ldy #@VarDataSize-1
  5787 					jmp @FreeMem
  5788 					els
  5789 368E 60				rts						; ret
  5790 					eif
  5791 				.endl
  5792
  5793 368F			.local	SET_BALL					; PROCEDURE
  5794
  5795 				; optimize OK (service.pas), line = 1095
  5796
  5797 368F AC 9D A0 84 84 AC + 	mwy BALL :bp2
  5798 3699 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5799 369B B1 84			lda (:bp2),y
  5800 369D 85 9F			sta :STACKORIGIN+9
  5801 369F C8				iny
  5802 36A0 B1 84			lda (:bp2),y
  5803 36A2 A0 01			ldy #1
  5804 36A4 C9 FF			cmp #$FF
  5805 36A6 D0 04			bne @+
  5806 36A8 A5 9F			lda :STACKORIGIN+9
  5807 36AA C9 FF			cmp #$FF
  5808 				@
  5809 36AC D0 01			bne @+
  5810 36AE 88				dey
  5811 				@
  5812 36AF 84 9F			sty :STACKORIGIN+9
  5813 36B1 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5814 36B3 B1 84			lda (:bp2),y
  5815 36B5 85 A0			sta :STACKORIGIN+10
  5816 36B7 C8				iny
  5817 36B8 B1 84			lda (:bp2),y
  5818 36BA A0 01			ldy #1
  5819 36BC C9 FF			cmp #$FF
  5820 36BE D0 04			bne @+
  5821 36C0 A5 A0			lda :STACKORIGIN+10
  5822 36C2 C9 FF			cmp #$FF
  5823 				@
  5824 36C4 D0 01			bne @+
  5825 36C6 88				dey
  5826 				@
  5827 36C7 98				tya
  5828 36C8 25 9F			and :STACKORIGIN+9
  5829 36CA 85 9F			sta :STACKORIGIN+9
  5830 36CC A0 08			ldy #BALL.OLDX-DATAORIGIN
  5831 36CE B1 84			lda (:bp2),y
  5832 36D0 85 A0			sta :STACKORIGIN+10
  5833 36D2 C8				iny
  5834 36D3 B1 84			lda (:bp2),y
  5835 36D5 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5836 36D7 A0 00			ldy #BALL.X-DATAORIGIN
  5837 36D9 B1 84			lda (:bp2),y
  5838 36DB 85 A1			sta :STACKORIGIN+11
  5839 36DD C8				iny
  5840 36DE B1 84			lda (:bp2),y
  5841 36E0 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5842 36E2 A0 01			ldy #1
  5843 36E4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5844 36E6 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5845 36E8 D0 04			bne @+
  5846 36EA A5 A0			lda :STACKORIGIN+10
  5847 36EC C5 A1			cmp :STACKORIGIN+11
  5848 				@
  5849 36EE D0 01			bne @+
  5850 36F0 88				dey
  5851 				@
  5852 36F1 84 A0			sty :STACKORIGIN+10
  5853 36F3 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5854 36F5 B1 84			lda (:bp2),y
  5855 36F7 85 A1			sta :STACKORIGIN+11
  5856 36F9 C8				iny
  5857 36FA B1 84			lda (:bp2),y
  5858 36FC 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5859 36FE A0 02			ldy #BALL.Y-DATAORIGIN
  5860 3700 B1 84			lda (:bp2),y
  5861 3702 85 A2			sta :STACKORIGIN+12
  5862 3704 C8				iny
  5863 3705 B1 84			lda (:bp2),y
  5864 3707 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  5865 3709 A0 01			ldy #1
  5866 370B A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  5867 370D C5 B2			cmp :STACKORIGIN+STACKWIDTH+12
  5868 370F D0 04			bne @+
  5869 3711 A5 A1			lda :STACKORIGIN+11
  5870 3713 C5 A2			cmp :STACKORIGIN+12
  5871 				@
  5872 3715 D0 01			bne @+
  5873 3717 88				dey
  5874 				@
  5875 3718 98				tya
  5876 3719 05 A0			ora :STACKORIGIN+10
  5877 371B 25 9F			and :STACKORIGIN+9
  5878 371D F0 0F			jeq l_0C31
  5879
  5880 				; optimize OK (service.pas), line = 1097
  5881
  5882 371F AD 9D A0			lda BALL
  5883 3722 8D 96 A0			sta REMOVE_BALL.BALL
  5884 3725 AD 9E A0			lda BALL+1
  5885 3728 8D 97 A0			sta REMOVE_BALL.BALL+1
  5886 372B 20 D2 35			jsr REMOVE_BALL
  5887 372E			l_0C31
  5888
  5889 				; optimize OK (service.pas), line = 1099
  5890
  5891 372E AD 9D A0			lda BALL
  5892 3731 8D 8F A0			sta PLACE_BALL.BALL
  5893 3734 AD 9E A0			lda BALL+1
  5894 3737 8D 90 A0			sta PLACE_BALL.BALL+1
  5895 373A 20 0B 35			jsr PLACE_BALL
  5896
  5897 				; optimize OK (service.pas), line = 1101
  5898
  5899 373D AC 9D A0 84 84 AC + 	mwy BALL :bp2
  5900 3747 A0 00			ldy #BALL.X-DATAORIGIN
  5901 3749 B1 84			lda (:bp2),y
  5902 374B 85 9F			sta :STACKORIGIN+9
  5903 374D C8				iny
  5904 374E B1 84			lda (:bp2),y
  5905 3750 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5906 3752 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5907 3754 A5 9F			lda :STACKORIGIN+9
  5908 3756 91 84			sta (:bp2),y
  5909 3758 C8				iny
  5910 3759 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5911 375B 91 84			sta (:bp2),y
  5912
  5913 				; optimize OK (service.pas), line = 1102
  5914
  5915 375D A0 02			ldy #BALL.Y-DATAORIGIN
  5916 375F B1 84			lda (:bp2),y
  5917 3761 85 9F			sta :STACKORIGIN+9
  5918 3763 C8				iny
  5919 3764 B1 84			lda (:bp2),y
  5920 3766 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5921 3768 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5922 376A A5 9F			lda :STACKORIGIN+9
  5923 376C 91 84			sta (:bp2),y
  5924 376E C8				iny
  5925 376F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5926 3771 91 84			sta (:bp2),y
  5927
  5928 				; ------------------------------------------------------------
  5929
  5930 = A09D			BALL	= DATAORIGIN+$05B4
  5931 = 9AE9			BALL.X	= DATAORIGIN+$0000
  5932 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  5933 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  5934 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  5935 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  5936 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  5937 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  5938 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  5939 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  5940 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  5941 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  5942 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  5943 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  5944 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  5945 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  5946 = 9B03			BALL.STM	= DATAORIGIN+$001A
  5947
  5948 = A09D			@VarData	= BALL
  5949 = 0002			@VarDataSize	= 2
  5950
  5951 3773			@exit
  5952 					.ifdef @new
  5953 					lda <@VarData
  5954 					sta :ztmp
  5955 					lda >@VarData
  5956 					ldy #@VarDataSize-1
  5957 					jmp @FreeMem
  5958 					els
  5959 3773 60				rts						; ret
  5960 					eif
  5961 				.endl
  5962
  5963 3774			.local	SET_BALL_SPEED					; PROCEDURE
  5964
  5965 				; optimize OK (service.pas), line = 1112
  5966
  5967 3774 AC A1 A0 84 84 AC + 	mwy BALL :bp2
  5968 377E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5969 3780 B1 84			lda (:bp2),y
  5970 3782 8D A7 A0			sta SX
  5971 3785 C8				iny
  5972 3786 B1 84			lda (:bp2),y
  5973 3788 8D A8 A0			sta SX+1
  5974
  5975 				; optimize OK (service.pas), line = 1113
  5976
  5977 378B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5978 378D B1 84			lda (:bp2),y
  5979 378F 8D A9 A0			sta SY
  5980 3792 C8				iny
  5981 3793 B1 84			lda (:bp2),y
  5982 3795 8D AA A0			sta SY+1
  5983
  5984 				; optimize OK (service.pas), line = 1115
  5985
  5986 3798 A9 F4			lda #$F4
  5987 379A 8D A5 A0			sta SPEED
  5988 379D A9 01			lda #$01
  5989 379F 8D A6 A0			sta SPEED+1
  5990
  5991 				; optimize FAIL (1, service.pas), line = 1117
  5992
  5993 37A2 E8				inx
  5994 37A3 AD A5 A0 95 96		mva SPEED :STACKORIGIN,x
  5995 37A8 AD A6 A0 95 A6		mva SPEED+1 :STACKORIGIN+STACKWIDTH,x
  5996 37AD AD A7 A0			lda SX
  5997 37B0 85 8E			sta :ecx
  5998 37B2 85 92			sta :ztmp8
  5999 37B4 AD A8 A0			lda SX+1
  6000 37B7 85 8F			sta :ecx+1
  6001 37B9 85 93			sta :ztmp9
  6002 37BB AD A7 A0			lda SX
  6003 37BE 85 86			sta :eax
  6004 37C0 85 94			sta :ztmp10
  6005 37C2 AD A8 A0			lda SX+1
  6006 37C5 85 87			sta :eax+1
  6007 37C7 85 95			sta :ztmp11
  6008 					.ifdef fmulinit
  6009 					fmulu_16
  6010 					els
  6011 37C9 20 12 13			imulCX
  6012 					eif
  6013 37CC A5 95			lda :ztmp11
  6014 37CE 10 0D			bpl @+
  6015 37D0 A5 88			lda :eax+2
  6016 37D2 38 E5 92			sub :ztmp8
  6017 37D5 85 88			sta :eax+2
  6018 37D7 A5 89			lda :eax+3
  6019 37D9 E5 93			sbc :ztmp9
  6020 37DB 85 89			sta :eax+3
  6021 				@
  6022 37DD A5 93			lda :ztmp9
  6023 37DF 10 0D			bpl @+
  6024 37E1 A5 88			lda :eax+2
  6025 37E3 38 E5 94			sub :ztmp10
  6026 37E6 85 88			sta :eax+2
  6027 37E8 A5 89			lda :eax+3
  6028 37EA E5 95			sbc :ztmp11
  6029 37EC 85 89			sta :eax+3
  6030 				@
  6031 37EE A5 86			lda :eax
  6032 37F0 85 9F			sta :STACKORIGIN+9
  6033 37F2 A5 87			lda :eax+1
  6034 37F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6035 37F6 A5 88			lda :eax+2
  6036 37F8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6037 37FA A5 89			lda :eax+3
  6038 37FC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6039 37FE AD A9 A0			lda SY
  6040 3801 85 8E			sta :ecx
  6041 3803 85 92			sta :ztmp8
  6042 3805 AD AA A0			lda SY+1
  6043 3808 85 8F			sta :ecx+1
  6044 380A 85 93			sta :ztmp9
  6045 380C AD A9 A0			lda SY
  6046 380F 85 86			sta :eax
  6047 3811 85 94			sta :ztmp10
  6048 3813 AD AA A0			lda SY+1
  6049 3816 85 87			sta :eax+1
  6050 3818 85 95			sta :ztmp11
  6051 					.ifdef fmulinit
  6052 					fmulu_16
  6053 					els
  6054 381A 20 12 13			imulCX
  6055 					eif
  6056 381D A5 95			lda :ztmp11
  6057 381F 10 0D			bpl @+
  6058 3821 A5 88			lda :eax+2
  6059 3823 38 E5 92			sub :ztmp8
  6060 3826 85 88			sta :eax+2
  6061 3828 A5 89			lda :eax+3
  6062 382A E5 93			sbc :ztmp9
  6063 382C 85 89			sta :eax+3
  6064 				@
  6065 382E A5 93			lda :ztmp9
  6066 3830 10 0D			bpl @+
  6067 3832 A5 88			lda :eax+2
  6068 3834 38 E5 94			sub :ztmp10
  6069 3837 85 88			sta :eax+2
  6070 3839 A5 89			lda :eax+3
  6071 383B E5 95			sbc :ztmp11
  6072 383D 85 89			sta :eax+3
  6073 				@
  6074 383F A5 9F			lda :STACKORIGIN+9
  6075 3841 18 65 86			add :eax
  6076 3844 8D F4 9A			sta SYSTEM.SQRT.@010185000.X
  6077 3847 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6078 3849 65 87			adc :eax+1
  6079 384B 8D F5 9A			sta SYSTEM.SQRT.@010185000.X+1
  6080 384E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6081 3850 65 88			adc :eax+2
  6082 3852 8D F6 9A			sta SYSTEM.SQRT.@010185000.X+2
  6083 3855 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6084 3857 65 89			adc :eax+3
  6085 3859 8D F7 9A			sta SYSTEM.SQRT.@010185000.X+3
  6086 385C 20 6C 1B			jsr SYSTEM.SQRT.@010185000
  6087 385F E8				inx
  6088 3860 AD F8 9A 95 96		mva SYSTEM.SQRT.@010185000.RESULT :STACKORIGIN,x
  6089 3865 AD F9 9A 95 A6		mva SYSTEM.SQRT.@010185000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6090 386A AD FA 9A 95 B6		mva SYSTEM.SQRT.@010185000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6091 386F AD FB 9A 95 C6		mva SYSTEM.SQRT.@010185000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6092 3874 20 36 11			jsr @expandToCARD1.SMALL
  6093 3877 B5 95			lda :STACKORIGIN-1,x
  6094 3879 85 8E			sta :FPMAN0
  6095 387B B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6096 387D 85 8F			sta :FPMAN1
  6097 387F B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6098 3881 85 90			sta :FPMAN2
  6099 3883 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6100 3885 85 91			sta :FPMAN3
  6101 3887 20 E7 17			jsr @I2F
  6102 388A A5 8E			lda :FPMAN0
  6103 388C 95 95			sta :STACKORIGIN-1,x
  6104 388E A5 8F			lda :FPMAN1
  6105 3890 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6106 3892 A5 90			lda :FPMAN2
  6107 3894 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6108 3896 A5 91			lda :FPMAN3
  6109 3898 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6110 389A B5 96			lda :STACKORIGIN,x
  6111 389C 85 8A			sta :FP2MAN0
  6112 389E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6113 38A0 85 8B			sta :FP2MAN1
  6114 38A2 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6115 38A4 85 8C			sta :FP2MAN2
  6116 38A6 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6117 38A8 85 8D			sta :FP2MAN3
  6118 38AA B5 95			lda :STACKORIGIN-1,x
  6119 38AC 85 86			sta :FP1MAN0
  6120 38AE B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6121 38B0 85 87			sta :FP1MAN1
  6122 38B2 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6123 38B4 85 88			sta :FP1MAN2
  6124 38B6 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6125 38B8 85 89			sta :FP1MAN3
  6126 38BA 20 AE 16			jsr @FDIV
  6127 38BD CA				dex
  6128 38BE A5 8E			lda :FPMAN0
  6129 38C0 8D AB A0			sta VM
  6130 38C3 A5 8F			lda :FPMAN1
  6131 38C5 8D AC A0			sta VM+1
  6132 38C8 A5 90			lda :FPMAN2
  6133 38CA 8D AD A0			sta VM+2
  6134 38CD A5 91			lda :FPMAN3
  6135 38CF 8D AE A0			sta VM+3
  6136 38D2 CA				dex
  6137
  6138 				; optimize OK (service.pas), line = 1122
  6139
  6140 38D3 AD A7 A0			lda SX
  6141 38D6 85 8E			sta :FPMAN0
  6142 38D8 A0 00			ldy #$00
  6143 38DA AD A8 A0			lda SX+1
  6144 38DD 10 01			spl
  6145 38DF 88				dey
  6146 38E0 85 8F			sta :FPMAN1
  6147 38E2 84 90			sty :FPMAN2
  6148 38E4 84 91			sty :FPMAN3
  6149 38E6 20 E7 17			jsr @I2F
  6150 38E9 A5 8E			lda :FPMAN0
  6151 38EB 85 86			sta :FP1MAN0
  6152 38ED A5 8F			lda :FPMAN1
  6153 38EF 85 87			sta :FP1MAN1
  6154 38F1 A5 90			lda :FPMAN2
  6155 38F3 85 88			sta :FP1MAN2
  6156 38F5 A5 91			lda :FPMAN3
  6157 38F7 85 89			sta :FP1MAN3
  6158 38F9 AD AB A0			lda VM
  6159 38FC 85 8A			sta :FP2MAN0
  6160 38FE AD AC A0			lda VM+1
  6161 3901 85 8B			sta :FP2MAN1
  6162 3903 AD AD A0			lda VM+2
  6163 3906 85 8C			sta :FP2MAN2
  6164 3908 AD AE A0			lda VM+3
  6165 390B 85 8D			sta :FP2MAN3
  6166 390D 20 0D 16			jsr @FMUL
  6167 3910 A5 8E			lda :FPMAN0
  6168 3912 85 8A			sta :FP2MAN0
  6169 3914 A5 8F			lda :FPMAN1
  6170 3916 85 8B			sta :FP2MAN1
  6171 3918 A5 90			lda :FPMAN2
  6172 391A 85 8C			sta :FP2MAN2
  6173 391C A5 91			lda :FPMAN3
  6174 391E 85 8D			sta :FP2MAN3
  6175 3920 20 65 14			jsr @FROUND
  6176 3923 AC A1 A0 84 84 AC + 	mwy BALL :bp2
  6177 392D A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6178 392F A5 8E			lda :FPMAN0
  6179 3931 91 84			sta (:bp2),y
  6180 3933 C8				iny
  6181 3934 A5 8F			lda :FPMAN1
  6182 3936 91 84			sta (:bp2),y
  6183
  6184 				; optimize OK (service.pas), line = 1123
  6185
  6186 3938 AD A9 A0			lda SY
  6187 393B 85 8E			sta :FPMAN0
  6188 393D A0 00			ldy #$00
  6189 393F AD AA A0			lda SY+1
  6190 3942 10 01			spl
  6191 3944 88				dey
  6192 3945 85 8F			sta :FPMAN1
  6193 3947 84 90			sty :FPMAN2
  6194 3949 84 91			sty :FPMAN3
  6195 394B 20 E7 17			jsr @I2F
  6196 394E A5 8E			lda :FPMAN0
  6197 3950 85 86			sta :FP1MAN0
  6198 3952 A5 8F			lda :FPMAN1
  6199 3954 85 87			sta :FP1MAN1
  6200 3956 A5 90			lda :FPMAN2
  6201 3958 85 88			sta :FP1MAN2
  6202 395A A5 91			lda :FPMAN3
  6203 395C 85 89			sta :FP1MAN3
  6204 395E AD AB A0			lda VM
  6205 3961 85 8A			sta :FP2MAN0
  6206 3963 AD AC A0			lda VM+1
  6207 3966 85 8B			sta :FP2MAN1
  6208 3968 AD AD A0			lda VM+2
  6209 396B 85 8C			sta :FP2MAN2
  6210 396D AD AE A0			lda VM+3
  6211 3970 85 8D			sta :FP2MAN3
  6212 3972 20 0D 16			jsr @FMUL
  6213 3975 A5 8E			lda :FPMAN0
  6214 3977 85 8A			sta :FP2MAN0
  6215 3979 A5 8F			lda :FPMAN1
  6216 397B 85 8B			sta :FP2MAN1
  6217 397D A5 90			lda :FPMAN2
  6218 397F 85 8C			sta :FP2MAN2
  6219 3981 A5 91			lda :FPMAN3
  6220 3983 85 8D			sta :FP2MAN3
  6221 3985 20 65 14			jsr @FROUND
  6222 3988 AC A1 A0 84 84 AC + 	mwy BALL :bp2
  6223 3992 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6224 3994 A5 8E			lda :FPMAN0
  6225 3996 91 84			sta (:bp2),y
  6226 3998 C8				iny
  6227 3999 A5 8F			lda :FPMAN1
  6228 399B 91 84			sta (:bp2),y
  6229
  6230 				; ------------------------------------------------------------
  6231
  6232 = A0A1			BALL	= DATAORIGIN+$05B8
  6233 = 9AE9			BALL.X	= DATAORIGIN+$0000
  6234 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  6235 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  6236 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  6237 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  6238 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  6239 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  6240 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  6241 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  6242 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  6243 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  6244 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  6245 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  6246 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  6247 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  6248 = 9B03			BALL.STM	= DATAORIGIN+$001A
  6249 = A0A5			SPEED	= DATAORIGIN+$05BC
  6250 = A0A7			SX	= DATAORIGIN+$05BE
  6251 = A0A9			SY	= DATAORIGIN+$05C0
  6252 = A0AB			VM	= DATAORIGIN+$05C2
  6253
  6254 = A0A1			@VarData	= BALL
  6255 = 000C			@VarDataSize	= 12
  6256
  6257 399D			@exit
  6258 					.ifdef @new
  6259 					lda <@VarData
  6260 					sta :ztmp
  6261 					lda >@VarData
  6262 					ldy #@VarDataSize-1
  6263 					jmp @FreeMem
  6264 					els
  6265 399D 60				rts						; ret
  6266 					eif
  6267 				.endl
  6268
  6269 399E			.local	SET_BALL_DIRECTION				; PROCEDURE
  6270
  6271 				; optimize OK (service.pas), line = 1130
  6272
  6273 399E AD B3 A0			lda ANGLE
  6274 39A1 85 8E			sta :FPMAN0
  6275 39A3 A0 00			ldy #$00
  6276 39A5 AD B4 A0			lda ANGLE+1
  6277 39A8 10 01			spl
  6278 39AA 88				dey
  6279 39AB 85 8F			sta :FPMAN1
  6280 39AD 84 90			sty :FPMAN2
  6281 39AF 84 91			sty :FPMAN3
  6282 39B1 20 E7 17			jsr @I2F
  6283 39B4 A5 8E			lda :FPMAN0
  6284 39B6 85 86			sta :FP1MAN0
  6285 39B8 A5 8F			lda :FPMAN1
  6286 39BA 85 87			sta :FP1MAN1
  6287 39BC A5 90			lda :FPMAN2
  6288 39BE 85 88			sta :FP1MAN2
  6289 39C0 A5 91			lda :FPMAN3
  6290 39C2 85 89			sta :FP1MAN3
  6291 39C4 A9 C3			lda #$C3
  6292 39C6 85 8A			sta :FP2MAN0
  6293 39C8 A9 F5			lda #$F5
  6294 39CA 85 8B			sta :FP2MAN1
  6295 39CC A9 48			lda #$48
  6296 39CE 85 8C			sta :FP2MAN2
  6297 39D0 A9 40			lda #$40
  6298 39D2 85 8D			sta :FP2MAN3
  6299 39D4 20 0D 16			jsr @FMUL
  6300 39D7 A5 8E			lda :FPMAN0
  6301 39D9 85 86			sta :FP1MAN0
  6302 39DB A5 8F			lda :FPMAN1
  6303 39DD 85 87			sta :FP1MAN1
  6304 39DF A5 90			lda :FPMAN2
  6305 39E1 85 88			sta :FP1MAN2
  6306 39E3 A5 91			lda :FPMAN3
  6307 39E5 85 89			sta :FP1MAN3
  6308 39E7 A9 00			lda #$00
  6309 39E9 85 8A			sta :FP2MAN0
  6310 39EB 85 8B			sta :FP2MAN1
  6311 39ED A9 34			lda #$34
  6312 39EF 85 8C			sta :FP2MAN2
  6313 39F1 A9 43			lda #$43
  6314 39F3 85 8D			sta :FP2MAN3
  6315 39F5 20 AE 16			jsr @FDIV
  6316 39F8 A5 8E			lda :FPMAN0
  6317 39FA 8D B5 A0			sta W
  6318 39FD A5 8F			lda :FPMAN1
  6319 39FF 8D B6 A0			sta W+1
  6320 3A02 A5 90			lda :FPMAN2
  6321 3A04 8D B7 A0			sta W+2
  6322 3A07 A5 91			lda :FPMAN3
  6323 3A09 8D B8 A0			sta W+3
  6324
  6325 				; optimize FAIL (1, service.pas), line = 1132
  6326
  6327 3A0C E8				inx
  6328 3A0D A9 00 95 96			mva #$00 :STACKORIGIN,x
  6329 3A11 A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6330 3A15 AD B5 A0			lda W
  6331 3A18 8D 25 9B			sta SYSTEM.COS.@01018F000.X
  6332 3A1B AD B6 A0			lda W+1
  6333 3A1E 8D 26 9B			sta SYSTEM.COS.@01018F000.X+1
  6334 3A21 AD B7 A0			lda W+2
  6335 3A24 8D 27 9B			sta SYSTEM.COS.@01018F000.X+2
  6336 3A27 AD B8 A0			lda W+3
  6337 3A2A 8D 28 9B			sta SYSTEM.COS.@01018F000.X+3
  6338 3A2D 20 B5 25			jsr SYSTEM.COS.@01018F000
  6339 3A30 E8				inx
  6340 3A31 AD 29 9B 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  6341 3A36 AD 2A 9B 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6342 3A3B AD 2B 9B 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6343 3A40 AD 2C 9B 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6344 3A45 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6345 3A49 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6346 3A4B B5 95			lda :STACKORIGIN-1,x
  6347 3A4D 85 8E			sta :FPMAN0
  6348 3A4F B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6349 3A51 85 8F			sta :FPMAN1
  6350 3A53 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6351 3A55 85 90			sta :FPMAN2
  6352 3A57 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6353 3A59 85 91			sta :FPMAN3
  6354 3A5B 20 E7 17			jsr @I2F
  6355 3A5E A5 8E			lda :FPMAN0
  6356 3A60 95 95			sta :STACKORIGIN-1,x
  6357 3A62 A5 8F			lda :FPMAN1
  6358 3A64 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6359 3A66 A5 90			lda :FPMAN2
  6360 3A68 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6361 3A6A A5 91			lda :FPMAN3
  6362 3A6C 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6363 3A6E B5 96			lda :STACKORIGIN,x
  6364 3A70 85 8A			sta :FP2MAN0
  6365 3A72 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6366 3A74 85 8B			sta :FP2MAN1
  6367 3A76 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6368 3A78 85 8C			sta :FP2MAN2
  6369 3A7A B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6370 3A7C 85 8D			sta :FP2MAN3
  6371 3A7E B5 95			lda :STACKORIGIN-1,x
  6372 3A80 85 86			sta :FP1MAN0
  6373 3A82 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6374 3A84 85 87			sta :FP1MAN1
  6375 3A86 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6376 3A88 85 88			sta :FP1MAN2
  6377 3A8A B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6378 3A8C 85 89			sta :FP1MAN3
  6379 3A8E 20 0D 16			jsr @FMUL
  6380 3A91 CA				dex
  6381 3A92 A5 8E			lda :FPMAN0
  6382 3A94 85 8A			sta :FP2MAN0
  6383 3A96 A5 8F			lda :FPMAN1
  6384 3A98 85 8B			sta :FP2MAN1
  6385 3A9A A5 90			lda :FPMAN2
  6386 3A9C 85 8C			sta :FP2MAN2
  6387 3A9E A5 91			lda :FPMAN3
  6388 3AA0 85 8D			sta :FP2MAN3
  6389 3AA2 20 65 14			jsr @FROUND
  6390 3AA5 A5 8E			lda :FPMAN0
  6391 3AA7 95 96			sta :STACKORIGIN,x
  6392 3AA9 A5 8F			lda :FPMAN1
  6393 3AAB 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6394 3AAD A5 90			lda :FPMAN2
  6395 3AAF 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6396 3AB1 A5 91			lda :FPMAN3
  6397 3AB3 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6398 3AB5 AC AF A0 84 84 AC + 	mwy BALL :bp2
  6399 3ABF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6400 3AC1 B5 96			lda :STACKORIGIN,x
  6401 3AC3 91 84			sta (:bp2),y
  6402 3AC5 C8				iny
  6403 3AC6 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6404 3AC8 91 84			sta (:bp2),y
  6405
  6406 				; optimize FAIL (1, service.pas), line = 1133
  6407
  6408 3ACA A9 00 95 96			mva #$00 :STACKORIGIN,x
  6409 3ACE A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6410 3AD2 AD B5 A0			lda W
  6411 3AD5 8D 1D 9B			sta SYSTEM.SIN.@01018F000.X
  6412 3AD8 AD B6 A0			lda W+1
  6413 3ADB 8D 1E 9B			sta SYSTEM.SIN.@01018F000.X+1
  6414 3ADE AD B7 A0			lda W+2
  6415 3AE1 8D 1F 9B			sta SYSTEM.SIN.@01018F000.X+2
  6416 3AE4 AD B8 A0			lda W+3
  6417 3AE7 8D 20 9B			sta SYSTEM.SIN.@01018F000.X+3
  6418 3AEA 20 7C 25			jsr SYSTEM.SIN.@01018F000
  6419 3AED E8				inx
  6420 3AEE AD 21 9B 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  6421 3AF3 AD 22 9B 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6422 3AF8 AD 23 9B 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6423 3AFD AD 24 9B 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6424 3B02 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6425 3B06 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6426 3B08 B5 95			lda :STACKORIGIN-1,x
  6427 3B0A 85 8E			sta :FPMAN0
  6428 3B0C B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6429 3B0E 85 8F			sta :FPMAN1
  6430 3B10 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6431 3B12 85 90			sta :FPMAN2
  6432 3B14 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6433 3B16 85 91			sta :FPMAN3
  6434 3B18 20 E7 17			jsr @I2F
  6435 3B1B A5 8E			lda :FPMAN0
  6436 3B1D 95 95			sta :STACKORIGIN-1,x
  6437 3B1F A5 8F			lda :FPMAN1
  6438 3B21 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6439 3B23 A5 90			lda :FPMAN2
  6440 3B25 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6441 3B27 A5 91			lda :FPMAN3
  6442 3B29 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6443 3B2B B5 96			lda :STACKORIGIN,x
  6444 3B2D 85 8A			sta :FP2MAN0
  6445 3B2F B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6446 3B31 85 8B			sta :FP2MAN1
  6447 3B33 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6448 3B35 85 8C			sta :FP2MAN2
  6449 3B37 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6450 3B39 85 8D			sta :FP2MAN3
  6451 3B3B B5 95			lda :STACKORIGIN-1,x
  6452 3B3D 85 86			sta :FP1MAN0
  6453 3B3F B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6454 3B41 85 87			sta :FP1MAN1
  6455 3B43 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6456 3B45 85 88			sta :FP1MAN2
  6457 3B47 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6458 3B49 85 89			sta :FP1MAN3
  6459 3B4B 20 0D 16			jsr @FMUL
  6460 3B4E CA				dex
  6461 3B4F A5 8E			lda :FPMAN0
  6462 3B51 85 8A			sta :FP2MAN0
  6463 3B53 A5 8F			lda :FPMAN1
  6464 3B55 85 8B			sta :FP2MAN1
  6465 3B57 A5 90			lda :FPMAN2
  6466 3B59 85 8C			sta :FP2MAN2
  6467 3B5B A5 91			lda :FPMAN3
  6468 3B5D 85 8D			sta :FP2MAN3
  6469 3B5F 20 65 14			jsr @FROUND
  6470 3B62 A5 8E			lda :FPMAN0
  6471 3B64 95 96			sta :STACKORIGIN,x
  6472 3B66 A5 8F			lda :FPMAN1
  6473 3B68 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6474 3B6A A5 90			lda :FPMAN2
  6475 3B6C 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6476 3B6E A5 91			lda :FPMAN3
  6477 3B70 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6478 3B72 A9 00			lda #$00
  6479 3B74 38 F5 96			sub :STACKORIGIN,x
  6480 3B77 95 96			sta :STACKORIGIN,x
  6481 3B79 A9 00			lda #$00
  6482 3B7B F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6483 3B7D 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6484 3B7F A9 00			lda #$00
  6485 3B81 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6486 3B83 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6487 3B85 A9 00			lda #$00
  6488 3B87 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6489 3B89 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6490 3B8B AC AF A0 84 84 AC + 	mwy BALL :bp2
  6491 3B95 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6492 3B97 B5 96			lda :STACKORIGIN,x
  6493 3B99 91 84			sta (:bp2),y
  6494 3B9B C8				iny
  6495 3B9C B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6496 3B9E 91 84			sta (:bp2),y
  6497 3BA0 CA				dex
  6498
  6499 				; ------------------------------------------------------------
  6500
  6501 = A0AF			BALL	= DATAORIGIN+$05C6
  6502 = 9AE9			BALL.X	= DATAORIGIN+$0000
  6503 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  6504 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  6505 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  6506 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  6507 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  6508 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  6509 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  6510 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  6511 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  6512 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  6513 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  6514 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  6515 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  6516 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  6517 = 9B03			BALL.STM	= DATAORIGIN+$001A
  6518 = A0B3			ANGLE	= DATAORIGIN+$05CA
  6519 = A0B5			W	= DATAORIGIN+$05CC
  6520
  6521 = A0AF			@VarData	= BALL
  6522 = 0008			@VarDataSize	= 8
  6523
  6524 3BA1			@exit
  6525 					.ifdef @new
  6526 					lda <@VarData
  6527 					sta :ztmp
  6528 					lda >@VarData
  6529 					ldy #@VarDataSize-1
  6530 					jmp @FreeMem
  6531 					els
  6532 3BA1 60				rts						; ret
  6533 					eif
  6534 				.endl
  6535
  6536 3BA2			.local	GET_BALL_DIRECTION				; FUNCTION
  6537
  6538 				; optimize OK (service.pas), line = 1142
  6539
  6540 3BA2 AC B9 A0 84 84 AC + 	mwy BALL :bp2
  6541 3BAC A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6542 3BAE B1 84			lda (:bp2),y
  6543 3BB0 88				dey
  6544 3BB1 11 84			ora (:bp2),y
  6545 3BB3 D0 75			jne l_0CBD
  6546 3BB5 E8				inx
  6547 3BB6 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6548 3BBA E8				inx
  6549 3BBB AC B9 A0 84 84 AC + 	mwy BALL :bp2
  6550 3BC5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6551 3BC7 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6552 3BCB C8				iny
  6553 3BCC B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6554 3BD0 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6555 3BD2 B1 84			lda (:bp2),y
  6556 3BD4 85 8A			sta SYSTEM.ABS.@010184000.X
  6557 3BD6 C8				iny
  6558 3BD7 B1 84			lda (:bp2),y
  6559 3BD9 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6560 3BDB 20 3E 1B			jsr SYSTEM.ABS.@010184000
  6561 3BDE E8				inx
  6562 3BDF A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6563 3BE1 85 8E			sta @SMALLINT.DIV.B
  6564 3BE3 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6565 3BE5 85 8F			sta @SMALLINT.DIV.B+1
  6566 3BE7 B5 95			lda :STACKORIGIN-1,x
  6567 3BE9 85 86			sta @SMALLINT.DIV.A
  6568 3BEB B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6569 3BED 85 87			sta @SMALLINT.DIV.A+1
  6570 3BEF 20 3A 12			jsr @SMALLINT.DIV
  6571 3BF2 A5 86			lda :eax
  6572 3BF4 95 95			sta :STACKORIGIN-1,x
  6573 3BF6 A5 87			lda :eax+1
  6574 3BF8 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6575 3BFA CA				dex
  6576 3BFB A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6577 3BFF 20 12 12			jsr mulSMALLINT
  6578 3C02 CA				dex
  6579 3C03 A9 00			lda #$00
  6580 3C05 38 F5 96			sub :STACKORIGIN,x
  6581 3C08 95 96			sta :STACKORIGIN,x
  6582 3C0A A9 00			lda #$00
  6583 3C0C F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6584 3C0E 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6585 3C10 A9 00			lda #$00
  6586 3C12 F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6587 3C14 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6588 3C16 A9 00			lda #$00
  6589 3C18 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6590 3C1A 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6591 3C1C B5 96			lda :STACKORIGIN,x
  6592 3C1E 8D BF A0			sta W
  6593 3C21 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6594 3C23 8D C0 A0			sta W+1
  6595 3C26 CA				dex
  6596 3C27 4C BA 3D			jmp l_0CD9
  6597 3C2A			l_0CBD
  6598
  6599 				; optimize OK (service.pas), line = 1148
  6600
  6601 3C2A AC B9 A0 84 84 AC + 	mwy BALL :bp2
  6602 3C34 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6603 3C36 A9 00			lda #$00
  6604 3C38 38 F1 84			sub (:bp2),y
  6605 3C3B 8D BF A0			sta W
  6606 3C3E C8				iny
  6607 3C3F A9 00			lda #$00
  6608 3C41 F1 84			sbc (:bp2),y
  6609 3C43 8D C0 A0			sta W+1
  6610
  6611 				; optimize OK (service.pas), line = 1150
  6612
  6613 3C46 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6614 3C48 B1 84			lda (:bp2),y
  6615 3C4A 85 8E			sta :FPMAN0
  6616 3C4C C8				iny
  6617 3C4D B1 84			lda (:bp2),y
  6618 3C4F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6619 3C51 A0 00			ldy #$00
  6620 3C53 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6621 3C55 10 01			spl
  6622 3C57 88				dey
  6623 3C58 85 8F			sta :FPMAN1
  6624 3C5A 84 90			sty :FPMAN2
  6625 3C5C 84 91			sty :FPMAN3
  6626 3C5E 20 E7 17			jsr @I2F
  6627 3C61 A5 8E			lda :FPMAN0
  6628 3C63 85 A0			sta :STACKORIGIN+10
  6629 3C65 A5 8F			lda :FPMAN1
  6630 3C67 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6631 3C69 A5 90			lda :FPMAN2
  6632 3C6B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6633 3C6D A5 91			lda :FPMAN3
  6634 3C6F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6635 3C71 AD BF A0			lda W
  6636 3C74 85 8E			sta :FPMAN0
  6637 3C76 A0 00			ldy #$00
  6638 3C78 AD C0 A0			lda W+1
  6639 3C7B 10 01			spl
  6640 3C7D 88				dey
  6641 3C7E 85 8F			sta :FPMAN1
  6642 3C80 84 90			sty :FPMAN2
  6643 3C82 84 91			sty :FPMAN3
  6644 3C84 20 E7 17			jsr @I2F
  6645 3C87 A5 8E			lda :FPMAN0
  6646 3C89 85 86			sta :FP1MAN0
  6647 3C8B A5 8F			lda :FPMAN1
  6648 3C8D 85 87			sta :FP1MAN1
  6649 3C8F A5 90			lda :FPMAN2
  6650 3C91 85 88			sta :FP1MAN2
  6651 3C93 A5 91			lda :FPMAN3
  6652 3C95 85 89			sta :FP1MAN3
  6653 3C97 A5 A0			lda :STACKORIGIN+10
  6654 3C99 85 8A			sta :FP2MAN0
  6655 3C9B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6656 3C9D 85 8B			sta :FP2MAN1
  6657 3C9F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6658 3CA1 85 8C			sta :FP2MAN2
  6659 3CA3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6660 3CA5 85 8D			sta :FP2MAN3
  6661 3CA7 20 AE 16			jsr @FDIV
  6662 3CAA A5 8E			lda :FPMAN0
  6663 3CAC 8D C1 A0			sta A
  6664 3CAF A5 8F			lda :FPMAN1
  6665 3CB1 8D C2 A0			sta A+1
  6666 3CB4 A5 90			lda :FPMAN2
  6667 3CB6 8D C3 A0			sta A+2
  6668 3CB9 A5 91			lda :FPMAN3
  6669 3CBB 8D C4 A0			sta A+3
  6670
  6671 				; optimize OK (service.pas), line = 1152
  6672
  6673 3CBE AD C1 A0			lda A
  6674 3CC1 8D 02 9B			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6675 3CC4 AD C2 A0			lda A+1
  6676 3CC7 8D 03 9B			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6677 3CCA AD C3 A0			lda A+2
  6678 3CCD 8D 04 9B			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6679 3CD0 AD C4 A0			lda A+3
  6680 3CD3 8D 05 9B			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6681 3CD6 20 01 1E			jsr SYSTEM.ARCTAN.@01018F000
  6682 3CD9 E8				inx
  6683 3CDA E8				inx
  6684 3CDB A9 00			lda #$00
  6685 3CDD 85 8A			sta :FP2MAN0
  6686 3CDF A9 00			lda #$00
  6687 3CE1 85 8B			sta :FP2MAN1
  6688 3CE3 A9 34			lda #$34
  6689 3CE5 85 8C			sta :FP2MAN2
  6690 3CE7 A9 43			lda #$43
  6691 3CE9 85 8D			sta :FP2MAN3
  6692 3CEB AD 06 9B			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6693 3CEE 85 86			sta :FP1MAN0
  6694 3CF0 AD 07 9B			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6695 3CF3 85 87			sta :FP1MAN1
  6696 3CF5 AD 08 9B			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6697 3CF8 85 88			sta :FP1MAN2
  6698 3CFA AD 09 9B			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6699 3CFD 85 89			sta :FP1MAN3
  6700 3CFF 20 0D 16			jsr @FMUL
  6701 3D02 A5 8E			lda :FPMAN0
  6702 3D04 95 95			sta :STACKORIGIN-1,x
  6703 3D06 A5 8F			lda :FPMAN1
  6704 3D08 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6705 3D0A A5 90			lda :FPMAN2
  6706 3D0C 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6707 3D0E A5 91			lda :FPMAN3
  6708 3D10 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6709 3D12 A9 C3			lda #$C3
  6710 3D14 85 8A			sta :FP2MAN0
  6711 3D16 A9 F5			lda #$F5
  6712 3D18 85 8B			sta :FP2MAN1
  6713 3D1A A9 48			lda #$48
  6714 3D1C 85 8C			sta :FP2MAN2
  6715 3D1E A9 40			lda #$40
  6716 3D20 85 8D			sta :FP2MAN3
  6717 3D22 B5 95			lda :STACKORIGIN-1,x
  6718 3D24 85 86			sta :FP1MAN0
  6719 3D26 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6720 3D28 85 87			sta :FP1MAN1
  6721 3D2A B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6722 3D2C 85 88			sta :FP1MAN2
  6723 3D2E B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6724 3D30 85 89			sta :FP1MAN3
  6725 3D32 20 AE 16			jsr @FDIV
  6726 3D35 CA				dex
  6727 3D36 A5 8E			lda :FPMAN0
  6728 3D38 8D C1 A0			sta A
  6729 3D3B A5 8F			lda :FPMAN1
  6730 3D3D 8D C2 A0			sta A+1
  6731 3D40 A5 90			lda :FPMAN2
  6732 3D42 8D C3 A0			sta A+2
  6733 3D45 A5 91			lda :FPMAN3
  6734 3D47 8D C4 A0			sta A+3
  6735 3D4A CA				dex
  6736
  6737 				; optimize OK (service.pas), line = 1154
  6738
  6739 3D4B AD C1 A0			lda A
  6740 3D4E 85 8A			sta :FP2MAN0
  6741 3D50 AD C2 A0			lda A+1
  6742 3D53 85 8B			sta :FP2MAN1
  6743 3D55 AD C3 A0			lda A+2
  6744 3D58 85 8C			sta :FP2MAN2
  6745 3D5A AD C4 A0			lda A+3
  6746 3D5D 85 8D			sta :FP2MAN3
  6747 3D5F 20 65 14			jsr @FROUND
  6748 3D62 A5 8E			lda :FPMAN0
  6749 3D64 8D BF A0			sta W
  6750 3D67 A5 8F			lda :FPMAN1
  6751 3D69 8D C0 A0			sta W+1
  6752
  6753 				; optimize OK (service.pas), line = 1157
  6754
  6755 3D6C AC B9 A0 84 84 AC + 	mwy BALL :bp2
  6756 3D76 A0 00			ldy #$00
  6757 3D78 B1 84			lda (:bp2),y
  6758 3D7A 10 0E			jpl l_0D0D
  6759 3D7C AD BF A0			lda W
  6760 3D7F 18 69 B4			add #$B4
  6761 3D82 8D BF A0			sta W
  6762 3D85 90 03			scc
  6763 3D87 EE C0 A0			inc W+1
  6764 3D8A			l_0D0D
  6765
  6766 				; optimize OK (service.pas), line = 1159
  6767
  6768 3D8A AD BF A0			lda W
  6769 3D8D 18 69 68			add #$68
  6770 3D90 8D BF A0			sta W
  6771 3D93 AD C0 A0			lda W+1
  6772 3D96 69 01			adc #$01
  6773 3D98 8D C0 A0			sta W+1
  6774
  6775 				; optimize OK (service.pas), line = 1160
  6776
  6777 3D9B A9 68			lda #$68
  6778 3D9D 85 8E			sta @SMALLINT.MOD.B
  6779 3D9F A9 01			lda #$01
  6780 3DA1 85 8F			sta @SMALLINT.MOD.B+1
  6781 3DA3 AD BF A0			lda W
  6782 3DA6 85 86			sta @SMALLINT.MOD.A
  6783 3DA8 AD C0 A0			lda W+1
  6784 3DAB 85 87			sta @SMALLINT.MOD.A+1
  6785 3DAD 20 57 12			jsr @SMALLINT.MOD
  6786 3DB0 A5 92			lda @SMALLINT.MOD.RESULT
  6787 3DB2 8D BF A0			sta W
  6788 3DB5 A5 93			lda @SMALLINT.MOD.RESULT+1
  6789 3DB7 8D C0 A0			sta W+1
  6790 3DBA			l_0CD9
  6791
  6792 				; optimize OK (service.pas), line = 1163
  6793
  6794 3DBA AD BF A0			lda W
  6795 3DBD 8D BD A0			sta RESULT
  6796 3DC0 AD C0 A0			lda W+1
  6797 3DC3 8D BE A0			sta RESULT+1
  6798 3DC6			@exit
  6799
  6800 				; ------------------------------------------------------------
  6801
  6802 = A0B9			BALL	= DATAORIGIN+$05D0
  6803 = 9AE9			BALL.X	= DATAORIGIN+$0000
  6804 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  6805 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  6806 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  6807 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  6808 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  6809 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  6810 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  6811 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  6812 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  6813 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  6814 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  6815 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  6816 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  6817 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  6818 = 9B03			BALL.STM	= DATAORIGIN+$001A
  6819 = A0BD			RESULT	= DATAORIGIN+$05D4
  6820 = A0BF			W	= DATAORIGIN+$05D6
  6821 = A0C1			A	= DATAORIGIN+$05D8
  6822
  6823 = A0B9			@VarData	= BALL
  6824 = 0008			@VarDataSize	= 8
  6825
  6826 3DC6 60				rts						; ret
  6827 				.endl
  6828
  6829 3DC7			.local	START_BALL					; PROCEDURE
  6830
  6831 				; optimize OK (service.pas), line = 1172
  6832
  6833 3DC7 AC C5 A0 84 84 AC + 	mwy BALL :bp2
  6834 3DD1 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6835 3DD3 A0 00			ldy #BALL.X-DATAORIGIN
  6836 3DD5 AD 71 9C			lda VAUS.X
  6837 3DD8 18 71 84			add (:bp2),y
  6838 3DDB 91 84			sta (:bp2),y
  6839 3DDD C8				iny
  6840 3DDE A9 00			lda #$00
  6841 3DE0 69 00			adc #$00
  6842 3DE2 91 84			sta (:bp2),y
  6843
  6844 				; optimize OK (service.pas), line = 1178
  6845
  6846 3DE4 A0 02			ldy #BALL.Y-DATAORIGIN
  6847 3DE6 AD 72 9C			lda VAUS.Y
  6848 3DE9 38 E9 03			sub #$03
  6849 3DEC 91 84			sta (:bp2),y
  6850 3DEE C8				iny
  6851 3DEF A9 00			lda #$00
  6852 3DF1 E9 00			sbc #$00
  6853 3DF3 91 84			sta (:bp2),y
  6854
  6855 				; optimize OK (service.pas), line = 1183
  6856
  6857 3DF5 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6858 3DF7 A9 00			lda #$00
  6859 3DF9 91 84			sta (:bp2),y
  6860 3DFB C8				iny
  6861 3DFC 91 84			sta (:bp2),y
  6862
  6863 				; optimize OK (service.pas), line = 1184
  6864
  6865 3DFE A0 06			ldy #BALL.FINEY-DATAORIGIN
  6866 3E00 91 84			sta (:bp2),y
  6867 3E02 C8				iny
  6868 3E03 91 84			sta (:bp2),y
  6869
  6870 				; optimize OK (service.pas), line = 1186
  6871
  6872 3E05 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6873 3E07 A9 01			lda #$01
  6874 3E09 91 84			sta (:bp2),y
  6875
  6876 				; optimize OK (service.pas), line = 1188
  6877
  6878 3E0B A0 14			ldy #BALL.SBD-DATAORIGIN
  6879 3E0D A9 00			lda #$00
  6880 3E0F 91 84			sta (:bp2),y
  6881 3E11 C8				iny
  6882 3E12 91 84			sta (:bp2),y
  6883
  6884 				; optimize OK (service.pas), line = 1189
  6885
  6886 3E14 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6887 3E16 91 84			sta (:bp2),y
  6888
  6889 				; ------------------------------------------------------------
  6890
  6891 = A0C5			BALL	= DATAORIGIN+$05DC
  6892 = 9AE9			BALL.X	= DATAORIGIN+$0000
  6893 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  6894 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  6895 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  6896 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  6897 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  6898 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  6899 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  6900 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  6901 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  6902 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  6903 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  6904 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  6905 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  6906 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  6907 = 9B03			BALL.STM	= DATAORIGIN+$001A
  6908
  6909 = A0C5			@VarData	= BALL
  6910 = 0002			@VarDataSize	= 2
  6911
  6912 3E18			@exit
  6913 					.ifdef @new
  6914 					lda <@VarData
  6915 					sta :ztmp
  6916 					lda >@VarData
  6917 					ldy #@VarDataSize-1
  6918 					jmp @FreeMem
  6919 					els
  6920 3E18 60				rts						; ret
  6921 					eif
  6922 				.endl
  6923
  6924 3E19			.local	BALL_SPEED					; FUNCTION
  6925
  6926 				; ------------------------------------------------------------
  6927
  6928 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6929 				; as Pointer
  6930 3E19 B5 96			lda :STACKORIGIN,x
  6931 3E1B 85 84			sta :bp2
  6932 3E1D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6933 3E1F 85 85			sta :bp2+1
  6934 3E21 A0 1A			ldy #$1A
  6935 3E23 B1 84 99 C9 A0 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6936 3E2B CA				dex
  6937 3E2C			@main
  6938
  6939 				; optimize OK (service.pas), line = 1198
  6940
  6941 3E2C AD D9 A0			lda BALL.SPEEDX
  6942 3E2F 85 8E			sta :ecx
  6943 3E31 85 92			sta :ztmp8
  6944 3E33 AD DA A0			lda BALL.SPEEDX+1
  6945 3E36 85 8F			sta :ecx+1
  6946 3E38 85 93			sta :ztmp9
  6947 3E3A AD D9 A0			lda BALL.SPEEDX
  6948 3E3D 85 86			sta :eax
  6949 3E3F 85 94			sta :ztmp10
  6950 3E41 AD DA A0			lda BALL.SPEEDX+1
  6951 3E44 85 87			sta :eax+1
  6952 3E46 85 95			sta :ztmp11
  6953 					.ifdef fmulinit
  6954 					fmulu_16
  6955 					els
  6956 3E48 20 12 13			imulCX
  6957 					eif
  6958 3E4B A5 95			lda :ztmp11
  6959 3E4D 10 0D			bpl @+
  6960 3E4F A5 88			lda :eax+2
  6961 3E51 38 E5 92			sub :ztmp8
  6962 3E54 85 88			sta :eax+2
  6963 3E56 A5 89			lda :eax+3
  6964 3E58 E5 93			sbc :ztmp9
  6965 3E5A 85 89			sta :eax+3
  6966 				@
  6967 3E5C A5 93			lda :ztmp9
  6968 3E5E 10 0D			bpl @+
  6969 3E60 A5 88			lda :eax+2
  6970 3E62 38 E5 94			sub :ztmp10
  6971 3E65 85 88			sta :eax+2
  6972 3E67 A5 89			lda :eax+3
  6973 3E69 E5 95			sbc :ztmp11
  6974 3E6B 85 89			sta :eax+3
  6975 				@
  6976 3E6D A5 86			lda :eax
  6977 3E6F 85 9F			sta :STACKORIGIN+9
  6978 3E71 A5 87			lda :eax+1
  6979 3E73 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6980 3E75 A5 88			lda :eax+2
  6981 3E77 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6982 3E79 A5 89			lda :eax+3
  6983 3E7B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6984 3E7D AD DB A0			lda BALL.SPEEDY
  6985 3E80 85 8E			sta :ecx
  6986 3E82 85 92			sta :ztmp8
  6987 3E84 AD DC A0			lda BALL.SPEEDY+1
  6988 3E87 85 8F			sta :ecx+1
  6989 3E89 85 93			sta :ztmp9
  6990 3E8B AD DB A0			lda BALL.SPEEDY
  6991 3E8E 85 86			sta :eax
  6992 3E90 85 94			sta :ztmp10
  6993 3E92 AD DC A0			lda BALL.SPEEDY+1
  6994 3E95 85 87			sta :eax+1
  6995 3E97 85 95			sta :ztmp11
  6996 					.ifdef fmulinit
  6997 					fmulu_16
  6998 					els
  6999 3E99 20 12 13			imulCX
  7000 					eif
  7001 3E9C A5 95			lda :ztmp11
  7002 3E9E 10 0D			bpl @+
  7003 3EA0 A5 88			lda :eax+2
  7004 3EA2 38 E5 92			sub :ztmp8
  7005 3EA5 85 88			sta :eax+2
  7006 3EA7 A5 89			lda :eax+3
  7007 3EA9 E5 93			sbc :ztmp9
  7008 3EAB 85 89			sta :eax+3
  7009 				@
  7010 3EAD A5 93			lda :ztmp9
  7011 3EAF 10 0D			bpl @+
  7012 3EB1 A5 88			lda :eax+2
  7013 3EB3 38 E5 94			sub :ztmp10
  7014 3EB6 85 88			sta :eax+2
  7015 3EB8 A5 89			lda :eax+3
  7016 3EBA E5 95			sbc :ztmp11
  7017 3EBC 85 89			sta :eax+3
  7018 				@
  7019 3EBE A5 9F			lda :STACKORIGIN+9
  7020 3EC0 18 65 86			add :eax
  7021 3EC3 8D F4 9A			sta SYSTEM.SQRT.@010185000.X
  7022 3EC6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7023 3EC8 65 87			adc :eax+1
  7024 3ECA 8D F5 9A			sta SYSTEM.SQRT.@010185000.X+1
  7025 3ECD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7026 3ECF 65 88			adc :eax+2
  7027 3ED1 8D F6 9A			sta SYSTEM.SQRT.@010185000.X+2
  7028 3ED4 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7029 3ED6 65 89			adc :eax+3
  7030 3ED8 8D F7 9A			sta SYSTEM.SQRT.@010185000.X+3
  7031 3EDB 20 6C 1B			jsr SYSTEM.SQRT.@010185000
  7032 3EDE E8				inx
  7033 3EDF AD F8 9A			lda SYSTEM.SQRT.@010185000.RESULT
  7034 3EE2 85 8A			sta :FP2MAN0
  7035 3EE4 AD F9 9A			lda SYSTEM.SQRT.@010185000.RESULT+1
  7036 3EE7 85 8B			sta :FP2MAN1
  7037 3EE9 AD FA 9A			lda SYSTEM.SQRT.@010185000.RESULT+2
  7038 3EEC 85 8C			sta :FP2MAN2
  7039 3EEE AD FB 9A			lda SYSTEM.SQRT.@010185000.RESULT+3
  7040 3EF1 85 8D			sta :FP2MAN3
  7041 3EF3 20 65 14			jsr @FROUND
  7042 3EF6 A5 8E			lda :FPMAN0
  7043 3EF8 8D E4 A0			sta RESULT
  7044 3EFB A5 8F			lda :FPMAN1
  7045 3EFD 8D E5 A0			sta RESULT+1
  7046 3F00 CA				dex
  7047 3F01			@exit
  7048
  7049 				; ------------------------------------------------------------
  7050
  7051 = A0C9			adr.BALL	= DATAORIGIN+$05E0	; [27] RECORD
  7052 3F01			.var BALL	= adr.BALL .word
  7053 = A0C9			BALL.X	= DATAORIGIN+$05E0
  7054 = A0CB			BALL.Y	= DATAORIGIN+$05E2
  7055 = A0CD			BALL.FINEX	= DATAORIGIN+$05E4
  7056 = A0CF			BALL.FINEY	= DATAORIGIN+$05E6
  7057 = A0D1			BALL.OLDX	= DATAORIGIN+$05E8
  7058 = A0D3			BALL.OLDY	= DATAORIGIN+$05EA
  7059 = A0D5			BALL.SPEED	= DATAORIGIN+$05EC
  7060 = A0D7			BALL.FINESPEED	= DATAORIGIN+$05EE
  7061 = A0D9			BALL.SPEEDX	= DATAORIGIN+$05F0
  7062 = A0DB			BALL.SPEEDY	= DATAORIGIN+$05F2
  7063 = A0DD			BALL.SBD	= DATAORIGIN+$05F4
  7064 = A0DF			BALL.BRWHIT	= DATAORIGIN+$05F6
  7065 = A0E0			BALL.INPLAY	= DATAORIGIN+$05F7
  7066 = A0E1			BALL.LAUNCH	= DATAORIGIN+$05F8
  7067 = A0E2			BALL.ONVAUS	= DATAORIGIN+$05F9
  7068 = A0E3			BALL.STM	= DATAORIGIN+$05FA
  7069 = A0E4			RESULT	= DATAORIGIN+$05FB
  7070
  7071 = A0C9			@VarData	= BALL.X
  7072 = 001B			@VarDataSize	= 27
  7073
  7074 3F01 60				rts						; ret
  7075 = 3F02 C9 A0		BALL
  7075 				.endl
  7076
  7077 3F04			.local	MOVE_BALL					; PROCEDURE
  7078
  7079 				; optimize OK (service.pas), line = 1213
  7080
  7081 3F04 AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7082 3F0E A0 00			ldy #BALL.X-DATAORIGIN
  7083 3F10 B1 84			lda (:bp2),y
  7084 3F12 C8				iny
  7085 3F13 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7086 3F15 A9 00			lda #$00
  7087 3F17 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7088 3F19 18 71 84			add (:bp2),y
  7089 3F1C 85 9F			sta :STACKORIGIN+9
  7090 3F1E C8				iny
  7091 3F1F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7092 3F21 71 84			adc (:bp2),y
  7093 3F23 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7094 3F25 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7095 3F27 A5 9F			lda :STACKORIGIN+9
  7096 3F29 18 71 84			add (:bp2),y
  7097 3F2C 8D EA A0			sta X
  7098 3F2F C8				iny
  7099 3F30 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7100 3F32 71 84			adc (:bp2),y
  7101 3F34 8D EB A0			sta X+1
  7102
  7103 				; optimize OK (service.pas), line = 1214
  7104
  7105 3F37 A0 02			ldy #BALL.Y-DATAORIGIN
  7106 3F39 B1 84			lda (:bp2),y
  7107 3F3B C8				iny
  7108 3F3C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7109 3F3E A9 00			lda #$00
  7110 3F40 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7111 3F42 18 71 84			add (:bp2),y
  7112 3F45 85 9F			sta :STACKORIGIN+9
  7113 3F47 C8				iny
  7114 3F48 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7115 3F4A 71 84			adc (:bp2),y
  7116 3F4C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7117 3F4E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7118 3F50 A5 9F			lda :STACKORIGIN+9
  7119 3F52 18 71 84			add (:bp2),y
  7120 3F55 8D EC A0			sta Y
  7121 3F58 C8				iny
  7122 3F59 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7123 3F5B 71 84			adc (:bp2),y
  7124 3F5D 8D ED A0			sta Y+1
  7125
  7126 				; optimize OK (service.pas), line = 1216
  7127
  7128 3F60 A0 00			ldy #BALL.X-DATAORIGIN
  7129 3F62 AD EB A0			lda X+1
  7130 3F65 91 84			sta (:bp2),y
  7131 3F67 C8				iny
  7132 3F68 A9 00			lda #$00
  7133 3F6A 91 84			sta (:bp2),y
  7134
  7135 				; optimize OK (service.pas), line = 1217
  7136
  7137 3F6C A0 02			ldy #BALL.Y-DATAORIGIN
  7138 3F6E AD ED A0			lda Y+1
  7139 3F71 91 84			sta (:bp2),y
  7140 3F73 C8				iny
  7141 3F74 A9 00			lda #$00
  7142 3F76 91 84			sta (:bp2),y
  7143
  7144 				; optimize OK (service.pas), line = 1219
  7145
  7146 3F78 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7147 3F7A AD EA A0			lda X
  7148 3F7D 91 84			sta (:bp2),y
  7149 3F7F C8				iny
  7150 3F80 A9 00			lda #$00
  7151 3F82 91 84			sta (:bp2),y
  7152
  7153 				; optimize OK (service.pas), line = 1220
  7154
  7155 3F84 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7156 3F86 AD EC A0			lda Y
  7157 3F89 91 84			sta (:bp2),y
  7158 3F8B C8				iny
  7159 3F8C A9 00			lda #$00
  7160 3F8E 91 84			sta (:bp2),y
  7161
  7162 				; optimize OK (service.pas), line = 1226
  7163
  7164 3F90 A0 00			ldy #BALL.X-DATAORIGIN
  7165 3F92 B1 84			lda (:bp2),y
  7166 3F94 C8				iny
  7167 3F95 C9 D9			cmp #$D9
  7168 3F97 B1 84			lda (:bp2),y
  7169 3F99 E9 00			sbc #$00
  7170 3F9B 50 02			svc
  7171 3F9D 49 80			eor #$80
  7172 3F9F 30 67			jmi l_0DC9
  7173
  7174 				; optimize OK (service.pas), line = 1228
  7175
  7176 3FA1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7177 3FA3 A9 00			lda #$00
  7178 3FA5 38 F1 84			sub (:bp2),y
  7179 3FA8 85 9F			sta :STACKORIGIN+9
  7180 3FAA C8				iny
  7181 3FAB A9 00			lda #$00
  7182 3FAD F1 84			sbc (:bp2),y
  7183 3FAF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7184 3FB1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7185 3FB3 A5 9F			lda :STACKORIGIN+9
  7186 3FB5 91 84			sta (:bp2),y
  7187 3FB7 C8				iny
  7188 3FB8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7189 3FBA 91 84			sta (:bp2),y
  7190
  7191 				; optimize OK (service.pas), line = 1229
  7192
  7193 3FBC A0 00			ldy #BALL.X-DATAORIGIN
  7194 3FBE A9 B0			lda #$B0
  7195 3FC0 38 F1 84			sub (:bp2),y
  7196 3FC3 85 9F			sta :STACKORIGIN+9
  7197 3FC5 C8				iny
  7198 3FC6 A9 01			lda #$01
  7199 3FC8 F1 84			sbc (:bp2),y
  7200 3FCA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7201 3FCC A0 00			ldy #BALL.X-DATAORIGIN
  7202 3FCE A5 9F			lda :STACKORIGIN+9
  7203 3FD0 91 84			sta (:bp2),y
  7204 3FD2 C8				iny
  7205 3FD3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7206 3FD5 91 84			sta (:bp2),y
  7207
  7208 				; optimize OK (service.pas), line = 1230
  7209
  7210 3FD7 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7211 3FD9 A9 FF			lda #$FF
  7212 3FDB 51 84			eor (:bp2),y
  7213 3FDD 85 9F			sta :STACKORIGIN+9
  7214 3FDF C8				iny
  7215 3FE0 A9 00			lda #$00
  7216 3FE2 F1 84			sbc (:bp2),y
  7217 3FE4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7218 3FE6 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7219 3FE8 A5 9F			lda :STACKORIGIN+9
  7220 3FEA 91 84			sta (:bp2),y
  7221 3FEC C8				iny
  7222 3FED A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7223 3FEF 91 84			sta (:bp2),y
  7224
  7225 				; optimize OK (service.pas), line = 1231
  7226
  7227 3FF1 A9 F0			lda #$F0
  7228 3FF3 8D DE 9B			sta BALL_BLOCK_SOUND.A
  7229 3FF6 A9 00			lda #$00
  7230 3FF8 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
  7231 3FFB A9 05			lda #$05
  7232 3FFD 8D E0 9B			sta BALL_BLOCK_SOUND.B
  7233 4000 A9 00			lda #$00
  7234 4002 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
  7235 4005 20 26 2B			jsr BALL_BLOCK_SOUND
  7236 4008			l_0DC9
  7237
  7238 				; optimize OK (service.pas), line = 1236
  7239
  7240 4008 AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7241 4012 A0 00			ldy #BALL.X-DATAORIGIN
  7242 4014 B1 84			lda (:bp2),y
  7243 4016 C8				iny
  7244 4017 C9 0A			cmp #$0A
  7245 4019 B1 84			lda (:bp2),y
  7246 401B E9 00			sbc #$00
  7247 401D 50 02			svc
  7248 401F 49 80			eor #$80
  7249 4021 10 67			jpl l_0DFE
  7250
  7251 				; optimize OK (service.pas), line = 1238
  7252
  7253 4023 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7254 4025 A9 00			lda #$00
  7255 4027 38 F1 84			sub (:bp2),y
  7256 402A 85 9F			sta :STACKORIGIN+9
  7257 402C C8				iny
  7258 402D A9 00			lda #$00
  7259 402F F1 84			sbc (:bp2),y
  7260 4031 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7261 4033 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7262 4035 A5 9F			lda :STACKORIGIN+9
  7263 4037 91 84			sta (:bp2),y
  7264 4039 C8				iny
  7265 403A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7266 403C 91 84			sta (:bp2),y
  7267
  7268 				; optimize OK (service.pas), line = 1239
  7269
  7270 403E A0 00			ldy #BALL.X-DATAORIGIN
  7271 4040 A9 14			lda #$14
  7272 4042 38 F1 84			sub (:bp2),y
  7273 4045 85 9F			sta :STACKORIGIN+9
  7274 4047 C8				iny
  7275 4048 A9 00			lda #$00
  7276 404A F1 84			sbc (:bp2),y
  7277 404C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7278 404E A0 00			ldy #BALL.X-DATAORIGIN
  7279 4050 A5 9F			lda :STACKORIGIN+9
  7280 4052 91 84			sta (:bp2),y
  7281 4054 C8				iny
  7282 4055 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7283 4057 91 84			sta (:bp2),y
  7284
  7285 				; optimize OK (service.pas), line = 1240
  7286
  7287 4059 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7288 405B A9 FF			lda #$FF
  7289 405D 51 84			eor (:bp2),y
  7290 405F 85 9F			sta :STACKORIGIN+9
  7291 4061 C8				iny
  7292 4062 A9 00			lda #$00
  7293 4064 F1 84			sbc (:bp2),y
  7294 4066 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7295 4068 A0 04			ldy #BALL.FINEX-DATAORIGIN
  7296 406A A5 9F			lda :STACKORIGIN+9
  7297 406C 91 84			sta (:bp2),y
  7298 406E C8				iny
  7299 406F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7300 4071 91 84			sta (:bp2),y
  7301
  7302 				; optimize OK (service.pas), line = 1241
  7303
  7304 4073 A9 F0			lda #$F0
  7305 4075 8D DE 9B			sta BALL_BLOCK_SOUND.A
  7306 4078 A9 00			lda #$00
  7307 407A 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
  7308 407D A9 05			lda #$05
  7309 407F 8D E0 9B			sta BALL_BLOCK_SOUND.B
  7310 4082 A9 00			lda #$00
  7311 4084 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
  7312 4087 20 26 2B			jsr BALL_BLOCK_SOUND
  7313 408A			l_0DFE
  7314
  7315 				; optimize OK (service.pas), line = 1246
  7316
  7317 408A AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7318 4094 A0 02			ldy #BALL.Y-DATAORIGIN
  7319 4096 B1 84			lda (:bp2),y
  7320 4098 C8				iny
  7321 4099 C9 0C			cmp #$0C
  7322 409B B1 84			lda (:bp2),y
  7323 409D E9 00			sbc #$00
  7324 409F 50 02			svc
  7325 40A1 49 80			eor #$80
  7326 40A3 10 67			jpl l_0E33
  7327
  7328 				; optimize OK (service.pas), line = 1248
  7329
  7330 40A5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7331 40A7 A9 00			lda #$00
  7332 40A9 38 F1 84			sub (:bp2),y
  7333 40AC 85 9F			sta :STACKORIGIN+9
  7334 40AE C8				iny
  7335 40AF A9 00			lda #$00
  7336 40B1 F1 84			sbc (:bp2),y
  7337 40B3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7338 40B5 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7339 40B7 A5 9F			lda :STACKORIGIN+9
  7340 40B9 91 84			sta (:bp2),y
  7341 40BB C8				iny
  7342 40BC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7343 40BE 91 84			sta (:bp2),y
  7344
  7345 				; optimize OK (service.pas), line = 1249
  7346
  7347 40C0 A0 02			ldy #BALL.Y-DATAORIGIN
  7348 40C2 A9 18			lda #$18
  7349 40C4 38 F1 84			sub (:bp2),y
  7350 40C7 85 9F			sta :STACKORIGIN+9
  7351 40C9 C8				iny
  7352 40CA A9 00			lda #$00
  7353 40CC F1 84			sbc (:bp2),y
  7354 40CE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7355 40D0 A0 02			ldy #BALL.Y-DATAORIGIN
  7356 40D2 A5 9F			lda :STACKORIGIN+9
  7357 40D4 91 84			sta (:bp2),y
  7358 40D6 C8				iny
  7359 40D7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7360 40D9 91 84			sta (:bp2),y
  7361
  7362 				; optimize OK (service.pas), line = 1250
  7363
  7364 40DB A0 06			ldy #BALL.FINEY-DATAORIGIN
  7365 40DD A9 FF			lda #$FF
  7366 40DF 51 84			eor (:bp2),y
  7367 40E1 85 9F			sta :STACKORIGIN+9
  7368 40E3 C8				iny
  7369 40E4 A9 00			lda #$00
  7370 40E6 F1 84			sbc (:bp2),y
  7371 40E8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7372 40EA A0 06			ldy #BALL.FINEY-DATAORIGIN
  7373 40EC A5 9F			lda :STACKORIGIN+9
  7374 40EE 91 84			sta (:bp2),y
  7375 40F0 C8				iny
  7376 40F1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7377 40F3 91 84			sta (:bp2),y
  7378
  7379 				; optimize OK (service.pas), line = 1251
  7380
  7381 40F5 A9 F0			lda #$F0
  7382 40F7 8D DE 9B			sta BALL_BLOCK_SOUND.A
  7383 40FA A9 00			lda #$00
  7384 40FC 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
  7385 40FF A9 05			lda #$05
  7386 4101 8D E0 9B			sta BALL_BLOCK_SOUND.B
  7387 4104 A9 00			lda #$00
  7388 4106 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
  7389 4109 20 26 2B			jsr BALL_BLOCK_SOUND
  7390 410C			l_0E33
  7391
  7392 				; optimize OK (service.pas), line = 1259
  7393
  7394 410C AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7395 4116 A0 02			ldy #BALL.Y-DATAORIGIN
  7396 4118 B1 84			lda (:bp2),y
  7397 411A 18 69 03			add #$03
  7398 411D 85 9F			sta :STACKORIGIN+9
  7399 411F C8				iny
  7400 4120 B1 84			lda (:bp2),y
  7401 4122 69 00			adc #$00
  7402 4124 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7403 4126 A0 01			ldy #1
  7404 4128 A5 9F			lda :STACKORIGIN+9
  7405 412A C9 B9			cmp #$B9
  7406 412C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7407 412E E9 00			sbc #$00
  7408 4130 50 02			svc
  7409 4132 49 80			eor #$80
  7410 4134 10 01			bpl @+
  7411 4136 88				dey
  7412 				@
  7413 4137 84 9F			sty :STACKORIGIN+9
  7414 4139 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7415 413B B1 84			lda (:bp2),y
  7416 413D 85 A0			sta :STACKORIGIN+10
  7417 413F C8				iny
  7418 4140 B1 84			lda (:bp2),y
  7419 4142 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7420 4144 A0 01			ldy #1
  7421 4146 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7422 4148 30 04			bmi @+
  7423 414A 05 A0			ora :STACKORIGIN+10
  7424 414C D0 01			sne
  7425 				@
  7426 414E 88				dey
  7427 				@
  7428 414F 98				tya
  7429 4150 25 9F			and :STACKORIGIN+9
  7430 4152 85 9F			sta :STACKORIGIN+9
  7431 4154 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7432 4156 B1 84			lda (:bp2),y
  7433 4158 85 A0			sta :STACKORIGIN+10
  7434 415A C8				iny
  7435 415B B1 84			lda (:bp2),y
  7436 415D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7437 415F A0 01			ldy #1
  7438 4161 A5 A0			lda :STACKORIGIN+10
  7439 4163 C9 B9			cmp #$B9
  7440 4165 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7441 4167 E9 00			sbc #$00
  7442 4169 50 02			svc
  7443 416B 49 80			eor #$80
  7444 416D 30 01			bmi @+
  7445 416F 88				dey
  7446 				@
  7447 4170 98				tya
  7448 4171 25 9F			and :STACKORIGIN+9
  7449 4173 D0 03 4C A6 44		jeq l_0E82
  7450
  7451 				; optimize OK (service.pas), line = 1263
  7452
  7453 4178 A0 00			ldy #BALL.X-DATAORIGIN
  7454 417A B1 84			lda (:bp2),y
  7455 417C 85 9F			sta :STACKORIGIN+9
  7456 417E C8				iny
  7457 417F AD 71 9C			lda VAUS.X
  7458 4182 38 E9 03			sub #$03
  7459 4185 85 A0			sta :STACKORIGIN+10
  7460 4187 A9 00			lda #$00
  7461 4189 E9 00			sbc #$00
  7462 418B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7463 418D A5 A0			lda :STACKORIGIN+10
  7464 418F C5 9F			cmp :STACKORIGIN+9
  7465 4191 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7466 4193 F1 84			sbc (:bp2),y
  7467 4195 50 02			svc
  7468 4197 49 80			eor #$80
  7469 4199 30 03 4C A6 44		jpl l_0EB1
  7470 419E A0 00			ldy #BALL.X-DATAORIGIN
  7471 41A0 B1 84			lda (:bp2),y
  7472 41A2 85 A0			sta :STACKORIGIN+10
  7473 41A4 C8				iny
  7474 41A5 B1 84			lda (:bp2),y
  7475 41A7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7476 41A9 AD 71 9C			lda VAUS.X
  7477 41AC 18 6D 79 9C			add VAUS.WIDTH
  7478 41B0 85 A1			sta :STACKORIGIN+11
  7479 41B2 A9 00			lda #$00
  7480 41B4 69 00			adc #$00
  7481 41B6 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7482 41B8 A5 A1			lda :STACKORIGIN+11
  7483 41BA 18 69 03			add #$03
  7484 41BD 85 A1			sta :STACKORIGIN+11
  7485 41BF A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7486 41C1 69 00			adc #$00
  7487 41C3 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7488 41C5 A9 00			lda #$00
  7489 41C7 69 00			adc #$00
  7490 41C9 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  7491 41CB A9 00			lda #$00
  7492 41CD 69 00			adc #$00
  7493 41CF 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  7494 41D1 A0 00			ldy #$00
  7495 41D3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7496 41D5 10 01			spl
  7497 41D7 88				dey
  7498 41D8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7499 41DA 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  7500 41DC 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  7501 41DE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7502 41E0 C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
  7503 41E2 D0 10			bne @+
  7504 41E4 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7505 41E6 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
  7506 41E8 D0 0A			bne @+
  7507 41EA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7508 41EC C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  7509 41EE D0 04			bne @+
  7510 41F0 A5 A0			lda :STACKORIGIN+10
  7511 41F2 C5 A1			cmp :STACKORIGIN+11
  7512 				@
  7513 41F4 90 03 4C A6 44		jcs l_0EB1
  7514 				@
  7515
  7516 				; optimize OK (service.pas), line = 1266
  7517
  7518 41F9 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7519 41FB A9 00			lda #$00
  7520 41FD 38 F1 84			sub (:bp2),y
  7521 4200 85 9F			sta :STACKORIGIN+9
  7522 4202 C8				iny
  7523 4203 A9 00			lda #$00
  7524 4205 F1 84			sbc (:bp2),y
  7525 4207 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7526 4209 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7527 420B A5 9F			lda :STACKORIGIN+9
  7528 420D 91 84			sta (:bp2),y
  7529 420F C8				iny
  7530 4210 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7531 4212 91 84			sta (:bp2),y
  7532
  7533 				; optimize OK (service.pas), line = 1268
  7534
  7535 4214 AD 7D 9C			lda VAUS.LETTER
  7536 4217 C9 06			cmp #$06
  7537 4219 D0 1D			jne l_0ED5
  7538 421B A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7539 421D B1 84			lda (:bp2),y
  7540 421F D0 17			jne l_0ED5
  7541
  7542 				; optimize OK (service.pas), line = 1270
  7543
  7544 4221 A0 1A			ldy #BALL.STM-DATAORIGIN
  7545 4223 91 84			sta (:bp2),y
  7546
  7547 				; optimize OK (service.pas), line = 1271
  7548
  7549 4225 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7550 4227 A9 01			lda #$01
  7551 4229 91 84			sta (:bp2),y
  7552
  7553 				; optimize OK (service.pas), line = 1272
  7554
  7555 422B A0 00			ldy #BALL.X-DATAORIGIN
  7556 422D B1 84			lda (:bp2),y
  7557 422F C8				iny
  7558 4230 38 ED 71 9C			sub VAUS.X
  7559 4234 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7560 4236 91 84			sta (:bp2),y
  7561 4238			l_0ED5
  7562
  7563 				; optimize OK (service.pas), line = 1275
  7564
  7565 4238 A9 2C			lda #$2C
  7566 423A 8D DE 9B			sta BALL_BLOCK_SOUND.A
  7567 423D A9 01			lda #$01
  7568 423F 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
  7569 4242 A9 06			lda #$06
  7570 4244 8D E0 9B			sta BALL_BLOCK_SOUND.B
  7571 4247 A9 00			lda #$00
  7572 4249 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
  7573 424C 20 26 2B			jsr BALL_BLOCK_SOUND
  7574
  7575 				; optimize OK (service.pas), line = 1279
  7576
  7577 424F AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7578 4259 A0 00			ldy #BALL.X-DATAORIGIN
  7579 425B B1 84			lda (:bp2),y
  7580 425D 85 9F			sta :STACKORIGIN+9
  7581 425F C8				iny
  7582 4260 B1 84			lda (:bp2),y
  7583 4262 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7584 4264 AD 71 9C			lda VAUS.X
  7585 4267 18 69 0A			add #$0A
  7586 426A 85 A0			sta :STACKORIGIN+10
  7587 426C A9 00			lda #$00
  7588 426E 69 00			adc #$00
  7589 4270 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7590 4272 A0 00			ldy #$00
  7591 4274 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7592 4276 10 01			spl
  7593 4278 88				dey
  7594 4279 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7595 427B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7596 427D 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7597 427F				.LOCAL
  7598 427F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7599 4281 38 E9 00			sub #$00
  7600 4284 D0 1C			bne L4
  7601 4286 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7602 4288 C9 00			cmp #$00
  7603 428A D0 0A			bne L1
  7604 428C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7605 428E C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7606 4290 D0 04			bne L1
  7607 4292 A5 9F			lda :STACKORIGIN+9
  7608 4294 C5 A0			cmp :STACKORIGIN+10
  7609 4296 F0 10		L1	beq L5
  7610 4298 B0 04			bcs L3
  7611 429A A9 FF			lda #$FF
  7612 429C D0 0A			bne L5
  7613 429E A9 01		L3	lda #$01
  7614 42A0 D0 06			bne L5
  7615 42A2 50 04		L4	bvc L5
  7616 42A4 49 FF			eor #$FF
  7617 42A6 09 01			ora #$01
  7618 42A8			L5
  7619 					.ENDL
  7620 42A8 30 03 4C 6B 43		jpl l_0F05
  7621
  7622 				; optimize OK (service.pas), line = 1282
  7623
  7624 42AD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7625 42AF A9 00			lda #$00
  7626 42B1 38 F1 84			sub (:bp2),y
  7627 42B4 85 9F			sta :STACKORIGIN+9
  7628 42B6 C8				iny
  7629 42B7 A9 00			lda #$00
  7630 42B9 F1 84			sbc (:bp2),y
  7631 42BB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7632 42BD A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7633 42BF A5 9F			lda :STACKORIGIN+9
  7634 42C1 91 84			sta (:bp2),y
  7635 42C3 C8				iny
  7636 42C4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7637 42C6 91 84			sta (:bp2),y
  7638
  7639 				; optimize OK (service.pas), line = 1286
  7640
  7641 42C8 AD E6 A0			lda BALL
  7642 42CB 8D B9 A0			sta GET_BALL_DIRECTION.BALL
  7643 42CE AD E7 A0			lda BALL+1
  7644 42D1 8D BA A0			sta GET_BALL_DIRECTION.BALL+1
  7645 42D4 20 A2 3B			jsr GET_BALL_DIRECTION
  7646 42D7 E8				inx
  7647 42D8 AD BD A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7648 42DD AD BE A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7649 42E2 A9 1E			lda #$1E
  7650 42E4 20 EE 25			jsr SYSTEM.RANDOM.@010180000
  7651 42E7 B5 96			lda :STACKORIGIN,x
  7652 42E9 18 6D 2E 9B			add SYSTEM.RANDOM.@010180000.RESULT
  7653 42ED 8D EE A0			sta ANGLE
  7654 42F0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7655 42F2 69 00			adc #$00
  7656 42F4 8D EF A0			sta ANGLE+1
  7657 42F7 CA				dex
  7658
  7659 				; optimize OK (service.pas), line = 1294
  7660
  7661 42F8 A9 A0			lda #$A0
  7662 42FA 8D 36 A0			sta MIN.A
  7663 42FD A9 00			lda #$00
  7664 42FF 8D 37 A0			sta MIN.A+1
  7665 4302 AD EE A0			lda ANGLE
  7666 4305 8D 38 A0			sta MIN.B
  7667 4308 AD EF A0			lda ANGLE+1
  7668 430B 8D 39 A0			sta MIN.B+1
  7669 430E 20 53 2E			jsr MIN
  7670 4311 A9 78			lda #$78
  7671 4313 8D 30 A0			sta MAX.A
  7672 4316 A9 00			lda #$00
  7673 4318 8D 31 A0			sta MAX.A+1
  7674 431B AD 3A A0			lda MIN.RESULT
  7675 431E 8D 32 A0			sta MAX.B
  7676 4321 AD 3B A0			lda MIN.RESULT+1
  7677 4324 8D 33 A0			sta MAX.B+1
  7678 4327 20 28 2E			jsr MAX
  7679 432A AD E6 A0			lda BALL
  7680 432D 8D AF A0			sta SET_BALL_DIRECTION.BALL
  7681 4330 AD E7 A0			lda BALL+1
  7682 4333 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
  7683 4336 AD 34 A0			lda MAX.RESULT
  7684 4339 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
  7685 433C AD 35 A0			lda MAX.RESULT+1
  7686 433F 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7687 4342 20 9E 39			jsr SET_BALL_DIRECTION
  7688
  7689 				; optimize OK (service.pas), line = 1299
  7690
  7691 4345 AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7692 434F A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7693 4351 B1 84			lda (:bp2),y
  7694 4353 8D A5 A0			sta SET_BALL_SPEED.SPEED
  7695 4356 C8				iny
  7696 4357 B1 84			lda (:bp2),y
  7697 4359 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
  7698 435C AD E6 A0			lda BALL
  7699 435F 8D A1 A0			sta SET_BALL_SPEED.BALL
  7700 4362 AD E7 A0			lda BALL+1
  7701 4365 8D A2 A0			sta SET_BALL_SPEED.BALL+1
  7702 4368 20 74 37			jsr SET_BALL_SPEED
  7703 436B			l_0F05
  7704
  7705 				; optimize OK (service.pas), line = 1305
  7706
  7707 436B AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7708 4375 A0 00			ldy #BALL.X-DATAORIGIN
  7709 4377 B1 84			lda (:bp2),y
  7710 4379 85 9F			sta :STACKORIGIN+9
  7711 437B C8				iny
  7712 437C B1 84			lda (:bp2),y
  7713 437E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7714 4380 AD 71 9C			lda VAUS.X
  7715 4383 18 6D 79 9C			add VAUS.WIDTH
  7716 4387 85 A0			sta :STACKORIGIN+10
  7717 4389 A9 00			lda #$00
  7718 438B 69 00			adc #$00
  7719 438D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7720 438F A5 A0			lda :STACKORIGIN+10
  7721 4391 38 E9 0A			sub #$0A
  7722 4394 85 A0			sta :STACKORIGIN+10
  7723 4396 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7724 4398 E9 00			sbc #$00
  7725 439A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7726 439C A9 00			lda #$00
  7727 439E E9 00			sbc #$00
  7728 43A0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7729 43A2 A9 00			lda #$00
  7730 43A4 E9 00			sbc #$00
  7731 43A6 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7732 43A8 A0 00			ldy #$00
  7733 43AA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7734 43AC 10 01			spl
  7735 43AE 88				dey
  7736 43AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7737 43B1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  7738 43B3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  7739 43B5				.LOCAL
  7740 43B5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  7741 43B7 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
  7742 43BA D0 1C			bne L4
  7743 43BC A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  7744 43BE C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
  7745 43C0 D0 0A			bne L1
  7746 43C2 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7747 43C4 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  7748 43C6 D0 04			bne L1
  7749 43C8 A5 9F			lda :STACKORIGIN+9
  7750 43CA C5 A0			cmp :STACKORIGIN+10
  7751 43CC F0 10		L1	beq L5
  7752 43CE B0 04			bcs L3
  7753 43D0 A9 FF			lda #$FF
  7754 43D2 D0 0A			bne L5
  7755 43D4 A9 01		L3	lda #$01
  7756 43D6 D0 06			bne L5
  7757 43D8 50 04		L4	bvc L5
  7758 43DA 49 FF			eor #$FF
  7759 43DC 09 01			ora #$01
  7760 43DE			L5
  7761 					.ENDL
  7762 43DE 10 03 4C A6 44		jmi l_0F46
  7763 43E3 D0 03 4C A6 44		jeq l_0F46
  7764
  7765 				; optimize OK (service.pas), line = 1307
  7766
  7767 43E8 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7768 43EA A9 00			lda #$00
  7769 43EC 38 F1 84			sub (:bp2),y
  7770 43EF 85 9F			sta :STACKORIGIN+9
  7771 43F1 C8				iny
  7772 43F2 A9 00			lda #$00
  7773 43F4 F1 84			sbc (:bp2),y
  7774 43F6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7775 43F8 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7776 43FA A5 9F			lda :STACKORIGIN+9
  7777 43FC 91 84			sta (:bp2),y
  7778 43FE C8				iny
  7779 43FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7780 4401 91 84			sta (:bp2),y
  7781
  7782 				; optimize OK (service.pas), line = 1308
  7783
  7784 4403 AD E6 A0			lda BALL
  7785 4406 8D B9 A0			sta GET_BALL_DIRECTION.BALL
  7786 4409 AD E7 A0			lda BALL+1
  7787 440C 8D BA A0			sta GET_BALL_DIRECTION.BALL+1
  7788 440F 20 A2 3B			jsr GET_BALL_DIRECTION
  7789 4412 E8				inx
  7790 4413 AD BD A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7791 4418 AD BE A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7792 441D A9 1E			lda #$1E
  7793 441F 20 EE 25			jsr SYSTEM.RANDOM.@010180000
  7794 4422 B5 96			lda :STACKORIGIN,x
  7795 4424 38 ED 2E 9B			sub SYSTEM.RANDOM.@010180000.RESULT
  7796 4428 8D EE A0			sta ANGLE
  7797 442B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7798 442D E9 00			sbc #$00
  7799 442F 8D EF A0			sta ANGLE+1
  7800 4432 CA				dex
  7801
  7802 				; optimize OK (service.pas), line = 1309
  7803
  7804 4433 A9 14			lda #$14
  7805 4435 8D 30 A0			sta MAX.A
  7806 4438 A9 00			lda #$00
  7807 443A 8D 31 A0			sta MAX.A+1
  7808 443D AD EE A0			lda ANGLE
  7809 4440 8D 32 A0			sta MAX.B
  7810 4443 AD EF A0			lda ANGLE+1
  7811 4446 8D 33 A0			sta MAX.B+1
  7812 4449 20 28 2E			jsr MAX
  7813 444C A9 3C			lda #$3C
  7814 444E 8D 36 A0			sta MIN.A
  7815 4451 A9 00			lda #$00
  7816 4453 8D 37 A0			sta MIN.A+1
  7817 4456 AD 34 A0			lda MAX.RESULT
  7818 4459 8D 38 A0			sta MIN.B
  7819 445C AD 35 A0			lda MAX.RESULT+1
  7820 445F 8D 39 A0			sta MIN.B+1
  7821 4462 20 53 2E			jsr MIN
  7822 4465 AD E6 A0			lda BALL
  7823 4468 8D AF A0			sta SET_BALL_DIRECTION.BALL
  7824 446B AD E7 A0			lda BALL+1
  7825 446E 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
  7826 4471 AD 3A A0			lda MIN.RESULT
  7827 4474 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
  7828 4477 AD 3B A0			lda MIN.RESULT+1
  7829 447A 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
  7830 447D 20 9E 39			jsr SET_BALL_DIRECTION
  7831
  7832 				; optimize OK (service.pas), line = 1310
  7833
  7834 4480 AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7835 448A A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7836 448C B1 84			lda (:bp2),y
  7837 448E 8D A5 A0			sta SET_BALL_SPEED.SPEED
  7838 4491 C8				iny
  7839 4492 B1 84			lda (:bp2),y
  7840 4494 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
  7841 4497 AD E6 A0			lda BALL
  7842 449A 8D A1 A0			sta SET_BALL_SPEED.BALL
  7843 449D AD E7 A0			lda BALL+1
  7844 44A0 8D A2 A0			sta SET_BALL_SPEED.BALL+1
  7845 44A3 20 74 37			jsr SET_BALL_SPEED
  7846 44A6			l_0F46
  7847 44A6			l_0EB1
  7848 44A6			l_0E82
  7849
  7850 				; optimize OK (service.pas), line = 1322
  7851
  7852 44A6 AC E6 A0 84 84 AC + 	mwy BALL :bp2
  7853 44B0 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7854 44B2 B1 84			lda (:bp2),y
  7855 44B4 85 9F			sta :STACKORIGIN+9
  7856 44B6 C8				iny
  7857 44B7 B1 84			lda (:bp2),y
  7858 44B9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7859 44BB A0 01			ldy #1
  7860 44BD A5 9F			lda :STACKORIGIN+9
  7861 44BF C9 B9			cmp #$B9
  7862 44C1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7863 44C3 E9 00			sbc #$00
  7864 44C5 50 02			svc
  7865 44C7 49 80			eor #$80
  7866 44C9 10 01			bpl @+
  7867 44CB 88				dey
  7868 				@
  7869 44CC 84 9F			sty :STACKORIGIN+9
  7870 44CE A0 02			ldy #BALL.Y-DATAORIGIN
  7871 44D0 B1 84			lda (:bp2),y
  7872 44D2 85 A0			sta :STACKORIGIN+10
  7873 44D4 C8				iny
  7874 44D5 B1 84			lda (:bp2),y
  7875 44D7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7876 44D9 A0 01			ldy #1
  7877 44DB A5 A0			lda :STACKORIGIN+10
  7878 44DD C9 C9			cmp #$C9
  7879 44DF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7880 44E1 E9 00			sbc #$00
  7881 44E3 50 02			svc
  7882 44E5 49 80			eor #$80
  7883 44E7 10 01			bpl @+
  7884 44E9 88				dey
  7885 				@
  7886 44EA 98				tya
  7887 44EB 25 9F			and :STACKORIGIN+9
  7888 44ED 85 9F			sta :STACKORIGIN+9
  7889 44EF A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7890 44F1 B1 84			lda (:bp2),y
  7891 44F3 85 A0			sta :STACKORIGIN+10
  7892 44F5 C8				iny
  7893 44F6 B1 84			lda (:bp2),y
  7894 44F8 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7895 44FA A0 01			ldy #1
  7896 44FC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7897 44FE 30 04			bmi @+
  7898 4500 05 A0			ora :STACKORIGIN+10
  7899 4502 D0 01			sne
  7900 				@
  7901 4504 88				dey
  7902 				@
  7903 4505 98				tya
  7904 4506 25 9F			and :STACKORIGIN+9
  7905 4508 F0 15			jeq l_0F95
  7906
  7907 				; optimize OK (service.pas), line = 1324
  7908
  7909 450A A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7910 450C A9 00			lda #$00
  7911 450E 91 84			sta (:bp2),y
  7912
  7913 				; optimize OK (service.pas), line = 1326
  7914
  7915 4510 AD E6 A0			lda BALL
  7916 4513 8D 96 A0			sta REMOVE_BALL.BALL
  7917 4516 AD E7 A0			lda BALL+1
  7918 4519 8D 97 A0			sta REMOVE_BALL.BALL+1
  7919 451C 20 D2 35			jsr REMOVE_BALL
  7920 451F			l_0F95
  7921
  7922 				; ------------------------------------------------------------
  7923
  7924 = A0E6			BALL	= DATAORIGIN+$05FD
  7925 = 9AE9			BALL.X	= DATAORIGIN+$0000
  7926 = 9AEB			BALL.Y	= DATAORIGIN+$0002
  7927 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
  7928 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
  7929 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
  7930 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
  7931 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
  7932 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
  7933 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
  7934 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
  7935 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
  7936 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
  7937 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
  7938 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
  7939 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
  7940 = 9B03			BALL.STM	= DATAORIGIN+$001A
  7941 = A0EA			X	= DATAORIGIN+$0601
  7942 = A0EC			Y	= DATAORIGIN+$0603
  7943 = A0EE			ANGLE	= DATAORIGIN+$0605
  7944
  7945 = A0E6			@VarData	= BALL
  7946 = 0008			@VarDataSize	= 8
  7947
  7948 451F			@exit
  7949 					.ifdef @new
  7950 					lda <@VarData
  7951 					sta :ztmp
  7952 					lda >@VarData
  7953 					ldy #@VarDataSize-1
  7954 					jmp @FreeMem
  7955 					els
  7956 451F 60				rts						; ret
  7957 					eif
  7958 				.endl
  7959
  7960 4520			.local	MODIFY_VAUS					; PROCEDURE
  7961
  7962 				; optimize OK (service.pas), line = 1333
  7963
  7964 4520 AD 79 9C			lda VAUS.WIDTH
  7965 4523 8D 77 9C			sta VAUS.OLDLEN
  7966 4526 A9 00			lda #$00
  7967 4528 8D 78 9C			sta VAUS.OLDLEN+1
  7968
  7969 				; optimize OK (service.pas), line = 1334
  7970
  7971 452B AD 01 9C			lda PLAYVAUS.WIDTH
  7972 452E 8D 79 9C			sta VAUS.WIDTH
  7973
  7974 				; optimize OK (service.pas), line = 1335
  7975
  7976 4531 AD 03 9C			lda PLAYVAUS.HEIGHT
  7977 4534 8D 7A 9C			sta VAUS.HEIGHT
  7978
  7979 4537			@exit
  7980 					.ifdef @new
  7981 					lda <@VarData
  7982 					sta :ztmp
  7983 					lda >@VarData
  7984 					ldy #@VarDataSize-1
  7985 					jmp @FreeMem
  7986 					els
  7987 4537 60				rts						; ret
  7988 					eif
  7989 				.endl
  7990
  7991 4538			.local	SET_VAUS					; PROCEDURE
  7992
  7993 				; optimize OK (service.pas), line = 1340
  7994
  7995 4538 A9 5F			lda #$5F
  7996 453A 8D 71 9C			sta VAUS.X
  7997
  7998 				; optimize OK (service.pas), line = 1341
  7999
  8000 453D A9 B8			lda #$B8
  8001 453F 8D 72 9C			sta VAUS.Y
  8002
  8003 				; optimize OK (service.pas), line = 1343
  8004
  8005 4542 A9 FF			lda #$FF
  8006 4544 8D 73 9C			sta VAUS.OLDX
  8007 4547 8D 74 9C			sta VAUS.OLDX+1
  8008
  8009 				; optimize OK (service.pas), line = 1344
  8010
  8011 454A 8D 75 9C			sta VAUS.OLDY
  8012 454D 8D 76 9C			sta VAUS.OLDY+1
  8013
  8014 				; optimize OK (service.pas), line = 1345
  8015
  8016 4550 A9 00			lda #$00
  8017 4552 8D 7C 9C			sta VAUS.IFLASH
  8018
  8019 				; optimize OK (service.pas), line = 1349
  8020
  8021 4555 8D 7B 9C			sta VAUS.FLASH
  8022
  8023 				; optimize OK (service.pas), line = 1353
  8024
  8025 4558 AD 01 9C			lda PLAYVAUS.WIDTH
  8026 455B 8D 79 9C			sta VAUS.WIDTH
  8027
  8028 				; optimize OK (service.pas), line = 1354
  8029
  8030 455E AD 03 9C			lda PLAYVAUS.HEIGHT
  8031 4561 8D 7A 9C			sta VAUS.HEIGHT
  8032
  8033 				; optimize OK (service.pas), line = 1355
  8034
  8035 4564 AD 79 9C			lda VAUS.WIDTH
  8036 4567 8D 77 9C			sta VAUS.OLDLEN
  8037 456A A9 00			lda #$00
  8038 456C 8D 78 9C			sta VAUS.OLDLEN+1
  8039
  8040 				; optimize OK (service.pas), line = 1356
  8041
  8042 456F A9 FF			lda #$FF
  8043 4571 8D 7D 9C			sta VAUS.LETTER
  8044
  8045 4574			@exit
  8046 					.ifdef @new
  8047 					lda <@VarData
  8048 					sta :ztmp
  8049 					lda >@VarData
  8050 					ldy #@VarDataSize-1
  8051 					jmp @FreeMem
  8052 					els
  8053 4574 60				rts						; ret
  8054 					eif
  8055 				.endl
  8056
  8057 4575			.local	START_VAUS					; PROCEDURE
  8058
  8059 				; optimize OK (service.pas), line = 1363
  8060
  8061 4575 A9 D8			lda #$D8
  8062 4577 38 ED 79 9C			sub VAUS.WIDTH
  8063 457B 85 9F			sta :STACKORIGIN+9
  8064 457D A9 00			lda #$00
  8065 457F E9 00			sbc #$00
  8066 4581 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8067 4583 A0 00			ldy #$00
  8068 4585 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8069 4587 10 01			spl
  8070 4589 88				dey
  8071 458A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8072 458C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  8073 458E 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  8074 4590 A5 9F			lda :STACKORIGIN+9
  8075 4592 38 E9 01			sub #$01
  8076 4595 85 9F			sta :STACKORIGIN+9
  8077 4597 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8078 4599 E9 00			sbc #$00
  8079 459B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8080 459D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8081 459F E9 00			sbc #$00
  8082 45A1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8083 45A3 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8084 45A5 E9 00			sbc #$00
  8085 45A7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8086 45A9 06 9F			asl :STACKORIGIN+9
  8087 45AB 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  8088 45AD 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  8089 45AF 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
  8090 45B1 A9 0A			lda #$0A
  8091 45B3 8D E9 9B			sta MOUSE_X_LIMIT.MN
  8092 45B6 A9 00			lda #$00
  8093 45B8 8D EA 9B			sta MOUSE_X_LIMIT.MN+1
  8094 45BB A5 9F			lda :STACKORIGIN+9
  8095 45BD 8D EB 9B			sta MOUSE_X_LIMIT.MX
  8096 45C0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8097 45C2 8D EC 9B			sta MOUSE_X_LIMIT.MX+1
  8098 45C5 20 99 2B			jsr MOUSE_X_LIMIT
  8099
  8100 				; optimize OK (service.pas), line = 1364
  8101
  8102 45C8 A9 BE			lda #$BE
  8103 45CA 8D ED 9B			sta MOUSEMOVE.X
  8104 45CD A9 00			lda #$00
  8105 45CF 8D EE 9B			sta MOUSEMOVE.X+1
  8106 45D2 A9 B8			lda #$B8
  8107 45D4 8D EF 9B			sta MOUSEMOVE.Y
  8108 45D7 A9 00			lda #$00
  8109 45D9 8D F0 9B			sta MOUSEMOVE.Y+1
  8110 45DC 20 B2 2B			jsr MOUSEMOVE
  8111
  8112 				; optimize OK (service.pas), line = 1365
  8113
  8114 45DF A9 5F			lda #$5F
  8115 45E1 8D 71 9C			sta VAUS.X
  8116
  8117 				; optimize OK (service.pas), line = 1366
  8118
  8119 45E4 A9 B8			lda #$B8
  8120 45E6 8D 72 9C			sta VAUS.Y
  8121
  8122 45E9			@exit
  8123 					.ifdef @new
  8124 					lda <@VarData
  8125 					sta :ztmp
  8126 					lda >@VarData
  8127 					ldy #@VarDataSize-1
  8128 					jmp @FreeMem
  8129 					els
  8130 45E9 60				rts						; ret
  8131 					eif
  8132 				.endl
  8133
  8134 45EA			.local	REMOVE_VAUS					; PROCEDURE
  8135
  8136 				; optimize OK (service.pas), line = 1380
  8137
  8138 45EA AC 75 9C			ldy VAUS.OLDY
  8139 45ED AD 73 9C			lda VAUS.OLDX
  8140 45F0 18 79 00 C0			add adr.ROW,y
  8141 45F4 8D F0 9C			sta HLP
  8142 45F7 AD 74 9C			lda VAUS.OLDX+1
  8143 45FA 79 00 C1			adc adr.ROW+256,y
  8144 45FD 8D F1 9C			sta HLP+1
  8145
  8146 				; optimize OK (service.pas), line = 1382
  8147
  8148 4600 AD 7A 9C			lda VAUS.HEIGHT
  8149 4603 8D F0 A0			sta Y
  8150 4606 4C 0C 46			jmp l_101Ef
  8151 4609			l_101E
  8152 				; --- ForToDoCondition
  8153 4609 CE F0 A0			dec Y
  8154 460C			l_101Ef
  8155 460C AD F0 9C			lda HLP
  8156 460F 8D 13 A0			sta BLITROW.DST
  8157 4612 A9 50			lda #$50
  8158 4614 18 6D F1 9C			add HLP+1
  8159 4618 8D 14 A0			sta BLITROW.DST+1
  8160 461B A9 00			lda #$00
  8161 461D 69 00			adc #$00
  8162 461F 8D 15 A0			sta BLITROW.DST+2
  8163 4622 A9 00			lda #$00
  8164 4624 69 00			adc #$00
  8165 4626 8D 16 A0			sta BLITROW.DST+3
  8166 4629 AD FD 9B			lda PLAYSCREEN.OFS
  8167 462C 18 6D F0 9C			add HLP
  8168 4630 8D 0F A0			sta BLITROW.SRC
  8169 4633 AD FE 9B			lda PLAYSCREEN.OFS+1
  8170 4636 6D F1 9C			adc HLP+1
  8171 4639 8D 10 A0			sta BLITROW.SRC+1
  8172 463C AD FF 9B			lda PLAYSCREEN.OFS+2
  8173 463F 69 00			adc #$00
  8174 4641 8D 11 A0			sta BLITROW.SRC+2
  8175 4644 AD 00 9C			lda PLAYSCREEN.OFS+3
  8176 4647 69 00			adc #$00
  8177 4649 8D 12 A0			sta BLITROW.SRC+3
  8178 464C AD 77 9C			lda VAUS.OLDLEN
  8179 464F 8D 17 A0			sta BLITROW.SIZE
  8180 4652 AD 78 9C			lda VAUS.OLDLEN+1
  8181 4655 8D 18 A0			sta BLITROW.SIZE+1
  8182 4658 20 0F 2D			jsr BLITROW
  8183
  8184 				; optimize OK (service.pas), line = 1385
  8185
  8186 465B AD F0 9C			lda HLP
  8187 465E 18 69 40			add #$40
  8188 4661 8D F0 9C			sta HLP
  8189 4664 AD F1 9C			lda HLP+1
  8190 4667 69 01			adc #$01
  8191 4669 8D F1 9C			sta HLP+1
  8192
  8193 				; --- ForToDoEpilog
  8194 466C AD F0 A0			lda Y
  8195 466F D0 98			jne l_101E
  8196 4671			l_102C
  8197
  8198 				; optimize OK (service.pas), line = 1388
  8199
  8200 4671 AD 79 9C			lda VAUS.WIDTH
  8201 4674 8D 77 9C			sta VAUS.OLDLEN
  8202 4677 A9 00			lda #$00
  8203 4679 8D 78 9C			sta VAUS.OLDLEN+1
  8204
  8205 				; ------------------------------------------------------------
  8206
  8207 = A0F0			Y	= DATAORIGIN+$0607
  8208
  8209 = A0F0			@VarData	= Y
  8210 = 0001			@VarDataSize	= 1
  8211
  8212 467C			@exit
  8213 					.ifdef @new
  8214 					lda <@VarData
  8215 					sta :ztmp
  8216 					lda >@VarData
  8217 					ldy #@VarDataSize-1
  8218 					jmp @FreeMem
  8219 					els
  8220 467C 60				rts						; ret
  8221 					eif
  8222 				.endl
  8223
  8224 467D			.local	PLACE_VAUS					; PROCEDURE
  8225
  8226 				; optimize FAIL (0, service.pas), line = 1397
  8227
  8228 467D EE 7C 9C			inc VAUS.IFLASH
  8229
  8230 				; optimize OK (service.pas), line = 1399
  8231
  8232 4680 AD 7C 9C			lda VAUS.IFLASH
  8233 4683 C9 0B			cmp #$0B
  8234 4685 90 08			jcc l_1061
  8235
  8236 				; optimize FAIL (0, service.pas), line = 1401
  8237
  8238 4687 EE 7B 9C			inc VAUS.FLASH
  8239
  8240 				; optimize OK (service.pas), line = 1402
  8241
  8242 468A A9 00			lda #$00
  8243 468C 8D 7C 9C			sta VAUS.IFLASH
  8244 468F			l_1061
  8245
  8246 				; optimize OK (service.pas), line = 1405
  8247
  8248 468F AD 7B 9C			lda VAUS.FLASH
  8249 4692 C9 0B			cmp #$0B
  8250 4694 90 05			jcc l_107E
  8251 4696 A9 00			lda #$00
  8252 4698 8D 7B 9C			sta VAUS.FLASH
  8253 469B			l_107E
  8254
  8255 				; optimize OK (service.pas), line = 1415
  8256
  8257 469B A9 00			lda #$00
  8258 469D 8D F0 9C			sta HLP
  8259 46A0 8D F1 9C			sta HLP+1
  8260
  8261 				; optimize OK (service.pas), line = 1417
  8262
  8263 46A3 8D F1 A0			sta Y
  8264 46A6 AC 7A 9C			ldy VAUS.HEIGHT
  8265 46A9 88				dey
  8266 46AA 8C AE 46			sty @FORTMP_1095_0
  8267
  8268 46AD			l_1098
  8269 				; --- ForToDoCondition
  8270 46AD A9 00			lda @FORTMP_1095_0::#$00
  8271 46AF CD F1 A0			cmp Y
  8272 46B2 B0 03 4C EB 47		jcc l_10A6
  8273
  8274 				; optimize OK (service.pas), line = 1423
  8275
  8276 46B7 AD F1 A0			lda Y
  8277 46BA 18 6D 72 9C			add VAUS.Y
  8278 46BE A8				tay
  8279 46BF AD 71 9C			lda VAUS.X
  8280 46C2 18 79 00 C0			add adr.ROW,y
  8281 46C6 8D 01 A0			sta BLITZERO.DST
  8282 46C9 A9 50			lda #$50
  8283 46CB 79 00 C1			adc adr.ROW+256,y
  8284 46CE 8D 02 A0			sta BLITZERO.DST+1
  8285 46D1 A9 00			lda #$00
  8286 46D3 69 00			adc #$00
  8287 46D5 8D 03 A0			sta BLITZERO.DST+2
  8288 46D8 A9 00			lda #$00
  8289 46DA 69 00			adc #$00
  8290 46DC 8D 04 A0			sta BLITZERO.DST+3
  8291 46DF AD 05 9C			lda PLAYVAUS.OFS
  8292 46E2 18 6D F0 9C			add HLP
  8293 46E6 8D FD 9F			sta BLITZERO.SRC
  8294 46E9 AD 06 9C			lda PLAYVAUS.OFS+1
  8295 46EC 6D F1 9C			adc HLP+1
  8296 46EF 8D FE 9F			sta BLITZERO.SRC+1
  8297 46F2 AD 07 9C			lda PLAYVAUS.OFS+2
  8298 46F5 69 00			adc #$00
  8299 46F7 8D FF 9F			sta BLITZERO.SRC+2
  8300 46FA AD 08 9C			lda PLAYVAUS.OFS+3
  8301 46FD 69 00			adc #$00
  8302 46FF 8D 00 A0			sta BLITZERO.SRC+3
  8303 4702 AD 79 9C			lda VAUS.WIDTH
  8304 4705 8D 05 A0			sta BLITZERO.SIZE
  8305 4708 A9 00			lda #$00
  8306 470A 8D 06 A0			sta BLITZERO.SIZE+1
  8307 470D 20 5C 2C			jsr BLITZERO
  8308
  8309 				; optimize OK (service.pas), line = 1425
  8310
  8311 4710 AD F1 A0			lda Y
  8312 4713 C9 02			cmp #$02
  8313 4715 B0 03 4C D4 47		jcc l_10E9
  8314 471A AD 7A 9C			lda VAUS.HEIGHT
  8315 471D E9 02			sbc #$02
  8316 471F 85 A1			sta :STACKORIGIN+11
  8317 4721 A9 00			lda #$00
  8318 4723 E9 00			sbc #$00
  8319 4725 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  8320 4727 AD F1 A0			lda Y
  8321 472A C5 A1			cmp :STACKORIGIN+11
  8322 472C A9 00			lda #$00
  8323 472E E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  8324 4730 50 02			svc
  8325 4732 49 80			eor #$80
  8326 4734 30 03 4C D4 47		jpl l_10E9
  8327
  8328 				; optimize OK (service.pas), line = 1428
  8329
  8330 4739 AC 7B 9C			ldy VAUS.FLASH
  8331 473C B9 5E 10			lda adr.FLASH,y
  8332 473F 8D 28 A0			sta PUTBYTE.V
  8333 4742 AD F1 A0			lda Y
  8334 4745 18 6D 72 9C			add VAUS.Y
  8335 4749 A8				tay
  8336 474A AD 71 9C			lda VAUS.X
  8337 474D 18 79 00 C0			add adr.ROW,y
  8338 4751 8D 24 A0			sta PUTBYTE.DST
  8339 4754 A9 50			lda #$50
  8340 4756 79 00 C1			adc adr.ROW+256,y
  8341 4759 8D 25 A0			sta PUTBYTE.DST+1
  8342 475C A9 00			lda #$00
  8343 475E 69 00			adc #$00
  8344 4760 8D 26 A0			sta PUTBYTE.DST+2
  8345 4763 A9 00			lda #$00
  8346 4765 69 00			adc #$00
  8347 4767 8D 27 A0			sta PUTBYTE.DST+3
  8348 476A 20 D6 2D			jsr PUTBYTE
  8349
  8350 				; optimize OK (service.pas), line = 1431
  8351
  8352 476D AC 7B 9C			ldy VAUS.FLASH
  8353 4770 B9 5E 10			lda adr.FLASH,y
  8354 4773 8D 28 A0			sta PUTBYTE.V
  8355 4776 AD 71 9C			lda VAUS.X
  8356 4779 18 6D 79 9C			add VAUS.WIDTH
  8357 477D 85 A0			sta :STACKORIGIN+10
  8358 477F A9 50			lda #$50
  8359 4781 69 00			adc #$00
  8360 4783 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8361 4785 A9 00			lda #$00
  8362 4787 69 00			adc #$00
  8363 4789 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8364 478B A9 00			lda #$00
  8365 478D 69 00			adc #$00
  8366 478F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8367 4791 A5 A0			lda :STACKORIGIN+10
  8368 4793 38 E9 01			sub #$01
  8369 4796 85 A0			sta :STACKORIGIN+10
  8370 4798 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8371 479A E9 00			sbc #$00
  8372 479C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8373 479E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8374 47A0 E9 00			sbc #$00
  8375 47A2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8376 47A4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8377 47A6 E9 00			sbc #$00
  8378 47A8 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8379 47AA AD F1 A0			lda Y
  8380 47AD 18 6D 72 9C			add VAUS.Y
  8381 47B1 A8				tay
  8382 47B2 A5 A0			lda :STACKORIGIN+10
  8383 47B4 18 79 00 C0			add adr.ROW,y
  8384 47B8 8D 24 A0			sta PUTBYTE.DST
  8385 47BB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8386 47BD 79 00 C1			adc adr.ROW+256,y
  8387 47C0 8D 25 A0			sta PUTBYTE.DST+1
  8388 47C3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8389 47C5 69 00			adc #$00
  8390 47C7 8D 26 A0			sta PUTBYTE.DST+2
  8391 47CA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8392 47CC 69 00			adc #$00
  8393 47CE 8D 27 A0			sta PUTBYTE.DST+3
  8394 47D1 20 D6 2D			jsr PUTBYTE
  8395 47D4			l_10E9
  8396
  8397 				; optimize OK (service.pas), line = 1434
  8398
  8399 47D4 AD F0 9C			lda HLP
  8400 47D7 18 6D 79 9C			add VAUS.WIDTH
  8401 47DB 8D F0 9C			sta HLP
  8402 47DE 90 03			scc
  8403 47E0 EE F1 9C			inc HLP+1
  8404
  8405 				; --- ForToDoEpilog
  8406 47E3 EE F1 A0			inc Y
  8407 47E6 F0 03 4C AD 46		jne l_1098
  8408 47EB			l_10A6
  8409
  8410 				; ------------------------------------------------------------
  8411
  8412 = A0F1			Y	= DATAORIGIN+$0608
  8413
  8414 = A0F1			@VarData	= Y
  8415 = 0001			@VarDataSize	= 1
  8416
  8417 47EB			@exit
  8418 					.ifdef @new
  8419 					lda <@VarData
  8420 					sta :ztmp
  8421 					lda >@VarData
  8422 					ldy #@VarDataSize-1
  8423 					jmp @FreeMem
  8424 					els
  8425 47EB 60				rts						; ret
  8426 					eif
  8427 				.endl
  8428
  8429 47EC			.local	MOVE_VAUS					; PROCEDURE
  8430
  8431 				; optimize OK (service.pas), line = 1444
  8432
  8433 47EC A0 01			ldy #1
  8434 47EE AD 74 9C			lda VAUS.OLDX+1
  8435 47F1 C9 FF			cmp #$FF
  8436 47F3 D0 05			bne @+
  8437 47F5 AD 73 9C			lda VAUS.OLDX
  8438 47F8 C9 FF			cmp #$FF
  8439 				@
  8440 47FA D0 01			bne @+
  8441 47FC 88				dey
  8442 				@
  8443 47FD 84 9F			sty :STACKORIGIN+9
  8444 47FF A0 01			ldy #1
  8445 4801 AD 74 9C			lda VAUS.OLDX+1
  8446 4804 C9 00			cmp #$00
  8447 4806 D0 06			bne @+
  8448 4808 AD 73 9C			lda VAUS.OLDX
  8449 480B CD 71 9C			cmp VAUS.X
  8450 				@
  8451 480E D0 01			bne @+
  8452 4810 88				dey
  8453 				@
  8454 4811 98				tya
  8455 4812 25 9F			and :STACKORIGIN+9
  8456 4814 85 9F			sta :STACKORIGIN+9
  8457 4816 A0 01			ldy #1
  8458 4818 A9 00			lda #$00
  8459 481A CD 78 9C			cmp VAUS.OLDLEN+1
  8460 481D D0 06			bne @+
  8461 481F AD 79 9C			lda VAUS.WIDTH
  8462 4822 CD 77 9C			cmp VAUS.OLDLEN
  8463 				@
  8464 4825 D0 01			bne @+
  8465 4827 88				dey
  8466 				@
  8467 4828 98				tya
  8468 4829 05 9F			ora :STACKORIGIN+9
  8469 482B F0 03			jeq l_1165
  8470
  8471 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1445
  8472
  8473 482D 20 EA 45			jsr REMOVE_VAUS
  8474 4830			l_1165
  8475
  8476 				; optimize OK (service.pas), line = 1447
  8477
  8478 4830 AD 71 9C			lda VAUS.X
  8479 4833 8D 73 9C			sta VAUS.OLDX
  8480 4836 A9 00			lda #$00
  8481 4838 8D 74 9C			sta VAUS.OLDX+1
  8482
  8483 				; optimize OK (service.pas), line = 1448
  8484
  8485 483B AD 72 9C			lda VAUS.Y
  8486 483E 8D 75 9C			sta VAUS.OLDY
  8487 4841 A9 00			lda #$00
  8488 4843 8D 76 9C			sta VAUS.OLDY+1
  8489
  8490 				; optimize OK (service.pas), line = 1455
  8491
  8492 4846 A9 D8			lda #$D8
  8493 4848 38 ED 79 9C			sub VAUS.WIDTH
  8494 484C 8D 38 A0			sta MIN.B
  8495 484F A9 00			lda #$00
  8496 4851 E9 00			sbc #$00
  8497 4853 8D 39 A0			sta MIN.B+1
  8498 4856 AD F3 A0			lda X
  8499 4859 8D 36 A0			sta MIN.A
  8500 485C AD F4 A0			lda X+1
  8501 485F 8D 37 A0			sta MIN.A+1
  8502 4862 20 53 2E			jsr MIN
  8503 4865 A9 0A			lda #$0A
  8504 4867 8D 30 A0			sta MAX.A
  8505 486A A9 00			lda #$00
  8506 486C 8D 31 A0			sta MAX.A+1
  8507 486F AD 3A A0			lda MIN.RESULT
  8508 4872 8D 32 A0			sta MAX.B
  8509 4875 AD 3B A0			lda MIN.RESULT+1
  8510 4878 8D 33 A0			sta MAX.B+1
  8511 487B 20 28 2E			jsr MAX
  8512 487E AD 34 A0			lda MAX.RESULT
  8513 4881 8D 71 9C			sta VAUS.X
  8514
  8515 				; optimize OK (service.pas), line = 1456
  8516
  8517 4884 A9 C8			lda #$C8
  8518 4886 38 ED 7A 9C			sub VAUS.HEIGHT
  8519 488A 8D 38 A0			sta MIN.B
  8520 488D A9 00			lda #$00
  8521 488F E9 00			sbc #$00
  8522 4891 8D 39 A0			sta MIN.B+1
  8523 4894 AD F5 A0			lda Y
  8524 4897 8D 36 A0			sta MIN.A
  8525 489A AD F6 A0			lda Y+1
  8526 489D 8D 37 A0			sta MIN.A+1
  8527 48A0 20 53 2E			jsr MIN
  8528 48A3 A9 0C			lda #$0C
  8529 48A5 8D 30 A0			sta MAX.A
  8530 48A8 A9 00			lda #$00
  8531 48AA 8D 31 A0			sta MAX.A+1
  8532 48AD AD 3A A0			lda MIN.RESULT
  8533 48B0 8D 32 A0			sta MAX.B
  8534 48B3 AD 3B A0			lda MIN.RESULT+1
  8535 48B6 8D 33 A0			sta MAX.B+1
  8536 48B9 20 28 2E			jsr MAX
  8537 48BC AD 34 A0			lda MAX.RESULT
  8538 48BF 8D 72 9C			sta VAUS.Y
  8539
  8540 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1458
  8541
  8542 48C2 20 7D 46			jsr PLACE_VAUS
  8543
  8544 				; ------------------------------------------------------------
  8545
  8546 = A0F3			X	= DATAORIGIN+$060A
  8547 = A0F5			Y	= DATAORIGIN+$060C
  8548
  8549 = A0F3			@VarData	= X
  8550 = 0004			@VarDataSize	= 4
  8551
  8552 48C5			@exit
  8553 					.ifdef @new
  8554 					lda <@VarData
  8555 					sta :ztmp
  8556 					lda >@VarData
  8557 					ldy #@VarDataSize-1
  8558 					jmp @FreeMem
  8559 					els
  8560 48C5 60				rts						; ret
  8561 					eif
  8562 				.endl
  8563
  8564 48C6			.local	REMOVE_BLOCK					; PROCEDURE
  8565
  8566 				; optimize OK (service.pas), line = 1472
  8567
  8568 48C6 AD F7 A0			lda XA
  8569 48C9 85 9F			sta :STACKORIGIN+9
  8570 48CB A9 00			lda #$00
  8571 48CD 06 9F			asl :STACKORIGIN+9
  8572 48CF 2A				rol @
  8573 48D0 06 9F			asl :STACKORIGIN+9
  8574 48D2 2A				rol @
  8575 48D3 06 9F			asl :STACKORIGIN+9
  8576 48D5 2A				rol @
  8577 48D6 06 9F			asl :STACKORIGIN+9
  8578 48D8 2A				rol @
  8579 48D9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8580 48DB A5 9F			lda :STACKORIGIN+9
  8581 48DD 18 69 09			add #$09
  8582 48E0 8D FB A0			sta XS
  8583 48E3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8584 48E5 69 00			adc #$00
  8585 48E7 8D FC A0			sta XS+1
  8586
  8587 				; optimize OK (service.pas), line = 1473
  8588
  8589 48EA AD F8 A0			lda YA
  8590 48ED 85 9F			sta :STACKORIGIN+9
  8591 48EF A9 00			lda #$00
  8592 48F1 06 9F			asl :STACKORIGIN+9
  8593 48F3 2A				rol @
  8594 48F4 06 9F			asl :STACKORIGIN+9
  8595 48F6 2A				rol @
  8596 48F7 06 9F			asl :STACKORIGIN+9
  8597 48F9 2A				rol @
  8598 48FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8599 48FC A5 9F			lda :STACKORIGIN+9
  8600 48FE 18 69 16			add #$16
  8601 4901 8D FD A0			sta YS
  8602 4904 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8603 4906 69 00			adc #$00
  8604 4908 8D FE A0			sta YS+1
  8605
  8606 				; optimize OK (service.pas), line = 1475
  8607
  8608 490B A9 00			lda #$00
  8609 490D 8D FA A0			sta Y
  8610
  8611 4910			l_11BD
  8612 				; --- ForToDoCondition
  8613 4910 AD FA A0			lda Y
  8614 4913 C9 08			cmp #$08
  8615 4915 90 03 4C FE 4A		jcs l_11CB
  8616
  8617 				; optimize OK (service.pas), line = 1477
  8618
  8619 491A AD FD A0			lda YS
  8620 491D 6D FA A0			adc Y
  8621 4920 A8				tay
  8622 4921 B9 00 C3			lda adr.MODY,y
  8623 4924 85 86			sta :eax
  8624 4926 A9 00			lda #$00
  8625 4928 85 87			sta :eax+1
  8626 492A AD 7E 9C			lda PATTERN.WIDTH
  8627 492D 85 8E			sta :ecx
  8628 492F AD 7F 9C			lda PATTERN.WIDTH+1
  8629 4932 85 8F			sta :ecx+1
  8630 					.ifdef fmulinit
  8631 					fmulu_16
  8632 					els
  8633 4934 20 56 13			imulCX_AL
  8634 					eif
  8635 4937 A5 86			lda :eax
  8636 4939 8D FF A0			sta YH
  8637 493C A5 87			lda :eax+1
  8638 493E 8D 00 A1			sta YH+1
  8639
  8640 				; optimize OK (service.pas), line = 1485
  8641
  8642 4941 A9 00			lda #$00
  8643 4943 8D F9 A0			sta X
  8644
  8645 4946			l_11E7
  8646 				; --- ForToDoCondition
  8647 4946 AD F9 A0			lda X
  8648 4949 C9 10			cmp #$10
  8649 494B 90 03 4C F6 4A		jcs l_11F5
  8650
  8651 				; optimize OK (service.pas), line = 1486
  8652
  8653 4950 6D FB A0			adc XS
  8654 4953 85 9F			sta :STACKORIGIN+9
  8655 4955 A9 00			lda #$00
  8656 4957 6D FC A0			adc XS+1
  8657 495A C9 00			cmp #$00
  8658 495C D0 04			bne @+
  8659 495E A5 9F			lda :STACKORIGIN+9
  8660 4960 C9 D8			cmp #$D8
  8661 				@
  8662 4962 90 03 4C EE 4A		jcs l_120C
  8663
  8664 				; optimize OK (service.pas), line = 1492
  8665
  8666 4967 AD FD 9B			lda PLAYSCREEN.OFS
  8667 496A 6D F9 A0			adc X
  8668 496D 85 9F			sta :STACKORIGIN+9
  8669 496F AD FE 9B			lda PLAYSCREEN.OFS+1
  8670 4972 69 00			adc #$00
  8671 4974 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8672 4976 AD FF 9B			lda PLAYSCREEN.OFS+2
  8673 4979 69 00			adc #$00
  8674 497B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8675 497D AD 00 9C			lda PLAYSCREEN.OFS+3
  8676 4980 69 00			adc #$00
  8677 4982 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8678 4984 A5 9F			lda :STACKORIGIN+9
  8679 4986 18 6D FB A0			add XS
  8680 498A 85 9F			sta :STACKORIGIN+9
  8681 498C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8682 498E 6D FC A0			adc XS+1
  8683 4991 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8684 4993 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8685 4995 69 00			adc #$00
  8686 4997 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8687 4999 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8688 499B 69 00			adc #$00
  8689 499D 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8690 499F AD FA A0			lda Y
  8691 49A2 18 6D FD A0			add YS
  8692 49A6 A8				tay
  8693 49A7 A5 9F			lda :STACKORIGIN+9
  8694 49A9 18 79 00 C0			add adr.ROW,y
  8695 49AD 8D 29 A0			sta GETBYTE.SRC
  8696 49B0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8697 49B2 79 00 C1			adc adr.ROW+256,y
  8698 49B5 8D 2A A0			sta GETBYTE.SRC+1
  8699 49B8 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8700 49BA 69 00			adc #$00
  8701 49BC 8D 2B A0			sta GETBYTE.SRC+2
  8702 49BF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8703 49C1 69 00			adc #$00
  8704 49C3 8D 2C A0			sta GETBYTE.SRC+3
  8705 49C6 20 FE 2D			jsr GETBYTE
  8706 49C9 AD 2D A0			lda GETBYTE.RESULT
  8707 49CC 29 80			and #$80
  8708 49CE 8D 02 A1			sta SHADOW
  8709
  8710 				; optimize OK (service.pas), line = 1496
  8711
  8712 49D1 AD F9 A0			lda X
  8713 49D4 18 6D FB A0			add XS
  8714 49D8 85 A0			sta :STACKORIGIN+10
  8715 49DA A9 00			lda #$00
  8716 49DC 6D FC A0			adc XS+1
  8717 49DF 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8718 49E1 A9 00			lda #$00
  8719 49E3 18 65 A0			add :STACKORIGIN+10
  8720 49E6 A8				tay
  8721 49E7 A9 C4			lda #$C4
  8722 49E9 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  8723 49EB 85 83			sta :bp+1
  8724 49ED AD 82 9C			lda PATTERN.OFS
  8725 49F0 18 71 82			add (:bp),y
  8726 49F3 85 9F			sta :STACKORIGIN+9
  8727 49F5 AD 83 9C			lda PATTERN.OFS+1
  8728 49F8 69 00			adc #$00
  8729 49FA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8730 49FC AD 84 9C			lda PATTERN.OFS+2
  8731 49FF 69 00			adc #$00
  8732 4A01 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8733 4A03 AD 85 9C			lda PATTERN.OFS+3
  8734 4A06 69 00			adc #$00
  8735 4A08 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8736 4A0A A5 9F			lda :STACKORIGIN+9
  8737 4A0C 18 6D FF A0			add YH
  8738 4A10 8D 29 A0			sta GETBYTE.SRC
  8739 4A13 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8740 4A15 6D 00 A1			adc YH+1
  8741 4A18 8D 2A A0			sta GETBYTE.SRC+1
  8742 4A1B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8743 4A1D 69 00			adc #$00
  8744 4A1F 8D 2B A0			sta GETBYTE.SRC+2
  8745 4A22 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8746 4A24 69 00			adc #$00
  8747 4A26 8D 2C A0			sta GETBYTE.SRC+3
  8748 4A29 20 FE 2D			jsr GETBYTE
  8749 4A2C E8				inx
  8750 4A2D AD 2D A0			lda GETBYTE.RESULT
  8751 4A30 29 7F			and #$7F
  8752 4A32 0D 02 A1			ora SHADOW
  8753 4A35 8D 01 A1			sta CL
  8754 4A38 CA				dex
  8755
  8756 				; optimize OK (service.pas), line = 1500
  8757
  8758 4A39 AD F9 A0			lda X
  8759 4A3C 18 6D FB A0			add XS
  8760 4A40 85 A0			sta :STACKORIGIN+10
  8761 4A42 A9 50			lda #$50
  8762 4A44 6D FC A0			adc XS+1
  8763 4A47 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8764 4A49 A9 00			lda #$00
  8765 4A4B 69 00			adc #$00
  8766 4A4D 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8767 4A4F A9 00			lda #$00
  8768 4A51 69 00			adc #$00
  8769 4A53 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8770 4A55 AD FA A0			lda Y
  8771 4A58 18 6D FD A0			add YS
  8772 4A5C A8				tay
  8773 4A5D A5 A0			lda :STACKORIGIN+10
  8774 4A5F 18 79 00 C0			add adr.ROW,y
  8775 4A63 8D 24 A0			sta PUTBYTE.DST
  8776 4A66 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8777 4A68 79 00 C1			adc adr.ROW+256,y
  8778 4A6B 8D 25 A0			sta PUTBYTE.DST+1
  8779 4A6E A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8780 4A70 69 00			adc #$00
  8781 4A72 8D 26 A0			sta PUTBYTE.DST+2
  8782 4A75 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8783 4A77 69 00			adc #$00
  8784 4A79 8D 27 A0			sta PUTBYTE.DST+3
  8785 4A7C AD 01 A1			lda CL
  8786 4A7F 8D 28 A0			sta PUTBYTE.V
  8787 4A82 20 D6 2D			jsr PUTBYTE
  8788
  8789 				; optimize OK (service.pas), line = 1505
  8790
  8791 4A85 AD FD 9B			lda PLAYSCREEN.OFS
  8792 4A88 18 6D F9 A0			add X
  8793 4A8C 85 A0			sta :STACKORIGIN+10
  8794 4A8E AD FE 9B			lda PLAYSCREEN.OFS+1
  8795 4A91 69 00			adc #$00
  8796 4A93 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8797 4A95 AD FF 9B			lda PLAYSCREEN.OFS+2
  8798 4A98 69 00			adc #$00
  8799 4A9A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8800 4A9C AD 00 9C			lda PLAYSCREEN.OFS+3
  8801 4A9F 69 00			adc #$00
  8802 4AA1 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8803 4AA3 A5 A0			lda :STACKORIGIN+10
  8804 4AA5 18 6D FB A0			add XS
  8805 4AA9 85 A0			sta :STACKORIGIN+10
  8806 4AAB A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8807 4AAD 6D FC A0			adc XS+1
  8808 4AB0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8809 4AB2 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8810 4AB4 69 00			adc #$00
  8811 4AB6 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8812 4AB8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8813 4ABA 69 00			adc #$00
  8814 4ABC 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8815 4ABE AD FA A0			lda Y
  8816 4AC1 18 6D FD A0			add YS
  8817 4AC5 A8				tay
  8818 4AC6 A5 A0			lda :STACKORIGIN+10
  8819 4AC8 18 79 00 C0			add adr.ROW,y
  8820 4ACC 8D 24 A0			sta PUTBYTE.DST
  8821 4ACF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8822 4AD1 79 00 C1			adc adr.ROW+256,y
  8823 4AD4 8D 25 A0			sta PUTBYTE.DST+1
  8824 4AD7 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8825 4AD9 69 00			adc #$00
  8826 4ADB 8D 26 A0			sta PUTBYTE.DST+2
  8827 4ADE A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8828 4AE0 69 00			adc #$00
  8829 4AE2 8D 27 A0			sta PUTBYTE.DST+3
  8830 4AE5 AD 01 A1			lda CL
  8831 4AE8 8D 28 A0			sta PUTBYTE.V
  8832 4AEB 20 D6 2D			jsr PUTBYTE
  8833 4AEE			l_120C
  8834
  8835 				; --- ForToDoEpilog
  8836 4AEE EE F9 A0			inc X
  8837 4AF1 F0 03 4C 46 49		jne l_11E7
  8838 4AF6			l_11F5
  8839
  8840 				; --- ForToDoEpilog
  8841 4AF6 EE FA A0			inc Y
  8842 4AF9 F0 03 4C 10 49		jne l_11BD
  8843 4AFE			l_11CB
  8844
  8845 				; optimize OK (service.pas), line = 1515
  8846
  8847 4AFE AD FD A0			lda YS
  8848 4B01 18 69 04			add #$04
  8849 4B04 8D FA A0			sta Y
  8850 4B07 AD FD A0			lda YS
  8851 4B0A 18 69 0C			add #$0C
  8852 4B0D 8D 11 4B			sta @FORTMP_12A6_0
  8853
  8854 4B10			l_12A9
  8855 				; --- ForToDoCondition
  8856 4B10 A9 00			lda @FORTMP_12A6_0::#$00
  8857 4B12 CD FA A0			cmp Y
  8858 4B15 B0 03 4C 0F 4C		jcc l_12B7
  8859
  8860 				; optimize OK (service.pas), line = 1516
  8861
  8862 4B1A AD FB A0			lda XS
  8863 4B1D 18 69 08			add #$08
  8864 4B20 8D F9 A0			sta X
  8865 4B23 AD FB A0			lda XS
  8866 4B26 18 69 18			add #$18
  8867 4B29 8D 2D 4B			sta @FORTMP_12C7_0
  8868
  8869 4B2C			l_12CA
  8870 				; --- ForToDoCondition
  8871 4B2C A9 00			lda @FORTMP_12C7_0::#$00
  8872 4B2E CD F9 A0			cmp X
  8873 4B31 B0 03 4C 07 4C		jcc l_12D8
  8874
  8875 				; optimize OK (service.pas), line = 1532
  8876
  8877 4B36 AD F9 A0			lda X
  8878 4B39 C9 D8			cmp #$D8
  8879 4B3B 90 03 4C FF 4B		jcs l_12EA
  8880
  8881 				; optimize OK (service.pas), line = 1536
  8882
  8883 4B40 AD FD 9B			lda PLAYSCREEN.OFS
  8884 4B43 6D F9 A0			adc X
  8885 4B46 85 9F			sta :STACKORIGIN+9
  8886 4B48 AD FE 9B			lda PLAYSCREEN.OFS+1
  8887 4B4B 69 00			adc #$00
  8888 4B4D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8889 4B4F AD FF 9B			lda PLAYSCREEN.OFS+2
  8890 4B52 69 00			adc #$00
  8891 4B54 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  8892 4B56 AD 00 9C			lda PLAYSCREEN.OFS+3
  8893 4B59 69 00			adc #$00
  8894 4B5B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  8895 4B5D AC FA A0			ldy Y
  8896 4B60 A5 9F			lda :STACKORIGIN+9
  8897 4B62 18 79 00 C0			add adr.ROW,y
  8898 4B66 8D 29 A0			sta GETBYTE.SRC
  8899 4B69 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8900 4B6B 79 00 C1			adc adr.ROW+256,y
  8901 4B6E 8D 2A A0			sta GETBYTE.SRC+1
  8902 4B71 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  8903 4B73 69 00			adc #$00
  8904 4B75 8D 2B A0			sta GETBYTE.SRC+2
  8905 4B78 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  8906 4B7A 69 00			adc #$00
  8907 4B7C 8D 2C A0			sta GETBYTE.SRC+3
  8908 4B7F 20 FE 2D			jsr GETBYTE
  8909 4B82 AD 2D A0			lda GETBYTE.RESULT
  8910 4B85 09 80			ora #$80
  8911 4B87 8D 01 A1			sta CL
  8912
  8913 				; optimize OK (service.pas), line = 1540
  8914
  8915 4B8A AC FA A0			ldy Y
  8916 4B8D AD F9 A0			lda X
  8917 4B90 18 79 00 C0			add adr.ROW,y
  8918 4B94 8D 24 A0			sta PUTBYTE.DST
  8919 4B97 A9 50			lda #$50
  8920 4B99 79 00 C1			adc adr.ROW+256,y
  8921 4B9C 8D 25 A0			sta PUTBYTE.DST+1
  8922 4B9F A9 00			lda #$00
  8923 4BA1 69 00			adc #$00
  8924 4BA3 8D 26 A0			sta PUTBYTE.DST+2
  8925 4BA6 A9 00			lda #$00
  8926 4BA8 69 00			adc #$00
  8927 4BAA 8D 27 A0			sta PUTBYTE.DST+3
  8928 4BAD AD 01 A1			lda CL
  8929 4BB0 8D 28 A0			sta PUTBYTE.V
  8930 4BB3 20 D6 2D			jsr PUTBYTE
  8931
  8932 				; optimize OK (service.pas), line = 1545
  8933
  8934 4BB6 AD FD 9B			lda PLAYSCREEN.OFS
  8935 4BB9 18 6D F9 A0			add X
  8936 4BBD 85 A0			sta :STACKORIGIN+10
  8937 4BBF AD FE 9B			lda PLAYSCREEN.OFS+1
  8938 4BC2 69 00			adc #$00
  8939 4BC4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  8940 4BC6 AD FF 9B			lda PLAYSCREEN.OFS+2
  8941 4BC9 69 00			adc #$00
  8942 4BCB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  8943 4BCD AD 00 9C			lda PLAYSCREEN.OFS+3
  8944 4BD0 69 00			adc #$00
  8945 4BD2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  8946 4BD4 AC FA A0			ldy Y
  8947 4BD7 A5 A0			lda :STACKORIGIN+10
  8948 4BD9 18 79 00 C0			add adr.ROW,y
  8949 4BDD 8D 24 A0			sta PUTBYTE.DST
  8950 4BE0 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  8951 4BE2 79 00 C1			adc adr.ROW+256,y
  8952 4BE5 8D 25 A0			sta PUTBYTE.DST+1
  8953 4BE8 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  8954 4BEA 69 00			adc #$00
  8955 4BEC 8D 26 A0			sta PUTBYTE.DST+2
  8956 4BEF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  8957 4BF1 69 00			adc #$00
  8958 4BF3 8D 27 A0			sta PUTBYTE.DST+3
  8959 4BF6 AD 01 A1			lda CL
  8960 4BF9 8D 28 A0			sta PUTBYTE.V
  8961 4BFC 20 D6 2D			jsr PUTBYTE
  8962 4BFF			l_12EA
  8963
  8964 				; --- ForToDoEpilog
  8965 4BFF EE F9 A0			inc X
  8966 4C02 F0 03 4C 2C 4B		jne l_12CA
  8967 4C07			l_12D8
  8968
  8969 				; --- ForToDoEpilog
  8970 4C07 EE FA A0			inc Y
  8971 4C0A F0 03 4C 10 4B		jne l_12A9
  8972 4C0F			l_12B7
  8973
  8974 				; ------------------------------------------------------------
  8975
  8976 = A0F7			XA	= DATAORIGIN+$060E
  8977 = A0F8			YA	= DATAORIGIN+$060F
  8978 = A0F9			X	= DATAORIGIN+$0610
  8979 = A0FA			Y	= DATAORIGIN+$0611
  8980 = A0FB			XS	= DATAORIGIN+$0612
  8981 = A0FD			YS	= DATAORIGIN+$0614
  8982 = A0FF			YH	= DATAORIGIN+$0616
  8983 = A101			CL	= DATAORIGIN+$0618
  8984 = A102			SHADOW	= DATAORIGIN+$0619
  8985
  8986 = A0F7			@VarData	= XA
  8987 = 000C			@VarDataSize	= 12
  8988
  8989 4C0F			@exit
  8990 					.ifdef @new
  8991 					lda <@VarData
  8992 					sta :ztmp
  8993 					lda >@VarData
  8994 					ldy #@VarDataSize-1
  8995 					jmp @FreeMem
  8996 					els
  8997 4C0F 60				rts						; ret
  8998 					eif
  8999 				.endl
  9000
  9001 4C10			.local	PLACE_BLOCK					; PROCEDURE
  9002
  9003 				; optimize OK (service.pas), line = 1560
  9004
  9005 4C10 AD 05 A1			lda XA
  9006 4C13 85 9F			sta :STACKORIGIN+9
  9007 4C15 A9 00			lda #$00
  9008 4C17 06 9F			asl :STACKORIGIN+9
  9009 4C19 2A				rol @
  9010 4C1A 06 9F			asl :STACKORIGIN+9
  9011 4C1C 2A				rol @
  9012 4C1D 06 9F			asl :STACKORIGIN+9
  9013 4C1F 2A				rol @
  9014 4C20 06 9F			asl :STACKORIGIN+9
  9015 4C22 2A				rol @
  9016 4C23 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9017 4C25 A5 9F			lda :STACKORIGIN+9
  9018 4C27 18 69 09			add #$09
  9019 4C2A 8D 0A A1			sta XS
  9020 4C2D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9021 4C2F 69 00			adc #$00
  9022 4C31 8D 0B A1			sta XS+1
  9023
  9024 				; optimize OK (service.pas), line = 1561
  9025
  9026 4C34 AD 06 A1			lda YA
  9027 4C37 85 9F			sta :STACKORIGIN+9
  9028 4C39 A9 00			lda #$00
  9029 4C3B 06 9F			asl :STACKORIGIN+9
  9030 4C3D 2A				rol @
  9031 4C3E 06 9F			asl :STACKORIGIN+9
  9032 4C40 2A				rol @
  9033 4C41 06 9F			asl :STACKORIGIN+9
  9034 4C43 2A				rol @
  9035 4C44 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9036 4C46 A5 9F			lda :STACKORIGIN+9
  9037 4C48 18 69 16			add #$16
  9038 4C4B 8D 0C A1			sta YS
  9039 4C4E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9040 4C50 69 00			adc #$00
  9041 4C52 8D 0D A1			sta YS+1
  9042
  9043 				; optimize OK (service.pas), line = 1563
  9044
  9045 4C55 A9 00			lda #$00
  9046 4C57 8D 09 A1			sta Y
  9047
  9048 4C5A			l_135D
  9049 				; --- ForToDoCondition
  9050 4C5A AD 09 A1			lda Y
  9051 4C5D C9 08			cmp #$08
  9052 4C5F 90 03 4C B2 4E		jcs l_136B
  9053
  9054 				; optimize OK (service.pas), line = 1564
  9055
  9056 4C64 A9 00			lda #$00
  9057 4C66 8D 08 A1			sta X
  9058
  9059 4C69			l_1374
  9060 				; --- ForToDoCondition
  9061 4C69 AD 08 A1			lda X
  9062 4C6C C9 10			cmp #$10
  9063 4C6E 90 03 4C AA 4E		jcs l_1382
  9064
  9065 				; optimize OK (service.pas), line = 1569
  9066
  9067 4C73 AD FD 9B			lda PLAYSCREEN.OFS
  9068 4C76 6D 0A A1			adc XS
  9069 4C79 85 9F			sta :STACKORIGIN+9
  9070 4C7B AD FE 9B			lda PLAYSCREEN.OFS+1
  9071 4C7E 6D 0B A1			adc XS+1
  9072 4C81 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9073 4C83 AD FF 9B			lda PLAYSCREEN.OFS+2
  9074 4C86 69 00			adc #$00
  9075 4C88 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9076 4C8A AD 00 9C			lda PLAYSCREEN.OFS+3
  9077 4C8D 69 00			adc #$00
  9078 4C8F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9079 4C91 A5 9F			lda :STACKORIGIN+9
  9080 4C93 18 6D 08 A1			add X
  9081 4C97 85 9F			sta :STACKORIGIN+9
  9082 4C99 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9083 4C9B 69 00			adc #$00
  9084 4C9D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9085 4C9F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9086 4CA1 69 00			adc #$00
  9087 4CA3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9088 4CA5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9089 4CA7 69 00			adc #$00
  9090 4CA9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9091 4CAB AD 0C A1			lda YS
  9092 4CAE 18 6D 09 A1			add Y
  9093 4CB2 A8				tay
  9094 4CB3 A5 9F			lda :STACKORIGIN+9
  9095 4CB5 18 79 00 C0			add adr.ROW,y
  9096 4CB9 8D 29 A0			sta GETBYTE.SRC
  9097 4CBC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9098 4CBE 79 00 C1			adc adr.ROW+256,y
  9099 4CC1 8D 2A A0			sta GETBYTE.SRC+1
  9100 4CC4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9101 4CC6 69 00			adc #$00
  9102 4CC8 8D 2B A0			sta GETBYTE.SRC+2
  9103 4CCB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9104 4CCD 69 00			adc #$00
  9105 4CCF 8D 2C A0			sta GETBYTE.SRC+3
  9106 4CD2 20 FE 2D			jsr GETBYTE
  9107 4CD5 AD 2D A0			lda GETBYTE.RESULT
  9108 4CD8 29 80			and #$80
  9109 4CDA 8D 10 A1			sta SHADOW
  9110
  9111 				; optimize OK (service.pas), line = 1571
  9112
  9113 4CDD AD 09 A1			lda Y
  9114 4CE0 C9 07			cmp #$07
  9115 4CE2 90 03 4C D6 4D		jcs l_13C1
  9116 4CE7 AD 08 A1			lda X
  9117 4CEA C9 0F			cmp #$0F
  9118 4CEC 90 03 4C D6 4D		jcs l_13C1
  9119
  9120 				; optimize OK (service.pas), line = 1576
  9121
  9122 4CF1 AD 07 A1			lda BLOCK
  9123 4CF4 38 E9 01			sub #$01
  9124 4CF7 85 9F			sta :STACKORIGIN+9
  9125 4CF9 A9 00			lda #$00
  9126 4CFB E9 00			sbc #$00
  9127 4CFD A5 9F			lda :STACKORIGIN+9
  9128 4CFF 29 0F			and #$0F
  9129 4D01 A8				tay
  9130 4D02 B9 88 10			lda adr.COLORBLOCK,y
  9131 4D05 29 7F			and #$7F
  9132 4D07 0D 10 A1			ora SHADOW
  9133 4D0A 8D 0E A1			sta CL
  9134
  9135 				; optimize OK (service.pas), line = 1579
  9136
  9137 4D0D AD 0A A1			lda XS
  9138 4D10 85 A0			sta :STACKORIGIN+10
  9139 4D12 A9 50			lda #$50
  9140 4D14 18 6D 0B A1			add XS+1
  9141 4D18 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9142 4D1A A9 00			lda #$00
  9143 4D1C 69 00			adc #$00
  9144 4D1E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9145 4D20 A9 00			lda #$00
  9146 4D22 69 00			adc #$00
  9147 4D24 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9148 4D26 A5 A0			lda :STACKORIGIN+10
  9149 4D28 18 6D 08 A1			add X
  9150 4D2C 85 A0			sta :STACKORIGIN+10
  9151 4D2E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9152 4D30 69 00			adc #$00
  9153 4D32 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9154 4D34 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9155 4D36 69 00			adc #$00
  9156 4D38 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9157 4D3A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9158 4D3C 69 00			adc #$00
  9159 4D3E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9160 4D40 AD 0C A1			lda YS
  9161 4D43 18 6D 09 A1			add Y
  9162 4D47 A8				tay
  9163 4D48 A5 A0			lda :STACKORIGIN+10
  9164 4D4A 18 79 00 C0			add adr.ROW,y
  9165 4D4E 8D 24 A0			sta PUTBYTE.DST
  9166 4D51 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9167 4D53 79 00 C1			adc adr.ROW+256,y
  9168 4D56 8D 25 A0			sta PUTBYTE.DST+1
  9169 4D59 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9170 4D5B 69 00			adc #$00
  9171 4D5D 8D 26 A0			sta PUTBYTE.DST+2
  9172 4D60 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9173 4D62 69 00			adc #$00
  9174 4D64 8D 27 A0			sta PUTBYTE.DST+3
  9175 4D67 AD 0E A1			lda CL
  9176 4D6A 8D 28 A0			sta PUTBYTE.V
  9177 4D6D 20 D6 2D			jsr PUTBYTE
  9178
  9179 				; optimize OK (service.pas), line = 1582
  9180
  9181 4D70 AD FD 9B			lda PLAYSCREEN.OFS
  9182 4D73 18 6D 0A A1			add XS
  9183 4D77 85 A0			sta :STACKORIGIN+10
  9184 4D79 AD FE 9B			lda PLAYSCREEN.OFS+1
  9185 4D7C 6D 0B A1			adc XS+1
  9186 4D7F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9187 4D81 AD FF 9B			lda PLAYSCREEN.OFS+2
  9188 4D84 69 00			adc #$00
  9189 4D86 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9190 4D88 AD 00 9C			lda PLAYSCREEN.OFS+3
  9191 4D8B 69 00			adc #$00
  9192 4D8D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9193 4D8F A5 A0			lda :STACKORIGIN+10
  9194 4D91 18 6D 08 A1			add X
  9195 4D95 85 A0			sta :STACKORIGIN+10
  9196 4D97 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9197 4D99 69 00			adc #$00
  9198 4D9B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9199 4D9D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9200 4D9F 69 00			adc #$00
  9201 4DA1 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9202 4DA3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9203 4DA5 69 00			adc #$00
  9204 4DA7 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9205 4DA9 AD 0C A1			lda YS
  9206 4DAC 18 6D 09 A1			add Y
  9207 4DB0 A8				tay
  9208 4DB1 A5 A0			lda :STACKORIGIN+10
  9209 4DB3 18 79 00 C0			add adr.ROW,y
  9210 4DB7 8D 24 A0			sta PUTBYTE.DST
  9211 4DBA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9212 4DBC 79 00 C1			adc adr.ROW+256,y
  9213 4DBF 8D 25 A0			sta PUTBYTE.DST+1
  9214 4DC2 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9215 4DC4 69 00			adc #$00
  9216 4DC6 8D 26 A0			sta PUTBYTE.DST+2
  9217 4DC9 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9218 4DCB 69 00			adc #$00
  9219 4DCD 8D 27 A0			sta PUTBYTE.DST+3
  9220 4DD0 AD 0E A1			lda CL
  9221 4DD3 4C 9C 4E			jmp l_1420
  9222 4DD6			l_13C1
  9223
  9224 				; optimize OK (service.pas), line = 1590
  9225
  9226 4DD6 AD 0A A1			lda XS
  9227 4DD9 85 A0			sta :STACKORIGIN+10
  9228 4DDB A9 50			lda #$50
  9229 4DDD 18 6D 0B A1			add XS+1
  9230 4DE1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9231 4DE3 A9 00			lda #$00
  9232 4DE5 69 00			adc #$00
  9233 4DE7 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9234 4DE9 A9 00			lda #$00
  9235 4DEB 69 00			adc #$00
  9236 4DED 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9237 4DEF A5 A0			lda :STACKORIGIN+10
  9238 4DF1 18 6D 08 A1			add X
  9239 4DF5 85 A0			sta :STACKORIGIN+10
  9240 4DF7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9241 4DF9 69 00			adc #$00
  9242 4DFB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9243 4DFD A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9244 4DFF 69 00			adc #$00
  9245 4E01 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9246 4E03 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9247 4E05 69 00			adc #$00
  9248 4E07 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9249 4E09 AD 0C A1			lda YS
  9250 4E0C 18 6D 09 A1			add Y
  9251 4E10 A8				tay
  9252 4E11 A5 A0			lda :STACKORIGIN+10
  9253 4E13 18 79 00 C0			add adr.ROW,y
  9254 4E17 8D 24 A0			sta PUTBYTE.DST
  9255 4E1A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9256 4E1C 79 00 C1			adc adr.ROW+256,y
  9257 4E1F 8D 25 A0			sta PUTBYTE.DST+1
  9258 4E22 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9259 4E24 69 00			adc #$00
  9260 4E26 8D 26 A0			sta PUTBYTE.DST+2
  9261 4E29 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9262 4E2B 69 00			adc #$00
  9263 4E2D 8D 27 A0			sta PUTBYTE.DST+3
  9264 4E30 AD 10 A1			lda SHADOW
  9265 4E33 8D 28 A0			sta PUTBYTE.V
  9266 4E36 20 D6 2D			jsr PUTBYTE
  9267
  9268 				; optimize OK (service.pas), line = 1593
  9269
  9270 4E39 AD FD 9B			lda PLAYSCREEN.OFS
  9271 4E3C 18 6D 0A A1			add XS
  9272 4E40 85 A0			sta :STACKORIGIN+10
  9273 4E42 AD FE 9B			lda PLAYSCREEN.OFS+1
  9274 4E45 6D 0B A1			adc XS+1
  9275 4E48 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9276 4E4A AD FF 9B			lda PLAYSCREEN.OFS+2
  9277 4E4D 69 00			adc #$00
  9278 4E4F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9279 4E51 AD 00 9C			lda PLAYSCREEN.OFS+3
  9280 4E54 69 00			adc #$00
  9281 4E56 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9282 4E58 A5 A0			lda :STACKORIGIN+10
  9283 4E5A 18 6D 08 A1			add X
  9284 4E5E 85 A0			sta :STACKORIGIN+10
  9285 4E60 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9286 4E62 69 00			adc #$00
  9287 4E64 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9288 4E66 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9289 4E68 69 00			adc #$00
  9290 4E6A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9291 4E6C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9292 4E6E 69 00			adc #$00
  9293 4E70 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9294 4E72 AD 0C A1			lda YS
  9295 4E75 18 6D 09 A1			add Y
  9296 4E79 A8				tay
  9297 4E7A A5 A0			lda :STACKORIGIN+10
  9298 4E7C 18 79 00 C0			add adr.ROW,y
  9299 4E80 8D 24 A0			sta PUTBYTE.DST
  9300 4E83 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9301 4E85 79 00 C1			adc adr.ROW+256,y
  9302 4E88 8D 25 A0			sta PUTBYTE.DST+1
  9303 4E8B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9304 4E8D 69 00			adc #$00
  9305 4E8F 8D 26 A0			sta PUTBYTE.DST+2
  9306 4E92 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9307 4E94 69 00			adc #$00
  9308 4E96 8D 27 A0			sta PUTBYTE.DST+3
  9309 4E99 AD 10 A1			lda SHADOW
  9310 4E9C			l_1420
  9311 4E9C 8D 28 A0			sta PUTBYTE.V
  9312 4E9F 20 D6 2D			jsr PUTBYTE
  9313
  9314 				; --- ForToDoEpilog
  9315 4EA2 EE 08 A1			inc X
  9316 4EA5 F0 03 4C 69 4C		jne l_1374
  9317 4EAA			l_1382
  9318
  9319 				; --- ForToDoEpilog
  9320 4EAA EE 09 A1			inc Y
  9321 4EAD F0 03 4C 5A 4C		jne l_135D
  9322 4EB2			l_136B
  9323
  9324 				; optimize OK (service.pas), line = 1598
  9325
  9326 4EB2 AD 0C A1			lda YS
  9327 4EB5 18 69 04			add #$04
  9328 4EB8 8D 09 A1			sta Y
  9329 4EBB AD 0C A1			lda YS
  9330 4EBE 18 69 0C			add #$0C
  9331 4EC1 8D C5 4E			sta @FORTMP_1474_0
  9332
  9333 4EC4			l_1477
  9334 				; --- ForToDoCondition
  9335 4EC4 A9 00			lda @FORTMP_1474_0::#$00
  9336 4EC6 CD 09 A1			cmp Y
  9337 4EC9 B0 03 4C C3 4F		jcc l_1485
  9338
  9339 				; optimize OK (service.pas), line = 1599
  9340
  9341 4ECE AD 0A A1			lda XS
  9342 4ED1 18 69 08			add #$08
  9343 4ED4 8D 08 A1			sta X
  9344 4ED7 AD 0A A1			lda XS
  9345 4EDA 18 69 18			add #$18
  9346 4EDD 8D E1 4E			sta @FORTMP_1495_0
  9347
  9348 4EE0			l_1498
  9349 				; --- ForToDoCondition
  9350 4EE0 A9 00			lda @FORTMP_1495_0::#$00
  9351 4EE2 CD 08 A1			cmp X
  9352 4EE5 B0 03 4C BB 4F		jcc l_14A6
  9353
  9354 				; optimize OK (service.pas), line = 1600
  9355
  9356 4EEA AD 08 A1			lda X
  9357 4EED C9 D8			cmp #$D8
  9358 4EEF 90 03 4C B3 4F		jcs l_14B8
  9359
  9360 				; optimize OK (service.pas), line = 1607
  9361
  9362 4EF4 AD FD 9B			lda PLAYSCREEN.OFS
  9363 4EF7 6D 08 A1			adc X
  9364 4EFA 85 9F			sta :STACKORIGIN+9
  9365 4EFC AD FE 9B			lda PLAYSCREEN.OFS+1
  9366 4EFF 69 00			adc #$00
  9367 4F01 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9368 4F03 AD FF 9B			lda PLAYSCREEN.OFS+2
  9369 4F06 69 00			adc #$00
  9370 4F08 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9371 4F0A AD 00 9C			lda PLAYSCREEN.OFS+3
  9372 4F0D 69 00			adc #$00
  9373 4F0F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9374 4F11 AC 09 A1			ldy Y
  9375 4F14 A5 9F			lda :STACKORIGIN+9
  9376 4F16 18 79 00 C0			add adr.ROW,y
  9377 4F1A 8D 29 A0			sta GETBYTE.SRC
  9378 4F1D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9379 4F1F 79 00 C1			adc adr.ROW+256,y
  9380 4F22 8D 2A A0			sta GETBYTE.SRC+1
  9381 4F25 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9382 4F27 69 00			adc #$00
  9383 4F29 8D 2B A0			sta GETBYTE.SRC+2
  9384 4F2C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9385 4F2E 69 00			adc #$00
  9386 4F30 8D 2C A0			sta GETBYTE.SRC+3
  9387 4F33 20 FE 2D			jsr GETBYTE
  9388 4F36 AD 2D A0			lda GETBYTE.RESULT
  9389 4F39 29 7F			and #$7F
  9390 4F3B 8D 0E A1			sta CL
  9391
  9392 				; optimize OK (service.pas), line = 1611
  9393
  9394 4F3E AC 09 A1			ldy Y
  9395 4F41 AD 08 A1			lda X
  9396 4F44 18 79 00 C0			add adr.ROW,y
  9397 4F48 8D 24 A0			sta PUTBYTE.DST
  9398 4F4B A9 50			lda #$50
  9399 4F4D 79 00 C1			adc adr.ROW+256,y
  9400 4F50 8D 25 A0			sta PUTBYTE.DST+1
  9401 4F53 A9 00			lda #$00
  9402 4F55 69 00			adc #$00
  9403 4F57 8D 26 A0			sta PUTBYTE.DST+2
  9404 4F5A A9 00			lda #$00
  9405 4F5C 69 00			adc #$00
  9406 4F5E 8D 27 A0			sta PUTBYTE.DST+3
  9407 4F61 AD 0E A1			lda CL
  9408 4F64 8D 28 A0			sta PUTBYTE.V
  9409 4F67 20 D6 2D			jsr PUTBYTE
  9410
  9411 				; optimize OK (service.pas), line = 1615
  9412
  9413 4F6A AD FD 9B			lda PLAYSCREEN.OFS
  9414 4F6D 18 6D 08 A1			add X
  9415 4F71 85 A0			sta :STACKORIGIN+10
  9416 4F73 AD FE 9B			lda PLAYSCREEN.OFS+1
  9417 4F76 69 00			adc #$00
  9418 4F78 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9419 4F7A AD FF 9B			lda PLAYSCREEN.OFS+2
  9420 4F7D 69 00			adc #$00
  9421 4F7F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9422 4F81 AD 00 9C			lda PLAYSCREEN.OFS+3
  9423 4F84 69 00			adc #$00
  9424 4F86 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9425 4F88 AC 09 A1			ldy Y
  9426 4F8B A5 A0			lda :STACKORIGIN+10
  9427 4F8D 18 79 00 C0			add adr.ROW,y
  9428 4F91 8D 24 A0			sta PUTBYTE.DST
  9429 4F94 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9430 4F96 79 00 C1			adc adr.ROW+256,y
  9431 4F99 8D 25 A0			sta PUTBYTE.DST+1
  9432 4F9C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9433 4F9E 69 00			adc #$00
  9434 4FA0 8D 26 A0			sta PUTBYTE.DST+2
  9435 4FA3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9436 4FA5 69 00			adc #$00
  9437 4FA7 8D 27 A0			sta PUTBYTE.DST+3
  9438 4FAA AD 0E A1			lda CL
  9439 4FAD 8D 28 A0			sta PUTBYTE.V
  9440 4FB0 20 D6 2D			jsr PUTBYTE
  9441 4FB3			l_14B8
  9442
  9443 				; --- ForToDoEpilog
  9444 4FB3 EE 08 A1			inc X
  9445 4FB6 F0 03 4C E0 4E		jne l_1498
  9446 4FBB			l_14A6
  9447
  9448 				; --- ForToDoEpilog
  9449 4FBB EE 09 A1			inc Y
  9450 4FBE F0 03 4C C4 4E		jne l_1477
  9451 4FC3			l_1485
  9452
  9453 				; optimize OK (service.pas), line = 1618
  9454
  9455 4FC3 AD 07 A1			lda BLOCK
  9456 4FC6 C9 09			cmp #$09
  9457 4FC8 B0 03 4C 53 52		jcc l_1514
  9458
  9459 				; optimize OK (service.pas), line = 1620
  9460
  9461 4FCD A9 00			lda #$00
  9462 4FCF 8D 0F A1			sta CL2
  9463
  9464 				; optimize OK (service.pas), line = 1621
  9465
  9466 4FD2 AD 07 A1			lda BLOCK
  9467 4FD5 29 0F			and #$0F
  9468 4FD7 C9 09			cmp #$09
  9469 4FD9 D0 19			jne l_152F
  9470
  9471 				; optimize OK (service.pas), line = 1623
  9472
  9473 4FDB A9 CA			lda #$CA
  9474 4FDD 8D 0F A1			sta CL2
  9475
  9476 				; optimize OK (service.pas), line = 1624
  9477
  9478 4FE0 AD 06 A1			lda YA
  9479 4FE3 0A				asl @
  9480 4FE4 0A				asl @
  9481 4FE5 0A				asl @
  9482 4FE6 0A				asl @
  9483 4FE7 18 6D 05 A1			add XA
  9484 4FEB A8				tay
  9485 4FEC A9 19			lda #$19
  9486 4FEE 99 00 DB			sta adr.WALL,y
  9487 4FF1 4C 00 50			jmp l_154E
  9488 4FF4			l_152F
  9489
  9490 				; optimize OK (service.pas), line = 1630
  9491
  9492 4FF4 AD 07 A1			lda BLOCK
  9493 4FF7 C9 0A			cmp #$0A
  9494 4FF9 D0 05			jne l_1560
  9495 4FFB A9 C9			lda #$C9
  9496 4FFD 8D 0F A1			sta CL2
  9497 5000			l_154E
  9498 5000			l_1560
  9499
  9500 				; optimize OK (service.pas), line = 1634
  9501
  9502 5000 A9 00			lda #$00
  9503 5002 8D 09 A1			sta Y
  9504
  9505 5005			l_1570
  9506 				; --- ForToDoCondition
  9507 5005 AD 09 A1			lda Y
  9508 5008 C9 07			cmp #$07
  9509 500A 90 03 4C 0A 51		jcs l_157E
  9510
  9511 				; optimize OK (service.pas), line = 1640
  9512
  9513 500F AD FD 9B			lda PLAYSCREEN.OFS
  9514 5012 6D 0A A1			adc XS
  9515 5015 85 9F			sta :STACKORIGIN+9
  9516 5017 AD FE 9B			lda PLAYSCREEN.OFS+1
  9517 501A 6D 0B A1			adc XS+1
  9518 501D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9519 501F AD FF 9B			lda PLAYSCREEN.OFS+2
  9520 5022 69 00			adc #$00
  9521 5024 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9522 5026 AD 00 9C			lda PLAYSCREEN.OFS+3
  9523 5029 69 00			adc #$00
  9524 502B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9525 502D AD 09 A1			lda Y
  9526 5030 18 6D 0C A1			add YS
  9527 5034 A8				tay
  9528 5035 A5 9F			lda :STACKORIGIN+9
  9529 5037 18 79 00 C0			add adr.ROW,y
  9530 503B 8D 29 A0			sta GETBYTE.SRC
  9531 503E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9532 5040 79 00 C1			adc adr.ROW+256,y
  9533 5043 8D 2A A0			sta GETBYTE.SRC+1
  9534 5046 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9535 5048 69 00			adc #$00
  9536 504A 8D 2B A0			sta GETBYTE.SRC+2
  9537 504D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9538 504F 69 00			adc #$00
  9539 5051 8D 2C A0			sta GETBYTE.SRC+3
  9540 5054 20 FE 2D			jsr GETBYTE
  9541 5057 AD 2D A0			lda GETBYTE.RESULT
  9542 505A 29 80			and #$80
  9543 505C 8D 0E A1			sta CL
  9544
  9545 				; optimize OK (service.pas), line = 1642
  9546
  9547 505F AD 0F A1			lda CL2
  9548 5062 29 7F			and #$7F
  9549 5064 0D 0E A1			ora CL
  9550 5067 8D 0F A1			sta CL2
  9551
  9552 				; optimize OK (service.pas), line = 1646
  9553
  9554 506A AD 0A A1			lda XS
  9555 506D 85 A0			sta :STACKORIGIN+10
  9556 506F A9 50			lda #$50
  9557 5071 18 6D 0B A1			add XS+1
  9558 5075 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9559 5077 A9 00			lda #$00
  9560 5079 69 00			adc #$00
  9561 507B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9562 507D A9 00			lda #$00
  9563 507F 69 00			adc #$00
  9564 5081 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9565 5083 AD 0C A1			lda YS
  9566 5086 18 6D 09 A1			add Y
  9567 508A A8				tay
  9568 508B A5 A0			lda :STACKORIGIN+10
  9569 508D 18 79 00 C0			add adr.ROW,y
  9570 5091 8D 24 A0			sta PUTBYTE.DST
  9571 5094 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9572 5096 79 00 C1			adc adr.ROW+256,y
  9573 5099 8D 25 A0			sta PUTBYTE.DST+1
  9574 509C A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9575 509E 69 00			adc #$00
  9576 50A0 8D 26 A0			sta PUTBYTE.DST+2
  9577 50A3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9578 50A5 69 00			adc #$00
  9579 50A7 8D 27 A0			sta PUTBYTE.DST+3
  9580 50AA AD 0F A1			lda CL2
  9581 50AD 8D 28 A0			sta PUTBYTE.V
  9582 50B0 20 D6 2D			jsr PUTBYTE
  9583
  9584 				; optimize OK (service.pas), line = 1650
  9585
  9586 50B3 AD FD 9B			lda PLAYSCREEN.OFS
  9587 50B6 18 6D 0A A1			add XS
  9588 50BA 85 A0			sta :STACKORIGIN+10
  9589 50BC AD FE 9B			lda PLAYSCREEN.OFS+1
  9590 50BF 6D 0B A1			adc XS+1
  9591 50C2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9592 50C4 AD FF 9B			lda PLAYSCREEN.OFS+2
  9593 50C7 69 00			adc #$00
  9594 50C9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9595 50CB AD 00 9C			lda PLAYSCREEN.OFS+3
  9596 50CE 69 00			adc #$00
  9597 50D0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9598 50D2 AD 0C A1			lda YS
  9599 50D5 18 6D 09 A1			add Y
  9600 50D9 A8				tay
  9601 50DA A5 A0			lda :STACKORIGIN+10
  9602 50DC 18 79 00 C0			add adr.ROW,y
  9603 50E0 8D 24 A0			sta PUTBYTE.DST
  9604 50E3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9605 50E5 79 00 C1			adc adr.ROW+256,y
  9606 50E8 8D 25 A0			sta PUTBYTE.DST+1
  9607 50EB A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9608 50ED 69 00			adc #$00
  9609 50EF 8D 26 A0			sta PUTBYTE.DST+2
  9610 50F2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9611 50F4 69 00			adc #$00
  9612 50F6 8D 27 A0			sta PUTBYTE.DST+3
  9613 50F9 AD 0F A1			lda CL2
  9614 50FC 8D 28 A0			sta PUTBYTE.V
  9615 50FF 20 D6 2D			jsr PUTBYTE
  9616
  9617 				; --- ForToDoEpilog
  9618 5102 EE 09 A1			inc Y
  9619 5105 F0 03 4C 05 50		jne l_1570
  9620 510A			l_157E
  9621
  9622 				; optimize OK (service.pas), line = 1654
  9623
  9624 510A A9 00			lda #$00
  9625 510C 8D 08 A1			sta X
  9626
  9627 510F			l_15E5
  9628 				; --- ForToDoCondition
  9629 510F AD 08 A1			lda X
  9630 5112 C9 0F			cmp #$0F
  9631 5114 90 03 4C 53 52		jcs l_15F3
  9632
  9633 				; optimize OK (service.pas), line = 1658
  9634
  9635 5119 AD FD 9B			lda PLAYSCREEN.OFS
  9636 511C 6D 0A A1			adc XS
  9637 511F 85 9F			sta :STACKORIGIN+9
  9638 5121 AD FE 9B			lda PLAYSCREEN.OFS+1
  9639 5124 6D 0B A1			adc XS+1
  9640 5127 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9641 5129 AD FF 9B			lda PLAYSCREEN.OFS+2
  9642 512C 69 00			adc #$00
  9643 512E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9644 5130 AD 00 9C			lda PLAYSCREEN.OFS+3
  9645 5133 69 00			adc #$00
  9646 5135 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9647 5137 A5 9F			lda :STACKORIGIN+9
  9648 5139 18 6D 08 A1			add X
  9649 513D 85 9F			sta :STACKORIGIN+9
  9650 513F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9651 5141 69 00			adc #$00
  9652 5143 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9653 5145 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9654 5147 69 00			adc #$00
  9655 5149 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9656 514B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9657 514D 69 00			adc #$00
  9658 514F 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9659 5151 AC 0C A1			ldy YS
  9660 5154 A5 9F			lda :STACKORIGIN+9
  9661 5156 18 79 00 C0			add adr.ROW,y
  9662 515A 8D 29 A0			sta GETBYTE.SRC
  9663 515D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9664 515F 79 00 C1			adc adr.ROW+256,y
  9665 5162 8D 2A A0			sta GETBYTE.SRC+1
  9666 5165 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9667 5167 69 00			adc #$00
  9668 5169 8D 2B A0			sta GETBYTE.SRC+2
  9669 516C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9670 516E 69 00			adc #$00
  9671 5170 8D 2C A0			sta GETBYTE.SRC+3
  9672 5173 20 FE 2D			jsr GETBYTE
  9673 5176 AD 2D A0			lda GETBYTE.RESULT
  9674 5179 29 80			and #$80
  9675 517B 8D 0E A1			sta CL
  9676
  9677 				; optimize OK (service.pas), line = 1660
  9678
  9679 517E AD 0F A1			lda CL2
  9680 5181 29 7F			and #$7F
  9681 5183 0D 0E A1			ora CL
  9682 5186 8D 0F A1			sta CL2
  9683
  9684 				; optimize OK (service.pas), line = 1663
  9685
  9686 5189 AD 0A A1			lda XS
  9687 518C 85 A0			sta :STACKORIGIN+10
  9688 518E A9 50			lda #$50
  9689 5190 18 6D 0B A1			add XS+1
  9690 5194 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9691 5196 A9 00			lda #$00
  9692 5198 69 00			adc #$00
  9693 519A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9694 519C A9 00			lda #$00
  9695 519E 69 00			adc #$00
  9696 51A0 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9697 51A2 A5 A0			lda :STACKORIGIN+10
  9698 51A4 18 6D 08 A1			add X
  9699 51A8 85 A0			sta :STACKORIGIN+10
  9700 51AA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9701 51AC 69 00			adc #$00
  9702 51AE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9703 51B0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9704 51B2 69 00			adc #$00
  9705 51B4 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9706 51B6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9707 51B8 69 00			adc #$00
  9708 51BA 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9709 51BC AC 0C A1			ldy YS
  9710 51BF A5 A0			lda :STACKORIGIN+10
  9711 51C1 18 79 00 C0			add adr.ROW,y
  9712 51C5 8D 24 A0			sta PUTBYTE.DST
  9713 51C8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9714 51CA 79 00 C1			adc adr.ROW+256,y
  9715 51CD 8D 25 A0			sta PUTBYTE.DST+1
  9716 51D0 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9717 51D2 69 00			adc #$00
  9718 51D4 8D 26 A0			sta PUTBYTE.DST+2
  9719 51D7 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9720 51D9 69 00			adc #$00
  9721 51DB 8D 27 A0			sta PUTBYTE.DST+3
  9722 51DE AD 0F A1			lda CL2
  9723 51E1 8D 28 A0			sta PUTBYTE.V
  9724 51E4 20 D6 2D			jsr PUTBYTE
  9725
  9726 				; optimize OK (service.pas), line = 1666
  9727
  9728 51E7 AD FD 9B			lda PLAYSCREEN.OFS
  9729 51EA 18 6D 0A A1			add XS
  9730 51EE 85 A0			sta :STACKORIGIN+10
  9731 51F0 AD FE 9B			lda PLAYSCREEN.OFS+1
  9732 51F3 6D 0B A1			adc XS+1
  9733 51F6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9734 51F8 AD FF 9B			lda PLAYSCREEN.OFS+2
  9735 51FB 69 00			adc #$00
  9736 51FD 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9737 51FF AD 00 9C			lda PLAYSCREEN.OFS+3
  9738 5202 69 00			adc #$00
  9739 5204 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9740 5206 A5 A0			lda :STACKORIGIN+10
  9741 5208 18 6D 08 A1			add X
  9742 520C 85 A0			sta :STACKORIGIN+10
  9743 520E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9744 5210 69 00			adc #$00
  9745 5212 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9746 5214 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9747 5216 69 00			adc #$00
  9748 5218 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  9749 521A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9750 521C 69 00			adc #$00
  9751 521E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  9752 5220 AC 0C A1			ldy YS
  9753 5223 A5 A0			lda :STACKORIGIN+10
  9754 5225 18 79 00 C0			add adr.ROW,y
  9755 5229 8D 24 A0			sta PUTBYTE.DST
  9756 522C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9757 522E 79 00 C1			adc adr.ROW+256,y
  9758 5231 8D 25 A0			sta PUTBYTE.DST+1
  9759 5234 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  9760 5236 69 00			adc #$00
  9761 5238 8D 26 A0			sta PUTBYTE.DST+2
  9762 523B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  9763 523D 69 00			adc #$00
  9764 523F 8D 27 A0			sta PUTBYTE.DST+3
  9765 5242 AD 0F A1			lda CL2
  9766 5245 8D 28 A0			sta PUTBYTE.V
  9767 5248 20 D6 2D			jsr PUTBYTE
  9768
  9769 				; --- ForToDoEpilog
  9770 524B EE 08 A1			inc X
  9771 524E F0 03 4C 0F 51		jne l_15E5
  9772 5253			l_15F3
  9773 5253			l_1514
  9774
  9775 				; ------------------------------------------------------------
  9776
  9777 = A105			XA	= DATAORIGIN+$061C
  9778 = A106			YA	= DATAORIGIN+$061D
  9779 = A107			BLOCK	= DATAORIGIN+$061E
  9780 = A108			X	= DATAORIGIN+$061F
  9781 = A109			Y	= DATAORIGIN+$0620
  9782 = A10A			XS	= DATAORIGIN+$0621
  9783 = A10C			YS	= DATAORIGIN+$0623
  9784 = A10E			CL	= DATAORIGIN+$0625
  9785 = A10F			CL2	= DATAORIGIN+$0626
  9786 = A110			SHADOW	= DATAORIGIN+$0627
  9787
  9788 = A105			@VarData	= XA
  9789 = 000C			@VarDataSize	= 12
  9790
  9791 5253			@exit
  9792 					.ifdef @new
  9793 					lda <@VarData
  9794 					sta :ztmp
  9795 					lda >@VarData
  9796 					ldy #@VarDataSize-1
  9797 					jmp @FreeMem
  9798 					els
  9799 5253 60				rts						; ret
  9800 					eif
  9801 				.endl
  9802
  9803 5254			.local	PUT_WALL					; PROCEDURE
  9804
  9805 				; optimize OK (service.pas), line = 1676
  9806
  9807 5254 A9 00			lda #$00
  9808 5256 8D 14 A1			sta Y
  9809
  9810 5259			l_1660
  9811 				; --- ForToDoCondition
  9812 5259 AD 14 A1			lda Y
  9813 525C C9 0F			cmp #$0F
  9814 525E B0 48			jcs l_166E
  9815
  9816 				; optimize OK (service.pas), line = 1677
  9817
  9818 5260 A9 00			lda #$00
  9819 5262 8D 13 A1			sta X
  9820
  9821 5265			l_1677
  9822 				; --- ForToDoCondition
  9823 5265 AD 13 A1			lda X
  9824 5268 C9 0D			cmp #$0D
  9825 526A B0 37			jcs l_1685
  9826
  9827 				; optimize OK (service.pas), line = 1678
  9828
  9829 526C AD 14 A1			lda Y
  9830 526F 0A				asl @
  9831 5270 0A				asl @
  9832 5271 0A				asl @
  9833 5272 0A				asl @
  9834 5273 18 6D 13 A1			add X
  9835 5277 A8				tay
  9836 5278 B9 00 DB			lda adr.WALL,y
  9837 527B F0 21			jeq l_16A4
  9838 527D AD 14 A1			lda Y
  9839 5280 0A				asl @
  9840 5281 0A				asl @
  9841 5282 0A				asl @
  9842 5283 0A				asl @
  9843 5284 18 6D 13 A1			add X
  9844 5288 A8				tay
  9845 5289 B9 00 DB			lda adr.WALL,y
  9846 528C 8D 07 A1			sta PLACE_BLOCK.BLOCK
  9847 528F AD 13 A1			lda X
  9848 5292 8D 05 A1			sta PLACE_BLOCK.XA
  9849 5295 AD 14 A1			lda Y
  9850 5298 8D 06 A1			sta PLACE_BLOCK.YA
  9851 529B 20 10 4C			jsr PLACE_BLOCK
  9852 529E			l_16A4
  9853
  9854 				; --- ForToDoEpilog
  9855 529E EE 13 A1			inc X
  9856 52A1 D0 C2			jne l_1677
  9857 52A3			l_1685
  9858
  9859 				; --- ForToDoEpilog
  9860 52A3 EE 14 A1			inc Y
  9861 52A6 D0 B1			jne l_1660
  9862 52A8			l_166E
  9863
  9864 				; ------------------------------------------------------------
  9865
  9866 = A113			X	= DATAORIGIN+$062A
  9867 = A114			Y	= DATAORIGIN+$062B
  9868
  9869 = A113			@VarData	= X
  9870 = 0002			@VarDataSize	= 2
  9871
  9872 52A8			@exit
  9873 					.ifdef @new
  9874 					lda <@VarData
  9875 					sta :ztmp
  9876 					lda >@VarData
  9877 					ldy #@VarDataSize-1
  9878 					jmp @FreeMem
  9879 					els
  9880 52A8 60				rts						; ret
  9881 					eif
  9882 				.endl
  9883
  9884 52A9			.local	SET_WALL					; PROCEDURE
  9885
  9886 				; optimize OK (service.pas), line = 1687
  9887
  9888 52A9 A9 00			lda #$00
  9889 52AB 8D B0 9C			sta REMAIN_BLK
  9890
  9891 				; optimize OK (service.pas), line = 1688
  9892
  9893 52AE AC CD 9C			ldy CUR_PLAYER
  9894 52B1 B9 BE 9C			lda adr.SCORE.WALL_N,y
  9895 52B4 8D 17 A1			sta WL
  9896
  9897 				; optimize OK (service.pas), line = 1691
  9898
  9899 52B7 A9 00			lda #$00
  9900 52B9 8D 16 A1			sta Y
  9901
  9902 52BC			l_16E2
  9903 				; --- ForToDoCondition
  9904 52BC AD 16 A1			lda Y
  9905 52BF C9 0F			cmp #$0F
  9906 52C1 B0 3D			jcs l_16F0
  9907
  9908 				; optimize OK (service.pas), line = 1692
  9909
  9910 52C3 A9 00			lda #$00
  9911 52C5 8D 15 A1			sta X
  9912
  9913 52C8			l_16F9
  9914 				; --- ForToDoCondition
  9915 52C8 AD 15 A1			lda X
  9916 52CB C9 0D			cmp #$0D
  9917 52CD B0 2C			jcs l_1707
  9918
  9919 				; optimize OK (service.pas), line = 1695
  9920
  9921 52CF AD 16 A1			lda Y
  9922 52D2 0A				asl @
  9923 52D3 0A				asl @
  9924 52D4 0A				asl @
  9925 52D5 0A				asl @
  9926 52D6 18 6D 15 A1			add X
  9927 52DA A8				tay
  9928 52DB B9 00 DB			lda adr.WALL,y
  9929 52DE F0 16			jeq l_173F
  9930 52E0 AD 16 A1			lda Y
  9931 52E3 0A				asl @
  9932 52E4 0A				asl @
  9933 52E5 0A				asl @
  9934 52E6 0A				asl @
  9935 52E7 18 6D 15 A1			add X
  9936 52EB A8				tay
  9937 52EC B9 00 DB			lda adr.WALL,y
  9938 52EF C9 0A			cmp #$0A
  9939 52F1 F0 03			jeq l_173F
  9940 52F3 EE B0 9C			inc REMAIN_BLK
  9941 52F6			l_173F
  9942
  9943 				; --- ForToDoEpilog
  9944 52F6 EE 15 A1			inc X
  9945 52F9 D0 CD			jne l_16F9
  9946 52FB			l_1707
  9947
  9948 				; --- ForToDoEpilog
  9949 52FB EE 16 A1			inc Y
  9950 52FE D0 BC			jne l_16E2
  9951 5300			l_16F0
  9952
  9953 				; optimize OK (service.pas), line = 1697
  9954
  9955 5300 AD 17 A1			lda WL
  9956 5303 38 E9 01			sub #$01
  9957 5306 85 86			sta @SMALLINT.MOD.A
  9958 5308 A9 00			lda #$00
  9959 530A E9 00			sbc #$00
  9960 530C 85 87			sta @SMALLINT.MOD.A+1
  9961 530E A9 04			lda #$04
  9962 5310 85 8E			sta @SMALLINT.MOD.B
  9963 5312 A9 00			lda #$00
  9964 5314 85 8F			sta @SMALLINT.MOD.B+1
  9965 5316 20 57 12			jsr @SMALLINT.MOD
  9966 5319 A5 92			lda @SMALLINT.MOD.RESULT
  9967 531B 8D 17 A1			sta WL
  9968
  9969 				; optimize OK (service.pas), line = 1699
  9970
  9971 531E 8D 18 A1			sta @CASETMP_0008
  9972 5321 C9 00			cmp #$00
  9973 5323 D0 33			jne l_1769
  9974 				@
  9975
  9976 				; optimize OK (service.pas), line = 1700
  9977
  9978 5325 AD 86 9C 8D 7E 9C + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9979 5355 4C 31 54			jmp a_0008
  9980 5358			l_1769
  9981 5358 C9 01			cmp #$01
  9982 535A D0 33			jne l_1772
  9983
  9984 				; optimize OK (service.pas), line = 1701
  9985
  9986 535C AD 8E 9C 8D 7E 9C + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9987 538C 4C 31 54			jmp a_0008
  9988 538F			l_1772
  9989 538F C9 02			cmp #$02
  9990 5391 D0 33			jne l_177B
  9991
  9992 				; optimize OK (service.pas), line = 1702
  9993
  9994 5393 AD 96 9C 8D 7E 9C + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9995 53C3 4C 31 54			jmp a_0008
  9996 53C6			l_177B
  9997 53C6 C9 03			cmp #$03
  9998 53C8 D0 33			jne l_1784
  9999
 10000 				; optimize OK (service.pas), line = 1703
 10001
 10002 53CA AD 9E 9C 8D 7E 9C + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
 10003 53FA 4C 31 54			jmp a_0008
 10004 53FD			l_1784
 10005 53FD C9 04			cmp #$04
 10006 53FF D0 30			jne l_178D
 10007
 10008 				; optimize OK (service.pas), line = 1704
 10009
 10010 5401 AD A6 9C 8D 7E 9C + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
 10011 5431			l_178D
 10012 5431			a_0008
 10013
 10014 				; ------------------------------------------------------------
 10015
 10016 = A115			X	= DATAORIGIN+$062C
 10017 = A116			Y	= DATAORIGIN+$062D
 10018 = A117			WL	= DATAORIGIN+$062E
 10019 = A118			@CASETMP_0008	= DATAORIGIN+$062F
 10020
 10021 = A115			@VarData	= X
 10022 = 0004			@VarDataSize	= 4
 10023
 10024 5431			@exit
 10025 					.ifdef @new
 10026 					lda <@VarData
 10027 					sta :ztmp
 10028 					lda >@VarData
 10029 					ldy #@VarDataSize-1
 10030 					jmp @FreeMem
 10031 					els
 10032 5431 60				rts						; ret
 10033 					eif
 10034 				.endl
 10035
 10036 5432			.local	SPLIT_LINE					; FUNCTION
 10037
 10038 				; optimize OK (service.pas), line = 1743
 10039
 10040 5432 AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10041 543C A0 00			ldy #$00
 10042 543E B1 84			lda (:bp2),y
 10043 5440 18 69 10			add #$10
 10044 5443 91 84			sta (:bp2),y
 10045 5445 C8				iny
 10046 5446 B1 84			lda (:bp2),y
 10047 5448 69 00			adc #$00
 10048 544A 91 84			sta (:bp2),y
 10049
 10050 				; optimize OK (service.pas), line = 1744
 10051
 10052 544C AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10053 5456 A0 00			ldy #$00
 10054 5458 B1 84			lda (:bp2),y
 10055 545A 18 69 18			add #$18
 10056 545D 91 84			sta (:bp2),y
 10057 545F C8				iny
 10058 5460 B1 84			lda (:bp2),y
 10059 5462 69 00			adc #$00
 10060 5464 91 84			sta (:bp2),y
 10061
 10062 				; optimize OK (service.pas), line = 1745
 10063
 10064 5466 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10065 5470 A0 00			ldy #$00
 10066 5472 B1 84			lda (:bp2),y
 10067 5474 18 69 10			add #$10
 10068 5477 91 84			sta (:bp2),y
 10069 5479 C8				iny
 10070 547A B1 84			lda (:bp2),y
 10071 547C 69 00			adc #$00
 10072 547E 91 84			sta (:bp2),y
 10073
 10074 				; optimize OK (service.pas), line = 1746
 10075
 10076 5480 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10077 548A A0 00			ldy #$00
 10078 548C B1 84			lda (:bp2),y
 10079 548E 18 69 18			add #$18
 10080 5491 91 84			sta (:bp2),y
 10081 5493 C8				iny
 10082 5494 B1 84			lda (:bp2),y
 10083 5496 69 00			adc #$00
 10084 5498 91 84			sta (:bp2),y
 10085
 10086 				; optimize OK (service.pas), line = 1748
 10087
 10088 549A A9 00			lda #$00
 10089 549C 8D 42 A1			sta COLLISION
 10090
 10091 				; optimize OK (service.pas), line = 1750
 10092
 10093 549F AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10094 54A9 A0 00			ldy #$00
 10095 54AB B1 84			lda (:bp2),y
 10096 54AD 85 9F			sta :STACKORIGIN+9
 10097 54AF C8				iny
 10098 54B0 B1 84			lda (:bp2),y
 10099 54B2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10100 54B4 A0 00			ldy #$00
 10101 54B6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10102 54B8 10 01			spl
 10103 54BA 88				dey
 10104 54BB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10105 54BD 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10106 54BF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10107 54C1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10108 54C3 66 9F			ror :STACKORIGIN+9
 10109 54C5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10110 54C7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10111 54C9 66 9F			ror :STACKORIGIN+9
 10112 54CB 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10113 54CD 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10114 54CF 66 9F			ror :STACKORIGIN+9
 10115 54D1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10116 54D3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10117 54D5 66 9F			ror :STACKORIGIN+9
 10118 54D7 A5 9F			lda :STACKORIGIN+9
 10119 54D9 8D 36 A1			sta XP1
 10120 54DC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10121 54DE 8D 37 A1			sta XP1+1
 10122
 10123 				; optimize OK (service.pas), line = 1751
 10124
 10125 54E1 AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10126 54EB A0 00			ldy #$00
 10127 54ED B1 84			lda (:bp2),y
 10128 54EF 85 9F			sta :STACKORIGIN+9
 10129 54F1 C8				iny
 10130 54F2 B1 84			lda (:bp2),y
 10131 54F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10132 54F6 A0 00			ldy #$00
 10133 54F8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10134 54FA 10 01			spl
 10135 54FC 88				dey
 10136 54FD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10137 54FF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10138 5501 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10139 5503 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10140 5505 66 9F			ror :STACKORIGIN+9
 10141 5507 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10142 5509 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10143 550B 66 9F			ror :STACKORIGIN+9
 10144 550D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10145 550F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10146 5511 66 9F			ror :STACKORIGIN+9
 10147 5513 A5 9F			lda :STACKORIGIN+9
 10148 5515 8D 38 A1			sta YP1
 10149 5518 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10150 551A 8D 39 A1			sta YP1+1
 10151
 10152 				; optimize OK (service.pas), line = 1752
 10153
 10154 551D AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10155 5527 A0 00			ldy #$00
 10156 5529 B1 84			lda (:bp2),y
 10157 552B 85 9F			sta :STACKORIGIN+9
 10158 552D C8				iny
 10159 552E B1 84			lda (:bp2),y
 10160 5530 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10161 5532 A0 00			ldy #$00
 10162 5534 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10163 5536 10 01			spl
 10164 5538 88				dey
 10165 5539 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10166 553B 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10167 553D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10168 553F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10169 5541 66 9F			ror :STACKORIGIN+9
 10170 5543 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10171 5545 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10172 5547 66 9F			ror :STACKORIGIN+9
 10173 5549 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10174 554B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10175 554D 66 9F			ror :STACKORIGIN+9
 10176 554F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10177 5551 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10178 5553 66 9F			ror :STACKORIGIN+9
 10179 5555 A5 9F			lda :STACKORIGIN+9
 10180 5557 8D 3A A1			sta XP2
 10181 555A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10182 555C 8D 3B A1			sta XP2+1
 10183
 10184 				; optimize OK (service.pas), line = 1753
 10185
 10186 555F AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10187 5569 A0 00			ldy #$00
 10188 556B B1 84			lda (:bp2),y
 10189 556D 85 9F			sta :STACKORIGIN+9
 10190 556F C8				iny
 10191 5570 B1 84			lda (:bp2),y
 10192 5572 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10193 5574 A0 00			ldy #$00
 10194 5576 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10195 5578 10 01			spl
 10196 557A 88				dey
 10197 557B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10198 557D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10199 557F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10200 5581 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10201 5583 66 9F			ror :STACKORIGIN+9
 10202 5585 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10203 5587 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10204 5589 66 9F			ror :STACKORIGIN+9
 10205 558B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10206 558D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10207 558F 66 9F			ror :STACKORIGIN+9
 10208 5591 A5 9F			lda :STACKORIGIN+9
 10209 5593 8D 3C A1			sta YP2
 10210 5596 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10211 5598 8D 3D A1			sta YP2+1
 10212
 10213 				; optimize OK (service.pas), line = 1755
 10214
 10215 559B AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10216 55A5 A0 00			ldy #$00
 10217 55A7 B1 84			lda (:bp2),y
 10218 55A9 8D 26 A1			sta XK
 10219 55AC C8				iny
 10220 55AD B1 84			lda (:bp2),y
 10221 55AF 8D 27 A1			sta XK+1
 10222
 10223 				; optimize OK (service.pas), line = 1756
 10224
 10225 55B2 AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10226 55BC A0 00			ldy #$00
 10227 55BE B1 84			lda (:bp2),y
 10228 55C0 8D 28 A1			sta YK
 10229 55C3 C8				iny
 10230 55C4 B1 84			lda (:bp2),y
 10231 55C6 8D 29 A1			sta YK+1
 10232
 10233 				; optimize OK (service.pas), line = 1757
 10234
 10235 55C9 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10236 55D3 A0 00			ldy #$00
 10237 55D5 B1 84			lda (:bp2),y
 10238 55D7 8D 2A A1			sta XJ
 10239 55DA C8				iny
 10240 55DB B1 84			lda (:bp2),y
 10241 55DD 8D 2B A1			sta XJ+1
 10242
 10243 				; optimize OK (service.pas), line = 1758
 10244
 10245 55E0 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10246 55EA A0 00			ldy #$00
 10247 55EC B1 84			lda (:bp2),y
 10248 55EE 8D 2C A1			sta YJ
 10249 55F1 C8				iny
 10250 55F2 B1 84			lda (:bp2),y
 10251 55F4 8D 2D A1			sta YJ+1
 10252
 10253 				; optimize OK (service.pas), line = 1760
 10254
 10255 55F7 AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10256 5601 A0 00			ldy #$00
 10257 5603 B1 84			lda (:bp2),y
 10258 5605 8D 2E A1			sta XH
 10259 5608 C8				iny
 10260 5609 B1 84			lda (:bp2),y
 10261 560B 8D 2F A1			sta XH+1
 10262
 10263 				; optimize OK (service.pas), line = 1761
 10264
 10265 560E AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10266 5618 A0 00			ldy #$00
 10267 561A B1 84			lda (:bp2),y
 10268 561C 8D 30 A1			sta YH
 10269 561F C8				iny
 10270 5620 B1 84			lda (:bp2),y
 10271 5622 8D 31 A1			sta YH+1
 10272
 10273 				; optimize OK (service.pas), line = 1762
 10274
 10275 5625 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10276 562F A0 00			ldy #$00
 10277 5631 B1 84			lda (:bp2),y
 10278 5633 8D 32 A1			sta XN
 10279 5636 C8				iny
 10280 5637 B1 84			lda (:bp2),y
 10281 5639 8D 33 A1			sta XN+1
 10282
 10283 				; optimize OK (service.pas), line = 1763
 10284
 10285 563C AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10286 5646 A0 00			ldy #$00
 10287 5648 B1 84			lda (:bp2),y
 10288 564A 8D 34 A1			sta YN
 10289 564D C8				iny
 10290 564E B1 84			lda (:bp2),y
 10291 5650 8D 35 A1			sta YN+1
 10292
 10293 				; optimize OK (service.pas), line = 1770
 10294
 10295 5653 AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10296 565D A0 00			ldy #$00
 10297 565F B1 84			lda (:bp2),y
 10298 5661 85 9F			sta :STACKORIGIN+9
 10299 5663 C8				iny
 10300 5664 B1 84			lda (:bp2),y
 10301 5666 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10302 5668 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10303 5672 A0 00			ldy #$00
 10304 5674 B1 84			lda (:bp2),y
 10305 5676 85 A0			sta :STACKORIGIN+10
 10306 5678 C8				iny
 10307 5679 B1 84			lda (:bp2),y
 10308 567B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10309 567D A0 00			ldy #$00
 10310 567F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10311 5681 10 01			spl
 10312 5683 88				dey
 10313 5684 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10314 5686 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10315 5688 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10316 568A A0 00			ldy #$00
 10317 568C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 10318 568E 10 01			spl
 10319 5690 88				dey
 10320 5691 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10321 5693 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10322 5695 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10323 5697 A5 9F			lda :STACKORIGIN+9
 10324 5699 38 E5 A0			sub :STACKORIGIN+10
 10325 569C 85 8A			sta SYSTEM.ABS.@010185000.X
 10326 569E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10327 56A0 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 10328 56A2 85 8B			sta SYSTEM.ABS.@010185000.X+1
 10329 56A4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10330 56A6 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 10331 56A8 85 8C			sta SYSTEM.ABS.@010185000.X+2
 10332 56AA A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10333 56AC E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 10334 56AE 85 8D			sta SYSTEM.ABS.@010185000.X+3
 10335 56B0 20 56 1B			jsr SYSTEM.ABS.@010185000
 10336 56B3 E8				inx
 10337 56B4 A0 01			ldy #1
 10338 56B6				.LOCAL
 10339 56B6 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
 10340 56B8 38 E9 00			sub #$00
 10341 56BB D0 1C			bne L4
 10342 56BD A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
 10343 56BF C9 00			cmp #$00
 10344 56C1 D0 0A			bne L1
 10345 56C3 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
 10346 56C5 C9 00			cmp #$00
 10347 56C7 D0 04			bne L1
 10348 56C9 A5 92			lda SYSTEM.ABS.@010185000.RESULT
 10349 56CB C9 10			cmp #$10
 10350 56CD F0 10		L1	beq L5
 10351 56CF B0 04			bcs L3
 10352 56D1 A9 FF			lda #$FF
 10353 56D3 D0 0A			bne L5
 10354 56D5 A9 01		L3	lda #$01
 10355 56D7 D0 06			bne L5
 10356 56D9 50 04		L4	bvc L5
 10357 56DB 49 FF			eor #$FF
 10358 56DD 09 01			ora #$01
 10359 56DF			L5
 10360 					.ENDL
 10361 56DF F0 02			seq
 10362 56E1 10 01			bpl @+
 10363 56E3 88				dey
 10364 				@
 10365 56E4 94 96			sty :STACKORIGIN,x
 10366 56E6 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10367 56F0 A0 00			ldy #$00
 10368 56F2 B1 84			lda (:bp2),y
 10369 56F4 85 9F			sta :STACKORIGIN+9
 10370 56F6 C8				iny
 10371 56F7 B1 84			lda (:bp2),y
 10372 56F9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10373 56FB AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10374 5705 A0 00			ldy #$00
 10375 5707 B1 84			lda (:bp2),y
 10376 5709 85 A0			sta :STACKORIGIN+10
 10377 570B C8				iny
 10378 570C B1 84			lda (:bp2),y
 10379 570E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10380 5710 A0 00			ldy #$00
 10381 5712 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10382 5714 10 01			spl
 10383 5716 88				dey
 10384 5717 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10385 5719 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10386 571B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10387 571D A0 00			ldy #$00
 10388 571F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 10389 5721 10 01			spl
 10390 5723 88				dey
 10391 5724 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10392 5726 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10393 5728 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10394 572A A5 9F			lda :STACKORIGIN+9
 10395 572C 38 E5 A0			sub :STACKORIGIN+10
 10396 572F 85 8A			sta SYSTEM.ABS.@010185000.X
 10397 5731 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10398 5733 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 10399 5735 85 8B			sta SYSTEM.ABS.@010185000.X+1
 10400 5737 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10401 5739 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 10402 573B 85 8C			sta SYSTEM.ABS.@010185000.X+2
 10403 573D A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10404 573F E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 10405 5741 85 8D			sta SYSTEM.ABS.@010185000.X+3
 10406 5743 20 56 1B			jsr SYSTEM.ABS.@010185000
 10407 5746 CA				dex
 10408 5747 A0 01			ldy #1
 10409 5749				.LOCAL
 10410 5749 A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
 10411 574B 38 E9 00			sub #$00
 10412 574E D0 1C			bne L4
 10413 5750 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
 10414 5752 C9 00			cmp #$00
 10415 5754 D0 0A			bne L1
 10416 5756 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
 10417 5758 C9 00			cmp #$00
 10418 575A D0 04			bne L1
 10419 575C A5 92			lda SYSTEM.ABS.@010185000.RESULT
 10420 575E C9 08			cmp #$08
 10421 5760 F0 10		L1	beq L5
 10422 5762 B0 04			bcs L3
 10423 5764 A9 FF			lda #$FF
 10424 5766 D0 0A			bne L5
 10425 5768 A9 01		L3	lda #$01
 10426 576A D0 06			bne L5
 10427 576C 50 04		L4	bvc L5
 10428 576E 49 FF			eor #$FF
 10429 5770 09 01			ora #$01
 10430 5772			L5
 10431 					.ENDL
 10432 5772 F0 02			seq
 10433 5774 10 01			bpl @+
 10434 5776 88				dey
 10435 				@
 10436 5777 98				tya
 10437 5778 15 97			ora :STACKORIGIN+1,x
 10438 577A F0 05			jeq l_1816
 10439
 10440 				; optimize OK (service.pas), line = 1771
 10441
 10442 577C A9 01			lda #$01
 10443 577E 20 7E 2E			jsr FATAL_ERROR
 10444 5781			l_1816
 10445
 10446 				; optimize OK (service.pas), line = 1774
 10447
 10448 5781 AD 37 A1			lda XP1+1
 10449 5784 CD 3B A1			cmp XP2+1
 10450 5787 D0 06			bne @+
 10451 5789 AD 36 A1			lda XP1
 10452 578C CD 3A A1			cmp XP2
 10453 				@
 10454 578F D0 13			jne l_1839x
 10455 5791 AD 39 A1			lda YP1+1
 10456 5794 CD 3D A1			cmp YP2+1
 10457 5797 D0 06			bne @+
 10458 5799 AD 38 A1			lda YP1
 10459 579C CD 3C A1			cmp YP2
 10460 				@
 10461 579F D0 03 4C E2 5A		jeq l_1839
 10462 57A4			l_1839x
 10463
 10464 				; optimize OK (service.pas), line = 1776
 10465
 10466 57A4 AD 39 A1			lda YP1+1
 10467 57A7 CD 3D A1			cmp YP2+1
 10468 57AA D0 06			bne @+
 10469 57AC AD 38 A1			lda YP1
 10470 57AF CD 3C A1			cmp YP2
 10471 				@
 10472 57B2 D0 03 4C ED 58		jeq l_184C
 10473
 10474 				; optimize OK (service.pas), line = 1778
 10475
 10476 57B7 AD 42 A1			lda COLLISION
 10477 57BA 09 01			ora #$01
 10478 57BC 8D 42 A1			sta COLLISION
 10479
 10480 				; --- WhileProlog
 10481 57BF 4C DA 58			jmp l_1859
 10482 57C2			l_185A
 10483
 10484 				; optimize OK (service.pas), line = 1782
 10485
 10486 57C2 AD 2E A1			lda XH
 10487 57C5 85 9F			sta :STACKORIGIN+9
 10488 57C7 A0 00			ldy #$00
 10489 57C9 AD 2F A1			lda XH+1
 10490 57CC 10 01			spl
 10491 57CE 88				dey
 10492 57CF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10493 57D1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10494 57D3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10495 57D5 AD 32 A1			lda XN
 10496 57D8 85 A0			sta :STACKORIGIN+10
 10497 57DA A0 00			ldy #$00
 10498 57DC AD 33 A1			lda XN+1
 10499 57DF 10 01			spl
 10500 57E1 88				dey
 10501 57E2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10502 57E4 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10503 57E6 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10504 57E8 A5 9F			lda :STACKORIGIN+9
 10505 57EA 18 65 A0			add :STACKORIGIN+10
 10506 57ED 85 9F			sta :STACKORIGIN+9
 10507 57EF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10508 57F1 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10509 57F3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10510 57F5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10511 57F7 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10512 57F9 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10513 57FB A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10514 57FD 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10515 57FF 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10516 5801 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10517 5803 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10518 5805 66 9F			ror :STACKORIGIN+9
 10519 5807 A5 9F			lda :STACKORIGIN+9
 10520 5809 8D 22 A1			sta X
 10521 580C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10522 580E 8D 23 A1			sta X+1
 10523
 10524 				; optimize OK (service.pas), line = 1783
 10525
 10526 5811 AD 30 A1			lda YH
 10527 5814 85 9F			sta :STACKORIGIN+9
 10528 5816 A0 00			ldy #$00
 10529 5818 AD 31 A1			lda YH+1
 10530 581B 10 01			spl
 10531 581D 88				dey
 10532 581E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10533 5820 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10534 5822 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10535 5824 AD 34 A1			lda YN
 10536 5827 85 A0			sta :STACKORIGIN+10
 10537 5829 A0 00			ldy #$00
 10538 582B AD 35 A1			lda YN+1
 10539 582E 10 01			spl
 10540 5830 88				dey
 10541 5831 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10542 5833 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10543 5835 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10544 5837 A5 9F			lda :STACKORIGIN+9
 10545 5839 18 65 A0			add :STACKORIGIN+10
 10546 583C 85 9F			sta :STACKORIGIN+9
 10547 583E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10548 5840 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10549 5842 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10550 5844 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10551 5846 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10552 5848 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10553 584A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10554 584C 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10555 584E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10556 5850 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10557 5852 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10558 5854 66 9F			ror :STACKORIGIN+9
 10559 5856 A5 9F			lda :STACKORIGIN+9
 10560 5858 8D 24 A1			sta Y
 10561 585B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10562 585D 8D 25 A1			sta Y+1
 10563
 10564 				; optimize OK (service.pas), line = 1785
 10565
 10566 5860 AD 24 A1			lda Y
 10567 5863 85 9F			sta :STACKORIGIN+9
 10568 5865 A0 00			ldy #$00
 10569 5867 AD 25 A1			lda Y+1
 10570 586A 10 01			spl
 10571 586C 88				dey
 10572 586D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10573 586F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10574 5871 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10575 5873 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10576 5875 66 9F			ror :STACKORIGIN+9
 10577 5877 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10578 5879 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10579 587B 66 9F			ror :STACKORIGIN+9
 10580 587D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10581 587F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10582 5881 66 9F			ror :STACKORIGIN+9
 10583 5883 A5 9F			lda :STACKORIGIN+9
 10584 5885 8D 40 A1			sta YP
 10585 5888 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10586 588A 8D 41 A1			sta YP+1
 10587
 10588 				; optimize OK (service.pas), line = 1787
 10589
 10590 588D CD 39 A1			cmp YP1+1
 10591 5890 D0 06			bne @+
 10592 5892 AD 40 A1			lda YP
 10593 5895 CD 38 A1			cmp YP1
 10594 				@
 10595 5898 D0 18			jne l_1891
 10596
 10597 				; optimize OK (service.pas), line = 1789
 10598
 10599 589A AD 22 A1			lda X
 10600 589D 8D 2E A1			sta XH
 10601 58A0 AD 23 A1			lda X+1
 10602 58A3 8D 2F A1			sta XH+1
 10603
 10604 				; optimize OK (service.pas), line = 1790
 10605
 10606 58A6 AD 24 A1			lda Y
 10607 58A9 8D 30 A1			sta YH
 10608 58AC AD 25 A1			lda Y+1
 10609 58AF 8D 31 A1			sta YH+1
 10610 58B2			l_1891
 10611
 10612 				; optimize OK (service.pas), line = 1793
 10613
 10614 58B2 AD 41 A1			lda YP+1
 10615 58B5 CD 3D A1			cmp YP2+1
 10616 58B8 D0 06			bne @+
 10617 58BA AD 40 A1			lda YP
 10618 58BD CD 3C A1			cmp YP2
 10619 				@
 10620 58C0 D0 18			jne l_18B0
 10621
 10622 				; optimize OK (service.pas), line = 1795
 10623
 10624 58C2 AD 22 A1			lda X
 10625 58C5 8D 32 A1			sta XN
 10626 58C8 AD 23 A1			lda X+1
 10627 58CB 8D 33 A1			sta XN+1
 10628
 10629 				; optimize OK (service.pas), line = 1796
 10630
 10631 58CE AD 24 A1			lda Y
 10632 58D1 8D 34 A1			sta YN
 10633 58D4 AD 25 A1			lda Y+1
 10634 58D7 8D 35 A1			sta YN+1
 10635 58DA			l_18B0
 10636 58DA			l_1859
 10637
 10638 				; optimize OK (service.pas), line = 1780
 10639
 10640 58DA AD 34 A1			lda YN
 10641 58DD 29 07			and #$07
 10642 58DF F0 0C			jeq l_185Aw
 10643 58E1 AD 34 A1			lda YN
 10644 58E4 29 07			and #$07
 10645 58E6 C9 07			cmp #$07
 10646 58E8 F0 03 4C C2 57		jne l_185A
 10647 58ED			l_185Aw
 10648 58ED			l_184C
 10649
 10650 				; optimize OK (service.pas), line = 1802
 10651
 10652 58ED AD 37 A1			lda XP1+1
 10653 58F0 CD 3B A1			cmp XP2+1
 10654 58F3 D0 06			bne @+
 10655 58F5 AD 36 A1			lda XP1
 10656 58F8 CD 3A A1			cmp XP2
 10657 				@
 10658 58FB D0 03 4C 3C 5A		jeq l_18EF
 10659
 10660 				; optimize OK (service.pas), line = 1804
 10661
 10662 5900 AD 42 A1			lda COLLISION
 10663 5903 09 02			ora #$02
 10664 5905 8D 42 A1			sta COLLISION
 10665
 10666 				; --- WhileProlog
 10667 5908 4C 29 5A			jmp l_18FC
 10668 590B			l_18FD
 10669
 10670 				; optimize OK (service.pas), line = 1808
 10671
 10672 590B AD 26 A1			lda XK
 10673 590E 85 9F			sta :STACKORIGIN+9
 10674 5910 A0 00			ldy #$00
 10675 5912 AD 27 A1			lda XK+1
 10676 5915 10 01			spl
 10677 5917 88				dey
 10678 5918 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10679 591A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10680 591C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10681 591E AD 2A A1			lda XJ
 10682 5921 85 A0			sta :STACKORIGIN+10
 10683 5923 A0 00			ldy #$00
 10684 5925 AD 2B A1			lda XJ+1
 10685 5928 10 01			spl
 10686 592A 88				dey
 10687 592B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10688 592D 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10689 592F 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10690 5931 A5 9F			lda :STACKORIGIN+9
 10691 5933 18 65 A0			add :STACKORIGIN+10
 10692 5936 85 9F			sta :STACKORIGIN+9
 10693 5938 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10694 593A 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10695 593C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10696 593E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10697 5940 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10698 5942 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10699 5944 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10700 5946 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10701 5948 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10702 594A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10703 594C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10704 594E 66 9F			ror :STACKORIGIN+9
 10705 5950 A5 9F			lda :STACKORIGIN+9
 10706 5952 8D 22 A1			sta X
 10707 5955 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10708 5957 8D 23 A1			sta X+1
 10709
 10710 				; optimize OK (service.pas), line = 1809
 10711
 10712 595A AD 28 A1			lda YK
 10713 595D 85 9F			sta :STACKORIGIN+9
 10714 595F A0 00			ldy #$00
 10715 5961 AD 29 A1			lda YK+1
 10716 5964 10 01			spl
 10717 5966 88				dey
 10718 5967 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10719 5969 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10720 596B 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10721 596D AD 2C A1			lda YJ
 10722 5970 85 A0			sta :STACKORIGIN+10
 10723 5972 A0 00			ldy #$00
 10724 5974 AD 2D A1			lda YJ+1
 10725 5977 10 01			spl
 10726 5979 88				dey
 10727 597A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10728 597C 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10729 597E 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10730 5980 A5 9F			lda :STACKORIGIN+9
 10731 5982 18 65 A0			add :STACKORIGIN+10
 10732 5985 85 9F			sta :STACKORIGIN+9
 10733 5987 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10734 5989 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10735 598B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10736 598D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10737 598F 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10738 5991 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10739 5993 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10740 5995 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10741 5997 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10742 5999 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10743 599B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10744 599D 66 9F			ror :STACKORIGIN+9
 10745 599F A5 9F			lda :STACKORIGIN+9
 10746 59A1 8D 24 A1			sta Y
 10747 59A4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10748 59A6 8D 25 A1			sta Y+1
 10749
 10750 				; optimize OK (service.pas), line = 1811
 10751
 10752 59A9 AD 22 A1			lda X
 10753 59AC 85 9F			sta :STACKORIGIN+9
 10754 59AE A0 00			ldy #$00
 10755 59B0 AD 23 A1			lda X+1
 10756 59B3 10 01			spl
 10757 59B5 88				dey
 10758 59B6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10759 59B8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10760 59BA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10761 59BC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10762 59BE 66 9F			ror :STACKORIGIN+9
 10763 59C0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10764 59C2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10765 59C4 66 9F			ror :STACKORIGIN+9
 10766 59C6 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10767 59C8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10768 59CA 66 9F			ror :STACKORIGIN+9
 10769 59CC 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10770 59CE 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10771 59D0 66 9F			ror :STACKORIGIN+9
 10772 59D2 A5 9F			lda :STACKORIGIN+9
 10773 59D4 8D 3E A1			sta XP
 10774 59D7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10775 59D9 8D 3F A1			sta XP+1
 10776
 10777 				; optimize OK (service.pas), line = 1813
 10778
 10779 59DC CD 37 A1			cmp XP1+1
 10780 59DF D0 06			bne @+
 10781 59E1 AD 3E A1			lda XP
 10782 59E4 CD 36 A1			cmp XP1
 10783 				@
 10784 59E7 D0 18			jne l_1934
 10785
 10786 				; optimize OK (service.pas), line = 1815
 10787
 10788 59E9 AD 22 A1			lda X
 10789 59EC 8D 26 A1			sta XK
 10790 59EF AD 23 A1			lda X+1
 10791 59F2 8D 27 A1			sta XK+1
 10792
 10793 				; optimize OK (service.pas), line = 1816
 10794
 10795 59F5 AD 24 A1			lda Y
 10796 59F8 8D 28 A1			sta YK
 10797 59FB AD 25 A1			lda Y+1
 10798 59FE 8D 29 A1			sta YK+1
 10799 5A01			l_1934
 10800
 10801 				; optimize OK (service.pas), line = 1819
 10802
 10803 5A01 AD 3F A1			lda XP+1
 10804 5A04 CD 3B A1			cmp XP2+1
 10805 5A07 D0 06			bne @+
 10806 5A09 AD 3E A1			lda XP
 10807 5A0C CD 3A A1			cmp XP2
 10808 				@
 10809 5A0F D0 18			jne l_1953
 10810
 10811 				; optimize OK (service.pas), line = 1821
 10812
 10813 5A11 AD 22 A1			lda X
 10814 5A14 8D 2A A1			sta XJ
 10815 5A17 AD 23 A1			lda X+1
 10816 5A1A 8D 2B A1			sta XJ+1
 10817
 10818 				; optimize OK (service.pas), line = 1822
 10819
 10820 5A1D AD 24 A1			lda Y
 10821 5A20 8D 2C A1			sta YJ
 10822 5A23 AD 25 A1			lda Y+1
 10823 5A26 8D 2D A1			sta YJ+1
 10824 5A29			l_1953
 10825 5A29			l_18FC
 10826
 10827 				; optimize OK (service.pas), line = 1806
 10828
 10829 5A29 AD 2A A1			lda XJ
 10830 5A2C 29 0F			and #$0F
 10831 5A2E F0 0C			jeq l_18FDw
 10832 5A30 AD 2A A1			lda XJ
 10833 5A33 29 0F			and #$0F
 10834 5A35 C9 0F			cmp #$0F
 10835 5A37 F0 03 4C 0B 59		jne l_18FD
 10836 5A3C			l_18FDw
 10837 5A3C			l_18EF
 10838
 10839 				; optimize OK (service.pas), line = 1833
 10840
 10841 5A3C AD 42 A1			lda COLLISION
 10842 5A3F C9 01			cmp #$01
 10843 5A41 D0 03			jne l_1992
 10844 				; optimize OK (service.pas), line = 1835
 10845 				; optimize OK (service.pas), line = 1836
 10846 5A43 4C B1 5A			jmp l_19A6
 10847 5A46			l_1992
 10848
 10849 				; optimize OK (service.pas), line = 1838
 10850
 10851 5A46 AD 42 A1			lda COLLISION
 10852 5A49 C9 02			cmp #$02
 10853 5A4B D0 2F			jne l_19B8
 10854
 10855 				; optimize OK (service.pas), line = 1840
 10856
 10857 5A4D AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10858 5A57 A0 00			ldy #$00
 10859 5A59 AD 2A A1			lda XJ
 10860 5A5C 91 84			sta (:bp2),y
 10861 5A5E C8				iny
 10862 5A5F AD 2B A1			lda XJ+1
 10863 5A62 91 84			sta (:bp2),y
 10864
 10865 				; optimize OK (service.pas), line = 1841
 10866
 10867 5A64 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10868 5A6E A0 00			ldy #$00
 10869 5A70 AD 2C A1			lda YJ
 10870 5A73 91 84			sta (:bp2),y
 10871 5A75 C8				iny
 10872 5A76 AD 2D A1			lda YJ+1
 10873 5A79 4C DD 5A			jmp l_19CC
 10874 5A7C			l_19B8
 10875
 10876 				; optimize OK (service.pas), line = 1843
 10877
 10878 5A7C AD 42 A1			lda COLLISION
 10879 5A7F C9 03			cmp #$03
 10880 5A81 D0 5C			jne l_19DE
 10881
 10882 				; optimize OK (service.pas), line = 1845
 10883
 10884 5A83 AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10885 5A8D A0 00			ldy #$00
 10886 5A8F AD 2A A1			lda XJ
 10887 5A92 91 84			sta (:bp2),y
 10888 5A94 C8				iny
 10889 5A95 AD 2B A1			lda XJ+1
 10890 5A98 91 84			sta (:bp2),y
 10891
 10892 				; optimize OK (service.pas), line = 1846
 10893
 10894 5A9A AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10895 5AA4 A0 00			ldy #$00
 10896 5AA6 AD 2C A1			lda YJ
 10897 5AA9 91 84			sta (:bp2),y
 10898 5AAB C8				iny
 10899 5AAC AD 2D A1			lda YJ+1
 10900 5AAF 91 84			sta (:bp2),y
 10901 5AB1			l_19A6
 10902
 10903 				; optimize OK (service.pas), line = 1847
 10904
 10905 5AB1 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10906 5ABB A0 00			ldy #$00
 10907 5ABD AD 32 A1			lda XN
 10908 5AC0 91 84			sta (:bp2),y
 10909 5AC2 C8				iny
 10910 5AC3 AD 33 A1			lda XN+1
 10911 5AC6 91 84			sta (:bp2),y
 10912
 10913 				; optimize OK (service.pas), line = 1848
 10914
 10915 5AC8 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10916 5AD2 A0 00			ldy #$00
 10917 5AD4 AD 34 A1			lda YN
 10918 5AD7 91 84			sta (:bp2),y
 10919 5AD9 C8				iny
 10920 5ADA AD 35 A1			lda YN+1
 10921 5ADD			l_19CC
 10922 5ADD 91 84			sta (:bp2),y
 10923 5ADF			l_19DE
 10924 5ADF 4C E7 5A			jmp l_19FE
 10925 5AE2			l_1839
 10926
 10927 				; optimize OK (service.pas), line = 1853
 10928
 10929 5AE2 A9 02			lda #$02
 10930 5AE4 20 7E 2E			jsr FATAL_ERROR
 10931 5AE7			l_19FE
 10932
 10933 				; optimize OK (service.pas), line = 1856
 10934
 10935 5AE7 AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10936 5AF1 A0 00			ldy #$00
 10937 5AF3 B1 84			lda (:bp2),y
 10938 5AF5 38 E9 10			sub #$10
 10939 5AF8 91 84			sta (:bp2),y
 10940 5AFA C8				iny
 10941 5AFB B1 84			lda (:bp2),y
 10942 5AFD E9 00			sbc #$00
 10943 5AFF 91 84			sta (:bp2),y
 10944
 10945 				; optimize OK (service.pas), line = 1857
 10946
 10947 5B01 AC 1B A1 84 84 AC + 	mwy Y1 :bp2
 10948 5B0B A0 00			ldy #$00
 10949 5B0D B1 84			lda (:bp2),y
 10950 5B0F 38 E9 18			sub #$18
 10951 5B12 91 84			sta (:bp2),y
 10952 5B14 C8				iny
 10953 5B15 B1 84			lda (:bp2),y
 10954 5B17 E9 00			sbc #$00
 10955 5B19 91 84			sta (:bp2),y
 10956
 10957 				; optimize OK (service.pas), line = 1858
 10958
 10959 5B1B AC 1D A1 84 84 AC + 	mwy X2 :bp2
 10960 5B25 A0 00			ldy #$00
 10961 5B27 B1 84			lda (:bp2),y
 10962 5B29 38 E9 10			sub #$10
 10963 5B2C 91 84			sta (:bp2),y
 10964 5B2E C8				iny
 10965 5B2F B1 84			lda (:bp2),y
 10966 5B31 E9 00			sbc #$00
 10967 5B33 91 84			sta (:bp2),y
 10968
 10969 				; optimize OK (service.pas), line = 1859
 10970
 10971 5B35 AC 1F A1 84 84 AC + 	mwy Y2 :bp2
 10972 5B3F A0 00			ldy #$00
 10973 5B41 B1 84			lda (:bp2),y
 10974 5B43 38 E9 18			sub #$18
 10975 5B46 91 84			sta (:bp2),y
 10976 5B48 C8				iny
 10977 5B49 B1 84			lda (:bp2),y
 10978 5B4B E9 00			sbc #$00
 10979 5B4D 91 84			sta (:bp2),y
 10980
 10981 				; optimize OK (service.pas), line = 1862
 10982
 10983 5B4F AC 19 A1 84 84 AC + 	mwy X1 :bp2
 10984 5B59 A0 00			ldy #$00
 10985 5B5B B1 84			lda (:bp2),y
 10986 5B5D 8D 32 A0			sta MAX.B
 10987 5B60 C8				iny
 10988 5B61 B1 84			lda (:bp2),y
 10989 5B63 8D 33 A0			sta MAX.B+1
 10990 5B66 A9 00			lda #$00
 10991 5B68 8D 30 A0			sta MAX.A
 10992 5B6B 8D 31 A0			sta MAX.A+1
 10993 5B6E 20 28 2E			jsr MAX
 10994 5B71 A9 CF			lda #$CF
 10995 5B73 8D 36 A0			sta MIN.A
 10996 5B76 A9 00			lda #$00
 10997 5B78 8D 37 A0			sta MIN.A+1
 10998 5B7B AD 34 A0			lda MAX.RESULT
 10999 5B7E 8D 38 A0			sta MIN.B
 11000 5B81 AD 35 A0			lda MAX.RESULT+1
 11001 5B84 8D 39 A0			sta MIN.B+1
 11002 5B87 20 53 2E			jsr MIN
 11003 5B8A AC 19 A1 84 84 AC + 	mwy X1 :bp2
 11004 5B94 A0 00			ldy #$00
 11005 5B96 AD 3A A0			lda MIN.RESULT
 11006 5B99 91 84			sta (:bp2),y
 11007 5B9B C8				iny
 11008 5B9C AD 3B A0			lda MIN.RESULT+1
 11009 5B9F 91 84			sta (:bp2),y
 11010
 11011 				; optimize OK (service.pas), line = 1863
 11012
 11013 5BA1 AC 1D A1 84 84 AC + 	mwy X2 :bp2
 11014 5BAB A0 00			ldy #$00
 11015 5BAD B1 84			lda (:bp2),y
 11016 5BAF 8D 32 A0			sta MAX.B
 11017 5BB2 C8				iny
 11018 5BB3 B1 84			lda (:bp2),y
 11019 5BB5 8D 33 A0			sta MAX.B+1
 11020 5BB8 A9 00			lda #$00
 11021 5BBA 8D 30 A0			sta MAX.A
 11022 5BBD 8D 31 A0			sta MAX.A+1
 11023 5BC0 20 28 2E			jsr MAX
 11024 5BC3 A9 CF			lda #$CF
 11025 5BC5 8D 36 A0			sta MIN.A
 11026 5BC8 A9 00			lda #$00
 11027 5BCA 8D 37 A0			sta MIN.A+1
 11028 5BCD AD 34 A0			lda MAX.RESULT
 11029 5BD0 8D 38 A0			sta MIN.B
 11030 5BD3 AD 35 A0			lda MAX.RESULT+1
 11031 5BD6 8D 39 A0			sta MIN.B+1
 11032 5BD9 20 53 2E			jsr MIN
 11033 5BDC AC 1D A1 84 84 AC + 	mwy X2 :bp2
 11034 5BE6 A0 00			ldy #$00
 11035 5BE8 AD 3A A0			lda MIN.RESULT
 11036 5BEB 91 84			sta (:bp2),y
 11037 5BED C8				iny
 11038 5BEE AD 3B A0			lda MIN.RESULT+1
 11039 5BF1 91 84			sta (:bp2),y
 11040
 11041 				; optimize OK (service.pas), line = 1870
 11042
 11043 5BF3 AD 42 A1			lda COLLISION
 11044 5BF6 8D 21 A1			sta RESULT
 11045 5BF9			@exit
 11046
 11047 				; ------------------------------------------------------------
 11048
 11049 = A119			X1	= DATAORIGIN+$0630
 11050 = A11B			Y1	= DATAORIGIN+$0632
 11051 = A11D			X2	= DATAORIGIN+$0634
 11052 = A11F			Y2	= DATAORIGIN+$0636
 11053 = A121			RESULT	= DATAORIGIN+$0638
 11054 = A122			X	= DATAORIGIN+$0639
 11055 = A124			Y	= DATAORIGIN+$063B
 11056 = A126			XK	= DATAORIGIN+$063D
 11057 = A128			YK	= DATAORIGIN+$063F
 11058 = A12A			XJ	= DATAORIGIN+$0641
 11059 = A12C			YJ	= DATAORIGIN+$0643
 11060 = A12E			XH	= DATAORIGIN+$0645
 11061 = A130			YH	= DATAORIGIN+$0647
 11062 = A132			XN	= DATAORIGIN+$0649
 11063 = A134			YN	= DATAORIGIN+$064B
 11064 = A136			XP1	= DATAORIGIN+$064D
 11065 = A138			YP1	= DATAORIGIN+$064F
 11066 = A13A			XP2	= DATAORIGIN+$0651
 11067 = A13C			YP2	= DATAORIGIN+$0653
 11068 = A13E			XP	= DATAORIGIN+$0655
 11069 = A140			YP	= DATAORIGIN+$0657
 11070 = A142			COLLISION	= DATAORIGIN+$0659
 11071
 11072 = A119			@VarData	= X1
 11073 = 0029			@VarDataSize	= 41
 11074
 11075 5BF9 60				rts						; ret
 11076 				.endl
 11077
 11078 5BFA			.local	SHOOT_BLOCK					; PROCEDURE
 11079
 11080 				; optimize OK (service.pas), line = 1881
 11081
 11082 5BFA AD 44 A1			lda XB+1
 11083 5BFD 10 03 4C 0B 5E		jmi l_1A52
 11084 5C02 AD 43 A1			lda XB
 11085 5C05 C9 0D			cmp #$0D
 11086 5C07 AD 44 A1			lda XB+1
 11087 5C0A E9 00			sbc #$00
 11088 5C0C 50 02			svc
 11089 5C0E 49 80			eor #$80
 11090 5C10 30 03 4C 0B 5E		jpl l_1A52
 11091 5C15 AD 46 A1			lda YB+1
 11092 5C18 10 03 4C 0B 5E		jmi l_1A52
 11093 5C1D AD 45 A1			lda YB
 11094 5C20 C9 0F			cmp #$0F
 11095 5C22 AD 46 A1			lda YB+1
 11096 5C25 E9 00			sbc #$00
 11097 5C27 50 02			svc
 11098 5C29 49 80			eor #$80
 11099 5C2B 30 03 4C 0B 5E		jpl l_1A52
 11100
 11101 				; optimize OK (service.pas), line = 1884
 11102
 11103 5C30 AD 45 A1			lda YB
 11104 5C33 0A				asl @
 11105 5C34 0A				asl @
 11106 5C35 0A				asl @
 11107 5C36 0A				asl @
 11108 5C37 18 6D 43 A1			add XB
 11109 5C3B 8D 4B A1			sta I
 11110
 11111 				; optimize OK (service.pas), line = 1886
 11112
 11113 5C3E A8				tay
 11114 5C3F B9 00 DB			lda adr.WALL,y
 11115 5C42 D0 03 4C 0B 5E		jeq l_1A76
 11116
 11117 				; optimize OK (service.pas), line = 1888
 11118
 11119 5C47 C9 0A			cmp #$0A
 11120 5C49 90 03 4C 81 5D		jcs l_1A8C
 11121
 11122 				; optimize OK (service.pas), line = 1890
 11123
 11124 5C4E AD 43 A1			lda XB
 11125 5C51 8D F7 A0			sta REMOVE_BLOCK.XA
 11126 5C54 AD 45 A1			lda YB
 11127 5C57 8D F8 A0			sta REMOVE_BLOCK.YA
 11128 5C5A 20 C6 48			jsr REMOVE_BLOCK
 11129
 11130 				; optimize FAIL (0, service.pas), line = 1891
 11131
 11132 5C5D CE B0 9C			dec REMAIN_BLK
 11133
 11134 				; optimize OK (service.pas), line = 1895
 11135
 11136 5C60 AD CD 9C			lda CUR_PLAYER
 11137 5C63 0A				asl @
 11138 5C64 0A				asl @
 11139 5C65 85 9F			sta :STACKORIGIN+9
 11140 5C67 AC 4B A1			ldy I
 11141 5C6A B9 00 DB			lda adr.WALL,y
 11142 5C6D 0A				asl @
 11143 5C6E A8				tay
 11144 5C6F B9 69 10			lda adr.SCORE_WALL,y
 11145 5C72 85 A0			sta :STACKORIGIN+10
 11146 5C74 B9 6A 10			lda adr.SCORE_WALL+1,y
 11147 5C77 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11148 5C79 A4 9F			ldy :STACKORIGIN+9
 11149 5C7B B9 B2 9C			lda adr.SCORE.PLAYER,y
 11150 5C7E 18 65 A0			add :STACKORIGIN+10
 11151 5C81 99 B2 9C			sta adr.SCORE.PLAYER,y
 11152 5C84 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 11153 5C87 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 11154 5C89 99 B3 9C			sta adr.SCORE.PLAYER+1,y
 11155 5C8C B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 11156 5C8F 69 00			adc #$00
 11157 5C91 99 B4 9C			sta adr.SCORE.PLAYER+2,y
 11158 5C94 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 11159 5C97 69 00			adc #$00
 11160 5C99 99 B5 9C			sta adr.SCORE.PLAYER+3,y
 11161
 11162 				; optimize OK (service.pas), line = 1897
 11163
 11164 5C9C A9 2C			lda #$2C
 11165 5C9E 8D 2F 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 11166 5CA1 A9 01			lda #$01
 11167 5CA3 8D 30 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 11168 5CA6 20 05 26			jsr SYSTEM.RANDOM.@010184000
 11169 5CA9 AD DD 9C			lda LETT.INCOMING
 11170 5CAC 18 6D 31 9B			add SYSTEM.RANDOM.@010184000.RESULT
 11171 5CB0 8D DD 9C			sta LETT.INCOMING
 11172 5CB3 AD DE 9C			lda LETT.INCOMING+1
 11173 5CB6 6D 32 9B			adc SYSTEM.RANDOM.@010184000.RESULT+1
 11174 5CB9 8D DE 9C			sta LETT.INCOMING+1
 11175
 11176 				; optimize OK (service.pas), line = 1899
 11177
 11178 5CBC AD 43 A1			lda XB
 11179 5CBF 85 9F			sta :STACKORIGIN+9
 11180 5CC1 A0 00			ldy #$00
 11181 5CC3 AD 44 A1			lda XB+1
 11182 5CC6 10 01			spl
 11183 5CC8 88				dey
 11184 5CC9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11185 5CCB 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11186 5CCD 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11187 5CCF 06 9F			asl :STACKORIGIN+9
 11188 5CD1 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11189 5CD3 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 11190 5CD5 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 11191 5CD7 06 9F			asl :STACKORIGIN+9
 11192 5CD9 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11193 5CDB 06 9F			asl :STACKORIGIN+9
 11194 5CDD 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11195 5CDF 06 9F			asl :STACKORIGIN+9
 11196 5CE1 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11197 5CE3 A5 9F			lda :STACKORIGIN+9
 11198 5CE5 18 69 09			add #$09
 11199 5CE8 8D DF 9C			sta LETT.NEXTX
 11200 5CEB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11201 5CED 69 00			adc #$00
 11202 5CEF 8D E0 9C			sta LETT.NEXTX+1
 11203
 11204 				; optimize OK (service.pas), line = 1900
 11205
 11206 5CF2 AD 45 A1			lda YB
 11207 5CF5 85 9F			sta :STACKORIGIN+9
 11208 5CF7 A0 00			ldy #$00
 11209 5CF9 AD 46 A1			lda YB+1
 11210 5CFC 10 01			spl
 11211 5CFE 88				dey
 11212 5CFF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11213 5D01 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11214 5D03 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11215 5D05 A5 9F			lda :STACKORIGIN+9
 11216 5D07 18 69 01			add #$01
 11217 5D0A 85 9F			sta :STACKORIGIN+9
 11218 5D0C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11219 5D0E 69 00			adc #$00
 11220 5D10 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11221 5D12 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11222 5D14 69 00			adc #$00
 11223 5D16 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11224 5D18 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11225 5D1A 69 00			adc #$00
 11226 5D1C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11227 5D1E 06 9F			asl :STACKORIGIN+9
 11228 5D20 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11229 5D22 06 9F			asl :STACKORIGIN+9
 11230 5D24 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11231 5D26 06 9F			asl :STACKORIGIN+9
 11232 5D28 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 11233 5D2A A5 9F			lda :STACKORIGIN+9
 11234 5D2C 18 69 16			add #$16
 11235 5D2F 8D E1 9C			sta LETT.NEXTY
 11236 5D32 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11237 5D34 69 00			adc #$00
 11238 5D36 8D E2 9C			sta LETT.NEXTY+1
 11239
 11240 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1901
 11241
 11242 5D39 20 3B 31			jsr RANDOM_LETTER_DROP
 11243 5D3C AD 67 A0			lda RANDOM_LETTER_DROP.RESULT
 11244 5D3F 8D E3 9C			sta LETT.NEXTTYPE
 11245 5D42 AD 68 A0			lda RANDOM_LETTER_DROP.RESULT+1
 11246 5D45 8D E4 9C			sta LETT.NEXTTYPE+1
 11247
 11248 				; optimize OK (service.pas), line = 1903
 11249
 11250 5D48 AC 4B A1			ldy I
 11251 5D4B A9 00			lda #$00
 11252 5D4D 99 00 DB			sta adr.WALL,y
 11253
 11254 				; optimize OK (service.pas), line = 1904
 11255
 11256 5D50 A9 B8			lda #$B8
 11257 5D52 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11258 5D55 A9 01			lda #$01
 11259 5D57 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11260 5D5A A9 03			lda #$03
 11261 5D5C 8D E0 9B			sta BALL_BLOCK_SOUND.B
 11262 5D5F A9 00			lda #$00
 11263 5D61 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 11264 5D64 20 26 2B			jsr BALL_BLOCK_SOUND
 11265
 11266 				; optimize OK (service.pas), line = 1905
 11267
 11268 5D67 AC 47 A1 84 84 AC + 	mwy BALL :bp2
 11269 5D71 A0 14			ldy #BALL.SBD-DATAORIGIN
 11270 5D73 A9 00			lda #$00
 11271 5D75 91 84			sta (:bp2),y
 11272 5D77 C8				iny
 11273 5D78 91 84			sta (:bp2),y
 11274
 11275 				; optimize OK (service.pas), line = 1906
 11276
 11277 5D7A A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11278 5D7C 91 84			sta (:bp2),y
 11279 5D7E 4C 0B 5E			jmp l_1AE0
 11280 5D81			l_1A8C
 11281
 11282 				; optimize OK (service.pas), line = 1911
 11283
 11284 5D81 AC 4B A1			ldy I
 11285 5D84 B9 00 DB			lda adr.WALL,y
 11286 5D87 29 0F			and #$0F
 11287 5D89 C9 09			cmp #$09
 11288 5D8B D0 45			jne l_1AF9
 11289
 11290 				; optimize OK (service.pas), line = 1913
 11291
 11292 5D8D AC 47 A1 84 84 AC + 	mwy BALL :bp2
 11293 5D97 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11294 5D99 A9 00			lda #$00
 11295 5D9B 91 84			sta (:bp2),y
 11296
 11297 				; optimize OK (service.pas), line = 1914
 11298
 11299 5D9D AC 4B A1			ldy I
 11300 5DA0 B9 00 DB			lda adr.WALL,y
 11301 5DA3 38 E9 10			sub #$10
 11302 5DA6 99 00 DB			sta adr.WALL,y
 11303
 11304 				; optimize OK (service.pas), line = 1916
 11305
 11306 5DA9 A9 72			lda #$72
 11307 5DAB 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11308 5DAE A9 01			lda #$01
 11309 5DB0 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11310 5DB3 A9 04			lda #$04
 11311 5DB5 8D E0 9B			sta BALL_BLOCK_SOUND.B
 11312 5DB8 A9 00			lda #$00
 11313 5DBA 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 11314 5DBD 20 26 2B			jsr BALL_BLOCK_SOUND
 11315
 11316 				; optimize OK (service.pas), line = 1917
 11317
 11318 5DC0 AD 43 A1			lda XB
 11319 5DC3 8D 65 A0			sta SHINE.XB
 11320 5DC6 AD 45 A1			lda YB
 11321 5DC9 8D 66 A0			sta SHINE.YB
 11322 5DCC 20 FF 30			jsr SHINE
 11323 5DCF 4C 0B 5E			jmp l_1B13
 11324 5DD2			l_1AF9
 11325
 11326 				; optimize OK (service.pas), line = 1921
 11327
 11328 5DD2 AC 47 A1 84 84 AC + 	mwy BALL :bp2
 11329 5DDC A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 11330 5DDE B1 84			lda (:bp2),y
 11331 5DE0 18 69 01			add #$01
 11332 5DE3 91 84			sta (:bp2),y
 11333
 11334 				; optimize OK (service.pas), line = 1922
 11335
 11336 5DE5 AD 43 A1			lda XB
 11337 5DE8 8D 65 A0			sta SHINE.XB
 11338 5DEB AD 45 A1			lda YB
 11339 5DEE 8D 66 A0			sta SHINE.YB
 11340 5DF1 20 FF 30			jsr SHINE
 11341
 11342 				; optimize OK (service.pas), line = 1924
 11343
 11344 5DF4 A9 C8			lda #$C8
 11345 5DF6 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11346 5DF9 A9 00			lda #$00
 11347 5DFB 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11348 5DFE A9 07			lda #$07
 11349 5E00 8D E0 9B			sta BALL_BLOCK_SOUND.B
 11350 5E03 A9 00			lda #$00
 11351 5E05 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 11352 5E08 20 26 2B			jsr BALL_BLOCK_SOUND
 11353 5E0B			l_1B13
 11354 5E0B			l_1AE0
 11355 5E0B			l_1A76
 11356 5E0B			l_1A52
 11357
 11358 				; ------------------------------------------------------------
 11359
 11360 = A143			XB	= DATAORIGIN+$065A
 11361 = A145			YB	= DATAORIGIN+$065C
 11362 = A147			BALL	= DATAORIGIN+$065E
 11363 = 9AE9			BALL.X	= DATAORIGIN+$0000
 11364 = 9AEB			BALL.Y	= DATAORIGIN+$0002
 11365 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
 11366 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
 11367 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
 11368 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
 11369 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
 11370 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
 11371 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
 11372 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
 11373 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
 11374 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
 11375 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
 11376 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
 11377 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
 11378 = 9B03			BALL.STM	= DATAORIGIN+$001A
 11379 = A14B			I	= DATAORIGIN+$0662
 11380
 11381 = A143			@VarData	= XB
 11382 = 0007			@VarDataSize	= 7
 11383
 11384 5E0B			@exit
 11385 					.ifdef @new
 11386 					lda <@VarData
 11387 					sta :ztmp
 11388 					lda >@VarData
 11389 					ldy #@VarDataSize-1
 11390 					jmp @FreeMem
 11391 					els
 11392 5E0B 60				rts						; ret
 11393 					eif
 11394 				.endl
 11395
 11396 5E0C			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 11397
 11398 				; optimize OK (service.pas), line = 1935
 11399
 11400 5E0C AD 4D A1			lda XB+1
 11401 5E0F 10 03 4C 26 5F		jmi l_1B56
 11402 5E14 AD 4C A1			lda XB
 11403 5E17 C9 0D			cmp #$0D
 11404 5E19 AD 4D A1			lda XB+1
 11405 5E1C E9 00			sbc #$00
 11406 5E1E 50 02			svc
 11407 5E20 49 80			eor #$80
 11408 5E22 30 03 4C 26 5F		jpl l_1B56
 11409 5E27 AD 4F A1			lda YB+1
 11410 5E2A 10 03 4C 26 5F		jmi l_1B56
 11411 5E2F AD 4E A1			lda YB
 11412 5E32 C9 0F			cmp #$0F
 11413 5E34 AD 4F A1			lda YB+1
 11414 5E37 E9 00			sbc #$00
 11415 5E39 50 02			svc
 11416 5E3B 49 80			eor #$80
 11417 5E3D 30 03 4C 26 5F		jpl l_1B56
 11418
 11419 				; optimize OK (service.pas), line = 1938
 11420
 11421 5E42 AD 4E A1			lda YB
 11422 5E45 0A				asl @
 11423 5E46 0A				asl @
 11424 5E47 0A				asl @
 11425 5E48 0A				asl @
 11426 5E49 18 6D 4C A1			add XB
 11427 5E4D 8D 50 A1			sta I
 11428
 11429 				; optimize OK (service.pas), line = 1940
 11430
 11431 5E50 A8				tay
 11432 5E51 B9 00 DB			lda adr.WALL,y
 11433 5E54 D0 03 4C 26 5F		jeq l_1B7A
 11434
 11435 				; optimize OK (service.pas), line = 1942
 11436
 11437 5E59 C9 0A			cmp #$0A
 11438 5E5B B0 65			jcs l_1B90
 11439
 11440 				; optimize OK (service.pas), line = 1944
 11441
 11442 5E5D AD 4C A1			lda XB
 11443 5E60 8D F7 A0			sta REMOVE_BLOCK.XA
 11444 5E63 AD 4E A1			lda YB
 11445 5E66 8D F8 A0			sta REMOVE_BLOCK.YA
 11446 5E69 20 C6 48			jsr REMOVE_BLOCK
 11447
 11448 				; optimize FAIL (0, service.pas), line = 1945
 11449
 11450 5E6C CE B0 9C			dec REMAIN_BLK
 11451
 11452 				; optimize OK (service.pas), line = 1946
 11453
 11454 5E6F AD CD 9C			lda CUR_PLAYER
 11455 5E72 0A				asl @
 11456 5E73 0A				asl @
 11457 5E74 85 9F			sta :STACKORIGIN+9
 11458 5E76 AC 50 A1			ldy I
 11459 5E79 B9 00 DB			lda adr.WALL,y
 11460 5E7C 0A				asl @
 11461 5E7D A8				tay
 11462 5E7E B9 69 10			lda adr.SCORE_WALL,y
 11463 5E81 85 A0			sta :STACKORIGIN+10
 11464 5E83 B9 6A 10			lda adr.SCORE_WALL+1,y
 11465 5E86 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11466 5E88 A4 9F			ldy :STACKORIGIN+9
 11467 5E8A B9 B2 9C			lda adr.SCORE.PLAYER,y
 11468 5E8D 18 65 A0			add :STACKORIGIN+10
 11469 5E90 99 B2 9C			sta adr.SCORE.PLAYER,y
 11470 5E93 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 11471 5E96 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 11472 5E98 99 B3 9C			sta adr.SCORE.PLAYER+1,y
 11473 5E9B B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 11474 5E9E 69 00			adc #$00
 11475 5EA0 99 B4 9C			sta adr.SCORE.PLAYER+2,y
 11476 5EA3 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 11477 5EA6 69 00			adc #$00
 11478 5EA8 99 B5 9C			sta adr.SCORE.PLAYER+3,y
 11479
 11480 				; optimize OK (service.pas), line = 1947
 11481
 11482 5EAB AC 50 A1			ldy I
 11483 5EAE A9 00			lda #$00
 11484 5EB0 99 00 DB			sta adr.WALL,y
 11485
 11486 				; optimize OK (service.pas), line = 1948
 11487
 11488 5EB3 A9 B8			lda #$B8
 11489 5EB5 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11490 5EB8 A9 01			lda #$01
 11491 5EBA 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11492 5EBD A9 03			lda #$03
 11493 5EBF 4C 1B 5F			jmp l_1BB8
 11494 5EC2			l_1B90
 11495
 11496 				; optimize OK (service.pas), line = 1953
 11497
 11498 5EC2 AC 50 A1			ldy I
 11499 5EC5 B9 00 DB			lda adr.WALL,y
 11500 5EC8 29 0F			and #$0F
 11501 5ECA C9 09			cmp #$09
 11502 5ECC D0 32			jne l_1BD1
 11503
 11504 				; optimize OK (service.pas), line = 1955
 11505
 11506 5ECE B9 00 DB			lda adr.WALL,y
 11507 5ED1 38 E9 10			sub #$10
 11508 5ED4 99 00 DB			sta adr.WALL,y
 11509
 11510 				; optimize OK (service.pas), line = 1956
 11511
 11512 5ED7 A9 72			lda #$72
 11513 5ED9 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11514 5EDC A9 01			lda #$01
 11515 5EDE 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11516 5EE1 A9 04			lda #$04
 11517 5EE3 8D E0 9B			sta BALL_BLOCK_SOUND.B
 11518 5EE6 A9 00			lda #$00
 11519 5EE8 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 11520 5EEB 20 26 2B			jsr BALL_BLOCK_SOUND
 11521
 11522 				; optimize OK (service.pas), line = 1957
 11523
 11524 5EEE AD 4C A1			lda XB
 11525 5EF1 8D 65 A0			sta SHINE.XB
 11526 5EF4 AD 4E A1			lda YB
 11527 5EF7 8D 66 A0			sta SHINE.YB
 11528 5EFA 20 FF 30			jsr SHINE
 11529 5EFD 4C 26 5F			jmp l_1BE7
 11530 5F00			l_1BD1
 11531
 11532 				; optimize OK (service.pas), line = 1961
 11533
 11534 5F00 AD 4C A1			lda XB
 11535 5F03 8D 65 A0			sta SHINE.XB
 11536 5F06 AD 4E A1			lda YB
 11537 5F09 8D 66 A0			sta SHINE.YB
 11538 5F0C 20 FF 30			jsr SHINE
 11539
 11540 				; optimize OK (service.pas), line = 1962
 11541
 11542 5F0F A9 C8			lda #$C8
 11543 5F11 8D DE 9B			sta BALL_BLOCK_SOUND.A
 11544 5F14 A9 00			lda #$00
 11545 5F16 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 11546 5F19 A9 07			lda #$07
 11547 5F1B			l_1BB8
 11548 5F1B 8D E0 9B			sta BALL_BLOCK_SOUND.B
 11549 5F1E A9 00			lda #$00
 11550 5F20 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 11551 5F23 20 26 2B			jsr BALL_BLOCK_SOUND
 11552 5F26			l_1BE7
 11553 5F26			l_1B7A
 11554 5F26			l_1B56
 11555
 11556 				; ------------------------------------------------------------
 11557
 11558 = A14C			XB	= DATAORIGIN+$0663
 11559 = A14E			YB	= DATAORIGIN+$0665
 11560 = A150			I	= DATAORIGIN+$0667
 11561
 11562 = A14C			@VarData	= XB
 11563 = 0005			@VarDataSize	= 5
 11564
 11565 5F26			@exit
 11566 					.ifdef @new
 11567 					lda <@VarData
 11568 					sta :ztmp
 11569 					lda >@VarData
 11570 					ldy #@VarDataSize-1
 11571 					jmp @FreeMem
 11572 					els
 11573 5F26 60				rts						; ret
 11574 					eif
 11575 				.endl
 11576
 11577 5F27			.local	BALL_HIT_BLOCK					; PROCEDURE
 11578
 11579 				; optimize OK (service.pas), line = 1994
 11580
 11581 5F27 A9 FF			lda #$FF
 11582 5F29 8D 79 A1			sta EMERGENCY
 11583
 11584 				; optimize OK (service.pas), line = 1996
 11585
 11586 5F2C AC 51 A1 84 84 AC + 	mwy BALL :bp2
 11587 5F36 A0 00			ldy #BALL.X-DATAORIGIN
 11588 5F38 B1 84			lda (:bp2),y
 11589 5F3A 38 E9 09			sub #$09
 11590 5F3D 8D 69 A1			sta NX
 11591 5F40 C8				iny
 11592 5F41 B1 84			lda (:bp2),y
 11593 5F43 E9 00			sbc #$00
 11594 5F45 8D 6A A1			sta NX+1
 11595
 11596 				; optimize OK (service.pas), line = 1997
 11597
 11598 5F48 A0 02			ldy #BALL.Y-DATAORIGIN
 11599 5F4A B1 84			lda (:bp2),y
 11600 5F4C 38 E9 16			sub #$16
 11601 5F4F 8D 6B A1			sta NY
 11602 5F52 C8				iny
 11603 5F53 B1 84			lda (:bp2),y
 11604 5F55 E9 00			sbc #$00
 11605 5F57 8D 6C A1			sta NY+1
 11606
 11607 				; optimize OK (service.pas), line = 2000
 11608
 11609 5F5A A0 08			ldy #BALL.OLDX-DATAORIGIN
 11610 5F5C B1 84			lda (:bp2),y
 11611 5F5E 38 E9 09			sub #$09
 11612 5F61 8D 5D A1			sta OX
 11613 5F64 C8				iny
 11614 5F65 B1 84			lda (:bp2),y
 11615 5F67 E9 00			sbc #$00
 11616 5F69 8D 5E A1			sta OX+1
 11617
 11618 				; optimize OK (service.pas), line = 2001
 11619
 11620 5F6C A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11621 5F6E B1 84			lda (:bp2),y
 11622 5F70 38 E9 16			sub #$16
 11623 5F73 8D 5F A1			sta OY
 11624 5F76 C8				iny
 11625 5F77 B1 84			lda (:bp2),y
 11626 5F79 E9 00			sbc #$00
 11627 5F7B 8D 60 A1			sta OY+1
 11628
 11629 				; optimize OK (service.pas), line = 2003
 11630
 11631 5F7E AD 69 A1			lda NX
 11632 5F81 85 9F			sta :STACKORIGIN+9
 11633 5F83 A0 00			ldy #$00
 11634 5F85 AD 6A A1			lda NX+1
 11635 5F88 10 01			spl
 11636 5F8A 88				dey
 11637 5F8B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11638 5F8D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11639 5F8F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11640 5F91 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11641 5F93 66 9F			ror :STACKORIGIN+9
 11642 5F95 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11643 5F97 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11644 5F99 66 9F			ror :STACKORIGIN+9
 11645 5F9B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11646 5F9D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11647 5F9F 66 9F			ror :STACKORIGIN+9
 11648 5FA1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11649 5FA3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11650 5FA5 66 9F			ror :STACKORIGIN+9
 11651 5FA7 A5 9F			lda :STACKORIGIN+9
 11652 5FA9 8D 59 A1			sta XB
 11653 5FAC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11654 5FAE 8D 5A A1			sta XB+1
 11655
 11656 				; optimize OK (service.pas), line = 2004
 11657
 11658 5FB1 AD 6B A1			lda NY
 11659 5FB4 85 9F			sta :STACKORIGIN+9
 11660 5FB6 A0 00			ldy #$00
 11661 5FB8 AD 6C A1			lda NY+1
 11662 5FBB 10 01			spl
 11663 5FBD 88				dey
 11664 5FBE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11665 5FC0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11666 5FC2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11667 5FC4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11668 5FC6 66 9F			ror :STACKORIGIN+9
 11669 5FC8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11670 5FCA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11671 5FCC 66 9F			ror :STACKORIGIN+9
 11672 5FCE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11673 5FD0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11674 5FD2 66 9F			ror :STACKORIGIN+9
 11675 5FD4 A5 9F			lda :STACKORIGIN+9
 11676 5FD6 8D 5B A1			sta YB
 11677 5FD9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11678 5FDB 8D 5C A1			sta YB+1
 11679
 11680 				; optimize OK (service.pas), line = 2008
 11681
 11682 5FDE AD 5B A1			lda YB
 11683 5FE1 0A				asl @
 11684 5FE2 0A				asl @
 11685 5FE3 0A				asl @
 11686 5FE4 0A				asl @
 11687 5FE5 18 6D 59 A1			add XB
 11688 5FE9 A8				tay
 11689 5FEA B9 00 DB			lda adr.WALL,y
 11690 5FED D0 03 4C 2A 6F		jeq l_1C4E
 11691
 11692 				; optimize OK (service.pas), line = 2010
 11693
 11694 5FF2 A9 5D			lda <OX
 11695 5FF4 8D 19 A1			sta SPLIT_LINE.X1
 11696 5FF7 A9 A1			lda >OX
 11697 5FF9 8D 1A A1			sta SPLIT_LINE.X1+1
 11698 5FFC A9 5F			lda <OY
 11699 5FFE 8D 1B A1			sta SPLIT_LINE.Y1
 11700 6001 A9 A1			lda >OY
 11701 6003 8D 1C A1			sta SPLIT_LINE.Y1+1
 11702 6006 A9 69			lda <NX
 11703 6008 8D 1D A1			sta SPLIT_LINE.X2
 11704 600B A9 A1			lda >NX
 11705 600D 8D 1E A1			sta SPLIT_LINE.X2+1
 11706 6010 A9 6B			lda <NY
 11707 6012 8D 1F A1			sta SPLIT_LINE.Y2
 11708 6015 A9 A1			lda >NY
 11709 6017 8D 20 A1			sta SPLIT_LINE.Y2+1
 11710 601A 20 32 54			jsr SPLIT_LINE
 11711 601D AD 21 A1			lda SPLIT_LINE.RESULT
 11712 6020 8D 7C A1			sta COLLISION
 11713
 11714 				; optimize OK (service.pas), line = 2016
 11715
 11716 6023 C9 03			cmp #$03
 11717 6025 F0 03 4C 7B 64		jne l_1C69
 11718
 11719 				; optimize OK (service.pas), line = 2018
 11720
 11721 602A AC 51 A1 84 84 AC + 	mwy BALL :bp2
 11722 6034 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11723 6036 B1 84			lda (:bp2),y
 11724 6038 38 ED 5D A1			sub OX
 11725 603C 85 9F			sta :STACKORIGIN+9
 11726 603E C8				iny
 11727 603F B1 84			lda (:bp2),y
 11728 6041 ED 5E A1			sbc OX+1
 11729 6044 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11730 6046 A5 9F			lda :STACKORIGIN+9
 11731 6048 38 E9 09			sub #$09
 11732 604B 8D 61 A1			sta LX
 11733 604E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11734 6050 E9 00			sbc #$00
 11735 6052 8D 62 A1			sta LX+1
 11736
 11737 				; optimize OK (service.pas), line = 2019
 11738
 11739 6055 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11740 6057 B1 84			lda (:bp2),y
 11741 6059 38 ED 5F A1			sub OY
 11742 605D 85 9F			sta :STACKORIGIN+9
 11743 605F C8				iny
 11744 6060 B1 84			lda (:bp2),y
 11745 6062 ED 60 A1			sbc OY+1
 11746 6065 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11747 6067 A5 9F			lda :STACKORIGIN+9
 11748 6069 38 E9 16			sub #$16
 11749 606C 8D 63 A1			sta LY
 11750 606F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11751 6071 E9 00			sbc #$00
 11752 6073 8D 64 A1			sta LY+1
 11753
 11754 				; optimize OK (service.pas), line = 2021
 11755
 11756 6076 A0 08			ldy #BALL.OLDX-DATAORIGIN
 11757 6078 B1 84			lda (:bp2),y
 11758 607A 38 ED 69 A1			sub NX
 11759 607E 85 9F			sta :STACKORIGIN+9
 11760 6080 C8				iny
 11761 6081 B1 84			lda (:bp2),y
 11762 6083 ED 6A A1			sbc NX+1
 11763 6086 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11764 6088 A5 9F			lda :STACKORIGIN+9
 11765 608A 38 E9 09			sub #$09
 11766 608D 8D 65 A1			sta MX
 11767 6090 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11768 6092 E9 00			sbc #$00
 11769 6094 8D 66 A1			sta MX+1
 11770
 11771 				; optimize OK (service.pas), line = 2022
 11772
 11773 6097 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11774 6099 B1 84			lda (:bp2),y
 11775 609B 38 ED 6B A1			sub NY
 11776 609F 85 9F			sta :STACKORIGIN+9
 11777 60A1 C8				iny
 11778 60A2 B1 84			lda (:bp2),y
 11779 60A4 ED 6C A1			sbc NY+1
 11780 60A7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11781 60A9 A5 9F			lda :STACKORIGIN+9
 11782 60AB 38 E9 16			sub #$16
 11783 60AE 8D 67 A1			sta MY
 11784 60B1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11785 60B3 E9 00			sbc #$00
 11786 60B5 8D 68 A1			sta MY+1
 11787
 11788 				; optimize OK (service.pas), line = 2024
 11789
 11790 60B8 AD 61 A1			lda LX
 11791 60BB 85 8E			sta :ecx
 11792 60BD 85 86			sta :eax
 11793 60BF AD 62 A1			lda LX+1
 11794 60C2 85 8F			sta :ecx+1
 11795 60C4 85 87			sta :eax+1
 11796 					.ifdef fmulinit
 11797 					fmulu_16
 11798 					els
 11799 60C6 20 12 13			imulCX
 11800 					eif
 11801 60C9 A5 86			lda :eax
 11802 60CB 85 9F			sta :STACKORIGIN+9
 11803 60CD A5 87			lda :eax+1
 11804 60CF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11805 60D1 AD 63 A1			lda LY
 11806 60D4 85 8E			sta :ecx
 11807 60D6 85 86			sta :eax
 11808 60D8 AD 64 A1			lda LY+1
 11809 60DB 85 8F			sta :ecx+1
 11810 60DD 85 87			sta :eax+1
 11811 					.ifdef fmulinit
 11812 					fmulu_16
 11813 					els
 11814 60DF 20 12 13			imulCX
 11815 					eif
 11816 60E2 A5 86			lda :eax
 11817 60E4 18 65 9F			add :STACKORIGIN+9
 11818 60E7 8D 6D A1			sta F1
 11819 60EA A5 87			lda :eax+1
 11820 60EC 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11821 60EE 8D 6E A1			sta F1+1
 11822
 11823 				; optimize OK (service.pas), line = 2025
 11824
 11825 60F1 AD 65 A1			lda MX
 11826 60F4 85 8E			sta :ecx
 11827 60F6 85 86			sta :eax
 11828 60F8 AD 66 A1			lda MX+1
 11829 60FB 85 8F			sta :ecx+1
 11830 60FD 85 87			sta :eax+1
 11831 					.ifdef fmulinit
 11832 					fmulu_16
 11833 					els
 11834 60FF 20 12 13			imulCX
 11835 					eif
 11836 6102 A5 86			lda :eax
 11837 6104 85 9F			sta :STACKORIGIN+9
 11838 6106 A5 87			lda :eax+1
 11839 6108 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11840 610A AD 67 A1			lda MY
 11841 610D 85 8E			sta :ecx
 11842 610F 85 86			sta :eax
 11843 6111 AD 68 A1			lda MY+1
 11844 6114 85 8F			sta :ecx+1
 11845 6116 85 87			sta :eax+1
 11846 					.ifdef fmulinit
 11847 					fmulu_16
 11848 					els
 11849 6118 20 12 13			imulCX
 11850 					eif
 11851 611B A5 86			lda :eax
 11852 611D 18 65 9F			add :STACKORIGIN+9
 11853 6120 8D 6F A1			sta F2
 11854 6123 A5 87			lda :eax+1
 11855 6125 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11856 6127 8D 70 A1			sta F2+1
 11857
 11858 				; optimize OK (service.pas), line = 2027
 11859
 11860 612A AD 6D A1			lda F1
 11861 612D CD 6F A1			cmp F2
 11862 6130 AD 6E A1			lda F1+1
 11863 6133 ED 70 A1			sbc F2+1
 11864 6136 50 02			svc
 11865 6138 49 80			eor #$80
 11866 613A 30 03 4C DB 62		jpl l_1CDC
 11867
 11868 				; optimize OK (service.pas), line = 2033
 11869
 11870 613F AD 5D A1			lda OX
 11871 6142 85 A0			sta :STACKORIGIN+10
 11872 6144 A0 00			ldy #$00
 11873 6146 AD 5E A1			lda OX+1
 11874 6149 10 01			spl
 11875 614B 88				dey
 11876 614C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11877 614E 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 11878 6150 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11879 6152 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11880 6154 66 A0			ror :STACKORIGIN+10
 11881 6156 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11882 6158 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11883 615A 66 A0			ror :STACKORIGIN+10
 11884 615C 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11885 615E 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11886 6160 66 A0			ror :STACKORIGIN+10
 11887 6162 46 C0			lsr :STACKORIGIN+STACKWIDTH*2+10
 11888 6164 66 B0			ror :STACKORIGIN+STACKWIDTH+10
 11889 6166 66 A0			ror :STACKORIGIN+10
 11890 6168 A5 A0			lda :STACKORIGIN+10
 11891 616A 8D 30 A0			sta MAX.A
 11892 616D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11893 616F 8D 31 A0			sta MAX.A+1
 11894 6172 A9 00			lda #$00
 11895 6174 8D 32 A0			sta MAX.B
 11896 6177 8D 33 A0			sta MAX.B+1
 11897 617A 20 28 2E			jsr MAX
 11898 617D A9 0C			lda #$0C
 11899 617F 8D 36 A0			sta MIN.A
 11900 6182 A9 00			lda #$00
 11901 6184 8D 37 A0			sta MIN.A+1
 11902 6187 AD 34 A0			lda MAX.RESULT
 11903 618A 8D 38 A0			sta MIN.B
 11904 618D AD 35 A0			lda MAX.RESULT+1
 11905 6190 8D 39 A0			sta MIN.B+1
 11906 6193 20 53 2E			jsr MIN
 11907 6196 AD 3A A0			lda MIN.RESULT
 11908 6199 8D 59 A1			sta XB
 11909 619C AD 3B A0			lda MIN.RESULT+1
 11910 619F 8D 5A A1			sta XB+1
 11911
 11912 				; optimize OK (service.pas), line = 2034
 11913
 11914 61A2 AD 5F A1			lda OY
 11915 61A5 85 9F			sta :STACKORIGIN+9
 11916 61A7 A0 00			ldy #$00
 11917 61A9 AD 60 A1			lda OY+1
 11918 61AC 10 01			spl
 11919 61AE 88				dey
 11920 61AF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11921 61B1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11922 61B3 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11923 61B5 A5 9F			lda :STACKORIGIN+9
 11924 61B7 18 69 18			add #$18
 11925 61BA 85 9F			sta :STACKORIGIN+9
 11926 61BC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11927 61BE 69 00			adc #$00
 11928 61C0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11929 61C2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 11930 61C4 69 00			adc #$00
 11931 61C6 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 11932 61C8 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 11933 61CA 69 00			adc #$00
 11934 61CC 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 11935 61CE 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11936 61D0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11937 61D2 66 9F			ror :STACKORIGIN+9
 11938 61D4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11939 61D6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11940 61D8 66 9F			ror :STACKORIGIN+9
 11941 61DA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 11942 61DC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11943 61DE 66 9F			ror :STACKORIGIN+9
 11944 61E0 A5 9F			lda :STACKORIGIN+9
 11945 61E2 38 E9 03			sub #$03
 11946 61E5 8D 5B A1			sta YB
 11947 61E8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11948 61EA E9 00			sbc #$00
 11949 61EC 8D 5C A1			sta YB+1
 11950
 11951 				; optimize OK (service.pas), line = 2037
 11952
 11953 61EF AD 5B A1			lda YB
 11954 61F2 0A				asl @
 11955 61F3 0A				asl @
 11956 61F4 0A				asl @
 11957 61F5 0A				asl @
 11958 61F6 18 6D 59 A1			add XB
 11959 61FA A8				tay
 11960 61FB B9 00 DB			lda adr.WALL,y
 11961 61FE F0 03 4C C0 62		jne l_1D18
 11962
 11963 				; optimize OK (service.pas), line = 2039
 11964
 11965 6203 AD 69 A1			lda NX
 11966 6206 85 9F			sta :STACKORIGIN+9
 11967 6208 A0 00			ldy #$00
 11968 620A AD 6A A1			lda NX+1
 11969 620D 10 01			spl
 11970 620F 88				dey
 11971 6210 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11972 6212 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 11973 6214 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 11974 6216 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11975 6218 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11976 621A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11977 621C 66 9F			ror :STACKORIGIN+9
 11978 621E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11979 6220 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11980 6222 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11981 6224 66 9F			ror :STACKORIGIN+9
 11982 6226 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11983 6228 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11984 622A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11985 622C 66 9F			ror :STACKORIGIN+9
 11986 622E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 11987 6230 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 11988 6232 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 11989 6234 66 9F			ror :STACKORIGIN+9
 11990 6236 A9 00			lda #$00
 11991 6238 8D 30 A0			sta MAX.A
 11992 623B 8D 31 A0			sta MAX.A+1
 11993 623E A5 9F			lda :STACKORIGIN+9
 11994 6240 8D 32 A0			sta MAX.B
 11995 6243 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11996 6245 8D 33 A0			sta MAX.B+1
 11997 6248 20 28 2E			jsr MAX
 11998 624B A9 0C			lda #$0C
 11999 624D 8D 36 A0			sta MIN.A
 12000 6250 A9 00			lda #$00
 12001 6252 8D 37 A0			sta MIN.A+1
 12002 6255 AD 34 A0			lda MAX.RESULT
 12003 6258 8D 38 A0			sta MIN.B
 12004 625B AD 35 A0			lda MAX.RESULT+1
 12005 625E 8D 39 A0			sta MIN.B+1
 12006 6261 20 53 2E			jsr MIN
 12007 6264 AD 3A A0			lda MIN.RESULT
 12008 6267 8D 59 A1			sta XB
 12009 626A AD 3B A0			lda MIN.RESULT+1
 12010 626D 8D 5A A1			sta XB+1
 12011
 12012 				; optimize OK (service.pas), line = 2040
 12013
 12014 6270 AD 6B A1			lda NY
 12015 6273 85 9F			sta :STACKORIGIN+9
 12016 6275 A0 00			ldy #$00
 12017 6277 AD 6C A1			lda NY+1
 12018 627A 10 01			spl
 12019 627C 88				dey
 12020 627D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12021 627F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12022 6281 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12023 6283 A5 9F			lda :STACKORIGIN+9
 12024 6285 18 69 18			add #$18
 12025 6288 85 9F			sta :STACKORIGIN+9
 12026 628A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12027 628C 69 00			adc #$00
 12028 628E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12029 6290 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12030 6292 69 00			adc #$00
 12031 6294 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12032 6296 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12033 6298 69 00			adc #$00
 12034 629A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12035 629C 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12036 629E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12037 62A0 66 9F			ror :STACKORIGIN+9
 12038 62A2 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12039 62A4 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12040 62A6 66 9F			ror :STACKORIGIN+9
 12041 62A8 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12042 62AA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12043 62AC 66 9F			ror :STACKORIGIN+9
 12044 62AE A5 9F			lda :STACKORIGIN+9
 12045 62B0 38 E9 03			sub #$03
 12046 62B3 8D 5B A1			sta YB
 12047 62B6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12048 62B8 E9 00			sbc #$00
 12049 62BA 8D 5C A1			sta YB+1
 12050 62BD 4C D8 62			jmp l_1D40
 12051 62C0			l_1D18
 12052
 12053 				; optimize OK (service.pas), line = 2044
 12054
 12055 62C0 AD 5D A1			lda OX
 12056 62C3 8D 69 A1			sta NX
 12057 62C6 AD 5E A1			lda OX+1
 12058 62C9 8D 6A A1			sta NX+1
 12059
 12060 				; optimize OK (service.pas), line = 2045
 12061
 12062 62CC AD 5F A1			lda OY
 12063 62CF 8D 6B A1			sta NY
 12064 62D2 AD 60 A1			lda OY+1
 12065 62D5 8D 6C A1			sta NY+1
 12066 62D8			l_1D40
 12067 62D8 4C 7B 64			jmp l_1D53
 12068 62DB			l_1CDC
 12069
 12070 				; optimize OK (service.pas), line = 2055
 12071
 12072 62DB AD 69 A1			lda NX
 12073 62DE 85 9F			sta :STACKORIGIN+9
 12074 62E0 A0 00			ldy #$00
 12075 62E2 AD 6A A1			lda NX+1
 12076 62E5 10 01			spl
 12077 62E7 88				dey
 12078 62E8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12079 62EA 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12080 62EC 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12081 62EE 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12082 62F0 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12083 62F2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12084 62F4 66 9F			ror :STACKORIGIN+9
 12085 62F6 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12086 62F8 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12087 62FA 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12088 62FC 66 9F			ror :STACKORIGIN+9
 12089 62FE 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12090 6300 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12091 6302 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12092 6304 66 9F			ror :STACKORIGIN+9
 12093 6306 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12094 6308 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12095 630A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12096 630C 66 9F			ror :STACKORIGIN+9
 12097 630E A9 00			lda #$00
 12098 6310 8D 30 A0			sta MAX.A
 12099 6313 8D 31 A0			sta MAX.A+1
 12100 6316 A5 9F			lda :STACKORIGIN+9
 12101 6318 8D 32 A0			sta MAX.B
 12102 631B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12103 631D 8D 33 A0			sta MAX.B+1
 12104 6320 20 28 2E			jsr MAX
 12105 6323 A9 0C			lda #$0C
 12106 6325 8D 36 A0			sta MIN.A
 12107 6328 A9 00			lda #$00
 12108 632A 8D 37 A0			sta MIN.A+1
 12109 632D AD 34 A0			lda MAX.RESULT
 12110 6330 8D 38 A0			sta MIN.B
 12111 6333 AD 35 A0			lda MAX.RESULT+1
 12112 6336 8D 39 A0			sta MIN.B+1
 12113 6339 20 53 2E			jsr MIN
 12114 633C AD 3A A0			lda MIN.RESULT
 12115 633F 8D 59 A1			sta XB
 12116 6342 AD 3B A0			lda MIN.RESULT+1
 12117 6345 8D 5A A1			sta XB+1
 12118
 12119 				; optimize OK (service.pas), line = 2056
 12120
 12121 6348 AD 6B A1			lda NY
 12122 634B 85 9F			sta :STACKORIGIN+9
 12123 634D A0 00			ldy #$00
 12124 634F AD 6C A1			lda NY+1
 12125 6352 10 01			spl
 12126 6354 88				dey
 12127 6355 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12128 6357 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12129 6359 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12130 635B A5 9F			lda :STACKORIGIN+9
 12131 635D 18 69 18			add #$18
 12132 6360 85 9F			sta :STACKORIGIN+9
 12133 6362 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12134 6364 69 00			adc #$00
 12135 6366 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12136 6368 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12137 636A 69 00			adc #$00
 12138 636C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12139 636E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12140 6370 69 00			adc #$00
 12141 6372 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12142 6374 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12143 6376 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12144 6378 66 9F			ror :STACKORIGIN+9
 12145 637A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12146 637C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12147 637E 66 9F			ror :STACKORIGIN+9
 12148 6380 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12149 6382 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12150 6384 66 9F			ror :STACKORIGIN+9
 12151 6386 A5 9F			lda :STACKORIGIN+9
 12152 6388 38 E9 03			sub #$03
 12153 638B 8D 5B A1			sta YB
 12154 638E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12155 6390 E9 00			sbc #$00
 12156 6392 8D 5C A1			sta YB+1
 12157
 12158 				; optimize OK (service.pas), line = 2058
 12159
 12160 6395 AD 5B A1			lda YB
 12161 6398 0A				asl @
 12162 6399 0A				asl @
 12163 639A 0A				asl @
 12164 639B 0A				asl @
 12165 639C 18 6D 59 A1			add XB
 12166 63A0 A8				tay
 12167 63A1 B9 00 DB			lda adr.WALL,y
 12168 63A4 F0 03 4C 7B 64		jne l_1D8E
 12169
 12170 				; optimize OK (service.pas), line = 2060
 12171
 12172 63A9 AD 5D A1			lda OX
 12173 63AC 8D 69 A1			sta NX
 12174 63AF AD 5E A1			lda OX+1
 12175 63B2 8D 6A A1			sta NX+1
 12176
 12177 				; optimize OK (service.pas), line = 2061
 12178
 12179 63B5 AD 5F A1			lda OY
 12180 63B8 8D 6B A1			sta NY
 12181 63BB AD 60 A1			lda OY+1
 12182 63BE 8D 6C A1			sta NY+1
 12183
 12184 				; optimize OK (service.pas), line = 2063
 12185
 12186 63C1 AD 69 A1			lda NX
 12187 63C4 85 9F			sta :STACKORIGIN+9
 12188 63C6 A0 00			ldy #$00
 12189 63C8 AD 6A A1			lda NX+1
 12190 63CB 10 01			spl
 12191 63CD 88				dey
 12192 63CE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12193 63D0 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12194 63D2 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12195 63D4 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12196 63D6 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12197 63D8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12198 63DA 66 9F			ror :STACKORIGIN+9
 12199 63DC 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12200 63DE 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12201 63E0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12202 63E2 66 9F			ror :STACKORIGIN+9
 12203 63E4 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12204 63E6 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12205 63E8 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12206 63EA 66 9F			ror :STACKORIGIN+9
 12207 63EC 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
 12208 63EE 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
 12209 63F0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12210 63F2 66 9F			ror :STACKORIGIN+9
 12211 63F4 A9 00			lda #$00
 12212 63F6 8D 30 A0			sta MAX.A
 12213 63F9 8D 31 A0			sta MAX.A+1
 12214 63FC A5 9F			lda :STACKORIGIN+9
 12215 63FE 8D 32 A0			sta MAX.B
 12216 6401 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12217 6403 8D 33 A0			sta MAX.B+1
 12218 6406 20 28 2E			jsr MAX
 12219 6409 A9 0C			lda #$0C
 12220 640B 8D 36 A0			sta MIN.A
 12221 640E A9 00			lda #$00
 12222 6410 8D 37 A0			sta MIN.A+1
 12223 6413 AD 34 A0			lda MAX.RESULT
 12224 6416 8D 38 A0			sta MIN.B
 12225 6419 AD 35 A0			lda MAX.RESULT+1
 12226 641C 8D 39 A0			sta MIN.B+1
 12227 641F 20 53 2E			jsr MIN
 12228 6422 AD 3A A0			lda MIN.RESULT
 12229 6425 8D 59 A1			sta XB
 12230 6428 AD 3B A0			lda MIN.RESULT+1
 12231 642B 8D 5A A1			sta XB+1
 12232
 12233 				; optimize OK (service.pas), line = 2064
 12234
 12235 642E AD 6B A1			lda NY
 12236 6431 85 9F			sta :STACKORIGIN+9
 12237 6433 A0 00			ldy #$00
 12238 6435 AD 6C A1			lda NY+1
 12239 6438 10 01			spl
 12240 643A 88				dey
 12241 643B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12242 643D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12243 643F 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12244 6441 A5 9F			lda :STACKORIGIN+9
 12245 6443 18 69 18			add #$18
 12246 6446 85 9F			sta :STACKORIGIN+9
 12247 6448 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12248 644A 69 00			adc #$00
 12249 644C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12250 644E A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12251 6450 69 00			adc #$00
 12252 6452 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12253 6454 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12254 6456 69 00			adc #$00
 12255 6458 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12256 645A 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12257 645C 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12258 645E 66 9F			ror :STACKORIGIN+9
 12259 6460 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12260 6462 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12261 6464 66 9F			ror :STACKORIGIN+9
 12262 6466 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12263 6468 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12264 646A 66 9F			ror :STACKORIGIN+9
 12265 646C A5 9F			lda :STACKORIGIN+9
 12266 646E 38 E9 03			sub #$03
 12267 6471 8D 5B A1			sta YB
 12268 6474 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12269 6476 E9 00			sbc #$00
 12270 6478 8D 5C A1			sta YB+1
 12271 647B			l_1D8E
 12272 647B			l_1D53
 12273 647B			l_1C69
 12274
 12275 				; optimize OK (service.pas), line = 2070
 12276
 12277 647B AC 51 A1 84 84 AC + 	mwy BALL :bp2
 12278 6485 A0 00			ldy #BALL.X-DATAORIGIN
 12279 6487 AD 69 A1			lda NX
 12280 648A 18 69 09			add #$09
 12281 648D 91 84			sta (:bp2),y
 12282 648F C8				iny
 12283 6490 AD 6A A1			lda NX+1
 12284 6493 69 00			adc #$00
 12285 6495 91 84			sta (:bp2),y
 12286
 12287 				; optimize OK (service.pas), line = 2071
 12288
 12289 6497 A0 02			ldy #BALL.Y-DATAORIGIN
 12290 6499 AD 6B A1			lda NY
 12291 649C 18 69 16			add #$16
 12292 649F 91 84			sta (:bp2),y
 12293 64A1 C8				iny
 12294 64A2 AD 6C A1			lda NY+1
 12295 64A5 69 00			adc #$00
 12296 64A7 91 84			sta (:bp2),y
 12297
 12298 				; optimize OK (service.pas), line = 2075
 12299
 12300 64A9 AD 59 A1			lda XB
 12301 64AC 8D 43 A1			sta SHOOT_BLOCK.XB
 12302 64AF AD 5A A1			lda XB+1
 12303 64B2 8D 44 A1			sta SHOOT_BLOCK.XB+1
 12304 64B5 AD 5B A1			lda YB
 12305 64B8 8D 45 A1			sta SHOOT_BLOCK.YB
 12306 64BB AD 5C A1			lda YB+1
 12307 64BE 8D 46 A1			sta SHOOT_BLOCK.YB+1
 12308 64C1 AD 51 A1			lda BALL
 12309 64C4 8D 47 A1			sta SHOOT_BLOCK.BALL
 12310 64C7 AD 52 A1			lda BALL+1
 12311 64CA 8D 48 A1			sta SHOOT_BLOCK.BALL+1
 12312 64CD 20 FA 5B			jsr SHOOT_BLOCK
 12313
 12314 				; optimize OK (service.pas), line = 2077
 12315
 12316 64D0 AD 69 A1			lda NX
 12317 64D3 29 0F			and #$0F
 12318 64D5 85 9F			sta :STACKORIGIN+9
 12319 64D7 A9 00			lda #$00
 12320 64D9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12321 64DB 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12322 64DD 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 12323 64DF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 12324 64E1 66 9F			ror :STACKORIGIN+9
 12325 64E3 A5 9F			lda :STACKORIGIN+9
 12326 64E5 8D 55 A1			sta X
 12327 64E8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12328 64EA 8D 56 A1			sta X+1
 12329
 12330 				; optimize OK (service.pas), line = 2078
 12331
 12332 64ED AD 6B A1			lda NY
 12333 64F0 29 07			and #$07
 12334 64F2 8D 57 A1			sta Y
 12335 64F5 A9 00			lda #$00
 12336 64F7 8D 58 A1			sta Y+1
 12337
 12338 				; optimize OK (service.pas), line = 2090
 12339
 12340 64FA AD 56 A1			lda X+1
 12341 64FD 0D 55 A1			ora X
 12342 6500 F0 25			jeq l_1E1C
 12343 6502 AD 56 A1			lda X+1
 12344 6505 D0 05			bne @+
 12345 6507 AD 55 A1			lda X
 12346 650A C9 07			cmp #$07
 12347 				@
 12348 650C F0 19			jeq l_1E1C
 12349 650E AD 58 A1			lda Y+1
 12350 6511 0D 57 A1			ora Y
 12351 6514 F0 11			jeq l_1E1C
 12352 				@
 12353 6516 AD 58 A1			lda Y+1
 12354 6519 D0 05			bne @+
 12355 651B AD 57 A1			lda Y
 12356 651E C9 07			cmp #$07
 12357 				@
 12358 6520 F0 05			jeq l_1E1C
 12359
 12360 				; optimize OK (service.pas), line = 2091
 12361
 12362 6522 A9 03			lda #$03
 12363 6524 20 7E 2E			jsr FATAL_ERROR
 12364 6527			l_1E1C
 12365
 12366 				; optimize OK (service.pas), line = 2106
 12367
 12368 6527 AD 57 A1			lda Y
 12369 652A CD 55 A1			cmp X
 12370 652D AD 58 A1			lda Y+1
 12371 6530 ED 56 A1			sbc X+1
 12372 6533 50 02			svc
 12373 6535 49 80			eor #$80
 12374 6537 30 03 4C D0 65		jpl l_1E43
 12375 653C AD 57 A1			lda Y
 12376 653F 85 A2			sta :STACKORIGIN+12
 12377 6541 A0 00			ldy #$00
 12378 6543 AD 58 A1			lda Y+1
 12379 6546 10 01			spl
 12380 6548 88				dey
 12381 6549 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12382 654B 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12383 654D 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12384 654F A9 07			lda #$07
 12385 6551 38 E5 A2			sub :STACKORIGIN+12
 12386 6554 85 A1			sta :STACKORIGIN+11
 12387 6556 A9 00			lda #$00
 12388 6558 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12389 655A 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12390 655C A9 00			lda #$00
 12391 655E E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12392 6560 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12393 6562 A9 00			lda #$00
 12394 6564 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12395 6566 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12396 6568 AD 55 A1			lda X
 12397 656B 85 A0			sta :STACKORIGIN+10
 12398 656D A0 00			ldy #$00
 12399 656F AD 56 A1			lda X+1
 12400 6572 10 01			spl
 12401 6574 88				dey
 12402 6575 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12403 6577 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12404 6579 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12405 657B				.LOCAL
 12406 657B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12407 657D 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 12408 6580 D0 1C			bne L4
 12409 6582 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12410 6584 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12411 6586 D0 0A			bne L1
 12412 6588 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12413 658A C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12414 658C D0 04			bne L1
 12415 658E A5 A0			lda :STACKORIGIN+10
 12416 6590 C5 A1			cmp :STACKORIGIN+11
 12417 6592 F0 10		L1	beq L5
 12418 6594 B0 04			bcs L3
 12419 6596 A9 FF			lda #$FF
 12420 6598 D0 0A			bne L5
 12421 659A A9 01		L3	lda #$01
 12422 659C D0 06			bne L5
 12423 659E 50 04		L4	bvc L5
 12424 65A0 49 FF			eor #$FF
 12425 65A2 09 01			ora #$01
 12426 65A4			L5
 12427 					.ENDL
 12428 65A4 10 2A			jpl l_1E43
 12429
 12430 				; optimize OK (service.pas), line = 2108
 12431
 12432 65A6 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 12433 65B0 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12434 65B2 A9 00			lda #$00
 12435 65B4 38 F1 84			sub (:bp2),y
 12436 65B7 85 9F			sta :STACKORIGIN+9
 12437 65B9 C8				iny
 12438 65BA A9 00			lda #$00
 12439 65BC F1 84			sbc (:bp2),y
 12440 65BE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12441 65C0 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12442 65C2 A5 9F			lda :STACKORIGIN+9
 12443 65C4 91 84			sta (:bp2),y
 12444 65C6 C8				iny
 12445 65C7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12446 65C9 91 84			sta (:bp2),y
 12447
 12448 				; optimize OK (service.pas), line = 2109
 12449
 12450 65CB A9 01			lda #$01
 12451 65CD 8D 79 A1			sta EMERGENCY
 12452 65D0			l_1E43
 12453
 12454 				; optimize OK (service.pas), line = 2113
 12455
 12456 65D0 AD 57 A1			lda Y
 12457 65D3 85 A0			sta :STACKORIGIN+10
 12458 65D5 A0 00			ldy #$00
 12459 65D7 AD 58 A1			lda Y+1
 12460 65DA 10 01			spl
 12461 65DC 88				dey
 12462 65DD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12463 65DF 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12464 65E1 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12465 65E3 A9 07			lda #$07
 12466 65E5 38 E5 A0			sub :STACKORIGIN+10
 12467 65E8 85 9F			sta :STACKORIGIN+9
 12468 65EA A9 00			lda #$00
 12469 65EC E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12470 65EE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12471 65F0 A9 00			lda #$00
 12472 65F2 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 12473 65F4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12474 65F6 A9 00			lda #$00
 12475 65F8 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 12476 65FA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12477 65FC AD 55 A1			lda X
 12478 65FF 85 A0			sta :STACKORIGIN+10
 12479 6601 A0 00			ldy #$00
 12480 6603 AD 56 A1			lda X+1
 12481 6606 10 01			spl
 12482 6608 88				dey
 12483 6609 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12484 660B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12485 660D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12486 660F				.LOCAL
 12487 660F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12488 6611 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12489 6614 D0 1C			bne L4
 12490 6616 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12491 6618 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12492 661A D0 0A			bne L1
 12493 661C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12494 661E C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12495 6620 D0 04			bne L1
 12496 6622 A5 9F			lda :STACKORIGIN+9
 12497 6624 C5 A0			cmp :STACKORIGIN+10
 12498 6626 F0 10		L1	beq L5
 12499 6628 B0 04			bcs L3
 12500 662A A9 FF			lda #$FF
 12501 662C D0 0A			bne L5
 12502 662E A9 01		L3	lda #$01
 12503 6630 D0 06			bne L5
 12504 6632 50 04		L4	bvc L5
 12505 6634 49 FF			eor #$FF
 12506 6636 09 01			ora #$01
 12507 6638			L5
 12508 					.ENDL
 12509 6638 10 3C			jpl l_1E74
 12510 663A AD 55 A1			lda X
 12511 663D CD 57 A1			cmp Y
 12512 6640 AD 56 A1			lda X+1
 12513 6643 ED 58 A1			sbc Y+1
 12514 6646 50 02			svc
 12515 6648 49 80			eor #$80
 12516 664A 10 2A			jpl l_1E74
 12517
 12518 				; optimize OK (service.pas), line = 2115
 12519
 12520 664C AC 51 A1 84 84 AC + 	mwy BALL :bp2
 12521 6656 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12522 6658 A9 00			lda #$00
 12523 665A 38 F1 84			sub (:bp2),y
 12524 665D 85 9F			sta :STACKORIGIN+9
 12525 665F C8				iny
 12526 6660 A9 00			lda #$00
 12527 6662 F1 84			sbc (:bp2),y
 12528 6664 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12529 6666 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12530 6668 A5 9F			lda :STACKORIGIN+9
 12531 666A 91 84			sta (:bp2),y
 12532 666C C8				iny
 12533 666D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12534 666F 91 84			sta (:bp2),y
 12535
 12536 				; optimize OK (service.pas), line = 2116
 12537
 12538 6671 A9 03			lda #$03
 12539 6673 8D 79 A1			sta EMERGENCY
 12540 6676			l_1E74
 12541
 12542 				; optimize OK (service.pas), line = 2120
 12543
 12544 6676 AD 55 A1			lda X
 12545 6679 CD 57 A1			cmp Y
 12546 667C AD 56 A1			lda X+1
 12547 667F ED 58 A1			sbc Y+1
 12548 6682 50 02			svc
 12549 6684 49 80			eor #$80
 12550 6686 30 03 4C 1F 67		jpl l_1EA5
 12551 668B AD 55 A1			lda X
 12552 668E 85 A2			sta :STACKORIGIN+12
 12553 6690 A0 00			ldy #$00
 12554 6692 AD 56 A1			lda X+1
 12555 6695 10 01			spl
 12556 6697 88				dey
 12557 6698 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12558 669A 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12559 669C 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12560 669E A9 07			lda #$07
 12561 66A0 38 E5 A2			sub :STACKORIGIN+12
 12562 66A3 85 A1			sta :STACKORIGIN+11
 12563 66A5 A9 00			lda #$00
 12564 66A7 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12565 66A9 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12566 66AB A9 00			lda #$00
 12567 66AD E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12568 66AF 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12569 66B1 A9 00			lda #$00
 12570 66B3 E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12571 66B5 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12572 66B7 AD 57 A1			lda Y
 12573 66BA 85 A0			sta :STACKORIGIN+10
 12574 66BC A0 00			ldy #$00
 12575 66BE AD 58 A1			lda Y+1
 12576 66C1 10 01			spl
 12577 66C3 88				dey
 12578 66C4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12579 66C6 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12580 66C8 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12581 66CA				.LOCAL
 12582 66CA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12583 66CC 38 E5 D1			sub :STACKORIGIN+STACKWIDTH*3+11
 12584 66CF D0 1C			bne L4
 12585 66D1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12586 66D3 C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12587 66D5 D0 0A			bne L1
 12588 66D7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12589 66D9 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12590 66DB D0 04			bne L1
 12591 66DD A5 A0			lda :STACKORIGIN+10
 12592 66DF C5 A1			cmp :STACKORIGIN+11
 12593 66E1 F0 10		L1	beq L5
 12594 66E3 B0 04			bcs L3
 12595 66E5 A9 FF			lda #$FF
 12596 66E7 D0 0A			bne L5
 12597 66E9 A9 01		L3	lda #$01
 12598 66EB D0 06			bne L5
 12599 66ED 50 04		L4	bvc L5
 12600 66EF 49 FF			eor #$FF
 12601 66F1 09 01			ora #$01
 12602 66F3			L5
 12603 					.ENDL
 12604 66F3 10 2A			jpl l_1EA5
 12605
 12606 				; optimize OK (service.pas), line = 2122
 12607
 12608 66F5 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 12609 66FF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12610 6701 A9 00			lda #$00
 12611 6703 38 F1 84			sub (:bp2),y
 12612 6706 85 9F			sta :STACKORIGIN+9
 12613 6708 C8				iny
 12614 6709 A9 00			lda #$00
 12615 670B F1 84			sbc (:bp2),y
 12616 670D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12617 670F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12618 6711 A5 9F			lda :STACKORIGIN+9
 12619 6713 91 84			sta (:bp2),y
 12620 6715 C8				iny
 12621 6716 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12622 6718 91 84			sta (:bp2),y
 12623
 12624 				; optimize OK (service.pas), line = 2123
 12625
 12626 671A A9 02			lda #$02
 12627 671C 8D 79 A1			sta EMERGENCY
 12628 671F			l_1EA5
 12629
 12630 				; optimize OK (service.pas), line = 2127
 12631
 12632 671F AD 55 A1			lda X
 12633 6722 85 A0			sta :STACKORIGIN+10
 12634 6724 A0 00			ldy #$00
 12635 6726 AD 56 A1			lda X+1
 12636 6729 10 01			spl
 12637 672B 88				dey
 12638 672C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12639 672E 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12640 6730 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12641 6732 A9 07			lda #$07
 12642 6734 38 E5 A0			sub :STACKORIGIN+10
 12643 6737 85 9F			sta :STACKORIGIN+9
 12644 6739 A9 00			lda #$00
 12645 673B E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12646 673D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12647 673F A9 00			lda #$00
 12648 6741 E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
 12649 6743 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12650 6745 A9 00			lda #$00
 12651 6747 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
 12652 6749 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12653 674B AD 57 A1			lda Y
 12654 674E 85 A0			sta :STACKORIGIN+10
 12655 6750 A0 00			ldy #$00
 12656 6752 AD 58 A1			lda Y+1
 12657 6755 10 01			spl
 12658 6757 88				dey
 12659 6758 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12660 675A 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12661 675C 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12662 675E				.LOCAL
 12663 675E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12664 6760 38 E5 D0			sub :STACKORIGIN+STACKWIDTH*3+10
 12665 6763 D0 1C			bne L4
 12666 6765 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12667 6767 C5 C0			cmp :STACKORIGIN+STACKWIDTH*2+10
 12668 6769 D0 0A			bne L1
 12669 676B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12670 676D C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 12671 676F D0 04			bne L1
 12672 6771 A5 9F			lda :STACKORIGIN+9
 12673 6773 C5 A0			cmp :STACKORIGIN+10
 12674 6775 F0 10		L1	beq L5
 12675 6777 B0 04			bcs L3
 12676 6779 A9 FF			lda #$FF
 12677 677B D0 0A			bne L5
 12678 677D A9 01		L3	lda #$01
 12679 677F D0 06			bne L5
 12680 6781 50 04		L4	bvc L5
 12681 6783 49 FF			eor #$FF
 12682 6785 09 01			ora #$01
 12683 6787			L5
 12684 					.ENDL
 12685 6787 10 3C			jpl l_1ED6
 12686 6789 AD 57 A1			lda Y
 12687 678C CD 55 A1			cmp X
 12688 678F AD 58 A1			lda Y+1
 12689 6792 ED 56 A1			sbc X+1
 12690 6795 50 02			svc
 12691 6797 49 80			eor #$80
 12692 6799 10 2A			jpl l_1ED6
 12693
 12694 				; optimize OK (service.pas), line = 2129
 12695
 12696 679B AC 51 A1 84 84 AC + 	mwy BALL :bp2
 12697 67A5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12698 67A7 A9 00			lda #$00
 12699 67A9 38 F1 84			sub (:bp2),y
 12700 67AC 85 9F			sta :STACKORIGIN+9
 12701 67AE C8				iny
 12702 67AF A9 00			lda #$00
 12703 67B1 F1 84			sbc (:bp2),y
 12704 67B3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12705 67B5 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12706 67B7 A5 9F			lda :STACKORIGIN+9
 12707 67B9 91 84			sta (:bp2),y
 12708 67BB C8				iny
 12709 67BC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12710 67BE 91 84			sta (:bp2),y
 12711
 12712 				; optimize OK (service.pas), line = 2130
 12713
 12714 67C0 A9 04			lda #$04
 12715 67C2 8D 79 A1			sta EMERGENCY
 12716 67C5			l_1ED6
 12717
 12718 				; optimize OK (service.pas), line = 2134
 12719
 12720 67C5 AD 56 A1			lda X+1
 12721 67C8 CD 58 A1			cmp Y+1
 12722 67CB D0 06			bne @+
 12723 67CD AD 55 A1			lda X
 12724 67D0 CD 57 A1			cmp Y
 12725 				@
 12726 67D3 F0 5A			jeq l_1F07x
 12727 67D5 AD 57 A1			lda Y
 12728 67D8 85 A2			sta :STACKORIGIN+12
 12729 67DA A0 00			ldy #$00
 12730 67DC AD 58 A1			lda Y+1
 12731 67DF 10 01			spl
 12732 67E1 88				dey
 12733 67E2 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 12734 67E4 84 C2			sty :STACKORIGIN+STACKWIDTH*2+12
 12735 67E6 84 D2			sty :STACKORIGIN+STACKWIDTH*3+12
 12736 67E8 A9 07			lda #$07
 12737 67EA 38 E5 A2			sub :STACKORIGIN+12
 12738 67ED 85 A1			sta :STACKORIGIN+11
 12739 67EF A9 00			lda #$00
 12740 67F1 E5 B2			sbc :STACKORIGIN+STACKWIDTH+12
 12741 67F3 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12742 67F5 A9 00			lda #$00
 12743 67F7 E5 C2			sbc :STACKORIGIN+STACKWIDTH*2+12
 12744 67F9 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 12745 67FB A9 00			lda #$00
 12746 67FD E5 D2			sbc :STACKORIGIN+STACKWIDTH*3+12
 12747 67FF 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 12748 6801 AD 55 A1			lda X
 12749 6804 85 A0			sta :STACKORIGIN+10
 12750 6806 A0 00			ldy #$00
 12751 6808 AD 56 A1			lda X+1
 12752 680B 10 01			spl
 12753 680D 88				dey
 12754 680E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12755 6810 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12756 6812 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12757 6814 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12758 6816 C5 D1			cmp :STACKORIGIN+STACKWIDTH*3+11
 12759 6818 D0 10			bne @+
 12760 681A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12761 681C C5 C1			cmp :STACKORIGIN+STACKWIDTH*2+11
 12762 681E D0 0A			bne @+
 12763 6820 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12764 6822 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
 12765 6824 D0 04			bne @+
 12766 6826 A5 A0			lda :STACKORIGIN+10
 12767 6828 C5 A1			cmp :STACKORIGIN+11
 12768 				@
 12769 682A F0 03 4C 2A 6F		jne l_1F07
 12770 682F			l_1F07x
 12771
 12772 				; optimize OK (service.pas), line = 2136
 12773
 12774 682F A9 00			lda #$00
 12775 6831 8D 7A A1			sta DEFLECT
 12776
 12777 				; optimize OK (service.pas), line = 2137
 12778
 12779 6834 8D 7D A1			sta TOUCH
 12780
 12781 				; optimize OK (service.pas), line = 2145
 12782
 12783 6837 AD 55 A1			lda X
 12784 683A C9 05			cmp #$05
 12785 683C AD 56 A1			lda X+1
 12786 683F E9 00			sbc #$00
 12787 6841 50 02			svc
 12788 6843 49 80			eor #$80
 12789 6845 30 08			jmi l_1F21
 12790 6847 AD 7D A1			lda TOUCH
 12791 684A 09 01			ora #$01
 12792 684C 8D 7D A1			sta TOUCH
 12793 684F			l_1F21
 12794
 12795 				; optimize OK (service.pas), line = 2146
 12796
 12797 684F AD 57 A1			lda Y
 12798 6852 C9 05			cmp #$05
 12799 6854 AD 58 A1			lda Y+1
 12800 6857 E9 00			sbc #$00
 12801 6859 50 02			svc
 12802 685B 49 80			eor #$80
 12803 685D 30 08			jmi l_1F3F
 12804 685F AD 7D A1			lda TOUCH
 12805 6862 09 02			ora #$02
 12806 6864 8D 7D A1			sta TOUCH
 12807 6867			l_1F3F
 12808
 12809 				; optimize OK (service.pas), line = 2156
 12810
 12811 6867 A9 FF			lda #$FF
 12812 6869 8D 61 A1			sta LX
 12813 686C 8D 62 A1			sta LX+1
 12814
 12815 686F			l_1F55
 12816 				; --- ForToDoCondition
 12817 686F AD 61 A1			lda LX
 12818 6872 C9 02			cmp #$02
 12819 6874 AD 62 A1			lda LX+1
 12820 6877 E9 00			sbc #$00
 12821 6879 50 02			svc
 12822 687B 49 80			eor #$80
 12823 687D 0A				asl @
 12824 687E B0 03 4C AA 6A		jcc l_1F61
 12825
 12826 				; optimize OK (service.pas), line = 2157
 12827
 12828 6883 A9 FF			lda #$FF
 12829 6885 8D 63 A1			sta LY
 12830 6888 8D 64 A1			sta LY+1
 12831
 12832 688B			l_1F6A
 12833 				; --- ForToDoCondition
 12834 688B AD 63 A1			lda LY
 12835 688E C9 02			cmp #$02
 12836 6890 AD 64 A1			lda LY+1
 12837 6893 E9 00			sbc #$00
 12838 6895 50 02			svc
 12839 6897 49 80			eor #$80
 12840 6899 0A				asl @
 12841 689A B0 03 4C 9C 6A		jcc l_1F76
 12842
 12843 				; optimize FAIL (1, service.pas), line = 2159
 12844
 12845 689F E8				inx
 12846 68A0 A9 00 95 96			mva #$00 :STACKORIGIN,x
 12847 68A4 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12848 68A6 E8				inx
 12849 68A7 A9 0C 95 96			mva #$0C :STACKORIGIN,x
 12850 68AB A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 12851 68AF AD 59 A1			lda XB
 12852 68B2 18 6D 61 A1			add LX
 12853 68B6 8D 36 A0			sta MIN.A
 12854 68B9 AD 5A A1			lda XB+1
 12855 68BC 6D 62 A1			adc LX+1
 12856 68BF 8D 37 A0			sta MIN.A+1
 12857 68C2 B5 96			lda :STACKORIGIN,x
 12858 68C4 8D 38 A0			sta MIN.B
 12859 68C7 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12860 68C9 8D 39 A0			sta MIN.B+1
 12861 68CC CA				dex
 12862 68CD 20 53 2E			jsr MIN
 12863 68D0 AD 3A A0			lda MIN.RESULT
 12864 68D3 8D 30 A0			sta MAX.A
 12865 68D6 AD 3B A0			lda MIN.RESULT+1
 12866 68D9 8D 31 A0			sta MAX.A+1
 12867 68DC B5 96			lda :STACKORIGIN,x
 12868 68DE 8D 32 A0			sta MAX.B
 12869 68E1 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12870 68E3 8D 33 A0			sta MAX.B+1
 12871 68E6 CA				dex
 12872 68E7 20 28 2E			jsr MAX
 12873 68EA AD 34 A0			lda MAX.RESULT
 12874 68ED 8D 65 A1			sta MX
 12875 68F0 AD 35 A0			lda MAX.RESULT+1
 12876 68F3 8D 66 A1			sta MX+1
 12877
 12878 				; optimize OK (service.pas), line = 2160
 12879
 12880 68F6 AD 5B A1			lda YB
 12881 68F9 18 6D 63 A1			add LY
 12882 68FD 8D 67 A1			sta MY
 12883 6900 AD 5C A1			lda YB+1
 12884 6903 6D 64 A1			adc LY+1
 12885 6906 8D 68 A1			sta MY+1
 12886
 12887 				; optimize OK (service.pas), line = 2164
 12888
 12889 6909 AD 59 A1			lda XB
 12890 690C 85 9F			sta :STACKORIGIN+9
 12891 690E A0 00			ldy #$00
 12892 6910 AD 5A A1			lda XB+1
 12893 6913 10 01			spl
 12894 6915 88				dey
 12895 6916 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12896 6918 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 12897 691A 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 12898 691C AD 61 A1			lda LX
 12899 691F 85 A0			sta :STACKORIGIN+10
 12900 6921 A0 00			ldy #$00
 12901 6923 AD 62 A1			lda LX+1
 12902 6926 10 01			spl
 12903 6928 88				dey
 12904 6929 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12905 692B 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12906 692D 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12907 692F A5 9F			lda :STACKORIGIN+9
 12908 6931 18 65 A0			add :STACKORIGIN+10
 12909 6934 F0 03 4C 42 6A		jne l_1FCBx
 12910 6939 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12911 693B 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 12912 693D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12913 693F A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 12914 6941 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 12915 6943 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 12916 6945 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 12917 6947 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 12918 6949 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 12919 694B 10 03 4C 42 6A		jmi l_1FCBx
 12920 6950 AD 59 A1			lda XB
 12921 6953 85 A0			sta :STACKORIGIN+10
 12922 6955 A0 00			ldy #$00
 12923 6957 AD 5A A1			lda XB+1
 12924 695A 10 01			spl
 12925 695C 88				dey
 12926 695D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12927 695F 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 12928 6961 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 12929 6963 AD 61 A1			lda LX
 12930 6966 85 A1			sta :STACKORIGIN+11
 12931 6968 A0 00			ldy #$00
 12932 696A AD 62 A1			lda LX+1
 12933 696D 10 01			spl
 12934 696F 88				dey
 12935 6970 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 12936 6972 84 C1			sty :STACKORIGIN+STACKWIDTH*2+11
 12937 6974 84 D1			sty :STACKORIGIN+STACKWIDTH*3+11
 12938 6976 A5 A0			lda :STACKORIGIN+10
 12939 6978 18 65 A1			add :STACKORIGIN+11
 12940 697B 85 A0			sta :STACKORIGIN+10
 12941 697D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12942 697F 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 12943 6981 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 12944 6983 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12945 6985 65 C1			adc :STACKORIGIN+STACKWIDTH*2+11
 12946 6987 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 12947 6989 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12948 698B 65 D1			adc :STACKORIGIN+STACKWIDTH*3+11
 12949 698D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 12950 698F				.LOCAL
 12951 698F A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 12952 6991 38 E9 00			sub #$00
 12953 6994 D0 1C			bne L4
 12954 6996 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 12955 6998 C9 00			cmp #$00
 12956 699A D0 0A			bne L1
 12957 699C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 12958 699E C9 00			cmp #$00
 12959 69A0 D0 04			bne L1
 12960 69A2 A5 A0			lda :STACKORIGIN+10
 12961 69A4 C9 0C			cmp #$0C
 12962 69A6 F0 10		L1	beq L5
 12963 69A8 B0 04			bcs L3
 12964 69AA A9 FF			lda #$FF
 12965 69AC D0 0A			bne L5
 12966 69AE A9 01		L3	lda #$01
 12967 69B0 D0 06			bne L5
 12968 69B2 50 04		L4	bvc L5
 12969 69B4 49 FF			eor #$FF
 12970 69B6 09 01			ora #$01
 12971 69B8			L5
 12972 					.ENDL
 12973 69B8 F0 02			seq
 12974 69BA 10 03			bpl @+
 12975 69BC 4C C2 69			jmp *+6
 12976 69BF 4C 42 6A		@	jmp l_1FCBx
 12977 69C2 A9 10			lda #$10
 12978 69C4 85 8E			sta :ecx
 12979 69C6 85 92			sta :ztmp8
 12980 69C8 A9 00			lda #$00
 12981 69CA 85 8F			sta :ecx+1
 12982 69CC 85 93			sta :ztmp9
 12983 69CE AD 67 A1			lda MY
 12984 69D1 85 86			sta :eax
 12985 69D3 85 94			sta :ztmp10
 12986 69D5 AD 68 A1			lda MY+1
 12987 69D8 85 87			sta :eax+1
 12988 69DA 85 95			sta :ztmp11
 12989 					.ifdef fmulinit
 12990 					fmulu_16
 12991 					els
 12992 69DC 20 12 13			imulCX
 12993 					eif
 12994 69DF A5 95			lda :ztmp11
 12995 69E1 10 0D			bpl @+
 12996 69E3 A5 88			lda :eax+2
 12997 69E5 38 E5 92			sub :ztmp8
 12998 69E8 85 88			sta :eax+2
 12999 69EA A5 89			lda :eax+3
 13000 69EC E5 93			sbc :ztmp9
 13001 69EE 85 89			sta :eax+3
 13002 				@
 13003 69F0 A5 93			lda :ztmp9
 13004 69F2 10 0D			bpl @+
 13005 69F4 A5 88			lda :eax+2
 13006 69F6 38 E5 94			sub :ztmp10
 13007 69F9 85 88			sta :eax+2
 13008 69FB A5 89			lda :eax+3
 13009 69FD E5 95			sbc :ztmp11
 13010 69FF 85 89			sta :eax+3
 13011 				@
 13012 6A01 A5 86			lda :eax
 13013 6A03 85 A1			sta :STACKORIGIN+11
 13014 6A05 A5 87			lda :eax+1
 13015 6A07 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 13016 6A09 A5 88			lda :eax+2
 13017 6A0B 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 13018 6A0D A5 89			lda :eax+3
 13019 6A0F 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 13020 6A11 AD 65 A1			lda MX
 13021 6A14 85 A0			sta :STACKORIGIN+10
 13022 6A16 A0 00			ldy #$00
 13023 6A18 AD 66 A1			lda MX+1
 13024 6A1B 10 01			spl
 13025 6A1D 88				dey
 13026 6A1E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13027 6A20 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 13028 6A22 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 13029 6A24 A5 A0			lda :STACKORIGIN+10
 13030 6A26 18 65 A1			add :STACKORIGIN+11
 13031 6A29 85 A0			sta :STACKORIGIN+10
 13032 6A2B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13033 6A2D 65 B1			adc :STACKORIGIN+STACKWIDTH+11
 13034 6A2F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13035 6A31 A5 A0			lda :STACKORIGIN+10
 13036 6A33 18 69 00			add #$00
 13037 6A36 A8				tay
 13038 6A37 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13039 6A39 69 00			adc #$00
 13040 6A3B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13041 6A3D B9 00 DB			lda adr.WALL,y
 13042 6A40 F0 26			jeq l_1FCB
 13043 				@
 13044 6A42			l_1FCBx
 13045
 13046 				; optimize OK (service.pas), line = 2167
 13047
 13048 6A42 AD 61 A1			lda LX
 13049 6A45 18 69 01			add #$01
 13050 6A48 85 86			sta :eax
 13051 6A4A AD 62 A1			lda LX+1
 13052 6A4D 69 00			adc #$00
 13053 6A4F 85 87			sta :eax+1
 13054 6A51 A9 03			lda #$03
 13055 6A53 85 8E			sta :ecx
 13056 6A55 A9 00			lda #$00
 13057 6A57 85 8F			sta :ecx+1
 13058 					.ifdef fmulinit
 13059 					fmulu_16
 13060 					els
 13061 6A59 20 12 13			imulCX
 13062 					eif
 13063 6A5C A5 86			lda :eax
 13064 6A5E 18 6D 63 A1			add LY
 13065 6A62 A8				tay
 13066 6A63 A9 01			lda #$01
 13067 6A65 4C 8B 6A			jmp l_1FEC
 13068 6A68			l_1FCB
 13069
 13070 				; optimize OK (service.pas), line = 2169
 13071
 13072 6A68 AD 61 A1			lda LX
 13073 6A6B 18 69 01			add #$01
 13074 6A6E 85 86			sta :eax
 13075 6A70 AD 62 A1			lda LX+1
 13076 6A73 69 00			adc #$00
 13077 6A75 85 87			sta :eax+1
 13078 6A77 A9 03			lda #$03
 13079 6A79 85 8E			sta :ecx
 13080 6A7B A9 00			lda #$00
 13081 6A7D 85 8F			sta :ecx+1
 13082 					.ifdef fmulinit
 13083 					fmulu_16
 13084 					els
 13085 6A7F 20 12 13			imulCX
 13086 					eif
 13087 6A82 A5 86			lda :eax
 13088 6A84 18 6D 63 A1			add LY
 13089 6A88 A8				tay
 13090 6A89 A9 00			lda #$00
 13091 6A8B			l_1FEC
 13092 6A8B 99 7F A1			sta adr.ADJW+$01,y
 13093
 13094 				; --- ForToDoEpilog
 13095 6A8E EE 63 A1			inc LY
 13096 6A91 F0 03 4C 8B 68		jne l_1F6A
 13097 6A96 EE 64 A1			inc LY+1
 13098 6A99 4C 8B 68			jmp l_1F6A
 13099 6A9C			l_1F76
 13100
 13101 				; --- ForToDoEpilog
 13102 6A9C EE 61 A1			inc LX
 13103 6A9F F0 03 4C 6F 68		jne l_1F55
 13104 6AA4 EE 62 A1			inc LX+1
 13105 6AA7 4C 6F 68			jmp l_1F55
 13106 6AAA			l_1F61
 13107
 13108 				; optimize OK (service.pas), line = 2188
 13109
 13110 6AAA AD 7E A1			lda adr.ADJW
 13111 6AAD 85 9F			sta :STACKORIGIN+9
 13112 6AAF AD 81 A1			lda adr.ADJW+$03
 13113 6AB2 0A				asl @
 13114 6AB3 18 65 9F			add :STACKORIGIN+9
 13115 6AB6 85 9F			sta :STACKORIGIN+9
 13116 6AB8 AD 84 A1			lda adr.ADJW+$06
 13117 6ABB 0A				asl @
 13118 6ABC 0A				asl @
 13119 6ABD 18 65 9F			add :STACKORIGIN+9
 13120 6AC0 85 9F			sta :STACKORIGIN+9
 13121 6AC2 AD 85 A1			lda adr.ADJW+$07
 13122 6AC5 0A				asl @
 13123 6AC6 0A				asl @
 13124 6AC7 0A				asl @
 13125 6AC8 18 65 9F			add :STACKORIGIN+9
 13126 6ACB 85 9F			sta :STACKORIGIN+9
 13127 6ACD AD 86 A1			lda adr.ADJW+$08
 13128 6AD0 0A				asl @
 13129 6AD1 0A				asl @
 13130 6AD2 0A				asl @
 13131 6AD3 0A				asl @
 13132 6AD4 18 65 9F			add :STACKORIGIN+9
 13133 6AD7 85 9F			sta :STACKORIGIN+9
 13134 6AD9 AD 83 A1			lda adr.ADJW+$05
 13135 6ADC 0A				asl @
 13136 6ADD 0A				asl @
 13137 6ADE 0A				asl @
 13138 6ADF 0A				asl @
 13139 6AE0 0A				asl @
 13140 6AE1 18 65 9F			add :STACKORIGIN+9
 13141 6AE4 85 9F			sta :STACKORIGIN+9
 13142 6AE6 AD 80 A1			lda adr.ADJW+$02
 13143 6AE9 0A				asl @
 13144 6AEA 0A				asl @
 13145 6AEB 0A				asl @
 13146 6AEC 0A				asl @
 13147 6AED 0A				asl @
 13148 6AEE 0A				asl @
 13149 6AEF 18 65 9F			add :STACKORIGIN+9
 13150 6AF2 85 9F			sta :STACKORIGIN+9
 13151 6AF4 AD 7F A1			lda adr.ADJW+$01
 13152 6AF7 0A				asl @
 13153 6AF8 0A				asl @
 13154 6AF9 0A				asl @
 13155 6AFA 0A				asl @
 13156 6AFB 0A				asl @
 13157 6AFC 0A				asl @
 13158 6AFD 0A				asl @
 13159 6AFE 18 65 9F			add :STACKORIGIN+9
 13160 6B01 8D 7B A1			sta AROUND
 13161
 13162 				; optimize OK (service.pas), line = 2219
 13163
 13164 6B04 AD 7D A1			lda TOUCH
 13165 6B07 F0 03 4C A2 6B		jne l_2093
 13166
 13167 				; optimize OK (service.pas), line = 2221
 13168
 13169 6B0C AD 7B A1			lda AROUND
 13170 6B0F 29 83			and #$83
 13171 6B11 D0 05			jne l_20AA
 13172 6B13 A9 11			lda #$11
 13173 6B15 8D 7A A1			sta DEFLECT
 13174 6B18			l_20AA
 13175
 13176 				; optimize OK (service.pas), line = 2222
 13177
 13178 6B18 AD 7B A1			lda AROUND
 13179 6B1B 29 83			and #$83
 13180 6B1D C9 01			cmp #$01
 13181 6B1F D0 05			jne l_20C7
 13182 6B21 A9 33			lda #$33
 13183 6B23 8D 7A A1			sta DEFLECT
 13184 6B26			l_20C7
 13185
 13186 				; optimize OK (service.pas), line = 2223
 13187
 13188 6B26 AD 7B A1			lda AROUND
 13189 6B29 29 83			and #$83
 13190 6B2B C9 02			cmp #$02
 13191 6B2D D0 05			jne l_20E4
 13192 6B2F A9 10			lda #$10
 13193 6B31 8D 7A A1			sta DEFLECT
 13194 6B34			l_20E4
 13195
 13196 				; optimize OK (service.pas), line = 2224
 13197
 13198 6B34 AD 7B A1			lda AROUND
 13199 6B37 29 83			and #$83
 13200 6B39 C9 03			cmp #$03
 13201 6B3B D0 05			jne l_2101
 13202 6B3D A9 12			lda #$12
 13203 6B3F 8D 7A A1			sta DEFLECT
 13204 6B42			l_2101
 13205
 13206 				; optimize OK (service.pas), line = 2225
 13207
 13208 6B42 AD 7B A1			lda AROUND
 13209 6B45 29 83			and #$83
 13210 6B47 C9 80			cmp #$80
 13211 6B49 D0 05			jne l_211E
 13212 6B4B A9 01			lda #$01
 13213 6B4D 8D 7A A1			sta DEFLECT
 13214 6B50			l_211E
 13215
 13216 				; optimize OK (service.pas), line = 2226
 13217
 13218 6B50 AD 7B A1			lda AROUND
 13219 6B53 29 83			and #$83
 13220 6B55 C9 81			cmp #$81
 13221 6B57 D0 05			jne l_213B
 13222 6B59 A9 21			lda #$21
 13223 6B5B 8D 7A A1			sta DEFLECT
 13224 6B5E			l_213B
 13225
 13226 				; optimize OK (service.pas), line = 2227
 13227
 13228 6B5E AD 7B A1			lda AROUND
 13229 6B61 29 83			and #$83
 13230 6B63 C9 82			cmp #$82
 13231 6B65 D0 05			jne l_2158
 13232 6B67 A9 11			lda #$11
 13233 6B69 8D 7A A1			sta DEFLECT
 13234 6B6C			l_2158
 13235
 13236 				; optimize OK (service.pas), line = 2229
 13237
 13238 6B6C A9 05			lda #$05
 13239 6B6E 8D 79 A1			sta EMERGENCY
 13240
 13241 				; optimize OK (service.pas), line = 2230
 13242
 13243 6B71 AD 5B A1			lda YB
 13244 6B74 38 E9 01			sub #$01
 13245 6B77 8D 45 A1			sta SHOOT_BLOCK.YB
 13246 6B7A AD 5C A1			lda YB+1
 13247 6B7D E9 00			sbc #$00
 13248 6B7F 8D 46 A1			sta SHOOT_BLOCK.YB+1
 13249 6B82 AD 59 A1			lda XB
 13250 6B85 38 E9 01			sub #$01
 13251 6B88 8D 43 A1			sta SHOOT_BLOCK.XB
 13252 6B8B AD 5A A1			lda XB+1
 13253 6B8E E9 00			sbc #$00
 13254 6B90 8D 44 A1			sta SHOOT_BLOCK.XB+1
 13255 6B93 AD 51 A1			lda BALL
 13256 6B96 8D 47 A1			sta SHOOT_BLOCK.BALL
 13257 6B99 AD 52 A1			lda BALL+1
 13258 6B9C 8D 48 A1			sta SHOOT_BLOCK.BALL+1
 13259 6B9F 20 FA 5B			jsr SHOOT_BLOCK
 13260 6BA2			l_2093
 13261
 13262 				; optimize OK (service.pas), line = 2235
 13263
 13264 6BA2 AD 7D A1			lda TOUCH
 13265 6BA5 C9 01			cmp #$01
 13266 6BA7 F0 03 4C 42 6C		jne l_2186
 13267
 13268 				; optimize OK (service.pas), line = 2237
 13269
 13270 6BAC AD 7B A1			lda AROUND
 13271 6BAF 29 0E			and #$0E
 13272 6BB1 D0 05			jne l_219D
 13273 6BB3 A9 21			lda #$21
 13274 6BB5 8D 7A A1			sta DEFLECT
 13275 6BB8			l_219D
 13276
 13277 				; optimize OK (service.pas), line = 2238
 13278
 13279 6BB8 AD 7B A1			lda AROUND
 13280 6BBB 29 0E			and #$0E
 13281 6BBD C9 02			cmp #$02
 13282 6BBF D0 05			jne l_21BA
 13283 6BC1 A9 20			lda #$20
 13284 6BC3 8D 7A A1			sta DEFLECT
 13285 6BC6			l_21BA
 13286
 13287 				; optimize OK (service.pas), line = 2239
 13288
 13289 6BC6 AD 7B A1			lda AROUND
 13290 6BC9 29 0E			and #$0E
 13291 6BCB C9 04			cmp #$04
 13292 6BCD D0 05			jne l_21D7
 13293 6BCF A9 33			lda #$33
 13294 6BD1 8D 7A A1			sta DEFLECT
 13295 6BD4			l_21D7
 13296
 13297 				; optimize OK (service.pas), line = 2240
 13298
 13299 6BD4 AD 7B A1			lda AROUND
 13300 6BD7 29 0E			and #$0E
 13301 6BD9 C9 06			cmp #$06
 13302 6BDB D0 05			jne l_21F4
 13303 6BDD A9 22			lda #$22
 13304 6BDF 8D 7A A1			sta DEFLECT
 13305 6BE2			l_21F4
 13306
 13307 				; optimize OK (service.pas), line = 2241
 13308
 13309 6BE2 AD 7B A1			lda AROUND
 13310 6BE5 29 0E			and #$0E
 13311 6BE7 C9 08			cmp #$08
 13312 6BE9 D0 05			jne l_2211
 13313 6BEB A9 01			lda #$01
 13314 6BED 8D 7A A1			sta DEFLECT
 13315 6BF0			l_2211
 13316
 13317 				; optimize OK (service.pas), line = 2242
 13318
 13319 6BF0 AD 7B A1			lda AROUND
 13320 6BF3 29 0E			and #$0E
 13321 6BF5 C9 0A			cmp #$0A
 13322 6BF7 D0 05			jne l_222E
 13323 6BF9 A9 21			lda #$21
 13324 6BFB 8D 7A A1			sta DEFLECT
 13325 6BFE			l_222E
 13326
 13327 				; optimize OK (service.pas), line = 2243
 13328
 13329 6BFE AD 7B A1			lda AROUND
 13330 6C01 29 0E			and #$0E
 13331 6C03 C9 0C			cmp #$0C
 13332 6C05 D0 05			jne l_224B
 13333 6C07 A9 11			lda #$11
 13334 6C09 8D 7A A1			sta DEFLECT
 13335 6C0C			l_224B
 13336
 13337 				; optimize OK (service.pas), line = 2245
 13338
 13339 6C0C A9 08			lda #$08
 13340 6C0E 8D 79 A1			sta EMERGENCY
 13341
 13342 				; optimize OK (service.pas), line = 2246
 13343
 13344 6C11 AD 5B A1			lda YB
 13345 6C14 38 E9 01			sub #$01
 13346 6C17 8D 45 A1			sta SHOOT_BLOCK.YB
 13347 6C1A AD 5C A1			lda YB+1
 13348 6C1D E9 00			sbc #$00
 13349 6C1F 8D 46 A1			sta SHOOT_BLOCK.YB+1
 13350 6C22 AD 59 A1			lda XB
 13351 6C25 18 69 01			add #$01
 13352 6C28 8D 43 A1			sta SHOOT_BLOCK.XB
 13353 6C2B AD 5A A1			lda XB+1
 13354 6C2E 69 00			adc #$00
 13355 6C30 8D 44 A1			sta SHOOT_BLOCK.XB+1
 13356 6C33 AD 51 A1			lda BALL
 13357 6C36 8D 47 A1			sta SHOOT_BLOCK.BALL
 13358 6C39 AD 52 A1			lda BALL+1
 13359 6C3C 8D 48 A1			sta SHOOT_BLOCK.BALL+1
 13360 6C3F 20 FA 5B			jsr SHOOT_BLOCK
 13361 6C42			l_2186
 13362
 13363 				; optimize OK (service.pas), line = 2249
 13364
 13365 6C42 AD 7D A1			lda TOUCH
 13366 6C45 C9 02			cmp #$02
 13367 6C47 F0 03 4C E2 6C		jne l_2279
 13368
 13369 				; optimize OK (service.pas), line = 2251
 13370
 13371 6C4C AD 7B A1			lda AROUND
 13372 6C4F 29 E0			and #$E0
 13373 6C51 D0 05			jne l_2290
 13374 6C53 A9 12			lda #$12
 13375 6C55 8D 7A A1			sta DEFLECT
 13376 6C58			l_2290
 13377
 13378 				; optimize OK (service.pas), line = 2252
 13379
 13380 6C58 AD 7B A1			lda AROUND
 13381 6C5B 29 E0			and #$E0
 13382 6C5D C9 20			cmp #$20
 13383 6C5F D0 05			jne l_22AD
 13384 6C61 A9 10			lda #$10
 13385 6C63 8D 7A A1			sta DEFLECT
 13386 6C66			l_22AD
 13387
 13388 				; optimize OK (service.pas), line = 2253
 13389
 13390 6C66 AD 7B A1			lda AROUND
 13391 6C69 29 E0			and #$E0
 13392 6C6B C9 40			cmp #$40
 13393 6C6D D0 05			jne l_22CA
 13394 6C6F A9 33			lda #$33
 13395 6C71 8D 7A A1			sta DEFLECT
 13396 6C74			l_22CA
 13397
 13398 				; optimize OK (service.pas), line = 2254
 13399
 13400 6C74 AD 7B A1			lda AROUND
 13401 6C77 29 E0			and #$E0
 13402 6C79 C9 60			cmp #$60
 13403 6C7B D0 05			jne l_22E7
 13404 6C7D A9 11			lda #$11
 13405 6C7F 8D 7A A1			sta DEFLECT
 13406 6C82			l_22E7
 13407
 13408 				; optimize OK (service.pas), line = 2255
 13409
 13410 6C82 AD 7B A1			lda AROUND
 13411 6C85 29 E0			and #$E0
 13412 6C87 C9 80			cmp #$80
 13413 6C89 D0 05			jne l_2304
 13414 6C8B A9 02			lda #$02
 13415 6C8D 8D 7A A1			sta DEFLECT
 13416 6C90			l_2304
 13417
 13418 				; optimize OK (service.pas), line = 2256
 13419
 13420 6C90 AD 7B A1			lda AROUND
 13421 6C93 29 E0			and #$E0
 13422 6C95 C9 A0			cmp #$A0
 13423 6C97 D0 05			jne l_2321
 13424 6C99 A9 12			lda #$12
 13425 6C9B 8D 7A A1			sta DEFLECT
 13426 6C9E			l_2321
 13427
 13428 				; optimize OK (service.pas), line = 2257
 13429
 13430 6C9E AD 7B A1			lda AROUND
 13431 6CA1 29 E0			and #$E0
 13432 6CA3 C9 C0			cmp #$C0
 13433 6CA5 D0 05			jne l_233E
 13434 6CA7 A9 22			lda #$22
 13435 6CA9 8D 7A A1			sta DEFLECT
 13436 6CAC			l_233E
 13437
 13438 				; optimize OK (service.pas), line = 2259
 13439
 13440 6CAC A9 06			lda #$06
 13441 6CAE 8D 79 A1			sta EMERGENCY
 13442
 13443 				; optimize OK (service.pas), line = 2260
 13444
 13445 6CB1 AD 5B A1			lda YB
 13446 6CB4 18 69 01			add #$01
 13447 6CB7 8D 45 A1			sta SHOOT_BLOCK.YB
 13448 6CBA AD 5C A1			lda YB+1
 13449 6CBD 69 00			adc #$00
 13450 6CBF 8D 46 A1			sta SHOOT_BLOCK.YB+1
 13451 6CC2 AD 59 A1			lda XB
 13452 6CC5 38 E9 01			sub #$01
 13453 6CC8 8D 43 A1			sta SHOOT_BLOCK.XB
 13454 6CCB AD 5A A1			lda XB+1
 13455 6CCE E9 00			sbc #$00
 13456 6CD0 8D 44 A1			sta SHOOT_BLOCK.XB+1
 13457 6CD3 AD 51 A1			lda BALL
 13458 6CD6 8D 47 A1			sta SHOOT_BLOCK.BALL
 13459 6CD9 AD 52 A1			lda BALL+1
 13460 6CDC 8D 48 A1			sta SHOOT_BLOCK.BALL+1
 13461 6CDF 20 FA 5B			jsr SHOOT_BLOCK
 13462 6CE2			l_2279
 13463
 13464 				; optimize OK (service.pas), line = 2263
 13465
 13466 6CE2 AD 7D A1			lda TOUCH
 13467 6CE5 C9 03			cmp #$03
 13468 6CE7 F0 03 4C 82 6D		jne l_236C
 13469
 13470 				; optimize OK (service.pas), line = 2265
 13471
 13472 6CEC AD 7B A1			lda AROUND
 13473 6CEF 29 38			and #$38
 13474 6CF1 D0 05			jne l_2383
 13475 6CF3 A9 22			lda #$22
 13476 6CF5 8D 7A A1			sta DEFLECT
 13477 6CF8			l_2383
 13478
 13479 				; optimize OK (service.pas), line = 2266
 13480
 13481 6CF8 AD 7B A1			lda AROUND
 13482 6CFB 29 38			and #$38
 13483 6CFD C9 08			cmp #$08
 13484 6CFF D0 05			jne l_23A0
 13485 6D01 A9 02			lda #$02
 13486 6D03 8D 7A A1			sta DEFLECT
 13487 6D06			l_23A0
 13488
 13489 				; optimize OK (service.pas), line = 2267
 13490
 13491 6D06 AD 7B A1			lda AROUND
 13492 6D09 29 38			and #$38
 13493 6D0B C9 10			cmp #$10
 13494 6D0D D0 05			jne l_23BD
 13495 6D0F A9 33			lda #$33
 13496 6D11 8D 7A A1			sta DEFLECT
 13497 6D14			l_23BD
 13498
 13499 				; optimize OK (service.pas), line = 2268
 13500
 13501 6D14 AD 7B A1			lda AROUND
 13502 6D17 29 38			and #$38
 13503 6D19 C9 18			cmp #$18
 13504 6D1B D0 05			jne l_23DA
 13505 6D1D A9 12			lda #$12
 13506 6D1F 8D 7A A1			sta DEFLECT
 13507 6D22			l_23DA
 13508
 13509 				; optimize OK (service.pas), line = 2269
 13510
 13511 6D22 AD 7B A1			lda AROUND
 13512 6D25 29 38			and #$38
 13513 6D27 C9 20			cmp #$20
 13514 6D29 D0 05			jne l_23F7
 13515 6D2B A9 20			lda #$20
 13516 6D2D 8D 7A A1			sta DEFLECT
 13517 6D30			l_23F7
 13518
 13519 				; optimize OK (service.pas), line = 2270
 13520
 13521 6D30 AD 7B A1			lda AROUND
 13522 6D33 29 38			and #$38
 13523 6D35 C9 28			cmp #$28
 13524 6D37 D0 05			jne l_2414
 13525 6D39 A9 22			lda #$22
 13526 6D3B 8D 7A A1			sta DEFLECT
 13527 6D3E			l_2414
 13528
 13529 				; optimize OK (service.pas), line = 2271
 13530
 13531 6D3E AD 7B A1			lda AROUND
 13532 6D41 29 38			and #$38
 13533 6D43 C9 30			cmp #$30
 13534 6D45 D0 05			jne l_2431
 13535 6D47 A9 21			lda #$21
 13536 6D49 8D 7A A1			sta DEFLECT
 13537 6D4C			l_2431
 13538
 13539 				; optimize OK (service.pas), line = 2273
 13540
 13541 6D4C A9 07			lda #$07
 13542 6D4E 8D 79 A1			sta EMERGENCY
 13543
 13544 				; optimize OK (service.pas), line = 2274
 13545
 13546 6D51 AD 5B A1			lda YB
 13547 6D54 18 69 01			add #$01
 13548 6D57 8D 45 A1			sta SHOOT_BLOCK.YB
 13549 6D5A AD 5C A1			lda YB+1
 13550 6D5D 69 00			adc #$00
 13551 6D5F 8D 46 A1			sta SHOOT_BLOCK.YB+1
 13552 6D62 AD 59 A1			lda XB
 13553 6D65 18 69 01			add #$01
 13554 6D68 8D 43 A1			sta SHOOT_BLOCK.XB
 13555 6D6B AD 5A A1			lda XB+1
 13556 6D6E 69 00			adc #$00
 13557 6D70 8D 44 A1			sta SHOOT_BLOCK.XB+1
 13558 6D73 AD 51 A1			lda BALL
 13559 6D76 8D 47 A1			sta SHOOT_BLOCK.BALL
 13560 6D79 AD 52 A1			lda BALL+1
 13561 6D7C 8D 48 A1			sta SHOOT_BLOCK.BALL+1
 13562 6D7F 20 FA 5B			jsr SHOOT_BLOCK
 13563 6D82			l_236C
 13564
 13565 				; optimize OK (service.pas), line = 2280
 13566
 13567 6D82 AD 7A A1			lda DEFLECT
 13568 6D85 4A				lsr @
 13569 6D86 4A				lsr @
 13570 6D87 4A				lsr @
 13571 6D88 4A				lsr @
 13572 6D89 8D 75 A1			sta MYX
 13573 6D8C A9 00			lda #$00
 13574 6D8E 8D 76 A1			sta MYX+1
 13575
 13576 				; optimize OK (service.pas), line = 2281
 13577
 13578 6D91 AD 7A A1			lda DEFLECT
 13579 6D94 29 0F			and #$0F
 13580 6D96 8D 77 A1			sta MYY
 13581 6D99 A9 00			lda #$00
 13582 6D9B 8D 78 A1			sta MYY+1
 13583
 13584 				; optimize OK (service.pas), line = 2283
 13585
 13586 6D9E AD 76 A1			lda MYX+1
 13587 6DA1 D0 05			bne @+
 13588 6DA3 AD 75 A1			lda MYX
 13589 6DA6 C9 01			cmp #$01
 13590 				@
 13591 6DA8 D0 50			jne l_2472
 13592 6DAA AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13593 6DB4 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13594 6DB6 B1 84			lda (:bp2),y
 13595 6DB8 85 8A			sta SYSTEM.ABS.@010184000.X
 13596 6DBA C8				iny
 13597 6DBB B1 84			lda (:bp2),y
 13598 6DBD 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13599 6DBF 20 3E 1B			jsr SYSTEM.ABS.@010184000
 13600 6DC2 E8				inx
 13601 6DC3 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13602 6DC7 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13603 6DCB A9 00			lda #$00
 13604 6DCD 38 F5 96			sub :STACKORIGIN,x
 13605 6DD0 95 96			sta :STACKORIGIN,x
 13606 6DD2 A9 00			lda #$00
 13607 6DD4 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13608 6DD6 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13609 6DD8 A9 00			lda #$00
 13610 6DDA E9 00			sbc #$00
 13611 6DDC 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13612 6DDE A9 00			lda #$00
 13613 6DE0 E9 00			sbc #$00
 13614 6DE2 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13615 6DE4 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13616 6DEE A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13617 6DF0 B5 96			lda :STACKORIGIN,x
 13618 6DF2 91 84			sta (:bp2),y
 13619 6DF4 C8				iny
 13620 6DF5 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13621 6DF7 91 84			sta (:bp2),y
 13622 6DF9 CA				dex
 13623 6DFA			l_2472
 13624
 13625 				; optimize OK (service.pas), line = 2284
 13626
 13627 6DFA AD 76 A1			lda MYX+1
 13628 6DFD D0 05			bne @+
 13629 6DFF AD 75 A1			lda MYX
 13630 6E02 C9 02			cmp #$02
 13631 				@
 13632 6E04 D0 2D			jne l_248F
 13633 6E06 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13634 6E10 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13635 6E12 B1 84			lda (:bp2),y
 13636 6E14 85 8A			sta SYSTEM.ABS.@010184000.X
 13637 6E16 C8				iny
 13638 6E17 B1 84			lda (:bp2),y
 13639 6E19 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13640 6E1B 20 3E 1B			jsr SYSTEM.ABS.@010184000
 13641 6E1E AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13642 6E28 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13643 6E2A A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13644 6E2C 91 84			sta (:bp2),y
 13645 6E2E C8				iny
 13646 6E2F A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13647 6E31 91 84			sta (:bp2),y
 13648 6E33			l_248F
 13649
 13650 				; optimize OK (service.pas), line = 2285
 13651
 13652 6E33 AD 76 A1			lda MYX+1
 13653 6E36 D0 05			bne @+
 13654 6E38 AD 75 A1			lda MYX
 13655 6E3B C9 03			cmp #$03
 13656 				@
 13657 6E3D D0 25			jne l_24A9
 13658 6E3F AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13659 6E49 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13660 6E4B A9 00			lda #$00
 13661 6E4D 38 F1 84			sub (:bp2),y
 13662 6E50 85 9F			sta :STACKORIGIN+9
 13663 6E52 C8				iny
 13664 6E53 A9 00			lda #$00
 13665 6E55 F1 84			sbc (:bp2),y
 13666 6E57 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13667 6E59 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 13668 6E5B A5 9F			lda :STACKORIGIN+9
 13669 6E5D 91 84			sta (:bp2),y
 13670 6E5F C8				iny
 13671 6E60 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13672 6E62 91 84			sta (:bp2),y
 13673 6E64			l_24A9
 13674
 13675 				; optimize OK (service.pas), line = 2287
 13676
 13677 6E64 AD 78 A1			lda MYY+1
 13678 6E67 D0 05			bne @+
 13679 6E69 AD 77 A1			lda MYY
 13680 6E6C C9 01			cmp #$01
 13681 				@
 13682 6E6E D0 50			jne l_24C5
 13683 6E70 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13684 6E7A A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13685 6E7C B1 84			lda (:bp2),y
 13686 6E7E 85 8A			sta SYSTEM.ABS.@010184000.X
 13687 6E80 C8				iny
 13688 6E81 B1 84			lda (:bp2),y
 13689 6E83 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13690 6E85 20 3E 1B			jsr SYSTEM.ABS.@010184000
 13691 6E88 E8				inx
 13692 6E89 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 13693 6E8D A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 13694 6E91 A9 00			lda #$00
 13695 6E93 38 F5 96			sub :STACKORIGIN,x
 13696 6E96 95 96			sta :STACKORIGIN,x
 13697 6E98 A9 00			lda #$00
 13698 6E9A F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 13699 6E9C 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 13700 6E9E A9 00			lda #$00
 13701 6EA0 E9 00			sbc #$00
 13702 6EA2 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 13703 6EA4 A9 00			lda #$00
 13704 6EA6 E9 00			sbc #$00
 13705 6EA8 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 13706 6EAA AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13707 6EB4 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13708 6EB6 B5 96			lda :STACKORIGIN,x
 13709 6EB8 91 84			sta (:bp2),y
 13710 6EBA C8				iny
 13711 6EBB B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 13712 6EBD 91 84			sta (:bp2),y
 13713 6EBF CA				dex
 13714 6EC0			l_24C5
 13715
 13716 				; optimize OK (service.pas), line = 2288
 13717
 13718 6EC0 AD 78 A1			lda MYY+1
 13719 6EC3 D0 05			bne @+
 13720 6EC5 AD 77 A1			lda MYY
 13721 6EC8 C9 02			cmp #$02
 13722 				@
 13723 6ECA D0 2D			jne l_24E2
 13724 6ECC AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13725 6ED6 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13726 6ED8 B1 84			lda (:bp2),y
 13727 6EDA 85 8A			sta SYSTEM.ABS.@010184000.X
 13728 6EDC C8				iny
 13729 6EDD B1 84			lda (:bp2),y
 13730 6EDF 85 8B			sta SYSTEM.ABS.@010184000.X+1
 13731 6EE1 20 3E 1B			jsr SYSTEM.ABS.@010184000
 13732 6EE4 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13733 6EEE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13734 6EF0 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 13735 6EF2 91 84			sta (:bp2),y
 13736 6EF4 C8				iny
 13737 6EF5 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 13738 6EF7 91 84			sta (:bp2),y
 13739 6EF9			l_24E2
 13740
 13741 				; optimize OK (service.pas), line = 2289
 13742
 13743 6EF9 AD 78 A1			lda MYY+1
 13744 6EFC D0 05			bne @+
 13745 6EFE AD 77 A1			lda MYY
 13746 6F01 C9 03			cmp #$03
 13747 				@
 13748 6F03 D0 25			jne l_24FC
 13749 6F05 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13750 6F0F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13751 6F11 A9 00			lda #$00
 13752 6F13 38 F1 84			sub (:bp2),y
 13753 6F16 85 9F			sta :STACKORIGIN+9
 13754 6F18 C8				iny
 13755 6F19 A9 00			lda #$00
 13756 6F1B F1 84			sbc (:bp2),y
 13757 6F1D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13758 6F1F A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 13759 6F21 A5 9F			lda :STACKORIGIN+9
 13760 6F23 91 84			sta (:bp2),y
 13761 6F25 C8				iny
 13762 6F26 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13763 6F28 91 84			sta (:bp2),y
 13764 6F2A			l_24FC
 13765 6F2A			l_1F07
 13766 6F2A			l_1C4E
 13767
 13768 				; optimize OK (service.pas), line = 2299
 13769
 13770 6F2A AC 51 A1 84 84 AC + 	mwy BALL :bp2
 13771 6F34 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 13772 6F36 B1 84			lda (:bp2),y
 13773 6F38 C9 65			cmp #$65
 13774 6F3A B0 03 4C 46 71		jcc l_251D
 13775
 13776 				; optimize OK (service.pas), line = 2302
 13777
 13778 6F3F AD 79 A1			lda EMERGENCY
 13779 6F42 C9 FF			cmp #$FF
 13780 6F44 D0 05			jne l_2530
 13781 6F46 A9 04			lda #$04
 13782 6F48 20 7E 2E			jsr FATAL_ERROR
 13783 6F4B			l_2530
 13784
 13785 				; optimize OK (service.pas), line = 2304
 13786
 13787 6F4B AC 79 A1			ldy EMERGENCY
 13788 6F4E B9 7F 10			lda adr.EMERG_DEV,y
 13789 6F51 8D 71 A1			sta MIMAX
 13790 6F54 A9 00			lda #$00
 13791 6F56 8D 72 A1			sta MIMAX+1
 13792
 13793 				; optimize OK (service.pas), line = 2330
 13794
 13795 6F59 AD 79 A1			lda EMERGENCY
 13796 6F5C 8D 87 A1			sta @CASETMP_0009
 13797 6F5F C9 05			cmp #$05
 13798 6F61 D0 29			jne l_2549
 13799 				@
 13800
 13801 				; optimize OK (service.pas), line = 2333
 13802
 13803 6F63 AD 81 A1			lda adr.ADJW+$03
 13804 6F66 D0 0D			jne l_2560
 13805 6F68 AD 71 A1			lda MIMAX
 13806 6F6B 29 0F			and #$0F
 13807 6F6D 8D 71 A1			sta MIMAX
 13808 6F70 A9 00			lda #$00
 13809 6F72 8D 72 A1			sta MIMAX+1
 13810 6F75			l_2560
 13811
 13812 				; optimize OK (service.pas), line = 2334
 13813
 13814 6F75 AD 7F A1			lda adr.ADJW+$01
 13815 6F78 D0 0F			jne l_2587
 13816 6F7A AD 71 A1			lda MIMAX
 13817 6F7D 29 F0			and #$F0
 13818 6F7F 09 03			ora #$03
 13819 6F81 8D 71 A1			sta MIMAX
 13820 6F84 A9 00			lda #$00
 13821 6F86 8D 72 A1			sta MIMAX+1
 13822 6F89			l_2587
 13823 6F89 4C 16 70			jmp a_0009
 13824 6F8C			l_2549
 13825 6F8C C9 06			cmp #$06
 13826 6F8E D0 2B			jne l_259E
 13827
 13828 				; optimize OK (service.pas), line = 2338
 13829
 13830 6F90 AD 7F A1			lda adr.ADJW+$01
 13831 6F93 D0 0F			jne l_25B5
 13832 6F95 AD 71 A1			lda MIMAX
 13833 6F98 29 0F			and #$0F
 13834 6F9A 09 10			ora #$10
 13835 6F9C 8D 71 A1			sta MIMAX
 13836 6F9F A9 00			lda #$00
 13837 6FA1 8D 72 A1			sta MIMAX+1
 13838 6FA4			l_25B5
 13839
 13840 				; optimize OK (service.pas), line = 2339
 13841
 13842 6FA4 AD 83 A1			lda adr.ADJW+$05
 13843 6FA7 D0 0F			jne l_25DC
 13844 6FA9 AD 71 A1			lda MIMAX
 13845 6FAC 29 F0			and #$F0
 13846 6FAE 09 04			ora #$04
 13847 6FB0 8D 71 A1			sta MIMAX
 13848 6FB3 A9 00			lda #$00
 13849 6FB5 8D 72 A1			sta MIMAX+1
 13850 6FB8			l_25DC
 13851 6FB8 4C 16 70			jmp a_0009
 13852 6FBB			l_259E
 13853 6FBB C9 07			cmp #$07
 13854 6FBD D0 2B			jne l_25F3
 13855
 13856 				; optimize OK (service.pas), line = 2343
 13857
 13858 6FBF AD 83 A1			lda adr.ADJW+$05
 13859 6FC2 D0 0F			jne l_260A
 13860 6FC4 AD 71 A1			lda MIMAX
 13861 6FC7 29 0F			and #$0F
 13862 6FC9 09 20			ora #$20
 13863 6FCB 8D 71 A1			sta MIMAX
 13864 6FCE A9 00			lda #$00
 13865 6FD0 8D 72 A1			sta MIMAX+1
 13866 6FD3			l_260A
 13867
 13868 				; optimize OK (service.pas), line = 2344
 13869
 13870 6FD3 AD 85 A1			lda adr.ADJW+$07
 13871 6FD6 D0 0F			jne l_2631
 13872 6FD8 AD 71 A1			lda MIMAX
 13873 6FDB 29 F0			and #$F0
 13874 6FDD 09 05			ora #$05
 13875 6FDF 8D 71 A1			sta MIMAX
 13876 6FE2 A9 00			lda #$00
 13877 6FE4 8D 72 A1			sta MIMAX+1
 13878 6FE7			l_2631
 13879 6FE7 4C 16 70			jmp a_0009
 13880 6FEA			l_25F3
 13881 6FEA C9 08			cmp #$08
 13882 6FEC D0 28			jne l_2648
 13883
 13884 				; optimize OK (service.pas), line = 2348
 13885
 13886 6FEE AD 85 A1			lda adr.ADJW+$07
 13887 6FF1 D0 0F			jne l_265F
 13888 6FF3 AD 71 A1			lda MIMAX
 13889 6FF6 29 0F			and #$0F
 13890 6FF8 09 30			ora #$30
 13891 6FFA 8D 71 A1			sta MIMAX
 13892 6FFD A9 00			lda #$00
 13893 6FFF 8D 72 A1			sta MIMAX+1
 13894 7002			l_265F
 13895
 13896 				; optimize OK (service.pas), line = 2349
 13897
 13898 7002 AD 81 A1			lda adr.ADJW+$03
 13899 7005 D0 0F			jne l_2686
 13900 7007 AD 71 A1			lda MIMAX
 13901 700A 29 F0			and #$F0
 13902 700C 09 06			ora #$06
 13903 700E 8D 71 A1			sta MIMAX
 13904 7011 A9 00			lda #$00
 13905 7013 8D 72 A1			sta MIMAX+1
 13906 7016			l_2686
 13907 7016			l_2648
 13908 7016			a_0009
 13909
 13910 				; --- RepeatUntilProlog
 13911 7016			l_269D
 13912
 13913 				; optimize OK (service.pas), line = 2356
 13914
 13915 7016 AD 71 A1			lda MIMAX
 13916 7019 85 A0			sta :STACKORIGIN+10
 13917 701B AD 72 A1			lda MIMAX+1
 13918 701E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13919 7020 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13920 7022 66 A0			ror :STACKORIGIN+10
 13921 7024 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13922 7026 66 A0			ror :STACKORIGIN+10
 13923 7028 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13924 702A 66 A0			ror :STACKORIGIN+10
 13925 702C 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 13926 702E 66 A0			ror :STACKORIGIN+10
 13927 7030 A9 5A			lda #$5A
 13928 7032 85 8E			sta :ecx
 13929 7034 A9 00			lda #$00
 13930 7036 85 8F			sta :ecx+1
 13931 7038 A5 A0			lda :STACKORIGIN+10
 13932 703A 85 86			sta :eax
 13933 703C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13934 703E 85 87			sta :eax+1
 13935 					.ifdef fmulinit
 13936 					fmulu_16
 13937 					els
 13938 7040 20 12 13			imulCX
 13939 					eif
 13940 7043 A5 86			lda :eax
 13941 7045 8D 61 A1			sta LX
 13942 7048 A5 87			lda :eax+1
 13943 704A 8D 62 A1			sta LX+1
 13944
 13945 				; optimize OK (service.pas), line = 2357
 13946
 13947 704D AD 71 A1			lda MIMAX
 13948 7050 29 0F			and #$0F
 13949 7052 85 86			sta :eax
 13950 7054 A9 00			lda #$00
 13951 7056 85 87			sta :eax+1
 13952 7058 A9 5A			lda #$5A
 13953 705A 85 8E			sta :ecx
 13954 705C A9 00			lda #$00
 13955 705E 85 8F			sta :ecx+1
 13956 					.ifdef fmulinit
 13957 					fmulu_16
 13958 					els
 13959 7060 20 56 13			imulCX_AL
 13960 					eif
 13961 7063 A5 86			lda :eax
 13962 7065 8D 65 A1			sta MX
 13963 7068 A5 87			lda :eax+1
 13964 706A 8D 66 A1			sta MX+1
 13965
 13966 				; optimize OK (service.pas), line = 2358
 13967
 13968 706D AD 65 A1			lda MX
 13969 7070 38 ED 61 A1			sub LX
 13970 7074 8D 2F 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 13971 7077 AD 66 A1			lda MX+1
 13972 707A ED 62 A1			sbc LX+1
 13973 707D 8D 30 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 13974 7080 20 05 26			jsr SYSTEM.RANDOM.@010184000
 13975 7083 AD 31 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 13976 7086 18 6D 61 A1			add LX
 13977 708A 8D 73 A1			sta ANGLE
 13978 708D AD 32 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 13979 7090 6D 62 A1			adc LX+1
 13980 7093 8D 74 A1			sta ANGLE+1
 13981
 13982 				; optimize OK (service.pas), line = 2361
 13983
 13984 7096 A9 5A			lda #$5A
 13985 7098 85 8E			sta @SMALLINT.MOD.B
 13986 709A A9 00			lda #$00
 13987 709C 85 8F			sta @SMALLINT.MOD.B+1
 13988 709E AD 73 A1			lda ANGLE
 13989 70A1 85 86			sta @SMALLINT.MOD.A
 13990 70A3 AD 74 A1			lda ANGLE+1
 13991 70A6 85 87			sta @SMALLINT.MOD.A+1
 13992 70A8 20 57 12			jsr @SMALLINT.MOD
 13993 70AB A5 92			lda @SMALLINT.MOD.RESULT
 13994 70AD C9 1F			cmp #$1F
 13995 70AF A5 93			lda @SMALLINT.MOD.RESULT+1
 13996 70B1 E9 00			sbc #$00
 13997 70B3 50 02			svc
 13998 70B5 49 80			eor #$80
 13999 70B7 10 03 4C 16 70		jmi l_269D
 14000 70BC A9 5A			lda #$5A
 14001 70BE 85 8E			sta @SMALLINT.MOD.B
 14002 70C0 A9 00			lda #$00
 14003 70C2 85 8F			sta @SMALLINT.MOD.B+1
 14004 70C4 AD 73 A1			lda ANGLE
 14005 70C7 85 86			sta @SMALLINT.MOD.A
 14006 70C9 AD 74 A1			lda ANGLE+1
 14007 70CC 85 87			sta @SMALLINT.MOD.A+1
 14008 70CE 20 57 12			jsr @SMALLINT.MOD
 14009 70D1 A5 92			lda @SMALLINT.MOD.RESULT
 14010 70D3 C9 3C			cmp #$3C
 14011 70D5 A5 93			lda @SMALLINT.MOD.RESULT+1
 14012 70D7 E9 00			sbc #$00
 14013 70D9 50 02			svc
 14014 70DB 49 80			eor #$80
 14015 70DD 30 03 4C 16 70		jpl l_269D
 14016
 14017 				; optimize OK (service.pas), line = 2365
 14018
 14019 70E2 A9 68			lda #$68
 14020 70E4 85 8E			sta @SMALLINT.MOD.B
 14021 70E6 A9 01			lda #$01
 14022 70E8 85 8F			sta @SMALLINT.MOD.B+1
 14023 70EA AD 73 A1			lda ANGLE
 14024 70ED 85 86			sta @SMALLINT.MOD.A
 14025 70EF AD 74 A1			lda ANGLE+1
 14026 70F2 85 87			sta @SMALLINT.MOD.A+1
 14027 70F4 20 57 12			jsr @SMALLINT.MOD
 14028 70F7 A5 92			lda @SMALLINT.MOD.RESULT
 14029 70F9 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 14030 70FC A5 93			lda @SMALLINT.MOD.RESULT+1
 14031 70FE 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 14032 7101 AD 51 A1			lda BALL
 14033 7104 8D AF A0			sta SET_BALL_DIRECTION.BALL
 14034 7107 AD 52 A1			lda BALL+1
 14035 710A 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 14036 710D 20 9E 39			jsr SET_BALL_DIRECTION
 14037
 14038 				; optimize OK (service.pas), line = 2366
 14039
 14040 7110 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 14041 711A A0 0C			ldy #BALL.SPEED-DATAORIGIN
 14042 711C B1 84			lda (:bp2),y
 14043 711E 8D A5 A0			sta SET_BALL_SPEED.SPEED
 14044 7121 C8				iny
 14045 7122 B1 84			lda (:bp2),y
 14046 7124 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 14047 7127 AD 51 A1			lda BALL
 14048 712A 8D A1 A0			sta SET_BALL_SPEED.BALL
 14049 712D AD 52 A1			lda BALL+1
 14050 7130 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 14051 7133 20 74 37			jsr SET_BALL_SPEED
 14052
 14053 				; optimize OK (service.pas), line = 2368
 14054
 14055 7136 AC 51 A1 84 84 AC + 	mwy BALL :bp2
 14056 7140 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 14057 7142 A9 00			lda #$00
 14058 7144 91 84			sta (:bp2),y
 14059 7146			l_251D
 14060
 14061 				; ------------------------------------------------------------
 14062
 14063 = A151			BALL	= DATAORIGIN+$0668
 14064 = 9AE9			BALL.X	= DATAORIGIN+$0000
 14065 = 9AEB			BALL.Y	= DATAORIGIN+$0002
 14066 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
 14067 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
 14068 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
 14069 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
 14070 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
 14071 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
 14072 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
 14073 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
 14074 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
 14075 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
 14076 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
 14077 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
 14078 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
 14079 = 9B03			BALL.STM	= DATAORIGIN+$001A
 14080 = A155			X	= DATAORIGIN+$066C
 14081 = A157			Y	= DATAORIGIN+$066E
 14082 = A159			XB	= DATAORIGIN+$0670
 14083 = A15B			YB	= DATAORIGIN+$0672
 14084 = A15D			OX	= DATAORIGIN+$0674
 14085 = A15F			OY	= DATAORIGIN+$0676
 14086 = A161			LX	= DATAORIGIN+$0678
 14087 = A163			LY	= DATAORIGIN+$067A
 14088 = A165			MX	= DATAORIGIN+$067C
 14089 = A167			MY	= DATAORIGIN+$067E
 14090 = A169			NX	= DATAORIGIN+$0680
 14091 = A16B			NY	= DATAORIGIN+$0682
 14092 = A16D			F1	= DATAORIGIN+$0684
 14093 = A16F			F2	= DATAORIGIN+$0686
 14094 = A171			MIMAX	= DATAORIGIN+$0688
 14095 = A173			ANGLE	= DATAORIGIN+$068A
 14096 = A175			MYX	= DATAORIGIN+$068C
 14097 = A177			MYY	= DATAORIGIN+$068E
 14098 = A179			EMERGENCY	= DATAORIGIN+$0690
 14099 = A17A			DEFLECT	= DATAORIGIN+$0691
 14100 = A17B			AROUND	= DATAORIGIN+$0692
 14101 = A17C			COLLISION	= DATAORIGIN+$0693
 14102 = A17D			TOUCH	= DATAORIGIN+$0694
 14103 = A17E			adr.ADJW	= [DATAORIGIN+$0695] .array [3] [3]
 14104 7146			.var ADJW	= adr.ADJW .word
 14105 = A187			@CASETMP_0009	= DATAORIGIN+$069E
 14106
 14107 = A151			@VarData	= BALL
 14108 = 002F			@VarDataSize	= 47
 14109
 14110 7146			@exit
 14111 					.ifdef @new
 14112 					lda <@VarData
 14113 					sta :ztmp
 14114 					lda >@VarData
 14115 					ldy #@VarDataSize-1
 14116 					jmp @FreeMem
 14117 					els
 14118 7146 60				rts						; ret
 14119 					eif
 14120 = 7147 7E A1		ADJW
 14120 				.endl
 14121
 14122 7149			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 14123
 14124 				; optimize OK (service.pas), line = 2383
 14125
 14126 7149 A9 00			lda #$00
 14127 714B 8D 8E A1			sta K
 14128 714E 8D 8F A1			sta K+1
 14129
 14130 7151			l_2707
 14131 				; --- ForToDoCondition
 14132 7151 AD 8F A1			lda K+1
 14133 7154 C9 01			cmp #$01
 14134 7156 90 0B			bcc @+
 14135 7158 D0 48			jne l_2713
 14136 715A AD 8E A1			lda K
 14137 715D C9 3F			cmp #$3F
 14138 715F 90 02			bcc @+
 14139 7161 D0 3F			jne l_2713
 14140 				@
 14141
 14142 				; optimize OK (service.pas), line = 2384
 14143
 14144 7163 AC 88 A1 84 84 AC + 	mwy PATT :bp2
 14145 716D A0 00			ldy #PATT.WIDTH-DATAORIGIN
 14146 716F B1 84			lda (:bp2),y
 14147 7171 85 8E			sta @WORD.MOD.B
 14148 7173 C8				iny
 14149 7174 B1 84			lda (:bp2),y
 14150 7176 85 8F			sta @WORD.MOD.B+1
 14151 7178 AD 8E A1			lda K
 14152 717B 85 86			sta @WORD.MOD.A
 14153 717D AD 8F A1			lda K+1
 14154 7180 85 87			sta @WORD.MOD.A+1
 14155 7182 20 A7 13			jsr @WORD.MOD
 14156 7185 A5 92			lda @WORD.MOD.RESULT
 14157 7187 85 A0			sta :STACKORIGIN+10
 14158 7189 AC 8E A1			ldy K
 14159 718C A9 C4			lda #$C4
 14160 718E 18 6D 8F A1			add K+1
 14161 7192 85 83			sta :bp+1
 14162 7194 A5 A0			lda :STACKORIGIN+10
 14163 7196 91 82			sta (:bp),y
 14164
 14165 				; --- ForToDoEpilog
 14166 7198 EE 8E A1			inc K
 14167 719B D0 B4			jne l_2707
 14168 719D EE 8F A1			inc K+1
 14169 71A0 D0 AF			jne l_2707
 14170 71A2			l_2713
 14171
 14172 				; optimize OK (service.pas), line = 2388
 14173
 14174 71A2 A9 00			lda #$00
 14175 71A4 8D 91 A1			sta Y
 14176
 14177 71A7			l_272D
 14178 				; --- ForToDoCondition
 14179 71A7 AD 91 A1			lda Y
 14180 71AA C9 C8			cmp #$C8
 14181 71AC B0 2E			jcs l_273B
 14182
 14183 				; optimize OK (service.pas), line = 2389
 14184
 14185 71AE AC 88 A1 84 84 AC + 	mwy PATT :bp2
 14186 71B8 A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 14187 71BA B1 84			lda (:bp2),y
 14188 71BC 85 8E			sta @WORD.MOD.B
 14189 71BE C8				iny
 14190 71BF B1 84			lda (:bp2),y
 14191 71C1 85 8F			sta @WORD.MOD.B+1
 14192 71C3 AD 91 A1			lda Y
 14193 71C6 85 86			sta @WORD.MOD.A
 14194 71C8 A9 00			lda #$00
 14195 71CA 85 87			sta @WORD.MOD.A+1
 14196 71CC 20 A7 13			jsr @WORD.MOD
 14197 71CF A5 92			lda @WORD.MOD.RESULT
 14198 71D1 AC 91 A1			ldy Y
 14199 71D4 99 00 C3			sta adr.MODY,y
 14200
 14201 				; --- ForToDoEpilog
 14202 71D7 EE 91 A1			inc Y
 14203 71DA D0 CB			jne l_272D
 14204 71DC			l_273B
 14205
 14206 				; optimize OK (service.pas), line = 2394
 14207
 14208 71DC A9 0A			lda #$0A
 14209 71DE 8D 91 A1			sta Y
 14210
 14211 71E1			l_2757
 14212 				; --- ForToDoCondition
 14213 71E1 AC 91 A1			ldy Y
 14214 71E4 C0 C7			cpy #$C7
 14215 71E6 90 03 4C 1E 73		jcs l_2765
 14216
 14217 				; optimize OK (service.pas), line = 2396
 14218
 14219 71EB B9 00 C3			lda adr.MODY,y
 14220 71EE 85 86			sta :eax
 14221 71F0 AC 88 A1 84 84 AC + 	mwy PATT :bp2
 14222 71FA A0 00			ldy #PATT.WIDTH-DATAORIGIN
 14223 71FC B1 84			lda (:bp2),y
 14224 71FE 85 8E			sta :ecx
 14225 7200 C8				iny
 14226 7201 B1 84			lda (:bp2),y
 14227 7203 85 8F			sta :ecx+1
 14228 7205 A9 00			lda #$00
 14229 7207 85 87			sta :eax+1
 14230 					.ifdef fmulinit
 14231 					fmulu_16
 14232 					els
 14233 7209 20 12 13			imulCX
 14234 					eif
 14235 720C A5 86			lda :eax
 14236 720E 8D 8C A1			sta YB
 14237 7211 A5 87			lda :eax+1
 14238 7213 8D 8D A1			sta YB+1
 14239
 14240 				; optimize OK (service.pas), line = 2397
 14241
 14242 7216 A9 00			lda #$00
 14243 7218 8D 8E A1			sta K
 14244 721B 8D 8F A1			sta K+1
 14245
 14246 				; optimize OK (service.pas), line = 2398
 14247
 14248 721E A9 09			lda #$09
 14249 7220 8D 90 A1			sta X
 14250
 14251 7223			l_2780
 14252 				; --- ForToDoCondition
 14253 7223 AD 90 A1			lda X
 14254 7226 C9 D8			cmp #$D8
 14255 7228 90 03 4C C7 72		jcs l_278E
 14256
 14257 				; optimize OK (service.pas), line = 2401
 14258
 14259 722D AC 88 A1 84 84 AC + 	mwy PATT :bp2
 14260 7237 A0 04			ldy #PATT.OFS-DATAORIGIN
 14261 7239 B1 84			lda (:bp2),y
 14262 723B 85 9F			sta :STACKORIGIN+9
 14263 723D C8				iny
 14264 723E B1 84			lda (:bp2),y
 14265 7240 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14266 7242 C8				iny
 14267 7243 B1 84			lda (:bp2),y
 14268 7245 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14269 7247 C8				iny
 14270 7248 B1 84			lda (:bp2),y
 14271 724A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14272 724C AC 90 A1			ldy X
 14273 724F A5 9F			lda :STACKORIGIN+9
 14274 7251 18 79 00 C4			add $C400,y
 14275 7255 85 9F			sta :STACKORIGIN+9
 14276 7257 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14277 7259 69 00			adc #$00
 14278 725B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14279 725D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14280 725F 69 00			adc #$00
 14281 7261 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14282 7263 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14283 7265 69 00			adc #$00
 14284 7267 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14285 7269 A5 9F			lda :STACKORIGIN+9
 14286 726B 18 6D 8C A1			add YB
 14287 726F 8D 29 A0			sta GETBYTE.SRC
 14288 7272 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14289 7274 6D 8D A1			adc YB+1
 14290 7277 8D 2A A0			sta GETBYTE.SRC+1
 14291 727A A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14292 727C 69 00			adc #$00
 14293 727E 8D 2B A0			sta GETBYTE.SRC+2
 14294 7281 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14295 7283 69 00			adc #$00
 14296 7285 8D 2C A0			sta GETBYTE.SRC+3
 14297 7288 20 FE 2D			jsr GETBYTE
 14298 728B AD 2D A0			lda GETBYTE.RESULT
 14299 728E 8D 92 A1			sta CL
 14300
 14301 				; optimize OK (service.pas), line = 2403
 14302
 14303 7291 A9 80			lda #$80
 14304 7293 8D 93 A1			sta SHADOW
 14305
 14306 				; optimize OK (service.pas), line = 2408
 14307
 14308 7296 AD 91 A1			lda Y
 14309 7299 C9 10			cmp #$10
 14310 729B 90 07			jcc l_27C3x
 14311 729D AD 90 A1			lda X
 14312 72A0 C9 12			cmp #$12
 14313 72A2 B0 05			jcs l_27C3
 14314 72A4			l_27C3x
 14315 72A4 A9 00			lda #$00
 14316 72A6 8D 93 A1			sta SHADOW
 14317 72A9			l_27C3
 14318
 14319 				; optimize OK (service.pas), line = 2413
 14320
 14321 72A9 AD 92 A1			lda CL
 14322 72AC 29 7F			and #$7F
 14323 72AE 0D 93 A1			ora SHADOW
 14324 72B1 AC 8E A1			ldy K
 14325 72B4 99 00 C2			sta adr.TMP,y
 14326
 14327 				; optimize FAIL (0, service.pas), line = 2414
 14328
 14329 72B7 EE 8E A1			inc K
 14330 72BA D0 03			sne
 14331 72BC EE 8F A1			inc K+1
 14332
 14333 				; --- ForToDoEpilog
 14334 72BF EE 90 A1			inc X
 14335 72C2 F0 03 4C 23 72		jne l_2780
 14336 72C7			l_278E
 14337
 14338 				; optimize OK (service.pas), line = 2417
 14339
 14340 72C7 AD FD 9B			lda PLAYSCREEN.OFS
 14341 72CA 18 69 09			add #$09
 14342 72CD 85 A0			sta :STACKORIGIN+10
 14343 72CF AD FE 9B			lda PLAYSCREEN.OFS+1
 14344 72D2 69 00			adc #$00
 14345 72D4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14346 72D6 AD FF 9B			lda PLAYSCREEN.OFS+2
 14347 72D9 69 00			adc #$00
 14348 72DB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14349 72DD AD 00 9C			lda PLAYSCREEN.OFS+3
 14350 72E0 69 00			adc #$00
 14351 72E2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14352 72E4 AD 91 A1			lda Y
 14353 72E7 85 86			sta :eax
 14354 72E9 A9 00			lda #$00
 14355 72EB 85 87			sta :eax+1
 14356 72ED 20 FD 17			jsr @mul320
 14357 72F0 A5 A0			lda :STACKORIGIN+10
 14358 72F2 18 65 86			add :eax
 14359 72F5 8D 09 A0			sta BLITTMP.DST
 14360 72F8 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14361 72FA 65 87			adc :eax+1
 14362 72FC 8D 0A A0			sta BLITTMP.DST+1
 14363 72FF A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14364 7301 65 88			adc :eax+2
 14365 7303 8D 0B A0			sta BLITTMP.DST+2
 14366 7306 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14367 7308 65 89			adc :eax+3
 14368 730A 8D 0C A0			sta BLITTMP.DST+3
 14369 730D AD 8E A1			lda K
 14370 7310 8D 0D A0			sta BLITTMP.SIZE
 14371 7313 20 D6 2C			jsr BLITTMP
 14372
 14373 				; --- ForToDoEpilog
 14374 7316 EE 91 A1			inc Y
 14375 7319 F0 03 4C E1 71		jne l_2757
 14376 731E			l_2765
 14377
 14378 				; ------------------------------------------------------------
 14379
 14380 = A188			PATT	= DATAORIGIN+$069F
 14381 = 9AE9			PATT.WIDTH	= DATAORIGIN+$0000
 14382 = 9AEB			PATT.HEIGHT	= DATAORIGIN+$0002
 14383 = 9AED			PATT.OFS	= DATAORIGIN+$0004
 14384 = A18C			YB	= DATAORIGIN+$06A3
 14385 = A18E			K	= DATAORIGIN+$06A5
 14386 = A190			X	= DATAORIGIN+$06A7
 14387 = A191			Y	= DATAORIGIN+$06A8
 14388 = A192			CL	= DATAORIGIN+$06A9
 14389 = A193			SHADOW	= DATAORIGIN+$06AA
 14390
 14391 = A188			@VarData	= PATT
 14392 = 000A			@VarDataSize	= 10
 14393
 14394 731E			@exit
 14395 					.ifdef @new
 14396 					lda <@VarData
 14397 					sta :ztmp
 14398 					lda >@VarData
 14399 					ldy #@VarDataSize-1
 14400 					jmp @FreeMem
 14401 					els
 14402 731E 60				rts						; ret
 14403 					eif
 14404 				.endl
 14405
 14406 731F			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 14407
 14408 				; ------------------------------------------------------------
 14409
 14410 = A194			X	= DATAORIGIN+$06AB
 14411 = A196			Y	= DATAORIGIN+$06AD
 14412
 14413 = A194			@VarData	= X
 14414 = 0004			@VarDataSize	= 4
 14415
 14416 731F			@exit
 14417 					.ifdef @new
 14418 					lda <@VarData
 14419 					sta :ztmp
 14420 					lda >@VarData
 14421 					ldy #@VarDataSize-1
 14422 					jmp @FreeMem
 14423 					els
 14424 731F 60				rts						; ret
 14425 					eif
 14426 				.endl
 14427
 14428 7320			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 14429
 14430 				; optimize OK (service.pas), line = 2532
 14431
 14432 7320 A9 81			lda #$81
 14433 7322 8D 98 A1			sta Y
 14434
 14435 7325			l_2811
 14436 				; --- ForToDoCondition
 14437 7325 AC 98 A1			ldy Y
 14438 7328 C0 A1			cpy #$A1
 14439 732A B0 6C			jcs l_281F
 14440
 14441 				; optimize OK (service.pas), line = 2535
 14442
 14443 732C A9 48			lda #$48
 14444 732E 79 00 C0			adc adr.ROW,y
 14445 7331 8D 13 A0			sta BLITROW.DST
 14446 7334 A9 50			lda #$50
 14447 7336 79 00 C1			adc adr.ROW+256,y
 14448 7339 8D 14 A0			sta BLITROW.DST+1
 14449 733C A9 00			lda #$00
 14450 733E 69 00			adc #$00
 14451 7340 8D 15 A0			sta BLITROW.DST+2
 14452 7343 A9 00			lda #$00
 14453 7345 69 00			adc #$00
 14454 7347 8D 16 A0			sta BLITROW.DST+3
 14455 734A AD FD 9B			lda PLAYSCREEN.OFS
 14456 734D 18 69 48			add #$48
 14457 7350 85 A1			sta :STACKORIGIN+11
 14458 7352 AD FE 9B			lda PLAYSCREEN.OFS+1
 14459 7355 69 00			adc #$00
 14460 7357 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 14461 7359 AD FF 9B			lda PLAYSCREEN.OFS+2
 14462 735C 69 00			adc #$00
 14463 735E 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 14464 7360 AD 00 9C			lda PLAYSCREEN.OFS+3
 14465 7363 69 00			adc #$00
 14466 7365 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 14467 7367 A5 A1			lda :STACKORIGIN+11
 14468 7369 18 79 00 C0			add adr.ROW,y
 14469 736D 8D 0F A0			sta BLITROW.SRC
 14470 7370 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 14471 7372 79 00 C1			adc adr.ROW+256,y
 14472 7375 8D 10 A0			sta BLITROW.SRC+1
 14473 7378 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 14474 737A 69 00			adc #$00
 14475 737C 8D 11 A0			sta BLITROW.SRC+2
 14476 737F A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 14477 7381 69 00			adc #$00
 14478 7383 8D 12 A0			sta BLITROW.SRC+3
 14479 7386 A9 58			lda #$58
 14480 7388 8D 17 A0			sta BLITROW.SIZE
 14481 738B A9 00			lda #$00
 14482 738D 8D 18 A0			sta BLITROW.SIZE+1
 14483 7390 20 0F 2D			jsr BLITROW
 14484
 14485 				; --- ForToDoEpilog
 14486 7393 EE 98 A1			inc Y
 14487 7396 D0 8D			jne l_2811
 14488 7398			l_281F
 14489
 14490 				; ------------------------------------------------------------
 14491
 14492 = A198			Y	= DATAORIGIN+$06AF
 14493
 14494 = A198			@VarData	= Y
 14495 = 0001			@VarDataSize	= 1
 14496
 14497 7398			@exit
 14498 					.ifdef @new
 14499 					lda <@VarData
 14500 					sta :ztmp
 14501 					lda >@VarData
 14502 					ldy #@VarDataSize-1
 14503 					jmp @FreeMem
 14504 					els
 14505 7398 60				rts						; ret
 14506 					eif
 14507 				.endl
 14508
 14509 7399			.local	GAME_OVER					; PROCEDURE
 14510
 14511 				; ------------------------------------------------------------
 14512
 14513 = A199			X	= DATAORIGIN+$06B0
 14514 = A19B			Y	= DATAORIGIN+$06B2
 14515 = A19D			adr.SC	= [DATAORIGIN+$06B4] .array [21]
 14516 7399			.var SC	= adr.SC .word
 14517
 14518 = A199			@VarData	= X
 14519 = 0019			@VarDataSize	= 25
 14520
 14521 7399			@exit
 14522 					.ifdef @new
 14523 					lda <@VarData
 14524 					sta :ztmp
 14525 					lda >@VarData
 14526 					ldy #@VarDataSize-1
 14527 					jmp @FreeMem
 14528 					els
 14529 7399 60				rts						; ret
 14530 					eif
 14531 = 739A 9D A1		SC
 14531 				.endl
 14532
 14533 739C			.local	DESTROY_VAUS					; PROCEDURE
 14534
 14535 				; optimize OK (service.pas), line = 2579
 14536
 14537 739C AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 14538
 14539 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2580
 14540
 14541 73CC 20 20 45			jsr MODIFY_VAUS
 14542
 14543 				; optimize OK (service.pas), line = 2582
 14544
 14545 73CF AD 71 9C			lda VAUS.X
 14546 73D2 8D F3 A0			sta MOVE_VAUS.X
 14547 73D5 A9 00			lda #$00
 14548 73D7 8D F4 A0			sta MOVE_VAUS.X+1
 14549 73DA AD 72 9C			lda VAUS.Y
 14550 73DD 8D F5 A0			sta MOVE_VAUS.Y
 14551 73E0 A9 00			lda #$00
 14552 73E2 8D F6 A0			sta MOVE_VAUS.Y+1
 14553 73E5 20 EC 47			jsr MOVE_VAUS
 14554
 14555 				; optimize OK (service.pas), line = 2584
 14556
 14557 73E8 AD 71 9C			lda VAUS.X
 14558 73EB 38 E9 04			sub #$04
 14559 73EE 8D B4 A1			sta A
 14560 73F1 A9 00			lda #$00
 14561 73F3 E9 00			sbc #$00
 14562 73F5 8D B5 A1			sta A+1
 14563
 14564 				; optimize OK (service.pas), line = 2585
 14565
 14566 73F8 AD 72 9C			lda VAUS.Y
 14567 73FB 38 E9 05			sub #$05
 14568 73FE 8D B6 A1			sta B
 14569 7401 A9 00			lda #$00
 14570 7403 E9 00			sbc #$00
 14571 7405 8D B7 A1			sta B+1
 14572
 14573 				; optimize OK (service.pas), line = 2588
 14574
 14575 7408 A9 00			lda #$00
 14576 740A 8D B8 A1			sta W
 14577
 14578 740D			l_286F
 14579 				; --- ForToDoCondition
 14580 740D AD B8 A1			lda W
 14581 7410 C9 07			cmp #$07
 14582 7412 90 03 4C 23 76		jcs l_287D
 14583
 14584 				; optimize OK (service.pas), line = 2590
 14585
 14586 7417 A9 00			lda #$00
 14587 7419 8D BA A1			sta Y
 14588
 14589 741C			l_2886
 14590 				; --- ForToDoCondition
 14591 741C AD BA A1			lda Y
 14592 741F C9 10			cmp #$10
 14593 7421 90 03 4C 0D 76		jcs l_2894
 14594
 14595 				; optimize OK (service.pas), line = 2592
 14596
 14597 7426 AD 21 9C			lda EXPLOSION.WIDTH
 14598 7429 85 8E			sta :ecx
 14599 742B AD 22 9C			lda EXPLOSION.WIDTH+1
 14600 742E 85 8F			sta :ecx+1
 14601 7430 AD BA A1			lda Y
 14602 7433 85 86			sta :eax
 14603 7435 A9 00			lda #$00
 14604 7437 85 87			sta :eax+1
 14605 					.ifdef fmulinit
 14606 					fmulu_16
 14607 					els
 14608 7439 20 56 13			imulCX_AL
 14609 					eif
 14610 743C A5 86			lda :eax
 14611 743E 85 9F			sta :STACKORIGIN+9
 14612 7440 A5 87			lda :eax+1
 14613 7442 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14614 7444 AD 21 9C			lda EXPLOSION.WIDTH
 14615 7447 85 A1			sta :STACKORIGIN+11
 14616 7449 AD 22 9C			lda EXPLOSION.WIDTH+1
 14617 744C 06 A1			asl :STACKORIGIN+11
 14618 744E 2A				rol @
 14619 744F 06 A1			asl :STACKORIGIN+11
 14620 7451 2A				rol @
 14621 7452 06 A1			asl :STACKORIGIN+11
 14622 7454 2A				rol @
 14623 7455 06 A1			asl :STACKORIGIN+11
 14624 7457 2A				rol @
 14625 7458 85 8F			sta :ecx+1
 14626 745A A5 A1			lda :STACKORIGIN+11
 14627 745C 85 8E			sta :ecx
 14628 745E AD B8 A1			lda W
 14629 7461 85 86			sta :eax
 14630 7463 A9 00			lda #$00
 14631 7465 85 87			sta :eax+1
 14632 					.ifdef fmulinit
 14633 					fmulu_16
 14634 					els
 14635 7467 20 12 13			imulCX
 14636 					eif
 14637 746A A5 86			lda :eax
 14638 746C 18 65 9F			add :STACKORIGIN+9
 14639 746F 8D B2 A1			sta Z
 14640 7472 A5 87			lda :eax+1
 14641 7474 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14642 7476 8D B3 A1			sta Z+1
 14643
 14644 				; optimize OK (service.pas), line = 2593
 14645
 14646 7479 A9 00			lda #$00
 14647 747B 8D B9 A1			sta X
 14648 747E AC 21 9C			ldy EXPLOSION.WIDTH
 14649 7481 88				dey
 14650 7482 8C 86 74			sty @FORTMP_28B9_0
 14651
 14652 7485			l_28BC
 14653 				; --- ForToDoCondition
 14654 7485 A9 00			lda @FORTMP_28B9_0::#$00
 14655 7487 CD B9 A1			cmp X
 14656 748A B0 03 4C 05 76		jcc l_28CA
 14657
 14658 				; optimize FAIL (1, service.pas), line = 2597
 14659
 14660 748F E8				inx
 14661 7490 A0 01			ldy #1
 14662 7492 AD B8 A1			lda W
 14663 7495 C9 06			cmp #$06
 14664 7497 F0 01			beq @+
 14665 7499 88				dey
 14666 				@
 14667 749A 94 96			sty :STACKORIGIN,x
 14668 749C AD 25 9C			lda EXPLOSION.OFS
 14669 749F 18 6D B9 A1			add X
 14670 74A3 85 9F			sta :STACKORIGIN+9
 14671 74A5 AD 26 9C			lda EXPLOSION.OFS+1
 14672 74A8 69 00			adc #$00
 14673 74AA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14674 74AC AD 27 9C			lda EXPLOSION.OFS+2
 14675 74AF 69 00			adc #$00
 14676 74B1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14677 74B3 AD 28 9C			lda EXPLOSION.OFS+3
 14678 74B6 69 00			adc #$00
 14679 74B8 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14680 74BA A5 9F			lda :STACKORIGIN+9
 14681 74BC 18 6D B2 A1			add Z
 14682 74C0 8D 29 A0			sta GETBYTE.SRC
 14683 74C3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14684 74C5 6D B3 A1			adc Z+1
 14685 74C8 8D 2A A0			sta GETBYTE.SRC+1
 14686 74CB A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14687 74CD 69 00			adc #$00
 14688 74CF 8D 2B A0			sta GETBYTE.SRC+2
 14689 74D2 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14690 74D4 69 00			adc #$00
 14691 74D6 8D 2C A0			sta GETBYTE.SRC+3
 14692 74D9 20 FE 2D			jsr GETBYTE
 14693 74DC CA				dex
 14694 74DD A0 01			ldy #1
 14695 74DF AD 2D A0			lda GETBYTE.RESULT
 14696 74E2 F0 01			beq @+
 14697 74E4 88				dey
 14698 				@
 14699 74E5 98				tya
 14700 74E6 15 97			ora :STACKORIGIN+1,x
 14701 74E8 D0 03 4C 7A 75		jeq l_28F2
 14702
 14703 				; optimize OK (service.pas), line = 2599
 14704
 14705 74ED AD B9 A1			lda X
 14706 74F0 18 6D B4 A1			add A
 14707 74F4 85 9F			sta :STACKORIGIN+9
 14708 74F6 A9 50			lda #$50
 14709 74F8 6D B5 A1			adc A+1
 14710 74FB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14711 74FD A9 00			lda #$00
 14712 74FF 69 00			adc #$00
 14713 7501 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14714 7503 A9 00			lda #$00
 14715 7505 69 00			adc #$00
 14716 7507 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14717 7509 AD BA A1			lda Y
 14718 750C 18 6D B6 A1			add B
 14719 7510 A8				tay
 14720 7511 A5 9F			lda :STACKORIGIN+9
 14721 7513 18 79 00 C0			add adr.ROW,y
 14722 7517 8D 1F A0			sta BLITBYTE.DST
 14723 751A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14724 751C 79 00 C1			adc adr.ROW+256,y
 14725 751F 8D 20 A0			sta BLITBYTE.DST+1
 14726 7522 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14727 7524 69 00			adc #$00
 14728 7526 8D 21 A0			sta BLITBYTE.DST+2
 14729 7529 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14730 752B 69 00			adc #$00
 14731 752D 8D 22 A0			sta BLITBYTE.DST+3
 14732 7530 AD FD 9B			lda PLAYSCREEN.OFS
 14733 7533 18 6D B9 A1			add X
 14734 7537 85 A0			sta :STACKORIGIN+10
 14735 7539 AD FE 9B			lda PLAYSCREEN.OFS+1
 14736 753C 69 00			adc #$00
 14737 753E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14738 7540 AD FF 9B			lda PLAYSCREEN.OFS+2
 14739 7543 69 00			adc #$00
 14740 7545 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14741 7547 AD 00 9C			lda PLAYSCREEN.OFS+3
 14742 754A 69 00			adc #$00
 14743 754C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14744 754E A5 A0			lda :STACKORIGIN+10
 14745 7550 18 6D B4 A1			add A
 14746 7554 85 A0			sta :STACKORIGIN+10
 14747 7556 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14748 7558 6D B5 A1			adc A+1
 14749 755B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14750 755D A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14751 755F 69 00			adc #$00
 14752 7561 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14753 7563 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14754 7565 69 00			adc #$00
 14755 7567 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14756 7569 A5 A0			lda :STACKORIGIN+10
 14757 756B 18 79 00 C0			add adr.ROW,y
 14758 756F 8D 1B A0			sta BLITBYTE.SRC
 14759 7572 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14760 7574 79 00 C1			adc adr.ROW+256,y
 14761 7577 4C E9 75			jmp l_292F
 14762 757A			l_28F2
 14763
 14764 				; optimize OK (service.pas), line = 2602
 14765
 14766 757A AD B9 A1			lda X
 14767 757D 18 6D B4 A1			add A
 14768 7581 85 9F			sta :STACKORIGIN+9
 14769 7583 A9 50			lda #$50
 14770 7585 6D B5 A1			adc A+1
 14771 7588 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14772 758A A9 00			lda #$00
 14773 758C 69 00			adc #$00
 14774 758E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14775 7590 A9 00			lda #$00
 14776 7592 69 00			adc #$00
 14777 7594 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14778 7596 AD BA A1			lda Y
 14779 7599 18 6D B6 A1			add B
 14780 759D A8				tay
 14781 759E A5 9F			lda :STACKORIGIN+9
 14782 75A0 18 79 00 C0			add adr.ROW,y
 14783 75A4 8D 1F A0			sta BLITBYTE.DST
 14784 75A7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14785 75A9 79 00 C1			adc adr.ROW+256,y
 14786 75AC 8D 20 A0			sta BLITBYTE.DST+1
 14787 75AF A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14788 75B1 69 00			adc #$00
 14789 75B3 8D 21 A0			sta BLITBYTE.DST+2
 14790 75B6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 14791 75B8 69 00			adc #$00
 14792 75BA 8D 22 A0			sta BLITBYTE.DST+3
 14793 75BD AD 25 9C			lda EXPLOSION.OFS
 14794 75C0 18 6D B9 A1			add X
 14795 75C4 85 A0			sta :STACKORIGIN+10
 14796 75C6 AD 26 9C			lda EXPLOSION.OFS+1
 14797 75C9 69 00			adc #$00
 14798 75CB 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14799 75CD AD 27 9C			lda EXPLOSION.OFS+2
 14800 75D0 69 00			adc #$00
 14801 75D2 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14802 75D4 AD 28 9C			lda EXPLOSION.OFS+3
 14803 75D7 69 00			adc #$00
 14804 75D9 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14805 75DB A5 A0			lda :STACKORIGIN+10
 14806 75DD 18 6D B2 A1			add Z
 14807 75E1 8D 1B A0			sta BLITBYTE.SRC
 14808 75E4 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14809 75E6 6D B3 A1			adc Z+1
 14810 75E9			l_292F
 14811 75E9 8D 1C A0			sta BLITBYTE.SRC+1
 14812 75EC A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14813 75EE 69 00			adc #$00
 14814 75F0 8D 1D A0			sta BLITBYTE.SRC+2
 14815 75F3 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14816 75F5 69 00			adc #$00
 14817 75F7 8D 1E A0			sta BLITBYTE.SRC+3
 14818 75FA 20 87 2D			jsr BLITBYTE
 14819
 14820 				; --- ForToDoEpilog
 14821 75FD EE B9 A1			inc X
 14822 7600 F0 03 4C 85 74		jne l_28BC
 14823 7605			l_28CA
 14824
 14825 				; --- ForToDoEpilog
 14826 7605 EE BA A1			inc Y
 14827 7608 F0 03 4C 1C 74		jne l_2886
 14828 760D			l_2894
 14829
 14830 				; optimize OK (service.pas), line = 2606
 14831
 14832 760D AD B8 A1			lda W
 14833 7610 8D DC 9B			sta DEATH_SOUND.A
 14834 7613 A9 00			lda #$00
 14835 7615 8D DD 9B			sta DEATH_SOUND.A+1
 14836 7618 20 25 2B			jsr DEATH_SOUND
 14837
 14838 				; --- ForToDoEpilog
 14839 761B EE B8 A1			inc W
 14840 761E F0 03 4C 0D 74		jne l_286F
 14841 7623			l_287D
 14842
 14843 				; optimize OK (service.pas), line = 2610
 14844
 14845 7623 A9 07			lda #$07
 14846 7625 8D DC 9B			sta DEATH_SOUND.A
 14847 7628 A9 00			lda #$00
 14848 762A 8D DD 9B			sta DEATH_SOUND.A+1
 14849 762D 20 25 2B			jsr DEATH_SOUND
 14850
 14851 				; optimize OK (service.pas), line = 2611
 14852
 14853 7630 A9 96			lda #$96
 14854 7632 8D 2E A0			sta MYDELAY.A
 14855 7635 A9 00			lda #$00
 14856 7637 8D 2F A0			sta MYDELAY.A+1
 14857 763A 20 27 2E			jsr MYDELAY
 14858
 14859 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2612
 14860
 14861 763D 20 47 33			jsr DISABLE_LETTER
 14862
 14863 				; ------------------------------------------------------------
 14864
 14865 = A1B2			Z	= DATAORIGIN+$06C9
 14866 = A1B4			A	= DATAORIGIN+$06CB
 14867 = A1B6			B	= DATAORIGIN+$06CD
 14868 = A1B8			W	= DATAORIGIN+$06CF
 14869 = A1B9			X	= DATAORIGIN+$06D0
 14870 = A1BA			Y	= DATAORIGIN+$06D1
 14871
 14872 = A1B2			@VarData	= Z
 14873 = 0009			@VarDataSize	= 9
 14874
 14875 7640			@exit
 14876 					.ifdef @new
 14877 					lda <@VarData
 14878 					sta :ztmp
 14879 					lda >@VarData
 14880 					ldy #@VarDataSize-1
 14881 					jmp @FreeMem
 14882 					els
 14883 7640 60				rts						; ret
 14884 					eif
 14885 				.endl
 14886
 14887 7641			.local	CREATE_VAUS					; PROCEDURE
 14888
 14889 				; optimize FAIL ('NOSOUND', service.pas), line = 2623
 14890
 14891 7641 20 26 2E			jsr NOSOUND
 14892
 14893 				; optimize OK (service.pas), line = 2624
 14894
 14895 7644 A9 5B			lda #$5B
 14896 7646 8D C1 A1			sta A
 14897 7649 A9 00			lda #$00
 14898 764B 8D C2 A1			sta A+1
 14899
 14900 				; optimize OK (service.pas), line = 2625
 14901
 14902 764E A9 B3			lda #$B3
 14903 7650 8D C3 A1			sta B
 14904 7653 A9 00			lda #$00
 14905 7655 8D C4 A1			sta B+1
 14906
 14907 				; optimize OK (service.pas), line = 2627
 14908
 14909 7658 A9 0B			lda #$0B
 14910 765A 8D BE A1			sta W
 14911
 14912 765D			l_2983
 14913 				; --- ForToDoCondition
 14914 765D A9 00			lda #$00
 14915 765F 8D BD A1			sta Y
 14916
 14917 7662			l_299A
 14918 				; --- ForToDoCondition
 14919 7662 AD BD A1			lda Y
 14920 7665 C9 10			cmp #$10
 14921 7667 90 03 4C 40 78		jcs l_29A8
 14922
 14923 				; optimize OK (service.pas), line = 2631
 14924
 14925 766C AD 29 9C			lda NEWVAUS.WIDTH
 14926 766F 85 8E			sta :ecx
 14927 7671 AD 2A 9C			lda NEWVAUS.WIDTH+1
 14928 7674 85 8F			sta :ecx+1
 14929 7676 AD BD A1			lda Y
 14930 7679 85 86			sta :eax
 14931 767B A9 00			lda #$00
 14932 767D 85 87			sta :eax+1
 14933 					.ifdef fmulinit
 14934 					fmulu_16
 14935 					els
 14936 767F 20 56 13			imulCX_AL
 14937 					eif
 14938 7682 A5 86			lda :eax
 14939 7684 85 9F			sta :STACKORIGIN+9
 14940 7686 A5 87			lda :eax+1
 14941 7688 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14942 768A A9 10			lda #$10
 14943 768C 85 8E			sta :ecx
 14944 768E A9 00			lda #$00
 14945 7690 85 8F			sta :ecx+1
 14946 7692 AD 29 9C			lda NEWVAUS.WIDTH
 14947 7695 85 86			sta :eax
 14948 7697 AD 2A 9C			lda NEWVAUS.WIDTH+1
 14949 769A 85 87			sta :eax+1
 14950 					.ifdef fmulinit
 14951 					fmulu_16
 14952 					els
 14953 769C 20 12 13			imulCX
 14954 					eif
 14955 769F A5 86			lda :eax
 14956 76A1 85 8E			sta :ecx
 14957 76A3 A5 87			lda :eax+1
 14958 76A5 85 8F			sta :ecx+1
 14959 76A7 AD BE A1			lda W
 14960 76AA 85 86			sta :eax
 14961 76AC A9 00			lda #$00
 14962 76AE 85 87			sta :eax+1
 14963 					.ifdef fmulinit
 14964 					fmulu_16
 14965 					els
 14966 76B0 20 56 13			imulCX_AL
 14967 					eif
 14968 76B3 A5 86			lda :eax
 14969 76B5 18 65 9F			add :STACKORIGIN+9
 14970 76B8 8D BF A1			sta Z
 14971 76BB A5 87			lda :eax+1
 14972 76BD 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14973 76BF 8D C0 A1			sta Z+1
 14974
 14975 				; optimize OK (service.pas), line = 2632
 14976
 14977 76C2 A9 00			lda #$00
 14978 76C4 8D BC A1			sta X
 14979 76C7 AC 29 9C			ldy NEWVAUS.WIDTH
 14980 76CA 88				dey
 14981 76CB 8C CF 76			sty @FORTMP_29CD_0
 14982
 14983 76CE			l_29D0
 14984 				; --- ForToDoCondition
 14985 76CE A9 00			lda @FORTMP_29CD_0::#$00
 14986 76D0 CD BC A1			cmp X
 14987 76D3 B0 03 4C 38 78		jcc l_29DE
 14988
 14989 				; optimize OK (service.pas), line = 2634
 14990
 14991 76D8 AD 2D 9C			lda NEWVAUS.OFS
 14992 76DB 18 6D BC A1			add X
 14993 76DF 85 9F			sta :STACKORIGIN+9
 14994 76E1 AD 2E 9C			lda NEWVAUS.OFS+1
 14995 76E4 69 00			adc #$00
 14996 76E6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14997 76E8 AD 2F 9C			lda NEWVAUS.OFS+2
 14998 76EB 69 00			adc #$00
 14999 76ED 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15000 76EF AD 30 9C			lda NEWVAUS.OFS+3
 15001 76F2 69 00			adc #$00
 15002 76F4 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15003 76F6 A5 9F			lda :STACKORIGIN+9
 15004 76F8 18 6D BF A1			add Z
 15005 76FC 8D 29 A0			sta GETBYTE.SRC
 15006 76FF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15007 7701 6D C0 A1			adc Z+1
 15008 7704 8D 2A A0			sta GETBYTE.SRC+1
 15009 7707 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15010 7709 69 00			adc #$00
 15011 770B 8D 2B A0			sta GETBYTE.SRC+2
 15012 770E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15013 7710 69 00			adc #$00
 15014 7712 8D 2C A0			sta GETBYTE.SRC+3
 15015 7715 20 FE 2D			jsr GETBYTE
 15016 7718 AD 2D A0			lda GETBYTE.RESULT
 15017 771B F0 03 4C AD 77		jne l_29FA
 15018
 15019 				; optimize OK (service.pas), line = 2636
 15020
 15021 7720 AD BC A1			lda X
 15022 7723 18 6D C1 A1			add A
 15023 7727 85 9F			sta :STACKORIGIN+9
 15024 7729 A9 50			lda #$50
 15025 772B 6D C2 A1			adc A+1
 15026 772E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15027 7730 A9 00			lda #$00
 15028 7732 69 00			adc #$00
 15029 7734 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15030 7736 A9 00			lda #$00
 15031 7738 69 00			adc #$00
 15032 773A 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15033 773C AD BD A1			lda Y
 15034 773F 18 6D C3 A1			add B
 15035 7743 A8				tay
 15036 7744 A5 9F			lda :STACKORIGIN+9
 15037 7746 18 79 00 C0			add adr.ROW,y
 15038 774A 8D 1F A0			sta BLITBYTE.DST
 15039 774D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15040 774F 79 00 C1			adc adr.ROW+256,y
 15041 7752 8D 20 A0			sta BLITBYTE.DST+1
 15042 7755 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15043 7757 69 00			adc #$00
 15044 7759 8D 21 A0			sta BLITBYTE.DST+2
 15045 775C A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15046 775E 69 00			adc #$00
 15047 7760 8D 22 A0			sta BLITBYTE.DST+3
 15048 7763 AD FD 9B			lda PLAYSCREEN.OFS
 15049 7766 18 6D BC A1			add X
 15050 776A 85 A0			sta :STACKORIGIN+10
 15051 776C AD FE 9B			lda PLAYSCREEN.OFS+1
 15052 776F 69 00			adc #$00
 15053 7771 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15054 7773 AD FF 9B			lda PLAYSCREEN.OFS+2
 15055 7776 69 00			adc #$00
 15056 7778 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15057 777A AD 00 9C			lda PLAYSCREEN.OFS+3
 15058 777D 69 00			adc #$00
 15059 777F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15060 7781 A5 A0			lda :STACKORIGIN+10
 15061 7783 18 6D C1 A1			add A
 15062 7787 85 A0			sta :STACKORIGIN+10
 15063 7789 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15064 778B 6D C2 A1			adc A+1
 15065 778E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15066 7790 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15067 7792 69 00			adc #$00
 15068 7794 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15069 7796 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15070 7798 69 00			adc #$00
 15071 779A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15072 779C A5 A0			lda :STACKORIGIN+10
 15073 779E 18 79 00 C0			add adr.ROW,y
 15074 77A2 8D 1B A0			sta BLITBYTE.SRC
 15075 77A5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15076 77A7 79 00 C1			adc adr.ROW+256,y
 15077 77AA 4C 1C 78			jmp l_2A37
 15078 77AD			l_29FA
 15079
 15080 				; optimize OK (service.pas), line = 2639
 15081
 15082 77AD AD BC A1			lda X
 15083 77B0 18 6D C1 A1			add A
 15084 77B4 85 9F			sta :STACKORIGIN+9
 15085 77B6 A9 50			lda #$50
 15086 77B8 6D C2 A1			adc A+1
 15087 77BB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15088 77BD A9 00			lda #$00
 15089 77BF 69 00			adc #$00
 15090 77C1 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15091 77C3 A9 00			lda #$00
 15092 77C5 69 00			adc #$00
 15093 77C7 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15094 77C9 AD BD A1			lda Y
 15095 77CC 18 6D C3 A1			add B
 15096 77D0 A8				tay
 15097 77D1 A5 9F			lda :STACKORIGIN+9
 15098 77D3 18 79 00 C0			add adr.ROW,y
 15099 77D7 8D 1F A0			sta BLITBYTE.DST
 15100 77DA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15101 77DC 79 00 C1			adc adr.ROW+256,y
 15102 77DF 8D 20 A0			sta BLITBYTE.DST+1
 15103 77E2 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15104 77E4 69 00			adc #$00
 15105 77E6 8D 21 A0			sta BLITBYTE.DST+2
 15106 77E9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15107 77EB 69 00			adc #$00
 15108 77ED 8D 22 A0			sta BLITBYTE.DST+3
 15109 77F0 AD 2D 9C			lda NEWVAUS.OFS
 15110 77F3 18 6D BC A1			add X
 15111 77F7 85 A0			sta :STACKORIGIN+10
 15112 77F9 AD 2E 9C			lda NEWVAUS.OFS+1
 15113 77FC 69 00			adc #$00
 15114 77FE 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15115 7800 AD 2F 9C			lda NEWVAUS.OFS+2
 15116 7803 69 00			adc #$00
 15117 7805 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15118 7807 AD 30 9C			lda NEWVAUS.OFS+3
 15119 780A 69 00			adc #$00
 15120 780C 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15121 780E A5 A0			lda :STACKORIGIN+10
 15122 7810 18 6D BF A1			add Z
 15123 7814 8D 1B A0			sta BLITBYTE.SRC
 15124 7817 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15125 7819 6D C0 A1			adc Z+1
 15126 781C			l_2A37
 15127 781C 8D 1C A0			sta BLITBYTE.SRC+1
 15128 781F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15129 7821 69 00			adc #$00
 15130 7823 8D 1D A0			sta BLITBYTE.SRC+2
 15131 7826 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15132 7828 69 00			adc #$00
 15133 782A 8D 1E A0			sta BLITBYTE.SRC+3
 15134 782D 20 87 2D			jsr BLITBYTE
 15135
 15136 				; --- ForToDoEpilog
 15137 7830 EE BC A1			inc X
 15138 7833 F0 03 4C CE 76		jne l_29D0
 15139 7838			l_29DE
 15140
 15141 				; --- ForToDoEpilog
 15142 7838 EE BD A1			inc Y
 15143 783B F0 03 4C 62 76		jne l_299A
 15144 7840			l_29A8
 15145
 15146 				; optimize OK (service.pas), line = 2643
 15147
 15148 7840 A9 01			lda #$01
 15149 7842 8D 2E A0			sta MYDELAY.A
 15150 7845 A9 00			lda #$00
 15151 7847 8D 2F A0			sta MYDELAY.A+1
 15152 784A 20 27 2E			jsr MYDELAY
 15153
 15154 				; --- ForToDoEpilog
 15155 784D CE BE A1			dec W
 15156 7850 30 03 4C 5D 76		jpl l_2983
 15157 7855			l_2991
 15158
 15159 				; ------------------------------------------------------------
 15160
 15161 = A1BC			X	= DATAORIGIN+$06D3
 15162 = A1BD			Y	= DATAORIGIN+$06D4
 15163 = A1BE			W	= DATAORIGIN+$06D5
 15164 = A1BF			Z	= DATAORIGIN+$06D6
 15165 = A1C1			A	= DATAORIGIN+$06D8
 15166 = A1C3			B	= DATAORIGIN+$06DA
 15167
 15168 = A1BC			@VarData	= X
 15169 = 0009			@VarDataSize	= 9
 15170
 15171 7855			@exit
 15172 					.ifdef @new
 15173 					lda <@VarData
 15174 					sta :ztmp
 15175 					lda >@VarData
 15176 					ldy #@VarDataSize-1
 15177 					jmp @FreeMem
 15178 					els
 15179 7855 60				rts						; ret
 15180 					eif
 15181 				.endl
 15182
 15183 7856			.local	PUT_DIGIT					; PROCEDURE
 15184
 15185 				; optimize OK (service.pas), line = 2653
 15186
 15187 7856 A9 DE			lda #$DE
 15188 7858 8D CE A1			sta A
 15189
 15190 				; optimize OK (service.pas), line = 2677
 15191
 15192 785B AC CA A1			ldy NUM
 15193 785E B9 96 10			lda adr.DIGITS,y
 15194 7861 29 01			and #$01
 15195 7863 C9 01			cmp #$01
 15196 7865 D0 05			jne l_2A8E
 15197 7867 A9 DF			lda #$DF
 15198 7869 8D CE A1			sta A
 15199 786C			l_2A8E
 15200
 15201 				; optimize OK (service.pas), line = 2678
 15202
 15203 786C A9 01			lda #$01
 15204 786E 8D CC A1			sta X
 15205
 15206 7871			l_2A9E
 15207 				; --- ForToDoCondition
 15208 7871 AD CC A1			lda X
 15209 7874 C9 05			cmp #$05
 15210 7876 B0 63			jcs l_2AAC
 15211
 15212 				; optimize OK (service.pas), line = 2680
 15213
 15214 7878 AD C6 A1			lda PX
 15215 787B 85 A0			sta :STACKORIGIN+10
 15216 787D A9 50			lda #$50
 15217 787F 18 6D C7 A1			add PX+1
 15218 7883 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15219 7885 A9 00			lda #$00
 15220 7887 69 00			adc #$00
 15221 7889 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15222 788B A9 00			lda #$00
 15223 788D 69 00			adc #$00
 15224 788F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15225 7891 A5 A0			lda :STACKORIGIN+10
 15226 7893 18 6D CC A1			add X
 15227 7897 85 A0			sta :STACKORIGIN+10
 15228 7899 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15229 789B 69 00			adc #$00
 15230 789D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15231 789F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15232 78A1 69 00			adc #$00
 15233 78A3 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15234 78A5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15235 78A7 69 00			adc #$00
 15236 78A9 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15237 78AB AC C8 A1			ldy PY
 15238 78AE A5 A0			lda :STACKORIGIN+10
 15239 78B0 18 79 00 C0			add adr.ROW,y
 15240 78B4 8D 24 A0			sta PUTBYTE.DST
 15241 78B7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15242 78B9 79 00 C1			adc adr.ROW+256,y
 15243 78BC 8D 25 A0			sta PUTBYTE.DST+1
 15244 78BF A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15245 78C1 69 00			adc #$00
 15246 78C3 8D 26 A0			sta PUTBYTE.DST+2
 15247 78C6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15248 78C8 69 00			adc #$00
 15249 78CA 8D 27 A0			sta PUTBYTE.DST+3
 15250 78CD AD CE A1			lda A
 15251 78D0 8D 28 A0			sta PUTBYTE.V
 15252 78D3 20 D6 2D			jsr PUTBYTE
 15253
 15254 				; --- ForToDoEpilog
 15255 78D6 EE CC A1			inc X
 15256 78D9 D0 96			jne l_2A9E
 15257 78DB			l_2AAC
 15258
 15259 				; optimize OK (service.pas), line = 2684
 15260
 15261 78DB A9 DE			lda #$DE
 15262 78DD 8D CE A1			sta A
 15263
 15264 				; optimize OK (service.pas), line = 2685
 15265
 15266 78E0 AC CA A1			ldy NUM
 15267 78E3 B9 96 10			lda adr.DIGITS,y
 15268 78E6 29 02			and #$02
 15269 78E8 C9 02			cmp #$02
 15270 78EA D0 05			jne l_2AE4
 15271 78EC A9 DF			lda #$DF
 15272 78EE 8D CE A1			sta A
 15273 78F1			l_2AE4
 15274
 15275 				; optimize OK (service.pas), line = 2686
 15276
 15277 78F1 A9 01			lda #$01
 15278 78F3 8D CC A1			sta X
 15279
 15280 78F6			l_2AF4
 15281 				; --- ForToDoCondition
 15282 78F6 AD CC A1			lda X
 15283 78F9 C9 05			cmp #$05
 15284 78FB B0 63			jcs l_2B02
 15285
 15286 				; optimize OK (service.pas), line = 2688
 15287
 15288 78FD AD C6 A1			lda PX
 15289 7900 85 A0			sta :STACKORIGIN+10
 15290 7902 A9 50			lda #$50
 15291 7904 18 6D C7 A1			add PX+1
 15292 7908 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15293 790A A9 00			lda #$00
 15294 790C 69 00			adc #$00
 15295 790E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15296 7910 A9 00			lda #$00
 15297 7912 69 00			adc #$00
 15298 7914 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15299 7916 A5 A0			lda :STACKORIGIN+10
 15300 7918 18 6D CC A1			add X
 15301 791C 85 A0			sta :STACKORIGIN+10
 15302 791E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15303 7920 69 00			adc #$00
 15304 7922 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15305 7924 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15306 7926 69 00			adc #$00
 15307 7928 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15308 792A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15309 792C 69 00			adc #$00
 15310 792E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15311 7930 AC C8 A1			ldy PY
 15312 7933 A5 A0			lda :STACKORIGIN+10
 15313 7935 18 79 05 C0			add adr.ROW+$05,y
 15314 7939 8D 24 A0			sta PUTBYTE.DST
 15315 793C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15316 793E 79 05 C1			adc adr.ROW+256+$05,y
 15317 7941 8D 25 A0			sta PUTBYTE.DST+1
 15318 7944 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15319 7946 69 00			adc #$00
 15320 7948 8D 26 A0			sta PUTBYTE.DST+2
 15321 794B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15322 794D 69 00			adc #$00
 15323 794F 8D 27 A0			sta PUTBYTE.DST+3
 15324 7952 AD CE A1			lda A
 15325 7955 8D 28 A0			sta PUTBYTE.V
 15326 7958 20 D6 2D			jsr PUTBYTE
 15327
 15328 				; --- ForToDoEpilog
 15329 795B EE CC A1			inc X
 15330 795E D0 96			jne l_2AF4
 15331 7960			l_2B02
 15332
 15333 				; optimize OK (service.pas), line = 2692
 15334
 15335 7960 A9 DE			lda #$DE
 15336 7962 8D CE A1			sta A
 15337
 15338 				; optimize OK (service.pas), line = 2693
 15339
 15340 7965 AC CA A1			ldy NUM
 15341 7968 B9 96 10			lda adr.DIGITS,y
 15342 796B 29 04			and #$04
 15343 796D C9 04			cmp #$04
 15344 796F D0 05			jne l_2B3E
 15345 7971 A9 DF			lda #$DF
 15346 7973 8D CE A1			sta A
 15347 7976			l_2B3E
 15348
 15349 				; optimize OK (service.pas), line = 2694
 15350
 15351 7976 A9 01			lda #$01
 15352 7978 8D CC A1			sta X
 15353
 15354 797B			l_2B4E
 15355 				; --- ForToDoCondition
 15356 797B AD CC A1			lda X
 15357 797E C9 05			cmp #$05
 15358 7980 B0 63			jcs l_2B5C
 15359
 15360 				; optimize OK (service.pas), line = 2696
 15361
 15362 7982 AD C6 A1			lda PX
 15363 7985 85 A0			sta :STACKORIGIN+10
 15364 7987 A9 50			lda #$50
 15365 7989 18 6D C7 A1			add PX+1
 15366 798D 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15367 798F A9 00			lda #$00
 15368 7991 69 00			adc #$00
 15369 7993 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15370 7995 A9 00			lda #$00
 15371 7997 69 00			adc #$00
 15372 7999 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15373 799B A5 A0			lda :STACKORIGIN+10
 15374 799D 18 6D CC A1			add X
 15375 79A1 85 A0			sta :STACKORIGIN+10
 15376 79A3 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15377 79A5 69 00			adc #$00
 15378 79A7 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15379 79A9 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15380 79AB 69 00			adc #$00
 15381 79AD 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15382 79AF A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15383 79B1 69 00			adc #$00
 15384 79B3 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15385 79B5 AC C8 A1			ldy PY
 15386 79B8 A5 A0			lda :STACKORIGIN+10
 15387 79BA 18 79 0A C0			add adr.ROW+$0A,y
 15388 79BE 8D 24 A0			sta PUTBYTE.DST
 15389 79C1 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15390 79C3 79 0A C1			adc adr.ROW+256+$0A,y
 15391 79C6 8D 25 A0			sta PUTBYTE.DST+1
 15392 79C9 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15393 79CB 69 00			adc #$00
 15394 79CD 8D 26 A0			sta PUTBYTE.DST+2
 15395 79D0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15396 79D2 69 00			adc #$00
 15397 79D4 8D 27 A0			sta PUTBYTE.DST+3
 15398 79D7 AD CE A1			lda A
 15399 79DA 8D 28 A0			sta PUTBYTE.V
 15400 79DD 20 D6 2D			jsr PUTBYTE
 15401
 15402 				; --- ForToDoEpilog
 15403 79E0 EE CC A1			inc X
 15404 79E3 D0 96			jne l_2B4E
 15405 79E5			l_2B5C
 15406
 15407 				; optimize OK (service.pas), line = 2699
 15408
 15409 79E5 A9 DE			lda #$DE
 15410 79E7 8D CE A1			sta A
 15411
 15412 				; optimize OK (service.pas), line = 2700
 15413
 15414 79EA AC CA A1			ldy NUM
 15415 79ED B9 96 10			lda adr.DIGITS,y
 15416 79F0 29 08			and #$08
 15417 79F2 C9 08			cmp #$08
 15418 79F4 D0 05			jne l_2B98
 15419 79F6 A9 DF			lda #$DF
 15420 79F8 8D CE A1			sta A
 15421 79FB			l_2B98
 15422
 15423 				; optimize OK (service.pas), line = 2701
 15424
 15425 79FB A9 01			lda #$01
 15426 79FD 8D CD A1			sta Y
 15427
 15428 7A00			l_2BA8
 15429 				; --- ForToDoCondition
 15430 7A00 AD CD A1			lda Y
 15431 7A03 C9 05			cmp #$05
 15432 7A05 B0 4E			jcs l_2BB6
 15433
 15434 				; optimize OK (service.pas), line = 2703
 15435
 15436 7A07 AD C6 A1			lda PX
 15437 7A0A 85 A0			sta :STACKORIGIN+10
 15438 7A0C A9 50			lda #$50
 15439 7A0E 18 6D C7 A1			add PX+1
 15440 7A12 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15441 7A14 A9 00			lda #$00
 15442 7A16 69 00			adc #$00
 15443 7A18 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15444 7A1A A9 00			lda #$00
 15445 7A1C 69 00			adc #$00
 15446 7A1E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15447 7A20 AD C8 A1			lda PY
 15448 7A23 18 6D CD A1			add Y
 15449 7A27 A8				tay
 15450 7A28 A5 A0			lda :STACKORIGIN+10
 15451 7A2A 18 79 00 C0			add adr.ROW,y
 15452 7A2E 8D 24 A0			sta PUTBYTE.DST
 15453 7A31 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15454 7A33 79 00 C1			adc adr.ROW+256,y
 15455 7A36 8D 25 A0			sta PUTBYTE.DST+1
 15456 7A39 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15457 7A3B 69 00			adc #$00
 15458 7A3D 8D 26 A0			sta PUTBYTE.DST+2
 15459 7A40 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15460 7A42 69 00			adc #$00
 15461 7A44 8D 27 A0			sta PUTBYTE.DST+3
 15462 7A47 AD CE A1			lda A
 15463 7A4A 8D 28 A0			sta PUTBYTE.V
 15464 7A4D 20 D6 2D			jsr PUTBYTE
 15465
 15466 				; --- ForToDoEpilog
 15467 7A50 EE CD A1			inc Y
 15468 7A53 D0 AB			jne l_2BA8
 15469 7A55			l_2BB6
 15470
 15471 				; optimize OK (service.pas), line = 2706
 15472
 15473 7A55 A9 DE			lda #$DE
 15474 7A57 8D CE A1			sta A
 15475
 15476 				; optimize OK (service.pas), line = 2707
 15477
 15478 7A5A AC CA A1			ldy NUM
 15479 7A5D B9 96 10			lda adr.DIGITS,y
 15480 7A60 29 10			and #$10
 15481 7A62 C9 10			cmp #$10
 15482 7A64 D0 05			jne l_2BEE
 15483 7A66 A9 DF			lda #$DF
 15484 7A68 8D CE A1			sta A
 15485 7A6B			l_2BEE
 15486
 15487 				; optimize OK (service.pas), line = 2708
 15488
 15489 7A6B A9 01			lda #$01
 15490 7A6D 8D CD A1			sta Y
 15491
 15492 7A70			l_2BFE
 15493 				; --- ForToDoCondition
 15494 7A70 AD CD A1			lda Y
 15495 7A73 C9 05			cmp #$05
 15496 7A75 B0 4E			jcs l_2C0C
 15497
 15498 				; optimize OK (service.pas), line = 2710
 15499
 15500 7A77 AD C6 A1			lda PX
 15501 7A7A 85 A0			sta :STACKORIGIN+10
 15502 7A7C A9 50			lda #$50
 15503 7A7E 18 6D C7 A1			add PX+1
 15504 7A82 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15505 7A84 A9 00			lda #$00
 15506 7A86 69 00			adc #$00
 15507 7A88 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15508 7A8A A9 00			lda #$00
 15509 7A8C 69 00			adc #$00
 15510 7A8E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15511 7A90 AD C8 A1			lda PY
 15512 7A93 18 6D CD A1			add Y
 15513 7A97 A8				tay
 15514 7A98 A5 A0			lda :STACKORIGIN+10
 15515 7A9A 18 79 05 C0			add adr.ROW+$05,y
 15516 7A9E 8D 24 A0			sta PUTBYTE.DST
 15517 7AA1 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15518 7AA3 79 05 C1			adc adr.ROW+256+$05,y
 15519 7AA6 8D 25 A0			sta PUTBYTE.DST+1
 15520 7AA9 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15521 7AAB 69 00			adc #$00
 15522 7AAD 8D 26 A0			sta PUTBYTE.DST+2
 15523 7AB0 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15524 7AB2 69 00			adc #$00
 15525 7AB4 8D 27 A0			sta PUTBYTE.DST+3
 15526 7AB7 AD CE A1			lda A
 15527 7ABA 8D 28 A0			sta PUTBYTE.V
 15528 7ABD 20 D6 2D			jsr PUTBYTE
 15529
 15530 				; --- ForToDoEpilog
 15531 7AC0 EE CD A1			inc Y
 15532 7AC3 D0 AB			jne l_2BFE
 15533 7AC5			l_2C0C
 15534
 15535 				; optimize OK (service.pas), line = 2713
 15536
 15537 7AC5 A9 DE			lda #$DE
 15538 7AC7 8D CE A1			sta A
 15539
 15540 				; optimize OK (service.pas), line = 2714
 15541
 15542 7ACA AC CA A1			ldy NUM
 15543 7ACD B9 96 10			lda adr.DIGITS,y
 15544 7AD0 29 20			and #$20
 15545 7AD2 C9 20			cmp #$20
 15546 7AD4 D0 05			jne l_2C48
 15547 7AD6 A9 DF			lda #$DF
 15548 7AD8 8D CE A1			sta A
 15549 7ADB			l_2C48
 15550
 15551 				; optimize OK (service.pas), line = 2715
 15552
 15553 7ADB A9 01			lda #$01
 15554 7ADD 8D CD A1			sta Y
 15555
 15556 7AE0			l_2C58
 15557 				; --- ForToDoCondition
 15558 7AE0 AD CD A1			lda Y
 15559 7AE3 C9 05			cmp #$05
 15560 7AE5 B0 4F			jcs l_2C66
 15561
 15562 				; optimize OK (service.pas), line = 2717
 15563
 15564 7AE7 A9 05			lda #$05
 15565 7AE9 6D C6 A1			adc PX
 15566 7AEC 85 A0			sta :STACKORIGIN+10
 15567 7AEE A9 50			lda #$50
 15568 7AF0 6D C7 A1			adc PX+1
 15569 7AF3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15570 7AF5 A9 00			lda #$00
 15571 7AF7 69 00			adc #$00
 15572 7AF9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15573 7AFB A9 00			lda #$00
 15574 7AFD 69 00			adc #$00
 15575 7AFF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15576 7B01 AD C8 A1			lda PY
 15577 7B04 18 6D CD A1			add Y
 15578 7B08 A8				tay
 15579 7B09 A5 A0			lda :STACKORIGIN+10
 15580 7B0B 18 79 00 C0			add adr.ROW,y
 15581 7B0F 8D 24 A0			sta PUTBYTE.DST
 15582 7B12 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15583 7B14 79 00 C1			adc adr.ROW+256,y
 15584 7B17 8D 25 A0			sta PUTBYTE.DST+1
 15585 7B1A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15586 7B1C 69 00			adc #$00
 15587 7B1E 8D 26 A0			sta PUTBYTE.DST+2
 15588 7B21 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15589 7B23 69 00			adc #$00
 15590 7B25 8D 27 A0			sta PUTBYTE.DST+3
 15591 7B28 AD CE A1			lda A
 15592 7B2B 8D 28 A0			sta PUTBYTE.V
 15593 7B2E 20 D6 2D			jsr PUTBYTE
 15594
 15595 				; --- ForToDoEpilog
 15596 7B31 EE CD A1			inc Y
 15597 7B34 D0 AA			jne l_2C58
 15598 7B36			l_2C66
 15599
 15600 				; optimize OK (service.pas), line = 2720
 15601
 15602 7B36 A9 DE			lda #$DE
 15603 7B38 8D CE A1			sta A
 15604
 15605 				; optimize OK (service.pas), line = 2721
 15606
 15607 7B3B AC CA A1			ldy NUM
 15608 7B3E B9 96 10			lda adr.DIGITS,y
 15609 7B41 29 40			and #$40
 15610 7B43 C9 40			cmp #$40
 15611 7B45 D0 05			jne l_2CA2
 15612 7B47 A9 DF			lda #$DF
 15613 7B49 8D CE A1			sta A
 15614 7B4C			l_2CA2
 15615
 15616 				; optimize OK (service.pas), line = 2722
 15617
 15618 7B4C A9 01			lda #$01
 15619 7B4E 8D CD A1			sta Y
 15620
 15621 7B51			l_2CB2
 15622 				; --- ForToDoCondition
 15623 7B51 AD CD A1			lda Y
 15624 7B54 C9 05			cmp #$05
 15625 7B56 B0 4F			jcs l_2CC0
 15626
 15627 				; optimize OK (service.pas), line = 2724
 15628
 15629 7B58 A9 05			lda #$05
 15630 7B5A 6D C6 A1			adc PX
 15631 7B5D 85 A0			sta :STACKORIGIN+10
 15632 7B5F A9 50			lda #$50
 15633 7B61 6D C7 A1			adc PX+1
 15634 7B64 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15635 7B66 A9 00			lda #$00
 15636 7B68 69 00			adc #$00
 15637 7B6A 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15638 7B6C A9 00			lda #$00
 15639 7B6E 69 00			adc #$00
 15640 7B70 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15641 7B72 AD C8 A1			lda PY
 15642 7B75 18 6D CD A1			add Y
 15643 7B79 A8				tay
 15644 7B7A A5 A0			lda :STACKORIGIN+10
 15645 7B7C 18 79 05 C0			add adr.ROW+$05,y
 15646 7B80 8D 24 A0			sta PUTBYTE.DST
 15647 7B83 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15648 7B85 79 05 C1			adc adr.ROW+256+$05,y
 15649 7B88 8D 25 A0			sta PUTBYTE.DST+1
 15650 7B8B A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15651 7B8D 69 00			adc #$00
 15652 7B8F 8D 26 A0			sta PUTBYTE.DST+2
 15653 7B92 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15654 7B94 69 00			adc #$00
 15655 7B96 8D 27 A0			sta PUTBYTE.DST+3
 15656 7B99 AD CE A1			lda A
 15657 7B9C 8D 28 A0			sta PUTBYTE.V
 15658 7B9F 20 D6 2D			jsr PUTBYTE
 15659
 15660 				; --- ForToDoEpilog
 15661 7BA2 EE CD A1			inc Y
 15662 7BA5 D0 AA			jne l_2CB2
 15663 7BA7			l_2CC0
 15664
 15665 				; ------------------------------------------------------------
 15666
 15667 = A1C6			PX	= DATAORIGIN+$06DD
 15668 = A1C8			PY	= DATAORIGIN+$06DF
 15669 = A1CA			NUM	= DATAORIGIN+$06E1
 15670 = A1CC			X	= DATAORIGIN+$06E3
 15671 = A1CD			Y	= DATAORIGIN+$06E4
 15672 = A1CE			A	= DATAORIGIN+$06E5
 15673
 15674 = A1C6			@VarData	= PX
 15675 = 0009			@VarDataSize	= 9
 15676
 15677 7BA7			@exit
 15678 					.ifdef @new
 15679 					lda <@VarData
 15680 					sta :ztmp
 15681 					lda >@VarData
 15682 					ldy #@VarDataSize-1
 15683 					jmp @FreeMem
 15684 					els
 15685 7BA7 60				rts						; ret
 15686 					eif
 15687 				.endl
 15688
 15689 7BA8			.local	WRITE_SCORE					; PROCEDURE
 15690
 15691 				; optimize OK (service.pas), line = 2735
 15692
 15693 7BA8 A9 00			lda #$00
 15694 7BAA 8D DB A1			sta F
 15695
 15696 				; optimize OK (service.pas), line = 2740
 15697
 15698 7BAD A9 A0			lda #$A0
 15699 7BAF 85 8E			sta @INTEGER.DIV.B
 15700 7BB1 A9 86			lda #$86
 15701 7BB3 85 8F			sta @INTEGER.DIV.B+1
 15702 7BB5 A9 01			lda #$01
 15703 7BB7 85 90			sta @INTEGER.DIV.B+2
 15704 7BB9 A9 00			lda #$00
 15705 7BBB 85 91			sta @INTEGER.DIV.B+3
 15706 7BBD AD D3 A1			lda SC
 15707 7BC0 85 86			sta @INTEGER.DIV.A
 15708 7BC2 AD D4 A1			lda SC+1
 15709 7BC5 85 87			sta @INTEGER.DIV.A+1
 15710 7BC7 AD D5 A1			lda SC+2
 15711 7BCA 85 88			sta @INTEGER.DIV.A+2
 15712 7BCC AD D6 A1			lda SC+3
 15713 7BCF 85 89			sta @INTEGER.DIV.A+3
 15714 7BD1 20 7A 12			jsr @INTEGER.DIV
 15715 7BD4 A9 0A			lda #$0A
 15716 7BD6 85 8E			sta @INTEGER.MOD.B
 15717 7BD8 A9 00			lda #$00
 15718 7BDA 85 8F			sta @INTEGER.MOD.B+1
 15719 7BDC 85 90			sta @INTEGER.MOD.B+2
 15720 7BDE 85 91			sta @INTEGER.MOD.B+3
 15721 7BE0 20 97 12			jsr @INTEGER.MOD
 15722 7BE3 A5 8A			lda @INTEGER.MOD.RESULT
 15723 7BE5 8D D7 A1			sta N1
 15724 7BE8 A5 8B			lda @INTEGER.MOD.RESULT+1
 15725 7BEA 8D D8 A1			sta N1+1
 15726 7BED A5 8C			lda @INTEGER.MOD.RESULT+2
 15727 7BEF 8D D9 A1			sta N1+2
 15728 7BF2 A5 8D			lda @INTEGER.MOD.RESULT+3
 15729 7BF4 8D DA A1			sta N1+3
 15730
 15731 				; optimize OK (service.pas), line = 2741
 15732
 15733 7BF7 30 10			jmi l_2D08
 15734 7BF9 0D D9 A1			ora N1+2
 15735 7BFC 0D D8 A1			ora N1+1
 15736 7BFF 0D D7 A1			ora N1
 15737 7C02 F0 05			jeq l_2D08
 15738 7C04 A9 01			lda #$01
 15739 7C06 8D DB A1			sta F
 15740 7C09			l_2D08
 15741
 15742 				; optimize OK (service.pas), line = 2742
 15743
 15744 7C09 AD DB A1			lda F
 15745 7C0C F0 24			jeq l_2D1B
 15746 7C0E AD CF A1			lda PX
 15747 7C11 8D C6 A1			sta PUT_DIGIT.PX
 15748 7C14 AD D0 A1			lda PX+1
 15749 7C17 8D C7 A1			sta PUT_DIGIT.PX+1
 15750 7C1A AD D1 A1			lda PY
 15751 7C1D 8D C8 A1			sta PUT_DIGIT.PY
 15752 7C20 AD D2 A1			lda PY+1
 15753 7C23 8D C9 A1			sta PUT_DIGIT.PY+1
 15754 7C26 AD D7 A1			lda N1
 15755 7C29 8D CA A1			sta PUT_DIGIT.NUM
 15756 7C2C AD D8 A1			lda N1+1
 15757 7C2F 4C 51 7C			jmp l_2D2B
 15758 7C32			l_2D1B
 15759
 15760 				; optimize OK (service.pas), line = 2743
 15761
 15762 7C32 AD CF A1			lda PX
 15763 7C35 8D C6 A1			sta PUT_DIGIT.PX
 15764 7C38 AD D0 A1			lda PX+1
 15765 7C3B 8D C7 A1			sta PUT_DIGIT.PX+1
 15766 7C3E AD D1 A1			lda PY
 15767 7C41 8D C8 A1			sta PUT_DIGIT.PY
 15768 7C44 AD D2 A1			lda PY+1
 15769 7C47 8D C9 A1			sta PUT_DIGIT.PY+1
 15770 7C4A A9 0A			lda #$0A
 15771 7C4C 8D CA A1			sta PUT_DIGIT.NUM
 15772 7C4F A9 00			lda #$00
 15773 7C51			l_2D2B
 15774 7C51 8D CB A1			sta PUT_DIGIT.NUM+1
 15775 7C54 20 56 78			jsr PUT_DIGIT
 15776
 15777 				; optimize OK (service.pas), line = 2746
 15778
 15779 7C57 A9 10			lda #$10
 15780 7C59 85 8E			sta @INTEGER.DIV.B
 15781 7C5B A9 27			lda #$27
 15782 7C5D 85 8F			sta @INTEGER.DIV.B+1
 15783 7C5F A9 00			lda #$00
 15784 7C61 85 90			sta @INTEGER.DIV.B+2
 15785 7C63 85 91			sta @INTEGER.DIV.B+3
 15786 7C65 AD D3 A1			lda SC
 15787 7C68 85 86			sta @INTEGER.DIV.A
 15788 7C6A AD D4 A1			lda SC+1
 15789 7C6D 85 87			sta @INTEGER.DIV.A+1
 15790 7C6F AD D5 A1			lda SC+2
 15791 7C72 85 88			sta @INTEGER.DIV.A+2
 15792 7C74 AD D6 A1			lda SC+3
 15793 7C77 85 89			sta @INTEGER.DIV.A+3
 15794 7C79 20 7A 12			jsr @INTEGER.DIV
 15795 7C7C A9 0A			lda #$0A
 15796 7C7E 85 8E			sta @INTEGER.MOD.B
 15797 7C80 A9 00			lda #$00
 15798 7C82 85 8F			sta @INTEGER.MOD.B+1
 15799 7C84 85 90			sta @INTEGER.MOD.B+2
 15800 7C86 85 91			sta @INTEGER.MOD.B+3
 15801 7C88 20 97 12			jsr @INTEGER.MOD
 15802 7C8B A5 8A			lda @INTEGER.MOD.RESULT
 15803 7C8D 8D D7 A1			sta N1
 15804 7C90 A5 8B			lda @INTEGER.MOD.RESULT+1
 15805 7C92 8D D8 A1			sta N1+1
 15806 7C95 A5 8C			lda @INTEGER.MOD.RESULT+2
 15807 7C97 8D D9 A1			sta N1+2
 15808 7C9A A5 8D			lda @INTEGER.MOD.RESULT+3
 15809 7C9C 8D DA A1			sta N1+3
 15810
 15811 				; optimize OK (service.pas), line = 2747
 15812
 15813 7C9F 30 10			jmi l_2D4D
 15814 7CA1 0D D9 A1			ora N1+2
 15815 7CA4 0D D8 A1			ora N1+1
 15816 7CA7 0D D7 A1			ora N1
 15817 7CAA F0 05			jeq l_2D4D
 15818 7CAC A9 01			lda #$01
 15819 7CAE 8D DB A1			sta F
 15820 7CB1			l_2D4D
 15821
 15822 				; optimize OK (service.pas), line = 2748
 15823
 15824 7CB1 AD DB A1			lda F
 15825 7CB4 F0 29			jeq l_2D60
 15826 7CB6 AD CF A1			lda PX
 15827 7CB9 18 69 07			add #$07
 15828 7CBC 8D C6 A1			sta PUT_DIGIT.PX
 15829 7CBF AD D0 A1			lda PX+1
 15830 7CC2 69 00			adc #$00
 15831 7CC4 8D C7 A1			sta PUT_DIGIT.PX+1
 15832 7CC7 AD D1 A1			lda PY
 15833 7CCA 8D C8 A1			sta PUT_DIGIT.PY
 15834 7CCD AD D2 A1			lda PY+1
 15835 7CD0 8D C9 A1			sta PUT_DIGIT.PY+1
 15836 7CD3 AD D7 A1			lda N1
 15837 7CD6 8D CA A1			sta PUT_DIGIT.NUM
 15838 7CD9 AD D8 A1			lda N1+1
 15839 7CDC 4C 03 7D			jmp l_2D74
 15840 7CDF			l_2D60
 15841
 15842 				; optimize OK (service.pas), line = 2749
 15843
 15844 7CDF AD CF A1			lda PX
 15845 7CE2 18 69 07			add #$07
 15846 7CE5 8D C6 A1			sta PUT_DIGIT.PX
 15847 7CE8 AD D0 A1			lda PX+1
 15848 7CEB 69 00			adc #$00
 15849 7CED 8D C7 A1			sta PUT_DIGIT.PX+1
 15850 7CF0 AD D1 A1			lda PY
 15851 7CF3 8D C8 A1			sta PUT_DIGIT.PY
 15852 7CF6 AD D2 A1			lda PY+1
 15853 7CF9 8D C9 A1			sta PUT_DIGIT.PY+1
 15854 7CFC A9 0A			lda #$0A
 15855 7CFE 8D CA A1			sta PUT_DIGIT.NUM
 15856 7D01 A9 00			lda #$00
 15857 7D03			l_2D74
 15858 7D03 8D CB A1			sta PUT_DIGIT.NUM+1
 15859 7D06 20 56 78			jsr PUT_DIGIT
 15860
 15861 				; optimize OK (service.pas), line = 2752
 15862
 15863 7D09 A9 E8			lda #$E8
 15864 7D0B 85 8E			sta @INTEGER.DIV.B
 15865 7D0D A9 03			lda #$03
 15866 7D0F 85 8F			sta @INTEGER.DIV.B+1
 15867 7D11 A9 00			lda #$00
 15868 7D13 85 90			sta @INTEGER.DIV.B+2
 15869 7D15 85 91			sta @INTEGER.DIV.B+3
 15870 7D17 AD D3 A1			lda SC
 15871 7D1A 85 86			sta @INTEGER.DIV.A
 15872 7D1C AD D4 A1			lda SC+1
 15873 7D1F 85 87			sta @INTEGER.DIV.A+1
 15874 7D21 AD D5 A1			lda SC+2
 15875 7D24 85 88			sta @INTEGER.DIV.A+2
 15876 7D26 AD D6 A1			lda SC+3
 15877 7D29 85 89			sta @INTEGER.DIV.A+3
 15878 7D2B 20 7A 12			jsr @INTEGER.DIV
 15879 7D2E A9 0A			lda #$0A
 15880 7D30 85 8E			sta @INTEGER.MOD.B
 15881 7D32 A9 00			lda #$00
 15882 7D34 85 8F			sta @INTEGER.MOD.B+1
 15883 7D36 85 90			sta @INTEGER.MOD.B+2
 15884 7D38 85 91			sta @INTEGER.MOD.B+3
 15885 7D3A 20 97 12			jsr @INTEGER.MOD
 15886 7D3D A5 8A			lda @INTEGER.MOD.RESULT
 15887 7D3F 8D D7 A1			sta N1
 15888 7D42 A5 8B			lda @INTEGER.MOD.RESULT+1
 15889 7D44 8D D8 A1			sta N1+1
 15890 7D47 A5 8C			lda @INTEGER.MOD.RESULT+2
 15891 7D49 8D D9 A1			sta N1+2
 15892 7D4C A5 8D			lda @INTEGER.MOD.RESULT+3
 15893 7D4E 8D DA A1			sta N1+3
 15894
 15895 				; optimize OK (service.pas), line = 2753
 15896
 15897 7D51 30 10			jmi l_2D9A
 15898 7D53 0D D9 A1			ora N1+2
 15899 7D56 0D D8 A1			ora N1+1
 15900 7D59 0D D7 A1			ora N1
 15901 7D5C F0 05			jeq l_2D9A
 15902 7D5E A9 01			lda #$01
 15903 7D60 8D DB A1			sta F
 15904 7D63			l_2D9A
 15905
 15906 				; optimize OK (service.pas), line = 2754
 15907
 15908 7D63 AD DB A1			lda F
 15909 7D66 F0 29			jeq l_2DAD
 15910 7D68 AD CF A1			lda PX
 15911 7D6B 18 69 0E			add #$0E
 15912 7D6E 8D C6 A1			sta PUT_DIGIT.PX
 15913 7D71 AD D0 A1			lda PX+1
 15914 7D74 69 00			adc #$00
 15915 7D76 8D C7 A1			sta PUT_DIGIT.PX+1
 15916 7D79 AD D1 A1			lda PY
 15917 7D7C 8D C8 A1			sta PUT_DIGIT.PY
 15918 7D7F AD D2 A1			lda PY+1
 15919 7D82 8D C9 A1			sta PUT_DIGIT.PY+1
 15920 7D85 AD D7 A1			lda N1
 15921 7D88 8D CA A1			sta PUT_DIGIT.NUM
 15922 7D8B AD D8 A1			lda N1+1
 15923 7D8E 4C B5 7D			jmp l_2DC1
 15924 7D91			l_2DAD
 15925
 15926 				; optimize OK (service.pas), line = 2755
 15927
 15928 7D91 AD CF A1			lda PX
 15929 7D94 18 69 0E			add #$0E
 15930 7D97 8D C6 A1			sta PUT_DIGIT.PX
 15931 7D9A AD D0 A1			lda PX+1
 15932 7D9D 69 00			adc #$00
 15933 7D9F 8D C7 A1			sta PUT_DIGIT.PX+1
 15934 7DA2 AD D1 A1			lda PY
 15935 7DA5 8D C8 A1			sta PUT_DIGIT.PY
 15936 7DA8 AD D2 A1			lda PY+1
 15937 7DAB 8D C9 A1			sta PUT_DIGIT.PY+1
 15938 7DAE A9 0A			lda #$0A
 15939 7DB0 8D CA A1			sta PUT_DIGIT.NUM
 15940 7DB3 A9 00			lda #$00
 15941 7DB5			l_2DC1
 15942 7DB5 8D CB A1			sta PUT_DIGIT.NUM+1
 15943 7DB8 20 56 78			jsr PUT_DIGIT
 15944
 15945 				; optimize OK (service.pas), line = 2758
 15946
 15947 7DBB A9 64			lda #$64
 15948 7DBD 85 8E			sta @INTEGER.DIV.B
 15949 7DBF A9 00			lda #$00
 15950 7DC1 85 8F			sta @INTEGER.DIV.B+1
 15951 7DC3 85 90			sta @INTEGER.DIV.B+2
 15952 7DC5 85 91			sta @INTEGER.DIV.B+3
 15953 7DC7 AD D3 A1			lda SC
 15954 7DCA 85 86			sta @INTEGER.DIV.A
 15955 7DCC AD D4 A1			lda SC+1
 15956 7DCF 85 87			sta @INTEGER.DIV.A+1
 15957 7DD1 AD D5 A1			lda SC+2
 15958 7DD4 85 88			sta @INTEGER.DIV.A+2
 15959 7DD6 AD D6 A1			lda SC+3
 15960 7DD9 85 89			sta @INTEGER.DIV.A+3
 15961 7DDB 20 7A 12			jsr @INTEGER.DIV
 15962 7DDE A9 0A			lda #$0A
 15963 7DE0 85 8E			sta @INTEGER.MOD.B
 15964 7DE2 A9 00			lda #$00
 15965 7DE4 85 8F			sta @INTEGER.MOD.B+1
 15966 7DE6 85 90			sta @INTEGER.MOD.B+2
 15967 7DE8 85 91			sta @INTEGER.MOD.B+3
 15968 7DEA 20 97 12			jsr @INTEGER.MOD
 15969 7DED A5 8A			lda @INTEGER.MOD.RESULT
 15970 7DEF 8D D7 A1			sta N1
 15971 7DF2 A5 8B			lda @INTEGER.MOD.RESULT+1
 15972 7DF4 8D D8 A1			sta N1+1
 15973 7DF7 A5 8C			lda @INTEGER.MOD.RESULT+2
 15974 7DF9 8D D9 A1			sta N1+2
 15975 7DFC A5 8D			lda @INTEGER.MOD.RESULT+3
 15976 7DFE 8D DA A1			sta N1+3
 15977
 15978 				; optimize OK (service.pas), line = 2759
 15979
 15980 7E01 30 10			jmi l_2DE7
 15981 7E03 0D D9 A1			ora N1+2
 15982 7E06 0D D8 A1			ora N1+1
 15983 7E09 0D D7 A1			ora N1
 15984 7E0C F0 05			jeq l_2DE7
 15985 7E0E A9 01			lda #$01
 15986 7E10 8D DB A1			sta F
 15987 7E13			l_2DE7
 15988
 15989 				; optimize OK (service.pas), line = 2760
 15990
 15991 7E13 AD DB A1			lda F
 15992 7E16 F0 29			jeq l_2DFA
 15993 7E18 AD CF A1			lda PX
 15994 7E1B 18 69 15			add #$15
 15995 7E1E 8D C6 A1			sta PUT_DIGIT.PX
 15996 7E21 AD D0 A1			lda PX+1
 15997 7E24 69 00			adc #$00
 15998 7E26 8D C7 A1			sta PUT_DIGIT.PX+1
 15999 7E29 AD D1 A1			lda PY
 16000 7E2C 8D C8 A1			sta PUT_DIGIT.PY
 16001 7E2F AD D2 A1			lda PY+1
 16002 7E32 8D C9 A1			sta PUT_DIGIT.PY+1
 16003 7E35 AD D7 A1			lda N1
 16004 7E38 8D CA A1			sta PUT_DIGIT.NUM
 16005 7E3B AD D8 A1			lda N1+1
 16006 7E3E 4C 65 7E			jmp l_2E0E
 16007 7E41			l_2DFA
 16008
 16009 				; optimize OK (service.pas), line = 2761
 16010
 16011 7E41 AD CF A1			lda PX
 16012 7E44 18 69 15			add #$15
 16013 7E47 8D C6 A1			sta PUT_DIGIT.PX
 16014 7E4A AD D0 A1			lda PX+1
 16015 7E4D 69 00			adc #$00
 16016 7E4F 8D C7 A1			sta PUT_DIGIT.PX+1
 16017 7E52 AD D1 A1			lda PY
 16018 7E55 8D C8 A1			sta PUT_DIGIT.PY
 16019 7E58 AD D2 A1			lda PY+1
 16020 7E5B 8D C9 A1			sta PUT_DIGIT.PY+1
 16021 7E5E A9 0A			lda #$0A
 16022 7E60 8D CA A1			sta PUT_DIGIT.NUM
 16023 7E63 A9 00			lda #$00
 16024 7E65			l_2E0E
 16025 7E65 8D CB A1			sta PUT_DIGIT.NUM+1
 16026 7E68 20 56 78			jsr PUT_DIGIT
 16027
 16028 				; optimize OK (service.pas), line = 2764
 16029
 16030 7E6B A9 0A			lda #$0A
 16031 7E6D 85 8E			sta @INTEGER.DIV.B
 16032 7E6F A9 00			lda #$00
 16033 7E71 85 8F			sta @INTEGER.DIV.B+1
 16034 7E73 85 90			sta @INTEGER.DIV.B+2
 16035 7E75 85 91			sta @INTEGER.DIV.B+3
 16036 7E77 AD D3 A1			lda SC
 16037 7E7A 85 86			sta @INTEGER.DIV.A
 16038 7E7C AD D4 A1			lda SC+1
 16039 7E7F 85 87			sta @INTEGER.DIV.A+1
 16040 7E81 AD D5 A1			lda SC+2
 16041 7E84 85 88			sta @INTEGER.DIV.A+2
 16042 7E86 AD D6 A1			lda SC+3
 16043 7E89 85 89			sta @INTEGER.DIV.A+3
 16044 7E8B 20 7A 12			jsr @INTEGER.DIV
 16045 7E8E A9 0A			lda #$0A
 16046 7E90 85 8E			sta @INTEGER.MOD.B
 16047 7E92 A9 00			lda #$00
 16048 7E94 85 8F			sta @INTEGER.MOD.B+1
 16049 7E96 85 90			sta @INTEGER.MOD.B+2
 16050 7E98 85 91			sta @INTEGER.MOD.B+3
 16051 7E9A 20 97 12			jsr @INTEGER.MOD
 16052 7E9D A5 8A			lda @INTEGER.MOD.RESULT
 16053 7E9F 8D D7 A1			sta N1
 16054 7EA2 A5 8B			lda @INTEGER.MOD.RESULT+1
 16055 7EA4 8D D8 A1			sta N1+1
 16056 7EA7 A5 8C			lda @INTEGER.MOD.RESULT+2
 16057 7EA9 8D D9 A1			sta N1+2
 16058 7EAC A5 8D			lda @INTEGER.MOD.RESULT+3
 16059 7EAE 8D DA A1			sta N1+3
 16060
 16061 				; optimize OK (service.pas), line = 2765
 16062
 16063 7EB1 AD CF A1			lda PX
 16064 7EB4 18 69 1C			add #$1C
 16065 7EB7 8D C6 A1			sta PUT_DIGIT.PX
 16066 7EBA AD D0 A1			lda PX+1
 16067 7EBD 69 00			adc #$00
 16068 7EBF 8D C7 A1			sta PUT_DIGIT.PX+1
 16069 7EC2 AD D1 A1			lda PY
 16070 7EC5 8D C8 A1			sta PUT_DIGIT.PY
 16071 7EC8 AD D2 A1			lda PY+1
 16072 7ECB 8D C9 A1			sta PUT_DIGIT.PY+1
 16073 7ECE AD D7 A1			lda N1
 16074 7ED1 8D CA A1			sta PUT_DIGIT.NUM
 16075 7ED4 AD D8 A1			lda N1+1
 16076 7ED7 8D CB A1			sta PUT_DIGIT.NUM+1
 16077 7EDA 20 56 78			jsr PUT_DIGIT
 16078
 16079 				; optimize OK (service.pas), line = 2769
 16080
 16081 7EDD AD CF A1			lda PX
 16082 7EE0 18 69 23			add #$23
 16083 7EE3 8D C6 A1			sta PUT_DIGIT.PX
 16084 7EE6 AD D0 A1			lda PX+1
 16085 7EE9 69 00			adc #$00
 16086 7EEB 8D C7 A1			sta PUT_DIGIT.PX+1
 16087 7EEE AD D1 A1			lda PY
 16088 7EF1 8D C8 A1			sta PUT_DIGIT.PY
 16089 7EF4 AD D2 A1			lda PY+1
 16090 7EF7 8D C9 A1			sta PUT_DIGIT.PY+1
 16091 7EFA A9 00			lda #$00
 16092 7EFC 8D CA A1			sta PUT_DIGIT.NUM
 16093 7EFF 8D CB A1			sta PUT_DIGIT.NUM+1
 16094 7F02 20 56 78			jsr PUT_DIGIT
 16095
 16096 				; ------------------------------------------------------------
 16097
 16098 = A1CF			PX	= DATAORIGIN+$06E6
 16099 = A1D1			PY	= DATAORIGIN+$06E8
 16100 = A1D3			SC	= DATAORIGIN+$06EA
 16101 = A1D7			N1	= DATAORIGIN+$06EE
 16102 = A1DB			F	= DATAORIGIN+$06F2
 16103
 16104 = A1CF			@VarData	= PX
 16105 = 000D			@VarDataSize	= 13
 16106
 16107 7F05			@exit
 16108 					.ifdef @new
 16109 					lda <@VarData
 16110 					sta :ztmp
 16111 					lda >@VarData
 16112 					ldy #@VarDataSize-1
 16113 					jmp @FreeMem
 16114 					els
 16115 7F05 60				rts						; ret
 16116 					eif
 16117 				.endl
 16118
 16119 7F06			.local	PLOT_LIVES					; PROCEDURE
 16120
 16121 				; optimize FAIL (0, service.pas), line = 2815
 16122
 16123 7F06 AD DC A1			lda LIVES
 16124 7F09 D0 03			bne @+
 16125 7F0B CE DD A1			dec LIVES+1
 16126 				@
 16127 7F0E CE DC A1			dec LIVES
 16128
 16129 				; optimize OK (service.pas), line = 2818
 16130
 16131 7F11 A9 00			lda #$00
 16132 7F13 8D E0 A1			sta CN
 16133
 16134 7F16			l_2E4D
 16135 				; --- ForToDoCondition
 16136 7F16 AD E0 A1			lda CN
 16137 7F19 C9 08			cmp #$08
 16138 7F1B 90 03 4C DD 81		jcs l_2E5B
 16139
 16140 				; optimize OK (service.pas), line = 2819
 16141
 16142 7F20 A9 00			lda #$00
 16143 7F22 8D DF A1			sta Y
 16144 7F25 AC 4B 9C			ldy MINIVAUS.HEIGHT
 16145 7F28 88				dey
 16146 7F29 8C 2D 7F			sty @FORTMP_2E66_0
 16147
 16148 7F2C			l_2E69
 16149 				; --- ForToDoCondition
 16150 7F2C A9 00			lda @FORTMP_2E66_0::#$00
 16151 7F2E CD DF A1			cmp Y
 16152 7F31 B0 03 4C D5 81		jcc l_2E77
 16153
 16154 				; optimize OK (service.pas), line = 2820
 16155
 16156 7F36 A9 00			lda #$00
 16157 7F38 8D DE A1			sta X
 16158 7F3B AC 49 9C			ldy MINIVAUS.WIDTH
 16159 7F3E 88				dey
 16160 7F3F 8C 43 7F			sty @FORTMP_2E82_0
 16161
 16162 7F42			l_2E85
 16163 				; --- ForToDoCondition
 16164 7F42 A9 00			lda @FORTMP_2E82_0::#$00
 16165 7F44 CD DE A1			cmp X
 16166 7F47 B0 03 4C CD 81		jcc l_2E93
 16167
 16168 				; optimize OK (service.pas), line = 2822
 16169
 16170 7F4C AD DE A1			lda X
 16171 7F4F 18 69 0B			add #$0B
 16172 7F52 85 9F			sta :STACKORIGIN+9
 16173 7F54 A9 00			lda #$00
 16174 7F56 69 00			adc #$00
 16175 7F58 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16176 7F5A AD 49 9C			lda MINIVAUS.WIDTH
 16177 7F5D 85 8E			sta :ecx
 16178 7F5F AD 4A 9C			lda MINIVAUS.WIDTH+1
 16179 7F62 85 8F			sta :ecx+1
 16180 7F64 AD E0 A1			lda CN
 16181 7F67 85 86			sta :eax
 16182 7F69 A9 00			lda #$00
 16183 7F6B 85 87			sta :eax+1
 16184 					.ifdef fmulinit
 16185 					fmulu_16
 16186 					els
 16187 7F6D 20 56 13			imulCX_AL
 16188 					eif
 16189 7F70 A5 86			lda :eax
 16190 7F72 18 65 9F			add :STACKORIGIN+9
 16191 7F75 8D E5 A1			sta XL
 16192 7F78 A5 87			lda :eax+1
 16193 7F7A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 16194 7F7C 8D E6 A1			sta XL+1
 16195
 16196 				; optimize OK (service.pas), line = 2823
 16197
 16198 7F7F AD DF A1			lda Y
 16199 7F82 18 69 C0			add #$C0
 16200 7F85 8D E7 A1			sta YL
 16201 7F88 A9 00			lda #$00
 16202 7F8A 69 00			adc #$00
 16203 7F8C 8D E8 A1			sta YL+1
 16204
 16205 				; optimize OK (service.pas), line = 2825
 16206
 16207 7F8F AC E5 A1			ldy XL
 16208 7F92 A9 C4			lda #$C4
 16209 7F94 18 6D E6 A1			add XL+1
 16210 7F98 85 83			sta :bp+1
 16211 7F9A B1 82			lda (:bp),y
 16212 7F9C 8D E1 A1			sta XP
 16213 7F9F A9 00			lda #$00
 16214 7FA1 8D E2 A1			sta XP+1
 16215
 16216 				; optimize OK (service.pas), line = 2826
 16217
 16218 7FA4 AC E7 A1			ldy YL
 16219 7FA7 B9 00 C3			lda adr.MODY,y
 16220 7FAA 85 86			sta :eax
 16221 7FAC A9 00			lda #$00
 16222 7FAE 85 87			sta :eax+1
 16223 7FB0 AD 7E 9C			lda PATTERN.WIDTH
 16224 7FB3 85 8E			sta :ecx
 16225 7FB5 AD 7F 9C			lda PATTERN.WIDTH+1
 16226 7FB8 85 8F			sta :ecx+1
 16227 					.ifdef fmulinit
 16228 					fmulu_16
 16229 					els
 16230 7FBA 20 56 13			imulCX_AL
 16231 					eif
 16232 7FBD A5 86			lda :eax
 16233 7FBF 8D E3 A1			sta YP
 16234 7FC2 A5 87			lda :eax+1
 16235 7FC4 8D E4 A1			sta YP+1
 16236
 16237 				; optimize FAIL (1, service.pas), line = 2830
 16238
 16239 7FC7 E8				inx
 16240 7FC8 A0 01			ldy #1
 16241 7FCA AD E0 A1			lda CN
 16242 7FCD CD DC A1			cmp LIVES
 16243 7FD0 A9 00			lda #$00
 16244 7FD2 ED DD A1			sbc LIVES+1
 16245 7FD5 50 02			svc
 16246 7FD7 49 80			eor #$80
 16247 7FD9 30 01			bmi @+
 16248 7FDB 88				dey
 16249 				@
 16250 7FDC 94 96			sty :STACKORIGIN,x
 16251 7FDE AD 4D 9C			lda MINIVAUS.OFS
 16252 7FE1 18 6D DE A1			add X
 16253 7FE5 85 9F			sta :STACKORIGIN+9
 16254 7FE7 AD 4E 9C			lda MINIVAUS.OFS+1
 16255 7FEA 69 00			adc #$00
 16256 7FEC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16257 7FEE AD 4F 9C			lda MINIVAUS.OFS+2
 16258 7FF1 69 00			adc #$00
 16259 7FF3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16260 7FF5 AD 50 9C			lda MINIVAUS.OFS+3
 16261 7FF8 69 00			adc #$00
 16262 7FFA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16263 7FFC AD 49 9C			lda MINIVAUS.WIDTH
 16264 7FFF 85 8E			sta :ecx
 16265 8001 AD 4A 9C			lda MINIVAUS.WIDTH+1
 16266 8004 85 8F			sta :ecx+1
 16267 8006 AD DF A1			lda Y
 16268 8009 85 86			sta :eax
 16269 800B A9 00			lda #$00
 16270 800D 85 87			sta :eax+1
 16271 					.ifdef fmulinit
 16272 					fmulu_16
 16273 					els
 16274 800F 20 56 13			imulCX_AL
 16275 					eif
 16276 8012 A5 9F			lda :STACKORIGIN+9
 16277 8014 18 65 86			add :eax
 16278 8017 8D 29 A0			sta GETBYTE.SRC
 16279 801A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16280 801C 65 87			adc :eax+1
 16281 801E 8D 2A A0			sta GETBYTE.SRC+1
 16282 8021 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16283 8023 65 88			adc :eax+2
 16284 8025 8D 2B A0			sta GETBYTE.SRC+2
 16285 8028 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16286 802A 65 89			adc :eax+3
 16287 802C 8D 2C A0			sta GETBYTE.SRC+3
 16288 802F 20 FE 2D			jsr GETBYTE
 16289 8032 CA				dex
 16290 8033 A0 01			ldy #1
 16291 8035 AD 2D A0			lda GETBYTE.RESULT
 16292 8038 D0 01			bne @+
 16293 803A 88				dey
 16294 				@
 16295 803B 98				tya
 16296 803C 35 97			and :STACKORIGIN+1,x
 16297 803E F0 5D			jeq l_2EF6
 16298
 16299 				; optimize OK (service.pas), line = 2833
 16300
 16301 8040 AD 4D 9C			lda MINIVAUS.OFS
 16302 8043 18 6D DE A1			add X
 16303 8047 85 9F			sta :STACKORIGIN+9
 16304 8049 AD 4E 9C			lda MINIVAUS.OFS+1
 16305 804C 69 00			adc #$00
 16306 804E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16307 8050 AD 4F 9C			lda MINIVAUS.OFS+2
 16308 8053 69 00			adc #$00
 16309 8055 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16310 8057 AD 50 9C			lda MINIVAUS.OFS+3
 16311 805A 69 00			adc #$00
 16312 805C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16313 805E AD 49 9C			lda MINIVAUS.WIDTH
 16314 8061 85 8E			sta :ecx
 16315 8063 AD 4A 9C			lda MINIVAUS.WIDTH+1
 16316 8066 85 8F			sta :ecx+1
 16317 8068 AD DF A1			lda Y
 16318 806B 85 86			sta :eax
 16319 806D A9 00			lda #$00
 16320 806F 85 87			sta :eax+1
 16321 					.ifdef fmulinit
 16322 					fmulu_16
 16323 					els
 16324 8071 20 56 13			imulCX_AL
 16325 					eif
 16326 8074 A5 9F			lda :STACKORIGIN+9
 16327 8076 18 65 86			add :eax
 16328 8079 8D 29 A0			sta GETBYTE.SRC
 16329 807C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16330 807E 65 87			adc :eax+1
 16331 8080 8D 2A A0			sta GETBYTE.SRC+1
 16332 8083 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16333 8085 65 88			adc :eax+2
 16334 8087 8D 2B A0			sta GETBYTE.SRC+2
 16335 808A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16336 808C 65 89			adc :eax+3
 16337 808E 8D 2C A0			sta GETBYTE.SRC+3
 16338 8091 20 FE 2D			jsr GETBYTE
 16339 8094 AD 2D A0			lda GETBYTE.RESULT
 16340 8097 8D EA A1			sta CL
 16341 				; optimize OK (service.pas), line = 2836
 16342 				; optimize OK (service.pas), line = 2839
 16343 809A 4C 37 81			jmp l_2F38
 16344 809D			l_2EF6
 16345
 16346 				; optimize OK (service.pas), line = 2848
 16347
 16348 809D AD FD 9B			lda PLAYSCREEN.OFS
 16349 80A0 18 6D E5 A1			add XL
 16350 80A4 85 9F			sta :STACKORIGIN+9
 16351 80A6 AD FE 9B			lda PLAYSCREEN.OFS+1
 16352 80A9 6D E6 A1			adc XL+1
 16353 80AC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16354 80AE AD FF 9B			lda PLAYSCREEN.OFS+2
 16355 80B1 69 00			adc #$00
 16356 80B3 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16357 80B5 AD 00 9C			lda PLAYSCREEN.OFS+3
 16358 80B8 69 00			adc #$00
 16359 80BA 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16360 80BC AC E7 A1			ldy YL
 16361 80BF A5 9F			lda :STACKORIGIN+9
 16362 80C1 18 79 00 C0			add adr.ROW,y
 16363 80C5 8D 29 A0			sta GETBYTE.SRC
 16364 80C8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16365 80CA 79 00 C1			adc adr.ROW+256,y
 16366 80CD 8D 2A A0			sta GETBYTE.SRC+1
 16367 80D0 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16368 80D2 69 00			adc #$00
 16369 80D4 8D 2B A0			sta GETBYTE.SRC+2
 16370 80D7 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16371 80D9 69 00			adc #$00
 16372 80DB 8D 2C A0			sta GETBYTE.SRC+3
 16373 80DE 20 FE 2D			jsr GETBYTE
 16374 80E1 AD 2D A0			lda GETBYTE.RESULT
 16375 80E4 29 80			and #$80
 16376 80E6 8D E9 A1			sta SHADOW
 16377
 16378 				; optimize OK (service.pas), line = 2851
 16379
 16380 80E9 AD 82 9C			lda PATTERN.OFS
 16381 80EC 18 6D E1 A1			add XP
 16382 80F0 85 9F			sta :STACKORIGIN+9
 16383 80F2 AD 83 9C			lda PATTERN.OFS+1
 16384 80F5 6D E2 A1			adc XP+1
 16385 80F8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16386 80FA AD 84 9C			lda PATTERN.OFS+2
 16387 80FD 69 00			adc #$00
 16388 80FF 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16389 8101 AD 85 9C			lda PATTERN.OFS+3
 16390 8104 69 00			adc #$00
 16391 8106 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16392 8108 A5 9F			lda :STACKORIGIN+9
 16393 810A 18 6D E3 A1			add YP
 16394 810E 8D 29 A0			sta GETBYTE.SRC
 16395 8111 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16396 8113 6D E4 A1			adc YP+1
 16397 8116 8D 2A A0			sta GETBYTE.SRC+1
 16398 8119 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16399 811B 69 00			adc #$00
 16400 811D 8D 2B A0			sta GETBYTE.SRC+2
 16401 8120 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16402 8122 69 00			adc #$00
 16403 8124 8D 2C A0			sta GETBYTE.SRC+3
 16404 8127 20 FE 2D			jsr GETBYTE
 16405 812A E8				inx
 16406 812B AD 2D A0			lda GETBYTE.RESULT
 16407 812E 29 7F			and #$7F
 16408 8130 0D E9 A1			ora SHADOW
 16409 8133 8D EA A1			sta CL
 16410 8136 CA				dex
 16411 8137			l_2F38
 16412
 16413 				; optimize OK (service.pas), line = 2854
 16414
 16415 8137 AD E5 A1			lda XL
 16416 813A 85 A0			sta :STACKORIGIN+10
 16417 813C A9 50			lda #$50
 16418 813E 18 6D E6 A1			add XL+1
 16419 8142 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16420 8144 A9 00			lda #$00
 16421 8146 69 00			adc #$00
 16422 8148 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16423 814A A9 00			lda #$00
 16424 814C 69 00			adc #$00
 16425 814E 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16426 8150 AC E7 A1			ldy YL
 16427 8153 A5 A0			lda :STACKORIGIN+10
 16428 8155 18 79 00 C0			add adr.ROW,y
 16429 8159 8D 24 A0			sta PUTBYTE.DST
 16430 815C A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16431 815E 79 00 C1			adc adr.ROW+256,y
 16432 8161 8D 25 A0			sta PUTBYTE.DST+1
 16433 8164 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16434 8166 69 00			adc #$00
 16435 8168 8D 26 A0			sta PUTBYTE.DST+2
 16436 816B A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16437 816D 69 00			adc #$00
 16438 816F 8D 27 A0			sta PUTBYTE.DST+3
 16439 8172 AD EA A1			lda CL
 16440 8175 8D 28 A0			sta PUTBYTE.V
 16441 8178 20 D6 2D			jsr PUTBYTE
 16442
 16443 				; optimize OK (service.pas), line = 2857
 16444
 16445 817B AD FD 9B			lda PLAYSCREEN.OFS
 16446 817E 18 6D E5 A1			add XL
 16447 8182 85 A0			sta :STACKORIGIN+10
 16448 8184 AD FE 9B			lda PLAYSCREEN.OFS+1
 16449 8187 6D E6 A1			adc XL+1
 16450 818A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16451 818C AD FF 9B			lda PLAYSCREEN.OFS+2
 16452 818F 69 00			adc #$00
 16453 8191 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 16454 8193 AD 00 9C			lda PLAYSCREEN.OFS+3
 16455 8196 69 00			adc #$00
 16456 8198 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 16457 819A AC E7 A1			ldy YL
 16458 819D A5 A0			lda :STACKORIGIN+10
 16459 819F 18 79 00 C0			add adr.ROW,y
 16460 81A3 8D 24 A0			sta PUTBYTE.DST
 16461 81A6 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16462 81A8 79 00 C1			adc adr.ROW+256,y
 16463 81AB 8D 25 A0			sta PUTBYTE.DST+1
 16464 81AE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 16465 81B0 69 00			adc #$00
 16466 81B2 8D 26 A0			sta PUTBYTE.DST+2
 16467 81B5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 16468 81B7 69 00			adc #$00
 16469 81B9 8D 27 A0			sta PUTBYTE.DST+3
 16470 81BC AD EA A1			lda CL
 16471 81BF 8D 28 A0			sta PUTBYTE.V
 16472 81C2 20 D6 2D			jsr PUTBYTE
 16473
 16474 				; --- ForToDoEpilog
 16475 81C5 EE DE A1			inc X
 16476 81C8 F0 03 4C 42 7F		jne l_2E85
 16477 81CD			l_2E93
 16478
 16479 				; --- ForToDoEpilog
 16480 81CD EE DF A1			inc Y
 16481 81D0 F0 03 4C 2C 7F		jne l_2E69
 16482 81D5			l_2E77
 16483
 16484 				; --- ForToDoEpilog
 16485 81D5 EE E0 A1			inc CN
 16486 81D8 F0 03 4C 16 7F		jne l_2E4D
 16487 81DD			l_2E5B
 16488
 16489 				; ------------------------------------------------------------
 16490
 16491 = A1DC			LIVES	= DATAORIGIN+$06F3
 16492 = 000B			XLIVES	= $0B
 16493 = 00C0			YLIVES	= $C0
 16494 = A1DE			X	= DATAORIGIN+$06F5
 16495 = A1DF			Y	= DATAORIGIN+$06F6
 16496 = A1E0			CN	= DATAORIGIN+$06F7
 16497 = A1E1			XP	= DATAORIGIN+$06F8
 16498 = A1E3			YP	= DATAORIGIN+$06FA
 16499 = A1E5			XL	= DATAORIGIN+$06FC
 16500 = A1E7			YL	= DATAORIGIN+$06FE
 16501 = A1E9			SHADOW	= DATAORIGIN+$0700
 16502 = A1EA			CL	= DATAORIGIN+$0701
 16503
 16504 = A1DC			@VarData	= LIVES
 16505 = 000F			@VarDataSize	= 15
 16506
 16507 81DD			@exit
 16508 					.ifdef @new
 16509 					lda <@VarData
 16510 					sta :ztmp
 16511 					lda >@VarData
 16512 					ldy #@VarDataSize-1
 16513 					jmp @FreeMem
 16514 					els
 16515 81DD 60				rts						; ret
 16516 					eif
 16517 				.endl
 16518
 16519 81DE			.local	PLACE_FIRE					; PROCEDURE
 16520
 16521 				; optimize OK (service.pas), line = 2866
 16522
 16523 81DE A9 00			lda #$00
 16524 81E0 8D EF A1			sta Y
 16525 81E3 AC 63 9C			ldy SHOOTS.HEIGHT
 16526 81E6 88				dey
 16527 81E7 8C EB 81			sty @FORTMP_2FA6_0
 16528
 16529 81EA			l_2FA9
 16530 				; --- ForToDoCondition
 16531 81EA A9 00			lda @FORTMP_2FA6_0::#$00
 16532 81EC CD EF A1			cmp Y
 16533 81EF B0 03 4C 76 82		jcc l_2FB7
 16534
 16535 				; optimize OK (service.pas), line = 2868
 16536
 16537 81F4 AD EF A1			lda Y
 16538 81F7 85 86			sta :eax
 16539 81F9 A9 00			lda #$00
 16540 81FB 85 87			sta :eax+1
 16541 81FD AD 61 9C			lda SHOOTS.WIDTH
 16542 8200 85 8E			sta :ecx
 16543 8202 AD 62 9C			lda SHOOTS.WIDTH+1
 16544 8205 85 8F			sta :ecx+1
 16545 					.ifdef fmulinit
 16546 					fmulu_16
 16547 					els
 16548 8207 20 56 13			imulCX_AL
 16549 					eif
 16550 820A A5 86			lda :eax
 16551 820C 8D ED A1			sta FW
 16552 820F A5 87			lda :eax+1
 16553 8211 8D EE A1			sta FW+1
 16554
 16555 				; optimize OK (service.pas), line = 2870
 16556
 16557 8214 AD EF A1			lda Y
 16558 8217 18 6D E8 9C			add FIRE.Y
 16559 821B A8				tay
 16560 821C AD E7 9C			lda FIRE.X
 16561 821F 18 79 00 C0			add adr.ROW,y
 16562 8223 8D 01 A0			sta BLITZERO.DST
 16563 8226 A9 50			lda #$50
 16564 8228 79 00 C1			adc adr.ROW+256,y
 16565 822B 8D 02 A0			sta BLITZERO.DST+1
 16566 822E A9 00			lda #$00
 16567 8230 69 00			adc #$00
 16568 8232 8D 03 A0			sta BLITZERO.DST+2
 16569 8235 A9 00			lda #$00
 16570 8237 69 00			adc #$00
 16571 8239 8D 04 A0			sta BLITZERO.DST+3
 16572 823C AD 65 9C			lda SHOOTS.OFS
 16573 823F 18 6D ED A1			add FW
 16574 8243 8D FD 9F			sta BLITZERO.SRC
 16575 8246 AD 66 9C			lda SHOOTS.OFS+1
 16576 8249 6D EE A1			adc FW+1
 16577 824C 8D FE 9F			sta BLITZERO.SRC+1
 16578 824F AD 67 9C			lda SHOOTS.OFS+2
 16579 8252 69 00			adc #$00
 16580 8254 8D FF 9F			sta BLITZERO.SRC+2
 16581 8257 AD 68 9C			lda SHOOTS.OFS+3
 16582 825A 69 00			adc #$00
 16583 825C 8D 00 A0			sta BLITZERO.SRC+3
 16584 825F AD 61 9C			lda SHOOTS.WIDTH
 16585 8262 8D 05 A0			sta BLITZERO.SIZE
 16586 8265 AD 62 9C			lda SHOOTS.WIDTH+1
 16587 8268 8D 06 A0			sta BLITZERO.SIZE+1
 16588 826B 20 5C 2C			jsr BLITZERO
 16589
 16590 				; --- ForToDoEpilog
 16591 826E EE EF A1			inc Y
 16592 8271 F0 03 4C EA 81		jne l_2FA9
 16593 8276			l_2FB7
 16594
 16595 				; ------------------------------------------------------------
 16596
 16597 = A1ED			FW	= DATAORIGIN+$0704
 16598 = A1EF			Y	= DATAORIGIN+$0706
 16599
 16600 = A1ED			@VarData	= FW
 16601 = 0003			@VarDataSize	= 3
 16602
 16603 8276			@exit
 16604 					.ifdef @new
 16605 					lda <@VarData
 16606 					sta :ztmp
 16607 					lda >@VarData
 16608 					ldy #@VarDataSize-1
 16609 					jmp @FreeMem
 16610 					els
 16611 8276 60				rts						; ret
 16612 					eif
 16613 				.endl
 16614
 16615 8277			.local	REMOVE_FIRE					; PROCEDURE
 16616
 16617 				; optimize OK (service.pas), line = 2878
 16618
 16619 8277 A9 00			lda #$00
 16620 8279 8D F1 A1			sta Y
 16621 827C AC 63 9C			ldy SHOOTS.HEIGHT
 16622 827F 88				dey
 16623 8280 8C 84 82			sty @FORTMP_2FF4_0
 16624
 16625 8283			l_2FF7
 16626 				; --- ForToDoCondition
 16627 8283 A9 00			lda @FORTMP_2FF4_0::#$00
 16628 8285 CD F1 A1			cmp Y
 16629 8288 90 79			jcc l_3005
 16630
 16631 				; optimize OK (service.pas), line = 2882
 16632
 16633 828A AD F1 A1			lda Y
 16634 828D 18 6D E8 9C			add FIRE.Y
 16635 8291 A8				tay
 16636 8292 AD E7 9C			lda FIRE.X
 16637 8295 18 79 00 C0			add adr.ROW,y
 16638 8299 8D 13 A0			sta BLITROW.DST
 16639 829C A9 50			lda #$50
 16640 829E 79 00 C1			adc adr.ROW+256,y
 16641 82A1 8D 14 A0			sta BLITROW.DST+1
 16642 82A4 A9 00			lda #$00
 16643 82A6 69 00			adc #$00
 16644 82A8 8D 15 A0			sta BLITROW.DST+2
 16645 82AB A9 00			lda #$00
 16646 82AD 69 00			adc #$00
 16647 82AF 8D 16 A0			sta BLITROW.DST+3
 16648 82B2 AD FD 9B			lda PLAYSCREEN.OFS
 16649 82B5 18 6D E7 9C			add FIRE.X
 16650 82B9 85 A1			sta :STACKORIGIN+11
 16651 82BB AD FE 9B			lda PLAYSCREEN.OFS+1
 16652 82BE 69 00			adc #$00
 16653 82C0 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 16654 82C2 AD FF 9B			lda PLAYSCREEN.OFS+2
 16655 82C5 69 00			adc #$00
 16656 82C7 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 16657 82C9 AD 00 9C			lda PLAYSCREEN.OFS+3
 16658 82CC 69 00			adc #$00
 16659 82CE 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 16660 82D0 A5 A1			lda :STACKORIGIN+11
 16661 82D2 18 79 00 C0			add adr.ROW,y
 16662 82D6 8D 0F A0			sta BLITROW.SRC
 16663 82D9 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 16664 82DB 79 00 C1			adc adr.ROW+256,y
 16665 82DE 8D 10 A0			sta BLITROW.SRC+1
 16666 82E1 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 16667 82E3 69 00			adc #$00
 16668 82E5 8D 11 A0			sta BLITROW.SRC+2
 16669 82E8 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 16670 82EA 69 00			adc #$00
 16671 82EC 8D 12 A0			sta BLITROW.SRC+3
 16672 82EF AD 61 9C			lda SHOOTS.WIDTH
 16673 82F2 8D 17 A0			sta BLITROW.SIZE
 16674 82F5 AD 62 9C			lda SHOOTS.WIDTH+1
 16675 82F8 8D 18 A0			sta BLITROW.SIZE+1
 16676 82FB 20 0F 2D			jsr BLITROW
 16677
 16678 				; --- ForToDoEpilog
 16679 82FE EE F1 A1			inc Y
 16680 8301 D0 80			jne l_2FF7
 16681 8303			l_3005
 16682
 16683 				; ------------------------------------------------------------
 16684
 16685 = A1F1			Y	= DATAORIGIN+$0708
 16686
 16687 = A1F1			@VarData	= Y
 16688 = 0001			@VarDataSize	= 1
 16689
 16690 8303			@exit
 16691 					.ifdef @new
 16692 					lda <@VarData
 16693 					sta :ztmp
 16694 					lda >@VarData
 16695 					ldy #@VarDataSize-1
 16696 					jmp @FreeMem
 16697 					els
 16698 8303 60				rts						; ret
 16699 					eif
 16700 				.endl
 16701
 16702 8304			.local	CHECK_FIRE					; PROCEDURE
 16703
 16704 				; optimize OK (service.pas), line = 2889
 16705
 16706 8304 AD EA 9C			lda FIRE.AVL
 16707 8307 D0 03 4C 07 85		jeq l_3047
 16708
 16709 				; optimize FAIL ('MOUSECLICK', service.pas), line = 2891
 16710
 16711 830C 20 28 2B			jsr MOUSECLICK
 16712 830F E8				inx
 16713 8310 E8				inx
 16714 8311 A0 01			ldy #1
 16715 8313 AD E2 9B			lda MOUSECLICK.RESULT
 16716 8316 C9 01			cmp #$01
 16717 8318 F0 01			beq @+
 16718 831A 88				dey
 16719 				@
 16720 831B 98				tya
 16721 831C 2D EA 9C			and FIRE.AVL
 16722 831F 95 95			sta :STACKORIGIN-1,x
 16723 8321 CA				dex
 16724 8322 CA				dex
 16725 8323 A0 01			ldy #1
 16726 8325 AD E9 9C			lda FIRE.SHOT
 16727 8328 F0 01			beq @+
 16728 832A 88				dey
 16729 				@
 16730 832B 98				tya
 16731 832C 35 97			and :STACKORIGIN+1,x
 16732 832E F0 48			jeq l_3067
 16733
 16734 				; optimize OK (service.pas), line = 2893
 16735
 16736 8330 AD 79 9C			lda VAUS.WIDTH
 16737 8333 38 ED 61 9C			sub SHOOTS.WIDTH
 16738 8337 85 A0			sta :STACKORIGIN+10
 16739 8339 A9 00			lda #$00
 16740 833B ED 62 9C			sbc SHOOTS.WIDTH+1
 16741 833E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16742 8340 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 16743 8342 66 A0			ror :STACKORIGIN+10
 16744 8344 AD 71 9C			lda VAUS.X
 16745 8347 18 65 A0			add :STACKORIGIN+10
 16746 834A 8D E7 9C			sta FIRE.X
 16747
 16748 				; optimize OK (service.pas), line = 2894
 16749
 16750 834D AD 72 9C			lda VAUS.Y
 16751 8350 38 ED 63 9C			sub SHOOTS.HEIGHT
 16752 8354 8D E8 9C			sta FIRE.Y
 16753
 16754 				; optimize OK (service.pas), line = 2895
 16755
 16756 8357 A9 01			lda #$01
 16757 8359 8D E9 9C			sta FIRE.SHOT
 16758
 16759 				; optimize OK (service.pas), line = 2896
 16760
 16761 835C A9 00			lda #$00
 16762 835E 8D EB 9C			sta FIRE.NW
 16763
 16764 				; optimize OK (service.pas), line = 2897
 16765
 16766 8361 A9 BC			lda #$BC
 16767 8363 8D DE 9B			sta BALL_BLOCK_SOUND.A
 16768 8366 A9 02			lda #$02
 16769 8368 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 16770 836B A9 05			lda #$05
 16771 836D 8D E0 9B			sta BALL_BLOCK_SOUND.B
 16772 8370 A9 00			lda #$00
 16773 8372 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 16774 8375 20 26 2B			jsr BALL_BLOCK_SOUND
 16775 8378			l_3067
 16776
 16777 				; optimize OK (service.pas), line = 2900
 16778
 16779 8378 AD E9 9C			lda FIRE.SHOT
 16780 837B D0 03 4C 07 85		jeq l_30A1
 16781
 16782 				; optimize OK (service.pas), line = 2902
 16783
 16784 8380 AD EB 9C			lda FIRE.NW
 16785 8383 F0 03			jeq l_30AE
 16786 8385 20 77 82			jsr REMOVE_FIRE
 16787 8388			l_30AE
 16788
 16789 				; optimize OK (service.pas), line = 2903
 16790
 16791 8388 A9 01			lda #$01
 16792 838A 8D EB 9C			sta FIRE.NW
 16793
 16794 				; optimize OK (service.pas), line = 2905
 16795
 16796 838D AD E8 9C			lda FIRE.Y
 16797 8390 38 E9 04			sub #$04
 16798 8393 8D E8 9C			sta FIRE.Y
 16799
 16800 				; optimize OK (service.pas), line = 2906
 16801
 16802 8396 C9 16			cmp #$16
 16803 8398 B0 08			jcs l_30C9
 16804 839A A9 00			lda #$00
 16805 839C 8D E9 9C			sta FIRE.SHOT
 16806 839F 4C 07 85			jmp l_30D7
 16807 83A2			l_30C9
 16808
 16809 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 2909
 16810
 16811 83A2 20 DE 81			jsr PLACE_FIRE
 16812
 16813 				; optimize OK (service.pas), line = 2911
 16814
 16815 83A5 AD E8 9C			lda FIRE.Y
 16816 83A8 38 E9 16			sub #$16
 16817 83AB D0 03 4C 07 85		jeq l_30FE
 16818 83B0 10 03			bpl @+
 16819 83B2 4C 07 85			jmp l_30FE
 16820 				@
 16821 83B5 AD E8 9C			lda FIRE.Y
 16822 83B8 38 E9 16			sub #$16
 16823 83BB 85 A0			sta :STACKORIGIN+10
 16824 83BD A9 00			lda #$00
 16825 83BF E9 00			sbc #$00
 16826 83C1 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16827 83C3 A5 A0			lda :STACKORIGIN+10
 16828 83C5 C9 78			cmp #$78
 16829 83C7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 16830 83C9 E9 00			sbc #$00
 16831 83CB 50 02			svc
 16832 83CD 49 80			eor #$80
 16833 83CF 30 03 4C 07 85		jpl l_30FE
 16834 				@
 16835
 16836 				; optimize OK (service.pas), line = 2913
 16837
 16838 83D4 AD E7 9C			lda FIRE.X
 16839 83D7 38 E9 09			sub #$09
 16840 83DA 85 9F			sta :STACKORIGIN+9
 16841 83DC A9 00			lda #$00
 16842 83DE E9 00			sbc #$00
 16843 83E0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16844 83E2 A0 00			ldy #$00
 16845 83E4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16846 83E6 10 01			spl
 16847 83E8 88				dey
 16848 83E9 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16849 83EB 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16850 83ED 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16851 83EF 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16852 83F1 66 9F			ror :STACKORIGIN+9
 16853 83F3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16854 83F5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16855 83F7 66 9F			ror :STACKORIGIN+9
 16856 83F9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16857 83FB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16858 83FD 66 9F			ror :STACKORIGIN+9
 16859 83FF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16860 8401 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16861 8403 66 9F			ror :STACKORIGIN+9
 16862 8405 A5 9F			lda :STACKORIGIN+9
 16863 8407 8D F3 A1			sta X1
 16864 840A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16865 840C 8D F4 A1			sta X1+1
 16866
 16867 				; optimize OK (service.pas), line = 2914
 16868
 16869 840F AD E8 9C			lda FIRE.Y
 16870 8412 38 E9 16			sub #$16
 16871 8415 85 9F			sta :STACKORIGIN+9
 16872 8417 A9 00			lda #$00
 16873 8419 E9 00			sbc #$00
 16874 841B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16875 841D A0 00			ldy #$00
 16876 841F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16877 8421 10 01			spl
 16878 8423 88				dey
 16879 8424 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16880 8426 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16881 8428 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16882 842A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16883 842C 66 9F			ror :STACKORIGIN+9
 16884 842E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16885 8430 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16886 8432 66 9F			ror :STACKORIGIN+9
 16887 8434 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16888 8436 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16889 8438 66 9F			ror :STACKORIGIN+9
 16890 843A A5 9F			lda :STACKORIGIN+9
 16891 843C 8D F7 A1			sta Y1
 16892 843F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16893 8441 8D F8 A1			sta Y1+1
 16894
 16895 				; optimize OK (service.pas), line = 2916
 16896
 16897 8444 AD E7 9C			lda FIRE.X
 16898 8447 18 6D 61 9C			add SHOOTS.WIDTH
 16899 844B 85 9F			sta :STACKORIGIN+9
 16900 844D A9 00			lda #$00
 16901 844F 6D 62 9C			adc SHOOTS.WIDTH+1
 16902 8452 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16903 8454 A9 00			lda #$00
 16904 8456 69 00			adc #$00
 16905 8458 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16906 845A A9 00			lda #$00
 16907 845C 69 00			adc #$00
 16908 845E 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16909 8460 A5 9F			lda :STACKORIGIN+9
 16910 8462 38 E9 09			sub #$09
 16911 8465 85 9F			sta :STACKORIGIN+9
 16912 8467 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16913 8469 E9 00			sbc #$00
 16914 846B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16915 846D A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16916 846F E9 00			sbc #$00
 16917 8471 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 16918 8473 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16919 8475 E9 00			sbc #$00
 16920 8477 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 16921 8479 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16922 847B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16923 847D 66 9F			ror :STACKORIGIN+9
 16924 847F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16925 8481 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16926 8483 66 9F			ror :STACKORIGIN+9
 16927 8485 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16928 8487 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16929 8489 66 9F			ror :STACKORIGIN+9
 16930 848B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 16931 848D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 16932 848F 66 9F			ror :STACKORIGIN+9
 16933 8491 A5 9F			lda :STACKORIGIN+9
 16934 8493 8D F5 A1			sta X2
 16935 8496 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16936 8498 8D F6 A1			sta X2+1
 16937
 16938 				; optimize OK (service.pas), line = 2917
 16939
 16940 849B AD F7 A1			lda Y1
 16941 849E 8D F9 A1			sta Y2
 16942 84A1 AD F8 A1			lda Y1+1
 16943 84A4 8D FA A1			sta Y2+1
 16944
 16945 				; optimize OK (service.pas), line = 2919
 16946
 16947 84A7 AD F7 A1			lda Y1
 16948 84AA 0A				asl @
 16949 84AB 0A				asl @
 16950 84AC 0A				asl @
 16951 84AD 0A				asl @
 16952 84AE 18 6D F3 A1			add X1
 16953 84B2 A8				tay
 16954 84B3 B9 00 DB			lda adr.WALL,y
 16955 84B6 D0 11			jne l_3167x
 16956 84B8 AD F9 A1			lda Y2
 16957 84BB 0A				asl @
 16958 84BC 0A				asl @
 16959 84BD 0A				asl @
 16960 84BE 0A				asl @
 16961 84BF 18 6D F5 A1			add X2
 16962 84C3 A8				tay
 16963 84C4 B9 00 DB			lda adr.WALL,y
 16964 84C7 F0 3E			jeq l_3167
 16965 84C9			l_3167x
 16966
 16967 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 2921
 16968
 16969 84C9 20 77 82			jsr REMOVE_FIRE
 16970
 16971 				; optimize OK (service.pas), line = 2922
 16972
 16973 84CC A9 00			lda #$00
 16974 84CE 8D E9 9C			sta FIRE.SHOT
 16975
 16976 				; optimize OK (service.pas), line = 2924
 16977
 16978 84D1 AD F3 A1			lda X1
 16979 84D4 8D 4C A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16980 84D7 AD F4 A1			lda X1+1
 16981 84DA 8D 4D A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16982 84DD AD F7 A1			lda Y1
 16983 84E0 8D 4E A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16984 84E3 AD F8 A1			lda Y1+1
 16985 84E6 8D 4F A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16986 84E9 20 0C 5E			jsr SHOOT_BLOCK_WITH_FIRE
 16987
 16988 				; optimize OK (service.pas), line = 2925
 16989
 16990 84EC AD F5 A1			lda X2
 16991 84EF 8D 4C A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 16992 84F2 AD F6 A1			lda X2+1
 16993 84F5 8D 4D A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 16994 84F8 AD F9 A1			lda Y2
 16995 84FB 8D 4E A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 16996 84FE AD FA A1			lda Y2+1
 16997 8501 8D 4F A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 16998 8504 20 0C 5E			jsr SHOOT_BLOCK_WITH_FIRE
 16999 8507			l_30D7
 17000 8507			l_3167
 17001 8507			l_30FE
 17002 8507			l_30A1
 17003 8507			l_3047
 17004
 17005 				; ------------------------------------------------------------
 17006
 17007 = A1F3			X1	= DATAORIGIN+$070A
 17008 = A1F5			X2	= DATAORIGIN+$070C
 17009 = A1F7			Y1	= DATAORIGIN+$070E
 17010 = A1F9			Y2	= DATAORIGIN+$0710
 17011
 17012 = A1F3			@VarData	= X1
 17013 = 0008			@VarDataSize	= 8
 17014
 17015 8507			@exit
 17016 					.ifdef @new
 17017 					lda <@VarData
 17018 					sta :ztmp
 17019 					lda >@VarData
 17020 					ldy #@VarDataSize-1
 17021 					jmp @FreeMem
 17022 					els
 17023 8507 60				rts						; ret
 17024 					eif
 17025 				.endl
 17026
 17027 8508			.local	REMOVE_FLUX					; PROCEDURE
 17028
 17029 				; optimize OK (service.pas), line = 2937
 17030
 17031 8508 A9 00			lda #$00
 17032 850A 8D FB A1			sta Y
 17033
 17034 850D			l_318C
 17035 				; --- ForToDoCondition
 17036 850D AC FB A1			ldy Y
 17037 8510 C0 14			cpy #$14
 17038 8512 B0 6C			jcs l_319A
 17039
 17040 				; optimize OK (service.pas), line = 2939
 17041
 17042 8514 A9 D9			lda #$D9
 17043 8516 79 B0 C0			adc adr.ROW+$B0,y
 17044 8519 8D 13 A0			sta BLITROW.DST
 17045 851C A9 50			lda #$50
 17046 851E 79 B0 C1			adc adr.ROW+256+$B0,y
 17047 8521 8D 14 A0			sta BLITROW.DST+1
 17048 8524 A9 00			lda #$00
 17049 8526 69 00			adc #$00
 17050 8528 8D 15 A0			sta BLITROW.DST+2
 17051 852B A9 00			lda #$00
 17052 852D 69 00			adc #$00
 17053 852F 8D 16 A0			sta BLITROW.DST+3
 17054 8532 AD FD 9B			lda PLAYSCREEN.OFS
 17055 8535 18 69 D9			add #$D9
 17056 8538 85 A1			sta :STACKORIGIN+11
 17057 853A AD FE 9B			lda PLAYSCREEN.OFS+1
 17058 853D 69 00			adc #$00
 17059 853F 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 17060 8541 AD FF 9B			lda PLAYSCREEN.OFS+2
 17061 8544 69 00			adc #$00
 17062 8546 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 17063 8548 AD 00 9C			lda PLAYSCREEN.OFS+3
 17064 854B 69 00			adc #$00
 17065 854D 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 17066 854F A5 A1			lda :STACKORIGIN+11
 17067 8551 18 79 B0 C0			add adr.ROW+$B0,y
 17068 8555 8D 0F A0			sta BLITROW.SRC
 17069 8558 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 17070 855A 79 B0 C1			adc adr.ROW+256+$B0,y
 17071 855D 8D 10 A0			sta BLITROW.SRC+1
 17072 8560 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 17073 8562 69 00			adc #$00
 17074 8564 8D 11 A0			sta BLITROW.SRC+2
 17075 8567 A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 17076 8569 69 00			adc #$00
 17077 856B 8D 12 A0			sta BLITROW.SRC+3
 17078 856E A9 08			lda #$08
 17079 8570 8D 17 A0			sta BLITROW.SIZE
 17080 8573 A9 00			lda #$00
 17081 8575 8D 18 A0			sta BLITROW.SIZE+1
 17082 8578 20 0F 2D			jsr BLITROW
 17083
 17084 				; --- ForToDoEpilog
 17085 857B EE FB A1			inc Y
 17086 857E D0 8D			jne l_318C
 17087 8580			l_319A
 17088
 17089 				; ------------------------------------------------------------
 17090
 17091 = A1FB			Y	= DATAORIGIN+$0712
 17092
 17093 = A1FB			@VarData	= Y
 17094 = 0001			@VarDataSize	= 1
 17095
 17096 8580			@exit
 17097 					.ifdef @new
 17098 					lda <@VarData
 17099 					sta :ztmp
 17100 					lda >@VarData
 17101 					ldy #@VarDataSize-1
 17102 					jmp @FreeMem
 17103 					els
 17104 8580 60				rts						; ret
 17105 					eif
 17106 				.endl
 17107
 17108 8581			.local	CHECK_FLUX					; PROCEDURE
 17109
 17110 				; optimize OK (service.pas), line = 2947
 17111
 17112 8581 AD EE 9C			lda SCRFLUXCNT
 17113 8584 8D FD A1			sta FX
 17114
 17115 				; optimize OK (service.pas), line = 2948
 17116
 17117 8587 AD ED 9C			lda SCRFLUX
 17118 858A D0 03 4C 1D 86		jeq l_31D9
 17119
 17120 				; optimize OK (service.pas), line = 2950
 17121
 17122 858F A9 00			lda #$00
 17123 8591 8D FC A1			sta Y
 17124
 17125 8594			l_31E3
 17126 				; --- ForToDoCondition
 17127 8594 AC FC A1			ldy Y
 17128 8597 C0 14			cpy #$14
 17129 8599 B0 73			jcs l_31F1
 17130
 17131 				; optimize OK (service.pas), line = 2952
 17132
 17133 859B A9 D9			lda #$D9
 17134 859D 79 B0 C0			adc adr.ROW+$B0,y
 17135 85A0 8D 13 A0			sta BLITROW.DST
 17136 85A3 A9 50			lda #$50
 17137 85A5 79 B0 C1			adc adr.ROW+256+$B0,y
 17138 85A8 8D 14 A0			sta BLITROW.DST+1
 17139 85AB A9 00			lda #$00
 17140 85AD 69 00			adc #$00
 17141 85AF 8D 15 A0			sta BLITROW.DST+2
 17142 85B2 A9 00			lda #$00
 17143 85B4 69 00			adc #$00
 17144 85B6 8D 16 A0			sta BLITROW.DST+3
 17145 85B9 AD FC A1			lda Y
 17146 85BC 18 6D FD A1			add FX
 17147 85C0 85 A2			sta :STACKORIGIN+12
 17148 85C2 A9 00			lda #$00
 17149 85C4 69 00			adc #$00
 17150 85C6 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 17151 85C8 A9 00			lda #$00
 17152 85CA 06 A2			asl :STACKORIGIN+12
 17153 85CC 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 17154 85CE 2A				rol @
 17155 85CF 06 A2			asl :STACKORIGIN+12
 17156 85D1 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 17157 85D3 2A				rol @
 17158 85D4 06 A2			asl :STACKORIGIN+12
 17159 85D6 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 17160 85D8 2A				rol @
 17161 85D9 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 17162 85DB AD 6D 9C			lda FLUX.OFS
 17163 85DE 18 65 A2			add :STACKORIGIN+12
 17164 85E1 8D 0F A0			sta BLITROW.SRC
 17165 85E4 AD 6E 9C			lda FLUX.OFS+1
 17166 85E7 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 17167 85E9 8D 10 A0			sta BLITROW.SRC+1
 17168 85EC AD 6F 9C			lda FLUX.OFS+2
 17169 85EF 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 17170 85F1 8D 11 A0			sta BLITROW.SRC+2
 17171 85F4 AD 70 9C			lda FLUX.OFS+3
 17172 85F7 69 00			adc #$00
 17173 85F9 8D 12 A0			sta BLITROW.SRC+3
 17174 85FC A9 08			lda #$08
 17175 85FE 8D 17 A0			sta BLITROW.SIZE
 17176 8601 A9 00			lda #$00
 17177 8603 8D 18 A0			sta BLITROW.SIZE+1
 17178 8606 20 0F 2D			jsr BLITROW
 17179
 17180 				; --- ForToDoEpilog
 17181 8609 EE FC A1			inc Y
 17182 860C D0 86			jne l_31E3
 17183 860E			l_31F1
 17184
 17185 				; optimize FAIL (0, service.pas), line = 2954
 17186
 17187 860E EE EE 9C			inc SCRFLUXCNT
 17188
 17189 				; optimize OK (service.pas), line = 2955
 17190
 17191 8611 AD EE 9C			lda SCRFLUXCNT
 17192 8614 C9 15			cmp #$15
 17193 8616 90 05			jcc l_3230
 17194 8618 A9 00			lda #$00
 17195 861A 8D EE 9C			sta SCRFLUXCNT
 17196 861D			l_3230
 17197 861D			l_31D9
 17198
 17199 				; ------------------------------------------------------------
 17200
 17201 = A1FC			Y	= DATAORIGIN+$0713
 17202 = A1FD			FX	= DATAORIGIN+$0714
 17203
 17204 = A1FC			@VarData	= Y
 17205 = 0002			@VarDataSize	= 2
 17206
 17207 861D			@exit
 17208 					.ifdef @new
 17209 					lda <@VarData
 17210 					sta :ztmp
 17211 					lda >@VarData
 17212 					ldy #@VarDataSize-1
 17213 					jmp @FreeMem
 17214 					els
 17215 861D 60				rts						; ret
 17216 					eif
 17217 				.endl
 17218
 17219 861E			.local	VAUS_OUT					; PROCEDURE
 17220
 17221 				; optimize FAIL ('NOSOUND', service.pas), line = 2963
 17222
 17223 861E 20 26 2E			jsr NOSOUND
 17224
 17225 				; optimize OK (service.pas), line = 2965
 17226
 17227 8621 AD CD 9C			lda CUR_PLAYER
 17228 8624 0A				asl @
 17229 8625 0A				asl @
 17230 8626 A8				tay
 17231 8627 B9 B2 9C			lda adr.SCORE.PLAYER,y
 17232 862A 18 69 10			add #$10
 17233 862D 99 B2 9C			sta adr.SCORE.PLAYER,y
 17234 8630 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 17235 8633 69 27			adc #$27
 17236 8635 99 B3 9C			sta adr.SCORE.PLAYER+1,y
 17237 8638 B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 17238 863B 69 00			adc #$00
 17239 863D 99 B4 9C			sta adr.SCORE.PLAYER+2,y
 17240 8640 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 17241 8643 69 00			adc #$00
 17242 8645 99 B5 9C			sta adr.SCORE.PLAYER+3,y
 17243
 17244 				; optimize OK (service.pas), line = 2966
 17245
 17246 8648 A9 00			lda #$00
 17247 864A 8D B0 9C			sta REMAIN_BLK
 17248
 17249 				; optimize OK (service.pas), line = 2968
 17250
 17251 864D AD 71 9C			lda VAUS.X
 17252 8650 8D 02 A2			sta Z
 17253 8653 A9 00			lda #$00
 17254 8655 8D 03 A2			sta Z+1
 17255
 17256 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2970
 17257
 17258 8658 20 8E 36			jsr WAIT_VBL
 17259
 17260 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2971
 17261
 17262 865B 20 EA 45			jsr REMOVE_VAUS
 17263
 17264 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2972
 17265
 17266 865E 20 7D 46			jsr PLACE_VAUS
 17267
 17268 				; optimize OK (service.pas), line = 2974
 17269
 17270 8661 AD 02 A2			lda Z
 17271 8664 8D FE A1			sta X
 17272 8667 AD 03 A2			lda Z+1
 17273 866A 8D FF A1			sta X+1
 17274 866D AD 02 A2			lda Z
 17275 8670 18 69 2C			add #$2C
 17276 8673 8D 86 86			sta @FORTMP_325B_0
 17277 8676 AD 03 A2			lda Z+1
 17278 8679 69 00			adc #$00
 17279 867B 8D 7F 86			sta @FORTMP_325B_1
 17280
 17281 867E			l_325E
 17282 				; --- ForToDoCondition
 17283 867E A9 00			lda @FORTMP_325B_1::#$00
 17284 8680 CD FF A1			cmp X+1
 17285 8683 D0 05			bne @+
 17286 8685 A9 00			lda @FORTMP_325B_0::#$00
 17287 8687 CD FE A1			cmp X
 17288 				@
 17289 868A B0 03 4C 5E 87		jcc l_326A
 17290
 17291 				; optimize FAIL ('WAIT_VBL', service.pas), line = 2976
 17292
 17293 868F 20 8E 36			jsr WAIT_VBL
 17294
 17295 				; optimize OK (service.pas), line = 2978
 17296
 17297 8692 AD 71 9C			lda VAUS.X
 17298 8695 8D 73 9C			sta VAUS.OLDX
 17299 8698 A9 00			lda #$00
 17300 869A 8D 74 9C			sta VAUS.OLDX+1
 17301
 17302 				; optimize OK (service.pas), line = 2979
 17303
 17304 869D AD FE A1			lda X
 17305 86A0 8D 71 9C			sta VAUS.X
 17306
 17307 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 2980
 17308
 17309 86A3 20 EA 45			jsr REMOVE_VAUS
 17310
 17311 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 2981
 17312
 17313 86A6 20 81 85			jsr CHECK_FLUX
 17314
 17315 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 2982
 17316
 17317 86A9 20 7D 46			jsr PLACE_VAUS
 17318
 17319 				; optimize OK (service.pas), line = 2984
 17320
 17321 86AC AD 72 9C			lda VAUS.Y
 17322 86AF 8D 00 A2			sta Y
 17323 86B2 A9 00			lda #$00
 17324 86B4 8D 01 A2			sta Y+1
 17325 86B7 AD 72 9C			lda VAUS.Y
 17326 86BA 18 6D 7A 9C			add VAUS.HEIGHT
 17327 86BE 8D D0 86			sta @FORTMP_3289_0
 17328 86C1 A9 00			lda #$00
 17329 86C3 69 00			adc #$00
 17330 86C5 8D C9 86			sta @FORTMP_3289_1
 17331
 17332 86C8			l_328C
 17333 				; --- ForToDoCondition
 17334 86C8 A9 00			lda @FORTMP_3289_1::#$00
 17335 86CA CD 01 A2			cmp Y+1
 17336 86CD D0 05			bne @+
 17337 86CF A9 00			lda @FORTMP_3289_0::#$00
 17338 86D1 CD 00 A2			cmp Y
 17339 				@
 17340 86D4 90 78			jcc l_3298
 17341
 17342 				; optimize OK (service.pas), line = 2986
 17343
 17344 86D6 AC 00 A2			ldy Y
 17345 86D9 A9 E1			lda #$E1
 17346 86DB 18 79 00 C0			add adr.ROW,y
 17347 86DF 8D 13 A0			sta BLITROW.DST
 17348 86E2 A9 50			lda #$50
 17349 86E4 79 00 C1			adc adr.ROW+256,y
 17350 86E7 8D 14 A0			sta BLITROW.DST+1
 17351 86EA A9 00			lda #$00
 17352 86EC 69 00			adc #$00
 17353 86EE 8D 15 A0			sta BLITROW.DST+2
 17354 86F1 A9 00			lda #$00
 17355 86F3 69 00			adc #$00
 17356 86F5 8D 16 A0			sta BLITROW.DST+3
 17357 86F8 AD FD 9B			lda PLAYSCREEN.OFS
 17358 86FB 18 69 E1			add #$E1
 17359 86FE 85 A1			sta :STACKORIGIN+11
 17360 8700 AD FE 9B			lda PLAYSCREEN.OFS+1
 17361 8703 69 00			adc #$00
 17362 8705 85 B1			sta :STACKORIGIN+STACKWIDTH+11
 17363 8707 AD FF 9B			lda PLAYSCREEN.OFS+2
 17364 870A 69 00			adc #$00
 17365 870C 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
 17366 870E AD 00 9C			lda PLAYSCREEN.OFS+3
 17367 8711 69 00			adc #$00
 17368 8713 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
 17369 8715 A5 A1			lda :STACKORIGIN+11
 17370 8717 18 79 00 C0			add adr.ROW,y
 17371 871B 8D 0F A0			sta BLITROW.SRC
 17372 871E A5 B1			lda :STACKORIGIN+STACKWIDTH+11
 17373 8720 79 00 C1			adc adr.ROW+256,y
 17374 8723 8D 10 A0			sta BLITROW.SRC+1
 17375 8726 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
 17376 8728 69 00			adc #$00
 17377 872A 8D 11 A0			sta BLITROW.SRC+2
 17378 872D A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
 17379 872F 69 00			adc #$00
 17380 8731 8D 12 A0			sta BLITROW.SRC+3
 17381 8734 A9 28			lda #$28
 17382 8736 8D 17 A0			sta BLITROW.SIZE
 17383 8739 A9 00			lda #$00
 17384 873B 8D 18 A0			sta BLITROW.SIZE+1
 17385 873E 20 0F 2D			jsr BLITROW
 17386
 17387 				; --- ForToDoEpilog
 17388 8741 EE 00 A2			inc Y
 17389 8744 D0 82			jne l_328C
 17390 8746 EE 01 A2			inc Y+1
 17391 8749 F0 03 4C C8 86		jne l_328C
 17392 874E			l_3298
 17393
 17394 				; --- ForToDoEpilog
 17395 874E EE FE A1			inc X
 17396 8751 F0 03 4C 7E 86		jne l_325E
 17397 8756 EE FF A1			inc X+1
 17398 8759 F0 03 4C 7E 86		jne l_325E
 17399 875E			l_326A
 17400
 17401 				; ------------------------------------------------------------
 17402
 17403 = A1FE			X	= DATAORIGIN+$0715
 17404 = A200			Y	= DATAORIGIN+$0717
 17405 = A202			Z	= DATAORIGIN+$0719
 17406
 17407 = A1FE			@VarData	= X
 17408 = 0006			@VarDataSize	= 6
 17409
 17410 875E			@exit
 17411 					.ifdef @new
 17412 					lda <@VarData
 17413 					sta :ztmp
 17414 					lda >@VarData
 17415 					ldy #@VarDataSize-1
 17416 					jmp @FreeMem
 17417 					els
 17418 875E 60				rts						; ret
 17419 					eif
 17420 				.endl
 17421
 17422 875F			.local	CHECK_BONUS_TYPE				; PROCEDURE
 17423
 17424 				; optimize OK (service.pas), line = 2996
 17425
 17426 875F AD 7D 9C			lda VAUS.LETTER
 17427 8762 10 03 4C 15 88		jmi l_32D2
 17428 8767 D0 03 4C 15 88		jeq l_32D2
 17429
 17430 				; optimize OK (service.pas), line = 2998
 17431
 17432 876C A0 00			ldy #$00
 17433 876E AD 7D 9C			lda VAUS.LETTER
 17434 8771 10 01			spl
 17435 8773 88				dey
 17436 8774 38 E9 01			sub #$01
 17437 8777 8D E5 9C			sta LETT.LAST
 17438 877A 98				tya
 17439 877B E9 00			sbc #$00
 17440 877D 8D E6 9C			sta LETT.LAST+1
 17441
 17442 				; optimize OK (service.pas), line = 2999
 17443
 17444 8780 AC 0C A2 84 84 AC + 	mwy B2 :bp2
 17445 878A A0 17			ldy #B2.INPLAY-DATAORIGIN
 17446 878C B1 84			lda (:bp2),y
 17447 878E F0 0F			jeq l_32E9
 17448 8790 AD 0C A2			lda B2
 17449 8793 8D 96 A0			sta REMOVE_BALL.BALL
 17450 8796 AD 0D A2			lda B2+1
 17451 8799 8D 97 A0			sta REMOVE_BALL.BALL+1
 17452 879C 20 D2 35			jsr REMOVE_BALL
 17453 879F			l_32E9
 17454
 17455 				; optimize OK (service.pas), line = 3000
 17456
 17457 879F AC 10 A2 84 84 AC + 	mwy B3 :bp2
 17458 87A9 A0 17			ldy #B3.INPLAY-DATAORIGIN
 17459 87AB B1 84			lda (:bp2),y
 17460 87AD F0 0F			jeq l_32FB
 17461 87AF AD 10 A2			lda B3
 17462 87B2 8D 96 A0			sta REMOVE_BALL.BALL
 17463 87B5 AD 11 A2			lda B3+1
 17464 87B8 8D 97 A0			sta REMOVE_BALL.BALL+1
 17465 87BB 20 D2 35			jsr REMOVE_BALL
 17466 87BE			l_32FB
 17467
 17468 				; optimize OK (service.pas), line = 3001
 17469
 17470 87BE AC 0C A2 84 84 AC + 	mwy B2 :bp2
 17471 87C8 A0 17			ldy #B2.INPLAY-DATAORIGIN
 17472 87CA A9 00			lda #$00
 17473 87CC 91 84			sta (:bp2),y
 17474
 17475 				; optimize OK (service.pas), line = 3002
 17476
 17477 87CE AC 10 A2 84 84 AC + 	mwy B3 :bp2
 17478 87D8 A0 17			ldy #B3.INPLAY-DATAORIGIN
 17479 87DA 91 84			sta (:bp2),y
 17480
 17481 				; optimize OK (service.pas), line = 3003
 17482
 17483 87DC 8D ED 9C			sta SCRFLUX
 17484
 17485 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3004
 17486
 17487 87DF 20 08 85			jsr REMOVE_FLUX
 17488
 17489 				; optimize OK (service.pas), line = 3006
 17490
 17491 87E2 AD 7D 9C			lda VAUS.LETTER
 17492 87E5 C9 06			cmp #$06
 17493 87E7 F0 2C			jeq l_3320
 17494
 17495 				; optimize OK (service.pas), line = 3008
 17496
 17497 87E9 AC 08 A2 84 84 AC + 	mwy B1 :bp2
 17498 87F3 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 17499 87F5 A9 00			lda #$00
 17500 87F7 91 84			sta (:bp2),y
 17501
 17502 				; optimize OK (service.pas), line = 3009
 17503
 17504 87F9 AC 0C A2 84 84 AC + 	mwy B2 :bp2
 17505 8803 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 17506 8805 91 84			sta (:bp2),y
 17507
 17508 				; optimize OK (service.pas), line = 3010
 17509
 17510 8807 AC 10 A2 84 84 AC + 	mwy B3 :bp2
 17511 8811 A0 18			ldy #B3.LAUNCH-DATAORIGIN
 17512 8813 91 84			sta (:bp2),y
 17513 8815			l_3320
 17514 8815			l_32D2
 17515
 17516 				; optimize OK (service.pas), line = 3014
 17517
 17518 8815 AD 7D 9C			lda VAUS.LETTER
 17519 8818 8D 16 A2			sta @CASETMP_000A
 17520 881B C9 01			cmp #$01
 17521 881D D0 4D			jne l_333C
 17522 				@
 17523
 17524 				; optimize OK (service.pas), line = 3017
 17525
 17526 881F AD E9 9C			lda FIRE.SHOT
 17527 8822 F0 03			jeq l_3348
 17528 8824 20 77 82			jsr REMOVE_FIRE
 17529 8827			l_3348
 17530
 17531 				; optimize OK (service.pas), line = 3018
 17532
 17533 8827 AD 19 9C 8D 01 9C + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 17534
 17535 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3019
 17536
 17537 8857 20 20 45			jsr MODIFY_VAUS
 17538
 17539 				; optimize OK (service.pas), line = 3020
 17540
 17541 885A A9 00			lda #$00
 17542 885C 8D 7D 9C			sta VAUS.LETTER
 17543
 17544 				; optimize OK (service.pas), line = 3021
 17545
 17546 885F A9 01			lda #$01
 17547 8861 8D EA 9C			sta FIRE.AVL
 17548
 17549 				; optimize OK (service.pas), line = 3022
 17550
 17551 8864 A9 00			lda #$00
 17552 8866 8D E9 9C			sta FIRE.SHOT
 17553 8869 4C 9A 8A			jmp a_000A
 17554 886C			l_333C
 17555 886C C9 02			cmp #$02
 17556 886E D0 46			jne l_3362
 17557
 17558 				; optimize OK (service.pas), line = 3026
 17559
 17560 8870 AD E9 9C			lda FIRE.SHOT
 17561 8873 F0 03			jeq l_336E
 17562 8875 20 77 82			jsr REMOVE_FIRE
 17563 8878			l_336E
 17564
 17565 				; optimize OK (service.pas), line = 3027
 17566
 17567 8878 AD 11 9C 8D 01 9C + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 17568
 17569 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3028
 17570
 17571 88A8 20 20 45			jsr MODIFY_VAUS
 17572
 17573 				; optimize OK (service.pas), line = 3029
 17574
 17575 88AB A9 00			lda #$00
 17576 88AD 8D 7D 9C			sta VAUS.LETTER
 17577
 17578 				; optimize OK (service.pas), line = 3030
 17579
 17580 88B0 8D EA 9C			sta FIRE.AVL
 17581 88B3 4C 9A 8A			jmp a_000A
 17582 88B6			l_3362
 17583 88B6 C9 03			cmp #$03
 17584 88B8 D0 4B			jne l_3384
 17585
 17586 				; optimize OK (service.pas), line = 3034
 17587
 17588 88BA AD E9 9C			lda FIRE.SHOT
 17589 88BD F0 03			jeq l_3390
 17590 88BF 20 77 82			jsr REMOVE_FIRE
 17591 88C2			l_3390
 17592
 17593 				; optimize OK (service.pas), line = 3035
 17594
 17595 88C2 AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17596
 17597 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3036
 17598
 17599 88F2 20 20 45			jsr MODIFY_VAUS
 17600
 17601 				; optimize OK (service.pas), line = 3037
 17602
 17603 88F5 A9 00			lda #$00
 17604 88F7 8D 7D 9C			sta VAUS.LETTER
 17605
 17606 				; optimize OK (service.pas), line = 3038
 17607
 17608 88FA 8D EA 9C			sta FIRE.AVL
 17609
 17610 				; optimize OK (service.pas), line = 3039
 17611
 17612 88FD A9 01			lda #$01
 17613 88FF 8D ED 9C			sta SCRFLUX
 17614 8902 4C 9A 8A			jmp a_000A
 17615 8905			l_3384
 17616 8905 C9 04			cmp #$04
 17617 8907 D0 3E			jne l_33AA
 17618
 17619 				; optimize OK (service.pas), line = 3043
 17620
 17621 8909 AD E9 9C			lda FIRE.SHOT
 17622 890C F0 03			jeq l_33B6
 17623 890E 20 77 82			jsr REMOVE_FIRE
 17624 8911			l_33B6
 17625
 17626 				; optimize OK (service.pas), line = 3044
 17627
 17628 8911 AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17629
 17630 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3045
 17631
 17632 8941 20 20 45			jsr MODIFY_VAUS
 17633 				; optimize OK (service.pas), line = 3046
 17634 8944 4C DE 89			jmp s_33F3
 17635 8947			l_33AA
 17636 8947 C9 05			cmp #$05
 17637 8949 F0 03 4C E1 89		jne l_33C8
 17638
 17639 				; optimize OK (service.pas), line = 3050
 17640
 17641 894E AD E9 9C			lda FIRE.SHOT
 17642 8951 F0 03			jeq l_33D4
 17643 8953 20 77 82			jsr REMOVE_FIRE
 17644 8956			l_33D4
 17645
 17646 				; optimize OK (service.pas), line = 3051
 17647
 17648 8956 AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17649
 17650 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3052
 17651
 17652 8986 20 20 45			jsr MODIFY_VAUS
 17653
 17654 				; optimize OK (service.pas), line = 3053
 17655
 17656 8989 A9 00			lda #$00
 17657 898B 8D 7D 9C			sta VAUS.LETTER
 17658
 17659 				; optimize OK (service.pas), line = 3054
 17660
 17661 898E AC 08 A2 84 84 AC + 	mwy B1 :bp2
 17662 8998 A0 0C			ldy #B1.SPEED-DATAORIGIN
 17663 899A B1 84			lda (:bp2),y
 17664 899C 38 E9 F4			sub #$F4
 17665 899F 8D 30 A0			sta MAX.A
 17666 89A2 C8				iny
 17667 89A3 B1 84			lda (:bp2),y
 17668 89A5 E9 01			sbc #$01
 17669 89A7 8D 31 A0			sta MAX.A+1
 17670 89AA A9 64			lda #$64
 17671 89AC 8D 32 A0			sta MAX.B
 17672 89AF A9 00			lda #$00
 17673 89B1 8D 33 A0			sta MAX.B+1
 17674 89B4 20 28 2E			jsr MAX
 17675 89B7 AD 34 A0			lda MAX.RESULT
 17676 89BA 8D 14 A2			sta X
 17677 89BD AD 35 A0			lda MAX.RESULT+1
 17678 89C0 8D 15 A2			sta X+1
 17679
 17680 				; optimize OK (service.pas), line = 3055
 17681
 17682 89C3 AD 08 A2			lda B1
 17683 89C6 8D A1 A0			sta SET_BALL_SPEED.BALL
 17684 89C9 AD 09 A2			lda B1+1
 17685 89CC 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 17686 89CF AD 14 A2			lda X
 17687 89D2 8D A5 A0			sta SET_BALL_SPEED.SPEED
 17688 89D5 AD 15 A2			lda X+1
 17689 89D8 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 17690 89DB 20 74 37			jsr SET_BALL_SPEED
 17691 89DE			s_33F3
 17692 				; optimize OK (service.pas), line = 3056
 17693 89DE 4C 20 8A			jmp s_3411
 17694 89E1			l_33C8
 17695 89E1 C9 06			cmp #$06
 17696 89E3 D0 3E			jne l_33FA
 17697
 17698 				; optimize OK (service.pas), line = 3060
 17699
 17700 89E5 AD E9 9C			lda FIRE.SHOT
 17701 89E8 F0 03			jeq l_3406
 17702 89EA 20 77 82			jsr REMOVE_FIRE
 17703 89ED			l_3406
 17704
 17705 				; optimize OK (service.pas), line = 3061
 17706
 17707 89ED AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17708
 17709 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3062
 17710
 17711 8A1D 20 20 45			jsr MODIFY_VAUS
 17712 8A20			s_3411
 17713 				; optimize OK (service.pas), line = 3063
 17714 8A20 4C 95 8A			jmp s_3441
 17715 8A23			l_33FA
 17716 8A23 C9 07			cmp #$07
 17717 8A25 D0 73			jne l_3418
 17718
 17719 				; optimize OK (service.pas), line = 3067
 17720
 17721 8A27 AD E9 9C			lda FIRE.SHOT
 17722 8A2A F0 03			jeq l_3424
 17723 8A2C 20 77 82			jsr REMOVE_FIRE
 17724 8A2F			l_3424
 17725
 17726 				; optimize OK (service.pas), line = 3068
 17727
 17728 8A2F AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 17729
 17730 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3069
 17731
 17732 8A5F 20 20 45			jsr MODIFY_VAUS
 17733
 17734 				; optimize OK (service.pas), line = 3070
 17735
 17736 8A62 A9 00			lda #$00
 17737 8A64 8D 7D 9C			sta VAUS.LETTER
 17738
 17739 				; optimize OK (service.pas), line = 3071
 17740
 17741 8A67 AC CD 9C			ldy CUR_PLAYER
 17742 8A6A B9 C1 9C			lda adr.SCORE.LIVES,y
 17743 8A6D 18 69 01			add #$01
 17744 8A70 99 C1 9C			sta adr.SCORE.LIVES,y
 17745
 17746 				; optimize OK (service.pas), line = 3072
 17747
 17748 8A73 8D DC A1			sta PLOT_LIVES.LIVES
 17749 8A76 A9 00			lda #$00
 17750 8A78 8D DD A1			sta PLOT_LIVES.LIVES+1
 17751 8A7B 20 06 7F			jsr PLOT_LIVES
 17752
 17753 				; optimize OK (service.pas), line = 3073
 17754
 17755 8A7E A9 D0			lda #$D0
 17756 8A80 8D DE 9B			sta BALL_BLOCK_SOUND.A
 17757 8A83 A9 07			lda #$07
 17758 8A85 8D DF 9B			sta BALL_BLOCK_SOUND.A+1
 17759 8A88 A9 0A			lda #$0A
 17760 8A8A 8D E0 9B			sta BALL_BLOCK_SOUND.B
 17761 8A8D A9 00			lda #$00
 17762 8A8F 8D E1 9B			sta BALL_BLOCK_SOUND.B+1
 17763 8A92 20 26 2B			jsr BALL_BLOCK_SOUND
 17764 8A95			s_3441
 17765
 17766 				; optimize OK (service.pas), line = 3074
 17767
 17768 8A95 A9 00			lda #$00
 17769 8A97 8D EA 9C			sta FIRE.AVL
 17770 8A9A			l_3418
 17771 8A9A			a_000A
 17772
 17773 				; ------------------------------------------------------------
 17774
 17775 = A208			B1	= DATAORIGIN+$071F
 17776 = 9AE9			B1.X	= DATAORIGIN+$0000
 17777 = 9AEB			B1.Y	= DATAORIGIN+$0002
 17778 = 9AED			B1.FINEX	= DATAORIGIN+$0004
 17779 = 9AEF			B1.FINEY	= DATAORIGIN+$0006
 17780 = 9AF1			B1.OLDX	= DATAORIGIN+$0008
 17781 = 9AF3			B1.OLDY	= DATAORIGIN+$000A
 17782 = 9AF5			B1.SPEED	= DATAORIGIN+$000C
 17783 = 9AF7			B1.FINESPEED	= DATAORIGIN+$000E
 17784 = 9AF9			B1.SPEEDX	= DATAORIGIN+$0010
 17785 = 9AFB			B1.SPEEDY	= DATAORIGIN+$0012
 17786 = 9AFD			B1.SBD	= DATAORIGIN+$0014
 17787 = 9AFF			B1.BRWHIT	= DATAORIGIN+$0016
 17788 = 9B00			B1.INPLAY	= DATAORIGIN+$0017
 17789 = 9B01			B1.LAUNCH	= DATAORIGIN+$0018
 17790 = 9B02			B1.ONVAUS	= DATAORIGIN+$0019
 17791 = 9B03			B1.STM	= DATAORIGIN+$001A
 17792 = A20C			B2	= DATAORIGIN+$0723
 17793 = 9AE9			B2.X	= DATAORIGIN+$0000
 17794 = 9AEB			B2.Y	= DATAORIGIN+$0002
 17795 = 9AED			B2.FINEX	= DATAORIGIN+$0004
 17796 = 9AEF			B2.FINEY	= DATAORIGIN+$0006
 17797 = 9AF1			B2.OLDX	= DATAORIGIN+$0008
 17798 = 9AF3			B2.OLDY	= DATAORIGIN+$000A
 17799 = 9AF5			B2.SPEED	= DATAORIGIN+$000C
 17800 = 9AF7			B2.FINESPEED	= DATAORIGIN+$000E
 17801 = 9AF9			B2.SPEEDX	= DATAORIGIN+$0010
 17802 = 9AFB			B2.SPEEDY	= DATAORIGIN+$0012
 17803 = 9AFD			B2.SBD	= DATAORIGIN+$0014
 17804 = 9AFF			B2.BRWHIT	= DATAORIGIN+$0016
 17805 = 9B00			B2.INPLAY	= DATAORIGIN+$0017
 17806 = 9B01			B2.LAUNCH	= DATAORIGIN+$0018
 17807 = 9B02			B2.ONVAUS	= DATAORIGIN+$0019
 17808 = 9B03			B2.STM	= DATAORIGIN+$001A
 17809 = A210			B3	= DATAORIGIN+$0727
 17810 = 9AE9			B3.X	= DATAORIGIN+$0000
 17811 = 9AEB			B3.Y	= DATAORIGIN+$0002
 17812 = 9AED			B3.FINEX	= DATAORIGIN+$0004
 17813 = 9AEF			B3.FINEY	= DATAORIGIN+$0006
 17814 = 9AF1			B3.OLDX	= DATAORIGIN+$0008
 17815 = 9AF3			B3.OLDY	= DATAORIGIN+$000A
 17816 = 9AF5			B3.SPEED	= DATAORIGIN+$000C
 17817 = 9AF7			B3.FINESPEED	= DATAORIGIN+$000E
 17818 = 9AF9			B3.SPEEDX	= DATAORIGIN+$0010
 17819 = 9AFB			B3.SPEEDY	= DATAORIGIN+$0012
 17820 = 9AFD			B3.SBD	= DATAORIGIN+$0014
 17821 = 9AFF			B3.BRWHIT	= DATAORIGIN+$0016
 17822 = 9B00			B3.INPLAY	= DATAORIGIN+$0017
 17823 = 9B01			B3.LAUNCH	= DATAORIGIN+$0018
 17824 = 9B02			B3.ONVAUS	= DATAORIGIN+$0019
 17825 = 9B03			B3.STM	= DATAORIGIN+$001A
 17826 = A214			X	= DATAORIGIN+$072B
 17827 = A216			@CASETMP_000A	= DATAORIGIN+$072D
 17828
 17829 = A208			@VarData	= B1
 17830 = 0009			@VarDataSize	= 9
 17831
 17832 8A9A			@exit
 17833 					.ifdef @new
 17834 					lda <@VarData
 17835 					sta :ztmp
 17836 					lda >@VarData
 17837 					ldy #@VarDataSize-1
 17838 					jmp @FreeMem
 17839 					els
 17840 8A9A 60				rts						; ret
 17841 					eif
 17842 				.endl
 17843
 17844 8A9B			.local	DEVIATE_BALL					; PROCEDURE
 17845
 17846 				; --- RepeatUntilProlog
 17847 8A9B			l_344F
 17848
 17849 				; optimize OK (service.pas), line = 3087
 17850
 17851 8A9B AD 17 A2			lda BALL
 17852 8A9E 8D B9 A0			sta GET_BALL_DIRECTION.BALL
 17853 8AA1 AD 18 A2			lda BALL+1
 17854 8AA4 8D BA A0			sta GET_BALL_DIRECTION.BALL+1
 17855 8AA7 20 A2 3B			jsr GET_BALL_DIRECTION
 17856 8AAA E8				inx
 17857 8AAB AD BD A0 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 17858 8AB0 AD BE A0 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 17859 8AB5 A9 1E			lda #$1E
 17860 8AB7 20 EE 25			jsr SYSTEM.RANDOM.@010180000
 17861 8ABA E8				inx
 17862 8ABB AD 2E 9B 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 17863 8AC0 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17864 8AC4 20 B5 10			jsr addAX_CX
 17865 8AC7 B5 95			lda :STACKORIGIN-1,x
 17866 8AC9 38 E9 0F			sub #$0F
 17867 8ACC 8D 1B A2			sta TEMP
 17868 8ACF B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 17869 8AD1 E9 00			sbc #$00
 17870 8AD3 8D 1C A2			sta TEMP+1
 17871 8AD6 CA				dex
 17872 8AD7 CA				dex
 17873
 17874 				; optimize OK (service.pas), line = 3088
 17875
 17876 8AD8 A9 5A			lda #$5A
 17877 8ADA 85 8E			sta @SMALLINT.MOD.B
 17878 8ADC A9 00			lda #$00
 17879 8ADE 85 8F			sta @SMALLINT.MOD.B+1
 17880 8AE0 AD 1B A2			lda TEMP
 17881 8AE3 85 86			sta @SMALLINT.MOD.A
 17882 8AE5 AD 1C A2			lda TEMP+1
 17883 8AE8 85 87			sta @SMALLINT.MOD.A+1
 17884 8AEA 20 57 12			jsr @SMALLINT.MOD
 17885 8AED A5 92			lda @SMALLINT.MOD.RESULT
 17886 8AEF C9 1F			cmp #$1F
 17887 8AF1 A5 93			lda @SMALLINT.MOD.RESULT+1
 17888 8AF3 E9 00			sbc #$00
 17889 8AF5 50 02			svc
 17890 8AF7 49 80			eor #$80
 17891 8AF9 30 A0			jmi l_344F
 17892 8AFB A9 5A			lda #$5A
 17893 8AFD 85 8E			sta @SMALLINT.MOD.B
 17894 8AFF A9 00			lda #$00
 17895 8B01 85 8F			sta @SMALLINT.MOD.B+1
 17896 8B03 AD 1B A2			lda TEMP
 17897 8B06 85 86			sta @SMALLINT.MOD.A
 17898 8B08 AD 1C A2			lda TEMP+1
 17899 8B0B 85 87			sta @SMALLINT.MOD.A+1
 17900 8B0D 20 57 12			jsr @SMALLINT.MOD
 17901 8B10 A5 92			lda @SMALLINT.MOD.RESULT
 17902 8B12 C9 3C			cmp #$3C
 17903 8B14 A5 93			lda @SMALLINT.MOD.RESULT+1
 17904 8B16 E9 00			sbc #$00
 17905 8B18 50 02			svc
 17906 8B1A 49 80			eor #$80
 17907 8B1C 30 03 4C 9B 8A		jpl l_344F
 17908
 17909 				; optimize OK (service.pas), line = 3090
 17910
 17911 8B21 AD 17 A2			lda BALL
 17912 8B24 8D AF A0			sta SET_BALL_DIRECTION.BALL
 17913 8B27 AD 18 A2			lda BALL+1
 17914 8B2A 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 17915 8B2D AD 1B A2			lda TEMP
 17916 8B30 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 17917 8B33 AD 1C A2			lda TEMP+1
 17918 8B36 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 17919 8B39 20 9E 39			jsr SET_BALL_DIRECTION
 17920
 17921 				; optimize OK (service.pas), line = 3091
 17922
 17923 8B3C AC 17 A2 84 84 AC + 	mwy BALL :bp2
 17924 8B46 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 17925 8B48 B1 84			lda (:bp2),y
 17926 8B4A 8D A5 A0			sta SET_BALL_SPEED.SPEED
 17927 8B4D C8				iny
 17928 8B4E B1 84			lda (:bp2),y
 17929 8B50 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 17930 8B53 AD 17 A2			lda BALL
 17931 8B56 8D A1 A0			sta SET_BALL_SPEED.BALL
 17932 8B59 AD 18 A2			lda BALL+1
 17933 8B5C 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 17934 8B5F 20 74 37			jsr SET_BALL_SPEED
 17935
 17936 				; optimize OK (service.pas), line = 3092
 17937
 17938 8B62 AC 17 A2 84 84 AC + 	mwy BALL :bp2
 17939 8B6C A0 14			ldy #BALL.SBD-DATAORIGIN
 17940 8B6E A9 00			lda #$00
 17941 8B70 91 84			sta (:bp2),y
 17942 8B72 C8				iny
 17943 8B73 91 84			sta (:bp2),y
 17944
 17945 				; ------------------------------------------------------------
 17946
 17947 = A217			BALL	= DATAORIGIN+$072E
 17948 = 9AE9			BALL.X	= DATAORIGIN+$0000
 17949 = 9AEB			BALL.Y	= DATAORIGIN+$0002
 17950 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
 17951 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
 17952 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
 17953 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
 17954 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
 17955 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
 17956 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
 17957 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
 17958 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
 17959 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
 17960 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
 17961 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
 17962 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
 17963 = 9B03			BALL.STM	= DATAORIGIN+$001A
 17964 = A21B			TEMP	= DATAORIGIN+$0732
 17965
 17966 = A217			@VarData	= BALL
 17967 = 0004			@VarDataSize	= 4
 17968
 17969 8B75			@exit
 17970 					.ifdef @new
 17971 					lda <@VarData
 17972 					sta :ztmp
 17973 					lda >@VarData
 17974 					ldy #@VarDataSize-1
 17975 					jmp @FreeMem
 17976 					els
 17977 8B75 60				rts						; ret
 17978 					eif
 17979 				.endl
 17980
 17981 8B76			.local	BOUNCEBALL					; FUNCTION
 17982
 17983 8B76 4C EB 8C			jmp l_348F
 17984
 17985 8B79			.local	CHECK_BALL					; PROCEDURE
 17986
 17987 				; optimize OK (service.pas), line = 3122
 17988
 17989 8B79 AC 7C A2 84 84 AC + 	mwy BALL :bp2
 17990 8B83 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 17991 8B85 B1 84			lda (:bp2),y
 17992 8B87 F0 65			jeq l_349E
 17993
 17994 				; optimize OK (service.pas), line = 3125
 17995
 17996 8B89 A0 02			ldy #BALL.Y-DATAORIGIN
 17997 8B8B B1 84			lda (:bp2),y
 17998 8B8D C8				iny
 17999 8B8E C9 16			cmp #$16
 18000 8B90 B1 84			lda (:bp2),y
 18001 8B92 E9 00			sbc #$00
 18002 8B94 50 02			svc
 18003 8B96 49 80			eor #$80
 18004 8B98 30 20			jmi l_34BB
 18005 8B9A A0 02			ldy #BALL.Y-DATAORIGIN
 18006 8B9C B1 84			lda (:bp2),y
 18007 8B9E C8				iny
 18008 8B9F C9 8E			cmp #$8E
 18009 8BA1 B1 84			lda (:bp2),y
 18010 8BA3 E9 00			sbc #$00
 18011 8BA5 50 02			svc
 18012 8BA7 49 80			eor #$80
 18013 8BA9 10 0F			jpl l_34BB
 18014
 18015 				; optimize OK (service.pas), line = 3126
 18016
 18017 8BAB AD 7C A2			lda BALL
 18018 8BAE 8D 51 A1			sta BALL_HIT_BLOCK.BALL
 18019 8BB1 AD 7D A2			lda BALL+1
 18020 8BB4 8D 52 A1			sta BALL_HIT_BLOCK.BALL+1
 18021 8BB7 20 27 5F			jsr BALL_HIT_BLOCK
 18022 8BBA			l_34BB
 18023
 18024 				; optimize OK (service.pas), line = 3128
 18025
 18026 8BBA AD 7C A2			lda BALL
 18027 8BBD 8D 9D A0			sta SET_BALL.BALL
 18028 8BC0 AD 7D A2			lda BALL+1
 18029 8BC3 8D 9E A0			sta SET_BALL.BALL+1
 18030 8BC6 20 8F 36			jsr SET_BALL
 18031
 18032 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3129
 18033
 18034 8BC9 E8				inx
 18035 8BCA AD 7C A2 95 96		mva BALL :STACKORIGIN,x
 18036 8BCF AD 7D A2 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 18037 8BD4 20 19 3E			jsr BALL_SPEED
 18038 8BD7 AC 7C A2 84 84 AC + 	mwy BALL :bp2
 18039 8BE1 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 18040 8BE3 AD E4 A0			lda BALL_SPEED.RESULT
 18041 8BE6 91 84			sta (:bp2),y
 18042 8BE8 C8				iny
 18043 8BE9 AD E5 A0			lda BALL_SPEED.RESULT+1
 18044 8BEC 91 84			sta (:bp2),y
 18045 8BEE			l_349E
 18046
 18047 				; ------------------------------------------------------------
 18048
 18049 = A27C			BALL	= DATAORIGIN+$0793
 18050 = 9AE9			BALL.X	= DATAORIGIN+$0000
 18051 = 9AEB			BALL.Y	= DATAORIGIN+$0002
 18052 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
 18053 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
 18054 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
 18055 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
 18056 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
 18057 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
 18058 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
 18059 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
 18060 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
 18061 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
 18062 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
 18063 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
 18064 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
 18065 = 9B03			BALL.STM	= DATAORIGIN+$001A
 18066
 18067 = A27C			@VarData	= BALL
 18068 = 0002			@VarDataSize	= 2
 18069
 18070 8BEE			@exit
 18071 					.ifdef @new
 18072 					lda <@VarData
 18073 					sta :ztmp
 18074 					lda >@VarData
 18075 					ldy #@VarDataSize-1
 18076 					jmp @FreeMem
 18077 					els
 18078 8BEE 60				rts						; ret
 18079 					eif
 18080 				.endl
 18081
 18082 8BEF			.local	TEST_BALL					; PROCEDURE
 18083
 18084 				; optimize OK (service.pas), line = 3137
 18085
 18086 8BEF AC 80 A2 84 84 AC + 	mwy BALL :bp2
 18087 8BF9 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 18088 8BFB B1 84			lda (:bp2),y
 18089 8BFD D0 03 4C EA 8C		jeq l_34DC
 18090
 18091 				; optimize OK (service.pas), line = 3139
 18092
 18093 8C02 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 18094 8C04 B1 84			lda (:bp2),y
 18095 8C06 18 69 01			add #$01
 18096 8C09 91 84			sta (:bp2),y
 18097 8C0B C8				iny
 18098 8C0C B1 84			lda (:bp2),y
 18099 8C0E 69 00			adc #$00
 18100 8C10 91 84			sta (:bp2),y
 18101
 18102 				; optimize OK (service.pas), line = 3141
 18103
 18104 8C12 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 18105 8C14 B1 84			lda (:bp2),y
 18106 8C16 85 9F			sta :STACKORIGIN+9
 18107 8C18 C8				iny
 18108 8C19 B1 84			lda (:bp2),y
 18109 8C1B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18110 8C1D AD D3 9C			lda LV
 18111 8C20 0A				asl @
 18112 8C21 A8				tay
 18113 8C22 B9 A1 10			lda adr.LEVEL,y
 18114 8C25 85 A0			sta :STACKORIGIN+10
 18115 8C27 B9 A2 10			lda adr.LEVEL+1,y
 18116 8C2A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 18117 8C2C A0 00			ldy #$00
 18118 8C2E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 18119 8C30 10 01			spl
 18120 8C32 88				dey
 18121 8C33 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18122 8C35 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 18123 8C37 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 18124 8C39				.LOCAL
 18125 8C39 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 18126 8C3B 38 E9 00			sub #$00
 18127 8C3E D0 1C			bne L4
 18128 8C40 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 18129 8C42 C9 00			cmp #$00
 18130 8C44 D0 0A			bne L1
 18131 8C46 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 18132 8C48 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 18133 8C4A D0 04			bne L1
 18134 8C4C A5 9F			lda :STACKORIGIN+9
 18135 8C4E C5 A0			cmp :STACKORIGIN+10
 18136 8C50 F0 10		L1	beq L5
 18137 8C52 B0 04			bcs L3
 18138 8C54 A9 FF			lda #$FF
 18139 8C56 D0 0A			bne L5
 18140 8C58 A9 01		L3	lda #$01
 18141 8C5A D0 06			bne L5
 18142 8C5C 50 04		L4	bvc L5
 18143 8C5E 49 FF			eor #$FF
 18144 8C60 09 01			ora #$01
 18145 8C62			L5
 18146 					.ENDL
 18147 8C62 30 48			jmi l_34F2
 18148 8C64 F0 46			jeq l_34F2
 18149
 18150 				; optimize OK (service.pas), line = 3143
 18151
 18152 8C66 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 18153 8C68 A9 00			lda #$00
 18154 8C6A 91 84			sta (:bp2),y
 18155 8C6C C8				iny
 18156 8C6D 91 84			sta (:bp2),y
 18157
 18158 				; optimize OK (service.pas), line = 3146
 18159
 18160 8C6F A0 0C			ldy #BALL.SPEED-DATAORIGIN
 18161 8C71 B1 84			lda (:bp2),y
 18162 8C73 C8				iny
 18163 8C74 C9 D0			cmp #$D0
 18164 8C76 B1 84			lda (:bp2),y
 18165 8C78 E9 07			sbc #$07
 18166 8C7A 50 02			svc
 18167 8C7C 49 80			eor #$80
 18168 8C7E 10 2C			jpl l_3508
 18169
 18170 				; optimize OK (service.pas), line = 3148
 18171
 18172 8C80 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 18173 8C82 B1 84			lda (:bp2),y
 18174 8C84 18 69 0A			add #$0A
 18175 8C87 91 84			sta (:bp2),y
 18176 8C89 C8				iny
 18177 8C8A B1 84			lda (:bp2),y
 18178 8C8C 69 00			adc #$00
 18179 8C8E 91 84			sta (:bp2),y
 18180
 18181 				; optimize OK (service.pas), line = 3149
 18182
 18183 8C90 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 18184 8C92 B1 84			lda (:bp2),y
 18185 8C94 8D A5 A0			sta SET_BALL_SPEED.SPEED
 18186 8C97 C8				iny
 18187 8C98 B1 84			lda (:bp2),y
 18188 8C9A 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 18189 8C9D AD 80 A2			lda BALL
 18190 8CA0 8D A1 A0			sta SET_BALL_SPEED.BALL
 18191 8CA3 AD 81 A2			lda BALL+1
 18192 8CA6 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 18193 8CA9 20 74 37			jsr SET_BALL_SPEED
 18194 8CAC			l_3508
 18195 8CAC			l_34F2
 18196
 18197 				; optimize OK (service.pas), line = 3153
 18198
 18199 8CAC AC 80 A2 84 84 AC + 	mwy BALL :bp2
 18200 8CB6 A0 14			ldy #BALL.SBD-DATAORIGIN
 18201 8CB8 B1 84			lda (:bp2),y
 18202 8CBA 18 69 01			add #$01
 18203 8CBD 91 84			sta (:bp2),y
 18204 8CBF C8				iny
 18205 8CC0 B1 84			lda (:bp2),y
 18206 8CC2 69 00			adc #$00
 18207 8CC4 91 84			sta (:bp2),y
 18208
 18209 				; optimize OK (service.pas), line = 3157
 18210
 18211 8CC6 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 18212 8CC8 B1 84			lda (:bp2),y
 18213 8CCA C9 02			cmp #$02
 18214 8CCC D0 05			bne @+
 18215 8CCE 88				dey
 18216 8CCF B1 84			lda (:bp2),y
 18217 8CD1 C9 58			cmp #$58
 18218 				@
 18219 8CD3 90 15			jcc l_3530
 18220 				@
 18221 8CD5 A0 00			ldy #$00
 18222 8CD7 B1 84			lda (:bp2),y
 18223 8CD9 10 0F			jpl l_3530
 18224 				@
 18225
 18226 				; optimize OK (service.pas), line = 3158
 18227
 18228 8CDB AD 80 A2			lda BALL
 18229 8CDE 8D 17 A2			sta DEVIATE_BALL.BALL
 18230 8CE1 AD 81 A2			lda BALL+1
 18231 8CE4 8D 18 A2			sta DEVIATE_BALL.BALL+1
 18232 8CE7 20 9B 8A			jsr DEVIATE_BALL
 18233 8CEA			l_3530
 18234 8CEA			l_34DC
 18235
 18236 				; ------------------------------------------------------------
 18237
 18238 = A280			BALL	= DATAORIGIN+$0797
 18239 = 9AE9			BALL.X	= DATAORIGIN+$0000
 18240 = 9AEB			BALL.Y	= DATAORIGIN+$0002
 18241 = 9AED			BALL.FINEX	= DATAORIGIN+$0004
 18242 = 9AEF			BALL.FINEY	= DATAORIGIN+$0006
 18243 = 9AF1			BALL.OLDX	= DATAORIGIN+$0008
 18244 = 9AF3			BALL.OLDY	= DATAORIGIN+$000A
 18245 = 9AF5			BALL.SPEED	= DATAORIGIN+$000C
 18246 = 9AF7			BALL.FINESPEED	= DATAORIGIN+$000E
 18247 = 9AF9			BALL.SPEEDX	= DATAORIGIN+$0010
 18248 = 9AFB			BALL.SPEEDY	= DATAORIGIN+$0012
 18249 = 9AFD			BALL.SBD	= DATAORIGIN+$0014
 18250 = 9AFF			BALL.BRWHIT	= DATAORIGIN+$0016
 18251 = 9B00			BALL.INPLAY	= DATAORIGIN+$0017
 18252 = 9B01			BALL.LAUNCH	= DATAORIGIN+$0018
 18253 = 9B02			BALL.ONVAUS	= DATAORIGIN+$0019
 18254 = 9B03			BALL.STM	= DATAORIGIN+$001A
 18255
 18256 = A280			@VarData	= BALL
 18257 = 0002			@VarDataSize	= 2
 18258
 18259 8CEA			@exit
 18260 					.ifdef @new
 18261 					lda <@VarData
 18262 					sta :ztmp
 18263 					lda >@VarData
 18264 					ldy #@VarDataSize-1
 18265 					jmp @FreeMem
 18266 					els
 18267 8CEA 60				rts						; ret
 18268 					eif
 18269 				.endl
 18270 8CEB			l_348F
 18271
 18272 				; optimize OK (service.pas), line = 3166
 18273
 18274 8CEB A9 00			lda #$00
 18275 8CED 8D EE 9C			sta SCRFLUXCNT
 18276
 18277 				; optimize OK (service.pas), line = 3167
 18278
 18279 8CF0 8D ED 9C			sta SCRFLUX
 18280
 18281 				; optimize OK (service.pas), line = 3169
 18282
 18283 8CF3 A9 01			lda #$01
 18284 8CF5 8D EC 9C			sta BALLS_IN_PLAY
 18285
 18286 				; optimize OK (service.pas), line = 3171
 18287
 18288 8CF8 A9 00			lda #$00
 18289 8CFA 8D EA 9C			sta FIRE.AVL
 18290
 18291 				; optimize OK (service.pas), line = 3172
 18292
 18293 8CFD AD 09 9C 8D 01 9C + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 18294
 18295 				; optimize OK (service.pas), line = 3174
 18296
 18297 8D2D A9 FF			lda #$FF
 18298 8D2F 8D E5 9C			sta LETT.LAST
 18299 8D32 8D E6 9C			sta LETT.LAST+1
 18300
 18301 				; optimize OK (service.pas), line = 3175
 18302
 18303 8D35 A9 00			lda #$00
 18304 8D37 8D DC 9C			sta LETT.ACTIVE
 18305
 18306 				; optimize OK (service.pas), line = 3178
 18307
 18308 8D3A AD B1 9A			lda PATTERN
 18309 8D3D 8D 88 A1			sta FILL_PICTURE_WITH_PATTERN.PATT
 18310 8D40 AD B2 9A			lda PATTERN+1
 18311 8D43 8D 89 A1			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 18312 8D46 20 49 71			jsr FILL_PICTURE_WITH_PATTERN
 18313
 18314 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3181
 18315
 18316 8D49 E8				inx
 18317 8D4A AD 91 9A 95 96		mva PLAYSCREEN :STACKORIGIN,x
 18318 8D4F AD 92 9A 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 18319 8D54 20 B5 34			jsr SHOWBTMPICTURE
 18320
 18321 				; optimize OK (service.pas), line = 3185
 18322
 18323 8D57 AC CD 9C			ldy CUR_PLAYER
 18324 8D5A B9 C1 9C			lda adr.SCORE.LIVES,y
 18325 8D5D 8D DC A1			sta PLOT_LIVES.LIVES
 18326 8D60 A9 00			lda #$00
 18327 8D62 8D DD A1			sta PLOT_LIVES.LIVES+1
 18328 8D65 20 06 7F			jsr PLOT_LIVES
 18329
 18330 				; optimize OK (service.pas), line = 3188
 18331
 18332 8D68 AD 91 9A			lda PLAYSCREEN
 18333 8D6B 8D 8B A0			sta SETPALETTE.BTM
 18334 8D6E AD 92 9A			lda PLAYSCREEN+1
 18335 8D71 8D 8C A0			sta SETPALETTE.BTM+1
 18336 8D74 20 0A 35			jsr SETPALETTE
 18337
 18338 				; optimize OK (service.pas), line = 3191
 18339
 18340 8D77 AD B6 9C			lda adr.SCORE.PLAYER+$04
 18341 8D7A 8D D3 A1			sta WRITE_SCORE.SC
 18342 8D7D AD B7 9C			lda adr.SCORE.PLAYER+1+$04
 18343 8D80 8D D4 A1			sta WRITE_SCORE.SC+1
 18344 8D83 AD B8 9C			lda adr.SCORE.PLAYER+2+$04
 18345 8D86 8D D5 A1			sta WRITE_SCORE.SC+2
 18346 8D89 AD B9 9C			lda adr.SCORE.PLAYER+3+$04
 18347 8D8C 8D D6 A1			sta WRITE_SCORE.SC+3
 18348 8D8F A9 FD			lda #$FD
 18349 8D91 8D CF A1			sta WRITE_SCORE.PX
 18350 8D94 A9 00			lda #$00
 18351 8D96 8D D0 A1			sta WRITE_SCORE.PX+1
 18352 8D99 A9 3C			lda #$3C
 18353 8D9B 8D D1 A1			sta WRITE_SCORE.PY
 18354 8D9E A9 00			lda #$00
 18355 8DA0 8D D2 A1			sta WRITE_SCORE.PY+1
 18356 8DA3 20 A8 7B			jsr WRITE_SCORE
 18357
 18358 				; optimize OK (service.pas), line = 3192
 18359
 18360 8DA6 AD BA 9C			lda adr.SCORE.PLAYER+$08
 18361 8DA9 8D D3 A1			sta WRITE_SCORE.SC
 18362 8DAC AD BB 9C			lda adr.SCORE.PLAYER+1+$08
 18363 8DAF 8D D4 A1			sta WRITE_SCORE.SC+1
 18364 8DB2 AD BC 9C			lda adr.SCORE.PLAYER+2+$08
 18365 8DB5 8D D5 A1			sta WRITE_SCORE.SC+2
 18366 8DB8 AD BD 9C			lda adr.SCORE.PLAYER+3+$08
 18367 8DBB 8D D6 A1			sta WRITE_SCORE.SC+3
 18368 8DBE A9 FD			lda #$FD
 18369 8DC0 8D CF A1			sta WRITE_SCORE.PX
 18370 8DC3 A9 00			lda #$00
 18371 8DC5 8D D0 A1			sta WRITE_SCORE.PX+1
 18372 8DC8 A9 5D			lda #$5D
 18373 8DCA 8D D1 A1			sta WRITE_SCORE.PY
 18374 8DCD A9 00			lda #$00
 18375 8DCF 8D D2 A1			sta WRITE_SCORE.PY+1
 18376 8DD2 20 A8 7B			jsr WRITE_SCORE
 18377
 18378 				; optimize OK (service.pas), line = 3193
 18379
 18380 8DD5 A9 FD			lda #$FD
 18381 8DD7 8D CF A1			sta WRITE_SCORE.PX
 18382 8DDA A9 00			lda #$00
 18383 8DDC 8D D0 A1			sta WRITE_SCORE.PX+1
 18384 8DDF A9 80			lda #$80
 18385 8DE1 8D D1 A1			sta WRITE_SCORE.PY
 18386 8DE4 A9 00			lda #$00
 18387 8DE6 8D D2 A1			sta WRITE_SCORE.PY+1
 18388 8DE9 AD C4 9C			lda SCORE.HISCORE
 18389 8DEC 8D D3 A1			sta WRITE_SCORE.SC
 18390 8DEF AD C5 9C			lda SCORE.HISCORE+1
 18391 8DF2 8D D4 A1			sta WRITE_SCORE.SC+1
 18392 8DF5 AD C6 9C			lda SCORE.HISCORE+2
 18393 8DF8 8D D5 A1			sta WRITE_SCORE.SC+2
 18394 8DFB AD C7 9C			lda SCORE.HISCORE+3
 18395 8DFE 8D D6 A1			sta WRITE_SCORE.SC+3
 18396 8E01 20 A8 7B			jsr WRITE_SCORE
 18397
 18398 				; optimize FAIL ('PUT_WALL', service.pas), line = 3196
 18399
 18400 8E04 20 54 52			jsr PUT_WALL
 18401
 18402 				; optimize FAIL ('MOUSERESET', service.pas), line = 3200
 18403
 18404 8E07 20 27 2B			jsr MOUSERESET
 18405
 18406 				; optimize OK (service.pas), line = 3203
 18407
 18408 8E0A A9 01			lda #$01
 18409 8E0C 8D 42 A2			sta BALL0.INPLAY
 18410
 18411 				; optimize OK (service.pas), line = 3204
 18412
 18413 8E0F 8D 43 A2			sta BALL0.LAUNCH
 18414
 18415 				; optimize OK (service.pas), line = 3207
 18416
 18417 8E12 A9 6F			lda #$6F
 18418 8E14 8D 2B A2			sta BALL0.X
 18419 8E17 A9 00			lda #$00
 18420 8E19 8D 2C A2			sta BALL0.X+1
 18421
 18422 				; optimize OK (service.pas), line = 3208
 18423
 18424 8E1C A9 B5			lda #$B5
 18425 8E1E 8D 2D A2			sta BALL0.Y
 18426 8E21 A9 00			lda #$00
 18427 8E23 8D 2E A2			sta BALL0.Y+1
 18428
 18429 				; optimize OK (service.pas), line = 3211
 18430
 18431 8E26 A9 FF			lda #$FF
 18432 8E28 8D 33 A2			sta BALL0.OLDX
 18433 8E2B 8D 34 A2			sta BALL0.OLDX+1
 18434
 18435 				; optimize OK (service.pas), line = 3212
 18436
 18437 8E2E 8D 35 A2			sta BALL0.OLDY
 18438 8E31 8D 36 A2			sta BALL0.OLDY+1
 18439
 18440 				; optimize OK (service.pas), line = 3215
 18441
 18442 8E34 A9 00			lda #$00
 18443 8E36 8D 3F A2			sta BALL0.SBD
 18444 8E39 8D 40 A2			sta BALL0.SBD+1
 18445
 18446 				; optimize OK (service.pas), line = 3219
 18447
 18448 8E3C A9 10			lda #$10
 18449 8E3E 8D 44 A2			sta BALL0.ONVAUS
 18450
 18451 				; optimize OK (service.pas), line = 3224
 18452
 18453 8E41 A9 00			lda #$00
 18454 8E43 8D 45 A2			sta BALL0.STM
 18455
 18456 				; optimize OK (service.pas), line = 3228
 18457
 18458 8E46 A9 E8			lda #$E8
 18459 8E48 8D 2F 9B			sta SYSTEM.RANDOM.@010184000.RANGE
 18460 8E4B A9 03			lda #$03
 18461 8E4D 8D 30 9B			sta SYSTEM.RANDOM.@010184000.RANGE+1
 18462 8E50 20 05 26			jsr SYSTEM.RANDOM.@010184000
 18463 8E53 AD 31 9B			lda SYSTEM.RANDOM.@010184000.RESULT
 18464 8E56 8D DD 9C			sta LETT.INCOMING
 18465 8E59 AD 32 9B			lda SYSTEM.RANDOM.@010184000.RESULT+1
 18466 8E5C 8D DE 9C			sta LETT.INCOMING+1
 18467
 18468 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3231
 18469
 18470 8E5F 20 41 76			jsr CREATE_VAUS
 18471
 18472 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3234
 18473
 18474 8E62 20 1F 73			jsr WRITE_ROUND_LEVEL
 18475
 18476 				; optimize FAIL ('SET_VAUS', service.pas), line = 3236
 18477
 18478 8E65 20 38 45			jsr SET_VAUS
 18479
 18480 				; optimize FAIL ('START_VAUS', service.pas), line = 3237
 18481
 18482 8E68 20 75 45			jsr START_VAUS
 18483
 18484 				; optimize OK (service.pas), line = 3238
 18485
 18486 8E6B AD 71 9C			lda VAUS.X
 18487 8E6E 8D F3 A0			sta MOVE_VAUS.X
 18488 8E71 A9 00			lda #$00
 18489 8E73 8D F4 A0			sta MOVE_VAUS.X+1
 18490 8E76 A9 B8			lda #$B8
 18491 8E78 8D F5 A0			sta MOVE_VAUS.Y
 18492 8E7B A9 00			lda #$00
 18493 8E7D 8D F6 A0			sta MOVE_VAUS.Y+1
 18494 8E80 20 EC 47			jsr MOVE_VAUS
 18495
 18496 				; optimize FAIL ('START_LEVEL', service.pas), line = 3239
 18497
 18498 8E83 20 24 2B			jsr START_LEVEL
 18499
 18500 				; optimize FAIL ('START_VAUS', service.pas), line = 3240
 18501
 18502 8E86 20 75 45			jsr START_VAUS
 18503
 18504 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3241
 18505
 18506 8E89 20 20 73			jsr REMOVE_ROUND_LEVEL
 18507
 18508 				; optimize OK (service.pas), line = 3242
 18509
 18510 8E8C AD 8B 93			lda BALL0
 18511 8E8F 8D 9D A0			sta SET_BALL.BALL
 18512 8E92 AD 8C 93			lda BALL0+1
 18513 8E95 8D 9E A0			sta SET_BALL.BALL+1
 18514 8E98 20 8F 36			jsr SET_BALL
 18515
 18516 				; optimize OK (service.pas), line = 3249
 18517
 18518 8E9B A9 0F			lda #$0F
 18519 8E9D 20 EE 25			jsr SYSTEM.RANDOM.@010180000
 18520 8EA0 E8				inx
 18521 8EA1 E8				inx
 18522 8EA2 AD 2E 9B			lda SYSTEM.RANDOM.@010180000.RESULT
 18523 8EA5 18 69 3C			add #$3C
 18524 8EA8 95 95			sta :STACKORIGIN-1,x
 18525 8EAA A9 00			lda #$00
 18526 8EAC 69 00			adc #$00
 18527 8EAE 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 18528 8EB0 AD 8B 93			lda BALL0
 18529 8EB3 8D AF A0			sta SET_BALL_DIRECTION.BALL
 18530 8EB6 AD 8C 93			lda BALL0+1
 18531 8EB9 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 18532 8EBC CA				dex
 18533 8EBD B5 96			lda :STACKORIGIN,x
 18534 8EBF 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 18535 8EC2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18536 8EC4 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18537 8EC7 CA				dex
 18538 8EC8 20 9E 39			jsr SET_BALL_DIRECTION
 18539
 18540 				; optimize OK (service.pas), line = 3251
 18541
 18542 8ECB AD 8B 93			lda BALL0
 18543 8ECE 8D A1 A0			sta SET_BALL_SPEED.BALL
 18544 8ED1 AD 8C 93			lda BALL0+1
 18545 8ED4 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 18546 8ED7 A9 64			lda #$64
 18547 8ED9 8D A5 A0			sta SET_BALL_SPEED.SPEED
 18548 8EDC A9 00			lda #$00
 18549 8EDE 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 18550 8EE1 20 74 37			jsr SET_BALL_SPEED
 18551
 18552 				; optimize OK (service.pas), line = 3254
 18553
 18554 8EE4 A9 00			lda #$00
 18555 8EE6 8D 39 A2			sta BALL0.FINESPEED
 18556 8EE9 8D 3A A2			sta BALL0.FINESPEED+1
 18557
 18558 				; optimize OK (service.pas), line = 3256
 18559
 18560 8EEC 8D 5D A2			sta BALL1.INPLAY
 18561
 18562 				; optimize OK (service.pas), line = 3257
 18563
 18564 8EEF 8D 78 A2			sta BALL2.INPLAY
 18565
 18566 				; --- WhileProlog
 18567 8EF2 4C 69 93			jmp l_35C6
 18568 8EF5			l_35C7
 18569
 18570 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3261
 18571
 18572 8EF5 20 8E 36			jsr WAIT_VBL
 18573
 18574 				; optimize OK (service.pas), line = 3272
 18575
 18576 8EF8 A9 1E			lda <X
 18577 8EFA 8D E3 9B			sta MOUSECOORDS.X
 18578 8EFD A9 A2			lda >X
 18579 8EFF 8D E4 9B			sta MOUSECOORDS.X+1
 18580 8F02 A9 20			lda <Y
 18581 8F04 8D E5 9B			sta MOUSECOORDS.Y
 18582 8F07 A9 A2			lda >Y
 18583 8F09 8D E6 9B			sta MOUSECOORDS.Y+1
 18584 8F0C 20 31 2B			jsr MOUSECOORDS
 18585
 18586 				; optimize OK (service.pas), line = 3277
 18587
 18588 8F0F AD D5 9C			lda TRAINER
 18589 8F12 D0 19			jne l_35DD
 18590 8F14 AD 1E A2			lda X
 18591 8F17 8D F3 A0			sta MOVE_VAUS.X
 18592 8F1A AD 1F A2			lda X+1
 18593 8F1D 8D F4 A0			sta MOVE_VAUS.X+1
 18594 8F20 A9 B8			lda #$B8
 18595 8F22 8D F5 A0			sta MOVE_VAUS.Y
 18596 8F25 A9 00			lda #$00
 18597 8F27 8D F6 A0			sta MOVE_VAUS.Y+1
 18598 8F2A 4C 96 8F			jmp l_35EB
 18599 8F2D			l_35DD
 18600
 18601 				; optimize OK (service.pas), line = 3283
 18602
 18603 8F2D AD D5 9C			lda TRAINER
 18604 8F30 C9 01			cmp #$01
 18605 8F32 D0 65			jne l_35FD
 18606
 18607 				; optimize FAIL (1, service.pas), line = 3284
 18608
 18609 8F34 E8				inx
 18610 8F35 A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 18611 8F39 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18612 8F3D E8				inx
 18613 8F3E A9 0A 95 96			mva #$0A :STACKORIGIN,x
 18614 8F42 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18615 8F46 AD 2B A2			lda BALL0.X
 18616 8F49 38 ED 44 A2			sub BALL0.ONVAUS
 18617 8F4D 8D 30 A0			sta MAX.A
 18618 8F50 AD 2C A2			lda BALL0.X+1
 18619 8F53 E9 00			sbc #$00
 18620 8F55 8D 31 A0			sta MAX.A+1
 18621 8F58 B5 96			lda :STACKORIGIN,x
 18622 8F5A 8D 32 A0			sta MAX.B
 18623 8F5D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18624 8F5F 8D 33 A0			sta MAX.B+1
 18625 8F62 CA				dex
 18626 8F63 20 28 2E			jsr MAX
 18627 8F66 A9 B8			lda #$B8
 18628 8F68 8D 36 A0			sta MIN.A
 18629 8F6B A9 00			lda #$00
 18630 8F6D 8D 37 A0			sta MIN.A+1
 18631 8F70 AD 34 A0			lda MAX.RESULT
 18632 8F73 8D 38 A0			sta MIN.B
 18633 8F76 AD 35 A0			lda MAX.RESULT+1
 18634 8F79 8D 39 A0			sta MIN.B+1
 18635 8F7C 20 53 2E			jsr MIN
 18636 8F7F AD 3A A0			lda MIN.RESULT
 18637 8F82 8D F3 A0			sta MOVE_VAUS.X
 18638 8F85 AD 3B A0			lda MIN.RESULT+1
 18639 8F88 8D F4 A0			sta MOVE_VAUS.X+1
 18640 8F8B B5 96			lda :STACKORIGIN,x
 18641 8F8D 8D F5 A0			sta MOVE_VAUS.Y
 18642 8F90 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 18643 8F92 8D F6 A0			sta MOVE_VAUS.Y+1
 18644 8F95 CA				dex
 18645 8F96			l_35EB
 18646 8F96 20 EC 47			jsr MOVE_VAUS
 18647 8F99			l_35FD
 18648
 18649 				; optimize OK (service.pas), line = 3289
 18650
 18651 8F99 AD 43 A2			lda BALL0.LAUNCH
 18652 8F9C C9 01			cmp #$01
 18653 8F9E D0 30			jne l_3620
 18654
 18655 				; optimize FAIL (0, service.pas), line = 3291
 18656
 18657 8FA0 EE 45 A2			inc BALL0.STM
 18658
 18659 				; optimize OK (service.pas), line = 3296
 18660
 18661 8FA3 AD 45 A2			lda BALL0.STM
 18662 8FA6 C9 FA			cmp #$FA
 18663 8FA8 D0 05			jne l_3637
 18664 8FAA A9 00			lda #$00
 18665 8FAC 8D 43 A2			sta BALL0.LAUNCH
 18666 8FAF			l_3637
 18667
 18668 				; optimize OK (service.pas), line = 3299
 18669
 18670 8FAF AD 8B 93			lda BALL0
 18671 8FB2 8D C5 A0			sta START_BALL.BALL
 18672 8FB5 AD 8C 93			lda BALL0+1
 18673 8FB8 8D C6 A0			sta START_BALL.BALL+1
 18674 8FBB 20 C7 3D			jsr START_BALL
 18675
 18676 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3302
 18677
 18678 8FBE 20 28 2B			jsr MOUSECLICK
 18679 8FC1 AD E2 9B			lda MOUSECLICK.RESULT
 18680 8FC4 C9 01			cmp #$01
 18681 8FC6 D0 05			jne l_3651
 18682 8FC8 A9 00			lda #$00
 18683 8FCA 8D 43 A2			sta BALL0.LAUNCH
 18684 8FCD			l_3651
 18685 8FCD 4C E4 8F			jmp l_3661
 18686 8FD0			l_3620
 18687
 18688 				; optimize OK (service.pas), line = 3310
 18689
 18690 8FD0 AD 42 A2			lda BALL0.INPLAY
 18691 8FD3 F0 0F			jeq l_366D
 18692 8FD5 AD 8B 93			lda BALL0
 18693 8FD8 8D E6 A0			sta MOVE_BALL.BALL
 18694 8FDB AD 8C 93			lda BALL0+1
 18695 8FDE 8D E7 A0			sta MOVE_BALL.BALL+1
 18696 8FE1 20 04 3F			jsr MOVE_BALL
 18697 8FE4			l_366D
 18698 8FE4			l_3661
 18699
 18700 				; optimize OK (service.pas), line = 3311
 18701
 18702 8FE4 AD 5D A2			lda BALL1.INPLAY
 18703 8FE7 F0 0F			jeq l_367F
 18704 8FE9 AD 8D 93			lda BALL1
 18705 8FEC 8D E6 A0			sta MOVE_BALL.BALL
 18706 8FEF AD 8E 93			lda BALL1+1
 18707 8FF2 8D E7 A0			sta MOVE_BALL.BALL+1
 18708 8FF5 20 04 3F			jsr MOVE_BALL
 18709 8FF8			l_367F
 18710
 18711 				; optimize OK (service.pas), line = 3312
 18712
 18713 8FF8 AD 78 A2			lda BALL2.INPLAY
 18714 8FFB F0 0F			jeq l_3691
 18715 8FFD AD 8F 93			lda BALL2
 18716 9000 8D E6 A0			sta MOVE_BALL.BALL
 18717 9003 AD 90 93			lda BALL2+1
 18718 9006 8D E7 A0			sta MOVE_BALL.BALL+1
 18719 9009 20 04 3F			jsr MOVE_BALL
 18720 900C			l_3691
 18721
 18722 				; optimize OK (service.pas), line = 3318
 18723
 18724 900C AD 8B 93			lda BALL0
 18725 900F 8D 7C A2			sta CHECK_BALL.BALL
 18726 9012 AD 8C 93			lda BALL0+1
 18727 9015 8D 7D A2			sta CHECK_BALL.BALL+1
 18728 9018 20 79 8B			jsr CHECK_BALL
 18729
 18730 				; optimize OK (service.pas), line = 3319
 18731
 18732 901B AD 8D 93			lda BALL1
 18733 901E 8D 7C A2			sta CHECK_BALL.BALL
 18734 9021 AD 8E 93			lda BALL1+1
 18735 9024 8D 7D A2			sta CHECK_BALL.BALL+1
 18736 9027 20 79 8B			jsr CHECK_BALL
 18737
 18738 				; optimize OK (service.pas), line = 3320
 18739
 18740 902A AD 8F 93			lda BALL2
 18741 902D 8D 7C A2			sta CHECK_BALL.BALL
 18742 9030 AD 90 93			lda BALL2+1
 18743 9033 8D 7D A2			sta CHECK_BALL.BALL+1
 18744 9036 20 79 8B			jsr CHECK_BALL
 18745
 18746 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3335
 18747
 18748 9039 20 30 31			jsr CHECKSHINE
 18749
 18750 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3336
 18751
 18752 903C 20 7E 33			jsr CHECK_LETTER
 18753
 18754 				; optimize OK (service.pas), line = 3337
 18755
 18756 903F AD 8B 93			lda BALL0
 18757 9042 8D 08 A2			sta CHECK_BONUS_TYPE.B1
 18758 9045 AD 8C 93			lda BALL0+1
 18759 9048 8D 09 A2			sta CHECK_BONUS_TYPE.B1+1
 18760 904B AD 8D 93			lda BALL1
 18761 904E 8D 0C A2			sta CHECK_BONUS_TYPE.B2
 18762 9051 AD 8E 93			lda BALL1+1
 18763 9054 8D 0D A2			sta CHECK_BONUS_TYPE.B2+1
 18764 9057 AD 8F 93			lda BALL2
 18765 905A 8D 10 A2			sta CHECK_BONUS_TYPE.B3
 18766 905D AD 90 93			lda BALL2+1
 18767 9060 8D 11 A2			sta CHECK_BONUS_TYPE.B3+1
 18768 9063 20 5F 87			jsr CHECK_BONUS_TYPE
 18769
 18770 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3338
 18771
 18772 9066 20 04 83			jsr CHECK_FIRE
 18773
 18774 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3339
 18775
 18776 9069 20 81 85			jsr CHECK_FLUX
 18777
 18778 				; optimize OK (service.pas), line = 3341
 18779
 18780 906C AD 71 9C			lda VAUS.X
 18781 906F 18 6D 79 9C			add VAUS.WIDTH
 18782 9073 85 9F			sta :STACKORIGIN+9
 18783 9075 A9 00			lda #$00
 18784 9077 69 00			adc #$00
 18785 9079 A0 01			ldy #1
 18786 907B C9 00			cmp #$00
 18787 907D D0 04			bne @+
 18788 907F A5 9F			lda :STACKORIGIN+9
 18789 9081 C9 D7			cmp #$D7
 18790 				@
 18791 9083 F0 01			beq @+
 18792 9085 88				dey
 18793 				@
 18794 9086 98				tya
 18795 9087 2D ED 9C			and SCRFLUX
 18796 908A F0 03			jeq l_36C9
 18797 908C 20 1E 86			jsr VAUS_OUT
 18798 908F			l_36C9
 18799
 18800 				; optimize OK (service.pas), line = 3343
 18801
 18802 908F AD 7D 9C			lda VAUS.LETTER
 18803 9092 C9 04			cmp #$04
 18804 9094 F0 03 4C D9 91		jne l_36DF
 18805
 18806 				; optimize OK (service.pas), line = 3345
 18807
 18808 9099 A9 03			lda #$03
 18809 909B 8D EC 9C			sta BALLS_IN_PLAY
 18810
 18811 				; optimize OK (service.pas), line = 3347
 18812
 18813 909E AC 8D 93 84 84 AC + 	mwy BALL1 :bp2
 18814 90A8 A0 1A			ldy #$1A
 18815 90AA B9 2B A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18816
 18817 				; optimize OK (service.pas), line = 3348
 18818
 18819 90B2 AC 8F 93 84 84 AC + 	mwy BALL2 :bp2
 18820 90BC A0 1A			ldy #$1A
 18821 90BE B9 2B A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 18822
 18823 				; optimize OK (service.pas), line = 3350
 18824
 18825 90C6 AD 8B 93			lda BALL0
 18826 90C9 8D B9 A0			sta GET_BALL_DIRECTION.BALL
 18827 90CC AD 8C 93			lda BALL0+1
 18828 90CF 8D BA A0			sta GET_BALL_DIRECTION.BALL+1
 18829 90D2 20 A2 3B			jsr GET_BALL_DIRECTION
 18830 90D5 E8				inx
 18831 90D6 E8				inx
 18832 90D7 A9 5A			lda #$5A
 18833 90D9 85 8E			sta @SMALLINT.DIV.B
 18834 90DB A9 00			lda #$00
 18835 90DD 85 8F			sta @SMALLINT.DIV.B+1
 18836 90DF AD BD A0			lda GET_BALL_DIRECTION.RESULT
 18837 90E2 85 86			sta @SMALLINT.DIV.A
 18838 90E4 AD BE A0			lda GET_BALL_DIRECTION.RESULT+1
 18839 90E7 85 87			sta @SMALLINT.DIV.A+1
 18840 90E9 20 3A 12			jsr @SMALLINT.DIV
 18841 90EC CA				dex
 18842 90ED A5 86			lda :eax
 18843 90EF 8D 24 A2			sta T1
 18844 90F2 A5 87			lda :eax+1
 18845 90F4 8D 25 A2			sta T1+1
 18846 90F7 CA				dex
 18847
 18848 				; optimize OK (service.pas), line = 3352
 18849
 18850 90F8 AD 37 A2			lda BALL0.SPEED
 18851 90FB 8D 26 A2			sta T2
 18852 90FE AD 38 A2			lda BALL0.SPEED+1
 18853 9101 8D 27 A2			sta T2+1
 18854
 18855 				; optimize OK (service.pas), line = 3359
 18856
 18857 9104 A9 5A			lda #$5A
 18858 9106 85 8E			sta :ecx
 18859 9108 A9 00			lda #$00
 18860 910A 85 8F			sta :ecx+1
 18861 910C AD 24 A2			lda T1
 18862 910F 85 86			sta :eax
 18863 9111 AD 25 A2			lda T1+1
 18864 9114 85 87			sta :eax+1
 18865 					.ifdef fmulinit
 18866 					fmulu_16
 18867 					els
 18868 9116 20 12 13			imulCX
 18869 					eif
 18870 9119 A5 86			lda :eax
 18871 911B 8D 28 A2			sta HLP
 18872 911E A5 87			lda :eax+1
 18873 9120 8D 29 A2			sta HLP+1
 18874
 18875 				; optimize OK (service.pas), line = 3361
 18876
 18877 9123 AD 28 A2			lda HLP
 18878 9126 18 69 1E			add #$1E
 18879 9129 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 18880 912C AD 29 A2			lda HLP+1
 18881 912F 69 00			adc #$00
 18882 9131 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18883 9134 AD 8B 93			lda BALL0
 18884 9137 8D AF A0			sta SET_BALL_DIRECTION.BALL
 18885 913A AD 8C 93			lda BALL0+1
 18886 913D 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 18887 9140 20 9E 39			jsr SET_BALL_DIRECTION
 18888
 18889 				; optimize OK (service.pas), line = 3362
 18890
 18891 9143 AD 28 A2			lda HLP
 18892 9146 18 69 2D			add #$2D
 18893 9149 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 18894 914C AD 29 A2			lda HLP+1
 18895 914F 69 00			adc #$00
 18896 9151 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18897 9154 AD 8D 93			lda BALL1
 18898 9157 8D AF A0			sta SET_BALL_DIRECTION.BALL
 18899 915A AD 8E 93			lda BALL1+1
 18900 915D 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 18901 9160 20 9E 39			jsr SET_BALL_DIRECTION
 18902
 18903 				; optimize OK (service.pas), line = 3363
 18904
 18905 9163 AD 28 A2			lda HLP
 18906 9166 18 69 3C			add #$3C
 18907 9169 8D B3 A0			sta SET_BALL_DIRECTION.ANGLE
 18908 916C AD 29 A2			lda HLP+1
 18909 916F 69 00			adc #$00
 18910 9171 8D B4 A0			sta SET_BALL_DIRECTION.ANGLE+1
 18911 9174 AD 8F 93			lda BALL2
 18912 9177 8D AF A0			sta SET_BALL_DIRECTION.BALL
 18913 917A AD 90 93			lda BALL2+1
 18914 917D 8D B0 A0			sta SET_BALL_DIRECTION.BALL+1
 18915 9180 20 9E 39			jsr SET_BALL_DIRECTION
 18916
 18917 				; optimize OK (service.pas), line = 3367
 18918
 18919 9183 AD 8B 93			lda BALL0
 18920 9186 8D A1 A0			sta SET_BALL_SPEED.BALL
 18921 9189 AD 8C 93			lda BALL0+1
 18922 918C 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 18923 918F AD 26 A2			lda T2
 18924 9192 8D A5 A0			sta SET_BALL_SPEED.SPEED
 18925 9195 AD 27 A2			lda T2+1
 18926 9198 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 18927 919B 20 74 37			jsr SET_BALL_SPEED
 18928
 18929 				; optimize OK (service.pas), line = 3368
 18930
 18931 919E AD 8D 93			lda BALL1
 18932 91A1 8D A1 A0			sta SET_BALL_SPEED.BALL
 18933 91A4 AD 8E 93			lda BALL1+1
 18934 91A7 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 18935 91AA AD 26 A2			lda T2
 18936 91AD 8D A5 A0			sta SET_BALL_SPEED.SPEED
 18937 91B0 AD 27 A2			lda T2+1
 18938 91B3 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 18939 91B6 20 74 37			jsr SET_BALL_SPEED
 18940
 18941 				; optimize OK (service.pas), line = 3369
 18942
 18943 91B9 AD 8F 93			lda BALL2
 18944 91BC 8D A1 A0			sta SET_BALL_SPEED.BALL
 18945 91BF AD 90 93			lda BALL2+1
 18946 91C2 8D A2 A0			sta SET_BALL_SPEED.BALL+1
 18947 91C5 AD 26 A2			lda T2
 18948 91C8 8D A5 A0			sta SET_BALL_SPEED.SPEED
 18949 91CB AD 27 A2			lda T2+1
 18950 91CE 8D A6 A0			sta SET_BALL_SPEED.SPEED+1
 18951 91D1 20 74 37			jsr SET_BALL_SPEED
 18952
 18953 				; optimize OK (service.pas), line = 3372
 18954
 18955 91D4 A9 00			lda #$00
 18956 91D6 8D 7D 9C			sta VAUS.LETTER
 18957 91D9			l_36DF
 18958
 18959 				; optimize OK (service.pas), line = 3376
 18960
 18961 91D9 AD EC 9C			lda BALLS_IN_PLAY
 18962 91DC C9 02			cmp #$02
 18963 91DE 90 08			jcc l_3742
 18964 91E0 A9 00			lda #$00
 18965 91E2 8D DD 9C			sta LETT.INCOMING
 18966 91E5 8D DE 9C			sta LETT.INCOMING+1
 18967 91E8			l_3742
 18968
 18969 				; optimize OK (service.pas), line = 3379
 18970
 18971 91E8 AD CD 9C			lda CUR_PLAYER
 18972 91EB 0A				asl @
 18973 91EC 0A				asl @
 18974 91ED A8				tay
 18975 91EE B9 B2 9C			lda adr.SCORE.PLAYER,y
 18976 91F1 8D D3 A1			sta WRITE_SCORE.SC
 18977 91F4 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 18978 91F7 8D D4 A1			sta WRITE_SCORE.SC+1
 18979 91FA B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 18980 91FD 8D D5 A1			sta WRITE_SCORE.SC+2
 18981 9200 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 18982 9203 8D D6 A1			sta WRITE_SCORE.SC+3
 18983 9206 AC CD 9C			ldy CUR_PLAYER
 18984 9209 B9 92 10			lda adr.POS_DIGIT,y
 18985 920C 8D D1 A1			sta WRITE_SCORE.PY
 18986 920F A9 FD			lda #$FD
 18987 9211 8D CF A1			sta WRITE_SCORE.PX
 18988 9214 A9 00			lda #$00
 18989 9216 8D D0 A1			sta WRITE_SCORE.PX+1
 18990 9219 8D D2 A1			sta WRITE_SCORE.PY+1
 18991 921C 20 A8 7B			jsr WRITE_SCORE
 18992
 18993 				; optimize OK (service.pas), line = 3382
 18994
 18995 921F AD CD 9C			lda CUR_PLAYER
 18996 9222 0A				asl @
 18997 9223 0A				asl @
 18998 9224 A8				tay
 18999 9225				.LOCAL
 19000 9225 B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 19001 9228 38 ED C7 9C			sub SCORE.HISCORE+3
 19002 922C D0 22			bne L4
 19003 922E B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 19004 9231 CD C6 9C			cmp SCORE.HISCORE+2
 19005 9234 D0 0E			bne L1
 19006 9236 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 19007 9239 CD C5 9C			cmp SCORE.HISCORE+1
 19008 923C D0 06			bne L1
 19009 923E B9 B2 9C			lda adr.SCORE.PLAYER,y
 19010 9241 CD C4 9C			cmp SCORE.HISCORE
 19011 9244 F0 10		L1	beq L5
 19012 9246 B0 04			bcs L3
 19013 9248 A9 FF			lda #$FF
 19014 924A D0 0A			bne L5
 19015 924C A9 01		L3	lda #$01
 19016 924E D0 06			bne L5
 19017 9250 50 04		L4	bvc L5
 19018 9252 49 FF			eor #$FF
 19019 9254 09 01			ora #$01
 19020 9256			L5
 19021 					.ENDL
 19022 9256 30 49			jmi l_3768
 19023 9258 F0 47			jeq l_3768
 19024
 19025 				; optimize OK (service.pas), line = 3385
 19026
 19027 925A B9 B2 9C			lda adr.SCORE.PLAYER,y
 19028 925D 8D C4 9C			sta SCORE.HISCORE
 19029 9260 B9 B3 9C			lda adr.SCORE.PLAYER+1,y
 19030 9263 8D C5 9C			sta SCORE.HISCORE+1
 19031 9266 B9 B4 9C			lda adr.SCORE.PLAYER+2,y
 19032 9269 8D C6 9C			sta SCORE.HISCORE+2
 19033 926C B9 B5 9C			lda adr.SCORE.PLAYER+3,y
 19034 926F 8D C7 9C			sta SCORE.HISCORE+3
 19035
 19036 				; optimize OK (service.pas), line = 3387
 19037
 19038 9272 A9 FD			lda #$FD
 19039 9274 8D CF A1			sta WRITE_SCORE.PX
 19040 9277 A9 00			lda #$00
 19041 9279 8D D0 A1			sta WRITE_SCORE.PX+1
 19042 927C A9 80			lda #$80
 19043 927E 8D D1 A1			sta WRITE_SCORE.PY
 19044 9281 A9 00			lda #$00
 19045 9283 8D D2 A1			sta WRITE_SCORE.PY+1
 19046 9286 AD C4 9C			lda SCORE.HISCORE
 19047 9289 8D D3 A1			sta WRITE_SCORE.SC
 19048 928C AD C5 9C			lda SCORE.HISCORE+1
 19049 928F 8D D4 A1			sta WRITE_SCORE.SC+1
 19050 9292 AD C6 9C			lda SCORE.HISCORE+2
 19051 9295 8D D5 A1			sta WRITE_SCORE.SC+2
 19052 9298 AD C7 9C			lda SCORE.HISCORE+3
 19053 929B 8D D6 A1			sta WRITE_SCORE.SC+3
 19054 929E 20 A8 7B			jsr WRITE_SCORE
 19055 92A1			l_3768
 19056
 19057 				; optimize OK (service.pas), line = 3394
 19058
 19059 92A1 AD 8B 93			lda BALL0
 19060 92A4 8D 80 A2			sta TEST_BALL.BALL
 19061 92A7 AD 8C 93			lda BALL0+1
 19062 92AA 8D 81 A2			sta TEST_BALL.BALL+1
 19063 92AD 20 EF 8B			jsr TEST_BALL
 19064
 19065 				; optimize OK (service.pas), line = 3395
 19066
 19067 92B0 AD 8D 93			lda BALL1
 19068 92B3 8D 80 A2			sta TEST_BALL.BALL
 19069 92B6 AD 8E 93			lda BALL1+1
 19070 92B9 8D 81 A2			sta TEST_BALL.BALL+1
 19071 92BC 20 EF 8B			jsr TEST_BALL
 19072
 19073 				; optimize OK (service.pas), line = 3396
 19074
 19075 92BF AD 8F 93			lda BALL2
 19076 92C2 8D 80 A2			sta TEST_BALL.BALL
 19077 92C5 AD 90 93			lda BALL2+1
 19078 92C8 8D 81 A2			sta TEST_BALL.BALL+1
 19079 92CB 20 EF 8B			jsr TEST_BALL
 19080
 19081 				; optimize OK (service.pas), line = 3437
 19082
 19083 92CE AD 42 A2			lda BALL0.INPLAY
 19084 92D1 D0 2B			jne l_378E
 19085
 19086 				; optimize OK (service.pas), line = 3439
 19087
 19088 92D3 AC 8B 93 84 84 AC + 	mwy BALL0 :bp2
 19089 92DD A0 1A			ldy #$1A
 19090 92DF B9 46 A2 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 19091
 19092 				; optimize OK (service.pas), line = 3440
 19093
 19094 92E7 AC 8D 93 84 84 AC + 	mwy BALL1 :bp2
 19095 92F1 A0 1A			ldy #$1A
 19096 92F3 B9 61 A2 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 19097
 19098 				; optimize OK (service.pas), line = 3441
 19099
 19100 92FB 8D 78 A2			sta BALL2.INPLAY
 19101 92FE			l_378E
 19102
 19103 				; optimize OK (service.pas), line = 3444
 19104
 19105 92FE A9 00			lda #$00
 19106 9300 8D EC 9C			sta BALLS_IN_PLAY
 19107
 19108 				; optimize OK (service.pas), line = 3446
 19109
 19110 9303 AD 42 A2			lda BALL0.INPLAY
 19111 9306 F0 03			jeq l_37A9
 19112 9308 EE EC 9C			inc BALLS_IN_PLAY
 19113 930B			l_37A9
 19114
 19115 				; optimize OK (service.pas), line = 3447
 19116
 19117 930B AD 5D A2			lda BALL1.INPLAY
 19118 930E F0 03			jeq l_37BC
 19119 9310 EE EC 9C			inc BALLS_IN_PLAY
 19120 9313			l_37BC
 19121
 19122 				; optimize OK (service.pas), line = 3448
 19123
 19124 9313 AD 78 A2			lda BALL2.INPLAY
 19125 9316 F0 03			jeq l_37CF
 19126 9318 EE EC 9C			inc BALLS_IN_PLAY
 19127 931B			l_37CF
 19128
 19129 				; optimize OK (service.pas), line = 3451
 19130
 19131 931B AD 42 A2			lda BALL0.INPLAY
 19132 931E D0 49			jne l_37E5
 19133
 19134 				; optimize OK (service.pas), line = 3453
 19135
 19136 9320 A9 01			lda #$01
 19137 9322 8D 43 A2			sta BALL0.LAUNCH
 19138
 19139 				; optimize OK (service.pas), line = 3454
 19140
 19141 9325 AD 8B 93			lda BALL0
 19142 9328 8D 96 A0			sta REMOVE_BALL.BALL
 19143 932B AD 8C 93			lda BALL0+1
 19144 932E 8D 97 A0			sta REMOVE_BALL.BALL+1
 19145 9331 20 D2 35			jsr REMOVE_BALL
 19146
 19147 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3455
 19148
 19149 9334 20 9C 73			jsr DESTROY_VAUS
 19150
 19151 				; optimize OK (service.pas), line = 3456
 19152
 19153 9337 AC CD 9C			ldy CUR_PLAYER
 19154 933A B9 C1 9C			lda adr.SCORE.LIVES,y
 19155 933D 38 E9 01			sub #$01
 19156 9340 99 C1 9C			sta adr.SCORE.LIVES,y
 19157
 19158 				; optimize OK (service.pas), line = 3457
 19159
 19160 9343 AD D7 9A			lda WALL_P
 19161 9346 85 8E			sta @move.dst
 19162 9348 AD CD 9C			lda CUR_PLAYER
 19163 934B 18 6D D8 9A			add WALL_P+1
 19164 934F 85 8F			sta @move.dst+1
 19165 9351 AD D9 9A			lda WALL
 19166 9354 85 8A			sta @move.src
 19167 9356 AD DA 9A			lda WALL+1
 19168 9359 85 8B			sta @move.src+1
 19169 935B A9 00			lda <256
 19170 935D 85 86			sta @move.cnt
 19171 935F A9 01			lda >256
 19172 9361 85 87			sta @move.cnt+1
 19173 9363 20 BD 11			jsr @move
 19174
 19175 				; optimize FAIL ('NOSOUND', service.pas), line = 3465
 19176
 19177 9366 20 26 2E			jsr NOSOUND
 19178 9369			l_37E5
 19179 9369			l_35C6
 19180
 19181 				; optimize OK (service.pas), line = 3259
 19182
 19183 9369 AD B0 9C			lda REMAIN_BLK
 19184 936C F0 0D			jeq l_35C7w
 19185 936E AD 42 A2			lda BALL0.INPLAY
 19186 9371 F0 08			jeq l_35C7w
 19187 9373 AD CC 9C			lda SCORE.ABORTPLAY
 19188 9376 D0 03 4C F5 8E		jeq l_35C7
 19189 937B			l_35C7w
 19190
 19191 				; optimize OK (service.pas), line = 3521
 19192
 19193 937B A9 00			lda #$00
 19194 937D 8D 1D A2			sta RESULT
 19195
 19196 				; optimize OK (service.pas), line = 3522
 19197
 19198 9380 AD B0 9C			lda REMAIN_BLK
 19199 9383 D0 05			jne l_3833
 19200 9385 A9 01			lda #$01
 19201 9387 8D 1D A2			sta RESULT
 19202 938A			l_3833
 19203 938A			@exit
 19204
 19205 				; ------------------------------------------------------------
 19206
 19207 = A21D			RESULT	= DATAORIGIN+$0734
 19208 = A21E			X	= DATAORIGIN+$0735
 19209 = A220			Y	= DATAORIGIN+$0737
 19210 = A222			KEY	= DATAORIGIN+$0739
 19211 = A224			T1	= DATAORIGIN+$073B
 19212 = A226			T2	= DATAORIGIN+$073D
 19213 = A228			HLP	= DATAORIGIN+$073F
 19214 = A22A			CN	= DATAORIGIN+$0741
 19215 = A22B			adr.BALL0	= DATAORIGIN+$0742	; [27] RECORD
 19216 938A			.var BALL0	= adr.BALL0 .word
 19217 = A22B			BALL0.X	= DATAORIGIN+$0742
 19218 = A22D			BALL0.Y	= DATAORIGIN+$0744
 19219 = A22F			BALL0.FINEX	= DATAORIGIN+$0746
 19220 = A231			BALL0.FINEY	= DATAORIGIN+$0748
 19221 = A233			BALL0.OLDX	= DATAORIGIN+$074A
 19222 = A235			BALL0.OLDY	= DATAORIGIN+$074C
 19223 = A237			BALL0.SPEED	= DATAORIGIN+$074E
 19224 = A239			BALL0.FINESPEED	= DATAORIGIN+$0750
 19225 = A23B			BALL0.SPEEDX	= DATAORIGIN+$0752
 19226 = A23D			BALL0.SPEEDY	= DATAORIGIN+$0754
 19227 = A23F			BALL0.SBD	= DATAORIGIN+$0756
 19228 = A241			BALL0.BRWHIT	= DATAORIGIN+$0758
 19229 = A242			BALL0.INPLAY	= DATAORIGIN+$0759
 19230 = A243			BALL0.LAUNCH	= DATAORIGIN+$075A
 19231 = A244			BALL0.ONVAUS	= DATAORIGIN+$075B
 19232 = A245			BALL0.STM	= DATAORIGIN+$075C
 19233 = A246			adr.BALL1	= DATAORIGIN+$075D	; [27] RECORD
 19234 938A			.var BALL1	= adr.BALL1 .word
 19235 = A246			BALL1.X	= DATAORIGIN+$075D
 19236 = A248			BALL1.Y	= DATAORIGIN+$075F
 19237 = A24A			BALL1.FINEX	= DATAORIGIN+$0761
 19238 = A24C			BALL1.FINEY	= DATAORIGIN+$0763
 19239 = A24E			BALL1.OLDX	= DATAORIGIN+$0765
 19240 = A250			BALL1.OLDY	= DATAORIGIN+$0767
 19241 = A252			BALL1.SPEED	= DATAORIGIN+$0769
 19242 = A254			BALL1.FINESPEED	= DATAORIGIN+$076B
 19243 = A256			BALL1.SPEEDX	= DATAORIGIN+$076D
 19244 = A258			BALL1.SPEEDY	= DATAORIGIN+$076F
 19245 = A25A			BALL1.SBD	= DATAORIGIN+$0771
 19246 = A25C			BALL1.BRWHIT	= DATAORIGIN+$0773
 19247 = A25D			BALL1.INPLAY	= DATAORIGIN+$0774
 19248 = A25E			BALL1.LAUNCH	= DATAORIGIN+$0775
 19249 = A25F			BALL1.ONVAUS	= DATAORIGIN+$0776
 19250 = A260			BALL1.STM	= DATAORIGIN+$0777
 19251 = A261			adr.BALL2	= DATAORIGIN+$0778	; [27] RECORD
 19252 938A			.var BALL2	= adr.BALL2 .word
 19253 = A261			BALL2.X	= DATAORIGIN+$0778
 19254 = A263			BALL2.Y	= DATAORIGIN+$077A
 19255 = A265			BALL2.FINEX	= DATAORIGIN+$077C
 19256 = A267			BALL2.FINEY	= DATAORIGIN+$077E
 19257 = A269			BALL2.OLDX	= DATAORIGIN+$0780
 19258 = A26B			BALL2.OLDY	= DATAORIGIN+$0782
 19259 = A26D			BALL2.SPEED	= DATAORIGIN+$0784
 19260 = A26F			BALL2.FINESPEED	= DATAORIGIN+$0786
 19261 = A271			BALL2.SPEEDX	= DATAORIGIN+$0788
 19262 = A273			BALL2.SPEEDY	= DATAORIGIN+$078A
 19263 = A275			BALL2.SBD	= DATAORIGIN+$078C
 19264 = A277			BALL2.BRWHIT	= DATAORIGIN+$078E
 19265 = A278			BALL2.INPLAY	= DATAORIGIN+$078F
 19266 = A279			BALL2.LAUNCH	= DATAORIGIN+$0790
 19267 = A27A			BALL2.ONVAUS	= DATAORIGIN+$0791
 19268 = A27B			BALL2.STM	= DATAORIGIN+$0792
 19269
 19270 = A21E			@VarData	= X
 19271 = 005E			@VarDataSize	= 94
 19272
 19273 938A 60				rts						; ret
 19274 = 938B 2B A2		BALL0
 19274 = 938D 46 A2		BALL1
 19274 = 938F 61 A2		BALL2
 19274 				.endl
 19275
 19276 9391			.local	CHOOSE_START_WALL				; FUNCTION
 19277
 19278 				; optimize OK (service.pas), line = 3545
 19279
 19280 9391 A9 01			lda #$01
 19281 9393 8D 8A A2			sta ST
 19282 9396 A9 00			lda #$00
 19283 9398 8D 8B A2			sta ST+1
 19284
 19285 				; optimize OK (service.pas), line = 3603
 19286
 19287 939B AD 8A A2			lda ST
 19288 939E 8D 84 A2			sta RESULT
 19289 93A1 AD 8B A2			lda ST+1
 19290 93A4 8D 85 A2			sta RESULT+1
 19291 93A7			@exit
 19292
 19293 				; ------------------------------------------------------------
 19294
 19295 = A284			RESULT	= DATAORIGIN+$079B
 19296 = 0046			PX	= $46
 19297 = 0064			PY	= $64
 19298 = 0022			DX	= $22
 19299 = 0023			DY	= $23
 19300 = 0013			DDX	= $13
 19301 = 000E			DDY	= $0E
 19302 = A286			X	= DATAORIGIN+$079D
 19303 = A288			Y	= DATAORIGIN+$079F
 19304 = A28A			ST	= DATAORIGIN+$07A1
 19305 = A28C			OLDX	= DATAORIGIN+$07A3
 19306 = A28E			OLDY	= DATAORIGIN+$07A5
 19307 = A290			NEWX	= DATAORIGIN+$07A7
 19308 = A292			NEWY	= DATAORIGIN+$07A9
 19309
 19310 = A286			@VarData	= X
 19311 = 000E			@VarDataSize	= 14
 19312
 19313 93A7 60				rts						; ret
 19314 				.endl
 19315
 19316 93A8			.local	SET_START_PARAMETERS				; PROCEDURE
 19317
 19318 				; optimize OK (service.pas), line = 3612
 19319
 19320 93A8 A9 01			lda #$01
 19321 93AA 8D 94 A2			sta X
 19322
 19323 93AD			l_3854
 19324 				; --- ForToDoCondition
 19325 93AD AD 94 A2			lda X
 19326 93B0 C9 03			cmp #$03
 19327 93B2 B0 4E			jcs l_3862
 19328
 19329 				; optimize OK (service.pas), line = 3614
 19330
 19331 93B4 0A				asl @
 19332 93B5 0A				asl @
 19333 93B6 A8				tay
 19334 93B7 A9 00			lda #$00
 19335 93B9 99 B2 9C			sta adr.SCORE.PLAYER,y
 19336 93BC 99 B3 9C			sta adr.SCORE.PLAYER+1,y
 19337 93BF 99 B4 9C			sta adr.SCORE.PLAYER+2,y
 19338 93C2 99 B5 9C			sta adr.SCORE.PLAYER+3,y
 19339
 19340 				; optimize OK (service.pas), line = 3615
 19341
 19342 93C5 AC 94 A2			ldy X
 19343 93C8 A9 05			lda #$05
 19344 93CA 99 C1 9C			sta adr.SCORE.LIVES,y
 19345
 19346 				; optimize OK (service.pas), line = 3616
 19347
 19348 93CD A9 01			lda #$01
 19349 93CF 99 BE 9C			sta adr.SCORE.WALL_N,y
 19350
 19351 				; optimize OK (service.pas), line = 3617
 19352
 19353 93D2 AD D7 9A			lda WALL_P
 19354 93D5 85 8E			sta @move.dst
 19355 93D7 AD 94 A2			lda X
 19356 93DA 18 6D D8 9A			add WALL_P+1
 19357 93DE 85 8F			sta @move.dst+1
 19358 93E0 AD DB 9A			lda ALL_WALLS
 19359 93E3 85 8A			sta @move.src
 19360 93E5 AD DC 9A			lda ALL_WALLS+1
 19361 93E8 85 8B			sta @move.src+1
 19362 93EA A9 00			lda <256
 19363 93EC 85 86			sta @move.cnt
 19364 93EE A9 01			lda >256
 19365 93F0 85 87			sta @move.cnt+1
 19366 93F2 20 BD 11			jsr @move
 19367
 19368 				; optimize OK (service.pas), line = 3619
 19369
 19370 93F5 AC 94 A2			ldy X
 19371 93F8 A9 00			lda #$00
 19372 93FA 99 C9 9C			sta adr.SCORE.ROUNDSEL,y
 19373
 19374 				; --- ForToDoEpilog
 19375 93FD EE 94 A2			inc X
 19376 9400 D0 AB			jne l_3854
 19377 9402			l_3862
 19378
 19379 				; optimize OK (service.pas), line = 3622
 19380
 19381 9402 A9 01			lda #$01
 19382 9404 8D CD 9C			sta CUR_PLAYER
 19383
 19384 				; ------------------------------------------------------------
 19385
 19386 = A294			X	= DATAORIGIN+$07AB
 19387
 19388 = A294			@VarData	= X
 19389 = 0001			@VarDataSize	= 1
 19390
 19391 9407			@exit
 19392 					.ifdef @new
 19393 					lda <@VarData
 19394 					sta :ztmp
 19395 					lda >@VarData
 19396 					ldy #@VarDataSize-1
 19397 					jmp @FreeMem
 19398 					els
 19399 9407 60				rts						; ret
 19400 					eif
 19401 				.endl
 19402
 19403 9408			.local	MAINSCREEN					; FUNCTION
 19404
 19405 				; optimize FAIL ('NOSOUND', service.pas), line = 3682
 19406
 19407 9408 20 26 2E			jsr NOSOUND
 19408
 19409 				; optimize OK (service.pas), line = 3683
 19410
 19411 940B A9 00			lda #$00
 19412 940D 8D CC 9C			sta SCORE.ABORTPLAY
 19413
 19414 				; optimize OK (service.pas), line = 3688
 19415
 19416 9410 AD 91 9A			lda PLAYSCREEN
 19417 9413 8D 8B A0			sta SETPALETTE.BTM
 19418 9416 AD 92 9A			lda PLAYSCREEN+1
 19419 9419 8D 8C A0			sta SETPALETTE.BTM+1
 19420 941C 20 0A 35			jsr SETPALETTE
 19421
 19422 				; optimize OK (service.pas), line = 3694
 19423
 19424 941F AD 35 9C			lda PRESENTS.OFS
 19425 9422 8D F2 9F			sta BLITBOX.SRC
 19426 9425 AD 36 9C			lda PRESENTS.OFS+1
 19427 9428 8D F3 9F			sta BLITBOX.SRC+1
 19428 942B AD 37 9C			lda PRESENTS.OFS+2
 19429 942E 8D F4 9F			sta BLITBOX.SRC+2
 19430 9431 AD 38 9C			lda PRESENTS.OFS+3
 19431 9434 8D F5 9F			sta BLITBOX.SRC+3
 19432 9437 A9 00			lda #$00
 19433 9439 8D F6 9F			sta BLITBOX.DST
 19434 943C A9 50			lda #$50
 19435 943E 8D F7 9F			sta BLITBOX.DST+1
 19436 9441 A9 00			lda #$00
 19437 9443 8D F8 9F			sta BLITBOX.DST+2
 19438 9446 8D F9 9F			sta BLITBOX.DST+3
 19439 9449 A9 40			lda #$40
 19440 944B 8D FA 9F			sta BLITBOX.W
 19441 944E A9 01			lda #$01
 19442 9450 8D FB 9F			sta BLITBOX.W+1
 19443 9453 A9 C8			lda #$C8
 19444 9455 8D FC 9F			sta BLITBOX.H
 19445 9458 20 CB 2B			jsr BLITBOX
 19446
 19447 				; optimize OK (service.pas), line = 3732
 19448
 19449 945B A9 01			lda #$01
 19450 945D 8D 95 A2			sta RESULT
 19451 9460 A9 00			lda #$00
 19452 9462 8D 96 A2			sta RESULT+1
 19453 9465			@exit
 19454
 19455 				; ------------------------------------------------------------
 19456
 19457 = A295			RESULT	= DATAORIGIN+$07AC
 19458 = A297			X	= DATAORIGIN+$07AE
 19459 = A299			Y	= DATAORIGIN+$07B0
 19460 = A29B			Z	= DATAORIGIN+$07B2
 19461 = A29D			K	= DATAORIGIN+$07B4
 19462 = A29F			IK	= DATAORIGIN+$07B6
 19463
 19464 = A297			@VarData	= X
 19465 = 000A			@VarDataSize	= 10
 19466
 19467 9465 60				rts						; ret
 19468 				.endl
 19469
 19470 9466			.local	START_GAME					; PROCEDURE
 19471
 19472 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3740
 19473
 19474 9466 20 A8 93			jsr SET_START_PARAMETERS
 19475
 19476 				; optimize OK (service.pas), line = 3741
 19477
 19478 9469 AD A2 A2			lda PLAYERS+1
 19479 946C D0 05			bne @+
 19480 946E AD A1 A2			lda PLAYERS
 19481 9471 C9 01			cmp #$01
 19482 				@
 19483 9473 D0 05			jne l_38C4
 19484 9475 A9 00			lda #$00
 19485 9477 8D C3 9C			sta adr.SCORE.LIVES+$02
 19486 947A			l_38C4
 19487
 19488 				; optimize OK (service.pas), line = 3744
 19489
 19490 947A A9 00			lda #$00
 19491 947C 8D D5 9C			sta TRAINER
 19492
 19493 				; optimize OK (service.pas), line = 3745
 19494
 19495 947F AD D9 9A			lda WALL
 19496 9482 85 8E			sta @move.dst
 19497 9484 AD DA 9A			lda WALL+1
 19498 9487 85 8F			sta @move.dst+1
 19499 9489 AD D7 9A			lda WALL_P
 19500 948C 85 8A			sta @move.src
 19501 948E AD CD 9C			lda CUR_PLAYER
 19502 9491 18 6D D8 9A			add WALL_P+1
 19503 9495 85 8B			sta @move.src+1
 19504 9497 A9 00			lda <256
 19505 9499 85 86			sta @move.cnt
 19506 949B A9 01			lda >256
 19507 949D 85 87			sta @move.cnt+1
 19508 949F 20 BD 11			jsr @move
 19509
 19510 				; optimize FAIL ('SET_WALL', service.pas), line = 3749
 19511
 19512 94A2 20 A9 52			jsr SET_WALL
 19513
 19514 				; optimize OK (service.pas), line = 3751
 19515
 19516 94A5 AD B1 9A			lda PATTERN
 19517 94A8 8D 88 A1			sta FILL_PICTURE_WITH_PATTERN.PATT
 19518 94AB AD B2 9A			lda PATTERN+1
 19519 94AE 8D 89 A1			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 19520 94B1 20 49 71			jsr FILL_PICTURE_WITH_PATTERN
 19521
 19522 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3752
 19523
 19524 94B4 E8				inx
 19525 94B5 AD 91 9A 95 96		mva PLAYSCREEN :STACKORIGIN,x
 19526 94BA AD 92 9A 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 19527 94BF 20 B5 34			jsr SHOWBTMPICTURE
 19528
 19529 				; optimize OK (service.pas), line = 3755
 19530
 19531 94C2 AD 91 9A			lda PLAYSCREEN
 19532 94C5 8D 8B A0			sta SETPALETTE.BTM
 19533 94C8 AD 92 9A			lda PLAYSCREEN+1
 19534 94CB 8D 8C A0			sta SETPALETTE.BTM+1
 19535 94CE 20 0A 35			jsr SETPALETTE
 19536
 19537 				; optimize OK (service.pas), line = 3759
 19538
 19539 94D1 AD B6 9C			lda adr.SCORE.PLAYER+$04
 19540 94D4 8D D3 A1			sta WRITE_SCORE.SC
 19541 94D7 AD B7 9C			lda adr.SCORE.PLAYER+1+$04
 19542 94DA 8D D4 A1			sta WRITE_SCORE.SC+1
 19543 94DD AD B8 9C			lda adr.SCORE.PLAYER+2+$04
 19544 94E0 8D D5 A1			sta WRITE_SCORE.SC+2
 19545 94E3 AD B9 9C			lda adr.SCORE.PLAYER+3+$04
 19546 94E6 8D D6 A1			sta WRITE_SCORE.SC+3
 19547 94E9 A9 FD			lda #$FD
 19548 94EB 8D CF A1			sta WRITE_SCORE.PX
 19549 94EE A9 00			lda #$00
 19550 94F0 8D D0 A1			sta WRITE_SCORE.PX+1
 19551 94F3 A9 3C			lda #$3C
 19552 94F5 8D D1 A1			sta WRITE_SCORE.PY
 19553 94F8 A9 00			lda #$00
 19554 94FA 8D D2 A1			sta WRITE_SCORE.PY+1
 19555 94FD 20 A8 7B			jsr WRITE_SCORE
 19556
 19557 				; optimize OK (service.pas), line = 3760
 19558
 19559 9500 AD BA 9C			lda adr.SCORE.PLAYER+$08
 19560 9503 8D D3 A1			sta WRITE_SCORE.SC
 19561 9506 AD BB 9C			lda adr.SCORE.PLAYER+1+$08
 19562 9509 8D D4 A1			sta WRITE_SCORE.SC+1
 19563 950C AD BC 9C			lda adr.SCORE.PLAYER+2+$08
 19564 950F 8D D5 A1			sta WRITE_SCORE.SC+2
 19565 9512 AD BD 9C			lda adr.SCORE.PLAYER+3+$08
 19566 9515 8D D6 A1			sta WRITE_SCORE.SC+3
 19567 9518 A9 FD			lda #$FD
 19568 951A 8D CF A1			sta WRITE_SCORE.PX
 19569 951D A9 00			lda #$00
 19570 951F 8D D0 A1			sta WRITE_SCORE.PX+1
 19571 9522 A9 5D			lda #$5D
 19572 9524 8D D1 A1			sta WRITE_SCORE.PY
 19573 9527 A9 00			lda #$00
 19574 9529 8D D2 A1			sta WRITE_SCORE.PY+1
 19575 952C 20 A8 7B			jsr WRITE_SCORE
 19576
 19577 				; optimize OK (service.pas), line = 3761
 19578
 19579 952F A9 FD			lda #$FD
 19580 9531 8D CF A1			sta WRITE_SCORE.PX
 19581 9534 A9 00			lda #$00
 19582 9536 8D D0 A1			sta WRITE_SCORE.PX+1
 19583 9539 A9 80			lda #$80
 19584 953B 8D D1 A1			sta WRITE_SCORE.PY
 19585 953E A9 00			lda #$00
 19586 9540 8D D2 A1			sta WRITE_SCORE.PY+1
 19587 9543 AD C4 9C			lda SCORE.HISCORE
 19588 9546 8D D3 A1			sta WRITE_SCORE.SC
 19589 9549 AD C5 9C			lda SCORE.HISCORE+1
 19590 954C 8D D4 A1			sta WRITE_SCORE.SC+1
 19591 954F AD C6 9C			lda SCORE.HISCORE+2
 19592 9552 8D D5 A1			sta WRITE_SCORE.SC+2
 19593 9555 AD C7 9C			lda SCORE.HISCORE+3
 19594 9558 8D D6 A1			sta WRITE_SCORE.SC+3
 19595 955B 20 A8 7B			jsr WRITE_SCORE
 19596
 19597 				; --- RepeatUntilProlog
 19598 955E			l_38F6
 19599
 19600 				; --- RepeatUntilProlog
 19601 955E			l_38F7
 19602
 19603 				; optimize OK (service.pas), line = 3771
 19604
 19605 955E AC CD 9C			ldy CUR_PLAYER
 19606 9561 B9 C9 9C			lda adr.SCORE.ROUNDSEL,y
 19607 9564 D0 77			jne l_3909
 19608
 19609 				; optimize FAIL (1, service.pas), line = 3773
 19610
 19611 9566 E8				inx
 19612 9567 AD CD 9C 95 96		mva CUR_PLAYER :STACKORIGIN,x
 19613 956C A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 19614 9570 20 91 93			jsr CHOOSE_START_WALL
 19615 9573 E8				inx
 19616 9574 AD 84 A2 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 19617 9579 AD 85 A2 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 19618 957E B4 95			ldy :STACKORIGIN-1,x
 19619 9580 B5 96			lda :STACKORIGIN,x
 19620 9582 99 BE 9C			sta adr.SCORE.WALL_N,y
 19621 9585 CA				dex
 19622 9586 CA				dex
 19623
 19624 				; optimize OK (service.pas), line = 3776
 19625
 19626 9587 A9 00			lda #$00
 19627 9589 85 9F			sta :STACKORIGIN+9
 19628 958B AD CD 9C			lda CUR_PLAYER
 19629 958E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19630 9590 AC CD 9C			ldy CUR_PLAYER
 19631 9593 B9 BE 9C			lda adr.SCORE.WALL_N,y
 19632 9596 38 E9 01			sub #$01
 19633 9599 85 86			sta :eax
 19634 959B A9 00			lda #$00
 19635 959D E9 00			sbc #$00
 19636 959F 85 87			sta :eax+1
 19637 95A1 A9 00			lda #$00
 19638 95A3 85 8E			sta :ecx
 19639 95A5 A9 01			lda #$01
 19640 95A7 85 8F			sta :ecx+1
 19641 					.ifdef fmulinit
 19642 					fmulu_16
 19643 					els
 19644 95A9 20 12 13			imulCX
 19645 					eif
 19646 95AC AD D7 9A			lda WALL_P
 19647 95AF 18 65 9F			add :STACKORIGIN+9
 19648 95B2 85 8E			sta @move.dst
 19649 95B4 AD D8 9A			lda WALL_P+1
 19650 95B7 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19651 95B9 85 8F			sta @move.dst+1
 19652 95BB A5 86			lda :eax
 19653 95BD 18 6D DB 9A			add ALL_WALLS
 19654 95C1 85 8A			sta @move.src
 19655 95C3 A5 87			lda :eax+1
 19656 95C5 6D DC 9A			adc ALL_WALLS+1
 19657 95C8 85 8B			sta @move.src+1
 19658 95CA A9 00			lda <256
 19659 95CC 85 86			sta @move.cnt
 19660 95CE A9 01			lda >256
 19661 95D0 85 87			sta @move.cnt+1
 19662 95D2 20 BD 11			jsr @move
 19663
 19664 				; optimize OK (service.pas), line = 3780
 19665
 19666 95D5 AC CD 9C			ldy CUR_PLAYER
 19667 95D8 A9 01			lda #$01
 19668 95DA 99 C9 9C			sta adr.SCORE.ROUNDSEL,y
 19669 95DD			l_3909
 19670
 19671 				; optimize OK (service.pas), line = 3784
 19672
 19673 95DD AD D9 9A			lda WALL
 19674 95E0 85 8E			sta @move.dst
 19675 95E2 AD DA 9A			lda WALL+1
 19676 95E5 85 8F			sta @move.dst+1
 19677 95E7 AD D7 9A			lda WALL_P
 19678 95EA 85 8A			sta @move.src
 19679 95EC AD CD 9C			lda CUR_PLAYER
 19680 95EF 18 6D D8 9A			add WALL_P+1
 19681 95F3 85 8B			sta @move.src+1
 19682 95F5 A9 00			lda <256
 19683 95F7 85 86			sta @move.cnt
 19684 95F9 A9 01			lda >256
 19685 95FB 85 87			sta @move.cnt+1
 19686 95FD 20 BD 11			jsr @move
 19687
 19688 				; optimize FAIL ('SET_WALL', service.pas), line = 3785
 19689
 19690 9600 20 A9 52			jsr SET_WALL
 19691
 19692 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3790
 19693
 19694 9603 20 76 8B			jsr BOUNCEBALL
 19695 9606 AD 1D A2			lda BOUNCEBALL.RESULT
 19696 9609 8D A3 A2			sta NWALL
 19697
 19698 				; optimize OK (service.pas), line = 3793
 19699
 19700 960C F0 6A			jeq l_3957
 19701
 19702 				; optimize OK (service.pas), line = 3796
 19703
 19704 960E AC CD 9C			ldy CUR_PLAYER
 19705 9611 B9 BE 9C			lda adr.SCORE.WALL_N,y
 19706 9614 18 69 01			add #$01
 19707 9617 99 BE 9C			sta adr.SCORE.WALL_N,y
 19708
 19709 				; optimize OK (service.pas), line = 3799
 19710
 19711 961A AD B1 9C			lda TOTALWALL
 19712 961D D9 BE 9C			cmp adr.SCORE.WALL_N,y
 19713 9620 B0 05			jcs l_3973
 19714
 19715 				; optimize OK (service.pas), line = 3800
 19716
 19717 9622 A9 01			lda #$01
 19718 9624 99 BE 9C			sta adr.SCORE.WALL_N,y
 19719 9627			l_3973
 19720
 19721 				; optimize OK (service.pas), line = 3803
 19722
 19723 9627 A9 00			lda #$00
 19724 9629 85 9F			sta :STACKORIGIN+9
 19725 962B AD CD 9C			lda CUR_PLAYER
 19726 962E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 19727 9630 AC CD 9C			ldy CUR_PLAYER
 19728 9633 B9 BE 9C			lda adr.SCORE.WALL_N,y
 19729 9636 38 E9 01			sub #$01
 19730 9639 85 86			sta :eax
 19731 963B A9 00			lda #$00
 19732 963D E9 00			sbc #$00
 19733 963F 85 87			sta :eax+1
 19734 9641 A9 00			lda #$00
 19735 9643 85 8E			sta :ecx
 19736 9645 A9 01			lda #$01
 19737 9647 85 8F			sta :ecx+1
 19738 					.ifdef fmulinit
 19739 					fmulu_16
 19740 					els
 19741 9649 20 12 13			imulCX
 19742 					eif
 19743 964C AD D7 9A			lda WALL_P
 19744 964F 18 65 9F			add :STACKORIGIN+9
 19745 9652 85 8E			sta @move.dst
 19746 9654 AD D8 9A			lda WALL_P+1
 19747 9657 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 19748 9659 85 8F			sta @move.dst+1
 19749 965B A5 86			lda :eax
 19750 965D 18 6D DB 9A			add ALL_WALLS
 19751 9661 85 8A			sta @move.src
 19752 9663 A5 87			lda :eax+1
 19753 9665 6D DC 9A			adc ALL_WALLS+1
 19754 9668 85 8B			sta @move.src+1
 19755 966A A9 00			lda <256
 19756 966C 85 86			sta @move.cnt
 19757 966E A9 01			lda >256
 19758 9670 85 87			sta @move.cnt+1
 19759 9672 20 BD 11			jsr @move
 19760 9675 4C 83 96			jmp l_39A5
 19761 9678			l_3957
 19762
 19763 				; optimize OK (service.pas), line = 3809
 19764
 19765 9678 AC CD 9C			ldy CUR_PLAYER
 19766 967B B9 C1 9C			lda adr.SCORE.LIVES,y
 19767 967E D0 03			jne l_39BA
 19768 9680 20 99 73			jsr GAME_OVER
 19769 9683			l_39A5
 19770 9683			l_39BA
 19771
 19772 				; optimize OK (service.pas), line = 3814
 19773
 19774 9683 AD A3 A2			lda NWALL
 19775 9686 F0 03 4C 5E 95		jne l_38F7
 19776
 19777 				; optimize FAIL (0, service.pas), line = 3817
 19778
 19779 968B EE CD 9C			inc CUR_PLAYER
 19780
 19781 				; optimize OK (service.pas), line = 3818
 19782
 19783 968E AD A1 A2			lda PLAYERS
 19784 9691 CD CD 9C			cmp CUR_PLAYER
 19785 9694 AD A2 A2			lda PLAYERS+1
 19786 9697 E9 00			sbc #$00
 19787 9699 50 02			svc
 19788 969B 49 80			eor #$80
 19789 969D 10 05			jpl l_39E2
 19790 969F A9 01			lda #$01
 19791 96A1 8D CD 9C			sta CUR_PLAYER
 19792 96A4			l_39E2
 19793
 19794 				; optimize OK (service.pas), line = 3824
 19795
 19796 96A4 AC CD 9C			ldy CUR_PLAYER
 19797 96A7 B9 C1 9C			lda adr.SCORE.LIVES,y
 19798 96AA D0 09			jne l_39FE
 19799 96AC A9 03			lda #$03
 19800 96AE 38 ED CD 9C			sub CUR_PLAYER
 19801 96B2 8D CD 9C			sta CUR_PLAYER
 19802 96B5			l_39FE
 19803
 19804 				; optimize OK (service.pas), line = 3829
 19805
 19806 96B5 A0 01			ldy #1
 19807 96B7 AD C2 9C			lda adr.SCORE.LIVES+$01
 19808 96BA F0 01			beq @+
 19809 96BC 88				dey
 19810 				@
 19811 96BD 84 9F			sty :STACKORIGIN+9
 19812 96BF A0 01			ldy #1
 19813 96C1 AD C3 9C			lda adr.SCORE.LIVES+$02
 19814 96C4 F0 01			beq @+
 19815 96C6 88				dey
 19816 				@
 19817 96C7 98				tya
 19818 96C8 25 9F			and :STACKORIGIN+9
 19819 96CA 0D CC 9C			ora SCORE.ABORTPLAY
 19820 96CD D0 03 4C 5E 95		jeq l_38F6
 19821
 19822 				; ------------------------------------------------------------
 19823
 19824 = A2A1			PLAYERS	= DATAORIGIN+$07B8
 19825 = A2A3			NWALL	= DATAORIGIN+$07BA
 19826
 19827 = A2A1			@VarData	= PLAYERS
 19828 = 0003			@VarDataSize	= 3
 19829
 19830 96D2			@exit
 19831 					.ifdef @new
 19832 					lda <@VarData
 19833 					sta :ztmp
 19834 					lda >@VarData
 19835 					ldy #@VarDataSize-1
 19836 					jmp @FreeMem
 19837 					els
 19838 96D2 60				rts						; ret
 19839 					eif
 19840 				.endl
 19841
 19842 96D3			.local	INIT_GAME					; PROCEDURE
 19843
 19844 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 137
 19845
 19846 96D3 20 CC 2E			jsr INITSVGA
 19847
 19848 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 138
 19849
 19850 96D6 20 91 2E			jsr INITROWARRAY
 19851
 19852 				; optimize OK (btm.inc), line = 1
 19853
 19854 96D9 A9 00			lda #$00
 19855 96DB 8D FD 9B			sta PLAYSCREEN.OFS
 19856 96DE A9 4A			lda #$4A
 19857 96E0 8D FE 9B			sta PLAYSCREEN.OFS+1
 19858 96E3 A9 01			lda #$01
 19859 96E5 8D FF 9B			sta PLAYSCREEN.OFS+2
 19860 96E8 A9 00			lda #$00
 19861 96EA 8D 00 9C			sta PLAYSCREEN.OFS+3
 19862
 19863 				; optimize OK (btm.inc), line = 2
 19864
 19865 96ED A9 40			lda #$40
 19866 96EF 8D F9 9B			sta PLAYSCREEN.WIDTH
 19867 96F2 A9 01			lda #$01
 19868 96F4 8D FA 9B			sta PLAYSCREEN.WIDTH+1
 19869
 19870 				; optimize OK (btm.inc), line = 3
 19871
 19872 96F7 A9 C8			lda #$C8
 19873 96F9 8D FB 9B			sta PLAYSCREEN.HEIGHT
 19874 96FC A9 00			lda #$00
 19875 96FE 8D FC 9B			sta PLAYSCREEN.HEIGHT+1
 19876
 19877 				; optimize OK (btm.inc), line = 5
 19878
 19879 9701 8D 35 9C			sta PRESENTS.OFS
 19880 9704 A9 44			lda #$44
 19881 9706 8D 36 9C			sta PRESENTS.OFS+1
 19882 9709 A9 02			lda #$02
 19883 970B 8D 37 9C			sta PRESENTS.OFS+2
 19884 970E A9 00			lda #$00
 19885 9710 8D 38 9C			sta PRESENTS.OFS+3
 19886
 19887 				; optimize OK (btm.inc), line = 6
 19888
 19889 9713 A9 40			lda #$40
 19890 9715 8D 31 9C			sta PRESENTS.WIDTH
 19891 9718 A9 01			lda #$01
 19892 971A 8D 32 9C			sta PRESENTS.WIDTH+1
 19893
 19894 				; optimize OK (btm.inc), line = 7
 19895
 19896 971D A9 C8			lda #$C8
 19897 971F 8D 33 9C			sta PRESENTS.HEIGHT
 19898 9722 A9 00			lda #$00
 19899 9724 8D 34 9C			sta PRESENTS.HEIGHT+1
 19900
 19901 				; optimize OK (btm.inc), line = 9
 19902
 19903 9727 8D 25 9C			sta EXPLOSION.OFS
 19904 972A A9 3E			lda #$3E
 19905 972C 8D 26 9C			sta EXPLOSION.OFS+1
 19906 972F A9 03			lda #$03
 19907 9731 8D 27 9C			sta EXPLOSION.OFS+2
 19908 9734 A9 00			lda #$00
 19909 9736 8D 28 9C			sta EXPLOSION.OFS+3
 19910
 19911 				; optimize OK (btm.inc), line = 10
 19912
 19913 9739 A9 2A			lda #$2A
 19914 973B 8D 21 9C			sta EXPLOSION.WIDTH
 19915 973E A9 00			lda #$00
 19916 9740 8D 22 9C			sta EXPLOSION.WIDTH+1
 19917
 19918 				; optimize OK (btm.inc), line = 11
 19919
 19920 9743 A9 72			lda #$72
 19921 9745 8D 23 9C			sta EXPLOSION.HEIGHT
 19922 9748 A9 00			lda #$00
 19923 974A 8D 24 9C			sta EXPLOSION.HEIGHT+1
 19924
 19925 				; optimize OK (btm.inc), line = 13
 19926
 19927 974D A9 B4			lda #$B4
 19928 974F 8D 2D 9C			sta NEWVAUS.OFS
 19929 9752 A9 50			lda #$50
 19930 9754 8D 2E 9C			sta NEWVAUS.OFS+1
 19931 9757 A9 03			lda #$03
 19932 9759 8D 2F 9C			sta NEWVAUS.OFS+2
 19933 975C A9 00			lda #$00
 19934 975E 8D 30 9C			sta NEWVAUS.OFS+3
 19935
 19936 				; optimize OK (btm.inc), line = 14
 19937
 19938 9761 A9 29			lda #$29
 19939 9763 8D 29 9C			sta NEWVAUS.WIDTH
 19940 9766 A9 00			lda #$00
 19941 9768 8D 2A 9C			sta NEWVAUS.WIDTH+1
 19942
 19943 				; optimize OK (btm.inc), line = 15
 19944
 19945 976B A9 C1			lda #$C1
 19946 976D 8D 2B 9C			sta NEWVAUS.HEIGHT
 19947 9770 A9 00			lda #$00
 19948 9772 8D 2C 9C			sta NEWVAUS.HEIGHT+1
 19949
 19950 				; optimize OK (btm.inc), line = 17
 19951
 19952 9775 A9 9D			lda #$9D
 19953 9777 8D 3D 9C			sta SOUNDFX.OFS
 19954 977A A9 6F			lda #$6F
 19955 977C 8D 3E 9C			sta SOUNDFX.OFS+1
 19956 977F A9 03			lda #$03
 19957 9781 8D 3F 9C			sta SOUNDFX.OFS+2
 19958 9784 A9 00			lda #$00
 19959 9786 8D 40 9C			sta SOUNDFX.OFS+3
 19960
 19961 				; optimize OK (btm.inc), line = 18
 19962
 19963 9789 A9 15			lda #$15
 19964 978B 8D 39 9C			sta SOUNDFX.WIDTH
 19965 978E A9 00			lda #$00
 19966 9790 8D 3A 9C			sta SOUNDFX.WIDTH+1
 19967
 19968 				; optimize OK (btm.inc), line = 19
 19969
 19970 9793 A9 26			lda #$26
 19971 9795 8D 3B 9C			sta SOUNDFX.HEIGHT
 19972 9798 A9 00			lda #$00
 19973 979A 8D 3C 9C			sta SOUNDFX.HEIGHT+1
 19974
 19975 				; optimize OK (btm.inc), line = 21
 19976
 19977 979D A9 BB			lda #$BB
 19978 979F 8D 45 9C			sta SHINEWALL.OFS
 19979 97A2 A9 72			lda #$72
 19980 97A4 8D 46 9C			sta SHINEWALL.OFS+1
 19981 97A7 A9 03			lda #$03
 19982 97A9 8D 47 9C			sta SHINEWALL.OFS+2
 19983 97AC A9 00			lda #$00
 19984 97AE 8D 48 9C			sta SHINEWALL.OFS+3
 19985
 19986 				; optimize OK (btm.inc), line = 22
 19987
 19988 97B1 A9 10			lda #$10
 19989 97B3 8D 41 9C			sta SHINEWALL.WIDTH
 19990 97B6 A9 00			lda #$00
 19991 97B8 8D 42 9C			sta SHINEWALL.WIDTH+1
 19992
 19993 				; optimize OK (btm.inc), line = 23
 19994
 19995 97BB A9 50			lda #$50
 19996 97BD 8D 43 9C			sta SHINEWALL.HEIGHT
 19997 97C0 A9 00			lda #$00
 19998 97C2 8D 44 9C			sta SHINEWALL.HEIGHT+1
 19999
 20000 				; optimize OK (btm.inc), line = 25
 20001
 20002 97C5 A9 BB			lda #$BB
 20003 97C7 8D 4D 9C			sta MINIVAUS.OFS
 20004 97CA A9 77			lda #$77
 20005 97CC 8D 4E 9C			sta MINIVAUS.OFS+1
 20006 97CF A9 03			lda #$03
 20007 97D1 8D 4F 9C			sta MINIVAUS.OFS+2
 20008 97D4 A9 00			lda #$00
 20009 97D6 8D 50 9C			sta MINIVAUS.OFS+3
 20010
 20011 				; optimize OK (btm.inc), line = 26
 20012
 20013 97D9 A9 14			lda #$14
 20014 97DB 8D 49 9C			sta MINIVAUS.WIDTH
 20015 97DE A9 00			lda #$00
 20016 97E0 8D 4A 9C			sta MINIVAUS.WIDTH+1
 20017
 20018 				; optimize OK (btm.inc), line = 27
 20019
 20020 97E3 A9 05			lda #$05
 20021 97E5 8D 4B 9C			sta MINIVAUS.HEIGHT
 20022 97E8 A9 00			lda #$00
 20023 97EA 8D 4C 9C			sta MINIVAUS.HEIGHT+1
 20024
 20025 				; optimize OK (btm.inc), line = 29
 20026
 20027 97ED A9 1F			lda #$1F
 20028 97EF 8D 55 9C			sta LEVELSEL.OFS
 20029 97F2 A9 78			lda #$78
 20030 97F4 8D 56 9C			sta LEVELSEL.OFS+1
 20031 97F7 A9 03			lda #$03
 20032 97F9 8D 57 9C			sta LEVELSEL.OFS+2
 20033 97FC A9 00			lda #$00
 20034 97FE 8D 58 9C			sta LEVELSEL.OFS+3
 20035
 20036 				; optimize OK (btm.inc), line = 30
 20037
 20038 9801 A9 15			lda #$15
 20039 9803 8D 51 9C			sta LEVELSEL.WIDTH
 20040 9806 A9 00			lda #$00
 20041 9808 8D 52 9C			sta LEVELSEL.WIDTH+1
 20042
 20043 				; optimize OK (btm.inc), line = 31
 20044
 20045 980B A9 5F			lda #$5F
 20046 980D 8D 53 9C			sta LEVELSEL.HEIGHT
 20047 9810 A9 00			lda #$00
 20048 9812 8D 54 9C			sta LEVELSEL.HEIGHT+1
 20049
 20050 				; optimize OK (btm.inc), line = 33
 20051
 20052 9815 A9 EA			lda #$EA
 20053 9817 8D 5D 9C			sta LETTERS.OFS
 20054 981A A9 7F			lda #$7F
 20055 981C 8D 5E 9C			sta LETTERS.OFS+1
 20056 981F A9 03			lda #$03
 20057 9821 8D 5F 9C			sta LETTERS.OFS+2
 20058 9824 A9 00			lda #$00
 20059 9826 8D 60 9C			sta LETTERS.OFS+3
 20060
 20061 				; optimize OK (btm.inc), line = 34
 20062
 20063 9829 A9 80			lda #$80
 20064 982B 8D 59 9C			sta LETTERS.WIDTH
 20065 982E A9 00			lda #$00
 20066 9830 8D 5A 9C			sta LETTERS.WIDTH+1
 20067
 20068 				; optimize OK (btm.inc), line = 35
 20069
 20070 9833 A9 38			lda #$38
 20071 9835 8D 5B 9C			sta LETTERS.HEIGHT
 20072 9838 A9 00			lda #$00
 20073 983A 8D 5C 9C			sta LETTERS.HEIGHT+1
 20074
 20075 				; optimize OK (btm.inc), line = 37
 20076
 20077 983D A9 EA			lda #$EA
 20078 983F 8D 0D 9C			sta NORMAL.OFS
 20079 9842 A9 9B			lda #$9B
 20080 9844 8D 0E 9C			sta NORMAL.OFS+1
 20081 9847 A9 03			lda #$03
 20082 9849 8D 0F 9C			sta NORMAL.OFS+2
 20083 984C A9 00			lda #$00
 20084 984E 8D 10 9C			sta NORMAL.OFS+3
 20085
 20086 				; optimize OK (btm.inc), line = 38
 20087
 20088 9851 A9 20			lda #$20
 20089 9853 8D 09 9C			sta NORMAL.WIDTH
 20090 9856 A9 00			lda #$00
 20091 9858 8D 0A 9C			sta NORMAL.WIDTH+1
 20092
 20093 				; optimize OK (btm.inc), line = 39
 20094
 20095 985B A9 07			lda #$07
 20096 985D 8D 0B 9C			sta NORMAL.HEIGHT
 20097 9860 A9 00			lda #$00
 20098 9862 8D 0C 9C			sta NORMAL.HEIGHT+1
 20099
 20100 				; optimize OK (btm.inc), line = 41
 20101
 20102 9865 A9 CA			lda #$CA
 20103 9867 8D 1D 9C			sta LASERS.OFS
 20104 986A A9 9C			lda #$9C
 20105 986C 8D 1E 9C			sta LASERS.OFS+1
 20106 986F A9 03			lda #$03
 20107 9871 8D 1F 9C			sta LASERS.OFS+2
 20108 9874 A9 00			lda #$00
 20109 9876 8D 20 9C			sta LASERS.OFS+3
 20110
 20111 				; optimize OK (btm.inc), line = 42
 20112
 20113 9879 A9 20			lda #$20
 20114 987B 8D 19 9C			sta LASERS.WIDTH
 20115 987E A9 00			lda #$00
 20116 9880 8D 1A 9C			sta LASERS.WIDTH+1
 20117
 20118 				; optimize OK (btm.inc), line = 43
 20119
 20120 9883 A9 07			lda #$07
 20121 9885 8D 1B 9C			sta LASERS.HEIGHT
 20122 9888 A9 00			lda #$00
 20123 988A 8D 1C 9C			sta LASERS.HEIGHT+1
 20124
 20125 				; optimize OK (btm.inc), line = 45
 20126
 20127 988D A9 AA			lda #$AA
 20128 988F 8D 15 9C			sta ENLARGED.OFS
 20129 9892 A9 9D			lda #$9D
 20130 9894 8D 16 9C			sta ENLARGED.OFS+1
 20131 9897 A9 03			lda #$03
 20132 9899 8D 17 9C			sta ENLARGED.OFS+2
 20133 989C A9 00			lda #$00
 20134 989E 8D 18 9C			sta ENLARGED.OFS+3
 20135
 20136 				; optimize OK (btm.inc), line = 46
 20137
 20138 98A1 A9 40			lda #$40
 20139 98A3 8D 11 9C			sta ENLARGED.WIDTH
 20140 98A6 A9 00			lda #$00
 20141 98A8 8D 12 9C			sta ENLARGED.WIDTH+1
 20142
 20143 				; optimize OK (btm.inc), line = 47
 20144
 20145 98AB A9 07			lda #$07
 20146 98AD 8D 13 9C			sta ENLARGED.HEIGHT
 20147 98B0 A9 00			lda #$00
 20148 98B2 8D 14 9C			sta ENLARGED.HEIGHT+1
 20149
 20150 				; optimize OK (btm.inc), line = 49
 20151
 20152 98B5 A9 6A			lda #$6A
 20153 98B7 8D 65 9C			sta SHOOTS.OFS
 20154 98BA A9 9F			lda #$9F
 20155 98BC 8D 66 9C			sta SHOOTS.OFS+1
 20156 98BF A9 03			lda #$03
 20157 98C1 8D 67 9C			sta SHOOTS.OFS+2
 20158 98C4 A9 00			lda #$00
 20159 98C6 8D 68 9C			sta SHOOTS.OFS+3
 20160
 20161 				; optimize OK (btm.inc), line = 50
 20162
 20163 98C9 A9 0D			lda #$0D
 20164 98CB 8D 61 9C			sta SHOOTS.WIDTH
 20165 98CE A9 00			lda #$00
 20166 98D0 8D 62 9C			sta SHOOTS.WIDTH+1
 20167
 20168 				; optimize OK (btm.inc), line = 51
 20169
 20170 98D3 A9 08			lda #$08
 20171 98D5 8D 63 9C			sta SHOOTS.HEIGHT
 20172 98D8 A9 00			lda #$00
 20173 98DA 8D 64 9C			sta SHOOTS.HEIGHT+1
 20174
 20175 				; optimize OK (btm.inc), line = 53
 20176
 20177 98DD A9 D2			lda #$D2
 20178 98DF 8D 6D 9C			sta FLUX.OFS
 20179 98E2 A9 9F			lda #$9F
 20180 98E4 8D 6E 9C			sta FLUX.OFS+1
 20181 98E7 A9 03			lda #$03
 20182 98E9 8D 6F 9C			sta FLUX.OFS+2
 20183 98EC A9 00			lda #$00
 20184 98EE 8D 70 9C			sta FLUX.OFS+3
 20185
 20186 				; optimize OK (btm.inc), line = 54
 20187
 20188 98F1 A9 08			lda #$08
 20189 98F3 8D 69 9C			sta FLUX.WIDTH
 20190 98F6 A9 00			lda #$00
 20191 98F8 8D 6A 9C			sta FLUX.WIDTH+1
 20192
 20193 				; optimize OK (btm.inc), line = 55
 20194
 20195 98FB A9 29			lda #$29
 20196 98FD 8D 6B 9C			sta FLUX.HEIGHT
 20197 9900 A9 00			lda #$00
 20198 9902 8D 6C 9C			sta FLUX.HEIGHT+1
 20199
 20200 				; optimize OK (btm.inc), line = 57
 20201
 20202 9905 A9 1A			lda #$1A
 20203 9907 8D F5 9B			sta BALLDATA.OFS
 20204 990A A9 A1			lda #$A1
 20205 990C 8D F6 9B			sta BALLDATA.OFS+1
 20206 990F A9 03			lda #$03
 20207 9911 8D F7 9B			sta BALLDATA.OFS+2
 20208 9914 A9 00			lda #$00
 20209 9916 8D F8 9B			sta BALLDATA.OFS+3
 20210
 20211 				; optimize OK (btm.inc), line = 58
 20212
 20213 9919 A9 05			lda #$05
 20214 991B 8D F1 9B			sta BALLDATA.WIDTH
 20215 991E A9 00			lda #$00
 20216 9920 8D F2 9B			sta BALLDATA.WIDTH+1
 20217
 20218 				; optimize OK (btm.inc), line = 59
 20219
 20220 9923 A9 05			lda #$05
 20221 9925 8D F3 9B			sta BALLDATA.HEIGHT
 20222 9928 A9 00			lda #$00
 20223 992A 8D F4 9B			sta BALLDATA.HEIGHT+1
 20224
 20225 				; optimize OK (btm.inc), line = 61
 20226
 20227 992D A9 33			lda #$33
 20228 992F 8D 82 9C			sta PATTERN.OFS
 20229 9932 A9 A1			lda #$A1
 20230 9934 8D 83 9C			sta PATTERN.OFS+1
 20231 9937 A9 03			lda #$03
 20232 9939 8D 84 9C			sta PATTERN.OFS+2
 20233 993C A9 00			lda #$00
 20234 993E 8D 85 9C			sta PATTERN.OFS+3
 20235
 20236 				; optimize OK (btm.inc), line = 62
 20237
 20238 9941 A9 1A			lda #$1A
 20239 9943 8D 7E 9C			sta PATTERN.WIDTH
 20240 9946 A9 00			lda #$00
 20241 9948 8D 7F 9C			sta PATTERN.WIDTH+1
 20242
 20243 				; optimize OK (btm.inc), line = 63
 20244
 20245 994B A9 18			lda #$18
 20246 994D 8D 80 9C			sta PATTERN.HEIGHT
 20247 9950 A9 00			lda #$00
 20248 9952 8D 81 9C			sta PATTERN.HEIGHT+1
 20249
 20250 				; optimize OK (btm.inc), line = 65
 20251
 20252 9955 A9 A3			lda #$A3
 20253 9957 8D 8A 9C			sta PATTERN0.OFS
 20254 995A 8D 8B 9C			sta PATTERN0.OFS+1
 20255 995D A9 03			lda #$03
 20256 995F 8D 8C 9C			sta PATTERN0.OFS+2
 20257 9962 A9 00			lda #$00
 20258 9964 8D 8D 9C			sta PATTERN0.OFS+3
 20259
 20260 				; optimize OK (btm.inc), line = 66
 20261
 20262 9967 A9 1A			lda #$1A
 20263 9969 8D 86 9C			sta PATTERN0.WIDTH
 20264 996C A9 00			lda #$00
 20265 996E 8D 87 9C			sta PATTERN0.WIDTH+1
 20266
 20267 				; optimize OK (btm.inc), line = 67
 20268
 20269 9971 A9 18			lda #$18
 20270 9973 8D 88 9C			sta PATTERN0.HEIGHT
 20271 9976 A9 00			lda #$00
 20272 9978 8D 89 9C			sta PATTERN0.HEIGHT+1
 20273
 20274 				; optimize OK (btm.inc), line = 69
 20275
 20276 997B A9 13			lda #$13
 20277 997D 8D 92 9C			sta PATTERN1.OFS
 20278 9980 A9 A6			lda #$A6
 20279 9982 8D 93 9C			sta PATTERN1.OFS+1
 20280 9985 A9 03			lda #$03
 20281 9987 8D 94 9C			sta PATTERN1.OFS+2
 20282 998A A9 00			lda #$00
 20283 998C 8D 95 9C			sta PATTERN1.OFS+3
 20284
 20285 				; optimize OK (btm.inc), line = 70
 20286
 20287 998F A9 0E			lda #$0E
 20288 9991 8D 8E 9C			sta PATTERN1.WIDTH
 20289 9994 A9 00			lda #$00
 20290 9996 8D 8F 9C			sta PATTERN1.WIDTH+1
 20291
 20292 				; optimize OK (btm.inc), line = 71
 20293
 20294 9999 A9 0E			lda #$0E
 20295 999B 8D 90 9C			sta PATTERN1.HEIGHT
 20296 999E A9 00			lda #$00
 20297 99A0 8D 91 9C			sta PATTERN1.HEIGHT+1
 20298
 20299 				; optimize OK (btm.inc), line = 73
 20300
 20301 99A3 A9 D7			lda #$D7
 20302 99A5 8D 9A 9C			sta PATTERN2.OFS
 20303 99A8 A9 A6			lda #$A6
 20304 99AA 8D 9B 9C			sta PATTERN2.OFS+1
 20305 99AD A9 03			lda #$03
 20306 99AF 8D 9C 9C			sta PATTERN2.OFS+2
 20307 99B2 A9 00			lda #$00
 20308 99B4 8D 9D 9C			sta PATTERN2.OFS+3
 20309
 20310 				; optimize OK (btm.inc), line = 74
 20311
 20312 99B7 A9 26			lda #$26
 20313 99B9 8D 96 9C			sta PATTERN2.WIDTH
 20314 99BC A9 00			lda #$00
 20315 99BE 8D 97 9C			sta PATTERN2.WIDTH+1
 20316
 20317 				; optimize OK (btm.inc), line = 75
 20318
 20319 99C1 A9 23			lda #$23
 20320 99C3 8D 98 9C			sta PATTERN2.HEIGHT
 20321 99C6 A9 00			lda #$00
 20322 99C8 8D 99 9C			sta PATTERN2.HEIGHT+1
 20323
 20324 				; optimize OK (btm.inc), line = 77
 20325
 20326 99CB A9 09			lda #$09
 20327 99CD 8D A2 9C			sta PATTERN3.OFS
 20328 99D0 A9 AC			lda #$AC
 20329 99D2 8D A3 9C			sta PATTERN3.OFS+1
 20330 99D5 A9 03			lda #$03
 20331 99D7 8D A4 9C			sta PATTERN3.OFS+2
 20332 99DA A9 00			lda #$00
 20333 99DC 8D A5 9C			sta PATTERN3.OFS+3
 20334
 20335 				; optimize OK (btm.inc), line = 78
 20336
 20337 99DF A9 1C			lda #$1C
 20338 99E1 8D 9E 9C			sta PATTERN3.WIDTH
 20339 99E4 A9 00			lda #$00
 20340 99E6 8D 9F 9C			sta PATTERN3.WIDTH+1
 20341
 20342 				; optimize OK (btm.inc), line = 79
 20343
 20344 99E9 A9 1D			lda #$1D
 20345 99EB 8D A0 9C			sta PATTERN3.HEIGHT
 20346 99EE A9 00			lda #$00
 20347 99F0 8D A1 9C			sta PATTERN3.HEIGHT+1
 20348
 20349 				; optimize OK (btm.inc), line = 81
 20350
 20351 99F3 A9 35			lda #$35
 20352 99F5 8D AA 9C			sta PATTERN4.OFS
 20353 99F8 A9 AF			lda #$AF
 20354 99FA 8D AB 9C			sta PATTERN4.OFS+1
 20355 99FD A9 03			lda #$03
 20356 99FF 8D AC 9C			sta PATTERN4.OFS+2
 20357 9A02 A9 00			lda #$00
 20358 9A04 8D AD 9C			sta PATTERN4.OFS+3
 20359
 20360 				; optimize OK (btm.inc), line = 82
 20361
 20362 9A07 A9 1E			lda #$1E
 20363 9A09 8D A6 9C			sta PATTERN4.WIDTH
 20364 9A0C A9 00			lda #$00
 20365 9A0E 8D A7 9C			sta PATTERN4.WIDTH+1
 20366
 20367 				; optimize OK (btm.inc), line = 83
 20368
 20369 9A11 A9 1E			lda #$1E
 20370 9A13 8D A8 9C			sta PATTERN4.HEIGHT
 20371 9A16 A9 00			lda #$00
 20372 9A18 8D A9 9C			sta PATTERN4.HEIGHT+1
 20373
 20374 				; optimize OK (arkanoid_vbxe.pas), line = 145
 20375
 20376 9A1B A9 01			lda #$01
 20377 9A1D 8D D3 9B			sta MOUS.FIRE
 20378
 20379 				; optimize OK (arkanoid_vbxe.pas), line = 147
 20380
 20381 9A20 A9 20			lda #$20
 20382 9A22 8D B1 9C			sta TOTALWALL
 20383
 20384 				; optimize OK (arkanoid_vbxe.pas), line = 149
 20385
 20386 9A25 A9 50			lda #$50
 20387 9A27 8D C4 9C			sta SCORE.HISCORE
 20388 9A2A A9 C3			lda #$C3
 20389 9A2C 8D C5 9C			sta SCORE.HISCORE+1
 20390 9A2F A9 00			lda #$00
 20391 9A31 8D C6 9C			sta SCORE.HISCORE+2
 20392 9A34 8D C7 9C			sta SCORE.HISCORE+3
 20393
 20394 				; optimize OK (arkanoid_vbxe.pas), line = 152
 20395
 20396 9A37 A9 01			lda #$01
 20397 9A39 8D EF 9C			sta SOUND_ON
 20398
 20399 				; optimize OK (arkanoid_vbxe.pas), line = 153
 20400
 20401 9A3C A9 03			lda #$03
 20402 9A3E 8D D3 9C			sta LV
 20403 9A41 A9 00			lda #$00
 20404 9A43 8D D4 9C			sta LV+1
 20405
 20406 				; --- RepeatUntilProlog
 20407 9A46			l_3B43
 20408
 20409 				; optimize FAIL ('MOUSERESET', arkanoid_vbxe.pas), line = 157
 20410
 20411 9A46 20 27 2B			jsr MOUSERESET
 20412
 20413 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 160
 20414
 20415 9A49 20 08 94			jsr MAINSCREEN
 20416 9A4C AD 95 A2			lda MAINSCREEN.RESULT
 20417 9A4F 8D C8 9C			sta SCORE.PL_NUMB
 20418
 20419 				; optimize OK (arkanoid_vbxe.pas), line = 162
 20420
 20421 9A52 F0 0D			jeq l_3B5A
 20422 9A54 A9 01			lda #$01
 20423 9A56 8D A1 A2			sta START_GAME.PLAYERS
 20424 9A59 A9 00			lda #$00
 20425 9A5B 8D A2 A2			sta START_GAME.PLAYERS+1
 20426 9A5E 20 66 94			jsr START_GAME
 20427 9A61			l_3B5A
 20428
 20429 				; optimize OK (arkanoid_vbxe.pas), line = 164
 20430
 20431 9A61 AD C8 9C			lda SCORE.PL_NUMB
 20432 9A64 C9 01			cmp #$01
 20433 9A66 B0 DE			jcs l_3B43
 20434
 20435 9A68			@exit
 20436 					.ifdef @new
 20437 					lda <@VarData
 20438 					sta :ztmp
 20439 					lda >@VarData
 20440 					ldy #@VarDataSize-1
 20441 					jmp @FreeMem
 20442 					els
 20443 9A68 60				rts						; ret
 20444 					eif
 20445 				.endl
 20446 9A69			l_0022
 20447
 20448 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 172
 20449
 20450 9A69 20 D3 96			jsr INIT_GAME
 20451
 20452 				; ------------------------------------------------------------
 20453
 20454 = 5000			VBXE_OVRADR	= $5000
 20455 = 014A00			VBXE_DATA	= $14A00
 20456 = DC00			LEVELS_WALL	= $DC00
 20457 = 9BC7			adr.MOUS	= DATAORIGIN+$00DE	; [13] RECORD
 20458 9A6C			.var MOUS	= adr.MOUS .word
 20459 = 9BC7			MOUS.X	= DATAORIGIN+$00DE
 20460 = 9BC9			MOUS.Y	= DATAORIGIN+$00E0
 20461 = 9BCB			MOUS.LEFT	= DATAORIGIN+$00E2
 20462 = 9BCD			MOUS.RIGHT	= DATAORIGIN+$00E4
 20463 = 9BCF			MOUS.TOP	= DATAORIGIN+$00E6
 20464 = 9BD1			MOUS.BOTTOM	= DATAORIGIN+$00E8
 20465 = 9BD3			MOUS.FIRE	= DATAORIGIN+$00EA
 20466 = B100			adr.BLT	= $B100
 20467 9A6C			.var BLT	= adr.BLT .word
 20468 = B100			adr.BLT.SRC_ADR	= $B100
 20469 9A6C			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 20470 = B100			BLT.SRC_ADR.BYTE0	= $B100
 20471 = B101			BLT.SRC_ADR.BYTE1	= $B101
 20472 = B102			BLT.SRC_ADR.BYTE2	= $B102
 20473 = B103			BLT.SRC_STEP_Y	= $B103
 20474 = B105			BLT.SRC_STEP_X	= $B105
 20475 = B106			adr.BLT.DST_ADR	= $B106
 20476 9A6C			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 20477 = B106			BLT.DST_ADR.BYTE0	= $B106
 20478 = B107			BLT.DST_ADR.BYTE1	= $B107
 20479 = B108			BLT.DST_ADR.BYTE2	= $B108
 20480 = B109			BLT.DST_STEP_Y	= $B109
 20481 = B10B			BLT.DST_STEP_X	= $B10B
 20482 = B10C			BLT.BLT_WIDTH	= $B10C
 20483 = B10E			BLT.BLT_HEIGHT	= $B10E
 20484 = B10F			BLT.BLT_AND_MASK	= $B10F
 20485 = B110			BLT.BLT_XOR_MASK	= $B110
 20486 = B111			BLT.BLT_COLLISION_MASK	= $B111
 20487 = B112			BLT.BLT_ZOOM	= $B112
 20488 = B113			BLT.PATTERN_FEATURE	= $B113
 20489 = B114			BLT.BLT_CONTROL	= $B114
 20490 = 9BD4			adr.VBXE_RAM	= DATAORIGIN+$00EB	; [8] OBJECT
 20491 9A6C			.var VBXE_RAM	= adr.VBXE_RAM .word
 20492 = 9BD4			VBXE_RAM.POSITION	= DATAORIGIN+$00EB
 20493 = 9BD8			VBXE_RAM.SIZE	= DATAORIGIN+$00EF
 20494 = 5000			VRAM	= $5000
 20495 = 0001			ERR1	= $01
 20496 = 0002			ERR2	= $02
 20497 = 0003			ERR3	= $03
 20498 = 0004			ERR4	= $04
 20499 = 000A			SCRMIN	= $0A
 20500 = 00D8			SCRMAX	= $D8
 20501 = 000C			SCRTOP	= $0C
 20502 = 00C8			SCRBOT	= $C8
 20503 = 0022			VAUS_W	= $22
 20504 = 0004			VAUS_H	= $04
 20505 = 00B8			VAUS_LINE	= $B8
 20506 = 00FF			EMP	= $FF
 20507 = 0005			BALLDIM	= $05
 20508 = 0003			BALLSPOT	= $03
 20509 = 001E			BALLDEV	= $1E
 20510 = 000A			SPEEDFLASH	= $0A
 20511 = 105E			adr.FLASH	= CODEORIGIN+$005E
 20512 9A6C			.var FLASH	= adr.FLASH .word
 20513 = 1069			adr.SCORE_WALL	= CODEORIGIN+$0069
 20514 9A6C			.var SCORE_WALL	= adr.SCORE_WALL .word
 20515 = 107F			adr.EMERG_DEV	= CODEORIGIN+$007F
 20516 9A6C			.var EMERG_DEV	= adr.EMERG_DEV .word
 20517 = 1088			adr.COLORBLOCK	= CODEORIGIN+$0088
 20518 9A6C			.var COLORBLOCK	= adr.COLORBLOCK .word
 20519 = 0001			GRAYDOWN	= $01
 20520 = 0001			STARTWALL	= $01
 20521 = 0064			BALLSPEED	= $64
 20522 = 07D0			MAXSPEED	= $07D0
 20523 = 0064			MAXBRWHIT	= $64
 20524 = 0004			PATNUMBER	= $04
 20525 = 1092			adr.POS_DIGIT	= CODEORIGIN+$0092
 20526 9A6C			.var POS_DIGIT	= adr.POS_DIGIT .word
 20527 = 1096			adr.DIGITS	= CODEORIGIN+$0096
 20528 9A6C			.var DIGITS	= adr.DIGITS .word
 20529 = 10A1			adr.LEVEL	= CODEORIGIN+$00A1
 20530 9A6C			.var LEVEL	= adr.LEVEL .word
 20531 = 0258			SBDIR	= $0258
 20532 = 0003			DEFLEVEL	= $03
 20533 = 012C			LETTER_PROB	= $012C
 20534 = 03E8			LETTER_DROP	= $03E8
 20535 = 0008			LETTER_NUMB	= $08
 20536 = 0008			LETTER_FRM	= $08
 20537 = 0005			LETTER_SBF	= $05
 20538 = 10AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 20539 9A6C			.var LETTER_DIS	= adr.LETTER_DIS .word
 20540 = 00B0			FLUXLEVEL	= $B0
 20541 = 9BF1			adr.BALLDATA	= DATAORIGIN+$0108	; [8] RECORD
 20542 9A6C			.var BALLDATA	= adr.BALLDATA .word
 20543 = 9BF1			BALLDATA.WIDTH	= DATAORIGIN+$0108
 20544 = 9BF3			BALLDATA.HEIGHT	= DATAORIGIN+$010A
 20545 = 9BF5			BALLDATA.OFS	= DATAORIGIN+$010C
 20546 = 9BF9			adr.PLAYSCREEN	= DATAORIGIN+$0110	; [8] RECORD
 20547 9A6C			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 20548 = 9BF9			PLAYSCREEN.WIDTH	= DATAORIGIN+$0110
 20549 = 9BFB			PLAYSCREEN.HEIGHT	= DATAORIGIN+$0112
 20550 = 9BFD			PLAYSCREEN.OFS	= DATAORIGIN+$0114
 20551 = 9C01			adr.PLAYVAUS	= DATAORIGIN+$0118	; [8] RECORD
 20552 9A6C			.var PLAYVAUS	= adr.PLAYVAUS .word
 20553 = 9C01			PLAYVAUS.WIDTH	= DATAORIGIN+$0118
 20554 = 9C03			PLAYVAUS.HEIGHT	= DATAORIGIN+$011A
 20555 = 9C05			PLAYVAUS.OFS	= DATAORIGIN+$011C
 20556 = 9C09			adr.NORMAL	= DATAORIGIN+$0120	; [8] RECORD
 20557 9A6C			.var NORMAL	= adr.NORMAL .word
 20558 = 9C09			NORMAL.WIDTH	= DATAORIGIN+$0120
 20559 = 9C0B			NORMAL.HEIGHT	= DATAORIGIN+$0122
 20560 = 9C0D			NORMAL.OFS	= DATAORIGIN+$0124
 20561 = 9C11			adr.ENLARGED	= DATAORIGIN+$0128	; [8] RECORD
 20562 9A6C			.var ENLARGED	= adr.ENLARGED .word
 20563 = 9C11			ENLARGED.WIDTH	= DATAORIGIN+$0128
 20564 = 9C13			ENLARGED.HEIGHT	= DATAORIGIN+$012A
 20565 = 9C15			ENLARGED.OFS	= DATAORIGIN+$012C
 20566 = 9C19			adr.LASERS	= DATAORIGIN+$0130	; [8] RECORD
 20567 9A6C			.var LASERS	= adr.LASERS .word
 20568 = 9C19			LASERS.WIDTH	= DATAORIGIN+$0130
 20569 = 9C1B			LASERS.HEIGHT	= DATAORIGIN+$0132
 20570 = 9C1D			LASERS.OFS	= DATAORIGIN+$0134
 20571 = 9C21			adr.EXPLOSION	= DATAORIGIN+$0138	; [8] RECORD
 20572 9A6C			.var EXPLOSION	= adr.EXPLOSION .word
 20573 = 9C21			EXPLOSION.WIDTH	= DATAORIGIN+$0138
 20574 = 9C23			EXPLOSION.HEIGHT	= DATAORIGIN+$013A
 20575 = 9C25			EXPLOSION.OFS	= DATAORIGIN+$013C
 20576 = 9C29			adr.NEWVAUS	= DATAORIGIN+$0140	; [8] RECORD
 20577 9A6C			.var NEWVAUS	= adr.NEWVAUS .word
 20578 = 9C29			NEWVAUS.WIDTH	= DATAORIGIN+$0140
 20579 = 9C2B			NEWVAUS.HEIGHT	= DATAORIGIN+$0142
 20580 = 9C2D			NEWVAUS.OFS	= DATAORIGIN+$0144
 20581 = 9C31			adr.PRESENTS	= DATAORIGIN+$0148	; [8] RECORD
 20582 9A6C			.var PRESENTS	= adr.PRESENTS .word
 20583 = 9C31			PRESENTS.WIDTH	= DATAORIGIN+$0148
 20584 = 9C33			PRESENTS.HEIGHT	= DATAORIGIN+$014A
 20585 = 9C35			PRESENTS.OFS	= DATAORIGIN+$014C
 20586 = 9C39			adr.SOUNDFX	= DATAORIGIN+$0150	; [8] RECORD
 20587 9A6C			.var SOUNDFX	= adr.SOUNDFX .word
 20588 = 9C39			SOUNDFX.WIDTH	= DATAORIGIN+$0150
 20589 = 9C3B			SOUNDFX.HEIGHT	= DATAORIGIN+$0152
 20590 = 9C3D			SOUNDFX.OFS	= DATAORIGIN+$0154
 20591 = 9C41			adr.SHINEWALL	= DATAORIGIN+$0158	; [8] RECORD
 20592 9A6C			.var SHINEWALL	= adr.SHINEWALL .word
 20593 = 9C41			SHINEWALL.WIDTH	= DATAORIGIN+$0158
 20594 = 9C43			SHINEWALL.HEIGHT	= DATAORIGIN+$015A
 20595 = 9C45			SHINEWALL.OFS	= DATAORIGIN+$015C
 20596 = 9C49			adr.MINIVAUS	= DATAORIGIN+$0160	; [8] RECORD
 20597 9A6C			.var MINIVAUS	= adr.MINIVAUS .word
 20598 = 9C49			MINIVAUS.WIDTH	= DATAORIGIN+$0160
 20599 = 9C4B			MINIVAUS.HEIGHT	= DATAORIGIN+$0162
 20600 = 9C4D			MINIVAUS.OFS	= DATAORIGIN+$0164
 20601 = 9C51			adr.LEVELSEL	= DATAORIGIN+$0168	; [8] RECORD
 20602 9A6C			.var LEVELSEL	= adr.LEVELSEL .word
 20603 = 9C51			LEVELSEL.WIDTH	= DATAORIGIN+$0168
 20604 = 9C53			LEVELSEL.HEIGHT	= DATAORIGIN+$016A
 20605 = 9C55			LEVELSEL.OFS	= DATAORIGIN+$016C
 20606 = 9C59			adr.LETTERS	= DATAORIGIN+$0170	; [8] RECORD
 20607 9A6C			.var LETTERS	= adr.LETTERS .word
 20608 = 9C59			LETTERS.WIDTH	= DATAORIGIN+$0170
 20609 = 9C5B			LETTERS.HEIGHT	= DATAORIGIN+$0172
 20610 = 9C5D			LETTERS.OFS	= DATAORIGIN+$0174
 20611 = 9C61			adr.SHOOTS	= DATAORIGIN+$0178	; [8] RECORD
 20612 9A6C			.var SHOOTS	= adr.SHOOTS .word
 20613 = 9C61			SHOOTS.WIDTH	= DATAORIGIN+$0178
 20614 = 9C63			SHOOTS.HEIGHT	= DATAORIGIN+$017A
 20615 = 9C65			SHOOTS.OFS	= DATAORIGIN+$017C
 20616 = 9C69			adr.FLUX	= DATAORIGIN+$0180	; [8] RECORD
 20617 9A6C			.var FLUX	= adr.FLUX .word
 20618 = 9C69			FLUX.WIDTH	= DATAORIGIN+$0180
 20619 = 9C6B			FLUX.HEIGHT	= DATAORIGIN+$0182
 20620 = 9C6D			FLUX.OFS	= DATAORIGIN+$0184
 20621 = 9C71			adr.VAUS	= DATAORIGIN+$0188	; [13] RECORD
 20622 9A6C			.var VAUS	= adr.VAUS .word
 20623 = 9C71			VAUS.X	= DATAORIGIN+$0188
 20624 = 9C72			VAUS.Y	= DATAORIGIN+$0189
 20625 = 9C73			VAUS.OLDX	= DATAORIGIN+$018A
 20626 = 9C75			VAUS.OLDY	= DATAORIGIN+$018C
 20627 = 9C77			VAUS.OLDLEN	= DATAORIGIN+$018E
 20628 = 9C79			VAUS.WIDTH	= DATAORIGIN+$0190
 20629 = 9C7A			VAUS.HEIGHT	= DATAORIGIN+$0191
 20630 = 9C7B			VAUS.FLASH	= DATAORIGIN+$0192
 20631 = 9C7C			VAUS.IFLASH	= DATAORIGIN+$0193
 20632 = 9C7D			VAUS.LETTER	= DATAORIGIN+$0194
 20633 = 9C7E			adr.PATTERN	= DATAORIGIN+$0195	; [8] RECORD
 20634 9A6C			.var PATTERN	= adr.PATTERN .word
 20635 = 9C7E			PATTERN.WIDTH	= DATAORIGIN+$0195
 20636 = 9C80			PATTERN.HEIGHT	= DATAORIGIN+$0197
 20637 = 9C82			PATTERN.OFS	= DATAORIGIN+$0199
 20638 = 9C86			adr.PATTERN0	= DATAORIGIN+$019D	; [8] RECORD
 20639 9A6C			.var PATTERN0	= adr.PATTERN0 .word
 20640 = 9C86			PATTERN0.WIDTH	= DATAORIGIN+$019D
 20641 = 9C88			PATTERN0.HEIGHT	= DATAORIGIN+$019F
 20642 = 9C8A			PATTERN0.OFS	= DATAORIGIN+$01A1
 20643 = 9C8E			adr.PATTERN1	= DATAORIGIN+$01A5	; [8] RECORD
 20644 9A6C			.var PATTERN1	= adr.PATTERN1 .word
 20645 = 9C8E			PATTERN1.WIDTH	= DATAORIGIN+$01A5
 20646 = 9C90			PATTERN1.HEIGHT	= DATAORIGIN+$01A7
 20647 = 9C92			PATTERN1.OFS	= DATAORIGIN+$01A9
 20648 = 9C96			adr.PATTERN2	= DATAORIGIN+$01AD	; [8] RECORD
 20649 9A6C			.var PATTERN2	= adr.PATTERN2 .word
 20650 = 9C96			PATTERN2.WIDTH	= DATAORIGIN+$01AD
 20651 = 9C98			PATTERN2.HEIGHT	= DATAORIGIN+$01AF
 20652 = 9C9A			PATTERN2.OFS	= DATAORIGIN+$01B1
 20653 = 9C9E			adr.PATTERN3	= DATAORIGIN+$01B5	; [8] RECORD
 20654 9A6C			.var PATTERN3	= adr.PATTERN3 .word
 20655 = 9C9E			PATTERN3.WIDTH	= DATAORIGIN+$01B5
 20656 = 9CA0			PATTERN3.HEIGHT	= DATAORIGIN+$01B7
 20657 = 9CA2			PATTERN3.OFS	= DATAORIGIN+$01B9
 20658 = 9CA6			adr.PATTERN4	= DATAORIGIN+$01BD	; [8] RECORD
 20659 9A6C			.var PATTERN4	= adr.PATTERN4 .word
 20660 = 9CA6			PATTERN4.WIDTH	= DATAORIGIN+$01BD
 20661 = 9CA8			PATTERN4.HEIGHT	= DATAORIGIN+$01BF
 20662 = 9CAA			PATTERN4.OFS	= DATAORIGIN+$01C1
 20663 = 9CAE			STATUS	= DATAORIGIN+$01C5
 20664 = 9CAF			SUCCESS	= DATAORIGIN+$01C6
 20665 = 9CB0			REMAIN_BLK	= DATAORIGIN+$01C7
 20666 = 9CB1			TOTALWALL	= DATAORIGIN+$01C8
 20667 = 9CB2			adr.SCORE	= DATAORIGIN+$01C9	; [27] RECORD
 20668 9A6C			.var SCORE	= adr.SCORE .word
 20669 = 9CB2			adr.SCORE.PLAYER	= [DATAORIGIN+$01C9] .array [3] .dword
 20670 9A6C			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 20671 = 9CBE			adr.SCORE.WALL_N	= [DATAORIGIN+$01D5] .array [3]
 20672 9A6C			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 20673 = 9CC1			adr.SCORE.LIVES	= [DATAORIGIN+$01D8] .array [3]
 20674 9A6C			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 20675 = 9CC4			SCORE.HISCORE	= DATAORIGIN+$01DB
 20676 = 9CC8			SCORE.PL_NUMB	= DATAORIGIN+$01DF
 20677 = 9CC9			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01E0] .array [3]
 20678 9A6C			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 20679 = 9CCC			SCORE.ABORTPLAY	= DATAORIGIN+$01E3
 20680 = 9CCD			CUR_PLAYER	= DATAORIGIN+$01E4
 20681 = 9CCE			adr.SHINEREC	= DATAORIGIN+$01E5	; [5] RECORD
 20682 9A6C			.var SHINEREC	= adr.SHINEREC .word
 20683 = 9CCE			SHINEREC.XB	= DATAORIGIN+$01E5
 20684 = 9CCF			SHINEREC.YB	= DATAORIGIN+$01E6
 20685 = 9CD0			SHINEREC.FRAME	= DATAORIGIN+$01E7
 20686 = 9CD1			SHINEREC.BLOCK	= DATAORIGIN+$01E8
 20687 = 9CD2			SHINEREC.ACTIVE	= DATAORIGIN+$01E9
 20688 = 9CD3			LV	= DATAORIGIN+$01EA
 20689 = 9CD5			TRAINER	= DATAORIGIN+$01EC
 20690 = 9CD6			adr.LETT	= DATAORIGIN+$01ED	; [17] RECORD
 20691 9A6C			.var LETT	= adr.LETT .word
 20692 = 9CD6			LETT.X	= DATAORIGIN+$01ED
 20693 = 9CD7			LETT.Y	= DATAORIGIN+$01EE
 20694 = 9CD8			LETT.TYP	= DATAORIGIN+$01EF
 20695 = 9CDA			LETT.FRAME	= DATAORIGIN+$01F1
 20696 = 9CDB			LETT.SUBFRAME	= DATAORIGIN+$01F2
 20697 = 9CDC			LETT.ACTIVE	= DATAORIGIN+$01F3
 20698 = 9CDD			LETT.INCOMING	= DATAORIGIN+$01F4
 20699 = 9CDF			LETT.NEXTX	= DATAORIGIN+$01F6
 20700 = 9CE1			LETT.NEXTY	= DATAORIGIN+$01F8
 20701 = 9CE3			LETT.NEXTTYPE	= DATAORIGIN+$01FA
 20702 = 9CE5			LETT.LAST	= DATAORIGIN+$01FC
 20703 = 9CE7			adr.FIRE	= DATAORIGIN+$01FE	; [5] RECORD
 20704 9A6C			.var FIRE	= adr.FIRE .word
 20705 = 9CE7			FIRE.X	= DATAORIGIN+$01FE
 20706 = 9CE8			FIRE.Y	= DATAORIGIN+$01FF
 20707 = 9CE9			FIRE.SHOT	= DATAORIGIN+$0200
 20708 = 9CEA			FIRE.AVL	= DATAORIGIN+$0201
 20709 = 9CEB			FIRE.NW	= DATAORIGIN+$0202
 20710 = 9CEC			BALLS_IN_PLAY	= DATAORIGIN+$0203
 20711 = 9CED			SCRFLUX	= DATAORIGIN+$0204
 20712 = 9CEE			SCRFLUXCNT	= DATAORIGIN+$0205
 20713 = 9CEF			SOUND_ON	= DATAORIGIN+$0206
 20714 = 9CF0			HLP	= DATAORIGIN+$0207
 20715 = 9CF2			adr.DEF_PAL	= [DATAORIGIN+$0209] .array [768]
 20716 9A6C			.var DEF_PAL	= adr.DEF_PAL .word
 20717 = C000			adr.ROW	= $C000
 20718 9A6C			.var ROW	= adr.ROW .word
 20719 = C200			adr.TMP	= $C200
 20720 9A6C			.var TMP	= adr.TMP .word
 20721 = C300			adr.MODY	= $C300
 20722 9A6C			.var MODY	= adr.MODY .word
 20723 = C400			adr.MODX	= $C400
 20724 9A6C			.var MODX	= adr.MODX .word
 20725 = D800			adr.WALL_P	= $D800
 20726 9A6C			.var WALL_P	= adr.WALL_P .word
 20727 = DB00			adr.WALL	= $DB00
 20728 9A6C			.var WALL	= adr.WALL .word
 20729 = DC00			adr.ALL_WALLS	= $DC00
 20730 9A6C			.var ALL_WALLS	= adr.ALL_WALLS .word
 20731 9A6C			@exit
 20732
 20733 9A6C A2 00		@halt	ldx #$00
 20734 9A6E 9A				txs
 20735
 20736 					.ifdef MAIN.@DEFINES.ROMOFF
 20737 9A6F EE 01 D3			inc portb
 20738 					.fi
 20739
 20740 9A72 A0 01			ldy #$01
 20741
 20742 9A74 60				rts
 20743
 20744 				; ------------------------------------------------------------
 20745
 20746 9A75			.local	@DEFINES
 20747 9A75			ATARI
 20748 9A75			CPU_6502
 20749 9A75			ROMOFF
 20750 				.endl
 20751
 20752 9A75			.local	@RESOURCE
 20753 				.endl
 20754
 20755 = 9A75 C7 9B		MOUS
 20755 = 9A77 00 B1		BLT
 20755 = 9A79 00 B1		BLT.SRC_ADR
 20755 = 9A7B 06 B1		BLT.DST_ADR
 20755 = 9A7D D4 9B		VBXE_RAM
 20755 = 9A7F 5E 10		FLASH
 20755 = 9A81 69 10		SCORE_WALL
 20755 = 9A83 7F 10		EMERG_DEV
 20755 = 9A85 88 10		COLORBLOCK
 20755 = 9A87 92 10		POS_DIGIT
 20755 = 9A89 96 10		DIGITS
 20755 = 9A8B A1 10		LEVEL
 20755 = 9A8D AD 10		LETTER_DIS
 20755 = 9A8F F1 9B		BALLDATA
 20755 = 9A91 F9 9B		PLAYSCREEN
 20755 = 9A93 01 9C		PLAYVAUS
 20755 = 9A95 09 9C		NORMAL
 20755 = 9A97 11 9C		ENLARGED
 20755 = 9A99 19 9C		LASERS
 20755 = 9A9B 21 9C		EXPLOSION
 20755 = 9A9D 29 9C		NEWVAUS
 20755 = 9A9F 31 9C		PRESENTS
 20755 = 9AA1 39 9C		SOUNDFX
 20755 = 9AA3 41 9C		SHINEWALL
 20755 = 9AA5 49 9C		MINIVAUS
 20755 = 9AA7 51 9C		LEVELSEL
 20755 = 9AA9 59 9C		LETTERS
 20755 = 9AAB 61 9C		SHOOTS
 20755 = 9AAD 69 9C		FLUX
 20755 = 9AAF 71 9C		VAUS
 20755 = 9AB1 7E 9C		PATTERN
 20755 = 9AB3 86 9C		PATTERN0
 20755 = 9AB5 8E 9C		PATTERN1
 20755 = 9AB7 96 9C		PATTERN2
 20755 = 9AB9 9E 9C		PATTERN3
 20755 = 9ABB A6 9C		PATTERN4
 20755 = 9ABD B2 9C		SCORE
 20755 = 9ABF B2 9C		SCORE.PLAYER
 20755 = 9AC1 BE 9C		SCORE.WALL_N
 20755 = 9AC3 C1 9C		SCORE.LIVES
 20755 = 9AC5 C9 9C		SCORE.ROUNDSEL
 20755 = 9AC7 CE 9C		SHINEREC
 20755 = 9AC9 D6 9C		LETT
 20755 = 9ACB E7 9C		FIRE
 20755 = 9ACD F2 9C		DEF_PAL
 20755 = 9ACF 00 C0		ROW
 20755 = 9AD1 00 C2		TMP
 20755 = 9AD3 00 C3		MODY
 20755 = 9AD5 00 C4		MODX
 20755 = 9AD7 00 D8		WALL_P
 20755 = 9AD9 00 DB		WALL
 20755 = 9ADB 00 DC		ALL_WALLS
 20755 				.endl							; MAIN
 20756
 20757 				; ------------------------------------------------------------
 20758 				; ------------------------------------------------------------
 20759
 20760 				.macro	UNITINITIALIZATION
 20761 				
 20762 					.ifdef MAIN.SYSTEM.@UnitInit
 20763 					jsr MAIN.SYSTEM.@UnitInit
 20764 					.fi
 20765 				
 20766 					.ifdef MAIN.ATARI.@UnitInit
 20767 					jsr MAIN.ATARI.@UnitInit
 20768 					.fi
 20769 				
 20770 					.ifdef MAIN.CRT.@UnitInit
 20771 					jsr MAIN.CRT.@UnitInit
 20772 					.fi
 20773 				
 20774 					.ifdef MAIN.TYPES.@UnitInit
 20775 					jsr MAIN.TYPES.@UnitInit
 20776 					.fi
 20777 				
 20778 					.ifdef MAIN.GRAPH.@UnitInit
 20779 					jsr MAIN.GRAPH.@UnitInit
 20780 					.fi
 20781 				
 20782 					.ifdef MAIN.VBXE.@UnitInit
 20783 					jsr MAIN.VBXE.@UnitInit
 20784 					.fi
 20785 				
 20786 					.ifdef MAIN.JOYSTICK.@UnitInit
 20787 					jsr MAIN.JOYSTICK.@UnitInit
 20788 					.fi
 20789 				.endm
 20790
 20791 				; ------------------------------------------------------------
 20792
 20793 					ift .SIZEOF(MAIN.SYSTEM) > 0
 20794 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 20794 				SYSTEM: $1B29..$2681
 20795 					eif
 20796
 20797 					ift .SIZEOF(MAIN.ATARI) > 0
 20798 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 20799 					eif
 20800
 20801 					ift .SIZEOF(MAIN.CRT) > 0
 20802 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 20803 					eif
 20804
 20805 					ift .SIZEOF(MAIN.TYPES) > 0
 20806 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 20807 					eif
 20808
 20809 					ift .SIZEOF(MAIN.GRAPH) > 0
 20810 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 20810 				GRAPH: $2682..$2683
 20811 					eif
 20812
 20813 					ift .SIZEOF(MAIN.VBXE) > 0
 20814 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 20814 				VBXE: $2684..$2B1B
 20815 					eif
 20816
 20817 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 20818 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 20818 				JOYSTICK: $2B1C..$2B23
 20819 					eif
 20820
 20821 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 20821 				CODE: $1000..$9A74
 20822
 20823 					ift .SIZEOF(MAIN.@RESOURCE)>0
 20824 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 20825 					eif
 20826
 20827 9ADD			@end
 20828
 20829 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 20829 				VARS: $9A75..$9ADC
 20830
 20831 				; ------------------------------------------------------------
 20832
 20833 = 9ADD				?adr = *
 20834 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 20835 = 9AE9				?adr = ?old_adr
 20836 					eif
 20837
 20838 					org ?adr
 20839 = 9AE9				?old_adr = *
 20840
 20841 9AE9			DATAORIGIN
 20842 9AE9-9B4A> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20843 9B01 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20844 9B19 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 20845 9B31 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $27 $00 $00
 20846 9B49 00 17		.by  $00 $17
 20847
 20848 = 0062			VARINITSIZE	= *-DATAORIGIN
 20849 = 07BB			VARDATASIZE	= 1979
 20850
 20851 = A2A4			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 20852
 20853 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 20853 				DATA: $9AE9..$A2A4
 20854
 20855 					ert DATAORIGIN<@end,'DATA memory overlap'
 20856
 20857 02E0-02E1> 9C 1A			run START
 20858
 20859 				; ------------------------------------------------------------
 20860
 20861 				.macro	STATICDATA
 20862 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 20863 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 20864 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 20865 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 20866 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 20867 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 20868 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 20869 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 20870 				.endm
 20871
 20872 					end
