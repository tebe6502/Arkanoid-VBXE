mads 2.1.8 build 10 (6 Jul 25)
D:\!Delphi\Arkanoid\vbxe\arkanoid_vbxe.a65 -hm -xli:d:\!Delphi\MadPascal\base 
Source: arkanoid_vbxe.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.7.5 [2025/08/28] for MOS 6502 CPU
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10 = 009B			EOL		= $9B
    11 = 0400			__BUFFER	= $0400
    12 = 0400			@BUF		= __BUFFER
    13
    14 				; ------------------------------------------------------------
    15
    16 					org $80
    17
    18 				zpage
    19
    20 				.if .def(@vbxe_detect)
    21 = 0080			fxptr	.ds 2						; VBXE pointer
    22 				.fi
    23
    24 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    25 				psptr	.ds 2						; PROGRAMSTACK Pointer
    26 				.fi
    27
    28 = 0082			bp	.ds 2
    29 = 0084			bp2	.ds 2
    30 = 0083			bp3	= bp+1
    31
    32 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    33 = 008A			edx	.ds 4
    34 = 008E			ecx	.ds 4
    35
    36 				TMP
    37 				ztmp
    38 = 0092			ztmp8	.ds 1
    39 = 0093			ztmp9	.ds 1
    40 = 0094			ztmp10	.ds 1
    41 = 0095			ztmp11	.ds 1
    42
    43 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    44 				zpend
    45
    46 				; ------------------------------------------------------------
    47
    48 = 0086			ax	= eax
    49 = 0086			al	= eax
    50 = 0087			ah	= eax+1
    51
    52 = 008E			cx	= ecx
    53 = 008E			cl	= ecx
    54 = 008F			ch	= ecx+1
    55
    56 = 008A			dx	= edx
    57 = 008A			dl	= edx
    58 = 008B			dh	= edx+1
    59
    60 					org eax
    61
    62 = 0086			FP1MAN0	.ds 1
    63 = 0087			FP1MAN1	.ds 1
    64 = 0088			FP1MAN2	.ds 1
    65 = 0089			FP1MAN3	.ds 1
    66
    67 					org edx
    68
    69 = 008A			FP2MAN0	.ds 1
    70 = 008B			FP2MAN1	.ds 1
    71 = 008C			FP2MAN2	.ds 1
    72 = 008D			FP2MAN3	.ds 1
    73
    74 					org ecx
    75
    76 = 008E			FPMAN0	.ds 1
    77 = 008F			FPMAN1	.ds 1
    78 = 0090			FPMAN2	.ds 1
    79 = 0091			FPMAN3	.ds 1
    80
    81 					org ztmp8
    82
    83 = 0092			FP1SGN	.ds 1
    84 = 0093			FP1EXP	.ds 1
    85
    86 					org ztmp10
    87
    88 = 0094			FP2SGN	.ds 1
    89 = 0095			FP2EXP	.ds 1
    90
    91 					org bp2
    92
    93 = 0084			FPSGN	.ds 1
    94 = 0085			FPEXP	.ds 1
    95
    96 					.ifdef MAIN.@DEFINES.BASICOFF
    97 					org CODEORIGIN
    98 					icl 'atari\basicoff.asm'
    99 					ini CODEORIGIN
   100 					.fi
   101
   102 					.ifdef MAIN.@DEFINES.S_VBXE
   103 					opt h-
   104 					ins 'atari\s_vbxe\sdxld2.obx'
   105 					opt h+
   106 					.fi
   107
   108 					org CODEORIGIN
   109
   110 				.local	MAIN.@RESOURCE
   111 				.endl
   112
   113 				.local	RESOURCE
   114 					icl 'atari\resource.asm'
Source: resource.asm
     1
  1539 					opt l+
   115 = 0000				?EXTDETECT = 0
   116 = 0000				?VBXDETECT = 0
   117
   118 20BB				RCDATA 'walls.dat' adr.ALL_WALLS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 2100			len = .filesize('walls.dat')-0
     8 20BB				org RESORIGIN
    10 20BB 20 87 20		mcpy	jsr sys.off
    12 20BE A9 DC 85 8A A9 20 +  MWA #DATA EDX
    12 20C6 A9 00 85 8E A9 DC +  MWA #MAIN.ADR.ALL_WALLS ECX
    12 20CE A9 00 85 86 A9 21 +  MWA #LEN EAX
    12 20D6 20 2B 20		 JSR RESOURCE.MEMCPY
    14 20D9 4C AB 20			jmp sys.on
    16 20DC 00 00 00 00 00 00 + data	ins 'walls.dat',0
    20 					.print '$R RCDATA  ',main.ADR.ALL_WALLS,'..',main.ADR.ALL_WALLS+len-1," 'walls.dat'"
    20 				$R RCDATA  $DC00..$FCFF 'walls.dat'
    22 02E2-02E3> BB 20			ini mcpy
Source: arkanoid_vbxe.a65
   119 41DC				XBMP 'btm.bmp' VBXE_DATA 0 1 0 0 0 0 0 0
Macro: RESOURCE.XBMP [Source: resource.asm]
     2 = 0036			he	= .sizeof(s@bmp)
     4 41DC				.get 'btm.bmp',0,he
     9 = 0140			?bw	= .dget[s@bmp.biwidth]
    10 = 01EE			?bh	= .dget[s@bmp.biheight]
    20 41DC				org RESORIGIN
    22 20BB			lbmp
    25 20BB-2552> 20 00 20		jsr vbxe_detect
    26 20BE 90 4B			bcc ok
    28 20C0 A0 20		 LDY> NOTVBXE
    28 20C2 A9 DF		 LDA< NOTVBXE
    28 20C4 20 6C 20		 JSR RESOURCE.@PRINT
    29 20C7 A0 20		 LDY> _EOL
    29 20C9 A9 F0		 LDA< _EOL
    29 20CB 20 6C 20		 JSR RESOURCE.@PRINT
    30 20CE A0 20		 LDY> ANYKEY
    30 20D0 A9 F1		 LDA< ANYKEY
    30 20D2 20 6C 20		 JSR RESOURCE.@PRINT
    32 20D5 AD 0F D2		keypres	lda $d20f
    33 20D8 29 04			and #4
    34 20DA D0 F9			bne keypres
    36 20DC 68				pla
    37 20DD 68				pla
    38 20DE 60				rts
    40 20DF 56 42 58 45 20 6E + notVBXE	dta c'VBXE not detected'
    41 20F0 9B			_eol	dta $9b
    42 20F1 50 72 65 73 73 20 + anyKEY	dta c'Press any key to continue',$9b
    46 = 0001				.def ?VBXDETECT=1
    48 210B			ok	fxs FX_MEMC #%1000+$b0
Macro: RESOURCE.FXS [Source: vbxe.hea]
     2 210B A9 B8		        lda     #%1000+$B0
     3 210D A0 5E		        ldy     #FX_MEMC
     4 210F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2111 A9 01		        lda     #1
     3 2113 A0 45		        ldy     #FX_PSEL
     4 2115 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 2117 A9 00		        lda     #0
     3 2119 A0 44		        ldy     #FX_CSEL
     4 211B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    53 211D A2 00			ldx #0
    55 211F 20 47 21		paloop	jsr pal
    56 2122 85 92			sta ztmp
    57 2124 20 47 21			jsr pal
    58 2127 85 93			sta ztmp+1
    59 2129 20 47 21			jsr pal
    60 212C 85 94			sta ztmp+2
    61 212E 20 47 21			jsr pal
    63 2131 A5 94			lda ztmp+2
     2 2133 A0 46		        ldy     #FX_CR
     3 2135 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    66 2137 A5 93			lda ztmp+1
     2 2139 A0 47		        ldy     #FX_CG
     3 213B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    69 213D A5 92			lda ztmp
     2 213F A0 48		        ldy     #FX_CB
     3 2141 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    72 2143 E8				inx
    73 2144 D0 D9			bne paloop
    75 2146 60				rts
    77 2147 AD 53 21		pal	lda cpal
    78 = 2148			paladr	equ *-2
    79 214A EE 48 21 D0 03 EE + 	inw paladr
    80 2152 60				rts
    82 2153 00 00 00 00 7E 7E + cpal	ins 'btm.bmp',he,1024
    84 02E2-02E3> BB 20			ini lbmp
    87 = 026980			ln	= .filesize('btm.bmp')-he-1024
    88 = 0015			?bnk	= main.VBXE_DATA/$1000
    89 = 0001			?cnt	= 1
    91 2553				org RESORIGIN
     2 20BB-20C1> A9 95		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
    93 20C1 60				rts
    94 02E2-02E3> BB 20			ini RESORIGIN
    96 20C2				org main.VBXE_DATA%$1000+$B000
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0002				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0016				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 96		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0003				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0004				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0005				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0006				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0007				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0008				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0009				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 000F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0017				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 97		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0010				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0011				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0012				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0013				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0014				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0015				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0016				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0017				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0018				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0019				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0018				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 98		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 001D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 001F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0020				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0021				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0022				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0023				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0024				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0025				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0026				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0027				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0028				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0019				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 99		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0029				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 002F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0030				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0031				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0032				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0033				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0034				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0035				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9A		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0036				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0037				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0038				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0039				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 003F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0041				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0042				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 001B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9B		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0043				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0044				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0045				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0046				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0047				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0048				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0049				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 004F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 001C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9C		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0050				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0051				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0052				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0053				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0054				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0055				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0056				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0057				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0058				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0059				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 001D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9D		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 005D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 005F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0060				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0061				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0062				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0063				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0064				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0065				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0066				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0067				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0068				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 001E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9E		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0069				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 006F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0070				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0071				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0072				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0073				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0074				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0075				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 001F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 9F		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0076				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0077				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0078				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0079				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 007F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0081				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0082				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0020				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0083				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0084				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0085				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0086				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0087				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0088				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0089				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 008F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0021				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0090				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0091				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0092				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0093				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0094				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0095				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0096				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0097				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0098				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0099				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0022				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 009D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 009F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0023				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0024				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0025				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0026				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0027				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0028				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00EF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0029				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 A9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 00F6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00F9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00FF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0101				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0102				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0103				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0104				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0105				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0106				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0107				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0108				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0109				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 010F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 002B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0110				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0111				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0112				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0113				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0114				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0115				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0116				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0117				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0118				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0119				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 002C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 011D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 011F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0120				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0121				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0122				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0123				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0124				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0125				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0126				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0127				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0128				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 002D				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AD		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0129				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 012F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0130				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0131				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0132				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0133				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0134				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0135				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 002E				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AE		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0136				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0137				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0138				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0139				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 013F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0141				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0142				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 002F				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 AF		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0143				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0144				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0145				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0146				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0147				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0148				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0149				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 014F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0030				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B0		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0150				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0151				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0152				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0153				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0154				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0155				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0156				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0157				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0158				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0159				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0031				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B1		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 015D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 015F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0160				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0161				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0162				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0163				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0164				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0165				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0166				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0167				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0168				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0032				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B2		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0169				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016A				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016B				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016C				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016D				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016E				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 016F				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0170				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0171				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0172				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0173				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0174				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0175				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0033				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B3		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0176				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0177				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0178				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0179				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017A				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017B				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017C				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017D				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017E				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 017F				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0180				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0181				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0182				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0034				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B4		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0183				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0184				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0185				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0186				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0187				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0188				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0189				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018A				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018B				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018C				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018D				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018E				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 018F				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 0035				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B5		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 0190				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0191				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0192				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0193				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0194				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0195				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0196				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0197				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0198				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0199				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019A				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019B				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019C				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 0036				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B6		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 019D				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019E				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 019F				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01A8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 0037				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B7		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01A9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AD				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01AF				?CNT++
    99 B780				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B0				?CNT++
    99 B8C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B1				?CNT++
    99 BA00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B2				?CNT++
    99 BB40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B3				?CNT++
    99 BC80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B4				?CNT++
    99 BDC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B5				?CNT++
    99 BF00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0100				?TMP = ?BW-(*+?BW)%$C000
    99 = 0038				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B8		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01B6				?CNT++
    99 B040				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B7				?CNT++
    99 B180				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B8				?CNT++
    99 B2C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01B9				?CNT++
    99 B400				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BA				?CNT++
    99 B540				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BB				?CNT++
    99 B680				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BC				?CNT++
    99 B7C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BD				?CNT++
    99 B900				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BE				?CNT++
    99 BA40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01BF				?CNT++
    99 BB80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C0				?CNT++
    99 BCC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C1				?CNT++
    99 BE00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C2				?CNT++
    99 BF40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 00C0				?TMP = ?BW-(*+?BW)%$C000
    99 = 0039				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 B9		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01C3				?CNT++
    99 B080				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C4				?CNT++
    99 B1C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C5				?CNT++
    99 B300				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C6				?CNT++
    99 B440				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C7				?CNT++
    99 B580				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C8				?CNT++
    99 B6C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01C9				?CNT++
    99 B800				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CA				?CNT++
    99 B940				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CB				?CNT++
    99 BA80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CC				?CNT++
    99 BBC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CD				?CNT++
    99 BD00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CE				?CNT++
    99 BE40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01CF				?CNT++
    99 BF80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0080				?TMP = ?BW-(*+?BW)%$C000
    99 = 003A				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BA		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01D0				?CNT++
    99 B0C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D1				?CNT++
    99 B200				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D2				?CNT++
    99 B340				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D3				?CNT++
    99 B480				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D4				?CNT++
    99 B5C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D5				?CNT++
    99 B700				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D6				?CNT++
    99 B840				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D7				?CNT++
    99 B980				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D8				?CNT++
    99 BAC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01D9				?CNT++
    99 BC00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DA				?CNT++
    99 BD40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DB				?CNT++
    99 BE80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DC				?CNT++
    99 BFC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0040				?TMP = ?BW-(*+?BW)%$C000
    99 = 003B				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BB		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01DD				?CNT++
    99 B100				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DE				?CNT++
    99 B240				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01DF				?CNT++
    99 B380				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E0				?CNT++
    99 B4C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E1				?CNT++
    99 B600				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E2				?CNT++
    99 B740				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E3				?CNT++
    99 B880				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E4				?CNT++
    99 B9C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E5				?CNT++
    99 BB00				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E6				?CNT++
    99 BC40				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E7				?CNT++
    99 BD80				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01E8				?CNT++
    99 BEC0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 0140				?TMP = ?BW-(*+?BW)%$C000
    99 = 003C				?BNK++
    99 C000				ORG RESORIGIN
     2 20BB-20C1> A9 BC		        lda     #?BNK+$80
     3 20BD A0 5F		        ldy     #FX_MEMS
     4 20BF 91 80		        sta     (fxptr),y
    99 20C1 60				RTS
    99 02E2-02E3> BB 20			INI RESORIGIN
    99 20C2				ORG $B000
    99 = 01E9				?CNT++
    99 B000				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EA				?CNT++
    99 B140				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EB				?CNT++
    99 B280				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EC				?CNT++
    99 B3C0				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01ED				?CNT++
    99 B500				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EE				?CNT++
    99 B640				.XGET 'btm.bmp'+0,-?BW*?CNT,?BW
    99 = 01EF				?CNT++
   121 B780				org RESORIGIN
     2 20BB-20C5> A9 00		        lda     #0
     3 20BD A0 5E		        ldy     #FX_MEMC
     4 20BF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
     2 20C1 A0 5F		        ldy     #FX_MEMS
     3 20C3 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
   124 20C5 60				rts
   125 02E2-02E3> BB 20			ini RESORIGIN
   127 					.print '$R XBMP    ',main.VBXE_DATA,'..',main.VBXE_DATA+ln-1," 'btm.bmp'",' width: ',?bw,' height: ',?bh,' palsel: ',1,' colsel: ',0
   127 				$R XBMP    $015E00..$03C77F 'btm.bmp' width: $0140 height: $01EE palsel: $0001 colsel: $0000
Source: arkanoid_vbxe.a65
   120 				.endl
   121
   122 				; ------------------------------------------------------------
   123
   124 20C6				org CODEORIGIN
   125
   126 2000				STATICDATA
Macro: STATICDATA [Source: arkanoid_vbxe.a65]
     1 2000-9E6F> 11 56 42 58 + .by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
     2 2018 50 61 75 73 65 64 + .by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
     3 2030 00 00 AA 00 AA 00 + .by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
     4 2048 55 00 55 FF FF 00 + .by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
     5 2060 D3 D2 D1 D0 CF CE + .by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
     6 2078 00 FA 00 F4 01 E8 + .by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
     7 2090 CC CB 00 3C 5D 80 + .by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
     8 20A8 00 3C 00 23 00 00 + .by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
Source: arkanoid_vbxe.a65
   127
   128 				; ------------------------------------------------------------
   129
   130 20B5			RTLIB
   131 20B5				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    64 					opt l+
   132
   133 				.print 'ZPAGE: ',zpage,'..',zpend-1
   133 				ZPAGE: $0080..$00D5
   134
   135 				.print 'RTBUF: ',@buf,'..',@buf+255
   135 				RTBUF: $0400..$04FF
   136
   137 				.print 'RTLIB: ',RTLIB,'..',*-1
   137 				RTLIB: $20B5..$2A2E
   138
   139 				; ------------------------------------------------------------
   140
   141 2A2F			START
   142 2A2F BA				tsx
   143 2A30 8E 02 9E			stx MAIN.@halt+1
   144
   145 					.ifdef MAIN.@DEFINES.ROMOFF
   146 2A33				icl 'atari\romoff.asm'
Source: romoff.asm
     1
     2 				// http://atariki.krap.pl/index.php/Programowanie:_U%C5%BCycie_OS-a_przy_wy%C5%82%C4%85czonym_ROM-ie
     3
     4 2A33			.local	rominit
     5
     6 2A33 78			        sei
     7 2A34 A9 00		        lda #%00000000
     8 2A36 8D 0E D4		        sta NMIEN       ;$D40E
     9 2A39 A9 FE		        lda #%11111110
    10 2A3B 8D 01 D3		        sta PORTB       ;$D301
    11
    12 				; Wprowadzona zmiana pozwala wyłączyć z poziomu kodu Pascala, kopiowanie czcionek z pamięci ROM do RAM przy wyłączonym ROMie
    13 				; Proces ten (niefortunnie) powoduje nadpisanie danych w obszarze $E000..$E3FF, gdy w zasobach umieścimi dane, które
    14 				; w ten obszar są wczytywane. Za pomocą definicji '{$DEFINE NOROMFONT}` można wyłączyć przerzut danych czcionek z ROM do RAMu,
    15 				; co pozwala zachować, wczytywane zasoby.
    16
    17 				.ifndef MAIN.@DEFINES.NOROMFONT
    18 					ldx #3
    19 					ldy #0
    20 				mv	inc portb
    21 				afnt0	lda $e000,y
    22 					dec portb
    23 				afnt1	sta $e000,y
    24 					iny
    25 					bne mv
    26 					inc afnt0+2
    27 					inc afnt1+2
    28 					dex
    29 					bpl mv
    30 				.endif
    31
    32 2A3E A2 5B		        ldx #<nmiint
    33 2A40 A0 2A		        ldy #>nmiint
    34 2A42 8E FA FF		        stx NMIVEC      ;$FFFA
    35 2A45 8C FB FF		        sty NMIVEC+1
    36
    37 2A48 A2 65		        ldx #<irqint
    38 2A4A A0 2A		        ldy #>irqint
    39 2A4C 8E FE FF		        stx IRQVEC      ;$FFFE
    40 2A4F 8C FF FF		        sty IRQVEC+1
    41
    42 2A52 A9 40		        lda #%01000000
    43 2A54 8D 0E D4		        sta NMIEN       ;$D40E
    44 2A57 58			        cli
    45
    46 2A58 4C 86 2A			jmp skp
    47
    48
    49 2A5B 2C 0F D4		nmiint  bit NMIST        ;$D40F
    50 2A5E 10 03		        spl
    51 2A60 6C 00 02		        jmp (VDSLST)     ;$0200
    52
    53 2A63 38			        sec
    54 2A64 24			        .byte $24        ;BIT $18
    55
    56 2A65 18			irqint  clc
    57
    58 				        ;wlaczenie OS ROM
    59
    60 2A66 EE 01 D3		        inc PORTB       ;$D301
    61
    62 2A69 48			        pha
    63 2A6A 8A			        txa
    64 2A6B 48			        pha
    65 2A6C BA			        tsx
    66
    67 				        ;odlozenie na stos danych dla powrotu z przerwania (RTI)
    68
    69 2A6D A9 2A		        lda #>iret      ;adres procedury iret
    70 2A6F 48			        pha
    71 2A70 A9 7F		        lda #<iret
    72 2A72 48			        pha
    73 2A73 BD 03 01		        lda $103,x      ;skopiowanie wartosci rejestru stanu procesora
    74 2A76 48			        pha
    75
    76 				        ;skok przez odpowiedni wektor przerwania
    77
    78 2A77 90 03		        scc
    79 2A79 6C FA FF		        jmp (NMIVEC)    ;$FFFA
    80 2A7C 6C FE FF		        jmp (IRQVEC)    ;$FFFE
    81
    82 2A7F 68			iret	pla
    83 2A80 AA				tax
    84 2A81 68				pla
    85
    86 				        ;wylaczenie OS ROM
    87
    88 2A82 CE 01 D3		        dec PORTB       ;$D301
    89 2A85 40			        rti
    90
    91 2A86			skp
    92
    93 				.endl
   147 					.fi
   148
   149 = 043B			VLEN	= VARDATASIZE-VARINITSIZE
   150 = 9EDF			VADR	= DATAORIGIN+VARINITSIZE
   151
   152 					ift (VADR > $BFFF) && .not(.def MAIN.@DEFINES.ROMOFF)
   153 					ert 'Invalid memory address range ',VADR
   154 					eif
   155
   156 					ift (VLEN > 0) && (VLEN <= 256)
   157 					ldx #256-VLEN
   158 					lda #$00
   159 					sta:rne VADR+VLEN-256,x+
   160 					eli VLEN>256
   161 2A86				m@init
Macro: M@INIT [Source: macros.asm]
     2 2A86 A0 DF			ldy <VADR
     3 2A88 A2 9E			ldx >VADR
     5 2A8A A9 00			lda #$00
     6 2A8C F0 07			beq skp_
     8 2A8E 99 00 10		clr	sta adr: $1000,y
    10 2A91 C8				iny
    11 2A92 D0 04			bne skp
    12 2A94 E8				inx
    13 2A95 8E 90 2A		skp_	stx adr+1
    15 2A98 E0 A3		skp	cpx >VADR+VLEN
    16 2A9A D0 F2			bne clr
    17 2A9C C0 1A			cpy <VADR+VLEN
    18 2A9E D0 EE			bne clr
   162 					eif
   163
   164 				.ifdef psptr
   165 					mwa #PROGRAMSTACK psptr
   166 				.fi
   167
   168 2AA0 A2 00			ldx #$00					; X = 0
   169 2AA2 86 82			stx bp						; BP = 0
   170
   171 2AA4 8E 08 D2			stx audctl					; reset POKEY
   172 2AA7 8E 18 D2			stx audctl+$10
   173 2AAA A9 03			lda #3
   174 2AAC 8D 0F D2			sta skctl
   175 2AAF 8D 1F D2			sta skctl+$10
   176
   177 2AB2 CA				dex						; X = 255
   178
   179 2AB3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: arkanoid_vbxe.a65]
     3 2AB3 20 9E 33			jsr MAIN.SYSTEM.@UnitInit
    23 2AB6 20 2D 39			jsr MAIN.VBXE.@UnitInit
   180
   181 2AB9			.local	MAIN						; PROCEDURE
   182
   183 2AB9 4C FE 9D			jmp l_0022
   184
   185 				; ------------------------------------------------------------
   186
   187 2ABC			.local	SYSTEM						; UNIT
   188
   189 2ABC			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   190
   191 				; ------------------------------------------------------------
   192
   193 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   194 				; as Pointer
   195 2ABC B5 96			lda :STACKORIGIN,x
   196 2ABE 85 8A			sta A
   197 2AC0 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   198 2AC2 85 8B			sta A+1
   199 2AC4 CA				dex
   200 2AC5			@main
   201
   202 				; -------------------  ASM Block 00000002  -------------------
   203
   204 2AC5 A0 00			ldy #0
   205 2AC7 B1 8A 85 92			mva (:edx),y Result
   206
   207 2ACB			@exit
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   212 				; as Pointer
   213
   214 2ACB E8				inx
   215 2ACC A5 92 95 96			mva RESULT :STACKORIGIN,x
   216
   217 					.ifdef @new
   218 					lda <@VarData
   219 					sta :ztmp
   220 					lda >@VarData
   221 					ldy #@VarDataSize-1
   222 					jmp @FreeMem
   223 					eif
   224
   225 				; ------------------------------------------------------------
   226
   227 = 008A			A	= :EDX
   228 = 0092			RESULT	= :STACKORIGIN-4
   229
   230 2AD0 60				rts						; ret
   231 				.endl
   232
   233 2AD1			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   234 2AD1			.local	@010183000
   235 2AD1 85 8A			sta X
   236
   237 				; -------------------  ASM Block 00000007  -------------------
   238
   239 2AD3 A5 8A			lda :edx
   240 2AD5 10 05			bpl @+
   241
   242 2AD7 49 FF			eor #$ff
   243 2AD9 18 69 01			add #1
   244 				@
   245 2ADC 85 92			sta Result
   246
   247 2ADE			@exit
   248
   249 				; ------------------------------------------------------------
   250
   251 = 008A			X	= :EDX
   252 = 0092			RESULT	= :STACKORIGIN-4
   253
   254 2ADE 60				rts						; ret
   255 				.endl
   256 				.endl							; overload
   257
   258 2ADF			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   259 2ADF			.local	@010184000
   260
   261 				; -------------------  ASM Block 00000008  -------------------
   262
   263 2ADF A5 8B			lda :edx+1
   264 2AE1 10 0D			bpl @+
   265
   266 2AE3 A9 00			lda #$00
   267 2AE5 38 E5 8A			sub :edx
   268 2AE8 85 8A			sta :edx
   269 2AEA A9 00			lda #$00
   270 2AEC E5 8B			sbc :edx+1
   271 2AEE 85 8B			sta :edx+1
   272 				@
   273 2AF0 85 93			sta Result+1
   274
   275 2AF2 A5 8A 85 92			mva :edx Result
   276
   277 2AF6			@exit
   278
   279 				; ------------------------------------------------------------
   280
   281 = 008A			X	= :EDX
   282 = 0092			RESULT	= :STACKORIGIN-4
   283
   284 2AF6 60				rts						; ret
   285 				.endl
   286 				.endl							; overload
   287
   288 2AF7			.local	ABS						; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER
   289 2AF7			.local	@010185000
   290
   291 				; -------------------  ASM Block 00000009  -------------------
   292
   293 2AF7 A5 8D			lda :edx+3
   294 2AF9 10 03			spl
   295 2AFB 20 1C 21			jsr @negEDX
   296
   297 2AFE 85 95			sta Result+3
   298
   299 2B00 A5 8A 85 92			mva :edx Result
   300 2B04 A5 8B 85 93			mva :edx+1 Result+1
   301 2B08 A5 8C 85 94			mva :edx+2 Result+2
   302
   303 2B0C			@exit
   304
   305 				; ------------------------------------------------------------
   306
   307 = 008A			X	= :EDX
   308 = 0092			RESULT	= :STACKORIGIN-4
   309
   310 2B0C 60				rts						; ret
   311 				.endl
   312 				.endl							; overload
   313
   314 2B0D			.local	ARCTAN						; FUNCTION | OVERLOAD
   315 2B0D			.local	@01018F000
   316
   317 				; optimize OK (SYSTEM), line = 904
   318
   319 2B0D A9 00			lda #$00
   320 2B0F 8D A6 9E			sta SIGN
   321
   322 				; optimize OK (SYSTEM), line = 905
   323
   324 2B12 AD 96 9E			lda VALUE
   325 2B15 8D 9E 9E			sta X
   326 2B18 AD 97 9E			lda VALUE+1
   327 2B1B 8D 9F 9E			sta X+1
   328 2B1E AD 98 9E			lda VALUE+2
   329 2B21 8D A0 9E			sta X+2
   330 2B24 AD 99 9E			lda VALUE+3
   331 2B27 8D A1 9E			sta X+3
   332
   333 				; optimize OK (SYSTEM), line = 906
   334
   335 2B2A A9 00			lda #$00
   336 2B2C 8D A2 9E			sta Y
   337 2B2F 8D A3 9E			sta Y+1
   338 2B32 8D A4 9E			sta Y+2
   339 2B35 8D A5 9E			sta Y+3
   340
   341 				; optimize OK (SYSTEM), line = 908
   342
   343 2B38 AD 99 9E			lda VALUE+3
   344 2B3B D0 0D			bne @+
   345 2B3D AD 98 9E			lda VALUE+2
   346 2B40 D0 08			bne @+
   347 2B42 AD 97 9E			lda VALUE+1
   348 2B45 D0 03			bne @+
   349 2B47 AD 96 9E			lda VALUE
   350 				@
   351 2B4A D0 11			jne l_0054
   352
   353 				; optimize OK (SYSTEM), line = 909
   354
   355 2B4C A9 00			lda #$00
   356 2B4E 8D 9A 9E			sta RESULT
   357 2B51 8D 9B 9E			sta RESULT+1
   358 2B54 8D 9C 9E			sta RESULT+2
   359 2B57 8D 9D 9E			sta RESULT+3
   360 2B5A 4C 36 2F			jmp @exit
   361 2B5D			l_0054
   362
   363 				; optimize OK (SYSTEM), line = 912
   364
   365 2B5D AD A1 9E			lda X+3
   366 2B60 10 0D			jpl l_0072
   367
   368 				; optimize OK (SYSTEM), line = 913
   369
   370 2B62 A9 01			lda #$01
   371 2B64 8D A6 9E			sta SIGN
   372
   373 				; optimize OK (SYSTEM), line = 914
   374
   375 2B67 AD A1 9E			lda X+3
   376 2B6A 49 80			eor #$80
   377 2B6C 8D A1 9E			sta X+3
   378 2B6F			l_0072
   379 2B6F			l_0062
   380
   381 				; optimize OK (SYSTEM), line = 917
   382
   383 2B6F A9 00			lda #$00
   384 2B71 85 8A			sta :FP2MAN0
   385 2B73 85 8B			sta :FP2MAN1
   386 2B75 A9 80			lda #$80
   387 2B77 85 8C			sta :FP2MAN2
   388 2B79 A9 3F			lda #$3F
   389 2B7B 85 8D			sta :FP2MAN3
   390 2B7D AD 9E 9E			lda X
   391 2B80 85 86			sta :FP1MAN0
   392 2B82 AD 9F 9E			lda X+1
   393 2B85 85 87			sta :FP1MAN1
   394 2B87 AD A0 9E			lda X+2
   395 2B8A 85 88			sta :FP1MAN2
   396 2B8C AD A1 9E			lda X+3
   397 2B8F 85 89			sta :FP1MAN3
   398 2B91 20 63 24			jsr @FSUB
   399 2B94 A5 8E			lda :FPMAN0
   400 2B96 85 9F			sta :STACKORIGIN+9
   401 2B98 A5 8F			lda :FPMAN1
   402 2B9A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
   403 2B9C A5 90			lda :FPMAN2
   404 2B9E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
   405 2BA0 A5 91			lda :FPMAN3
   406 2BA2 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
   407 2BA4 A9 00			lda #$00
   408 2BA6 85 8A			sta :FP2MAN0
   409 2BA8 85 8B			sta :FP2MAN1
   410 2BAA A9 80			lda #$80
   411 2BAC 85 8C			sta :FP2MAN2
   412 2BAE A9 3F			lda #$3F
   413 2BB0 85 8D			sta :FP2MAN3
   414 2BB2 AD 9E 9E			lda X
   415 2BB5 85 86			sta :FP1MAN0
   416 2BB7 AD 9F 9E			lda X+1
   417 2BBA 85 87			sta :FP1MAN1
   418 2BBC AD A0 9E			lda X+2
   419 2BBF 85 88			sta :FP1MAN2
   420 2BC1 AD A1 9E			lda X+3
   421 2BC4 85 89			sta :FP1MAN3
   422 2BC6 20 5E 24			jsr @FADD
   423 2BC9 A5 8E			lda :FPMAN0
   424 2BCB 85 8A			sta :FP2MAN0
   425 2BCD A5 8F			lda :FPMAN1
   426 2BCF 85 8B			sta :FP2MAN1
   427 2BD1 A5 90			lda :FPMAN2
   428 2BD3 85 8C			sta :FP2MAN2
   429 2BD5 A5 91			lda :FPMAN3
   430 2BD7 85 8D			sta :FP2MAN3
   431 2BD9 A5 9F			lda :STACKORIGIN+9
   432 2BDB 85 86			sta :FP1MAN0
   433 2BDD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
   434 2BDF 85 87			sta :FP1MAN1
   435 2BE1 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
   436 2BE3 85 88			sta :FP1MAN2
   437 2BE5 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
   438 2BE7 85 89			sta :FP1MAN3
   439 2BE9 20 6B 26			jsr @FDIV
   440 2BEC A5 8E			lda :FPMAN0
   441 2BEE 8D 9E 9E			sta X
   442 2BF1 A5 8F			lda :FPMAN1
   443 2BF3 8D 9F 9E			sta X+1
   444 2BF6 A5 90			lda :FPMAN2
   445 2BF8 8D A0 9E			sta X+2
   446 2BFB A5 91			lda :FPMAN3
   447 2BFD 8D A1 9E			sta X+3
   448
   449 				; optimize OK (SYSTEM), line = 918
   450
   451 2C00 AD 9E 9E			lda X
   452 2C03 85 8A			sta :FP2MAN0
   453 2C05 AD 9F 9E			lda X+1
   454 2C08 85 8B			sta :FP2MAN1
   455 2C0A AD A0 9E			lda X+2
   456 2C0D 85 8C			sta :FP2MAN2
   457 2C0F AD A1 9E			lda X+3
   458 2C12 85 8D			sta :FP2MAN3
   459 2C14 AD 9E 9E			lda X
   460 2C17 85 86			sta :FP1MAN0
   461 2C19 AD 9F 9E			lda X+1
   462 2C1C 85 87			sta :FP1MAN1
   463 2C1E AD A0 9E			lda X+2
   464 2C21 85 88			sta :FP1MAN2
   465 2C23 AD A1 9E			lda X+3
   466 2C26 85 89			sta :FP1MAN3
   467 2C28 20 CA 25			jsr @FMUL
   468 2C2B A5 8E			lda :FPMAN0
   469 2C2D 8D A2 9E			sta Y
   470 2C30 A5 8F			lda :FPMAN1
   471 2C32 8D A3 9E			sta Y+1
   472 2C35 A5 90			lda :FPMAN2
   473 2C37 8D A4 9E			sta Y+2
   474 2C3A A5 91			lda :FPMAN3
   475 2C3C 8D A5 9E			sta Y+3
   476
   477 				; optimize OK (SYSTEM), line = 919
   478
   479 2C3F AD A2 9E			lda Y
   480 2C42 85 8A			sta :FP2MAN0
   481 2C44 AD A3 9E			lda Y+1
   482 2C47 85 8B			sta :FP2MAN1
   483 2C49 AD A4 9E			lda Y+2
   484 2C4C 85 8C			sta :FP2MAN2
   485 2C4E AD A5 9E			lda Y+3
   486 2C51 85 8D			sta :FP2MAN3
   487 2C53 A9 4A			lda #$4A
   488 2C55 85 86			sta :FP1MAN0
   489 2C57 A9 D7			lda #$D7
   490 2C59 85 87			sta :FP1MAN1
   491 2C5B A9 3B			lda #$3B
   492 2C5D 85 88			sta :FP1MAN2
   493 2C5F 85 89			sta :FP1MAN3
   494 2C61 20 CA 25			jsr @FMUL
   495 2C64 A5 8E			lda :FPMAN0
   496 2C66 85 86			sta :FP1MAN0
   497 2C68 A5 8F			lda :FPMAN1
   498 2C6A 85 87			sta :FP1MAN1
   499 2C6C A5 90			lda :FPMAN2
   500 2C6E 85 88			sta :FP1MAN2
   501 2C70 A5 91			lda :FPMAN3
   502 2C72 85 89			sta :FP1MAN3
   503 2C74 A9 02			lda #$02
   504 2C76 85 8A			sta :FP2MAN0
   505 2C78 A9 6E			lda #$6E
   506 2C7A 85 8B			sta :FP2MAN1
   507 2C7C A9 84			lda #$84
   508 2C7E 85 8C			sta :FP2MAN2
   509 2C80 A9 3C			lda #$3C
   510 2C82 85 8D			sta :FP2MAN3
   511 2C84 20 63 24			jsr @FSUB
   512 2C87 A5 8E			lda :FPMAN0
   513 2C89 85 86			sta :FP1MAN0
   514 2C8B A5 8F			lda :FPMAN1
   515 2C8D 85 87			sta :FP1MAN1
   516 2C8F A5 90			lda :FPMAN2
   517 2C91 85 88			sta :FP1MAN2
   518 2C93 A5 91			lda :FPMAN3
   519 2C95 85 89			sta :FP1MAN3
   520 2C97 AD A2 9E			lda Y
   521 2C9A 85 8A			sta :FP2MAN0
   522 2C9C AD A3 9E			lda Y+1
   523 2C9F 85 8B			sta :FP2MAN1
   524 2CA1 AD A4 9E			lda Y+2
   525 2CA4 85 8C			sta :FP2MAN2
   526 2CA6 AD A5 9E			lda Y+3
   527 2CA9 85 8D			sta :FP2MAN3
   528 2CAB 20 CA 25			jsr @FMUL
   529 2CAE A5 8E			lda :FPMAN0
   530 2CB0 85 86			sta :FP1MAN0
   531 2CB2 A5 8F			lda :FPMAN1
   532 2CB4 85 87			sta :FP1MAN1
   533 2CB6 A5 90			lda :FPMAN2
   534 2CB8 85 88			sta :FP1MAN2
   535 2CBA A5 91			lda :FPMAN3
   536 2CBC 85 89			sta :FP1MAN3
   537 2CBE A9 FE			lda #$FE
   538 2CC0 85 8A			sta :FP2MAN0
   539 2CC2 A9 C1			lda #$C1
   540 2CC4 85 8B			sta :FP2MAN1
   541 2CC6 A9 2F			lda #$2F
   542 2CC8 85 8C			sta :FP2MAN2
   543 2CCA A9 3D			lda #$3D
   544 2CCC 85 8D			sta :FP2MAN3
   545 2CCE 20 5E 24			jsr @FADD
   546 2CD1 A5 8E			lda :FPMAN0
   547 2CD3 85 86			sta :FP1MAN0
   548 2CD5 A5 8F			lda :FPMAN1
   549 2CD7 85 87			sta :FP1MAN1
   550 2CD9 A5 90			lda :FPMAN2
   551 2CDB 85 88			sta :FP1MAN2
   552 2CDD A5 91			lda :FPMAN3
   553 2CDF 85 89			sta :FP1MAN3
   554 2CE1 AD A2 9E			lda Y
   555 2CE4 85 8A			sta :FP2MAN0
   556 2CE6 AD A3 9E			lda Y+1
   557 2CE9 85 8B			sta :FP2MAN1
   558 2CEB AD A4 9E			lda Y+2
   559 2CEE 85 8C			sta :FP2MAN2
   560 2CF0 AD A5 9E			lda Y+3
   561 2CF3 85 8D			sta :FP2MAN3
   562 2CF5 20 CA 25			jsr @FMUL
   563 2CF8 A5 8E			lda :FPMAN0
   564 2CFA 85 86			sta :FP1MAN0
   565 2CFC A5 8F			lda :FPMAN1
   566 2CFE 85 87			sta :FP1MAN1
   567 2D00 A5 90			lda :FPMAN2
   568 2D02 85 88			sta :FP1MAN2
   569 2D04 A5 91			lda :FPMAN3
   570 2D06 85 89			sta :FP1MAN3
   571 2D08 A9 74			lda #$74
   572 2D0A 85 8A			sta :FP2MAN0
   573 2D0C A9 31			lda #$31
   574 2D0E 85 8B			sta :FP2MAN1
   575 2D10 A9 9A			lda #$9A
   576 2D12 85 8C			sta :FP2MAN2
   577 2D14 A9 3D			lda #$3D
   578 2D16 85 8D			sta :FP2MAN3
   579 2D18 20 63 24			jsr @FSUB
   580 2D1B A5 8E			lda :FPMAN0
   581 2D1D 85 86			sta :FP1MAN0
   582 2D1F A5 8F			lda :FPMAN1
   583 2D21 85 87			sta :FP1MAN1
   584 2D23 A5 90			lda :FPMAN2
   585 2D25 85 88			sta :FP1MAN2
   586 2D27 A5 91			lda :FPMAN3
   587 2D29 85 89			sta :FP1MAN3
   588 2D2B AD A2 9E			lda Y
   589 2D2E 85 8A			sta :FP2MAN0
   590 2D30 AD A3 9E			lda Y+1
   591 2D33 85 8B			sta :FP2MAN1
   592 2D35 AD A4 9E			lda Y+2
   593 2D38 85 8C			sta :FP2MAN2
   594 2D3A AD A5 9E			lda Y+3
   595 2D3D 85 8D			sta :FP2MAN3
   596 2D3F 20 CA 25			jsr @FMUL
   597 2D42 A5 8E			lda :FPMAN0
   598 2D44 85 86			sta :FP1MAN0
   599 2D46 A5 8F			lda :FPMAN1
   600 2D48 85 87			sta :FP1MAN1
   601 2D4A A5 90			lda :FPMAN2
   602 2D4C 85 88			sta :FP1MAN2
   603 2D4E A5 91			lda :FPMAN3
   604 2D50 85 89			sta :FP1MAN3
   605 2D52 A9 83			lda #$83
   606 2D54 85 8A			sta :FP2MAN0
   607 2D56 A9 3D			lda #$3D
   608 2D58 85 8B			sta :FP2MAN1
   609 2D5A A9 DA			lda #$DA
   610 2D5C 85 8C			sta :FP2MAN2
   611 2D5E A9 3D			lda #$3D
   612 2D60 85 8D			sta :FP2MAN3
   613 2D62 20 5E 24			jsr @FADD
   614 2D65 A5 8E			lda :FPMAN0
   615 2D67 85 86			sta :FP1MAN0
   616 2D69 A5 8F			lda :FPMAN1
   617 2D6B 85 87			sta :FP1MAN1
   618 2D6D A5 90			lda :FPMAN2
   619 2D6F 85 88			sta :FP1MAN2
   620 2D71 A5 91			lda :FPMAN3
   621 2D73 85 89			sta :FP1MAN3
   622 2D75 AD A2 9E			lda Y
   623 2D78 85 8A			sta :FP2MAN0
   624 2D7A AD A3 9E			lda Y+1
   625 2D7D 85 8B			sta :FP2MAN1
   626 2D7F AD A4 9E			lda Y+2
   627 2D82 85 8C			sta :FP2MAN2
   628 2D84 AD A5 9E			lda Y+3
   629 2D87 85 8D			sta :FP2MAN3
   630 2D89 20 CA 25			jsr @FMUL
   631 2D8C A5 8E			lda :FPMAN0
   632 2D8E 85 86			sta :FP1MAN0
   633 2D90 A5 8F			lda :FPMAN1
   634 2D92 85 87			sta :FP1MAN1
   635 2D94 A5 90			lda :FPMAN2
   636 2D96 85 88			sta :FP1MAN2
   637 2D98 A5 91			lda :FPMAN3
   638 2D9A 85 89			sta :FP1MAN3
   639 2D9C A9 C7			lda #$C7
   640 2D9E 85 8A			sta :FP2MAN0
   641 2DA0 A9 7F			lda #$7F
   642 2DA2 85 8B			sta :FP2MAN1
   643 2DA4 A9 11			lda #$11
   644 2DA6 85 8C			sta :FP2MAN2
   645 2DA8 A9 3E			lda #$3E
   646 2DAA 85 8D			sta :FP2MAN3
   647 2DAC 20 63 24			jsr @FSUB
   648 2DAF A5 8E			lda :FPMAN0
   649 2DB1 85 86			sta :FP1MAN0
   650 2DB3 A5 8F			lda :FPMAN1
   651 2DB5 85 87			sta :FP1MAN1
   652 2DB7 A5 90			lda :FPMAN2
   653 2DB9 85 88			sta :FP1MAN2
   654 2DBB A5 91			lda :FPMAN3
   655 2DBD 85 89			sta :FP1MAN3
   656 2DBF AD A2 9E			lda Y
   657 2DC2 85 8A			sta :FP2MAN0
   658 2DC4 AD A3 9E			lda Y+1
   659 2DC7 85 8B			sta :FP2MAN1
   660 2DC9 AD A4 9E			lda Y+2
   661 2DCC 85 8C			sta :FP2MAN2
   662 2DCE AD A5 9E			lda Y+3
   663 2DD1 85 8D			sta :FP2MAN3
   664 2DD3 20 CA 25			jsr @FMUL
   665 2DD6 A5 8E			lda :FPMAN0
   666 2DD8 85 86			sta :FP1MAN0
   667 2DDA A5 8F			lda :FPMAN1
   668 2DDC 85 87			sta :FP1MAN1
   669 2DDE A5 90			lda :FPMAN2
   670 2DE0 85 88			sta :FP1MAN2
   671 2DE2 A5 91			lda :FPMAN3
   672 2DE4 85 89			sta :FP1MAN3
   673 2DE6 A9 E5			lda #$E5
   674 2DE8 85 8A			sta :FP2MAN0
   675 2DEA A9 BB			lda #$BB
   676 2DEC 85 8B			sta :FP2MAN1
   677 2DEE A9 4C			lda #$4C
   678 2DF0 85 8C			sta :FP2MAN2
   679 2DF2 A9 3E			lda #$3E
   680 2DF4 85 8D			sta :FP2MAN3
   681 2DF6 20 5E 24			jsr @FADD
   682 2DF9 A5 8E			lda :FPMAN0
   683 2DFB 85 86			sta :FP1MAN0
   684 2DFD A5 8F			lda :FPMAN1
   685 2DFF 85 87			sta :FP1MAN1
   686 2E01 A5 90			lda :FPMAN2
   687 2E03 85 88			sta :FP1MAN2
   688 2E05 A5 91			lda :FPMAN3
   689 2E07 85 89			sta :FP1MAN3
   690 2E09 AD A2 9E			lda Y
   691 2E0C 85 8A			sta :FP2MAN0
   692 2E0E AD A3 9E			lda Y+1
   693 2E11 85 8B			sta :FP2MAN1
   694 2E13 AD A4 9E			lda Y+2
   695 2E16 85 8C			sta :FP2MAN2
   696 2E18 AD A5 9E			lda Y+3
   697 2E1B 85 8D			sta :FP2MAN3
   698 2E1D 20 CA 25			jsr @FMUL
   699 2E20 A5 8E			lda :FPMAN0
   700 2E22 85 86			sta :FP1MAN0
   701 2E24 A5 8F			lda :FPMAN1
   702 2E26 85 87			sta :FP1MAN1
   703 2E28 A5 90			lda :FPMAN2
   704 2E2A 85 88			sta :FP1MAN2
   705 2E2C A5 91			lda :FPMAN3
   706 2E2E 85 89			sta :FP1MAN3
   707 2E30 A9 6C			lda #$6C
   708 2E32 85 8A			sta :FP2MAN0
   709 2E34 A9 AA			lda #$AA
   710 2E36 85 8B			sta :FP2MAN1
   711 2E38 85 8C			sta :FP2MAN2
   712 2E3A A9 3E			lda #$3E
   713 2E3C 85 8D			sta :FP2MAN3
   714 2E3E 20 63 24			jsr @FSUB
   715 2E41 A5 8E			lda :FPMAN0
   716 2E43 85 86			sta :FP1MAN0
   717 2E45 A5 8F			lda :FPMAN1
   718 2E47 85 87			sta :FP1MAN1
   719 2E49 A5 90			lda :FPMAN2
   720 2E4B 85 88			sta :FP1MAN2
   721 2E4D A5 91			lda :FPMAN3
   722 2E4F 85 89			sta :FP1MAN3
   723 2E51 AD A2 9E			lda Y
   724 2E54 85 8A			sta :FP2MAN0
   725 2E56 AD A3 9E			lda Y+1
   726 2E59 85 8B			sta :FP2MAN1
   727 2E5B AD A4 9E			lda Y+2
   728 2E5E 85 8C			sta :FP2MAN2
   729 2E60 AD A5 9E			lda Y+3
   730 2E63 85 8D			sta :FP2MAN3
   731 2E65 20 CA 25			jsr @FMUL
   732 2E68 A5 8E			lda :FPMAN0
   733 2E6A 85 86			sta :FP1MAN0
   734 2E6C A5 8F			lda :FPMAN1
   735 2E6E 85 87			sta :FP1MAN1
   736 2E70 A5 90			lda :FPMAN2
   737 2E72 85 88			sta :FP1MAN2
   738 2E74 A5 91			lda :FPMAN3
   739 2E76 85 89			sta :FP1MAN3
   740 2E78 A9 00			lda #$00
   741 2E7A 85 8A			sta :FP2MAN0
   742 2E7C 85 8B			sta :FP2MAN1
   743 2E7E A9 80			lda #$80
   744 2E80 85 8C			sta :FP2MAN2
   745 2E82 A9 3F			lda #$3F
   746 2E84 85 8D			sta :FP2MAN3
   747 2E86 20 5E 24			jsr @FADD
   748 2E89 A5 8E			lda :FPMAN0
   749 2E8B 85 86			sta :FP1MAN0
   750 2E8D A5 8F			lda :FPMAN1
   751 2E8F 85 87			sta :FP1MAN1
   752 2E91 A5 90			lda :FPMAN2
   753 2E93 85 88			sta :FP1MAN2
   754 2E95 A5 91			lda :FPMAN3
   755 2E97 85 89			sta :FP1MAN3
   756 2E99 AD 9E 9E			lda X
   757 2E9C 85 8A			sta :FP2MAN0
   758 2E9E AD 9F 9E			lda X+1
   759 2EA1 85 8B			sta :FP2MAN1
   760 2EA3 AD A0 9E			lda X+2
   761 2EA6 85 8C			sta :FP2MAN2
   762 2EA8 AD A1 9E			lda X+3
   763 2EAB 85 8D			sta :FP2MAN3
   764 2EAD 20 CA 25			jsr @FMUL
   765 2EB0 A5 8E			lda :FPMAN0
   766 2EB2 8D 9E 9E			sta X
   767 2EB5 A5 8F			lda :FPMAN1
   768 2EB7 8D 9F 9E			sta X+1
   769 2EBA A5 90			lda :FPMAN2
   770 2EBC 8D A0 9E			sta X+2
   771 2EBF A5 91			lda :FPMAN3
   772 2EC1 8D A1 9E			sta X+3
   773
   774 				; optimize OK (SYSTEM), line = 922
   775
   776 2EC4 AD 9E 9E			lda X
   777 2EC7 85 8A			sta :FP2MAN0
   778 2EC9 AD 9F 9E			lda X+1
   779 2ECC 85 8B			sta :FP2MAN1
   780 2ECE AD A0 9E			lda X+2
   781 2ED1 85 8C			sta :FP2MAN2
   782 2ED3 AD A1 9E			lda X+3
   783 2ED6 85 8D			sta :FP2MAN3
   784 2ED8 A9 DB			lda #$DB
   785 2EDA 85 86			sta :FP1MAN0
   786 2EDC A9 0F			lda #$0F
   787 2EDE 85 87			sta :FP1MAN1
   788 2EE0 A9 49			lda #$49
   789 2EE2 85 88			sta :FP1MAN2
   790 2EE4 A9 3F			lda #$3F
   791 2EE6 85 89			sta :FP1MAN3
   792 2EE8 20 5E 24			jsr @FADD
   793 2EEB A5 8E			lda :FPMAN0
   794 2EED 8D 9E 9E			sta X
   795 2EF0 A5 8F			lda :FPMAN1
   796 2EF2 8D 9F 9E			sta X+1
   797 2EF5 A5 90			lda :FPMAN2
   798 2EF7 8D A0 9E			sta X+2
   799 2EFA A5 91			lda :FPMAN3
   800 2EFC 8D A1 9E			sta X+3
   801
   802 				; optimize OK (SYSTEM), line = 924
   803
   804 2EFF AD A6 9E			lda SIGN
   805 2F02 F0 1A			jeq l_00F4
   806
   807 				; optimize OK (SYSTEM), line = 925
   808
   809 2F04 AD 9E 9E			lda X
   810 2F07 8D 9A 9E			sta RESULT
   811 2F0A AD 9F 9E			lda X+1
   812 2F0D 8D 9B 9E			sta RESULT+1
   813 2F10 AD A0 9E			lda X+2
   814 2F13 8D 9C 9E			sta RESULT+2
   815 2F16 AD A1 9E			lda X+3
   816 2F19 49 80			eor #$80
   817 2F1B 4C 33 2F			jmp l_0105
   818 2F1E			l_00F4
   819
   820 				; optimize OK (SYSTEM), line = 927
   821
   822 2F1E AD 9E 9E			lda X
   823 2F21 8D 9A 9E			sta RESULT
   824 2F24 AD 9F 9E			lda X+1
   825 2F27 8D 9B 9E			sta RESULT+1
   826 2F2A AD A0 9E			lda X+2
   827 2F2D 8D 9C 9E			sta RESULT+2
   828 2F30 AD A1 9E			lda X+3
   829 2F33			l_0105
   830 2F33 8D 9D 9E			sta RESULT+3
   831 2F36			@exit
   832
   833 				; ------------------------------------------------------------
   834
   835 = 9E96			VALUE	= DATAORIGIN+$000B
   836 = 9E9A			RESULT	= DATAORIGIN+$000F
   837 = 9E9E			X	= DATAORIGIN+$0013
   838 = 9EA2			Y	= DATAORIGIN+$0017
   839 = 9EA6			SIGN	= DATAORIGIN+$001B
   840
   841 = 9E96			@VarData	= VALUE
   842 = 000D			@VarDataSize	= 13
   843
   844 2F36 60				rts						; ret
   845 				.endl
   846 				.endl							; overload
   847
   848 2F37			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   849
   850 				; ------------------------------------------------------------
   851
   852 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   853 				; as Pointer
   854 2F37 B5 96			lda :STACKORIGIN,x
   855 2F39 85 8A			sta A
   856 2F3B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
   857 2F3D 85 8B			sta A+1
   858 2F3F CA				dex
   859 2F40 30 05			jmi @main
   860
   861 				; ------------------------------------------------------------
   862
   863 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   864 				; as Pointer
   865 2F42 B5 96			lda :STACKORIGIN,x
   866 2F44 85 8E			sta VALUE
   867 2F46 CA				dex
   868 2F47			@main
   869
   870 				; -------------------  ASM Block 00000025  -------------------
   871
   872 2F47 A0 00			ldy #0
   873 2F49 A5 8E 91 8A			mva value (:edx),y
   874
   875 				; ------------------------------------------------------------
   876
   877 = 008A			A	= :EDX
   878 = 008E			VALUE	= :ECX
   879
   880 2F4D			@exit
   881 					.ifdef @new
   882 					lda <@VarData
   883 					sta :ztmp
   884 					lda >@VarData
   885 					ldy #@VarDataSize-1
   886 					jmp @FreeMem
   887 					els
   888 2F4D 60				rts						; ret
   889 					eif
   890 				.endl
   891
   892 2F4E			.local	FILLBYTE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   893 2F4E			.local	@03018000001810000300000
   894
   895 					.MACRO m@INLINE
   896 				
   897 				; -------------------  ASM Block 00000033  -------------------
   898 				
   899 					jsr @fill
   900 				
   901 					.ENDM
   902
   903 				; ------------------------------------------------------------
   904
   905 = 008A			A	= :EDX
   906 = 008E			COUNT	= :ECX
   907 = 0086			VALUE	= :EAX
   908
   909 2F4E			@exit
   910 				.endl
   911 				.endl							; overload
   912
   913 2F4E			.local	FSINCOS						; FUNCTION
   914
   915 				; --- WhileProlog
   916 2F4E 4C 8C 2F			jmp l_015B
   917 2F51			l_015C
   918
   919 				; optimize OK (SYSTEM), line = 1909
   920
   921 2F51 A9 DB			lda #$DB
   922 2F53 85 8A			sta :FP2MAN0
   923 2F55 A9 0F			lda #$0F
   924 2F57 85 8B			sta :FP2MAN1
   925 2F59 A9 C9			lda #$C9
   926 2F5B 85 8C			sta :FP2MAN2
   927 2F5D A9 40			lda #$40
   928 2F5F 85 8D			sta :FP2MAN3
   929 2F61 AD A7 9E			lda X
   930 2F64 85 86			sta :FP1MAN0
   931 2F66 AD A8 9E			lda X+1
   932 2F69 85 87			sta :FP1MAN1
   933 2F6B AD A9 9E			lda X+2
   934 2F6E 85 88			sta :FP1MAN2
   935 2F70 AD AA 9E			lda X+3
   936 2F73 85 89			sta :FP1MAN3
   937 2F75 20 63 24			jsr @FSUB
   938 2F78 A5 8E			lda :FPMAN0
   939 2F7A 8D A7 9E			sta X
   940 2F7D A5 8F			lda :FPMAN1
   941 2F7F 8D A8 9E			sta X+1
   942 2F82 A5 90			lda :FPMAN2
   943 2F84 8D A9 9E			sta X+2
   944 2F87 A5 91			lda :FPMAN3
   945 2F89 8D AA 9E			sta X+3
   946 2F8C			l_015B
   947 2F8C A9 DB			lda #$DB
   948 2F8E 85 86			sta @FCMPL.A
   949 2F90 A9 0F			lda #$0F
   950 2F92 85 87			sta @FCMPL.A+1
   951 2F94 A9 C9			lda #$C9
   952 2F96 85 88			sta @FCMPL.A+2
   953 2F98 A9 40			lda #$40
   954 2F9A 85 89			sta @FCMPL.A+3
   955 2F9C AD A7 9E			lda X
   956 2F9F 85 8E			sta @FCMPL.B
   957 2FA1 AD A8 9E			lda X+1
   958 2FA4 85 8F			sta @FCMPL.B+1
   959 2FA6 AD A9 9E			lda X+2
   960 2FA9 85 90			sta @FCMPL.B+2
   961 2FAB AD AA 9E			lda X+3
   962 2FAE 85 91			sta @FCMPL.B+3
   963 2FB0 20 E7 26			jsr @FCMPL
   964 2FB3 30 02			smi
   965 2FB5 D0 9A			jne l_015C
   966
   967 				; --- WhileProlog
   968 2FB7 4C F5 2F			jmp l_0170
   969 2FBA			l_0171
   970
   971 				; optimize OK (SYSTEM), line = 1910
   972
   973 2FBA A9 DB			lda #$DB
   974 2FBC 85 8A			sta :FP2MAN0
   975 2FBE A9 0F			lda #$0F
   976 2FC0 85 8B			sta :FP2MAN1
   977 2FC2 A9 C9			lda #$C9
   978 2FC4 85 8C			sta :FP2MAN2
   979 2FC6 A9 40			lda #$40
   980 2FC8 85 8D			sta :FP2MAN3
   981 2FCA AD A7 9E			lda X
   982 2FCD 85 86			sta :FP1MAN0
   983 2FCF AD A8 9E			lda X+1
   984 2FD2 85 87			sta :FP1MAN1
   985 2FD4 AD A9 9E			lda X+2
   986 2FD7 85 88			sta :FP1MAN2
   987 2FD9 AD AA 9E			lda X+3
   988 2FDC 85 89			sta :FP1MAN3
   989 2FDE 20 5E 24			jsr @FADD
   990 2FE1 A5 8E			lda :FPMAN0
   991 2FE3 8D A7 9E			sta X
   992 2FE6 A5 8F			lda :FPMAN1
   993 2FE8 8D A8 9E			sta X+1
   994 2FEB A5 90			lda :FPMAN2
   995 2FED 8D A9 9E			sta X+2
   996 2FF0 A5 91			lda :FPMAN3
   997 2FF2 8D AA 9E			sta X+3
   998 2FF5			l_0170
   999 2FF5 AD AA 9E			lda X+3
  1000 2FF8 30 C0			jmi l_0171
  1001
  1002 				; optimize OK (SYSTEM), line = 1913
  1003
  1004 2FFA A9 83			lda #$83
  1005 2FFC 85 8A			sta :FP2MAN0
  1006 2FFE A9 F9			lda #$F9
  1007 3000 85 8B			sta :FP2MAN1
  1008 3002 A9 22			lda #$22
  1009 3004 85 8C			sta :FP2MAN2
  1010 3006 A9 3F			lda #$3F
  1011 3008 85 8D			sta :FP2MAN3
  1012 300A AD A7 9E			lda X
  1013 300D 85 86			sta :FP1MAN0
  1014 300F AD A8 9E			lda X+1
  1015 3012 85 87			sta :FP1MAN1
  1016 3014 AD A9 9E			lda X+2
  1017 3017 85 88			sta :FP1MAN2
  1018 3019 AD AA 9E			lda X+3
  1019 301C 85 89			sta :FP1MAN3
  1020 301E 20 CA 25			jsr @FMUL
  1021 3021 A5 8E			lda :FPMAN0
  1022 3023 8D A7 9E			sta X
  1023 3026 A5 8F			lda :FPMAN1
  1024 3028 8D A8 9E			sta X+1
  1025 302B A5 90			lda :FPMAN2
  1026 302D 8D A9 9E			sta X+2
  1027 3030 A5 91			lda :FPMAN3
  1028 3032 8D AA 9E			sta X+3
  1029
  1030 				; optimize OK (SYSTEM), line = 1916
  1031
  1032 3035 AD A7 9E			lda X
  1033 3038 85 8E			sta :FPMAN0
  1034 303A AD A8 9E			lda X+1
  1035 303D 85 8F			sta :FPMAN1
  1036 303F AD A9 9E			lda X+2
  1037 3042 85 90			sta :FPMAN2
  1038 3044 AD AA 9E			lda X+3
  1039 3047 85 91			sta :FPMAN3
  1040 3049 20 33 27			jsr @F2I
  1041 304C A5 8E			lda :FPMAN0
  1042 304E 8D B0 9E			sta I
  1043
  1044 				; optimize OK (SYSTEM), line = 1919
  1045
  1046 3051 AD AA 9E			lda X+3
  1047 3054 10 03			jpl l_019F
  1048 3056 CE B0 9E			dec I
  1049 3059			l_019F
  1050
  1051 				; optimize OK (SYSTEM), line = 1922
  1052
  1053 3059 A0 00			ldy #$00
  1054 305B AD B0 9E			lda I
  1055 305E 10 01			spl
  1056 3060 88				dey
  1057 3061 85 8E			sta :FPMAN0
  1058 3063 84 8F			sty :FPMAN1
  1059 3065 84 90			sty :FPMAN2
  1060 3067 84 91			sty :FPMAN3
  1061 3069 20 A4 27			jsr @I2F
  1062 306C A5 8E			lda :FPMAN0
  1063 306E 85 8A			sta :FP2MAN0
  1064 3070 A5 8F			lda :FPMAN1
  1065 3072 85 8B			sta :FP2MAN1
  1066 3074 A5 90			lda :FPMAN2
  1067 3076 85 8C			sta :FP2MAN2
  1068 3078 A5 91			lda :FPMAN3
  1069 307A 85 8D			sta :FP2MAN3
  1070 307C AD A7 9E			lda X
  1071 307F 85 86			sta :FP1MAN0
  1072 3081 AD A8 9E			lda X+1
  1073 3084 85 87			sta :FP1MAN1
  1074 3086 AD A9 9E			lda X+2
  1075 3089 85 88			sta :FP1MAN2
  1076 308B AD AA 9E			lda X+3
  1077 308E 85 89			sta :FP1MAN3
  1078 3090 20 63 24			jsr @FSUB
  1079 3093 A5 8E			lda :FPMAN0
  1080 3095 8D A7 9E			sta X
  1081 3098 A5 8F			lda :FPMAN1
  1082 309A 8D A8 9E			sta X+1
  1083 309D A5 90			lda :FPMAN2
  1084 309F 8D A9 9E			sta X+2
  1085 30A2 A5 91			lda :FPMAN3
  1086 30A4 8D AA 9E			sta X+3
  1087
  1088 				; optimize OK (SYSTEM), line = 1925
  1089
  1090 30A7 AD AB 9E			lda SC
  1091 30AA F0 03			jeq l_01BC
  1092 30AC EE B0 9E			inc I
  1093 30AF			l_01BC
  1094
  1095 				; optimize OK (SYSTEM), line = 1928
  1096
  1097 30AF AD B0 9E			lda I
  1098 30B2 29 01			and #$01
  1099 30B4 D0 39			jne l_01D9
  1100 30B6 AD A7 9E			lda X
  1101 30B9 85 8A			sta :FP2MAN0
  1102 30BB AD A8 9E			lda X+1
  1103 30BE 85 8B			sta :FP2MAN1
  1104 30C0 AD A9 9E			lda X+2
  1105 30C3 85 8C			sta :FP2MAN2
  1106 30C5 AD AA 9E			lda X+3
  1107 30C8 85 8D			sta :FP2MAN3
  1108 30CA A9 00			lda #$00
  1109 30CC 85 86			sta :FP1MAN0
  1110 30CE 85 87			sta :FP1MAN1
  1111 30D0 A9 80			lda #$80
  1112 30D2 85 88			sta :FP1MAN2
  1113 30D4 A9 3F			lda #$3F
  1114 30D6 85 89			sta :FP1MAN3
  1115 30D8 20 63 24			jsr @FSUB
  1116 30DB A5 8E			lda :FPMAN0
  1117 30DD 8D A7 9E			sta X
  1118 30E0 A5 8F			lda :FPMAN1
  1119 30E2 8D A8 9E			sta X+1
  1120 30E5 A5 90			lda :FPMAN2
  1121 30E7 8D A9 9E			sta X+2
  1122 30EA A5 91			lda :FPMAN3
  1123 30EC 8D AA 9E			sta X+3
  1124 30EF			l_01D9
  1125
  1126 				; optimize OK (SYSTEM), line = 1931
  1127
  1128 30EF AD A7 9E			lda X
  1129 30F2 85 8A			sta :FP2MAN0
  1130 30F4 AD A8 9E			lda X+1
  1131 30F7 85 8B			sta :FP2MAN1
  1132 30F9 AD A9 9E			lda X+2
  1133 30FC 85 8C			sta :FP2MAN2
  1134 30FE AD AA 9E			lda X+3
  1135 3101 85 8D			sta :FP2MAN3
  1136 3103 AD A7 9E			lda X
  1137 3106 85 86			sta :FP1MAN0
  1138 3108 AD A8 9E			lda X+1
  1139 310B 85 87			sta :FP1MAN1
  1140 310D AD A9 9E			lda X+2
  1141 3110 85 88			sta :FP1MAN2
  1142 3112 AD AA 9E			lda X+3
  1143 3115 85 89			sta :FP1MAN3
  1144 3117 20 CA 25			jsr @FMUL
  1145 311A A5 8E			lda :FPMAN0
  1146 311C 8D A7 9E			sta X
  1147 311F A5 8F			lda :FPMAN1
  1148 3121 8D A8 9E			sta X+1
  1149 3124 A5 90			lda :FPMAN2
  1150 3126 8D A9 9E			sta X+2
  1151 3129 A5 91			lda :FPMAN3
  1152 312B 8D AA 9E			sta X+3
  1153
  1154 				; optimize OK (SYSTEM), line = 1932
  1155
  1156 312E A9 42			lda #$42
  1157 3130 85 8A			sta :FP2MAN0
  1158 3132 A9 01			lda #$01
  1159 3134 85 8B			sta :FP2MAN1
  1160 3136 A9 5E			lda #$5E
  1161 3138 85 8C			sta :FP2MAN2
  1162 313A A9 3A			lda #$3A
  1163 313C 85 8D			sta :FP2MAN3
  1164 313E AD A7 9E			lda X
  1165 3141 85 86			sta :FP1MAN0
  1166 3143 AD A8 9E			lda X+1
  1167 3146 85 87			sta :FP1MAN1
  1168 3148 AD A9 9E			lda X+2
  1169 314B 85 88			sta :FP1MAN2
  1170 314D AD AA 9E			lda X+3
  1171 3150 85 89			sta :FP1MAN3
  1172 3152 20 CA 25			jsr @FMUL
  1173 3155 A5 8E			lda :FPMAN0
  1174 3157 85 8A			sta :FP2MAN0
  1175 3159 A5 8F			lda :FPMAN1
  1176 315B 85 8B			sta :FP2MAN1
  1177 315D A5 90			lda :FPMAN2
  1178 315F 85 8C			sta :FP2MAN2
  1179 3161 A5 91			lda :FPMAN3
  1180 3163 85 8D			sta :FP2MAN3
  1181 3165 A9 D3			lda #$D3
  1182 3167 85 86			sta :FP1MAN0
  1183 3169 A9 59			lda #$59
  1184 316B 85 87			sta :FP1MAN1
  1185 316D A9 A3			lda #$A3
  1186 316F 85 88			sta :FP1MAN2
  1187 3171 A9 3C			lda #$3C
  1188 3173 85 89			sta :FP1MAN3
  1189 3175 20 63 24			jsr @FSUB
  1190 3178 A5 8E			lda :FPMAN0
  1191 317A 85 86			sta :FP1MAN0
  1192 317C A5 8F			lda :FPMAN1
  1193 317E 85 87			sta :FP1MAN1
  1194 3180 A5 90			lda :FPMAN2
  1195 3182 85 88			sta :FP1MAN2
  1196 3184 A5 91			lda :FPMAN3
  1197 3186 85 89			sta :FP1MAN3
  1198 3188 AD A7 9E			lda X
  1199 318B 85 8A			sta :FP2MAN0
  1200 318D AD A8 9E			lda X+1
  1201 3190 85 8B			sta :FP2MAN1
  1202 3192 AD A9 9E			lda X+2
  1203 3195 85 8C			sta :FP2MAN2
  1204 3197 AD AA 9E			lda X+3
  1205 319A 85 8D			sta :FP2MAN3
  1206 319C 20 CA 25			jsr @FMUL
  1207 319F A5 8E			lda :FPMAN0
  1208 31A1 85 86			sta :FP1MAN0
  1209 31A3 A5 8F			lda :FPMAN1
  1210 31A5 85 87			sta :FP1MAN1
  1211 31A7 A5 90			lda :FPMAN2
  1212 31A9 85 88			sta :FP1MAN2
  1213 31AB A5 91			lda :FPMAN3
  1214 31AD 85 89			sta :FP1MAN3
  1215 31AF A9 DE			lda #$DE
  1216 31B1 85 8A			sta :FP2MAN0
  1217 31B3 A9 4D			lda #$4D
  1218 31B5 85 8B			sta :FP2MAN1
  1219 31B7 A9 6F			lda #$6F
  1220 31B9 85 8C			sta :FP2MAN2
  1221 31BB A9 3E			lda #$3E
  1222 31BD 85 8D			sta :FP2MAN3
  1223 31BF 20 63 24			jsr @FSUB
  1224 31C2 A5 8E			lda :FPMAN0
  1225 31C4 85 86			sta :FP1MAN0
  1226 31C6 A5 8F			lda :FPMAN1
  1227 31C8 85 87			sta :FP1MAN1
  1228 31CA A5 90			lda :FPMAN2
  1229 31CC 85 88			sta :FP1MAN2
  1230 31CE A5 91			lda :FPMAN3
  1231 31D0 85 89			sta :FP1MAN3
  1232 31D2 AD A7 9E			lda X
  1233 31D5 85 8A			sta :FP2MAN0
  1234 31D7 AD A8 9E			lda X+1
  1235 31DA 85 8B			sta :FP2MAN1
  1236 31DC AD A9 9E			lda X+2
  1237 31DF 85 8C			sta :FP2MAN2
  1238 31E1 AD AA 9E			lda X+3
  1239 31E4 85 8D			sta :FP2MAN3
  1240 31E6 20 CA 25			jsr @FMUL
  1241 31E9 A5 8E			lda :FPMAN0
  1242 31EB 85 86			sta :FP1MAN0
  1243 31ED A5 8F			lda :FPMAN1
  1244 31EF 85 87			sta :FP1MAN1
  1245 31F1 A5 90			lda :FPMAN2
  1246 31F3 85 88			sta :FP1MAN2
  1247 31F5 A5 91			lda :FPMAN3
  1248 31F7 85 89			sta :FP1MAN3
  1249 31F9 A9 00			lda #$00
  1250 31FB 85 8A			sta :FP2MAN0
  1251 31FD 85 8B			sta :FP2MAN1
  1252 31FF A9 80			lda #$80
  1253 3201 85 8C			sta :FP2MAN2
  1254 3203 A9 3F			lda #$3F
  1255 3205 85 8D			sta :FP2MAN3
  1256 3207 20 5E 24			jsr @FADD
  1257 320A A5 8E			lda :FPMAN0
  1258 320C 85 9F			sta :STACKORIGIN+9
  1259 320E A5 8F			lda :FPMAN1
  1260 3210 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  1261 3212 A5 90			lda :FPMAN2
  1262 3214 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  1263 3216 A5 91			lda :FPMAN3
  1264 3218 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  1265 321A AD A7 9E			lda X
  1266 321D 85 8A			sta :FP2MAN0
  1267 321F AD A8 9E			lda X+1
  1268 3222 85 8B			sta :FP2MAN1
  1269 3224 AD A9 9E			lda X+2
  1270 3227 85 8C			sta :FP2MAN2
  1271 3229 AD AA 9E			lda X+3
  1272 322C 85 8D			sta :FP2MAN3
  1273 322E A9 00			lda #$00
  1274 3230 85 86			sta :FP1MAN0
  1275 3232 85 87			sta :FP1MAN1
  1276 3234 A9 80			lda #$80
  1277 3236 85 88			sta :FP1MAN2
  1278 3238 A9 3F			lda #$3F
  1279 323A 85 89			sta :FP1MAN3
  1280 323C 20 63 24			jsr @FSUB
  1281 323F A5 8E			lda :FPMAN0
  1282 3241 85 8A			sta :FP2MAN0
  1283 3243 A5 8F			lda :FPMAN1
  1284 3245 85 8B			sta :FP2MAN1
  1285 3247 A5 90			lda :FPMAN2
  1286 3249 85 8C			sta :FP2MAN2
  1287 324B A5 91			lda :FPMAN3
  1288 324D 85 8D			sta :FP2MAN3
  1289 324F A5 9F			lda :STACKORIGIN+9
  1290 3251 85 86			sta :FP1MAN0
  1291 3253 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  1292 3255 85 87			sta :FP1MAN1
  1293 3257 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  1294 3259 85 88			sta :FP1MAN2
  1295 325B A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  1296 325D 85 89			sta :FP1MAN3
  1297 325F 20 CA 25			jsr @FMUL
  1298 3262 A5 8E			lda :FPMAN0
  1299 3264 8D AC 9E			sta RESULT
  1300 3267 A5 8F			lda :FPMAN1
  1301 3269 8D AD 9E			sta RESULT+1
  1302 326C A5 90			lda :FPMAN2
  1303 326E 8D AE 9E			sta RESULT+2
  1304 3271 A5 91			lda :FPMAN3
  1305 3273 8D AF 9E			sta RESULT+3
  1306
  1307 				; optimize OK (SYSTEM), line = 1935
  1308
  1309 3276 AD B0 9E			lda I
  1310 3279 29 02			and #$02
  1311 327B C9 02			cmp #$02
  1312 327D D0 08			jne l_0226
  1313 327F AD AF 9E			lda RESULT+3
  1314 3282 49 80			eor #$80
  1315 3284 8D AF 9E			sta RESULT+3
  1316 3287			l_0226
  1317 3287			@exit
  1318
  1319 				; ------------------------------------------------------------
  1320
  1321 = 9EA7			X	= DATAORIGIN+$001C
  1322 = 9EAB			SC	= DATAORIGIN+$0020
  1323 = 9EAC			RESULT	= DATAORIGIN+$0021
  1324 = 9EB0			I	= DATAORIGIN+$0025
  1325
  1326 = 9EA7			@VarData	= X
  1327 = 0006			@VarDataSize	= 6
  1328
  1329 3287 60				rts						; ret
  1330 				.endl
  1331
  1332 3288			.local	SIN						; FUNCTION | OVERLOAD
  1333 3288			.local	@01018F000
  1334
  1335 				; optimize OK (SYSTEM), line = 1949
  1336
  1337 3288 AD B1 9E			lda X
  1338 328B 8D A7 9E			sta FSINCOS.X
  1339 328E AD B2 9E			lda X+1
  1340 3291 8D A8 9E			sta FSINCOS.X+1
  1341 3294 AD B3 9E			lda X+2
  1342 3297 8D A9 9E			sta FSINCOS.X+2
  1343 329A AD B4 9E			lda X+3
  1344 329D 8D AA 9E			sta FSINCOS.X+3
  1345 32A0 A9 00			lda #$00
  1346 32A2 8D AB 9E			sta FSINCOS.SC
  1347 32A5 20 4E 2F			jsr FSINCOS
  1348 32A8 AD AC 9E			lda FSINCOS.RESULT
  1349 32AB 8D B5 9E			sta RESULT
  1350 32AE AD AD 9E			lda FSINCOS.RESULT+1
  1351 32B1 8D B6 9E			sta RESULT+1
  1352 32B4 AD AE 9E			lda FSINCOS.RESULT+2
  1353 32B7 8D B7 9E			sta RESULT+2
  1354 32BA AD AF 9E			lda FSINCOS.RESULT+3
  1355 32BD 8D B8 9E			sta RESULT+3
  1356 32C0			@exit
  1357
  1358 				; ------------------------------------------------------------
  1359
  1360 = 9EB1			X	= DATAORIGIN+$0026
  1361 = 9EB5			RESULT	= DATAORIGIN+$002A
  1362
  1363 = 9EB1			@VarData	= X
  1364 = 0004			@VarDataSize	= 4
  1365
  1366 32C0 60				rts						; ret
  1367 				.endl
  1368 				.endl							; overload
  1369
  1370 32C1			.local	COS						; FUNCTION | OVERLOAD
  1371 32C1			.local	@01018F000
  1372
  1373 				; optimize OK (SYSTEM), line = 1963
  1374
  1375 32C1 AD B9 9E			lda X
  1376 32C4 8D A7 9E			sta FSINCOS.X
  1377 32C7 AD BA 9E			lda X+1
  1378 32CA 8D A8 9E			sta FSINCOS.X+1
  1379 32CD AD BB 9E			lda X+2
  1380 32D0 8D A9 9E			sta FSINCOS.X+2
  1381 32D3 AD BC 9E			lda X+3
  1382 32D6 8D AA 9E			sta FSINCOS.X+3
  1383 32D9 A9 01			lda #$01
  1384 32DB 8D AB 9E			sta FSINCOS.SC
  1385 32DE 20 4E 2F			jsr FSINCOS
  1386 32E1 AD AC 9E			lda FSINCOS.RESULT
  1387 32E4 8D BD 9E			sta RESULT
  1388 32E7 AD AD 9E			lda FSINCOS.RESULT+1
  1389 32EA 8D BE 9E			sta RESULT+1
  1390 32ED AD AE 9E			lda FSINCOS.RESULT+2
  1391 32F0 8D BF 9E			sta RESULT+2
  1392 32F3 AD AF 9E			lda FSINCOS.RESULT+3
  1393 32F6 8D C0 9E			sta RESULT+3
  1394 32F9			@exit
  1395
  1396 				; ------------------------------------------------------------
  1397
  1398 = 9EB9			X	= DATAORIGIN+$002E
  1399 = 9EBD			RESULT	= DATAORIGIN+$0032
  1400
  1401 = 9EB9			@VarData	= X
  1402 = 0004			@VarDataSize	= 4
  1403
  1404 32F9 60				rts						; ret
  1405 				.endl
  1406 				.endl							; overload
  1407
  1408 32FA			.local	PAUSE						; PROCEDURE | ASSEMBLER | OVERLOAD
  1409 32FA			.local	@00
  1410
  1411 				; -------------------  ASM Block 00000043  -------------------
  1412
  1413 32FA 2C 0B D4			bit VCOUNT
  1414 32FD 30 FB			bmi *-3
  1415 32FF 2C 0B D4			bit VCOUNT
  1416 3302 10 FB			bpl *-3
  1417
  1418 3304			@exit
  1419 					.ifdef @new
  1420 					lda <@VarData
  1421 					sta :ztmp
  1422 					lda >@VarData
  1423 					ldy #@VarDataSize-1
  1424 					jmp @FreeMem
  1425 					els
  1426 3304 60				rts						; ret
  1427 					eif
  1428 				.endl
  1429 				.endl							; overload
  1430
  1431 3305			.local	RANDOMIZE					; PROCEDURE | ASSEMBLER
  1432
  1433 				; -------------------  ASM Block 00000045  -------------------
  1434
  1435
  1436 3305 AD 0A D2 8D 94 9E	  mva $d20a RndSeed
  1437 330B A9 00 8D 95 9E	  mva #$00  RndSeed+1
  1438
  1439
  1440 3310			@exit
  1441 					.ifdef @new
  1442 					lda <@VarData
  1443 					sta :ztmp
  1444 					lda >@VarData
  1445 					ldy #@VarDataSize-1
  1446 					jmp @FreeMem
  1447 					els
  1448 3310 60				rts						; ret
  1449 					eif
  1450 				.endl
  1451
  1452 3311			.local	RANDOM						; FUNCTION | ASSEMBLER | OVERLOAD
  1453 3311			.local	@010180000
  1454 3311 8D C1 9E			sta RANGE
  1455
  1456 				; -------------------  ASM Block 00000049  -------------------
  1457
  1458
  1459 				;BYTE FUNC Rand(BYTE range)
  1460 				; returns random number between 0 and
  1461 				; range-1.  If range=0, then a random
  1462 				; number between 0 and 255 is returned
  1463
  1464 3314 AC 0A D2		  ldy $d20a   ; RANDOM
  1465
  1466 3317 AD C1 9E		  lda range
  1467 331A F0 08		  beq stop
  1468
  1469 331C 85 8E		  sta :ecx
  1470 331E 84 86		  sty :eax
  1471
  1472 3320 20 BF 22		  jsr imulCL
  1473 3323 A8			  tay
  1474
  1475 3324 8C C2 9E		stop  sty Result
  1476
  1477
  1478 3327			@exit
  1479
  1480 				; ------------------------------------------------------------
  1481
  1482 = 9EC1			RANGE	= DATAORIGIN+$0036
  1483 = 9EC2			RESULT	= DATAORIGIN+$0037
  1484
  1485 = 9EC1			@VarData	= RANGE
  1486 = 0001			@VarDataSize	= 1
  1487
  1488 3327 60				rts						; ret
  1489 				.endl
  1490 				.endl							; overload
  1491
  1492 3328			.local	RANDOM						; FUNCTION | OVERLOAD
  1493 3328			.local	@010184000
  1494
  1495 				; optimize OK (system_atari.inc), line = 179
  1496
  1497 3328 AD C4 9E			lda RANGE+1
  1498 332B 0D C3 9E			ora RANGE
  1499 332E D0 0B			jne l_0266
  1500
  1501 				; optimize OK (system_atari.inc), line = 180
  1502
  1503 3330 A9 00			lda #$00
  1504 3332 8D C5 9E			sta RESULT
  1505 3335 8D C6 9E			sta RESULT+1
  1506 3338 4C 9D 33			jmp l_0274
  1507 333B			l_0266
  1508
  1509 				; optimize OK (system_atari.inc), line = 183
  1510
  1511 333B AD 94 9E			lda RNDSEED
  1512 333E 85 8E			sta :ecx
  1513 3340 AD 95 9E			lda RNDSEED+1
  1514 3343 85 8F			sta :ecx+1
  1515 3345 A9 95			lda #$95
  1516 3347 85 86			sta :eax
  1517 3349 A9 45			lda #$45
  1518 334B 85 87			sta :eax+1
  1519 					.ifdef fmulinit
  1520 					fmulu_16
  1521 					els
  1522 334D 20 0B 23			imulCX
  1523 					eif
  1524 3350 A5 86			lda :eax
  1525 3352 8D 94 9E			sta RNDSEED
  1526 3355 A5 87			lda :eax+1
  1527 3357 8D 95 9E			sta RNDSEED+1
  1528
  1529 				; optimize OK (system_atari.inc), line = 184
  1530
  1531 335A AD C3 9E			lda RANGE
  1532 335D 85 8E			sta @SMALLINT.MOD.B
  1533 335F AD C4 9E			lda RANGE+1
  1534 3362 85 8F			sta @SMALLINT.MOD.B+1
  1535 3364 AD 94 9E			lda RNDSEED
  1536 3367 85 86			sta @SMALLINT.MOD.A
  1537 3369 AD 95 9E			lda RNDSEED+1
  1538 336C 85 87			sta @SMALLINT.MOD.A+1
  1539 336E 20 50 22			jsr @SMALLINT.MOD
  1540 3371 A5 92			lda @SMALLINT.MOD.RESULT
  1541 3373 8D C5 9E			sta RESULT
  1542 3376 A5 93			lda @SMALLINT.MOD.RESULT+1
  1543 3378 8D C6 9E			sta RESULT+1
  1544
  1545 				; -------------------  ASM Block 00000050  -------------------
  1546
  1547 337B AD C4 9E			lda range+1
  1548 337E 10 07			bpl plus
  1549
  1550 3380 AD C6 9E			lda Result+1
  1551 3383 30 18			bmi ok
  1552 3385 10 05			bpl sign
  1553
  1554 3387 AD C6 9E		plus	lda Result+1
  1555 338A 10 11			bpl ok
  1556
  1557 338C A9 00		sign 	lda #0
  1558 338E 38 ED C5 9E			sub Result
  1559 3392 8D C5 9E			sta Result
  1560
  1561 3395 A9 00			lda #0
  1562 3397 ED C6 9E			sbc Result+1
  1563 339A 8D C6 9E			sta Result+1
  1564 339D			ok
  1565
  1566 339D			l_0274
  1567 339D			@exit
  1568
  1569 				; ------------------------------------------------------------
  1570
  1571 = 9EC3			RANGE	= DATAORIGIN+$0038
  1572 = 9EC5			RESULT	= DATAORIGIN+$003A
  1573
  1574 = 9EC3			@VarData	= RANGE
  1575 = 0002			@VarDataSize	= 2
  1576
  1577 339D 60				rts						; ret
  1578 				.endl
  1579 				.endl							; overload
  1580
  1581 				; ------------------------------------------------------------
  1582 				; ------------------------------------------------------------
  1583 339E			@UnitInit
  1584
  1585 				; -------------------  ASM Block 00000060  -------------------
  1586
  1587 					.ifdef @CmdLine
  1588
  1589 					ldx #$0F
  1590 					mva:rpl $340,x IOCB@COPY,x-
  1591 					rts
  1592
  1593 				IOCB@COPY	:16 brk
  1594 					eif
  1595
  1596
  1597 339E 60				rts
  1598
  1599 				; ------------------------------------------------------------
  1600
  1601 = 0648			M_PI_2	= $0648
  1602 = 0192			D_PI_2	= $0192
  1603 = 0004			D_PI_180	= $04
  1604 = 0101			__PORTB_BANKS	= $0101
  1605 = 0000			MGTIA	= $00
  1606 = 0080			MVBXE	= $80
  1607 = 0000			VBXE_XDLADR	= $00
  1608 = 00E0			VBXE_BCBTMP	= $E0
  1609 = 0100			VBXE_BCBADR	= $0100
  1610 = 1000			VBXE_MAPADR	= $1000
  1611 = 1000			VBXE_CHBASE	= $1000
  1612 = 5000			VBXE_OVRADR	= $5000
  1613 = B000			VBXE_WINDOW	= $B000
  1614 = 0000			IDLI	= $00
  1615 = 0001			IVBL	= $01
  1616 = 0001			IVBLD	= $01
  1617 = 0002			IVBLI	= $02
  1618 = 0003			ITIM1	= $03
  1619 = 0004			ITIM2	= $04
  1620 = 0005			ITIM4	= $05
  1621 = 00FE			CH_DELCHR	= $FE
  1622 = 009B			CH_ENTER	= $9B
  1623 = 001B			CH_ESC	= $1B
  1624 = 001C			CH_CURS_UP	= $1C
  1625 = 001D			CH_CURS_DOWN	= $1D
  1626 = 001E			CH_CURS_LEFT	= $1E
  1627 = 001F			CH_CURS_RIGHT	= $1F
  1628 = 007F			CH_TAB	= $7F
  1629 = 009B			CH_EOL	= $9B
  1630 = 007D			CH_CLR	= $7D
  1631 = 00FD			CH_BELL	= $FD
  1632 = 007E			CH_DEL	= $7E
  1633 = 009C			CH_DELLINE	= $9C
  1634 = 009D			CH_INSLINE	= $9D
  1635 = 0000			PAL_PMCOLOR0	= $00
  1636 = 0001			PAL_PMCOLOR1	= $01
  1637 = 0002			PAL_PMCOLOR2	= $02
  1638 = 0003			PAL_PMCOLOR3	= $03
  1639 = 0004			PAL_COLOR0	= $04
  1640 = 0005			PAL_COLOR1	= $05
  1641 = 0006			PAL_COLOR2	= $06
  1642 = 0007			PAL_COLOR3	= $07
  1643 = 0008			PAL_COLBAK	= $08
  1644 = 0000			COLOR_BLACK	= $00
  1645 = 000E			COLOR_WHITE	= $0E
  1646 = 0032			COLOR_RED	= $32
  1647 = 0096			COLOR_CYAN	= $96
  1648 = 0068			COLOR_VIOLET	= $68
  1649 = 00C4			COLOR_GREEN	= $C4
  1650 = 0074			COLOR_BLUE	= $74
  1651 = 00EE			COLOR_YELLOW	= $EE
  1652 = 0028			COLOR_ORANGE	= $28
  1653 = 00E4			COLOR_BROWN	= $E4
  1654 = 003C			COLOR_LIGHTRED	= $3C
  1655 = 0004			COLOR_GRAY1	= $04
  1656 = 0006			COLOR_GRAY2	= $06
  1657 = 000A			COLOR_GRAY3	= $0A
  1658 = 00CC			COLOR_LIGHTGREEN	= $CC
  1659 = 007C			COLOR_LIGHTBLUE	= $7C
  1660 = 0004			FMOPENREAD	= $04
  1661 = 0008			FMOPENWRITE	= $08
  1662 = 0009			FMOPENAPPEND	= $09
  1663 = 000C			FMOPENREADWRITE	= $0C
  1664 = 9E8B			DATESEPARATOR	= DATAORIGIN+$0000
  1665 = D20A			RND	= $D20A
  1666 = 02C0			adr.PALETTE	= $02C0
  1667 339F			.var PALETTE	= adr.PALETTE .word
  1668 = D012			adr.HPALETTE	= $D012
  1669 339F			.var HPALETTE	= adr.HPALETTE .word
  1670 = 9E8C			FILEMODE	= DATAORIGIN+$0001
  1671 = 9E8D			GRAPHMODE	= DATAORIGIN+$0002
  1672 = 9E8E			IORESULT	= DATAORIGIN+$0003
  1673 = 9E8F			EOLN	= DATAORIGIN+$0004
  1674 = 9E90			SCREENWIDTH	= DATAORIGIN+$0005
  1675 = 9E92			SCREENHEIGHT	= DATAORIGIN+$0007
  1676 = 0000			adr.MEM	= $00
  1677 339F			.var MEM	= adr.MEM .word
  1678 = 9E94			RNDSEED	= DATAORIGIN+$0009
  1679
  1680 = 339F C0 02		PALETTE
  1680 = 33A1 12 D0		HPALETTE
  1680 = 33A3 00 00		MEM
  1680 				.endl							; UNIT SYSTEM
  1681
  1682 				; ------------------------------------------------------------
  1683
  1684 33A5			.local	ATARI						; UNIT
  1685
  1686 				; ------------------------------------------------------------
  1687
  1688 = 0000			DL_BLANK1	= $00
  1689 = 0010			DL_BLANK2	= $10
  1690 = 0020			DL_BLANK3	= $20
  1691 = 0030			DL_BLANK4	= $30
  1692 = 0040			DL_BLANK5	= $40
  1693 = 0050			DL_BLANK6	= $50
  1694 = 0060			DL_BLANK7	= $60
  1695 = 0070			DL_BLANK8	= $70
  1696 = 0080			DL_DLI	= $80
  1697 = 0040			DL_LMS	= $40
  1698 = 0020			DL_VSCROLL	= $20
  1699 = 0010			DL_HSCROLL	= $10
  1700 = 0001			DL_JMP	= $01
  1701 = 0041			DL_JVB	= $41
  1702 = 0002			DL_MODE_2	= $02
  1703 = 0003			DL_MODE_3	= $03
  1704 = 0004			DL_MODE_4	= $04
  1705 = 0005			DL_MODE_5	= $05
  1706 = 000E			DL_MODE_E	= $0E
  1707 = 000F			DL_MODE_F	= $0F
  1708 = 0010			IRQENS	= $10
  1709 = 0012			RTCLOK	= $12
  1710 = 0012			RTCLOK1	= $12
  1711 = 0013			RTCLOK2	= $13
  1712 = 0014			RTCLOK3	= $14
  1713 = 004D			ATRACT	= $4D
  1714 = 0052			LMARGIN	= $52
  1715 = 0053			RMARGIN	= $53
  1716 = 0054			ROWCRS	= $54
  1717 = 0055			COLCRS	= $55
  1718 = 0057			DINDEX	= $57
  1719 = 0058			SAVMSC	= $58
  1720 = 0062			PALNTS	= $62
  1721 = 006A			RAMTOP	= $6A
  1722 = 0200			VDSLST	= $0200
  1723 = 0230			SDLSTL	= $0230
  1724 = 0290			TXTROW	= $0290
  1725 = 0291			TXTCOL	= $0291
  1726 = 0293			TINDEX	= $0293
  1727 = 0294			TXTMSC	= $0294
  1728 = 022F			SDMCTL	= $022F
  1729 = 026F			GPRIOR	= $026F
  1730 = 02F0			CRSINH	= $02F0
  1731 = 02F3			CHACT	= $02F3
  1732 = 02F4			CHBAS	= $02F4
  1733 = 02FC			CH	= $02FC
  1734 = 02FD			FILDAT	= $02FD
  1735 = 02C0			PCOLR0	= $02C0
  1736 = 02C1			PCOLR1	= $02C1
  1737 = 02C2			PCOLR2	= $02C2
  1738 = 02C3			PCOLR3	= $02C3
  1739 = 02C4			COLOR0	= $02C4
  1740 = 02C5			COLOR1	= $02C5
  1741 = 02C6			COLOR2	= $02C6
  1742 = 02C7			COLOR3	= $02C7
  1743 = 02C8			COLOR4	= $02C8
  1744 = 02C8			COLBAKS	= $02C8
  1745 = D000			HPOSP0	= $D000
  1746 = D001			HPOSP1	= $D001
  1747 = D002			HPOSP2	= $D002
  1748 = D003			HPOSP3	= $D003
  1749 = D004			HPOSM0	= $D004
  1750 = D005			HPOSM1	= $D005
  1751 = D006			HPOSM2	= $D006
  1752 = D007			HPOSM3	= $D007
  1753 = D008			SIZEP0	= $D008
  1754 = D009			SIZEP1	= $D009
  1755 = D00A			SIZEP2	= $D00A
  1756 = D00B			SIZEP3	= $D00B
  1757 = D00C			SIZEM	= $D00C
  1758 = D00D			GRAFP0	= $D00D
  1759 = D00E			GRAFP1	= $D00E
  1760 = D00F			GRAFP2	= $D00F
  1761 = D010			GRAFP3	= $D010
  1762 = D011			GRAFM	= $D011
  1763 = D004			P0PF	= $D004
  1764 = D014			PAL	= $D014
  1765 = D013			TRIG3	= $D013
  1766 = D012			COLPM0	= $D012
  1767 = D013			COLPM1	= $D013
  1768 = D014			COLPM2	= $D014
  1769 = D015			COLPM3	= $D015
  1770 = D016			COLPF0	= $D016
  1771 = D017			COLPF1	= $D017
  1772 = D018			COLPF2	= $D018
  1773 = D019			COLPF3	= $D019
  1774 = D01A			COLBAK	= $D01A
  1775 = D01A			COLBK	= $D01A
  1776 = D01B			PRIOR	= $D01B
  1777 = D01D			GRACTL	= $D01D
  1778 = D01D			PMCNTL	= $D01D
  1779 = D01E			HITCLR	= $D01E
  1780 = D01F			CONSOL	= $D01F
  1781 = D200			AUDF1	= $D200
  1782 = D201			AUDC1	= $D201
  1783 = D202			AUDF2	= $D202
  1784 = D203			AUDC2	= $D203
  1785 = D204			AUDF3	= $D204
  1786 = D205			AUDC3	= $D205
  1787 = D206			AUDF4	= $D206
  1788 = D207			AUDC4	= $D207
  1789 = D208			AUDCTL	= $D208
  1790 = D209			KBCODE	= $D209
  1791 = D20E			IRQEN	= $D20E
  1792 = D20F			SKSTAT	= $D20F
  1793 = D300			PORTA	= $D300
  1794 = D301			PORTB	= $D301
  1795 = D302			PACTL	= $D302
  1796 = D400			DMACTL	= $D400
  1797 = D401			CHACTL	= $D401
  1798 = D402			DLISTL	= $D402
  1799 = D404			HSCROL	= $D404
  1800 = D405			VSCROL	= $D405
  1801 = D407			PMBASE	= $D407
  1802 = D409			CHBASE	= $D409
  1803 = D40A			WSYNC	= $D40A
  1804 = D40B			VCOUNT	= $D40B
  1805 = D40C			PENH	= $D40C
  1806 = D40D			PENV	= $D40D
  1807 = D40E			NMIEN	= $D40E
  1808 = FFFA			NMIVEC	= $FFFA
  1809 = FFFC			RESETVEC	= $FFFC
  1810 = FFFE			IRQVEC	= $FFFE
  1811
  1812 				.endl							; UNIT ATARI
  1813
  1814 				; ------------------------------------------------------------
  1815
  1816 33A5			.local	CRT						; UNIT
  1817
  1818 				; ------------------------------------------------------------
  1819
  1820 = 9EC7			TEXTATTR	= DATAORIGIN+$003C
  1821 = D01F			CONSOL	= $D01F
  1822 = 0000			CN_START_SELECT_OPTION	= $00
  1823 = 0001			CN_SELECT_OPTION	= $01
  1824 = 0002			CN_START_OPTION	= $02
  1825 = 0003			CN_OPTION	= $03
  1826 = 0004			CN_START_SELECT	= $04
  1827 = 0005			CN_SELECT	= $05
  1828 = 0006			CN_START	= $06
  1829 = 0007			CN_NONE	= $07
  1830 = 0000			BLACK	= $00
  1831 = 000F			WHITE	= $0F
  1832 = 0026			RED	= $26
  1833 = 00AC			CYAN	= $AC
  1834 = 0048			PURPLE	= $48
  1835 = 00B6			GREEN	= $B6
  1836 = 0086			BLUE	= $86
  1837 = 00DC			YELLOW	= $DC
  1838 = 0018			ORANGE	= $18
  1839 = 00F4			BROWN	= $F4
  1840 = 002A			LIGHT_RED	= $2A
  1841 = 0004			DARK_GREY	= $04
  1842 = 0008			GREY	= $08
  1843 = 00BC			LIGHT_GREEN	= $BC
  1844 = 009A			LIGHT_BLUE	= $9A
  1845 = 000C			LIGHT_GREY	= $0C
  1846 = 0000			BW40	= $00
  1847 = 0001			CO40	= $01
  1848 = 0002			BW80	= $02
  1849 = 0003			CO80	= $03
  1850 = 0007			MONO	= $07
  1851 = 0001			C40	= $01
  1852 = 0003			C80	= $03
  1853 = 0080			BLINK	= $80
  1854
  1855 				.endl							; UNIT CRT
  1856
  1857 				; ------------------------------------------------------------
  1858
  1859 33A5			.local	TYPES						; UNIT
  1860
  1861 				; ------------------------------------------------------------
  1862
  1863 				.endl							; UNIT TYPES
  1864
  1865 				; ------------------------------------------------------------
  1866
  1867 33A5			.local	GRAPH						; UNIT
  1868
  1869 				; ------------------------------------------------------------
  1870
  1871 = 0080			CURRENTDRIVER	= $80
  1872 = 0000			DETECT	= $00
  1873 = 0001			CGA	= $01
  1874 = 0002			MCGA	= $02
  1875 = 0003			EGA	= $03
  1876 = 0004			EGA64	= $04
  1877 = 0005			EGAMONO	= $05
  1878 = 0006			LOWRES	= $06
  1879 = 0007			HERCMONO	= $07
  1880 = 0009			VGA	= $09
  1881 = 000A			VESA	= $0A
  1882 = 000B			D1BIT	= $0B
  1883 = 000C			D2BIT	= $0C
  1884 = 000D			D4BIT	= $0D
  1885 = 000E			D6BIT	= $0E
  1886 = 000F			D8BIT	= $0F
  1887 = 0010			D12BIT	= $10
  1888 = 0018			M640X400	= $18
  1889 = 0018			M640X480	= $18
  1890 = 0001			GROK	= $01
  1891 = 00FF			GRNOINITGRAPH	= $FF
  1892 = 00FE			GRNOTDETECTED	= $FE
  1893 = 00FD			GRFILENOTFOUND	= $FD
  1894 = 00FC			GRINVALIDDRIVER	= $FC
  1895 = 00FB			GRNOLOADMEM	= $FB
  1896 = 00FA			GRNOSCANMEM	= $FA
  1897 = 00F9			GRNOFLOODMEM	= $F9
  1898 = 00F8			GRFONTNOTFOUND	= $F8
  1899 = 00F7			GRNOFONTMEM	= $F7
  1900 = 00F6			GRINVALIDMODE	= $F6
  1901 = 00F5			GRERROR	= $F5
  1902 = 00F4			GRIOERROR	= $F4
  1903 = 00F3			GRINVALIDFONT	= $F3
  1904 = 00F2			GRINVALIDFONTNUM	= $F2
  1905 = 00EE			GRINVALIDVERSION	= $EE
  1906 = 0000			CGAC0	= $00
  1907 = 0001			CGAC1	= $01
  1908 = 0002			CGAC2	= $02
  1909 = 0003			CGAC3	= $03
  1910 = 0004			CGAHI	= $04
  1911 = 0000			MCGAC0	= $00
  1912 = 0001			MCGAC1	= $01
  1913 = 0002			MCGAC2	= $02
  1914 = 0003			MCGAC3	= $03
  1915 = 0004			MCGAMED	= $04
  1916 = 0005			MCGAHI	= $05
  1917 = 0000			EGALO	= $00
  1918 = 0001			EGAHI	= $01
  1919 = 0000			EGA64LO	= $00
  1920 = 0001			EGA64HI	= $01
  1921 = 0003			EGAMONOHI	= $03
  1922 = 000A			VGALO	= $0A
  1923 = 001F			VGAMED	= $1F
  1924 = 0018			VGAHI	= $18
  1925 = 9EC8			GRAPHRESULT	= DATAORIGIN+$003D
  1926 = 9EC9			GETCOLOR	= DATAORIGIN+$003E
  1927 = 9ECA			VIDEORAM	= DATAORIGIN+$003F
  1928 = 9ECC			adr.LASTARCCOORDS	= DATAORIGIN+$0041	; [12] RECORD
  1929 33A5			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
  1930 = 9ECC			LASTARCCOORDS.X	= DATAORIGIN+$0041
  1931 = 9ECE			LASTARCCOORDS.Y	= DATAORIGIN+$0043
  1932 = 9ED0			LASTARCCOORDS.XSTART	= DATAORIGIN+$0045
  1933 = 9ED2			LASTARCCOORDS.YSTART	= DATAORIGIN+$0047
  1934 = 9ED4			LASTARCCOORDS.XEND	= DATAORIGIN+$0049
  1935 = 9ED6			LASTARCCOORDS.YEND	= DATAORIGIN+$004B
  1936 = 9ED8			WIN_LEFT	= DATAORIGIN+$004D
  1937 = 9EDA			WIN_RIGHT	= DATAORIGIN+$004F
  1938 = 9EDC			WIN_TOP	= DATAORIGIN+$0051
  1939 = 9EDE			WIN_BOTTOM	= DATAORIGIN+$0053
  1940 = 9EE0			SCANLINE_WIDTH	= DATAORIGIN+$0055
  1941 = 9EE1			CURRENTX	= DATAORIGIN+$0056
  1942 = 9EE3			CURRENTY	= DATAORIGIN+$0058
  1943
  1944 = 33A5 CC 9E		LASTARCCOORDS
  1944 				.endl							; UNIT GRAPH
  1945
  1946 				; ------------------------------------------------------------
  1947
  1948 33A7			.local	VBXE						; UNIT
  1949
  1950 33A7			.local	SETTOPBORDER					; PROCEDURE | ASSEMBLER | REGISTER
  1951 33A7 85 8A			sta A
  1952
  1953 				; -------------------  ASM Block 00000100  -------------------
  1954
  1955 33A9				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33A9 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33AB A0 5F		        ldy     #FX_MEMS
     4 33AD 91 80		        sta     (fxptr),y
  1956
  1957 33AF A5 8A			lda a
  1958 33B1 38 E9 01			sub #1
  1959
  1960 33B4 A0 02			ldy #s@xdl.RPTL_
  1961 33B6 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1962
  1963 33B9				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33B9 A9 00		        lda     #$00
     3 33BB A0 5F		        ldy     #FX_MEMS
     4 33BD 91 80		        sta     (fxptr),y
  1964
  1965 				; ------------------------------------------------------------
  1966
  1967 = 008A			A	= :EDX
  1968
  1969 33BF			@exit
  1970 					.ifdef @new
  1971 					lda <@VarData
  1972 					sta :ztmp
  1973 					lda >@VarData
  1974 					ldy #@VarDataSize-1
  1975 					jmp @FreeMem
  1976 					els
  1977 33BF 60				rts						; ret
  1978 					eif
  1979 				.endl
  1980
  1981 33C0			.local	SETXDLHEIGHT					; PROCEDURE | ASSEMBLER | REGISTER
  1982 33C0 85 8A			sta A
  1983
  1984 				; -------------------  ASM Block 00000101  -------------------
  1985
  1986 33C2				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 33C2 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 33C4 A0 5F		        ldy     #FX_MEMS
     4 33C6 91 80		        sta     (fxptr),y
  1987
  1988 33C8 A5 8A			lda a
  1989 33CA 38 E9 01			sub #1
  1990
  1991 33CD A0 05			ldy #s@xdl.RPTL
  1992 33CF 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  1993
  1994 33D2				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 33D2 A9 00		        lda     #$00
     3 33D4 A0 5F		        ldy     #FX_MEMS
     4 33D6 91 80		        sta     (fxptr),y
  1995
  1996 				; ------------------------------------------------------------
  1997
  1998 = 008A			A	= :EDX
  1999
  2000 33D8			@exit
  2001 					.ifdef @new
  2002 					lda <@VarData
  2003 					sta :ztmp
  2004 					lda >@VarData
  2005 					ldy #@VarDataSize-1
  2006 					jmp @FreeMem
  2007 					els
  2008 33D8 60				rts						; ret
  2009 					eif
  2010 				.endl
  2011
  2012 33D9			.local	VBXEMEMORYBANK					; PROCEDURE | ASSEMBLER
  2013 33D9 8D F9 9E			sta B
  2014
  2015 				; -------------------  ASM Block 00000113  -------------------
  2016
  2017 33DC				fxs FX_MEMS b
Macro: FXS [Source: vbxe.hea]
     2 33DC AD F9 9E		        lda     B
     3 33DF A0 5F		        ldy     #FX_MEMS
     4 33E1 91 80		        sta     (fxptr),y
  2018
  2019 				; ------------------------------------------------------------
  2020
  2021 = 9EF9			B	= DATAORIGIN+$006E
  2022
  2023 = 9EF9			@VarData	= B
  2024 = 0001			@VarDataSize	= 1
  2025
  2026 33E3			@exit
  2027 					.ifdef @new
  2028 					lda <@VarData
  2029 					sta :ztmp
  2030 					lda >@VarData
  2031 					ldy #@VarDataSize-1
  2032 					jmp @FreeMem
  2033 					els
  2034 33E3 60				rts						; ret
  2035 					eif
  2036 				.endl
  2037
  2038 33E4			.local	READVBXEMEMORYBYTE				; FUNCTION
  2039
  2040 				; optimize OK (vbxe_memorystream.inc), line = 20
  2041
  2042 33E4 AC FA 9E 84 84 AC + 	mwy POSITION :bp2
  2043 33EE A0 02			ldy #$02
  2044 33F0 B1 84			lda (:bp2),y
  2045 33F2 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2046 33F4 88				dey
  2047 33F5 B1 84			lda (:bp2),y
  2048 33F7 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2049 33F9 6A				ror @
  2050 33FA 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2051 33FC 6A				ror @
  2052 33FD 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2053 33FF 6A				ror @
  2054 3400 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2055 3402 6A				ror @
  2056 3403 09 80			ora #$80
  2057 3405 8D FD 9E			sta BNK
  2058
  2059 				; optimize OK (vbxe_memorystream.inc), line = 21
  2060
  2061 3408 88				dey
  2062 3409 B1 84			lda (:bp2),y
  2063 340B 8D FE 9E			sta ADR
  2064 340E C8				iny
  2065 340F B1 84			lda (:bp2),y
  2066 3411 29 0F			and #$0F
  2067 3413 09 B0			ora #$B0
  2068 3415 8D FF 9E			sta ADR+1
  2069
  2070 				; optimize OK (vbxe_memorystream.inc), line = 23
  2071
  2072 3418 AD FD 9E			lda BNK
  2073 341B 20 D9 33			jsr VBXEMEMORYBANK
  2074
  2075 				; optimize OK (vbxe_memorystream.inc), line = 25
  2076
  2077 341E AC FF 9E			ldy ADR+1
  2078 3421 84 83			sty :bp+1
  2079 3423 AC FE 9E			ldy ADR
  2080 3426 B1 82			lda (:bp),y
  2081 3428 8D FC 9E			sta RESULT
  2082
  2083 				; optimize OK (vbxe_memorystream.inc), line = 27
  2084
  2085 342B AC FA 9E 84 84 AC + 	mwy POSITION :bp2
  2086 3435 A0 00			ldy #$00
  2087 3437 B1 84			lda (:bp2),y
  2088 3439 18 69 01			add #$01
  2089 343C 91 84			sta (:bp2),y
  2090 343E C8				iny
  2091 343F B1 84			lda (:bp2),y
  2092 3441 69 00			adc #$00
  2093 3443 91 84			sta (:bp2),y
  2094 3445 C8				iny
  2095 3446 B1 84			lda (:bp2),y
  2096 3448 69 00			adc #$00
  2097 344A 91 84			sta (:bp2),y
  2098 344C C8				iny
  2099 344D B1 84			lda (:bp2),y
  2100 344F 69 00			adc #$00
  2101 3451 91 84			sta (:bp2),y
  2102 3453			@exit
  2103
  2104 				; ------------------------------------------------------------
  2105
  2106 = 9EFA			POSITION	= DATAORIGIN+$006F
  2107 = 9EFC			RESULT	= DATAORIGIN+$0071
  2108 = 9EFD			BNK	= DATAORIGIN+$0072
  2109 = 9EFE			ADR	= DATAORIGIN+$0073
  2110
  2111 = 9EFA			@VarData	= POSITION
  2112 = 0005			@VarDataSize	= 5
  2113
  2114 3453 60				rts						; ret
  2115 				.endl
  2116
  2117 3454			.local	WRITEVBXEMEMORYBYTE				; PROCEDURE
  2118
  2119 				; optimize OK (vbxe_memorystream.inc), line = 39
  2120
  2121 3454 AC 00 9F 84 84 AC + 	mwy POSITION :bp2
  2122 345E A0 02			ldy #$02
  2123 3460 B1 84			lda (:bp2),y
  2124 3462 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2125 3464 88				dey
  2126 3465 B1 84			lda (:bp2),y
  2127 3467 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2128 3469 6A				ror @
  2129 346A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2130 346C 6A				ror @
  2131 346D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2132 346F 6A				ror @
  2133 3470 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2134 3472 6A				ror @
  2135 3473 09 80			ora #$80
  2136 3475 8D 03 9F			sta BNK
  2137
  2138 				; optimize OK (vbxe_memorystream.inc), line = 40
  2139
  2140 3478 88				dey
  2141 3479 B1 84			lda (:bp2),y
  2142 347B 8D 04 9F			sta ADR
  2143 347E C8				iny
  2144 347F B1 84			lda (:bp2),y
  2145 3481 29 0F			and #$0F
  2146 3483 09 B0			ora #$B0
  2147 3485 8D 05 9F			sta ADR+1
  2148
  2149 				; optimize OK (vbxe_memorystream.inc), line = 42
  2150
  2151 3488 AD 03 9F			lda BNK
  2152 348B 20 D9 33			jsr VBXEMEMORYBANK
  2153
  2154 				; optimize OK (vbxe_memorystream.inc), line = 44
  2155
  2156 348E AC 05 9F			ldy ADR+1
  2157 3491 84 83			sty :bp+1
  2158 3493 AC 04 9F			ldy ADR
  2159 3496 AD 02 9F			lda A
  2160 3499 91 82			sta (:bp),y
  2161
  2162 				; optimize OK (vbxe_memorystream.inc), line = 46
  2163
  2164 349B AC 00 9F 84 84 AC + 	mwy POSITION :bp2
  2165 34A5 A0 00			ldy #$00
  2166 34A7 B1 84			lda (:bp2),y
  2167 34A9 18 69 01			add #$01
  2168 34AC 91 84			sta (:bp2),y
  2169 34AE C8				iny
  2170 34AF B1 84			lda (:bp2),y
  2171 34B1 69 00			adc #$00
  2172 34B3 91 84			sta (:bp2),y
  2173 34B5 C8				iny
  2174 34B6 B1 84			lda (:bp2),y
  2175 34B8 69 00			adc #$00
  2176 34BA 91 84			sta (:bp2),y
  2177 34BC C8				iny
  2178 34BD B1 84			lda (:bp2),y
  2179 34BF 69 00			adc #$00
  2180 34C1 91 84			sta (:bp2),y
  2181
  2182 				; ------------------------------------------------------------
  2183
  2184 = 9F00			POSITION	= DATAORIGIN+$0075
  2185 = 9F02			A	= DATAORIGIN+$0077
  2186 = 9F03			BNK	= DATAORIGIN+$0078
  2187 = 9F04			ADR	= DATAORIGIN+$0079
  2188
  2189 = 9F00			@VarData	= POSITION
  2190 = 0006			@VarDataSize	= 6
  2191
  2192 34C3			@exit
  2193 					.ifdef @new
  2194 					lda <@VarData
  2195 					sta :ztmp
  2196 					lda >@VarData
  2197 					ldy #@VarDataSize-1
  2198 					jmp @FreeMem
  2199 					els
  2200 34C3 60				rts						; ret
  2201 					eif
  2202 				.endl
  2203
  2204 34C4			.local	TVBXEMEMORYSTREAM.READBUFFER			; PROCEDURE
  2205 34C4 8D 0E 9F			sta TVBXEMEMORYSTREAM
  2206 34C7 8C 0F 9F			sty TVBXEMEMORYSTREAM+1
  2207 34CA 8D 14 9F			sta POSITION
  2208 34CD 8C 15 9F			sty POSITION+1
  2209 34D0 18 69 04			add #4
  2210 34D3 90 01			scc
  2211 34D5 C8				iny
  2212 34D6 8D 16 9F			sta SIZE
  2213 34D9 8C 17 9F			sty SIZE+1
  2214
  2215 				; optimize OK (vbxe_memorystream.inc), line = 87
  2216
  2217 34DC AC 14 9F 84 84 AC + 	mwy POSITION :bp2
  2218 34E6 A0 02			ldy #$02
  2219 34E8 B1 84			lda (:bp2),y
  2220 34EA 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2221 34EC 88				dey
  2222 34ED B1 84			lda (:bp2),y
  2223 34EF 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2224 34F1 6A				ror @
  2225 34F2 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2226 34F4 6A				ror @
  2227 34F5 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2228 34F7 6A				ror @
  2229 34F8 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2230 34FA 6A				ror @
  2231 34FB 09 80			ora #$80
  2232 34FD 8D 18 9F			sta BNK
  2233
  2234 				; optimize OK (vbxe_memorystream.inc), line = 88
  2235
  2236 3500 88				dey
  2237 3501 B1 84			lda (:bp2),y
  2238 3503 8D 19 9F			sta ADR
  2239 3506 C8				iny
  2240 3507 B1 84			lda (:bp2),y
  2241 3509 29 0F			and #$0F
  2242 350B 09 B0			ora #$B0
  2243 350D 8D 1A 9F			sta ADR+1
  2244
  2245 				; optimize OK (vbxe_memorystream.inc), line = 90
  2246
  2247 3510 AD 18 9F			lda BNK
  2248 3513 20 D9 33			jsr VBXEMEMORYBANK
  2249
  2250 				; optimize OK (vbxe_memorystream.inc), line = 92
  2251
  2252 3516 AD 10 9F			lda BUFFER
  2253 3519 8D 1D 9F			sta DST
  2254 351C AD 11 9F			lda BUFFER+1
  2255 351F 8D 1E 9F			sta DST+1
  2256
  2257 				; optimize OK (vbxe_memorystream.inc), line = 94
  2258
  2259 3522 A9 00			lda #$00
  2260 3524 8D 1B 9F			sta I
  2261 3527 8D 1C 9F			sta I+1
  2262 352A AD 12 9F			lda COUNT
  2263 352D 38 E9 01			sub #$01
  2264 3530 8D 43 35			sta @FORTMP_0393_0
  2265 3533 AD 13 9F			lda COUNT+1
  2266 3536 E9 00			sbc #$00
  2267 3538 8D 3C 35			sta @FORTMP_0393_1
  2268
  2269 353B			l_0396
  2270 				; --- ForToDoCondition
  2271 353B A9 00			lda @FORTMP_0393_1::#$00
  2272 353D CD 1C 9F			cmp I+1
  2273 3540 D0 05			bne @+
  2274 3542 A9 00			lda @FORTMP_0393_0::#$00
  2275 3544 CD 1B 9F			cmp I
  2276 				@
  2277 3547 90 4F			jcc l_03A2
  2278
  2279 				; optimize OK (vbxe_memorystream.inc), line = 96
  2280
  2281 3549 AC 1A 9F			ldy ADR+1
  2282 354C 84 83			sty :bp+1
  2283 354E AC 19 9F			ldy ADR
  2284 3551 B1 82			lda (:bp),y
  2285 3553 AC 1E 9F 84 83		mvy DST+1 :bp+1
  2286 3558 AC 1D 9F			ldy DST
  2287 355B 91 82			sta (:bp),y
  2288
  2289 				; optimize FAIL (0, vbxe_memorystream.inc), line = 98
  2290
  2291 355D EE 19 9F			inc ADR
  2292 3560 D0 03			sne
  2293 3562 EE 1A 9F			inc ADR+1
  2294
  2295 				; optimize FAIL (0, vbxe_memorystream.inc), line = 99
  2296
  2297 3565 EE 1D 9F			inc DST
  2298 3568 D0 03			sne
  2299 356A EE 1E 9F			inc DST+1
  2300
  2301 				; optimize OK (vbxe_memorystream.inc), line = 101
  2302
  2303 356D AD 1A 9F			lda ADR+1
  2304 3570 C9 C0			cmp #$C0
  2305 3572 90 1A			jcc l_03C1
  2306 3574 D0 05			bne @+
  2307 3576 AD 19 9F			lda ADR
  2308 3579 90 13			jcc l_03C1
  2309 				@
  2310
  2311 				; optimize FAIL (0, vbxe_memorystream.inc), line = 102
  2312
  2313 357B EE 18 9F			inc BNK
  2314
  2315 				; optimize OK (vbxe_memorystream.inc), line = 103
  2316
  2317 357E AD 18 9F			lda BNK
  2318 3581 20 D9 33			jsr VBXEMEMORYBANK
  2319
  2320 				; optimize OK (vbxe_memorystream.inc), line = 104
  2321
  2322 3584 A9 00			lda #$00
  2323 3586 8D 19 9F			sta ADR
  2324 3589 A9 B0			lda #$B0
  2325 358B 8D 1A 9F			sta ADR+1
  2326 358E			l_03C1
  2327
  2328 				; --- ForToDoEpilog
  2329 358E EE 1B 9F			inc I
  2330 3591 D0 A8			jne l_0396
  2331 3593 EE 1C 9F			inc I+1
  2332 3596 D0 A3			jne l_0396
  2333 3598			l_03A2
  2334
  2335 				; optimize OK (vbxe_memorystream.inc), line = 109
  2336
  2337 3598 A9 00			lda #$00
  2338 359A 20 D9 33			jsr VBXEMEMORYBANK
  2339
  2340 				; optimize OK (vbxe_memorystream.inc), line = 111
  2341
  2342 359D AC 14 9F 84 84 AC + 	mwy POSITION :bp2
  2343 35A7 A0 00			ldy #$00
  2344 35A9 B1 84			lda (:bp2),y
  2345 35AB 18 6D 12 9F			add COUNT
  2346 35AF 91 84			sta (:bp2),y
  2347 35B1 C8				iny
  2348 35B2 B1 84			lda (:bp2),y
  2349 35B4 6D 13 9F			adc COUNT+1
  2350 35B7 91 84			sta (:bp2),y
  2351 35B9 C8				iny
  2352 35BA B1 84			lda (:bp2),y
  2353 35BC 69 00			adc #$00
  2354 35BE 91 84			sta (:bp2),y
  2355 35C0 C8				iny
  2356 35C1 B1 84			lda (:bp2),y
  2357 35C3 69 00			adc #$00
  2358 35C5 91 84			sta (:bp2),y
  2359
  2360 				; ------------------------------------------------------------
  2361
  2362 = 9F0E			TVBXEMEMORYSTREAM	= DATAORIGIN+$0083
  2363 = 9F10			BUFFER	= DATAORIGIN+$0085
  2364 = 9F12			COUNT	= DATAORIGIN+$0087
  2365 = 9F14			POSITION	= DATAORIGIN+$0089
  2366 = 9F16			SIZE	= DATAORIGIN+$008B
  2367 = 9F18			BNK	= DATAORIGIN+$008D
  2368 = 9F19			ADR	= DATAORIGIN+$008E
  2369 = 9F1B			I	= DATAORIGIN+$0090
  2370 = 9F1D			DST	= DATAORIGIN+$0092
  2371
  2372 = 9F0E			@VarData	= TVBXEMEMORYSTREAM
  2373 = 0011			@VarDataSize	= 17
  2374
  2375 35C7			@exit
  2376 					.ifdef @new
  2377 					lda <@VarData
  2378 					sta :ztmp
  2379 					lda >@VarData
  2380 					ldy #@VarDataSize-1
  2381 					jmp @FreeMem
  2382 					els
  2383 35C7 60				rts						; ret
  2384 					eif
  2385 				.endl
  2386
  2387 35C8			.local	TVBXEMEMORYSTREAM.WRITEBUFFER			; PROCEDURE
  2388 35C8 8D 21 9F			sta TVBXEMEMORYSTREAM
  2389 35CB 8C 22 9F			sty TVBXEMEMORYSTREAM+1
  2390 35CE 8D 27 9F			sta POSITION
  2391 35D1 8C 28 9F			sty POSITION+1
  2392 35D4 18 69 04			add #4
  2393 35D7 90 01			scc
  2394 35D9 C8				iny
  2395 35DA 8D 29 9F			sta SIZE
  2396 35DD 8C 2A 9F			sty SIZE+1
  2397
  2398 				; optimize OK (vbxe_memorystream.inc), line = 124
  2399
  2400 35E0 AC 27 9F 84 84 AC + 	mwy POSITION :bp2
  2401 35EA A0 02			ldy #$02
  2402 35EC B1 84			lda (:bp2),y
  2403 35EE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  2404 35F0 88				dey
  2405 35F1 B1 84			lda (:bp2),y
  2406 35F3 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2407 35F5 6A				ror @
  2408 35F6 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2409 35F8 6A				ror @
  2410 35F9 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2411 35FB 6A				ror @
  2412 35FC 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
  2413 35FE 6A				ror @
  2414 35FF 09 80			ora #$80
  2415 3601 8D 2B 9F			sta BNK
  2416
  2417 				; optimize OK (vbxe_memorystream.inc), line = 125
  2418
  2419 3604 88				dey
  2420 3605 B1 84			lda (:bp2),y
  2421 3607 8D 2C 9F			sta ADR
  2422 360A C8				iny
  2423 360B B1 84			lda (:bp2),y
  2424 360D 29 0F			and #$0F
  2425 360F 09 B0			ora #$B0
  2426 3611 8D 2D 9F			sta ADR+1
  2427
  2428 				; optimize OK (vbxe_memorystream.inc), line = 127
  2429
  2430 3614 AD 2B 9F			lda BNK
  2431 3617 20 D9 33			jsr VBXEMEMORYBANK
  2432
  2433 				; optimize OK (vbxe_memorystream.inc), line = 129
  2434
  2435 361A AD 23 9F			lda BUFFER
  2436 361D 8D 30 9F			sta SRC
  2437 3620 AD 24 9F			lda BUFFER+1
  2438 3623 8D 31 9F			sta SRC+1
  2439
  2440 				; optimize OK (vbxe_memorystream.inc), line = 131
  2441
  2442 3626 A9 00			lda #$00
  2443 3628 8D 2E 9F			sta I
  2444 362B 8D 2F 9F			sta I+1
  2445 362E AD 25 9F			lda COUNT
  2446 3631 38 E9 01			sub #$01
  2447 3634 8D 47 36			sta @FORTMP_0409_0
  2448 3637 AD 26 9F			lda COUNT+1
  2449 363A E9 00			sbc #$00
  2450 363C 8D 40 36			sta @FORTMP_0409_1
  2451
  2452 363F			l_040C
  2453 				; --- ForToDoCondition
  2454 363F A9 00			lda @FORTMP_0409_1::#$00
  2455 3641 CD 2F 9F			cmp I+1
  2456 3644 D0 05			bne @+
  2457 3646 A9 00			lda @FORTMP_0409_0::#$00
  2458 3648 CD 2E 9F			cmp I
  2459 				@
  2460 364B 90 53			jcc l_0418
  2461
  2462 				; optimize OK (vbxe_memorystream.inc), line = 133
  2463
  2464 364D AC 30 9F 84 84 AC + 	mwy SRC :bp2
  2465 3657 A0 00			ldy #$00
  2466 3659 B1 84			lda (:bp2),y
  2467 365B AC 2D 9F			ldy ADR+1
  2468 365E 84 83			sty :bp+1
  2469 3660 AC 2C 9F			ldy ADR
  2470 3663 91 82			sta (:bp),y
  2471
  2472 				; optimize FAIL (0, vbxe_memorystream.inc), line = 135
  2473
  2474 3665 EE 2C 9F			inc ADR
  2475 3668 D0 03			sne
  2476 366A EE 2D 9F			inc ADR+1
  2477
  2478 				; optimize FAIL (0, vbxe_memorystream.inc), line = 136
  2479
  2480 366D EE 30 9F			inc SRC
  2481 3670 D0 03			sne
  2482 3672 EE 31 9F			inc SRC+1
  2483
  2484 				; optimize OK (vbxe_memorystream.inc), line = 138
  2485
  2486 3675 AD 2D 9F			lda ADR+1
  2487 3678 C9 C0			cmp #$C0
  2488 367A 90 1A			jcc l_0437
  2489 367C D0 05			bne @+
  2490 367E AD 2C 9F			lda ADR
  2491 3681 90 13			jcc l_0437
  2492 				@
  2493
  2494 				; optimize FAIL (0, vbxe_memorystream.inc), line = 139
  2495
  2496 3683 EE 2B 9F			inc BNK
  2497
  2498 				; optimize OK (vbxe_memorystream.inc), line = 140
  2499
  2500 3686 AD 2B 9F			lda BNK
  2501 3689 20 D9 33			jsr VBXEMEMORYBANK
  2502
  2503 				; optimize OK (vbxe_memorystream.inc), line = 141
  2504
  2505 368C A9 00			lda #$00
  2506 368E 8D 2C 9F			sta ADR
  2507 3691 A9 B0			lda #$B0
  2508 3693 8D 2D 9F			sta ADR+1
  2509 3696			l_0437
  2510
  2511 				; --- ForToDoEpilog
  2512 3696 EE 2E 9F			inc I
  2513 3699 D0 A4			jne l_040C
  2514 369B EE 2F 9F			inc I+1
  2515 369E D0 9F			jne l_040C
  2516 36A0			l_0418
  2517
  2518 				; optimize OK (vbxe_memorystream.inc), line = 146
  2519
  2520 36A0 A9 00			lda #$00
  2521 36A2 20 D9 33			jsr VBXEMEMORYBANK
  2522
  2523 				; optimize OK (vbxe_memorystream.inc), line = 148
  2524
  2525 36A5 AC 27 9F 84 84 AC + 	mwy POSITION :bp2
  2526 36AF A0 00			ldy #$00
  2527 36B1 B1 84			lda (:bp2),y
  2528 36B3 18 6D 25 9F			add COUNT
  2529 36B7 91 84			sta (:bp2),y
  2530 36B9 C8				iny
  2531 36BA B1 84			lda (:bp2),y
  2532 36BC 6D 26 9F			adc COUNT+1
  2533 36BF 91 84			sta (:bp2),y
  2534 36C1 C8				iny
  2535 36C2 B1 84			lda (:bp2),y
  2536 36C4 69 00			adc #$00
  2537 36C6 91 84			sta (:bp2),y
  2538 36C8 C8				iny
  2539 36C9 B1 84			lda (:bp2),y
  2540 36CB 69 00			adc #$00
  2541 36CD 91 84			sta (:bp2),y
  2542
  2543 				; ------------------------------------------------------------
  2544
  2545 = 9F21			TVBXEMEMORYSTREAM	= DATAORIGIN+$0096
  2546 = 9F23			BUFFER	= DATAORIGIN+$0098
  2547 = 9F25			COUNT	= DATAORIGIN+$009A
  2548 = 9F27			POSITION	= DATAORIGIN+$009C
  2549 = 9F29			SIZE	= DATAORIGIN+$009E
  2550 = 9F2B			BNK	= DATAORIGIN+$00A0
  2551 = 9F2C			ADR	= DATAORIGIN+$00A1
  2552 = 9F2E			I	= DATAORIGIN+$00A3
  2553 = 9F30			SRC	= DATAORIGIN+$00A5
  2554
  2555 = 9F21			@VarData	= TVBXEMEMORYSTREAM
  2556 = 0011			@VarDataSize	= 17
  2557
  2558 36CF			@exit
  2559 					.ifdef @new
  2560 					lda <@VarData
  2561 					sta :ztmp
  2562 					lda >@VarData
  2563 					ldy #@VarDataSize-1
  2564 					jmp @FreeMem
  2565 					els
  2566 36CF 60				rts						; ret
  2567 					eif
  2568 				.endl
  2569
  2570 36D0			.local	TVBXEMEMORYSTREAM.READBYTE			; FUNCTION
  2571 36D0 8D 34 9F			sta TVBXEMEMORYSTREAM
  2572 36D3 8C 35 9F			sty TVBXEMEMORYSTREAM+1
  2573 36D6 8D 37 9F			sta POSITION
  2574 36D9 8C 38 9F			sty POSITION+1
  2575 36DC 18 69 04			add #4
  2576 36DF 90 01			scc
  2577 36E1 C8				iny
  2578 36E2 8D 39 9F			sta SIZE
  2579 36E5 8C 3A 9F			sty SIZE+1
  2580
  2581 				; optimize OK (vbxe_memorystream.inc), line = 158
  2582
  2583 36E8 AD 37 9F			lda POSITION
  2584 36EB 8D FA 9E			sta READVBXEMEMORYBYTE.POSITION
  2585 36EE AD 38 9F			lda POSITION+1
  2586 36F1 8D FB 9E			sta READVBXEMEMORYBYTE.POSITION+1
  2587 36F4 20 E4 33			jsr READVBXEMEMORYBYTE
  2588 36F7 AD FC 9E			lda READVBXEMEMORYBYTE.RESULT
  2589 36FA 8D 36 9F			sta RESULT
  2590
  2591 				; optimize OK (vbxe_memorystream.inc), line = 160
  2592
  2593 36FD A9 00			lda #$00
  2594 36FF 20 D9 33			jsr VBXEMEMORYBANK
  2595 3702			@exit
  2596
  2597 				; ------------------------------------------------------------
  2598
  2599 = 9F34			TVBXEMEMORYSTREAM	= DATAORIGIN+$00A9
  2600 = 9F36			RESULT	= DATAORIGIN+$00AB
  2601 = 9F37			POSITION	= DATAORIGIN+$00AC
  2602 = 9F39			SIZE	= DATAORIGIN+$00AE
  2603
  2604 = 9F34			@VarData	= TVBXEMEMORYSTREAM
  2605 = 0006			@VarDataSize	= 6
  2606
  2607 3702 60				rts						; ret
  2608 				.endl
  2609
  2610 3703			.local	TVBXEMEMORYSTREAM.WRITEBYTE			; PROCEDURE
  2611 3703 8D 43 9F			sta TVBXEMEMORYSTREAM
  2612 3706 8C 44 9F			sty TVBXEMEMORYSTREAM+1
  2613 3709 8D 46 9F			sta POSITION
  2614 370C 8C 47 9F			sty POSITION+1
  2615 370F 18 69 04			add #4
  2616 3712 90 01			scc
  2617 3714 C8				iny
  2618 3715 8D 48 9F			sta SIZE
  2619 3718 8C 49 9F			sty SIZE+1
  2620
  2621 				; optimize OK (vbxe_memorystream.inc), line = 198
  2622
  2623 371B AD 46 9F			lda POSITION
  2624 371E 8D 00 9F			sta WRITEVBXEMEMORYBYTE.POSITION
  2625 3721 AD 47 9F			lda POSITION+1
  2626 3724 8D 01 9F			sta WRITEVBXEMEMORYBYTE.POSITION+1
  2627 3727 AD 45 9F			lda B
  2628 372A 8D 02 9F			sta WRITEVBXEMEMORYBYTE.A
  2629 372D 20 54 34			jsr WRITEVBXEMEMORYBYTE
  2630
  2631 				; optimize OK (vbxe_memorystream.inc), line = 200
  2632
  2633 3730 A9 00			lda #$00
  2634 3732 20 D9 33			jsr VBXEMEMORYBANK
  2635
  2636 				; ------------------------------------------------------------
  2637
  2638 = 9F43			TVBXEMEMORYSTREAM	= DATAORIGIN+$00B8
  2639 = 9F45			B	= DATAORIGIN+$00BA
  2640 = 9F46			POSITION	= DATAORIGIN+$00BB
  2641 = 9F48			SIZE	= DATAORIGIN+$00BD
  2642
  2643 = 9F43			@VarData	= TVBXEMEMORYSTREAM
  2644 = 0007			@VarDataSize	= 7
  2645
  2646 3735			@exit
  2647 					.ifdef @new
  2648 					lda <@VarData
  2649 					sta :ztmp
  2650 					lda >@VarData
  2651 					ldy #@VarDataSize-1
  2652 					jmp @FreeMem
  2653 					els
  2654 3735 60				rts						; ret
  2655 					eif
  2656 				.endl
  2657
  2658 3736			.local	TVBXEMEMORYSTREAM.CLEAR				; PROCEDURE
  2659 3736 8D 52 9F			sta TVBXEMEMORYSTREAM
  2660 3739 8C 53 9F			sty TVBXEMEMORYSTREAM+1
  2661 373C 8D 54 9F			sta POSITION
  2662 373F 8C 55 9F			sty POSITION+1
  2663 3742 18 69 04			add #4
  2664 3745 90 01			scc
  2665 3747 C8				iny
  2666 3748 8D 56 9F			sta SIZE
  2667 374B 8C 57 9F			sty SIZE+1
  2668
  2669 				; optimize OK (vbxe_memorystream.inc), line = 239
  2670
  2671 374E AC 54 9F 84 84 AC + 	mwy POSITION :bp2
  2672 3758 A0 00			ldy #$00
  2673 375A B1 84			lda (:bp2),y
  2674 375C 8D 58 9F			sta ADR
  2675 375F C8				iny
  2676 3760 B1 84			lda (:bp2),y
  2677 3762 8D 59 9F			sta ADR+1
  2678 3765 C8				iny
  2679 3766 B1 84			lda (:bp2),y
  2680 3768 8D 5A 9F			sta ADR+2
  2681 376B C8				iny
  2682 376C B1 84			lda (:bp2),y
  2683 376E 8D 5B 9F			sta ADR+3
  2684
  2685 				; optimize OK (vbxe_memorystream.inc), line = 240
  2686
  2687 3771 AC 56 9F 84 84 AC + 	mwy SIZE :bp2
  2688 377B A0 00			ldy #$00
  2689 377D B1 84			lda (:bp2),y
  2690 377F 8D 5C 9F			sta SIZ
  2691 3782 C8				iny
  2692 3783 B1 84			lda (:bp2),y
  2693 3785 8D 5D 9F			sta SIZ+1
  2694 3788 C8				iny
  2695 3789 B1 84			lda (:bp2),y
  2696 378B 8D 5E 9F			sta SIZ+2
  2697 378E C8				iny
  2698 378F B1 84			lda (:bp2),y
  2699 3791 8D 5F 9F			sta SIZ+3
  2700
  2701 				; -------------------  ASM Block 00000114  -------------------
  2702
  2703 3794 8A 48			txa:pha
  2704
  2705 3796 AD 58 9F 8D 04 38		mva adr _adr
  2706 379C AD 59 9F 8D 05 38		mva adr+1 _adr+1
  2707 37A2 AD 5A 9F 8D 06 38		mva adr+2 _adr+2
  2708
  2709 37A8				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 37A8 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 37AA A0 5F		        ldy     #FX_MEMS
     4 37AC 91 80		        sta     (fxptr),y
  2710
  2711 37AE AD 06 38 CD 5E 9F + loop	cpw _adr+1 siz+1
  2712 37BC B0 37			bcs skp
  2713
  2714 37BE A0 14			ldy #20
  2715 37C0 B9 FE 37 99 E0 B0 + 	mva:rpl bltClr,y MAIN.SYSTEM.VBXE_WINDOW+MAIN.SYSTEM.VBXE_BCBTMP,y-
  2716
  2717 37C9				fxs FX_BL_ADR0 #MAIN.SYSTEM.VBXE_BCBTMP	; program blittera od adresu MAIN.SYSTEM.VBXE_BCBTMP
Macro: FXS [Source: vbxe.hea]
     2 37C9 A9 E0		        lda     #MAIN.SYSTEM.VBXE_BCBTMP
     3 37CB A0 50		        ldy     #FX_BL_ADR0
     4 37CD 91 80		        sta     (fxptr),y
  2718 37CF				fxs FX_BL_ADR1 #$00			; zaraz za programem VBXE Display List
Macro: FXS [Source: vbxe.hea]
     2 37CF A9 00		        lda     #$00
     3 37D1 A0 51		        ldy     #FX_BL_ADR1
     4 37D3 91 80		        sta     (fxptr),y
  2719 37D5				fxsa FX_BL_ADR2
Macro: FXSA [Source: vbxe.hea]
     2 37D5 A0 52		        ldy     #FX_BL_ADR2
     3 37D7 91 80		        sta     (fxptr),y
  2720
  2721 37D9				fxs FX_BLITTER_START #$01	; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 37D9 A9 01		        lda     #$01
     3 37DB A0 53		        ldy     #FX_BLITTER_START
     4 37DD 91 80		        sta     (fxptr),y
  2722
  2723 37DF			wait	fxla FX_BLITTER_BUSY
Macro: FXLA [Source: vbxe.hea]
     2 37DF A0 53		        ldy     #FX_BLITTER_BUSY
     3 37E1 B1 80		        lda     (fxptr),y
  2724 37E3 D0 FA			bne wait
  2725
  2726 37E5 A9 00			lda #$00
  2727 37E7 8D 04 38			sta _adr
  2728 37EA EE 05 38 D0 03 EE + 	inw _adr+1
  2729
  2730 37F2 4C AE 37			jmp loop
  2731
  2732 37F5			skp	fxs FX_MEMS #$00		; disable VBXE bank
Macro: FXS [Source: vbxe.hea]
     2 37F5 A9 00		        lda     #$00
     3 37F7 A0 5F		        ldy     #FX_MEMS
     4 37F9 91 80		        sta     (fxptr),y
  2733
  2734 37FB 4C 13 38			jmp stop
  2735
  2736 37FE 00 00 00		bltClr	.long 0x00	; source address
  2737 3801 00 00			.word 0x00	; source step y
  2738 3803 00				.byte 0x00	; source step x
  2739 3804 00 00 00		_adr	.long 0x00	; destination address
  2740 3807 00 01			.word 0x0100	; destination step y
  2741 3809 01				.byte 0x01	; destination step x
  2742 380A FF 00		_siz	.word 0xff	; width
  2743 380C 00				.byte 0x00	; height
  2744 380D 00				dta 0x00	; and mask (and mask equal to 0, memory will be filled with xor mask)
  2745 380E 00				dta 0x00	; xor mask
  2746 380F 00				dta 0x00	; collision and mask
  2747 3810 00				dta 0x00	; zoom
  2748 3811 00				dta 0x00	; pattern feature
  2749 3812 00				dta 0x00	; control
  2750
  2751 3813 68 AA		stop	pla:tax
  2752
  2753 				; optimize OK (vbxe_memorystream.inc), line = 292
  2754
  2755 3815 AC 54 9F 84 84 AC + 	mwy POSITION :bp2
  2756 381F A0 00			ldy #$00
  2757 3821 98				tya
  2758 3822 91 84			sta (:bp2),y
  2759 3824 C8				iny
  2760 3825 91 84			sta (:bp2),y
  2761 3827 C8				iny
  2762 3828 91 84			sta (:bp2),y
  2763 382A C8				iny
  2764 382B 91 84			sta (:bp2),y
  2765
  2766 				; optimize OK (vbxe_memorystream.inc), line = 293
  2767
  2768 382D AC 56 9F 84 84 AC + 	mwy SIZE :bp2
  2769 3837 A0 00			ldy #$00
  2770 3839 91 84			sta (:bp2),y
  2771 383B C8				iny
  2772 383C 91 84			sta (:bp2),y
  2773 383E C8				iny
  2774 383F A9 08			lda #$08
  2775 3841 91 84			sta (:bp2),y
  2776 3843 C8				iny
  2777 3844 A9 00			lda #$00
  2778 3846 91 84			sta (:bp2),y
  2779
  2780 				; ------------------------------------------------------------
  2781
  2782 = 9F52			TVBXEMEMORYSTREAM	= DATAORIGIN+$00C7
  2783 = 9F54			POSITION	= DATAORIGIN+$00C9
  2784 = 9F56			SIZE	= DATAORIGIN+$00CB
  2785 = 9F58			ADR	= DATAORIGIN+$00CD
  2786 = 9F5C			SIZ	= DATAORIGIN+$00D1
  2787
  2788 = 9F52			@VarData	= TVBXEMEMORYSTREAM
  2789 = 000E			@VarDataSize	= 14
  2790
  2791 3848			@exit
  2792 					.ifdef @new
  2793 					lda <@VarData
  2794 					sta :ztmp
  2795 					lda >@VarData
  2796 					ldy #@VarDataSize-1
  2797 					jmp @FreeMem
  2798 					els
  2799 3848 60				rts						; ret
  2800 					eif
  2801 				.endl
  2802
  2803 3849			.local	COLORMAPOFF					; PROCEDURE | ASSEMBLER
  2804
  2805 				; -------------------  ASM Block 00000123  -------------------
  2806
  2807 					@setxdl #e@xdl.mapoff
  2807 				 LDA# E@XDL.MAPOFF\ JSR @SETXDL
  2807 3849 A9 05		 LDA# E@XDL.MAPOFF
  2807 384B 20 66 29		 JSR @SETXDL
  2808
  2809 384E			@exit
  2810 					.ifdef @new
  2811 					lda <@VarData
  2812 					sta :ztmp
  2813 					lda >@VarData
  2814 					ldy #@VarDataSize-1
  2815 					jmp @FreeMem
  2816 					els
  2817 384E 60				rts						; ret
  2818 					eif
  2819 				.endl
  2820
  2821 384F			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2822 384F			.local	@0201810000180000
  2823
  2824 				; optimize OK (VBXE), line = 643
  2825
  2826 384F AD 60 9F			lda A
  2827 3852 8D 8D 9E			sta SYSTEM.GRAPHMODE
  2828
  2829 				; optimize OK (VBXE), line = 645
  2830
  2831 3855 A9 C0			lda #$C0
  2832 3857 8D 92 9E			sta SYSTEM.SCREENHEIGHT
  2833 385A A9 00			lda #$00
  2834 385C 8D 93 9E			sta SYSTEM.SCREENHEIGHT+1
  2835
  2836 				; optimize OK (VBXE), line = 647
  2837
  2838 385F AD 60 9F			lda A
  2839 3862 8D 63 9F			sta @CASETMP_0005
  2840 3865 C9 0A			cmp #$0A
  2841 3867 D0 12			jne l_04AE
  2842 				@
  2843
  2844 				; optimize OK (VBXE), line = 648
  2845
  2846 3869 A9 A0			lda #$A0
  2847 386B 8D 90 9E			sta SYSTEM.SCREENWIDTH
  2848 386E A9 00			lda #$00
  2849 3870 8D 91 9E			sta SYSTEM.SCREENWIDTH+1
  2850 3873 A9 01			lda #$01
  2851 3875 8D 60 9F			sta A
  2852 3878 4C C0 38			jmp a_0005
  2853 387B			l_04AE
  2854 387B C9 1F			cmp #$1F
  2855 387D D0 12			jne l_04BD
  2856
  2857 				; optimize OK (VBXE), line = 649
  2858
  2859 387F A9 40			lda #$40
  2860 3881 8D 90 9E			sta SYSTEM.SCREENWIDTH
  2861 3884 A9 01			lda #$01
  2862 3886 8D 91 9E			sta SYSTEM.SCREENWIDTH+1
  2863 3889 A9 02			lda #$02
  2864 388B 8D 60 9F			sta A
  2865 388E 4C C0 38			jmp a_0005
  2866 3891			l_04BD
  2867 3891 C9 18			cmp #$18
  2868 3893 D0 12			jne l_04CC
  2869
  2870 				; optimize OK (VBXE), line = 650
  2871
  2872 3895 A9 80			lda #$80
  2873 3897 8D 90 9E			sta SYSTEM.SCREENWIDTH
  2874 389A A9 02			lda #$02
  2875 389C 8D 91 9E			sta SYSTEM.SCREENWIDTH+1
  2876 389F A9 03			lda #$03
  2877 38A1 8D 60 9F			sta A
  2878 38A4 4C C0 38			jmp a_0005
  2879 38A7			l_04CC
  2880
  2881 				; optimize OK (VBXE), line = 654
  2882
  2883 38A7 A9 50			lda #$50
  2884 38A9 8D 90 9E			sta SYSTEM.SCREENWIDTH
  2885 38AC A9 00			lda #$00
  2886 38AE 8D 91 9E			sta SYSTEM.SCREENWIDTH+1
  2887
  2888 				; optimize OK (VBXE), line = 655
  2889
  2890 38B1 A9 18			lda #$18
  2891 38B3 8D 92 9E			sta SYSTEM.SCREENHEIGHT
  2892 38B6 A9 00			lda #$00
  2893 38B8 8D 93 9E			sta SYSTEM.SCREENHEIGHT+1
  2894
  2895 				; optimize OK (VBXE), line = 656
  2896
  2897 38BB A9 02			lda #$02
  2898 38BD 8D 60 9F			sta A
  2899 38C0			a_0005
  2900
  2901 				; -------------------  ASM Block 00000124  -------------------
  2902
  2903 38C0 8A 48			txa:pha
  2904
  2905 38C2 AD 90 9E			lda MAIN.SYSTEM.ScreenWidth
  2906 38C5 AE 91 9E			ldx MAIN.SYSTEM.ScreenWidth+1
  2907
  2908 38C8 AC 92 9E			ldy MAIN.SYSTEM.ScreenHeight
  2909
  2910 38CB 20 5D 21			@SCREENSIZE
  2911
  2912 					@setxdl a
  2912 				 LDA A\ JSR @SETXDL
  2912 38CE AD 60 9F		 LDA A
  2912 38D1 20 66 29		 JSR @SETXDL
  2913
  2914 38D4				fxs FX_MEMS #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
Macro: FXS [Source: vbxe.hea]
     2 38D4 A9 80		        lda     #$80+MAIN.SYSTEM.VBXE_XDLADR/$1000
     3 38D6 A0 5F		        ldy     #FX_MEMS
     4 38D8 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2915
  2916 38DA A0 09			ldy #s@xdl.ovstep
  2917
  2918 38DC AD 61 9F			lda s
  2919 38DF 99 00 B0			sta MAIN.SYSTEM.VBXE_WINDOW,y
  2920
  2921 38E2 AD 62 9F			lda s+1
  2922 38E5 99 01 B0			sta MAIN.SYSTEM.VBXE_WINDOW+1,y
  2923
  2924 38E8				fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 38E8 A9 00		        lda     #$00
     3 38EA A0 5F		        ldy     #FX_MEMS
     4 38EC 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2925
  2926 38EE 68 AA			pla:tax
  2927
  2928 				; ------------------------------------------------------------
  2929
  2930 = 9F60			A	= DATAORIGIN+$00D5
  2931 = 9F61			S	= DATAORIGIN+$00D6
  2932 = 9F63			@CASETMP_0005	= DATAORIGIN+$00D8
  2933
  2934 = 9F60			@VarData	= A
  2935 = 0004			@VarDataSize	= 4
  2936
  2937 38F0			@exit
  2938 					.ifdef @new
  2939 					lda <@VarData
  2940 					sta :ztmp
  2941 					lda >@VarData
  2942 					ldy #@VarDataSize-1
  2943 					jmp @FreeMem
  2944 					els
  2945 38F0 60				rts						; ret
  2946 					eif
  2947 				.endl
  2948 				.endl							; overload
  2949
  2950 38F1			.local	SETHORIZONTALRES				; PROCEDURE | OVERLOAD
  2951 38F1			.local	@010180000
  2952 38F1 8D 64 9F			sta A
  2953
  2954 				; optimize OK (VBXE), line = 698
  2955
  2956 38F4 8D 60 9F			sta SETHORIZONTALRES.@0201810000180000.A
  2957 38F7 A9 40			lda #$40
  2958 38F9 8D 61 9F			sta SETHORIZONTALRES.@0201810000180000.S
  2959 38FC A9 01			lda #$01
  2960 38FE 8D 62 9F			sta SETHORIZONTALRES.@0201810000180000.S+1
  2961 3901 20 4F 38			jsr SETHORIZONTALRES.@0201810000180000
  2962
  2963 				; ------------------------------------------------------------
  2964
  2965 = 9F64			A	= DATAORIGIN+$00D9
  2966
  2967 = 9F64			@VarData	= A
  2968 = 0001			@VarDataSize	= 1
  2969
  2970 3904			@exit
  2971 					.ifdef @new
  2972 					lda <@VarData
  2973 					sta :ztmp
  2974 					lda >@VarData
  2975 					ldy #@VarDataSize-1
  2976 					jmp @FreeMem
  2977 					els
  2978 3904 60				rts						; ret
  2979 					eif
  2980 				.endl
  2981 				.endl							; overload
  2982
  2983 3905			.local	RUNBCB						; PROCEDURE | ASSEMBLER
  2984
  2985 				; -------------------  ASM Block 00000126  -------------------
  2986
  2987 3905				fxs	FX_BL_ADR0	a
Macro: FXS [Source: vbxe.hea]
     2 3905 AD 65 9F		        lda     A
     3 3908 A0 50		        ldy     #FX_BL_ADR0
     4 390A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2988 390C AD 66 9F			lda	a+1
  2989 390F 29 0F			and	#$0f
  2990 3911				fxsa	FX_BL_ADR1
Macro: FXSA [Source: vbxe.hea]
     2 3911 A0 51		        ldy     #FX_BL_ADR1
     3 3913 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2991 3915				fxs	FX_BL_ADR2	#$00
Macro: FXS [Source: vbxe.hea]
     2 3915 A9 00		        lda     #$00
     3 3917 A0 52		        ldy     #FX_BL_ADR2
     4 3919 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2992
  2993 391B				fxs	FX_BLITTER_START #$01		; !!! start gdy 1 !!!
Macro: FXS [Source: vbxe.hea]
     2 391B A9 01		        lda     #$01
     3 391D A0 53		        ldy     #FX_BLITTER_START
     4 391F 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  2994
  2995 				;wait	fxla	FX_BLITTER_BUSY
  2996 				;	bne	wait
  2997
  2998 				; ------------------------------------------------------------
  2999
  3000 = 9F65			A	= DATAORIGIN+$00DA
  3001 = 9E8B			A.SRC_ADR	= DATAORIGIN+$0000
  3002 = 9E8B			A.SRC_ADR.BYTE0	= DATAORIGIN+$0000
  3003 = 9E8C			A.SRC_ADR.BYTE1	= DATAORIGIN+$0001
  3004 = 9E8D			A.SRC_ADR.BYTE2	= DATAORIGIN+$0002
  3005 = 9E8E			A.SRC_STEP_Y	= DATAORIGIN+$0003
  3006 = 9E90			A.SRC_STEP_X	= DATAORIGIN+$0005
  3007 = 9E91			A.DST_ADR	= DATAORIGIN+$0006
  3008 = 9E91			A.DST_ADR.BYTE0	= DATAORIGIN+$0006
  3009 = 9E92			A.DST_ADR.BYTE1	= DATAORIGIN+$0007
  3010 = 9E93			A.DST_ADR.BYTE2	= DATAORIGIN+$0008
  3011 = 9E94			A.DST_STEP_Y	= DATAORIGIN+$0009
  3012 = 9E96			A.DST_STEP_X	= DATAORIGIN+$000B
  3013 = 9E97			A.BLT_WIDTH	= DATAORIGIN+$000C
  3014 = 9E99			A.BLT_HEIGHT	= DATAORIGIN+$000E
  3015 = 9E9A			A.BLT_AND_MASK	= DATAORIGIN+$000F
  3016 = 9E9B			A.BLT_XOR_MASK	= DATAORIGIN+$0010
  3017 = 9E9C			A.BLT_COLLISION_MASK	= DATAORIGIN+$0011
  3018 = 9E9D			A.BLT_ZOOM	= DATAORIGIN+$0012
  3019 = 9E9E			A.PATTERN_FEATURE	= DATAORIGIN+$0013
  3020 = 9E9F			A.BLT_CONTROL	= DATAORIGIN+$0014
  3021
  3022 = 9F65			@VarData	= A
  3023 = 0002			@VarDataSize	= 2
  3024
  3025 3921			@exit
  3026 					.ifdef @new
  3027 					lda <@VarData
  3028 					sta :ztmp
  3029 					lda >@VarData
  3030 					ldy #@VarDataSize-1
  3031 					jmp @FreeMem
  3032 					els
  3033 3921 60				rts						; ret
  3034 					eif
  3035 				.endl
  3036
  3037 3922			.local	VBXECONTROL					; PROCEDURE | ASSEMBLER
  3038 3922 8D 69 9F			sta A
  3039
  3040 				; -------------------  ASM Block 00000130  -------------------
  3041
  3042 3925				fxs FX_VIDEO_CONTROL a
Macro: FXS [Source: vbxe.hea]
     2 3925 AD 69 9F		        lda     A
     3 3928 A0 40		        ldy     #FX_VIDEO_CONTROL
     4 392A 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3043
  3044 				; ------------------------------------------------------------
  3045
  3046 = 9F69			A	= DATAORIGIN+$00DE
  3047
  3048 = 9F69			@VarData	= A
  3049 = 0001			@VarDataSize	= 1
  3050
  3051 392C			@exit
  3052 					.ifdef @new
  3053 					lda <@VarData
  3054 					sta :ztmp
  3055 					lda >@VarData
  3056 					ldy #@VarDataSize-1
  3057 					jmp @FreeMem
  3058 					els
  3059 392C 60				rts						; ret
  3060 					eif
  3061 				.endl
  3062
  3063 				; ------------------------------------------------------------
  3064 				; ------------------------------------------------------------
  3065 392D			@UnitInit
  3066
  3067 				; -------------------  ASM Block 00000138  -------------------
  3068
  3069 392D 8A 48			txa:pha
  3070
  3071 392F 20 1A 28			jsr @vbxe_detect
  3072 3932 90 04			bcc ok
  3073
  3074 3934 A2 FF			ldx #MAIN.GRAPH.grNoInitGraph
  3075 3936 D0 05			bne status
  3076
  3077 3938 20 70 28		ok	jsr @vbxe_init
  3078
  3079 393B A2 01			ldx #MAIN.GRAPH.grOK
  3080 393D 8E C8 9E		status	stx MAIN.GRAPH.GraphResult
  3081
  3082 3940 68 AA			pla:tax
  3083
  3084 3942 60				rts
  3085
  3086 				; ------------------------------------------------------------
  3087
  3088 = 0001			VC_XDL	= $01
  3089 = 0002			VC_XCOLOR	= $02
  3090 = 0004			VC_NO_TRANS	= $04
  3091 = 0008			VC_TRANS15	= $08
  3092 = 0000			TCBLACK	= $00
  3093 = 0001			TCRED	= $01
  3094 = 0002			TCGREEN	= $02
  3095 = 0003			TCYELLOW	= $03
  3096 = 0004			TCBLUE	= $04
  3097 = 0005			TCMAGENTA	= $05
  3098 = 0006			TCCYAN	= $06
  3099 = 0007			TCWHITE	= $07
  3100 = 0008			TCBRIGHTBLACK	= $08
  3101 = 0009			TCBRIGHTRED	= $09
  3102 = 000A			TCBRIGHTGREEN	= $0A
  3103 = 000B			TCBRIGHTYELLOW	= $0B
  3104 = 000C			TCBRIGHTBLUE	= $0C
  3105 = 000D			TCBRIGHTMAGENTA	= $0D
  3106 = 000E			TCBRIGHTCYAN	= $0E
  3107 = 000F			TCBRIGHTWHITE	= $0F
  3108 = 0080			TBBLACK	= $80
  3109 = 0090			TBRED	= $90
  3110 = 00A0			TBGREEN	= $A0
  3111 = 00B0			TBYELLOW	= $B0
  3112 = 00C0			TBBLUE	= $C0
  3113 = 00D0			TBMAGENTA	= $D0
  3114 = 00E0			TBCYAN	= $E0
  3115 = 00F0			TBWHITE	= $F0
  3116 = 9EF1			adr.VRAM	= DATAORIGIN+$0066	; [8] OBJECT
  3117 3943			.var VRAM	= adr.VRAM .word
  3118 = 9EF1			VRAM.POSITION	= DATAORIGIN+$0066
  3119 = 9EF5			VRAM.SIZE	= DATAORIGIN+$006A
  3120 = 0063			SCROLLBACK_FILL	= $63
  3121 = 295C			COLORMAPCONTROL = @VBXE_CMAP.CONFIG
  3122 = 0400			adr.SCROLLBACK_BUFFER	= $0400
  3123 3943			.var SCROLLBACK_BUFFER	= adr.SCROLLBACK_BUFFER .word
  3124 = 02FD			FILDAT	= $02FD
  3125 = 0054			ROWCRS	= $54
  3126 = 0055			COLCRS	= $55
  3127 = 0068			CRSADR	= $68
  3128
  3129 = 3943 F1 9E		VRAM
  3129 = 3945 00 04		SCROLLBACK_BUFFER
  3129 				.endl							; UNIT VBXE
  3130
  3131 				; ------------------------------------------------------------
  3132
  3133 3947			.local	JOYSTICK					; UNIT
  3134
  3135 				; ------------------------------------------------------------
  3136
  3137 = 000F			JOY_NONE	= $0F
  3138 = 000E			JOY_UP	= $0E
  3139 = 000D			JOY_DOWN	= $0D
  3140 = 000B			JOY_LEFT	= $0B
  3141 = 000A			JOY_LEFT_UP	= $0A
  3142 = 0009			JOY_LEFT_DOWN	= $09
  3143 = 0007			JOY_RIGHT	= $07
  3144 = 0006			JOY_RIGHT_UP	= $06
  3145 = 0005			JOY_RIGHT_DOWN	= $05
  3146 = 0278			JOY_1	= $0278
  3147 = 0279			JOY_2	= $0279
  3148 = 0278			adr.STICK	= $0278
  3149 3947			.var STICK	= adr.STICK .word
  3150 = 0278			STICK0	= $0278
  3151 = 0279			STICK1	= $0279
  3152 = 0284			adr.STRIG	= $0284
  3153 3947			.var STRIG	= adr.STRIG .word
  3154 = 0284			STRIG0	= $0284
  3155 = 0285			STRIG1	= $0285
  3156 = 0270			adr.PADDL	= $0270
  3157 3947			.var PADDL	= adr.PADDL .word
  3158 = 0270			PADDL0	= $0270
  3159 = 0271			PADDL1	= $0271
  3160 = 0272			PADDL2	= $0272
  3161 = 0273			PADDL3	= $0273
  3162 = 0274			PADDL4	= $0274
  3163 = 0275			PADDL5	= $0275
  3164 = 0276			PADDL6	= $0276
  3165 = 0277			PADDL7	= $0277
  3166 = 027C			adr.PTRIG	= $027C
  3167 3947			.var PTRIG	= adr.PTRIG .word
  3168 = 027C			PTRIG0	= $027C
  3169 = 027D			PTRIG1	= $027D
  3170 = 027E			PTRIG2	= $027E
  3171 = 027F			PTRIG3	= $027F
  3172 = 0280			PTRIG4	= $0280
  3173 = 0281			PTRIG5	= $0281
  3174 = 0282			PTRIG6	= $0282
  3175 = 0283			PTRIG7	= $0283
  3176 = D010			TRIG0	= $D010
  3177 = D011			TRIG1	= $D011
  3178 = D200			POT0	= $D200
  3179 = D208			ALLPOT	= $D208
  3180 = D20B			POTGO	= $D20B
  3181
  3182 = 3947 78 02		STICK
  3182 = 3949 84 02		STRIG
  3182 = 394B 70 02		PADDL
  3182 = 394D 7C 02		PTRIG
  3182 				.endl							; UNIT JOYSTICK
  3183
  3184 394F			.local	START_LEVEL					; PROCEDURE
  3185
  3186 394F			@exit
  3187 					.ifdef @new
  3188 					lda <@VarData
  3189 					sta :ztmp
  3190 					lda >@VarData
  3191 					ldy #@VarDataSize-1
  3192 					jmp @FreeMem
  3193 					els
  3194 394F 60				rts						; ret
  3195 					eif
  3196 				.endl
  3197
  3198 3950			.local	DEATH_SOUND					; PROCEDURE
  3199
  3200 				; ------------------------------------------------------------
  3201
  3202 = 9F72			A	= DATAORIGIN+$00E7
  3203
  3204 = 9F72			@VarData	= A
  3205 = 0002			@VarDataSize	= 2
  3206
  3207 3950			@exit
  3208 					.ifdef @new
  3209 					lda <@VarData
  3210 					sta :ztmp
  3211 					lda >@VarData
  3212 					ldy #@VarDataSize-1
  3213 					jmp @FreeMem
  3214 					els
  3215 3950 60				rts						; ret
  3216 					eif
  3217 				.endl
  3218
  3219 3951			.local	BALL_BLOCK_SOUND				; PROCEDURE
  3220
  3221 				; ------------------------------------------------------------
  3222
  3223 = 9F74			A	= DATAORIGIN+$00E9
  3224 = 9F76			B	= DATAORIGIN+$00EB
  3225
  3226 = 9F74			@VarData	= A
  3227 = 0004			@VarDataSize	= 4
  3228
  3229 3951			@exit
  3230 					.ifdef @new
  3231 					lda <@VarData
  3232 					sta :ztmp
  3233 					lda >@VarData
  3234 					ldy #@VarDataSize-1
  3235 					jmp @FreeMem
  3236 					els
  3237 3951 60				rts						; ret
  3238 					eif
  3239 				.endl
  3240
  3241 3952			.local	SQRT32						; FUNCTION
  3242
  3243 				; optimize OK (arkanoid_vbxe.pas), line = 90
  3244
  3245 3952 AD 78 9F			lda V
  3246 3955 8D 86 9F			sta R
  3247 3958 AD 79 9F			lda V+1
  3248 395B 8D 87 9F			sta R+1
  3249 395E AD 7A 9F			lda V+2
  3250 3961 8D 88 9F			sta R+2
  3251 3964 AD 7B 9F			lda V+3
  3252 3967 8D 89 9F			sta R+3
  3253
  3254 				; optimize OK (arkanoid_vbxe.pas), line = 91
  3255
  3256 396A A9 00			lda #$00
  3257 396C 8D 82 9F			sta Q
  3258 396F 8D 83 9F			sta Q+1
  3259 3972 8D 84 9F			sta Q+2
  3260 3975 8D 85 9F			sta Q+3
  3261
  3262 				; optimize OK (arkanoid_vbxe.pas), line = 92
  3263
  3264 3978 8D 7E 9F			sta B
  3265 397B 8D 7F 9F			sta B+1
  3266 397E 8D 80 9F			sta B+2
  3267 3981 A9 40			lda #$40
  3268
  3269 				; --- WhileProlog
  3270 3983 4C BB 39			jmp l_0513
  3271 3986			l_0514
  3272
  3273 				; optimize OK (arkanoid_vbxe.pas), line = 94
  3274
  3275 3986 AD 7E 9F			lda B
  3276 3989 85 9F			sta :STACKORIGIN+9
  3277 398B AD 7F 9F			lda B+1
  3278 398E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3279 3990 AD 80 9F			lda B+2
  3280 3993 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3281 3995 AD 81 9F			lda B+3
  3282 3998 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3283 399A 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3284 399C 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3285 399E 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3286 39A0 66 9F			ror :STACKORIGIN+9
  3287 39A2 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3288 39A4 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3289 39A6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3290 39A8 66 9F			ror :STACKORIGIN+9
  3291 39AA A5 9F			lda :STACKORIGIN+9
  3292 39AC 8D 7E 9F			sta B
  3293 39AF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3294 39B1 8D 7F 9F			sta B+1
  3295 39B4 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3296 39B6 8D 80 9F			sta B+2
  3297 39B9 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3298 39BB			l_0513
  3299 39BB 8D 81 9F			sta B+3
  3300 39BE CD 89 9F			cmp R+3
  3301 39C1 D0 16			bne @+
  3302 39C3 AD 80 9F			lda B+2
  3303 39C6 CD 88 9F			cmp R+2
  3304 39C9 D0 0E			bne @+
  3305 39CB AD 7F 9F			lda B+1
  3306 39CE CD 87 9F			cmp R+1
  3307 39D1 D0 06			bne @+
  3308 39D3 AD 7E 9F			lda B
  3309 39D6 CD 86 9F			cmp R
  3310 				@
  3311 39D9 F0 02			beq @+
  3312 39DB B0 A9			jcs l_0514
  3313 				@
  3314
  3315 				; --- WhileProlog
  3316 39DD 4C B2 3A			jmp l_0528
  3317 39E0			l_0529
  3318
  3319 				; optimize OK (arkanoid_vbxe.pas), line = 97
  3320
  3321 39E0 AD 82 9F			lda Q
  3322 39E3 18 6D 7E 9F			add B
  3323 39E7 8D 8A 9F			sta T
  3324 39EA AD 83 9F			lda Q+1
  3325 39ED 6D 7F 9F			adc B+1
  3326 39F0 8D 8B 9F			sta T+1
  3327 39F3 AD 84 9F			lda Q+2
  3328 39F6 6D 80 9F			adc B+2
  3329 39F9 8D 8C 9F			sta T+2
  3330 39FC AD 85 9F			lda Q+3
  3331 39FF 6D 81 9F			adc B+3
  3332 3A02 8D 8D 9F			sta T+3
  3333
  3334 				; optimize OK (arkanoid_vbxe.pas), line = 99
  3335
  3336 3A05 4E 85 9F			lsr Q+3
  3337 3A08 6E 84 9F			ror Q+2
  3338 3A0B 6E 83 9F			ror Q+1
  3339 3A0E 6E 82 9F			ror Q
  3340
  3341 				; optimize OK (arkanoid_vbxe.pas), line = 101
  3342
  3343 3A11 AD 89 9F			lda R+3
  3344 3A14 CD 8D 9F			cmp T+3
  3345 3A17 D0 16			bne @+
  3346 3A19 AD 88 9F			lda R+2
  3347 3A1C CD 8C 9F			cmp T+2
  3348 3A1F D0 0E			bne @+
  3349 3A21 AD 87 9F			lda R+1
  3350 3A24 CD 8B 9F			cmp T+1
  3351 3A27 D0 06			bne @+
  3352 3A29 AD 86 9F			lda R
  3353 3A2C CD 8A 9F			cmp T
  3354 				@
  3355 3A2F 90 49			jcc l_0549
  3356
  3357 				; optimize OK (arkanoid_vbxe.pas), line = 102
  3358
  3359 3A31 AD 86 9F			lda R
  3360 3A34 ED 8A 9F			sbc T
  3361 3A37 8D 86 9F			sta R
  3362 3A3A AD 87 9F			lda R+1
  3363 3A3D ED 8B 9F			sbc T+1
  3364 3A40 8D 87 9F			sta R+1
  3365 3A43 AD 88 9F			lda R+2
  3366 3A46 ED 8C 9F			sbc T+2
  3367 3A49 8D 88 9F			sta R+2
  3368 3A4C AD 89 9F			lda R+3
  3369 3A4F ED 8D 9F			sbc T+3
  3370 3A52 8D 89 9F			sta R+3
  3371
  3372 				; optimize OK (arkanoid_vbxe.pas), line = 103
  3373
  3374 3A55 AD 82 9F			lda Q
  3375 3A58 18 6D 7E 9F			add B
  3376 3A5C 8D 82 9F			sta Q
  3377 3A5F AD 83 9F			lda Q+1
  3378 3A62 6D 7F 9F			adc B+1
  3379 3A65 8D 83 9F			sta Q+1
  3380 3A68 AD 84 9F			lda Q+2
  3381 3A6B 6D 80 9F			adc B+2
  3382 3A6E 8D 84 9F			sta Q+2
  3383 3A71 AD 85 9F			lda Q+3
  3384 3A74 6D 81 9F			adc B+3
  3385 3A77 8D 85 9F			sta Q+3
  3386 3A7A			l_0549
  3387
  3388 				; optimize OK (arkanoid_vbxe.pas), line = 106
  3389
  3390 3A7A AD 7E 9F			lda B
  3391 3A7D 85 9F			sta :STACKORIGIN+9
  3392 3A7F AD 7F 9F			lda B+1
  3393 3A82 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  3394 3A84 AD 80 9F			lda B+2
  3395 3A87 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  3396 3A89 AD 81 9F			lda B+3
  3397 3A8C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  3398 3A8E 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3399 3A90 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3400 3A92 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3401 3A94 66 9F			ror :STACKORIGIN+9
  3402 3A96 46 CF			lsr :STACKORIGIN+STACKWIDTH*3+9
  3403 3A98 66 BF			ror :STACKORIGIN+STACKWIDTH*2+9
  3404 3A9A 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  3405 3A9C 66 9F			ror :STACKORIGIN+9
  3406 3A9E A5 9F			lda :STACKORIGIN+9
  3407 3AA0 8D 7E 9F			sta B
  3408 3AA3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  3409 3AA5 8D 7F 9F			sta B+1
  3410 3AA8 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  3411 3AAA 8D 80 9F			sta B+2
  3412 3AAD A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  3413 3AAF 8D 81 9F			sta B+3
  3414 3AB2			l_0528
  3415
  3416 				; optimize OK (arkanoid_vbxe.pas), line = 96
  3417
  3418 3AB2 AD 81 9F			lda B+3
  3419 3AB5 C9 00			cmp #$00
  3420 3AB7 D0 13			bne @+
  3421 3AB9 AD 80 9F			lda B+2
  3422 3ABC C9 00			cmp #$00
  3423 3ABE D0 0C			bne @+
  3424 3AC0 AD 7F 9F			lda B+1
  3425 3AC3 C9 00			cmp #$00
  3426 3AC5 D0 05			bne @+
  3427 3AC7 AD 7E 9F			lda B
  3428 3ACA C9 00			cmp #$00
  3429 				@
  3430 3ACC F0 05			beq @+
  3431 3ACE 90 03 4C E0 39		jcs l_0529
  3432 				@
  3433
  3434 				; optimize OK (arkanoid_vbxe.pas), line = 110
  3435
  3436 3AD3 AD 82 9F			lda Q
  3437 3AD6 8D 7C 9F			sta RESULT
  3438 3AD9 AD 83 9F			lda Q+1
  3439 3ADC 8D 7D 9F			sta RESULT+1
  3440 3ADF			@exit
  3441
  3442 				; ------------------------------------------------------------
  3443
  3444 = 9F78			V	= DATAORIGIN+$00ED
  3445 = 9F7C			RESULT	= DATAORIGIN+$00F1
  3446 = 9F7E			B	= DATAORIGIN+$00F3
  3447 = 9F82			Q	= DATAORIGIN+$00F7
  3448 = 9F86			R	= DATAORIGIN+$00FB
  3449 = 9F8A			T	= DATAORIGIN+$00FF
  3450
  3451 = 9F78			@VarData	= V
  3452 = 0014			@VarDataSize	= 20
  3453
  3454 3ADF 60				rts						; ret
  3455 				.endl
  3456
  3457 3AE0			.local	MOUSECOORDS					; PROCEDURE
  3458
  3459 				; optimize OK (service.pas), line = 298
  3460
  3461 3AE0 AD 00 D3			lda ATARI.PORTA
  3462 3AE3 29 0F			and #$0F
  3463 3AE5 8D 95 A0			sta A
  3464
  3465 				; optimize OK (service.pas), line = 300
  3466
  3467 3AE8 8D 96 A0			sta @CASETMP_0007
  3468 3AEB C9 0B			cmp #$0B
  3469 3AED D0 38			jne l_058B
  3470 				@
  3471
  3472 				; optimize OK (service.pas), line = 301
  3473
  3474 3AEF AC 93 A0 84 84 AC + 	mwy X :bp2
  3475 3AF9 A0 00			ldy #$00
  3476 3AFB B1 84			lda (:bp2),y
  3477 3AFD C8				iny
  3478 3AFE C9 0B			cmp #$0B
  3479 3B00 B1 84			lda (:bp2),y
  3480 3B02 E9 00			sbc #$00
  3481 3B04 50 02			svc
  3482 3B06 49 80			eor #$80
  3483 3B08 30 1A			jmi l_059C
  3484 3B0A AC 93 A0 84 84 AC + 	mwy X :bp2
  3485 3B14 A0 00			ldy #$00
  3486 3B16 B1 84			lda (:bp2),y
  3487 3B18 38 E9 04			sub #$04
  3488 3B1B 91 84			sta (:bp2),y
  3489 3B1D C8				iny
  3490 3B1E B1 84			lda (:bp2),y
  3491 3B20 E9 00			sbc #$00
  3492 3B22 91 84			sta (:bp2),y
  3493 3B24			l_059C
  3494 3B24 4C 60 3B			jmp a_0007
  3495 3B27			l_058B
  3496 3B27 C9 07			cmp #$07
  3497 3B29 D0 35			jne l_05A7
  3498
  3499 				; optimize OK (service.pas), line = 302
  3500
  3501 3B2B AC 93 A0 84 84 AC + 	mwy X :bp2
  3502 3B35 A0 00			ldy #$00
  3503 3B37 B1 84			lda (:bp2),y
  3504 3B39 C8				iny
  3505 3B3A C9 D8			cmp #$D8
  3506 3B3C B1 84			lda (:bp2),y
  3507 3B3E E9 00			sbc #$00
  3508 3B40 50 02			svc
  3509 3B42 49 80			eor #$80
  3510 3B44 10 1A			jpl l_05B8
  3511 3B46 AC 93 A0 84 84 AC + 	mwy X :bp2
  3512 3B50 A0 00			ldy #$00
  3513 3B52 B1 84			lda (:bp2),y
  3514 3B54 18 69 04			add #$04
  3515 3B57 91 84			sta (:bp2),y
  3516 3B59 C8				iny
  3517 3B5A B1 84			lda (:bp2),y
  3518 3B5C 69 00			adc #$00
  3519 3B5E 91 84			sta (:bp2),y
  3520 3B60			l_05B8
  3521 3B60			l_05A7
  3522 3B60			a_0007
  3523
  3524 				; ------------------------------------------------------------
  3525
  3526 = A093			X	= DATAORIGIN+$0208
  3527 = A095			A	= DATAORIGIN+$020A
  3528 = A096			@CASETMP_0007	= DATAORIGIN+$020B
  3529
  3530 = A093			@VarData	= X
  3531 = 0004			@VarDataSize	= 4
  3532
  3533 3B60			@exit
  3534 					.ifdef @new
  3535 					lda <@VarData
  3536 					sta :ztmp
  3537 					lda >@VarData
  3538 					ldy #@VarDataSize-1
  3539 					jmp @FreeMem
  3540 					els
  3541 3B60 60				rts						; ret
  3542 					eif
  3543 				.endl
  3544
  3545 3B61			.local	MOUSECLICK					; FUNCTION
  3546
  3547 				; optimize OK (service.pas), line = 312
  3548
  3549 3B61			?volatile:
  3550 3B61 AD 10 D0			lda JOYSTICK.TRIG0
  3551 3B64 49 01			eor #$01
  3552 3B66 8D 97 A0			sta RESULT
  3553 3B69			@exit
  3554
  3555 				; ------------------------------------------------------------
  3556
  3557 = A097			RESULT	= DATAORIGIN+$020C
  3558
  3559 3B69 60				rts						; ret
  3560 				.endl
  3561
  3562 3B6A			.local	BLITBOX						; PROCEDURE
  3563
  3564 				; -------------------  ASM Block 00000141  -------------------
  3565
  3566 3B6A				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3B6A A9 80		        lda     #$80
     3 3B6C A0 5F		        ldy     #FX_MEMS
     4 3B6E 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3567 					
  3568 				; optimize OK (service.pas), line = 325
  3569
  3570 3B70 AD 9A A0			lda SRC+2
  3571 3B73 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3572
  3573 				; optimize OK (service.pas), line = 326
  3574
  3575 3B76 AD 99 A0			lda SRC+1
  3576 3B79 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3577
  3578 				; optimize OK (service.pas), line = 327
  3579
  3580 3B7C AD 98 A0			lda SRC
  3581 3B7F 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3582
  3583 				; optimize OK (service.pas), line = 329
  3584
  3585 3B82 AD 9E A0			lda DST+2
  3586 3B85 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3587
  3588 				; optimize OK (service.pas), line = 330
  3589
  3590 3B88 AD 9D A0			lda DST+1
  3591 3B8B 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3592
  3593 				; optimize OK (service.pas), line = 331
  3594
  3595 3B8E AD 9C A0			lda DST
  3596 3B91 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3597
  3598 				; optimize OK (service.pas), line = 333
  3599
  3600 3B94 A9 01			lda #$01
  3601 3B96 8D 05 B1			sta BLT.SRC_STEP_X
  3602
  3603 				; optimize OK (service.pas), line = 334
  3604
  3605 3B99 8D 0B B1			sta BLT.DST_STEP_X
  3606
  3607 				; optimize OK (service.pas), line = 336
  3608
  3609 3B9C A9 40			lda #$40
  3610 3B9E 8D 09 B1			sta BLT.DST_STEP_Y
  3611 3BA1 A9 01			lda #$01
  3612 3BA3 8D 0A B1			sta BLT.DST_STEP_Y+1
  3613
  3614 				; optimize OK (service.pas), line = 337
  3615
  3616 3BA6 A9 40			lda #$40
  3617 3BA8 8D 03 B1			sta BLT.SRC_STEP_Y
  3618 3BAB A9 01			lda #$01
  3619 3BAD 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3620
  3621 				; optimize OK (service.pas), line = 339
  3622
  3623 3BB0 AD A0 A0			lda W
  3624 3BB3 38 E9 01			sub #$01
  3625 3BB6 8D 0C B1			sta BLT.BLT_WIDTH
  3626 3BB9 AD A1 A0			lda W+1
  3627 3BBC E9 00			sbc #$00
  3628 3BBE 8D 0D B1			sta BLT.BLT_WIDTH+1
  3629
  3630 				; optimize OK (service.pas), line = 340
  3631
  3632 3BC1 AC A2 A0			ldy H
  3633 3BC4 88				dey
  3634 3BC5 8C 0E B1			sty BLT.BLT_HEIGHT
  3635
  3636 				; optimize OK (service.pas), line = 342
  3637
  3638 3BC8 A9 FF			lda #$FF
  3639 3BCA 8D 0F B1			sta BLT.BLT_AND_MASK
  3640
  3641 				; optimize OK (service.pas), line = 344
  3642
  3643 3BCD A9 00			lda #$00
  3644 3BCF 8D 12 B1			sta BLT.BLT_ZOOM
  3645
  3646 				; optimize OK (service.pas), line = 346
  3647
  3648 3BD2 8D 14 B1			sta BLT.BLT_CONTROL
  3649
  3650 				; -------------------  ASM Block 00000142  -------------------
  3651
  3652 3BD5				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3BD5 A9 00		        lda     #$00
     3 3BD7 A0 5F		        ldy     #FX_MEMS
     4 3BD9 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3653 					
  3654 				; optimize OK (service.pas), line = 352
  3655
  3656 3BDB AD 0A 9E			lda BLT
  3657 3BDE 8D 65 9F			sta VBXE.RUNBCB.A
  3658 3BE1 AD 0B 9E			lda BLT+1
  3659 3BE4 8D 66 9F			sta VBXE.RUNBCB.A+1
  3660 3BE7 20 05 39			jsr VBXE.RUNBCB
  3661
  3662 				; ------------------------------------------------------------
  3663
  3664 = A098			SRC	= DATAORIGIN+$020D
  3665 = A09C			DST	= DATAORIGIN+$0211
  3666 = A0A0			W	= DATAORIGIN+$0215
  3667 = A0A2			H	= DATAORIGIN+$0217
  3668
  3669 = A098			@VarData	= SRC
  3670 = 000B			@VarDataSize	= 11
  3671
  3672 3BEA			@exit
  3673 					.ifdef @new
  3674 					lda <@VarData
  3675 					sta :ztmp
  3676 					lda >@VarData
  3677 					ldy #@VarDataSize-1
  3678 					jmp @FreeMem
  3679 					els
  3680 3BEA 60				rts						; ret
  3681 					eif
  3682 				.endl
  3683
  3684 3BEB			.local	BLITZERO					; PROCEDURE
  3685
  3686 				; -------------------  ASM Block 00000143  -------------------
  3687
  3688 3BEB				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3BEB A9 80		        lda     #$80
     3 3BED A0 5F		        ldy     #FX_MEMS
     4 3BEF 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3689 					
  3690 				; optimize OK (service.pas), line = 368
  3691
  3692 3BF1 AD A5 A0			lda SRC+2
  3693 3BF4 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3694
  3695 				; optimize OK (service.pas), line = 369
  3696
  3697 3BF7 AD A4 A0			lda SRC+1
  3698 3BFA 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3699
  3700 				; optimize OK (service.pas), line = 370
  3701
  3702 3BFD AD A3 A0			lda SRC
  3703 3C00 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3704
  3705 				; optimize OK (service.pas), line = 372
  3706
  3707 3C03 AD A9 A0			lda DST+2
  3708 3C06 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3709
  3710 				; optimize OK (service.pas), line = 373
  3711
  3712 3C09 AD A8 A0			lda DST+1
  3713 3C0C 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3714
  3715 				; optimize OK (service.pas), line = 374
  3716
  3717 3C0F AD A7 A0			lda DST
  3718 3C12 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3719
  3720 				; optimize OK (service.pas), line = 376
  3721
  3722 3C15 A9 01			lda #$01
  3723 3C17 8D 05 B1			sta BLT.SRC_STEP_X
  3724
  3725 				; optimize OK (service.pas), line = 377
  3726
  3727 3C1A 8D 0B B1			sta BLT.DST_STEP_X
  3728
  3729 				; optimize OK (service.pas), line = 379
  3730
  3731 3C1D 8D 14 B1			sta BLT.BLT_CONTROL
  3732
  3733 				; optimize OK (service.pas), line = 381
  3734
  3735 3C20 A9 40			lda #$40
  3736 3C22 8D 09 B1			sta BLT.DST_STEP_Y
  3737 3C25 A9 01			lda #$01
  3738 3C27 8D 0A B1			sta BLT.DST_STEP_Y+1
  3739
  3740 				; optimize OK (service.pas), line = 382
  3741
  3742 3C2A AD AB A0			lda W
  3743 3C2D 8D 03 B1			sta BLT.SRC_STEP_Y
  3744 3C30 AD AC A0			lda W+1
  3745 3C33 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3746
  3747 				; optimize OK (service.pas), line = 384
  3748
  3749 3C36 AC AD A0			ldy H
  3750 3C39 88				dey
  3751 3C3A 8C 0E B1			sty BLT.BLT_HEIGHT
  3752
  3753 				; optimize OK (service.pas), line = 386
  3754
  3755 3C3D AD AB A0			lda W
  3756 3C40 38 E9 01			sub #$01
  3757 3C43 8D 0C B1			sta BLT.BLT_WIDTH
  3758 3C46 AD AC A0			lda W+1
  3759 3C49 E9 00			sbc #$00
  3760 3C4B 8D 0D B1			sta BLT.BLT_WIDTH+1
  3761
  3762 				; optimize OK (service.pas), line = 388
  3763
  3764 3C4E A9 FF			lda #$FF
  3765 3C50 8D 0F B1			sta BLT.BLT_AND_MASK
  3766
  3767 				; -------------------  ASM Block 00000144  -------------------
  3768
  3769 3C53				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3C53 A9 00		        lda     #$00
     3 3C55 A0 5F		        ldy     #FX_MEMS
     4 3C57 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3770 					
  3771 				; optimize OK (service.pas), line = 395
  3772
  3773 3C59 AD 0A 9E			lda BLT
  3774 3C5C 8D 65 9F			sta VBXE.RUNBCB.A
  3775 3C5F AD 0B 9E			lda BLT+1
  3776 3C62 8D 66 9F			sta VBXE.RUNBCB.A+1
  3777 3C65 20 05 39			jsr VBXE.RUNBCB
  3778
  3779 				; ------------------------------------------------------------
  3780
  3781 = A0A3			SRC	= DATAORIGIN+$0218
  3782 = A0A7			DST	= DATAORIGIN+$021C
  3783 = A0AB			W	= DATAORIGIN+$0220
  3784 = A0AD			H	= DATAORIGIN+$0222
  3785
  3786 = A0A3			@VarData	= SRC
  3787 = 000B			@VarDataSize	= 11
  3788
  3789 3C68			@exit
  3790 					.ifdef @new
  3791 					lda <@VarData
  3792 					sta :ztmp
  3793 					lda >@VarData
  3794 					ldy #@VarDataSize-1
  3795 					jmp @FreeMem
  3796 					els
  3797 3C68 60				rts						; ret
  3798 					eif
  3799 				.endl
  3800
  3801 3C69			.local	BLITTMP						; PROCEDURE
  3802
  3803 				; optimize OK (service.pas), line = 407
  3804
  3805 3C69 AD AE A0			lda DST
  3806 3C6C 8D 6A 9F			sta VBXE_RAM.POSITION
  3807 3C6F AD AF A0			lda DST+1
  3808 3C72 8D 6B 9F			sta VBXE_RAM.POSITION+1
  3809 3C75 AD B0 A0			lda DST+2
  3810 3C78 8D 6C 9F			sta VBXE_RAM.POSITION+2
  3811 3C7B AD B1 A0			lda DST+3
  3812 3C7E 8D 6D 9F			sta VBXE_RAM.POSITION+3
  3813
  3814 				; optimize OK (service.pas), line = 409
  3815
  3816 3C81 AD 62 9E			lda TMP
  3817 3C84 8D 23 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER
  3818 3C87 AD 63 9E			lda TMP+1
  3819 3C8A 8D 24 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.BUFFER+1
  3820 3C8D AD B2 A0			lda SIZE
  3821 3C90 8D 25 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT
  3822 3C93 A9 00			lda #$00
  3823 3C95 8D 26 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER.COUNT+1
  3824 3C98 AD 10 9E			lda VBXE_RAM
  3825 3C9B AC 11 9E			ldy VBXE_RAM+1
  3826 3C9E 20 C8 35			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBUFFER
  3827
  3828 				; ------------------------------------------------------------
  3829
  3830 = A0AE			DST	= DATAORIGIN+$0223
  3831 = A0B2			SIZE	= DATAORIGIN+$0227
  3832
  3833 = A0AE			@VarData	= DST
  3834 = 0005			@VarDataSize	= 5
  3835
  3836 3CA1			@exit
  3837 					.ifdef @new
  3838 					lda <@VarData
  3839 					sta :ztmp
  3840 					lda >@VarData
  3841 					ldy #@VarDataSize-1
  3842 					jmp @FreeMem
  3843 					els
  3844 3CA1 60				rts						; ret
  3845 					eif
  3846 				.endl
  3847
  3848 3CA2			.local	BLITROW						; PROCEDURE
  3849
  3850 				; -------------------  ASM Block 00000145  -------------------
  3851
  3852 3CA2				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3CA2 A9 80		        lda     #$80
     3 3CA4 A0 5F		        ldy     #FX_MEMS
     4 3CA6 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3853 					
  3854 				; optimize OK (service.pas), line = 425
  3855
  3856 3CA8 AD B5 A0			lda SRC+2
  3857 3CAB 8D 02 B1			sta BLT.SRC_ADR.BYTE2
  3858
  3859 				; optimize OK (service.pas), line = 426
  3860
  3861 3CAE AD B4 A0			lda SRC+1
  3862 3CB1 8D 01 B1			sta BLT.SRC_ADR.BYTE1
  3863
  3864 				; optimize OK (service.pas), line = 427
  3865
  3866 3CB4 AD B3 A0			lda SRC
  3867 3CB7 8D 00 B1			sta BLT.SRC_ADR.BYTE0
  3868
  3869 				; optimize OK (service.pas), line = 429
  3870
  3871 3CBA AD B9 A0			lda DST+2
  3872 3CBD 8D 08 B1			sta BLT.DST_ADR.BYTE2
  3873
  3874 				; optimize OK (service.pas), line = 430
  3875
  3876 3CC0 AD B8 A0			lda DST+1
  3877 3CC3 8D 07 B1			sta BLT.DST_ADR.BYTE1
  3878
  3879 				; optimize OK (service.pas), line = 431
  3880
  3881 3CC6 AD B7 A0			lda DST
  3882 3CC9 8D 06 B1			sta BLT.DST_ADR.BYTE0
  3883
  3884 				; optimize OK (service.pas), line = 433
  3885
  3886 3CCC A9 01			lda #$01
  3887 3CCE 8D 05 B1			sta BLT.SRC_STEP_X
  3888
  3889 				; optimize OK (service.pas), line = 434
  3890
  3891 3CD1 8D 0B B1			sta BLT.DST_STEP_X
  3892
  3893 				; optimize OK (service.pas), line = 436
  3894
  3895 3CD4 A9 00			lda #$00
  3896 3CD6 8D 03 B1			sta BLT.SRC_STEP_Y
  3897 3CD9 8D 04 B1			sta BLT.SRC_STEP_Y+1
  3898
  3899 				; optimize OK (service.pas), line = 437
  3900
  3901 3CDC 8D 09 B1			sta BLT.DST_STEP_Y
  3902 3CDF 8D 0A B1			sta BLT.DST_STEP_Y+1
  3903
  3904 				; optimize OK (service.pas), line = 439
  3905
  3906 3CE2 8D 0E B1			sta BLT.BLT_HEIGHT
  3907
  3908 				; optimize OK (service.pas), line = 440
  3909
  3910 3CE5 8D 14 B1			sta BLT.BLT_CONTROL
  3911
  3912 				; optimize OK (service.pas), line = 442
  3913
  3914 3CE8 AD BB A0			lda SIZE
  3915 3CEB 38 E9 01			sub #$01
  3916 3CEE 8D 0C B1			sta BLT.BLT_WIDTH
  3917 3CF1 AD BC A0			lda SIZE+1
  3918 3CF4 E9 00			sbc #$00
  3919 3CF6 8D 0D B1			sta BLT.BLT_WIDTH+1
  3920
  3921 				; optimize OK (service.pas), line = 444
  3922
  3923 3CF9 A9 FF			lda #$FF
  3924 3CFB 8D 0F B1			sta BLT.BLT_AND_MASK
  3925
  3926 				; -------------------  ASM Block 00000146  -------------------
  3927
  3928 3CFE				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3CFE A9 00		        lda     #$00
     3 3D00 A0 5F		        ldy     #FX_MEMS
     4 3D02 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  3929 					
  3930 				; optimize OK (service.pas), line = 450
  3931
  3932 3D04 AD 0A 9E			lda BLT
  3933 3D07 8D 65 9F			sta VBXE.RUNBCB.A
  3934 3D0A AD 0B 9E			lda BLT+1
  3935 3D0D 8D 66 9F			sta VBXE.RUNBCB.A+1
  3936 3D10 20 05 39			jsr VBXE.RUNBCB
  3937
  3938 				; ------------------------------------------------------------
  3939
  3940 = A0B3			SRC	= DATAORIGIN+$0228
  3941 = A0B7			DST	= DATAORIGIN+$022C
  3942 = A0BB			SIZE	= DATAORIGIN+$0230
  3943
  3944 = A0B3			@VarData	= SRC
  3945 = 000A			@VarDataSize	= 10
  3946
  3947 3D13			@exit
  3948 					.ifdef @new
  3949 					lda <@VarData
  3950 					sta :ztmp
  3951 					lda >@VarData
  3952 					ldy #@VarDataSize-1
  3953 					jmp @FreeMem
  3954 					els
  3955 3D13 60				rts						; ret
  3956 					eif
  3957 				.endl
  3958
  3959 3D14			.local	PUTBYTE						; PROCEDURE
  3960
  3961 				; optimize OK (service.pas), line = 477
  3962
  3963 3D14 AD BD A0			lda DST
  3964 3D17 8D 6A 9F			sta VBXE_RAM.POSITION
  3965 3D1A AD BE A0			lda DST+1
  3966 3D1D 8D 6B 9F			sta VBXE_RAM.POSITION+1
  3967 3D20 AD BF A0			lda DST+2
  3968 3D23 8D 6C 9F			sta VBXE_RAM.POSITION+2
  3969 3D26 AD C0 A0			lda DST+3
  3970 3D29 8D 6D 9F			sta VBXE_RAM.POSITION+3
  3971
  3972 				; optimize OK (service.pas), line = 478
  3973
  3974 3D2C AD C1 A0			lda V
  3975 3D2F 8D 45 9F			sta VBXE.TVBXEMEMORYSTREAM.WRITEBYTE.B
  3976 3D32 AD 10 9E			lda VBXE_RAM
  3977 3D35 AC 11 9E			ldy VBXE_RAM+1
  3978 3D38 20 03 37			jsr VBXE.TVBXEMEMORYSTREAM.WRITEBYTE
  3979
  3980 				; ------------------------------------------------------------
  3981
  3982 = A0BD			DST	= DATAORIGIN+$0232
  3983 = A0C1			V	= DATAORIGIN+$0236
  3984
  3985 = A0BD			@VarData	= DST
  3986 = 0005			@VarDataSize	= 5
  3987
  3988 3D3B			@exit
  3989 					.ifdef @new
  3990 					lda <@VarData
  3991 					sta :ztmp
  3992 					lda >@VarData
  3993 					ldy #@VarDataSize-1
  3994 					jmp @FreeMem
  3995 					els
  3996 3D3B 60				rts						; ret
  3997 					eif
  3998 				.endl
  3999
  4000 3D3C			.local	GETBYTE						; FUNCTION
  4001
  4002 				; optimize OK (service.pas), line = 488
  4003
  4004 3D3C AD C2 A0			lda SRC
  4005 3D3F 8D 6A 9F			sta VBXE_RAM.POSITION
  4006 3D42 AD C3 A0			lda SRC+1
  4007 3D45 8D 6B 9F			sta VBXE_RAM.POSITION+1
  4008 3D48 AD C4 A0			lda SRC+2
  4009 3D4B 8D 6C 9F			sta VBXE_RAM.POSITION+2
  4010 3D4E AD C5 A0			lda SRC+3
  4011 3D51 8D 6D 9F			sta VBXE_RAM.POSITION+3
  4012
  4013 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.READBYTE', service.pas), line = 489
  4014
  4015 3D54 AD 10 9E			lda VBXE_RAM
  4016 3D57 AC 11 9E			ldy VBXE_RAM+1
  4017 3D5A 20 D0 36			jsr VBXE.TVBXEMEMORYSTREAM.READBYTE
  4018 3D5D AD 36 9F			lda VBXE.TVBXEMEMORYSTREAM.READBYTE.RESULT
  4019 3D60 8D C6 A0			sta RESULT
  4020 3D63			@exit
  4021
  4022 				; ------------------------------------------------------------
  4023
  4024 = A0C2			SRC	= DATAORIGIN+$0237
  4025 = A0C6			RESULT	= DATAORIGIN+$023B
  4026
  4027 = A0C2			@VarData	= SRC
  4028 = 0004			@VarDataSize	= 4
  4029
  4030 3D63 60				rts						; ret
  4031 				.endl
  4032
  4033 3D64			.local	NOSOUND						; PROCEDURE
  4034
  4035 3D64			@exit
  4036 					.ifdef @new
  4037 					lda <@VarData
  4038 					sta :ztmp
  4039 					lda >@VarData
  4040 					ldy #@VarDataSize-1
  4041 					jmp @FreeMem
  4042 					els
  4043 3D64 60				rts						; ret
  4044 					eif
  4045 				.endl
  4046
  4047 3D65			.local	MYDELAY						; PROCEDURE
  4048
  4049 				; ------------------------------------------------------------
  4050
  4051 = A0C7			A	= DATAORIGIN+$023C
  4052
  4053 = A0C7			@VarData	= A
  4054 = 0002			@VarDataSize	= 2
  4055
  4056 3D65			@exit
  4057 					.ifdef @new
  4058 					lda <@VarData
  4059 					sta :ztmp
  4060 					lda >@VarData
  4061 					ldy #@VarDataSize-1
  4062 					jmp @FreeMem
  4063 					els
  4064 3D65 60				rts						; ret
  4065 					eif
  4066 				.endl
  4067
  4068 3D66			.local	MAX						; FUNCTION
  4069
  4070 				; optimize OK (service.pas), line = 615
  4071
  4072 3D66 AD CB A0			lda B
  4073 3D69 CD C9 A0			cmp A
  4074 3D6C AD CC A0			lda B+1
  4075 3D6F ED CA A0			sbc A+1
  4076 3D72 50 02			svc
  4077 3D74 49 80			eor #$80
  4078 3D76 10 0C			jpl l_071F
  4079 3D78 AD C9 A0			lda A
  4080 3D7B 8D CD A0			sta RESULT
  4081 3D7E AD CA A0			lda A+1
  4082 3D81 4C 8D 3D			jmp l_072E
  4083 3D84			l_071F
  4084
  4085 				; optimize OK (service.pas), line = 616
  4086
  4087 3D84 AD CB A0			lda B
  4088 3D87 8D CD A0			sta RESULT
  4089 3D8A AD CC A0			lda B+1
  4090 3D8D			l_072E
  4091 3D8D 8D CE A0			sta RESULT+1
  4092 3D90			@exit
  4093
  4094 				; ------------------------------------------------------------
  4095
  4096 = A0C9			A	= DATAORIGIN+$023E
  4097 = A0CB			B	= DATAORIGIN+$0240
  4098 = A0CD			RESULT	= DATAORIGIN+$0242
  4099
  4100 = A0C9			@VarData	= A
  4101 = 0004			@VarDataSize	= 4
  4102
  4103 3D90 60				rts						; ret
  4104 				.endl
  4105
  4106 3D91			.local	MIN						; FUNCTION
  4107
  4108 				; optimize OK (service.pas), line = 622
  4109
  4110 3D91 AD CF A0			lda A
  4111 3D94 CD D1 A0			cmp B
  4112 3D97 AD D0 A0			lda A+1
  4113 3D9A ED D2 A0			sbc B+1
  4114 3D9D 50 02			svc
  4115 3D9F 49 80			eor #$80
  4116 3DA1 10 0C			jpl l_0749
  4117 3DA3 AD CF A0			lda A
  4118 3DA6 8D D3 A0			sta RESULT
  4119 3DA9 AD D0 A0			lda A+1
  4120 3DAC 4C B8 3D			jmp l_0758
  4121 3DAF			l_0749
  4122
  4123 				; optimize OK (service.pas), line = 623
  4124
  4125 3DAF AD D1 A0			lda B
  4126 3DB2 8D D3 A0			sta RESULT
  4127 3DB5 AD D2 A0			lda B+1
  4128 3DB8			l_0758
  4129 3DB8 8D D4 A0			sta RESULT+1
  4130 3DBB			@exit
  4131
  4132 				; ------------------------------------------------------------
  4133
  4134 = A0CF			A	= DATAORIGIN+$0244
  4135 = A0D1			B	= DATAORIGIN+$0246
  4136 = A0D3			RESULT	= DATAORIGIN+$0248
  4137
  4138 = A0CF			@VarData	= A
  4139 = 0004			@VarDataSize	= 4
  4140
  4141 3DBB 60				rts						; ret
  4142 				.endl
  4143
  4144 3DBC			.local	FATAL_ERROR					; PROCEDURE
  4145 3DBC 8D D5 A0			sta ERR_TYPE
  4146
  4147 				; optimize OK (service.pas), line = 632
  4148
  4149 3DBF 8D 4B A0			sta STATUS
  4150
  4151 				; -------------------  ASM Block 00000147  -------------------
  4152
  4153 3DC2 8D 00 01		      sta $100
  4154 				      
  4155 3DC5 AD 0A D2		      kk: lda $d20a
  4156 3DC8 8D 1A D0		      sta $d01a
  4157 3DCB 4C C5 3D		      jmp kk
  4158 				    
  4159 				    
  4160 				; ------------------------------------------------------------
  4161
  4162 = A0D5			ERR_TYPE	= DATAORIGIN+$024A
  4163
  4164 = A0D5			@VarData	= ERR_TYPE
  4165 = 0001			@VarDataSize	= 1
  4166
  4167 3DCE			@exit
  4168 					.ifdef @new
  4169 					lda <@VarData
  4170 					sta :ztmp
  4171 					lda >@VarData
  4172 					ldy #@VarDataSize-1
  4173 					jmp @FreeMem
  4174 					els
  4175 3DCE 60				rts						; ret
  4176 					eif
  4177 				.endl
  4178
  4179 3DCF			.local	INITROWARRAY					; PROCEDURE
  4180
  4181 				; optimize OK (service.pas), line = 680
  4182
  4183 3DCF A9 00			lda #$00
  4184 3DD1 8D 8D A0			sta HLP
  4185 3DD4 8D 8E A0			sta HLP+1
  4186
  4187 				; optimize OK (service.pas), line = 682
  4188
  4189 3DD7 8D D6 A0			sta Y
  4190
  4191 3DDA			l_0778
  4192 				; --- ForToDoCondition
  4193 3DDA AC D6 A0			ldy Y
  4194 3DDD C0 C8			cpy #$C8
  4195 3DDF 90 0A			jcc l_0798
  4196
  4197 				; optimize OK (service.pas), line = 685
  4198
  4199 3DE1 A9 00			lda #$00
  4200 3DE3 99 00 C0			sta adr.ROW,y
  4201 3DE6 A9 FA			lda #$FA
  4202 3DE8 4C F7 3D			jmp l_07A9
  4203 3DEB			l_0798
  4204
  4205 				; optimize OK (service.pas), line = 687
  4206
  4207 3DEB AC D6 A0			ldy Y
  4208 3DEE AD 8D A0			lda HLP
  4209 3DF1 99 00 C0			sta adr.ROW,y
  4210 3DF4 AD 8E A0			lda HLP+1
  4211 3DF7			l_07A9
  4212 3DF7 99 00 C1			sta adr.ROW+256,y
  4213
  4214 				; optimize OK (service.pas), line = 689
  4215
  4216 3DFA AD 8D A0			lda HLP
  4217 3DFD 18 69 40			add #$40
  4218 3E00 8D 8D A0			sta HLP
  4219 3E03 AD 8E A0			lda HLP+1
  4220 3E06 69 01			adc #$01
  4221 3E08 8D 8E A0			sta HLP+1
  4222
  4223 				; --- ForToDoEpilog
  4224 3E0B EE D6 A0			inc Y
  4225 3E0E D0 CA			jne l_0778
  4226 3E10			l_0786
  4227
  4228 				; ------------------------------------------------------------
  4229
  4230 = A0D6			Y	= DATAORIGIN+$024B
  4231
  4232 = A0D6			@VarData	= Y
  4233 = 0001			@VarDataSize	= 1
  4234
  4235 3E10			@exit
  4236 					.ifdef @new
  4237 					lda <@VarData
  4238 					sta :ztmp
  4239 					lda >@VarData
  4240 					ldy #@VarDataSize-1
  4241 					jmp @FreeMem
  4242 					els
  4243 3E10 60				rts						; ret
  4244 					eif
  4245 				.endl
  4246
  4247 3E11			.local	INITSVGA					; PROCEDURE
  4248
  4249 				; optimize OK (service.pas), line = 705
  4250
  4251 3E11 AD C8 9E			lda GRAPH.GRAPHRESULT
  4252 3E14 C9 01			cmp #$01
  4253 3E16 F0 0F			jeq l_07CD
  4254
  4255 				; optimize FAIL ('@print', service.pas), line = 706
  4256
  4257 					@printSTRING #CODEORIGIN+$0000
  4257 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  4257 3E18 A0 20		 LDY> CODEORIGIN+$0000
  4257 3E1A A9 00		 LDA< CODEORIGIN+$0000
  4257 3E1C 20 D0 27		 JSR @PRINTSTRING
  4258 3E1F 20 BA 27			@printEOL
  4259 3E22 A9 00			lda #$00
  4260 3E24 4C 01 9E			jmp @halt
  4261 3E27			l_07CD
  4262
  4263 				; optimize OK (service.pas), line = 710
  4264
  4265 3E27 A9 1F			lda #$1F
  4266 3E29 20 F1 38			jsr VBXE.SETHORIZONTALRES.@010180000
  4267
  4268 				; optimize FAIL ('VBXE.COLORMAPOFF', service.pas), line = 711
  4269
  4270 3E2C 20 49 38			jsr VBXE.COLORMAPOFF
  4271
  4272 				; optimize OK (service.pas), line = 713
  4273
  4274 3E2F A9 07			lda #$07
  4275 3E31 20 22 39			jsr VBXE.VBXECONTROL
  4276
  4277 				; optimize OK (service.pas), line = 715
  4278
  4279 3E34 A9 14			lda #$14
  4280 3E36 20 A7 33			jsr VBXE.SETTOPBORDER
  4281
  4282 				; optimize OK (service.pas), line = 716
  4283
  4284 3E39 A9 C8			lda #$C8
  4285 3E3B 20 C0 33			jsr VBXE.SETXDLHEIGHT
  4286
  4287 				; optimize OK (service.pas), line = 718
  4288
  4289 3E3E A9 00			lda #$00
  4290 3E40 8D 6A 9F			sta VBXE_RAM.POSITION
  4291 3E43 A9 50			lda #$50
  4292 3E45 8D 6B 9F			sta VBXE_RAM.POSITION+1
  4293 3E48 A9 00			lda #$00
  4294 3E4A 8D 6C 9F			sta VBXE_RAM.POSITION+2
  4295 3E4D 8D 6D 9F			sta VBXE_RAM.POSITION+3
  4296
  4297 				; optimize OK (service.pas), line = 719
  4298
  4299 3E50 8D 6E 9F			sta VBXE_RAM.SIZE
  4300 3E53 A9 FA			lda #$FA
  4301 3E55 8D 6F 9F			sta VBXE_RAM.SIZE+1
  4302 3E58 A9 00			lda #$00
  4303 3E5A 8D 70 9F			sta VBXE_RAM.SIZE+2
  4304 3E5D 8D 71 9F			sta VBXE_RAM.SIZE+3
  4305
  4306 				; optimize FAIL ('VBXE.TVBXEMEMORYSTREAM.CLEAR', service.pas), line = 720
  4307
  4308 3E60 AD 10 9E			lda VBXE_RAM
  4309 3E63 AC 11 9E			ldy VBXE_RAM+1
  4310 3E66 20 36 37			jsr VBXE.TVBXEMEMORYSTREAM.CLEAR
  4311
  4312 				; optimize OK (service.pas), line = 722
  4313
  4314 3E69 A9 00			lda #$00
  4315 3E6B 8D 00 D4			sta ATARI.DMACTL
  4316
  4317 				; -------------------  ASM Block 00000148  -------------------
  4318
  4319 3E6E				  fxs FX_MEMS #$80
Macro: FXS [Source: vbxe.hea]
     2 3E6E A9 80		        lda     #$80
     3 3E70 A0 5F		        ldy     #FX_MEMS
     4 3E72 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4320 					
  4321 				; optimize OK (service.pas), line = 728
  4322
  4323 3E74 AD 0A 9E			lda BLT
  4324 3E77 85 84			sta :bp2
  4325 3E79 AD 0B 9E			lda BLT+1
  4326 3E7C 85 85			sta :bp2+1
  4327 3E7E A9 00			lda #$00
  4328 3E80 A0 14			ldy #$14
  4329 3E82 91 84 88 10 FB		sta:rpl (:bp2),y-
  4330
  4331 				; -------------------  ASM Block 00000149  -------------------
  4332
  4333 3E87				  fxs FX_MEMS #$00
Macro: FXS [Source: vbxe.hea]
     2 3E87 A9 00		        lda     #$00
     3 3E89 A0 5F		        ldy     #FX_MEMS
     4 3E8B 91 80		        sta     (fxptr),y
Source: arkanoid_vbxe.a65
  4334 					
  4335 3E8D			@exit
  4336 					.ifdef @new
  4337 					lda <@VarData
  4338 					sta :ztmp
  4339 					lda >@VarData
  4340 					ldy #@VarDataSize-1
  4341 					jmp @FreeMem
  4342 					els
  4343 3E8D 60				rts						; ret
  4344 					eif
  4345 				.endl
  4346
  4347 3E8E			.local	SHINE_BLOCK					; PROCEDURE
  4348
  4349 				; optimize OK (service.pas), line = 772
  4350
  4351 3E8E AD 6B A0			lda SHINEREC.XB
  4352 3E91 8D D7 A0			sta XB
  4353 3E94 A9 00			lda #$00
  4354 3E96 8D D8 A0			sta XB+1
  4355
  4356 				; optimize OK (service.pas), line = 773
  4357
  4358 3E99 AD 6C A0			lda SHINEREC.YB
  4359 3E9C 8D D9 A0			sta YB
  4360 3E9F A9 00			lda #$00
  4361 3EA1 8D DA A0			sta YB+1
  4362
  4363 				; optimize OK (service.pas), line = 775
  4364
  4365 3EA4 AD D9 A0			lda YB
  4366 3EA7 0A				asl @
  4367 3EA8 0A				asl @
  4368 3EA9 0A				asl @
  4369 3EAA 0A				asl @
  4370 3EAB 18 6D D7 A0			add XB
  4371 3EAF 8D E6 A0			sta I
  4372
  4373 				; optimize OK (service.pas), line = 777
  4374
  4375 3EB2 A8				tay
  4376 3EB3 B9 00 DB			lda adr.WALL,y
  4377 3EB6 C9 09			cmp #$09
  4378 3EB8 B0 03 4C 0B 40		jcc l_0820
  4379
  4380 				; optimize OK (service.pas), line = 779
  4381
  4382 3EBD AD 6D A0			lda SHINEREC.FRAME
  4383 3EC0 4A				lsr @
  4384 3EC1 8D DB A0			sta FRAME
  4385 3EC4 A9 00			lda #$00
  4386 3EC6 8D DC A0			sta FRAME+1
  4387
  4388 				; optimize OK (service.pas), line = 780
  4389
  4390 3EC9 B9 00 DB			lda adr.WALL,y
  4391 3ECC C9 0A			cmp #$0A
  4392 3ECE F0 0E			jeq l_0840
  4393 3ED0 AD DB A0			lda FRAME
  4394 3ED3 18 69 05			add #$05
  4395 3ED6 8D DB A0			sta FRAME
  4396 3ED9 90 03			scc
  4397 3EDB EE DC A0			inc FRAME+1
  4398 3EDE			l_0840
  4399
  4400 				; optimize OK (service.pas), line = 782
  4401
  4402 3EDE AD D7 A0			lda XB
  4403 3EE1 85 A0			sta :STACKORIGIN+10
  4404 3EE3 AD D8 A0			lda XB+1
  4405 3EE6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4406 3EE8 06 A0			asl :STACKORIGIN+10
  4407 3EEA 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4408 3EEC 06 A0			asl :STACKORIGIN+10
  4409 3EEE 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4410 3EF0 06 A0			asl :STACKORIGIN+10
  4411 3EF2 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4412 3EF4 06 A0			asl :STACKORIGIN+10
  4413 3EF6 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4414 3EF8 A9 09			lda #$09
  4415 3EFA 18 65 A0			add :STACKORIGIN+10
  4416 3EFD 8D DD A0			sta XF
  4417 3F00 A9 00			lda #$00
  4418 3F02 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4419 3F04 8D DE A0			sta XF+1
  4420
  4421 				; optimize OK (service.pas), line = 783
  4422
  4423 3F07 AD D9 A0			lda YB
  4424 3F0A 85 A0			sta :STACKORIGIN+10
  4425 3F0C AD DA A0			lda YB+1
  4426 3F0F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4427 3F11 06 A0			asl :STACKORIGIN+10
  4428 3F13 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4429 3F15 06 A0			asl :STACKORIGIN+10
  4430 3F17 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4431 3F19 06 A0			asl :STACKORIGIN+10
  4432 3F1B 26 B0			rol :STACKORIGIN+STACKWIDTH+10
  4433 3F1D A9 16			lda #$16
  4434 3F1F 18 65 A0			add :STACKORIGIN+10
  4435 3F22 8D DF A0			sta YF
  4436 3F25 A9 00			lda #$00
  4437 3F27 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  4438 3F29 8D E0 A0			sta YF+1
  4439
  4440 				; optimize OK (service.pas), line = 784
  4441
  4442 3F2C AD DB A0			lda FRAME
  4443 3F2F 85 9F			sta :STACKORIGIN+9
  4444 3F31 AD DC A0			lda FRAME+1
  4445 3F34 06 9F			asl :STACKORIGIN+9
  4446 3F36 2A				rol @
  4447 3F37 06 9F			asl :STACKORIGIN+9
  4448 3F39 2A				rol @
  4449 3F3A 06 9F			asl :STACKORIGIN+9
  4450 3F3C 2A				rol @
  4451 3F3D 06 9F			asl :STACKORIGIN+9
  4452 3F3F 2A				rol @
  4453 3F40 06 9F			asl :STACKORIGIN+9
  4454 3F42 2A				rol @
  4455 3F43 06 9F			asl :STACKORIGIN+9
  4456 3F45 2A				rol @
  4457 3F46 06 9F			asl :STACKORIGIN+9
  4458 3F48 2A				rol @
  4459 3F49 8D E2 A0			sta FR+1
  4460 3F4C A5 9F			lda :STACKORIGIN+9
  4461 3F4E 8D E1 A0			sta FR
  4462
  4463 				; optimize OK (service.pas), line = 786
  4464
  4465 3F51 A9 00			lda #$00
  4466 3F53 8D E5 A0			sta Y
  4467
  4468 3F56			l_0870
  4469 				; --- ForToDoCondition
  4470 3F56 AD E5 A0			lda Y
  4471 3F59 C9 08			cmp #$08
  4472 3F5B 90 03 4C 0B 40		jcs l_087E
  4473
  4474 				; optimize OK (service.pas), line = 788
  4475
  4476 3F60 85 9F			sta :STACKORIGIN+9
  4477 3F62 A9 00			lda #$00
  4478 3F64 06 9F			asl :STACKORIGIN+9
  4479 3F66 2A				rol @
  4480 3F67 06 9F			asl :STACKORIGIN+9
  4481 3F69 2A				rol @
  4482 3F6A 06 9F			asl :STACKORIGIN+9
  4483 3F6C 2A				rol @
  4484 3F6D 06 9F			asl :STACKORIGIN+9
  4485 3F6F 2A				rol @
  4486 3F70 8D E4 A0			sta OG+1
  4487 3F73 A5 9F			lda :STACKORIGIN+9
  4488 3F75 8D E3 A0			sta OG
  4489
  4490 				; optimize OK (service.pas), line = 791
  4491
  4492 3F78 AD DD A0			lda XF
  4493 3F7B 85 A0			sta :STACKORIGIN+10
  4494 3F7D A9 50			lda #$50
  4495 3F7F 18 6D DE A0			add XF+1
  4496 3F83 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  4497 3F85 A9 00			lda #$00
  4498 3F87 69 00			adc #$00
  4499 3F89 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  4500 3F8B A9 00			lda #$00
  4501 3F8D 69 00			adc #$00
  4502 3F8F 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  4503 3F91 AD DF A0			lda YF
  4504 3F94 18 6D E5 A0			add Y
  4505 3F98 A8				tay
  4506 3F99 A5 A0			lda :STACKORIGIN+10
  4507 3F9B 18 79 00 C0			add adr.ROW,y
  4508 3F9F 8D B7 A0			sta BLITROW.DST
  4509 3FA2 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  4510 3FA4 79 00 C1			adc adr.ROW+256,y
  4511 3FA7 8D B8 A0			sta BLITROW.DST+1
  4512 3FAA A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  4513 3FAC 69 00			adc #$00
  4514 3FAE 8D B9 A0			sta BLITROW.DST+2
  4515 3FB1 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  4516 3FB3 69 00			adc #$00
  4517 3FB5 8D BA A0			sta BLITROW.DST+3
  4518 3FB8 AD E2 9F			lda SHINEWALL.OFS
  4519 3FBB 18 6D E1 A0			add FR
  4520 3FBF 85 A1			sta :STACKORIGIN+11
  4521 3FC1 AD E3 9F			lda SHINEWALL.OFS+1
  4522 3FC4 6D E2 A0			adc FR+1
  4523 3FC7 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  4524 3FC9 AD E4 9F			lda SHINEWALL.OFS+2
  4525 3FCC 69 00			adc #$00
  4526 3FCE 85 C1			sta :STACKORIGIN+STACKWIDTH*2+11
  4527 3FD0 AD E5 9F			lda SHINEWALL.OFS+3
  4528 3FD3 69 00			adc #$00
  4529 3FD5 85 D1			sta :STACKORIGIN+STACKWIDTH*3+11
  4530 3FD7 A5 A1			lda :STACKORIGIN+11
  4531 3FD9 18 6D E3 A0			add OG
  4532 3FDD 8D B3 A0			sta BLITROW.SRC
  4533 3FE0 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  4534 3FE2 6D E4 A0			adc OG+1
  4535 3FE5 8D B4 A0			sta BLITROW.SRC+1
  4536 3FE8 A5 C1			lda :STACKORIGIN+STACKWIDTH*2+11
  4537 3FEA 69 00			adc #$00
  4538 3FEC 8D B5 A0			sta BLITROW.SRC+2
  4539 3FEF A5 D1			lda :STACKORIGIN+STACKWIDTH*3+11
  4540 3FF1 69 00			adc #$00
  4541 3FF3 8D B6 A0			sta BLITROW.SRC+3
  4542 3FF6 A9 10			lda #$10
  4543 3FF8 8D BB A0			sta BLITROW.SIZE
  4544 3FFB A9 00			lda #$00
  4545 3FFD 8D BC A0			sta BLITROW.SIZE+1
  4546 4000 20 A2 3C			jsr BLITROW
  4547
  4548 				; --- ForToDoEpilog
  4549 4003 EE E5 A0			inc Y
  4550 4006 F0 03 4C 56 3F		jne l_0870
  4551 400B			l_087E
  4552 400B			l_0820
  4553
  4554 				; optimize FAIL (0, service.pas), line = 795
  4555
  4556 400B EE 6D A0			inc SHINEREC.FRAME
  4557
  4558 				; optimize OK (service.pas), line = 796
  4559
  4560 400E AD 6D A0			lda SHINEREC.FRAME
  4561 4011 C9 0A			cmp #$0A
  4562 4013 D0 05			jne l_08C5
  4563 4015 A9 00			lda #$00
  4564 4017 8D 6F A0			sta SHINEREC.ACTIVE
  4565 401A			l_08C5
  4566
  4567 				; ------------------------------------------------------------
  4568
  4569 = A0D7			XB	= DATAORIGIN+$024C
  4570 = A0D9			YB	= DATAORIGIN+$024E
  4571 = A0DB			FRAME	= DATAORIGIN+$0250
  4572 = A0DD			XF	= DATAORIGIN+$0252
  4573 = A0DF			YF	= DATAORIGIN+$0254
  4574 = A0E1			FR	= DATAORIGIN+$0256
  4575 = A0E3			OG	= DATAORIGIN+$0258
  4576 = A0E5			Y	= DATAORIGIN+$025A
  4577 = A0E6			I	= DATAORIGIN+$025B
  4578
  4579 = A0D7			@VarData	= XB
  4580 = 0010			@VarDataSize	= 16
  4581
  4582 401A			@exit
  4583 					.ifdef @new
  4584 					lda <@VarData
  4585 					sta :ztmp
  4586 					lda >@VarData
  4587 					ldy #@VarDataSize-1
  4588 					jmp @FreeMem
  4589 					els
  4590 401A 60				rts						; ret
  4591 					eif
  4592 				.endl
  4593
  4594 401B			.local	UNSHINE_BLOCK					; PROCEDURE
  4595
  4596 				; optimize OK (service.pas), line = 805
  4597
  4598 401B A9 09			lda #$09
  4599 401D 8D 6D A0			sta SHINEREC.FRAME
  4600
  4601 				; optimize FAIL ('SHINE_BLOCK', service.pas), line = 806
  4602
  4603 4020 20 8E 3E			jsr SHINE_BLOCK
  4604
  4605 4023			@exit
  4606 					.ifdef @new
  4607 					lda <@VarData
  4608 					sta :ztmp
  4609 					lda >@VarData
  4610 					ldy #@VarDataSize-1
  4611 					jmp @FreeMem
  4612 					els
  4613 4023 60				rts						; ret
  4614 					eif
  4615 				.endl
  4616
  4617 4024			.local	SHINE						; PROCEDURE
  4618
  4619 				; optimize OK (service.pas), line = 813
  4620
  4621 4024 AD 6F A0			lda SHINEREC.ACTIVE
  4622 4027 F0 03			jeq l_08E5
  4623 4029 20 1B 40			jsr UNSHINE_BLOCK
  4624 402C			l_08E5
  4625
  4626 				; optimize OK (service.pas), line = 815
  4627
  4628 402C AD E7 A0			lda XB
  4629 402F 8D 6B A0			sta SHINEREC.XB
  4630
  4631 				; optimize OK (service.pas), line = 816
  4632
  4633 4032 AD E8 A0			lda YB
  4634 4035 8D 6C A0			sta SHINEREC.YB
  4635
  4636 				; optimize OK (service.pas), line = 817
  4637
  4638 4038 A9 00			lda #$00
  4639 403A 8D 6D A0			sta SHINEREC.FRAME
  4640
  4641 				; optimize OK (service.pas), line = 818
  4642
  4643 403D A9 01			lda #$01
  4644 403F 8D 6F A0			sta SHINEREC.ACTIVE
  4645
  4646 				; optimize OK (service.pas), line = 819
  4647
  4648 4042 AD E8 A0			lda YB
  4649 4045 0A				asl @
  4650 4046 0A				asl @
  4651 4047 0A				asl @
  4652 4048 0A				asl @
  4653 4049 18 6D E7 A0			add XB
  4654 404D A8				tay
  4655 404E B9 00 DB			lda adr.WALL,y
  4656 4051 8D 6E A0			sta SHINEREC.BLOCK
  4657
  4658 				; ------------------------------------------------------------
  4659
  4660 = A0E7			XB	= DATAORIGIN+$025C
  4661 = A0E8			YB	= DATAORIGIN+$025D
  4662
  4663 = A0E7			@VarData	= XB
  4664 = 0002			@VarDataSize	= 2
  4665
  4666 4054			@exit
  4667 					.ifdef @new
  4668 					lda <@VarData
  4669 					sta :ztmp
  4670 					lda >@VarData
  4671 					ldy #@VarDataSize-1
  4672 					jmp @FreeMem
  4673 					els
  4674 4054 60				rts						; ret
  4675 					eif
  4676 				.endl
  4677
  4678 4055			.local	CHECKSHINE					; PROCEDURE
  4679
  4680 				; optimize OK (service.pas), line = 825
  4681
  4682 4055 AD 6F A0			lda SHINEREC.ACTIVE
  4683 4058 C9 01			cmp #$01
  4684 405A D0 03			jne l_0926
  4685 405C 20 8E 3E			jsr SHINE_BLOCK
  4686 405F			l_0926
  4687
  4688 405F			@exit
  4689 					.ifdef @new
  4690 					lda <@VarData
  4691 					sta :ztmp
  4692 					lda >@VarData
  4693 					ldy #@VarDataSize-1
  4694 					jmp @FreeMem
  4695 					els
  4696 405F 60				rts						; ret
  4697 					eif
  4698 				.endl
  4699
  4700 4060			.local	RANDOM_LETTER_DROP				; FUNCTION
  4701
  4702 				; --- RepeatUntilProlog
  4703 4060			l_092F
  4704
  4705 				; optimize OK (service.pas), line = 833
  4706
  4707 4060 A9 64			lda #$64
  4708 4062 20 11 33			jsr SYSTEM.RANDOM.@010180000
  4709 4065 AD C2 9E			lda SYSTEM.RANDOM.@010180000.RESULT
  4710 4068 8D EB A0			sta RN
  4711 406B A9 00			lda #$00
  4712 406D 8D EC A0			sta RN+1
  4713
  4714 				; optimize OK (service.pas), line = 834
  4715
  4716 4070 A9 00			lda #$00
  4717 4072 8D ED A0			sta SUM
  4718 4075 8D EE A0			sta SUM+1
  4719
  4720 				; optimize OK (service.pas), line = 835
  4721
  4722 4078 8D EF A0			sta LETTER
  4723 407B 8D F0 A0			sta LETTER+1
  4724
  4725 				; --- RepeatUntilProlog
  4726 407E			l_093D
  4727
  4728 				; optimize FAIL (0, service.pas), line = 840
  4729
  4730 407E EE EF A0			inc LETTER
  4731 4081 D0 03			sne
  4732 4083 EE F0 A0			inc LETTER+1
  4733
  4734 				; optimize OK (service.pas), line = 841
  4735
  4736 4086 AC EF A0			ldy LETTER
  4737 4089 B9 AD 20			lda adr.LETTER_DIS,y
  4738 408C 18 6D ED A0			add SUM
  4739 4090 8D ED A0			sta SUM
  4740 4093 AD EE A0			lda SUM+1
  4741 4096 69 00			adc #$00
  4742 4098 8D EE A0			sta SUM+1
  4743
  4744 				; optimize OK (service.pas), line = 844
  4745
  4746 409B AD EC A0			lda RN+1
  4747 409E CD EE A0			cmp SUM+1
  4748 40A1 D0 06			bne @+
  4749 40A3 AD EB A0			lda RN
  4750 40A6 CD ED A0			cmp SUM
  4751 				@
  4752 40A9 B0 D3			jcs l_093D
  4753
  4754 				; optimize OK (service.pas), line = 848
  4755
  4756 40AB AD EF A0			lda LETTER
  4757 40AE 38 E9 01			sub #$01
  4758 40B1 85 9F			sta :STACKORIGIN+9
  4759 40B3 AD F0 A0			lda LETTER+1
  4760 40B6 E9 00			sbc #$00
  4761 40B8 CD 83 A0			cmp LETT.LAST+1
  4762 40BB D0 05			bne @+
  4763 40BD A5 9F			lda :STACKORIGIN+9
  4764 40BF CD 82 A0			cmp LETT.LAST
  4765 				@
  4766 40C2 F0 9C			jeq l_092F
  4767
  4768 				; optimize OK (service.pas), line = 850
  4769
  4770 40C4 AD EF A0			lda LETTER
  4771 40C7 38 E9 01			sub #$01
  4772 40CA 8D E9 A0			sta RESULT
  4773 40CD AD F0 A0			lda LETTER+1
  4774 40D0 E9 00			sbc #$00
  4775 40D2 8D EA A0			sta RESULT+1
  4776 40D5			@exit
  4777
  4778 				; ------------------------------------------------------------
  4779
  4780 = A0E9			RESULT	= DATAORIGIN+$025E
  4781 = A0EB			RN	= DATAORIGIN+$0260
  4782 = A0ED			SUM	= DATAORIGIN+$0262
  4783 = A0EF			LETTER	= DATAORIGIN+$0264
  4784
  4785 = A0EB			@VarData	= RN
  4786 = 0006			@VarDataSize	= 6
  4787
  4788 40D5 60				rts						; ret
  4789 				.endl
  4790
  4791 40D6			.local	PUT_LETTER					; PROCEDURE
  4792
  4793 				; optimize OK (service.pas), line = 859
  4794
  4795 40D6 A9 00			lda #$00
  4796 40D8 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4797 40DA AD 76 A0			lda LETT.TYP+1
  4798 40DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4799 40DF AD 75 A0			lda LETT.TYP
  4800 40E2 0A				asl @
  4801 40E3 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4802 40E5 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4803 40E7 0A				asl @
  4804 40E8 26 AF			rol :STACKORIGIN+STACKWIDTH+9
  4805 40EA 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
  4806 40EC 85 9F			sta :STACKORIGIN+9
  4807 40EE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  4808 40F0 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  4809 40F2 A5 9F			lda :STACKORIGIN+9
  4810 40F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  4811 40F6 AD 77 A0			lda LETT.FRAME
  4812 40F9 85 A0			sta :STACKORIGIN+10
  4813 40FB A9 00			lda #$00
  4814 40FD 06 A0			asl :STACKORIGIN+10
  4815 40FF 2A				rol @
  4816 4100 06 A0			asl :STACKORIGIN+10
  4817 4102 2A				rol @
  4818 4103 06 A0			asl :STACKORIGIN+10
  4819 4105 2A				rol @
  4820 4106 06 A0			asl :STACKORIGIN+10
  4821 4108 2A				rol @
  4822 4109 18 65 AF			add :STACKORIGIN+STACKWIDTH+9
  4823 410C 8D F2 A0			sta FL+1
  4824 410F A5 A0			lda :STACKORIGIN+10
  4825 4111 8D F1 A0			sta FL
  4826
  4827 				; optimize OK (service.pas), line = 861
  4828
  4829 4114 A9 00			lda #$00
  4830 4116 8D F5 A0			sta YL
  4831
  4832 4119			l_098D
  4833 				; --- ForToDoCondition
  4834 4119 AD F5 A0			lda YL
  4835 411C C9 08			cmp #$08
  4836 411E 90 03 4C C4 41		jcs l_099B
  4837
  4838 				; optimize OK (service.pas), line = 863
  4839
  4840 4123 85 9F			sta :STACKORIGIN+9
  4841 4125 A9 00			lda #$00
  4842 4127 06 9F			asl :STACKORIGIN+9
  4843 4129 2A				rol @
  4844 412A 06 9F			asl :STACKORIGIN+9
  4845 412C 2A				rol @
  4846 412D 06 9F			asl :STACKORIGIN+9
  4847 412F 2A				rol @
  4848 4130 06 9F			asl :STACKORIGIN+9
  4849 4132 2A				rol @
  4850 4133 06 9F			asl :STACKORIGIN+9
  4851 4135 2A				rol @
  4852 4136 06 9F			asl :STACKORIGIN+9
  4853 4138 2A				rol @
  4854 4139 06 9F			asl :STACKORIGIN+9
  4855 413B 2A				rol @
  4856 413C 8D F4 A0			sta FW+1
  4857 413F A5 9F			lda :STACKORIGIN+9
  4858 4141 8D F3 A0			sta FW
  4859
  4860 				; optimize OK (service.pas), line = 865
  4861
  4862 4144 AD 74 A0			lda LETT.Y
  4863 4147 18 6D F5 A0			add YL
  4864 414B A8				tay
  4865 414C AD 73 A0			lda LETT.X
  4866 414F 18 79 00 C0			add adr.ROW,y
  4867 4153 8D A7 A0			sta BLITZERO.DST
  4868 4156 A9 50			lda #$50
  4869 4158 79 00 C1			adc adr.ROW+256,y
  4870 415B 8D A8 A0			sta BLITZERO.DST+1
  4871 415E A9 00			lda #$00
  4872 4160 69 00			adc #$00
  4873 4162 8D A9 A0			sta BLITZERO.DST+2
  4874 4165 A9 00			lda #$00
  4875 4167 69 00			adc #$00
  4876 4169 8D AA A0			sta BLITZERO.DST+3
  4877 416C AD FA 9F			lda LETTERS.OFS
  4878 416F 18 6D F3 A0			add FW
  4879 4173 85 A2			sta :STACKORIGIN+12
  4880 4175 AD FB 9F			lda LETTERS.OFS+1
  4881 4178 6D F4 A0			adc FW+1
  4882 417B 85 B2			sta :STACKORIGIN+STACKWIDTH+12
  4883 417D AD FC 9F			lda LETTERS.OFS+2
  4884 4180 69 00			adc #$00
  4885 4182 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
  4886 4184 AD FD 9F			lda LETTERS.OFS+3
  4887 4187 69 00			adc #$00
  4888 4189 85 D2			sta :STACKORIGIN+STACKWIDTH*3+12
  4889 418B A5 A2			lda :STACKORIGIN+12
  4890 418D 18 6D F1 A0			add FL
  4891 4191 8D A3 A0			sta BLITZERO.SRC
  4892 4194 A5 B2			lda :STACKORIGIN+STACKWIDTH+12
  4893 4196 6D F2 A0			adc FL+1
  4894 4199 8D A4 A0			sta BLITZERO.SRC+1
  4895 419C A5 C2			lda :STACKORIGIN+STACKWIDTH*2+12
  4896 419E 69 00			adc #$00
  4897 41A0 8D A5 A0			sta BLITZERO.SRC+2
  4898 41A3 A5 D2			lda :STACKORIGIN+STACKWIDTH*3+12
  4899 41A5 69 00			adc #$00
  4900 41A7 8D A6 A0			sta BLITZERO.SRC+3
  4901 41AA A9 10			lda #$10
  4902 41AC 8D AB A0			sta BLITZERO.W
  4903 41AF A9 00			lda #$00
  4904 41B1 8D AC A0			sta BLITZERO.W+1
  4905 41B4 A9 01			lda #$01
  4906 41B6 8D AD A0			sta BLITZERO.H
  4907 41B9 20 EB 3B			jsr BLITZERO
  4908
  4909 				; --- ForToDoEpilog
  4910 41BC EE F5 A0			inc YL
  4911 41BF F0 03 4C 19 41		jne l_098D
  4912 41C4			l_099B
  4913
  4914 				; ------------------------------------------------------------
  4915
  4916 = A0F1			FL	= DATAORIGIN+$0266
  4917 = A0F3			FW	= DATAORIGIN+$0268
  4918 = A0F5			YL	= DATAORIGIN+$026A
  4919
  4920 = A0F1			@VarData	= FL
  4921 = 0005			@VarDataSize	= 5
  4922
  4923 41C4			@exit
  4924 					.ifdef @new
  4925 					lda <@VarData
  4926 					sta :ztmp
  4927 					lda >@VarData
  4928 					ldy #@VarDataSize-1
  4929 					jmp @FreeMem
  4930 					els
  4931 41C4 60				rts						; ret
  4932 					eif
  4933 				.endl
  4934
  4935 41C5			.local	REMOVE_LETTER					; PROCEDURE
  4936
  4937 				; optimize OK (service.pas), line = 877
  4938
  4939 41C5 AC 74 A0			ldy LETT.Y
  4940 41C8 AD 73 A0			lda LETT.X
  4941 41CB 18 79 00 C0			add adr.ROW,y
  4942 41CF 8D 8D A0			sta HLP
  4943 41D2 A9 00			lda #$00
  4944 41D4 79 00 C1			adc adr.ROW+256,y
  4945 41D7 8D 8E A0			sta HLP+1
  4946
  4947 				; optimize OK (service.pas), line = 879
  4948
  4949 41DA AD 74 A0			lda LETT.Y
  4950 41DD C9 C8			cmp #$C8
  4951 41DF B0 52			jcs l_09F1
  4952
  4953 				; optimize OK (service.pas), line = 880
  4954
  4955 41E1 AD 8D A0			lda HLP
  4956 41E4 8D 9C A0			sta BLITBOX.DST
  4957 41E7 A9 50			lda #$50
  4958 41E9 18 6D 8E A0			add HLP+1
  4959 41ED 8D 9D A0			sta BLITBOX.DST+1
  4960 41F0 A9 00			lda #$00
  4961 41F2 69 00			adc #$00
  4962 41F4 8D 9E A0			sta BLITBOX.DST+2
  4963 41F7 A9 00			lda #$00
  4964 41F9 69 00			adc #$00
  4965 41FB 8D 9F A0			sta BLITBOX.DST+3
  4966 41FE AD 9A 9F			lda PLAYSCREEN.OFS
  4967 4201 18 6D 8D A0			add HLP
  4968 4205 8D 98 A0			sta BLITBOX.SRC
  4969 4208 AD 9B 9F			lda PLAYSCREEN.OFS+1
  4970 420B 6D 8E A0			adc HLP+1
  4971 420E 8D 99 A0			sta BLITBOX.SRC+1
  4972 4211 AD 9C 9F			lda PLAYSCREEN.OFS+2
  4973 4214 69 00			adc #$00
  4974 4216 8D 9A A0			sta BLITBOX.SRC+2
  4975 4219 AD 9D 9F			lda PLAYSCREEN.OFS+3
  4976 421C 69 00			adc #$00
  4977 421E 8D 9B A0			sta BLITBOX.SRC+3
  4978 4221 A9 10			lda #$10
  4979 4223 8D A0 A0			sta BLITBOX.W
  4980 4226 A9 00			lda #$00
  4981 4228 8D A1 A0			sta BLITBOX.W+1
  4982 422B A9 08			lda #$08
  4983 422D 8D A2 A0			sta BLITBOX.H
  4984 4230 20 6A 3B			jsr BLITBOX
  4985 4233			l_09F1
  4986
  4987 				; ------------------------------------------------------------
  4988
  4989 = A0F6			YL	= DATAORIGIN+$026B
  4990
  4991 = A0F6			@VarData	= YL
  4992 = 0001			@VarDataSize	= 1
  4993
  4994 4233			@exit
  4995 					.ifdef @new
  4996 					lda <@VarData
  4997 					sta :ztmp
  4998 					lda >@VarData
  4999 					ldy #@VarDataSize-1
  5000 					jmp @FreeMem
  5001 					els
  5002 4233 60				rts						; ret
  5003 					eif
  5004 				.endl
  5005
  5006 4234			.local	DISABLE_LETTER					; PROCEDURE
  5007
  5008 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 898
  5009
  5010 4234 20 C5 41			jsr REMOVE_LETTER
  5011
  5012 				; optimize OK (service.pas), line = 899
  5013
  5014 4237 A9 00			lda #$00
  5015 4239 8D 79 A0			sta LETT.ACTIVE
  5016
  5017 423C			@exit
  5018 					.ifdef @new
  5019 					lda <@VarData
  5020 					sta :ztmp
  5021 					lda >@VarData
  5022 					ldy #@VarDataSize-1
  5023 					jmp @FreeMem
  5024 					els
  5025 423C 60				rts						; ret
  5026 					eif
  5027 				.endl
  5028
  5029 423D			.local	START_LETTER					; PROCEDURE
  5030
  5031 				; optimize OK (service.pas), line = 905
  5032
  5033 423D AD 79 A0			lda LETT.ACTIVE
  5034 4240 F0 03			jeq l_0A1C
  5035 4242 20 34 42			jsr DISABLE_LETTER
  5036 4245			l_0A1C
  5037
  5038 				; optimize OK (service.pas), line = 907
  5039
  5040 4245 AD F7 A0			lda XL
  5041 4248 8D 73 A0			sta LETT.X
  5042
  5043 				; optimize OK (service.pas), line = 908
  5044
  5045 424B AD F9 A0			lda YL
  5046 424E 8D 74 A0			sta LETT.Y
  5047
  5048 				; optimize OK (service.pas), line = 909
  5049
  5050 4251 AD FB A0			lda LETTER
  5051 4254 8D 75 A0			sta LETT.TYP
  5052 4257 AD FC A0			lda LETTER+1
  5053 425A 8D 76 A0			sta LETT.TYP+1
  5054
  5055 				; optimize OK (service.pas), line = 910
  5056
  5057 425D A9 00			lda #$00
  5058 425F 8D 77 A0			sta LETT.FRAME
  5059
  5060 				; optimize OK (service.pas), line = 911
  5061
  5062 4262 8D 78 A0			sta LETT.SUBFRAME
  5063
  5064 				; optimize OK (service.pas), line = 912
  5065
  5066 4265 A9 01			lda #$01
  5067 4267 8D 79 A0			sta LETT.ACTIVE
  5068
  5069 				; ------------------------------------------------------------
  5070
  5071 = A0F7			XL	= DATAORIGIN+$026C
  5072 = A0F9			YL	= DATAORIGIN+$026E
  5073 = A0FB			LETTER	= DATAORIGIN+$0270
  5074
  5075 = A0F7			@VarData	= XL
  5076 = 0006			@VarDataSize	= 6
  5077
  5078 426A			@exit
  5079 					.ifdef @new
  5080 					lda <@VarData
  5081 					sta :ztmp
  5082 					lda >@VarData
  5083 					ldy #@VarDataSize-1
  5084 					jmp @FreeMem
  5085 					els
  5086 426A 60				rts						; ret
  5087 					eif
  5088 				.endl
  5089
  5090 426B			.local	CHECK_LETTER					; PROCEDURE
  5091
  5092 				; optimize OK (service.pas), line = 918
  5093
  5094 426B AD 79 A0			lda LETT.ACTIVE
  5095 426E D0 03 4C 6A 43		jeq l_0A4B
  5096
  5097 				; optimize FAIL ('REMOVE_LETTER', service.pas), line = 920
  5098
  5099 4273 20 C5 41			jsr REMOVE_LETTER
  5100
  5101 				; optimize FAIL (0, service.pas), line = 921
  5102
  5103 4276 EE 74 A0			inc LETT.Y
  5104
  5105 				; optimize OK (service.pas), line = 922
  5106
  5107 4279 AD 74 A0			lda LETT.Y
  5108 427C C9 C8			cmp #$C8
  5109 427E 90 03			jcc l_0A63
  5110 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 923
  5111 4280 4C 5C 43			jmp l_0A6E
  5112 4283			l_0A63
  5113
  5114 				; optimize FAIL ('PUT_LETTER', service.pas), line = 925
  5115
  5116 4283 20 D6 40			jsr PUT_LETTER
  5117
  5118 				; optimize FAIL (0, service.pas), line = 926
  5119
  5120 4286 EE 78 A0			inc LETT.SUBFRAME
  5121
  5122 				; optimize OK (service.pas), line = 927
  5123
  5124 4289 AD 78 A0			lda LETT.SUBFRAME
  5125 428C C9 05			cmp #$05
  5126 428E D0 08			jne l_0A85
  5127
  5128 				; optimize OK (service.pas), line = 929
  5129
  5130 4290 A9 00			lda #$00
  5131 4292 8D 78 A0			sta LETT.SUBFRAME
  5132
  5133 				; optimize FAIL (0, service.pas), line = 930
  5134
  5135 4295 EE 77 A0			inc LETT.FRAME
  5136 4298			l_0A85
  5137
  5138 				; optimize OK (service.pas), line = 933
  5139
  5140 4298 AD 77 A0			lda LETT.FRAME
  5141 429B C9 08			cmp #$08
  5142 429D D0 05			jne l_0AA2
  5143 429F A9 00			lda #$00
  5144 42A1 8D 77 A0			sta LETT.FRAME
  5145 42A4			l_0AA2
  5146
  5147 				; optimize OK (service.pas), line = 935
  5148
  5149 42A4 AD 73 A0			lda LETT.X
  5150 42A7 18 69 10			add #$10
  5151 42AA 85 A0			sta :STACKORIGIN+10
  5152 42AC A9 00			lda #$00
  5153 42AE 69 00			adc #$00
  5154 42B0 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5155 42B2 A9 00			lda #$00
  5156 42B4 C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
  5157 42B6 D0 05			bne @+
  5158 42B8 AD 0E A0			lda VAUS.X
  5159 42BB C5 A0			cmp :STACKORIGIN+10
  5160 				@
  5161 42BD 90 03 4C 5F 43		jcs l_0AFB
  5162 				@
  5163 42C2 AD 0E A0			lda VAUS.X
  5164 42C5 18 6D 16 A0			add VAUS.WIDTH
  5165 42C9 85 A0			sta :STACKORIGIN+10
  5166 42CB A9 00			lda #$00
  5167 42CD 69 00			adc #$00
  5168 42CF C9 00			cmp #$00
  5169 42D1 D0 05			bne @+
  5170 42D3 A5 A0			lda :STACKORIGIN+10
  5171 42D5 CD 73 A0			cmp LETT.X
  5172 				@
  5173 42D8 B0 03 4C 5F 43		jcc l_0AFB
  5174 42DD D0 03 4C 5F 43		jeq l_0AFB
  5175 				@
  5176 42E2 AD 74 A0			lda LETT.Y
  5177 42E5 18 69 08			add #$08
  5178 42E8 85 A1			sta :STACKORIGIN+11
  5179 42EA A9 00			lda #$00
  5180 42EC 69 00			adc #$00
  5181 42EE 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  5182 42F0 A9 00			lda #$00
  5183 42F2 C5 B1			cmp :STACKORIGIN+STACKWIDTH+11
  5184 42F4 D0 05			bne @+
  5185 42F6 AD 0F A0			lda VAUS.Y
  5186 42F9 C5 A1			cmp :STACKORIGIN+11
  5187 				@
  5188 42FB B0 62			jcs l_0AFB
  5189 				@
  5190 42FD AD 0F A0			lda VAUS.Y
  5191 4300 18 6D 17 A0			add VAUS.HEIGHT
  5192 4304 85 A0			sta :STACKORIGIN+10
  5193 4306 A9 00			lda #$00
  5194 4308 69 00			adc #$00
  5195 430A C9 00			cmp #$00
  5196 430C D0 05			bne @+
  5197 430E A5 A0			lda :STACKORIGIN+10
  5198 4310 CD 74 A0			cmp LETT.Y
  5199 				@
  5200 4313 90 4A			jcc l_0AFB
  5201 4315 F0 48			jeq l_0AFB
  5202 				@
  5203
  5204 				; optimize OK (service.pas), line = 938
  5205
  5206 4317 A9 64			lda #$64
  5207 4319 8D 74 9F			sta BALL_BLOCK_SOUND.A
  5208 431C A9 00			lda #$00
  5209 431E 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
  5210 4321 A9 0A			lda #$0A
  5211 4323 8D 76 9F			sta BALL_BLOCK_SOUND.B
  5212 4326 A9 00			lda #$00
  5213 4328 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
  5214 432B 20 51 39			jsr BALL_BLOCK_SOUND
  5215
  5216 				; optimize OK (service.pas), line = 939
  5217
  5218 432E AC 75 A0			ldy LETT.TYP
  5219 4331 C8				iny
  5220 4332 8C 1A A0			sty VAUS.LETTER
  5221
  5222 				; optimize OK (service.pas), line = 940
  5223
  5224 4335 AD 6A A0			lda CUR_PLAYER
  5225 4338 0A				asl @
  5226 4339 0A				asl @
  5227 433A A8				tay
  5228 433B B9 4F A0			lda adr.SCORE.PLAYER,y
  5229 433E 18 69 E8			add #$E8
  5230 4341 99 4F A0			sta adr.SCORE.PLAYER,y
  5231 4344 B9 50 A0			lda adr.SCORE.PLAYER+1,y
  5232 4347 69 03			adc #$03
  5233 4349 99 50 A0			sta adr.SCORE.PLAYER+1,y
  5234 434C B9 51 A0			lda adr.SCORE.PLAYER+2,y
  5235 434F 69 00			adc #$00
  5236 4351 99 51 A0			sta adr.SCORE.PLAYER+2,y
  5237 4354 B9 52 A0			lda adr.SCORE.PLAYER+3,y
  5238 4357 69 00			adc #$00
  5239 4359 99 52 A0			sta adr.SCORE.PLAYER+3,y
  5240 435C			l_0A6E
  5241
  5242 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 941
  5243
  5244 435C 20 34 42			jsr DISABLE_LETTER
  5245 435F			l_0AFB
  5246
  5247 				; optimize OK (service.pas), line = 945
  5248
  5249 435F A9 00			lda #$00
  5250 4361 8D 7A A0			sta LETT.INCOMING
  5251 4364 8D 7B A0			sta LETT.INCOMING+1
  5252 4367 4C A1 43			jmp l_0B1C
  5253 436A			l_0A4B
  5254
  5255 				; optimize OK (service.pas), line = 947
  5256
  5257 436A AD 7A A0			lda LETT.INCOMING
  5258 436D C9 E9			cmp #$E9
  5259 436F AD 7B A0			lda LETT.INCOMING+1
  5260 4372 E9 03			sbc #$03
  5261 4374 50 02			svc
  5262 4376 49 80			eor #$80
  5263 4378 30 27			jmi l_0B2D
  5264
  5265 				; optimize OK (service.pas), line = 948
  5266
  5267 437A AD 7C A0			lda LETT.NEXTX
  5268 437D 8D F7 A0			sta START_LETTER.XL
  5269 4380 AD 7D A0			lda LETT.NEXTX+1
  5270 4383 8D F8 A0			sta START_LETTER.XL+1
  5271 4386 AD 7E A0			lda LETT.NEXTY
  5272 4389 8D F9 A0			sta START_LETTER.YL
  5273 438C AD 7F A0			lda LETT.NEXTY+1
  5274 438F 8D FA A0			sta START_LETTER.YL+1
  5275 4392 AD 80 A0			lda LETT.NEXTTYPE
  5276 4395 8D FB A0			sta START_LETTER.LETTER
  5277 4398 AD 81 A0			lda LETT.NEXTTYPE+1
  5278 439B 8D FC A0			sta START_LETTER.LETTER+1
  5279 439E 20 3D 42			jsr START_LETTER
  5280 43A1			l_0B1C
  5281 43A1			l_0B2D
  5282
  5283 43A1			@exit
  5284 					.ifdef @new
  5285 					lda <@VarData
  5286 					sta :ztmp
  5287 					lda >@VarData
  5288 					ldy #@VarDataSize-1
  5289 					jmp @FreeMem
  5290 					els
  5291 43A1 60				rts						; ret
  5292 					eif
  5293 				.endl
  5294
  5295 43A2			.local	SHOWBTMPICTURE					; PROCEDURE
  5296
  5297 				; ------------------------------------------------------------
  5298
  5299 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  5300 				; as Pointer
  5301 43A2 B5 96			lda :STACKORIGIN,x
  5302 43A4 85 84			sta :bp2
  5303 43A6 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  5304 43A8 85 85			sta :bp2+1
  5305 43AA A0 07			ldy #$07
  5306 43AC B1 84 99 FD A0 88 + 	mva:rpl (:bp2),y adr.BTM,y-
  5307 43B4 CA				dex
  5308 43B5			@main
  5309
  5310 				; optimize OK (service.pas), line = 958
  5311
  5312 43B5 AD 01 A1			lda BTM.OFS
  5313 43B8 8D 98 A0			sta BLITBOX.SRC
  5314 43BB AD 02 A1			lda BTM.OFS+1
  5315 43BE 8D 99 A0			sta BLITBOX.SRC+1
  5316 43C1 AD 03 A1			lda BTM.OFS+2
  5317 43C4 8D 9A A0			sta BLITBOX.SRC+2
  5318 43C7 AD 04 A1			lda BTM.OFS+3
  5319 43CA 8D 9B A0			sta BLITBOX.SRC+3
  5320 43CD A9 00			lda #$00
  5321 43CF 8D 9C A0			sta BLITBOX.DST
  5322 43D2 A9 50			lda #$50
  5323 43D4 8D 9D A0			sta BLITBOX.DST+1
  5324 43D7 A9 00			lda #$00
  5325 43D9 8D 9E A0			sta BLITBOX.DST+2
  5326 43DC 8D 9F A0			sta BLITBOX.DST+3
  5327 43DF AD FD A0			lda BTM.WIDTH
  5328 43E2 8D A0 A0			sta BLITBOX.W
  5329 43E5 AD FE A0			lda BTM.WIDTH+1
  5330 43E8 8D A1 A0			sta BLITBOX.W+1
  5331 43EB AD FF A0			lda BTM.HEIGHT
  5332 43EE 8D A2 A0			sta BLITBOX.H
  5333 43F1 20 6A 3B			jsr BLITBOX
  5334
  5335 				; ------------------------------------------------------------
  5336
  5337 = A0FD			adr.BTM	= DATAORIGIN+$0272	; [8] RECORD
  5338 43F4			.var BTM	= adr.BTM .word
  5339 = A0FD			BTM.WIDTH	= DATAORIGIN+$0272
  5340 = A0FF			BTM.HEIGHT	= DATAORIGIN+$0274
  5341 = A101			BTM.OFS	= DATAORIGIN+$0276
  5342
  5343 = A0FD			@VarData	= BTM.WIDTH
  5344 = 0008			@VarDataSize	= 8
  5345
  5346 43F4			@exit
  5347 					.ifdef @new
  5348 					lda <@VarData
  5349 					sta :ztmp
  5350 					lda >@VarData
  5351 					ldy #@VarDataSize-1
  5352 					jmp @FreeMem
  5353 					els
  5354 43F4 60				rts						; ret
  5355 					eif
  5356 = 43F5 FD A0		BTM
  5356 				.endl
  5357
  5358 43F7			.local	PLACE_BALL					; PROCEDURE
  5359
  5360 				; optimize OK (service.pas), line = 979
  5361
  5362 43F7 AC 05 A1 84 84 AC + 	mwy BALL :bp2
  5363 4401 A0 00			ldy #BALL.X-DATAORIGIN
  5364 4403 B1 84			lda (:bp2),y
  5365 4405 38 E9 03			sub #$03
  5366 4408 85 9F			sta :STACKORIGIN+9
  5367 440A C8				iny
  5368 440B B1 84			lda (:bp2),y
  5369 440D E9 00			sbc #$00
  5370 440F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5371 4411 A0 02			ldy #BALL.Y-DATAORIGIN
  5372 4413 B1 84			lda (:bp2),y
  5373 4415 38 E9 03			sub #$03
  5374 4418 A8				tay
  5375 4419 A5 9F			lda :STACKORIGIN+9
  5376 441B 18 79 00 C0			add adr.ROW,y
  5377 441F 8D 8D A0			sta HLP
  5378 4422 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5379 4424 79 00 C1			adc adr.ROW+256,y
  5380 4427 8D 8E A0			sta HLP+1
  5381
  5382 				; optimize OK (service.pas), line = 981
  5383
  5384 442A AD 8D A0			lda HLP
  5385 442D 8D A7 A0			sta BLITZERO.DST
  5386 4430 A9 50			lda #$50
  5387 4432 18 6D 8E A0			add HLP+1
  5388 4436 8D A8 A0			sta BLITZERO.DST+1
  5389 4439 A9 00			lda #$00
  5390 443B 69 00			adc #$00
  5391 443D 8D A9 A0			sta BLITZERO.DST+2
  5392 4440 A9 00			lda #$00
  5393 4442 69 00			adc #$00
  5394 4444 8D AA A0			sta BLITZERO.DST+3
  5395 4447 AD 92 9F			lda BALLDATA.OFS
  5396 444A 8D A3 A0			sta BLITZERO.SRC
  5397 444D AD 93 9F			lda BALLDATA.OFS+1
  5398 4450 8D A4 A0			sta BLITZERO.SRC+1
  5399 4453 AD 94 9F			lda BALLDATA.OFS+2
  5400 4456 8D A5 A0			sta BLITZERO.SRC+2
  5401 4459 AD 95 9F			lda BALLDATA.OFS+3
  5402 445C 8D A6 A0			sta BLITZERO.SRC+3
  5403 445F A9 05			lda #$05
  5404 4461 8D AB A0			sta BLITZERO.W
  5405 4464 A9 00			lda #$00
  5406 4466 8D AC A0			sta BLITZERO.W+1
  5407 4469 A9 05			lda #$05
  5408 446B 8D AD A0			sta BLITZERO.H
  5409 446E 20 EB 3B			jsr BLITZERO
  5410
  5411 				; ------------------------------------------------------------
  5412
  5413 = A105			BALL	= DATAORIGIN+$027A
  5414 = 9E8B			BALL.X	= DATAORIGIN+$0000
  5415 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  5416 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  5417 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  5418 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  5419 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  5420 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  5421 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  5422 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  5423 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  5424 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  5425 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  5426 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  5427 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  5428 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  5429 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  5430
  5431 = A105			@VarData	= BALL
  5432 = 0002			@VarDataSize	= 2
  5433
  5434 4471			@exit
  5435 					.ifdef @new
  5436 					lda <@VarData
  5437 					sta :ztmp
  5438 					lda >@VarData
  5439 					ldy #@VarDataSize-1
  5440 					jmp @FreeMem
  5441 					els
  5442 4471 60				rts						; ret
  5443 					eif
  5444 				.endl
  5445
  5446 4472			.local	REMOVE_BALL					; PROCEDURE
  5447
  5448 				; optimize OK (service.pas), line = 1008
  5449
  5450 4472 AC 09 A1 84 84 AC + 	mwy BALL :bp2
  5451 447C A0 08			ldy #BALL.OLDX-DATAORIGIN
  5452 447E B1 84			lda (:bp2),y
  5453 4480 38 E9 03			sub #$03
  5454 4483 85 9F			sta :STACKORIGIN+9
  5455 4485 C8				iny
  5456 4486 B1 84			lda (:bp2),y
  5457 4488 E9 00			sbc #$00
  5458 448A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5459 448C A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5460 448E B1 84			lda (:bp2),y
  5461 4490 38 E9 03			sub #$03
  5462 4493 A8				tay
  5463 4494 A5 9F			lda :STACKORIGIN+9
  5464 4496 18 79 00 C0			add adr.ROW,y
  5465 449A 8D 8D A0			sta HLP
  5466 449D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5467 449F 79 00 C1			adc adr.ROW+256,y
  5468 44A2 8D 8E A0			sta HLP+1
  5469
  5470 				; optimize OK (service.pas), line = 1010
  5471
  5472 44A5 AD 8D A0			lda HLP
  5473 44A8 8D 9C A0			sta BLITBOX.DST
  5474 44AB A9 50			lda #$50
  5475 44AD 18 6D 8E A0			add HLP+1
  5476 44B1 8D 9D A0			sta BLITBOX.DST+1
  5477 44B4 A9 00			lda #$00
  5478 44B6 69 00			adc #$00
  5479 44B8 8D 9E A0			sta BLITBOX.DST+2
  5480 44BB A9 00			lda #$00
  5481 44BD 69 00			adc #$00
  5482 44BF 8D 9F A0			sta BLITBOX.DST+3
  5483 44C2 AD 9A 9F			lda PLAYSCREEN.OFS
  5484 44C5 18 6D 8D A0			add HLP
  5485 44C9 8D 98 A0			sta BLITBOX.SRC
  5486 44CC AD 9B 9F			lda PLAYSCREEN.OFS+1
  5487 44CF 6D 8E A0			adc HLP+1
  5488 44D2 8D 99 A0			sta BLITBOX.SRC+1
  5489 44D5 AD 9C 9F			lda PLAYSCREEN.OFS+2
  5490 44D8 69 00			adc #$00
  5491 44DA 8D 9A A0			sta BLITBOX.SRC+2
  5492 44DD AD 9D 9F			lda PLAYSCREEN.OFS+3
  5493 44E0 69 00			adc #$00
  5494 44E2 8D 9B A0			sta BLITBOX.SRC+3
  5495 44E5 A9 05			lda #$05
  5496 44E7 8D A0 A0			sta BLITBOX.W
  5497 44EA A9 00			lda #$00
  5498 44EC 8D A1 A0			sta BLITBOX.W+1
  5499 44EF A9 05			lda #$05
  5500 44F1 8D A2 A0			sta BLITBOX.H
  5501 44F4 20 6A 3B			jsr BLITBOX
  5502
  5503 				; ------------------------------------------------------------
  5504
  5505 = A109			BALL	= DATAORIGIN+$027E
  5506 = 9E8B			BALL.X	= DATAORIGIN+$0000
  5507 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  5508 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  5509 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  5510 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  5511 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  5512 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  5513 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  5514 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  5515 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  5516 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  5517 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  5518 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  5519 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  5520 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  5521 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  5522
  5523 = A109			@VarData	= BALL
  5524 = 0002			@VarDataSize	= 2
  5525
  5526 44F7			@exit
  5527 					.ifdef @new
  5528 					lda <@VarData
  5529 					sta :ztmp
  5530 					lda >@VarData
  5531 					ldy #@VarDataSize-1
  5532 					jmp @FreeMem
  5533 					els
  5534 44F7 60				rts						; ret
  5535 					eif
  5536 				.endl
  5537
  5538 44F8			.local	WAIT_VBL					; PROCEDURE
  5539
  5540 				; optimize FAIL ('SYSTEM.PAUSE.@00', service.pas), line = 1044
  5541
  5542 44F8 20 FA 32			jsr SYSTEM.PAUSE.@00
  5543
  5544 44FB			@exit
  5545 					.ifdef @new
  5546 					lda <@VarData
  5547 					sta :ztmp
  5548 					lda >@VarData
  5549 					ldy #@VarDataSize-1
  5550 					jmp @FreeMem
  5551 					els
  5552 44FB 60				rts						; ret
  5553 					eif
  5554 				.endl
  5555
  5556 44FC			.local	SET_BALL					; PROCEDURE
  5557
  5558 				; optimize OK (service.pas), line = 1056
  5559
  5560 44FC AC 0D A1 84 84 AC + 	mwy BALL :bp2
  5561 4506 A0 09			ldy #BALL.OLDX-DATAORIGIN+$01
  5562 4508 B1 84			lda (:bp2),y
  5563 450A C9 FF			cmp #$FF
  5564 450C D0 05			bne @+
  5565 450E 88				dey
  5566 450F B1 84			lda (:bp2),y
  5567 4511 C9 FF			cmp #$FF
  5568 				@
  5569 4513 F0 13			jeq l_0BADs
  5570 4515 A0 0B			ldy #BALL.OLDY-DATAORIGIN+$01
  5571 4517 B1 84			lda (:bp2),y
  5572 4519 C9 FF			cmp #$FF
  5573 451B D0 05			bne @+
  5574 451D 88				dey
  5575 451E B1 84			lda (:bp2),y
  5576 4520 C9 FF			cmp #$FF
  5577 				@
  5578 4522 F0 04			jeq l_0BADs
  5579 4524 A9 01 D0 02			lda:sne #$01
  5580 4528 A9 00		l_0BADs	lda #$00
  5581 452A 8D 11 A1			sta B0
  5582
  5583 				; optimize OK (service.pas), line = 1057
  5584
  5585 452D AC 0D A1 84 84 AC + 	mwy BALL :bp2
  5586 4537 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5587 4539 B1 84			lda (:bp2),y
  5588 453B 85 9F			sta :STACKORIGIN+9
  5589 453D C8				iny
  5590 453E B1 84			lda (:bp2),y
  5591 4540 A0 01			ldy #BALL.X-DATAORIGIN+$01
  5592 4542 D1 84			cmp (:bp2),y
  5593 4544 D0 05			bne @+
  5594 4546 88				dey
  5595 4547 A5 9F			lda :STACKORIGIN+9
  5596 4549 D1 84			cmp (:bp2),y
  5597 				@
  5598 454B D0 03			bne @+
  5599 454D 4C 53 45			jmp *+6
  5600 				@\	jmp l_0BC5s
  5600 				@
  5600 4550 4C 73 45			JMP L_0BC5S
  5601 4553 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5602 4555 B1 84			lda (:bp2),y
  5603 4557 85 A0			sta :STACKORIGIN+10
  5604 4559 C8				iny
  5605 455A B1 84			lda (:bp2),y
  5606 455C A0 03			ldy #BALL.Y-DATAORIGIN+$01
  5607 455E D1 84			cmp (:bp2),y
  5608 4560 D0 05			bne @+
  5609 4562 88				dey
  5610 4563 A5 A0			lda :STACKORIGIN+10
  5611 4565 D1 84			cmp (:bp2),y
  5612 				@
  5613 4567 D0 03			bne @+
  5614 4569 4C 6F 45			jmp *+6
  5615 				@\	jmp l_0BC5s
  5615 				@
  5615 456C 4C 73 45			JMP L_0BC5S
  5616 456F A9 00 F0 02			lda:seq #$00
  5617 4573 A9 01		l_0BC5s	lda #$01
  5618 4575 8D 12 A1			sta B1
  5619
  5620 				; optimize OK (service.pas), line = 1059
  5621
  5622 4578 AD 11 A1			lda B0
  5623 457B 2D 12 A1			and B1
  5624 457E F0 0F			jeq l_0BD7
  5625
  5626 				; optimize OK (service.pas), line = 1060
  5627
  5628 4580 AD 0D A1			lda BALL
  5629 4583 8D 09 A1			sta REMOVE_BALL.BALL
  5630 4586 AD 0E A1			lda BALL+1
  5631 4589 8D 0A A1			sta REMOVE_BALL.BALL+1
  5632 458C 20 72 44			jsr REMOVE_BALL
  5633 458F			l_0BD7
  5634
  5635 				; optimize OK (service.pas), line = 1062
  5636
  5637 458F AD 0D A1			lda BALL
  5638 4592 8D 05 A1			sta PLACE_BALL.BALL
  5639 4595 AD 0E A1			lda BALL+1
  5640 4598 8D 06 A1			sta PLACE_BALL.BALL+1
  5641 459B 20 F7 43			jsr PLACE_BALL
  5642
  5643 				; optimize OK (service.pas), line = 1064
  5644
  5645 459E AC 0D A1 84 84 AC + 	mwy BALL :bp2
  5646 45A8 A0 00			ldy #BALL.X-DATAORIGIN
  5647 45AA B1 84			lda (:bp2),y
  5648 45AC 85 9F			sta :STACKORIGIN+9
  5649 45AE C8				iny
  5650 45AF B1 84			lda (:bp2),y
  5651 45B1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5652 45B3 A0 08			ldy #BALL.OLDX-DATAORIGIN
  5653 45B5 A5 9F			lda :STACKORIGIN+9
  5654 45B7 91 84			sta (:bp2),y
  5655 45B9 C8				iny
  5656 45BA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5657 45BC 91 84			sta (:bp2),y
  5658
  5659 				; optimize OK (service.pas), line = 1065
  5660
  5661 45BE A0 02			ldy #BALL.Y-DATAORIGIN
  5662 45C0 B1 84			lda (:bp2),y
  5663 45C2 85 9F			sta :STACKORIGIN+9
  5664 45C4 C8				iny
  5665 45C5 B1 84			lda (:bp2),y
  5666 45C7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5667 45C9 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  5668 45CB A5 9F			lda :STACKORIGIN+9
  5669 45CD 91 84			sta (:bp2),y
  5670 45CF C8				iny
  5671 45D0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5672 45D2 91 84			sta (:bp2),y
  5673
  5674 				; ------------------------------------------------------------
  5675
  5676 = A10D			BALL	= DATAORIGIN+$0282
  5677 = 9E8B			BALL.X	= DATAORIGIN+$0000
  5678 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  5679 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  5680 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  5681 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  5682 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  5683 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  5684 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  5685 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  5686 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  5687 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  5688 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  5689 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  5690 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  5691 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  5692 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  5693 = A111			B0	= DATAORIGIN+$0286
  5694 = A112			B1	= DATAORIGIN+$0287
  5695
  5696 = A10D			@VarData	= BALL
  5697 = 0004			@VarDataSize	= 4
  5698
  5699 45D4			@exit
  5700 					.ifdef @new
  5701 					lda <@VarData
  5702 					sta :ztmp
  5703 					lda >@VarData
  5704 					ldy #@VarDataSize-1
  5705 					jmp @FreeMem
  5706 					els
  5707 45D4 60				rts						; ret
  5708 					eif
  5709 				.endl
  5710
  5711 45D5			.local	SET_BALL_SPEED					; PROCEDURE
  5712
  5713 				; optimize OK (service.pas), line = 1078
  5714
  5715 45D5 AC 13 A1 84 84 AC + 	mwy BALL :bp2
  5716 45DF A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5717 45E1 B1 84			lda (:bp2),y
  5718 45E3 8D 19 A1			sta SX
  5719 45E6 C8				iny
  5720 45E7 B1 84			lda (:bp2),y
  5721 45E9 8D 1A A1			sta SX+1
  5722
  5723 				; optimize OK (service.pas), line = 1079
  5724
  5725 45EC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5726 45EE B1 84			lda (:bp2),y
  5727 45F0 8D 1B A1			sta SY
  5728 45F3 C8				iny
  5729 45F4 B1 84			lda (:bp2),y
  5730 45F6 8D 1C A1			sta SY+1
  5731
  5732 				; optimize OK (service.pas), line = 1081
  5733
  5734 45F9 AD 19 A1			lda SX
  5735 45FC 85 8A			sta SYSTEM.ABS.@010184000.X
  5736 45FE AD 1A A1			lda SX+1
  5737 4601 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5738 4603 20 DF 2A			jsr SYSTEM.ABS.@010184000
  5739 4606 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5740 4608 8D 25 A1			sta A
  5741 460B A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5742 460D 8D 26 A1			sta A+1
  5743
  5744 				; optimize OK (service.pas), line = 1082
  5745
  5746 4610 AD 1B A1			lda SY
  5747 4613 85 8A			sta SYSTEM.ABS.@010184000.X
  5748 4615 AD 1C A1			lda SY+1
  5749 4618 85 8B			sta SYSTEM.ABS.@010184000.X+1
  5750 461A 20 DF 2A			jsr SYSTEM.ABS.@010184000
  5751 461D A5 92			lda SYSTEM.ABS.@010184000.RESULT
  5752 461F 8D 27 A1			sta B
  5753 4622 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  5754 4624 8D 28 A1			sta B+1
  5755
  5756 				; optimize OK (service.pas), line = 1084
  5757
  5758 4627 AD 25 A1			lda A
  5759 462A 85 8E			sta :ecx
  5760 462C 85 86			sta :eax
  5761 462E AD 26 A1			lda A+1
  5762 4631 85 8F			sta :ecx+1
  5763 4633 85 87			sta :eax+1
  5764 					.ifdef fmulinit
  5765 					fmulu_16
  5766 					els
  5767 4635 20 0B 23			imulCX
  5768 					eif
  5769 4638 A5 86			lda :eax
  5770 463A 85 9F			sta :STACKORIGIN+9
  5771 463C A5 87			lda :eax+1
  5772 463E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  5773 4640 A5 88			lda :eax+2
  5774 4642 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  5775 4644 A5 89			lda :eax+3
  5776 4646 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  5777 4648 AD 27 A1			lda B
  5778 464B 85 8E			sta :ecx
  5779 464D 85 86			sta :eax
  5780 464F AD 28 A1			lda B+1
  5781 4652 85 8F			sta :ecx+1
  5782 4654 85 87			sta :eax+1
  5783 					.ifdef fmulinit
  5784 					fmulu_16
  5785 					els
  5786 4656 20 0B 23			imulCX
  5787 					eif
  5788 4659 A5 9F			lda :STACKORIGIN+9
  5789 465B 18 65 86			add :eax
  5790 465E 8D 21 A1			sta I
  5791 4661 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  5792 4663 65 87			adc :eax+1
  5793 4665 8D 22 A1			sta I+1
  5794 4668 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  5795 466A 65 88			adc :eax+2
  5796 466C 8D 23 A1			sta I+2
  5797 466F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  5798 4671 65 89			adc :eax+3
  5799 4673 8D 24 A1			sta I+3
  5800
  5801 				; optimize OK (service.pas), line = 1086
  5802
  5803 4676 AD 21 A1			lda I
  5804 4679 8D 78 9F			sta SQRT32.V
  5805 467C AD 22 A1			lda I+1
  5806 467F 8D 79 9F			sta SQRT32.V+1
  5807 4682 AD 23 A1			lda I+2
  5808 4685 8D 7A 9F			sta SQRT32.V+2
  5809 4688 AD 24 A1			lda I+3
  5810 468B 8D 7B 9F			sta SQRT32.V+3
  5811 468E 20 52 39			jsr SQRT32
  5812 4691 AD 7C 9F			lda SQRT32.RESULT
  5813 4694 8D 8D A0			sta HLP
  5814 4697 AD 7D 9F			lda SQRT32.RESULT+1
  5815 469A 8D 8E A0			sta HLP+1
  5816
  5817 				; optimize OK (service.pas), line = 1088
  5818
  5819 469D AD 8D A0			lda HLP
  5820 46A0 85 8E			sta :FPMAN0
  5821 46A2 AD 8E A0			lda HLP+1
  5822 46A5 85 8F			sta :FPMAN1
  5823 46A7 A9 00			lda #$00
  5824 46A9 85 90			sta :FPMAN2
  5825 46AB 85 91			sta :FPMAN3
  5826 46AD 20 A4 27			jsr @I2F
  5827 46B0 A5 8E			lda :FPMAN0
  5828 46B2 85 A0			sta :STACKORIGIN+10
  5829 46B4 A5 8F			lda :FPMAN1
  5830 46B6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  5831 46B8 A5 90			lda :FPMAN2
  5832 46BA 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  5833 46BC A5 91			lda :FPMAN3
  5834 46BE 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  5835 46C0 AD 17 A1			lda SPEED
  5836 46C3 85 8E			sta :FPMAN0
  5837 46C5 A0 00			ldy #$00
  5838 46C7 AD 18 A1			lda SPEED+1
  5839 46CA 10 01			spl
  5840 46CC 88				dey
  5841 46CD 85 8F			sta :FPMAN1
  5842 46CF 84 90			sty :FPMAN2
  5843 46D1 84 91			sty :FPMAN3
  5844 46D3 20 A4 27			jsr @I2F
  5845 46D6 A5 8E			lda :FPMAN0
  5846 46D8 85 86			sta :FP1MAN0
  5847 46DA A5 8F			lda :FPMAN1
  5848 46DC 85 87			sta :FP1MAN1
  5849 46DE A5 90			lda :FPMAN2
  5850 46E0 85 88			sta :FP1MAN2
  5851 46E2 A5 91			lda :FPMAN3
  5852 46E4 85 89			sta :FP1MAN3
  5853 46E6 A5 A0			lda :STACKORIGIN+10
  5854 46E8 85 8A			sta :FP2MAN0
  5855 46EA A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  5856 46EC 85 8B			sta :FP2MAN1
  5857 46EE A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  5858 46F0 85 8C			sta :FP2MAN2
  5859 46F2 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  5860 46F4 85 8D			sta :FP2MAN3
  5861 46F6 20 6B 26			jsr @FDIV
  5862 46F9 A5 8E			lda :FPMAN0
  5863 46FB 8D 1D A1			sta VM
  5864 46FE A5 8F			lda :FPMAN1
  5865 4700 8D 1E A1			sta VM+1
  5866 4703 A5 90			lda :FPMAN2
  5867 4705 8D 1F A1			sta VM+2
  5868 4708 A5 91			lda :FPMAN3
  5869 470A 8D 20 A1			sta VM+3
  5870
  5871 				; optimize OK (service.pas), line = 1093
  5872
  5873 470D AD 19 A1			lda SX
  5874 4710 85 8E			sta :FPMAN0
  5875 4712 A0 00			ldy #$00
  5876 4714 AD 1A A1			lda SX+1
  5877 4717 10 01			spl
  5878 4719 88				dey
  5879 471A 85 8F			sta :FPMAN1
  5880 471C 84 90			sty :FPMAN2
  5881 471E 84 91			sty :FPMAN3
  5882 4720 20 A4 27			jsr @I2F
  5883 4723 A5 8E			lda :FPMAN0
  5884 4725 85 86			sta :FP1MAN0
  5885 4727 A5 8F			lda :FPMAN1
  5886 4729 85 87			sta :FP1MAN1
  5887 472B A5 90			lda :FPMAN2
  5888 472D 85 88			sta :FP1MAN2
  5889 472F A5 91			lda :FPMAN3
  5890 4731 85 89			sta :FP1MAN3
  5891 4733 AD 1D A1			lda VM
  5892 4736 85 8A			sta :FP2MAN0
  5893 4738 AD 1E A1			lda VM+1
  5894 473B 85 8B			sta :FP2MAN1
  5895 473D AD 1F A1			lda VM+2
  5896 4740 85 8C			sta :FP2MAN2
  5897 4742 AD 20 A1			lda VM+3
  5898 4745 85 8D			sta :FP2MAN3
  5899 4747 20 CA 25			jsr @FMUL
  5900 474A 20 33 27			jsr @F2I
  5901 474D AC 13 A1 84 84 AC + 	mwy BALL :bp2
  5902 4757 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  5903 4759 A5 8E			lda :FPMAN0
  5904 475B 91 84			sta (:bp2),y
  5905 475D C8				iny
  5906 475E A5 8F			lda :FPMAN1
  5907 4760 91 84			sta (:bp2),y
  5908
  5909 				; optimize OK (service.pas), line = 1094
  5910
  5911 4762 AD 1B A1			lda SY
  5912 4765 85 8E			sta :FPMAN0
  5913 4767 A0 00			ldy #$00
  5914 4769 AD 1C A1			lda SY+1
  5915 476C 10 01			spl
  5916 476E 88				dey
  5917 476F 85 8F			sta :FPMAN1
  5918 4771 84 90			sty :FPMAN2
  5919 4773 84 91			sty :FPMAN3
  5920 4775 20 A4 27			jsr @I2F
  5921 4778 A5 8E			lda :FPMAN0
  5922 477A 85 86			sta :FP1MAN0
  5923 477C A5 8F			lda :FPMAN1
  5924 477E 85 87			sta :FP1MAN1
  5925 4780 A5 90			lda :FPMAN2
  5926 4782 85 88			sta :FP1MAN2
  5927 4784 A5 91			lda :FPMAN3
  5928 4786 85 89			sta :FP1MAN3
  5929 4788 AD 1D A1			lda VM
  5930 478B 85 8A			sta :FP2MAN0
  5931 478D AD 1E A1			lda VM+1
  5932 4790 85 8B			sta :FP2MAN1
  5933 4792 AD 1F A1			lda VM+2
  5934 4795 85 8C			sta :FP2MAN2
  5935 4797 AD 20 A1			lda VM+3
  5936 479A 85 8D			sta :FP2MAN3
  5937 479C 20 CA 25			jsr @FMUL
  5938 479F 20 33 27			jsr @F2I
  5939 47A2 AC 13 A1 84 84 AC + 	mwy BALL :bp2
  5940 47AC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  5941 47AE A5 8E			lda :FPMAN0
  5942 47B0 91 84			sta (:bp2),y
  5943 47B2 C8				iny
  5944 47B3 A5 8F			lda :FPMAN1
  5945 47B5 91 84			sta (:bp2),y
  5946
  5947 				; ------------------------------------------------------------
  5948
  5949 = A113			BALL	= DATAORIGIN+$0288
  5950 = 9E8B			BALL.X	= DATAORIGIN+$0000
  5951 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  5952 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  5953 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  5954 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  5955 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  5956 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  5957 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  5958 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  5959 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  5960 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  5961 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  5962 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  5963 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  5964 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  5965 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  5966 = A117			SPEED	= DATAORIGIN+$028C
  5967 = A119			SX	= DATAORIGIN+$028E
  5968 = A11B			SY	= DATAORIGIN+$0290
  5969 = A11D			VM	= DATAORIGIN+$0292
  5970 = A121			I	= DATAORIGIN+$0296
  5971 = A125			A	= DATAORIGIN+$029A
  5972 = A127			B	= DATAORIGIN+$029C
  5973
  5974 = A113			@VarData	= BALL
  5975 = 0014			@VarDataSize	= 20
  5976
  5977 47B7			@exit
  5978 					.ifdef @new
  5979 					lda <@VarData
  5980 					sta :ztmp
  5981 					lda >@VarData
  5982 					ldy #@VarDataSize-1
  5983 					jmp @FreeMem
  5984 					els
  5985 47B7 60				rts						; ret
  5986 					eif
  5987 				.endl
  5988
  5989 47B8			.local	SET_BALL_DIRECTION				; PROCEDURE
  5990
  5991 47B8 4C 9D 49			jmp @exit
  5992
  5993 				; optimize OK (service.pas), line = 1104
  5994
  5995 47BB AD 2D A1			lda ANGLE
  5996 47BE 85 8E			sta :FPMAN0
  5997 47C0 A0 00			ldy #$00
  5998 47C2 AD 2E A1			lda ANGLE+1
  5999 47C5 10 01			spl
  6000 47C7 88				dey
  6001 47C8 85 8F			sta :FPMAN1
  6002 47CA 84 90			sty :FPMAN2
  6003 47CC 84 91			sty :FPMAN3
  6004 47CE 20 A4 27			jsr @I2F
  6005 47D1 A5 8E			lda :FPMAN0
  6006 47D3 85 86			sta :FP1MAN0
  6007 47D5 A5 8F			lda :FPMAN1
  6008 47D7 85 87			sta :FP1MAN1
  6009 47D9 A5 90			lda :FPMAN2
  6010 47DB 85 88			sta :FP1MAN2
  6011 47DD A5 91			lda :FPMAN3
  6012 47DF 85 89			sta :FP1MAN3
  6013 47E1 A9 35			lda #$35
  6014 47E3 85 8A			sta :FP2MAN0
  6015 47E5 A9 FA			lda #$FA
  6016 47E7 85 8B			sta :FP2MAN1
  6017 47E9 A9 8E			lda #$8E
  6018 47EB 85 8C			sta :FP2MAN2
  6019 47ED A9 3C			lda #$3C
  6020 47EF 85 8D			sta :FP2MAN3
  6021 47F1 20 CA 25			jsr @FMUL
  6022 47F4 A5 8E			lda :FPMAN0
  6023 47F6 8D 2F A1			sta W
  6024 47F9 A5 8F			lda :FPMAN1
  6025 47FB 8D 30 A1			sta W+1
  6026 47FE A5 90			lda :FPMAN2
  6027 4800 8D 31 A1			sta W+2
  6028 4803 A5 91			lda :FPMAN3
  6029 4805 8D 32 A1			sta W+3
  6030
  6031 				; optimize FAIL (1, service.pas), line = 1106
  6032
  6033 4808 E8				inx
  6034 4809 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6035 480D A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6036 4811 AD 2F A1			lda W
  6037 4814 8D B9 9E			sta SYSTEM.COS.@01018F000.X
  6038 4817 AD 30 A1			lda W+1
  6039 481A 8D BA 9E			sta SYSTEM.COS.@01018F000.X+1
  6040 481D AD 31 A1			lda W+2
  6041 4820 8D BB 9E			sta SYSTEM.COS.@01018F000.X+2
  6042 4823 AD 32 A1			lda W+3
  6043 4826 8D BC 9E			sta SYSTEM.COS.@01018F000.X+3
  6044 4829 20 C1 32			jsr SYSTEM.COS.@01018F000
  6045 482C E8				inx
  6046 482D AD BD 9E 95 96		mva SYSTEM.COS.@01018F000.RESULT :STACKORIGIN,x
  6047 4832 AD BE 9E 95 A6		mva SYSTEM.COS.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6048 4837 AD BF 9E 95 B6		mva SYSTEM.COS.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6049 483C AD C0 9E 95 C6		mva SYSTEM.COS.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6050 4841 A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6051 4845 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6052 4847 B5 95			lda :STACKORIGIN-1,x
  6053 4849 85 8E			sta :FPMAN0
  6054 484B B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6055 484D 85 8F			sta :FPMAN1
  6056 484F B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6057 4851 85 90			sta :FPMAN2
  6058 4853 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6059 4855 85 91			sta :FPMAN3
  6060 4857 20 A4 27			jsr @I2F
  6061 485A A5 8E			lda :FPMAN0
  6062 485C 95 95			sta :STACKORIGIN-1,x
  6063 485E A5 8F			lda :FPMAN1
  6064 4860 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6065 4862 A5 90			lda :FPMAN2
  6066 4864 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6067 4866 A5 91			lda :FPMAN3
  6068 4868 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6069 486A B5 96			lda :STACKORIGIN,x
  6070 486C 85 8A			sta :FP2MAN0
  6071 486E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6072 4870 85 8B			sta :FP2MAN1
  6073 4872 B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6074 4874 85 8C			sta :FP2MAN2
  6075 4876 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6076 4878 85 8D			sta :FP2MAN3
  6077 487A B5 95			lda :STACKORIGIN-1,x
  6078 487C 85 86			sta :FP1MAN0
  6079 487E B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6080 4880 85 87			sta :FP1MAN1
  6081 4882 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6082 4884 85 88			sta :FP1MAN2
  6083 4886 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6084 4888 85 89			sta :FP1MAN3
  6085 488A 20 CA 25			jsr @FMUL
  6086 488D CA				dex
  6087 488E A5 8E			lda :FPMAN0
  6088 4890 85 8E			sta :FPMAN0
  6089 4892 A5 8F			lda :FPMAN1
  6090 4894 85 8F			sta :FPMAN1
  6091 4896 A5 90			lda :FPMAN2
  6092 4898 85 90			sta :FPMAN2
  6093 489A A5 91			lda :FPMAN3
  6094 489C 85 91			sta :FPMAN3
  6095 489E 20 33 27			jsr @F2I
  6096 48A1 A5 8E			lda :FPMAN0
  6097 48A3 95 96			sta :STACKORIGIN,x
  6098 48A5 A5 8F			lda :FPMAN1
  6099 48A7 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6100 48A9 A5 90			lda :FPMAN2
  6101 48AB 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6102 48AD A5 91			lda :FPMAN3
  6103 48AF 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6104 48B1 AC 29 A1 84 84 AC + 	mwy BALL :bp2
  6105 48BB A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6106 48BD B5 96			lda :STACKORIGIN,x
  6107 48BF 91 84			sta (:bp2),y
  6108 48C1 C8				iny
  6109 48C2 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6110 48C4 91 84			sta (:bp2),y
  6111
  6112 				; optimize FAIL (1, service.pas), line = 1107
  6113
  6114 48C6 A9 00 95 96			mva #$00 :STACKORIGIN,x
  6115 48CA A9 01 95 A6			mva #$01 :STACKORIGIN+STACKWIDTH,x
  6116 48CE AD 2F A1			lda W
  6117 48D1 8D B1 9E			sta SYSTEM.SIN.@01018F000.X
  6118 48D4 AD 30 A1			lda W+1
  6119 48D7 8D B2 9E			sta SYSTEM.SIN.@01018F000.X+1
  6120 48DA AD 31 A1			lda W+2
  6121 48DD 8D B3 9E			sta SYSTEM.SIN.@01018F000.X+2
  6122 48E0 AD 32 A1			lda W+3
  6123 48E3 8D B4 9E			sta SYSTEM.SIN.@01018F000.X+3
  6124 48E6 20 88 32			jsr SYSTEM.SIN.@01018F000
  6125 48E9 E8				inx
  6126 48EA AD B5 9E 95 96		mva SYSTEM.SIN.@01018F000.RESULT :STACKORIGIN,x
  6127 48EF AD B6 9E 95 A6		mva SYSTEM.SIN.@01018F000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  6128 48F4 AD B7 9E 95 B6		mva SYSTEM.SIN.@01018F000.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  6129 48F9 AD B8 9E 95 C6		mva SYSTEM.SIN.@01018F000.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  6130 48FE A9 00 95 B5			mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
  6131 4902 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6132 4904 B5 95			lda :STACKORIGIN-1,x
  6133 4906 85 8E			sta :FPMAN0
  6134 4908 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6135 490A 85 8F			sta :FPMAN1
  6136 490C B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6137 490E 85 90			sta :FPMAN2
  6138 4910 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6139 4912 85 91			sta :FPMAN3
  6140 4914 20 A4 27			jsr @I2F
  6141 4917 A5 8E			lda :FPMAN0
  6142 4919 95 95			sta :STACKORIGIN-1,x
  6143 491B A5 8F			lda :FPMAN1
  6144 491D 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6145 491F A5 90			lda :FPMAN2
  6146 4921 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6147 4923 A5 91			lda :FPMAN3
  6148 4925 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6149 4927 B5 96			lda :STACKORIGIN,x
  6150 4929 85 8A			sta :FP2MAN0
  6151 492B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6152 492D 85 8B			sta :FP2MAN1
  6153 492F B5 B6			lda :STACKORIGIN+STACKWIDTH*2,x
  6154 4931 85 8C			sta :FP2MAN2
  6155 4933 B5 C6			lda :STACKORIGIN+STACKWIDTH*3,x
  6156 4935 85 8D			sta :FP2MAN3
  6157 4937 B5 95			lda :STACKORIGIN-1,x
  6158 4939 85 86			sta :FP1MAN0
  6159 493B B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6160 493D 85 87			sta :FP1MAN1
  6161 493F B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6162 4941 85 88			sta :FP1MAN2
  6163 4943 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6164 4945 85 89			sta :FP1MAN3
  6165 4947 20 CA 25			jsr @FMUL
  6166 494A CA				dex
  6167 494B A5 8E			lda :FPMAN0
  6168 494D 85 8E			sta :FPMAN0
  6169 494F A5 8F			lda :FPMAN1
  6170 4951 85 8F			sta :FPMAN1
  6171 4953 A5 90			lda :FPMAN2
  6172 4955 85 90			sta :FPMAN2
  6173 4957 A5 91			lda :FPMAN3
  6174 4959 85 91			sta :FPMAN3
  6175 495B 20 33 27			jsr @F2I
  6176 495E A5 8E			lda :FPMAN0
  6177 4960 95 96			sta :STACKORIGIN,x
  6178 4962 A5 8F			lda :FPMAN1
  6179 4964 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6180 4966 A5 90			lda :FPMAN2
  6181 4968 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6182 496A A5 91			lda :FPMAN3
  6183 496C 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6184 496E A9 00			lda #$00
  6185 4970 38 F5 96			sub :STACKORIGIN,x
  6186 4973 95 96			sta :STACKORIGIN,x
  6187 4975 A9 00			lda #$00
  6188 4977 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6189 4979 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6190 497B A9 00			lda #$00
  6191 497D F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6192 497F 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6193 4981 A9 00			lda #$00
  6194 4983 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6195 4985 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6196 4987 AC 29 A1 84 84 AC + 	mwy BALL :bp2
  6197 4991 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6198 4993 B5 96			lda :STACKORIGIN,x
  6199 4995 91 84			sta (:bp2),y
  6200 4997 C8				iny
  6201 4998 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6202 499A 91 84			sta (:bp2),y
  6203 499C CA				dex
  6204
  6205 				; ------------------------------------------------------------
  6206
  6207 = A129			BALL	= DATAORIGIN+$029E
  6208 = 9E8B			BALL.X	= DATAORIGIN+$0000
  6209 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  6210 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  6211 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  6212 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  6213 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  6214 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  6215 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  6216 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  6217 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  6218 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  6219 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  6220 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  6221 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  6222 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  6223 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  6224 = A12D			ANGLE	= DATAORIGIN+$02A2
  6225 = A12F			W	= DATAORIGIN+$02A4
  6226
  6227 = A129			@VarData	= BALL
  6228 = 0008			@VarDataSize	= 8
  6229
  6230 499D			@exit
  6231 					.ifdef @new
  6232 					lda <@VarData
  6233 					sta :ztmp
  6234 					lda >@VarData
  6235 					ldy #@VarDataSize-1
  6236 					jmp @FreeMem
  6237 					els
  6238 499D 60				rts						; ret
  6239 					eif
  6240 				.endl
  6241
  6242 499E			.local	GET_BALL_DIRECTION				; FUNCTION
  6243
  6244 				; optimize OK (service.pas), line = 1115
  6245
  6246 499E AC 33 A1 84 84 AC + 	mwy BALL :bp2
  6247 49A8 A0 11			ldy #BALL.SPEEDX-DATAORIGIN+$01
  6248 49AA B1 84			lda (:bp2),y
  6249 49AC 88				dey
  6250 49AD 11 84			ora (:bp2),y
  6251 49AF D0 75			jne l_0C70
  6252 49B1 E8				inx
  6253 49B2 A9 5A 95 96			mva #$5A :STACKORIGIN,x
  6254 49B6 E8				inx
  6255 49B7 AC 33 A1 84 84 AC + 	mwy BALL :bp2
  6256 49C1 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6257 49C3 B1 84 95 96			mva (:bp2),y :STACKORIGIN,x
  6258 49C7 C8				iny
  6259 49C8 B1 84 95 A6			mva (:bp2),y :STACKORIGIN+STACKWIDTH,x
  6260 49CC A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6261 49CE B1 84			lda (:bp2),y
  6262 49D0 85 8A			sta SYSTEM.ABS.@010184000.X
  6263 49D2 C8				iny
  6264 49D3 B1 84			lda (:bp2),y
  6265 49D5 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6266 49D7 20 DF 2A			jsr SYSTEM.ABS.@010184000
  6267 49DA E8				inx
  6268 49DB A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6269 49DD 85 8E			sta @SMALLINT.DIV.B
  6270 49DF A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6271 49E1 85 8F			sta @SMALLINT.DIV.B+1
  6272 49E3 B5 95			lda :STACKORIGIN-1,x
  6273 49E5 85 86			sta @SMALLINT.DIV.A
  6274 49E7 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6275 49E9 85 87			sta @SMALLINT.DIV.A+1
  6276 49EB 20 33 22			jsr @SMALLINT.DIV
  6277 49EE A5 86			lda :eax
  6278 49F0 95 95			sta :STACKORIGIN-1,x
  6279 49F2 A5 87			lda :eax+1
  6280 49F4 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6281 49F6 CA				dex
  6282 49F7 A9 00 95 A5			mva #$00 :STACKORIGIN-1+STACKWIDTH,x
  6283 49FB 20 0B 22			jsr mulSMALLINT
  6284 49FE CA				dex
  6285 49FF A9 00			lda #$00
  6286 4A01 38 F5 96			sub :STACKORIGIN,x
  6287 4A04 95 96			sta :STACKORIGIN,x
  6288 4A06 A9 00			lda #$00
  6289 4A08 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
  6290 4A0A 95 A6			sta :STACKORIGIN+STACKWIDTH,x
  6291 4A0C A9 00			lda #$00
  6292 4A0E F5 B6			sbc :STACKORIGIN+STACKWIDTH*2,x
  6293 4A10 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
  6294 4A12 A9 00			lda #$00
  6295 4A14 F5 C6			sbc :STACKORIGIN+STACKWIDTH*3,x
  6296 4A16 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
  6297 4A18 B5 96			lda :STACKORIGIN,x
  6298 4A1A 8D 39 A1			sta W
  6299 4A1D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6300 4A1F 8D 3A A1			sta W+1
  6301 4A22 CA				dex
  6302 4A23 4C AF 4B			jmp l_0C8C
  6303 4A26			l_0C70
  6304
  6305 				; optimize OK (service.pas), line = 1121
  6306
  6307 4A26 AC 33 A1 84 84 AC + 	mwy BALL :bp2
  6308 4A30 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6309 4A32 B1 84			lda (:bp2),y
  6310 4A34 85 9F			sta :STACKORIGIN+9
  6311 4A36 C8				iny
  6312 4A37 B1 84			lda (:bp2),y
  6313 4A39 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6314 4A3B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6315 4A3D B1 84			lda (:bp2),y
  6316 4A3F 85 8E			sta :FPMAN0
  6317 4A41 C8				iny
  6318 4A42 B1 84			lda (:bp2),y
  6319 4A44 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6320 4A46 A0 00			ldy #$00
  6321 4A48 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6322 4A4A 10 01			spl
  6323 4A4C 88				dey
  6324 4A4D 85 8F			sta :FPMAN1
  6325 4A4F 84 90			sty :FPMAN2
  6326 4A51 84 91			sty :FPMAN3
  6327 4A53 20 A4 27			jsr @I2F
  6328 4A56 A5 8E			lda :FPMAN0
  6329 4A58 85 A0			sta :STACKORIGIN+10
  6330 4A5A A5 8F			lda :FPMAN1
  6331 4A5C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  6332 4A5E A5 90			lda :FPMAN2
  6333 4A60 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  6334 4A62 A5 91			lda :FPMAN3
  6335 4A64 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  6336 4A66 A0 00			ldy #$00
  6337 4A68 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6338 4A6A 10 01			spl
  6339 4A6C 88				dey
  6340 4A6D 85 8F			sta :FPMAN1
  6341 4A6F 84 90			sty :FPMAN2
  6342 4A71 84 91			sty :FPMAN3
  6343 4A73 A5 9F			lda :STACKORIGIN+9
  6344 4A75 85 8E			sta :FPMAN0
  6345 4A77 20 A4 27			jsr @I2F
  6346 4A7A A5 8E			lda :FPMAN0
  6347 4A7C 85 86			sta :FP1MAN0
  6348 4A7E A5 8F			lda :FPMAN1
  6349 4A80 85 87			sta :FP1MAN1
  6350 4A82 A5 90			lda :FPMAN2
  6351 4A84 85 88			sta :FP1MAN2
  6352 4A86 A5 91			lda :FPMAN3
  6353 4A88 85 89			sta :FP1MAN3
  6354 4A8A A5 A0			lda :STACKORIGIN+10
  6355 4A8C 85 8A			sta :FP2MAN0
  6356 4A8E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  6357 4A90 85 8B			sta :FP2MAN1
  6358 4A92 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  6359 4A94 85 8C			sta :FP2MAN2
  6360 4A96 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  6361 4A98 85 8D			sta :FP2MAN3
  6362 4A9A 20 6B 26			jsr @FDIV
  6363 4A9D A5 8E			lda :FPMAN0
  6364 4A9F 8D 8F A0			sta F_HLP
  6365 4AA2 A5 8F			lda :FPMAN1
  6366 4AA4 8D 90 A0			sta F_HLP+1
  6367 4AA7 A5 90			lda :FPMAN2
  6368 4AA9 8D 91 A0			sta F_HLP+2
  6369 4AAC A5 91			lda :FPMAN3
  6370 4AAE 49 80			eor #$80
  6371 4AB0 8D 92 A0			sta F_HLP+3
  6372
  6373 				; optimize OK (service.pas), line = 1123
  6374
  6375 4AB3 AD 8F A0			lda F_HLP
  6376 4AB6 8D 96 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE
  6377 4AB9 AD 90 A0			lda F_HLP+1
  6378 4ABC 8D 97 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+1
  6379 4ABF AD 91 A0			lda F_HLP+2
  6380 4AC2 8D 98 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+2
  6381 4AC5 AD 92 A0			lda F_HLP+3
  6382 4AC8 8D 99 9E			sta SYSTEM.ARCTAN.@01018F000.VALUE+3
  6383 4ACB 20 0D 2B			jsr SYSTEM.ARCTAN.@01018F000
  6384 4ACE E8				inx
  6385 4ACF E8				inx
  6386 4AD0 A9 00			lda #$00
  6387 4AD2 85 8A			sta :FP2MAN0
  6388 4AD4 A9 00			lda #$00
  6389 4AD6 85 8B			sta :FP2MAN1
  6390 4AD8 A9 34			lda #$34
  6391 4ADA 85 8C			sta :FP2MAN2
  6392 4ADC A9 43			lda #$43
  6393 4ADE 85 8D			sta :FP2MAN3
  6394 4AE0 AD 9A 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT
  6395 4AE3 85 86			sta :FP1MAN0
  6396 4AE5 AD 9B 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+1
  6397 4AE8 85 87			sta :FP1MAN1
  6398 4AEA AD 9C 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+2
  6399 4AED 85 88			sta :FP1MAN2
  6400 4AEF AD 9D 9E			lda SYSTEM.ARCTAN.@01018F000.RESULT+3
  6401 4AF2 85 89			sta :FP1MAN3
  6402 4AF4 20 CA 25			jsr @FMUL
  6403 4AF7 A5 8E			lda :FPMAN0
  6404 4AF9 95 95			sta :STACKORIGIN-1,x
  6405 4AFB A5 8F			lda :FPMAN1
  6406 4AFD 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
  6407 4AFF A5 90			lda :FPMAN2
  6408 4B01 95 B5			sta :STACKORIGIN-1+STACKWIDTH*2,x
  6409 4B03 A5 91			lda :FPMAN3
  6410 4B05 95 C5			sta :STACKORIGIN-1+STACKWIDTH*3,x
  6411 4B07 A9 DB			lda #$DB
  6412 4B09 85 8A			sta :FP2MAN0
  6413 4B0B A9 0F			lda #$0F
  6414 4B0D 85 8B			sta :FP2MAN1
  6415 4B0F A9 49			lda #$49
  6416 4B11 85 8C			sta :FP2MAN2
  6417 4B13 A9 40			lda #$40
  6418 4B15 85 8D			sta :FP2MAN3
  6419 4B17 B5 95			lda :STACKORIGIN-1,x
  6420 4B19 85 86			sta :FP1MAN0
  6421 4B1B B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
  6422 4B1D 85 87			sta :FP1MAN1
  6423 4B1F B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
  6424 4B21 85 88			sta :FP1MAN2
  6425 4B23 B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
  6426 4B25 85 89			sta :FP1MAN3
  6427 4B27 20 6B 26			jsr @FDIV
  6428 4B2A CA				dex
  6429 4B2B A5 8E			lda :FPMAN0
  6430 4B2D 8D 8F A0			sta F_HLP
  6431 4B30 A5 8F			lda :FPMAN1
  6432 4B32 8D 90 A0			sta F_HLP+1
  6433 4B35 A5 90			lda :FPMAN2
  6434 4B37 8D 91 A0			sta F_HLP+2
  6435 4B3A A5 91			lda :FPMAN3
  6436 4B3C 8D 92 A0			sta F_HLP+3
  6437 4B3F CA				dex
  6438
  6439 				; optimize OK (service.pas), line = 1125
  6440
  6441 4B40 AD 8F A0			lda F_HLP
  6442 4B43 85 8E			sta :FPMAN0
  6443 4B45 AD 90 A0			lda F_HLP+1
  6444 4B48 85 8F			sta :FPMAN1
  6445 4B4A AD 91 A0			lda F_HLP+2
  6446 4B4D 85 90			sta :FPMAN2
  6447 4B4F AD 92 A0			lda F_HLP+3
  6448 4B52 85 91			sta :FPMAN3
  6449 4B54 20 33 27			jsr @F2I
  6450 4B57 A5 8E			lda :FPMAN0
  6451 4B59 8D 39 A1			sta W
  6452 4B5C A5 8F			lda :FPMAN1
  6453 4B5E 8D 3A A1			sta W+1
  6454
  6455 				; optimize OK (service.pas), line = 1127
  6456
  6457 4B61 AC 33 A1 84 84 AC + 	mwy BALL :bp2
  6458 4B6B A0 00			ldy #$00
  6459 4B6D B1 84			lda (:bp2),y
  6460 4B6F 10 0E			jpl l_0CBB
  6461 4B71 AD 39 A1			lda W
  6462 4B74 18 69 B4			add #$B4
  6463 4B77 8D 39 A1			sta W
  6464 4B7A 90 03			scc
  6465 4B7C EE 3A A1			inc W+1
  6466 4B7F			l_0CBB
  6467
  6468 				; optimize OK (service.pas), line = 1129
  6469
  6470 4B7F AD 39 A1			lda W
  6471 4B82 18 69 68			add #$68
  6472 4B85 8D 39 A1			sta W
  6473 4B88 AD 3A A1			lda W+1
  6474 4B8B 69 01			adc #$01
  6475 4B8D 8D 3A A1			sta W+1
  6476
  6477 				; optimize OK (service.pas), line = 1130
  6478
  6479 4B90 A9 68			lda #$68
  6480 4B92 85 8E			sta @SMALLINT.MOD.B
  6481 4B94 A9 01			lda #$01
  6482 4B96 85 8F			sta @SMALLINT.MOD.B+1
  6483 4B98 AD 39 A1			lda W
  6484 4B9B 85 86			sta @SMALLINT.MOD.A
  6485 4B9D AD 3A A1			lda W+1
  6486 4BA0 85 87			sta @SMALLINT.MOD.A+1
  6487 4BA2 20 50 22			jsr @SMALLINT.MOD
  6488 4BA5 A5 92			lda @SMALLINT.MOD.RESULT
  6489 4BA7 8D 39 A1			sta W
  6490 4BAA A5 93			lda @SMALLINT.MOD.RESULT+1
  6491 4BAC 8D 3A A1			sta W+1
  6492 4BAF			l_0C8C
  6493
  6494 				; optimize OK (service.pas), line = 1133
  6495
  6496 4BAF AD 39 A1			lda W
  6497 4BB2 8D 37 A1			sta RESULT
  6498 4BB5 AD 3A A1			lda W+1
  6499 4BB8 8D 38 A1			sta RESULT+1
  6500 4BBB			@exit
  6501
  6502 				; ------------------------------------------------------------
  6503
  6504 = A133			BALL	= DATAORIGIN+$02A8
  6505 = 9E8B			BALL.X	= DATAORIGIN+$0000
  6506 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  6507 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  6508 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  6509 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  6510 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  6511 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  6512 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  6513 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  6514 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  6515 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  6516 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  6517 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  6518 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  6519 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  6520 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  6521 = A137			RESULT	= DATAORIGIN+$02AC
  6522 = A139			W	= DATAORIGIN+$02AE
  6523
  6524 = A133			@VarData	= BALL
  6525 = 0004			@VarDataSize	= 4
  6526
  6527 4BBB 60				rts						; ret
  6528 				.endl
  6529
  6530 4BBC			.local	START_BALL					; PROCEDURE
  6531
  6532 				; optimize OK (service.pas), line = 1142
  6533
  6534 4BBC AC 3B A1 84 84 AC + 	mwy BALL :bp2
  6535 4BC6 A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  6536 4BC8 AD 0E A0			lda VAUS.X
  6537 4BCB 18 71 84			add (:bp2),y
  6538 4BCE 85 9F			sta :STACKORIGIN+9
  6539 4BD0 C8				iny
  6540 4BD1 A9 00			lda #$00
  6541 4BD3 71 84			adc (:bp2),y
  6542 4BD5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6543 4BD7 A0 00			ldy #BALL.X-DATAORIGIN
  6544 4BD9 A5 9F			lda :STACKORIGIN+9
  6545 4BDB 91 84			sta (:bp2),y
  6546 4BDD C8				iny
  6547 4BDE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6548 4BE0 91 84			sta (:bp2),y
  6549
  6550 				; optimize OK (service.pas), line = 1148
  6551
  6552 4BE2 A0 02			ldy #BALL.Y-DATAORIGIN
  6553 4BE4 AD 0F A0			lda VAUS.Y
  6554 4BE7 38 E9 03			sub #$03
  6555 4BEA 91 84			sta (:bp2),y
  6556 4BEC C8				iny
  6557 4BED A9 00			lda #$00
  6558 4BEF E9 00			sbc #$00
  6559 4BF1 91 84			sta (:bp2),y
  6560
  6561 				; optimize OK (service.pas), line = 1153
  6562
  6563 4BF3 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6564 4BF5 A9 00			lda #$00
  6565 4BF7 91 84			sta (:bp2),y
  6566 4BF9 C8				iny
  6567 4BFA 91 84			sta (:bp2),y
  6568
  6569 				; optimize OK (service.pas), line = 1154
  6570
  6571 4BFC A0 06			ldy #BALL.FINEY-DATAORIGIN
  6572 4BFE 91 84			sta (:bp2),y
  6573 4C00 C8				iny
  6574 4C01 91 84			sta (:bp2),y
  6575
  6576 				; optimize OK (service.pas), line = 1156
  6577
  6578 4C03 A0 17			ldy #BALL.INPLAY-DATAORIGIN
  6579 4C05 A9 01			lda #$01
  6580 4C07 91 84			sta (:bp2),y
  6581
  6582 				; optimize OK (service.pas), line = 1158
  6583
  6584 4C09 A0 14			ldy #BALL.SBD-DATAORIGIN
  6585 4C0B A9 00			lda #$00
  6586 4C0D 91 84			sta (:bp2),y
  6587 4C0F C8				iny
  6588 4C10 91 84			sta (:bp2),y
  6589
  6590 				; optimize OK (service.pas), line = 1159
  6591
  6592 4C12 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
  6593 4C14 91 84			sta (:bp2),y
  6594
  6595 				; ------------------------------------------------------------
  6596
  6597 = A13B			BALL	= DATAORIGIN+$02B0
  6598 = 9E8B			BALL.X	= DATAORIGIN+$0000
  6599 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  6600 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  6601 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  6602 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  6603 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  6604 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  6605 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  6606 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  6607 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  6608 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  6609 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  6610 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  6611 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  6612 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  6613 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  6614
  6615 = A13B			@VarData	= BALL
  6616 = 0002			@VarDataSize	= 2
  6617
  6618 4C16			@exit
  6619 					.ifdef @new
  6620 					lda <@VarData
  6621 					sta :ztmp
  6622 					lda >@VarData
  6623 					ldy #@VarDataSize-1
  6624 					jmp @FreeMem
  6625 					els
  6626 4C16 60				rts						; ret
  6627 					eif
  6628 				.endl
  6629
  6630 4C17			.local	BALL_SPEED					; FUNCTION
  6631
  6632 				; ------------------------------------------------------------
  6633
  6634 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  6635 				; as Pointer
  6636 4C17 B5 96			lda :STACKORIGIN,x
  6637 4C19 85 84			sta :bp2
  6638 4C1B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  6639 4C1D 85 85			sta :bp2+1
  6640 4C1F A0 1B			ldy #$1B
  6641 4C21 B1 84 99 3F A1 88 + 	mva:rpl (:bp2),y adr.BALL,y-
  6642 4C29 CA				dex
  6643 4C2A			@main
  6644
  6645 				; optimize OK (service.pas), line = 1170
  6646
  6647 4C2A AD 4F A1			lda BALL.SPEEDX
  6648 4C2D 85 8A			sta SYSTEM.ABS.@010184000.X
  6649 4C2F AD 50 A1			lda BALL.SPEEDX+1
  6650 4C32 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6651 4C34 20 DF 2A			jsr SYSTEM.ABS.@010184000
  6652 4C37 A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6653 4C39 8D 61 A1			sta A
  6654 4C3C A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6655 4C3E 8D 62 A1			sta A+1
  6656
  6657 				; optimize OK (service.pas), line = 1171
  6658
  6659 4C41 AD 51 A1			lda BALL.SPEEDY
  6660 4C44 85 8A			sta SYSTEM.ABS.@010184000.X
  6661 4C46 AD 52 A1			lda BALL.SPEEDY+1
  6662 4C49 85 8B			sta SYSTEM.ABS.@010184000.X+1
  6663 4C4B 20 DF 2A			jsr SYSTEM.ABS.@010184000
  6664 4C4E A5 92			lda SYSTEM.ABS.@010184000.RESULT
  6665 4C50 8D 63 A1			sta B
  6666 4C53 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
  6667 4C55 8D 64 A1			sta B+1
  6668
  6669 				; optimize OK (service.pas), line = 1173
  6670
  6671 4C58 AD 61 A1			lda A
  6672 4C5B 85 8E			sta :ecx
  6673 4C5D 85 86			sta :eax
  6674 4C5F AD 62 A1			lda A+1
  6675 4C62 85 8F			sta :ecx+1
  6676 4C64 85 87			sta :eax+1
  6677 					.ifdef fmulinit
  6678 					fmulu_16
  6679 					els
  6680 4C66 20 0B 23			imulCX
  6681 					eif
  6682 4C69 A5 86			lda :eax
  6683 4C6B 85 9F			sta :STACKORIGIN+9
  6684 4C6D A5 87			lda :eax+1
  6685 4C6F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6686 4C71 A5 88			lda :eax+2
  6687 4C73 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  6688 4C75 A5 89			lda :eax+3
  6689 4C77 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  6690 4C79 AD 63 A1			lda B
  6691 4C7C 85 8E			sta :ecx
  6692 4C7E 85 86			sta :eax
  6693 4C80 AD 64 A1			lda B+1
  6694 4C83 85 8F			sta :ecx+1
  6695 4C85 85 87			sta :eax+1
  6696 					.ifdef fmulinit
  6697 					fmulu_16
  6698 					els
  6699 4C87 20 0B 23			imulCX
  6700 					eif
  6701 4C8A A5 9F			lda :STACKORIGIN+9
  6702 4C8C 18 65 86			add :eax
  6703 4C8F 8D 5D A1			sta I
  6704 4C92 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6705 4C94 65 87			adc :eax+1
  6706 4C96 8D 5E A1			sta I+1
  6707 4C99 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  6708 4C9B 65 88			adc :eax+2
  6709 4C9D 8D 5F A1			sta I+2
  6710 4CA0 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  6711 4CA2 65 89			adc :eax+3
  6712 4CA4 8D 60 A1			sta I+3
  6713
  6714 				; optimize OK (service.pas), line = 1175
  6715
  6716 4CA7 AD 5D A1			lda I
  6717 4CAA 8D 78 9F			sta SQRT32.V
  6718 4CAD AD 5E A1			lda I+1
  6719 4CB0 8D 79 9F			sta SQRT32.V+1
  6720 4CB3 AD 5F A1			lda I+2
  6721 4CB6 8D 7A 9F			sta SQRT32.V+2
  6722 4CB9 AD 60 A1			lda I+3
  6723 4CBC 8D 7B 9F			sta SQRT32.V+3
  6724 4CBF 20 52 39			jsr SQRT32
  6725 4CC2 AD 7C 9F			lda SQRT32.RESULT
  6726 4CC5 8D 5B A1			sta RESULT
  6727 4CC8 AD 7D 9F			lda SQRT32.RESULT+1
  6728 4CCB 8D 5C A1			sta RESULT+1
  6729 4CCE			@exit
  6730
  6731 				; ------------------------------------------------------------
  6732
  6733 = A13F			adr.BALL	= DATAORIGIN+$02B4	; [28] RECORD
  6734 4CCE			.var BALL	= adr.BALL .word
  6735 = A13F			BALL.X	= DATAORIGIN+$02B4
  6736 = A141			BALL.Y	= DATAORIGIN+$02B6
  6737 = A143			BALL.FINEX	= DATAORIGIN+$02B8
  6738 = A145			BALL.FINEY	= DATAORIGIN+$02BA
  6739 = A147			BALL.OLDX	= DATAORIGIN+$02BC
  6740 = A149			BALL.OLDY	= DATAORIGIN+$02BE
  6741 = A14B			BALL.SPEED	= DATAORIGIN+$02C0
  6742 = A14D			BALL.FINESPEED	= DATAORIGIN+$02C2
  6743 = A14F			BALL.SPEEDX	= DATAORIGIN+$02C4
  6744 = A151			BALL.SPEEDY	= DATAORIGIN+$02C6
  6745 = A153			BALL.SBD	= DATAORIGIN+$02C8
  6746 = A155			BALL.BRWHIT	= DATAORIGIN+$02CA
  6747 = A156			BALL.INPLAY	= DATAORIGIN+$02CB
  6748 = A157			BALL.LAUNCH	= DATAORIGIN+$02CC
  6749 = A158			BALL.ONVAUS	= DATAORIGIN+$02CD
  6750 = A15A			BALL.STM	= DATAORIGIN+$02CF
  6751 = A15B			RESULT	= DATAORIGIN+$02D0
  6752 = A15D			I	= DATAORIGIN+$02D2
  6753 = A161			A	= DATAORIGIN+$02D6
  6754 = A163			B	= DATAORIGIN+$02D8
  6755
  6756 = A13F			@VarData	= BALL.X
  6757 = 0024			@VarDataSize	= 36
  6758
  6759 4CCE 60				rts						; ret
  6760 = 4CCF 3F A1		BALL
  6760 				.endl
  6761
  6762 4CD1			.local	MOVE_BALL					; PROCEDURE
  6763
  6764 				; optimize OK (service.pas), line = 1193
  6765
  6766 4CD1 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  6767 4CDB A0 00			ldy #BALL.X-DATAORIGIN
  6768 4CDD B1 84			lda (:bp2),y
  6769 4CDF C8				iny
  6770 4CE0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6771 4CE2 A9 00			lda #$00
  6772 4CE4 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6773 4CE6 18 71 84			add (:bp2),y
  6774 4CE9 85 9F			sta :STACKORIGIN+9
  6775 4CEB C8				iny
  6776 4CEC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6777 4CEE 71 84			adc (:bp2),y
  6778 4CF0 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6779 4CF2 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6780 4CF4 A5 9F			lda :STACKORIGIN+9
  6781 4CF6 18 71 84			add (:bp2),y
  6782 4CF9 8D 6C A1			sta X
  6783 4CFC C8				iny
  6784 4CFD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6785 4CFF 71 84			adc (:bp2),y
  6786 4D01 8D 6D A1			sta X+1
  6787
  6788 				; optimize OK (service.pas), line = 1194
  6789
  6790 4D04 A0 02			ldy #BALL.Y-DATAORIGIN
  6791 4D06 B1 84			lda (:bp2),y
  6792 4D08 C8				iny
  6793 4D09 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6794 4D0B A9 00			lda #$00
  6795 4D0D A0 06			ldy #BALL.FINEY-DATAORIGIN
  6796 4D0F 18 71 84			add (:bp2),y
  6797 4D12 85 9F			sta :STACKORIGIN+9
  6798 4D14 C8				iny
  6799 4D15 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6800 4D17 71 84			adc (:bp2),y
  6801 4D19 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6802 4D1B A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  6803 4D1D A5 9F			lda :STACKORIGIN+9
  6804 4D1F 18 71 84			add (:bp2),y
  6805 4D22 8D 6E A1			sta Y
  6806 4D25 C8				iny
  6807 4D26 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6808 4D28 71 84			adc (:bp2),y
  6809 4D2A 8D 6F A1			sta Y+1
  6810
  6811 				; optimize OK (service.pas), line = 1196
  6812
  6813 4D2D A0 00			ldy #BALL.X-DATAORIGIN
  6814 4D2F AD 6D A1			lda X+1
  6815 4D32 91 84			sta (:bp2),y
  6816 4D34 C8				iny
  6817 4D35 A9 00			lda #$00
  6818 4D37 91 84			sta (:bp2),y
  6819
  6820 				; optimize OK (service.pas), line = 1197
  6821
  6822 4D39 A0 02			ldy #BALL.Y-DATAORIGIN
  6823 4D3B AD 6F A1			lda Y+1
  6824 4D3E 91 84			sta (:bp2),y
  6825 4D40 C8				iny
  6826 4D41 A9 00			lda #$00
  6827 4D43 91 84			sta (:bp2),y
  6828
  6829 				; optimize OK (service.pas), line = 1199
  6830
  6831 4D45 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6832 4D47 AD 6C A1			lda X
  6833 4D4A 91 84			sta (:bp2),y
  6834 4D4C C8				iny
  6835 4D4D A9 00			lda #$00
  6836 4D4F 91 84			sta (:bp2),y
  6837
  6838 				; optimize OK (service.pas), line = 1200
  6839
  6840 4D51 A0 06			ldy #BALL.FINEY-DATAORIGIN
  6841 4D53 AD 6E A1			lda Y
  6842 4D56 91 84			sta (:bp2),y
  6843 4D58 C8				iny
  6844 4D59 A9 00			lda #$00
  6845 4D5B 91 84			sta (:bp2),y
  6846
  6847 				; optimize OK (service.pas), line = 1205
  6848
  6849 4D5D A0 00			ldy #BALL.X-DATAORIGIN
  6850 4D5F B1 84			lda (:bp2),y
  6851 4D61 C8				iny
  6852 4D62 C9 D9			cmp #$D9
  6853 4D64 B1 84			lda (:bp2),y
  6854 4D66 E9 00			sbc #$00
  6855 4D68 50 02			svc
  6856 4D6A 49 80			eor #$80
  6857 4D6C 30 67			jmi l_0D86
  6858
  6859 				; optimize OK (service.pas), line = 1207
  6860
  6861 4D6E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6862 4D70 A9 00			lda #$00
  6863 4D72 38 F1 84			sub (:bp2),y
  6864 4D75 85 9F			sta :STACKORIGIN+9
  6865 4D77 C8				iny
  6866 4D78 A9 00			lda #$00
  6867 4D7A F1 84			sbc (:bp2),y
  6868 4D7C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6869 4D7E A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6870 4D80 A5 9F			lda :STACKORIGIN+9
  6871 4D82 91 84			sta (:bp2),y
  6872 4D84 C8				iny
  6873 4D85 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6874 4D87 91 84			sta (:bp2),y
  6875
  6876 				; optimize OK (service.pas), line = 1208
  6877
  6878 4D89 A0 00			ldy #BALL.X-DATAORIGIN
  6879 4D8B A9 B0			lda #$B0
  6880 4D8D 38 F1 84			sub (:bp2),y
  6881 4D90 85 9F			sta :STACKORIGIN+9
  6882 4D92 C8				iny
  6883 4D93 A9 01			lda #$01
  6884 4D95 F1 84			sbc (:bp2),y
  6885 4D97 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6886 4D99 A0 00			ldy #BALL.X-DATAORIGIN
  6887 4D9B A5 9F			lda :STACKORIGIN+9
  6888 4D9D 91 84			sta (:bp2),y
  6889 4D9F C8				iny
  6890 4DA0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6891 4DA2 91 84			sta (:bp2),y
  6892
  6893 				; optimize OK (service.pas), line = 1209
  6894
  6895 4DA4 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6896 4DA6 A9 FF			lda #$FF
  6897 4DA8 51 84			eor (:bp2),y
  6898 4DAA 85 9F			sta :STACKORIGIN+9
  6899 4DAC C8				iny
  6900 4DAD A9 00			lda #$00
  6901 4DAF F1 84			sbc (:bp2),y
  6902 4DB1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6903 4DB3 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6904 4DB5 A5 9F			lda :STACKORIGIN+9
  6905 4DB7 91 84			sta (:bp2),y
  6906 4DB9 C8				iny
  6907 4DBA A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6908 4DBC 91 84			sta (:bp2),y
  6909
  6910 				; optimize OK (service.pas), line = 1210
  6911
  6912 4DBE A9 F0			lda #$F0
  6913 4DC0 8D 74 9F			sta BALL_BLOCK_SOUND.A
  6914 4DC3 A9 00			lda #$00
  6915 4DC5 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
  6916 4DC8 A9 05			lda #$05
  6917 4DCA 8D 76 9F			sta BALL_BLOCK_SOUND.B
  6918 4DCD A9 00			lda #$00
  6919 4DCF 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
  6920 4DD2 20 51 39			jsr BALL_BLOCK_SOUND
  6921 4DD5			l_0D86
  6922
  6923 				; optimize OK (service.pas), line = 1215
  6924
  6925 4DD5 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  6926 4DDF A0 00			ldy #BALL.X-DATAORIGIN
  6927 4DE1 B1 84			lda (:bp2),y
  6928 4DE3 C8				iny
  6929 4DE4 C9 0A			cmp #$0A
  6930 4DE6 B1 84			lda (:bp2),y
  6931 4DE8 E9 00			sbc #$00
  6932 4DEA 50 02			svc
  6933 4DEC 49 80			eor #$80
  6934 4DEE 10 67			jpl l_0DBB
  6935
  6936 				; optimize OK (service.pas), line = 1217
  6937
  6938 4DF0 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6939 4DF2 A9 00			lda #$00
  6940 4DF4 38 F1 84			sub (:bp2),y
  6941 4DF7 85 9F			sta :STACKORIGIN+9
  6942 4DF9 C8				iny
  6943 4DFA A9 00			lda #$00
  6944 4DFC F1 84			sbc (:bp2),y
  6945 4DFE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6946 4E00 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  6947 4E02 A5 9F			lda :STACKORIGIN+9
  6948 4E04 91 84			sta (:bp2),y
  6949 4E06 C8				iny
  6950 4E07 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6951 4E09 91 84			sta (:bp2),y
  6952
  6953 				; optimize OK (service.pas), line = 1218
  6954
  6955 4E0B A0 00			ldy #BALL.X-DATAORIGIN
  6956 4E0D A9 14			lda #$14
  6957 4E0F 38 F1 84			sub (:bp2),y
  6958 4E12 85 9F			sta :STACKORIGIN+9
  6959 4E14 C8				iny
  6960 4E15 A9 00			lda #$00
  6961 4E17 F1 84			sbc (:bp2),y
  6962 4E19 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6963 4E1B A0 00			ldy #BALL.X-DATAORIGIN
  6964 4E1D A5 9F			lda :STACKORIGIN+9
  6965 4E1F 91 84			sta (:bp2),y
  6966 4E21 C8				iny
  6967 4E22 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6968 4E24 91 84			sta (:bp2),y
  6969
  6970 				; optimize OK (service.pas), line = 1219
  6971
  6972 4E26 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6973 4E28 A9 FF			lda #$FF
  6974 4E2A 51 84			eor (:bp2),y
  6975 4E2C 85 9F			sta :STACKORIGIN+9
  6976 4E2E C8				iny
  6977 4E2F A9 00			lda #$00
  6978 4E31 F1 84			sbc (:bp2),y
  6979 4E33 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  6980 4E35 A0 04			ldy #BALL.FINEX-DATAORIGIN
  6981 4E37 A5 9F			lda :STACKORIGIN+9
  6982 4E39 91 84			sta (:bp2),y
  6983 4E3B C8				iny
  6984 4E3C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  6985 4E3E 91 84			sta (:bp2),y
  6986
  6987 				; optimize OK (service.pas), line = 1220
  6988
  6989 4E40 A9 F0			lda #$F0
  6990 4E42 8D 74 9F			sta BALL_BLOCK_SOUND.A
  6991 4E45 A9 00			lda #$00
  6992 4E47 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
  6993 4E4A A9 05			lda #$05
  6994 4E4C 8D 76 9F			sta BALL_BLOCK_SOUND.B
  6995 4E4F A9 00			lda #$00
  6996 4E51 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
  6997 4E54 20 51 39			jsr BALL_BLOCK_SOUND
  6998 4E57			l_0DBB
  6999
  7000 				; optimize OK (service.pas), line = 1225
  7001
  7002 4E57 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7003 4E61 A0 02			ldy #BALL.Y-DATAORIGIN
  7004 4E63 B1 84			lda (:bp2),y
  7005 4E65 C8				iny
  7006 4E66 C9 0C			cmp #$0C
  7007 4E68 B1 84			lda (:bp2),y
  7008 4E6A E9 00			sbc #$00
  7009 4E6C 50 02			svc
  7010 4E6E 49 80			eor #$80
  7011 4E70 10 67			jpl l_0DF0
  7012
  7013 				; optimize OK (service.pas), line = 1227
  7014
  7015 4E72 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7016 4E74 A9 00			lda #$00
  7017 4E76 38 F1 84			sub (:bp2),y
  7018 4E79 85 9F			sta :STACKORIGIN+9
  7019 4E7B C8				iny
  7020 4E7C A9 00			lda #$00
  7021 4E7E F1 84			sbc (:bp2),y
  7022 4E80 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7023 4E82 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7024 4E84 A5 9F			lda :STACKORIGIN+9
  7025 4E86 91 84			sta (:bp2),y
  7026 4E88 C8				iny
  7027 4E89 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7028 4E8B 91 84			sta (:bp2),y
  7029
  7030 				; optimize OK (service.pas), line = 1228
  7031
  7032 4E8D A0 02			ldy #BALL.Y-DATAORIGIN
  7033 4E8F A9 18			lda #$18
  7034 4E91 38 F1 84			sub (:bp2),y
  7035 4E94 85 9F			sta :STACKORIGIN+9
  7036 4E96 C8				iny
  7037 4E97 A9 00			lda #$00
  7038 4E99 F1 84			sbc (:bp2),y
  7039 4E9B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7040 4E9D A0 02			ldy #BALL.Y-DATAORIGIN
  7041 4E9F A5 9F			lda :STACKORIGIN+9
  7042 4EA1 91 84			sta (:bp2),y
  7043 4EA3 C8				iny
  7044 4EA4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7045 4EA6 91 84			sta (:bp2),y
  7046
  7047 				; optimize OK (service.pas), line = 1229
  7048
  7049 4EA8 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7050 4EAA A9 FF			lda #$FF
  7051 4EAC 51 84			eor (:bp2),y
  7052 4EAE 85 9F			sta :STACKORIGIN+9
  7053 4EB0 C8				iny
  7054 4EB1 A9 00			lda #$00
  7055 4EB3 F1 84			sbc (:bp2),y
  7056 4EB5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7057 4EB7 A0 06			ldy #BALL.FINEY-DATAORIGIN
  7058 4EB9 A5 9F			lda :STACKORIGIN+9
  7059 4EBB 91 84			sta (:bp2),y
  7060 4EBD C8				iny
  7061 4EBE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7062 4EC0 91 84			sta (:bp2),y
  7063
  7064 				; optimize OK (service.pas), line = 1230
  7065
  7066 4EC2 A9 F0			lda #$F0
  7067 4EC4 8D 74 9F			sta BALL_BLOCK_SOUND.A
  7068 4EC7 A9 00			lda #$00
  7069 4EC9 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
  7070 4ECC A9 05			lda #$05
  7071 4ECE 8D 76 9F			sta BALL_BLOCK_SOUND.B
  7072 4ED1 A9 00			lda #$00
  7073 4ED3 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
  7074 4ED6 20 51 39			jsr BALL_BLOCK_SOUND
  7075 4ED9			l_0DF0
  7076
  7077 				; optimize OK (service.pas), line = 1238
  7078
  7079 4ED9 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7080 4EE3 A0 02			ldy #BALL.Y-DATAORIGIN
  7081 4EE5 B1 84			lda (:bp2),y
  7082 4EE7 18 69 03			add #$03
  7083 4EEA 85 9F			sta :STACKORIGIN+9
  7084 4EEC C8				iny
  7085 4EED B1 84			lda (:bp2),y
  7086 4EEF 69 00			adc #$00
  7087 4EF1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7088 4EF3 A0 01			ldy #1
  7089 4EF5 A5 9F			lda :STACKORIGIN+9
  7090 4EF7 C9 B9			cmp #$B9
  7091 4EF9 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7092 4EFB E9 00			sbc #$00
  7093 4EFD 50 02			svc
  7094 4EFF 49 80			eor #$80
  7095 4F01 10 01			bpl @+
  7096 4F03 88				dey
  7097 				@
  7098 4F04 98				tya
  7099 4F05 8D 69 A1			sta B0
  7100
  7101 				; optimize OK (service.pas), line = 1239
  7102
  7103 4F08 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7104 4F0A B1 84			lda (:bp2),y
  7105 4F0C 85 9F			sta :STACKORIGIN+9
  7106 4F0E C8				iny
  7107 4F0F B1 84			lda (:bp2),y
  7108 4F11 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7109 4F13 A0 01			ldy #1
  7110 4F15 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7111 4F17 30 04			bmi @+
  7112 4F19 05 9F			ora :STACKORIGIN+9
  7113 4F1B D0 01			sne
  7114 				@
  7115 4F1D 88				dey
  7116 				@
  7117 4F1E 98				tya
  7118 4F1F 8D 6A A1			sta B1
  7119
  7120 				; optimize OK (service.pas), line = 1240
  7121
  7122 4F22 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7123 4F24 B1 84			lda (:bp2),y
  7124 4F26 85 9F			sta :STACKORIGIN+9
  7125 4F28 C8				iny
  7126 4F29 B1 84			lda (:bp2),y
  7127 4F2B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7128 4F2D A0 01			ldy #1
  7129 4F2F A5 9F			lda :STACKORIGIN+9
  7130 4F31 C9 B9			cmp #$B9
  7131 4F33 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7132 4F35 E9 00			sbc #$00
  7133 4F37 50 02			svc
  7134 4F39 49 80			eor #$80
  7135 4F3B 30 01			bmi @+
  7136 4F3D 88				dey
  7137 				@
  7138 4F3E 98				tya
  7139 4F3F 8D 6B A1			sta B2
  7140
  7141 				; optimize OK (service.pas), line = 1243
  7142
  7143 4F42 AD 69 A1			lda B0
  7144 4F45 2D 6A A1			and B1
  7145 4F48 2D 6B A1			and B2
  7146 4F4B D0 03 4C F9 51		jeq l_0E51
  7147
  7148 				; optimize OK (service.pas), line = 1247
  7149
  7150 4F50 A0 00			ldy #BALL.X-DATAORIGIN
  7151 4F52 B1 84			lda (:bp2),y
  7152 4F54 85 9F			sta :STACKORIGIN+9
  7153 4F56 C8				iny
  7154 4F57 AD 0E A0			lda VAUS.X
  7155 4F5A 38 E9 03			sub #$03
  7156 4F5D 85 A0			sta :STACKORIGIN+10
  7157 4F5F A9 00			lda #$00
  7158 4F61 E9 00			sbc #$00
  7159 4F63 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7160 4F65 A5 A0			lda :STACKORIGIN+10
  7161 4F67 C5 9F			cmp :STACKORIGIN+9
  7162 4F69 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7163 4F6B F1 84			sbc (:bp2),y
  7164 4F6D 50 02			svc
  7165 4F6F 49 80			eor #$80
  7166 4F71 30 03 4C F9 51		jpl l_0E80
  7167 4F76 A0 00			ldy #BALL.X-DATAORIGIN
  7168 4F78 B1 84			lda (:bp2),y
  7169 4F7A 85 A0			sta :STACKORIGIN+10
  7170 4F7C C8				iny
  7171 4F7D AD 0E A0			lda VAUS.X
  7172 4F80 18 6D 16 A0			add VAUS.WIDTH
  7173 4F84 85 A1			sta :STACKORIGIN+11
  7174 4F86 A9 00			lda #$00
  7175 4F88 69 00			adc #$00
  7176 4F8A 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7177 4F8C A5 A1			lda :STACKORIGIN+11
  7178 4F8E 18 69 03			add #$03
  7179 4F91 85 A1			sta :STACKORIGIN+11
  7180 4F93 A5 B1			lda :STACKORIGIN+STACKWIDTH+11
  7181 4F95 69 00			adc #$00
  7182 4F97 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7183 4F99 A5 A0			lda :STACKORIGIN+10
  7184 4F9B C5 A1			cmp :STACKORIGIN+11
  7185 4F9D B1 84			lda (:bp2),y
  7186 4F9F E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7187 4FA1 50 02			svc
  7188 4FA3 49 80			eor #$80
  7189 4FA5 30 03 4C F9 51		jpl l_0E80
  7190
  7191 				; optimize OK (service.pas), line = 1250
  7192
  7193 4FAA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7194 4FAC A9 00			lda #$00
  7195 4FAE 38 F1 84			sub (:bp2),y
  7196 4FB1 85 9F			sta :STACKORIGIN+9
  7197 4FB3 C8				iny
  7198 4FB4 A9 00			lda #$00
  7199 4FB6 F1 84			sbc (:bp2),y
  7200 4FB8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7201 4FBA A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7202 4FBC A5 9F			lda :STACKORIGIN+9
  7203 4FBE 91 84			sta (:bp2),y
  7204 4FC0 C8				iny
  7205 4FC1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7206 4FC3 91 84			sta (:bp2),y
  7207
  7208 				; optimize OK (service.pas), line = 1252
  7209
  7210 4FC5 AD 1A A0			lda VAUS.LETTER
  7211 4FC8 C9 06			cmp #$06
  7212 4FCA D0 2C			jne l_0EA4
  7213 4FCC A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7214 4FCE B1 84			lda (:bp2),y
  7215 4FD0 D0 26			jne l_0EA4
  7216
  7217 				; optimize OK (service.pas), line = 1254
  7218
  7219 4FD2 A0 1B			ldy #BALL.STM-DATAORIGIN
  7220 4FD4 91 84			sta (:bp2),y
  7221
  7222 				; optimize OK (service.pas), line = 1255
  7223
  7224 4FD6 A0 18			ldy #BALL.LAUNCH-DATAORIGIN
  7225 4FD8 A9 01			lda #$01
  7226 4FDA 91 84			sta (:bp2),y
  7227
  7228 				; optimize OK (service.pas), line = 1256
  7229
  7230 4FDC A0 00			ldy #BALL.X-DATAORIGIN
  7231 4FDE B1 84			lda (:bp2),y
  7232 4FE0 38 ED 0E A0			sub VAUS.X
  7233 4FE4 85 9F			sta :STACKORIGIN+9
  7234 4FE6 C8				iny
  7235 4FE7 B1 84			lda (:bp2),y
  7236 4FE9 E9 00			sbc #$00
  7237 4FEB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7238 4FED A0 19			ldy #BALL.ONVAUS-DATAORIGIN
  7239 4FEF A5 9F			lda :STACKORIGIN+9
  7240 4FF1 91 84			sta (:bp2),y
  7241 4FF3 C8				iny
  7242 4FF4 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7243 4FF6 91 84			sta (:bp2),y
  7244 4FF8			l_0EA4
  7245
  7246 				; optimize OK (service.pas), line = 1259
  7247
  7248 4FF8 A9 2C			lda #$2C
  7249 4FFA 8D 74 9F			sta BALL_BLOCK_SOUND.A
  7250 4FFD A9 01			lda #$01
  7251 4FFF 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
  7252 5002 A9 06			lda #$06
  7253 5004 8D 76 9F			sta BALL_BLOCK_SOUND.B
  7254 5007 A9 00			lda #$00
  7255 5009 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
  7256 500C 20 51 39			jsr BALL_BLOCK_SOUND
  7257
  7258 				; optimize OK (service.pas), line = 1263
  7259
  7260 500F AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7261 5019 A0 00			ldy #BALL.X-DATAORIGIN
  7262 501B B1 84			lda (:bp2),y
  7263 501D 85 9F			sta :STACKORIGIN+9
  7264 501F C8				iny
  7265 5020 AD 0E A0			lda VAUS.X
  7266 5023 18 69 0A			add #$0A
  7267 5026 85 A0			sta :STACKORIGIN+10
  7268 5028 A9 00			lda #$00
  7269 502A 69 00			adc #$00
  7270 502C 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7271 502E A5 9F			lda :STACKORIGIN+9
  7272 5030 C5 A0			cmp :STACKORIGIN+10
  7273 5032 B1 84			lda (:bp2),y
  7274 5034 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  7275 5036 50 02			svc
  7276 5038 49 80			eor #$80
  7277 503A 30 03 4C FD 50		jpl l_0ED4
  7278
  7279 				; optimize OK (service.pas), line = 1266
  7280
  7281 503F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7282 5041 A9 00			lda #$00
  7283 5043 38 F1 84			sub (:bp2),y
  7284 5046 85 9F			sta :STACKORIGIN+9
  7285 5048 C8				iny
  7286 5049 A9 00			lda #$00
  7287 504B F1 84			sbc (:bp2),y
  7288 504D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7289 504F A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7290 5051 A5 9F			lda :STACKORIGIN+9
  7291 5053 91 84			sta (:bp2),y
  7292 5055 C8				iny
  7293 5056 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7294 5058 91 84			sta (:bp2),y
  7295
  7296 				; optimize OK (service.pas), line = 1270
  7297
  7298 505A AD 65 A1			lda BALL
  7299 505D 8D 33 A1			sta GET_BALL_DIRECTION.BALL
  7300 5060 AD 66 A1			lda BALL+1
  7301 5063 8D 34 A1			sta GET_BALL_DIRECTION.BALL+1
  7302 5066 20 9E 49			jsr GET_BALL_DIRECTION
  7303 5069 E8				inx
  7304 506A AD 37 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7305 506F AD 38 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7306 5074 A9 1E			lda #$1E
  7307 5076 20 11 33			jsr SYSTEM.RANDOM.@010180000
  7308 5079 B5 96			lda :STACKORIGIN,x
  7309 507B 18 6D C2 9E			add SYSTEM.RANDOM.@010180000.RESULT
  7310 507F 8D 70 A1			sta ANGLE
  7311 5082 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7312 5084 69 00			adc #$00
  7313 5086 8D 71 A1			sta ANGLE+1
  7314 5089 CA				dex
  7315
  7316 				; optimize OK (service.pas), line = 1278
  7317
  7318 508A A9 A0			lda #$A0
  7319 508C 8D CF A0			sta MIN.A
  7320 508F A9 00			lda #$00
  7321 5091 8D D0 A0			sta MIN.A+1
  7322 5094 AD 70 A1			lda ANGLE
  7323 5097 8D D1 A0			sta MIN.B
  7324 509A AD 71 A1			lda ANGLE+1
  7325 509D 8D D2 A0			sta MIN.B+1
  7326 50A0 20 91 3D			jsr MIN
  7327 50A3 A9 78			lda #$78
  7328 50A5 8D C9 A0			sta MAX.A
  7329 50A8 A9 00			lda #$00
  7330 50AA 8D CA A0			sta MAX.A+1
  7331 50AD AD D3 A0			lda MIN.RESULT
  7332 50B0 8D CB A0			sta MAX.B
  7333 50B3 AD D4 A0			lda MIN.RESULT+1
  7334 50B6 8D CC A0			sta MAX.B+1
  7335 50B9 20 66 3D			jsr MAX
  7336 50BC AD 65 A1			lda BALL
  7337 50BF 8D 29 A1			sta SET_BALL_DIRECTION.BALL
  7338 50C2 AD 66 A1			lda BALL+1
  7339 50C5 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
  7340 50C8 AD CD A0			lda MAX.RESULT
  7341 50CB 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
  7342 50CE AD CE A0			lda MAX.RESULT+1
  7343 50D1 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
  7344 50D4 20 B8 47			jsr SET_BALL_DIRECTION
  7345
  7346 				; optimize OK (service.pas), line = 1283
  7347
  7348 50D7 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7349 50E1 A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7350 50E3 B1 84			lda (:bp2),y
  7351 50E5 8D 17 A1			sta SET_BALL_SPEED.SPEED
  7352 50E8 C8				iny
  7353 50E9 B1 84			lda (:bp2),y
  7354 50EB 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
  7355 50EE AD 65 A1			lda BALL
  7356 50F1 8D 13 A1			sta SET_BALL_SPEED.BALL
  7357 50F4 AD 66 A1			lda BALL+1
  7358 50F7 8D 14 A1			sta SET_BALL_SPEED.BALL+1
  7359 50FA 20 D5 45			jsr SET_BALL_SPEED
  7360 50FD			l_0ED4
  7361
  7362 				; optimize OK (service.pas), line = 1289
  7363
  7364 50FD AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7365 5107 A0 00			ldy #BALL.X-DATAORIGIN
  7366 5109 B1 84			lda (:bp2),y
  7367 510B 85 9F			sta :STACKORIGIN+9
  7368 510D C8				iny
  7369 510E AD 0E A0			lda VAUS.X
  7370 5111 18 6D 16 A0			add VAUS.WIDTH
  7371 5115 85 A0			sta :STACKORIGIN+10
  7372 5117 A9 00			lda #$00
  7373 5119 69 00			adc #$00
  7374 511B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7375 511D A5 A0			lda :STACKORIGIN+10
  7376 511F 38 E9 0A			sub #$0A
  7377 5122 85 A0			sta :STACKORIGIN+10
  7378 5124 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7379 5126 E9 00			sbc #$00
  7380 5128 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7381 512A A5 A0			lda :STACKORIGIN+10
  7382 512C C5 9F			cmp :STACKORIGIN+9
  7383 512E A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7384 5130 F1 84			sbc (:bp2),y
  7385 5132 50 02			svc
  7386 5134 49 80			eor #$80
  7387 5136 30 03 4C F9 51		jpl l_0F15
  7388
  7389 				; optimize OK (service.pas), line = 1291
  7390
  7391 513B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7392 513D A9 00			lda #$00
  7393 513F 38 F1 84			sub (:bp2),y
  7394 5142 85 9F			sta :STACKORIGIN+9
  7395 5144 C8				iny
  7396 5145 A9 00			lda #$00
  7397 5147 F1 84			sbc (:bp2),y
  7398 5149 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7399 514B A0 10			ldy #BALL.SPEEDX-DATAORIGIN
  7400 514D A5 9F			lda :STACKORIGIN+9
  7401 514F 91 84			sta (:bp2),y
  7402 5151 C8				iny
  7403 5152 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7404 5154 91 84			sta (:bp2),y
  7405
  7406 				; optimize OK (service.pas), line = 1292
  7407
  7408 5156 AD 65 A1			lda BALL
  7409 5159 8D 33 A1			sta GET_BALL_DIRECTION.BALL
  7410 515C AD 66 A1			lda BALL+1
  7411 515F 8D 34 A1			sta GET_BALL_DIRECTION.BALL+1
  7412 5162 20 9E 49			jsr GET_BALL_DIRECTION
  7413 5165 E8				inx
  7414 5166 AD 37 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
  7415 516B AD 38 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  7416 5170 A9 1E			lda #$1E
  7417 5172 20 11 33			jsr SYSTEM.RANDOM.@010180000
  7418 5175 B5 96			lda :STACKORIGIN,x
  7419 5177 38 ED C2 9E			sub SYSTEM.RANDOM.@010180000.RESULT
  7420 517B 8D 70 A1			sta ANGLE
  7421 517E B5 A6			lda :STACKORIGIN+STACKWIDTH,x
  7422 5180 E9 00			sbc #$00
  7423 5182 8D 71 A1			sta ANGLE+1
  7424 5185 CA				dex
  7425
  7426 				; optimize OK (service.pas), line = 1293
  7427
  7428 5186 A9 14			lda #$14
  7429 5188 8D C9 A0			sta MAX.A
  7430 518B A9 00			lda #$00
  7431 518D 8D CA A0			sta MAX.A+1
  7432 5190 AD 70 A1			lda ANGLE
  7433 5193 8D CB A0			sta MAX.B
  7434 5196 AD 71 A1			lda ANGLE+1
  7435 5199 8D CC A0			sta MAX.B+1
  7436 519C 20 66 3D			jsr MAX
  7437 519F A9 3C			lda #$3C
  7438 51A1 8D CF A0			sta MIN.A
  7439 51A4 A9 00			lda #$00
  7440 51A6 8D D0 A0			sta MIN.A+1
  7441 51A9 AD CD A0			lda MAX.RESULT
  7442 51AC 8D D1 A0			sta MIN.B
  7443 51AF AD CE A0			lda MAX.RESULT+1
  7444 51B2 8D D2 A0			sta MIN.B+1
  7445 51B5 20 91 3D			jsr MIN
  7446 51B8 AD 65 A1			lda BALL
  7447 51BB 8D 29 A1			sta SET_BALL_DIRECTION.BALL
  7448 51BE AD 66 A1			lda BALL+1
  7449 51C1 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
  7450 51C4 AD D3 A0			lda MIN.RESULT
  7451 51C7 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
  7452 51CA AD D4 A0			lda MIN.RESULT+1
  7453 51CD 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
  7454 51D0 20 B8 47			jsr SET_BALL_DIRECTION
  7455
  7456 				; optimize OK (service.pas), line = 1294
  7457
  7458 51D3 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7459 51DD A0 0C			ldy #BALL.SPEED-DATAORIGIN
  7460 51DF B1 84			lda (:bp2),y
  7461 51E1 8D 17 A1			sta SET_BALL_SPEED.SPEED
  7462 51E4 C8				iny
  7463 51E5 B1 84			lda (:bp2),y
  7464 51E7 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
  7465 51EA AD 65 A1			lda BALL
  7466 51ED 8D 13 A1			sta SET_BALL_SPEED.BALL
  7467 51F0 AD 66 A1			lda BALL+1
  7468 51F3 8D 14 A1			sta SET_BALL_SPEED.BALL+1
  7469 51F6 20 D5 45			jsr SET_BALL_SPEED
  7470 51F9			l_0F15
  7471 51F9			l_0E80
  7472 51F9			l_0E51
  7473
  7474 				; optimize OK (service.pas), line = 1306
  7475
  7476 51F9 AC 65 A1 84 84 AC + 	mwy BALL :bp2
  7477 5203 A0 0A			ldy #BALL.OLDY-DATAORIGIN
  7478 5205 B1 84			lda (:bp2),y
  7479 5207 85 9F			sta :STACKORIGIN+9
  7480 5209 C8				iny
  7481 520A B1 84			lda (:bp2),y
  7482 520C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  7483 520E A0 01			ldy #1
  7484 5210 A5 9F			lda :STACKORIGIN+9
  7485 5212 C9 B9			cmp #$B9
  7486 5214 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  7487 5216 E9 00			sbc #$00
  7488 5218 50 02			svc
  7489 521A 49 80			eor #$80
  7490 521C 10 01			bpl @+
  7491 521E 88				dey
  7492 				@
  7493 521F 84 9F			sty :STACKORIGIN+9
  7494 5221 A0 02			ldy #BALL.Y-DATAORIGIN
  7495 5223 B1 84			lda (:bp2),y
  7496 5225 85 A0			sta :STACKORIGIN+10
  7497 5227 C8				iny
  7498 5228 B1 84			lda (:bp2),y
  7499 522A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7500 522C A0 01			ldy #1
  7501 522E A5 A0			lda :STACKORIGIN+10
  7502 5230 C9 C9			cmp #$C9
  7503 5232 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7504 5234 E9 00			sbc #$00
  7505 5236 50 02			svc
  7506 5238 49 80			eor #$80
  7507 523A 10 01			bpl @+
  7508 523C 88				dey
  7509 				@
  7510 523D 98				tya
  7511 523E 25 9F			and :STACKORIGIN+9
  7512 5240 85 9F			sta :STACKORIGIN+9
  7513 5242 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
  7514 5244 B1 84			lda (:bp2),y
  7515 5246 85 A0			sta :STACKORIGIN+10
  7516 5248 C8				iny
  7517 5249 B1 84			lda (:bp2),y
  7518 524B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7519 524D A0 01			ldy #1
  7520 524F A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7521 5251 30 04			bmi @+
  7522 5253 05 A0			ora :STACKORIGIN+10
  7523 5255 D0 01			sne
  7524 				@
  7525 5257 88				dey
  7526 				@
  7527 5258 98				tya
  7528 5259 25 9F			and :STACKORIGIN+9
  7529 525B F0 15			jeq l_0F64
  7530
  7531 				; optimize OK (service.pas), line = 1308
  7532
  7533 525D A0 17			ldy #BALL.INPLAY-DATAORIGIN
  7534 525F A9 00			lda #$00
  7535 5261 91 84			sta (:bp2),y
  7536
  7537 				; optimize OK (service.pas), line = 1310
  7538
  7539 5263 AD 65 A1			lda BALL
  7540 5266 8D 09 A1			sta REMOVE_BALL.BALL
  7541 5269 AD 66 A1			lda BALL+1
  7542 526C 8D 0A A1			sta REMOVE_BALL.BALL+1
  7543 526F 20 72 44			jsr REMOVE_BALL
  7544 5272			l_0F64
  7545
  7546 				; ------------------------------------------------------------
  7547
  7548 = A165			BALL	= DATAORIGIN+$02DA
  7549 = 9E8B			BALL.X	= DATAORIGIN+$0000
  7550 = 9E8D			BALL.Y	= DATAORIGIN+$0002
  7551 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
  7552 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
  7553 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
  7554 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
  7555 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
  7556 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
  7557 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
  7558 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
  7559 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
  7560 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
  7561 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
  7562 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
  7563 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
  7564 = 9EA6			BALL.STM	= DATAORIGIN+$001B
  7565 = A169			B0	= DATAORIGIN+$02DE
  7566 = A16A			B1	= DATAORIGIN+$02DF
  7567 = A16B			B2	= DATAORIGIN+$02E0
  7568 = A16C			X	= DATAORIGIN+$02E1
  7569 = A16E			Y	= DATAORIGIN+$02E3
  7570 = A170			ANGLE	= DATAORIGIN+$02E5
  7571
  7572 = A165			@VarData	= BALL
  7573 = 000B			@VarDataSize	= 11
  7574
  7575 5272			@exit
  7576 					.ifdef @new
  7577 					lda <@VarData
  7578 					sta :ztmp
  7579 					lda >@VarData
  7580 					ldy #@VarDataSize-1
  7581 					jmp @FreeMem
  7582 					els
  7583 5272 60				rts						; ret
  7584 					eif
  7585 				.endl
  7586
  7587 5273			.local	MODIFY_VAUS					; PROCEDURE
  7588
  7589 				; optimize OK (service.pas), line = 1317
  7590
  7591 5273 AD 16 A0			lda VAUS.WIDTH
  7592 5276 8D 14 A0			sta VAUS.OLDLEN
  7593 5279 A9 00			lda #$00
  7594 527B 8D 15 A0			sta VAUS.OLDLEN+1
  7595
  7596 				; optimize OK (service.pas), line = 1318
  7597
  7598 527E AD 9E 9F			lda PLAYVAUS.WIDTH
  7599 5281 8D 16 A0			sta VAUS.WIDTH
  7600
  7601 				; optimize OK (service.pas), line = 1319
  7602
  7603 5284 AD A0 9F			lda PLAYVAUS.HEIGHT
  7604 5287 8D 17 A0			sta VAUS.HEIGHT
  7605
  7606 528A			@exit
  7607 					.ifdef @new
  7608 					lda <@VarData
  7609 					sta :ztmp
  7610 					lda >@VarData
  7611 					ldy #@VarDataSize-1
  7612 					jmp @FreeMem
  7613 					els
  7614 528A 60				rts						; ret
  7615 					eif
  7616 				.endl
  7617
  7618 528B			.local	SET_VAUS					; PROCEDURE
  7619
  7620 				; optimize OK (service.pas), line = 1324
  7621
  7622 528B A9 5F			lda #$5F
  7623 528D 8D 0E A0			sta VAUS.X
  7624
  7625 				; optimize OK (service.pas), line = 1325
  7626
  7627 5290 A9 B8			lda #$B8
  7628 5292 8D 0F A0			sta VAUS.Y
  7629
  7630 				; optimize OK (service.pas), line = 1327
  7631
  7632 5295 A9 FF			lda #$FF
  7633 5297 8D 10 A0			sta VAUS.OLDX
  7634 529A 8D 11 A0			sta VAUS.OLDX+1
  7635
  7636 				; optimize OK (service.pas), line = 1328
  7637
  7638 529D 8D 12 A0			sta VAUS.OLDY
  7639 52A0 8D 13 A0			sta VAUS.OLDY+1
  7640
  7641 				; optimize OK (service.pas), line = 1329
  7642
  7643 52A3 A9 00			lda #$00
  7644 52A5 8D 19 A0			sta VAUS.IFLASH
  7645
  7646 				; optimize OK (service.pas), line = 1333
  7647
  7648 52A8 8D 18 A0			sta VAUS.FLASH
  7649
  7650 				; optimize OK (service.pas), line = 1337
  7651
  7652 52AB AD 9E 9F			lda PLAYVAUS.WIDTH
  7653 52AE 8D 16 A0			sta VAUS.WIDTH
  7654
  7655 				; optimize OK (service.pas), line = 1338
  7656
  7657 52B1 AD A0 9F			lda PLAYVAUS.HEIGHT
  7658 52B4 8D 17 A0			sta VAUS.HEIGHT
  7659
  7660 				; optimize OK (service.pas), line = 1339
  7661
  7662 52B7 AD 16 A0			lda VAUS.WIDTH
  7663 52BA 8D 14 A0			sta VAUS.OLDLEN
  7664 52BD A9 00			lda #$00
  7665 52BF 8D 15 A0			sta VAUS.OLDLEN+1
  7666
  7667 				; optimize OK (service.pas), line = 1340
  7668
  7669 52C2 A9 FF			lda #$FF
  7670 52C4 8D 1A A0			sta VAUS.LETTER
  7671
  7672 52C7			@exit
  7673 					.ifdef @new
  7674 					lda <@VarData
  7675 					sta :ztmp
  7676 					lda >@VarData
  7677 					ldy #@VarDataSize-1
  7678 					jmp @FreeMem
  7679 					els
  7680 52C7 60				rts						; ret
  7681 					eif
  7682 				.endl
  7683
  7684 52C8			.local	START_VAUS					; PROCEDURE
  7685
  7686 				; optimize OK (service.pas), line = 1349
  7687
  7688 52C8 A9 5F			lda #$5F
  7689 52CA 8D 0E A0			sta VAUS.X
  7690
  7691 				; optimize OK (service.pas), line = 1350
  7692
  7693 52CD A9 B8			lda #$B8
  7694 52CF 8D 0F A0			sta VAUS.Y
  7695
  7696 52D2			@exit
  7697 					.ifdef @new
  7698 					lda <@VarData
  7699 					sta :ztmp
  7700 					lda >@VarData
  7701 					ldy #@VarDataSize-1
  7702 					jmp @FreeMem
  7703 					els
  7704 52D2 60				rts						; ret
  7705 					eif
  7706 				.endl
  7707
  7708 52D3			.local	REMOVE_VAUS					; PROCEDURE
  7709
  7710 				; optimize OK (service.pas), line = 1364
  7711
  7712 52D3 AC 12 A0			ldy VAUS.OLDY
  7713 52D6 AD 10 A0			lda VAUS.OLDX
  7714 52D9 18 79 00 C0			add adr.ROW,y
  7715 52DD 8D 8D A0			sta HLP
  7716 52E0 AD 11 A0			lda VAUS.OLDX+1
  7717 52E3 79 00 C1			adc adr.ROW+256,y
  7718 52E6 8D 8E A0			sta HLP+1
  7719
  7720 				; optimize OK (service.pas), line = 1366
  7721
  7722 52E9 AD 8D A0			lda HLP
  7723 52EC 8D 9C A0			sta BLITBOX.DST
  7724 52EF A9 50			lda #$50
  7725 52F1 18 6D 8E A0			add HLP+1
  7726 52F5 8D 9D A0			sta BLITBOX.DST+1
  7727 52F8 A9 00			lda #$00
  7728 52FA 69 00			adc #$00
  7729 52FC 8D 9E A0			sta BLITBOX.DST+2
  7730 52FF A9 00			lda #$00
  7731 5301 69 00			adc #$00
  7732 5303 8D 9F A0			sta BLITBOX.DST+3
  7733 5306 AD 9A 9F			lda PLAYSCREEN.OFS
  7734 5309 18 6D 8D A0			add HLP
  7735 530D 8D 98 A0			sta BLITBOX.SRC
  7736 5310 AD 9B 9F			lda PLAYSCREEN.OFS+1
  7737 5313 6D 8E A0			adc HLP+1
  7738 5316 8D 99 A0			sta BLITBOX.SRC+1
  7739 5319 AD 9C 9F			lda PLAYSCREEN.OFS+2
  7740 531C 69 00			adc #$00
  7741 531E 8D 9A A0			sta BLITBOX.SRC+2
  7742 5321 AD 9D 9F			lda PLAYSCREEN.OFS+3
  7743 5324 69 00			adc #$00
  7744 5326 8D 9B A0			sta BLITBOX.SRC+3
  7745 5329 AD 14 A0			lda VAUS.OLDLEN
  7746 532C 8D A0 A0			sta BLITBOX.W
  7747 532F AD 15 A0			lda VAUS.OLDLEN+1
  7748 5332 8D A1 A0			sta BLITBOX.W+1
  7749 5335 AD 17 A0			lda VAUS.HEIGHT
  7750 5338 8D A2 A0			sta BLITBOX.H
  7751 533B 20 6A 3B			jsr BLITBOX
  7752
  7753 				; optimize OK (service.pas), line = 1374
  7754
  7755 533E AD 16 A0			lda VAUS.WIDTH
  7756 5341 8D 14 A0			sta VAUS.OLDLEN
  7757 5344 A9 00			lda #$00
  7758 5346 8D 15 A0			sta VAUS.OLDLEN+1
  7759
  7760 5349			@exit
  7761 					.ifdef @new
  7762 					lda <@VarData
  7763 					sta :ztmp
  7764 					lda >@VarData
  7765 					ldy #@VarDataSize-1
  7766 					jmp @FreeMem
  7767 					els
  7768 5349 60				rts						; ret
  7769 					eif
  7770 				.endl
  7771
  7772 534A			.local	PLACE_VAUS					; PROCEDURE
  7773
  7774 				; optimize FAIL (0, service.pas), line = 1383
  7775
  7776 534A EE 19 A0			inc VAUS.IFLASH
  7777
  7778 				; optimize OK (service.pas), line = 1385
  7779
  7780 534D AD 19 A0			lda VAUS.IFLASH
  7781 5350 C9 0B			cmp #$0B
  7782 5352 90 08			jcc l_1000
  7783
  7784 				; optimize FAIL (0, service.pas), line = 1387
  7785
  7786 5354 EE 18 A0			inc VAUS.FLASH
  7787
  7788 				; optimize OK (service.pas), line = 1388
  7789
  7790 5357 A9 00			lda #$00
  7791 5359 8D 19 A0			sta VAUS.IFLASH
  7792 535C			l_1000
  7793
  7794 				; optimize OK (service.pas), line = 1391
  7795
  7796 535C AD 18 A0			lda VAUS.FLASH
  7797 535F C9 0B			cmp #$0B
  7798 5361 90 05			jcc l_101D
  7799 5363 A9 00			lda #$00
  7800 5365 8D 18 A0			sta VAUS.FLASH
  7801 5368			l_101D
  7802
  7803 				; optimize OK (service.pas), line = 1401
  7804
  7805 5368 A9 00			lda #$00
  7806 536A 8D 8D A0			sta HLP
  7807 536D 8D 8E A0			sta HLP+1
  7808
  7809 				; optimize OK (service.pas), line = 1403
  7810
  7811 5370 8D 72 A1			sta Y
  7812 5373 AC 17 A0			ldy VAUS.HEIGHT
  7813 5376 88				dey
  7814 5377 8C 7B 53			sty @FORTMP_1034_0
  7815
  7816 537A			l_1037
  7817 				; --- ForToDoCondition
  7818 537A A9 00			lda @FORTMP_1034_0::#$00
  7819 537C CD 72 A1			cmp Y
  7820 537F B0 03 4C BD 54		jcc l_1045
  7821
  7822 				; optimize OK (service.pas), line = 1409
  7823
  7824 5384 AD 72 A1			lda Y
  7825 5387 18 6D 0F A0			add VAUS.Y
  7826 538B A8				tay
  7827 538C AD 0E A0			lda VAUS.X
  7828 538F 18 79 00 C0			add adr.ROW,y
  7829 5393 8D A7 A0			sta BLITZERO.DST
  7830 5396 A9 50			lda #$50
  7831 5398 79 00 C1			adc adr.ROW+256,y
  7832 539B 8D A8 A0			sta BLITZERO.DST+1
  7833 539E A9 00			lda #$00
  7834 53A0 69 00			adc #$00
  7835 53A2 8D A9 A0			sta BLITZERO.DST+2
  7836 53A5 A9 00			lda #$00
  7837 53A7 69 00			adc #$00
  7838 53A9 8D AA A0			sta BLITZERO.DST+3
  7839 53AC AD A2 9F			lda PLAYVAUS.OFS
  7840 53AF 18 6D 8D A0			add HLP
  7841 53B3 8D A3 A0			sta BLITZERO.SRC
  7842 53B6 AD A3 9F			lda PLAYVAUS.OFS+1
  7843 53B9 6D 8E A0			adc HLP+1
  7844 53BC 8D A4 A0			sta BLITZERO.SRC+1
  7845 53BF AD A4 9F			lda PLAYVAUS.OFS+2
  7846 53C2 69 00			adc #$00
  7847 53C4 8D A5 A0			sta BLITZERO.SRC+2
  7848 53C7 AD A5 9F			lda PLAYVAUS.OFS+3
  7849 53CA 69 00			adc #$00
  7850 53CC 8D A6 A0			sta BLITZERO.SRC+3
  7851 53CF AD 16 A0			lda VAUS.WIDTH
  7852 53D2 8D AB A0			sta BLITZERO.W
  7853 53D5 A9 00			lda #$00
  7854 53D7 8D AC A0			sta BLITZERO.W+1
  7855 53DA A9 01			lda #$01
  7856 53DC 8D AD A0			sta BLITZERO.H
  7857 53DF 20 EB 3B			jsr BLITZERO
  7858
  7859 				; optimize OK (service.pas), line = 1411
  7860
  7861 53E2 AD 72 A1			lda Y
  7862 53E5 C9 02			cmp #$02
  7863 53E7 B0 03 4C A6 54		jcc l_1089
  7864 53EC AD 17 A0			lda VAUS.HEIGHT
  7865 53EF E9 02			sbc #$02
  7866 53F1 85 A1			sta :STACKORIGIN+11
  7867 53F3 A9 00			lda #$00
  7868 53F5 E9 00			sbc #$00
  7869 53F7 85 B1			sta :STACKORIGIN+STACKWIDTH+11
  7870 53F9 AD 72 A1			lda Y
  7871 53FC C5 A1			cmp :STACKORIGIN+11
  7872 53FE A9 00			lda #$00
  7873 5400 E5 B1			sbc :STACKORIGIN+STACKWIDTH+11
  7874 5402 50 02			svc
  7875 5404 49 80			eor #$80
  7876 5406 30 03 4C A6 54		jpl l_1089
  7877
  7878 				; optimize OK (service.pas), line = 1414
  7879
  7880 540B AC 18 A0			ldy VAUS.FLASH
  7881 540E B9 5E 20			lda adr.FLASH,y
  7882 5411 8D C1 A0			sta PUTBYTE.V
  7883 5414 AD 72 A1			lda Y
  7884 5417 18 6D 0F A0			add VAUS.Y
  7885 541B A8				tay
  7886 541C AD 0E A0			lda VAUS.X
  7887 541F 18 79 00 C0			add adr.ROW,y
  7888 5423 8D BD A0			sta PUTBYTE.DST
  7889 5426 A9 50			lda #$50
  7890 5428 79 00 C1			adc adr.ROW+256,y
  7891 542B 8D BE A0			sta PUTBYTE.DST+1
  7892 542E A9 00			lda #$00
  7893 5430 69 00			adc #$00
  7894 5432 8D BF A0			sta PUTBYTE.DST+2
  7895 5435 A9 00			lda #$00
  7896 5437 69 00			adc #$00
  7897 5439 8D C0 A0			sta PUTBYTE.DST+3
  7898 543C 20 14 3D			jsr PUTBYTE
  7899
  7900 				; optimize OK (service.pas), line = 1417
  7901
  7902 543F AC 18 A0			ldy VAUS.FLASH
  7903 5442 B9 5E 20			lda adr.FLASH,y
  7904 5445 8D C1 A0			sta PUTBYTE.V
  7905 5448 AD 0E A0			lda VAUS.X
  7906 544B 18 6D 16 A0			add VAUS.WIDTH
  7907 544F 85 A0			sta :STACKORIGIN+10
  7908 5451 A9 50			lda #$50
  7909 5453 69 00			adc #$00
  7910 5455 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7911 5457 A9 00			lda #$00
  7912 5459 69 00			adc #$00
  7913 545B 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7914 545D A9 00			lda #$00
  7915 545F 69 00			adc #$00
  7916 5461 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7917 5463 A5 A0			lda :STACKORIGIN+10
  7918 5465 38 E9 01			sub #$01
  7919 5468 85 A0			sta :STACKORIGIN+10
  7920 546A A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7921 546C E9 00			sbc #$00
  7922 546E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  7923 5470 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7924 5472 E9 00			sbc #$00
  7925 5474 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
  7926 5476 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7927 5478 E9 00			sbc #$00
  7928 547A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
  7929 547C AD 72 A1			lda Y
  7930 547F 18 6D 0F A0			add VAUS.Y
  7931 5483 A8				tay
  7932 5484 A5 A0			lda :STACKORIGIN+10
  7933 5486 18 79 00 C0			add adr.ROW,y
  7934 548A 8D BD A0			sta PUTBYTE.DST
  7935 548D A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  7936 548F 79 00 C1			adc adr.ROW+256,y
  7937 5492 8D BE A0			sta PUTBYTE.DST+1
  7938 5495 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
  7939 5497 69 00			adc #$00
  7940 5499 8D BF A0			sta PUTBYTE.DST+2
  7941 549C A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
  7942 549E 69 00			adc #$00
  7943 54A0 8D C0 A0			sta PUTBYTE.DST+3
  7944 54A3 20 14 3D			jsr PUTBYTE
  7945 54A6			l_1089
  7946
  7947 				; optimize OK (service.pas), line = 1420
  7948
  7949 54A6 AD 8D A0			lda HLP
  7950 54A9 18 6D 16 A0			add VAUS.WIDTH
  7951 54AD 8D 8D A0			sta HLP
  7952 54B0 90 03			scc
  7953 54B2 EE 8E A0			inc HLP+1
  7954
  7955 				; --- ForToDoEpilog
  7956 54B5 EE 72 A1			inc Y
  7957 54B8 F0 03 4C 7A 53		jne l_1037
  7958 54BD			l_1045
  7959
  7960 				; ------------------------------------------------------------
  7961
  7962 = A172			Y	= DATAORIGIN+$02E7
  7963
  7964 = A172			@VarData	= Y
  7965 = 0001			@VarDataSize	= 1
  7966
  7967 54BD			@exit
  7968 					.ifdef @new
  7969 					lda <@VarData
  7970 					sta :ztmp
  7971 					lda >@VarData
  7972 					ldy #@VarDataSize-1
  7973 					jmp @FreeMem
  7974 					els
  7975 54BD 60				rts						; ret
  7976 					eif
  7977 				.endl
  7978
  7979 54BE			.local	MOVE_VAUS					; PROCEDURE
  7980
  7981 				; optimize OK (service.pas), line = 1431
  7982
  7983 54BE A0 01			ldy #1
  7984 54C0 AD 11 A0			lda VAUS.OLDX+1
  7985 54C3 C9 FF			cmp #$FF
  7986 54C5 D0 05			bne @+
  7987 54C7 AD 10 A0			lda VAUS.OLDX
  7988 54CA C9 FF			cmp #$FF
  7989 				@
  7990 54CC D0 01			bne @+
  7991 54CE 88				dey
  7992 				@
  7993 54CF 84 9F			sty :STACKORIGIN+9
  7994 54D1 A0 01			ldy #1
  7995 54D3 AD 11 A0			lda VAUS.OLDX+1
  7996 54D6 C9 00			cmp #$00
  7997 54D8 D0 06			bne @+
  7998 54DA AD 10 A0			lda VAUS.OLDX
  7999 54DD CD 0E A0			cmp VAUS.X
  8000 				@
  8001 54E0 D0 01			bne @+
  8002 54E2 88				dey
  8003 				@
  8004 54E3 98				tya
  8005 54E4 25 9F			and :STACKORIGIN+9
  8006 54E6 85 9F			sta :STACKORIGIN+9
  8007 54E8 A0 01			ldy #1
  8008 54EA A9 00			lda #$00
  8009 54EC CD 15 A0			cmp VAUS.OLDLEN+1
  8010 54EF D0 06			bne @+
  8011 54F1 AD 16 A0			lda VAUS.WIDTH
  8012 54F4 CD 14 A0			cmp VAUS.OLDLEN
  8013 				@
  8014 54F7 D0 01			bne @+
  8015 54F9 88				dey
  8016 				@
  8017 54FA 98				tya
  8018 54FB 05 9F			ora :STACKORIGIN+9
  8019 54FD F0 03			jeq l_1105
  8020
  8021 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 1432
  8022
  8023 54FF 20 D3 52			jsr REMOVE_VAUS
  8024 5502			l_1105
  8025
  8026 				; optimize OK (service.pas), line = 1434
  8027
  8028 5502 AD 0E A0			lda VAUS.X
  8029 5505 8D 10 A0			sta VAUS.OLDX
  8030 5508 A9 00			lda #$00
  8031 550A 8D 11 A0			sta VAUS.OLDX+1
  8032
  8033 				; optimize OK (service.pas), line = 1435
  8034
  8035 550D AD 0F A0			lda VAUS.Y
  8036 5510 8D 12 A0			sta VAUS.OLDY
  8037 5513 A9 00			lda #$00
  8038 5515 8D 13 A0			sta VAUS.OLDY+1
  8039
  8040 				; optimize OK (service.pas), line = 1442
  8041
  8042 5518 A9 D8			lda #$D8
  8043 551A 38 ED 16 A0			sub VAUS.WIDTH
  8044 551E 8D D1 A0			sta MIN.B
  8045 5521 A9 00			lda #$00
  8046 5523 E9 00			sbc #$00
  8047 5525 8D D2 A0			sta MIN.B+1
  8048 5528 AD 74 A1			lda X
  8049 552B 8D CF A0			sta MIN.A
  8050 552E AD 75 A1			lda X+1
  8051 5531 8D D0 A0			sta MIN.A+1
  8052 5534 20 91 3D			jsr MIN
  8053 5537 A9 0A			lda #$0A
  8054 5539 8D C9 A0			sta MAX.A
  8055 553C A9 00			lda #$00
  8056 553E 8D CA A0			sta MAX.A+1
  8057 5541 AD D3 A0			lda MIN.RESULT
  8058 5544 8D CB A0			sta MAX.B
  8059 5547 AD D4 A0			lda MIN.RESULT+1
  8060 554A 8D CC A0			sta MAX.B+1
  8061 554D 20 66 3D			jsr MAX
  8062 5550 AD CD A0			lda MAX.RESULT
  8063 5553 8D 0E A0			sta VAUS.X
  8064
  8065 				; optimize OK (service.pas), line = 1443
  8066
  8067 5556 A9 C8			lda #$C8
  8068 5558 38 ED 17 A0			sub VAUS.HEIGHT
  8069 555C 8D D1 A0			sta MIN.B
  8070 555F A9 00			lda #$00
  8071 5561 E9 00			sbc #$00
  8072 5563 8D D2 A0			sta MIN.B+1
  8073 5566 AD 76 A1			lda Y
  8074 5569 8D CF A0			sta MIN.A
  8075 556C AD 77 A1			lda Y+1
  8076 556F 8D D0 A0			sta MIN.A+1
  8077 5572 20 91 3D			jsr MIN
  8078 5575 A9 0C			lda #$0C
  8079 5577 8D C9 A0			sta MAX.A
  8080 557A A9 00			lda #$00
  8081 557C 8D CA A0			sta MAX.A+1
  8082 557F AD D3 A0			lda MIN.RESULT
  8083 5582 8D CB A0			sta MAX.B
  8084 5585 AD D4 A0			lda MIN.RESULT+1
  8085 5588 8D CC A0			sta MAX.B+1
  8086 558B 20 66 3D			jsr MAX
  8087 558E AD CD A0			lda MAX.RESULT
  8088 5591 8D 0F A0			sta VAUS.Y
  8089
  8090 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 1445
  8091
  8092 5594 20 4A 53			jsr PLACE_VAUS
  8093
  8094 				; ------------------------------------------------------------
  8095
  8096 = A174			X	= DATAORIGIN+$02E9
  8097 = A176			Y	= DATAORIGIN+$02EB
  8098
  8099 = A174			@VarData	= X
  8100 = 0004			@VarDataSize	= 4
  8101
  8102 5597			@exit
  8103 					.ifdef @new
  8104 					lda <@VarData
  8105 					sta :ztmp
  8106 					lda >@VarData
  8107 					ldy #@VarDataSize-1
  8108 					jmp @FreeMem
  8109 					els
  8110 5597 60				rts						; ret
  8111 					eif
  8112 				.endl
  8113
  8114 5598			.local	REMOVE_BLOCK					; PROCEDURE
  8115
  8116 				; optimize OK (service.pas), line = 1460
  8117
  8118 5598 AD 78 A1			lda XA
  8119 559B 85 9F			sta :STACKORIGIN+9
  8120 559D A9 00			lda #$00
  8121 559F 06 9F			asl :STACKORIGIN+9
  8122 55A1 2A				rol @
  8123 55A2 06 9F			asl :STACKORIGIN+9
  8124 55A4 2A				rol @
  8125 55A5 06 9F			asl :STACKORIGIN+9
  8126 55A7 2A				rol @
  8127 55A8 06 9F			asl :STACKORIGIN+9
  8128 55AA 2A				rol @
  8129 55AB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8130 55AD A5 9F			lda :STACKORIGIN+9
  8131 55AF 18 69 09			add #$09
  8132 55B2 8D 7D A1			sta XS
  8133 55B5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8134 55B7 69 00			adc #$00
  8135 55B9 8D 7E A1			sta XS+1
  8136
  8137 				; optimize OK (service.pas), line = 1461
  8138
  8139 55BC AD 79 A1			lda YA
  8140 55BF 85 9F			sta :STACKORIGIN+9
  8141 55C1 A9 00			lda #$00
  8142 55C3 06 9F			asl :STACKORIGIN+9
  8143 55C5 2A				rol @
  8144 55C6 06 9F			asl :STACKORIGIN+9
  8145 55C8 2A				rol @
  8146 55C9 06 9F			asl :STACKORIGIN+9
  8147 55CB 2A				rol @
  8148 55CC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8149 55CE A5 9F			lda :STACKORIGIN+9
  8150 55D0 18 69 16			add #$16
  8151 55D3 8D 7F A1			sta YS
  8152 55D6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8153 55D8 69 00			adc #$00
  8154 55DA 8D 80 A1			sta YS+1
  8155
  8156 				; optimize OK (service.pas), line = 1463
  8157
  8158 55DD A9 00			lda #$00
  8159 55DF 8D 7B A1			sta Y
  8160
  8161 55E2			l_115D
  8162 				; --- ForToDoCondition
  8163 55E2 AD 7B A1			lda Y
  8164 55E5 C9 08			cmp #$08
  8165 55E7 90 03 4C 84 57		jcs l_116B
  8166
  8167 				; optimize OK (service.pas), line = 1465
  8168
  8169 55EC AD 7F A1			lda YS
  8170 55EF 6D 7B A1			adc Y
  8171 55F2 A8				tay
  8172 55F3 B9 00 C3			lda adr.MODY,y
  8173 55F6 85 86			sta :eax
  8174 55F8 A9 00			lda #$00
  8175 55FA 85 87			sta :eax+1
  8176 55FC AD 1B A0			lda PATTERN.WIDTH
  8177 55FF 85 8E			sta :ecx
  8178 5601 AD 1C A0			lda PATTERN.WIDTH+1
  8179 5604 85 8F			sta :ecx+1
  8180 					.ifdef fmulinit
  8181 					fmulu_16
  8182 					els
  8183 5606 20 4F 23			imulCX_AL
  8184 					eif
  8185 5609 A5 86			lda :eax
  8186 560B 8D 81 A1			sta YH
  8187 560E A5 87			lda :eax+1
  8188 5610 8D 82 A1			sta YH+1
  8189
  8190 				; optimize OK (service.pas), line = 1473
  8191
  8192 5613 AD 7B A1			lda Y
  8193 5616 18 6D 7F A1			add YS
  8194 561A A8				tay
  8195 561B AD 7D A1			lda XS
  8196 561E 18 79 00 C0			add adr.ROW,y
  8197 5622 8D 8D A0			sta HLP
  8198 5625 AD 7E A1			lda XS+1
  8199 5628 79 00 C1			adc adr.ROW+256,y
  8200 562B 8D 8E A0			sta HLP+1
  8201
  8202 				; optimize OK (service.pas), line = 1475
  8203
  8204 562E A9 00			lda #$00
  8205 5630 8D 7C A1			sta I
  8206
  8207 				; optimize OK (service.pas), line = 1477
  8208
  8209 5633 AD 9A 9F			lda PLAYSCREEN.OFS
  8210 5636 18 6D 8D A0			add HLP
  8211 563A 8D 6A 9F			sta VBXE_RAM.POSITION
  8212 563D AD 9B 9F			lda PLAYSCREEN.OFS+1
  8213 5640 6D 8E A0			adc HLP+1
  8214 5643 8D 6B 9F			sta VBXE_RAM.POSITION+1
  8215 5646 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8216 5649 69 00			adc #$00
  8217 564B 8D 6C 9F			sta VBXE_RAM.POSITION+2
  8218 564E AD 9D 9F			lda PLAYSCREEN.OFS+3
  8219 5651 69 00			adc #$00
  8220 5653 8D 6D 9F			sta VBXE_RAM.POSITION+3
  8221
  8222 				; optimize OK (service.pas), line = 1478
  8223
  8224 5656 AD 68 9E			lda SCANLINE
  8225 5659 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8226 565C AD 69 9E			lda SCANLINE+1
  8227 565F 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8228 5662 A9 10			lda #$10
  8229 5664 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8230 5667 A9 00			lda #$00
  8231 5669 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8232 566C AD 10 9E			lda VBXE_RAM
  8233 566F AC 11 9E			ldy VBXE_RAM+1
  8234 5672 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8235
  8236 				; optimize OK (service.pas), line = 1480
  8237
  8238 5675 AD 1F A0			lda PATTERN.OFS
  8239 5678 18 6D 81 A1			add YH
  8240 567C 8D 6A 9F			sta VBXE_RAM.POSITION
  8241 567F AD 20 A0			lda PATTERN.OFS+1
  8242 5682 6D 82 A1			adc YH+1
  8243 5685 8D 6B 9F			sta VBXE_RAM.POSITION+1
  8244 5688 AD 21 A0			lda PATTERN.OFS+2
  8245 568B 69 00			adc #$00
  8246 568D 8D 6C 9F			sta VBXE_RAM.POSITION+2
  8247 5690 AD 22 A0			lda PATTERN.OFS+3
  8248 5693 69 00			adc #$00
  8249 5695 8D 6D 9F			sta VBXE_RAM.POSITION+3
  8250
  8251 				; optimize OK (service.pas), line = 1481
  8252
  8253 5698 A9 80			lda <adr.SCANLINE+$80
  8254 569A 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8255 569D A9 C5			lda >adr.SCANLINE+$80
  8256 569F 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8257 56A2 A9 28			lda #$28
  8258 56A4 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8259 56A7 A9 00			lda #$00
  8260 56A9 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8261 56AC AD 10 9E			lda VBXE_RAM
  8262 56AF AC 11 9E			ldy VBXE_RAM+1
  8263 56B2 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8264
  8265 				; optimize OK (service.pas), line = 1483
  8266
  8267 56B5 A9 00			lda #$00
  8268 56B7 8D 7A A1			sta X
  8269
  8270 56BA			l_11B6
  8271 				; --- ForToDoCondition
  8272 56BA AD 7A A1			lda X
  8273 56BD C9 10			cmp #$10
  8274 56BF B0 47			jcs l_11C4
  8275
  8276 				; optimize OK (service.pas), line = 1484
  8277
  8278 56C1 6D 7D A1			adc XS
  8279 56C4 85 9F			sta :STACKORIGIN+9
  8280 56C6 A9 00			lda #$00
  8281 56C8 6D 7E A1			adc XS+1
  8282 56CB C9 00			cmp #$00
  8283 56CD D0 04			bne @+
  8284 56CF A5 9F			lda :STACKORIGIN+9
  8285 56D1 C9 D8			cmp #$D8
  8286 				@
  8287 56D3 B0 2E			jcs l_11DB
  8288
  8289 				; optimize OK (service.pas), line = 1491
  8290
  8291 56D5 AC 7A A1			ldy X
  8292 56D8 B9 00 C5			lda adr.SCANLINE,y
  8293 56DB 29 80			and #$80
  8294 56DD 8D 84 A1			sta SHADOW
  8295
  8296 				; optimize OK (service.pas), line = 1496
  8297
  8298 56E0 AD 7A A1			lda X
  8299 56E3 18 6D 7D A1			add XS
  8300 56E7 A8				tay
  8301 56E8 B9 00 C4			lda adr.MODX,y
  8302 56EB 18 69 80			add #$80
  8303 56EE A8				tay
  8304 56EF B9 00 C5			lda adr.SCANLINE,y
  8305 56F2 29 7F			and #$7F
  8306 56F4 0D 84 A1			ora SHADOW
  8307 56F7 8D 83 A1			sta CL
  8308
  8309 				; optimize OK (service.pas), line = 1498
  8310
  8311 56FA AC 7C A1			ldy I
  8312 56FD 99 00 C2			sta adr.TMP,y
  8313
  8314 				; optimize FAIL (0, service.pas), line = 1499
  8315
  8316 5700 EE 7C A1			inc I
  8317 5703			l_11DB
  8318
  8319 				; --- ForToDoEpilog
  8320 5703 EE 7A A1			inc X
  8321 5706 D0 B2			jne l_11B6
  8322 5708			l_11C4
  8323
  8324 				; optimize OK (service.pas), line = 1511
  8325
  8326 5708 AD 8D A0			lda HLP
  8327 570B 8D AE A0			sta BLITTMP.DST
  8328 570E A9 50			lda #$50
  8329 5710 18 6D 8E A0			add HLP+1
  8330 5714 8D AF A0			sta BLITTMP.DST+1
  8331 5717 A9 00			lda #$00
  8332 5719 69 00			adc #$00
  8333 571B 8D B0 A0			sta BLITTMP.DST+2
  8334 571E A9 00			lda #$00
  8335 5720 69 00			adc #$00
  8336 5722 8D B1 A0			sta BLITTMP.DST+3
  8337 5725 AD 7C A1			lda I
  8338 5728 8D B2 A0			sta BLITTMP.SIZE
  8339 572B 20 69 3C			jsr BLITTMP
  8340
  8341 				; optimize OK (service.pas), line = 1513
  8342
  8343 572E AD 9A 9F			lda PLAYSCREEN.OFS
  8344 5731 18 6D 8D A0			add HLP
  8345 5735 8D B7 A0			sta BLITROW.DST
  8346 5738 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8347 573B 6D 8E A0			adc HLP+1
  8348 573E 8D B8 A0			sta BLITROW.DST+1
  8349 5741 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8350 5744 69 00			adc #$00
  8351 5746 8D B9 A0			sta BLITROW.DST+2
  8352 5749 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8353 574C 69 00			adc #$00
  8354 574E 8D BA A0			sta BLITROW.DST+3
  8355 5751 AD 8D A0			lda HLP
  8356 5754 8D B3 A0			sta BLITROW.SRC
  8357 5757 A9 50			lda #$50
  8358 5759 18 6D 8E A0			add HLP+1
  8359 575D 8D B4 A0			sta BLITROW.SRC+1
  8360 5760 A9 00			lda #$00
  8361 5762 69 00			adc #$00
  8362 5764 8D B5 A0			sta BLITROW.SRC+2
  8363 5767 A9 00			lda #$00
  8364 5769 69 00			adc #$00
  8365 576B 8D B6 A0			sta BLITROW.SRC+3
  8366 576E AD 7C A1			lda I
  8367 5771 8D BB A0			sta BLITROW.SIZE
  8368 5774 A9 00			lda #$00
  8369 5776 8D BC A0			sta BLITROW.SIZE+1
  8370 5779 20 A2 3C			jsr BLITROW
  8371
  8372 				; --- ForToDoEpilog
  8373 577C EE 7B A1			inc Y
  8374 577F F0 03 4C E2 55		jne l_115D
  8375 5784			l_116B
  8376
  8377 				; optimize OK (service.pas), line = 1523
  8378
  8379 5784 AD 7F A1			lda YS
  8380 5787 18 69 04			add #$04
  8381 578A 8D 7B A1			sta Y
  8382 578D AD 7F A1			lda YS
  8383 5790 18 69 0C			add #$0C
  8384 5793 8D 97 57			sta @FORTMP_124B_0
  8385
  8386 5796			l_124E
  8387 				; --- ForToDoCondition
  8388 5796 A9 00			lda @FORTMP_124B_0::#$00
  8389 5798 CD 7B A1			cmp Y
  8390 579B B0 03 4C AF 58		jcc l_125C
  8391
  8392 				; optimize OK (service.pas), line = 1525
  8393
  8394 57A0 AC 7B A1			ldy Y
  8395 57A3 B9 00 C0			lda adr.ROW,y
  8396 57A6 18 6D 7D A1			add XS
  8397 57AA 8D 8D A0			sta HLP
  8398 57AD B9 00 C1			lda adr.ROW+256,y
  8399 57B0 6D 7E A1			adc XS+1
  8400 57B3 8D 8E A0			sta HLP+1
  8401
  8402 				; optimize OK (service.pas), line = 1527
  8403
  8404 57B6 AD 9A 9F			lda PLAYSCREEN.OFS
  8405 57B9 18 6D 8D A0			add HLP
  8406 57BD 8D 6A 9F			sta VBXE_RAM.POSITION
  8407 57C0 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8408 57C3 6D 8E A0			adc HLP+1
  8409 57C6 8D 6B 9F			sta VBXE_RAM.POSITION+1
  8410 57C9 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8411 57CC 69 00			adc #$00
  8412 57CE 8D 6C 9F			sta VBXE_RAM.POSITION+2
  8413 57D1 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8414 57D4 69 00			adc #$00
  8415 57D6 8D 6D 9F			sta VBXE_RAM.POSITION+3
  8416
  8417 				; optimize OK (service.pas), line = 1528
  8418
  8419 57D9 AD 62 9E			lda TMP
  8420 57DC 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8421 57DF AD 63 9E			lda TMP+1
  8422 57E2 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8423 57E5 A9 20			lda #$20
  8424 57E7 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8425 57EA A9 00			lda #$00
  8426 57EC 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8427 57EF AD 10 9E			lda VBXE_RAM
  8428 57F2 AC 11 9E			ldy VBXE_RAM+1
  8429 57F5 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8430
  8431 				; optimize OK (service.pas), line = 1530
  8432
  8433 57F8 AD 7D A1			lda XS
  8434 57FB 18 69 08			add #$08
  8435 57FE 8D 7A A1			sta X
  8436 5801 AD 7D A1			lda XS
  8437 5804 18 69 18			add #$18
  8438 5807 8D 0B 58			sta @FORTMP_1286_0
  8439
  8440 580A			l_1289
  8441 				; --- ForToDoCondition
  8442 580A A9 00			lda @FORTMP_1286_0::#$00
  8443 580C CD 7A A1			cmp X
  8444 580F 90 24			jcc l_1297
  8445
  8446 				; optimize OK (service.pas), line = 1546
  8447
  8448 5811 AD 7A A1			lda X
  8449 5814 C9 D8			cmp #$D8
  8450 5816 B0 18			jcs l_12A9
  8451
  8452 				; optimize OK (service.pas), line = 1551
  8453
  8454 5818 38 ED 7D A1			sub XS
  8455 581C 85 9F			sta :STACKORIGIN+9
  8456 581E AD 7A A1			lda X
  8457 5821 38 ED 7D A1			sub XS
  8458 5825 A8				tay
  8459 5826 B9 00 C2			lda adr.TMP,y
  8460 5829 09 80			ora #$80
  8461 582B A4 9F			ldy :STACKORIGIN+9
  8462 582D 99 00 C2			sta adr.TMP,y
  8463 5830			l_12A9
  8464
  8465 				; --- ForToDoEpilog
  8466 5830 EE 7A A1			inc X
  8467 5833 D0 D5			jne l_1289
  8468 5835			l_1297
  8469
  8470 				; optimize OK (service.pas), line = 1568
  8471
  8472 5835 AD 8D A0			lda HLP
  8473 5838 8D AE A0			sta BLITTMP.DST
  8474 583B A9 50			lda #$50
  8475 583D 18 6D 8E A0			add HLP+1
  8476 5841 8D AF A0			sta BLITTMP.DST+1
  8477 5844 A9 00			lda #$00
  8478 5846 69 00			adc #$00
  8479 5848 8D B0 A0			sta BLITTMP.DST+2
  8480 584B A9 00			lda #$00
  8481 584D 69 00			adc #$00
  8482 584F 8D B1 A0			sta BLITTMP.DST+3
  8483 5852 A9 20			lda #$20
  8484 5854 8D B2 A0			sta BLITTMP.SIZE
  8485 5857 20 69 3C			jsr BLITTMP
  8486
  8487 				; optimize OK (service.pas), line = 1570
  8488
  8489 585A AD 9A 9F			lda PLAYSCREEN.OFS
  8490 585D 18 6D 8D A0			add HLP
  8491 5861 8D B7 A0			sta BLITROW.DST
  8492 5864 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8493 5867 6D 8E A0			adc HLP+1
  8494 586A 8D B8 A0			sta BLITROW.DST+1
  8495 586D AD 9C 9F			lda PLAYSCREEN.OFS+2
  8496 5870 69 00			adc #$00
  8497 5872 8D B9 A0			sta BLITROW.DST+2
  8498 5875 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8499 5878 69 00			adc #$00
  8500 587A 8D BA A0			sta BLITROW.DST+3
  8501 587D AD 8D A0			lda HLP
  8502 5880 8D B3 A0			sta BLITROW.SRC
  8503 5883 A9 50			lda #$50
  8504 5885 18 6D 8E A0			add HLP+1
  8505 5889 8D B4 A0			sta BLITROW.SRC+1
  8506 588C A9 00			lda #$00
  8507 588E 69 00			adc #$00
  8508 5890 8D B5 A0			sta BLITROW.SRC+2
  8509 5893 A9 00			lda #$00
  8510 5895 69 00			adc #$00
  8511 5897 8D B6 A0			sta BLITROW.SRC+3
  8512 589A A9 20			lda #$20
  8513 589C 8D BB A0			sta BLITROW.SIZE
  8514 589F A9 00			lda #$00
  8515 58A1 8D BC A0			sta BLITROW.SIZE+1
  8516 58A4 20 A2 3C			jsr BLITROW
  8517
  8518 				; --- ForToDoEpilog
  8519 58A7 EE 7B A1			inc Y
  8520 58AA F0 03 4C 96 57		jne l_124E
  8521 58AF			l_125C
  8522
  8523 				; ------------------------------------------------------------
  8524
  8525 = A178			XA	= DATAORIGIN+$02ED
  8526 = A179			YA	= DATAORIGIN+$02EE
  8527 = A17A			X	= DATAORIGIN+$02EF
  8528 = A17B			Y	= DATAORIGIN+$02F0
  8529 = A17C			I	= DATAORIGIN+$02F1
  8530 = A17D			XS	= DATAORIGIN+$02F2
  8531 = A17F			YS	= DATAORIGIN+$02F4
  8532 = A181			YH	= DATAORIGIN+$02F6
  8533 = A183			CL	= DATAORIGIN+$02F8
  8534 = A184			SHADOW	= DATAORIGIN+$02F9
  8535
  8536 = A178			@VarData	= XA
  8537 = 000D			@VarDataSize	= 13
  8538
  8539 58AF			@exit
  8540 					.ifdef @new
  8541 					lda <@VarData
  8542 					sta :ztmp
  8543 					lda >@VarData
  8544 					ldy #@VarDataSize-1
  8545 					jmp @FreeMem
  8546 					els
  8547 58AF 60				rts						; ret
  8548 					eif
  8549 				.endl
  8550
  8551 58B0			.local	PLACE_BLOCK					; PROCEDURE
  8552
  8553 				; optimize OK (service.pas), line = 1587
  8554
  8555 58B0 AD 87 A1			lda XA
  8556 58B3 85 9F			sta :STACKORIGIN+9
  8557 58B5 A9 00			lda #$00
  8558 58B7 06 9F			asl :STACKORIGIN+9
  8559 58B9 2A				rol @
  8560 58BA 06 9F			asl :STACKORIGIN+9
  8561 58BC 2A				rol @
  8562 58BD 06 9F			asl :STACKORIGIN+9
  8563 58BF 2A				rol @
  8564 58C0 06 9F			asl :STACKORIGIN+9
  8565 58C2 2A				rol @
  8566 58C3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8567 58C5 A5 9F			lda :STACKORIGIN+9
  8568 58C7 18 69 09			add #$09
  8569 58CA 8D 8D A1			sta XS
  8570 58CD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8571 58CF 69 00			adc #$00
  8572 58D1 8D 8E A1			sta XS+1
  8573
  8574 				; optimize OK (service.pas), line = 1588
  8575
  8576 58D4 AD 88 A1			lda YA
  8577 58D7 85 9F			sta :STACKORIGIN+9
  8578 58D9 A9 00			lda #$00
  8579 58DB 06 9F			asl :STACKORIGIN+9
  8580 58DD 2A				rol @
  8581 58DE 06 9F			asl :STACKORIGIN+9
  8582 58E0 2A				rol @
  8583 58E1 06 9F			asl :STACKORIGIN+9
  8584 58E3 2A				rol @
  8585 58E4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  8586 58E6 A5 9F			lda :STACKORIGIN+9
  8587 58E8 18 69 16			add #$16
  8588 58EB 8D 8F A1			sta YS
  8589 58EE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  8590 58F0 69 00			adc #$00
  8591 58F2 8D 90 A1			sta YS+1
  8592
  8593 				; optimize OK (service.pas), line = 1590
  8594
  8595 58F5 A9 00			lda #$00
  8596 58F7 8D 8B A1			sta Y
  8597
  8598 58FA			l_130F
  8599 				; --- ForToDoCondition
  8600 58FA AD 8B A1			lda Y
  8601 58FD C9 08			cmp #$08
  8602 58FF 90 03 4C 2C 5A		jcs l_131D
  8603
  8604 				; optimize OK (service.pas), line = 1592
  8605
  8606 5904 AD 8F A1			lda YS
  8607 5907 6D 8B A1			adc Y
  8608 590A A8				tay
  8609 590B AD 8D A1			lda XS
  8610 590E 18 79 00 C0			add adr.ROW,y
  8611 5912 8D 8D A0			sta HLP
  8612 5915 AD 8E A1			lda XS+1
  8613 5918 79 00 C1			adc adr.ROW+256,y
  8614 591B 8D 8E A0			sta HLP+1
  8615
  8616 				; optimize OK (service.pas), line = 1594
  8617
  8618 591E AD 9A 9F			lda PLAYSCREEN.OFS
  8619 5921 18 6D 8D A0			add HLP
  8620 5925 8D 6A 9F			sta VBXE_RAM.POSITION
  8621 5928 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8622 592B 6D 8E A0			adc HLP+1
  8623 592E 8D 6B 9F			sta VBXE_RAM.POSITION+1
  8624 5931 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8625 5934 69 00			adc #$00
  8626 5936 8D 6C 9F			sta VBXE_RAM.POSITION+2
  8627 5939 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8628 593C 69 00			adc #$00
  8629 593E 8D 6D 9F			sta VBXE_RAM.POSITION+3
  8630
  8631 				; optimize OK (service.pas), line = 1595
  8632
  8633 5941 AD 68 9E			lda SCANLINE
  8634 5944 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8635 5947 AD 69 9E			lda SCANLINE+1
  8636 594A 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8637 594D A9 10			lda #$10
  8638 594F 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8639 5952 A9 00			lda #$00
  8640 5954 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8641 5957 AD 10 9E			lda VBXE_RAM
  8642 595A AC 11 9E			ldy VBXE_RAM+1
  8643 595D 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8644
  8645 				; optimize OK (service.pas), line = 1597
  8646
  8647 5960 A9 00			lda #$00
  8648 5962 8D 8A A1			sta X
  8649
  8650 5965			l_1345
  8651 				; --- ForToDoCondition
  8652 5965 AC 8A A1			ldy X
  8653 5968 C0 10			cpy #$10
  8654 596A B0 46			jcs l_1353
  8655
  8656 				; optimize OK (service.pas), line = 1603
  8657
  8658 596C B9 00 C5			lda adr.SCANLINE,y
  8659 596F 29 80			and #$80
  8660 5971 8D 93 A1			sta SHADOW
  8661
  8662 				; optimize OK (service.pas), line = 1605
  8663
  8664 5974 AD 8B A1			lda Y
  8665 5977 C9 07			cmp #$07
  8666 5979 B0 29			jcs l_137E
  8667 597B AD 8A A1			lda X
  8668 597E C9 0F			cmp #$0F
  8669 5980 B0 22			jcs l_137E
  8670
  8671 				; optimize OK (service.pas), line = 1610
  8672
  8673 5982 AD 89 A1			lda BLOCK
  8674 5985 38 E9 01			sub #$01
  8675 5988 85 9F			sta :STACKORIGIN+9
  8676 598A A9 00			lda #$00
  8677 598C E9 00			sbc #$00
  8678 598E A5 9F			lda :STACKORIGIN+9
  8679 5990 29 0F			and #$0F
  8680 5992 A8				tay
  8681 5993 B9 88 20			lda adr.COLORBLOCK,y
  8682 5996 29 7F			and #$7F
  8683 5998 0D 93 A1			ora SHADOW
  8684 599B 8D 91 A1			sta CL
  8685
  8686 				; optimize OK (service.pas), line = 1612
  8687
  8688 599E AC 8A A1			ldy X
  8689 59A1 4C AA 59			jmp l_13AC
  8690 59A4			l_137E
  8691
  8692 				; optimize OK (service.pas), line = 1625
  8693
  8694 59A4 AC 8A A1			ldy X
  8695 59A7 AD 93 A1			lda SHADOW
  8696 59AA			l_13AC
  8697 59AA 99 00 C2			sta adr.TMP,y
  8698
  8699 				; --- ForToDoEpilog
  8700 59AD EE 8A A1			inc X
  8701 59B0 D0 B3			jne l_1345
  8702 59B2			l_1353
  8703
  8704 				; optimize OK (service.pas), line = 1636
  8705
  8706 59B2 AD 8D A0			lda HLP
  8707 59B5 8D AE A0			sta BLITTMP.DST
  8708 59B8 A9 50			lda #$50
  8709 59BA 18 6D 8E A0			add HLP+1
  8710 59BE 8D AF A0			sta BLITTMP.DST+1
  8711 59C1 A9 00			lda #$00
  8712 59C3 69 00			adc #$00
  8713 59C5 8D B0 A0			sta BLITTMP.DST+2
  8714 59C8 A9 00			lda #$00
  8715 59CA 69 00			adc #$00
  8716 59CC 8D B1 A0			sta BLITTMP.DST+3
  8717 59CF A9 10			lda #$10
  8718 59D1 8D B2 A0			sta BLITTMP.SIZE
  8719 59D4 20 69 3C			jsr BLITTMP
  8720
  8721 				; optimize OK (service.pas), line = 1638
  8722
  8723 59D7 AD 9A 9F			lda PLAYSCREEN.OFS
  8724 59DA 18 6D 8D A0			add HLP
  8725 59DE 8D B7 A0			sta BLITROW.DST
  8726 59E1 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8727 59E4 6D 8E A0			adc HLP+1
  8728 59E7 8D B8 A0			sta BLITROW.DST+1
  8729 59EA AD 9C 9F			lda PLAYSCREEN.OFS+2
  8730 59ED 69 00			adc #$00
  8731 59EF 8D B9 A0			sta BLITROW.DST+2
  8732 59F2 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8733 59F5 69 00			adc #$00
  8734 59F7 8D BA A0			sta BLITROW.DST+3
  8735 59FA AD 8D A0			lda HLP
  8736 59FD 8D B3 A0			sta BLITROW.SRC
  8737 5A00 A9 50			lda #$50
  8738 5A02 18 6D 8E A0			add HLP+1
  8739 5A06 8D B4 A0			sta BLITROW.SRC+1
  8740 5A09 A9 00			lda #$00
  8741 5A0B 69 00			adc #$00
  8742 5A0D 8D B5 A0			sta BLITROW.SRC+2
  8743 5A10 A9 00			lda #$00
  8744 5A12 69 00			adc #$00
  8745 5A14 8D B6 A0			sta BLITROW.SRC+3
  8746 5A17 A9 10			lda #$10
  8747 5A19 8D BB A0			sta BLITROW.SIZE
  8748 5A1C A9 00			lda #$00
  8749 5A1E 8D BC A0			sta BLITROW.SIZE+1
  8750 5A21 20 A2 3C			jsr BLITROW
  8751
  8752 				; --- ForToDoEpilog
  8753 5A24 EE 8B A1			inc Y
  8754 5A27 F0 03 4C FA 58		jne l_130F
  8755 5A2C			l_131D
  8756
  8757 				; optimize OK (service.pas), line = 1644
  8758
  8759 5A2C AD 8F A1			lda YS
  8760 5A2F 18 69 04			add #$04
  8761 5A32 8D 8B A1			sta Y
  8762 5A35 AD 8F A1			lda YS
  8763 5A38 18 69 0C			add #$0C
  8764 5A3B 8D 3F 5A			sta @FORTMP_13E5_0
  8765
  8766 5A3E			l_13E8
  8767 				; --- ForToDoCondition
  8768 5A3E A9 00			lda @FORTMP_13E5_0::#$00
  8769 5A40 CD 8B A1			cmp Y
  8770 5A43 B0 03 4C 57 5B		jcc l_13F6
  8771
  8772 				; optimize OK (service.pas), line = 1648
  8773
  8774 5A48 AC 8B A1			ldy Y
  8775 5A4B B9 00 C0			lda adr.ROW,y
  8776 5A4E 18 6D 8D A1			add XS
  8777 5A52 8D 8D A0			sta HLP
  8778 5A55 B9 00 C1			lda adr.ROW+256,y
  8779 5A58 6D 8E A1			adc XS+1
  8780 5A5B 8D 8E A0			sta HLP+1
  8781
  8782 				; optimize OK (service.pas), line = 1650
  8783
  8784 5A5E AD 9A 9F			lda PLAYSCREEN.OFS
  8785 5A61 18 6D 8D A0			add HLP
  8786 5A65 8D 6A 9F			sta VBXE_RAM.POSITION
  8787 5A68 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8788 5A6B 6D 8E A0			adc HLP+1
  8789 5A6E 8D 6B 9F			sta VBXE_RAM.POSITION+1
  8790 5A71 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8791 5A74 69 00			adc #$00
  8792 5A76 8D 6C 9F			sta VBXE_RAM.POSITION+2
  8793 5A79 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8794 5A7C 69 00			adc #$00
  8795 5A7E 8D 6D 9F			sta VBXE_RAM.POSITION+3
  8796
  8797 				; optimize OK (service.pas), line = 1651
  8798
  8799 5A81 AD 62 9E			lda TMP
  8800 5A84 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  8801 5A87 AD 63 9E			lda TMP+1
  8802 5A8A 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  8803 5A8D A9 20			lda #$20
  8804 5A8F 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  8805 5A92 A9 00			lda #$00
  8806 5A94 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  8807 5A97 AD 10 9E			lda VBXE_RAM
  8808 5A9A AC 11 9E			ldy VBXE_RAM+1
  8809 5A9D 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  8810
  8811 				; optimize OK (service.pas), line = 1653
  8812
  8813 5AA0 AD 8D A1			lda XS
  8814 5AA3 18 69 08			add #$08
  8815 5AA6 8D 8A A1			sta X
  8816 5AA9 AD 8D A1			lda XS
  8817 5AAC 18 69 18			add #$18
  8818 5AAF 8D B3 5A			sta @FORTMP_1420_0
  8819
  8820 5AB2			l_1423
  8821 				; --- ForToDoCondition
  8822 5AB2 A9 00			lda @FORTMP_1420_0::#$00
  8823 5AB4 CD 8A A1			cmp X
  8824 5AB7 90 24			jcc l_1431
  8825
  8826 				; optimize OK (service.pas), line = 1654
  8827
  8828 5AB9 AD 8A A1			lda X
  8829 5ABC C9 D8			cmp #$D8
  8830 5ABE B0 18			jcs l_1443
  8831
  8832 				; optimize OK (service.pas), line = 1663
  8833
  8834 5AC0 38 ED 8D A1			sub XS
  8835 5AC4 85 9F			sta :STACKORIGIN+9
  8836 5AC6 AD 8A A1			lda X
  8837 5AC9 38 ED 8D A1			sub XS
  8838 5ACD A8				tay
  8839 5ACE B9 00 C2			lda adr.TMP,y
  8840 5AD1 29 7F			and #$7F
  8841 5AD3 A4 9F			ldy :STACKORIGIN+9
  8842 5AD5 99 00 C2			sta adr.TMP,y
  8843 5AD8			l_1443
  8844
  8845 				; --- ForToDoEpilog
  8846 5AD8 EE 8A A1			inc X
  8847 5ADB D0 D5			jne l_1423
  8848 5ADD			l_1431
  8849
  8850 				; optimize OK (service.pas), line = 1679
  8851
  8852 5ADD AD 8D A0			lda HLP
  8853 5AE0 8D AE A0			sta BLITTMP.DST
  8854 5AE3 A9 50			lda #$50
  8855 5AE5 18 6D 8E A0			add HLP+1
  8856 5AE9 8D AF A0			sta BLITTMP.DST+1
  8857 5AEC A9 00			lda #$00
  8858 5AEE 69 00			adc #$00
  8859 5AF0 8D B0 A0			sta BLITTMP.DST+2
  8860 5AF3 A9 00			lda #$00
  8861 5AF5 69 00			adc #$00
  8862 5AF7 8D B1 A0			sta BLITTMP.DST+3
  8863 5AFA A9 20			lda #$20
  8864 5AFC 8D B2 A0			sta BLITTMP.SIZE
  8865 5AFF 20 69 3C			jsr BLITTMP
  8866
  8867 				; optimize OK (service.pas), line = 1681
  8868
  8869 5B02 AD 9A 9F			lda PLAYSCREEN.OFS
  8870 5B05 18 6D 8D A0			add HLP
  8871 5B09 8D B7 A0			sta BLITROW.DST
  8872 5B0C AD 9B 9F			lda PLAYSCREEN.OFS+1
  8873 5B0F 6D 8E A0			adc HLP+1
  8874 5B12 8D B8 A0			sta BLITROW.DST+1
  8875 5B15 AD 9C 9F			lda PLAYSCREEN.OFS+2
  8876 5B18 69 00			adc #$00
  8877 5B1A 8D B9 A0			sta BLITROW.DST+2
  8878 5B1D AD 9D 9F			lda PLAYSCREEN.OFS+3
  8879 5B20 69 00			adc #$00
  8880 5B22 8D BA A0			sta BLITROW.DST+3
  8881 5B25 AD 8D A0			lda HLP
  8882 5B28 8D B3 A0			sta BLITROW.SRC
  8883 5B2B A9 50			lda #$50
  8884 5B2D 18 6D 8E A0			add HLP+1
  8885 5B31 8D B4 A0			sta BLITROW.SRC+1
  8886 5B34 A9 00			lda #$00
  8887 5B36 69 00			adc #$00
  8888 5B38 8D B5 A0			sta BLITROW.SRC+2
  8889 5B3B A9 00			lda #$00
  8890 5B3D 69 00			adc #$00
  8891 5B3F 8D B6 A0			sta BLITROW.SRC+3
  8892 5B42 A9 20			lda #$20
  8893 5B44 8D BB A0			sta BLITROW.SIZE
  8894 5B47 A9 00			lda #$00
  8895 5B49 8D BC A0			sta BLITROW.SIZE+1
  8896 5B4C 20 A2 3C			jsr BLITROW
  8897
  8898 				; --- ForToDoEpilog
  8899 5B4F EE 8B A1			inc Y
  8900 5B52 F0 03 4C 3E 5A		jne l_13E8
  8901 5B57			l_13F6
  8902
  8903 				; optimize OK (service.pas), line = 1686
  8904
  8905 5B57 AD 89 A1			lda BLOCK
  8906 5B5A C9 09			cmp #$09
  8907 5B5C B0 03 4C 37 5D		jcc l_1492
  8908
  8909 				; optimize OK (service.pas), line = 1688
  8910
  8911 5B61 A9 00			lda #$00
  8912 5B63 8D 92 A1			sta CL2
  8913
  8914 				; optimize OK (service.pas), line = 1689
  8915
  8916 5B66 AD 89 A1			lda BLOCK
  8917 5B69 29 0F			and #$0F
  8918 5B6B C9 09			cmp #$09
  8919 5B6D D0 19			jne l_14AD
  8920
  8921 				; optimize OK (service.pas), line = 1691
  8922
  8923 5B6F A9 CA			lda #$CA
  8924 5B71 8D 92 A1			sta CL2
  8925
  8926 				; optimize OK (service.pas), line = 1692
  8927
  8928 5B74 AD 88 A1			lda YA
  8929 5B77 0A				asl @
  8930 5B78 0A				asl @
  8931 5B79 0A				asl @
  8932 5B7A 0A				asl @
  8933 5B7B 18 6D 87 A1			add XA
  8934 5B7F A8				tay
  8935 5B80 A9 19			lda #$19
  8936 5B82 99 00 DB			sta adr.WALL,y
  8937 5B85 4C 94 5B			jmp l_14CC
  8938 5B88			l_14AD
  8939
  8940 				; optimize OK (service.pas), line = 1698
  8941
  8942 5B88 AD 89 A1			lda BLOCK
  8943 5B8B C9 0A			cmp #$0A
  8944 5B8D D0 05			jne l_14DE
  8945 5B8F A9 C9			lda #$C9
  8946 5B91 8D 92 A1			sta CL2
  8947 5B94			l_14CC
  8948 5B94			l_14DE
  8949
  8950 				; optimize OK (service.pas), line = 1702
  8951
  8952 5B94 A9 00			lda #$00
  8953 5B96 8D 8B A1			sta Y
  8954
  8955 5B99			l_14EE
  8956 				; --- ForToDoCondition
  8957 5B99 AD 8B A1			lda Y
  8958 5B9C C9 07			cmp #$07
  8959 5B9E 90 03 4C 4D 5C		jcs l_14FC
  8960
  8961 				; optimize OK (service.pas), line = 1705
  8962
  8963 5BA3 6D 8F A1			adc YS
  8964 5BA6 A8				tay
  8965 5BA7 AD 8D A1			lda XS
  8966 5BAA 18 79 00 C0			add adr.ROW,y
  8967 5BAE 8D 8D A0			sta HLP
  8968 5BB1 AD 8E A1			lda XS+1
  8969 5BB4 79 00 C1			adc adr.ROW+256,y
  8970 5BB7 8D 8E A0			sta HLP+1
  8971
  8972 				; optimize OK (service.pas), line = 1710
  8973
  8974 5BBA AD 9A 9F			lda PLAYSCREEN.OFS
  8975 5BBD 18 6D 8D A0			add HLP
  8976 5BC1 8D C2 A0			sta GETBYTE.SRC
  8977 5BC4 AD 9B 9F			lda PLAYSCREEN.OFS+1
  8978 5BC7 6D 8E A0			adc HLP+1
  8979 5BCA 8D C3 A0			sta GETBYTE.SRC+1
  8980 5BCD AD 9C 9F			lda PLAYSCREEN.OFS+2
  8981 5BD0 69 00			adc #$00
  8982 5BD2 8D C4 A0			sta GETBYTE.SRC+2
  8983 5BD5 AD 9D 9F			lda PLAYSCREEN.OFS+3
  8984 5BD8 69 00			adc #$00
  8985 5BDA 8D C5 A0			sta GETBYTE.SRC+3
  8986 5BDD 20 3C 3D			jsr GETBYTE
  8987 5BE0 AD C6 A0			lda GETBYTE.RESULT
  8988 5BE3 29 80			and #$80
  8989 5BE5 8D 91 A1			sta CL
  8990
  8991 				; optimize OK (service.pas), line = 1712
  8992
  8993 5BE8 AD 92 A1			lda CL2
  8994 5BEB 29 7F			and #$7F
  8995 5BED 0D 91 A1			ora CL
  8996 5BF0 8D 92 A1			sta CL2
  8997
  8998 				; optimize OK (service.pas), line = 1716
  8999
  9000 5BF3 AD 8D A0			lda HLP
  9001 5BF6 8D BD A0			sta PUTBYTE.DST
  9002 5BF9 A9 50			lda #$50
  9003 5BFB 18 6D 8E A0			add HLP+1
  9004 5BFF 8D BE A0			sta PUTBYTE.DST+1
  9005 5C02 A9 00			lda #$00
  9006 5C04 69 00			adc #$00
  9007 5C06 8D BF A0			sta PUTBYTE.DST+2
  9008 5C09 A9 00			lda #$00
  9009 5C0B 69 00			adc #$00
  9010 5C0D 8D C0 A0			sta PUTBYTE.DST+3
  9011 5C10 AD 92 A1			lda CL2
  9012 5C13 8D C1 A0			sta PUTBYTE.V
  9013 5C16 20 14 3D			jsr PUTBYTE
  9014
  9015 				; optimize OK (service.pas), line = 1720
  9016
  9017 5C19 AD 9A 9F			lda PLAYSCREEN.OFS
  9018 5C1C 18 6D 8D A0			add HLP
  9019 5C20 8D BD A0			sta PUTBYTE.DST
  9020 5C23 AD 9B 9F			lda PLAYSCREEN.OFS+1
  9021 5C26 6D 8E A0			adc HLP+1
  9022 5C29 8D BE A0			sta PUTBYTE.DST+1
  9023 5C2C AD 9C 9F			lda PLAYSCREEN.OFS+2
  9024 5C2F 69 00			adc #$00
  9025 5C31 8D BF A0			sta PUTBYTE.DST+2
  9026 5C34 AD 9D 9F			lda PLAYSCREEN.OFS+3
  9027 5C37 69 00			adc #$00
  9028 5C39 8D C0 A0			sta PUTBYTE.DST+3
  9029 5C3C AD 92 A1			lda CL2
  9030 5C3F 8D C1 A0			sta PUTBYTE.V
  9031 5C42 20 14 3D			jsr PUTBYTE
  9032
  9033 				; --- ForToDoEpilog
  9034 5C45 EE 8B A1			inc Y
  9035 5C48 F0 03 4C 99 5B		jne l_14EE
  9036 5C4D			l_14FC
  9037
  9038 				; optimize OK (service.pas), line = 1723
  9039
  9040 5C4D AC 8F A1			ldy YS
  9041 5C50 AD 8D A1			lda XS
  9042 5C53 18 79 00 C0			add adr.ROW,y
  9043 5C57 8D 8D A0			sta HLP
  9044 5C5A AD 8E A1			lda XS+1
  9045 5C5D 79 00 C1			adc adr.ROW+256,y
  9046 5C60 8D 8E A0			sta HLP+1
  9047
  9048 				; optimize OK (service.pas), line = 1725
  9049
  9050 5C63 AD 9A 9F			lda PLAYSCREEN.OFS
  9051 5C66 18 6D 8D A0			add HLP
  9052 5C6A 8D 6A 9F			sta VBXE_RAM.POSITION
  9053 5C6D AD 9B 9F			lda PLAYSCREEN.OFS+1
  9054 5C70 6D 8E A0			adc HLP+1
  9055 5C73 8D 6B 9F			sta VBXE_RAM.POSITION+1
  9056 5C76 AD 9C 9F			lda PLAYSCREEN.OFS+2
  9057 5C79 69 00			adc #$00
  9058 5C7B 8D 6C 9F			sta VBXE_RAM.POSITION+2
  9059 5C7E AD 9D 9F			lda PLAYSCREEN.OFS+3
  9060 5C81 69 00			adc #$00
  9061 5C83 8D 6D 9F			sta VBXE_RAM.POSITION+3
  9062
  9063 				; optimize OK (service.pas), line = 1726
  9064
  9065 5C86 AD 68 9E			lda SCANLINE
  9066 5C89 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
  9067 5C8C AD 69 9E			lda SCANLINE+1
  9068 5C8F 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
  9069 5C92 A9 0F			lda #$0F
  9070 5C94 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
  9071 5C97 A9 00			lda #$00
  9072 5C99 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
  9073 5C9C AD 10 9E			lda VBXE_RAM
  9074 5C9F AC 11 9E			ldy VBXE_RAM+1
  9075 5CA2 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
  9076
  9077 				; optimize OK (service.pas), line = 1729
  9078
  9079 5CA5 A9 00			lda #$00
  9080 5CA7 A8				tay
  9081
  9082 5CA8			l_1567
  9083 				; --- ForToDoCondition
  9084 5CA8 C0 0F			cpy #$0F
  9085 5CAA B0 16			jcs l_1575
  9086
  9087 				; optimize OK (service.pas), line = 1735
  9088
  9089 5CAC B9 00 C5			lda adr.SCANLINE,y
  9090 5CAF 29 80			and #$80
  9091 5CB1 8D 91 A1			sta CL
  9092
  9093 				; optimize OK (service.pas), line = 1737
  9094
  9095 5CB4 AD 92 A1			lda CL2
  9096 5CB7 29 7F			and #$7F
  9097 5CB9 0D 91 A1			ora CL
  9098 5CBC 99 00 C2			sta adr.TMP,y
  9099
  9100 				; --- ForToDoEpilog
  9101 5CBF C8				iny
  9102 5CC0 D0 E6			jne l_1567
  9103 5CC2			l_1575
  9104 5CC2 8C 8A A1			sty X
  9105
  9106 				; optimize OK (service.pas), line = 1746
  9107
  9108 5CC5 AD 8D A0			lda HLP
  9109 5CC8 8D AE A0			sta BLITTMP.DST
  9110 5CCB A9 50			lda #$50
  9111 5CCD 18 6D 8E A0			add HLP+1
  9112 5CD1 8D AF A0			sta BLITTMP.DST+1
  9113 5CD4 A9 00			lda #$00
  9114 5CD6 69 00			adc #$00
  9115 5CD8 8D B0 A0			sta BLITTMP.DST+2
  9116 5CDB A9 00			lda #$00
  9117 5CDD 69 00			adc #$00
  9118 5CDF 8D B1 A0			sta BLITTMP.DST+3
  9119 5CE2 A9 0F			lda #$0F
  9120 5CE4 8D B2 A0			sta BLITTMP.SIZE
  9121 5CE7 20 69 3C			jsr BLITTMP
  9122
  9123 				; optimize OK (service.pas), line = 1748
  9124
  9125 5CEA AD 9A 9F			lda PLAYSCREEN.OFS
  9126 5CED 18 6D 8D A0			add HLP
  9127 5CF1 8D B7 A0			sta BLITROW.DST
  9128 5CF4 AD 9B 9F			lda PLAYSCREEN.OFS+1
  9129 5CF7 6D 8E A0			adc HLP+1
  9130 5CFA 8D B8 A0			sta BLITROW.DST+1
  9131 5CFD AD 9C 9F			lda PLAYSCREEN.OFS+2
  9132 5D00 69 00			adc #$00
  9133 5D02 8D B9 A0			sta BLITROW.DST+2
  9134 5D05 AD 9D 9F			lda PLAYSCREEN.OFS+3
  9135 5D08 69 00			adc #$00
  9136 5D0A 8D BA A0			sta BLITROW.DST+3
  9137 5D0D AD 8D A0			lda HLP
  9138 5D10 8D B3 A0			sta BLITROW.SRC
  9139 5D13 A9 50			lda #$50
  9140 5D15 18 6D 8E A0			add HLP+1
  9141 5D19 8D B4 A0			sta BLITROW.SRC+1
  9142 5D1C A9 00			lda #$00
  9143 5D1E 69 00			adc #$00
  9144 5D20 8D B5 A0			sta BLITROW.SRC+2
  9145 5D23 A9 00			lda #$00
  9146 5D25 69 00			adc #$00
  9147 5D27 8D B6 A0			sta BLITROW.SRC+3
  9148 5D2A A9 0F			lda #$0F
  9149 5D2C 8D BB A0			sta BLITROW.SIZE
  9150 5D2F A9 00			lda #$00
  9151 5D31 8D BC A0			sta BLITROW.SIZE+1
  9152 5D34 20 A2 3C			jsr BLITROW
  9153 5D37			l_1492
  9154
  9155 				; ------------------------------------------------------------
  9156
  9157 = A187			XA	= DATAORIGIN+$02FC
  9158 = A188			YA	= DATAORIGIN+$02FD
  9159 = A189			BLOCK	= DATAORIGIN+$02FE
  9160 = A18A			X	= DATAORIGIN+$02FF
  9161 = A18B			Y	= DATAORIGIN+$0300
  9162 = A18C			I	= DATAORIGIN+$0301
  9163 = A18D			XS	= DATAORIGIN+$0302
  9164 = A18F			YS	= DATAORIGIN+$0304
  9165 = A191			CL	= DATAORIGIN+$0306
  9166 = A192			CL2	= DATAORIGIN+$0307
  9167 = A193			SHADOW	= DATAORIGIN+$0308
  9168
  9169 = A187			@VarData	= XA
  9170 = 000D			@VarDataSize	= 13
  9171
  9172 5D37			@exit
  9173 					.ifdef @new
  9174 					lda <@VarData
  9175 					sta :ztmp
  9176 					lda >@VarData
  9177 					ldy #@VarDataSize-1
  9178 					jmp @FreeMem
  9179 					els
  9180 5D37 60				rts						; ret
  9181 					eif
  9182 				.endl
  9183
  9184 5D38			.local	PUT_WALL					; PROCEDURE
  9185
  9186 				; optimize OK (service.pas), line = 1760
  9187
  9188 5D38 A9 00			lda #$00
  9189 5D3A 8D 97 A1			sta Y
  9190
  9191 5D3D			l_15BF
  9192 				; --- ForToDoCondition
  9193 5D3D AD 97 A1			lda Y
  9194 5D40 C9 0F			cmp #$0F
  9195 5D42 B0 48			jcs l_15CD
  9196
  9197 				; optimize OK (service.pas), line = 1761
  9198
  9199 5D44 A9 00			lda #$00
  9200 5D46 8D 96 A1			sta X
  9201
  9202 5D49			l_15D6
  9203 				; --- ForToDoCondition
  9204 5D49 AD 96 A1			lda X
  9205 5D4C C9 0D			cmp #$0D
  9206 5D4E B0 37			jcs l_15E4
  9207
  9208 				; optimize OK (service.pas), line = 1762
  9209
  9210 5D50 AD 97 A1			lda Y
  9211 5D53 0A				asl @
  9212 5D54 0A				asl @
  9213 5D55 0A				asl @
  9214 5D56 0A				asl @
  9215 5D57 18 6D 96 A1			add X
  9216 5D5B A8				tay
  9217 5D5C B9 00 DB			lda adr.WALL,y
  9218 5D5F F0 21			jeq l_1603
  9219 5D61 AD 97 A1			lda Y
  9220 5D64 0A				asl @
  9221 5D65 0A				asl @
  9222 5D66 0A				asl @
  9223 5D67 0A				asl @
  9224 5D68 18 6D 96 A1			add X
  9225 5D6C A8				tay
  9226 5D6D B9 00 DB			lda adr.WALL,y
  9227 5D70 8D 89 A1			sta PLACE_BLOCK.BLOCK
  9228 5D73 AD 96 A1			lda X
  9229 5D76 8D 87 A1			sta PLACE_BLOCK.XA
  9230 5D79 AD 97 A1			lda Y
  9231 5D7C 8D 88 A1			sta PLACE_BLOCK.YA
  9232 5D7F 20 B0 58			jsr PLACE_BLOCK
  9233 5D82			l_1603
  9234
  9235 				; --- ForToDoEpilog
  9236 5D82 EE 96 A1			inc X
  9237 5D85 D0 C2			jne l_15D6
  9238 5D87			l_15E4
  9239
  9240 				; --- ForToDoEpilog
  9241 5D87 EE 97 A1			inc Y
  9242 5D8A D0 B1			jne l_15BF
  9243 5D8C			l_15CD
  9244
  9245 				; ------------------------------------------------------------
  9246
  9247 = A196			X	= DATAORIGIN+$030B
  9248 = A197			Y	= DATAORIGIN+$030C
  9249
  9250 = A196			@VarData	= X
  9251 = 0002			@VarDataSize	= 2
  9252
  9253 5D8C			@exit
  9254 					.ifdef @new
  9255 					lda <@VarData
  9256 					sta :ztmp
  9257 					lda >@VarData
  9258 					ldy #@VarDataSize-1
  9259 					jmp @FreeMem
  9260 					els
  9261 5D8C 60				rts						; ret
  9262 					eif
  9263 				.endl
  9264
  9265 5D8D			.local	SET_WALL					; PROCEDURE
  9266
  9267 				; optimize OK (service.pas), line = 1771
  9268
  9269 5D8D A9 00			lda #$00
  9270 5D8F 8D 4D A0			sta REMAIN_BLK
  9271
  9272 				; optimize OK (service.pas), line = 1772
  9273
  9274 5D92 AC 6A A0			ldy CUR_PLAYER
  9275 5D95 B9 5B A0			lda adr.SCORE.WALL_N,y
  9276 5D98 8D 9A A1			sta WL
  9277
  9278 				; optimize OK (service.pas), line = 1775
  9279
  9280 5D9B A9 00			lda #$00
  9281 5D9D 8D 99 A1			sta Y
  9282
  9283 5DA0			l_1641
  9284 				; --- ForToDoCondition
  9285 5DA0 AD 99 A1			lda Y
  9286 5DA3 C9 0F			cmp #$0F
  9287 5DA5 B0 3D			jcs l_164F
  9288
  9289 				; optimize OK (service.pas), line = 1776
  9290
  9291 5DA7 A9 00			lda #$00
  9292 5DA9 8D 98 A1			sta X
  9293
  9294 5DAC			l_1658
  9295 				; --- ForToDoCondition
  9296 5DAC AD 98 A1			lda X
  9297 5DAF C9 0D			cmp #$0D
  9298 5DB1 B0 2C			jcs l_1666
  9299
  9300 				; optimize OK (service.pas), line = 1779
  9301
  9302 5DB3 AD 99 A1			lda Y
  9303 5DB6 0A				asl @
  9304 5DB7 0A				asl @
  9305 5DB8 0A				asl @
  9306 5DB9 0A				asl @
  9307 5DBA 18 6D 98 A1			add X
  9308 5DBE A8				tay
  9309 5DBF B9 00 DB			lda adr.WALL,y
  9310 5DC2 F0 16			jeq l_169E
  9311 5DC4 AD 99 A1			lda Y
  9312 5DC7 0A				asl @
  9313 5DC8 0A				asl @
  9314 5DC9 0A				asl @
  9315 5DCA 0A				asl @
  9316 5DCB 18 6D 98 A1			add X
  9317 5DCF A8				tay
  9318 5DD0 B9 00 DB			lda adr.WALL,y
  9319 5DD3 C9 0A			cmp #$0A
  9320 5DD5 F0 03			jeq l_169E
  9321 5DD7 EE 4D A0			inc REMAIN_BLK
  9322 5DDA			l_169E
  9323
  9324 				; --- ForToDoEpilog
  9325 5DDA EE 98 A1			inc X
  9326 5DDD D0 CD			jne l_1658
  9327 5DDF			l_1666
  9328
  9329 				; --- ForToDoEpilog
  9330 5DDF EE 99 A1			inc Y
  9331 5DE2 D0 BC			jne l_1641
  9332 5DE4			l_164F
  9333
  9334 				; optimize OK (service.pas), line = 1781
  9335
  9336 5DE4 AD 9A A1			lda WL
  9337 5DE7 38 E9 01			sub #$01
  9338 5DEA 85 86			sta @SMALLINT.MOD.A
  9339 5DEC A9 00			lda #$00
  9340 5DEE E9 00			sbc #$00
  9341 5DF0 85 87			sta @SMALLINT.MOD.A+1
  9342 5DF2 A9 04			lda #$04
  9343 5DF4 85 8E			sta @SMALLINT.MOD.B
  9344 5DF6 A9 00			lda #$00
  9345 5DF8 85 8F			sta @SMALLINT.MOD.B+1
  9346 5DFA 20 50 22			jsr @SMALLINT.MOD
  9347 5DFD A5 92			lda @SMALLINT.MOD.RESULT
  9348 5DFF 8D 9A A1			sta WL
  9349
  9350 				; optimize OK (service.pas), line = 1783
  9351
  9352 5E02 8D 9B A1			sta @CASETMP_0008
  9353 5E05 C9 00			cmp #$00
  9354 5E07 D0 33			jne l_16C8
  9355 				@
  9356
  9357 				; optimize OK (service.pas), line = 1784
  9358
  9359 5E09 AD 23 A0 8D 1B A0 + 	:8 mva adr.PATTERN0+# adr.PATTERN+#
  9360 5E39 4C 15 5F			jmp a_0008
  9361 5E3C			l_16C8
  9362 5E3C C9 01			cmp #$01
  9363 5E3E D0 33			jne l_16D1
  9364
  9365 				; optimize OK (service.pas), line = 1785
  9366
  9367 5E40 AD 2B A0 8D 1B A0 + 	:8 mva adr.PATTERN1+# adr.PATTERN+#
  9368 5E70 4C 15 5F			jmp a_0008
  9369 5E73			l_16D1
  9370 5E73 C9 02			cmp #$02
  9371 5E75 D0 33			jne l_16DA
  9372
  9373 				; optimize OK (service.pas), line = 1786
  9374
  9375 5E77 AD 33 A0 8D 1B A0 + 	:8 mva adr.PATTERN2+# adr.PATTERN+#
  9376 5EA7 4C 15 5F			jmp a_0008
  9377 5EAA			l_16DA
  9378 5EAA C9 03			cmp #$03
  9379 5EAC D0 33			jne l_16E3
  9380
  9381 				; optimize OK (service.pas), line = 1787
  9382
  9383 5EAE AD 3B A0 8D 1B A0 + 	:8 mva adr.PATTERN3+# adr.PATTERN+#
  9384 5EDE 4C 15 5F			jmp a_0008
  9385 5EE1			l_16E3
  9386 5EE1 C9 04			cmp #$04
  9387 5EE3 D0 30			jne l_16EC
  9388
  9389 				; optimize OK (service.pas), line = 1788
  9390
  9391 5EE5 AD 43 A0 8D 1B A0 + 	:8 mva adr.PATTERN4+# adr.PATTERN+#
  9392 5F15			l_16EC
  9393 5F15			a_0008
  9394
  9395 				; ------------------------------------------------------------
  9396
  9397 = A198			X	= DATAORIGIN+$030D
  9398 = A199			Y	= DATAORIGIN+$030E
  9399 = A19A			WL	= DATAORIGIN+$030F
  9400 = A19B			@CASETMP_0008	= DATAORIGIN+$0310
  9401
  9402 = A198			@VarData	= X
  9403 = 0004			@VarDataSize	= 4
  9404
  9405 5F15			@exit
  9406 					.ifdef @new
  9407 					lda <@VarData
  9408 					sta :ztmp
  9409 					lda >@VarData
  9410 					ldy #@VarDataSize-1
  9411 					jmp @FreeMem
  9412 					els
  9413 5F15 60				rts						; ret
  9414 					eif
  9415 				.endl
  9416
  9417 5F16			.local	SPLIT_LINE					; FUNCTION
  9418
  9419 				; optimize OK (service.pas), line = 1827
  9420
  9421 5F16 AC 9C A1 84 84 AC + 	mwy X1 :bp2
  9422 5F20 A0 00			ldy #$00
  9423 5F22 B1 84			lda (:bp2),y
  9424 5F24 18 69 10			add #$10
  9425 5F27 91 84			sta (:bp2),y
  9426 5F29 C8				iny
  9427 5F2A B1 84			lda (:bp2),y
  9428 5F2C 69 00			adc #$00
  9429 5F2E 91 84			sta (:bp2),y
  9430
  9431 				; optimize OK (service.pas), line = 1828
  9432
  9433 5F30 AC 9E A1 84 84 AC + 	mwy Y1 :bp2
  9434 5F3A A0 00			ldy #$00
  9435 5F3C B1 84			lda (:bp2),y
  9436 5F3E 18 69 18			add #$18
  9437 5F41 91 84			sta (:bp2),y
  9438 5F43 C8				iny
  9439 5F44 B1 84			lda (:bp2),y
  9440 5F46 69 00			adc #$00
  9441 5F48 91 84			sta (:bp2),y
  9442
  9443 				; optimize OK (service.pas), line = 1829
  9444
  9445 5F4A AC A0 A1 84 84 AC + 	mwy X2 :bp2
  9446 5F54 A0 00			ldy #$00
  9447 5F56 B1 84			lda (:bp2),y
  9448 5F58 18 69 10			add #$10
  9449 5F5B 91 84			sta (:bp2),y
  9450 5F5D C8				iny
  9451 5F5E B1 84			lda (:bp2),y
  9452 5F60 69 00			adc #$00
  9453 5F62 91 84			sta (:bp2),y
  9454
  9455 				; optimize OK (service.pas), line = 1830
  9456
  9457 5F64 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
  9458 5F6E A0 00			ldy #$00
  9459 5F70 B1 84			lda (:bp2),y
  9460 5F72 18 69 18			add #$18
  9461 5F75 91 84			sta (:bp2),y
  9462 5F77 C8				iny
  9463 5F78 B1 84			lda (:bp2),y
  9464 5F7A 69 00			adc #$00
  9465 5F7C 91 84			sta (:bp2),y
  9466
  9467 				; optimize OK (service.pas), line = 1832
  9468
  9469 5F7E A9 00			lda #$00
  9470 5F80 8D C5 A1			sta COLLISION
  9471
  9472 				; optimize OK (service.pas), line = 1834
  9473
  9474 5F83 AC 9C A1 84 84 AC + 	mwy X1 :bp2
  9475 5F8D A0 00			ldy #$00
  9476 5F8F B1 84			lda (:bp2),y
  9477 5F91 85 9F			sta :STACKORIGIN+9
  9478 5F93 C8				iny
  9479 5F94 B1 84			lda (:bp2),y
  9480 5F96 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9481 5F98 A0 00			ldy #$00
  9482 5F9A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9483 5F9C 10 01			spl
  9484 5F9E 88				dey
  9485 5F9F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9486 5FA1 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9487 5FA3 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9488 5FA5 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9489 5FA7 66 9F			ror :STACKORIGIN+9
  9490 5FA9 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9491 5FAB 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9492 5FAD 66 9F			ror :STACKORIGIN+9
  9493 5FAF 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9494 5FB1 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9495 5FB3 66 9F			ror :STACKORIGIN+9
  9496 5FB5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9497 5FB7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9498 5FB9 66 9F			ror :STACKORIGIN+9
  9499 5FBB A5 9F			lda :STACKORIGIN+9
  9500 5FBD 8D B9 A1			sta XP1
  9501 5FC0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9502 5FC2 8D BA A1			sta XP1+1
  9503
  9504 				; optimize OK (service.pas), line = 1835
  9505
  9506 5FC5 AC 9E A1 84 84 AC + 	mwy Y1 :bp2
  9507 5FCF A0 00			ldy #$00
  9508 5FD1 B1 84			lda (:bp2),y
  9509 5FD3 85 9F			sta :STACKORIGIN+9
  9510 5FD5 C8				iny
  9511 5FD6 B1 84			lda (:bp2),y
  9512 5FD8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9513 5FDA A0 00			ldy #$00
  9514 5FDC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9515 5FDE 10 01			spl
  9516 5FE0 88				dey
  9517 5FE1 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9518 5FE3 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9519 5FE5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9520 5FE7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9521 5FE9 66 9F			ror :STACKORIGIN+9
  9522 5FEB 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9523 5FED 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9524 5FEF 66 9F			ror :STACKORIGIN+9
  9525 5FF1 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9526 5FF3 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9527 5FF5 66 9F			ror :STACKORIGIN+9
  9528 5FF7 A5 9F			lda :STACKORIGIN+9
  9529 5FF9 8D BB A1			sta YP1
  9530 5FFC A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9531 5FFE 8D BC A1			sta YP1+1
  9532
  9533 				; optimize OK (service.pas), line = 1836
  9534
  9535 6001 AC A0 A1 84 84 AC + 	mwy X2 :bp2
  9536 600B A0 00			ldy #$00
  9537 600D B1 84			lda (:bp2),y
  9538 600F 85 9F			sta :STACKORIGIN+9
  9539 6011 C8				iny
  9540 6012 B1 84			lda (:bp2),y
  9541 6014 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9542 6016 A0 00			ldy #$00
  9543 6018 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9544 601A 10 01			spl
  9545 601C 88				dey
  9546 601D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9547 601F 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9548 6021 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9549 6023 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9550 6025 66 9F			ror :STACKORIGIN+9
  9551 6027 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9552 6029 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9553 602B 66 9F			ror :STACKORIGIN+9
  9554 602D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9555 602F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9556 6031 66 9F			ror :STACKORIGIN+9
  9557 6033 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9558 6035 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9559 6037 66 9F			ror :STACKORIGIN+9
  9560 6039 A5 9F			lda :STACKORIGIN+9
  9561 603B 8D BD A1			sta XP2
  9562 603E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9563 6040 8D BE A1			sta XP2+1
  9564
  9565 				; optimize OK (service.pas), line = 1837
  9566
  9567 6043 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
  9568 604D A0 00			ldy #$00
  9569 604F B1 84			lda (:bp2),y
  9570 6051 85 9F			sta :STACKORIGIN+9
  9571 6053 C8				iny
  9572 6054 B1 84			lda (:bp2),y
  9573 6056 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9574 6058 A0 00			ldy #$00
  9575 605A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9576 605C 10 01			spl
  9577 605E 88				dey
  9578 605F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9579 6061 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9580 6063 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9581 6065 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9582 6067 66 9F			ror :STACKORIGIN+9
  9583 6069 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9584 606B 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9585 606D 66 9F			ror :STACKORIGIN+9
  9586 606F 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9587 6071 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9588 6073 66 9F			ror :STACKORIGIN+9
  9589 6075 A5 9F			lda :STACKORIGIN+9
  9590 6077 8D BF A1			sta YP2
  9591 607A A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9592 607C 8D C0 A1			sta YP2+1
  9593
  9594 				; optimize OK (service.pas), line = 1839
  9595
  9596 607F AC 9C A1 84 84 AC + 	mwy X1 :bp2
  9597 6089 A0 00			ldy #$00
  9598 608B B1 84			lda (:bp2),y
  9599 608D 8D A9 A1			sta XK
  9600 6090 C8				iny
  9601 6091 B1 84			lda (:bp2),y
  9602 6093 8D AA A1			sta XK+1
  9603
  9604 				; optimize OK (service.pas), line = 1840
  9605
  9606 6096 AC 9E A1 84 84 AC + 	mwy Y1 :bp2
  9607 60A0 A0 00			ldy #$00
  9608 60A2 B1 84			lda (:bp2),y
  9609 60A4 8D AB A1			sta YK
  9610 60A7 C8				iny
  9611 60A8 B1 84			lda (:bp2),y
  9612 60AA 8D AC A1			sta YK+1
  9613
  9614 				; optimize OK (service.pas), line = 1841
  9615
  9616 60AD AC A0 A1 84 84 AC + 	mwy X2 :bp2
  9617 60B7 A0 00			ldy #$00
  9618 60B9 B1 84			lda (:bp2),y
  9619 60BB 8D AD A1			sta XJ
  9620 60BE C8				iny
  9621 60BF B1 84			lda (:bp2),y
  9622 60C1 8D AE A1			sta XJ+1
  9623
  9624 				; optimize OK (service.pas), line = 1842
  9625
  9626 60C4 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
  9627 60CE A0 00			ldy #$00
  9628 60D0 B1 84			lda (:bp2),y
  9629 60D2 8D AF A1			sta YJ
  9630 60D5 C8				iny
  9631 60D6 B1 84			lda (:bp2),y
  9632 60D8 8D B0 A1			sta YJ+1
  9633
  9634 				; optimize OK (service.pas), line = 1844
  9635
  9636 60DB AC 9C A1 84 84 AC + 	mwy X1 :bp2
  9637 60E5 A0 00			ldy #$00
  9638 60E7 B1 84			lda (:bp2),y
  9639 60E9 8D B1 A1			sta XH
  9640 60EC C8				iny
  9641 60ED B1 84			lda (:bp2),y
  9642 60EF 8D B2 A1			sta XH+1
  9643
  9644 				; optimize OK (service.pas), line = 1845
  9645
  9646 60F2 AC 9E A1 84 84 AC + 	mwy Y1 :bp2
  9647 60FC A0 00			ldy #$00
  9648 60FE B1 84			lda (:bp2),y
  9649 6100 8D B3 A1			sta YH
  9650 6103 C8				iny
  9651 6104 B1 84			lda (:bp2),y
  9652 6106 8D B4 A1			sta YH+1
  9653
  9654 				; optimize OK (service.pas), line = 1846
  9655
  9656 6109 AC A0 A1 84 84 AC + 	mwy X2 :bp2
  9657 6113 A0 00			ldy #$00
  9658 6115 B1 84			lda (:bp2),y
  9659 6117 8D B5 A1			sta XN
  9660 611A C8				iny
  9661 611B B1 84			lda (:bp2),y
  9662 611D 8D B6 A1			sta XN+1
  9663
  9664 				; optimize OK (service.pas), line = 1847
  9665
  9666 6120 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
  9667 612A A0 00			ldy #$00
  9668 612C B1 84			lda (:bp2),y
  9669 612E 8D B7 A1			sta YN
  9670 6131 C8				iny
  9671 6132 B1 84			lda (:bp2),y
  9672 6134 8D B8 A1			sta YN+1
  9673
  9674 				; optimize OK (service.pas), line = 1854
  9675
  9676 6137 AC 9C A1 84 84 AC + 	mwy X1 :bp2
  9677 6141 A0 00			ldy #$00
  9678 6143 B1 84			lda (:bp2),y
  9679 6145 85 9F			sta :STACKORIGIN+9
  9680 6147 C8				iny
  9681 6148 B1 84			lda (:bp2),y
  9682 614A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9683 614C AC A0 A1 84 84 AC + 	mwy X2 :bp2
  9684 6156 A0 00			ldy #$00
  9685 6158 B1 84			lda (:bp2),y
  9686 615A 85 A0			sta :STACKORIGIN+10
  9687 615C C8				iny
  9688 615D B1 84			lda (:bp2),y
  9689 615F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9690 6161 A0 00			ldy #$00
  9691 6163 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9692 6165 10 01			spl
  9693 6167 88				dey
  9694 6168 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9695 616A 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9696 616C 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9697 616E A0 00			ldy #$00
  9698 6170 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9699 6172 10 01			spl
  9700 6174 88				dey
  9701 6175 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9702 6177 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9703 6179 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9704 617B A5 9F			lda :STACKORIGIN+9
  9705 617D 38 E5 A0			sub :STACKORIGIN+10
  9706 6180 85 8A			sta SYSTEM.ABS.@010185000.X
  9707 6182 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9708 6184 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9709 6186 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9710 6188 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9711 618A E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9712 618C 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9713 618E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9714 6190 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9715 6192 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9716 6194 20 F7 2A			jsr SYSTEM.ABS.@010185000
  9717 6197 E8				inx
  9718 6198 A0 01			ldy #1
  9719 619A				.LOCAL
  9720 619A A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9721 619C 38 E9 00			sub #$00
  9722 619F D0 1C			bne L4
  9723 61A1 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9724 61A3 C9 00			cmp #$00
  9725 61A5 D0 0A			bne L1
  9726 61A7 A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9727 61A9 C9 00			cmp #$00
  9728 61AB D0 04			bne L1
  9729 61AD A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9730 61AF C9 10			cmp #$10
  9731 61B1 F0 10		L1	beq L5
  9732 61B3 B0 04			bcs L3
  9733 61B5 A9 FF			lda #$FF
  9734 61B7 D0 0A			bne L5
  9735 61B9 A9 01		L3	lda #$01
  9736 61BB D0 06			bne L5
  9737 61BD 50 04		L4	bvc L5
  9738 61BF 49 FF			eor #$FF
  9739 61C1 09 01			ora #$01
  9740 61C3			L5
  9741 					.ENDL
  9742 61C3 F0 02			seq
  9743 61C5 10 01			bpl @+
  9744 61C7 88				dey
  9745 				@
  9746 61C8 94 96			sty :STACKORIGIN,x
  9747 61CA AC A2 A1 84 84 AC + 	mwy Y2 :bp2
  9748 61D4 A0 00			ldy #$00
  9749 61D6 B1 84			lda (:bp2),y
  9750 61D8 85 9F			sta :STACKORIGIN+9
  9751 61DA C8				iny
  9752 61DB B1 84			lda (:bp2),y
  9753 61DD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9754 61DF AC 9E A1 84 84 AC + 	mwy Y1 :bp2
  9755 61E9 A0 00			ldy #$00
  9756 61EB B1 84			lda (:bp2),y
  9757 61ED 85 A0			sta :STACKORIGIN+10
  9758 61EF C8				iny
  9759 61F0 B1 84			lda (:bp2),y
  9760 61F2 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9761 61F4 A0 00			ldy #$00
  9762 61F6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9763 61F8 10 01			spl
  9764 61FA 88				dey
  9765 61FB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9766 61FD 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9767 61FF 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9768 6201 A0 00			ldy #$00
  9769 6203 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
  9770 6205 10 01			spl
  9771 6207 88				dey
  9772 6208 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9773 620A 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9774 620C 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9775 620E A5 9F			lda :STACKORIGIN+9
  9776 6210 38 E5 A0			sub :STACKORIGIN+10
  9777 6213 85 8A			sta SYSTEM.ABS.@010185000.X
  9778 6215 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9779 6217 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
  9780 6219 85 8B			sta SYSTEM.ABS.@010185000.X+1
  9781 621B A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9782 621D E5 C0			sbc :STACKORIGIN+STACKWIDTH*2+10
  9783 621F 85 8C			sta SYSTEM.ABS.@010185000.X+2
  9784 6221 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9785 6223 E5 D0			sbc :STACKORIGIN+STACKWIDTH*3+10
  9786 6225 85 8D			sta SYSTEM.ABS.@010185000.X+3
  9787 6227 20 F7 2A			jsr SYSTEM.ABS.@010185000
  9788 622A CA				dex
  9789 622B A0 01			ldy #1
  9790 622D				.LOCAL
  9791 622D A5 95			lda SYSTEM.ABS.@010185000.RESULT+3
  9792 622F 38 E9 00			sub #$00
  9793 6232 D0 1C			bne L4
  9794 6234 A5 94			lda SYSTEM.ABS.@010185000.RESULT+2
  9795 6236 C9 00			cmp #$00
  9796 6238 D0 0A			bne L1
  9797 623A A5 93			lda SYSTEM.ABS.@010185000.RESULT+1
  9798 623C C9 00			cmp #$00
  9799 623E D0 04			bne L1
  9800 6240 A5 92			lda SYSTEM.ABS.@010185000.RESULT
  9801 6242 C9 08			cmp #$08
  9802 6244 F0 10		L1	beq L5
  9803 6246 B0 04			bcs L3
  9804 6248 A9 FF			lda #$FF
  9805 624A D0 0A			bne L5
  9806 624C A9 01		L3	lda #$01
  9807 624E D0 06			bne L5
  9808 6250 50 04		L4	bvc L5
  9809 6252 49 FF			eor #$FF
  9810 6254 09 01			ora #$01
  9811 6256			L5
  9812 					.ENDL
  9813 6256 F0 02			seq
  9814 6258 10 01			bpl @+
  9815 625A 88				dey
  9816 				@
  9817 625B 98				tya
  9818 625C 15 97			ora :STACKORIGIN+1,x
  9819 625E F0 05			jeq l_1775
  9820
  9821 				; optimize OK (service.pas), line = 1855
  9822
  9823 6260 A9 01			lda #$01
  9824 6262 20 BC 3D			jsr FATAL_ERROR
  9825 6265			l_1775
  9826
  9827 				; optimize OK (service.pas), line = 1858
  9828
  9829 6265 AD BA A1			lda XP1+1
  9830 6268 CD BE A1			cmp XP2+1
  9831 626B D0 06			bne @+
  9832 626D AD B9 A1			lda XP1
  9833 6270 CD BD A1			cmp XP2
  9834 				@
  9835 6273 D0 13			jne l_1798x
  9836 6275 AD BC A1			lda YP1+1
  9837 6278 CD C0 A1			cmp YP2+1
  9838 627B D0 06			bne @+
  9839 627D AD BB A1			lda YP1
  9840 6280 CD BF A1			cmp YP2
  9841 				@
  9842 6283 D0 03 4C C6 65		jeq l_1798
  9843 6288			l_1798x
  9844
  9845 				; optimize OK (service.pas), line = 1860
  9846
  9847 6288 AD BC A1			lda YP1+1
  9848 628B CD C0 A1			cmp YP2+1
  9849 628E D0 06			bne @+
  9850 6290 AD BB A1			lda YP1
  9851 6293 CD BF A1			cmp YP2
  9852 				@
  9853 6296 D0 03 4C D1 63		jeq l_17AB
  9854
  9855 				; optimize OK (service.pas), line = 1862
  9856
  9857 629B AD C5 A1			lda COLLISION
  9858 629E 09 01			ora #$01
  9859 62A0 8D C5 A1			sta COLLISION
  9860
  9861 				; --- WhileProlog
  9862 62A3 4C BE 63			jmp l_17B8
  9863 62A6			l_17B9
  9864
  9865 				; optimize OK (service.pas), line = 1866
  9866
  9867 62A6 AD B1 A1			lda XH
  9868 62A9 85 9F			sta :STACKORIGIN+9
  9869 62AB A0 00			ldy #$00
  9870 62AD AD B2 A1			lda XH+1
  9871 62B0 10 01			spl
  9872 62B2 88				dey
  9873 62B3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9874 62B5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9875 62B7 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9876 62B9 AD B5 A1			lda XN
  9877 62BC 85 A0			sta :STACKORIGIN+10
  9878 62BE A0 00			ldy #$00
  9879 62C0 AD B6 A1			lda XN+1
  9880 62C3 10 01			spl
  9881 62C5 88				dey
  9882 62C6 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9883 62C8 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9884 62CA 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9885 62CC A5 9F			lda :STACKORIGIN+9
  9886 62CE 18 65 A0			add :STACKORIGIN+10
  9887 62D1 85 9F			sta :STACKORIGIN+9
  9888 62D3 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9889 62D5 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9890 62D7 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9891 62D9 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9892 62DB 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9893 62DD 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9894 62DF A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9895 62E1 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9896 62E3 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9897 62E5 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9898 62E7 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9899 62E9 66 9F			ror :STACKORIGIN+9
  9900 62EB A5 9F			lda :STACKORIGIN+9
  9901 62ED 8D A5 A1			sta X
  9902 62F0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9903 62F2 8D A6 A1			sta X+1
  9904
  9905 				; optimize OK (service.pas), line = 1867
  9906
  9907 62F5 AD B3 A1			lda YH
  9908 62F8 85 9F			sta :STACKORIGIN+9
  9909 62FA A0 00			ldy #$00
  9910 62FC AD B4 A1			lda YH+1
  9911 62FF 10 01			spl
  9912 6301 88				dey
  9913 6302 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9914 6304 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9915 6306 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
  9916 6308 AD B7 A1			lda YN
  9917 630B 85 A0			sta :STACKORIGIN+10
  9918 630D A0 00			ldy #$00
  9919 630F AD B8 A1			lda YN+1
  9920 6312 10 01			spl
  9921 6314 88				dey
  9922 6315 85 B0			sta :STACKORIGIN+STACKWIDTH+10
  9923 6317 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
  9924 6319 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
  9925 631B A5 9F			lda :STACKORIGIN+9
  9926 631D 18 65 A0			add :STACKORIGIN+10
  9927 6320 85 9F			sta :STACKORIGIN+9
  9928 6322 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9929 6324 65 B0			adc :STACKORIGIN+STACKWIDTH+10
  9930 6326 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9931 6328 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
  9932 632A 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
  9933 632C 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
  9934 632E A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
  9935 6330 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
  9936 6332 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
  9937 6334 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9938 6336 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9939 6338 66 9F			ror :STACKORIGIN+9
  9940 633A A5 9F			lda :STACKORIGIN+9
  9941 633C 8D A7 A1			sta Y
  9942 633F A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9943 6341 8D A8 A1			sta Y+1
  9944
  9945 				; optimize OK (service.pas), line = 1869
  9946
  9947 6344 AD A7 A1			lda Y
  9948 6347 85 9F			sta :STACKORIGIN+9
  9949 6349 A0 00			ldy #$00
  9950 634B AD A8 A1			lda Y+1
  9951 634E 10 01			spl
  9952 6350 88				dey
  9953 6351 85 AF			sta :STACKORIGIN+STACKWIDTH+9
  9954 6353 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
  9955 6355 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9956 6357 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9957 6359 66 9F			ror :STACKORIGIN+9
  9958 635B 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9959 635D 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9960 635F 66 9F			ror :STACKORIGIN+9
  9961 6361 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
  9962 6363 66 AF			ror :STACKORIGIN+STACKWIDTH+9
  9963 6365 66 9F			ror :STACKORIGIN+9
  9964 6367 A5 9F			lda :STACKORIGIN+9
  9965 6369 8D C3 A1			sta YP
  9966 636C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
  9967 636E 8D C4 A1			sta YP+1
  9968
  9969 				; optimize OK (service.pas), line = 1871
  9970
  9971 6371 CD BC A1			cmp YP1+1
  9972 6374 D0 06			bne @+
  9973 6376 AD C3 A1			lda YP
  9974 6379 CD BB A1			cmp YP1
  9975 				@
  9976 637C D0 18			jne l_17F0
  9977
  9978 				; optimize OK (service.pas), line = 1873
  9979
  9980 637E AD A5 A1			lda X
  9981 6381 8D B1 A1			sta XH
  9982 6384 AD A6 A1			lda X+1
  9983 6387 8D B2 A1			sta XH+1
  9984
  9985 				; optimize OK (service.pas), line = 1874
  9986
  9987 638A AD A7 A1			lda Y
  9988 638D 8D B3 A1			sta YH
  9989 6390 AD A8 A1			lda Y+1
  9990 6393 8D B4 A1			sta YH+1
  9991 6396			l_17F0
  9992
  9993 				; optimize OK (service.pas), line = 1877
  9994
  9995 6396 AD C4 A1			lda YP+1
  9996 6399 CD C0 A1			cmp YP2+1
  9997 639C D0 06			bne @+
  9998 639E AD C3 A1			lda YP
  9999 63A1 CD BF A1			cmp YP2
 10000 				@
 10001 63A4 D0 18			jne l_180F
 10002
 10003 				; optimize OK (service.pas), line = 1879
 10004
 10005 63A6 AD A5 A1			lda X
 10006 63A9 8D B5 A1			sta XN
 10007 63AC AD A6 A1			lda X+1
 10008 63AF 8D B6 A1			sta XN+1
 10009
 10010 				; optimize OK (service.pas), line = 1880
 10011
 10012 63B2 AD A7 A1			lda Y
 10013 63B5 8D B7 A1			sta YN
 10014 63B8 AD A8 A1			lda Y+1
 10015 63BB 8D B8 A1			sta YN+1
 10016 63BE			l_180F
 10017 63BE			l_17B8
 10018
 10019 				; optimize OK (service.pas), line = 1864
 10020
 10021 63BE AD B7 A1			lda YN
 10022 63C1 29 07			and #$07
 10023 63C3 F0 0C			jeq l_17B9w
 10024 63C5 AD B7 A1			lda YN
 10025 63C8 29 07			and #$07
 10026 63CA C9 07			cmp #$07
 10027 63CC F0 03 4C A6 62		jne l_17B9
 10028 63D1			l_17B9w
 10029 63D1			l_17AB
 10030
 10031 				; optimize OK (service.pas), line = 1886
 10032
 10033 63D1 AD BA A1			lda XP1+1
 10034 63D4 CD BE A1			cmp XP2+1
 10035 63D7 D0 06			bne @+
 10036 63D9 AD B9 A1			lda XP1
 10037 63DC CD BD A1			cmp XP2
 10038 				@
 10039 63DF D0 03 4C 20 65		jeq l_184E
 10040
 10041 				; optimize OK (service.pas), line = 1888
 10042
 10043 63E4 AD C5 A1			lda COLLISION
 10044 63E7 09 02			ora #$02
 10045 63E9 8D C5 A1			sta COLLISION
 10046
 10047 				; --- WhileProlog
 10048 63EC 4C 0D 65			jmp l_185B
 10049 63EF			l_185C
 10050
 10051 				; optimize OK (service.pas), line = 1892
 10052
 10053 63EF AD A9 A1			lda XK
 10054 63F2 85 9F			sta :STACKORIGIN+9
 10055 63F4 A0 00			ldy #$00
 10056 63F6 AD AA A1			lda XK+1
 10057 63F9 10 01			spl
 10058 63FB 88				dey
 10059 63FC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10060 63FE 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10061 6400 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10062 6402 AD AD A1			lda XJ
 10063 6405 85 A0			sta :STACKORIGIN+10
 10064 6407 A0 00			ldy #$00
 10065 6409 AD AE A1			lda XJ+1
 10066 640C 10 01			spl
 10067 640E 88				dey
 10068 640F 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10069 6411 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10070 6413 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10071 6415 A5 9F			lda :STACKORIGIN+9
 10072 6417 18 65 A0			add :STACKORIGIN+10
 10073 641A 85 9F			sta :STACKORIGIN+9
 10074 641C A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10075 641E 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10076 6420 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10077 6422 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10078 6424 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10079 6426 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10080 6428 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10081 642A 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10082 642C 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10083 642E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10084 6430 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10085 6432 66 9F			ror :STACKORIGIN+9
 10086 6434 A5 9F			lda :STACKORIGIN+9
 10087 6436 8D A5 A1			sta X
 10088 6439 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10089 643B 8D A6 A1			sta X+1
 10090
 10091 				; optimize OK (service.pas), line = 1893
 10092
 10093 643E AD AB A1			lda YK
 10094 6441 85 9F			sta :STACKORIGIN+9
 10095 6443 A0 00			ldy #$00
 10096 6445 AD AC A1			lda YK+1
 10097 6448 10 01			spl
 10098 644A 88				dey
 10099 644B 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10100 644D 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10101 644F 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10102 6451 AD AF A1			lda YJ
 10103 6454 85 A0			sta :STACKORIGIN+10
 10104 6456 A0 00			ldy #$00
 10105 6458 AD B0 A1			lda YJ+1
 10106 645B 10 01			spl
 10107 645D 88				dey
 10108 645E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10109 6460 84 C0			sty :STACKORIGIN+STACKWIDTH*2+10
 10110 6462 84 D0			sty :STACKORIGIN+STACKWIDTH*3+10
 10111 6464 A5 9F			lda :STACKORIGIN+9
 10112 6466 18 65 A0			add :STACKORIGIN+10
 10113 6469 85 9F			sta :STACKORIGIN+9
 10114 646B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10115 646D 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10116 646F 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10117 6471 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10118 6473 65 C0			adc :STACKORIGIN+STACKWIDTH*2+10
 10119 6475 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10120 6477 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10121 6479 65 D0			adc :STACKORIGIN+STACKWIDTH*3+10
 10122 647B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10123 647D 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10124 647F 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10125 6481 66 9F			ror :STACKORIGIN+9
 10126 6483 A5 9F			lda :STACKORIGIN+9
 10127 6485 8D A7 A1			sta Y
 10128 6488 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10129 648A 8D A8 A1			sta Y+1
 10130
 10131 				; optimize OK (service.pas), line = 1895
 10132
 10133 648D AD A5 A1			lda X
 10134 6490 85 9F			sta :STACKORIGIN+9
 10135 6492 A0 00			ldy #$00
 10136 6494 AD A6 A1			lda X+1
 10137 6497 10 01			spl
 10138 6499 88				dey
 10139 649A 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10140 649C 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10141 649E 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10142 64A0 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10143 64A2 66 9F			ror :STACKORIGIN+9
 10144 64A4 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10145 64A6 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10146 64A8 66 9F			ror :STACKORIGIN+9
 10147 64AA 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10148 64AC 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10149 64AE 66 9F			ror :STACKORIGIN+9
 10150 64B0 46 BF			lsr :STACKORIGIN+STACKWIDTH*2+9
 10151 64B2 66 AF			ror :STACKORIGIN+STACKWIDTH+9
 10152 64B4 66 9F			ror :STACKORIGIN+9
 10153 64B6 A5 9F			lda :STACKORIGIN+9
 10154 64B8 8D C1 A1			sta XP
 10155 64BB A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10156 64BD 8D C2 A1			sta XP+1
 10157
 10158 				; optimize OK (service.pas), line = 1897
 10159
 10160 64C0 CD BA A1			cmp XP1+1
 10161 64C3 D0 06			bne @+
 10162 64C5 AD C1 A1			lda XP
 10163 64C8 CD B9 A1			cmp XP1
 10164 				@
 10165 64CB D0 18			jne l_1893
 10166
 10167 				; optimize OK (service.pas), line = 1899
 10168
 10169 64CD AD A5 A1			lda X
 10170 64D0 8D A9 A1			sta XK
 10171 64D3 AD A6 A1			lda X+1
 10172 64D6 8D AA A1			sta XK+1
 10173
 10174 				; optimize OK (service.pas), line = 1900
 10175
 10176 64D9 AD A7 A1			lda Y
 10177 64DC 8D AB A1			sta YK
 10178 64DF AD A8 A1			lda Y+1
 10179 64E2 8D AC A1			sta YK+1
 10180 64E5			l_1893
 10181
 10182 				; optimize OK (service.pas), line = 1903
 10183
 10184 64E5 AD C2 A1			lda XP+1
 10185 64E8 CD BE A1			cmp XP2+1
 10186 64EB D0 06			bne @+
 10187 64ED AD C1 A1			lda XP
 10188 64F0 CD BD A1			cmp XP2
 10189 				@
 10190 64F3 D0 18			jne l_18B2
 10191
 10192 				; optimize OK (service.pas), line = 1905
 10193
 10194 64F5 AD A5 A1			lda X
 10195 64F8 8D AD A1			sta XJ
 10196 64FB AD A6 A1			lda X+1
 10197 64FE 8D AE A1			sta XJ+1
 10198
 10199 				; optimize OK (service.pas), line = 1906
 10200
 10201 6501 AD A7 A1			lda Y
 10202 6504 8D AF A1			sta YJ
 10203 6507 AD A8 A1			lda Y+1
 10204 650A 8D B0 A1			sta YJ+1
 10205 650D			l_18B2
 10206 650D			l_185B
 10207
 10208 				; optimize OK (service.pas), line = 1890
 10209
 10210 650D AD AD A1			lda XJ
 10211 6510 29 0F			and #$0F
 10212 6512 F0 0C			jeq l_185Cw
 10213 6514 AD AD A1			lda XJ
 10214 6517 29 0F			and #$0F
 10215 6519 C9 0F			cmp #$0F
 10216 651B F0 03 4C EF 63		jne l_185C
 10217 6520			l_185Cw
 10218 6520			l_184E
 10219
 10220 				; optimize OK (service.pas), line = 1917
 10221
 10222 6520 AD C5 A1			lda COLLISION
 10223 6523 C9 01			cmp #$01
 10224 6525 D0 03			jne l_18F1
 10225 				; optimize OK (service.pas), line = 1919
 10226 				; optimize OK (service.pas), line = 1920
 10227 6527 4C 95 65			jmp l_1905
 10228 652A			l_18F1
 10229
 10230 				; optimize OK (service.pas), line = 1922
 10231
 10232 652A AD C5 A1			lda COLLISION
 10233 652D C9 02			cmp #$02
 10234 652F D0 2F			jne l_1917
 10235
 10236 				; optimize OK (service.pas), line = 1924
 10237
 10238 6531 AC A0 A1 84 84 AC + 	mwy X2 :bp2
 10239 653B A0 00			ldy #$00
 10240 653D AD AD A1			lda XJ
 10241 6540 91 84			sta (:bp2),y
 10242 6542 C8				iny
 10243 6543 AD AE A1			lda XJ+1
 10244 6546 91 84			sta (:bp2),y
 10245
 10246 				; optimize OK (service.pas), line = 1925
 10247
 10248 6548 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
 10249 6552 A0 00			ldy #$00
 10250 6554 AD AF A1			lda YJ
 10251 6557 91 84			sta (:bp2),y
 10252 6559 C8				iny
 10253 655A AD B0 A1			lda YJ+1
 10254 655D 4C C1 65			jmp l_192B
 10255 6560			l_1917
 10256
 10257 				; optimize OK (service.pas), line = 1927
 10258
 10259 6560 AD C5 A1			lda COLLISION
 10260 6563 C9 03			cmp #$03
 10261 6565 D0 5C			jne l_193D
 10262
 10263 				; optimize OK (service.pas), line = 1929
 10264
 10265 6567 AC 9C A1 84 84 AC + 	mwy X1 :bp2
 10266 6571 A0 00			ldy #$00
 10267 6573 AD AD A1			lda XJ
 10268 6576 91 84			sta (:bp2),y
 10269 6578 C8				iny
 10270 6579 AD AE A1			lda XJ+1
 10271 657C 91 84			sta (:bp2),y
 10272
 10273 				; optimize OK (service.pas), line = 1930
 10274
 10275 657E AC 9E A1 84 84 AC + 	mwy Y1 :bp2
 10276 6588 A0 00			ldy #$00
 10277 658A AD AF A1			lda YJ
 10278 658D 91 84			sta (:bp2),y
 10279 658F C8				iny
 10280 6590 AD B0 A1			lda YJ+1
 10281 6593 91 84			sta (:bp2),y
 10282 6595			l_1905
 10283
 10284 				; optimize OK (service.pas), line = 1931
 10285
 10286 6595 AC A0 A1 84 84 AC + 	mwy X2 :bp2
 10287 659F A0 00			ldy #$00
 10288 65A1 AD B5 A1			lda XN
 10289 65A4 91 84			sta (:bp2),y
 10290 65A6 C8				iny
 10291 65A7 AD B6 A1			lda XN+1
 10292 65AA 91 84			sta (:bp2),y
 10293
 10294 				; optimize OK (service.pas), line = 1932
 10295
 10296 65AC AC A2 A1 84 84 AC + 	mwy Y2 :bp2
 10297 65B6 A0 00			ldy #$00
 10298 65B8 AD B7 A1			lda YN
 10299 65BB 91 84			sta (:bp2),y
 10300 65BD C8				iny
 10301 65BE AD B8 A1			lda YN+1
 10302 65C1			l_192B
 10303 65C1 91 84			sta (:bp2),y
 10304 65C3			l_193D
 10305 65C3 4C CB 65			jmp l_195D
 10306 65C6			l_1798
 10307
 10308 				; optimize OK (service.pas), line = 1937
 10309
 10310 65C6 A9 02			lda #$02
 10311 65C8 20 BC 3D			jsr FATAL_ERROR
 10312 65CB			l_195D
 10313
 10314 				; optimize OK (service.pas), line = 1940
 10315
 10316 65CB AC 9C A1 84 84 AC + 	mwy X1 :bp2
 10317 65D5 A0 00			ldy #$00
 10318 65D7 B1 84			lda (:bp2),y
 10319 65D9 38 E9 10			sub #$10
 10320 65DC 91 84			sta (:bp2),y
 10321 65DE C8				iny
 10322 65DF B1 84			lda (:bp2),y
 10323 65E1 E9 00			sbc #$00
 10324 65E3 91 84			sta (:bp2),y
 10325
 10326 				; optimize OK (service.pas), line = 1941
 10327
 10328 65E5 AC 9E A1 84 84 AC + 	mwy Y1 :bp2
 10329 65EF A0 00			ldy #$00
 10330 65F1 B1 84			lda (:bp2),y
 10331 65F3 38 E9 18			sub #$18
 10332 65F6 91 84			sta (:bp2),y
 10333 65F8 C8				iny
 10334 65F9 B1 84			lda (:bp2),y
 10335 65FB E9 00			sbc #$00
 10336 65FD 91 84			sta (:bp2),y
 10337
 10338 				; optimize OK (service.pas), line = 1942
 10339
 10340 65FF AC A0 A1 84 84 AC + 	mwy X2 :bp2
 10341 6609 A0 00			ldy #$00
 10342 660B B1 84			lda (:bp2),y
 10343 660D 38 E9 10			sub #$10
 10344 6610 91 84			sta (:bp2),y
 10345 6612 C8				iny
 10346 6613 B1 84			lda (:bp2),y
 10347 6615 E9 00			sbc #$00
 10348 6617 91 84			sta (:bp2),y
 10349
 10350 				; optimize OK (service.pas), line = 1943
 10351
 10352 6619 AC A2 A1 84 84 AC + 	mwy Y2 :bp2
 10353 6623 A0 00			ldy #$00
 10354 6625 B1 84			lda (:bp2),y
 10355 6627 38 E9 18			sub #$18
 10356 662A 91 84			sta (:bp2),y
 10357 662C C8				iny
 10358 662D B1 84			lda (:bp2),y
 10359 662F E9 00			sbc #$00
 10360 6631 91 84			sta (:bp2),y
 10361
 10362 				; optimize OK (service.pas), line = 1946
 10363
 10364 6633 AC 9C A1 84 84 AC + 	mwy X1 :bp2
 10365 663D A0 00			ldy #$00
 10366 663F B1 84			lda (:bp2),y
 10367 6641 8D CB A0			sta MAX.B
 10368 6644 C8				iny
 10369 6645 B1 84			lda (:bp2),y
 10370 6647 8D CC A0			sta MAX.B+1
 10371 664A A9 00			lda #$00
 10372 664C 8D C9 A0			sta MAX.A
 10373 664F 8D CA A0			sta MAX.A+1
 10374 6652 20 66 3D			jsr MAX
 10375 6655 A9 CF			lda #$CF
 10376 6657 8D CF A0			sta MIN.A
 10377 665A A9 00			lda #$00
 10378 665C 8D D0 A0			sta MIN.A+1
 10379 665F AD CD A0			lda MAX.RESULT
 10380 6662 8D D1 A0			sta MIN.B
 10381 6665 AD CE A0			lda MAX.RESULT+1
 10382 6668 8D D2 A0			sta MIN.B+1
 10383 666B 20 91 3D			jsr MIN
 10384 666E AC 9C A1 84 84 AC + 	mwy X1 :bp2
 10385 6678 A0 00			ldy #$00
 10386 667A AD D3 A0			lda MIN.RESULT
 10387 667D 91 84			sta (:bp2),y
 10388 667F C8				iny
 10389 6680 AD D4 A0			lda MIN.RESULT+1
 10390 6683 91 84			sta (:bp2),y
 10391
 10392 				; optimize OK (service.pas), line = 1947
 10393
 10394 6685 AC A0 A1 84 84 AC + 	mwy X2 :bp2
 10395 668F A0 00			ldy #$00
 10396 6691 B1 84			lda (:bp2),y
 10397 6693 8D CB A0			sta MAX.B
 10398 6696 C8				iny
 10399 6697 B1 84			lda (:bp2),y
 10400 6699 8D CC A0			sta MAX.B+1
 10401 669C A9 00			lda #$00
 10402 669E 8D C9 A0			sta MAX.A
 10403 66A1 8D CA A0			sta MAX.A+1
 10404 66A4 20 66 3D			jsr MAX
 10405 66A7 A9 CF			lda #$CF
 10406 66A9 8D CF A0			sta MIN.A
 10407 66AC A9 00			lda #$00
 10408 66AE 8D D0 A0			sta MIN.A+1
 10409 66B1 AD CD A0			lda MAX.RESULT
 10410 66B4 8D D1 A0			sta MIN.B
 10411 66B7 AD CE A0			lda MAX.RESULT+1
 10412 66BA 8D D2 A0			sta MIN.B+1
 10413 66BD 20 91 3D			jsr MIN
 10414 66C0 AC A0 A1 84 84 AC + 	mwy X2 :bp2
 10415 66CA A0 00			ldy #$00
 10416 66CC AD D3 A0			lda MIN.RESULT
 10417 66CF 91 84			sta (:bp2),y
 10418 66D1 C8				iny
 10419 66D2 AD D4 A0			lda MIN.RESULT+1
 10420 66D5 91 84			sta (:bp2),y
 10421
 10422 				; optimize OK (service.pas), line = 1954
 10423
 10424 66D7 AD C5 A1			lda COLLISION
 10425 66DA 8D A4 A1			sta RESULT
 10426 66DD			@exit
 10427
 10428 				; ------------------------------------------------------------
 10429
 10430 = A19C			X1	= DATAORIGIN+$0311
 10431 = A19E			Y1	= DATAORIGIN+$0313
 10432 = A1A0			X2	= DATAORIGIN+$0315
 10433 = A1A2			Y2	= DATAORIGIN+$0317
 10434 = A1A4			RESULT	= DATAORIGIN+$0319
 10435 = A1A5			X	= DATAORIGIN+$031A
 10436 = A1A7			Y	= DATAORIGIN+$031C
 10437 = A1A9			XK	= DATAORIGIN+$031E
 10438 = A1AB			YK	= DATAORIGIN+$0320
 10439 = A1AD			XJ	= DATAORIGIN+$0322
 10440 = A1AF			YJ	= DATAORIGIN+$0324
 10441 = A1B1			XH	= DATAORIGIN+$0326
 10442 = A1B3			YH	= DATAORIGIN+$0328
 10443 = A1B5			XN	= DATAORIGIN+$032A
 10444 = A1B7			YN	= DATAORIGIN+$032C
 10445 = A1B9			XP1	= DATAORIGIN+$032E
 10446 = A1BB			YP1	= DATAORIGIN+$0330
 10447 = A1BD			XP2	= DATAORIGIN+$0332
 10448 = A1BF			YP2	= DATAORIGIN+$0334
 10449 = A1C1			XP	= DATAORIGIN+$0336
 10450 = A1C3			YP	= DATAORIGIN+$0338
 10451 = A1C5			COLLISION	= DATAORIGIN+$033A
 10452
 10453 = A19C			@VarData	= X1
 10454 = 0029			@VarDataSize	= 41
 10455
 10456 66DD 60				rts						; ret
 10457 				.endl
 10458
 10459 66DE			.local	SHOOT_BLOCK					; PROCEDURE
 10460
 10461 				; optimize OK (service.pas), line = 1965
 10462
 10463 66DE AD C7 A1			lda XB+1
 10464 66E1 10 03 4C EF 68		jmi l_19B1
 10465 66E6 AD C6 A1			lda XB
 10466 66E9 C9 0D			cmp #$0D
 10467 66EB AD C7 A1			lda XB+1
 10468 66EE E9 00			sbc #$00
 10469 66F0 50 02			svc
 10470 66F2 49 80			eor #$80
 10471 66F4 30 03 4C EF 68		jpl l_19B1
 10472 66F9 AD C9 A1			lda YB+1
 10473 66FC 10 03 4C EF 68		jmi l_19B1
 10474 6701 AD C8 A1			lda YB
 10475 6704 C9 0F			cmp #$0F
 10476 6706 AD C9 A1			lda YB+1
 10477 6709 E9 00			sbc #$00
 10478 670B 50 02			svc
 10479 670D 49 80			eor #$80
 10480 670F 30 03 4C EF 68		jpl l_19B1
 10481
 10482 				; optimize OK (service.pas), line = 1968
 10483
 10484 6714 AD C8 A1			lda YB
 10485 6717 0A				asl @
 10486 6718 0A				asl @
 10487 6719 0A				asl @
 10488 671A 0A				asl @
 10489 671B 18 6D C6 A1			add XB
 10490 671F 8D CE A1			sta I
 10491
 10492 				; optimize OK (service.pas), line = 1970
 10493
 10494 6722 A8				tay
 10495 6723 B9 00 DB			lda adr.WALL,y
 10496 6726 D0 03 4C EF 68		jeq l_19D5
 10497
 10498 				; optimize OK (service.pas), line = 1972
 10499
 10500 672B C9 0A			cmp #$0A
 10501 672D 90 03 4C 65 68		jcs l_19EB
 10502
 10503 				; optimize OK (service.pas), line = 1974
 10504
 10505 6732 AD C6 A1			lda XB
 10506 6735 8D 78 A1			sta REMOVE_BLOCK.XA
 10507 6738 AD C8 A1			lda YB
 10508 673B 8D 79 A1			sta REMOVE_BLOCK.YA
 10509 673E 20 98 55			jsr REMOVE_BLOCK
 10510
 10511 				; optimize FAIL (0, service.pas), line = 1975
 10512
 10513 6741 CE 4D A0			dec REMAIN_BLK
 10514
 10515 				; optimize OK (service.pas), line = 1979
 10516
 10517 6744 AD 6A A0			lda CUR_PLAYER
 10518 6747 0A				asl @
 10519 6748 0A				asl @
 10520 6749 85 9F			sta :STACKORIGIN+9
 10521 674B AC CE A1			ldy I
 10522 674E B9 00 DB			lda adr.WALL,y
 10523 6751 0A				asl @
 10524 6752 A8				tay
 10525 6753 B9 69 20			lda adr.SCORE_WALL,y
 10526 6756 85 A0			sta :STACKORIGIN+10
 10527 6758 B9 6A 20			lda adr.SCORE_WALL+1,y
 10528 675B 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10529 675D A4 9F			ldy :STACKORIGIN+9
 10530 675F B9 4F A0			lda adr.SCORE.PLAYER,y
 10531 6762 18 65 A0			add :STACKORIGIN+10
 10532 6765 99 4F A0			sta adr.SCORE.PLAYER,y
 10533 6768 B9 50 A0			lda adr.SCORE.PLAYER+1,y
 10534 676B 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10535 676D 99 50 A0			sta adr.SCORE.PLAYER+1,y
 10536 6770 B9 51 A0			lda adr.SCORE.PLAYER+2,y
 10537 6773 69 00			adc #$00
 10538 6775 99 51 A0			sta adr.SCORE.PLAYER+2,y
 10539 6778 B9 52 A0			lda adr.SCORE.PLAYER+3,y
 10540 677B 69 00			adc #$00
 10541 677D 99 52 A0			sta adr.SCORE.PLAYER+3,y
 10542
 10543 				; optimize OK (service.pas), line = 1981
 10544
 10545 6780 A9 2C			lda #$2C
 10546 6782 8D C3 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 10547 6785 A9 01			lda #$01
 10548 6787 8D C4 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 10549 678A 20 28 33			jsr SYSTEM.RANDOM.@010184000
 10550 678D AD 7A A0			lda LETT.INCOMING
 10551 6790 18 6D C5 9E			add SYSTEM.RANDOM.@010184000.RESULT
 10552 6794 8D 7A A0			sta LETT.INCOMING
 10553 6797 AD 7B A0			lda LETT.INCOMING+1
 10554 679A 6D C6 9E			adc SYSTEM.RANDOM.@010184000.RESULT+1
 10555 679D 8D 7B A0			sta LETT.INCOMING+1
 10556
 10557 				; optimize OK (service.pas), line = 1983
 10558
 10559 67A0 AD C6 A1			lda XB
 10560 67A3 85 9F			sta :STACKORIGIN+9
 10561 67A5 A0 00			ldy #$00
 10562 67A7 AD C7 A1			lda XB+1
 10563 67AA 10 01			spl
 10564 67AC 88				dey
 10565 67AD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10566 67AF 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10567 67B1 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10568 67B3 06 9F			asl :STACKORIGIN+9
 10569 67B5 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10570 67B7 26 BF			rol :STACKORIGIN+STACKWIDTH*2+9
 10571 67B9 26 CF			rol :STACKORIGIN+STACKWIDTH*3+9
 10572 67BB 06 9F			asl :STACKORIGIN+9
 10573 67BD 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10574 67BF 06 9F			asl :STACKORIGIN+9
 10575 67C1 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10576 67C3 06 9F			asl :STACKORIGIN+9
 10577 67C5 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10578 67C7 A5 9F			lda :STACKORIGIN+9
 10579 67C9 18 69 09			add #$09
 10580 67CC 8D 7C A0			sta LETT.NEXTX
 10581 67CF A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10582 67D1 69 00			adc #$00
 10583 67D3 8D 7D A0			sta LETT.NEXTX+1
 10584
 10585 				; optimize OK (service.pas), line = 1984
 10586
 10587 67D6 AD C8 A1			lda YB
 10588 67D9 85 9F			sta :STACKORIGIN+9
 10589 67DB A0 00			ldy #$00
 10590 67DD AD C9 A1			lda YB+1
 10591 67E0 10 01			spl
 10592 67E2 88				dey
 10593 67E3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10594 67E5 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 10595 67E7 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 10596 67E9 A5 9F			lda :STACKORIGIN+9
 10597 67EB 18 69 01			add #$01
 10598 67EE 85 9F			sta :STACKORIGIN+9
 10599 67F0 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10600 67F2 69 00			adc #$00
 10601 67F4 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 10602 67F6 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 10603 67F8 69 00			adc #$00
 10604 67FA 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 10605 67FC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 10606 67FE 69 00			adc #$00
 10607 6800 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 10608 6802 06 9F			asl :STACKORIGIN+9
 10609 6804 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10610 6806 06 9F			asl :STACKORIGIN+9
 10611 6808 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10612 680A 06 9F			asl :STACKORIGIN+9
 10613 680C 26 AF			rol :STACKORIGIN+STACKWIDTH+9
 10614 680E A5 9F			lda :STACKORIGIN+9
 10615 6810 18 69 16			add #$16
 10616 6813 8D 7E A0			sta LETT.NEXTY
 10617 6816 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 10618 6818 69 00			adc #$00
 10619 681A 8D 7F A0			sta LETT.NEXTY+1
 10620
 10621 				; optimize FAIL ('RANDOM_LETTER_DROP', service.pas), line = 1985
 10622
 10623 681D 20 60 40			jsr RANDOM_LETTER_DROP
 10624 6820 AD E9 A0			lda RANDOM_LETTER_DROP.RESULT
 10625 6823 8D 80 A0			sta LETT.NEXTTYPE
 10626 6826 AD EA A0			lda RANDOM_LETTER_DROP.RESULT+1
 10627 6829 8D 81 A0			sta LETT.NEXTTYPE+1
 10628
 10629 				; optimize OK (service.pas), line = 1987
 10630
 10631 682C AC CE A1			ldy I
 10632 682F A9 00			lda #$00
 10633 6831 99 00 DB			sta adr.WALL,y
 10634
 10635 				; optimize OK (service.pas), line = 1988
 10636
 10637 6834 A9 B8			lda #$B8
 10638 6836 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10639 6839 A9 01			lda #$01
 10640 683B 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10641 683E A9 03			lda #$03
 10642 6840 8D 76 9F			sta BALL_BLOCK_SOUND.B
 10643 6843 A9 00			lda #$00
 10644 6845 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 10645 6848 20 51 39			jsr BALL_BLOCK_SOUND
 10646
 10647 				; optimize OK (service.pas), line = 1989
 10648
 10649 684B AC CA A1 84 84 AC + 	mwy BALL :bp2
 10650 6855 A0 14			ldy #BALL.SBD-DATAORIGIN
 10651 6857 A9 00			lda #$00
 10652 6859 91 84			sta (:bp2),y
 10653 685B C8				iny
 10654 685C 91 84			sta (:bp2),y
 10655
 10656 				; optimize OK (service.pas), line = 1990
 10657
 10658 685E A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10659 6860 91 84			sta (:bp2),y
 10660 6862 4C EF 68			jmp l_1A3F
 10661 6865			l_19EB
 10662
 10663 				; optimize OK (service.pas), line = 1995
 10664
 10665 6865 AC CE A1			ldy I
 10666 6868 B9 00 DB			lda adr.WALL,y
 10667 686B 29 0F			and #$0F
 10668 686D C9 09			cmp #$09
 10669 686F D0 45			jne l_1A58
 10670
 10671 				; optimize OK (service.pas), line = 1997
 10672
 10673 6871 AC CA A1 84 84 AC + 	mwy BALL :bp2
 10674 687B A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10675 687D A9 00			lda #$00
 10676 687F 91 84			sta (:bp2),y
 10677
 10678 				; optimize OK (service.pas), line = 1998
 10679
 10680 6881 AC CE A1			ldy I
 10681 6884 B9 00 DB			lda adr.WALL,y
 10682 6887 38 E9 10			sub #$10
 10683 688A 99 00 DB			sta adr.WALL,y
 10684
 10685 				; optimize OK (service.pas), line = 2000
 10686
 10687 688D A9 72			lda #$72
 10688 688F 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10689 6892 A9 01			lda #$01
 10690 6894 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10691 6897 A9 04			lda #$04
 10692 6899 8D 76 9F			sta BALL_BLOCK_SOUND.B
 10693 689C A9 00			lda #$00
 10694 689E 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 10695 68A1 20 51 39			jsr BALL_BLOCK_SOUND
 10696
 10697 				; optimize OK (service.pas), line = 2001
 10698
 10699 68A4 AD C6 A1			lda XB
 10700 68A7 8D E7 A0			sta SHINE.XB
 10701 68AA AD C8 A1			lda YB
 10702 68AD 8D E8 A0			sta SHINE.YB
 10703 68B0 20 24 40			jsr SHINE
 10704 68B3 4C EF 68			jmp l_1A72
 10705 68B6			l_1A58
 10706
 10707 				; optimize OK (service.pas), line = 2005
 10708
 10709 68B6 AC CA A1 84 84 AC + 	mwy BALL :bp2
 10710 68C0 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 10711 68C2 B1 84			lda (:bp2),y
 10712 68C4 18 69 01			add #$01
 10713 68C7 91 84			sta (:bp2),y
 10714
 10715 				; optimize OK (service.pas), line = 2006
 10716
 10717 68C9 AD C6 A1			lda XB
 10718 68CC 8D E7 A0			sta SHINE.XB
 10719 68CF AD C8 A1			lda YB
 10720 68D2 8D E8 A0			sta SHINE.YB
 10721 68D5 20 24 40			jsr SHINE
 10722
 10723 				; optimize OK (service.pas), line = 2008
 10724
 10725 68D8 A9 C8			lda #$C8
 10726 68DA 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10727 68DD A9 00			lda #$00
 10728 68DF 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10729 68E2 A9 07			lda #$07
 10730 68E4 8D 76 9F			sta BALL_BLOCK_SOUND.B
 10731 68E7 A9 00			lda #$00
 10732 68E9 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 10733 68EC 20 51 39			jsr BALL_BLOCK_SOUND
 10734 68EF			l_1A72
 10735 68EF			l_1A3F
 10736 68EF			l_19D5
 10737 68EF			l_19B1
 10738
 10739 				; ------------------------------------------------------------
 10740
 10741 = A1C6			XB	= DATAORIGIN+$033B
 10742 = A1C8			YB	= DATAORIGIN+$033D
 10743 = A1CA			BALL	= DATAORIGIN+$033F
 10744 = 9E8B			BALL.X	= DATAORIGIN+$0000
 10745 = 9E8D			BALL.Y	= DATAORIGIN+$0002
 10746 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
 10747 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
 10748 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
 10749 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
 10750 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
 10751 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
 10752 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
 10753 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
 10754 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
 10755 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
 10756 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
 10757 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
 10758 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
 10759 = 9EA6			BALL.STM	= DATAORIGIN+$001B
 10760 = A1CE			I	= DATAORIGIN+$0343
 10761
 10762 = A1C6			@VarData	= XB
 10763 = 0007			@VarDataSize	= 7
 10764
 10765 68EF			@exit
 10766 					.ifdef @new
 10767 					lda <@VarData
 10768 					sta :ztmp
 10769 					lda >@VarData
 10770 					ldy #@VarDataSize-1
 10771 					jmp @FreeMem
 10772 					els
 10773 68EF 60				rts						; ret
 10774 					eif
 10775 				.endl
 10776
 10777 68F0			.local	SHOOT_BLOCK_WITH_FIRE				; PROCEDURE
 10778
 10779 				; optimize OK (service.pas), line = 2019
 10780
 10781 68F0 AD D0 A1			lda XB+1
 10782 68F3 10 03 4C 0A 6A		jmi l_1AB5
 10783 68F8 AD CF A1			lda XB
 10784 68FB C9 0D			cmp #$0D
 10785 68FD AD D0 A1			lda XB+1
 10786 6900 E9 00			sbc #$00
 10787 6902 50 02			svc
 10788 6904 49 80			eor #$80
 10789 6906 30 03 4C 0A 6A		jpl l_1AB5
 10790 690B AD D2 A1			lda YB+1
 10791 690E 10 03 4C 0A 6A		jmi l_1AB5
 10792 6913 AD D1 A1			lda YB
 10793 6916 C9 0F			cmp #$0F
 10794 6918 AD D2 A1			lda YB+1
 10795 691B E9 00			sbc #$00
 10796 691D 50 02			svc
 10797 691F 49 80			eor #$80
 10798 6921 30 03 4C 0A 6A		jpl l_1AB5
 10799
 10800 				; optimize OK (service.pas), line = 2022
 10801
 10802 6926 AD D1 A1			lda YB
 10803 6929 0A				asl @
 10804 692A 0A				asl @
 10805 692B 0A				asl @
 10806 692C 0A				asl @
 10807 692D 18 6D CF A1			add XB
 10808 6931 8D D3 A1			sta I
 10809
 10810 				; optimize OK (service.pas), line = 2024
 10811
 10812 6934 A8				tay
 10813 6935 B9 00 DB			lda adr.WALL,y
 10814 6938 D0 03 4C 0A 6A		jeq l_1AD9
 10815
 10816 				; optimize OK (service.pas), line = 2026
 10817
 10818 693D C9 0A			cmp #$0A
 10819 693F B0 65			jcs l_1AEF
 10820
 10821 				; optimize OK (service.pas), line = 2028
 10822
 10823 6941 AD CF A1			lda XB
 10824 6944 8D 78 A1			sta REMOVE_BLOCK.XA
 10825 6947 AD D1 A1			lda YB
 10826 694A 8D 79 A1			sta REMOVE_BLOCK.YA
 10827 694D 20 98 55			jsr REMOVE_BLOCK
 10828
 10829 				; optimize FAIL (0, service.pas), line = 2029
 10830
 10831 6950 CE 4D A0			dec REMAIN_BLK
 10832
 10833 				; optimize OK (service.pas), line = 2030
 10834
 10835 6953 AD 6A A0			lda CUR_PLAYER
 10836 6956 0A				asl @
 10837 6957 0A				asl @
 10838 6958 85 9F			sta :STACKORIGIN+9
 10839 695A AC D3 A1			ldy I
 10840 695D B9 00 DB			lda adr.WALL,y
 10841 6960 0A				asl @
 10842 6961 A8				tay
 10843 6962 B9 69 20			lda adr.SCORE_WALL,y
 10844 6965 85 A0			sta :STACKORIGIN+10
 10845 6967 B9 6A 20			lda adr.SCORE_WALL+1,y
 10846 696A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 10847 696C A4 9F			ldy :STACKORIGIN+9
 10848 696E B9 4F A0			lda adr.SCORE.PLAYER,y
 10849 6971 18 65 A0			add :STACKORIGIN+10
 10850 6974 99 4F A0			sta adr.SCORE.PLAYER,y
 10851 6977 B9 50 A0			lda adr.SCORE.PLAYER+1,y
 10852 697A 65 B0			adc :STACKORIGIN+STACKWIDTH+10
 10853 697C 99 50 A0			sta adr.SCORE.PLAYER+1,y
 10854 697F B9 51 A0			lda adr.SCORE.PLAYER+2,y
 10855 6982 69 00			adc #$00
 10856 6984 99 51 A0			sta adr.SCORE.PLAYER+2,y
 10857 6987 B9 52 A0			lda adr.SCORE.PLAYER+3,y
 10858 698A 69 00			adc #$00
 10859 698C 99 52 A0			sta adr.SCORE.PLAYER+3,y
 10860
 10861 				; optimize OK (service.pas), line = 2031
 10862
 10863 698F AC D3 A1			ldy I
 10864 6992 A9 00			lda #$00
 10865 6994 99 00 DB			sta adr.WALL,y
 10866
 10867 				; optimize OK (service.pas), line = 2032
 10868
 10869 6997 A9 B8			lda #$B8
 10870 6999 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10871 699C A9 01			lda #$01
 10872 699E 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10873 69A1 A9 03			lda #$03
 10874 69A3 4C FF 69			jmp l_1B17
 10875 69A6			l_1AEF
 10876
 10877 				; optimize OK (service.pas), line = 2037
 10878
 10879 69A6 AC D3 A1			ldy I
 10880 69A9 B9 00 DB			lda adr.WALL,y
 10881 69AC 29 0F			and #$0F
 10882 69AE C9 09			cmp #$09
 10883 69B0 D0 32			jne l_1B30
 10884
 10885 				; optimize OK (service.pas), line = 2039
 10886
 10887 69B2 B9 00 DB			lda adr.WALL,y
 10888 69B5 38 E9 10			sub #$10
 10889 69B8 99 00 DB			sta adr.WALL,y
 10890
 10891 				; optimize OK (service.pas), line = 2040
 10892
 10893 69BB A9 72			lda #$72
 10894 69BD 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10895 69C0 A9 01			lda #$01
 10896 69C2 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10897 69C5 A9 04			lda #$04
 10898 69C7 8D 76 9F			sta BALL_BLOCK_SOUND.B
 10899 69CA A9 00			lda #$00
 10900 69CC 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 10901 69CF 20 51 39			jsr BALL_BLOCK_SOUND
 10902
 10903 				; optimize OK (service.pas), line = 2041
 10904
 10905 69D2 AD CF A1			lda XB
 10906 69D5 8D E7 A0			sta SHINE.XB
 10907 69D8 AD D1 A1			lda YB
 10908 69DB 8D E8 A0			sta SHINE.YB
 10909 69DE 20 24 40			jsr SHINE
 10910 69E1 4C 0A 6A			jmp l_1B46
 10911 69E4			l_1B30
 10912
 10913 				; optimize OK (service.pas), line = 2045
 10914
 10915 69E4 AD CF A1			lda XB
 10916 69E7 8D E7 A0			sta SHINE.XB
 10917 69EA AD D1 A1			lda YB
 10918 69ED 8D E8 A0			sta SHINE.YB
 10919 69F0 20 24 40			jsr SHINE
 10920
 10921 				; optimize OK (service.pas), line = 2046
 10922
 10923 69F3 A9 C8			lda #$C8
 10924 69F5 8D 74 9F			sta BALL_BLOCK_SOUND.A
 10925 69F8 A9 00			lda #$00
 10926 69FA 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 10927 69FD A9 07			lda #$07
 10928 69FF			l_1B17
 10929 69FF 8D 76 9F			sta BALL_BLOCK_SOUND.B
 10930 6A02 A9 00			lda #$00
 10931 6A04 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 10932 6A07 20 51 39			jsr BALL_BLOCK_SOUND
 10933 6A0A			l_1B46
 10934 6A0A			l_1AD9
 10935 6A0A			l_1AB5
 10936
 10937 				; ------------------------------------------------------------
 10938
 10939 = A1CF			XB	= DATAORIGIN+$0344
 10940 = A1D1			YB	= DATAORIGIN+$0346
 10941 = A1D3			I	= DATAORIGIN+$0348
 10942
 10943 = A1CF			@VarData	= XB
 10944 = 0005			@VarDataSize	= 5
 10945
 10946 6A0A			@exit
 10947 					.ifdef @new
 10948 					lda <@VarData
 10949 					sta :ztmp
 10950 					lda >@VarData
 10951 					ldy #@VarDataSize-1
 10952 					jmp @FreeMem
 10953 					els
 10954 6A0A 60				rts						; ret
 10955 					eif
 10956 				.endl
 10957
 10958 6A0B			.local	BALL_HIT_BLOCK					; PROCEDURE
 10959
 10960 				; optimize OK (service.pas), line = 2080
 10961
 10962 6A0B A9 FF			lda #$FF
 10963 6A0D 8D F6 A1			sta EMERGENCY
 10964
 10965 				; optimize OK (service.pas), line = 2082
 10966
 10967 6A10 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 10968 6A1A A0 00			ldy #BALL.X-DATAORIGIN
 10969 6A1C B1 84			lda (:bp2),y
 10970 6A1E 38 E9 09			sub #$09
 10971 6A21 8D E2 A1			sta NX
 10972 6A24 C8				iny
 10973 6A25 B1 84			lda (:bp2),y
 10974 6A27 E9 00			sbc #$00
 10975 6A29 8D E3 A1			sta NX+1
 10976
 10977 				; optimize OK (service.pas), line = 2083
 10978
 10979 6A2C A0 02			ldy #BALL.Y-DATAORIGIN
 10980 6A2E B1 84			lda (:bp2),y
 10981 6A30 38 E9 16			sub #$16
 10982 6A33 8D E4 A1			sta NY
 10983 6A36 C8				iny
 10984 6A37 B1 84			lda (:bp2),y
 10985 6A39 E9 00			sbc #$00
 10986 6A3B 8D E5 A1			sta NY+1
 10987
 10988 				; optimize OK (service.pas), line = 2086
 10989
 10990 6A3E A0 08			ldy #BALL.OLDX-DATAORIGIN
 10991 6A40 B1 84			lda (:bp2),y
 10992 6A42 38 E9 09			sub #$09
 10993 6A45 8D DE A1			sta OX
 10994 6A48 C8				iny
 10995 6A49 B1 84			lda (:bp2),y
 10996 6A4B E9 00			sbc #$00
 10997 6A4D 8D DF A1			sta OX+1
 10998
 10999 				; optimize OK (service.pas), line = 2087
 11000
 11001 6A50 A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11002 6A52 B1 84			lda (:bp2),y
 11003 6A54 38 E9 16			sub #$16
 11004 6A57 8D E0 A1			sta OY
 11005 6A5A C8				iny
 11006 6A5B B1 84			lda (:bp2),y
 11007 6A5D E9 00			sbc #$00
 11008 6A5F 8D E1 A1			sta OY+1
 11009
 11010 				; optimize OK (service.pas), line = 2089
 11011
 11012 6A62 AD E3 A1			lda NX+1
 11013 6A65 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11014 6A67 AD E2 A1			lda NX
 11015 6A6A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11016 6A6C 6A				ror @
 11017 6A6D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11018 6A6F 6A				ror @
 11019 6A70 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11020 6A72 6A				ror @
 11021 6A73 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11022 6A75 6A				ror @
 11023 6A76 8D DC A1			sta XB
 11024
 11025 				; optimize OK (service.pas), line = 2090
 11026
 11027 6A79 AD E5 A1			lda NY+1
 11028 6A7C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11029 6A7E AD E4 A1			lda NY
 11030 6A81 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11031 6A83 6A				ror @
 11032 6A84 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11033 6A86 6A				ror @
 11034 6A87 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11035 6A89 6A				ror @
 11036 6A8A 8D DD A1			sta YB
 11037
 11038 				; optimize OK (service.pas), line = 2094
 11039
 11040 6A8D A9 10			lda #$10
 11041 6A8F 85 8E			sta :ecx
 11042 6A91 85 92			sta :ztmp8
 11043 6A93 AD DD A1			lda YB
 11044 6A96 85 86			sta :eax
 11045 6A98 85 94			sta :ztmp10
 11046 					.ifdef fmulinit
 11047 					fmulu_8
 11048 					els
 11049 6A9A 20 BF 22			imulCL
 11050 					eif
 11051 6A9D 24 94			bit :ztmp10
 11052 6A9F 10 03			bpl @+
 11053 6AA1 38 E5 92			sub :ztmp8
 11054 				@
 11055 6AA4 24 92			bit :ztmp8
 11056 6AA6 10 03			bpl @+
 11057 6AA8 38 E5 94			sub :ztmp10
 11058 				@
 11059 6AAB 85 87			sta :eax+1
 11060 6AAD A5 86			lda :eax
 11061 6AAF 18 6D DC A1			add XB
 11062 6AB3 A8				tay
 11063 6AB4 B9 00 DB			lda adr.WALL,y
 11064 6AB7 D0 03 4C A2 75		jeq l_1BAF
 11065
 11066 				; optimize OK (service.pas), line = 2096
 11067
 11068 6ABC A9 DE			lda <OX
 11069 6ABE 8D 9C A1			sta SPLIT_LINE.X1
 11070 6AC1 A9 A1			lda >OX
 11071 6AC3 8D 9D A1			sta SPLIT_LINE.X1+1
 11072 6AC6 A9 E0			lda <OY
 11073 6AC8 8D 9E A1			sta SPLIT_LINE.Y1
 11074 6ACB A9 A1			lda >OY
 11075 6ACD 8D 9F A1			sta SPLIT_LINE.Y1+1
 11076 6AD0 A9 E2			lda <NX
 11077 6AD2 8D A0 A1			sta SPLIT_LINE.X2
 11078 6AD5 A9 A1			lda >NX
 11079 6AD7 8D A1 A1			sta SPLIT_LINE.X2+1
 11080 6ADA A9 E4			lda <NY
 11081 6ADC 8D A2 A1			sta SPLIT_LINE.Y2
 11082 6ADF A9 A1			lda >NY
 11083 6AE1 8D A3 A1			sta SPLIT_LINE.Y2+1
 11084 6AE4 20 16 5F			jsr SPLIT_LINE
 11085 6AE7 AD A4 A1			lda SPLIT_LINE.RESULT
 11086 6AEA 8D FA A1			sta COLLISION
 11087
 11088 				; optimize OK (service.pas), line = 2102
 11089
 11090 6AED C9 03			cmp #$03
 11091 6AEF F0 03 4C E3 6D		jne l_1BCA
 11092
 11093 				; optimize OK (service.pas), line = 2104
 11094
 11095 6AF4 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11096 6AFE A0 08			ldy #BALL.OLDX-DATAORIGIN
 11097 6B00 B1 84			lda (:bp2),y
 11098 6B02 C8				iny
 11099 6B03 38 ED DE A1			sub OX
 11100 6B07 38 E9 09			sub #$09
 11101 6B0A 8D DA A1			sta LX
 11102
 11103 				; optimize OK (service.pas), line = 2105
 11104
 11105 6B0D A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11106 6B0F B1 84			lda (:bp2),y
 11107 6B11 C8				iny
 11108 6B12 38 ED E0 A1			sub OY
 11109 6B16 38 E9 16			sub #$16
 11110 6B19 8D DB A1			sta LY
 11111
 11112 				; optimize OK (service.pas), line = 2107
 11113
 11114 6B1C A0 08			ldy #BALL.OLDX-DATAORIGIN
 11115 6B1E B1 84			lda (:bp2),y
 11116 6B20 38 ED E2 A1			sub NX
 11117 6B24 85 9F			sta :STACKORIGIN+9
 11118 6B26 C8				iny
 11119 6B27 B1 84			lda (:bp2),y
 11120 6B29 ED E3 A1			sbc NX+1
 11121 6B2C 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11122 6B2E A5 9F			lda :STACKORIGIN+9
 11123 6B30 38 E9 09			sub #$09
 11124 6B33 8D E6 A1			sta MX
 11125 6B36 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11126 6B38 E9 00			sbc #$00
 11127 6B3A 8D E7 A1			sta MX+1
 11128
 11129 				; optimize OK (service.pas), line = 2108
 11130
 11131 6B3D A0 0A			ldy #BALL.OLDY-DATAORIGIN
 11132 6B3F B1 84			lda (:bp2),y
 11133 6B41 38 ED E4 A1			sub NY
 11134 6B45 85 9F			sta :STACKORIGIN+9
 11135 6B47 C8				iny
 11136 6B48 B1 84			lda (:bp2),y
 11137 6B4A ED E5 A1			sbc NY+1
 11138 6B4D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11139 6B4F A5 9F			lda :STACKORIGIN+9
 11140 6B51 38 E9 16			sub #$16
 11141 6B54 8D E8 A1			sta MY
 11142 6B57 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11143 6B59 E9 00			sbc #$00
 11144 6B5B 8D E9 A1			sta MY+1
 11145
 11146 				; optimize OK (service.pas), line = 2110
 11147
 11148 6B5E AD DA A1			lda LX
 11149 6B61 20 D1 2A			jsr SYSTEM.ABS.@010183000
 11150 6B64 A5 92			lda SYSTEM.ABS.@010183000.RESULT
 11151 6B66 8D F4 A1			sta A
 11152 6B69 AD DB A1			lda LY
 11153 6B6C 20 D1 2A			jsr SYSTEM.ABS.@010183000
 11154 6B6F A5 92			lda SYSTEM.ABS.@010183000.RESULT
 11155 6B71 8D F5 A1			sta B
 11156
 11157 				; optimize OK (service.pas), line = 2112
 11158
 11159 6B74 AD F4 A1			lda A
 11160 6B77 85 8E			sta :ecx
 11161 6B79 85 86			sta :eax
 11162 					.ifdef fmulinit
 11163 					fmulu_8
 11164 					els
 11165 6B7B 20 BF 22			imulCL
 11166 					eif
 11167 6B7E A5 86			lda :eax
 11168 6B80 85 9F			sta :STACKORIGIN+9
 11169 6B82 A5 87			lda :eax+1
 11170 6B84 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11171 6B86 AD F5 A1			lda B
 11172 6B89 85 8E			sta :ecx
 11173 6B8B 85 86			sta :eax
 11174 					.ifdef fmulinit
 11175 					fmulu_8
 11176 					els
 11177 6B8D 20 BF 22			imulCL
 11178 					eif
 11179 6B90 A5 86			lda :eax
 11180 6B92 18 65 9F			add :STACKORIGIN+9
 11181 6B95 8D F0 A1			sta F1
 11182 6B98 A5 87			lda :eax+1
 11183 6B9A 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11184 6B9C 8D F1 A1			sta F1+1
 11185
 11186 				; optimize OK (service.pas), line = 2114
 11187
 11188 6B9F AD E6 A1			lda MX
 11189 6BA2 85 8A			sta SYSTEM.ABS.@010184000.X
 11190 6BA4 AD E7 A1			lda MX+1
 11191 6BA7 85 8B			sta SYSTEM.ABS.@010184000.X+1
 11192 6BA9 20 DF 2A			jsr SYSTEM.ABS.@010184000
 11193 6BAC A5 92			lda SYSTEM.ABS.@010184000.RESULT
 11194 6BAE 8D F4 A1			sta A
 11195 6BB1 AD E8 A1			lda MY
 11196 6BB4 85 8A			sta SYSTEM.ABS.@010184000.X
 11197 6BB6 AD E9 A1			lda MY+1
 11198 6BB9 85 8B			sta SYSTEM.ABS.@010184000.X+1
 11199 6BBB 20 DF 2A			jsr SYSTEM.ABS.@010184000
 11200 6BBE A5 92			lda SYSTEM.ABS.@010184000.RESULT
 11201 6BC0 8D F5 A1			sta B
 11202
 11203 				; optimize OK (service.pas), line = 2116
 11204
 11205 6BC3 AD F4 A1			lda A
 11206 6BC6 85 8E			sta :ecx
 11207 6BC8 85 86			sta :eax
 11208 					.ifdef fmulinit
 11209 					fmulu_8
 11210 					els
 11211 6BCA 20 BF 22			imulCL
 11212 					eif
 11213 6BCD A5 86			lda :eax
 11214 6BCF 85 9F			sta :STACKORIGIN+9
 11215 6BD1 A5 87			lda :eax+1
 11216 6BD3 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11217 6BD5 AD F5 A1			lda B
 11218 6BD8 85 8E			sta :ecx
 11219 6BDA 85 86			sta :eax
 11220 					.ifdef fmulinit
 11221 					fmulu_8
 11222 					els
 11223 6BDC 20 BF 22			imulCL
 11224 					eif
 11225 6BDF A5 86			lda :eax
 11226 6BE1 18 65 9F			add :STACKORIGIN+9
 11227 6BE4 8D F2 A1			sta F2
 11228 6BE7 A5 87			lda :eax+1
 11229 6BE9 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11230 6BEB 8D F3 A1			sta F2+1
 11231
 11232 				; optimize OK (service.pas), line = 2118
 11233
 11234 6BEE AD F1 A1			lda F1+1
 11235 6BF1 CD F3 A1			cmp F2+1
 11236 6BF4 D0 06			bne @+
 11237 6BF6 AD F0 A1			lda F1
 11238 6BF9 CD F2 A1			cmp F2
 11239 				@
 11240 6BFC 90 03 4C F5 6C		jcs l_1C5F
 11241
 11242 				; optimize OK (service.pas), line = 2124
 11243
 11244 6C01 AD DF A1			lda OX+1
 11245 6C04 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 11246 6C06 AD DE A1			lda OX
 11247 6C09 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11248 6C0B 6A				ror @
 11249 6C0C 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11250 6C0E 6A				ror @
 11251 6C0F 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11252 6C11 6A				ror @
 11253 6C12 46 B0			lsr :STACKORIGIN+STACKWIDTH+10
 11254 6C14 6A				ror @
 11255 6C15 8D C9 A0			sta MAX.A
 11256 6C18 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 11257 6C1A 8D CA A0			sta MAX.A+1
 11258 6C1D A9 00			lda #$00
 11259 6C1F 8D CB A0			sta MAX.B
 11260 6C22 8D CC A0			sta MAX.B+1
 11261 6C25 20 66 3D			jsr MAX
 11262 6C28 A9 0C			lda #$0C
 11263 6C2A 8D CF A0			sta MIN.A
 11264 6C2D A9 00			lda #$00
 11265 6C2F 8D D0 A0			sta MIN.A+1
 11266 6C32 AD CD A0			lda MAX.RESULT
 11267 6C35 8D D1 A0			sta MIN.B
 11268 6C38 AD CE A0			lda MAX.RESULT+1
 11269 6C3B 8D D2 A0			sta MIN.B+1
 11270 6C3E 20 91 3D			jsr MIN
 11271 6C41 AD D3 A0			lda MIN.RESULT
 11272 6C44 8D DC A1			sta XB
 11273
 11274 				; optimize OK (service.pas), line = 2125
 11275
 11276 6C47 AD E0 A1			lda OY
 11277 6C4A 18 69 18			add #$18
 11278 6C4D 4A				lsr @
 11279 6C4E 4A				lsr @
 11280 6C4F 4A				lsr @
 11281 6C50 38 E9 03			sub #$03
 11282 6C53 8D DD A1			sta YB
 11283
 11284 				; optimize OK (service.pas), line = 2128
 11285
 11286 6C56 A9 10			lda #$10
 11287 6C58 85 8E			sta :ecx
 11288 6C5A 85 92			sta :ztmp8
 11289 6C5C AD DD A1			lda YB
 11290 6C5F 85 86			sta :eax
 11291 6C61 85 94			sta :ztmp10
 11292 					.ifdef fmulinit
 11293 					fmulu_8
 11294 					els
 11295 6C63 20 BF 22			imulCL
 11296 					eif
 11297 6C66 24 94			bit :ztmp10
 11298 6C68 10 03			bpl @+
 11299 6C6A 38 E5 92			sub :ztmp8
 11300 				@
 11301 6C6D 24 92			bit :ztmp8
 11302 6C6F 10 03			bpl @+
 11303 6C71 38 E5 94			sub :ztmp10
 11304 				@
 11305 6C74 85 87			sta :eax+1
 11306 6C76 A5 86			lda :eax
 11307 6C78 18 6D DC A1			add XB
 11308 6C7C A8				tay
 11309 6C7D B9 00 DB			lda adr.WALL,y
 11310 6C80 D0 58			jne l_1C9D
 11311
 11312 				; optimize OK (service.pas), line = 2130
 11313
 11314 6C82 AD E3 A1			lda NX+1
 11315 6C85 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11316 6C87 AD E2 A1			lda NX
 11317 6C8A 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11318 6C8C 6A				ror @
 11319 6C8D 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11320 6C8F 6A				ror @
 11321 6C90 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11322 6C92 6A				ror @
 11323 6C93 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11324 6C95 6A				ror @
 11325 6C96 8D CB A0			sta MAX.B
 11326 6C99 A9 00			lda #$00
 11327 6C9B 8D C9 A0			sta MAX.A
 11328 6C9E 8D CA A0			sta MAX.A+1
 11329 6CA1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11330 6CA3 8D CC A0			sta MAX.B+1
 11331 6CA6 20 66 3D			jsr MAX
 11332 6CA9 A9 0C			lda #$0C
 11333 6CAB 8D CF A0			sta MIN.A
 11334 6CAE A9 00			lda #$00
 11335 6CB0 8D D0 A0			sta MIN.A+1
 11336 6CB3 AD CD A0			lda MAX.RESULT
 11337 6CB6 8D D1 A0			sta MIN.B
 11338 6CB9 AD CE A0			lda MAX.RESULT+1
 11339 6CBC 8D D2 A0			sta MIN.B+1
 11340 6CBF 20 91 3D			jsr MIN
 11341 6CC2 AD D3 A0			lda MIN.RESULT
 11342 6CC5 8D DC A1			sta XB
 11343
 11344 				; optimize OK (service.pas), line = 2131
 11345
 11346 6CC8 AD E4 A1			lda NY
 11347 6CCB 18 69 18			add #$18
 11348 6CCE 4A				lsr @
 11349 6CCF 4A				lsr @
 11350 6CD0 4A				lsr @
 11351 6CD1 38 E9 03			sub #$03
 11352 6CD4 8D DD A1			sta YB
 11353 6CD7 4C F2 6C			jmp l_1CC5
 11354 6CDA			l_1C9D
 11355
 11356 				; optimize OK (service.pas), line = 2135
 11357
 11358 6CDA AD DE A1			lda OX
 11359 6CDD 8D E2 A1			sta NX
 11360 6CE0 AD DF A1			lda OX+1
 11361 6CE3 8D E3 A1			sta NX+1
 11362
 11363 				; optimize OK (service.pas), line = 2136
 11364
 11365 6CE6 AD E0 A1			lda OY
 11366 6CE9 8D E4 A1			sta NY
 11367 6CEC AD E1 A1			lda OY+1
 11368 6CEF 8D E5 A1			sta NY+1
 11369 6CF2			l_1CC5
 11370 6CF2 4C E3 6D			jmp l_1CD8
 11371 6CF5			l_1C5F
 11372
 11373 				; optimize OK (service.pas), line = 2146
 11374
 11375 6CF5 AD E3 A1			lda NX+1
 11376 6CF8 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11377 6CFA AD E2 A1			lda NX
 11378 6CFD 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11379 6CFF 6A				ror @
 11380 6D00 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11381 6D02 6A				ror @
 11382 6D03 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11383 6D05 6A				ror @
 11384 6D06 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11385 6D08 6A				ror @
 11386 6D09 8D CB A0			sta MAX.B
 11387 6D0C A9 00			lda #$00
 11388 6D0E 8D C9 A0			sta MAX.A
 11389 6D11 8D CA A0			sta MAX.A+1
 11390 6D14 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11391 6D16 8D CC A0			sta MAX.B+1
 11392 6D19 20 66 3D			jsr MAX
 11393 6D1C A9 0C			lda #$0C
 11394 6D1E 8D CF A0			sta MIN.A
 11395 6D21 A9 00			lda #$00
 11396 6D23 8D D0 A0			sta MIN.A+1
 11397 6D26 AD CD A0			lda MAX.RESULT
 11398 6D29 8D D1 A0			sta MIN.B
 11399 6D2C AD CE A0			lda MAX.RESULT+1
 11400 6D2F 8D D2 A0			sta MIN.B+1
 11401 6D32 20 91 3D			jsr MIN
 11402 6D35 AD D3 A0			lda MIN.RESULT
 11403 6D38 8D DC A1			sta XB
 11404
 11405 				; optimize OK (service.pas), line = 2147
 11406
 11407 6D3B AD E4 A1			lda NY
 11408 6D3E 18 69 18			add #$18
 11409 6D41 4A				lsr @
 11410 6D42 4A				lsr @
 11411 6D43 4A				lsr @
 11412 6D44 38 E9 03			sub #$03
 11413 6D47 8D DD A1			sta YB
 11414
 11415 				; optimize OK (service.pas), line = 2149
 11416
 11417 6D4A A9 10			lda #$10
 11418 6D4C 85 8E			sta :ecx
 11419 6D4E 85 92			sta :ztmp8
 11420 6D50 AD DD A1			lda YB
 11421 6D53 85 86			sta :eax
 11422 6D55 85 94			sta :ztmp10
 11423 					.ifdef fmulinit
 11424 					fmulu_8
 11425 					els
 11426 6D57 20 BF 22			imulCL
 11427 					eif
 11428 6D5A 24 94			bit :ztmp10
 11429 6D5C 10 03			bpl @+
 11430 6D5E 38 E5 92			sub :ztmp8
 11431 				@
 11432 6D61 24 92			bit :ztmp8
 11433 6D63 10 03			bpl @+
 11434 6D65 38 E5 94			sub :ztmp10
 11435 				@
 11436 6D68 85 87			sta :eax+1
 11437 6D6A A5 86			lda :eax
 11438 6D6C 18 6D DC A1			add XB
 11439 6D70 A8				tay
 11440 6D71 B9 00 DB			lda adr.WALL,y
 11441 6D74 D0 6D			jne l_1D15
 11442
 11443 				; optimize OK (service.pas), line = 2151
 11444
 11445 6D76 AD DE A1			lda OX
 11446 6D79 8D E2 A1			sta NX
 11447 6D7C AD DF A1			lda OX+1
 11448 6D7F 8D E3 A1			sta NX+1
 11449
 11450 				; optimize OK (service.pas), line = 2152
 11451
 11452 6D82 AD E0 A1			lda OY
 11453 6D85 8D E4 A1			sta NY
 11454 6D88 AD E1 A1			lda OY+1
 11455 6D8B 8D E5 A1			sta NY+1
 11456
 11457 				; optimize OK (service.pas), line = 2154
 11458
 11459 6D8E AD E3 A1			lda NX+1
 11460 6D91 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11461 6D93 AD E2 A1			lda NX
 11462 6D96 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11463 6D98 6A				ror @
 11464 6D99 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11465 6D9B 6A				ror @
 11466 6D9C 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11467 6D9E 6A				ror @
 11468 6D9F 46 AF			lsr :STACKORIGIN+STACKWIDTH+9
 11469 6DA1 6A				ror @
 11470 6DA2 8D CB A0			sta MAX.B
 11471 6DA5 A9 00			lda #$00
 11472 6DA7 8D C9 A0			sta MAX.A
 11473 6DAA 8D CA A0			sta MAX.A+1
 11474 6DAD A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11475 6DAF 8D CC A0			sta MAX.B+1
 11476 6DB2 20 66 3D			jsr MAX
 11477 6DB5 A9 0C			lda #$0C
 11478 6DB7 8D CF A0			sta MIN.A
 11479 6DBA A9 00			lda #$00
 11480 6DBC 8D D0 A0			sta MIN.A+1
 11481 6DBF AD CD A0			lda MAX.RESULT
 11482 6DC2 8D D1 A0			sta MIN.B
 11483 6DC5 AD CE A0			lda MAX.RESULT+1
 11484 6DC8 8D D2 A0			sta MIN.B+1
 11485 6DCB 20 91 3D			jsr MIN
 11486 6DCE AD D3 A0			lda MIN.RESULT
 11487 6DD1 8D DC A1			sta XB
 11488
 11489 				; optimize OK (service.pas), line = 2155
 11490
 11491 6DD4 AD E4 A1			lda NY
 11492 6DD7 18 69 18			add #$18
 11493 6DDA 4A				lsr @
 11494 6DDB 4A				lsr @
 11495 6DDC 4A				lsr @
 11496 6DDD 38 E9 03			sub #$03
 11497 6DE0 8D DD A1			sta YB
 11498 6DE3			l_1D15
 11499 6DE3			l_1CD8
 11500 6DE3			l_1BCA
 11501
 11502 				; optimize OK (service.pas), line = 2161
 11503
 11504 6DE3 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11505 6DED A0 00			ldy #BALL.X-DATAORIGIN
 11506 6DEF AD E2 A1			lda NX
 11507 6DF2 18 69 09			add #$09
 11508 6DF5 91 84			sta (:bp2),y
 11509 6DF7 C8				iny
 11510 6DF8 AD E3 A1			lda NX+1
 11511 6DFB 69 00			adc #$00
 11512 6DFD 91 84			sta (:bp2),y
 11513
 11514 				; optimize OK (service.pas), line = 2162
 11515
 11516 6DFF A0 02			ldy #BALL.Y-DATAORIGIN
 11517 6E01 AD E4 A1			lda NY
 11518 6E04 18 69 16			add #$16
 11519 6E07 91 84			sta (:bp2),y
 11520 6E09 C8				iny
 11521 6E0A AD E5 A1			lda NY+1
 11522 6E0D 69 00			adc #$00
 11523 6E0F 91 84			sta (:bp2),y
 11524
 11525 				; optimize OK (service.pas), line = 2166
 11526
 11527 6E11 A0 00			ldy #$00
 11528 6E13 AD DD A1			lda YB
 11529 6E16 10 01			spl
 11530 6E18 88				dey
 11531 6E19 8C C9 A1			sty SHOOT_BLOCK.YB+1
 11532 6E1C 8D C8 A1			sta SHOOT_BLOCK.YB
 11533 6E1F A0 00			ldy #$00
 11534 6E21 AD DC A1			lda XB
 11535 6E24 10 01			spl
 11536 6E26 88				dey
 11537 6E27 8C C7 A1			sty SHOOT_BLOCK.XB+1
 11538 6E2A 8D C6 A1			sta SHOOT_BLOCK.XB
 11539 6E2D AD D4 A1			lda BALL
 11540 6E30 8D CA A1			sta SHOOT_BLOCK.BALL
 11541 6E33 AD D5 A1			lda BALL+1
 11542 6E36 8D CB A1			sta SHOOT_BLOCK.BALL+1
 11543 6E39 20 DE 66			jsr SHOOT_BLOCK
 11544
 11545 				; optimize OK (service.pas), line = 2168
 11546
 11547 6E3C AD E2 A1			lda NX
 11548 6E3F 29 0F			and #$0F
 11549 6E41 85 9F			sta :STACKORIGIN+9
 11550 6E43 A9 00			lda #$00
 11551 6E45 4A				lsr @
 11552 6E46 66 9F			ror :STACKORIGIN+9
 11553 6E48 A5 9F			lda :STACKORIGIN+9
 11554 6E4A 8D D8 A1			sta X
 11555
 11556 				; optimize OK (service.pas), line = 2169
 11557
 11558 6E4D AD E4 A1			lda NY
 11559 6E50 29 07			and #$07
 11560 6E52 8D D9 A1			sta Y
 11561
 11562 				; optimize OK (service.pas), line = 2181
 11563
 11564 6E55 AD D8 A1			lda X
 11565 6E58 F0 12			jeq l_1DA9
 11566 6E5A C9 07			cmp #$07
 11567 6E5C F0 0E			jeq l_1DA9
 11568 6E5E AD D9 A1			lda Y
 11569 6E61 F0 09			jeq l_1DA9
 11570 6E63 C9 07			cmp #$07
 11571 6E65 F0 05			jeq l_1DA9
 11572
 11573 				; optimize OK (service.pas), line = 2182
 11574
 11575 6E67 A9 03			lda #$03
 11576 6E69 20 BC 3D			jsr FATAL_ERROR
 11577 6E6C			l_1DA9
 11578
 11579 				; optimize OK (service.pas), line = 2197
 11580
 11581 6E6C AD D9 A1			lda Y
 11582 6E6F 38 ED D8 A1			sub X
 11583 6E73 50 02			svc
 11584 6E75 49 80			eor #$80
 11585 6E77 10 3E			jpl l_1DD4
 11586 6E79 A9 07			lda #$07
 11587 6E7B 38 ED D9 A1			sub Y
 11588 6E7F 85 A1			sta :STACKORIGIN+11
 11589 6E81 AD D8 A1			lda X
 11590 6E84 38 E5 A1			sub :STACKORIGIN+11
 11591 6E87 50 02			svc
 11592 6E89 49 80			eor #$80
 11593 6E8B 10 2A			jpl l_1DD4
 11594
 11595 				; optimize OK (service.pas), line = 2199
 11596
 11597 6E8D AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11598 6E97 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11599 6E99 A9 00			lda #$00
 11600 6E9B 38 F1 84			sub (:bp2),y
 11601 6E9E 85 9F			sta :STACKORIGIN+9
 11602 6EA0 C8				iny
 11603 6EA1 A9 00			lda #$00
 11604 6EA3 F1 84			sbc (:bp2),y
 11605 6EA5 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11606 6EA7 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11607 6EA9 A5 9F			lda :STACKORIGIN+9
 11608 6EAB 91 84			sta (:bp2),y
 11609 6EAD C8				iny
 11610 6EAE A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11611 6EB0 91 84			sta (:bp2),y
 11612
 11613 				; optimize OK (service.pas), line = 2200
 11614
 11615 6EB2 A9 01			lda #$01
 11616 6EB4 8D F6 A1			sta EMERGENCY
 11617 6EB7			l_1DD4
 11618
 11619 				; optimize OK (service.pas), line = 2204
 11620
 11621 6EB7 A9 07			lda #$07
 11622 6EB9 38 ED D9 A1			sub Y
 11623 6EBD 38 ED D8 A1			sub X
 11624 6EC1 50 02			svc
 11625 6EC3 49 80			eor #$80
 11626 6EC5 10 37			jpl l_1E09
 11627 6EC7 AD D8 A1			lda X
 11628 6ECA 38 ED D9 A1			sub Y
 11629 6ECE 50 02			svc
 11630 6ED0 49 80			eor #$80
 11631 6ED2 10 2A			jpl l_1E09
 11632
 11633 				; optimize OK (service.pas), line = 2206
 11634
 11635 6ED4 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11636 6EDE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11637 6EE0 A9 00			lda #$00
 11638 6EE2 38 F1 84			sub (:bp2),y
 11639 6EE5 85 9F			sta :STACKORIGIN+9
 11640 6EE7 C8				iny
 11641 6EE8 A9 00			lda #$00
 11642 6EEA F1 84			sbc (:bp2),y
 11643 6EEC 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11644 6EEE A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 11645 6EF0 A5 9F			lda :STACKORIGIN+9
 11646 6EF2 91 84			sta (:bp2),y
 11647 6EF4 C8				iny
 11648 6EF5 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11649 6EF7 91 84			sta (:bp2),y
 11650
 11651 				; optimize OK (service.pas), line = 2207
 11652
 11653 6EF9 A9 03			lda #$03
 11654 6EFB 8D F6 A1			sta EMERGENCY
 11655 6EFE			l_1E09
 11656
 11657 				; optimize OK (service.pas), line = 2211
 11658
 11659 6EFE AD D8 A1			lda X
 11660 6F01 38 ED D9 A1			sub Y
 11661 6F05 50 02			svc
 11662 6F07 49 80			eor #$80
 11663 6F09 10 3E			jpl l_1E3E
 11664 6F0B A9 07			lda #$07
 11665 6F0D 38 ED D8 A1			sub X
 11666 6F11 85 A1			sta :STACKORIGIN+11
 11667 6F13 AD D9 A1			lda Y
 11668 6F16 38 E5 A1			sub :STACKORIGIN+11
 11669 6F19 50 02			svc
 11670 6F1B 49 80			eor #$80
 11671 6F1D 10 2A			jpl l_1E3E
 11672
 11673 				; optimize OK (service.pas), line = 2213
 11674
 11675 6F1F AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11676 6F29 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11677 6F2B A9 00			lda #$00
 11678 6F2D 38 F1 84			sub (:bp2),y
 11679 6F30 85 9F			sta :STACKORIGIN+9
 11680 6F32 C8				iny
 11681 6F33 A9 00			lda #$00
 11682 6F35 F1 84			sbc (:bp2),y
 11683 6F37 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11684 6F39 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11685 6F3B A5 9F			lda :STACKORIGIN+9
 11686 6F3D 91 84			sta (:bp2),y
 11687 6F3F C8				iny
 11688 6F40 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11689 6F42 91 84			sta (:bp2),y
 11690
 11691 				; optimize OK (service.pas), line = 2214
 11692
 11693 6F44 A9 02			lda #$02
 11694 6F46 8D F6 A1			sta EMERGENCY
 11695 6F49			l_1E3E
 11696
 11697 				; optimize OK (service.pas), line = 2218
 11698
 11699 6F49 A9 07			lda #$07
 11700 6F4B 38 ED D8 A1			sub X
 11701 6F4F 38 ED D9 A1			sub Y
 11702 6F53 50 02			svc
 11703 6F55 49 80			eor #$80
 11704 6F57 10 37			jpl l_1E73
 11705 6F59 AD D9 A1			lda Y
 11706 6F5C 38 ED D8 A1			sub X
 11707 6F60 50 02			svc
 11708 6F62 49 80			eor #$80
 11709 6F64 10 2A			jpl l_1E73
 11710
 11711 				; optimize OK (service.pas), line = 2220
 11712
 11713 6F66 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 11714 6F70 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11715 6F72 A9 00			lda #$00
 11716 6F74 38 F1 84			sub (:bp2),y
 11717 6F77 85 9F			sta :STACKORIGIN+9
 11718 6F79 C8				iny
 11719 6F7A A9 00			lda #$00
 11720 6F7C F1 84			sbc (:bp2),y
 11721 6F7E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 11722 6F80 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 11723 6F82 A5 9F			lda :STACKORIGIN+9
 11724 6F84 91 84			sta (:bp2),y
 11725 6F86 C8				iny
 11726 6F87 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 11727 6F89 91 84			sta (:bp2),y
 11728
 11729 				; optimize OK (service.pas), line = 2221
 11730
 11731 6F8B A9 04			lda #$04
 11732 6F8D 8D F6 A1			sta EMERGENCY
 11733 6F90			l_1E73
 11734
 11735 				; optimize OK (service.pas), line = 2225
 11736
 11737 6F90 AD D8 A1			lda X
 11738 6F93 CD D9 A1			cmp Y
 11739 6F96 F0 0E			jeq l_1EA8x
 11740 6F98 A9 07			lda #$07
 11741 6F9A 38 ED D9 A1			sub Y
 11742 6F9E CD D8 A1			cmp X
 11743 6FA1 F0 03 4C A2 75		jne l_1EA8
 11744 6FA6			l_1EA8x
 11745
 11746 				; optimize OK (service.pas), line = 2227
 11747
 11748 6FA6 A9 00			lda #$00
 11749 6FA8 8D F8 A1			sta DEFLECT
 11750
 11751 				; optimize OK (service.pas), line = 2228
 11752
 11753 6FAB 8D FB A1			sta TOUCH
 11754
 11755 				; optimize OK (service.pas), line = 2236
 11756
 11757 6FAE AD D8 A1			lda X
 11758 6FB1 38 E9 05			sub #$05
 11759 6FB4 50 02			svc
 11760 6FB6 49 80			eor #$80
 11761 6FB8 30 08			jmi l_1EC3
 11762 6FBA AD FB A1			lda TOUCH
 11763 6FBD 09 01			ora #$01
 11764 6FBF 8D FB A1			sta TOUCH
 11765 6FC2			l_1EC3
 11766
 11767 				; optimize OK (service.pas), line = 2237
 11768
 11769 6FC2 AD D9 A1			lda Y
 11770 6FC5 38 E9 05			sub #$05
 11771 6FC8 50 02			svc
 11772 6FCA 49 80			eor #$80
 11773 6FCC 30 08			jmi l_1EE2
 11774 6FCE AD FB A1			lda TOUCH
 11775 6FD1 09 02			ora #$02
 11776 6FD3 8D FB A1			sta TOUCH
 11777 6FD6			l_1EE2
 11778
 11779 				; optimize OK (service.pas), line = 2246
 11780
 11781 6FD6 A9 FF			lda #$FF
 11782 6FD8 8D DA A1			sta LX
 11783
 11784 6FDB			l_1EF8
 11785 				; --- ForToDoCondition
 11786 6FDB AD DA A1			lda LX
 11787 6FDE 38 E9 02			sub #$02
 11788 6FE1 50 02			svc
 11789 6FE3 49 80			eor #$80
 11790 6FE5 0A				asl @
 11791 6FE6 B0 03 4C 11 71		jcc l_1F06
 11792
 11793 				; optimize OK (service.pas), line = 2247
 11794
 11795 6FEB A9 FF			lda #$FF
 11796 6FED 8D DB A1			sta LY
 11797
 11798 6FF0			l_1F0F
 11799 				; --- ForToDoCondition
 11800 6FF0 AD DB A1			lda LY
 11801 6FF3 38 E9 02			sub #$02
 11802 6FF6 50 02			svc
 11803 6FF8 49 80			eor #$80
 11804 6FFA 0A				asl @
 11805 6FFB B0 03 4C 04 71		jcc l_1F1D
 11806
 11807 				; optimize FAIL (1, service.pas), line = 2249
 11808
 11809 7000 E8				inx
 11810 7001 A9 00 95 96			mva #$00 :STACKORIGIN,x
 11811 7005 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 11812 7007 E8				inx
 11813 7008 A9 0C 95 96			mva #$0C :STACKORIGIN,x
 11814 700C A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 11815 7010 E8				inx
 11816 7011 AD DC A1 95 96		mva XB :STACKORIGIN,x
 11817 7016 E8				inx
 11818 7017 AD DA A1 95 96		mva LX :STACKORIGIN,x
 11819 701C 20 41 21			jsr @expandSHORT2SMALL1
 11820 701F 20 36 21			jsr @expandSHORT2SMALL
 11821 7022 20 B5 20			jsr addAX_CX
 11822 7025 CA				dex
 11823 7026 B5 96			lda :STACKORIGIN,x
 11824 7028 8D CF A0			sta MIN.A
 11825 702B B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11826 702D 8D D0 A0			sta MIN.A+1
 11827 7030 CA				dex
 11828 7031 B5 96			lda :STACKORIGIN,x
 11829 7033 8D D1 A0			sta MIN.B
 11830 7036 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11831 7038 8D D2 A0			sta MIN.B+1
 11832 703B CA				dex
 11833 703C 20 91 3D			jsr MIN
 11834 703F AD D3 A0			lda MIN.RESULT
 11835 7042 8D C9 A0			sta MAX.A
 11836 7045 AD D4 A0			lda MIN.RESULT+1
 11837 7048 8D CA A0			sta MAX.A+1
 11838 704B B5 96			lda :STACKORIGIN,x
 11839 704D 8D CB A0			sta MAX.B
 11840 7050 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 11841 7052 8D CC A0			sta MAX.B+1
 11842 7055 CA				dex
 11843 7056 20 66 3D			jsr MAX
 11844 7059 AD CD A0			lda MAX.RESULT
 11845 705C 8D E6 A1			sta MX
 11846 705F AD CE A0			lda MAX.RESULT+1
 11847 7062 8D E7 A1			sta MX+1
 11848
 11849 				; optimize OK (service.pas), line = 2250
 11850
 11851 7065 A0 00			ldy #$00
 11852 7067 AD DD A1			lda YB
 11853 706A 10 01			spl
 11854 706C 88				dey
 11855 706D 84 AF			sty :STACKORIGIN+STACKWIDTH+9
 11856 706F 85 9F			sta :STACKORIGIN+9
 11857 7071 A0 00			ldy #$00
 11858 7073 AD DB A1			lda LY
 11859 7076 10 01			spl
 11860 7078 88				dey
 11861 7079 18 65 9F			add :STACKORIGIN+9
 11862 707C 8D E8 A1			sta MY
 11863 707F 98				tya
 11864 7080 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 11865 7082 8D E9 A1			sta MY+1
 11866
 11867 				; optimize OK (service.pas), line = 2254
 11868
 11869 7085 AD DC A1			lda XB
 11870 7088 18 6D DA A1			add LX
 11871 708C 30 21			jmi l_1F7Ax
 11872 708E AD DC A1			lda XB
 11873 7091 18 6D DA A1			add LX
 11874 7095 38 E9 0D			sub #$0D
 11875 7098 50 02			svc
 11876 709A 49 80			eor #$80
 11877 709C 10 11			jpl l_1F7Ax
 11878 709E AD E8 A1			lda MY
 11879 70A1 0A				asl @
 11880 70A2 0A				asl @
 11881 70A3 0A				asl @
 11882 70A4 0A				asl @
 11883 70A5 18 6D E6 A1			add MX
 11884 70A9 A8				tay
 11885 70AA B9 00 DB			lda adr.WALL,y
 11886 70AD F0 24			jeq l_1F7A
 11887 70AF			l_1F7Ax
 11888
 11889 				; optimize OK (service.pas), line = 2257
 11890
 11891 70AF A0 00			ldy #$00
 11892 70B1 AD DA A1			lda LX
 11893 70B4 10 01			spl
 11894 70B6 88				dey
 11895 70B7 18 69 01			add #$01
 11896 70BA 85 86			sta :eax
 11897 70BC 90 01			scc
 11898 70BE C8				iny
 11899 70BF 84 87			sty :eax+1
 11900 70C1 A9 03			lda #$03
 11901 70C3 85 8E			sta :ecx
 11902 70C5 A9 00			lda #$00
 11903 70C7 85 8F			sta :ecx+1
 11904 					.ifdef fmulinit
 11905 					fmulu_16
 11906 					els
 11907 70C9 20 0B 23			imulCX
 11908 					eif
 11909 70CC A4 86			ldy :eax
 11910 70CE A9 01			lda #$01
 11911 70D0 4C F4 70			jmp l_1F9D
 11912 70D3			l_1F7A
 11913
 11914 				; optimize OK (service.pas), line = 2259
 11915
 11916 70D3 A0 00			ldy #$00
 11917 70D5 AD DA A1			lda LX
 11918 70D8 10 01			spl
 11919 70DA 88				dey
 11920 70DB 18 69 01			add #$01
 11921 70DE 85 86			sta :eax
 11922 70E0 90 01			scc
 11923 70E2 C8				iny
 11924 70E3 84 87			sty :eax+1
 11925 70E5 A9 03			lda #$03
 11926 70E7 85 8E			sta :ecx
 11927 70E9 A9 00			lda #$00
 11928 70EB 85 8F			sta :ecx+1
 11929 					.ifdef fmulinit
 11930 					fmulu_16
 11931 					els
 11932 70ED 20 0B 23			imulCX
 11933 					eif
 11934 70F0 A4 86			ldy :eax
 11935 70F2 A9 00			lda #$00
 11936 70F4			l_1F9D
 11937 70F4 99 FD A1			sta adr.ADJW+$01,y
 11938
 11939 				; --- ForToDoEpilog
 11940 70F7 EE DB A1			inc LY
 11941 70FA AD DB A1			lda LY
 11942 70FD C9 80			cmp #$80
 11943 70FF F0 03 4C F0 6F		jne l_1F0F
 11944 7104			l_1F1D
 11945
 11946 				; --- ForToDoEpilog
 11947 7104 EE DA A1			inc LX
 11948 7107 AD DA A1			lda LX
 11949 710A C9 80			cmp #$80
 11950 710C F0 03 4C DB 6F		jne l_1EF8
 11951 7111			l_1F06
 11952
 11953 				; optimize OK (service.pas), line = 2278
 11954
 11955 7111 AD FC A1			lda adr.ADJW
 11956 7114 85 9F			sta :STACKORIGIN+9
 11957 7116 AD FF A1			lda adr.ADJW+$03
 11958 7119 0A				asl @
 11959 711A 05 9F			ora :STACKORIGIN+9
 11960 711C 85 9F			sta :STACKORIGIN+9
 11961 711E AD 02 A2			lda adr.ADJW+$06
 11962 7121 0A				asl @
 11963 7122 0A				asl @
 11964 7123 05 9F			ora :STACKORIGIN+9
 11965 7125 85 9F			sta :STACKORIGIN+9
 11966 7127 AD 03 A2			lda adr.ADJW+$07
 11967 712A 0A				asl @
 11968 712B 0A				asl @
 11969 712C 0A				asl @
 11970 712D 05 9F			ora :STACKORIGIN+9
 11971 712F 85 9F			sta :STACKORIGIN+9
 11972 7131 AD 04 A2			lda adr.ADJW+$08
 11973 7134 0A				asl @
 11974 7135 0A				asl @
 11975 7136 0A				asl @
 11976 7137 0A				asl @
 11977 7138 05 9F			ora :STACKORIGIN+9
 11978 713A 85 9F			sta :STACKORIGIN+9
 11979 713C AD 01 A2			lda adr.ADJW+$05
 11980 713F 0A				asl @
 11981 7140 0A				asl @
 11982 7141 0A				asl @
 11983 7142 0A				asl @
 11984 7143 0A				asl @
 11985 7144 05 9F			ora :STACKORIGIN+9
 11986 7146 85 9F			sta :STACKORIGIN+9
 11987 7148 AD FE A1			lda adr.ADJW+$02
 11988 714B 0A				asl @
 11989 714C 0A				asl @
 11990 714D 0A				asl @
 11991 714E 0A				asl @
 11992 714F 0A				asl @
 11993 7150 0A				asl @
 11994 7151 05 9F			ora :STACKORIGIN+9
 11995 7153 85 9F			sta :STACKORIGIN+9
 11996 7155 AD FD A1			lda adr.ADJW+$01
 11997 7158 0A				asl @
 11998 7159 0A				asl @
 11999 715A 0A				asl @
 12000 715B 0A				asl @
 12001 715C 0A				asl @
 12002 715D 0A				asl @
 12003 715E 0A				asl @
 12004 715F 05 9F			ora :STACKORIGIN+9
 12005 7161 8D F9 A1			sta AROUND
 12006
 12007 				; optimize OK (service.pas), line = 2309
 12008
 12009 7164 AD FB A1			lda TOUCH
 12010 7167 F0 03 4C 08 72		jne l_2046
 12011
 12012 				; optimize OK (service.pas), line = 2311
 12013
 12014 716C AD F9 A1			lda AROUND
 12015 716F 29 83			and #$83
 12016 7171 D0 05			jne l_205D
 12017 7173 A9 11			lda #$11
 12018 7175 8D F8 A1			sta DEFLECT
 12019 7178			l_205D
 12020
 12021 				; optimize OK (service.pas), line = 2312
 12022
 12023 7178 AD F9 A1			lda AROUND
 12024 717B 29 83			and #$83
 12025 717D C9 01			cmp #$01
 12026 717F D0 05			jne l_207A
 12027 7181 A9 33			lda #$33
 12028 7183 8D F8 A1			sta DEFLECT
 12029 7186			l_207A
 12030
 12031 				; optimize OK (service.pas), line = 2313
 12032
 12033 7186 AD F9 A1			lda AROUND
 12034 7189 29 83			and #$83
 12035 718B C9 02			cmp #$02
 12036 718D D0 05			jne l_2097
 12037 718F A9 10			lda #$10
 12038 7191 8D F8 A1			sta DEFLECT
 12039 7194			l_2097
 12040
 12041 				; optimize OK (service.pas), line = 2314
 12042
 12043 7194 AD F9 A1			lda AROUND
 12044 7197 29 83			and #$83
 12045 7199 C9 03			cmp #$03
 12046 719B D0 05			jne l_20B4
 12047 719D A9 12			lda #$12
 12048 719F 8D F8 A1			sta DEFLECT
 12049 71A2			l_20B4
 12050
 12051 				; optimize OK (service.pas), line = 2315
 12052
 12053 71A2 AD F9 A1			lda AROUND
 12054 71A5 29 83			and #$83
 12055 71A7 C9 80			cmp #$80
 12056 71A9 D0 05			jne l_20D1
 12057 71AB A9 01			lda #$01
 12058 71AD 8D F8 A1			sta DEFLECT
 12059 71B0			l_20D1
 12060
 12061 				; optimize OK (service.pas), line = 2316
 12062
 12063 71B0 AD F9 A1			lda AROUND
 12064 71B3 29 83			and #$83
 12065 71B5 C9 81			cmp #$81
 12066 71B7 D0 05			jne l_20EE
 12067 71B9 A9 21			lda #$21
 12068 71BB 8D F8 A1			sta DEFLECT
 12069 71BE			l_20EE
 12070
 12071 				; optimize OK (service.pas), line = 2317
 12072
 12073 71BE AD F9 A1			lda AROUND
 12074 71C1 29 83			and #$83
 12075 71C3 C9 82			cmp #$82
 12076 71C5 D0 05			jne l_210B
 12077 71C7 A9 11			lda #$11
 12078 71C9 8D F8 A1			sta DEFLECT
 12079 71CC			l_210B
 12080
 12081 				; optimize OK (service.pas), line = 2319
 12082
 12083 71CC A9 05			lda #$05
 12084 71CE 8D F6 A1			sta EMERGENCY
 12085
 12086 				; optimize OK (service.pas), line = 2320
 12087
 12088 71D1 A0 00			ldy #$00
 12089 71D3 AD DD A1			lda YB
 12090 71D6 10 01			spl
 12091 71D8 88				dey
 12092 71D9 38 E9 01			sub #$01
 12093 71DC 8D C8 A1			sta SHOOT_BLOCK.YB
 12094 71DF 98				tya
 12095 71E0 E9 00			sbc #$00
 12096 71E2 8D C9 A1			sta SHOOT_BLOCK.YB+1
 12097 71E5 A0 00			ldy #$00
 12098 71E7 AD DC A1			lda XB
 12099 71EA 10 01			spl
 12100 71EC 88				dey
 12101 71ED 38 E9 01			sub #$01
 12102 71F0 8D C6 A1			sta SHOOT_BLOCK.XB
 12103 71F3 98				tya
 12104 71F4 E9 00			sbc #$00
 12105 71F6 8D C7 A1			sta SHOOT_BLOCK.XB+1
 12106 71F9 AD D4 A1			lda BALL
 12107 71FC 8D CA A1			sta SHOOT_BLOCK.BALL
 12108 71FF AD D5 A1			lda BALL+1
 12109 7202 8D CB A1			sta SHOOT_BLOCK.BALL+1
 12110 7205 20 DE 66			jsr SHOOT_BLOCK
 12111 7208			l_2046
 12112
 12113 				; optimize OK (service.pas), line = 2325
 12114
 12115 7208 AD FB A1			lda TOUCH
 12116 720B C9 01			cmp #$01
 12117 720D F0 03 4C AE 72		jne l_213B
 12118
 12119 				; optimize OK (service.pas), line = 2327
 12120
 12121 7212 AD F9 A1			lda AROUND
 12122 7215 29 0E			and #$0E
 12123 7217 D0 05			jne l_2152
 12124 7219 A9 21			lda #$21
 12125 721B 8D F8 A1			sta DEFLECT
 12126 721E			l_2152
 12127
 12128 				; optimize OK (service.pas), line = 2328
 12129
 12130 721E AD F9 A1			lda AROUND
 12131 7221 29 0E			and #$0E
 12132 7223 C9 02			cmp #$02
 12133 7225 D0 05			jne l_216F
 12134 7227 A9 20			lda #$20
 12135 7229 8D F8 A1			sta DEFLECT
 12136 722C			l_216F
 12137
 12138 				; optimize OK (service.pas), line = 2329
 12139
 12140 722C AD F9 A1			lda AROUND
 12141 722F 29 0E			and #$0E
 12142 7231 C9 04			cmp #$04
 12143 7233 D0 05			jne l_218C
 12144 7235 A9 33			lda #$33
 12145 7237 8D F8 A1			sta DEFLECT
 12146 723A			l_218C
 12147
 12148 				; optimize OK (service.pas), line = 2330
 12149
 12150 723A AD F9 A1			lda AROUND
 12151 723D 29 0E			and #$0E
 12152 723F C9 06			cmp #$06
 12153 7241 D0 05			jne l_21A9
 12154 7243 A9 22			lda #$22
 12155 7245 8D F8 A1			sta DEFLECT
 12156 7248			l_21A9
 12157
 12158 				; optimize OK (service.pas), line = 2331
 12159
 12160 7248 AD F9 A1			lda AROUND
 12161 724B 29 0E			and #$0E
 12162 724D C9 08			cmp #$08
 12163 724F D0 05			jne l_21C6
 12164 7251 A9 01			lda #$01
 12165 7253 8D F8 A1			sta DEFLECT
 12166 7256			l_21C6
 12167
 12168 				; optimize OK (service.pas), line = 2332
 12169
 12170 7256 AD F9 A1			lda AROUND
 12171 7259 29 0E			and #$0E
 12172 725B C9 0A			cmp #$0A
 12173 725D D0 05			jne l_21E3
 12174 725F A9 21			lda #$21
 12175 7261 8D F8 A1			sta DEFLECT
 12176 7264			l_21E3
 12177
 12178 				; optimize OK (service.pas), line = 2333
 12179
 12180 7264 AD F9 A1			lda AROUND
 12181 7267 29 0E			and #$0E
 12182 7269 C9 0C			cmp #$0C
 12183 726B D0 05			jne l_2200
 12184 726D A9 11			lda #$11
 12185 726F 8D F8 A1			sta DEFLECT
 12186 7272			l_2200
 12187
 12188 				; optimize OK (service.pas), line = 2335
 12189
 12190 7272 A9 08			lda #$08
 12191 7274 8D F6 A1			sta EMERGENCY
 12192
 12193 				; optimize OK (service.pas), line = 2336
 12194
 12195 7277 A0 00			ldy #$00
 12196 7279 AD DD A1			lda YB
 12197 727C 10 01			spl
 12198 727E 88				dey
 12199 727F 38 E9 01			sub #$01
 12200 7282 8D C8 A1			sta SHOOT_BLOCK.YB
 12201 7285 98				tya
 12202 7286 E9 00			sbc #$00
 12203 7288 8D C9 A1			sta SHOOT_BLOCK.YB+1
 12204 728B A0 00			ldy #$00
 12205 728D AD DC A1			lda XB
 12206 7290 10 01			spl
 12207 7292 88				dey
 12208 7293 18 69 01			add #$01
 12209 7296 8D C6 A1			sta SHOOT_BLOCK.XB
 12210 7299 90 01			scc
 12211 729B C8				iny
 12212 729C 8C C7 A1			sty SHOOT_BLOCK.XB+1
 12213 729F AD D4 A1			lda BALL
 12214 72A2 8D CA A1			sta SHOOT_BLOCK.BALL
 12215 72A5 AD D5 A1			lda BALL+1
 12216 72A8 8D CB A1			sta SHOOT_BLOCK.BALL+1
 12217 72AB 20 DE 66			jsr SHOOT_BLOCK
 12218 72AE			l_213B
 12219
 12220 				; optimize OK (service.pas), line = 2339
 12221
 12222 72AE AD FB A1			lda TOUCH
 12223 72B1 C9 02			cmp #$02
 12224 72B3 F0 03 4C 54 73		jne l_2230
 12225
 12226 				; optimize OK (service.pas), line = 2341
 12227
 12228 72B8 AD F9 A1			lda AROUND
 12229 72BB 29 E0			and #$E0
 12230 72BD D0 05			jne l_2247
 12231 72BF A9 12			lda #$12
 12232 72C1 8D F8 A1			sta DEFLECT
 12233 72C4			l_2247
 12234
 12235 				; optimize OK (service.pas), line = 2342
 12236
 12237 72C4 AD F9 A1			lda AROUND
 12238 72C7 29 E0			and #$E0
 12239 72C9 C9 20			cmp #$20
 12240 72CB D0 05			jne l_2264
 12241 72CD A9 10			lda #$10
 12242 72CF 8D F8 A1			sta DEFLECT
 12243 72D2			l_2264
 12244
 12245 				; optimize OK (service.pas), line = 2343
 12246
 12247 72D2 AD F9 A1			lda AROUND
 12248 72D5 29 E0			and #$E0
 12249 72D7 C9 40			cmp #$40
 12250 72D9 D0 05			jne l_2281
 12251 72DB A9 33			lda #$33
 12252 72DD 8D F8 A1			sta DEFLECT
 12253 72E0			l_2281
 12254
 12255 				; optimize OK (service.pas), line = 2344
 12256
 12257 72E0 AD F9 A1			lda AROUND
 12258 72E3 29 E0			and #$E0
 12259 72E5 C9 60			cmp #$60
 12260 72E7 D0 05			jne l_229E
 12261 72E9 A9 11			lda #$11
 12262 72EB 8D F8 A1			sta DEFLECT
 12263 72EE			l_229E
 12264
 12265 				; optimize OK (service.pas), line = 2345
 12266
 12267 72EE AD F9 A1			lda AROUND
 12268 72F1 29 E0			and #$E0
 12269 72F3 C9 80			cmp #$80
 12270 72F5 D0 05			jne l_22BB
 12271 72F7 A9 02			lda #$02
 12272 72F9 8D F8 A1			sta DEFLECT
 12273 72FC			l_22BB
 12274
 12275 				; optimize OK (service.pas), line = 2346
 12276
 12277 72FC AD F9 A1			lda AROUND
 12278 72FF 29 E0			and #$E0
 12279 7301 C9 A0			cmp #$A0
 12280 7303 D0 05			jne l_22D8
 12281 7305 A9 12			lda #$12
 12282 7307 8D F8 A1			sta DEFLECT
 12283 730A			l_22D8
 12284
 12285 				; optimize OK (service.pas), line = 2347
 12286
 12287 730A AD F9 A1			lda AROUND
 12288 730D 29 E0			and #$E0
 12289 730F C9 C0			cmp #$C0
 12290 7311 D0 05			jne l_22F5
 12291 7313 A9 22			lda #$22
 12292 7315 8D F8 A1			sta DEFLECT
 12293 7318			l_22F5
 12294
 12295 				; optimize OK (service.pas), line = 2349
 12296
 12297 7318 A9 06			lda #$06
 12298 731A 8D F6 A1			sta EMERGENCY
 12299
 12300 				; optimize OK (service.pas), line = 2350
 12301
 12302 731D A0 00			ldy #$00
 12303 731F AD DD A1			lda YB
 12304 7322 10 01			spl
 12305 7324 88				dey
 12306 7325 18 69 01			add #$01
 12307 7328 8D C8 A1			sta SHOOT_BLOCK.YB
 12308 732B 90 01			scc
 12309 732D C8				iny
 12310 732E 8C C9 A1			sty SHOOT_BLOCK.YB+1
 12311 7331 A0 00			ldy #$00
 12312 7333 AD DC A1			lda XB
 12313 7336 10 01			spl
 12314 7338 88				dey
 12315 7339 38 E9 01			sub #$01
 12316 733C 8D C6 A1			sta SHOOT_BLOCK.XB
 12317 733F 98				tya
 12318 7340 E9 00			sbc #$00
 12319 7342 8D C7 A1			sta SHOOT_BLOCK.XB+1
 12320 7345 AD D4 A1			lda BALL
 12321 7348 8D CA A1			sta SHOOT_BLOCK.BALL
 12322 734B AD D5 A1			lda BALL+1
 12323 734E 8D CB A1			sta SHOOT_BLOCK.BALL+1
 12324 7351 20 DE 66			jsr SHOOT_BLOCK
 12325 7354			l_2230
 12326
 12327 				; optimize OK (service.pas), line = 2353
 12328
 12329 7354 AD FB A1			lda TOUCH
 12330 7357 C9 03			cmp #$03
 12331 7359 F0 03 4C FA 73		jne l_2325
 12332
 12333 				; optimize OK (service.pas), line = 2355
 12334
 12335 735E AD F9 A1			lda AROUND
 12336 7361 29 38			and #$38
 12337 7363 D0 05			jne l_233C
 12338 7365 A9 22			lda #$22
 12339 7367 8D F8 A1			sta DEFLECT
 12340 736A			l_233C
 12341
 12342 				; optimize OK (service.pas), line = 2356
 12343
 12344 736A AD F9 A1			lda AROUND
 12345 736D 29 38			and #$38
 12346 736F C9 08			cmp #$08
 12347 7371 D0 05			jne l_2359
 12348 7373 A9 02			lda #$02
 12349 7375 8D F8 A1			sta DEFLECT
 12350 7378			l_2359
 12351
 12352 				; optimize OK (service.pas), line = 2357
 12353
 12354 7378 AD F9 A1			lda AROUND
 12355 737B 29 38			and #$38
 12356 737D C9 10			cmp #$10
 12357 737F D0 05			jne l_2376
 12358 7381 A9 33			lda #$33
 12359 7383 8D F8 A1			sta DEFLECT
 12360 7386			l_2376
 12361
 12362 				; optimize OK (service.pas), line = 2358
 12363
 12364 7386 AD F9 A1			lda AROUND
 12365 7389 29 38			and #$38
 12366 738B C9 18			cmp #$18
 12367 738D D0 05			jne l_2393
 12368 738F A9 12			lda #$12
 12369 7391 8D F8 A1			sta DEFLECT
 12370 7394			l_2393
 12371
 12372 				; optimize OK (service.pas), line = 2359
 12373
 12374 7394 AD F9 A1			lda AROUND
 12375 7397 29 38			and #$38
 12376 7399 C9 20			cmp #$20
 12377 739B D0 05			jne l_23B0
 12378 739D A9 20			lda #$20
 12379 739F 8D F8 A1			sta DEFLECT
 12380 73A2			l_23B0
 12381
 12382 				; optimize OK (service.pas), line = 2360
 12383
 12384 73A2 AD F9 A1			lda AROUND
 12385 73A5 29 38			and #$38
 12386 73A7 C9 28			cmp #$28
 12387 73A9 D0 05			jne l_23CD
 12388 73AB A9 22			lda #$22
 12389 73AD 8D F8 A1			sta DEFLECT
 12390 73B0			l_23CD
 12391
 12392 				; optimize OK (service.pas), line = 2361
 12393
 12394 73B0 AD F9 A1			lda AROUND
 12395 73B3 29 38			and #$38
 12396 73B5 C9 30			cmp #$30
 12397 73B7 D0 05			jne l_23EA
 12398 73B9 A9 21			lda #$21
 12399 73BB 8D F8 A1			sta DEFLECT
 12400 73BE			l_23EA
 12401
 12402 				; optimize OK (service.pas), line = 2363
 12403
 12404 73BE A9 07			lda #$07
 12405 73C0 8D F6 A1			sta EMERGENCY
 12406
 12407 				; optimize OK (service.pas), line = 2364
 12408
 12409 73C3 A0 00			ldy #$00
 12410 73C5 AD DD A1			lda YB
 12411 73C8 10 01			spl
 12412 73CA 88				dey
 12413 73CB 18 69 01			add #$01
 12414 73CE 8D C8 A1			sta SHOOT_BLOCK.YB
 12415 73D1 90 01			scc
 12416 73D3 C8				iny
 12417 73D4 8C C9 A1			sty SHOOT_BLOCK.YB+1
 12418 73D7 A0 00			ldy #$00
 12419 73D9 AD DC A1			lda XB
 12420 73DC 10 01			spl
 12421 73DE 88				dey
 12422 73DF 18 69 01			add #$01
 12423 73E2 8D C6 A1			sta SHOOT_BLOCK.XB
 12424 73E5 90 01			scc
 12425 73E7 C8				iny
 12426 73E8 8C C7 A1			sty SHOOT_BLOCK.XB+1
 12427 73EB AD D4 A1			lda BALL
 12428 73EE 8D CA A1			sta SHOOT_BLOCK.BALL
 12429 73F1 AD D5 A1			lda BALL+1
 12430 73F4 8D CB A1			sta SHOOT_BLOCK.BALL+1
 12431 73F7 20 DE 66			jsr SHOOT_BLOCK
 12432 73FA			l_2325
 12433
 12434 				; optimize OK (service.pas), line = 2370
 12435
 12436 73FA AD F8 A1			lda DEFLECT
 12437 73FD 4A				lsr @
 12438 73FE 4A				lsr @
 12439 73FF 4A				lsr @
 12440 7400 4A				lsr @
 12441 7401 8D EC A1			sta MYX
 12442 7404 A9 00			lda #$00
 12443 7406 8D ED A1			sta MYX+1
 12444
 12445 				; optimize OK (service.pas), line = 2371
 12446
 12447 7409 AD F8 A1			lda DEFLECT
 12448 740C 29 0F			and #$0F
 12449 740E 8D EE A1			sta MYY
 12450 7411 A9 00			lda #$00
 12451 7413 8D EF A1			sta MYY+1
 12452
 12453 				; optimize OK (service.pas), line = 2373
 12454
 12455 7416 AD ED A1			lda MYX+1
 12456 7419 D0 05			bne @+
 12457 741B AD EC A1			lda MYX
 12458 741E C9 01			cmp #$01
 12459 				@
 12460 7420 D0 50			jne l_242D
 12461 7422 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12462 742C A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12463 742E B1 84			lda (:bp2),y
 12464 7430 85 8A			sta SYSTEM.ABS.@010184000.X
 12465 7432 C8				iny
 12466 7433 B1 84			lda (:bp2),y
 12467 7435 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12468 7437 20 DF 2A			jsr SYSTEM.ABS.@010184000
 12469 743A E8				inx
 12470 743B A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12471 743F A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12472 7443 A9 00			lda #$00
 12473 7445 38 F5 96			sub :STACKORIGIN,x
 12474 7448 95 96			sta :STACKORIGIN,x
 12475 744A A9 00			lda #$00
 12476 744C F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12477 744E 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12478 7450 A9 00			lda #$00
 12479 7452 E9 00			sbc #$00
 12480 7454 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12481 7456 A9 00			lda #$00
 12482 7458 E9 00			sbc #$00
 12483 745A 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12484 745C AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12485 7466 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12486 7468 B5 96			lda :STACKORIGIN,x
 12487 746A 91 84			sta (:bp2),y
 12488 746C C8				iny
 12489 746D B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12490 746F 91 84			sta (:bp2),y
 12491 7471 CA				dex
 12492 7472			l_242D
 12493
 12494 				; optimize OK (service.pas), line = 2374
 12495
 12496 7472 AD ED A1			lda MYX+1
 12497 7475 D0 05			bne @+
 12498 7477 AD EC A1			lda MYX
 12499 747A C9 02			cmp #$02
 12500 				@
 12501 747C D0 2D			jne l_244A
 12502 747E AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12503 7488 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12504 748A B1 84			lda (:bp2),y
 12505 748C 85 8A			sta SYSTEM.ABS.@010184000.X
 12506 748E C8				iny
 12507 748F B1 84			lda (:bp2),y
 12508 7491 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12509 7493 20 DF 2A			jsr SYSTEM.ABS.@010184000
 12510 7496 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12511 74A0 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12512 74A2 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12513 74A4 91 84			sta (:bp2),y
 12514 74A6 C8				iny
 12515 74A7 A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12516 74A9 91 84			sta (:bp2),y
 12517 74AB			l_244A
 12518
 12519 				; optimize OK (service.pas), line = 2375
 12520
 12521 74AB AD ED A1			lda MYX+1
 12522 74AE D0 05			bne @+
 12523 74B0 AD EC A1			lda MYX
 12524 74B3 C9 03			cmp #$03
 12525 				@
 12526 74B5 D0 25			jne l_2464
 12527 74B7 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12528 74C1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12529 74C3 A9 00			lda #$00
 12530 74C5 38 F1 84			sub (:bp2),y
 12531 74C8 85 9F			sta :STACKORIGIN+9
 12532 74CA C8				iny
 12533 74CB A9 00			lda #$00
 12534 74CD F1 84			sbc (:bp2),y
 12535 74CF 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12536 74D1 A0 10			ldy #BALL.SPEEDX-DATAORIGIN
 12537 74D3 A5 9F			lda :STACKORIGIN+9
 12538 74D5 91 84			sta (:bp2),y
 12539 74D7 C8				iny
 12540 74D8 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12541 74DA 91 84			sta (:bp2),y
 12542 74DC			l_2464
 12543
 12544 				; optimize OK (service.pas), line = 2377
 12545
 12546 74DC AD EF A1			lda MYY+1
 12547 74DF D0 05			bne @+
 12548 74E1 AD EE A1			lda MYY
 12549 74E4 C9 01			cmp #$01
 12550 				@
 12551 74E6 D0 50			jne l_2480
 12552 74E8 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12553 74F2 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12554 74F4 B1 84			lda (:bp2),y
 12555 74F6 85 8A			sta SYSTEM.ABS.@010184000.X
 12556 74F8 C8				iny
 12557 74F9 B1 84			lda (:bp2),y
 12558 74FB 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12559 74FD 20 DF 2A			jsr SYSTEM.ABS.@010184000
 12560 7500 E8				inx
 12561 7501 A5 92 95 96			mva SYSTEM.ABS.@010184000.RESULT :STACKORIGIN,x
 12562 7505 A5 93 95 A6			mva SYSTEM.ABS.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12563 7509 A9 00			lda #$00
 12564 750B 38 F5 96			sub :STACKORIGIN,x
 12565 750E 95 96			sta :STACKORIGIN,x
 12566 7510 A9 00			lda #$00
 12567 7512 F5 A6			sbc :STACKORIGIN+STACKWIDTH,x
 12568 7514 95 A6			sta :STACKORIGIN+STACKWIDTH,x
 12569 7516 A9 00			lda #$00
 12570 7518 E9 00			sbc #$00
 12571 751A 95 B6			sta :STACKORIGIN+STACKWIDTH*2,x
 12572 751C A9 00			lda #$00
 12573 751E E9 00			sbc #$00
 12574 7520 95 C6			sta :STACKORIGIN+STACKWIDTH*3,x
 12575 7522 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12576 752C A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12577 752E B5 96			lda :STACKORIGIN,x
 12578 7530 91 84			sta (:bp2),y
 12579 7532 C8				iny
 12580 7533 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12581 7535 91 84			sta (:bp2),y
 12582 7537 CA				dex
 12583 7538			l_2480
 12584
 12585 				; optimize OK (service.pas), line = 2378
 12586
 12587 7538 AD EF A1			lda MYY+1
 12588 753B D0 05			bne @+
 12589 753D AD EE A1			lda MYY
 12590 7540 C9 02			cmp #$02
 12591 				@
 12592 7542 D0 2D			jne l_249D
 12593 7544 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12594 754E A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12595 7550 B1 84			lda (:bp2),y
 12596 7552 85 8A			sta SYSTEM.ABS.@010184000.X
 12597 7554 C8				iny
 12598 7555 B1 84			lda (:bp2),y
 12599 7557 85 8B			sta SYSTEM.ABS.@010184000.X+1
 12600 7559 20 DF 2A			jsr SYSTEM.ABS.@010184000
 12601 755C AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12602 7566 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12603 7568 A5 92			lda SYSTEM.ABS.@010184000.RESULT
 12604 756A 91 84			sta (:bp2),y
 12605 756C C8				iny
 12606 756D A5 93			lda SYSTEM.ABS.@010184000.RESULT+1
 12607 756F 91 84			sta (:bp2),y
 12608 7571			l_249D
 12609
 12610 				; optimize OK (service.pas), line = 2379
 12611
 12612 7571 AD EF A1			lda MYY+1
 12613 7574 D0 05			bne @+
 12614 7576 AD EE A1			lda MYY
 12615 7579 C9 03			cmp #$03
 12616 				@
 12617 757B D0 25			jne l_24B7
 12618 757D AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12619 7587 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12620 7589 A9 00			lda #$00
 12621 758B 38 F1 84			sub (:bp2),y
 12622 758E 85 9F			sta :STACKORIGIN+9
 12623 7590 C8				iny
 12624 7591 A9 00			lda #$00
 12625 7593 F1 84			sbc (:bp2),y
 12626 7595 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 12627 7597 A0 12			ldy #BALL.SPEEDY-DATAORIGIN
 12628 7599 A5 9F			lda :STACKORIGIN+9
 12629 759B 91 84			sta (:bp2),y
 12630 759D C8				iny
 12631 759E A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 12632 75A0 91 84			sta (:bp2),y
 12633 75A2			l_24B7
 12634 75A2			l_1EA8
 12635 75A2			l_1BAF
 12636
 12637 				; optimize OK (service.pas), line = 2389
 12638
 12639 75A2 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12640 75AC A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12641 75AE B1 84			lda (:bp2),y
 12642 75B0 C9 65			cmp #$65
 12643 75B2 B0 03 4C 7D 77		jcc l_24D8
 12644
 12645 				; optimize OK (service.pas), line = 2392
 12646
 12647 75B7 AD F6 A1			lda EMERGENCY
 12648 75BA C9 FF			cmp #$FF
 12649 75BC D0 05			jne l_24EB
 12650 75BE A9 04			lda #$04
 12651 75C0 20 BC 3D			jsr FATAL_ERROR
 12652 75C3			l_24EB
 12653
 12654 				; optimize OK (service.pas), line = 2394
 12655
 12656 75C3 AC F6 A1			ldy EMERGENCY
 12657 75C6 B9 7F 20			lda adr.EMERG_DEV,y
 12658 75C9 8D F7 A1			sta MIMAX
 12659
 12660 				; optimize OK (service.pas), line = 2420
 12661
 12662 75CC 98				tya
 12663 75CD 8D 05 A2			sta @CASETMP_0009
 12664 75D0 C9 05			cmp #$05
 12665 75D2 D0 1F			jne l_2504
 12666 				@
 12667
 12668 				; optimize OK (service.pas), line = 2423
 12669
 12670 75D4 AD FF A1			lda adr.ADJW+$03
 12671 75D7 D0 08			jne l_251B
 12672 75D9 AD F7 A1			lda MIMAX
 12673 75DC 29 0F			and #$0F
 12674 75DE 8D F7 A1			sta MIMAX
 12675 75E1			l_251B
 12676
 12677 				; optimize OK (service.pas), line = 2424
 12678
 12679 75E1 AD FD A1			lda adr.ADJW+$01
 12680 75E4 D0 0A			jne l_2543
 12681 75E6 AD F7 A1			lda MIMAX
 12682 75E9 29 F0			and #$F0
 12683 75EB 09 03			ora #$03
 12684 75ED 8D F7 A1			sta MIMAX
 12685 75F0			l_2543
 12686 75F0 4C 5F 76			jmp a_0009
 12687 75F3			l_2504
 12688 75F3 C9 06			cmp #$06
 12689 75F5 D0 21			jne l_255B
 12690
 12691 				; optimize OK (service.pas), line = 2428
 12692
 12693 75F7 AD FD A1			lda adr.ADJW+$01
 12694 75FA D0 0A			jne l_2572
 12695 75FC AD F7 A1			lda MIMAX
 12696 75FF 29 0F			and #$0F
 12697 7601 09 10			ora #$10
 12698 7603 8D F7 A1			sta MIMAX
 12699 7606			l_2572
 12700
 12701 				; optimize OK (service.pas), line = 2429
 12702
 12703 7606 AD 01 A2			lda adr.ADJW+$05
 12704 7609 D0 0A			jne l_259A
 12705 760B AD F7 A1			lda MIMAX
 12706 760E 29 F0			and #$F0
 12707 7610 09 04			ora #$04
 12708 7612 8D F7 A1			sta MIMAX
 12709 7615			l_259A
 12710 7615 4C 5F 76			jmp a_0009
 12711 7618			l_255B
 12712 7618 C9 07			cmp #$07
 12713 761A D0 21			jne l_25B2
 12714
 12715 				; optimize OK (service.pas), line = 2433
 12716
 12717 761C AD 01 A2			lda adr.ADJW+$05
 12718 761F D0 0A			jne l_25C9
 12719 7621 AD F7 A1			lda MIMAX
 12720 7624 29 0F			and #$0F
 12721 7626 09 20			ora #$20
 12722 7628 8D F7 A1			sta MIMAX
 12723 762B			l_25C9
 12724
 12725 				; optimize OK (service.pas), line = 2434
 12726
 12727 762B AD 03 A2			lda adr.ADJW+$07
 12728 762E D0 0A			jne l_25F1
 12729 7630 AD F7 A1			lda MIMAX
 12730 7633 29 F0			and #$F0
 12731 7635 09 05			ora #$05
 12732 7637 8D F7 A1			sta MIMAX
 12733 763A			l_25F1
 12734 763A 4C 5F 76			jmp a_0009
 12735 763D			l_25B2
 12736 763D C9 08			cmp #$08
 12737 763F D0 1E			jne l_2609
 12738
 12739 				; optimize OK (service.pas), line = 2438
 12740
 12741 7641 AD 03 A2			lda adr.ADJW+$07
 12742 7644 D0 0A			jne l_2620
 12743 7646 AD F7 A1			lda MIMAX
 12744 7649 29 0F			and #$0F
 12745 764B 09 30			ora #$30
 12746 764D 8D F7 A1			sta MIMAX
 12747 7650			l_2620
 12748
 12749 				; optimize OK (service.pas), line = 2439
 12750
 12751 7650 AD FF A1			lda adr.ADJW+$03
 12752 7653 D0 0A			jne l_2648
 12753 7655 AD F7 A1			lda MIMAX
 12754 7658 29 F0			and #$F0
 12755 765A 09 06			ora #$06
 12756 765C 8D F7 A1			sta MIMAX
 12757 765F			l_2648
 12758 765F			l_2609
 12759 765F			a_0009
 12760
 12761 				; --- RepeatUntilProlog
 12762 765F			l_2660
 12763
 12764 				; optimize OK (service.pas), line = 2447
 12765
 12766 765F AD F7 A1			lda MIMAX
 12767 7662 4A				lsr @
 12768 7663 4A				lsr @
 12769 7664 4A				lsr @
 12770 7665 4A				lsr @
 12771 7666 85 8E			sta :ecx
 12772 7668 A9 5A			lda #$5A
 12773 766A 85 86			sta :eax
 12774 					.ifdef fmulinit
 12775 					fmulu_8
 12776 					els
 12777 766C 20 BF 22			imulCL
 12778 					eif
 12779 766F A5 86			lda :eax
 12780 7671 8D DA A1			sta LX
 12781
 12782 				; optimize OK (service.pas), line = 2448
 12783
 12784 7674 AD F7 A1			lda MIMAX
 12785 7677 29 0F			and #$0F
 12786 7679 85 8E			sta :ecx
 12787 767B A9 5A			lda #$5A
 12788 767D 85 86			sta :eax
 12789 					.ifdef fmulinit
 12790 					fmulu_8
 12791 					els
 12792 767F 20 BF 22			imulCL
 12793 					eif
 12794 7682 8D E7 A1			sta MX+1
 12795 7685 A5 86			lda :eax
 12796 7687 8D E6 A1			sta MX
 12797
 12798 				; optimize OK (service.pas), line = 2450
 12799
 12800 768A A0 00			ldy #$00
 12801 768C AD DA A1			lda LX
 12802 768F 10 01			spl
 12803 7691 88				dey
 12804 7692 84 B0			sty :STACKORIGIN+STACKWIDTH+10
 12805 7694 85 A0			sta :STACKORIGIN+10
 12806 7696 AD E6 A1			lda MX
 12807 7699 38 E5 A0			sub :STACKORIGIN+10
 12808 769C 8D C3 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 12809 769F AD E7 A1			lda MX+1
 12810 76A2 E5 B0			sbc :STACKORIGIN+STACKWIDTH+10
 12811 76A4 8D C4 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 12812 76A7 20 28 33			jsr SYSTEM.RANDOM.@010184000
 12813 76AA E8				inx
 12814 76AB AD C5 9E 95 96		mva SYSTEM.RANDOM.@010184000.RESULT :STACKORIGIN,x
 12815 76B0 AD C6 9E 95 A6		mva SYSTEM.RANDOM.@010184000.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 12816 76B5 E8				inx
 12817 76B6 AD DA A1 95 96		mva LX :STACKORIGIN,x
 12818 76BB 20 36 21			jsr @expandSHORT2SMALL
 12819 76BE 20 B5 20			jsr addAX_CX
 12820 76C1 CA				dex
 12821 76C2 B5 96			lda :STACKORIGIN,x
 12822 76C4 8D EA A1			sta ANGLE
 12823 76C7 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 12824 76C9 8D EB A1			sta ANGLE+1
 12825 76CC CA				dex
 12826
 12827 				; optimize OK (service.pas), line = 2455
 12828
 12829 76CD A9 5A			lda #$5A
 12830 76CF 85 8E			sta @SMALLINT.MOD.B
 12831 76D1 A9 00			lda #$00
 12832 76D3 85 8F			sta @SMALLINT.MOD.B+1
 12833 76D5 AD EA A1			lda ANGLE
 12834 76D8 85 86			sta @SMALLINT.MOD.A
 12835 76DA AD EB A1			lda ANGLE+1
 12836 76DD 85 87			sta @SMALLINT.MOD.A+1
 12837 76DF 20 50 22			jsr @SMALLINT.MOD
 12838 76E2 A5 92			lda @SMALLINT.MOD.RESULT
 12839 76E4 C9 1F			cmp #$1F
 12840 76E6 A5 93			lda @SMALLINT.MOD.RESULT+1
 12841 76E8 E9 00			sbc #$00
 12842 76EA 50 02			svc
 12843 76EC 49 80			eor #$80
 12844 76EE 10 03 4C 5F 76		jmi l_2660
 12845 76F3 A9 5A			lda #$5A
 12846 76F5 85 8E			sta @SMALLINT.MOD.B
 12847 76F7 A9 00			lda #$00
 12848 76F9 85 8F			sta @SMALLINT.MOD.B+1
 12849 76FB AD EA A1			lda ANGLE
 12850 76FE 85 86			sta @SMALLINT.MOD.A
 12851 7700 AD EB A1			lda ANGLE+1
 12852 7703 85 87			sta @SMALLINT.MOD.A+1
 12853 7705 20 50 22			jsr @SMALLINT.MOD
 12854 7708 A5 92			lda @SMALLINT.MOD.RESULT
 12855 770A C9 3C			cmp #$3C
 12856 770C A5 93			lda @SMALLINT.MOD.RESULT+1
 12857 770E E9 00			sbc #$00
 12858 7710 50 02			svc
 12859 7712 49 80			eor #$80
 12860 7714 30 03 4C 5F 76		jpl l_2660
 12861
 12862 				; optimize OK (service.pas), line = 2459
 12863
 12864 7719 A9 68			lda #$68
 12865 771B 85 8E			sta @SMALLINT.MOD.B
 12866 771D A9 01			lda #$01
 12867 771F 85 8F			sta @SMALLINT.MOD.B+1
 12868 7721 AD EA A1			lda ANGLE
 12869 7724 85 86			sta @SMALLINT.MOD.A
 12870 7726 AD EB A1			lda ANGLE+1
 12871 7729 85 87			sta @SMALLINT.MOD.A+1
 12872 772B 20 50 22			jsr @SMALLINT.MOD
 12873 772E A5 92			lda @SMALLINT.MOD.RESULT
 12874 7730 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 12875 7733 A5 93			lda @SMALLINT.MOD.RESULT+1
 12876 7735 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 12877 7738 AD D4 A1			lda BALL
 12878 773B 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 12879 773E AD D5 A1			lda BALL+1
 12880 7741 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 12881 7744 20 B8 47			jsr SET_BALL_DIRECTION
 12882
 12883 				; optimize OK (service.pas), line = 2460
 12884
 12885 7747 AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12886 7751 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 12887 7753 B1 84			lda (:bp2),y
 12888 7755 8D 17 A1			sta SET_BALL_SPEED.SPEED
 12889 7758 C8				iny
 12890 7759 B1 84			lda (:bp2),y
 12891 775B 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 12892 775E AD D4 A1			lda BALL
 12893 7761 8D 13 A1			sta SET_BALL_SPEED.BALL
 12894 7764 AD D5 A1			lda BALL+1
 12895 7767 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 12896 776A 20 D5 45			jsr SET_BALL_SPEED
 12897
 12898 				; optimize OK (service.pas), line = 2462
 12899
 12900 776D AC D4 A1 84 84 AC + 	mwy BALL :bp2
 12901 7777 A0 16			ldy #BALL.BRWHIT-DATAORIGIN
 12902 7779 A9 00			lda #$00
 12903 777B 91 84			sta (:bp2),y
 12904 777D			l_24D8
 12905
 12906 				; ------------------------------------------------------------
 12907
 12908 = A1D4			BALL	= DATAORIGIN+$0349
 12909 = 9E8B			BALL.X	= DATAORIGIN+$0000
 12910 = 9E8D			BALL.Y	= DATAORIGIN+$0002
 12911 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
 12912 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
 12913 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
 12914 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
 12915 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
 12916 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
 12917 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
 12918 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
 12919 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
 12920 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
 12921 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
 12922 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
 12923 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
 12924 = 9EA6			BALL.STM	= DATAORIGIN+$001B
 12925 = A1D8			X	= DATAORIGIN+$034D
 12926 = A1D9			Y	= DATAORIGIN+$034E
 12927 = A1DA			LX	= DATAORIGIN+$034F
 12928 = A1DB			LY	= DATAORIGIN+$0350
 12929 = A1DC			XB	= DATAORIGIN+$0351
 12930 = A1DD			YB	= DATAORIGIN+$0352
 12931 = A1DE			OX	= DATAORIGIN+$0353
 12932 = A1E0			OY	= DATAORIGIN+$0355
 12933 = A1E2			NX	= DATAORIGIN+$0357
 12934 = A1E4			NY	= DATAORIGIN+$0359
 12935 = A1E6			MX	= DATAORIGIN+$035B
 12936 = A1E8			MY	= DATAORIGIN+$035D
 12937 = A1EA			ANGLE	= DATAORIGIN+$035F
 12938 = A1EC			MYX	= DATAORIGIN+$0361
 12939 = A1EE			MYY	= DATAORIGIN+$0363
 12940 = A1F0			F1	= DATAORIGIN+$0365
 12941 = A1F2			F2	= DATAORIGIN+$0367
 12942 = A1F4			A	= DATAORIGIN+$0369
 12943 = A1F5			B	= DATAORIGIN+$036A
 12944 = A1F6			EMERGENCY	= DATAORIGIN+$036B
 12945 = A1F7			MIMAX	= DATAORIGIN+$036C
 12946 = A1F8			DEFLECT	= DATAORIGIN+$036D
 12947 = A1F9			AROUND	= DATAORIGIN+$036E
 12948 = A1FA			COLLISION	= DATAORIGIN+$036F
 12949 = A1FB			TOUCH	= DATAORIGIN+$0370
 12950 = A1FC			adr.ADJW	= [DATAORIGIN+$0371] .array [3] [3]
 12951 777D			.var ADJW	= adr.ADJW .word
 12952 = A205			@CASETMP_0009	= DATAORIGIN+$037A
 12953
 12954 = A1D4			@VarData	= BALL
 12955 = 002A			@VarDataSize	= 42
 12956
 12957 777D			@exit
 12958 					.ifdef @new
 12959 					lda <@VarData
 12960 					sta :ztmp
 12961 					lda >@VarData
 12962 					ldy #@VarDataSize-1
 12963 					jmp @FreeMem
 12964 					els
 12965 777D 60				rts						; ret
 12966 					eif
 12967 = 777E FC A1		ADJW
 12967 				.endl
 12968
 12969 7780			.local	FILL_PICTURE_WITH_PATTERN			; PROCEDURE
 12970
 12971 				; optimize OK (service.pas), line = 2477
 12972
 12973 7780 A9 00			lda #$00
 12974 7782 8D 0D A2			sta Y
 12975
 12976 7785			l_26CE
 12977 				; --- ForToDoCondition
 12978 7785 AC 06 A2 84 84 AC + 	mwy PATT :bp2
 12979 778F A0 00			ldy #PATT.WIDTH-DATAORIGIN
 12980 7791 B1 84			lda (:bp2),y
 12981 7793 85 8E			sta @WORD.MOD.B
 12982 7795 C8				iny
 12983 7796 B1 84			lda (:bp2),y
 12984 7798 85 8F			sta @WORD.MOD.B+1
 12985 779A AD 0D A2			lda Y
 12986 779D 85 86			sta @WORD.MOD.A
 12987 779F A9 00			lda #$00
 12988 77A1 85 87			sta @WORD.MOD.A+1
 12989 77A3 20 A0 23			jsr @WORD.MOD
 12990 77A6 A5 92			lda @WORD.MOD.RESULT
 12991 77A8 AC 0D A2			ldy Y
 12992 77AB 99 00 C4			sta adr.MODX,y
 12993
 12994 				; optimize OK (service.pas), line = 2483
 12995
 12996 77AE AC 06 A2 84 84 AC + 	mwy PATT :bp2
 12997 77B8 A0 02			ldy #PATT.HEIGHT-DATAORIGIN
 12998 77BA B1 84			lda (:bp2),y
 12999 77BC 85 8E			sta @WORD.MOD.B
 13000 77BE C8				iny
 13001 77BF B1 84			lda (:bp2),y
 13002 77C1 85 8F			sta @WORD.MOD.B+1
 13003 77C3 AD 0D A2			lda Y
 13004 77C6 85 86			sta @WORD.MOD.A
 13005 77C8 A9 00			lda #$00
 13006 77CA 85 87			sta @WORD.MOD.A+1
 13007 77CC 20 A0 23			jsr @WORD.MOD
 13008 77CF A5 92			lda @WORD.MOD.RESULT
 13009 77D1 AC 0D A2			ldy Y
 13010 77D4 99 00 C3			sta adr.MODY,y
 13011
 13012 				; --- ForToDoEpilog
 13013 77D7 EE 0D A2			inc Y
 13014 77DA D0 A9			jne l_26CE
 13015 77DC			l_26DC
 13016
 13017 				; optimize OK (service.pas), line = 2489
 13018
 13019 77DC A9 0A			lda #$0A
 13020 77DE 8D 0D A2			sta Y
 13021
 13022 77E1			l_2706
 13023 				; --- ForToDoCondition
 13024 77E1 AC 0D A2			ldy Y
 13025 77E4 C0 C7			cpy #$C7
 13026 77E6 90 03 4C F2 78		jcs l_2714
 13027
 13028 				; optimize OK (service.pas), line = 2492
 13029
 13030 77EB B9 00 C3			lda adr.MODY,y
 13031 77EE 85 86			sta :eax
 13032 77F0 AC 06 A2 84 84 AC + 	mwy PATT :bp2
 13033 77FA A0 00			ldy #PATT.WIDTH-DATAORIGIN
 13034 77FC B1 84			lda (:bp2),y
 13035 77FE 85 8E			sta :ecx
 13036 7800 C8				iny
 13037 7801 B1 84			lda (:bp2),y
 13038 7803 85 8F			sta :ecx+1
 13039 7805 A9 00			lda #$00
 13040 7807 85 87			sta :eax+1
 13041 					.ifdef fmulinit
 13042 					fmulu_16
 13043 					els
 13044 7809 20 0B 23			imulCX
 13045 					eif
 13046 780C A5 86			lda :eax
 13047 780E 8D 0A A2			sta YB
 13048 7811 A5 87			lda :eax+1
 13049 7813 8D 0B A2			sta YB+1
 13050
 13051 				; optimize OK (service.pas), line = 2494
 13052
 13053 7816 A0 04			ldy #PATT.OFS-DATAORIGIN
 13054 7818 B1 84			lda (:bp2),y
 13055 781A 18 6D 0A A2			add YB
 13056 781E 8D 6A 9F			sta VBXE_RAM.POSITION
 13057 7821 C8				iny
 13058 7822 B1 84			lda (:bp2),y
 13059 7824 6D 0B A2			adc YB+1
 13060 7827 8D 6B 9F			sta VBXE_RAM.POSITION+1
 13061 782A C8				iny
 13062 782B B1 84			lda (:bp2),y
 13063 782D 69 00			adc #$00
 13064 782F 8D 6C 9F			sta VBXE_RAM.POSITION+2
 13065 7832 C8				iny
 13066 7833 B1 84			lda (:bp2),y
 13067 7835 69 00			adc #$00
 13068 7837 8D 6D 9F			sta VBXE_RAM.POSITION+3
 13069
 13070 				; optimize OK (service.pas), line = 2495
 13071
 13072 783A AD 68 9E			lda SCANLINE
 13073 783D 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13074 7840 AD 69 9E			lda SCANLINE+1
 13075 7843 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13076 7846 A9 28			lda #$28
 13077 7848 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13078 784B A9 00			lda #$00
 13079 784D 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13080 7850 AD 10 9E			lda VBXE_RAM
 13081 7853 AC 11 9E			ldy VBXE_RAM+1
 13082 7856 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13083
 13084 				; optimize OK (service.pas), line = 2497
 13085
 13086 7859 A9 00			lda #$00
 13087 785B 8D 10 A2			sta K
 13088
 13089 				; optimize OK (service.pas), line = 2498
 13090
 13091 785E A9 09			lda #$09
 13092 7860 8D 0C A2			sta X
 13093
 13094 7863			l_273C
 13095 				; --- ForToDoCondition
 13096 7863 AC 0C A2			ldy X
 13097 7866 C0 D8			cpy #$D8
 13098 7868 B0 38			jcs l_274A
 13099
 13100 				; optimize OK (service.pas), line = 2503
 13101
 13102 786A B9 00 C4			lda adr.MODX,y
 13103 786D A8				tay
 13104 786E B9 00 C5			lda adr.SCANLINE,y
 13105 7871 8D 0E A2			sta CL
 13106
 13107 				; optimize OK (service.pas), line = 2505
 13108
 13109 7874 A9 80			lda #$80
 13110 7876 8D 0F A2			sta SHADOW
 13111
 13112 				; optimize OK (service.pas), line = 2510
 13113
 13114 7879 AD 0D A2			lda Y
 13115 787C C9 10			cmp #$10
 13116 787E 90 07			jcc l_2778x
 13117 7880 AD 0C A2			lda X
 13118 7883 C9 12			cmp #$12
 13119 7885 B0 05			jcs l_2778
 13120 7887			l_2778x
 13121 7887 A9 00			lda #$00
 13122 7889 8D 0F A2			sta SHADOW
 13123 788C			l_2778
 13124
 13125 				; optimize OK (service.pas), line = 2515
 13126
 13127 788C AD 0E A2			lda CL
 13128 788F 29 7F			and #$7F
 13129 7891 0D 0F A2			ora SHADOW
 13130 7894 AC 10 A2			ldy K
 13131 7897 99 00 C2			sta adr.TMP,y
 13132
 13133 				; optimize FAIL (0, service.pas), line = 2517
 13134
 13135 789A EE 10 A2			inc K
 13136
 13137 				; --- ForToDoEpilog
 13138 789D EE 0C A2			inc X
 13139 78A0 D0 C1			jne l_273C
 13140 78A2			l_274A
 13141
 13142 				; optimize OK (service.pas), line = 2520
 13143
 13144 78A2 AC 0D A2			ldy Y
 13145 78A5 AD 9A 9F			lda PLAYSCREEN.OFS
 13146 78A8 18 79 00 C0			add adr.ROW,y
 13147 78AC 85 A0			sta :STACKORIGIN+10
 13148 78AE AD 9B 9F			lda PLAYSCREEN.OFS+1
 13149 78B1 79 00 C1			adc adr.ROW+256,y
 13150 78B4 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13151 78B6 AD 9C 9F			lda PLAYSCREEN.OFS+2
 13152 78B9 69 00			adc #$00
 13153 78BB 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13154 78BD AD 9D 9F			lda PLAYSCREEN.OFS+3
 13155 78C0 69 00			adc #$00
 13156 78C2 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13157 78C4 A5 A0			lda :STACKORIGIN+10
 13158 78C6 18 69 09			add #$09
 13159 78C9 8D AE A0			sta BLITTMP.DST
 13160 78CC A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13161 78CE 69 00			adc #$00
 13162 78D0 8D AF A0			sta BLITTMP.DST+1
 13163 78D3 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13164 78D5 69 00			adc #$00
 13165 78D7 8D B0 A0			sta BLITTMP.DST+2
 13166 78DA A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13167 78DC 69 00			adc #$00
 13168 78DE 8D B1 A0			sta BLITTMP.DST+3
 13169 78E1 AD 10 A2			lda K
 13170 78E4 8D B2 A0			sta BLITTMP.SIZE
 13171 78E7 20 69 3C			jsr BLITTMP
 13172
 13173 				; --- ForToDoEpilog
 13174 78EA EE 0D A2			inc Y
 13175 78ED F0 03 4C E1 77		jne l_2706
 13176 78F2			l_2714
 13177
 13178 				; ------------------------------------------------------------
 13179
 13180 = A206			PATT	= DATAORIGIN+$037B
 13181 = 9E8B			PATT.WIDTH	= DATAORIGIN+$0000
 13182 = 9E8D			PATT.HEIGHT	= DATAORIGIN+$0002
 13183 = 9E8F			PATT.OFS	= DATAORIGIN+$0004
 13184 = A20A			YB	= DATAORIGIN+$037F
 13185 = A20C			X	= DATAORIGIN+$0381
 13186 = A20D			Y	= DATAORIGIN+$0382
 13187 = A20E			CL	= DATAORIGIN+$0383
 13188 = A20F			SHADOW	= DATAORIGIN+$0384
 13189 = A210			K	= DATAORIGIN+$0385
 13190
 13191 = A206			@VarData	= PATT
 13192 = 0009			@VarDataSize	= 9
 13193
 13194 78F2			@exit
 13195 					.ifdef @new
 13196 					lda <@VarData
 13197 					sta :ztmp
 13198 					lda >@VarData
 13199 					ldy #@VarDataSize-1
 13200 					jmp @FreeMem
 13201 					els
 13202 78F2 60				rts						; ret
 13203 					eif
 13204 				.endl
 13205
 13206 78F3			.local	WRITE_ROUND_LEVEL				; PROCEDURE
 13207
 13208 				; ------------------------------------------------------------
 13209
 13210 = A211			X	= DATAORIGIN+$0386
 13211 = A213			Y	= DATAORIGIN+$0388
 13212
 13213 = A211			@VarData	= X
 13214 = 0004			@VarDataSize	= 4
 13215
 13216 78F3			@exit
 13217 					.ifdef @new
 13218 					lda <@VarData
 13219 					sta :ztmp
 13220 					lda >@VarData
 13221 					ldy #@VarDataSize-1
 13222 					jmp @FreeMem
 13223 					els
 13224 78F3 60				rts						; ret
 13225 					eif
 13226 				.endl
 13227
 13228 78F4			.local	REMOVE_ROUND_LEVEL				; PROCEDURE
 13229
 13230 				; optimize OK (service.pas), line = 2636
 13231
 13232 78F4 AD 81 C0			lda adr.ROW+$81
 13233 78F7 18 69 48			add #$48
 13234 78FA 8D 8D A0			sta HLP
 13235 78FD AD 81 C1			lda adr.ROW+256+$81
 13236 7900 69 00			adc #$00
 13237 7902 8D 8E A0			sta HLP+1
 13238
 13239 				; optimize OK (service.pas), line = 2638
 13240
 13241 7905 AD 8D A0			lda HLP
 13242 7908 8D 9C A0			sta BLITBOX.DST
 13243 790B A9 50			lda #$50
 13244 790D 18 6D 8E A0			add HLP+1
 13245 7911 8D 9D A0			sta BLITBOX.DST+1
 13246 7914 A9 00			lda #$00
 13247 7916 69 00			adc #$00
 13248 7918 8D 9E A0			sta BLITBOX.DST+2
 13249 791B A9 00			lda #$00
 13250 791D 69 00			adc #$00
 13251 791F 8D 9F A0			sta BLITBOX.DST+3
 13252 7922 AD 9A 9F			lda PLAYSCREEN.OFS
 13253 7925 18 6D 8D A0			add HLP
 13254 7929 8D 98 A0			sta BLITBOX.SRC
 13255 792C AD 9B 9F			lda PLAYSCREEN.OFS+1
 13256 792F 6D 8E A0			adc HLP+1
 13257 7932 8D 99 A0			sta BLITBOX.SRC+1
 13258 7935 AD 9C 9F			lda PLAYSCREEN.OFS+2
 13259 7938 69 00			adc #$00
 13260 793A 8D 9A A0			sta BLITBOX.SRC+2
 13261 793D AD 9D 9F			lda PLAYSCREEN.OFS+3
 13262 7940 69 00			adc #$00
 13263 7942 8D 9B A0			sta BLITBOX.SRC+3
 13264 7945 A9 58			lda #$58
 13265 7947 8D A0 A0			sta BLITBOX.W
 13266 794A A9 00			lda #$00
 13267 794C 8D A1 A0			sta BLITBOX.W+1
 13268 794F A9 1F			lda #$1F
 13269 7951 8D A2 A0			sta BLITBOX.H
 13270 7954 20 6A 3B			jsr BLITBOX
 13271
 13272 7957			@exit
 13273 					.ifdef @new
 13274 					lda <@VarData
 13275 					sta :ztmp
 13276 					lda >@VarData
 13277 					ldy #@VarDataSize-1
 13278 					jmp @FreeMem
 13279 					els
 13280 7957 60				rts						; ret
 13281 					eif
 13282 				.endl
 13283
 13284 7958			.local	GAME_OVER					; PROCEDURE
 13285
 13286 				; ------------------------------------------------------------
 13287
 13288 = A215			X	= DATAORIGIN+$038A
 13289 = A217			Y	= DATAORIGIN+$038C
 13290 = A219			adr.SC	= [DATAORIGIN+$038E] .array [21]
 13291 7958			.var SC	= adr.SC .word
 13292
 13293 = A215			@VarData	= X
 13294 = 0019			@VarDataSize	= 25
 13295
 13296 7958			@exit
 13297 					.ifdef @new
 13298 					lda <@VarData
 13299 					sta :ztmp
 13300 					lda >@VarData
 13301 					ldy #@VarDataSize-1
 13302 					jmp @FreeMem
 13303 					els
 13304 7958 60				rts						; ret
 13305 					eif
 13306 = 7959 19 A2		SC
 13306 				.endl
 13307
 13308 795B			.local	DESTROY_VAUS					; PROCEDURE
 13309
 13310 				; optimize OK (service.pas), line = 2692
 13311
 13312 795B AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 13313
 13314 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 2693
 13315
 13316 798B 20 73 52			jsr MODIFY_VAUS
 13317
 13318 				; optimize OK (service.pas), line = 2695
 13319
 13320 798E AD 0E A0			lda VAUS.X
 13321 7991 8D 74 A1			sta MOVE_VAUS.X
 13322 7994 A9 00			lda #$00
 13323 7996 8D 75 A1			sta MOVE_VAUS.X+1
 13324 7999 AD 0F A0			lda VAUS.Y
 13325 799C 8D 76 A1			sta MOVE_VAUS.Y
 13326 799F A9 00			lda #$00
 13327 79A1 8D 77 A1			sta MOVE_VAUS.Y+1
 13328 79A4 20 BE 54			jsr MOVE_VAUS
 13329
 13330 				; optimize OK (service.pas), line = 2697
 13331
 13332 79A7 AD 0E A0			lda VAUS.X
 13333 79AA 38 E9 04			sub #$04
 13334 79AD 8D 30 A2			sta A
 13335 79B0 A9 00			lda #$00
 13336 79B2 E9 00			sbc #$00
 13337 79B4 8D 31 A2			sta A+1
 13338
 13339 				; optimize OK (service.pas), line = 2698
 13340
 13341 79B7 AD 0F A0			lda VAUS.Y
 13342 79BA 38 E9 05			sub #$05
 13343 79BD 8D 32 A2			sta B
 13344 79C0 A9 00			lda #$00
 13345 79C2 E9 00			sbc #$00
 13346 79C4 8D 33 A2			sta B+1
 13347
 13348 				; optimize OK (service.pas), line = 2701
 13349
 13350 79C7 A9 00			lda #$00
 13351 79C9 8D 34 A2			sta W
 13352
 13353 79CC			l_2805
 13354 				; --- ForToDoCondition
 13355 79CC AD 34 A2			lda W
 13356 79CF C9 07			cmp #$07
 13357 79D1 90 03 4C B9 7B		jcs l_2813
 13358
 13359 				; optimize OK (service.pas), line = 2703
 13360
 13361 79D6 A9 00			lda #$00
 13362 79D8 8D 36 A2			sta Y
 13363
 13364 79DB			l_281C
 13365 				; --- ForToDoCondition
 13366 79DB AD 36 A2			lda Y
 13367 79DE C9 10			cmp #$10
 13368 79E0 90 03 4C A3 7B		jcs l_282A
 13369
 13370 				; optimize OK (service.pas), line = 2706
 13371
 13372 79E5 AD BE 9F			lda EXPLOSION.WIDTH
 13373 79E8 85 8E			sta :ecx
 13374 79EA AD BF 9F			lda EXPLOSION.WIDTH+1
 13375 79ED 85 8F			sta :ecx+1
 13376 79EF AD 36 A2			lda Y
 13377 79F2 85 86			sta :eax
 13378 79F4 A9 00			lda #$00
 13379 79F6 85 87			sta :eax+1
 13380 					.ifdef fmulinit
 13381 					fmulu_16
 13382 					els
 13383 79F8 20 4F 23			imulCX_AL
 13384 					eif
 13385 79FB A5 86			lda :eax
 13386 79FD 85 9F			sta :STACKORIGIN+9
 13387 79FF A5 87			lda :eax+1
 13388 7A01 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13389 7A03 AD BE 9F			lda EXPLOSION.WIDTH
 13390 7A06 85 A1			sta :STACKORIGIN+11
 13391 7A08 AD BF 9F			lda EXPLOSION.WIDTH+1
 13392 7A0B 06 A1			asl :STACKORIGIN+11
 13393 7A0D 2A				rol @
 13394 7A0E 06 A1			asl :STACKORIGIN+11
 13395 7A10 2A				rol @
 13396 7A11 06 A1			asl :STACKORIGIN+11
 13397 7A13 2A				rol @
 13398 7A14 06 A1			asl :STACKORIGIN+11
 13399 7A16 2A				rol @
 13400 7A17 85 8F			sta :ecx+1
 13401 7A19 A5 A1			lda :STACKORIGIN+11
 13402 7A1B 85 8E			sta :ecx
 13403 7A1D AD 34 A2			lda W
 13404 7A20 85 86			sta :eax
 13405 7A22 A9 00			lda #$00
 13406 7A24 85 87			sta :eax+1
 13407 					.ifdef fmulinit
 13408 					fmulu_16
 13409 					els
 13410 7A26 20 0B 23			imulCX
 13411 					eif
 13412 7A29 A5 86			lda :eax
 13413 7A2B 18 65 9F			add :STACKORIGIN+9
 13414 7A2E 8D 2E A2			sta Z
 13415 7A31 A5 87			lda :eax+1
 13416 7A33 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13417 7A35 8D 2F A2			sta Z+1
 13418
 13419 				; optimize OK (service.pas), line = 2708
 13420
 13421 7A38 AD 36 A2			lda Y
 13422 7A3B 18 6D 32 A2			add B
 13423 7A3F A8				tay
 13424 7A40 AD 30 A2			lda A
 13425 7A43 18 79 00 C0			add adr.ROW,y
 13426 7A47 8D 8D A0			sta HLP
 13427 7A4A AD 31 A2			lda A+1
 13428 7A4D 79 00 C1			adc adr.ROW+256,y
 13429 7A50 8D 8E A0			sta HLP+1
 13430
 13431 				; optimize OK (service.pas), line = 2710
 13432
 13433 7A53 A9 00			lda #$00
 13434 7A55 8D 35 A2			sta X
 13435 7A58 AC BE 9F			ldy EXPLOSION.WIDTH
 13436 7A5B 88				dey
 13437 7A5C 8C 60 7A			sty @FORTMP_2861_0
 13438
 13439 7A5F			l_2864
 13440 				; --- ForToDoCondition
 13441 7A5F A9 00			lda @FORTMP_2861_0::#$00
 13442 7A61 CD 35 A2			cmp X
 13443 7A64 B0 03 4C 75 7B		jcc l_2872
 13444
 13445 				; optimize FAIL (1, service.pas), line = 2714
 13446
 13447 7A69 E8				inx
 13448 7A6A A0 01			ldy #1
 13449 7A6C AD 34 A2			lda W
 13450 7A6F C9 06			cmp #$06
 13451 7A71 F0 01			beq @+
 13452 7A73 88				dey
 13453 				@
 13454 7A74 94 96			sty :STACKORIGIN,x
 13455 7A76 AD C2 9F			lda EXPLOSION.OFS
 13456 7A79 18 6D 35 A2			add X
 13457 7A7D 85 9F			sta :STACKORIGIN+9
 13458 7A7F AD C3 9F			lda EXPLOSION.OFS+1
 13459 7A82 69 00			adc #$00
 13460 7A84 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13461 7A86 AD C4 9F			lda EXPLOSION.OFS+2
 13462 7A89 69 00			adc #$00
 13463 7A8B 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13464 7A8D AD C5 9F			lda EXPLOSION.OFS+3
 13465 7A90 69 00			adc #$00
 13466 7A92 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13467 7A94 A5 9F			lda :STACKORIGIN+9
 13468 7A96 18 6D 2E A2			add Z
 13469 7A9A 8D C2 A0			sta GETBYTE.SRC
 13470 7A9D A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13471 7A9F 6D 2F A2			adc Z+1
 13472 7AA2 8D C3 A0			sta GETBYTE.SRC+1
 13473 7AA5 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13474 7AA7 69 00			adc #$00
 13475 7AA9 8D C4 A0			sta GETBYTE.SRC+2
 13476 7AAC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13477 7AAE 69 00			adc #$00
 13478 7AB0 8D C5 A0			sta GETBYTE.SRC+3
 13479 7AB3 20 3C 3D			jsr GETBYTE
 13480 7AB6 CA				dex
 13481 7AB7 A0 01			ldy #1
 13482 7AB9 AD C6 A0			lda GETBYTE.RESULT
 13483 7ABC F0 01			beq @+
 13484 7ABE 88				dey
 13485 				@
 13486 7ABF 98				tya
 13487 7AC0 15 97			ora :STACKORIGIN+1,x
 13488 7AC2 F0 56			jeq l_289A
 13489
 13490 				; optimize FAIL (1, service.pas), line = 2718
 13491
 13492 7AC4 E8				inx
 13493 7AC5 AD 35 A2 95 96		mva X :STACKORIGIN,x
 13494 7ACA A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13495 7ACE AD 9A 9F			lda PLAYSCREEN.OFS
 13496 7AD1 18 6D 8D A0			add HLP
 13497 7AD5 85 9F			sta :STACKORIGIN+9
 13498 7AD7 AD 9B 9F			lda PLAYSCREEN.OFS+1
 13499 7ADA 6D 8E A0			adc HLP+1
 13500 7ADD 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13501 7ADF AD 9C 9F			lda PLAYSCREEN.OFS+2
 13502 7AE2 69 00			adc #$00
 13503 7AE4 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13504 7AE6 AD 9D 9F			lda PLAYSCREEN.OFS+3
 13505 7AE9 69 00			adc #$00
 13506 7AEB 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13507 7AED A5 9F			lda :STACKORIGIN+9
 13508 7AEF 18 6D 35 A2			add X
 13509 7AF3 8D C2 A0			sta GETBYTE.SRC
 13510 7AF6 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13511 7AF8 69 00			adc #$00
 13512 7AFA 8D C3 A0			sta GETBYTE.SRC+1
 13513 7AFD A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13514 7AFF 69 00			adc #$00
 13515 7B01 8D C4 A0			sta GETBYTE.SRC+2
 13516 7B04 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13517 7B06 69 00			adc #$00
 13518 7B08 8D C5 A0			sta GETBYTE.SRC+3
 13519 7B0B 20 3C 3D			jsr GETBYTE
 13520 7B0E B4 96			ldy :STACKORIGIN,x
 13521 7B10 AD C6 A0			lda GETBYTE.RESULT
 13522 7B13 99 00 C2			sta adr.TMP,y
 13523 7B16 CA				dex
 13524 7B17 4C 6D 7B			jmp l_28B7
 13525 7B1A			l_289A
 13526
 13527 				; optimize FAIL (1, service.pas), line = 2723
 13528
 13529 7B1A E8				inx
 13530 7B1B AD 35 A2 95 96		mva X :STACKORIGIN,x
 13531 7B20 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 13532 7B24 AD C2 9F			lda EXPLOSION.OFS
 13533 7B27 18 6D 35 A2			add X
 13534 7B2B 85 9F			sta :STACKORIGIN+9
 13535 7B2D AD C3 9F			lda EXPLOSION.OFS+1
 13536 7B30 69 00			adc #$00
 13537 7B32 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13538 7B34 AD C4 9F			lda EXPLOSION.OFS+2
 13539 7B37 69 00			adc #$00
 13540 7B39 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 13541 7B3B AD C5 9F			lda EXPLOSION.OFS+3
 13542 7B3E 69 00			adc #$00
 13543 7B40 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 13544 7B42 A5 9F			lda :STACKORIGIN+9
 13545 7B44 18 6D 2E A2			add Z
 13546 7B48 8D C2 A0			sta GETBYTE.SRC
 13547 7B4B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 13548 7B4D 6D 2F A2			adc Z+1
 13549 7B50 8D C3 A0			sta GETBYTE.SRC+1
 13550 7B53 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 13551 7B55 69 00			adc #$00
 13552 7B57 8D C4 A0			sta GETBYTE.SRC+2
 13553 7B5A A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 13554 7B5C 69 00			adc #$00
 13555 7B5E 8D C5 A0			sta GETBYTE.SRC+3
 13556 7B61 20 3C 3D			jsr GETBYTE
 13557 7B64 B4 96			ldy :STACKORIGIN,x
 13558 7B66 AD C6 A0			lda GETBYTE.RESULT
 13559 7B69 99 00 C2			sta adr.TMP,y
 13560 7B6C CA				dex
 13561 7B6D			l_28B7
 13562
 13563 				; --- ForToDoEpilog
 13564 7B6D EE 35 A2			inc X
 13565 7B70 F0 03 4C 5F 7A		jne l_2864
 13566 7B75			l_2872
 13567
 13568 				; optimize OK (service.pas), line = 2726
 13569
 13570 7B75 AD 8D A0			lda HLP
 13571 7B78 8D AE A0			sta BLITTMP.DST
 13572 7B7B A9 50			lda #$50
 13573 7B7D 18 6D 8E A0			add HLP+1
 13574 7B81 8D AF A0			sta BLITTMP.DST+1
 13575 7B84 A9 00			lda #$00
 13576 7B86 69 00			adc #$00
 13577 7B88 8D B0 A0			sta BLITTMP.DST+2
 13578 7B8B A9 00			lda #$00
 13579 7B8D 69 00			adc #$00
 13580 7B8F 8D B1 A0			sta BLITTMP.DST+3
 13581 7B92 AD BE 9F			lda EXPLOSION.WIDTH
 13582 7B95 8D B2 A0			sta BLITTMP.SIZE
 13583 7B98 20 69 3C			jsr BLITTMP
 13584
 13585 				; --- ForToDoEpilog
 13586 7B9B EE 36 A2			inc Y
 13587 7B9E F0 03 4C DB 79		jne l_281C
 13588 7BA3			l_282A
 13589
 13590 				; optimize OK (service.pas), line = 2729
 13591
 13592 7BA3 AD 34 A2			lda W
 13593 7BA6 8D 72 9F			sta DEATH_SOUND.A
 13594 7BA9 A9 00			lda #$00
 13595 7BAB 8D 73 9F			sta DEATH_SOUND.A+1
 13596 7BAE 20 50 39			jsr DEATH_SOUND
 13597
 13598 				; --- ForToDoEpilog
 13599 7BB1 EE 34 A2			inc W
 13600 7BB4 F0 03 4C CC 79		jne l_2805
 13601 7BB9			l_2813
 13602
 13603 				; optimize OK (service.pas), line = 2733
 13604
 13605 7BB9 A9 07			lda #$07
 13606 7BBB 8D 72 9F			sta DEATH_SOUND.A
 13607 7BBE A9 00			lda #$00
 13608 7BC0 8D 73 9F			sta DEATH_SOUND.A+1
 13609 7BC3 20 50 39			jsr DEATH_SOUND
 13610
 13611 				; optimize OK (service.pas), line = 2734
 13612
 13613 7BC6 A9 96			lda #$96
 13614 7BC8 8D C7 A0			sta MYDELAY.A
 13615 7BCB A9 00			lda #$00
 13616 7BCD 8D C8 A0			sta MYDELAY.A+1
 13617 7BD0 20 65 3D			jsr MYDELAY
 13618
 13619 				; optimize FAIL ('DISABLE_LETTER', service.pas), line = 2735
 13620
 13621 7BD3 20 34 42			jsr DISABLE_LETTER
 13622
 13623 				; ------------------------------------------------------------
 13624
 13625 = A22E			Z	= DATAORIGIN+$03A3
 13626 = A230			A	= DATAORIGIN+$03A5
 13627 = A232			B	= DATAORIGIN+$03A7
 13628 = A234			W	= DATAORIGIN+$03A9
 13629 = A235			X	= DATAORIGIN+$03AA
 13630 = A236			Y	= DATAORIGIN+$03AB
 13631
 13632 = A22E			@VarData	= Z
 13633 = 0009			@VarDataSize	= 9
 13634
 13635 7BD6			@exit
 13636 					.ifdef @new
 13637 					lda <@VarData
 13638 					sta :ztmp
 13639 					lda >@VarData
 13640 					ldy #@VarDataSize-1
 13641 					jmp @FreeMem
 13642 					els
 13643 7BD6 60				rts						; ret
 13644 					eif
 13645 				.endl
 13646
 13647 7BD7			.local	CREATE_VAUS					; PROCEDURE
 13648
 13649 				; optimize FAIL ('NOSOUND', service.pas), line = 2747
 13650
 13651 7BD7 20 64 3D			jsr NOSOUND
 13652
 13653 				; optimize OK (service.pas), line = 2748
 13654
 13655 7BDA A9 5B			lda #$5B
 13656 7BDC 8D 3D A2			sta A
 13657 7BDF A9 00			lda #$00
 13658 7BE1 8D 3E A2			sta A+1
 13659
 13660 				; optimize OK (service.pas), line = 2749
 13661
 13662 7BE4 A9 B3			lda #$B3
 13663 7BE6 8D 3F A2			sta B
 13664 7BE9 A9 00			lda #$00
 13665 7BEB 8D 40 A2			sta B+1
 13666
 13667 				; optimize OK (service.pas), line = 2751
 13668
 13669 7BEE A9 0B			lda #$0B
 13670 7BF0 8D 3A A2			sta W
 13671
 13672 7BF3			l_2901
 13673 				; --- ForToDoCondition
 13674 7BF3 A9 00			lda #$00
 13675 7BF5 8D 39 A2			sta Y
 13676
 13677 7BF8			l_2918
 13678 				; --- ForToDoCondition
 13679 7BF8 AD 39 A2			lda Y
 13680 7BFB C9 10			cmp #$10
 13681 7BFD 90 03 4C 56 7D		jcs l_2926
 13682
 13683 				; optimize OK (service.pas), line = 2756
 13684
 13685 7C02 AD C6 9F			lda NEWVAUS.WIDTH
 13686 7C05 85 8E			sta :ecx
 13687 7C07 AD C7 9F			lda NEWVAUS.WIDTH+1
 13688 7C0A 85 8F			sta :ecx+1
 13689 7C0C AD 39 A2			lda Y
 13690 7C0F 85 86			sta :eax
 13691 7C11 A9 00			lda #$00
 13692 7C13 85 87			sta :eax+1
 13693 					.ifdef fmulinit
 13694 					fmulu_16
 13695 					els
 13696 7C15 20 4F 23			imulCX_AL
 13697 					eif
 13698 7C18 A5 86			lda :eax
 13699 7C1A 85 9F			sta :STACKORIGIN+9
 13700 7C1C A5 87			lda :eax+1
 13701 7C1E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 13702 7C20 A9 10			lda #$10
 13703 7C22 85 8E			sta :ecx
 13704 7C24 A9 00			lda #$00
 13705 7C26 85 8F			sta :ecx+1
 13706 7C28 AD C6 9F			lda NEWVAUS.WIDTH
 13707 7C2B 85 86			sta :eax
 13708 7C2D AD C7 9F			lda NEWVAUS.WIDTH+1
 13709 7C30 85 87			sta :eax+1
 13710 					.ifdef fmulinit
 13711 					fmulu_16
 13712 					els
 13713 7C32 20 0B 23			imulCX
 13714 					eif
 13715 7C35 A5 86			lda :eax
 13716 7C37 85 8E			sta :ecx
 13717 7C39 A5 87			lda :eax+1
 13718 7C3B 85 8F			sta :ecx+1
 13719 7C3D AD 3A A2			lda W
 13720 7C40 85 86			sta :eax
 13721 7C42 A9 00			lda #$00
 13722 7C44 85 87			sta :eax+1
 13723 					.ifdef fmulinit
 13724 					fmulu_16
 13725 					els
 13726 7C46 20 4F 23			imulCX_AL
 13727 					eif
 13728 7C49 A5 86			lda :eax
 13729 7C4B 18 65 9F			add :STACKORIGIN+9
 13730 7C4E 8D 3B A2			sta Z
 13731 7C51 A5 87			lda :eax+1
 13732 7C53 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 13733 7C55 8D 3C A2			sta Z+1
 13734
 13735 				; optimize OK (service.pas), line = 2758
 13736
 13737 7C58 AD 39 A2			lda Y
 13738 7C5B 18 6D 3F A2			add B
 13739 7C5F A8				tay
 13740 7C60 AD 3D A2			lda A
 13741 7C63 18 79 00 C0			add adr.ROW,y
 13742 7C67 8D 8D A0			sta HLP
 13743 7C6A AD 3E A2			lda A+1
 13744 7C6D 79 00 C1			adc adr.ROW+256,y
 13745 7C70 8D 8E A0			sta HLP+1
 13746
 13747 				; optimize OK (service.pas), line = 2760
 13748
 13749 7C73 AD CA 9F			lda NEWVAUS.OFS
 13750 7C76 18 6D 3B A2			add Z
 13751 7C7A 8D 6A 9F			sta VBXE_RAM.POSITION
 13752 7C7D AD CB 9F			lda NEWVAUS.OFS+1
 13753 7C80 6D 3C A2			adc Z+1
 13754 7C83 8D 6B 9F			sta VBXE_RAM.POSITION+1
 13755 7C86 AD CC 9F			lda NEWVAUS.OFS+2
 13756 7C89 69 00			adc #$00
 13757 7C8B 8D 6C 9F			sta VBXE_RAM.POSITION+2
 13758 7C8E AD CD 9F			lda NEWVAUS.OFS+3
 13759 7C91 69 00			adc #$00
 13760 7C93 8D 6D 9F			sta VBXE_RAM.POSITION+3
 13761
 13762 				; optimize OK (service.pas), line = 2761
 13763
 13764 7C96 AD 68 9E			lda SCANLINE
 13765 7C99 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13766 7C9C AD 69 9E			lda SCANLINE+1
 13767 7C9F 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13768 7CA2 AD C6 9F			lda NEWVAUS.WIDTH
 13769 7CA5 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13770 7CA8 AD C7 9F			lda NEWVAUS.WIDTH+1
 13771 7CAB 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13772 7CAE AD 10 9E			lda VBXE_RAM
 13773 7CB1 AC 11 9E			ldy VBXE_RAM+1
 13774 7CB4 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13775
 13776 				; optimize OK (service.pas), line = 2763
 13777
 13778 7CB7 AD 9A 9F			lda PLAYSCREEN.OFS
 13779 7CBA 18 6D 8D A0			add HLP
 13780 7CBE 8D 6A 9F			sta VBXE_RAM.POSITION
 13781 7CC1 AD 9B 9F			lda PLAYSCREEN.OFS+1
 13782 7CC4 6D 8E A0			adc HLP+1
 13783 7CC7 8D 6B 9F			sta VBXE_RAM.POSITION+1
 13784 7CCA AD 9C 9F			lda PLAYSCREEN.OFS+2
 13785 7CCD 69 00			adc #$00
 13786 7CCF 8D 6C 9F			sta VBXE_RAM.POSITION+2
 13787 7CD2 AD 9D 9F			lda PLAYSCREEN.OFS+3
 13788 7CD5 69 00			adc #$00
 13789 7CD7 8D 6D 9F			sta VBXE_RAM.POSITION+3
 13790
 13791 				; optimize OK (service.pas), line = 2764
 13792
 13793 7CDA A9 80			lda <adr.SCANLINE+$80
 13794 7CDC 8D 10 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER
 13795 7CDF A9 C5			lda >adr.SCANLINE+$80
 13796 7CE1 8D 11 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.BUFFER+1
 13797 7CE4 AD C6 9F			lda NEWVAUS.WIDTH
 13798 7CE7 8D 12 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT
 13799 7CEA AD C7 9F			lda NEWVAUS.WIDTH+1
 13800 7CED 8D 13 9F			sta VBXE.TVBXEMEMORYSTREAM.READBUFFER.COUNT+1
 13801 7CF0 AD 10 9E			lda VBXE_RAM
 13802 7CF3 AC 11 9E			ldy VBXE_RAM+1
 13803 7CF6 20 C4 34			jsr VBXE.TVBXEMEMORYSTREAM.READBUFFER
 13804
 13805 				; optimize OK (service.pas), line = 2766
 13806
 13807 7CF9 A9 00			lda #$00
 13808 7CFB 8D 38 A2			sta X
 13809 7CFE AC C6 9F			ldy NEWVAUS.WIDTH
 13810 7D01 88				dey
 13811 7D02 8C 06 7D			sty @FORTMP_2978_0
 13812
 13813 7D05			l_297B
 13814 				; --- ForToDoCondition
 13815 7D05 A9 00			lda @FORTMP_2978_0::#$00
 13816 7D07 CD 38 A2			cmp X
 13817 7D0A 90 1C			jcc l_2989
 13818
 13819 				; optimize OK (service.pas), line = 2769
 13820
 13821 7D0C AC 38 A2			ldy X
 13822 7D0F B9 00 C5			lda adr.SCANLINE,y
 13823 7D12 D0 06			jne l_299E
 13824
 13825 				; optimize OK (service.pas), line = 2775
 13826
 13827 7D14 B9 80 C5			lda adr.SCANLINE+$80,y
 13828 7D17 4C 20 7D			jmp l_29B8
 13829 7D1A			l_299E
 13830
 13831 				; optimize OK (service.pas), line = 2782
 13832
 13833 7D1A AC 38 A2			ldy X
 13834 7D1D B9 00 C5			lda adr.SCANLINE,y
 13835 7D20			l_29B8
 13836 7D20 99 00 C2			sta adr.TMP,y
 13837
 13838 				; --- ForToDoEpilog
 13839 7D23 EE 38 A2			inc X
 13840 7D26 D0 DD			jne l_297B
 13841 7D28			l_2989
 13842
 13843 				; optimize OK (service.pas), line = 2785
 13844
 13845 7D28 AD 8D A0			lda HLP
 13846 7D2B 8D AE A0			sta BLITTMP.DST
 13847 7D2E A9 50			lda #$50
 13848 7D30 18 6D 8E A0			add HLP+1
 13849 7D34 8D AF A0			sta BLITTMP.DST+1
 13850 7D37 A9 00			lda #$00
 13851 7D39 69 00			adc #$00
 13852 7D3B 8D B0 A0			sta BLITTMP.DST+2
 13853 7D3E A9 00			lda #$00
 13854 7D40 69 00			adc #$00
 13855 7D42 8D B1 A0			sta BLITTMP.DST+3
 13856 7D45 AD C6 9F			lda NEWVAUS.WIDTH
 13857 7D48 8D B2 A0			sta BLITTMP.SIZE
 13858 7D4B 20 69 3C			jsr BLITTMP
 13859
 13860 				; --- ForToDoEpilog
 13861 7D4E EE 39 A2			inc Y
 13862 7D51 F0 03 4C F8 7B		jne l_2918
 13863 7D56			l_2926
 13864
 13865 				; optimize OK (service.pas), line = 2788
 13866
 13867 7D56 A9 01			lda #$01
 13868 7D58 8D C7 A0			sta MYDELAY.A
 13869 7D5B A9 00			lda #$00
 13870 7D5D 8D C8 A0			sta MYDELAY.A+1
 13871 7D60 20 65 3D			jsr MYDELAY
 13872
 13873 				; --- ForToDoEpilog
 13874 7D63 CE 3A A2			dec W
 13875 7D66 30 03 4C F3 7B		jpl l_2901
 13876 7D6B			l_290F
 13877
 13878 				; ------------------------------------------------------------
 13879
 13880 = A238			X	= DATAORIGIN+$03AD
 13881 = A239			Y	= DATAORIGIN+$03AE
 13882 = A23A			W	= DATAORIGIN+$03AF
 13883 = A23B			Z	= DATAORIGIN+$03B0
 13884 = A23D			A	= DATAORIGIN+$03B2
 13885 = A23F			B	= DATAORIGIN+$03B4
 13886
 13887 = A238			@VarData	= X
 13888 = 0009			@VarDataSize	= 9
 13889
 13890 7D6B			@exit
 13891 					.ifdef @new
 13892 					lda <@VarData
 13893 					sta :ztmp
 13894 					lda >@VarData
 13895 					ldy #@VarDataSize-1
 13896 					jmp @FreeMem
 13897 					els
 13898 7D6B 60				rts						; ret
 13899 					eif
 13900 				.endl
 13901
 13902 7D6C			.local	PUT_DIGIT					; PROCEDURE
 13903
 13904 				; optimize OK (service.pas), line = 2798
 13905
 13906 7D6C A9 DE			lda #$DE
 13907 7D6E 8D 4A A2			sta A
 13908
 13909 				; optimize OK (service.pas), line = 2822
 13910
 13911 7D71 AC 46 A2			ldy NUM
 13912 7D74 B9 96 20			lda adr.DIGITS,y
 13913 7D77 29 01			and #$01
 13914 7D79 C9 01			cmp #$01
 13915 7D7B D0 05			jne l_29FE
 13916 7D7D A9 DF			lda #$DF
 13917 7D7F 8D 4A A2			sta A
 13918 7D82			l_29FE
 13919
 13920 				; optimize OK (service.pas), line = 2823
 13921
 13922 7D82 A9 01			lda #$01
 13923 7D84 8D 48 A2			sta X
 13924
 13925 7D87			l_2A0E
 13926 				; --- ForToDoCondition
 13927 7D87 AD 48 A2			lda X
 13928 7D8A C9 05			cmp #$05
 13929 7D8C B0 63			jcs l_2A1C
 13930
 13931 				; optimize OK (service.pas), line = 2825
 13932
 13933 7D8E AD 42 A2			lda PX
 13934 7D91 85 A0			sta :STACKORIGIN+10
 13935 7D93 A9 50			lda #$50
 13936 7D95 18 6D 43 A2			add PX+1
 13937 7D99 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13938 7D9B A9 00			lda #$00
 13939 7D9D 69 00			adc #$00
 13940 7D9F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13941 7DA1 A9 00			lda #$00
 13942 7DA3 69 00			adc #$00
 13943 7DA5 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13944 7DA7 A5 A0			lda :STACKORIGIN+10
 13945 7DA9 18 6D 48 A2			add X
 13946 7DAD 85 A0			sta :STACKORIGIN+10
 13947 7DAF A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13948 7DB1 69 00			adc #$00
 13949 7DB3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 13950 7DB5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13951 7DB7 69 00			adc #$00
 13952 7DB9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 13953 7DBB A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13954 7DBD 69 00			adc #$00
 13955 7DBF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 13956 7DC1 AC 44 A2			ldy PY
 13957 7DC4 A5 A0			lda :STACKORIGIN+10
 13958 7DC6 18 79 00 C0			add adr.ROW,y
 13959 7DCA 8D BD A0			sta PUTBYTE.DST
 13960 7DCD A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 13961 7DCF 79 00 C1			adc adr.ROW+256,y
 13962 7DD2 8D BE A0			sta PUTBYTE.DST+1
 13963 7DD5 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 13964 7DD7 69 00			adc #$00
 13965 7DD9 8D BF A0			sta PUTBYTE.DST+2
 13966 7DDC A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 13967 7DDE 69 00			adc #$00
 13968 7DE0 8D C0 A0			sta PUTBYTE.DST+3
 13969 7DE3 AD 4A A2			lda A
 13970 7DE6 8D C1 A0			sta PUTBYTE.V
 13971 7DE9 20 14 3D			jsr PUTBYTE
 13972
 13973 				; --- ForToDoEpilog
 13974 7DEC EE 48 A2			inc X
 13975 7DEF D0 96			jne l_2A0E
 13976 7DF1			l_2A1C
 13977
 13978 				; optimize OK (service.pas), line = 2829
 13979
 13980 7DF1 A9 DE			lda #$DE
 13981 7DF3 8D 4A A2			sta A
 13982
 13983 				; optimize OK (service.pas), line = 2830
 13984
 13985 7DF6 AC 46 A2			ldy NUM
 13986 7DF9 B9 96 20			lda adr.DIGITS,y
 13987 7DFC 29 02			and #$02
 13988 7DFE C9 02			cmp #$02
 13989 7E00 D0 05			jne l_2A54
 13990 7E02 A9 DF			lda #$DF
 13991 7E04 8D 4A A2			sta A
 13992 7E07			l_2A54
 13993
 13994 				; optimize OK (service.pas), line = 2831
 13995
 13996 7E07 A9 01			lda #$01
 13997 7E09 8D 48 A2			sta X
 13998
 13999 7E0C			l_2A64
 14000 				; --- ForToDoCondition
 14001 7E0C AD 48 A2			lda X
 14002 7E0F C9 05			cmp #$05
 14003 7E11 B0 63			jcs l_2A72
 14004
 14005 				; optimize OK (service.pas), line = 2833
 14006
 14007 7E13 AD 42 A2			lda PX
 14008 7E16 85 A0			sta :STACKORIGIN+10
 14009 7E18 A9 50			lda #$50
 14010 7E1A 18 6D 43 A2			add PX+1
 14011 7E1E 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14012 7E20 A9 00			lda #$00
 14013 7E22 69 00			adc #$00
 14014 7E24 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14015 7E26 A9 00			lda #$00
 14016 7E28 69 00			adc #$00
 14017 7E2A 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14018 7E2C A5 A0			lda :STACKORIGIN+10
 14019 7E2E 18 6D 48 A2			add X
 14020 7E32 85 A0			sta :STACKORIGIN+10
 14021 7E34 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14022 7E36 69 00			adc #$00
 14023 7E38 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14024 7E3A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14025 7E3C 69 00			adc #$00
 14026 7E3E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14027 7E40 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14028 7E42 69 00			adc #$00
 14029 7E44 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14030 7E46 AC 44 A2			ldy PY
 14031 7E49 A5 A0			lda :STACKORIGIN+10
 14032 7E4B 18 79 05 C0			add adr.ROW+$05,y
 14033 7E4F 8D BD A0			sta PUTBYTE.DST
 14034 7E52 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14035 7E54 79 05 C1			adc adr.ROW+256+$05,y
 14036 7E57 8D BE A0			sta PUTBYTE.DST+1
 14037 7E5A A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14038 7E5C 69 00			adc #$00
 14039 7E5E 8D BF A0			sta PUTBYTE.DST+2
 14040 7E61 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14041 7E63 69 00			adc #$00
 14042 7E65 8D C0 A0			sta PUTBYTE.DST+3
 14043 7E68 AD 4A A2			lda A
 14044 7E6B 8D C1 A0			sta PUTBYTE.V
 14045 7E6E 20 14 3D			jsr PUTBYTE
 14046
 14047 				; --- ForToDoEpilog
 14048 7E71 EE 48 A2			inc X
 14049 7E74 D0 96			jne l_2A64
 14050 7E76			l_2A72
 14051
 14052 				; optimize OK (service.pas), line = 2837
 14053
 14054 7E76 A9 DE			lda #$DE
 14055 7E78 8D 4A A2			sta A
 14056
 14057 				; optimize OK (service.pas), line = 2838
 14058
 14059 7E7B AC 46 A2			ldy NUM
 14060 7E7E B9 96 20			lda adr.DIGITS,y
 14061 7E81 29 04			and #$04
 14062 7E83 C9 04			cmp #$04
 14063 7E85 D0 05			jne l_2AAE
 14064 7E87 A9 DF			lda #$DF
 14065 7E89 8D 4A A2			sta A
 14066 7E8C			l_2AAE
 14067
 14068 				; optimize OK (service.pas), line = 2839
 14069
 14070 7E8C A9 01			lda #$01
 14071 7E8E 8D 48 A2			sta X
 14072
 14073 7E91			l_2ABE
 14074 				; --- ForToDoCondition
 14075 7E91 AD 48 A2			lda X
 14076 7E94 C9 05			cmp #$05
 14077 7E96 B0 63			jcs l_2ACC
 14078
 14079 				; optimize OK (service.pas), line = 2841
 14080
 14081 7E98 AD 42 A2			lda PX
 14082 7E9B 85 A0			sta :STACKORIGIN+10
 14083 7E9D A9 50			lda #$50
 14084 7E9F 18 6D 43 A2			add PX+1
 14085 7EA3 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14086 7EA5 A9 00			lda #$00
 14087 7EA7 69 00			adc #$00
 14088 7EA9 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14089 7EAB A9 00			lda #$00
 14090 7EAD 69 00			adc #$00
 14091 7EAF 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14092 7EB1 A5 A0			lda :STACKORIGIN+10
 14093 7EB3 18 6D 48 A2			add X
 14094 7EB7 85 A0			sta :STACKORIGIN+10
 14095 7EB9 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14096 7EBB 69 00			adc #$00
 14097 7EBD 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14098 7EBF A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14099 7EC1 69 00			adc #$00
 14100 7EC3 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14101 7EC5 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14102 7EC7 69 00			adc #$00
 14103 7EC9 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14104 7ECB AC 44 A2			ldy PY
 14105 7ECE A5 A0			lda :STACKORIGIN+10
 14106 7ED0 18 79 0A C0			add adr.ROW+$0A,y
 14107 7ED4 8D BD A0			sta PUTBYTE.DST
 14108 7ED7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14109 7ED9 79 0A C1			adc adr.ROW+256+$0A,y
 14110 7EDC 8D BE A0			sta PUTBYTE.DST+1
 14111 7EDF A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14112 7EE1 69 00			adc #$00
 14113 7EE3 8D BF A0			sta PUTBYTE.DST+2
 14114 7EE6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14115 7EE8 69 00			adc #$00
 14116 7EEA 8D C0 A0			sta PUTBYTE.DST+3
 14117 7EED AD 4A A2			lda A
 14118 7EF0 8D C1 A0			sta PUTBYTE.V
 14119 7EF3 20 14 3D			jsr PUTBYTE
 14120
 14121 				; --- ForToDoEpilog
 14122 7EF6 EE 48 A2			inc X
 14123 7EF9 D0 96			jne l_2ABE
 14124 7EFB			l_2ACC
 14125
 14126 				; optimize OK (service.pas), line = 2844
 14127
 14128 7EFB A9 DE			lda #$DE
 14129 7EFD 8D 4A A2			sta A
 14130
 14131 				; optimize OK (service.pas), line = 2845
 14132
 14133 7F00 AC 46 A2			ldy NUM
 14134 7F03 B9 96 20			lda adr.DIGITS,y
 14135 7F06 29 08			and #$08
 14136 7F08 C9 08			cmp #$08
 14137 7F0A D0 05			jne l_2B08
 14138 7F0C A9 DF			lda #$DF
 14139 7F0E 8D 4A A2			sta A
 14140 7F11			l_2B08
 14141
 14142 				; optimize OK (service.pas), line = 2846
 14143
 14144 7F11 A9 01			lda #$01
 14145 7F13 8D 49 A2			sta Y
 14146
 14147 7F16			l_2B18
 14148 				; --- ForToDoCondition
 14149 7F16 AD 49 A2			lda Y
 14150 7F19 C9 05			cmp #$05
 14151 7F1B B0 4E			jcs l_2B26
 14152
 14153 				; optimize OK (service.pas), line = 2848
 14154
 14155 7F1D AD 42 A2			lda PX
 14156 7F20 85 A0			sta :STACKORIGIN+10
 14157 7F22 A9 50			lda #$50
 14158 7F24 18 6D 43 A2			add PX+1
 14159 7F28 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14160 7F2A A9 00			lda #$00
 14161 7F2C 69 00			adc #$00
 14162 7F2E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14163 7F30 A9 00			lda #$00
 14164 7F32 69 00			adc #$00
 14165 7F34 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14166 7F36 AD 44 A2			lda PY
 14167 7F39 18 6D 49 A2			add Y
 14168 7F3D A8				tay
 14169 7F3E A5 A0			lda :STACKORIGIN+10
 14170 7F40 18 79 00 C0			add adr.ROW,y
 14171 7F44 8D BD A0			sta PUTBYTE.DST
 14172 7F47 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14173 7F49 79 00 C1			adc adr.ROW+256,y
 14174 7F4C 8D BE A0			sta PUTBYTE.DST+1
 14175 7F4F A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14176 7F51 69 00			adc #$00
 14177 7F53 8D BF A0			sta PUTBYTE.DST+2
 14178 7F56 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14179 7F58 69 00			adc #$00
 14180 7F5A 8D C0 A0			sta PUTBYTE.DST+3
 14181 7F5D AD 4A A2			lda A
 14182 7F60 8D C1 A0			sta PUTBYTE.V
 14183 7F63 20 14 3D			jsr PUTBYTE
 14184
 14185 				; --- ForToDoEpilog
 14186 7F66 EE 49 A2			inc Y
 14187 7F69 D0 AB			jne l_2B18
 14188 7F6B			l_2B26
 14189
 14190 				; optimize OK (service.pas), line = 2851
 14191
 14192 7F6B A9 DE			lda #$DE
 14193 7F6D 8D 4A A2			sta A
 14194
 14195 				; optimize OK (service.pas), line = 2852
 14196
 14197 7F70 AC 46 A2			ldy NUM
 14198 7F73 B9 96 20			lda adr.DIGITS,y
 14199 7F76 29 10			and #$10
 14200 7F78 C9 10			cmp #$10
 14201 7F7A D0 05			jne l_2B5E
 14202 7F7C A9 DF			lda #$DF
 14203 7F7E 8D 4A A2			sta A
 14204 7F81			l_2B5E
 14205
 14206 				; optimize OK (service.pas), line = 2853
 14207
 14208 7F81 A9 01			lda #$01
 14209 7F83 8D 49 A2			sta Y
 14210
 14211 7F86			l_2B6E
 14212 				; --- ForToDoCondition
 14213 7F86 AD 49 A2			lda Y
 14214 7F89 C9 05			cmp #$05
 14215 7F8B B0 4E			jcs l_2B7C
 14216
 14217 				; optimize OK (service.pas), line = 2855
 14218
 14219 7F8D AD 42 A2			lda PX
 14220 7F90 85 A0			sta :STACKORIGIN+10
 14221 7F92 A9 50			lda #$50
 14222 7F94 18 6D 43 A2			add PX+1
 14223 7F98 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14224 7F9A A9 00			lda #$00
 14225 7F9C 69 00			adc #$00
 14226 7F9E 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14227 7FA0 A9 00			lda #$00
 14228 7FA2 69 00			adc #$00
 14229 7FA4 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14230 7FA6 AD 44 A2			lda PY
 14231 7FA9 18 6D 49 A2			add Y
 14232 7FAD A8				tay
 14233 7FAE A5 A0			lda :STACKORIGIN+10
 14234 7FB0 18 79 05 C0			add adr.ROW+$05,y
 14235 7FB4 8D BD A0			sta PUTBYTE.DST
 14236 7FB7 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14237 7FB9 79 05 C1			adc adr.ROW+256+$05,y
 14238 7FBC 8D BE A0			sta PUTBYTE.DST+1
 14239 7FBF A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14240 7FC1 69 00			adc #$00
 14241 7FC3 8D BF A0			sta PUTBYTE.DST+2
 14242 7FC6 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14243 7FC8 69 00			adc #$00
 14244 7FCA 8D C0 A0			sta PUTBYTE.DST+3
 14245 7FCD AD 4A A2			lda A
 14246 7FD0 8D C1 A0			sta PUTBYTE.V
 14247 7FD3 20 14 3D			jsr PUTBYTE
 14248
 14249 				; --- ForToDoEpilog
 14250 7FD6 EE 49 A2			inc Y
 14251 7FD9 D0 AB			jne l_2B6E
 14252 7FDB			l_2B7C
 14253
 14254 				; optimize OK (service.pas), line = 2858
 14255
 14256 7FDB A9 DE			lda #$DE
 14257 7FDD 8D 4A A2			sta A
 14258
 14259 				; optimize OK (service.pas), line = 2859
 14260
 14261 7FE0 AC 46 A2			ldy NUM
 14262 7FE3 B9 96 20			lda adr.DIGITS,y
 14263 7FE6 29 20			and #$20
 14264 7FE8 C9 20			cmp #$20
 14265 7FEA D0 05			jne l_2BB8
 14266 7FEC A9 DF			lda #$DF
 14267 7FEE 8D 4A A2			sta A
 14268 7FF1			l_2BB8
 14269
 14270 				; optimize OK (service.pas), line = 2860
 14271
 14272 7FF1 A9 01			lda #$01
 14273 7FF3 8D 49 A2			sta Y
 14274
 14275 7FF6			l_2BC8
 14276 				; --- ForToDoCondition
 14277 7FF6 AD 49 A2			lda Y
 14278 7FF9 C9 05			cmp #$05
 14279 7FFB B0 4F			jcs l_2BD6
 14280
 14281 				; optimize OK (service.pas), line = 2862
 14282
 14283 7FFD A9 05			lda #$05
 14284 7FFF 6D 42 A2			adc PX
 14285 8002 85 A0			sta :STACKORIGIN+10
 14286 8004 A9 50			lda #$50
 14287 8006 6D 43 A2			adc PX+1
 14288 8009 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14289 800B A9 00			lda #$00
 14290 800D 69 00			adc #$00
 14291 800F 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14292 8011 A9 00			lda #$00
 14293 8013 69 00			adc #$00
 14294 8015 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14295 8017 AD 44 A2			lda PY
 14296 801A 18 6D 49 A2			add Y
 14297 801E A8				tay
 14298 801F A5 A0			lda :STACKORIGIN+10
 14299 8021 18 79 00 C0			add adr.ROW,y
 14300 8025 8D BD A0			sta PUTBYTE.DST
 14301 8028 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14302 802A 79 00 C1			adc adr.ROW+256,y
 14303 802D 8D BE A0			sta PUTBYTE.DST+1
 14304 8030 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14305 8032 69 00			adc #$00
 14306 8034 8D BF A0			sta PUTBYTE.DST+2
 14307 8037 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14308 8039 69 00			adc #$00
 14309 803B 8D C0 A0			sta PUTBYTE.DST+3
 14310 803E AD 4A A2			lda A
 14311 8041 8D C1 A0			sta PUTBYTE.V
 14312 8044 20 14 3D			jsr PUTBYTE
 14313
 14314 				; --- ForToDoEpilog
 14315 8047 EE 49 A2			inc Y
 14316 804A D0 AA			jne l_2BC8
 14317 804C			l_2BD6
 14318
 14319 				; optimize OK (service.pas), line = 2865
 14320
 14321 804C A9 DE			lda #$DE
 14322 804E 8D 4A A2			sta A
 14323
 14324 				; optimize OK (service.pas), line = 2866
 14325
 14326 8051 AC 46 A2			ldy NUM
 14327 8054 B9 96 20			lda adr.DIGITS,y
 14328 8057 29 40			and #$40
 14329 8059 C9 40			cmp #$40
 14330 805B D0 05			jne l_2C12
 14331 805D A9 DF			lda #$DF
 14332 805F 8D 4A A2			sta A
 14333 8062			l_2C12
 14334
 14335 				; optimize OK (service.pas), line = 2867
 14336
 14337 8062 A9 01			lda #$01
 14338 8064 8D 49 A2			sta Y
 14339
 14340 8067			l_2C22
 14341 				; --- ForToDoCondition
 14342 8067 AD 49 A2			lda Y
 14343 806A C9 05			cmp #$05
 14344 806C B0 4F			jcs l_2C30
 14345
 14346 				; optimize OK (service.pas), line = 2869
 14347
 14348 806E A9 05			lda #$05
 14349 8070 6D 42 A2			adc PX
 14350 8073 85 A0			sta :STACKORIGIN+10
 14351 8075 A9 50			lda #$50
 14352 8077 6D 43 A2			adc PX+1
 14353 807A 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 14354 807C A9 00			lda #$00
 14355 807E 69 00			adc #$00
 14356 8080 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 14357 8082 A9 00			lda #$00
 14358 8084 69 00			adc #$00
 14359 8086 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 14360 8088 AD 44 A2			lda PY
 14361 808B 18 6D 49 A2			add Y
 14362 808F A8				tay
 14363 8090 A5 A0			lda :STACKORIGIN+10
 14364 8092 18 79 05 C0			add adr.ROW+$05,y
 14365 8096 8D BD A0			sta PUTBYTE.DST
 14366 8099 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 14367 809B 79 05 C1			adc adr.ROW+256+$05,y
 14368 809E 8D BE A0			sta PUTBYTE.DST+1
 14369 80A1 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 14370 80A3 69 00			adc #$00
 14371 80A5 8D BF A0			sta PUTBYTE.DST+2
 14372 80A8 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 14373 80AA 69 00			adc #$00
 14374 80AC 8D C0 A0			sta PUTBYTE.DST+3
 14375 80AF AD 4A A2			lda A
 14376 80B2 8D C1 A0			sta PUTBYTE.V
 14377 80B5 20 14 3D			jsr PUTBYTE
 14378
 14379 				; --- ForToDoEpilog
 14380 80B8 EE 49 A2			inc Y
 14381 80BB D0 AA			jne l_2C22
 14382 80BD			l_2C30
 14383
 14384 				; ------------------------------------------------------------
 14385
 14386 = A242			PX	= DATAORIGIN+$03B7
 14387 = A244			PY	= DATAORIGIN+$03B9
 14388 = A246			NUM	= DATAORIGIN+$03BB
 14389 = A248			X	= DATAORIGIN+$03BD
 14390 = A249			Y	= DATAORIGIN+$03BE
 14391 = A24A			A	= DATAORIGIN+$03BF
 14392
 14393 = A242			@VarData	= PX
 14394 = 0009			@VarDataSize	= 9
 14395
 14396 80BD			@exit
 14397 					.ifdef @new
 14398 					lda <@VarData
 14399 					sta :ztmp
 14400 					lda >@VarData
 14401 					ldy #@VarDataSize-1
 14402 					jmp @FreeMem
 14403 					els
 14404 80BD 60				rts						; ret
 14405 					eif
 14406 				.endl
 14407
 14408 80BE			.local	WRITE_SCORE					; PROCEDURE
 14409
 14410 				; optimize OK (service.pas), line = 2880
 14411
 14412 80BE A9 00			lda #$00
 14413 80C0 8D 57 A2			sta F
 14414
 14415 				; optimize OK (service.pas), line = 2885
 14416
 14417 80C3 A9 A0			lda #$A0
 14418 80C5 85 8E			sta @INTEGER.DIV.B
 14419 80C7 A9 86			lda #$86
 14420 80C9 85 8F			sta @INTEGER.DIV.B+1
 14421 80CB A9 01			lda #$01
 14422 80CD 85 90			sta @INTEGER.DIV.B+2
 14423 80CF A9 00			lda #$00
 14424 80D1 85 91			sta @INTEGER.DIV.B+3
 14425 80D3 AD 4F A2			lda SC
 14426 80D6 85 86			sta @INTEGER.DIV.A
 14427 80D8 AD 50 A2			lda SC+1
 14428 80DB 85 87			sta @INTEGER.DIV.A+1
 14429 80DD AD 51 A2			lda SC+2
 14430 80E0 85 88			sta @INTEGER.DIV.A+2
 14431 80E2 AD 52 A2			lda SC+3
 14432 80E5 85 89			sta @INTEGER.DIV.A+3
 14433 80E7 20 73 22			jsr @INTEGER.DIV
 14434 80EA A9 0A			lda #$0A
 14435 80EC 85 8E			sta @INTEGER.MOD.B
 14436 80EE A9 00			lda #$00
 14437 80F0 85 8F			sta @INTEGER.MOD.B+1
 14438 80F2 85 90			sta @INTEGER.MOD.B+2
 14439 80F4 85 91			sta @INTEGER.MOD.B+3
 14440 80F6 20 90 22			jsr @INTEGER.MOD
 14441 80F9 A5 8A			lda @INTEGER.MOD.RESULT
 14442 80FB 8D 53 A2			sta N1
 14443 80FE A5 8B			lda @INTEGER.MOD.RESULT+1
 14444 8100 8D 54 A2			sta N1+1
 14445 8103 A5 8C			lda @INTEGER.MOD.RESULT+2
 14446 8105 8D 55 A2			sta N1+2
 14447 8108 A5 8D			lda @INTEGER.MOD.RESULT+3
 14448 810A 8D 56 A2			sta N1+3
 14449
 14450 				; optimize OK (service.pas), line = 2886
 14451
 14452 810D 30 10			jmi l_2C78
 14453 810F 0D 55 A2			ora N1+2
 14454 8112 0D 54 A2			ora N1+1
 14455 8115 0D 53 A2			ora N1
 14456 8118 F0 05			jeq l_2C78
 14457 811A A9 01			lda #$01
 14458 811C 8D 57 A2			sta F
 14459 811F			l_2C78
 14460
 14461 				; optimize OK (service.pas), line = 2887
 14462
 14463 811F AD 57 A2			lda F
 14464 8122 F0 24			jeq l_2C8B
 14465 8124 AD 4B A2			lda PX
 14466 8127 8D 42 A2			sta PUT_DIGIT.PX
 14467 812A AD 4C A2			lda PX+1
 14468 812D 8D 43 A2			sta PUT_DIGIT.PX+1
 14469 8130 AD 4D A2			lda PY
 14470 8133 8D 44 A2			sta PUT_DIGIT.PY
 14471 8136 AD 4E A2			lda PY+1
 14472 8139 8D 45 A2			sta PUT_DIGIT.PY+1
 14473 813C AD 53 A2			lda N1
 14474 813F 8D 46 A2			sta PUT_DIGIT.NUM
 14475 8142 AD 54 A2			lda N1+1
 14476 8145 4C 67 81			jmp l_2C9B
 14477 8148			l_2C8B
 14478
 14479 				; optimize OK (service.pas), line = 2888
 14480
 14481 8148 AD 4B A2			lda PX
 14482 814B 8D 42 A2			sta PUT_DIGIT.PX
 14483 814E AD 4C A2			lda PX+1
 14484 8151 8D 43 A2			sta PUT_DIGIT.PX+1
 14485 8154 AD 4D A2			lda PY
 14486 8157 8D 44 A2			sta PUT_DIGIT.PY
 14487 815A AD 4E A2			lda PY+1
 14488 815D 8D 45 A2			sta PUT_DIGIT.PY+1
 14489 8160 A9 0A			lda #$0A
 14490 8162 8D 46 A2			sta PUT_DIGIT.NUM
 14491 8165 A9 00			lda #$00
 14492 8167			l_2C9B
 14493 8167 8D 47 A2			sta PUT_DIGIT.NUM+1
 14494 816A 20 6C 7D			jsr PUT_DIGIT
 14495
 14496 				; optimize OK (service.pas), line = 2891
 14497
 14498 816D A9 10			lda #$10
 14499 816F 85 8E			sta @INTEGER.DIV.B
 14500 8171 A9 27			lda #$27
 14501 8173 85 8F			sta @INTEGER.DIV.B+1
 14502 8175 A9 00			lda #$00
 14503 8177 85 90			sta @INTEGER.DIV.B+2
 14504 8179 85 91			sta @INTEGER.DIV.B+3
 14505 817B AD 4F A2			lda SC
 14506 817E 85 86			sta @INTEGER.DIV.A
 14507 8180 AD 50 A2			lda SC+1
 14508 8183 85 87			sta @INTEGER.DIV.A+1
 14509 8185 AD 51 A2			lda SC+2
 14510 8188 85 88			sta @INTEGER.DIV.A+2
 14511 818A AD 52 A2			lda SC+3
 14512 818D 85 89			sta @INTEGER.DIV.A+3
 14513 818F 20 73 22			jsr @INTEGER.DIV
 14514 8192 A9 0A			lda #$0A
 14515 8194 85 8E			sta @INTEGER.MOD.B
 14516 8196 A9 00			lda #$00
 14517 8198 85 8F			sta @INTEGER.MOD.B+1
 14518 819A 85 90			sta @INTEGER.MOD.B+2
 14519 819C 85 91			sta @INTEGER.MOD.B+3
 14520 819E 20 90 22			jsr @INTEGER.MOD
 14521 81A1 A5 8A			lda @INTEGER.MOD.RESULT
 14522 81A3 8D 53 A2			sta N1
 14523 81A6 A5 8B			lda @INTEGER.MOD.RESULT+1
 14524 81A8 8D 54 A2			sta N1+1
 14525 81AB A5 8C			lda @INTEGER.MOD.RESULT+2
 14526 81AD 8D 55 A2			sta N1+2
 14527 81B0 A5 8D			lda @INTEGER.MOD.RESULT+3
 14528 81B2 8D 56 A2			sta N1+3
 14529
 14530 				; optimize OK (service.pas), line = 2892
 14531
 14532 81B5 30 10			jmi l_2CBD
 14533 81B7 0D 55 A2			ora N1+2
 14534 81BA 0D 54 A2			ora N1+1
 14535 81BD 0D 53 A2			ora N1
 14536 81C0 F0 05			jeq l_2CBD
 14537 81C2 A9 01			lda #$01
 14538 81C4 8D 57 A2			sta F
 14539 81C7			l_2CBD
 14540
 14541 				; optimize OK (service.pas), line = 2893
 14542
 14543 81C7 AD 57 A2			lda F
 14544 81CA F0 29			jeq l_2CD0
 14545 81CC AD 4B A2			lda PX
 14546 81CF 18 69 07			add #$07
 14547 81D2 8D 42 A2			sta PUT_DIGIT.PX
 14548 81D5 AD 4C A2			lda PX+1
 14549 81D8 69 00			adc #$00
 14550 81DA 8D 43 A2			sta PUT_DIGIT.PX+1
 14551 81DD AD 4D A2			lda PY
 14552 81E0 8D 44 A2			sta PUT_DIGIT.PY
 14553 81E3 AD 4E A2			lda PY+1
 14554 81E6 8D 45 A2			sta PUT_DIGIT.PY+1
 14555 81E9 AD 53 A2			lda N1
 14556 81EC 8D 46 A2			sta PUT_DIGIT.NUM
 14557 81EF AD 54 A2			lda N1+1
 14558 81F2 4C 19 82			jmp l_2CE4
 14559 81F5			l_2CD0
 14560
 14561 				; optimize OK (service.pas), line = 2894
 14562
 14563 81F5 AD 4B A2			lda PX
 14564 81F8 18 69 07			add #$07
 14565 81FB 8D 42 A2			sta PUT_DIGIT.PX
 14566 81FE AD 4C A2			lda PX+1
 14567 8201 69 00			adc #$00
 14568 8203 8D 43 A2			sta PUT_DIGIT.PX+1
 14569 8206 AD 4D A2			lda PY
 14570 8209 8D 44 A2			sta PUT_DIGIT.PY
 14571 820C AD 4E A2			lda PY+1
 14572 820F 8D 45 A2			sta PUT_DIGIT.PY+1
 14573 8212 A9 0A			lda #$0A
 14574 8214 8D 46 A2			sta PUT_DIGIT.NUM
 14575 8217 A9 00			lda #$00
 14576 8219			l_2CE4
 14577 8219 8D 47 A2			sta PUT_DIGIT.NUM+1
 14578 821C 20 6C 7D			jsr PUT_DIGIT
 14579
 14580 				; optimize OK (service.pas), line = 2897
 14581
 14582 821F A9 E8			lda #$E8
 14583 8221 85 8E			sta @INTEGER.DIV.B
 14584 8223 A9 03			lda #$03
 14585 8225 85 8F			sta @INTEGER.DIV.B+1
 14586 8227 A9 00			lda #$00
 14587 8229 85 90			sta @INTEGER.DIV.B+2
 14588 822B 85 91			sta @INTEGER.DIV.B+3
 14589 822D AD 4F A2			lda SC
 14590 8230 85 86			sta @INTEGER.DIV.A
 14591 8232 AD 50 A2			lda SC+1
 14592 8235 85 87			sta @INTEGER.DIV.A+1
 14593 8237 AD 51 A2			lda SC+2
 14594 823A 85 88			sta @INTEGER.DIV.A+2
 14595 823C AD 52 A2			lda SC+3
 14596 823F 85 89			sta @INTEGER.DIV.A+3
 14597 8241 20 73 22			jsr @INTEGER.DIV
 14598 8244 A9 0A			lda #$0A
 14599 8246 85 8E			sta @INTEGER.MOD.B
 14600 8248 A9 00			lda #$00
 14601 824A 85 8F			sta @INTEGER.MOD.B+1
 14602 824C 85 90			sta @INTEGER.MOD.B+2
 14603 824E 85 91			sta @INTEGER.MOD.B+3
 14604 8250 20 90 22			jsr @INTEGER.MOD
 14605 8253 A5 8A			lda @INTEGER.MOD.RESULT
 14606 8255 8D 53 A2			sta N1
 14607 8258 A5 8B			lda @INTEGER.MOD.RESULT+1
 14608 825A 8D 54 A2			sta N1+1
 14609 825D A5 8C			lda @INTEGER.MOD.RESULT+2
 14610 825F 8D 55 A2			sta N1+2
 14611 8262 A5 8D			lda @INTEGER.MOD.RESULT+3
 14612 8264 8D 56 A2			sta N1+3
 14613
 14614 				; optimize OK (service.pas), line = 2898
 14615
 14616 8267 30 10			jmi l_2D0A
 14617 8269 0D 55 A2			ora N1+2
 14618 826C 0D 54 A2			ora N1+1
 14619 826F 0D 53 A2			ora N1
 14620 8272 F0 05			jeq l_2D0A
 14621 8274 A9 01			lda #$01
 14622 8276 8D 57 A2			sta F
 14623 8279			l_2D0A
 14624
 14625 				; optimize OK (service.pas), line = 2899
 14626
 14627 8279 AD 57 A2			lda F
 14628 827C F0 29			jeq l_2D1D
 14629 827E AD 4B A2			lda PX
 14630 8281 18 69 0E			add #$0E
 14631 8284 8D 42 A2			sta PUT_DIGIT.PX
 14632 8287 AD 4C A2			lda PX+1
 14633 828A 69 00			adc #$00
 14634 828C 8D 43 A2			sta PUT_DIGIT.PX+1
 14635 828F AD 4D A2			lda PY
 14636 8292 8D 44 A2			sta PUT_DIGIT.PY
 14637 8295 AD 4E A2			lda PY+1
 14638 8298 8D 45 A2			sta PUT_DIGIT.PY+1
 14639 829B AD 53 A2			lda N1
 14640 829E 8D 46 A2			sta PUT_DIGIT.NUM
 14641 82A1 AD 54 A2			lda N1+1
 14642 82A4 4C CB 82			jmp l_2D31
 14643 82A7			l_2D1D
 14644
 14645 				; optimize OK (service.pas), line = 2900
 14646
 14647 82A7 AD 4B A2			lda PX
 14648 82AA 18 69 0E			add #$0E
 14649 82AD 8D 42 A2			sta PUT_DIGIT.PX
 14650 82B0 AD 4C A2			lda PX+1
 14651 82B3 69 00			adc #$00
 14652 82B5 8D 43 A2			sta PUT_DIGIT.PX+1
 14653 82B8 AD 4D A2			lda PY
 14654 82BB 8D 44 A2			sta PUT_DIGIT.PY
 14655 82BE AD 4E A2			lda PY+1
 14656 82C1 8D 45 A2			sta PUT_DIGIT.PY+1
 14657 82C4 A9 0A			lda #$0A
 14658 82C6 8D 46 A2			sta PUT_DIGIT.NUM
 14659 82C9 A9 00			lda #$00
 14660 82CB			l_2D31
 14661 82CB 8D 47 A2			sta PUT_DIGIT.NUM+1
 14662 82CE 20 6C 7D			jsr PUT_DIGIT
 14663
 14664 				; optimize OK (service.pas), line = 2903
 14665
 14666 82D1 A9 64			lda #$64
 14667 82D3 85 8E			sta @INTEGER.DIV.B
 14668 82D5 A9 00			lda #$00
 14669 82D7 85 8F			sta @INTEGER.DIV.B+1
 14670 82D9 85 90			sta @INTEGER.DIV.B+2
 14671 82DB 85 91			sta @INTEGER.DIV.B+3
 14672 82DD AD 4F A2			lda SC
 14673 82E0 85 86			sta @INTEGER.DIV.A
 14674 82E2 AD 50 A2			lda SC+1
 14675 82E5 85 87			sta @INTEGER.DIV.A+1
 14676 82E7 AD 51 A2			lda SC+2
 14677 82EA 85 88			sta @INTEGER.DIV.A+2
 14678 82EC AD 52 A2			lda SC+3
 14679 82EF 85 89			sta @INTEGER.DIV.A+3
 14680 82F1 20 73 22			jsr @INTEGER.DIV
 14681 82F4 A9 0A			lda #$0A
 14682 82F6 85 8E			sta @INTEGER.MOD.B
 14683 82F8 A9 00			lda #$00
 14684 82FA 85 8F			sta @INTEGER.MOD.B+1
 14685 82FC 85 90			sta @INTEGER.MOD.B+2
 14686 82FE 85 91			sta @INTEGER.MOD.B+3
 14687 8300 20 90 22			jsr @INTEGER.MOD
 14688 8303 A5 8A			lda @INTEGER.MOD.RESULT
 14689 8305 8D 53 A2			sta N1
 14690 8308 A5 8B			lda @INTEGER.MOD.RESULT+1
 14691 830A 8D 54 A2			sta N1+1
 14692 830D A5 8C			lda @INTEGER.MOD.RESULT+2
 14693 830F 8D 55 A2			sta N1+2
 14694 8312 A5 8D			lda @INTEGER.MOD.RESULT+3
 14695 8314 8D 56 A2			sta N1+3
 14696
 14697 				; optimize OK (service.pas), line = 2904
 14698
 14699 8317 30 10			jmi l_2D57
 14700 8319 0D 55 A2			ora N1+2
 14701 831C 0D 54 A2			ora N1+1
 14702 831F 0D 53 A2			ora N1
 14703 8322 F0 05			jeq l_2D57
 14704 8324 A9 01			lda #$01
 14705 8326 8D 57 A2			sta F
 14706 8329			l_2D57
 14707
 14708 				; optimize OK (service.pas), line = 2905
 14709
 14710 8329 AD 57 A2			lda F
 14711 832C F0 29			jeq l_2D6A
 14712 832E AD 4B A2			lda PX
 14713 8331 18 69 15			add #$15
 14714 8334 8D 42 A2			sta PUT_DIGIT.PX
 14715 8337 AD 4C A2			lda PX+1
 14716 833A 69 00			adc #$00
 14717 833C 8D 43 A2			sta PUT_DIGIT.PX+1
 14718 833F AD 4D A2			lda PY
 14719 8342 8D 44 A2			sta PUT_DIGIT.PY
 14720 8345 AD 4E A2			lda PY+1
 14721 8348 8D 45 A2			sta PUT_DIGIT.PY+1
 14722 834B AD 53 A2			lda N1
 14723 834E 8D 46 A2			sta PUT_DIGIT.NUM
 14724 8351 AD 54 A2			lda N1+1
 14725 8354 4C 7B 83			jmp l_2D7E
 14726 8357			l_2D6A
 14727
 14728 				; optimize OK (service.pas), line = 2906
 14729
 14730 8357 AD 4B A2			lda PX
 14731 835A 18 69 15			add #$15
 14732 835D 8D 42 A2			sta PUT_DIGIT.PX
 14733 8360 AD 4C A2			lda PX+1
 14734 8363 69 00			adc #$00
 14735 8365 8D 43 A2			sta PUT_DIGIT.PX+1
 14736 8368 AD 4D A2			lda PY
 14737 836B 8D 44 A2			sta PUT_DIGIT.PY
 14738 836E AD 4E A2			lda PY+1
 14739 8371 8D 45 A2			sta PUT_DIGIT.PY+1
 14740 8374 A9 0A			lda #$0A
 14741 8376 8D 46 A2			sta PUT_DIGIT.NUM
 14742 8379 A9 00			lda #$00
 14743 837B			l_2D7E
 14744 837B 8D 47 A2			sta PUT_DIGIT.NUM+1
 14745 837E 20 6C 7D			jsr PUT_DIGIT
 14746
 14747 				; optimize OK (service.pas), line = 2909
 14748
 14749 8381 A9 0A			lda #$0A
 14750 8383 85 8E			sta @INTEGER.DIV.B
 14751 8385 A9 00			lda #$00
 14752 8387 85 8F			sta @INTEGER.DIV.B+1
 14753 8389 85 90			sta @INTEGER.DIV.B+2
 14754 838B 85 91			sta @INTEGER.DIV.B+3
 14755 838D AD 4F A2			lda SC
 14756 8390 85 86			sta @INTEGER.DIV.A
 14757 8392 AD 50 A2			lda SC+1
 14758 8395 85 87			sta @INTEGER.DIV.A+1
 14759 8397 AD 51 A2			lda SC+2
 14760 839A 85 88			sta @INTEGER.DIV.A+2
 14761 839C AD 52 A2			lda SC+3
 14762 839F 85 89			sta @INTEGER.DIV.A+3
 14763 83A1 20 73 22			jsr @INTEGER.DIV
 14764 83A4 A9 0A			lda #$0A
 14765 83A6 85 8E			sta @INTEGER.MOD.B
 14766 83A8 A9 00			lda #$00
 14767 83AA 85 8F			sta @INTEGER.MOD.B+1
 14768 83AC 85 90			sta @INTEGER.MOD.B+2
 14769 83AE 85 91			sta @INTEGER.MOD.B+3
 14770 83B0 20 90 22			jsr @INTEGER.MOD
 14771 83B3 A5 8A			lda @INTEGER.MOD.RESULT
 14772 83B5 8D 53 A2			sta N1
 14773 83B8 A5 8B			lda @INTEGER.MOD.RESULT+1
 14774 83BA 8D 54 A2			sta N1+1
 14775 83BD A5 8C			lda @INTEGER.MOD.RESULT+2
 14776 83BF 8D 55 A2			sta N1+2
 14777 83C2 A5 8D			lda @INTEGER.MOD.RESULT+3
 14778 83C4 8D 56 A2			sta N1+3
 14779
 14780 				; optimize OK (service.pas), line = 2910
 14781
 14782 83C7 AD 4B A2			lda PX
 14783 83CA 18 69 1C			add #$1C
 14784 83CD 8D 42 A2			sta PUT_DIGIT.PX
 14785 83D0 AD 4C A2			lda PX+1
 14786 83D3 69 00			adc #$00
 14787 83D5 8D 43 A2			sta PUT_DIGIT.PX+1
 14788 83D8 AD 4D A2			lda PY
 14789 83DB 8D 44 A2			sta PUT_DIGIT.PY
 14790 83DE AD 4E A2			lda PY+1
 14791 83E1 8D 45 A2			sta PUT_DIGIT.PY+1
 14792 83E4 AD 53 A2			lda N1
 14793 83E7 8D 46 A2			sta PUT_DIGIT.NUM
 14794 83EA AD 54 A2			lda N1+1
 14795 83ED 8D 47 A2			sta PUT_DIGIT.NUM+1
 14796 83F0 20 6C 7D			jsr PUT_DIGIT
 14797
 14798 				; optimize OK (service.pas), line = 2914
 14799
 14800 83F3 AD 4B A2			lda PX
 14801 83F6 18 69 23			add #$23
 14802 83F9 8D 42 A2			sta PUT_DIGIT.PX
 14803 83FC AD 4C A2			lda PX+1
 14804 83FF 69 00			adc #$00
 14805 8401 8D 43 A2			sta PUT_DIGIT.PX+1
 14806 8404 AD 4D A2			lda PY
 14807 8407 8D 44 A2			sta PUT_DIGIT.PY
 14808 840A AD 4E A2			lda PY+1
 14809 840D 8D 45 A2			sta PUT_DIGIT.PY+1
 14810 8410 A9 00			lda #$00
 14811 8412 8D 46 A2			sta PUT_DIGIT.NUM
 14812 8415 8D 47 A2			sta PUT_DIGIT.NUM+1
 14813 8418 20 6C 7D			jsr PUT_DIGIT
 14814
 14815 				; ------------------------------------------------------------
 14816
 14817 = A24B			PX	= DATAORIGIN+$03C0
 14818 = A24D			PY	= DATAORIGIN+$03C2
 14819 = A24F			SC	= DATAORIGIN+$03C4
 14820 = A253			N1	= DATAORIGIN+$03C8
 14821 = A257			F	= DATAORIGIN+$03CC
 14822
 14823 = A24B			@VarData	= PX
 14824 = 000D			@VarDataSize	= 13
 14825
 14826 841B			@exit
 14827 					.ifdef @new
 14828 					lda <@VarData
 14829 					sta :ztmp
 14830 					lda >@VarData
 14831 					ldy #@VarDataSize-1
 14832 					jmp @FreeMem
 14833 					els
 14834 841B 60				rts						; ret
 14835 					eif
 14836 				.endl
 14837
 14838 841C			.local	PLOT_LIVES					; PROCEDURE
 14839
 14840 				; optimize FAIL (0, service.pas), line = 2960
 14841
 14842 841C AD 58 A2			lda LIVES
 14843 841F D0 03			bne @+
 14844 8421 CE 59 A2			dec LIVES+1
 14845 				@
 14846 8424 CE 58 A2			dec LIVES
 14847
 14848 				; optimize OK (service.pas), line = 2963
 14849
 14850 8427 A9 00			lda #$00
 14851 8429 8D 5C A2			sta CN
 14852
 14853 842C			l_2DBD
 14854 				; --- ForToDoCondition
 14855 842C AD 5C A2			lda CN
 14856 842F C9 08			cmp #$08
 14857 8431 90 03 4C EC 86		jcs l_2DCB
 14858
 14859 				; optimize OK (service.pas), line = 2964
 14860
 14861 8436 A9 00			lda #$00
 14862 8438 8D 5B A2			sta Y
 14863 843B AC E8 9F			ldy MINIVAUS.HEIGHT
 14864 843E 88				dey
 14865 843F 8C 43 84			sty @FORTMP_2DD6_0
 14866
 14867 8442			l_2DD9
 14868 				; --- ForToDoCondition
 14869 8442 A9 00			lda @FORTMP_2DD6_0::#$00
 14870 8444 CD 5B A2			cmp Y
 14871 8447 B0 03 4C E4 86		jcc l_2DE7
 14872
 14873 				; optimize OK (service.pas), line = 2965
 14874
 14875 844C A9 00			lda #$00
 14876 844E 8D 5A A2			sta X
 14877 8451 AC E6 9F			ldy MINIVAUS.WIDTH
 14878 8454 88				dey
 14879 8455 8C 59 84			sty @FORTMP_2DF2_0
 14880
 14881 8458			l_2DF5
 14882 				; --- ForToDoCondition
 14883 8458 A9 00			lda @FORTMP_2DF2_0::#$00
 14884 845A CD 5A A2			cmp X
 14885 845D B0 03 4C DC 86		jcc l_2E03
 14886
 14887 				; optimize OK (service.pas), line = 2967
 14888
 14889 8462 AD 5A A2			lda X
 14890 8465 18 69 0B			add #$0B
 14891 8468 85 9F			sta :STACKORIGIN+9
 14892 846A A9 00			lda #$00
 14893 846C 69 00			adc #$00
 14894 846E 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14895 8470 AD E6 9F			lda MINIVAUS.WIDTH
 14896 8473 85 8E			sta :ecx
 14897 8475 AD E7 9F			lda MINIVAUS.WIDTH+1
 14898 8478 85 8F			sta :ecx+1
 14899 847A AD 5C A2			lda CN
 14900 847D 85 86			sta :eax
 14901 847F A9 00			lda #$00
 14902 8481 85 87			sta :eax+1
 14903 					.ifdef fmulinit
 14904 					fmulu_16
 14905 					els
 14906 8483 20 4F 23			imulCX_AL
 14907 					eif
 14908 8486 A5 86			lda :eax
 14909 8488 18 65 9F			add :STACKORIGIN+9
 14910 848B 8D 61 A2			sta XL
 14911 848E A5 87			lda :eax+1
 14912 8490 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 14913 8492 8D 62 A2			sta XL+1
 14914
 14915 				; optimize OK (service.pas), line = 2968
 14916
 14917 8495 AD 5B A2			lda Y
 14918 8498 18 69 C0			add #$C0
 14919 849B 8D 63 A2			sta YL
 14920 849E A9 00			lda #$00
 14921 84A0 69 00			adc #$00
 14922 84A2 8D 64 A2			sta YL+1
 14923
 14924 				; optimize OK (service.pas), line = 2970
 14925
 14926 84A5 AC 61 A2			ldy XL
 14927 84A8 B9 00 C4			lda adr.MODX,y
 14928 84AB 8D 5D A2			sta XP
 14929 84AE A9 00			lda #$00
 14930 84B0 8D 5E A2			sta XP+1
 14931
 14932 				; optimize OK (service.pas), line = 2971
 14933
 14934 84B3 AC 63 A2			ldy YL
 14935 84B6 B9 00 C3			lda adr.MODY,y
 14936 84B9 85 86			sta :eax
 14937 84BB A9 00			lda #$00
 14938 84BD 85 87			sta :eax+1
 14939 84BF AD 1B A0			lda PATTERN.WIDTH
 14940 84C2 85 8E			sta :ecx
 14941 84C4 AD 1C A0			lda PATTERN.WIDTH+1
 14942 84C7 85 8F			sta :ecx+1
 14943 					.ifdef fmulinit
 14944 					fmulu_16
 14945 					els
 14946 84C9 20 4F 23			imulCX_AL
 14947 					eif
 14948 84CC A5 86			lda :eax
 14949 84CE 8D 5F A2			sta YP
 14950 84D1 A5 87			lda :eax+1
 14951 84D3 8D 60 A2			sta YP+1
 14952
 14953 				; optimize FAIL (1, service.pas), line = 2975
 14954
 14955 84D6 E8				inx
 14956 84D7 A0 01			ldy #1
 14957 84D9 AD 5C A2			lda CN
 14958 84DC CD 58 A2			cmp LIVES
 14959 84DF A9 00			lda #$00
 14960 84E1 ED 59 A2			sbc LIVES+1
 14961 84E4 50 02			svc
 14962 84E6 49 80			eor #$80
 14963 84E8 30 01			bmi @+
 14964 84EA 88				dey
 14965 				@
 14966 84EB 94 96			sty :STACKORIGIN,x
 14967 84ED AD EA 9F			lda MINIVAUS.OFS
 14968 84F0 18 6D 5A A2			add X
 14969 84F4 85 9F			sta :STACKORIGIN+9
 14970 84F6 AD EB 9F			lda MINIVAUS.OFS+1
 14971 84F9 69 00			adc #$00
 14972 84FB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 14973 84FD AD EC 9F			lda MINIVAUS.OFS+2
 14974 8500 69 00			adc #$00
 14975 8502 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 14976 8504 AD ED 9F			lda MINIVAUS.OFS+3
 14977 8507 69 00			adc #$00
 14978 8509 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 14979 850B AD E6 9F			lda MINIVAUS.WIDTH
 14980 850E 85 8E			sta :ecx
 14981 8510 AD E7 9F			lda MINIVAUS.WIDTH+1
 14982 8513 85 8F			sta :ecx+1
 14983 8515 AD 5B A2			lda Y
 14984 8518 85 86			sta :eax
 14985 851A A9 00			lda #$00
 14986 851C 85 87			sta :eax+1
 14987 					.ifdef fmulinit
 14988 					fmulu_16
 14989 					els
 14990 851E 20 4F 23			imulCX_AL
 14991 					eif
 14992 8521 A5 9F			lda :STACKORIGIN+9
 14993 8523 18 65 86			add :eax
 14994 8526 8D C2 A0			sta GETBYTE.SRC
 14995 8529 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 14996 852B 65 87			adc :eax+1
 14997 852D 8D C3 A0			sta GETBYTE.SRC+1
 14998 8530 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 14999 8532 65 88			adc :eax+2
 15000 8534 8D C4 A0			sta GETBYTE.SRC+2
 15001 8537 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15002 8539 65 89			adc :eax+3
 15003 853B 8D C5 A0			sta GETBYTE.SRC+3
 15004 853E 20 3C 3D			jsr GETBYTE
 15005 8541 CA				dex
 15006 8542 A0 01			ldy #1
 15007 8544 AD C6 A0			lda GETBYTE.RESULT
 15008 8547 D0 01			bne @+
 15009 8549 88				dey
 15010 				@
 15011 854A 98				tya
 15012 854B 35 97			and :STACKORIGIN+1,x
 15013 854D F0 5D			jeq l_2E66
 15014
 15015 				; optimize OK (service.pas), line = 2978
 15016
 15017 854F AD EA 9F			lda MINIVAUS.OFS
 15018 8552 18 6D 5A A2			add X
 15019 8556 85 9F			sta :STACKORIGIN+9
 15020 8558 AD EB 9F			lda MINIVAUS.OFS+1
 15021 855B 69 00			adc #$00
 15022 855D 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15023 855F AD EC 9F			lda MINIVAUS.OFS+2
 15024 8562 69 00			adc #$00
 15025 8564 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15026 8566 AD ED 9F			lda MINIVAUS.OFS+3
 15027 8569 69 00			adc #$00
 15028 856B 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15029 856D AD E6 9F			lda MINIVAUS.WIDTH
 15030 8570 85 8E			sta :ecx
 15031 8572 AD E7 9F			lda MINIVAUS.WIDTH+1
 15032 8575 85 8F			sta :ecx+1
 15033 8577 AD 5B A2			lda Y
 15034 857A 85 86			sta :eax
 15035 857C A9 00			lda #$00
 15036 857E 85 87			sta :eax+1
 15037 					.ifdef fmulinit
 15038 					fmulu_16
 15039 					els
 15040 8580 20 4F 23			imulCX_AL
 15041 					eif
 15042 8583 A5 9F			lda :STACKORIGIN+9
 15043 8585 18 65 86			add :eax
 15044 8588 8D C2 A0			sta GETBYTE.SRC
 15045 858B A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15046 858D 65 87			adc :eax+1
 15047 858F 8D C3 A0			sta GETBYTE.SRC+1
 15048 8592 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15049 8594 65 88			adc :eax+2
 15050 8596 8D C4 A0			sta GETBYTE.SRC+2
 15051 8599 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15052 859B 65 89			adc :eax+3
 15053 859D 8D C5 A0			sta GETBYTE.SRC+3
 15054 85A0 20 3C 3D			jsr GETBYTE
 15055 85A3 AD C6 A0			lda GETBYTE.RESULT
 15056 85A6 8D 66 A2			sta CL
 15057 				; optimize OK (service.pas), line = 2981
 15058 				; optimize OK (service.pas), line = 2984
 15059 85A9 4C 46 86			jmp l_2EA8
 15060 85AC			l_2E66
 15061
 15062 				; optimize OK (service.pas), line = 2993
 15063
 15064 85AC AD 9A 9F			lda PLAYSCREEN.OFS
 15065 85AF 18 6D 61 A2			add XL
 15066 85B3 85 9F			sta :STACKORIGIN+9
 15067 85B5 AD 9B 9F			lda PLAYSCREEN.OFS+1
 15068 85B8 6D 62 A2			adc XL+1
 15069 85BB 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15070 85BD AD 9C 9F			lda PLAYSCREEN.OFS+2
 15071 85C0 69 00			adc #$00
 15072 85C2 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15073 85C4 AD 9D 9F			lda PLAYSCREEN.OFS+3
 15074 85C7 69 00			adc #$00
 15075 85C9 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15076 85CB AC 63 A2			ldy YL
 15077 85CE A5 9F			lda :STACKORIGIN+9
 15078 85D0 18 79 00 C0			add adr.ROW,y
 15079 85D4 8D C2 A0			sta GETBYTE.SRC
 15080 85D7 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15081 85D9 79 00 C1			adc adr.ROW+256,y
 15082 85DC 8D C3 A0			sta GETBYTE.SRC+1
 15083 85DF A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15084 85E1 69 00			adc #$00
 15085 85E3 8D C4 A0			sta GETBYTE.SRC+2
 15086 85E6 A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15087 85E8 69 00			adc #$00
 15088 85EA 8D C5 A0			sta GETBYTE.SRC+3
 15089 85ED 20 3C 3D			jsr GETBYTE
 15090 85F0 AD C6 A0			lda GETBYTE.RESULT
 15091 85F3 29 80			and #$80
 15092 85F5 8D 65 A2			sta SHADOW
 15093
 15094 				; optimize OK (service.pas), line = 2996
 15095
 15096 85F8 AD 1F A0			lda PATTERN.OFS
 15097 85FB 18 6D 5D A2			add XP
 15098 85FF 85 9F			sta :STACKORIGIN+9
 15099 8601 AD 20 A0			lda PATTERN.OFS+1
 15100 8604 6D 5E A2			adc XP+1
 15101 8607 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 15102 8609 AD 21 A0			lda PATTERN.OFS+2
 15103 860C 69 00			adc #$00
 15104 860E 85 BF			sta :STACKORIGIN+STACKWIDTH*2+9
 15105 8610 AD 22 A0			lda PATTERN.OFS+3
 15106 8613 69 00			adc #$00
 15107 8615 85 CF			sta :STACKORIGIN+STACKWIDTH*3+9
 15108 8617 A5 9F			lda :STACKORIGIN+9
 15109 8619 18 6D 5F A2			add YP
 15110 861D 8D C2 A0			sta GETBYTE.SRC
 15111 8620 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 15112 8622 6D 60 A2			adc YP+1
 15113 8625 8D C3 A0			sta GETBYTE.SRC+1
 15114 8628 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 15115 862A 69 00			adc #$00
 15116 862C 8D C4 A0			sta GETBYTE.SRC+2
 15117 862F A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 15118 8631 69 00			adc #$00
 15119 8633 8D C5 A0			sta GETBYTE.SRC+3
 15120 8636 20 3C 3D			jsr GETBYTE
 15121 8639 E8				inx
 15122 863A AD C6 A0			lda GETBYTE.RESULT
 15123 863D 29 7F			and #$7F
 15124 863F 0D 65 A2			ora SHADOW
 15125 8642 8D 66 A2			sta CL
 15126 8645 CA				dex
 15127 8646			l_2EA8
 15128
 15129 				; optimize OK (service.pas), line = 2999
 15130
 15131 8646 AD 61 A2			lda XL
 15132 8649 85 A0			sta :STACKORIGIN+10
 15133 864B A9 50			lda #$50
 15134 864D 18 6D 62 A2			add XL+1
 15135 8651 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15136 8653 A9 00			lda #$00
 15137 8655 69 00			adc #$00
 15138 8657 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15139 8659 A9 00			lda #$00
 15140 865B 69 00			adc #$00
 15141 865D 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15142 865F AC 63 A2			ldy YL
 15143 8662 A5 A0			lda :STACKORIGIN+10
 15144 8664 18 79 00 C0			add adr.ROW,y
 15145 8668 8D BD A0			sta PUTBYTE.DST
 15146 866B A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15147 866D 79 00 C1			adc adr.ROW+256,y
 15148 8670 8D BE A0			sta PUTBYTE.DST+1
 15149 8673 A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15150 8675 69 00			adc #$00
 15151 8677 8D BF A0			sta PUTBYTE.DST+2
 15152 867A A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15153 867C 69 00			adc #$00
 15154 867E 8D C0 A0			sta PUTBYTE.DST+3
 15155 8681 AD 66 A2			lda CL
 15156 8684 8D C1 A0			sta PUTBYTE.V
 15157 8687 20 14 3D			jsr PUTBYTE
 15158
 15159 				; optimize OK (service.pas), line = 3002
 15160
 15161 868A AD 9A 9F			lda PLAYSCREEN.OFS
 15162 868D 18 6D 61 A2			add XL
 15163 8691 85 A0			sta :STACKORIGIN+10
 15164 8693 AD 9B 9F			lda PLAYSCREEN.OFS+1
 15165 8696 6D 62 A2			adc XL+1
 15166 8699 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15167 869B AD 9C 9F			lda PLAYSCREEN.OFS+2
 15168 869E 69 00			adc #$00
 15169 86A0 85 C0			sta :STACKORIGIN+STACKWIDTH*2+10
 15170 86A2 AD 9D 9F			lda PLAYSCREEN.OFS+3
 15171 86A5 69 00			adc #$00
 15172 86A7 85 D0			sta :STACKORIGIN+STACKWIDTH*3+10
 15173 86A9 AC 63 A2			ldy YL
 15174 86AC A5 A0			lda :STACKORIGIN+10
 15175 86AE 18 79 00 C0			add adr.ROW,y
 15176 86B2 8D BD A0			sta PUTBYTE.DST
 15177 86B5 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15178 86B7 79 00 C1			adc adr.ROW+256,y
 15179 86BA 8D BE A0			sta PUTBYTE.DST+1
 15180 86BD A5 C0			lda :STACKORIGIN+STACKWIDTH*2+10
 15181 86BF 69 00			adc #$00
 15182 86C1 8D BF A0			sta PUTBYTE.DST+2
 15183 86C4 A5 D0			lda :STACKORIGIN+STACKWIDTH*3+10
 15184 86C6 69 00			adc #$00
 15185 86C8 8D C0 A0			sta PUTBYTE.DST+3
 15186 86CB AD 66 A2			lda CL
 15187 86CE 8D C1 A0			sta PUTBYTE.V
 15188 86D1 20 14 3D			jsr PUTBYTE
 15189
 15190 				; --- ForToDoEpilog
 15191 86D4 EE 5A A2			inc X
 15192 86D7 F0 03 4C 58 84		jne l_2DF5
 15193 86DC			l_2E03
 15194
 15195 				; --- ForToDoEpilog
 15196 86DC EE 5B A2			inc Y
 15197 86DF F0 03 4C 42 84		jne l_2DD9
 15198 86E4			l_2DE7
 15199
 15200 				; --- ForToDoEpilog
 15201 86E4 EE 5C A2			inc CN
 15202 86E7 F0 03 4C 2C 84		jne l_2DBD
 15203 86EC			l_2DCB
 15204
 15205 				; ------------------------------------------------------------
 15206
 15207 = A258			LIVES	= DATAORIGIN+$03CD
 15208 = 000B			XLIVES	= $0B
 15209 = 00C0			YLIVES	= $C0
 15210 = A25A			X	= DATAORIGIN+$03CF
 15211 = A25B			Y	= DATAORIGIN+$03D0
 15212 = A25C			CN	= DATAORIGIN+$03D1
 15213 = A25D			XP	= DATAORIGIN+$03D2
 15214 = A25F			YP	= DATAORIGIN+$03D4
 15215 = A261			XL	= DATAORIGIN+$03D6
 15216 = A263			YL	= DATAORIGIN+$03D8
 15217 = A265			SHADOW	= DATAORIGIN+$03DA
 15218 = A266			CL	= DATAORIGIN+$03DB
 15219
 15220 = A258			@VarData	= LIVES
 15221 = 000F			@VarDataSize	= 15
 15222
 15223 86EC			@exit
 15224 					.ifdef @new
 15225 					lda <@VarData
 15226 					sta :ztmp
 15227 					lda >@VarData
 15228 					ldy #@VarDataSize-1
 15229 					jmp @FreeMem
 15230 					els
 15231 86EC 60				rts						; ret
 15232 					eif
 15233 				.endl
 15234
 15235 86ED			.local	PLACE_FIRE					; PROCEDURE
 15236
 15237 				; optimize OK (service.pas), line = 3013
 15238
 15239 86ED AC 85 A0			ldy FIRE.Y
 15240 86F0 AD 84 A0			lda FIRE.X
 15241 86F3 18 79 00 C0			add adr.ROW,y
 15242 86F7 8D 8D A0			sta HLP
 15243 86FA A9 00			lda #$00
 15244 86FC 79 00 C1			adc adr.ROW+256,y
 15245 86FF 8D 8E A0			sta HLP+1
 15246
 15247 				; optimize OK (service.pas), line = 3015
 15248
 15249 8702 AD 8D A0			lda HLP
 15250 8705 8D A7 A0			sta BLITZERO.DST
 15251 8708 A9 50			lda #$50
 15252 870A 18 6D 8E A0			add HLP+1
 15253 870E 8D A8 A0			sta BLITZERO.DST+1
 15254 8711 A9 00			lda #$00
 15255 8713 69 00			adc #$00
 15256 8715 8D A9 A0			sta BLITZERO.DST+2
 15257 8718 A9 00			lda #$00
 15258 871A 69 00			adc #$00
 15259 871C 8D AA A0			sta BLITZERO.DST+3
 15260 871F AD 02 A0			lda SHOOTS.OFS
 15261 8722 8D A3 A0			sta BLITZERO.SRC
 15262 8725 AD 03 A0			lda SHOOTS.OFS+1
 15263 8728 8D A4 A0			sta BLITZERO.SRC+1
 15264 872B AD 04 A0			lda SHOOTS.OFS+2
 15265 872E 8D A5 A0			sta BLITZERO.SRC+2
 15266 8731 AD 05 A0			lda SHOOTS.OFS+3
 15267 8734 8D A6 A0			sta BLITZERO.SRC+3
 15268 8737 AD FE 9F			lda SHOOTS.WIDTH
 15269 873A 8D AB A0			sta BLITZERO.W
 15270 873D AD FF 9F			lda SHOOTS.WIDTH+1
 15271 8740 8D AC A0			sta BLITZERO.W+1
 15272 8743 AD 00 A0			lda SHOOTS.HEIGHT
 15273 8746 8D AD A0			sta BLITZERO.H
 15274 8749 20 EB 3B			jsr BLITZERO
 15275
 15276 874C			@exit
 15277 					.ifdef @new
 15278 					lda <@VarData
 15279 					sta :ztmp
 15280 					lda >@VarData
 15281 					ldy #@VarDataSize-1
 15282 					jmp @FreeMem
 15283 					els
 15284 874C 60				rts						; ret
 15285 					eif
 15286 				.endl
 15287
 15288 874D			.local	REMOVE_FIRE					; PROCEDURE
 15289
 15290 				; optimize OK (service.pas), line = 3033
 15291
 15292 874D AC 85 A0			ldy FIRE.Y
 15293 8750 AD 84 A0			lda FIRE.X
 15294 8753 18 79 00 C0			add adr.ROW,y
 15295 8757 8D 8D A0			sta HLP
 15296 875A A9 00			lda #$00
 15297 875C 79 00 C1			adc adr.ROW+256,y
 15298 875F 8D 8E A0			sta HLP+1
 15299
 15300 				; optimize OK (service.pas), line = 3035
 15301
 15302 8762 AD 8D A0			lda HLP
 15303 8765 8D 9C A0			sta BLITBOX.DST
 15304 8768 A9 50			lda #$50
 15305 876A 18 6D 8E A0			add HLP+1
 15306 876E 8D 9D A0			sta BLITBOX.DST+1
 15307 8771 A9 00			lda #$00
 15308 8773 69 00			adc #$00
 15309 8775 8D 9E A0			sta BLITBOX.DST+2
 15310 8778 A9 00			lda #$00
 15311 877A 69 00			adc #$00
 15312 877C 8D 9F A0			sta BLITBOX.DST+3
 15313 877F AD 9A 9F			lda PLAYSCREEN.OFS
 15314 8782 18 6D 8D A0			add HLP
 15315 8786 8D 98 A0			sta BLITBOX.SRC
 15316 8789 AD 9B 9F			lda PLAYSCREEN.OFS+1
 15317 878C 6D 8E A0			adc HLP+1
 15318 878F 8D 99 A0			sta BLITBOX.SRC+1
 15319 8792 AD 9C 9F			lda PLAYSCREEN.OFS+2
 15320 8795 69 00			adc #$00
 15321 8797 8D 9A A0			sta BLITBOX.SRC+2
 15322 879A AD 9D 9F			lda PLAYSCREEN.OFS+3
 15323 879D 69 00			adc #$00
 15324 879F 8D 9B A0			sta BLITBOX.SRC+3
 15325 87A2 AD FE 9F			lda SHOOTS.WIDTH
 15326 87A5 8D A0 A0			sta BLITBOX.W
 15327 87A8 AD FF 9F			lda SHOOTS.WIDTH+1
 15328 87AB 8D A1 A0			sta BLITBOX.W+1
 15329 87AE AD 00 A0			lda SHOOTS.HEIGHT
 15330 87B1 8D A2 A0			sta BLITBOX.H
 15331 87B4 20 6A 3B			jsr BLITBOX
 15332
 15333 87B7			@exit
 15334 					.ifdef @new
 15335 					lda <@VarData
 15336 					sta :ztmp
 15337 					lda >@VarData
 15338 					ldy #@VarDataSize-1
 15339 					jmp @FreeMem
 15340 					els
 15341 87B7 60				rts						; ret
 15342 					eif
 15343 				.endl
 15344
 15345 87B8			.local	CHECK_FIRE					; PROCEDURE
 15346
 15347 				; optimize OK (service.pas), line = 3051
 15348
 15349 87B8 AD 87 A0			lda FIRE.AVL
 15350 87BB D0 03 4C 1A 89		jeq l_2F58
 15351
 15352 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3053
 15353
 15354 87C0 20 61 3B			jsr MOUSECLICK
 15355 87C3 E8				inx
 15356 87C4 E8				inx
 15357 87C5 A0 01			ldy #1
 15358 87C7 AD 97 A0			lda MOUSECLICK.RESULT
 15359 87CA C9 01			cmp #$01
 15360 87CC F0 01			beq @+
 15361 87CE 88				dey
 15362 				@
 15363 87CF 98				tya
 15364 87D0 2D 87 A0			and FIRE.AVL
 15365 87D3 95 95			sta :STACKORIGIN-1,x
 15366 87D5 CA				dex
 15367 87D6 CA				dex
 15368 87D7 A0 01			ldy #1
 15369 87D9 AD 86 A0			lda FIRE.SHOT
 15370 87DC F0 01			beq @+
 15371 87DE 88				dey
 15372 				@
 15373 87DF 98				tya
 15374 87E0 35 97			and :STACKORIGIN+1,x
 15375 87E2 F0 3A			jeq l_2F78
 15376
 15377 				; optimize OK (service.pas), line = 3055
 15378
 15379 87E4 AD 16 A0			lda VAUS.WIDTH
 15380 87E7 38 ED FE 9F			sub SHOOTS.WIDTH
 15381 87EB 4A				lsr @
 15382 87EC 18 6D 0E A0			add VAUS.X
 15383 87F0 8D 84 A0			sta FIRE.X
 15384
 15385 				; optimize OK (service.pas), line = 3056
 15386
 15387 87F3 AD 0F A0			lda VAUS.Y
 15388 87F6 38 ED 00 A0			sub SHOOTS.HEIGHT
 15389 87FA 8D 85 A0			sta FIRE.Y
 15390
 15391 				; optimize OK (service.pas), line = 3057
 15392
 15393 87FD A9 01			lda #$01
 15394 87FF 8D 86 A0			sta FIRE.SHOT
 15395
 15396 				; optimize OK (service.pas), line = 3058
 15397
 15398 8802 A9 00			lda #$00
 15399 8804 8D 88 A0			sta FIRE.NW
 15400
 15401 				; optimize OK (service.pas), line = 3059
 15402
 15403 8807 A9 BC			lda #$BC
 15404 8809 8D 74 9F			sta BALL_BLOCK_SOUND.A
 15405 880C A9 02			lda #$02
 15406 880E 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 15407 8811 A9 05			lda #$05
 15408 8813 8D 76 9F			sta BALL_BLOCK_SOUND.B
 15409 8816 A9 00			lda #$00
 15410 8818 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 15411 881B 20 51 39			jsr BALL_BLOCK_SOUND
 15412 881E			l_2F78
 15413
 15414 				; optimize OK (service.pas), line = 3062
 15415
 15416 881E AD 86 A0			lda FIRE.SHOT
 15417 8821 D0 03 4C 1A 89		jeq l_2FB2
 15418
 15419 				; optimize OK (service.pas), line = 3064
 15420
 15421 8826 AD 88 A0			lda FIRE.NW
 15422 8829 F0 03			jeq l_2FBF
 15423 882B 20 4D 87			jsr REMOVE_FIRE
 15424 882E			l_2FBF
 15425
 15426 				; optimize OK (service.pas), line = 3065
 15427
 15428 882E A9 01			lda #$01
 15429 8830 8D 88 A0			sta FIRE.NW
 15430
 15431 				; optimize OK (service.pas), line = 3067
 15432
 15433 8833 AD 85 A0			lda FIRE.Y
 15434 8836 38 E9 04			sub #$04
 15435 8839 8D 85 A0			sta FIRE.Y
 15436
 15437 				; optimize OK (service.pas), line = 3068
 15438
 15439 883C C9 16			cmp #$16
 15440 883E B0 08			jcs l_2FDA
 15441 8840 A9 00			lda #$00
 15442 8842 8D 86 A0			sta FIRE.SHOT
 15443 8845 4C 1A 89			jmp l_2FE8
 15444 8848			l_2FDA
 15445
 15446 				; optimize FAIL ('PLACE_FIRE', service.pas), line = 3071
 15447
 15448 8848 20 ED 86			jsr PLACE_FIRE
 15449
 15450 				; optimize OK (service.pas), line = 3073
 15451
 15452 884B AD 85 A0			lda FIRE.Y
 15453 884E 38 E9 16			sub #$16
 15454 8851 10 03 4C 1A 89		jmi l_300F
 15455 8856 AD 85 A0			lda FIRE.Y
 15456 8859 38 E9 16			sub #$16
 15457 885C 85 A0			sta :STACKORIGIN+10
 15458 885E A9 00			lda #$00
 15459 8860 E9 00			sbc #$00
 15460 8862 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 15461 8864 A5 A0			lda :STACKORIGIN+10
 15462 8866 C9 78			cmp #$78
 15463 8868 A5 B0			lda :STACKORIGIN+STACKWIDTH+10
 15464 886A E9 00			sbc #$00
 15465 886C 50 02			svc
 15466 886E 49 80			eor #$80
 15467 8870 30 03 4C 1A 89		jpl l_300F
 15468
 15469 				; optimize OK (service.pas), line = 3075
 15470
 15471 8875 AD 84 A0			lda FIRE.X
 15472 8878 38 E9 09			sub #$09
 15473 887B 4A				lsr @
 15474 887C 4A				lsr @
 15475 887D 4A				lsr @
 15476 887E 4A				lsr @
 15477 887F 8D 69 A2			sta X1
 15478 8882 A9 00			lda #$00
 15479 8884 8D 6A A2			sta X1+1
 15480
 15481 				; optimize OK (service.pas), line = 3076
 15482
 15483 8887 AD 85 A0			lda FIRE.Y
 15484 888A 38 E9 16			sub #$16
 15485 888D 4A				lsr @
 15486 888E 4A				lsr @
 15487 888F 4A				lsr @
 15488 8890 8D 6D A2			sta Y1
 15489 8893 A9 00			lda #$00
 15490 8895 8D 6E A2			sta Y1+1
 15491
 15492 				; optimize OK (service.pas), line = 3078
 15493
 15494 8898 AD 84 A0			lda FIRE.X
 15495 889B 18 6D FE 9F			add SHOOTS.WIDTH
 15496 889F 38 E9 09			sub #$09
 15497 88A2 4A				lsr @
 15498 88A3 4A				lsr @
 15499 88A4 4A				lsr @
 15500 88A5 4A				lsr @
 15501 88A6 8D 6B A2			sta X2
 15502 88A9 A9 00			lda #$00
 15503 88AB 8D 6C A2			sta X2+1
 15504
 15505 				; optimize OK (service.pas), line = 3079
 15506
 15507 88AE AD 6D A2			lda Y1
 15508 88B1 8D 6F A2			sta Y2
 15509 88B4 AD 6E A2			lda Y1+1
 15510 88B7 8D 70 A2			sta Y2+1
 15511
 15512 				; optimize OK (service.pas), line = 3081
 15513
 15514 88BA AD 6D A2			lda Y1
 15515 88BD 0A				asl @
 15516 88BE 0A				asl @
 15517 88BF 0A				asl @
 15518 88C0 0A				asl @
 15519 88C1 18 6D 69 A2			add X1
 15520 88C5 A8				tay
 15521 88C6 B9 00 DB			lda adr.WALL,y
 15522 88C9 D0 11			jne l_3078x
 15523 88CB AD 6F A2			lda Y2
 15524 88CE 0A				asl @
 15525 88CF 0A				asl @
 15526 88D0 0A				asl @
 15527 88D1 0A				asl @
 15528 88D2 18 6D 6B A2			add X2
 15529 88D6 A8				tay
 15530 88D7 B9 00 DB			lda adr.WALL,y
 15531 88DA F0 3E			jeq l_3078
 15532 88DC			l_3078x
 15533
 15534 				; optimize FAIL ('REMOVE_FIRE', service.pas), line = 3083
 15535
 15536 88DC 20 4D 87			jsr REMOVE_FIRE
 15537
 15538 				; optimize OK (service.pas), line = 3084
 15539
 15540 88DF A9 00			lda #$00
 15541 88E1 8D 86 A0			sta FIRE.SHOT
 15542
 15543 				; optimize OK (service.pas), line = 3086
 15544
 15545 88E4 AD 69 A2			lda X1
 15546 88E7 8D CF A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 15547 88EA AD 6A A2			lda X1+1
 15548 88ED 8D D0 A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15549 88F0 AD 6D A2			lda Y1
 15550 88F3 8D D1 A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 15551 88F6 AD 6E A2			lda Y1+1
 15552 88F9 8D D2 A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15553 88FC 20 F0 68			jsr SHOOT_BLOCK_WITH_FIRE
 15554
 15555 				; optimize OK (service.pas), line = 3087
 15556
 15557 88FF AD 6B A2			lda X2
 15558 8902 8D CF A1			sta SHOOT_BLOCK_WITH_FIRE.XB
 15559 8905 AD 6C A2			lda X2+1
 15560 8908 8D D0 A1			sta SHOOT_BLOCK_WITH_FIRE.XB+1
 15561 890B AD 6F A2			lda Y2
 15562 890E 8D D1 A1			sta SHOOT_BLOCK_WITH_FIRE.YB
 15563 8911 AD 70 A2			lda Y2+1
 15564 8914 8D D2 A1			sta SHOOT_BLOCK_WITH_FIRE.YB+1
 15565 8917 20 F0 68			jsr SHOOT_BLOCK_WITH_FIRE
 15566 891A			l_2FE8
 15567 891A			l_3078
 15568 891A			l_300F
 15569 891A			l_2FB2
 15570 891A			l_2F58
 15571
 15572 				; ------------------------------------------------------------
 15573
 15574 = A269			X1	= DATAORIGIN+$03DE
 15575 = A26B			X2	= DATAORIGIN+$03E0
 15576 = A26D			Y1	= DATAORIGIN+$03E2
 15577 = A26F			Y2	= DATAORIGIN+$03E4
 15578
 15579 = A269			@VarData	= X1
 15580 = 0008			@VarDataSize	= 8
 15581
 15582 891A			@exit
 15583 					.ifdef @new
 15584 					lda <@VarData
 15585 					sta :ztmp
 15586 					lda >@VarData
 15587 					ldy #@VarDataSize-1
 15588 					jmp @FreeMem
 15589 					els
 15590 891A 60				rts						; ret
 15591 					eif
 15592 				.endl
 15593
 15594 891B			.local	REMOVE_FLUX					; PROCEDURE
 15595
 15596 				; optimize OK (service.pas), line = 3099
 15597
 15598 891B AD B0 C0			lda adr.ROW+$B0
 15599 891E 18 69 D9			add #$D9
 15600 8921 8D 8D A0			sta HLP
 15601 8924 AD B0 C1			lda adr.ROW+256+$B0
 15602 8927 69 00			adc #$00
 15603 8929 8D 8E A0			sta HLP+1
 15604
 15605 				; optimize OK (service.pas), line = 3101
 15606
 15607 892C AD 8D A0			lda HLP
 15608 892F 8D 9C A0			sta BLITBOX.DST
 15609 8932 A9 50			lda #$50
 15610 8934 18 6D 8E A0			add HLP+1
 15611 8938 8D 9D A0			sta BLITBOX.DST+1
 15612 893B A9 00			lda #$00
 15613 893D 69 00			adc #$00
 15614 893F 8D 9E A0			sta BLITBOX.DST+2
 15615 8942 A9 00			lda #$00
 15616 8944 69 00			adc #$00
 15617 8946 8D 9F A0			sta BLITBOX.DST+3
 15618 8949 AD 9A 9F			lda PLAYSCREEN.OFS
 15619 894C 18 6D 8D A0			add HLP
 15620 8950 8D 98 A0			sta BLITBOX.SRC
 15621 8953 AD 9B 9F			lda PLAYSCREEN.OFS+1
 15622 8956 6D 8E A0			adc HLP+1
 15623 8959 8D 99 A0			sta BLITBOX.SRC+1
 15624 895C AD 9C 9F			lda PLAYSCREEN.OFS+2
 15625 895F 69 00			adc #$00
 15626 8961 8D 9A A0			sta BLITBOX.SRC+2
 15627 8964 AD 9D 9F			lda PLAYSCREEN.OFS+3
 15628 8967 69 00			adc #$00
 15629 8969 8D 9B A0			sta BLITBOX.SRC+3
 15630 896C A9 08			lda #$08
 15631 896E 8D A0 A0			sta BLITBOX.W
 15632 8971 A9 00			lda #$00
 15633 8973 8D A1 A0			sta BLITBOX.W+1
 15634 8976 A9 14			lda #$14
 15635 8978 8D A2 A0			sta BLITBOX.H
 15636 897B 20 6A 3B			jsr BLITBOX
 15637
 15638 897E			@exit
 15639 					.ifdef @new
 15640 					lda <@VarData
 15641 					sta :ztmp
 15642 					lda >@VarData
 15643 					ldy #@VarDataSize-1
 15644 					jmp @FreeMem
 15645 					els
 15646 897E 60				rts						; ret
 15647 					eif
 15648 				.endl
 15649
 15650 897F			.local	CHECK_FLUX					; PROCEDURE
 15651
 15652 				; optimize OK (service.pas), line = 3115
 15653
 15654 897F AD 8B A0			lda SCRFLUXCNT
 15655 8982 8D 72 A2			sta FX
 15656
 15657 				; optimize OK (service.pas), line = 3117
 15658
 15659 8985 AD 8A A0			lda SCRFLUX
 15660 8988 D0 03 4C 1B 8A		jeq l_30C3
 15661
 15662 				; optimize OK (service.pas), line = 3120
 15663
 15664 898D A9 00			lda #$00
 15665 898F 8D 71 A2			sta Y
 15666
 15667 8992			l_30CD
 15668 				; --- ForToDoCondition
 15669 8992 AC 71 A2			ldy Y
 15670 8995 C0 14			cpy #$14
 15671 8997 B0 73			jcs l_30DB
 15672
 15673 				; optimize OK (service.pas), line = 3122
 15674
 15675 8999 A9 D9			lda #$D9
 15676 899B 79 B0 C0			adc adr.ROW+$B0,y
 15677 899E 8D B7 A0			sta BLITROW.DST
 15678 89A1 A9 50			lda #$50
 15679 89A3 79 B0 C1			adc adr.ROW+256+$B0,y
 15680 89A6 8D B8 A0			sta BLITROW.DST+1
 15681 89A9 A9 00			lda #$00
 15682 89AB 69 00			adc #$00
 15683 89AD 8D B9 A0			sta BLITROW.DST+2
 15684 89B0 A9 00			lda #$00
 15685 89B2 69 00			adc #$00
 15686 89B4 8D BA A0			sta BLITROW.DST+3
 15687 89B7 AD 71 A2			lda Y
 15688 89BA 18 6D 72 A2			add FX
 15689 89BE 85 A2			sta :STACKORIGIN+12
 15690 89C0 A9 00			lda #$00
 15691 89C2 69 00			adc #$00
 15692 89C4 85 B2			sta :STACKORIGIN+STACKWIDTH+12
 15693 89C6 A9 00			lda #$00
 15694 89C8 06 A2			asl :STACKORIGIN+12
 15695 89CA 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15696 89CC 2A				rol @
 15697 89CD 06 A2			asl :STACKORIGIN+12
 15698 89CF 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15699 89D1 2A				rol @
 15700 89D2 06 A2			asl :STACKORIGIN+12
 15701 89D4 26 B2			rol :STACKORIGIN+STACKWIDTH+12
 15702 89D6 2A				rol @
 15703 89D7 85 C2			sta :STACKORIGIN+STACKWIDTH*2+12
 15704 89D9 AD 0A A0			lda FLUX.OFS
 15705 89DC 18 65 A2			add :STACKORIGIN+12
 15706 89DF 8D B3 A0			sta BLITROW.SRC
 15707 89E2 AD 0B A0			lda FLUX.OFS+1
 15708 89E5 65 B2			adc :STACKORIGIN+STACKWIDTH+12
 15709 89E7 8D B4 A0			sta BLITROW.SRC+1
 15710 89EA AD 0C A0			lda FLUX.OFS+2
 15711 89ED 65 C2			adc :STACKORIGIN+STACKWIDTH*2+12
 15712 89EF 8D B5 A0			sta BLITROW.SRC+2
 15713 89F2 AD 0D A0			lda FLUX.OFS+3
 15714 89F5 69 00			adc #$00
 15715 89F7 8D B6 A0			sta BLITROW.SRC+3
 15716 89FA A9 08			lda #$08
 15717 89FC 8D BB A0			sta BLITROW.SIZE
 15718 89FF A9 00			lda #$00
 15719 8A01 8D BC A0			sta BLITROW.SIZE+1
 15720 8A04 20 A2 3C			jsr BLITROW
 15721
 15722 				; --- ForToDoEpilog
 15723 8A07 EE 71 A2			inc Y
 15724 8A0A D0 86			jne l_30CD
 15725 8A0C			l_30DB
 15726
 15727 				; optimize FAIL (0, service.pas), line = 3124
 15728
 15729 8A0C EE 8B A0			inc SCRFLUXCNT
 15730
 15731 				; optimize OK (service.pas), line = 3125
 15732
 15733 8A0F AD 8B A0			lda SCRFLUXCNT
 15734 8A12 C9 15			cmp #$15
 15735 8A14 90 05			jcc l_311A
 15736 8A16 A9 00			lda #$00
 15737 8A18 8D 8B A0			sta SCRFLUXCNT
 15738 8A1B			l_311A
 15739 8A1B			l_30C3
 15740
 15741 				; ------------------------------------------------------------
 15742
 15743 = A271			Y	= DATAORIGIN+$03E6
 15744 = A272			FX	= DATAORIGIN+$03E7
 15745
 15746 = A271			@VarData	= Y
 15747 = 0002			@VarDataSize	= 2
 15748
 15749 8A1B			@exit
 15750 					.ifdef @new
 15751 					lda <@VarData
 15752 					sta :ztmp
 15753 					lda >@VarData
 15754 					ldy #@VarDataSize-1
 15755 					jmp @FreeMem
 15756 					els
 15757 8A1B 60				rts						; ret
 15758 					eif
 15759 				.endl
 15760
 15761 8A1C			.local	VAUS_OUT					; PROCEDURE
 15762
 15763 				; optimize FAIL ('NOSOUND', service.pas), line = 3133
 15764
 15765 8A1C 20 64 3D			jsr NOSOUND
 15766
 15767 				; optimize OK (service.pas), line = 3135
 15768
 15769 8A1F AD 6A A0			lda CUR_PLAYER
 15770 8A22 0A				asl @
 15771 8A23 0A				asl @
 15772 8A24 A8				tay
 15773 8A25 B9 4F A0			lda adr.SCORE.PLAYER,y
 15774 8A28 18 69 10			add #$10
 15775 8A2B 99 4F A0			sta adr.SCORE.PLAYER,y
 15776 8A2E B9 50 A0			lda adr.SCORE.PLAYER+1,y
 15777 8A31 69 27			adc #$27
 15778 8A33 99 50 A0			sta adr.SCORE.PLAYER+1,y
 15779 8A36 B9 51 A0			lda adr.SCORE.PLAYER+2,y
 15780 8A39 69 00			adc #$00
 15781 8A3B 99 51 A0			sta adr.SCORE.PLAYER+2,y
 15782 8A3E B9 52 A0			lda adr.SCORE.PLAYER+3,y
 15783 8A41 69 00			adc #$00
 15784 8A43 99 52 A0			sta adr.SCORE.PLAYER+3,y
 15785
 15786 				; optimize OK (service.pas), line = 3136
 15787
 15788 8A46 A9 00			lda #$00
 15789 8A48 8D 4D A0			sta REMAIN_BLK
 15790
 15791 				; optimize OK (service.pas), line = 3138
 15792
 15793 8A4B AD 0E A0			lda VAUS.X
 15794 8A4E 8D 77 A2			sta Z
 15795 8A51 A9 00			lda #$00
 15796 8A53 8D 78 A2			sta Z+1
 15797
 15798 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3140
 15799
 15800 8A56 20 F8 44			jsr WAIT_VBL
 15801
 15802 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3141
 15803
 15804 8A59 20 D3 52			jsr REMOVE_VAUS
 15805
 15806 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3142
 15807
 15808 8A5C 20 4A 53			jsr PLACE_VAUS
 15809
 15810 				; optimize OK (service.pas), line = 3144
 15811
 15812 8A5F AD 77 A2			lda Z
 15813 8A62 8D 73 A2			sta X
 15814 8A65 AD 78 A2			lda Z+1
 15815 8A68 8D 74 A2			sta X+1
 15816 8A6B AD 77 A2			lda Z
 15817 8A6E 18 69 2C			add #$2C
 15818 8A71 8D 84 8A			sta @FORTMP_3145_0
 15819 8A74 AD 78 A2			lda Z+1
 15820 8A77 69 00			adc #$00
 15821 8A79 8D 7D 8A			sta @FORTMP_3145_1
 15822
 15823 8A7C			l_3148
 15824 				; --- ForToDoCondition
 15825 8A7C A9 00			lda @FORTMP_3145_1::#$00
 15826 8A7E CD 74 A2			cmp X+1
 15827 8A81 D0 05			bne @+
 15828 8A83 A9 00			lda @FORTMP_3145_0::#$00
 15829 8A85 CD 73 A2			cmp X
 15830 				@
 15831 8A88 B0 03 4C 21 8B		jcc l_3154
 15832
 15833 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3146
 15834
 15835 8A8D 20 F8 44			jsr WAIT_VBL
 15836
 15837 				; optimize OK (service.pas), line = 3148
 15838
 15839 8A90 AD 0E A0			lda VAUS.X
 15840 8A93 8D 10 A0			sta VAUS.OLDX
 15841 8A96 A9 00			lda #$00
 15842 8A98 8D 11 A0			sta VAUS.OLDX+1
 15843
 15844 				; optimize OK (service.pas), line = 3149
 15845
 15846 8A9B AD 73 A2			lda X
 15847 8A9E 8D 0E A0			sta VAUS.X
 15848
 15849 				; optimize FAIL ('REMOVE_VAUS', service.pas), line = 3150
 15850
 15851 8AA1 20 D3 52			jsr REMOVE_VAUS
 15852
 15853 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3151
 15854
 15855 8AA4 20 7F 89			jsr CHECK_FLUX
 15856
 15857 				; optimize FAIL ('PLACE_VAUS', service.pas), line = 3152
 15858
 15859 8AA7 20 4A 53			jsr PLACE_VAUS
 15860
 15861 				; optimize OK (service.pas), line = 3154
 15862
 15863 8AAA AC 0F A0			ldy VAUS.Y
 15864 8AAD B9 00 C0			lda adr.ROW,y
 15865 8AB0 18 69 E1			add #$E1
 15866 8AB3 8D 8D A0			sta HLP
 15867 8AB6 B9 00 C1			lda adr.ROW+256,y
 15868 8AB9 69 00			adc #$00
 15869 8ABB 8D 8E A0			sta HLP+1
 15870
 15871 				; optimize OK (service.pas), line = 3156
 15872
 15873 8ABE AD 8D A0			lda HLP
 15874 8AC1 8D 9C A0			sta BLITBOX.DST
 15875 8AC4 A9 50			lda #$50
 15876 8AC6 18 6D 8E A0			add HLP+1
 15877 8ACA 8D 9D A0			sta BLITBOX.DST+1
 15878 8ACD A9 00			lda #$00
 15879 8ACF 69 00			adc #$00
 15880 8AD1 8D 9E A0			sta BLITBOX.DST+2
 15881 8AD4 A9 00			lda #$00
 15882 8AD6 69 00			adc #$00
 15883 8AD8 8D 9F A0			sta BLITBOX.DST+3
 15884 8ADB AD 9A 9F			lda PLAYSCREEN.OFS
 15885 8ADE 18 6D 8D A0			add HLP
 15886 8AE2 8D 98 A0			sta BLITBOX.SRC
 15887 8AE5 AD 9B 9F			lda PLAYSCREEN.OFS+1
 15888 8AE8 6D 8E A0			adc HLP+1
 15889 8AEB 8D 99 A0			sta BLITBOX.SRC+1
 15890 8AEE AD 9C 9F			lda PLAYSCREEN.OFS+2
 15891 8AF1 69 00			adc #$00
 15892 8AF3 8D 9A A0			sta BLITBOX.SRC+2
 15893 8AF6 AD 9D 9F			lda PLAYSCREEN.OFS+3
 15894 8AF9 69 00			adc #$00
 15895 8AFB 8D 9B A0			sta BLITBOX.SRC+3
 15896 8AFE A9 28			lda #$28
 15897 8B00 8D A0 A0			sta BLITBOX.W
 15898 8B03 A9 00			lda #$00
 15899 8B05 8D A1 A0			sta BLITBOX.W+1
 15900 8B08 AD 17 A0			lda VAUS.HEIGHT
 15901 8B0B 8D A2 A0			sta BLITBOX.H
 15902 8B0E 20 6A 3B			jsr BLITBOX
 15903
 15904 				; --- ForToDoEpilog
 15905 8B11 EE 73 A2			inc X
 15906 8B14 F0 03 4C 7C 8A		jne l_3148
 15907 8B19 EE 74 A2			inc X+1
 15908 8B1C F0 03 4C 7C 8A		jne l_3148
 15909 8B21			l_3154
 15910
 15911 				; ------------------------------------------------------------
 15912
 15913 = A273			X	= DATAORIGIN+$03E8
 15914 = A275			Y	= DATAORIGIN+$03EA
 15915 = A277			Z	= DATAORIGIN+$03EC
 15916
 15917 = A273			@VarData	= X
 15918 = 0006			@VarDataSize	= 6
 15919
 15920 8B21			@exit
 15921 					.ifdef @new
 15922 					lda <@VarData
 15923 					sta :ztmp
 15924 					lda >@VarData
 15925 					ldy #@VarDataSize-1
 15926 					jmp @FreeMem
 15927 					els
 15928 8B21 60				rts						; ret
 15929 					eif
 15930 				.endl
 15931
 15932 8B22			.local	CHECK_BONUS_TYPE				; PROCEDURE
 15933
 15934 				; optimize OK (service.pas), line = 3171
 15935
 15936 8B22 AD 1A A0			lda VAUS.LETTER
 15937 8B25 10 03 4C D8 8B		jmi l_319B
 15938 8B2A D0 03 4C D8 8B		jeq l_319B
 15939
 15940 				; optimize OK (service.pas), line = 3173
 15941
 15942 8B2F A0 00			ldy #$00
 15943 8B31 AD 1A A0			lda VAUS.LETTER
 15944 8B34 10 01			spl
 15945 8B36 88				dey
 15946 8B37 38 E9 01			sub #$01
 15947 8B3A 8D 82 A0			sta LETT.LAST
 15948 8B3D 98				tya
 15949 8B3E E9 00			sbc #$00
 15950 8B40 8D 83 A0			sta LETT.LAST+1
 15951
 15952 				; optimize OK (service.pas), line = 3174
 15953
 15954 8B43 AC 7F A2 84 84 AC + 	mwy B2 :bp2
 15955 8B4D A0 17			ldy #B2.INPLAY-DATAORIGIN
 15956 8B4F B1 84			lda (:bp2),y
 15957 8B51 F0 0F			jeq l_31B2
 15958 8B53 AD 7F A2			lda B2
 15959 8B56 8D 09 A1			sta REMOVE_BALL.BALL
 15960 8B59 AD 80 A2			lda B2+1
 15961 8B5C 8D 0A A1			sta REMOVE_BALL.BALL+1
 15962 8B5F 20 72 44			jsr REMOVE_BALL
 15963 8B62			l_31B2
 15964
 15965 				; optimize OK (service.pas), line = 3175
 15966
 15967 8B62 AC 83 A2 84 84 AC + 	mwy B3 :bp2
 15968 8B6C A0 17			ldy #B3.INPLAY-DATAORIGIN
 15969 8B6E B1 84			lda (:bp2),y
 15970 8B70 F0 0F			jeq l_31C4
 15971 8B72 AD 83 A2			lda B3
 15972 8B75 8D 09 A1			sta REMOVE_BALL.BALL
 15973 8B78 AD 84 A2			lda B3+1
 15974 8B7B 8D 0A A1			sta REMOVE_BALL.BALL+1
 15975 8B7E 20 72 44			jsr REMOVE_BALL
 15976 8B81			l_31C4
 15977
 15978 				; optimize OK (service.pas), line = 3176
 15979
 15980 8B81 AC 7F A2 84 84 AC + 	mwy B2 :bp2
 15981 8B8B A0 17			ldy #B2.INPLAY-DATAORIGIN
 15982 8B8D A9 00			lda #$00
 15983 8B8F 91 84			sta (:bp2),y
 15984
 15985 				; optimize OK (service.pas), line = 3177
 15986
 15987 8B91 AC 83 A2 84 84 AC + 	mwy B3 :bp2
 15988 8B9B A0 17			ldy #B3.INPLAY-DATAORIGIN
 15989 8B9D 91 84			sta (:bp2),y
 15990
 15991 				; optimize OK (service.pas), line = 3178
 15992
 15993 8B9F 8D 8A A0			sta SCRFLUX
 15994
 15995 				; optimize FAIL ('REMOVE_FLUX', service.pas), line = 3179
 15996
 15997 8BA2 20 1B 89			jsr REMOVE_FLUX
 15998
 15999 				; optimize OK (service.pas), line = 3181
 16000
 16001 8BA5 AD 1A A0			lda VAUS.LETTER
 16002 8BA8 C9 06			cmp #$06
 16003 8BAA F0 2C			jeq l_31E9
 16004
 16005 				; optimize OK (service.pas), line = 3183
 16006
 16007 8BAC AC 7B A2 84 84 AC + 	mwy B1 :bp2
 16008 8BB6 A0 18			ldy #B1.LAUNCH-DATAORIGIN
 16009 8BB8 A9 00			lda #$00
 16010 8BBA 91 84			sta (:bp2),y
 16011
 16012 				; optimize OK (service.pas), line = 3184
 16013
 16014 8BBC AC 7F A2 84 84 AC + 	mwy B2 :bp2
 16015 8BC6 A0 18			ldy #B2.LAUNCH-DATAORIGIN
 16016 8BC8 91 84			sta (:bp2),y
 16017
 16018 				; optimize OK (service.pas), line = 3185
 16019
 16020 8BCA AC 83 A2 84 84 AC + 	mwy B3 :bp2
 16021 8BD4 A0 18			ldy #B3.LAUNCH-DATAORIGIN
 16022 8BD6 91 84			sta (:bp2),y
 16023 8BD8			l_31E9
 16024 8BD8			l_319B
 16025
 16026 				; optimize OK (service.pas), line = 3189
 16027
 16028 8BD8 AD 1A A0			lda VAUS.LETTER
 16029 8BDB 8D 89 A2			sta @CASETMP_000A
 16030 8BDE C9 01			cmp #$01
 16031 8BE0 D0 4D			jne l_3205
 16032 				@
 16033
 16034 				; optimize OK (service.pas), line = 3192
 16035
 16036 8BE2 AD 86 A0			lda FIRE.SHOT
 16037 8BE5 F0 03			jeq l_3211
 16038 8BE7 20 4D 87			jsr REMOVE_FIRE
 16039 8BEA			l_3211
 16040
 16041 				; optimize OK (service.pas), line = 3193
 16042
 16043 8BEA AD B6 9F 8D 9E 9F + 	:8 mva adr.LASERS+# adr.PLAYVAUS+#
 16044
 16045 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3194
 16046
 16047 8C1A 20 73 52			jsr MODIFY_VAUS
 16048
 16049 				; optimize OK (service.pas), line = 3195
 16050
 16051 8C1D A9 00			lda #$00
 16052 8C1F 8D 1A A0			sta VAUS.LETTER
 16053
 16054 				; optimize OK (service.pas), line = 3196
 16055
 16056 8C22 A9 01			lda #$01
 16057 8C24 8D 87 A0			sta FIRE.AVL
 16058
 16059 				; optimize OK (service.pas), line = 3197
 16060
 16061 8C27 A9 00			lda #$00
 16062 8C29 8D 86 A0			sta FIRE.SHOT
 16063 8C2C 4C 5D 8E			jmp a_000A
 16064 8C2F			l_3205
 16065 8C2F C9 02			cmp #$02
 16066 8C31 D0 46			jne l_322B
 16067
 16068 				; optimize OK (service.pas), line = 3201
 16069
 16070 8C33 AD 86 A0			lda FIRE.SHOT
 16071 8C36 F0 03			jeq l_3237
 16072 8C38 20 4D 87			jsr REMOVE_FIRE
 16073 8C3B			l_3237
 16074
 16075 				; optimize OK (service.pas), line = 3202
 16076
 16077 8C3B AD AE 9F 8D 9E 9F + 	:8 mva adr.ENLARGED+# adr.PLAYVAUS+#
 16078
 16079 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3203
 16080
 16081 8C6B 20 73 52			jsr MODIFY_VAUS
 16082
 16083 				; optimize OK (service.pas), line = 3204
 16084
 16085 8C6E A9 00			lda #$00
 16086 8C70 8D 1A A0			sta VAUS.LETTER
 16087
 16088 				; optimize OK (service.pas), line = 3205
 16089
 16090 8C73 8D 87 A0			sta FIRE.AVL
 16091 8C76 4C 5D 8E			jmp a_000A
 16092 8C79			l_322B
 16093 8C79 C9 03			cmp #$03
 16094 8C7B D0 4B			jne l_324D
 16095
 16096 				; optimize OK (service.pas), line = 3209
 16097
 16098 8C7D AD 86 A0			lda FIRE.SHOT
 16099 8C80 F0 03			jeq l_3259
 16100 8C82 20 4D 87			jsr REMOVE_FIRE
 16101 8C85			l_3259
 16102
 16103 				; optimize OK (service.pas), line = 3210
 16104
 16105 8C85 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16106
 16107 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3211
 16108
 16109 8CB5 20 73 52			jsr MODIFY_VAUS
 16110
 16111 				; optimize OK (service.pas), line = 3212
 16112
 16113 8CB8 A9 00			lda #$00
 16114 8CBA 8D 1A A0			sta VAUS.LETTER
 16115
 16116 				; optimize OK (service.pas), line = 3213
 16117
 16118 8CBD 8D 87 A0			sta FIRE.AVL
 16119
 16120 				; optimize OK (service.pas), line = 3214
 16121
 16122 8CC0 A9 01			lda #$01
 16123 8CC2 8D 8A A0			sta SCRFLUX
 16124 8CC5 4C 5D 8E			jmp a_000A
 16125 8CC8			l_324D
 16126 8CC8 C9 04			cmp #$04
 16127 8CCA D0 3E			jne l_3273
 16128
 16129 				; optimize OK (service.pas), line = 3218
 16130
 16131 8CCC AD 86 A0			lda FIRE.SHOT
 16132 8CCF F0 03			jeq l_327F
 16133 8CD1 20 4D 87			jsr REMOVE_FIRE
 16134 8CD4			l_327F
 16135
 16136 				; optimize OK (service.pas), line = 3219
 16137
 16138 8CD4 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16139
 16140 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3220
 16141
 16142 8D04 20 73 52			jsr MODIFY_VAUS
 16143 				; optimize OK (service.pas), line = 3221
 16144 8D07 4C A1 8D			jmp s_32BC
 16145 8D0A			l_3273
 16146 8D0A C9 05			cmp #$05
 16147 8D0C F0 03 4C A4 8D		jne l_3291
 16148
 16149 				; optimize OK (service.pas), line = 3225
 16150
 16151 8D11 AD 86 A0			lda FIRE.SHOT
 16152 8D14 F0 03			jeq l_329D
 16153 8D16 20 4D 87			jsr REMOVE_FIRE
 16154 8D19			l_329D
 16155
 16156 				; optimize OK (service.pas), line = 3226
 16157
 16158 8D19 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16159
 16160 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3227
 16161
 16162 8D49 20 73 52			jsr MODIFY_VAUS
 16163
 16164 				; optimize OK (service.pas), line = 3228
 16165
 16166 8D4C A9 00			lda #$00
 16167 8D4E 8D 1A A0			sta VAUS.LETTER
 16168
 16169 				; optimize OK (service.pas), line = 3229
 16170
 16171 8D51 AC 7B A2 84 84 AC + 	mwy B1 :bp2
 16172 8D5B A0 0C			ldy #B1.SPEED-DATAORIGIN
 16173 8D5D B1 84			lda (:bp2),y
 16174 8D5F 38 E9 F4			sub #$F4
 16175 8D62 8D C9 A0			sta MAX.A
 16176 8D65 C8				iny
 16177 8D66 B1 84			lda (:bp2),y
 16178 8D68 E9 01			sbc #$01
 16179 8D6A 8D CA A0			sta MAX.A+1
 16180 8D6D A9 F4			lda #$F4
 16181 8D6F 8D CB A0			sta MAX.B
 16182 8D72 A9 01			lda #$01
 16183 8D74 8D CC A0			sta MAX.B+1
 16184 8D77 20 66 3D			jsr MAX
 16185 8D7A AD CD A0			lda MAX.RESULT
 16186 8D7D 8D 87 A2			sta X
 16187 8D80 AD CE A0			lda MAX.RESULT+1
 16188 8D83 8D 88 A2			sta X+1
 16189
 16190 				; optimize OK (service.pas), line = 3230
 16191
 16192 8D86 AD 7B A2			lda B1
 16193 8D89 8D 13 A1			sta SET_BALL_SPEED.BALL
 16194 8D8C AD 7C A2			lda B1+1
 16195 8D8F 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 16196 8D92 AD 87 A2			lda X
 16197 8D95 8D 17 A1			sta SET_BALL_SPEED.SPEED
 16198 8D98 AD 88 A2			lda X+1
 16199 8D9B 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 16200 8D9E 20 D5 45			jsr SET_BALL_SPEED
 16201 8DA1			s_32BC
 16202 				; optimize OK (service.pas), line = 3231
 16203 8DA1 4C E3 8D			jmp s_32DA
 16204 8DA4			l_3291
 16205 8DA4 C9 06			cmp #$06
 16206 8DA6 D0 3E			jne l_32C3
 16207
 16208 				; optimize OK (service.pas), line = 3235
 16209
 16210 8DA8 AD 86 A0			lda FIRE.SHOT
 16211 8DAB F0 03			jeq l_32CF
 16212 8DAD 20 4D 87			jsr REMOVE_FIRE
 16213 8DB0			l_32CF
 16214
 16215 				; optimize OK (service.pas), line = 3236
 16216
 16217 8DB0 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16218
 16219 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3237
 16220
 16221 8DE0 20 73 52			jsr MODIFY_VAUS
 16222 8DE3			s_32DA
 16223 				; optimize OK (service.pas), line = 3238
 16224 8DE3 4C 58 8E			jmp s_330A
 16225 8DE6			l_32C3
 16226 8DE6 C9 07			cmp #$07
 16227 8DE8 D0 73			jne l_32E1
 16228
 16229 				; optimize OK (service.pas), line = 3242
 16230
 16231 8DEA AD 86 A0			lda FIRE.SHOT
 16232 8DED F0 03			jeq l_32ED
 16233 8DEF 20 4D 87			jsr REMOVE_FIRE
 16234 8DF2			l_32ED
 16235
 16236 				; optimize OK (service.pas), line = 3243
 16237
 16238 8DF2 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16239
 16240 				; optimize FAIL ('MODIFY_VAUS', service.pas), line = 3244
 16241
 16242 8E22 20 73 52			jsr MODIFY_VAUS
 16243
 16244 				; optimize OK (service.pas), line = 3245
 16245
 16246 8E25 A9 00			lda #$00
 16247 8E27 8D 1A A0			sta VAUS.LETTER
 16248
 16249 				; optimize OK (service.pas), line = 3246
 16250
 16251 8E2A AC 6A A0			ldy CUR_PLAYER
 16252 8E2D B9 5E A0			lda adr.SCORE.LIVES,y
 16253 8E30 18 69 01			add #$01
 16254 8E33 99 5E A0			sta adr.SCORE.LIVES,y
 16255
 16256 				; optimize OK (service.pas), line = 3247
 16257
 16258 8E36 8D 58 A2			sta PLOT_LIVES.LIVES
 16259 8E39 A9 00			lda #$00
 16260 8E3B 8D 59 A2			sta PLOT_LIVES.LIVES+1
 16261 8E3E 20 1C 84			jsr PLOT_LIVES
 16262
 16263 				; optimize OK (service.pas), line = 3248
 16264
 16265 8E41 A9 D0			lda #$D0
 16266 8E43 8D 74 9F			sta BALL_BLOCK_SOUND.A
 16267 8E46 A9 07			lda #$07
 16268 8E48 8D 75 9F			sta BALL_BLOCK_SOUND.A+1
 16269 8E4B A9 0A			lda #$0A
 16270 8E4D 8D 76 9F			sta BALL_BLOCK_SOUND.B
 16271 8E50 A9 00			lda #$00
 16272 8E52 8D 77 9F			sta BALL_BLOCK_SOUND.B+1
 16273 8E55 20 51 39			jsr BALL_BLOCK_SOUND
 16274 8E58			s_330A
 16275
 16276 				; optimize OK (service.pas), line = 3249
 16277
 16278 8E58 A9 00			lda #$00
 16279 8E5A 8D 87 A0			sta FIRE.AVL
 16280 8E5D			l_32E1
 16281 8E5D			a_000A
 16282
 16283 				; ------------------------------------------------------------
 16284
 16285 = A27B			B1	= DATAORIGIN+$03F0
 16286 = 9E8B			B1.X	= DATAORIGIN+$0000
 16287 = 9E8D			B1.Y	= DATAORIGIN+$0002
 16288 = 9E8F			B1.FINEX	= DATAORIGIN+$0004
 16289 = 9E91			B1.FINEY	= DATAORIGIN+$0006
 16290 = 9E93			B1.OLDX	= DATAORIGIN+$0008
 16291 = 9E95			B1.OLDY	= DATAORIGIN+$000A
 16292 = 9E97			B1.SPEED	= DATAORIGIN+$000C
 16293 = 9E99			B1.FINESPEED	= DATAORIGIN+$000E
 16294 = 9E9B			B1.SPEEDX	= DATAORIGIN+$0010
 16295 = 9E9D			B1.SPEEDY	= DATAORIGIN+$0012
 16296 = 9E9F			B1.SBD	= DATAORIGIN+$0014
 16297 = 9EA1			B1.BRWHIT	= DATAORIGIN+$0016
 16298 = 9EA2			B1.INPLAY	= DATAORIGIN+$0017
 16299 = 9EA3			B1.LAUNCH	= DATAORIGIN+$0018
 16300 = 9EA4			B1.ONVAUS	= DATAORIGIN+$0019
 16301 = 9EA6			B1.STM	= DATAORIGIN+$001B
 16302 = A27F			B2	= DATAORIGIN+$03F4
 16303 = 9E8B			B2.X	= DATAORIGIN+$0000
 16304 = 9E8D			B2.Y	= DATAORIGIN+$0002
 16305 = 9E8F			B2.FINEX	= DATAORIGIN+$0004
 16306 = 9E91			B2.FINEY	= DATAORIGIN+$0006
 16307 = 9E93			B2.OLDX	= DATAORIGIN+$0008
 16308 = 9E95			B2.OLDY	= DATAORIGIN+$000A
 16309 = 9E97			B2.SPEED	= DATAORIGIN+$000C
 16310 = 9E99			B2.FINESPEED	= DATAORIGIN+$000E
 16311 = 9E9B			B2.SPEEDX	= DATAORIGIN+$0010
 16312 = 9E9D			B2.SPEEDY	= DATAORIGIN+$0012
 16313 = 9E9F			B2.SBD	= DATAORIGIN+$0014
 16314 = 9EA1			B2.BRWHIT	= DATAORIGIN+$0016
 16315 = 9EA2			B2.INPLAY	= DATAORIGIN+$0017
 16316 = 9EA3			B2.LAUNCH	= DATAORIGIN+$0018
 16317 = 9EA4			B2.ONVAUS	= DATAORIGIN+$0019
 16318 = 9EA6			B2.STM	= DATAORIGIN+$001B
 16319 = A283			B3	= DATAORIGIN+$03F8
 16320 = 9E8B			B3.X	= DATAORIGIN+$0000
 16321 = 9E8D			B3.Y	= DATAORIGIN+$0002
 16322 = 9E8F			B3.FINEX	= DATAORIGIN+$0004
 16323 = 9E91			B3.FINEY	= DATAORIGIN+$0006
 16324 = 9E93			B3.OLDX	= DATAORIGIN+$0008
 16325 = 9E95			B3.OLDY	= DATAORIGIN+$000A
 16326 = 9E97			B3.SPEED	= DATAORIGIN+$000C
 16327 = 9E99			B3.FINESPEED	= DATAORIGIN+$000E
 16328 = 9E9B			B3.SPEEDX	= DATAORIGIN+$0010
 16329 = 9E9D			B3.SPEEDY	= DATAORIGIN+$0012
 16330 = 9E9F			B3.SBD	= DATAORIGIN+$0014
 16331 = 9EA1			B3.BRWHIT	= DATAORIGIN+$0016
 16332 = 9EA2			B3.INPLAY	= DATAORIGIN+$0017
 16333 = 9EA3			B3.LAUNCH	= DATAORIGIN+$0018
 16334 = 9EA4			B3.ONVAUS	= DATAORIGIN+$0019
 16335 = 9EA6			B3.STM	= DATAORIGIN+$001B
 16336 = A287			X	= DATAORIGIN+$03FC
 16337 = A289			@CASETMP_000A	= DATAORIGIN+$03FE
 16338
 16339 = A27B			@VarData	= B1
 16340 = 0009			@VarDataSize	= 9
 16341
 16342 8E5D			@exit
 16343 					.ifdef @new
 16344 					lda <@VarData
 16345 					sta :ztmp
 16346 					lda >@VarData
 16347 					ldy #@VarDataSize-1
 16348 					jmp @FreeMem
 16349 					els
 16350 8E5D 60				rts						; ret
 16351 					eif
 16352 				.endl
 16353
 16354 8E5E			.local	DEVIATE_BALL					; PROCEDURE
 16355
 16356 				; --- RepeatUntilProlog
 16357 8E5E			l_3318
 16358
 16359 				; optimize OK (service.pas), line = 3262
 16360
 16361 8E5E AD 8A A2			lda BALL
 16362 8E61 8D 33 A1			sta GET_BALL_DIRECTION.BALL
 16363 8E64 AD 8B A2			lda BALL+1
 16364 8E67 8D 34 A1			sta GET_BALL_DIRECTION.BALL+1
 16365 8E6A 20 9E 49			jsr GET_BALL_DIRECTION
 16366 8E6D E8				inx
 16367 8E6E AD 37 A1 95 96		mva GET_BALL_DIRECTION.RESULT :STACKORIGIN,x
 16368 8E73 AD 38 A1 95 A6		mva GET_BALL_DIRECTION.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 16369 8E78 A9 1E			lda #$1E
 16370 8E7A 20 11 33			jsr SYSTEM.RANDOM.@010180000
 16371 8E7D E8				inx
 16372 8E7E AD C2 9E 95 96		mva SYSTEM.RANDOM.@010180000.RESULT :STACKORIGIN,x
 16373 8E83 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 16374 8E87 20 B5 20			jsr addAX_CX
 16375 8E8A B5 95			lda :STACKORIGIN-1,x
 16376 8E8C 38 E9 0F			sub #$0F
 16377 8E8F 8D 8E A2			sta TEMP
 16378 8E92 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
 16379 8E94 E9 00			sbc #$00
 16380 8E96 8D 8F A2			sta TEMP+1
 16381 8E99 CA				dex
 16382 8E9A CA				dex
 16383
 16384 				; optimize OK (service.pas), line = 3263
 16385
 16386 8E9B A9 5A			lda #$5A
 16387 8E9D 85 8E			sta @SMALLINT.MOD.B
 16388 8E9F A9 00			lda #$00
 16389 8EA1 85 8F			sta @SMALLINT.MOD.B+1
 16390 8EA3 AD 8E A2			lda TEMP
 16391 8EA6 85 86			sta @SMALLINT.MOD.A
 16392 8EA8 AD 8F A2			lda TEMP+1
 16393 8EAB 85 87			sta @SMALLINT.MOD.A+1
 16394 8EAD 20 50 22			jsr @SMALLINT.MOD
 16395 8EB0 A5 92			lda @SMALLINT.MOD.RESULT
 16396 8EB2 C9 1F			cmp #$1F
 16397 8EB4 A5 93			lda @SMALLINT.MOD.RESULT+1
 16398 8EB6 E9 00			sbc #$00
 16399 8EB8 50 02			svc
 16400 8EBA 49 80			eor #$80
 16401 8EBC 30 A0			jmi l_3318
 16402 8EBE A9 5A			lda #$5A
 16403 8EC0 85 8E			sta @SMALLINT.MOD.B
 16404 8EC2 A9 00			lda #$00
 16405 8EC4 85 8F			sta @SMALLINT.MOD.B+1
 16406 8EC6 AD 8E A2			lda TEMP
 16407 8EC9 85 86			sta @SMALLINT.MOD.A
 16408 8ECB AD 8F A2			lda TEMP+1
 16409 8ECE 85 87			sta @SMALLINT.MOD.A+1
 16410 8ED0 20 50 22			jsr @SMALLINT.MOD
 16411 8ED3 A5 92			lda @SMALLINT.MOD.RESULT
 16412 8ED5 C9 3C			cmp #$3C
 16413 8ED7 A5 93			lda @SMALLINT.MOD.RESULT+1
 16414 8ED9 E9 00			sbc #$00
 16415 8EDB 50 02			svc
 16416 8EDD 49 80			eor #$80
 16417 8EDF 30 03 4C 5E 8E		jpl l_3318
 16418
 16419 				; optimize OK (service.pas), line = 3265
 16420
 16421 8EE4 AD 8A A2			lda BALL
 16422 8EE7 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 16423 8EEA AD 8B A2			lda BALL+1
 16424 8EED 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 16425 8EF0 AD 8E A2			lda TEMP
 16426 8EF3 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 16427 8EF6 AD 8F A2			lda TEMP+1
 16428 8EF9 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 16429 8EFC 20 B8 47			jsr SET_BALL_DIRECTION
 16430
 16431 				; optimize OK (service.pas), line = 3266
 16432
 16433 8EFF AC 8A A2 84 84 AC + 	mwy BALL :bp2
 16434 8F09 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16435 8F0B B1 84			lda (:bp2),y
 16436 8F0D 8D 17 A1			sta SET_BALL_SPEED.SPEED
 16437 8F10 C8				iny
 16438 8F11 B1 84			lda (:bp2),y
 16439 8F13 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 16440 8F16 AD 8A A2			lda BALL
 16441 8F19 8D 13 A1			sta SET_BALL_SPEED.BALL
 16442 8F1C AD 8B A2			lda BALL+1
 16443 8F1F 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 16444 8F22 20 D5 45			jsr SET_BALL_SPEED
 16445
 16446 				; optimize OK (service.pas), line = 3268
 16447
 16448 8F25 AC 8A A2 84 84 AC + 	mwy BALL :bp2
 16449 8F2F A0 14			ldy #BALL.SBD-DATAORIGIN
 16450 8F31 A9 00			lda #$00
 16451 8F33 91 84			sta (:bp2),y
 16452 8F35 C8				iny
 16453 8F36 91 84			sta (:bp2),y
 16454
 16455 				; ------------------------------------------------------------
 16456
 16457 = A28A			BALL	= DATAORIGIN+$03FF
 16458 = 9E8B			BALL.X	= DATAORIGIN+$0000
 16459 = 9E8D			BALL.Y	= DATAORIGIN+$0002
 16460 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
 16461 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
 16462 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
 16463 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
 16464 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
 16465 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
 16466 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
 16467 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
 16468 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
 16469 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
 16470 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
 16471 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
 16472 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
 16473 = 9EA6			BALL.STM	= DATAORIGIN+$001B
 16474 = A28E			TEMP	= DATAORIGIN+$0403
 16475
 16476 = A28A			@VarData	= BALL
 16477 = 0004			@VarDataSize	= 4
 16478
 16479 8F38			@exit
 16480 					.ifdef @new
 16481 					lda <@VarData
 16482 					sta :ztmp
 16483 					lda >@VarData
 16484 					ldy #@VarDataSize-1
 16485 					jmp @FreeMem
 16486 					els
 16487 8F38 60				rts						; ret
 16488 					eif
 16489 				.endl
 16490
 16491 8F39			.local	BOUNCEBALL					; FUNCTION
 16492
 16493 8F39 4C AE 90			jmp l_3358
 16494
 16495 8F3C			.local	CHECK_BALL					; PROCEDURE
 16496
 16497 				; optimize OK (service.pas), line = 3298
 16498
 16499 8F3C AC F2 A2 84 84 AC + 	mwy BALL :bp2
 16500 8F46 A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16501 8F48 B1 84			lda (:bp2),y
 16502 8F4A F0 65			jeq l_3367
 16503
 16504 				; optimize OK (service.pas), line = 3301
 16505
 16506 8F4C A0 02			ldy #BALL.Y-DATAORIGIN
 16507 8F4E B1 84			lda (:bp2),y
 16508 8F50 C8				iny
 16509 8F51 C9 16			cmp #$16
 16510 8F53 B1 84			lda (:bp2),y
 16511 8F55 E9 00			sbc #$00
 16512 8F57 50 02			svc
 16513 8F59 49 80			eor #$80
 16514 8F5B 30 20			jmi l_3384
 16515 8F5D A0 02			ldy #BALL.Y-DATAORIGIN
 16516 8F5F B1 84			lda (:bp2),y
 16517 8F61 C8				iny
 16518 8F62 C9 8E			cmp #$8E
 16519 8F64 B1 84			lda (:bp2),y
 16520 8F66 E9 00			sbc #$00
 16521 8F68 50 02			svc
 16522 8F6A 49 80			eor #$80
 16523 8F6C 10 0F			jpl l_3384
 16524
 16525 				; optimize OK (service.pas), line = 3302
 16526
 16527 8F6E AD F2 A2			lda BALL
 16528 8F71 8D D4 A1			sta BALL_HIT_BLOCK.BALL
 16529 8F74 AD F3 A2			lda BALL+1
 16530 8F77 8D D5 A1			sta BALL_HIT_BLOCK.BALL+1
 16531 8F7A 20 0B 6A			jsr BALL_HIT_BLOCK
 16532 8F7D			l_3384
 16533
 16534 				; optimize OK (service.pas), line = 3304
 16535
 16536 8F7D AD F2 A2			lda BALL
 16537 8F80 8D 0D A1			sta SET_BALL.BALL
 16538 8F83 AD F3 A2			lda BALL+1
 16539 8F86 8D 0E A1			sta SET_BALL.BALL+1
 16540 8F89 20 FC 44			jsr SET_BALL
 16541
 16542 				; optimize FAIL ('BALL_SPEED', service.pas), line = 3305
 16543
 16544 8F8C E8				inx
 16545 8F8D AD F2 A2 95 96		mva BALL :STACKORIGIN,x
 16546 8F92 AD F3 A2 95 A6		mva BALL+1 :STACKORIGIN+STACKWIDTH,x
 16547 8F97 20 17 4C			jsr BALL_SPEED
 16548 8F9A AC F2 A2 84 84 AC + 	mwy BALL :bp2
 16549 8FA4 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16550 8FA6 AD 5B A1			lda BALL_SPEED.RESULT
 16551 8FA9 91 84			sta (:bp2),y
 16552 8FAB C8				iny
 16553 8FAC AD 5C A1			lda BALL_SPEED.RESULT+1
 16554 8FAF 91 84			sta (:bp2),y
 16555 8FB1			l_3367
 16556
 16557 				; ------------------------------------------------------------
 16558
 16559 = A2F2			BALL	= DATAORIGIN+$0467
 16560 = 9E8B			BALL.X	= DATAORIGIN+$0000
 16561 = 9E8D			BALL.Y	= DATAORIGIN+$0002
 16562 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
 16563 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
 16564 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
 16565 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
 16566 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
 16567 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
 16568 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
 16569 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
 16570 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
 16571 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
 16572 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
 16573 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
 16574 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
 16575 = 9EA6			BALL.STM	= DATAORIGIN+$001B
 16576
 16577 = A2F2			@VarData	= BALL
 16578 = 0002			@VarDataSize	= 2
 16579
 16580 8FB1			@exit
 16581 					.ifdef @new
 16582 					lda <@VarData
 16583 					sta :ztmp
 16584 					lda >@VarData
 16585 					ldy #@VarDataSize-1
 16586 					jmp @FreeMem
 16587 					els
 16588 8FB1 60				rts						; ret
 16589 					eif
 16590 				.endl
 16591
 16592 8FB2			.local	TEST_BALL					; PROCEDURE
 16593
 16594 				; optimize OK (service.pas), line = 3313
 16595
 16596 8FB2 AC F6 A2 84 84 AC + 	mwy BALL :bp2
 16597 8FBC A0 17			ldy #BALL.INPLAY-DATAORIGIN
 16598 8FBE B1 84			lda (:bp2),y
 16599 8FC0 D0 03 4C AD 90		jeq l_33A5
 16600
 16601 				; optimize OK (service.pas), line = 3315
 16602
 16603 8FC5 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16604 8FC7 B1 84			lda (:bp2),y
 16605 8FC9 18 69 01			add #$01
 16606 8FCC 91 84			sta (:bp2),y
 16607 8FCE C8				iny
 16608 8FCF B1 84			lda (:bp2),y
 16609 8FD1 69 00			adc #$00
 16610 8FD3 91 84			sta (:bp2),y
 16611
 16612 				; optimize OK (service.pas), line = 3317
 16613
 16614 8FD5 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16615 8FD7 B1 84			lda (:bp2),y
 16616 8FD9 85 9F			sta :STACKORIGIN+9
 16617 8FDB C8				iny
 16618 8FDC B1 84			lda (:bp2),y
 16619 8FDE 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16620 8FE0 AD 70 A0			lda LV
 16621 8FE3 0A				asl @
 16622 8FE4 A8				tay
 16623 8FE5 B9 A1 20			lda adr.LEVEL,y
 16624 8FE8 85 A0			sta :STACKORIGIN+10
 16625 8FEA B9 A2 20			lda adr.LEVEL+1,y
 16626 8FED 85 B0			sta :STACKORIGIN+STACKWIDTH+10
 16627 8FEF A0 00			ldy #$00
 16628 8FF1 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16629 8FF3 10 01			spl
 16630 8FF5 88				dey
 16631 8FF6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 16632 8FF8 84 BF			sty :STACKORIGIN+STACKWIDTH*2+9
 16633 8FFA 84 CF			sty :STACKORIGIN+STACKWIDTH*3+9
 16634 8FFC				.LOCAL
 16635 8FFC A5 CF			lda :STACKORIGIN+STACKWIDTH*3+9
 16636 8FFE 38 E9 00			sub #$00
 16637 9001 D0 1C			bne L4
 16638 9003 A5 BF			lda :STACKORIGIN+STACKWIDTH*2+9
 16639 9005 C9 00			cmp #$00
 16640 9007 D0 0A			bne L1
 16641 9009 A5 AF			lda :STACKORIGIN+STACKWIDTH+9
 16642 900B C5 B0			cmp :STACKORIGIN+STACKWIDTH+10
 16643 900D D0 04			bne L1
 16644 900F A5 9F			lda :STACKORIGIN+9
 16645 9011 C5 A0			cmp :STACKORIGIN+10
 16646 9013 F0 10		L1	beq L5
 16647 9015 B0 04			bcs L3
 16648 9017 A9 FF			lda #$FF
 16649 9019 D0 0A			bne L5
 16650 901B A9 01		L3	lda #$01
 16651 901D D0 06			bne L5
 16652 901F 50 04		L4	bvc L5
 16653 9021 49 FF			eor #$FF
 16654 9023 09 01			ora #$01
 16655 9025			L5
 16656 					.ENDL
 16657 9025 30 48			jmi l_33BB
 16658 9027 F0 46			jeq l_33BB
 16659
 16660 				; optimize OK (service.pas), line = 3319
 16661
 16662 9029 A0 0E			ldy #BALL.FINESPEED-DATAORIGIN
 16663 902B A9 00			lda #$00
 16664 902D 91 84			sta (:bp2),y
 16665 902F C8				iny
 16666 9030 91 84			sta (:bp2),y
 16667
 16668 				; optimize OK (service.pas), line = 3322
 16669
 16670 9032 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16671 9034 B1 84			lda (:bp2),y
 16672 9036 C8				iny
 16673 9037 C9 D0			cmp #$D0
 16674 9039 B1 84			lda (:bp2),y
 16675 903B E9 07			sbc #$07
 16676 903D 50 02			svc
 16677 903F 49 80			eor #$80
 16678 9041 10 2C			jpl l_33D1
 16679
 16680 				; optimize OK (service.pas), line = 3324
 16681
 16682 9043 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16683 9045 B1 84			lda (:bp2),y
 16684 9047 18 69 0A			add #$0A
 16685 904A 91 84			sta (:bp2),y
 16686 904C C8				iny
 16687 904D B1 84			lda (:bp2),y
 16688 904F 69 00			adc #$00
 16689 9051 91 84			sta (:bp2),y
 16690
 16691 				; optimize OK (service.pas), line = 3325
 16692
 16693 9053 A0 0C			ldy #BALL.SPEED-DATAORIGIN
 16694 9055 B1 84			lda (:bp2),y
 16695 9057 8D 17 A1			sta SET_BALL_SPEED.SPEED
 16696 905A C8				iny
 16697 905B B1 84			lda (:bp2),y
 16698 905D 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 16699 9060 AD F6 A2			lda BALL
 16700 9063 8D 13 A1			sta SET_BALL_SPEED.BALL
 16701 9066 AD F7 A2			lda BALL+1
 16702 9069 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 16703 906C 20 D5 45			jsr SET_BALL_SPEED
 16704 906F			l_33D1
 16705 906F			l_33BB
 16706
 16707 				; optimize OK (service.pas), line = 3329
 16708
 16709 906F AC F6 A2 84 84 AC + 	mwy BALL :bp2
 16710 9079 A0 14			ldy #BALL.SBD-DATAORIGIN
 16711 907B B1 84			lda (:bp2),y
 16712 907D 18 69 01			add #$01
 16713 9080 91 84			sta (:bp2),y
 16714 9082 C8				iny
 16715 9083 B1 84			lda (:bp2),y
 16716 9085 69 00			adc #$00
 16717 9087 91 84			sta (:bp2),y
 16718
 16719 				; optimize OK (service.pas), line = 3333
 16720
 16721 9089 A0 15			ldy #BALL.SBD-DATAORIGIN+$01
 16722 908B B1 84			lda (:bp2),y
 16723 908D C9 02			cmp #$02
 16724 908F D0 05			bne @+
 16725 9091 88				dey
 16726 9092 B1 84			lda (:bp2),y
 16727 9094 C9 58			cmp #$58
 16728 				@
 16729 9096 90 15			jcc l_33F9
 16730 				@
 16731 9098 A0 00			ldy #$00
 16732 909A B1 84			lda (:bp2),y
 16733 909C 10 0F			jpl l_33F9
 16734 				@
 16735
 16736 				; optimize OK (service.pas), line = 3334
 16737
 16738 909E AD F6 A2			lda BALL
 16739 90A1 8D 8A A2			sta DEVIATE_BALL.BALL
 16740 90A4 AD F7 A2			lda BALL+1
 16741 90A7 8D 8B A2			sta DEVIATE_BALL.BALL+1
 16742 90AA 20 5E 8E			jsr DEVIATE_BALL
 16743 90AD			l_33F9
 16744 90AD			l_33A5
 16745
 16746 				; ------------------------------------------------------------
 16747
 16748 = A2F6			BALL	= DATAORIGIN+$046B
 16749 = 9E8B			BALL.X	= DATAORIGIN+$0000
 16750 = 9E8D			BALL.Y	= DATAORIGIN+$0002
 16751 = 9E8F			BALL.FINEX	= DATAORIGIN+$0004
 16752 = 9E91			BALL.FINEY	= DATAORIGIN+$0006
 16753 = 9E93			BALL.OLDX	= DATAORIGIN+$0008
 16754 = 9E95			BALL.OLDY	= DATAORIGIN+$000A
 16755 = 9E97			BALL.SPEED	= DATAORIGIN+$000C
 16756 = 9E99			BALL.FINESPEED	= DATAORIGIN+$000E
 16757 = 9E9B			BALL.SPEEDX	= DATAORIGIN+$0010
 16758 = 9E9D			BALL.SPEEDY	= DATAORIGIN+$0012
 16759 = 9E9F			BALL.SBD	= DATAORIGIN+$0014
 16760 = 9EA1			BALL.BRWHIT	= DATAORIGIN+$0016
 16761 = 9EA2			BALL.INPLAY	= DATAORIGIN+$0017
 16762 = 9EA3			BALL.LAUNCH	= DATAORIGIN+$0018
 16763 = 9EA4			BALL.ONVAUS	= DATAORIGIN+$0019
 16764 = 9EA6			BALL.STM	= DATAORIGIN+$001B
 16765
 16766 = A2F6			@VarData	= BALL
 16767 = 0002			@VarDataSize	= 2
 16768
 16769 90AD			@exit
 16770 					.ifdef @new
 16771 					lda <@VarData
 16772 					sta :ztmp
 16773 					lda >@VarData
 16774 					ldy #@VarDataSize-1
 16775 					jmp @FreeMem
 16776 					els
 16777 90AD 60				rts						; ret
 16778 					eif
 16779 				.endl
 16780 90AE			l_3358
 16781
 16782 				; optimize OK (service.pas), line = 3342
 16783
 16784 90AE A9 00			lda #$00
 16785 90B0 8D 8B A0			sta SCRFLUXCNT
 16786
 16787 				; optimize OK (service.pas), line = 3343
 16788
 16789 90B3 8D 8A A0			sta SCRFLUX
 16790
 16791 				; optimize OK (service.pas), line = 3345
 16792
 16793 90B6 A9 01			lda #$01
 16794 90B8 8D 89 A0			sta BALLS_IN_PLAY
 16795
 16796 				; optimize OK (service.pas), line = 3347
 16797
 16798 90BB A9 00			lda #$00
 16799 90BD 8D 87 A0			sta FIRE.AVL
 16800
 16801 				; optimize OK (service.pas), line = 3348
 16802
 16803 90C0 AD A6 9F 8D 9E 9F + 	:8 mva adr.NORMAL+# adr.PLAYVAUS+#
 16804
 16805 				; optimize OK (service.pas), line = 3350
 16806
 16807 90F0 A9 FF			lda #$FF
 16808 90F2 8D 82 A0			sta LETT.LAST
 16809 90F5 8D 83 A0			sta LETT.LAST+1
 16810
 16811 				; optimize OK (service.pas), line = 3351
 16812
 16813 90F8 A9 00			lda #$00
 16814 90FA 8D 79 A0			sta LETT.ACTIVE
 16815
 16816 				; optimize OK (service.pas), line = 3354
 16817
 16818 90FD AD 44 9E			lda PATTERN
 16819 9100 8D 06 A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 16820 9103 AD 45 9E			lda PATTERN+1
 16821 9106 8D 07 A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 16822 9109 20 80 77			jsr FILL_PICTURE_WITH_PATTERN
 16823
 16824 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3357
 16825
 16826 910C E8				inx
 16827 910D AD 24 9E 95 96		mva PLAYSCREEN :STACKORIGIN,x
 16828 9112 AD 25 9E 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 16829 9117 20 A2 43			jsr SHOWBTMPICTURE
 16830
 16831 				; optimize OK (service.pas), line = 3361
 16832
 16833 911A AC 6A A0			ldy CUR_PLAYER
 16834 911D B9 5E A0			lda adr.SCORE.LIVES,y
 16835 9120 8D 58 A2			sta PLOT_LIVES.LIVES
 16836 9123 A9 00			lda #$00
 16837 9125 8D 59 A2			sta PLOT_LIVES.LIVES+1
 16838 9128 20 1C 84			jsr PLOT_LIVES
 16839
 16840 				; optimize OK (service.pas), line = 3367
 16841
 16842 912B AD 53 A0			lda adr.SCORE.PLAYER+$04
 16843 912E 8D 4F A2			sta WRITE_SCORE.SC
 16844 9131 AD 54 A0			lda adr.SCORE.PLAYER+1+$04
 16845 9134 8D 50 A2			sta WRITE_SCORE.SC+1
 16846 9137 AD 55 A0			lda adr.SCORE.PLAYER+2+$04
 16847 913A 8D 51 A2			sta WRITE_SCORE.SC+2
 16848 913D AD 56 A0			lda adr.SCORE.PLAYER+3+$04
 16849 9140 8D 52 A2			sta WRITE_SCORE.SC+3
 16850 9143 A9 FD			lda #$FD
 16851 9145 8D 4B A2			sta WRITE_SCORE.PX
 16852 9148 A9 00			lda #$00
 16853 914A 8D 4C A2			sta WRITE_SCORE.PX+1
 16854 914D A9 3C			lda #$3C
 16855 914F 8D 4D A2			sta WRITE_SCORE.PY
 16856 9152 A9 00			lda #$00
 16857 9154 8D 4E A2			sta WRITE_SCORE.PY+1
 16858 9157 20 BE 80			jsr WRITE_SCORE
 16859
 16860 				; optimize OK (service.pas), line = 3368
 16861
 16862 915A AD 57 A0			lda adr.SCORE.PLAYER+$08
 16863 915D 8D 4F A2			sta WRITE_SCORE.SC
 16864 9160 AD 58 A0			lda adr.SCORE.PLAYER+1+$08
 16865 9163 8D 50 A2			sta WRITE_SCORE.SC+1
 16866 9166 AD 59 A0			lda adr.SCORE.PLAYER+2+$08
 16867 9169 8D 51 A2			sta WRITE_SCORE.SC+2
 16868 916C AD 5A A0			lda adr.SCORE.PLAYER+3+$08
 16869 916F 8D 52 A2			sta WRITE_SCORE.SC+3
 16870 9172 A9 FD			lda #$FD
 16871 9174 8D 4B A2			sta WRITE_SCORE.PX
 16872 9177 A9 00			lda #$00
 16873 9179 8D 4C A2			sta WRITE_SCORE.PX+1
 16874 917C A9 5D			lda #$5D
 16875 917E 8D 4D A2			sta WRITE_SCORE.PY
 16876 9181 A9 00			lda #$00
 16877 9183 8D 4E A2			sta WRITE_SCORE.PY+1
 16878 9186 20 BE 80			jsr WRITE_SCORE
 16879
 16880 				; optimize OK (service.pas), line = 3369
 16881
 16882 9189 A9 FD			lda #$FD
 16883 918B 8D 4B A2			sta WRITE_SCORE.PX
 16884 918E A9 00			lda #$00
 16885 9190 8D 4C A2			sta WRITE_SCORE.PX+1
 16886 9193 A9 80			lda #$80
 16887 9195 8D 4D A2			sta WRITE_SCORE.PY
 16888 9198 A9 00			lda #$00
 16889 919A 8D 4E A2			sta WRITE_SCORE.PY+1
 16890 919D AD 61 A0			lda SCORE.HISCORE
 16891 91A0 8D 4F A2			sta WRITE_SCORE.SC
 16892 91A3 AD 62 A0			lda SCORE.HISCORE+1
 16893 91A6 8D 50 A2			sta WRITE_SCORE.SC+1
 16894 91A9 AD 63 A0			lda SCORE.HISCORE+2
 16895 91AC 8D 51 A2			sta WRITE_SCORE.SC+2
 16896 91AF AD 64 A0			lda SCORE.HISCORE+3
 16897 91B2 8D 52 A2			sta WRITE_SCORE.SC+3
 16898 91B5 20 BE 80			jsr WRITE_SCORE
 16899
 16900 				; optimize FAIL ('PUT_WALL', service.pas), line = 3372
 16901
 16902 91B8 20 38 5D			jsr PUT_WALL
 16903
 16904 				; optimize OK (service.pas), line = 3379
 16905
 16906 91BB A9 01			lda #$01
 16907 91BD 8D B5 A2			sta BALL0.INPLAY
 16908
 16909 				; optimize OK (service.pas), line = 3380
 16910
 16911 91C0 8D B6 A2			sta BALL0.LAUNCH
 16912
 16913 				; optimize OK (service.pas), line = 3383
 16914
 16915 91C3 A9 6F			lda #$6F
 16916 91C5 8D 9E A2			sta BALL0.X
 16917 91C8 A9 00			lda #$00
 16918 91CA 8D 9F A2			sta BALL0.X+1
 16919
 16920 				; optimize OK (service.pas), line = 3384
 16921
 16922 91CD A9 B5			lda #$B5
 16923 91CF 8D A0 A2			sta BALL0.Y
 16924 91D2 A9 00			lda #$00
 16925 91D4 8D A1 A2			sta BALL0.Y+1
 16926
 16927 				; optimize OK (service.pas), line = 3387
 16928
 16929 91D7 A9 FF			lda #$FF
 16930 91D9 8D A6 A2			sta BALL0.OLDX
 16931 91DC 8D A7 A2			sta BALL0.OLDX+1
 16932
 16933 				; optimize OK (service.pas), line = 3388
 16934
 16935 91DF 8D A8 A2			sta BALL0.OLDY
 16936 91E2 8D A9 A2			sta BALL0.OLDY+1
 16937
 16938 				; optimize OK (service.pas), line = 3391
 16939
 16940 91E5 A9 00			lda #$00
 16941 91E7 8D B2 A2			sta BALL0.SBD
 16942 91EA 8D B3 A2			sta BALL0.SBD+1
 16943
 16944 				; optimize OK (service.pas), line = 3395
 16945
 16946 91ED A9 10			lda #$10
 16947 91EF 8D B7 A2			sta BALL0.ONVAUS
 16948 91F2 A9 00			lda #$00
 16949 91F4 8D B8 A2			sta BALL0.ONVAUS+1
 16950
 16951 				; optimize OK (service.pas), line = 3400
 16952
 16953 91F7 8D B9 A2			sta BALL0.STM
 16954
 16955 				; optimize OK (service.pas), line = 3404
 16956
 16957 91FA A9 E8			lda #$E8
 16958 91FC 8D C3 9E			sta SYSTEM.RANDOM.@010184000.RANGE
 16959 91FF A9 03			lda #$03
 16960 9201 8D C4 9E			sta SYSTEM.RANDOM.@010184000.RANGE+1
 16961 9204 20 28 33			jsr SYSTEM.RANDOM.@010184000
 16962 9207 AD C5 9E			lda SYSTEM.RANDOM.@010184000.RESULT
 16963 920A 8D 7A A0			sta LETT.INCOMING
 16964 920D AD C6 9E			lda SYSTEM.RANDOM.@010184000.RESULT+1
 16965 9210 8D 7B A0			sta LETT.INCOMING+1
 16966
 16967 				; optimize FAIL ('CREATE_VAUS', service.pas), line = 3407
 16968
 16969 9213 20 D7 7B			jsr CREATE_VAUS
 16970
 16971 				; optimize FAIL ('WRITE_ROUND_LEVEL', service.pas), line = 3410
 16972
 16973 9216 20 F3 78			jsr WRITE_ROUND_LEVEL
 16974
 16975 				; optimize FAIL ('SET_VAUS', service.pas), line = 3412
 16976
 16977 9219 20 8B 52			jsr SET_VAUS
 16978
 16979 				; optimize FAIL ('START_VAUS', service.pas), line = 3413
 16980
 16981 921C 20 C8 52			jsr START_VAUS
 16982
 16983 				; optimize OK (service.pas), line = 3414
 16984
 16985 921F AD 0E A0			lda VAUS.X
 16986 9222 8D 74 A1			sta MOVE_VAUS.X
 16987 9225 A9 00			lda #$00
 16988 9227 8D 75 A1			sta MOVE_VAUS.X+1
 16989 922A A9 B8			lda #$B8
 16990 922C 8D 76 A1			sta MOVE_VAUS.Y
 16991 922F A9 00			lda #$00
 16992 9231 8D 77 A1			sta MOVE_VAUS.Y+1
 16993 9234 20 BE 54			jsr MOVE_VAUS
 16994
 16995 				; optimize FAIL ('START_LEVEL', service.pas), line = 3415
 16996
 16997 9237 20 4F 39			jsr START_LEVEL
 16998
 16999 				; optimize FAIL ('START_VAUS', service.pas), line = 3416
 17000
 17001 923A 20 C8 52			jsr START_VAUS
 17002
 17003 				; optimize FAIL ('REMOVE_ROUND_LEVEL', service.pas), line = 3417
 17004
 17005 923D 20 F4 78			jsr REMOVE_ROUND_LEVEL
 17006
 17007 				; optimize OK (service.pas), line = 3418
 17008
 17009 9240 AD 41 97			lda BALL0
 17010 9243 8D 0D A1			sta SET_BALL.BALL
 17011 9246 AD 42 97			lda BALL0+1
 17012 9249 8D 0E A1			sta SET_BALL.BALL+1
 17013 924C 20 FC 44			jsr SET_BALL
 17014
 17015 				; optimize OK (service.pas), line = 3425
 17016
 17017 924F A9 0F			lda #$0F
 17018 9251 20 11 33			jsr SYSTEM.RANDOM.@010180000
 17019 9254 E8				inx
 17020 9255 E8				inx
 17021 9256 AD C2 9E			lda SYSTEM.RANDOM.@010180000.RESULT
 17022 9259 18 69 3C			add #$3C
 17023 925C 95 95			sta :STACKORIGIN-1,x
 17024 925E A9 00			lda #$00
 17025 9260 69 00			adc #$00
 17026 9262 95 A5			sta :STACKORIGIN-1+STACKWIDTH,x
 17027 9264 AD 41 97			lda BALL0
 17028 9267 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 17029 926A AD 42 97			lda BALL0+1
 17030 926D 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 17031 9270 CA				dex
 17032 9271 B5 96			lda :STACKORIGIN,x
 17033 9273 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 17034 9276 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17035 9278 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 17036 927B CA				dex
 17037 927C 20 B8 47			jsr SET_BALL_DIRECTION
 17038
 17039 				; optimize OK (service.pas), line = 3427
 17040
 17041 927F AD 41 97			lda BALL0
 17042 9282 8D 13 A1			sta SET_BALL_SPEED.BALL
 17043 9285 AD 42 97			lda BALL0+1
 17044 9288 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 17045 928B A9 F4			lda #$F4
 17046 928D 8D 17 A1			sta SET_BALL_SPEED.SPEED
 17047 9290 A9 01			lda #$01
 17048 9292 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 17049 9295 20 D5 45			jsr SET_BALL_SPEED
 17050
 17051 				; optimize OK (service.pas), line = 3430
 17052
 17053 9298 A9 00			lda #$00
 17054 929A 8D AC A2			sta BALL0.FINESPEED
 17055 929D 8D AD A2			sta BALL0.FINESPEED+1
 17056
 17057 				; optimize OK (service.pas), line = 3432
 17058
 17059 92A0 8D D1 A2			sta BALL1.INPLAY
 17060
 17061 				; optimize OK (service.pas), line = 3433
 17062
 17063 92A3 8D ED A2			sta BALL2.INPLAY
 17064
 17065 				; optimize OK (service.pas), line = 3435
 17066
 17067 92A6 AD 0E A0			lda VAUS.X
 17068 92A9 8D 91 A2			sta X
 17069 92AC A9 00			lda #$00
 17070 92AE 8D 92 A2			sta X+1
 17071
 17072 				; --- WhileProlog
 17073 92B1 4C 1F 97			jmp l_3491
 17074 92B4			l_3492
 17075
 17076 				; optimize FAIL ('WAIT_VBL', service.pas), line = 3439
 17077
 17078 92B4 20 F8 44			jsr WAIT_VBL
 17079
 17080 				; optimize OK (service.pas), line = 3448
 17081
 17082 92B7 A9 91			lda <X
 17083 92B9 8D 93 A0			sta MOUSECOORDS.X
 17084 92BC A9 A2			lda >X
 17085 92BE 8D 94 A0			sta MOUSECOORDS.X+1
 17086 92C1 20 E0 3A			jsr MOUSECOORDS
 17087
 17088 				; optimize OK (service.pas), line = 3453
 17089
 17090 92C4 AD 72 A0			lda TRAINER
 17091 92C7 D0 19			jne l_34A7
 17092 92C9 AD 91 A2			lda X
 17093 92CC 8D 74 A1			sta MOVE_VAUS.X
 17094 92CF AD 92 A2			lda X+1
 17095 92D2 8D 75 A1			sta MOVE_VAUS.X+1
 17096 92D5 A9 B8			lda #$B8
 17097 92D7 8D 76 A1			sta MOVE_VAUS.Y
 17098 92DA A9 00			lda #$00
 17099 92DC 8D 77 A1			sta MOVE_VAUS.Y+1
 17100 92DF 4C 4C 93			jmp l_34B5
 17101 92E2			l_34A7
 17102
 17103 				; optimize OK (service.pas), line = 3459
 17104
 17105 92E2 AD 72 A0			lda TRAINER
 17106 92E5 C9 01			cmp #$01
 17107 92E7 D0 66			jne l_34C7
 17108
 17109 				; optimize FAIL (1, service.pas), line = 3460
 17110
 17111 92E9 E8				inx
 17112 92EA A9 B8 95 96			mva #$B8 :STACKORIGIN,x
 17113 92EE A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17114 92F2 E8				inx
 17115 92F3 A9 0A 95 96			mva #$0A :STACKORIGIN,x
 17116 92F7 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 17117 92FB AD 9E A2			lda BALL0.X
 17118 92FE 38 ED B7 A2			sub BALL0.ONVAUS
 17119 9302 8D C9 A0			sta MAX.A
 17120 9305 AD 9F A2			lda BALL0.X+1
 17121 9308 ED B8 A2			sbc BALL0.ONVAUS+1
 17122 930B 8D CA A0			sta MAX.A+1
 17123 930E B5 96			lda :STACKORIGIN,x
 17124 9310 8D CB A0			sta MAX.B
 17125 9313 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17126 9315 8D CC A0			sta MAX.B+1
 17127 9318 CA				dex
 17128 9319 20 66 3D			jsr MAX
 17129 931C A9 B8			lda #$B8
 17130 931E 8D CF A0			sta MIN.A
 17131 9321 A9 00			lda #$00
 17132 9323 8D D0 A0			sta MIN.A+1
 17133 9326 AD CD A0			lda MAX.RESULT
 17134 9329 8D D1 A0			sta MIN.B
 17135 932C AD CE A0			lda MAX.RESULT+1
 17136 932F 8D D2 A0			sta MIN.B+1
 17137 9332 20 91 3D			jsr MIN
 17138 9335 AD D3 A0			lda MIN.RESULT
 17139 9338 8D 74 A1			sta MOVE_VAUS.X
 17140 933B AD D4 A0			lda MIN.RESULT+1
 17141 933E 8D 75 A1			sta MOVE_VAUS.X+1
 17142 9341 B5 96			lda :STACKORIGIN,x
 17143 9343 8D 76 A1			sta MOVE_VAUS.Y
 17144 9346 B5 A6			lda :STACKORIGIN+STACKWIDTH,x
 17145 9348 8D 77 A1			sta MOVE_VAUS.Y+1
 17146 934B CA				dex
 17147 934C			l_34B5
 17148 934C 20 BE 54			jsr MOVE_VAUS
 17149 934F			l_34C7
 17150
 17151 				; optimize OK (service.pas), line = 3465
 17152
 17153 934F AD B6 A2			lda BALL0.LAUNCH
 17154 9352 C9 01			cmp #$01
 17155 9354 D0 30			jne l_34E9
 17156
 17157 				; optimize FAIL (0, service.pas), line = 3467
 17158
 17159 9356 EE B9 A2			inc BALL0.STM
 17160
 17161 				; optimize OK (service.pas), line = 3472
 17162
 17163 9359 AD B9 A2			lda BALL0.STM
 17164 935C C9 FA			cmp #$FA
 17165 935E D0 05			jne l_3500
 17166 9360 A9 00			lda #$00
 17167 9362 8D B6 A2			sta BALL0.LAUNCH
 17168 9365			l_3500
 17169
 17170 				; optimize OK (service.pas), line = 3475
 17171
 17172 9365 AD 41 97			lda BALL0
 17173 9368 8D 3B A1			sta START_BALL.BALL
 17174 936B AD 42 97			lda BALL0+1
 17175 936E 8D 3C A1			sta START_BALL.BALL+1
 17176 9371 20 BC 4B			jsr START_BALL
 17177
 17178 				; optimize FAIL ('MOUSECLICK', service.pas), line = 3478
 17179
 17180 9374 20 61 3B			jsr MOUSECLICK
 17181 9377 AD 97 A0			lda MOUSECLICK.RESULT
 17182 937A C9 01			cmp #$01
 17183 937C D0 05			jne l_351A
 17184 937E A9 00			lda #$00
 17185 9380 8D B6 A2			sta BALL0.LAUNCH
 17186 9383			l_351A
 17187 9383 4C C2 93			jmp l_352A
 17188 9386			l_34E9
 17189
 17190 				; optimize OK (service.pas), line = 3486
 17191
 17192 9386 AD B5 A2			lda BALL0.INPLAY
 17193 9389 F0 0F			jeq l_3536
 17194 938B AD 41 97			lda BALL0
 17195 938E 8D 65 A1			sta MOVE_BALL.BALL
 17196 9391 AD 42 97			lda BALL0+1
 17197 9394 8D 66 A1			sta MOVE_BALL.BALL+1
 17198 9397 20 D1 4C			jsr MOVE_BALL
 17199 939A			l_3536
 17200
 17201 				; optimize OK (service.pas), line = 3487
 17202
 17203 939A AD D1 A2			lda BALL1.INPLAY
 17204 939D F0 0F			jeq l_3548
 17205 939F AD 43 97			lda BALL1
 17206 93A2 8D 65 A1			sta MOVE_BALL.BALL
 17207 93A5 AD 44 97			lda BALL1+1
 17208 93A8 8D 66 A1			sta MOVE_BALL.BALL+1
 17209 93AB 20 D1 4C			jsr MOVE_BALL
 17210 93AE			l_3548
 17211
 17212 				; optimize OK (service.pas), line = 3488
 17213
 17214 93AE AD ED A2			lda BALL2.INPLAY
 17215 93B1 F0 0F			jeq l_355A
 17216 93B3 AD 45 97			lda BALL2
 17217 93B6 8D 65 A1			sta MOVE_BALL.BALL
 17218 93B9 AD 46 97			lda BALL2+1
 17219 93BC 8D 66 A1			sta MOVE_BALL.BALL+1
 17220 93BF 20 D1 4C			jsr MOVE_BALL
 17221 93C2			l_355A
 17222 93C2			l_352A
 17223
 17224 				; optimize OK (service.pas), line = 3496
 17225
 17226 93C2 AD 41 97			lda BALL0
 17227 93C5 8D F2 A2			sta CHECK_BALL.BALL
 17228 93C8 AD 42 97			lda BALL0+1
 17229 93CB 8D F3 A2			sta CHECK_BALL.BALL+1
 17230 93CE 20 3C 8F			jsr CHECK_BALL
 17231
 17232 				; optimize OK (service.pas), line = 3497
 17233
 17234 93D1 AD 43 97			lda BALL1
 17235 93D4 8D F2 A2			sta CHECK_BALL.BALL
 17236 93D7 AD 44 97			lda BALL1+1
 17237 93DA 8D F3 A2			sta CHECK_BALL.BALL+1
 17238 93DD 20 3C 8F			jsr CHECK_BALL
 17239
 17240 				; optimize OK (service.pas), line = 3498
 17241
 17242 93E0 AD 45 97			lda BALL2
 17243 93E3 8D F2 A2			sta CHECK_BALL.BALL
 17244 93E6 AD 46 97			lda BALL2+1
 17245 93E9 8D F3 A2			sta CHECK_BALL.BALL+1
 17246 93EC 20 3C 8F			jsr CHECK_BALL
 17247
 17248 				; optimize FAIL ('CHECKSHINE', service.pas), line = 3513
 17249
 17250 93EF 20 55 40			jsr CHECKSHINE
 17251
 17252 				; optimize FAIL ('CHECK_LETTER', service.pas), line = 3514
 17253
 17254 93F2 20 6B 42			jsr CHECK_LETTER
 17255
 17256 				; optimize OK (service.pas), line = 3515
 17257
 17258 93F5 AD 41 97			lda BALL0
 17259 93F8 8D 7B A2			sta CHECK_BONUS_TYPE.B1
 17260 93FB AD 42 97			lda BALL0+1
 17261 93FE 8D 7C A2			sta CHECK_BONUS_TYPE.B1+1
 17262 9401 AD 43 97			lda BALL1
 17263 9404 8D 7F A2			sta CHECK_BONUS_TYPE.B2
 17264 9407 AD 44 97			lda BALL1+1
 17265 940A 8D 80 A2			sta CHECK_BONUS_TYPE.B2+1
 17266 940D AD 45 97			lda BALL2
 17267 9410 8D 83 A2			sta CHECK_BONUS_TYPE.B3
 17268 9413 AD 46 97			lda BALL2+1
 17269 9416 8D 84 A2			sta CHECK_BONUS_TYPE.B3+1
 17270 9419 20 22 8B			jsr CHECK_BONUS_TYPE
 17271
 17272 				; optimize FAIL ('CHECK_FIRE', service.pas), line = 3516
 17273
 17274 941C 20 B8 87			jsr CHECK_FIRE
 17275
 17276 				; optimize FAIL ('CHECK_FLUX', service.pas), line = 3517
 17277
 17278 941F 20 7F 89			jsr CHECK_FLUX
 17279
 17280 				; optimize OK (service.pas), line = 3519
 17281
 17282 9422 AD 0E A0			lda VAUS.X
 17283 9425 18 6D 16 A0			add VAUS.WIDTH
 17284 9429 85 9F			sta :STACKORIGIN+9
 17285 942B A9 00			lda #$00
 17286 942D 69 00			adc #$00
 17287 942F A0 01			ldy #1
 17288 9431 C9 00			cmp #$00
 17289 9433 D0 04			bne @+
 17290 9435 A5 9F			lda :STACKORIGIN+9
 17291 9437 C9 D7			cmp #$D7
 17292 				@
 17293 9439 F0 01			beq @+
 17294 943B 88				dey
 17295 				@
 17296 943C 98				tya
 17297 943D 2D 8A A0			and SCRFLUX
 17298 9440 F0 03			jeq l_3592
 17299 9442 20 1C 8A			jsr VAUS_OUT
 17300 9445			l_3592
 17301
 17302 				; optimize OK (service.pas), line = 3521
 17303
 17304 9445 AD 1A A0			lda VAUS.LETTER
 17305 9448 C9 04			cmp #$04
 17306 944A F0 03 4C 8F 95		jne l_35A8
 17307
 17308 				; optimize OK (service.pas), line = 3523
 17309
 17310 944F A9 03			lda #$03
 17311 9451 8D 89 A0			sta BALLS_IN_PLAY
 17312
 17313 				; optimize OK (service.pas), line = 3525
 17314
 17315 9454 AC 43 97 84 84 AC + 	mwy BALL1 :bp2
 17316 945E A0 1B			ldy #$1B
 17317 9460 B9 9E A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17318
 17319 				; optimize OK (service.pas), line = 3526
 17320
 17321 9468 AC 45 97 84 84 AC + 	mwy BALL2 :bp2
 17322 9472 A0 1B			ldy #$1B
 17323 9474 B9 9E A2 91 84 88 + 	mva:rpl adr.BALL0,y (:bp2),y-
 17324
 17325 				; optimize OK (service.pas), line = 3528
 17326
 17327 947C AD 41 97			lda BALL0
 17328 947F 8D 33 A1			sta GET_BALL_DIRECTION.BALL
 17329 9482 AD 42 97			lda BALL0+1
 17330 9485 8D 34 A1			sta GET_BALL_DIRECTION.BALL+1
 17331 9488 20 9E 49			jsr GET_BALL_DIRECTION
 17332 948B E8				inx
 17333 948C E8				inx
 17334 948D A9 5A			lda #$5A
 17335 948F 85 8E			sta @SMALLINT.DIV.B
 17336 9491 A9 00			lda #$00
 17337 9493 85 8F			sta @SMALLINT.DIV.B+1
 17338 9495 AD 37 A1			lda GET_BALL_DIRECTION.RESULT
 17339 9498 85 86			sta @SMALLINT.DIV.A
 17340 949A AD 38 A1			lda GET_BALL_DIRECTION.RESULT+1
 17341 949D 85 87			sta @SMALLINT.DIV.A+1
 17342 949F 20 33 22			jsr @SMALLINT.DIV
 17343 94A2 CA				dex
 17344 94A3 A5 86			lda :eax
 17345 94A5 8D 97 A2			sta T1
 17346 94A8 A5 87			lda :eax+1
 17347 94AA 8D 98 A2			sta T1+1
 17348 94AD CA				dex
 17349
 17350 				; optimize OK (service.pas), line = 3530
 17351
 17352 94AE AD AA A2			lda BALL0.SPEED
 17353 94B1 8D 99 A2			sta T2
 17354 94B4 AD AB A2			lda BALL0.SPEED+1
 17355 94B7 8D 9A A2			sta T2+1
 17356
 17357 				; optimize OK (service.pas), line = 3537
 17358
 17359 94BA A9 5A			lda #$5A
 17360 94BC 85 8E			sta :ecx
 17361 94BE A9 00			lda #$00
 17362 94C0 85 8F			sta :ecx+1
 17363 94C2 AD 97 A2			lda T1
 17364 94C5 85 86			sta :eax
 17365 94C7 AD 98 A2			lda T1+1
 17366 94CA 85 87			sta :eax+1
 17367 					.ifdef fmulinit
 17368 					fmulu_16
 17369 					els
 17370 94CC 20 0B 23			imulCX
 17371 					eif
 17372 94CF A5 86			lda :eax
 17373 94D1 8D 9B A2			sta HLP
 17374 94D4 A5 87			lda :eax+1
 17375 94D6 8D 9C A2			sta HLP+1
 17376
 17377 				; optimize OK (service.pas), line = 3539
 17378
 17379 94D9 AD 9B A2			lda HLP
 17380 94DC 18 69 1E			add #$1E
 17381 94DF 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 17382 94E2 AD 9C A2			lda HLP+1
 17383 94E5 69 00			adc #$00
 17384 94E7 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 17385 94EA AD 41 97			lda BALL0
 17386 94ED 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 17387 94F0 AD 42 97			lda BALL0+1
 17388 94F3 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 17389 94F6 20 B8 47			jsr SET_BALL_DIRECTION
 17390
 17391 				; optimize OK (service.pas), line = 3540
 17392
 17393 94F9 AD 9B A2			lda HLP
 17394 94FC 18 69 2D			add #$2D
 17395 94FF 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 17396 9502 AD 9C A2			lda HLP+1
 17397 9505 69 00			adc #$00
 17398 9507 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 17399 950A AD 43 97			lda BALL1
 17400 950D 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 17401 9510 AD 44 97			lda BALL1+1
 17402 9513 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 17403 9516 20 B8 47			jsr SET_BALL_DIRECTION
 17404
 17405 				; optimize OK (service.pas), line = 3541
 17406
 17407 9519 AD 9B A2			lda HLP
 17408 951C 18 69 3C			add #$3C
 17409 951F 8D 2D A1			sta SET_BALL_DIRECTION.ANGLE
 17410 9522 AD 9C A2			lda HLP+1
 17411 9525 69 00			adc #$00
 17412 9527 8D 2E A1			sta SET_BALL_DIRECTION.ANGLE+1
 17413 952A AD 45 97			lda BALL2
 17414 952D 8D 29 A1			sta SET_BALL_DIRECTION.BALL
 17415 9530 AD 46 97			lda BALL2+1
 17416 9533 8D 2A A1			sta SET_BALL_DIRECTION.BALL+1
 17417 9536 20 B8 47			jsr SET_BALL_DIRECTION
 17418
 17419 				; optimize OK (service.pas), line = 3545
 17420
 17421 9539 AD 41 97			lda BALL0
 17422 953C 8D 13 A1			sta SET_BALL_SPEED.BALL
 17423 953F AD 42 97			lda BALL0+1
 17424 9542 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 17425 9545 AD 99 A2			lda T2
 17426 9548 8D 17 A1			sta SET_BALL_SPEED.SPEED
 17427 954B AD 9A A2			lda T2+1
 17428 954E 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 17429 9551 20 D5 45			jsr SET_BALL_SPEED
 17430
 17431 				; optimize OK (service.pas), line = 3546
 17432
 17433 9554 AD 43 97			lda BALL1
 17434 9557 8D 13 A1			sta SET_BALL_SPEED.BALL
 17435 955A AD 44 97			lda BALL1+1
 17436 955D 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 17437 9560 AD 99 A2			lda T2
 17438 9563 8D 17 A1			sta SET_BALL_SPEED.SPEED
 17439 9566 AD 9A A2			lda T2+1
 17440 9569 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 17441 956C 20 D5 45			jsr SET_BALL_SPEED
 17442
 17443 				; optimize OK (service.pas), line = 3547
 17444
 17445 956F AD 45 97			lda BALL2
 17446 9572 8D 13 A1			sta SET_BALL_SPEED.BALL
 17447 9575 AD 46 97			lda BALL2+1
 17448 9578 8D 14 A1			sta SET_BALL_SPEED.BALL+1
 17449 957B AD 99 A2			lda T2
 17450 957E 8D 17 A1			sta SET_BALL_SPEED.SPEED
 17451 9581 AD 9A A2			lda T2+1
 17452 9584 8D 18 A1			sta SET_BALL_SPEED.SPEED+1
 17453 9587 20 D5 45			jsr SET_BALL_SPEED
 17454
 17455 				; optimize OK (service.pas), line = 3549
 17456
 17457 958A A9 00			lda #$00
 17458 958C 8D 1A A0			sta VAUS.LETTER
 17459 958F			l_35A8
 17460
 17461 				; optimize OK (service.pas), line = 3553
 17462
 17463 958F AD 89 A0			lda BALLS_IN_PLAY
 17464 9592 C9 02			cmp #$02
 17465 9594 90 08			jcc l_360B
 17466 9596 A9 00			lda #$00
 17467 9598 8D 7A A0			sta LETT.INCOMING
 17468 959B 8D 7B A0			sta LETT.INCOMING+1
 17469 959E			l_360B
 17470
 17471 				; optimize OK (service.pas), line = 3556
 17472
 17473 959E AD 6A A0			lda CUR_PLAYER
 17474 95A1 0A				asl @
 17475 95A2 0A				asl @
 17476 95A3 A8				tay
 17477 95A4 B9 4F A0			lda adr.SCORE.PLAYER,y
 17478 95A7 8D 4F A2			sta WRITE_SCORE.SC
 17479 95AA B9 50 A0			lda adr.SCORE.PLAYER+1,y
 17480 95AD 8D 50 A2			sta WRITE_SCORE.SC+1
 17481 95B0 B9 51 A0			lda adr.SCORE.PLAYER+2,y
 17482 95B3 8D 51 A2			sta WRITE_SCORE.SC+2
 17483 95B6 B9 52 A0			lda adr.SCORE.PLAYER+3,y
 17484 95B9 8D 52 A2			sta WRITE_SCORE.SC+3
 17485 95BC AC 6A A0			ldy CUR_PLAYER
 17486 95BF B9 92 20			lda adr.POS_DIGIT,y
 17487 95C2 8D 4D A2			sta WRITE_SCORE.PY
 17488 95C5 A9 FD			lda #$FD
 17489 95C7 8D 4B A2			sta WRITE_SCORE.PX
 17490 95CA A9 00			lda #$00
 17491 95CC 8D 4C A2			sta WRITE_SCORE.PX+1
 17492 95CF 8D 4E A2			sta WRITE_SCORE.PY+1
 17493 95D2 20 BE 80			jsr WRITE_SCORE
 17494
 17495 				; optimize OK (service.pas), line = 3559
 17496
 17497 95D5 AD 6A A0			lda CUR_PLAYER
 17498 95D8 0A				asl @
 17499 95D9 0A				asl @
 17500 95DA A8				tay
 17501 95DB				.LOCAL
 17502 95DB B9 52 A0			lda adr.SCORE.PLAYER+3,y
 17503 95DE 38 ED 64 A0			sub SCORE.HISCORE+3
 17504 95E2 D0 22			bne L4
 17505 95E4 B9 51 A0			lda adr.SCORE.PLAYER+2,y
 17506 95E7 CD 63 A0			cmp SCORE.HISCORE+2
 17507 95EA D0 0E			bne L1
 17508 95EC B9 50 A0			lda adr.SCORE.PLAYER+1,y
 17509 95EF CD 62 A0			cmp SCORE.HISCORE+1
 17510 95F2 D0 06			bne L1
 17511 95F4 B9 4F A0			lda adr.SCORE.PLAYER,y
 17512 95F7 CD 61 A0			cmp SCORE.HISCORE
 17513 95FA F0 10		L1	beq L5
 17514 95FC B0 04			bcs L3
 17515 95FE A9 FF			lda #$FF
 17516 9600 D0 0A			bne L5
 17517 9602 A9 01		L3	lda #$01
 17518 9604 D0 06			bne L5
 17519 9606 50 04		L4	bvc L5
 17520 9608 49 FF			eor #$FF
 17521 960A 09 01			ora #$01
 17522 960C			L5
 17523 					.ENDL
 17524 960C 30 49			jmi l_3631
 17525 960E F0 47			jeq l_3631
 17526
 17527 				; optimize OK (service.pas), line = 3562
 17528
 17529 9610 B9 4F A0			lda adr.SCORE.PLAYER,y
 17530 9613 8D 61 A0			sta SCORE.HISCORE
 17531 9616 B9 50 A0			lda adr.SCORE.PLAYER+1,y
 17532 9619 8D 62 A0			sta SCORE.HISCORE+1
 17533 961C B9 51 A0			lda adr.SCORE.PLAYER+2,y
 17534 961F 8D 63 A0			sta SCORE.HISCORE+2
 17535 9622 B9 52 A0			lda adr.SCORE.PLAYER+3,y
 17536 9625 8D 64 A0			sta SCORE.HISCORE+3
 17537
 17538 				; optimize OK (service.pas), line = 3564
 17539
 17540 9628 A9 FD			lda #$FD
 17541 962A 8D 4B A2			sta WRITE_SCORE.PX
 17542 962D A9 00			lda #$00
 17543 962F 8D 4C A2			sta WRITE_SCORE.PX+1
 17544 9632 A9 80			lda #$80
 17545 9634 8D 4D A2			sta WRITE_SCORE.PY
 17546 9637 A9 00			lda #$00
 17547 9639 8D 4E A2			sta WRITE_SCORE.PY+1
 17548 963C AD 61 A0			lda SCORE.HISCORE
 17549 963F 8D 4F A2			sta WRITE_SCORE.SC
 17550 9642 AD 62 A0			lda SCORE.HISCORE+1
 17551 9645 8D 50 A2			sta WRITE_SCORE.SC+1
 17552 9648 AD 63 A0			lda SCORE.HISCORE+2
 17553 964B 8D 51 A2			sta WRITE_SCORE.SC+2
 17554 964E AD 64 A0			lda SCORE.HISCORE+3
 17555 9651 8D 52 A2			sta WRITE_SCORE.SC+3
 17556 9654 20 BE 80			jsr WRITE_SCORE
 17557 9657			l_3631
 17558
 17559 				; optimize OK (service.pas), line = 3571
 17560
 17561 9657 AD 41 97			lda BALL0
 17562 965A 8D F6 A2			sta TEST_BALL.BALL
 17563 965D AD 42 97			lda BALL0+1
 17564 9660 8D F7 A2			sta TEST_BALL.BALL+1
 17565 9663 20 B2 8F			jsr TEST_BALL
 17566
 17567 				; optimize OK (service.pas), line = 3572
 17568
 17569 9666 AD 43 97			lda BALL1
 17570 9669 8D F6 A2			sta TEST_BALL.BALL
 17571 966C AD 44 97			lda BALL1+1
 17572 966F 8D F7 A2			sta TEST_BALL.BALL+1
 17573 9672 20 B2 8F			jsr TEST_BALL
 17574
 17575 				; optimize OK (service.pas), line = 3573
 17576
 17577 9675 AD 45 97			lda BALL2
 17578 9678 8D F6 A2			sta TEST_BALL.BALL
 17579 967B AD 46 97			lda BALL2+1
 17580 967E 8D F7 A2			sta TEST_BALL.BALL+1
 17581 9681 20 B2 8F			jsr TEST_BALL
 17582
 17583 				; optimize OK (service.pas), line = 3614
 17584
 17585 9684 AD B5 A2			lda BALL0.INPLAY
 17586 9687 D0 2B			jne l_3657
 17587
 17588 				; optimize OK (service.pas), line = 3616
 17589
 17590 9689 AC 41 97 84 84 AC + 	mwy BALL0 :bp2
 17591 9693 A0 1B			ldy #$1B
 17592 9695 B9 BA A2 91 84 88 + 	mva:rpl adr.BALL1,y (:bp2),y-
 17593
 17594 				; optimize OK (service.pas), line = 3617
 17595
 17596 969D AC 43 97 84 84 AC + 	mwy BALL1 :bp2
 17597 96A7 A0 1B			ldy #$1B
 17598 96A9 B9 D6 A2 91 84 88 + 	mva:rpl adr.BALL2,y (:bp2),y-
 17599
 17600 				; optimize OK (service.pas), line = 3618
 17601
 17602 96B1 8D ED A2			sta BALL2.INPLAY
 17603 96B4			l_3657
 17604
 17605 				; optimize OK (service.pas), line = 3621
 17606
 17607 96B4 A9 00			lda #$00
 17608 96B6 8D 89 A0			sta BALLS_IN_PLAY
 17609
 17610 				; optimize OK (service.pas), line = 3623
 17611
 17612 96B9 AD B5 A2			lda BALL0.INPLAY
 17613 96BC F0 03			jeq l_3672
 17614 96BE EE 89 A0			inc BALLS_IN_PLAY
 17615 96C1			l_3672
 17616
 17617 				; optimize OK (service.pas), line = 3624
 17618
 17619 96C1 AD D1 A2			lda BALL1.INPLAY
 17620 96C4 F0 03			jeq l_3685
 17621 96C6 EE 89 A0			inc BALLS_IN_PLAY
 17622 96C9			l_3685
 17623
 17624 				; optimize OK (service.pas), line = 3625
 17625
 17626 96C9 AD ED A2			lda BALL2.INPLAY
 17627 96CC F0 03			jeq l_3698
 17628 96CE EE 89 A0			inc BALLS_IN_PLAY
 17629 96D1			l_3698
 17630
 17631 				; optimize OK (service.pas), line = 3628
 17632
 17633 96D1 AD B5 A2			lda BALL0.INPLAY
 17634 96D4 D0 49			jne l_36AE
 17635
 17636 				; optimize OK (service.pas), line = 3630
 17637
 17638 96D6 A9 01			lda #$01
 17639 96D8 8D B6 A2			sta BALL0.LAUNCH
 17640
 17641 				; optimize OK (service.pas), line = 3631
 17642
 17643 96DB AD 41 97			lda BALL0
 17644 96DE 8D 09 A1			sta REMOVE_BALL.BALL
 17645 96E1 AD 42 97			lda BALL0+1
 17646 96E4 8D 0A A1			sta REMOVE_BALL.BALL+1
 17647 96E7 20 72 44			jsr REMOVE_BALL
 17648
 17649 				; optimize FAIL ('DESTROY_VAUS', service.pas), line = 3632
 17650
 17651 96EA 20 5B 79			jsr DESTROY_VAUS
 17652
 17653 				; optimize OK (service.pas), line = 3633
 17654
 17655 96ED AC 6A A0			ldy CUR_PLAYER
 17656 96F0 B9 5E A0			lda adr.SCORE.LIVES,y
 17657 96F3 38 E9 01			sub #$01
 17658 96F6 99 5E A0			sta adr.SCORE.LIVES,y
 17659
 17660 				; optimize OK (service.pas), line = 3634
 17661
 17662 96F9 AD 6A 9E			lda WALL_P
 17663 96FC 85 8E			sta @move.dst
 17664 96FE AD 6A A0			lda CUR_PLAYER
 17665 9701 18 6D 6B 9E			add WALL_P+1
 17666 9705 85 8F			sta @move.dst+1
 17667 9707 AD 6C 9E			lda WALL
 17668 970A 85 8A			sta @move.src
 17669 970C AD 6D 9E			lda WALL+1
 17670 970F 85 8B			sta @move.src+1
 17671 9711 A9 00			lda <256
 17672 9713 85 86			sta @move.cnt
 17673 9715 A9 01			lda >256
 17674 9717 85 87			sta @move.cnt+1
 17675 9719 20 B6 21			jsr @move
 17676
 17677 				; optimize FAIL ('NOSOUND', service.pas), line = 3642
 17678
 17679 971C 20 64 3D			jsr NOSOUND
 17680 971F			l_36AE
 17681 971F			l_3491
 17682
 17683 				; optimize OK (service.pas), line = 3437
 17684
 17685 971F AD 4D A0			lda REMAIN_BLK
 17686 9722 F0 0D			jeq l_3492w
 17687 9724 AD B5 A2			lda BALL0.INPLAY
 17688 9727 F0 08			jeq l_3492w
 17689 9729 AD 69 A0			lda SCORE.ABORTPLAY
 17690 972C D0 03 4C B4 92		jeq l_3492
 17691 9731			l_3492w
 17692
 17693 				; optimize OK (service.pas), line = 3698
 17694
 17695 9731 A9 00			lda #$00
 17696 9733 8D 90 A2			sta RESULT
 17697
 17698 				; optimize OK (service.pas), line = 3699
 17699
 17700 9736 AD 4D A0			lda REMAIN_BLK
 17701 9739 D0 05			jne l_36FC
 17702 973B A9 01			lda #$01
 17703 973D 8D 90 A2			sta RESULT
 17704 9740			l_36FC
 17705 9740			@exit
 17706
 17707 				; ------------------------------------------------------------
 17708
 17709 = A290			RESULT	= DATAORIGIN+$0405
 17710 = A291			X	= DATAORIGIN+$0406
 17711 = A293			Y	= DATAORIGIN+$0408
 17712 = A295			KEY	= DATAORIGIN+$040A
 17713 = A297			T1	= DATAORIGIN+$040C
 17714 = A299			T2	= DATAORIGIN+$040E
 17715 = A29B			HLP	= DATAORIGIN+$0410
 17716 = A29D			CN	= DATAORIGIN+$0412
 17717 = A29E			adr.BALL0	= DATAORIGIN+$0413	; [28] RECORD
 17718 9740			.var BALL0	= adr.BALL0 .word
 17719 = A29E			BALL0.X	= DATAORIGIN+$0413
 17720 = A2A0			BALL0.Y	= DATAORIGIN+$0415
 17721 = A2A2			BALL0.FINEX	= DATAORIGIN+$0417
 17722 = A2A4			BALL0.FINEY	= DATAORIGIN+$0419
 17723 = A2A6			BALL0.OLDX	= DATAORIGIN+$041B
 17724 = A2A8			BALL0.OLDY	= DATAORIGIN+$041D
 17725 = A2AA			BALL0.SPEED	= DATAORIGIN+$041F
 17726 = A2AC			BALL0.FINESPEED	= DATAORIGIN+$0421
 17727 = A2AE			BALL0.SPEEDX	= DATAORIGIN+$0423
 17728 = A2B0			BALL0.SPEEDY	= DATAORIGIN+$0425
 17729 = A2B2			BALL0.SBD	= DATAORIGIN+$0427
 17730 = A2B4			BALL0.BRWHIT	= DATAORIGIN+$0429
 17731 = A2B5			BALL0.INPLAY	= DATAORIGIN+$042A
 17732 = A2B6			BALL0.LAUNCH	= DATAORIGIN+$042B
 17733 = A2B7			BALL0.ONVAUS	= DATAORIGIN+$042C
 17734 = A2B9			BALL0.STM	= DATAORIGIN+$042E
 17735 = A2BA			adr.BALL1	= DATAORIGIN+$042F	; [28] RECORD
 17736 9740			.var BALL1	= adr.BALL1 .word
 17737 = A2BA			BALL1.X	= DATAORIGIN+$042F
 17738 = A2BC			BALL1.Y	= DATAORIGIN+$0431
 17739 = A2BE			BALL1.FINEX	= DATAORIGIN+$0433
 17740 = A2C0			BALL1.FINEY	= DATAORIGIN+$0435
 17741 = A2C2			BALL1.OLDX	= DATAORIGIN+$0437
 17742 = A2C4			BALL1.OLDY	= DATAORIGIN+$0439
 17743 = A2C6			BALL1.SPEED	= DATAORIGIN+$043B
 17744 = A2C8			BALL1.FINESPEED	= DATAORIGIN+$043D
 17745 = A2CA			BALL1.SPEEDX	= DATAORIGIN+$043F
 17746 = A2CC			BALL1.SPEEDY	= DATAORIGIN+$0441
 17747 = A2CE			BALL1.SBD	= DATAORIGIN+$0443
 17748 = A2D0			BALL1.BRWHIT	= DATAORIGIN+$0445
 17749 = A2D1			BALL1.INPLAY	= DATAORIGIN+$0446
 17750 = A2D2			BALL1.LAUNCH	= DATAORIGIN+$0447
 17751 = A2D3			BALL1.ONVAUS	= DATAORIGIN+$0448
 17752 = A2D5			BALL1.STM	= DATAORIGIN+$044A
 17753 = A2D6			adr.BALL2	= DATAORIGIN+$044B	; [28] RECORD
 17754 9740			.var BALL2	= adr.BALL2 .word
 17755 = A2D6			BALL2.X	= DATAORIGIN+$044B
 17756 = A2D8			BALL2.Y	= DATAORIGIN+$044D
 17757 = A2DA			BALL2.FINEX	= DATAORIGIN+$044F
 17758 = A2DC			BALL2.FINEY	= DATAORIGIN+$0451
 17759 = A2DE			BALL2.OLDX	= DATAORIGIN+$0453
 17760 = A2E0			BALL2.OLDY	= DATAORIGIN+$0455
 17761 = A2E2			BALL2.SPEED	= DATAORIGIN+$0457
 17762 = A2E4			BALL2.FINESPEED	= DATAORIGIN+$0459
 17763 = A2E6			BALL2.SPEEDX	= DATAORIGIN+$045B
 17764 = A2E8			BALL2.SPEEDY	= DATAORIGIN+$045D
 17765 = A2EA			BALL2.SBD	= DATAORIGIN+$045F
 17766 = A2EC			BALL2.BRWHIT	= DATAORIGIN+$0461
 17767 = A2ED			BALL2.INPLAY	= DATAORIGIN+$0462
 17768 = A2EE			BALL2.LAUNCH	= DATAORIGIN+$0463
 17769 = A2EF			BALL2.ONVAUS	= DATAORIGIN+$0464
 17770 = A2F1			BALL2.STM	= DATAORIGIN+$0466
 17771
 17772 = A291			@VarData	= X
 17773 = 0061			@VarDataSize	= 97
 17774
 17775 9740 60				rts						; ret
 17776 = 9741 9E A2		BALL0
 17776 = 9743 BA A2		BALL1
 17776 = 9745 D6 A2		BALL2
 17776 				.endl
 17777
 17778 9747			.local	CHOOSE_START_WALL				; FUNCTION
 17779
 17780 				; optimize OK (service.pas), line = 3722
 17781
 17782 9747 A9 01			lda #$01
 17783 9749 8D 00 A3			sta ST
 17784 974C A9 00			lda #$00
 17785 974E 8D 01 A3			sta ST+1
 17786
 17787 				; optimize OK (service.pas), line = 3780
 17788
 17789 9751 AD 00 A3			lda ST
 17790 9754 8D FA A2			sta RESULT
 17791 9757 AD 01 A3			lda ST+1
 17792 975A 8D FB A2			sta RESULT+1
 17793 975D			@exit
 17794
 17795 				; ------------------------------------------------------------
 17796
 17797 = A2FA			RESULT	= DATAORIGIN+$046F
 17798 = 0046			PX	= $46
 17799 = 0064			PY	= $64
 17800 = 0022			DX	= $22
 17801 = 0023			DY	= $23
 17802 = 0013			DDX	= $13
 17803 = 000E			DDY	= $0E
 17804 = A2FC			X	= DATAORIGIN+$0471
 17805 = A2FE			Y	= DATAORIGIN+$0473
 17806 = A300			ST	= DATAORIGIN+$0475
 17807 = A302			OLDX	= DATAORIGIN+$0477
 17808 = A304			OLDY	= DATAORIGIN+$0479
 17809 = A306			NEWX	= DATAORIGIN+$047B
 17810 = A308			NEWY	= DATAORIGIN+$047D
 17811
 17812 = A2FC			@VarData	= X
 17813 = 000E			@VarDataSize	= 14
 17814
 17815 975D 60				rts						; ret
 17816 				.endl
 17817
 17818 975E			.local	SET_START_PARAMETERS				; PROCEDURE
 17819
 17820 				; optimize OK (service.pas), line = 3789
 17821
 17822 975E A9 01			lda #$01
 17823 9760 8D 0A A3			sta X
 17824
 17825 9763			l_371D
 17826 				; --- ForToDoCondition
 17827 9763 AD 0A A3			lda X
 17828 9766 C9 03			cmp #$03
 17829 9768 B0 4E			jcs l_372B
 17830
 17831 				; optimize OK (service.pas), line = 3791
 17832
 17833 976A 0A				asl @
 17834 976B 0A				asl @
 17835 976C A8				tay
 17836 976D A9 00			lda #$00
 17837 976F 99 4F A0			sta adr.SCORE.PLAYER,y
 17838 9772 99 50 A0			sta adr.SCORE.PLAYER+1,y
 17839 9775 99 51 A0			sta adr.SCORE.PLAYER+2,y
 17840 9778 99 52 A0			sta adr.SCORE.PLAYER+3,y
 17841
 17842 				; optimize OK (service.pas), line = 3792
 17843
 17844 977B AC 0A A3			ldy X
 17845 977E A9 05			lda #$05
 17846 9780 99 5E A0			sta adr.SCORE.LIVES,y
 17847
 17848 				; optimize OK (service.pas), line = 3793
 17849
 17850 9783 A9 01			lda #$01
 17851 9785 99 5B A0			sta adr.SCORE.WALL_N,y
 17852
 17853 				; optimize OK (service.pas), line = 3794
 17854
 17855 9788 AD 6A 9E			lda WALL_P
 17856 978B 85 8E			sta @move.dst
 17857 978D AD 0A A3			lda X
 17858 9790 18 6D 6B 9E			add WALL_P+1
 17859 9794 85 8F			sta @move.dst+1
 17860 9796 AD 6E 9E			lda ALL_WALLS
 17861 9799 85 8A			sta @move.src
 17862 979B AD 6F 9E			lda ALL_WALLS+1
 17863 979E 85 8B			sta @move.src+1
 17864 97A0 A9 00			lda <256
 17865 97A2 85 86			sta @move.cnt
 17866 97A4 A9 01			lda >256
 17867 97A6 85 87			sta @move.cnt+1
 17868 97A8 20 B6 21			jsr @move
 17869
 17870 				; optimize OK (service.pas), line = 3796
 17871
 17872 97AB AC 0A A3			ldy X
 17873 97AE A9 00			lda #$00
 17874 97B0 99 66 A0			sta adr.SCORE.ROUNDSEL,y
 17875
 17876 				; --- ForToDoEpilog
 17877 97B3 EE 0A A3			inc X
 17878 97B6 D0 AB			jne l_371D
 17879 97B8			l_372B
 17880
 17881 				; optimize OK (service.pas), line = 3799
 17882
 17883 97B8 A9 01			lda #$01
 17884 97BA 8D 6A A0			sta CUR_PLAYER
 17885
 17886 				; ------------------------------------------------------------
 17887
 17888 = A30A			X	= DATAORIGIN+$047F
 17889
 17890 = A30A			@VarData	= X
 17891 = 0001			@VarDataSize	= 1
 17892
 17893 97BD			@exit
 17894 					.ifdef @new
 17895 					lda <@VarData
 17896 					sta :ztmp
 17897 					lda >@VarData
 17898 					ldy #@VarDataSize-1
 17899 					jmp @FreeMem
 17900 					els
 17901 97BD 60				rts						; ret
 17902 					eif
 17903 				.endl
 17904
 17905 97BE			.local	MAINSCREEN					; FUNCTION
 17906
 17907 				; optimize FAIL ('NOSOUND', service.pas), line = 3859
 17908
 17909 97BE 20 64 3D			jsr NOSOUND
 17910
 17911 				; optimize OK (service.pas), line = 3860
 17912
 17913 97C1 A9 00			lda #$00
 17914 97C3 8D 69 A0			sta SCORE.ABORTPLAY
 17915
 17916 				; optimize OK (service.pas), line = 3871
 17917
 17918 97C6 AD D2 9F			lda PRESENTS.OFS
 17919 97C9 8D 98 A0			sta BLITBOX.SRC
 17920 97CC AD D3 9F			lda PRESENTS.OFS+1
 17921 97CF 8D 99 A0			sta BLITBOX.SRC+1
 17922 97D2 AD D4 9F			lda PRESENTS.OFS+2
 17923 97D5 8D 9A A0			sta BLITBOX.SRC+2
 17924 97D8 AD D5 9F			lda PRESENTS.OFS+3
 17925 97DB 8D 9B A0			sta BLITBOX.SRC+3
 17926 97DE A9 00			lda #$00
 17927 97E0 8D 9C A0			sta BLITBOX.DST
 17928 97E3 A9 50			lda #$50
 17929 97E5 8D 9D A0			sta BLITBOX.DST+1
 17930 97E8 A9 00			lda #$00
 17931 97EA 8D 9E A0			sta BLITBOX.DST+2
 17932 97ED 8D 9F A0			sta BLITBOX.DST+3
 17933 97F0 A9 40			lda #$40
 17934 97F2 8D A0 A0			sta BLITBOX.W
 17935 97F5 A9 01			lda #$01
 17936 97F7 8D A1 A0			sta BLITBOX.W+1
 17937 97FA A9 C8			lda #$C8
 17938 97FC 8D A2 A0			sta BLITBOX.H
 17939 97FF 20 6A 3B			jsr BLITBOX
 17940
 17941 				; optimize OK (service.pas), line = 3909
 17942
 17943 9802 A9 01			lda #$01
 17944 9804 8D 0B A3			sta RESULT
 17945 9807 A9 00			lda #$00
 17946 9809 8D 0C A3			sta RESULT+1
 17947 980C			@exit
 17948
 17949 				; ------------------------------------------------------------
 17950
 17951 = A30B			RESULT	= DATAORIGIN+$0480
 17952 = A30D			X	= DATAORIGIN+$0482
 17953 = A30F			Y	= DATAORIGIN+$0484
 17954 = A311			Z	= DATAORIGIN+$0486
 17955 = A313			K	= DATAORIGIN+$0488
 17956 = A315			IK	= DATAORIGIN+$048A
 17957
 17958 = A30D			@VarData	= X
 17959 = 000A			@VarDataSize	= 10
 17960
 17961 980C 60				rts						; ret
 17962 				.endl
 17963
 17964 980D			.local	START_GAME					; PROCEDURE
 17965
 17966 				; optimize FAIL ('SET_START_PARAMETERS', service.pas), line = 3917
 17967
 17968 980D 20 5E 97			jsr SET_START_PARAMETERS
 17969
 17970 				; optimize OK (service.pas), line = 3918
 17971
 17972 9810 AD 18 A3			lda PLAYERS+1
 17973 9813 D0 05			bne @+
 17974 9815 AD 17 A3			lda PLAYERS
 17975 9818 C9 01			cmp #$01
 17976 				@
 17977 981A D0 05			jne l_378A
 17978 981C A9 00			lda #$00
 17979 981E 8D 60 A0			sta adr.SCORE.LIVES+$02
 17980 9821			l_378A
 17981
 17982 				; optimize OK (service.pas), line = 3921
 17983
 17984 9821 A9 00			lda #$00
 17985 9823 8D 72 A0			sta TRAINER
 17986
 17987 				; optimize OK (service.pas), line = 3922
 17988
 17989 9826 AD 6C 9E			lda WALL
 17990 9829 85 8E			sta @move.dst
 17991 982B AD 6D 9E			lda WALL+1
 17992 982E 85 8F			sta @move.dst+1
 17993 9830 AD 6A 9E			lda WALL_P
 17994 9833 85 8A			sta @move.src
 17995 9835 AD 6A A0			lda CUR_PLAYER
 17996 9838 18 6D 6B 9E			add WALL_P+1
 17997 983C 85 8B			sta @move.src+1
 17998 983E A9 00			lda <256
 17999 9840 85 86			sta @move.cnt
 18000 9842 A9 01			lda >256
 18001 9844 85 87			sta @move.cnt+1
 18002 9846 20 B6 21			jsr @move
 18003
 18004 				; optimize FAIL ('SET_WALL', service.pas), line = 3926
 18005
 18006 9849 20 8D 5D			jsr SET_WALL
 18007
 18008 				; optimize OK (service.pas), line = 3928
 18009
 18010 984C AD 44 9E			lda PATTERN
 18011 984F 8D 06 A2			sta FILL_PICTURE_WITH_PATTERN.PATT
 18012 9852 AD 45 9E			lda PATTERN+1
 18013 9855 8D 07 A2			sta FILL_PICTURE_WITH_PATTERN.PATT+1
 18014 9858 20 80 77			jsr FILL_PICTURE_WITH_PATTERN
 18015
 18016 				; optimize FAIL ('SHOWBTMPICTURE', service.pas), line = 3929
 18017
 18018 985B E8				inx
 18019 985C AD 24 9E 95 96		mva PLAYSCREEN :STACKORIGIN,x
 18020 9861 AD 25 9E 95 A6		mva PLAYSCREEN+1 :STACKORIGIN+STACKWIDTH,x
 18021 9866 20 A2 43			jsr SHOWBTMPICTURE
 18022
 18023 				; optimize OK (service.pas), line = 3936
 18024
 18025 9869 AD 53 A0			lda adr.SCORE.PLAYER+$04
 18026 986C 8D 4F A2			sta WRITE_SCORE.SC
 18027 986F AD 54 A0			lda adr.SCORE.PLAYER+1+$04
 18028 9872 8D 50 A2			sta WRITE_SCORE.SC+1
 18029 9875 AD 55 A0			lda adr.SCORE.PLAYER+2+$04
 18030 9878 8D 51 A2			sta WRITE_SCORE.SC+2
 18031 987B AD 56 A0			lda adr.SCORE.PLAYER+3+$04
 18032 987E 8D 52 A2			sta WRITE_SCORE.SC+3
 18033 9881 A9 FD			lda #$FD
 18034 9883 8D 4B A2			sta WRITE_SCORE.PX
 18035 9886 A9 00			lda #$00
 18036 9888 8D 4C A2			sta WRITE_SCORE.PX+1
 18037 988B A9 3C			lda #$3C
 18038 988D 8D 4D A2			sta WRITE_SCORE.PY
 18039 9890 A9 00			lda #$00
 18040 9892 8D 4E A2			sta WRITE_SCORE.PY+1
 18041 9895 20 BE 80			jsr WRITE_SCORE
 18042
 18043 				; optimize OK (service.pas), line = 3937
 18044
 18045 9898 AD 57 A0			lda adr.SCORE.PLAYER+$08
 18046 989B 8D 4F A2			sta WRITE_SCORE.SC
 18047 989E AD 58 A0			lda adr.SCORE.PLAYER+1+$08
 18048 98A1 8D 50 A2			sta WRITE_SCORE.SC+1
 18049 98A4 AD 59 A0			lda adr.SCORE.PLAYER+2+$08
 18050 98A7 8D 51 A2			sta WRITE_SCORE.SC+2
 18051 98AA AD 5A A0			lda adr.SCORE.PLAYER+3+$08
 18052 98AD 8D 52 A2			sta WRITE_SCORE.SC+3
 18053 98B0 A9 FD			lda #$FD
 18054 98B2 8D 4B A2			sta WRITE_SCORE.PX
 18055 98B5 A9 00			lda #$00
 18056 98B7 8D 4C A2			sta WRITE_SCORE.PX+1
 18057 98BA A9 5D			lda #$5D
 18058 98BC 8D 4D A2			sta WRITE_SCORE.PY
 18059 98BF A9 00			lda #$00
 18060 98C1 8D 4E A2			sta WRITE_SCORE.PY+1
 18061 98C4 20 BE 80			jsr WRITE_SCORE
 18062
 18063 				; optimize OK (service.pas), line = 3938
 18064
 18065 98C7 A9 FD			lda #$FD
 18066 98C9 8D 4B A2			sta WRITE_SCORE.PX
 18067 98CC A9 00			lda #$00
 18068 98CE 8D 4C A2			sta WRITE_SCORE.PX+1
 18069 98D1 A9 80			lda #$80
 18070 98D3 8D 4D A2			sta WRITE_SCORE.PY
 18071 98D6 A9 00			lda #$00
 18072 98D8 8D 4E A2			sta WRITE_SCORE.PY+1
 18073 98DB AD 61 A0			lda SCORE.HISCORE
 18074 98DE 8D 4F A2			sta WRITE_SCORE.SC
 18075 98E1 AD 62 A0			lda SCORE.HISCORE+1
 18076 98E4 8D 50 A2			sta WRITE_SCORE.SC+1
 18077 98E7 AD 63 A0			lda SCORE.HISCORE+2
 18078 98EA 8D 51 A2			sta WRITE_SCORE.SC+2
 18079 98ED AD 64 A0			lda SCORE.HISCORE+3
 18080 98F0 8D 52 A2			sta WRITE_SCORE.SC+3
 18081 98F3 20 BE 80			jsr WRITE_SCORE
 18082
 18083 				; --- RepeatUntilProlog
 18084 98F6			l_37B9
 18085
 18086 				; --- RepeatUntilProlog
 18087 98F6			l_37BA
 18088
 18089 				; optimize OK (service.pas), line = 3948
 18090
 18091 98F6 AC 6A A0			ldy CUR_PLAYER
 18092 98F9 B9 66 A0			lda adr.SCORE.ROUNDSEL,y
 18093 98FC D0 77			jne l_37CC
 18094
 18095 				; optimize FAIL (1, service.pas), line = 3950
 18096
 18097 98FE E8				inx
 18098 98FF AD 6A A0 95 96		mva CUR_PLAYER :STACKORIGIN,x
 18099 9904 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
 18100 9908 20 47 97			jsr CHOOSE_START_WALL
 18101 990B E8				inx
 18102 990C AD FA A2 95 96		mva CHOOSE_START_WALL.RESULT :STACKORIGIN,x
 18103 9911 AD FB A2 95 A6		mva CHOOSE_START_WALL.RESULT+1 :STACKORIGIN+STACKWIDTH,x
 18104 9916 B4 95			ldy :STACKORIGIN-1,x
 18105 9918 B5 96			lda :STACKORIGIN,x
 18106 991A 99 5B A0			sta adr.SCORE.WALL_N,y
 18107 991D CA				dex
 18108 991E CA				dex
 18109
 18110 				; optimize OK (service.pas), line = 3953
 18111
 18112 991F A9 00			lda #$00
 18113 9921 85 9F			sta :STACKORIGIN+9
 18114 9923 AD 6A A0			lda CUR_PLAYER
 18115 9926 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18116 9928 AC 6A A0			ldy CUR_PLAYER
 18117 992B B9 5B A0			lda adr.SCORE.WALL_N,y
 18118 992E 38 E9 01			sub #$01
 18119 9931 85 86			sta :eax
 18120 9933 A9 00			lda #$00
 18121 9935 E9 00			sbc #$00
 18122 9937 85 87			sta :eax+1
 18123 9939 A9 00			lda #$00
 18124 993B 85 8E			sta :ecx
 18125 993D A9 01			lda #$01
 18126 993F 85 8F			sta :ecx+1
 18127 					.ifdef fmulinit
 18128 					fmulu_16
 18129 					els
 18130 9941 20 0B 23			imulCX
 18131 					eif
 18132 9944 AD 6A 9E			lda WALL_P
 18133 9947 18 65 9F			add :STACKORIGIN+9
 18134 994A 85 8E			sta @move.dst
 18135 994C AD 6B 9E			lda WALL_P+1
 18136 994F 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18137 9951 85 8F			sta @move.dst+1
 18138 9953 A5 86			lda :eax
 18139 9955 18 6D 6E 9E			add ALL_WALLS
 18140 9959 85 8A			sta @move.src
 18141 995B A5 87			lda :eax+1
 18142 995D 6D 6F 9E			adc ALL_WALLS+1
 18143 9960 85 8B			sta @move.src+1
 18144 9962 A9 00			lda <256
 18145 9964 85 86			sta @move.cnt
 18146 9966 A9 01			lda >256
 18147 9968 85 87			sta @move.cnt+1
 18148 996A 20 B6 21			jsr @move
 18149
 18150 				; optimize OK (service.pas), line = 3957
 18151
 18152 996D AC 6A A0			ldy CUR_PLAYER
 18153 9970 A9 01			lda #$01
 18154 9972 99 66 A0			sta adr.SCORE.ROUNDSEL,y
 18155 9975			l_37CC
 18156
 18157 				; optimize OK (service.pas), line = 3961
 18158
 18159 9975 AD 6C 9E			lda WALL
 18160 9978 85 8E			sta @move.dst
 18161 997A AD 6D 9E			lda WALL+1
 18162 997D 85 8F			sta @move.dst+1
 18163 997F AD 6A 9E			lda WALL_P
 18164 9982 85 8A			sta @move.src
 18165 9984 AD 6A A0			lda CUR_PLAYER
 18166 9987 18 6D 6B 9E			add WALL_P+1
 18167 998B 85 8B			sta @move.src+1
 18168 998D A9 00			lda <256
 18169 998F 85 86			sta @move.cnt
 18170 9991 A9 01			lda >256
 18171 9993 85 87			sta @move.cnt+1
 18172 9995 20 B6 21			jsr @move
 18173
 18174 				; optimize FAIL ('SET_WALL', service.pas), line = 3962
 18175
 18176 9998 20 8D 5D			jsr SET_WALL
 18177
 18178 				; optimize FAIL ('BOUNCEBALL', service.pas), line = 3967
 18179
 18180 999B 20 39 8F			jsr BOUNCEBALL
 18181 999E AD 90 A2			lda BOUNCEBALL.RESULT
 18182 99A1 8D 19 A3			sta NWALL
 18183
 18184 				; optimize OK (service.pas), line = 3970
 18185
 18186 99A4 F0 6A			jeq l_381A
 18187
 18188 				; optimize OK (service.pas), line = 3973
 18189
 18190 99A6 AC 6A A0			ldy CUR_PLAYER
 18191 99A9 B9 5B A0			lda adr.SCORE.WALL_N,y
 18192 99AC 18 69 01			add #$01
 18193 99AF 99 5B A0			sta adr.SCORE.WALL_N,y
 18194
 18195 				; optimize OK (service.pas), line = 3976
 18196
 18197 99B2 AD 4E A0			lda TOTALWALL
 18198 99B5 D9 5B A0			cmp adr.SCORE.WALL_N,y
 18199 99B8 B0 05			jcs l_3836
 18200
 18201 				; optimize OK (service.pas), line = 3977
 18202
 18203 99BA A9 01			lda #$01
 18204 99BC 99 5B A0			sta adr.SCORE.WALL_N,y
 18205 99BF			l_3836
 18206
 18207 				; optimize OK (service.pas), line = 3980
 18208
 18209 99BF A9 00			lda #$00
 18210 99C1 85 9F			sta :STACKORIGIN+9
 18211 99C3 AD 6A A0			lda CUR_PLAYER
 18212 99C6 85 AF			sta :STACKORIGIN+STACKWIDTH+9
 18213 99C8 AC 6A A0			ldy CUR_PLAYER
 18214 99CB B9 5B A0			lda adr.SCORE.WALL_N,y
 18215 99CE 38 E9 01			sub #$01
 18216 99D1 85 86			sta :eax
 18217 99D3 A9 00			lda #$00
 18218 99D5 E9 00			sbc #$00
 18219 99D7 85 87			sta :eax+1
 18220 99D9 A9 00			lda #$00
 18221 99DB 85 8E			sta :ecx
 18222 99DD A9 01			lda #$01
 18223 99DF 85 8F			sta :ecx+1
 18224 					.ifdef fmulinit
 18225 					fmulu_16
 18226 					els
 18227 99E1 20 0B 23			imulCX
 18228 					eif
 18229 99E4 AD 6A 9E			lda WALL_P
 18230 99E7 18 65 9F			add :STACKORIGIN+9
 18231 99EA 85 8E			sta @move.dst
 18232 99EC AD 6B 9E			lda WALL_P+1
 18233 99EF 65 AF			adc :STACKORIGIN+STACKWIDTH+9
 18234 99F1 85 8F			sta @move.dst+1
 18235 99F3 A5 86			lda :eax
 18236 99F5 18 6D 6E 9E			add ALL_WALLS
 18237 99F9 85 8A			sta @move.src
 18238 99FB A5 87			lda :eax+1
 18239 99FD 6D 6F 9E			adc ALL_WALLS+1
 18240 9A00 85 8B			sta @move.src+1
 18241 9A02 A9 00			lda <256
 18242 9A04 85 86			sta @move.cnt
 18243 9A06 A9 01			lda >256
 18244 9A08 85 87			sta @move.cnt+1
 18245 9A0A 20 B6 21			jsr @move
 18246 9A0D 4C 1B 9A			jmp l_3868
 18247 9A10			l_381A
 18248
 18249 				; optimize OK (service.pas), line = 3986
 18250
 18251 9A10 AC 6A A0			ldy CUR_PLAYER
 18252 9A13 B9 5E A0			lda adr.SCORE.LIVES,y
 18253 9A16 D0 03			jne l_387D
 18254 9A18 20 58 79			jsr GAME_OVER
 18255 9A1B			l_3868
 18256 9A1B			l_387D
 18257
 18258 				; optimize OK (service.pas), line = 3991
 18259
 18260 9A1B AD 19 A3			lda NWALL
 18261 9A1E F0 03 4C F6 98		jne l_37BA
 18262
 18263 				; optimize FAIL (0, service.pas), line = 3994
 18264
 18265 9A23 EE 6A A0			inc CUR_PLAYER
 18266
 18267 				; optimize OK (service.pas), line = 3995
 18268
 18269 9A26 AD 17 A3			lda PLAYERS
 18270 9A29 CD 6A A0			cmp CUR_PLAYER
 18271 9A2C AD 18 A3			lda PLAYERS+1
 18272 9A2F E9 00			sbc #$00
 18273 9A31 50 02			svc
 18274 9A33 49 80			eor #$80
 18275 9A35 10 05			jpl l_38A5
 18276 9A37 A9 01			lda #$01
 18277 9A39 8D 6A A0			sta CUR_PLAYER
 18278 9A3C			l_38A5
 18279
 18280 				; optimize OK (service.pas), line = 4001
 18281
 18282 9A3C AC 6A A0			ldy CUR_PLAYER
 18283 9A3F B9 5E A0			lda adr.SCORE.LIVES,y
 18284 9A42 D0 09			jne l_38C1
 18285 9A44 A9 03			lda #$03
 18286 9A46 38 ED 6A A0			sub CUR_PLAYER
 18287 9A4A 8D 6A A0			sta CUR_PLAYER
 18288 9A4D			l_38C1
 18289
 18290 				; optimize OK (service.pas), line = 4006
 18291
 18292 9A4D A0 01			ldy #1
 18293 9A4F AD 5F A0			lda adr.SCORE.LIVES+$01
 18294 9A52 F0 01			beq @+
 18295 9A54 88				dey
 18296 				@
 18297 9A55 84 9F			sty :STACKORIGIN+9
 18298 9A57 A0 01			ldy #1
 18299 9A59 AD 60 A0			lda adr.SCORE.LIVES+$02
 18300 9A5C F0 01			beq @+
 18301 9A5E 88				dey
 18302 				@
 18303 9A5F 98				tya
 18304 9A60 25 9F			and :STACKORIGIN+9
 18305 9A62 0D 69 A0			ora SCORE.ABORTPLAY
 18306 9A65 D0 03 4C F6 98		jeq l_37B9
 18307
 18308 				; ------------------------------------------------------------
 18309
 18310 = A317			PLAYERS	= DATAORIGIN+$048C
 18311 = A319			NWALL	= DATAORIGIN+$048E
 18312
 18313 = A317			@VarData	= PLAYERS
 18314 = 0003			@VarDataSize	= 3
 18315
 18316 9A6A			@exit
 18317 					.ifdef @new
 18318 					lda <@VarData
 18319 					sta :ztmp
 18320 					lda >@VarData
 18321 					ldy #@VarDataSize-1
 18322 					jmp @FreeMem
 18323 					els
 18324 9A6A 60				rts						; ret
 18325 					eif
 18326 				.endl
 18327
 18328 9A6B			.local	INIT_GAME					; PROCEDURE
 18329
 18330 				; optimize FAIL ('SYSTEM.RANDOMIZE', arkanoid_vbxe.pas), line = 123
 18331
 18332 9A6B 20 05 33			jsr SYSTEM.RANDOMIZE
 18333
 18334 				; optimize FAIL ('INITSVGA', arkanoid_vbxe.pas), line = 125
 18335
 18336 9A6E 20 11 3E			jsr INITSVGA
 18337
 18338 				; optimize FAIL ('INITROWARRAY', arkanoid_vbxe.pas), line = 126
 18339
 18340 9A71 20 CF 3D			jsr INITROWARRAY
 18341
 18342 				; optimize OK (btm.inc), line = 1
 18343
 18344 9A74 A9 00			lda #$00
 18345 9A76 8D 9A 9F			sta PLAYSCREEN.OFS
 18346 9A79 A9 5E			lda #$5E
 18347 9A7B 8D 9B 9F			sta PLAYSCREEN.OFS+1
 18348 9A7E A9 01			lda #$01
 18349 9A80 8D 9C 9F			sta PLAYSCREEN.OFS+2
 18350 9A83 A9 00			lda #$00
 18351 9A85 8D 9D 9F			sta PLAYSCREEN.OFS+3
 18352
 18353 				; optimize OK (btm.inc), line = 2
 18354
 18355 9A88 A9 40			lda #$40
 18356 9A8A 8D 96 9F			sta PLAYSCREEN.WIDTH
 18357 9A8D A9 01			lda #$01
 18358 9A8F 8D 97 9F			sta PLAYSCREEN.WIDTH+1
 18359
 18360 				; optimize OK (btm.inc), line = 3
 18361
 18362 9A92 A9 C8			lda #$C8
 18363 9A94 8D 98 9F			sta PLAYSCREEN.HEIGHT
 18364 9A97 A9 00			lda #$00
 18365 9A99 8D 99 9F			sta PLAYSCREEN.HEIGHT+1
 18366
 18367 				; optimize OK (btm.inc), line = 5
 18368
 18369 9A9C 8D D2 9F			sta PRESENTS.OFS
 18370 9A9F A9 58			lda #$58
 18371 9AA1 8D D3 9F			sta PRESENTS.OFS+1
 18372 9AA4 A9 02			lda #$02
 18373 9AA6 8D D4 9F			sta PRESENTS.OFS+2
 18374 9AA9 A9 00			lda #$00
 18375 9AAB 8D D5 9F			sta PRESENTS.OFS+3
 18376
 18377 				; optimize OK (btm.inc), line = 6
 18378
 18379 9AAE A9 40			lda #$40
 18380 9AB0 8D CE 9F			sta PRESENTS.WIDTH
 18381 9AB3 A9 01			lda #$01
 18382 9AB5 8D CF 9F			sta PRESENTS.WIDTH+1
 18383
 18384 				; optimize OK (btm.inc), line = 7
 18385
 18386 9AB8 A9 C8			lda #$C8
 18387 9ABA 8D D0 9F			sta PRESENTS.HEIGHT
 18388 9ABD A9 00			lda #$00
 18389 9ABF 8D D1 9F			sta PRESENTS.HEIGHT+1
 18390
 18391 				; optimize OK (btm.inc), line = 9
 18392
 18393 9AC2 8D C2 9F			sta EXPLOSION.OFS
 18394 9AC5 A9 52			lda #$52
 18395 9AC7 8D C3 9F			sta EXPLOSION.OFS+1
 18396 9ACA A9 03			lda #$03
 18397 9ACC 8D C4 9F			sta EXPLOSION.OFS+2
 18398 9ACF A9 00			lda #$00
 18399 9AD1 8D C5 9F			sta EXPLOSION.OFS+3
 18400
 18401 				; optimize OK (btm.inc), line = 10
 18402
 18403 9AD4 A9 2A			lda #$2A
 18404 9AD6 8D BE 9F			sta EXPLOSION.WIDTH
 18405 9AD9 A9 00			lda #$00
 18406 9ADB 8D BF 9F			sta EXPLOSION.WIDTH+1
 18407
 18408 				; optimize OK (btm.inc), line = 11
 18409
 18410 9ADE A9 72			lda #$72
 18411 9AE0 8D C0 9F			sta EXPLOSION.HEIGHT
 18412 9AE3 A9 00			lda #$00
 18413 9AE5 8D C1 9F			sta EXPLOSION.HEIGHT+1
 18414
 18415 				; optimize OK (btm.inc), line = 13
 18416
 18417 9AE8 A9 B4			lda #$B4
 18418 9AEA 8D CA 9F			sta NEWVAUS.OFS
 18419 9AED A9 64			lda #$64
 18420 9AEF 8D CB 9F			sta NEWVAUS.OFS+1
 18421 9AF2 A9 03			lda #$03
 18422 9AF4 8D CC 9F			sta NEWVAUS.OFS+2
 18423 9AF7 A9 00			lda #$00
 18424 9AF9 8D CD 9F			sta NEWVAUS.OFS+3
 18425
 18426 				; optimize OK (btm.inc), line = 14
 18427
 18428 9AFC A9 29			lda #$29
 18429 9AFE 8D C6 9F			sta NEWVAUS.WIDTH
 18430 9B01 A9 00			lda #$00
 18431 9B03 8D C7 9F			sta NEWVAUS.WIDTH+1
 18432
 18433 				; optimize OK (btm.inc), line = 15
 18434
 18435 9B06 A9 C1			lda #$C1
 18436 9B08 8D C8 9F			sta NEWVAUS.HEIGHT
 18437 9B0B A9 00			lda #$00
 18438 9B0D 8D C9 9F			sta NEWVAUS.HEIGHT+1
 18439
 18440 				; optimize OK (btm.inc), line = 17
 18441
 18442 9B10 A9 9D			lda #$9D
 18443 9B12 8D DA 9F			sta SOUNDFX.OFS
 18444 9B15 A9 83			lda #$83
 18445 9B17 8D DB 9F			sta SOUNDFX.OFS+1
 18446 9B1A A9 03			lda #$03
 18447 9B1C 8D DC 9F			sta SOUNDFX.OFS+2
 18448 9B1F A9 00			lda #$00
 18449 9B21 8D DD 9F			sta SOUNDFX.OFS+3
 18450
 18451 				; optimize OK (btm.inc), line = 18
 18452
 18453 9B24 A9 15			lda #$15
 18454 9B26 8D D6 9F			sta SOUNDFX.WIDTH
 18455 9B29 A9 00			lda #$00
 18456 9B2B 8D D7 9F			sta SOUNDFX.WIDTH+1
 18457
 18458 				; optimize OK (btm.inc), line = 19
 18459
 18460 9B2E A9 26			lda #$26
 18461 9B30 8D D8 9F			sta SOUNDFX.HEIGHT
 18462 9B33 A9 00			lda #$00
 18463 9B35 8D D9 9F			sta SOUNDFX.HEIGHT+1
 18464
 18465 				; optimize OK (btm.inc), line = 21
 18466
 18467 9B38 A9 BB			lda #$BB
 18468 9B3A 8D E2 9F			sta SHINEWALL.OFS
 18469 9B3D A9 86			lda #$86
 18470 9B3F 8D E3 9F			sta SHINEWALL.OFS+1
 18471 9B42 A9 03			lda #$03
 18472 9B44 8D E4 9F			sta SHINEWALL.OFS+2
 18473 9B47 A9 00			lda #$00
 18474 9B49 8D E5 9F			sta SHINEWALL.OFS+3
 18475
 18476 				; optimize OK (btm.inc), line = 22
 18477
 18478 9B4C A9 10			lda #$10
 18479 9B4E 8D DE 9F			sta SHINEWALL.WIDTH
 18480 9B51 A9 00			lda #$00
 18481 9B53 8D DF 9F			sta SHINEWALL.WIDTH+1
 18482
 18483 				; optimize OK (btm.inc), line = 23
 18484
 18485 9B56 A9 50			lda #$50
 18486 9B58 8D E0 9F			sta SHINEWALL.HEIGHT
 18487 9B5B A9 00			lda #$00
 18488 9B5D 8D E1 9F			sta SHINEWALL.HEIGHT+1
 18489
 18490 				; optimize OK (btm.inc), line = 25
 18491
 18492 9B60 A9 BB			lda #$BB
 18493 9B62 8D EA 9F			sta MINIVAUS.OFS
 18494 9B65 A9 8B			lda #$8B
 18495 9B67 8D EB 9F			sta MINIVAUS.OFS+1
 18496 9B6A A9 03			lda #$03
 18497 9B6C 8D EC 9F			sta MINIVAUS.OFS+2
 18498 9B6F A9 00			lda #$00
 18499 9B71 8D ED 9F			sta MINIVAUS.OFS+3
 18500
 18501 				; optimize OK (btm.inc), line = 26
 18502
 18503 9B74 A9 14			lda #$14
 18504 9B76 8D E6 9F			sta MINIVAUS.WIDTH
 18505 9B79 A9 00			lda #$00
 18506 9B7B 8D E7 9F			sta MINIVAUS.WIDTH+1
 18507
 18508 				; optimize OK (btm.inc), line = 27
 18509
 18510 9B7E A9 05			lda #$05
 18511 9B80 8D E8 9F			sta MINIVAUS.HEIGHT
 18512 9B83 A9 00			lda #$00
 18513 9B85 8D E9 9F			sta MINIVAUS.HEIGHT+1
 18514
 18515 				; optimize OK (btm.inc), line = 29
 18516
 18517 9B88 A9 1F			lda #$1F
 18518 9B8A 8D F2 9F			sta LEVELSEL.OFS
 18519 9B8D A9 8C			lda #$8C
 18520 9B8F 8D F3 9F			sta LEVELSEL.OFS+1
 18521 9B92 A9 03			lda #$03
 18522 9B94 8D F4 9F			sta LEVELSEL.OFS+2
 18523 9B97 A9 00			lda #$00
 18524 9B99 8D F5 9F			sta LEVELSEL.OFS+3
 18525
 18526 				; optimize OK (btm.inc), line = 30
 18527
 18528 9B9C A9 15			lda #$15
 18529 9B9E 8D EE 9F			sta LEVELSEL.WIDTH
 18530 9BA1 A9 00			lda #$00
 18531 9BA3 8D EF 9F			sta LEVELSEL.WIDTH+1
 18532
 18533 				; optimize OK (btm.inc), line = 31
 18534
 18535 9BA6 A9 5F			lda #$5F
 18536 9BA8 8D F0 9F			sta LEVELSEL.HEIGHT
 18537 9BAB A9 00			lda #$00
 18538 9BAD 8D F1 9F			sta LEVELSEL.HEIGHT+1
 18539
 18540 				; optimize OK (btm.inc), line = 33
 18541
 18542 9BB0 A9 EA			lda #$EA
 18543 9BB2 8D FA 9F			sta LETTERS.OFS
 18544 9BB5 A9 93			lda #$93
 18545 9BB7 8D FB 9F			sta LETTERS.OFS+1
 18546 9BBA A9 03			lda #$03
 18547 9BBC 8D FC 9F			sta LETTERS.OFS+2
 18548 9BBF A9 00			lda #$00
 18549 9BC1 8D FD 9F			sta LETTERS.OFS+3
 18550
 18551 				; optimize OK (btm.inc), line = 34
 18552
 18553 9BC4 A9 80			lda #$80
 18554 9BC6 8D F6 9F			sta LETTERS.WIDTH
 18555 9BC9 A9 00			lda #$00
 18556 9BCB 8D F7 9F			sta LETTERS.WIDTH+1
 18557
 18558 				; optimize OK (btm.inc), line = 35
 18559
 18560 9BCE A9 38			lda #$38
 18561 9BD0 8D F8 9F			sta LETTERS.HEIGHT
 18562 9BD3 A9 00			lda #$00
 18563 9BD5 8D F9 9F			sta LETTERS.HEIGHT+1
 18564
 18565 				; optimize OK (btm.inc), line = 37
 18566
 18567 9BD8 A9 EA			lda #$EA
 18568 9BDA 8D AA 9F			sta NORMAL.OFS
 18569 9BDD A9 AF			lda #$AF
 18570 9BDF 8D AB 9F			sta NORMAL.OFS+1
 18571 9BE2 A9 03			lda #$03
 18572 9BE4 8D AC 9F			sta NORMAL.OFS+2
 18573 9BE7 A9 00			lda #$00
 18574 9BE9 8D AD 9F			sta NORMAL.OFS+3
 18575
 18576 				; optimize OK (btm.inc), line = 38
 18577
 18578 9BEC A9 20			lda #$20
 18579 9BEE 8D A6 9F			sta NORMAL.WIDTH
 18580 9BF1 A9 00			lda #$00
 18581 9BF3 8D A7 9F			sta NORMAL.WIDTH+1
 18582
 18583 				; optimize OK (btm.inc), line = 39
 18584
 18585 9BF6 A9 07			lda #$07
 18586 9BF8 8D A8 9F			sta NORMAL.HEIGHT
 18587 9BFB A9 00			lda #$00
 18588 9BFD 8D A9 9F			sta NORMAL.HEIGHT+1
 18589
 18590 				; optimize OK (btm.inc), line = 41
 18591
 18592 9C00 A9 CA			lda #$CA
 18593 9C02 8D BA 9F			sta LASERS.OFS
 18594 9C05 A9 B0			lda #$B0
 18595 9C07 8D BB 9F			sta LASERS.OFS+1
 18596 9C0A A9 03			lda #$03
 18597 9C0C 8D BC 9F			sta LASERS.OFS+2
 18598 9C0F A9 00			lda #$00
 18599 9C11 8D BD 9F			sta LASERS.OFS+3
 18600
 18601 				; optimize OK (btm.inc), line = 42
 18602
 18603 9C14 A9 20			lda #$20
 18604 9C16 8D B6 9F			sta LASERS.WIDTH
 18605 9C19 A9 00			lda #$00
 18606 9C1B 8D B7 9F			sta LASERS.WIDTH+1
 18607
 18608 				; optimize OK (btm.inc), line = 43
 18609
 18610 9C1E A9 07			lda #$07
 18611 9C20 8D B8 9F			sta LASERS.HEIGHT
 18612 9C23 A9 00			lda #$00
 18613 9C25 8D B9 9F			sta LASERS.HEIGHT+1
 18614
 18615 				; optimize OK (btm.inc), line = 45
 18616
 18617 9C28 A9 AA			lda #$AA
 18618 9C2A 8D B2 9F			sta ENLARGED.OFS
 18619 9C2D A9 B1			lda #$B1
 18620 9C2F 8D B3 9F			sta ENLARGED.OFS+1
 18621 9C32 A9 03			lda #$03
 18622 9C34 8D B4 9F			sta ENLARGED.OFS+2
 18623 9C37 A9 00			lda #$00
 18624 9C39 8D B5 9F			sta ENLARGED.OFS+3
 18625
 18626 				; optimize OK (btm.inc), line = 46
 18627
 18628 9C3C A9 40			lda #$40
 18629 9C3E 8D AE 9F			sta ENLARGED.WIDTH
 18630 9C41 A9 00			lda #$00
 18631 9C43 8D AF 9F			sta ENLARGED.WIDTH+1
 18632
 18633 				; optimize OK (btm.inc), line = 47
 18634
 18635 9C46 A9 07			lda #$07
 18636 9C48 8D B0 9F			sta ENLARGED.HEIGHT
 18637 9C4B A9 00			lda #$00
 18638 9C4D 8D B1 9F			sta ENLARGED.HEIGHT+1
 18639
 18640 				; optimize OK (btm.inc), line = 49
 18641
 18642 9C50 A9 6A			lda #$6A
 18643 9C52 8D 02 A0			sta SHOOTS.OFS
 18644 9C55 A9 B3			lda #$B3
 18645 9C57 8D 03 A0			sta SHOOTS.OFS+1
 18646 9C5A A9 03			lda #$03
 18647 9C5C 8D 04 A0			sta SHOOTS.OFS+2
 18648 9C5F A9 00			lda #$00
 18649 9C61 8D 05 A0			sta SHOOTS.OFS+3
 18650
 18651 				; optimize OK (btm.inc), line = 50
 18652
 18653 9C64 A9 0D			lda #$0D
 18654 9C66 8D FE 9F			sta SHOOTS.WIDTH
 18655 9C69 A9 00			lda #$00
 18656 9C6B 8D FF 9F			sta SHOOTS.WIDTH+1
 18657
 18658 				; optimize OK (btm.inc), line = 51
 18659
 18660 9C6E A9 08			lda #$08
 18661 9C70 8D 00 A0			sta SHOOTS.HEIGHT
 18662 9C73 A9 00			lda #$00
 18663 9C75 8D 01 A0			sta SHOOTS.HEIGHT+1
 18664
 18665 				; optimize OK (btm.inc), line = 53
 18666
 18667 9C78 A9 D2			lda #$D2
 18668 9C7A 8D 0A A0			sta FLUX.OFS
 18669 9C7D A9 B3			lda #$B3
 18670 9C7F 8D 0B A0			sta FLUX.OFS+1
 18671 9C82 A9 03			lda #$03
 18672 9C84 8D 0C A0			sta FLUX.OFS+2
 18673 9C87 A9 00			lda #$00
 18674 9C89 8D 0D A0			sta FLUX.OFS+3
 18675
 18676 				; optimize OK (btm.inc), line = 54
 18677
 18678 9C8C A9 08			lda #$08
 18679 9C8E 8D 06 A0			sta FLUX.WIDTH
 18680 9C91 A9 00			lda #$00
 18681 9C93 8D 07 A0			sta FLUX.WIDTH+1
 18682
 18683 				; optimize OK (btm.inc), line = 55
 18684
 18685 9C96 A9 29			lda #$29
 18686 9C98 8D 08 A0			sta FLUX.HEIGHT
 18687 9C9B A9 00			lda #$00
 18688 9C9D 8D 09 A0			sta FLUX.HEIGHT+1
 18689
 18690 				; optimize OK (btm.inc), line = 57
 18691
 18692 9CA0 A9 1A			lda #$1A
 18693 9CA2 8D 92 9F			sta BALLDATA.OFS
 18694 9CA5 A9 B5			lda #$B5
 18695 9CA7 8D 93 9F			sta BALLDATA.OFS+1
 18696 9CAA A9 03			lda #$03
 18697 9CAC 8D 94 9F			sta BALLDATA.OFS+2
 18698 9CAF A9 00			lda #$00
 18699 9CB1 8D 95 9F			sta BALLDATA.OFS+3
 18700
 18701 				; optimize OK (btm.inc), line = 58
 18702
 18703 9CB4 A9 05			lda #$05
 18704 9CB6 8D 8E 9F			sta BALLDATA.WIDTH
 18705 9CB9 A9 00			lda #$00
 18706 9CBB 8D 8F 9F			sta BALLDATA.WIDTH+1
 18707
 18708 				; optimize OK (btm.inc), line = 59
 18709
 18710 9CBE A9 05			lda #$05
 18711 9CC0 8D 90 9F			sta BALLDATA.HEIGHT
 18712 9CC3 A9 00			lda #$00
 18713 9CC5 8D 91 9F			sta BALLDATA.HEIGHT+1
 18714
 18715 				; optimize OK (btm.inc), line = 61
 18716
 18717 9CC8 A9 33			lda #$33
 18718 9CCA 8D 1F A0			sta PATTERN.OFS
 18719 9CCD A9 B5			lda #$B5
 18720 9CCF 8D 20 A0			sta PATTERN.OFS+1
 18721 9CD2 A9 03			lda #$03
 18722 9CD4 8D 21 A0			sta PATTERN.OFS+2
 18723 9CD7 A9 00			lda #$00
 18724 9CD9 8D 22 A0			sta PATTERN.OFS+3
 18725
 18726 				; optimize OK (btm.inc), line = 62
 18727
 18728 9CDC A9 1A			lda #$1A
 18729 9CDE 8D 1B A0			sta PATTERN.WIDTH
 18730 9CE1 A9 00			lda #$00
 18731 9CE3 8D 1C A0			sta PATTERN.WIDTH+1
 18732
 18733 				; optimize OK (btm.inc), line = 63
 18734
 18735 9CE6 A9 18			lda #$18
 18736 9CE8 8D 1D A0			sta PATTERN.HEIGHT
 18737 9CEB A9 00			lda #$00
 18738 9CED 8D 1E A0			sta PATTERN.HEIGHT+1
 18739
 18740 				; optimize OK (btm.inc), line = 65
 18741
 18742 9CF0 A9 A3			lda #$A3
 18743 9CF2 8D 27 A0			sta PATTERN0.OFS
 18744 9CF5 A9 B7			lda #$B7
 18745 9CF7 8D 28 A0			sta PATTERN0.OFS+1
 18746 9CFA A9 03			lda #$03
 18747 9CFC 8D 29 A0			sta PATTERN0.OFS+2
 18748 9CFF A9 00			lda #$00
 18749 9D01 8D 2A A0			sta PATTERN0.OFS+3
 18750
 18751 				; optimize OK (btm.inc), line = 66
 18752
 18753 9D04 A9 1A			lda #$1A
 18754 9D06 8D 23 A0			sta PATTERN0.WIDTH
 18755 9D09 A9 00			lda #$00
 18756 9D0B 8D 24 A0			sta PATTERN0.WIDTH+1
 18757
 18758 				; optimize OK (btm.inc), line = 67
 18759
 18760 9D0E A9 18			lda #$18
 18761 9D10 8D 25 A0			sta PATTERN0.HEIGHT
 18762 9D13 A9 00			lda #$00
 18763 9D15 8D 26 A0			sta PATTERN0.HEIGHT+1
 18764
 18765 				; optimize OK (btm.inc), line = 69
 18766
 18767 9D18 A9 13			lda #$13
 18768 9D1A 8D 2F A0			sta PATTERN1.OFS
 18769 9D1D A9 BA			lda #$BA
 18770 9D1F 8D 30 A0			sta PATTERN1.OFS+1
 18771 9D22 A9 03			lda #$03
 18772 9D24 8D 31 A0			sta PATTERN1.OFS+2
 18773 9D27 A9 00			lda #$00
 18774 9D29 8D 32 A0			sta PATTERN1.OFS+3
 18775
 18776 				; optimize OK (btm.inc), line = 70
 18777
 18778 9D2C A9 0E			lda #$0E
 18779 9D2E 8D 2B A0			sta PATTERN1.WIDTH
 18780 9D31 A9 00			lda #$00
 18781 9D33 8D 2C A0			sta PATTERN1.WIDTH+1
 18782
 18783 				; optimize OK (btm.inc), line = 71
 18784
 18785 9D36 A9 0E			lda #$0E
 18786 9D38 8D 2D A0			sta PATTERN1.HEIGHT
 18787 9D3B A9 00			lda #$00
 18788 9D3D 8D 2E A0			sta PATTERN1.HEIGHT+1
 18789
 18790 				; optimize OK (btm.inc), line = 73
 18791
 18792 9D40 A9 D7			lda #$D7
 18793 9D42 8D 37 A0			sta PATTERN2.OFS
 18794 9D45 A9 BA			lda #$BA
 18795 9D47 8D 38 A0			sta PATTERN2.OFS+1
 18796 9D4A A9 03			lda #$03
 18797 9D4C 8D 39 A0			sta PATTERN2.OFS+2
 18798 9D4F A9 00			lda #$00
 18799 9D51 8D 3A A0			sta PATTERN2.OFS+3
 18800
 18801 				; optimize OK (btm.inc), line = 74
 18802
 18803 9D54 A9 26			lda #$26
 18804 9D56 8D 33 A0			sta PATTERN2.WIDTH
 18805 9D59 A9 00			lda #$00
 18806 9D5B 8D 34 A0			sta PATTERN2.WIDTH+1
 18807
 18808 				; optimize OK (btm.inc), line = 75
 18809
 18810 9D5E A9 23			lda #$23
 18811 9D60 8D 35 A0			sta PATTERN2.HEIGHT
 18812 9D63 A9 00			lda #$00
 18813 9D65 8D 36 A0			sta PATTERN2.HEIGHT+1
 18814
 18815 				; optimize OK (btm.inc), line = 77
 18816
 18817 9D68 A9 09			lda #$09
 18818 9D6A 8D 3F A0			sta PATTERN3.OFS
 18819 9D6D A9 C0			lda #$C0
 18820 9D6F 8D 40 A0			sta PATTERN3.OFS+1
 18821 9D72 A9 03			lda #$03
 18822 9D74 8D 41 A0			sta PATTERN3.OFS+2
 18823 9D77 A9 00			lda #$00
 18824 9D79 8D 42 A0			sta PATTERN3.OFS+3
 18825
 18826 				; optimize OK (btm.inc), line = 78
 18827
 18828 9D7C A9 1C			lda #$1C
 18829 9D7E 8D 3B A0			sta PATTERN3.WIDTH
 18830 9D81 A9 00			lda #$00
 18831 9D83 8D 3C A0			sta PATTERN3.WIDTH+1
 18832
 18833 				; optimize OK (btm.inc), line = 79
 18834
 18835 9D86 A9 1D			lda #$1D
 18836 9D88 8D 3D A0			sta PATTERN3.HEIGHT
 18837 9D8B A9 00			lda #$00
 18838 9D8D 8D 3E A0			sta PATTERN3.HEIGHT+1
 18839
 18840 				; optimize OK (btm.inc), line = 81
 18841
 18842 9D90 A9 35			lda #$35
 18843 9D92 8D 47 A0			sta PATTERN4.OFS
 18844 9D95 A9 C3			lda #$C3
 18845 9D97 8D 48 A0			sta PATTERN4.OFS+1
 18846 9D9A A9 03			lda #$03
 18847 9D9C 8D 49 A0			sta PATTERN4.OFS+2
 18848 9D9F A9 00			lda #$00
 18849 9DA1 8D 4A A0			sta PATTERN4.OFS+3
 18850
 18851 				; optimize OK (btm.inc), line = 82
 18852
 18853 9DA4 A9 1E			lda #$1E
 18854 9DA6 8D 43 A0			sta PATTERN4.WIDTH
 18855 9DA9 A9 00			lda #$00
 18856 9DAB 8D 44 A0			sta PATTERN4.WIDTH+1
 18857
 18858 				; optimize OK (btm.inc), line = 83
 18859
 18860 9DAE A9 1E			lda #$1E
 18861 9DB0 8D 45 A0			sta PATTERN4.HEIGHT
 18862 9DB3 A9 00			lda #$00
 18863 9DB5 8D 46 A0			sta PATTERN4.HEIGHT+1
 18864
 18865 				; optimize OK (arkanoid_vbxe.pas), line = 133
 18866
 18867 9DB8 A9 20			lda #$20
 18868 9DBA 8D 4E A0			sta TOTALWALL
 18869
 18870 				; optimize OK (arkanoid_vbxe.pas), line = 135
 18871
 18872 9DBD A9 50			lda #$50
 18873 9DBF 8D 61 A0			sta SCORE.HISCORE
 18874 9DC2 A9 C3			lda #$C3
 18875 9DC4 8D 62 A0			sta SCORE.HISCORE+1
 18876 9DC7 A9 00			lda #$00
 18877 9DC9 8D 63 A0			sta SCORE.HISCORE+2
 18878 9DCC 8D 64 A0			sta SCORE.HISCORE+3
 18879
 18880 				; optimize OK (arkanoid_vbxe.pas), line = 138
 18881
 18882 9DCF A9 01			lda #$01
 18883 9DD1 8D 8C A0			sta SOUND_ON
 18884
 18885 				; optimize OK (arkanoid_vbxe.pas), line = 139
 18886
 18887 9DD4 A9 03			lda #$03
 18888 9DD6 8D 70 A0			sta LV
 18889 9DD9 A9 00			lda #$00
 18890 9DDB 8D 71 A0			sta LV+1
 18891
 18892 				; --- RepeatUntilProlog
 18893 9DDE			l_3A03
 18894
 18895 				; optimize FAIL ('MAINSCREEN', arkanoid_vbxe.pas), line = 146
 18896
 18897 9DDE 20 BE 97			jsr MAINSCREEN
 18898 9DE1 AD 0B A3			lda MAINSCREEN.RESULT
 18899 9DE4 8D 65 A0			sta SCORE.PL_NUMB
 18900
 18901 				; optimize OK (arkanoid_vbxe.pas), line = 148
 18902
 18903 9DE7 F0 0D			jeq l_3A19
 18904 9DE9 A9 01			lda #$01
 18905 9DEB 8D 17 A3			sta START_GAME.PLAYERS
 18906 9DEE A9 00			lda #$00
 18907 9DF0 8D 18 A3			sta START_GAME.PLAYERS+1
 18908 9DF3 20 0D 98			jsr START_GAME
 18909 9DF6			l_3A19
 18910
 18911 				; optimize OK (arkanoid_vbxe.pas), line = 151
 18912
 18913 9DF6 AD 65 A0			lda SCORE.PL_NUMB
 18914 9DF9 C9 01			cmp #$01
 18915 9DFB B0 E1			jcs l_3A03
 18916
 18917 9DFD			@exit
 18918 					.ifdef @new
 18919 					lda <@VarData
 18920 					sta :ztmp
 18921 					lda >@VarData
 18922 					ldy #@VarDataSize-1
 18923 					jmp @FreeMem
 18924 					els
 18925 9DFD 60				rts						; ret
 18926 					eif
 18927 				.endl
 18928 9DFE			l_0022
 18929
 18930 				; optimize FAIL ('INIT_GAME', arkanoid_vbxe.pas), line = 159
 18931
 18932 9DFE 20 6B 9A			jsr INIT_GAME
 18933
 18934 				; ------------------------------------------------------------
 18935
 18936 = 015E00			VBXE_DATA	= $15E00
 18937 = B100			adr.BLT	= $B100
 18938 9E01			.var BLT	= adr.BLT .word
 18939 = B100			adr.BLT.SRC_ADR	= $B100
 18940 9E01			.var BLT.SRC_ADR	= adr.BLT.SRC_ADR .word
 18941 = B100			BLT.SRC_ADR.BYTE0	= $B100
 18942 = B101			BLT.SRC_ADR.BYTE1	= $B101
 18943 = B102			BLT.SRC_ADR.BYTE2	= $B102
 18944 = B103			BLT.SRC_STEP_Y	= $B103
 18945 = B105			BLT.SRC_STEP_X	= $B105
 18946 = B106			adr.BLT.DST_ADR	= $B106
 18947 9E01			.var BLT.DST_ADR	= adr.BLT.DST_ADR .word
 18948 = B106			BLT.DST_ADR.BYTE0	= $B106
 18949 = B107			BLT.DST_ADR.BYTE1	= $B107
 18950 = B108			BLT.DST_ADR.BYTE2	= $B108
 18951 = B109			BLT.DST_STEP_Y	= $B109
 18952 = B10B			BLT.DST_STEP_X	= $B10B
 18953 = B10C			BLT.BLT_WIDTH	= $B10C
 18954 = B10E			BLT.BLT_HEIGHT	= $B10E
 18955 = B10F			BLT.BLT_AND_MASK	= $B10F
 18956 = B110			BLT.BLT_XOR_MASK	= $B110
 18957 = B111			BLT.BLT_COLLISION_MASK	= $B111
 18958 = B112			BLT.BLT_ZOOM	= $B112
 18959 = B113			BLT.PATTERN_FEATURE	= $B113
 18960 = B114			BLT.BLT_CONTROL	= $B114
 18961 = 9F6A			adr.VBXE_RAM	= DATAORIGIN+$00DF	; [8] OBJECT
 18962 9E01			.var VBXE_RAM	= adr.VBXE_RAM .word
 18963 = 9F6A			VBXE_RAM.POSITION	= DATAORIGIN+$00DF
 18964 = 9F6E			VBXE_RAM.SIZE	= DATAORIGIN+$00E3
 18965 = 5000			VRAM	= $5000
 18966 = 0001			ERR1	= $01
 18967 = 0002			ERR2	= $02
 18968 = 0003			ERR3	= $03
 18969 = 0004			ERR4	= $04
 18970 = 000A			SCRMIN	= $0A
 18971 = 00D8			SCRMAX	= $D8
 18972 = 000C			SCRTOP	= $0C
 18973 = 00C8			SCRBOT	= $C8
 18974 = 0022			VAUS_W	= $22
 18975 = 0004			VAUS_H	= $04
 18976 = 00B8			VAUS_LINE	= $B8
 18977 = 00FF			EMP	= $FF
 18978 = 0005			BALLDIM	= $05
 18979 = 0003			BALLSPOT	= $03
 18980 = 001E			BALLDEV	= $1E
 18981 = 000A			SPEEDFLASH	= $0A
 18982 = 205E			adr.FLASH	= CODEORIGIN+$005E
 18983 9E01			.var FLASH	= adr.FLASH .word
 18984 = 2069			adr.SCORE_WALL	= CODEORIGIN+$0069
 18985 9E01			.var SCORE_WALL	= adr.SCORE_WALL .word
 18986 = 207F			adr.EMERG_DEV	= CODEORIGIN+$007F
 18987 9E01			.var EMERG_DEV	= adr.EMERG_DEV .word
 18988 = 2088			adr.COLORBLOCK	= CODEORIGIN+$0088
 18989 9E01			.var COLORBLOCK	= adr.COLORBLOCK .word
 18990 = 0001			GRAYDOWN	= $01
 18991 = 0001			STARTWALL	= $01
 18992 = 01F4			BALLSPEED	= $01F4
 18993 = 07D0			MAXSPEED	= $07D0
 18994 = 0064			MAXBRWHIT	= $64
 18995 = 0004			PATNUMBER	= $04
 18996 = 2092			adr.POS_DIGIT	= CODEORIGIN+$0092
 18997 9E01			.var POS_DIGIT	= adr.POS_DIGIT .word
 18998 = 2096			adr.DIGITS	= CODEORIGIN+$0096
 18999 9E01			.var DIGITS	= adr.DIGITS .word
 19000 = 20A1			adr.LEVEL	= CODEORIGIN+$00A1
 19001 9E01			.var LEVEL	= adr.LEVEL .word
 19002 = 0258			SBDIR	= $0258
 19003 = 0003			DEFLEVEL	= $03
 19004 = 012C			LETTER_PROB	= $012C
 19005 = 03E8			LETTER_DROP	= $03E8
 19006 = 0008			LETTER_NUMB	= $08
 19007 = 0008			LETTER_FRM	= $08
 19008 = 0005			LETTER_SBF	= $05
 19009 = 20AD			adr.LETTER_DIS	= CODEORIGIN+$00AD
 19010 9E01			.var LETTER_DIS	= adr.LETTER_DIS .word
 19011 = 00B0			FLUXLEVEL	= $B0
 19012 = 9F8E			adr.BALLDATA	= DATAORIGIN+$0103	; [8] RECORD
 19013 9E01			.var BALLDATA	= adr.BALLDATA .word
 19014 = 9F8E			BALLDATA.WIDTH	= DATAORIGIN+$0103
 19015 = 9F90			BALLDATA.HEIGHT	= DATAORIGIN+$0105
 19016 = 9F92			BALLDATA.OFS	= DATAORIGIN+$0107
 19017 = 9F96			adr.PLAYSCREEN	= DATAORIGIN+$010B	; [8] RECORD
 19018 9E01			.var PLAYSCREEN	= adr.PLAYSCREEN .word
 19019 = 9F96			PLAYSCREEN.WIDTH	= DATAORIGIN+$010B
 19020 = 9F98			PLAYSCREEN.HEIGHT	= DATAORIGIN+$010D
 19021 = 9F9A			PLAYSCREEN.OFS	= DATAORIGIN+$010F
 19022 = 9F9E			adr.PLAYVAUS	= DATAORIGIN+$0113	; [8] RECORD
 19023 9E01			.var PLAYVAUS	= adr.PLAYVAUS .word
 19024 = 9F9E			PLAYVAUS.WIDTH	= DATAORIGIN+$0113
 19025 = 9FA0			PLAYVAUS.HEIGHT	= DATAORIGIN+$0115
 19026 = 9FA2			PLAYVAUS.OFS	= DATAORIGIN+$0117
 19027 = 9FA6			adr.NORMAL	= DATAORIGIN+$011B	; [8] RECORD
 19028 9E01			.var NORMAL	= adr.NORMAL .word
 19029 = 9FA6			NORMAL.WIDTH	= DATAORIGIN+$011B
 19030 = 9FA8			NORMAL.HEIGHT	= DATAORIGIN+$011D
 19031 = 9FAA			NORMAL.OFS	= DATAORIGIN+$011F
 19032 = 9FAE			adr.ENLARGED	= DATAORIGIN+$0123	; [8] RECORD
 19033 9E01			.var ENLARGED	= adr.ENLARGED .word
 19034 = 9FAE			ENLARGED.WIDTH	= DATAORIGIN+$0123
 19035 = 9FB0			ENLARGED.HEIGHT	= DATAORIGIN+$0125
 19036 = 9FB2			ENLARGED.OFS	= DATAORIGIN+$0127
 19037 = 9FB6			adr.LASERS	= DATAORIGIN+$012B	; [8] RECORD
 19038 9E01			.var LASERS	= adr.LASERS .word
 19039 = 9FB6			LASERS.WIDTH	= DATAORIGIN+$012B
 19040 = 9FB8			LASERS.HEIGHT	= DATAORIGIN+$012D
 19041 = 9FBA			LASERS.OFS	= DATAORIGIN+$012F
 19042 = 9FBE			adr.EXPLOSION	= DATAORIGIN+$0133	; [8] RECORD
 19043 9E01			.var EXPLOSION	= adr.EXPLOSION .word
 19044 = 9FBE			EXPLOSION.WIDTH	= DATAORIGIN+$0133
 19045 = 9FC0			EXPLOSION.HEIGHT	= DATAORIGIN+$0135
 19046 = 9FC2			EXPLOSION.OFS	= DATAORIGIN+$0137
 19047 = 9FC6			adr.NEWVAUS	= DATAORIGIN+$013B	; [8] RECORD
 19048 9E01			.var NEWVAUS	= adr.NEWVAUS .word
 19049 = 9FC6			NEWVAUS.WIDTH	= DATAORIGIN+$013B
 19050 = 9FC8			NEWVAUS.HEIGHT	= DATAORIGIN+$013D
 19051 = 9FCA			NEWVAUS.OFS	= DATAORIGIN+$013F
 19052 = 9FCE			adr.PRESENTS	= DATAORIGIN+$0143	; [8] RECORD
 19053 9E01			.var PRESENTS	= adr.PRESENTS .word
 19054 = 9FCE			PRESENTS.WIDTH	= DATAORIGIN+$0143
 19055 = 9FD0			PRESENTS.HEIGHT	= DATAORIGIN+$0145
 19056 = 9FD2			PRESENTS.OFS	= DATAORIGIN+$0147
 19057 = 9FD6			adr.SOUNDFX	= DATAORIGIN+$014B	; [8] RECORD
 19058 9E01			.var SOUNDFX	= adr.SOUNDFX .word
 19059 = 9FD6			SOUNDFX.WIDTH	= DATAORIGIN+$014B
 19060 = 9FD8			SOUNDFX.HEIGHT	= DATAORIGIN+$014D
 19061 = 9FDA			SOUNDFX.OFS	= DATAORIGIN+$014F
 19062 = 9FDE			adr.SHINEWALL	= DATAORIGIN+$0153	; [8] RECORD
 19063 9E01			.var SHINEWALL	= adr.SHINEWALL .word
 19064 = 9FDE			SHINEWALL.WIDTH	= DATAORIGIN+$0153
 19065 = 9FE0			SHINEWALL.HEIGHT	= DATAORIGIN+$0155
 19066 = 9FE2			SHINEWALL.OFS	= DATAORIGIN+$0157
 19067 = 9FE6			adr.MINIVAUS	= DATAORIGIN+$015B	; [8] RECORD
 19068 9E01			.var MINIVAUS	= adr.MINIVAUS .word
 19069 = 9FE6			MINIVAUS.WIDTH	= DATAORIGIN+$015B
 19070 = 9FE8			MINIVAUS.HEIGHT	= DATAORIGIN+$015D
 19071 = 9FEA			MINIVAUS.OFS	= DATAORIGIN+$015F
 19072 = 9FEE			adr.LEVELSEL	= DATAORIGIN+$0163	; [8] RECORD
 19073 9E01			.var LEVELSEL	= adr.LEVELSEL .word
 19074 = 9FEE			LEVELSEL.WIDTH	= DATAORIGIN+$0163
 19075 = 9FF0			LEVELSEL.HEIGHT	= DATAORIGIN+$0165
 19076 = 9FF2			LEVELSEL.OFS	= DATAORIGIN+$0167
 19077 = 9FF6			adr.LETTERS	= DATAORIGIN+$016B	; [8] RECORD
 19078 9E01			.var LETTERS	= adr.LETTERS .word
 19079 = 9FF6			LETTERS.WIDTH	= DATAORIGIN+$016B
 19080 = 9FF8			LETTERS.HEIGHT	= DATAORIGIN+$016D
 19081 = 9FFA			LETTERS.OFS	= DATAORIGIN+$016F
 19082 = 9FFE			adr.SHOOTS	= DATAORIGIN+$0173	; [8] RECORD
 19083 9E01			.var SHOOTS	= adr.SHOOTS .word
 19084 = 9FFE			SHOOTS.WIDTH	= DATAORIGIN+$0173
 19085 = A000			SHOOTS.HEIGHT	= DATAORIGIN+$0175
 19086 = A002			SHOOTS.OFS	= DATAORIGIN+$0177
 19087 = A006			adr.FLUX	= DATAORIGIN+$017B	; [8] RECORD
 19088 9E01			.var FLUX	= adr.FLUX .word
 19089 = A006			FLUX.WIDTH	= DATAORIGIN+$017B
 19090 = A008			FLUX.HEIGHT	= DATAORIGIN+$017D
 19091 = A00A			FLUX.OFS	= DATAORIGIN+$017F
 19092 = A00E			adr.VAUS	= DATAORIGIN+$0183	; [13] RECORD
 19093 9E01			.var VAUS	= adr.VAUS .word
 19094 = A00E			VAUS.X	= DATAORIGIN+$0183
 19095 = A00F			VAUS.Y	= DATAORIGIN+$0184
 19096 = A010			VAUS.OLDX	= DATAORIGIN+$0185
 19097 = A012			VAUS.OLDY	= DATAORIGIN+$0187
 19098 = A014			VAUS.OLDLEN	= DATAORIGIN+$0189
 19099 = A016			VAUS.WIDTH	= DATAORIGIN+$018B
 19100 = A017			VAUS.HEIGHT	= DATAORIGIN+$018C
 19101 = A018			VAUS.FLASH	= DATAORIGIN+$018D
 19102 = A019			VAUS.IFLASH	= DATAORIGIN+$018E
 19103 = A01A			VAUS.LETTER	= DATAORIGIN+$018F
 19104 = A01B			adr.PATTERN	= DATAORIGIN+$0190	; [8] RECORD
 19105 9E01			.var PATTERN	= adr.PATTERN .word
 19106 = A01B			PATTERN.WIDTH	= DATAORIGIN+$0190
 19107 = A01D			PATTERN.HEIGHT	= DATAORIGIN+$0192
 19108 = A01F			PATTERN.OFS	= DATAORIGIN+$0194
 19109 = A023			adr.PATTERN0	= DATAORIGIN+$0198	; [8] RECORD
 19110 9E01			.var PATTERN0	= adr.PATTERN0 .word
 19111 = A023			PATTERN0.WIDTH	= DATAORIGIN+$0198
 19112 = A025			PATTERN0.HEIGHT	= DATAORIGIN+$019A
 19113 = A027			PATTERN0.OFS	= DATAORIGIN+$019C
 19114 = A02B			adr.PATTERN1	= DATAORIGIN+$01A0	; [8] RECORD
 19115 9E01			.var PATTERN1	= adr.PATTERN1 .word
 19116 = A02B			PATTERN1.WIDTH	= DATAORIGIN+$01A0
 19117 = A02D			PATTERN1.HEIGHT	= DATAORIGIN+$01A2
 19118 = A02F			PATTERN1.OFS	= DATAORIGIN+$01A4
 19119 = A033			adr.PATTERN2	= DATAORIGIN+$01A8	; [8] RECORD
 19120 9E01			.var PATTERN2	= adr.PATTERN2 .word
 19121 = A033			PATTERN2.WIDTH	= DATAORIGIN+$01A8
 19122 = A035			PATTERN2.HEIGHT	= DATAORIGIN+$01AA
 19123 = A037			PATTERN2.OFS	= DATAORIGIN+$01AC
 19124 = A03B			adr.PATTERN3	= DATAORIGIN+$01B0	; [8] RECORD
 19125 9E01			.var PATTERN3	= adr.PATTERN3 .word
 19126 = A03B			PATTERN3.WIDTH	= DATAORIGIN+$01B0
 19127 = A03D			PATTERN3.HEIGHT	= DATAORIGIN+$01B2
 19128 = A03F			PATTERN3.OFS	= DATAORIGIN+$01B4
 19129 = A043			adr.PATTERN4	= DATAORIGIN+$01B8	; [8] RECORD
 19130 9E01			.var PATTERN4	= adr.PATTERN4 .word
 19131 = A043			PATTERN4.WIDTH	= DATAORIGIN+$01B8
 19132 = A045			PATTERN4.HEIGHT	= DATAORIGIN+$01BA
 19133 = A047			PATTERN4.OFS	= DATAORIGIN+$01BC
 19134 = A04B			STATUS	= DATAORIGIN+$01C0
 19135 = A04C			SUCCESS	= DATAORIGIN+$01C1
 19136 = A04D			REMAIN_BLK	= DATAORIGIN+$01C2
 19137 = A04E			TOTALWALL	= DATAORIGIN+$01C3
 19138 = A04F			adr.SCORE	= DATAORIGIN+$01C4	; [27] RECORD
 19139 9E01			.var SCORE	= adr.SCORE .word
 19140 = A04F			adr.SCORE.PLAYER	= [DATAORIGIN+$01C4] .array [3] .dword
 19141 9E01			.var SCORE.PLAYER	= adr.SCORE.PLAYER .word
 19142 = A05B			adr.SCORE.WALL_N	= [DATAORIGIN+$01D0] .array [3]
 19143 9E01			.var SCORE.WALL_N	= adr.SCORE.WALL_N .word
 19144 = A05E			adr.SCORE.LIVES	= [DATAORIGIN+$01D3] .array [3]
 19145 9E01			.var SCORE.LIVES	= adr.SCORE.LIVES .word
 19146 = A061			SCORE.HISCORE	= DATAORIGIN+$01D6
 19147 = A065			SCORE.PL_NUMB	= DATAORIGIN+$01DA
 19148 = A066			adr.SCORE.ROUNDSEL	= [DATAORIGIN+$01DB] .array [3]
 19149 9E01			.var SCORE.ROUNDSEL	= adr.SCORE.ROUNDSEL .word
 19150 = A069			SCORE.ABORTPLAY	= DATAORIGIN+$01DE
 19151 = A06A			CUR_PLAYER	= DATAORIGIN+$01DF
 19152 = A06B			adr.SHINEREC	= DATAORIGIN+$01E0	; [5] RECORD
 19153 9E01			.var SHINEREC	= adr.SHINEREC .word
 19154 = A06B			SHINEREC.XB	= DATAORIGIN+$01E0
 19155 = A06C			SHINEREC.YB	= DATAORIGIN+$01E1
 19156 = A06D			SHINEREC.FRAME	= DATAORIGIN+$01E2
 19157 = A06E			SHINEREC.BLOCK	= DATAORIGIN+$01E3
 19158 = A06F			SHINEREC.ACTIVE	= DATAORIGIN+$01E4
 19159 = A070			LV	= DATAORIGIN+$01E5
 19160 = A072			TRAINER	= DATAORIGIN+$01E7
 19161 = A073			adr.LETT	= DATAORIGIN+$01E8	; [17] RECORD
 19162 9E01			.var LETT	= adr.LETT .word
 19163 = A073			LETT.X	= DATAORIGIN+$01E8
 19164 = A074			LETT.Y	= DATAORIGIN+$01E9
 19165 = A075			LETT.TYP	= DATAORIGIN+$01EA
 19166 = A077			LETT.FRAME	= DATAORIGIN+$01EC
 19167 = A078			LETT.SUBFRAME	= DATAORIGIN+$01ED
 19168 = A079			LETT.ACTIVE	= DATAORIGIN+$01EE
 19169 = A07A			LETT.INCOMING	= DATAORIGIN+$01EF
 19170 = A07C			LETT.NEXTX	= DATAORIGIN+$01F1
 19171 = A07E			LETT.NEXTY	= DATAORIGIN+$01F3
 19172 = A080			LETT.NEXTTYPE	= DATAORIGIN+$01F5
 19173 = A082			LETT.LAST	= DATAORIGIN+$01F7
 19174 = A084			adr.FIRE	= DATAORIGIN+$01F9	; [5] RECORD
 19175 9E01			.var FIRE	= adr.FIRE .word
 19176 = A084			FIRE.X	= DATAORIGIN+$01F9
 19177 = A085			FIRE.Y	= DATAORIGIN+$01FA
 19178 = A086			FIRE.SHOT	= DATAORIGIN+$01FB
 19179 = A087			FIRE.AVL	= DATAORIGIN+$01FC
 19180 = A088			FIRE.NW	= DATAORIGIN+$01FD
 19181 = A089			BALLS_IN_PLAY	= DATAORIGIN+$01FE
 19182 = A08A			SCRFLUX	= DATAORIGIN+$01FF
 19183 = A08B			SCRFLUXCNT	= DATAORIGIN+$0200
 19184 = A08C			SOUND_ON	= DATAORIGIN+$0201
 19185 = A08D			HLP	= DATAORIGIN+$0202
 19186 = A08F			F_HLP	= DATAORIGIN+$0204
 19187 = C000			adr.ROW	= $C000
 19188 9E01			.var ROW	= adr.ROW .word
 19189 = C200			adr.TMP	= $C200
 19190 9E01			.var TMP	= adr.TMP .word
 19191 = C300			adr.MODY	= $C300
 19192 9E01			.var MODY	= adr.MODY .word
 19193 = C400			adr.MODX	= $C400
 19194 9E01			.var MODX	= adr.MODX .word
 19195 = C500			adr.SCANLINE	= $C500
 19196 9E01			.var SCANLINE	= adr.SCANLINE .word
 19197 = D800			adr.WALL_P	= $D800
 19198 9E01			.var WALL_P	= adr.WALL_P .word
 19199 = DB00			adr.WALL	= $DB00
 19200 9E01			.var WALL	= adr.WALL .word
 19201 = DC00			adr.ALL_WALLS	= $DC00
 19202 9E01			.var ALL_WALLS	= adr.ALL_WALLS .word
 19203 9E01			@exit
 19204
 19205 9E01 A2 00		@halt	ldx #$00
 19206 9E03 9A				txs
 19207
 19208 					.ifdef MAIN.@DEFINES.ROMOFF
 19209 9E04 EE 01 D3			inc portb
 19210 					.fi
 19211
 19212 9E07 A0 01			ldy #$01
 19213
 19214 9E09 60				rts
 19215
 19216 				; ------------------------------------------------------------
 19217
 19218 9E0A			.local	@DEFINES
 19219 9E0A			ATARI
 19220 9E0A			CPU_6502
 19221 9E0A			ROMOFF
 19222 				.endl
 19223
 19224 9E0A			.local	@RESOURCE
 19225 				.endl
 19226
 19227 = 9E0A 00 B1		BLT
 19227 = 9E0C 00 B1		BLT.SRC_ADR
 19227 = 9E0E 06 B1		BLT.DST_ADR
 19227 = 9E10 6A 9F		VBXE_RAM
 19227 = 9E12 5E 20		FLASH
 19227 = 9E14 69 20		SCORE_WALL
 19227 = 9E16 7F 20		EMERG_DEV
 19227 = 9E18 88 20		COLORBLOCK
 19227 = 9E1A 92 20		POS_DIGIT
 19227 = 9E1C 96 20		DIGITS
 19227 = 9E1E A1 20		LEVEL
 19227 = 9E20 AD 20		LETTER_DIS
 19227 = 9E22 8E 9F		BALLDATA
 19227 = 9E24 96 9F		PLAYSCREEN
 19227 = 9E26 9E 9F		PLAYVAUS
 19227 = 9E28 A6 9F		NORMAL
 19227 = 9E2A AE 9F		ENLARGED
 19227 = 9E2C B6 9F		LASERS
 19227 = 9E2E BE 9F		EXPLOSION
 19227 = 9E30 C6 9F		NEWVAUS
 19227 = 9E32 CE 9F		PRESENTS
 19227 = 9E34 D6 9F		SOUNDFX
 19227 = 9E36 DE 9F		SHINEWALL
 19227 = 9E38 E6 9F		MINIVAUS
 19227 = 9E3A EE 9F		LEVELSEL
 19227 = 9E3C F6 9F		LETTERS
 19227 = 9E3E FE 9F		SHOOTS
 19227 = 9E40 06 A0		FLUX
 19227 = 9E42 0E A0		VAUS
 19227 = 9E44 1B A0		PATTERN
 19227 = 9E46 23 A0		PATTERN0
 19227 = 9E48 2B A0		PATTERN1
 19227 = 9E4A 33 A0		PATTERN2
 19227 = 9E4C 3B A0		PATTERN3
 19227 = 9E4E 43 A0		PATTERN4
 19227 = 9E50 4F A0		SCORE
 19227 = 9E52 4F A0		SCORE.PLAYER
 19227 = 9E54 5B A0		SCORE.WALL_N
 19227 = 9E56 5E A0		SCORE.LIVES
 19227 = 9E58 66 A0		SCORE.ROUNDSEL
 19227 = 9E5A 6B A0		SHINEREC
 19227 = 9E5C 73 A0		LETT
 19227 = 9E5E 84 A0		FIRE
 19227 = 9E60 00 C0		ROW
 19227 = 9E62 00 C2		TMP
 19227 = 9E64 00 C3		MODY
 19227 = 9E66 00 C4		MODX
 19227 = 9E68 00 C5		SCANLINE
 19227 = 9E6A 00 D8		WALL_P
 19227 = 9E6C 00 DB		WALL
 19227 = 9E6E 00 DC		ALL_WALLS
 19227 				.endl							; MAIN
 19228
 19229 				; ------------------------------------------------------------
 19230 				; ------------------------------------------------------------
 19231
 19232 				.macro	UNITINITIALIZATION
 19233 				
 19234 					.ifdef MAIN.SYSTEM.@UnitInit
 19235 					jsr MAIN.SYSTEM.@UnitInit
 19236 					.fi
 19237 				
 19238 					.ifdef MAIN.ATARI.@UnitInit
 19239 					jsr MAIN.ATARI.@UnitInit
 19240 					.fi
 19241 				
 19242 					.ifdef MAIN.CRT.@UnitInit
 19243 					jsr MAIN.CRT.@UnitInit
 19244 					.fi
 19245 				
 19246 					.ifdef MAIN.TYPES.@UnitInit
 19247 					jsr MAIN.TYPES.@UnitInit
 19248 					.fi
 19249 				
 19250 					.ifdef MAIN.GRAPH.@UnitInit
 19251 					jsr MAIN.GRAPH.@UnitInit
 19252 					.fi
 19253 				
 19254 					.ifdef MAIN.VBXE.@UnitInit
 19255 					jsr MAIN.VBXE.@UnitInit
 19256 					.fi
 19257 				
 19258 					.ifdef MAIN.JOYSTICK.@UnitInit
 19259 					jsr MAIN.JOYSTICK.@UnitInit
 19260 					.fi
 19261 				.endm
 19262
 19263 				; ------------------------------------------------------------
 19264
 19265 					ift .SIZEOF(MAIN.SYSTEM) > 0
 19266 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 19266 				SYSTEM: $2ABC..$33A4
 19267 					eif
 19268
 19269 					ift .SIZEOF(MAIN.ATARI) > 0
 19270 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 19271 					eif
 19272
 19273 					ift .SIZEOF(MAIN.CRT) > 0
 19274 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 19275 					eif
 19276
 19277 					ift .SIZEOF(MAIN.TYPES) > 0
 19278 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
 19279 					eif
 19280
 19281 					ift .SIZEOF(MAIN.GRAPH) > 0
 19282 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
 19282 				GRAPH: $33A5..$33A6
 19283 					eif
 19284
 19285 					ift .SIZEOF(MAIN.VBXE) > 0
 19286 					.print 'VBXE: ',MAIN.VBXE,'..',MAIN.VBXE+.SIZEOF(MAIN.VBXE)-1
 19286 				VBXE: $33A7..$3946
 19287 					eif
 19288
 19289 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 19290 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 19290 				JOYSTICK: $3947..$394E
 19291 					eif
 19292
 19293 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 19293 				CODE: $2000..$9E09
 19294
 19295 					ift .SIZEOF(MAIN.@RESOURCE)>0
 19296 				.nowarn	.print 'RESOURCE: ',MAIN.@RESOURCE,'..',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE)-1
 19297 					eif
 19298
 19299 9E70			@end
 19300
 19301 				.nowarn	.print 'VARS: ',MAIN.@RESOURCE+.SIZEOF(MAIN.@RESOURCE),'..',@end-1
 19301 				VARS: $9E0A..$9E6F
 19302
 19303 				; ------------------------------------------------------------
 19304
 19305 = 9E70				?adr = *
 19306 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
 19307 = 9E8B				?adr = ?old_adr
 19308 					eif
 19309
 19310 					org ?adr
 19311 = 9E8B				?old_adr = *
 19312
 19313 9E8B			DATAORIGIN
 19314 9E8B-9EDE> 2D 0C 00 00 + .by  $2D $0C $00 $00 $00 $28 $00 $18  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19315 9EA3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19316 9EBB 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 19317 9ED3 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17
 19318
 19319 = 0054			VARINITSIZE	= *-DATAORIGIN
 19320 = 048F			VARDATASIZE	= 1167
 19321
 19322 = A31A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 19323
 19324 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 19324 				DATA: $9E8B..$A31A
 19325
 19326 					ert DATAORIGIN<@end,'DATA memory overlap'
 19327
 19328 02E0-02E1> 2F 2A			run START
 19329
 19330 				; ------------------------------------------------------------
 19331
 19332 				.macro	STATICDATA
 19333 				.by  $11 $56 $42 $58 $45 $20 $6E $6F  $74 $20 $64 $65 $74 $65 $63 $74  $65 $64 $0B $47 $61 $6D $65 $20
 19334 				.by  $50 $61 $75 $73 $65 $64 $00 $00  $00 $00 $00 $00 $AA $00 $00 $AA  $00 $00 $00 $55 $AA $00 $AA $00
 19335 				.by  $00 $00 $AA $00 $AA $00 $AA $AA  $00 $00 $AA $AA $AA $00 $55 $55  $55 $00 $55 $55 $FF $00 $55 $FF
 19336 				.by  $55 $00 $55 $FF $FF $00 $FF $55  $55 $00 $FF $55 $FF $00 $FF $FF  $55 $00 $FF $FF $FF $00 $FF $D4
 19337 				.by  $D3 $D2 $D1 $D0 $CF $CE $CD $CC  $CB $00 $00 $0A $00 $14 $00 $1E  $00 $28 $00 $32 $00 $64 $00 $C8
 19338 				.by  $00 $FA $00 $F4 $01 $E8 $03 $00  $02 $13 $24 $35 $12 $23 $34 $45  $D4 $D3 $D2 $D1 $D0 $CF $CE $CD
 19339 				.by  $CC $CB $00 $3C $5D $80 $7D $60  $37 $67 $6A $4F $5F $61 $7F $6F  $00 $00 $00 $E8 $03 $2C $01 $64
 19340 				.by  $00 $3C $00 $23 $00 $00 $10 $14  $03 $12 $14 $14 $03
 19341 				.endm
 19342
 19343 					end
